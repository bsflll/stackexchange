{
    "title": "How to decompile a C# .exe on macOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/15351/how-to-decompile-a-c-exe-on-macos",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It this even possible? Are there any free tools?</p>\n</div>",
    "votes": "11",
    "answers": 4,
    "views": "20k",
    "tags": [
        "decompilation",
        "c#"
    ],
    "user": "ttt",
    "time": "May 15, 2017 at 15:26",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">Did you try those <a href=\"https://github.com/aerror2/ILSpy-For-MacOSX\" rel=\"nofollow noreferrer\">github.com/aerror2/ILSpy-For-MacOSX</a> or <a href=\"http://tirania.org/blog/archive/2011/Feb-04.html\" rel=\"nofollow noreferrer\">tirania.org/blog/archive/2011/Feb-04.html</a>.</span>",
            "time": null
        },
        {
            "user": "ttt",
            "text": "<span class=\"comment-copy\">I did, but after i build the project and run the .exe with mono, i get an error. I get this: <code>Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object</code>. I may debug the project in the future to find the issue if no easier solution will arise till then. :)</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">It depends on the complexity of the original executable, but in general debugger is the way to solve the problem.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Visual Studio for Mac can do the job. Just hit <code>File / Open</code> and then choose the <code>executable or library</code> you want. It'll open the <code>Assembly Browser</code> window.</p>\n<p>If you need more detailed code change the <code>Visibility</code> to <code>All members</code> and the Language to <code>C#</code>.</p>\n<p><a href=\"https://i.sstatic.net/SmAUj.png\" rel=\"noreferrer\"><img alt=\"Visibility\" src=\"https://i.sstatic.net/SmAUj.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/ZpT6F.png\" rel=\"noreferrer\"><img alt=\"Language\" src=\"https://i.sstatic.net/ZpT6F.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/QL7FI.png\" rel=\"noreferrer\"><img alt=\"decompiled\" src=\"https://i.sstatic.net/QL7FI.png\"/></a></p>\n</div>",
            "votes": "13",
            "user": "gandarez",
            "time": "Feb 14, 2019 at 22:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">but this way doesn't give you the code. Only the signatures of the methods.</span>",
                    "time": null
                },
                {
                    "user": "gandarez",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik yes you can do, just take a look at my updated post.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Yup. My mistake.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Best free tool for the job is ILSpy, but it runs on Windows. This gives you a limited list of options:</p>\n<ol>\n<li><p>create a windows virtual machine (with virtualbox or vmware player) and run it in there</p></li>\n<li><p>install WINE on mac, to allow you run .exe files.</p></li>\n<li><p>get visual studio for mac and use ikdasm</p></li>\n<li><p>if you feel hardcore, open it in a disassembler ;)</p></li>\n</ol>\n<p>Being an IT guy myself, I would go for the first solution. Check them all out briefly and go for one!</p>\n</div>",
            "votes": "5",
            "user": "Chris Tsiakoulas",
            "time": "May 21, 2017 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">for point 3, there's no tool called ildasm. The tools that are included VS for Mac are called ikdasm or monodis</span>",
                    "time": null
                },
                {
                    "user": "Chris Tsiakoulas",
                    "text": "<span class=\"comment-copy\">Thnks for the notice! I corected it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use Jetbrains' Rider. It has a 30 day free trial period.</p>\n<ol>\n<li>Open Rider and open or create a C# project</li>\n<li>Add a dependency to the .exe file (naturally, this also works for .dll). </li>\n</ol>\n<p><a href=\"https://i.sstatic.net/d1vwd.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/d1vwd.png\"/></a></p>\n<ol start=\"3\">\n<li>In a class in your project, import the package and type the class you want to inspect. </li>\n</ol>\n<p><a href=\"https://i.sstatic.net/2lA0A.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2lA0A.png\"/></a></p>\n<ol start=\"4\">\n<li>Do Command+click or Command+B on the class name to trigger Rider's decompile option. Confirm if necessary. </li>\n</ol>\n<p>The disadvantage is that we have to repeat step 4 for each class we want to decompile.</p>\n</div>",
            "votes": "2",
            "user": "jbarrameda",
            "time": "Mar 15, 2018 at 12:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">it looks like you were too fast. Point 4 is incomplete and 5 is missing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is this even possible?</p>\n</blockquote>\n<p>Generally yes, with a couple of exceptions:</p>\n<ul>\n<li>Starting with .NET Core and now .NET the <code>.exe</code> files produced by the compilation of applications are not CLR assemblies but native assemblies. CLR assemblies contain <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">IL</a> and are decompilable to C# while native assemblies contain machine code and cannot be decompiled to C#.</li>\n</ul>\n<p><em>Hint: in that scenario one should decompile the <code>.dll</code> with the same name. That's the file that contains the compiled C# code.</em></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\" rel=\"nofollow noreferrer\">Ahead-of-Time</a> compiled <code>.exe</code> files are also not CLR assemblies and cannot be decompiled to C#</li>\n</ul>\n<blockquote>\n<p>Are there any free tools?</p>\n</blockquote>\n<p>Yes, there are. One such tool is <a href=\"https://decompiler.codemerx.com\" rel=\"nofollow noreferrer\">CodemerxDecompile</a> - the spiritual successor of the popular JustDecompile. While JustDecompile is Windows only, CodemerxDecompile is a multi-platform decompiler that runs on Windows, Linux and MacOS.</p>\n<p><em>Disclosure: I'm part of the team behind CodemerxDecompile.</em></p>\n</div>",
            "votes": "0",
            "user": "Alexander Dimitrov",
            "time": "Mar 22, 2024 at 14:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}