{
    "title": "How can I deal with exception handler in Visual C/C++ inline assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/17948/how-can-i-deal-with-exception-handler-in-visual-c-c-inline-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have disassembled a function in IDA Pro and I want to compile it into my project in visual c inline assembly... I'm still a newbie, so let me apologize if I don't use the right terminology...(I'm not an English native speaker) I have come up with this disassembly with IDA Pro:</p>\n<pre><code>push    ebp\nmov     ebp, esp\npush    0FFFFFFFFh\npush    offset stru_xxxxx\n</code></pre>\n<p>and if I follow <code>offset stru_xxxxx</code>, I see this</p>\n<pre><code>stru_xxxxx   _SCOPETABLE_ENTRY &lt;0FFFFFFFFh, 0, offset locxxxxx&gt; \n</code></pre>\n<p><code>offset locxxxxx</code> is the location of the function (<code>xor ebx, ebx</code>      Finally handler 0 for function XXXXXX)</p>\n<p>Now, I'm aware it is a <strong>seh exception</strong> in C, but how can I reproduce it in inline assembly?  How can I declare <code>stru_xxxxx</code>?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "218",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "dark94",
    "time": "Jul 10, 2018 at 8:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can declare struct in c and access them in assembly </p>\n<pre><code>typedef struct _SCOPETABLE_ENTRY {\n    DWORD EnclosingLevel;\n    void* FilterFunc;\n    void* HandlerFunc;\n}ScopeTable, *PscpopeTable;\nvoid * SomeFilt() {\n    return &amp;SomeFilt;\n}\nvoid * SomeHandler() {\n    return &amp;SomeHandler;\n}\nint main() {\n    printf(\"%20s%p\\n%20s%p\\n\",\n        \"Somefilt Addr = \", SomeFilt(), \"SomeHandler Addr = \", SomeHandler());\n    ScopeTable foo = { 0 };\n    printf(\"Enclosing Level %x FilterFunc = %p HandlerFunc = %p\\n\",\n        foo.EnclosingLevel, foo.FilterFunc, foo.HandlerFunc);\n    __asm {\n        lea ebx, foo\n        mov[ebx]foo.EnclosingLevel, 1\n        mov[ebx]foo.FilterFunc, offset SomeFilt\n        mov[ebx]foo.HandlerFunc, offset SomeHandler\n    }\n    printf(\"Enclosing Level %x FilterFunc = %p HandlerFunc = %p\\n\",\n        foo.EnclosingLevel, foo.FilterFunc, foo.HandlerFunc);\n    return 0;\n}\n</code></pre>\n<p>and executing this</p>\n<pre><code>    Somefilt Addr = 0006137F\n SomeHandler Addr = 00061384\nEnclosing Level 0 FilterFunc = 00000000 HandlerFunc = 00000000\nEnclosing Level 1 FilterFunc = 0006137F HandlerFunc = 00061384\nPress any key to continue . . .\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 10, 2018 at 15:21",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>SEH is not supported in inline assembly, you should use C syntax for it. </p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 10, 2018 at 11:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}