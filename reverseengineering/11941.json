{
    "title": "Static analysis of Windows executable from a Linux platform",
    "link": "https://reverseengineering.stackexchange.com/questions/11941/static-analysis-of-windows-executable-from-a-linux-platform",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to do some static analysis on crackmes written for Windows on a Linux platform. I am using <code>radare2</code>. My problem is that most of the time I am unable to find the \"real\" code, for example the main function in a C/C++ application. <a href=\"https://stackoverflow.com/questions/5475790/how-to-disassemble-the-main-function-of-a-stripped-application\">Here</a> is a method for this by looking for a call to <code>__libc_start_main@plt</code>, but I think this is only for Linux. For Linux executables <code>radare2</code> usually shows a <code>sym.main</code> function, but not for Windows executables. In one case I spotted accidentally a <code>sym._main</code>, but I did not find it in other executables. Is there any method or tool which can solve my problem? I am looking for ideas for approaching both Assembly and C/C++ applications.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "4k",
    "tags": [
        "disassembly",
        "windows",
        "linux",
        "radare2"
    ],
    "user": "robert",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">start from entry0 in windows this would be the address where execution starts and most likely be WinMainCrt   the path from here to actual winmain() is rather common (standard compiler generated code)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In case of Windows executables, the exe file has to export only the <code>start</code> entry point. Other entries can be exported also, but the first exported entry will be the starting point of the executable performing initialization actions. It is similar to the Linux case as it was described in your linked method, although the actual implementation of the start function is depend from your compiler.</p>\n<p>If the symbols are stripped, you can find the <code>main</code> function by reversing the code from the <code>start</code>. Since the <code>start</code> is preforming initialization tasks, you will find the main somewhere near to the end of the <code>start</code> function. As an example, see the following image showing the main function of the <code>calc.exe</code>.</p>\n<p><a href=\"https://i.sstatic.net/RvpSQ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/RvpSQ.png\"/></a></p>\n<p>As you see, after the main was called, no more initialization steps is required, so the application can exit by calling the <code>exit</code> or <code>_cexit</code> library functions depending on the return value of the <code>main</code>.</p>\n</div>",
            "votes": "2",
            "user": "ebux",
            "time": "Feb 4, 2016 at 9:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">This is compiler-induced, the PE format doesn't have to export start.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would suggest you tried out using OllyDbg with WINE. Kali linux has this combo pre-installed for that puprose and it works in every platform wine supports (ubuntu, open-suse, etc.).</p>\n</div>",
            "votes": "0",
            "user": "Chris Tsiakoulas",
            "time": "Feb 4, 2016 at 9:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}