{
    "title": "Getting Encryption Method When I Know Encrypted File Name & Original File Name",
    "link": "https://reverseengineering.stackexchange.com/questions/9544/getting-encryption-method-when-i-know-encrypted-file-name-original-file-name",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm busy trying to decrypt some game data.  All the encrypted filenames are hexadecimal strings with the same length e.g. <code>1790C6E445C7E38EFCD5B3042F9B4443</code>.</p>\n<p>I've figured out that a few of the files are unencrypted OGG files, and I've used the <code>strings</code> command to find a list of the <code>.ogg</code> strings contained within the game binary.</p>\n<p>Now I'm wondering, is there any way to find out how the file name was created, given the original? </p>\n<p>And would it be possible to recreate the directory structure somehow (right now it's all flat, but according to the strings I've found, there should be directories).</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "413",
    "tags": [
        "decompilation",
        "decryption",
        "hex",
        "xor"
    ],
    "user": "Tspoon",
    "time": "Aug 3, 2015 at 19:58",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">What makes you think the file names are encrypted? The fact that they're all of the same length suggests that they're in fact not encrypted.</span>",
            "time": null
        },
        {
            "user": "Tspoon",
            "text": "<span class=\"comment-copy\">@JasonGeffner: I guess encrypted was the wrong word? (I have very limited experience in this area).  Maybe obfuscated is the correct term? Can I ask why the fact that they're all the same length suggests they're not encrypted?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">There's typically (though not always) a correlation between plaintext length and ciphertext length. It's unlikely that each plaintext file name was of the same length, and given that each ciphertext is of the same length, it suggests that this probably isn't encryption.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This looks like it could be some hash over the original filename, and because they have 32 characters in length, it's likely to be a md5 hash. Or, it might be one of the sha* variants, cut after 32 characters.</p>\n<p>If you have access to a linux system, you could try something like </p>\n<pre><code>$ echo -n 'introduction.ogg' | md5sum\ndc8f2a080281b924622580a8d662874c\n</code></pre>\n<p>and if that doesn't match, try <code>sha1sum</code>, <code>sha224sum</code>, <code>sha256sum</code>, <code>sha384sum</code>, <code>sha512sum</code> instead. These all result in longer results, so your filename might be at the start, the end, or somewhere in the middle of the result.</p>\n<p>Or, just paste your file name into this <a href=\"https://defuse.ca/checksums.htm\" rel=\"nofollow\">online tool</a> which has those and many more algorithms.</p>\n<p>The bad news is, you won't be able to guess the original filename from the hash. All these hashes are (intended to be) one-way functions - it's easy to get the hash from the original data, but there's no way back. This is why hashes like these are used for password storage - you can verify a password by encrypting it, but you can't get at the password from the hash.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Aug 3, 2015 at 20:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tspoon",
                    "text": "<span class=\"comment-copy\">Nice!  That was exactly it - thanks.  Pity about not being able to recover the file names though :/  Still though - one mystery solved!</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">in windows you can use utilities like hashmyfiles (nirsoft)  C:\\hashmyfiles\\makehash&gt;copy con inhash.txt introduction.ogg^Z         1 file(s) copied.  C:\\hashmyfiles\\makehash&gt;..\\HashMyFiles.exe /file inhash.txt /stext outhash.txt  C:\\hashmyfiles\\makehash&gt;cat outhash.txt ================================================== Filename          : inhash.txt MD5               : dc8f2a080281b924622580a8d662874c SHA1              : ca93b978c255ef2c8546b8ec14c3bfd7fd4b5e8c CRC32             : 527a3a01 SHA-256           : a59b9b9b95c8a641498251a7ef406365e01769d8d2bbc19a4b1536908961 96fb</span>",
                    "time": null
                }
            ]
        }
    ]
}