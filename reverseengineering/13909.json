{
    "title": "Interpret binary format of matrix files provided (*.mtx)",
    "link": "https://reverseengineering.stackexchange.com/questions/13909/interpret-binary-format-of-matrix-files-provided-mtx",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can't figure out exactly how these binary matrix files are formatted, other than the 2 little-endian 32-bit unsigned integers in the header. Supposedly the following is a 3x3 identity matrix:</p>\n<pre><code>0300 0000 0300 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f \n</code></pre>\n<p>And the following is a 3x2 matrix with arbitrary numbers whose value I'm not certain of:</p>\n<pre><code>0300 0000 0200 0000 0000 803f 0000 4040\n0000 a040 0000 0040 0000 8040 0000 c040\n</code></pre>\n<p>Basically, is there an encoding where <code>0000 803f</code> can translate to a value of <code>1</code> while <code>0000 0000</code> translates to <code>0</code> for each of the matrix values?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "512",
    "tags": [
        "file-format",
        "binary-diagnosis"
    ],
    "user": "Patrick Roberts",
    "time": "Nov 12, 2016 at 19:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You've correctly identified the first four bytes as the header or matrix shape.</p>\n<p>If you were to remove those shape bytes and realign the rest of the hex string, the identify matrix becomes very clear:</p>\n<pre><code>0000 803f 0000 0000 0000 0000\n0000 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f \n</code></pre>\n<p>We can easily see here that the text aligns to the shape of an identity matrix, a cell is four bytes, and the value of <code>0000 803f</code> represents <code>1</code>.</p>\n<p>This just happens to be the <a href=\"https://en.wikipedia.org/wiki/IEEE_floating_point\" rel=\"nofollow noreferrer\">IEEE 754</a> encoding of <code>1.0</code>. This is either something you can recognise with some experience or have python show you:</p>\n<pre><code>In [1]: import struct\n\nIn [3]: struct.unpack('f', \"0000803f\".decode('hex'))\nOut[3]: (1.0,)\n</code></pre>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Nov 12, 2016 at 20:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rhymoid",
                    "text": "<span class=\"comment-copy\">Note that this code implicitly depends on the endianness and size of <code>float</code> of the host system. To always decode little-endian binary32 floats, use the format string <code>'&lt;f'</code> instead of <code>'f'</code>.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Rhymoid +1 however I assumed the code that writes the file does the native as well, so <code>@f</code> is what you'd want.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Oh, I just figured it out. I can interpret each of the following 4 byte values after the header as 32-bit signed floating point values in little-endian format. <code>0000 803f</code> would be equivalent to <code>1.0f</code>.</p>\n<p>I determined this in node.js using a <code>DataView</code>:</p>\n<pre><code>const u = new Uint8Array(4);\nconst d = new DataView(u.buffer);\n\nu[0] = 0x00;\nu[1] = 0x00;\nu[2] = 0x80;\nu[3] = 0x3f;\n\n// interpret 4 bytes at offset of 0 bytes as little-endian 32-bit float\n// DataView.prototype.getFloat32(byteOffset[, littleEndian])\nconsole.log(d.getFloat32(0, true));\n// outputs 1\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Patrick Roberts",
            "time": "Nov 12, 2016 at 20:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. I was just answering that :(</span>",
                    "time": null
                },
                {
                    "user": "Patrick Roberts",
                    "text": "<span class=\"comment-copy\">@NirIzr sorry about that. These files were for a class assignment and my professor didn't bother explaining how the files were formatted. You may finish answering and I'll upvote you for the trouble.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes, I was going to answer anyway, just dropped the 010editor colorful images :P</span>",
                    "time": null
                }
            ]
        }
    ]
}