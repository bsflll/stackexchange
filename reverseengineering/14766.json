{
    "title": "File Reverse Engineering â€“ League of Legends WAD File Header Hash",
    "link": "https://reverseengineering.stackexchange.com/questions/14766/file-reverse-engineering-league-of-legends-wad-file-header-hash",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking to edit League of Legends's WAD files, but the developers of the game have recently decided to add a sort of hash to these files to check if their content is valid. Unfortunately, no one has been able to crack the code yet. I'm hoping someone might have at least an idea on what it could be.</p>\n<p>Here are a few files that I extracted (the ones in the \"old\" directory are older files that also have a hash that you can use for comparison):\n<a href=\"https://drive.google.com/file/d/0B5fV4q6wLg7bTUE2VHc5aW5Ca00\" rel=\"nofollow noreferrer\">https://drive.google.com/file/d/0B5fV4q6wLg7bTUE2VHc5aW5Ca00</a></p>\n<p>The unknown \"hash\" value is bytes 4 to 87 (84 bytes long). I looked at <a href=\"https://github.com/Pupix/lol-wad-parser\" rel=\"nofollow noreferrer\">this GitHub project</a> to get started, but the person that wrote the code does not seem to know what that header means either. What I also found odd about the header is that it seems to vary in length (the end is padded with a different amount of null values in some files). At first I thought they might be using a variant of SHA or another hashing algorithm, but I'm no longer sure if that is the case because of the varying length, and I am definitely not a hashing professional.</p>\n<p>If it helps, you can also download the \"Wooxy\" program, a League of Legends file extractor/editor program, to extract, edit, and update the game files yourself.</p>\n<p>Even if you don't know the exact answer, any bit of help is highly appreciated!</p>\n<p><strong>EDIT:</strong> This is what appears in the game's log when it attempts to load an edited WAD file:</p>\n<pre><code>000036.460|  ERROR| ?:0: attempt to call global 'GetHashedGameObjName' (a nil value)\n000037.499| ALWAYS| Begin Game Object Update\n000037.936| ALWAYS| WadFile mount: DATA/FINAL/Champions/Chogath.wad (FAILED)\n000037.937| ALWAYS| Riot::RADS::Reader::SignalSoftRepair: Wrote soft repair file to C:/Riot Games/League of Legends/RADS/solutions/lol_game_client_sln/releases/0.0.1.163/SOFT_REPAIR. This will cause the patcher to repair your installation.\n000037.937|  ERROR| Assertion failed!\n\nExpression: ALE-18967997\n\nDescription: FATAL ERROR - WadFile mount failed: Champions/Chogath.wad\n000039.411|  ERROR| Crash Occurred\n</code></pre>\n<p><strong>EDIT 2:</strong> There also seems to be an unknown value between bytes 88 and 95 (8 bytes long). Changing the bytes doesn't seem to crash the game, though.</p>\n<p><strong>EDIT 3:</strong> I found out that the header looks like it's separated into 2 parts. Byte 4 indicates the total length of the header (without <code>00</code> padding). Byte 8 indicates the length of the first \"chunk\". After that amount of bytes, there is a <code>02</code>, and the byte after that indicates the length of the second \"chunk\". After that second bit, there are <code>00</code>s until byte 87.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "5k",
    "tags": [
        "file-format"
    ],
    "user": "Nicolas Gnyra",
    "time": "Feb 28, 2017 at 5:21",
    "comments": [
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">So you're basically trying to solve this by black-box only? Did you try to look at the WAD loading part in the binary?</span>",
            "time": null
        },
        {
            "user": "Nicolas Gnyra",
            "text": "<span class=\"comment-copy\">Unfortunately, yes, since I'm not sure exactly how to go about decompiling/reverse engineering the game's binaries. Also, these files are themselves stored in archives, so I'm not sure it would even be possible to look at how they are loaded through <code>procmon</code> or something similar.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Turns out the header is actually a ECDSA public key and signature, so, according to what I've read, it's basically impossible to modify the file without re-signing it with the private key (which I do not have).</p>\n</div>",
            "votes": "1",
            "user": "Nicolas Gnyra",
            "time": "Mar 2, 2017 at 20:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Is the check made on the client side or the server side? If it's the former, it should be possible to bypass the check</span>",
                    "time": null
                },
                {
                    "user": "Nicolas Gnyra",
                    "text": "<span class=\"comment-copy\">I think it's made on the client side since, if I understand how they formatted the file, there are two parts to the header: the public key and the signature. The client checks the file by using these two values.</span>",
                    "time": null
                }
            ]
        }
    ]
}