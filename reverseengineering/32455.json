{
    "title": "Is DOS Assembly Hexadecimal Different To Modern Hex Editor Hexadecimal?",
    "link": "https://reverseengineering.stackexchange.com/questions/32455/is-dos-assembly-hexadecimal-different-to-modern-hex-editor-hexadecimal",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to find the correct Data Segment, corresponding to a certain File in a 16bit DOS Game.\nThe Assembly Instructions for the Decompiled .exe File in IDA Pro Version 5, I am looking at.</p>\n<p>I was wondering, is there a difference to DOS Assembly Hexadecimal, for a File, than a File opened up in a modern Hex Editor ? I use HxD the File in question, opened up in that Hex Editor is Offset(h):220A</p>\n<p>An example of Assembly Instruction in the decompiled code is :- mov  ds:264Ah, ax</p>\n<p>there is no Code with ds i.e. Data Segment ds:220Ah so what Value should I be looking for, if there is differences ? And are there any online converters, to help me achieve this ? or does anyone know how do work it out manually ?</p>\n<p>Any help would be much appreciated.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "271",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "hex",
        "dos"
    ],
    "user": "Edward Winch",
    "time": "Oct 30, 2023 at 1:23",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">No hex representation cannot change  0x2b cannot become 0x2c or 0x2? Based on tools.  Your interpretation the address you are looking may be different  and your question as is does not make sense  devoid of context.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As was said, hex is hex - so the actual bytes are just bytes. But there are some things that you need to understand in order to progress.</p>\n<ol>\n<li>What does ds prefix mean? its meaning is defined by data structures (segment descriptors) that reside in memory and pointed to by a special register. Basically they define the memory offset, range etc. On modern system like windows most are set to the entire virtual space so are meaningless from a reversing perspective (though GS, FS are still used)</li>\n<li>To find the offset you're looking for, the easiest way I can think of is to debug the process and try to see if you can look at the address using a debugger (that would help you understand more quickly)</li>\n<li>The assembly you're looking at is 16bit assembly, which is not the exact same \"language\" as x64 assembly - so you need to be aware of that</li>\n<li>You have to read a lot of material to move forward - you are working on an ancient format running on ancient \"OS\", be careful not to be confused with new information because everything has changed</li>\n<li>You might want to consider working on more modern stuff, there are some disadvantages with learning from working on very outdated things. But that depends on your objectives and what you enjoy...</li>\n</ol>\n<p>If you want to understand more, I suggest to read Windows Internals, understand assembly and keep going (it will take some time)</p>\n</div>",
            "votes": "1",
            "user": "ereisr",
            "time": "Jul 26, 2024 at 8:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Tip:</p>\n<p>DOS exe get \"relocated\" when loaded by DOS/Dosbox - and only the non header part of the EXE gets loaded at the load-segment behind the PSP</p>\n<p>and IDA offsets are relocated differently: normally to base adress 0x1000 and start segment is 0</p>\n<p>so there is a mapping between the real loaded EXE, the EXE as a file and the EXE loaded in IDA</p>\n<p>to your hex-question:</p>\n<p>hex is hex but there are many difference when talking about \"offsets\"</p>\n<ol>\n<li>linear offset in DOS 1MB ram?</li>\n<li>segment/offset pointer in DOS ram?</li>\n<li>segment/offset loaded in Dosbox(with/without debugger)</li>\n<li>linear IDA (EA) offsets, segment/offset in IDA, file offset in IDA</li>\n<li>file offset in EXE-image</li>\n<li>file offset in EXE-file</li>\n<li>near/far pointer</li>\n<li>code/data-segments,overlays offsets</li>\n</ol>\n<p>you want to read a book, written in encrypted chinese - without knowing anything about decryption AND chinese</p>\n<p>and the answer is completely different if the game is using some sort of non-standard overlay-technique or many other only-this-game-exe related stuff like self modifiying code, memory reduction techniques, partially packed data, strange stuff that were only done in the old times of coding</p>\n<p>and you still asking questions like the 4 before - questions out of context, no information what you already know, that just does not work</p>\n<p>reverse engineering is much more suffering as you think</p>\n<p>maybe come up with a small assembler example and help people to explain that to you - maybe one i've already sent :)</p>\n</div>",
            "votes": "0",
            "user": "llm",
            "time": "Oct 30, 2023 at 7:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Edward Winch",
                    "text": "<span class=\"comment-copy\">@blabb many thanks for your reply aswell</span>",
                    "time": null
                },
                {
                    "user": "Edward Winch",
                    "text": "<span class=\"comment-copy\">Hi @llm Many thanks for your reply, I see now, that this alot harder, than I first thought. And trial and error, is really hard, with so much assembly code in the .exe File.</span>",
                    "time": null
                }
            ]
        }
    ]
}