{
    "title": "What is the meaning of kernel32.BaseThreadInitThunk?",
    "link": "https://reverseengineering.stackexchange.com/questions/4361/what-is-the-meaning-of-kernel32-basethreadinitthunk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried to analyze a program in assembly using ollydbg. In the first line I have the following:</p>\n<pre><code>MOV EAX, DWORD PTR FS:[0]\n</code></pre>\n<p>In the register window, I've got the information:</p>\n<blockquote>\n<p>EAX 7570EE0A kernel32.BaseThreadInitThunk</p>\n</blockquote>\n<p>and in another window about FS the following:</p>\n<blockquote>\n<p>FS:[00000000]=[7FFDF000]=0012FFC4</p>\n</blockquote>\n<p>So, my questions would be:</p>\n<ol>\n<li><p>What is the difference between <code>DWORD PTR FS</code> and <code>DWORD PTR DS</code>? Normally, I always see <code>DWORD PTR DS</code> and not <code>DWORD PTR FS</code>.</p>\n</li>\n<li><p>What is <code>kernel32.BaseThreadInitThunk</code>? It is a function?</p>\n</li>\n</ol>\n<p>I hope that someone can help me.</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "16k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Jun 2, 2023 at 19:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>What is the difference between <code>DWORD PTR FS</code> and <code>DWORD PTR DS</code> ?</p>\n</blockquote>\n<p>Check this - <a href=\"http://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#Segment_Registers\" rel=\"noreferrer\">Segment_Registers</a></p>\n<p>On Windows <code>fs[0]</code> points <a href=\"http://en.wikipedia.org/wiki/Win32_Thread_Information_Block#Contents_of_the_TIB_.2832-bit_Windows.29\" rel=\"noreferrer\"><code>TEB</code></a></p>\n<blockquote>\n<p>What is <code>kernel32.BaseThreadInitThunk</code> ? It is a function?</p>\n</blockquote>\n<p>Yes it is. It's quite simple and is used only to execute your thread's function.</p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "May 18, 2014 at 7:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bad_decoy",
                    "text": "<span class=\"comment-copy\">Some additional information on fs:[0]: <a href=\"http://stackoverflow.com/questions/4657661/what-lies-at-fs0x0-on-windows\" title=\"what lies at fs0x0 on windows\">stackoverflow.com/questions/4657661/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">FS is used by 32-bit processes, GS for 64-bit processes.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Segment registers were historically used to allow 16-bit code to address more than 16 bits (64KB) of address space. Code could be pointed to with the CS segment, data with DS, etc. FS was an \"extra\" segment that could be used however necessary. You can read more about segmentation <a href=\"http://en.wikipedia.org/wiki/X86_memory_segmentation\" rel=\"nofollow\">on wikipedia</a>. Modern architectures don't use segment registers, with the exception of FS and GS.</p>\n</div>",
            "votes": "3",
            "user": "bad_decoy",
            "time": "May 18, 2014 at 18:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}