{
    "title": "Debugger always paused in ntdll.Kifastsystemcallret",
    "link": "https://reverseengineering.stackexchange.com/questions/20468/debugger-always-paused-in-ntdll-kifastsystemcallret",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using x32dbg to debug a program. I want to find the line which corresponds to a pop up message in my program to put a Break point.\nBut everytime that I set \"Pause\" after the pop up window's opening the program stops in Kifastsystemcallret in ntdll module.\nI succeed one time to set a Break point and to work it fine, but I can't do it anymore...\nI don't understand...\nThanks for advance for answering and sorry for my bad english and capacities in debugging...</p>\n<hr/>\n<p><a href=\"https://i.sstatic.net/Crgig.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Crgig.png\"/></a>Thanks for your answer... I've uploaded two photos... The first shows the call stacks ; the second the KiFastSystemCallRet... I don't know where down the line I will return.\nI've tried to type all the expression adresses without any success...</p>\n<p><a href=\"https://i.sstatic.net/207vj.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/207vj.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "x64dbg"
    ],
    "user": "Bob36180",
    "time": "Jan 26, 2019 at 2:28",
    "comments": [
        {
            "user": "ismael_akez",
            "text": "<span class=\"comment-copy\">If you are trying to backtrace where the pop up message was called, you can try to set a breakpoint in MessageBoxA if it uses that WinAPI and check the call stack.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>when any app is performing a system call it is normal to pause on KiFastSystemCallRet  ( windbg callstack for 4 threads when application is paused windbg uses a seperate thread to breakin so the current thread is paused at DoDebugBreak </p>\n<pre><code>0:003&gt; ~*k2\n\n   0  Id: da4.a8c Suspend: 1 Teb: 7ffdf000 Unfrozen\nChildEBP RetAddr\n0019ead4 75c1cde0 ntdll!KiFastSystemCallRet\n0019ead8 75c1ce13 USER32!NtUserGetMessage+0xc\n\n   1  Id: da4.a24 Suspend: 1 Teb: 7ffde000 Unfrozen\nChildEBP RetAddr\n00b6fce8 77456a44 ntdll!KiFastSystemCallRet\n00b6fcec 755e6a36 ntdll!NtWaitForMultipleObjects+0xc\n\n   2  Id: da4.ce8 Suspend: 1 Teb: 7ffdd000 Unfrozen\nChildEBP RetAddr\n029ffec0 77456a44 ntdll!KiFastSystemCallRet\n029ffec4 73e5a41c ntdll!NtWaitForMultipleObjects+0xc\n\n#  3  Id: da4.d8c Suspend: 1 Teb: 7ffdc000 Unfrozen\nChildEBP RetAddr\n02b9f7f8 774af20f ntdll!DbgBreakPoint\n02b9f828 75a1ed6c ntdll!DbgUiRemoteBreakin+0x3c\n0:003&gt;\n</code></pre>\n<p>a system call is a call which transitions from user mode to kernel mode   </p>\n<p>using sysenter instruction normally   </p>\n<p>when you issue a pause (f12 , esc) and when paused in that function take a look at call stack to see where down the line you will return   </p>\n<p>(you can type printstack in x64dbg commandline also to dump the call stack to log window)  </p>\n<pre><code>17 call stack frames (EIP = 774570F4 , ESP = 000AE8EC , EBP = 000AE8FC ):\n000AE900 ntdll._KiFastSystemCallRet@0\n000AE910 uxtheme.74371A62\n000AE920 uxtheme.74371A2F\n000AE970 uxtheme.74371D38\n000AE98C uxtheme.74371F20\n000AE9D4 user32._GetRealWindowOwner@4+78\n000AEE60 calc.00F51F4F\n000AEE8C user32._InternalCallWinProc@20+23\n000AEF04 user32._UserCallWinProcCheckWow@32+B3\n000AEF60 user32._DispatchClientMessage@20+4B\n000AEF88 user32.___fnDWORD@4+24\n000AEFD4 ntdll._KiUserCallbackDispatcher@12+2E\n000AFD50 calc.00F51CBC\n000AFDE0 calc.00F6219A\n000AFDEC kernel32.75A1ED6C\n000AFE2C ntdll.___RtlUserThreadStart@8+27\n000AFE44 ntdll.__RtlUserThreadStart@8+1B\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 25, 2019 at 13:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}