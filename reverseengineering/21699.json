{
    "title": "What is actually loaded here and different hexdump outputs on util-linux hexdump and on cutter and ghidra's hexdump",
    "link": "https://reverseengineering.stackexchange.com/questions/21699/what-is-actually-loaded-here-and-different-hexdump-outputs-on-util-linux-hexdump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was trying to understand what segment of file gets loaded by fourth LOAD header on phdr array.\n First 6 headers are shown below from readelf</p>\n<pre><code> Program Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040\n                 0x0000000000000268 0x0000000000000268  R      0x8\n  INTERP         0x00000000000002a8 0x00000000000002a8 0x00000000000002a8\n                 0x000000000000001c 0x000000000000001c  R      0x1\n      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000 //file portion till .text\n                 0x00000000000006c0 0x00000000000006c0  R      0x1000\n  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000 //.text\n                 0x00000000000003c5 0x00000000000003c5  R E    0x1000\n  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000 //.rodata,.eh_frame_hdr,.eh_frame\n                 0x0000000000000170 0x0000000000000170  R      0x1000\n  LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8\n                 0x0000000000000270 0x00000000000002d8  RW     0x1000\n\n</code></pre>\n<p>that memory range between offset and filesiz is completely absent in ghidra and cutter disassembly and is filled with \"ff\" and is shown as invalid in cutter hexdump.\nhowever, when I use hexdump on my terminal, it is not filled with 'ff' as shown by cutter</p>\n<pre><code>00002df0  e0 10 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|\n00002e00  01 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  |................|\n00002e10  00 10 00 00 00 00 00 00  0d 00 00 00 00 00 00 00  |................|\n00002e20  d8 11 00 00 00 00 00 00  19 00 00 00 00 00 00 00  |................|\n00002e30  e8 3d 00 00 00 00 00 00  1b 00 00 00 00 00 00 00  |.=..............|\n00002e40  08 00 00 00 00 00 00 00  1a 00 00 00 00 00 00 00  |................|\n00002e50  f0 3d 00 00 00 00 00 00  1c 00 00 00 00 00 00 00  |.=..............|\n00002e60  08 00 00 00 00 00 00 00  f5 fe ff 6f 00 00 00 00  |...........o....|\n00002e70  08 03 00 00 00 00 00 00  05 00 00 00 00 00 00 00  |................|\n00002e80  d0 03 00 00 00 00 00 00  06 00 00 00 00 00 00 00  |................|\n00002e90  28 03 00 00 00 00 00 00  0a 00 00 00 00 00 00 00  |(...............|\n00002ea0  84 00 00 00 00 00 00 00  0b 00 00 00 00 00 00 00  |................|\n00002eb0  18 00 00 00 00 00 00 00  15 00 00 00 00 00 00 00  |................|\n00002ec0  00 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  |................|\n00002ed0  00 40 00 00 00 00 00 00  02 00 00 00 00 00 00 00  |.@..............|\n00002ee0  18 00 00 00 00 00 00 00  14 00 00 00 00 00 00 00  |................|\n00002ef0  07 00 00 00 00 00 00 00  17 00 00 00 00 00 00 00  |................|\n00002f00  48 05 00 00 00 00 00 00  07 00 00 00 00 00 00 00  |H...............|\n00002f10  88 04 00 00 00 00 00 00  08 00 00 00 00 00 00 00  |................|\n00002f20  c0 00 00 00 00 00 00 00  09 00 00 00 00 00 00 00  |................|\n00002f30  18 00 00 00 00 00 00 00  fb ff ff 6f 00 00 00 00  |...........o....|\n\n--&gt;disassembly from cutter\n            0x00002de8      invalid\n            0x00002de9      invalid\n            0x00002dea      invalid\n            0x00002deb      invalid\n            0x00002dec      invalid\n            0x00002ded      invalid\n            :and this continues till 0x00003de7\n</code></pre>\n<p>why the difference?\nwhat is actually getting loaded by the fourth LOAD ?</p>\n<p>The program I'm disassembling is a simple hello world program </p>\n<pre><code>#include&lt;stdio.h&gt;\nint main()\n{\n    printf(\"hello\");\n}\n</code></pre>\n<p>compiled with \ngcc version 9.1.0 (GCC) </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "260",
    "tags": [
        "disassembly",
        "binary-analysis",
        "linux",
        "radare2",
        "elf"
    ],
    "user": "Mah35h",
    "time": "Jul 17, 2019 at 16:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I'm still looking for a better understanding but I found that the GNU_RELRO points from 0x03de8-0x04000, which tells me that this is somehow connected to dynamic relocation sections, and running objdump -R gives me this</p>\n<pre><code>DYNAMIC RELOCATION RECORDS\nOFFSET           TYPE              VALUE \n0000000000003de8 R_X86_64_RELATIVE  *ABS*+0x0000000000001130\n0000000000003df0 R_X86_64_RELATIVE  *ABS*+0x00000000000010e0\n0000000000004028 R_X86_64_RELATIVE  *ABS*+0x0000000000004028\n0000000000003fd8 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable\n0000000000003fe0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5\n0000000000003fe8 R_X86_64_GLOB_DAT  __gmon_start__\n0000000000003ff0 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable\n0000000000003ff8 R_X86_64_GLOB_DAT  __cxa_finalize@GLIBC_2.2.5\n0000000000004018 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.5\n</code></pre>\n<p>still don't have a clear understanding so I cant mark this question as solved and I dont know why hexdump on both tools differ as indicated in the question.</p>\n</div>",
            "votes": "1",
            "user": "Mah35h",
            "time": "Aug 9, 2019 at 14:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}