{
    "title": "Any Disassembler for iOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/12773/any-disassembler-for-ios",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any iOS app for arm Disassembling?\nI mean one that can run on iPhone. \nNor IDA or Hopper have any iOS version </p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "arm",
        "disassemblers",
        "ios"
    ],
    "user": "DineroM34",
    "time": "Jun 1, 2016 at 6:49",
    "comments": [
        {
            "user": "broadway",
            "text": "<span class=\"comment-copy\">r2 can run on a (jailbroken) iphone. see <a href=\"https://github.com/radare/radare2/blob/master/doc/iphone.md\" rel=\"nofollow noreferrer\">github.com/radare/radare2/blob/master/doc/iphone.md</a></span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Isn't the basic idea of iOS that every application runs in its own sandbox? So that means you'd have to load external data into it â€“ other than on a desktop system, you can't go and run it on anything you have installed.</span>",
            "time": null
        },
        {
            "user": "Starwarsfan2099",
            "text": "<span class=\"comment-copy\">Actualy, IDA has been ported to iOS (Jailbroken)  <a href=\"http://letsunlockiphone.guru/ida-pro-disassembler-ported-iphone/\" rel=\"nofollow noreferrer\">letsunlockiphone.guru/ida-pro-disassembler-ported-iphone</a> It really can run, I have used it before. I do prefer radare2 though. (See jvoisins answer)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If your iPhone is jailbroken, you can use <a href=\"http://rada.re\" rel=\"nofollow\">radare2</a> on it. You can follow the process to cross-compile it <a href=\"https://github.com/radare/radare2/blob/master/doc/iphone.md\" rel=\"nofollow\">here</a>, or simply grab the latest release from <a href=\"https://cydia.saurik.com/\" rel=\"nofollow\">Cydia</a>.</p>\n<p>A neat feature of radare2 is that you can run it <em>on</em> your iPhone, and debug/analyse your application remotely, since radare2 instances can communicate, either by spawning the <a href=\"https://github.com/radare/radare2-webui\" rel=\"nofollow\">web interface</a>, or with the <a href=\"https://github.com/radare/radare2/blob/master/doc/rap\" rel=\"nofollow\">rap</a> protocol, documented <a href=\"https://radare.gitbooks.io/radare2book/content/remoting_capabilities.html\" rel=\"nofollow\">here</a>.</p>\n<p>If your iPhone isn't jailbroken, then there is no way an application could be used to analyse another one, since each of them is running in a separate sandbox.</p>\n</div>",
            "votes": "4",
            "user": "jvoisin",
            "time": "Jun 5, 2016 at 22:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you might try the <strong>otool</strong> command line tool its very basic but it do some disassembling, it just show function names and instructions no fancy links \"showing where code will jump\" it shows only dresses</p>\n<p>But definitely you need to be Jailbroken</p>\n</div>",
            "votes": "0",
            "user": "Karim H",
            "time": "Jun 2, 2016 at 23:24",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For a long time, I was using gdb from Cydia on my iPad 2 (it should still work on any 32-bit device).  You can dump memory by attaching gdb to the running application's pid: <code>ps ax | grep [app name]</code> and <code>gdb -p -q [pid]</code>.</p>\n<p>If you wanted to add a breakpoint at a symbol or selector, you first needed to extract the headers from the application.  Using any variant of Class Dump (I used class-dump-z), I could break at any symbol dumped from the generated interfaces.  After hitting the breakpoint, just run the <code>disassemble</code> command.</p>\n<p><a href=\"https://i.sstatic.net/Ef18B.png\" rel=\"nofollow noreferrer\"><img alt=\"symbolic breakpoint\" src=\"https://i.sstatic.net/Ef18B.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/nB9KR.png\" rel=\"nofollow noreferrer\"><img alt=\"gdb on iOS example\" src=\"https://i.sstatic.net/nB9KR.png\"/></a></p>\n<p><a href=\"http://hackoftheday.securitytube.net/2013/04/bypassing-jailbroken-checks-in-ios.html\" rel=\"nofollow noreferrer\">Image source</a></p>\n</div>",
            "votes": "0",
            "user": "JAL",
            "time": "Nov 18, 2016 at 4:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}