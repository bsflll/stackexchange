{
    "title": "How does PIE mitigate exploits?",
    "link": "https://reverseengineering.stackexchange.com/questions/29565/how-does-pie-mitigate-exploits",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I read a tutorial where they compiled with the <code>-no-pie</code> option. Is it because the <code>.text</code> segment will be loaded at a random address, therefore making the address of gadgets founds inside it useless ?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "301",
    "tags": [
        "rop",
        "pie"
    ],
    "user": "hehehe",
    "time": "Nov 17, 2021 at 19:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The PIE abbreviation means \"Position Independent Executable\". Such an executable <em>may ask or not ask</em> the OS for the Address Space Layout Randomization (ASLR), when the OS loader loads the binary and dependencies into a random location of virtual memory.</p>\n<p>ASLR itself, <em>not PIE</em>, protects executable from <em>specific</em> malware (which rely on fixed virtual address of a particular code and tries changing it in an <em>already running</em> program). Asking for ASLR is <em>another</em> flag beside the PIE flag.</p>\n<p>The <code>-no-pie</code> option of the GCC compiler means \"no PIE\" - it's only one bit in the executable header, signaling the loader that the code is position-dependent. (The loader will then load the code always into the same, fixed virtual memory location indicated in the executable's header.)</p>\n</div>",
            "votes": "1",
            "user": "MarianD",
            "time": "Nov 16, 2021 at 4:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}