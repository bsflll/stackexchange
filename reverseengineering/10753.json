{
    "title": "mov ecx, arg - How to replicate in C++?",
    "link": "https://reverseengineering.stackexchange.com/questions/10753/mov-ecx-arg-how-to-replicate-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I frequently see code formatted like this:</p>\n<pre><code>push arg\npush arg\n(...)\nmov ecx, arg\ncall function\n</code></pre>\n<p>If I need to call that function in Assembly, it's fine. But since I know how to consistently get the base of the functions, for the sake of organization and simplicity, I'd like to use typedefs in a DLL to call the functions. </p>\n<p>The problem's that I have no idea how to make a call use ecx to pass data. Unless I'm mistaken, <code>func(arg,arg)</code> will always assemble to two pushes and a call. If I don't use ecx the function crashes because it's a pointer to an object and it needs to be that. Is there any way to do this without inline assembly which I'd like to avoid?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "683",
    "tags": [
        "assembly",
        "c++",
        "call"
    ],
    "user": "Lupe",
    "time": "Aug 30, 2015 at 23:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can either typedef it like this:</p>\n<pre><code>// typedef &lt;return-type&gt;(__thiscall* &lt;type-name&gt;)(&lt;ecx&gt;, &lt;stack-1&gt;, &lt;stack-2&gt;);\ntypedef int(__thiscall* tSomeFunc)(int thisPtr, int arg1, int arg2);\ntSomeFunc func = (tSomeFunc) 0xBAADC0DE;\n\n// this is how you call it\nfunc(/* this */ 0x123, /* arg1 */ 1, /* arg2 */ arg2);\n</code></pre>\n<p>Or directly call it:</p>\n<pre><code>((int(__thiscall*)(int, int, int)) 0xDEADBABE)(/* this */ 0x123, 1, 2);\n</code></pre>\n<p>It relies on the fact that your calling convention <em>seems</em> to be <a href=\"https://msdn.microsoft.com/en-us/library/ek8tkfbw.aspx\"><code>__thiscall</code></a>, which stores the <code>this</code> pointer into <code>ecx</code> and then pushes the rest of the args to the stack.</p>\n</div>",
            "votes": "10",
            "user": "rev",
            "time": "Aug 31, 2015 at 0:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lupe",
                    "text": "<span class=\"comment-copy\">Thank you, this was perfect. I always wondered how C++ could magically tell whether functions used ret or retn %d and this explained that, too</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@AcidShout, nice job including both the typedef-style <i>and</i> the direct-call style in your answer!</span>",
                    "time": null
                }
            ]
        }
    ]
}