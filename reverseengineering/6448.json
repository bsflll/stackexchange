{
    "title": "Find sigtrap function",
    "link": "https://reverseengineering.stackexchange.com/questions/6448/find-sigtrap-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a program that uses a lot of <code>BREAK</code>/<code>int 3</code> (Linux). I guess that the code contains something like:</p>\n<pre><code>void sigtrap_func(int sig) { (some stuff..) }\n\nint main()\n{\n  signal(SIGTRAP, sigtrap_func);\n  (some stuff)\n  asm(\"int 3\");\n  (and so on)\n  asm(\"int 3\");\n\netc..\n</code></pre>\n<p>I replaced all <code>SIGTRAP</code> by <code>NOP</code>s and the program behave differently than with them. So, I'm sure that something is done inside the <code>sigtrap</code> function.</p>\n<p>How can I find this function just with the assembler ?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "970",
    "tags": [
        "linux",
        "anti-debugging"
    ],
    "user": "reverse",
    "time": "Oct 14, 2014 at 20:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That's where strace comes in handy. If i make your program compilable and compile it:</p>\n<pre><code>$cat trap.c\n#include &lt;signal.h&gt;\nvoid sigtrap_func(int sig) { puts(\"trap\"); }\n\nint main()\n{\n  signal(SIGTRAP, sigtrap_func);\n}\n$ cc -o trap trap.c\n</code></pre>\n<p>and then run it with <code>strace</code>, i'll get a list of all system calls the program executes:</p>\n<pre><code>$strace -i ./trap \n[      31076ad057] execve(\"./trap\", [\"./trap\"], [/* 32 vars */]) = 0\n... stuff omitted that loads dynamic libraries\n[      3107632abe] rt_sigaction(SIGTRAP, {0x400504, [TRAP], SA_RESTORER|SA_RESTART, 0x31076329a0}, {SIG_DFL, [], 0}, 8) = 0\n[      31076ad038] exit_group(0)        = ?\n</code></pre>\n<p>You see that <code>rt_sigaction</code> (the system call that implements <code>signal()</code>) gets called at <code>0x3107632abe</code>, and sets the handler function to <code>0x31076329a0</code>. Now is the time to start <code>gdb</code>, and set breakpoints there (beware of ASLR though!).</p>\n</div>",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Oct 14, 2014 at 15:12",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just like in your sample program, the signal handlers are installed using a <code>signal</code> (or <code>sigaction</code>) function. So you just need to find the call to that function and see what argument is passed to it. That argument will be the address of the signal handler.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 15, 2014 at 2:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}