{
    "title": "Tracing Callstack Despite Paged out Instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/9580/tracing-callstack-despite-paged-out-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>REing a binary and while its running (using Windbg by the way) my (call)stack gets mangled. So I start to perform a stack trace [<a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff552143(v=vs.85).aspx]\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/windows/hardware/ff552143(v=vs.85).aspx]</a>.</p>\n<p>However, when I'm verifying various symbols/functions in the target, various instructions are paged out so I cant tell if the previous instruction was a ret or a call above it, e.g.</p>\n<pre><code>kd&gt; u fe682ae4-2 l1      //  paged out (all zeroes) unknown\nrdr!_RdrSectionInfo+0x2a:\nfe682ae2 0000             add     [eax],al\n</code></pre>\n<p>I know how to reload symbols via !vad extension [<a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff552153(v=vs.85).aspx]\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/windows/hardware/ff552153(v=vs.85).aspx]</a>. However, that requires me to use (live)kd.</p>\n<p>Is there an easier way to ensure the target application doesn't get paged out, short of disabling the pagefile?</p>\n<p>I've searched Google, OSRonline, Woodmann, etc. and haven't found anything helpful.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "357",
    "tags": [
        "windows",
        "callstack"
    ],
    "user": "grepNstepN",
    "time": "Aug 8, 2015 at 16:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>The prompt shown is <code>kd&gt;</code> so you are debugging a live kernel.</li>\n<li>If memory could not be accessed windbg will show ? Not <code>0000</code><br/>\nmaybe you actually have 0000 in the address.</li>\n</ol>\n<p>Did you try doing <code>.pagein</code> ?</p>\n<p>Did you try viewing the physical address <code>!vtop 0 &lt;virtualaddress&gt;</code> ?</p>\n<p>Here is sample of unaccessible memory:</p>\n<pre><code>.fnent notepad!\nSaveFile (01004eae) notepad!SaveFile | (01005179) notepad!LoadFile   \nOffStart: 00004eae    \nProcSize: 0x2c6 kd&gt;     \n? 4eae+140+notepad = 01004fee     \nkd&gt; db notepad!SaveFile+0x140 l20    \n01004fee a0 90 00 01 ff 35 54 90-00 01 ff 75 08 e8 70 cf .....5T....u..p.    \n01004ffe ff ff ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ?? ..?????????????? \n</code></pre>\n<p>Notice the question marks <code>????</code> because the next page at boundary <code>1005000</code> is inaccessible. </p>\n<pre><code>kd&gt; .pagein /p 8114bc38 1005000 \nYou need to continue execution (press 'g' &lt;enter&gt;) for the pagein to be brought in.      \nWhen the debugger breaks in again, the page will be present.\nkd&gt; g\nBreak instruction exception - code 80000003 (first chance)\nnt!RtlpBreakWithStatusInstruction:\n804e35a2 cc              int     3\nkd&gt; db 1004ff0 \n01004ff0  00 01 ff 35 54 90 00 01-ff 75 08 e8 70 cf ff ff  ...5T....u..p...\n01005000  83 f8 02 0f 84 a9 00 00-00 33 ff 53 ff 75 10 57  .........3.S.u.W\n01005010  ff 75 f8 ff 35 80 a4 00-01 e8 7b fb ff ff eb 78  .u..5.....{....x\n</code></pre>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Aug 9, 2015 at 13:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">Thanks for helping blabb!  I'm using windbg and not kd.  I took the example output of the unassemble command from the MSDN article about stacktracing (whose author was using kd). In that article it stated a series of '0x00' means its likely paged out.  So I can't use !vtop in windbg. .fnent returns 'no function entry for [virt addr]'  However, .pagein appears to be in play.   How may I find out the address of the EPROCESS block/address of the process that owns the memory for .pagein's  /p [EPROC addr] argument? Im using windbg, so !PROCESS is out of play</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i would suggest you to post actual sequences  i do not understand why you cannot use !vtop is windbg windbg is just a gui for kd  again why you cannot use windbg for !process ?? do you mean you are debugging an user mode executable (then this whole question doesn't make sense clarify your request to provide any meaningful answer</span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">When I started debugging this with ring3 debugger, I didn't have the /DEBUG option set in my BCD. Im in just plain windbg and not kd. I cant restart my machine for it to allow kernel debugging. '!vtop', '!process' etc. throw 'no export process found' because they're extensions for the ring0 debugger 'kd'. You'll get the same error if you open windbg (no kernel debugging), attach to a process and attempt to run said extensions.</span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">To invasively inspect the process' state  I'd have to loosely follow [<a href=\"https://www.osronline.com/article.cfm?article=576]\" rel=\"nofollow noreferrer\">osronline.com/article.cfm?article=576]</a>, which wont work with local kd [<a href=\"http://stackoverflow.com/questions/8738579/limitations-of-local-kernel-mode-debugging-in-windbg]...i'll\" title=\"limitations of local kernel mode debugging in windbg%5d...i%26%2339%3bll\">stackoverflow.com/questions/8738579/â€¦</a> have to wait a week until I get home to attach a remote debugger :(. Thanks anyway blabb</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if you do not have /debug switch enabled and you want to do Local kernel debugging use livekd from sysinternals it accepts all the windbg commands but is also able to do local kernel debugging when /debug is not enabled in bcd</span>",
                    "time": null
                }
            ]
        }
    ]
}