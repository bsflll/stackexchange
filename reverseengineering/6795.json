{
    "title": "Decrypting firmware: Is there a true \"format\" to it, and how does it differ from decryping other files?",
    "link": "https://reverseengineering.stackexchange.com/questions/6795/decrypting-firmware-is-there-a-true-format-to-it-and-how-does-it-differ-from",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have firmware for a system and I'm trying to decrypt some of it just for the sake of seeing what it all does; nothing illegal or anything like that, such as reproducing copies of it decrypted and such.</p>\n<p>But it can seem tough for several reasons:</p>\n<p>1.May have no specific format or way to distinguish it from other binary files;</p>\n<p>2.May not know how it is encrypted;</p>\n<p>3.May not be \"normally\" encrypted and may be specially so.</p>\n<p>The thing is, the file has some unencrypted code, but I'm not 100% sure what kind of opcode bytes it could represent since it</p>\n<p>This is firmware for an all-ARM-powered device, but I'm not publicly saying it's name. Should that mean that the firmware for it will be some variant of ARM ISA/opcodes (because it's machine code for the ARM processor)? If so, where should I begin decrypting and should I continue to determine, if possible for me, what version of ARM, ISA (instruction-set=architecture), etc.?</p>\n<p>The firmware has a magic number right at the beginning of the file (which just says the company's name), but afterwards it has unencrypted bytes, then more magic numbers, then encrypted bytes, then more magic numbers, then more unencrypted bytes, etc., etc. You can tell the encrypted parts apart because each byte has a completely inane ASCII character that no other part of the file has, and they're in followed segments. This says clearly that these are irregular, encrypted ranges of bytes.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "11k",
    "tags": [
        "binary-analysis",
        "firmware",
        "decryption"
    ],
    "user": "stack full of heaps",
    "time": "Dec 9, 2014 at 19:11",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">In general, people post the hardware they're working with, here, this might attract good answers from people who have done a similar thing. Look around, you'll see that many questions even provide links to the downloadable firmware. As it is right now, the only answer you can get is probably \"run binwalk and signsrch on it and see what happens\". If it's ARM, it's likely it runs some kind of linux, which in turn makes it likely that you're dealing with some kind of squashfs.</span>",
            "time": null
        },
        {
            "user": "stack full of heaps",
            "text": "<span class=\"comment-copy\">\"If it's ARM, it's likely it runs some kind of linux\" <i>What</i> runs some kind of Linux? The firmware here is firmware to start the rest of the computer up. SquashFS is a filesystem, and how is that supposed to help decrypt the firmware? If anything, decrypting the firmware is what'll allow the rest of the hardware to be reverse-engineered, so it's kind of like a gateway-hack in some ways.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Wow to identify firmware format</strong></p>\n<ol>\n<li><p><strong>In old days the Intel HEX and bin Flash memory dump was used</strong></p>\n<p>the firmware was usually copied to device by HW programer for specific <strong>IC</strong> or by <strong>ISP</strong>. <strong>HEX</strong> is very specific <a href=\"http://cs.wikipedia.org/wiki/Intel_HEX\" rel=\"nofollow noreferrer\">Intel_HEX (*.hex)</a> text file easy to identify. Ont he other hand <strong>BIN</strong> dumps are hard to identify. If you can see any tokens inside or can disassemble it and the code makes sense then it is probably a binary memory dump. If it is encrypted you are out of luck.</p></li>\n<li><p><strong>elf or obj format</strong></p>\n<p>these are newer object formats similar to <strong>PE</strong>. <strong>ELF</strong> in hex view looks like this:</p>\n<pre><code>7f 45 4c 46 01 02 01 00 | 00 00 00 00 00 00 00 00 | .ELF...\n</code></pre>\n<p><strong>OBJ</strong> is very dependent on target platform and if it is from Intel,MS or for Linux,...</p></li>\n<li><p><strong>file system dump</strong></p>\n<p>some devices have own programing interface implemented and use firmware as <strong>disc image</strong> so the file is dump of some <strong>FileSystem</strong> in which is the firmware written as some <strong>file(s)</strong>. You have to identify the <strong>FileFormat</strong> type (usually by boot sector first <code>512</code> Bytes). Then extract the files inside and start over again from scratch. Sometimes helps if you take an <strong>USB</strong> key and write the file system dump to it 1:1 and then try to access it from OS that supports various fileformats. You can also use some HDD utility like PQ-magic or whatever capable of identify FS types.</p></li>\n<li><p><strong>decryption</strong></p>\n<p>you need disassembler for used <strong>IC</strong> or even better simulator/emulator some device <strong>SDK</strong>'s contains also the simulation so try to load the firmware to its memory and try to run it to test if it does something meaningful. For disassembly you need to analyze the code to see that too ...</p></li>\n</ol>\n<p><strong>[Notes]</strong></p>\n<p>you should post at least file extension and hex view of the start of the file</p>\n<p><strong>[edit 1] response to commend + some additional info</strong></p>\n<p>starts the text exactly from start or not?</p>\n<p>So it still can be:\n - bin memory dump\n - anything packed/encoded (even specific file system)</p>\n<ol>\n<li><p><strong>Identify packed/encoded structures</strong></p>\n<p>try to find chunks inside like the <strong>RIFF</strong> (*.avi) format. Beware there could be no <strong>ID</strong> string present. You are basically looking for hex encoded length or offset in file that would add up to file size or next chunk structure that have the length at specific chunk offset or in separated table. Do not forget it can be booth <strong>LSB or MSB</strong> first do not assume anything. Length/offsets are usually encoded <code>16/32/64</code> bit (<code>2/4/8</code> BYTE) Also try to find repeating patterns (if some kind of header of chunk is present)</p></li>\n<li><p><strong>Identify file system</strong></p>\n<p>some <strong>FS</strong> have specific <strong>ID</strong> at some offset so look for that (like <code>FAT32</code>,...). Most <strong>FS</strong> use <strong>FAT+DIR</strong> tables so look for something like this:</p>\n<p><img alt=\"MDOS DIR example\" src=\"https://i.sstatic.net/Iobw6.png\"/></p>\n<p>this is how <strong>DIR</strong> table looks like in <strong>MDOS</strong> file system. It is a structure holding all files/directories of the disc. Each file should have encoded name,type(extension),start sector,length.</p>\n<ul>\n<li><code>E5 hex = 229 dec</code> usually marks free directory space (in many FS systems)</li>\n</ul>\n<p>so if you know any filename that should be present in the target system you could look for it to locate <strong>DIR</strong> table ...</p>\n<p><img alt=\"MDOS FAT example\" src=\"https://i.sstatic.net/A9bv9.png\"/></p>\n<p>this is how <strong>FAT</strong> table looks like in <strong>MDOS</strong>. The <strong>FAT</strong> holds information about each sector/cluster of the disc. In this case it is 12 bit so each value is 1.5 Byte long !!! Some values mark sectors as system/reserved (non usable),bad,free or if any other value present then it is an index of next sector that is connected to this like in linked list. While decoding take in mind that endianess could be both little or big</p></li>\n<li><p><strong>To identify bin memory dump</strong></p>\n<p>In this case the file is memory dump of your arm <strong>OS</strong>. That mean you should look for specific parts of program like:</p>\n<ul>\n<li>interrupt table</li>\n<li>specific program tokens (what it prints out... )</li>\n<li>graphics</li>\n</ul>\n<p>The last two are pretty straightforward so I will add info only for the interrupts. Interrupts on most processors have fixed location in memory so for each interrupt there is few bytes reserved. In this place is usually some jump instruction present that jump should lead to interrupt handler routine which should end with specific end of interrupt instructions like: <code>reti</code>,<code>retn</code> or by setting/reseting specific register to mark interrupt was handled ...</p>\n<p>So look for tightly packed jump instructions inside bin and if found check if their count and distance match the <strong>CPU</strong> datasheet. Also you can check if somewhere near the jump address is return from interrupt present. If yes then you have all you need. Offset of the interrupt table is usually fixed ... so you should easily find out where from the bin dump starts in the target device memory map.</p>\n<p>Beware your bin can have offset encoding like the Intel hex files</p></li>\n</ol>\n</div>",
            "votes": "5",
            "user": "Spektre",
            "time": "Aug 9, 2016 at 7:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "stack full of heaps",
                    "text": "<span class=\"comment-copy\">The extension is just .bin. Hex view at the start is the company's name, which occupies 50+ bytes and is identifiable by ASCII, Unicode text.</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@stackfullofheaps added [edit1] to answer as response would be too much for comment</span>",
                    "time": null
                },
                {
                    "user": "stack full of heaps",
                    "text": "<span class=\"comment-copy\">I never really bothered to think that firmware could be used as a filesystem/disk for that purpose.</span>",
                    "time": null
                },
                {
                    "user": "Spektre",
                    "text": "<span class=\"comment-copy\">@stackfullofheaps some devices have no connections capabilities so an upgrade SD card is the only usable option. also some fileformats include FATs directly like Garmins map files ... so you should always consider that option too</span>",
                    "time": null
                },
                {
                    "user": "stack full of heaps",
                    "text": "<span class=\"comment-copy\">The device I am trying to reverse engineer has a hard disk and full operating system, so I am going to rule-out a filesystem flash bridge, but maybe not entirely yet.</span>",
                    "time": null
                }
            ]
        }
    ]
}