{
    "title": "How to exploit an suid root application",
    "link": "https://reverseengineering.stackexchange.com/questions/17576/how-to-exploit-an-suid-root-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have to exploit an application and I have only the 32-bit ELF excecutable, which is also stripped. Its a suid root application and when it is executed practically run the <code>ls -al</code> command for a specific directory that normally is inaccessible for normal users.</p>\n<p>Any advice about how to handle this problem?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "elf",
        "exploit"
    ],
    "user": "John Rewei",
    "time": "May 7, 2018 at 20:38",
    "comments": [
        {
            "user": "user23101",
            "text": "<span class=\"comment-copy\">what are the inputs that you control? can you effect the arguments of <code>ls -al</code>?</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">Check for how can you influence that command, it's most likely a system() call. Environment variables and command line arguments are the candidates. However, without disassembly, it's impossible to say.</span>",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "<span class=\"comment-copy\">I have tried a lot of inputs with patterns but I cannot spot any influence in memory. I can show you disassembly but because of the fact that the file is stripped has no info about functions.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">how do you know it's exploitable?</span>",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "<span class=\"comment-copy\">its an exercise and it says it is</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the program is setuid, you can use the fact that it is calling the command <code>ls -al /tmp</code> through <code>system()</code> from the <code>main()</code> function.</p>\n<ol>\n<li><p>Create a file <code>ls</code> which contains:</p>\n<pre><code>#!/bin/sh\n/bin/sh\n</code></pre></li>\n<li><p>Set it as an executable script:</p>\n<pre><code>#&gt; chmod +x ./ls\n</code></pre></li>\n<li><p>Modify your <code>PATH</code> to point to the current directory:</p>\n<pre><code>#&gt; export PATH=.:${PATH}\n</code></pre></li>\n<li><p>Run the weak software (where you have the fake <code>ls</code> script):</p>\n<pre><code>#&gt; /path/to/test\n</code></pre></li>\n</ol>\n<p>Just a remark, the rest of the software seems to have been obfuscated, at least by renaming the subroutines into <code>sub_xxxx</code>. It may also contain other obfuscations.</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Mar 19, 2018 at 14:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}