{
    "title": "Issues writing a bootloader in x86 16-bit machine code",
    "link": "https://reverseengineering.stackexchange.com/questions/3575/issues-writing-a-bootloader-in-x86-16-bit-machine-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am having trouble displaying simple text.\nI am trying to do it all in machine code with <code>INT 10h</code>, but:</p>\n<ol>\n<li><p>I can't find the binary opcode for <code>INT 10h</code> anywhere in the Intel Manual.</p></li>\n<li><p>I can't figure out how to load the binary ASCII representation of \"Hello world!\" in to the data segment register (<code>DS</code>, which needs 12 bytes of data to represent the full text data).</p></li>\n</ol>\n<p>I considered doing it by writing directly to memory-mapped VGA memory, but that appeared harder than using interrupts from BIOS. And I'm not fully knowledgeable on this full scope of how that'd work.</p>\n<p>Can anyone help me sort this out here, please? I don't need help with x86 instructions <em>per se</em>, but with how I'd encode this all in binary properly, and where to find all interrupts' opcodes.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "366",
    "tags": [
        "memory",
        "encodings",
        "machine-code"
    ],
    "user": "Tomahawker",
    "time": "Aug 6, 2018 at 7:55",
    "comments": [
        {
            "user": "Stolas",
            "text": "<span class=\"comment-copy\">You might want to read: <a href=\"http://wiki.osdev.org/Main_Page\" rel=\"nofollow noreferrer\">wiki.osdev.org/Main_Page</a>  Grab an Ascii table for figuring out the binairy code for the ascii string. Also, the title is a bit weird. As there have been 16-bit bootloaders, remember windows3.11 for example. Lastly, this should be on stack overflow. For RE-SE (this one) I'd recommend you try to reverse a 16-bit bootloader :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>To call an interrupt, you'll probably want to use <code>int imm8</code> which is encoded as <code>0xcd</code>, <code>0xnn</code> (<code>0x10</code> in this case).</p></li>\n<li><p>For bootloaders, it's pretty common to stick the data in between the <code>jmp</code> at the start of the bootloader and its target. You don't really need to mess around with <code>ds</code> unless you're making a very large bootloader (which loads additional sectors from disk).</p></li>\n</ol>\n<p>For an interrupt reference, should you need such a thing, I'd probably suggest <a href=\"http://www.ctyme.com/rbrown.htm\" rel=\"noreferrer\">Ralph Browns Interrupt List</a>.</p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Jan 29, 2014 at 8:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Regarding (2), you don't load the entire string into the segment register, you take the selector for the memory region that holds the string, and place <em>that</em> into the segment register.  For 16-bit bootloader environment, it's probably going to be the same as CS, so you just <code>push cs, pop ds</code> (though usually <code>cs=ds=es=ss</code> already on startup, anyway).</p>\n<p>To write to the video memory, just load <code>0xb800</code> into <code>es</code>, and then the brute-force way to write to the screen looks like:</p>\n<pre><code>mov es:[0], 'H'\nmov es:[2], 'e'\nmov es:[4], 'l'\nmov es:[6], 'l'\nmov es:[8], 'o'\n</code></pre>\n<p>And, so on. This is not the optimal way, of course.  Normally, you would use a loop and a string operation, or just use the BIOS calls.</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Feb 2, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}