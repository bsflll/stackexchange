{
    "title": "Pe 32 Add Export function Segment by Extending with dll or Patching pe",
    "link": "https://reverseengineering.stackexchange.com/questions/25292/pe-32-add-export-function-segment-by-extending-with-dll-or-patching-pe",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to add new function inside pe32 module.dll Export Table , in dynamic way if possible ( via extending with dll ) or by patching pe32 module.dll </p>\n<p>What can u suggest to solve this ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "758",
    "tags": [
        "windows",
        "c++",
        "pe",
        "assembly"
    ],
    "user": "LighFusion",
    "time": "Jun 13, 2020 at 23:14",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what is your final goal with this?</span>",
            "time": null
        },
        {
            "user": "LighFusion",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky i want to handle function that is being called from .exe and process it's object data. I did some workaround renaming function that is missing in .dll to existing but not used function is same .dll , and hooking it via trampoline . But i'm worried it might create some issues.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since I don't know any tool to solve your problem easily, I will tell you how it can be done \"by hand\".</p>\n<p>First of all, you have to be familiar with PE format. If you are not, you may check <a href=\"https://www.aldeid.com/wiki/PE-Portable-executable\" rel=\"nofollow noreferrer\">aldeid</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format\" rel=\"nofollow noreferrer\">MSDN</a> to understand the steps I will describe. Adding an export to <code>dll</code> is just extending <code>Export Directory</code> and possibly changing some other fields. So, what you have to do is to:</p>\n<ol>\n<li>Open your <code>dll</code> in PE parser. It can be <a href=\"http://www.pe-explorer.com/\" rel=\"nofollow noreferrer\">PE Explorer</a>, <a href=\"https://ntcore.com/?page_id=388\" rel=\"nofollow noreferrer\">CFF Explorer</a> or in disassembler such as IDA (tick manual load, and then load all possible sections).</li>\n<li>Open your favourite hex editor in order to patch <code>dll</code>. Some changes may be done in above mentioned PE parsers, but not all.</li>\n<li>Increase <code>ExportDirectory.NumberOfFunctions</code> by <code>1</code>, since you are adding new function.</li>\n<li>Do the same thing with <code>ExportDirectory.NumberOfNames</code>.</li>\n<li>Now, you have to add new entry to <code>Export Address Table</code>, which is located at <code>ExportDirectory.AddressOfFunctions</code>. Just use hex editor to insert <code>4</code> new NULL bytes - you will set their value when you insert your function's code.</li>\n<li>After previous step, <code>ExportDirectory.AddressOfNames</code> has probably changed (by <code>4</code> bytes). You have to adjust it as well.</li>\n<li>Now, insert new entry to <code>ExportDirectory.AddressOfNames</code> - insert another <code>4</code> bytes using hex editor. Later on, you will change it to the name of your function.</li>\n<li>As in step 6. and 7., adjust <code>ExportDirectory.AddressOfNameOrdinals</code> and add <code>2</code> bytes using hex editor (highest ordinal <code>+ 1</code>, write it in little endian).</li>\n<li>Since you have inserted several new bytes, you have to change <code>ExportDirectory.Name</code> as well, to point to the <code>dll</code> name.</li>\n<li>Now, insert your function's name at the end of the table of function names (last entry in <code>ExportDirectory.AddressOfNames</code>).</li>\n<li>Set the entry you have created in 7. so it points to your function name.</li>\n<li>Insert your function's code at the end of <code>.text</code> section (if it is small enough, you won't have to resize it).</li>\n<li>Set the entry you have created in 5.</li>\n<li>Change <code>Export Directory Size</code> to match your new size.</li>\n<li>Use the same value for changing <code>SectionHeader.VirtualSize</code> for <code>.edata</code> section.</li>\n<li>Increase <code>FileHeader.NumberOfSymbols</code> by <code>1</code>.</li>\n<li>Either increase <code>SectionTable.SizeOfRawData</code> for <code>ExportDirectory</code> by number of bytes you have inserted using hex editor, or delete as this number of NULL bytes at the end of <code>ExportDirectory</code> (if present).</li>\n<li>Zero out or compute new <code>OptionalHeader.CheckSum</code>.</li>\n</ol>\n<p>As you see, it's a tedious process to do this manually and even if you find doing it too difficult, I hope that at least you see what has to be done \"at low level\" to add new export to a <code>dll</code>.</p>\n</div>",
            "votes": "2",
            "user": "bart1e",
            "time": "Jul 19, 2020 at 20:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}