{
    "title": "Searching for a sequence of instructions in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/8899/searching-for-a-sequence-of-instructions-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I search for a sequence of instructions in IDA Pro? </p>\n<p>I did manage to search for a single instruction using text search string <code>li.*r4.*-1</code> (for instruction <code>li r4, -1</code>), but I failed to match multiple instructions or newline character. </p>\n<p>It seems to be possible to this by using the binary search, but this requires converting the assembly to the corresponding binary opcodes. </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "static-analysis"
    ],
    "user": "Zulakis",
    "time": "May 15, 2015 at 15:00",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">You got it the wrong way around, IDA convert binary opcodes to assembly. To the left of the disassembly there should be a list of hex digits that form the opcode and arguments. Perhaps you switched it off. Note that searching for binary bytes may lead to false positives.</span>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">Well after finding this <a href=\"http://www.hexblog.com/?p=105\" rel=\"nofollow noreferrer\">blog</a> post I gave it a go, but I failed to force it for a second line. I don't think they created the text search for this purpose. I have a feeling that IDA uses POSIX regex, thus the '?' and similar markers won't work. Also <a href=\"http://reverseengineering.stackexchange.com/questions/2493/ida-pro-list-of-functions-with-instruction\">this</a> might be somewhat related. I guess you have to stick to idapython to find multiline instructions.</span>",
            "time": null
        },
        {
            "user": "Zulakis",
            "text": "<span class=\"comment-copy\">@Jongware I know that IDA converts binary opcodes to assembly, what I meant was, that I'd have to convert the assembly instructions I am looking for to opcodes to search for them.</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Ah - but you would need to find the sequence first so you know what to look for in binary? Try your text search to find each separate opcode. Note down the binary codes, then use these for the combined search.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have a fixed set of instructions you are search for eg:</p>\n<pre><code>li  r4,0\nli  r5,16\nli  r6,32\n</code></pre>\n<p>Assuming you already have one location found, you can look in the binary hex view, and find the byte pattern you want and use that in a binary search, just make sure you write each byte with a space between them like <code>01 02 03 04</code> so IDA treats them as a sequence of bytes, not as a word/int type search.</p>\n<p>If you have a regex like soft match like</p>\n<pre><code>slwi r0,r3,2\nadd r4,r4,r0\n</code></pre>\n<p>but you don't know <code>r4</code> will be the register used, but know it will be this pattern of <code>slwi</code> and <code>add</code> then I'd write a script (IDC or python) that searches using a text search for outer clause, and then checks for the next instruction to match the expected test, or move to next outer clause.</p>\n<p>So the following idc file/code does the outer loop (I was using it to find address offsets that where not set to references), but it might be a good starting base to work from</p>\n<pre><code>#include &lt;idc.idc&gt;\n\nstatic fixAllOffsets( strtext)\n{\n    auto ea, offset;\n    auto last;\n    Message(\"Start\\n\");\n    ea = FindText(0x100000, SEARCH_DOWN | SEARCH_REGEX, 0, 0, strtext);\n    last = 0;\n    while( ea != BADADDR &amp;&amp; ea != last)\n    {\n        Message(\"%a\\n\", ea);\n\n        // INSERT you next line checks here\n\n        last = ea;\n        ea = FindText(ea+6, SEARCH_DOWN | SEARCH_REGEX, 0, 0, strtext);\n    }\n    Message(\"End\\n\");\n}\n\nstatic main() \n{\n    fixAllOffsets( \"0x9[EF][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]\" );\n}\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Simeon Pilgrim",
            "time": "May 18, 2015 at 2:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}