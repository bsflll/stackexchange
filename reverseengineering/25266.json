{
    "title": "Why does an executable still run despite changes to checksum, or changes to data section without new checksum?",
    "link": "https://reverseengineering.stackexchange.com/questions/25266/why-does-an-executable-still-run-despite-changes-to-checksum-or-changes-to-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a \"Hello World\" console app compiled with Flat Assembler. The size of the executable is 2048 bytes and the checksum is 0x3797.</p>\n<p><strong>Questions:</strong></p>\n<p>Does it matter if I make changes to the data section and minor change to code section of the executable while maintaining the same checksum?</p>\n<p>Not really changing the opcode, just inserting different <code>input.Length</code> (length of null-terminated text string in data section)</p>\n<pre><code>     push 0xfffffff5 // - 11\n     call DWORD PTR ds:0x40304c // .idata [GetStdHandle]\n     push 0x0\n     push 0x401014\n     push [input.Length]\n     push 0x401000 // .data\n     push eax\n     call DWORD PTR ds:0x403050 // .idata [WriteConsole]\n     push 0x0\n     call DWORD PTR ds:0x0403048 // .idata [ExitProcess]\n</code></pre>\n<p>Why does it still run even though I use different checksum?\nFor example, it still run even if I change the checksum to 0x995A or 0x5A99.</p>\n<p>I use <code>ImageHlp.dll</code> to compute the checksum as summarized below:</p>\n<pre><code>int HeaderSum = 0;\nint CheckSum = 0;\nIntPtr ptrHeaderSum=Marshal.AllocHGlobal(sizeof(int));\nMarshal.WriteInt32(ptrHeaderSum, HeaderSum);\nIntPtr ptrCheckSum = Marshal.AllocHGlobal(sizeof(int));\nMarshal.WriteInt32(ptrCheckSum, CheckSum);\nUInt32 status= ImageHlp.MapFileAndCheckSumA(@\"D:\\19_02_21.exe\", ptrHeaderSum, ptrCheckSum);\n\nConsole.WriteLine(status);\nCheckSum = Marshal.ReadInt32(ptrCheckSum);\nConsole.WriteLine(CheckSum);\n\nMarshal.FreeHGlobal(ptrHeaderSum);\nMarshal.FreeHGlobal(ptrCheckSum);\nConsole.ReadLine();\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "253",
    "tags": [
        "windows",
        "pe",
        "c#",
        "reassembly"
    ],
    "user": null,
    "time": "Jun 10, 2020 at 14:42",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The PE checksum is only checked for drivers by the kernel, for the user-mode binaries it's optional. As mentioned <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/imagehlp/nf-imagehlp-mapfileandchecksuma\" rel=\"nofollow noreferrer\">in the doc</a>:</p>\n<blockquote>\n<p>Checksums are required for kernel-mode drivers and some system DLLs.\n  The linker computes the original checksum at link time, if you use the\n  appropriate linker switch. For more details, see your linker\n  documentation.</p>\n</blockquote>\n<p>The linker option is <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/release-set-the-checksum\" rel=\"nofollow noreferrer\"><code>/RELEASE</code></a>:</p>\n<blockquote>\n<p>The /RELEASE option sets the Checksum in the header of an .exe file.</p>\n<p>The operating system requires the Checksum for device drivers. Set the\n  Checksum for release versions of your device drivers to ensure\n  compatibility with future operating systems.</p>\n<p>The /RELEASE option is set by default when the /SUBSYSTEM:NATIVE\n  option is specified.</p>\n</blockquote>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2020 at 16:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}