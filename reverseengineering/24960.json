{
    "title": "USB packet capture; understanding the communication",
    "link": "https://reverseengineering.stackexchange.com/questions/24960/usb-packet-capture-understanding-the-communication",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Good Day-</p>\n<p>I have captured via Wireshark some data and am attempting to understand it as well as the communication protocol for USB.</p>\n<p>This one capture contains the sequence 02010c, which tells me the firmware version of a particular target. Wireshark says the request is in an earlier sequence- but I am not understanding where in that particular request is the actual 'request'. So I believe I am having trouble understanding how the URBs are working.</p>\n<pre><code>Frame 32625: 91 bytes on wire (728 bits), 91 bytes captured (728 bits) on interface wireshark_extcap1928, id 0\n    Interface id: 0 (wireshark_extcap1928)\n    Encapsulation type: USB packets with USBPcap header (152)\n    Arrival Time: May  8, 2020 14:02:24.741579000 Eastern Daylight Time\n    [Time shift for this packet: 0.000000000 seconds]\n    Epoch Time: 1588960944.741579000 seconds\n    [Time delta from previous captured frame: 0.000943000 seconds]\n    [Time delta from previous displayed frame: 0.000943000 seconds]\n    [Time since reference or first frame: 141.773912000 seconds]\n    Frame Number: 32625\n    Frame Length: 91 bytes (728 bits)\n    Capture Length: 91 bytes (728 bits)\n    [Frame is marked: False]\n    [Frame is ignored: False]\n    [Protocols in frame: usb]\nUSB URB\n    [Source: 3.12.1]\n    [Destination: host]\n    USBPcap pseudoheader length: 27\n    IRP ID: 0xffffd50384c4da20\n    IRP USBD_STATUS: USBD_STATUS_SUCCESS (0x00000000)\n    URB Function: URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER (0x0009)\n    IRP information: 0x01, Direction: PDO -&gt; FDO\n        0000 000. = Reserved: 0x00\n        .... ...1 = Direction: PDO -&gt; FDO (0x1)\n    URB bus id: 3\n    Device address: 12\n    Endpoint: 0x81, Direction: IN\n        1... .... = Direction: IN (1)\n        .... 0001 = Endpoint number: 1\n    URB transfer type: URB_INTERRUPT (0x01)\n    Packet Data Length: 64\n    [Request in: 32618]\n    [Time from request: 0.008964000 seconds]\n    [bInterfaceClass: HID (0x03)]\nLeftover Capture Data: 7e107bff000882000302010c003500000000000000000000â€¦\n</code></pre>\n<p>The request that is referenced:</p>\n<pre><code>Frame 32618: 27 bytes on wire (216 bits), 27 bytes captured (216 bits) on interface wireshark_extcap1928, id 0\n    Interface id: 0 (wireshark_extcap1928)\n    Encapsulation type: USB packets with USBPcap header (152)\n    Arrival Time: May  8, 2020 14:02:24.732615000 Eastern Daylight Time\n    [Time shift for this packet: 0.000000000 seconds]\n    Epoch Time: 1588960944.732615000 seconds\n    [Time delta from previous captured frame: 0.000033000 seconds]\n    [Time delta from previous displayed frame: 0.000033000 seconds]\n    [Time since reference or first frame: 141.764948000 seconds]\n    Frame Number: 32618\n    Frame Length: 27 bytes (216 bits)\n    Capture Length: 27 bytes (216 bits)\n    [Frame is marked: False]\n    [Frame is ignored: False]\n    [Protocols in frame: usb]\nUSB URB\n    [Source: host]\n    [Destination: 3.12.1]\n    USBPcap pseudoheader length: 27\n    IRP ID: 0xffffd50384c4da20\n    IRP USBD_STATUS: USBD_STATUS_SUCCESS (0x00000000)\n    URB Function: URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER (0x0009)\n    IRP information: 0x00, Direction: FDO -&gt; PDO\n        0000 000. = Reserved: 0x00\n        .... ...0 = Direction: FDO -&gt; PDO (0x0)\n    URB bus id: 3\n    Device address: 12\n    Endpoint: 0x81, Direction: IN\n        1... .... = Direction: IN (1)\n        .... 0001 = Endpoint number: 1\n    URB transfer type: URB_INTERRUPT (0x01)\n    Packet Data Length: 0\n    [Response in: 32625]\n    [bInterfaceClass: HID (0x03)]\n</code></pre>\n<p>I've read a number of different examples on in, out, transfer packets. I'm just failing to see how this is working.</p>\n<p>Is it as simple as... there's another pair of packets further up(down?) that is sending a command to the end point, and the machine is sitting there waiting to respond with an 'in' request from the host to let it know to send the data?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "1k",
    "tags": [
        "firmware",
        "usb",
        "wireshark"
    ],
    "user": "J.Hirsch",
    "time": "May 9, 2020 at 18:40",
    "comments": [],
    "answers_data": []
}