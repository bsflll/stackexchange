{
    "title": "What is an \"opaque predicate\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/1669/what-is-an-opaque-predicate",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I saw the term of <em>opaque predicates</em> several times in obfuscation papers. As far as I understand it, it refers to predicates that are hard to evaluate in an automated manner. Placing it at strategical points of the program (<code>jmp</code>, <code>test</code>, ...) can mislead the analysis of a program by automatic tools.</p>\n<p>My definition is lacking of precision and, moreover, I have no idea on how to estimate the <em>opacity</em> of such a predicate (its efficiency). So, can somebody give a proper definition and maybe a few examples ?</p>\n</div>",
    "votes": "20",
    "answers": 4,
    "views": "13k",
    "tags": [
        "obfuscation"
    ],
    "user": "perror",
    "time": "Apr 9, 2013 at 7:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answers already in this thread are good ones.  In a nutshell, an opaque predicate is \"something that a program analysis might miss, if the program analysis is not sophisticated enough\".  Denis' example was based on the inverse of constant propagation, and served as an anti-checksum mechanism.  Joxean's <code>SetErrorMode</code> example was an environment-based opaque predicate that was used for dynamic anti-emulation.  Two of Ange's answers were also dynamic anti-emulation; based upon the environment, and based upon uncommon platform features.  Ange's other example was more like an anti-disassembly trick via indirect addressing.</p>\n<p>In the academic literature, an opaque predicate is referred to as a branch that always executes in one direction, which is known to the creator of the program, and which is unknown a priori to the analyzer.  The notion of \"hardness\" of an opaque predicate is deliberately omitted from this definition.  Academic predicates are often based upon number-theoretic constructions, aliasing relationships, recursive data structures; basically anything that is commonly understood by program analysis researchers to cause problems for a program analysis tool.  </p>\n<p>My favorite researcher Mila Dalla Preda has shown that the ability for an abstract interpreter to break a given category of opaque predicate is related to the \"completeness\" of the domain with respect to the property tested by the predicate.  She demonstrates by using mod-k-based opaque predicates, and elicits a family of domains that are complete (i.e. incur no abstract precision loss) for mod-k with respect to common transformers (addition, multiplication, etc).  Then she explores the use of obscure theoretical constructions such as completeness refinement to automatically construct a domain for breaking a certain category of predicate.  See <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.3653&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow noreferrer\">this paper</a> for more details.</p>\n</div>",
            "votes": "21",
            "user": "perror",
            "time": "Feb 16, 2020 at 23:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Yennefer",
                    "text": "<span class=\"comment-copy\">Hi, the link is broken. Do you happen to know where I can find it?  Thank you</span>",
                    "time": null
                },
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">@Yennefer An archived copy of the paper is available on the Web Archive at <a href=\"https://web.archive.org/web/20090116013739/http://profs.sci.univr.it/~dallapre/AMAST06.pdf\" rel=\"nofollow noreferrer\">web.archive.org/web/20090116013739/http://profs.sci.univr.it/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An <em>opaque predicate</em> is an obfuscated condition, that, followed with a conditional operation, will make the analysis harder, and in some cases impossible until code is actually executed until that condition is evaluated.</p>\n<p>This is used to disrupt static analysis (outcome is unpredictable) or emulation (to tell the difference between a real machine and an emulated environment).</p>\n<p>They can rely on executions conditions, CPU features, API calls, and documented or not.</p>\n<h1>Examples</h1>\n<h2>initial values</h2>\n<p>As values of registers are neither null nor completely random on process start, they can be relied on to create tests that look random but are actually deterministic:</p>\n<p>example:</p>\n<pre><code>&lt;EntryPoint&gt;:\n   jnz &lt;InvalidPath&gt;\n   &lt;ValidPath&gt;\n</code></pre>\n<ol>\n<li><a href=\"https://code.google.com/p/corkami/wiki/InitialValues#Flags\">flags register</a> is always <code>246</code> at EntryPoint\n<ul>\n<li><code>ZF</code> is always set</li>\n</ul></li>\n<li>as a consequence, <code>jnz</code> will never be taken.</li>\n</ol>\n<h2>checksum</h2>\n<ol>\n<li>compute a checksum of some piece of code or data\n<ul>\n<li>preferably something not present before runtime</li>\n</ul></li>\n<li>xor with <code>expected_result ^ jump_target</code></li>\n<li>blindly use the result to jump somewhere</li>\n</ol>\n<p>thus, it might be impossible to tell in advance what the next instructions will be.</p>\n<h2>mathematic functions</h2>\n<ol>\n<li>implement an asymptotic function in FPU\n<ul>\n<li>FPU is more likely to be unsupported or wrongly emulated/analysed than standard instructions</li>\n</ul></li>\n<li>implement enough iteration to guarantee the result\n<ul>\n<li>many iterations might make an emulator run out of cycles</li>\n</ul></li>\n<li>use the final result in a test, as a jump target, etc...</li>\n</ol>\n</div>",
            "votes": "19",
            "user": "Ange",
            "time": "Apr 10, 2013 at 13:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not necessarily the predicate must be hard to evaluate. An opaque predicate is a condition which the result is known in advance by the programmer and that cannot be resolved statically (by a compiler, for example) and must be resolved dynamically.</p>\n<p>An example I noticed in malware some years ago:</p>\n<pre><code>  SetErrorMode(100);\n  if ( SetErrorMode(1024) == 100 )\n    // Valid Path\n  else\n    // Invalid Path\n</code></pre>\n<p>Without executing the program (or knowing how the Win32 API <code>SetErrorMode</code> works) there is no way to determine which of the paths the program will take. However, as <code>SetErrorMode</code> returns the last previous code set, the programmer knows before executing this piece of code that the 1st path is the only valid one.</p>\n</div>",
            "votes": "14",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 4:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sort of it also can be found in malicious obfuscated JavaScript code:</p>\n<pre><code>001     vz = 1;\n002     var1 = 49;\n003     var2 = var1;\n004     if (var1 == var2){\n005       document.location = \"http://path.to.malicious.website\";\n006     }\n</code></pre>\n<p>here You see attempt in line 001-004 declare vars and conditions, that meaningless, and present to change obfuscated code hash and to complicate automatic analysis.</p>\n<p>p.s. this is very simple examples, for more complicated samples of opaque predicate in JS see DefenceCode <a href=\"http://blog.defensecode.com/2012/10/diving-into-recent-0day-javascript.html\">blog post</a></p>\n</div>",
            "votes": "9",
            "user": "Denis Laskov",
            "time": "Apr 9, 2013 at 8:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}