{
    "title": "IDA - Best way to find out type of function parameters?",
    "link": "https://reverseengineering.stackexchange.com/questions/12968/ida-best-way-to-find-out-type-of-function-parameters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is probably a stupid question.</p>\n<p>Imagine our dissassembled function takes 1 parameter, for example \"unsigned short *\"</p>\n<p>However, in c++ this could be a BSTR, or something else...what is the best way to figure out the type of input that is expected? </p>\n<p>Right now I am just making educated guesses..but there must be a better way? (Or if someone can point me to good books/resources covering this)</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "Xenocide",
    "time": "Jul 1, 2016 at 8:01",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<span class=\"comment-copy\">Do a web search for \"reverse engineering type inference\"</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">I was about to recommend you \"do an educated guess\", until I read this is what you do. This is what, personally, I do. There is no other way, I think. You need to reverse engineer a number of callees and callers to determine its type.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To figure out the type of a function parameter, you could reverse engineer the caller to see where the input parameter is coming from and how it's instantiated (potentially needing to go up a few levels in the call stack), and/or you could reverse engineer the callee to see how it handles the parameter.</p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jul 4, 2016 at 19:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}