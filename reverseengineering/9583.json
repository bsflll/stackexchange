{
    "title": "How to stop debugger right after the execution?",
    "link": "https://reverseengineering.stackexchange.com/questions/9583/how-to-stop-debugger-right-after-the-execution",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using <code>/bin/true</code> as my sample binary (without available main method):</p>\n<pre><code>$ lldb /bin/true\n(lldb) target create \"/bin/true\"\nCurrent executable set to '/bin/true' (x86_64).\n(lldb) break main\ninvalid command 'breakpoint main'\n</code></pre>\n<p>Is there any universal way to run the binary and stop the debugger right after the load, so appropriate symbols can be loaded? Something equivalent on breaking on the main method (first line of the code)? Or I need to calculate the entry point manually? If so, how?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "4k",
    "tags": [
        "debugging",
        "linux",
        "gdb",
        "lldb",
        "breakpoint"
    ],
    "user": "kenorb",
    "time": "Aug 8, 2015 at 13:08",
    "comments": [
        {
            "user": "kenorb",
            "text": "<span class=\"comment-copy\">For <code>gdb</code>, see: <a href=\"http://stackoverflow.com/q/10483544/55075\">Stopping at the first machine code instruction in gdb</a> at SO</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Binaries are usually <a href=\"https://en.wikipedia.org/wiki/Strip_%28Unix%29\" rel=\"nofollow noreferrer\">stripped</a>. For ELF binaries, you can check it with <code>file</code> command</p>\n<pre><code>$ file /bin/true\n/bin/true: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=0x73796652ea437df8ac7b3ba1864a7ac177e27600, stripped\n</code></pre>\n<p>Notice the <code>stripped</code> at the end of file's result. It means, among other things, that symbols have been removed, so it won't find <code>main</code> function. </p>\n<p>In order to run the binary and stop the debugger right after the load, there is some <strong>kind of</strong> universal method that should almost always work (kind of universal, not 100%)</p>\n<p>You have to find the entry point, retreived by this command :</p>\n<pre><code>$ readelf -h /bin/true | grep \"Entry point\"\n  Entry point address:               0x401264\n</code></pre>\n<p>Then load the binary into your favourite debugger (lldb, gdb, ...) and break on this address.</p>\n<p><strong>lldb :</strong></p>\n<pre><code>$ lldb /bin/true\n(lldb) target create \"/bin/true\"\nCurrent executable set to '/bin/true' (x86_64).\n(lldb) br s -a 0x401264\nBreakpoint 1: address = 0x0000000000401264\n(lldb) r\n...\n(lldb)\n</code></pre>\n<p><strong>gdb :</strong></p>\n<pre><code>$ gdb -q /bin/true\nReading symbols from /bin/true...(no debugging symbols found)...done.\ngdb$ b *0x401264\nBreakpoint 1 at 0x401264\ngdb$ r\nBreakpoint 1, 0x0000000000401264 in ?? ()\ngdb$\n</code></pre>\n<p>Once you've loaded your binary and your breakpoint has been triggered, you can display following instructions that will be executed this way :</p>\n<p><strong>lldb :</strong></p>\n<pre><code>(lldb) x -s4 -fi -c11 $pc\n-&gt; 0x401264:    xor    ebp,ebp\n   0x401266:    mov    r9,rdx\n   0x401269:    pop    rsi\n   0x40126a:    mov    rdx,rsp\n   0x40126d:    and    rsp,0xfffffffffffffff0\n   0x401271:    push   rax\n   0x401272:    push   rsp\n   0x401273:    mov    r8,0x403560\n   0x40127a:    mov    rcx,0x403570\n   0x401281:    mov    rdi,0x4011c0\n   0x401288:    call   0x401060 &lt;__libc_start_main@plt&gt;\n</code></pre>\n<p><strong>gdb :</strong></p>\n<pre><code>gdb$ x/11i $pc\n=&gt; 0x401264:    xor    ebp,ebp\n   0x401266:    mov    r9,rdx\n   0x401269:    pop    rsi\n   0x40126a:    mov    rdx,rsp\n   0x40126d:    and    rsp,0xfffffffffffffff0\n   0x401271:    push   rax\n   0x401272:    push   rsp\n   0x401273:    mov    r8,0x403560\n   0x40127a:    mov    rcx,0x403570\n   0x401281:    mov    rdi,0x4011c0\n   0x401288:    call   0x401060 &lt;__libc_start_main@plt&gt;\n</code></pre>\n<p><code>i</code> flag means <strong>i</strong>nstruction, and <code>$pc</code> means <strong>P</strong>rogram <strong>C</strong>ounter (equivalent of EIP/RIP for 32/64 bits architecures). You can see that <a href=\"http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html\" rel=\"nofollow noreferrer\">__libc_start_main</a> will be called at address <code>0x401288</code>. Its man page indicates its first argument is a pointer to binary <code>main</code> function. 1st argument is here loaded in <code>rdi</code> register, meaning that <code>main</code> function is located at address <code>0x4011c0</code>.</p>\n<p>You just have to finally place a breakpoint at this address (<code>0x4011c0</code>) and you'll be at the beginning of your binary main function.</p>\n<p>Further reading : <a href=\"https://reverseengineering.stackexchange.com/questions/1935/how-to-handle-stripped-binaries-with-gdb-no-source-no-symbols-and-gdb-only-sho\">How to handle stripped binaries with GDB? No source, no symbols and GDB only shows addresses?</a></p>\n<p>Good luck and have fun !</p>\n</div>",
            "votes": "8",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ruslan",
                    "text": "<span class=\"comment-copy\">The easiest way starting with GDB 8.1 is the <code>starti</code> command. No need to manually look for entry point address.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"http://lldb.llvm.org/tutorial.html\" rel=\"noreferrer\">http://lldb.llvm.org/tutorial.html</a>:</p>\n<pre><code>(lldb) process launch --stop-at-entry -- -program_arg value\n</code></pre>\n<p>Note your <code>break main</code> is a <code>gdb</code> command; <code>lldb</code>s error message isnt \"no such symbol\", it's \"invalid command\". To do the same in <code>lldb</code>, use</p>\n<pre><code>(lldb) breakpoint set --name main\n</code></pre>\n</div>",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Aug 8, 2015 at 14:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}