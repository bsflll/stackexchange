{
    "title": "Chunked function (discontinuous chunks of code comprising a function)",
    "link": "https://reverseengineering.stackexchange.com/questions/3676/chunked-function-discontinuous-chunks-of-code-comprising-a-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The control flow graph below is from a single function in Notepad (Win7 64-bit). Why is the linker (or the compiler) separating the basic blocks of a single function into multiple, discontinuous ( not contiguous )  chunks?</p>\n<p><img alt=\"Function CFG\" src=\"https://i.sstatic.net/GM19m.png\"/> </p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c",
        "compilers"
    ],
    "user": "CarstenC4",
    "time": "May 26, 2020 at 8:49",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">Look into Working-Set Tuning, and <a href=\"http://reverseengineering.stackexchange.com/questions/3167/grouping-functions-based-on-their-placement-order-in-the-binary/3169#3169\">this semi-related answer of mine</a>.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@CarstenC4: why do you consider these separate address ranges? Can you elaborate? From your question they all appear to use the exact same address range, which makes your question a bit unclear.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@CarstenC4: you mean why the function is not contiguous in memory? I.e. why it is chunked?</span>",
            "time": null
        },
        {
            "user": "CarstenC4",
            "text": "<span class=\"comment-copy\">@0xC..22L: 'not contiguous' is the better wording, thanks</span>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">This is done for cache locality. They try to keep the \"hot paths\" of functions in one cache line, while \"cold paths\" are in another cache line.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>DCoder already referenced <a href=\"https://reverseengineering.stackexchange.com/a/3169/245\">his own answer</a> in a comment.</p>\n<p>The chunks in the control flow graph are usually referred to as basic blocks or extended basic blocks. The reason why they are being reordered has to with <a href=\"http://en.wikipedia.org/w/index.php?title=Optimizing_compiler&amp;oldid=592712045#Other_optimizations\" rel=\"nofollow noreferrer\">optimizations performed by the compiler</a>.</p>\n<p>There are several terms for what you are asking about:</p>\n<ul>\n<li>function chunking</li>\n<li>basic block reordering</li>\n<li>partition interleaving</li>\n</ul>\n<p>I strongly suggest that if you are interested in this topic, you read up on compiler design. In particular I would suggest reading \"the dragon book\" (\"Compilers - Principles, Techniques, &amp; Tools\" by Aho, Lam, Sethi and Ullman) and there the parts about optimization. Here I refer to the second edition from 2007 (ISBN: 0-321-48681-1).</p>\n<p>Check out the sections 8.4 (\"Basic Blocks and Flow Graphs\") and 8.5 (\"Optimization of Basic Blocks\") and in the latter 8.5.7 (\"Reassembling Basic Blocks From DAGs\"). But that's only the beginning. Chapter 9 is equally important as a whole and so is section 11.10 (\"Locality Optimizations\"). Quoting one of the reasons for the kind of optimization you're asking about from the introductory paragraph of the subsection on partition interleaving:</p>\n<blockquote>\n<h2>11.10.3 Partition Interleaving</h2>\n<p>Different partitions in a loop often read the same data, or read and write the same cache lines. [...]</p>\n</blockquote>\n<p>quoted from <strong>\"Compilers - Principles, Techniques, &amp; Tools\"</strong> by Aho, Lam, Sethi and Ullman.</p>\n<p>This boils down to what DCoder has already mentioned in his/her comment to your question.</p>\n<p>Oh and the book <strong>\"Reversing: Secrets of Reverse Engineering\"</strong> is also a good read that discusses this in part. However, it's more focused on the \"how does it look\" than the \"why is it done\".</p>\n</div>",
            "votes": "6",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}