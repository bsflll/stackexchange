{
    "title": "Reverse engineering MQTT payload in a (apparently) sophisticated smart lamp",
    "link": "https://reverseengineering.stackexchange.com/questions/32566/reverse-engineering-mqtt-payload-in-a-apparently-sophisticated-smart-lamp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Background</h1>\n<p>I have recently bought a (quite expensive) smart lamp. It is not from a known producer, it's a relatively small company, but they seem to have implemented MQTT in a quite serious way.</p>\n<h1>Initial analysis</h1>\n<p>Through packet inspection, I have extracted the following relevant MQTT messages exchanged between the lamp and the server.</p>\n<ul>\n<li>Authentication: the password is hashed, but the username is clear: let's say it is <code>123456789012&amp;randString</code> (yes, the username is comprised of my account number and an apparently random string)</li>\n<li>MQTT broker address: let's say it is <code>randString.server.inchina.com</code> (the randString matches the one in the username)</li>\n<li>Payload of lamp turn on, off, change color, change brightness, etc.</li>\n<li>MQTT topic: let's say it is <code>/randString/123456789012/user/devices/pese/sub</code> (randString matches the one in the username and the 12 chars number is my account number)</li>\n</ul>\n<h1>First approach to the problem</h1>\n<p>What I did is the following, in order to communicate with the lamp via MQTT:</p>\n<ul>\n<li>Set up my mqtt broker at <code>my.mqtt.broker</code></li>\n<li>Added a <code>dnsmasq</code> rule on my openWRT router so that all traffic to <code>randString.server.inchina.com</code> is redirected to <code>my.mqtt.broker</code></li>\n<li>Wrote a <code>mosquitto</code> <code>auth_plugin</code> in C that allows clients to authenticate with <code>username123</code> only, but can use any password (yeah very safe)</li>\n</ul>\n<h1>Testing the set-up</h1>\n<p>I have tested everything and, if I send (certain) payloads to the lamp, it answers (sometimes with an error message if the message contains weird values).</p>\n<p>Now, I have tried to send the exact payload I have sniffed to turn on and off the lamp, it answers by sending its status (like RSSI etc.) but nothing happens.</p>\n<p>Here is the payload I have sniffed when I turn on the light (username and topic are redacted, if they will be necessary I'll post a pastebin link so that I can later delete it and spread information as little as possible as it contains my username).</p>\n<pre><code>{\"id\":49,\"jsonrpc\":\"2.0\",\"method\":\"SetOrControlDevices\",\"params\":{\"data\":[{\"data\":{\"dps\":{\"1\":true},\"time\":{\"1\":2}},\"node_id\":17,\"sn\":33333}],\"frame_status\":0,\"from_account\":\"123456789012\",\"md5\":\"F8CC42572A96E337034CB982282C91BA\",\"rand\":\"D8SN8R6J\",\"time\":\"1702424815396\"}}\n</code></pre>\n<h1>The problem</h1>\n<p>After a quick research, I have realized that the fields <code>md5</code> and <code>rand</code> are not there for pure aesthetic purposes. They are evidence of an implementation of MQTT enhanced authentication through DIGEST-MD5. It is an authentication method that uses the MD5 hash and a challenge-response mechanism to secure communication between client and server. This method avoids transmitting passwords in plain text over the network. When a client wants access, the server sends a challenge, and the client responds with a hashed result. If the server's expected result matches the client's response, authentication succeeds, enhancing security against password exposure and replay attacks.</p>\n<h1>The question</h1>\n<p>Now here is my question: how can I approach (and possibly \"hack\") this novel type of MQTT authentication?</p>\n<h1>Other options to consider</h1>\n<p>I have considered other options such as:</p>\n<ul>\n<li>Reverse engineering the firmware: however, it uses a very very peculiar Chinese (not exported it seems) microchip, not a classic (still Chinese) ESP32 nor ESP8266 et similia.</li>\n<li>\"Decrypting\" (is this the right word?) the hashed password: however, these people clearly know what they are doing and it is not a commonly known password. On top of that it would violate T&amp;Cs and would probably configure some sort of crime that I don't want to commit.</li>\n<li>Brute for... ehmm never mind. Not an option.</li>\n<li>MITM attack? Isn't what I have already tried a MITM? Are there other ways?</li>\n</ul>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "56",
    "tags": [
        "networking",
        "smart-devices"
    ],
    "user": "user3161330",
    "time": "Dec 13, 2023 at 9:52",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">Is there a companion app to control the lamp? If so that might reveal more information.</span>",
            "time": null
        },
        {
            "user": "user3161330",
            "text": "<span class=\"comment-copy\">There is for iOS and Android. I decompiled the one for android, but I found nothing concerning MQTT. The device comes with a touch screen that controls the light via BLE and updates its firmware via WiFi. I downloaded a .bin file and a .img file when updating its firmware but I have no idea on where to start reverse engineering those.</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">The firmware files can be a place to start. Run binwalk and see if it is able to extract or find anything interesting.</span>",
            "time": null
        }
    ],
    "answers_data": []
}