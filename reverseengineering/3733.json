{
    "title": "Why cl.exe change the extern function name used in my code?",
    "link": "https://reverseengineering.stackexchange.com/questions/3733/why-cl-exe-change-the-extern-function-name-used-in-my-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So basically I my nasm syntax asm code, I use some extern functions like this:</p>\n<pre><code>extern _printf\nextern __imp__Sleep@4\n....\ncall _printf\ncall    [__imp__Sleep@4]\n</code></pre>\n<p>Then I use nasm to assemble it into obj:</p>\n<pre><code>nasm -f win32 test.asm\n</code></pre>\n<p>Then I use IDA Pro to disassemble test.obj, I can see code like this:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/awMR3.png\"/> </p>\n<p>See, extern function name like <strong>_printf</strong> has been kept.</p>\n<p>But when I link this obj file:</p>\n<pre><code>cl /MT z:\\\\windows\\\\test.obj /link kernel32.lib libcmt.lib /SUBSYSTEM:CONSOLE\n</code></pre>\n<p>Then I use IDA Pro to disassemble test.exe, I can see code like this:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/oGiwm.png\"/></p>\n<p>See, the function name of <strong>_printf</strong> has been changed.</p>\n<p>I know basically after static link, the code of _printf has been put into the test.exe, in the subroutine of <strong>sub_409C9B</strong></p>\n<p>But basically <strong>I have to make the name of extern declared functions unchangeable</strong>, because I need to reverse engineering the test.exe and do some modify/remove towards those functions, and once PE exe lost the name info, I can not locate those targeting functions.</p>\n<p>So my question is:</p>\n<p>Why cl.exe will change the name of those functions, and is there any way to stop the change(I mean keep the function name unchangeable during the link time)?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "458",
    "tags": [
        "ida",
        "winapi",
        "nasm"
    ],
    "user": "lllllllllllll",
    "time": "Feb 20, 2014 at 18:01",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">That is why there exists signatures for IDA (Flirt) to detect such standard library functions. Apply them and see.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You've got some kind of <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY-problem</a>.</p>\n<p>The truth is: it's IDA who so to say \"changes\" the name of (something she thinks is) a function from absolutely nothing to <code>sub_{address}</code>. Why on earth would <code>PE-file</code> have non-exported symbols stored in it? Some kind of masochism? To give a candy to reversers?</p>\n<p>Thus, you have at least three ways of dealing with your problem:</p>\n<ul>\n<li>pray and hope that IDA's <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow\">FLIRT</a> will heuristically recognize <code>printf</code>;</li>\n<li><code>link</code> your program with debug-info: <a href=\"http://msdn.microsoft.com/en-us/library/aa235413.aspx\" rel=\"nofollow\"><code>-debug</code></a> which tells linker to generate <a href=\"http://en.wikipedia.org/wiki/Program_database\" rel=\"nofollow\"><code>pdb</code></a>-file which IDA will query for all the symbols stored for your application;</li>\n<li>tell linker to <a href=\"http://msdn.microsoft.com/en-us/library/aa235424.aspx\" rel=\"nofollow\"><code>-export:printf</code></a> so that it's name will be in export directory and you can get it's address easily even programmatically.</li>\n</ul>\n</div>",
            "votes": "6",
            "user": "Community",
            "time": "Apr 23, 2014 at 13:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When <code>printf()</code> is called as an external function, the Windows loader needs to look up the address of the <code>printf()</code> function by-name at run-time so that the caller can find the <code>printf()</code> code.</p>\n<p>When <code>printf()</code> is called as an embedded library function, the compiler already knows the address of the <code>printf()</code> function at compile-time, and thus doesn't need to embed the function's name in the executable.</p>\n<p>If you want the <code>printf()</code> name to automatically show in your disassembly, either export debug symbols or stick with using external DLLs. Alternatively, you may be able to use IDA's FLIRT libraries to identify the <code>printf()</code> function in the embedded library code.</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Feb 20, 2014 at 18:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}