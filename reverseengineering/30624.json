{
    "title": "Static Code Analysis of a C166 function",
    "link": "https://reverseengineering.stackexchange.com/questions/30624/static-code-analysis-of-a-c166-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to understand a piece of code, working on a C166 MCU. IDA correctly loads and displays the disassembly. Below is the code snippet I am trying to analyze. I don't understand the following instructions:</p>\n<pre><code>jmpr    cc_Z, loc_C112E8\njmpr    cc_Z, loc_C112E0\njmpr    cc_C, loc_C112A6\n</code></pre>\n<p>Here is the code of the function, I hope someone will shed a light when the jumps will be executed:</p>\n<pre><code>\nsub_C1129E:                             ; CODE XREF: sub_C07E4A+38↑P\n                mov     [-r0], r8\n                mov     r14, r12\n                mov     r15, r13\n                mov     r8, #0\n\nloc_C112A6:                             ; CODE XREF: sub_C1129E+56↓j\n                add     r12, #2C29h\n                addc    r13, #0A74Dh\n                xor     r12, #346h\n                xor     r13, #4337h\n                mov     r14, r12\n                mov     r15, r13\n                and     r14, #0\n                and     r15, #8000h\n                add     r12, r12\n                addc    r13, r13\n                or      r14, r15\n                jmpr    cc_Z, loc_C112E8\n                bset    r12.0\n                mov     r14, r12\n                mov     r15, r13\n                and     r14, #1\n                and     r15, #0\n                shr     r12, #1\n                bmov    r12.15, r13.0\n                shr     r13, #1\n                or      r14, r15\n                jmpr    cc_Z, loc_C112E0\n                bset    r13.15\n\nloc_C112E0:                             ; CODE XREF: sub_C1129E+3E↑j\n                xor     r12, #0C345h\n                xor     r13, #985h\n\nloc_C112E8:                             ; CODE XREF: sub_C1129E+28↑j\n                xor     r12, #0D4E5h\n                xor     r13, #0B2C3h\n                add     r8, #1\n                cmp     r8, #5\n                jmpr    cc_C, loc_C112A6\n                mov     r4, r12\n                mov     r5, r13\n                mov     r8, [r0+]\n                rets\n; End of function sub_C1129E\n</code></pre>\n<p>And here is my understanding of the algorithm converted to C code:</p>\n<pre><code>void sub_C1129E(short Param1, short Param2)\n{\n    short r12 = Param1;\n    short r13 = Param2;\n    short r14;\n    r14 = r12;\n    short r15 = r13;\n    short r8 = 0;\n\nloc_C112A6:                             // CODE XREF: sub_C1129E+56↓j\n    r12 = (short)(r12 + 0x2C29);\n    r13 = (short)(r13 + 0xA74D);//    addc    r13, #0A74Dh\n    r12 = (short)(r12 ^ 0x346);//    xor r12, #346h\n    r13 = (short)(r13 ^ 0x4337);//    xor     r13, #4337h\n    r14 = r12;//    mov r14, r12\n    r15 = r13;//    mov r15, r13\n    r14 = (short)(r14 &amp; 0);//    and r14, #0\n    r15 = (short)(r15 &amp; 0x8000);//    and     r15, #8000h\n    r12 = (short)(r12 + r12);// add r12, r12\n    r13 = (short)(r13 + r13);// addc r13, r13\n    r14 = (short)(r14 | r15);//    or r14, r15\n\n    // What to do here? TODO!!!    jmpr cc_Z, loc_C112E8\n\n    r12 = (short)(r12 | 1);    // bset r12.0\n    r14 = r12;//    mov r14, r12\n    r15 = r13;//    mov r15, r13\n    r14 = (short)(r14 &amp; 1);//    and r14, #1\n    r15 = (short)(r15 &amp; 0);//    and     r15, #0\n    r12 = (short)(r12 &gt;&gt; 1);//    shr r12, #1\n\n    r12 = (short)(r12 &amp; 0x7FFF | r13 &lt;&lt; 15);// bmov    r12.15, r13.0\n\n    r13 = (short)(r13 &gt;&gt; 1);//    shr r13, #1\n    r14 = (short)(r14 | r15);//    or      r14, r15\n\n    // What to do here? TODO!!!    jmpr    cc_Z, loc_C112E0\n\n    r13 = (short)(r13 | 0x8000);// bset    r13.15\n\nloc_C112E0:                             // CODE XREF: sub_C1129E+3E↑j\n    r12 = (short)(r12 ^ 0xC345);\n    r13 = (short)(r13 ^ 0x985);//    xor     r13, #985h\n\nloc_C112E8:                             // CODE XREF: sub_C1129E+28↑j\n    r12 = (short)(r12 ^ 0xD4E5);// xor r12, #0D4E5h\n    r13 = (short)(r13 ^ 0xB2C3);// xor     r13, #0B2C3h\n    r8 = (short)(r8 + 1);//add r8, #1\n    if (r8 &lt; 5)//    cmp     r8, #5\n        goto loc_C112A6;// jmpr cc_C, loc_C112A6 -&gt; NOT SURE IF THIS IS CORRECT...\n    int r4 = r12;\n    int r5 = r13;\n}\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "317",
    "tags": [
        "ida",
        "disassembly",
        "static-analysis",
        "c166"
    ],
    "user": "C0DER",
    "time": "Jul 12, 2022 at 21:27",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Did you check the processor manual? What does it say about this instruction?</span>",
            "time": null
        },
        {
            "user": "mumbel",
            "text": "<span class=\"comment-copy\">You might try ghidra as a second reference.  There is a C166 module on GitHub, and you'll get decompilation (quality depends on implementation, been a while since I've reviewed it, not sure exactly on its state)</span>",
            "time": null
        },
        {
            "user": "C0DER",
            "text": "<span class=\"comment-copy\">My mistake is I didn't understand the \"addc\" instruction at first. After reading the manual a second time I found out the problems and fixed all of them. I must say IDA is doing a really great job and C166 is actually not so hard. Here are the fixes to the problematic parts of the code:   <code>code</code> This is wrong: r12 = (short)(r12 + 0x2C29); r13 = (short)(r13 + 0xA74D);// addc    r13, #0A74Dh  This is correct: u32 = r12 + 0x2C29; if (u32 &gt; 0xFFFF)  u8Carry = 1; else  u8Carry = 0; r12 = (unsigned short)(r12 + 0x2C29); r13 = (unsigned short)(r13 + 0xA74D + u8Carry);   <code>code</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I can see in the <a href=\"https://www.infineon.com/dgdl/c166_ism_v2.0_2001_03%5B1%5D.pdf?fileId=db3a304412b407950112b41e7dbe32df\" rel=\"nofollow noreferrer\">manual</a> <code>jmpr</code> is jump relative, the first parameter is a condition, the second parameter is a label it should jump to if the condition is met.</p>\n<p>Relativeness of the jump is not important for understanding the code, it refers to encoding of the instruction.</p>\n<p>Description of the <code>jmpr</code> instruction in this document is on the page 91 of the manual,\nDescription of the possible conditions is in table 5 on the page 38.</p>\n<p>Conditions (specifically <code>cc_Z</code> and <code>cc_C</code>) are set by previously executed ALU operation (specifically <code>or</code> on the page 106 and <code>cmp</code> on the page 63 of the manual in your case).</p>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Jul 17, 2022 at 5:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "C0DER",
                    "text": "<span class=\"comment-copy\">In this case the \"jmpr\" instruction is used to test if r14 is equal to 0. In \"C\" code this translates to:  if (r14 == 0x0000)         goto loc_C112E8;</span>",
                    "time": null
                }
            ]
        }
    ]
}