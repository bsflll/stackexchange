{
    "title": "Identify mod operation in ARM firmware with IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/31881/identify-mod-operation-in-arm-firmware-with-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the firmware in which mod operation must be done. I want to find this part of instructions.</p>\n<p>Assume the following logic exist in the firmware:</p>\n<pre><code>res = var % 17\n</code></pre>\n<p>I have tried to make search by <code>% 0x11</code> using IDA pseudocode and python but it does not find anything. Also I have tried to use gcc to dissemble this mod operation written in C but without any success.</p>\n<p>Architecture: armv7-m</p>\n<p>CPU: cortex-m4</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "156",
    "tags": [
        "ida",
        "disassembly",
        "arm"
    ],
    "user": "ALEX",
    "time": "May 18, 2023 at 16:52",
    "comments": [
        {
            "user": "genghiskhan",
            "text": "<span class=\"comment-copy\">I can't say for certain but one thing to look for would be <a href=\"https://saml98.github.io/jekyll/update/2020/02/21/weird-division.html\" rel=\"nofollow noreferrer\">division by multiplication</a> which could be involved in a modulo calculation. In short, look for a multiplication by a weird/large constant then a right shift by floor(log2(17)) = 4.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An option in these cases is to compile a relevant code snippet with appropriate architecture options and see what assembly is generated.</p>\n<p>For example, take this code.</p>\n<pre><code>long mod17( long x )\n{\n    return x % 17;\n}\n</code></pre>\n<p>Compiling it with <code>gcc -mcpu=cortex-m4 -O2</code>, gives -</p>\n<pre><code>mod17(long):\n        ldr     r3, .L3\n        smull   r3, r2, r3, r0\n        asrs    r3, r0, #31\n        rsb     r3, r3, r2, asr #3\n        add     r3, r3, r3, lsl #4\n        subs    r0, r0, r3\n        bx      lr\n.L3:\n        .word   2021161081    // 0x78787879\n</code></pre>\n<p>The output assembly gives some clues that you could look for in your firmware -</p>\n<ul>\n<li>the 'magic' constant <code>0x78787879</code></li>\n<li>a multiplication instruction closely followed by 3 instructions containing shifts</li>\n</ul>\n<p>Tests of similar code using <code>int</code> instead of <code>long</code> results in the same magic constant.</p>\n<p>However, using unsigned integers results in a different magic constant - <code>0xF0F0F0F1</code> and just 1 shift instruction so you might want to look for these too.</p>\n<p>(Compulsory <a href=\"https://godbolt.org/z/r8hEWYoWv\" rel=\"nofollow noreferrer\">godbolt link.</a>)</p>\n</div>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "May 19, 2023 at 21:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ALEX",
                    "text": "<span class=\"comment-copy\">As I wrote in my question I tried to do exactly what you have done but I am unable to find any magic constants or similar sequence of commands.</span>",
                    "time": null
                }
            ]
        }
    ]
}