{
    "title": "Arm custom u-boot reversing",
    "link": "https://reverseengineering.stackexchange.com/questions/29478/arm-custom-u-boot-reversing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse a custom u-boot that implements cryptography for the Kernel at runtime (the Kernel at rest is encrypted also in a flash). I can probably ask the IoT vendor to provide the modified code of u-boot, but I want to learn something from this experience.</p>\n<p>Some info I gathered:</p>\n<ul>\n<li><a href=\"https://support.hkvstar.com/file/Hi3519_Datasheet.pdf\" rel=\"nofollow noreferrer\">SOC Data Sheet</a> (with memory layouts)</li>\n<li>Ram start at 0x8000_0000 (2Â GB)</li>\n<li>BOOTROM at 0x0400_0000 (64K)</li>\n<li>BOOTRAM at 0x0401_0000 (64K)</li>\n<li>Remapable area from 0x0000_0000 to 0x03FF_FFFF (64 Mb)</li>\n<li><em>Strings</em> on the <em>u-boot.bin</em> file return: <code>bootcmd=kload 0x82000000; bootm 0x82000000</code></li>\n<li>The CPU is Arm Cortex A7 (the SOC have also an A17 but is not the \"default\" one)</li>\n</ul>\n<p>Steps I'm doing to load the binary in IDA:\n<a href=\"https://i.sstatic.net/9NRae.png\" rel=\"nofollow noreferrer\"><img alt=\"Step 1 IDA\" src=\"https://i.sstatic.net/9NRae.png\"/></a></p>\n<p>IDA asked me for the disassembly memory organizations; I tried a couple of things without success. I think this is the part where I messed up something, and later I can find proper addresses when I try to rebuild the Interrupt Vector Table to start defining functions later.</p>\n<p><a href=\"https://i.sstatic.net/sJSdh.png\" rel=\"nofollow noreferrer\"><img alt=\"Step 2 IDA\" src=\"https://i.sstatic.net/sJSdh.png\"/></a></p>\n<p>Which address I should choose in this case based on the information I have?</p>\n<p>An example, if I chose to use <code>0x8000_0000</code> as a loading address and redefine some variables to <em>double word</em> (any Interrupt vector table entry is a double word), this is what I get:</p>\n<p><a href=\"https://i.sstatic.net/qsf6s.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA example\" src=\"https://i.sstatic.net/qsf6s.png\"/></a></p>\n<p>I get something unusable (I can't jump at those addresses); I need to understand how to set up IDA in the early stages.</p>\n<p>Any help, especially with some theory, is appreciated :)</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "982",
    "tags": [
        "ida",
        "disassembly",
        "firmware",
        "arm"
    ],
    "user": "zi0Black",
    "time": "Oct 30, 2021 at 12:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reset vector location is the address right after <code>0xDEADBEEF</code> (not shown in your snippet).</p>\n<p>It is the function that the first instruction's relative branch is branching to.</p>\n<p>Tell IDA to load the segment at that address (<code>0x8080xxxx</code>).</p>\n</div>",
            "votes": "2",
            "user": "MarianD",
            "time": "Nov 13, 2021 at 4:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zi0Black",
                    "text": "<span class=\"comment-copy\">I didn't update the post, but I found that <code>0x8080_0000</code> (looking at DATA ref after an auto analysis). I found a forum where someone analyzed the code, of the custom u-boot, under a developing point of view and <code>0x8080_0000</code> is referenced as the loading address, so I guess it's confirmed. A user on Reddit (blessthe28) suggested turning all the <code>0xEXXX</code> into code since those are unconditional ARM codes, and effectively I got some <code>LD</code> to <code>PC</code> register in the order suggested by the user.  <a href=\"https://imgur.com/a/uf8jsya\" rel=\"nofollow noreferrer\">actual IDA status</a></span>",
                    "time": null
                }
            ]
        }
    ]
}