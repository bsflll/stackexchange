{
    "title": "How to make IDA stop showing a struct as an array",
    "link": "https://reverseengineering.stackexchange.com/questions/32144/how-to-make-ida-stop-showing-a-struct-as-an-array",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sometimes when I am figuring out a struct in IDA, there will be a really big offset and IDA will decide the struct is an array.</p>\n<p>Consider this from ALPC:</p>\n<pre class=\"lang-c prettyprint-override\"><code>  if ( (_Message[1].u1.Length &amp; 0x200) != 0 &amp;&amp; (PortObject-&gt;MainQueueLength &amp; 0x2000) != 0 )\n    {\n      v46 = _InterlockedCompareExchange64((volatile signed __int64 *)&amp;PortObject[1], (signed __int64)_Message, 0i64);\n      _Message = (_PORT_MESSAGE64 *)Message;\n</code></pre>\n<p>I appear to have the struct offsets wrong for port object. It thinks that portobject is an array because it sees an offset off the end of the struct I defined. PortObject is definitely an object best interpreted as a struct - zero chance it's an array.</p>\n<p>How can I make hexrays show the offset in the format of PortObject+0xsomeoffset rather than defaulting to the annoying array notation? It makes it much easier to flip back and forth and figure out what's wrong if things aren't being displayed as an array.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "115",
    "tags": [
        "hexrays"
    ],
    "user": "MrSynAckSter",
    "time": "Aug 7, 2023 at 20:30",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">Prolly not the answer you're looking for, but make sure the size of your type is correct. Usually if you know your type's scope, you can figure its size from the max offset when it gets initialized...it's probably better to train your eyes on spotting unnamed fields. What I've been tending to do lately in order to work around the array syntax (because I agree with your suggestion of making it easier for quick reads), is to declare types that are pointers as <code>int</code> instead of things like <code>void*</code> (which hides the cast). This seems to result in displaying the offset, but is likely a terrible idea.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>PortObject[1]</code> means the referenced offset is just outside of your struct definition, so IDA indexes it with 1 as a second <code>PortObject</code>. Extend your structure definition with a pointer so IDA can resolve it properly.</p>\n</div>",
            "votes": "1",
            "user": "mimak",
            "time": "Aug 7, 2023 at 22:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}