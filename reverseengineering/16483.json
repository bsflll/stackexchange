{
    "title": "Extract conditional instructions using IDA python in ARM binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/16483/extract-conditional-instructions-using-ida-python-in-arm-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While using IDA Python for extract ARM instructions, I noticed that some instructions are not extracted completely. For example, conditional instructions such as <code>BCS</code> or <code>BCC</code> are printed as <code>B</code>. For analyzing, it is necessary we have the instructions completely.  </p>\n<p>Here's the code I used:</p>\n<pre><code>import idautils\nimport idc\nimport idaapi\nfor seg_ea in Segments():\n for head in Heads(seg_ea, SegEnd(seg_ea)):\n  if isCode(GetFlags(head)):\n   disasm= GetMnem(head)\n</code></pre>\n<p>Is there any way to correct this problem? </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "arm",
        "python"
    ],
    "user": "hamid darabian",
    "time": "Oct 5, 2017 at 9:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was able to reproduce your problem on <em>IDA 6.95</em> but it seems like this bug was fixed in <em><a href=\"https://www.hex-rays.com/products/ida/7.0/index.shtml\" rel=\"nofollow noreferrer\">IDA 7</a></em> since it works for me just fine. The solution below will be relevant to IDA 6.95 though it would probably be valid to earlier versions of <em>IDA Pro</em>.  </p>\n<p>Let's start by describing the deadlock we're facing with:<br/>\nThe problematic function, <code>GetMnem</code>, is declared in <code>IDA 6.95\\Python\\idc.py:L2280</code> and looks like this:\n</p>\n<pre><code>def GetMnem(ea):\n    \"\"\"\n    Get instruction mnemonics\n\n    @param ea: linear address of instruction\n\n    @return: \"\" - no instruction at the specified location\n\n    @note: this function may not return exactly the same mnemonics\n    as you see on the screen.\n    \"\"\"\n    res = ida_ua.ua_mnem(ea)\n\n    if not res:\n        return \"\"\n    else:\n        return res\n</code></pre>\n<p>Pay attention to the following disclaimer in the function:</p>\n<blockquote>\n<p>@note: this function may not return exactly the same mnemonics as you see on the screen.</p>\n</blockquote>\n<p>Seems like our problems fits the disclaimer -- we don't see the same mnemonics as we see on the screen.</p>\n<p>As you can see, <code>GetMnem</code> is basically a wrapper to another function -- <code>ua_mnem</code> which is declared in <code>IDA 6.95\\Python\\ida_ua.py:L319</code>:<br/>\n</p>\n<pre><code>def ua_mnem(*args):\n  \"\"\"\n  ua_mnem(ea) -&gt; char const *\n  \"\"\"\n  return _ida_ua.ua_mnem(*args)\n</code></pre>\n<p>Well, seems like <code>ua_mnem</code> is a wrapper to another function which is located in <code>IDA 6.95\\python\\lib\\python2.7\\lib-dynload\\ida_64\\_ida_ua.pyd</code>. A <code>pyd</code> file <a href=\"https://docs.python.org/3/faq/windows.html#is-a-pyd-file-the-same-as-a-dll\" rel=\"nofollow noreferrer\">is actually a <em>DLL</em> file</a> and should not be easy-peasy to reverse. Therefore, we can't see, nor edit, the source code so we can't fix the problem.  </p>\n<p>Here comes the workaround: instead of using <code>GetMnem</code> you can simply mimic it by using <code>GetDisasm</code> and split the line to get only the instruction:</p>\n<pre><code>import idautils\nimport idc\nimport idaapi\nfor seg_ea in Segments():\n for head in Heads(seg_ea, SegEnd(seg_ea)):\n  if isCode(GetFlags(head)):\n    mnem = GetMnem(head)\n    if (mnem[0]=='B'):\n        mnem = GetDisasm(head).split()[0]\n    print mnem\n</code></pre>\n<p>In this case we check whether the mnemonics is a <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0231b/Chddgiff.html\" rel=\"nofollow noreferrer\">branch instruction</a> (begins with \"B\") and if so, we use the mnemonics from <code>GetDisasm</code> and not from <code>GetMnem</code>. Of course you would need to test this solution better and maybe handle some specific cases.</p>\n</div>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Oct 5, 2017 at 9:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><code>_ida_ua.ua_mnem</code> is just a direct wrapper of the underlying IDA API from <code>ida_ua.hpp</code> in the SDK.</span>",
                    "time": null
                }
            ]
        }
    ]
}