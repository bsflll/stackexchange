{
    "title": "Why are these strings padded every other byte?",
    "link": "https://reverseengineering.stackexchange.com/questions/32708/why-are-these-strings-padded-every-other-byte",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've seen this multiple times, through various apps and snooping of hex values. Character strings but every other value is actually a null byte. This particular example is with API Monitor, but I'm almost positive I've seen it through hexdumps of Windows or DOS executables.</p>\n<p><a href=\"https://i.sstatic.net/aNwb4.png\" rel=\"nofollow noreferrer\"><img alt=\"CreateFileW\" src=\"https://i.sstatic.net/aNwb4.png\"/></a>\n<a href=\"https://i.sstatic.net/C4TPQ.png\" rel=\"nofollow noreferrer\"><img alt=\"Raw data\" src=\"https://i.sstatic.net/C4TPQ.png\"/></a></p>\n<p>My first thought might be Unicode or some other sort of wide character standard. But Unicode formats (especially Uni16) are variable width.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "118",
    "tags": [
        "disassembly",
        "windows",
        "executable"
    ],
    "user": "Katastic Voyage",
    "time": "Feb 6, 2024 at 23:53",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">No. In Windows \"Unicode\" refers to a fixed-with character type where every characters has 16 bits (2 bytes). Win32 API methods that end with a <code>W</code> (like <code>CreateFileW</code>) usually require those strings. <a href=\"https://learn.microsoft.com/en-us/cpp/cpp/char-wchar-t-char16-t-char32-t\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/cpp/cpp/â€¦</a></span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@Robert sorry, but that's only half the truth. Unicode is supposed to be a universal character set with <i>encodings</i> and previously Windows used UCS-2 (each code point encoded by <i>exactly</i> one 16-bit code unit) and now uses UTF-16 (usually Little Endian, due to supported machines) since XP. UTF-16 has limitations and IIRC is not capable of expressing every possible code point Unicode has to offer these days. As pointed out UTF-16 <i>knows</i> surrogates and is thus indeed variable-length for each code point. However, because the string only contains ASCII each code point is 16-bit only.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Welcome to RE.SE, Katastic Voyage: despite some lacking details, Robert is right. This is UTF-16 if encountered on Windows XP or newer or UCS-2 on older Windows versions. The main issue with the comment is that <code>wchar_t</code> (= 16-bit type when targeting Windows, 32-bit on every other target platform I know) is merely the <i>code unit</i>. Code units are the machine-level \"cells\" into which the <i>code points</i> for Unicode-defined characters are encoded. In UTF-8 the code unit is usually <code>char</code>, in UTF-16 (on Windows) <code>wchar_t</code> on other systems UTF-32 <code>wchar_t</code>. Due to this, ...</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">... \"escape routes\" exist that enable us to encode <i>code points</i> (often referred to as \"characters\") that go beyond the value range of the underlying <i>code unit</i> to be encoded into <i>multiple code units</i>. These are then called surrogates. Reserved <i>code points</i> exist to \"announce\" these surrogates within a Unicode-encoded (whichever encoding!) string. UCS-2 (i.e. original Windows NT up to 2000) limited itself to the <a href=\"https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane\" rel=\"nofollow noreferrer\">BMP</a> which amounted to 1 <code>wchar_t</code> == 1 <i>code point</i> (for Windows, elsewhere <code>wchar_t</code> differs).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is most likely a \"wide character\", <code>wchar_t[]</code> type.</p>\n<p>These are always 16 bits long and they are used to allow international characters and symbols that are at most 16 bit long, that is, the UTF-16 range.</p>\n<p>The fixed length allows faster processing than multibyte unicode.</p>\n<p>ASCII characters that could be encoded as 1 byte in multibyte unicode take up 2 bytes in widechar, which \"wastes\" an extra byte that is always null.</p>\n</div>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Feb 7, 2024 at 21:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Wait, what? That makes no sense, several aspects. The <code>wchar_t</code> in Windows is the <i>code unit</i> to <i>encode</i> Unicode <i>code points</i>. And the full range of UTF-16 is very much supported. Yes, it has limitations compared to UTF-8 and UTF-32, but it <i>is very much a Unicode encoding</i>. UTF-16 has been used by Windows since XP (AFAIK) and previously UCS-2 was used, which can be considered sort of a predecessor to UTF-16. UCS-2 only ever considered the Basic Multilingual Plane (BMP) and thus limited itself to the notion of 1 <code>wchar_t</code> (16 bit) == 1 <i>code point</i>. Where the <code>\\0</code> is depends on Endianess.</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">Thanks. I edited my answer. The null byte location depends on endianness, but the architectures Windows can run on are all little-endian.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">these days, that is true. Agreed. But it wasn't always and UTF-16 (or Unicode in general) provides support for all of them. My main point was, however, that <code>wchar_t</code> is just the <i>code unit</i> and UTF-16 (since XP) does provide means to encode code points beyond a value range of 0..65535 through surrogates. So on modern Windows \"characters\" (code points) beyond the value 65535 are possible by encoding them via surrogate mechanism.</span>",
                    "time": null
                }
            ]
        }
    ]
}