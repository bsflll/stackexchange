{
    "title": "UPX packing/unpacking information preservation",
    "link": "https://reverseengineering.stackexchange.com/questions/12243/upx-packing-unpacking-information-preservation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If I pack an executable using UPX and then unpack the executable using UPX -d, the executables are not the same. I understand techniques for unpacking executables that are packed using UPX, but I was wondering - what happens to the executable during packing/unpacking? How does this affect the preservation of information inside the executable? (For example, if I compile C code and then decompile it I'll have lost a lot of variable name information.)</p>\n<p>EDIT: I've verified that after UPX packing/repacking the binary is not the same. The state machine looks something like:</p>\n<p>#1 (Original) ----UPX Pack----&gt; #2 (Packed)</p>\n<p>#2 (Packed) -----UPX Unpack----&gt; #3 (Unpacked)</p>\n<p>#3 (Unpacked) -----UPX Pack-----&gt; #4 (Repacked)</p>\n<p>#4 (Repacked) -----UPX Unpack----&gt; #3 (Unpacked)</p>\n<p>Where #1, #2, #3, and #4 all have different hashes.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "unpacking",
        "upx"
    ],
    "user": "dingo_kinznerhook",
    "time": "Mar 18, 2016 at 14:08",
    "comments": [
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">I may not understand your question, but AFAIK if we unpack with <code>upx -d</code> then we receive the <b>same binary</b> as before packed (since this procedure does not depend on the unpacking stub embedded in the packed binary)? Otherwise, if we let the stub unpack the binary, then the received binary is different (either we need fix IAT and OEP, or the stub is not standard, then it can modify the packed data)</span>",
            "time": null
        },
        {
            "user": "dingo_kinznerhook",
            "text": "<span class=\"comment-copy\">See my edit to the original question. I was going to clarify this in a comment, but all the formatting was stripped out. Before making any assumptions about what the packer does, do a controlled test and take a hash of the binary at each step.</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">Aha, you compare the hash values :)</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Have you considered using a hexdump to visualize (to yourself and to us) the differences between those four stages? Because there's a lot that can be done to yield what's more or less semantically (within certain limits) the same binary, but with that binary being different from another. Two files built at different times will also yield a different binary (and hence hash) depending on the linker used.</span>",
            "time": null
        },
        {
            "user": "dingo_kinznerhook",
            "text": "<span class=\"comment-copy\">Yeah, I used vbindiff to confirm that there were differences in the binaries. I've also used CFFExplorer to see some of the differences, like reordering of the imports. The files have more than just different timestamps - there are different sections in the executable and the imports are ordered differently.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you compare the hash values of original/unpacked files, then they are different since <code>upx -d</code> does not restore bit-by-bit of the original file. Indeed, <code>UPX</code> parses the original file and <em>keeps only information so that the packed data, after being unpacked, can be executed exactly the same as the original one</em>, i.e. the original/unpacked files are semantically equivalent but not physically equivalent^^.</p>\n<p>That is understandable since there is information that not affect to the execution of the binary, a trivial instance is the data between the end of DOS stub and the begin of PE header. For more detail, you may refer to the function <code>pack</code> of the class, for example, <code>PackW32Pe</code> (in <code>p_w32pe.h/cpp</code>) for PE and the function <code>unpack</code> of the class <code>Packer</code> (in <code>packer.h/cpp</code>).</p>\n<p>For example, we can see that <code>UPX</code> modifies the (DOS and PE) header of the unpacked file using the following code (I have renamed some variables for more comprehensible). First, it decompresses and extracts the header:</p>\n<pre><code>// decompress\ndecompress(input_buffer, output_buffer);\nupx_byte *extrainfo = output_buffer + get_le32(output_buffer + ph.u_len - 4);\n\nmemcpy(&amp;output_header, extrainfo, sizeof (output_header));\n</code></pre>\n<p>then modifies slightly the header:</p>\n<pre><code>...\noutput_header.headersize = rvamin;\noutput_header.chksum = 0;\n\n//NEW: disable reloc stripping if ASLR is enabled\nif(input_header.dllflags &amp; IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE)\n    opt-&gt;win32_pe.strip_relocs = false;\n\n// FIXME: ih.flags is checked here because of a bug in UPX 0.92\nif ((opt-&gt;win32_pe.strip_relocs &amp;&amp; !isdll) || (input_header.flags &amp; RELOCS_STRIPPED))\n{\n  output_header.flags |= RELOCS_STRIPPED;\n  ODADDR(PEDIR_RELOC) = 0;\n  ODSIZE(PEDIR_RELOC) = 0;\n}\n\n// write decompressed file\nif (output_file)\n{\n...\n</code></pre>\n</div>",
            "votes": "9",
            "user": "Ta Thanh Dinh",
            "time": "Mar 20, 2016 at 0:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Viktor",
                    "text": "<span class=\"comment-copy\">But why does packing and unpacking it twice still result in different files? What is kept during the first/pack unpack round, that is removed the second time around?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">@Viktor, after packing and unpacking the first time, things such as the import table are rebuilt rather than restored.  This change causes the next packing to pack the file a bit differently, resulting in the table being rebuilt differently after unpacking.</span>",
                    "time": null
                }
            ]
        }
    ]
}