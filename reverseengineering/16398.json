{
    "title": "Understanding IDA's netnodes",
    "link": "https://reverseengineering.stackexchange.com/questions/16398/understanding-idas-netnodes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What exactly is a Netnode? What are they used for and how can I manipulate them with IDC or the SDK?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "396",
    "tags": [
        "ida"
    ],
    "user": "Trey",
    "time": "Sep 24, 2017 at 6:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The online IDA SDK has an excellent description: <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/netnode_8hpp.html\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/sdkdoc/netnode_8hpp.html</a></p>\n<p>An IDA database is one large table of key/value pairs.\nAll keys associated with a single address together form a <code>netnode</code>.</p>\n<p>There are two kinds of netnodes:</p>\n<ul>\n<li>related to addresses associated with the binary loaded in ida.</li>\n<li>for internal items, these are used to store structs, stack-frames, enums, scripts, etc.</li>\n</ul>\n<p>These internal items usually have addresses which start with <code>0xFF0...</code>.\nBecause of this it can be a bit of a challenge to reverse engineer binaries which happen to use that address range.</p>\n<p>A list of items which are stored in netnodes can be found in <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/netnode_8hpp.html\" rel=\"nofollow noreferrer\">netnode.hpp</a> and <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/nalt_8hpp.html\" rel=\"nofollow noreferrer\">nalt.hpp</a></p>\n</div>",
            "votes": "4",
            "user": "Willem Hengeveld",
            "time": "Sep 25, 2017 at 12:25",
            "is_accepted": true,
            "comments": []
        }
    ]
}