{
    "title": "ghidra: how to run a python 3 script with headless analyzer",
    "link": "https://reverseengineering.stackexchange.com/questions/21630/ghidra-how-to-run-a-python-3-script-with-headless-analyzer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I read the documentation of <a href=\"https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html#examples\" rel=\"noreferrer\">headleass analyzer</a>. It is used to perform analysis on existing binaries. I know that <code>-postscript</code> flag allows to enter the analysis script. I have a java script which works fine. But, I want to use python 3 for the analysis. I want to run that like:</p>\n<pre><code>./analyzeHeadless ghidra-project-directory -import binary-file -postscript yourpythonscript\n</code></pre>\n<p>Is it possible to run python script for the analysis? Also, is there any documentation available to do that?</p>\n<blockquote>\n<p>Edit:</p>\n<p>I made a following script and it does work fine (but it gives me not\n  found errors for DecompInterface):</p>\n<pre><code>import ghidra.app.util.headless.HeadlessScript;\nimport ghidra.app.decompiler.ClangNode;\nimport ghidra.app.decompiler.ClangToken;\nimport ghidra.app.decompiler.ClangLine;\nimport ghidra.app.decompiler.ClangTokenGroup;\nimport ghidra.app.decompiler.DecompInterface;\nimport ghidra.app.decompiler.DecompileResults;\nimport ghidra.program.model.address.Address;\nimport ghidra.program.model.listing.CodeUnit;\nimport ghidra.program.model.listing.Function;\nimport ghidra.program.model.listing.FunctionIterator;\nimport ghidra.program.model.listing.InstructionIterator;\nimport ghidra.program.model.listing.Program;\nimport ghidra.program.model.listing.Variable;\nimport ghidra.program.model.pcode.HighFunction;\nimport ghidra.program.model.pcode.HighSymbol;\nimport ghidra.program.model.pcode.HighVariable;\nimport ghidra.program.model.pcode.LocalSymbolMap;\nimport ghidra.program.model.pcode.PcodeOp;\nimport ghidra.program.model.pcode.Varnode;\nimport ghidra.program.model.symbol.Symbol;\nimport ghidra.program.model.symbol.Reference;\nimport ghidra.program.model.symbol.ReferenceIterator;\nimport ghidra.util.task.ConsoleTaskMonitor;\n\nargs = getScriptArgs()\n\nprint(args)\n\np = currentProgram\nprint(p)\n\nfilename = \"/projects/zephyr/Ruturaj/ghidra_learning/\" + p.getName() + \".txt\"\nprint(filename)\n\n#di = DecompInterface()\n#print(di)\n</code></pre>\n</blockquote>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ghidra"
    ],
    "user": "R4444",
    "time": "Jul 8, 2019 at 17:42",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">AFAIK Ghidra relies on Jython which does not support Python 3. You'll have to use Python 2.</span>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">Thanks @IgorSkochinsky I'll note that down in the answer</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I turns out that the python script can be used with headless analyzer script.</p>\n<p>Using the following command I can run it, just like the java file:</p>\n<pre><code>./analyzeHeadless ghidra-project-directory -import binary-file -postscript yourpythonscript\n</code></pre>\n<p>Apparently all the classes defined for java can be used directly in the python script.</p>\n<p>Particular class can be imported with <code>from import statements</code>, for example in java looks like:</p>\n<pre><code>import ghidra.program.model.listing.Variable;\n</code></pre>\n<p>And using python:</p>\n<pre><code>from ghidra.program.model.listing import Variable;\n</code></pre>\n<p>To import the <code>variable</code> class. The variable class can be imported just like java (see the import statement above). But, then you have to use the whole path name to access it. For example:</p>\n<pre><code>something = ghidra.program.model.listing.Variable()\n</code></pre>\n<p>So, in conclusion, the same script can be written using python by importing the classes without any issue. Hope this helps someone.</p>\n<blockquote>\n<p>Edit:</p>\n<p>As @igor said in the comment, it works only with python 2.7 (as ghidra\n  relies on <code>Jython</code>). For python 3.x, something like\n  <a href=\"https://github.com/justfoxing/ghidra_bridge\" rel=\"noreferrer\"><code>ghidra_bridge</code></a> can be\n  used.</p>\n</blockquote>\n</div>",
            "votes": "8",
            "user": "R4444",
            "time": "Jul 9, 2019 at 15:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}