{
    "title": "Anti-patching checksum [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/31295/anti-patching-checksum",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/31295/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2023-01-05 10:43:16Z\">2 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/31295/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm busy with debugging a program in x64dbg and it has some kind of anti-patching mechanism so can someone please advise me on how I would go about finding the functions which are calculating the programs hash value or where it is stored. Any tips would be greatly appreciated.</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "179",
    "tags": [
        "debugging",
        "x64dbg",
        "anti-debugging",
        "hash-functions"
    ],
    "user": "jjprince",
    "time": "2 years ago",
    "comments": [
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">Why has this question been downvoted? IMO such scenarios are not uncommon in practice.</span>",
            "time": null
        },
        {
            "user": "Rohit Gupta",
            "text": "<span class=\"comment-copy\">Not mine, but maybe because of lack of details on any effort expended so far .</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">As it stands the question is really too broad aside from being opinion-based. I agree that the issue comes up in practice, but answers have a size limit (trust me, I <i>know</i>!) and no one wants to read a book when coming to a Q&amp;A site such as this one. Please vote to reopen after you provide more details.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For finding the software part calculating the hash value, just some possibilities:</p>\n<ul>\n<li>Look for \"magic numbers\" in the code. Many CRC, SHA etc standard\nchecksum calculators could be recognized.</li>\n</ul>\n<p>Often the hashes are\ncalculated across the whole image of e.g. a critical DLL.\nIn that case, you could look for</p>\n<ul>\n<li>LoadLibrary calls (in Windows)</li>\n<li>Magic numbers of the DLL itself, like (again Windows) the MS header \"MZ\", present in all DLLs and exe's produced with MS tools.</li>\n</ul>\n<p>If you could find an algorithm, have a look where it stores values. This gives a hint about the location of the checksum.</p>\n<p>And if you found the address where the hash is residing, set a \"read\" breakpoint (hardware breakpoint) on it and wait until it triggers. This could be the hash-checking routine.</p>\n<p>\"Windows\" here of course as an example only. Similar strategies exist for other platforms.</p>\n</div>",
            "votes": "2",
            "user": "josh",
            "time": "Dec 24, 2022 at 13:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}