{
    "title": "Rebuild IAT after manually unpacking DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/26667/rebuild-iat-after-manually-unpacking-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been trying to unpack this dll and I'm pretty sure that <code>0x7c3ea902</code> or <code>0x1007A9D2</code> (ASLR disabled) or simply <code>0x7A9D2</code> is OEP.</p>\n<p><a href=\"https://i.sstatic.net/cwpHn.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/cwpHn.png\"/></a></p>\n<p>But after dumping with OllyDumpEx and trying to fix IAT with <strong>ImpREC</strong> it just doesn't work.</p>\n<p><a href=\"https://i.sstatic.net/ffrbx.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ffrbx.png\"/></a></p>\n<p>Here are the results from <strong>ImpREC</strong></p>\n<p><a href=\"https://i.sstatic.net/WdxCO.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/WdxCO.png\"/></a></p>\n<p>My question is, why are there invalid imports detected when the OEP is most likely correct?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dll",
        "unpacking",
        "dumping",
        "import-reconstruction"
    ],
    "user": "majidarif",
    "time": "Jan 8, 2021 at 10:16",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">Can you share the dll (packed version)?</span>",
            "time": null
        },
        {
            "user": "majidarif",
            "text": "<span class=\"comment-copy\">@bart1e I can but not sure if it's safe to do so.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I solved this by manually fixing each missing import API.</p>\n<p>First I did a text dump of the <em>unpacked</em> dll using <a href=\"https://www.portablefreeware.com/index.php?id=2506\" rel=\"nofollow noreferrer\">BinText</a> where I found a list of imported API's.</p>\n<p><a href=\"https://i.sstatic.net/HFa3V.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/HFa3V.png\"/></a></p>\n<p>I then compared it to the list of API detected by <strong>ImpRec</strong> and I noticed that the calls are in the same order on the text dump.</p>\n<p><a href=\"https://i.sstatic.net/LaiR4.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/LaiR4.png\"/></a></p>\n<p>So I just double clicked the line of the invalid import on <strong>ImpRec</strong> and manually input the correct API (based on the order shown on the text dump) as seen here:</p>\n<p><a href=\"https://i.sstatic.net/gzBGm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gzBGm.png\"/></a></p>\n<p>I repeated this for every invalid API and fixed the dump and this time it all worked.</p>\n<p>To sum it all up from the original question. The OEP was correct. The detected API's were correct. It just needed a little intervention to fix the invalid imports detected.</p>\n<p>Thank you!</p>\n</div>",
            "votes": "2",
            "user": "majidarif",
            "time": "Jan 7, 2021 at 23:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}