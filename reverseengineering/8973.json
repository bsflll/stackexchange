{
    "title": "What are the some of the special usecases of general purpose registers",
    "link": "https://reverseengineering.stackexchange.com/questions/8973/what-are-the-some-of-the-special-usecases-of-general-purpose-registers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some of the general purpose registers are used for some specific reasons. For example <code>EAX</code> is used as an accumulator and to store return values, <code>ECX</code> is used as a counter, <code>ESI</code> and <code>EDI</code> are used to store the src and dst address, respectively. similarly, <code>ESP</code> and <code>EBP</code>.</p>\n<p>Is there any specific use case for<code>EBX</code> register? and Is there anything else that I have missed special use cases of general purpose registers?</p>\n<p>Thank you.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "231",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Maggie",
    "time": "May 24, 2015 at 8:00",
    "comments": [
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\"><a href=\"https://stackoverflow.com/a/51347294/995714\">Implicit uses and special-ness for each register</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>• AX/EAX/RAX: Accumulator</p>\n<p>• BX/EBX/RBX: Base index (for use with arrays)</p>\n<p>• CX/ECX/RCX: Counter</p>\n<p>• DX/EDX/RDX: Data/general</p>\n<p>• SI/ESI/RSI: Source index for string operations.</p>\n<p>• DI/EDI/RDI: Destination index for string operations.</p>\n<p>• SP/ESP/RSP: Stack pointer for top address of the stack.</p>\n<p>• BP/EBP/RBP: Stack base pointer for holding the address of the current stack frame.</p>\n<p>• IP/EIP/RIP: Instruction pointer. Holds the program counter, the current instruction address.</p>\n<p>Segment registers:</p>\n<p>• CS: Code Segment (used for IP)</p>\n<p>• DS: Data Segment (used for MOV)</p>\n<p>• SS: Stack Segment (used for SP)</p>\n<p>• ES: Destination Segment (used for MOVS, etc.)</p>\n<p>• FS: local store</p>\n<p>• GS: local store</p>\n</div>",
            "votes": "4",
            "user": "Sigtran",
            "time": "May 24, 2015 at 8:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Note that the original 8086 design had a lot more limitations on what you could do with which register that current processors have. There's still stuff like <code>loop</code> which works on <code>cx</code> or its extensions, but most instructions that needed a specific (set of) register(s) on 8086 work with any, or almost any, register now.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">specific case for [E/R]BX: xlat.</span>",
                    "time": null
                },
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">RIP is not a general purpose register. R11 also has a special purpose in kernel code. And even the above registers have a lot more special purposes than what you listed</span>",
                    "time": null
                }
            ]
        }
    ]
}