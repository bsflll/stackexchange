{
    "title": "Canonical method to circumvent the ZwSetInformationThread antidebugging technique",
    "link": "https://reverseengineering.stackexchange.com/questions/209/canonical-method-to-circumvent-the-zwsetinformationthread-antidebugging-techniqu",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm sure many of you are familiar with this classic antidebug trick accomplished by calling <code>ZwSetInformationThread</code> with <code>ThreadInformationClass</code> set to 0x11. Although many OllyDbg modules exist for the purposes of revealing the existence of threads hidden with this method, I haven't been able to find any information on the canonical technique employed to unhide these threads in OllyDbg. </p>\n<p>Is the function generally hooked in user mode (e.g <code>SetWindowsHookEx</code>), or is it more pragmatic to patch instructions that either call the NTDLL function directly or system calls which indirectly invoke it?</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "920",
    "tags": [
        "windows",
        "anti-debugging"
    ],
    "user": "zetavolt",
    "time": "Mar 23, 2013 at 22:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>SetWindowsHookEx isn't really used for this sort of hooking as far as I'm aware. </p>\n<p>You could hook NtSetInformationThread in the import of the binary you want to analyze and make it always return success on ThreadHideFromDebugger but not forward the call to the actual function. This would be weak since GetProcAddress or manual imports would bypass it.</p>\n<p>You could hook the NtSetInformationThread function by inserting a call to your own function in the function prologue and then ignore ThreadHideFromDebugger while forwarding the rest to the original function.</p>\n<p>I strong advice against it but for the sake of completeness, you could also hook NtSetInformationThread in the <a href=\"http://en.wikipedia.org/wiki/System_Service_Dispatch_Table\" rel=\"noreferrer\">system service dispatch table</a>. There's a good dump of the table for different Windows versions <a href=\"http://j00ru.vexillium.org/ntapi/\" rel=\"noreferrer\">here</a>. If you want to get the index in the table yourself you can just disassemble the NtSetInformationThread export from ntdll.dll.</p>\n<p>If you're interested in more anti-debugging techniques strongly recommend reading <a href=\"http://pferrie.host22.com/papers/antidebug.pdf\" rel=\"noreferrer\">Peter Ferrie's awesome anti-debugging reference</a>.</p>\n</div>",
            "votes": "6",
            "user": "Peter Andersson",
            "time": "Mar 23, 2013 at 22:51",
            "is_accepted": true,
            "comments": []
        }
    ]
}