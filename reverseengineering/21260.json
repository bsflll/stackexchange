{
    "title": "radare2 shows main function arguments argv as pointer to char on the stack, not as pointer to pointer to char",
    "link": "https://reverseengineering.stackexchange.com/questions/21260/radare2-shows-main-function-arguments-argv-as-pointer-to-char-on-the-stack-not",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, I've been digging around <em>process command line arguments</em> as well as <em>environment variables</em> a bit these last days, especially looking up the way <code>main</code> function arguments were pushed onto the stack.</p>\n<p>So far I've got it that a certain <code>_libc_start_main()</code> function is responsible of setting up everything the <code>main()</code> function needs in terms of parameters before actually calling it.<br/>\nWithout getting into much <a href=\"https://reverseengineering.stackexchange.com/a/15175/24851\">details</a>, I've noticed that when debugging a simple <code>main</code> program, the <code>main</code> stack frame is different whether we look it up in <code>radare2</code> or <code>gdb</code>.<br/>\nFor instance, let's take this minimalist C program :</p>\n<pre><code>int main (int argc, char *argv[], char *envp[])\n{\n}\n</code></pre>\n<p>And simply debug it without any additional parameters :</p>\n<h2>With GDB</h2>\n<p>After setting a breakpoint on the first assembly instruction of <code>main</code> (I couldn't dump the stack frame without running the program),\nwhat I got in <code>gdb</code> is something very sensible, as one can see :</p>\n<pre><code>(gdb) x/3xw $esp\n0xffffcfbc:     0xf7db7b41          0x00000001      0xffffd054      \n#                  ^                    ^               ^     \n#              PC (somewhere          argc            argv             \n#          in __libc_start_main())\n</code></pre>\n<p>Now by actually inspecting the pointed out memory regions for <code>argv</code> :</p>\n<pre><code>(gdb) x/2xw 0xffffd054   # argv\n0xffffd054:     0xffffd1ef      0x00000000\n#                  ^                ^ \n#                argv[0]          argv[argc]\n#           (another pointer)              \n\n(gdb) x/s 0xffffd1ef  # argv[0]\n0xffffd1ef:     \"&lt;path&gt;/argvonstack32\"\n#                      ^ \n#                  Exepected program name\n</code></pre>\n<p>So what was basically pushed onto the <code>main</code> stack frame, for both <code>argv</code> and <code>envp</code> (even if I didn't show the dump for <code>envp</code> for simplicity's sake) is exactly what we were entitled to expect from a debugger, that is a <em>pointer to pointer to <code>char</code></em> (as stated in the <code>main</code> function signature).</p>\n<h2>With Radare2</h2>\n<p>Without setting any breakpoint, and directly inspecting the stack frame without running the program, <code>radare2</code> shows a different stack frame :</p>\n<pre><code>- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF  comment\n0xffa63d10  0100 0000 1953 a6ff 0000 0000 2953 a6ff  .....S......)S..  ; esp\n                ^         ^         ^       \n              argc     argv[0]    argv[1]\n</code></pre>\n<p>When inspecting <code>argv[0]</code> :</p>\n<pre><code>- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF  comment\n0xffa65319  2e2f 6172 6776 6f6e 7374 6163 6b33 3200  ./argvonstack32.\n0xffa65329  5348 454c 4c3d 2f62 696e 2f62 6173 6800  SHELL=/bin/bash.\n</code></pre>\n<p>That shows that <code>radare2</code> skipped the first pointer indirection of <code>argv</code> and pushed the list <code>argv[0]...argv[argc]</code> directly onto the <code>main</code> stack frame.</p>\n<p>What explains such a difference ?</p>\n<p><em><strong>PS:</strong></em> As you can see, the only difference there is between my usage of <code>radare2</code> and <code>gdb</code> was that I runned the program in <code>gdb</code> while  didn't need to actually run it on <code>radare2</code> to dump the <code>main</code> stack frame memory.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "416",
    "tags": [
        "debugging",
        "radare2",
        "gdb",
        "stack",
        "entry-point"
    ],
    "user": "programmersn",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are sort of comparing oranges and apples. </p>\n<p>In the first example, you are looking at the arguments passed to the <code>main</code> function by the C library, and they match the C standard requirements (array of <code>char</code> pointers).</p>\n<p>In the second example, you are looking at the low level <em>entry point</em> to the binary and the parameters <em>from the kernel</em>, before they have been processed by the C library. The kernel does no fancy processing: it just puts all strings in one block delimited by zero bytes (and terminated with two zeroes) and leaves the splitting to the program itself. Usually this is done by <code>__libc_start_main</code> or similar function before calling <code>main()</code>.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 2, 2019 at 19:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}