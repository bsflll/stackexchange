{
    "title": "Auto-loaded type information and relationship between .til and .sig: how to find links and how to change them (config)?",
    "link": "https://reverseengineering.stackexchange.com/questions/30854/auto-loaded-type-information-and-relationship-between-til-and-sig-how-to-find",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>NB: most of my targets are PE files for <code>pc</code>, so I'll stick with that for the question. But I suppose the principle holds also for the related directories, like <code>$IDADIR/sig/arm</code>.</p>\n<p>Let's say I load a PE file, which happens to be a 64-bit Windows driver. I may then see in the Output pane (redacted for brevity):</p>\n<pre><code>IDA is analysing the input file...\nYou may start to explore the input file right now.\n...\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nPropagating type information...\n</code></pre>\n<p>Now \"Windows Driver Kit 7/10 64bit\" corresponds to <code>$IDADIR/sig/pc/ms64wdk.sig</code> (found with <code>dumpsig</code>). Fair enough. I also know that <code>$IDADIR/sig/pc/autoload.cfg</code> governs what type information library (<code>.til</code>) file gets loaded based on the loading of a signature.</p>\n<p>Alas, there is no entry that maps the aforementioned <code>$IDADIR/sig/pc/ms64wdk.sig</code> to <code>ntddk64_win7</code> and <code>ntapi64_win7</code>. Yet, when I use <kbd>Produce file</kbd> -&gt; <kbd>Dump database to IDC file...</kbd> the resulting <code>.idc</code> file has the following calls among its first actions (again redacted for brevity):</p>\n<pre><code>#define UNLOADED_FILE   1\n#include &lt;idc.idc&gt;\n\nstatic main(void) {\n    // ...\n    GenInfo();            // various settings\n    // ...\n}\n\nstatic GenInfo(void) {\n\n    // ...\n    add_default_til(\"ntddk64_win7\");\n    add_default_til(\"ntapi64_win7\");\n}\n</code></pre>\n<h3>Questions:</h3>\n<ul>\n<li>How does IDA make the connection between the FLIRT (<code>.sig</code>) and the <code>.til</code> here? (Apparently <code>$IDADIR/sig/pc/autoload.cfg</code> has no bearing.)</li>\n<li>Given there are also other <code>.til</code> files like <code>ntddk64_win10.til</code>, <code>ntapi64_win10.til</code>:\n<ul>\n<li>How can I configure IDA to load those instead of the somehow implicit <code>ntddk64_win7</code> and <code>ntapi64_win7</code> respectively?</li>\n<li>Assuming I can't override the behavior or have an existing IDB which had the implicit <code>ntddk64_win7</code> and <code>ntapi64_win7</code> applied: If I now use <code>add_default_til(\"ntddk64_win10\")</code> and <code>add_default_til(\"ntapi64_win10\")</code> (no matter whether IDC or IDAPython) will this adversely affect existing usage of type information (e.g. enums which were imported from standard enums)? How does it affect existing usage?</li>\n</ul>\n</li>\n<li>What is the relation between the <code>ntddk64.til</code> and, say, <code>ntddk64_vista.til</code>, <code>ntddk64_win7.til</code>, <code>ntddk64_win8.til</code>, <code>ntddk64_win81.til</code> and <code>ntddk64_win10.til</code>? Is <code>ntddk64.til</code> the superset? Some subset?</li>\n</ul>\n<p>PS: Pointers to official documentation very much welcome.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "206",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Sep 5, 2022 at 15:34",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Meanwhile I noticed, that a bunch of those names are hardcoded in some of the loaders, processors and plugins that come with IDA, as well as the <code>ida.dll</code> and <code>ida64.dll</code>. So there's clearly more than <code>autoload.cfg</code> at work here.</span>",
            "time": null
        }
    ],
    "answers_data": []
}