{
    "title": "idapython - assign a struct to a stack variable",
    "link": "https://reverseengineering.stackexchange.com/questions/18313/idapython-assign-a-struct-to-a-stack-variable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was wondering if anyone knows how to assign a struct to a stack variable using IDAPython (like when we do <kbd>Alt</kbd>+<kbd>Q</kbd>);  Doing this for addresses in .data is not a problem, but I can't figure out a way to do it over the stack struct that IDA creates for a given function.</p>\n<p>There seems to be two APIs in <code>idaapi</code> to do this:</p>\n<pre><code>def set_member_tinfo2(*args):\n  \"\"\"\n  set_member_tinfo2(sptr, mptr, memoff, tif, flags) -&gt; smt_code_t\n  \"\"\"\n\ndef set_member_tinfo(*args):\n\"\"\"\nset_member_tinfo(til, sptr, mptr, memoff, type, fields, flags) -&gt; bool\n\"\"\"\nreturn _idaapi.set_member_tinfo(*args)\n</code></pre>\n<p>The problem is that I don't know how to get a 'type' (<code>type_t</code>) or 'tif' (<code>tinfo_t</code>) from the struct I have in my locals.  The code I have so far is something like this:</p>\n<pre><code># 00000000167ED lea     r8, [rbp+190h+var_170]\n\nlea_addr = 0x167ED\n# Get the stack struct\ncurrent_func = idaapi.get_func(lea_addr)\nstack_id = idc.GetFrame(current_func)\nstack_struc = idaapi.get_struc(stack_id)\n\n# Get the stack operand offset value and stack member\nstack_member_offset = idc.GetOperandValue(lea_addr, 1)\nstack_member = stack_struc.get_member(stack_member_offset)\n\ntarget_struct_id = idaapi.get_struc_id(\"_CONFIG\")\ntarget_struc = idaapi.get_struc(target_struct_id )\n</code></pre>\n<p>My goal is to assign the <code>_CONFIG</code> struct I have in my idb local to <code>var_170</code>.   I should call <code>set_member_tinfo2</code> passing a <code>tinfo_t</code> of my <code>_CONFIG</code> struct but I can't figure out how to get it.</p>\n<p>In the idc module there is another function called 'SetMemberType' which looks simpler but I've tried this one in several ways without success. For example:</p>\n<pre><code>idc.SetMemberType(stack_id, stack_member_offset, idc.FF_STRU|idc.FF_DATA, target_struct_id, 0)\n</code></pre>\n<p>It always returns False.</p>\n<hr/>\n<p>Thanks @Bambu, I've actually tried <a href=\"https://reverseengineering.stackexchange.com/a/18314\">your method</a> but it didn't work for me either. What I've finally found that works is to first undefine the stack members that are defined by IDA (except for the ones you already defined and the base 'r' member) and then defining a new bytes member with the size of the struct. After that, change the type with <code>SetMemberType</code>.</p>\n<pre><code>def delete_all_function_stack_members(func_ea):\n    members, base = retrieve_stack_members(func_ea)\n    stack_id = idc.GetFrame(func_ea)\n    for k, v in members.items():\n        if k != base:\n            idc.DelStrucMember(stack_id, k)\n    g_functions_stack.add(func_ea)\n\ndelete_all_function_stack_members(current_func)\nAddStrucMember(stack_id, \"config\", stack_member_offset, FF_BYTE|FF_DATA, -1, GetStrucSize(target_struct_id))\nidc.SetMemberType(stack_id, stack_member_offset, idc.FF_STRU|idc.FF_DATA, target_struct_id, 1)\n</code></pre>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "n3k",
    "time": "Jun 18, 2018 at 7:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What I've finally found that works is to first undefine the stack members that are defined by IDA (except for the ones you already defined and the base 'r' member) and then defining a new bytes member with the size of the struct. After that, change the type with <code>SetMemberType</code>.</p>\n<pre><code>def delete_all_function_stack_members(func_ea):\n    members, base = retrieve_stack_members(func_ea)\n    stack_id = idc.GetFrame(func_ea)\n    for k, v in members.items():\n        if k != base:\n            idc.DelStrucMember(stack_id, k)\n    g_functions_stack.add(func_ea)\n\ndelete_all_function_stack_members(current_func)\nAddStrucMember(stack_id, \"config\", stack_member_offset, FF_BYTE|FF_DATA, -1, GetStrucSize(target_struct_id))\nidc.SetMemberType(stack_id, stack_member_offset, idc.FF_STRU|idc.FF_DATA, target_struct_id, 1)\n</code></pre>\n<p>Note: refer to <a href=\"https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml\" rel=\"nofollow noreferrer\">Porting from IDAPython 6.x-7.3, to 7.4</a></p>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jul 14, 2023 at 23:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can get a <code>tinfo_t</code> for your <code>_CONFIG</code> struct by using <code>parse_decl2</code>. Then applying it using <code>idaapi.set_member_tinfo2</code>.</p>\n<p>After you get the <code>stack_struc</code> and <code>stack_member</code> you could do something like this:</p>\n<pre><code>tinfo = idaapi.tinfo_t()\nidaapi.parse_decl2(idaapi.cvar.idati, '_CONFIG;', tinfo, idaapi.PT_TYP)\nidaapi.set_member_tinfo2(stack_struc, stack_member, 0, tinfo, idaapi.SET_MEMTI_COMPATIBLE)\n</code></pre>\n<p>Note: the <code>;</code> at the end of <code>_CONFIG;</code> is required.</p>\n</div>",
            "votes": "1",
            "user": "Bambu",
            "time": "May 19, 2018 at 2:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}