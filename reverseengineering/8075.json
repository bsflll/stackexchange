{
    "title": "Work out if a firmware is dumpable/writeable through USB?",
    "link": "https://reverseengineering.stackexchange.com/questions/8075/work-out-if-a-firmware-is-dumpable-writeable-through-usb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking to find out if a firmware of a device is readable and potentially writeable. The device has a USB port and other devices by this manufacturer have had firmware updates (through USB) so it's within the realm of possibilities this is doable.</p>\n<p>How will it be possible to find out if the firmware is accessible through the USB port? If it helps the device is a <a href=\"http://www.cloupor.com/cloupor-mini-30w-vv-vw-box-mod-for-sale\">Cloupor Mini</a></p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "993",
    "tags": [
        "firmware",
        "usb"
    ],
    "user": "jblz",
    "time": "Jan 21, 2015 at 20:40",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Does the device make any use of the USB port, other than charging the battery? Does windows device manager find a new device when you plug in the USB? What happens if you use the firmware flash tool for a different device by this manufacturer, does it output any error messages like 'no device found' or 'incompatible device'? The first would suggest the USB has no other meaning than charging the battery, the second could mean the device responds to the flash tool in some way.</span>",
            "time": null
        },
        {
            "user": "Krista K",
            "text": "<span class=\"comment-copy\">The best way to tell is to take it (&amp; other models) apart and look for a UART. Then do an update on the other model and sniff the USB port, etc.</span>",
            "time": null
        },
        {
            "user": "ixje",
            "text": "<span class=\"comment-copy\">To complement @GuntramBlohm 's suggestion; have a look at the <code>bNumConfiguration</code> field in the USB Device descriptor (see <a href=\"http://www.usb.org/developers/docs/usb20_docs/\" rel=\"nofollow noreferrer\">USB specs</a>).  It indicates the number of configurations available at the current operating speed. I assume this field can also give away the availability of a DFU or SW upgrade mode or not.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Standard USB protocol for firmware upgrade is <a href=\"http://en.wikipedia.org/wiki/USB#DFU\" rel=\"nofollow\">DFU</a>. Linux has 2 tools to work with DFU devices:</p>\n<ul>\n<li><a href=\"http://linux.die.net/man/1/dfutool\" rel=\"nofollow\">dfutool</a></li>\n<li><a href=\"http://dfu-util.sourceforge.net/\" rel=\"nofollow\">dfu-util</a></li>\n</ul>\n<p>dfu-util is more advanced and for example allows to list connected DFU-capable devices, e.g. when run on my laptop:</p>\n<pre><code># dfu-util -l\ndfu-util 0.5\n\n[...]\nFound Runtime: [0a5c:21e6] devnum=0, cfg=1, intf=3, alt=0, name=\"UNDEFINED\"\n</code></pre>\n<p>Both of the tools may be useful though when working with different devices and their peculiarities.</p>\n<p>Note though:</p>\n<ol>\n<li>Quite a few vendors don't go out of their way and just use DFU, for which standard implementations and tools are available. But of course, any particular device may use a proprietary upgrade protocol. One particular case is when device uses USB solely for async serial protocol (UART/RS-232) emulation.</li>\n<li>While DFU provides means for both reading and writing firmware, any particular device may block reading as basic means of IP protection.</li>\n<li>As for writing firmware, it may be protected with check codes/signatures, so writing arbitrary firmware may be not possible.</li>\n</ol>\n<p>If you want to upgrade and modify firmware, consider buying only open devices (use community resources to discover them), and avoid, ignore, and warn other users of non-open ones.</p>\n</div>",
            "votes": "3",
            "user": "pfalcon",
            "time": "Apr 18, 2015 at 19:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">While open-source is nice and all, hacking into a closed source device and modding it to your needs is very satisfying, and quite a \"reverse engineering\" experience.</span>",
                    "time": null
                }
            ]
        }
    ]
}