{
    "title": "Why can I inherit handles from WSASocketA and not from socket?",
    "link": "https://reverseengineering.stackexchange.com/questions/22628/why-can-i-inherit-handles-from-wsasocketa-and-not-from-socket",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to write some custom shellcode to obtain a shell from a program.\nLooking at the program intermodular calls, I found a call to <code>socket()</code>, and my initial plan was to use that to create a new socket, connect back and spawn a shell.</p>\n<p>I am able to to get a connection back, but unfortunately when I call <code>CreateProcessA</code>, I don't get any shell.</p>\n<p>After the call to <code>socket()</code> I have the socket descriptor in EAX:</p>\n<p><a href=\"https://i.sstatic.net/8lqMR.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/8lqMR.png\"/></a></p>\n<p>And then, after <code>connect()</code> (which works, I get the connection back on my netcat listener), I call <code>CreateProcessA()</code> and this are the parameters:</p>\n<p><a href=\"https://i.sstatic.net/oWHjp.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/oWHjp.png\"/></a></p>\n<p><code>InheritHandles</code> is correctly set to TRUE. On the left panel I have dumped the <code>StartUpInfo</code> structure and as you can see the file descriptor is correctly added for all handles (first 3 bytes of the structure are all set to 200). Also the flag <code>STARTF_USESTDHANDLES</code> is correctly set.</p>\n<p>Unfortunately, this doesn't work. What surprises me is that if instead of using the address of the intermodular call to <code>socket()</code>, I use the address of <code>WSASocketA</code> (found using arwin), and without changing anything else (apart from adding the extra null arguments required for WSASocketA), I can get my shell.</p>\n<p>I don't understand why this is not happening with <code>socket()</code>, in fact, according to the documentation for the flag <code>WSA_FLAG_NO_HANDLE_INHERIT</code> of the <code>WSASocketA</code>:</p>\n<blockquote>\n<p>Create a socket that is non-inheritable.</p>\n<p>A socket handle created by the WSASocket or the socket function is\n  inheritable by default. When this flag is set, the socket handle is\n  non-inheritable.</p>\n</blockquote>\n<p>So I assumed that by default it should work with both functions.</p>\n<p>I don't know if this is relevant, but I'm testing it against a Windows 7 machine.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "393",
    "tags": [
        "windows",
        "shellcode"
    ],
    "user": "Zagorax",
    "time": "Nov 27, 2019 at 10:39",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">This isn't really a reverse engineering question. My guess would be that - given you compare WinSock with the socket implementation inherited from BSD - that's your answer right there ...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Windows <code>socket()</code> creates a socket with <code>WSA_FLAG_OVERLAPPED</code> flag set and inheritable by default.</p>\n<p>Windows <code>WSASocket()</code> allows you to specify <code>WSA_FLAG_OVERLAPPED</code> and <code>WSA_FLAG_NO_HANDLE_INHERIT</code>.  If you <strong>omit</strong> both flags to <code>WSASocket()</code>, then the resulting socket will be inheritable and will not have <code>WSA_FLAG_OVERLAPPED</code> flag set.</p>\n<p>Unlike on Unix, Windows <code>SOCKET</code> is different from file descriptors or pipes.  If you pass a socket to Windows <code>CreateProcess</code> using <code>STARTF_USESTDHANDLES</code>, the socket <strong>must not</strong> have <code>WSA_FLAG_OVERLAPPED</code> flag set.</p>\n<p>You managed to (accidentally) use <code>WSASocket()</code> without flags, so created an inheritable socket without <code>WSA_FLAG_OVERLAPPED</code>, so it worked for you!</p>\n</div>",
            "votes": "2",
            "user": "gstrauss",
            "time": "Feb 24, 2023 at 11:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}