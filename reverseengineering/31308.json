{
    "title": "Setting a breakpoint on a shared library's decompiled exported function, and making Ghidra actually stop on that function when debugging a client code",
    "link": "https://reverseengineering.stackexchange.com/questions/31308/setting-a-breakpoint-on-a-shared-librarys-decompiled-exported-function-and-mak",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am very new to Ghidra, so please accept my apologies if my question sounds too simple. Despite the poor quality of the Internet in my country, I tried my best to find an answer online before asking but I could not find much.</p>\n<p>Imagine we have a Linux shared object named <code>CustLib.so</code>, that exports one single function named <code>Func</code>.</p>\n<p>Furthermore, imagine a program (let's call it <code>ClientProg</code>) imports <code>Func</code> from <code>CustLib.so</code> and calls it from its <code>main</code>.</p>\n<p>What I have been trying to do with Ghidra is:</p>\n<ol>\n<li><p>Load <code>CustLib.so</code> into Ghidra, Analyze it, and put a breakpoint somewhere within the decompiled code pertaining to <code>Func</code>.</p>\n</li>\n<li><p>Load <code>ClientProg</code> into Ghidra, Analyze it, and start it in the Debugger.</p>\n</li>\n<li><p>Wait until <code>ClientProg</code> calls <code>Func</code>, at which point I expect Ghidra to break on the breakpoint I had previously set at <code>Func</code>.</p>\n</li>\n</ol>\n<p>To my surprise, the last step above never happens. <code>ClientProg</code> runs from start to completion (in GDB IN-VM mode), without ever breaking on <code>Func</code>.</p>\n<p>Could I ask whether I am actually missing something? Or am I expecting an unsupported functionality? Many thanks.</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "345",
    "tags": [
        "ghidra",
        "linux"
    ],
    "user": "ElenaKarimi",
    "time": "Dec 25, 2022 at 14:09",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<span class=\"comment-copy\">I don't think it will work like that. If you put a run <code>ClientProg</code> in Ghidra, only breakpoints in <code>ClientProg</code> will hit, not <code>CustLib.so</code>. Instead, you should do something like start debugging the <code>.so</code> but with the application path (not the file path) pointing to <code>ClientProg</code>, so <code>ClientProg</code> can be started and <code>CustLib.so</code> will be debugged. I don't know how to do this in Ghidra (due to my lack experiences with Ghidra), but that is how I would do in IDA</span>",
            "time": null
        },
        {
            "user": "ElenaKarimi",
            "text": "<span class=\"comment-copy\">Thanks a lot! @raspiduino</span>",
            "time": null
        }
    ],
    "answers_data": []
}