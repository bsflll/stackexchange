{
    "title": "IDA pro 6.9, what does \"lambda\" in type notation mean in C++ reversed code",
    "link": "https://reverseengineering.stackexchange.com/questions/16416/ida-pro-6-9-what-does-lambda-in-type-notation-mean-in-c-reversed-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was looking into a C++ program compiled for aarch64 with ida pro 6.9 and came across something really weird:</p>\n<p><code>somescope::SomeClass&lt;false&gt;::some_name&lt;somescope::SomeClass&lt;false&gt;::other_name(uint,uint,uint)::{lambda(void *,bool)#2}&gt;::SOMETHING</code></p>\n<p>I'm really confused by this notation... Specifically:</p>\n<ol>\n<li><p>What does <code>{lambda(void *,bool)#2}</code> mean? Is it an indicator for lambda expression? Also, what is <code>#2</code>?</p></li>\n<li><p>Is <code>other_name(uint,uint,uint)</code> somewhat a scope? What could <code>other_name</code> possibly be if this is the case?</p></li>\n</ol>\n<p>I'm fairly new to reverse engineering and I've tried to google this for like an hour... Please hint me if you've got clue.</p>\n<p>Thanks in advance!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "521",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "hpwsue",
    "time": "Sep 26, 2017 at 14:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>About your first question: <code>what does ...lambda... mean</code>: Yes, obviously, it refers to a lambda function.</p>\n<p>The second part of your first question: <code>What is #2</code>: Some experimentation with lambda's shows that this is like a sequence number of lambda's within a function.\nNote that gcc and clang have different ways of encoding this.\n<code>gcc</code> uses the <code>lambda()#2</code> notation, while <code>clang</code> uses something like <code>$_1</code>.</p>\n<p>Your second question: <code>what is other_name</code>: I think that would be the function where the lambda is defined.</p>\n<p>And <code>some_name</code> being the function which is passed the lambda as a template parameter.</p>\n<p>The lambda's themselves are passed as a struct containing either copies of values or pointers, or from a c++ point of view: references, to the closure defined by the lambda.</p>\n<hr/>\n<p>Experimenting with how your compiler treats lambda's is quite easy.\nWrite some test code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\ntemplate&lt;typename FN&gt;\nint test(FN f)\n{\n    return f();\n}\n\nint main(int, char**)\n{\n    int a, b;\n    auto f1 = [](int a, int b) { return a+b; };\n    int c = test([&amp;a, b, &amp;f1]() { return f1(a,b); });\n    auto f2 = [](int a, int b) { return a-b; };\n    int d = test([&amp;a, b, &amp;f2]() { return f2(a,b); });\n\n    printf(\"c=%d, d=%d\\n\", c, d);\n    return 0;\n}\n</code></pre>\n<p>Then compile with least optimization, and debug symbols:</p>\n<pre><code>g++ -O0 -g yourfile.cpp\n</code></pre>\n<p>And view the resulting binary in <code>ida</code>.</p>\n</div>",
            "votes": "3",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 19:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}