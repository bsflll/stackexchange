{
    "title": "How to use dnSpyEx or some other .NET debugger to attach to a .NET process started with a process-hollowing technique?",
    "link": "https://reverseengineering.stackexchange.com/questions/31472/how-to-use-dnspyex-or-some-other-net-debugger-to-attach-to-a-net-process-start",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a .NET executable that is started using the <a href=\"https://www.ired.team/offensive-security/code-injection-process-injection/process-hollowing-and-pe-image-relocations\" rel=\"noreferrer\">process-hollowing</a> technique. Here's how it looks from the Detect-It-Easy tool:</p>\n<p><a href=\"https://i.sstatic.net/bPEdv.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/bPEdv.png\"/></a></p>\n<p>I can open the image file for that process (from disk) with dnSpyEx, but when I try to attach to it with a debugger while it's running (after it was process-hollowed), my breakpoints don't hit:</p>\n<p><a href=\"https://i.sstatic.net/Ca3es.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Ca3es.png\"/></a></p>\n<p>Any idea how to attach to such process with a debugger - dnSpy or some other one?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "940",
    "tags": [
        "debugging",
        "unpacking",
        ".net",
        "packers",
        "dnspy"
    ],
    "user": "c00000fd",
    "time": "Jan 25, 2023 at 8:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can insert an infinite loop in the code that you can find once you attach to the process.</p>\n<ol>\n<li>Right click the method you want to put a breakpoint on and select <code>Edit Method</code>.\n<a href=\"https://i.sstatic.net/NZsy5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NZsy5.png\"/></a></li>\n<li>Add an infinite loop  inside an <code>if</code> before the code where you wanted to put the breakpoint: <code>bool a = true;if(a){while(true){}}</code>. Click <code>Compile</code>.</li>\n<li>Save module.</li>\n<li>Run the sample as desired.</li>\n<li>Attach to the process with DnSpy (you may need to run it as admin) and pause (<code>Break all</code>) the debugger, which will stop at the infinite loop.</li>\n<li>The instruction where you wanted to put the breakpoint is the first after the <code>else</code>. Right click this instruction and select <code>Set Next Statement</code>.\n<a href=\"https://i.sstatic.net/A2qHT.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/A2qHT.png\"/></a></li>\n</ol>\n<hr/>\n<p>This is similar to the <a href=\"http://paulslaboratory.blogspot.com/2014/04/ebfe-debugging-remote-thread.html\" rel=\"nofollow noreferrer\"><code>EBFE</code> technique</a>.</p>\n<p>Note that the definition of <code>bool a = true;</code> and the <code>if</code> surrounding the <code>while(true)</code> is needed to trick the debugger to avoid that compilation remove the rest of the code. If the compiler is still able to remove it, you can try a bit more difficult condition to trick the debugger such as <code>int a = 3; int b = 2; if(a*2-b+1==5){while(true){}};</code></p>\n</div>",
            "votes": "3",
            "user": "Ana María Martínez Gómez",
            "time": "Jan 25, 2023 at 12:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Hmm, that's an interesting idea. But how would I insert my code into it if my breakpoints don't hit? See that second screenshot.</span>",
                    "time": null
                },
                {
                    "user": "Ana María Martínez Gómez",
                    "text": "<span class=\"comment-copy\">You need to insert the code before the sample is run. Note running the sample is step 4.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Thanks. That's an interesting technique. I tried it, but step 5 doesn't produce the result that you described. The dnSpy breaks but then it doesn't switch to the source code line. And even if I click \"Show next statement\", nothing happens. My guess is that it can't find symbols.</span>",
                    "time": null
                }
            ]
        }
    ]
}