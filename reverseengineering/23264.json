{
    "title": "Can \"missing section headers\" ELF files still be executed/dangerous?",
    "link": "https://reverseengineering.stackexchange.com/questions/23264/can-missing-section-headers-elf-files-still-be-executed-dangerous",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On VirusTotal, there are lots of ELF samples are <code>missing section headers</code> when using <code>file</code> command to see the info.</p>\n<p>Also, when using the Python <code>elftools</code> library to parse them, exceptions will be thrown.</p>\n<p>Can these kinds of ELF files still be executed or dangerous?\nIf so, what's the best way to parse them?</p>\n<p>Example:\n<a href=\"https://www.virustotal.com/gui/file/7096d1deb8a097b25a74cb2b72009dc37430180b53725e1bec4d18be5856f139/detection\" rel=\"nofollow noreferrer\">https://www.virustotal.com/gui/file/7096d1deb8a097b25a74cb2b72009dc37430180b53725e1bec4d18be5856f139/detection</a>\n(This is not a good example as it's a \".so\" file.)</p>\n<hr/>\n<p>Add the real output:</p>\n<p>readelf -h:</p>\n<pre><code>ELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           IBM S/390\n  Version:                           0x1\n  Entry point address:               0x403650\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          1090000 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         8\n  Size of section headers:           40 (bytes)\n  Number of section headers:         27\n  Section header string table index: 26\nreadelf: Error: Reading 0x438 bytes extends past end of file for section headers\n</code></pre>\n<p>readelf -l:</p>\n<pre><code>readelf: Error: Reading 0x438 bytes extends past end of file for section headers\n\nElf file type is EXEC (Executable file)\nEntry point 0x403650\nThere are 8 program headers, starting at offset 52\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  PHDR           0x000034 0x00400034 0x00400034 0x00100 0x00100 R E 0x4\n  INTERP         0x000134 0x00400134 0x00400134 0x0000d 0x0000d R   0x1\n  [Requesting program interpreter: /lib/ld.so.1]\n  LOAD           0x000000 0x00400000 0x00400000 0xd7c70 0xd7c70 R E 0x1000\n  LOAD           0x0d7c70 0x004d8c70 0x004d8c70 0x2da34 0x3167c RW  0x1000\n  DYNAMIC        0x1052a8 0x005062a8 0x005062a8 0x000e0 0x000e0 RW  0x4\n  NOTE           0x000144 0x00400144 0x00400144 0x00020 0x00020 R   0x4\n  GNU_EH_FRAME   0x0d7b7c 0x004d7b7c 0x004d7b7c 0x0002c 0x0002c R   0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "elf",
        "file-format",
        "executable"
    ],
    "user": "I Wonder",
    "time": "Feb 19, 2020 at 1:11",
    "comments": [
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<span class=\"comment-copy\">For Googlers, it (\"obviously in retrospect\") could also just mean that you only half downloaded or half extracted part of a large ELF and the file is corrupt. Happened to me when I made the mistake of extracting a large zip with Nautilus, which likes to crash from time to time, and it crashed half way during extraction.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li>Section information is not used at all when the kernel loads a program into memory to create its process image. In other words, execution in no way depends on section information. </li>\n<li>Stripping section information from a binary is not in and of itself necessarily an indicator of dangerous/criminal functionality, although it can serve to make analysis more difficult. </li>\n<li>According to VirusTotal, the example binary you linked to contains 29 sections, so I am not sure what that is supposed to be an example of. Perhaps one of the fields in the ELF header having to do with sections has been edited/corrupted to slow down automatic analysis, since section information cannot be displayed.\n\n<ul>\n<li>if the section header table is still present in the binary, the ELF header can be repaired so that this information is properly parsed. See <a href=\"https://binaryresearch.github.io/2020/01/15/Analyzing-ELF-Binaries-with-Malformed-Headers-Part-3-Solving-A-Corrupted-Keygenme.html\" rel=\"nofollow noreferrer\">here</a> for an example</li>\n<li>run <code>readelf -h</code> against the binary to see if the ELF header has been corrupted</li>\n</ul></li>\n<li>A number of tools can parse such a binary, including radare2, Cutter, IDA, and Ghidra </li>\n</ul>\n</div>",
            "votes": "2",
            "user": "julian",
            "time": "Feb 16, 2020 at 2:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "I Wonder",
                    "text": "<span class=\"comment-copy\">How about those ones with <code>file</code> command output including: \"error reading (Invalid argument)\"</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@IWonder No idea. Use <code>readelf</code> with the <code>-h</code> option to look at the header, and then the <code>-l</code> option to look at section-to-segment mappings. If your are serious about getting help, share the output of the above commands in your post</span>",
                    "time": null
                },
                {
                    "user": "I Wonder",
                    "text": "<span class=\"comment-copy\">Added in the comment</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@IWonder looks like section information hasnâ€™t been removed from the binary but readelf cannot parse the section header table. My guess is that the sh_off value is not correct. If this is the case you will need to manually inspect the binary to determine the correct section header table offset</span>",
                    "time": null
                }
            ]
        }
    ]
}