{
    "title": "GHIDRA: Create an array of strings that are padded",
    "link": "https://reverseengineering.stackexchange.com/questions/27257/ghidra-create-an-array-of-strings-that-are-padded",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on decompiling a DOS .exe that was written in Pascal or Delphi. When looking at the decompiled code, there appears to be many strings that are are padded with <code>00</code>. Example:</p>\n<pre><code>06 53 54 52 49 4E 47 00 00 00 STRING\n07 41 4E 4F 54 48 45 52 00 00 ANOTHER\n08 4C 41 53 54 7F 4F 4E 45 00 LAST ONE\n</code></pre>\n<p>The leading number is the length of string, using Pascal conventions. If I were to run the .exe, these strings appear in a list. Because of this, I assume that the organization of the strings is supposed to be a list of some sort.</p>\n<p>My questions are these:</p>\n<ol>\n<li><p>Is there a way in Ghidra to puts these string into an Array, with one string per element? When I hit <code>[</code> it tries to build the array only off the length of the string and the characters of the first string and ignores the <code>00</code>.</p>\n</li>\n<li><p>Why was the code compiled this way. It would appear to increase the size of the file with addition padding byte(s), and I see these type of lists all over the decompiled file.</p>\n</li>\n</ol>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ghidra"
    ],
    "user": "Timothy",
    "time": "Mar 17, 2021 at 1:30",
    "comments": [
        {
            "user": "AltxF4",
            "text": "<span class=\"comment-copy\">I am running into this same problem with an Arm cortex-M binary. The only solution I have found is manually editing the raw hex to place the terminated strings sequentially, then placing the removed padding bytes after the last string to keep everything aligned. Very hacky, I know.... but it works so far.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While it'd be nice to define a struct using Ghidra's <a href=\"https://reverseengineering.stackexchange.com/questions/24883/is-it-possible-to-define-an-array-of-variable-size-in-ghidra-size-in-the-struct\">flexible arrays</a>, they are limited in functionality to the point where I haven't found them particularly useful.</p>\n<p>In your case though, the padding bytes may actually make your life easier. If the strings are all 9 bytes like your example, you could do this:</p>\n<pre class=\"lang-c prettyprint-override\"><code>struct pstring {\n  byte len;\n  char[9] str;\n}\n</code></pre>\n<p>And then make an array of <code>pstring</code> instances.</p>\n</div>",
            "votes": "2",
            "user": "hairlessbear",
            "time": "May 22, 2023 at 2:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}