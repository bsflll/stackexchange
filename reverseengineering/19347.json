{
    "title": "Recognizing instructions containing low-level control flows",
    "link": "https://reverseengineering.stackexchange.com/questions/19347/recognizing-instructions-containing-low-level-control-flows",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are some <code>x86</code> instructions which containing a low-level** control flow in its semantics, for example <a href=\"https://c9x.me/x86/html/file_module_x86_id_72.html\" rel=\"nofollow noreferrer\">div</a> because its semantics is roughly as:</p>\n<pre><code>if (source == 0)\n   throw exception...\nelse\n   return rdx:rax / source\n</code></pre>\n<p>or instructions with <code>rep</code> prefix, etc. While a <code>mov</code> or a <code>xor</code> doesn't contain any control flow.</p>\n<p>I am trying to classify instructions of <code>x86</code> ISA depending on this criteria, my starting point now is looking into <a href=\"https://intelxed.github.io/\" rel=\"nofollow noreferrer\">Xed</a>'s API to know if there exists some function which can give such an information, but it doesn't seem having any.</p>\n<p>Concretely for <code>div</code>, I've checked <a href=\"https://intelxed.github.io/ref-manual/group__DEC.html#gad267d2d08e002b027915248689d1defe\" rel=\"nofollow noreferrer\">xed_decoded_inst_conditionally_writes_registers</a>, <a href=\"https://intelxed.github.io/ref-manual/group__DEC.html#gad6b80021a33c772fa74a038f17343562\" rel=\"nofollow noreferrer\">xed_operand_conditional_read/write</a>, but all of them return false.</p>\n<p>** I'm sorry for this word, I don't know the precise terminology for this case.</p>\n<p>Edit: many thanks for comments but I've badly expressed my question. I update in the following some discussion to make the context more clear.</p>\n<p>Xed's API would not give full instruction semantics, but some. For example, with some xed API (which I described above) we can get:</p>\n<pre><code>mov rax, r8\n\noperands:                       2\nuses rflag:                     no\nhas conditional read operand:   no\nhas conditional write operand:  no\nconditionally write register:   no\n</code></pre>\n<p>and</p>\n<pre><code>cmovb rax, r8\n\noperands:                       3\nuses rflag:                     yes\nhas conditional read operand:   no\nhas conditional write operand:  yes\nconditionally write register:   yes\n</code></pre>\n<p>so at least I know that <code>cmovb</code> should have some conditional control flow in its semantics, while <code>mov</code> has not. </p>\n<p>I tried to apply this logic for other instructions: it works for some (e.g. <code>rep movsb</code>, etc.), but not all: </p>\n<ul>\n<li>for <code>div</code>*** (or <code>mov</code>), it would be \"acceptable\"* to say that there is no\nconditional control flow, IMHO. We consider that an exception is side\neffect: the instruction is not executed (or only partially executed)\nif the exception is thrown</li>\n<li>for other cases of, e.g. <code>minps</code>, this logic simply doesn't work</li>\n</ul>\n<p>*** I have initially thought that <code>div</code> contains conditional data-flow, but changed later :)</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "78",
    "tags": [
        "x86",
        "control-flow-graph"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Sep 16, 2018 at 8:19",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">Not automated, but in the Intel manual for instructions there is information about when exceptions happen. See for example <a href=\"https://c9x.me/x86/html/file_module_x86_id_176.html\" rel=\"nofollow noreferrer\">c9x.me/x86/html/file_module_x86_id_176.html</a></span>",
            "time": null
        },
        {
            "user": "Abigail",
            "text": "<span class=\"comment-copy\">A <code>mov</code> or <code>xor</code> may alter control flow in the same way by triggering a page fault eception with invalid memory access.</span>",
            "time": null
        }
    ],
    "answers_data": []
}