{
    "title": "What are the different types of packers?",
    "link": "https://reverseengineering.stackexchange.com/questions/1779/what-are-the-different-types-of-packers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know the basic principle of a packer. Basically, it is a small routine launched at the beginning of the program that decompress the actual program and jump to it once achieved.</p>\n<p>Yet, it seems that there are quite a lot of variations around this principles. I recently learned about \"<em>virtualized packers</em>\" or \"<em>on-the-fly packers</em>\", and I might miss a lot. So, can somebody define what a basic packer is and then explain what are the different types that can be encountered ?</p>\n</div>",
    "votes": "15",
    "answers": 2,
    "views": "12k",
    "tags": [
        "obfuscation",
        "malware",
        "packers"
    ],
    "user": "perror",
    "time": "Apr 15, 2013 at 17:05",
    "comments": [
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">Hi @perror, Could you give me some related meterials about \"on-the-fly packers\"...? I searched in Google but  haven't found anything interesting. Thank you!</span>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">From the name \"on-the-fly packers\", it should be quite similar to VM packer.....but I am not sure</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Generic definition</h1>\n<p>Binary packers alter the original binary data, and restore it (more or less) before execution.</p>\n<p>Their different names depend more on their characteristic: it's difficult to clearly distinguish, as just putting an anti-debug and a Xor loop would make a packer also a protector and a cryptor.</p>\n<h1>types</h1>\n<h2>extension</h2>\n<p>extra packer code is executed</p>\n<ul>\n<li>compressor: reduce original data's size</li>\n<li>common: aPLib (FSG, , LZMA, NRV (UPX)</li>\n<li>others: JCALG1, BriefLZ, LZMAT</li>\n<li>protector: makes reverse engineering harder</li>\n<li>countermeasures:\n<ul>\n<li>anti-debugging: IsDebuggerPresent, ...</li>\n<li>anti-virtualization: detect VmWare, ...</li>\n<li>anti-dumping: erase header in memory...</li>\n<li>anti tampering, via checksums\n<ul>\n<li>common: rolling checksum, CRC32, md5, sha1, adler, md4</li>\n<li>others: Tiger, Whirlpool, md4, adler</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cryptor: crypts original data</li>\n<li>common: bitwise operators (XOR/ROL/...), LCG, RC4, Tea</li>\n<li>others: DES, AES, Blowfish, Trivium, IDEA, ElGamal</li>\n</ul>\n<h2>transformation</h2>\n<p>the original code is rewritten</p>\n<ul>\n<li>virtualizer: turns original code into virtual code with embedded virtual machine</li>\n<li>mutater: alters code â€” same instruction set and architecture, but modified:</li>\n<li>reflowing</li>\n<li>oligomorphism</li>\n</ul>\n<h1>extra features</h1>\n<ul>\n<li>bundler: file dropping, with API hooking (to make a multi-file program run as single file)</li>\n</ul>\n<p>These <a href=\"https://github.com/corkami/docs/blob/master/packers.pdf\" rel=\"nofollow noreferrer\">graphics</a> might help as further reference.</p>\n</div>",
            "votes": "18",
            "user": "5 revs, 3 users 95%Ange",
            "time": "Jul 9, 2023 at 11:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">I'm not sure now if I should have turned it into a community wiki straight from the beginning - let me know your opinion.</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">Hard to say. The classification of question vs wiki is very subjective. I'd say do whichever you feel most comfortable with. It could survive as either in my opinion.</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">@WilliamMartens thanks - updated!</span>",
                    "time": null
                },
                {
                    "user": "Jane",
                    "text": "<span class=\"comment-copy\">@Ange  thanks for replying; ^_^ wishes from sweden!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Definition</h2>\n<p>We'll define a packer as an executable compressor. </p>\n<p>Packers reduce the physical size of an executable by compressing it. A decompression stub is usually then attached, parasitically, to the executable. At runtime, the decompression stub expands the original application and transfers control to the <em>original entry point</em>.</p>\n<p>Packers exist for almost all modern platforms. There are two fundamental types of packers:</p>\n<ul>\n<li><strong>In-Place (In Memory)</strong></li>\n<li><strong>Write To Disk</strong></li>\n</ul>\n<p><strong>In-Place</strong> packers do what is termed an in-place decompression, in which the decompressed code and data ends up at the same location it was loaded at. The decryption stub attached to these compressed executables transfer control to the original application entry point at runtime, after decompression is complete. </p>\n<p><strong>Write to Disk</strong> packers have a decryption stub (or entire module) that, at runtime, write the decompressed application out to the file system, or a block of memory,\nthen transfer control to the original application via execution of\nthe application's code via normal API calls.</p>\n<h2>Uses</h2>\n<p>The original intention of executable compressors was to reduce storage requirements (size on disk), back when disk space was at a premium. They can also lower the network bandwidth footprint for transmitted compressed executables, at least when the network traffic would not otherwise be compressed.</p>\n<p>These days, there is no premium on disk space, so their use is less common. They are most often used as part of a protection system against reverse engineering. Abuse is also, sadly, common.</p>\n<h2>Abuse</h2>\n<p>Some packers are abused by malware authors in an attempt to hide malware from scanners. Most scanners can scan 'inside' (decompress) packed executables. Ironically, use of packers on malware is often counter-productive as it makes the malware appear suspicious and thus makes it subject to deeper levels of analysis.</p>\n<h2>Additional Features</h2>\n<p>Additional features such as protection from reverse engineering can be added to the packer, making the packer also a protector. The process of compression is itself a form of obfuscation and abstraction that inherently serves as some protection.</p>\n</div>",
            "votes": "9",
            "user": "dyasta",
            "time": "Apr 17, 2013 at 2:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}