{
    "title": "Adding a toolbar to IDA using PySide",
    "link": "https://reverseengineering.stackexchange.com/questions/11181/adding-a-toolbar-to-ida-using-pyside",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So i'm trying to add a custom toolbar to IDA 6.4 using their PySide download and the IDAAPI.  I've tried adding a toolbar by just creating one but since it doesn't have an exec_() method I can't get it on the screen and it looks like I need to be loading it into a window with something like</p>\n<pre><code>self.toolbar = self.addToolBar('var')\n</code></pre>\n<p>though in this case the \"self\" is a window which makes me think I need a reference to IDA's main window.  Anyone know how i can get that reference?</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "909",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "python"
    ],
    "user": "James",
    "time": "Oct 27, 2015 at 11:28",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">not a solution, but just for completeness: in IDA 6.7 + they have significant improvements on this described here: <a href=\"http://www.hexblog.com/?p=886\" rel=\"nofollow noreferrer\">hexblog.com/?p=886</a></span>",
            "time": null
        },
        {
            "user": "James",
            "text": "<span class=\"comment-copy\">yes I've seen that, but doesn't help me for 6.4, thank you though.  I've gotten most of the functionality I need by just building a view that i can dock, not as nice as a toolbar but functional.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>New IDA 6.95 API</strong></p>\n<p>Perhaps because they saw this question, maybe because of user requests, version 6.95 was released with two IDAPython API functions for creating a menu and a toolbar: <code>create_menu</code> and <code>create_toolbar</code> so now these can be done trivially.</p>\n<p><strong>Old trick - Before 6.95</strong></p>\n<p>A hack I've been using is finding the application's main window manually and then adding a toolbar directly using QT. IDA only has one main window.</p>\n<p>Adding a toolbar that way makes in completely recognizable by IDA as far as I can tell. You can tick it on and off, you can dock and un-dock it, changing to advanced mode automatically shows it as well. However, IDA won't let you add actions to it in IDA 6.7 and above (as described at <a href=\"http://hexblog.com/?p=886\" rel=\"nofollow noreferrer\">hexblog.com/?p=886</a>)</p>\n<p>A sample code can look something like that:</p>\n<pre><code> for widget in QtGui.qApp.topLevelWidgets():\n     if type(widget) == QtGui.QMainWindow:\n         mainWindow = widget\n         toolbar = mainWindow.addToolBar(\"My toolbar\")\n\n         # and now for adding stuff to our toolbar\n         toolbar.addSeparator()\n         toolbar.addWidget(...)\n</code></pre>\n<p><strong>Disclaimer:</strong> Keep in mind finding the main window this way if risky, undocumented and might not always work. IDA might not like that you're changing stuff underneath it. I do use it and it is working, but YMMV and UAYOR.</p>\n<p>Two additional tips for making this hack functional:</p>\n<ol>\n<li>Since IDA's main window is not always visible when plugins are loaded, you \nmight want to set a QTimer on finding the main window.</li>\n<li>Because its undocumented, i use more ways to find the main window. Using <code>qApp.activeWindow()</code> and/or <code>qApp.focusWidget()</code> and iterating over their <code>.parent()</code>s are good additional choices.</li>\n</ol>\n<p><strong>EDIT:</strong></p>\n<p>Here's a more complete example of how to hack a toolbar and a menu in from an IDA plugin, handling different loading modes and retying in case the IDA application is not fully set-up yet:</p>\n<pre><code>  def init(self):\n    self.setup()\n\n    return idaapi.PLUGIN_KEEP\n\n  def setup(self):\n    if not self.get_mainwindow():\n      self.delay_setup()\n      return\n\n    # Add a toolbar like OP requested\n    self.toolbar = self.get_mainwindow().addToolBar(\"My toolbar\")\n    self.toolbar.setIconSize(QtCore.QSize(16, 16))\n\n    # Bonus: add a menue\n    self.menu = QtGui.QMenu(\"My menu\")\n    self.get_mainwindow().menuWidget().addMenu(self.menu)\n\n  def delay_setup(self):\n    QtCore.QTimer.singleShot(1000, self.setup)\n\n  def get_mainwindow(self):\n    if self.mainwindow:\n      return self.mainwindow\n\n    app = QtGui.qApp\n    widgets = [app.focusWidget(), app.activeWindow()] + app.topLevelWidgets()\n    mainwidgets = filter(None, map(self.search_mainwindow, widgets))\n\n    if mainwidgets:\n      self.mainwindow = mainwidgets[0]\n\n    return self.mainwindow\n\n  def search_mainwindow(self, widget):\n    while widget != None:\n      if isinstance(widget, QtGui.QMainWindow):\n        return widget\n      widget = widget.parent()\n    return None\n</code></pre>\n</div>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Apr 14, 2017 at 9:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}