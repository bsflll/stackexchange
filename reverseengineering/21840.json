{
    "title": "Microsoft Edge and it's related processes may have turned protected in windows 10 1903",
    "link": "https://reverseengineering.stackexchange.com/questions/21840/microsoft-edge-and-its-related-processes-may-have-turned-protected-in-windows-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems like driver based injection using APC calls fails on MicrosoftEdge and it's related processes (<code>browser_broker.exe , MicrosoftEdgeCP.exe and MicrosoftEdge.exe</code>).</p>\n<p>Looking into the problem, it looks like this application is protected process and uses the <code>ProcessDynamicCodePolicy</code> flag which prevents the driver from allocate new executable memory. </p>\n<p>Eventually, shortly after trying to inject to those processes, they all fail due to the following reason (exception 0xC0000409, <code>STATUS_STACK_BUFFER_OVERRUN</code>).</p>\n<pre><code>Description:\nFaulting application name: MicrosoftEdgeCP.exe, version: 11.0.15063.674, time stamp: 0x59cdf479\nFaulting module name: ntdll.dll, version: 10.0.15063.1324, time stamp: 0x28af0ac0\nException code: 0xc0000409\nFault offset: 0x00000000000a9f80\nFaulting process ID: 0x1580\nFaulting application start time: 0x01d503e311af20b8\nFaulting application path: C:\\Windows\\SystemApps\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\MicrosoftEdgeCP.exe\nFaulting module path: C:\\Windows\\SYSTEM32\\ntdll.dll\nReport ID: 112c6adc-0898-4441-90b6-f1a17b668af1\nFaulting package full name: Microsoft.MicrosoftEdge_40.15063.674.0_neutral__8wekyb3d8bbwe\n</code></pre>\n<p>Does the above output hint that this is the problem I'm facing? </p>\n<p>Is there any way to detect from the driver that this process is protected?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "dll-injection"
    ],
    "user": "Zohar81",
    "time": "Aug 5, 2019 at 9:56",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Since you're asking for drivers and the existing answer refers specifically to UM code, potentially introducing limitations with regard to permissible IRQL, you may want to check out the article series by Alex Ionescu (<a href=\"http://www.alex-ionescu.com/?p=97\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://www.alex-ionescu.com/?p=116\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://www.alex-ionescu.com/?p=146\" rel=\"nofollow noreferrer\">here</a>)</span>",
            "time": null
        },
        {
            "user": "Zohar81",
            "text": "<span class=\"comment-copy\">@0xC0000022L, I understood that there's a difference between protected process, an attribute that only Microsoft can entitle to a process and processes that can set  <code>ProcessDynamicCodePolicy</code> by themselves using <code>SetProcessMitigationPolicy</code>. For the second type of processes I wish to override this bit from the driver. do you know if <code>SetProcessMitigationPolicy</code> is also available from kernel space ?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">I highly doubt it as I think that this is implemented differently from PPL. I think either way you won't get around APCs to execute some user mode code, which places you in a catch 22 situation of sorts. And actually anti-malware vendors can also mark specific processes as PPL, provided they have an ELAM and the files of the designated PPL are signed as described by the ELAM. Details are in fact subject to NDAs.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is there any way to detect from the driver that this process is protected ?</p>\n</blockquote>\n<p><strong>Disclaimer:</strong> This following procedure depends on undocmented data structure which is extracted from PDB symbol of <code>combase.dll</code> file. As usual this may not work in future Windows OS version.</p>\n<p>This is the sample C code to detect protected process. The program accepts a valid process ID in its first argument. This code need to be linked with <code>ntdll.lib</code> library. In user mode, this code may need to be run as administrator for some processes.</p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;winternl.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct _PROCESS_EXTENDED_BASIC_INFORMATION {\n    size_t Size;\n    PROCESS_BASIC_INFORMATION BasicInfo;\n    union {\n        unsigned int Flags;\n        struct {\n            unsigned int IsProtectedProcess : 1;\n            unsigned int IsWow64Process : 1;\n            unsigned int IsProcessDeleting : 1;\n            unsigned int IsCrossSessionCreate : 1;\n            unsigned int IsFrozen : 1;\n            unsigned int IsBackground : 1;\n            unsigned int IsStronglyNamed : 1;\n            unsigned int IsSecureProcess : 1;\n            unsigned int IsSubsystemProcess : 1;\n            unsigned int SpareBits : 23;\n        };\n    };\n} PROCESS_EXTENDED_BASIC_INFORMATION, *PPROCESS_EXTENDED_BASIC_INFORMATION; /* size: 0x0040 */\n\nint main(int argc, char *argv[])\n{\n    if (argc &lt; 2)\n        return;\n\n    void *hProcess = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, 0, atoi(argv[1]));\n    if (hProcess != NULL)\n    {\n        unsigned int ret;\n        PROCESS_EXTENDED_BASIC_INFORMATION pInfo;\n        memset(&amp;pInfo, 0, sizeof pInfo);\n\n        NTSTATUS Status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &amp;pInfo, sizeof pInfo, &amp;ret);\n        if (Status == 0)\n            printf(\"Protected: %d\\n\", pInfo.IsProtectedProcess);\n        CloseHandle(hProcess);\n    }\n    else\n        printf(\"OpenProcess error: %d\\n\", GetLastError());\n}\n</code></pre>\n<hr/>\n<p>To add or change process mitigation policy flags, programs use <code>SetProcessMitigationPolicy()</code> function which uses <code>NtSetInformationProcess()</code> function (retrieved from <code>KernelBase.dll</code>). Here is a sample C code which enables dynamic code policy.</p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;winternl.h&gt;\n\ntypedef struct _PROCESS_MITIGATION_POLICY_INFORMATION {\n    PROCESS_MITIGATION_POLICY Policy;\n    union {\n        PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;\n        PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;\n        PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;\n        PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ExtensionPointDisablePolicy;\n        PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;\n        PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;\n        PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;\n        PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;\n        PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;\n        PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;\n        PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;\n        PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;\n        PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;\n    };\n} PROCESS_MITIGATION_POLICY_INFORMATION, *PPROCESS_MITIGATION_POLICY_INFORMATION; /* size: 0x0008 */\n\nint main(void)\n{\n    PROCESS_MITIGATION_POLICY_INFORMATION PolicyInfo = { 0 };\n    PolicyInfo.Policy = ProcessDynamicCodePolicy;\n    PolicyInfo.DynamicCodePolicy.ProhibitDynamicCode = TRUE;\n\n    NTSTATUS Status = NtSetInformationProcess(\n        GetCurrentProcess(),\n        52, /* ProcessMitigationPolicy */\n        &amp;PolicyInfo,\n        sizeof PolicyInfo);\n}\n</code></pre>\n<p>Any one of the policy can be enabled with this method. Use <code>Zw</code> alternatives of <code>Nt</code> function to use in kernel mode. All of these undocumented structures can also be found in <a href=\"https://github.com/processhacker/processhacker/blob/master/phnt/include/ntpsapi.h\" rel=\"noreferrer\">ProcessHacker/phnt</a> repository.</p>\n</div>",
            "votes": "6",
            "user": "Biswapriyo",
            "time": "Aug 5, 2019 at 18:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Zohar81",
                    "text": "<span class=\"comment-copy\">Hi, I think that your methodology deals with revealing protected process - an attribute that only Microsoft can entitle to a process, and can be detected also using the call <code>PsIsProtectedProcess</code> from kernel space . I look for processes that can set the flag <code>ProcessDynamicCodePolicy</code> by themselves using SetProcessMitigationPolicy. For those processes I wish to override this bit from the driver. do you know if <code>SetProcessMitigationPolicy</code> is also available from kernel space ?</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">@Zohar81 Edited my answer with internals of <code>SetProcessMitigationPolicy()</code>. Also I don't know if this works for PPL or containerized UWP processes.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Zohar81 If it can be set with <code>NtSetInformationProcess</code> it stands to reason that this is part of either <code>EPROCESS</code> or <code>KPROCESS</code> (likely the former) and so <i>can</i> be manipulated from within a driver. I'd give WinDbg a try to figure out how the structures look. ProcessHacker is also usually a good source for this kind of information.</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">@0xC0000022L Yes, there is a <code>MitigationFlagsValues</code> structure in EPROCESS. But the structure is <i>too long and volatile</i> to include in a source code. Even it vaires with every builds of Windows 10.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Biswapriyo Didn't even ProcessHacker pioneer a method by which the debug symbols matching the <i>currently running system</i> are used to extract the respective offsets and then use that? I've at least seen that before. Admittedly probably not a good idea to do this kind of stuff in KM, though ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}