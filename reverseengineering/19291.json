{
    "title": "Correct my understanding on a basic allocation memory",
    "link": "https://reverseengineering.stackexchange.com/questions/19291/correct-my-understanding-on-a-basic-allocation-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is the function<a href=\"https://i.sstatic.net/zhDlV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/zhDlV.png\"/></a></p>\n<p>If I understand correctly:</p>\n<ul>\n<li>There is a buffer of size 256 bytes created (malloc)</li>\n<li>in this buffer, the first 32 bits are set to 0 (because dword designates 32bits size)</li>\n<li>the next 32 bits (32 to 63) are set to C8h</li>\n<li>the next 32 bits (64 to 95) to 0.</li>\n</ul>\n<p>Then another pointer of memory size  3200 is created.\nThe address of this new pointer is written in the first buffer between the bit 127 to the bit 127+64=191. </p>\n<p>Then we return the address of the first buffer.</p>\n<p>Am I right?</p>\n<p>Thank you very much!!!</p>\n<p>PS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "70",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Sep 8, 2018 at 15:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>If I understand correctly:</p>\n<p>There is a buffer of size 256 bytes created (malloc) in this buffer,\n  the first 32 bits are set to 0 (because dword designates 32bits size)\n  the next 32 bits (32 to 63) are set to C8h the next 32 bits (64 to 95)\n  to 0.</p>\n</blockquote>\n<p>Yes!</p>\n<blockquote>\n<p>The address of this new pointer is written in the first buffer between the bit 127 </p>\n</blockquote>\n<p>Well it will be the 128th bit. The qword at <code>rax+0x10</code> is 128 bits from the head of your first <code>malloc</code>.</p>\n<hr/>\n<p>But these aren't strictly bit offsets. You can calculate how many bits from the start of memory, but I would question why it matters. </p>\n<blockquote>\n<p>PS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?</p>\n</blockquote>\n<p><code>rax</code> is a 64 bit register so you can use it to represent 2^64 values. </p>\n<p>If <code>rax</code> is <code>0x12345678</code> and I add <code>1</code>, what should happen? It will become <code>0x12345679</code> regardless of how many bits you want that to represent. (Oversimplification but I hope this make the point).</p>\n<p>For example: <code>mov dword ptr [rax+4], 0xC8</code></p>\n<p>Ref: <a href=\"https://www.felixcloutier.com/x86/MOV.html\" rel=\"nofollow noreferrer\">https://www.felixcloutier.com/x86/MOV.html</a></p>\n<p>From the above ref, this is a <code>mov m32, imm32</code> which means copy a 32bit constant into the 32bit DWORD <em>through this pointer</em> <code>[rax+4]</code></p>\n<p>So because <code>[rax+4]</code> represents a pointer to byte addressable memory, the <code>+4</code> represents 4 bytes.</p>\n<p>This is only because the <code>m32</code> operand to <code>mov</code> is concerned with the address of bytes. There are other x86 instruction that can manipulate bits, but not this one.</p>\n</div>",
            "votes": "4",
            "user": "Abigail",
            "time": "Sep 8, 2018 at 18:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}