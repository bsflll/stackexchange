{
    "title": "How can I view the dynamic symbol table of a running process?",
    "link": "https://reverseengineering.stackexchange.com/questions/16036/how-can-i-view-the-dynamic-symbol-table-of-a-running-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For any dynamic executable on Linux there is a dynamic linker that stores the current symbol bindings somewhere. So when a new library is loaded it knows whether to bind the symbol or not.</p>\n<p>For example when two shared objects contain the same symbol, the first one loaded will bind the symbol and subsequent loads won't rebind the symbol. </p>\n<p>So this means there should be a register somewhere in memory that stores the current bindings. How can I access it? What format does it have? How portable is it (what's the chance my program that lists the symbols will work on other computers)?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "linux",
        "symbols"
    ],
    "user": "Calmarius",
    "time": "Aug 8, 2017 at 13:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The structure holding the list of loaded shared objects is called <a href=\"https://github.com/lattera/glibc/blob/master/include/link.h\" rel=\"nofollow noreferrer\"><code>link_map</code></a> and is stored inside the dynamic linker (rtld or ld.so, depending on the platform).</p>\n<p>AFAIK there is no official standard for it but the most common implementation (glibc) uses the <code>GOT[1]</code> entry to store a pointer to the link map and the PLT stubs passes it to the dynamic symbol resolver (by jumping to the address in <code>GOT[2]</code>).</p>\n<p>Here's a great article giving the overview of all this as well as more references to other places: </p>\n<p><a href=\"http://s.eresi-project.org/inc/articles/elf-rtld.txt\" rel=\"nofollow noreferrer\">http://s.eresi-project.org/inc/articles/elf-rtld.txt</a></p>\n<p>I would recommend you installing symbols+sources for glibc and stepping through the dynamic calls in gdb to see how they're resolved, or even just reading the source code \"offline\".</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Aug 9, 2017 at 8:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}