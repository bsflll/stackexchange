{
    "title": "How can I determine the instruction set of a USB controller from binary code?",
    "link": "https://reverseengineering.stackexchange.com/questions/7984/how-can-i-determine-the-instruction-set-of-a-usb-controller-from-binary-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on reverse engineering a USB controller. The name of the controller chip is the \"UD6810\" which appears to be a Chinese clone of another chip (since a lot of results about it have been removed from Google via DMCA requests). I've found a program which can successfully flash the firmware.</p>\n<p>However, I obviously need to determine the instruction set before I can modify it. The datasheets I've found on the web seem to be missing this key information and docs are generally quite hard to find. I have the binary code since I can both see it in the flashing program's files and capture it in the USB traffic as it flashes the chip.</p>\n<p>How can I determine the instruction set?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "463",
    "tags": [
        "firmware",
        "usb"
    ],
    "user": "Sea Erchin",
    "time": "Jan 9, 2015 at 17:00",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Unless you have at least an idea of what the controller is similar to, and a datasheet of that, i doubt this is possible with acceptable effort. <a href=\"http://weaponre.com/about_us.html\" rel=\"nofollow noreferrer\">The second of these guys</a> claims he can do it, but these guys say they <a href=\"http://weaponre.com/blog.html\" rel=\"nofollow noreferrer\">extract, back-cut, laser grind and re-wirebond transplanted dies from SoCs/MCMs... which we then probe, extract and decrypt</a>, so you'll need at least some <i>serious</i> hardware hacking (if that site isn't a fake at all).</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">Do you have a working firmware image for the device?</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">If the name of this clone isn't totally random, you could compare the instructions with that of a Motorola MCM6810. Can you post a snippet of a hex dump? Personally, I can recognize <i>some</i> instruction sets by looking at the hex.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">@Jongware: I thought of the Motorola 68xx family, but the MCM 6810 was the 128 byte RAM module, and the 6809 processor is a bit outdated now. <a href=\"http://www.planetsurfer.net/2008/06/05/use-a-cheap-digital-picture-frame-as-a-secondary-display/\" rel=\"nofollow noreferrer\">Someone</a> found a cheap USB picture frame to countain a 6502 compatible processor a few years ago, so i wouldn't rule it out completely, but i have some doubts. Maybe the best the OP can do is open it with as many Ida Pro loaders as possible and check if one of them seems to make sense.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I will answer not what you asked in the title but what you actually need.</p>\n<p>There's around 99% probability it's a 8051 derivative. I don't know a single Chinese USB controller which does not use one. Although I haven't seen them all, of course.</p>\n<p>I downloaded a random MPTOOL for this controller from flashboot.ru and it had some binaries. They do look like 8051 code:</p>\n<pre><code>ROM:1B24             RESET_0:                                ; CODE XREF: RESETj\nROM:1B24 75 81 7E                    mov     SP, #RAM_7E     ; Stack Pointer\nROM:1B27 02 1B 65                    ljmp    ROM_1B65\nROM:1B2A             ; ---------------------------------------------------------------------------\nROM:1B2A\nROM:1B2A             ROM_1B2A:                               ; CODE XREF: RESET_0+48j\nROM:1B2A 02 1D 20                    ljmp    ROM_1D20\nROM:1B2D             ; ---------------------------------------------------------------------------\nROM:1B2D\nROM:1B2D             ROM_1B2D:                               ; CODE XREF: RESET_0+5Fj\nROM:1B2D E4                          clr     A\nROM:1B2E 93                          movc    A, @A+DPTR\nROM:1B2F A3                          inc     DPTR\nROM:1B30 F8                          mov     R0, A\nROM:1B31\nROM:1B31             ROM_1B31:                               ; CODE XREF: RESET_0+17j\nROM:1B31 E4                          clr     A\nROM:1B32 93                          movc    A, @A+DPTR\nROM:1B33 A3                          inc     DPTR\nROM:1B34 40 03                       jc      ROM_1B39\nROM:1B36 F6                          mov     @R0, A\nROM:1B37 80 01                       sjmp    ROM_1B3A\n</code></pre>\n<p>(this is a typical startup produced by the Keil C51 compiler)</p>\n<p>Some common opcodes seen in 8051 binaries:</p>\n<pre><code>02 xx xx   ljmp (absolute)\n12 xx xx   lcall (absolute)\n22         ret\nE4         clr A\n90 xx xx   mov DPTR, xxxx\nA3         inc DPTR\n</code></pre>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Jan 9, 2015 at 11:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}