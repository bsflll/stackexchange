{
    "title": "How to find if a given library function is used in a binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/17925/how-to-find-if-a-given-library-function-is-used-in-a-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming that library X is statically linked, is there a way to know with an acceptable grade of confidence if a function from it was used in the binary?</p>\n<p>I am currently using this approach:</p>\n<ol>\n<li>Convert the library function from its disassembly to its abstract representation to retrieve control flow structures, function and system calls and save them into a data structure by the order they appear in.</li>\n<li>Repeat the process with every statically linked function in the binary.</li>\n<li>Try to find similarities between the representation of the library function I am interested in and those found in the binary.</li>\n</ol>\n<p>It works, but it can probably be done better and I fear I am missing code that uses particular compiler settings and/or obfuscation. For example, if an optimization flag is set and two or more functions are joined in the same monolithic piece of code, my approach will miss it. Also, it's not much time-efficient, which becomes a problem when I need to analyze a large binary against hundreds or thousands of libraries.</p>\n<p>I was thinking of generating the AST for the entire binary instead of individual functions, and match parts of it with the library function's representation. Is there a general technique to do this, possibly already implemented in a publicly available tool? Is there a better idea?</p>\n<p>I already know of the tools to generate abstract representations. I am more interested in the matching part, or ideally, in a tool that does both.</p>\n<p>EDIT: @HamZa from security.SE has mentioned me IDA FLIRT and Zignatures. Are these effective against obfuscation/optimization? </p>\n<p>EDIT 2: @HamZa has mentioned the difficulty to build an AST in some cases and proposed a hybrid approach, like symbolic execution that unfortunately, doesn't scale well. Also, he pointed me to <a href=\"http://dro.deakin.edu.au/eserv/DU:30063491/cesare-softwaresimilarity-2013A.pdf\" rel=\"noreferrer\">this</a> and <a href=\"https://www.ieee-security.org/TC/SP2015/papers-archived/6949a674.pdf\" rel=\"noreferrer\">this</a> paper.</p>\n<p>EDIT 3: <a href=\"http://theory.stanford.edu/~aiken/moss/\" rel=\"noreferrer\">this</a> may be an option, but it's not for closed-source binaries (even though assembly code for certain architectures is covered). Also, is being offered as an Internet service and I'd rather not take it down by doing thousands of checks for different libraries every second.</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "684",
    "tags": [
        "binary-analysis",
        "static-analysis"
    ],
    "user": "Not Now",
    "time": "Apr 8, 2018 at 10:12",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\"><a href=\"https://syssec.mistakenot.net/papers/eurosp-2017.pdf\" rel=\"nofollow noreferrer\">syssec.mistakenot.net/papers/eurosp-2017.pdf</a>, <a href=\"https://github.com/uxmal/nucleus\" rel=\"nofollow noreferrer\">github.com/uxmal/nucleus</a>, <a href=\"https://binary.ninja/2017/11/06/architecture-agnostic-function-detection-in-binaries.html\" rel=\"nofollow noreferrer\">binary.ninja/2017/11/06/â€¦</a></span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">your keep adding edits which are basically answers to your question, so I'm not sure what other answers you are expecting...</span>",
            "time": null
        },
        {
            "user": "Not Now",
            "text": "<span class=\"comment-copy\">Edit 1 is an additional (related) question. Edit 2 and 3 are possible solutions, but I explained why they don't fit my needs and I have added them because they could be useful for others having the same question but different specific needs.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As long as you can find a static library for a similar version of libc, you can use IDA Pro's FLIRT signatures.</p>\n<p>Generally this code is not obfuscated, as the system's libc.a will be used.  It's possible to compile libc from source and use obfuscations, but this is not what you'll usually encounter.</p>\n<p>I've got a script (link below) that I use to generate a \".sig\" file which you can drop in IDA Pro's <code>sig/pc</code> (or <code>sig/arm</code> or whatever is most relevant) and load it with FLIRT Signatures via <code>File &gt; Load File &gt; FLIRT Signatures</code>.</p>\n<p>On macOS, the directory is e.g.: <code>/Applications/IDA Pro 7.5/ida.app/Contents/MacOS/sig/pc</code></p>\n<p>Once the FLIRT signatures are loaded, you can look for whatever symbols you're interested in from IDA.</p>\n<p><code>[1]</code>: <a href=\"https://gist.github.com/zachriggle/130e01cf4541615e2062ca66d1637a07\" rel=\"nofollow noreferrer\">https://gist.github.com/zachriggle/130e01cf4541615e2062ca66d1637a07</a></p>\n</div>",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Sep 30, 2020 at 23:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}