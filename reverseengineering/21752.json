{
    "title": "Predicting Memory locations of arguments within a function",
    "link": "https://reverseengineering.stackexchange.com/questions/21752/predicting-memory-locations-of-arguments-within-a-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to write a script that would help display the memory contents of the arguments passed within a function. For example, in the function below, the first argument starts at the EAX register. Printing the contents of EAX gives us the value of the first argument. How can we print all the following arguments?</p>\n<blockquote>\n<p>BOOLAPI FtpCommandA(</p>\n<p>HINTERNET hConnect,</p>\n<p>BOOL      fExpectResponse,</p>\n<p>DWORD     dwFlags,</p>\n<p>LPCSTR    lpszCommand,</p>\n<p>DWORD_PTR dwContext,</p>\n<p>HINTERNET *phFtpCommand</p>\n<p>);</p>\n</blockquote>\n<p>Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "94",
    "tags": [
        "debugging",
        "windbg"
    ],
    "user": "Chuck Nurit",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Chuck Nurit",
            "text": "<span class=\"comment-copy\">let's say its x64.</span>",
            "time": null
        },
        {
            "user": "Chuck Nurit",
            "text": "<span class=\"comment-copy\">Get off your high horse buddy. Go ahead delete your comments.</span>",
            "time": null
        },
        {
            "user": "Chuck Nurit",
            "text": "<span class=\"comment-copy\">Dont think you know the answer anyway.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019\" rel=\"nofollow noreferrer\">Microsoft Docs</a>, the ABI for <code>x64</code> Windows looks like this:</p>\n<blockquote>\n<p>The x64 Application Binary Interface (ABI) uses a four-register fast-call calling convention by default. Space is allocated on the call stack as a shadow store for callees to save those registers. There's a strict one-to-one correspondence between the arguments to a function call and the registers used for those arguments. Any argument that doesnâ€™t fit in 8 bytes, or isn't 1, 2, 4, or 8 bytes, must be passed by reference. A single argument is never spread across multiple registers.</p>\n<p>The first four integer arguments are passed in registers. Integer values are passed in left-to-right order in RCX, RDX, R8, and R9, respectively. Arguments five and higher are passed on the stack. All arguments are right-justified in registers, so the callee can ignore the upper bits of the register and access only the portion of the register necessary.</p>\n<p>Any floating-point and double-precision arguments in the first four parameters are passed in XMM0 - XMM3, depending on position. The integer registers RCX, RDX, R8, and R9 that would normally be used for those positions are ignored, except in the case of varargs arguments.</p>\n<p>__m128 types, arrays, and strings are never passed by immediate value. Instead, a pointer is passed to memory allocated by the caller. Structs and unions of size 8, 16, 32, or 64 bits, and __m64 types, are passed as if they were integers of the same size. Structs or unions of other sizes are passed as a pointer to memory allocated by the caller.</p>\n</blockquote>\n<p>You will also find more comprehensive description and examples at that website.</p>\n<p>To see how it works in practice, we can write simple program using the <code>FtpCommandA</code> function and calling it like this:</p>\n<p><code>FtpCommandA(NULL, false, 1, \"command\", 2, NULL);</code></p>\n<p>After disassembling this simple program, you will see:\n<a href=\"https://i.sstatic.net/DWCIF.png\" rel=\"nofollow noreferrer\"><img alt=\"x64CallingConvention\" src=\"https://i.sstatic.net/DWCIF.png\"/></a></p>\n<p>You can notice that indeed, first four arguments are passed using <code>rcx</code>, <code>rdx</code>, <code>r8</code> and <code>r9</code> registers while the last two are passed using the stack.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Chuck Nurit",
                    "text": "<span class=\"comment-copy\">Thanks for explaining everything so clearly!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another way this could be achieved is by using the Stacktrace function and then printing the arguments' locations - something like this:</p>\n<pre><code>dprintf( \"%08p %08p %08p %08p %08p %s\",\n             stk[i].FramePointer,\n             stk[i].ReturnAddress,\n             stk[i].Args[0],\n             stk[i].Args[1],\n             stk[i].Args[2],\n             Buffer\n             );\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Chuck Nurit",
            "time": "Jul 30, 2019 at 21:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Chuck Nurit",
                    "text": "<span class=\"comment-copy\">Ok - here's another way I came up with it which can be used to print the actual arguments: use the 'kb' command to output the frames and then use a .foreach to pic the ones that you're after. This one works well as you can craft a command that can then be used in a breakpoint with the 'go' option at the end, if you wanted to automate the process.</span>",
                    "time": null
                }
            ]
        }
    ]
}