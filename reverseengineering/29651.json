{
    "title": "failed to trigger packer's loader by overwritting the entry of rela.dyn on aarch64",
    "link": "https://reverseengineering.stackexchange.com/questions/29651/failed-to-trigger-packers-loader-by-overwritting-the-entry-of-rela-dyn-on-aarch",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have implemented packer of x86_64 shared library.\nBriefly, a loader is injected to a shared library, and\nthe rela.dyn entry is modified such that it points to the address of the loader. Once the loader is triggered, it decrypts the .text section and finally jump to the address of the .text section.</p>\n<p>The mechanism works fine for x86_64 shared library.\nBut it failed on aarch64 shared library.</p>\n<p>Questions:</p>\n<ol>\n<li>Did I miss any steps that specifically for the aarch64 ?</li>\n<li>Is there any other ways to pack an aarch64 shared library ?</li>\n</ol>\n<p>The result of <code>readelf</code> is provided bellow.\n<code>libtest.so</code> is the library before packing.\nWhile <code>libtest_packed.so</code> is the library after packing.</p>\n<p>here is the result of <code>readelf --relocs libtest.so</code></p>\n<pre><code>Relocation section '.rela.dyn' at offset 0x550 contains 7 entries:\n000000010df0  000000000403 R_AARCH64_RELATIV                    780\n000000010df8  000000000403 R_AARCH64_RELATIV                    738\n000000011018  000000000403 R_AARCH64_RELATIV                    11018\n000000010fc8  000300000401 R_AARCH64_GLOB_DA 0000000000000000 _ITM_deregisterTMClone + 0\n000000010fd0  000400000401 R_AARCH64_GLOB_DA 0000000000000000 __cxa_finalize@GLIBC_2.17 + 0\n000000010fd8  000500000401 R_AARCH64_GLOB_DA 0000000000000000 __gmon_start__ + 0\n000000010fe0  000700000401 R_AARCH64_GLOB_DA 0000000000000000 _ITM_registerTMCloneTa + 0\n</code></pre>\n<p>the functions corresponding to the first 3 entries are:</p>\n<pre><code>0000000000000780 t frame_dummy\n0000000000000738 t __do_global_dtors_aux\n000000000011018 d __dso_handle\n</code></pre>\n<p>here is the result of <code>readelf --relocs libtest_packed.so</code></p>\n<pre><code>Relocation section '.rela.dyn' at offset 0x550 contains 7 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000010df0  000000000403 R_AARCH64_RELATIV                    11028\n000000010df8  000000000403 R_AARCH64_RELATIV                    738\n000000011018  000000000403 R_AARCH64_RELATIV                    11018\n000000010fc8  000300000401 R_AARCH64_GLOB_DA 0000000000000000 _ITM_deregisterTMClone + 0\n000000010fd0  000400000401 R_AARCH64_GLOB_DA 0000000000000000 __cxa_finalize@GLIBC_2.17 + 0\n000000010fd8  000500000401 R_AARCH64_GLOB_DA 0000000000000000 __gmon_start__ + 0\n000000010fe0  000700000401 R_AARCH64_GLOB_DA 0000000000000000 _ITM_registerTMCloneTa + 0\n</code></pre>\n<p>As you can see, the first entry is overwritten by the address of the loader.</p>\n<p>------------ Update ---------</p>\n<ol>\n<li>if I xor-ed the .text section, the xor-loader is bypassed</li>\n</ol>\n<ul>\n<li>I got Illegal instruction (core dumped), since the .text section has not been decrypted by the xor-loader. (confirmed by inspecting the .text section by gdb)</li>\n<li>I have the loader objdump-ed, the loader is intact.</li>\n</ul>\n<ol start=\"2\">\n<li>if I don't xor the .text section, the xor-loader is called and work normally. (But the decryption is wrong, since the .text section has not been xor-ed beforehand).</li>\n</ol>\n<p>Since shared library don't have an entry point. I overwrite\nthe frame_dummy pointer such that the program can jump to the .text\nsection, base on this project</p>\n<p><a href=\"https://github.com/0xN3utr0n/Noteme/blob/master/injection.c\" rel=\"nofollow noreferrer\">https://github.com/0xN3utr0n/Noteme/blob/master/injection.c</a></p>\n<p>The mechanism of my loader is inspired by\n<a href=\"https://github.com/sebastiencs/Packer_ELF\" rel=\"nofollow noreferrer\">https://github.com/sebastiencs/Packer_ELF</a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "73",
    "tags": [
        "assembly",
        "elf",
        "packers",
        "gcc",
        "aarch64"
    ],
    "user": "prgbenz",
    "time": "Dec 8, 2021 at 10:42",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">it's unclear to me how is this supposed to work. Can you add the x64 version?</span>",
            "time": null
        }
    ],
    "answers_data": []
}