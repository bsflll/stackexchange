{
    "title": "Guidelines for dealing with obfuscated code",
    "link": "https://reverseengineering.stackexchange.com/questions/25002/guidelines-for-dealing-with-obfuscated-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have taken a deep dive into reversing software with IDA, I used Ghidra before. I have already solved a couple of basic crackmes now I have targeted another one which's code is obfuscated, also has anti-debugging features and as far as I can understand it modifies its code during the the tls callbacks (at least thats what IDA indicated when stepping through the tls callbacks, there are 3 of them). I suspect the tls callbacks check for debuggers and also it unpacks the executable.</p>\n<p>I would like to ask a couple of questions in connection with this.</p>\n<ul>\n<li><p>How would you go about reversing a code that is heavly obfuscated?\n(Lots of jumps and opaque predicates.) Maybe after the tls callbacks\nfinish the code is unpacked and some of the obfuscation is removed?</p></li>\n<li><p>I have added breakpoints to the main debug checking functions from\nntdll.dll and kernel32.dll to see if they call any, I saw they had\nmultiple calls to ntqueryprocessinformation, I suspect they are\nquerying their own process?</p></li>\n<li><p>Also, if i want to read the memory of the application during runtime,\nI will need to find a way to bypass their anti debug features,\nmeaning I have to figure out what they are doing with the tls\ncallbacks and also from the entry point of the PE?</p></li>\n</ul>\n<p>I am looking for any general or specific guidelines you guys can throw me, in order to defeat their obfuscation.</p>\n<p>Thank you</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "obfuscation",
        "anti-debugging",
        "deobfuscation"
    ],
    "user": "geo10",
    "time": "May 13, 2020 at 11:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can press Ctrl+E to select the TLS entry point.\nsee here:\n<a href=\"https://hex-rays.com/blog/tls-callbacks/\" rel=\"nofollow noreferrer\">https://hex-rays.com/blog/tls-callbacks/</a></p>\n</div>",
            "votes": "2",
            "user": "user1438233",
            "time": "May 1, 2022 at 7:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are multiple ways an application could use to detect the debugger presence using NtQueryInformationProcess() since it retrieves information from a process for example most common use:</p>\n<p>ProcessDebugPort, which receives a DWORD value equal to 0xFFFFFFFF (decimal -1) if the process is being debugged.</p>\n<pre><code> lea eax, [dwReturned]\n push eax ; ReturnLength\n push 4   ; ProcessInformationLength\n lea ecx, [dwProcessDebugPort]\n push ecx ; ProcessInformation\n push 7   ; ProcessInformationClass\n push -1  ; ProcessHandle\n call NtQueryInformationProcess\n inc dword ptr [dwProcessDebugPort]\n jz being_debugged  \nbeing_debugged:\n push -1\n call ExitProces\n</code></pre>\n<p>A simple solution is to set a breakpoint where NtQueryInformationProcess() returns and when the breakpoint is hit patch with DWORD value 0.</p>\n<p>For Obfuscation, there is no direct path to deal with it but I usually try to classify and read the ASM code carefully to identify any known obfuscation techniques first such as:</p>\n<ul>\n<li><p>Logic Flow Obfuscation</p>\n<pre><code>            xor eax,eax     &lt;&lt; zero eax\n            test eax,eax    &lt;&lt; Check if eax ZERO \n            JE _eaxWasZero\n</code></pre>\n</li>\n<li><p>NOP Obfuscation</p>\n<pre><code>             push eax\n             add eax,ecx\n             sub eax,ebx\n             push ebx\n             sub ebx, EDX\n             xor ebx, edi\n             pop ebx\n             pop eax\n</code></pre>\n</li>\n<li><p>Anti-Disassembler Code Obfuscation which is used to confuse the disassembler  by adding junk bytes and fake function return address</p>\n</li>\n<li><p>Trampolines (code jumps to different locations)</p>\n</li>\n<li><p>Instruction Permutations (make simple instructions complex)</p>\n</li>\n</ul>\n<p>and then simplify it in order to identify the logic or any anti debugging trick.</p>\n</div>",
            "votes": "2",
            "user": "CPUKiller",
            "time": "Feb 6, 2023 at 3:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}