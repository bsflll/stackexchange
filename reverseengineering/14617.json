{
    "title": "ARM: understanding MSR/MRS instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/14617/arm-understanding-msr-mrs-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While reversing a bootloader, i have a lot of msr/mrs instructions, but i cannot find in the arm documentation the meaning of the parameters.</p>\n<p>For example in IDA i have things like :</p>\n<pre><code>MSR             #4, c6, c0, #4, X0\n</code></pre>\n<p>or</p>\n<pre><code>MSR             #5, #0\n</code></pre>\n<p>Could someone explain how to parse these instructions and point me to the right documentation ?</p>\n<p>Maybe there is a script or plugin to automate the process ?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "9k",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "ahz",
    "time": "Feb 10, 2017 at 14:04",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Which processor are you working with ?</span>",
            "time": null
        },
        {
            "user": "Eli K",
            "text": "<span class=\"comment-copy\">Sometimes IDA has problems disassembling raw ARM images due to switches to THUMB mode. Is THUMB mode relevant to you ARM version?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The presence of X0 and the use of MSR to access a system register tells me that you are on 64-bit ARM / ARMv8.</p>\n<p>The reference manual for this architecture can be found <a href=\"https://developer.arm.com/docs/ddi0487/a/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile\" rel=\"nofollow noreferrer\" title=\"here\">here</a></p>\n<p>Section C6 describes the instructions.  You can find <code>MSR (register)</code> at C6.2.131 and <code>MSR (immediate)</code> at C6.2.130. These both access system control registers.</p>\n<p>Section D7 describes the generic ARMv8 system control registers. In D7.2.34 you can find the information that your <code>MSR</code> instruction is accessing the <code>HPFAR_EL2</code> register which contains the \"Hypervisor IPA Fault Address.\"  (see the table at the bottom of the section that shows the values of op0/op1/CRn/Cm/op2 that correspond to this register.)</p>\n<p>The two instructions you show above are therefore -</p>\n<p><code>MSR HPFAR_EL2, X0</code></p>\n<p><code>MSR PSTATEField_SP, #0</code></p>\n</div>",
            "votes": "3",
            "user": "Ian Cook",
            "time": "Feb 11, 2017 at 23:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}