{
    "title": "How can I change the value of a variable while debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/6933/how-can-i-change-the-value-of-a-variable-while-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know that I can output the value of a variable using </p>\n<pre><code>(gdb) p var_name\n$1 = \"varvalue\"\n</code></pre>\n<p>Is there a way to set the value of a variable while debugging with gdb? The document that I'm using doesn't seem to have this command. </p>\n<p><strong>Edit</strong></p>\n<p>I've since learned that I can change the state of objects in memory by simply calling their functions! So to modify an object of type <code>std::string</code>, just call the <code>assign</code> function as follows:</p>\n<pre><code>(gdb) call str.assign(\"New Value\")\n</code></pre>\n<p>Thank you.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "10k",
    "tags": [
        "linux",
        "gdb"
    ],
    "user": "k170",
    "time": "Jan 2, 2015 at 5:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Google is your friend:</p>\n<blockquote>\n<p>For example, if your program has a variable width, you\n  get an error if you try to set a new value with just `set width=13',\n  because GDB has the command set width:</p>\n</blockquote>\n<pre>\n(gdb) whatis width  \ntype = double   \n(gdb) p width $4 = 13  \n(gdb) set width=47  \nInvalid syntax in expression. \n</pre>\n<blockquote>\n<p>The invalid expression, of course, is `=47'. In order to actually set\n  the program's variable width, use</p>\n</blockquote>\n<pre>\n(gdb) set var width=47\n</pre>\n<p>You can find the needed information in the <a href=\"http://www.delorie.com/gnu/docs/gdb/gdb_118.html\" rel=\"nofollow\">following document</a>:</p>\n</div>",
            "votes": "6",
            "user": "jvoisin",
            "time": "Jan 2, 2015 at 15:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "k170",
                    "text": "<span class=\"comment-copy\">Thank you for this answer! I just tried this with a double variable and it worked, however it didn't work with std::string objects. Is a similar technique to modify std::string objects as well?</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">check those out: <a href=\"http://sepwww.stanford.edu/public/sep/claudio/Research/Prst_ExpRefl/ShtPSPI/intel/idbe/10.1.015/doc/idb_manual/common/idb_the_assign_and_the_set_variable_commands.htm\" rel=\"nofollow noreferrer\">sepwww.stanford.edu/public/sep/claudio/Research/Prst_ExpRefl/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">and this one: <a href=\"http://rsquared.sdf.org/gdb/iacv.html\" rel=\"nofollow noreferrer\">rsquared.sdf.org/gdb/iacv.html</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A little bit later but to set a string variable you should try this&gt;</p>\n<p>gdb set var string_variable = 'new_string_variable'</p>\n<p>Character numbers must be the same for the two variable definitions, in order to apply the change as appropriate. Quotes need to be applied to new variable.</p>\n</div>",
            "votes": "2",
            "user": "Humber",
            "time": "Dec 11, 2018 at 6:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}