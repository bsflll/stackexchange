{
    "title": "Extracting the contents of an unknown archive file format",
    "link": "https://reverseengineering.stackexchange.com/questions/20436/extracting-the-contents-of-an-unknown-archive-file-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need some help and advice here.\nI am privately learning on how to reverse engineer\nour teachers custom file archive\nfile that have other files stored inside of them. \nfor school project.</p>\n<p>But, I am kinda lost on where I need to start with the file.\nWhat do I look for in the file after loading it into ida-pro\nTo, be able to create my own self extracting Tool for my project.</p>\n<p>The File format is .crackme that has been compressed with files inside of it\nfrom our teacher at school but when I double click on the file it says the file is \"archive either unknown format or damaged\".</p>\n<p>So, yeah the file extension he gave us is not any known on the web \nhe created his own extension for us to crack it and make an extractor tool\nto get all the data from the archive his extension name is \".crackme\" \nso yeah.</p>\n<p>Any Advice, here any help to is much appreciated by me.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "7k",
    "tags": [
        "file-format",
        "decompress",
        "binary-diagnosis"
    ],
    "user": "markkk",
    "time": "Jan 22, 2019 at 11:28",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">maybe attach the file so that people can look what's inside?</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">@PawełŁukasik That could just be me, but I tend to prefer generic answers, rather than \"here's your solution\" type of answers that providing specific files in a question may lead/encourage.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. I'm confused based on the info you give. So assuming it's an archive (data file) why do you want to load it into IDA at all? What does the Unix <code>file</code> command state ... did you try the usual <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/firmware\">firmware</a> analysis tools? Do you have access to any program that handles (reads <i>or</i> writes) the format, which you could reverse engineer to learn more about the format?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I hope you'll find your experience in RE.SE enjoyable and educating :)\nReverse engineering is often studied as a hobby, so you're in good company! </p>\n<p>IDA pro is a disassembler, which is focused on reverse engineering / reading assembly/machine code. that is - the code actually executed by the CPU. Since it appears you were only given a <em>format</em> file, without any executable code to manipulate / process the file, IDA will prove less useful.</p>\n<p>Instead, the only tool you should require for such a task, assuming the format is indeed proprietary, is a hex-editor / reader. <a href=\"https://www.sweetscape.com/010editor/\" rel=\"noreferrer\">010 Editor</a> is a great one, and it has a trial version.</p>\n<p>To eliminate the possibility of a known format, try running a couple file identification tools such as the linux <code>file</code> command, <a href=\"http://mark0.net/soft-trid-e.html\" rel=\"noreferrer\">TrID</a>, <a href=\"https://github.com/ReFirmLabs/binwalk\" rel=\"noreferrer\">binwalk</a>, etc. These will try to identify common file formats (binwalk is specifically focused on archive formats), which if provide any insights should point you in the right direction.</p>\n<p>To reverse engineer a file format solely based on a single file content, you'll need to map out the the file's apparent structure and you don't have a lot to go with. Excluding textual and very simply file formats, this should be kinda difficult without any additional resources (more files, a program that handles the format in any way, etc).</p>\n<p>Here's a list of pointers/tips, although you'll probably find more information available online:</p>\n<ol>\n<li>As most files begin with a header, you should begin with mapping what are the different members of the header structure.</li>\n<li>Things that are magic values, strings, offsets and sizes are quite easy to recognize. Most decent hex editors will show different representations of every few bytes, so it'll be easy to recognize. </li>\n<li>Start by dividing the bytes to different members, before you try to understand their meaning. For example, given the following hex stream: <code>00 05 00 00 00 01 BE F1 CA D7</code> it is easy to notice the members are a word (2 bytes), a dword (4 bytes) and another dword. It is also likely that the first two are integers while the third is either a magic value or a CRC.</li>\n<li>If the file has any recurring delimiter values, those should also be easily identifiable (although less likely to be present in an active file format).</li>\n<li>If you manage to recognize any other file headers (probably using their own magic values), those are good leads to figuring out where the actual file content is placed. This will also mean the archive file does not compress the contained files, linux's tar, for example, can do that. Alternatively, if you encounter long streams of smooth or random looking binary streams those can be the actual compressed data. I tend to believe your teacher did not invent he's own compression algorithm, so there you'll need to find similarities to other compression algorithms, perhaps running those streams under TrID and file again could help.</li>\n<li>Common looking patterns, for example, may be a useful way to uncover recurring structures (for which you'll have more than one reference point, yay!). For example, if you recognize every file-name string is followed by a sequence of bytes with a similar structure, those are probably two instances of the same structure. </li>\n</ol>\n</div>",
            "votes": "5",
            "user": "NirIzr",
            "time": "Jan 22, 2019 at 11:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "dsasmblr",
                    "text": "<span class=\"comment-copy\">To add to Nirlzr's excellent answer, there are a couple of great communities dedicated to reversing file formats which could perhaps help serve you tremendously. They are XeNTaX and ZenHAX, respectively. Just Google those names and their forums will pop up. Each site has tutorials that discuss reverse engineering file formats, so if you really want to learn how to do this stuff, check those out. Finally, the main guy behind XeNTaX has a YouTube channel where he shows you how to reverse various file types: <a href=\"https://www.youtube.com/watch?v=ysh35jP_iBk&amp;list=PLP26ZYnLb5EVqqBHDgltL6oGrVNJ2kS2f\" rel=\"nofollow noreferrer\">youtube.com/…</a></span>",
                    "time": null
                },
                {
                    "user": "markkk",
                    "text": "<span class=\"comment-copy\">Thanks so so so much for all of the help I got from each of you really this is an incredible site and a awesome community. Anything I can do to help you all out on your questions feel free to ask I will try my best again thank you very much, strongly appreciated.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@dsasmblr, great addition! markkk, you're welcome!</span>",
                    "time": null
                },
                {
                    "user": "markkk",
                    "text": "<span class=\"comment-copy\">Is, there a version of Bin-walk for windows versions of Ida-pro if not is there an alternative to Bin-walk for windows that focuses on archives. @NirIzr #NirIzr</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many archive formats contain headers. gzip headers for instance begin with <code>1f 8b</code>. Use a hex-editor to check for known magic numbers in the header first.</p>\n</div>",
            "votes": "0",
            "user": "Robert",
            "time": "Jan 22, 2019 at 5:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}