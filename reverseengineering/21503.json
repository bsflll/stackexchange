{
    "title": "Unexpected SEGFAULT when there's apparently nothing that would cause it",
    "link": "https://reverseengineering.stackexchange.com/questions/21503/unexpected-segfault-when-theres-apparently-nothing-that-would-cause-it",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a from a CTF problem I'm working on. Hopefully it's appropriate to ask this question here.</p>\n<p><a href=\"https://i.sstatic.net/iODPl.png\" rel=\"nofollow noreferrer\"><img alt=\"GDB output when segmentation fault happens\" src=\"https://i.sstatic.net/iODPl.png\"/></a></p>\n<p>Above is the GDB output when the segfault goes off. <code>movaps</code> is the offending instruction, meaning that <code>rsp+0x40</code> is most likely pointing to unmapped memory.</p>\n<p>However, a closer look at the memory allocated for the stack</p>\n<p><a href=\"https://i.sstatic.net/C5Evh.png\" rel=\"nofollow noreferrer\"><img alt=\"stack memory map\" src=\"https://i.sstatic.net/C5Evh.png\"/></a></p>\n<p>and <code>rsp=0x00007ffde19d78a8</code> from the GDB output, shows that <code>rsp+0x40</code> is well within the allocated bounds. This is really confusing for me, is there something I'm missing here? Something else I can look into to debug this?</p>\n<p>Finally the output when running this under <code>strace</code></p>\n<pre><code>[pid 32671] --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL} ---\n[pid 32671] +++ killed by SIGSEGV (core dumped) +++\n</code></pre>\n<p>shows that it's apparently a null pointer dereference (<code>si_addr=NULL</code>), which doesn't make any sense to me because the offending instruction <code>movaps XMMWORD PTR [rsp+0x40],xmm0</code> isn't accessing a NULL pointer?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "linux"
    ],
    "user": "Filip Kilibarda",
    "time": "Jun 17, 2019 at 22:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <a href=\"https://c9x.me/x86/html/file_module_x86_id_180.html\" rel=\"nofollow noreferrer\">this</a> the address should be aligned by 16, which is not happen. Your <code>rsp</code> value is ending by <code>0xa8</code>, so <code>[rsp + 0x40]</code> will be aligned by 8, not 16.</p>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Jun 18, 2019 at 7:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Filip Kilibarda",
                    "text": "<span class=\"comment-copy\">Should've read that 2nd paragraph! Thanks a lot, actually had no idea misalignment could trigger hardware faults, always thought it was <i>just</i> less efficient.</span>",
                    "time": null
                }
            ]
        }
    ]
}