{
    "title": "What does adding to a function pointer do?",
    "link": "https://reverseengineering.stackexchange.com/questions/32363/what-does-adding-to-a-function-pointer-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i'm dissassembling an arm shared object and i'm seeing this line:</p>\n<pre><code>iVar1 = SecurityAccess(param_2,SeedEncrypt + 1,0x1);\n</code></pre>\n<p>the SecurityAccess SeedEncrypt  is:</p>\n<pre><code>int SecurityAccess(int param_1,void *param_2,uint param_3)\n</code></pre>\n<p>and the  SeedEncrypt function signature:</p>\n<pre><code>uint SeedEncrypt (uint param_1,uint param_2)\n</code></pre>\n<p>As you can see it is a pointer to a function (SeedEncrypt being a function), so my question is, what does the SeedEncrypt + 1 means?</p>\n<p>I saw online that you increment the address by the size of the function's return type, and as the SeedEncrypt address is 000a1fd6 and the signature is uint, how should i interpret it?</p>\n<p>This the SeedEncrypt function decompiled:</p>\n<hr/>\n<pre><code>                         *                          FUNCTION                          *\n                         **************************************************************\n           uint __stdcall SeedEncrypt (uint param_1, uint param_2)\n                           assume LRset = 0x0\n                           assume TMode = 0x1\n         uint              r0:4           &lt;RETURN&gt;\n         uint              r0:4           param_1\n         uint              r1:4           param_2\n                         SeedEncrypt \n    000a1fd6 83 08           lsrs       r3,param_1,#0x2\n    000a1fd8 59 40           eors       param_2,r3\n    000a1fda 43 08           lsrs       r3,param_1,#0x1\n    000a1fdc 58 40           eors       param_1,r3\n    000a1fde c3 00           lsls       r3,param_1,#0x3\n    000a1fe0 08 1c           adds       param_1,param_2,#0x0\n    000a1fe2 58 40           eors       param_1,r3\n    000a1fe4 70 47           bx         lr\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "143",
    "tags": [
        "ghidra"
    ],
    "user": "Espeto_Power",
    "time": "Oct 5, 2023 at 14:56",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Impossible to say without more context. Suppose <code>SeedEncrypt</code> has a type such as <code>unsigned int*</code> then <code>+1</code> means the same as <code>SeedEncrypt[1]</code>. But the argument itself is passed as <code>void*</code>, which doesn't allow for this sort of pointer arithmetic. So you need to give more context.</span>",
            "time": null
        },
        {
            "user": "Espeto_Power",
            "text": "<span class=\"comment-copy\">@0xC0000022L Thank you for welcoming me! I added more information if that helps.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Tl;dr</strong>: The function <code>SendEncrypt</code> is written using the Thumb instruction set.</p>\n<hr/>\n<p>Many (most?) ARM processors support two instruction sets: the ARM instruction set, and the Thumb instruction set. In the ARM instruction set every instruction is 4 bytes long, and in the Thumb instruction set every instruction is 2 bytes long.</p>\n<p>In instructions that jump, the least significant bit of the supposed jump target is actually cleared out of the jump target, and instead chooses whether to decode the instructions over there as ARM or as Thumb.</p>\n<p>For example, suppose we have an instruction to jump to the address which <code>r3</code> holds:</p>\n<pre><code>bx r3\n</code></pre>\n<p>If <code>r3</code> is even, then it means that the instructions at where <code>r3</code> points to are ARM instructions, which are 4 bytes wide. In particular, in this case, <code>r3</code> must be divisible by 4.</p>\n<p>On the other hand, if <code>r3</code> is odd, then the real jump target is <code>r3 &amp; ~1</code> (equivalently <code>r3 - 1</code>) and the instructions over there would be decoded as Thumb instructions, which are 2 bytes wide. In this case, <code>r3 - 1</code> does not have to be divisible by 4, but only by 2 (which is automatic assuming <code>r3</code> is odd)</p>\n<p>Therefore, for any function which is written using the Thumb instruction set, a function pointer that points to it will have a <code>+1</code> to signify that the function is written as Thumb.</p>\n<p>In your case, <code>SendEncrypt</code> is apparently written in Thumb, and therefore the function pointer that is passed to <code>SecurityAccess</code> has a <code>+1</code></p>\n</div>",
            "votes": "1",
            "user": "user49822",
            "time": "Oct 6, 2023 at 15:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>SeedEncrypt</code>'s code is <a href=\"https://developer.arm.com/documentation/dui0068/b/Writing-ARM-and-Thumb-Assembly-Language/Overview-of-the-ARM-architecture/Thumb-instruction-set-overview\" rel=\"nofollow noreferrer\">ARM Thumb</a> code, a compressed subset of the ARM istruction set with 2-byte opcodes.</p>\n<p>To differentiate between normal and Thumb code, the least significant bit of code pointers is used, and a pointer to a Thumb function will have it set. Disassemblers often recognize this, and show a <code>+1</code> after the pointer.</p>\n<p><a href=\"https://stackoverflow.com/q/37004954/7547712\">__</a></p>\n</div>",
            "votes": "1",
            "user": "Dario Petrillo",
            "time": "Oct 6, 2023 at 15:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}