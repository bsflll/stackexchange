{
    "title": "How to propagate re-typed variables to functions signatures automatically?",
    "link": "https://reverseengineering.stackexchange.com/questions/29477/how-to-propagate-re-typed-variables-to-functions-signatures-automatically",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the Ghidra decompiler, after applying a type to a function parameter, the compiler uses that type information to provide better decompilation within the function. When that parameter is used in a function call though, the type information does not propagate. I have to manually change the function signature for the type information to carry forward.</p>\n<p>Is there any way to get Ghidra to automatically propagate the type information? I thought <code>Commit Params/Return P</code> or <code>Commit Local Names</code> would do it, but no luck. Finding it time-consuming to have to re-type a known entity in every function call it's used.</p>\n<p><strong>Example:</strong></p>\n<p>Looking at a Windows Kernel Driver, following the analysis steps <a href=\"https://posts.specterops.io/methodology-for-static-reverse-engineering-of-windows-kernel-drivers-3115b2efed83\" rel=\"nofollow noreferrer\">here</a></p>\n<p>Changed the type of param_2 from <code>longlong</code> to <code>PIRP</code> and renamed it <code>pIRP</code>. Then selected Analysis -&gt; Auto-Analyze file.sys and only selected Decompiler Parameter ID.</p>\n<p>After running the analysis, I'm left with this :</p>\n<pre><code>int FUN_140001a20(longlong test,PIRP pIRP)\n{\n    ... TRIMMED...\n\n        if (uVar2 == 0xc3500e68) {\n          uVar7 = FUN_140002a14(test,(longlong)pIRP,(longlong)pbVar3);\n</code></pre>\n<p>And double-clicking <code>FUN_140002a14</code>:</p>\n<pre><code>void FUN_140002a14(longlong param_1,longlong param_2,longlong param_3)\n</code></pre>\n<p>For whatever reason, <code>pIRP</code>'s type is getting cast, and the signature for the called function doesn't change. I'd have expected the <code>longlong</code> to become <code>PIRP</code>.</p>\n<p><strong>Edit:</strong></p>\n<p>Still working this. Since the types/names don't propagate, working a script to do it for me for a given function. Right now I'm grabbing all functions called by a given function and trying to change a known parameter's name/type.</p>\n<p>What I'm most confused about is in the Decompiler window, when I rename/retype a variable, it propagates through the rest of that function. But when I query the parameters for those functions, the variables are unchanged. For example, in the decompiler window, <code>pIRP</code> is propagated to all functions where it's used, but when I get the function signatures in the script, it still has the name as <code>param_2</code>.</p>\n<p>Decompiler Window:</p>\n<pre><code>uVar5 = FUN_140002a14(param_1,(longlong)pIRP,(longlong)CurrentStackLocation)\n</code></pre>\n<p>Script Output:</p>\n<pre><code>helloGhidra.java&gt; FUN_140002a14[[longlong param_1@RCX:8], [longlong param_2@RDX:8], [longlong param_3@R8:8]]\n</code></pre>\n<p>This occurs even if I try Commit Params/Return P and Commit Local Names for the parameter.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "ghidra"
    ],
    "user": "gr0k",
    "time": "Nov 30, 2021 at 13:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think the <code>Decompiler Parameter ID</code> analysis, should solve this, at least it is supposed to propagate type information across function boundaries.</p>\n</div>",
            "votes": "3",
            "user": "Florian Magin",
            "time": "Oct 30, 2021 at 17:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gr0k",
                    "text": "<span class=\"comment-copy\">Didn't quite work. Added to the question to show what happened</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">The type seems correctly propagated. The Decompiler Parameter ID is not supposed to propagate the <i>name</i> of a variable, and I am not sure why you would expect an analysis to do that in the general case</span>",
                    "time": null
                },
                {
                    "user": "gr0k",
                    "text": "<span class=\"comment-copy\">I didn't change the type, just the name. But the same problem occurs with the type. Why should I have to change the variable name more than once? If I give a variable a meaningful name in function A, when said variable is passed to function B, when I look at function B, why does param_1 not keep the variable name I assigned in the calling function?</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">Assume you have a function that you reverse engineered and named <code>char* read_file(char *path)</code> and this is called in a function where you named the variable <code>secret_file</code>. If Decompiler Parameter ID would propagate the name it would change <code>path</code> to <code>secret_file</code></span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">That the type didn't propagate is weirder, can check the actual code of Decompiler Parameter ID tomorrow to see what is going on there. If you really want to propagate the variable names to function param names you can write a script for it. Any questions coming up while writing that script are probably worth another dedicated StackExchange question</span>",
                    "time": null
                }
            ]
        }
    ]
}