{
    "title": "What does lea rdx,qword ptr ss:[rbp+50] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/10728/what-does-lea-rdx-qword-ptr-ssrbp50-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What does the code below exactly mean?</p>\n<pre><code>lea rdx,qword ptr ss:[rbp+50]\n</code></pre>\n<p>I have difficulty in <code>rbp+50</code>. Is <code>rbp</code> the base pointer in the 64 bit CPU architecture? What is the base pointer refering to? how can I find out the value at <code>rbp+50</code>? what does <code>ss</code> mean? what does <code>qword</code> mean? I totally confused with these terms.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "7k",
    "tags": [
        "disassembly",
        "x86-64",
        "assembly"
    ],
    "user": "FreeMind",
    "time": "Aug 27, 2015 at 17:45",
    "comments": [
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\"><a href=\"https://reverseengineering.stackexchange.com/q/2006/2563\">How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?</a>, <a href=\"http://stackoverflow.com/q/7844963/995714\">How to interpret segment register accesses on x86-64?</a>, <a href=\"http://stackoverflow.com/q/19502868/995714\">Meaning of CS and SS registers on x86-64 Linux in userland?</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code means <code>rdx = rbp + 50</code>.</p>\n<p>For the explanation, we'll go bottom up...</p>\n<p><code>qword</code> is 8-bytes (64 bits). It stands for quad-word, same as <code>dword</code> stands for double-word. It is the size of every <code>rXX</code> register. The <code>qword ptr</code> means that we are accessing a <code>qword</code> sized memory block (as oppised to a <code>byte</code>, <code>word</code> or <code>dword</code>).</p>\n<p><code>ss</code> stands for stack-segment. However, in non 16-bit systems all segments are usually mapped to 0. It is probably shown in the code as an artifact of the dis-assembly as the <code>rbp</code> register is used to point into the stack.</p>\n<p>The <code>lea</code> commands mean load-effective-address. It does not take the value at the given address, but rather the address itself. So in pseudo code we can rewrite the entire thing as <code>rdx = rbp + 50</code>.</p>\n</div>",
            "votes": "10",
            "user": "tmr232",
            "time": "Aug 27, 2015 at 20:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}