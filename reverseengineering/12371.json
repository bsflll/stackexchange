{
    "title": "Dll Injection into QT application",
    "link": "https://reverseengineering.stackexchange.com/questions/12371/dll-injection-into-qt-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm pretty new to this stuff, so please excuse me if anything I ask is kinda stupid.\nI'm trying to inject a DLL into a QT application and call some of the QT functions. I got the injection working with notepad.exe or explorer.exe, but everything else I tried (Spotify, some QT apps, skype, ...) wont show my messagebox, although the injection intself doesn't throw any errors.</p>\n<p>Here's the code of my injector program:</p>\n<pre><code>#include \"stdafx.h\"\n#include \"windows.h\"\n#include &lt;iostream&gt;\n\nusing namespace std;\nchar const path[] = \"C:\\\\InjectedDll.dll\";\n\nvoid setDebugPrivilege()\n{\n    HANDLE hToken;\n    TOKEN_PRIVILEGES privileges;\n    privileges.PrivilegeCount = 1;\n    privileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))\n    {\n        std::cout &lt;&lt; \"Failed to open process.\" &lt;&lt; std::endl;\n    }\n    if (!LookupPrivilegeValue(0, SE_DEBUG_NAME, &amp;privileges.Privileges[0].Luid))\n    {\n        std::cout &lt;&lt; \"Failed to look up privileges.\" &lt;&lt; std::endl;\n    }\n    if (!AdjustTokenPrivileges(hToken, false, &amp;privileges, sizeof(privileges), 0, 0))\n    {\n        std::cout &lt;&lt; \"Failed to adjust token privileges.\" &lt;&lt; std::endl;\n    }\n    CloseHandle(hToken);\n}\n\nint main(int argc, char* argv)\n{\n    setDebugPrivilege();\n\n    HWND hWnd;\n    hWnd = FindWindowA(0, \"Spotify\");\n    if (!hWnd) {\n        std::cout &lt;&lt; \"Could not find editor window.\" &lt;&lt; std::endl;\n    }\n\n    DWORD pId;\n    GetWindowThreadProcessId(hWnd, &amp;pId);\n    if (!pId) {\n        std::cout &lt;&lt; \"Could not find process id.\" &lt;&lt; std::endl;\n    }\n\n    HANDLE hProcess;\n    hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, pId);\n    if (!hProcess) {\n        std::cout &lt;&lt; \"Failed to open process.\" &lt;&lt; std::endl;\n    }\n\n    HANDLE allocatedAddress;\n    allocatedAddress = VirtualAllocEx(hProcess, 0, sizeof(path), MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    WriteProcessMemory(hProcess, (void*)allocatedAddress, (void*)path, sizeof(path), 0);\n\n    HANDLE hRemoteThread;\n    hRemoteThread = CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(\"kernel32.dll\"), \"LoadLibraryA\"), allocatedAddress, 0, 0);\n    if (!hRemoteThread) {\n        std::cout &lt;&lt; \"Failed to create remote thread: \" &lt;&lt; GetLastError() &lt;&lt; std::endl;\n    }\n\n    WaitForSingleObject(hRemoteThread, INFINITE);\n    VirtualFreeEx(hProcess, allocatedAddress, sizeof(path), MEM_DECOMMIT);\n    CloseHandle(hProcess);\n\n    system(\"Pause\");\n\n    return 0;\n}\n</code></pre>\n<p>And here is my basic DLL.h:</p>\n<pre><code>#pragma once\n#include \"windows.h\"\n\n#ifdef INJECTEDDLL_EXPORTS\n    #define INJECTED_DLL_API __declspec(dllexport)\n#else\n    #define INJECTED_DLL_API __declspec(dllimport)\n#endif\n\nINJECTED_DLL_API LRESULT CALLBACK newWndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);\nINJECTED_DLL_API DWORD WINAPI creation();\nINJECTED_DLL_API int WINAPI DllMain(HINSTANCE hInstance, DWORD reason, LPVOID reserved);\n</code></pre>\n<p>And DLL.cpp:</p>\n<pre><code>#include \"injected_dll.h\"\n\nDWORD WINAPI creation()\n{\n    MessageBoxW(HWND_DESKTOP, L\"Failed to subclass window.\", L\"Noez!\", MB_OK);\n    return TRUE;\n}\n\nint WINAPI DllMain(HINSTANCE hInstance, DWORD reason, LPVOID reserved)\n{\n    if (reason == DLL_PROCESS_ATTACH)\n    {\n        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)creation, 0, 0, 0);\n    }\n    return true;\n}\n</code></pre>\n<p>So can anyone tell me why this isn't working? I tried both, using MessageBoxA(..) and MessageBoxW(..) and just MessageBox(..), they all worked on notepad.exe, but none worked on the other programs.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "dll-injection",
        "qt"
    ],
    "user": "Joh",
    "time": "Apr 8, 2016 at 8:45",
    "comments": [
        {
            "user": "krusty",
            "text": "<span class=\"comment-copy\">try MessageBoxW with NULL hWnd.</span>",
            "time": null
        },
        {
            "user": "Joh",
            "text": "<span class=\"comment-copy\">Thanks, but that didn't help either. Also tried to change the LoadLibraryA call to LoadLibraryW and LoadLibrary, both didn't work and the last one made Spotify (which I used for testing) crash...</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">I'd recommend attaching a debugger to the target process prior to injection and configuring your debugger to pause on new thread creation. This will allow you to see if a new thread is actually getting created, and if so, will allow you to step through the thread's code and diagnose the problem.</span>",
            "time": null
        },
        {
            "user": "Joh",
            "text": "<span class=\"comment-copy\">Still no luck and both functions succeed...could this be something with 32bit/64bit? I'm compiling the DLL and the injector 64bit, so this should work even with 32bit applications, shouldn't it? EDIT: okay this was in fact the problem, sorry that this didn't come to my mind earlier, I thought 64bit &gt; 32bit works, only the other way around doesn't. Now, lets say I want to support injection into both platforms, how would I do that? Is there no way around offering two seperate .exes and .dlls then?</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">@Joh A little late but no, you'd have to bundle two different DLLs and two different injectors. It is possible to inject a 64bit DLL into a WOW64ed 32bit process in a 64bit machine, but that's a lot of effort that generally isn't worth it.</span>",
            "time": null
        }
    ],
    "answers_data": []
}