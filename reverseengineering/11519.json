{
    "title": "Analyzing a Login Process",
    "link": "https://reverseengineering.stackexchange.com/questions/11519/analyzing-a-login-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reverse engineering a program that uses a custom auth protocol. This is a basic outline of the process:</p>\n<ol>\n<li>Client takes input for username and password, then sends username to the auth server.</li>\n<li>Auth server calculates a public key and responds with it.</li>\n<li>Client uses that key to calculate a session key, which is sent to the server. </li>\n</ol>\n<p>The communication is all done via HTTP. My goal is to locate and analyze the functions responsible for calculating the session key. My most recent approach was to set a breakpoint on <code>ws2_32.recv</code>, begin the login process, then step through the execution from the recv breakpoint to analyze how the public key was being used to calculate the session key.</p>\n<p>However, the breakpoint isn't triggered at the expected time. A breakpoint on <code>ws2_32.send</code> is triggered as expected. I'm pretty stumped on this. Is there something I've overlooked? Is there a better approach to locating the functions?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "934",
    "tags": [
        "binary-analysis",
        "debugging",
        "dynamic-analysis"
    ],
    "user": "Invalidation",
    "time": "Dec 13, 2015 at 9:41",
    "comments": [
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">Is the client a (windows) executable? You could look at what the executable imports in the Import Address Table or run it through a disassembler.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your program might be using <code>ws2_32.recvfrom</code> instead of <code>ws2_32.recv</code>. Or alternatively, it could be using one of the lower-level Winsock functions, such as <code>ws2_32.WSARecv</code>, <code>ws2_32.WSARecvEx</code>, <code>ws2_32.WSARecvFrom</code>, or <code>ws2_32.WSARecvMsg</code>.</p>\n<p>You may want to try one of the following approaches to determine what the program is doing:</p>\n<ul>\n<li>Use an API monitor such as <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow\">API Monitor</a> to determine what networking functions are called.</li>\n<li>Use <a href=\"https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx\" rel=\"nofollow\">Process Monitor</a> to capture the network-receive events and double-click on those events to see the callstack.</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Dec 14, 2015 at 15:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Invalidation",
                    "text": "<span class=\"comment-copy\">I took a look at the process with API monitor and monitored all functions under \"networking\". I also set individual breakpoints on <code>recv</code>, <code>recvfrom</code>, <code>WSARecv</code>, <code>WSARecvEx</code>, and <code>WSARecvFrom</code>. Though the auth library calls <code>send</code>, it never seems to call any of the recv functions listed. The only calls to <code>recv</code> are from <code>libcef.dll</code>, and the calls are out of order in relation to the auth library's <code>send</code> calls. I'm watching the recv packets come in simultaneously using network monitor, too. Also, <code>WSARecvMsg</code> isn't recognized by API Monitor nor Immunity Debugger for me.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Sounds like using Process Monitor is the way to go, then.</span>",
                    "time": null
                }
            ]
        }
    ]
}