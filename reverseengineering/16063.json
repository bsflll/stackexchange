{
    "title": "Understanding an if statement in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/16063/understanding-an-if-statement-in-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have written two simple C programs (one with an <code>if</code> and one without).  Looking at the assembly differences there are a few lines that I can't manage to explain and was hoping to get some assistance.  The <code>if</code> based C code is: </p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n        char buffer[256];\n        if(sizeof(buffer) &gt;= sizeof(argv[1])) {\n                strcpy(buffer, argv[1]);\n                printf(\"%s\\n\", buffer);\n       }\n       return 0;\n}\n</code></pre>\n<p>The assembly for this is: </p>\n<pre><code>#   0x4005d6 &lt;main&gt;         push   rbp\n#   0x4005d7 &lt;main+1&gt;       mov    rbp,rsp\n#   0x4005da &lt;main+4&gt;       sub    rsp,0x120\n#   0x4005e1 &lt;main+11&gt;      mov    DWORD PTR [rbp-0x114],edi\n#   0x4005e7 &lt;main+17&gt;      mov    QWORD PTR [rbp-0x120],rsi\n#   0x4005ee &lt;main+24&gt;      mov    rax,QWORD PTR fs:0x28\n\n    0x4005f7 &lt;main+33&gt;      mov    QWORD PTR [rbp-0x8],rax\n    0x4005fb &lt;main+37&gt;      xor    eax,eax\n    0x4005fd &lt;main+39&gt;      mov    rax,QWORD PTR [rbp-0x120]\n\n#   0x400604 &lt;main+46&gt;      add    rax,0x8\n#   0x400608 &lt;main+50&gt;      mov    rdx,QWORD PTR [rax]\n#   0x40060b &lt;main+53&gt;      lea    rax,[rbp-0x110]\n#   0x400612 &lt;main+60&gt;      mov    rsi,rdx\n#   0x400615 &lt;main+63&gt;      mov    rdi,rax\n#   0x400618 &lt;main+66&gt;      call   0x400490 &lt;strcpy@plt&gt;\n#   0x40061d &lt;main+71&gt;      lea    rax,[rbp-0x110]\n#   0x400624 &lt;main+78&gt;      mov    rdi,rax\n#   0x400627 &lt;main+81&gt;      call   0x4004a0 &lt;puts@plt&gt;\n#   0x40062c &lt;main+86&gt;      mov    eax,0x0\n\n    0x400631 &lt;main+91&gt;       mov    rcx,QWORD PTR [rbp-0x8]\n    0x400635 &lt;main+95&gt;       xor    rcx,QWORD PTR fs:0x28\n    0x40063e &lt;main+104&gt;      je     0x400645 &lt;main+111&gt;\n    0x400640 &lt;main+106&gt;      call   0x4004b0 &lt;__stack_chk_fail@plt&gt;\n\n#   0x400645 &lt;main+111&gt;     leave\n#   0x400646 &lt;main+112&gt;     ret\n</code></pre>\n<p>The parts of the assembly with <code>#</code> are exactly the same as the code without the if statement (I included it for ease and readability).  The lines that have me confused are line <code>main+91</code> through <code>main+106</code>.</p>\n<p>I don't get why an if statement would somehow add these bits and was hoping for a little insight.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "675",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "gdb"
    ],
    "user": "user21204",
    "time": "Aug 11, 2017 at 13:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code you are referring to is a check for <code>argv[1]</code> being initialized most likely.</p>\n<p>The main problem here is that you are actually comparing two static numbers, i.e. <code>sizeof(argv[1])</code> is going to ALWAYS be the same (and also smaller than 256), no matter what the <code>argv[1]</code> is. The compiler knows this, thus omits the whole 'if' statement. It should also segfault / have undefined behavior if there is no <code>argv[1]</code>. Needless to say, you can easily buffer overflow here..</p>\n<p>What you really wanted to do is this:</p>\n<pre><code>...   \nif(sizeof(buffer) &gt; strlen(argv[1])){    \n... \n}\n...   \n</code></pre>\n<p>Reason for '<code>&gt;</code>' and not '<code>&gt;=</code>' is that the null terminated string needs the null terminator, which is not accounted for when calculating the <code>strlen()</code> (or add one).</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Aug 11, 2017 at 13:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just to add on Sigtran answer, part of the assembly code you are pinpointing is coming from the stack-smashing protection. It seems that you have it enabled by default on your system.</p>\n<p>Try to recompile your code with the option: <code>-fno-stack-protector</code> and look at the assembly again. It should clean out most of these lines that you do not understand (if not all).</p>\n<p><strong>PS</strong>: If you want a more detailed answer about what does this code, feel free to add a comment to my answer and I will detail these lines in my answer.</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Aug 11, 2017 at 13:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}