{
    "title": "Question about unpacking",
    "link": "https://reverseengineering.stackexchange.com/questions/26238/question-about-unpacking",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>thank for reading, i'm a beginner trying to learn Malware Analysis and Reverse Engineering, at the moment I readed the book \"Learning Malware Analysis\", I fully understand it, but there is just one section that i can't grasp, Unpacking, I tried to manually unpack UPX without success even if I watched tutorial and did the exact same thing (Breakpoint on the famous jump and then dump with scylla and rebuild IAT, but nothing).\nI don't understand how detect the instructions that unpack the executable, can someone give me the right resources to start learning unpacking? I already have tutorials like \"unpacking xxxx\" but I would prefere something more general, concepts that I need to know, I hope you understand my question, tell me if I said something wrong, thank you.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "308",
    "tags": [
        "unpacking"
    ],
    "user": "Fitz",
    "time": "Nov 4, 2020 at 13:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Manually unpacking is an art that takes lots of practice, but you're starting off right by working on the most simple examples. You need to have a solid understanding of the tools involved in the process and the PE file format. There are quite a few resources out there, but I've had great success spinning up folks with [yates] old docs on PE files, and Lena's tutorials (the unpacking specific things) Lena's tuts are old, but for understanding some core concepts they're still pretty relevant (x86 isn't completely dead just yet). If you want to go forward with more, there are quite a few unpackme's out for different targets too. You should be able to follow along with relative ease using x64dbg instead of olly for those tutorials as well.</p>\n<p>So for starters, I'd suggest snagging <a href=\"https://forum.tuts4you.com/files/file/1307-lenas-reversing-for-newbies/\" rel=\"nofollow noreferrer\">Lena's tuts</a>. If you're use to the toolset you probably can jump right in with Part 20 &amp; 21, part 21 has a UPX unpackme, but part 20 teaches some other core concepts.</p>\n<p>Familiarize yourself with the PE file format, I really liked [yates] info on <a href=\"https://web.archive.org/web/20180305002212/http://www.reverse-engineering.info/PE_Information/PE_Notes.pdf\" rel=\"nofollow noreferrer\">PE files</a> also his <a href=\"https://web.archive.org/web/20180305002416/http://www.reverse-engineering.info/PE_Information/Understanding_ImportTables.pdf\" rel=\"nofollow noreferrer\">Understanding Import tables</a> article is also a great read. Finally, his <a href=\"http://www.reteam.org/papers/e54.pdf\" rel=\"nofollow noreferrer\">Program Flow</a> paper ties a lot of that info together well, with some really solid and simple x86/win32 asm code examples to show you how to write your own tools.</p>\n<p>Also a decent resource on PE things is <a href=\"http://index-of.es/Windows/pe/CBM_1_2_2006_Goppit_PE_Format_Reverse_Engineer_View.pdf\" rel=\"nofollow noreferrer\">Goppit's Code Breaker</a> article. It's rather in depth, but covers about any question you could have.</p>\n<p>That should be enough to get you started down the right path, knowing your tools and knowing what docs to read is definitely half the battle. Good luck, you can do it. archive.org and is your friend if you can't find some of the files linked in those tuts.</p>\n</div>",
            "votes": "1",
            "user": "dgrif",
            "time": "Nov 5, 2020 at 1:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Fitz",
                    "text": "<span class=\"comment-copy\">Thank you very much!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>learn the basics of how packers works; I haven't read the book that you mentioned, but it should discuss it;</p>\n<p>Detect whether it uses custom packer or known (commercial) packer:</p>\n<ol>\n<li>there is known sections; UPX0</li>\n<li>tools like Detect It Easy will identify it;</li>\n<li>if that was not the case, it's mostly custom packer;</li>\n</ol>\n<p>Unpacking known packers:</p>\n<ol>\n<li>usually there is pushad/popad combination that lead to OEP.</li>\n<li>there is far jump; meaning that sample will jump from one section to another, or similar thing. jump target usually has no actual meaning unless sample reach that address. (actual instructions will be written there). push \"address\" ret; jump \"register\"; jump \"address\"</li>\n<li>you will duckduckgo it and find some forums that talk about this particular packer.</li>\n</ol>\n<p>if these are the case, follow: <a href=\"https://www.virusbulletin.com/virusbulletin/2012/04/quick-reference-manual-unpacking\" rel=\"nofollow noreferrer\">https://www.virusbulletin.com/virusbulletin/2012/04/quick-reference-manual-unpacking</a></p>\n<p>Unpacking Custom Packers:</p>\n<ol>\n<li>trace it's API Calls either with DBI or inline hooking; there are tools out there that do it for you. find the point that the malware starts it's actual malicious activity; put breakpoint on corresponding APIs and dump the payload.\nI usually put breakpoint on VirtualAlloc, VirtualProtect, CreateProcessInternalW, WriteProcessMemory depending on sample.</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "script kiddie",
            "time": "Nov 4, 2020 at 20:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Fitz",
                    "text": "<span class=\"comment-copy\">Thank you very much!</span>",
                    "time": null
                }
            ]
        }
    ]
}