{
    "title": "IDA Strange exception before code is executed",
    "link": "https://reverseengineering.stackexchange.com/questions/14268/ida-strange-exception-before-code-is-executed",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse a PE executable (challenge tutorial). I am putting a breakpoint on the first instruction of the program, at the entry point. There is nothing executed before. </p>\n<p>I get a software breakpoint exception when I run the program. I think this is a debugger detection system. But I do not know where is the code that throws this exception, because I have not reach my program entry point. </p>\n<p>The exception throws from <code>ntdll.dll</code> I want to understand how can code from <code>ntdll.dll</code> can be executed BEFORE the entry point of my binary</p>\n<p>Thanks</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "pe"
    ],
    "user": "Bob5421",
    "time": "Dec 28, 2016 at 23:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One thing that runs before the entrypoint is <a href=\"http://www.hexblog.com/?p=9\" rel=\"noreferrer\">TLS callbacks</a>, so check if your binary has them.</p>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "Dec 28, 2016 at 21:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">To add to Igor's answer if your binary loads custom DLLs then their initialization code is run before you reach entry point of binary</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>no offense intended but this question demonstrates some basic lack of understanding of how windows loads user-mode processes, how how user-mode code and executables are built.</p>\n<p>I'll list a few missing pieces:</p>\n<ol>\n<li>As Igor mentioned, TLS callbacks are often called before the entry point is executed and are used to setup tasks before any code is executed (global object constructors is one example). TLS callbacks are occasionally used by the compiler for certain tasks as well as in a set of anti-debugging techniques.</li>\n<li>When a usermode process starts, its first executed instruction is NOT the executable's entry point. There's a decent amount of loader code executed in the context of the created process (initializing the default heap, setting up parts of the TEB and PEB, etc).</li>\n<li>Normally, an executable's entry point is not your <code>int main(int argc, char* argv[])</code>. The compiler has a wrapper function that is where the PE's entrypoint points to, and main is only called by it.</li>\n</ol>\n<p>I would suggest you read the <a href=\"https://msdn.microsoft.com/en-us/library/ms809762.aspx\" rel=\"nofollow noreferrer\">Peering Inside the PE</a>, as it describes those processes really in-depth.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Dec 28, 2016 at 23:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}