{
    "title": "Trying to reverse engineer C code that is 64bit assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/1949/trying-to-reverse-engineer-c-code-that-is-64bit-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the code I am looking at</p>\n<pre><code>0x0000000000401048 &lt;+70&gt;:   mov    0x401ba0(,%rax,4),%eax\n</code></pre>\n<p>This is an array of 15 integers. Just wondering how I can access indices 0 to 15 in gdb</p>\n<p>Thanks</p>\n</div>",
    "votes": "10",
    "answers": 3,
    "views": "1k",
    "tags": [
        "c",
        "assembly",
        "gdb"
    ],
    "user": null,
    "time": "Apr 28, 2013 at 3:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>GDB allows you to use C-style casts, so simply do this, if you know the address:</p>\n<pre><code>(gdb) print/x (int[15])(*0x401ba0)\n</code></pre>\n<p>An example output would be:</p>\n<pre><code>$1 = {0x5241c031, 0x41535341, 0x41554154, 0x55574156, 0x48e58948, 0x31f0e483, 0x31f631ff, 0xe8c931d2, 0xfffffb08, 0xc0314850, 0x580f0174, 0x7c00f883, 0xec8948c7, 0x415f415d, 0x415d415e}\n</code></pre>\n<p>If you have the address of your array in a register, you can also use the respective variable (<code>$eax</code> etc).</p>\n</div>",
            "votes": "13",
            "user": "0xC0000022L",
            "time": "Apr 28, 2013 at 15:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sandun dhammika",
                    "text": "<span class=\"comment-copy\">you are the guru.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>(gdb) dump binary memory dump.raw 0x401ba0 0x401bdc\n</code></pre>\n<p>dump memory into file <code>dump.raw</code> from address <code>0x401ba0</code> until address <code>0x401bdc</code></p>\n<p>Another option would be <a href=\"http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf\">examine</a>:</p>\n<pre><code>x/nfu &lt;address&gt;\nPrint memory.\nn: How many units to print (default 1).\nf: Format character (like „print“).\nu: Unit.\nUnit is one of:\nb: Byte,\nh: Half-word (two bytes)\nw: Word (four bytes)\ng: Giant word (eight bytes)).\n</code></pre>\n</div>",
            "votes": "8",
            "user": "0x90",
            "time": "Apr 28, 2013 at 4:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "dbrank0",
                    "text": "<span class=\"comment-copy\">that would make: x/15w 0x401ba0</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For reading and writing to the 15 elements in the array:</p>\n<pre><code>(gdb) set variable $A = (int*)0x401ba0\n(gdb) p $A[0] = 1\n...\n(gdb) p $A[14]\n</code></pre>\n<p>For examing their current value,</p>\n<pre><code>(gdb) x/15dw $A\n</code></pre>\n</div>",
            "votes": "4",
            "user": "scottt",
            "time": "Apr 28, 2013 at 21:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Under some circumstances <code>set write</code> (== <code>set write on</code>) may be needed.</span>",
                    "time": null
                }
            ]
        }
    ]
}