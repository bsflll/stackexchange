{
    "title": "Detecting protected processes and critical processes from windows driver",
    "link": "https://reverseengineering.stackexchange.com/questions/20932/detecting-protected-processes-and-critical-processes-from-windows-driver",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've got a driver that tamper user-space processes by sending APC calls upon process start using the call <code>PsSetCreateProcessNotifyRoutine</code>.</p>\n<p>I wish to avoid tampering with any process that is critical for the OS stability, since my APC also eventually decides to kill the process. </p>\n<p>So far I've used <code>PsIsProtectedProcess</code> and <code>PsIsProtectedProcessLight</code> in order to detect protected processes. </p>\n<p>However, it appears that there are some processes such as <code>smss.exe</code> and <code>crss.exe</code> and <code>wininit.exe</code> that are defined as critical processes and I also wish to avoid them. </p>\n<p>Perhaps anybody knows that difference between protected and critical process, and how can I detect critical process programmatically  from kernel-mode (maybe it has ad-hoc field in EPROCESS ? ) </p>\n<p>thanks,</p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "windbg",
        "process"
    ],
    "user": "Irad K",
    "time": "Mar 20, 2019 at 14:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems the correct term is <em>Critical System Service</em>. There are <a href=\"https://docs.microsoft.com/en-us/windows/desktop/rstmgr/critical-system-services\" rel=\"noreferrer\">API from userland</a> but I can't find anything for the kernel. So I took a quick look into the RstrtMgr.dll and it seems the list is actually hardcoded...</p>\n<p>For the processes:</p>\n<ul>\n<li>system32\\csrss.exe</li>\n<li>system32\\smss.exe</li>\n<li>system32\\lsass.exe</li>\n<li>system32\\wininit.exe</li>\n<li>system32\\logonui.exe</li>\n<li>system32\\services.exe</li>\n<li>system32\\winlogon.exe</li>\n</ul>\n<p>For the services (specific case for svchost.exe):</p>\n<ul>\n<li>BrokerInfrastructure</li>\n<li>DcomLaunch</li>\n<li>LSM</li>\n<li>Power</li>\n<li>RpcEptMapper</li>\n<li>RpcSs</li>\n<li>SamSs</li>\n</ul>\n<p>There is probably another way to achieve that. After all, Windows BSOD if one of these processes is killed.</p>\n<p>Edit: It seems <code>nt!EPROCESS::BreakOnTermination</code> is what you're looking for.\nThe <em>real</em> field is <code>nt!EPROCESS::Flags</code> and the mask 0x2000.\nIf this bit is set, <code>PspExitThread</code> will BSOD with <code>CRITICAL_PROCESS_DIED</code>.</p>\n</div>",
            "votes": "6",
            "user": "wisk",
            "time": "Mar 20, 2019 at 18:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}