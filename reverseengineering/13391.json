{
    "title": "Zte Reverse engineering config.bin file problem",
    "link": "https://reverseengineering.stackexchange.com/questions/13391/zte-reverse-engineering-config-bin-file-problem",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just got a Zte <code>ZXHN F660 GPON ONT Wireless</code> router with my optic fiber internet provided by my telecom provider.</p>\n<p>My first discovery was that the <code>eth</code> Lan ports are bricked wich\nmeans I can only use one Lan at time and there's a <code>telnet</code> default user and password i cannot remove or change - well i can do but only provisory: <br/> I was able to bypass the problem using telnet and busybox console but the fix is provisory unfortunately. Each time the router reboots the old config gets installed, wich is normal I think.</p>\n<p>I decided to investigate a bit more and made a config backup threw the webui wich gives me a <code>.bin</code> file. Using binwalk i saw that there is 3 data blocks compressed with <code>zlib</code>. I made a quick and dirty script in python to unpack them and concatenate them in a <code>XML</code> file wich provides all the router's setup.</p>\n<p><strong>I managed to modify and repack it, but here's the problem:</strong> the header contain some informations that make the config upgrade fail each time. With an hex editor I noticed that before each compressed <code>zlib</code> block there is the hex values of the pack inflated and deflated, so I was able to correct them. There's also in the header a <code>CRC32</code> of the concatenation of each <code>zlib</code> compressed packs without headers, so I was also able to correct it when I repack the new file. <br/> But next to it there's what I believe is an other <code>CRC32</code>, but I can't find out what that <code>CRC32</code> is about so any help is welcome to this point.</p>\n<p>I've downloaded the <code>httpd</code> and <code>cspd</code> files from my router and try to disassemble them using IDA, but the loops I find in gives me the seasick and it's beyond my actual skills so that would be great to get some help and explaination about how to repack the <code>xml</code> file into the <code>bin</code> file.</p>\n<p>Thanks for any help or advice.</p>\n<p>Here the first offsets of my dummy <code>config.bin</code> file:</p>\n<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n00000000  04 03 02 01 00 00 00 00 00 00 00 04 46 36 36 30  ............F660\n00000010  01 02 03 04 00 00 00 00 00 02 37 AB 00 00 36 79  ..........7«..6y\n00000020  00 01 00 00 97 10 5B C9 6E 6F 53 12 00 00 00 00  ....—.[ÉnoS.....\n00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n00000040  00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  ................\n00000050  00 00 16 B8 00 00 17 00 78 DA ED 3D 5B 77 DB 38  ...¸....xÚí=[wÛ8\n00000060  73 EF FD 15 69 DA 3E 75 D7 E6 4D F4 E5 7C DB 53  sïý.iÚ&gt;u×æMôå|ÛS\n00000070  99 94 1D 9D 95 14 46 94 AD AF FB E2 03 53 B0 CC  ™”..•.F”.¯ûâ.S°Ì\n00000080  13 1A 64 49 CA 97 FD F5 05 A8 1B 05 02 20 48 C9  ..dIÊ—ýõ.¨... HÉ\n00000090  B2 94 D2 49 6C 47 33 04 06 83 B9 01 1C 60 FE 61  ²”ÒIlG3..ƒ¹..`þa\n000000A0  5F FD D7 BF FC 63 F4 10 7C 41 E0 19 FE F1 D5 BE  _ý×¿ücô.|Aà.þñÕ¾\n000000B0  BA 02 09 FC FA 65 18 BE 5A E1 0C A5 7F 7C 55 BF  º..üúe.¾Zá.¥.|U¿\n000000C0  62 04 FC DF 2F 83 F0 8F AF 0A F9 8F DD 5F 20 77  b.üß/ƒð.¯.ù.Ý_ w\n000000D0  AF BB E8 31 FC FA E5 05 04 18 A4 E2 3F 9A A2 64  ¯»è1üúå...¤â?š¢d\n000000E0  FF 94 EC 67 DB 30 F0 67 F8 CB 50 8C 6B F2 F3 EB  ÿ”ìgÛ0ðgøËPŒkòóë\n000000F0  29 7E FC 14 37 46 7E E0 4E 37 BA 1E B7 07 76 BE  )~ü.7F~àN7º.·.v¾\n00000100  63 8D DF F1 9D 0F 5F 07 F8 B7 45 D7 DD 1B FB 64  c.ßñ.._.ø·E×Ý.ûd\n00000110  6C AB 59 EB 2B 1C D2 DC E8 3D 5A E2 18 05 A8 65  l«Yë+.ÒÜè=Zâ..¨e\n00000120  5B 20 F2 FC F4 7D 81 41 3D 3F 8A FD E9 14 C6 1D  [ òüô}.A=?Šýé.Æ.\n00000130  04 1E 02 B8 81 B2 18 C0 92 34 B5 9C 34 4D 48 9A  ...¸.².À’4µœ4MHš\n</code></pre>\n<p>Here a copy of a dummy <code>config.bin</code>, <code>cspd</code> and <code>httpd</code> files of my router:</p>\n<p><a href=\"http://s000.tinyupload.com/?file_id=28971449732434837128\" rel=\"noreferrer\">config.bin,cspd,httpd files</a></p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "unpacking",
        "packers"
    ],
    "user": "SebastienDuval",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The second CRC is the CRC of the header started from <code>0x10</code> to <code>0x28</code>. The following script checks the config file based on the <code>dbcCfgFileDecry</code> function, which verify and decompress the config file from offset <code>0x10</code>.</p>\n<pre><code>import sys\nimport binascii\nimport struct\nimport zlib\n\nif (len(sys.argv) &lt; 1):\n    print 'usage: check_config.py config_file'\n\ncf = open(sys.argv[1], 'rb')\nh = cf.read(0x4c)\n\n#--------------------\n# read the header\nif (h[0:4] != '\\x04\\x03\\x02\\x01'):\n    print 'Invalid magic'\n    sys.exit(-1)\n\nif (h[0x10:0x14] != '\\x01\\x02\\x03\\x04'):\n    print 'Invalid magic'\n    sys.exit(-1)\n\nh2 = h[0x10:]\nhcrc_calc = binascii.crc32(h2[0:0x18])&amp;0xffffffff\nhcrc_store = struct.unpack('!L', h2[0x18:0x1c])[0]\nprint 'calc: %x - stored: %x'%(hcrc_calc, hcrc_store)\nif (hcrc_calc != hcrc_store):\n    print 'Invalid header CRC'\n    sys.exit(-2)\n\nblock_buffer_size = struct.unpack('!L', h2[0x10:0x14])[0]\n# used to allocate memory for temp buffers\nprint 'block buffer size: %x'%(block_buffer_size)\n\n#--------------------\n# read the blocks\nfout = open('%s.xml'%(sys.argv[1]), 'wb')\ncumulate_crc = 0\nwhile (True):\n    bheader = cf.read(0x0c)\n    if (len(bheader) == 0):\n        break\n    block_size = struct.unpack('!L', bheader[0x04:0x08])[0]\n    print 'block size: %x'%(block_size)\n\n    # read the whole block to previously allocated buffer\n    # Possible heap based buffer overflow, because the size was not checked in\n    # the dbcCfgFileDecry function!\n    block = cf.read(block_size)\n    cumulate_crc = binascii.crc32(block, cumulate_crc)&amp;0xffffffff\n    decompressed = zlib.decompress(block)\n    fout.write(decompressed)\n\nstored_cumulate_crc = struct.unpack('!L', h2[0x14:0x18])[0]\nprint 'cumulate crc: calc: %x - stored: %x'%(cumulate_crc, stored_cumulate_crc)\nif (cumulate_crc != stored_cumulate_crc):\n    print 'Invalid cumulate CRC'\n    sys.exit(-3)\n\ncf.close()\nfout.close()\n</code></pre>\n<p>As a side note, the <code>dbcCfgFileDecry</code> function contains a heap-based buffer overflow vulnerability, because it did not check whether the current block will fit into the allocated buffer.</p>\n</div>",
            "votes": "6",
            "user": "ebux",
            "time": "Aug 30, 2016 at 9:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SebastienDuval",
                    "text": "<span class=\"comment-copy\">Thank you very much ebux ! That match perfectly, do you mind to explain me the process you went threw to find out so i can learn more. Thank you :)</span>",
                    "time": null
                }
            ]
        }
    ]
}