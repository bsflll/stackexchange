{
    "title": "create a string in ollydbg, x32dbg, immunity or similar",
    "link": "https://reverseengineering.stackexchange.com/questions/13749/create-a-string-in-ollydbg-x32dbg-immunity-or-similar",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found a code cave in an executable and want to call winapi functions.</p>\n<p>What do i have to write in the assembly window to create a string which can later be referenced?</p>\n<p>For learning i changed not used existing strings in the executable (with an hexeditor) and pushed their address on the stack. This works. But how can i create them by myself?</p>\n<p>(this is a crosspost from stackoverflow)</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "488",
    "tags": [
        "ollydbg",
        "debuggers"
    ],
    "user": "enthus1ast",
    "time": "Oct 18, 2016 at 11:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In most standalone assemblers you can use the <code>db</code> directive to put literal bytes or character strings into the program. However, I'm not sure if it will work in ollydbg since its assembler is mainly intended for assembling instructions, not data. I would suggest instead to use the hex dump window for that. (I <em>think</em> it can be used for editing text)</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 23, 2016 at 17:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}