{
    "title": "IDAPython get current module name in a debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/32030/idapython-get-current-module-name-in-a-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a script that catches say a value of 666 in the RDX register and pauses debugging. The problem is, that this value might be added to the register by other modules aside from the main application that I am debugging, for example by ntdll.dll, which is of course of no use to me.</p>\n<p>How do I get the name of the current module that debugger is in at any given moment so I can ignore if the RDX is changed at that module?\nSomething like this:</p>\n<pre><code>idaapi.step_into()\nidaapi.wait_for_next_event(2, -1)\ncounter=GetRegValue('RDX')\nif counter==666 and (GetCurrentModuleName()!='ntdll.dll'):\n        break\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "147",
    "tags": [
        "idapython"
    ],
    "user": "MartinRøde",
    "time": "Jul 4, 2023 at 13:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.get_module_info\" rel=\"nofollow noreferrer\"><code>get_module_info</code></a> seems to be what you want, it returns <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_idd.html#ida_idd.modinfo_t\" rel=\"nofollow noreferrer\"><code>modinfo_t</code></a> structure with full module name.</p>\n<p>An untested sketch of example usage would be:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import idaapi, ida_idd, ida_dbg\n\nidaapi.step_into()\nidaapi.wait_for_next_event(2, -1)\n\nea = ida_dbg.get_ip_val()\nmodinfo = ida_idd.modinfo_t()\nida_dbg.get_module_info(ea, modinfo)\n\ncounter = GetRegValue('RDX')\nif counter == 666 and modinfo.name != 'ntdll.dll':\n    break\n\n</code></pre>\n</div>",
            "votes": "3",
            "user": "mimak",
            "time": "Jul 7, 2023 at 15:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MartinRøde",
                    "text": "<span class=\"comment-copy\">Cheers, mate! That did it. Although I have to note that modinfo.name contains full path to the file, so checking it against just the filename is going to fail, you need to extract the filename from it first. Also I am not sure if this line does anything at all: ida_dbg.get_module_info(ea, modinfo)</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">@MartinRøde IDAPython is just a wrapper for IDC and <code>get_module_info</code> populates <code>modinfo</code> pointer, i linked you the docs for it</span>",
                    "time": null
                },
                {
                    "user": "MartinRøde",
                    "text": "<span class=\"comment-copy\">Aye, cheers, now that makes sense. I checked the docs, yeah, but in all honesty, for someone who is not proficient at programming, how is that a meaningful documentation? How does one conclude from that snippet, that it populates the modinfo pointer? <code>def get_module_info (*args) ‑&gt; bool get_module_info(ea, modinfo) -&gt; bool ea: ea_t modinfo: modinfo_t *</code></span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">yeah hexrays' docs are infamous for incompleteness, but that's all we get</span>",
                    "time": null
                }
            ]
        }
    ]
}