{
    "title": "POC for appleScript injection method",
    "link": "https://reverseengineering.stackexchange.com/questions/16725/poc-for-applescript-injection-method",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to make a POC of code injection using applescript injection technic which is used in GitHub project <code>EasySIMBL</code>.</p>\n<p>The method also described <a href=\"https://papers.put.as/papers/macosx/2014/ShakaCon6-FuckYouHackingTeam.pdf\" rel=\"nofollow noreferrer\">here</a>.\n(It's basically a huge article, just search for AppleScript at bundle injection, and you’ll get there)</p>\n<p>The steps I've done : </p>\n<ol>\n<li>I made a bundle suffix <code>osax</code> file that creates a file at <code>/tmp/test.txt</code>. The bundle contains the following items:</li>\n</ol>\n<p>1.1 Info.plist:</p>\n<pre><code>&lt;?xml version=“1.0” encoding=“UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd“&gt;\n&lt;plist version=“1.0”&gt;\n&lt;dict&gt;\n    &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;\n    &lt;string&gt;English&lt;/string&gt;\n    &lt;key&gt;CFBundleExecutable&lt;/key&gt;\n    &lt;string&gt;OsaxLoaded&lt;/string&gt;\n    &lt;key&gt;CFBundleIdentifier&lt;/key&gt;\n    &lt;string&gt;com.yourcompany.OsaxLoaded&lt;/string&gt;\n    &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;\n    &lt;string&gt;6.0&lt;/string&gt;\n    &lt;key&gt;CFBundleName&lt;/key&gt;\n    &lt;string&gt;OsaxLoaded&lt;/string&gt;\n    &lt;key&gt;CFBundlePackageType&lt;/key&gt;\n    &lt;string&gt;osax&lt;/string&gt;\n    &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;\n    &lt;string&gt;1.0&lt;/string&gt;\n    &lt;key&gt;CFBundleSignature&lt;/key&gt;\n    &lt;string&gt;ascr&lt;/string&gt;\n    &lt;key&gt;CFBundleVersion&lt;/key&gt;\n    &lt;string&gt;1&lt;/string&gt;\n    &lt;key&gt;OSAScriptingDefinition&lt;/key&gt;\n    &lt;string&gt;app.sdef&lt;/string&gt;\n    &lt;key&gt;OSAXHandlers&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Events&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;OPNeopen&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;Context&lt;/key&gt;\n                &lt;string&gt;Process&lt;/string&gt;\n                &lt;key&gt;Handler&lt;/key&gt;\n                &lt;string&gt;InjectEventHandler&lt;/string&gt;\n                &lt;key&gt;ThreadSafe&lt;/key&gt;\n                &lt;true/&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>\n<p>1.2 The code to be injected (<code>osax</code> bundle):</p>\n<pre><code>//  main.m\n//  OsaxLoaded\n//\n//\n\n#import &lt;Foundation/Foundation.h&gt;\n\n__attribute__((visibility(“default”)))\nOSErr InjectEventHandler(const AppleEvent *ev, AppleEvent *reply, long refcon)\n{\n    OSErr resultCode = noErr;\n    [[NSFileManager defaultManager] createFileAtPath:@“/tmp/test.txt” contents:nil attributes:nil];\n    return resultCode;\n}\n</code></pre>\n<p>Here's the structure of my <code>osax</code> bundle :</p>\n<pre><code>sh-3.2# ls /Library/ScriptingAdditions/OsaxLoaded.osax/Contents/\nInfo.plist    MacOS        _CodeSignature\n</code></pre>\n<p>Now I put the <code>osax</code> bundle at /Library/ScriptingAdditions/</p>\n<p>Then I wrote a templated Cocoa App (injection target) that does nothing (didn't add any additional code) </p>\n<p>In addition I wrote a Mach-o that should make the app I wrote previously to load the script addition (osax bundle).\nAfter that it sends the event that corresponds to the event in info.plist and should execute the handler I wrote in the osax bundle Mach-o.</p>\n<p>The injector code:</p>\n<pre><code>//  main.m\n//  OsaxInjector\n//\n//\n\n#import &lt;Foundation/Foundation.h&gt;\n#import &lt;Carbon/Carbon.h&gt;\n#import &lt;ScriptingBridge/ScriptingBridge.h&gt;\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        if (argc != 2)\n        {\n            printf(“USAGE: injector pid\\n”);\n            return 1;\n        }\n        TEST *test = [[TEST alloc] init];\n        pid_t pid = atoi(argv[1]);\n        SBApplication* sbApp = [SBApplication applicationWithProcessIdentifier:pid];\n        [sbApp setSendMode:kAENoReply | kAENeverInteract | kAEDontRecord];\n        [sbApp sendEvent:kASAppleScriptSuite id:kGetAEUT parameters:0];\n\n        // Inject!\n        [sbApp setSendMode:kAENoReply | kAENeverInteract | kAEDontRecord];\n        id injectReply = [sbApp sendEvent:‘OPNe’ id:‘open’ parameters:0];\n        if (injectReply != nil) {\n            NSLog(@“unexpected injectReply: %@“, injectReply);\n        }\n        [[NSProcessInfo processInfo]disableSuddenTermination];\n    }\n    return 0;\n}\n</code></pre>\n<p>When tested using the pid provided by <code>lsappinfo info “ToInjectApp”</code>, it seems like the code wasn't injected and <code>/tmp/test.txt</code> wasn't created.</p>\n<p>any idea what I am doing wrong?</p>\n<p>OS Version: Sierra</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "317",
    "tags": [
        "osx",
        "injection"
    ],
    "user": "Zohar81",
    "time": "Nov 6, 2017 at 16:10",
    "comments": [],
    "answers_data": []
}