{
    "title": "Load PDB for MemoryModule-loaded DLL in x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/31861/load-pdb-for-memorymodule-loaded-dll-in-x64dbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to debug a DLL, which I have a PDB file for.</p>\n<p>The debug target is a program, that loads the DLL using MemoryModule library from <a href=\"https://github.com/fancycode/MemoryModule\" rel=\"nofollow noreferrer\">Github</a>.</p>\n<p>The loaded module isn't listed as a module in x64dbg, since it has been loaded with <code>MemoryLoadLibraryEx</code> function, but module handle is still valid and it's all been successfully loaded and initialized.</p>\n<p>I've tried <code>symload</code> x64dbg command with address as the argument pointing to the beginning of the memory-loaded module <code>MZ...</code>, tried pointing to <code>PE...</code> signature as well, but no success.</p>\n<p>How do I tell x64dbg that memory at an address is a valid module, so that I could load a PDB for that module?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "367",
    "tags": [
        "dll",
        "x64dbg",
        "dynamic-linking",
        "debugging-symbols",
        "pdb"
    ],
    "user": "Ri0ee",
    "time": "May 12, 2023 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>x64dbg has the <a href=\"https://help.x64dbg.com/en/latest/commands/analysis/virtualmod.html\" rel=\"nofollow noreferrer\">virtualmod</a> command, which (in theory) can be used to detect modules loaded from memory, rather than via <code>LoadLibrary*</code> APIs:</p>\n<blockquote>\n<p>virtualmod<br/>\n<br/>\nTell the debugger to treat a memory range as a virtual module.<br/>\n<br/>\nArguments: <br/>\n<code>arg1</code> the user-supplied module name.<br/>\n<code>arg2</code> the base of the memory range.<br/>\n<code>[arg3]</code> the size of the memory range.</p>\n</blockquote>\n<p>However, this  command seems to be broken at the time of writing this answer. I've experimented a little bit and managed to make it functional, see this <a href=\"https://github.com/ynwarcs/x64dbg/commit/aa0a5cd82cdb1998af2f9f020fefd86db368f2b4\" rel=\"nofollow noreferrer\">commit</a> in a forked repository for reference. This will allow you to see the module in x64dbg, as well as its symbols, exports, imports etc. For a fully native experience, though, a fix is needed in MemoryModule as well - see this <a href=\"https://github.com/ynwarcs/MemoryModule/commit/10250ad4b7ee464579dfb13605427bad1626cbd9\" rel=\"nofollow noreferrer\">commit</a> in a forked repository for reference.</p>\n<p>To use it, execute the following in x64dbg:</p>\n<pre><code>virtualmod some_module_name.dll, 0xsome_base_address\n</code></pre>\n<p>If you don't mind building your own x64dbg and MemoryModule and applying these fixes, this should work out-of-the-box (no promises though). I've also opened <a href=\"https://github.com/x64dbg/x64dbg/issues/3094\" rel=\"nofollow noreferrer\">an issue</a> in x64dbg to discuss the state of <code>virtualmod</code> and whether it can be fixed in the main branch as well.</p>\n</div>",
            "votes": "3",
            "user": "ynwarcs",
            "time": "May 15, 2023 at 11:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}