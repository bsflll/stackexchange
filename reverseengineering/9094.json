{
    "title": "Offset calculation for branch instruction in ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/9094/offset-calculation-for-branch-instruction-in-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As the title says, how to calculate offsets for branch instructions?\nFor example i have following assembly code,</p>\n<pre><code>0x60ECE    B loc_60EE6\n;\n;\n;\n0x60EE6    LDR.W R2, #0x123\n</code></pre>\n<p>Hex code for location <code>0x60ECE</code> is <code>0A E0</code>. i want to know how it is calculated. According to <a href=\"https://stackoverflow.com/questions/6744661/understanding-arm-assembler-branch-offset-calculation\">https://stackoverflow.com/questions/6744661/understanding-arm-assembler-branch-offset-calculation</a> , offset should be <code>04</code> instead of <code>0A</code>.</p>\n<p>I'm working on android binary.</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "11k",
    "tags": [
        "ida",
        "android",
        "arm",
        "offset"
    ],
    "user": "user2578525",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The instruction format is in little-endian, so bytes <code>0A E0</code> gets parsed as machine code <code>0xE00A</code>, or <code>1110000000001010b</code> in binary.</p>\n<p>According to <a href=\"https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf\" rel=\"noreferrer\">the documentation for the THUMB Instruction Set</a>, the first 5 bits (<code>11100b</code>) decode to an <strong>unconditional branch</strong> opcode, and the last 11 bits (<code>00000001010b</code>) decode to <strong>Offset11</strong>:</p>\n<p><img alt=\"Unconditional branch\" src=\"https://i.sstatic.net/2acj0.png\"/></p>\n<p>As per the documentation above, the destination address is calculated as \"PC relative +/- Offset11 &lt;&lt; 1\" plus 4 for the prefetch operation.</p>\n<p>If we do the math, we see that everything works out:</p>\n<pre><code>   0x60ECE + (00000001010b &lt;&lt; 1) + 0x4\n== 0x60ECE +       10100b        + 0x4\n== 0x60ECE +        0x14         + 0x4\n== 0x60EE6\n</code></pre>\n</div>",
            "votes": "5",
            "user": "Jason Geffner",
            "time": "Jun 8, 2015 at 13:52",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You're missing the fact that you're working in THUMB mode, where you have two bytes per instruction (for most instructions at least), and that link describes ARM mode, where every instruction has 4 bytes.</p>\n<p>(How do i know you're in THUMB mode? Apart from your last question, your <code>0x60ECE B loc_60EE6</code> isn't 4-byte aligned, so it must be THUMB).</p>\n<p>If you add 4 bytes to the instruction at <code>loc_60ECE</code>, you get <code>0x60ED2</code>. Subtract this from <code>60EE6</code> to get <code>14</code>, or 20 decimal. Divide by 2 (2 byte instructions in THUMB mode) to get <code>10</code> decimal, or <code>0A</code> hex.</p>\n<p>As calculating offsets can be hard and is error-prone, i let the gnu arm assembler handle it for me.  First write an assembly file, like this (named q.s, choose any name you want):</p>\n<pre><code>.thumb\n.arch armv7a\n.syntax unified\n.org 0x60ECE\n    B codecave\noriginal:\n.org 0x60EE6\ncodecave:\nmovw R2, #0x123\nB original\n</code></pre>\n<p>then assemble it and check the result:</p>\n<pre><code>arm-linux-gnueabi-as q.s\narm-linux-gnueabi-objdump -s a.out | grep -v \"00000000 00000000 00000000 00000000\"\n\nContents of section .text:\n 60ec0 00000000 00000000 00000000 00000ae0  ................\n 60ee0 00000000 000040f2 2312f1e7           ......@.#...    \n</code></pre>\n<p>You see your <code>0ae0</code> at <code>60ece</code>, and <code>40f22312f1e7</code> at <code>60ee6</code>. You can patch this in IDA directly, or use the <a href=\"https://thesprawl.org/projects/ida-patcher/\" rel=\"nofollow\">idapatcher plugin</a> to copy/paste the hex. I found this to be much easier than crafting the patched bytes manually.</p>\n</div>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Jun 8, 2015 at 13:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2578525",
                    "text": "<span class=\"comment-copy\">Thank you sir for pointing out this trick. It made everything a lot easier for me. Finally i was able to create codecave.</span>",
                    "time": null
                }
            ]
        }
    ]
}