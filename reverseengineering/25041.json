{
    "title": "Custom nanddump and nandwrite tools",
    "link": "https://reverseengineering.stackexchange.com/questions/25041/custom-nanddump-and-nandwrite-tools",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer a router's firmware. The device has a NAND chip, and has a cripled version of BusyBox v1.14.1. <code>nanddump</code> command exists but with intresting parameters, as I wasn't able to find any info on Google. Also <code>nandwrite</code> command doesn't exist, instead they wrote a different tool called <code>psi</code> to write to the chip. Here are the outputs of their usage with compare to the original counterparts.</p>\n<pre><code>$ nanddump\nUsage: nanddump mtdX [noswap || swap] [nospare || spare] sector_count\n        sector_count can be provided as \"0\" which means the whole partition\n</code></pre>\n<p>So, what are these swap and spare options for? When I try to dump with <code>swap</code>or <code>noswap</code> I got the same file when I use the command <code>cat /dev/mtd* &gt; mtd*.bin</code>. However using <code>spare</code> parameter gives a slightly bigger file. Here is what I got from full fledged busybox</p>\n<pre><code>$ nanddump\nBusyBox v1.21.1 (2013-07-08 10:56:01 CDT) multi-call binary.\n\nUsage: nanddump [-o] [-b] [-s ADDR] [-f FILE] MTD_DEVICE\n\nDump the specified MTD device\n\n        -o      Dump oob data\n        -b      Omit bad block from the dump\n        -s ADDR Start address\n        -l LEN  Length\n        -f FILE Dump to file ('-' for stdout)\n</code></pre>\n<p>And for the other tool, <code>psi</code></p>\n<pre><code>$ psi\nusage: psi -o &lt;command&gt; -t &lt;configtype&gt; -f &lt;filename|env.var.name&gt; -s &lt;flashsize&gt; -r &lt;rebootflag&gt;\nsupported commands: &lt;read&gt; &lt;write&gt; &lt;erase&gt;\nsupported config types: &lt;asd&gt; &lt;cfg&gt; &lt;env&gt; &lt;flash&gt; &lt;firmware&gt;\nsupported reboot flags: &lt;yes&gt; &lt;no&gt;\nNote: -s parameter is for flash dump/undump only\n</code></pre>\n<p>It seems like this tool reads and writes at the same time. Well this is hard to figure out as I wasn't able to use it to read mtd partitions, and it doesn't let firmware partition to be read. It only writes to that partition. Here is the <code>nandwrite</code> command from busybox.</p>\n<pre><code>$ nandwrite\nBusyBox v1.21.1 (2013-07-08 10:56:01 CDT) multi-call binary.\n\nUsage: nandwrite [-p] [-s ADDR] MTD_DEVICE [FILE]\n\nWrite to the specified MTD device\n\n        -p      Pad to page size\n        -s ADDR Start address\n</code></pre>\n<p>So I believe <code>flashsize</code> from <code>psi</code>command has something to do with these two parameters. \nAlso here is the list of <code>mtd</code></p>\n<pre><code>$ cat /proc/mtd\ndev:    size   erasesize  name\nmtd0: 01000000 00004000 \"RootFS\"\nmtd1: 08000000 00020000 \"FlashAll\"\nmtd2: 00020000 00020000 \"Bootloader\"\nmtd3: 00220000 00020000 \"BootloaderConfig\"\nmtd4: 00220000 00020000 \"Config\"\nmtd5: 00220000 00020000 \"ASD\"\nmtd6: 02200000 00020000 \"Kernel\"\nmtd7: 02200000 00020000 \"KernelBackup\"\nmtd8: 02e60000 00020000 \"disk\"\nmtd9: 00220000 00020000 \"edr\"\nmtd10: 00500000 00020000 \"bbt\"\n</code></pre>\n<p>Custom <code>nanddump</code> throws an error while reading <code>RootFS</code>. These are all I got for now.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "firmware",
        "dumping",
        "memory-dump"
    ],
    "user": "ekardon",
    "time": "May 16, 2020 at 23:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Donâ€™t know what swap is about, but <em>spare</em> area, or OOB area is an additional area at the end of each page storing metadata such as:</p>\n<ul>\n<li>bad block markers</li>\n<li>ECC (error checking and correcting) code</li>\n<li>custom data which may be used by the system </li>\n</ul>\n<p>It seems the <code>spare</code> option enables dumping it which is why the dump is slightly bigger. </p>\n<p>For more info about NAND flash organization see <a href=\"https://www2.lauterbach.com/pdf/nandflash.pdf\" rel=\"nofollow noreferrer\">this nice document</a> from Lauterbach</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 17, 2020 at 11:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ekardon",
                    "text": "<span class=\"comment-copy\">thank you for your response. i checked that document it is indeed a nice one. as you said i confirmed that <code>spare</code> option is for extra data from the chips <a href=\"https://www.macronix.com/Lists/Datasheet/Attachments/6851/MX30LF1G08AA,%203V,%201Gb,%20v1.5.pdf\" rel=\"nofollow noreferrer\">datasheet</a>. Also i have realized that swap changes endiannes of the dumps. I have bootloader dump which has \"cfe\" written in normal one and when swapped it becomes \"efc\". I also was able to dump using <code>psi</code> command. It's dumping as multiples of 64KB data. I believe that is page size, but I am not sure. <code>psi</code> command has no ecc option</span>",
                    "time": null
                }
            ]
        }
    ]
}