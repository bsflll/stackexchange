{
    "title": "How to figure out which imported function(s) in a virus determine its behaviour?",
    "link": "https://reverseengineering.stackexchange.com/questions/5949/how-to-figure-out-which-imported-functions-in-a-virus-determine-its-behaviour",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to know how to find the functions which is interesting in malware tools.\nFor example, I have a sample of unknown virus (this sample is <code>lab01-01.exe</code> in the book practical malware analysis <code>lab1-01.dll</code>). It is not packed.</p>\n<p>I am supposed to find out what does this malware by knowing the imported DLLs and the functions it uses. Here are the imported functions in the executable file <code>lab01-01.exe</code>:</p>\n<pre><code>KERNEL32.dll :\nCloseHandle\nUnmapViewOfFile\nIsBadReadPtr\nMapViewOfFile\nCreateFileMappingA\nCreateFileA\nFindClose\nFindNextFileA\nFindFirstFileA\nCopyFileA\n</code></pre>\n<p>And from <code>MSVCRT.dll</code>:</p>\n<pre><code>_getmainards\n_p_initenv\n_p_commode\n_p_fmode\n_set_apps_typr\n_setusermatherr\n_adjust_fdiv\n_controlfp\n_except_handler3\n_exit\n_initterm\n_stricmp\n_XcptFilter\nexit\nmalloc\n</code></pre>\n<p>But, I didn't find any function imported from <code>lab01-01.dll</code>. </p>\n<p>I also want to know why, although the book mentioned that both the executable file and DLL are related (it should be imported).</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "6k",
    "tags": [
        "windows",
        "malware",
        "static-analysis",
        "dll",
        "pe"
    ],
    "user": "Ahmed",
    "time": "Jul 28, 2014 at 7:18",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">You could use Apimonitor or Sysinternal's tools.</span>",
            "time": null
        },
        {
            "user": "user45891",
            "text": "<span class=\"comment-copy\">The msvcrt imports are mostly normal, actually I think they are used by the CRT. The kernel32 functions on the other hand search for files and then manipulate them. If you already know that it is malware that points to a file infecting virus.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Dlls can not only be imported statically but also dynamically. For the dynamic case, it uses <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85).aspx\" rel=\"nofollow\"><code>LoadLibrary</code></a> to load the dll, and <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx\" rel=\"nofollow\"><code>GetProcAddress</code></a> to resolve the address of the function it needs. </p>\n<p>If the dlls are imported statically, then a simple dependency walking will give you information about each dll its imports and also the function within each of them it uses. This information is actually present in the PE header which a tool like <em>dependency walker</em> shows you.</p>\n<p>If the dll is imported dynamically, then walking through the imports will not give you any idea about the dlls and functions it uses. In such a case, debug the application (if possible). Set a breakpoint on <code>kernel32.LoadLibraryA</code> / <code>kernel32.LoadLibraryW</code> or even the undocumented <code>ntdll.LdrLoadDll</code> and run the app. When the breakpoint is hit you immediately know which dll it is trying to import. Similarly setting a breakpoint on <code>GetProcAddress</code> will reveal the function the application wants to use.</p>\n<p>I am talking about the simplest case here. You may encounter malware which bypasses the LoadLibrary mechanism totally, by implementing its own PE loader. See <em><a href=\"http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\" rel=\"nofollow\">this</a></em> page for such an example. Similarly <code>GetProcAddress</code> can be bypassed too, by manually parsing the import tables.</p>\n<p><a href=\"http://books.google.co.uk/books?id=FQC8EPYy834C&amp;lpg=PP1&amp;dq=practical%20malware%20analysis&amp;pg=PA453#v=twopage&amp;q&amp;f=true\" rel=\"nofollow\">This chapter</a> from the book <em>Practical Malware Analysis</em>  gives you a list of some important Windows API functions which can be used to get some insight into the workings of a malware.</p>\n</div>",
            "votes": "2",
            "user": "0xec",
            "time": "Jul 28, 2014 at 7:59",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Extreme Coders has provided a good answer about the IAT (Import Address Table).</p>\n<p>This question is so abroad I was originally not going to answer but I'll try quickly summarise the sort of tools and things you'll want to look for.</p>\n<p>Firstly, let me tell you what any imported or exported function can't really say it's used primary malware. For example, DeleteFile can be used to delete important files is considered as malware but the actual API itself can be used for common non-related malware operations.</p>\n<p>If you want to see what APIs are actually been executed you'll want to use something like:\n<a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow\">http://www.rohitab.com/apimonitor</a> this will give you much better graphical presentation and lists all the function parameters for that known API too. So more rich data to work with. As looking at long list is too overwhelming.</p>\n<p>After you have found the APIs which look suspicious then you can get into a debugger and start investigating the usage of the API which comes a complexed field. You'll have to know how to software is expected to work for example.</p>\n<p>Let's say you have a text editor just a simple notepad program you have downloaded.\nYou'll just review APIs for unusual activity such as:</p>\n<ol>\n<li>If you see network actvity on a simple text editor - Why does it need networking? Is it malicious related or just an auto patcher for self updating?</li>\n<li>If you see process modification external or internal - Why is it doing this? Review the related APIs to memory modifying <code>WriteProcessMemory</code> or lower level API is <code>NtWriteVirtualMemory</code>.</li>\n</ol>\n<p>Though really you can't rely on just checking APIs as you can use <code>syscall</code> directly which would bypass any listed APIs.</p>\n<p>To determine malware you'll want to use things such as:\n<a href=\"http://camas.comodo.com/\" rel=\"nofollow\">http://camas.comodo.com/</a></p>\n<p>You'll want to get yourself varies tools such as:</p>\n<ol>\n<li>Virtual Machine (VMWare, Virtual PC or something similar). As you don't want to get your host machine infected with malware, do you? Though, do note that complexed malware can break out of virtual machines!</li>\n<li>Snapshot software to compare before and after execution of file system and registry. There is a good one developed by Microsoft. I'll dig it up for you when I'm at home. So, take snapshot before you run the application and after.</li>\n<li>Get yourself a debugger such as IDA PRO (ideally but very expensive) otherwise OllyDbg is my next favourite debugger.</li>\n</ol>\n<p>Maybe I am getting off-topic? Anyway, I hope this information was useful. If so, I'll expand my answer.</p>\n</div>",
            "votes": "2",
            "user": "Paul",
            "time": "Jul 28, 2014 at 9:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While others have already provided some answers, I would like to add some additional points.</p>\n<p>You could code a pintool (DBI) which logs all the API calls. You could add some filters in your pintool to reduce the amount of API calls you log. Using a pintool has an advantage since anti debugging techniques used by malwares would not have an effect on it. Of course, we are assuming that the malware is not trying to protect itself from DBI frameworks. However, if you set breakpoints on LoadLibrary and GetProcAddress to see which libraries are loaded dynamically and which function addresses are resolved, you could be effected by anti debugging techniques used by the malware. Before you hit the breakpoint, the malware would have already discovered that it is being debugged and alter the program flow.</p>\n<p>I would suggest you not to conclude the functionality of a  malware only by looking at the API names imported from different modules. A sequence of API calls can sometimes indicate malicious activity. For instance,</p>\n<pre><code>CreateProcessW\nVirtualAllocEx\nWriteProcessMemory\nWriteProcessMemory\nGetThreadContext\nSetThreadContext\nResumeThread\n</code></pre>\n<p>Now, you could see these API names imported from kernel32.dll when you open the binary in a software like CFF explorer, however to conclude the usage of these APIs, an API trace would help. In this case, it is a standard method used by several binaries to perform code injection into the address space of another process.</p>\n</div>",
            "votes": "0",
            "user": "c0d3inj3cT",
            "time": "Jul 28, 2014 at 15:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}