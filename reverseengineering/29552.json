{
    "title": "What is happening with this *param_1?",
    "link": "https://reverseengineering.stackexchange.com/questions/29552/what-is-happening-with-this-param-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a bit of a starter, so bear with me as I can't find the answer through Google (a common thing in Ghidra work I noticed so far).</p>\n<p>I have a function that seems to read like it is a Constructor.\nBut I am having trouble what it is doing, mainly because I think I don't understand the C language that well.</p>\n<p>The code I am confused about is this:</p>\n<p>The code as C:</p>\n<p><a href=\"https://i.sstatic.net/FCkwV.png\" rel=\"nofollow noreferrer\"><img alt=\"The code as C\" src=\"https://i.sstatic.net/FCkwV.png\"/></a></p>\n<p>The code as ASM:</p>\n<p><a href=\"https://i.sstatic.net/9m6DR.png\" rel=\"nofollow noreferrer\"><img alt=\"The code as ASM\" src=\"https://i.sstatic.net/9m6DR.png\"/></a></p>\n<p>Sorry for using screenshots, I couldn't get the ASM to reasonably copy and paste into here.</p>\n<p><code>*param_1</code>, is set to a specific address. What this * in front of the variable means, I can't really find besides people saying \"You shouldn't do that in C code!\"</p>\n<p>What it then starts doing is nulling out some variables in an array or struct that <code>param_1</code> apparently is now (going by the ASM, <code>param_1 == ECX</code> and so probably <code>_this_</code>?) the rest seems irrelevant for now.</p>\n<p>What is at <code>0x497e68</code>? It is an address, that then points towards another bit of code at <code>0x438170</code>. And while this <code>0x497e68</code> address is references 4 times, all of them do so in a similar manner, and thus I never see a direct \"CALL\" to this indirect method. The method itself is simply calling _free on ECX. It's not special.</p>\n<p>So what is going on here? Is there a reasonable explanation as to why this is happening? And what should I actually be reading here?\nAnd if so, is there then a way I can convince Ghidra to present this in a more sensible way?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "851",
    "tags": [
        "x86",
        "c",
        "ghidra",
        "local-variables"
    ],
    "user": "Smileynator",
    "time": "Nov 14, 2021 at 8:06",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">it is like int bar = 5: . int* myintarr [4]={ &amp;bar,null,null,null};</span>",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "<span class=\"comment-copy\">You are probably looking at code that was originally <code>C++</code> rather than <code>C</code>. <code>0x497e68</code> is the address of the virtual function table or vtable. This is an array of function pointers. <code>*param_1</code> is the same as <code>param_1[0]</code> and is set of the address of the vtable.</span>",
            "time": null
        }
    ],
    "answers_data": []
}