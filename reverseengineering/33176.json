{
    "title": "Help with FISTP and FILD interpretation",
    "link": "https://reverseengineering.stackexchange.com/questions/33176/help-with-fistp-and-fild-interpretation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need some help with understanding what is being actualy done in those two assembly lines:</p>\n<p>fistp   qword ptr [esp+10h]\nss:0023:0013be80=0000000000001cf8</p>\n<p>fild    qword ptr [esp+10h]\nss:0023:0013be80=0000000000002c36</p>\n<p>What is the underlying operetion that changes 1cf8 to 2c36</p>\n<p>Thanks in adv</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "62",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Uddie",
    "time": "Aug 22, 2024 at 22:12",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">Intel's floating point instructions are based on a stack. <code>fist</code> stores a 16-32-64-bit floating point number (IEEE) to the operand address, whereas <code>fild</code> loads from an address into the stack. The <code>p</code> suffix, is the variation of <code>fist</code> that pops the first value, <code>ST(0)</code>, from said stack. The values you're seeing are not the underlying operand changing the address, but rather that before <code>fistp</code> is run, the value is 0x1cf8. After executing <code>fistp</code>, however, <code>ST(0)</code> is popped and written to <code>[esp+0x10]</code> as 0x2c36. When execution gets to <code>fild</code>, the previous value of <code>ST(0)</code> was already written.</span>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">...that is assuming that there's no other instructions tampering with <code>[esp+0x10]</code> in between the two instructions you listed. (Related question: <a href=\"https://reverseengineering.stackexchange.com/questions/20559/what-is-this-assembly-code-fld-qword-ptr-code-here-doing-also-how-do-i-store\" title=\"what is this assembly code fld qword ptr code here doing also how do i store\">reverseengineering.stackexchange.com/questions/20559/…</a>, link for answer is archived at <a href=\"https://web.archive.org/web/20071006182549/http://www.ray.masmcode.com/tutorial/index.html\" rel=\"nofollow noreferrer\">web.archive.org/web/20071006182549/http://www.ray.masmcode.com/…</a>)</span>",
            "time": null
        },
        {
            "user": "Uddie",
            "text": "<span class=\"comment-copy\">First of all, sorry for late reply. Yes, you are right, it all seems clear for me now. Thank you for explanation.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html\" rel=\"nofollow noreferrer\">download software developer manual volume 2 for intel </a></p>\n<p>volume 2 is instruction set reference</p>\n<p><a href=\"https://www.felixcloutier.com/x86/fist:fistp#tbl-3-27\" rel=\"nofollow noreferrer\">or as a second choice use online references</a></p>\n<p>search fistp or any other instruction and read for better understanding</p>\n<p><a href=\"https://i.sstatic.net/3EOkIRlD.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3EOkIRlD.png\"/></a></p>\n<p>basically FISTP takes what is in st[0]  converts it to a signed integer and stores it in destination and pops the st[0] (empties st[0])</p>\n<p>suppose st[0] contains a valid float like 486.87 (using 32 bit ollydbg here)\n<a href=\"https://i.sstatic.net/YFTSCRMx.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/YFTSCRMx.png\"/></a></p>\n<p>and your instruction pointer contains  fistp qword ptr [esp+10]\n<a href=\"https://i.sstatic.net/YjnLlEWx.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/YjnLlEWx.png\"/></a></p>\n<p>on executing this instruction\nesp+10 will hold 487  (486.87 rounded to 487 and positive signed)\nprior to execution\n<a href=\"https://i.sstatic.net/fVlkIg6t.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/fVlkIg6t.png\"/></a></p>\n<p>post execution\n<a href=\"https://i.sstatic.net/3GP9Xhfl.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3GP9Xhfl.png\"/></a></p>\n<p>an the stack has been popped</p>\n<p><a href=\"https://i.sstatic.net/OuH3De18.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/OuH3De18.png\"/></a></p>\n<p>hope you will be able to follow this for FILD</p>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 23, 2024 at 19:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uddie",
                    "text": "<span class=\"comment-copy\">So sorry for late reply. I've got the procedure. I can manage on my own now. Thanks a lot!</span>",
                    "time": null
                }
            ]
        }
    ]
}