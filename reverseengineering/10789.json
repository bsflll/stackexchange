{
    "title": "Without push instructions [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/10789/without-push-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has answers here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/6337/x86-64-calling-convention\">x86_64 Calling convention</a>\n<span class=\"question-originals-answer-count\">\n                                (2 answers)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2015-09-07 10:41:57Z\">9 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>If I pass an argument to a function, it should be translated in assembly language into <code>push something</code>. I coded the following in C:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint sum(int a, int b,int c)\n{\n    int total;\n    total = a + b + c;\n    printf (\"I will return now\");\n    return(total);\n}\n\nint media(int a, int b,int c)\n{\n    int total;\n    total = (a + b + c)/3;\n    printf (\"\\nI will return now\\n\");\n    return (total);\n}\n\nint main ()\n{\n    int num1,num2,num3;\n    char keypress[1];\n\n    num1 = 5;\n    num2 = 10;\n    num3 = 15;\n    printf (\"\\nCalling sum function\\n\");\n    sum(num1,num2,num3);\n    printf (\"\\nWaiting a keypress to call media function\\n\");\n    scanf (\"%c\",keypress);\n    media(num1,num2,num3);\n    printf (\"\\nWaiting a keypress to end\\n\");\n    scanf (\"%c\",keypress);\n    return(0);\n}\n</code></pre>\n<p>I compiled it: <code>gcc -S example.c</code>. It generated an <code>example.s</code> file and my expectation was to saw some push instructions. Here is the produced assembly code:</p>\n<pre><code>    .file   \"example.c\"\n    .section    .rodata\n.LC0:\n    .string \"I will return now\"\n    .text\n    .globl  sum\n    .type   sum, @function\nsum:\n.LFB0:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movl    %esi, -24(%rbp)\n    movl    %edx, -28(%rbp)\n    movl    -24(%rbp), %eax\n    movl    -20(%rbp), %edx\n    addl    %eax, %edx\n    movl    -28(%rbp), %eax\n    addl    %edx, %eax\n    movl    %eax, -4(%rbp)\n    movl    $.LC0, %edi\n    movl    $0, %eax\n    call    printf\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size   sum, .-sum\n    .section    .rodata\n.LC1:\n    .string \"\\nI will return now\"\n    .text\n    .globl  media\n    .type   media, @function\nmedia:\n.LFB1:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movl    %esi, -24(%rbp)\n    movl    %edx, -28(%rbp)\n    movl    -24(%rbp), %eax\n    movl    -20(%rbp), %edx\n    addl    %eax, %edx\n    movl    -28(%rbp), %eax\n    addl    %edx, %eax\n    movl    %eax, -4(%rbp)\n    movl    -4(%rbp), %ecx\n    movl    $1431655766, %edx\n    movl    %ecx, %eax\n    imull   %edx\n    movl    %ecx, %eax\n    sarl    $31, %eax\n    movl    %edx, %ecx\n    subl    %eax, %ecx\n    movl    %ecx, %eax\n    movl    %eax, -4(%rbp)\n    movl    $.LC1, %edi\n    call    puts\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size   media, .-media\n    .section    .rodata\n.LC2:\n    .string \"\\nCalling sum function\"\n    .align 8\n.LC3:\n    .string \"\\nWaiting a keypress to call media function\"\n.LC4:\n    .string \"%c\"\n.LC5:\n    .string \"\\nWaiting a keypress to end\"\n    .text\n    .globl  main\n    .type   main, @function\nmain:\n.LFB2:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $16, %rsp\n    movl    $5, -4(%rbp)\n    movl    $10, -8(%rbp)\n    movl    $15, -12(%rbp)\n    movl    $.LC2, %edi\n    call    puts\n    movl    -12(%rbp), %edx\n    movl    -8(%rbp), %ecx\n    movl    -4(%rbp), %eax\n    movl    %ecx, %esi\n    movl    %eax, %edi\n    call    sum\n    movl    $.LC3, %edi\n    call    puts\n    leaq    -13(%rbp), %rax\n    movq    %rax, %rsi\n    movl    $.LC4, %edi\n    movl    $0, %eax\n    call    __isoc99_scanf\n    movl    -12(%rbp), %edx\n    movl    -8(%rbp), %ecx\n    movl    -4(%rbp), %eax\n    movl    %ecx, %esi\n    movl    %eax, %edi\n    call    media\n    movl    $.LC5, %edi\n    call    puts\n    leaq    -13(%rbp), %rax\n    movq    %rax, %rsi\n    movl    $.LC4, %edi\n    movl    $0, %eax\n    call    __isoc99_scanf\n    movl    $0, %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE2:\n    .size   main, .-main\n    .ident  \"GCC: (Debian 4.7.2-5) 4.7.2\"\n    .section    .note.GNU-stack,\"\",@progbits\n</code></pre>\n<p>Of course, I'm missing something because I just saw  two <code>pushq</code> instructions. </p>\n<p>My question is what am I missing?</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "1k",
    "tags": [
        "assembly",
        "gcc",
        "amd64"
    ],
    "user": "user13458",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Hackndo",
            "text": "<span class=\"comment-copy\">Answers below are accurate. Don't forget thought that  <code>push</code> is not always used when calling functions in 32 bits architecture. You'll probably see <code>mov DWORD PTR [ESP+0x8], 0x24</code>,  <code>mov DWORD PTR [ESP+0x4], 0xa</code> and <code>mov DWORD PTR [ESP], 0x5</code> more often.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>if I pass an argument to an function it should be translated in\n  assembly language into push something</p>\n</blockquote>\n<p>That's true for some 32-bit calling conventions, but your program is a 64-bit program and thus follows the <a href=\"http://x86-64.org/documentation/abi.pdf\">System V Application Binary Interface for AMD64</a>.</p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI\">https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI</a>:</p>\n<blockquote>\n<p>The calling convention of the System V AMD64 ABI is followed on\n  Solaris, Linux, FreeBSD, Mac OS X, and other UNIX-like or\n  POSIX-compliant operating systems. <strong><em>The first six integer or pointer\n  arguments are passed in registers</em></strong> RDI, RSI, RDX, RCX, R8, and R9,\n  while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 are used for\n  floating point arguments. For system calls, R10 is used instead of\n  RCX.</p>\n</blockquote>\n</div>",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Sep 3, 2015 at 17:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want assembly code without the use of push instruction from a C code, there is always the C prototype #inline.</p>\n</div>",
            "votes": "1",
            "user": "John Greene",
            "time": "Sep 5, 2015 at 15:53",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>-I think you must read more about passing parameters using x86-64 and x32 modes.</p>\n<p>-As @jason Geffner has said, injecting aguments via 32 bits is performed by stacking em up, while via 64 bits, is different, they are stored in regisers (notably rsi,rdi)</p>\n<p>-This <a href=\"https://stackoverflow.com/questions/28601414/calling-c-function-from-x64-assembly-with-registers-instead-of-stack\">link</a> illustrates more the mechanism of printf arguments introducing in 64 bit processors.</p>\n<ul>\n<li>More samples about printf command usage in:</li>\n</ul>\n<p><a href=\"http://www.csee.umbc.edu/portal/help/nasm/sample_64.shtml\" rel=\"nofollow noreferrer\">X86-64 processing</a></p>\n<p><a href=\"http://www.csee.umbc.edu/portal/help/nasm/sample.shtml\" rel=\"nofollow noreferrer\">x32 and below</a></p>\n</div>",
            "votes": "0",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}