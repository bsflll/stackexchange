{
    "title": "How can I get the byte size of an operand in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19843/how-can-i-get-the-byte-size-of-an-operand-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get the byte size of all operands in a given instruction from IDA Pro. At first I tried using <code>GetOperandValue(ea,n)</code> to see how large the value was and calculate how many bytes were necessary to store that value, but it doesn't return leading zeros, which means that it doesn't work.</p>\n<p>Now I am trying to use <code>OpHex(ea,n)</code> to get the answer,  but it's just returning <code>True</code> (as do <code>OpDecimal</code>, <code>OpBinary</code>, and <code>OpOctal</code>).</p>\n<p>How can I find the number of bytes used for operands of a particular instruction and why is <code>OpHex</code> returning true?</p>\n<p><strong>Edit:</strong> My current solution works, but I would still like one that is more technically correct and bulletproof. Right now I am just using <code>GetOperandValue(ea, op)</code> to get both operands for all instructions (even if they have neither or only one) and then checking to make sure the operand value is greater than <code>FF</code>. If It's greater than <code>FF</code> I just assume it is an address, which in this case is four bytes. If both operands meet this condition, I assign the size to be eight bytes.</p>\n<p>This works for the moment, but will encounter difficulties in eventual moves to other architectures (right now I'm just working with x86-64).</p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "elf"
    ],
    "user": "theTheodidact",
    "time": "Nov 16, 2018 at 18:49",
    "comments": [
        {
            "user": "pudi",
            "text": "<span class=\"comment-copy\">Do you mean a value in an opcode instruction like <code>mov</code> or the size of a data structure to which some pointer is pointing?</span>",
            "time": null
        },
        {
            "user": "theTheodidact",
            "text": "<span class=\"comment-copy\">The size of the operand(s) in an opcode instruction, not the size to which it is pointing. To recreate the relocation I need to know how many bytes to overwrite with addresses.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Module <code>ida_ua</code> now contains a function <code>get_dtype_size</code>, which seems to implement @WHsT's answer.</p>\n<p>Assuming you have an instruction i, you can use it e.g. like this:</p>\n<p><code>ida_ua.get_dtype_size(i.Op1.dtype))</code></p>\n</div>",
            "votes": "1",
            "user": "langlauf.io",
            "time": "Jun 17, 2022 at 15:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">I no longer have the ability to test this; marking as answered, unless someone tags me in the comments that this doesn't work. Thanks @langlauf.io</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There doesn't seem to be a straightforward way to achieve this. But you can take a look at <a href=\"https://www.hex-rays.com/products/ida/support/sdkdoc/group__dt__.html\" rel=\"nofollow noreferrer\">this page</a> of the IDA SDK documentation.</p>\n<p>According to the description of the previous page, we can write a little helper function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def size_of_operand(op):\n    tbyte = 8\n    dt_ldbl = 8\n    n_bytes = [ 1, 2, 4, 4, 8,\n            tbyte, -1, 8, 16, -1,\n            -1, 6, -1, 4, 4,\n            dt_ldbl, 32, 64 ]\n    return n_bytes[op.dtype]\n</code></pre>\n<p>Now we can use command like</p>\n<pre class=\"lang-py prettyprint-override\"><code>insn = idautils.DecodeInstruction(ScreenEA())\nindex_of_operand = 0\nsize_of_operand(insn.Operand[index_of_operand])\n</code></pre>\n<p>to get the size of an operand.</p>\n<p>For example, for <code>xor al, al</code>, it returns 1. For <code>pop ebp</code>, it returns 4.</p>\n<p>Note: refer to <a href=\"https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml\" rel=\"nofollow noreferrer\">Porting from IDAPython 6.x-7.3, to 7.4</a></p>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jul 14, 2023 at 23:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are You Loooking for some thing like</p>\n<pre><code>Message(\"%s\\n\" , GetCurrentLine());\nMessage(\"%x\\n\" , ItemSize(ScreenEA()));\n</code></pre>\n<p>this will give results as below</p>\n<pre><code>.text:010328BB 56                            push    esi\n1\n.text:010328BC BE 10 42 05 01                mov     esi, offset unk_1054210\n5\n.text:010328C1                               cmp     byte_1054309, bl\n6\n.text:010328C1 38 1D 09 43 05 01             cmp     byte_1054309, bl\n6\n</code></pre>\n<p>Note: refer to <a href=\"https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml\" rel=\"nofollow noreferrer\">Porting from IDAPython 6.x-7.3, to 7.4</a></p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jul 14, 2023 at 23:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Seems the inquirer is only interested in the size of the <i>operands</i>, not the instructions overall. But this is close.</span>",
                    "time": null
                },
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">Yes, @0xC0000022L is correct.</span>",
                    "time": null
                }
            ]
        }
    ]
}