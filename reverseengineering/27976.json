{
    "title": "How to capture control flow pins on emulated serial port?",
    "link": "https://reverseengineering.stackexchange.com/questions/27976/how-to-capture-control-flow-pins-on-emulated-serial-port",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reverse engineering how a CPS software package communicates to a radio device. I have the basics down, and want to trick the software into thinking COM1 is the radio, when in reality I want to capture the control flow pin state changes (CTR and RST).</p>\n<p>I am running Windows XP in Qemu and/or Virtual Box with Linux as the base OS. Is there a way for Linux to emulate a software-defined serial port that captures all pin state changes?</p>\n<p>I have tried using <code>socat</code>, specifically with something like this <code>socat -d -d pty,raw,echo=0,b9600 pty,raw,echo=0,b9600</code>, but attempts to change the control flow pins on the resulting <code>/dev/pts/X</code> will result in an <code>ioctl</code> error. Also, simple <code>cat /dev/pts/X</code> only shows content sent over the device, not control flow changes.</p>\n<p>How would I do this? And, how would I pass the resulting device to a Windows VM to make it think it is communicating with <code>COM1</code>?</p>\n<p>Thanks!</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "94",
    "tags": [
        "linux",
        "serial-communication",
        "virtual-machines"
    ],
    "user": "Farhan Yusufzai",
    "time": "Jul 10, 2021 at 4:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To answer my own question, you can use the Linux kernel module <code>tty0tty</code> to capture the control pins and data flow.</p>\n</div>",
            "votes": "1",
            "user": "Farhan Yusufzai",
            "time": "Jul 12, 2021 at 14:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}