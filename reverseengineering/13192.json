{
    "title": "Convert IDA listings to assembly without using IDA non-free",
    "link": "https://reverseengineering.stackexchange.com/questions/13192/convert-ida-listings-to-assembly-without-using-ida-non-free",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently working with a huge set of IDA Pro listings (<code>~1TiB</code>).</p>\n<p>For a project I need to perform analyses on the <code>mnemonics</code> and <code>operands</code> on a subroutine level. Therefor I want to convert the IDA format in a plain assembly format, as the existing parser only works for \"PLAIN ASM\" files.</p>\n<p>Additonally this should be done without using a non-free version of IDA.</p>\n<p><strong>IDA ASM</strong></p>\n<pre><code>.text:00401000                             ; =============== S U B R O U T I N E =======================================\n.text:00401000\n.text:00401000                             ; Attributes: bp-based frame\n.text:00401000\n.text:00401000                             sub_401000      proc near           ; CODE XREF: sub_43BD35+Ap\n.text:00401000\n.text:00401000                             var_C           = dword ptr -0Ch\n.text:00401000                             var_8           = dword ptr -8\n.text:00401000                             var_4           = dword ptr -4\n.text:00401000\n.text:00401000 55                                  push    ebp\n.text:00401001 8B EC                                   mov     ebp, esp\n.text:00401003 83 EC 0C                                sub     esp, 0Ch\n.text:00401006 89 4D F4                                mov     [ebp+var_C], ecx\n.text:00401009 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:00401021 59                                  pop     ecx\n.text:00401022\n.text:00401022                             loc_401022:                 ; CODE XREF: sub_401000+Fj\n.text:00401022 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:00401025 83 78 04 00                             cmp     dword ptr [eax+4], 0\n.text:00401029 74 12                                   jz      short locret_40103D\n.text:0040102B 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:0040102E 8B 40 04                                mov     eax, [eax+4]\n.text:00401031 89 45 F8                                mov     [ebp+var_8], eax\n.text:00401034 FF 75 F8                                push    [ebp+var_8]     ; void *\n.text:00401037 E8 B8 0D 00 00                              call    ??3@YAXPAX@Z    ; operator delete(void *)\n.text:0040103C 59                                  pop     ecx\n.text:0040103D\n.text:0040103D                             locret_40103D:                  ; CODE XREF: sub_401000+29j\n.text:0040103D C9                                  leave\n.text:0040103E C3                                  retn\n.text:0040103E                             sub_401000      endp\n</code></pre>\n<p>Convert to:</p>\n<p><strong>PLAIN ASM</strong></p>\n<pre><code>=============== S U B R O U T I N E =======================================\npush    ebp\nmov     ebp, esp\nsub     esp, 0Ch\nmov     [ebp+var_C], ecx\nmov     eax, [ebp+var_C]\npop     ecx\nmov     eax, [ebp+var_C]\ncmp     dword ptr [eax+4], 0\njz      short locret_40103D\nmov     eax, [ebp+var_C]\nmov     eax, [eax+4]\nmov     [ebp+var_8], eax\npush    [ebp+var_8]     ; void *\ncall    ??3@YAXPAX@Z    ; operator delete(void *)\npop     ecx\nleave\nretn\n</code></pre>\n<p><strong>Question:</strong>\nAre there solutions or scripts already existing for such a (automatically or batch-mode) conversion (at the best without needing a IDA non-free version)?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "assembly"
    ],
    "user": "knx",
    "time": "Aug 4, 2016 at 5:49",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Your plain ASM removed the declarations for the stack variables. That's a bit too far on the \"plain\" side. Can't you not just cut off the first <i>n</i> characters, using just about any text manipulator?</span>",
            "time": null
        },
        {
            "user": "knx",
            "text": "<span class=\"comment-copy\">Cutting of the declarations for the stack is not too bad. The plain ASM does not have to be valid in this sense (sorry for not mentioning this). Cutting of the first <i>n</i> chars seems plausible. However, I am more concerned  about the inline comments, loc definitions etc.. Additionally I'm not very familiar with the IDA ASM format and worried to miss some special annotations, which will cause the parser to misinterpret the input. Hoped there is an existing and more \"sophisticated\" solution out there.</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">IDA's labels look like perfectly regular ones to me, and so does its comments: <code>;</code> is a common comment character in assembly. Are you sure your assembler has problems with these? Also, check the File &gt; Output menu. From memory, it ought to have a separate <code>Export as ASM</code> entry.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I assume you already have the assembly output produced by ida and want to parse test only if that is the case you can improvise this. </p>\n<p>Assuming i copy pasted the <code>IDA.ASM</code> in your post to a text file. </p>\n<p>I can print all the disassembly lines only using the XXX below \nif you are on windows you need the gnuwin32 port of the unix utilities used in path.</p>\n<hr/>\n<p><strong>Suggestion 1:</strong></p>\n<p>Details of the text file:</p>\n<pre><code>wc -l ida.asm &amp; echo. &amp; head -n 2 IDA.ASM &amp; echo. &amp; tail -n 2 IDA.ASM &amp; echo. &amp; head -n 11 IDA.ASM | tail -1\n</code></pre>\n<p>Output:</p>\n<pre><code>31 ida.asm\n\n.text:00401000                             ; =============== S U B R O U T I N E =======================================\n.text:00401000\n\n.text:0040103E C3                                  retn\n.text:0040103E                             sub_401000      endp\n.text:00401000 55                                  push    ebp\n</code></pre>\n<p>Text parsing to isolate disassembly only from the said text file:</p>\n<pre><code>tac ida.asm | awk \"{if(a[$1]++==0){print $0} }\" | sort\n</code></pre>\n<p>Result as follows:</p>\n<pre><code>:\\&gt;tac ida.asm | awk \"{if(a[$1]++==0){print $0} }\" | sort\n.text:00401000 55                                  push    ebp\n.text:00401001 8B EC                                   mov     ebp, esp\n.text:00401003 83 EC 0C                                sub     esp, 0Ch\n.text:00401006 89 4D F4                                mov     [ebp+var_C], ecx\n.text:00401009 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:00401021 59                                  pop     ecx\n.text:00401022 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:00401025 83 78 04 00                             cmp     dword ptr [eax+4], 0\n.text:00401029 74 12                                   jz      short locret_40103D\n.text:0040102B 8B 45 F4                                mov     eax, [ebp+var_C]\n.text:0040102E 8B 40 04                                mov     eax, [eax+4]\n.text:00401031 89 45 F8                                mov     [ebp+var_8], eax\n.text:00401034 FF 75 F8                                push    [ebp+var_8]     ; void *\n.text:00401037 E8 B8 0D 00 00                              call    ??3@YAXPAX@Z    ; operator delete(void *)\n.text:0040103C 59                                  pop     ecx\n.text:0040103D C9                                  leave\n.text:0040103E                             sub_401000      endp.text:0040103E C3                                  retn\n</code></pre>\n<hr/>\n<p><strong>Suggestion 2:</strong></p>\n<p>Well as i commented if you could print the last line of a group based on first column comparison you can elieminate tac.\nI searched around SO and found this <a href=\"https://stackoverflow.com/questions/5429840/eliminate-duplicate-lines-and-keep-the-last-one\">print last line in each group of result based on comparison results of  first column only </a>.</p>\n<p>I adapted it to the needs of this question:</p>\n<pre><code>awk \"{a[$1]=$0} END {for (i in a ) print a[i]}\" IDA.lst  | sort | awk \"{ print substr($0,42) }\" | tr -s [:blank:]\n</code></pre>\n<p>Output:</p>\n<pre><code> push ebp\n mov ebp, esp\n sub esp, 0Ch\n mov [ebp+var_C], ecx\n mov eax, [ebp+var_C]\n pop ecx\n mov eax, [ebp+var_C]\n cmp dword ptr [eax+4], 0\n jz short locret_40103D\n mov eax, [ebp+var_C]\n mov eax, [eax+4]\n mov [ebp+var_8], eax\n push [ebp+var_8] ; void *\n call ??3@YAXPAX@Z ; operator delete(void *)\n pop ecx\n leave\n sub_401000 endp\n</code></pre>\n<hr/>\n<p><strong>Suggestion 3:</strong></p>\n<p>A similar solution based on the suggestions above. This approach will additionally respects the last <code>retn</code> statement and filters out comments (<code>;</code>) at the end of the line:</p>\n<pre><code>grep -E \"^.{10,15} [0-9A-F]{2} *\" IDA.ASM | sort | cut -c40-200 | tr -s [:blank:] | cut -d \";\" -f1\n</code></pre>\n<p>Output:</p>\n<pre><code> push ebp\n mov ebp, esp\n sub esp, 0Ch\n mov [ebp+var_C], ecx\n mov eax, [ebp+var_C]\n pop ecx\n mov eax, [ebp+var_C]\n cmp dword ptr [eax+4], 0\n jz short locret_40103D\n mov eax, [ebp+var_C]\n mov eax, [eax+4]\n mov [ebp+var_8], eax\n push [ebp+var_8]\n call ??3@YAXPAX@Z\n pop ecx\n leave\n retn\n</code></pre>\n<p><h1> Pure AWK Based Suggestion </h1></p>\n<p>I have an aversion to using n number of utilities to accomplish a job<br/>\nand i needed to brush up my <code>awkyquotient</code> so here is an awk only code<br/>\nyou may need to test rinse and repeat<br/>\nit seems to work for the copy paste of plain.asm    </p>\n<pre><code>{ \n    a[$1] = $0 ;                      # array a will contain last  entry in each group \n    if(b[$1]++==0) c[$1] = $0;        # array c will contain first entry of each group\n} END { \n    n = asort(a); m = asort(c);       # sort both arrays\n    if (n == m) {                     # some caution    \n        for( k=1; k&lt;=n; k++ ){     \n            if(a[k]!= c[k]) {         # lets split input into 3 seperate arrays  \n                d[k] = a[k]           # one where all entries except last is valid\n                e[k] = c[k]           # one where only last entry is valid\n            } else {\n                f[k] = a[k]           # one where both arrays have same entries\n            }\n        }\n    }\n    o = asort(d); p = asort(e) ; q= asort(f) # sort all 3 arrays\n    z = 1;\n    while(z != o)    {\n        g[z] = d[z]                  #insert final array with first n entries \n        z++;                         #(except last entry)\n    }\n    y = 1;\n    while(y != q+1) {\n        g[z] = f[y]                  #insert final array with all equal entries \n        z++;y++\n    }\n    x = p;\n    while(x != p-1) {\n        g[z] = e[x]                  # insert final array with last entry\n        z++;x--\n    }\n    r = asort(g)                     # sort the final array and print substring\n    startofdis = 44;                 # lets set a start    \n    for (i = 1; i &lt;= r; i++ ) {\n    match(g[i] ,/;.*/);              # match everything after a ; (semicolon)\n    if(RLENGTH == -1){               # awk should set the RSTART and RLENGTH\n    print substr( g[i] ,startofdis)  # if RLENGHT == -1 no semicolon \n    }                                # lets print from startofdis to end\n    else\n    print substr(g[i] , startofdis , RSTART-startofdis ) # print only the middle portion\n    }\n}\n</code></pre>\n<h2>Result as follows</h2>\n<pre><code>:\\&gt;awk -f awky.txt ida.lst\n        push    ebp\n            mov     ebp, esp\n            sub     esp, 0Ch\n            mov     [ebp+var_C], ecx\n            mov     eax, [ebp+var_C]\n        pop     ecx\n            mov     eax, [ebp+var_C]\n            cmp     dword ptr [eax+4], 0\n            jz      short locret_40103D\n            mov     eax, [ebp+var_C]\n            mov     eax, [eax+4]\n            mov     [ebp+var_8], eax\n            push    [ebp+var_8]\n                call    ??3@YAXPAX@Z\n        pop     ecx\n        leave\n        retn\n\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Something like a <code>tac</code> based solution was my first intention too, with the knowledge that the last line of the file <b>always</b> contains the most recent information. Speaking for the last line of the <i>result</i> output: Are there more cases where I have to concern about the situations where <code>.text:0040103E sub_401000</code> is the output instead of <code>.text:0040103E C3  retn</code>. A second filter cirteria could be a blank column right behind the address, right?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">yes you should test the script and improvise it is a hack and not fool proof you should just tac the file first and iron out tac idiosyncracies prior to piping and you should iron out the awk wrinkles or settle for some compromises between perfect and absolutely crap results the last line is where the awk fails to print the last unique in group (if you could solve this you dont need tac in first place)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@knox well i updated my answer and eliminated the need for tac take a look</span>",
                    "time": null
                },
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Okay that's awesome. Another suggestion to handle the problem of the missing last <code>retn</code> instruction: a regex that considers the first opcode column after the address column <code>grep -E \"^.{10,15} [0-9A-F]{2} *\" function.asm</code></span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i added a pure awk only approach hope fully that should nail the list into asm</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The IDA database's representation of the binary code which sometimes takes a few liberties for the sake of analyzing the program logic.  One of those simplifications is the auto-creation of argument and local variable representation (arg_<em>, var_</em>) that you see.</p>\n<p>If you want to get closer to a cleaner assembly representation, try <a href=\"http://www.capstone-engine.org\" rel=\"nofollow\">Capstone</a>.  If you identify the file offsets for the functions that you need to analyze using IDA (or some other disassembler), you can just feed those to Capstone to generate the disassembly.  Also, you can easily write an IDC script (IIRC, the free version of IDA doesn't come with IDAPython support) to dump out the instructions you need in binary form for each function you want to analyze, and pass that into Capstone to generate the disassembly.</p>\n</div>",
            "votes": "0",
            "user": "3pidemix",
            "time": "Aug 3, 2016 at 1:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">iirc he already has someone produce an asm file from some version of idapro and wants to parse the text and remove the extra ida specific whatever and just keep the disassembly alone if i am not wrong</span>",
                    "time": null
                },
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">@blabb is totally correct</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">@blabb Looks to me like you're dumping IDA's listing, and not assembly.  The listing is what you see displayed when you view the disassembly in IDA's text view.  GenerateFile() can generate an actual assembly file - check out the OFILE_* symbols (first argument to GenerateFile()).  If you change that arg to 4, it will generate a .asm file, just like (as mentioned by Rad Lexus above) File-&gt;Produce File-&gt;Create ASM File... does.</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">Correct - the semantics of his question are a bit misleading, which is what I was attempting to rectify :)</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">Without access to the source .idb files that generated the listings, your best bet is probably @blabb's solution.  Even with the .idb files, I'm pretty sure the free version of IDA doesn't come with IDAPython support so you'd be stuck with IDC.  In that case, you may be able to just dump actual assembly vs. listing with the script posted above.</span>",
                    "time": null
                }
            ]
        }
    ]
}