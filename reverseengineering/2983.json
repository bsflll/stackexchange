{
    "title": "How to predict address space layout differences between real and gdb-controlled executions?",
    "link": "https://reverseengineering.stackexchange.com/questions/2983/how-to-predict-address-space-layout-differences-between-real-and-gdb-controlled",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's something that puzzle me for a long time. I can observe that there is a difference between the real execution of a program and the <code>gdb</code>-controlled one.</p>\n<p>But, here is an example:</p>\n<ol>\n<li><p>First, here is the example code (we use an automatic variable to get the location of the stack):</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main ()\n{\n  char c = 0;\n\n  printf (\"Stack address: %p\\n\", &amp;c);\n\n  return EXIT_SUCCESS;\n}\n</code></pre></li>\n<li><p>Then, we disable the ASLR (we use the personality flags of the process and not the system-wide method through <code>/proc/sys/kernel/randomize_va_space</code>):</p>\n<pre><code>$&gt; setarch `uname -m` -R /bin/bash\n</code></pre></li>\n<li><p>Then, get a run in the real memory environment:</p>\n<pre><code>Stack address: 0x7fffffffe1df\n</code></pre></li>\n<li><p>And, the same through <code>gdb</code>:</p>\n<pre><code> (gdb) r\n Starting program: ./gdb-against-reality\n Stack address: 0x7fffffffe17f\n [Inferior 1 (process 5374) exited normally]\n (gdb) \n</code></pre></li>\n</ol>\n<p>So, here we have a difference of 96 bytes between the two runs. But, how can I predict this difference for a given program without having it running in the <em>real</em> memory layout (just by knowing the <code>gdb</code> memory layout) ?</p>\n<p>And, also, from where/what is coming this difference ?</p>\n</div>",
    "votes": "19",
    "answers": 2,
    "views": "15k",
    "tags": [
        "gdb",
        "memory"
    ],
    "user": "perror",
    "time": "Oct 30, 2013 at 11:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There could be other factors involved, but my guess would be that changes in the process environment variables, which are stored on the stack, are what's causing this issue.</p>\n<p>Running a small <a href=\"https://stackoverflow.com/questions/2085302/printing-all-environment-variables-in-c-c\">program</a> that just prints out the environment variables reveals a couple variations in environment variables when run inside vs outside gdb on my system.</p>\n<pre><code>int main(int argc, char **argv, char** envp)\n{\n  char** env;\n  for (env = envp; *env != 0; env++)\n  {\n    char* thisEnv = *env;\n    printf(\"%s\\n\", thisEnv);    \n  }\n}\n</code></pre>\n<p>First, when running under gdb, there is a LINES variable that isn't present when the process is started outside of gdb:</p>\n<pre><code>LINES=83\n</code></pre>\n<p>Secondly, the underscore environment variable is different. When running outside of gdb, it is set to the name of the executable:</p>\n<pre><code>_=./gdbtest\n</code></pre>\n<p>But when started from inside gdb, it is set to the path of the gdb binary:</p>\n<pre><code>_=/usr/bin/gdb\n</code></pre>\n<p>You can try to run the program normally, then attach to it with gdb/gdbserver, which should avoid these variations in environment variables (assuming that is in fact what is causing your problem).</p>\n<p>If your process is short-lived, it can be hard to pause the process before it exits. Maybe someone else has some good suggestions on starting a process in a paused state; I usually use a second program like <a href=\"https://code.google.com/p/botox/source/browse/trunk/src/botox.c\" rel=\"nofollow noreferrer\">this one</a> to catch the process as it is starting and pause it so I can attach a debugger to it.</p>\n</div>",
            "votes": "17",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">This answer on stackoverflow shows how to run gdb with a controlled environment <a href=\"https://stackoverflow.com/a/17775966\">stackoverflow.com/a/17775966</a>. You can simply use his script (remember to run <code>unset</code> commands inside <code>gdb</code>)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just to add to the answers, I can tell how to get close to a clean environment despite <code>gdb</code>. In fact, there are two methods to reach this:</p>\n<ol>\n<li><p>We can get rid of the extra environment variables added by <code>gdb</code> as follow:</p>\n<pre><code>(gdb) unset environment LINES\n(gdb) unset environment COLUMNS\n</code></pre>\n<p>Write these commands before running the program, and you should be close to the normal environment. Note that you still have to take care of the <code>_</code> variable.</p></li>\n<li><p>One can also generate a memory core of the vulnerable program and analyze it with <code>gdb</code>:</p>\n<pre><code>$&gt; gdb vuln_program core\n</code></pre>\n<p>You should just look at the memory and never <code>run</code>, <code>next</code>, <code>step</code>, ... because doing so will force you to restart the program with a fresh memory (with the shift).</p></li>\n</ol>\n<p>That was two methods you can use with <code>gdb</code> to follow a program without too much differences with the real execution. But, they are many others!</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Aug 10, 2017 at 9:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}