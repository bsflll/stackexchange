{
    "title": "Ida Pro: Get original type of typedef from local types with the IDA C++ API",
    "link": "https://reverseengineering.stackexchange.com/questions/32920/ida-pro-get-original-type-of-typedef-from-local-types-with-the-ida-c-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been poking around with the IDA C++ SDK and I'm writing something to dump all local types into a json file. I have it all working but typedefs. Example <code>typedef int BOOL</code>\nI'm trying to get the original type of the typedef all methods I have tried so far only give me <code>BOOL</code> for the typedef name and the original type. I've tried the <code>get_final_type_name</code> function, <code>get_realtype(true)</code> which caused crashes and some others which gave the same result as <code>get_final_type_name</code>. Is there an easy way to do this?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "64",
    "tags": [
        "c++",
        "idapro-sdk"
    ],
    "user": "Duckos Mods",
    "time": "Apr 26, 2024 at 21:07",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">In Python, at least, you'll need to use <code>get_numbered_type</code> or <code>get_named_type</code>. That'll get you the fields that you can use with <code>tinfo_t.deserialize</code>. If you already have the \"typeref\" that you want as a <code>tinfo_t</code>, you'll need to distinguish whether it's a named-type or ordinal-type and then use <code>get_type_name</code> or <code>get_ordinal</code> (respectively). With that, you can then <code>get_numbered_type</code> or <code>get_named_type</code>. It's also probably worth noting that you can use <code>replace_ordinal_typerefs</code> to replace ordinals in your type with a named type (prolly affecting lookup performance).</span>",
            "time": null
        }
    ],
    "answers_data": []
}