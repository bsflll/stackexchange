{
    "title": "Identifying a very weak hash algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/13847/identifying-a-very-weak-hash-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse-engineering a string translation file format for a particular game. It's ultimately just an ID-to-string map, where the IDs are four-byte integers. There are 1935 IDs in total; you can see them all <a href=\"http://pastebin.com/raw/0aCHUxGP\" rel=\"nofollow\">here</a>.</p>\n<p>The first thing that I notice is that <a href=\"http://pastebin.com/raw/Bj2EegbJ\" rel=\"nofollow\">when written in base 16</a>, 115 of them have the first digit set to 0, roughly what you'd expect from a list of 1935 random numbers. But unlike 1935 random numbers, 19 IDs have the entire upper byte as 0, 8 have the upper three digits as 0, 6 have the upper four digits as 0, 5 have the upper five digits as 0, and one is less than 256!</p>\n<p>Furthermore, the strings with the dozen or so smallest IDs are mostly very short strings (although not all short strings have small IDs).</p>\n<p>This leads me to conclude that these numerical IDs were produced by some very weak &amp; simple hash function operating on strings (like \"text1\" or something), where the IDs for short strings were often just the string itself.</p>\n<p>Additionally, strings that occur in sequence in the game (consecutive lines of dialogue) very often have consecutive IDs in ascending order (but not always). This makes sense if the IDs are hashes of string keys; the original strings for a given situation would presumably have looked something like \"situation_text_1\", \"situation_text_2\", and so on. A weak hash algorithm could easily have this effect.</p>\n<p>This is where I'm stuck. From what I can tell, the other files in the game refer to these strings by numerical ID, not by string IDs. I'm unsure if original string keys or the hash function itself exist anywhere in the game. As such, I don't have any way to test controlled input values -- I just have to go on those 1935 examples (plus a few more that can be found in a leftover debug file).</p>\n<p>Here are the corresponding strings for the smallest IDs. I'm skipping ones with text very specific to this particular game.</p>\n<ul>\n<li>20: [Game copyright notice. I think this is the hash of the empty string.]</li>\n<li>576: \"5\"</li>\n<li>614: \"10\"</li>\n<li>2681: \"25\"</li>\n<li>2684: \"OK\"</li>\n<li>53444: \"On\"</li>\n<li>87305: [Skipped; two words]</li>\n<li>88410: \"NEW\"</li>\n<li>2444912: \"Off\"</li>\n<li>2553265: \"É“ Back\" (This is allowed because strings are UTF-16.)</li>\n<li>2661022: \"Normal\"</li>\n<li>2736539: \"Expert\"</li>\n<li>2963284: [Skipped; a sentence with markup]</li>\n<li>3020267: \"POCS\" (I have no idea what this means.)</li>\n<li>7314642: \"Rank:\"</li>\n</ul>\n<p>Do you have any ideas about what the hash algorithm could be?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "212",
    "tags": [
        "static-analysis",
        "strings",
        "hash-functions"
    ],
    "user": "RoadrunnerWMC",
    "time": "Nov 1, 2016 at 8:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From your description, I suspect these are not hashes but just randomly-generated numerical IDs, incremented as new strings were added around the same place to the program (possibly because programmer was too lazy to regenerate a completely new ID). There is a small possibility that the ID depends on the string contents but I doubt it.</p>\n<p>In any case, if you have recovered the ID-&gt;String mapping, I don't see why you need to know how exactly they were generated. Just translate the strings and you should be done.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Nov 1, 2016 at 12:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RoadrunnerWMC",
                    "text": "<span class=\"comment-copy\">I just extracted the text from another game that uses the same format. It displays all of the same trends, but with different values even for strings that are the same in both games. Based on that, you're probably right.</span>",
                    "time": null
                },
                {
                    "user": "RoadrunnerWMC",
                    "text": "<span class=\"comment-copy\">Also, you're right that I don't need to know how the IDs were generated in order to make changes. I was just trying to figure it out for curiosity's sake. At any rate, I'll mark this as accepted. Thanks. :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I actually found the hash function today by reverse-engineering the game's code. Here it is, translated to Python:</p>\n<pre><code>def hashFunction(data):\n    h = -1\n\n    for c in data:\n        if (c - 65) &amp; 0xFFFFFFFF &lt;= 0x19:\n            c |= 0x20\n\n        h = (h * 33 + c) &amp; 0xFFFFFFFF\n\n    return h\n</code></pre>\n<p>When run with <code>b'5'</code>, <code>b'10'</code>, <code>b'25'</code>, etc., this function returns hash values seen in the table I posted. They don't match the corresponding keys in that table due to a bug in my text extraction script (oops).</p>\n</div>",
            "votes": "1",
            "user": "RoadrunnerWMC",
            "time": "Nov 8, 2016 at 9:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">I knew it was a hash function's output, I just couldn't get anything valuable with the data you posted. Thanks for reporting back!</span>",
                    "time": null
                }
            ]
        }
    ]
}