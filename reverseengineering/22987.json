{
    "title": "Memory modified at jump far",
    "link": "https://reverseengineering.stackexchange.com/questions/22987/memory-modified-at-jump-far",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Observing a trace of Wow64 switching on Windows 7, the following situation makes me confused</p>\n<pre><code>...\n0x77491dbe  64 ff 15 c0 00 00 00  call fs:[0xc0]          ; syswow64\\ntdll.dll\n0x74632320  ea 1e 27 63 74 33 00  jmp far 0x33:0x7463271e ; system32\\wow64cpu.dll\n0x7463271e  67 44 8b 04 24        mov r8d, [esp]          ; system32\\wow64cpu.dll\n...\n</code></pre>\n<p>The first instruction is something similar with <a href=\"http://blog.rewolf.pl/blog/?p=102\" rel=\"nofollow noreferrer\">X86SwitchTo64BitMode</a>, the second one is a switch back to 64-bit mode. So <code>wow64cpu.dll</code> has been actually mapped into two different code segments: <code>cs = 23</code> for compat mode (second instruction) and <code>cs = 33</code> for 64-bit mode (third instruction). </p>\n<p>However I cannot find the second instruction (<code>jmp far...</code>) in the corresponding dll. There are <code>ea 1e 27 b6 78...</code> at <code>0x74632320</code>, not <code>ea 1e 27 64...</code> as being observed in the trace.</p>\n<p>Was <code>wow64cpu.dll</code> modified when being mapped into the memory?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "138",
    "tags": [
        "windows",
        "x86",
        "x86-64",
        "tracing"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Jan 13, 2020 at 16:10",
    "comments": [],
    "answers_data": []
}