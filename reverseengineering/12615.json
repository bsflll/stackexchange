{
    "title": "how to calculate this distance?",
    "link": "https://reverseengineering.stackexchange.com/questions/12615/how-to-calculate-this-distance",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I dont know how to calculate the jump distances :</p>\n<pre><code>[Address | Binary value| ollydbg(jmp, call...)]\n\n004014B6   $- FF25 30114000 JMP DWORD PTR DS:[&lt;&amp;MSVBVM60.#100&gt;]      ;  MSVBVM60.ThunRTMain\n004014C1   .  E8 **F0FFFFFF**   CALL [JMP.&amp;MSVBVM60.#100]\n</code></pre>\n<p>other examples: random jmps to 004014C1</p>\n<pre><code>0040752A    ^\\E9 **929FFFFF**   JMP stub2.004014C1\n00407561    ^\\E9 **5B9FFFFF**   JMP stub2.004014C1\n00407582    ^\\E9 **3A9FFFFF**   JMP stub2.004014C1\n</code></pre>\n<p>as you can see the bold number changes, I can see its a distance but I don't know how to calculate it.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg"
    ],
    "user": "Charles",
    "time": "May 10, 2016 at 10:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, you should read about <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow\">little endianness</a>. In a nutshell, the x86/x64 processors store the least significant byte first, so <code>F0FFFFFF</code> is really the value <code>FFFFFFF0</code>, and <code>3A9FFFFF</code> is the value <code>FFFF9F3A</code>.</p>\n<p>Second, read about <a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\" rel=\"nofollow\">integer representations of negative values</a>, and how overflow works when adding/subtracting numbers. In short, <code>FFFFFFF0</code> can either mean <code>4294967280</code> or <code>-16</code>, but when you add hex numbers, you don't really care; you just add them and ignore overflow.</p>\n<p>Third, remember that jump offsets are calculated from the byte <em>after</em> the <code>jmp</code>/<code>call</code> instruction.</p>\n<p>So, in your first example:</p>\n<ul>\n<li>start with <code>4014B6</code></li>\n<li>add 6 bytes for the instruction, result <code>4014BA</code></li>\n<li>add the value <code>401130</code>, result <code>8025EA</code></li>\n</ul>\n<p>and the first of your random examples:</p>\n<ul>\n<li>start with <code>40752A</code></li>\n<li>add 5 bytes for the instruction, result <code>40752F</code></li>\n<li>add <code>FFFF9F92</code>, result <code>1004014C1</code></li>\n<li>ignore overflow, result <code>004014C1</code> which is the target Olly shows you.</li>\n</ul>\n<p>Your other examples work in the same way, you should be able to figure them out now.</p>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 10, 2016 at 10:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}