{
    "title": "Catch connection string between exe and mdb",
    "link": "https://reverseengineering.stackexchange.com/questions/18907/catch-connection-string-between-exe-and-mdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an exe file that read and write from a local DB file.\nI checked this file with Detect It Easy and it shows that this is a <code>mdb</code> file.</p>\n<p>I can open this file with microsoft access, and watch all the tables, but when I tried to view some table I see that I don't have permission to do so.</p>\n<p>If I understand correctly, the executable needs to send to this <code>mdb</code> file a connection string that includes a user and a password when it initializes the connection.\nIs that true?</p>\n<p>If yes, how can I sniff and observe this connection string as it sends it from the process to the <code>mdb</code>?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "413",
    "tags": [
        "windows",
        "process",
        "sniffing",
        "exe"
    ],
    "user": "Keystone",
    "time": "Jul 27, 2018 at 6:15",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">If the exe is not .NET and has a direct dependency on msjet.dll or similar then you could watch that with <a href=\"http://jacquelin.potier.free.fr/winapioverride32/\" rel=\"nofollow noreferrer\">WinAPI Override</a>.</span>",
            "time": null
        },
        {
            "user": "Deepak Chaudhary",
            "text": "<span class=\"comment-copy\">If the connection string is stored as a string in the exe(and not dynamically created by a routine) then you may find it in Olydbg's \"Search for all Referenced Strings\"</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can find the connection string with an API Monitor tool or Debugger. However first you will need to know are you looking at .NET based executable (i.e. has it loaded clr.dll or mscorlib.dll) and how does it access the database. \nTo work this out you can use a tool like <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/procmon\" rel=\"nofollow noreferrer\">Process Monitor</a> and filter on <strong>Process Name is  Include</strong> and <strong>Operation is Load Image</strong> Include. From here you can see what runtime DLLs are used (i.e. .NET or MS Visual C, etc) and what database related DLLs are loaded i.e. msjet40.dll.</p>\n<p>A generic method that will frequently find the connection string is to simply API monitor the string C runtime functions.</p>\n<p>For example</p>\n<ol>\n<li>Download <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow noreferrer\">API Monitor</a></li>\n<li>Select Visual C++ Run-Time Library -&gt; String Manipulation (CRT)</li>\n<li>Launch/Attach to app with API monitor and look for connection strings.</li>\n</ol>\n<p>This can also be done with tools such as WinDbg and setting breakpoint on the C runtime functions and dumping the parameters.</p>\n<p>For example commands like below in WinDbg would print out the unicode string in a 64-bit EXE if the wscpy_s function had been called:</p>\n<pre><code>0:000&gt; bp MSVCR100!wcscpy_s \".printf \\\"msvcr100!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp MSVCR100!wcscpy_s \".printf \\\"msvcr100!wcscpy_s source='%mu' \\\",r8;!position;g\"\nBp expression 'MSVCR100!wcscpy_s' could not be resolved, adding deferred bp\n0:000&gt; bp ucrtbase_clr0400!wcscpy_s \".printf \\\"ucrtbase_clr0400!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp ucrtbase_clr0400!wcscpy_s \".printf \\\"ucrtbase_clr0400!wcscpy_s source='%mu' \\\",r8;!position;g\"\nBp expression 'ucrtbase_clr0400!wcscpy_s' could not be resolved, adding deferred bp\n0:000&gt; bp mscoreei!wcscpy_s \".printf \\\"ucrtbase_clr0400!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp mscoreei!wcscpy_s \".printf \\\"ucrtbase_clr0400!wcscpy_s source='%mu' \\\",r8;!position;g\"\nBp expression 'mscoreei!wcscpy_s' could not be resolved, adding deferred bp\n0:000&gt; bp mscoree!wcscpy_s \".printf \\\"mscoree!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp mscoree!wcscpy_s \".printf \\\"mscoree!wcscpy_s source='%mu' \\\",r8;!position;g\"\nBp expression 'mscoree!wcscpy_s' could not be resolved, adding deferred bp\n0:000&gt; bp msvcrt!wcscpy_s \".printf \\\"msvcrt!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp msvcrt!wcscpy_s \".printf \\\"msvcrt!wcscpy_s source='%mu' \\\",r8;!position;g\"\n0:000&gt; bp ntdll!wcscpy_s \".printf \\\"ntdll!wcscpy_s source='%mu' \\\",r8;!position;g\"\nbp ntdll!wcscpy_s \".printf \\\"ntdll!wcscpy_s source='%mu' \\\",r8;!position;g\"\n</code></pre>\n</div>",
            "votes": "2",
            "user": "chentiangemalc",
            "time": "Jan 16, 2020 at 12:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}