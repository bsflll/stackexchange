{
    "title": "xcList of x86/x64 instructions that implicitly access registers",
    "link": "https://reverseengineering.stackexchange.com/questions/12379/xclist-of-x86-x64-instructions-that-implicitly-access-registers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I am looking for a list of instructions that implicitly do stuff like reading or writing to registers. Obvious ones would be</p>\n<p>push/pop modifies esp, pushad accesses all</p>\n<p>but I'm sure there are more. Does someone know of a comprehensive list?</p>\n<p>edit: By implicitly I mean registers that are not explicitly mentioned in the arguments or the opcode. (except eflags)</p>\n</div>",
    "votes": "5",
    "answers": 3,
    "views": "1k",
    "tags": [
        "disassembly",
        "x86"
    ],
    "user": "bernd feinman",
    "time": "Apr 8, 2016 at 16:25",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">I think a more interesting question would be \"instructions that do NOT access registers\", with <code>jmp</code> being the only one I can think of right now. Conditional jumps access flags (do they count as registers?), <code>call</code>/<code>ret</code> access <code>[er]sp</code>, even 2 address instructions like <code>movsb</code> access <code>[er]di</code>/<code>[er]si</code>, and <code>[er]cx</code> if they include the <code>rep</code> prefix.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Or, does your <code>implicitly</code> mean \"registers that aren't mentioned, explicitly, in the opcode/arguments\" ?</span>",
            "time": null
        },
        {
            "user": "bernd feinman",
            "text": "<span class=\"comment-copy\">Guntram Blohm yes that is exactly what I mean. :) I'll add it.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what's \"xcList\", by the way?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I do not know of any comprehensive list, but <strong>here (<a href=\"http://ref.x86asm.net/coder32-abc.html\" rel=\"nofollow\">32-bit</a>/<a href=\"http://ref.x86asm.net/coder64-abc.html\" rel=\"nofollow\">64-bit</a>) is a very useful reference</strong> which contains most of the information you want.</p>\n<p>Note their <a href=\"http://ref.x86asm.net/index.html\" rel=\"nofollow\">description</a> of the operand columns:</p>\n<blockquote>\n<p>If an operand is set up using italic, it is an implicit operand, which is not explicitly used. If an operand is set up using boldface, it is modified by the instruction.</p>\n</blockquote>\n<p>So for example, in the 8-bit version of the <code>MUL</code> instruction (<code>AX = AL * r/m8</code>), they list the operands as <strong><em>AX</em></strong>, <em>AL</em>, and r/m8.  Note that the first two operands are italicized because they are implicit, and the first operand is bolded because it is modified.</p>\n<p>Unfortunately, this does not cover all cases of register modification.  For example, <code>MOVSD</code> only lists <strong><em>m32</em></strong> and <em>m32</em> for the operands and does not mention the fact that <code>ESI</code> and <code>EDI</code> are dereferenced and then adjusted by 4.</p>\n<hr/>\n<p>Still, it covers almost all cases, including:  <code>AAA</code>, <code>AAD</code>, <code>AAM</code>, <code>AAS</code>, <code>CBW</code>, <code>CDQ</code>, <code>CLTS</code>, <code>CMPXCHG</code>, <code>CMPXCHG8B</code>, <code>CPUID</code>, <code>CWD</code>, <code>CWDE</code>, <code>DAA</code>, <code>DAS</code>, <code>DIV</code>, <code>ENTER</code>, <code>IDIV</code>, <code>IMUL</code>, <code>IN</code>, <code>LAHF</code>, <code>LEAVE</code>, <code>LGDT</code>, <code>LIDT</code>, <code>LLDT</code>, <code>LMSW</code>, <code>LOOP</code>, <code>LOOPcc</code>, <code>MONITOR</code>, <code>MUL</code>, <code>OUT</code>, <code>POPA</code>, <code>PUSHA</code>, <code>RDMSR</code>, <code>RDPMC</code>, <code>RDTSC</code>, <code>RDTSCP</code>, <code>REP</code>, <code>SAHF</code>, <code>SALC</code>, <code>SGDT</code>, <code>WRMSR</code>, and many of the float and SSE instructions, as well as a couple instructions that do not have mnemonics.</p>\n<p>It does not (completely) cover some others, including:  <code>CMPS</code>, <code>INS</code>, <code>LODS</code>, <code>MASKMOVDQU</code>, <code>MASKMOVQ</code>, <code>MOVS</code>, <code>OUTS</code>, <code>SCAS</code>, <code>STOS</code>. Modifications to the stack pointer are generally not mentioned.</p>\n<p>If you care about segment registers, there are also <code>LDS</code>, <code>LES</code>, <code>LFS</code>, <code>LGS</code>, <code>LSS</code>, and the segment prefixes.  Several other instructions can implicitly modify the segment registers, however.  Additionally, instructions that access memory implicitly access cached information from the segment registers.</p>\n<p><sub>Note: The above are not comprehensive lists!</sub></p>\n<p>Ultimately, you need to read the <a href=\"http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\" rel=\"nofollow\">Intel Manuals</a> to get the official documentation, but this chart should still save you a lot of time.</p>\n</div>",
            "votes": "5",
            "user": "user1354557",
            "time": "Jun 17, 2016 at 14:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This list is going to contain most of the instructions in the instruction set because most of the instructions modify flags or registers in some way (the 'mov' instruction being one that doesn't). The flags that are accessed for conditional jumps are stored in the EFLAGS register. You can find the information you're looking for by looking at the <a href=\"http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\" rel=\"nofollow\">Intel manual</a> - read the section on the operation of each instruction. </p>\n</div>",
            "votes": "1",
            "user": "dingo_kinznerhook",
            "time": "Apr 8, 2016 at 16:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's my attempt at the list:</p>\n<p>DAA, DAS, AAA, AAS, PUSHA, POPA, NOP, PAUSE, CBW, CWD[E], CDQ, CQO, WAIT, AAM, AAD, XLAT, JMP, LOADALL, EMMS, FINIT, CALL, RET[F], INT, INTO, RSM, PUSH, POP, ENTER, LEAVE, any FPU instruction that ends in 'P'...</p>\n<p>To find a comprehensive list would require that you clarify the question even further.  There are instructions that modify memory using immediate values, for example.  They don't access registers, so they seem to qualify but probably not what you intend.</p>\n</div>",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Apr 11, 2016 at 17:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}