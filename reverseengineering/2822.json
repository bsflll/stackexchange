{
    "title": "COM interface methods",
    "link": "https://reverseengineering.stackexchange.com/questions/2822/com-interface-methods",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing malware and it uses COM, which I evidently don't know. My question is how to find out what method is called using ppv (and objectstublessclient?)</p>\n<pre><code>push    offset ppv      ; Address of pointer variable that receives the interface pointer requested in riid\npush    offset IShellWindows \npush    7              \npush    0               \npush    offset rclsid   \ncall    ds:_CoCreateInstance\n\nmov     ebx, eax\nmov     eax, num4\nmovsx   edx, num8\nadd     eax, edx\nsub     eax, 0Ch\ncmp     ebx, eax        ; S_OK, operation successful\njnz     exit\n\nlea     eax, [ebp+var_C]    ;?\npush    eax\nmov     eax, ppv\npush    eax\nmov     edi, [eax]\ncall    dword ptr [edi+1Ch] ; ObjectStublessClient7\n</code></pre>\n<p>I guessed that the last called function is objectStublessClient7 given that there are three methods(queryinterface etc) and then objectStublessClient's (and code looks like it). <em>(Is that right?)</em></p>\n<p>According to this Microsoft <a href=\"https://web.archive.org/web/20161029205000/https://www.microsoft.com/msj/0199/com/com0199.aspx\" rel=\"nofollow noreferrer\">article</a>:</p>\n<blockquote>\n<p>ObjectStubless simply calls into ObjectStublessClient, passing the method index (from ecx) as a parameter. Finally, ObjectStublessClient teases out the format strings from the vtable and jumps to NdrClientCall2. Like NdrStubCall2, this RPCRT4.DLL routine performs the interpretive marshaling and unmarshaling just as if a compiled proxy and stub were in use. </p>\n</blockquote>\n<p>What does ObjectStublessClient actually do in simple words? Calls a method by its index? If so, then in my case it will be OnActivate of <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/cc836570%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">IShellWindows interface</a>? It looks like the arguments don't match (does the first one look like <code>this</code>?)</p>\n</div>",
    "votes": "17",
    "answers": 1,
    "views": "5k",
    "tags": [
        "disassembly",
        "windows",
        "com"
    ],
    "user": "astrophonic",
    "time": "May 21, 2018 at 9:29",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>The <em>traditional</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>\n<p>Find the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa378712%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">Interface Definition Language (IDL)</a> file for the given interface. In your case, the interface is <code>IShellWindows</code>. According to the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/cc836570%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">documentation for <code>IShellWindows</code></a>, its interface is defined in IDL file <code>Exdisp.idl</code>. That IDL file is included in the <a href=\"http://en.wikipedia.org/wiki/Microsoft_Windows_SDK\" rel=\"nofollow noreferrer\">Windows SDK</a> (downloadable for free), and will be installed to a location such as <code>C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1A\\Include\\Exdisp.idl</code>. You can open that <code>Exdisp.idl</code> file with a text editor to see the Interface Definition of <code>IShellWindows</code>:</p>\n<pre><code>[\n    uuid(85CB6900-4D95-11CF-960C-0080C7F4EE85),     // IID_IShellWindows\n    helpstring(\"Definition of interface IShellWindows\"),\n    oleautomation,\n    dual,\n    odl,\n]\ninterface IShellWindows : IDispatch\n{\n    //Properties\n    [propget, helpstring(\"Get count of open Shell windows\")]\n    HRESULT Count([out, retval] long *Count);\n\n    //Methods\n    [id(0), helpstring(\"Return the shell window for the given index\")]\n    HRESULT Item([in,optional] VARIANT index, [out, retval]IDispatch **Folder);\n\n    [id(-4), helpstring(\"Enumerates the figures\")]\n    HRESULT _NewEnum([out, retval] IUnknown **ppunk);\n\n    // Some private hidden members to allow shell windows to add and\n    // remove themself from the list.  We mark them hidden to keep\n    // random VB apps from trying to Register...\n    [helpstring(\"Register a window with the list\"), hidden]\n    HRESULT Register([in] IDispatch *pid,\n                     [in] long hwnd,\n                     [in] int swClass,\n                     [out]long *plCookie);\n\n    [helpstring(\"Register a pending open with the list\"), hidden]\n    HRESULT RegisterPending([in] long lThreadId,\n                     [in] VARIANT* pvarloc,     // will hold pidl that is being opened.\n                     [in] VARIANT* pvarlocRoot, // Optional root pidl\n                     [in] int swClass,\n                     [out]long *plCookie);\n\n    [helpstring(\"Remove a window from the list\"), hidden]\n    HRESULT Revoke([in]long lCookie);\n    // As an optimization, each window notifies the new location\n    // only when\n    //  (1) it's being deactivated\n    //  (2) getFullName is called (we overload it to force update)\n    [helpstring(\"Notifies the new location\"), hidden]\n    HRESULT OnNavigate([in]long lCookie, [in] VARIANT* pvarLoc);\n    [helpstring(\"Notifies the activation\"), hidden]\n    HRESULT OnActivated([in]long lCookie, [in] VARIANT_BOOL fActive);\n    [helpstring(\"Find the window based on the location\"), hidden]\n    HRESULT FindWindowSW([in] VARIANT* pvarLoc,\n                         [in] VARIANT* pvarLocRoot, /* unused */\n                         [in] int swClass,\n                         [out] long * phwnd,\n                         [in] int swfwOptions,\n                         [out,retval] IDispatch** ppdispOut);\n    [helpstring(\"Notifies on creation and frame name set\"), hidden]\n    HRESULT OnCreated([in]long lCookie,[in] IUnknown *punk);\n\n    [helpstring(\"Used by IExplore to register different processes\"), hidden]\n    HRESULT ProcessAttachDetach([in] VARIANT_BOOL fAttach);\n}\n</code></pre>\n<p>We can see that the <code>IShellWindows</code> interface has the following <a href=\"http://en.wikipedia.org/wiki/Virtual_method_table\" rel=\"nofollow noreferrer\">vtable</a> entries:</p>\n<pre><code>- Count()\n- Item()\n- _NewEnum()\n- Register()\n- RegisterPending()\n- Revoke()\n- OnNavigate()\n- OnActivated()\n- FindWindowSW()\n- OnCreated()\n- ProcessAttachDetach()\n</code></pre>\n<p>However, you can also see in the IDL that the <code>IShellWindows</code> interface inherits from <code>IDispatch</code>. <code>IDispatch</code> has the following vtable entries (from <code>OAIdl.idl</code>):</p>\n<pre><code>- GetTypeInfoCount()\n- GetTypeInfo()\n- GetIDsOfNames()\n- Invoke()\n</code></pre>\n<p>The IDL for <code>IDispatch</code> in <code>OAIdl.idl</code> also specifies that <code>IDispatch</code> inherits from <code>IUnknown</code>. <code>IUnknown</code> has the following vtable entries (from <code>Unknwn.idl</code>):</p>\n<pre><code>- QueryInterface()\n- AddRef()\n- Release()\n</code></pre>\n<p>So now we know that <code>IShellWindows</code> inherits from <code>IDispatch</code>, which inherits from <code>IUnknown</code>. As such, the full layout of the vtable for <code>IShellWindows</code> is as follows:</p>\n<pre><code>*ppv+00h = QueryInterface()\n*ppv+04h = AddRef()\n*ppv+08h = Release()\n*ppv+0Ch = GetTypeInfoCount()\n*ppv+10h = GetTypeInfo()\n*ppv+14h = GetIDsOfNames()\n*ppv+18h = Invoke()\n*ppv+1Ch = Count()\n*ppv+20h = Item()\n*ppv+24h = _NewEnum()\n*ppv+28h = Register()\n...\n</code></pre>\n<p>Looking back at your code, we see a call to <code>*ppv+1Ch</code>, which we see from our constructed vtable above is a call to the function <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/cc836569%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\"><code>IShellWindows::Count()</code></a>, and <code>&amp;var_C</code> is the pointer to <code>IShellWindows::Count()</code>'s <code>[out, retval]  long *Count</code> parameter.</p>\n<hr/>\n<h2>The <em>dynamic</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>\n<p>Run your code above in a debugger, set a breakpoint on <code>call    dword ptr [edi+1Ch]</code>, and see what function that instruction calls.</p>\n<hr/>\n<h2>The <em>easiest</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>\n<p>Use <a href=\"http://www.japheth.de/COMView.html\" rel=\"nofollow noreferrer\">COMView</a> (<a href=\"https://web.archive.org/web/20140614155346/http://www.japheth.de/COMView.html\" rel=\"nofollow noreferrer\">wayback machine link to COMView</a>) to inspect the <code>IShellWindows</code> interface:</p>\n<p><img alt=\"&lt;code&gt;IShellWindows&lt;/code&gt; vtable in COMView\" src=\"https://i.sstatic.net/KCaYn.png\"/></p>\n<p>You can see in the screenshot above that the function at vtable offset 28 (1Ch) is <code>Count()</code>.</p>\n</div>",
            "votes": "21",
            "user": "Remko",
            "time": "May 24, 2018 at 20:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I forgot to mention, you also might be able to tell IDA to interpret ppv as an IShellWindows* variable, in which case IDA will show you that [ppv+1C] is a call to IShellWindows::Count().</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Good answer!  As Jason stated in his comment, once you know the type name for some variable, IDA will often know about it if it's a standard Windows COM type.  In this case, you'd go to the ppv variable in the data section (highlight that token and press enter) and then press 'y' to enter the type IShellWindows *.  From there, IDA's parameter-tracking algorithms will pick up many of the references and automatically and fill them in for you.  (Those algorithms aren't perfect -- they can't be due to mathematical impossibility issues involved -- so you may still have to fill some in manually).</span>",
                    "time": null
                },
                {
                    "user": "Nuzzolilo",
                    "text": "<span class=\"comment-copy\">ComView doesn't seem to run. Can someone confirm if this works?</span>",
                    "time": null
                }
            ]
        }
    ]
}