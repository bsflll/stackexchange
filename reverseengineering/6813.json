{
    "title": "Get the PE section address",
    "link": "https://reverseengineering.stackexchange.com/questions/6813/get-the-pe-section-address",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I study an analysis paper about a trojan and there are the following assembly lines:</p>\n<pre><code>.text:004010D0 Get_PE_section_address proc near        \n.text:004010D0\n.text:004010D0 arg_0           = dword ptr  4\n.text:004010D0\n.text:004010D0                 mov     ecx, [esp+arg_0]\n.text:004010D4                 mov     eax, [ecx+3Ch]\n.text:004010D7                 movzx   edx, word ptr [eax+ecx+14h]\n.text:004010DC                 add     eax, ecx\n.text:004010DE                 movzx   ecx, word ptr [eax+6]\n.text:004010E2                 push    ebx\n.text:004010E3                 add     edx, eax\n.text:004010E5                 push    esi\n.text:004010E6                 lea     esi, [ecx+ecx*4]\n.text:004010E9                 lea     eax, [edx+esi*8-38h]\n.text:004010ED                 xor     edx, edx\n.text:004010EF                 test    ecx, ecx\n.text:004010F1                 jbe     short loc_401102\n.text:004010F3\n\n.text:004010F3 loc_4010F3:                            \n.text:004010F3                 mov     bl, [eax+5]\n.text:004010F6                 test    bl, bl\n.text:004010F8                 jz      short loc_401104\n.text:004010FA                 inc     edx\n.text:004010FB                 sub     eax, 28h\n.text:004010FE                 cmp     edx, ecx\n.text:00401100                 jb      short loc_4010F3\n.text:00401102\n\n.text:00401102 loc_401102:                             \n.text:00401102                 xor     eax, eax\n.text:00401104\n\n.text:00401104 loc_401104:                             \n.text:00401104                 pop     esi\n.text:00401105                 pop     ebx\n.text:00401106                 retn\n\n.text:00401106 Get_PE_section_address endp\n</code></pre>\n<p>As you can see, the owner of the paper renamed the function as Get_PE_section_address.\nI spent a lot of time to understand why he/she calls in that way because I could not understand why this piece of code retrieves the the PE section address.</p>\n<p>So, my question would be if there is anyone who can tell me which lines tells us that this is something about PE section address. </p>\n<p>PS: I tried to work with the offsets but with a low success rate. The only thing I can say is that ebx = pointer to the malicious executable and arg_0 = 0\nAfter searching a while PE file format papers, i have found out that the second line </p>\n<pre><code>   mov     eax, [ecx+3Ch]\n</code></pre>\n<p>gives me the file address of the exe header. </p>\n<p>best regards, </p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "pe",
        "section",
        "address"
    ],
    "user": "user3097712",
    "time": "Dec 13, 2014 at 2:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Calling this function <code>Get_PE_section_address</code> is rather misleading since it doesn't generically get \"the address of a PE section\", but rather is used to get the virtual address of the Section Table entry for the first section with a <code>0x00</code> as the 5th byte of its section name, iterating through sections backwards starting from the second-to-last section.</p>\n<p>So for example, if the section names were:</p>\n<ul>\n<li>sec1<code>0</code></li>\n<li>sec2<code>0</code></li>\n<li>sec3<code>0</code></li>\n<li>sec4<code>0</code></li>\n</ul>\n<p>where <code>0</code> is a null-byte, then this function would return the virtual address for the Section Table entry for sec3<code>0</code>, since it's the first section that meets the null-byte requirement when iterating backwards through the sections, starting with the second-to-last section.</p>\n<p>I've commented the disassembly for you:</p>\n<pre><code>.text:004010D0 Get_PE_section_address proc near        \n.text:004010D0\n.text:004010D0 arg_0           = dword ptr  4\n.text:004010D0\n.text:004010D0                 mov     ecx, [esp+arg_0]             ; ecx = arg_0 = beginning of PE file mapped into memory\n.text:004010D4                 mov     eax, [ecx+3Ch]               ; eax = ((IMAGE_DOS_HEADER*)ecx)-&gt;e_lfanew\n.text:004010D7                 movzx   edx, word ptr [eax+ecx+14h]  ; edx = ((IMAGE_NT_HEADERS*)(eax+ecx))-&gt;FileHeader.SizeOfOptionalHeader\n.text:004010DC                 add     eax, ecx                     ; eax = (IMAGE_NT_HEADERS*)(eax+ecx)\n.text:004010DE                 movzx   ecx, word ptr [eax+6]        ; ecx = ((IMAGE_NT_HEADERS*)eax)-&gt;FileHeader.NumberOfSections\n.text:004010E2                 push    ebx                          ; save ebx on stack\n.text:004010E3                 add     edx, eax                     ; edx = (pointer to PE header) + SizeOfOptionalHeader\n.text:004010E5                 push    esi                          ; save esi on stack\n.text:004010E6                 lea     esi, [ecx+ecx*4]             ; esi = NumberOfSections * 5\n.text:004010E9                 lea     eax, [edx+esi*8-38h]         ; eax = (pointer to PE header) + SizeOfOptionalHeader + NumberOfSections * 0x28 - 0x38 =\n                                                                    ;       &amp;(((IMAGE_SECTION_HEADERS*)(edx + 0x18))[NumberOfSections - 2])\n.text:004010ED                 xor     edx, edx                     ; edx = section counter = 0\n.text:004010EF                 test    ecx, ecx                     ; if NumberOfSections &lt;= 0\n.text:004010F1                 jbe     short loc_401102             ; then goto loc_401102\n.text:004010F3\n\n.text:004010F3 loc_4010F3:                            \n.text:004010F3                 mov     bl, [eax+5]                  ; bl = ((IMAGE_SECTION_HEADERS*)eax)-&gt;Name[5]\n.text:004010F6                 test    bl, bl                       ; if ((IMAGE_SECTION_HEADERS*)eax)-&gt;Name[5] == 0\n.text:004010F8                 jz      short loc_401104             ; then goto loc_401104\n.text:004010FA                 inc     edx                          ; edx = (section counter)++\n.text:004010FB                 sub     eax, 28h                     ; ((IMAGE_SECTION_HEADERS*)eax)-- \n.text:004010FE                 cmp     edx, ecx                     ; if section counter &lt; NumberOfSections\n.text:00401100                 jb      short loc_4010F3             ; then goto loc_4010F3\n.text:00401102\n\n.text:00401102 loc_401102:                             \n.text:00401102                 xor     eax, eax                     ; eax = 0\n.text:00401104\n\n.text:00401104 loc_401104:                             \n.text:00401104                 pop     esi                          ; restore esi\n.text:00401105                 pop     ebx                          ; restore ebx\n.text:00401106                 retn                                 ; return eax = IMAGE_SECTION_HEADERS* with a 0x00 at Name[5]\n\n.text:00401106 Get_PE_section_address endp\n</code></pre>\n<p>Note that there's a bug in the assembly code: it iterates backwards through <code>NumberOfSections</code> Section Table entries, but since it starts with the second-to-last section, it may end up reading past the beginning of the first section's section table entry.</p>\n<blockquote>\n<p>So, my question would be if there is anyone who can tell me which\n  lines tells us that this is something about PE section address.</p>\n</blockquote>\n<p>Typically you would know the input argument to the function (in this case, the beginning of the PE module in memory), which would help you step through the assembly code. But even if you were given this code with little-to-no context (as we were here) a good hint that it's handling PE sections is the following line:</p>\n<pre><code>.text:004010DE                 movzx   ecx, word ptr [eax+6]        ; ecx = ((IMAGE_NT_HEADERS*)eax)-&gt;FileHeader.NumberOfSections\n</code></pre>\n<p>Whenever you see <code>movzx ..., word ptr [...+6]</code>, it strongly suggests that the number of sections is being read, since there aren't other common <code>word</code>-sized values beginning 6 bytes into a structure.</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Dec 14, 2014 at 21:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">hello, thx for the great comments. I was reading \"PORTABLE EXECUTABLE FILE FORMAT â€“ A REVERSE ENGINEER VIEW\" to understand the PE File format concept better. For that reason, it takes a while for my comment.  But I have one question. So, your commented line: &amp;(((IMAGE_SECTION_HEADERS*)(edx + 0x18))[NumberOfSections - 1]) . So, the edx=SizeOfOptionalHeaders, the 0x18 = 24 bytes(since Signature is 4 bytes &amp; FileHeader is 20 bytes) and now, when we add size of optional header we would point to beginning of the section table,right?If yes,then why you have written [NumberOfSections -1]?best regards</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\"><code>NumberOfSections * 0x28 - 0x38</code> = <code>NumberOfSections * 0x28 - 0x28 - 0x28 + 0x18</code> = <code>sizeof(IMAGE_SECTION_HEADER) * (NumberOfSections - 2) + 0x18</code>, so it should have been <code>... [NumberOfSections - 2]</code> in my original comments above (which would correspond with my original \"second-to-last\" description) -- I've replaced the <code>[NumberOfSections - 1]</code> with <code>[NumberOfSections - 2]</code> in my answer above.</span>",
                    "time": null
                },
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">another question: why is 0x38 = 0x28-0x28+0x18 ?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">It doesn't. See my comment above: <code>- 0x38</code> = <code>- 0x28 - 0x28 + 0x18</code>.</span>",
                    "time": null
                },
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">aaah, ok. Thx. I ve forgotten the \"-\" sign. Ok, now is everything clear.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>looks like some homemade untested code for retrieving section address retrieves address of second section if the section name[5] is null terminator \\x0</p>\n<pre><code>MOV     ECX, DWORD PTR SS:[ESP+4]          ; ecx = 1000000 base of image\nMOV     EAX, DWORD PTR DS:[ECX+3C]         ; eax = 0xe8 ptrtopeheader\nMOVZX   EDX, WORD PTR DS:[EAX+ECX+14]      ; edx = e0 = sizeofoptional header\nADD     EAX, ECX                           ; eax = peheader\nMOVZX   ECX, WORD PTR DS:[EAX+6]           ; ecx - no of sections\nPUSH    EBX\nADD     EDX, EAX                           ; edx = 10001c8 ?\nPUSH    ESI\nLEA     ESI, DWORD PTR DS:[ECX+ECX*4]      ; esi = 14 ?\nLEA     EAX, DWORD PTR DS:[EDX+ESI*8-38]   ; ? esi * 8 - 38 + edx ; 1000230\nXOR     EDX, EDX\nTEST    ECX, ECX\nJBE     SHORT 01063F5E                     ; jmp ot if no sections\nMOV     BL, BYTE PTR DS:[EAX+5]            ; checks for 0 in section name ?\nTEST    BL, BL                             ; some kind of homemade crap\nJE      SHORT 01063F6C                     ; jmps out of proc with address of second section if section name was sya .rsrc\nINC     EDX                                ; loop checking section 1\nSUB     EAX, 28                            ;  size of section header\nCMP     EDX, ECX                           ; counting no of sections\nJB      SHORT 01063F05                     ; &lt;loop&gt;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 13, 2014 at 6:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}