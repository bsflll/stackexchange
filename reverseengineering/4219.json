{
    "title": "What is the difference between step into and step over when debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/4219/what-is-the-difference-between-step-into-and-step-over-when-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using EDB and stepping through the program but I do not even know what the difference in behavior is when doing this.  I feel like this is something I should know if I ever have hope of reverse engineering this program.</p>\n</div>",
    "votes": "11",
    "answers": 1,
    "views": "14k",
    "tags": [
        "ida",
        "disassembly",
        "debuggers",
        "gdb",
        "debugging"
    ],
    "user": null,
    "time": "Apr 30, 2014 at 19:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>gdb</code> terms (and commands) are <code>step</code> and <code>next</code> and the difference is that <code>step</code> continues to run until it changes line of source code, while <code>next</code> doesn't trace into a subroutine, but rather skips over it. The <code>stepi</code> and <code>nexti</code> commands are similar but operate at the machine instruction level rather than source code level. Read more in <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html#Continuing-and-Stepping\" rel=\"nofollow noreferrer\">The Fine Manual</a>.</p>\n<p>Here's an example that may help clarify.  Let's say you have a simple project with three simple files:</p>\n<h2>main.c</h2>\n<pre><code>#include \"squareit.h\"\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    int x = 5;\n    printf(\"%d squared is %d\\n\", x, squareit(x));\n}\n</code></pre>\n<h2>squareit.h</h2>\n<pre><code>#ifndef SQUAREIT_H\n#define SQUAREIT_H\n// return the square of an integer\nint squareit(int x);\n#endif // SQUAREIT_H\n</code></pre>\n<h2>squareit.c</h2>\n<pre><code>#include \"squareit.h\"\n\nint squareit(int x) {\n    return x*x;\n}\n</code></pre>\n<p>We compile the program with debugging flags enabled (<code>gcc -g main.c squareit.c -o simple</code>) and then run <code>gdb simple</code>.  If we are sitting on the <code>printf</code> line and execute <code>step</code>, we will find ourselves in the <code>squareit()</code> function.  If instead at that same point we execute <code>next</code>, the <code>squareit()</code> function and the <code>printf()</code> functions will both execute and we will find ourselves on the last line of <code>main()</code>.</p>\n<p>The session follows:</p>\n<pre><code>(gdb) b main\nBreakpoint 1 at 0x40113d: file ./main.c, line 5.\n(gdb) run\nStarting program: ./simple \n\nBreakpoint 1, main () at ./main.c:5\n5       int x = 5;\n(gdb) step\n6       printf(\"%d squared is %d\\n\", x, squareit(x));\n(gdb) s\nsquareit (x=5) at ./squareit.c:4\n4       return x*x;\n(gdb) s\n5   }\n(gdb) s\n5 squared is 25\nmain () at ./main.c:7\n7   }\n(gdb) r\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: ./simple \n\nBreakpoint 1, main () at ./main.c:5\n5       int x = 5;\n(gdb) s\n6       printf(\"%d squared is %d\\n\", x, squareit(x));\n(gdb) next\n5 squared is 25\n7   }\n</code></pre>\n<p>The <code>gdb</code> commands used here are <code>b</code> to set a breakpoint, <code>s</code> which is an alias of <code>step</code>, <code>next</code> (has an alias of <code>n</code>) and <code>run</code> (has an alias of <code>r</code>).</p>\n</div>",
            "votes": "11",
            "user": "Edward",
            "time": "Mar 3, 2021 at 14:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}