{
    "title": "statically placing hooks on PE file's IAT",
    "link": "https://reverseengineering.stackexchange.com/questions/31233/statically-placing-hooks-on-pe-files-iat",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>recently I started writing my own PE library for C++, and wanted to implement <strong>static IAT/EAT hooking</strong>, (basically hooking by patching the file instead of hooking at runtime), I managed to successfully iterate all the thunk data and retrieve FTs/Names etc.</p>\n<p>So where's the issue?\nWell...</p>\n<p><a href=\"https://i.sstatic.net/TOuYM.png\" rel=\"nofollow noreferrer\"><img alt=\"IMAGE_IMPORT_BY_NAME\" src=\"https://i.sstatic.net/TOuYM.png\"/></a></p>\n<p>As you can see in this scheme, the <em>PE Loader</em> <strong>replaces the IMAGE_THUNK_DATA with the actual dynamic address at runtime</strong>, so, statically, you would have an offset, say <code>0x28010</code>, and at runtime the PE Loader overwrites it with <code>module_base + 0x28010</code>, where module_base would be the dynamically obtained base address of (always as an example) <code>USER32.dll</code>.</p>\n<p>If you still don't understand where I want to get; to statically hook the function I would have to do the following steps, taking as an example <code>MessageBoxA</code> function in <code>USER32.dll</code></p>\n<ol>\n<li><p><strong>copy</strong> the <strong>original function</strong> in the <strong>main module memory</strong> (say <code>.text</code> section) and save the address, we're going to use this as an \"original\" for the <strong>detour</strong> (the original function which gets called/returned at the end of the detour, to not break anything)</p>\n</li>\n<li><p><strong>write/patch</strong> the actual <strong>detour function</strong> in the main module memory (again, say <code>.text</code> section) and use the address as the detour function (the offset to replace instead of the FTs)</p>\n</li>\n</ol>\n<p>but then here's the problem, replacing the FTs with the detour, the PE Loader would calculate the FTs like <code>USER32.dll</code> + <code>detourOffset</code>, where it should instead calculate <code>mainModuleBase</code> + <code>detourOffset</code>.</p>\n<p>one way to \"fix\" this would be replacing the FTs with the \"\"ready\"\" address, so base + detour, but we're talking about STATICALLY hooking IATs, so <strong>we dont have a base address</strong>.</p>\n<p>Other than having to patch something that hooks the IAT at runtime, any idea how I could achieve this?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "169",
    "tags": [
        "c++",
        "pe",
        "function-hooking",
        "iat"
    ],
    "user": "VEIL",
    "time": "Dec 5, 2022 at 13:55",
    "comments": [],
    "answers_data": []
}