{
    "title": "Semantics of the RRX shift instruction in ARM and Carry flag updates?",
    "link": "https://reverseengineering.stackexchange.com/questions/6065/semantics-of-the-rrx-shift-instruction-in-arm-and-carry-flag-updates",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Still looking at ARM assembler semantics (and, I try hard to read the specification, I ensure you!!!). I have some doubts about the ARM bit-shift instructions in general and <code>RRX</code> in particular.</p>\n<p>Lets start with <code>RRX</code>. </p>\n<p>From <a href=\"http://www.davespace.co.uk/arm/introduction-to-arm/barrel-shifter.html\" rel=\"nofollow noreferrer\">Davespace, Introduction to ARM, section <em>Barrel Shifter</em></a>, we see that <code>RRX</code> correspond to:</p>\n<p><img alt=\"RRX: Barrel RollRotate Right Extended\" src=\"https://i.sstatic.net/Fcyhv.png\"/></p>\n<p>I suppose the <code>C</code> to be the carry flag found in the CPSR, is it correct ?</p>\n<p>Second question, in the case of the following instruction:</p>\n<pre><code>ands   r9, r0, r0, ror #3\n</code></pre>\n<p>I read that the carry flag (<code>C</code>) is set to the value of the last bit shifted out by the shifter operand (here <code>ROR</code>). </p>\n<p>My problem is that the <code>ands</code> is also supposed to update the CPSR because of its flag <code>s</code>. So, who is winning at the end ? And, what is left in the final carry flag ? The value resulting of <code>AND</code> or the value resulting of <code>ROR</code> ?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "perror",
    "time": "Aug 13, 2014 at 13:30",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I know that I should try, but I have no easy ARM platform with a debugger at hand reach by now... (though an ARM QEmu could do it as well...).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>Yes, <code>C</code> is the carry flag.</p></li>\n<li><p><code>C</code> is set from the result of the <code>ROR</code> operation. </p></li>\n</ol>\n<p>Pseudocode of the <code>AND (register)</code> instruction from the <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0406c/index.html\" rel=\"nofollow\">ARM ARM</a>:</p>\n<pre><code>if ConditionPassed() then\n    EncodingSpecificOperations();\n    (shifted, carry) = Shift_C(R[m], shift_t, shift_n, APSR.C);\n    result = R[n] AND shifted;\n    if d == 15 then // Can only occur for ARM encoding\n        ALUWritePC(result); // setflags is always FALSE here\n    else\n        R[d] = result;\n        if setflags then\n            APSR.N = result&lt;31&gt;;\n            APSR.Z = IsZeroBit(result);\n            APSR.C = carry;\n            // APSR.V unchanged\n</code></pre>\n<p>As you can see, <code>APSR.C</code> is set to the result of the shift operation, not the <code>AND</code> operation.</p>\n<p>Now, <code>AND</code> is pretty straightforward but in case of e.g. <code>ADD</code> you may have carry affected by both the shift and the add. So what happens? Again, ARM ARM to the rescue:</p>\n<pre><code>if ConditionPassed() then\n    EncodingSpecificOperations();\n    shift_n = UInt(R[s]&lt;7:0&gt;);\n    shifted = Shift(R[m], shift_t, shift_n, APSR.C);\n    (result, carry, overflow) = AddWithCarry(R[n], shifted, APSR.C);\n    R[d] = result;\n    if setflags then\n        APSR.N = result&lt;31&gt;;\n        APSR.Z = IsZeroBit(result);\n        APSR.C = carry;\n        APSR.V = overflow;\n</code></pre>\n<p>The answer: the add \"wins\" and the carry of the shift operation is discarded.</p>\n<p>BTW, a good page to check what happens for each concrete instruction is <a href=\"http://svr-acjf3-armie.cl.cam.ac.uk/main.cgi\" rel=\"nofollow\">here</a>. For example:</p>\n<pre><code>ands r9, r0, r0, ror #3\nmachine code: E01091E0\n...\ncpsr.N  ←   (r0 AND r0 ROR 3)&lt;31&gt;\ncpsr.Z  ←   r0 AND r0 ROR 3 = 0\ncpsr.C  ←   #CARRY (ROR_C (r0,3))\nr9  ←   r0 AND r0 ROR 3\nr15 ←   r15 + 4\n\n\nadds r9, r0, r0, ror #3\nmachine code: E09091E0\n...\ncpsr.N  ←   (r0 + r0 ROR 3)&lt;31&gt;\ncpsr.Z  ←   r0 + r0 ROR 3 = 0\ncpsr.C  ←   #CARRY (AddWithCarry (r0,r0 ROR 3,False))\ncpsr.V  ←   #OVERFLOW (AddWithCarry (r0,r0 ROR 3,False))\nr9  ←   r0 + r0 ROR 3\nr15 ←   r15 + 4\n</code></pre>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Aug 13, 2014 at 14:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Igor, if I meet you in real life at some point, remember me to offer you a drink (what ever you want!). :-)</span>",
                    "time": null
                }
            ]
        }
    ]
}