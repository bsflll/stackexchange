{
    "title": "FEEDFACE in OSX malware",
    "link": "https://reverseengineering.stackexchange.com/questions/1946/feedface-in-osx-malware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reverse engineering a piece of code in \"Crisis\" for fun and I encountered the following :-</p>\n<pre><code>__INIT_STUB_hidden:00004B8F                 mov     eax, 8FE00000h\n__INIT_STUB_hidden:00004B94\n__INIT_STUB_hidden:00004B94 loc_4B94:                               \n__INIT_STUB_hidden:00004B94                 mov     ebx, 41424344h\n__INIT_STUB_hidden:00004B99                 cmp     dword ptr [eax], 0FEEDFACEh\n__INIT_STUB_hidden:00004B9F                 jz      short loc_4BB9\n__INIT_STUB_hidden:00004BA1                 add     eax, 1000h\n__INIT_STUB_hidden:00004BA6                 cmp     eax, 8FFF1000h\n__INIT_STUB_hidden:00004BAB                 jnz     short loc_4B94\n</code></pre>\n<p>What is supposed to happen here? Why is the presence of <code>FEEDFACE</code> expected at the address <code>8FFF0000</code> or <code>8FFF1000</code>? I understand that <code>feedface</code>/<code>feedfacf</code> are Mach-O magic numbers -- however why are they expected to be present at those addresses?</p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "2k",
    "tags": [
        "malware",
        "osx"
    ],
    "user": null,
    "time": "Apr 28, 2013 at 15:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's the Mach-O header magic. From <code>mach-o/loader.h</code>:</p>\n<pre><code>/* Constant for the magic field of the mach_header (32-bit architectures) */\n#define MH_MAGIC        0xfeedface      /* the mach magic number */\n#define MH_CIGAM        0xcefaedfe      /* NXSwapInt(MH_MAGIC) */\n</code></pre>\n<p>In OS X, the Mach-O header is often included as part of the <code>__TEXT</code> segment so it's mapped into memory. The code is searching for a Mach-O file mapped somewhere in that address range - probably some system library - possibly so it can search for a necessary function to call (enumerate Mach-O load commands to locate the symbol table, etc.).</p>\n</div>",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2013 at 13:42",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Crisis is trying to locate dyld location in that piece of code: 32bits dyld is usually located at 8FE00000 - it uses that to solve symbols, if I'm not mistaken.</p>\n<p>Check my Crisis <a href=\"http://reverse.put.as/2012/08/06/tales-from-crisis-chapter-1-the-droppers-box-of-tricks/\">analysis</a> if you haven't already.</p>\n</div>",
            "votes": "3",
            "user": "Ange",
            "time": "May 7, 2013 at 10:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">(the link is not always working)</span>",
                    "time": null
                }
            ]
        }
    ]
}