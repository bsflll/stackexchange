{
    "title": "Firmware disassembler for c-sky processor (ck803s)",
    "link": "https://reverseengineering.stackexchange.com/questions/32676/firmware-disassembler-for-c-sky-processor-ck803s",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>can you tell me why objdump does not correctly disassemble the firmware for the C-SKY (ck803s) processor? what is .long: between the lines, unknown instructions? or am I setting the parameters for objdump incorrectly? here are mine: ./objdump -D -b binary -m csky:cs803 -EL firmware.bin</p>\n<p><a href=\"https://i.sstatic.net/HKxkC.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/HKxkC.jpg\"/></a></p>\n<p>from off. sources use CK803S processor</p>\n<p><a href=\"https://i.sstatic.net/VpNPu.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VpNPu.jpg\"/></a></p>\n<p>this is how the bootloader works</p>\n<p><a href=\"https://i.sstatic.net/7UutO.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7UutO.jpg\"/></a></p>\n<p>The firmware is launched from the specified address at offset 0x04, look at the dump merged from the flash drive</p>\n<p><a href=\"https://i.sstatic.net/dd0ov.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/dd0ov.jpg\"/></a></p>\n<p>objdump output</p>\n<p><a href=\"https://i.sstatic.net/9l5dQ.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/9l5dQ.jpg\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "203",
    "tags": [
        "firmware-analysis"
    ],
    "user": "Andynvkz",
    "time": "Jan 29, 2024 at 13:32",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">Are you sure that’s a code segment? I haven’t used objdump for ages, but it does say data at the top not code. Do you know what the entry point for the loaded firmware is?</span>",
            "time": null
        },
        {
            "user": "Andynvkz",
            "text": "<span class=\"comment-copy\">There is no 32-bit instruction from the entire dump</span>",
            "time": null
        },
        {
            "user": "Andynvkz",
            "text": "<span class=\"comment-copy\">I had an idea to write my own disassembler, but then the first instruction is 0xC001112C, according to the description this is a 32-bit instruction, this is indicated by bits 30 and 31, but I did not find such an instruction in the documentation</span>",
            "time": null
        },
        {
            "user": "Andynvkz",
            "text": "<span class=\"comment-copy\">Is it possible to tell objdump that the data and instructions are 32 bit? it even selects the data as 16-bit little-endian</span>",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\">please do not post pictures of text ... post the text instead ... <a href=\"https://idownvotedbecau.se/imageofcode\" rel=\"nofollow noreferrer\">idownvotedbecau.se/imageofcode</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You've asked multiple questions. I don't know that version of <code>objdump</code> enough to comment on whether its a bug or missing option.</p>\n<p>However, I can explain how the 32-bit instructions work.</p>\n<p>The c-sky instruction stream is a series of 16-bit words.  If bits 15 and 14 of the instruction word are NOT both <code>1</code>s then it's a 16-bit instruction.\nHowever, if bits 15 and 14 of the instruction word are both <code>1</code>s then it's a 32-bit instruction with the low 16-bits of the instruction in the following word.</p>\n<p>Consider a hypothetical instruction with hex coding <code>C1234567</code>.</p>\n<p>This will be stored as two 16-bit words <code>C123</code> and <code>4567</code> in that order</p>\n<p>In a big-endian environment, this will be stored as the following bytes -</p>\n<pre><code>C1 23 45 67\n</code></pre>\n<p>In a little-endian environment, this will be stored as the following bytes -</p>\n<pre><code>23 C1 67 45\n</code></pre>\n<hr/>\n<p>In your firmware above the instruction at <code>3001000</code> is correct but the following instruction at <code>3001002</code> is actually <code>C0016420</code></p>\n<pre><code>03001000: 112c      lrw     r1, 0x80000100\n03001002: c0016420  mtcr    r1, cr&lt;0,0&gt;\n</code></pre>\n<p>Writing to control registers is very plausible in boot/init code.</p>\n<p>The later 32-bit instruction with .long in the objdump output also seem to make sense.</p>\n</div>",
            "votes": "1",
            "user": "Ian Cook",
            "time": "Feb 10, 2024 at 16:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The whole problem is that all versions of objdump and even llvm-objdump incorrectly disassemble 32-bit instructions of C-SKY processors, I managed to find a working objdump version 2.27 on the website <a href=\"https://www.xrvm.cn/\" rel=\"nofollow noreferrer\">https://www.xrvm.cn/</a> there is also an Eclipse-based IDE</p>\n<p><a href=\"https://i.sstatic.net/fZfAe.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/fZfAe.jpg\"/></a></p>\n</div>",
            "votes": "1",
            "user": "Andynvkz",
            "time": "Feb 24, 2024 at 4:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}