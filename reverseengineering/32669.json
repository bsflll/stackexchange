{
    "title": "Question about anti-debug methods and anti-anti-debug methods",
    "link": "https://reverseengineering.stackexchange.com/questions/32669/question-about-anti-debug-methods-and-anti-anti-debug-methods",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've come across several binaries that have simple anti-debug methods in place, like checking <code>IsDebuggerPresent()</code>, <code>NtQueryInformationProcess()</code>, etc. But I recently came across a binary that looked totally new to me. It was completely filled with <code>add byte ptr ds:[eax], al</code> instructions. The IDA tree graph was so large that it wouldn't even load, and after IDA took 20 minutes to process the instructions to load it, the file was 500mb+ on disk (the binary is 30mb). I've attached a screenshot of what some of it looks like here:</p>\n<p><a href=\"https://i.sstatic.net/zV1cY.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/zV1cY.png\"/></a></p>\n<p>Any time during debugging when it hits one of these it basically crashes immediately.</p>\n<p>I was able to execute the binary via <code>rundll32.exe</code> and then attach to it really quickly, putting some hardware breakpoints on some stack strings that looked interesting, but then I would see this:</p>\n<p><a href=\"https://i.sstatic.net/ejGOE.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ejGOE.jpg\"/></a></p>\n<p>Where it appears any time I tried to attach to the running process with the debugger, this stack string saying \"noway\" would always get loaded, I'd tried to step through some instructions, and then it eventually would crash.</p>\n<p>When looking at the binary through DIE, the import table only has one import: <code>MSVBM60.dll</code>, however, when I run the binary through <code>rundll32.exe</code> and then quickly attach to the running process, it starts to load dozens of other Windows DLL's.</p>\n<p>My questions are this:</p>\n<ol>\n<li><p>Why is it that these kinds of instructions work differently when stepping through it on a debugger vs. having it run like a normal binary? I thought that the debugger would execute the code the same way the binary normally would, is that not the case? What's this called and where can I learn more about it?</p>\n</li>\n<li><p>What kind of anti-debugging method with all of these what appear to be junk instructions called?</p>\n</li>\n<li><p>What can I do to get around this? Basically to where I can remove all of the junk that is getting in the way and step through the program the same way it would normally run under normal execution?</p>\n</li>\n<li><p>What kind of anti-debug method is it where the import table is basically one library, but then when the program actually runs, it imports several others? Are they just stored dynamically as variable names somewhere in the binary, and it manually loads them in?</p>\n</li>\n</ol>\n<p>If anyone is interested in looking at this binary you can get it her, but WARNING!!! IT IS MALICIOUS: <a href=\"https://mega.nz/file/ssBBGI4C#YcOYWDmENZkfpdPKwV6h0Iw9wDgJWsced5oXcy7R8bc\" rel=\"nofollow noreferrer\">https://mega.nz/file/ssBBGI4C#YcOYWDmENZkfpdPKwV6h0Iw9wDgJWsced5oXcy7R8bc</a></p>\n<p>Password to it is <em>infected</em></p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "113",
    "tags": [
        "x64dbg",
        "anti-debugging"
    ],
    "user": "Joshua Terrill",
    "time": "Jan 26, 2024 at 3:35",
    "comments": [
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\"><code>filled with add byte ptr ds:[eax], al instructions</code> ... look at the bytes  ... they are not instructions</span>",
            "time": null
        },
        {
            "user": "Joshua Terrill",
            "text": "<span class=\"comment-copy\">Every time it gets past one of those lines, it throws an exception though, so I'm not sure what is causing that to happen.</span>",
            "time": null
        },
        {
            "user": "ynwarcs",
            "text": "<span class=\"comment-copy\">the program does run in the same manner whether it's being debugged or not, unless the debugger intervenes. what this means is that the program you're debugging is detecting that you've attached the debugger and forcefully doing something unexpected to deter you from debugging. there's a very comprehensive list of anti-debug techniques <a href=\"https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf\" rel=\"nofollow noreferrer\">here</a> that will hopefully help you get to the bottom of it.</span>",
            "time": null
        }
    ],
    "answers_data": []
}