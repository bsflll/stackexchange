{
    "title": "Reverse engineer decryption of cookie",
    "link": "https://reverseengineering.stackexchange.com/questions/27097/reverse-engineer-decryption-of-cookie",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>TL; DR</h1>\n<p>Is there any way you might suggest decrypting this cookie? It was saved under the name <em>mail</em>, so I suspect it encrypts an email address:</p>\n<p><code>4520382156EFC790B5B54696C4E175B5695F03D2D59C33858A62D6CDA18B7AB2</code></p>\n<p><strong>Edit:</strong> Here is another one using another account:</p>\n<p><code>BFE069DB7B7FDED51A7F81DF8CE3CAD8FB8B14D70BE3FA32F26C4A2136170CD6</code></p>\n<h2>Motivation</h2>\n<p>When using a web portal, I noticed the same cookie is generated for my username every single time (i.e., it does not appear to be random). My concern is that there are several API endpoints with private info that can be accessed anonymously just using said string in the URL.\nI suspect the string is a kind of user identifier, but I am not sure if it is generated using the values from my email address, or randomly based on time of creation.</p>\n<h2>More details</h2>\n<p>I can't go into specifics as I don't want this flaw to be exposed, compromising my info and getting me into trouble. However I know the portal is hosted on <strong>Microsoft IIS Server</strong> and built using the <strong>ASP.NET</strong> framework. I also suspect the implementation is rudimentary, so they probably aren't doing anything more sophisticated.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "645",
    "tags": [
        "decryption",
        "websites"
    ],
    "user": "edvilme",
    "time": "Feb 24, 2021 at 20:24",
    "comments": [
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">Might be possible might be not, it's not possible to tell using information you provided. If the length is const no matter how long is your mail it's probably hasing function and you can't recover data from it.</span>",
            "time": null
        },
        {
            "user": "Remko",
            "text": "<span class=\"comment-copy\">Looks like a hash, length matches a sha256 hash...</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">As the data is hex encoded I would also assume it is a hash value. Encrypted values are often larger and therefore more often base64 encoded as it is more efficient. Reconstructing a hash is very complicated as you don't know what additional data is included in the hash.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Findings</h1>\n<p>After some digging around in GitHub (turns out several of the portal component's source code is worryingly on GitHub, although I had to decompile it), I discovered that the string is generated using the <strong>AES Rijndael Algorithm</strong>.</p>\n<p>I was able to succesfully generate the second string using an arbitrary key like <code>\"#lk$.346hopHXIsd\"</code> (changed for security reasons). I was unable to do the same for the first one. I suspect a different key is used as both emails correspond to two different kinds of users. I will draft a program that will brute force several keys until it finds a match. Will report back in case this helps (or entertains) anyone.</p>\n<p><strong>Edit:</strong></p>\n<p>I found a GitHub repo that did several requests to the server, so figured it might have some answers. After browsing through the code, and decompiling a source file (conveniently named Authentication), I extracted the key.</p>\n<p><strong>Edit 2:</strong></p>\n<p>The key matched one of the cyphered strings. However, as @Robert points out, it is virtually impossible to brute force the algorithm. I will try other methods. I leave this thread open to suggestions and in case it is of help to anyone :D</p>\n<p><strong>Edit 3:</strong>\nSolved.</p>\n</div>",
            "votes": "0",
            "user": "edvilme",
            "time": "Mar 23, 2021 at 23:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">Good luck, unless the AES key generator respectively password generator is not totally broken a brute-force attack may require a few dozen up to a few hundred years.</span>",
                    "time": null
                },
                {
                    "user": "edvilme",
                    "text": "<span class=\"comment-copy\">LOL, yup. Got excited when it worked and I assumed it would be pretty straightforward then. I then realized the millions of combinations needed and how the algorithm is designed to prevent such brute force attacks. Will try to search for similar code online to test my luck. Thanks for the answer :D</span>",
                    "time": null
                }
            ]
        }
    ]
}