{
    "title": "Insert a function call in an ELF executable",
    "link": "https://reverseengineering.stackexchange.com/questions/10928/insert-a-function-call-in-an-elf-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to patch an ELF executable to insert a function call (the function <code>s2e_rawmon_loadmodule</code> and its dependencies are to be linked statically, preferably) at the beginning. </p>\n<p><a href=\"https://reverseengineering.stackexchange.com/a/192\">This answer</a> seems to have a nice set of pointers. If I have understood correctly, dynamic instrumentation using PIN/Valgrind/DynamoRIO alters the address space. The addresses of the subsequent instructions get changed which I don't want. </p>\n<p>For static instrumentation, <a href=\"http://www.eresi-project.org/\" rel=\"nofollow noreferrer\">ERESI project</a> could have been useful. But, it looks like the project has been abandoned for long. I am not being able to build the tool on Ubuntu 14.04 due to compilation issues.</p>\n<p>Can anybody help me out with some workaround?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "elf",
        "patching",
        "instrumentation"
    ],
    "user": "sherlock",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">I don't understand if the function you want to call is already in the binary or not, and/or if you want to modify just one binary or to design a generic way to do it. I'd say you could just create a new section manually, drop your code in it (and the first few instructions of OEP), and put a JMP at the OEP.</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">would you post the link to your compilation issues ?</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">OK, I built it on ubuntu 14.04. The only issue I encountered was usage of word __unbounded in entry.c which ( word __unbounded) can be freely removed without any problem.</span>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<span class=\"comment-copy\">@ws Yes, it works fine with __unbounded deleted. But, does that affect the functionality anyway?</span>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<span class=\"comment-copy\">@Dillinur No, the code does not reside in the binary.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems that you're trying to run some code in the context of the binary before anything meaningful happens.</p>\n<p>You should read some resources about ELF infection, for example on <a href=\"http://vxheaven.org/lib/vrn00.html\" rel=\"nofollow\">vxheavens</a> or <a href=\"http://www.hackercurriculum.org/elf\" rel=\"nofollow\">here</a>.</p>\n<p>But since you're trying to <em>inject</em>/<em>execute</em> <code>s2e_rawmon_loadmodule</code> from <a href=\"https://github.com/dslab-epfl/s2e/blob/master/docs/Plugins/RawMonitor.rst\" rel=\"nofollow\">s2e</a>, maybe you should just use a debugger instead, because I'm quite sure that this is not how it's supposed to be used.</p>\n</div>",
            "votes": "1",
            "user": "jvoisin",
            "time": "Sep 22, 2015 at 23:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">How come a debugger help me in injecting a function while the target binary is running on a Debian guest inside s2e framework? Of course, <code>s2e_rawmon_loadmodule</code> is supposed to be used while source is available. In my case, source is missing, only binary is assumed to be present.</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Because you didn't mentioned that the software was running on a host inside the s2e framework ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}