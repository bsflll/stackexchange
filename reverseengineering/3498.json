{
    "title": "Detecting recursive functions in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/3498/detecting-recursive-functions-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I detect/mark recursive functions in IDA?</p>\n<p>Trivial method would be to check every function's call list and if it calls itself then it's recursive. I'ld like to put a comment or some kind of indicator that would help me distinguish these functions. </p>\n</div>",
    "votes": "12",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "ida-plugin",
        "functions",
        "callstack",
        "automation"
    ],
    "user": "Dominik Antal",
    "time": "Jan 20, 2014 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is not trivial task. You can do it relatively easy if you not taking in account indirect calls (for example such as virtual functions in C++) and calls from another function like this:</p>\n<pre><code>int f() {\n    g();\n}\n\nint g() {\n    f();\n}\n</code></pre>\n<p>It can be much more complicated if one of your functions is in another binary (dll for example). So, there are two ways to do it, a static and a dynamic way.</p>\n<h3></h3>\n<h3>Recursive assembly traversal - static analysis approach</h3>\n<p>You should write the script in IDAPython that passes over the function,\nand recursively processes each call. If you find current function in collected stack the function is recursive.</p>\n<p>Very simple variant looks like this:</p>\n<pre><code># I didn't check it, use carefully, beware the errors in this code\nimport idautils\nimport idc\nimport idaapi\n\ndef handle_function(func_start):\n    global stack\n    if func_start in stack:\n        print \"This is recursive function\", hex(func_start), Name(func_start)\n        for x in stack:\n            print \"\\t\", hex(x)\n        #insert your renaming here, it should be idc.MakeName\n        return\n\n    stack.append(func_start)\n    for h in idautils.FuncItems(func_start):\n        for r in idautils.XrefsFrom(h, 0):\n            if r.type == fl_CF or r.type == fl_CN:\n                print hex(h), \"--&gt;\", hex(r.to)\n                if r.to == func_start:\n                    # Insert renaming here too for simple recursion\n                    print \"It is simple recursive function that calls itself directly\"\n                    return\n                else:\n                    handle_function(r.to)\n    stack = stack[:-1]\n\nfor f in idautils.Functions():\n    stack = []\n    handle_function(f)\n</code></pre>\n<h3></h3>\n<h3>Breakpoint analysis - dynamic analysis approach</h3>\n<p>Write script in IDAPython that recognizes all function prologues and filters out all functions that doesn't call anything.\nPut breakpoint on each collected prologue and run the program.\nEach time the program stops, analyze stack of the program using IDAPython in order to find function you are stopped on in the stack. If you find it, the function is recursive.</p>\n</div>",
            "votes": "12",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I lack 9 reputation points, so sadly I can't comment the great answer by w_s. ;)</p>\n<p>Just for completeness, the concept described is known in graph theory as \"Tarjan's Algorithm\" for finding strongly connected components. </p>\n<p><a href=\"https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\" rel=\"nofollow noreferrer\">Wikipedia</a> has a nice animation that helps following the steps.<img alt=\"Tarjan's Algorithm\" src=\"https://zippy.gfycat.com/ActualSinfulConch.gif\"/></p>\n<p>For study, here is another (more formal) <a href=\"http://www.logarithmic.net/pfh-files/blog/01208083168/tarjan.py\" rel=\"nofollow noreferrer\">Python implementation</a>, it's the one I have used for finding loops in functions in <a href=\"https://bitbucket.org/daniel_plohmann/simplifire.idascope/src/f353158d25b331c69e1b6ac360aa46cfff672dd3/idascope/core/helpers/Tarjan.py?at=master\" rel=\"nofollow noreferrer\">IDAscope</a> but it's easily adapted for finding recursive functions.</p>\n</div>",
            "votes": "15",
            "user": "Community",
            "time": "Mar 10, 2017 at 9:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Personally, I think that your idea is more than a comment, it deserved to be an answer anyway. So, don't feel bad about it. :)</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">and now you have your reputation points and able to comment :)</span>",
                    "time": null
                }
            ]
        }
    ]
}