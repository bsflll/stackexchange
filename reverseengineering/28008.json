{
    "title": "Inserting two digits into binary per Hex - without making EXE corrupt",
    "link": "https://reverseengineering.stackexchange.com/questions/28008/inserting-two-digits-into-binary-per-hex-without-making-exe-corrupt",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I dont have much knowledge with assemblers. I beg ur pardon in advance.</p>\n<p>I need to change an IP address in a win-binary (Net) where the IP its hard-coded.\nJust changing the IP with an Hex Editor would be that easy.\nBut the new IP has longer Octet - e.g.</p>\n<p><a href=\"https://i.sstatic.net/w1CCh.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/w1CCh.png\"/></a></p>\n<p>I want to change the 123.12.12.123 to 123.12<strong>3</strong>.12<strong>3</strong>.123\nJust inserting some digits per Hex Editor makes the file corrupt (adresses from routines etc. are moving I guess).</p>\n<p>What would be the \"easiest\" way to do that?\nThanks.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "157",
    "tags": [
        "patching",
        ".net",
        "hex",
        "strings"
    ],
    "user": "TefoD",
    "time": "Jul 26, 2021 at 9:16",
    "comments": [
        {
            "user": "Guillaume",
            "text": "<span class=\"comment-copy\">When you speak about a \"win-binary (Net)\", are you referring to a .Net (dot net) application ?</span>",
            "time": null
        },
        {
            "user": "TefoD",
            "text": "<span class=\"comment-copy\">I guess so. In Ghidra I can see that \"mscoree.dll\" is been imported.</span>",
            "time": null
        },
        {
            "user": "Guillaume",
            "text": "<span class=\"comment-copy\">You can then use 'dnSpy' to edit the method/class you want to, and recompile your application when you are done</span>",
            "time": null
        },
        {
            "user": "TefoD",
            "text": "<span class=\"comment-copy\">@Guillaume.. Wow, that was a great hint.. dnSpy is a great piece of software with intuitive operation.. I am just amazed, how easy this was possible, Thank you very much. btw: I can't accept a comment as a solution - if you dont mind, just post it as answer; I will accept.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you are dealing with a dot Net application, this will be super easy.</p>\n<p>As dot Net application are 'compiled' using an Intermediate Language (IL), you may be able to recover something very close to the original source code. If the binary is not obfuscated/protected, you just have to open-up your application in a .NET editor.</p>\n<p>DnSpy is the one that I find the most complete. Other software can be used, like ILSpy for instance.</p>\n<p>Theses tools allows you to edit the decompiled code, then to re-compile it.</p>\n<p>In your case, you have to find where this IP is being declared, change it to whatever you want, then recompile the binary.</p>\n<p>This is not allays that easy, but you are lucky: you found the easier reverse-engineering case :)</p>\n</div>",
            "votes": "2",
            "user": "Guillaume",
            "time": "Jul 16, 2021 at 14:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}