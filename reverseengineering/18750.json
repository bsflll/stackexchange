{
    "title": "Getting to the specific offset in assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/18750/getting-to-the-specific-offset-in-assembly-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I try to reverse engineering an application and I came to the point that I don't understand. I have the following disassembled code with <code>gdb</code>:</p>\n<pre><code>   │0x7ffff76f7e4b &lt;_ZN16CRRegistratorImp8RegisterEbPv+587&gt; je     0x7ffff76f7ce6 &lt;_ZN16CRRegistratorImp8RegisterEbPv+230&gt;                                                              │\n   │0x7ffff76f7e51 &lt;_ZN16CRRegistratorImp8RegisterEbPv+593&gt; mov    rdi,QWORD PTR [rbp+0x10]                                                                                             │\n   │0x7ffff76f7e55 &lt;_ZN16CRRegistratorImp8RegisterEbPv+597&gt; mov    rax,QWORD PTR [rdi]                                                                                                  │\n   │0x7ffff76f7e58 &lt;_ZN16CRRegistratorImp8RegisterEbPv+600&gt; call   QWORD PTR [rax+0x30]                                                                                                 │\n   │0x7ffff76f7e5b &lt;_ZN16CRRegistratorImp8RegisterEbPv+603&gt; test   al,al                                                                                                                │\n   │0x7ffff76f7e5d &lt;_ZN16CRRegistratorImp8RegisterEbPv+605&gt; je     0x7ffff76f7ce6 &lt;_ZN16CRRegistratorImp8RegisterEbPv+230&gt;                                                              │\n   │0x7ffff76f7e63 &lt;_ZN16CRRegistratorImp8RegisterEbPv+611&gt; jmp    0x7ffff76f7d29 &lt;_ZN16CRRegistratorImp8RegisterEbPv+297&gt;      \n   │0x7ffff76f7e68 &lt;_ZN16CRRegistratorImp8RegisterEbPv+616&gt; xor    edx,edx                                                                                                              │\n   │0x7ffff76f7e6a &lt;_ZN16CRRegistratorImp8RegisterEbPv+618&gt; mov    rsi,r12                                                                                                              │\n   │0x7ffff76f7e6d &lt;_ZN16CRRegistratorImp8RegisterEbPv+621&gt; mov    rdi,rbp                                                                                                              │\n   │0x7ffff76f7e70 &lt;_ZN16CRRegistratorImp8RegisterEbPv+624&gt; call   0x7ffff7596518 &lt;_Z18CallRegGuiCallbackP13CRRegistratorPv13ERegGUIAction@plt&gt;                                         │\n   │0x7ffff76f7e75 &lt;_ZN16CRRegistratorImp8RegisterEbPv+629&gt; jmp    0x7ffff76f7e41 &lt;_ZN16CRRegistratorImp8RegisterEbPv+577&gt;                                                              │\n   │0x7ffff76f7e77 &lt;_ZN16CRRegistratorImp8RegisterEbPv+631&gt; mov    edx,0x4                                                                                                              │\n   │0x7ffff76f7e7c &lt;_ZN16CRRegistratorImp8RegisterEbPv+636&gt; mov    rsi,r12                                                                                                              │\n   │0x7ffff76f7e7f &lt;_ZN16CRRegistratorImp8RegisterEbPv+639&gt; mov    rdi,rbp                                                                                                              │\n   │0x7ffff76f7e82 &lt;_ZN16CRRegistratorImp8RegisterEbPv+642&gt; call   0x7ffff7596518 &lt;_Z18CallRegGuiCallbackP13CRRegistratorPv13ERegGUIAction@plt&gt;    \n</code></pre>\n<p>This is not the whole procedure, but I think it is not needed. What I want to know is, how to get to to the address <code>0x7ffff76f7e68</code> (<code>+616</code>). \nI was thinking that somewhere in this procedure I will find something like this instruction:</p>\n<p><code>jmp    0x7ffff76f7e68 &lt;_ZN16CRRegistratorImp8RegisterEbPv+616&gt;</code></p>\n<p>but there is no such instruction in this procedure and it is not possible to get it there because on address <code>+611</code> there is the the <code>jmp</code> instruction. So I have the following questions:</p>\n<ol>\n<li>Is it dead code?</li>\n<li><p>Is it possible to jump directly to this specific address (<code>+616</code>) from other procedure?</p></li>\n<li><p>Is there another way to get to this address?</p></li>\n</ol>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "540",
    "tags": [
        "disassembly"
    ],
    "user": "Tom",
    "time": "Jul 10, 2018 at 20:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several possibilities. At least it doesn't look like junk, so probably the disassembler engine built into GDB is right about the opcodes.</p>\n<p>GDB is somewhat limited when it comes to showing those details that count when reverse engineering a bigger target. This <em>could</em> actually be dead code, since the names indicate that this is C++ code. Hence there's always a chance that certain virtual functions are never referenced and yet remain in the binary. Essentially there are corner cases that would lead to dead code. But it's hard to tell from this small window into the target that you provide and without more knowledge about the target in question.</p>\n<p>First I would start by <a href=\"https://demangler.com/\" rel=\"nofollow noreferrer\">demangling the names</a>, since you seem to have debug symbols for the application:</p>\n<pre><code>CRRegistratorImp::Register(bool, void*)\nCallRegGuiCallback(CRRegistrator*, void*, ERegGUIAction)\n</code></pre>\n<p>As per <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#List_of_x86_calling_conventions\" rel=\"nofollow noreferrer\">this list</a> you can see that the Linux ABI (System V AMD64 ABI) makes use of the following registers (in order) on x86-64: RDI, RSI, RDX, RCX, R8, R9, XMM0–7.</p>\n<p>From this knowledge I'd deduce that these could be two very small wrapper functions to do a similar job:</p>\n<pre><code>; first function\nxor    edx,edx\nmov    rsi,r12\nmov    rdi,rbp\ncall   0x7ffff7596518 &lt;_Z18CallRegGuiCallbackP13CRRegistratorPv13ERegGUIAction@plt&gt;\njmp    0x7ffff76f7e41 &lt;_ZN16CRRegistratorImp8RegisterEbPv+577&gt;\n; second function below\nmov    edx,0x4\nmov    rsi,r12\nmov    rdi,rbp\ncall   0x7ffff7596518 &lt;_Z18CallRegGuiCallbackP13CRRegistratorPv13ERegGUIAction@plt&gt;\n</code></pre>\n<p>Roughly (respectively:</p>\n<pre><code>CallRegGuiCallback($RDI, $RSI, 0);\nCallRegGuiCallback($RDI, $RSI, 0x4);\n</code></pre>\n<p>Without a proper disassembler you won't be able to tell if that code is dead (== unreferenced). GDB is just too crude a tool for this job. And even with a proper disassembler you will not be a 100% sure that it is dead code even though the disassembler \"reasoned\" it is.</p>\n<p>That said, give <a href=\"https://www.radare.org/r/\" rel=\"nofollow noreferrer\">radare2</a> (free of charge, open source), Hopper (commercial, but affordable) or IDA Pro (commercial, but relatively expensive, yet very very powerful) a try. These should give you a considerably better idea of what parts of the code are referenced by other parts of the code.</p>\n<p>To answer your questions:</p>\n<ol>\n<li><p>Is it dead code?</p>\n<p>Possible, but there's no way to tell for certain (i.e. to rule out false negatives!).</p></li>\n<li><p>Is it possible to jump directly to this specific address (+616) from other procedure?</p>\n<p>Certainly, a <code>jmp</code> may actually even be sufficient, semantically, because these small functions seem to pass the parameters to the <code>call</code> themselves.</p></li>\n<li><p>Is there another way to get to this address?</p>\n<p>Yeah, from the top of my head I could come up with about half a dozen or so, and there are probably more sneaky ones. However, that (sub-)question is somewhat open-ended. Anyway, you could <code>jmp</code> or use any kind of conditional jump. You could <code>call</code> or you could load the address into a register and do an indirect <code>call</code> or you could obfuscate the address, load it into a register and then do whatever kind of bit-juggling and arithmetic and an indirect call, or you could have a vtable that would end up calling this particular chunk of code.</p></li>\n</ol>\n<p>A bigger chunk of disassembly might help in this case.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Jul 10, 2018 at 21:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}