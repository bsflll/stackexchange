{
    "title": "Automate looking for calls to an offset of a structure",
    "link": "https://reverseengineering.stackexchange.com/questions/21320/automate-looking-for-calls-to-an-offset-of-a-structure",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to automate the search for function calls to a function that does not live in the binary and where the function address is passed, via a pointer to a struct, at runtime through a function parameter.</p>\n<p>As an example, the first parameter of a JNI class is <code>JNIEnv*</code> which is a struct that contains, among other things, pointers to JNI functions. If you decompile a JNI function, you might see something like this:</p>\n<pre><code>Java_com_example_ExampleClass_exampleMethod(JNIEnv*, ...) {\n   ...\n   clazz = (*(*env)-&gt;FindClass)(env,jniClass);\n   ...\n}\n</code></pre>\n<p>Using Ghidra's pcode API, is it possible to automate locating all references to the <code>FindClass</code> function? For reference, the call to <code>FindClass</code> will look something like the following in x86 assembly and pcode.</p>\n<pre><code>  000fd2be 8b 0f           MOV        ECX,dword ptr [EDI]\n                                              $U16f0:4 = LOAD ram(EDI)\n                                              ECX = COPY $U16f0\n\n\n  000fd2c7 ff 51 18        CALL       dword ptr [ECX + 0x18]\n                                              $U3a0:4 = INT_ADD ECX, 24:4\n                                              ESP = INT_SUB ESP, 4:4\n                                              STORE ram(ESP), 0xfd2ca:4\n                                              $U16f0:4 = LOAD ram($U3a0)\n                                              CALLIND $U16f0\n</code></pre>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra"
    ],
    "user": "Ayrx",
    "time": "May 16, 2019 at 8:24",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">i was going to suggest did you try  <a href=\"https://reverseengineering.stackexchange.com/questions/25760/getting-the-algorithm-used-inside-this-so-file/25795#25795\">JniAnalyzer mentioned in this query</a>  but the nick looks like it is related</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to do this using the pcode API, you will have to examine the arguments to the <a href=\"https://ghidra.re/courses/languages/html/additionalpcode.html#cpui_ptrsub\" rel=\"nofollow noreferrer\">PTRSUB</a> operation, which is the equivalent of <code>-&gt;</code> on the C level.</p>\n<blockquote>\n<p>A PTRSUB performs the simple pointer calculation, input0 + input1, but also indicates explicitly that input0 is a reference to a structured data-type and one of its subcomponents is being accessed. Input0 is a pointer to the beginning of the structure, and input1 is a byte offset to the subcomponent. As an operation, PTRSUB produces a pointer to the subcomponent and stores it in output.</p>\n</blockquote>\n<p>Note that the <code>PTRSUB</code> operation is not a part of the raw pcode posted in the question, but it is inserted by the decompiler during the analysis process. Quoting the documentation again:</p>\n<blockquote>\n<p>The following opcodes are not generated as part of the raw translation of a machine instruction into p-code operations, so none of them can be used in a processor specification. But, they may be introduced at a later stage by various analysis algorithms.</p>\n</blockquote>\n<p>The following code will find all calls to a structure offset in a given function:</p>\n<pre><code>DecompileResults results = decompiler.decompileFunction(function,\n    decompiler.getOptions().getDefaultTimeout(), monitor);\nHighFunction hfunc = results.getHighFunction();\n\nfor(PCodeOpAST op : hfunc.getPcodeOps()) {\n    if (op.getOpcode() == PcodeOp.CALLIND) {\n        Varnode funcAddress = op.getInput(0);\n\n        while (funcAddress.getDef().getOpcode() == PcodeOp.LOAD)\n            funcAddress = funcAddress.getDef().getInput(1);\n\n        if (funcAddress.getDef().getOpcode() == PcodeOp.PTRSUB) {\n            Varnode struct = funcAddress.getDef().getInput(0);\n            Varnode field = funcAddress.getDef().getInput(1);\n\n            DataType structDataType = struct.getHigh().getDataType();\n            while(structDataType instanceof Pointer || structDataType instanceof TypeDef) {\n                if (structDataType instanceof Pointer)\n                    structDataType = ((Pointer)structDataType).getDataType();\n                else if (structDataType instanceof TypeDef)\n                    structDataType = ((TypeDef)structDataType).getDataType();\n            }\n\n            if (structDataType instanceof Structure &amp;&amp; field.isConstant()) {\n                Structure structure = (Structure) structDataType;\n                int offset = (int)field.getOffset();\n\n                DataTypeComponent component = structure.getComponentAt(offset);\n                System.out.println(\"Call to \" + component.getFieldName() +\n                    \" in \" + structure.getName());\n                for (int i = 1; i &lt; op.getNumInputs(); ++i) {  // 0 is the function address, 1+ are arguments\n                    System.out.println(\" with argument \" + i + \" = \" + op.getInput(i).getAddress());\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<hr/>\n<p>Alternatively, you can search for all references to the FindClass field in the program instead, but note that this will list all types of references, not just calls:</p>\n<pre><code>DataType jniEnvDataType = program.getDataTypeManager().getDataType(\"/jni_all.h/JNIEnv\");\nAccumulator&lt;LocationReference&gt; accumulator = new ListAccumulator&lt;&gt;();\nReferenceUtils.findDataTypeReferences(accumulator, jniEnvDataType, \"FindClass\",\n    program, TaskMonitor.DUMMY);\nfor(LocationReference location : accumulator) {\n    System.out.println(location.getLocationOfUse());\n}\n</code></pre>\n<p>(this is basically the equivalent of \"Find Uses of JNIEnv.FindClass ...\" in the UI)</p>\n</div>",
            "votes": "3",
            "user": "krzys_h",
            "time": "Oct 2, 2020 at 19:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "karsten",
                    "text": "<span class=\"comment-copy\">nice solution for the problem!</span>",
                    "time": null
                }
            ]
        }
    ]
}