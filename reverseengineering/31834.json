{
    "title": "Load process from memory dump",
    "link": "https://reverseengineering.stackexchange.com/questions/31834/load-process-from-memory-dump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are there any tools that can \"record\" the memory space of a process and then be able to restore it from a certain timestamp? As in, the process is recreated in the exact same state as if \"loading a saved game\".</p>\n<p>Context is that of a game that crashes either while attempting to save/load a game or certain conditions are met (e.g. unit count &gt; 5000). There are no debug logs.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "249",
    "tags": [
        "memory",
        "memory-dump"
    ],
    "user": "Sebi",
    "time": "May 1, 2023 at 15:36",
    "comments": [
        {
            "user": "josh poley",
            "text": "<span class=\"comment-copy\">You want a whole VM snapshot. Capturing just the process memory isn't enough (you also need to capture OS objects etc).</span>",
            "time": null
        },
        {
            "user": "Sebi",
            "text": "<span class=\"comment-copy\">@joshpoley But what binds the process' memory image to the rest of the os; sure there may be file descriptors, I/O, network states, but other than that the process should be \"well\" contained, shouldn't it?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What you want exists and is known -- among other terms -- under the term \"time travel debugging\" (TTD), \"replay debugging\" and \"record and replay debugging\". Your processor needs to support it.</p>\n<ul>\n<li>WinDbgX (the one from the MS store) <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview\" rel=\"nofollow noreferrer\">has support</a> for that (i.e. <code>winget install -e --id Microsoft.WinDbg</code>).</li>\n<li>GDB also <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html\" rel=\"nofollow noreferrer\">has support</a> for it.</li>\n<li><a href=\"https://rr-project.org/\" rel=\"nofollow noreferrer\">rr</a> is even dedicated to the whole concept.</li>\n<li>VMware used to include the feature called \"replay debugging\" for a few major versions; unfortunately it got scrapped.</li>\n</ul>\n<p><strong>However, it's not possible to take <em>a mere memory dump</em> and \"revive\" a process based on that.</strong> The record &amp; replay method involves a whole lot more than just the memory state. Also, memory dumps often are only an excerpt of the full memory space of a process.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "May 2, 2023 at 9:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sebi",
                    "text": "<span class=\"comment-copy\">But do you know of a reference that goes over how the process is bound to the state of the os. Intuitively, it's not clear as to why a process can't be revived from a point during its run. Of course there are corner cases such as random algorithms that are seeded with input that's not covered by the \"recorder\" but other than that, no?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Sebi No, I am not aware of such a reference. But consider memory layout alone, ASLR, randomly created base addresses for DLLs on Windows (and that's just the usermode view of the memory). On Windows, all \"Windows subsystem\" processes are registered with the subsystem at startup. Intel PT (the mentioned underlying CPU feature) probably doesn't need <i>everything</i>. But it needs a meaningful subset and the help of the OS/debugger to facilitate collection. Intel PT <i>does</i> allow that sort of revival. What I wrote was that a <i>memory dump</i> alone isn't sufficient. You need something like Intel PT.</span>",
                    "time": null
                }
            ]
        }
    ]
}