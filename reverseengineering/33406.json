{
    "title": "What tool is this text file formatted by?",
    "link": "https://reverseengineering.stackexchange.com/questions/33406/what-tool-is-this-text-file-formatted-by",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to gather data for a data science project. The target is info on rock climbing routes, and there is a certain site that hosts a ton of crowd-sourced data, however they removed their api after an acquisition last year. However, they still expose this route data on a cdn so that their mobile app can download this data for offline use. I'm trying to read information out of these text files, and they are <em>almost</em> human-readable but certainly not in an easy-to-parse format. Here is an example of the first bit (screenshot from a tool to show null characters):\n<a href=\"https://i.sstatic.net/MB98Rwop.png\" rel=\"nofollow noreferrer\"><img alt=\"screenshot of a tool showing a lot of null characters in the text\" src=\"https://i.sstatic.net/MB98Rwop.png\"/></a>\nAs you can see there are bits of well-formatted JSON surrounded by a bunch of null characters.</p>\n<p>I've tried to open this file with several tools that I thought would make sense to use to transfer bulk data between a server and a mobile app - I've tried opening it as a serialized Java Object OutputStream, a Realm database file (I believe they use realm &amp; kotlin) and BSON, but no dice. Has anyone worked with a file formatted like this before or have any suggestions as to what other tools I should try?</p>\n<p>Here is an example file: <a href=\"https://cdn2.apstatic.com/mobile/climb/V2-105905173.txt\" rel=\"nofollow noreferrer\">https://cdn2.apstatic.com/mobile/climb/V2-105905173.txt</a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "85",
    "tags": [
        "file-format",
        "api-reversing"
    ],
    "user": "Brandon Slaght",
    "time": "Mar 10 at 20:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's no format I know of, but it looks close to Apache Avro JSON format.</p>\n<p>The format appears to be multiple records of:</p>\n<ul>\n<li>64-bit little endian - length of JSON text in bytes</li>\n<li>64-bit little endian - data type?</li>\n<li>JSON bytes</li>\n</ul>\n<p>This Python3 code will parse the contents of your example file and output all of the \"data type\" values and the parsed JSON:</p>\n<pre><code>import json\nimport struct\n\nwith open(\"V2-105905173.txt\", \"rb\") as f:\n  while True:\n    data = f.read(8)\n    if len(data) &lt; 8:\n      break\n    frame_length = struct.unpack_from(\"&lt;Q\", data)[0]\n    data = f.read(8)\n    frame_type = struct.unpack_from(\"&lt;Q\", data)[0]\n    print(frame_type)\n    json_data = f.read(frame_length).decode(\"utf-8\")\n    parsed_json = json.loads(json_data)\n    print(parsed_json)\n</code></pre>\n</div>",
            "votes": "5",
            "user": "matja",
            "time": "Mar 11 at 0:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Brandon Slaght",
                    "text": "<span class=\"comment-copy\">This is perfect, thank you for the investigation! I never would have thought to look at those bytes as little endian ints. Wish I knew if they were packaging it themselves or using a tool but using the parser you wrote is probably easier than messing around with a library</span>",
                    "time": null
                }
            ]
        }
    ]
}