{
    "title": "How does GPROF hook to the program?",
    "link": "https://reverseengineering.stackexchange.com/questions/12632/how-does-gprof-hook-to-the-program",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I compiled a simple <code>helloworld</code> and took a look at the disassembly using <code>objdump</code>.</p>\n<p>At the beginning there is the <code>_init</code>:</p>\n<pre><code>0000000000400600 &lt;_init&gt;:\n  400600:   48 83 ec 08             sub    rsp,0x8\n  400604:   48 8b 05 ed 09 20 00    mov    rax,QWORD PTR [rip+0x2009ed]        # 600ff8 &lt;_DYNAMIC+0x1e0&gt;\n  40060b:   48 85 c0                test   rax,rax\n  40060e:   74 05                   je     400615 &lt;_init+0x15&gt;\n  400610:   e8 1b 00 00 00          call   400630 &lt;__gmon_start__@plt&gt;\n  400615:   48 83 c4 08             add    rsp,0x8\n  400619:   c3                      ret    \n</code></pre>\n<p>What is <code>_DYNAMIC</code>?\nUsing <code>-x</code> I can see the section details:</p>\n<pre><code>Dynamic Section:\n  NEEDED               libstdc++.so.6\n  NEEDED               libc.so.6\n  INIT                 0x0000000000400600\n  FINI                 0x0000000000400864\n  INIT_ARRAY           0x0000000000600df8\n  INIT_ARRAYSZ         0x0000000000000010\n  FINI_ARRAY           0x0000000000600e08\n  FINI_ARRAYSZ         0x0000000000000008\n  GNU_HASH             0x0000000000400298\n  STRTAB               0x00000000004003c8\n  SYMTAB               0x00000000004002c0\n  STRSZ                0x000000000000011c\n  SYMENT               0x0000000000000018\n  DEBUG                0x0000000000000000\n  PLTGOT               0x0000000000601000\n  PLTRELSZ             0x0000000000000090\n  PLTREL               0x0000000000000007\n  JMPREL               0x0000000000400570\n  RELA                 0x0000000000400540\n  RELASZ               0x0000000000000030\n  RELAENT              0x0000000000000018\n  VERNEED              0x0000000000400500\n  VERNEEDNUM           0x0000000000000002\n  VERSYM               0x00000000004004e4\n</code></pre>\n<p>However, I am not sure which entry is <code>rip+0x2009ed</code> referring to.\nConsidering that the next line is a call to <code>gmon</code>, does it have anything to do with a <code>GPROF</code> hook?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "299",
    "tags": [
        "assembly",
        "x86-64"
    ],
    "user": "drum",
    "time": "May 11, 2016 at 5:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a trick that's used by the initialization code to support monitoring when it's compiled in, and omit it when it isn't compiled in.</p>\n<p>When i compile a small test program using <code>gcc -pg</code>, then invoke <code>objdump -Mintel -d</code> on it, i get:</p>\n<pre><code>00000000004004c0 &lt;_init&gt;:\n  4004c0:   48 83 ec 08             sub    rsp,0x8\n  4004c4:   48 8d 05 c5 00 00 00    lea    rax,[rip+0xc5]        # 400590 &lt;__gmon_start__&gt;\n  4004cb:   48 85 c0                test   rax,rax\n  4004ce:   74 05                   je     4004d5 &lt;_init+0x15&gt;\n  4004d0:   e8 bb 00 00 00          call   400590 &lt;__gmon_start__&gt;\n  4004d5:   48 83 c4 08             add    rsp,0x8\n  4004d9:   c3                      ret    \n</code></pre>\n<p>If i omit the <code>-pg</code> when compiling, this changes to:</p>\n<pre><code>0000000000400418 &lt;_init&gt;:\n  400418:   48 83 ec 08             sub    rsp,0x8\n  40041c:   48 8b 05 d5 0b 20 00    mov    rax,QWORD PTR [rip+0x200bd5]        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;\n  400423:   48 85 c0                test   rax,rax\n  400426:   74 05                   je     40042d &lt;_init+0x15&gt;\n  400428:   e8 43 00 00 00          call   400470 &lt;__gmon_start__@plt&gt;\n  40042d:   48 83 c4 08             add    rsp,0x8\n  400431:   c3                      ret    \n</code></pre>\n<p>So you see that, with monitoring enabled, the code checks if <code>__gmon_start__</code> is not null before calling the function. With monitoring disabled, it checks some variable, and if it is 0, it skips the call to <code>__gmon_start__</code>.</p>\n<p>But wait. Why do we have a <code>lea</code> in the first case, and a <code>mov</code> in the second one? And why does the name end in <code>@plt</code> ?\nBecause, even if your program doesn't have profiling compiled in, maybe some of your dynamic libraries do, and maybe you're running against a profiling-enabled version of the C library. So the C library may provide a dynamic version of <code>__gmon_start__</code>, and it provides a flag to mark if it does so. This function and flag are defined in the <a href=\"http://bottomupcs.sourceforge.net/csbu/x3824.htm\" rel=\"nofollow\">GOT</a> and GOTPLT sections.</p>\n<p>And indeed, if you note the address that's used, <code>600FF8</code>, and scroll down the <code>objdump -x</code> output a bit from your section details, you'll see:</p>\n<pre><code> 21 .got          00000008  0000000000600ff8  0000000000600ff8  00000ff8  2**3\n                  CONTENTS, ALLOC, LOAD, DATA\n 22 .got.plt      00000038  0000000000601000  0000000000601000  00001000  2**3\n                  CONTENTS, ALLOC, LOAD, DATA\n</code></pre>\n<p>you'll see the code accesses a GOT table entry (which, for a small test program, is the only entry in the GOT there is, which is why GOT is just 8 bytes in size).</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "May 11, 2016 at 7:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}