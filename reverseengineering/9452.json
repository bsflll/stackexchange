{
    "title": "Any tips for analyzing this mips function",
    "link": "https://reverseengineering.stackexchange.com/questions/9452/any-tips-for-analyzing-this-mips-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These function are used to decrypt with AES and there is Decrypt by CRC and I assume that crc is used for data checksums, I have qemu-mipsel and my question for u is how could I discover from where does this function get key</p>\n<pre><code>;  function: CSPDBGetFileEncryKey at 0x4fd9d0 -- 0x4fda70\n0x4fd9d0:   3c 1c 00 12     lui $gp, 0x12\n0x4fd9d4:   27 9c c3 70     addiu $gp, $gp, 0xffffffffffffc370\n0x4fd9d8:   03 99 e0 21     addu $gp, $gp, $t9\n0x4fd9dc:   27 bd ff d8     addiu $sp, $sp, 0xffffffffffffffd8\n0x4fd9e0:   af bf 00 24     sw $ra, 0x24 ( $sp )\n0x4fd9e4:   af b2 00 20     sw $s2, 0x20 ( $sp )\n0x4fd9e8:   af b1 00 1c     sw $s1, 0x1c ( $sp )\n0x4fd9ec:   af b0 00 18     sw $s0, 0x18 ( $sp )\n0x4fd9f0:   af bc 00 10     sw $gp, 0x10 ( $sp )\n0x4fd9f4:   00 80 88 21     addu $s1, $a0, $zero\n0x4fd9f8:   10 80 00 16     beq 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;, $zero, 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;\n0x4fd9fc:   00 a0 80 21     addu $s0, $a1, $zero\n0x4fda00:   10 a0 00 15     beq 0x4fda58  &lt;CSPDBGetFileEncryKey+0x88&gt;, $zero, 0x4fda58  &lt;CSPDBGetFileEncryKey+0x88&gt;\n0x4fda04:   24 02 ff ff     addiu $v0, $zero, 0xffffffffffffffff\n0x4fda08:   8f 92 89 9c     lw $s2, 0xffffffffffff899c ( $gp )\n0x4fda0c:   8f 99 93 54     lw $t9, 0xffffffffffff9354 ( $gp )\n0x4fda10:   03 20 f8 09     jalr $t9\n0x4fda14:   26 44 00 b0     addiu $a0, $s2, 0xb0\n0x4fda18:   8f bc 00 10     lw $gp, 0x10 ( $sp )\n0x4fda1c:   10 40 00 0d     beq 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;, $zero, 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;\n0x4fda20:   02 20 20 21     addu $a0, $s1, $zero\n0x4fda24:   8f 99 89 7c     lw $t9, 0xffffffffffff897c ( $gp )\n0x4fda28:   00 00 28 21     addu $a1, $zero, $zero\n0x4fda2c:   03 20 f8 09     jalr $t9\n0x4fda30:   02 00 30 21     addu $a2, $s0, $zero\n0x4fda34:   02 20 20 21     addu $a0, $s1, $zero\n0x4fda38:   26 45 00 b0     addiu $a1, $s2, 0xb0\n0x4fda3c:   8f bc 00 10     lw $gp, 0x10 ( $sp )\n0x4fda40:   8f 99 8b 8c     lw $t9, 0xffffffffffff8b8c ( $gp )\n0x4fda44:   03 20 f8 09     jalr $t9\n0x4fda48:   26 06 ff ff     addiu $a2, $s0, 0xffffffffffffffff\n0x4fda4c:   10 00 00 02     beq $zero, $zero, 0x4fda58  &lt;CSPDBGetFileEncryKey+0x88&gt;\n0x4fda50:   00 00 10 21     addu $v0, $zero, $zero\n0x4fda54:   24 02 ff ff     addiu $v0, $zero, 0xffffffffffffffff\n0x4fda58:   8f bf 00 24     lw $ra, 0x24 ( $sp )\n0x4fda5c:   8f b2 00 20     lw $s2, 0x20 ( $sp )\n0x4fda60:   8f b1 00 1c     lw $s1, 0x1c ( $sp )\n0x4fda64:   8f b0 00 18     lw $s0, 0x18 ( $sp )\n0x4fda68:   03 e0 00 08     jr $ra\n0x4fda6c:   27 bd 00 28     addiu $sp, $sp, 0x28\n</code></pre>\n<p><a href=\"https://www.dropbox.com/s/qzkcgww8hxy6uvk/cspd.zip?dl=0\" rel=\"nofollow\">Here</a> you can download whole disassembly for this file and <a href=\"https://www.dropbox.com/s/kn7ntgyj96npddt/cspd?dl=0\" rel=\"nofollow\">here</a> you can download mips binary if you would like to take a look</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "dynamic-analysis",
        "mips"
    ],
    "user": "Vido",
    "time": "Jul 27, 2015 at 0:53",
    "comments": [
        {
            "user": "Vido",
            "text": "<span class=\"comment-copy\">I cant run it with qemu      sudo chroot . ./qemu-mips-static ./cspd qemu: uncaught target signal       11 (Segmentation fault) - core dumped   You can find it <a href=\"https://www.dropbox.com/s/onq303vns4bj3p8/qemu%20and%20libs.zip?dl=0\" rel=\"nofollow noreferrer\">here</a> with all libs I will try to compile qemu without threding</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Add comments to each line of which you <i>do</i> know what it does. Research the commands of which you don't. Draw lines from/to jump adresses. Replace register names with functional names. Repeat until done.</span>",
            "time": null
        },
        {
            "user": "Vido",
            "text": "<span class=\"comment-copy\">I did tried to do that, so we have first instruction lui $gp, 0x12 and in google I got this question as solution, beside that what meaning has adding 0x12 to $gp it does not make any seance :) Tnx for suggestion I will try to complete it, and if I know what those instruction mean and do I would not ask this for nothing :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, it is impossible to say where the key taken from on a basis of your snippet because it is incomplete.</p>\n<p>You have 3 indirect calls here, and you can see it by </p>\n<pre><code>jalr $t9\n</code></pre>\n<p>Opening it in IDA gives you a bit more readable picture:</p>\n<pre><code>.text:004FD9D0                 .globl CSPDBGetFileEncryKey\n.text:004FD9D0 CSPDBGetFileEncryKey:                    # CODE XREF: sub_50D040+18Cp\n.text:004FD9D0                                          # encry+158p\n.text:004FD9D0                                          # DATA XREF: ...\n.text:004FD9D0\n.text:004FD9D0 var_18          = -0x18\n.text:004FD9D0 var_10          = -0x10\n.text:004FD9D0 var_C           = -0xC\n.text:004FD9D0 var_8           = -8\n.text:004FD9D0 var_4           = -4\n.text:004FD9D0\n.text:004FD9D0                 li      $gp, 0x11C370\n.text:004FD9D8                 addu    $gp, $t9\n.text:004FD9DC                 addiu   $sp, -0x28\n.text:004FD9E0                 sw      $ra, 0x28+var_4($sp)\n.text:004FD9E4                 sw      $s2, 0x28+var_8($sp)\n.text:004FD9E8                 sw      $s1, 0x28+var_C($sp)\n.text:004FD9EC                 sw      $s0, 0x28+var_10($sp)\n.text:004FD9F0                 sw      $gp, 0x28+var_18($sp)\n.text:004FD9F4                 move    $s1, $a0\n.text:004FD9F8                 beqz    $a0, loc_4FDA54\n.text:004FD9FC                 move    $s0, $a1\n.text:004FDA00                 beqz    $a1, loc_4FDA58\n.text:004FDA04                 li      $v0, 0xFFFFFFFF\n.text:004FDA08                 la      $s2, g_tDBPdtIf\n.text:004FDA0C                 la      $t9, strlen\n.text:004FDA10                 jalr    $t9 ; strlen\n.text:004FDA14                 addiu   $a0, $s2, (unk_619C78 - 0x619BC8)\n.text:004FDA18                 lw      $gp, 0x28+var_18($sp)\n.text:004FDA1C                 beqz    $v0, loc_4FDA54\n.text:004FDA20                 move    $a0, $s1\n.text:004FDA24                 la      $t9, memset\n.text:004FDA28                 move    $a1, $zero\n.text:004FDA2C                 jalr    $t9 ; memset\n.text:004FDA30                 move    $a2, $s0\n.text:004FDA34                 move    $a0, $s1\n.text:004FDA38                 addiu   $a1, $s2, (unk_619C78 - 0x619BC8)\n.text:004FDA3C                 lw      $gp, 0x28+var_18($sp)\n.text:004FDA40                 la      $t9, strncpy\n.text:004FDA44                 jalr    $t9 ; strncpy\n.text:004FDA48                 addiu   $a2, $s0, -1\n.text:004FDA4C                 b       loc_4FDA58\n.text:004FDA50                 move    $v0, $zero\n.text:004FDA54  # ---------------------------------------------------------------------------\n.text:004FDA54\n.text:004FDA54 loc_4FDA54:                              # CODE XREF: CSPDBGetFileEncryKey+28j\n.text:004FDA54                                          # CSPDBGetFileEncryKey+4Cj\n.text:004FDA54                 li      $v0, 0xFFFFFFFF\n.text:004FDA58\n.text:004FDA58 loc_4FDA58:                              # CODE XREF: CSPDBGetFileEncryKey+30j\n.text:004FDA58                                          # CSPDBGetFileEncryKey+7Cj\n.text:004FDA58                 lw      $ra, 0x28+var_4($sp)\n.text:004FDA5C                 lw      $s2, 0x28+var_8($sp)\n.text:004FDA60                 lw      $s1, 0x28+var_C($sp)\n.text:004FDA64                 lw      $s0, 0x28+var_10($sp)\n.text:004FDA68                 jr      $ra\n.text:004FDA6C                 addiu   $sp, 0x28\n.text:004FDA6C  # End of function CSPDBGetFileEncryKey\n.text:004FDA6C\n</code></pre>\n<p>where all those indirect functions look like memset, strlen and strncpy, \nso the key is somewhere in memory when this function is called.</p>\n<p>I understand that it is not an answer for the question you asked,\nbut hope it helps.</p>\n<p>In addition I'd suggest to use something like <a href=\"http://retdec.com\" rel=\"nofollow\">retargetable decompiler</a>.\nThis will probably make this task easier (You'll probably need to register there to extend allowed decompilation time and specify that you want to decompile unreachable code.)</p>\n</div>",
            "votes": "2",
            "user": "w s",
            "time": "Jul 27, 2015 at 6:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Its complex and I understand that, before posting question I did tried to follow flow of program and on those jumps I lose track where to go next. For example  <code>beq 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;, $zero, 0x4fda54  &lt;CSPDBGetFileEncryKey+0x84&gt;</code>  in middle of instructions I have function name+hex value so it means that should go at beginning of function or if not what \"value\" has name of function, I did included results from retarg. dec (non reg. user). I dont have IDA pro and your \"output\" represent same thing in different  way. I will include funcs which are missing tnx for helping out</span>",
                    "time": null
                }
            ]
        }
    ]
}