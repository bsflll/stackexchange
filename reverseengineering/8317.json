{
    "title": "What does __PAIR__ mean in Hex-Rays decompiler output? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/8317/what-does-pair-mean-in-hex-rays-decompiler-output",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has an answer here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/4269/understanding-pair-macro-from-ida-pro-pseudo-decompiler-to-look-better\">Understanding __PAIR__ macro from IDA PRO Pseudo Decompiler to look better</a>\n<span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2015-02-27 16:24:13Z\">10 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>what does this code on IDA? i've found with this a couple of times and i don't have idea what means.</p>\n<pre><code>int a5;\nint dGainMax;\nCOERCE_DOUBLE(__PAIR__(a5, dGainMax))\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "8k",
    "tags": [
        "ida",
        "decompiler",
        "hexrays"
    ],
    "user": "Criss Moreyra",
    "time": "10 years ago",
    "comments": [
        {
            "user": "huang",
            "text": "<span class=\"comment-copy\">See here: <a href=\"https://gist.github.com/es3n1n/2d92ee5d2c0a0d7944bcfa42e2363fe6#file-idadefs-h-L182-L185\" rel=\"nofollow noreferrer\">gist.github.com/es3n1n/â€¦</a>, hope to help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>__PAIR__()</code> seems to be a macro that computes an <code>unsigned long</code> value from its two arguments, which it interprets as containing the high and low bits of that value. </p>\n<p>The topic linked by Guntram - <a href=\"https://reverseengineering.stackexchange.com/questions/4269/understanding-pair-macro-from-ida-pro-pseudo-decompiler-to-look-better\">Understanding __PAIR__ macro from IDA PRO Pseudo Decompiler to look better</a> contains a definition for the macro and examples of its use, but no explanation of it.</p>\n<pre><code>// The following definition is not quite correct because it always returns\n// uint64. The above C++ functions are good, though.\n#define __PAIR__(high, low) (((unsigned long)(high)&lt;&lt;sizeof(high)*8) | low)\n</code></pre>\n<p>The macro doesn't make a lot of sense. Either it was transcribed erroneously (with the original containing <code>sizeof(low)</code> instead of <code>sizeof(high)</code>) or the above-mentioned pseudo decompiler uses it only in cases where it works. </p>\n<p>If the following conditions hold:</p>\n<ol>\n<li><code>CHAR_BIT == 8</code></li>\n<li><code>sizeof(high) &lt; sizeof(unsigned long)</code></li>\n<li><code>sizeof(low) &lt;= sizeof(high)</code> </li>\n</ol>\n<p>then the macro can be used to form a value of double register width - like DX:AX - from two register-width values. </p>\n<p>Condition 2 is necessary because otherwise the behaviour would be undefined (no-op on Intel chips, for example, since they mask shifts for registers &lt;= 32 bit with 31). Condition 3 is necessary because otherwise 'excess' bits in <code>low</code> could bleed over the bits of <code>high</code> in the resulting value.</p>\n<p>The comment and the context (usage example) suggest that </p>\n<ol start=\"4\">\n<li><code>sizeof(unsigned long) == sizeof(uint64_t)</code></li>\n<li><code>sizeof(int) == sizeof(int32_t)</code></li>\n</ol>\n<p>This implies a compiler of the LP64 variety, like those usually found in 64-bit UNIX (<strong>not</strong> the LLP64 kind common on Wintel platforms). </p>\n<p>The naming of the <code>COERCE_DOUBLE</code> macro is a bit unfortunate since it probably refers to <em>converting</em> the value to a double while 'coercing' might also mean <em>reinterpreting</em> the bits as a floating point value, something which certain programming tricks used to rely on. </p>\n<p>Also, there is some ambiguity regarding the conversion. The x86 FPU can load <em>signed</em> integers directly into floating point registers (FILD) but not unsigned ones, which means that x86 compilers have to emit a load of extra code for converting unsigned integers.</p>\n<p>This means that the <code>__PAIR__</code> macro with its implied unsignedness can erroneously suggest major inefficiencies that aren't there, since x86 CPUs tend to interpret double-width register values are as <em>signed</em> whenever signedness matters (see instructions like CDQ, DIV or FILD, for example). The devil is in the details which are hidden and glossed over by the strange macros. Hence it is advisable to consult the disassembly to find out what's really going on, even though the SP simulation of the disassembler can be a bit off on occasion.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}