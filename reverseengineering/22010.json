{
    "title": "Figuring out correct user input key from final key + generated buffer",
    "link": "https://reverseengineering.stackexchange.com/questions/22010/figuring-out-correct-user-input-key-from-final-key-generated-buffer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've recently gotten into reversing crackmes, and I seem to always fail at the ones similar to this.</p>\n<p>The final key that the program uses for comparison is not the key that should be used as input, the key used as input is used in an algorithm with another set of data to check if it generates the final key.\nHere is the code so it makes a bit more sense.</p>\n<pre><code>signed __int64 __fastcall ValidateSerials(unsigned int *generatedData, unsigned int *finalCorrectSerial, unsigned int *UserInputSerial)\n{\n  signed int i; // [rsp+0h] [rbp-18h]\n  signed int j; // [rsp+4h] [rbp-14h]\n  signed int currentUserInputsr; // [rsp+8h] [rbp-10h]\n  int v7; // [rsp+Ch] [rbp-Ch]\n\n  for ( i = 0; i &lt; 4; ++i )\n  {\n    v7 = 0;\n    currentUserInputsr = UserInputSerial[i];\n    for ( j = 6; j &gt;= 0; --j )\n    {\n      v7 += generatedData[j] * (currentUserInputsr &amp; 1);\n      currentUserInputsr &gt;&gt;= 1;\n    }\n    if ( v7 != finalCorrectSerial[i] )\n      return 0i64;\n  }\n  return 1i64;\n}\n</code></pre>\n<p>if I know <code>generatedData</code> and <code>finalCorrectSerial</code>, how can I generate the correct <code>UserInputSerial</code>? I've tried to reverse the entire functions logic but I always get it wrong. I'm fairly new into solving keygens such as this but not reverse engineering in general.</p>\n<p>Thanks</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "91",
    "tags": [
        "c++",
        "crackme"
    ],
    "user": null,
    "time": "Aug 30, 2019 at 20:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote a function, that generates a valid input from given <code>generatedData</code> and <code>finalCorrectSerial</code>. The function calculates a subset that, when summed up, equals the corresponding value in <code>finalCorrectSerial</code>. It then creates a valid input from that. (The function <code>subsetSum()</code> is taken from <a href=\"https://www.tutorialspoint.com/Subset-Sum-Problem\" rel=\"nofollow noreferrer\">here</a> and was modified to return just one subset and that by it's indices):</p>\n<pre><code>bool subsetSum(unsigned int* set, unsigned int* subSet, int n, int subSize, int total, int nodeCount ,int sum, int* outN) {\n   if( total == sum) {\n       *outN = subSize;\n      return 1;\n   } \n   else {\n      for( int i = nodeCount; i &lt; n; i++ ) {     //find node along breadth\n         subSet[subSize] = i;\n         if (subsetSum(set,subSet,n,subSize+1,total+set[i],i+1,sum, outN)) return 1;     //do for next node in depth\n      }\n   }\n   return 0;\n}\n\nbool genInput(unsigned int* generatedData, unsigned int* finalCorrectSerial, unsigned int* out) {\n    for (int i = 0; i &lt; 4; i++) {\n        unsigned int subs[7];\n        int size = 0;\n        subsetSum(generatedData, subs, 7, 0, 0, 0, finalCorrectSerial[i], &amp;size);\n\n        std::cout &lt;&lt; \"finalCorrectSerial[\" &lt;&lt; i &lt;&lt; \"] (\" &lt;&lt; finalCorrectSerial[i] &lt;&lt; \") has \" &lt;&lt; (size ? \"a\" : \"no\") &lt;&lt; \" subset (indices): \";\n        for (int j = 0; j &lt; size; j++ ) {\n            std::cout &lt;&lt; subs[j] &lt;&lt; \" \";\n        }\n        std::cout &lt;&lt; \"\\n\";\n\n        if (!size) return 0;\n\n        for (int j = 0; j &lt; size; j++) {\n            out[i] |= (1u &lt;&lt; (6 - subs[j]));\n        }\n\n    }\n    return 1;\n}\n</code></pre>\n<p>A test run (with arbitrary numbers):</p>\n<pre><code>int main()\n{\n  unsigned int genData[] = { 10, 55, 1, 3, 7, 98, 1};\n  unsigned int key[] = { 66, 5, 4, 5};\n  unsigned int input[4] = { 0 };\n\n  std::cout &lt;&lt; \"Generating Input was \" &lt;&lt; (genInput(genData, key, input) ? \"successfull\\n\" : \"unsuccessful\\n\");\n  for (int j = 0; j &lt; 4; j++) {\n            std::cout &lt;&lt; input[j] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; \"\\n\";\n\n  std::cout &lt;&lt; (ValidateSerials(genData, key, input) ? \"true\" : \"false\");\n\n  return 1;\n}\n</code></pre>\n<p>returns</p>\n<pre><code>finalCorrectSerial[0] (66) has a subset (indices): 0 1 2 \nfinalCorrectSerial[1] (5) has a subset (indices): 2 3 6 \nfinalCorrectSerial[2] (4) has a subset (indices): 2 3 \nfinalCorrectSerial[3] (5) has a subset (indices): 2 3 6 \nGenerating Input was successfull\n112 25 24 25 \ntrue\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Anonymous Anonymous",
            "time": "Aug 31, 2019 at 15:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user29468",
                    "text": "<span class=\"comment-copy\">Thank you, that actually worked. But i'm still a little confused on it all. What would you say is necessary to learn/understand well before tackling key gens similar to this?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This function simply checks each input number (<code>UserInputSerial[i]</code>) whether it is correct and it's doing so by summing up <code>generatedData[j] * (UserInputSerial[i] &amp; (1 &lt;&lt; (6 - j)))</code>, so it's basically iterating through <code>UserInputSerial[i]</code>'s <code>7</code> least significant bytes and if some of them is <code>1</code> the relevant number from <code>generatedData</code> will be taken into the sum (<code>v7</code>).</p>\n<p>Since, I suspect, the author of this crackme wants to accept only one input, <code>v7</code> has to get different values for all possible inputs, so for each <code>a = UserInputSerial[i1]</code>, <code>b = UserInputSerial[i2]</code>, if <code>a != b</code>, then <code>v7</code> counted for <code>a</code> has to be different than <code>v7</code> counted for <code>b</code>. In other words, if <code>v7</code> is function taking <code>UserInputSerial[i]</code> and <code>generatedData</code>, it has to be <em>injection</em>. </p>\n<p>The easiest way to generate such a function is to initialise <code>generatedData</code> in such a way, that <code>generatedData[j] &gt; sum(generatedData[i&lt;j])</code>. So for example it could be that <code>generatedData[j] = 2^j</code> or <code>generatedData[j] = 3^j</code>. So, knowing the correct <code>v7</code> value for each <code>UserInputSerial[i]</code> and <code>generatedData</code>, you should be able to easily obtain the <code>x</code> such that <code>v7(x, generatedData) = finalCorrectSerial[i]</code> in a way similar as you would convert <code>finalCorrectSerial[i]</code> to binary.</p>\n<p>So, assuming that indeed <code>generatedData[j] &gt; sum(generatedData[i&lt;j])</code>, you can write something like this:</p>\n<pre><code>char bits[7]; // bits of the correct UserInputSerial[i]\nint a = finalCorrectSerial[i];\nfor (j = 6; j &gt;= 0; j--)\n{\n    if (a &gt;= generatedData[j])\n    {\n        a -= generatedData[j];\n        bits[j] = 1;\n    }\n    else\n        bits[j] = 0;\n}\n</code></pre>\n<p>If it's not the case, you can just check <code>v7(x, generatedData)</code> for all possible numbers having less or <code>7</code> bytes and check which one will cause <code>v7</code> to produce the desired value (<code>finalCorrectSerial[i]</code>).</p>\n</div>",
            "votes": "0",
            "user": "bart1e",
            "time": "Aug 31, 2019 at 10:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}