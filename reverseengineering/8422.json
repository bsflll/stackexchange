{
    "title": "How to go into thread function knowing only the thread handle",
    "link": "https://reverseengineering.stackexchange.com/questions/8422/how-to-go-into-thread-function-knowing-only-the-thread-handle",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How do I go into the thread function (so I can do step by step tracing), knowing only the handle to the thread. I am using OllyDbg for tracing and the thread is created through the API <code>ZwCreateProcess()</code>. However, the documentation that I have seen for this API does not contain the creation flags and pointer to the defined function which it will execute, which I both need.</p>\n<p>Is there a way to go into the thread function, knowing only the thread handle? Also, are there other ways to create suspended threads aside from <code>CreateThread()</code> and <code>CreateRemoteThread()</code>?</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "4k",
    "tags": [
        "ollydbg",
        "debugging",
        "thread"
    ],
    "user": "jowabels",
    "time": "Mar 10, 2015 at 5:59",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">Can you check whether there was a previous call to  CreateProcess* API which created the process in suspended state? What do you mean by \"limits my ability to see\"?</span>",
            "time": null
        },
        {
            "user": "jowabels",
            "text": "<span class=\"comment-copy\">Actually I've just seen the thread creation API which is ZwCreateProcessEx. However, I cannot find any documentation as to the definition of the parameters of this API, thus I can't still see the thread function itself.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">As you are not providing enough information I'll try to guide you: 1. place break point (BP) on CreateProcessW and ZwCreateProcessEx to check what API is actually called to create the process. 2. Place BP on GetThreadContext and check whether it was hit. Please provide answers to that so we can provide meaningful answer for your context.</span>",
            "time": null
        },
        {
            "user": "jowabels",
            "text": "<span class=\"comment-copy\">I'm sorry for having insufficient info. As for your question, ZwCreateProcessEx was used to create the process and GetThreadContext was hit afterwards.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is there a way to go into the thread function, knowing only the thread\n  handle?</p>\n</blockquote>\n<p>Yes, it's a 2-step process.</p>\n<p><strong>Step 1 - Convert the thread handle to a thread ID</strong></p>\n<p>In <a href=\"https://technet.microsoft.com/en-us/sysinternals/bb896653.aspx\" rel=\"nofollow noreferrer\">Process Explorer</a>'s menu bar, check the following:</p>\n<ul>\n<li><em>View</em> → <em>Show Lower Pane</em></li>\n<li><em>View</em> → <em>Lower Pane View</em> → <em>Handles</em></li>\n<li><em>View</em> → <em>Select Columns...</em> → <em>Handle</em> tab → check all checkboxes</li>\n</ul>\n<p>Next, select your target process in Process Explorer's list of processes. You'll then see in the lower pane the list of handles for that process, including thread handles. Find the thread ID associated with your target handle. For the example below, thread handle <code>0x228</code> is associated with thread ID <code>3000</code>:</p>\n<p><img alt=\"Handle to ID\" src=\"https://i.sstatic.net/mddAT.png\"/></p>\n<p>Though handle values are shown in hexadecimal in Process Explorer, thread IDs are shown in decimal. Thus thread ID <code>3000</code> in decimal is equal to thread ID <code>0xBB8</code> in hexadecimal.</p>\n<p><strong>Step 2 - Find EIP for the thread ID</strong></p>\n<p>In OllyDbg's menu bar, select <em>View</em> → <em>Threads</em>. Right-click on the thread whose <em>Ident</em> corresponds to the thread ID you found in Step 1 (<code>0xBB8</code> in the example below), and select <em>Show registers</em>:</p>\n<p><img alt=\"Threads\" src=\"https://i.sstatic.net/YC5Hk.png\"/></p>\n<p>This will show you the current <code>EIP</code> for that thread, which is the next instruction to be executed once that thread is resumed:</p>\n<p><img alt=\"Registers\" src=\"https://i.sstatic.net/iKgc4.png\"/></p>\n<p><strong><em>Alternative</em> Step 2 - Find EIP for the thread ID</strong></p>\n<p>If the target thread was created in a suspended state and not yet resumed then the thread won't show up in OllyDbg's thread window. In this case, you can use <a href=\"https://technet.microsoft.com/en-us/sysinternals/bb897415.aspx\" rel=\"nofollow noreferrer\">LiveKd</a> to find the thread's starting address by issuing the LiveKd command <code>!thread -t &lt;thread ID in hexadecimal&gt;</code></p>\n<pre><code>kd&gt; !thread -t BB8\nCid handle table at 88e01108 with 944 entries in use\n\nTHREAD 86B4E548  Cid 169c.0bb8  Teb: 7ffdb000 Win32Thread: 00000000 WAIT: (Suspended) KernelMode Non-Alertable\nSuspendCount 1\nFreezeCount 1\n    86b4ec28  Semaphore Limit 0x2\nNot impersonating\nDeviceMap                 9a70f9e8\nOwning Process            86b4cd40       Image:         wordpad.exe\nAttached Process          N/A            Image:         N/A\nWait Start TickCount      21829348       Ticks: 1299 (0:00:00:20.264)\nContext Switch Count      1              IdealProcessor: 0\nUserTime                  00:00:00.000\nKernelTime                00:00:00.000\nWin32 Start Address 0x002cb23d\nStack Init 8b777ed0 Current 8b777a40 Base 8b778000 Limit 8b775000 Call 0\nPriority 8 BasePriority 8 UnusualBoost 0 ForegroundBoost 0 IoPriority 2 PagePriority 5\nChildEBP RetAddr  Args to Child\n8b777a58 82a88d3d 85807a60 00000000 82b35d20 nt!KiSwapContext+0x26 (FPO: [Uses EBP] [0,0,4])\n8b777a90 82a87b9b 85807b20 85807a60 85807c28 nt!KiSwapThread+0x266\n8b777ab8 82a8158f 85807a60 85807b20 00000000 nt!KiCommitThreadWait+0x1df\n8b777b34 82abbfd9 85807c28 00000005 00000000 nt!KeWaitForSingleObject+0x393\n8b777b4c 82abbaf4 00000000 00000000 00000000 nt!KiSuspendThread+0x18 (FPO: [3,0,0])\n8b777b90 82e2390f 00000000 00000000 00000000 nt!KiDeliverApc+0x17f\n8b777bb0 82e23b29 00000001 00000000 00000000 hal!HalpDispatchSoftwareInterrupt+0x49 (FPO: [Non-Fpo])\n8b777bc8 82e23ba9 00000000 00000000 8b777c20 hal!HalpCheckForSoftwareInterrupt+0x83 (FPO: [Non-Fpo])\n8b777bd8 82c6450d b553bcc6 00000000 00000000 hal!KfLowerIrql+0x61 (FPO: [Non-Fpo])\n8b777c20 82abb559 00000000 778870d8 00000001 nt!PspUserThreadStartup+0x14\n00000000 00000000 00000000 00000000 00000000 nt!KiThreadStartup+0x19\n</code></pre>\n<p>You can see <code>Win32 Start Address 0x002cb23d</code> in the output above, which is the starting address for the suspended thread.</p>\n<blockquote>\n<p>Also, are there other ways to create suspended threads aside from\n  <code>CreateThread()</code> and <code>CreateRemoteThread()</code>?</p>\n</blockquote>\n<p>Yes, you can call <a href=\"http://undocumented.ntinternals.net/source/usermode/undocumented%20functions/nt%20objects/thread/ntcreatethread.html\" rel=\"nofollow noreferrer\"><code>ntdll!NtCreateThread()</code></a> or <code>ntdll!NtCreateThreadEx()</code>.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Mar 10, 2015 at 13:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jowabels",
                    "text": "<span class=\"comment-copy\">Does this apply to suspended threads or processes? OllyDbg does not seem to show the thread that I wanted to see. Using the steps outlined above, I have seen this thread in Process Explorer but not in Olly.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if the CreateThread used CREATE_SUSPENDED ollydbg will not show the thread nor its registers only on subsequent SuspendThread / Resume Thread combo ollydbg will show the thread see my other answer for some work around</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I've updated my answer above with an alternative solution that works for threads that were created in a suspended state.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@JasonGeffner Win32StartAddress is static initialized once it will not reflect the Threadprocs eip on subsequent resumes try sleeping in the threadproc and checking nt!_ethread Win32StartAddress</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@blabb, the LiveKd approach above is <i>only</i> for the situation where the thread had never been resumed after being created in a suspended state. Otherwise, the OllyDbg approach above can be used.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on provided information I suspect that the used method here is Dynamic forking of a process or as it also know process hollowing. The idea is to execute some arbitrary process in suspended state and replace its \"guts\" with the contents of another executable image. In general the idea could be implemented as following (based on <em>Dynamic forking</em> by Tan Chew Keong, 2004):</p>\n<ol>\n<li>Use the <code>CreateProcess</code> API with the <code>CREATE_SUSPENDED</code> parameter to create a suspended process from any EXE file. (Call this the first EXE).</li>\n<li>Call <code>GetThreadContext</code> API to obtain the register values (thread context) of the suspended process. The EBX register of the suspended process points to the process's PEB. The EAX register contains the entry point of the process (first EXE).</li>\n<li>Obtain the base-address of the suspended process from its PEB, i.e. at [EBX+8]</li>\n<li>Load the second EXE into memory (using ReadFile) and perform the neccessary alignment manually. This is required if the file alignment is different from the memory alignment</li>\n<li>If the second EXE has the same base-address as the suspended process and its image-size is &lt;= to the image-size of the suspended process, simply use the <code>WriteProcessMemory</code> function to write the image of the second EXE into the memory space of the suspended process, starting at the base-address.</li>\n<li>Otherwise, unmap the image of the first EXE using <code>ZwUnmapViewOfSection</code> (exported by ntdll.dll) and use VirtualAllocEx to allocate enough memory for the second EXE within the memory space of the suspended process. The <code>VirtualAllocEx</code> API must be supplied with the base-address of the second EXE to ensure that Windows will give us memory in the required region. Next, copy the image of the second EXE into the memory space of the suspended process starting at the allocated address (using <code>WriteProcessMemory</code>).</li>\n<li>If the unmap operation failed but the second EXE is relocatable (i.e. has a relocation table), then allocate enough memory for the second EXE within the suspended process at any location. Perform manual relocation of the second EXE based on the allocated memory address. Next, copy the relocated EXE into the memory space of the suspended process starting at the allocated address (using <code>WriteProcessMemory</code>).</li>\n<li>Patch the base-address of the second EXE into the suspended process's PEB at [EBX+8].</li>\n<li>Set EAX of the thread context to the entry point of the second EXE.</li>\n<li>Use the SetThreadContext API to modify the thread context of the suspended process.</li>\n<li>Use the ResumeThread API to resume execute of the suspended process.</li>\n</ol>\n<p>So, to answer your question I firstly suggest to verify that this indeed happens. Secondly, if it does you can do the following to break on the new created thread entry point. The proposed way is not the only one, but IMHO will be easy done taking into account your relatively small experience in RE/executable analysis:</p>\n<ul>\n<li><p>Check the <a href=\"http://www.rohitab.com/discuss/topic/35564-win32-forking/\" rel=\"nofollow\">PoC</a> to actually get the full understanding of the whole process.</p>\n<ol>\n<li>Place BP on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680632(v=vs.85).aspx\" rel=\"nofollow\">SetThreadContext</a>. The second parameter is <code>CTX</code> variable which holds among various aspects of the thread context, also the address of the thread function.</li>\n<li>In the nutshell, you need to examine <code>CTX.eax</code> to get the address of the thread function. For example <code>0x00402030</code> is the address you've found there. </li>\n<li>Download and install <a href=\"http://processhacker.sourceforge.net\" rel=\"nofollow\">ProcessHacker</a> and with its help, examine the address space of the suspended process. Open the memory page to which the thread function belongs to - <em>Right click on process -&gt; Properties -&gt; Memory</em>. For example page <code>0x00400000</code>.</li>\n<li>ProcessHacker will show you the memory page with local offsets to the page. You will need to go to the offset <code>0x2030</code>.</li>\n<li>Patch the memory at offset <code>0x2030</code> with <code>0xEBFE</code> (remember the previous bytes), this makes the thread loop indefinitely - <code>jmp 0x00402030</code>.</li>\n<li>Now, resume the parent process and attache the new instance of <code>Olly</code> to the suspended process which now is already running. Go to the EP and patch back to the original bytes. </li>\n<li>Good luck with the analysis.</li>\n</ol></li>\n</ul>\n<p>I hope this is understandable otherwise ask and I'll clarify. </p>\n</div>",
            "votes": "0",
            "user": "PhoeniX",
            "time": "Mar 10, 2015 at 12:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if the Thread is <strong>Created Suspended</strong> and Resume thread is called for the <strong>first time</strong> ollydbg will not show the thread in its <code>thread window</code> nor will the stack trace for the thread be available in stack window <code>(ALT+K)-&gt;Right Click-&gt;Thread -&gt;Checkmark</code> </p>\n<p>in such cases you can set a  breakpoint on  the following apis </p>\n<p>follow through is based on xp sp3 layout (you may need a bit of tweking in newer os )</p>\n<pre><code>1) ntdll!NtContinue / ZwContinue  (can be found without symbol )    \n2) ntdll!ZwRegisterThreadTerminateport (can find this too without symbol)    \n3) CsrNewThread  (needs symbol)   \n4) BaseThreadStartThunk ditto    \n5) BaseThreadStart  ditto     \n</code></pre>\n<p>Resume thread will break on either of these apis</p>\n<p>if it is broken on <strong>Zw/Nt Continue</strong> follow the <code>context-&gt;eip</code> from the stack <strong>[[esp+4] + 0xb8]</strong> and set a breakpoint on the eip found (this address normally will be <code>BaseThreadStartThunk which is directly identifiable if you have public symbols loaded</code> )  and hit <strong>go</strong>  once you are on BaseThreadStartThunk single step <strong>f8</strong> few times until you get to an <strong>indirect call</strong> <code>call dword ptr ds:[R32 + CONST]</code>  this is your ThreadProc    </p>\n<p>if it is broken on <strong>ZwRegisterTerminatePort</strong> you need to just single step (you will return to csrNewThread which you can find if symbols are available) and keep f8ing until you get to the indirect call stated above to land on ThreadProc</p>\n<p>the other apis are included in the above and can reduce the number of single step </p>\n<p>ntdll!ZwRegisterThreadTerminatePort is the closest break prior to ThreadProc</p>\n<p>needs one <code>ctrl+f9 (execute until return) and 3 f8 (single step)</code></p>\n<p>if windbg / livekd is an option this script can retrieve the eip when broken on ResumeThread call be it  Firsttime Resume or subsequent resumes</p>\n<pre><code>.foreach /ps 8 /pS 0n19 (place { !process 0 4 ${$arg1} } ) {.printf \"ETHREAD = %x\\n\", place ; r? $t0 =  (((nt!_ETHREAD *) @@masm( place ))-&gt;Tcb) ; r? $t1 = @$t0.StackLimit;r? $t2 = @$t0.InitialStack;.foreach (vlace {s -[1]d @$t1 @$t2 0x23 0x23 } ) {dt nt!_KTRAP_FRAME DbgEip Eip  @@masm(${vlace}-34) }}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Mar 11, 2015 at 21:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}