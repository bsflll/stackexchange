{
    "title": "How to calculate the checksum algorithm with data captures",
    "link": "https://reverseengineering.stackexchange.com/questions/19811/how-to-calculate-the-checksum-algorithm-with-data-captures",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an obsolete control system that I am trying to write an interface into our new control system. I have spent weeks capturing data and figuring out the  addressing, polling commands, point addressing and payload. I have everything figured out except on how to calculate the checksum on the packets. Below is a small sample of the data - I believe the first 2 bytes are the checksum, bytes 3/4 - address, bytes 5/6 - command, remaining bytes are the payload:</p>\n<pre><code>0e00 0801 1280 //to controller\n\n0e20 //from controller\n\n0e10 0801 1200 8010d00d9b0a19120a27375f01010412071f0e0a0512aa10495349474854000000000000000000000000000000000000000000001400ff0e0e00000000 //from controller\n\n0e40 //to controller\n\n0f00 0801 1285 //to controller\n\n0f20 //from controller\n\n0f10 0801 1200 0000000000000000000000000000000001010a0512aa105f1400ff //from controller\n\n0f40 //to controller\n\n1000 0801 1285 //to controller\n\n1020 //from controller\n\n1010 0801 1200 0000000000000000000000000000000001010a0512aa105f1400ff //from controller\n</code></pre>\n<p>The checksum appears to be out of order when viewing the data captures, but that is the order that it was captured in.</p>\n<p>I don't know if it matters or not, but I am writing the interface in Java.</p>\n<p>I appreciate any help that can be provided ... many thanks in advance.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "415",
    "tags": [
        "hex",
        "protocol",
        "binary-format"
    ],
    "user": "ddctech",
    "time": "Nov 6, 2018 at 7:19",
    "comments": [
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">What is the \"control program\" run on? Can you take its ROM and reverse engineer the program?</span>",
            "time": null
        },
        {
            "user": "ddctech",
            "text": "<span class=\"comment-copy\">Thanks for the response Ian. The program runs on a Windows pc and I am recreating what I need to read / write the point values in an embedded pc with a custom java program. I do not have enough experience with this to do anything with the ROM (I just started learning about packet sniffing a few months ago).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The first byte starts as <code>0E</code> is then <code>0F</code> and then <code>10</code>.\nThis looks something like a sequential message id, not part of a checksum.</p>\n<p>The second byte has a pattern to it too and, taking into account the message lengths, I'd interpret it as follows -</p>\n<pre><code>00 =&gt; request to controller\n20 =&gt; acknowledgement from controller of the request \n10 =&gt; response from controller\n40 =&gt; acknowledgement to controller of the response\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Ian Cook",
            "time": "Nov 4, 2018 at 13:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ddctech",
                    "text": "<span class=\"comment-copy\">That is a very interesting observation! The documentation states that a transaction consists of (4) data packets: Transmission packet, Acknowledge packet, Response packet and Response-Acknowledge packet.</span>",
                    "time": null
                },
                {
                    "user": "ddctech",
                    "text": "<span class=\"comment-copy\">I broke down some previous captures along with new captures after restarting the database pc, and the pc appears to be managing those sequence numbers. Back in the early 90s, the manufacturer came out with a serial to tcp router that I am connecting to over tcp - I assumed that the 4 packets mentioned above were handled in the tcp message. I also made the assumption that they were encapsulating the original serial message in the tcp data packet (which they are), but it looks like I just have to sequence my response and not worry about the checksum! Thanks for your help!</span>",
                    "time": null
                }
            ]
        }
    ]
}