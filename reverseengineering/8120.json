{
    "title": "Making application load dll at start",
    "link": "https://reverseengineering.stackexchange.com/questions/8120/making-application-load-dll-at-start",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've added some functionality to existing application which works through dll injection - my dll loads and patches some stuff. </p>\n<p>I would like it to be added to this application permanently so I don't have to inject it manually every time - I know there are some solutions such as:</p>\n<ol>\n<li>Loader - another application that runs target application and then injects a dll</li>\n<li>Patch EP - patch entry of target application so it loads my dll before executing rest</li>\n<li>AppInit_DLL - making it loads to almost every process through this register entry and then checking if we are in the right one, unload otherwise</li>\n</ol>\n<p>But are those options most optimal? First and second requires some work (maybe there are some already existing tools of which I don't know and which allows it? so I don't have to prepare it all myself), and third seems a bit over-excessive. \nJust to expand my knowledge - what are the other options?</p>\n</div>",
    "votes": "4",
    "answers": 5,
    "views": "9k",
    "tags": [
        "patching"
    ],
    "user": "larw",
    "time": "Jan 29, 2015 at 17:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You could also add the DLL to the EXE's Import Table. This has the benefit of not loading the DLL into every process that loads user32.dll (which is an issue with #3), and you can do this Import Table addition easily with a tool like <a href=\"http://www.woodmann.com/collaborative/tools/index.php/IIDKing\" rel=\"noreferrer\">IIDKing</a>:</p>\n<p><a href=\"http://www.woodmann.com/collaborative/tools/index.php/IIDKing\" rel=\"noreferrer\"><img alt=\"IIDKing\" src=\"https://i.sstatic.net/Sxe2n.png\"/></a></p>\n</div>",
            "votes": "5",
            "user": "Jason Geffner",
            "time": "Jan 29, 2015 at 18:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Suici Doga",
                    "text": "<span class=\"comment-copy\">chrome tells me the link has malware</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Alternative link: <a href=\"http://www.reteam.org/tools/tf23.zip\" rel=\"nofollow noreferrer\">reteam.org/tools/tf23.zip</a></span>",
                    "time": null
                },
                {
                    "user": "SampleTime",
                    "text": "<span class=\"comment-copy\">This tool crashes when I try to add a dll... any idea what could cause this problem?</span>",
                    "time": null
                },
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">@SampleTime yes, when you create dll, mark one of the functions with the __declspec( dllexport ) keyword: <a href=\"https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=vs-2019\" rel=\"nofollow noreferrer\">docs.microsoft.com/en-us/cpp/build/â€¦</a> . This IIDKing program adds dll to the import table of a PE file you pick and adds functions from that dll to the import address table(IAT) of a PE file you pick. So you need to have dll and you need it to export functions(have entries in the export address table(EAT)), so that IIDKing can add entries in your IAT, that's why IIDKing crashes: it can't find any entries in EAT of your dll.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's what i did some time ago, when i had your problem. </p>\n<ul>\n<li>Use dependency walker to find a DLL that's imported by the main executable, from which the .exe imports only one or two functions. For the sake of example, let's assume your application <code>someprog.exe</code> used a dll <code>vendor.dll</code>, from which it imports the <code>ShowCopyright</code> function.</li>\n<li>Using a hex editor, change the string <code>vendor.dll</code> in the executable to <code>hacker.dll</code>.</li>\n<li>In the startup of your DLL, use <code>LoadLibrary(\"vendor.dll\")</code> and <code>GetProcAddress(\"ShowCopyright\")</code> to get a function pointer to the real <code>ShowCopyright</code> function.</li>\n<li>Also, in your DLL, provide a <code>ShowCopyright</code> export that does nothing but jump to the <code>ShowCopyright</code> address you just retrieved.</li>\n<li>Rename your DLL <code>hacker.dll</code> and put it into the application's search path.</li>\n</ul>\n<p>Note this depends a bit on how many DLLs the executable program imports, and if you find one where you don't have to \"simulate\" several dozen API entries, or resources, or whatever can be linked to a dll. </p>\n<p>EDIT:</p>\n<p>After finishing my post, i found Jason's answer, which seems to be a bit more professional and easier. But, at least, my solution needs no tools except a hex editor :-)</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jan 29, 2015 at 18:19",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Strange as it is, two other methods have not been mentioned. The <code>AppInit_DLLs</code> approach you mentioned doesn't work anymore to the best of my knowledge. At least not as easily, especially when UEFI Secure Boot is enabled.</p>\n<ul>\n<li>DLL placement attack</li>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/xperf/image-file-execution-options\" rel=\"nofollow noreferrer\"><code>ImageFileExecutionOptions</code></a></li>\n</ul>\n<p>In both cases it depends on the target binary, so let's go through it.</p>\n<h3>DLL placement attack</h3>\n<p>I've run this in the past on Windows 7, but <a href=\"https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order\" rel=\"nofollow noreferrer\">the rules have changed since then</a>. The way I made it work was as follows. I figured out one (vendor-provided) DLL loaded by the program without a full path (I picked the one with the least number of imports). I then wrote a stub DLL which would simply pass through all function calls to the real DLL (loaded by full path) and print out useful info for me. The return value would simply be returned.</p>\n<p>It's easy to figure out the function prototypes of exported functions, so this was the lazy option for me.</p>\n<h2><code>ImageFileExecutionOptions</code></h2>\n<p>This method is used by Process Explorer to make itself a replacement for Task Manager. Here's how that looks in action:</p>\n<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\taskmgr.exe]\n\"Debugger\"=\"\\\"C:\\\\PATH\\\\TO\\\\PROCEXP.EXE\\\"\"\n</code></pre>\n<p>Now the value name probably gives it away already, this was previously used for a totally different purpose.</p>\n<p>Either way you can (ab)use it to achieve what you want. You write a little stub loader, acting as the \"debugger\". There isn't much to it, you don't even have to implement any of the debugger APIs, although you could.</p>\n<p>All you'll want to do is to use <code>CreateProcess</code> or similar to create a process with its main thread in suspended state upon \"start\". You can pass on the command line arguments as you wish (although it is, admittedly) a bit involved with <code>CreateProcess</code> and friends.</p>\n<p>The suspended main thread is where you can detour to your own code ... typically a simple piece of shell code that does nothing other than load <em>your</em> DLL and then return to the original entry point. Et voila, you have loaded <em>your</em> DLL into an application.</p>\n<p>The nice part about this second method is that it scales pretty well, since you basically only have to write this sort of \"debugger\" (loader) once. So it can be kept generic.</p>\n<p>This method amounts to doing (from the command line):</p>\n<pre><code>loader.exe C:\\path\\to\\hijacked\\application.exe argument1 argument2 and more arguments\n</code></pre>\n<p>... except that to the user this will be transparent. And I think inside your loader you can even use <code>argv[0]</code> to get the path to the hijacked executable, IIRC.</p>\n<p>Now you may think that this is some weird security issue and wonder why it's gone unnoticed. It's not a security issue insofar as you have to be privileged to set the <code>ImageFileExecutionOptions</code> in the first place.</p>\n<p>As a side-note: I <em>think</em> it's even permissible to name the containing key (<code>taskmgr.exe</code> in the above registry file) with the full path to the executable to be hijacked.</p>\n</div>",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jun 19, 2020 at 13:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As Jason Geffner said, you can add your DLL to the import table of your .exe. Other tool than IIDKing that can add your dll to the import table of a PE file is called <a href=\"http://www.cgsoftlabs.ro/dl.html\" rel=\"nofollow noreferrer\">Stud_PE</a>, which, unlike IIDKing, doesn't crash if your dll doesn't have any entries in the export address table(EAT):</p>\n<p><a href=\"https://i.sstatic.net/WBLSO.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/WBLSO.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "KulaGGin",
            "time": "Jun 19, 2020 at 11:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another program which can do what you're looking for is CFF Explorer:\n<a href=\"https://i.sstatic.net/17XLV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/17XLV.png\"/></a></p>\n</div>",
            "votes": "0",
            "user": "KulaGGin",
            "time": "Jul 19, 2020 at 17:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}