{
    "title": "Why do i get into endless loop in winapi when i am debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/9251/why-do-i-get-into-endless-loop-in-winapi-when-i-am-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am debugging some quiz program called \"abex crackme 1\"</p>\n<p>When I execute this program without debugging, it shows a simple message box, which reads \"Make me think your HD is a CD-Rom\"</p>\n<p>After I click OK button, it smoothly works without any problem.</p>\n<p>But when I debug this program, I am getting into endless loop.</p>\n<p>The program code is like this:\nFirst, it calls some function from dll to initialize something. But I think it doesn't matter now.</p>\n<p>And, It pushes some parameters and calls WinAPI function \"MessageBox A\" (see below)\n<img alt=\"5th line is what i am referring to\" src=\"https://i.sstatic.net/zKtOn.png\"/>\nWhen I tries to step over this Call instruction in ollydbg, a message box pops up. When I click OK button like i did, i can't escape some block of code(picture 2)\n<img alt=\"Endless loop\" src=\"https://i.sstatic.net/xepBg.png\"/></p>\n<p>I don't know why this is happening only when i am debugging.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "843",
    "tags": [
        "ollydbg",
        "winapi"
    ],
    "user": "Lee Young joo",
    "time": "Jun 29, 2015 at 14:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Look closely at the code you're looping within: it uses the FS register in several places. Now, googling for \"windows FS register\" tells you that this holds the segment of the <code>TIB</code> for <em>Thread Information Block</em>. And the first entry in that block, at byte offset 0, has the address of the current <code>SEH</code>, <em>Structured Exception Handler</em>.</p>\n<p>Your code above is writing to that SEH, so it's reasonable to assume (as this is within ntdll.dll) that this is the part of the kernel that processes (possibly nested) exceptions. Seems that your application somehow detects the presence of a debugger, and sets up a bogus exception handler in that case. Probably this happens way before your <code>MessageBoxA</code> call.</p>\n<p>I'd check the assembly code if there is any call to <code>IsDebuggerPresent</code>. Or, maybe, it gets the address of the current PEB (Process Environment Block) at <code>[fs:0x30]</code>, and reads the second byte of it, which is a <code>BeingDebugged</code> flag. Probably your code uses some of these to check for a debugger, and does something to the exception handler in that case.</p>\n<p>Also, your sample may just set up an exception handler, then execute an 'illegal' instruction, like <code>sti</code>, or access an unmapped memory location. This will raise the exception; but if you just single step your program, Olly won't know the exception is going to happen, so it places its temporary single-step-breakpoint at the wrong location. Try to remember the address where an exception happens when single stepping, and be careful to add a breakpoint on the exception handler the next time.</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jun 29, 2015 at 14:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lee Young joo",
                    "text": "<span class=\"comment-copy\">Oh! then would it work correctly without debugging check?? I assumed that it's some unknown nature of WinAPI haha. Your answer is really helpful to me ! thank you</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">@LeeYoungjoo: What i provided were possibilities. I can't say for sure what this particular malware does, without analyzing it myself, which i didn't. However, checking for debuggers, as well as playing with exception handlers, are some of the very basic anti-debugging techniques, so i'd expect an \"abex crackme <b>1</b> \" to use on of those instead of something much more advanced.</span>",
                    "time": null
                }
            ]
        }
    ]
}