{
    "title": "Is there an interactive way to search for immediate integer values using a mask in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/31386/is-there-an-interactive-way-to-search-for-immediate-integer-values-using-a-mask",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Other than scripting a solution to this, can anyone recommend an interactive method to search for immediate integer values <em>by mask</em> in IDA?</p>\n<p>Let me explain. Consider <code>NTSTATUS</code> values used in Windows internally. Roughly speaking if you see a 32 bit value that starts with (hexadecimal) <code>C</code>, followed by three <code>0</code> and then some arbitrary value in the lower 16 bit, chances are you are looking at an <code>NTSTATUS</code> <em>error</em> code. There are also success and warning codes, but a solution to this question would equally apply there.</p>\n<p>Now, if I hit <kbd>Alt</kbd>+<kbd>i</kbd>, I am able to search an immediate value and repeat that search later on with <kbd>Ctrl</kbd>+<kbd>i</kbd>. Alas, it only lets me search for <strong>exact values</strong>.</p>\n<p>What I would want is something akin to the CIDR notation for IP addresses, where -- for example -- I could give <code>0xC0000000/16</code> as the immediate \"search mask\" and it would find all of the values that fall into that range (<code>0xC0000000</code> .. <code>0xC000FFFF</code>). Another example would be <code>0xC0110000/16</code> which would find most of the status codes defined via enum <code>MACRO_HIDP</code> in the range <code>0xC0110000</code> .. <code>0xC011FFFF</code>.</p>\n<p>I realize that such a search could take a long time, but it would also be incredibly useful, especially if there was still the option to \"Find all occurrences\" where the \"Instruction\" column would be able to show me if I have already \"treated\" with <kbd>m</kbd> to turn into an enum.</p>\n<hr/>\n<p>Also, the IDC/IDAPython function <code>find_imm()</code> appears to suffer from the same limitation. And the only \"optimization\" I have found is to use the search for binary to narrow it down to a candidate list (basically mimicking that bit mask) and then using <code>find_imm()</code> and matching the EAs against each other. Guess I <a href=\"https://reverseengineering.stackexchange.com/a/11599/245\">could have used Sark instead</a>, but not sure it uses an optimization that compares.</p>\n<hr/>\n<p>As per a comment I tried using <code>?</code> as a wildcard, but that doesn't work and yields:</p>\n<p><a href=\"https://i.sstatic.net/FQXzL.png\" rel=\"nofollow noreferrer\"><img alt=\"Warning: 0: Syntax error near: ?\" src=\"https://i.sstatic.net/FQXzL.png\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "243",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Jan 12, 2023 at 15:08",
    "comments": [
        {
            "user": "Pulpo",
            "text": "<span class=\"comment-copy\">Its been a while since I used IDA but can't you search for immediate value <code>0xC0000????</code>?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This isn't a valid answer since it's scripting, but <code>find_imm</code> uses <code>find_byte</code> (or <code>find_byter</code>) to seek for each octet of your immediate value while using the flags (<code>get_flags</code>) to exclude results via <code>FF_CODE</code> (and <code>FF_DATA</code>). For <code>FF_CODE</code> (with the mask <code>MS_CLS</code>) you'd be excluding results that don't have the <code>FF_IMMD</code> bit set (mask is <code>MS_CODE</code>). Once your candidates are found, then a proper check can be done.</p>\n<p>That's why it needs exact values, anyways, since it's being used as a key to find the whole value. You can probably get away performance-wise in Py with doing something similar (but only including the bytes you care about).</p>\n<hr/>\n<p>Encountered a situation where I needed to do something similar and it reminded me of this answer. It depends on the ida-minsc plugin.</p>\n<pre class=\"lang-py prettyprint-override\"><code>everything = database.info.bounds()\n\n# Search entire database for any items with 0x44 in them,\n# that is code, and has an immediate value.\nfor ea in db.address(everything, step=lambda ea: db.address.nextbyte(0x44, ea)):\n    if not db.type.code(ea) or db.type.flags(db.address.head(ea), idaapi.MS_CODE) != idaapi.FF_IMMD:\n        continue\n\n    # Explicitly mask the immediates, looking for desired value (????4344).\n    immediates = ins.ops_immediate(ea)\n    if any(ins.op(ref) &amp; 0x0000FFFF == 0x00004344 for ref in immediates):\n        if len(immediates) &gt; 1:\n            print('check', hex(db.disasm(ref)))\n        db.tag(ea, 'alloc.candidate', [ref.opnum for ref in immediates][0])\n    continue\n\n# I did another pass to translate the address of each immediate to a\n# `call` instruction, but you can do this to get some windbg breakpoints.\nfor f, _ in db.selectcontents('alloc.candidate'):\n  for ea, res in func.select(f, 'alloc.candidate'):\n    #db.tag(ea, 'alloc.break', '.printf\"(%p) HIT\\\\n\",@rip;g')\n    print(\"bp {:s}+{:#x}\".format(db.module(), db.offset(ea)))\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Ali Rizvi-Santiago",
            "time": "Jun 25, 2024 at 15:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Thank you and welcome on RE.SE. Oh, I think it is a valid answer, even though it isn't spot on for my question (in which I ask for an interactive way). However, this helps me still, because in absence of an answer I've been looking for other ways to achieve the same. So thank you.</span>",
                    "time": null
                }
            ]
        }
    ]
}