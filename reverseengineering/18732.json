{
    "title": "*.abs (sfw) emulation in Qemu - MIPS (abs = Amiko,Skybox,OpenBox, Cryptobox,... file firmware)",
    "link": "https://reverseengineering.stackexchange.com/questions/18732/abs-sfw-emulation-in-qemu-mips-abs-amiko-skybox-openbox-cryptobox",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some questions well today I tried to emulate with (Qemu) a STB firmware (<code>.abs</code> extension file) in Qemu. So I tried to unpack the <code>.abs</code> file I got many files.</p>\n<p>Example for: Amiko HD8150 2.4.43 emu Firmware.</p>\n<blockquote>\n<p>Software used: Ali Main Code Decrypter 8.9</p>\n</blockquote>\n<p>Files unpacked: </p>\n<ul>\n<li>bootloader</li>\n<li>MemCfg</li>\n<li>maincode(AV)</li>\n<li>seecode</li>\n<li>default_lang</li>\n<li>cipluskey</li>\n<li>countryband</li>\n<li>logo_user</li>\n<li>logo_menu</li>\n<li>logo_radio</li>\n<li>logo_boot</li>\n<li>patch</li>\n<li>defaultdb(PRC)</li>\n<li>userdb(64+64)</li>\n</ul>\n<blockquote>\n<p>Software used: binwalk</p>\n</blockquote>\n<p>TERMINAL OUTPUT:</p>\n<pre><code># binwalk -e AMIKO_HD8150_2.4.43_emu.abs\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n\n--------------------------------------------------------------------------------\n196736        0x30080         LZMA compressed data, properties: 0x6C, dictionary size: 8388608 bytes, uncompressed size: 11883876 bytes\n3866752       0x3B0080        LZMA compressed data, properties: 0x6C, dictionary size: 8388608 bytes, uncompressed size: 3255512 bytes\n5636224       0x560080        LZMA compressed data, properties: 0x6C, dictionary size: 8388608 bytes, uncompressed size: 87904 bytes\n</code></pre>\n<p>Files unpacked:</p>\n<ul>\n<li>30080</li>\n<li>3B0080 </li>\n<li>560080</li>\n</ul>\n<p>When I open the 30080 file with hexdump I can see this at the end:</p>\n<pre><code># hexdump -C \n\npart of file \n\n\n00b51a30  00 00 00 00 4c 69 62 63  6f 72 65 20 76 65 72 73  |....Libcore vers|\n00b51a40  69 6f 6e 20 31 33 2e 31  36 2e 30 40 53 44 4b 34  |ion 13.16.0@SDK4|\n00b51a50  2e 30 66 61 2e 31 33 2e  31 36 5f 32 30 31 36 31  |.0fa.13.16_20161|\n00b51a60  30 31 39 28 67 63 63 20  76 65 72 73 69 6f 6e 20  |019(gcc version |\n00b51a70  33 2e 34 2e 34 20 6d 69  70 73 73 64 65 2d 36 2e  |3.4.4 mipssde-6.|\n00b51a80  30 36 2e 30 31 2d 32 30  30 37 30 34 32 30 29 28  |06.01-20070420)(|\n00b51a90  41 64 6d 69 6e 69 73 74  72 61 74 6f 72 40 20 46  |Administrator@ F|\n00b51aa0  72 69 2c 20 4a 75 6c 20  32 38 2c 20 32 30 31 37  |ri, Jul 28, 2017|\n00b51ab0  20 31 32 3a 35 33 3a 32  38 20 41 4d 29 0a 00 00  | 12:53:28 AM)...|\n00b51ac0  44 4d 58 5f 53 33 36 30  31 5f 30 00 00 a1 03 18  |DMX_S3601_0.....|\n</code></pre>\n<p>When I use <code>readelf</code> it says this file isn't an ELF file. </p>\n<p>So I tried to open the bin 30080 in the <code>qemu</code> (Win64) but it doesn't start the emulation.</p>\n<pre><code>  C:\\Program Files\\qemu&gt;qemu-system-mips.exe -machine mips -cpu mips32r6-generic -drive file=C:\\30080.bin,index=0,media=disk,format=raw\n\nqemu-system-mips.exe: warning: could not load MIPS bios 'mips_bios.bin'\n</code></pre>\n<p>So I think something is wrong. Well I know the kernel is missing but how can I know the correct kernel for this firmware. Has someone tried to open (emulate) a STB firmware in Qemu before? Do you think I need to create an image with bin files or emulate as rs232 flash ? </p>\n<p>Sorry for all this questions I never used Qemu before.</p>\n<blockquote>\n<p><strong><em>UPDATE #1</em></strong></p>\n</blockquote>\n<p>So i tested some differents emulators like Firmadyne and Qemu, and now i can point the *.abs is not a linux embedded firmware like dreambox, so i opened a issue ticket in the fimadyne and qemu about my issues to can do a emulation with the *.abs or *.bin files from STB Receivers like (Amiko,Openbox,Skybox,AZbox, Cryptobox,etc...). </p>\n<p>And now i just received some replies in Firmadyne Github.</p>\n<p><a href=\"https://github.com/firmadyne/firmadyne/issues/83\" rel=\"nofollow noreferrer\">Firmadyne ticket issue about *.abs or *.bin emulation</a> </p>\n<p>because when i tried to open binary and/or *.abs files he shows a error about extraction. </p>\n<p>So here he go the issue i have in the Firmadyne</p>\n<blockquote>\n<p>Terminal OUTPUT:</p>\n</blockquote>\n<pre><code>    root@ns2:/Firmware/firmadyne# ./sources/extractor/extractor.py -b Amiko -sql 127.0.0.1 -np -nk \"AMIKO_HD8150_2.4.43_emu.zip\" images\n\nroot@ns2:/Firmware/firmadyne# &gt;&gt; Database Image ID: 2\n\nroot@ns2:/Firmware/firmadyne/AMIKO_HD8150_2.4.43_emu.zip\nroot@ns2:&gt;&gt; MD5: 17c266121d5568340ef927c211fcc4f4\nroot@ns2:&gt;&gt; Tag: 2\nroot@ns2:&gt;&gt; Temp: /tmp/tmpOqzn89\nroot@ns2:&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 root@ns2:Do_Rootfs: True\nroot@ns2:&gt;&gt;&gt;&gt; Zip archive data, at least v2.0 to extract, compressed size: root@ns2:4454941, uncompressed size: 8388608, name: AMIKO_HD8150_2.4.43_emu.abs\nroot@ns2:&gt;&gt; Recursing into archive ...\n\nroot@ns2:/tmp/tmpOqzn89/_AMIKO_HD8150_2.4.43_emu.zip.extracted/rlz_notes.txt\n        root@ns2:&gt;&gt; MD5: aa5c7dd374bf981442deb5fa67e7189e\n        root@ns2:&gt;&gt; Skipping: text/plain...\n\nroot@ns2:/tmp/tmpOqzn89/_AMIKO_HD8150_2.4.43_emu.zip.extracted/AMIKO_HD8150_2.4.43_emu.abs\n        root@ns2:&gt;&gt; MD5: dc6b86caa2c55d18a43ca9ad9053bc77\n        root@ns2:&gt;&gt; Tag: 2\n        root@ns2:&gt;&gt; Temp: /tmp/tmpBNDrbm\n        root@ns2:&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 root@ns2:Do_Rootfs: True\n        root@ns2:&gt;&gt; Recursing into archive ...\n        **root@ns2:&gt;&gt;&gt;&gt; Extraction failed!**\n        root@ns2:&gt;&gt;&gt;&gt; LZMA compressed data, properties: 0x6C, dictionary size: root@ns2:8388608 bytes, uncompressed size: 11883876 bytes\n        root@ns2:&gt;&gt; Recursing into compressed ...\n</code></pre>\n<p><strong>AND A LOT OF OTHER MESSAGES ABOVE</strong></p>\n<p>So after this issue i opened a issue ticket in Gihub and they told me this *.abs or *.bin files is not a linux embedded device so i googled again about qemu to emulate non linux-embedded device and i found a other ask/question in Stackexchange talking about Unicorn Framework. so i going to test Unicorn Framework to check if the answer is here. </p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/14523/emulating-non-linux-firmware-image-of-embedded-devices\">Post about Emulating Non-Linux Embedded device.</a></p>\n<p>I found the bootloader <a href=\"https://github.com/jinfeng-geeya/3202C\" rel=\"nofollow noreferrer\">generic code here</a>.\nso if anybody have news or something to help me to go to the right way thanks you to give me answers.</p>\n<p>Regards,</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "firmware",
        "binary",
        "mips",
        "qemu",
        "emulation"
    ],
    "user": "David Martins",
    "time": "Jul 14, 2018 at 22:40",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi @DavidMartins and welcome to RE.SE. I edited your question in order to - hopefully - make it more understandable. While when taking notes for yourself you can do whatever you like, please keep in mind that here you are posing a question for others to read and comprehend. Many of us (including myself) are not native speakers of English, but punctuation will go a long way in separating parts of sentences or sentences and aid in understanding what you ask.</span>",
            "time": null
        },
        {
            "user": "David Martins",
            "text": "<span class=\"comment-copy\">@sudhackar Thank you for you suggestions. Suggestions Approved Thanks i hope replies</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unfortunately QEMU is not well suited for your use case. As explained in your addendum, it is mostly used to emulate embedded Linux systems, that’s why there are many assumptions in its code: that the kernel is a Linux kernel (i.e. an ELF file) and the disk image contains a Linux rootfs. In addition, the specific hardware configurations (“machines”) emulated by QEMU are mostly limited to those that are supported by Linux. That does not mean that it can’t emulate non-Linux systems or hardware not supported by Linux, but to support anything unusual or non-mainstream you’ll probably have to do some coding, either to add support for your specific hardware or for the firmware layout you have so that QEMU can emulate it properly using the framework that already exists inside the code. However, using unmodified QEMU build is likely not enough for your use case. If you want to try your hand at extending QEMU I’d recommend you to contact the developers, e.g. on their mailing list for concrete recommendations. I’m afraid such work is outside of scope of this site so I’m finishing my answer here. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jul 15, 2018 at 13:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David Martins",
                    "text": "<span class=\"comment-copy\">Thank you so much to reply to my question, well actually a tried to build a kernel to see if the Qemu can support the fs (File Systems) but for now nothing happened. If i get some result and if the Qemu community give me some help i reply here and mark a update in my question.   Rgds</span>",
                    "time": null
                }
            ]
        }
    ]
}