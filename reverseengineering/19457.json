{
    "title": "Extract firmware images from COTS embedded devices",
    "link": "https://reverseengineering.stackexchange.com/questions/19457/extract-firmware-images-from-cots-embedded-devices",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am on the hook to collect some of legacy firmware images from real-world embedded devices. Before digging into it, I am trying to confirm some high-level points. </p>\n<p>Is it in general possible to gather firmware images from legacy embedded devices? I can come up with some hurdles here:</p>\n<ol>\n<li>I am aware that many embedded devices disable the debug port.</li>\n<li>embedded system have the so-called \"Code Readout Protection\" mechanism to prevent users from downloading the firmware</li>\n</ol>\n<p>However, I am also  aware the following facts:</p>\n<ol>\n<li><p>Firmware could be extracted from embedded devices by abusing busybox, for instance its <code>wget</code> command. Something like: <a href=\"https://reverseengineering.stackexchange.com/questions/13402/limited-busybox-shell\">Limited BusyBox shell</a></p></li>\n<li><p>The \"code readout protection\" could be bypassed, so as the \"debug port\" issue.</p></li>\n</ol>\n<p>So I am wondering if someone can really picture the landscape here, is it generally considered easy or not to extract legacy firmwares from embedded devices? What is the common procedure and best practice? Thanks. </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        "firmware",
        "exploit",
        "embedded"
    ],
    "user": "lllllllllllll",
    "time": "Oct 1, 2018 at 20:44",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">The scope of this question is far too broad.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@lllllllllllll: I strongly suggest you edit your question to be a little better scoped. This will maybe even prompt NirIzr to give an even better answer, even though the one he gave is already as comprehensive as it gets, given the detail you provide. So unless you find someone who has worked on the exact target you're trying to reverse, this will be as good as it gets without more details provided by you.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Although I agree this is a <i>very</i> general question, I do think it may be useful for future readers. I'm not sure OPs intention was to get an answer for a single specific device.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@NirIzr no worries, wasn't going to close or delete it. And I agree it's going to be useful for future internauts.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>As this question is quite general, it'll be difficult to provide a very technical answer.</em></p>\n<p>You've asked quite a few questions here, so please let me start with a general overview and then proceed to answer all of your specific questions.</p>\n<h2>General overview</h2>\n<p>The difficulty of pulling firmware images from an embedded device really depends on the firmware device itself, and the access you have to that firmware device.</p>\n<p>I would say there are a few different alternatives depending on your actual goal (just getting as many firmwares as possible verses getting firmwares for specific devices you're in possession of or interested in, for example). I'll list the general options in ascending difficulty:</p>\n<h3>Getting a firmware image/update online</h3>\n<p>Since a lot of devices support some kind of firmware update mechanisms, firmware images are often made available by the manufacturer either via a manual web page download for manual update or via a web service that will serve over-the-air updates. Although those updates may sometimes be encrypted, in most cases they are just signed - because the actual threat landscape is <em>modifying</em> a firmware and not <em>reading</em> it.</p>\n<p>As the format of a firmware update may be more complex to understand than a raw <code>dd</code> dump, for example, you'll need to spend extra efforts in understanding the format, extracting the firmware asset(s) from the firmware update file and optionally implementing some firmware-loading logic to get the in-memory image / addressing available. Tools like <a href=\"https://github.com/ReFirmLabs/binwalk\" rel=\"nofollow noreferrer\">binwalk</a> are a decent starting point.</p>\n<p>If firmware is only available over-the-air, you'll also need to spend time understanding the over-the-air protocol and any server side limitations on serving assets. A server may refuse offering an old version you're particularly interested in or require some kind of a per-device identification/authentication.</p>\n<h3>Using an application info-leak vulnerability</h3>\n<p>The simplest example that comes to mind is <a href=\"https://www.netsparker.com/blog/web-security/information-disclosure-issues-attacks/\" rel=\"nofollow noreferrer\">information disclosure vulnerabilities in web applications</a> that often exist on many embedded devices, however there may be other relevant targets. Unlike <em>native</em> information disclosure vulnerabilities where often pointers, addresses and memory data may be leaked, web information disclosure vulnerabilities often expose files and stored data. This may either allow you to pull other relevant information (for example, probing for hardware devices/interfaces) or even access to the firmware if it is either stored on the same storage or mounted (all the time or when an update runs).</p>\n<h3>Reading a firmware by software when shell access is available</h3>\n<p>Shell or root access may be available to you without looking at the firmware because of a known vulnerability or one that is easy enough to discover without actually reading any code. A device may also offer some kind of terminal access for debugging purposes. Instead of a full-blown terminal, one can have the ability to just execute a single shell command using command injections, for example.</p>\n<p>Once you have access, this is mostly a matter of probing for any available assets and recovering whatever you can.</p>\n<h3>Reading a firmware by hardware when physical access if available</h3>\n<p>As this can often be the most challenging way of extracting firmware images, you may occasionally be lucky to the point that this approach can be as easy as pulling a SD card and plugging it into a computer. This isn't often the case, though. Since this specific topic is quite huge and you seem to be looking for an overview, I will not dive deep into the specifics.</p>\n<p>When physical access to a device is available and any debug ports, uarts, or serial ports are available, you may often find them very useful for extracting details about the firmware. Some of those features may also be available through an ethernet port. These debugging interfaces often provide raw access to different components, such as the storage or controlling the boot sequence.</p>\n<p>Although sometimes identifying such a port can be easy thanks to exposed unconnected pinheads and existing pin label printouts depicted below:</p>\n<p><a href=\"https://i.sstatic.net/hkWEK.png\" rel=\"nofollow noreferrer\"><img alt=\"pinheads\" src=\"https://i.sstatic.net/hkWEKs.png\"/></a> <a href=\"https://i.sstatic.net/2CT1Q.jpg\" rel=\"nofollow noreferrer\"><img alt=\"pin labels\" src=\"https://i.sstatic.net/2CT1Qs.jpg\"/></a></p>\n<p><em>Unmounted pinheads on the left, pin labels on the right. Click to enlarge</em></p>\n<p>The different debug ports could also be harder to recognize when no labels are printed and there are no pinheads connected. A walk-through example for identifying both exposed and hidden debug ports is available <a href=\"http://jcjc-dev.com/2016/04/08/reversing-huawei-router-1-find-uart/\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>When debug ports are insufficient, the next step further is directly reading the firmware from the storage chip. This often includes either taking it out of the board and using your own electronic circuit to read memory out of the chip or hooking to the chip while it's still connected to the original board but either passively listening to data as it's read by the device or issuing your own read instructions. You'll first need to identify the circle components and their purpose, and manufacturer datasheets. This will obviously also require dedicated hardware. Generic boards exist for that purpose (some specifically for firmware extraction and hardware reverse engineering like <a href=\"http://goodfet.sourceforge.net/\" rel=\"nofollow noreferrer\">GoodFET</a> and <a href=\"https://en.wikipedia.org/wiki/Bus_Pirate\" rel=\"nofollow noreferrer\">BusPirate</a>) and you can also get some development equipment from chip manufacturers that use proprietary <a href=\"https://en.wikipedia.org/wiki/In-system_programming\" rel=\"nofollow noreferrer\">In Circuit Serial Programming</a>, if they'll be willing to sell those to you.</p>\n<p>You can go even as far as reading the data directly from the chip using electrical and optical analysis of the chips' die layers, but that seems unlikely for your case.</p>\n<h2>Answering your specific questions</h2>\n<blockquote>\n<p>Is it in general possible to gather firmware images from legacy embedded devices?</p>\n</blockquote>\n<p>As mentioned earlier, this greatly depends on the specific device and how protected it may be. It tends to be doable for most cheap devices but as a device becomes more expensive you can assume it'll be more complex and indirectly incur more difficulties.</p>\n<p>It is also important to note that excluding the really expensive and/or often targeted devices (smartphones is a good example of those), most difficulties will not come from a manufacturer actively trying to make firmware extraction harder, but will more often come from design decisions and product choices and just happen to impact the difficulty of extracting a firmware image.</p>\n<blockquote>\n<ol>\n<li>I am aware that many embedded devices disable the debug port</li>\n</ol>\n</blockquote>\n<p>Although this can sometimes be the case for either increased security or to reduce costs, removing a debug port completely makes repairs and QA more difficulties. Often, although the debug port may to be included a convenient pinout may be laid out for easy access, either heads for easy access or without as seen in the following picture:</p>\n<p><a href=\"https://i.sstatic.net/OZkrr.jpg\" rel=\"nofollow noreferrer\"><img alt=\"output pins without a head soldiered on them\" src=\"https://i.sstatic.net/OZkrrm.jpg\"/></a></p>\n<p><em>Picture taken from <a href=\"http://jcjc-dev.com/2016/04/08/reversing-huawei-router-1-find-uart/\" rel=\"nofollow noreferrer\">this</a> step by step hardware reverse engineering tutorial</em></p>\n<blockquote>\n<ol start=\"2\">\n<li>embedded system have the so-called \"Code Readout Protection\" mechanism to prevent users from downloading the firmware</li>\n</ol>\n</blockquote>\n<p>The cheaper devices will generally not bother with code readout protection, and there are some ways to bypass it although those tend to be relatively difficult and specific. One such method is to remove the storage chip and interact with it directly to extract the firmware image, as I previously mentioned in <em>Reading a firmware by hardware when physical access if available</em>.</p>\n<blockquote>\n<ol>\n<li>Firmware could be extracted from embedded devices by abusing busybox, for instance its <code>wget</code> command. Something like: <a href=\"https://reverseengineering.stackexchange.com/questions/13402/limited-busybox-shell\">Limited BusyBox shell</a></li>\n</ol>\n</blockquote>\n<p>This approach is an example of what I've discussed under <em>Reading a firmware by software when shell access is available</em> above. In the example you linked, <code>wget</code> is used to exfiltrate the data after you get it, but there's no limit to the creativity of that (one can even go as far as use available LEDs to encode binary data).</p>\n<blockquote>\n<ol start=\"2\">\n<li>The \"code readout protection\" could be bypassed, so as the \"debug port\" issue</li>\n</ol>\n</blockquote>\n<p>Yes, through slightly more advanced hardware reverse engineering tools and abilities it is possible to extract software from chips that have readout protection, use a device port although it isn't mounted, avoid the need of a debug port, using the chip's datasheet to recognize how to properly read the data out, <em>snarfing</em> it while it's being read by the existing circuit, etc...</p>\n<blockquote>\n<p>is it generally considered easy or not to extract legacy firmwares from embedded devices? What is the common procedure and best practice?</p>\n</blockquote>\n<p>As shown by this post, and repeated several times, this can be relatively easy or relatively difficult, depending on specific case. Common procedures also vary heavily.</p>\n<h2>Further reading</h2>\n<p>The topic of hardware reverse engineering is big an wide, and it is hard to cover it all in an SO post. You should spend more time reading, watching talks and following walkthroughs to gain more knowledge on the subject. Here are a few resources:</p>\n<ol>\n<li>A survey of <a href=\"https://www.iacr.org/archive/ches2009/57470361/57470361.pdf\" rel=\"nofollow noreferrer\">The State-of-the-Art in IC Reverse Engineering</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=YCbpppOSBGE\" rel=\"nofollow noreferrer\">Keep your tentacles off my bus</a> and <a href=\"https://www.youtube.com/results?search_query=Dmitry%20Nedospasov\" rel=\"nofollow noreferrer\">other talks</a> by <a href=\"https://twitter.com/nedos?lang=en\" rel=\"nofollow noreferrer\">Dmitry Nedospasov</a>.</li>\n<li>This hardcore example of <a href=\"http://travisgoodspeed.blogspot.com/2011/03/practical-mc13224-firmware-extraction.html\" rel=\"nofollow noreferrer\">firmware extraction by decapping</a> by <a href=\"https://twitter.com/travisgoodspeed\" rel=\"nofollow noreferrer\">Travis Goodspeed</a>.</li>\n<li><a href=\"http://jcjc-dev.com/2016/04/08/reversing-huawei-router-1-find-uart/\" rel=\"nofollow noreferrer\">This</a> introductory level, five part hardware/firmware reverse engineering walkthrough.</li>\n<li>A <a href=\"https://www.youtube.com/watch?v=GX8-K4TssjY\" rel=\"nofollow noreferrer\">presentation</a> about practical extraction using a Null dereference bug.</li>\n</ol>\n<p>and many other resources available online.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Fantastic answer! I appreciate it a lot. I will read your answer in details and leave more comments later. Take care!</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thanks again for your detailed information. Just another (quick?) question, I am always assuming that firmware (over-the-air) update is a rare case, which can only be handled by experts. Hence many firmware images that can be extracted  from the real-world device is a bit \"out-dated\". To get the newest firmware, you probably have to crawl online. Does that make sense to you?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. For a lot of the devices that don't have over the air updates users will have to update manually.</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Yes, I see. But on the other hand users probably need some advanced skills to update, or they basically do not have the motivation to do that. So I guess the argument holds to see that \"many firmware in real-world embedded devices\" are kinda outdated. So we will need to go for their web page to get the newest version.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yep. Definitely. Users don't bother doing all that</span>",
                    "time": null
                }
            ]
        }
    ]
}