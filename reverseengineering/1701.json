{
    "title": "Decompiling .pyc files",
    "link": "https://reverseengineering.stackexchange.com/questions/1701/decompiling-pyc-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Does anybody have a suggestion for (non commercial) software to decompile \"byte-code\" Python (.pyc) files?</p>\n<p>Everything I've found seems to break...</p>\n</div>",
    "votes": "27",
    "answers": 7,
    "views": "97k",
    "tags": [
        "tools",
        "decompilation",
        "python"
    ],
    "user": "Carlos Garcia",
    "time": "Apr 10, 2013 at 14:27",
    "comments": [
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">tried <a href=\"https://github.com/Mysterie/uncompyle2\" rel=\"nofollow noreferrer\">uncompyle2</a> ?</span>",
            "time": null
        },
        {
            "user": "alexanderh",
            "text": "<span class=\"comment-copy\">I haven't read it yet so I won't offer as an answer but <i>A Problem Course in Compilation: From Python to x86 Assembly</i> might be of use. <a href=\"http://www.cs.colorado.edu/~bec/courses/csci4555-f11/reading/notes.pdf\" rel=\"nofollow noreferrer\">link</a></span>",
            "time": null
        },
        {
            "user": "Carlos Garcia",
            "text": "<span class=\"comment-copy\">Alex, you kill me. Another PDF to my huge \"To read\" stack. Looks pretty interesting, thanks ;)</span>",
            "time": null
        },
        {
            "user": "jvoisin",
            "text": "<span class=\"comment-copy\">possible duplicate of <a href=\"http://reverseengineering.stackexchange.com/questions/1999/what-are-the-tools-to-analyze-python-bytecode\">What are the tools to analyze Python bytecode?</a></span>",
            "time": null
        },
        {
            "user": "pestophagous",
            "text": "<span class=\"comment-copy\">uncompyle6 has now superseded uncomplye2. credit to other answer for helping me learn this: <a href=\"https://stackoverflow.com/a/14808336/10278\">stackoverflow.com/a/14808336/10278</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What Python version you're decompiling? Py3k is not well supported, but there are quite a few decompilers for 2.x. One of the latest projects is this:</p>\n<p><a href=\"https://github.com/Mysterie/uncompyle2\">https://github.com/Mysterie/uncompyle2</a></p>\n<p>It runs on Python 2.7 but supports decompiling 2.5 to 2.7.</p>\n<p>Note that some commercial projects has been known to use modified Python interpreters. Modifications can include:</p>\n<ul>\n<li>bytecode files encryption</li>\n<li>changed opcode values or additional opcodes</li>\n<li>a heavily customized runtime (e.g. Stackless Python)</li>\n</ul>\n<p>If you need to handle this, one approach is to convert non-standard bytecode to standard one and then use the usual decompilers (this apparently was used by the people from above project to decompile Dropbox code). Another is to change the decompiler to directly support the variations.</p>\n</div>",
            "votes": "25",
            "user": "Igor Skochinsky",
            "time": "Apr 10, 2013 at 14:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "pestophagous",
                    "text": "<span class=\"comment-copy\">update from 2018 (five years later): uncompyle6 has now superseded uncomplye2. credit to other answer for helping me learn this: <a href=\"https://stackoverflow.com/a/14808336/10278\">stackoverflow.com/a/14808336/10278</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might find <a href=\"https://github.com/MyNameIsMeerkat/pyREtic\" rel=\"nofollow\">pyREtic</a> from <a href=\"http://www.immunityinc.com/resources-freesoftware.shtml\" rel=\"nofollow\">Immunity</a> to be useful. The presentation from <a href=\"https://www.youtube.com/watch?v=2RnR4fKYq-0\" rel=\"nofollow\">BlackHat USA 2010 on pyREtic is here (YouTube)</a>.</p>\n<blockquote>\n<p><strong>pyREtic</strong></p>\n<p>Reverse Engineer Obfuscated Python Bytecode This toolkit allows you to\n  take a object in memory back to source code, without needing access to\n  the bytecode directly on disk. This can be useful if the applictions\n  pyc's on disk are obfuscated in one of many ways.</p>\n</blockquote>\n</div>",
            "votes": "13",
            "user": "Community",
            "time": "Feb 29, 2016 at 14:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I, of course, use <a href=\"https://pypi.org/project/uncompyle6/\" rel=\"nofollow noreferrer\">uncompyle6</a>. Disclaimer: I work on this project.</p>\n<p>I've written at length about the uncompyle6 and pycdc <a href=\"https://stackoverflow.com/a/38593394/546218\">here</a>.</p>\n</div>",
            "votes": "4",
            "user": "rocky",
            "time": "Nov 13, 2018 at 18:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Olivier Lasne",
                    "text": "<span class=\"comment-copy\">I did use this for a CTF, I am impressed by the quality of the code generated (for a simple pyc in my case).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For initial and rough Python bytecode disassembly, I would be using the Python standard library <code>dis</code> module: <a href=\"https://docs.python.org/2/library/dis.html\" rel=\"nofollow\">https://docs.python.org/2/library/dis.html</a></p>\n</div>",
            "votes": "2",
            "user": "lockout",
            "time": "Feb 29, 2016 at 18:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is what you're looking for, I just came across a fully working Python decompiler named \"<a href=\"http://sourceforge.net/projects/easypythondecompiler/\" rel=\"nofollow noreferrer\">Easy Python Decompiler</a>\".</p>\n</div>",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Nov 13, 2018 at 8:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is also an open-source Python (<code>.pyc</code>) decompiler, called <a href=\"https://github.com/zrax/pycdc\" rel=\"nofollow noreferrer\">Decompyle++</a></p>\n<p>Decompyle++ aims to translate compiled Python byte-code back into valid and human-readable Python source code. \nWhile other projects have achieved this with varied success, Decompyle++ is unique in that it seeks to support byte-code from any version of Python.</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Nov 12, 2018 at 22:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recommend <code>uncompyle6</code>. it can decompile pyc/pyo files and it is compatible with python 3</p>\n<ol>\n<li><p><code>pip install uncompyle6</code></p>\n</li>\n<li><p><code>uncompyle6 FILE.pyc</code></p>\n</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "REEDNIV",
            "time": "May 8, 2021 at 0:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bikalpa",
                    "text": "<span class=\"comment-copy\">Could not find a version that satisfies the requirement <code>decompyle3</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}