{
    "title": "Windbg memory access error when trying to edit a string value of a button",
    "link": "https://reverseengineering.stackexchange.com/questions/27771/windbg-memory-access-error-when-trying-to-edit-a-string-value-of-a-button",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So i was trying to edit the string value of a button as a debugging practice using windbg. I'm still a complete novice in reverse engineering and debugging, when i try to edit the string value using the command <code>eb</code> it gives me <code>Memory Access Error</code>. is there a correct way to do this trivial but complicated for a beginner task?\nThanks in advance\n<a href=\"https://i.sstatic.net/raylj.png\" rel=\"nofollow noreferrer\"><img alt=\"\" src=\"https://i.sstatic.net/raylj.png\"/></a>\ntext:</p>\n<pre><code>\nMicrosoft (R) Windows Debugger Version 6.11.0001.402 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nCommandLine: E:\\tests\\rr\\test.exe\nFindTheBuild service not found\nSymbol search path is: srv*\nExecutable search path is: \nModLoad: 00400000 0041d000   image00400000\nModLoad: 7c900000 7c9af000   ntdll.dll\nModLoad: 7c800000 7c8f6000   C:\\WINDOWS\\system32\\kernel32.dll\nModLoad: 77c10000 77c68000   C:\\WINDOWS\\system32\\msvcrt.dll\nModLoad: 7e410000 7e4a1000   C:\\WINDOWS\\system32\\USER32.dll\nModLoad: 77f10000 77f59000   C:\\WINDOWS\\system32\\GDI32.dll\n(6dc.43c): Break instruction exception - code 80000003 (first chance)\neax=00341eb4 ebx=7ffdc000 ecx=00000007 edx=00000080 esi=00341f48 edi=00341eb4\neip=7c90120e esp=0022fb20 ebp=0022fc94 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for ntdll.dll - \nntdll!DbgBreakPoint:\n7c90120e cc              int     3\n0:000&gt; g\n(6dc.1e8): Break instruction exception - code 80000003 (first chance)\neax=7ffdc000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\neip=7c90120e esp=0097ffcc ebp=0097fff4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\nntdll!DbgBreakPoint:\n7c90120e cc              int     3\n0:001&gt; \n0:001&gt; s -w 00400000 0041d000 6d 66\n00404042  006d 0066 0000 0042 0055 0054 0054 004f  m.f...B.U.T.T.O.\n0:001&gt; db 00404042\n00404042  6d 00 66 00 00 00 42 00-55 00 54 00 54 00 4f 00  m.f...B.U.T.T.O.\n00404052  4e 00 00 00 00 00 53 00-61 00 6d 00 70 00 6c 00  N.....S.a.m.p.l.\n00404062  65 00 20 00 57 00 69 00-6e 00 64 00 6f 00 77 00  e. .W.i.n.d.o.w.\n00404072  20 00 43 00 6c 00 61 00-73 00 73 00 00 00 70 18   .C.l.a.s.s...p.\n00404082  40 00 55 6e 6b 6e 6f 77-6e 20 65 72 72 6f 72 00  @.Unknown error.\n00404092  00 00 5f 6d 61 74 68 65-72 72 28 29 3a 20 25 73  .._matherr(): %s\n004040a2  20 69 6e 20 25 73 28 25-67 2c 20 25 67 29 20 20   in %s(%g, %g)  \n004040b2  28 72 65 74 76 61 6c 3d-25 67 29 0a 00 00 41 72  (retval=%g)...Ar\n0:001&gt; eb 00404042 41 41 66 00 00 00 42 00 55 00 54 00 54 00 4f 00\n                                                                 ^ Memory access error in 'eb 00404042 41 41 66 00 00 00 42 00 55 00 54 00 54 00 4f 00'\n</code></pre>\n<p>program:</p>\n<pre><code>#ifndef UNICODE\n#define UNICODE\n#endif \n\n#include &lt;windows.h&gt;\n#include &lt;windowsx.h&gt;\n#include &lt;stdio.h&gt;\n\nLRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);\n\nint WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)\n{\n    // Register the window class.\n    const wchar_t CLASS_NAME[]  = L\"Sample Window Class\";\n    \n    WNDCLASS wc = { };\n\n    wc.lpfnWndProc   = WindowProc;\n    wc.hInstance     = hInstance;\n    wc.lpszClassName = CLASS_NAME;\n\n    RegisterClass(&amp;wc);\n\n    // Create the window.\n\n    HWND hwnd = CreateWindowEx(\n        0,                              // Optional window styles.\n        CLASS_NAME,                     // Window class\n        L\"Learn to Program Windows\",    // Window text\n        WS_OVERLAPPEDWINDOW,            // Window style\n\n        // Size and position\n        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,\n\n        NULL,       // Parent window    \n        NULL,       // Menu\n        hInstance,  // Instance handle\n        NULL        // Additional application data\n        );\n\n    if (hwnd == NULL)\n    {\n        return 0;\n    }\n\n   HWND hwndButton = CreateWindow( \n    L\"BUTTON\",  // Predefined class; Unicode assumed \n    L\"special_mf\",      // Button text \n    WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,  // Styles \n    10,         // x position \n    10,         // y position \n    200,        // Button width\n    25,        // Button height\n    hwnd,     // Parent window\n    NULL,       // No menu.\n    (HINSTANCE)GetWindowLongPtr(hwnd, GWLP_HINSTANCE), \n    NULL);      // Pointer not needed.\n\n    Button_Enable(hwndButton , FALSE);\n\n    ShowWindow(hwnd, nCmdShow);\n    \n    // Run the message loop.\n\n    MSG msg = { };\n    while (GetMessage(&amp;msg, NULL, 0, 0))\n    {\n        TranslateMessage(&amp;msg);\n        DispatchMessage(&amp;msg);\n    }\n\n    return 0;\n}\n\nLRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\n    switch (uMsg)\n    {\n    case WM_DESTROY:\n        PostQuitMessage(0);\n        return 0;\n\n    case WM_PAINT:\n        {\n            PAINTSTRUCT ps;\n            HDC hdc = BeginPaint(hwnd, &amp;ps);\n\n\n\n            FillRect(hdc, &amp;ps.rcPaint, (HBRUSH) (COLOR_WINDOW+1));\n\n            EndPaint(hwnd, &amp;ps);\n        }\n        return 0;\n\n    }\n    return DefWindowProc(hwnd, uMsg, wParam, lParam);\n}\n\n\nINT WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,\n    PSTR lpCmdLine, INT nCmdShow)\n{\n   wWinMain(hInstance , hPrevInstance, lpCmdLine,  nCmdShow);\n    return 0;\n}\n</code></pre>\n<p>compiling options with mingw:</p>\n<pre><code>gcc -m32 -w -mwindows test.c -o test.exe\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "378",
    "tags": [
        "windbg",
        "winapi"
    ],
    "user": "Someone",
    "time": "Jun 1, 2021 at 18:48",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">Tried your example and didn't get any memory access error, but aren't you mixing wide char with regular ones in your <code>eb</code> command?</span>",
            "time": null
        },
        {
            "user": "Someone",
            "text": "<span class=\"comment-copy\">eb 00404042 41 41 66 00 00 00 42 00 55 00 54 00 54 00 4f 00 @PawełŁukasik  ?</span>",
            "time": null
        },
        {
            "user": "Someone",
            "text": "<span class=\"comment-copy\">@PawełŁukasik still giving me the same error</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">well as pawel said i also compiled your code as windows with vs 2017 somedays back and didnt find any crash on windbg one thing i can say is you are using a very old windbg 6.1 on probably a new machine  may be check with some latest versionof windbg ? <a href=\"https://imgur.com/VL7ZgPH\" rel=\"nofollow noreferrer\">image of edit</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}