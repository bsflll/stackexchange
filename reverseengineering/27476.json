{
    "title": "On reverse engineering an udp protocol to control a drone",
    "link": "https://reverseengineering.stackexchange.com/questions/27476/on-reverse-engineering-an-udp-protocol-to-control-a-drone",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My goal is to control my drone with my raspberry pi using python and not the app that is being delivered together with it.</p>\n<ul>\n<li><p>First I connected the app to the drone, flew and used aircrack-ng to get the pcap.</p>\n</li>\n<li><p>I looked at it in wireshark and could not make sense of it.</p>\n</li>\n<li><p>I presume it to be unencrypted UDP though.</p>\n</li>\n<li><p>So I decompiled the java apk with APK Studio and looked at the source code.</p>\n</li>\n<li><p>I looked for a random button in an xml to find the corresponding method in a java file.</p>\n</li>\n<li><p>It did not exist.</p>\n</li>\n</ul>\n<p>There are some small files.</p>\n<p>Which approach do you suggest for reverse engineering?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "666",
    "tags": [
        "python",
        "disassemblers",
        "apk",
        "protocol",
        "wireshark"
    ],
    "user": "Pascal Widmann",
    "time": "Feb 22, 2023 at 6:13",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">For decompiling the Android app I would use Jadx. Try to identify where the UDP packets  are sent and then trace back the calls where the packets are generated. As you have a running set-up you may use Frida on certain methods you have identified via Jadx and hook them to see what parameters they are called with at run-time.</span>",
            "time": null
        },
        {
            "user": "Pascal Widmann",
            "text": "<span class=\"comment-copy\">Feel free to try it with the A20 app: <a href=\"https://m.apkpure.com/de/potensic/com.udirc.Potensic\" rel=\"nofollow noreferrer\">m.apkpure.com/de/potensic/com.udirc.Potensic</a> Using APK Studio, which is a gui for jadx, I wasn't able to extract the methods that referred to the buttons. If you are more successful, I'd appreciate the steps you took, not necessarily the result. PS: Is Frida a stacktracer, ie it points out the command route?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you use an android app, you may use network debuggers such as</p>\n<p><a href=\"https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture\" rel=\"nofollow noreferrer\">https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture</a></p>\n<p>this also supports UDP</p>\n<p>This might be easier to use/retrieve your data.</p>\n<p>I used this myself to gain independent access to my Iot devices.</p>\n<p>Be aware:\nSome apps have their own client certificates pinned in their apps for authorization purposes.\nSo this method might not work.\nYou'd need to find a way to extract the client certificate and use it to get the traffic data.</p>\n</div>",
            "votes": "1",
            "user": "Ben",
            "time": "Jan 26, 2022 at 16:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If it's a drone, it's probably MAVLink. Check that first. <a href=\"https://mavlink.io/en/guide/serialization.html\" rel=\"nofollow noreferrer\">https://mavlink.io/en/guide/serialization.html</a></p>\n</div>",
            "votes": "0",
            "user": "pythonpython",
            "time": "Apr 25, 2021 at 3:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}