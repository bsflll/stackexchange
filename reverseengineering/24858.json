{
    "title": "Touch screen driver module - Determine comunication protocol",
    "link": "https://reverseengineering.stackexchange.com/questions/24858/touch-screen-driver-module-determine-comunication-protocol",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have taken apart an old non-functional Lenovo IdeaCentre (B320) computer.</p>\n<p>I would like to get the glass touch panel to 'work' (I would consider anything from simply being able to sniff the x,y coordinates to be 'working').</p>\n<p>There is a single cable coming from the glass, this cable plugs into a module. The module has only one other connection. This connection has four wires and is connected to the motherboard of the computer. The black and red wires are ground and 5V respectively, this I confirmed by powering on the computer and measuring. The remaining two wires are a mystery, they are (for what it's worth) brown and orange.</p>\n<p>Following the traces on the module, I can see they are connected to an STM32F102C6 (LQFP48). The two wires are connected to pin 32 (brown) and 33 (orange). I downloaded the datasheet for the MCU, from this I can see pin 32, 33 corresponds to PA11 and PA12 respectively.</p>\n<p>PA11 has the alternate function 'USART1_CTS/USB_DM'</p>\n<p>PA12 has the alternate function 'USART1_RTS/USB_DP'</p>\n<p>I did some googling and it seems that CTS and RTS are only used for data flow control, considering there are no other data wires I assumed the USB protocol is the most likely (even though the wire colors are not conventional to USB). I wired up a USB cable and plugged it into my computer and nothing happened (absolutely nothing).</p>\n<p>I'm stuck for ideas now. Could it be performing some kind of communication over the USART pin functions or possibly even some kind of bit-banged protocol over the GPIO's? Perhaps the module is dead and that's why the USB isn't detected by the computer.</p>\n<p>What further steps could I take to reverse engineer this module?</p>\n<p><a href=\"https://i.sstatic.net/eE7wA.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Top side of the module, cable from glass pannel detatched\" src=\"https://i.sstatic.net/eE7wA.jpg\"/></a></p>\n<p><a href=\"https://i.sstatic.net/8bwjs.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Under side of the module, STM MCU visible\" src=\"https://i.sstatic.net/8bwjs.jpg\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "296",
    "tags": [
        "protocol",
        "usb"
    ],
    "user": "Justin Wylie",
    "time": "Apr 28, 2020 at 19:09",
    "comments": [
        {
            "user": "Rok Tavƒçar",
            "text": "<span class=\"comment-copy\">USB protocol would be overkill for touch screen (TS). I have some demo version of MCU with TS and it use I2C protocol to communicate with TS driver. You can easily check if your driver also use I2C if both mistery lines have pull-up to 5V or 3.3V. Or even better if you have I2C interface you can scan for possible address.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The manufacturer's <a href=\"https://www.elotouch.com/touchscreen-components.html\" rel=\"nofollow noreferrer\">website</a> suggests that at least their recent touch screen controllers are either serial and/or USB.</p>\n<p>The controller picture has the laptop model name (B320) on it which suggests it's a custom version produced by Elo for Lenovo.</p>\n<p>Looking at the driver files for hardware devices can be one way of understanding how they work. The Windows XP drivers can be found <a href=\"https://support.lenovo.com/gb/en/downloads/ds018695-elo-touch-panel-driver-for-microsoft-windows-xp-ideacentre-b320\" rel=\"nofollow noreferrer\">here</a> on Lenovo's website.</p>\n<p>This download actually contains both USB and Serial drivers, but these are not Lenovo specific. Instead it looks like the file <code>EloOptions.ini</code> is used to specify exactly which driver to install.  This file is clearly customized for Lenovo and confirms that it's the USB driver that is needed.</p>\n<pre><code>[Setup Options]\n; For Lenovo, set all but USB to 0\nAutoDetect = 0\nAllowInstallApr = 0\nAllowInstallSerial = 0\nAllowInstallUsb = 1\nCalibrateAfterInstall = 0\nBaseMode = 0\n</code></pre>\n<p>The <code>EloMTUsb.inf</code> file also suggests that it's installed as a USB HID class device.  If so, there's a good chance that you won't have to do too much reverse engineering as it should follow the relevant USB HID standards.</p>\n<p>The <code>Readme.doc</code> file list various controller part numbers which might also be helpful.</p>\n</div>",
            "votes": "0",
            "user": "Ian Cook",
            "time": "Jan 30, 2021 at 17:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd say that it is more likely to be a faulty USB connection than real use of CTS/RTS.</p>\n<p>If you have a signal analyzer (like Saleae Logic) and can record a signal from the USB_DM or USB_DP, you will be able to easily tell if this is USB, if there is some signal at all.</p>\n</div>",
            "votes": "0",
            "user": "Yotamz",
            "time": "Apr 29, 2020 at 12:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}