{
    "title": "Best way to protect source code of .exe program running on Python?",
    "link": "https://reverseengineering.stackexchange.com/questions/22648/best-way-to-protect-source-code-of-exe-program-running-on-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am developing proprietary software that would be distributed in a form of .exe file. In order to use it, users will have to authenticate with their whitelist credentials (username + password).</p>\n<p>The issue I have encountered is that in the industry I am selling on, there are a lot of \"hackers\" who will try to decompile your executable file, get the source code and distribute it for free to other people.</p>\n<p>To combat these reverse-engineering attempts, I have tried to both obfuscate my code and use various compilers, but so far to no success.</p>\n<p><strong>What I have tried:</strong></p>\n<ul>\n<li>Use <code>py2exe</code> compiler: \"hackers\" managed to decompile executable in an hour.</li>\n<li>Use <code>pyinstaller</code> compiler: same as with <code>py2exe</code>.</li>\n<li>Use <code>pyminifier</code> to obfuscate the code: \"hackers\" managed to deobfuscate the code.</li>\n<li>Use <code>Oxyry Python Obfuscator</code>: same as with <code>pyminifier</code>.</li>\n</ul>\n<p>Those who managed to decompile and deobfuscate my program explained that the open-source nature of those 4 tools means that their algorithms are well-known and there are solutions out there made to reverse-engineer programs that use these open-source compilers and obfuscators.</p>\n<p><strong>What I didn't try yet:</strong></p>\n<ul>\n<li>Using <code>Pyarmor</code> to obfuscate my code. I've heard it is good, but it costs 50$, so I want to be sure that it is the best obfuscation tool out there before purchasing the license.</li>\n<li>Using <code>Cython</code> library to create a C-wrapper for my program, making it compiled in C instead of Python. Since C binaries are much harder to read, it will make the program significantly harder to decompile. However, I have never programmed in C, and I want to know if there are better ways to compile my source Python code, without the need to learn C.</li>\n<li>Using <code>VMProtect</code>, <code>Enigma Protector</code> or <code>Themida/Code Virtualizer</code>. Each tool costs over 150$, so before purchasing them, I want to know if that would be the best way to solve my problem.</li>\n</ul>\n<p><strong>What I am not going to try:</strong></p>\n<ul>\n<li>Completely rewrite my whole program in a language other than Python. I am not strong in other languages, plus the program itself consists of over 5,000 lines of code, so I can't just completely rewrite it for the sole purpose of making it harder to decompile.</li>\n<li>Making program open-source: This is a for-profit software, so I am not going to release the proprietary code, thank you for understanding.</li>\n<li>Making the program a web-app: Since my program directly interacts with files on the user's PC, I can't make it web-based, it has to be on the user's PC.</li>\n</ul>\n<p>Please also consider that if \"hacker\" will be able to disable the whitelist system without even accessing the source code, he will be able to distribute it to other users with no limitation. Therefore, I am looking for a way that will not only make it extremely hard to decompile the program, but also make it almost impossible to meddle with bytecode/binaries and turn off certain parts of the program's code.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "12k",
    "tags": [
        "decompilation",
        "c",
        "python",
        "obfuscation",
        "executable"
    ],
    "user": "TimesAndPlaces",
    "time": "Nov 30, 2019 at 22:46",
    "comments": [
        {
            "user": "Akram Mo",
            "text": "<span class=\"comment-copy\">I would like to know what was the decision you took about protecting your python application. Did you manage to do it? Did you use Cython or any VM protected software ?</span>",
            "time": null
        },
        {
            "user": "TimesAndPlaces",
            "text": "<span class=\"comment-copy\">@AkramMo Yes, it was a combination of 2. At first transfer .py into cython executable, and then pass it through VM obfuscator.  Not sure if it is uncrackable, but more than enough to keep amateurs away.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are ways to make a Python program hard to reverse engineer. Its' possible but you need to fiddle with the <a href=\"https://github.com/python/cpython\" rel=\"noreferrer\">Python source code</a> (which is written in C) and compile a special build for your purpose.</p>\n<p>The way Python works is fully documented and open-source. For instance, consider the pyc file format. Much of the code which deals with reading/writing pyc's can be found in <a href=\"https://github.com/python/cpython/blob/master/Python/marshal.c\" rel=\"noreferrer\">marshal.c</a> If you modify the code and reorder the sequence in which the objects are read/written you can easily throw off decompilers. To further strengthen the protection, you can encrypt the bytecode which will be decrypted only at run-time.</p>\n<p>Another technique commonly used is opcode remapping. The set of bytecode instructions in Python can be found in <a href=\"https://github.com/python/cpython/blob/master/Include/opcode.h\" rel=\"noreferrer\">opcode.h</a>. </p>\n<p>Consider these two instructions</p>\n<pre><code>#define DUP_TOP_TWO               5\n\n#define BINARY_TRUE_DIVIDE       27\n</code></pre>\n<p>You can interchange the opcodes for these instructions. As a result the bytecode will only be understood by your custom Python build. </p>\n<p>The earlier versions of Dropbox were developed in Python and they used some of the above techniques to harden their code but as is the case with any DRM system, it was eventually reverse engineered and analyzed. There's a <a href=\"https://github.com/kholia/dedrop/blob/master/paper/resources/Reversing%20obfuscated%20python%20applications%20-%20Breaking%20the%20Dropbox%20client%20on%20Windows.pdf\" rel=\"noreferrer\">write-up of this process</a> which you can study for further reference. (Disclaimer: I'm the author of the write-up but not the owner of the GitHub repo).</p>\n</div>",
            "votes": "8",
            "user": "0xec",
            "time": "Dec 1, 2019 at 22:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}