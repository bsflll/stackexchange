{
    "title": "Modified Java byte-code, no difference runtime",
    "link": "https://reverseengineering.stackexchange.com/questions/4783/modified-java-byte-code-no-difference-runtime",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I modified the byte-code of a third party Java desktop application's <code>.class</code> file (and repacked the <code>.jar</code>), only to see that during runtime, my change made no difference, unless my change caused a crash somehow. The most simple experiment I did was to use a hex editor and simply replace a letter in a text string in the <code>.class</code> file. Runtime (of course, after restarting the Java application), the text was still the original text.</p>\n<p>Here's an example of the original byte-code:</p>\n<pre><code>ldc \"Some text.\"\n</code></pre>\n<p>Using a hex editor, I changed the string, and looked again in the byte-code editor:</p>\n<pre><code>ldc \"Xome text.\"\n</code></pre>\n<p>The decompiled code also shows the modified string. There are no more references to the original string in the <code>.class</code> file. Despite this change, the displayed text at runtime is \"<em>Some text.</em>\" rather than \"<em>Xome text.</em>\".</p>\n<p>Is there anything I need to take into consideration, e.g. some sort of cache (outside the scope of the application) that must be cleared? I tried to delete the \"<em>Temporary Internet Files</em>\" in the Java console, to no avail.</p>\n<p>Thank you for any assistance you can provide! :)</p>\n<p><strong>Removed:</strong> The decompiled code and modified files for the real-world application I was experimenting on, due to their questionable nature (didn't really help anyone anyway).</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "java",
        "byte-code"
    ],
    "user": "Dimm",
    "time": "Jul 4, 2014 at 20:05",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I didn't get the idea of your question ?!? Could you be a bit more explicit ?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Are you sure you changed all instances of that static string? And are you sure the string you're seeing at runtime isn't dynamically generated? (Best to decompile the class and find out.)</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">The text may have been created by some other <code>.class</code> file. Check how many <code>.class</code> files are within the jar.</span>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">Can you post the jar before and after modification?</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">If it's a real world application there must be some protection, some sort of obfuscation, encryption etc. So my guess is that string is encrypted and only decrypted on running. So you may never see the string in a static <code>.class</code> file. What you are editing is probably something else.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Firstly, I would mention that instead of using a general purpose hex editor, a dedicated <code>class</code> editor would be much better. There are plenty of them. </p>\n<p>You tried editing the <code>class</code> file and to your surprise the changes you made were not reflected. At that point you should be pretty much sure that there <em>must</em> be some other tricks such as generating the strings dynamically, encryption, obfuscation etc.The <code>class</code> files could also be loaded from some other locations such as a <code>cache</code> which you do not expect.</p>\n<p>One way to get information about which classes are loaded is to use the following command line switch while starting java.</p>\n<pre><code>java -verbose:class -jar &lt;Your jar file&gt;\n</code></pre>\n<p>This way the <code>jvm</code> will notify you when classes are loaded and from which locations. Using this you can know if there is some sort of <em>hidden</em> <code>cache</code> from which it loads <code>class</code> files.</p>\n<p>After this option fails, i.e. when you are sure that there is no such hidden <code>cache</code>, you can almost be sure that there is <code>encryption</code> involved or the strings are generated \ndynamically. <code>Decompiling</code> would help, but of course if there is no obfuscation to hinder decompiling. If everything else fails, you may try inspecting the <code>bytecode</code> of the <code>class</code>files as a last resort.</p>\n</div>",
            "votes": "3",
            "user": "0xec",
            "time": "Jul 5, 2014 at 2:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dimm",
                    "text": "<span class=\"comment-copy\">Thank you very much for this answer, and for providing even more information! :)</span>",
                    "time": null
                }
            ]
        }
    ]
}