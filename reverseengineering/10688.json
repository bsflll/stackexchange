{
    "title": "How to make a valid patch to bypass self checking security measure?",
    "link": "https://reverseengineering.stackexchange.com/questions/10688/how-to-make-a-valid-patch-to-bypass-self-checking-security-measure",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have got a DLL file that I want to modify. Each time the executable file which imports the DLL is executed it performs a self checking process to find out whether the file is valid or not. How can I bypass such security measure? I want to be able to make the patch as same as the valid file by all means except the code itself. In addition, I don't exactly know how the security measure finds out whether the file is valid or not. So consider the security measure a black box in which we are going to implement a pentest on.</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "dll",
        "patching"
    ],
    "user": "FreeMind",
    "time": "Aug 22, 2015 at 15:15",
    "comments": [
        {
            "user": "Denis Laskov",
            "text": "<span class=\"comment-copy\">I think, the best way is to understand the \"security measure\" that Your DLL use to ensure it integrity.</span>",
            "time": null
        },
        {
            "user": "FreeMind",
            "text": "<span class=\"comment-copy\">But how? probably your answer is to reverse engineer the target file. However, I am looking for some general self check methods used by most programs</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">@FreeMind The \"general self check\" method is usually comparing the hash of some or all bytes of the file to a target value. If the file is digitally signed, your modification will tamper the sign, which can be programmatically detected using <a href=\"https://msdn.microsoft.com/en-us/library/aa382384(VS.85).aspx\" rel=\"nofollow noreferrer\"><code>WinVerifyTrust</code></a> Since you say that the check is performed on dll loading, you need to analyze <code>DllMain</code></span>",
            "time": null
        },
        {
            "user": "FreeMind",
            "text": "<span class=\"comment-copy\">@ExtremeCoders How can I find the DllMain? For instance I want to analyze the <code>Enigma.dll</code> - what do you mean by <code>DllMain</code>?</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">@FreeMind You need to analyze from the entrypoint of the Dll. This value is stored in the PE headers. See the <code>AddressOfEntryPoint</code> member in <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>IMAGE_OPTIONAL_HEADER</code></a> struct.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not possible to blindly bypass integrity self-checking in a generic \"black-box\" way. You need to find out what exactly is performed as a check, and then use the according way to bypass it (if existing).</p>\n<p>Since you state it's a self-check, you have to reverse the DLL and find out how the check is performed. The good news is that a self-check should always be removable.</p>\n</div>",
            "votes": "2",
            "user": "user2823000",
            "time": "Aug 24, 2015 at 14:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depending on when exactly the validation check is made, you might be able to simply rename the DLL and replace the original with your own.  In that case, your DLL must load the original DLL, in order to place it in memory.  Your DLL must also export the same functions that the original one does, but forward each of them to the original DLL.  This is not a trivial undertaking, but it might serve you better than to try to find and disble the check itself.</p>\n</div>",
            "votes": "0",
            "user": "peter ferrie",
            "time": "Aug 31, 2015 at 22:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Or maybe you can make a loader instead of \"physical\" patch. Since your question is quite generic this is a quite generic solution patching bytes in memory is sometimes very useful to bypass integrity checks.</p>\n</div>",
            "votes": "0",
            "user": "Soufiane Tahiri",
            "time": "Nov 1, 2015 at 9:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}