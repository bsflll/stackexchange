{
    "title": "How to prevent dynamic loader from modifying binary in memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/30922/how-to-prevent-dynamic-loader-from-modifying-binary-in-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have patched a loadable object (an .so file) from this:</p>\n<pre><code>xor eax,0x304b7c0\n</code></pre>\n<p>to this:</p>\n<pre><code>mov eax,0x0\n</code></pre>\n<p>When I try to run my binary with these modifications, the application loads the .so file and then it adds the base address of the .so file to every memory address in the binary so that instruction ends up looking like this in my gdb debugger (intel flavor):</p>\n<pre><code>0xf463cd95: mov    eax,0xf44ae000\n</code></pre>\n<p>How do I make it not do that? Thanks in advance for the help!</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "39",
    "tags": [
        "memory",
        "patching",
        "shared-object",
        "relocations"
    ],
    "user": "user34087",
    "time": "Sep 25, 2022 at 16:21",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">You can try to disable ASLR on the main executable then your patched so file should always be loaded to the same address.</span>",
            "time": null
        },
        {
            "user": "Mega Tonnage",
            "text": "<span class=\"comment-copy\">I think you may have not replaced the correct number of bytes in the instruction - maybe try <code>mov eax,0x00000000</code> ?</span>",
            "time": null
        }
    ],
    "answers_data": []
}