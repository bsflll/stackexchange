{
    "title": "I need quick correction on this x86 opcode conundrum",
    "link": "https://reverseengineering.stackexchange.com/questions/3671/i-need-quick-correction-on-this-x86-opcode-conundrum",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out how to encode the instruction <code>MOV DS, AX</code>, but I am confused from the opcode table as follows:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1IcN2.png\"/></p>\n<ol>\n<li><p>Is MOV DS all one byte, or is MOV one byte, DS the second, and the AX the third?</p></li>\n<li><p>Is the table implying that the binary value of the source register prefix DS is 011? If so, how would I encode it as part of the whole instruction?</p></li>\n</ol>\n<p>I can not understand how the tables make sense by the way they're listed; they should be more specific! Can anyone straighten this out?</p>\n<p>I just want to move the value from the AX register to the data segment, DS. No sites perfectly explains how encoding of registers within opcodes work exactly, or relocation.</p>\n<p>All the tables come from <a href=\"http://ref.x86asm.net\" rel=\"nofollow noreferrer\">http://ref.x86asm.net</a>, and it's very vague, unclear, unspecific, and undetailed.</p>\n<p>I would like to know if there's any 100% detailed, perfectly explained tutorials on how encoding of each byte, values for each register, address truncation, offset, etc. works in binary, and how to encode it all the correct way.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "binary-analysis",
        "x86",
        "machine-code"
    ],
    "user": "Jonas' River",
    "time": "Feb 14, 2014 at 1:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That site is good if you're familiar with how the encoding works but if you're just starting I'd skip it for now.</p>\n<p>The best starting point is probably the Intel's <a href=\"http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\">Architectures Software Developer Manuals</a>. Have a look at CHAPTER 2 INSTRUCTION FORMAT in the Volume 2, and also the appendices, particularly APPENDIX B INSTRUCTION FORMATS AND ENCODINGS and APPENDIX A OPCODE MAP. They describe how to decode instructions in great detail. </p>\n<p>Once you're a little familiar with parts of the instruction encodings, the notations in the instruction listing pages will start to make sense. For example, let's check the one you need.</p>\n<p>On the page for <code>MOV</code>, find the variant you need. This one looks like it:</p>\n<pre><code>Hex     Mnemonic          Encoding   Description\n8E /r   MOV Sreg,r/m16**  RM         Move r/m16 to segment register.\n</code></pre>\n<p>Looking up 'RM' in the following table, we get:</p>\n<pre><code>Op/En Operand 1     Operand 2     Operand 3 Operand 4\nRM    ModRM:reg (w) ModRM:r/m (r) NA        NA\n</code></pre>\n<p>And so we can start assembling the opcode.</p>\n<p>The first byte is fixed to be <code>8E</code>.</p>\n<p>The second byte is the ModRM byte. It consists of three fields: <code>mod</code>, <code>reg</code> and <code>r/m</code>. Let's assemble it with the help of this <a href=\"http://sandpile.org/x86/opc_rm.htm\">nice table</a> from Sandpile.</p>\n<p>First up is the <code>mod</code> field. Since our second operand is a register and not a memory reference, this corresponds to <code>mod=11</code>.</p>\n<p>From the <code>RM</code> encoding line we see that <code>reg</code> encodes the first operand, in our case <code>DS</code>. Looking it up in the table, we can see that <code>DS</code> is encoded as <code>011</code>.</p>\n<p>And finally is the <code>r/m</code> field encoding operand 2, i.e. <code>AX</code>. It is encoded as <code>000</code>.</p>\n<p>So our ModRM byte is <code>11:011:000</code>, or <code>D8</code>. This makes the full opcode to be <code>8E D8</code>. You can check it with your favorite disassembler, e.g. XED:</p>\n<pre><code>&gt;xed.exe -d 8E D8\n8ED8\nICLASS: MOV   CATEGORY: DATAXFER   EXTENSION: BASE  IFORM: MOV_SEG_GPR16   ISA_SET: I86\nSHORT: mov ds, ax\n</code></pre>\n<p>(BTW, the <code>/r</code> notation in the encoding line tells us that the <code>reg</code> field of the ModRM byte encodes a register and is not an opcode extension. In the latter case the notation would have a <code>/&lt;digit&gt;</code> notation where  is the value of the <code>reg</code> field).</p>\n</div>",
            "votes": "15",
            "user": "Igor Skochinsky",
            "time": "Feb 12, 2014 at 22:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jonas' River",
                    "text": "<span class=\"comment-copy\">I want to learn encoding ,not decoding! Could you be a little more specific? I'm sorry, but I only learn with great details well explained!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Encoding and decoding are very closely connected. You won't figure out how to encode instructions if you don't know how the processor decodes them.</span>",
                    "time": null
                },
                {
                    "user": "Codebling",
                    "text": "<span class=\"comment-copy\">@Jonas'River the decoding was presented as proof of correctness. Igor, great explanation! It might be easier to explain that we look up the byte value in the lower section of the table with the row corresponding to AX under \"effective address\" and the column under DS in the upper half of the table. Or did I read it wrong?</span>",
                    "time": null
                }
            ]
        }
    ]
}