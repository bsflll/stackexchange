{
    "title": "The buffer is too short to insert addresses when exploiting buffer overflow",
    "link": "https://reverseengineering.stackexchange.com/questions/22998/the-buffer-is-too-short-to-insert-addresses-when-exploiting-buffer-overflow",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Newbie here. Sorry for what you about to read .</p>\n<p>I'm currently working on exploiting a binary on Ubuntu 18.04. Here is some information about the binary:</p>\n<p>Its checksec information using pwntools:</p>\n<pre><code>Arch:     i386-32-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre>\n<p>Its disassembled code:</p>\n<pre><code>./vulnprog:     file format elf32-i386\n\n\nDisassembly of section .init:\n\n0804834c &lt;_init&gt;:\n 804834c:   53                      push   ebx\n 804834d:   83 ec 08                sub    esp,0x8\n 8048350:   e8 8b 00 00 00          call   80483e0 &lt;__x86.get_pc_thunk.bx&gt;\n 8048355:   81 c3 87 1c 00 00       add    ebx,0x1c87\n 804835b:   8b 83 18 00 00 00       mov    eax,DWORD PTR [ebx+0x18]\n 8048361:   85 c0                   test   eax,eax\n 8048363:   74 05                   je     804836a &lt;_init+0x1e&gt;\n 8048365:   e8 2e 00 00 00          call   8048398 &lt;__gmon_start__@plt&gt;\n 804836a:   83 c4 08                add    esp,0x8\n 804836d:   5b                      pop    ebx\n 804836e:   c3                      ret    \n\nDisassembly of section .plt:\n\n08048370 &lt;.plt&gt;:\n 8048370:   ff 35 e0 9f 04 08       push   DWORD PTR ds:0x8049fe0\n 8048376:   ff 25 e4 9f 04 08       jmp    DWORD PTR ds:0x8049fe4\n 804837c:   00 00                   add    BYTE PTR [eax],al\n    ...\n\nDisassembly of section .plt.got:\n\n08048380 &lt;read@plt&gt;:\n 8048380:   ff 25 e8 9f 04 08       jmp    DWORD PTR ds:0x8049fe8\n 8048386:   66 90                   xchg   ax,ax\n\n08048388 &lt;_exit@plt&gt;:\n 8048388:   ff 25 ec 9f 04 08       jmp    DWORD PTR ds:0x8049fec\n 804838e:   66 90                   xchg   ax,ax\n\n08048390 &lt;puts@plt&gt;:\n 8048390:   ff 25 f0 9f 04 08       jmp    DWORD PTR ds:0x8049ff0\n 8048396:   66 90                   xchg   ax,ax\n\n08048398 &lt;__gmon_start__@plt&gt;:\n 8048398:   ff 25 f4 9f 04 08       jmp    DWORD PTR ds:0x8049ff4\n 804839e:   66 90                   xchg   ax,ax\n\n080483a0 &lt;__libc_start_main@plt&gt;:\n 80483a0:   ff 25 f8 9f 04 08       jmp    DWORD PTR ds:0x8049ff8\n 80483a6:   66 90                   xchg   ax,ax\n\n080483a8 &lt;setvbuf@plt&gt;:\n 80483a8:   ff 25 fc 9f 04 08       jmp    DWORD PTR ds:0x8049ffc\n 80483ae:   66 90                   xchg   ax,ax\n\nDisassembly of section .text:\n\n080483b0 &lt;_start&gt;:\n 80483b0:   31 ed                   xor    ebp,ebp\n 80483b2:   5e                      pop    esi\n 80483b3:   89 e1                   mov    ecx,esp\n 80483b5:   83 e4 f0                and    esp,0xfffffff0\n 80483b8:   50                      push   eax\n 80483b9:   54                      push   esp\n 80483ba:   52                      push   edx\n 80483bb:   68 70 85 04 08          push   0x8048570\n 80483c0:   68 10 85 04 08          push   0x8048510\n 80483c5:   51                      push   ecx\n 80483c6:   56                      push   esi\n 80483c7:   68 ab 84 04 08          push   0x80484ab\n 80483cc:   e8 cf ff ff ff          call   80483a0 &lt;__libc_start_main@plt&gt;\n 80483d1:   f4                      hlt    \n 80483d2:   66 90                   xchg   ax,ax\n 80483d4:   66 90                   xchg   ax,ax\n 80483d6:   66 90                   xchg   ax,ax\n 80483d8:   66 90                   xchg   ax,ax\n 80483da:   66 90                   xchg   ax,ax\n 80483dc:   66 90                   xchg   ax,ax\n 80483de:   66 90                   xchg   ax,ax\n\n080483e0 &lt;__x86.get_pc_thunk.bx&gt;:\n 80483e0:   8b 1c 24                mov    ebx,DWORD PTR [esp]\n 80483e3:   c3                      ret    \n 80483e4:   66 90                   xchg   ax,ax\n 80483e6:   66 90                   xchg   ax,ax\n 80483e8:   66 90                   xchg   ax,ax\n 80483ea:   66 90                   xchg   ax,ax\n 80483ec:   66 90                   xchg   ax,ax\n 80483ee:   66 90                   xchg   ax,ax\n\n080483f0 &lt;deregister_tm_clones&gt;:\n 80483f0:   b8 0f a0 04 08          mov    eax,0x804a00f\n 80483f5:   2d 0c a0 04 08          sub    eax,0x804a00c\n 80483fa:   83 f8 06                cmp    eax,0x6\n 80483fd:   76 1a                   jbe    8048419 &lt;deregister_tm_clones+0x29&gt;\n 80483ff:   b8 00 00 00 00          mov    eax,0x0\n 8048404:   85 c0                   test   eax,eax\n 8048406:   74 11                   je     8048419 &lt;deregister_tm_clones+0x29&gt;\n 8048408:   55                      push   ebp\n 8048409:   89 e5                   mov    ebp,esp\n 804840b:   83 ec 14                sub    esp,0x14\n 804840e:   68 0c a0 04 08          push   0x804a00c\n 8048413:   ff d0                   call   eax\n 8048415:   83 c4 10                add    esp,0x10\n 8048418:   c9                      leave  \n 8048419:   f3 c3                   repz ret \n 804841b:   90                      nop\n 804841c:   8d 74 26 00             lea    esi,[esi+eiz*1+0x0]\n\n08048420 &lt;register_tm_clones&gt;:\n 8048420:   b8 0c a0 04 08          mov    eax,0x804a00c\n 8048425:   2d 0c a0 04 08          sub    eax,0x804a00c\n 804842a:   c1 f8 02                sar    eax,0x2\n 804842d:   89 c2                   mov    edx,eax\n 804842f:   c1 ea 1f                shr    edx,0x1f\n 8048432:   01 d0                   add    eax,edx\n 8048434:   d1 f8                   sar    eax,1\n 8048436:   74 1b                   je     8048453 &lt;register_tm_clones+0x33&gt;\n 8048438:   ba 00 00 00 00          mov    edx,0x0\n 804843d:   85 d2                   test   edx,edx\n 804843f:   74 12                   je     8048453 &lt;register_tm_clones+0x33&gt;\n 8048441:   55                      push   ebp\n 8048442:   89 e5                   mov    ebp,esp\n 8048444:   83 ec 10                sub    esp,0x10\n 8048447:   50                      push   eax\n 8048448:   68 0c a0 04 08          push   0x804a00c\n 804844d:   ff d2                   call   edx\n 804844f:   83 c4 10                add    esp,0x10\n 8048452:   c9                      leave  \n 8048453:   f3 c3                   repz ret \n 8048455:   8d 74 26 00             lea    esi,[esi+eiz*1+0x0]\n 8048459:   8d bc 27 00 00 00 00    lea    edi,[edi+eiz*1+0x0]\n\n08048460 &lt;__do_global_dtors_aux&gt;:\n 8048460:   80 3d 10 a0 04 08 00    cmp    BYTE PTR ds:0x804a010,0x0\n 8048467:   75 13                   jne    804847c &lt;__do_global_dtors_aux+0x1c&gt;\n 8048469:   55                      push   ebp\n 804846a:   89 e5                   mov    ebp,esp\n 804846c:   83 ec 08                sub    esp,0x8\n 804846f:   e8 7c ff ff ff          call   80483f0 &lt;deregister_tm_clones&gt;\n 8048474:   c6 05 10 a0 04 08 01    mov    BYTE PTR ds:0x804a010,0x1\n 804847b:   c9                      leave  \n 804847c:   f3 c3                   repz ret \n 804847e:   66 90                   xchg   ax,ax\n\n08048480 &lt;frame_dummy&gt;:\n 8048480:   b8 f8 9e 04 08          mov    eax,0x8049ef8\n 8048485:   8b 10                   mov    edx,DWORD PTR [eax]\n 8048487:   85 d2                   test   edx,edx\n 8048489:   75 05                   jne    8048490 &lt;frame_dummy+0x10&gt;\n 804848b:   eb 93                   jmp    8048420 &lt;register_tm_clones&gt;\n 804848d:   8d 76 00                lea    esi,[esi+0x0]\n 8048490:   ba 00 00 00 00          mov    edx,0x0\n 8048495:   85 d2                   test   edx,edx\n 8048497:   74 f2                   je     804848b &lt;frame_dummy+0xb&gt;\n 8048499:   55                      push   ebp\n 804849a:   89 e5                   mov    ebp,esp\n 804849c:   83 ec 14                sub    esp,0x14\n 804849f:   50                      push   eax\n 80484a0:   ff d2                   call   edx\n 80484a2:   83 c4 10                add    esp,0x10\n 80484a5:   c9                      leave  \n 80484a6:   e9 75 ff ff ff          jmp    8048420 &lt;register_tm_clones&gt;\n\n080484ab &lt;main&gt;:\n 80484ab:   55                      push   ebp\n 80484ac:   89 e5                   mov    ebp,esp\n 80484ae:   83 ec 28                sub    esp,0x28\n 80484b1:   a1 08 a0 04 08          mov    eax,ds:0x804a008\n 80484b6:   3d 39 05 00 00          cmp    eax,0x539\n 80484bb:   74 07                   je     80484c4 &lt;main+0x19&gt;\n 80484bd:   6a 01                   push   0x1\n 80484bf:   e8 c4 fe ff ff          call   8048388 &lt;_exit@plt&gt;\n 80484c4:   a1 08 a0 04 08          mov    eax,ds:0x804a008\n 80484c9:   83 c0 01                add    eax,0x1\n 80484cc:   a3 08 a0 04 08          mov    ds:0x804a008,eax\n 80484d1:   a1 0c a0 04 08          mov    eax,ds:0x804a00c\n 80484d6:   6a 00                   push   0x0\n 80484d8:   6a 02                   push   0x2\n 80484da:   6a 00                   push   0x0\n 80484dc:   50                      push   eax\n 80484dd:   e8 c6 fe ff ff          call   80483a8 &lt;setvbuf@plt&gt;\n 80484e2:   83 c4 10                add    esp,0x10\n 80484e5:   68 90 85 04 08          push   0x8048590\n 80484ea:   e8 a1 fe ff ff          call   8048390 &lt;puts@plt&gt;\n 80484ef:   83 c4 04                add    esp,0x4\n 80484f2:   6a 40                   push   0x40\n 80484f4:   8d 45 d8                lea    eax,[ebp-0x28]\n 80484f7:   50                      push   eax\n 80484f8:   6a 00                   push   0x0\n 80484fa:   e8 81 fe ff ff          call   8048380 &lt;read@plt&gt;\n 80484ff:   83 c4 0c                add    esp,0xc\n 8048502:   90                      nop\n 8048503:   90                      nop\n 8048504:   c9                      leave  \n 8048505:   c3                      ret    \n 8048506:   66 90                   xchg   ax,ax\n 8048508:   66 90                   xchg   ax,ax\n 804850a:   66 90                   xchg   ax,ax\n 804850c:   66 90                   xchg   ax,ax\n 804850e:   66 90                   xchg   ax,ax\n\n08048510 &lt;__libc_csu_init&gt;:\n 8048510:   55                      push   ebp\n 8048511:   57                      push   edi\n 8048512:   56                      push   esi\n 8048513:   53                      push   ebx\n 8048514:   e8 c7 fe ff ff          call   80483e0 &lt;__x86.get_pc_thunk.bx&gt;\n 8048519:   81 c3 c3 1a 00 00       add    ebx,0x1ac3\n 804851f:   83 ec 0c                sub    esp,0xc\n 8048522:   8b 6c 24 20             mov    ebp,DWORD PTR [esp+0x20]\n 8048526:   8d b3 18 ff ff ff       lea    esi,[ebx-0xe8]\n 804852c:   e8 1b fe ff ff          call   804834c &lt;_init&gt;\n 8048531:   8d 83 14 ff ff ff       lea    eax,[ebx-0xec]\n 8048537:   29 c6                   sub    esi,eax\n 8048539:   c1 fe 02                sar    esi,0x2\n 804853c:   85 f6                   test   esi,esi\n 804853e:   74 25                   je     8048565 &lt;__libc_csu_init+0x55&gt;\n 8048540:   31 ff                   xor    edi,edi\n 8048542:   8d b6 00 00 00 00       lea    esi,[esi+0x0]\n 8048548:   83 ec 04                sub    esp,0x4\n 804854b:   ff 74 24 2c             push   DWORD PTR [esp+0x2c]\n 804854f:   ff 74 24 2c             push   DWORD PTR [esp+0x2c]\n 8048553:   55                      push   ebp\n 8048554:   ff 94 bb 14 ff ff ff    call   DWORD PTR [ebx+edi*4-0xec]\n 804855b:   83 c7 01                add    edi,0x1\n 804855e:   83 c4 10                add    esp,0x10\n 8048561:   39 f7                   cmp    edi,esi\n 8048563:   75 e3                   jne    8048548 &lt;__libc_csu_init+0x38&gt;\n 8048565:   83 c4 0c                add    esp,0xc\n 8048568:   5b                      pop    ebx\n 8048569:   5e                      pop    esi\n 804856a:   5f                      pop    edi\n 804856b:   5d                      pop    ebp\n 804856c:   c3                      ret    \n 804856d:   8d 76 00                lea    esi,[esi+0x0]\n\n08048570 &lt;__libc_csu_fini&gt;:\n 8048570:   f3 c3                   repz ret \n\nDisassembly of section .fini:\n\n08048574 &lt;_fini&gt;:\n 8048574:   53                      push   ebx\n 8048575:   83 ec 08                sub    esp,0x8\n 8048578:   e8 63 fe ff ff          call   80483e0 &lt;__x86.get_pc_thunk.bx&gt;\n 804857d:   81 c3 5f 1a 00 00       add    ebx,0x1a5f\n 8048583:   83 c4 08                add    esp,0x8\n 8048586:   5b                      pop    ebx\n 8048587:   c3                      ret    \n</code></pre>\n<p>I can see that there is a buffer overflow that could be exploited inside main() function and I tried to exploit it using some of the techniques I know: execute code on stack, ret2libc, ropgadget but none of them worked. As you can see the NX is enabled, the binary is dynamically linked so there are only 79 ROPgadgets, and because of ASLR being turned on I cannot use retlibc.</p>\n<p>I tried ret2libc by crafting the input string so that it jumped to puts() function to print out the puts() address inside the memory in order to calculate the base of libc, after that I had to return to &lt;_start&gt; to inject the exploit string, with the address of system() function and '/bin/sh' string in memory. </p>\n<p>It could have been a ideal plan but you can see that at address 0x080484b6 in main the program compares eax, which is loaded with the value in 0x0804a008, to 0x539 to decide to continue. When I came back from puts() function after printing out the address of puts(), that value in 0x0804a008 had been increased by one, no longer be 0x539 so the program exited. </p>\n<p>To fix that, I tried jumping to _read() function after returning from puts() to edit the value hold by 0x0804a008 but another problem arose: The read() function only read 64 bytes into the buffer so the length for me to inject addresses was only 20 bytes.</p>\n<p>I'm getting stucked. I've been searching for days but haven't found any case that being close to mine. Can you give me some advices on how should I get this done?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "412",
    "tags": [
        "linux",
        "exploit",
        "buffer-overflow"
    ],
    "user": "Thành Vũ",
    "time": "Jan 15, 2020 at 1:28",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">it this binary available somewhere to check locally?</span>",
            "time": null
        },
        {
            "user": "Thành Vũ",
            "text": "<span class=\"comment-copy\">I uploaded it to Google Drive. Here is the link: <a href=\"https://drive.google.com/open?id=1_Rjy8t0B05Yp6oFYJSdsrB6orAYh1hJZ\" rel=\"nofollow noreferrer\">drive.google.com/open?id=1_Rjy8t0B05Yp6oFYJSdsrB6orAYh1hJZ</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not sure how much of a spoiler you want, so I'll keep it fairly short for now.</p>\n<blockquote>\n<p>The buffer is too short</p>\n</blockquote>\n<p>Your main problem is somewhat a hint towards the solution. The logic is, if your buffer is too small, then make a new one that can fit your entire payload.</p>\n<p>By this, I mean you need to set up a stack pivot. A stack pivot allows you to move the stack frame somewhere else where there is more room, where you'll set up your full ROP chain(s). You can pivot to somewhere else on the stack, the heap, or even in the executable's read-write sections. A good choice for this is often the executable's <code>.data</code> or <code>.bss</code> segment, but find an offset within where nothing critical is overwritten.</p>\n<p>In many cases, this can be achieved using a gadget that manipulates the stack pointer (e.g. <code>pop esp</code>, <code>sub esp, 0x28</code>, <code>mov esp, edi</code> etc.). However, in this particular program, there's an instruction that is already used that can serve as a gadget for this.</p>\n<p>You'll also need to write to your new stack location. The program already has a function imported that you can use for this. Then, use the pieces you already figured out (libc leak, call <code>system</code>, etc.) can be put in place to complete the challenge.</p>\n</div>",
            "votes": "2",
            "user": "multithr3at3d",
            "time": "May 17, 2020 at 1:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}