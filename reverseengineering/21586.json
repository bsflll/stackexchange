{
    "title": "what's meaning address inside disassembler",
    "link": "https://reverseengineering.stackexchange.com/questions/21586/whats-meaning-address-inside-disassembler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm recently start in reverse engineering filed. While working with the disassembler I asked myself:what the \"address\" label meant. For example here we have hopper image:<a href=\"https://www.hopperapp.com/tutorial_files/overview@2x.jpg\" rel=\"nofollow noreferrer\">https://www.hopperapp.com/tutorial_files/<span class=\"__cf_email__\" data-cfemail=\"117e677463677874665123693f7b6176\">[email protected]</span></a></p>\n<p>As you can see atbbottom of hopper we have 0x100001dc0 and offset:0x1dc0, I know that offset is the way inside hex editor to jump directly in the function highlighted in blue by hopper,but don't know what's address.\nSomeone told me that \"address\" indicate the virtual address of instruction, but I know that virtual address is calculate/managed at runtime by the OS and this confuse me a bit. Someone can explain me what I did misunderstand? Thanks</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "474",
    "tags": [
        "disassemblers"
    ],
    "user": "user3782573",
    "time": "Jun 30, 2019 at 17:01",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">address is the address where the os will load the program in normal circumstances you sure can visualize  like for (i = address , i&lt; address+size ; i++) {printf  \"%x  %02x \", i , the_place_in_file_which_will_be_loaded_at_addr [i] }</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>0x1dc0</code> is an instruction offset in the file, while <code>0x100001dc0</code> is address in a program virtual memory when this particular instruction should reside. </p>\n<p>For more information, see <a href=\"https://stackoverflow.com/questions/53655287/what-is-the-image-base-in-windows-pe-files\">link</a>. In your case, base address for a file is <code>0x100000000</code>, so it means it should be loaded at this address and every instruction in it will have its address incremented accordingly.</p>\n</div>",
            "votes": "1",
            "user": "bart1e",
            "time": "Jun 30, 2019 at 17:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3782573",
                    "text": "<span class=\"comment-copy\">Ok thanks, now I understand that the imagebase is where the executable should be loaded. Where can I learn more (link ebook etc) about this topic in general?  Is it about compilers?  For example on osx I can't understand how it is calculated (VA) and also on Linux, so I would like to learn more.</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">You can read this: <a href=\"https://en.m.wikipedia.org/wiki/Loader_(computing)\" rel=\"nofollow noreferrer\">en.m.wikipedia.org/wiki/Loader_(computing)</a>. Basically, a virutal address is the address that an executable “sees” and uses, and is then translated to a physical one by OS. It is not about compilers, it’s about program loading.</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">In position independent code, a virtual address will be: imageBase + sectionOffset + offsetInSection, while position dependent code will have hardcoded addresses.</span>",
                    "time": null
                },
                {
                    "user": "user3782573",
                    "text": "<span class=\"comment-copy\">It may seem stupid, but something sends me off track, in windows there is imagebase which tells where the process should be loaded.  In the other os I don't understand how they do because imagebase is related to the PE header no to elf or other executables, if the loader does everything at runtime, the disassembler that simply shows the assembly code how does it show the virtual address?  sorry for the OT.  I've been looking for things like: mach-o imagebase but I can't find anything about it.</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">In ELF there are section offsets that tell you the addresses where they should be loaded. You can use readelf to get them.</span>",
                    "time": null
                }
            ]
        }
    ]
}