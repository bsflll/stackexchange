{
    "title": "How can I use ptr to ptr in idapython?",
    "link": "https://reverseengineering.stackexchange.com/questions/32824/how-can-i-use-ptr-to-ptr-in-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>in hey-rays api there's a method:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def find_def(self, *args) -&gt; \"minsn_t *\":\n    r\"\"\"\n    find_def(self, op, p_i1, i2, fdflags) -&gt; minsn_t\n    @param op: mop_t const &amp;\n    @param p_i1: minsn_t **\n    @param i2: minsn_t const *\n    @param fdflags: int\n    \"\"\"\n    return _ida_hexrays.mblock_t_find_def(self, *args)\n</code></pre>\n<p>which will need a ptr to ptr to a instruction.</p>\n<p>but I didn't find any method can create a minsn_t **. is there any way to do that?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "22",
    "tags": [
        "ida",
        "idapython",
        "hexrays"
    ],
    "user": "Ethan Xie",
    "time": "Mar 21, 2024 at 13:34",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">Not a real answer, but if you can usually pass null (<code>None</code>) to those. If you're trying to get the parent minstruction, though, because your result resides in an moperand, you might be able to combine <code>build_def_list</code> to get an <code>mlist_t</code>, and then <code>mblock_t.for_all_uses</code> if you only need it for a single mblock. In my (limited) experience, <code>mlist_t</code> and the <code>for_all_*</code> methods are more reliable for doing searches, especially because you're not limited to just an mblock.</span>",
            "time": null
        },
        {
            "user": "Ethan Xie",
            "text": "<span class=\"comment-copy\">Thanks, I ended up doing it myself too.</span>",
            "time": null
        }
    ],
    "answers_data": []
}