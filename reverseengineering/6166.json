{
    "title": "memset() in malware",
    "link": "https://reverseengineering.stackexchange.com/questions/6166/memset-in-malware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>By analyzing a piece of a trojan code, I have the <code>memset()</code>-function with the following parameters:</p>\n<pre><code>char *s;       //Ollydbg says that it shows to 0012F8A3\nint  c = 0;\nint n = 512;\n\nmemset(s, c, n);\n</code></pre>\n<p>So, I know what this function does and so on. So my question would be:\nIs there a way to find out which string is at place  <code>0012F8A3</code> using Olldbg ? \nBy right-clicking and Go to Expression -&gt;  <code>0012F8A3</code>, I came to a place with the following code lines:</p>\n<pre><code>  0012F8A3   0000   ADD BYTE PTR DS: [EAX], AL\n</code></pre>\n<p>This line occurs consecutively. And in the stack window of Ollydbg, there is no such a place labeled with <code>0012F8A3</code>.</p>\n<p>Can someone help ?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Sep 4, 2014 at 11:22",
    "comments": [
        {
            "user": "tuantm",
            "text": "<span class=\"comment-copy\">In Ollydbg You can use the CPU windows --&gt; point your pointer to the related instructions and then open the right mouse menu --&gt; Follow .. in Dump</span>",
            "time": null
        },
        {
            "user": "Fewmitz",
            "text": "<span class=\"comment-copy\">Use the dump window to watch the address before and after the memset call. If it's just malloc'd then this is just going to set it to 0 so there won't be anything there but if the malware is cleaning up a buffer then stop at the memset call and analyze the address there. The address won't be in the (default) stack window if you step over the call to memset either</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you want to look at data, you should use the Dump window at the bottom left of the screen. You can use the <kbd>Ctrl</kbd>+<kbd>G</kbd> shortcut to move the view to a specific address. </p>\n<p>Now, at that point in the code <code>memset()</code> is zeroing out the buffer. So, you probably won't have anything interesting but it will probably be filled later in the code. </p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Sep 4, 2014 at 11:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You told OllyDBG to jump to <code>0012F8A3</code>, which will cause Olly to show it in the disassembly listing. As you can see from the listing:</p>\n<pre><code>  0012F8A3   0000   ADD BYTE PTR DS: [EAX], AL\n</code></pre>\n<p>On the left is the address (<code>0012F8A3</code>), then the bytes at that address (<code>0000</code>), and the opcode they decode to (<code>ADD BYTE PTR DS: [EAX], AL</code>). Note that, indeed, in x86 assembly, two NUL bytes in a row decode to <code>ADD BYTE PTR DS: [EAX], AL</code>.</p>\n<p>Since you said that this line repeats over and over again, I infer that this means that the memory region of interest is just filled with zeros. You should skip forward until the region is filled in, then look at it again (preferably in a memory viewer, not the disassembly view) to see what is placed there.</p>\n</div>",
            "votes": "0",
            "user": "nneonneo",
            "time": "Sep 7, 2014 at 21:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}