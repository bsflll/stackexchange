{
    "title": "Approach for fuzzing interactive CLI",
    "link": "https://reverseengineering.stackexchange.com/questions/23499/approach-for-fuzzing-interactive-cli",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an IoT system that has a command-line-based interactive shell that can be used to configure the system. While examining the disassembly/decompilation, I realized that there is a lot of functionality/code to the CLI and a lot of possible logical paths in the program. As such, I have not outright identified any memory corruption vulnerabilities, but I suspect that there may be edge cases that could result in a bug. This is where I would normally apply fuzzing to bolster my coverage.</p>\n<p>However, I am having trouble identifying an approach to creating a suitable input corpus to fuzz with. The CLI supports a number of commands, and some of them even spawn their own interactive CLI with many levels of namespaces. It may take several commands to reach certain parts of the program. </p>\n<p>I have two thoughts on how to go about this:</p>\n<ol>\n<li>Create a comprehensive corpus, including a large number of commands and possible paths. Will be tedious to construct; impossible to cover everything.</li>\n<li>No input corpus; use entirely feedback-driven fuzzing (if even possible in this case). Seems like this would be very inefficient, as there would be many paths for the fuzzer to learn.</li>\n</ol>\n<p>I am able to run the binary through the fuzzer and I believe the fuzzer is passing input to it correctly, so that's not an issue. I was planning on using honggfuzz for this, but I don't think that really matters for the question. I don't have source code, so this will be black box and un-instrumented fuzzing.</p>\n<p>My question is, how should I approach creating an input corpus to fuzz a black-box program that has many possible inputs?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "381",
    "tags": [
        "fuzzing"
    ],
    "user": "multithr3at3d",
    "time": "Mar 22, 2020 at 23:13",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.fuzzingbook.org/html/Grammars.html\" rel=\"nofollow noreferrer\">fuzzingbook.org/html/Grammars.html</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Thanks to @julian's comment, I was able to search for more relevant terms.</p>\n<p>For this particular case, I decided to use <a href=\"https://github.com/rc0r/afl-fuzz/blob/master/dictionaries/README.dictionaries\" rel=\"nofollow noreferrer\">AFL's</a> <a href=\"https://lcamtuf.blogspot.com/2015/01/afl-fuzz-making-up-grammar-with.html?m=1\" rel=\"nofollow noreferrer\">dictionary mode</a>, where you can give it a list of words that make up the target application's accepted syntax.</p>\n<p>For example, let's pretend the target application is an interactive calculator, which supports all basic mathmatical operators, e.g. <code>4 + 5</code> or <code>500 / 2</code>. For this, I would create a dictionary file with the following contents:</p>\n<pre><code>\"+\"\n\"-\"\n\"*\"\n\"/\"\n\"^\"\n...\n</code></pre>\n<p>In addition to a typical set of input cases, this file (or a directory of files with one valid piece of syntax each) would be passed to AFL with the <code>-x</code> option, and AFL will try to create valid syntax to improve fuzzing coverage.</p>\n</div>",
            "votes": "2",
            "user": "multithr3at3d",
            "time": "Apr 4, 2020 at 22:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}