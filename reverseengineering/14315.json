{
    "title": "How to bind two EXE files?",
    "link": "https://reverseengineering.stackexchange.com/questions/14315/how-to-bind-two-exe-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a project that needs to be a stand-alone executable but run another executable whenever it is started.</p>\n<p>Unfortunately I don't have access to the source code of the second program to embed it in my own code, so I was thinking about some dirty workaround like below in assembly:</p>\n<p><a href=\"https://i.sstatic.net/n62XA.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/n62XA.jpg\"/></a></p>\n<p>This means to join the binary of two files and use <code>jmp</code> to control the program flow. I've tried ollydbg but could not open <code>x64</code> executables. Is there another way to achieve this?</p>\n<p>Thanks in advance</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "executable",
        "patching",
        "reassembly"
    ],
    "user": "hmak.me",
    "time": "Apr 28, 2017 at 12:47",
    "comments": [
        {
            "user": "phuclv",
            "text": "<span class=\"comment-copy\">why don't just create a batch file and call those 2 binaries?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To debug 64 bit Windows executables you can use <a href=\"http://x64dbg.com\" rel=\"nofollow noreferrer\">x64dbg</a>. It also has the same patching functionalities ollydbg has. You will also need to resolve imports manually (or adjust the second executable's code to use the PE import table) and relocations.</p>\n<p>However, there might be easier ways to do that by extracting the executable and ruining it. An automated way to do that is using WinRar SFX (self extracting) executable. This let's you create an executable that when starts will extract multiple files into a temporary directory and will run one of the extracted files. You can also implement something similar yourself by dropping an executable and running it.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jan 3, 2017 at 7:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}