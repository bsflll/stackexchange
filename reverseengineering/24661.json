{
    "title": "What does this decompiled line mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/24661/what-does-this-decompiled-line-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>__dest = (byte *)(**(code **)(*plVar5 + 0x10))(plVar5,(ulonglong)(numBytes + 1));\nmemcpy(__dest,param_2,numBytes + 1);</code></p>\n<p>Can someone  please  explain what the first line does step by step? I get that it's preparring a byte array for the memcpy function but I'm confused by the rest, especially that \"code\" type. Is that an opcode or something ?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "arm",
        "ghidra"
    ],
    "user": "hecya",
    "time": "Apr 9, 2020 at 13:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>code</code> does mean that something is interpreted as code to execute (most likely a function)</p>\n<p>But more can be recovered from this snippet than just that something is executed:</p>\n<h2>Step 1: <code>(**(code **)(*plVar5 + 0x10))</code></h2>\n<p>This is most likely a C++ vtable call.</p>\n<p><code>plVar5</code> should be some variable containing a C++ object, or rather a pointer that should be interpreted as a C++ object. At offset 0 (which is just written <code>*plVar5</code>) is the pointer to the vtable of the object. The element at offset 0x10 in the vtable is some function. If this is the 3rd (vtable[2]) or the 5th (vtable[4]) depends on the pointer size, but let's pretend this is 64bit for this explanation ). This means that this is the 3rd entry, which is typically the first true vtable function after the constructor and destructor at vtable[0] and vtable[1]. Lets call this function <code>prepare_buffer</code>.</p>\n<p>So the more understandable translation would be</p>\n<p><strong><code>plVar5-&gt;vtable-&gt;prepare_buffer</code></strong></p>\n<h2>Step 2: <code>(byte *)plVar5-&gt;vtable-&gt;prepare_buffer(plVar5,(ulonglong)(numBytes + 1))</code></h2>\n<p>After substituting our previous result into <code>(byte *)(**(code **)(*plVar5 + 0x10))(plVar5,(ulonglong)(numBytes + 1))</code></p>\n<p>Because this is C++ function of an object the first parameter is the <code>self</code> parameter, which has to be present for non static functions. So the only true argument is <code>(ulonglong)(numBytes + 1)</code>. The result is assigned to a variable of type  <code>byte *</code> and casted as such.</p>\n<h2>Step 3: <code>memcpy(__dest,param_2,numBytes + 1);</code></h2>\n<p>This is indeed just a memcopy to the buffer returned by the previous function. Because the only real argument of that previous function call was the number of bytes copied I am assuming it was setting up this buffer (and called it <code>prepare_buffer</code>). If you can find out the class of the variable <code>plVar5</code> you can find the vtable for this class, and then find the actual function that is called here to confirm this.</p>\n<h2>Further Reading</h2>\n<p>If you want to learn more about this I suggest <a href=\"https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/\" rel=\"nofollow noreferrer\">https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/</a> (which I skimmed to explain this) and looking at the Ghidra Advanced Course at <a href=\"https://ghidra.re/online-courses/\" rel=\"nofollow noreferrer\">https://ghidra.re/online-courses/</a> that includes a Chapter on \"Virtual Function Tables\" which covers the Ghidra specifics of getting proper decompiler output for such cases.</p>\n</div>",
            "votes": "4",
            "user": "Florian Magin",
            "time": "Apr 10, 2020 at 14:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "hecya",
                    "text": "<span class=\"comment-copy\">Thank you so much for the detailed answer, really appreciate it !</span>",
                    "time": null
                },
                {
                    "user": "Alex Q",
                    "text": "<span class=\"comment-copy\">FYI: the <a href=\"https://ghidra.re/online-courses/\" rel=\"nofollow noreferrer\">ghidra.re/online-courses</a> website is offline, and the course material can now be found in the <a href=\"https://github.com/NationalSecurityAgency/ghidra/tree/Ghidra_10.2.3_build/GhidraDocs/GhidraClass\" rel=\"nofollow noreferrer\">GhidraDocs directory of the Ghidra repo</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm fairly certain that:</p>\n<pre><code>(**(code **)(*plVar5 + 0x10))\n</code></pre>\n<p>Is a function pointer. So, the line looks more like:</p>\n<pre><code>__dest = (byte*) somefunction(plVar5,(ulonglong)(numBytes + 1));\n</code></pre>\n<p>The decompilation can sometimes get a bit hairy with all these casts and pointer arithmetic. If there is a lot of code using <code>plVar5</code> plus some offset, you could likely, using context clues, define a custom datatype that makes it easier to read.</p>\n</div>",
            "votes": "0",
            "user": "multithr3at3d",
            "time": "Apr 9, 2020 at 14:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}