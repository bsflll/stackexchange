{
    "title": "How to deal with heavy control flow flattening?",
    "link": "https://reverseengineering.stackexchange.com/questions/17758/how-to-deal-with-heavy-control-flow-flattening",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer an executable that uses a lot of control flow flattening obfuscation (i.e, lots of subroutines that end with something like jmp esi, jmp eax) IDA Pro isn't able to resolve where the jump can branch off to and I'm not really sure what to do here.</p>\n<p>I made a plugin for x64dbg ( <a href=\"https://github.com/JeremyWildsmith/x64dbg_scripts/blob/master/traceAreas.py\" rel=\"nofollow noreferrer\">https://github.com/JeremyWildsmith/x64dbg_scripts/blob/master/traceAreas.py</a> ) that locates and monitors the branching instructions in a provided list of subroutines and generates graphml diagrams that I am reading (i.e example like this: <a href=\"https://i.sstatic.net/4StsO.png\" rel=\"nofollow noreferrer\">https://i.sstatic.net/4StsO.png</a> ) that I am viewing and analyzing in yEd live.</p>\n<p>But it generates a lot of data. I know there is a vm hanging around somewhere in there and I am having trouble finding it just because of all the obfuscation. The collected control-flow data is here (warning, big text file, 45kb) <a href=\"https://github.com/JeremyWildsmith/x64dbg_scripts/blob/master/flow.graphml\" rel=\"nofollow noreferrer\">https://github.com/JeremyWildsmith/x64dbg_scripts/blob/master/flow.graphml</a></p>\n<p>When I open it in yEd Live it looks like there are multiple virtual machines or something? Yeah not really sure where to go with this, if anyone has any advice that would be awesome.</p>\n<p>If I look at the control flow in a radial diagram ( <a href=\"https://i.sstatic.net/YrHn4.jpg\" rel=\"nofollow noreferrer\">https://i.sstatic.net/YrHn4.jpg</a> ) I think I can identify the center as some sort of dispatcher or interpreter for the bytecode instructions? But what throws me off is how much branching goes on later on through the execution.</p>\n<p>Thanks.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "deobfuscation",
        "virtual-machines",
        "control-flow-graph",
        "virtualizers"
    ],
    "user": "Jeremy",
    "time": "Mar 21, 2018 at 7:31",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Have you considered trying <a href=\"https://github.com/JonathanSalwan/Triton\" rel=\"nofollow noreferrer\">Triton</a>? Or any symbolic execution based analysis tool?</span>",
            "time": null
        },
        {
            "user": "Jeremy",
            "text": "<span class=\"comment-copy\">I have looked at Triton (and angr) but the code I am studying is unpacked and written to memory during execution and has a lot of anti-debugging techniques. So I'm not sure how to use the tool. Would it work to run it and them dump the executable and do symbolic execution on that? Then I don't have any state information.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">It mainly depends on the complexity of the packer. If it relies heavily on crypto and on low-level system calls, then you can forget about these tools. But, if this is only easy compression or encoding, then it is still possible (though the symbolic execution is not really efficient against packers).</span>",
            "time": null
        },
        {
            "user": "Jeremy",
            "text": "<span class=\"comment-copy\">@perror Do you know if there is there any way I can capture a state or something to that effect mid-way through execution and use it with angr? I'll run it through angr and see what I get anyways; but I'm skeptical how useful the output could be.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Well, if you can create a core file at some point, I am quite sure that the binary loader of angr has an entry to load those files (see <a href=\"https://github.com/angr/angr-doc/blob/master/docs/loading.md#backends\" rel=\"nofollow noreferrer\">here</a>). But, I never tried it...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One would have to look at the code. \nHow are the jump targets calculated?\nFrom your diagrams it could also be something as simple as:</p>\n<pre><code>void jump_to_x_plus_5(uint x) { jmp x+5; }\nvoid jump_to_x_plus_7(uint x) { jmp x+7; }\nvoid jump_to_x_plus_9(uint x) { jmp x+9; }\n</code></pre>\n<p>And they just replaced all absolute jumps in the <code>.asm</code> with calls to <code>random.choice()</code> of those functions.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Mar 21, 2018 at 14:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">Jump targets are calculated using heap data as input. I believe it may be possible to reverse engineer nut there are a lot of subroutines.</span>",
                    "time": null
                },
                {
                    "user": "manduca",
                    "text": "<span class=\"comment-copy\">@Jeremy okay, that does indeed smell like a vm. If it was just obfuscated jumps, you could have calculated the predicates with symbolic execution and patched in the original jumps. Now I fear you have to understand whatâ€™s going on. Maybe tracking memory accesses could give you an idea where the virtual IP is, etc. ?</span>",
                    "time": null
                },
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">Hey Manduca, yeah its very possible to reverse engineer the algorithm from what I can see. I'll need to find a way to automate it though because there are over 60 subroutines easily where I'd have to do this. The control flow I expected was a loop and some branching but what i see is a ton of branching all over the place. So its either multiple vms or maybe I am missing something.  This difficulty is finding out what the instructions do because they jump through a lot of obfuscated code.</span>",
                    "time": null
                },
                {
                    "user": "manduca",
                    "text": "<span class=\"comment-copy\">@Jeremy i just saw your conversation with perror. Weirdly enough a few days ago i wanted to dump a process in windows and then do some emulation on that state with unicorn. I ended up dumping as windows minidump (e.g. by right-clicking in process explorer) and then parsing that with <a href=\"https://github.com/utds3lab/sigpath/blob/master/scripts/minidump.py\" rel=\"nofollow noreferrer\">github.com/utds3lab/sigpath/blob/master/scripts/minidump.py</a> . Maybe you could do something similar for angr?</span>",
                    "time": null
                },
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">Thanks for the advice, what does this minidump script do?</span>",
                    "time": null
                }
            ]
        }
    ]
}