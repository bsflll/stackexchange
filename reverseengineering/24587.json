{
    "title": "How can I debug open source C code for Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/24587/how-can-i-debug-open-source-c-code-for-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to debug &amp; reverse engineer open source code such as <a href=\"https://github.com/liblouis/liblouis\" rel=\"nofollow noreferrer\">this project</a>. I usually use CLion to write and debug C code on Linux. I've also used GDB. What steps do I need to take to download a library like this example, and be able to get source-code-level debugging working? I've tried for example cloning that repo and opening it in CLion, but it seems that the build system that is used is not fully understood by CLion. If I do a <code>make &amp;&amp; make install</code>, the project gets built and I have the binaries, but then I cannot get source-level debugging if I say, open the binary with gdb. Are there any techniques to get into an open source repo and get the code building in an IDE or debugging system?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "190",
    "tags": [
        "debugging",
        "linux",
        "c",
        "gdb"
    ],
    "user": "the_endian",
    "time": "Apr 1, 2020 at 6:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You don't need to <code>make install</code> the binary, this often strips the binary removing all the debug information.</p>\n<p>In the <a href=\"https://github.com/liblouis/liblouis/blob/master/HACKING#how-to-debug\" rel=\"nofollow noreferrer\">HACKING</a> file these is a section on how to debug this tool, they advise the following settings, personally I would add <code>-ggdb</code> to enable <code>gdb</code> specific bindings. <em>(This advice also applies to other projects, although this project has explicitly added it to help new developers to the project.)</em></p>\n<pre><code>  $ ./configure CFLAGS='-g -O0 -Wall -Wextra'\n  $ make\n</code></pre>\n<p>It also explains how to use <code>libtool</code> to run the binaries.</p>\n<pre><code>  $ libtool --mode=execute gdb ./tools/lou_checktable\n  (gdb) run tables/wiskunde.ctb\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Daniël W. Crompton",
            "time": "Apr 2, 2020 at 11:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">So what you're really saying as an answer is more or less \"Each project is more or less case-by-case and you need to do a more thorough job of reading the provided docs if they exist. If they don't exist, it may be more difficult.\" Is that a fair summation?</span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Also, generally speaking, the binary can be \"instrumented\"/prepared for debugging at the MAKE step?</span>",
                    "time": null
                },
                {
                    "user": "Rup",
                    "text": "<span class=\"comment-copy\">No, these flags are fairly general: you need to make sure that the compile and link steps both have <code>-g</code> or something more specific like <code>-ggdb</code> for better information if you're using GDB; -O0 means don't optimise which might make things easier to follow, -Wall and -Wextra are for extra warnings you'd want to see when changing the code. You only really need -g. Barring quirks in the build system these are universal when compiling with GCC, and generally you want to edit / override CCFLAGS and LDFLAGS to set these, and check they aren't stripped (<code>strip</code>) after linking.</span>",
                    "time": null
                },
                {
                    "user": "Rup",
                    "text": "<span class=\"comment-copy\">Realistically yes you need to generate debug symbols at build time. If you're using someone else's binary e.g. a library from your linux distro then they will have often built the debug symbols but not put them in the main package; check for specific debuginfo packages you can download an install too to debug into their binaries.</span>",
                    "time": null
                },
                {
                    "user": "Daniël W. Crompton",
                    "text": "<span class=\"comment-copy\">I updated the answer for clarity</span>",
                    "time": null
                }
            ]
        }
    ]
}