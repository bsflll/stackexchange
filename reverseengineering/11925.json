{
    "title": "Putting instructions in placeholder code IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/11925/putting-instructions-in-placeholder-code-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In IDA, is it possible to convert placeholder data into a code segment?</p>\n<p>In the end of the library I am working with, there is an uninitialized segment starting at 016AAB31.</p>\n<p>The hex and actual data (which is question mark strings), however, does not allow me to put arm asm instructions into it, using the edit feature. It claims that it cannot convert the \"????\"s to hexadecimal integers. </p>\n<p>Is there a way to extend the code segment to let me add more code, or any other way to do this? Thanks</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "482",
    "tags": [
        "ida",
        "assembly",
        "arm",
        "segmentation"
    ],
    "user": "Aspire",
    "time": "Feb 3, 2016 at 0:32",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Your uninitialized segment is probably a .bss segment, which basically means \"I need 123456 bytes in ram, but because they are all initialized to 0, I won't inflate the executable by repeating 123456 zero bytes\". So there's no space present in your file, and even if there was, your library relies on these bytes being 0, so you can't put anything there.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>Edit &gt; Segments &gt; Create Segment</code></p>\n</div>",
            "votes": "1",
            "user": "Zach Riggle",
            "time": "Feb 3, 2016 at 16:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Aspire",
                    "text": "<span class=\"comment-copy\">I have tried this but it still does not let me do so, with the same error. In addition, even if I am able to get the code into there, (and label the segment as pure code) it does not transfer into instructions, only the hex characters that make up the instructions.</span>",
                    "time": null
                },
                {
                    "user": "Zach Riggle",
                    "text": "<span class=\"comment-copy\">Have you actually told IDA that it's code?  e.g. Select the address and hit <code>C</code> or invoke <code>idc.MakeCode</code>?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Create segment has to do with segmentation registers in (mainly old, 16 bit) x86 code, and arm/thumb switches on arm, but nothing with executable file segments.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would recommend against doing this in IDA. IDA is not a patching tool. Although there are plugins for IDA that implement this, there are far better choices for executable format editors, that are better equipped to add additional sections and manupulate data in it, which seems to be what you're after.</p>\n<p>I suspect IDA won't be able to patch in the modified/new section even if you managed to create it. I <em>think</em> you'll have to use another tool for the job.</p>\n<p>Since you're working with ARM assembly, I'll assume you're working on an executable in the elf format. For that, simply using <code>objcopy --add-section</code> would do the trick. You might also want to take a look at <code>--set-section-flags</code> afterwards.</p>\n<p>More advanced tools include the <a href=\"https://github.com/thorkill/eresi\" rel=\"nofollow\">eresi</a> and <a href=\"http://www.radare.org/r/\" rel=\"nofollow\">radare</a> projects. Both capable and designed to manipulate ELF executables to ease the work of a reverse engineer and/or security researcher.</p>\n</div>",
            "votes": "0",
            "user": "NirIzr",
            "time": "Oct 21, 2016 at 13:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}