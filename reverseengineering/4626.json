{
    "title": "Which condition has to be met to execute this if branch",
    "link": "https://reverseengineering.stackexchange.com/questions/4626/which-condition-has-to-be-met-to-execute-this-if-branch",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Right now I am playing around with a little <em>training</em> application I found on <a href=\"http://opensecuritytraining.info/\" rel=\"nofollow\">OpenSecurityTraining</a>. </p>\n<p>So, I analyzed this code and I think I understand this pretty well. The only thing I don't get is the <code>cmp</code> and <code>je</code> at lines <code>0x004010e3</code> and <code>0x004010e7</code> which seem to be some <code>if</code> conditions. But, I cannot figure out which condition should be met to take the jump instruction. </p>\n<p>My workaround was to manipulate <code>eip</code> when the <code>cmp</code> line was executed. But, my question is what condition has to be set to take the <code>je</code> instruction ? </p>\n<pre><code>004010e0 55              push    ebp\n004010e1 8bec            mov     ebp,esp\n004010e3 837d0803        cmp     dword ptr [ebp+8],3\n004010e7 7412            je      mystery!main+0x1b (004010fb)\n004010e9 6834404200      push    offset mystery!__rtc_tzz &lt;PERF&gt; (mystery+0x24034) (00424034)\n004010ee e81c040000      call    mystery!printf (0040150f)\n004010f3 83c404          add     esp,4\n004010f6 83c8ff          or      eax,0FFFFFFFFh\n004010f9 eb0b            jmp     mystery!main+0x26 (00401106)\n004010fb e80affffff      call    mystery!mystery_function+0xffffffff`ffffffea (0040100a)\n00401100 eb02            jmp     mystery!main+0x24 (00401104)\n00401102 eb02            jmp     mystery!main+0x26 (00401106)\n00401104 33c0            xor     eax,eax\n00401106 5d              pop     ebp\n00401107 c3              ret\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "315",
    "tags": [
        "disassembly",
        "assembly",
        "debuggers",
        "windbg"
    ],
    "user": "Dirk",
    "time": "Jun 17, 2014 at 13:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Extended Base Pointer, as the name suggests, is usually used as a frame pointer. That, among other things, means that it's used to access function parameters and local variables. If you think about how stack works, you can conclude the following:</p>\n<ul>\n<li>local variables will be on the negative offset from the base pointer</li>\n<li>address in the frame pointer will be the location of the previous function's frame pointer </li>\n<li>address at the +4 offset from EBP will be the return address</li>\n<li>offsets greater than 4 are function parameters</li>\n</ul>\n<p>That being said, ebp+8 is usually the first function argument. The compare instruction in this case compares the value of the first function parameter to 3. If those are equal (<code>je</code> instruction is <code>jump if equal</code>) the conditional jump will be executed. </p>\n</div>",
            "votes": "5",
            "user": "0xea",
            "time": "Jun 17, 2014 at 11:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>dword ptr [val]</code> is exactly, what it says: <strong>A 32bit pointer to value</strong>. As to how <code>cmp</code>, <code>je</code> and all the other instructions work, I recommend the reading of the <a href=\"http://www.intel.com/Assets/en_US/PDF/manual/253666.pdf\" rel=\"nofollow\">Intel Manual</a>.</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Jun 17, 2014 at 11:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}