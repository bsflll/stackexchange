{
    "title": "Find all x-ref with specific argument with IdaPython",
    "link": "https://reverseengineering.stackexchange.com/questions/29522/find-all-x-ref-with-specific-argument-with-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a function at <code>0xabcd</code> that is called a few times like <code>Func(1,2,3)</code> and <code>Func(4,4,5)</code>.</p>\n<p>I want to find all the references where the third argument is <code>5</code>.</p>\n<pre><code>import idautils\nfor f in list(idautils.XrefsTo(0xabcd)):\n</code></pre>\n<p>How can I get the third argument from all the x-ref with IDAPython?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "377",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "vtable",
    "time": "Dec 12, 2021 at 8:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As currently stated, there's no simple solution to such a general problem.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Static_program_analysis\" rel=\"nofollow noreferrer\">Static analysis</a> is quite a complex subject and there are no generic solutions that are available out of the box.</p>\n<p>A few basic examples of why this may be difficult are these:</p>\n<ol>\n<li><p>Consider the case where the third argument to <code>Func</code> is a <em>user supplied input</em>. It is therefore <em>impossible</em> to know the value statically.</p>\n</li>\n<li><p>Moreover, a value may be derived from other external sources (the OS, the internet, etc).</p>\n</li>\n<li><p>Even when limiting to static programs, the code manipulating the variable before passing it on to <code>Func</code> may be complex and difficult to follow.</p>\n</li>\n</ol>\n<p>A <em>na√Øve</em> static solution may be a more viable solution. For example, a solution that assumes the third argument to <code>Func</code> is a hardcoded immediate value and not a variable, will require only little static analysis and can be achieved, although IDA is not best-suited for such tasks (I'd recommend you take a look at <a href=\"https://angr.io/\" rel=\"nofollow noreferrer\">angr</a> instead)</p>\n<p>Alternatively, one might argue that <em>debugging</em> is a better solution, placing a break point on <code>Func</code> and parsing the arguments at call-time. This is again not IDA's forte but nowadays IDA's debugger is good enough to use for such a task.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 11, 2021 at 13:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}