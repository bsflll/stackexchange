{
    "title": "reversing stripped & statically linked binary with radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/16355/reversing-stripped-statically-linked-binary-with-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As the question says I need to reverse a stripped elf binary with <code>radare2</code>. This binary is also statically linked. I already reversed it in IDA by identifying statically linked libraries using <code>lscan</code> and importing the <code>.sig</code> files provided by <code>lscan</code> into IDA in order to resolve function names.  </p>\n<p>I don't know how to import these files to <code>radare2</code>. Also I don't know if the same solution applies to <code>radare2</code>.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "binary-analysis",
        "elf",
        "radare2"
    ],
    "user": "rustam Shirinov",
    "time": "Sep 17, 2017 at 8:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Seems like <code>lscan</code> is written to work with <code>IDA</code>. However, <code>lscan</code> is based on <code>FLIRT</code> signature files which can be also read by radare2 (See the <em>Zignatures</em> section of this answer). There are several things you can do with <code>radare2</code> to achieve similar results:</p>\n<h2>Import IDA databases to radare2</h2>\n<p>You can easily import IDC and IDB files from IDA to radare2 using a simple scripts which exists in <a href=\"https://github.com/radare/radare2ida\" rel=\"noreferrer\">radare2ida</a> repository.</p>\n<blockquote>\n<p>This repository contains a collection of documents, scripts and\n  utilities that will allow you to use IDA and R2, converting projects\n  metadata from one tool to the other and providing tools to integrate\n  them in a more useful way.</p>\n</blockquote>\n<p><strong>Export from IDA</strong> </p>\n<p>To export IDA database to IDC file click on <code>File &gt;&gt; Produce file &gt;&gt; Dump databse to IDC file...</code></p>\n<p>To save the current databse as an IDB file click <code>File &gt;&gt; Take database snapshot...</code> or use the shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd></p>\n<p><strong>Import to Radare2</strong></p>\n<p>To import the IDC metadata to radare2 use <a href=\"https://github.com/radare/radare2ida/blob/master/ida2r2/idc2r.py\" rel=\"noreferrer\">idc2r.py</a> which shipped with <code>radare2ida</code>:   </p>\n<pre><code>idc2r.py file.idc &gt; file.r2\n</code></pre>\n<p>The command reads an IDC file exported from an IDA Pro database and produces an r2 script containing the same comments, names of functions etc. You can import the resulting <code>file.r2</code> by using the dot <code>.</code> command of radare:  </p>\n<pre><code>[0x00000000]&gt; . file.r2\n</code></pre>\n<p>The <code>.</code> command is used to interpret radare commands from external sources, including files and program output. For example, to omit generation of an intermediate file and import the script directly you can use this combination:</p>\n<pre><code>[0x00000000]&gt; .!idc2r.py &lt; file.idc\n</code></pre>\n<h2>Zignatures</h2>\n<p>radare2 has its own format of the signatures called <code>Zignatures</code>, allowing to both load/apply and create signatures on the fly. They are available under the <code>z</code> command namespace:</p>\n<pre><code>[0x00000000]&gt; z?\n|Usage: z[*j-aof/cs] [args] # Manage zignatures\n| z            show zignatures\n| z*           show zignatures in radare format\n| zj           show zignatures in json format\n| z-zignature  delete zignature\n| z-*          delete all zignatures\n| za[?]        add zignature\n| zo[?]        manage zignature files\n| zf[?]        manage FLIRT signatures\n| z/[?]        search zignatures\n| zc           check zignatures at address\n| zs[?]        manage zignspaces\n</code></pre>\n<p>The <code>zf</code> subcommands can be handy whenever you deal with FLIRT signatures. Therefore you can import FLIRT signatures from a file:</p>\n<pre><code>[0x00000000]&gt; zf?\n|Usage: zf[dsz] filename # Manage FLIRT signatures\n| zfd filename  open FLIRT file and dump\n| zfs filename  open FLIRT file and scan\n| zfz filename  open FLIRT file and get sig commands (zfz flirt_file &gt; zignatures.sig)\n</code></pre>\n<p>Regardless of FLIRT, you can also use <code>zos [filename]</code> from radare2 to dump signatures to a sdb file and <code>zo [filename]</code> to load it.</p>\n<h2>Source Code</h2>\n<p>As similar to <code>list</code> command of <code>dgb</code>, radare allows you to print lines from a source code file. Here's an example:</p>\n<pre><code>$ gcc -m32 -g megabeets.c -o megabeets.bin\n$ r2 megabeets.bin\n[0x08048420]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x08048420]&gt; s main\n[0x080486cd]&gt; CL\nfile .//megabeets.c\nline 36\n  022\n  023  int main(int argc, char *argv[])\n&gt; 024  {\n  025      char *input;\n  026      puts(\"Megabeets\\n\");\n</code></pre>\n<blockquote>\n<p>The <code>C</code> command is used to manage comments and data conversions. You\n  can define a range of program's bytes to be interpreted as either\n  code, binary data or string. It is also possible to execute external\n  code at every specified flag location in order to fetch some metadata,\n  such as a comment, from an external file or database.</p>\n</blockquote>\n<hr/>\n<p>To know more I recommend you to read:</p>\n<ul>\n<li><a href=\"https://radare.gitbooks.io/radare2book/content/disassembling/adding_metadata.html\" rel=\"noreferrer\">Adding Metadata to Disassembly</a> from radar2book </li>\n<li><a href=\"https://radare.gitbooks.io/radare2book/content/signatures/zignatures.html\" rel=\"noreferrer\">Zignatures</a> chapter from radare2book</li>\n<li><a href=\"http://radare.today/posts/zignatures/\" rel=\"noreferrer\">This post</a> about Zignatures</li>\n<li><a href=\"https://github.com/radare/radare2/blob/master/doc/flirt\" rel=\"noreferrer\">radare2 and flirt</a></li>\n<li><a href=\"https://github.com/Maktm/FLIRTDB\" rel=\"noreferrer\">A community driven collection of IDA FLIRT signature files</a></li>\n</ul>\n</div>",
            "votes": "7",
            "user": "Megabeets",
            "time": "Sep 17, 2017 at 8:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}