{
    "title": "How to add code to compiled java class",
    "link": "https://reverseengineering.stackexchange.com/questions/17403/how-to-add-code-to-compiled-java-class",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have java code that is compiled to a .class file.\nThere is a function that gets few parameters and do some action (e.g. get int x and int y and do x+y)</p>\n<p>I want to add to this .class file code that checks if x=1 and call to another function(e.g. call to x-y and don't do x+y)</p>\n<p>How can edit a compiled .class file and add my own code?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "10k",
    "tags": [
        "disassembly",
        "java",
        "patching",
        "function-hooking",
        "compilers"
    ],
    "user": "Hook",
    "time": "Feb 9, 2018 at 16:17",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">I edited the question, hopefully this is what you actually wanted to ask; if not, please clarify in a comment or edit it yourself.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several ways to achieve this:</p>\n<ol>\n<li><p>Decompile .class to .java source (not necessarily original source, but equivalent), make your changes, compile again. There are many Java decompilers out there, I won't list them all.</p></li>\n<li><p>Disassemble .class to \"assembly\" (usually Jasmin syntax), modify it, assemble back. <a href=\"https://github.com/Storyyeller/Krakatau\" rel=\"nofollow noreferrer\">Krakatau</a> is a good tool that should be able to do it.</p></li>\n<li><p>Use a tool that can modify/patch the bytecode directly in the .class file. I haven't tried it, but <a href=\"https://github.com/Col-E/Recaf\" rel=\"nofollow noreferrer\">Recaf</a> claims to be able to do it.</p></li>\n<li><p>Hook the Java runtime interpreter to catch the moment it starts executing the target function and  make it execute something else instead. This is somewhat implementation-specific but here's one example I know about which uses Java debugging protocol (JWDP): <a href=\"https://github.com/CrowdStrike/pyspresso\" rel=\"nofollow noreferrer\">https://github.com/CrowdStrike/pyspresso</a></p></li>\n</ol>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 9, 2018 at 16:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use JByteMod to edit your class bytecode.\nYou can also create new methods, delete methods, fields and change accesses.</p>\n<p>Its pretty easy to use, just load the jar and select the class you want to edit.</p>\n<p>JByteMod: <a href=\"https://github.com/GraxCode/JByteMod-Beta/releases\" rel=\"nofollow noreferrer\">https://github.com/GraxCode/JByteMod-Beta/releases</a></p>\n</div>",
            "votes": "2",
            "user": "Princekin",
            "time": "Nov 24, 2020 at 2:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Col-E",
                    "text": "<span class=\"comment-copy\">JByteMod hasn't had an update in two years now unfortunately. The author has jumped on different projects though in similar natures.</span>",
                    "time": null
                }
            ]
        }
    ]
}