{
    "title": "Understanding __PAIR__ macro from IDA PRO Pseudo Decompiler to look better",
    "link": "https://reverseengineering.stackexchange.com/questions/4269/understanding-pair-macro-from-ida-pro-pseudo-decompiler-to-look-better",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I decompile using IDA PRO I get code which could look like both of these</p>\n<p>Understanding the <code>__PAIR__</code> macro.</p>\n<p>Macro itself.</p>\n<pre><code>// The following definition is not quite correct because it always returns\n// uint64. The above C++ functions are good, though.\n#define __PAIR__(high, low) (((unsigned long)(high)&lt;&lt;sizeof(high)*8) | low)\n</code></pre>\n<p><p></p>\n<pre><code>if ( (__PAIR__(a4, a3) &amp; 0x8000000000000000ui64) == 0i64 ) {\n  //condition code.\n}\n</code></pre>\n<p>I also have code that looks like this</p>\n<pre><code>  if ( (__PAIR__(v17, v12) &amp; 0x8000000000000000ui64) != 0i64 ) {\n    //condition code.\n  }\n</code></pre>\n<p>I actually found some guy who helped me repair this bad looking code and as far I could tell by the pattern they could simply be replaced like so.</p>\n<pre><code>   if( (__PAIR__(a4, a3) &amp; 0x8000000000000000ui64) == 0i64 )\n</code></pre>\n<p>becomes</p>\n<pre><code>   if(a4 &gt;= 0 &amp;&amp; a3 &gt;= 0)\n</code></pre>\n<p>Now I found a very similar pattern that looks like above but instead of <code>== 0i64</code> it has <code>!= 0i64</code></p>\n<p>So I figured if my pattern is correct then the following code below</p>\n<pre><code>  if ( (__PAIR__(v17, v12) &amp; 0x8000000000000000ui64) != 0i64 ) {\n</code></pre>\n<p>should look like this</p>\n<pre><code>  if( v17 &lt; 0 || v12 &lt; 0 ) {\n</code></pre>\n<p>Then again that's just a guess I wonder if that's correct.</p>\n<p>I can't post the assembly for the <code>!= 0i64</code> example as I couldn't find it the assembly code is very big.. but the one with <code>== 0i64</code> looks like this</p>\n<pre><code>.text:004049F0                 mov     edx, [esp+a3]\n.text:004049F4                 test    edx, edx\n.text:004049F6                 jl      short locret_404A3E\n.text:004049F8                 mov     eax, [esp+a4]\n.text:004049FC                 test    eax, eax\n.text:004049FE                 jl      short locret_404A3E\n</code></pre>\n</p></div>",
    "votes": "8",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ida",
        "decompilation",
        "decompiler"
    ],
    "user": "user3435580",
    "time": "May 5, 2014 at 10:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<pre><code> if( (__PAIR__(a4, a3) &amp; 0x8000000000000000ui64) == 0i64 )\n</code></pre>\n<p>becomes</p>\n<pre><code> if(a4 &gt;= 0 &amp;&amp; a3 &gt;= 0)\n</code></pre>\n</blockquote>\n<p>No, that's not correct. The correct simplification is:</p>\n<pre><code>if ((int)a4 &gt;= 0)\n</code></pre>\n<blockquote>\n<pre><code> if ( (__PAIR__(v17, v12) &amp; 0x8000000000000000ui64) != 0i64 ) {\n</code></pre>\n<p>should look like this</p>\n<pre><code> if( v17 &lt; 0 || v12 &lt; 0 ) {\n</code></pre>\n</blockquote>\n<p>Nope, it should look like this:</p>\n<pre><code>if ((int)v17 &lt; 0) {\n</code></pre>\n<p>You may want to read up on how the <a href=\"http://en.wikipedia.org/wiki/Most_significant_bit\" rel=\"nofollow\">most significant bit (MSB)</a> is used as the <a href=\"http://en.wikipedia.org/wiki/Sign_bit\" rel=\"nofollow\">sign bit</a> in <a href=\"http://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"nofollow\">two's complement notation</a>.</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "May 5, 2014 at 16:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3435580",
                    "text": "<span class=\"comment-copy\">But it seems to be a PAIR of 2 variables why only one is used there? I understand the variables could be created out of thin-air due to the way assembly works. But I do believe this should still check both at once am I wrong? also since it checks for a 64 bit mask i'm guessing thats 32 bit per variable? this is made for x86 exe not 64bit exe.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">It appears in the disassembly as two variables because the original code used a 64-bit variable, which gets broken up into two 32-bit variables in the disassembly. Since only the MSB of the 64-bit value is checked (since the code is checking the value's sign), the lower DWORD portion of the 64-bit value is irrelevant, which is why my simplified code above ignores a3 and v12.</span>",
                    "time": null
                },
                {
                    "user": "user3435580",
                    "text": "<span class=\"comment-copy\">So as far as I understand IDA PRO did a bad analyze on the assembly to think it's 64bit when it's really 2 variables DWORDS. Why does the assembly above I posted have a3 and a4 I think the asm is interpreted the same in ollydebugger as well that assembly is for the <code>== 0i64</code></span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">\"IDA PRO did a bad analyze on the assembly to think it's 64bit when it's really 2 variables DWORDS\" -- no, it really is a 64 bit value; IDA didn't make a mistake here as far as I can see.</span>",
                    "time": null
                }
            ]
        }
    ]
}