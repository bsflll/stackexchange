{
    "title": "index of array in assembly? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/18710/index-of-array-in-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has an answer here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/18760/how-does-array-indexing-works-at-the-assembly-level\">How does array indexing works at the assembly level?</a>\n<span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2018-07-11 18:53:35Z\">6 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>In the following picture the line i want to mention is:</p>\n<pre><code>mov [esp+eax*4+0Ch], edx\n</code></pre>\n<p>Here <code>eax</code> is the index in the array. But, where is the address of the array to access?</p>\n<p>what does mean this line of code ? (<code>0Ch</code>)</p>\n<p><a href=\"https://i.sstatic.net/smNxO.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Full context of the asm line\" src=\"https://i.sstatic.net/smNxO.jpg\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "6k",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "ReverserT",
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Usually, when running through an array, we can find the following lines of assembly code:</p>\n<pre><code>mov [base_address_of_array + array_index * size_of_an_item_in_array], edx\n</code></pre>\n<p>In your case, my guess would be that the array is on the stack (that is why you find <code>esp</code> as part of the base address of the array. Then, you also have an offset to <code>esp</code> which is <code>0Ch</code> (which is 12 in decimal). So, the array is located at <code>esp + 0Ch</code>. Then, <code>eax</code> is the index and <code>4</code> is the size of an item in the array (probably an integer of 4 bytes).</p>\n<p>If we look at the whole CFG, I would translate it back to C in something like this:</p>\n<pre><code>int array[4];\n\nfor (int i = 0; i &lt; 4; ++i)\n  array[i] = i;\n</code></pre>\n<p><strong>Note</strong>: I supposed that the blue arc in the CFG is getting back to <code>loc_401381</code>.</p>\n</div>",
            "votes": "4",
            "user": "perror",
            "time": "Jul 6, 2018 at 16:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">The assembly code looks like pointer arithmetic with arrays. Isn't it?</span>",
                    "time": null
                }
            ]
        }
    ]
}