{
    "title": "How To Identify Which Process Is Being Written To With WriteProcessMemory?",
    "link": "https://reverseengineering.stackexchange.com/questions/23399/how-to-identify-which-process-is-being-written-to-with-writeprocessmemory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically, I cannot find which process is being written to when WriteProcessMemory is being called.\nCurrently I'm Setting Breakpoints on WriteProcessMemory and OpenProcess. However, the process handle being passed to WriteProcessMemory is different from that obtained from OpenProcess, so it appears that the process handle is being obtained in another way. Is there something I'm missing out on? Should I add more breakpoints on other functions?</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "1k",
    "tags": [
        "windows",
        "malware",
        "debuggers",
        "injection"
    ],
    "user": "MadMax2020",
    "time": "Mar 7, 2020 at 17:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is also easy using x64dbg. When you break on the <code>WriteProcessMemory</code> the handle will be at <code>[esp+0x4]</code> in the memory.</p>\n<p><img alt=\"Image of stack view in x64dbg\" src=\"https://i.sstatic.net/BYSjv.png\"/></p>\n<p>After you write down the handle (in this case 0xDC) you may go to the <code>Handles</code> tab in the x64dbg main window, then <code>Right click -&gt; Refresh</code>. All the handles associated with your debugged process will be listed. Now you need to find the corresponding handle and that's it.</p>\n<p><img alt=\"Image of handles tab in x64dbg\" src=\"https://i.sstatic.net/VuYUs.png\"/></p>\n<p>As you can see, in my case the <code>WriteProcessMemory</code> was writing to a process with PID 0x7A30.</p>\n<p>If you don't use a debugger that lets you list handles (unlikely) you can use external tool like Process Explorer, which also has the ability to list all process associated handles.</p>\n</div>",
            "votes": "4",
            "user": "tripleee",
            "time": "Jul 28, 2024 at 15:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>which debugger are you using ?<br/>\nmost debuggers will decipher the handle on the spot<br/>\nthat is you  can find out the handle info when you have broken on  the WriteProcessMemory() Call itself</p>\n<p>here is how you can do it with windbg<br/>\ni am debugging ollydbg and olllydbg ais debugging calc.exe<br/>\nollydbg is setting a breakpoint in calc.exe (uses WriteProcessMemory()  )</p>\n<pre><code>0:000&gt; bl\n     0 e Disable Clear  752444cf     0001 (0001)  0:**** KERNELBASE!WriteProcessMemory\n\n0:000&gt; .lastevent\nLast event: c90.e10: Hit breakpoint 0\n\n0:000&gt; kb1\n # ChildEBP RetAddr  Args to Child              \n00 0012bd44 00457929 0000014c 009c2000 02973020 KERNELBASE!WriteProcessMemory\n\n0:000&gt; !handle 14c f\nHandle 14c\n  Type          Process\n  Attributes    0\n  GrantedAccess 0x1fffff:\n         Delete,ReadControl,xxxx,SetPort\n  HandleCount   4\n  PointerCount  10\n  Name          &lt;none&gt;\n  Object Specific Information\n    Process Id  3336\n    Parent Process  3216\n    Base Priority 8\n\n0:000&gt; dx Debugger.Utility.Control.ExecuteCommand(\".tlist\").Where(a=&gt;a.Contains(\"3336\")==true)\nDebugger.Utility.Control.ExecuteCommand(\".tlist\").Where(a=&gt;a.Contains(\"3336\")==true)                \n    [0x30]           :  0n3336 calc.exe\n\n0:000&gt; dx Debugger.Utility.Control.ExecuteCommand(\".tlist\").Where(a=&gt;a.Contains(\"3216\")==true)\nDebugger.Utility.Control.ExecuteCommand(\".tlist\").Where(a=&gt;a.Contains(\"3216\")==true)                \n    [0x2f]           :  0n3216 ollydbg.exe\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Mar 7, 2020 at 18:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many programs, especially malware, start a suspended child process (<code>CreateProcess</code> variants), overwrite its code with their own (<code>WriteProcessMemory</code> with or without <code>VirtualAllocEx</code>) and resume the main thread (<code>ResumeThread</code>).</p>\n<p>Also look for <code>ReadProcessMemory</code>, it is possible that the call to <code>OpenProcess</code> that you see is actually the same process reading from its own pages and the <code>WriteProcessMemory</code> is writing to the newly created process, with its different handle.</p>\n<p>Note that these functions also have low-level variants (<code>ZwCreateThread</code> etc.)</p>\n</div>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Mar 22, 2020 at 9:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}