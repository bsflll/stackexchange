{
    "title": "Is it possible to use GHIDRA to decode .NET ? (1 lvl crackmes with solution, but not in GHIDRA)",
    "link": "https://reverseengineering.stackexchange.com/questions/31814/is-it-possible-to-use-ghidra-to-decode-net-1-lvl-crackmes-with-solution-but",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a beginner, I want to decode 1 lvl in crackmes, I downloaded a GHIDRA as my main tool. I've got a simple keygen app.</p>\n<p>Here it is: <a href=\"https://crackmes.one/crackme/5ab77f6433c5d40ad448cb2d\" rel=\"noreferrer\">https://crackmes.one/crackme/5ab77f6433c5d40ad448cb2d</a>. The solution is simple</p>\n<ul>\n<li><code>use Reflector</code> and</li>\n<li>go <code>KeyMe-&gt;KeyMe.exe-&gt;KeyMe-&gt;Form1</code></li>\n<li>now Go to the <code>CloseApp()</code> method.</li>\n</ul>\n<p>The source appears to be like this :</p>\n<pre><code>  private void CloseApp()\n  {\n      string str = \"papanyquiL\";\n      for (int i = 0; i &lt; this.textBox1.Text.Length; i++)\n      { etc..\n</code></pre>\n<p>I won't ask how to get this function if the name would be different. But there are other problems - All my functions aren't visible in the decompiler, only enter function is available. I can't find an Assembler code and code in the solution.</p>\n<p>Is GHIDRA ever available to decompile this type of file? It says that it is .NET CLR Managed Code, and that's all I've found.</p>\n<p><img alt=\"Image\" src=\"https://s1.hostingkartinok.com/uploads/images/2023/04/6e3575805fbb8ca1124b870965a5cdf4.png\"/></p>\n</div>",
    "votes": "8",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ghidra",
        ".net",
        "crackme",
        "byte-code",
        "dotnet-clr"
    ],
    "user": "OREN YT",
    "time": "Jul 31, 2024 at 22:25",
    "comments": [
        {
            "user": "mimak",
            "text": "<span class=\"comment-copy\">.NET compiles to <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">IL bytecode</a> that requires a runtime to be executed. To my best knowledge Ghidra doesn't support this architecture, you should use a .NET decompiler like the popular <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noreferrer\">ILSpy</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=vs-publisher-306627.NETReflectorVisualStudioExtension\" rel=\"nofollow noreferrer\">Reflector</a> as you mentioned</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You mentioned that you are a beginner so I'll give you a more generic answer with a concrete recommendation in the end.</p>\n<p>Compared to other industries, like software development, or generally white-collar type jobs, reverse engineering (RE) is a bit of a niche-industry. So while you might be used to using \"one tool for everything\" in other place, I don't believe that this will be the case in RE any time soon. So imho you should be getting used to having a larger tool \"box\" of software that is more specialized for particular tasks.</p>\n<p>In your situation, for example, you want to analyze a .NET-based sample. And while Ghidra is, in principal, able to analyze .NET-based samples, it is not the most powerful tool. Think of it like this: you can use a screwdriver to hammer in a nail — and one sometimes does that, if there is no hammer around for example — but if you are being serious about nails, you should get a proper hammer. And your hammer in this case is <a href=\"https://github.com/dnSpy/dnSpy\" rel=\"nofollow noreferrer\">dnSpy</a>.</p>\n<p>Alternatives \"hammers\" have also been mentioned in the comment section: <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noreferrer\">ILSpy</a> and <a href=\"https://www.red-gate.com/products/reflector/\" rel=\"nofollow noreferrer\">Reflector</a>.</p>\n</div>",
            "votes": "4",
            "user": "born",
            "time": "Oct 17, 2023 at 11:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}