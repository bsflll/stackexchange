{
    "title": "Radare2 - How to save/restore metadata in debug session (BPs, flag, comments..)?",
    "link": "https://reverseengineering.stackexchange.com/questions/18845/radare2-how-to-save-restore-metadata-in-debug-session-bps-flag-comments",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can i save/reuse/preserve Radare2 metadata (BPs, comments, flags..) of a debug session for a new debug session? I restart the debugger alot and preserving environment would be very helpful.</p>\n<p>I start with <code>r2 -d binary -r myenv.rr2 -i myscript.r2s</code>, create some flags, comments and such and then exit with <code>q</code>. <code>ood</code> usually is not enough (weird errors about fds and such. I quit completely most of the time). But if i try to load my project (<code>Po</code>) its asks me to restart the session and then i'm in a wrong context/process or something.</p>\n<pre><code>[0x7f7d020fb2c0]&gt; Po myproject\nClose current session? (Y/n) \nWARNING: module's base addr + delta is not a valid address\n[0x7f8baef752c0]&gt; dc\nnative-singlestep: No such process\nStepping failed!\n</code></pre>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "636",
    "tags": [
        "debugging",
        "radare2"
    ],
    "user": "Maniaxx",
    "time": "Jul 19, 2018 at 18:39",
    "comments": [
        {
            "user": "peachykeen",
            "text": "<span class=\"comment-copy\">Were you able to find a solution for this? I am currently trying to figure out how to persist comments between debug sessions.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Commands starting with <code>P</code> is what you seek.</p>\n<pre><code>Usage: P[?.+-*cdilnsS] [file]  Project management\n| P [file]          open project (formerly Po)\n| P.                show current loaded project (see prj.name)\n| P+ [name]         save project (same as Ps, but doesnt checks for changes)\n| P- [name]         delete project\n| P*                printn project script as r2 commands\n| P!([cmd])         open a shell or run command in the project directory\n| Pc                close current project\n| Pd [N]            diff Nth commit\n| Pi [file]         show project information\n| Pl                list all projects\n| Pn -              edit current loaded project notes using cfg.editor\n| Pn[j]             manage notes associated with the project\n| Ps [file]         save project (see dir.projects)\n| PS [file]         save script file\n| PS* [name]        print the project script file (Like P*, but requires a project)\n| Pz[ie] [zipfile]  import/export r2 project in zip form (.zrp extension)\n| NOTE:             the 'e prj.name' evar can save/open/rename/list projects.\n| NOTE:             see the other 'e??prj.' evars for more options.\n| NOTE:             project are stored in dir.projects\n</code></pre>\n<p>Example of save/restore session:</p>\n<pre><code>$ r2 -\n[0x00000000]&gt; f myflag = 0xdeadbeef\n[0x00000000]&gt; Ps myproject\n[master (root-commit) cbcd6c2] default message\n Author: dacav &lt;dacav@localhost&gt;\n 1 file changed, 687 insertions(+)\n create mode 100644 rc.r2\n[0x00000000]&gt; q\n</code></pre>\n<p>Starting a new session:</p>\n<pre><code>$ r2 -\n[0x00000000]&gt; Pl\nmyproject\n[0x00000000]&gt; P myproject\n[0x00000000]&gt; f | grep myflag\n0xdeadbeef 0 myflag\n</code></pre>\n<p>The project saving is done using <code>git</code>, as suggested by the <code>Ps</code> output.  I think using <code>git</code> is a great idea, and I like how <code>Pd</code> can tell what happened in a project over time.</p>\n<p>Projects are saved under the directory pointed by the <code>dir.projects</code> configuration variable.</p>\n<p>Also, the original question is quite old, and even trying <code>Po</code> will result in a deprecation warning these days.</p>\n</div>",
            "votes": "1",
            "user": "Dacav",
            "time": "Feb 4, 2024 at 13:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}