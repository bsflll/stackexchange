{
    "title": "Is this Bignum multiplication of 2048 RSA number a Montgomery multiplication?",
    "link": "https://reverseengineering.stackexchange.com/questions/18480/is-this-bignum-multiplication-of-2048-rsa-number-a-montgomery-multiplication",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The below code snippets are some kind of <code>bignum</code> multiplications involving 2048bit numbers, possibly in the context of RSA decryption. </p>\n<ul>\n<li>Does any one recognize this pattern?  </li>\n<li>Is it maybe some kind of <code>Montgomery</code> multiplication (unlikely) ? </li>\n<li>Or some RSA obfuscation that someone recognizes?</li>\n</ul>\n<p>There are 2 multiplication loops. I marked them with <code>loop1</code> and <code>loop2</code>. <code>loop1</code> does the partial multiplication and addition I would expect. But how does the second loop make sense <em>mathematically</em>? It uses a seperate vector to multiply with. Does this accumulate into a  modulo operation? </p>\n<p>I converted the IDA compilation to a more readable representation below,\nthe original is at the end. Can anyone recognize a pattern?</p>\n<pre><code>struct mod {\n  int len;\n  uint32_t _pad0[64]; /* 4 */\n  uint32_t r[64];     /* 4 + (256*1) :offset-260  */\n  uint32_t _pad2[64]; /* 4 + (256*2) :offset-516  */\n  uint32_t _pad3[64]; /* 4 + (256*3) :offset-772  */\n  uint32_t _pad4[64]; /* 4 + (256*4) :offset-1028 */\n  int fac;            /* 4 + (256*5) :offset-1284 */\n};\n\n#define align8(c) (((uint64_t)(c)) &amp; (~0x7ULL))\n\nint64_t some_kind_of_mult(int32_t *acc , int32_t *a , int32_t *b, struct mod *n)\n{\n  int i0, i1, i2, j0 ;\n  uint32_t top;\n  uint64_t c0 = 0, c1 = 0, v0, v1, v2, v3, c01, c01_h;\n  intt64_t m1, res, topc0 = 0;\n\n  memset(acc,0,256);\n  res = 0;\n  l = n-&gt;len;\n\n  if ( !l )\n    return res;\n\n  top = topc0 = 0;\n\n  for (i0 = 0; i0 &lt; l; i0++)\n  {\n      /* loop1: multiply a[0..l] with partial b[i0], accumulate resule in acc[0..l] */\n      for (c1=0, i1=0; i1 &lt; l; i1++)\n      {\n          v1 = ((uint64_t)a[i1] * (uint64_t)b[i0]) + acc[i1] + c1;\n          acc[i1] = v1;\n          c1 = v1 &gt;&gt; 32;\n      }\n\n      top = (uint32_t)c1 + topc0;\n      c01 = c1 + topc0;\n\n      m1 = (uint32_t)(acc[0] * n-&gt;fac);\n      c2 = (m1 * (uint64_t)(n-&gt;r[0]) + acc[0]) &gt;&gt; 32;\n\n      /* loop2: do some acc[0..l] postprocessing involving some acc[i2-1] = .. acc[i2] ... calculcation */\n      for (i2 = 1; i2 &lt; l; i2++)\n      {\n          v2 = acc[i2] + c2 + (m1 * n-&gt;r[i2]);\n          acc[i2-1] = v2;\n          c2 = (v2 &gt;&gt; 32);\n      }\n\n      acc[l-1] = top + c2;\n      topc0 = (c01 &gt;&gt; 32) + ((top + c2) &gt;&gt; 32);\n  }\n\n  if ( !topc0 &amp;&amp; l-1 &gt;= 0 )\n  {\n      res = l-1;\n      if ( acc[l-1] &lt; n-&gt;r[l-1] )\n        /* possible error in IDA function */\n        return res;\n      if ( *v28 &lt;= v29 )\n        /* possible error in IDA function */\n        JUMPOUT(loc_BC46E10);\n  }\n\n  res &amp;= 0xffffffff00000000ULL;;\n  /* loop3: some final substraction on acc[0-l] */\n  for (j0 = 0; j0 &lt; l; j0++)\n  {\n      v3 = acc[j0] - (uint64_t)n-&gt;r[j0] - (uint32_t)res;\n      acc[j0] = v3;\n      res = -(v3 &gt;&gt; 32);\n  }\n\n  return res;\n}\n</code></pre>\n<p>Here is the original IDA decompile:</p>\n<pre><code> int64 fastcall sub_BC46730(_DWORD *a1, int64 a2, int64 a3, int64 a4)\n{\n    _DWORD *v4; // r9@1\n    signed __int64 v5; // rdi@1\n    __int64 v6; // rbp@1\n    __int64 result; // rax@1\n    unsigned int v8; // ecx@1\n    unsigned int v9; // er13@1\n    __int64 v10; // r10@2\n    unsigned __int64 v11; // rdi@3\n    __int64 v12; // r8@3\n    unsigned __int64 v13; // rax@4\n    unsigned __int64 v14; // rax@4\n    __int64 v15; // r14@5\n    unsigned __int64 v16; // r11@5\n    __int64 v17; // rax@5\n    unsigned __int64 v18; // r11@5\n    __int64 v19; // r8@5\n    unsigned __int64 v20; // r15@5\n    signed __int64 v21; // rdi@6\n    _DWORD *v22; // rcx@6\n    __int64 v23; // rax@7\n    unsigned __int64 v24; // rax@7\n    unsigned __int64 v25; // rax@7\n    __int64 v26; // rsi@9\n    unsigned __int64 v27; // rcx@11\n    unsigned int *v28; // rdi@14\n    unsigned int v29; // ebx@14\n    __int64 v30; // [sp+0h] [bp-40h]@2\n    int v31; // [sp+8h] [bp-38h]@2\n    int v32; // [sp+Ch] [bp-34h]@2\n    v4 = a1;\n    v5 = (signed __int64)(a1 + 2);\n    v6 = a4;\n    *(_QWORD *)(v5 - 8) = 0LL;\n    *(_QWORD *)(v5 + 240) = 0LL;\n    result = 0LL;\n    memset(\n        (void *)(v5 &amp; 0xFFFFFFFFFFFFFFF8LL),\n        0,\n        8 * ((unsigned __int64)((unsigned int)v4 - (v5 &amp; 0xFFFFFFF8) + 256) &gt;&gt; 3));\n    v8 = 0;\n    v9 = *(_DWORD *)v6;\n    if ( *(_DWORD *)v6 )\n    {\n        v10 = 0LL;\n        v31 = *(_DWORD *)(v6 + 1284);\n        v32 = v9 - 1;\n        v30 = v9 - 1;\n        do {\n            v11 = 0LL;\n            v12 = 0LL;\n            /* loop1: */\n            do {\n                v13 = *(_DWORD *)(a2 + v11) * (unsigned __int64)*(_DWORD *)(a3 + 4 * v10) + v4[v11 / 4] + v12;\n                v4[v11 / 4] = v13;\n                v11 += 4LL;\n                v14 = v13 &gt;&gt; 32;\n                v12 = (unsigned int)v14;\n            } while ( v11 != 4 * v30 + 4 );\n            v15 = (unsigned int)v14 + v8;\n            v16 = v14 + v8;\n            v17 = *v4;\n            v18 = v16 &gt;&gt; 32;\n            v19 = (unsigned int)(v17 * v31);\n            v20 = (v19 * (unsigned __int64)*(_DWORD *)(v6 + 260) + v17) &gt;&gt; 32;\n            if ( v9 &lt;= 1 )\n                goto LABEL_16;\n            v21 = v6 + 264;\n            v22 = v4;\n            /* loop2: */\n            do\n            {\n                v23 = v22[1];\n                v21 += 4LL;\n                ++v22;\n                v24 = v23 + v20 + v19 * *(_DWORD *)(v21 - 4);\n                *(v22 - 1) = v24;\n                v25 = v24 &gt;&gt; 32;\n                v20 = (unsigned int)v25;\n            }\n            while ( v21 != v6 + 4LL * (v9 - 2) + 268 );\n            ++v10;\n            v4[v30] = v15 + v25;\n            v8 = v18 + ((v15 + v25) &gt;&gt; 32);\n        }\n        while ( v9 &gt; (unsigned int)v10 );\n        v26 = 0LL;\n        if ( !v8 &amp;&amp; v32 &gt;= 0 )\n        {\n            result = v32;\n            v28 = &amp;v4[v32];\n            v29 = *(_DWORD *)(4LL * v32 + v6 + 260);\n            if ( *v28 &lt; v29 )\n                return result;\n            if ( *v28 &lt;= v29 )\n            LABEL_16:\n                JUMPOUT(loc_BC46E10);\n        }\n        LODWORD(result) = 0;\n        do\n        {\n            v27 = v4[v26] - (unsigned __int64)*(_DWORD *)(v6 + 4 * v26 + 260) - (unsigned int)result;\n            v4[v26++] = v27;\n            result = (unsigned int)-HIDWORD(v27);\n        }\n        while ( v9 &gt; (unsigned int)v26 );\n    }\n    return result;\n}\n</code></pre>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "211",
    "tags": [
        "ida",
        "binary-analysis"
    ],
    "user": "Konrad Eisele",
    "time": "Jun 8, 2018 at 21:37",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">The way I'd go about solving this would be by thoroughly reverse engineering this attached code. I know, we're in RE.SO so that ought to be a weird answer. I could do that for you, but where's the fun in that?! Voting to close, please ask specific questions showing your effort and describe specific challenged you've encountered.</span>",
            "time": null
        },
        {
            "user": "Konrad Eisele",
            "text": "<span class=\"comment-copy\">@NirIzr: I rephrased it a bit.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Thanks, it does look better but still feels like \"here's a chunk of code, please RE it for me\". Decompilation output isn't too good in this case and it may be confusing you. I honestly suggest you go through the process of writing this as C code. You'll see this is hardly as complex as it currently seem.</span>",
            "time": null
        },
        {
            "user": "Konrad Eisele",
            "text": "<span class=\"comment-copy\">@NirIzr: Did like you suggested. Can you spot some mathematical construct?</span>",
            "time": null
        },
        {
            "user": "Konrad Eisele",
            "text": "<span class=\"comment-copy\">@NirIzr: I think I found what it is (see posted answer). It is a CIOS Montgomery implementation.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The structure seems to resemble a Montgomery CIOS implementation</p>\n<p><a href=\"https://i.sstatic.net/5gJUp.jpg\" rel=\"nofollow noreferrer\"><img alt=\"CIOS Montgomery\" src=\"https://i.sstatic.net/5gJUp.jpg\"/></a></p>\n<p>From the paper on Researchgate: <a href=\"https://www.researchgate.net/profile/JV_Mccanny/publication/4123255_Coarsely_integrated_operand_scanning_CIOS_architecture_for_high-speed_Montgomery_modular_multiplication/links/56d9c15d08aebe4638bb9776/Coarsely-integrated-operand-scanning-CIOS-architecture-for-high-speed-Montgomery-modular-multiplication.pdf\" rel=\"nofollow noreferrer\">Coarsely Integrated Operand Scanning </a></p>\n<p>More references on CIOS Montgomery: <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1996/01/j37acmon.pdf\" rel=\"nofollow noreferrer\">https://www.microsoft.com/en-us/research/wp-content/uploads/1996/01/j37acmon.pdf</a></p>\n</div>",
            "votes": "4",
            "user": "Konrad Eisele",
            "time": "Jun 9, 2018 at 14:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">could you add some links/references? e.g. where is the screenshot from?</span>",
                    "time": null
                },
                {
                    "user": "Konrad Eisele",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky: Added the reference.</span>",
                    "time": null
                }
            ]
        }
    ]
}