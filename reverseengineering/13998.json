{
    "title": "*(lpCmd + somenumber)",
    "link": "https://reverseengineering.stackexchange.com/questions/13998/lpcmd-somenumber",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://i.sstatic.net/uF7KV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/uF7KV.png\"/></a></p>\n<h1>include </h1>\n<pre><code> int WinMain(HINSTANCE hlnst,HINSTANCE hPrev, LPSTR lpCmd,int nShow){\n\n\n\n       MessageBox(0,\"Insert argument\",\"\",0);\n       int i = 0;\n\n       for(i ; *(lpCmd+i)  ; i++ ){\n\n\n\n    }\n    if(!(i=*(lpCmd+2)-0x30)){\n            MessageBox(0,\"Success\",\"\",0);\n\n    }\n\n        MessageBox(0,\"Failed\",\"\",0);\n\nreturn 0;\n}\n</code></pre>\n<p>In this picture you will see the </p>\n<pre><code>   MOVSX ECX , BYTE PTR DS:[EAX+2]\n</code></pre>\n<p>FROM THE CODE *lpCmd is pointing at the address 00141F6B\nmy question is what does *(lpCmd +2) mean in this code?\ncan you tell me what this *(lpCmd+2) is pointing at? </p>\n</div>",
    "votes": "-1",
    "answers": 2,
    "views": "146",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "kingyum",
    "time": "Nov 20, 2016 at 4:49",
    "comments": [
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">*lpCmd is not pointing at anything, lpCmd is.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>eax is 141f6b</strong> in your screen shot<br/>\nso <strong>eax+2 = 141f6d</strong>  byte ptr ds:[eax+2] == *(BYTE *)141f6d == 0<br/>\nBYTE *(lpcmd +2 ) == BYTE *(141f6b + 2) == BYTE *(141f6d) == 0   </p>\n<p><a href=\"https://i.sstatic.net/QpYMx.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/QpYMx.png\"/></a> </p>\n<p>and the disassembly for the WinMain</p>\n<pre><code>CPU Disasm\nAddress  Hex&gt;Command                          Comments\n00EA1260 /$  SUB     ESP,68               ; lpcmd.00EA1260(guessed Arg1,Arg2,Arg3,Arg4)\n00EA1263 |.  MOV     EAX,[0EB8004]\n00EA1268 |.  XOR     EAX,ESP\n00EA126A |.  MOV     [ESP+64],EAX             ; ASCII \"wo0t\"\n00EA126E |.  PUSH    EBX\n00EA126F |.  MOV     EBX,[ESP+78]\n00EA1273 |.  LEA     EAX,[ESP+4]\n00EA1277 |.  PUSH    64                       ; /Arg3 = 64\n00EA1279 |.  PUSH    0                        ; |Arg2 = 0\n00EA127B |.  PUSH    EAX                      ; |Arg1 = ASCII \"wo0t\"\n00EA127C |.  CALL    00EA1F10                 ; \\lpcmd.00EA1F10\n00EA1281 |.  MOV     AL,[EBX]\n00EA1283 |.  ADD     ESP,0C\n00EA1286 |.  TEST    AL,AL\n00EA1288 |.  JZ      SHORT 00EA12B7\n00EA128A |.  PUSH    ESI\n00EA128B |.  PUSH    EDI\n00EA128C |.  LEA     EDI,[ESP+0C]\n00EA1290 |.  MOV     ESI,EBX\n00EA1292 |.  SUB     EDI,EBX\n00EA1294 |&gt;  /MOVSX   EAX,AL\n00EA1297 |.  |PUSH    EAX                     ; /Arg4 = ASCII \"wo0t\"\n00EA1298 |.  |PUSH    OFFSET 00EB1168         ; |Arg3 = ASCII \"%c\"\n00EA129D |.  |LEA     EAX,[ESI+EDI]           ; |\n00EA12A0 |.  |PUSH    64                      ; |Arg2 = 64\n00EA12A2 |.  |PUSH    EAX                     ; |Arg1 = ASCII \"wo0t\"\n00EA12A3 |.  |CALL    00EA1370                ; \\lpcmd.00EA1370\n00EA12A8 |.  |MOV     AL,[ESI+1]\n00EA12AB |.  |LEA     ESI,[ESI+1]\n00EA12AE |.  |ADD     ESP,10\n00EA12B1 |.  |TEST    AL,AL\n00EA12B3 |.^ \\JNZ     SHORT 00EA1294\n00EA12B5 |.  POP     EDI\n00EA12B6 |.  POP     ESI\n00EA12B7 |&gt;  MOVSX   EAX,BYTE PTR [EBX+2]\n00EA12BB |.  POP     EBX\n00EA12BC |.  SUB     EAX,30\n00EA12BF |.  PUSH    0                        ; /Type = MB_OK|MB_DEFBUTTON1|MB_APPLMODAL\n00EA12C1 |.  LEA     EAX,[ESP+4]              ; |\n00EA12C5 |.  PUSH    EAX                      ; |Caption = \"wo0t\"\n00EA12C6 |.  JNZ     SHORT 00EA12CF           ; |\n00EA12C8 |.  PUSH    OFFSET 00EB116C          ; |ASCII \"Success\"\n00EA12CD |.  JMP     SHORT 00EA12D4           ; |\n00EA12CF |&gt;  PUSH    OFFSET 00EB1174          ; |ASCII \"Failed\"\n00EA12D4 |&gt;  PUSH    0                        ; |hOwner = NULL\n00EA12D6 |.  CALL    [&lt;&amp;USER32.MessageBoxA&gt;]  ; \\USER32.MessageBoxA\n00EA12DC |.  MOV     ECX,[ESP+64]\n00EA12E0 |.  XOR     EAX,EAX\n00EA12E2 |.  XOR     ECX,ESP\n00EA12E4 |.  CALL    00EA13F6\n00EA12E9 |.  ADD     ESP,68\n00EA12EC \\.  RETN    10\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 21, 2016 at 19:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "kingyum",
                    "text": "<span class=\"comment-copy\">which part of dump represent [eax +2]?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>it is more of a C question.<br/>\nlpCmd is probably of type (char**) - a pointer to a string.<br/>\nEAX is set to point to the string itself. (type char*) The string is \"77\".<br/>\nAnd *(lpCmd+2) means the value of the third byte in the string, that in your case it the '\\0'. (the string terminator in C) So ECX==0.</p>\n<p>I think that the C code does not match the assembly code, but if I hazzard a guess the code compare the third character of the string with the length of it. If it match, then success. (i.e. \"773\", \"8846\")</p>\n</div>",
            "votes": "0",
            "user": "Shmuel Fomberg",
            "time": "Nov 21, 2016 at 10:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">no it doesnt compare with length it needs to be 0x30 aka ascii 0 at 3rd position in the argv[1]  ie some string like aa0bbx or dd0c0x etc etc  op probably posted a ripped out src and ripped things that needs to be in context or the code is plain shabby  there is no else clause for example after success so failed will always execute even when you succeed etc</span>",
                    "time": null
                }
            ]
        }
    ]
}