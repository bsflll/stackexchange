{
    "title": "Why PTRACE_POKEDATA returns I/O error?",
    "link": "https://reverseengineering.stackexchange.com/questions/27499/why-ptrace-pokedata-returns-i-o-error",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I learning usage of ptrace.<br/>\nI tried following simple example but raises a I/O Error.</p>\n<p>I would like to overwrite \"Hello, world\" (printing string) from other process.<br/>\nA target program prints \"Hello, world\" string until stop then I want to change this prints string from another program that use ptrace.</p>\n<p>However the ptrace program failed to POKEDATA with I/O Error.<br/>\nI have no idea why it failed.</p>\n<p>I have tried on:<br/>\nx86_64 Linux 5.11.<br/>\nAMD Ryzen 7 4750U</p>\n<p>ptrace code: (This ptrace code refer from <a href=\"http://0xcc.net/blog/archives/000077.html\" rel=\"nofollow noreferrer\">http://0xcc.net/blog/archives/000077.html</a> (Japanese))</p>\n<pre><code>#include &lt;assert.h&gt;\n#include &lt;sys/ptrace.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;stdio.h&gt;\n\nint\nmain (int argc, char **argv)\n{\n    assert(argc == 4);\n    pid_t pid = atoi(argv[1]);\n    void *addr = (void *)strtol(argv[2], NULL, 0);\n    void *word = (void *)strtol(argv[3], NULL, 0);\n\n    assert(ptrace(PTRACE_ATTACH, pid, NULL, NULL) == 0);\n    wait(NULL);\n    if (ptrace(PTRACE_POKEDATA, pid, addr, word) != 0) {\n        printf(\"Error: %s\\n\", strerror(errno));\n        return 0;\n\n    }\n    assert(ptrace(PTRACE_DETACH, pid, NULL, NULL) == 0);\n    return 0;\n}\n</code></pre>\n<p>target code:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\nint main() {\n    while (true) {\n        printf(\"%s\\n\", \"Hello, world\");\n    }\n}\n</code></pre>\n<p>A address of target string in target binary (in my environment):</p>\n<pre><code>Contents of section .rodata:\n 2000 01000200 48656c6c 6f2c2077 6f726c64  ....Hello, world\n</code></pre>\n<p>exection (shell):</p>\n<pre><code>./ptrace target_process_id 0x2004 0x60616263   //try to replace from Hell to abcdl \n</code></pre>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "401",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "KiYugadgeter",
    "time": "Apr 18, 2021 at 13:17",
    "comments": [
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<span class=\"comment-copy\">you need an actual address of this string in the process' memory</span>",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "<span class=\"comment-copy\">@Pawe≈Ç≈Åukasik How to get it?</span>",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<span class=\"comment-copy\">one way is, you can compile w/o PIE and the <code>objdump</code> will give you the address</span>",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<span class=\"comment-copy\"><code>gcc -no-pie -o target target.c</code> works for me</span>",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "<span class=\"comment-copy\">Oops I was misunderstandeding that pie and pic!   It works fine for me.  „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüüòÄ</span>",
            "time": null
        }
    ],
    "answers_data": []
}