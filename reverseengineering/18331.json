{
    "title": "Decrypting authorization PHP script",
    "link": "https://reverseengineering.stackexchange.com/questions/18331/decrypting-authorization-php-script",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Description</h1>\n<p>I asked for help on freelancing, for the finalization of the project in PHP. All this worked well until I needed to edit the authorization mechanism. Having opened the file, I found that it was encrypted. Tried to contact him, but unsuccessfully. Help me find the decoder, the files are flooded with pastest.</p>\n<h1>Samples:</h1>\n<blockquote>\n<p>The original file is covered with pattern: <a href=\"https://pastebin.com/etEWDu2S\" rel=\"nofollow noreferrer\">https://pastebin.com/etEWDu2S</a> eval(gzuncompress(base64_decode('</p>\n<p>The decrypted file (but the lines are obfuscated): <a href=\"https://pastebin.com/AWr6zGg1\" rel=\"nofollow noreferrer\">https://pastebin.com/AWr6zGg1</a> $GLOBALS['<em>1867101966</em>'][round(0)]</p>\n<p>Another file is route.php, there are generally three lines: <a href=\"https://pastebin.com/FmbSyYLZ\" rel=\"nofollow noreferrer\">https://pastebin.com/FmbSyYLZ</a> multiple eval(gzuncompress(base64_decode('</p>\n</blockquote>\n<p><em><strong>Happyness day!</strong></em></p>\n</div>",
    "votes": "-1",
    "answers": 4,
    "views": "1k",
    "tags": [
        "decryption",
        "deobfuscation",
        "php"
    ],
    "user": "Mikhail Desu",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Mikhail Desu",
            "text": "<span class=\"comment-copy\">I unfortunelly can't edit my post, maybe can i automatized decoding and deobf this code?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's your deobfuscated file, note that I do not give guarantees, there was some manual work done and I may have removed important lines, more on that below:</p>\n<pre><code>&lt;?\n\nif (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n\n$message = '';\nif (isset($_GET['data']) &amp;&amp; isset($_GET['a'])) {\n    $id  = check($_GET['a'], \"int\");\n    $STH = $pdo-&gt;prepare(\"SELECT `id`, `login`, `email` FROM `users` WHERE `id`=:id LIMIT 1\");\n    $STH-&gt;setFetchMode(PDO::FETCH_OBJ);\n    $STH-&gt;execute(array(\n        ':id' =&gt; $id\n    ));\n    $row = $STH-&gt;fetch();\n    if (empty($row-&gt;id)) {\n        show_error_page();\n    }\n    if ($_GET['data'] != md5($row-&gt;id . $conf-&gt;code . $row-&gt;email . date(\"Y-m-d\"))) {\n        $message = '&lt;p class=\\'text-danger\\'&gt;' . $messages['Link_not_active'] . '&lt;/p&gt;';\n    } else {\n        $password  = crate_pass(7, 1);\n        $password2 = convert_password($password, $conf-&gt;salt);\n        $STH = $pdo-&gt;prepare(\"UPDATE `users` SET `password`=:password WHERE `id`=:id LIMIT 1\");\n        if ($STH-&gt;execute(array(\n            ':password' =&gt; $password2,\n            ':id' =&gt; $id\n        )) == '1') {\n            include_once \"inc/notifications.php\";\n            $letter = recovery_letter($conf-&gt;name, $row-&gt;login, $password);\n            sendmail($row-&gt;email, $letter['subject'], $letter['message'], $pdo);\n            $message = '&lt;p class=\\'text-success\\'&gt;' . $messages['Recovery_pass1'] . $row-&gt;email . $messages['Recovery_pass2'] . '&lt;/p&gt;';\n            write_log(\"User reinstated pass #\" . $row-&gt;email);\n        } else {\n            $message        = '&lt;p class=\\'text-danger\\'&gt;' . $messages['Error_page'] . '&lt;/p&gt;';\n        }\n    }\n}\n\n$tpl-&gt;load_template('elements/title.tpl');\n$tpl-&gt;set(\"{title}\", $page-&gt;title);\n$tpl-&gt;set(\"{name}\", $conf-&gt;name);\n$tpl-&gt;compile('title');\n$tpl-&gt;clear();\n$tpl-&gt;load_template('head.tpl');\n$tpl-&gt;set(\"{title}\", $tpl-&gt;result['title']);\n$tpl-&gt;set(\"{site_name}\", $conf-&gt;name);\n$tpl-&gt;set(\"{image}\", $page-&gt;image);\n$tpl-&gt;set(\"{robots}\", $page-&gt;robots);\n$tpl-&gt;set(\"{type}\", $page-&gt;kind);\n$tpl-&gt;set(\"{description}\", $page-&gt;description);\n$tpl-&gt;set(\"{keywords}\", $page-&gt;keywords);\n$tpl-&gt;set(\"{url}\", $page-&gt;full_url);\n$tpl-&gt;set(\"{other}\", '');\n$tpl-&gt;set(\"{token}\", $token);\n$tpl-&gt;set(\"{cache}\", $conf-&gt;cache);\n$tpl-&gt;set(\"{template}\", $conf-&gt;template);\n$tpl-&gt;set(\"{site_host}\", $site_host);\n$tpl-&gt;compile('content');\n$tpl-&gt;clear();\n\n$menu = $tpl-&gt;get_menu($pdo);\n$nav                 = array(\n    $PI-&gt;to_nav('main', 0, 0),\n    $PI-&gt;to_nav('recovery', 1, 0)\n);\n\n$nav                 = $tpl-&gt;get_nav($nav, 'elements/nav_li.tpl');\ninclude_once \"inc/not_authorized.php\";\n$tpl-&gt;load_template('/index/recovery.tpl');\n$tpl-&gt;set(\"{site_host}\", $site_host);\n$tpl-&gt;set(\"{template}\", $conf-&gt;template);\n$tpl-&gt;set(\"{message}\", $message);\n$tpl-&gt;compile('content');\n$tpl-&gt;clear();\n</code></pre>\n<p>I wrote a small Python script to get rid of the annoying <code>round()</code> calls. It simply uses a regex to find all non-nested <code>round(...)</code> calls, dumps a small PHP script, runs PHP on it and retrieves the output because I didn't trust Python's <code>round</code> to be perfectly equal in corner cases.</p>\n<p>The script:</p>\n<pre><code>#!/usr/bin/python\n\nimport subprocess\nimport re\nimport sys\n\ndef php_eval(code):\n    code = \"&lt;?php echo(\" + code + \"); ?&gt;\"\n    open(\"/tmp/eval\",\"w\").write(code)\n    return subprocess.check_output([\"php\",\"/tmp/eval\"]).decode(\"ascii\")\n\ndef deob(fname):\n    obf = open(fname,\"r\").read()\n\n#    while True:\n#        m = re.search(r'\\[round.+?\\]',obf)\n#        if m:\n#            s = m.group(0)\n#            print(\"Matched %s\" % s)\n#            repl = php_eval(s[1:-1])\n#            print(\"Replacing %s with %s\" % (s,repl))\n#            obf = obf.replace(s,\"[\"+repl+\"]\")\n#        else:\n#            break\n\n#    while True:\n#        m = re.search(r'\\$GLOBALS\\[\\'_174350175_\\'\\]\\[\\d+?\\]',obf)\n#        if m:\n#            s = m.group(0)\n#            obf = obf.replace(s,\"round\")\n#        else:\n#            break\n\n    while True:\n        m = re.search(r'round\\([^\\(]+?\\)',obf)\n        if m:\n            s = m.group(0)\n            repl = php_eval(s)\n            print(\"Replacing %s with %s\" % (s,repl))\n            obf = obf.replace(s,repl)\n        else:\n            break\n\n\n    return obf\n\nplain = deob(sys.argv[1])\nopen(sys.argv[2],\"w\").write(plain)\n</code></pre>\n<p>Then I threw the code into a PHP beautifier: <a href=\"http://www.phpformatter.com/\" rel=\"nofollow noreferrer\">http://www.phpformatter.com/</a></p>\n<p>Then the manual part.</p>\n<p>There are some patterns the obfuscator creates:</p>\n<pre><code>while (3171 - 3171)\n    bin2hex($seneiuhtrbbit, $likgfowocfbgko, $_SESSION);\n</code></pre>\n<p>while loops that never execute.</p>\n<pre><code>if ((3165 ^ 3165) &amp;&amp; preg_split($seneiuhtrbbit))\n    fgetss($pdo, $nav);\n</code></pre>\n<p>if clauses that never execute because the 1st part evaluates to false already.</p>\n<pre><code>(3253 - 3253 + 3158 - 3158) ? strnatcmp($pdo, $letter, $password) : mt_rand(806, 3253);\n</code></pre>\n<p>ternary operator usage that effectively is a nop (condition evaluates to false, making it call <code>mt_rand</code>)</p>\n<p>And some others. I removed those manually, which gives the above script.</p>\n<p>If you want to deobfuscate the <code>route.php</code>, you may want to uncomment the blocks in above script, as it adds another layer of <code>rounds</code> but I didn't continue. You would also need to text-replace the function calls back in from the 2nd GLOBAL array.</p>\n</div>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "May 23, 2018 at 19:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mikhail Desu",
                    "text": "<span class=\"comment-copy\">You is genious, f*cking great!!! Can i use this script on Windows system?</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">Yes, a basic Python 3.x installation will run the script but you need to adjust some things. The <code>php_eval</code> function also expects PHP to be installed and callable as just <code>php somefile.php</code> from the command line. It also uses a Linux path <code>/tmp/eval</code> for its temporary file which you would need to adjust, just point it somewhere it may write.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>use a script like this to get a beautified php code </p>\n<p>edit \ndo not use jsbeautier  install pear and use PHP_Beautifier instead \nthere are lot of white space differences between PHP_Beautifier and jsbeautifier\nsome of them are fatal like below or better use one of the online services like <strong><a href=\"https://www.unphp.net/\" rel=\"nofollow noreferrer\">unphp</a></strong></p>\n<pre><code>$tpl - &gt; $pdo  instead of $tpl-&gt;$pdo (notice the space between - &gt; which   \nwould not let php compile the script \n</code></pre>\n<p>commented out the jsbeautifier part in the script below</p>\n<pre><code>import sys\nimport base64\nimport zlib\nimport jsbeautifier\n\nf1 = open(sys.argv[1],\"rb\")\nf2 = open(sys.argv[2],\"wb\")\nf3 = open(sys.argv[3],\"wb\")\n#f4 = open(sys.argv[4],\"wb\")\nbase64.decode(f1,f2)\nf1.close()\nf2.close()\nf2 = open(sys.argv[2],\"rb\")\ndat = f2.read()\nf2.close()\ndecom = zlib.decompress(dat)\nf3.write(decom)\nf3.close()\n#f3 = open(sys.argv[3],\"rb\")\n#uglyjs=f3.read()\n#f3.close()\n\n#beaujs = jsbeautifier.beautify(uglyjs)\n#f4.write(beaujs)\n#f4.close()\n</code></pre>\n<p>usage copy the base64 encoded string to a file say b64.dat</p>\n<pre><code>:\\&gt;xxd -l 10 b64.dat\n0000000: 6546 3746 572f 7554 3238                 eF7FW/uT28\n</code></pre>\n<p>and excute the script like </p>\n<pre><code>:\\&gt;python decodebase64.py b64.dat B64.DEC B64.UJS B64.PHP\n\n\n:\\&gt;HEAD B64.PHP -n 5\nif (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n$message = '';\n</code></pre>\n<p>you can also setup an apache and run the file in phpdbg to evaluate things </p>\n<p>hope you have other template files in proper directories it tries to load some some template files like elements\\xxx.tpl</p>\n<p>foodown.php is the content of first link in your query split into multiple lines<br/>\nlike $a = base64_xxx<br/>\n$b = gzunzip($a)<br/>\neval($b)  </p>\n<pre><code>:\\&gt;phpdbg -p* foodown.php\nfunction name: (null)\nL1-5 {main}() C:\\Users\\XXX\\Desktop\\foodown.php - 0x1a7e000 + 10 ops\n L2    #0     INIT_FCALL&lt;1&gt;           64                   \"base64_decode\"\n L2    #1     SEND_VAL                \"eF7FW/uT28aR/lcYZ\"+ 1\n L2    #2     DO_ICALL                                                          @0\n L2    #3     ASSIGN                  $a                   @0\n L3    #4     INIT_FCALL&lt;1&gt;           64                   \"gzuncompress\"\n L3    #5     SEND_VAR                $a                   1\n L3    #6     DO_ICALL                                                          @2\n L3    #7     ASSIGN                  $b                   @2\n L4    #8     INCLUDE_OR_EVAL&lt;1&gt;      $b\n L5    #9     RETURN&lt;-1&gt;              1\n[Script ended normally]\n\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "May 24, 2018 at 17:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mikhail Desu",
                    "text": "<span class=\"comment-copy\">Thank's u! It's unreal amazing! You is best php guy! Can i automatic this calculating, like <code>round(round(0) + 1.75 + 1.75 + 1.75 + 1.75)</code> and deobf this string to real code?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">use notepad++ hi ctrl+alt+b to select everything between braces  make it a variable like $deob1= (round(.......ro...ro...) and evaluate that and replace the original</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not that hard task as one can image, only a bit tedious. </p>\n<p>First, you should reformat those files to have some of the structure reconstructed</p>\n<p><a href=\"https://gist.github.com/pawlos/bd3838d04cbbe094e534c5bd8b532b69\" rel=\"nofollow noreferrer\">https://gist.github.com/pawlos/bd3838d04cbbe094e534c5bd8b532b69</a></p>\n<p>With only such small task you can see some SQL queries that go to the DB for user and password data. </p>\n<p>From that, you can start renaming the obfuscated variables or converting those <code>round(round(0) + 1.75 + 1.75 + 1.75 + 1.75)</code> to actual numerical values (<code>7</code> in this case).</p>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "May 23, 2018 at 8:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mikhail Desu",
                    "text": "<span class=\"comment-copy\">Thank`s! Can i make automatic this process?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I guess you could try to automate this somehow but probably it would require more time than calculating it once and then find&amp;replace</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>adding another answer because this contains substantially more info and might mess up the earlier answer</p>\n<p><strong>contents of directory pre experiment</strong><br/>\n32xxxx.*php.txt is from unphp.net<br/>\netE.*txt is content of original posts first link<br/>\nb64.dat is the base64 string without quotes from the etE.*txt file   </p>\n<p>the other 2 are python scripts    </p>\n<pre><code>:\\&gt;ls\n317ca73f142f83e85c24c22cb66c59c7_php.txt  decodebase64.py  findround.py\nb64.dat                                   etEWDu2S.txt\n</code></pre>\n<p>contents of python script that recursively replaces round() functions<br/>\nuses subprocess module and evaluates the round() using  <strong>PHP -r</strong> </p>\n<pre><code>:\\&gt;cat findround.py\nimport sys\nimport subprocess\n\nif( len(sys.argv) != 2):\n    print(\"usage \"+ sys.argv[0] + \" \\\"path to infile\\\"\")\n    sys.exit();\n\nprint \"opening \" + sys.argv[1]\ninfile = open(sys.argv[1] , \"r\")\nprint \"reading all the lines\"\ndata = infile.readlines();\nprint \"closing the input file\"\ninfile.close();\nprint \"total number of lines read = %d\" % len(data)\n\nfor i in range(0,len(data),1):\n    pos = data[i].rfind(\"round(\")\n    if(pos == -1):\n        continue\n    else:\n        substrobrace= data[i][pos:]\n        cbpos = substrobrace.find(\")\")\n        #print substrobrace[:cbpos+1]\n        commandline = \"php -r \" +\"\\\"print \" + substrobrace[:cbpos+1] +  \";\\\"\"\n        repl = subprocess.check_output( commandline )\n        data[i] = data[i].replace(substrobrace[:cbpos+1] , repl)\n        #print data[i]\n        while (pos != -1):\n            pos = data[i].rfind(\"round(\")\n            if(pos == -1):\n                break\n            else:\n                substrobrace= data[i][pos:]\n                cbpos = substrobrace.find(\")\")\n                #print substrobrace[:cbpos+1]\n                commandline = \"php -r \" +\"\\\"print \" + substrobrace[:cbpos+1] +  \";\\\"\"\n                repl = subprocess.check_output( commandline )\n                data[i] = data[i].replace(substrobrace[:cbpos+1] , repl)\n                #print data[i]\noutfilename = sys.argv[1] +\".deob\"\noutfile = open(outfilename,\"w\")\noutfile.writelines(data)\noutfile.close()\n</code></pre>\n<p>contents of python scripts that de-obfuscates the etE.*.txt file<br/>\nagain uses supprocess to beautify the single line eval();</p>\n<pre><code>:\\&gt;cat decodebase64.py\nimport sys\nimport base64\nimport zlib\nimport time\nimport subprocess\n\nf1 = open(sys.argv[1],\"rb\")\nf2 = open(sys.argv[2],\"wb\")\nf3 = open(sys.argv[3],\"wb\")\nbase64.decode(f1,f2)\nf1.close()\nf2.close()\nf2 = open(sys.argv[2],\"rb\")\ndat = f2.read()\nf2.close()\ndecom = zlib.decompress(dat)\ntagdecom = \"&lt;?php \" + decom + \"?&gt;\"\nf3.write(tagdecom)\nf3.close()\ntime.sleep(5)\ncommandline = \"c:\\\\php\\\\php_beautifier.bat \" + sys.argv[3] + \" \"+ sys.argv[3] +\".php\"\nres = subprocess.check_output( commandline )\ndeobcmdline = \"python findround.py \" + sys.argv[3] +\".php\"\nres = subprocess.check_output( deobcmdline )\n</code></pre>\n<p>executing the decodebase64.py with arguments<br/>\n(this file calls the other script after some timeout so you get a deobfuscated     file in one go with all the round() replaced) also diffed with output from   unphp.net for sanity check<br/>\n(<strong>js beautifier module in earlier my answer messes ugly php with white space error</strong>)     </p>\n<pre><code>:\\&gt;decodebase64.py b64.dat b64.dec b64.ugly\n\n:\\&gt;diff b64.ugly.php 317ca73f142f83e85c24c22cb66c59c7_php.txt\n0a1,2\n&gt; /* Decoded by unphp.net */\n&gt;\n</code></pre>\n<p>checking if the deobfuscated php file is compilable or not</p>\n<pre><code>:\\&gt;phpdbg b64.ugly.php.deob\n[Welcome to phpdbg, the interactive PHP debugger, v0.5.0]\nTo get help using phpdbg type \"help\" and press enter\n[Please report bugs to &lt;http://bugs.php.net/report.php&gt;]\n[Successful compilation of C:\\b64.ugly.php.deob]\nprompt&gt; q\n</code></pre>\n<p>contents of the deobfuscated file with round() replaced with actual values</p>\n<pre><code>:\\&gt;head b64.ugly.php.deob\n&lt;?php if (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n$message = '';\nif ((3165 ^ 3165) &amp;&amp; preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\n(3253 - 3253 + 3158 - 3158) ? strnatcmp($pdo, $letter, $password) : mt_rand(806, 3253);\nif (isset($_GET['data']) &amp;&amp; isset($_GET['a'])) {\n    $id = check($_GET['a'], \"int\");\n    $STH = $pdo-&gt;prepare(\"SELECT `id`, `login`, `email` FROM `users` WHERE `id`=:id LIMIT 1\");\n\n:\\&gt;\n</code></pre>\n<p>as you can see and as john posted in his answer this now contains<br/>\nfake if() / while() / ternary operators / which will never execute \nnotice if((3165 ^ 3165) &amp;&amp; where the first condition evaluates to 0 so will never execute the fgetss =()<br/>\ntry php -a to open an interactive php shell and try evaluating the lines one by one<br/>\nnotice i modified the if condition to show the execution of second condition \nwhich has a wrong numbers of argument<br/>\nprototype of  preg_split is <strong>preg_split(regex,string,flag);</strong></p>\n<pre><code>:\\&gt;php -a\nInteractive shell\n\nphp &gt; if ((3165 ^ 3165) &amp;&amp; preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\nphp &gt; if ((3165 ^ 3164) &amp;&amp; preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\n\nWarning: preg_split() expects at least 2 parameters, 1 given in php shell code on line 1\nphp &gt;    \n</code></pre>\n<p>so you need to pluck them out manually </p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "May 25, 2018 at 8:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}