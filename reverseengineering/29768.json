{
    "title": "Why does the \"MOV DWORD PTR ds:0xdeadbeef\" instruction dereference the 0xdeadbeef address?",
    "link": "https://reverseengineering.stackexchange.com/questions/29768/why-does-the-mov-dword-ptr-ds0xdeadbeef-instruction-dereference-the-0xdeadbee",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering a binary and I'm confused, because my theoretical knowledge is currently clashing with what's actually happening.</p>\n<p>I thought that this instruction writes the value 0xdeadbeef into edx:</p>\n<pre><code>mov edx, DWORD PTR ds:0xdeadbeef\n</code></pre>\n<p>And I thought that this instruction dereferences that address 0xdeadbeef and writes whatever DWORD value is stored at that address into edx:</p>\n<pre><code>mov edx, DWORD PTR ds:[0xdeadbeef]\n</code></pre>\n<p>However, in reality, running this instruction:</p>\n<pre><code>mov edx, DWORD PTR ds:0x804bdf4\n</code></pre>\n<p>Results in the value of edx being:</p>\n<pre><code>edx = 0xb73fc115\n</code></pre>\n<p><code>0xb73fc115</code> is the value that's stored at the address <code>0x804bdf4</code>:</p>\n<pre><code>x 0x804bdf4\n0x804bdf4 &lt;gContents&gt;: 0xb73fc115\n</code></pre>\n<p>So that means that the address was dereferenced, even though the assembly didn't contain any square brackets. I thought thatsquare brackets signified a dereferencing operation. What have I misunderstood?</p>\n<p>I'm using GDB</p>\n<hr/>\n<p>Update: I just tested it on radare2, and it shows the instruction in the format that I would expect</p>\n<pre><code>mov edx, dword [obj.gContents]\n</code></pre>\n<p>I also tested it with objdump, and the result was the same as with GDB. I assume it's some sort of syntax I don't currently understand?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Nopslide__",
    "time": "Dec 23, 2021 at 14:22",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">dword ptr: = sq bkts. [. ]  ptr means pointer it dereferences what is in the address 0xdeadbeef and moves it to register. it will mov reg , const for direct write not mov (extend) reg, size ptr addr</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The default assembler syntax used by IDA (<a href=\"https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference\" rel=\"nofollow noreferrer\">MASM</a> based) does not use square brackets when the dereference is unambiguous. In your case the second operand is obviously a memory address from which the value is read, and DWORD PTR is another hint that a dereference is taking place. If you prefer to always see square brackets, you can switch to the TASM assembler in <em>Options &gt; General..., Analysis</em>.</p>\n<p><a href=\"https://i.sstatic.net/RjMqE.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA Options\" src=\"https://i.sstatic.net/RjMqE.png\"/></a></p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Dec 24, 2021 at 15:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nopslide__",
                    "text": "<span class=\"comment-copy\">But what about this one: <code>mov eax,DWORD PTR [rax]</code>. Why are the brackets not omitted in that example as well? Assuming DWORD PTR tells you a dereference is taking place, it should be unambiguous as well?</span>",
                    "time": null
                },
                {
                    "user": "Nopslide__",
                    "text": "<span class=\"comment-copy\">Or is it the <code>ds:</code> part that makes it unambiguous?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if the operand has square brackets it is dereference<br/>\nif the operator is preceded by Size PTR segment: then it is dereference<br/>\nif the size of source operand is not the same as destination then the moves will need a specific extension<br/>\neither Zero Extend or Sign Extend</p>\n<p>in some cases (IDA mostly) will display</p>\n<pre><code>.text:00404EB1                 movzx   eax, ds:byte_40523D[eax] \n</code></pre>\n<p>which is equivalent to</p>\n<pre><code>0F B6 80 3D 52 40 00    movzx eax, byte ptr [eax + 0x40523d]\n</code></pre>\n<p>in this case eax will hold a switch case and the constant is a jumptable</p>\n<p>for direct writes the operation it will be</p>\n<pre><code>mov reg , const \n</code></pre>\n<p>like</p>\n<pre><code>mov edx,0xdeadbeef with no other decorations added\n</code></pre>\n<p><a href=\"http://shell-storm.org/online/Online-Assembler-and-Disassembler/\" rel=\"nofollow noreferrer\">you may go to this site for assembling and disassembling tests of the following snippet</a></p>\n<pre><code>mov edx, dword ptr ds:[0xdeadbeef]\nmovzx edx, word ptr ds:[0xdeadbeef]\nmovzx edx, byte ptr ds:[0xdeadbeef]\nmovsx edx, word ptr ds:[0xdeadbeef]\nmovsx edx, byte ptr ds:[0xdeadbeef]\n\nnop\nnop\n\nmov edx, dword ptr ds:0xdeadbeef\nmovzx edx, word ptr ds:0xdeadbeef\nmovzx edx, byte ptr ds:0xdeadbeef\nmovsx edx, word ptr ds:0xdeadbeef\nmovsx edx, byte ptr ds:0xdeadbeef\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 23, 2021 at 17:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}