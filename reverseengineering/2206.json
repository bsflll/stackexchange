{
    "title": "Can anyone here show me the binary opcodes for these x86 assembly instructions? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/2206/can-anyone-here-show-me-the-binary-opcodes-for-these-x86-assembly-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> <a href=\"/posts/2206/edit\">Update the question</a> so it's <a href=\"/help/on-topic\">on-topic</a> for Reverse Engineering Stack Exchange.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2013-06-09 01:39:14Z\">11 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/2206/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I want the exact binary opcodes executable to CPU directly.</p>\n<pre><code> [BITS 16]      ; 16 bit code generation\n[ORG 0x7C00]   ; Origin location\n\n; Main program\nmain:       ; Label for the start of the main program\n\n mov ax,0x0000  ; Setup the Data Segment register\n        ; Location of data is DS:Offset\n mov ds,ax  ; This can not be loaded directly it has to be in two steps.\n        ; 'mov ds, 0x0000' will NOT work due to limitations on the CPU\n\n mov si, HelloWorld ; Load the string into position for the procedure.\n call PutStr    ; Call/start the procedure\n\njmp $       ; Never ending loop\n\n; Procedures\nPutStr:     ; Procedure label/start\n ; Set up the registers for the interrupt call\n mov ah,0x0E    ; The function to display a chacter (teletype)\n mov bh,0x00    ; Page number\n mov bl,0x07    ; Normal text attribute\n\n.nextchar   ; Internal label (needed to loop round for the next character)\n lodsb      ; I think of this as LOaD String Block \n        ; (Not sure if thats the real meaning though)\n        ; Loads [SI] into AL and increases SI by one\n ; Check for end of string '0' \n or al,al   ; Sets the zero flag if al = 0 \n        ; (OR outputs 0's where there is a zero bit in the register)\n jz .return ; If the zero flag has been set go to the end of the procedure.\n        ; Zero flag gets set when an instruction returns 0 as the answer.\n int 0x10   ; Run the BIOS video interrupt \n jmp .nextchar  ; Loop back round tothe top\n.return     ; Label at the end to jump to when complete\n ret        ; Return to main program\n\n; Data\n\nHelloWorld db 'Hello World',13,10,0\n\n; End Matter\ntimes 510-($-$$) db 0   ; Fill the rest with zeros\ndw 0xAA55       ; Boot loader signature\n</code></pre>\n<p>opcodes for x86 Intel Architecture; must be 16-bit opcodes ONLY.</p>\n</div>",
    "votes": "-5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "machine-code"
    ],
    "user": "assembling girl",
    "time": "11 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">What's wrong with using an assembler?</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">What are you talking about?  Define \"binary opcode\" precisely.</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">Can you, please, explain us why you cannot use an assembler and a disassembler to get back the opcodes? Really, I cannot understand what's the point of the question.</span>",
            "time": null
        },
        {
            "user": "Robert Cartaino",
            "text": "<span class=\"comment-copy\">This site is to ask about principles of Reverse Engineering, but we are not here perform work solicited in this manner. Sorry about the confusion, but I have to close this as off topic.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>C:\\&gt;debug\n-a\n1448:0100 mov ax,0\n1448:0103\n-u 100 102\n1448:0100 B80000        MOV     AX,0000\n-q\n</code></pre>\n<p>C:&gt;echo opcode for mov ax,0000 is b80000 and so on</p>\n<pre><code>**opcode for mov ax,0000 is b80000 and so on**\n</code></pre>\n<p>C:&gt;</p>\n<p>@till</p>\n<p>tool <code>Debug.exe</code><br/>\nmethod <code>assembled and disassembled</code> the mnemonic </p>\n<p>@nomik\nollydbg will <code>not output 16 bit opcodes</code> since it is <code>32bit debugger</code> you wold need a 16 bit application that assembles and disassembles the mnemonic to output 16 bit opcodes like \n<code>Debug.Exe(inbox),Td.exe(ex borland),grdb.exe(ladSoft),trw2000.exe (google site:tuts4you)</code> etc</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 10, 2013 at 7:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Till",
                    "text": "<span class=\"comment-copy\">Even though this would also match what I made out of this <i>question</i>, providing some more details on what you were doing, which tool you were using etc. could improve this answer a lot.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An easy way, is to use <a href=\"http://www.ollydbg.de/\" rel=\"nofollow noreferrer\">OllyDbg</a> to write the assembly instructions you want by editing an executable being debugged.The opcodes are shown between the address and the assembly instructions.</p>\n<p>I hope i understood the (god make it a) question (better called 'request').</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}