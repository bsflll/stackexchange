{
    "title": "How to generate IDA FLIRT signatures for Qt 5.5.1",
    "link": "https://reverseengineering.stackexchange.com/questions/17249/how-to-generate-ida-flirt-signatures-for-qt-5-5-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer an executable which uses Qt 5.5.1 graphic library and is compiled with MinGw 4.9.2. When i open it with IDA pro 6.8 all of the code appears as user code, without any recognised function. To help ida recognise the Qt functions i tryied to create the flirt signatures of the main Qt libraries. This resulted in lots and lots of collisions (sometimes all functions colliding). After trying to apply these new signatures with ida i don't get any match in the executable.</p>\n<p>How can i generate flirt signatures for Qt 5.5.1 libraries?</p>\n<p>**Edit:**I am working under windows and I am working with a windows executable</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "flirt-signatures",
        "qt"
    ],
    "user": "Rocco Mancin",
    "time": "Jan 23, 2018 at 11:58",
    "comments": [
        {
            "user": "LÃ©o Lam",
            "text": "<span class=\"comment-copy\">Not an answer to your question, but I've found <a href=\"https://github.com/joxeankoret/diaphora\" rel=\"nofollow noreferrer\">Diaphora</a> to be quite useful and more powerful for recognising functions. You will still have to build Qt using the same toolchain to have more accurate matches though.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to build Qt 5.5.1 using MinGw 4.9.2. and guess all the build options that the developer used originally. Then use FLAIR for you IDA version to generate pat files from .a libraries. Then compile pat files into sig files. Put sig files to \\IDA\\sig and try to apply them.</p>\n</div>",
            "votes": "3",
            "user": "Anton Kukoba",
            "time": "Jan 23, 2018 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rocco Mancin",
                    "text": "<span class=\"comment-copy\">I tried to generate the signature file but it found about 7000 functions all colliding together, so a quite useless signature</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">yep there are a lot of small functions which you won't be able to detect by signatures</span>",
                    "time": null
                },
                {
                    "user": "Rocco Mancin",
                    "text": "<span class=\"comment-copy\">Is there a possibility to \"mark\" these small functions to at least know they belong to a library instead as being user code?</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">I'm not sure, maybe there's some way. I haven't tried to do so. Maybe there's something in FLAIR documentation.</span>",
                    "time": null
                }
            ]
        }
    ]
}