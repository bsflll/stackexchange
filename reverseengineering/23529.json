{
    "title": "How can I find the real function that *(_DWORD *)v2 + 24) points to?",
    "link": "https://reverseengineering.stackexchange.com/questions/23529/how-can-i-find-the-real-function-that-dword-v2-24-points-to",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can I find the real function that  <code>*(_DWORD *)v2 + 24)</code> points to?</p>\n<pre><code>(*(void (__fastcall **)(int, int))(*(_DWORD *)v2 + 24))(v2, v4);\n\nint __fastcall sub_1(int a1, int a2)\n{\n  int v2; // r4@1\n  int v3; // r5@1\n  int v4; // r6@1\n  int v5; // r0@2\n  int v6; // r0@2\n  unsigned int v7; // r0@4\n  int v8; // r5@8\n\n  v2 = a2;\n  v3 = a1;\n  sub_2(a2);\n  v4 = *(_BYTE *)(sub_3(*(_DWORD *)(v3 + 1684)) + 13);\n  (*(void (__fastcall **)(int, int))(*(_DWORD *)v2 + 24))(v2, v4);\n  if ( v4 )\n  {\n    (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v2 + 56))(v2, *(_DWORD \n</code></pre>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Tragoal",
    "time": "Dec 17, 2021 at 18:38",
    "comments": [
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">Inside the function, the address of the function you are looking for is <code>v2</code> + <code>sizeof(*_DWORD)</code>*24. This typically means: v2+0x60 on a 32-bit program where a pointer size is 4 bytes, and double that in a 64-bit system. v2 = a2, which is the second int passed to <code>sub_1</code>, probably in register EDX, because it is a __fastcall type func. The first line of your code also calls a function pointer, but I cannot see which scope it belongs to.</span>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<span class=\"comment-copy\">its address is in the <code>a2</code> variable</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The key thing is that you're likely dealing with a C++ object and these are roughly structured as follows:</p>\n<pre><code>void* vtable;\nvoid* param1;\n...\netc\n</code></pre>\n<p>Inside the vtable it'll look like this:</p>\n<pre><code>void* func1;\nvoid* func2;\n</code></pre>\n<p>So you'll want to see what gets passed into <code>a2</code>, you'll probably find something like this:</p>\n<pre><code>v1 = operator new(0x60);\n*v1 = offset XXXXX;\n</code></pre>\n<p>...</p>\n<p>This is where the class gets initialized. Find this and you find what's getting passed in.</p>\n<p>Keep in mind the reason the code is using virtual functions is likely to take advantage of inheritance, so there could be multiple classes that get passed to this. If you have RTTI information in the binary you can use this to give you clues â€“ these should include the class name, function names and function signatures.</p>\n</div>",
            "votes": "3",
            "user": "MarianD",
            "time": "Dec 19, 2021 at 22:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">RTTI rarely includes function names as it is only needed for telling apart classes, so at most you'll get class names (but this may be compiler dependent).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A __fastcall function gets its first two arguments in ECX and EDX.\n<code>int __fastcall sub_1(int a1, int a2)\n{\n  int v2;\n  v2 = a2; //v2 = EDX\n  ...\n</code>\nThis line may change the address pointed to by <strong>a2</strong>, if it happens to be a pointer, but not the value of <strong>a2</strong> itself. However, after this line EDX may have changed:</p>\n<p><code>sub_2(a2);</code></p>\n<p>In this line:</p>\n<p><code>(*(void (__fastcall **)(int, int))(*(_DWORD *)v2 + 24))(v2, v4);</code></p>\n<p>the relevant part is:</p>\n<p><code>(*(_DWORD *)v2 + 24))</code></p>\n<p>v2 is treated as a _DWORD pointer, which means its size is that of a pointer, typically 4 bytes. So, v2+24, treated as a pointer-sized variable is <code>v2+24*4</code>.\nThis value is then dereferenced and treated as function pointer.</p>\n<p>The function address is the _DWORD <strong>value</strong> found at <code>[v2+0x60]</code></p>\n</div>",
            "votes": "1",
            "user": "Yotamz",
            "time": "Mar 26, 2020 at 13:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}