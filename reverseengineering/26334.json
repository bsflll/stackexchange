{
    "title": "x64dbg or alternative: Run to selection while storing all ran opcodes",
    "link": "https://reverseengineering.stackexchange.com/questions/26334/x64dbg-or-alternative-run-to-selection-while-storing-all-ran-opcodes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to trace a function, but unfortunately that function is huge and has lots and lots of jumps to other locations, making it almost impossible to trace for humans. I know the entry point and the exit point of the function. I would like a way to be able to run the function and see all of the opcodes that were executed afterwards so I can manually recreate the function later in c++. It will also help me find exactly where the function is crashing (since it would be last executed code) when it crashes.\nI've tried the tracing method in x64dbg but that would not record opcodes that I didn't manually walk over.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "x64dbg",
        "x86-64",
        "assembly"
    ],
    "user": "thethiny",
    "time": "Nov 18, 2020 at 18:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On Windows <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview\" rel=\"nofollow noreferrer\">Travel Debugging (TTD)</a> is a perfect use case for this scenario.</p>\n<p>To use TTD, you need to run the debugger elevated. Install <a href=\"https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86?activetab=pivot:overviewtab\" rel=\"nofollow noreferrer\">WinDbg Preview</a> from Windows 10 store using an account that has administrator privileges and use that account when recording in the debugger. In order to run the debugger elevated, select and hold (or right-click) the WinDbg Preview icon in the Start menu and then select More &gt; Run as Administrator.</p>\n<p>If you need to run on system without Windows 10 I have used it on Windows 8.1/Server 2012 and later by first installing on windows 10 then copying the installed files to another system. As a normal administrator account doesn't have access to the files I copy them running as SYSTEM Account using <strong><a href=\"http://live.sysinternals.com/psexec.exe\" rel=\"nofollow noreferrer\">psexec</a> -sid cmd.exe</strong> then copy to a folder with command such as <code>robocopy \"C:\\program files\\WindowsApps\\Microsoft.WinDbg_1.2007.6001.0_neutral__8wekyb3d8bbwe\" \"C\\windbgx\" * /s</code></p>\n<p>To take trace:</p>\n<ol>\n<li>In WinDbg Preview, select File &gt; Start debugging &gt; Launch executable (advanced).</li>\n<li>Enter the path to the user mode executable that you wish to record or select Browse to navigate to the executable.</li>\n<li>Check the Record process with Time Travel Debugging box to record a trace when the executable is launched.</li>\n</ol>\n<p>You can set breakpoints, create timelines of exceptions/breakpoints/memory access, trace instructions forwards/backwards, and inspect memory/registry/disassembly at any point in execution.</p>\n<p>If you copied the files out of WindowsApps folder you can also run it via command line in different ways. The ttd.exe is used in amd64\\ttd and x86\\ttd folders.</p>\n<p>The following command line options are available.</p>\n<pre><code>Usage: ttd  [options] [mode] [PID | program [&lt;arguments&gt;] | &lt;package&gt; &lt;app&gt;]]\n\nOptions:\n -?                Display this help.\n -help             Display this help.\n -ring             Trace to a ring buffer.\n -ringMode &lt;mode&gt;  Specify how to record a ring trace. Possible modes:\n                   file - The ring will be in a file on disk.\n                       This is the default.\n                   mappedFile - The ring will be in a file, but the entire\n                       file will be fully mapped in memory. This reduces the\n                       I/O overhead, but the entire file is mapped in\n                       contiguous address space, which may add significant\n                       memory pressure to 32-bit processes.\n -maxFile &lt;size&gt;   Maximum size of the trace file in MB.  When in full trace\n                   mode the default is 1024GB and the minimum value is 1MB.\n                   When in ring buffer mode the default is 2048MB, the minimum\n                   value is 1MB, and the maximum value is 32768MB.\n                   The default for in-memory ring on 32-bit processes is 256MB.\n -out &lt;file&gt;       Specify a trace file name or a directory.  If a file, the\n                   tracer will replace the first instance of '%' with a\n                   version number.  By default the executable's base name with\n                   a version number is used to prefix the trace file name.\n -children         Trace through family of child processes.\n\nModes:\n -plm              To specify a PLM app/package for tracing from launch or to\n                   launch that app. These PLM apps can only be setup for \n                   tracing if specifying the plm option. See -launch\n                   for the parameters required. \n                   The default name for a single app package is 'app' and \n                   must be included. \n -launch           Launch and trace the program (default).\n                   This is the only mode that uses the program arguments.\n                   For -plm apps it must be specified, and you must include\n                   the package and the app (-launch &lt;package&gt; &lt;app&gt;).\n                   Note: This must be the last option in the command-line,\n                   followed by the program + arguments or the package + app\n -attach &lt;PID&gt;     Attach to a running process specified by process ID.\n\nControl:\n -stop             Stop tracing the process specified (name, PID or \"all\").\n</code></pre>\n<p>Some walkthroughs of what can be achieved with TTD are here:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-walkthrough\" rel=\"nofollow noreferrer\">Time Travel Debugging - Sample App Walkthrough</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-object-model\" rel=\"nofollow noreferrer\">Introduction to Time Travel Debugging Object Model</a></p>\n<p><a href=\"https://chentiangemalc.wordpress.com/2020/04/25/identifying-position-of-user-interactions-within-a-windbg-time-travel-trace/\" rel=\"nofollow noreferrer\">Identifying Position of User Interactions within a WinDbg Time Travel Trace</a></p>\n<p>If using Visual Studio you can also use <a href=\"https://docs.microsoft.com/en-us/visualstudio/debugger/intellitrace\" rel=\"nofollow noreferrer\">IntelliTrace feature</a> to record a debugging trace.</p>\n</div>",
            "votes": "5",
            "user": "chentiangemalc",
            "time": "Nov 18, 2020 at 22:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}