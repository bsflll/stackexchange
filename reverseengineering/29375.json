{
    "title": "How to find offset to a function address from the base address in decompiled image (IDA or Ghidra)",
    "link": "https://reverseengineering.stackexchange.com/questions/29375/how-to-find-offset-to-a-function-address-from-the-base-address-in-decompiled-ima",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say there is a default base address for the application image on both IDA and Ghidra and it is equal to <code>140 000 000</code>.</p>\n<p>If the function address is: <code>140 039 ea0</code></p>\n<p>Does it mean that the offset from the base address to that function address is <code>0x39ea0</code>?</p>\n<p>The reason for asking is that when I am setting the hook like this:</p>\n<p><code>HookInfo{(void**)&amp;gladius::get().gamemain, gamemainHooked}</code></p>\n<p>where <code>HookInfo = std::pair&lt;void**, void*&gt;;</code></p>\n<p>The gamemain address is derived from baseAddress of the main process + offset (I am sure it works as intended) is saying that there is <code>read access violation</code> at that address.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "6k",
    "tags": [
        "decompilation",
        "address",
        "offset",
        "hexadecimal"
    ],
    "user": "Irbis77",
    "time": "Oct 6, 2021 at 16:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Found of how it works.</p>\n<ol>\n<li><p>The offset is indeed just the difference of the addresses, which can be taken from the static analysis, i.e. from IDA or Ghidra regardless in which address space it loads by default.</p>\n</li>\n<li><p>So, if the basis address specified by those tools (in the beginning of the image) is say: <code>140 000 000</code> and the function starts at <code>140 039 ea0</code>, then the offset is: <code>0x39ea0</code></p>\n</li>\n<li><p>To calculate  the address aka baseAddress + Offset properly you need to remember the pointer arithmetics though.</p>\n</li>\n</ol>\n<p><code>baseAddress + Offset / (2*sizeof(pointerSize))</code>,\ni.e.</p>\n<pre><code>DWORD_PTR* address = baseAddress + 0x39ea0 / (2*sizeof(DWORD))\n</code></pre>\n<p>Note: I don't quite know where why the size is twice as big in this case</p>\n<ol start=\"3\">\n<li>Need to make sure that the baseAddress is calculated from the correct application.</li>\n</ol>\n<p>I.e. when simply doing something like: <code>base_address = (DWORD_PTR)GetModuleHandle(NULL);</code>\nyou will get back the address of the application you are currently building. So, if as in my case you are building the proxy dll, then you will get it's base address.</p>\n<p>While the function which I was trying to hook was in the .exe file of the program, which that dll will be hooked at.\nSo, what you really want is:</p>\n<pre><code>baseAddressPtr = (DWORD_PTR*)GetModuleHandleA(\"&lt;YourProgram&gt;.exe\");\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Irbis77",
            "time": "Oct 11, 2021 at 18:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}