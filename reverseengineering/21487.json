{
    "title": "Understand what Ioctl do",
    "link": "https://reverseengineering.stackexchange.com/questions/21487/understand-what-ioctl-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I looking in ida on arm linux binary . I can see there that there is ioctl call</p>\n<p><code>ioctl(fd,req,num)</code>.  </p>\n<p>fd is fd to /dev/module. ,req is some 4bytes and num is some number.</p>\n<p>How can I understand what this ioctl call do?</p>\n<p>What <code>req</code> number mean? </p>\n<p>Where can I find the handle of this ioctl?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "495",
    "tags": [
        "binary-analysis",
        "linux",
        "arm",
        "syscall"
    ],
    "user": "Keystone",
    "time": "Jun 14, 2019 at 12:26",
    "comments": [
        {
            "user": "camp0",
            "text": "<span class=\"comment-copy\">You should study a bit that syscall, in general ioctl is for access drivers, and is very dependent of the driver, in your case /dev/module, do a man ioctl and you will understand better how works, there is plenty of information about it, just google it</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to find the driver (either a separate binary or built-in into the kernel) which publishes this dev file entry, the code to handle the ioctl request will be in it. </p>\n<p>Hereâ€™s an article with an example of ioctl handler:</p>\n<p><a href=\"https://opensourceforu.com/2011/08/io-control-in-linux/\" rel=\"nofollow noreferrer\">https://opensourceforu.com/2011/08/io-control-in-linux/</a></p>\n<p>String search for the file name may be the quickest way to do find the required binary/code area. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 16, 2019 at 11:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}