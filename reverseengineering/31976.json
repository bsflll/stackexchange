{
    "title": "Disassemble MS-DOS 2.0 boot sector",
    "link": "https://reverseengineering.stackexchange.com/questions/31976/disassemble-ms-dos-2-0-boot-sector",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I try disassemble boot sector for floppy 360K MS-DOS 2.0. There is code:</p>\n<pre><code>;bios parameter block here\n\nseg000:001F                 db    0\nseg000:0020                 db  0Ah\nseg000:0021                 db 0DFh\nseg000:0022                 db    2\nseg000:0023                 db  25h ; %\nseg000:0024                 db    2\nseg000:0025                 db    9\nseg000:0026                 db  2Ah ; *\nseg000:0027                 db 0FFh\nseg000:0028                 db  50h ; P\nseg000:0029                 db 0F6h ; ยก\nseg000:002A                 db    0\nseg000:002B                 db    2\nseg000:002C ; ---------------------------------------------------------------------------\nseg000:002C\nseg000:002C reboot:                                 ; CODE XREF: seg000:loc_77j\nseg000:002C                 int     19h             ; DISK BOOT\nseg000:002C                                         ; causes reboot of disk system\nseg000:002E\nseg000:002E msdos_main:                             ; CODE XREF: seg000:0000j\nseg000:002E                 cli\nseg000:002F                 xor     ax, ax\nseg000:0031                 mov     ss, ax\nseg000:0033                 mov     sp, 7C00h\nseg000:0036                 mov     ds, ax\nseg000:0038                 mov     word ptr ds:loc_79+1, ax\nseg000:003B                 mov     word ptr ds:loc_77+1, 7C21h ; DATA XREF: print_msg+Br\nseg000:0041                 sti\nseg000:0042                 int     13h\n\n\n</code></pre>\n<pre><code>seg000:0074                 call    read_root_dir_into_memory\nseg000:0077\nseg000:0077 loc_77:                                 ; DATA XREF: seg000:003Bw\nseg000:0077                 jb      short reboot\nseg000:0079\nseg000:0079 loc_79:                                 ; DATA XREF: seg000:0038w\nseg000:0079                 mov     ax, ds:7C13h    ; StartUserData\nseg000:007C                 mov     ds:7D7Eh, ax    ; StartUserDataVal\nseg000:007F                 mov     ax, 70h ; 'p'   ; location 0h:0700h is for read IBMBIO.COM for MS-DOS\nseg000:0082                 mov     es, ax\n\n</code></pre>\n<p>I dont understand this lines:</p>\n<pre><code>seg000:0038                 mov     word ptr ds:loc_79+1, ax\nseg000:003B                 mov     word ptr ds:loc_77+1, 7C21h ; DATA XREF: print_msg+Br\n\n</code></pre>\n<p>What is this? This lines break code seems.</p>\n<p>UPD.</p>\n<p>I took this code:</p>\n<pre><code>seg000:0038                 mov     word ptr ds:loc_79+1, ax\nseg000:003B                 mov     word ptr ds:loc_77+1, 7C21h ; DATA XREF: print_msg+Br\n</code></pre>\n<p>In hex view:</p>\n<pre><code>A3 7A 00 C7 06 78 00 21 7C\n\n</code></pre>\n<p>Using C++ write binary, then disassemble it, result is:</p>\n<pre><code>seg000:0000                 mov     ds:7Ah, ax\nseg000:0003                 mov     word ptr ds:78h, 7C21h\n\n</code></pre>\n<p>And offset in memory 0h:78h seems is disk parameter table, and what is ds:7Ah I dont know.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "247",
    "tags": [
        "ida",
        "dos"
    ],
    "user": "black4joss",
    "time": "Jun 16, 2023 at 5:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Interrupt vector table on 8086 is a vector that consists of 256 total interrupts placed at first 1 kb of memory from 0000h to 03ffh, where each vector consists of segment and offset as a jump table to memory address. So, 78h &gt;&gt; 2 = 1Eh and 7Ah &gt;&gt; 2 = 1Eh . Int 1E is not an interrupt, but a far pointer to the diskette base table</p>\n</div>",
            "votes": "1",
            "user": "Igor Matyuh",
            "time": "Jun 16, 2023 at 19:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">78h &gt;&gt; 2 = 1Eh and 7Ah &gt;&gt; 2 = 1Eh you mean shift right on 2 bits?</span>",
                    "time": null
                },
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">Each interrupt vector contains segment and offset - total 4 bytes. 78h &gt;&gt; 2 == 78h / 4, same with 7Ah . I's segment and offset of diskette base table.</span>",
                    "time": null
                },
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">Correct. <b>BPB</b> describes the physical layout of a disk volume as bytes per sector, sectors per cluster, num of FAT, etc. <b>DPT</b> contains initialization parameters as clock ticks until motor off, FM or MFM Mode, gap length when formatting (5,25\" or 3,5\"), etc.</span>",
                    "time": null
                },
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">Is it IDA's auto-generanted comment or you manage to find some source code?</span>",
                    "time": null
                },
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">Matches this  <a href=\"https://stanislavs.org/helppc/int_1e.html\" rel=\"nofollow noreferrer\">information</a> , but no idea about 15 milliseconds value.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I hope I understood this code correctly. :)</p>\n<p>These instructions move data into memory locations.\nSo basically if code exists there, it will be overriden and instructions will change their meaning.</p>\n<ol>\n<li><p><code>seg000:0038 A3 7A 00      mov word ptr ds:loc_79+1, ax</code></p>\n<p>It means move <code>ax = 0000</code> to address <code>ds:loc_79+1</code>. Memory cells <code>7A</code> and <code>7B</code> now contain value <code>00</code>.\nAnd if You read bytes starting from address <code>0079</code> instruction</p>\n<p><code>seg000:0079 A1 13 7C     mov ax, ds:7C13h</code></p>\n<p>will change to <code>mov ax, ds:0000h (A1 00 00)</code></p>\n<p>Same thing happens to second instruction.<br/><br/></p>\n</li>\n<li><p><code>seg000:003B C7 06 78 00 21 7C         mov word ptr ds:loc_77+1, 7C21h</code></p>\n<p>Under address <code>0077</code> there is <code>jb short reboot</code>\nAccording to intel manual this is short conditional jump, so this is 2 byte instruction\n<code>72 cb | JB rel8 | D | Valid | Valid | Jump short if below (CF=1)</code></p>\n<p>Byte <code>72</code> stay intact because code writes word <code>7C21</code> to address <code>78</code> and the trick is that\nbyte <code>0079</code> which previously contain value <code>A1</code> (see point 1), will be changed to <code>7C</code></p>\n<p>So now memory will look like:</p>\n</li>\n</ol>\n<pre><code>    77 78 79 7A 7B \n    72 21 7C 00 00 \n\n    seg000:0077 loc_77:     \n    seg000:0077                 jb/jnae 21 ; (jump 21h bytes forward)\n    seg000:0079\n    seg000:0079 loc_79:                    \n    seg000:0079                 jl/jnge 00 ; (execute next instruction)\n</code></pre>\n<pre><code>    seg000:002C reboot:                                 ; CODE XREF: seg000:loc_77j\n    seg000:002C CD 19               int     19h             ; DISK BOOT\n    seg000:002C                                         ; causes reboot of disk system\n    seg000:002E\n    seg000:002E msdos_main:                             ; CODE XREF: seg000:0000j\n    seg000:002E FA                  cli\n    seg000:002F 31 C0               xor     ax, ax\n    seg000:0031 8E D0               mov     ss, ax\n    seg000:0033 BC 00 7C            mov     sp, 7C00h\n    seg000:0036 8E D8               mov     ds, ax\n    seg000:0038 A3 7A 00            mov     word ptr ds:loc_79+1, ax\n    seg000:003B C7 06 78 00 21 7C   mov     word ptr ds:loc_77+1, 7C21h ; DATA XREF: print_msg+Br\n    seg000:0041 FB                  sti\n    seg000:0042 CD 13               int     13h\n</code></pre>\n<p>I hope I didn't mess anything... and this is mbr loaded to 0:7C00 btw.</p>\n</div>",
            "votes": "1",
            "user": "Nassau",
            "time": "Aug 20, 2023 at 15:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}