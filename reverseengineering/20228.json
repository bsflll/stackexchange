{
    "title": "Help with a pointer",
    "link": "https://reverseengineering.stackexchange.com/questions/20228/help-with-a-pointer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry for this stupid question. It's late here and I've been kinda stuck for a while over this so I hope someone here can answer this easily.</p>\n<p>In CheatEngine, 028FA190+374 is pointing to 028F1788. When I type in 028FA190+374 in the calculator I get 28FA504. Can someone explain me why this is different?</p>\n<p><a href=\"https://i.sstatic.net/54OwI.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Picture 1\" src=\"https://i.sstatic.net/54OwI.jpg\"/></a></p>\n<p><a href=\"https://i.sstatic.net/G5maB.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Picture 2\" src=\"https://i.sstatic.net/G5maB.jpg\"/></a></p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "178",
    "tags": [
        "hex",
        "hexadecimal",
        "cheat-engine"
    ],
    "user": "Christian Handest",
    "time": "Dec 29, 2018 at 22:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's different, because it isn't just <code>0x28FA190 + 0x374</code>, but it's <code>*(0x28FA190 + 0x374)</code>.</p>\n<p><code>0x28FA190</code> is a base address, probably of a structure, and <code>0x374</code> is an offset, when you sum these values and dereference the result, you get value of a field that's <code>0x374</code> bytes away from the beginning of this structure. This field seems to be a pointer, that's why it's value is also an address, but it could contain any value.</p>\n<pre><code>struct A\n{\n  char padding[0x374]; // occupy the first 0x374 bytes, so that myPointer's address is address of this structure + 0x374 (i.e. (DWORD)this + 0x374)\n\n  int* myPointer;\n};\n\nA a;\n\nint valueOfMyPointer = **(int**)((DWORD)&amp;a + 0x374); // valueOfMyPointer = *a.myPointer;\n</code></pre>\n<p>You need to explicitly cast <code>&amp;a</code> to <code>DWORD</code> (aka <code>unsigned long</code>), because of pointer arithmetic - if you would do <code>&amp;a + 0x374</code>, the result would actually be <code>(DWORD)&amp;a + 0x374 * sizeof(a)</code>.</p>\n<p>You can also write the entire expression from your screen as following:</p>\n<p><code>uint32_t result = *(DWORD*)(*(DWORD*)((DWORD)GetModuleHandle(\"ac_client.exe\") + 0x374) + 0x14);</code></p>\n</div>",
            "votes": "4",
            "user": "anx199",
            "time": "Dec 29, 2018 at 23:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}