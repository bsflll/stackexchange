{
    "title": "Why does this command crash IDA Android native debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/22032/why-does-this-command-crash-ida-android-native-debugger",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In Android shared library that heavily protected against debugging, I found following code:</p>\n<pre><code>CODE32\nldr pc, [pc, #-4]\n</code></pre>\n<p>For me, this instruction looks like <code>NOP</code>; it just jumps to next instruction in ARM mode. The debugged process crashes on this command, however. I use <code>IDA</code> to debug the process.</p>\n<p>Can anyone explain why?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "268",
    "tags": [
        "ida",
        "android",
        "arm"
    ],
    "user": "Vitalii",
    "time": "Sep 3, 2019 at 14:59",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">\"crashes\" how, exactly?</span>",
            "time": null
        },
        {
            "user": "Vitalii",
            "text": "<span class=\"comment-copy\">Raises <code>SIGSEGV</code>.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">IDA itself or the process being debugged?</span>",
            "time": null
        },
        {
            "user": "Vitalii",
            "text": "<span class=\"comment-copy\">The debugged process.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This instruction is <strong>not</strong> a NOP. It reads memory and jumps to the address loaded. If the memory is inaccessible or the loaded address is invalid/non-executable, you will get an exception, so the debugger's behavior is correct.</p>\n<p>a NOP-like instruction involving PC in ARM mode would be something like</p>\n<pre><code>ADD PC, PC, #-4\n</code></pre>\n<p>(likely disassembled as <code>sub pc, pc, #4</code> or maybe even <code>ADR PC, next_addr</code> )</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 3, 2019 at 15:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}