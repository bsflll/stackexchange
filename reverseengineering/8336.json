{
    "title": "Highscores being sent as hash",
    "link": "https://reverseengineering.stackexchange.com/questions/8336/highscores-being-sent-as-hash",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a game that has been created with Unity which I'm trying to beat. It sends your high-score to a site and gets posted there.</p>\n<p>I've sniffed the outgoing traffic and the game sends your username, your score plus a MD5 hash.</p>\n<p>Looking to some on-line tutorials (and I'm guessing this too) the hash consists of something along the lines of:</p>\n<pre><code> MD5(user:USERNAME, score:SCORE, SALT)\n</code></pre>\n<p>As you can guess, I know the username and the score, but I don't know the secret. I'm trying to find these strings in Ollydbg but I'm having some trouble finding it.</p>\n<p>I'm having trouble in being able to set a breakpoint, as the score is sent when you click submit and time of the game is still running.</p>\n<p>Any suggestions on how to find where the hashing occurs using Ollydbg? \nHow would you set the breakpoint if the game is still running?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "580",
    "tags": [
        "ollydbg",
        "hash-functions"
    ],
    "user": "Komiblanka",
    "time": "Feb 25, 2015 at 12:38",
    "comments": [
        {
            "user": "Paul",
            "text": "<span class=\"comment-copy\">It can't be hashed as how would the server know what the score value is? I think you mean it's encrypted. How about setting a breakpoint on Winsock send APIs to begin with?</span>",
            "time": null
        },
        {
            "user": "Komiblanka",
            "text": "<span class=\"comment-copy\">It is being hashed: It sends both the unhashed and the hashed values. The server knows the secret too. When the server receives the unhashed values, it will hash it and check if the resulting hash is the same as the one being sent...</span>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">You can use the findcrypt for IDA to find the hashing functions and break there. From there, stack trace your way up until you find the caller that has the secret.</span>",
            "time": null
        },
        {
            "user": "Komiblanka",
            "text": "<span class=\"comment-copy\">@AcidShout: I've downloaded IDA freeware version and included the plugin findcrypt (from IDA's official site) in the plugins folder. I get an error: the procedure entry point_callui could not be located in the dynamic link library IDA.WLL I'm using win7 64 bit</span>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">@Komiblanka that's because the plugin is not compatible with IDA Free. Maybe you should try the recent demo (I'm not sure whether it supports plugins), or grab a copy of IDA Pro, which is expensive, but is an indispensary tool for reversing.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are several different approaches to finding the hashing algorithm (and from there, its caller), all of which can be done statically (since you said you were having trouble setting a breakpoint at runtime):</p>\n<ol>\n<li>Search the disassembly for <a href=\"https://www.ietf.org/rfc/rfc1321.txt\" rel=\"nofollow\">MD5 constants</a>, such as <code>67452301</code>, <code>d76aa478</code>, etc.</li>\n<li>Search the disassembly for the string <code>\"MD5\"</code> and references to that string.</li>\n<li>Search the disassembly for any strings/constants that appear in the network packet data that contain the hash. For example, if the network packet data is <code>&lt;user&gt;Komiblanka&lt;/user&gt;&lt;highscore&gt;1000&lt;/highscore&gt;&lt;hash&gt;8b1a9953c4611296a827abf8c47804d7&lt;/hash&gt;</code>, then search for <code>\"highscore\"</code>.</li>\n</ol>\n<p>If these don't provide fruitful results, you can set a breakpoint in OllyDbg on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms740149%28v=vs.85%29.aspx\" rel=\"nofollow\">ws2_32!send()</a> and once you see it sending the buffer that contains the score hash, look at the call stack to find the previous functions involved.</p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Feb 25, 2015 at 16:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gandolf",
                    "text": "<span class=\"comment-copy\">One shortcut I used for this is use the kanal plugin in peid. I've usually been able to track down these constant tables and from there set memory access breakpoints.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you mentioned OllyDbg I'm assuming you use windows.</p>\n<p>A quick search of the Unity Script Reference brings up <a href=\"http://docs.unity3d.com/ScriptReference/Windows.Crypto.ComputeMD5Hash.html\" rel=\"nofollow\">Windows.Crypto.ComputeMD5Hash()</a>.<br/>\nThis function needs to be implemented by the Unity Engine.</p>\n<p>Either using the Windows Api - so set a breakpoint on <code>CryptCreateHash()</code> and <code>CryptHashData()</code></p>\n<p>Or implementing it manually. To find that you can use Jason Geffner's answer OR (which might be faster) write your own small unity script that uses this function and debug that to find the address. </p>\n<pre><code>// http://docs.unity3d.com/Manual/CreatingAndUsingScripts.html\nusing UnityEngine;\nusing System.Collections;\n\npublic class MainPlayer : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n        byte[] buf = {1, 2, 3};\n        ComputeMD5Hash(buf);\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n</code></pre>\n<p>When you now look at the CIL code the call to <code>ComputeMD5Hash()</code> should stand out clearly.</p>\n</div>",
            "votes": "1",
            "user": "user45891",
            "time": "Feb 25, 2015 at 17:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}