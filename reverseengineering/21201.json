{
    "title": "How can I follow virtual function calls in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/21201/how-can-i-follow-virtual-function-calls-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse a video game that was made with the CryEngine 5 game engine. CryEngine 5 source code is available on GitHub, so I can look at the CryEngine source code and cross reference with the game in IDA to find a lot of information.</p>\n<p>Here is a snippet of code from the CryEngine source code:</p>\n<p><a href=\"https://i.sstatic.net/BwgNz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/BwgNz.png\"/></a></p>\n<p>As you can see, there is a class called ISystem, and it has a virtual method GetIPhysicalWorld which is being called. I have found the same virtual function call in IDA within the specific game that I'm trying to reverse:</p>\n<p><a href=\"https://i.sstatic.net/6WeKh.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/6WeKh.png\"/></a></p>\n<p>My question is: in IDA, how can I find the address of the virtual function that is being called (GetIPhysicalWorld)? Also, how can I find the vtable of the ISystem class in IDA?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "hexrays"
    ],
    "user": "psyfl",
    "time": "Apr 22, 2019 at 18:54",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Try to import the header file of that class. There may be some inheritance (512/8 is big). <a href=\"https://reverseengineering.stackexchange.com/questions/19062/\">this</a> and <a href=\"https://reverseengineering.stackexchange.com/questions/19947/\">this</a> may help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>How can I find the address of the virtual function that is being\n  called (GetIPhysicalWorld)?</p>\n</blockquote>\n<p>I guess you want to do that statically? If so, you first need to identify how the object was allocated to find the call of the constructor. In this case, since there's a <code>g_</code> prefix, I assume this is a global object. The constructor is called by <code>_initterm</code> and `dynamic initializer for ...', you can find it using the xref. You should see something like this (it could be located inside a sub function):</p>\n<pre><code>lea rcx, &lt;vtable&gt;\nmov [obj], rcx\n</code></pre>\n<p>And a call to <code>atexit</code>.</p>\n<p>Once you have the <code>vtable</code>, simply do the math. :)</p>\n<blockquote>\n<p>Also, how can I find the vtable of the ISystem class in IDA?</p>\n</blockquote>\n<p>You can try to use <code>class informer</code> plugin. It'll give you the name of the class and its virtual methods. However, you won't have the name of methods since this information is lost during compilation(, unless you have symbols).\nSince you have the source, you can also try to generate code signature (<code>FLIRT</code> or <code>Rizzo</code>) to retrieve the names.</p>\n<p>If you want to rename the offset during the call, this is a different problem. You have to create a new structure. I don't think IDA support parsing of C++ class, you can either transform the C++ class to a C structure or script it.</p>\n</div>",
            "votes": "1",
            "user": "wisk",
            "time": "Apr 22, 2019 at 13:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">Class informer is no longer needed. IDA 7.x has native support for RTTI.</span>",
                    "time": null
                },
                {
                    "user": "Trass3r",
                    "text": "<span class=\"comment-copy\">The comments it inserts are still useful and it also recognizes global constructors in addition.</span>",
                    "time": null
                }
            ]
        }
    ]
}