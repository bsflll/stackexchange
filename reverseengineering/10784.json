{
    "title": "Does anybody know which tools allow to get (pseudo) code from a Moscow ML executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/10784/does-anybody-know-which-tools-allow-to-get-pseudo-code-from-a-moscow-ml-execut",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've decompiled <strong>Win32</strong> executable that is the result of compilation of a program written in Moscow ML language. </p>\n<p>The resulting listing contains standard <strong>C</strong> <code>main</code> function that contains the call to <code>caml_main</code> that (as I understand) calls bytecode interpreter which interprets the bytecode containing in the executable.</p>\n<p>So my questions are:</p>\n<ol>\n<li><p>How to extract the bytecode without a lots of manual work?</p></li>\n<li><p>How to decompile the Moscow ML bytecode?</p></li>\n</ol>\n<p>Any help is appreciated.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "217",
    "tags": [
        "binary-analysis",
        "decompilation",
        "byte-code"
    ],
    "user": "Anton Danilov",
    "time": "Sep 3, 2015 at 13:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<ol>\n<li>How to extract the bytecode without a lots of manual work</li>\n</ol>\n</blockquote>\n<p>As per <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L62\" rel=\"nofollow noreferrer\">https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L62</a>, the last 20 bytes of the EXE make up an <code>exec_trailer</code> structure:</p>\n<pre><code>static int read_trailer(int fd, struct exec_trailer * trail)\n{\n  unsigned char buffer[TRAILER_SIZE];\n\n  lseek(fd, (long) -TRAILER_SIZE, 2);\n  if (read(fd, (char*)buffer, TRAILER_SIZE) &lt; TRAILER_SIZE) \n    return TRUNCATED_FILE;\n  trail-&gt;code_size = read_size(buffer);\n  trail-&gt;data_size = read_size(buffer+4);\n  trail-&gt;symbol_size = read_size(buffer+8);\n  trail-&gt;debug_size = read_size(buffer+12);\n  trail-&gt;magic = read_size(buffer+16);\n  if (trail-&gt;magic == EXEC_MAGIC) return 0; else return BAD_MAGIC_NUM;\n}\n</code></pre>\n<p>And as per <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L229\" rel=\"nofollow noreferrer\">https://github.com/kfl/mosml/blob/master/src/runtime/main.c#L229</a>, the bytecode begins at <code>(20 + trail.code_size + trail.data_size + trail.symbol_size + trail.debug_size)</code> bytes before the end of the file.</p>\n<blockquote>\n<ol start=\"2\">\n<li>How to decompile the Moscow ML bytecode?</li>\n</ol>\n</blockquote>\n<p>The bytecode interpreter is defined here: <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/interp.c#L87\" rel=\"nofollow noreferrer\">https://github.com/kfl/mosml/blob/master/src/runtime/interp.c#L87</a></p>\n<p>However, even if you were to leverage the parser in that interpreter, the best you'd get is an intermediate representation of the code (consisting of the instructions in <a href=\"https://github.com/kfl/mosml/blob/master/src/runtime/instruct.h\" rel=\"nofollow noreferrer\">https://github.com/kfl/mosml/blob/master/src/runtime/instruct.h</a>), not the decompiled ML code itself.</p>\n<p>If you want to convert the intermediate instructions to an actual decompilation, that question would probably be better asked at <a href=\"https://stackoverflow.com/\">https://stackoverflow.com/</a>.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}