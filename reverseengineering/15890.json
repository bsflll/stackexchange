{
    "title": "Is it possible to call function in dynamic link library(.so) generated by Android JNI project?",
    "link": "https://reverseengineering.stackexchange.com/questions/15890/is-it-possible-to-call-function-in-dynamic-link-library-so-generated-by-androi",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I unzipped an apk file and got one libxx.so file. I find that there are some \"exported\"(but I guess the \"fun\" function is not exported by the original programer) functions in this library by IDA Pro, like this:\n<a href=\"https://i.sstatic.net/hMSxc.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/hMSxc.png\"/></a></p>\n<p>Now I can call the \"stringFromJNI\" function by add this library to my Android project. But is it possible to call the \"fun\" function? Should I call it by JNI or dlopen(I have tried dlopen but got \"undefined symbol:JNI_OnLoad\" error)? And how?</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "android",
        "dynamic-linking"
    ],
    "user": "wangzhe",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Have a look at NativeFunction API of <a href=\"https://www.frida.re/\" rel=\"nofollow noreferrer\">frida</a>. It helps you call any native function. With a little bit of reversing, you'll have something like</p>\n<pre><code> var func = new NativeFunction(Module.findExportByName('libxx.so', 'fun'), 'uint32', []);\n</code></pre>\n</div>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Aug 1, 2017 at 8:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After some days struggle, I find out that dynamic analyse through IDA Pro is a good way to deal with this problem.</p>\n</div>",
            "votes": "0",
            "user": "wangzhe",
            "time": "Jul 27, 2017 at 2:55",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if you want call it directly from java code, it won't work because jvm does not recognize it.\nBut you can write a proxy so file which would call the fun function. </p>\n<h2>example</h2>\n<pre><code> void *handler= dlopen(\"libxxx.so\", RTLD_LAZY);//open the so\n void *(*fun)(); //the definition of the fun pointer you want to call\n fun = (void *(*)())dlsym(handler,\"fun\"); // get the dynsym\n fun(); //call it\n</code></pre>\n<hr/>\n<p>note:\nneed check : handler != NULL &amp;&amp; fun != NULL</p>\n<p>you can get the dynamic symbol use readelf tool in linux</p>\n</div>",
            "votes": "0",
            "user": "yufeng",
            "time": "Dec 9, 2017 at 9:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "wangzhe",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. But what should I do in the proxy so file? I try to use dlopen and I can load the so library, but when I want to get the fun function by dlsym, dlerror give me \"undefined symbol:JNI_OnLoad\" error.</span>",
                    "time": null
                },
                {
                    "user": "yufeng",
                    "text": "<span class=\"comment-copy\">allmost the same in linux</span>",
                    "time": null
                }
            ]
        }
    ]
}