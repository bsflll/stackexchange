{
    "title": "How can I prevent Immunity Debugger / OllyDbg from breaking on attach?",
    "link": "https://reverseengineering.stackexchange.com/questions/1738/how-can-i-prevent-immunity-debugger-ollydbg-from-breaking-on-attach",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I attach OllyDbg or ImmunityDebugger to a process, it automatically breaks execution. I'm attaching to a user-mode service running as SYSTEM and only need to catch exceptions, so this is not ideal. Is there a way to disable the break-on-attach behaviour?</p>\n</div>",
    "votes": "11",
    "answers": 3,
    "views": "15k",
    "tags": [
        "tools",
        "debuggers",
        "ollydbg",
        "immunity-debugger"
    ],
    "user": "Polynomial",
    "time": "Apr 17, 2013 at 3:07",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">You would like to attach the debugger to the program and immediately perform a 'continue', is it correct ?</span>",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "<span class=\"comment-copy\">Pretty much. I'd prefer to avoid the breakpoint entirely. I just want the debugger to break if an exception occurs.</span>",
            "time": null
        },
        {
            "user": "Denis Laskov",
            "text": "<span class=\"comment-copy\">@Polynomial will anti-debugging techniques be an option as well?</span>",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "<span class=\"comment-copy\">@DenisLaskov An option? I'm not sure I follow.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@Polynomial: uhm, why is it harsh? a.) I could just have downvoted and not told you why, so you would have never known b.) downvotes on questions affect your rep (true) but not mine (so even if you checked everyones rep all the time you couldn't tell who downvoted) c.) you can simply edit your question to be less ambiguous and I'll gladly retract my downvote - it may even end up as an upvote. Last but not least, I stand by the downvote and the reason for it. Downvotes on answers affect both (-1 for voter, -2 for person answering), btw. But check out my profile I downvote also answers ;)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Explanation</h1>\n<p>The break on attach is due to the <code>ntdll</code> <code>DbgUiRemoteBreakin</code> and <code>DbgBreakPoint</code> functions being called. If you check the <code>kernel32</code> <code>DebugActiveProcess</code> function called by the debugger, OllyDbg or ImmunityDebugger, you will see a call to the <code>CreateRemoteThread</code>, <code>CreateRemoteThreadEx</code>, or <code>ZwCreateThreadEx</code> function depending on your OS.</p>\n<p>So, i guess one way to bypass breaking is:</p>\n<ol>\n<li>debug the debugger itself</li>\n<li>go to the <code>DbgUiIssueRemoteBreakin</code> function and spot the call to the function creating the remote thread.</li>\n<li>change the <code>lpStartAddress</code> parameter in case of <code>CreateRemoteThread</code>/<code>CreateRemoteThreadEx</code> to <code>DbgBreakPoint</code>+1 <code>RETN 0xC3</code></li>\n</ol>\n<h1>Plugin</h1>\n<p>I created an OllyDbg v1.10 <a href=\"http://code.google.com/p/ollytlscatch/downloads/detail?name=SilentAttach.dll\" rel=\"noreferrer\">plugin</a> which <code>NOP</code>s the <code>INT3</code> in <code>DbgBreakPoint</code> in the process with the PID you choose. It has only been tested on Windows 7.</p>\n<h2>Usage</h2>\n<p>Place SilentAttach.dll in OllyDbg directory, fire OllyDbg, Press <kbd>Alt</kbd>+<kbd>F12</kbd>, and then enter process Id of the process you want to silently attach to.</p>\n<p>N.B.\nSince no break occurs, OllyDbg does not extract many piece of info. e.g. list of loaded module. So, you have to activate the context by something like <kbd>Alt</kbd>+<kbd>E</kbd> then <kbd>Alt</kbd>+<kbd>C</kbd></p>\n</div>",
            "votes": "16",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">This is probably the best solution as it doesn't mess with DbgBreakPoint. Just NOP the call to DbgBreakPoint in DbgUiRemoteBreakin in the process you want to attach to.</span>",
                    "time": null
                },
                {
                    "user": "Niklas B.",
                    "text": "<span class=\"comment-copy\">The link to the plugin is dead, any chance of getting it?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One way to do this is to have an OllyDbg plug-in that performs a</p>\n<p><code>WriteProcessMemory(hDebuggee, GetProcAddress(GetModuleHandle(\"ntdll\"), \"DbgBreakPoint\"), &amp;mynop, 1, NULL)</code></p>\n<p>where hDebuggee is the handle for the process being debugged (I believe that OllyDbg has an API for retrieving this value), and mynop is a variable that holds a 0x90 byte (nop instruction).</p>\n<p>That will clear the int3 instruction that is causing the break, allowing the execution to continue immediately.  It's a common anti-debugging trick.</p>\n</div>",
            "votes": "8",
            "user": "peter ferrie",
            "time": "Apr 12, 2013 at 15:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">I take that back. It was the usual OllyDbg attach freeze bug. This works as intended. Probably the easiest one to implement!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think this is possible without doing something extremely invasive. Either patching OllyDbg to use an alternative ZwXX/NtXX function which accepts some flags or patching the kernel. The initial break is done by the operating system so that the debugger can gather information about the process it is being attached to.</p>\n<p>I haven't verified but my guess is that OllyDbg is calling <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms679295%28v=vs.85%29.aspx\" rel=\"nofollow\">DebugActiveProcess</a> in order to attach to it. The documentation for it states:</p>\n<blockquote>\n<p>After the system checks the process identifier and determines that a valid debugging attachment is being made, the function returns TRUE. Then the debugger is expected to wait for debugging events by using the WaitForDebugEvent function. The system suspends all threads in the process, and sends the debugger events that represents the current state of the process.</p>\n</blockquote>\n<p>And later on</p>\n<blockquote>\n<p>After all of this is done, the system resumes all threads in the process. When the first thread in the process resumes, it executes a breakpoint instruction that causes an EXCEPTION_DEBUG_EVENT debugging event to be sent to the debugger. All future debugging events are sent to the debugger by using the normal mechanism and rules.</p>\n</blockquote>\n</div>",
            "votes": "6",
            "user": "Peter Andersson",
            "time": "Apr 12, 2013 at 19:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\">Bugger. I assume that local kernel debugging on Windows doesn't work the same way?</span>",
                    "time": null
                }
            ]
        }
    ]
}