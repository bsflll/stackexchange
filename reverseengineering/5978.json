{
    "title": "Missing addresses from relocation section of ASLR enabled PE binary",
    "link": "https://reverseengineering.stackexchange.com/questions/5978/missing-addresses-from-relocation-section-of-aslr-enabled-pe-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm analyzing entries in the relocation section of a binary. In particular, I want to know if all the targets of jumps have a corresponding entry in the relocation section. The screenshot shows the relocation section entries of the binary I'm analyzing, to the left, as well as the assembly code of the binary showing only the jump instructions, to the right. </p>\n<p><img alt=\"Relocation section and disassembly of binary\" src=\"https://i.sstatic.net/bwKfF.png\"/></p>\n<p>From what I understand, the first instruction in the assembly code at address 0x40be04 (jmp *0x4f422c) should have an entry in the relocation section. However, the last entry in the relocation section is for address 0x401fee.</p>\n<p>Why don't some addresses have an entry in the relocation section? Am I misunderstanding something in my analysis?</p>\n<p>P.S: The screenshot shows the binary disassembled using objdump on cygwin. The relocation section entries were generated using PE-Parser (<a href=\"https://github.com/trailofbits/pe-parse\" rel=\"nofollow noreferrer\">https://github.com/trailofbits/pe-parse</a>)</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "417",
    "tags": [
        "binary-analysis",
        "binary-format"
    ],
    "user": "redraga",
    "time": "Jul 29, 2014 at 18:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a couple of possiblities here.</p>\n<p>One possibility is that the relocation table has been truncated, so you see only the first page of relocation items (the table is an array of items on a per-page basis).</p>\n<p>Another possiblity is that the file doesn't support ASLR (perhaps intentionally, or perhaps it is assumed to not exist) so the relocation table isn't parsed.  This would allow the address at 0x40be04 to execute even in the absence of a relocation item, because the image will never be loaded to another address.</p>\n<p>Further, the disassembly itself looks strange, as though the file is obfuscated.  If so, then it is quite possible that the author of the obfuscator does not take ASLR into account, and so did not bother to add relocation items for the relevant jump.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Jul 29, 2014 at 18:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "redraga",
                    "text": "<span class=\"comment-copy\">Thanks for your reply. The disassembly shows only the jump instructions in the binary. I have edited the post to say this.</span>",
                    "time": null
                },
                {
                    "user": "redraga",
                    "text": "<span class=\"comment-copy\">The issue was with the tool not showing all the pages of the relocation table. I was able to see all the entries using the pefile module for python.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@redraga: since it seems peter's answer was helpful, you should probably accept it (click the check mark next to it)</span>",
                    "time": null
                }
            ]
        }
    ]
}