{
    "title": "How do I view the call stack of an executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/22968/how-do-i-view-the-call-stack-of-an-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically I'm trying to edit memory (replace branch with a nop so the executable can't branch to auth function). I've done successful reverse engineering on gaming consoles, but I don't really know where to start on PC. WinDbg? VS2010 debugger? I would really appreciate any tips or pointers, thanks :)</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "330",
    "tags": [
        "memory"
    ],
    "user": "J. Doe",
    "time": "Jan 12, 2020 at 3:05",
    "comments": [
        {
            "user": "Kennet Celeste",
            "text": "<span class=\"comment-copy\">What you are looking for is not suitable for here but rather tutorial websites and/or youtube videos.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think that what you are looking for is a disassembler for <code>PE</code> format files (Windows Portable Executable format). The call stack itself has nothing to do with it - you need to modify the flow of a program. </p>\n<p><code>Windbg</code> and <code>X64dbg</code> are great debugging tools for PC, as well as <code>IDA</code> and <code>Ghidra</code> for static analysis and patching.</p>\n</div>",
            "votes": "2",
            "user": "macro_controller",
            "time": "Jan 12, 2020 at 11:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}