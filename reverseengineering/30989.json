{
    "title": "Reinterpreting local function strings in Ghidra (ARM)",
    "link": "https://reverseengineering.stackexchange.com/questions/30989/reinterpreting-local-function-strings-in-ghidra-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The program I'm working with has stuff like this all over:</p>\n<pre><code>      strbuf = 0x20746567;\n      local_824 = (undefined *)0x6863616d;\n      local_820 = (undefined *)0x20656e69;\n      local_81c = (undefined *)0x6c696166;\n      local_818 = &amp;DAT_000a6465;\n                    /* get machine failed */\n</code></pre>\n<p>Here I've added a comment showing what the gibberish actually means.  Often when strings are declared in local functions, they look like this, and I type them into an online hex-to-ascii converter to determine what they say.</p>\n<p>For what it's worth, this is what the listing window shows:</p>\n<pre><code>      0001c1a0 0f 00 ae      stmia     lr!,{ fd r1 r2 r3 }=&gt;strbuf\n               e8\n      0001c1a4 06 10 a0      cpy       r1,r6\n               e1\n      0001c1a8 00 20 a0      mov       r2,#0x0\n               e3\n      0001c1ac 03 00 a0      mov       fd,#0x3\n               e3\n      0001c1b0 00 c0 8e      str       r12=&gt;DAT_000a6465,[lr,#0x0]=&gt;local_818\n               e5\n</code></pre>\n<p>I admittedly have zero experience with assembly, so this means nothing to me, but it may help someone else.  I'm also only about a week into my Ghidra experience.</p>\n<p>In these cases, is there a way to retype the data so that it shows up in the decompiler as a human-readable string?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "561",
    "tags": [
        "ghidra",
        "strings",
        "arm64"
    ],
    "user": "mattmunee",
    "time": "Oct 14, 2022 at 1:16",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Do you know the OS the analyzed binary is designed to be executed on?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">tried right click retype variable char *  or club all those locals into a char array</span>",
            "time": null
        },
        {
            "user": "mattmunee",
            "text": "<span class=\"comment-copy\">@Robert, this is running on an embedded GNU/Linux platform (kernel version 4.9), aarch64.</span>",
            "time": null
        },
        {
            "user": "mattmunee",
            "text": "<span class=\"comment-copy\">@blabb, retyping <code>strbuf</code> to char* just results in <code>strbuf = (char *)0x73726170;</code> and similar for the other locals.  Retyping it as a char[20] results in the second local changing to <code>strbuf._4_4_ = (undefined *)0x6863616d;</code> and similar for the rest of the lines.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">try going tho the address  DAT_000a6465 undefine and define an array maybe  these are easy to experiment with when one has the binary in front .  kinda hard to explain in comments :(</span>",
            "time": null
        }
    ],
    "answers_data": []
}