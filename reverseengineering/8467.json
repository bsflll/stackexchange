{
    "title": "What's a good method to find the location of objects in a game [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8467/whats-a-good-method-to-find-the-location-of-objects-in-a-game",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/8467/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-03-31 12:03:39Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/8467/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>So in a given game there are objects randomly placed around the map. I've managed (through playing with the memory in cheat engine) find that a single value changes when a certain object is within my draw distance. It's a boolean either 0 or 1. I had expect to then be able to search for the location of these objects (based on an interval of my location at N,E,S, and W of the object in x and y) however I was surprised to find that no values were  found in this range! Is there a piece of software/method by which I could try and figure this sort of problem out?</p>\n<p>I realise this is a broad question - I wouldn't like to limit it to a specific game since I wish to apply the method to more than one game. If there are other ways to make the question more narrow please say so in comments and I'll amend!</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "memory"
    ],
    "user": "FraserOfSmeg",
    "time": "10 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll make the assumption that the application is written in Visual C++.</p>\n<p>CheatEngine itself is already pretty useful for finding your objects - first you need to find the place in code where these objects are created. For example in C++ you'd write:</p>\n<pre><code>GameObject* obj = new GameObject();\n</code></pre>\n<p>In assembly this is often inlined to a malloc call. So if you use something like IDA Pro to more accurately reverse engineer the assembly, you might see something like this:</p>\n<pre><code>;; void* obj = malloc(64);\n\npush  40h      ;; alloc 64 bytes\ncall  _malloc  ;; easilly detected only if program dynamically links to msvcrt.dll\nadd   esp, 4\nmov   [esp+local_C0], eax\n</code></pre>\n<p>From this you can figure out that your objects are always 64 bytes in size (this is just an example, so your concrete program probably might have bigger objects).</p>\n<p>If you launch the program in Visual Studio (File -&gt; Open.. -&gt; Project/Solution.. -&gt; YourProgram.exe), you can force it to use the Windows debug heap, which will allow you to walk all the dynamically allocated heap nodes and filter out all nodes that are 64 bytes in size.</p>\n<p>Now you should have a large collection of potential GameObject pointers and the final level of filtering would be detecting some basic patterns - for example if the class uses virtual functions, the first field of the object will be its VTable entry, thus giving you an easy identifier whether it's a GameObject or not.</p>\n<p>This might not be a complete example, but it should be good enough to get you in the right direction.</p>\n</div>",
            "votes": "7",
            "user": "Jorma Rebane",
            "time": "Mar 15, 2015 at 15:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "osvein",
                    "text": "<span class=\"comment-copy\">If you find the vtable you can use Cheat Engine to scan the memory for pointers to it</span>",
                    "time": null
                }
            ]
        }
    ]
}