{
    "title": "How to find compressed or encrypted parts in a packed executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/8940/how-to-find-compressed-or-encrypted-parts-in-a-packed-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to analyze an executable that went through a packer to look for the parts that have been compressed or encrypted. Of course, it also means that I want to find the code for the decompression or decryption procedures in the executable. How can I find these ?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "533",
    "tags": [
        "static-analysis",
        "executable",
        "encryption",
        "decryption",
        "decompress"
    ],
    "user": "Alireza Jafari Fard",
    "time": "Jun 17, 2015 at 7:19",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Generically for all executables packed with any packer? Or generically for all executables packed with a specific packer? Or specifically for a single executable packed with a specific packer?</span>",
            "time": null
        },
        {
            "user": "Alireza Jafari Fard",
            "text": "<span class=\"comment-copy\">Generally for all packer and all executable.If packer Specified, this work is easy</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A good way to find compressed or encrypted parts in a binary is entropy investigation, as compressed and encrypted parts show a high degree of disorder (a value of 1 means maximum disorder). I can recommend the tool <a href=\"http://binwalk.org\" rel=\"nofollow noreferrer\">binwalk</a> which produces a graphical output of the memory's entropy. The picture shows a binwalk output, as an example of such a static analysis of an embedded device, showing typical entropies of different memory parts.\n<img alt=\"enter image description here\" src=\"https://i.sstatic.net/3C1bU.jpg\"/></p>\n<p>The bottom part is an overlay of the corresponding Ida memory map.</p>\n</div>",
            "votes": "4",
            "user": "josh",
            "time": "Jun 16, 2015 at 23:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For <em>most</em> packers out there:</p>\n<ul>\n<li>The start of the decompression or decryption is pretty much the entry point (with a bit of anti-debugging mixed in, perhaps).</li>\n<li>The end of the decompression or decryption can't be found generically with static analysis.</li>\n</ul>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "May 21, 2015 at 15:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}