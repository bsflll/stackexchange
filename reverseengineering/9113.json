{
    "title": "How can I generate a call graph from an unstripped x86 Linux ELF?",
    "link": "https://reverseengineering.stackexchange.com/questions/9113/how-can-i-generate-a-call-graph-from-an-unstripped-x86-linux-elf",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's a piece of software, for which I only have the binary, not the source code. It's:</p>\n<ul>\n<li>unobfuscated (so, not polymorphic or anything. It is optimized a bit, though)</li>\n<li>unstripped</li>\n<li>x86 32 bit</li>\n<li>trustworthy (not suspected malware)</li>\n<li>compiled from C++ (based on contents of symbol table)</li>\n<li>probably uses JNI (a couple reasons; partly because it has a fair number of its strings in UTF-16)</li>\n</ul>\n<p>I don't need the full call graph, just the call graph / control flow when given certain arguments. The only reverse engineering I've done has been relatively basic stuff with binutils + gdb + strace. Essentially, I just need a piece of software to match up 'call' and 'ret' pairs, and translate 'call' instruction destinations to their human-readable symbol names. Hopefully generate a readable 2D graph image to give me a feel for app execution.</p>\n<p>So, something to map control flow. It is just a single binary (with some dynamic library dependencies), but it's large enough that manual traces would be prohibitively labor-intensive.</p>\n<p><strong>EDIT:</strong> I don't want to have to pay for anything or run windows to do this. If at all possible, I'd like to be able to run something natively on Linux.</p>\n</div>",
    "votes": "11",
    "answers": 4,
    "views": "8k",
    "tags": [
        "x86",
        "linux",
        "elf",
        "visualization"
    ],
    "user": "Parthian Shot",
    "time": "Jun 10, 2015 at 21:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.radare.org/r/\" rel=\"nofollow noreferrer\">Radare2</a> is also able to collect the callgraph of a program based on its binary only.</p>\n<p>Some time ago, I asked this question which is somehow related to yours and one of the author of Radare2 answered:</p>\n<ul>\n<li><a href=\"https://reverseengineering.stackexchange.com/questions/4260/recursive-traversal-disassembling-with-radare2\">Recursive traversal disassembling with Radare2?</a></li>\n</ul>\n<p>Yet, if you want a graphical representation of the callgraph here is the way to do:</p>\n<pre><code>$&gt; radare2 /usr/bin/md5sum\n... start of radare2 ...\n[0x00402427]&gt; aa\n[0x00402427]&gt; afl\n[0x00402427]&gt; ag &gt; b.dot\n[0x00402427]&gt; !xdot b.dot\n</code></pre>\n<p>The <code>aa</code> command collect information about the analyzed binary. Then, the <code>afl</code> command collect information about all the function call sites (addr, size, bbs, name). Finally, the <code>ag</code> command output the graphviz representation of the collected data. Note that we dumped the data in the file <code>b.dot</code>, I used the <code>xdot</code> software from the Radare2 prompt but it can be done outside of the Radare2 shell (of course).</p>\n<p>I found this way of doing in a <a href=\"http://rada.re/get/r2embed-auckland2015.pdf\" rel=\"nofollow noreferrer\">talk given at Auckland in 2015 by Andrew McDonnell</a> (slides 26-27).</p>\n</div>",
            "votes": "9",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All (caller, callee)-tuples except for direct recursion and duplicates:</p>\n<pre><code>objdump -d $BINARY_FILENAME \\\n| grep '&lt;' \\\n| sed -e 's/^[^&lt;]*//' \\\n| sed 's/&lt;\\([^+]*\\)[^&gt;]*&gt;/\\1/' \\\n| awk 'BEGIN { FS = \":\" } \\\n       NF&gt;1 { w=$1; } \\\n       NF==1 &amp;&amp; w != $1 { print \"(\\\"\" w \"\\\", \\\"\" $0 \"\\\"),\" }' \\\n| sort -u\n</code></pre>\n</div>",
            "votes": "5",
            "user": "lambda",
            "time": "Mar 15, 2017 at 20:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">IDA Pro</a> to generate call graphs:</p>\n<p><a href=\"https://i.sstatic.net/ii1sf.gif\" rel=\"nofollow noreferrer\"><img alt=\"Call graph\" src=\"https://i.sstatic.net/ii1sf.gif\"/></a><br/>\n<sub>(source: <a href=\"https://www.hex-rays.com/products/ida/pix/pc10.gif\" rel=\"nofollow noreferrer\">hex-rays.com</a>)</sub></p>\n</div>",
            "votes": "4",
            "user": "Glorfindel",
            "time": "Dec 29, 2020 at 7:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Parthian Shot",
                    "text": "<span class=\"comment-copy\">I'd always thought of IDA as Windows-specific. Learn something new every day... <b>edit</b>: I'll leave my upvote, because I didn't specify \"free\" but  the free version of IDA is an exe.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">According to <a href=\"https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=23368\" rel=\"nofollow noreferrer\">WineHQ</a>, IDA's graph view works just fine in the free version of IDA 5.0 when run on Wine.</span>",
                    "time": null
                },
                {
                    "user": "Parthian Shot",
                    "text": "<span class=\"comment-copy\">Good point. Testing it now. :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">Ghidra</a> to generate call graphs for various binaries, including x86 Linux ELF binaries.</p>\n</div>",
            "votes": "1",
            "user": "auspicious99",
            "time": "Jan 6, 2021 at 14:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}