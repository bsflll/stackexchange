{
    "title": "how to does this instruction work: `mov qword ptr [rbp-0x30], 0x4020c5`",
    "link": "https://reverseengineering.stackexchange.com/questions/25778/how-to-does-this-instruction-work-mov-qword-ptr-rbp-0x30-0x4020c5",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The following is the code snippet (shown partially) I have:</p>\n<pre><code>q = strrchr(resolved, '/');     /* given /home/misha/docs.txt, q now pts to the last slash */\n    if (q != NULL) {\n      p = q + 1;                   /* p points to docs.txt */\n\n      if (q == resolved)\n        q = \"/\";\n      else {\n        do {\n          --q;\n        } while (q &gt; resolved &amp;&amp; *q == '/');\n</code></pre>\n<p>The generated output with -S flag using objdump:</p>\n<pre><code>401789:       e8 7a fb ff ff          call   401308 &lt;strrchr&gt;\n  40178e:       48 89 45 d0             mov    QWORD PTR [rbp-0x30],rax\n    if (q != NULL) {\n  401792:       48 83 7d d0 00          cmp    QWORD PTR [rbp-0x30],0x0\n  401797:       0f 84 12 01 00 00       je     4018af &lt;fb_realpath+0x22d&gt;\n      p = q + 1;                   /* p points to docs.txt */\n  40179d:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017a1:       48 83 c0 01             add    rax,0x1\n  4017a5:       48 89 45 d8             mov    QWORD PTR [rbp-0x28],rax\n\n      if (q == resolved)\n  4017a9:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017ad:       48 3b 85 e0 fe ff ff    cmp    rax,QWORD PTR [rbp-0x120]\n  4017b4:       75 0a                   jne    4017c0 &lt;fb_realpath+0x13e&gt;\n        q = \"/\";\n  4017b6:       48 c7 45 d0 c5 20 40    mov    QWORD PTR [rbp-0x30],0x4020c5\n  4017bd:       00\n  4017be:       eb 33                   jmp    4017f3 &lt;fb_realpath+0x171&gt;\n      else {\n        do {\n          --q;\n  4017c0:       48 83 6d d0 01          sub    QWORD PTR [rbp-0x30],0x1\n        } while (q &gt; resolved &amp;&amp; *q == '/');\n  4017c5:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017c9:       48 3b 85 e0 fe ff ff    cmp    rax,QWORD PTR [rbp-0x120]\n  4017d0:       76 0b                   jbe    4017dd &lt;fb_realpath+0x15b&gt;\n  4017d2:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017d6:       0f b6 00                movzx  eax,BYTE PTR [rax]\n  4017d9:       3c 2f                   cmp    al,0x2f\n  4017db:       74 e3                   je     4017c0 &lt;fb_realpath+0x13e&gt;\n</code></pre>\n<p>Now, I have a question about <code>q = \"/\";</code> instruction. <code>q</code> is defined as a <code>char*</code> and as seen from this examples, it contains a value returned by <code>strrchr</code> fucntion. Then it is assigned to a string - <code>q = \"/\";</code> further in the code. Now, the instruction which represents that in assembly is - <code>mov QWORD PTR [rbp-0x30],0x4020c5</code>. I have very hard time understanding this instruction. Now, my understanding is that, it supposed to move the string \"/\" to the location pointed by <code>q</code>. But how does it know the location pointed by <code>q</code>? i.e. <code>rbp-0x30</code> is a location on the stack where <code>q</code> is stored. And this location is supposed to contain the address of the object where <code>q</code> is pointing. But, I interpret <code>mov QWORD PTR [rbp-0x30],0x4020c5</code> as move string <code>0x4020c5</code> to <code>rbp-0x30</code> i.e. the address of <code>q</code>. That is where I am confused as that location is supposed to contain the address and not the string.</p>\n<p>Thanks for reading and your help is appreciated.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "assembly",
        "x86",
        "x86-64"
    ],
    "user": "R4444",
    "time": "Aug 29, 2020 at 17:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>mov QWORD PTR [rbp-0x30],0x4020c5</code> means exactly \"move <code>0x4020c5</code> to a memory location <code>rbp-0x30</code> and treat this number as qword\" (<code>8</code> - byte number).</p>\n<p>But <code>q</code> is at the memory location <code>rbp - 0x30</code>, so anything you write into that address, will be written into <code>q</code>. So, the number <code>0x4020c5</code> was written into <code>q</code>. The number <code>0x4020c5</code> is not a string itself - it's a memory address of a string (just a pointer). So <code>q</code> points to a string at <code>0x4020c5</code>, hence <code>q[0] == '/'</code> and <code>q[1] == NULL</code>.</p>\n<p>And that's the behaviour that we expect from instruction <code>q = \"/\"</code> - it doesn't change the memory the <code>q</code> points at, but changes the <code>q</code> itself.</p>\n</div>",
            "votes": "4",
            "user": "bart1e",
            "time": "Aug 29, 2020 at 18:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "enedil",
                    "text": "<span class=\"comment-copy\">Nitpick: <code>q[1] == 0</code> and coincidentally <code>q[1] == NULL</code>, but <code>0</code> and <code>NULL</code> should not be confused.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can add some print address of variable debug aid in your source to get a grip of these addresses</p>\n<p>see the disassembly of line no 5 in the paste below</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main (void) {\n    char * q;\n    q = \"/\";\n    printf(\"%p\\n\",&amp;q);\n}\n</code></pre>\n<p>disassembly</p>\n<pre><code>slashaddr!main:\n    3 01141000 55              push    ebp\n    3 01141001 8bec            mov     ebp,esp\n    3 01141003 51              push    ecx\n    5 01141004 c745fc90011801  mov     dword ptr [ebp-4], (01180190)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 29, 2020 at 21:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">thanks so much @blabb</span>",
                    "time": null
                }
            ]
        }
    ]
}