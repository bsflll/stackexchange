{
    "title": "How to determine when/where pointers in .ctors get mapped?",
    "link": "https://reverseengineering.stackexchange.com/questions/22457/how-to-determine-when-where-pointers-in-ctors-get-mapped",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I am learning about ELF, and am looking through a binary in Ghidra as I do. I've made sense of the ELF header, and now I am looking through the program header table.</p>\n<p>My binary has a bunch of entries in the program header table, but I am hung up on one in particular...</p>\n<p>From referencing...</p>\n<p><a href=\"http://www.sco.com/developers/gabi/latest/ch5.pheader.html#p_flags\" rel=\"nofollow noreferrer\">http://www.sco.com/developers/gabi/latest/ch5.pheader.html#p_flags</a></p>\n<p>...I can see what the different flags mean. Of relevance:</p>\n<pre><code>p_offset = 0xABCDEF\np_vaddr = 0x1BCDEF\np_filesz = &lt;number&gt;\np_memsz = &lt;bigger number&gt;\n</code></pre>\n<p>I am able to go to the p_vaddr value in the binary, and it brings me to the <code>.ctors</code> section. Where I do see what appears to be a list of pointers, but currently those pointers do not represent valid virtual addresses (by currently I mean they are not virtual addresses that I can \"go\" to in Ghidra). When I run the program dynamically in gdb though, I can run <code>x addr_of_interest</code> and it succeeds and says it is pointing to something in a library blah blah.</p>\n<p>I found a relevant link from GCC too, but it did not answer my question as far as I could tell...</p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gccint/Initialization.html\" rel=\"nofollow noreferrer\">https://gcc.gnu.org/onlinedocs/gccint/Initialization.html</a></p>\n<p>My question therefore is this: <strong>When/how are these pointers mapped to valid memory, and where in the ELF file is the information that would tell me how this happens?</strong></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "240",
    "tags": [
        "c++",
        "elf",
        "ghidra",
        "x86-64"
    ],
    "user": "pooley1994",
    "time": "Nov 5, 2019 at 11:36",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Are you 100% sure you are looking at <code>.ctors</code> and not, for example, <code>.got</code>?</span>",
            "time": null
        },
        {
            "user": "pooley1994",
            "text": "<span class=\"comment-copy\">@igor thanks for clarifying, but yes, I'm sure. There is a (symbol I believe?) In Ghidra displayed as <code>__CTOR_LIST__</code> and once you jump there an auto generated comment that says <code>.ctors</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Duh. Stupid.</p>\n<p>Importantly, the binary I am looking at is <strong>not</strong> a PIE (<strong>P</strong>osition <strong>I</strong>ndependent <strong>E</strong>xecutable). I had Ghidra's image base set to 0x0, rather than 0x400000 (which is the p_vaddr of the loadable segment containing all of the code, and notably, the canonical value used here for x86_64 binaries). This is the only reason the function pointers listed in <code>.ctors</code> were not addresses Ghidra could go to. As soon as I set the image base to 0x400000 they were legitimate. </p>\n<p>:facepalm:</p>\n</div>",
            "votes": "1",
            "user": "pooley1994",
            "time": "Nov 5, 2019 at 14:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}