{
    "title": "How to find encrypted strings in an executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/26939/how-to-find-encrypted-strings-in-an-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer an executable.</p>\n<p>I am using <strong>Process explorer</strong> to dump all strings present in the exe image, and from the process's RAM when it is running.</p>\n<p><a href=\"https://i.sstatic.net/N8NdB.png\" rel=\"nofollow noreferrer\"><img alt=\"process explorer string dump\" src=\"https://i.sstatic.net/N8NdB.png\"/></a></p>\n<p>The two dumps return a different number of strings, with the latter (from RAM) returning a much greater number of them.\nThis discrepancy could mean one of the following.</p>\n<ol>\n<li><strong>Executable is encrypted (a packer is used?)</strong></li>\n<li><strong>Executable is compressed</strong></li>\n<li><strong>Strings are encrypted/obfuscated</strong></li>\n<li><strong>Strings are coming from a DLL loaded by the process, or a file opened by it.</strong></li>\n</ol>\n<p>I used various tools to rule out 1, and 2. These tools check file entropy and do other statistical checks to figure this out.</p>\n<p>Some of the tools I used:</p>\n<ol>\n<li>Check which packer is being used: <a href=\"https://www.aldeid.com/wiki/PEiD\" rel=\"nofollow noreferrer\">https://www.aldeid.com/wiki/PEiD</a></li>\n<li>Statistical analysis for enccryption/compression - <code>binwalk -EJ &lt;exe-name&gt;</code>, <a href=\"https://github.com/kiathan/Encryption-Detector\" rel=\"nofollow noreferrer\">https://github.com/kiathan/Encryption-Detector</a></li>\n</ol>\n<p>To rule out 4 I used process explorer to check each open file handle and loaded DLL. Found nothing suspicious.</p>\n<p><strong>For 3, I proceeded as follows.</strong></p>\n<p>I attached process to WinDbg, and tried to search for a string from RAM string dump obtained from process explorer.\n<br/>eg. searching for string \"--control\".</p>\n<p><code>s -a 0 L?80000000 \"--control\"</code></p>\n<p>This string was present at location <code>014ebbf5</code>.\nTo figure out what kind of memory this address is present in, I used WinDbg's <code>!address</code> command.</p>\n<p>Here is the output I got.</p>\n<pre><code>\nUsage:                  Image\nBase Address:           01165000\nEnd Address:            01560000\nRegion Size:            003fb000 (   3.980 MB)\nState:                  00001000          MEM_COMMIT\nProtect:                00000002          PAGE_READONLY\nType:                   01000000          MEM_IMAGE\nAllocation Base:        00c70000\nAllocation Protect:     00000080          PAGE_EXECUTE_WRITECOPY\nImage Path:             C:\\Program Files (x86)\\&lt;exe-path&gt;.exe\nModule Name:            &lt;exe-name&gt;\nLoaded Image Name:      C:\\Program Files (x86)\\&lt;exe-path&gt;.exe\nMapped Image Name:      \nMore info:              lmv m &lt;exe-name&gt;\nMore info:              !lmi &lt;exe-name&gt;\nMore info:              ln 0x14ecbf5\nMore info:              !dh 0xc70000\n\n\nContent source: 1 (target), length: 7340b\n</code></pre>\n<p>I was expecting this to be an address from <code>stack</code> or from <code>heap</code>, but it is instead from the process's <code>READ ONLY</code> area where memory-mapped file of the executable is present. A read only area cannot store decoded string since you would have to read encoded strings, decode it, and then write them somewhere.</p>\n<p>At this point I feel that neither the exe is encrypted, nor compressed, and neither the strings are encoded/encrypted. Still, somehow a lot of strings are not present in the exe, but present in the RAM.\nHow can this be possible?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "encryption",
        "windbg",
        "encodings",
        "strings"
    ],
    "user": "Sahil Singh",
    "time": "Feb 4, 2021 at 10:00",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">Run strings.exe anydesk.exe &gt; foo.txt to find the visible strings belonging to a executable  or find the module basevand size and provide that as range not 0 to 80000000</span>",
            "time": null
        },
        {
            "user": "Sahil Singh",
            "text": "<span class=\"comment-copy\">@blabb I have already tried that, and that is the point of contention. strings command doesn't give me enough strings.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">If you have a string you have an address if you have an address you have a raw byte which is either transformed or a clean slate where it is wriiten to so you alwAys have the option of breaking on read access , write access, memory access , use hardware breakpoints and look and your assumptions that read onlyarea  cant a be written is  not correct you can use virtual protect to even execute from there</span>",
            "time": null
        },
        {
            "user": "Sahil Singh",
            "text": "<span class=\"comment-copy\">It turns out that strings are constructed on the fly. At that time the memory is PAGE_EXECUTE_READWRITE. Later the permission is changed to read-only.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>During my analysis I use <a href=\"https://github.com/fireeye/flare-floss\" rel=\"nofollow noreferrer\">Floss</a>!, it is an excellent tool and super simple to use, on several occasions I can find the strings I am looking for, you used PEID to check for packers please use a more up-to-date tool like DIE (Detect it Easy), if it is an .EXE file consider analyzing with a professional and updated debbuger like x96DBG(x64dbg/x32dbg), I believe you get better results that way.</p>\n</div>",
            "votes": "1",
            "user": "Happy",
            "time": "Feb 4, 2021 at 19:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sahil Singh",
                    "text": "<span class=\"comment-copy\">I had used Floss earlier without success, and also DIE. Thanks a lot for suggesting x64dbg/x32dbg. They are amazing.</span>",
                    "time": null
                }
            ]
        }
    ]
}