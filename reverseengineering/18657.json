{
    "title": "What is the difference between Windbg and local debugger in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/18657/what-is-the-difference-between-windbg-and-local-debugger-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I want to debug an .exe on Windows with IDA  I can choose between Windbg or local debugger.</p>\n<p>What is the difference?</p>\n<p>By the way, is there any difference if I use Windbg tool (windows software) to debug .exe file, or if I debug with IDA and choose Windbg debugger?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "windows",
        "debugging",
        "x86",
        "windbg"
    ],
    "user": "debuuger",
    "time": "Jul 2, 2018 at 10:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The Windbg debugger plugin is an IDA Pro debugger plugin that uses Microsoft's debugging engine (dbgeng) that is used by Windbg, Cdb or Kd.</p>\n<p>The Windbg plugin is very similar to IDA Pro's Win32 debugger plugin, nonetheless by using The Windbg plugin, one can benefit from the command line facilities and the extensions that ship with the debugging tools.</p>\n<p>For example, one can type “!chain” to see the registered Windbg extensions:\n<a href=\"https://i.sstatic.net/J6iPt.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/J6iPt.png\"/></a>\n“!gle” is another command to get the last error value of a given Win32 API call.</p>\n<p><a href=\"https://i.sstatic.net/2mzNL.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2mzNL.png\"/></a></p>\n<p>Another benefit of using the Windbg debugger plugin is the use of symbolic information.\nNormally, if the debugging symbols path is not set, then the module window will only show the\nexported names. For example kernel32.dll displays 1359 names:\n<a href=\"https://i.sstatic.net/etASW.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/etASW.png\"/></a><br/>\nLet us configure a symbol source by adding this environment variable before running IDA:<br/>\n<code>set _NT_SYMBOL_PATH=srv*C:\\Temp\\pdb*http://msdl.microsoft.com/download/symbols</code><br/>\nIt is also possible to set the symbol path directly while debugging:\n<a href=\"https://i.sstatic.net/tycMb.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/tycMb.png\"/></a><br/>\nand then typing “.reload /f” to reload the symbols.\nNow we try again and notice that more symbol names are retrieved from kernel32.dll:<br/>\n<a href=\"https://i.sstatic.net/KuwgZ.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/KuwgZ.png\"/></a><br/>\nNow we have 5818 symbols instead!<br/>\nIt is also possible to use the “x” command to quickly search for symbols:<br/>\n<a href=\"https://i.sstatic.net/h8TpX.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/h8TpX.png\"/></a><br/>\n(Looking for any symbol in any module that contains the word “continue”)<br/>\n<a href=\"https://www.hex-rays.com/products/ida/support/tutorials/debugging_windbg.pdf\" rel=\"noreferrer\">[source]</a> </p>\n<p>For the second part of your question, use IDA Pro debugger (Windbg debugger plugin) if you need IDA Pro features otherwise use Windbg. </p>\n</div>",
            "votes": "6",
            "user": "user22363",
            "time": "Jul 2, 2018 at 9:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From the standpoint of how IDA and Windbg connect to the debugged process, there's no difference. From the standpoint how IDA and Windbg handle debugging events while the program is running there's a difference. Up to some time IDA was very bad at it, and choosing windbg way was a better option. So using IDA local debugger is ok, unless you need to execute some windbg commands from IDA while debugging. But in case you have problems while debugging, you have a backup option to try. </p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Jul 2, 2018 at 7:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}