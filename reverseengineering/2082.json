{
    "title": "Debugger hiding plugin for WinDbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/2082/debugger-hiding-plugin-for-windbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are there any good WinDbg hiding plugins like OllyDbg's? Or a plugin that's open source and still in development for this purpose?</p>\n</div>",
    "votes": "14",
    "answers": 4,
    "views": "7k",
    "tags": [
        "debuggers",
        "anti-debugging",
        "windbg"
    ],
    "user": "shebaw",
    "time": "May 23, 2013 at 12:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think such a plugin currently exists. However, if you're willing to implement a minimal windbg backend, you could extend <a href=\"http://code.google.com/p/uberstealth\" rel=\"nofollow\">uberstealth</a>, which unfortunately I've never come to finish as a project (actually I think anti-debugging is a dead anyway, but that's another story ;-)).\nIt's essentially IDAStealth, but with all debugger specific functionality factored out (there's a backend for IDA and Olly2). All you'd have to do is write a backend for Windbg (and fix the remaining bugs, I could help you with that though), all other code is debugger independent.\nShould be less than a few dozen lines of code.</p>\n</div>",
            "votes": "4",
            "user": "newgre",
            "time": "May 23, 2013 at 11:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Such a plugin indeed does not exist, but you don't need one either. See my answer (posting this comment in case the accepted answer doesn't change).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am not sure if plugins exist but you can write simple scripts like below to hide WinDbg on case to case basis.</p>\n<ul>\n<li><p><strong><code>Peb-&gt;BeingDebugged</code></strong></p>\n<pre><code>r?$t0 = (ntdll!_peb *) @$peb;?? @$t0-&gt;BeingDebugged;eb (@$t0+2) 0;?? @$t0-&gt;BeingDebugged\n</code></pre></li>\n<li><p><strong><code>ZwSetInformationThread</code> (XP SP3 syscalls with <code>sysenter</code>)</strong></p>\n<pre><code>bp ntdll!ZwSetInformationThread \"r eip = $ip+0n12 ; r eax = 0; gc\" \n</code></pre></li>\n<li><p><strong><code>ZwQueryInformationProcess</code></strong></p>\n<p>syntax similar to <code>ZwSetInformationThread</code> in addition you would also need to fakeout DebugPort to NULL with  </p>\n<pre><code>ed poi(ADDRESS)  0\n</code></pre></li>\n</ul>\n<h3>Reading</h3>\n<ul>\n<li>Peter Ferrie's <a href=\"http://pferrie.host22.com/papers/unp2011.htm\" rel=\"nofollow\">\"Ultimate\" Anti-Debugging Reference</a></li>\n</ul>\n</div>",
            "votes": "6",
            "user": "0xC0000022L",
            "time": "May 30, 2013 at 13:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">ah, but anti-debugging is fraught with special cases - you can't arbitrarily zero the DebugPort, for example, without first checking the PID, in case the process is being debugged intentionally.  Anyway, see my \"Ultimate\" Anti-Debugging Reference (pferrie.host22.com/papers/unp2011.htm) for a long list of tricks that you'd need to support (and some that you can't because they are direct kernel-returned data).</span>",
                    "time": null
                },
                {
                    "user": "Till",
                    "text": "<span class=\"comment-copy\">@peterferrie awesome reference, thanks for sharing!</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@peterferrie thanks for the comment i wrote case to case basis just because i understand that there are lot of special cases anyway i have read your paper earlier quiet nice collection of antidebug tricks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://github.com/x64dbg/ScyllaHide\" rel=\"noreferrer\">ScyllaHide</a>. There are plugins for many debuggers, but it is also possible to use <code>InjectorCLI.exe</code> to inject ScyllaHide into any process. Here are the steps (for a 32 bit process, if you want a 64 bit process, replace every <code>x86</code> with <code>x64</code>):</p>\n<ol>\n<li>Extract ScyllaHide (<a href=\"https://github.com/x64dbg/ScyllaHide/releases\" rel=\"noreferrer\">download</a>) anywhere;</li>\n<li>Run <code>NtApiTool\\x86\\PDBReaderx86.exe</code> and when it's finished, copy <code>NtApiCollection.ini</code> to the same directory as <code>InjectorCLIx86.exe</code>;</li>\n<li>Open <code>ScyllaTest_x86.exe</code> with WinDbg (x86) you should be in <code>LdrpDoDebuggerBreak</code>;</li>\n<li>Execute <code>InjectorCLIx86.exe ScyllaTest_x86.exe HookLibraryx86.dll</code>;</li>\n<li>Run (F5) in WinDbg.</li>\n</ol>\n<p>Without using ScyllaHide:</p>\n<p><img alt=\"no hiding\" src=\"https://i.sstatic.net/e7hK5.png\"/></p>\n<p>When using ScyllaHide:</p>\n<p><img alt=\"hiding\" src=\"https://i.sstatic.net/gps0Z.png\"/></p>\n<p>This process works for any debugger, if you feel like it you can even make an actual plugin for WinDbg. It should be quite easy.</p>\n<p>I just added an option to inject to a process by process id. You can do this with:</p>\n<pre><code>InjectorCLIx86.exe pid:1234 HookLibraryx86.dll\n</code></pre>\n</div>",
            "votes": "6",
            "user": "mrexodia",
            "time": "May 31, 2017 at 14:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kevin",
                    "text": "<span class=\"comment-copy\">While this does seem to work for usermode applications, I have to test the associated TitanHide (<a href=\"https://github.com/mrexodia/TitanHide/blob/master/README.md\" rel=\"nofollow noreferrer\">github.com/mrexodia/TitanHide/blob/master/README.md</a>) for Kernel mode. ScyllaTest reports NtQuerySystemInformation_KernelDebugger: DETECTED</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Yes, ScyllaHide (and TitanHide for that matter) only work on usermode applications.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here you can download QEMU virtual machine with embedded WinDbg stub:\n<a href=\"https://github.com/ispras/qemu/releases\" rel=\"nofollow noreferrer\">https://github.com/ispras/qemu/releases</a>\n<a href=\"https://github.com/ispras/qemu/tree/windbg\" rel=\"nofollow noreferrer\">https://github.com/ispras/qemu/tree/windbg</a></p>\n<p>This stub allows debugging with WinDbg without enabling Windows debugging mode.</p>\n</div>",
            "votes": "2",
            "user": "Pavel Dovgalyuk",
            "time": "May 31, 2017 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}