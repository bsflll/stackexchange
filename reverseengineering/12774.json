{
    "title": "Win32 Structured Exception Handling in MS C++ - Mapping compiler code to assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/12774/win32-structured-exception-handling-in-ms-c-mapping-compiler-code-to-assembl",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to read through Matt Pietrek article on \"A Crash Course on the Depths of Win32 Structured Exception Handling\" linked <a href=\"https://www.microsoft.com/msj/0197/exception/exception.aspx\" rel=\"nofollow\">here</a>. In the section titled <strong><em>Compiler-level SEH</em></strong>, he writes:</p>\n<blockquote>\n<p>Now that you know that a _try block corresponds to an EXCEPTION_REGISTRATION structure on the stack, what about the callback function within the EXCEPTION_ REGISTRATION? Using Win32 terminology, the exception callback function corresponds to the filter-expression code. To refresh your memory, the filter-expression is the code in parens after the _except keyword. It's this filter-expression code that decides whether the code in the subsequent {} block will execute.</p>\n</blockquote>\n<p>At this point, I am a bit confused. All along, until this point I thought that the callback function is the function that is going to handle the exception, i.e. the code inside the _except block. Kindly help me understand this.</p>\n<p>Also, if the filter-expression code corresponds with the callback function, then what corresponds to the code inside '{}' after the filter-expression?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "824",
    "tags": [
        "windows",
        "x86",
        "c++",
        "exception",
        "seh"
    ],
    "user": "user1720897",
    "time": "Jun 1, 2016 at 9:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In case of the compiler-level SEH, the <em>callback invoked by the OS</em> is the compiler-provided function, usually <code>__except_handler3</code> or similar. Once called, it inspects the stack, retrieves the trylevel, looks up the corresponding scopetable entry and calls the exception filter (<code>lpfnFilter</code>). If the filter returns non-zero, the handler (<code>lpfnHandler</code>) is invoked - <em>this</em> is the code corresponding to the code inside the <code>__except/__finally</code> block.\nFor a specific example, check Appendix I here: <a href=\"http://www.openrce.org/articles/full_view/21\" rel=\"nofollow\">http://www.openrce.org/articles/full_view/21</a></p>\n<p>Note that <strong><em>C++ EH</em></strong> uses a somewhat more complicated approach compared to \"simple\" SEH to ensure proper semantics (such as automatic object destruction during unwinding), so it's not as easy to map back to source code, but doable (see Appendix II in the above article).</p>\n<p>BTW, in recent Visual Studio versions, Microsoft provides almost complete CRT source, including the implementation of <code>__except_handlerN</code> and <code>___CxxFrameHandler</code>, so you could look there too (e.g. <code>\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\crt\\src\\eh\\frame.cpp</code>).</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Jun 1, 2016 at 10:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}