{
    "title": "Why is j_free function and free_ptr pointer needed in glibc?",
    "link": "https://reverseengineering.stackexchange.com/questions/15234/why-is-j-free-function-and-free-ptr-pointer-needed-in-glibc",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am disassembling <code>libc-2.23.so</code>, there exists a thunk method called <code>j_free</code> which jumps at the location pointed to by <code>free_ptr</code> pointer in glibc. Why do those even exist while <code>free()</code> itself is exported?</p>\n<h2><a href=\"https://i.sstatic.net/Jrntj.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Jrntj.png\"/></a></h2>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "289",
    "tags": [
        "libc"
    ],
    "user": "sherlock",
    "time": "Apr 27, 2017 at 22:56",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what exactly are you disassembling?</span>",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "<span class=\"comment-copy\">I am disassembling <code>libc-2.23.so</code>, seems that <code>j_free</code> is a thunk method</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In ELF, all symbols are global. it means that a symbol in another module (e.g. main executable) can override the glibc's <code>free</code>. that's why all calls to it go through a GOT pointer. On the first call, the dynamic linker will go through all symbols in all modules and pick up the first one offering <code>free</code>. If no other modules export it, the libc one will be used. </p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2017 at 5:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Does it make sense to have calls internal to <code>libc</code> to be routed through <code>plt</code> instead of a relative call?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yes, because it needs to be prepared for possibility that they're overridden by an external module.</span>",
                    "time": null
                }
            ]
        }
    ]
}