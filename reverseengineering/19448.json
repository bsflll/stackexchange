{
    "title": "How to find out all the locations that call an external function using ida pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19448/how-to-find-out-all-the-locations-that-call-an-external-function-using-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just want to find out all the locations that call the standard library function <code>pthread_attr_getstack</code> using ida pro. There is an entry in .plt:  </p>\n<pre><code>.plt:00015894 ; =============== S U B R O U T I N E =======================================\n.plt:00015894\n.plt:00015894 ; Attributes: thunk\n.plt:00015894\n.plt:00015894 ; int pthread_attr_getstack(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize)\n.plt:00015894 pthread_attr_getstack\n.plt:00015894                 ADRL            R12, 0x3AD89C\n.plt:0001589C                 LDR             PC, [R12,#(pthread_attr_getstack_ptr - 0x3AD89C)]! ; __imp_pthread_attr_getstack\n.plt:0001589C ; End of function pthread_attr_getstack\n</code></pre>\n<p>If I double click the <code>__imp_pthread_attr_getstack</code>, it will go to:</p>\n<pre><code>extern:003D8520 ; int pthread_attr_getstack(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize)\nextern:003D8520                 IMPORT __imp_pthread_attr_getstack\nextern:003D8520                                         ; CODE XREF: pthread_attr_getstack+8↑j\nextern:003D8520                                         ; DATA XREF: .got:pthread_attr_getstack_ptr↑o\n</code></pre>\n<p>And if I double click <code>pthread_attr_getstack+8↑j</code>, it will go to the above .plt entry, and if I double click <code>.got:pthread_attr_getstack_ptr↑o</code>, it will go to one .got entry:</p>\n<pre><code>.got:003ADD8C pthread_attr_getstack_ptr DCD __imp_pthread_attr_getstack\n.got:003ADD8C                                         ; DATA XREF: pthread_attr_getstack+8↑r\n</code></pre>\n<p>And if I double click the <code>pthread_attr_getstack+8↑r</code> in the .got entry, it will go to the above .plt entry as well. Does this mean that there is no code calling <code>pthread_attr_getstack</code>? If the answer is no, then how to find out all of locations calling <code>pthread_attr_getstack</code>?\nBy the way, <a href=\"https://www.dropbox.com/s/ueo7c23cenih4eo/libmono.so?dl=0\" rel=\"nofollow noreferrer\">this</a> is the elf which is named libmono.so that I want to reverse.</p>\n<p><strong>One thing to emphasis, the libmono.so elf file is very liked to be encrypted, that is to say, there may be a lot of obfuscated code in libmono.so.</strong></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "got",
        "plt"
    ],
    "user": "cong",
    "time": "Sep 27, 2018 at 2:00",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Have you tried hitting x to see cross references?</span>",
            "time": null
        },
        {
            "user": "cong",
            "text": "<span class=\"comment-copy\">yes, I tried, no further progress had been made.</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">See that subroutine in graph mode.</span>",
            "time": null
        },
        {
            "user": "cong",
            "text": "<span class=\"comment-copy\">@Biswapriyo, won't work.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Are you certain the binary actually uses the function?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After downloading and reviewing the file you shared, I can certainly say <em>the <code>pthread_attr_getstack</code> function is never used by the binary</em>.</p>\n<p>If you're still certain the function is used it could be the case that:</p>\n<ol>\n<li>The function is dynamically loaded. I've searched for any clear dynamic loading using the <code>dlsym</code> function but I could've missed something (or there could be something more elaborate going on.</li>\n<li>The function could be used through another binary that is by itself used by your binary.</li>\n</ol>\n<p>In any case, for multiple reasons presence in the import table does not necessarily imply the function is being used by the binary.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Sep 26, 2018 at 20:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cong",
                    "text": "<span class=\"comment-copy\">I tried with <code>readelf -Ds libmono.so | grep pthread_attr_getstack</code>, the output is: <code>583 778: 00000000     0 FUNC    GLOBAL DEFAULT UND pthread_attr_getstack</code>, does this mean that <code>pthread_attr_getstack</code> is used in this binary file? And one thing to emphasis, the libmono.so binray file is very liked to be encrypted, that is to say, there may be a lot of obfuscated code in libmono.so binary file.</span>",
                    "time": null
                }
            ]
        }
    ]
}