{
    "title": "Detecting and solutions of stack smash protection",
    "link": "https://reverseengineering.stackexchange.com/questions/22866/detecting-and-solutions-of-stack-smash-protection",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This video <a href=\"https://youtube.com/watch?v=4HxUmbOcN6Y\" rel=\"nofollow noreferrer\">https://youtube.com/watch?v=4HxUmbOcN6Y</a> presents how modern compilers protect stack overflows with stack cookies and function <code>__stack_chk_fail</code>.</p>\n<ol>\n<li>How can one identify if a binary has stack smashing protection? If I see  <code>__stack_chk_fail</code> in IDA can I guess that this binary uses stack cookies(I will see this function only if this binary compiled dynamically).</li>\n</ol>\n<p>But if this function is compiled statically, how can I recognize it? Each function will end with <code>if ... then abort else return</code> or only functions that get buffer from user?</p>\n<ol start=\"2\">\n<li>If binary use stack smash protection and get buffer unsafe (like <code>gets</code> ) how can I get over stack cookies? Or there is no way to return to another function?</li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "676",
    "tags": [
        "c",
        "buffer-overflow",
        "gcc",
        "stack-protector"
    ],
    "user": "wfj96649BcaooCom",
    "time": "Jan 3, 2020 at 6:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>You can identify if a function is protected by the presence of <code>__stack_chk_fail</code>. It doesn't matter if it's user-custom code or it is statically compiled from libraries. </p></li>\n<li><p><code>gets</code> is a very problematic function by design. It's impossible to protect it from buffer overflows</p></li>\n</ol>\n<p>For example:</p>\n<pre><code>int main()\n{\n    char buf[2000];\n    gets(buf);\n}\n</code></pre>\n<p>In this case, the stack protection will most likely be on the <code>main</code> function, because of the <code>buf</code> variable.</p>\n</div>",
            "votes": "1",
            "user": "macro_controller",
            "time": "Dec 29, 2019 at 12:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "wfj96649BcaooCom",
                    "text": "<span class=\"comment-copy\">1.  <code>__stack_chk_fail</code> it's part of <code>libssp</code> so if I compile it statically I will not see <code>__stack_chk_fail</code> in code.    2. If stack smash protection used and the code check the magic before return address in stack, how can I over write it and jump to another function even I use <code>gets</code></span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">1. Compile statically means that the function resides within your compiled library, and not in an outside imported library. So it doesn't matter, you will still see a call to the function - once from within your file, and once as an import from outside. Don't be confused with <code>inline</code></span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">2. Yes, this is the purpose of the stack check - if it's enabled you won't be able to exploit the potential overflow caused by <code>gets</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>You can use <a href=\"https://github.com/slimm609/checksec.sh\" rel=\"nofollow noreferrer\">checksec</a> for dynamically linked binaries. However it'll fail for statically compiled binaries. You can try something like this for x86/64 with radare2</li>\n</ol>\n<ul>\n<li>i386</li>\n</ul>\n<pre><code>$ r2 -AAA -qq -c \"pdf @main~gs\" test\n│           0x00000591      658b0d140000.  mov ecx, dword gs:[0x14]\n│           0x000005b6      65331d140000.  xor ebx, dword gs:[0x14]\n</code></pre>\n<ul>\n<li>amd64</li>\n</ul>\n<pre><code>$ r2 -AAA -qq -c \"pdf @main~fs\" test\n│           0x00400b5c      64488b042528.  mov rax, qword fs:[0x28]\n│           0x00400b85      644833142528.  xor rdx, qword fs:[0x28]\n</code></pre>\n<p>In x64 cookie is loaded from <code>fs:[0x28]</code> and in x86 from <code>gs:[0x14]</code> in the function prolog. You can refer to the answer <a href=\"https://reverseengineering.stackexchange.com/questions/19979/what-does-fs-and-gs-registers-provide-in-linux/19983#19983\">here</a></p>\n</div>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Aug 5, 2020 at 11:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}