{
    "title": "Unknown archive format from QNX operating system",
    "link": "https://reverseengineering.stackexchange.com/questions/22350/unknown-archive-format-from-qnx-operating-system",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We are reverse engineering a QNX system and we have found a small file that is uploaded to the system. It appears to be either a file system image or an uncompressed archive of some sort. We can't figure out the check-summing it uses hence I cannot edit the file. I have multiple versions of this file and they all start with the same magic bytes. I have run binwalk and magic over the file and neither return anything interesting.</p>\n<p>We also tried mounting it within a QNX vmware image however it said it was an incorrect format. In case I've dumped it wrong I will next check the linux QNX source code to confirm.</p>\n<p>Any ideas if this is a file system image? The header seems to list file paths/names with padding which with my lack of knowledge I assume is some kind of resource manifest.</p>\n<p>The magic header is 0x77FA77FA</p>\n<p>Does anyone know what this file format is?</p>\n<p>You can download the binary here:\n<a href=\"http://s000.tinyupload.com/index.php?file_id=81688472369674028404\" rel=\"nofollow noreferrer\">http://s000.tinyupload.com/index.php?file_id=81688472369674028404</a></p>\n<p><a href=\"https://i.sstatic.net/mT505.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/mT505.png\"/></a>\n<a href=\"https://i.sstatic.net/ldP5a.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ldP5a.png\"/></a>\n<a href=\"https://i.sstatic.net/dN1Nt.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/dN1Nt.png\"/></a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "334",
    "tags": [
        "binary-analysis",
        "linux",
        "file-format",
        "binary-format",
        "qnx"
    ],
    "user": "rollsch",
    "time": "Oct 19, 2019 at 23:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What version of QNX? Did you find the binary which works with this file?</span>",
            "time": null
        },
        {
            "user": "rollsch",
            "text": "<span class=\"comment-copy\">Unsure and unsure at this stage.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Well, <i>what</i> do you know then? Why do you need to extract this specific file?</span>",
            "time": null
        },
        {
            "user": "rollsch",
            "text": "<span class=\"comment-copy\">We want to modify the config files and repack the file. Currently we can edit it, but the checksums don't match and it rejects it. We don't have access to the QNX system yet, only access to upload this file and nothing else so far. The QNX system is inside a dash cluster in a vehicle and costs a few $k to purchase one to pull apart and attempt to get root access so we are attempting to crack it this way before buying one.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although some clues on the file's origin could be useful, the format seems to be pretty simple so can be deduced from the sample. It is not a full-fledged filesystem but a simple archive/package. </p>\n<p>First, the file's header:</p>\n<pre><code>struct Header\n{\n  uint32 signature;  // 0xFA77FA77\n  uint32 data_start; // offset of the start of file's data\n  uint32 timestamp;  // possibly file's creation time.649953358 corresponds to August 6, 1990 2:35:58 PM\n  uint32 data_end;   // offset of the end of file's data\n  uint32 checksum;   // possibly checksum (CRC-32?)\n  uint32 num_files;  // number of file entries following the header (52)\n  uint32 field_18;   // unknown (0)\n  uint32 field_1C;   // unknown (0xFFFF)\n};\n</code></pre>\n<p>It is followed by <code>num_files</code> records for the files, 0x100 bytes each:</p>\n<pre><code>struct FileRecord\n{\n  char name[224]; //file path (0-padded)\n  uint32 offset;  // offset to data(from header.data_start)\n  uint32 size;       // size of data\n  uint32 field_E8;   // unknown (0); possibly high half of 64-bit size\n  uint32 checksum;   // possibly checksum (CRC-32?)\n  uint32 field_F0;   // unknown (0)\n  uint32 field_F4;   // unknown (0)\n  uint32 field_F8;   // unknown (1)\n  uint32 field_FC;   // unknown (2)\n};\n</code></pre>\n<p>Based on this, creating an extractor should be trivial.</p>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Oct 22, 2019 at 18:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rollsch",
                    "text": "<span class=\"comment-copy\">Thanks. The issue is not so much unpacking (as you showed it is fairly trivial) but rather repacking the file. As we don't have the client binary which reads this file in we don't know how to regenerate the checksum. We could try a bunch of common checksumming routines, but I was hoping there was a simple answer to the 0xFA77FA77 magic number. As it seems it is some proprietary format we will have to attempt to get the client executable or brute force the checksum routine until we find what it uses (might be a simple CRC).</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">I would try to search through QNX binaries for 0xFA77FA77 magic number. The file must be processed by something, thus there must be the code, which verifies the signature. That BMW Infotainment system must somehow parse this KAFAS configuration package.</span>",
                    "time": null
                }
            ]
        }
    ]
}