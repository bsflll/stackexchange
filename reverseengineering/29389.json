{
    "title": "DetourAttach breaks with Illegal Instruction 0xC000001D",
    "link": "https://reverseengineering.stackexchange.com/questions/29389/detourattach-breaks-with-illegal-instruction-0xc000001d",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to detour a function using <code>DetourAttach()</code> in the following fashion:</p>\n<pre><code>hooks::logDebug(\"swresample-3Proxy.log\", fmt::format(\"Try to attach hook. Function {:p}, hook {:p}.\",\n    *hook.first, hook.second));\nwriteProtectedMemory(hook.first, hook.second);\nauto result = DetourAttach(hook.first, hook.second);\n</code></pre>\n<p>Where hook.first = <code>0x00007ff69f119ea0 {Gladius.exe!gladius::Game::main(int,char * *,char * *)} {0x8b4820ec83485340}    void * *</code></p>\n<p>hook.second = <code>0x00007ff818f51ef5 {swresample-3.dll!hooks::gamemainHooked(struct gladius::Game *,int,char * *,char * *)}    void *</code></p>\n<p>But the result comes with the following error:</p>\n<blockquote>\n<p>Exception thrown at 0x00007FF69F119EA1 in Gladius.exe: 0xC000001D:\nIllegal Instruction.</p>\n</blockquote>\n<p>And the question marks (see the screenshot) where the jump instruction supposed to be.</p>\n<p><a href=\"https://i.sstatic.net/FxDmT.png\" rel=\"nofollow noreferrer\"><img alt=\"Memory around detoured function\" src=\"https://i.sstatic.net/FxDmT.png\"/></a></p>\n<p>Would appreciate some help in resolving this...</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "function-hooking",
        "dll-injection",
        "api-reversing"
    ],
    "user": "Irbis77",
    "time": "Oct 10, 2021 at 17:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Fixed with using <a href=\"https://easyhook.github.io/\" rel=\"nofollow noreferrer\">EasyHook</a> instead of Detours. I.e. replaced this piece of code:</p>\n<pre><code>writeProtectedMemory(hook.first, hook.second);\nauto result = DetourAttach(hook.first, hook.second);\n</code></pre>\n<p>with this:</p>\n<pre><code>HOOK_TRACE_INFO hHook = { NULL }; // keep track of our hook\nNTSTATUS result = LhInstallHook(\n    hook.first,\n    hook.second,\n    NULL,\n    &amp;hHook);\n\nULONG ACLEntries[1] = { 0 };\nLhSetInclusiveACL(ACLEntries, 1, &amp;hHook);\n</code></pre>\n<p>Where hook.first = <code>0x00007ff69f119ea0 {Gladius.exe!gladius::Game::main(int,char * *,char * *)} {0x8b4820ec83485340}    void * *</code></p>\n<p>And hook.second = <code>0x00007ff818f51ef5 {swresample-3.dll!hooks::gamemainHooked(struct gladius::Game *,int,char * *,char * *)}    void *</code></p>\n<p>Now the app correctly jumps to the Hooked function.</p>\n<p>P.S. Don't know what is the deal with DetoursAttach() for x64. I have compiled it specifically for that environment.</p>\n<p>May be it doesn't know of how to pass the hook between the threads... Will check that option later.</p>\n</div>",
            "votes": "1",
            "user": "Irbis77",
            "time": "Oct 11, 2021 at 18:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}