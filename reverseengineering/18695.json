{
    "title": "Is IDA pulling my leg - or can REX.W sometimes not be determined in static analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/18695/is-ida-pulling-my-leg-or-can-rex-w-sometimes-not-be-determined-in-static-analy",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>NB: I normally dabble with disassembly (i.e. mnemonics) and only ever look at the raw opcodes when I can't avoid it.</p>\n<p>I have the following line of disassembly of a Windows x64 kernel mode driver, created by IDA Pro 7.1.180227:</p>\n<pre><code>xor     edx, edx\n</code></pre>\n<p>Now I <em>know</em> for a fact that this is in preparation of passing the second parameter to a function via <code>rdx</code>. I also know that the intention of that code is to set said pointer argument to <code>NULL</code>.</p>\n<p>The opcode is <code>33 D2</code>. And cross-referencing that with <a href=\"http://ref.x86asm.net/coder64.html#x33\" rel=\"noreferrer\">the reference</a> or looking at it <a href=\"https://onlinedisassembler.com/odaweb/4CcSHhBe/0\" rel=\"noreferrer\">in ODA</a> yields the same as with IDA: <code>xor edx, edx</code>.</p>\n<p>Now what itches me wrong with this disassembly is that <code>rdx</code>, as a superset of <code>edx</code>, is used elsewhere on that exact code path to store other pointers. So in theory the upper double-word of <code>rdx</code> could be \"dirty\".</p>\n<p>And going by the fact that this is x64 code, I'd expect this to read <code>xor rdx, rdx</code>. Why is that not how it's presented in the disassembly?</p>\n<hr/>\n<p>Now I understand that, as per section 3.6.1 (Table 3-4) of the <a href=\"https://software.intel.com/en-us/articles/intel-sdm\" rel=\"noreferrer\">Intel SDM</a> (05/2018) the REX.W Prefix of the opcode can affect the operand size.</p>\n<p>For this opcode neither the operand-size (66h) nor the address-size (67h) prefix are present.</p>\n<p>So going by the Intel SDM (section \"XORâ€”Logical Exclusive OR\") I should indeed be dealing with opcode <code>33 /r</code> or instruction <code>XOR r32, r/m32</code>, confirming IDAs translation of the opcode. Referring to section 2.1.5 (\"Addressing-Mode Encoding of ModR/M and SIB Bytes\") of the Intel SDM gives us a clue as to how the operand (<code>D2</code>) is encoded and so gives us, from Table 2-2 (\"32-Bit Addressing Forms with the ModR/M Byte\"): <code>EDX/DX/DL/MM2/XMM2</code> as operand.</p>\n<p>Figures.</p>\n<p>However, that would mean that the \"dirty\" upper double-word in <code>rdx</code> would not be zeroed out and thus a garbled/truncated pointer would end up being passed. Given this is kernel mode code, the consequences should be clear.</p>\n<p>I just can't believe that the compiler would make such mistake. So what <em>am I</em> missing?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "x86-64",
        "assembly"
    ],
    "user": "0xC0000022L",
    "time": "Jul 5, 2018 at 14:16",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Could you include some related code? say, code using E/RDX, additional code manipulating it prior to XOR instruction, etc. I've recently encountered a similar issue where after some more thorough investigation the upper half of RDX was indeed always zero, making this an unexploitable bug by the developer.</span>",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "<span class=\"comment-copy\">duplicate of stackoverflow <a href=\"https://stackoverflow.com/q/11177137\">Why do x86-64 instructions on 32-bit registers zero the upper part of the full 64-bit register?</a>, and see also <a href=\"https://stackoverflow.com/q/33666617\">What is the best way to set a register to zero in x86 assembly: xor, mov or and?</a> which explains that 32-bit operand-size is always best (e.g. <code>xor r10d, r10d</code> is not shorter than <code>xor r10,r10</code>, but Silvermont only recognizes 32-bit operand size as a zeroing idiom!)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In x86-64, any operation that affects only the lower 32 bits of a register automatically zeros out the upper 32 bits.</p>\n<p>The relevant part in the Intel Architecture manual is in Volume 1, 3.4.1.1, which states:</p>\n<blockquote>\n<p>When in 64-bit mode, operand size determines the number of valid bits\n  in the destination general-purpose register:</p>\n<ul>\n<li>64-bit operands generate a 64-bit result in the destination general-purpose register.</li>\n<li><strong>32-bit operands generate a 32-bit result, zero-extended to a 64-bit\n  result in the destination general-purpose register.</strong></li>\n<li>8-bit and 16-bit operands generate an 8-bit or 16-bit result. The upper 56 bits or 48 bits (respectively) of the destination general-purpose register are\n  not modified by the operation. If the result of an 8-bit or 16-bit\n  operation is intended for 64-bit address calculation, explicitly\n  sign-extend the register to the full 64-bits.</li>\n</ul>\n</blockquote>\n<p>Thus both forms give the same result, and <code>xor edx, edx</code> is one byte shorter than <code>xor rdx, rdx</code>, so the compiler prefers it.</p>\n</div>",
            "votes": "15",
            "user": "jakobbotsch",
            "time": "Jul 5, 2018 at 14:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">By the way, this also gives other intricacies. For example the NOP instruction is normally 0x90, which is actually <code>xchg eax, eax</code>. But in 64-bit mode this is not a NOP, because it zeros the upper 32 bits. So <code>xchg eax, eax</code> has different encodings in 64-bit and 32-bit mode.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I read about that somewhere, but I did not make the connection.</span>",
                    "time": null
                },
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky Yes, that's what I meant. They had to find a new encoding for <code>xchg eax, eax</code> since that wouldn't be a NOP on x64.</span>",
                    "time": null
                },
                {
                    "user": "Peter Cordes",
                    "text": "<span class=\"comment-copy\">@Joshua: Right, I think what Jakob meant to say is that <i>assemblers</i> can't use the <code>0x90</code> short form for <code>xchg eax,eax</code> in the asm source, and have to use the <code>xchg r, r/m32</code> form with a ModRM byte (<a href=\"http://felixcloutier.com/x86/XCHG.html\" rel=\"nofollow noreferrer\">felixcloutier.com/x86/XCHG.html</a>).  But fun fact, 16 and 64-bit operand sizes can still use <code>0x90</code> with a 66 or REX.W prefix.  NASM does assemble <code>xchg ax,ax</code> to <code>66 90</code> in 64-bit mode.</span>",
                    "time": null
                },
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">@PeterCordes Exactly. I phrased that badly, but we got there in the end!</span>",
                    "time": null
                }
            ]
        }
    ]
}