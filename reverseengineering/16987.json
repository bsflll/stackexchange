{
    "title": "Working backwards from a popup",
    "link": "https://reverseengineering.stackexchange.com/questions/16987/working-backwards-from-a-popup",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently trying to reverse engineer a game,but there's and anti-debug, so far the only leads I've tried to follow are:\nI found an IsDebuggerPresent API, I tried to change the value of EAX by putting in  a hardware breakpoint (write) at the address of the API, then running the debugger and opening general registers and changing EAX it to 0x00000000, but that didn't accomplish anything.</p>\n<p>So I want to know how I can find the origin of this popup in IDA<a href=\"https://i.sstatic.net/NYtGP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NYtGP.png\"/></a></p>\n<p>that way I can start working backwards from the origin and find out where it comes from.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "anti-debugging"
    ],
    "user": "Ayazasker",
    "time": "Dec 16, 2017 at 12:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The error you've received was probably thrown by either <a href=\"https://www.oreans.com/themida.php\" rel=\"noreferrer\">Themida</a> or <a href=\"https://www.oreans.com/winlicense.php\" rel=\"noreferrer\">WinLicense</a>, a well known protectors. I'd say here that fully bypass of both <em>Themida</em> and <em>WinLicense</em> are goals that are hard to reach for an inexperienced reverse engineer.  </p>\n<p>Because it's the 3rd question you ask about this subject, and it seems like you are truly struggle with it, I'll show you a quick <em>step-by-step</em> tutorial of how to bypass <code>IsDebuggerPresent</code> on runtime, from inside IDA and avoid the pop-up message.  </p>\n<hr/>\n<p>First, let's create a small program which all it does will be to check whether it was executed inside a debugger or not:</p>\n<pre><code>#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(){\n    if (IsDebuggerPresent()) {\n        printf(\"Debugger found\\n\");\n    } else {\n        printf(\"Debugger not found\\n\");\n    }\n\n    return 0;\n}\n</code></pre>\n<p>As you can see, the program only contains a <code>main()</code> function which will print \"<em>Debugger found</em>\" or \"<em>Debugger not found</em>\", depends on the result of <code>IsDebuggerPresent()</code>.</p>\n<p>Let's compile the program. I used <a href=\"https://bellard.org/tcc/\" rel=\"noreferrer\">TinyCC</a> because it is less noisy than some of the other compilers. Basically you can use whatever C compiler for windows you wish.</p>\n<pre><code>./tcc.exe check_for_debugger.c\n</code></pre>\n<p>Now that we have an executable <code>.exe</code> file, let's execute it:</p>\n<pre><code>./check_for_debugger.exe\nDebugger not found\n</code></pre>\n<p>As expected, we ended up with \"<em>Debugger not found</em>\" printed to the console. Let's open the executable in IDA Pro. As you can see, the main function looks something like this (click on it to enlarge):</p>\n<p><a href=\"https://i.sstatic.net/42Z96.png\" rel=\"noreferrer\"><img alt=\"main function\" src=\"https://i.sstatic.net/42Z96.png\"/></a></p>\n<p>Let's execute it. You may want to put a breakpoint before the program exits but not before the message is printed.</p>\n<p>We can see that \"Debugger found\" was printed to the console.</p>\n<p>Now let's modify the result of <code>IsDebuggerPresent()</code> by changing the value of <code>eax</code> just after the function was called. For this, we'll create a breakpoint in offset <code>0x0040100F</code> (in my program) which is where the result of <code>IsDebuggerPresent()</code> is checked by <code>test eax, eax</code>.</p>\n<p>Execute the program inside IDA. The program has stopped at our breakpoint on <code>test eax, eax</code> and we can see in the registers panel that <code>eax</code> has non-zero value (in my case eax==1). </p>\n<p><a href=\"https://i.sstatic.net/NZfyX.png\" rel=\"noreferrer\"><img alt=\"eax=1\" src=\"https://i.sstatic.net/NZfyX.png\"/></a></p>\n<p>Let's right click on <code>eax</code> and choose \"Zero value\", and immediately the value of <code>eax</code> will changed to zero.</p>\n<p><a href=\"https://i.sstatic.net/0sYVf.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/0sYVf.png\"/></a></p>\n<p>Now let's continue the execution (don't forget the breakpoint before <code>exit()</code> in case you removed it for some reason). And as we wanted, the message \"<em>Debugger not found</em>\" is printed in the console.</p>\n<hr/>\n<p>Hope you understood how to bypass <code>IsDebuggerPresent</code> by modifying the value of <code>eax</code>, now you can continue your reverse-engineering process.</p>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Dec 16, 2017 at 14:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ayazasker",
                    "text": "<span class=\"comment-copy\">Thanks , I did exactly the same things the last time I posted. I thought it would be simple , well I guess there are more anti-debugging techniques</span>",
                    "time": null
                },
                {
                    "user": "Ayazasker",
                    "text": "<span class=\"comment-copy\">So I did the right thing , but I thought I was doing something wrong. Which means there are more anti-debugging techniques.</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">That's true, software protectors are reach in anti-debug tricks and as I said, this is not going to be easy at all to completely bypass them. Anyway, this is how you bypass IsDebuggerPresent and if you'll check you can see that probably other anti-analysis trick is catching you.</span>",
                    "time": null
                }
            ]
        }
    ]
}