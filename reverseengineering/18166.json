{
    "title": "Reverse mips binary with radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/18166/reverse-mips-binary-with-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>when I try to reverse my mips binary in radare2, I take some instruction invalid.</p>\n<pre><code>sudo r2 -a mips -b 32 -d 2700\n</code></pre>\n<p>start my binary:</p>\n<pre><code>sudo chroot . ./qemu-mips-static bin/resident\n</code></pre>\n<p>Sorry for this picture, but Internet in my pc is of:</p>\n<p><a href=\"https://i.sstatic.net/pg5pX.jpg\" rel=\"nofollow noreferrer\"><img alt=\"rabin2\" src=\"https://i.sstatic.net/pg5pX.jpg\"/></a></p>\n<p><a href=\"https://i.sstatic.net/xVYSV.jpg\" rel=\"nofollow noreferrer\"><img alt=\"code\" src=\"https://i.sstatic.net/xVYSV.jpg\"/></a></p>\n<p>Program don't work, his fault and exit. Please help.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "radare2",
        "mips"
    ],
    "user": "Vasiliy Kuramshin",
    "time": "May 4, 2018 at 20:18",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">What is your version of radare2 (paste the output of <code>r2 - v</code>)? Is 2700 the pid of the process? Please share more information.</span>",
            "time": null
        },
        {
            "user": "Vasiliy Kuramshin",
            "text": "<span class=\"comment-copy\">@Megabeets Yes, 2700 is a process. <code>radare2 2.6.0-git 18087 @ linux-x86-64 git.2.5.0-176-gcbe9a12be commit: cbe9a12be2d1d8cc39b757b9034cb29ce097e768 build: 2018-05-04__22:24:54</code></span>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">What happens after you do <code>e asm.bits=32</code> and than pd 10?</span>",
            "time": null
        },
        {
            "user": "Vasiliy Kuramshin",
            "text": "<span class=\"comment-copy\">@Megabeets I try, but no change. I paste my <code>e</code> full config in main post.</span>",
            "time": null
        },
        {
            "user": "Vasiliy Kuramshin",
            "text": "<span class=\"comment-copy\">@Megabeets When I try 'e cfg.bigendian=true' the situation is improving slightly, but there are still unidentified teams.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The the base address of the binary given as <code>0x60000000</code> in the screenshot (<code>bin.baddr = 0x60000000</code>). This does not seem to be correct. The address of the first loadable segment in the binary is <code>0x00400000</code>, and the entry point address (in other words, the address of <code>_start</code>) is <code>0x405090</code>.</p>\n<hr/>\n<p>By \"this file\" do you mean the one called <code>resident</code> from <a href=\"https://drive.google.com/open?id=1socXlGx84o25QpfNjNJRAR1ldM4IQoK0\" rel=\"nofollow noreferrer\">https://drive.google.com/open?id=1socXlGx84o25QpfNjNJRAR1ldM4IQoK0</a> ?</p>\n<pre><code>$ md5sum resident\n75e019a169403e19eb59c59961d5bddf  resident\n</code></pre>\n<p><a href=\"https://www.virustotal.com/#/file/bc1f644cee8ac02f8a30527e1840ad154b185957661feb02bf9cc90bd8745320/details\" rel=\"nofollow noreferrer\">It came up clean</a> on VirusTotal . </p>\n<p>There is nothing remarkable about this binary as far as I can tell. The header is not malformed, there is no evidence of packing and the code in the binary can be disassembled just fine.</p>\n<p>Entropy plot:\n<a href=\"https://i.sstatic.net/LoA41.png\" rel=\"nofollow noreferrer\"><img alt=\"file entropy plot\" src=\"https://i.sstatic.net/LoA41.png\"/></a></p>\n<p>Hex dump of ELF header: </p>\n<pre><code>$ hexdump -C -n 52 resident\n00000000  7f 45 4c 46 01 02 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n00000010  00 02 00 08 00 00 00 01  00 40 50 90 00 00 00 34  |<a class=\"__cf_email__\" data-cfemail=\"f8d6d6d6d6d6d6d6d6d6b8a8d6d6d6d6cc\" href=\"/cdn-cgi/l/email-protection\">[emailÂ protected]</a>|\n00000020  00 01 91 30 70 00 10 07  00 34 00 20 00 08 00 28  |...0p....4. ...(|\n00000030  00 1a 00 19                                       |....|\n00000034\n</code></pre>\n<p><code>readelf -h</code> output (take note of the entry point address <code>0x405090</code>):</p>\n<pre><code>$ readelf -h resident \nELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           MIPS R3000\n  Version:                           0x1\n  Entry point address:               0x405090               &lt;--------\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          102704 (bytes into file)\n  Flags:                             0x70001007, noreorder, pic, cpic, o32, mips32r2\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         8\n  Size of section headers:           40 (bytes)\n  Number of section headers:         26\n  Section header string table index: 25\n</code></pre>\n<p>A visual display of the above information:</p>\n<p><a href=\"https://i.sstatic.net/7QdVa.png\" rel=\"nofollow noreferrer\"><img alt=\"ELF header visualization\" src=\"https://i.sstatic.net/7QdVa.png\"/></a></p>\n<p>disassembly beginning at entry point <code>0x405090</code>:</p>\n<pre><code>$ r2 -a mips resident\n -- There's no way you could crash radare2. No. Way.\n[0x00405090]&gt; pd\n            ;-- entry0:\n            ;-- __start:\n            0x00405090      03e00021       move zero, ra\n            0x00405094      04110001       bal 0x40509c\n            0x00405098      00000000       nop\n            0x0040509c      3c1c0043       lui gp, 0x43\n            0x004050a0      279cf770       addiu gp, gp, -0x890\n            0x004050a4      0000f821       move ra, zero\n            0x004050a8      8f848018       lw a0, -0x7fe8(gp)\n            0x004050ac      8fa50000       lw a1, (sp)\n            0x004050b0      27a60004       addiu a2, sp, 4\n            0x004050b4      2401fff8       addiu at, zero, -8\n            0x004050b8      03a1e824       and sp, sp, at\n            0x004050bc      27bdffe0       addiu sp, sp, -0x20\n            0x004050c0      8f87801c       lw a3, -0x7fe4(gp)\n            0x004050c4      8f888020       lw t0, -0x7fe0(gp)\n            0x004050c8      afa80010       sw t0, 0x10(sp)\n            0x004050cc      afa20014       sw v0, 0x14(sp)\n            0x004050d0      afbd0018       sw sp, 0x18(sp)\n            0x004050d4      8f9983d0       lw t9, -0x7c30(gp)\n            0x004050d8      0320f809       jalr t9\n            &lt; output snipped &gt;\n</code></pre>\n<p>Take note of the address of the first loadable segment of the binary:</p>\n<pre><code>$ readelf -l resident\n\nElf file type is EXEC (Executable file)\nEntry point 0x405090\nThere are 8 program headers, starting at offset 52\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  PHDR           0x000034 0x00400034 0x00400034 0x00100 0x00100 R E 0x4\n  INTERP         0x000134 0x00400134 0x00400134 0x00014 0x00014 R   0x1\n      [Requesting program interpreter: /lib/ld-uClibc.so.0]\n  REGINFO        0x000148 0x00400148 0x00400148 0x00018 0x00018 R   0x4\n  LOAD           0x000000 0x00400000 0x00400000 0x166d8 0x166d8 R E 0x10000  &lt;----\n  LOAD           0x017000 0x00427000 0x00427000 0x00db0 0x00f18 RW  0x10000\n  DYNAMIC        0x000160 0x00400160 0x00400160 0x000f0 0x000f0 RWE 0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10\n  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4\n</code></pre>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "May 6, 2018 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vasiliy Kuramshin",
                    "text": "<span class=\"comment-copy\">OK. First, this not a virus, I think this a backdoor maid in factory. You check the static analys, if you see the 'strings' output, you see some intresting string. But I want dynamic analys. If I set 'bin.baddr' in start radare, it solve the problem?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@VasiliyKuramshin The point is that there is no evidence of anti-analysis tricks. Section information is present, the entry point in conventional, etc. Meaning that the error you are seeing is not due to some aspect of the binary interfering with loading it into virtual memory. It is either emulation environment error or user error. Either way, it is not a reverse engineering problem.</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">@SYS_V - what tool did you use to generate that header visualization? I haven't seen that before, looks pretty cool.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@3pidemix it is a tool I am developing to visually explore ELF binaries. I can ping you once I release it, if you are interested. It will take a while though.</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">Please do, it looks like it would be a great educational tool!</span>",
                    "time": null
                }
            ]
        }
    ]
}