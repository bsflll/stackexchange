{
    "title": "Unknown (and unowned) USB device",
    "link": "https://reverseengineering.stackexchange.com/questions/26358/unknown-and-unowned-usb-device",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I rarely run Windows, but have some Windows software I'd like to take a look at. This doesn't require a security \"dongle\", but won't start without the presence of a particular USB-connected peripheral about which virtually nothing is known.</p>\n<p>The software I have is Brother PE-Design Plus, which prepares .pes files for their embroidery machines. The hardware is described as \"04f9:2100 Brother Industries, Ltd Card Reader Writer\".</p>\n<p>This is not at all \"mission critical\" for me since the machine I'm looking at can be configured using a USB \"thumb drive\", but older machines /have/ to be programmed via one of these writers.</p>\n<p>The writers are scarce and expensive. Older variants for the same type of card were connected to a serial port, but the software I have appears to be USB-specific. The card has a chip under an epoxy blob, which is suspected to be a 512Kbyte Flash device.</p>\n<p>After installation, the Brother software includes a file CardIO.dll, which encodes the correct USB vid:pid numbers and has what looks like card-related debugging messages and mangled C++ entry point names including ?ChkCardWriterConnected@CCardIO@@QAE?AW4CIOError@@HPAEPAH@Z</p>\n<p>There is nothing in that file which indicates what type of device is expected (i.e. USB serial vs HID etc.) but my knowledge of the inside of Windows drivers is limited.</p>\n<p>I was thinking that I might be able to program a Teensy (I think I've got a 3.5) to emulate the various USB device types and see if I could at least work out what sort of device type the Brother software was expecting. Otherwise I'm aware of e.g. <a href=\"https://hackaday.com/2019/07/02/hands-on-greatfet-is-an-embedded-tool-that-does-it-all/\" rel=\"nofollow noreferrer\">https://hackaday.com/2019/07/02/hands-on-greatfet-is-an-embedded-tool-that-does-it-all/</a> and the Facedancer project, however I think that most things like this are more oriented to analysing available hardware rather than something unseen.</p>\n<p>Wireshark on Windows shows nothing. I've not yet tried setting up Windows under Qemu (etc.) and seeing whether I can track anything at the hardware level, but I suspect that detection is based on a hotplug event which tells Windows that it is to respond positively to a presence query.</p>\n<p>Any thoughts would be appreciated.</p>\n<p>A few days later: It looks as though having any USB device with the correct vid:pid doublet is sufficient to get the Brother card reader driver loaded, but not to get the app running (and nothing useful shows up in Wireshark). I've been using a Teensy 3.5 set up as a rawhid device, I'm not sure whether the type of device matters since I suspect I'm up against OS caching issues which muddy the water.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "196",
    "tags": [
        "usb"
    ],
    "user": "Mark Morgan Lloyd",
    "time": "Nov 26, 2020 at 12:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My first approach would be, to collect traces from working system:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-event-tracing-for-windows\" rel=\"nofollow noreferrer\">USB Event Tracing for Windows</a></p>\n<p>If from this information cannot work out what is going on a software protocol analyzer, such as these:</p>\n<p><a href=\"http://USBTrace%20:%20USB%20Protocol%20Analyzer%20Software%20for%20Windows\" rel=\"nofollow noreferrer\">http://www.sysnucleus.com/</a></p>\n<p><a href=\"https://www.usblyzer.com/\" rel=\"nofollow noreferrer\">https://www.usblyzer.com/</a></p>\n<p><a href=\"https://wiki.wireshark.org/CaptureSetup/USB\" rel=\"nofollow noreferrer\">https://wiki.wireshark.org/CaptureSetup/USB</a></p>\n<p>Sometimes I have had different results with a different tool so it can be worth trying different software protocol analyzers for your scenario. If this is not sufficient, in some cases it is necessary to finally resort to a hardware USB protocol analyzer. These can sit between the USB port and the device and capture everything without relying on software within the PC, helpful if the driver is explicitly trying to block/bypass software protocol analyzer.</p>\n<p>I'm not familiar with this particular device but in some cases the detection is more complicated then simply detected particular type of device connected, in some case the USB device may contain information that the application would not be able to run unless that data was available.</p>\n<p>Depending on your requirements sometimes a solution such as <a href=\"https://www.donglify.net/\" rel=\"nofollow noreferrer\">donglify</a> which allows sharing USB dongles over a network can help meet needs.</p>\n<p>For complex scenarios a complete dongle emulation is required. You may find examples of other work in this area searching internet for information on copying / emulating USB dongles, however there is not one generic solution for this.</p>\n<p>If the actual working device is not available then I would use a combination of the following tools to analyze the program that is not launching without the hardware:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/procmon\" rel=\"nofollow noreferrer\">Process Monitor</a> With this tool easy to observe if application is looking for specific files or registry keys.\n<a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow noreferrer\">API Monitor</a> Can analyze the app at the Windows API level. For example simply monitoring the C++ Runtime \"Strings\" operations may determine what it is looking for exactly.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-record\" rel=\"nofollow noreferrer\">WinDbg Time Travel Debugging</a></p>\n<p>Reverse engineering software such as <a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">IDA Pro</a> / <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">Ghidra</a></p>\n</div>",
            "votes": "0",
            "user": "chentiangemalc",
            "time": "Nov 26, 2020 at 22:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mark Morgan Lloyd",
                    "text": "<span class=\"comment-copy\">I can assure you that it would be my approach as well- as it has been numerous times in the past- but virtually nobody has one of these devices.</span>",
                    "time": null
                },
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">I managed to have my company provide me one once for a project, but it was the only time i ever used one and very $$$, I have heard chap option is ezSniffer but I have not used it and probably more fiddling to get working</span>",
                    "time": null
                },
                {
                    "user": "Mark Morgan Lloyd",
                    "text": "<span class=\"comment-copy\">Sorry, you misunderstand. There's plenty of ways of sniffing USB these days: starting off with Wireshark (which I've already says doesn't help) and moving on through BeagleBones etc. The problem here is the device I'm trying to deduce the properties of: there's very few around and buying one second hand would probably knock me back £150 or so.</span>",
                    "time": null
                },
                {
                    "user": "chentiangemalc",
                    "text": "<span class=\"comment-copy\">Is the software that doesn’t launch available for download somewhere?</span>",
                    "time": null
                },
                {
                    "user": "Mark Morgan Lloyd",
                    "text": "<span class=\"comment-copy\">Not legally, I've got a 2nd-hand CD and it's buried in installation files.</span>",
                    "time": null
                }
            ]
        }
    ]
}