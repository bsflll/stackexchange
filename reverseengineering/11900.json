{
    "title": "Ollydbg -how to call procedure in other DLL (in my case USER32.DLL)",
    "link": "https://reverseengineering.stackexchange.com/questions/11900/ollydbg-how-to-call-procedure-in-other-dll-in-my-case-user32-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to call the USER32.DLL function from assembly code.  I launched an application (calc.exe) in Ollydbg 2.01.  I chose calc.exe just because I know it loads USER32.DLL.  </p>\n<p>I see the format as:</p>\n<pre><code>MessageBox(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, uType);\n        hWnd=0 usually  \"If this parameter is NULL, the message box has no owner window\"\n        uType = MB_OK =0 for OK button only\n</code></pre>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505(v=vs.85).aspx\" rel=\"nofollow noreferrer\">link</a></p>\n<p>I'm pushing the 4 values on the stack and then trying to enter the following into Olly:</p>\n<pre><code>CALL DWORD PTR DS:[&lt;&amp;USER32.MessageBoxA&gt;]\n</code></pre>\n<p>But Olly won't assemble it and gives me the error \"Please specify module\"\n(as in <a href=\"http://d2mods.info/forum/viewtopic.php?f=8&amp;t=62663&amp;p=485080\" rel=\"nofollow noreferrer\">link</a>)</p>\n<p><a href=\"https://i.sstatic.net/xUC75.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/xUC75.png\"/></a></p>\n<p>I know USER32.DLL is loaded: <a href=\"https://i.sstatic.net/VfsJM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VfsJM.png\"/></a></p>\n<p>and I do see that messagebox procedure is in memory<a href=\"https://i.sstatic.net/eORBR.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/eORBR.png\"/></a>:</p>\n<hr/>\n<p>Edit: It appears I can't use the exact syntax Olly disassembles as.  For example, calc.exe calls USER32.MessageBeep, but it does it indirectly by using an addressed stored at 00121420 = &amp;USER32.MessageBeep.</p>\n<pre><code>00145C19  |.  FF15 20141200 CALL DWORD PTR DS:[&lt;&amp;USER32.MessageBeep&gt; ; \\USER32.MessageBeep\n</code></pre>\n<p>To get Olly to create the same instruction I would double-click and assemble:</p>\n<pre><code>CALL DWORD PTR DS:[00121420]\n</code></pre>\n<p>and then </p>\n<pre><code>00145C19  |.  FF15 20141200 CALL DWORD PTR DS:[&lt;&amp;USER32.MessageBeep&gt; ; \\USER32.MessageBeep\n</code></pre>\n<p>will appear.  It would be nice if I could figure out how to type the label USER32.MessageBeep instead of hunting for it and copy/pasting the address.</p>\n<p>It seems perhaps there is more to know before one can simply call a function in a loaded DLL. When I see people edit patches in Olly to call procedures from other modules they seem to be only calling procedures already called by the original program, whereas for USER32.DLL with MessageBoxA I have the extra challenge of it not being in memory.  I got strange results when I tried to call the messagebox (it appeared in the background but wouldn't let the mouse go near it and returned to a strange address of 90909090 -possibly due to my next instruction opcodes).   Perhaps this strange behavior is due to it having needed to do some setup for messageboxes which wasn't done by the program.  </p>\n<p>So perhaps an answer to my question depends on whether the procedure is somehow already loaded by the original program.  In Blabbb's answer, s/he uses notepad.exe not calc.exe.  </p>\n<p>My question is perhaps getting more unfocused but perhaps a good answer to my question could explain how other modules are loaded, as well as how to make this happen in Ollydbg.  I am still learning how PE applications are loaded into memory but I wonder if the answer is that to go between modules we shouldn't expect to see the relative CALL opcode E8 (see blabbb's comment below) since the programmer doesn't know what address in memory the DLL procedure will be loaded into, and in the original program they must go indirectly through an indirect CALL with opcode FF15 instead.  I assume this may be related to the act of \"registering a DLL function maybe?\".  In calc.exe it looks like MessageBoxA can't be called indirectly (unless if I edit memory somewhere with its address perhaps).  But if I am paused inside a program already loaded into Olly I should be able to assemble these relative CALL instructions and invoke the procedure. </p>\n<p>In my case with calc.exe I see some, but not all, USER32.DLL procedures in the calc .text part of memory.  It appears programs call them indirectly through this list.  For example here are some of the USER32\n<a href=\"https://i.sstatic.net/JdM6u.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/JdM6u.png\"/></a></p>\n<p>With calc.exe I can't find MessageBoxA here, but if I look for its address in the USER32.DLL module, and select names (see below)</p>\n<p><a href=\"https://i.sstatic.net/6UDmw.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/6UDmw.png\"/></a></p>\n<p>I can sort by name, and start typing the name so it finds it for me</p>\n<p><a href=\"https://i.sstatic.net/NEZsU.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NEZsU.png\"/></a></p>\n<p>and then assemble call 7634FD1E</p>\n<pre><code>00148C40      6A 00         PUSH 0\n00148C42      68 598C1400   PUSH 00148C59                            ; ASCII \"cap\"\n00148C47      68 5D8C1400   PUSH 00148C5D                            ; ASCII \"text\"\n00148C4C      6A 00         PUSH 0\n00148C4E      E8 CB702076   CALL MessageBoxA\n</code></pre>\n<p><a href=\"https://i.sstatic.net/AyAXE.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/AyAXE.png\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "Markbotix",
    "time": "Jan 31, 2016 at 7:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Names are meaningless unless you speak the language of the interpreter binary is universal<br/>\nwhen in doubt choose binary<br/>\nuse <code>call 12345678</code> instead of <code>call @lkfklsdf.skhfkhfasfhkasjfh</code><br/>\nor learn the language </p>\n<pre><code>call DWORD [user32.MessageBoxA] \n</code></pre>\n<p>and it should take no more than a few minutes to form logic instead of hours waiting for a reply in a forum </p>\n<p>screen shot shows a few variation of the call syntax<br/>\nexplore and experiment things before asking questions </p>\n<p>edit </p>\n<pre><code>ff 15 is an indirect call \ne8 is a direct call \n</code></pre>\n<p>if the dll is loaded then you can call with <code>E8</code><br/>\nan indirect call needs an import already resolved<br/>\nin the example though the indirect call is resolved<br/>\nit will  be calling a DWORD pointed by the symbol (bogus address)<br/>\nbehavior does not matter if it calc or notepad if you noticed i am     assembling on ntdll address space     </p>\n<p><a href=\"https://i.sstatic.net/VDYeM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VDYeM.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/1AQTz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/1AQTz.png\"/></a></p>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Jan 31, 2016 at 16:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">I do look for a while and try things before I bother the world with a question.  Likely if I have trouble and ask, it will help others too.  When I get it figured out completely, I'll answer my own question then if no one provides a full satisfactory answer.  So far, I realize E8=opcode for CALL that is relative to the next instructions address, and FF15 is an indirect call.  The indirect CALL is through an address already loaded into the memory of the process.  On that I realize that the program has to have loaded it it seems, because user32.messageboxA isn't working for calc.exe, but beep is</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">edited to add more info</span>",
                    "time": null
                }
            ]
        }
    ]
}