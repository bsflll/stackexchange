{
    "title": "GetProcAddress with 0 as lpProcName",
    "link": "https://reverseengineering.stackexchange.com/questions/21341/getprocaddress-with-0-as-lpprocname",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a 32bit binary for a challenge I got at a college lab and I'm having a hard time trying to understand the intent of the asm code.</p>\n<p>The binary is a 10 level reversing game where you get no info at the start and have to figure out everything on your way on building a flag at the end.</p>\n<p>Basically it uses a lot of encryption techniques to derive strings from integer values (as far as I got). I figured out some of the imports it uses like <code>LoadLibraryA</code>, <code>GetProcAddress</code> (I guess it uses them later on somehow). </p>\n<p>Where I'm currently stuck is the asm code calls <code>GetProcAddress</code> with <code>kernel32.dll</code> handle as the first argument and <code>0</code>( or <code>NULL</code> I guess ) as the second argument. The return I get is then used to make some integer division. My problem is that I get <code>NULL</code> from the <code>GetProcAddress</code> call and then when hitting the <code>idiv</code>, I get a Division By 0 Exception thrown. </p>\n<p>Here's a picture: <a href=\"https://i.sstatic.net/99GSs.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/99GSs.png\"/></a></p>\n<p>On <code>0x00401A85</code> <code>eax</code> is <code>0</code>(<code>NULL</code>). Any ideas on how to solve this? What's the idea behind passing <code>0</code>(<code>NULL</code>) as the second parameter?</p>\n<p>Thanks!</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "912",
    "tags": [
        "ida",
        "binary-analysis",
        "pe32"
    ],
    "user": "Daniel Bejan",
    "time": "May 21, 2019 at 11:37",
    "comments": [
        {
            "user": "ismael_akez",
            "text": "<span class=\"comment-copy\">It might be an (0)ordinal number, but it might thrown exception by dividing to zero, in that case, check if there is an SEH.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getprocaddress\" rel=\"nofollow noreferrer\">Microsoft Docs: GetProcAddress</a>:</p>\n<blockquote>\n<pre><code>lpProcName\n</code></pre>\n<p>The function or variable name, or the function's ordinal value. If\n  this parameter is an <strong>ordinal value</strong>, it must be in the low-order\n  word; the high-order word must be zero.</p>\n</blockquote>\n<p>Here the second parameter is an <em>ordinal value</em>. This may be done intentionally to hide the function name that the program imports. According to <a href=\"https://en.wikipedia.org/wiki/Dynamic-link_library\" rel=\"nofollow noreferrer\">Wikipedia: DLL</a>:</p>\n<blockquote>\n<p>Each function exported by a DLL is identified by a numeric ordinal and\n  optionally a name. Likewise, functions can be imported from a DLL\n  either by ordinal or by name. The ordinal represents the position of\n  the function's address pointer in the DLL Export Address table. It is\n  common for <strong>internal functions</strong> to be exported by ordinal only. For\n  most Windows API functions only the names are preserved across\n  different Windows releases; the ordinals are <strong>subject to change</strong>.</p>\n</blockquote>\n<p>To get the function name first see the DLL file name in <code>LoadLibrary()</code> or <code>LoadLibraryEx()</code>. Open that DLL in IDA. Go to View Menu &gt; Open subviews &gt; Exports. Or use <code>dumpbin /exports mydll.dll</code> command to list all the exported functions and their corresponding ordinals. See <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/dumpbin-reference\" rel=\"nofollow noreferrer\">dumpbin reference</a> for further details. </p>\n</div>",
            "votes": "1",
            "user": "Biswapriyo",
            "time": "May 21, 2019 at 13:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "josh poley",
                    "text": "<span class=\"comment-copy\">kernel32.dll typically has an <code>Ordinal Base</code> of 1, which means an ordinal of zero would be invalid.</span>",
                    "time": null
                },
                {
                    "user": "Daniel Bejan",
                    "text": "<span class=\"comment-copy\">Yes, @joshpoley, that's what I also found.. And then division crashes my program. I'm not sure yet if I'm on the right path. I asked my teacher for some guidance and he told me to look more into error handling and debugger evasion techniques which I found an example here: <a href=\"https://www.autosectools.com/Anti-Debugging-With-Exceptions.pdf\" rel=\"nofollow noreferrer\">autosectools.com/Anti-Debugging-With-Exceptions.pdf</a></span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Using exceptions may be a way to detect debuggers. However, you should have the possibility to pass the exception to the application when debugger receives it. I would give it a try, if such anti-debugging technique is present in code you are analysing. That way, the application will receive an exception as it expects and won't realise that it's being debugged.</span>",
                    "time": null
                },
                {
                    "user": "Daniel Bejan",
                    "text": "<span class=\"comment-copy\">Turned out it was just a dead end inserted in the code as a trick to \"eat\" out time out.. My teacher gave me a tip into trying not to get in that area of the code and I was able to solve it after that</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Turned out it was just a trick inserted in the code to distract us. What can I say, it was very successful haha. I ended up asking my teacher and he told me to try and avoid getting into that part of the code and after that I was able to see my mistake. Definitely learned something by falling into that trap</p>\n</div>",
            "votes": "1",
            "user": "Daniel Bejan",
            "time": "May 26, 2019 at 18:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rainb",
                    "text": "<span class=\"comment-copy\">well, but, what does it do, trick or not?</span>",
                    "time": null
                }
            ]
        }
    ]
}