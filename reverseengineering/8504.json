{
    "title": "Problem finding return address for shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/8504/problem-finding-return-address-for-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Howdy guys and ghouls,</p>\n<p>I've got a classic b0f, in fact it's the protostar stack5 exercise</p>\n<p><a href=\"https://exploit-exercises.com/protostar/stack5/\" rel=\"nofollow\" title=\"link to stack 5\">link to stack5 code</a></p>\n<p>Now I have the buffer + shellcode running up to overwriting EIP and I need to provide the address to overflow EIP. What's the right way of deducing the return address? I've tried ESP - len(shellcode) but this doesn't seem to work.</p>\n<p>How do you go about calculating the right return address (the more precise the better)?</p>\n<p>GDB related examples appreciated.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "15k",
    "tags": [
        "gdb",
        "buffer-overflow"
    ],
    "user": "LordGiveMeEIP",
    "time": "Mar 19, 2015 at 23:35",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">This question might be better asked at <a href=\"http://security.stackexchange.com/\">security.stackexchange.com</a></span>",
            "time": null
        },
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">overflow EIP? you're sure you're not mixing register names?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Nothing easier than that. <code>gdb</code> the executable, set a breakpoint at <code>main</code>, have gdb print your buffer.</p>\n<pre><code>$ gdb /opt/protostar/bin/stack5\n(gdb) break main\nBreakpoint 1 at 0x80483cd: file stack5/stack5.c, line 10.\n(gdb) run\nStarting program: /tmp/stack5 \n\nBreakpoint 1, main (argc=1, argv=0xffffd674) at stack5/stack5.c:10\n10  stack5/stack5.c: No such file or directory.\n(gdb) print &amp;buffer\n$1 = (char (*)[64]) 0xbffff838\n(gdb) \n</code></pre>\n<p>So, if your shellcode starts at byte 0 of the buffer, you want to overwrite the saved EIP on the stack with <code>0xbffff838</code>.</p>\n<p>In fact, to make your exploit independent from small changes in the program (one more local variable, or one less ...) i'd fill the buffer with 32 <code>nop</code>s (<code>0x90</code>) and put my shellcode behind those <code>nop</code>s. This still leaves you with 32 bytes for the shellcode, which should be plenty. Then, jump to <code>0xbffff848</code> which is 16 bytes into the nops, and shifting them around by a few bytes won't hurt you anymore.</p>\n<p>At the end, instead of calculating how many bytes between the end of the buffer and the saved <code>EIP</code>, i'd just repeat the buffer address a few times, so you can be sure EIP gets overwritten; you don't really care about whatever else is there.</p>\n<p>So to sum it up, your input should be</p>\n<pre><code>0x90 (32 times)\nyour shellcode\nas many 0x90's as you need to fill the buffer to 64 bytes\n0x48 0xf8 0xff 0xbf  repeated about 10 times.\n</code></pre>\n<p>Remember to swap the <code>EIP</code> bytes because we're on a little endian machine.</p>\n</div>",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Mar 20, 2015 at 18:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Aaron Esau",
                    "text": "<span class=\"comment-copy\"><code>(gdb) print &amp;buffer</code> returns <code>No symbol \"buffer\" in current context.</code></span>",
                    "time": null
                },
                {
                    "user": "Micha≈Ç Szkudlarek",
                    "text": "<span class=\"comment-copy\">@Guntram Blohm How to make sure that each time you run program, you have the same return address? Does it change with each execution of program?</span>",
                    "time": null
                }
            ]
        }
    ]
}