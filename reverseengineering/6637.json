{
    "title": "windbg: How to determine the opcode for an assembly language instruction or set of instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/6637/windbg-how-to-determine-the-opcode-for-an-assembly-language-instruction-or-set",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on an assignment to perform an exploit using a rop chain.\nWhile I understand the basics behind rop, I don't know how to convert instructions like</p>\n<pre><code>xchg eax, esp; retn;\n</code></pre>\n<p>to their opcodes.</p>\n<p>I tried using:</p>\n<pre><code>0:005&gt; a\ninput&gt; xchg eax,esp\n</code></pre>\n<p>but the address given just points to a totally different kind of instruction in my program.\nI believe it was an add command.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "6k",
    "tags": [
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Feb 4, 2015 at 6:16",
    "comments": [
        {
            "user": "dnraikes",
            "text": "<span class=\"comment-copy\">@yyVob, thanks this really helped clear up the use of windbg to find the opcodes I need.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.woodmann.com/collaborative/tools/index.php/RTA\" rel=\"nofollow noreferrer\">RTA</a> is an easy to use tool that allows you to enter either opcodes or mnemonics and will convert them from one to the other.</p>\n<p>In the example below, I entered <code>XCHG EAX,ESP</code> and <code>RETN</code> on the right, and RTA produced <code>94</code> and <code>C3</code> on the left:</p>\n<p><img alt=\"RTA\" src=\"https://i.sstatic.net/FLGrT.png\"/></p>\n<p>If, on the other hand, you really want to use WinDbg, then you need to do the following:</p>\n<ol>\n<li>Load a target into WinDbg</li>\n<li>Type <kbd>a</kbd>, <kbd>Enter</kbd> to enter Input mode</li>\n<li>Type your mnemonics (for example, <code>xchg eax,esp</code>), <kbd>Enter</kbd></li>\n<li>Press <kbd>Enter</kbd> again to escape Input mode</li>\n<li>Type <kbd>u</kbd>, <kbd>Enter</kbd> to show the disassembly of what you just assembled</li>\n</ol>\n<p>â€‹See below for an example:</p>\n<pre><code>0:000&gt; a\n778e05a6 xchg eax,esp\nxchg eax,esp\n778e05a7 \n\n0:000&gt; u\nntdll!LdrVerifyImageMatchesChecksum+0x633:\n778e05a6 94              xchg    eax,esp\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Nov 15, 2014 at 16:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">Please note that using the <code>a</code> command with no parameters will start overwriting bytes at the instruction pointer. To create scratch space specifically for assembling instructions, use <code>.dvalloc</code>, then call <code>a</code> with the address of the allocated memory.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use assembler. \nOr online assembler such as <a href=\"https://defuse.ca/online-x86-assembler.htm\" rel=\"nofollow\">this</a>\nOr you can use Ida's Edit--&gt;Patch program--&gt;Assemble submenu if you use Ida.</p>\n</div>",
            "votes": "0",
            "user": "w s",
            "time": "Nov 15, 2014 at 9:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}