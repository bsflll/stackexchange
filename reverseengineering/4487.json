{
    "title": "How can a format string vulnerability be used to write a specific string into memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/4487/how-can-a-format-string-vulnerability-be-used-to-write-a-specific-string-into-me",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think I understand how a format string vulnerability works, but what I have seen so far it can only be used to increase the value of an integer.</p>\n<p>Can format string vulnerability also be used to write anything else?</p>\n<p>And, by the way, are there languages, other then C and C++, that are at risk of creating such a vulnerability? How can I spot a format string vulnerability if I only have a binary?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "6k",
    "tags": [
        "binary-analysis",
        "c",
        "c++",
        "vulnerability-analysis",
        "strings"
    ],
    "user": "newbie2463465",
    "time": "May 30, 2014 at 15:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a lot of questions, here are a few answers:</p>\n<h2>How can we write something in memory with a format string vulnerability ?</h2>\n<p>For this, you need to know two specific features used in the <code>printf</code> format string specifications. First, <code>%n</code> is a format specifier that has the following effect (according to the manual page):</p>\n<blockquote>\n<p><code>%n</code> The number of characters written so far is stored into the integer indicated by the <code>int *</code> (or variant) pointer argument. No argument is converted.</p>\n</blockquote>\n<p>Now, the second format string feature will allow us to select a specific argument from the format string. The main selection operator is <code>$</code>, and the following code means that we select the second argument (here the outcome will be to display <code>2</code>):</p>\n<pre><code>printf(\"%2$x\", 1, 2, 3)\n</code></pre>\n<p>But, in the general case, we can do <code>printf(\"%&lt;some number&gt;$x\")</code> to select an arbitrary argument of the current <code>printf</code> function (format string argument does not count).</p>\n<p>If we could pass the string <code>AAAA%10$n</code> to the program and make it appear as a format string, then we could write the value <code>4</code> to the address <code>0x41414141</code>.</p>\n<p>So, format string bugs may offer a full access to the memory and you can decide what to write and where in the memory.</p>\n<p>I really advise you to read \"<a href=\"http://crypto.stanford.edu/cs155/papers/formatstring-1.2.pdf\">Exploiting Format String Vulnerabilities</a>\" from Scut (2001) to get a whole grasp on these kind of manipulations.</p>\n<h2>Are they other languages than C/C++ that are vulnerable to these bugs ?</h2>\n<p>Well, format string bugs are tied up to the <code>printf</code> function family and the way format strings may be passed to the function. It's a whole class of security issue itself. So, you might find ways to exploit similar problems in some other languages. Though, you may not find the exact same features as the format string capabilities in other languages may differ a lot.</p>\n<p>I do think about languages such as Perl, Python, and so on, that all offer similar access to format string features.</p>\n<h2>How can I spot format string vulnerabilities if I have only the binary ?</h2>\n<p>First, you have to locate the calls to procedure of the <code>printf</code> family. Then, I would say that fuzz-testing (fuzzing) should be a good way to find the vulnerabilities. Especially if you can forge a few entries with seeds such as <code>AAAA%10$n</code>.</p>\n<p>If you want a more accurate and exhaustive way to find it, you will probably need to do some binary analysis and taint analysis on every call to a procedure of the <code>printf</code> family.</p>\n</div>",
            "votes": "6",
            "user": "perror",
            "time": "May 30, 2014 at 18:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "newbie2463465",
                    "text": "<span class=\"comment-copy\">Oh, cool. But how would I write \"0\" for example? As far as I understand, you have to print at least something, so the count for %n will be at least &gt;0?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">The way to write arbitrary data is discussed on page 15 of \"<a href=\"http://crypto.stanford.edu/cs155/papers/formatstring-1.2.pdf\" rel=\"nofollow noreferrer\">Exploiting Format String Vulnerabilities</a>\" (PDF). It's a bit long, you should better refer to this document for advanced use of this kind of bugs. But, beware, they are now some counter-measures such as the <code>FORTIFY_SOURCE</code> GCC option. For more about that refer to: <a href=\"http://phrack.org/issues/67/9.html\" rel=\"nofollow noreferrer\">A Eulogy for Format Strings</a> (Phrack #67, 2010).</span>",
                    "time": null
                }
            ]
        }
    ]
}