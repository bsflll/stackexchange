{
    "title": "What are nullsub_ functions in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/2420/what-are-nullsub-functions-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In nearly every dis-assembly created by IDA, there are several functions that are marked <code>nullsub_</code> which according to IDA, return <del><code>null</code></del> nothing (just <code>ret</code> instruction). </p>\n<p>So, what are those and why are they in the database?</p>\n</div>",
    "votes": "18",
    "answers": 3,
    "views": "5k",
    "tags": [
        "disassembly",
        "ida"
    ],
    "user": "PhoeniX",
    "time": "Aug 31, 2013 at 5:11",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">I think that you mean \"according to IDA, they return nothing\" (i.e. a bare \"ret\" instruction).  This is not the same as null.  It can happen when a procedure is a placeholder, for example.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">@peterferrie, you are right. Thanks for the correction.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>I'm answering from a C++ viewpoint, other languages have different reasons.</em></p>\n<p>There are legitimate uses for these functions, even if they are nothing more than</p>\n<pre><code>void func(/* any args */) {}\n</code></pre>\n<p>One example that comes to mind is a virtual function that does nothing in a base class but is overridden in a derived class. A similar example would be a template function whose general case is empty but specializations are not.</p>\n<p>One more case is static variables. A static variable destructor has to be called at the end of the program, which usually uses <code>atexit</code> to register the destructor callback when the variable is accessed for the first time. As I recall, the C++ standard says that a destructor with no observable behaviour might not be invoked, but I have seen MSVC 6.0 register <code>nullsub</code>s as destructors anyway.</p>\n<p>Global variables follow rules similar to static ones.</p>\n<p>Another possibility is a function that simply has no effect, <em>according to the compiler</em>. The function has to exist in case something (e.g. another compilation unit that doesn't know the implementation is empty) tries to call it, but its body is empty. <br/>\nMind that \"according to the compiler\" is not always equal to the coder's understanding. I myself once wrote a cleanup function that did a lot of work, but by mistake it took the argument by value instead of by reference. The compiler optimized the entire function body to a <code>{}</code> without any warning. Oops.</p>\n</div>",
            "votes": "24",
            "user": "DCoder",
            "time": "Jul 6, 2013 at 11:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>DCoders answer is great, but other reasons include:</p>\n<p>The function might have the body #ifdef'ed out in release verse debug, but the function call is left to avoid changing the flow of the code.</p>\n<p>One example is debug print functions</p>\n<p>Another reason is to allow for patching. This one is pretty weak.</p>\n</div>",
            "votes": "9",
            "user": "Simeon Pilgrim",
            "time": "Oct 10, 2013 at 3:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">So compiler might deliberately left it, although optimization flags were on?</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">Well not all optimizations are equal, nor are all compilers equal. The examples I'm thinking of were from non-ARM/x86 CPU's or code from the 80s/90s.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>compiler may insert dumb null_sub randomly between directions, in order to confuse IDA decompiler. So that IDA may generate meaningless variable names, increase reverse engineer's effort to understand the workflow, to connect to dots...</p>\n</div>",
            "votes": "1",
            "user": "vagase",
            "time": "Mar 11, 2020 at 3:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Compilers -- with the exception of deliberately obfuscating compilers -- do not undertake any code generation actions specifically for the purpose of confusing disassemblers and decompilers.</span>",
                    "time": null
                }
            ]
        }
    ]
}