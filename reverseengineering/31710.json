{
    "title": "Decoding the Apple vendor tag in the 802.11 beacon",
    "link": "https://reverseengineering.stackexchange.com/questions/31710/decoding-the-apple-vendor-tag-in-the-802-11-beacon",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Background</h2>\n<p>Looking to answer <a href=\"https://apple.stackexchange.com/q/457602/342719\">Is there a way to detect if you're connected via a shared WiFi Hotspot?</a> on apple.stackexchange.com lead me to <a href=\"https://apple.stackexchange.com/q/199163/342719\">How does iOS and OS X detect when a Wi-Fi network is a personal hotspot?</a>.</p>\n<p>I did some research into both questions, and determined that personal hotspot was communicated as part of the vendor tag / information element in the beacon.</p>\n<h3>Goal</h3>\n<p>I want to see if we can decode the Apple vendor tag in the 802.11 beacon to see exactly which elements are what, including what defines if it is a personal hotspot. If we do perhaps we can include it in the Wireshark decoding.</p>\n<h2>My research</h2>\n<p>Doing a trace of my iPhone with Wireshark I see:</p>\n<pre><code>  Tag: Vendor Specific: Apple, Inc.\n    Tag Number: Vendor Specific (221)\n    Tag length: 10\n    OUI: 00:17:f2 (Apple, Inc.)\n    Vendor Specific OUI Type: 6\n    Vendor Specific Data: 06010103030000\n\nHex:  dd 0a 00 17 f2 06 01 01 03 03 00 00\n</code></pre>\n<p>A guide about making OpenWRT appear as a personal hotspot they used  <code>vendor_elements=DD0A0017F206010103010000' </code> and it worked (ref <a href=\"https://www.yichya.dev/configure-access-point-as-personal-hotspot/\" rel=\"nofollow noreferrer\">yichya.dev</a>).</p>\n<p>Some additional info that can help. If you run <code>airport -s --xml</code> on MacOS you can see both the IE and what appears to be some parsing of the element:</p>\n<pre><code>      &lt;key&gt;IE&lt;/key&gt;\n      &lt;data&gt;\n      AA9hcF9taXNoYXJlX2NmNjABCIwSmCSwSGBsIAEAOwUAU1R9gTAUAQAAD6wE\n      AQAAD6wEAQAAD6wCDAAtGu8AE///AAAAAAAAAAAAAAAAAAAAAAAAAAEAPRaV\n      BREAAAAAAAAAAAAAAAAAAAAAAAAA3RgAUPICAQGBAAIyAAAiMgAAQjJeAGIy\n      LwC/DLIAgDP6/2ID+v9iA8AFAZsA+v9/CAUACAAAAABA/xYjAAAAAAAAAAAA\n      AAAAAAAAAADw//D//wok9H8AD/z/AZsA3QoAF/IGAQEDAQAA\n      &lt;/data&gt;\n      &lt;key&gt;IOS_IE&lt;/key&gt;\n      &lt;dict&gt;\n         &lt;key&gt;IOS_IE_FEATURES&lt;/key&gt;\n         &lt;data&gt;AQAA&lt;/data&gt;\n         &lt;key&gt;IOS_IE_FEATURE_VERSION&lt;/key&gt;\n         &lt;integer&gt;1&lt;/integer&gt;\n         &lt;key&gt;IOS_IE_FEATURE_WOW_DISALLOWED&lt;/key&gt;\n         &lt;true /&gt;\n      &lt;/dict&gt;\n</code></pre>\n<p>User <a href=\"https://apple.stackexchange.com/users/19756/hewigovens\">@hewigovens</a> found a private method determine if it is a personal hotspot based on the IOS_IE (<a href=\"https://apple.stackexchange.com/a/206770/342719\">ref</a>):</p>\n<pre><code>char -[CWNetwork(Private) isPersonalHotspot](void * self, void * _cmd) {\n    eax = [*(self + 0x4) objectForKey:@\"IOS_IE\"];\n    eax = LOBYTE(eax != 0x0 ? 0x1 : 0x0) &amp; 0xff;\n    return eax;\n}\n</code></pre>\n<p>At minimum I think this should be enough for us to determine which bit(s) encode if it is hotspot.</p>\n<h3>Unanswered questions</h3>\n<p>What do IOS_IE_FEATURES / IOS_IE_FEATURE_VERSION / IOS_IE_FEATURE_WOW_DISALLOWED represent? How do they map to the vendor tag?</p>\n<p>I had a different vendor tag then yichya.dev <code>06 01 01 03 03 00 00</code> vs. <code>06 01 01 03 01 00 00</code> but the decoded XML elements were the same.</p>\n<p>IOS_IE_FEATURE_WOW_DISALLOWED might represent Woke on Wireless, but not sure if that is configurable to test.</p>\n<p>Also can we get more insight from the CoreWLAN implementation?</p>\n<p>This same vendor tag might be used for CarPlay networks, what does it look like in a trace?</p>\n<p>Was this tag used with AirPort routers? Do we have examples?</p>\n<p>For iPhone and personal hotspot are there any settings I can change to see if results in any changes?</p>\n<h3>Attempting to decode</h3>\n<p><s>The first octet is probably the length: 06</s></p>\n<p><em>Edit: The first octet is the Vendor Specific OUI Type. In this case 06. For the same OUI (00:17:f2) iOS devices also uses OUI Type 10 in the Probe Request and Associate Request (<a href=\"https://gfiber.googlesource.com/vendor/google/platform/+/1516fa85d2a80505f70f7b224033c3c2c7f493c1\" rel=\"nofollow noreferrer\">ref</a>)</em></p>\n<p>Decoding IOS_IE_FEATURES value AQAA from base64 gives us 01 00 00 which doesn't directly map the vendor tag for either example, but it might just be the first octet that matters.</p>\n<p>One of the octets is probably IOS_IE_FEATURE_VERSION: 01</p>\n<p>The next octet matches for both, but unsure the meaning: 03</p>\n<p>The final octet is 01 for them and 03 for me.</p>\n</div>",
    "votes": "4",
    "answers": 0,
    "views": "769",
    "tags": [
        "debugging",
        "ios",
        "protocol",
        "osx",
        "networking"
    ],
    "user": "thewade",
    "time": "Mar 25, 2023 at 22:44",
    "comments": [
        {
            "user": "thewade",
            "text": "<span class=\"comment-copy\">Microsoft introduced a standard to communicate tethered / metered connection information part of the beacon: <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nct/bd8584cc-1743-4693-9f71-af98b246235f\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nct/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}