{
    "title": "What to do when IDA cannot provide a function name?",
    "link": "https://reverseengineering.stackexchange.com/questions/2149/how-to-add-xrefs-to-indirect-call-targets-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For learning (<em>and fun</em>) I have been analyzing a text editor application using IDA Pro. While looking at the disassembly, I notice many function calls are made by explicitly calling the name of the function. For example, I notice IDA translates most function calls into the following two formats.</p>\n<pre><code>call cs:CoCreateInstance\n</code></pre>\n<p>Or</p>\n<pre><code>call WinSqmAddToStream\n</code></pre>\n<p>But sometimes the format does not use a function name. The following example includes the code leading up to the line in question. The third line of code seem to be \"missing\" the function name. (The comments are my own.)</p>\n<pre><code>mov rcx, [rsp+128h+var_D8]    // reg CX gets the address at stack pointer+128h+var_D8 bytes \nmov r8, [rcx]                 // the address at reg CX is stored to reg r8\ncall qword ptr [r8 + 18h]     // at address rax+18h, call function defined by qword bytes \n</code></pre>\n<p>My questions are as follows:</p>\n<ol>\n<li><p>How do I make the connection between <code>call qword ptr &lt;address&gt;</code> and a function in the disassembly?</p></li>\n<li><p>I understand that IDA cannot use a function name here since it does not know the value stored at the register R8... so what causes this? Was there a certain syntax or convention used by the developer? In other words, did the developer call the function <code>WinSqmAddToStream</code> in a different manner than the function at <code>[r8+18h]</code>?</p></li>\n</ol>\n</div>",
    "votes": "11",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "shebaw",
    "time": "May 28, 2013 at 16:16",
    "comments": [
        {
            "user": "Trass3r",
            "text": "<span class=\"comment-copy\">These indirect calls are used to implement virtual functions (by using a vtable) in C++ for example.</span>",
            "time": null
        },
        {
            "user": "Trass3r",
            "text": "<span class=\"comment-copy\">Also there are plugins like <a href=\"https://github.com/0xgalz/Virtuailor\" rel=\"nofollow noreferrer\">github.com/0xgalz/Virtuailor</a> to automate these tasks.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To connect an indirect call to its target (if you know it) you can do the following:</p>\n<ol>\n<li><p>Add a custom cross-reference - either with IDC/Python, or from the Cross References subview. If you use scripting, don't forget to add the <code>XREF_USER</code> flag so IDA does not delete it on reanalysis.</p>\n</li>\n<li><p>Use the \"callee\" plugin (Edit→Plugins→Change the callee address, or <kbd>Alt</kbd>+<kbd>F11</kbd>). This will automatically add a cross-reference and also a comment next to the call.</p>\n</li>\n</ol>\n<p>As for why the explicit call is not present in the binary there can be many explanations. The snippet you're showing looks like a virtual function call, and they are usually done only in this manner to account for possibility of the method being overridden in a derived class.</p>\n</div>",
            "votes": "12",
            "user": "MarianD",
            "time": "Jun 17, 2021 at 15:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "clark",
                    "text": "<span class=\"comment-copy\">Thanks for the answer. This will be very helpful once I know the target function. I still don't know how to determine the function that is being called. I'm going to edit the question to indicate that I'm more interested in that part of it.</span>",
                    "time": null
                },
                {
                    "user": "Martin",
                    "text": "<span class=\"comment-copy\">@clark Try putting a breakpoint on the instruction, running, and then stepping into / manually calculating the offset from the available registers? Or it has to be statically?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The trick is to find the object's constructor. Let's suppose the code looks like this:</p>\n<pre><code>a = new CFoo();\na-&gt;bar();\n</code></pre>\n<p>The compiler (I assume MSVC, 32bits) might produce something like this:</p>\n<pre><code>push 12h ; size_t\ncall ??2@YXYXY@Z  ; operator new(uint)\nmov [ebp+var_8], eax\nmov esi, eax\ntest esi, esi\njz loc_1\n  mov ecx, esi\n  call ??0CFoo@@AAAA@AA ; CFoo::CFoo(void)\n  mov [ebp+var_8], eax\n  jmp loc_2\nloc_1:\n  mov [ebp+var_8], 0\nloc_2:\n...\n...\n...\nmov eax, [ebp+var_8]\nmov ecx, [eax]\nmov ebx, ecx\nmov ecx, [ebp+var_8]\ncall dword ptr [ebx+08h]\n</code></pre>\n<p>Looking at <code>??0CFoo@@AAAA@AA</code>, a.k.a. <code>CFoo::CFoo():</code></p>\n<pre><code>...\nmov esi, ecx\nmov dword ptr [esi], unk_12345\n...\n</code></pre>\n<p><code>unk_12345</code> is <code>CFoo</code>'s virtual table offset:</p>\n<pre><code>unk_12345:\n  dd offset sub_23456\n  dd offset sub_34567\n  dd offset sub_45678\n  ...\n</code></pre>\n<p>And that <code>sub_45678</code> at <code>unk_12345+08h</code> (which would be 3rd entry, in this case) is what gets called, i.e. <code>CFoo::bar()</code>.</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Feb 20, 2015 at 7:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}