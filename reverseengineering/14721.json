{
    "title": "Parseable Windows API documentation",
    "link": "https://reverseengineering.stackexchange.com/questions/14721/parseable-windows-api-documentation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For a project I'm in need of a parseable version of the Windows API (i.e. the functions described in msdn).</p>\n<p>I tried to crawl it myself, but there seem to be more than 5 formats for signatures and parameters used. The MsdnApiExtractor project does not seem to work anymore.</p>\n<p>I've seen some projects using help files, but I can't seem anything to parse .hlp files. Sadly, using the header files is no alternative, since it lacks argument names.</p>\n<p>I'm mainly interested in the High-Level API (e.g. ReadFile, CloseHandle etc.)</p>\n<p><strong>edit:</strong></p>\n<p>Seems I've been looking at the wrong header files</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "209",
    "tags": [
        "windows",
        "api",
        "documentation"
    ],
    "user": "Nordwald",
    "time": "Feb 24, 2017 at 8:55",
    "comments": [
        {
            "user": "josh poley",
            "text": "<span class=\"comment-copy\">Do you just need signature information? Or did you want the documentation text as well?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">Do you want to extract something like int stdcall foo.( float a, ......) From header files  what exactly does header files lack arg names mean</span>",
            "time": null
        },
        {
            "user": "marshal craft",
            "text": "<span class=\"comment-copy\">Why not use windows.h ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>this should be a comment but the content is long for a comment so an answer </p>\n<p>your statement /subsequent edit / that header files does not contain names \nis not correct </p>\n<pre><code>:\\&gt;echo %cd%\nE:\\ewdk\\Program Files\\Windows Kits\\10\\Include\\10.0.10586.0\\um\n\n:\\&gt;grep -irn -B 3 -A 3 GetLocalTime  *\nsysinfoapi.h-180-WINBASEAPI\nsysinfoapi.h-181-VOID\nsysinfoapi.h-182-WINAPI\nsysinfoapi.h:183:GetLocalTime(\nsysinfoapi.h-184-    _Out_ LPSYSTEMTIME lpSystemTime\nsysinfoapi.h-185-    );\nsysinfoapi.h-186-\n--\n</code></pre>\n<p>in fact i have around 49547 apis parsed from ewdk win10 headers</p>\n<pre><code>:\\&gt;wc -l uniqtags.txt\n49547 uniqtags.txt \n</code></pre>\n<p>here is what it spits out for your GetLocalTime</p>\n<pre><code>:\\&gt;grep -n GetLocalTime uniqtags.txt\n9715:GetLocalTime       ( _Out_ LPSYSTEMTIME lpSystemTime )\n15926:InternetDebugGetLocalTime ( _Out_ SYSTEMTIME * pstLocalTime, _Out_opt_ DWORD * pdwReserved )\n</code></pre>\n<p>here is what the possibly undocumented zwrecover functions with arguments \nparsed from headers look like</p>\n<pre><code>:\\&gt;grep -n ZwRec uniqtags.txt\n33290:ZwRecoverEnlistment       ( _In_ HANDLE EnlistmentHandle, _In_opt_ PVOID EnlistmentKey )\n33291:ZwRecoverResourceManager  ( _In_ HANDLE ResourceManagerHandle )\n33292:ZwRecoverTransactionManager       ( _In_ HANDLE TransactionManagerHandle )\n</code></pre>\n<p>just to make it clear  if you want to print out all the Zw.<em>Enlist.</em> functions with thier arguments you could do some thing like this </p>\n<pre><code>:\\&gt;for /f %I in ( 'awk \"{print $1}\" uniqtags.txt ^| grep -i Zw ^| grep  Enlist ')  do grep %I uniqta\ngs.txt\n\n:\\&gt;grep ZwCommitEnlistment uniqtags.txt\nZwCommitEnlistment      ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\&gt;grep ZwCreateEnlistment uniqtags.txt\nZwCreateEnlistment      ( _Out_ PHANDLE EnlistmentHandle, _In_ ACCESS_MASK DesiredAccess, _In_ HANDL\nE ResourceManagerHandle, _In_ HANDLE TransactionHandle, _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes\n, _In_opt_ ULONG CreateOptions, _In_ NOTIFICATION_MASK NotificationMask, _In_opt_ PVOID EnlistmentKe\ny )\n\n:\\&gt;grep ZwOpenEnlistment uniqtags.txt\nZwOpenEnlistment        ( _Out_ PHANDLE EnlistmentHandle, _In_ ACCESS_MASK DesiredAccess, _In_ HANDL\nE RmHandle, _In_ LPGUID EnlistmentGuid, _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes )\n\n:\\&gt;grep ZwPrePrepareEnlistment uniqtags.txt\nZwPrePrepareEnlistment  ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\&gt;grep ZwPrepareEnlistment uniqtags.txt\nZwPrepareEnlistment     ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\&gt;grep ZwQueryInformationEnlistment uniqtags.txt\nZwQueryInformationEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_ ENLISTMENT_INFORMATION_CLASS En\nlistmentInformationClass, _Out_writes_bytes_(EnlistmentInformationLength) PVOID EnlistmentInformatio\nn, _In_ ULONG EnlistmentInformationLength, _Out_opt_ PULONG ReturnLength )\n\n:\\&gt;grep ZwReadOnlyEnlistment uniqtags.txt\nZwReadOnlyEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\&gt;grep ZwRecoverEnlistment uniqtags.txt\nZwRecoverEnlistment     ( _In_ HANDLE EnlistmentHandle, _In_opt_ PVOID EnlistmentKey )\n\n:\\&gt;grep ZwRollbackEnlistment uniqtags.txt\nZwRollbackEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\&gt;grep ZwSetInformationEnlistment uniqtags.txt\nZwSetInformationEnlistment      ( _In_ HANDLE EnlistmentHandle, _In_ ENLISTMENT_INFORMATION_CLASS En\nlistmentInformationClass, _In_reads_bytes_(EnlistmentInformationLength) PVOID EnlistmentInformation,\n _In_ ULONG EnlistmentInformationLength )\n\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Feb 24, 2017 at 9:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">I'm sorry, I confused the header files. Sadly it seems like I'll have to set up a vm and install the sdk to access the header files</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is msdn-crawler, <a href=\"http://github.com/zynamics/msdn-crawler\" rel=\"nofollow noreferrer\">created by Zynamics</a> and then <a href=\"https://github.com/fireeye/flare-ida/tree/master/MSDN_crawler\" rel=\"nofollow noreferrer\">amended by FireEye</a>. I was not able to get it working but maybe you'll have more luck.\nAlternatively, you can find an old MSDN CD with CHM files, decompile them to HTML and parse that.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2017 at 10:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">Thats a nice idea, must all I can find coping with .hlp and .chm files are old shareware programs. Also, I'm not eager to download the sdk and compile help files.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">hh.exe can decompile CHMs, you don't need any extra tools.</span>",
                    "time": null
                }
            ]
        }
    ]
}