{
    "title": "Find a string that I entered in ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/2796/find-a-string-that-i-entered-in-ollydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Say, there's an input box and I enter a text. Can I somehow find the location that text is entered?</p>\n</div>",
    "votes": "8",
    "answers": 3,
    "views": "15k",
    "tags": [
        "ollydbg"
    ],
    "user": "aclowkay",
    "time": "Sep 16, 2013 at 23:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Set breakpoints on <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms633520%28v=vs.85%29.aspx\"><code>GetWindowText()</code></a> and <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms645489%28v=vs.85%29.aspx\"><code>GetDlgItemText()</code></a> and have the target program read your input text. If the breakpoint is hit, you can trace up the call-stack to \nsee what code is reading your input text and where in memory it's being stored. If neither breakpoint is hit, you can try setting a conditional breakpoint on <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx\"><code>SendMessage()</code></a>, filtering it to only break on the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms632627%28v=vs.85%29.aspx\"><code>WM_GETTEXT</code></a> message.</p>\n<p>If the above methods fail, you may want to statically analyze the program to find where it's creating the text box window and how it's handling input to the text box. Searching for window creation API calls and/or cross-references to strings related to the text box (static labels, error message strings, etc.) can be helpful.</p>\n</div>",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Sep 16, 2013 at 18:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In addition to what Jason said, I'd add that there is another potentially helpful way:</p>\n<ul>\n<li>Breakpoint on <code>ExitProcess()</code> (and probably <code>HeapFree()</code> too)</li>\n<li>Enter in the input box some test - <code>\"bla bla bla\"</code></li>\n<li>Search the memory of the process for that string and try to analyze the code that is referencing that place.</li>\n</ul>\n<p>I agree that this could be an overkill, but still could be helpful in some situations.</p>\n</div>",
            "votes": "1",
            "user": "PhoeniX",
            "time": "Sep 16, 2013 at 22:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>in addition to all the above solutions after you have entered your text string <code>press f12</code> and pause the debuggee<br/>\nnow there are several options to search for the string \n<code>view call stack (ctl+k)</code> and set a break point on the <code>return address</code> in the stack and press f9  to run<br/>\nollydbg will most probably break on some system call<br/>\nwhen it breaks you can search the entire memory of the process<br/>\n(<code>alt+m right click search ctrl+l for repeating)</code>for the string you entered<br/>\nset an access breakpoint (<code>hardware break point on read)</code> on the location \nif the application is not much obfuscated call stack may show you the applications code where it entered system you can also follow from there<br/>\nif the application hasn't sub classed its controls setting a break point on <code>windowproc</code> or <code>classproc</code> will also get you the right context to follow your string   if the app uses directx you can set breaks at SendInput() apis or DrawText(...) apis</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 17, 2013 at 12:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}