{
    "title": "Reverse Engineering a 16-bit CRC algortihm",
    "link": "https://reverseengineering.stackexchange.com/questions/13435/reverse-engineering-a-16-bit-crc-algortihm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a set of data bytes and their CRC values available to me. I want to know the CRC algorithm used by it.</p>\n<p>CRC is 16 bit long.</p>\n<p>firstly I tried to find out using CRC RevEng but that is showing \"no model found message\".</p>\n<p>Then I followed <a href=\"http://www.cosc.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\" rel=\"nofollow noreferrer\">CRC Reverse Engineeing</a> paper written by Greg Ewing.</p>\n<p>Then I found that my data set is following the superposition principle\nso I came to the conclusion that it is using some standard algorithm to calculate CRC.</p>\n<p>According to Greg's paper: <br/></p>\n<blockquote>\n<p>two CRC values obtained from two 1-bit messages, where the 1 bits are in adjacent positions, will have thier resulting CRCs differ by just one shift-xor cycle. To be precise, if C1 corresponds to the message with a 1 in position <code>i</code>, and C2 corresponds to the message with a 1 in position <code>i+1</code>, then C1 is derived from applying one shift-xor cycle to C2. (If this seems backwards, it's because the further the 1 bit is from the end of the message, the more shift-xor cycles get applied to the CRC.)</p>\n<p>There are two possibilities. If the leading bit of C2 (the one about to be shifted out) is 0, then C1 will be equal to C2 shifted by one place. If it is 1, then C2 will be equal to C1 shifted one place and xored with the polynomial.\"</p>\n</blockquote>\n<p>In my case polynomial is not coming same every time.</p>\n<p>I have printed CRC values for different messages, their LSB and CRC value after right shift operation and polynomial value to be XORed in order to drive C1 from C2</p>\n<p><a href=\"https://i.sstatic.net/535OF.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/535OF.png\"/></a></p>\n<p>I have observed that I can get C1 from C2 by three polynomial values which are shown in above image 0x9008, 0x8000, 0x1008</p>\n<p>I don't know why it is coming different.\nI am stuck at this point</p>\n<p>I'm hoping that I can get more hints here on Reverse Engineering Stack Exchange.</p>\n<p>Roy</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "835",
    "tags": [
        "crc",
        "binary-diagnosis"
    ],
    "user": "Roy4u",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">You also forgot <code>0x0</code> as a value, which makes me wonder if you have any errors there. I also suggest taking a look at the messages and trying to predict their CRC. specifically very short messages, and ones that are similar to each other.</span>",
            "time": null
        },
        {
            "user": "Roy4u",
            "text": "<span class=\"comment-copy\">According to Grag william paperActually when LSB is zero we don't have need to XOR with any polynomial according to Grag Williams Paper but in my case sometimes there is a need to XOR with polynomial that's why i didn't mention zero as value.</span>",
            "time": null
        }
    ],
    "answers_data": []
}