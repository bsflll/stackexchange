{
    "title": "MEMORY macro in IDA Pro pseudocode",
    "link": "https://reverseengineering.stackexchange.com/questions/21310/memory-macro-in-ida-pro-pseudocode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a 32-bit ARM Linux kernel module with debug symbols. When it is decompiled, it produces many functions that have a macro called <code>MEMORY</code> in them. Here is an example:</p>\n<pre><code>int S_u8init_flag = 0; // Context for function internals\nint aess_adcsensor_release(inode *inode, file *filp) {\n  int result;\n\n  result = 0;\n  MEMORY[0xF0014000] &amp;= 0xFFFDFFFF; // What does this mean?\n  S_u8init_flag = 0;\n  return result;\n}\n</code></pre>\n<p>What does this <code>MEMORY</code> macro mean? Is there a C99 equivalent to it, or is it an IDA-specific macro?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "942",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "nhubbard",
    "time": "May 14, 2019 at 15:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>MEMORY[&lt;addr&gt;]</code> means there is a direct access to a memory address which is not mapped to an existing segment in the IDB so the decompiler/IDA could not allocate a variable for it. </p>\n<p>If you press <kbd>Tab</kbd>, you should land on the assembly corresponding to that line and check what is happening there.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 14, 2019 at 18:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "nhubbard",
                    "text": "<span class=\"comment-copy\">Thank you! This is perfect. I assume that you would just assign it to a variable to allow comparisons like the one in the code sample, right?</span>",
                    "time": null
                }
            ]
        }
    ]
}