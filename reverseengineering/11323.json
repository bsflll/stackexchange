{
    "title": "(linux) How to debug a \"debugger\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/11323/an-anti-debug-method-on-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand a program. This programm implements an antidebug technique.</p>\n<p>From what I've understand so far, the father <code>ptrace</code> a forked process.</p>\n<p>An the child does something like that:</p>\n<pre><code>some code\nInt 3\nsome code\nInt 3\nsome code\nInt 3\n</code></pre>\n<p>and so on</p>\n<p>I think the father implements a kind of debugger because with <code>strace -i</code> I see a lot of:</p>\n<pre><code>[77b7457c] waitpid(2468, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2468\n[77b7457c] --- SIGCHLD (Child exited) @ 0 (0) ---\n[77baf52c] ptrace(PTRACE_GETREGS, 2468, 0, 0x7fb68be4) = 0\n[77baf52c] ptrace(PTRACE_SETREGS, 2468, 0, 0x7fb68be4) = 0\n[77baf52c] ptrace(PTRACE_CONT, 2468, 0, SIG_0) = 0\n</code></pre>\n<p>It reminds me this document <a href=\"http://www.alexonlinux.com/how-debugger-works\">http://www.alexonlinux.com/how-debugger-works</a> where we found the same ideas: a child process, sending TRAP, catched by the father via ptrace calls, setting registers to the right value, then continue.</p>\n<p>My problem now: How can I debug this \"debugger\"? </p>\n<ul>\n<li>If I bypass the ptrace, the child will get its SIGTRAP and stop.</li>\n<li>If I leave the ptrace, I can't use gdb</li>\n<li>If I bypass ptrace and use gdb with <code>set follow-fork-mode child</code>, I can't follow how and where the TRAP is caught in father process because gdb handle it. And if I send <code>signal SIGTRAP</code> the father detects it (how? that's one thing I want to understand) and terminates.</li>\n</ul>\n<p>I know that gdb can't follow both father and child, so is there a way to debug this program?</p>\n</div>",
    "votes": "6",
    "answers": 2,
    "views": "2k",
    "tags": [
        "gdb",
        "anti-debugging"
    ],
    "user": "robert",
    "time": "Oct 15, 2014 at 15:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can break on the ptrace, bypass it, set it return value as if it was succesfuly called, use two instances of GDB: one for the child, and one for the father.</p>\n</div>",
            "votes": "3",
            "user": "jvoisin",
            "time": "Oct 18, 2014 at 15:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This binary is protected by a technique called \"nanomites\". </p>\n<p>The father drives the child by getting and settings its registers via debug call (ptrace under linux, DebugActiveProcess under windows). It's an efficient antidebug method. </p>\n<p>This was part of a challenge, you can find a lot of details in this post: <a href=\"http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/\" rel=\"nofollow\">http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/</a></p>\n</div>",
            "votes": "1",
            "user": "Reverse",
            "time": "Nov 4, 2014 at 15:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}