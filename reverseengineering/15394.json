{
    "title": "Anti-tampering techniques in Android APK's",
    "link": "https://reverseengineering.stackexchange.com/questions/15394/anti-tampering-techniques-in-android-apks",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering an Android app, and it has some kind of anti-tamper protection. The problem is that I can't find it anywhere in the smali files.</p>\n<p>Even if I just re-sign the official APK that I downloaded straight from the Play Store, it detects that it has been tampered with, so it must either be checking file sizes or signatures. I've grepped all the smali files for things like \"signature\" and \"getPackageInfo\" to try and find where it's getting the signature from, but I cannot find anything.</p>\n<p>What other methods are there to figure out if the APK has been re-signed, even when nothing else has been altered? It is not using SafetyNet.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "android",
        "java",
        "apk",
        "dalvik"
    ],
    "user": "Ian Ling",
    "time": "May 21, 2017 at 3:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your best bet is to just start reading through the code and see everything it does. It almost certainly is checking signatures, just in a way that your search missed. That could be because it is using an API you didn't search for, or because the code is obfuscated, or because you messed up the search. Note that there are a lot of APIs that could be used to get information about the app. For example, it could be using the JarFile getResource() API. The most reliable method is to just read the code.</p>\n<p>Also don't forget to look in the native code, if any! You can check whether the app is using native code by looking in the libs folder. This is a bit of a longshot though, since most programmers are too lazy to write native code. If they are doing the checks in native code, it's probably an off the shelf packer/obfuscator.</p>\n<p>For completeness, I should mention that there are several features of an app that depend on its signature. For example, it could be using a signature based permission or a shared userid, each of which would break if you resigned the app. I've never heard of these being used for tamper detection though.</p>\n</div>",
            "votes": "2",
            "user": "Antimony",
            "time": "May 21, 2017 at 5:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Ling",
                    "text": "<span class=\"comment-copy\">Good call on checking the native code. The app is importing a .so file, and just from quickly checking the strings in it, I do see that there are references to getting the packages signature. The odd thing is that the strings are things like <code>(Ljava/lang/String;I)Landroid/content/pm/PackageInfo</code> which look a lot like something you'd see in the smali files.</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Those strings are probably used to register the JNI methods so they can be called from Java.</span>",
                    "time": null
                }
            ]
        }
    ]
}