{
    "title": "Encrypting text in binary files",
    "link": "https://reverseengineering.stackexchange.com/questions/1356/encrypting-text-in-binary-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Text strings are usually easily read in a binary file using any editor that supports ASCII encoding of hexadecimal values. These text snippets can be easily studied and altered by a reverse engineer.</p>\n<p>What options does a developer have to encrypt these text snippets, and decrypt them, in runtime ?</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "4k",
    "tags": [
        "obfuscation",
        "c",
        "c++"
    ],
    "user": "Mellowcandle",
    "time": "Mar 29, 2013 at 1:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some options which may or may not be applicable depending on your needs:</p>\n<ol>\n<li><p><strong>Avoid</strong> using strings to leak out interesting information when possible. For example if you are using strings to display error information or logging information, this can give any reverse engineer valuable details as to what might be going on in your application. Instead replace these strings with numerical error codes.</p></li>\n<li><p><strong>Obfuscate</strong> all strings with some kind of symmetric algorithm like a simple XOR routine, or a crypto algorithm like AES. This will prevent the string from being discovered during a casual examination of your binary. I say 'obfuscate' as you will presumably be storing the crypto/xor key in your binary. Any reverse engineer who tries a little harder will surely recover the obfuscated strings.</p></li>\n<li><p><strong>Encrypt</strong> all strings (make all the strings get linked into a separate section in your executable and encrypt this section) and store the decryption key outside of your binary. You could store the key remotely and restrict access server side where possible. So if a reverse engineer does get your binary they <em>may</em> not be able to access the key. The decryption key could also be generated dynamically on the users computer based off several predictable factors known about that users machine, essentially only allowing the encrypted data to be decrypted when run on this specific machine (or type of machine). This technique has been used by government malware to encrypt payloads for specific targets (If I can remember the link to the paper I read this in I will update answer).</p></li>\n<li><p><strong>Get Creative</strong>, Store all strings in a foreign language and then at run time use an online translation service to translate the string back to your expected native language. This is of course not very practical.</p></li>\n</ol>\n<p>Of course if your strings do get decoded/decrypted at run time then a reverse engineer could just dump the process from memory in order to see the strings. For this reason it may be best to decode/decrypt individual strings only when needed (possibly storing the decoded string in a temporary location and zeroing it after use).</p>\n</div>",
            "votes": "8",
            "user": "QAZ",
            "time": "Mar 28, 2013 at 18:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "amccormack",
                    "text": "<span class=\"comment-copy\">See <a href=\"http://stackoverflow.com/questions/3785582/how-to-write-a-password-safe-class\">this stackoverflow question</a> for techniques that protect unencrypted strings from being dumped from memory.</span>",
                    "time": null
                },
                {
                    "user": "Daniel W. Steinbrook",
                    "text": "<span class=\"comment-copy\">+1 for \"get creative.\" The best way to thwart attempts to understand your program is to use techniques not documented in online Q&amp;A sites...</span>",
                    "time": null
                }
            ]
        }
    ]
}