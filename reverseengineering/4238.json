{
    "title": "Finding end of file",
    "link": "https://reverseengineering.stackexchange.com/questions/4238/finding-end-of-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have got a file which contains other files. I know where the subfiles start (<code>header</code>) but how do I know where the subfiles end ?</p>\n<p>Edit: Files are like: <em>sound files (.wav)</em> and <em>images (.bmp, png, jpeg)</em></p>\n<p>Example:</p>\n<pre><code>file1\nfile2\ndata\nfile3\n</code></pre>\n<p>How do I know where <code>file2</code> starts and <code>file2</code> ends ?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "file-format"
    ],
    "user": "Unknown",
    "time": "Jul 15, 2015 at 15:56",
    "comments": [
        {
            "user": "0xea",
            "text": "<span class=\"comment-copy\">Do you know the file types? You haven't given us much information, try to modify your question with more info.</span>",
            "time": null
        },
        {
            "user": "0xcaff",
            "text": "<span class=\"comment-copy\">Checkout <a href=\"http://binwalk.org/\" rel=\"nofollow noreferrer\">binwalk</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Technically speaking what you're describing is an archive. If the archiving data structure was properly designed, in the header you must find either the start offset &amp; the size or the start &amp; end offsets of each file entry in the header, unless the files are all stored one after the other. In that latter case all you need to know is the start offset of each file because (suppose file0 comes first, followed by file1) file1's start offset is file0's end offset. </p>\n<p>The example below shows the latter case :</p>\n<pre><code>  Offset00:file0\n  Offset10:file1\n  Offset30:file2\n  Offset35:file3\n</code></pre>\n</div>",
            "votes": "3",
            "user": "yaspr",
            "time": "May 2, 2014 at 18:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In addition to what yaspr said, i'd suggest looking for specification of those contained files. Most file formats have their size specified in the header somewhere. That would allow you to carve the file from the archive, without even knowing the archive structure. </p>\n<p>This is what tools like <code>scalpel</code> are doing to carve files. They match the header to a known file type, and then lookup the file size in that header.\nSome file formats have specific endings which you could also use to carve them out (for example, every <code>png</code> file has <code>IEND</code> and the end).</p>\n<p>Try your luck with <code>scalpel</code> and similar file carving tools.</p>\n</div>",
            "votes": "2",
            "user": "0xea",
            "time": "May 2, 2014 at 19:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">WAV (a RIFF format), BMP, and PNG have sufficient information in their headers to do just this. (Does JPEG as well? I believe it does not.) Anyway, knowing the <i>supposed</i> file size ties nicely in to yaspr's answer of how and where to locate the archive's own metadata.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check out <a href=\"https://bitbucket.org/haypo/hachoir/wiki/hachoir-subfile\" rel=\"nofollow\">hachoir-subfile</a>. Example from their repo.  </p>\n<pre><code>$ hachoir-subfile chiens.PPS\n[+] Start search (828.5 KB)\n\n[+] Found file at 0: Microsoft Office document\n[+] Found file at 537 size=28449 (27.8 KB): JPEG picture: 433x300 pixels\n[+] Found file at 29011 size=34761 (33.9 KB): JPEG picture: 433x300 pixels\n[+] Found file at 63797 size=40326 (39.4 KB): JPEG picture: 433x300 pixels\n[+] Found file at 104148 size=30641 (29.9 KB): JPEG picture: 433x300 pixels\n[+] Found file at 134814 size=22782 (22.2 KB): JPEG picture: 384x325 pixels\n[+] Found file at 157621 size=24744 (24.2 KB): JPEG picture: 443x313 pixels\n[+] Found file at 182390 size=27241 (26.6 KB): JPEG picture: 443x290 pixels\n[+] Found file at 209656 size=27407 (26.8 KB): JPEG picture: 443x336 pixels\n[+] Found file at 237088 size=30088 (29.4 KB): JPEG picture: 388x336 pixels\n[+] Found file at 267201 size=30239 (29.5 KB): JPEG picture: 366x336 pixels\n[+] Found file at 297465 size=81634 (79.7 KB): JPEG picture: 630x472 pixels\n[+] Found file at 379124 size=36142 (35.3 KB): JPEG picture: 599x432 pixels\n[+] Found file at 415291 size=28801 (28.1 KB): JPEG picture: 443x303 pixels\n[+] Found file at 444117 size=28283 (27.6 KB): JPEG picture: 433x300 pixels\n[+] Found file at 472425 size=95913 (93.7 KB): PNG picture: 433x431x8\n[+] Found file at 568363 size=219252 (214.1 KB): PNG picture: 532x390x8\n[+] Found file at 811308 size=20644 (20.2 KB): Microsoft Windows Metafile (WMF) picture\n</code></pre>\n<p><a href=\"https://bitbucket.org/snippets/Alexander_Hanel/EXKzg/extractsubfile\" rel=\"nofollow\">ExtractSubFile</a> can be used if you need to carve out the files. </p>\n</div>",
            "votes": "1",
            "user": "alexanderh",
            "time": "Jul 16, 2015 at 1:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}