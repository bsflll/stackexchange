{
    "title": "Class definition",
    "link": "https://reverseengineering.stackexchange.com/questions/22906/class-definition",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a complicated question to ask so I will try my best to be clear.</p>\n<p>I have this binary I am trying to reverse that came with a pdb file.\nI have dumped the compilands of the binary to begin with.</p>\n<p>I want to reproduce the source code of the binary as close to the original as possible so I see in the first compiland that somefile.obj(let's call it that) consists of ../file_path/somefile.cpp and ../compile_path/xlocale</p>\n<p>I then dumped the line numbers for somefile.cpp and using ida pro as my disassembler and hex-rays decompiler as a guide.</p>\n<p>From the source lines, hex-rays and some manual work I have managed to recreate somefile.cpp to the point that it's diasassembly is identical to the original file's one.</p>\n<p>The somefile.cpp consists of an empty constructor and destructor and a few function implementations.</p>\n<p>My problem is, the dumped compiland does not show a somefile.h as part of the object but the functions in somefile.cpp are methods of a somefile class (I got the entire class definition from the pdb). I can always create my own header file and put the class definition in there but that's not the purpose.</p>\n<p>So, my question is: where does the original somefile.cpp get the class definition from? Is there a way I can get such information at all, or do I have to guess?</p>\n<p>I am very sorry for the long text. </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "msvc"
    ],
    "user": "ilias kavalis",
    "time": "Jan 4, 2020 at 20:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depending on the original source, the class definition could be entirely in the header file. Class definitions are no longer useful in object files as the compiler already knows how fields and methods are laid out.</p>\n<p>You have to guess the original definition. Keep in mind that you already have guessed a lot when reverting via hex-rey as C++ allows preprocessing, templating and macro expansion. This means that the types you are using are of the correct size, but have lost their semantic meaning that in the original source code they might have: e.g. custom typedefs are usually lost. </p>\n</div>",
            "votes": "1",
            "user": "Yennefer",
            "time": "Jan 4, 2020 at 22:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ilias kavalis",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. I guess my question was not well phrased. I know generally what the case is with class definitions, however the compilands dump does not show any header files used in compilation. So my question is int his specific example where was the class defined? If it was defined in the cpp file itself, wouldn't that be apparent in the line numbers dump? Or are these lines ignored? Thanks again!</span>",
                    "time": null
                },
                {
                    "user": "Yennefer",
                    "text": "<span class=\"comment-copy\">Well, Header files are usually \"definition\" files and may be get lost during the translation into object files. I say \"may\" because I saw certain compilers completely omitting class data and netadata (in those cases rtti was not explicitly available). To my knowledge they can be simply omitted, and since you can step/break into assembly code only, your line numbers will refer to the portion of executable code, even if you write a class with method data into an header file. The hope to be a little bit clearer..</span>",
                    "time": null
                }
            ]
        }
    ]
}