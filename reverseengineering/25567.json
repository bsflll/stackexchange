{
    "title": "Radare2 - what does dot mean in disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/25567/radare2-what-does-dot-mean-in-disassembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've just started using radare2 and I've noticed a dot when I tried to disassamble one on my programs. The output is:</p>\n<pre><code>0x00000000      48b841000000.  movabs rax, 0x41\n</code></pre>\n<p>I understand that 0x48 is the REX prefix for mov (0xB8) and immediate operand is 0x41. If 0x41 consumed 64 bits it would be 0x0000000000000041 (8 bytes).</p>\n<p>Total length of the instruction should be 10 bytes (0xA) which makes sense as my next instruction starts at 0xA (as first one consumes 10 bytes starting from 0x0 to 0x9)</p>\n<p>What is the meaning of dot in disassembly above? Could someone maybe point me to documentation that talks about disassembly format?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "201",
    "tags": [
        "disassembly",
        "radare2",
        "x86-64"
    ],
    "user": "markovuksanovic",
    "time": "Jul 27, 2020 at 22:45",
    "comments": [
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">it just means 00, I don't know why they put . instead</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">@R4444 it doesn't have to be 00. See my answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since the number of bytes in the instructions can be different and they had to put some limit on the column width, this is how it is indicated that there are more bytes in the instruction that those that you see on the screen. A '.' indicates that there's more and it doesn't mean it's always zero(s)- it can be anything.</p>\n<p>If this bothers you there are flags that control the behavior.</p>\n<pre><code>:&gt; e asm.nbytes = 6\n</code></pre>\n<p>controls how many bytes are shown, and if you put that value to a relatively small number almost all will end with a <code>'.'</code>.</p>\n<p>You could put there <code>10</code> to see the full instruction but of course that would push opcodes more to the right. You can also turn the bytes off to save some space:</p>\n<pre><code>:&gt; e asm.bytes = false\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Paweł Łukasik",
            "time": "Jul 30, 2020 at 5:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">got it! thanks for the answer</span>",
                    "time": null
                },
                {
                    "user": "markovuksanovic",
                    "text": "<span class=\"comment-copy\">Thanks @Pawel. I assumed it was something like this</span>",
                    "time": null
                }
            ]
        }
    ]
}