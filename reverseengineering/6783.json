{
    "title": "LastPass Android javascript behaviour",
    "link": "https://reverseengineering.stackexchange.com/questions/6783/lastpass-android-javascript-behaviour",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A few weeks ago I made a proof-of-concept app demonstrating how LastPass' method of filling out creds in Chrome was insecure. For those interested the source is at <a href=\"https://github.com/activems/clipcaster\" rel=\"nofollow\">https://github.com/activems/clipcaster</a></p>\n<p>Essentially they copy a chunk of javascript to the clipboard and have the user execute it. This includes the user name and password. In previous versions it has been filled out plainly as:</p>\n<pre><code>if (l_bte) {\n    l_sfv(l_bte, decodeURIComponent(escape(atob('dXNlckBleGFtcGxlLmNvbQ=='))));\n}\nl_sfv(l_bpe, decodeURIComponent(escape(atob('cDRzc3cwcmQ='))));\n</code></pre>\n<p>With 'dXNlckBleGFtcGxlLmNvbQ==' being Base64 for '<a class=\"__cf_email__\" data-cfemail=\"4035332532002538212d302c256e232f2d\" href=\"/cdn-cgi/l/email-protection\">[emailÂ protected]</a>' and 'cDRzc3cwcmQ=' being 'p4ssw0rd'</p>\n<p>LastPass recently updated the JavaScript they use. Now it is (full version at <a href=\"https://raw.githubusercontent.com/activems/clipcaster/master/lastpass_output_v2.js\" rel=\"nofollow\">https://raw.githubusercontent.com/activems/clipcaster/master/lastpass_output_v2.js</a>):</p>\n<pre><code>var l_x = function(t, l, m) {\n    var o = [];\n    var b = '';\n    var p = document.location.href.replace(/https?:\\/\\//, '').substring(0, l);\n    p = l_s('' + l_f(m) + p);\n    for (z = 1; z &lt;= 255; z++) {\n        o[String.fromCharCode(z)] = z;\n    }\n    for (j = z = 0; z &lt; t.length; z++) {\n        b += String.fromCharCode(o[t.substr(z, 1)] ^ o[p.substr(j, 1)]);\n        j = (j &lt; p.length) ? j + 1 : 0;\n    }\n    return decodeURIComponent(escape(b));\n};\n\n....\n\nvar l_f=function(m){ \n    var t=new Date().getTime() /\n        1000 | 0;\n        while (t % 10 != m) {\n            --t;\n        }\n        return t;\n    };\n\n....\n\nif (l_bte) {\n\n    l_sfv(l_bte, l_x(atob('W01cCVUlA1AVCkIDAk8AC1g='), 61, 0));\n}\nl_sfv(l_bpe, l_x(atob('QldeA0BREUAWDEMC'), 61, 0));\n</code></pre>\n<p>Is there any pragmatic reason to write JavaScript like this besides obfuscation?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "208",
    "tags": [
        "android",
        "javascript",
        "security"
    ],
    "user": "Xiao",
    "time": "Dec 8, 2014 at 0:32",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Seems like they're beginning to implement some kind of \"encryption\" and a very preliminary version somehow made it into production code. (I almost hear the manager saying something like \"Someone cracked our current encryption. Seems base64 isn't that secure after all. I don't care if you're not finished yet, if you have a version that doesn't use base64, move it to production. NOW.\")</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In short, no. If they're going to implement the \"crypto\" in Javascript in this way there isn't anything you can do beyond more obfuscation. This is 100% applicable to this situation but see MataSano's article <a href=\"http://matasano.com/articles/javascript-cryptography/\" rel=\"nofollow\">here</a>  explaining pitfalls of client side authentication using JavaScript.  </p>\n<p>Similar to what's touched on in the article, the issue is that no matter how complicated the JavaScript is, it's trivial for an attacker to intercept and run the code. Similar to a MitM where an attack can intercept and replace client side JavaScrip, in this case the issue is that it's so easy for another app to access the Clipboard via the ClipboardManager. A much better bare minimum solution would be to have LastPass et al store saved credentials in an authenticated SQLite database. And upon detecting the fillable are use code in the application. to pull the saved credentials and enter them directly instead of using the Clipboard and running JavaScript.</p>\n<p>The crux of the problem is it's too easy for an attacker to get a callback using the current API; having the app use its own database prevents an attacker from intercepting the authentication workflow without having root privileges (which is a different discussion altogether). This is a good example of not considering security from the ground up when implementing an application. </p>\n<p>As an aside, cool stuff and reporting the bug. Can you put a vulnerable version of the application on github (if you haven't already)? It would be a great demo in the future.</p>\n</div>",
            "votes": "2",
            "user": "Fewmitz",
            "time": "Dec 8, 2014 at 3:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}