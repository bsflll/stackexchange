{
    "title": "How to see all of my changes in idb?",
    "link": "https://reverseengineering.stackexchange.com/questions/19614/how-to-see-all-of-my-changes-in-idb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there ant way to see all of my changes in idb file ?</p>\n<p>All of variable in psudo code that I changed here name, all the funxtion I rename.</p>\n<p>I want to see all of this </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "409",
    "tags": [
        "ida",
        "windows"
    ],
    "user": "Keystone",
    "time": "Oct 13, 2018 at 17:20",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">AFAIK, IDA only shows the bytes are patched relative to the actual loaded binary.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I know there is no easy way to do that, but with some IDAPython or IDC scripting it is achievable. </p>\n<ul>\n<li>Regarding renamed and re-typed global items (functions, global variables, label names, almost everything not related to the decompiled functions content): you can just export all this data as idc script (File--&gt;Produce file--&gt;Dump database to IDC file) and filter it. </li>\n<li>If you need only renamed items, you can see all the data in the Names window (View--&gt;Open subview--&gt;Names window or <kbd>Shift-F4</kbd>). You can also iterate these names with IdaPython function <code>idautils.Names()</code> and use <code>idc.GetType</code> or one of its alternatives to get the corresponding data type.</li>\n<li><p>Regarding types you created: you can use File--&gt;Produce file--&gt;Create C header file </p></li>\n<li><p>Regarding decompiler related changes: you can extend one of the decompiler <a href=\"https://github.com/idapython/src/blob/master/examples/vds4.py\" rel=\"nofollow noreferrer\">IDApython samples</a> to show what you need: this sample dumps all user changes in the function at your cursor location, changing it to run over all functions should be trivial. </p></li>\n</ul>\n<p>These actions should cover the most of what you probably need. </p>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Oct 16, 2018 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}