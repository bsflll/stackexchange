{
    "title": "IDA Hex-Rays: How to SAFELY fix incorrect function declarations?",
    "link": "https://reverseengineering.stackexchange.com/questions/20591/ida-hex-rays-how-to-safely-fix-incorrect-function-declarations",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Update:</strong></p>\n<p>The problem turned out to be more complex and complex because Hex-Rays incorrectly restores the stack after calls of <code>stdcall</code> functions from <code>cdecl</code> functions:</p>\n<pre><code>.text:00403F2F 074                 mov     edx, gameScreenHeight\n.text:00403F35 074                 mov     ecx, [eax]\n.text:00403F37 **074**             push    10h\n.text:00403F39 078                 push    edx\n.text:00403F3A 07C                 mov     edx, gameScreenWidth\n.text:00403F40 07C                 push    edx\n.text:00403F41 080                 push    eax\n.text:00403F42 084                 mov     eax, [ecx+54h]\n.text:00403F45 084                 call    eax\n.text:00403F47 **070**             test    eax, eax\n.text:00403F49 070                 jz      short loc_4\n</code></pre>\n<p>As a result, a function that takes 4 arguments gets only three:</p>\n<p><strong><em>Bad:</em></strong> <code>lpDD-&gt;lpVtbl-&gt;SetDisplayMode(lpDD, gameScreenWidth, gameScreenHeight, 16, **a1**)</code></p>\n<p><strong><em>Good:</em></strong> <code>lpDD-&gt;lpVtbl-&gt;SetDisplayMode(lpDD, gameScreenWidth, gameScreenHeight, 16)</code></p>\n<p>As a result, the function may not use the register value, but only save and restore it, but due to the shifted pointer to the stack after the call, it is considered to be used in some problem call. This causes the entire call chain to be marked as using this register as an argument.</p>\n<p>Worst of all, such a problem arises in branched functions, which have several exit points and in each of them the stack is balanced (000). I can't just change the stack pointer after an erroneous call. I must also find another call and balance the changes made. x.x</p>\n<hr/>\n<p><strong>The original question:</strong>\nI need to detect and safely fix incorrectly recognized function signatures. How I can do that?</p>\n<p><strong>For example, this function saves game settings:</strong></p>\n<pre><code>BOOL __thiscall sub_410640(HKEY this)\n{\n  HKEY v1; // ecx\n  HKEY v2; // ecx\n\n  sub_431C00(this, \"volumeMaster\", *(_DWORD *)&amp;phkResult);\n  sub_431C00(*(HKEY *)&amp;g_volumeMusic, \"volumeMusic\", *(_DWORD *)&amp;g_volumeMusic);\n  sub_431C00(v1, \"volumeFX\", *(_DWORD *)&amp;g_volumeFX);\n  sub_431C00(v2, \"volumeSpeech\", *(_DWORD *)&amp;g_volumeSpeech);\n  return sub_431C00(*(HKEY *)&amp;dword_4A262C, \"volumeMinimum\", *(_DWORD *)&amp;dword_4A262C);\n}\n\n.text:00410640     sub_410640      proc near               ; CODE XREF: PlayVideo+50↑p\n.text:00410640                                             ; sub_416910+1A6↓p\n.text:00410640 000                 mov     eax, phkResult\n.text:00410645 000                 push    eax             ; Data\n.text:00410646 004                 push    offset ValueName ; \"volumeMaster\"\n.text:0041064B 008                 call    sub_431C00\n\n.text:00410650 008                 mov     ecx, g_volumeMusic\n.text:00410656 008                 push    ecx             ; Data\n.text:00410657 00C                 push    offset aVolumemusic ; \"volumeMusic\"\n.text:0041065C 010                 call    sub_431C00\n\n.text:00410661 010                 mov     edx, g_volumeFX\n.text:00410667 010                 push    edx             ; Data\n.text:00410668 014                 push    offset aVolumefx ; \"volumeFX\"\n.text:0041066D 018                 call    sub_431C00\n\n.text:00410672 018                 mov     eax, g_volumeSpeech\n.text:00410677 018                 push    eax             ; Data\n.text:00410678 01C                 push    offset aVolumespeech ; \"volumeSpeech\"\n.text:0041067D 020                 call    sub_431C00\n\n.text:00410682 020                 mov     ecx, dword_4A262C\n.text:00410688 020                 push    ecx             ; Data\n.text:00410689 024                 push    offset aVolumeminimum ; \"volumeMinimum\"\n.text:0041068E 028                 call    sub_431C00\n\n.text:00410693 028                 add     esp, 28h\n.text:00410696 000                 retn\n.text:00410696     sub_410640      endp\n</code></pre>\n<p><strong>If we look at the function inside, we can see that the arguments passed through the registers are not used in any way.</strong></p>\n<p>In addition, it is obvious that calls to the same function should be uniform and the transfer of such arguments does not make any sense.</p>\n<pre><code>BOOL __usercall sub_431C00@&lt;eax&gt;(HKEY a1@&lt;ecx&gt;, LPCSTR lpValueName, ...)\n{\n  LONG v3; // esi\n  HKEY phkResult; // [esp+0h] [ebp-4h]\n  va_list Data; // [esp+Ch] [ebp+8h]\n\n  va_start(Data, lpValueName);\n  phkResult = a1;\n  if ( RegOpenKeyExA(HKEY_LOCAL_MACHINE, SubKey, 0, 1u, &amp;phkResult) )\n    return 0;\n  v3 = RegSetValueExA(phkResult, lpValueName, 0, 4u, (const BYTE *)Data, 4u);\n  RegCloseKey(phkResult);\n  return v3 == 0;\n}\n\n.text:00410600     sub_410600      proc near               ; CODE XREF: sub_4073F0+2B0↑p\n.text:00410600                                             ; WinMain(x,x,x,x)+5F4↓p ...\n.text:00410600\n.text:00410600     arg_0           = dword ptr  4\n.text:00410600\n.text:00410600 000                 mov     eax, [esp+arg_0]\n.text:00410604 000                 test    eax, eax\n.text:00410606 000                 mov     ecx, 1\n.text:0041060B 000                 mov     dword_4AE978, ecx\n.text:00410611 000                 mov     dword_4AF074, eax\n.text:00410616 000                 jz      short locret_410632\n.text:00410618 000                 mov     dword_4A267C, 69h\n.text:00410622 000                 mov     dword_4AE920, 0\n.text:0041062C 000                 mov     dword_4AF03C, ecx\n.text:00410632\n.text:00410632     locret_410632:                          ; CODE XREF: sub_410600+16↑j\n.text:00410632 000                 retn\n.text:00410632     sub_410600      endp\n</code></pre>\n<p><strong>And now I need to adjust the declaration of these functions so that it corresponds to reality.</strong></p>\n<p><strong>But two questions arise:</strong></p>\n<ol>\n<li>How to understand what the problem is?</li>\n<li>How to make corrections safely so that one error in one function does not lead to unbalance of the stack and decompilation errors throughout the entire application database?</li>\n</ol>\n<p><strong>Expected result:</strong></p>\n<pre><code>BOOL __usercall sub_431C00(LPCSTR lpValueName, _DWORD value);\n\nsub_431C00(\"volumeMaster\", *(_DWORD *)&amp;phkResult);\nsub_431C00(\"volumeMusic\", *(_DWORD *)&amp;g_volumeMusic);\nsub_431C00(\"volumeFX\", *(_DWORD *)&amp;g_volumeFX);\nsub_431C00(\"volumeSpeech\", *(_DWORD *)&amp;g_volumeSpeech);\n</code></pre>\n<p><a href=\"https://yadi.sk/d/7g4XYi3_uwgA1g\" rel=\"nofollow noreferrer\">Link to this PE File</a></p>\n<p><strong>Oh yeah, the funny thing is that in this case IDA correctly defines the function signature, but for some reason Hex-Rays blows the roof off:</strong></p>\n<p><strong>IDA:</strong> <code>int __cdecl sub_431C00(LPCSTR lpValueName, BYTE Data)</code></p>\n<p><strong>Hex-Rays:</strong> <code>BOOL __usercall sub_431C00@&lt;eax&gt;(HKEY a1@&lt;ecx&gt;, LPCSTR lpValueName, ...)</code></p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "hexrays",
        "calling-conventions",
        "stack-variables"
    ],
    "user": "Albeoris",
    "time": "Feb 12, 2019 at 22:23",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Possible duplicate of <a href=\"https://reverseengineering.stackexchange.com/questions/17872/why-does-ida-show-wrong-function-arguments-in-pseudocode\">Why does IDA show wrong function arguments in pseudocode?</a></span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">\" we can see that the arguments passed through the registers are not used in any way.\" &lt;- Really? What about <code>ecx</code>?</span>",
            "time": null
        },
        {
            "user": "Albeoris",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky <code>mov ecx, 1</code> what about <code>ecx</code>? The function uses two arguments from the stack.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">In the question body you’re comparing disassembly of sub_410600   with decompilation of sub_431C00</span>",
            "time": null
        },
        {
            "user": "Albeoris",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky, ah got it!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Welcome to RE.SE!</p>\n<blockquote>\n<p>How to understand what the problem is?</p>\n</blockquote>\n<p>When the function is decompiled, IDA checks for its dependencies via dataflow analysis. Basically, it asks which values have to be defined in order to make this function work.</p>\n<p>When it encounters the first line of the function (<code>push ecx</code>) IDA noticed that the value of ecx is used before it was defined in this function, hence it establishes it as a dependency, even though IDA is well aware that it is not a parameter to the <code>RegOpenkeyExA</code> call through its signature. At either and of the function, the ecx value is restored.</p>\n<p>This is what makes IDA think, ecx is part of the function signature: it actually is</p>\n<p>Fun IDA fact: When you decompile function <code>sub_410640</code> first without looking at <code>sub_431C00</code>, the signatures are like you want them to be (due to the lack of information)</p>\n<pre><code>int sub_410640()\n{\n  sub_431C00(\"volumeMaster\", phkResult);\n  sub_431C00(\"volumeMusic\", dword_4D55C8);\n  sub_431C00(\"volumeFX\", dword_4D55CC);\n  sub_431C00(\"volumeSpeech\", dword_4D55D0);\n  return sub_431C00(\"volumeMinimum\", dword_4A262C);\n}\n</code></pre>\n<p>The core problem is the weird useage of the ecx register in this function. Even from an optimization point of view, it does not make any sense.</p>\n<blockquote>\n<p>How to make corrections safely so that one error in one function does\n  not lead to unbalance of the stack and decompilation errors throughout\n  the entire application database?</p>\n</blockquote>\n<p>For example, you could NOP-out the code pushing and poping ecx in the function, since it seems the calling function doesn't rely on this value remaining constant. I tested it real quick and it seems to work.</p>\n<p>You could also solve the pointer aliasing problem. If you could find a way to proof that the <code>ecx</code> value on the stack is not written or read, one could omit this parameter. Sadly, that's pretty hard.</p>\n<p>You could also try and come up with a better decompiler utilizing different heuristics, I guess. You could also try RetDec or Snowman for better results, but they will perform dataflow analysis similar to Hex-Rays and may end up with similar results.</p>\n<p>The decompiler works kind of like a one-way function. When you invoke it, the current function and meta data like variable names and function signatures are passed to it. Although it allows for some corrections, its only the meta data and should not change the assembly code at all.</p>\n</div>",
            "votes": "2",
            "user": "Nordwald",
            "time": "Feb 12, 2019 at 6:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Albeoris",
                    "text": "<span class=\"comment-copy\">Thank you very much for the help! Knowing which direction to look for, I found even more problems on my head. I updated my post by describing the situation. It will not be easy ...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The decompiler decided that <code>ecx</code> is used by <code>sub_431C00</code> because of <code>push    ecx</code> at the beginning of the function which fills the stack slot later used by the variable <code>phkResult</code>, so it may look as if the initial value of <code>phkResult</code> is taken from <code>ecx</code>:</p>\n<pre><code>.text:00431C00                 push    ecx\n.text:00431C01                 lea     eax, [esp+4+phkResult]\n.text:00431C04                 push    eax             ; phkResult\n.text:00431C05                 push    1               ; samDesired\n.text:00431C07                 push    0               ; ulOptions\n.text:00431C09                 push    offset SubKey   ; \"SOFTWARE\\\\Valkyrie Studios\\\\Septerra Co\"...\n.text:00431C0E                 push    80000002h       ; hKey\n.text:00431C13                 call    ds:RegOpenKeyExA\n.text:00431C19                 test    eax, eax\n.text:00431C1B                 jz      short loc_431C21\n.text:00431C1D                 xor     eax, eax\n.text:00431C1F                 pop     ecx\n.text:00431C20                 retn\n</code></pre>\n<p>In fact, this <code>push ecx</code> is just a shorter versions of <code>sub esp, -4</code> - the value of <code>ecx</code> does not need to be preserved across function calls so this push is used to reserve 4 bytes of the stack for the <code>phkResult</code> variable. Unfortunately, it is pretty difficult for an automatic algorithm to differentiate between genuine pushes to save registers or pass arguments to function calls and dummy ones to manipulate the stack. If you decided that the ecx usage is false positive, just fix the function prototype (<kbd>Y</kbd> key) and remove the unnecessary argument:</p>\n<pre><code>int __cdecl sub_431C00(LPCSTR lpValueName, DWORD Data)\n{\n  LSTATUS v3; // esi\n  HKEY phkResult; // [esp+0h] [ebp-4h]\n\n  if ( RegOpenKeyExA(HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\Valkyrie Studios\\\\Septerra Core\", 0, 1u, &amp;phkResult) )\n    return 0;\n  v3 = RegSetValueExA(phkResult, lpValueName, 0, REG_DWORD, (const BYTE *)&amp;Data, 4u);\n  RegCloseKey(phkResult);\n  return v3 == 0;\n}\n</code></pre>\n<p>And now the parent sub has nice decompilation too:</p>\n<pre><code>int sub_410640()\n{\n  sub_431C00(\"volumeMaster\", g_volumeMaster);\n  sub_431C00(\"volumeMusic\", g_volumeMusic);\n  sub_431C00(\"volumeFX\", g_volumeFX);\n  sub_431C00(\"volumeSpeech\", g_gvolumeSpeech);\n  return sub_431C00(\"volumeMinimum\", g_volumeMinimum);\n}\n</code></pre>\n<p>So, to summarize:</p>\n<ol>\n<li>The problem is caused by compiler optimization confusing the decompiler into deciding that the register value is used while it's just a dummy filler. </li>\n<li>There is no one true solution that always works, you'll need to experiment and be prepared to roll back and try again. With experience it will become easier.</li>\n</ol>\n<p>P.S. IDA did not add <code>ecx</code> to the function prototype because it only analyzes stack arguments. The decompiler does dataflow analysis so it can recover register arguments too, but sometimes it can result in false positives, like here.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Feb 13, 2019 at 9:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Albeoris",
                    "text": "<span class=\"comment-copy\">Thanks for the detailed answer. It is a pity that you can not mark both. Very interesting information about optimization!</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">\"101 ways to manipulate the stack pointer to confuse decompilers.\"  I'm not sure where the notion that half of them are optimisations rather than obfuscations should make me laugh or cry.  +1 for holding a competition for the most obscure ways to manipulate the stack :)</span>",
                    "time": null
                }
            ]
        }
    ]
}