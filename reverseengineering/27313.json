{
    "title": "IDA - How do I find every call to a sub",
    "link": "https://reverseengineering.stackexchange.com/questions/27313/ida-how-do-i-find-every-call-to-a-sub",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using IDA to try and understand how a particular executable works. I've found the routine I'm interested in IDA Pro and it all makes perfect sense, in so much as I can see exactly the process play out as I'd expect.</p>\n<p>What I'm very confused about, though, is that I get to the top of the routine and I can't find any calls of references to it. To be clear, this is an executable and there are no exported functions - it's actually a Windows service.</p>\n<p>If I right click and List Crossreferences I just a get single line in rdata? Is there anyway to find what calls this routine?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Dan",
    "time": "Mar 25, 2021 at 18:01",
    "comments": [
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">can you elaborate more with an example or a screenshot?</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">Sounds like a virtual function, or, at least, function that is only referenced via function pointer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Short of debugging it and adding a hardware breakpoint on the vtable/vfunction, this may give you some additional information.  Whether it is <strong>enough</strong>, or whether it will work in this case, I cannot say.</p>\n<ol>\n<li><p>Install and run the <a href=\"https://github.com/rcx/classinformer-ida7\" rel=\"nofollow noreferrer\">Class Informer</a> plugin.</p>\n</li>\n<li><p>Go to that xref you mentioned, and scroll up until you hit the start of the vtable. Note that it is possible that it is not actually a virtual function, in which case you just keep scrolling up an endless list of offsets and these steps will be of no help.</p>\n</li>\n</ol>\n<pre><code>.rdata:0000000141A0E088 ; const BonusEventHttpTask::`vftable'\n.rdata:0000000141A0E088 ??_7BonusEventHttpTask@@6B@ dq offset HttpTask__m_0\n.rdata:0000000141A0E090                 dq offset return_null\n.rdata:0000000141A0E098                 dq offset HttpTask__m_10\n.rdata:0000000141A0E0A0                 dq offset HttpTask__m_18\n.rdata:0000000141A0E0A8                 dq offset return_1\n.rdata:0000000141A0E0B0                 dq offset return_0\n.rdata:0000000141A0E0B8                 dq offset return_0\n...\n</code></pre>\n<ol start=\"3\">\n<li><p>Click on the mangled name that is the vtable name, in this example it is <code>??_7BonusEventHttpTask@@6B@</code></p>\n</li>\n<li><p>View Xrefs (press <kbd>X</kbd>)<br/>\nYou should generally see around 2 XREFS, these being for the constructor and destructor.</p>\n</li>\n<li><p>Take a look at both/all xrefs, and if you're lucky you'll see something like the below, though the first parameter will most likely be <code>__int64</code>.  You can change that to <code>UnknownStruct*</code> (included below) by selecting <code>a1</code>, pressing <kbd>Y</kbd> and typing <code>UnknownStruct*</code></p>\n</li>\n</ol>\n<pre><code>CPickupPlacement *__fastcall CPickupPlacement::__construct(CPickupPlacement *a1, \n        int a2, Vector4 *position, Vector4 *rotation, int a5, int a6)\n{\n    // ... \n    pPickupPlacement-&gt;__vftable = &amp;CPickupPlacement::`vftable';\n    //... \n    return pPickupPlacement;\n}\n</code></pre>\n<ol start=\"6\">\n<li>In this example the created [virtual] class is being returned, so you will then need to view the xrefs to the function you are viewing, and perhaps one will look like this:</li>\n</ol>\n<pre><code>//...\n    v14 = pPickupPlacement ? CPickupPlacement::__construct(pPickupPlacement, a2, a1, a3, a4, a8) : 0i64;\n    // ...\n    qword_140000000 = v14;\n// ...\n</code></pre>\n<ol start=\"7\">\n<li><p>If you are very lucky and this is indeed the case, you can view all xrefs to <code>qword_140000000</code> and get a list some of the functions that are calling your virtual function.    If you are less lucky, you will have to keep following the functions back (via xrefs) and hope that you do find an instance (groan) of your function being assigned to a \"global\" variable similar to the above point.</p>\n</li>\n<li><p>There are further steps that can be followed depending on what you find, but I think this is enough to get you headed in the right direction.</p>\n</li>\n</ol>\n<p>Here is the definition for <code>UnknownStruct</code> referenced in point 5.  Open \"Local types\" and press <kbd>Ins</kbd> then paste in:</p>\n<pre><code>struct UnknownVtable {\n    void* Function[1024];\n};\n\nstruct UnknownStruct {\n    UnknownVtable* vtable;\n    __int64 qword[1024];\n};\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Orwellophile",
            "time": "Apr 20, 2022 at 8:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Talespin_Kit",
                    "text": "<span class=\"comment-copy\">what does \"dq offset\" mean?</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">@Talespin_Kit it's a QWORD sized pointer to where-ever the real thing is.</span>",
                    "time": null
                }
            ]
        }
    ]
}