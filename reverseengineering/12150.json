{
    "title": "Ida Pro Decompiler Plugin producing way too few lines of code?",
    "link": "https://reverseengineering.stackexchange.com/questions/12150/ida-pro-decompiler-plugin-producing-way-too-few-lines-of-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Im reverse engineering a Games Entity System from scratch.\nI found a function that initializes some sort of descriptor, it looks up a given property name in a huge array and initializes the structure with some default values using the found index.</p>\n<p>This is where my trouble starts </p>\n<p>Every function that call this function consists of huge ammounts of assembler code (0xE00 bytes) with 100+ case jumptables yet when i apply Hexrays decompiler i get something like this:</p>\n<pre><code>char __usercall sub_B2C0E0@&lt;al&gt;(int a1@&lt;edx&gt;, int a2@&lt;ecx&gt;, int a3, _DWORD *a4)\n{\n  int v4; // eax@1\n  int v5; // ecx@2\n  int v6; // eax@2\n  int v7; // esi@3\n  int v8; // edx@3\n  int v10; // [sp+18h] [bp-BCh]@1\n  int v11; // [sp+1Ch] [bp-B8h]@1\n  int v12; // [sp+28h] [bp-ACh]@1\n  _DWORD *v13; // [sp+30h] [bp-A4h]@1\n  int v14; // [sp+3Ch] [bp-98h]@1\n\n  v10 = a3;\n  v14 = 0;\n  v4 = *a4 - 1;\n  v11 = a1;\n  v13 = a4;\n  v12 = a2;\n  if ( v4 &gt; 0 )\n  {\n    v5 = a2 - 8;\n    v6 = v4 + 1;\n    do\n    {\n      v7 = *(v5 + 8);\n      v8 = *(v5 + 12);\n      v5 += 8;\n      --v6;\n    }\n    while ( v6 );\n  }\n  return 0;\n}\n</code></pre>\n<p>Which, while the function may execute like that in a small part, is not nearly enough to actually be the code i wanted decompiled.</p>\n<p>My question now is if anyone knows what could cause this behavior in the ida decompiler.</p>\n<p>Can i do my part to help it understand the function ? \nIs it a known bug ? </p>\n<p>Anyway i will try and analyze the ASM code without the the decompilers help but its a real pain :D</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "decompilation"
    ],
    "user": "Blob31",
    "time": "Mar 4, 2016 at 16:13",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">If you think the Hex-Rays decompiler is malfunctioning, please email <a class=\"__cf_email__\" data-cfemail=\"9cefe9ececf3eee8dcf4f9e4b1eefde5efb2fff3f1\" href=\"/cdn-cgi/l/email-protection\">[emailÂ protected]</a></span>",
            "time": null
        },
        {
            "user": "Blob31",
            "text": "<span class=\"comment-copy\">Thanks, i will do that. Also i noticed that the first line in the manual is similar to my problem <i>ashes on my head</i></span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Generally, it might be better to stop depending on decompilers to do all the work.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>May be, function have a switch idiom, that hasn't recognized by IDA (not hexrays),  in this case hexrays can omit all switch code in output. You need search near that function for switch offset tables and manually set switch idioms for referencing code </p>\n</div>",
            "votes": "1",
            "user": "Ilya Kiselev",
            "time": "Mar 18, 2016 at 20:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, there's no disassembly output given, so I can only give general suggestion.</p>\n<p>There are thousands of reasons stop hex rays decompiling.Your situation is extremely common in reverse engineering.</p>\n<p>Usually that's because other functions are not analyzed, its effect on the control flow is not being calculated, leads to wrong or incomplete output.</p>\n<p>You can simply click into every functions, forcing hexrays analyze them.</p>\n<p>As you mentioned you are reversing a game, there might be obfuscation. Maybe obfuscation made hexrays believe that those case statements cannot be executed, then dropped them from the output. To fix this you can modify function's control flow graph, and then make it clear that case statements WILL be executed, then the decompiler will produce the correct output.</p>\n<p>P.S.: Personally I think incomplete output is because of the Junk Code Removing technology, which might based on symbolic executing.</p>\n</div>",
            "votes": "0",
            "user": "Misty",
            "time": "May 23, 2016 at 2:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}