{
    "title": "Reverse getline(cin, text)",
    "link": "https://reverseengineering.stackexchange.com/questions/22122/reverse-getlinecin-text",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to solve a crackme that was made in C++, and I was able to\n\"recreate\" a function call, through the library calls the program made. Here's the piece of code that I'm trying to reverse:</p>\n<pre><code>string text;\ngetline(cin, text);\n</code></pre>\n<p>And here's the asm equivalent (getline only):</p>\n<pre><code>lea    rax,[rbp-0x1c0]\nmov    rsi,rax\nmov    edi,0x6020c0\ncall   0x400d10 &lt;std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;)@plt&gt;\n</code></pre>\n<p>What is happening with the variable <code>text</code> (Meaning: I can't seem to print the place in memory in which the raw characters are stored)?\nI'm using <code>print *(char **)&lt;register/memory&gt;</code> to try to find it. Where are the raw characters of this string stored after this operation? How to I find it and how to I print them?</p>\n<p>I'm using gdb.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "949",
    "tags": [
        "linux",
        "c++",
        "gdb",
        "crackme",
        "assembly"
    ],
    "user": "unc4nny",
    "time": "Nov 23, 2019 at 10:18",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>use print &amp;text<br/>\nor use info locals   </p>\n<pre><code>:\\&gt;dir /b &amp; type cin.cpp &amp; g++ -g cin.cpp  &amp; echo ========= &amp; gdb -q a.exe\ncin.cpp\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;    \nint main (void) {\n    string text;\n    getline(cin,text);\n}=========\nReading symbols from a.exe...done.\n(gdb) break main\nBreakpoint 1 at 0x4015cf: file cin.cpp, line 6.\n(gdb) r\nBreakpoint 1, main () at cin.cpp:6\n6           string text;\n(gdb) print &amp;text\n$1 = (std::__cxx11::string *) 0x22fec8  &lt;&lt;&lt;&lt;&lt;&lt;\n(gdb) print text\n$2 = \"\"ÿ\\\"\\000lí|w\", '\\000' &lt;repeats 12 times&gt;,&lt;repeats 11 times&gt;...\n(gdb) ni till getline is es=xecuted\n0x004015e9      7           getline(cin,text);\n(gdb)\nhello cin where are you hiding\n6           string text;\n(gdb) print text\n$3 = \"hello cin where are you hiding\"\n(gdb) x/s $1\n0x22fec8:       \"ès2\"\n(gdb) x/s *(int *)$1\n0x329ae8:       \"hello cin where are you hiding\"\n(gdb) x/s *(int *)&amp;text\n0x329ae8:       \"hello cin where are you hiding\"\n(gdb) info locals\ntext = \"hello cin where are you hiding\"\n</code></pre>\n<p>64 bit mingw64 on windows 10 (first four arguments are passed in ecx,edx,r8,r9. rest in stack)</p>\n<p>source compiled without -g</p>\n<pre><code>cat.exe gppcpp.cpp\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main(void) {\n        string text;\n        getline(cin, text);\n}\n</code></pre>\n<p>compiled without debug info</p>\n<pre><code>g++ gppcpp.cpp\n\na.exe\n555\n</code></pre>\n<p>disassembling function main using a file command.txt which contains the following commands</p>\n<pre><code>cat.exe commands.txt\nset disassembly-flavor intel\nset print asm-demangle on\nbreak main\nr\ndisassemble $pc\nq\n</code></pre>\n<p>disassembly of main</p>\n<pre><code>:\\&gt;gdb -batch -x commands.txt a.exe\n\nBreakpoint 1 at 0x401563\n[New Thread 8964.0x2c38]\n\nBreakpoint 1, 0x0000000000401563 in main ()\nDump of assembler code for function main:\n   0x0000000000401550 &lt;+0&gt;:     push   rbp\n   0x0000000000401551 &lt;+1&gt;:     push   rbx\n   0x0000000000401552 &lt;+2&gt;:     sub    rsp,0x48\n   0x0000000000401556 &lt;+6&gt;:     lea    rbp,[rsp+0x80]\n   0x000000000040155e &lt;+14&gt;:    call   0x401710 &lt;__main&gt;\n=&gt; 0x0000000000401563 &lt;+19&gt;:    lea    rax,[rbp-0x60]\n   0x0000000000401567 &lt;+23&gt;:    mov    rcx,rax\n   0x000000000040156a &lt;+26&gt;:    call   0x401658 &lt;std::__cxx11::basic_stringxxxxxxxxxxxx\n   0x000000000040156f &lt;+31&gt;:    lea    rax,[rbp-0x60]\n   0x0000000000401573 &lt;+35&gt;:    mov    rdx,rax\n   0x0000000000401576 &lt;+38&gt;:    mov    rcx,QWORD PTR [rip+0x2d93]\n   0x000000000040157d &lt;+45&gt;:    call   0x401638 &lt;std::basic_istream&lt;char, std::cxxxxxxxxxxxx\n   0x0000000000401582 &lt;+50&gt;:    lea    rax,[rbp-0x60]\n   0x0000000000401586 &lt;+54&gt;:    mov    rcx,rax\n   0x0000000000401589 &lt;+57&gt;:    call   0x401650 &lt;std::__cxx11::basic_string&lt;char,xxxxxxx\n   0x000000000040158e &lt;+62&gt;:    mov    eax,0x0\n   0x0000000000401593 &lt;+67&gt;:    jmp    0x4015af &lt;main+95&gt;\n   0x0000000000401595 &lt;+69&gt;:    mov    rbx,rax\n   0x0000000000401598 &lt;+72&gt;:    lea    rax,[rbp-0x60]\n   0x000000000040159c &lt;+76&gt;:    mov    rcx,rax\n   0x000000000040159f &lt;+79&gt;:    call   0x401650 &lt;std::__cxx11::basic_string&lt;char,xxxxxxxxxxxx\n   0x00000000004015a4 &lt;+84&gt;:    mov    rax,rbx\n   0x00000000004015a7 &lt;+87&gt;:    mov    rcx,rax\n   0x00000000004015aa &lt;+90&gt;:    call   0x402ae0 &lt;_Unwind_Resume&gt;\n   0x00000000004015af &lt;+95&gt;:    add    rsp,0x48\n   0x00000000004015b3 &lt;+99&gt;:    pop    rbx\n   0x00000000004015b4 &lt;+100&gt;:   pop    rbp\n   0x00000000004015b5 &lt;+101&gt;:   ret\nEnd of assembler dump.\nA debugging session is active.\n\n        Inferior 1 [process 8964] will be killed.\n\nQuit anyway? (y or n) [answered Y; input not from terminal\n</code></pre>\n<p>the second argument is @rdx<br/>\nlets debug step few times until $rdx is initialized<br/>\nsave it and execute the getline and retrieve the cin from saved variable  </p>\n<pre><code>:\\&gt;gdb -q a.exe\nReading symbols from a.exe...done.\n\n(gdb) break main\nBreakpoint 1 at 0x401563\n\n(gdb) r\nStarting program: F:\\src\\gppcpp\\a.exe\n[New Thread 6832.0x13c4]\nBreakpoint 1, 0x0000000000401563 in main ()\n\n(gdb) ni 6\n0x000000000040157d in main ()\n\n(gdb) set print  asm-demangle on\n\n(gdb) x/i $pc\n=&gt; 0x40157d &lt;main+45&gt;:\n    callq  0x401638 &lt;std::basic_istream&lt;char, xxxxxxxxxx\n\n(gdb) print $rdx\n$1 = 6422000\n\n(gdb) ni\nhello uncanny the cin is at saved variable $1\n\n0x0000000000401582 in main ()\n\n(gdb) x/s *(char **)$1\n0x143a60:       \"hello uncanny the cin is at saved variable $1\"\n(gdb)\n</code></pre>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Sep 15, 2019 at 20:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "unc4nny",
                    "text": "<span class=\"comment-copy\">Hey man, I'm new to reverse engineering so I'm kinda lost in your answer. The crackme I'm trying to solve is not compiled with the <code>-g</code> flag, so I don't have access to variable names and whatnot. The C++ code is what I found to be the representation of the asm code, through the library's calls, so how would I do that in that situation? Another thing is that your answer, IMHO, is really confusing for someone who's new, like me. :( Could you explain what is happening here? Thx a lot!</span>",
                    "time": null
                },
                {
                    "user": "user202729",
                    "text": "<span class=\"comment-copy\">This answer relies on the internal structure of std::string. GDB should have built in pretty printing of STL structure, that should be used instead.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">removed comments and added content to answer</span>",
                    "time": null
                }
            ]
        }
    ]
}