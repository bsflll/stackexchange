{
    "title": "Need help understanding \"garbage\" data in https request",
    "link": "https://reverseengineering.stackexchange.com/questions/16045/need-help-understanding-garbage-data-in-https-request",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I managed to overcome certificate pinning in an android application and I am now able to view all the HTTPS request in plain text. However, I came across this request that I still do not understand:</p>\n<p><a href=\"https://i.sstatic.net/K4l5J.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/K4l5J.png\"/></a></p>\n<p>We can see that it is a POST request with some 'junk' data at the bottom. At first, I thought this 'junk' is some form of encrypted data. However, after looking at the decompiled source code, it does not seem to use any form of encryption as shown below.</p>\n<pre><code>@Override\npublic List&lt;byte[]&gt; sendBatch(String serializable, List&lt;byte[]&gt; list) throws AmazonClientException {\n    void var2_7;\n    void var1_3;\n    if (var2_7 == null || var2_7.isEmpty()) {\n        List list2 = Collections.emptyList();\n        return var1_3;\n    } else {\n        PutRecordBatchRequest putRecordBatchRequest = new PutRecordBatchRequest();\n        putRecordBatchRequest.setDeliveryStreamName((String)((Object)serializable));\n        ArrayList&lt;Record&gt; arrayList = new ArrayList&lt;Record&gt;(var2_7.size());\n        for (byte[] arrby : var2_7) {\n            Record record = new Record();\n            record.setData(ByteBuffer.wrap(arrby));\n            arrayList.add(record);\n        }\n        putRecordBatchRequest.setRecords(arrayList);\n        putRecordBatchRequest.getRequestClientOptions().appendUserAgent(this.userAgent);\n        PutRecordBatchResult putRecordBatchResult = this.client.putRecordBatch(putRecordBatchRequest);\n        int n2 = putRecordBatchResult.getRequestResponses().size();\n        ArrayList arrayList2 = new ArrayList(putRecordBatchResult.getFailedPutCount());\n        int n3 = 0;\n        do {\n            ArrayList arrayList3 = arrayList2;\n            if (n3 &gt;= n2) return var1_3;\n            if (putRecordBatchResult.getRequestResponses().get(n3).getErrorCode() != null) {\n                arrayList2.add(var2_7.get(n3));\n            }\n            ++n3;\n        } while (true);\n    }\n}\n</code></pre>\n<p>I searched for the method putRecordBatch and came across the docs: <a href=\"http://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html\" rel=\"nofollow noreferrer\">http://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html</a>\nand realise that the syntax is of the form:</p>\n<pre><code>{\n   \"DeliveryStreamName\": \"string\",\n   \"Records\": [ \n      { \n         \"Data\": blob\n      }\n   ]\n}\n</code></pre>\n<p>where I believe the 'junk' data is simply just another form of the json object above. Is there any way I can convert this junk data to a more readable form?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "136",
    "tags": [
        "android",
        "java",
        "apk",
        "byte-code",
        "https-protocol"
    ],
    "user": "Lew Wei Hao",
    "time": "Aug 9, 2017 at 15:31",
    "comments": [
        {
            "user": "JesusFreke",
            "text": "<span class=\"comment-copy\">The problem is that your https request is full of squiggly red lines :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The content is encoded with gzip per the <code>Content-encoding</code> header. You can use the decoder in Burp proxy (if that is what you are currently using) to decode the data or by using for intance <code>gunzip</code> in the Linux command line.</p>\n</div>",
            "votes": "2",
            "user": "Sherman123",
            "time": "Aug 9, 2017 at 16:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lew Wei Hao",
                    "text": "<span class=\"comment-copy\">Hi I tried Decoding as gzip using Burp decoder but the output still doesn't make sense. Maybe I'm supposed to copy the output to a file? Is there any way I can copy the hex values from burp decoder? When I try to copy the values raw and paste it in any editor, the whole output gets shrunk to just 2 bytes</span>",
                    "time": null
                },
                {
                    "user": "Lew Wei Hao",
                    "text": "<span class=\"comment-copy\">ah nevermind i got it to decode properly using smart decode instead of gzip decode</span>",
                    "time": null
                }
            ]
        }
    ]
}