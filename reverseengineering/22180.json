{
    "title": "How to help IDA to auto complete libc functions?",
    "link": "https://reverseengineering.stackexchange.com/questions/22180/how-to-help-ida-to-auto-complete-libc-functions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a x86_64 ELF binary which is statically compiled. With some digging,\nI have found the C library is musl. In IDA Pro 7.0, the decompiled pseudo code\nshows sycalls as inline assembly code. But in latest IDA Pro 7.3.x it is shown\nas an incomplete function. Take <code>fork()</code> as an example:</p>\n<ul>\n<li>In assembly:</li>\n</ul>\n<pre><code>mov eax, 57\nsyscall\n</code></pre>\n<ul>\n<li>In IDA Pro 7.0:</li>\n</ul>\n<pre><code>__asm { syscall; LINUX - sys_fork }\n</code></pre>\n<ul>\n<li>In IDA Pro 7.3.x:</li>\n</ul>\n<pre><code>sys_fork()\n</code></pre>\n<p>So, there is some improvement :)</p>\n<p>I want IDA to automatically resolve the function parameters and return values.\nIn Windows world, I did something similar by <a href=\"https://reverseengineering.stackexchange.com/q/18669/23069\">creating type libraries</a>.\nIs there any way to import the whole C library (musl or glibc) in IDA without\nmanually editing every libc functions?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "decompilation",
        "hexrays",
        "libc"
    ],
    "user": "Biswapriyo",
    "time": "Sep 24, 2019 at 9:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Inline syscalls are rarely used on their own even in minimal libraries like musl. Usually there are wrapper functions around the syscall which is what actually ends up in the binary. So what you can do is use the FLAIR toolkit to generate a FLIRT signature from the musl’s static library and then apply the signature to your binary. This way you should get all the wrapper functions recognized which, coupled with one of the standard type libraries, should give you names and arguments for the C library functions. </p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 27, 2019 at 21:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Compiled musl from git repo. Ran <code>./pelf libc.a</code>. Got this error <code>(__init_tls.lo): Unknown relocation type 42 (offset in section=0x41)</code>. Though it generated <code>libc.pat</code> file, <code>./sigmake libc.pat libc.sig</code> shows this error <code>./lib/libc.pat (1): FATAL: can't find eof marker (---)</code>.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">IIRC you can handle unsupported relocations with -r switch</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">It’s a switch for pelf, not sigmake</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">I have to find the compiler. Now flirt works, IDA can shows 90% of the syscall/libc function names.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are the required steps using <a href=\"https://reverseengineering.stackexchange.com/a/22202/23069\">Igor Skochinsky's answer</a>:</p>\n<ul>\n<li>Clone musl git repository:</li>\n</ul>\n<pre><code>git clone --depth=1 git://git.musl-libc.org/musl\n</code></pre>\n<ul>\n<li>Compile the code:</li>\n</ul>\n<pre><code>cd musl; ./configure; make -s -j2\n</code></pre>\n<ul>\n<li>Extract Flair tool from IDA SDK. Run <code>pelf</code> (ELF parser) with the musl static\nlibrary which is compiled in above step:</li>\n</ul>\n<pre><code>cd ./lib\n~/flair/bin/linux/pelf libc.a\n</code></pre>\n<p>The output will be something like below:</p>\n<pre><code>Fatal [/mnt/c/MyFiles/libc.a] (__init_tls.lo): Unknown relocation type 42 (offset in section=0x3a).\n</code></pre>\n<ul>\n<li>To fix the unsupported relocation error, run <code>pelf</code> with <code>-r</code> option:</li>\n</ul>\n<pre><code>./flair/bin/linux/pelf -r42:58:0 libc.a musl.pat\n</code></pre>\n<p>The <code>-r</code> option is specified as <code>-rN:O:L</code> where N is relocation type, mark as\nvariable L bytes at offset O from the relocation address. This creates a PAT file.</p>\n<ul>\n<li>Now run <code>sigmake</code> to create the Flair signature file:</li>\n</ul>\n<pre><code>./flair/bin/linux/sigmake -n musl musl.pat musl.sig\n</code></pre>\n<p>If the output does not show any warning then the SIG file is OK. But if there\nany collisions with the function signature the output will be something like below:</p>\n<pre><code>libc.sig: modules/leaves: 1550/1775, COLLISIONS: 41\n</code></pre>\n<p>To mitigate the error, remove comments from <code>musl.exc</code> collision file. Then run\nthe above <code>sigmake</code> command again. There will be a <code>musl.sig</code> file which can be\nimported in IDA Pro from File &gt; Load File &gt; FLIRT signature file.</p>\n<p>FLIRT signature <strong>depends on the C/C++ compiler</strong>. For my case it is clang. I found\nit in the exception handling function. There will be a static string like <code>CLNGC++\\0</code>.\nThe string can not be found in IDA's String Window. So, one has to find the\nexception handling function first. The trick is that the function is called whenever\na error value returns.</p>\n</div>",
            "votes": "3",
            "user": "Biswapriyo",
            "time": "Nov 19, 2019 at 15:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Much appreciated!</span>",
                    "time": null
                }
            ]
        }
    ]
}