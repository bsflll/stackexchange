{
    "title": "Translating a Korean Exclusive PS2 game - Hangeul encoding?",
    "link": "https://reverseengineering.stackexchange.com/questions/21346/translating-a-korean-exclusive-ps2-game-hangeul-encoding",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I got my hands on a copy of Mystic Nights, a survival horror game for the PS2 realeased exclusively in Korea.  The game's text is all in Hangeul (Korean writing system). I extracted the ISO and cracked it open in hopes of translating the game to English but I can't  figure out where the text is stored. I've located graphic files (TIM2, .TM2) nested inside of .RES files (resource files?) and I was able to extract those TIM2 images with an executable I found on <a href=\"https://romhacking.net\" rel=\"nofollow noreferrer\">https://romhacking.net</a>. I noticed that there are TIM2 images holding character tables for Hangeul. I can't  really see any other pertinent files that may hold text besides two large binary files <code>DATA1.BIN</code> and <code>DATA2.BIN</code> (each about 500mb in size).</p>\n<p>If this were a Japanese game, I would search the binary files for JIS encoded text... but unfortunately  that is not the case.</p>\n<p>Any ideas on how I could proceed?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "binary",
        "encodings"
    ],
    "user": "Shpack",
    "time": "Jul 31, 2024 at 22:26",
    "comments": [
        {
            "user": "Ricardo",
            "text": "<span class=\"comment-copy\">Please add like 10 lines of instructions where you find the game printing the characters. That will help</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is what I got for you. I think if you going to translate this is going to be more complicated that you think because of the way the company programmed this game, but anyway...</p>\n<p>I am using PCSX2 to execute the game and GameConqueror (alternative to Cheat Engine on Linux) to check the memory.</p>\n<p>First I thought that the game was importing the text from a file and mapping the characters from the text file on the image to show it graphically so I got to the point in the game where it shows ASCII character like here:</p>\n<p><a href=\"https://i.sstatic.net/52A7s.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/52A7s.png\"/></a></p>\n<p>With GameConqueror I searched for strings that contain 'R1' until I got to this address <code>0x202a3c00</code>; then I checked the memory and I got this chunk of data:</p>\n<p><a href=\"https://i.sstatic.net/TwKvn.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/TwKvn.png\"/></a></p>\n<p>By now I know that indeed they are using some ASCII and that they are importing it from a file so I extract the files inside of the ISO image, enter that folder and then I start searching in the files for those hex values with:</p>\n<pre><code>grep -rnw '.' -e $(echo -e '\\x52\\x31\\x20\\xb9')\n</code></pre>\n<p>I got:</p>\n<pre><code>Binary file ./RES/SUBSYS.RES matches\n</code></pre>\n<p>Great! Then I opened it with a hex editor and searched for the values. If you do that you will notice that they are using some type of syntax to tell the game what to show. In this case they show a text type 'TIP'</p>\n<p><a href=\"https://i.sstatic.net/Nfm5P.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Nfm5P.png\"/></a></p>\n<p>I think that by now you could start translating but I wanted to go beyond and disassemble the code to modify it because there is going to be a problem if you translate that file (I will address that later) so with PCSX2 debugger I added a breakpoint to <code>0x202a3c00</code>  and I got two functions that access to this address:</p>\n<pre><code>z_un_0014bdf0 write\nz_un_00155c70 read\n</code></pre>\n<p>I use Binary Ninja to disassemble it better (PSCX2 debugger sucks) but I had some problems... I wanted to use Hopper but I need to install some plugins and it's too annoying... If I use IDA Pro I have to buy it because it's mips.... So I guess there is not other option than translate  that file. The problem with translating that file is that you would have to come with a translation with less bytes than it already contains. For example.</p>\n<p>The text in the first image has 57 bytes. Meaning, if the translation is more than 57 ASCII characters then you would have to come with a slightly different translation. If it is less then that its easy because you can fill it with 0x20 (spaces).</p>\n<p><a href=\"https://i.sstatic.net/PuqqV.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/PuqqV.png\"/></a></p>\n<p>So what encoder are they using? I'm not an expert on encoding formats but I'm pretty sure that they are not using any standard one and they decided to came with a custom one. I know this for 3 reasons:</p>\n<ol>\n<li>They have ASCII values that actually represent ASCII values but\nvery limited.</li>\n<li>They are not using the Unicode block Hangul Syllables. The character <code>버</code> in the game is <code>0xb9f6</code> but it should be <code>0xbc84</code>, <code>튼</code> is in  the game <code>0xc6b0</code> it should be <code>0xd2bc</code>, etc.</li>\n<li>The images that you extracte. has no more than 500 Korean characters but the Unicode Hangul table has 11,172.</li>\n</ol>\n<p>UPDATE:\nThanks to @IgorSkochinsky to check the encoder with different method. It is <a href=\"http://i18nl10n.com/korean/euckr.html\" rel=\"nofollow noreferrer\">EUC-KR</a></p>\n</div>",
            "votes": "2",
            "user": "tripleee",
            "time": "Jul 31, 2024 at 22:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">It seems 버 is B9 F6 in EUC-KR</span>",
                    "time": null
                },
                {
                    "user": "Ricardo",
                    "text": "<span class=\"comment-copy\">You do have the link? I got it from here <a href=\"https://encoding.spec.whatwg.org/euc-kr.html\" rel=\"nofollow noreferrer\">encoding.spec.whatwg.org/euc-kr.html</a> and it does not look like it.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I saved a file in Notepad++ as EUC-KR and looked at the bytes</span>",
                    "time": null
                },
                {
                    "user": "Ricardo",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky you are right. Okay I guess the link that I was using as a reference was wrong...This one match <a href=\"http://i18nl10n.com/korean/euckr.html\" rel=\"nofollow noreferrer\">i18nl10n.com/korean/euckr.html</a></span>",
                    "time": null
                },
                {
                    "user": "Shpack",
                    "text": "<span class=\"comment-copy\">I just wanted to thank both of you very very much. I've made a tremendous amount of progress on the translation. Of course not being able to add more characters due to not being able to easily alter the number of bytes per text entry is quite annoying and handicapping at times, but it's better than nothing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would try <a href=\"https://en.wikipedia.org/wiki/CP949\" rel=\"nofollow noreferrer\">CP949</a>. Of course, this assumes that text data is not packed or encoded, which can happen too. Maybe try dumping/searching the <strong>emulator</strong> process memory at runtime (add UTF-16 too in that case), then try to track down how it appears there.</p>\n<p><strong>EDIT</strong> I missed originally that the game is for PS2. In that case UTF-8 is unlikely, as well as plain text data in the emulator memory. In fact, they might  compose glyphs manually without using a standard encoding, or just store all text as images (I noticed that this is quite common on Korean websites). Still, tracking and manipulating the game’s memory in the emulator process should allow you to find the data (be it text or graphical). For example, check out this write up on extracting 3D models via emulator process tracking:</p>\n<p><a href=\"https://suxin.space/notes/cw-reverse-engineering-models/\" rel=\"nofollow noreferrer\">https://suxin.space/notes/cw-reverse-engineering-models/</a></p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "May 22, 2019 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Shpack",
                    "text": "<span class=\"comment-copy\">Indeed you were correct about the text being stored as images.  These are some TIM2 image files i found when extracting data form the resources files. <a href=\"https://imgur.com/a/kSL6CJ0\" rel=\"nofollow noreferrer\">imgur.com/a/kSL6CJ0</a> There are several more pages to cover every possible Korean character.  I'm guessing each character is drawn onto the screen by referencing a sub-array of pixels from the corresponding image containing that specific character? @Igor Skochinsky</span>",
                    "time": null
                },
                {
                    "user": "Ricardo",
                    "text": "<span class=\"comment-copy\">@Shpack You can use a debugger to find out where is using it. <a href=\"https://github.com/mlafeldt/ps2rd\" rel=\"nofollow noreferrer\">github.com/mlafeldt/ps2rd</a>. Or use an ps2 emulator and debug the game. pcsx2 has a debugger</span>",
                    "time": null
                },
                {
                    "user": "Shpack",
                    "text": "<span class=\"comment-copy\">@Ricardo thanks for the reply. I attached cheat engine onto a pcsx2 process and found some addresses corresponding to text. I was able to change some text... however,  I have no idea how to trace those addresses back to a file.</span>",
                    "time": null
                },
                {
                    "user": "Ricardo",
                    "text": "<span class=\"comment-copy\">@Shpack that is smart! also use the debugger. here are some debug shortcuts <a href=\"https://github.com/PCSX2/pcsx2/blob/master/bin/docs/debugger.txt\" rel=\"nofollow noreferrer\">github.com/PCSX2/pcsx2/blob/master/bin/docs/debugger.txt</a> I will give it a try tonight</span>",
                    "time": null
                }
            ]
        }
    ]
}