{
    "title": "Why is the value of the ESP register the same every time, when we turnoff the ASLR?",
    "link": "https://reverseengineering.stackexchange.com/questions/6092/why-is-the-value-of-the-esp-register-the-same-every-time-when-we-turnoff-the-as",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are many functions running on the system and also they require the <a href=\"https://en.wikipedia.org/wiki/X86#Purpose\" rel=\"nofollow\">ESP register</a> (x86). So if its value becomes constant(by turning off the <a href=\"http://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow\">ASLR</a>), then how could it be possible for every function to have same ESP value?</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "disassembly",
        "memory",
        "exploit"
    ],
    "user": "trawgs",
    "time": "Aug 20, 2014 at 9:57",
    "comments": [
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">Because each process has its own context? This problem would also apply to standard ImageBases for executables without relocations, etc...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Because the operating system is initializing <code>ESP</code> always at the same value (and that the execution of the program you look at are deterministic).</p>\n<p>The way the ASLR (Address-Space Layout Randomization) works for stack randomization is very simple. At program start, the operating system, when initializing the <code>ESP</code> register, will add a random value to it.</p>\n<p>When you disable the ASLR, this addition is skipped and start always at the same value.</p>\n<p>For example, in Linux (<code>arch/x86/kernel/process.c</code>) we have:</p>\n<pre><code>unsigned long arch_align_stack(unsigned long sp)\n{\n    if (!(current-&gt;personality &amp; ADDR_NO_RANDOMIZE) &amp;&amp; randomize_va_space)\n            sp -= get_random_int() % 8192;\n    return sp &amp; ~0xf;\n}\n</code></pre>\n<p>As you see, the stack-pointer (<code>ESP</code>) is added to a random value to shuffle its original value. And, it will be ignored if one of the conditions in the conditional is not true.</p>\n<p>All other OSes behave approximately the same (up to my knowledge).</p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Aug 19, 2014 at 7:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Turning ASLR on/off affects the <strong>initial</strong> value of the stack pointer. Whenever a function is called, it reserves the amount of stack it needs, by subtracting from the stack pointer. When this function calls another one, it will push its arguments on the stack (which decreases the stack pointer even more), then call the other function.</p>\n<p>If you run the same program several times, with aslr turned <strong>off</strong>, and with exactly the same input, thus guaranteeing the same program flow, your function will get the same stack pointer every time. But it's not the initial stack pointer; it's the initial stack pointer minus all stack frames previous functions needed.</p>\n<p>If you run the same program several times, with aslr turned <strong>on</strong>, and with exactly the same input, thus guaranteeing the same program flow, your function will get a different stack pointer every time. However, the difference between the initial stack pointer (when main() is called), and the one your function gets, will be the same.</p>\n<p>Of course, this assumes the stack is growing downward, which is the case on x86/x64 and most other current processors, but there are architectures where the stack grows up. On those architectures, replace \"subtract\" with \"add\".</p>\n<p>EDIT:</p>\n<p>My crystal ball just told me that with \"There are many functions running on the system and also they requires esp\" you wanted to say \"There are many processes running on a system at the same time, each of them needs a stack; how can they coexist if ASLR is turned off and they have the same stack pointer? Won't they overwrite each other's stacks?\"</p>\n<p>This is what <a href=\"https://www.google.de/search?q=virtual%20memory\" rel=\"nofollow\">Virtual Memory</a> is about. There are many resources on the internet that explain virtual memory better than i could in a few lines; so just this: the same <em>virtual</em> addresses are mapped to different <em>physical</em> addresses for different processes.</p>\n<p>However, this doesn't have much to do with reverse engineering anymore.</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Aug 19, 2014 at 8:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Oh, reading your answer just made it clear that the question was also about process virtual memory... I missed half of the question in my own answer... +1 for you.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I'm not even sure the question <i>is</i> about virtual memory - not being a native speaker myself, i have some understanding for posters who are struggling to explain their problem and hit the wrong \"keywords\", in this case \"functions\".</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">In fact, I think that the question is coming from the fact the author didn't know about how are the processes kept separated in memory... So, indirectly, I think it is. You managed to read between lines ! :-)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, it will not be fixed for every function even if you turn off ASLR, simple example is when function A call function B</p>\n<pre><code>A:\n...\n...\n...\ncall B ---&gt; (1)\n[next instruction]\n...\n</code></pre>\n<p><code>(1)</code> This assembly instruction will push the address of [next instruction] to the stack as a return address, which will increase the value of ESP, meaning that ESP value for function B is now different</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Aug 19, 2014 at 8:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}