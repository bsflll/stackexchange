{
    "title": "Give a name to an arbitrary hex value in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/16542/give-a-name-to-an-arbitrary-hex-value-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using IDA Pro 7.0.</p>\n<p>I am analyzing a library that is part of a larger ARM executable, so there are often calls to external functions that aren't in this library. Therefore obviously the address of the call does not get symbolicated correctly. For example, the program might be calling <code>mmap</code>, which is at <code>0x12345678a</code> , but it shows up as</p>\n<pre><code>BL              0x12345678a\n</code></pre>\n<p>instead of</p>\n<pre><code>BL              _mmap\n</code></pre>\n<p>I have a text file that lists all the external functions and their addresses; i.e., one of the lines of this file is</p>\n<pre><code>12345678a _mmap\n</code></pre>\n<p>So I want to write a script to rename the locations in IDA based on this external file.</p>\n<p>Can anyone tell me what the IDC or IdaPython command would be to associate the address <code>0x12345678a</code> with the name <code>_mmap</code> so that these calls show up correctly in the disassembly?</p>\n<p>Something like <code>MakeName(0x12345678a, '_mmap')</code> doesn't work, because <code>0x12345678a</code> doesn't exist in any segment of the library I'm inspecting. Also, I would prefer them not to show up in the names list if possible.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Brennan Vincent",
    "time": "Oct 13, 2017 at 15:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can't rename the locations, because by your own admission, they don't exist.  In this case, if you're not worried about maintaing control flow information and just want to see the name that corresponds to the address, you can do a couple of things.</p>\n<h2>Inline Comments</h2>\n<p>You can write an IDAPython script to:  </p>\n<ol>\n<li>Parse your text file  </li>\n<li>Locate all of the unresolved BL calls, extract the address  </li>\n<li>Look up the name in your parsed symbol information  </li>\n<li>Create a comment in the database with the symbol name using the <strong>idc.MakeComm(ea, symbol_name)</strong> function  </li>\n</ol>\n<p>This will get you an inline comment with the symbol name, something like this:  </p>\n<pre><code>BL 0x12345678a  # _memmap\n</code></pre>\n<h2>Make an Enum from the Symbol Info</h2>\n<p>If you wanted to change the representation of the raw address to a string, you can create an enum out of the data in the text file, and then apply that enum to the operand of all the BL instructions that have unresolved targets.  This should effectively give you a name for that call target, even though the address doesn't exist in the database, like so:</p>\n<pre><code>BL _memmap\n</code></pre>\n<p>You can accomplish this a couple of ways: by using the IDAPython enum functions (AddEnum/AddConstEx), assuming you have processed your text file into a list of tuples of (symbol, addr):</p>\n<pre><code>id = idc.AddEnum(index, \"MyEnum\", flags)\nfor symbol, addr in text_info:\n    idc.AddConstEx(id, symbol, value, bmask)\n</code></pre>\n<p>You can then use the <strong>idc.OpEnumEx()</strong> function wherever you have a raw address in your BL instruction to set that operand to your enum type.</p>\n<p>You can also convert your text information file into a C header file with a single enum representing your mapping, but this is a bit more tedious.</p>\n<p>Be warned, this is only cosmetic.  Attempting to utilize any of the xref capabilities will fail, because it's not actually an address in the database, just a symbolic representation of the immediate value.  </p>\n<h2>Conclusion</h2>\n<p>Both of the previously described methods will get you the information you want without adding items to the Names list.</p>\n<p>If you wanted to maintain control flow information and get them to \"show up correctly in the disassembly\", you would have to create plt/got segments to simulate the rest of your address space. It's a bit more complicated, but doable if you need to do more complex analysis or want to take advantage of IDA's library recognition and type propagation.  Sounds like you just need the visual assistance of the symbol name, though.  Hope this helps.</p>\n</div>",
            "votes": "2",
            "user": "3pidemix",
            "time": "Oct 13, 2017 at 19:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">You could also define a segment holding the external addresses.</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Yes, and moreover, by actually using functions declared in an external segment, you can declare the prototype of those functions &amp; IDA will propagate arguments etc.</span>",
                    "time": null
                },
                {
                    "user": "3pidemix",
                    "text": "<span class=\"comment-copy\">Yep, left these out because the OP specifically didnâ€™t want new entries in the Names window. Although there is probably a way to do this, get type propagation, and cause the names to not show up.</span>",
                    "time": null
                }
            ]
        }
    ]
}