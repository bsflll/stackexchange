{
    "title": "What does this ARM assembly code do?",
    "link": "https://reverseengineering.stackexchange.com/questions/27577/what-does-this-arm-assembly-code-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to figure out the password that is used to access the U-Boot shell, as mentoined in my <a href=\"https://reverseengineering.stackexchange.com/questions/27539/loading-a-u-boot-arm-flash-image-into-ida-pro\">previous question</a>.</p>\n<p>I'm having trouble understanding how exactly the code works.\nHere is an image of the code from IDA. The part in the yellow box (loc_8080FF28) is what I don't understand. What is it doing to the user input? Also I would like to understand what the subroutine in the orange box (sub_8081ECE4) does with the user input. I have added a few comments that I thought are relevant. <a href=\"https://i.sstatic.net/iCR6x.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/iCR6x.png\"/></a></p>\n<p>Here is the code in text form:</p>\n<pre><code>loc_8080FF10\nADD R4, R4, #1\nLDR R0, =aDstInputPasswd ; \"\\n%dst input Passwd:\"\nMOV R5, #0\nMOV R1, R4      ; R4 = num of tries so far\nBL  printf\nB   loc_8080FF58\n\nloc_8080FF28\nMOV R0, R5\nMOV R1, #0x3F\nBL  __aeabi_uidivmod\nADD R2, SP, #0x58+var_18\nADD R5, R5, #1\nADD R7, R1, R7\nADD R3, R2, R1\nLDRB    R2, [R7,#0x14]\nRSB R10, R2, R10\nMOV R2, #0\nSTRB    R10, [R3,#-0x40]\nSTRB    R2, [R3,#-0x3F]\n\nloc_8080FF58\nBL  getc\nLDR R7, =asc_8082E770 ; \"\\b \\b\"\nUXTB    R10, R0\nCMP R10, #0xD   ; check if enter pressed\nBNE loc_8080FF28\nMOV R0, SP\nADD R1, R7, #0x54\nMOV R2, #7\nBL  sub_8081ECE4\nCMP R0, #0\nBNE loc_8080FF94\nCMP R5, #7\nMOVEQ   R5, #1\nMOVEQ   R4, R0\nBEQ loc_8080FFC0\n\nloc_8080FF94\nCMP R4, #3\nBNE loc_8080FF10    ; fail after 3 tries\nMOV R5, #0\nMOV R4, R5\nB   loc_8080FFC0\n\nloc_8080FFA8\nMOV R0, #0x2710\nADD R7, R7, #1\nBL  sub_8081F1D8\nCMP R7, #0x64\nBNE loc_8080FEEC\nSUB R4, R4, #1\n\nloc_8080FFC0        ; \"\\b\\b\\b%2d \"\nLDR R0, =a2d\nMOV R1, R4\nBL  printf\n; end of check passwd\n\nsub_8081ECE4\nSTMFD   SP!, {R4,LR}\nMOV R3, #0\nB   loc_8081ED18\n\nloc_8081ECF0\nLDRB    R4, [R0,R3]\nLDRB    R12, [R1,R3]\nRSB R12, R12, R4\nUXTB    R12, R12\nCMP R12, #0\nBNE loc_8081ED24\nCMP R4, #0\nADD R3, R3, #1\nBEQ loc_8081ED24\nSUB R2, R2, #1\n\nloc_8081ED18\nCMP R2, #0\nBNE loc_8081ECF0\nMOV R12, R2\n\nloc_8081ED24\nSXTB    R0, R12\nLDMFD   SP!, {R4,PC}\n; End of function sub_8081ECE4\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "466",
    "tags": [
        "ida",
        "disassembly",
        "arm"
    ],
    "user": "nyaol9",
    "time": "Apr 28, 2021 at 19:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>routine sub_8081ECE4 seems to subtract 7 bytes from this address 0x8082e7c4 (R1=R7+0x54=0x8082e770+0x54) to data on the stack (I presume that is the entered password). Can you provide bytes @0x8082e7c4?</p>\n<p>EDIT:\nThe block with a yellow background is some sort of decryption routine, substracting entered char with a byte table @0x8082e770. You need to look closer at what happens on the stack around SP+0x58+var18, SP+0x54. Sub_8081ece4 is a strncmp function. I have more or less transcribed in C:</p>\n<pre><code>// strncmp\nint sub_8081ece4(char*str1, char *str2, int count) {\n    for(int i=count, int j=0; i &gt; 0; --count; ++j) {\n        int cmp = str1[j] - str2[j];\n        if( cmp != 0 || str1[j] == 0)\n            return cmp;\n    }\n    return 0;\n}\n\n//...\n// from loc_8080ff58\nint i = 0;\nchar ch;\nchar var_18[0x3f]; // 0x58+var_18\nchar *tab; // ptr to 0x8082e770\nwhile((ch = getch()) != 0xD) {\n    int mod = i % 0x3f;\n    ++i;\n    var_18[mod - 0x40] = ch - tab[mod + 0x14];\n    var_18[mod - 0x3f] = 0;\n}\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Tony",
            "time": "May 3, 2021 at 20:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "nyaol9",
                    "text": "<span class=\"comment-copy\">The bytes look like this in disassembly view: 8082E7C4 DCD 0x22244C43, 0x30252B and in hex view: 43 4C 24 22 2B 25 30 00</span>",
                    "time": null
                },
                {
                    "user": "nyaol9",
                    "text": "<span class=\"comment-copy\">I tried to figure out what var_18 as it seems to be an argument to this function but it doesn't seem to have any value set. At the start of this function IDA shows it as var_18= -0x18. Also the bytes @0x8082e770 are a string \"\\b \\b\" so i'm not sure what to do with that either. I kind of managed to get the assembly code running in a debugger but it doesn't behave the same way as the original mainly because getc works differently.</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">It says tab[mod + 0x14], so you don't need to look at 0x8082e770, but at 0x8082e84. Also, var_18 is not passed to the function, but a local (uninitialized) variable, which will be initialized from the key presses and the obfuscation table.</span>",
                    "time": null
                },
                {
                    "user": "nyaol9",
                    "text": "<span class=\"comment-copy\">@MichaelKarcher did you mean 0x8082e784? IDA could not go to 0x8082e84. The bytes at 0x8082e784 are exactly 7 bytes of non-zero bytes (7 was also one of the inputs to strncmp) so that could be the table. I will try to figure it out and work with the C code written by Tony to get a password prompt similar to the original. Am I right in guessing that the password could be 7 characters long? I also need to figure out where the original password is stored so I could try to reverse it once I get the decrypt code figured out.</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">@nyaol9 Yes, sorry for the lost digit. It is very likely that the password is 7 characters (you may enter more, but the remaining characters get ignored - this is how <code>strncmp</code> works. It looks like the password is the bytewise sum of the bytes at 8082e784 and 8082e7c4</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have now managed to find the password.</p>\n<p>Thanks to the C code provided by Tony in his answer and information provided by Michael in the comments, I was able to make a password prompt that was similar to the original and through that I was able to find the password with some trial and error.</p>\n<p>I also tested the password on the actual hardware and was able to get into U-Boot shell.</p>\n<p>Here is the C program for reference</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;conio.h&gt; // for getch\n\nint main()\n{\n    int numOfTries = 1;\n\n    char decTable[64] = { 0x23, 0x22, 0x02, 0x17, 0x0A, 0x0D, 0x07 }; // decryption table\n    char passwd[8] = { 0x43, 0x4C, 0x24, 0x22, 0x2B, 0x25, 0x30, 0x0 }; // original, encrypted password\n\n    // set rest of decTable to 0x0\n    for (int j = 7; j &lt; 64; j++)\n        decTable[j] = 0x0;\n\n    // reverse original password and show it\n    char passwd_reversed[8] = { 0x0 };\n    for (int k = 0; k &lt; 7; k++)\n    {\n        int mod = k % 0x3f;\n        passwd_reversed[k] = passwd[k] + decTable[mod];\n    }\n\n    printf(\"reversed password: %s\\n\\n\", passwd_reversed);\n\n    while (1)\n    {\n        printf(\"\\n%dst input Passwd:\", numOfTries);\n\n        char inChar;\n        int i = 0;\n        char var_18[0x3f] = { 0x0 }; // encrypted user input\n\n        char inStr[0x3f] = { 0x0 }; // original user input\n        int inStrCounter = 0; // counter for current input character\n\n        while (1)\n        {\n            inChar = getch();\n            if (inChar == 0xD)\n                break; // enter was pressed\n\n            inStr[inStrCounter] = inChar;\n            inStrCounter++;\n\n            // Encrypt input char\n            int mod = i % 0x3f;\n            var_18[mod] = inChar - decTable[mod];\n            i++;\n\n            //var_18[mod - 0x40] = inChar - decTable[mod + 0x14];\n            //var_18[mod - 0x3f] = 0;\n        }\n\n        // enter pressed, show input string and encrypted string\n        printf(\"\\nentered: %s  enc: %s\\n\", inStr, var_18);\n\n        // verify password\n        int cmp = strncmp(passwd, var_18, 7);\n        if (cmp == 0)\n        {\n            printf(\"password OK\\n\");\n            break;\n        }\n        else\n            numOfTries++;\n    }\n\n    return 0;\n}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "nyaol9",
            "time": "May 6, 2021 at 14:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}