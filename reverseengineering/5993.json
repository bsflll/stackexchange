{
    "title": "How to identify HTML5 geolocation protocol of a browser? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/5993/how-to-identify-html5-geolocation-protocol-of-a-browser",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-08-03 19:11:26Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/5993/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I've been trying to figure how a html5 browser like chrome or firefox performs geolocation under the hood but I'm running into some difficulties.</p>\n<h2>Difficulties</h2>\n<p>To be more precise, I want to know what happens when a piece of javascript calls <code>navigator.geolocation.getCurrentPosition (success_func)</code> but <em>before</em> <code>success_func</code> actually gets called back. I want to know how the browser goes about obtaining the latitude and longitude coordinates. What's the protocol it uses? What servers does it query to obtain this information? etc.</p>\n<p>Here's what I have determined and tried:</p>\n<ul>\n<li>Chrome and Firefox uses the MAC of nearby wifi access points to obtain geolocation by sending it to googlesapi.com. It is this MAC-wifi based implementation I am most interested in.</li>\n<li>By the time <code>success_func</code> gets called, the browser has already obtained the geolocation data.</li>\n<li>I made limited progress using proxy and packet captures like tcpcatcher and wireshark. I see a query is being made to <code>googleapis.com:443</code> but of course it's over tls/ssl which means I can't read it. (using ssl monitor in tcpcatcher causes geoloc to fail in browser)</li>\n<li>I tried using builtin devtool and console in browser but it seems to omit the communication that grabs the geoloc data. For example, using chrome's devtool (<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>I</kbd>), it does not show any <code>CONNECT</code> methods or connections to <code>googleapis.com</code> even though tcpcatcher clearly captures that during geolocation.</li>\n<li>I've tried looking at the source to determine this but not having much luck. The problem is that browser codebases are just humongous and locating the pertinent class and source files would be difficult especially since I'm unfamiliar with their overall design. grepping for interesting keywords only goes so far.</li>\n</ul>\n<p>If you guys were trying to determine and reverse the protocol a given browser uses to implement geolocation how would you guys proceed?</p>\n<h2>Other Resources</h2>\n<p>Here are some things I've already looked at that I found helpful:</p>\n<ul>\n<li><a href=\"http://samy.pl/mapxss/\" rel=\"nofollow noreferrer\">http://samy.pl/mapxss/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3041113/how-exactly-does-html5s-geolocation-work\">https://stackoverflow.com/questions/3041113/how-exactly-does-html5s-geolocation-work</a></li>\n</ul>\n<p>The problem is some of the info mentioned there is out-of-date and no longer accurate. My aim now is to figure out exactly what changed and how an external custom application can use this protocol itself for geolocation.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "807",
    "tags": [
        "tools",
        "protocol"
    ],
    "user": "greatwolf",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Off-topic since both Chromium and Firefox are open-source, and thus this question is about software development.</span>",
            "time": null
        },
        {
            "user": "Brilliand",
            "text": "<span class=\"comment-copy\">@JasonGeffner It seems to fit within the definition in the help center; this question is not about debugging, but rather about converting source code to plain English (in the least charitable interpretation).  Questions about reading source code (especially large, unfamiliar codebases) don't seem to be ruled out by the help center's definition.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">It takes about 5 seconds to enter <code>googleapis.com geolocation from mac address</code> into google to find the reference at <a href=\"https://developers.google.com/maps/documentation/business/geolocation/?hl=de\" rel=\"nofollow noreferrer\">developers.google.com/maps/documentation/business/geolocation/â€¦</a>. This includes a \"WiFi access point objects\" section. Jason is right, you don't need any reverse engineering.</span>",
            "time": null
        },
        {
            "user": "greatwolf",
            "text": "<span class=\"comment-copy\">@GuntramBlohm There's only one issue with that: it requires enabling billing which requires inputting credit card and personal info. This is the first thing I've tried. How is chrome and firefox able to use the api in this case? Do they have a special api-key they use or something?</span>",
            "time": null
        },
        {
            "user": "greatwolf",
            "text": "<span class=\"comment-copy\">When I first posted this, the question felt like it was in the spirit of RE. However, if SO is a better fit, feel free to migrate it there.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For Firefox (i.e. Gecko) and Chrome (i.e. Blink) you can just look in the source code:</p>\n<p>Searching the Firefox codebase for <code>getCurrentPosition</code> yields the source file <a href=\"http://dxr.mozilla.org/mozilla-central/source/dom/src/geolocation/nsGeolocation.cpp#697\" rel=\"nofollow\">nsGeolocation.cpp</a>. As you see in the linked source line, it creates an instance of a geolocation provider. Assuming Firefox for Desktop, there is only the <a href=\"http://dxr.mozilla.org/mozilla-central/source/dom/system/NetworkGeolocationProvider.js\" rel=\"nofollow\">NetworkGeolocationProvider</a> (FirefoxOS may also use GPS).</p>\n<p>In essence, Gecko opens an XMLHttpRequest to the URL specified in <code>about:config</code> as <code>geo.wifi.uri</code>. Per default this is <code>https://www.googleapis.com/geolocation/v1/geolocate?key=%GOOGLE_API_KEY%</code>.</p>\n<p>Blink performs its http request in <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/geolocation/network_location_request.cc\" rel=\"nofollow\">network_location_request.cc</a>, with the same API endpoint defined as in Firefox (cf. <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/geolocation/location_arbitrator_impl.cc&amp;rcl=1407097784&amp;l=43\" rel=\"nofollow\">location_arbitrator_impl.cc</a>).</p>\n<p>(NB: I looked at Gecko HG revision a4f779bd7cc2 and Blink SVN revision 287303)</p>\n</div>",
            "votes": "2",
            "user": "freddyb",
            "time": "Aug 4, 2014 at 8:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}