{
    "title": "Invalid INDX entries for $I30 on NTFS harddisk",
    "link": "https://reverseengineering.stackexchange.com/questions/15860/invalid-indx-entries-for-i30-on-ntfs-harddisk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While parsing my NTFS formatted hard disk, I found some invalid entries of INDX while Windows is still able to list all the root directory contents!</p>\n<p>The structure of the Index Record in <em>NTFS 3.1</em> is clear (<a href=\"http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf\" rel=\"nofollow noreferrer\">NTFS doc</a>):</p>\n<pre><code>Offset      Description\n-------------------------------------\n0x00        MFT Reference of the file\n0x08        Size of the index entry\n0x0A        Offset to the filename\n...\n0x52        Filename\n...\n</code></pre>\n<p>However, I found some entries where their size is faulty as well as their MFT Reference (which is a bunch of zeros)!</p>\n<p>I enclose a screenshot that shows a part of INDX along side with their text representations where each line is of width <code>0x20</code>. I highlighted the faulty part.</p>\n<p><a href=\"https://i.sstatic.net/uVaMQ.png\" rel=\"nofollow noreferrer\"><img alt=\"The invalid entries of INDX\" src=\"https://i.sstatic.net/uVaMQ.png\"/></a></p>\n<p>The figure shows that entries were parsed rationally until the last correct entry at <code>0x0628</code>:</p>\n<ul>\n<li>MFT Reference (8 bytes): <code>66 30 00 00 00 00 01 00</code></li>\n<li>Size of entry (2 bytes): <code>70 00</code>\nSo the entry ends at <code>0x0697</code>.</li>\n</ul>\n<p>Thereafter, things got weird! Entries at <code>0x0698</code>:</p>\n<ul>\n<li>MFT Reference (8 bytes): <code>00 00 00 00 00 00 00 00</code> Seems invalid</li>\n<li>Size of entry (2 bytes): <code>10 00</code> Of course invalid because the size is less than the entry structure minimum size that includes the filename at <code>0x52</code> for instance.</li>\n</ul>\n<p>For me, it seems that \"Buziol Games\" was a deleted folder on the root directory of the harddisk, I am not sure. Anyway, Windows explorer is not facing troubles on listing the contents.</p>\n<p>Do anybody understand how does it work? How do Windows continue parsing?</p>\n<p><strong>EDIT</strong>: In addition, please find the hex dump as a pure text on <a href=\"https://pastebin.com/kksNZQ5t\" rel=\"nofollow noreferrer\">pastebin</a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "486",
    "tags": [
        "windows",
        "hex"
    ],
    "user": "Mohamad-Jaafar NEHME",
    "time": "Jul 21, 2017 at 20:19",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">what have you highlighted the INDEX_RECORD_ENTRY should be preceded by INDEX_HEADER which should have a magic signature INDX  i don't see a INDX magic sign in your screen shot ?   8200a000  49 4e 44 58    offset to index entries @ 18 8200a010  0a 00 00 00 00 00 00 00-28 00 00 00  ie 0x28</span>",
            "time": null
        },
        {
            "user": "Mohamad-Jaafar NEHME",
            "text": "<span class=\"comment-copy\">@blabb, indeed the INDEX_HEADER is at address zero. I already parsed several INDEX_RECORD_ENTRY (ies) without any problem. My question is about the invalid INDEX_RECORD_ENTRY at address 0x0698. Anyway, the whole INDX (including INDEX_HEADER) is found at the pastebin attached</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">if that was the last entry with an mft reference of 0 then size would be 10 is correct iirc it is mentioned in the pdf you linked somewhere  you cna also check this thread <a href=\"http://www.woodmann.com/forum/showthread.php?15188-NTFS-MFT-Internals/page3&amp;highlight=ntfs\" rel=\"nofollow noreferrer\">woodmann.com/forum/showthread.php?15188-NTFS-MFT-Internals/â€¦</a></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">from your pastebin the size of index entries is 690 it matches with 620+70 =   690 so any reason to  parse further ? Offset(h) 00 01 02 03  0000001C  90 06 00 00  ....</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">offset 58+52 $Attrdef  0xc0+52 $BadCluster 0x128+52 $bitmap 0x188+52 $boot  0x1e8+52 $extend 0x248+52 $logfile  0x2b0+52 $Mft  0x310+53 $MftMirr 0x378+52 $Secure  0x3d8+52 $upcase 0x438+52 $Volume  0x498+52 . (dot directory)  0x4f0+52 Ahmad 0x550+52 AutoExec.bat  5c0+52 boot.ini  and buziol games</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The INDEX_RECORD_ENTRY should be preceded by INDEX_HEADER with the magic signature <strong>INDX</strong> </p>\n<p>without the header deciphering the INDEX_RECORD_ENTRIES is difficult as shown in your screen shot </p>\n<p>the following observations are based on the pastebin dump you edited in later</p>\n<p>i converted the hex to binary with a bat file thus</p>\n<pre><code>rem make a copy \ncopy %1 %2\nrem compare both\nfc %1 %2\nrem dump the first line for visualizing\nhead -1 %2\nrem strip the address,colon and space \nrem this is to make it compatible with xxd input\nsed s/.*:\\x20//g %2 &gt; %3\nrem dump the ripped hex file first line \nhead -1 %3\nrem convert hex to binary \nxxd -r -p %3 &gt; %4\nrem check the size and compare with word count\nrem both should be same \nls -l %4\nwc -w %3\n</code></pre>\n<p>executing the bat file on the downloaded pastebin dump</p>\n<pre><code>C:\\indx&gt;converthextobin.bat indx_$i30_dump.txt indxhex.txt indxstripped.txt indxbin.bin\n\nC:\\indx&gt;rem make a copy\nC:\\indx&gt;copy indx_$i30_dump.txt indxhex.txt\n        1 file(s) copied.\n\nC:\\indx&gt;rem compare both\nC:\\indx&gt;fc indx_$i30_dump.txt indxhex.txt\nComparing files indx_$i30_dump.txt and INDXHEX.TXT\nFC: no differences encountered\n\nC:\\indx&gt;rem dump the first line for visualizing\nC:\\indx&gt;head -1 indxhex.txt\n0000: 49 4E 44 58 28 00 09 00 D2 92 87 08 00 00 00 00\n\nC:\\indx&gt;rem strip the address,colon and space\nC:\\indx&gt;rem this is to make it compatible with xxd input\nC:\\indx&gt;sed s/.*:\\x20//g indxhex.txt  1&gt;indxstripped.txt\n\nC:\\indx&gt;rem dump the ripped hex file first line\nC:\\indx&gt;head -1 indxstripped.txt\n49 4E 44 58 28 00 09 00 D2 92 87 08 00 00 00 00\n\nC:\\indx&gt;rem convert hex to binary\nC:\\indx&gt;xxd -r -p indxstripped.txt  1&gt;indxbin.bin\n\nC:\\indx&gt;rem check the size and compare with word count\nC:\\indx&gt;rem both should be same\nC:\\indx&gt;ls -l indxbin.bin\n-rw-rw-rw-  1 HP 0 6656 2017-07-22 15:20 indxbin.bin\nC:\\indx&gt;wc -w indxstripped.txt\n6656 indxstripped.txt\n</code></pre>\n<p>now that we have a binary form we can start exploring </p>\n<p>lets dump the INDEX_HEADER and verify </p>\n<pre><code>@echo off\nxxd -s00 -g4 -l4 indxbin.bin &amp;^\nxxd -s04 -g2 -l2 indxbin.bin &amp;^\nxxd -s06 -g2 -l2 indxbin.bin &amp;^\nxxd -s08 -g8 -l8 indxbin.bin &amp;^\nxxd -s16 -g8 -l8 indxbin.bin &amp;^\nxxd -s24 -g4 -l4 indxbin.bin &amp;^\nxxd -s28 -g4 -l4 indxbin.bin &amp;^\nxxd -s32 -g4 -l4 indxbin.bin &amp;^\nxxd -s36 -g1 -l1 indxbin.bin &amp;^\nxxd -s37 -g3 -l3 indxbin.bin &amp;^\nxxd -s40 -g2 -l2 indxbin.bin\n</code></pre>\n<p>executed we get the INDEX_HEADER</p>\n<pre><code>C:\\indx&gt;dumpindxheader.bat\n0000000: 494e4458                             INDX\n0000004: 2800                                     (.\n0000006: 0900                                     ..\n0000000: 494e445828000900                   INDX(...\n0000010: 0000000000000000                   ........\n0000018: 40000000                             @...\n000001c: 90060000                             ....\n0000020: e80f0000                             ....\n0000024: 00\n0000025: 000000                                 ...\n0000028: 1e02                                     ..\n</code></pre>\n<p>we can see the INDEX_RECORD_ENTRY relative to HEADER_OFFSET is 0x40 (i haven't tried to control the Endiannes in xxd output)   </p>\n<p>so the INDEX_RECORD_ENTRY (terminology may be incorrect ) starts at 0x40+0x18 = 0x58<br/>\nit is a variable sized structure padded appropriately to boundaries    </p>\n<p>dumping the record entry</p>\n<pre><code>@echo off\nxxd -s88 -g8 -l8 indxbin.bin &amp;^\nxxd -s96 -g2 -l2 indxbin.bin &amp;^\nxxd -s98 -g2 -l2 indxbin.bin &amp;^\nxxd -s100 -g2 -l2 indxbin.bin &amp;^\nxxd -s102 -g2 -l2 indxbin.bin &amp;^\nxxd -c8 -s104 -g8 -l64 indxbin.bin &amp;^\nxxd -s168 -g1 -l1 indxbin.bin &amp;^\nxxd -s169 -g1 -l1 indxbin.bin &amp;^\nxxd -s170 -g1 -l22 indxbin.bin\n</code></pre>\n<p>executing the bat file </p>\n<pre><code>C:\\indx&gt;dumpindxrecordentry.bat\n0000058: 0400000000000400                   ........\n0000060: 6800                                     h.\n0000062: 5200                                     R.\n0000064: 0000                                     ..\n0000066: 0000                                     ..\n0000068: 0500000000000500  ........\n0000070: d07fa49ac58cd201  ........\n0000078: d07fa49ac58cd201  ........\n0000080: d07fa49ac58cd201  ........\n0000088: d07fa49ac58cd201  ........\n0000090: 0090000000000000  ........\n0000098: a08c000000000000  ........\n00000a0: 0600000000000000  ........\n00000a8: 08                                               .\n00000a9: 03                                               .\n00000aa: 24 00 41 00 74 00 74 00 72 00 44 00 65 00 66 00  $.A.t.t.r.D.e.f.\n00000ba: 00 00 00 00 00 00                                ......\n</code></pre>\n<p>the size 68 is relative to self so the next entry would be at \n0x58+0x68 == 0xc0 </p>\n<p>the offset to file name is relative to self so file name would be at \n0x58+0x52 = 0xaa as dumped </p>\n<p>so you can now go ahead by dumping the next entry by providing the appropriate seek address to xxd viz 0xc0 or 0n192 </p>\n<p>the last entry is at 0x628 whose size is 0x70 so it ends at 0x698 </p>\n<p>the very last entry is 0x10 bytes long with an mft reference 0</p>\n<blockquote>\n<p>quoted from the pdf linked in your original post<br/>\n  last entry has a size of 0x10 (just large enough for the flags (and a\n  mft ref of zero)</p>\n</blockquote>\n<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000690                          00 00 00 00 00 00 00 00          ........\n000006A0  10 00 00 00 02 00 00 00                          ........\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jul 22, 2017 at 11:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}