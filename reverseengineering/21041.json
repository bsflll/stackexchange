{
    "title": "How to find functions in IDA Pro/x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/21041/how-to-find-functions-in-ida-pro-x64dbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i created a program for testing, very simple in c++.\nis ask for password if it is match is print correct, if no it is print \"bad\".</p>\n<p>i try to find with ida where is the function of what i made.</p>\n<p>but i can find it only with the strings.</p>\n<p>there is a different way to find it?, i mean not by the string?\nmaybe with the debugger step by step? or something else?\nbecause in other programs i don't have strings, and its hard for me to find function.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "disassembly",
        "ollydbg",
        "debuggers",
        "dynamic-analysis"
    ],
    "user": "yoni",
    "time": "Apr 4, 2019 at 13:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a couple of ways to find the main() function. In IDA you can set the debugger to break on the entry point. This is sometimes not the main() function, but if you break there you can single-step until you reach the main function. You can also often find main() in the list of functions in IDA because main is one of the symbols. This is probably the simplest way to identify the function but it sounds like that is not working for you.</p>\n</div>",
            "votes": "1",
            "user": "dingo_kinznerhook",
            "time": "Apr 4, 2019 at 15:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yoni",
                    "text": "<span class=\"comment-copy\">i tried to break the in the entry point, and i did step by step with the debugger, but he didn't reach to the main(). you have more tricks?</span>",
                    "time": null
                },
                {
                    "user": "dingo_kinznerhook",
                    "text": "<span class=\"comment-copy\">What compiler did you use? Is this a windowed application? Also, what OS?</span>",
                    "time": null
                },
                {
                    "user": "yoni",
                    "text": "<span class=\"comment-copy\">visual studio 2017</span>",
                    "time": null
                },
                {
                    "user": "yoni",
                    "text": "<span class=\"comment-copy\">and windows 10.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Okay, the strings are arguably one of the first things any reverse engineer will look at. They're <em>the</em> proverbial \"low-hanging fruit\", if they're there.</p>\n<p>However, you could reason about your sample under investigation first.</p>\n<p>For example if you know it's a Windows program and it shows a dialog you could first check to see if it uses the usual APIs for that. Perhaps there is a dialog resource in the binary and you can look for the dialog ID/name to spot the call to the respective Win32 API (e.g. <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogparamw\" rel=\"nofollow noreferrer\"><code>CreateDialogParamW</code></a>).</p>\n<p>Oftentimes there will be several APIs that could be used to achieve the same result. In that case a look at the import table(s) can help find clues.</p>\n<p>Similarly a look at the import table(s) could reveal which string processing APIs are being used. A na√Øve approach to \"checking a password\" would be something along the lines of <a href=\"https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcmp-wcscmp-mbscmp?view=msvc-170\" rel=\"nofollow noreferrer\"><code>strcmp</code> or similar functions</a>. With Unicode on Windows it'd be <code>wcscmp</code>. Again, other functions exist to achieve a similar effect.</p>\n<p>And this means in order to reverse engineer something you need to be familiar with the environment in which your sample under investigation is supposed to run. This is even more important in cases where clues such as strings are absent or scarce. You need to be familiar with libraries providing certain functionality alone in order to be able to tell <em>where</em> to look further.</p>\n<p>But checking a password doesn't necessarily mean that you are comparing strings (it probably is in your case, though). It could mean that the password itself has been run through some function (usually called hash function or similar) to arrive at a value representative of the password string. Then the comparison would be between that value and your input string being run through the same (or an equivalent) function.</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Apr 23, 2024 at 16:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}