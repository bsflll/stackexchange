{
    "title": "Weird binwalk output on GoPro Firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/6569/weird-binwalk-output-on-gopro-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to extract GoPro hero 3+ camera firmware but I'm getting a weird output from <code>binwalk</code>.</p>\n<p>This is the <code>binwalk</code> output (Uploaded to pastebin): </p>\n<p><a href=\"http://pastebin.com/raw.php?i=yVZFGZT6\" rel=\"nofollow\">http://pastebin.com/raw.php?i=yVZFGZT6</a></p>\n<p>As you can see there are a lot of lines including mcrypt, RSA and other lines but the firmware is not encrypted. Also checking the hexadecimal of the file I can see the following:</p>\n<pre><code>000006f0  55 55 55 55 66 66 66 66  77 77 77 77 88 88 88 88  |UUUUffffwwww....|\n</code></pre>\n<p>As far as I know this is related to UBoot. And this other two lines showing some squashfs headers:</p>\n<pre><code>0151d040  45 3d cd 28 88 4f 39 80  68 73 71 73 bc 4f 39 80  |E=.(.O9.hsqs.O9.|\n02557250  8a f3 0d 00 68 73 71 73  90 f3 0d 00 72 65 65 62  |....hsqs....reeb|\n</code></pre>\n<p>Also, I can see some other lines related to CPIO but I can't figure out how to separate this file into extractable pieces.</p>\n<p>The firmware image can be downloaded here: <a href=\"http://software.gopro.com/Firmware/HD2/HD2-firmware.bin\" rel=\"nofollow\">http://software.gopro.com/Firmware/HD2/HD2-firmware.bin</a></p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "firmware",
        "embedded",
        "hexadecimal"
    ],
    "user": "Nucklear",
    "time": "Nov 3, 2014 at 11:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Strings suggests this is using the UbiFS file system:</p>\n<pre><code>$ strings HD2-firmware.bin | grep -i ubifs\nconsole=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\nLNX_VIF=\"../../../src/linuxinfo/ubifs.info\"\nCONFIG_BOSS_SECONDARY_CMDLINE=\"console=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\"\nconsole=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\n</code></pre>\n<p>There are only two places where I see the UbiFS super magic bytes (0x24051905, see <a href=\"http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/fs/ubifs/ubifs.h\" rel=\"nofollow\">http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/fs/ubifs/ubifs.h</a>):</p>\n<pre><code>$ binwalk -m ubifs.sig HD2-firmware.bin \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n23734456      0x16A28B8       UbiFS, little endian\n23741868      0x16A45AC       UbiFS, little endian\n</code></pre>\n<p>For reference, the contents of ubifs.sig are:</p>\n<pre><code>0   lelong  0x24051905      UbiFS, little endian\n0   belong  0x24051905      UbiFS, big endian\n</code></pre>\n<p><strong>EDIT:</strong></p>\n<p>The above seems to be a false positive. After creating a UbiFS image of my own, here's what it looks like in hex:</p>\n<pre><code>00000000  31 18 10 06 dc 6a 3b 2d  4e 00 00 00 00 00 00 00  |1....j;-N.......|\n00000010  00 10 00 00 06 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000020  00 02 00 00 00 00 02 00  0d 00 00 00 64 00 00 00  |............d...|\n00000030  00 00 16 00 00 00 00 00  04 00 00 00 02 00 00 00  |................|\n00000040  01 00 00 00 01 00 00 00  08 00 00 00 00 01 00 00  |................|\n00000050  04 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000060  00 00 00 00 00 00 00 00  00 ca 9a 3b fb 7e 13 36  |...........;.~.6|\n00000070  91 29 47 3b 8b dd 46 95  27 cc 8a 30 00 00 00 00  |.)G;..F.'..0....|\n00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00001000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n*\n00020000  31 18 10 06 4a 3d 6b 5a  4f 00 00 00 00 00 00 00  |1...J=kZO.......|\n00020010  00 02 00 00 07 00 00 00  45 00 00 00 00 00 00 00  |........E.......|\n00020020  00 00 00 00 00 00 00 00  02 00 00 00 03 00 00 00  |................|\n00020030  0c 00 00 00 d8 05 00 00  bc 00 00 00 0b 00 00 00  |................|\n00020040  0c 00 00 00 00 08 00 00  98 06 00 00 00 00 00 00  |................|\n00020050  00 26 05 00 00 00 00 00  38 03 00 00 00 00 00 00  |.&amp;......8.......|\n00020060  30 d0 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |0...............|\n00020070  00 24 00 00 00 00 00 00  07 00 00 00 2a 00 00 00  |.$..........*...|\n00020080  07 00 00 00 00 02 00 00  07 00 00 00 36 00 00 00  |............6...|\n00020090  00 00 00 00 00 00 00 00  0a 00 00 00 01 00 00 00  |................|\n000200a0  01 00 00 00 0d 00 00 00  00 00 00 00 00 00 00 00  |................|\n000200b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00020200  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n</code></pre>\n<p>Note the little endian magic number at the beginning of each node: <code>0x06101831</code>. </p>\n<p>This pattern appears in the GoPro firmware, and it looks like the UbiFS image may start at <code>0x22C6100</code>; however, I was unable to mount either my UbiFS image (created with <code>mkfs.ubifs</code>) or the image from the GoPro firmware, so I cannot verify that this is true.</p>\n</div>",
            "votes": "2",
            "user": "devttys0",
            "time": "Nov 3, 2014 at 14:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nucklear",
                    "text": "<span class=\"comment-copy\">Awesome answer. I can identify 2 times \"31 18 10 06\" on the original gopro firmware but I don't see those references on 0x22C6100. Also after extracting the UbiFS images from the firmware I tried to mout it following this instructions <a href=\"http://elinux.org/UBIFS#Mounting_UBI_Image_on_PC_using_nandsim\" rel=\"nofollow noreferrer\">elinux.org/UBIFS#Mounting_UBI_Image_on_PC_using_nandsim</a> with no success.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There will always be false positives with binwalk, especially for lzma and the likes. What you can do is use the <code>-M</code> option to try and binwalk multiple layers deep and also use <code>-r</code> option to remove files that didn't decompress well. </p>\n</div>",
            "votes": "2",
            "user": "0xea",
            "time": "Nov 3, 2014 at 11:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nucklear",
                    "text": "<span class=\"comment-copy\">I already tried it but it gives me unidentified files except two folders /root (empty) and /dev . I also found this script <a href=\"https://gist.github.com/nezza/2394361\" rel=\"nofollow noreferrer\">gist.github.com/nezza/2394361</a> that splits the firmware in multiple images that I'm not able to uncompress either. According to some strings GoPro Hero3+ uses this technology and it's processor is ARM <a href=\"http://www.ambarella.com/uploads/docs/A7LS-Brief-121713.pdf\" rel=\"nofollow noreferrer\">ambarella.com/uploads/docs/A7LS-Brief-121713.pdf</a></span>",
                    "time": null
                }
            ]
        }
    ]
}