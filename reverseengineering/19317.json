{
    "title": "Monitor all changes done by function",
    "link": "https://reverseengineering.stackexchange.com/questions/19317/monitor-all-changes-done-by-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the easiest way to track all changes before and after a specific function is executed.\nI know I can trace instruction but that may yield a long list of all command executed.\nI want to stop the debugger before a function is executed and compare with the changes after.</p>\n<p>How can it be accomplished?</p>\n<p>Thank you,</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "230",
    "tags": [
        "ida",
        "patch-reversing"
    ],
    "user": "dandan",
    "time": "Sep 12, 2018 at 13:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Set hooks at all memory allocation functions, mark all writeable memory pages as guard pages. Handle all the STATUS_GUARD_PAGE_VIOLATION exceptions caused by the code when it tries to write.</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Sep 12, 2018 at 14:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's assume You only need to see the changes, and not to understand what they are and how/why they were made</p>\n<p>You can do something like this:</p>\n<ol>\n<li>Start process under debugger and run to the specific start of the function. Put breakpoint on the end of function as well  Suspend all other threads. </li>\n<li><p>Perform full process memory dump</p>\n<p>2.1 For windows - use windbg command  <code>.writemem c:\\output\\start_address.dmp start_address end_address</code>. Or use  procdump: <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/procdump\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/sysinternals/downloads/procdump</a></p>\n<p>2.2 For linux - use <code>cat /dev/[pid]/maps</code> and then from GDB make dumps: </p>\n<p><code>dump memory /output/memory_start_address start_address end_address</code></p></li>\n<li><p>Run to the end of function, perform [2] again in another directory</p></li>\n<li>Compare between two dumps to see all the changes [Notepad++]</li>\n<li>If needed - confirm your findings with RE of the function. </li>\n</ol>\n<p>Good luck</p>\n<p>D.L.</p>\n</div>",
            "votes": "0",
            "user": "Denis Laskov",
            "time": "Sep 12, 2018 at 16:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}