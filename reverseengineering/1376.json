{
    "title": "What happens when a DLL is added to AppInit_DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/1376/what-happens-when-a-dll-is-added-to-appinit-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a malware sample that adds a DLL to the registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs</code>.  There is malicious functionality in the DLL referenced by the registry key but this malware sample does not load or call the DLL, nor does it exhibit any other malicious behavior.</p>\n<p>Why would malware add a DLL to this registry key?</p>\n</div>",
    "votes": "8",
    "answers": 2,
    "views": "25k",
    "tags": [
        "windows",
        "malware",
        "dll"
    ],
    "user": "amccormack",
    "time": "Mar 29, 2013 at 19:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically, all DLLs listed in that reg-key are loaded when any process is started. \nFor more info see <a href=\"http://support.microsoft.com/kb/197571\" rel=\"noreferrer\">Working with the AppInit_DLLs registry value</a>.</p>\n<blockquote>\n<p>All the DLLs that are specified in this value are loaded by each Microsoft Windows-based application that is running in the current log on session.</p>\n</blockquote>\n<p>They are usually used by malicious code (tho it doesn't have to be malicious) as a way of DLL injection, to hook functions for example. To be more precise<strike>, AppInit DLLs are actually loaded only by the processes that link user32.dll.</strike>,as peter ferrie points out, AppInit DLLs are loaded by user32.dll after it has been loaded. \nThe actual registry path differs between 64bit and 32bit version of OS.</p>\n<p>So for for 32 bit DLL on 32 bit systems the path is:</p>\n<pre><code>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs] \n</code></pre>\n<p>For  64 bit DLL on 64 bit system :</p>\n<pre><code>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs]\n</code></pre>\n<p>For for 32 bit DLL on 64 bit system:</p>\n<pre><code>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs] \n</code></pre>\n<p>Multiple entries are split with space or comma, and the path to the DLL must not contain any spaces for obvious reasons.\nOn Vista and later, the AppInit DLLs need to be signed, tho the registry value <code>RequireSignedAppInit_DLLs</code> can be set to 0 which disables this requirement.</p>\n</div>",
            "votes": "9",
            "user": "0xea",
            "time": "Mar 30, 2013 at 19:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">It's more correct to say that the AppInit_DLL dll is loaded by user32.dll when user32.dll itself is loaded, and that can happen dynamically (delay-load or manual load). There can be more than one registered DLL in there, too.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">AFAIK <code>RequireSignedAppInit_DLLs</code> was added around Vista/Windows7 but was still off by default, and only turned on by default with a windows 10 update.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">I don't think this works on Windows 10 anymore.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The implementation of AppInit DLL in windows 7 is as follows:</p>\n<p>In <code>user32.dll!ClientThreadSetup</code> the <code>LoadAppInitDlls</code> export from kernel32.dll is being called for any process except the LogonProcess.</p>\n<p><code>kernel32.dll!LoadAppInitDlls</code> checks the <code>LoadAppInit_DLLs</code> registry key and if set calls <code>BasepLoadAppInitDlls</code> (except when offset 3 of the <a href=\"http://en.wikipedia.org/wiki/Process_Environment_Block\">PEB</a> has value 2).</p>\n<p><code>BasepLoadAppInitDlls</code> calls <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179%28v=vs.85%29.aspx\">LoadLibraryEx</a> for each DLL set in the <code>AppInit_DLLs</code> registry key. If signing is required (when the <code>RequireSignedAppInit_DLLs</code> registry value is set) the <code>LOAD_LIBRARY_REQUIRE_SIGNED_TARGET</code> flag is passed to LoadLibraryEx.</p>\n<p>So by setting this registry key, the malware dll will be injected into every process started after setting this key. On previous OS versions AppInit DLL's were not called for non gui/console processes but at least on Windows 7 it's also called for non gui processes.</p>\n</div>",
            "votes": "9",
            "user": "Remko",
            "time": "Mar 30, 2013 at 22:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}