{
    "title": "rasm2 output differs from radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/12045/rasm2-output-differs-from-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>radare2</code> disassembles an instruction in the following way (<a href=\"http://crackmes.de/users/sx0r/crackme4_by_sx0r/download\" rel=\"nofollow\">binary here</a>):</p>\n<pre><code>0x0040425f 0f847b020000   je 0x4044e0\n</code></pre>\n<p>Why is giving <code>rasm2</code> different result?</p>\n<pre><code>rasm2 -a x86 -b 64 -d '0f847b020000'\nje 0x281\n</code></pre>\n</div>",
    "votes": "-1",
    "answers": 2,
    "views": "219",
    "tags": [
        "radare2"
    ],
    "user": "robert",
    "time": "Feb 15, 2016 at 21:37",
    "comments": [
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">Please give some reasons why you downvoted my question.</span>",
            "time": null
        },
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">I am just curious. Why was this downvoted?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>rasm2 -d -o 0x40425f 0f847b020000\nje 0x4044e0\n</code></pre>\n</div>",
            "votes": "5",
            "user": "blabb",
            "time": "Feb 16, 2016 at 4:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think it is a different result, only a different representation.\nThe <code>radare2</code> output tells you at which absolute address will the jump take you (in this case <code>0x004044e0</code>), while the <code>rasm2</code> output tells you how far from the current address (in this case <code>0x0040425f</code>) will the jump take you.</p>\n<p>To make it more clear: Your current instruction starts at address <code>0x0040425f</code>, while your destination address is <code>0x004044e0</code>. If you substitute the two addresses you get: <code>0x004044e0 - 0x0040425f = 0x00000281</code>, which is the parameter to the jump in the <code>rasm2</code> tool.</p>\n<p>Also, the opcode <code>0x0F 0x84</code> stands for <code>JE rel16/rel32</code> and since you haven't specified at which address your instruction <code>0f847b020000</code> resides the <code>rasm2</code> tool is correctly telling you that it is <code>0x281</code> bytes from wherever the instruction is: <code>parameter_value(0x0000027b) + instruction_length(0x06) = 0x00000281</code></p>\n</div>",
            "votes": "3",
            "user": "ubnix",
            "time": "Feb 15, 2016 at 22:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}