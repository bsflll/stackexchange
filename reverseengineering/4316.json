{
    "title": "What is stored in typeinfo (GNU C++, Android NDK, ARM)",
    "link": "https://reverseengineering.stackexchange.com/questions/4316/what-is-stored-in-typeinfo-gnu-c-android-ndk-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA annotates some items as: <strong><code>typeinfo</code> for <code>_classname_</code></strong>.</p>\n<p>What is that <code>typeinfo</code>, is it the same as <code>type_info</code>?\nWhat information may be extracted from it? (e.g. I'd like to know the object size or virtual function table size).</p>\n<p>I am particularly interested in GNU C++ (G++) from Android NDK for ARM.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "c++",
        "android",
        "arm"
    ],
    "user": "18446744073709551615",
    "time": "May 12, 2014 at 15:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These objects are indeed instances of the <code>type_info</code> class (or, more likely, one of its descendants). The structure of those classes is described in the <a href=\"http://mentorembedded.github.io/cxx-abi/abi.html#rtti-layout\" rel=\"nofollow\">Itanium C++ ABI</a>. You can also inspect the <a href=\"http://docs.libreoffice.org/bridges/html/rtti_8h_source.html\" rel=\"nofollow\"><code>rtti.h</code></a> file from GCC.</p>\n<p>For a trimmed-down, data-only representation of these classes, check my <a href=\"http://www.hexblog.com/?p=704\" rel=\"nofollow\">Recon 2012 presentation</a> (start at slide 27 or so).</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "May 12, 2014 at 14:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To add <a href=\"https://reverseengineering.stackexchange.com/a/4319/4398\">Igor Skochinsky's answer</a>:</p>\n<p>Given VFT address, you can print the mangled class name:</p>\n<pre><code>unsigned int* vmtaddr = *(int*)obj_addr;\nDLOG(\"class name: _Z%s\",((char***)vmtaddr)[-1][1]);\n</code></pre>\n<p>The class name may be decoded with <code>c++filt</code>.</p>\n<p>(The <code>_Z</code> thing is not stored there, but required for <code>c++filt</code> to work.)</p>\n<p>You can also print the inheritance chain (the trick is that typeinfo is also an object, and if it is a <code>__cxxabiv1::__si_class_type_info</code>, against whose mangled name we <code>strcmp()</code>, there has been single inheritance and a pointer to the superclass typeinfo follows the pointer to name):</p>\n<pre><code>    char* classchain = strrealloccat(NULL, \"_Z\");\n    char**ptypeinfo = ((char***)vmtaddr[-1]);\n    for (; ptypeinfo ; ptypeinfo = !strcmp(((char***)ptypeinfo[0])[-1][1], \"N10__cxxabiv120__si_class_type_infoE\") ? (char**)ptypeinfo[2] : 0) {\n        //DLOG(\"tinfo: %p\",ptypeinfo);\n        //DLOG(\"class: _Z%s   meta: _Z%s\",ptypeinfo[1], ((char***)ptypeinfo[0])[-1][1]);\n        //DLOG(\"meta : _Z%s\",((char***)ptypeinfo[0])[-1][1]);\n        classchain = strrealloccat(strrealloccat(classchain, ptypeinfo[1]), \"  _Z\");\n    }\n    DLOG(\"inheritance chain: %s\",classchain);\n    free(classchain);\n</code></pre>\n<p>where <code>strrealloccat()</code> is defined as:</p>\n<pre><code>char* strrealloccat(char* buffer0, char *addition)\n{\n    char* buffer = realloc(buffer0, (buffer0 ? strlen(buffer0) : 0) + strlen(addition) + sizeof(char));\n    if (!buffer) {\n    return buffer;\n    }\n    if(!buffer0) {\n    *buffer = 0;\n    }\n    return strcat(buffer, addition);\n}\n</code></pre>\n<p><code>_Z4hopeN4this5helpsE</code></p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}