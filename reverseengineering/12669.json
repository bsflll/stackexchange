{
    "title": "Sending image to Epson wireless Projector (SOLVED!)",
    "link": "https://reverseengineering.stackexchange.com/questions/12669/sending-image-to-epson-wireless-projector-solved",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an Epson Ex5220 that doesn't have a linux driver and have been trying to work out communication through wifi. I can connect and send images captured through packet traces from a Windows machine with a driver but cannot create an acceptable image. Here is where the problem lies:</p>\n<p>In the data send, a jpeg image is sent with a header attached like this.</p>\n<pre><code>00:00:00:01:00:00:00:00:02:70:01:a0:00:00:00:07:90:80:85:00\n\n00:00:00:04 - Number of jpeg images being sent (only the first header)\n00:00 - X offset\n00:00 - Y offset\n02:70 - Width of Jpeg image (624 in this case)\n01:a0 - Height of Jpeg image (416 in this case)\n00:00:00:07:90 - Unknown (I believe it's a version number perhaps)\n80:85:00 - (What I'm after) Some count of data units?\n</code></pre>\n<p>Following the header is a normal jpeg image. If I strip off that header, I can view the image. Here is a screen shot of a partial capture with the 3 bytes highlighted:</p>\n<p><a href=\"https://i.sstatic.net/wI7Ab.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Partial capture showing header\" src=\"https://i.sstatic.net/wI7Ab.jpg\"/></a></p>\n<p>I have found what seems to be a base line by setting those last three bytes to 80:85:00. Anything less and the image will not project. Also the smallest image size I can send to the projector is a 3w x 1h which correlates with my first two images show below.</p>\n<p>Here are some examples:</p>\n<h1>1a - All white (RGB565) image 1024x768 - filesize 12915 - 4 blocks</h1>\n<p><a href=\"https://i.sstatic.net/kKfPy.jpg\" rel=\"nofollow noreferrer\"><img alt=\"#1a - All white image 1024x768\" src=\"https://i.sstatic.net/kKfPy.jpg\"/></a></p>\n<h1>2a - Color (RGB565) image 1024x768 - filesize 58577 - only 3 blocks</h1>\n<p><a href=\"https://i.sstatic.net/Vd88P.jpg\" rel=\"nofollow noreferrer\"><img alt=\"#2a - Color (RGB565) image 1024x768\" src=\"https://i.sstatic.net/Vd88P.jpg\"/></a></p>\n<p>I then changed the 3 bytes to 00:b5:80 (incremented the middle one by 0x30)</p>\n<h1>1b - All white (RGB565) image 1024x768 - filesize 12915 - 22 full rows and 4 blocks.</h1>\n<p><a href=\"https://i.sstatic.net/SVohe.jpg\" rel=\"nofollow noreferrer\"><img alt=\"All white (RGB565) image 1024x768\" src=\"https://i.sstatic.net/SVohe.jpg\"/></a></p>\n<h1>2b - Color (RGB565) image 1024x768 - filesize 58577 - 7 rows and 22 blocks.</h1>\n<p><a href=\"https://i.sstatic.net/cKzTB.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Color (RGB565) image 1024x768\" src=\"https://i.sstatic.net/cKzTB.jpg\"/></a></p>\n<p>So it seems that the 3 bytes have something to do with data units. I've read lots of stuff about jpeg and am still digesting much of it but I think if I knew what was required to calculate data units, I'd find my mystery 3 bytes.</p>\n<p>ADDITIONAL INFO:</p>\n<p>The projector only supports the use of RGB565 jpeg images inside the data send.</p>\n<p>SOLUTION!!!!!</p>\n<p>I was able to solve this, but I would like to know why this works. Here is the formula for those last 3 bytes:</p>\n<pre><code>int iSize = bImage.length;\nbaHeader[17] = (byte) ((iSize) | 0x80);\nbaHeader[18] =  (byte) ((iSize &gt;&gt; 7) | 0x80);\nbaHeader[19] = (byte) ((iSize &gt;&gt; 14));\n</code></pre>\n<p>I got fed up with messing with it and just look at several images, wrote down all the file sizes and the magic bytes, converted everything to binary and hammered away at ANDing ORing bitshifting until I forced a formula that worked. I would like to know if this is related to calculating jpeg data units. I'm still researching Jpeg but it's not simple stuff!</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "160",
    "tags": [
        "communication"
    ],
    "user": "John Smith",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Looks like this is some variation on the length of the jpeg file. Do you have a few examples of sniffed windows-images with file length and the 3 bytes for them?</span>",
            "time": null
        },
        {
            "user": "John Smith",
            "text": "<span class=\"comment-copy\">@Guntram Blohm - I solved it! But if you are a jpeg wizard, I'd like your input on whether or not this is a calculation internal to jpeg or just some nonsense that Epson came up with.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">In my opinion, this has nothing to do with jpeg internals, just a \"funny\" encoding of the file size.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">looks like ULEB128 encoding to me.</span>",
            "time": null
        },
        {
            "user": "John Smith",
            "text": "<span class=\"comment-copy\">I've just had a read of LEB128 on wiki. I see the similarity of the 7 bit shifts. I can't understand why Epson would want to encode (encrypt) the file size though because the rest of the data is very straight foward Jpeg and a quick set of x and y coordinates.</span>",
            "time": null
        }
    ],
    "answers_data": []
}