{
    "title": "What does adding 4.294967296e9 to a double do?",
    "link": "https://reverseengineering.stackexchange.com/questions/16363/what-does-adding-4-294967296e9-to-a-double-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering an application which commonly adds <code>4.294967296e9</code> to a double if the number is negative. Part of the disassembly:</p>\n<pre><code>mov     eax, label_to_memory\nfild    label_to_memory\ntest    eax, eax\njge     short some_label\nfadd    ds:some_double_value\nsome_label:\n</code></pre>\n<p>If I'm correct, it takes the jump if the highest bit isn't set, i.e. its a positive number. <code>some_double_value</code> points to the constant <code>4.294967296e9</code>.</p>\n<p>To understand what the piece of code is doing I need to know why it adds this specific number, the only piece of Information I found was a line of code in <a href=\"http://web.mit.edu/~mkgray/afs/bar/afs/net/project/attic/quipu/isode-8.0/others/ntp/ntpsubs.c\" rel=\"noreferrer\">http://web.mit.edu/~mkgray/afs/bar/afs/net/project/attic/quipu/isode-8.0/others/ntp/ntpsubs.c</a> which says </p>\n<pre><code>#ifdef  VAX_COMPILER_FLT_BUG\n    if (b &lt; 0.0) b += 4.294967296e9;\n#endif\n</code></pre>\n<p>So, what is the significance of that number?</p>\n<p>Additional Info: The number can not be negative, so this can actually never happen.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "626",
    "tags": [
        "disassembly",
        "float"
    ],
    "user": "tkausl",
    "time": "Sep 17, 2017 at 22:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I actually found the answer while writing this question!</p>\n<p>This number is exactly <code>UINT_MAX + 1</code>, stored as a double. So it seems this code converts a <strong>unsigned integer</strong> to a double. The <code>fild</code> instruction loads the 32 bit value as <strong>signed</strong> value, after adding the max possible unsigned value + 1, the double contains the same value as the <strong>unsigned</strong> integer.</p>\n<p>So the compiler produced this probably automatically from something like this:</p>\n<pre><code>unsigned int num; // some arbitrary 32 bit unsigned number\ndouble d = num;\n</code></pre>\n<p>Since it took me some time to figure it out, I thought it may help someone else find the solution faster than me.</p>\n</div>",
            "votes": "10",
            "user": "tkausl",
            "time": "Sep 17, 2017 at 22:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}