{
    "title": "Radare2 does not display the entire assembler code",
    "link": "https://reverseengineering.stackexchange.com/questions/20534/radare2-does-not-display-the-entire-assembler-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to solve <a href=\"https://www.root-me.org/en/Challenges/Cracking/ELF-Ptrace\" rel=\"nofollow noreferrer\">this ELF - Ptrace crack me</a>. Here are the commands I use :</p>\n<p>I start radare2 with the crack me as argument. </p>\n<pre><code>radare2 ch3.bin\n</code></pre>\n<p>I decide to go to the main and print the assembly code :</p>\n<pre><code>[0x080482f0]&gt; s main \n\n[0x080483f0]&gt; pdf\n            ;-- main:\n/ (fcn) sym.main 175\n|   int sym.main (int argc, char **argv, char **envp);\n|           ; var char *s @ ebp-0x16\n|           ; var int var_ch @ ebp-0xc\n|           ; var int var_4h @ ebp-0x4\n|           ; arg int arg_4h @ esp+0x4\n|           ; DATA XREF from entry0 (0x8048307)\n|           0x080483f0      8d4c2404       lea ecx, [arg_4h]           ; sym._nl_current_LC_MONETARY\n|           0x080483f4      83e4f0         and esp, 0xfffffff0\n|           0x080483f7      ff71fc         push dword [ecx - 4]\n|           0x080483fa      55             push ebp\n|           0x080483fb      89e5           mov ebp, esp\n|           0x080483fd      51             push ecx\n|           0x080483fe      83ec14         sub esp, 0x14\n|           0x08048401      c745f488280c.  mov dword [var_ch], str.ksuiealohgy ; 0x80c2888 ; \"ksuiealohgy\"\n|           0x08048408      6a00           push 0                      ; void*data\n|           0x0804840a      6a01           push 1                      ; loc._nl_current_LC_MONETARY_used ; void*addr\n|           0x0804840c      6a00           push 0                      ; pid_t pid\n|           0x0804840e      6a00           push 0                      ; __ptrace_request request\n|           0x08048410      e85b060100     call sym.ptrace\n|           0x08048415      83c410         add esp, 0x10\n|           0x08048418      85c0           test eax, eax\n|       ,=&lt; 0x0804841a      791a           jns 0x8048436\n|       |   0x0804841c      83ec0c         sub esp, 0xc\n|       |   0x0804841f      6894280c08     push str.Debugger_detect___..._Exit ; 0x80c2894 ; \"Debugger detect\\u00e9 ... Exit\" ; const char *s\n|       |   0x08048424      e8a70e0000     call sym.puts               ; int puts(const char *s)\n|       |   0x08048429      83c410         add esp, 0x10\n|       |   0x0804842c      b801000000     mov eax, 1\n|      ,==&lt; 0x08048431      e9c3000000     jmp loc.080484f9\n|      ||   ; CODE XREF from sym.main (0x804841a)\n|      |`-&gt; 0x08048436      83ec0c         sub esp, 0xc\n|      |    0x08048439      68b0280c08     push 0x80c28b0              ; \"############################################################\" ; const char *s\n|      |    0x0804843e      e88d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048443      83c410         add esp, 0x10\n|      |    0x08048446      83ec0c         sub esp, 0xc\n|      |    0x08048449      68f0280c08     push str.Bienvennue_dans_ce_challenge_de_cracking ; 0x80c28f0 ; \"##        Bienvennue dans ce challenge de cracking        ##\" ; const char *s\n|      |    0x0804844e      e87d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048453      83c410         add esp, 0x10\n|      |    0x08048456      83ec0c         sub esp, 0xc\n|      |    0x08048459      6830290c08     push 0x80c2930              ; \"############################################################\\n\" ; const char *s\n|      |    0x0804845e      e86d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048463      83c410         add esp, 0x10\n|      |    0x08048466      b86e290c08     mov eax, str.Password_:     ; 0x80c296e ; \"Password : \"\n|      |    0x0804846b      83ec0c         sub esp, 0xc\n|      |    0x0804846e      50             push eax\n|      |    0x0804846f      e8ec0a0000     call sym.__printf\n|      |    0x08048474      83c410         add esp, 0x10\n|      |    0x08048477      a19c540e08     mov eax, dword obj.stdin    ; obj._IO_stdin ; [0x80e549c:4]=0x80e5080 obj._IO_2_1_stdin\n|      |    0x0804847c      83ec04         sub esp, 4\n|      |    0x0804847f      50             push eax                    ; FILE *stream\n|      |    0x08048480      6a09           push 9                      ; 9 ; int size\n|      |    0x08048482      8d45ea         lea eax, [s]\n|      |    0x08048485      50             push eax                    ; char *s\n|      |    0x08048486      e8050b0000     call sym.fgets              ; char *fgets(char *s, int size, FILE *stream)\n|      |    0x0804848b      83c410         add esp, 0x10\n|      |    0x0804848e      8d0597840408   lea eax, loc._notng         ; 0x8048497\n|      |    0x08048494      40             inc eax\n\\      |    0x08048495      ffe0           jmp eax\n       |    ;-- _notng:\n</code></pre>\n<p>That's where I find the code really strange. There are no more instructions after retrieving the string (the password).</p>\n<p>Thanks to <a href=\"https://reverseengineering.stackexchange.com/users/3473/blabb\">blabb</a>, I am able to print the code directly with the command <code>pd 100 @ main</code>. The output is :</p>\n<pre><code>[0x080483f0]&gt; pd 100 @ main\n            ;-- main:\n/ (fcn) sym.main 175\n|   int sym.main (int argc, char **argv, char **envp);\n|           ; var char *s @ ebp-0x16\n|           ; var int var_ch @ ebp-0xc\n|           ; var int var_4h @ ebp-0x4\n|           ; arg int arg_4h @ esp+0x4\n|           ; DATA XREF from entry0 (0x8048307)\n|           0x080483f0      8d4c2404       lea ecx, [arg_4h]           ; sym._nl_current_LC_MONETARY\n|           0x080483f4      83e4f0         and esp, 0xfffffff0\n|           0x080483f7      ff71fc         push dword [ecx - 4]\n|           0x080483fa      55             push ebp\n|           0x080483fb      89e5           mov ebp, esp\n|           0x080483fd      51             push ecx\n|           0x080483fe      83ec14         sub esp, 0x14\n|           0x08048401      c745f488280c.  mov dword [var_ch], str.ksuiealohgy ; 0x80c2888 ; \"ksuiealohgy\"\n|           0x08048408      6a00           push 0                      ; void*data\n|           0x0804840a      6a01           push 1                      ; loc._nl_current_LC_MONETARY_used ; void*addr\n|           0x0804840c      6a00           push 0                      ; pid_t pid\n|           0x0804840e      6a00           push 0                      ; __ptrace_request request\n|           0x08048410      e85b060100     call sym.ptrace\n|           0x08048415      83c410         add esp, 0x10\n|           0x08048418      85c0           test eax, eax\n|       ,=&lt; 0x0804841a      791a           jns 0x8048436\n|       |   0x0804841c      83ec0c         sub esp, 0xc\n|       |   0x0804841f      6894280c08     push str.Debugger_detect___..._Exit ; 0x80c2894 ; \"Debugger detect\\u00e9 ... Exit\" ; const char *s\n|       |   0x08048424      e8a70e0000     call sym.puts               ; int puts(const char *s)\n|       |   0x08048429      83c410         add esp, 0x10\n|       |   0x0804842c      b801000000     mov eax, 1\n|      ,==&lt; 0x08048431      e9c3000000     jmp loc.080484f9\n|      ||   ; CODE XREF from sym.main (0x804841a)\n|      |`-&gt; 0x08048436      83ec0c         sub esp, 0xc\n|      |    0x08048439      68b0280c08     push 0x80c28b0              ; \"############################################################\" ; const char *s\n|      |    0x0804843e      e88d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048443      83c410         add esp, 0x10\n|      |    0x08048446      83ec0c         sub esp, 0xc\n|      |    0x08048449      68f0280c08     push str.Bienvennue_dans_ce_challenge_de_cracking ; 0x80c28f0 ; \"##        Bienvennue dans ce challenge de cracking        ##\" ; const char *s\n|      |    0x0804844e      e87d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048453      83c410         add esp, 0x10\n|      |    0x08048456      83ec0c         sub esp, 0xc\n|      |    0x08048459      6830290c08     push 0x80c2930              ; \"############################################################\\n\" ; const char *s\n|      |    0x0804845e      e86d0e0000     call sym.puts               ; int puts(const char *s)\n|      |    0x08048463      83c410         add esp, 0x10\n|      |    0x08048466      b86e290c08     mov eax, str.Password_:     ; 0x80c296e ; \"Password : \"\n|      |    0x0804846b      83ec0c         sub esp, 0xc\n|      |    0x0804846e      50             push eax\n|      |    0x0804846f      e8ec0a0000     call sym.__printf\n|      |    0x08048474      83c410         add esp, 0x10\n|      |    0x08048477      a19c540e08     mov eax, dword obj.stdin    ; obj._IO_stdin ; [0x80e549c:4]=0x80e5080 obj._IO_2_1_stdin\n|      |    0x0804847c      83ec04         sub esp, 4\n|      |    0x0804847f      50             push eax                    ; FILE *stream\n|      |    0x08048480      6a09           push 9                      ; 9 ; int size\n|      |    0x08048482      8d45ea         lea eax, [s]\n|      |    0x08048485      50             push eax                    ; char *s\n|      |    0x08048486      e8050b0000     call sym.fgets              ; char *fgets(char *s, int size, FILE *stream)\n|      |    0x0804848b      83c410         add esp, 0x10\n|      |    0x0804848e      8d0597840408   lea eax, loc._notng         ; 0x8048497\n|      |    0x08048494      40             inc eax\n\\      |    0x08048495      ffe0           jmp eax\n       |    ;-- _notng:\n       |    ; DATA XREF from sym.main (0x804848e)\n       |    0x08048497      b88a55ea8b     mov eax, 0x8bea558a\n       |    0x0804849c      45             inc ebp\n       |    0x0804849d      f4             hlt\n       |    0x0804849e      83c004         add eax, 4\n       |    0x080484a1      8a00           mov al, byte [eax]\n       |    0x080484a3      38c2           cmp dl, al\n       |,=&lt; 0x080484a5      753d           jne 0x80484e4\n       ||   0x080484a7      8a55eb         mov dl, byte [ebp - 0x15]\n       ||   0x080484aa      8b45f4         mov eax, dword [ebp - 0xc]\n       ||   0x080484ad      83c005         add eax, 5\n       ||   0x080484b0      8a00           mov al, byte [eax]\n       ||   0x080484b2      38c2           cmp dl, al\n      ,===&lt; 0x080484b4      752e           jne 0x80484e4\n      |||   0x080484b6      8a55ec         mov dl, byte [ebp - 0x14]\n      |||   0x080484b9      8b45f4         mov eax, dword [ebp - 0xc]\n      |||   0x080484bc      40             inc eax\n      |||   0x080484bd      8a00           mov al, byte [eax]\n      |||   0x080484bf      38c2           cmp dl, al\n     ,====&lt; 0x080484c1      7521           jne 0x80484e4\n     ||||   0x080484c3      8a55ed         mov dl, byte [ebp - 0x13]\n     ||||   0x080484c6      8b45f4         mov eax, dword [ebp - 0xc]\n     ||||   0x080484c9      83c00a         add eax, 0xa\n     ||||   0x080484cc      8a00           mov al, byte [eax]\n     ||||   0x080484ce      38c2           cmp dl, al\n    ,=====&lt; 0x080484d0      7512           jne 0x80484e4\n    |||||   0x080484d2      83ec0c         sub esp, 0xc\n    |||||   0x080484d5      687a290c08     push str.Good_password      ; 0x80c297a ; \"\\nGood password !!!\\n\"\n    |||||   0x080484da      e8f10d0000     call sym.puts               ; int puts(const char *s)\n    |||||   0x080484df      83c410         add esp, 0x10\n   ,======&lt; 0x080484e2      eb10           jmp 0x80484f4\n   ||||||   ; CODE XREFS from loc._notng (+0xe, +0x1d, +0x2a, +0x39)\n   |```-`-&gt; 0x080484e4      83ec0c         sub esp, 0xc\n   |   |    0x080484e7      688e290c08     push str.Wrong_password.    ; 0x80c298e ; \"\\nWrong password.\\n\"\n   |   |    0x080484ec      e8df0d0000     call sym.puts               ; int puts(const char *s)\n   |   |    0x080484f1      83c410         add esp, 0x10\n   |   |    ; CODE XREF from loc._notng (+0x4b)\n   `------&gt; 0x080484f4      b800000000     mov eax, 0\n|- loc.080484f9 8\n|   loc.080484f9 ();\n|      |    ; var int var_4h @ ebp-0x4\n|      |    ; CODE XREF from sym.main (0x8048431)\n|      `--&gt; 0x080484f9      8b4dfc         mov ecx, dword [var_4h]\n|           0x080484fc      c9             leave\n|           0x080484fd      8d61fc         lea esp, [ecx - 4]\n\\           0x08048500      c3             ret\n            0x08048501      90             nop\n            0x08048502      90             nop\n            0x08048503      90             nop\n            0x08048504      90             nop\n            0x08048505      90             nop\n            0x08048506      90             nop\n            0x08048507      90             nop\n            0x08048508      90             nop\n            0x08048509      90             nop\n            0x0804850a      90             nop\n            0x0804850b      90             nop\n[0x080483f0]&gt; \n</code></pre>\n<p>Why I am obligated to enter this command and not <code>pdf</code> ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "812",
    "tags": [
        "ida",
        "binary-analysis",
        "radare2",
        "anti-debugging",
        "crackme"
    ],
    "user": "Anonymous",
    "time": "Feb 3, 2019 at 15:59",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">pdf is for function try raw disassembly with pd {num} @ {addr}</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">or just try one of the visual modes with <code>V</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I had some trouble really understanding your question so I'll try to answer this question as best as I can.</p>\n<p>When you use <code>pdf</code> you instruct radare2 to print the disassembly of the whole function. Where each function begins and ends is identified when analysis is done (<code>aaa</code>). So if you don't have functions identified <code>pdf</code> won't work. </p>\n<p>You run your analysis so you could run <code>pdf @ main</code>, but where function ends in this case was wrongly identified. If you check the last instructions of this function this is what you get:</p>\n<pre><code>0x0804848e      8d0597840408   lea eax, loc._notng         ;0x8048497\n0x08048494      40             inc eax\n0x08048495      ffe0           jmp eax  \n;-- _notng:\n</code></pre>\n<p>So it takes an address of _notng, adds one and jumps there and this what causes r2 to wrongly identify the end of the function. This is a simple trick that caused disassemblers to present invalid opcodes.</p>\n<p>You can see it both in IDA and r2. This code that you get later</p>\n<pre><code>0x08048497      b88a55ea8b     mov eax, 0x8bea558a\n0x0804849c      45             inc ebp\n0x0804849d      f4             hlt\n</code></pre>\n<p>is wrong and it's due to the fact that <code>jmp</code> will land in the middle of this <code>mov</code>. The first byte (<code>b8</code>) is bogus and should not be treated as a code. </p>\n<p>In order to fix this issue we can change the type of this byte. In radare you can use:</p>\n<pre><code>&gt; Cd 1 1 @ 0x8048497\n</code></pre>\n<p>and in IDA you press <kbd>d</kbd> on the <code>mov</code> opcode and later <kbd>c</kbd> on the byte after <code>b8</code>.</p>\n<p>After this you will see correct opcodes:</p>\n<pre><code>0x08048497      .byte 0xb8\n0x08048498      8a55ea         mov dl, byte [ebp - 0x16]\n0x0804849b      8b45f4         mov eax, dword [ebp - 0xc]\n</code></pre>\n<p>Now you could resize the main function for the following basic block by doing <code>afb+</code>, but for some reason <code>pdf</code> still doesn't print correctly the function. Need to check if that's not a bug.</p>\n</div>",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Feb 3, 2019 at 22:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}