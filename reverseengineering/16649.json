{
    "title": "JNI_onLoad not presented in .so (Android)",
    "link": "https://reverseengineering.stackexchange.com/questions/16649/jni-onload-not-presented-in-so-android",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to analyze a .so file that is ran on android.\nLoading the file into IDA I'm unable to spot the JNI_onLoad.\nSo I dumped the .so to memory and I'm still unable to spot the JNI_onLoad.</p>\n<p>Looking at the strings window, I could see a string \"JNI_onLoad\", but it's not referenced anywhere.\nThe library should also contain JNI native methods, but I'm unable to find any.</p>\n<p>So my question is, where is JNI_onLoad? Must there be a JNI_onLoad? and how does the calling java class know where to find it's native functions?</p>\n<p>Here are the exports that IDA lists:</p>\n<pre><code>Name    Address  Ordinal\n----    -------  -------\n       0008A044        \n/linker 0008A064        \n       0008B098        \nס      0008AFCC        \n       0008A990        \n       0008A16C        \nr      0008A43C        \n       0008A464        \nƒ      0008A4B8        \n       0008A784        \n       0008A988        \n       0008AB24        \n       0008AB4C        \n      0008AED0        \n.      0008AED8        \n       0008AEE0        \n       0008AF44        \n       0008AF7C        \nh      0008AF90        \n       0008B07C        \n       0008C808        \n       0008C85C        \n       0008C0E8        \n       0008B5E4        \n}      0008B5EC        \n       0008B690        \n       0008C2D8        \n       0008C0C0        \n      0008C12C        \nט      0008C184        \nפ      0008C0A4        \n½      0008C198        \n       0008C1BC        \n|       0008C1E0        \n       0008C228        \n_«     0008C660        \n       0008C6B0        \n       0008C6CC        \n»      0008C6D4        \nנ»     0008C6DC        \n_»     0008C6E4        \n»      0008C6EC        \n_      0008C774        \n       0008C790        \n       0008C7A4        \n_      0008C7CC        \nר_     0008C7E0        \n       0008CAE8        \n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "868",
    "tags": [
        "android",
        "shared-object"
    ],
    "user": "NotGI",
    "time": "Oct 28, 2017 at 17:47",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Did you try to look into Exports window ? Do you see any reasonable code ?</span>",
            "time": null
        },
        {
            "user": "NotGI",
            "text": "<span class=\"comment-copy\">@ws, nothing, I've never encountered anything like this. /linker would seem interesting but I can't seem to make anything of it. When I load the file IDA says it cannot read file attributes and cannot create segment followed by an error that the binary data 16 is incorrect. Maybe I'm loading the file wrong?</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">I'd say that either you're loading it wrong or there is bug in IDA. What \"file\" utility says about the .so file ?</span>",
            "time": null
        },
        {
            "user": "NotGI",
            "text": "<span class=\"comment-copy\">@ws, trying to run objdump on .so file says file truncated. However it's being loaded somehow into the application anyway.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Found somewhat of a solution.<br/>\nAfter a lot googling I came to a conclusion that the ELF file was corrupted on purpose.<br/> I've found that only 3 fields can be manipulated in order to make an ELF break a debugger and still be able to run -&gt; (e_shoff, e_shnum, e_shstrndx).<br/></p>\n<pre><code>Source: https://dustri.org/b/screwing-elf-header-for-fun-and-profit.html\n</code></pre>\n<p>I downloaded ELF Parser from <a href=\"http://www.elfparser.com/\" rel=\"nofollow noreferrer\">http://www.elfparser.com/</a> and loaded the shared object file into it.<br/>\nUnder SHeaders, made note of the smallest section offset and converted into hex, in my case the offset was 2056 or in hex 0x808. I went to the ELF header and made note of my SH Offset which was 703264 or in hex 0xABB20<br/>\nI opened the file in a hex editor and looked for 0x20 0xBB 0x0A 0x00 and replaced it with 0x08 0x08. That fixed the exports and imports for IDA and i was able to find JNI_onLoad.</p>\n</div>",
            "votes": "1",
            "user": "NotGI",
            "time": "Nov 3, 2017 at 16:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}