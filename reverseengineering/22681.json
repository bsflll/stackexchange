{
    "title": "C# - Identical block of code, but IL instructions changed after update. How do I modify the more convoluted update?",
    "link": "https://reverseengineering.stackexchange.com/questions/22681/c-identical-block-of-code-but-il-instructions-changed-after-update-how-do-i",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Background info - For the game 7 Days To Die, there is a C# wrapper that implements the Harmony API, which allows us to intercept the game's function calls, as well as changing the IL instructions themselves.</p>\n<p>I originally used the Transpiler functionality to remove a condition that's used in two checks. Which was easy enough, as I just needed to remove three instructions. Here's a screenshot showing them: </p>\n<p><img alt=\"\" src=\"https://i.sstatic.net/r5Wmj.png\"/></p>\n<p>On the left is the old code, which was easy enough to modify. I just needed to remove the instructions at indexes <strong>79</strong>, <strong>80</strong>, and <strong>81</strong>. Which changes the C# code from:</p>\n<pre><code>this.cmds[1].enabled = (_world.IsEditor() &amp;&amp; flag);\n</code></pre>\n<p>To:</p>\n<pre><code>this.cmds[1].enabled = (flag);\n</code></pre>\n<p>Which worked perfectly. However, the DLL was changed in an update. The C# code is the exact same, but the IL instructions differ at this very last condition check. And I can't quite wrap my head around it.</p>\n<p>The original was easy enough. <code>IL 79</code> prepares something for the next function call, <code>IL 80</code> makes the call, and <code>IL 81</code> jumps past the next couple of instructions if it returns false. In ASM, the three instructions would basically be <code>pop</code> (call class' function via a pointer), <code>cmp</code> (check the boolean result), and <code>jz</code> (jump if false).</p>\n<p>But the updated IL instructions on the right don't make any sense to me. There's no branch, there's no jump. How do I work with that to remove the <code>_world.IsEditor()</code> condition?</p>\n<p>Edit: <a href=\"https://pastebin.com/XEncgdet\" rel=\"nofollow noreferrer\">Pastebin of the C# function</a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "218",
    "tags": [
        "c#"
    ],
    "user": "FiftyTifty",
    "time": "Dec 7, 2019 at 18:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like that previous code had an optimization done, so that if the left-hand side value was evaluated as <code>false</code> the right one was not evaluated at all in the <code>&amp;&amp;</code> operation as it would never result in <code>true</code> anyway and <code>false</code> can be used directly.</p>\n<p>Currently there's no such code but you can clearly see the <code>and</code> being done, preceded by <code>ldloc.0</code>. There's a missing code from the beginning of this function but if local variable at index 0 is your <code>flag</code> you can remove those two instructions (so lines 81 and 82). From the code it looks like on the stack there should already by also a <code>1</code> so that the instruction that stores the value with <code>stfld</code> will work. If not you could add a <code>ldc.i4.1</code> instead of those two that you removed.</p>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Dec 7, 2019 at 18:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "FiftyTifty",
                    "text": "<span class=\"comment-copy\">Your solution worked, thanks a bunch for that. Now I'm trying to wrap my head around it, but it is a bit too abstract for me. I get that <code>flag</code> was put onto the top of the stack as <code>1</code>, which is the same as <code>true</code>, earlier in the function. But at the end of the code, which is the part to be changed, there's several other instructions pushing to the stack as well, but no popping from the stack. Do the instructions just take the variable from the top of the stack, basically as an automatic <code>push</code> before that instruction is processed?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">yes, IL is stack-based so each instruction takes what it needs from stack and push back the results on top.</span>",
                    "time": null
                }
            ]
        }
    ]
}