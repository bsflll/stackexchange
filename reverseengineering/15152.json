{
    "title": "EBP + C what is that?",
    "link": "https://reverseengineering.stackexchange.com/questions/15152/ebp-c-what-is-that",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this assembly code:</p>\n<pre><code>MOV DL,BYTE PTR DS:[ECX+EAX]  --&gt; Move the first byte of EAX to DL\nADD BYTE PTR DS:[EAX+9],DL  --&gt; ADD the DL byte to the ninth byte at EAX\nINC ECX --&gt; Increase ECX by one\nCMP ECX,DWORD PTR SS:[EBP+C] -- &gt; ????\n</code></pre>\n<p>As you can see i understand everything except of the last line,</p>\n<pre><code>CMP ECX,DWORD PTR SS:[EBP+C]\n</code></pre>\n<p>What i can understand here is that there is a compersion between 4 bytes that comes from EBP+C to ECX</p>\n<p>But i still don't understand that what is that EBP+C?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "register"
    ],
    "user": "Xozu",
    "time": "Apr 13, 2017 at 6:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>EBP</code> stands for <em>extended base pointer</em> keeping track of the current stackframe.</p>\n<p>Since the current <code>ESP</code> (<em>extended stack pointer</em>) changes frequently in functions as stuff gets pushed to and poped of the stack, the base pointer remebers the value of ESP at the beginning of the function (convention).</p>\n<p>For this reason, <code>EBP</code> is often used to referr to arguments or local variables (depending on if you add or substract from it). Remember the stack grows downwards - so positive offsets may referr to arguments passed to the function. Wikipedia offers a great illustration of this layout below:</p>\n<p><a href=\"https://i.sstatic.net/tEbkd.png\" rel=\"nofollow noreferrer\"><img alt=\"Wikipedia Stack illustration\" src=\"https://i.sstatic.net/tEbkd.png\"/></a></p>\n</div>",
            "votes": "4",
            "user": "Nordwald",
            "time": "Apr 13, 2017 at 7:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">That is a great explanation thank you ! @Nordwald</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>C is a hexadecimal number (12 in decimal).DWORD PTR SS:[EBP+C] should mean memory at stack segment, by address (value of EBP register + 12).\nThis <code>CMP ECX,DWORD PTR SS:[EBP+C]</code> means \"compare the content of ECX register with 32 bit from address [ebp + 12].</p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Apr 13, 2017 at 7:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}