{
    "title": "How do I denote and use JMP /5 in byte code",
    "link": "https://reverseengineering.stackexchange.com/questions/14439/how-do-i-denote-and-use-jmp-5-in-byte-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm on the OSX platform working with x86_64.  I've worked out how to do near jumps with the E9 byte code directive where my relative addresses have 4 bytes (teamed up with RIP)<br/>\nNow I have an instance where I've allocated something at a very high address and where I'm going to be referencing it is very far away in the same process.  the end result is that the difference between the RIP and the starting address results in 5 bytes. (if I use relative addressing).  I was attempting to use FF 25 + 4 bytes + 1 byte and the fifth wasn't being interpreted as part of the command.<br/>\nIndeed when I looked up the data in the table <a href=\"http://sandpile.org/x86/opc_rm.htm\" rel=\"nofollow noreferrer\">x86 architecture\nmod R/M byte </a> it noted FF 25 (apparently does a RIP+signed dword).  This would explain why 1 byte was being dropped.   I tried examining the table and do not really understand it.</p>\n<p>So the questions I have are </p>\n<ol>\n<li>How do I read the table so as to understand how to get the byte code to set up so I can do question #3 correctly?</li>\n<li>Does JMP /5 use a direct address or indirect addressing (do I have to involve the RIP as a part of the calculation)?</li>\n<li>What set of byte codes do I need to assemble to get a JMP /5 to take effect  (eg:  FF ... )  </li>\n</ol>\n<p>typical 4 byte jump (e9) code might look like this: (lldb session)</p>\n<pre><code>-&gt; 0x100000ebb:  81 7d fc 03 00 00 00  cmpl   $0x3, -0x4(%rbp)\n   0x100000ec2:  0f 85 05 00 00 00     jne    0x100000ecd           \n   0x100000ec8:  e9 3b 57 34 12        jmp    0x112346608\n   0x100000ecd:  48 8d 3d bc 00 00 00  leaq   0xbc(%rip), %rdi  \n</code></pre>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "osx",
        "x86-64",
        "byte-code"
    ],
    "user": "Div",
    "time": "Jan 19, 2017 at 1:53",
    "comments": [
        {
            "user": "Div",
            "text": "<span class=\"comment-copy\">I figured out my main problem is I need to use jmpq (FF 25) + 4 bytes and I need to designate the sign bit somehow.  At the moment I do not know how to designate the sign bit.  and I still don't know how to read the table (question #1).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no JMP-64bit-OFFSET instruction in AMD64 (don't ask me, normaly they are not stingy with new opcodes).</p>\n<p>Quote from <a href=\"http://ref.x86asm.net/\" rel=\"nofollow noreferrer\">x86asm.net</a> about JMPF:</p>\n<blockquote>\n<p>AMD64 Architecture Programmer's Manual Volume 3: If the operand-size\n  is 32 or 64 bits, the operand is a 16-bit selector followed by a\n  32-bit offset. (On AMD64 architecture, 64-bit offset is not supported)</p>\n</blockquote>\n<p>What one would do instead, is to use an indirect jump like this:</p>\n<pre><code>mov rax, 0x100000ebb\njmp rax\n</code></pre>\n<p>This also works for 32 bit applications and directly jumps to the address contained in the register (no offset).</p>\n<p>For further information, have a look at the related questions at StackOverflow: <a href=\"https://stackoverflow.com/questions/23814334/assembler-x64-bit-far-calls-jumps\">here</a> and <a href=\"https://stackoverflow.com/questions/9815448/jmp-instruction-hex-code\">here</a></p>\n<p>edit:</p>\n<p>about assembler and signs: The highest-value bit in a byte sequence is usually considered to be the sign bit. For example, when using relative jumps, it will treat the offset as a two-complement number. If the result is negative, it subtracts the number from the instruction pointer.</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This might have nothing to do with your scenario and if so I apologize. :)  I came across your post while trying to figure out why a relative jump seemed off by 5 bytes.  So I wanted to leave this answer here in case anyone else stumbles along the same path.</p>\n<p>TL;DR: a x86 relative jump uses an offset whose displacement is relative to the <em>next</em> instruction.</p>\n<p>I was looking at some assembly and trying to figure out where the +5 bytes was coming from...</p>\n<pre><code>0x7FFE9BAD116D : E9 74690000 ; jmp to 0x7FFE9BAD7AE6\n</code></pre>\n<p>I was calculating 0x7FFE9BAD116D + 6974 (remember we're on little endian) = 7FFE9BAD7AE1 , so I was confused about the 5 bytes difference.</p>\n<p>I looked up the E9 opcode and saw the answer:</p>\n<blockquote>\n<p>Jump near, relative, displacement relative to next instruction.</p>\n</blockquote>\n<p>So in my example above, the current instruction is 5 bytes (1 byte opcode plus 4 byte address offset).</p>\n</div>",
            "votes": "0",
            "user": "Jay",
            "time": "Aug 2, 2021 at 15:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}