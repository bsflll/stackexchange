{
    "title": "IDA Pro function stack frame view",
    "link": "https://reverseengineering.stackexchange.com/questions/2283/ida-pro-function-stack-frame-view",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA Pro displays certain buffer or padding above (at lower addresses) local variables in stack frame view. For instance:</p>\n<p><strong>Example 1.</strong><br/> \nThe following screen shot of stack frame view shows 12 bytes (included in the red box) buffer: </p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/wB1ok.png\"/></p>\n<p><strong>Example 2.</strong><br/> \nThe following screen shot of a different stack frame view shows 12 bytes buffer again:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ForTX.png\"/></p>\n<p>I understand that IDA marked it as <strong><code>db ?; undefined</code></strong> because it couldn't figure out how it was used. I also realize that IDA automatically calculates size of a stack frame by monitoring ESP. I would assume it might have something to do with non-volitile register save area. However, in <strong>Example 1</strong> it clearly shows <strong><code>Saved regs: 0</code></strong> and in <strong>Example 2</strong> it shows <strong><code>Saved regs: 4</code></strong>. I am puzzled, and here go my questions:</p>\n<p>Why does IDA Pro display certain buffer or padding above (at lower addresses) local variables in stack frame view? Is it a coincidence that both views show exactly <strong>12 bytes</strong> buffer? Is it something particular to certain calling convention or complier? </p>\n</div>",
    "votes": "7",
    "answers": 3,
    "views": "9k",
    "tags": [
        "disassembly",
        "static-analysis",
        "ida",
        "calling-conventions"
    ],
    "user": "PSS",
    "time": "Jun 19, 2013 at 4:10",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">The compiler might be adding stack padding for performance (memory alignment) or overflow prevention reasons, but those don't show up so nicely. Can you show the disassembled code of the function?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Add the function prolog instructions.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA keeps track of the value of the stack pointer (ESP) throughout its static analysis of the entire function. The greatest negative value of ESP (relative to the beginning of the function) is used to determine the size of the stack frame.</p>\n<p>As for why the stack frames you posted have \"undefined\" bytes at the top, it's because IDA couldn't automatically determine if or how those stack offsets were being used.</p>\n</div>",
            "votes": "5",
            "user": "Jason Geffner",
            "time": "Jun 19, 2013 at 2:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">Thank you so much for your reply. I do realize everything you mentioned. However, it doesn't address my questions. I have clarified my questions. Hopefully it is a little more clear, and you could help me out with it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Thank you all so much for your answers and comments. While reading your comments and preparing to update my question, I found the answer. </p>\n<p>I must give credit to <a href=\"https://reverseengineering.stackexchange.com/users/60/igor-skochinsky\">Igor Skochinsky</a>, who asked me to provide functions' prolog instructions. Both functions use the <a href=\"http://en.wikipedia.org/wiki/X86_calling_conventions#cdecl\" rel=\"nofollow noreferrer\">cdecl calling convention</a>. However, calling convention has nothing to do with this buffer. This is what the prolog looks like:</p>\n<pre><code>push    ebp\nmov     ebp, esp\nsub     esp, &lt;size of local vars&gt;\npush    ebx\npush    esi\npush    edi\n</code></pre>\n<p>This buffer reflects <strong>three push instructions</strong> for registers EBX, ESI, EDI. These registers are categorized as <strong>Callee Saved Registers</strong> and this \"buffer\" is called <strong>Non-Volatile Register Save Area</strong>. </p>\n<p>In accordance to x86 convention (it is also applicable to x64), registers are divided into <strong>Caller Saved Registers</strong> and <strong>Callee Saved Registers</strong>. </p>\n<p>Caller saved registers are also known as volatile registers. Those are core CPU registers such as EAX, EDX, and ECX. A calling function (Caller) is responsible for saving volatile registers onto usually runtime stack before making a call. </p>\n<p>Callee saved registers are known as non-volatile registers. Those are core CPU registers such as EBX, ESI, EDI, ESP, and EBP. It is assumed by convention, that values in those registers will be preserved by a callee function. In case any of the non-volatile registers are going to be used within a callee,  the callee is responsible to save the registers onto runtime stack. In addition, the callee is responsible to restore those registers before returning to a caller function.</p>\n<p>The way volatile and non-volatile registers used is rather compiler driven. The following paper <a href=\"http://www.cs.virginia.edu/~evans/cs216/guides/x86.html\" rel=\"nofollow noreferrer\"><strong>x86 Assembly Guide</strong></a> describes Caller and Callee rules in more detail. </p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The screenshots shows that u are examining IDA's detailed stack view.</p>\n<p>IDA gives a name  to every byte that is accessed directly in the function, any other bytes remain undefined.</p>\n<p>Calling convention ? Give us the prologue and the epilogue of this subroutine so we can see how the stack is allocated and cleaned.</p>\n<p>So if this is a stack frame of a normal application written in high level language (not malware nor written in assembly by hand) and not calling convention specific then i think we can agree that the compiler allocated more stack space than this function needs for some reason.</p>\n<p>I dont think it is a \"must\" to know why the compiler did this, but thats your choice.</p>\n</div>",
            "votes": "2",
            "user": "nomilk",
            "time": "Jun 19, 2013 at 11:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">Thank you for your input. I know what calling convention it is. I am not asking about it. What I would like to know is if this particular buffer related to certain calling convention? I am updating my question to clarify that.</span>",
                    "time": null
                },
                {
                    "user": "nomilk",
                    "text": "<span class=\"comment-copy\">@PSS I cant see my answer explaining what a calling convention is, but if you are kind enough to provide us with a prologue and an epilogue to this subroutine in order to figure out if this is about a calling convention or not, so we can help you.</span>",
                    "time": null
                },
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">I have already provided the answer. Thank you for your input.</span>",
                    "time": null
                }
            ]
        }
    ]
}