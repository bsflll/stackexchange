{
    "title": "Logging lpRect and uFormat from DrawTextA",
    "link": "https://reverseengineering.stackexchange.com/questions/2668/logging-lprect-and-uformat-from-drawtexta",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using <a href=\"http://www.rohitab.com/apimonitor\" rel=\"nofollow noreferrer\">APIMonitor</a> from Rohitab I found that DrawTextA has some additional arguments I would like to log using Python and <a href=\"https://github.com/OpenRCE/pydbg\" rel=\"nofollow noreferrer\">Pydbg</a> (I'm currently logging lpchText, se below).</p>\n<p><img alt=\"DrawTextA\" src=\"https://i.sstatic.net/wBbN6.png\"/></p>\n<p>My current hooking code looks something like this:</p>\n<pre><code>def DrawTextHook(dbg, args):\n   # Log lpchText\n   text = dbg.get_ascii_string(incremental_read(dbg, args[1], 255))\n</code></pre>\n<p>The argument I would like to log is <strong>lpRect</strong> and <strong>uFormat</strong>. How do I extend my currrent code to log these two arguments?</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "228",
    "tags": [
        "python"
    ],
    "user": "Jonas Lejon",
    "time": "Aug 21, 2013 at 19:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if you <code>really</code> ask me i will say <code>dump pydbg</code> and start using <code>logged ollydbg conditional break points</code> it will give you the function's arguments cleanly formatted into its components or even windbg</p>\n<p>you asked pydbg here is how you can do it in pydbg</p>\n<pre><code>from pydbg import *\nfrom pydbg.defines import *\n\ndef handler_breakpoint (pydbg):   \n   if pydbg.first_breakpoint:\n    return DBG_CONTINUE\n\n   arg1 =   dbg.get_arg(1,dbg.context)\n   arg2 =   dbg.get_arg(2,dbg.context)\n   arg3 =   dbg.get_arg(3,dbg.context)\n   arg4 =   dbg.get_arg(4,dbg.context)\n   arg5 =   dbg.get_arg(5,dbg.context)\n   text =   dbg.read_process_memory(arg2,0x20)\n   lprect = dbg.read_process_memory(arg4,0x10)\n\n   print \"hDc = %08x\\nText = %08x %s\\nCount = %08x\\nlpRect = %08x %s\\nuFormat = %08x\\n\" % (arg1,arg2,pydbg.get_unicode_string(text),arg3,arg4,lprect,arg5)\n   return DBG_CONTINUE\n\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.attach(2708)\nDrawTextW = dbg.func_resolve(\"user32\", \"DrawTextW\")\ndbg.bp_set(DrawTextW)\npydbg.debug_event_loop(dbg)\n</code></pre>\n<p>and an output for calc.exe (uses DrawTextW not A)</p>\n<p>C:\\Python27\\Lib\\site-packages&gt;python calc.py</p>\n<pre><code>hDc = 48010f0d\nText = 000b85fe Sta\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 4b010f0d\nText = 000b85fe Sta\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 6c010ea9\nText = 000b8668 tan\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 79010ea9\nText = 000b8668 tan\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 7c010f0d\nText = 000b8688 x^2\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 8e010f0d\nText = 000b8688 x^2\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = ab010ea9\nText = 000b869e 1/x\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = bf010ea9\nText = 000b869e 1/x\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n</code></pre>\n<p>if you want to change to ollydbg </p>\n<p>c:&gt; ollydbg.exe calc.exe</p>\n<pre><code>alt+e -&gt; select calc.exe -&gt; ctrl+N -&gt;Start typing Draw-&gt;select and rightclick -&gt;follow import in disassembler -&gt;shift + f4-&gt; enable radio log function arguments to always \nleave all else to default and hit ok and f9 to run the exe\n</code></pre>\n<p>ollydbg will log all the arguments (you can selectively log only args you want also)\nlike  log only if hDc = XXX and Text == X^2 and Uformat != y </p>\n<p>a sample output from ollydbg running calc.ex and loggging function arguments to DrawTextW</p>\n<pre><code>7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = DA011041\n             Text = \"Sta\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = DB010B34\n             Text = \"Ave\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = A0010D69\n             Text = \"Sum\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n</code></pre>\n<p>With windbg do this </p>\n<pre><code>bp USER32!DrawTextW \".printf \\\"Text=%mu\\\\nRect.L=%x\\\\nRect.R=%x\\\\n\\\",poi(esp+8),poi(poi(esp+10)+8),poi(poi(esp+10)+c);gc\"\n</code></pre>\n<p>windbg conditinal bp output</p>\n<pre><code>0:001&gt; g\nText=F-E\nRect.L=24\nRect.R=1d\nText=dms\nRect.L=24\nRect.R=1d\nText=sin\nRect.L=24\nRect.R=1d\nText=cos\nRect.L=24\nRect.R=1d\nText=tan\nRect.L=24\nRect.R=1d\nText=(\nRect.L=24\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 22, 2013 at 8:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}