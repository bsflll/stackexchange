{
    "title": "Different basic block count when running application several times",
    "link": "https://reverseengineering.stackexchange.com/questions/11304/different-basic-block-count-when-running-application-several-times",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been testing DynamoRio and <a href=\"https://github.com/ea/minblox\" rel=\"nofollow\">minblox</a> to do coverage analysis, and I've got a question, when I run a the bbcount sample on ping.exe (not passing parameters) several times, I get different count of basic blocks and I'm not changing anything.</p>\n<p>The same happens with bbcoverage/minblox, I get different traces, for example with 100 runs, I get only 44 traces that are exactly the same, the others are quite different (extra/missing blocks). </p>\n<p>I also tried with this trivial program:</p>\n<pre><code>int main(int argc, char* argv[]) {\n    return 0;\n}\n</code></pre>\n<p>The bbcount still produces different outputs, it may change less but it still does:</p>\n<pre><code>Instrumentation results:\n     14075 basic block executions\n       528 basic blocks needed flag saving\n      1109 basic blocks did not\n\nInstrumentation results:\n     14075 basic block executions\n       529 basic blocks needed flag saving\n      1108 basic blocks did not\n\nInstrumentation results:\n     14159 basic block executions\n       529 basic blocks needed flag saving\n      1108 basic blocks did not\n</code></pre>\n<p>Is this behavior expected? I'm testing on Windows with ASLR disabled (using EMET).</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "141",
    "tags": [
        "dynamic-analysis",
        "dynamorio"
    ],
    "user": "fms",
    "time": "Nov 11, 2015 at 14:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This behaviour is expected.</p>\n<p>For <em>ping</em>, the execution trace largely depends on the network at any given run. If one ping succeeds in 0.1 ms there is no guarantee that the next will also succeed within the same time. </p>\n<p>Ping uses non-blocking IO to receive datagrams over the network. This means it will make repeated tries before bailing out. Correspondingly, you would get different execution traces for those runs.</p>\n<p>For reference, here is the relevant <a href=\"https://github.com/mirror/reactos/blob/master/reactos/base/applications/network/ping/ping.c\" rel=\"nofollow\">source</a> snippet of ping taken from ReactOS.</p>\n<pre><code>/* Expect to receive ICMP echo reply */\nFD_ZERO(&amp;Fds);\nFD_SET(IcmpSock, &amp;Fds);\nTimeval.tv_sec  = Timeout / 1000;\nTimeval.tv_usec = Timeout % 1000;\n\ndo {\n    Status = select(0, &amp;Fds, NULL, NULL, &amp;Timeval);\n    if ((Status != SOCKET_ERROR) &amp;&amp; (Status != 0))\n    {\n        Length = sizeof(From);\n        Status = recvfrom(IcmpSock, Buffer, Size, 0, &amp;From, &amp;Length);\n\n#ifndef NDEBUG\n        printf(\"Received packet\\n\");\n        DisplayBuffer(Buffer, Status);\n        printf(\"\\n\");\n#endif /* !NDEBUG */\n    }\n    else\n        LostCount++;\n    if (Status == SOCKET_ERROR)\n    {\n        if (WSAGetLastError() != WSAETIMEDOUT)\n        {\n            FormatOutput(IDS_COULD_NOT_RECV, WSAGetLastError());\n            GlobalFree(Buffer);\n            return FALSE;\n        }\n        Status = 0;\n    }\n\n    if (Status == 0)\n    {\n        FormatOutput(IDS_REQUEST_TIMEOUT);\n        GlobalFree(Buffer);\n        return TRUE;\n    }\n\n} while (!DecodeResponse(Buffer, Status, (PSOCKADDR_IN)&amp;From));\n</code></pre>\n</div>",
            "votes": "1",
            "user": "0xec",
            "time": "Nov 11, 2015 at 7:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">It doesn't matter which program you try. I verified myself that even for completely deterministic non trivial programs (i.e., \"ls\"), the number of executed basic blocks varies from execution to execution, with the <i>very same</i> inputs. Indeed, in a fuzzer I wrote using code coverage data, to get a measure of executed basic blocks I get the average between 10 runs instead of only one execution because I know I cannot trust the results of just one execution.</span>",
                    "time": null
                },
                {
                    "user": "fms",
                    "text": "<span class=\"comment-copy\">That's what I meant, thanks @joxeankoret. I was running ping.exe without parameters, so the actual networking code shouldn't have been called at all. I also tried it with a trivial program and the bb count was different too, I'll update my post with the example code I used and bbcount output.</span>",
                    "time": null
                }
            ]
        }
    ]
}