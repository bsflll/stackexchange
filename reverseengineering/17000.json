{
    "title": "Debugging and profiling directx 9 calls?",
    "link": "https://reverseengineering.stackexchange.com/questions/17000/debugging-and-profiling-directx-9-calls",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lets say I'm debugging a game which I don't have the src code. This game was built with directx 9 and I want to dig into the more low-level stuff around it. I already did some hooks in some dx9 calls such as Present and EndScene to create some nice stuff for the game but I was wondering how people debug this kind of scenario in \"real life\". As almost every dx9 function is a virtual function of a class the analysis of it gets very hard very fast (at least for me) and I find myself lost don't knowing where exactly the functions are being called without debugging, etc. Another thing I was wondering is if it's possible to profile the dx9 calls to know some bottlenecks and stuff.</p>\n<p>Any kind of help will be very appreciated here.\nThanks in advance.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "480",
    "tags": [
        "debugging",
        "virtual-functions"
    ],
    "user": "underthevoid",
    "time": "Dec 19, 2017 at 7:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've used IDA for this, it has ability to load VTBL structures and apply them to the assembler code. So, I could see \"call [IDirect3DSurface9.LockRect]\" instead of \"call dword ptr [edx + 0x64]\"</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Dec 19, 2017 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "underthevoid",
                    "text": "<span class=\"comment-copy\">I`ll take a look at this in a moment, thanks for replying!</span>",
                    "time": null
                }
            ]
        }
    ]
}