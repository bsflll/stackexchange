{
    "title": "How can I disassemble/decompile an immediate value to multiplication/summation of two values with IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/31765/how-can-i-disassemble-decompile-an-immediate-value-to-multiplication-summation-o",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is it possible to force <a href=\"https://en.wikipedia.org/wiki/Interactive_Disassembler\" rel=\"nofollow noreferrer\">IDA</a> to show \"5 * 20\" instead of \"100\" in the below disassembled and decompiled lines?</p>\n<pre class=\"lang-none prettyprint-override\"><code>MOV     R1, #100  -&gt;  MOV     R1, #(5 * 20)\nLDR     R8, =var  |   LDR     R8, =var\nSTR     R1, [R8]  |   STR     R1, [R8]\n</code></pre>\n<p>Corresponding decompiled code:</p>\n<pre class=\"lang-none prettyprint-override\"><code>var = 100;        -&gt;  var = 5 * 20;\n</code></pre>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "657",
    "tags": [
        "ida",
        "disassembly",
        "decompilation",
        "arm"
    ],
    "user": "E.A",
    "time": "Apr 12, 2023 at 10:12",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">@rce It's not a stupid question. As I read it, the question is about how to ask IDA to show an operand (in the disassembly) or an expression (in the decompilation) in an alternative fashion, as a form of annotation to aid in comprehension. This is not that much different from displaying a constant as an enum element. And as my answer illustrates, it is in fact possible to do this. Everybody else seems to have interpreted the question as being how to undo compiler optimizations instead of a question about how to annotate the database.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Right-click on the operand, click \"Manual...\", enter the string \"5 * 20\". Note that this only works in the disassembly listing, and that there is no comparable functionality in the decompilation.</p>\n</div>",
            "votes": "5",
            "user": "Rolf Rolles",
            "time": "Apr 11, 2023 at 19:48",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>At the assembly level, IDA reconstructs the instructions as seen in memory.</p>\n<p>Constant multiplication adds an overhead of at least one additional instruction (like <a href=\"https://developer.arm.com/documentation/dui0068/b/ARM-Instruction-Reference/ARM-multiply-instructions/MUL-and-MLA\" rel=\"nofollow noreferrer\">MUL or MLA</a> for ARM CPUs); when a compiler detects two constants being multiplied in source code, the result is usually calculated at compile time and used as a single constant in the compiled binary.</p>\n<p>If the compiler optimized your code by replacing <code>5 * 20</code> with <code>100</code>, there isn't any way for IDA to disassemble or decompile it differently. In such a case that information has been lost during compilation and only exists in the application's source code.</p>\n<p>Assuming ARM architecture and a <a href=\"https://en.wikipedia.org/wiki/Endianness#Little-endian\" rel=\"nofollow noreferrer\">little-endian</a> CPU like <a href=\"https://en.wikipedia.org/wiki/TI_MSP430\" rel=\"nofollow noreferrer\">TI MSP430</a>, the first instruction,</p>\n<pre><code>MOV R1, #100\n</code></pre>\n<p>would produce <a href=\"https://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=mov+r1%2C+%23100&amp;arch=arm&amp;as_format=inline#assembly\" rel=\"nofollow noreferrer\">the following opcodes</a>:</p>\n<pre><code>\\x64\\x10\\xa0\\xe3\n</code></pre>\n<p>If that is the case for you, you need to recompile the program with different compiler settings or use a different compiler to exclude compilation-time optimizations.</p>\n<p>You can enable the view of opcodes in IDA with\n<em>Options/General/Disassembly</em> → <em>Number of opcode bytes (non-graph)</em>.</p>\n</div>",
            "votes": "1",
            "user": "Peter Mortensen",
            "time": "Apr 13, 2023 at 0:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">ida or you after you lost your source looking at the disassembly 10 years later wouldnt be able to tell if 100 was 1+99 or 200-100 Or 1000/10 or 10*10 or 5*20</span>",
                    "time": null
                },
                {
                    "user": "Michael Karcher",
                    "text": "<span class=\"comment-copy\">@blabb While you likely don't know whether it was <code>5 * 20</code> in the source code, you very much can determine during reverse engineering that <code>5 * 20</code> helps understanding the disassembly, and prefer to have it printed that way. The \"manual operand\" feature is meant for exactly this case. On the most common assemblers, IDA is even able to verify that your manually entered operand expression matches the value found in the machine code. Features like this make IDA an <i>Interactive</i> Dis-Assembler and IMHO are a significant reason why IDA use is so wide-spread.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@MichaelKarcher you mean if there is a hardcoded 0x100 then you can discern its  origin back to its components   using the disassembly</span>",
                    "time": null
                },
                {
                    "user": "E.A",
                    "text": "<span class=\"comment-copy\">@blabb Yes exactly, if there is a hard-coded 100 in disassembly then a reverse engineer can (maybe must) resolve it to \"1 + 99\",  \"4 * 25\",  \"(23 * 2) + 11 + 43\", and so on. As an example consider a situation that the variable \"var\" with immediate value 100 is compared with another variable that holds a temperature sensor value in disassembly. From its datasheet you know sensor is reporting the read temperature in \"4X °C\" format. Now the mysterious value \"100\" became the friendly \"4 * 25\" which means the original code was comparing the sensor value with 25 °C.</span>",
                    "time": null
                },
                {
                    "user": "Eph",
                    "text": "<span class=\"comment-copy\">@blabb it's impossible to <i>know</i> what the original source had for the constant from the disassembly, but it doesn't really matter. If 5*20 makes the code more legible and understandable it's better to decompile it to that regardless of what the original source code had. It may even be an improvement over the original source code.</span>",
                    "time": null
                }
            ]
        }
    ]
}