{
    "title": "Problem with set of instructions in dissasembly",
    "link": "https://reverseengineering.stackexchange.com/questions/24967/problem-with-set-of-instructions-in-dissasembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>first of all I'm new to reverse engineering so here's a noob question hahaha, I'm trying to solve a crackme and I found this set of instructions:\n<a href=\"https://i.sstatic.net/ENhwN.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ENhwN.png\"/></a></p>\n<p>Why would it move the content of eax into cd:strLength and then do in the inverse way? It doesn't make much sense to me... I would appreciate any help. Thank you all for you time.</p>\n<p>Also, I can't find the value of offset _Z3strB5cxx11, is it because it's a relocation and its value won't be resolved until the dynamic linker resolves it during runtime or am I going crazy? Thanks for your time. </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "90",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "sbluff",
    "time": "May 10, 2020 at 9:48",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">it is deep copy and possibly unoptimized debug build for src like int csstring = strlen(blah) if  csstring == 3 so it saves len to variable cstring and then compares the variable cstring with constant and right click on the zn and look or look at start of function for offset</span>",
            "time": null
        },
        {
            "user": "progopis",
            "text": "<span class=\"comment-copy\">It's not an \"int\", due to the jbe instruction, it's definitely \"size_t\" or \"unsgined int\".</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The compiler creates the code block by block, each line of the source code can correspond to one or several blocks. In the case of optimized code, sometimes several blocks of source code can turn into one.</p>\n<p>This basic block of code can be divided into the following logical blocks</p>\n<pre><code>; block #1\nmov edi, offset _Z3strB5cxx11\ncall basic_string::length() ; // sorry I'm too lazzy to type the correct function name\nmov cs:strLength, eax\n; block #2\nmov eax, cs:strLength\ncmp eax, 3\njbe loc_4011C6 ; // below-or-equal, unsigned operation, so cs:strLength is of type size_t\n</code></pre>\n<p>First block stores result of basic_string::length() in the global variable. The second block is produced from \"if\" statement. So the source code looks like that:</p>\n<pre><code>size_t strLength; // global variable\n...\nvoid someFunc() {\n  ...\n  strLength = str.length(); // block #1\n  if (strlength &lt;= 3) { // block #2\n    // statements at the address 0x4011C6\n  }\n  // statements after jbe\n  ...\n}\n</code></pre>\n<p>Optimization flags -O1, -O2, -O3 will remove the extra move operation.</p>\n<p>About your second question. First of all let's check the demangled name (I used <a href=\"https://demangler.com/\" rel=\"nofollow noreferrer\">https://demangler.com/</a>). It's equal to the 'str[abi:cxx11]'. The ABI is stands for the application binary interface. It is necessary to link 2 or more binary modules. I donâ€™t see the whole code, but by string object name I can guess you can't see it's value, cause it's external std::string. It's value should be analyzed in other module (other DLL or EXE file). So, it's not global variable only, but exported or imported value (in C++ with 'extern' keyword).</p>\n</div>",
            "votes": "2",
            "user": "progopis",
            "time": "May 10, 2020 at 11:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}