{
    "title": "Understanding gdb output",
    "link": "https://reverseengineering.stackexchange.com/questions/16521/understanding-gdb-output",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I was messing with gdb and came across something rather interesting. I ran the following code into gdb:</p>\n<pre><code>int i, g = 1;\nfor (i = 0; i &lt; 100; i++)\n          g++;\n</code></pre>\n<p>Before execution, <strong>disas main</strong> yields:</p>\n<pre><code>   0x000000000000064a &lt;+0&gt;: push   %rbp\n   0x000000000000064b &lt;+1&gt;: mov    %rsp,%rbp\n   0x000000000000064e &lt;+4&gt;: sub    $0x10,%rsp\n   0x0000000000000652 &lt;+8&gt;: movl   $0x1,-0x4(%rbp)\n   0x0000000000000659 &lt;+15&gt;:    movl   $0x0,-0x8(%rbp)\n   0x0000000000000660 &lt;+22&gt;:    jmp    0x66a &lt;main+32&gt;\n   0x0000000000000662 &lt;+24&gt;:    addl   $0x1,-0x4(%rbp)\n   0x0000000000000666 &lt;+28&gt;:    addl   $0x1,-0x8(%rbp)\n   0x000000000000066a &lt;+32&gt;:    cmpl   $0x63,-0x8(%rbp)\n   0x000000000000066e &lt;+36&gt;:    jle    0x662 &lt;main+24&gt;\n   0x0000000000000670 &lt;+38&gt;:    mov    -0x4(%rbp),%eax\n   ...\n</code></pre>\n<p>Interestingly, after <strong>run</strong>, things look different:</p>\n<pre><code>   0x000055555555464a &lt;+0&gt;: push   %rbp\n   0x000055555555464b &lt;+1&gt;: mov    %rsp,%rbp\n   0x000055555555464e &lt;+4&gt;: sub    $0x10,%rsp\n   0x0000555555554652 &lt;+8&gt;: movl   $0x1,-0x4(%rbp)\n   0x0000555555554659 &lt;+15&gt;:    movl   $0x0,-0x8(%rbp)\n   0x0000555555554660 &lt;+22&gt;:    jmp    0x55555555466a &lt;main+32&gt;\n   0x0000555555554662 &lt;+24&gt;:    addl   $0x1,-0x4(%rbp)\n   0x0000555555554666 &lt;+28&gt;:    addl   $0x1,-0x8(%rbp)\n   0x000055555555466a &lt;+32&gt;:    cmpl   $0x63,-0x8(%rbp)\n   0x000055555555466e &lt;+36&gt;:    jle    0x555555554662 &lt;main+24&gt;\n   0x0000555555554670 &lt;+38&gt;:    mov    -0x4(%rbp),%eax\n   ...\n</code></pre>\n<p>What is going on here? Why the addresses are different before execution?</p>\n<p>Edit:</p>\n<p>Output of <strong>info proc mappings</strong>:</p>\n<pre><code>      Start Addr           End Addr       Size     Offset objfile\n  0x555555554000     0x555555555000     0x1000        0x0 /tmp/test\n  0x555555754000     0x555555755000     0x1000        0x0 /tmp/test\n  0x555555755000     0x555555756000     0x1000     0x1000 /tmp/test\n  0x7ffff7a21000     0x7ffff7bcf000   0x1ae000        0x0 /usr/lib/libc-2.26.so\n  0x7ffff7bcf000     0x7ffff7dce000   0x1ff000   0x1ae000 /usr/lib/libc-2.26.so\n  0x7ffff7dce000     0x7ffff7dd2000     0x4000   0x1ad000 /usr/lib/libc-2.26.so\n  0x7ffff7dd2000     0x7ffff7dd4000     0x2000   0x1b1000 /usr/lib/libc-2.26.so\n  0x7ffff7dd4000     0x7ffff7dd8000     0x4000        0x0 \n  0x7ffff7dd8000     0x7ffff7dfd000    0x25000        0x0 /usr/lib/ld-2.26.so\n  0x7ffff7fcc000     0x7ffff7fce000     0x2000        0x0 \n  0x7ffff7ff7000     0x7ffff7ffa000     0x3000        0x0 [vvar]\n  0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vdso]\n  0x7ffff7ffc000     0x7ffff7ffd000     0x1000    0x24000 /usr/lib/ld-2.26.so\n  0x7ffff7ffd000     0x7ffff7ffe000     0x1000    0x25000 /usr/lib/ld-2.26.so\n  0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 \n  0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]\n  0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]\n</code></pre>\n<p><strong>maint info section</strong>:</p>\n<pre><code>file type elf64-x86-64.\n [0]     0x00000238-&gt;0x00000254 at 0x00000238: .interp ALLOC LOAD READONLY DATA HAS_CONTENTS\n [1]     0x00000254-&gt;0x00000274 at 0x00000254: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS\n [2]     0x00000274-&gt;0x00000298 at 0x00000274: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS\n [3]     0x00000298-&gt;0x000002b4 at 0x00000298: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS\n [4]     0x000002b8-&gt;0x00000360 at 0x000002b8: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS\n [5]     0x00000360-&gt;0x000003e4 at 0x00000360: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS\n [6]     0x000003e4-&gt;0x000003f2 at 0x000003e4: .gnu.version ALLOC LOAD READONLY DATA HAS_CONTENTS\n [7]     0x000003f8-&gt;0x00000418 at 0x000003f8: .gnu.version_r ALLOC LOAD READONLY DATA HAS_CONTENTS\n [8]     0x00000418-&gt;0x000004f0 at 0x00000418: .rela.dyn ALLOC LOAD READONLY DATA HAS_CONTENTS\n [9]     0x000004f0-&gt;0x00000508 at 0x000004f0: .rela.plt ALLOC LOAD READONLY DATA HAS_CONTENTS\n [10]     0x00000508-&gt;0x0000051f at 0x00000508: .init ALLOC LOAD READONLY CODE HAS_CONTENTS\n [11]     0x00000520-&gt;0x00000540 at 0x00000520: .plt ALLOC LOAD READONLY CODE HAS_CONTENTS\n [12]     0x00000540-&gt;0x00000702 at 0x00000540: .text ALLOC LOAD READONLY CODE HAS_CONTENTS\n [13]     0x00000704-&gt;0x0000070d at 0x00000704: .fini ALLOC LOAD READONLY CODE HAS_CONTENTS\n [14]     0x00000710-&gt;0x00000718 at 0x00000710: .rodata ALLOC LOAD READONLY DATA HAS_CONTENTS\n [15]     0x00000718-&gt;0x0000074c at 0x00000718: .eh_frame_hdr ALLOC LOAD READONLY DATA HAS_CONTENTS\n [16]     0x00000750-&gt;0x00000840 at 0x00000750: .eh_frame ALLOC LOAD READONLY DATA HAS_CONTENTS\n [17]     0x00200de0-&gt;0x00200de8 at 0x00000de0: .init_array ALLOC LOAD DATA HAS_CONTENTS\n [18]     0x00200de8-&gt;0x00200df0 at 0x00000de8: .fini_array ALLOC LOAD DATA HAS_CONTENTS\n [19]     0x00200df0-&gt;0x00200fd0 at 0x00000df0: .dynamic ALLOC LOAD DATA HAS_CONTENTS\n [20]     0x00200fd0-&gt;0x00201000 at 0x00000fd0: .got ALLOC LOAD DATA HAS_CONTENTS\n [21]     0x00201000-&gt;0x00201020 at 0x00001000: .got.plt ALLOC LOAD DATA HAS_CONTENTS\n [22]     0x00201020-&gt;0x00201030 at 0x00001020: .data ALLOC LOAD DATA HAS_CONTENTS\n [23]     0x00201030-&gt;0x00201038 at 0x00001030: .bss ALLOC\n [24]     0x00000000-&gt;0x00000011 at 0x00001030: .comment READONLY HAS_CONTENTS\n</code></pre>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "gdb",
        "elf"
    ],
    "user": "Trey",
    "time": "Oct 10, 2017 at 6:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Seems like <em><a href=\"https://en.wikipedia.org/wiki/Relocation_(computing)\" rel=\"nofollow noreferrer\">relocation</a></em>. If you look at the addresses in your first listing, you will notice that these addresses are unusually low. That's probably because gdb displays file offsets there (although I have no idea why that is the case for you).</p>\n<p>When you run the file, the loader kicks in and maps the sections to the virtual address space of the program, and thats where the <code>0x0000555555554000</code> section offset comes from. </p>\n<p>You can see the file offsets of each section using <code>maint info sections</code>. You can get information about the actual mapped memory sections using <code>info proc mappings</code> at runtime.</p>\n<p><strong>edit:</strong></p>\n<p>Based on the output of the commands above, everything seems to be alright.</p>\n<pre><code>[12]     0x00000540-&gt;0x00000702 at 0x00000540: .text ALLOC LOAD READONLY CODE HAS_CONTENTS\n</code></pre>\n<p>This line states that the <code>.text</code> section of your code starts at file offset 0x540 and ends at 0x702 containing code. If your compare it with your first disassembly starting at offset 0x64a, this is a decent fit.</p>\n<pre><code>0x555555554000     0x555555555000     0x1000        0x0 /tmp/test\n</code></pre>\n<p>This line states that the executable itself was mapped to the base address <code>0x555555554000</code>. Given the offset from before, that means your main function should be at <code>0x555555554000 + 0x64a</code>. Your second disassembly confirms that.</p>\n</div>",
            "votes": "10",
            "user": "Moshe",
            "time": "Oct 11, 2017 at 5:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Olivier Dulac",
                    "text": "<span class=\"comment-copy\">yes, gdb can't know where the relocation will be at, so before execution it displays from 0x0.</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">another thing is the executable was compiled with -fPIE which activates ASLR on the .text section too</span>",
                    "time": null
                }
            ]
        }
    ]
}