{
    "title": "How i can grab a pointer or hook the process procedure without creating a global hook [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/25374/how-i-can-grab-a-pointer-or-hook-the-process-procedure-without-creating-a-global",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/25374/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2020-07-03 08:02:51Z\">4 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/25374/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>i am trying to hook wndproc in an game, to do that i am injecting a dll into their memory, my problem is i don't wanna do a Global Hook to the wndproc, i want to get a pointer to his procedure to do thing more cleans and stealth. (I am still learning so i am right now a noob into assembly, if you want you can recommend me a good tutorial to learn assembly etc).</p>\n<p><strong>PS: Sorry for my english.</strong></p>\n<p><strong>This is what i mean for Global Hook:</strong></p>\n<pre><code>//Global/Universal Hook example.\n#include &lt;windows.h&gt;\n\nstatic bool bSetup = false;\nWNDPROC oWndProc;\n\nLRESULT WndProc(const HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)\n{\n    //Process messages\n    \n    return CallWindowProc(WindowProc, hWnd, msg, wParam, lParam);\n}\n\nvoid lpMain()//Our dll start here, we do our thing in this function.\n{\n    if (!bSetup)\n    {\n        WindowProc = (WNDPROC)SetWindowLongPtr(HWND, GWLP_WNDPROC, (LRESULT)WndProc);//our Global Hooked Procedure.\n    }\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        CreateThread(nullptr, 0, (LPTHREAD_START_ROUTINE)lpMain, nullptr, 0, 0);//The trhead that call our function and maintain it alive.\n        break;\n    }\n    return TRUE;\n}\n</code></pre>\n<p>Instead of doing it by this way i want to hook it directly by the address/pointer of the target process also i want to avoid the CallWindowProc API call if it possible, i have been searching for the pointer with IDA Pro, x32dbg and Cheat engine but i haven't found it. How i can found a pointer to this? Thank you guys.</p>\n<p><strong>I am injecting a dll to the process to trying to do this.</strong></p>\n<p>Goal-Objective: <strong>The goal is hook the game procedure to use it instead of creating a global hook, also trying to avoid moost WinApi calls to be stealthy, cause anticheats can hook some API Functions and checks if they have been called or edited.</strong></p>\n<p><strong>Example of what i am trying to do (Detour hooking):</strong></p>\n<pre><code>//This is that i want to do.\n#include &lt;windows.h&gt;\n#include \"detour.h\"//Microsoft detours header for hooking.\n#pragma comment(lib, \"detours.lib\");//Microsoft detours library.\n\nstatic bool bSetup = false;\nHWND GameHwnd = (HWND)((uintptr_t)GetModuleHandle(nullptr) + 0xA93158);\n\ntypedef LRESULT(__stdcall* wndProc) (HWND, UINT, WPARAM, lParam);//our prototype.\nwndProc oWindowProc = nullptr;//our function return.\n\n//offsets, pointers, addresses...\nuintptr_t ADDRESS_WNDPROC = (uintptr_t)GetModuleHandle(nullptr) + 0x283C3A;\n\nLRESULT HookedWndProc(const HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)\n{\n    //Process messages\n    \n    return CallWindowProc(oWindowProc, hWnd, msg, wParam, lParam);\n}\n\nvoid lpMain()//Our dll start here, we do our thing in this function.\n{\n    if (!bSetup)//Hook Procedure and other stuff.\n    {\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        \n        DetourAttach(&amp;(LPVOID&amp;)ADDRESS_WNDPROC, &amp;HookedWndProc);\n        \n        DetourTransactionCommit();\n        \n        oWindowProc = (WNDPROC)ADDRESS_WNDPROC;\n        \n        or\n        \n        //oWindowProc = (WNDPROC)SetWindowLongPtr(GameHwnd, GWLP_WNDPROC, (LRESULT)HookedWndProc);//our Global Hooked Procedure.\n        \n        bSetup = true;\n    }\n    \n    //do our things.\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        CreateThread(nullptr, 0, (LPTHREAD_START_ROUTINE)lpMain, nullptr, 0, 0);//The trhead that call our function and maintain it alive.\n        break;\n    }\n    return TRUE;\n}\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "679",
    "tags": [
        "c++",
        "address",
        "pointer"
    ],
    "user": "Mov Eax",
    "time": "4 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Could you please tell us the motivation, i.e. what your <i>actual</i> goal is. Sure, you're giving us a description of a particular path and asking for help, but it would be better if you gave us the context that comes with knowing the actual goal. In general <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexw\" rel=\"nofollow noreferrer\">SetWindowHookEx</a> lets you do plenty and it also causes <i>your</i> DLL to be loaded into the target process (provided bitness matches and so on). The example you show won't work across process boundaries.</span>",
            "time": null
        },
        {
            "user": "Mov Eax",
            "text": "<span class=\"comment-copy\">The goal is hook the game procedure to use it instead of creating a global hook, also trying to avoid moslty WinApi calls to be stealthy, cause anticherats can hook some API Functions and checks if they have been called or edited., Also i am manual mapping so i don't need to inject it with SetWindowsHooks.</span>",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "<span class=\"comment-copy\">Not sure if I understand you correctly. Do you want to obtain address of CallWindowProc?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@morsisko I don't think so. I think the goal is to obtain the wndproc pointer for a given window and basically replace it ... but whether that'll have the desired effect depends on a whole lot of ifs ...</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@MovEax in your own wndproc you'd simply call the address of the original wndproc you obtained, minus those cases where you want to intercept specific messages or so ... no need to call <code>CallWindowProc</code> ... you can expect that the wndproc you replaced is doing that already for you. Oh well, you <i>may</i> want to do it for those messages you intercept and for which you want default handling ... but seems unlikely from your description.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The window procedure  is usually set up per window class via the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/intl/registering-window-classes\" rel=\"nofollow noreferrer\">RegisterClassW</a> or similar. While it can be changed later by <code>SetWindowLongPtr</code>, in practice this is done quite rarely (AFAIK) so most likely the standard class procedure will be used. So:</p>\n<ol>\n<li>Check calls to <code>RegisterClassW</code>/<code>RegisterClassA</code> and extract <code>lpfnWndProc</code> from the class struct</li>\n<li>Hook the procedure and do what you need.</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jun 24, 2020 at 7:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mov Eax",
                    "text": "<span class=\"comment-copy\">That makes sense, ill try that thank you.</span>",
                    "time": null
                }
            ]
        }
    ]
}