{
    "title": "How to run exe program loaded into IDA Pro or Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/32378/how-to-run-exe-program-loaded-into-ida-pro-or-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm new to reverse engineering, just learning. After the exe program is loaded into IDA or Ghidra, how do I run the exe program that loaded into IDA/Ghidra? so I can interact with the exe program? and see what data is loaded into memory and what pseudocode is used.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "assembly",
        "ghidra",
        "idapython",
        "c"
    ],
    "user": "valaGQ237",
    "time": "Nov 16, 2023 at 12:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would recommend not running the program from IDA or Ghidra directly but use a much more powerful debugger like x64dbg. It is a bit annoying to translate between the memory within your debugger and the memory within Ghidra but imho that's well worth it.</p>\n<p>If you are still committed on doing it all within IDA/Ghidra, expect some extra work:</p>\n<ol>\n<li>Ghidra starting in version 10.3 ships with an emulator (see <a href=\"https://medium.com/@cy1337/first-look-ghidras-10-3-emulator-7f74dd55e12d\" rel=\"nofollow noreferrer\">https://medium.com/@cy1337/first-look-ghidras-10-3-emulator-7f74dd55e12d</a> for example). I personally have never used it but it might be worth a shot.</li>\n<li>IDA has a remote debugger that I've successfully used in the past (see <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/1463.shtml\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/idadoc/1463.shtml</a> for example). It basically runs the target executable in a VM for example and your IDA then communicates with it through a network interface (I recommend this setup to not expose your IDA to the malware, in particular if you are debugging with an enable internet connection in your VM).</li>\n<li>There are some tools syncing Ghidra/IDA with x64dbg, it is not sustainable to recommend a particular one because they come and go like feathers in the wind. Google is your friend.</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "born",
            "time": "Oct 17, 2023 at 11:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Could you explain the rationale to recommend <i>against</i> using the debugger in either. There are also emulation frameworks which work with IDA, btw. And it allows you to communicate with a remote using the gdbserver protocol.</span>",
                    "time": null
                },
                {
                    "user": "born",
                    "text": "<span class=\"comment-copy\">Those debuggers are just not the focal point of IDA/Ghidra. While they fundamentally do their job, x64dbg is just <i>far</i> more powerful. That's why I suggest OP familiarizes themselv with it.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Undoubtedly x64dbg specializes in debugging much more than either of the other two tools. But when it comes to the other aspects of RCE, Ghidra and IDA excel and they are able to show pseudocode as was asked. It's that aspect that is lacking from your answer, IMO. I'm not aware that x64dbg would be able to do that. Am I missing something here? Also, those tools to sync across the main RCE tools are indeed nothing to rely on - not just because they often replace each other.</span>",
                    "time": null
                }
            ]
        }
    ]
}