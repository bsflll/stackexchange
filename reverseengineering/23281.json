{
    "title": "Debugging UEFI with real hardware?",
    "link": "https://reverseengineering.stackexchange.com/questions/23281/debugging-uefi-with-real-hardware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>New to this so here we go.  I want to reverse engineer a x86-64 desktop UEFI to add hardware support.</p>\n<p>Since I have the actual hardware available, are there debug interfaces that run via actual hardware &amp; would produce a better output than say...working through HexRays or OllyDbg?</p>\n<p>Along similar lines, are there debuggers than can be fed useful information about the system being emulated? In the case of a UEFI, I'm thinking chipset information, where graphics are coming from, connected components, types of ports, etc.</p>\n<p>Thanks.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "551",
    "tags": [
        "debugging",
        "uefi"
    ],
    "user": "Rook",
    "time": "Feb 18, 2020 at 3:20",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The ideal option is to use a hardware debugger like Intel XDP or Arium, however they are very expensive, available only under NDA and generally require special development boards with populated debug port.</p>\n<p>In the recent platforms, there is a lightweight option of DCI (Direct Connect Interface) available via the USB3 port. In theory it again requires (a little more affordable) Intel hardware like <a href=\"https://designintools.intel.com/Silicon_View_Technology_Closed_Chassis_Adapter_p/itpxdpsvt.htm\" rel=\"nofollow noreferrer\">Closed Chasssis Adapter</a> but some people figured out how to enable it on consumer hardware using <a href=\"https://gist.github.com/eiselekd/d235b52a1615c79d3c6b3912731ab9b2\" rel=\"nofollow noreferrer\">a regular USB3 cable</a>. Once enabled, you can debug the hardware on the lowest level using Intel System Studio.</p>\n<p>Hardware debug alternatives:</p>\n<ul>\n<li>the <a href=\"https://www.serialice.com/\" rel=\"nofollow noreferrer\">SerialICE project</a> allows you to emulate firmware in QEMU and forward hardware accesses to the real hardware via serial port to a small stub running on the target machine.</li>\n<li>the <code>SourceLevelDebugPkg</code> module <a href=\"https://github.com/tianocore/edk2/tree/master/SourceLevelDebugPkg\" rel=\"nofollow noreferrer\">from EDK2</a> can, despite the name, be used to debug even firmware without source code info. Follow the <a href=\"https://github.com/night199uk/edk2-gdb-server\" rel=\"nofollow noreferrer\">directions here</a>.</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 18, 2020 at 8:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sparkette",
                    "text": "<span class=\"comment-copy\">Why is it under NDA?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@flarn2006 Iâ€™m not sure but Intel loves NDAs</span>",
                    "time": null
                }
            ]
        }
    ]
}