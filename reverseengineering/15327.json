{
    "title": "Possible to execute cgi application locally and preserve the permissions?",
    "link": "https://reverseengineering.stackexchange.com/questions/15327/possible-to-execute-cgi-application-locally-and-preserve-the-permissions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This was part of a challenge which is now ended.</p>\n<p>On that server, when the cgi application was called remotely, apache executed it with the permissions of the owner of that binary. So the goal was to abuse those rights with buffer overflow.</p>\n<p>The application had all kinds of protections and in order to execute arbitrary code you had to definitely remove ASLR. The server was old btw so both \"ulimit -s unlimited\" and \"setarch <code>uname -m</code> -R /path/app\" would have effectively achieve the aslr removal. Now where i was stacked was to execute locally the application with the permissions of the owner.</p>\n<p>I think the application didn't have the suid, so apache had to change the euid somehow right?\nIs it possible to get that behavior locally?\nI had btw shell access to the server with the apache user.</p>\n<p>EDIT:\nI just thought that i could create a different directory and add a symlink to the target binary, create the .htaccess (with +ExecCGI) and set the \"ulimit -s unlimited\" on that session. I am not sure if it would have worked though</p>\n<p>Thanks</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "33",
    "tags": [
        "buffer-overflow"
    ],
    "user": "Antonis Paragas",
    "time": "May 11, 2017 at 15:50",
    "comments": [],
    "answers_data": []
}