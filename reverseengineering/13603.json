{
    "title": "Reversing unknown data in hex string",
    "link": "https://reverseengineering.stackexchange.com/questions/13603/reversing-unknown-data-in-hex-string",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a string from job advert (Ethical hacker). I am not planning to candidate to that position. I just would try to resolve puzzle. Can someone suggest directions to look further? (And not yet post full answer for some 2 days). Probably if someone can resolve that puzzle, then they probably will figure out from where that job advert is :).</p>\n<p>The data (my guess that's a hex string):</p>\n<pre><code>7d063a752c3a20753e3b3a2275213d30753734263c36267975363a3a39747c5f5f073026253a3b263c373c393c213c30266f5f7f7505303b30212734213c3a3b75213026213c3b3275343b3175313a362038303b213c3b3275213d3075333c3b313c3b32265f7f750330273c332c752320393b302734373c393c213c3026752730253a2721303175372c753a213d3027265f7f751426263c26217531302330393a25302726753c3b75333c2d3c3b327526303620273c212c75372032265f7f75063d342730752c3a2027753e3b3a22393031323075223c213d75363a39393034322030265f5f1a25253a2721203b3c213c30266f5f7f75193034273b3c3b32753b3022752130363d3b3a393a323c302675372c75213026213c3b3275313c233027263075262c26213038265f7f75063e3c3939752630217531302330393a2538303b2175213d273a20323d75262530363c34393c2f3031752127343c3b3c3b32265f7f75173075347525342721753a337526303620273c212c753c3b363c31303b2175273026253a3b263075213034385f5f02343b2175213a753f3a3c3b7520266a7512302175213d3075363a3b21343621267533273a386f5f3d212125266f7a7a3f3a377b3d61363e7b38307a363a3b213436217a\n</code></pre>\n<p>I tried to convert it to string. Output is like this: <a href=\"https://i.sstatic.net/bNe08.png\" rel=\"nofollow noreferrer\"><img alt=\"Output\" src=\"https://i.sstatic.net/bNe08.png\"/></a>\nIt looks like of some kind of protocol. I also tried to decompress, but that failed and looked at output it does not look like it would be compressed. </p>\n<p>C# program to create string from that data.</p>\n<pre><code>class Program\n    {\n        static string bytearr = \"7d063a752c3a20753e3b3a2275213d30753734263c36267975363a3a39747c5f5f073026253a3b263c373c393c213c30266f5f7f7505303b30212734213c3a3b75213026213c3b3275343b3175313a362038303b213c3b3275213d3075333c3b313c3b32265f7f750330273c332c752320393b302734373c393c213c3026752730253a2721303175372c753a213d3027265f7f751426263c26217531302330393a25302726753c3b75333c2d3c3b327526303620273c212c75372032265f7f75063d342730752c3a2027753e3b3a22393031323075223c213d75363a39393034322030265f5f1a25253a2721203b3c213c30266f5f7f75193034273b3c3b32753b3022752130363d3b3a393a323c302675372c75213026213c3b3275313c233027263075262c26213038265f7f75063e3c3939752630217531302330393a2538303b2175213d273a20323d75262530363c34393c2f3031752127343c3b3c3b32265f7f75173075347525342721753a337526303620273c212c753c3b363c31303b2175273026253a3b263075213034385f5f02343b2175213a753f3a3c3b7520266a7512302175213d3075363a3b21343621267533273a386f5f3d212125266f7a7a3f3a377b3d61363e7b38307a363a3b213436217a\";\n        static void Main(string[] args)\n        {\n            byte[] b = StringToByteArray(bytearr);\n            string s = System.Text.Encoding.UTF8.GetString(b);\n            File.WriteAllBytes(\"output.bin\", b);\n            Console.WriteLine(\"{0}\", s);\n            Console.ReadLine();\n        }\n\n        public static byte[] StringToByteArray(String hex)\n        {\n            int NumberChars = hex.Length;\n            byte[] bytes = new byte[NumberChars / 2];\n            for (int i = 0; i &lt; NumberChars; i += 2)\n                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n            return bytes;\n        }\n    }\n</code></pre>\n<p><strong>Update.</strong></p>\n<p>Thanks to <a href=\"https://reverseengineering.stackexchange.com/users/2318/w-s\">@w s</a> for hints. Today I resolved puzzle. It took 5 to 6 hours. </p>\n<p>So, the answer ...</p>\n<p>First I googled around and found <a href=\"https://digital-forensics.sans.org/blog/2013/05/14/tools-for-examining-xor-obfuscation-for-malware-analysis\" rel=\"nofollow noreferrer\">this</a> article. Then I tried XORSearch. After that I got next challenge. I do not post it here but that was web login form. So, I should guess username and password. Luckily in that form was sql injection vulnerability. After successful login it displayed QR code as PNG image. Of course I cannot decode it with scanner. So, I tried various steganography tools. Unsuccessful. Tried more various tools and then I realized that I am digging too deep. Then I printed that QR code. Looked on it couple of minutes. Tried various online QR decoders. All they failed. Googled about QR code error corrections and broken QR code recovery. Found <a href=\"http://datagenetics.com/blog/november12013/index.html\" rel=\"nofollow noreferrer\">this site</a>. On three corners must be square blocks to identify and then align the code. For my image they did'n. </p>\n<p><a href=\"https://i.sstatic.net/7sAV2.png\" rel=\"nofollow noreferrer\"><img alt=\"QR code (some part removed)\" src=\"https://i.sstatic.net/7sAV2.png\"/></a> \nI deleted some part of QR code.</p>\n<p>So I took black pencil and colored my printed QR code. Tried to scan it. Scanner made one successful scan. But it was some numbers. After I again looked at printed QR code I realized that it looks bad. Then I realized that QR code must reverse colors. And volƒÅ. It now looks like normal QR and scanner successfully scanned it. In that picture was another link to text file, where was job contact details. </p>\n<p>P.S The only think that I not fully understood is XOR`ing part. But I tried to study that :).</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "hex"
    ],
    "user": "Guntis",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">read about exclusive or operation</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is an encrypted message (hex-encoded, your guess is correct). The cipher is very weak.\nAs far as I understand there is at least one more additional challenge after this one.</p>\n<p>If you want to learn more about working with challenges like this I'd suggest you to try <a href=\"https://cryptopals.com/\" rel=\"nofollow\">\"Matasano crypto challenges\"</a>.</p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Sep 28, 2016 at 10:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}