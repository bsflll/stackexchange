{
    "title": "Reuse symbols in disassembling/reassembling a C++ program",
    "link": "https://reverseengineering.stackexchange.com/questions/8172/reuse-symbols-in-disassembling-reassembling-a-c-program",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>it's me again. I am working on a tool can that disassemble/reassemble stripped binaries and now I am sucked in a (external) symbol reuse issue.</p>\n<p>The test is on 32-bit Linux x86 platform. </p>\n<p>Suppose I am working on a C++ program, in the <code>GCC</code> compiler produced assembly code, there exists some instructions like this:</p>\n<pre><code>call    _ZNSt8ios_baseC2Ev\nmovl    _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+4, %ebx\nmovb    $0, 312(%esp)\nmovl    _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+8, %ecx\n....\n</code></pre>\n<p>Please pay special attention to symbol <code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code>.</p>\n<p>After the compilation, suppose I get an <code>unstripped</code> binary, and i checked this symbol like this:</p>\n<pre><code>readelf -s a.out | grep \"_ZTTSt14basic\"\n69: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\n72: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS@GLIBCXX_3.4 (3)\n705: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS\n1033: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS\n</code></pre>\n<p>See, this is my first question, <strong>why the name of symbol <code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code> modified to <code>_ZTTSt14basic_ifstreamIcS</code> and <code>_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)</code> ?</strong> </p>\n<p>What is <code>_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)</code> though?</p>\n<p>Then I stripped the binary like this:</p>\n<pre><code>strip a.out\nreadelf -s a.out | grep \"_ZTTSt14basic\"\n69: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\n72: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS@GLIBCXX_3.4 (3)\n</code></pre>\n<p>Then after I disassemble the binary, and the corresponding disassembled assembly instructions are :</p>\n<pre><code> 8063ee7:       e8 84 54 fe ff          call   8049370 &lt;_ZNSt8ios_baseC2Ev@plt&gt;\n 8063eec:       8b 1d 94 73 0a 08       mov    0x80a7394,%ebx\n 8063ef2:       c6 84 24 38 01 00 00    movb   $0x0,0x138(%esp)\n 8063ef9:       00\n 8063efa:       8b 0d 98 73 0a 08       mov    0x80a7398,%ecx\n</code></pre>\n<p>At this point we can figure out that 0x80a7394 equals to <code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+4</code>. </p>\n<p>In order to reuse these instructions, I modified the code:</p>\n<pre><code>call _ZNSt8ios_baseC2Ev\nmov _ZTTSt14basic_ifstreamIcS+4,%ebx\nmovb $0x0,0x138(%esp)\nmov _ZTTSt14basic_ifstreamIcS+8,%ecx\n</code></pre>\n<p>And did some update like these (please see this <a href=\"https://stackoverflow.com/questions/28355292/how-to-load-library-defined-symbols-to-a-specified-location\">question</a> for reference):</p>\n<pre><code>echo \"\"_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\" = 0x080a7390;\" &gt; symbolfile\ng++ -Wl,--just-symbols=symbolfile  final.s\n\nreadelf -s a.out | grep \"_ZTTSt14basic\"\n\n3001: 080a7390     0 NOTYPE  LOCAL  DEFAULT   27 _ZTTSt14basic_ifstreamIcS\n8412: 080a7390     0 NOTYPE  GLOBAL DEFAULT  ABS _ZTTSt14basic_ifstreamIcS\n</code></pre>\n<p>I debugged the newly produced binary, and to my surprise, in the newly produced binary, symbol <code>_ZTTSt14basic_ifstreamIcS</code> does not get any value after the function call of <code>_ZNSt8ios_baseC2Ev</code>, while in the original binary, after the function call, <code>_ZTTSt14basic_ifstreamIcS</code> do get some memory address referring to library section.  Which means:</p>\n<pre><code>call _ZNSt8ios_baseC2Ev\nmov _ZTTSt14basic_ifstreamIcS+4,%ebx  &lt;--- %ebx gets zero!\nmovb $0x0,0x138(%esp)\nmov _ZTTSt14basic_ifstreamIcS+8,%ecx  &lt;--- %ecx gets zero!\n</code></pre>\n<p>I must state that in these lines of the original binary, registers %ebx and %ecx both gets some addresses referring to the libc section. </p>\n<p>This is my second question, why does symbol <code>_ZTTSt14basic_ifstreamIcS</code> didn't get any value after function call <code>_ZNSt8ios_baseC2Ev</code>? I also tried with symbol name <code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code>. But that does not work also.</p>\n<p>Am I clear enough? Could anyone save my ass? thank you!</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "298",
    "tags": [
        "disassembly",
        "assembly",
        "elf",
        "symbols",
        "reassembly"
    ],
    "user": "lllllllllllll",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>old question, but I think I can answer a part of it</p>\n<blockquote>\n<p>why the name of symbol _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE\n  modified to _ZTTSt14basic_ifstreamIcS</p>\n</blockquote>\n<p>I think you've just run into as terminal width limit. By default <code>readelf</code> limits output lines to 80 characters, you neeed to pass <code>-W</code> to disable it:</p>\n<pre><code>-W --wide              Allow output width to exceed 80 characters\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 16, 2017 at 13:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}