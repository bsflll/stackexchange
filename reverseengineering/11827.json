{
    "title": "Breaking on specific API",
    "link": "https://reverseengineering.stackexchange.com/questions/11827/breaking-on-specific-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wish to set a breakpoint on a call to a specific windows API function, e.g.-\nRegQueryValueExA()</p>\n<p>It is resolved at runtime in unknown stage of malware execution, and I wish to initiate manual debugging after this API is called.</p>\n<p>Is there an easy way other from detecting the moment it is resolved?\nI have some other lazy-ass solutions but I guess that there's  a proper approach to this issue.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "648",
    "tags": [
        "debugging",
        "winapi",
        "breakpoint"
    ],
    "user": "GalB1t",
    "time": "Jan 23, 2016 at 12:09",
    "comments": [
        {
            "user": "farmdve",
            "text": "<span class=\"comment-copy\">There are a few ways for an application to fetch this API. One is obviously in the import table, and Windows does the job for you. The other is with GetProcAddress in which case you need to know the number of arguments and types beforehand and finally, this is the most interesting of them all.  Using fs:[0x30] to get the address of the PEB and accessing it's Ldr member which is structure of type PEB_LDR_DATA which contains lists to all loaded modules, and then you can manually parse the module in question and checking the exports by name and fetching the address of the function.</span>",
            "time": null
        },
        {
            "user": "farmdve",
            "text": "<span class=\"comment-copy\">It might also be possible to read the registry using syscalls in which case you need the lower level functions.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It sounds like you're asking two questions here:</p>\n<ol>\n<li>How to have your debugger break when <code>RegQueryValueExA()</code> is called?</li>\n<li>How to have your debugger break when the address for <code>RegQueryValueExA</code> is resolved?</li>\n</ol>\n<p>For <strong>#1</strong>, you can just set a breakpoint on the first instruction of <code>advapi32!RegQueryValueExA</code>. Consult your debugger's documentation for how to set breakpoints.</p>\n<p>For <strong>#2</strong>, you'd need to do the following:</p>\n<ol>\n<li>Find the index of <code>RegQueryValueExA</code> in the <code>AddressOfNames</code> array from <code>advapi32.dll</code>'s <code>IMAGE_EXPORT_DIRECTORY</code>.</li>\n<li>Set a hardware-read breakpoint on the corresponding index in the <code>AddressOfFunctions</code> array from <code>advapi32.dll</code>'s <code>IMAGE_EXPORT_DIRECTORY</code>.</li>\n<li>When the hardware breakpoint gets hit, examine the callstack to see if the address of <code>RegQueryValueExA</code> was being resolved by code in your target module. If not, wait until the breakpoint is hit again and check again. Otherwise, you've found the code in your target module that resolves <code>RegQueryValueExA</code>.</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Jan 23, 2016 at 15:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">for #2, for which the malware is loading advapi32.dll dynamically, he'll have to break on the return from LoadLibrary first, in order to get the base address.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@peterferrie: Correct. Or he could configure his debugger to break on new DLLs getting loaded.</span>",
                    "time": null
                }
            ]
        }
    ]
}