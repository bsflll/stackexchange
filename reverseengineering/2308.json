{
    "title": "Decompiling return-oriented programs",
    "link": "https://reverseengineering.stackexchange.com/questions/2308/decompiling-return-oriented-programs",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How are <a href=\"http://cseweb.ucsd.edu/~hovav/talks/blackhat08.html\">return-oriented programs</a> decompiled/reverse engineered ?</p>\n<p>Any pointers to any papers or reports would be appreciated.</p>\n</div>",
    "votes": "9",
    "answers": 2,
    "views": "386",
    "tags": [
        "decompilation",
        "exploit"
    ],
    "user": "debray",
    "time": "Jun 21, 2013 at 12:00",
    "comments": [
        {
            "user": "cb88",
            "text": "<span class=\"comment-copy\">I think it would be helpful if you included more that you already do know about return oriented programs directly in your question. I would imagine that at the very least you could debug such a program in bochs... it would seem that following program flow through the gadgets is non trivial but I could be wrong about that...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might be interested in the Dr. Gadget IDAPython script (screenshots <a href=\"http://www.openrce.org/blog/view/1570/Dr._Gadget_IDAPython_plugin\">here</a>, code <a href=\"https://github.com/patois/DrGadget\">here</a>).</p>\n<blockquote>\n<p>This little IDAPython plugin helps in writing and analyzing return oriented payloads. It uses IDA's custom viewers in order to display an array of DWORDs called 'items', where an item can be either a pointer to a gadget or a simple 'value'.</p>\n</blockquote>\n</div>",
            "votes": "7",
            "user": "asheeshr",
            "time": "Jun 21, 2013 at 9:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">Thanks for the pointer: I didn't know about Dr. Gadget, but will definitely check it out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>reverse engineering ROP is like normal RE but i recommend to do Dynamic analysis ROP is from my point of view all about ESP , so you faster way to undersand what the ROP code is doing is find Pivot (to get control of ESP) or start of ROP put a breakpoint on it and trace the stack then you can easily understand which functions are getting called and what the ROP code is really doing so key Point to understand the ROP is Stack. </p>\n</div>",
            "votes": "1",
            "user": "n00b",
            "time": "Jun 21, 2013 at 8:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">I'm just pointing this out but this is only a valid answer on x86. Of course most such software is x86 but its possible to do ROP on ARM as well for instance.</span>",
                    "time": null
                },
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">My thanks to everyone for their answers.  I'm leaning towards dynamic analysis myself (as suggested by n00b), but I'll certainly check out the Dr. Gadget script that Rolf mentioned.</span>",
                    "time": null
                },
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">@cb88 It's only x86-specific because he referred to <code>ESP</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}