{
    "title": "Function Hooking via Dll Injection Negative Offset",
    "link": "https://reverseengineering.stackexchange.com/questions/22321/function-hooking-via-dll-injection-negative-offset",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some code that hooks a function via dll injection. The code works fine but i'm a little perplexed as to how it works. The code needs to calculate the offset from the function that i'm going to hook to the hooked function. It works perfectly but i've noticed that sometimes the offset is positive and sometimes it's negative (e.g. m_hkFuncAddr &lt; m_hkAddr). Sometimes my dll is loaded before the address i'm trying to hook and sometimes it is after (I check using a utility called vmmap if that means anything). Regardless, it will work. But if I reverse the two, it's a guaranteed crash, regardless of where my dll is placed. </p>\n<p><code>dwhkRelative = (((DWORD)m_hkFuncAddr - (DWORD)m_hkAddr) - 5);</code></p>\n<p>Why is it that when I reverse the two it crashes, but when it's a negative offset, it works fine? Thanks in advance!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "283",
    "tags": [
        "function-hooking",
        "dll-injection",
        "virtual-memory"
    ],
    "user": "user192148",
    "time": "Oct 16, 2019 at 20:44",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Please add details on what's <code>m_hkFuncAddr</code> and <code>m_hkAddr</code></span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What do you do with dwhkRelative?</span>",
            "time": null
        },
        {
            "user": "user192148",
            "text": "<span class=\"comment-copy\">Sorry I should have elaborated more. m_hkFuncAddr is the address of the function in my Dll that i'm injecting where I want the hook to jump to. m_hkAddr is the address of the function I want to hook. dwhkRelative is the relative offset between the two. I calculate the offset and place a relative jmp instruction (0xE9) at m_hkAddr and then one byte after that that I place dwhkRelative. It works perfectly but I don't understand how or why when m_hkFuncAddr is less than m_hkAddr.</span>",
            "time": null
        },
        {
            "user": "Kaldaien",
            "text": "<span class=\"comment-copy\">Why does this matter? DLLs do sometimes have preferred base addresses (especially the ones that ship with Windows), but this stuff is all negotiable and your address space is going to be swiss cheese eventually after DLLs load/unload and perform init. If you reverse the two, you are jumping to a completely unrelated address. Why wouldn't it crash?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>jmp</code> instruction with opcode 0xE9 uses a 32bit signed integer as its parameter.</p>\n<p>This parameter is added to the address of the instruction <strong>after</strong> the <code>jmp</code> instruction to calculate the final address. It is allowed to be negative which is the case when your hook address is less than your hooked function's address.</p>\n<p>As to why swapping them around crashes - it calculates the wrong number. It would calculate <code>What do I have to add to the hook address to get to the hooked function's address</code> which is the other way round.</p>\n</div>",
            "votes": "0",
            "user": "Johann Aydinbas",
            "time": "Oct 24, 2019 at 1:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}