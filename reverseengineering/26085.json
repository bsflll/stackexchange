{
    "title": "How to watch a function's local variable in GDB?",
    "link": "https://reverseengineering.stackexchange.com/questions/26085/how-to-watch-a-functions-local-variable-in-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a 64bit binary  with gdb &amp; <a href=\"https://github.com/longld/peda\" rel=\"nofollow noreferrer\">peda</a> and I've identified a function of interest (probably encoding user input). I want to watch the function <code>interesting</code>'s  local variable <code>arg1</code>.</p>\n<p>How can I watch a local variable of a known function in gdb?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "gdb",
        "local-variables"
    ],
    "user": "ChocolateOverflow",
    "time": "Oct 8, 2020 at 8:53",
    "comments": [
        {
            "user": "Dvd848",
            "text": "<span class=\"comment-copy\">Something like this? <a href=\"https://stackoverflow.com/questions/53173854/watching-local-variables-in-gdb-without-stopping-execution\" title=\"watching local variables in gdb without stopping execution\">stackoverflow.com/questions/53173854/…</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>You could use a Watchpoint</h2>\n<p>The simplest way to do it is to use a watchpoint. A watchpoint will stop execution when a certain memory address is read or written. According to the <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Watchpoints.html#Set-Watchpoints\" rel=\"nofollow noreferrer\">GDB Manual section on setting Watchpoints</a>:</p>\n<blockquote>\n<p>You can use a watchpoint to stop execution whenever the value of an expression changes, without having to predict a particular place where this may happen. (This is sometimes called a data breakpoint.) The expression may be as simple as the value of a single variable, or as complex as many variables combined by operators.</p>\n</blockquote>\n<pre><code>Usage: watch [-l|-location] expr [thread thread-id] [mask maskvalue]\n</code></pre>\n<blockquote>\n<p>Set a watchpoint for an expression. GDB will break when the expression expr is written into by the program and its value changes. The simplest (and the most popular) use of this command is to watch the value of a single variable:</p>\n</blockquote>\n<pre><code>(gdb) watch foo\n</code></pre>\n<h2>You could use Breakpoint Command Lists</h2>\n<p>Breakpoint command lists are much what they sound like. They are lists of GDB commands that are run when a breakpoint is hit. A key feature here is that you can include the <strong>continue</strong> command in the command list, making GDB not stop like it normally would.</p>\n<p>The <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Break-Commands.html#Break-Commands\" rel=\"nofollow noreferrer\">GDB Manual section on Breakpoint Command Lists</a> tells us the following:</p>\n<blockquote>\n<p>You can give any breakpoint (or watchpoint or catchpoint) a series of commands to execute when your program stops due to that breakpoint. For example, you might want to print the values of certain expressions, or enable other breakpoints.</p>\n</blockquote>\n<pre><code>Usage:\ncommands [list…]\n… command-list …\nend\n</code></pre>\n<blockquote>\n<p>For example, here is how you could use breakpoint commands to print the value of x at entry to foo whenever x is positive.</p>\n</blockquote>\n<pre><code>break foo if x&gt;0\ncommands\nsilent\nprintf \"x is %d\\n\",x\ncont\nend\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Gogeta70",
            "time": "Oct 21, 2020 at 7:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}