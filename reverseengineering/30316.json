{
    "title": "ADD right before CMP?",
    "link": "https://reverseengineering.stackexchange.com/questions/30316/add-right-before-cmp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a beginner in RE. I compiled some code (x86 32bit), and opened it up in Ghidra. I come across the following instruction block:</p>\n<pre><code>CALL _strcmp\nMOV dword ptr [EBP + local_1c], EAX\nMOV EAX, dword ptr [EBP + local_1c]\nADD EAX, 0x4\nCMP EAX, 0x8\nJA LAB_xxxx\n</code></pre>\n<p>I understand this takes the return value of _strcmp and decides whether to jump or not.\nBut why does the compiler decide to add the ADD EAX, 0x4 instruction right before the CMP? Shouldn't it simply CMP to 0x4 in the first place? (Which is also what I have in my code: if x&lt;=4...)</p>\n<p>Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "103",
    "tags": [
        "disassembly",
        "x86",
        "ghidra"
    ],
    "user": "Soyboii",
    "time": "Apr 24, 2022 at 10:31",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Do you use the result in one of the branches and add 4?</span>",
            "time": null
        },
        {
            "user": "hairlessbear",
            "text": "<span class=\"comment-copy\">It'd be easier to answer definitively if you included the source code you compiled to produce this</span>",
            "time": null
        }
    ],
    "answers_data": []
}