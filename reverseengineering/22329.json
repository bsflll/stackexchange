{
    "title": "Easy way to understand vulnerable functions while Reversing [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22329/easy-way-to-understand-vulnerable-functions-while-reversing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/22329/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2019-10-22 09:26:38Z\">5 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/22329/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I have been doing reversing lately and not an experienced Reverse engineer. Mostly I do audit on binaries both fuzzing and source code.</p>\n<p>As I am new to this stuff, I am getting some issues of understanding, in some cases I can see naked functions like memcpy,strcpy etc. but in other cases I can see only assembly functions, which is getting difficult to understand. I am trying with IDA.</p>\n<p>I know I can use decompiler from IDA pro, but I want to go with free version and want to understand briefly.</p>\n<p>Any resources available online, please let me know.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "109",
    "tags": [
        "ida",
        "binary-analysis",
        "patch-reversing"
    ],
    "user": "Bikash Dash",
    "time": "5 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">This type of question is <a href=\"/help/dont-ask\">not a good fit</a> for this site. Try to focus on a single, specific problem or an issue you're having.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no magic bullet. To understand the code you need to figure out what it's doing and this is not easy. You can start by <a href=\"https://reverseengineering.stackexchange.com/a/2099/60\">going line by line</a>, but after some practice you should start seeing patterns at a glance.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 22, 2019 at 8:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">I don't agree, if the question is about fuzzing, then it's pretty clear, that the more code - the more bugs. I.e. it's more likely to find the vulnerability in the big complex functions than in some short ones. And I think going line by line approach is something, that dies out.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@AntonKukoba: you have a point but the question was about understanding, not simply finding bugs</span>",
                    "time": null
                }
            ]
        }
    ]
}