{
    "title": "How can I de-obfuscate a VBScript (.vbs) file?",
    "link": "https://reverseengineering.stackexchange.com/questions/25927/how-can-i-de-obfuscate-a-vbscript-vbs-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a VBScript (.vbs) file that is a malware dropper. It executes correctly in a commercial malware sandbox. but does not act the same in my manual analysis lab, and I need to figure out why. The script is heavily obfuscated (i.e. not simply using <code>execute</code>), and I don't know how to begin to analyze it.</p>\n<p>So far, i've tried the open source tool ViperMonkey, put it failed to trace the script.</p>\n<p>Any suggestions?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "malware",
        "deobfuscation"
    ],
    "user": "Sean W.",
    "time": "Sep 18, 2020 at 19:55",
    "comments": [
        {
            "user": "incode",
            "text": "<span class=\"comment-copy\">You can share the sample? Thank you</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can try to use a text editor to insert lines that calls to MsgBox with some variables to print their contents, in order to de-obfuscate the script and understand it's logic.</p>\n<p>Also there is probably a WMI query that enumerates some hardware or BIOS etc. to identify it is running in a virtualized environment.</p>\n<p>Since WMI Query in VBS are done by first running GetObject I would try to look for calls to GetObject and then MsgBox-ing their return values, or the return values in the next few lines following GetObject. Then after identifying that query there should be a condition that exits if some string is found in there which indicates a virtualized environment.</p>\n<p>A second approach would be to look for a call to WScript.Shell and try to work your way backwards to where the file that was executed was written.</p>\n<p>Another option that could be causing this not work in your VM, is that the script is downloading the malware form a remote server which is no longer available, although it worked in the online sandbox environment a while ago (while it was still available), in this case you might be lucky if you are able to extract the URL that the script tries to download from and look it up in google/VirusTotal etc.</p>\n<p>Good Luck.</p>\n</div>",
            "votes": "1",
            "user": "rotem.salinas",
            "time": "Jul 21, 2022 at 9:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try running the following from the command line:</p>\n<blockquote>\n<p>cscript /x .\\malwaresample.vbs</p>\n</blockquote>\n<p>That should open it up in Visual Studios and allow you to step through it.</p>\n</div>",
            "votes": "0",
            "user": "Jimmy D",
            "time": "Sep 20, 2020 at 1:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sean W.",
                    "text": "<span class=\"comment-copy\">Unfortunately, I don't have Visual Studio :(</span>",
                    "time": null
                }
            ]
        }
    ]
}