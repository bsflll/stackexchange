{
    "title": "Tracing to a function during debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/2570/tracing-to-a-function-during-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to find an encryption algorithm for a game client, but I need to find the actual register/stack in the client before I can decrypt/encrypt the packets correctly (on my emulated server side). The problem is that I have no idea how to find the function.</p>\n<p>In OllyDbg, is there a way I can trace during my debugging in order to find the function right after user input? The user input is a string converted to a char array, which is then encrypted in the executable. In this case, it would mean sending a packet to the game client, and then the game client decrypts the packet.</p>\n</div>",
    "votes": "7",
    "answers": 4,
    "views": "8k",
    "tags": [
        "ollydbg",
        "encryption"
    ],
    "user": "bibs",
    "time": "Aug 2, 2013 at 19:10",
    "comments": [
        {
            "user": "JMcAfreak",
            "text": "<span class=\"comment-copy\">What do you mean by \"find the function right after user input\"? On which side is the input - client-side or server-side? After that, do you mean the function that directly follows the input, a function that encrypts the input before sending the packet to the server, or a function that decrypts the packet received by the client? Please clarify in your question itself (i.e. not in a comment). Also, please give a bit more explanation on how it all works.</span>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<span class=\"comment-copy\">Do you have access to both server and client side binaries?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is clearly not enough of information to get you the exact answer. However, I will try my best to demonstrate logic behind what happens. That in a way might give you an idea how to go about locating the encryption function. I will assume you are using Windows, since it has not being stated otherwise. </p>\n<p>The main logic of ordinary (and when I say ordinary, I mean there is no deliberate attempt to obfuscate or conceal normal execution flow) server/client TCP/IP network application boils down to the following:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/A2GY0.png\"/></p>\n<p>It is obvious,  <code>Send</code> and <code>Receive</code> on both client and server side is where all of the exchange happening. Usually, data will get encrypted by one side (client or server). Shortly thereafter, it will get transmitted to the other side. Other side will receive the data and decrypt it:</p>\n<pre><code>data -&gt; encrypt -&gt; send &lt;----&gt; receive -&gt; decrypt -&gt; data\n</code></pre>\n<p>In order to find a function that performs encryption, you need to locate <code>send()</code> function, determine location of the buffer being sent, go back and see what function sets(creates/modifies) that particular buffer location. </p>\n<p>OllyDbg comes with some features that particularly useful in this situation. Firstly, we need to find all <code>send()</code> and <code>receive()</code> functions. We will search for <em>intermodular calls</em>. In disassembly window right click somewhere to bring up the following menu: </p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/erK0S.png\"/></p>\n<p>Select <code>Search For -&gt; All Intermodular Calls</code>. It will bring up the window with all of the calls found. We specifically are looking for <code>WS2_32.recv</code>:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/aoTI2.png\"/></p>\n<p>Set breakpoint on the function by pressing <kbd>F2</kbd>. Run the binary. Whenever <code>WS2_32.recv</code> breakpoint hits you can examine the stack window and determine location of the buffer:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/hHXZC.png\"/></p>\n<p>We can see, that our buffer is at location <code>0x001CFBB0</code> with the size of the buffer at <code>0x80</code>, which is 128 bytes. Let's go to to the buffer location by pressing <kbd>Ctrl</kbd> + <kbd>G</kbd> and typing location. We get our buffer:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/KYPie.png\"/></p>\n<p>Now, you need to step through and see whatever happens to that buffer, and data. I would assume one of the next function will try to decrypt it. </p>\n<p>The logic is in reverse(encrypt -&gt; send) for sending stuff out. </p>\n<p>Best of luck.</p>\n</div>",
            "votes": "8",
            "user": "PSS",
            "time": "Aug 8, 2013 at 15:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your question is too broad. \nHow is your user input taken? Try answering a few questions to narrow down the scope</p>\n<pre><code>GetWindowText() \nSendMessage(.....WM_GETTEXT...) LB_GETTEXT \nRichEdit \nWM_CHAR in a Loop \nscanf in a console ??\nsscanf from a stram ??\nDirectx SendInput ??\nopengl ??\ntouch recognition?? biometrics??  smart-card ?? voice commands\n</code></pre>\n<p>Once you narrow down to specifics you should next concentrate on narrowing down the message processing loop. Is it a classic while (TRUE) loop with switch cases for each message (Windows Message Pump) etc etc </p>\n<p>Once the scope is narrowed down to a manageable size, several options exist to trace them.\nFor example with: </p>\n<ul>\n<li>Windbg you can use ( <code>wt watch and trace when you are on a function prologue</code> ) it will execute the function and provide you a list of subfunctions </li>\n<li>with ollydbg you can use <code>run trace feature or hit trace feature</code>. Several plugins exist that enhance this feature </li>\n<li>for ida look for <code>Trace Replayer</code> documentation </li>\n</ul>\n<p>I hope you are on windows. If you are on another OS then GDB also has certain tracing features available.</p>\n</div>",
            "votes": "1",
            "user": "ixje",
            "time": "Aug 2, 2013 at 12:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "bibs",
                    "text": "<span class=\"comment-copy\">the user input is just a string converted to a char array, which is then encrypted in the executable</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the data is ever assigned to a register then you can try OllyStepNSearch to locate it. You can find it and more info here: <a href=\"http://blog.didierstevens.com/programs/ollystepnsearch/\" rel=\"nofollow\">http://blog.didierstevens.com/programs/ollystepnsearch/</a></p>\n</div>",
            "votes": "1",
            "user": "Woot",
            "time": "Apr 6, 2014 at 6:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>there are a lot of tutorials which could help you do that.</p>\n<p>I would recommend you to go through Lena's reversing tutorial.</p>\n<p>Advice: Please do not use your knowledge to crack any software. Use it constructively.</p>\n</div>",
            "votes": "0",
            "user": "Palaniyappan Bala",
            "time": "Apr 9, 2014 at 11:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}