{
    "title": "How to interpret binary instruction using the intel manual",
    "link": "https://reverseengineering.stackexchange.com/questions/22371/how-to-interpret-binary-instruction-using-the-intel-manual",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>OK. So I am really trying to figure out how to use the \"Intel 64 and IA-32 Architectures Software Developer's Manual\" for myself, since it seems like the authoritative source for x86(_64) machine code.</p>\n<p>I am looking at a program in Ghidra (specifically, a dynamically linked .so file to the program I actually care about). File info for the .so file:</p>\n<pre><code>ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked\n</code></pre>\n<p>I come to the following instruction in Ghidra:</p>\n<pre><code>ff 25 de ad be ef  --- deadbeef being a substitute for the real bytes.\n</code></pre>\n<p>I have Ghidra set up so that I can right click on the instruction and go to the relevant page in the processor manual, which brings me to the JMP reference (p.590 in the version of the manual I have). Cool.</p>\n<p>From looking through the options there, I find the <code>ff</code> opcode rows that correspond to the instruction I am looking at. Further, I know that my <code>ModR/M</code> byte is <code>25H</code> which corresponds to <code>MOD = 00B</code>, <code>REG = 100B</code> and <code>R/M = 101B</code> so I know that this narrows it down to the <code>FF /4</code> rows in the <code>JMP</code> instruction description table. But how do I know if it is referring to <code>JMP r/m16</code> or <code>JMP r/m32</code> or <code>JMP r/m64</code>? Also what is the difference between those three? And further, I know from looking at tables 2-1 through 2-3 (combined with how Ghidra interprets the instruction) that <code>de ad be ef</code> actually ends up being a disp32 that gets added to the index. But how would I have known which table to reference in tables 2-1 to 2-3, and how does that information correspond to choosing between <code>JMP r/m16</code> or <code>JMP r/m32</code> or <code>JMP r/m64</code>?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "318",
    "tags": [
        "ghidra",
        "x86-64",
        "intel"
    ],
    "user": "pooley1994",
    "time": "Oct 22, 2019 at 22:37",
    "comments": [
        {
            "user": "smitelli",
            "text": "<span class=\"comment-copy\">The <code>r</code> in <code>r/m16</code> et al means <b>r</b>egister. <code>m16</code>/<code>m32</code>/<code>m64</code> means <b>m</b>emory, either 16- 32- or 64-bit address width. If mod is 11, <code>r/m</code> is interpreted as <code>r</code>, otherwise <code>m</code>. If the CPU were operating in 16-bit mode, only <code>ff 25</code> would contribute to the instruction, resulting in <code>jmp [di]</code> followed by four gibberish bytes. For differentiating 32/64, it depends on the operating mode -- it's probably going to be 64-bit based on your .so info and question tags.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@smitelli please post this in the answer box. comments should be used for clarifications, not for answers</span>",
            "time": null
        }
    ],
    "answers_data": []
}