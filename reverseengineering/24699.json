{
    "title": "Trace back regularly used .data variable in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/24699/trace-back-regularly-used-data-variable-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reversing Cryptex.exe 1.0 from Eldad.</p>\n<p><a href=\"https://i.sstatic.net/3hjS9.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3hjS9.png\"/></a></p>\n<p>There is unknown-data buffer address stored in edx which gets used as parameter for CryptHashData, which will hash 20 Bytes from there. Now I want to find which function actually writes this buffer (edx stores 0019F578 at this point of debugging)\nI don't get smart with [esp+C], because esp should be the last push exc, and counting from there it should be push 0?</p>\n<p>What I want to try is setting a breakpoint on .data 0019F578 without break (since it gets used alot by the program in general) and tracing all functions called till the breakpoint ds:CryptHashData. But that doesn't work in IDA. IDA will not recognize other breakpoints with break after I set up this.\nI'm glad to learn new methods about tracing, since it's very important to know.\n<a href=\"https://i.sstatic.net/MC445.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/MC445.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "225",
    "tags": [
        "breakpoint",
        "tracing"
    ],
    "user": "killertoge",
    "time": "Apr 13, 2020 at 20:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Firstly, let's understand what goes into <em>edx</em>. <em>edx</em> contains the first argument passed to this function which is a pointer the data that we want to compute its MD5 hash. Looking at images, stack frame of the current function is like:</p>\n<pre><code>esp + 0x0 --&gt; | local_var_8 |\nesp + 0x4 --&gt; | local_var_4 |\nesp + 0x8 --&gt; | return_addr |\nesp + 0xC --&gt; |    arg_0    |\n</code></pre>\n<p>At the beginning of the function, <em>sub esp, 8</em> reserves 8 bytes on the stack for two local variables. Then you have the return address and arguments coming afterward. All those pushes that are used to pass arguments to <em>CryptCreateHash</em> will be poped back by that function before it returns to the current function, so the previous position of the stack will be preserved.</p>\n<p>I believe true reverse engineering consists of understanding the code, not blind trace. Instead of tracing a value on the stack, it is better to look for the caller of this function, understand who has called this function and wherein the code is this function called, and then what is the parameter sent to this function.</p>\n<p>Answering the second part of your question, you can customize breakpoints in IDA using some Python skills. You can create a conditional breakpoint for example and disable the break action as you have done. Whenever you hit this breakpoint, you can log the content of <em>eip</em> to find which instruction or wherein the code is this data accessed. If it is before this function, just log the data in, if it is after, you can enable break action again.</p>\n<p>For that you need to consider some matters:</p>\n<ol>\n<li>You have to practice IDA python APIs. e.g. for getting a register content you have to call GetRegValue. <a href=\"https://www.hex-rays.com/products/ida/debugger/scriptable/\" rel=\"nofollow noreferrer\">This</a> will help you to begin. <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow noreferrer\">Here</a> also you can find the list of all IDA python APIs.</li>\n<li>If you set a breakpoint on a data that is passed to a lot of windows APIs such as crypt APIs, you will hit this breakpoint within a lot of library codes. Always look at the address space and if you are not inside your main program, skip them to avoid reversing library functions that are irrelevant to your main program.</li>\n</ol>\n</div>",
            "votes": "2",
            "user": "Cih2001",
            "time": "Apr 14, 2020 at 10:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "killertoge",
                    "text": "<span class=\"comment-copy\">I was not familiar without the ebp variant. And regarding to you its the calling convention right? That would make sense, and I could also find this in the caller function anyways. If I want to find caller I only see cryptex.exe(current function), kernel32.dll ntdll.dll ntdll.dll in the Call Stack. I thought I would see another crypex.exe to see the caller but don't. Thank you for your help!</span>",
                    "time": null
                }
            ]
        }
    ]
}