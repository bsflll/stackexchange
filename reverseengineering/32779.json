{
    "title": "Hooking a function",
    "link": "https://reverseengineering.stackexchange.com/questions/32779/hooking-a-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, I'm attempting to create a mod for an older game, Fable: The Lost Chapters.  I was able to find the MacOS release of the game, which contains symbols, and I was also able to find a leaked debug build for windows, which also contains symbols.  Both have made the modding process far easier, however this function specifically I have been unable to call or hook.</p>\n<p>Here's what the function looks like within IDA when demangled.</p>\n<p>MacOS\n<code>CThingCreatureBase::SetCurrentAction(CCreatureActionBase const&amp;)</code></p>\n<p>Windows Debug Build\n<code>bool __thiscall CThingCreatureBase::SetCurrentAction(CThingCreatureBase *this, const CCreatureActionBase *action)</code></p>\n<p>And here's how I'm hooking the function.</p>\n<pre><code>typedef bool (__thiscall* tSetCurrentAction)(CThingCreatureBase*, CCreatureActionBase const &amp;);\n\ntSetCurrentAction oSetCurrentAction;\n\nbool __fastcall hSetCurrentAction(CThingCreatureBase* This, CCreatureActionBase const &amp; action)\n{\n    return oSetCurrentAction(This, action);\n}\n\nif (MH_Initialize() == MH_OK)\n    std::cout &lt;&lt; \"MinHook Initialized\" &lt;&lt; std::endl; \n\nif(MH_CreateHook((LPVOID)0x6644F0, &amp;hSetCurrentAction, reinterpret_cast&lt;void**&gt;(&amp;oSetCurrentAction)) == MH_OK)\n        std::cout &lt;&lt; \"SetCurrentAction Hooked\" &lt;&lt; std::endl;\n\n    if (MH_EnableHook((LPVOID)0x6644F0) == MH_OK)\n        std::cout &lt;&lt; \"SetCurrentAction Enabled\" &lt;&lt; std::endl;\n</code></pre>\n<p>Though for some reason, the game crashes whenever <code>oSetCurrentAction</code> is called.</p>\n<p>Here's the exception when debugging <code>Exception thrown at 0x00692F03 in Fable.exe: 0xC0000005: Access violation reading location 0xCCCCCCD0.</code></p>\n<p>I'm hopeful that I'm just missing something obvious, what someone will easily spot, but that's probably not the case.  Any help would be greatly appreciated.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "149",
    "tags": [
        "ida",
        "disassembly",
        "c++",
        "dll",
        "hooking"
    ],
    "user": "Reaper",
    "time": "Mar 2, 2024 at 13:46",
    "comments": [
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">Could you add the crash information? A debugger output maybe. Looking at your code, in <code>MH_CreateHook(...)</code> you use an absolute address: <code>0x6644F0</code>. If it is taken from the symbols table offsets, it is an offset from the ImageBase that you need to calculate to the correct virtual address.</span>",
            "time": null
        },
        {
            "user": "Reaper",
            "text": "<span class=\"comment-copy\">The address is not taken from a symbols table, all I'm doing is comparing what the function looks like in the debug build of the game, and finding is location in release.  Also, the function hooks, with the correct arguments being passed through.  I've added the debugger output as well.</span>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">In the first line you define the original function pointer <code>tSetCurrentAction()</code> as a <code>__thiscall</code>. Your hook function, <code>hSetCurrentAction</code> is declared as <code>__fastcall</code>. The hook function will take the <code>action</code> argument from <code>EDX</code> which is undefined. The original function, trying to access the <code>action</code> argument will most likely end up reading some arbitrary memory address and crash.</span>",
            "time": null
        },
        {
            "user": "Reaper",
            "text": "<span class=\"comment-copy\">How would I go about hooking a __thiscall function, with minhook it looked like the hooked function had to be static.</span>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\"><code>__thiscall</code> is just a calling convention. Changing the pointer to that should work. Your function is called by the game as <code>__thiscall</code> with a <code>this *</code> in ECX (same as a <code>__fastcall</code>) and <code>action</code> on the stack. Translated to <code>__fastcall</code> terms, the <code>action</code> argument is the third arg passed to your hook function. If you add an unused second arg to your hook function then you can leave the content as is.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the first line you define the original function pointer <code>tSetCurrentAction()</code> as a __thiscall.</p>\n<p>Your hook function, <code>hSetCurrentAction</code> is declared as <code>__fastcall</code>.</p>\n<p>The hook function will take the <code>action</code> argument from <code>EDX</code> which is <em>undefined</em>. The original function, trying to access the <code>action</code> argument will most likely end up reading some arbitrary memory address and crash.</p>\n<p><code>__thiscall</code> is just a calling convention, changing the pointer to that type should work:</p>\n<p>Your function is called by the game as <code>__thiscall</code> with a <code>this *</code> in <code>ECX</code> (same as a <code>__fastcall</code>) and <code>action</code> on the stack. Translated to <code>__fastcall</code> terms, the <code>action</code> argument is the <em>third</em> arg passed to your hook function.</p>\n<p>If you add an unused second arg to your hook function then you can leave the content as is.</p>\n<p>A less important note:</p>\n<p>In many debug builds, the space between functions is filled by the compiler with <code>0xCC</code> bytes. The access violation reading from <code>0xCCCCCCD0</code> suggests that the original function tried to <em>dereference</em> the undefined space pointed to by <code>EDX</code>, got <code>0xCCCCCCCC</code>, added the offset to method or data in the \"object\" (<code>0xC</code>) and then read or called it at <code>0xCCCCCCD0</code>.</p>\n</div>",
            "votes": "1",
            "user": "Yotamz",
            "time": "Mar 7, 2024 at 7:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}