{
    "title": "How can I extract *.c file hidden in an executable file (SkiFree)",
    "link": "https://reverseengineering.stackexchange.com/questions/32265/how-can-i-extract-c-file-hidden-in-an-executable-file-skifree",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am a person interested of old games (MS DOS and 16 bit Windows only) and programming. In 2020, I saw an article about hacking SkiFree somewhere on the internet and soon as I followed the instructions, it was so easy that I made many games with changed graphics and added sound effects (the later 32 bit executable has a hidden ability to do so). Later I tried to go to different lengths after being impressed with my previous stuff mentioned above. Like adding new objects (referred as things in the code). I have explored the original executable using a hex editor and found this:</p>\n<pre><code>ski2.c\n</code></pre>\n<p>I have heard of old Windows applications being leaked by hackers, causing mass controversy and a big problem for Microsoft. They say they extracted the c files and headers from the executable file. Sometimes without a decompiler. I have been working on a SkiFree project for nearly 3 years only for my own enjoyment and I want to know which software do they use to do this. Can anyone help me?</p>\n<p>Thanks!\nPicaboo3</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "207",
    "tags": [
        "pe",
        "executable",
        "game-hacking",
        "exe",
        "ne"
    ],
    "user": "Picaboo3",
    "time": "Sep 7, 2023 at 6:42",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<span class=\"comment-copy\">Maybe that's only the file name for debugging. I don't think there is the point to include full C source code in an executable file.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Such names are often included either by some debug-related output (there are macros which resolve to the file names) or could be used in embedded debug symbols.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the best you can get: <a href=\"https://github.com/yuv422/skifree_decomp\" rel=\"nofollow noreferrer\">https://github.com/yuv422/skifree_decomp</a></p>\n<blockquote>\n<p>A source code reconstruction of the 32bit version of Skifree (v1.04)\nback to C, compilable with Visual Studio 6.</p>\n</blockquote>\n<p>so someone already did the very time consuming manual translation from disassembly to C for you</p>\n<p>you can load the Visual Studio 6 dsw project file (from 1998) in VS2017 or VS2019 - or create a new solution</p>\n</div>",
            "votes": "2",
            "user": "llm",
            "time": "Sep 8, 2023 at 5:30",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not common for executables to include their own source code, so in general, the answer to your question is \"that's not possible\". That string likely appears in the binary due to some sort of debug print (something like the <code>__FILE__</code> macro in C). If you really want to know what purpose that string is serving in the binary, you should use a static reverse engineering tool like IDA, Ghidra, Binary Ninja, or radare2 to investigate where it is being used. If it's nearby a call to <code>printf</code>, <code>OutputDebugString</code>, <code>fwrite</code>, etc., you are likely looking at a dead end.</p>\n</div>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Sep 7, 2023 at 18:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}