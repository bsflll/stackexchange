{
    "title": "Monochrome image replacement within firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/6535/monochrome-image-replacement-within-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hopefully I can find someone who can help me with this.</p>\n<p>I have become fascinated with electronic cigarettes and one of the more popular regulated chips for sale tout's its ability to change logos.</p>\n<p>The chip is the YiHi E-Cigcar.\nThe firmware for the chip can be found <a href=\"http://www.yihiecigar.com/download_info/Upgrade-Software-for-SX350-50w-ONLY_OldBoot_YH_Logo_60W_20140813-Screen-flip_V2-4-d59228.html\" rel=\"nofollow\">http://www.yihiecigar.com/download_info/Upgrade-Software-for-SX350-50w-ONLY_OldBoot_YH_Logo_60W_20140813-Screen-flip_V2-4-d59228.html</a> </p>\n<p>I've downloaded a YouTube publisher's software the \"changes\" the logo, however, after decompiling his .NET application, I'm not convinced this wouldn't brick my chip.\n<a href=\"https://www.youtube.com/watch?v=kTy0AKTYzrg\" rel=\"nofollow\">https://www.youtube.com/watch?v=kTy0AKTYzrg</a></p>\n<p>I've written an application that reads the entire string in as hex, and converts to binary (assuming the firmware was unencrypted, and I could find an index of part of the image I'm looking for), but no luck. </p>\n<p>I'm not convinced that this firmware isn't packed in some way, but I haven't the slightest idea on how to go about finding it.</p>\n<p>If anyone could give some advice or has any idea on how to unpack / search for the logo's another way this would be fantastic. </p>\n<p>Not that this is a need, it keeps me up at night because, I'm just one of those people who can't leave a problem unsolved... probably like a lot of you reading this.</p>\n<p>Anyone who's up for the challenge it would be much appreciated.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "198",
    "tags": [
        "firmware"
    ],
    "user": "Brett Salmiery",
    "time": "Oct 25, 2014 at 4:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Compile this program (rename your file to out1.SXI, or change the file name in the program):</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n    char buf[256];\n    int i, j;\n    FILE *fp;\n    int pos=0;              // file position\n    int bpr=0;              // bits / bytes per row\n    int blockno=0;          // 6 blocks * 8 bits = 48 rows\n    if (argc&gt;=2)\n            bpr=atoi(argv[1]);\n    if (bpr==0)\n            bpr=64;\n    if (argc&gt;=3) {\n            pos=strtol(argv[2], NULL, 0);\n    }\n\n    if ((fp=fopen(\"out1.SXI\", \"rb\"))==NULL) {\n            perror(\"out1.SXI\");\n            exit(1);\n    }\n    fseek(fp, pos, 0);\n    while(fread(buf, bpr, 1, fp)) {\n            if (blockno++%6==0)\n                    printf(\"%06x\\n\", pos);\n            for (j=128; j&gt;0; j&gt;&gt;=1) {\n                    for (i=0; i&lt;bpr; i++) {\n                            if (buf[i]&amp;j)\n                                    putchar('X');\n                            else\n                                    putchar(' ');\n                    }\n                    putchar('|');\n                    putchar('\\n');\n            }\n            pos+=bpr;\n    }\n}\n</code></pre>\n<p>then run it as</p>\n<pre><code>$ xdump 64 0x83D4 | less\n$ xdump 64 0x10FC8 | less \n</code></pre>\n<p>I'm pretty sure these are images, though i can't make sense of them; but maybe you can if you compare them to what the device shows if you flash the firmware.</p>\n<p>Also, this assumes the display has a 64x48 pixel resolution like the one in the movie; you might want to take a picture through a magnifying glass to check they haven't changed the resolution. Although 64x48 is what my program assumes as well when it generates these images.</p>\n<p>Of course, the file you get when you unpack the .rar seems to be much larger than the file in the movie, if the offsets shown are byte offsets. Possibly, the firmware consists of two part, one factory part (which is the firmware you can download) and a OEM/vendor part that has the images (which you can't download, but which is used in the movie), with the firmware upgrader deciding which one to overwrite depending on the file format/contents.</p>\n</div>",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 25, 2014 at 11:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Brett Salmiery",
                    "text": "<span class=\"comment-copy\">This is nice. I've tweaked some things around and compiled it twice, one the way you have it and another with the X's in reverse. Still can't tell if there should maybe be some padding that allows it to line up correctly or not. This is a cleaner way of my C# application. I will keep you posted. Thanks</span>",
                    "time": null
                }
            ]
        }
    ]
}