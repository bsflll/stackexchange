{
    "title": "Password is right, but still wrong?",
    "link": "https://reverseengineering.stackexchange.com/questions/20605/password-is-right-but-still-wrong",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i am trying to find the password of a binary with radare2 - a crackme again :-)</p>\n<p>I already thought I've found the password ('pass'), but this seems to be not the right one. Or there is a trick I didn't found out yet...</p>\n<p>Here is the code and my thoughts about it:</p>\n<pre><code>/ (fcn) sym.main 134\n|   int sym.main (int argc, char **argv, char **envp);\n|           ; var int var_dh @ rbp-0xd\n|           ; var int var_9h @ rbp-0x9\n|           ; var int var_8h @ rbp-0x8\n|           ; DATA XREF from entry0 (0x6dd)\n|           0x000008bc      55             push rbp\n|           0x000008bd      4889e5         mov rbp, rsp\n|           0x000008c0      4883ec10       sub rsp, 0x10\n</code></pre>\n<blockquote>\n<p>Memory Set-Up</p>\n</blockquote>\n<pre><code>|           0x000008c4      64488b042528.  mov rax, qword fs:[0x28]    ; [0x28:8]=0x1a30 ; '('\n|           0x000008cd      488945f8       mov qword [var_8h], rax\n|           0x000008d1      31c0           xor eax, eax\n|           0x000008d3      c745f3000000.  mov dword [var_dh], 0\n|           0x000008da      c645f700       mov byte [var_9h], 0\n|           0x000008de      488d3d140100.  lea rdi, qword str.Enter__pass__: ; 0x9f9 ; \"Enter \\\"pass\\\":  \"\n|           0x000008e5      e896fdffff     call sym.imp.puts           ; int puts(const char *s)\n</code></pre>\n<blockquote>\n<p>Set up <em>var_dh</em>, <em>var_9</em> and <em>var_8h = 0</em>, Display message 'Enter \"pass\":'</p>\n</blockquote>\n<pre><code>|           0x000008ea      488b151f0720.  mov rdx, qword [obj.stdin]  ; obj.__TMC_END ; [0x201010:8]=0\n|           0x000008f1      488d45f3       lea rax, qword [var_dh]\n|           0x000008f5      be05000000     mov esi, 5\n|           0x000008fa      4889c7         mov rdi, rax\n|           0x000008fd      e89efdffff     call sym.imp.fgets          ; char *fgets(char *s, int size, FILE *stream)\n</code></pre>\n<blockquote>\n<p>Get user input</p>\n</blockquote>\n<pre><code>|           0x00000902      488d45f3       lea rax, qword [var_dh]\n|           0x00000906      ba04000000     mov edx, 4\n|           0x0000090b      488d35030100.  lea rsi, qword str.pass     ; 0xa15 ; \"pass\"\n|           0x00000912      4889c7         mov rdi, rax\n|           0x00000915      e856fdffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)\n|           0x0000091a      85c0           test eax, eax\n</code></pre>\n<blockquote>\n<p>Compare user input with \"pass\"</p>\n</blockquote>\n<pre><code>|           0x0000091c      90             nop\n|           0x0000091d      b800000000     mov eax, 0\n|           0x00000922      90             nop\n|           0x00000923      90             nop\n|           0x00000924      90             nop\n|           0x00000925      90             nop\n|           0x00000926      90             nop\n|           0x00000927      b800000000     mov eax, 0\n|           0x0000092c      488b4df8       mov rcx, qword [var_8h]\n|           0x00000930      6448330c2528.  xor rcx, qword fs:[0x28]\n|       ,=&lt; 0x00000939      7405           je 0x940\n|       |   0x0000093b      e850fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)\n|       |   ; CODE XREF from sym.main (0x939)\n|       `-&gt; 0x00000940      c9             leave\n\\           0x00000941      c3             ret\n</code></pre>\n<blockquote>\n<p>Leave program, when password is wrong?!</p>\n</blockquote>\n<p>Maybe I just can't see the wood for the trees...</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "286",
    "tags": [
        "radare2",
        "crackme"
    ],
    "user": "Mofro",
    "time": "Feb 12, 2019 at 10:34",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">The binary looks to have been manually patched. Compilers generally do not emit <code>NOP</code> except for alignment purpose. And <code>mov eax, 0</code> in the last block will always make it return 0 irrespective of the password supplied.</span>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">Welcome to RE.SE! Could you perhaps reference the binary?</span>",
            "time": null
        },
        {
            "user": "Mofro",
            "text": "<span class=\"comment-copy\">Here you go: <a href=\"https://www.dropbox.com/s/ybcsm9y08s4rfqd/RE_SE?dl=0\" rel=\"nofollow noreferrer\">link</a></span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">@Mofro This check is dummy. Its not a check at all. Try to look at output of <code>afl</code></span>",
            "time": null
        }
    ],
    "answers_data": []
}