{
    "title": "Disassembling only given function",
    "link": "https://reverseengineering.stackexchange.com/questions/22137/disassembling-only-given-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking for some disassembler that has feature similar to WinDbg uf function, it produces output that is really easy transferable to compilable NASM listing. The problem with WinDbg is that it's hard to execute from API level, without attaching debugger. It can work on Linux or Windows.</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "399",
    "tags": [
        "disassembly",
        "windbg"
    ],
    "user": "spimley",
    "time": "Sep 16, 2019 at 12:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you don't have to attach to a running process you can open any binary as a dumpfile and ask windbg to disassemble a given function</p>\n<p>There is a dbgeng api Execute and ExecuteCmdFile that can execute commands </p>\n<p>you can write a standalone dbgeng executable that can open a binary run the  command uf and quit </p>\n<p>with <strong>\".opendump \\..\\foo.dll ; uf foo!blah;q\"</strong></p>\n<p>sample code and results</p>\n<pre><code>#pragma comment ( lib ,\"dbgeng.lib\")\n#include &lt;stdio.h&gt;\n#include &lt;dbgeng.h&gt;\n#include \"out.cpp\" //from remmon windbg sdk sample dir for stdiocallbacks\nStdioOutputCallbacks g_Callback;\nint main (int argc , char* argv[])\n{\n    IDebugClient*    g_Client  = NULL;\n    IDebugControl*   g_Control = NULL;\n    if(argc == 2 )\n    {\n        if (DebugCreate(__uuidof(IDebugClient), (void**)&amp;g_Client) == S_OK)\n        {\n            if (g_Client-&gt;QueryInterface(__uuidof(IDebugControl),(void**)&amp;g_Control) == S_OK )\n            {\n                g_Client-&gt;SetOutputCallbacks( &amp;g_Callback );\n                g_Control-&gt;Execute(DEBUG_OUTCTL_THIS_CLIENT,argv[1],DEBUG_EXECUTE_DEFAULT);\n            }\n        }\n    }\n}\n</code></pre>\n<p>compiled and linked with in vsdevcmdprompt vs2017 community</p>\n<pre><code>cl /Zi /O1 /W4 /analyze /EHsc uf.cpp /link /release\n</code></pre>\n<p>copy the relevent dbgeng.dll / dbghelp.dll and extension dll to current working<br/>\ndirectory or copy the executable to windbg installation directory   </p>\n<p>do not use the system default dbgeng/dbghelp dlls  </p>\n<pre><code>&gt;uf.exe \".opendump c:\\windows\\system32\\kernelbase.dll;uf kernelbase!CreateFileA;q\"\nWARNING: The debugger does not have a current process or thread\nWARNING: Many commands will not work    \nMicrosoft (R) Windows Debugger Version 10.0.18362.1 X86\nCopyright (c) Microsoft Corporation. All rights reserved.    \nLoading Dump File [c:\\windows\\system32\\kernelbase.dll]\nkernelbase!CreateFileA:\n0dd162d1 8bff            mov     edi,edi\n0dd162d3 55              push    ebp\n0dd162d4 8bec            mov     ebp,esp\n0dd162d6 51              push    ecx\n0dd162d7 51              push    ecx\n0dd162d8 ff7508          push    dword ptr [ebp+8]\n0dd162db 8d45f8          lea     eax,[ebp-8]\n0dd162de 50              push    eax\n0dd162df e83127fdff      call    kernelbase!GetModuleHandleW+0x9a (0dce8a15)\n0dd162e4 85c0            test    eax,eax\n0dd162e6 7505            jne     kernelbase!CreateFileA+0x1c (0dd162ed)    \nkernelbase!CreateFileA+0x17:\n0dd162e8 83c8ff          or      eax,0FFFFFFFFh\n0dd162eb eb2a            jmp     kernelbase!CreateFileA+0x46 (0dd16317)    \nkernelbase!CreateFileA+0x1c:\n0dd162ed 56              push    esi\n0dd162ee ff7520          push    dword ptr [ebp+20h]\n0dd162f1 ff751c          push    dword ptr [ebp+1Ch]\n0dd162f4 ff7518          push    dword ptr [ebp+18h]\n0dd162f7 ff7514          push    dword ptr [ebp+14h]\n0dd162fa ff7510          push    dword ptr [ebp+10h]\n0dd162fd ff750c          push    dword ptr [ebp+0Ch]\n0dd16300 ff75fc          push    dword ptr [ebp-4]\n0dd16303 e86044fdff      call    kernelbase!CreateFileW (0dcea768)\n0dd16308 8bf0            mov     esi,eax\n0dd1630a 8d45f8          lea     eax,[ebp-8]\n0dd1630d 50              push    eax\n0dd1630e ff159410ce0d    call    dword ptr [kernelbase+0x1094 (0dce1094)]\n0dd16314 8bc6            mov     eax,esi\n0dd16316 5e              pop     esi    \nkernelbase!CreateFileA+0x46:\n0dd16317 c9              leave\n0dd16318 c21c00          ret     1Ch\nquit:\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Oct 16, 2019 at 21:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "spimley",
                    "text": "<span class=\"comment-copy\">Woah, that's almost exactly what I was looking for, thanks :D</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">IDA</a>, <a href=\"https://github.com/NationalSecurityAgency/ghidra\" rel=\"nofollow noreferrer\">Ghidra</a>, <a href=\"https://rada.re/r/\" rel=\"nofollow noreferrer\">Radare</a>, <a href=\"http://www.capstone-engine.org/\" rel=\"nofollow noreferrer\">Capstone</a> and <a href=\"https://binary.ninja/\" rel=\"nofollow noreferrer\">Binary Ninja</a> are some of the most popular disassemblers for static code analysis, and all of them have python SDKs. </p>\n</div>",
            "votes": "0",
            "user": "macro_controller",
            "time": "Sep 16, 2019 at 16:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "spimley",
                    "text": "<span class=\"comment-copy\">Yeah, I know all of those. I'm looking for an easy way of doing that. AFAIK IDA, Capstone and BN don't have any features that are capable of that.</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">Why doesn't their python SDK gives you what you want?</span>",
                    "time": null
                }
            ]
        }
    ]
}