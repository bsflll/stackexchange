{
    "title": "Importing C header file with memory location definitions",
    "link": "https://reverseengineering.stackexchange.com/questions/6651/importing-c-header-file-with-memory-location-definitions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Bear with me as I am new to IDA and have not managed to find an answer to my question on google or other related outlets.</p>\n<p>I am reversing a firmware blob from an ARM device of which I have a c header file defining various memory locations as follows:</p>\n<pre><code>#define IO_LCD_OUT 0x4000000\n</code></pre>\n<p>Is there a way I can load this header file into IDA in order to redefine immediate values?</p>\n<p>For Example, instead of:</p>\n<pre><code>MOV     R12, #0x4000000\n</code></pre>\n<p>Could IDA instead print:</p>\n<pre><code>MOV     R12, IO_LCD_OUT\n</code></pre>\n<p>Are there other ways to acheive this outcome aside from how I am trying to approach this? I have the header file with memory locations defined and would like to load that information into ida!</p>\n<p>I have tried to parse it using File -&gt; Load File -&gt; Parse C Header File and have had no luck! </p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "Thomas",
    "time": "Nov 18, 2014 at 14:44",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">What error message(s) are you getting when you try <code>Parse C Header File</code>?</span>",
            "time": null
        },
        {
            "user": "Thomas",
            "text": "<span class=\"comment-copy\">I'm not getting any error messages, it loads the file perfectly fine. I just don't know how to change the way the immediate values are displayed. When I right click 0x4000000 for example, there are no options that allow me to define it as the variable in the header file</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use custom enumerations here.</p>\n<ol>\n<li>Go to Enums list (<kbd>Shift</kbd>+<kbd>F10</kbd>).</li>\n<li>Add a new enum for you list of constants (<kbd>Ins</kbd>)</li>\n<li>Add constant(s) to the list (<kbd>N</kbd>), e.g. name <code>IO_LCD_OUT</code> and value <code>0x4000000</code></li>\n<li>Now you should be able to replace these constants in the disassembly, using <kbd>M</kbd> or the context menu.</li>\n</ol>\n<p>You can speed up things by:</p>\n<ol>\n<li>Generating an IDC file from the header to build the enum programmatically (use functions <code>AddEnum</code> and <code>AddConstEx</code>). The <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"noreferrer\"><code>h2enum.idc</code> script</a> might work too.</li>\n<li>Converting those defines to a C style <code>enum</code>, parsing the header, then using the imported enum from your disassembly (you will need to first perform <code>Synchronize to idb</code> step in the Local Types).</li>\n</ol>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Nov 18, 2014 at 12:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Will you have ability to cross reference addresses mentioned in defined constants ( for example #define IO_LCD_OUT 0x4000000 ) ? If yes, how is it possible ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">No, currently cross-references to enums are not maintained, though we're considering adding this feature.</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky How can one perform <code>Synchronize to idb</code> from IDAPython?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Importing header files will not do this work because there is no general way to find out meaning of any defined constant.</p>\n<p>You'll need to do some manual work for it.</p>\n<p>I handling this problem as follows (it requires some IDA scripting, but it should be easy):</p>\n<ol>\n<li>For all required memory regions (for example LCD) data segment should be created by using <code>idc.AddSeg</code> IDAPython api or via IDA UI. Addresses of those regions can be gathered from datasheets or by analysis of header files.</li>\n<li>All those address-meaning-defines should be extracted from header files and converted to global variable names by <code>idc.MakeName</code> IDAPython api.</li>\n<li>Binary should be reanalyzed (Options--&gt;General--&gt;Analisys--&gt;Reanalyze program). If addresses are still not recognized, you will need to write IDAPython script that converts these addresses to offsets by <code>idc.OpOff</code> IDAPython api. </li>\n</ol>\n<p>As far as I know there is no general solution for this problem in IDA for now.</p>\n</div>",
            "votes": "3",
            "user": "w s",
            "time": "Nov 18, 2014 at 7:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">When the values are referring to memory and are not just flags or whatnot, this is probably the better approach.</span>",
                    "time": null
                }
            ]
        }
    ]
}