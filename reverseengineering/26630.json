{
    "title": "Virtual functions call asm",
    "link": "https://reverseengineering.stackexchange.com/questions/26630/virtual-functions-call-asm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems to be a virtual function call. How would this code look in a high-level language like C ++?</p>\n<pre><code>.text:0053A745 loc_53A745:                             ; CODE XREF: sub_53A690+CEj\n.text:0053A745                 mov     ecx, [edi+esi*4]\n.text:0053A748                 test    ecx, ecx\n.text:0053A74A                 jz      short loc_53A751\n.text:0053A74C                 mov     edx, [ecx]\n.text:0053A74E                 call    dword ptr [edx+4]\n.text:0053A751\n.text:0053A751 loc_53A751:                             ; CODE XREF: sub_53A690+BAj\n.text:0053A751                 mov     eax, dword_83C020\n.text:0053A756                 test    eax, eax\n.text:0053A758                 jnz     short loc_53A78D\n.text:0053A75A                 inc     esi\n.text:0053A75B                 cmp     esi, 25h\n.text:0053A75E                 jl      short loc_53A745\n\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "296",
    "tags": [
        "disassemblers"
    ],
    "user": "black4joss",
    "time": "Dec 27, 2020 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This could be a loop over 37 objects with virtual functions, the simplified version could look similar to this (written in C++)</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Animal\n{\npublic:\n    virtual void makeSound() = 0;\n    virtual char* getColor() = 0;\n    virtual ~Animal() = 0;\n};\n\nclass Cat : public Animal\n{\npublic:\n    Cat();\n    void makeSound() { std::cout &lt;&lt; \"meow\" &lt;&lt; std::endl; }\n    char* getColor() { return \"red\"; };\n    ~Cat() {};\n};\n\nAnimal* animals[] = {new Cat(), new Cat(), new Cat()};\nint main()\n{\n    for (int i = 0; i &lt; 3; i++)\n        if (animals[i])\n            std::cout &lt;&lt; animals[i]-&gt;getColor();\n\n    for (int i = 0; i &lt; 3; i++)\n        delete animals[i];\n    return 0;\n}\n</code></pre>\n<p>With the core lines:</p>\n<pre><code>if (animals[i])\n  std::cout &lt;&lt; animals[i]-&gt;getColor();\n</code></pre>\n<p>Compiled to this by <code>clang 8.0.0</code>:</p>\n<pre><code>cmp     dword ptr [animals + eax*4], 0\nje      .LBB2_4\nmov     eax, dword ptr [ebp - 8]\nmov     eax, dword ptr [animals + eax*4]\nmov     ecx, dword ptr [eax]\nmov     dword ptr [esp], eax\ncall    dword ptr [ecx + 4]\n</code></pre>\n<p>Additionally your code seems to follow Microsoft <code>__thiscall</code> calling convention, as the <code>this</code> pointer is stored in <code>ecx</code> register.</p>\n</div>",
            "votes": "3",
            "user": "morsisko",
            "time": "Dec 27, 2020 at 17:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">There's 25h so 37 objects.</span>",
                    "time": null
                },
                {
                    "user": "morsisko",
                    "text": "<span class=\"comment-copy\">Thanks, I've edited my post</span>",
                    "time": null
                }
            ]
        }
    ]
}