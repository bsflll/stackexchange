{
    "title": "What meaning does that detour have?",
    "link": "https://reverseengineering.stackexchange.com/questions/6898/what-meaning-does-that-detour-have",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In an binary of my choice I see ofter stuff like</p>\n<pre><code>sub_593690      proc near               ; DATA XREF: .rdata:01456994o\n                sub     ecx, [ecx-4]\n                sub     ecx, 48h\n                jmp     loc_4AE180  ; to usual looking method\nsub_593690      endp\n</code></pre>\n<p>what does it mean and why a compiler generates such things?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "230",
    "tags": [
        "ida"
    ],
    "user": "Quonux",
    "time": "Dec 27, 2014 at 19:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This looks a lot like a so-called 'this-adjustment stub'. These are needed in connection with multiple inheritance, to turn a pointer to one of the bases with non-zero offset into a this pointer of a more derived class. </p>\n<p>Note: tail-call optimisation can look very similar but in 32-bit mode it is nowhere near as ubiquitous as in 64-bit mode. In any case it would be possible to write a function call that looks exactly like your code once the compiler is done optimising, so the decision between this-adjustment and tail call optimisation is not cut and dried. Exception handling can also result in small funclets that look very similar, especially if there is only one object to be destroyed/unwound. Depending on circumstances, all of the things I mentioned can result in exactly the same object code.</p>\n<p>The best overview is probably igorsk's article on VC++ class layout:</p>\n<ul>\n<li><a href=\"http://www.openrce.org/articles/full_view/21\">Reversing Microsoft Visual C++ Part I: Exception Handling</a></li>\n<li><a href=\"http://www.openrce.org/articles/full_view/23\">Reversing Microsoft Visual C++ Part II: Classes, Methods and RTTI</a></li>\n</ul>\n</div>",
            "votes": "5",
            "user": "DarthGizka",
            "time": "Dec 27, 2014 at 19:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}