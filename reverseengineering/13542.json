{
    "title": "Question about IDA 6.8, also why its creating unnecessary vars",
    "link": "https://reverseengineering.stackexchange.com/questions/13542/question-about-ida-6-8-also-why-its-creating-unnecessary-vars",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>recently I've been learning to do RE.</p>\n<p>I made a simple program in 10 seconds that I was going to mess around with in IDA.</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char* argv[])\n{\n    printf(\"Hello, world!\\n\");\n\n    int i = 0;\n\n    if (i == 0)\n    {\n        printf(\"i == 0\\n\");\n    }\n    else\n    {\n        printf(\"i &gt; 0 OR i &lt; 0\\n\");\n    }\n\n    while (i == 0)\n    {\n        printf(\"I'm a while loop\\n\");\n        _sleep(510);\n    }\n}\n</code></pre>\n<p>As you can see its the main function. But when I go into IDA and click on start its not that function (assuming start is the main function, correct?)</p>\n<p>But, after clicking on a few functions in the function window I came across it. \nHere it is</p>\n<pre><code>int __cdecl __noreturn main(int argc, const char **argv, const char **envp)\n    {\n      char v3; // ST04_1@1\n      char v4; // [sp+0h] [bp-4h]@0\n      char v5; // [sp+0h] [bp-4h]@1\n\n      printf(\"Hello, world!\\n\", v4);\n      printf(\"i == 0\\n\", v3);\n      while ( 1 )\n      {\n        printf(\"I'm a while loop\\n\", v5);\n        sleep(0x1FEu);\n      }\n    }\n</code></pre>\n<p>I've already reversed most of it. (printf was originally sub_50505 or something like that).</p>\n<p>However, for some odd reason, its created unnecessary vars and I'm curious as to why it did that. It should've only created one, which is i.</p>\n<p>Also, why is it while (1) { ... }</p>\n<p>Shouldn't it by while (i == 0) { ... }?</p>\n<p>I'm curious about all these questions. Thanks! And sorry if they're silly. I'm new to RE! </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "230",
    "tags": [
        "c++"
    ],
    "user": "Verideth",
    "time": "Sep 22, 2016 at 0:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Welcome to RE.</p>\n<blockquote>\n<p>it created unnecessary vars and I'm curious as to why it did that</p>\n</blockquote>\n<p>The problem is with the printf function.</p>\n<p>Normally, when IDA encounters a function call, it looks up the function signature to know how many parameters are passed at which locations.</p>\n<p>In the case of the printf function, it is <strong>at least</strong> one parameter. In order to know how many parameters are passed, one would need to evaluate the format string. However, IDA doesn't and rather employs some heuristic to determine which part of the stack 'belongs' to this function call.</p>\n<p>Since the main function retrieves parameters </p>\n<pre><code>(int argc, const char **argv, const char **envp)\n</code></pre>\n<p>when invoked, IDA notices the stack contains something.</p>\n<blockquote>\n<p>Also, why is it while (1) { ... }</p>\n</blockquote>\n<p>Most probably your compiler optimized the code because he noticed i is never assigned anything else but 0. It also removed the 'dead code' in the else-clause. If you use gcc, try turning off optimization (e.g. -O0)</p>\n</div>",
            "votes": "2",
            "user": "Nordwald",
            "time": "Sep 22, 2016 at 6:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}