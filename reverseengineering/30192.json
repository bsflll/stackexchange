{
    "title": "Instructions to compare two strings",
    "link": "https://reverseengineering.stackexchange.com/questions/30192/instructions-to-compare-two-strings",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I made a list of which instructions compare two strings in disassembly so that when I get to intermodular calls in x64dbg, I can simply type this instructions to see if there is a comparison have been made. Unfortunately, I lost this list. Can someone get me these instructions please. I only remember <code>lstrcmpiA</code>.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "488",
    "tags": [
        "disassembly",
        "windows",
        "debugging",
        "x64dbg"
    ],
    "user": "Kıvanç Cantimur",
    "time": "Apr 2, 2022 at 11:26",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Do you mean <code>strcmp</code>?</span>",
            "time": null
        },
        {
            "user": "Kıvanç Cantimur",
            "text": "<span class=\"comment-copy\">Thank you... Are there few more instructions which compare two strings that has \"str\" or \"cmp\" in it?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@KıvançCantimur not exactly instructions. Those are functions you seem to be looking for.</span>",
            "time": null
        },
        {
            "user": "Kıvanç Cantimur",
            "text": "<span class=\"comment-copy\">I wonder if there is a method to set a breakpoint on every conditional state (ect... test eax, eax) in x64dbg or ollydbg?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@KıvançCantimur if you have another question, please use another question. This isn't a forum. It's a Q&amp;A site and there should be only questions and answers. Comments exist, but they aren't meant for extensive discussions. Turn to our <a href=\"https://reverseengineering.stackexchange.com/help\">help center</a> if you want to know more.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hmm this probably isn't an exhaustive list, but feel free to add to it:</p>\n<ul>\n<li>C runtime (header <code>&lt;string.h&gt;</code> or <code>&lt;cstring&gt;</code>:\n<ul>\n<li><code>strcmp</code>, <code>strncmp</code>, <code>wcscmp</code>, <code>wcsncmp</code> (with <code>&lt;wchar.h&gt;</code>)\n<ul>\n<li><em>case-insensitive</em>: <code>strcasecmp</code>, <code>strncasecmp</code>\n<ul>\n<li><code>wcscasecmp</code> (with <code>&lt;wchar.h&gt;</code>)</li>\n</ul>\n</li>\n<li>also known as: <code>stricmp</code>, <code>strcmpi</code></li>\n</ul>\n</li>\n<li><code>memcmp</code>, <code>wmemcmp</code> (with <code>&lt;wchar.h&gt;</code>), <code>bcmp</code> (unlikely on Windows)\n<ul>\n<li><code>memicmp</code> (and similar)</li>\n</ul>\n</li>\n<li>Depending on your runtime there may also be <code>l</code> varieties such as <code>strlcmp</code> of the aforementioned functions (<code>l</code> for length)</li>\n</ul>\n</li>\n<li>Windows API (header <code>winbase.h</code>):\n<ul>\n<li><code>lstrcmp</code> (expands to <code>lstrcmpA</code> <em>or</em> <code>lstrcmpW</code>)\n<ul>\n<li><em>case insensitive</em>: <code>lstrcmpi</code> (expands to <code>lstrcmpiA</code> <em>or</em> <code>lstrcmpiW</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Windows via <code>&lt;shlwapi.h&gt;</code>, offering different comparison semantics:\n<ul>\n<li><code>StrCmp</code> (expands to <code>StrCmpA</code> <em>or</em> <code>StrCmpW</code>)</li>\n<li><code>StrCmpC</code> (expands to <code>StrCmpCA</code> <em>or</em> <code>StrCmpCW</code>)</li>\n<li><code>StrCmpI</code> (expands to <code>StrCmpIA</code> <em>or</em> <code>StrCmpIW</code>)</li>\n<li><code>StrCmpIC</code> (expands to <code>StrCmpICA</code> <em>or</em> <code>StrCmpICW</code>)</li>\n<li><code>StrCmpNC</code> (expands to <code>StrCmpNCA</code> <em>or</em> <code>StrCmpNCW</code>)</li>\n<li><code>StrCmpNI</code> (expands to <code>StrCmpNIA</code> <em>or</em> <code>StrCmpNIW</code>)</li>\n<li><code>StrCmpNIC</code> (expands to <code>StrCmpNICA</code> <em>or</em> <code>StrCmpNICW</code>)</li>\n<li><code>StrCmpN</code> (expands to <code>StrCmpNA</code> <em>or</em> <code>StrCmpNW</code>)</li>\n</ul>\n</li>\n<li>Windows kernel mode and NT native:\n<ul>\n<li><code>RtlCompareUnicodeString</code></li>\n<li><code>RtlEqualUnicodeString</code></li>\n</ul>\n</li>\n</ul>\n<p>But in all likelihood you are looking for the C runtime ones. The <code>n</code> variety usually is counted (<code>n</code> being the number of characters)</p>\n<p>Also beware that there exist a number of related functions. E.g. with Windows conventionally you can build with <code>_UNICODE</code> defined or not, using <code>&lt;tchar.h&gt;</code>. This will then alias the respective \"bare\" function names to those with trailing <code>A</code> (ANSI) or <code>W</code> (wide character, i.e. \"Unicode\") version.</p>\n<p>On Windows you will also encounter instead of <code>str</code>...something (e.g. <code>strcmp</code>) <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/strcmp-wcscmp-mbscmp\" rel=\"nofollow noreferrer\">functions prefixed</a>:</p>\n<ul>\n<li><code>_tcs</code>, i.e. <code>_TCHAR</code>/<code>TCHAR</code> character string ... where the meaning toggles (via <code>&lt;tchar.h&gt;</code>) between <code>char</code> and <code>wchar_t</code> (if <code>_UNICODE</code> defined)</li>\n<li><code>_mbs</code>, i.e. multi-byte character string (code pages such as some Asian locales where a single byte isn't enough to represent one code point, which predates wide use of Unicode proper)</li>\n<li><code>wcs</code>, i.e. \"wide character string\"</li>\n</ul>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Mar 28, 2022 at 10:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kıvanç Cantimur",
                    "text": "<span class=\"comment-copy\">0xC0000022L, I tried each and every comparison function above but I couldn't find which function is responsible for comparing two strings. I want to crack the serial number. Is there have any other clue of how to find the functions if the \"String references\" window doesn't show any helpful strings to look for?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@KıvançCantimur it's hard to help any further without having a sample at hand. As far as a crack is concerned: it could be that your string is used as input to a function whose output is then compared to an expected value or range. It could just as well be that the respective functions have been inlined. In particular the C runtime functions will often have compiler runtime counterparts which will be used rather than an imported symbol (via DLL/shared object). But I am afraid without some actual code I cannot help. Also, please use a separate question (but feel free to reference this one).</span>",
                    "time": null
                }
            ]
        }
    ]
}