{
    "title": "How can a segfault happen during the libc exit call on Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/20450/how-can-a-segfault-happen-during-the-libc-exit-call-on-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm relatively new to reverse engineering, and I've decided to practise using the challenges from pwnable.tw. Currently, I am working on the <a href=\"https://pwnable.tw/challenge/\" rel=\"nofollow noreferrer\">\"Silver Bullet\" challenge</a>.</p>\n<p>While testing, I have noticed that if the program is run and the user selects option 4, then the program crashes with a segfault instead of exiting cleanly. Testing in GDB confirms that this happens during the \"call exit\" instruction at 0x08048954.</p>\n<p>Reading the manpage for exit, I can see that undefined behaviour can occur in certain circumstances when functions are registered with atexit(3) or on_exit(3). However, I can't see any functions being registered in this way, and I can't see any other way which exit would fail to execute successfully. Why is a segfault happening during the exit call?</p>\n<p>For reference, the surrounding code is:</p>\n<pre><code>0x080489F1: \npush    offset aDonTGiveUp ; \"Don't give up !\"\ncall    puts\nadd     esp, 4\npush    0\ncall    exit\npush    offset aInvalidChoice ; \"Invalid choice\"\ncall    puts\nadd     esp, 4\nnop\n</code></pre>\n<p>Thank you for taking the time to read this.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "317",
    "tags": [
        "assembly",
        "binary-analysis",
        "x86",
        "gdb",
        "libc"
    ],
    "user": "correcthrsbatterystpl",
    "time": "Jan 23, 2019 at 11:32",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">I am not able to reproduce this on my system - Debian 9(stretch). One of the reason could be that the stack space might be exhausted. A register dump would be great in that case.However I don't see any recursive calls, are you sure the ELF is compatible with your loader and libc?</span>",
            "time": null
        }
    ],
    "answers_data": []
}