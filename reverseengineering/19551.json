{
    "title": "EEPROM data bytes verification",
    "link": "https://reverseengineering.stackexchange.com/questions/19551/eeprom-data-bytes-verification",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm investigating a tool. I have an section of an eeprom memory dump that this tool uses, shown in the figure below. By my inquiries, the two bytes highlighted in red are based on the bytes highlighted in green, because when the tool I am investigating changes any of the bytes in the green section, the tool changes the two bytes in red. When I manually change the data in green the tool does not recognize the file.\nThere is a redundant section just below, which I did not highlighted. However, the same applies to it. When I make redundant modifications to these sections, the tool does not recognize the file too.\nThe remainder of the file, outside the highlighted sections and its redundant portion, can be reset and the tool continues to recognize the file.</p>\n<p><a href=\"https://i.sstatic.net/NoCxe.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NoCxe.png\"/></a></p>\n<p>I tried CRC-16, CRC-16 CCITT, xor operations every 2 bytes, for example: 0x2017 ^ 0x28B3 ^ 0x10DB ^ 0xB858 ...\nBut I did not find the values ​​highlighted in red. Anyone have any tips?</p>\n<p>[EDITED]</p>\n<p>I will put the numbers of the region in green here, maybe it can be more useful for those who want to help </p>\n<p>20 17 28 B3 10 DB B8 58 00 00 00 00 00 00 00 00\n54 48 AA 00 54 48 AA 00 00 00 00 00 00 00 00 00\n4A 7E 5E 0C 00 00 00 00 00 00 00 00 00 00 00 00\n00 7D 5E 6C 00 00 00 00 00 00 00 00 00 00 00 00\nCD 7E 85 5B 7A B4 A2 CC A0 5C 81 D2 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 CD 7E\n85 5B 7A B4 02 00 00 00 F9 E5 02 99 A6 1B 02 02\n00 00 01 00 00 80 6B 00 0D 4E 04 00 00 00</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "754",
    "tags": [
        "decryption",
        "crc",
        "memory-dump"
    ],
    "user": "Daniel",
    "time": "Oct 10, 2018 at 11:23",
    "comments": [
        {
            "user": "Twifty",
            "text": "<span class=\"comment-copy\">Did you account for endieness? IE 0x1720 ^ 0xB320 ...</span>",
            "time": null
        },
        {
            "user": "Daniel",
            "text": "<span class=\"comment-copy\">Yes, I tried, but it just change the endieness of the result. With the first I found 0x57ad, changing the endianness it became 0xad57.</span>",
            "time": null
        },
        {
            "user": "josh",
            "text": "<span class=\"comment-copy\">Why don't you try to reverse the \"tool\" you are investigating to find out about the algo being used?</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">It's hard to reverse engineer the algorithm from just <b>one</b> example. There should be some of them, ideally have low Hamming distance; or alternatively you can post the tool used and people can do either way.</span>",
            "time": null
        }
    ],
    "answers_data": []
}