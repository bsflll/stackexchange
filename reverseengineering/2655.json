{
    "title": "Debugging ARM binary with IDA Pro and Qemu",
    "link": "https://reverseengineering.stackexchange.com/questions/2655/debugging-arm-binary-with-ida-pro-and-qemu",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am debugging an ARM binary using IDA Pro by connecting to QEMU (remote gdb debugging).</p>\n<p>In gdb configuration, I am selecting <code>ARM_versatilepb</code> as the device.</p>\n<p>Now, I am able to successfully debug the ARM binary. However, I am unable to execute the syscalls like <code>fork()</code>, <code>socket()</code> and so on in the binary.</p>\n<p>I think the reason for this is that I am using a bare metal config of QEMU. So, how do I modify this configuration to have a full Linux system running on QEMU so that I can execute syscalls as well?</p>\n<p>There is another device name, ARM_Linux in the <code>gdb_arch.cfg</code> file of IDA Pro which has the <code>arm_root.img</code> parameter passed in the command line.</p>\n<p>I selected this device but even then, unable to execute the syscalls.</p>\n<p>The bare metal configuration I am using at present is detailed <a href=\"http://www.hexblog.com/?p=111\" rel=\"nofollow\">here</a>.</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ida"
    ],
    "user": "Neon Flash",
    "time": "Aug 19, 2013 at 12:18",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">For Qemu and ARM I'm not aware of such a thing, but there is such a mechanism to supply mock functions for Bochs-Debugging. Look inside <code>plugins/bochs</code> for more information. Igor is probably best suited to answer this. Perhaps no one ever asked for this feature?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It sounds like you are trying to emulate an ARM ELF binary by running it directly in qemu-system-arm, in which case the reason that syscalls don't work is that there is no Linux kernel to handle these syscalls. </p>\n<p>What you are probably looking for is qemu-arm, which runs the ARM binary as a normal ELF, translating ARM syscalls to your underlying Intel kernel. The qemu-arm emulator has a built-in GDB server that IDA can connect to.</p>\n<p>Alternatively, you can get an ARM Linux system (such as Debian, or maybe there's a raspi release designed to run in Qemu?) running in qemu-system-arm, at which point you can just copy your ELF binary to the Qemu VM and run it there. You can then attach IDA to the running process using GDB server or the Linux ARM debugging stub included with IDA.</p>\n</div>",
            "votes": "7",
            "user": "devttys0",
            "time": "Aug 19, 2013 at 11:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">here's a prepackaged raspbian qemu image ready to run <a href=\"http://sourceforge.net/projects/rpiqemuwindows/\" rel=\"nofollow noreferrer\">sourceforge.net/projects/rpiqemuwindows</a></span>",
                    "time": null
                }
            ]
        }
    ]
}