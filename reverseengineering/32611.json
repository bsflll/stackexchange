{
    "title": "Executable Opcodes of Windows Image File Seem Offset from My Calculations",
    "link": "https://reverseengineering.stackexchange.com/questions/32611/executable-opcodes-of-windows-image-file-seem-offset-from-my-calculations",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Background:</strong>\nI'm trying to manually disassemble a practice executable file for practice.\n<a href=\"https://github.com/stryker2k2/dbg-demo/blob/master/assem/assem_0x00.asm\" rel=\"nofollow noreferrer\">https://github.com/stryker2k2/dbg-demo/blob/master/assem/assem_0x00.asm</a></p>\n<p><strong>Issue:</strong>\nWhen I take a look at what I think should be the start of the executable code in the image file, the assembly instructions don't match the source assembly. Instead the opcodes that match the source assembly are located 0x140 further down in the file.</p>\n<p><strong>What I Did:</strong>\nLooking at the headers I determined the .text section virtual address to be 0x1000 at the file pointer 0x400. The size of the .text section is 0x3000. The entry point is 0x12D0. Knowing this I should be able to do 0x12D0 - 0x1000 + 0x400 to find the file pointer of the entry point as 0x6D0. My analysis with a disassembler says that the assembly from the source file actually starts at 0x810.</p>\n<p>What did I miss?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "55",
    "tags": [
        "disassembly",
        "windows",
        "pe"
    ],
    "user": "Liam Hanrahan",
    "time": "Jan 2, 2024 at 8:48",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">If you're following the directions listed in that linked .asm source and then trying to identify the code that's listed in that same source as your pattern, there's a small discrepancy between what you say you're looking for and where you're expecting it to be. Essentially, the directions suggest to link with a CRT, and the linked asm code exports its logic via the symbol <code>_main</code>. Hence, you won't find <code>_main</code> at the entrypoint, but rather the CRT which is directly responsible for calling <code>_main</code>.</span>",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "<span class=\"comment-copy\">You can find MinGW's CRT initialization in its source as <code>crtexe.c</code> and see if that matches your entrypoint, as it's that code should eventually be responsible for dispatching to <code>_main</code>.</span>",
            "time": null
        },
        {
            "user": "Liam Hanrahan",
            "text": "<span class=\"comment-copy\">I haven't been able to verify the assembly code but I noticed mingw32 is referenced in a string in the file so I think you are right.</span>",
            "time": null
        }
    ],
    "answers_data": []
}