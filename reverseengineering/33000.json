{
    "title": "C disassembly - bitwise operations with 0x7FFFFFFFFFFFFFFF and 0x8000000000000000",
    "link": "https://reverseengineering.stackexchange.com/questions/33000/c-disassembly-bitwise-operations-with-0x7fffffffffffffff-and-0x800000000000000",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using IDA to reverse engineer x86_64 binary file written in C. And pretty often I meet the following in IDA's pseudocode:</p>\n<ol>\n<li><code>(int64)v7 | 0x8000000000000000LL</code></li>\n<li><code>(int64)v7 &amp; 0x7FFFFFFFFFFFFFFFLL</code></li>\n</ol>\n<p>While researching I figured out that:</p>\n<ul>\n<li>0x7FFFFFFFFFFFFFFF is 9223372036854775807, which is signed long MAX value in C</li>\n<li>0x8000000000000000 is -9223372036854775808, which is signed long MIN value in C</li>\n</ul>\n<p>But I can't wrap my head around how to translate these bitwise operations with MIN and MAX into \"normal\" C coding pattern.</p>\n<p>Can anybody please explain ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "149",
    "tags": [
        "ida",
        "disassembly",
        "c"
    ],
    "user": "day_that_i_die",
    "time": "Nov 4, 2024 at 9:36",
    "comments": [
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\">the two functions set and clear the sign bit ... there is no reason to translate the two values to decimal</span>",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\">what do you mean by <code>\"normal\" C coding pattern</code>?</span>",
            "time": null
        },
        {
            "user": "day_that_i_die",
            "text": "<span class=\"comment-copy\">Could you please explain how these functions set and clear sign bit ?</span>",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "<span class=\"comment-copy\">research <code>C bitwise operators</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When you see such masks - remember these key rules for bitwise arithmetic\nAssume X is unknown, &amp; is bitwise AND, | is bitwise OR</p>\n<ul>\n<li>X &amp; 1 = X</li>\n<li>X &amp; 0 = 0</li>\n<li>X | 0 = X</li>\n<li>X | 1 = 1</li>\n</ul>\n<p>Now look at the mask and its operation. In this case</p>\n<p><code>v7 | 0x8000000000000000LL</code></p>\n<p>The mask</p>\n<pre class=\"lang-py prettyprint-override\"><code>In [1]: 0x8000000000000000 == 1 &lt;&lt; 63\nOut[1]: True\n</code></pre>\n<p>So in this case a 64 bit number - with the most significant bit (MSB) set and all other 0s</p>\n<pre><code>index - 63 62 61 ... 2 1 0\nbits  - 1  0  0  ... 0 0 0\n</code></pre>\n<p>The operation here is <code>|</code> - the bitwise OR\nWe don't know <code>v7</code> - we can assume it to be X. For individual bits <code>X_i</code> for <code>i</code> index</p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n<p>When bitwise OR is done -</p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\n</code></pre>\n<p>With the rules mentioned above - we can operate <code>X | 1 = 1</code></p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1 \n</code></pre>\n<p>for the rest unknown bits <code>X | 0 = X</code></p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1    X_62 X_61 ... X_2 X_1 X_0 \n</code></pre>\n<p>We can see that all of the bits of <code>result</code> is the same as <code>v7</code> except the MSB which is now 1.\nTherefore, <code>v7 | 0x8000000000000000LL</code> sets the MSB of <code>v7</code></p>\n<p>Similarly for <code>v7 &amp; 0x7FFFFFFFFFFFFFFFLL</code></p>\n<p>The mask is 0x7FFFFFFFFFFFFFFFLL, which has all bits set to 1 except for the most significant bit (MSB), which is 0.</p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbits  - 0    1    1    ... 1   1   1\n</code></pre>\n<p>We want to perform the bitwise AND operation between <code>v7</code> and the mask.</p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n<p>When we perform the bitwise AND operation:</p>\n<p>For each bit position, we apply the rule <code>X &amp; 1 = X</code> and <code>X &amp; 0 = 0</code></p>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 0    1    1    ... 1   1   1\nresult- 0    X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\n<p>The result retains all bits of <code>v7</code> except the MSB, which is now 0. Therefore, <code>v7 &amp; 0x7FFFFFFFFFFFFFFFLL</code> clears the MSB of <code>v7</code></p>\n<p>In signed values the MSB dictates the sign of the number - a set MSB means -ve and unset means a +ve number.</p>\n<p>Now if <code>v7</code> is a signed value - we can see the change in values with this python snippet</p>\n<pre class=\"lang-py prettyprint-override\"><code>In [9]: x = 0xabcdef1234567890\n\nIn [10]: ctypes.c_uint64(x &amp; 0x7FFFFFFFFFFFFFFF)\nOut[10]: c_ulong(3156441775323117712)\n\nIn [11]: (ctypes.c_int64(x &amp; 0x7FFFFFFFFFFFFFFF).value)\nOut[11]: 3156441775323117712\n\nIn [12]: ctypes.c_int64(x).value\nOut[12]: -6066930261531658096\n</code></pre>\n<p>With the MSB cleared the signed and unsigned values of the result is same.</p>\n<pre class=\"lang-py prettyprint-override\"><code>In [13]: (ctypes.c_int64(x | 0x8000000000000000).value)\nOut[13]: -6066930261531658096\n\nIn [14]: (ctypes.c_uint64(x | 0x8000000000000000).value)\nOut[14]: 12379813812177893520\n\nIn [15]: x\nOut[15]: 12379813812177893520\n</code></pre>\n<p>With the MSB set - the number stays as is if it was a signed negative earlier.</p>\n</div>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jun 4, 2024 at 8:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}