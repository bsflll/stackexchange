{
    "title": "binwalk zlib data [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/11918/binwalk-zlib-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/11918/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2016-02-02 18:22:40Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/11918/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm reversing  firmware and I get some problem with it.\nI used binwalk to reversing the firmware, but binwalk produced different result than to my friend. My friend found some zlib data (see <a href=\"https://i.sstatic.net/txzJ8.jpg\" rel=\"nofollow noreferrer\" title=\"my friend's reversing picture\">1</a>), but I could not find these zlib data items (see <a href=\"https://i.sstatic.net/bvKmM.jpg\" rel=\"nofollow noreferrer\" title=\"this is my reversing picture\">2</a>).</p>\n<p>I don't understand what is wrong, however I use <code>binwak -e</code> in the same way. I'm so confuse. </p>\n<p>My question is: how can I find the zlib data?</p>\n<p>Thanks.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "11k",
    "tags": [
        "binary-analysis",
        "tools",
        "firmware"
    ],
    "user": "Zarados",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Zarados",
            "text": "<span class=\"comment-copy\">[link] (<a href=\"http://imgur.com/T8yWsgJ\" rel=\"nofollow noreferrer\">imgur.com/T8yWsgJ</a>) &lt;= My friend's reversing picture</span>",
            "time": null
        },
        {
            "user": "Zarados",
            "text": "<span class=\"comment-copy\">[link] (<a href=\"http://imgur.com/AHFSgsW\" rel=\"nofollow noreferrer\">imgur.com/AHFSgsW</a>) &lt;= My reversing picture, and I use binwalk -e command is not different to this picture. I'm so confuse.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The differences between the binwalk results may be caused by the different version of the binwalk you use. So, check the version of your binwalk by simply running binwalk without any parameter.\nRegarding to the firmware, you cannot unpack the content using binwalk. To see why, check the start of the firmware. You will find a <code>0x20</code> bytes header starting with the <code>DLA50</code> string. This magic string and the header is repeated at offset <code>0x4020</code>, <code>0x8040</code> and so on. To see the structure of the header, check the following one from the middle of the firmware file:</p>\n<p><a href=\"https://i.sstatic.net/QPcNF.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/QPcNF.png\"/></a></p>\n<p>I marked the magic string (DLA50) with yellow, the position of the fragment with green and the size of the fragment with blue.</p>\n<p>The following script can follow the headers and extract the parts from the image:</p>\n<pre><code>import struct\nimport binascii\nimport sys\n\nif (len(sys.argv) &lt; 2):\n    print 'firm.py filename'\n    sys.exit(0)\n\nid = 0\nlast = 0\nidh = None\n\nbf = open(sys.argv[1], 'rb')\nwhile(True):\n    h = bf.read(0x20)\n    if (len(h) &lt; 0x20 or h[0:5] != 'DLA50'):\n        break\n    dpos = struct.unpack('L', h[0x14:0x18])[0]\n    dsize = struct.unpack('L', h[0x18:0x1c])[0]\n    print '%s, pos: %x, size: %x'%(binascii.hexlify(h), dpos, dsize)\n    d = bf.read(dsize)\n\n    if (last != 0x4000):\n        if (idh != None):\n            idh.close()\n        idh = open('%d.bin'%(id), 'wb')\n        id += 1\n\n    idh.write(d)\n    last = dsize\n\nidh.close()\n</code></pre>\n<p>The above script will extract the following parts:</p>\n<ul>\n<li><code>0-0x2865b</code>: Executable code, may be compressed with LZMA, LZO or something similar</li>\n<li><code>0x286d7-0x56f60</code>: File system, the individual files are also compressed</li>\n<li><code>0x56f60-0x5bdc0</code>: Possibly a configuration area</li>\n</ul>\n<p>The first part is starting with a <code>0x10</code> bytes header followed by a high entropy data. The header contains some flags or magic bytes and a data size, which I marked with blue in the next image. I can identify the size data item based on the size of the first part, which is <code>0x28555 = header size + 0x28545</code>.</p>\n<p><a href=\"https://i.sstatic.net/TlnWz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/TlnWz.png\"/></a></p>\n<p>The next part starts with the following bytes:</p>\n<p><a href=\"https://i.sstatic.net/iGuI4.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/iGuI4.png\"/></a></p>\n<p>The area started at <code>0x60</code> seems to contain file names, such as <code>501h1_uk.js</code> and so on, along with other binary data. So, this area may contain file entries. If it is true, the previous data (<code>0x00</code>-<code>0x60</code>) is a directory entry or a header. In this header area, you can found some interesting value in little-endian byte order. The <code>0x0002e709</code> (marked with blue) is equal with the file size. The <code>0x00000060</code> (marked with yellow) may point to the start of the file entries. The <code>0x00000d48</code> (marked with red) after the file entry offset may be another offset inside the file. So, after checking that offset in the file, it see that it points right after the directory entries, so it may by the starting offset of the data area.</p>\n<p>We have some guesses about the structure of the header, so let's check the file entries. If we suppose, that file names are started at the same position always inside a file entry, then we can calculate the size of one entry by subtracting the offset of two consecutive file names. Based on this calculation the file entry size will be <code>0x16</code> bytes.</p>\n<p>Similarly to the previous steps, after a little more research, we can conclude that the file entry area starts with the count of the files and every file entry contains the file name, file flags, relative position of the file data and the file size.</p>\n<p>Putting all together, the following script can extract the files from the second part of the firmware file:</p>\n<pre><code>import struct\nimport sys\n\nif (len(sys.argv) &lt; 2):\n    print 'parse_fs.py filename'\n    sys.exit(0)\n\nfh = open(sys.argv[1],'rb')\nh = fh.read(0x60)\nfs_size = struct.unpack('L', h[0x08:0x0c])[0]\noffset = struct.unpack('L', h[0x20:0x24])[0]\ndata_start = struct.unpack('L', h[0x24:0x28])[0]\n\nprint 'fs size: %x, dir offset: %x, data start: %x'%(fs_size, offset, data_start)\n\nfh.seek(offset)\nds = data_start-offset\nd = fh.read(ds)\ncount = struct.unpack('H', d[0:2])[0]\nfor i in xrange(count):\n    o = i*0x16+2\n    unk1 = struct.unpack('H', d[o+0x00:o+0x02])[0]\n    fname = d[o+0x02:o+0x0e]+'\\x00'\n    fname = fname[0:fname.find('\\x00')]\n    unk2 = struct.unpack('H', d[o+0x0e:o+0x10])[0]\n    pos = struct.unpack('L', d[o+0x10:o+0x14])[0]+data_start\n    size = struct.unpack('H', d[o+0x14:o+0x16])[0]\n    print '  %s, pos: %x, size: %x, unk1: %x, unk2: %x'%(fname, pos, size, unk1, unk2)\n\n    fh.seek(pos)\n    open('fs_%s'%(fname), 'wb').write(fh.read(size))\n</code></pre>\n</div>",
            "votes": "5",
            "user": "JoSSte",
            "time": "Jun 20, 2021 at 20:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zarados",
                    "text": "<span class=\"comment-copy\">Hey, Your response is awesome. I have the other question. How do you judgment fragment that is executable code or file system? In addition, what is the address 0x2865c util 0x286d6 doing? PS:I'm a beginner and I'm not nature speak. I try to express my question hardly. Thanks!!</span>",
                    "time": null
                },
                {
                    "user": "ebux",
                    "text": "<span class=\"comment-copy\">I edited my answer with some more details about the second part. The address between 0x2865c and 0x286d6 is a 2 byte long fragment, which possibly only a separator.</span>",
                    "time": null
                },
                {
                    "user": "Zarados",
                    "text": "<span class=\"comment-copy\">Hey, ebux! What tool is use to reversing this firmware? I mean what is the tool let you dismantling three parts? I use binwalk -e just dismantling two html files. I think it's useful. Thanks, and Happy New Year.</span>",
                    "time": null
                },
                {
                    "user": "ebux",
                    "text": "<span class=\"comment-copy\">I updated the answer with the script I created to parse the parts.</span>",
                    "time": null
                },
                {
                    "user": "Zarados",
                    "text": "<span class=\"comment-copy\">Hi, ebux! I find some overflow error in line 18. I use os.path.getsize() function and I get the file size is 376264. The offset is 2164228230 byte is larger than the file size. How can I fix the trouble? In fact I am not understand all of the code.</span>",
                    "time": null
                }
            ]
        }
    ]
}