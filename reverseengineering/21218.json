{
    "title": "Difficulty decrypting LCG string",
    "link": "https://reverseengineering.stackexchange.com/questions/21218/difficulty-decrypting-lcg-string",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to analyze some malware. To get the hang of it I am following the decoding process on <a href=\"https://www.proofpoint.com/us/threat-insight/post/In-The-Shadows\" rel=\"nofollow noreferrer\">this website</a>:</p>\n<p>Here is a description of the string encoding/decoding process:</p>\n<blockquote>\n<p>String encoding utilizes LCG fed by the new PRNG\n  algorithm, while the generated keys are then subtracted from each\n  ciphertext byte to generate the plaintext string. The first DWORD in\n  the encoded string is used as the seed, while that same value is\n  XORâ€™ed against the second DWORD to calculate the size of the encoded\n  string. The encoded string begins at the position after the second\n  DWORD. Most suspicious strings in the unpacked DLL are encoded\n  using this method.</p>\n</blockquote>\n<p>Here is the python PRNG method provided by the article that I am using:</p>\n<blockquote>\n<p>def prng(seed):\n               return ((seed * 0x41C64E6D) + 0x3039 ) &amp; 0xFFFFFFFF</p>\n</blockquote>\n<p>Then you are supposed to decrypt some encrypted traffic using a PHPSESSID cookie encoded with this scheme:</p>\n<p><a href=\"https://i.sstatic.net/jM96L.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/jM96L.png\"/></a></p>\n<p>I am only trying to turn the encoded cookie into the decoded cookie. However, I cannot replicate the results on my own. \nMy first problem is that I cannot seem to find the initial correct seed. I know it is supposed to be the first dword, but is it the dword of the cookie as it is (5C8EC19e) or, since this cookie is in ASCII, is the dword referring to the hex value of \"5C8E\"(35433845)? I have tried both ways, using the given algorithm, and cannot match the decoded string. </p>\n<p>I'm also confused because it seems like I can get pretty close to the decoded value by not using dwords at all. If I xor the first (5C) and second(8E) bytes of the encrypted cookie, I get D2, which is the appropriate number in the decoded cookie. If I continue xor-ing 5C with the next two numbers, C1 and 9E, I get 9D and C2, which are one off from the actual decoded values. Is this just a coincidence?</p>\n<p>TL;DR:\nThe PRNG algorithm is provided as the appropriate decryption function by the article I am following. The body of the HTTP message is encrypted using an RC4 key. The RC4 key is encoded within the PHPSESSID cookie. I believe, based on what I read in the article, that the RC4 key is decrypted from the PHPSESSID cookie using this PRNG function. It may be that the PRNG function is not the correct function for this - I can't get it to work. I just want to know how the encoded PHPSESSID is becoming the decoded PHPSESSID</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "818",
    "tags": [
        "decryption"
    ],
    "user": "lll",
    "time": "Apr 26, 2019 at 9:51",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">You may have misread the blogpost? Vawtrak used an LCG but is now using RC4. Your screenshot even shows \"RC4 key\". It also mentions traffic is LZMA-compressed sometimes. Your example is definitely from the updated version while it seems you are trying to decrypt it using the old method.</span>",
            "time": null
        },
        {
            "user": "lll",
            "text": "<span class=\"comment-copy\">Sorry, I was not clear. The  decryption algorithm is provided as the appropriate function by the article I am following. Yes, the body of the HTTP message is decrypted using an RC4 key. The RC4 key is encoded within the PHPSESSID cookie. I believe, based on what I read in the article, that the RC4 key is decrypted using this PRNG function.It may be that the PRNG function is not the correct function for this - I can't get it to work. I just want to know how the encoded PHPSESSID is becoming the decoded PHPSESSID.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found this paper that shed some light onto what's happening:</p>\n<p><a href=\"https://www.blueliv.com/downloads/technical-report-vawtrak-v2.pdf\" rel=\"nofollow noreferrer\">https://www.blueliv.com/downloads/technical-report-vawtrak-v2.pdf</a></p>\n<p>So I took the PHPSESSIONID from your screenshot and wrote this script:</p>\n<pre><code>import binascii\n\ndata = \"5C 8E C1 9E 61 66 6B 71 7F 80 8B 93 9E AA B7 C5\"\ndata = bytearray(binascii.unhexlify(data.replace(\" \",\"\")))\n\nk = data[0]\n\nfor i in range(1,len(data)):\n    data[i] ^= k\n    k += i\n\nprint(binascii.hexlify(data[1:]))\n</code></pre>\n<p>which prints</p>\n<pre><code>$ python test.py \nb'd29cc1030000000700020000000000'\n</code></pre>\n<p>and makes sense. The first 4 bytes then are the RC4 key.</p>\n</div>",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Apr 26, 2019 at 13:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}