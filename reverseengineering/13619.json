{
    "title": "open a non-standard compression .tar.lzma file extracted from firmware download",
    "link": "https://reverseengineering.stackexchange.com/questions/13619/open-a-non-standard-compression-tar-lzma-file-extracted-from-firmware-download",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We are trying to examine a firmware download for a product we have running on our local network.  Using the command</p>\n<pre><code>binwalk -Me filename\n</code></pre>\n<p>we generated a folder that contains the following content:</p>\n<pre><code>184A46C.cramfs\n276466C.cramfs\n6C.cramfs\nC2426C.cramfs\ncramfs-root/\ncramfs-root-0/\ncramfs-root-1/\ncramfs-root-2/\n</code></pre>\n<p>Binwalk appears to have opened the CramFS just fine.  So navigating into cramfs-root and running the file command, we see the following:</p>\n<pre><code>app.tar.lzma:    data\ncopy_logo:       data\ncramfs.img:      empty\ndvrCmd.tar.gz:   data\nhicore.tar.lzma: data\nhisi.tar.lzma:   data\nlogo.tar.lzma:   data\nmisc.tar.lzma:   data\nnew_10.bin:      data\nplayer.bin:      PE32 executable (GUI) Intel 80386, for MS Windows, UPX compressed\nstart.sh:        data\nuImage:          u-boot legacy uImage, Linux-3.0.8, Linux/ARM, OS Kernel     Image (Not compressed), 2854980 bytes, Tue Apr 14 10:16:02 2015, Load Address: 0x80008000, Entry Point: 0x80008000, Header CRC: 0x6C502F38, Data     CRC: 0xE9307D6E\nversion:         ASCII text\nwebs.tar.lzma:   data\n</code></pre>\n<p>Other than the uImage file, which apparently contains a linux kernel, most of the files here are apparently .tar.lzma files.  Attempting to open one of them as a normal .tar.lzma is not working for us.</p>\n<pre><code>tar --lzma -xvf logo.tar.lzma\nxz: (stdin): File format not recognized\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n</code></pre>\n<p>Trying something else:</p>\n<pre><code>unlzma logo.tar.lzma\nunlzma: Decoder error\n</code></pre>\n<p>lzmainfo seems to think it is valid, however, but it is calculating it as a laughably large, multi-petabyte file.  I am quite sure it is not.</p>\n<pre><code>lzmainfo logo.tar.lzma\n\nlogo.tar.lzma\nUncompressed size:             8351652399384 MB (8757342266336797407 bytes)\nDictionary size:               525 MB (2^29 bytes)\nLiteral context bits (lc):     0\nLiteral pos bits (lp):         2\nNumber of pos bits (pb):       4\n</code></pre>\n<p>I've uploaded the file <a href=\"http://ge.tt/18asCBf2\" rel=\"nofollow\">here</a> if you care to look at it.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "linux",
        "tools",
        "decompress"
    ],
    "user": "secure to a fault",
    "time": "Sep 30, 2016 at 0:50",
    "comments": [
        {
            "user": "secure to a fault",
            "text": "<span class=\"comment-copy\">We can infer that, ultimately, there is an image file somewhere in there.  So is there a known-plaintext technique that can be used to break the \"encryption\" (non-standard compression)?  Thanks.</span>",
            "time": null
        },
        {
            "user": "ebux",
            "text": "<span class=\"comment-copy\">I saw similar files in Hikvision firmware, where the tar.lzma files were encrypted.</span>",
            "time": null
        },
        {
            "user": "secure to a fault",
            "text": "<span class=\"comment-copy\">@ebux How do you know that the files were actually encrypted, rather than merely compressed in a non-standard way?  Is there a tool you can use to detect encryption, determine the cypher used, etc.?</span>",
            "time": null
        },
        {
            "user": "secure to a fault",
            "text": "<span class=\"comment-copy\">@ebux Also: although the .tar.lzma files are un-openable, the linux kernel is clearly visible in plain text.  Wouldn't it be possible to run the linux kernel in an emulator, and use the emulator to read the file system?  I opened the chassis, looked at the board, and googled the part numbers for chips I saw.  I didn't see any crypto devices on the board, so I'm going to assume that the decryption is implemented in the firmware image itself, in the plaintext portion.</span>",
            "time": null
        },
        {
            "user": "ebux",
            "text": "<span class=\"comment-copy\">In my case, the kernel contained an initramfs, which performed the decryption using a kernel device.</span>",
            "time": null
        }
    ],
    "answers_data": []
}