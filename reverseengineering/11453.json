{
    "title": "Hiding shared library calls from ltrace",
    "link": "https://reverseengineering.stackexchange.com/questions/11453/hiding-shared-library-calls-from-ltrace",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to implement some antidebug methods. Although I have encrypted texts, <code>ltrace</code> reveals them, for example:</p>\n<pre><code>strstr(\"Name:\\tltrace\\n\", \"ltrace\") \n</code></pre>\n<p>A solution would be static linking, but I do not want to statically link everything. Is there a way to select which functions to link statically, or to prevent <code>ltrace</code> from revealing these information?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "513",
    "tags": [
        "c",
        "dynamic-linking"
    ],
    "user": "robert",
    "time": "Dec 3, 2015 at 15:06",
    "comments": [
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">Thank you downvoter. Can you write a comment too or just pressing the downvote button?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Is there a way to select which functions to link statically</p>\n</blockquote>\n<p>That's a question for <a href=\"https://stackoverflow.com/\">https://stackoverflow.com/</a></p>\n<blockquote>\n<p>or to prevent <code>ltrace</code> from revealing these information</p>\n</blockquote>\n<p>You could have your program try to find and terminate running <code>ltrace</code> processes. But this has limited use if your process doesn't have sufficient privileges or if the user renames <code>ltrace</code> or if the user patches out (disables) your <code>ltrace</code>-termination code.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">(And as a side comment, having your program terminate or interfere with users' other processes at runtime is likely to make for very unhappy users.)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>ltrace</code> uses <code>ptrace</code> to patch instructions in the original binary to a breakpoint. This is specifically done to every <code>plt</code> entry in the dynamically linked binary. The <code>plt</code> entries contain a small piece of code to resolve and jump to the function being called.</p>\n<p>You can probably write code in your program to do the opposite and restore every breakpoint after <code>ltrace</code> has patched it. See <a href=\"https://gitlab.com/cespedes/ltrace/-/blob/main/sysdeps/linux-gnu/breakpoint.c?ref_type=heads#L41\" rel=\"nofollow noreferrer\"><code>arch_enable_breakpoint</code></a> in the <code>ltrace</code> source</p>\n</div>",
            "votes": "0",
            "user": "sudhackar",
            "time": "Aug 24, 2023 at 15:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}