{
    "title": "What is the difference between binary instrumentation and software breakpoints?",
    "link": "https://reverseengineering.stackexchange.com/questions/14618/what-is-the-difference-between-binary-instrumentation-and-software-breakpoints",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Don't be confused by a title of a question. Here is an explanation.</p>\n<p>Let's take Intel Pin. They claim that </p>\n<blockquote>\n<p>The best way to think about Pin is as a \"just in time\" (JIT) compiler.\n  The input to this compiler is not bytecode, however, but a regular\n  executable. Pin intercepts the execution of the first instruction of\n  the executable and generates (\"compiles\") new code for the straight\n  line code sequence starting at this instruction. It then transfers\n  control to the generated sequence.</p>\n</blockquote>\n<p>However, software breakpoint (according to Reversing: Secrets of Reverse Engineering by Eldad Eilam) is:</p>\n<blockquote>\n<p>Software breakpoints are instructions added into the program’s code by\n  the debugger at runtime. These instructions make the processor pause\n  program execution and transfer control to the debugger when they are\n  reached during execution.</p>\n</blockquote>\n<p>Basically both Intel PIN and e.g. OllyDBG does roughly similar things: altering the execution flow by inserting custom instruction. I know, that with PIN you can do much more then just pause under a certain condition, but it is not the point.</p>\n<p>So, my question is what is the key difference between JIT compilation (as in Intel PIN) and Software breakpoints (as in OllyDBG or any other debugger)?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "757",
    "tags": [
        "ollydbg",
        "breakpoint",
        "pintool"
    ],
    "user": "aGGeRReS",
    "time": "Feb 10, 2017 at 19:55",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<span class=\"comment-copy\">I think JIT is not relevant here. Pintool injects code into running process, it can also use software breakpoints. Am i wrong?</span>",
            "time": null
        },
        {
            "user": "aGGeRReS",
            "text": "<span class=\"comment-copy\">No, after NirIzr's answer I agree with you. My first topic title was not really precise.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Intel Pintool <strong>is not</strong> a JIT compiler. The explanation you quote just uses an analogy to JIT compilation, as there are logical similarities. IMHO this is not a well thought out analogy, and should be taken very lightly.</p>\n<p>I'll explain the three concepts in detail:</p>\n<h2><a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\" rel=\"nofollow noreferrer\">JIT Compilation</a></h2>\n<p>Indeed, the concept of JIT compilation is not really relevant to the question, but I'll go over it just the same:</p>\n<p>JIT compilation is mostly used as a performance improvement for interpreted languages, but some more advanced languages use it (examples are .Net and java).</p>\n<p>When a non-compiled code is executed, there's basically a loop processing each bytecode in a sequence (similar to how a Processor executes instructions one after the other). That loop basically implements byte code instructions to CPU instructions, modifying a state context (similar to CPU registers, only usually a lot bigger and higher-level).</p>\n<p>That process is slow compared to CPU instructions, and usually for no good reason - that was how interpreters were designed. Here comes JIT.\nThis is basically saying that instead of implementing a loop processing each bytecode instruction, it is possible for that loop to generate CPU instructions the first time it runs, and just execute those. To simplify things, JIT is a process of translating the language's bytecode to the CPU's instruction set just before executing the code, letting the CPU instructions run instead of the interpreter loop. Usually the compiled code is cached to it won't be compiled again.</p>\n<h2><a href=\"https://en.wikipedia.org/wiki/Breakpoint\" rel=\"nofollow noreferrer\">Software breakpoint</a></h2>\n<p>A software breakpoint is a specific instruction (in x86: <code>int 3</code>, encoded both as <code>0xcc</code> and <code>0xcd0x03</code>) that tells the CPU the user (in CPU terms, this usually means a developer) would like to know whenever it is executed and suspend the execution for further inspection. When it is hit an interrupt handling mechanism it triggered and the execution of the process is suspended by a debugger handling that interrupt. debuggers then usually let the developer inspect the code, modify it, and then resume execution. A debugger sets a software breakpoint by replacing a single instruction (or part of it) with a the software breakpoint interrupt, and sets it back to the original instruction when it later resumes execution.</p>\n<h2><a href=\"https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)\" rel=\"nofollow noreferrer\">Binary Instrumentation</a> (Pintool)</h2>\n<p>With Binary Instrumentation, a tool such as Pintool processes the code within a binary executable (similarly to how a JIT compiler processes a bytecode or script) and creates a \"fixedup\" or modified executable code, by inserting multiple types of additional code. This is usually done when breakpoints are not enough, or when you want to analyze a lot of an executable. Examples include modifying all <code>jump</code> instructions (say, to log the source and target of all  jumps, for example).</p>\n<p>As you said software breakpoints are quite limited compared to the abilities a binary instrumentation engine provides, so I focused on the technical implementation rather than the advantages of the two.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">Thank you for that great answer.  Here is my short summary (to check if I understood it correctly): Software breakpoints use specific CPU instruction to interrupt execution flow (as I understand it substitutes a particular command with 0x55), while Binary Instrumentation modifies executable code more significantly. So can we say, that Software breakpoint is just a special case of binary instrumentation?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">0xCC, not 0x55. Software breakpoints are not considered a simple case of binary instrumentation because placing those usually lacks the heavy part of processing a binary and generating new executable code. Youre correct on everything else.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Modern CPUs support branch tracing. That way to you don't have to modify anything to log all branches and their targets.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. That was merely an example.</span>",
                    "time": null
                }
            ]
        }
    ]
}