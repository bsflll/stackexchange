{
    "title": "Translating ida macros and pseudocode into C++/C",
    "link": "https://reverseengineering.stackexchange.com/questions/18697/translating-ida-macros-and-pseudocode-into-c-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What would be the translated C output of this hexrays decompiler pseudocode? The values of v6 and v5 are floats just as v8. The value of xmmword_108365D0 is 7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFFh</p>\n<pre><code>v8 = (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v6 - v5) &amp; xmmword_108365D0) - 4.0) * 0.16666667;\n</code></pre>\n<p>I'm not sure how to go about translating these macros into C. </p>\n<p><code>andps   xmm0, ds:xmmword_108365D0 ; xmm0 = xmm0 &amp; xmmword_108365D0\n subss   xmm0, ds:dword_10835A68 ; xmm0 -= 4.0\n mulss   xmm0, ds:dword_1083538C ; xmm0 *= 0.16666667</code></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "504",
    "tags": [
        "ida",
        "decompilation",
        "c++",
        "c",
        "hexrays"
    ],
    "user": "Bruce Hansworth",
    "time": "Jul 6, 2018 at 21:46",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">press Tab to see the corresponding assembly code.</span>",
            "time": null
        },
        {
            "user": "Bruce Hansworth",
            "text": "<span class=\"comment-copy\">@Igor Skochinsky Looking at the assembly this is the code I generated. It does actually use andps to and the xmm0 register with that value. <code>float v8 = ( ( float ) ( ( ( uint32_t ) ( v6 - v5 ) ) &amp; 0x7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF ) - 4.0 ) * 0.16666667; </code>This shows that IDA was right. However, the constant used for AND is too large according to my compiler. What is the solution to this?</span>",
            "time": null
        },
        {
            "user": "Bruce Hansworth",
            "text": "<span class=\"comment-copy\">@Biswapriyo attatched assembly in topic</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>andps</code> stands for \"Bitwise Logical AND of Packed Single Precision Floating-Point Values\", i.e. the contents of the register is interpreted as four separate single precision (32-bit) values and a bitwise AND operation is performed using the second operand as the mask. Since floats do not have bitwise operations defined, the CPU performs it on the raw values in the registers as if they were just a stream of bits. I.e. the result of</p>\n<p><code>andps   xmm0, ds:xmmword_108365D0</code> </p>\n<p>is similar  to the following operations:</p>\n<pre><code> xmm0.m128i_u32[0] &amp;= 0x7FFFFFFF;\n xmm0.m128i_u32[1] &amp;= 0x7FFFFFFF;\n xmm0.m128i_u32[2] &amp;= 0x7FFFFFFF;\n xmm0.m128i_u32[3] &amp;= 0x7FFFFFFF;\n</code></pre>\n<p>executed simultaneously (<code>m128i_u32</code> here represents the contents of the xmm register as an array of four unsigned 32-bit integers). </p>\n<p>Since the <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" rel=\"nofollow noreferrer\">IEEE floating-point format</a> uses most significant bit (bit 31) as the sign of the value, and this operation clears this bit, obviously this operation makes the number always positive, i.e. it's an equivalent of <code>fabs()</code>. </p>\n<p>The following two operations (<code>subss</code> and <code>mulss</code> are of the \"Scalar Single-Precision\" category, i.e. they use only the low 32 bits of the register as the floating-point value, that's why the decompiler tried to convert the calculation to a single float, however it could not discard the <code>andps</code> operation because it is performed on the whole register, which resulted in the ugly cast sequence. So, if we replace the <code>&amp;</code> by <code>fabs</code>, the \"correct\" expression is probably this:</p>\n<pre><code>v8 = (fabs(v6 - v5) - 4.0) / 6;\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jul 7, 2018 at 21:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}