{
    "title": "Identifying DeviceIoControl argument",
    "link": "https://reverseengineering.stackexchange.com/questions/13786/identifying-deviceiocontrol-argument",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reversing an application that uses the serial interface (COM1 port) and am using API Monitor to trace through the API calls.</p>\n<p>I found a reference to <code>CreateFileA(\"\\\\.\\Commsb96\", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)</code>. I believe this is opening the serial port.</p>\n<p>Shortly afterwards, the code runs <code>DeviceIoControl</code>, with the <code>dwIoControlCode</code> (second parameter) set to <code>0x0022002b</code>.</p>\n<p>API Monitor identified that as IOCTL_INTERNAL_USB_RECORD_FAILURE. Given that this is not a USB device, I suspect this is a mislabeling. If so, how do I identify what <code>0x0022002b</code> is?</p>\n<p>And if not, what the heck is IOCTL_INTERNAL_USB_RECORD_FAILURE. The calling DLL is VcomSB96.dll.</p>\n<p>Thank you!</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "438",
    "tags": [
        "windows",
        "debuggers",
        "winapi"
    ],
    "user": "Farhan Yusufzai",
    "time": "Oct 22, 2016 at 2:24",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">These are probably <b>not</b> COM devices. COM device descriptor names are in the format of \"\\\\.\\COM1\". where the digit 1 represents the COM device id. Is it possible that the application loads it's own driver?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">According to <a href=\"http://social.technet.microsoft.com/wiki/contents/articles/24653.decoding-io-control-codes-ioctl-fsctl-and-deviceiocodes-with-table-of-known-values.aspx?Sort=MostUseful&amp;PageIndex=1\" rel=\"nofollow noreferrer\">Microsoft</a>, <code>0x0022002b</code> is also <code>IOCTL_BTHHFP_STREAM_OPEN</code> which hints at a bluetooth device. Are you sure that's a real com port, or rather a bluetooth adapter that emulates RS232 over bluetooth? I found this by googling for 0x0022002b; in many cases googling for this kind of specific magic number yields something useful.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As Nirlzr said, this was not a <strong>COM1</strong> device. It was a virtual device, which functioned as an intermediary to the actual COM1 interface.\nI debugged the .sys file, which was just using IOCTL_INTERNAL_USB_RECORD_FAILURE, but was merely using that IOCTL command.</p>\n</div>",
            "votes": "1",
            "user": "Farhan Yusufzai",
            "time": "Oct 24, 2016 at 14:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The meaning of any one Device I/O Control code is subject to some convention. Microsoft defines the code in bit fields, the most notable of which is the high word as a device type. Microsoft defines many I/O control codes for many types of device. If a driver is executing to handle that type of device, it should expect to receive those corresponding I/O control codes and to interpret them as Microsoft defines. These I/O control codes are in this sense well-defined such that if you or a diagnostics tool see one, identifying it by a known symbolic value is sound. </p>\n<p>However, drivers can create device objects that have nothing to do with hardware. Such devices won't be the target for any device I/O control to help with managing any type of device that the system knows or cares about, and so the driver can make up whatever I/O control codes it wants. This is a long established mechanism by which drivers communicate with a co-operating application. </p>\n<p>Conventionally, I/O control codes that are invented for this purpose tend to have 0x0022, i.e., FILE_DEVICE_UNKNOWN, as the device type. The practical consequence for you in your reverse engineering is that the same device I/O control code that has 0x0022 as the high word can mean completely unrelated things to different devices, even if implemented in the same driver. </p>\n<p>Now, Microsoft does muddy the water a little by using FILE_DEVICE_UNKNOWN for I/O control codes that can be sent to drivers for physical devices. But unless you or your diagnostics tool know that you're looking at a driver that's in place to receive those I/O control codes, any symbol that the tool resolves a 0x0022XXXX number to is very likely a fantasy that you do better to ignore. </p>\n</div>",
            "votes": "1",
            "user": "Geoff Chappell",
            "time": "Jan 2, 2017 at 19:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}