{
    "title": "Why do those useless instruction are in Rust final binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/25537/why-do-those-useless-instruction-are-in-rust-final-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently reversing RUST binaries, and I often come across this block of instruction :</p>\n<pre><code>.text:000055F4BFB943F2 db      2Eh\n.text:000055F4BFB943F2 nop     word ptr [rax+rax+00000000h]\n.text:000055F4BFB943FC nop     dword ptr [rax+00h]\n</code></pre>\n<p>Which probably does nothing. I can see the rogue byte at the beginning, but pressing <code>C</code> on IDA to disassemble from there gives no result. Thus, I am wondering why rust compiler create those instructions as they appear to be useless.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "525",
    "tags": [
        "disassembly",
        "compilers",
        "compiler-optimization"
    ],
    "user": "Qwark",
    "time": "Jul 23, 2020 at 11:35",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"Block of instructions\": are you sure this appears inside an executable flow? It looks like inter-function <i>padding</i>, nothing more. Padding is not \"useless\", although the instructions themself are. (And that \"rogue byte\" is just a segment override.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These are instructions used for alignment. You can see that the last instruction ends on a 16-byte boundary (<code>000055F4BFB94400</code>).</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jul 27, 2020 at 13:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}