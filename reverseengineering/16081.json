{
    "title": "How to generate the call graph of a binary file?",
    "link": "https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a non-stripped ELF binary for which I want to create a call graph as a <a href=\"https://en.wikipedia.org/wiki/DOT_(graph_description_language)\" rel=\"noreferrer\">dot</a> file. Is there such a tool which generates the call graph?</p>\n<p>EDIT: Is there away in addition to the conventional call graph to find a call graph between libraries based on the executable. For example showing the call graph only of from <code>libc</code> to <code>pthread</code>.</p>\n</div>",
    "votes": "18",
    "answers": 4,
    "views": "16k",
    "tags": [
        "binary-analysis",
        "elf",
        "call-graph"
    ],
    "user": "0x90",
    "time": "Aug 6, 2018 at 15:05",
    "comments": [
        {
            "user": "0x90",
            "text": "<span class=\"comment-copy\">Another option would be: <a href=\"https://rizin.re\" rel=\"nofollow noreferrer\">rizin.re</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://github.com/radare/radare2\" rel=\"noreferrer\">radare2</a> or one of the alternatives below to generate a full call-graph in dot format.  </p>\n<h2>radare2 Installation</h2>\n<p>First of all, install radare2 from git repository:</p>\n<pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\n<h2>Analysis</h2>\n<p>After you've downloaded and installed radare2, open your binary and perform analysis on it using the <code>aaa</code> command:</p>\n<pre><code>$ r2 /bin/ls\n[0x004049a0]&gt; aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\n<h2>Output visual graph</h2>\n<p>The <code>ag</code> command and subcommands can help you to output the visual graph into <a href=\"http://www.webgraphviz.com/\" rel=\"noreferrer\">Graphviz</a> format.</p>\n<pre><code>[0x00000000]&gt; ag?\nUsage: ag&lt;graphtype&gt;&lt;format&gt; [addr]\nGraph commands:\n| aga[format]             Data references graph\n| agA[format]             Global data references graph\n| agc[format]             Function callgraph\n| agC[format]             Global callgraph\n| agd[format] [fcn addr]  Diff graph\n| agf[format]             Basic blocks function graph\n| agi[format]             Imports graph\n| agr[format]             References graph\n| agR[format]             Global references graph\n| agx[format]             Cross references graph\n| agg[format]             Custom graph\n| ag-                     Clear the custom graph\n| agn[?] title body       Add a node to the custom graph\n| age[?] title1 title2    Add an edge to the custom graph\n\nOutput formats:\n| &lt;blank&gt;                 Ascii art\n| *                       r2 commands\n| d                       Graphviz dot\n... &lt;truncated&gt; ...\n| w [path]                Write to path or display graph image (see graph.gv.format and graph.web)\n</code></pre>\n<p>You're searching for the <code>agCd</code> command. The <code>C</code> specifies to output a full (\"global\") call-graph of the program. The <code>d</code> specifies to output in Graphviz dot format.</p>\n<pre><code>[0x004049a0]&gt; agCd &gt; output.dot\n</code></pre>\n<p>The <code>dot</code> utility is part of the Graphviz software which can be installed using <code>sudo apt-get install graphviz</code>.<br/>\nYou can view your output in any offline <a href=\"http://www.graphviz.org/content/resources\" rel=\"noreferrer\"><em>dot</em> viewer</a>, paste the output into an <a href=\"http://www.webgraphviz.com/\" rel=\"noreferrer\">online Graphviz viewer</a> and even convert the <em>dot</em> file to PNG:  </p>\n<pre><code>$ r2 /bin/ls\n[0x004049a0]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x004049a0]&gt; agCd &gt; output.dot\n[0x004049a0]&gt; !!dot -Tpng -o callgraph.png output.dot\n</code></pre>\n<p>To read more about radare2 it is recommended to read <a href=\"https://radare.gitbooks.io/radare2book\" rel=\"noreferrer\">radare2 book</a>.</p>\n<hr/>\n<h2>Alternatives</h2>\n<ul>\n<li><p><strong><a href=\"https://github.com/onlyuser/gen-callgraph\" rel=\"noreferrer\">gen-callgraph</a></strong> - gen-callgraph is a script to generate call graph from elf binary</p></li>\n<li><p><strong><a href=\"https://www.hex-rays.com/products/ida/\" rel=\"noreferrer\">IDA Pro</a></strong> - generate GDL (Graph Description File) call graph using CTRL+F12, save it and then convert it to <em>dot</em> file with one of the following options:</p>\n<ul>\n<li><p><a href=\"http://search.cpan.org/~tels/Graph-Easy/bin/graph-easy\" rel=\"noreferrer\">graph-easy</a> - Convert between graph formats</p></li>\n<li><p>This <a href=\"https://wiki.multimedia.cx/index.php/IDA_Pro#Converting_gdl_flow_graphs_to_dot_files\" rel=\"noreferrer\">perl script</a> from Multimedia Wiki</p></li>\n</ul></li>\n</ul>\n<p><em>The <a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"noreferrer\">free version</a> of IDA is also capable of generate GDL of call graph but it is only available as exe, use wine on Linux to run it</em></p>\n</div>",
            "votes": "21",
            "user": "devtty1er",
            "time": "Sep 24, 2018 at 8:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">Is there away to get a call graph between libraries or files rather call graph between functions?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">You can use <code>il</code> to get libraries used by the binary or <code>rabin2 -l /bin/ls</code> which is the same</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">I don't know of a command to generate a call graph of only libraries, sorry</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might want to give <a href=\"http://angr.io\" rel=\"noreferrer\">angr</a> a try.</p>\n<ul>\n<li>Load the binary. Suppose <code>p</code> is the angr Project instance.</li>\n<li>Generate a CFG: <code>cfg = p.analyses.CFG(show_progressbar=True)</code>.</li>\n<li>Access/traverse the call graph (which is a networkx.DiGraph) in whatever way you want: <code>cfg.functions.callgraph</code>.</li>\n</ul>\n<blockquote>\n<p>For example showing the call graph only of specific address range or specific static library</p>\n</blockquote>\n<p>You can limit the range of CFG generation by passing the <code>regions</code> argument to <code>CFG()</code>.</p>\n</div>",
            "votes": "8",
            "user": "Fish",
            "time": "Aug 16, 2017 at 23:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use angr-utils in order to generate the graph from angr : <a href=\"https://github.com/axt/angr-utils\" rel=\"nofollow noreferrer\">https://github.com/axt/angr-utils</a></p>\n<p>For more information please see:</p>\n<p><a href=\"https://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md\" rel=\"nofollow noreferrer\">https://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md</a></p>\n<p><a href=\"https://i.sstatic.net/ca0T3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ca0T3.png\"/></a></p>\n</div>",
            "votes": "3",
            "user": "Peter Teoh",
            "time": "Dec 26, 2021 at 0:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You should elaborate a bit...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check out <a href=\"http://valgrind.org/docs/manual/cl-manual.html\" rel=\"nofollow noreferrer\">Callgrind</a> or <a href=\"https://kcachegrind.github.io/html/Home.html\" rel=\"nofollow noreferrer\">KCachegrind</a>. Much simpler than any other alternative.</p>\n</div>",
            "votes": "2",
            "user": "yaspr",
            "time": "Jan 4, 2020 at 9:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rfabbri",
                    "text": "<span class=\"comment-copy\">but are these static analyzers? or only report what is called in some typical run?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Callgrind is based on Valgrind, a serializing dynamic analysis framework.</span>",
                    "time": null
                }
            ]
        }
    ]
}