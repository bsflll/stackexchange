{
    "title": "What factors affect the base address of a shared object?",
    "link": "https://reverseengineering.stackexchange.com/questions/32014/what-factors-affect-the-base-address-of-a-shared-object",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking at a CVE for an old thrift shop router that amounts to a stack based buffer overflow with no <code>NULL</code> characters allowed. I can control the instruction pointer register as well as a few less useful registers. My goal is to perform a stack pivot to something I control. The router runs on MIPS big endian architecture so I can't leave the last 8 bits of a payload empty to get a leading <code>NULL</code> in an address. e.g. 0x00XXXXXX. I'm left to look for gadgets in shared objects (or the stack if cache flushed). I find that shared objects are generally loaded at higher addresses that make use of all 32 bits of the address. I cannot use gadgets from the vulnerable process because it was not compiled with <code>-fpie</code> and it loads at the same address with a leading <code>NULL</code> every time.</p>\n<p>If I consistently want to be able to use gadgets in a shared object, it will need to be loaded with the same base address most of the time. Assuming no ASLR (not enabled on my router), what determines where a shared object will be loaded?</p>\n<p>If I run <code>ldd</code> on the target binary, I get this:</p>\n<pre><code>$ mips-linux-ldd squashfs-root/sbin/my_binary\n    /lib/ld-uClibc.so.0 =&gt; /lib/ld-uClibc.so.0 (0x00000000)\n</code></pre>\n<p>Not super useful. I know that <code>ld-uClibc.so.0</code> doesn't get loaded at <code>0x00000000</code> and that there are several other libraries that get loaded for this process (not <code>dlopen</code>'ed) which are not listed. Perhaps the non-useful output is a toolchain thing or due to the fact that I'm not running on the target architecture.</p>\n<p>Under the hood, I'd think we're looking at <code>mmap</code> logic.</p>\n<p>I found this in an article from Oracle:</p>\n<blockquote>\n<p>An executable or shared object file's base address is calculated during execution from three values: the memory load address, the maximum page size, and the lowest virtual address of a program's loadable segment</p>\n</blockquote>\n<p>To me it seems like these things would never change when working with a specific firmware version where the binaries can always be expected to be the same.</p>\n<p>My questions are:</p>\n<ul>\n<li>Will shared objects get loaded in the same place every time on a Linux system with ASLR disabled?\n<ul>\n<li>Is the mapping deterministic?</li>\n</ul>\n</li>\n<li>What factors, if any will make the shared object map to a different address?\n<ul>\n<li>Perhaps 2 libraries conflict in a preferred address</li>\n</ul>\n</li>\n<li>Iff library loading is deterministic, can I assume the shared object will always be at the same address after checking once? The word <em>deterministic</em> answers my own question, but I want to be clear.</li>\n</ul>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "67",
    "tags": [
        "linux",
        "exploit",
        "mips",
        "libraries"
    ],
    "user": "Matthew Tingum",
    "time": "Jul 1, 2023 at 1:57",
    "comments": [],
    "answers_data": []
}