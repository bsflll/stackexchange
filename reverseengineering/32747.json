{
    "title": "How can I change the data type of `puVar1` in this C++ function?",
    "link": "https://reverseengineering.stackexchange.com/questions/32747/how-can-i-change-the-data-type-of-puvar1-in-this-c-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was <code>reversing</code> ( <em>new to the reversing world of course</em>) being using <code>Ghidra</code> for this. I get a C++ function <code>AppChat::__Status::setDescription(ErrorCode param_1)</code>. Within this function, there's a variable <code>puVar1</code> declared as <code>undefined8 *</code>. However, I need to change the data type of <code>puVar1</code> to a different type like <code>char</code> to better format its usage in the code. I mean for example, the variable <code>*pcVar3;</code> which the <code>decompiler</code> defines as <code>char</code> is presenting the string as expected in the code. but the variable <code>puVar</code> is not.</p>\n<p>Here is the relevant code:</p>\n<pre><code>void AppChat::__Status::setDescription(ErrorCode param_1)\n\n{\n  undefined8 *puVar1;\n  undefined8 *in_x8;\n  undefined8 uVar2;\n  char *pcVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  \n  switch(param_1) {\n  case 0x26ac:\n    *(undefined *)in_x8 = 0x1a;\n    *(undefined8 *)((long)in_x8 + 6) = 0x726f727265206e77;\n    *(undefined8 *)((long)in_x8 + 1) = 0x206e776f6e6b6e55;\n    *(undefined *)((long)in_x8 + 0xe) = 0;\n    break;\n  case 0x26ad:\n    puVar1 = (undefined8 *)operator.new(0x40);\n    in_x8[1] = 0x36;\n    *in_x8 = 0x41;\n    in_x8[2] = puVar1;\n    *(undefined8 *)((long)puVar1 + 0x2e) = 0x746e65696c437461;\n    puVar1[3] = 0x54202e6465727567;\n    puVar1[2] = 0x69666e6f6320746f;\n    puVar1[5] = 0x7461684320707574;\n    puVar1[4] = 0x6573206f74207972;\n    puVar1[1] = 0x6e207369206e6f69;\n    *puVar1 = 0x746163696c707041;\n    *(undefined *)((long)puVar1 + 0x36) = 0;\n    break;\n  case 0x26ae:\n    *(undefined *)in_x8 = 0x1e;\n    in_x8[1] = 0x74756f656d697420;\n    *(undefined8 *)((long)in_x8 + 1) = 0x2074736575716552;\n    *(undefined *)(in_x8 + 2) = 0;\n    break;\n  case 0x26af:\n    puVar1 = (undefined8 *)operator.new(0x30);\n    in_x8[2] = puVar1;\n    *(undefined4 *)((long)puVar1 + 0x1f) = 0x74737269;\n    in_x8[1] = 0x23;\n    *in_x8 = 0x31;\n    puVar1[1] = 0x70202c6465746365;\n    *puVar1 = 0x6e6e6f6320746f4e;\n    puVar1[3] = 0x6966207463656e6e;\n    puVar1[2] = 0x6f6320657361656c;\n    *(undefined *)((long)puVar1 + 0x23) = 0;\n    break;\n  case 0x26b0:\n    puVar1 = (undefined8 *)operator.new(0x20);\n    pcVar3 = \"Network connection error\";\n    goto LAB_003191e8;\n  case 0x26b1:\n    puVar1 = (undefined8 *)operator.new(0x20);\n    in_x8[2] = puVar1;\n    in_x8[1] = 0x17;\n    *in_x8 = 0x21;\n    *(undefined8 *)((long)puVar1 + 0xf) = 0x656c696620656874;\n    puVar1[1] = 0x74206e65706f2074;\n    *puVar1 = 0x6f6e20646c756f43;\n    *(undefined *)((long)puVar1 + 0x17) = 0;\n    break;\n  default:\n    if (param_1 == 0x1f7) {\n      *(undefined *)in_x8 = 0x26;\n      *(undefined4 *)(in_x8 + 2) = 0x454c4241;\n      *(undefined8 *)((long)in_x8 + 9) = 0x414c494156414e55;\n      *(undefined8 *)((long)in_x8 + 1) = 0x2045434956524553;\n      *(undefined *)((long)in_x8 + 0x14) = 0;\n      return;\n    }\n    if (param_1 != 0x4b3) {\n      *(undefined2 *)in_x8 = 0;\n      return;\n    }\n    puVar1 = (undefined8 *)operator.new(0x20);\n    pcVar3 = \"The file size is too big\";\nLAB_003191e8:\n    uVar2 = *(undefined8 *)((long)pcVar3 + 0x10);\n    uVar5 = *(undefined8 *)((long)pcVar3 + 8);\n    uVar4 = *(undefined8 *)pcVar3;\n    in_x8[2] = puVar1;\n    in_x8[1] = 0x18;\n    *in_x8 = 0x21;\n    puVar1[2] = uVar2;\n    puVar1[1] = uVar5;\n    *puVar1 = uVar4;\n    *(undefined *)(puVar1 + 3) = 0;\n  }\n  return;\n}\n</code></pre>\n<p><strong>so far</strong> I tried to select the variable <code>puVar1</code> in the <code>ghidra</code> decompiler then right clicked I choose <code>retype variable</code> and set <code>data type</code> as  <code>char *</code> but it creates as new variable and changes the <code>data</code> held in <code>pVar1</code> to <code>pVar2</code> with <code>undefined8</code></p>\n<p><a href=\"https://i.sstatic.net/8cgf3.png\" rel=\"nofollow noreferrer\"><img alt=\"choosing retype variable option\" src=\"https://i.sstatic.net/8cgf3.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/dL59y.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/dL59y.png\"/></a></p>\n<p>so I am doing slightly something wrong as I believe. the variable <code>pcVar3</code> holds the string data as readable like for example <code>Network connection error</code>. but the variable <code>puVar1</code> is not held in a format such that the data can be read. like for example it holds <code>0x746163696c707041</code> and if changed to <code>character</code> it reads as <code>tacilppA</code> which is reverse order of the string as expected. this has to do with <code>little endianness</code> I am new to this reversing on the platform. so my question is how can I re adjust the variable as it seem in the code as <code>char array</code>? is data type change needed?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "166",
    "tags": [
        "disassembly",
        "c++",
        "ghidra",
        "android",
        "api-reversing"
    ],
    "user": "hanan",
    "time": "Mar 22, 2024 at 11:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No, unfortunately, you cannot change the data type for some underlying reasons. There is a good explanation <a href=\"https://github.com/NationalSecurityAgency/ghidra/discussions/2564\" rel=\"nofollow noreferrer\">here</a> from one of the developper (<code>emteere</code>):</p>\n<blockquote>\n<p>The <code>undefined</code> datatypes are used to note an access of a size without knowing the real type, or the existence of a parameter without locking in the type. They are really placeholder types. The decompiler is free to propagate a type and replace the undefined with a good type for all undefined types. In addition, undefined types defined in memory can be replaced with a more specific type by algorithms.</p>\n<p>If the decompiler were to use <code>uint8_t</code>, that could be incorrect as the type might be signed. It all depends on the access. The decompiler will try to replace the type with a correct type based on the access or use. Absent any other type information than a size, especially when accessing through an unknown pointer type, the decompiler will display undefined. If the pointer points to a structure or class, the decompiler is more likely to use <code>uint</code>, <code>char</code>, <code>byte</code>, etc... as the type for local variables and parameters.</p>\n<p>There is a setting to disable type casts, which could help improve default display if you don't specify types for parameters which you could try as well.</p>\n</blockquote>\n</div>",
            "votes": "0",
            "user": "perror",
            "time": "Mar 20, 2024 at 14:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}