{
    "title": "How to get Assembly source from Bin file?",
    "link": "https://reverseengineering.stackexchange.com/questions/30268/how-to-get-assembly-source-from-bin-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a binary file which is coded in assembly x86 and compiled with nasm. I used command</p>\n<pre><code>nasm file.asm -f bin -o file.bin\n</code></pre>\n<p>to compile it with nasm.\nI deleted the source code from disk long time ago, but now I need that.</p>\n<p>Is there any way to reverse the binary file?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Galaxy226",
    "time": "Apr 18, 2022 at 16:45",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Can you share the bin file?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to <a href=\"https://www.nasm.us/xdoc/2.10rc8/html/nasmdoc7.html\" rel=\"nofollow noreferrer\">nasmdoc</a>\nthe bin file doesn't have a definite structure. With a simple code like this</p>\n<pre><code>bits 32\ndefault rel\nsection .rodata\nx: db \"foo\", 0\npop eax\nlea ebx, [x]\nlea ebx, [y]\nsection .data\ny: db \"bar\", 0\n</code></pre>\n<p>This in bin form assembles to</p>\n<pre><code>[/tmp] hd y.bin\n00000000  66 6f 6f 00 58 8d 1d 00  00 00 00 8d 1d 14 00 00  |foo.X...........|\n00000010  00 00 00 00 62 61 72 00                           |....bar.|\n00000018\n</code></pre>\n<p>As you can see there's no definite structure in the output. If you know the architecture - 16(default)/32/64 you can directly load this file into something like IDA and with some interactive browsing around you can mark sections of this bin as code/data - this might take some time but IDA would recognize most of the code and you can dump the output to a simple asm file.</p>\n<p>Update : Based on OPs link of the bin file</p>\n<pre><code>[rese] file file.bin\nfile.bin: DOS/MBR boot sector\n</code></pre>\n<p>This can be booted online - <a href=\"http://copy.sh/v86/debug.html?profile=custom\" rel=\"nofollow noreferrer\">here</a>\nIts a simple demo of writing colorful text to display.\n<a href=\"https://i.sstatic.net/Su8Ub.png\" rel=\"nofollow noreferrer\"><img alt=\"boot\" src=\"https://i.sstatic.net/Su8Ub.png\"/></a></p>\n<p>Load it in IDA as 16-bit. It'll cleanly disassemble with comments.\nWith some editing it'll be compatible to nasm</p>\n<pre><code>                 mov     ah, 7\n                 mov     al, 0\n                 mov     dh, 18h\n                 mov     dl, 50h\n                 int     10h             ; - VIDEO - SCROLL PAGE DOWN\n                                         ; AL = number of lines to scroll window (0 = blank whole window)\n                                         ; BH = attributes to be used on blanked lines\n                                         ; CH,CL = row,column of upper left corner of window to scroll\n                                         ; DH,DL = row,column of lower right corner of window\n                 mov     ah, 1\n                 mov     cx, 2607h\n                 int     10h             ; - VIDEO - SET CURSOR CHARACTERISTICS\n                                         ; CH bits 0-4 = start line for cursor in character cell\n                                         ; bits 5-6 = blink attribute\n                                         ; CL bits 0-4 = end line for cursor in character cell\n                 mov     ah, 0\n                 mov     al, 13h\n                 int     10h             ; - VIDEO - SET VIDEO MODE\n                                         ; AL = mode\n                 mov     si, 7C3Ah\n                 mov     cl, 28h ; '('\n\n loc_1C:                                 ; CODE XREF: sub_0+31↓j\n                                         ; sub_0+38↓j\n                 mov     ah, 0Eh\n                 mov     al, [si]\n                 mov     bh, 0\n                 mov     bl, cl\n                 int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\n                                         ; AL = character, BH = display page (alpha modes)\n                                         ; BL = foreground color (graphics modes)\n                 lodsb\n                 hlt\n                 inc     cl\n                 cmp     cl, 37h ; '7'\n                 jz      short loc_36\n                 cmp     al, 0\n                 jnz     short loc_1C\n\n loc_33:                                 ; CODE XREF: sub_0+34↓j\n                 hlt\n                 jmp     short loc_33\n\n loc_36:                                 ; CODE XREF: sub_0+2D↑j\n                 mov     cl, 20h ; ' '\n                 jmp     short loc_1C\naYouJustBecameA :  db 'You just became a victim of wncry.',0xD,0xA,0xD,0xA\n                db 'Enjoy the zzzz.',0\npad:            times 398 db 0\n                db 0x55\n                db 0xaa\n</code></pre>\n<p>which when assembled matches the original bin file.</p>\n<pre><code>[rese] nasm -f bin -o y.bin y.asm\n[rese] diff &lt;(hd file.bin) &lt;(hd y.bin)\n[rese] sha1sum y.bin file.bin\nd6d77852628f51961b30dd3f7a8f07281fd87f5b  y.bin\nd6d77852628f51961b30dd3f7a8f07281fd87f5b  file.bin\n</code></pre>\n</div>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Apr 17, 2022 at 13:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}