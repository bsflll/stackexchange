{
    "title": "How to merge or manage builtin data types in Ghidra with GDTs?",
    "link": "https://reverseengineering.stackexchange.com/questions/33314/how-to-merge-or-manage-builtin-data-types-in-ghidra-with-gdts",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand how Ghidra's GDTs are supposed to be used, particularly the case of builtin data types.</p>\n<p>When I create a data type library in <strong>Data Type Manager</strong> (-&gt; <strong>Create File Archive</strong>) and import function prototypes to it from a binary with debug information—testing with <code>libm.so.6</code>—that library gets copies of the builtin data types like <strong>bool</strong>, <strong>float</strong>, <strong>int16</strong> etc. in addition to the ones specific to the binary:</p>\n<pre><code>├── BuiltinTypes\n│   ├── double\n│   ├── float\n├── test_library\n│   ├── _CAPTURED_FROM_libm.so.6\n│   │   ├── __acosf: float __stdcall __acosf(float __x)\n│   │   ├── ...\n│   ├── double\n│   ├── float\n</code></pre>\n<p>When I use these libraries to import signatures into programs without full debug symbols, the function definitions often end up containing types like <strong>float.conflict</strong>. I assume this happens because of the multiple copies of <strong>float</strong>.</p>\n<p>Now, I think I can be fairly sure that all my <strong>float</strong>s are the same float, which makes me think I would want to make all floats always refer to <strong>BuiltinTypes::float</strong>.</p>\n<p>Here my first attempt was to right click <strong>test_library::float</strong>, select <strong>Replace...</strong> and replace it with the <strong>float</strong> in <strong>BuiltinTypes</strong>. Unfortunately, doing that changes the <strong>__acosf</strong> prototype from</p>\n<p><code>float __stdcall __acosf(float __x)</code></p>\n<p>to</p>\n<p><code>undefined __stdcall __acosf(undefined __x)</code></p>\n<p>, which obviously defeats the purpose.</p>\n<p><strong>Questions:</strong></p>\n<ol>\n<li>Is the intended way of using this to have duplicates of the standard data types in the GDT libraries?</li>\n<li>If the answer to (1) is \"yes\", should I just ignore the <strong>.conflict</strong> renames? Or get rid of them some other way? How?</li>\n<li>If the answer to (1) is \"no\", how should I get the function prototypes imported so that the types refer to the builtin types?</li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "43",
    "tags": [
        "ghidra",
        "symbols"
    ],
    "user": "Sami Liedes",
    "time": "Nov 21, 2024 at 17:28",
    "comments": [],
    "answers_data": []
}