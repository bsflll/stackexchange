{
    "title": "IDA plugin with visual studio c++ 2019",
    "link": "https://reverseengineering.stackexchange.com/questions/26512/ida-plugin-with-visual-studio-c-2019",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hello all and sorry for my bad English</p>\n<p>I am trying to test an example for developing plugin in C++ with IDA from the book :</p>\n<p><a href=\"http://www.binarypool.com/idapluginwriting/idapw.pdf\" rel=\"nofollow noreferrer\">http://www.binarypool.com/idapluginwriting/idapw.pdf</a></p>\n<p>I am using Visual c++ 2019.</p>\n<p>The plugin example source is :</p>\n<pre><code>#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n\n\nint IDAP_init(void)\n{\n    // Do checks here to ensure your plug-in is being used within\n    // an environment it was written for. Return PLUGIN_SKIP if the\n    // checks fail, otherwise return PLUGIN_KEEP.\n    return PLUGIN_KEEP;\n}\n\nvoid IDAP_term(void)\n{\n    // Stuff to do when exiting, generally you'd put any sort\n    // of clean-up jobs here.\n    return;\n}\n\n// The plugin can be passed an integer argument from the plugins.cfg\n// file. This can be useful when you want the one plug-in to do\n// something different depending on the hot-key pressed or menu\n// item selected.\nvoid IDAP_run(int arg)\n{\n    // The \"meat\" of your plug-in\n    msg(\"Hello world!\");\n    return;\n}\n// There isn't much use for these yet, but I set them anyway.\nchar IDAP_comment[] = \"This is my test plug-in\";\nchar IDAP_help[] = \"My plugin\";\n\n// The name of the plug-in displayed in the Edit-&gt;Plugins menu. It can\n// be overridden in the user's plugins.cfg file.\nchar IDAP_name[] = \"My plugin\";\n\n// The hot-key the user can use to run your plug-in.\nchar IDAP_hotkey[] = \"Alt-X\";\n\n// The all-important exported PLUGIN object\n\nplugin_t PLUGIN =\n{\n    IDP_INTERFACE_VERSION, // IDA version plug-in is written for\n    0, // Flags (see below)\n    IDAP_init, // Initialisation function\n    IDAP_term, // Clean-up function\n    IDAP_run, // Main plug-in body\n    IDAP_comment, // Comment – unused\n    IDAP_help, // As above – unused\n    IDAP_name, // Plug-in name shown in\n    // Edit-&gt;Plugins menu\n    IDAP_hotkey // Hot key to run the plug-in\n};\n</code></pre>\n<p>When compiling, I got 2 errors :</p>\n<pre><code>Error C2440 'initializing': cannot convert from 'int (__cdecl *)(void)' to 'plugmod_t *(__cdecl *)(void)'   Sdk75Project1   F:\\Developpement\\IDA\\Sdk75Project\\Sdk75Project1\\Sdk75Project1\\main.cpp  48  \nError C2440 'initializing': cannot convert from 'void (__cdecl *)(int)' to 'bool (__cdecl *)(size_t)'   Sdk75Project1   F:\\Developpement\\IDA\\Sdk75Project\\Sdk75Project1\\Sdk75Project1\\main.cpp  50  \n</code></pre>\n<p><a href=\"https://i.sstatic.net/Wq2Sf.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Wq2Sf.png\"/></a></p>\n<p>I found nothing about that on the Net... Can someone give me an idea of what is going wrong ?</p>\n<p>Thanks you very much.</p>\n<p>I have used the informations given in the readme.txt to configure VC++ :</p>\n<pre><code>How to set up Visual C++ 2017 for IDA Plugins\n---------------------------------------------\n\nThis guide will help you set up a Visual C++ project that targets both ida32 and ida64 plugins.\nRemember that, even though ida32 is used to work on 32-bit files, it is also an x64 application.\nTherefore, both plugins (ida32 and ida64) must be built for the x64 platform.\n\n1. File | New | Project From Existing Code...\n\n2. What type of project would you like to create: Visual C++\n   &lt;next&gt;\n\n3. Project file location: &lt;folder where you have your files&gt;\n   Project name: &lt;your plugin's name&gt;\n   &lt;finish&gt;\n\nOnce the project is initialized, right-click on the project name and pick Properties.\n\n4. Configuration Manager...\n     Active solution platform: select \"x64\"\n   &lt;Close&gt;\n\n5. General | Project Defaults | Configuration Type\n     Dynamic Library (.dll)\n   &lt;apply&gt;\n\n6. C/C++ | General | Additional Include Directories\n     Enter the SDK's include folder in \"Include search paths (/I)\": eg. C:\\idasdk\\include;\n   &lt;apply&gt;\n\n7. C/C++ | Code Generation | Runtime library (visible only after you add one .cpp file to the project)\n     Multi-threaded DLL (/MD)\n   &lt;apply&gt;\n\n8. Linker | Command Line | Additional options\n     - for processor modules: /EXPORT:LPH\n     - for plugins: /EXPORT:PLUGIN\n     - for loaders: /EXPORT:LDSC\n   &lt;apply&gt;\n\nThe steps above constituted the common configuration for both ida32 and ida64 configurations.\n\nWe will now create the separate configurations.\n\n9. Still under \"Configuration Manager...\"\n\n     - under the \"Configuration\" column, click on \"Debug\"\n     - click \"&lt;Edit...&gt;\"\n     - click \"Rename\"\n     - add an \"ida32\" prefix to the configuration name, such as \"ida32 Debug\"\n     - &lt;Enter&gt;\n     - &lt;Yes&gt;\n     - &lt;Close&gt;\n\n     - under \"Active solution configuration\", click on \"Debug\"\n     - click \"&lt;Edit...&gt;\"\n     - click \"Rename\"\n     - add an \"ida32\" prefix to the configuration name, such as \"ida32 Debug\"\n     - &lt;Enter&gt;\n     - &lt;Yes&gt;\n     - &lt;Close&gt;\n\n     - under \"Active solution configuration\", click on the new configuration name \"ida32 Debug\"\n     - click \"&lt;New...&gt;\"\n     - use a similar name, but with the \"ida64\" prefix, such as \"ida64 Debug\"\n     - Copy settings from: \"ida32 Debug\"\n     - &lt;Ok&gt;\n     - &lt;Close&gt;\n\nIn the \"Property Page\", under \"Configuration\", select \"ida32 Debug\".\n\n10. Debugging | Command\n      - for ida32: C:\\Program Files\\IDA 7.2\\ida.exe\n      - for ida64: C:\\Program Files\\IDA 7.2\\ida64.exe\n    &lt;apply&gt;\n\n11. C/C++ | Preprocessor | Preprocessor Definitions\n      - for ida32: __NT__;\n      - for ida64: __NT__;__EA64__;\n    &lt;apply&gt;\n\n12. Linker | General | Output File:\n      - for ida32: $(OutDir)\\$(ProjectName).dll\n      - for ida64: $(OutDir)\\$(ProjectName)64.dll\n    &lt;apply&gt;\n\n13. Linker | Input | Additional Dependencies\n      - for ida32: C:\\idasdk\\lib\\x64_win_vc_32\\ida.lib\n      - for ida64: C:\\idasdk\\lib\\x64_win_vc_64\\ida.lib\n    &lt;apply&gt;\n\nIn the \"Property Page\", under \"Configuration\", select \"ida64 Debug\" and repeat the last three steps.\n\n\nYou should now be capable to easily switch between the \"ida32 Debug\" and \"ida64 Debug\" configurations and build your project.\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "1k",
    "tags": [
        "ida-plugin"
    ],
    "user": "rdpdo",
    "time": "Feb 2, 2023 at 20:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For decades, IDA's plugin interface remained the same. Your plugin had to export a <code>plugin_t</code> structure named <code>PLUGIN</code>, which contained function pointers to its <code>init</code>, <code>run</code>, and optional <code>term</code> functions. You can see that in your snippets above.</p>\n<p>IDA 7.5 introduced a new plugin interface for C++ plugins, based on inheritance from the <code>plugmod_t</code> interface, seemingly because future versions of IDA will support multiple databases being loaded at the same time. Download the IDA SDK and look in its <code>plugins</code> subdirectory. All of the existing example plugins have been updated to use the new interface.</p>\n<p>TL;DR plugin source code developed for versions less than 7.5 is not going to work anymore for 7.5 and above; it needs to be modified to use the new <code>plugmod_t</code> interface.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Feb 2, 2023 at 20:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Also as long as <code>NO_OBSOLETE_FUNCS</code> is not defined you can just cast the return result to <code>PLUGIN_SKIP</code>, <code>PLUGIN_OK</code>, or <code>PLUGIN_KEEP</code> just like the original C callback idiom.\nOr with <code>NO_OBSOLETE_FUNCS</code> defined you can just define <code>#define PLUGIN_OK ((plugmod_t *)1)</code> (copy - pasted from \"loader.hpp\") after you include your IDA and then your back to the old <code>return PLUGIN_KEEP;</code> to get around the madness they added.</p>\n</div>",
            "votes": "2",
            "user": "Sirmabus",
            "time": "Dec 5, 2021 at 5:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Ok I change the retourned values and now I got other errors :</p>\n<p>Error   LNK2001 unresolved external symbol LDSC Sdk75Project1   F:\\Developpement\\IDA\\Sdk75Project\\Sdk75Project1\\Sdk75Project1\\LINK  1<br/>\nError   LNK2001 unresolved external symbol LPH  Sdk75Project1   F:\\Developpement\\IDA\\Sdk75Project\\Sdk75Project1\\Sdk75Project1\\LINK  1</p>\n<p>My modified code is :</p>\n<pre><code>#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n\n\nplugmod_t* IDAP_init(void)\n{\n    // Do checks here to ensure your plug-in is being used within\n    // an environment it was written for. Return PLUGIN_SKIP if the\n    // checks fail, otherwise return PLUGIN_KEEP.\n    return PLUGIN_KEEP;\n}\n\nvoid IDAP_term(void)\n{\n    // Stuff to do when exiting, generally you'd put any sort\n    // of clean-up jobs here.\n    return;\n}\n\n// The plugin can be passed an integer argument from the plugins.cfg\n// file. This can be useful when you want the one plug-in to do\n// something different depending on the hot-key pressed or menu\n// item selected.\nbool IDAP_run(size_t arg)\n{\n    // The \"meat\" of your plug-in\n    msg(\"Hello world!\");\n    return true;\n}\n// There isn't much use for these yet, but I set them anyway.\nchar IDAP_comment[] = \"This is my test plug-in\";\nchar IDAP_help[] = \"My plugin\";\n\n// The name of the plug-in displayed in the Edit-&gt;Plugins menu. It can\n// be overridden in the user's plugins.cfg file.\nchar IDAP_name[] = \"My plugin\";\n\n// The hot-key the user can use to run your plug-in.\nchar IDAP_hotkey[] = \"Alt-X\";\n\n// The all-important exported PLUGIN object\n\nplugin_t PLUGIN =\n{\n    IDP_INTERFACE_VERSION,              // IDA version plug-in is written for\n    0,                                  // Flags (see below)\n    IDAP_init,                          // Initialisation function\n    IDAP_term,                          // Clean-up function\n    IDAP_run,                           // Main plug-in body\n    IDAP_comment,                       // Comment – unused\n    IDAP_help,                          // As above – unused\n    IDAP_name,                          // Plug-in name shown in\n                                        // Edit-&gt;Plugins menu\n    IDAP_hotkey                         // Hot key to run the plug-in\n};\n</code></pre>\n<p>PS : It's ok now, I removed the EXPORTs..</p>\n</div>",
            "votes": "1",
            "user": "rdpdo",
            "time": "Dec 11, 2020 at 18:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}