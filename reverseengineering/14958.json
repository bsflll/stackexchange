{
    "title": "Reversing variable origin (pointer chain) in IDA. Stuck on RUNTIME_FUNCTION XREF",
    "link": "https://reverseengineering.stackexchange.com/questions/14958/reversing-variable-origin-pointer-chain-in-ida-stuck-on-runtime-function-xref",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I have been exploring reverse engineering for the past few months and currently I am reversing a dumped executable which seems to be fully intact</p>\n<p>I have stumbled upon something I can't seem to grasp/understand. When I reverse upwards to find out where some variable in a function originated from, I most of them time end up at <code>RUNTIME_FUNCTION</code> xrefs. I get stuck here since I can't go up any further.</p>\n<p>My end goal is to find out the whole pointer chain from a static address to the target variable used in some function. I start searching upwards from a certain instruction and follow a certain variable, but unfortunately I get to the <code>RUNTIME_FUNCTION</code> references when I am about 3 levels deep.</p>\n<p>I've read that runtime functions have something to do with SEH. But I couldn't find any constructed information about this RUNTIME_FUNCTION in IDA. Shouldn't some variable always lead to some static address inside the .data section? Does someone know what is happening here?</p>\n<p>In this image you can see that when I want to figure out what references/uses this function I only get those RUNTIME_FUNCTION's:\n<a href=\"https://i.sstatic.net/QSKQ6.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/QSKQ6.png\"/></a></p>\n<p>How would you normally go around this issue to get back on track and reverse further/beyond the RUNTIME_FUNCTION?</p>\n<p>Executable segments:\n<a href=\"https://i.sstatic.net/MZcEa.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/MZcEa.png\"/></a></p>\n<p>Any help is appreciated, thanks!</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "windows"
    ],
    "user": "Steffen Brem",
    "time": "Mar 20, 2017 at 16:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.osronline.com/article.cfm?article=469\" rel=\"nofollow noreferrer\"><code>RUNTIME_FUNCTION</code> is a system structure</a> added by the compiler for all functions in a  proper win64 executable. It is only used by the OS when processing exceptions, so it has no relation to your game's variables. You should ignore those xrefs and look elsewhere.</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Mar 21, 2017 at 9:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Shouldn't some variable always lead to some static address inside the\n  .data section?</p>\n</blockquote>\n<p>There is no concept of a variable on assembly level. We got bit-sized\nfields in registers and memory.</p>\n<p>By convention, compilers designate the .data section for global and static variables. Everything inside a function is mostly handled on the stack.</p>\n<blockquote>\n<p>How would you normally go around this issue to get back on track and\n  reverse further/beyond the RUNTIME_FUNCTION?</p>\n</blockquote>\n<p>Please understand that IDA does not do data flow analysis for you, but it finds cross-references. So this is not the source of the data, but something referencing to it.</p>\n<p>What you want to do is to trace the dataflow back to its origins. Data-flow analysis looks somewhat like this:</p>\n<p><a href=\"https://i.sstatic.net/yB1lr.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/yB1lr.png\"/></a></p>\n<p>What you should do is use your knowledge about the calling convention to know how data is passed between functions. If you can get any more specific with your question, I'm sure you will get less general answers.</p>\n</div>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Mar 21, 2017 at 8:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}