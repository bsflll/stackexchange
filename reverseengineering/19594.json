{
    "title": "Point-to analysis of IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/19594/point-to-analysis-of-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am aware that many users on this forum are experts (developers) of IDA Pro. So I am tentatively inquiring some high-level ideas behind the point-to analysis of IDA Pro.</p>\n<p>According to my personal experience (I have been using IDA Pro 6.95 a lot for my binary code research), the point-to analysis implemented in IDA Pro is neither sound or complete. I am envisioning some heuristics are utilized to infer the value set in the code and data pointers. </p>\n<p>So here is my question:</p>\n<ol>\n<li><p>Could anyone shed a light on the point-to algorithm in IDA-Pro? I understood IDA-Pro is a commercial software so a high-level idea would be very much appreciated.</p></li>\n<li><p>What is the best practice to build a call graph with IDA Pro, considering we have decent amount of indirect calls which needs to be interred. </p></li>\n</ol>\n<p>The analysis platform could be ELF binaries on ARM, which seems relatively easier, comparing to x86.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "730",
    "tags": [
        "ida",
        "pointer",
        "call-graph",
        "ida-plugin"
    ],
    "user": "lllllllllllll",
    "time": "Oct 16, 2018 at 2:09",
    "comments": [
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">BTW: please let me know if it was more proper, to post this question in the IDA-Pro internal forum, thanks.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what exactly is a \"point-to analysis\"? some definition could be useful for those unfamiliar with the term, and maybe some samples of what you mean by it being \"neither sound or complete\"?</span>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\">Hi @IgorSkochinsky , thanks for the note. So basically the \"point-to\" analysis I mentioned, tries to infer the possible value in a pointer. For instance we have a indirect call <code>call *eax</code>, then by somehow infer the <code>eax</code> could contain two possible value <code>0x8040204</code> and <code>0x8060208</code>, we know how to construct the call graph edge at this call site.</span>",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.wikiwand.com/en/Pointer_analysis\" rel=\"nofollow noreferrer\">wikiwand.com/en/Pointer_analysis</a>  While <code>point-to</code> analysis can analyze both code and data pointers, I am talking about the code pointers, pointer that point to certain functions and those functions will be indirected called</span>",
            "time": null
        },
        {
            "user": "Anton Kukoba",
            "text": "<span class=\"comment-copy\">The best way to how IDA does something: use IDA to reverse IDA. I mean it. I had to reverse IDA engine a lot in order to workaround various IDA bugs, and to understand how to implement the things I see in IDC via IDA SDK.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The topic of pointer analysis is an important part of theoretical static analysis. Many articles and academic publications have been written about pointer analysis, this is a heavily researched field.</p>\n<p>Besides the theoretical research, it is often an difficult issue to address even by skilled and trained reverse engineers. In certain cases it can be nearly impossible to retrieve the pointer without executing or emulating the relevant code.</p>\n<p>Therefore, for IDA Pro to provide a \"sound and complete\" solution, as you put it, is not a trivial task. This is highlighted by the fact this isn't really the disassembler's task.</p>\n<p>As for your specific questions:</p>\n<blockquote>\n<ol>\n<li>Could anyone shed a light on the point-to algorithm in IDA-Pro? I understood IDA-Pro is a commercial software so a high-level idea would be very much appreciated.</li>\n</ol>\n</blockquote>\n<p>As far as I'm aware, IDA's pointer analysis is quite basic. Register calls are only resolved if they're directly assigned and there's isn't a lot of taint analysis. It is important to remember IDA is not a binary static analysis tool, IDA is a disassembler (and a decompiler). Taint analysis, constraint solving, call graph analysis etc are usually better done by tools designed specifically for those purposes. Having said that, IDA does make an effort to include heuristics to help with that type of thing.</p>\n<blockquote>\n<ol start=\"2\">\n<li>What is the best practice to build a call graph with IDA Pro, considering we have decent amount of indirect calls which needs to be interred.</li>\n</ol>\n</blockquote>\n<p>So again, IDA isn't the best tool to build a call graph if you're mostly focused on those cases where call targets are difficult to resolve or there are plenty of constraints to consider.</p>\n<p>There are better tools for static binary analysis, as well as several questions about the topic here over RE.SO. My personal favorite is probably <a href=\"https://github.com/angr/angr\" rel=\"nofollow noreferrer\">angr</a>.</p>\n<p>I suggest you spend time researching the theoretical topic and available tools and approaches before going forward. </p>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Oct 16, 2018 at 7:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Sorry it couldn't be the answer you were looking for</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">@Nirlzr. I am looking for some more principled descriptions on IDA-Pro's point-to analysis. But I am afraid if it really exists, considering it is a close-source commercial tool. ASAICS, yes, it is just some heuristics, \"Register calls are only resolved if they're directly assigned and there's isn't a lot of taint analysis. \". I agree with you.</span>",
                    "time": null
                }
            ]
        }
    ]
}