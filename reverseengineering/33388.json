{
    "title": "Off-By-One handler addresses for ARM Coretex ISR tables",
    "link": "https://reverseengineering.stackexchange.com/questions/33388/off-by-one-handler-addresses-for-arm-coretex-isr-tables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm attempting to reverse engineer the firmware from a GD32F303 microprocessor (this is a STM32 clone). In attempting to follow the on-reset control flow, I'm hitting a few things that confuse me:</p>\n<p><a href=\"https://i.sstatic.net/oTE6DSjA.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/oTE6DSjA.png\"/></a></p>\n<p>The Flash for these microprocessors is mapped at 0x0800_0000 (mirrored at 0x0000_0000). 0x0000_0004/0x0800_0004 is the primary reset handler:</p>\n<p><a href=\"https://i.sstatic.net/kNpOV9b8.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/kNpOV9b8.png\"/></a></p>\n<p>What I'm stuck on is the fact that all the handlers seem to point at the actual handler function +1 (the names in the listing above are mine).</p>\n<p>Looking at the code at 0x0800_05B9:</p>\n<p><a href=\"https://i.sstatic.net/DaLcR9M4.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/DaLcR9M4.png\"/></a></p>\n<p>Ghidra flat out refuses to disassemble starting at 0x05B9, but if you start at 0x05B8 you get a sensible result (<code>cpsid</code>, or disable interrupts).</p>\n<p>Basically, the question I have is why do all the interrupt vectors seem to be off by 1? Given ARM thumb mode is 16 bit, how can you even jump to an address that is not even?</p>\n<p>What is the proper way to interpret this Interrupt Vector Table?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "38",
    "tags": [
        "arm",
        "thumb",
        "microprocessors",
        "coretex"
    ],
    "user": "Fake Name",
    "time": "Feb 16 at 3:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So of course, in following some further assembly later on, I came across the <code>bx</code> opcode:</p>\n<p><a href=\"https://stackoverflow.com/a/27084896/268006\">https://stackoverflow.com/a/27084896/268006</a></p>\n<blockquote>\n<p>Which means that according to the lsb (least significant bit) of the address to branch to, the processor will treat the next instruction as ARM or as thumb.</p>\n</blockquote>\n<p>I'd still like to run down exactly how the vector table is handled, but it seems reasonable that it uses a similar mechanism, where the LSB is actually a flag to determine whether to continue execution in thumb mode or normal ARM assembly.</p>\n<p>Further, clearing the ghidra disassembly for the reset handler and re-disassembling it with thumb mode produces a disassembly that no longer has the weird <code>undefined1</code> fields:</p>\n<p><a href=\"https://i.sstatic.net/VuGUGDth.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VuGUGDth.png\"/></a></p>\n<p>We instead get a couple of local constants loaded into registers, and then a <code>bx</code>.</p>\n</div>",
            "votes": "0",
            "user": "Fake Name",
            "time": "Feb 16 at 20:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the busybee",
                    "text": "<span class=\"comment-copy\">See <a href=\"https://stackoverflow.com/a/75862762/11294831\">my answer</a> on <a href=\"https://stackoverflow.com\">Stack Overflow</a>, this is a general and well-known feature.</span>",
                    "time": null
                },
                {
                    "user": "Fake Name",
                    "text": "<span class=\"comment-copy\">@thebusybee - Yeah, I don't know what I was thinking when I wrote that.</span>",
                    "time": null
                }
            ]
        }
    ]
}