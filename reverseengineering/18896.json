{
    "title": "Interpreting clipboard data from HMI software",
    "link": "https://reverseengineering.stackexchange.com/questions/18896/interpreting-clipboard-data-from-hmi-software",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm attempting to automate tedious processes when using the EasyBuilder Pro software by Weintek, which is programming software for industrial HMIs.</p>\n<p>Long story short, I need the ability to fill the user's clipboard with binary data based on a kind of template that they can then paste into the software.</p>\n<p>I've managed to extract the following hex data using Nirsoft's InsideClipboard, when copying a single button with text \"Auto\", which is mapped to a memory address \"10.00\".</p>\n<pre><code>00000000   FF FF 3F AF 5F 0C 01 00 FF FF 56 10 0C 00 50 00    ÿÿ?¯_...ÿÿV...P.\n00000010   C5 00 00 00 61 00 06 00 00 00 68 00 00 00 43 00    Å...a.....h...C.\n00000020   00 00 81 00 00 00 04 00 00 00 00 00 00 00 00 00    ...............\n00000030   00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00    ................\n00000040   00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00    ................\n00000050   02 00 00 00 09 00 4C 6F 63 61 6C 20 48 4D 49 FF    ......Local HMIÿ\n00000060   00 00 0E 00 4F 4D 52 4F 4E 20 45 74 68 65 72 6E    ....OMRON Ethern\n00000070   65 74 B3 01 00 01 00 FF FF 01 00 0B 00 43 50 61    et³....ÿÿ....CPa\n00000080   72 74 4F 62 6A 65 63 74 1B FF FE FF 00 00 FF FE    rtObject.ÿþÿ..ÿþ\n00000090   FF 0E 4F 00 4D 00 52 00 4F 00 4E 00 20 00 45 00    ÿ.O.M.R.O.N. .E.\n000000A0   74 00 68 00 65 00 72 00 6E 00 65 00 74 00 FF FE    t.h.e.r.n.e.t.ÿþ\n000000B0   FF 0E 4F 00 4D 00 52 00 4F 00 4E 00 20 00 45 00    ÿ.O.M.R.O.N. .E.\n000000C0   74 00 68 00 65 00 72 00 6E 00 65 00 74 00 FF FE    t.h.e.r.n.e.t.ÿþ\n000000D0   FF 09 4C 00 6F 00 63 00 61 00 6C 00 20 00 48 00    ÿ.L.o.c.a.l. .H.\n000000E0   4D 00 49 00 E2 4F 0E A5 35 5F 58 EB AC 5E AE D0    M.I.âO.¥5_Xë¬^®Ð\n000000F0   81 7D 45 F3 00 00 00 00 02 02 00 FF FE FF 05 31    }Eó.......ÿþÿ.1\n00000100   00 30 00 2E 00 30 00 30 00 FF FE FF 05 31 00 30    .0...0.0.ÿþÿ.1.0\n00000110   00 2E 00 30 00 30 00 FF FE FF 01 30 00 02 02 02    ...0.0.ÿþÿ.0....\n00000120   01 01 01 01 00 02 00 00 00 05 00 00 00 02 00 00    ................\n00000130   00 01 00 00 01 00 00 00 00 01 00 00 01 00 00 00    ................\n00000140   00 00 00 00 00 FF FE FF 05 4D 00 6F 00 64 00 65    .....ÿþÿ.M.o.d.e\n00000150   00 73 00 00 00 00 00 00 00 00 00 00 00 00 00 FF    .s.............ÿ\n00000160   FE FF 00 FF FE FF 00 FF FE FF 00 00 00 00 00 00    þÿ.ÿþÿ.ÿþÿ......\n00000170   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................\n00000180   00 00 00 00 00 00 0A 00 00 00 00 00 22 00 01 01    ............\"...\n00000190   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................\n000001A0   00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00    ................\n000001B0   FF FE FF 01 30 00 1B 00 00 00 00 02 00 00 00 00    ÿþÿ.0...........\n000001C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................\n000001D0   00 00 00 00 00 06 00 00 00 68 00 00 00 43 00 00    .........h...C..\n000001E0   00 81 00 00 00 00 E6 E6 FA 00 F0 F0 F0 00 32 CD    .....ææú.ððð.2Í\n000001F0   32 00 F0 F0 F0 00 00 00 00 00 00 00 00 00 80 80    2.ððð.........€€\n00000200   FF 00 00 F0 F0 F0 00 00 F0 F0 F0 00 00 00 00 00    ÿ..ððð..ððð.....\n00000210   00 01 00 00 FF FE FF 04 41 00 75 00 74 00 6F 00    ....ÿþÿ.A.u.t.o.\n00000220   FF FE FF 05 41 00 72 00 69 00 61 00 6C 00 0A 17    ÿþÿ.A.r.i.a.l...\n00000230   00 00 00 6C 00 00 00 00 00 00 00 00 00 00 FF FE    ...l..........ÿþ\n00000240   FF 04 41 00 75 00 74 00 6F 00 FF FE FF 05 41 00    ÿ.A.u.t.o.ÿþÿ.A.\n00000250   72 00 69 00 61 00 6C 00 0A 17 00 00 00 6D 00 00    r.i.a.l......m..\n00000260   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................\n00000270   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................\n00000280   00 00 00 00 00 00 00 00 00 00 00 00                ............ \n</code></pre>\n<p>I can obviously pick out some text strings for various bits and pieces, but the rest is fairly incomprehensible.\nI'm guessing it must contain properties such as the size of the button, color, position etc.\nCan anyone give me any pointers as to where I could begin properly decoding this data, in view of reconstructing it with my own parameters?</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "138",
    "tags": [
        "file-format",
        "binary-format"
    ],
    "user": "Bill Peet",
    "time": "Jul 25, 2018 at 10:43",
    "comments": [
        {
            "user": "Elian Kamal",
            "text": "<span class=\"comment-copy\">I suggest experimenting with the format by making a change in one property each time and then using <code>diff -y &lt;(xxd b1.bin) &lt;(xxd b2.bin)</code> (preferrably with <code>| colordiff</code>) or some similar tool and then observing changes and slowly rebuilding the format.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">So the data you see is already the raw data? What's the data format (name) given as in InsideClipboard? In any case the <code>FF FE</code> looks suspiciously like a <a href=\"https://en.wikipedia.org/wiki/Byte_order_mark\" rel=\"nofollow noreferrer\">BOM</a> (Little Endian, UTF-16). The value (two bytes) following the BOM could be some kind of identifier or even the length of the string or some such. But your question unfortunately lacks enough detail to be able to answer it, as intriguing as the question is.</span>",
            "time": null
        },
        {
            "user": "Bill Peet",
            "text": "<span class=\"comment-copy\">@0xC0000022L yep that's the raw data straight out of InsideClipboard. The data format name is EBClipboardObject (EB meaning EasyBuilder)</span>",
            "time": null
        },
        {
            "user": "Bill Peet",
            "text": "<span class=\"comment-copy\">Another thing I've discovered is that the character immediately before a text string represents the number of characters following, e.g. 0x04 appears before the word \"Auto\" (4 characters)</span>",
            "time": null
        }
    ],
    "answers_data": []
}