{
    "title": "Multiple memory regions mapped to same data",
    "link": "https://reverseengineering.stackexchange.com/questions/22406/multiple-memory-regions-mapped-to-same-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm analyzing a Seagate HDD that provides a serial boot console that allows reading/writing bytes to memory and setting an address pointer.</p>\n<p>There's a block of memory from <code>0x0</code> to <code>0x20000</code> and then it <em>repeats</em> all the way to <code>0x100000</code>. This isn't just a copy - if I write a byte to <code>0x20000</code> or <code>0x40000</code> the data at location <code>0x0</code> also changes. At <code>0x100000</code> there's another <code>128k</code> block that is mirrored over and over until <code>0x200000</code>. From <code>0x400000</code> the first block of memory is mirrored again and again.</p>\n<p>Here's a map:</p>\n<pre><code>1) 0x000000 - 0x020000\n*) (mirrors of block 1)\n2) 0x100000 - 0x120000\n*) (mirrors of block 2)\n3) 0x200000 - 0x300000\n4) 0x300000 - 0x400000\n*) (mirrors of block 1)\n</code></pre>\n<p>The <code>MCU</code> is some kind of <code>ARM</code> processor. Is this some hardware memory-mapping feature of <code>ARM</code>, is it setup by the <code>OS</code>, or something else?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "54",
    "tags": [
        "firmware",
        "memory"
    ],
    "user": "Reinstate Monica",
    "time": "Oct 28, 2019 at 7:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The block selection logic just looks at the 4 most significant bits of the address, this is easily implemented by a multiplexer whose outputs feed into the enable pin of each memory chip. An 3 bit multiplexer and an OR gate (if active high) is enough to implement this scheme.</p>\n<p>The mirroring within a block happens by not connecting the next set of significant bits to the memory chip, (likely because it just doesn't have the address space).</p>\n<p>tl;dr it's a hardware memory map based on how the controller and memory chips are connected on the PCB. And it's something that needs a redesign to adjust.</p>\n</div>",
            "votes": "2",
            "user": "ratchet freak",
            "time": "Oct 28, 2019 at 15:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">It's probably worth mentioning that this is called partial address decoding.</span>",
                    "time": null
                }
            ]
        }
    ]
}