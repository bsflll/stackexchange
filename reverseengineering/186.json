{
    "title": "Are there any metrics for code obfuscation?",
    "link": "https://reverseengineering.stackexchange.com/questions/186/are-there-any-metrics-for-code-obfuscation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is source code obfuscation quantifiable ?</p>\n<p>Are there any metrics that measure the degree of obfuscation in a source file ?</p>\n</div>",
    "votes": "16",
    "answers": 3,
    "views": "1k",
    "tags": [
        "obfuscation"
    ],
    "user": "asheeshr",
    "time": "Mar 23, 2013 at 14:19",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For source code, one possibility is <a href=\"http://en.wikipedia.org/wiki/Cyclomatic_complexity\">McCabe Cyclomatic Complexity</a>. Some source code analysis tools (<a href=\"http://www.mccabe.com/iq.htm\">McCabe IQ</a>) will use this as a measure of \"crappy\" code that you should investigate and re-write. Cyclomatic complexity generally indicates excessively convoluted or complicated program logic, and code that will be hard to understand. It might not reflect actual difficulty to reverse engineer though, and also doesn't take into account other types of obfuscations such as constant variable encryption and code encryption, etc. </p>\n<p>I think it would be very difficult to objectively quantify all types of obfuscations, because you are trying to measure their ability to withstand attack by an adversary. If you can reduce your program protection problems to cryptographically complex problems (as the authors of <a href=\"http://www.securelist.com/en/blog/208193781/The_Mystery_of_the_Encrypted_Gauss_Payload\">Gauss</a> were able to) then I think that is a useful obfuscation metric as it represents work the attacker must perform to un-do your obfuscation. Otherwise, the work level is so variable from obfuscation to obfuscation across one reverse engineer to another that I'm not sure it can be meaningfully measured...</p>\n</div>",
            "votes": "11",
            "user": "Andrew",
            "time": "Mar 23, 2013 at 15:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a purely theoretical metric for code obfuscation based on abstract interpretation which is delightful.  It relies upon the fact that abstract interpretations are comparable with respect to their precision.  In particular, in the upper closure operator formulation of abstract interpretation -- where an upper closure operator is created by composing the abstraction and concretization functions, forming a map from the concrete domain to itself -- we can compare the potency of two abstract interpretations by partially-ordering the set of fixedpoints of a given closure map.  An operator with strictly more fixedpoints is more precise than, say, one that maps everything to top.</p>\n<p>In order to compare obfuscations, we consider the set of abstract interpretations over the original version of the program, and then also over the obfuscated version.  Now we can use the same construction described above to compare the potency of obfuscating transformations.  Given some observable property <em>a</em>, as encoded by an abstract interpretation, we say that the obfuscator is <em>potent for a</em> if, when preserving abstract interpretation with respect to that property, the fixedpoint is different for the original version versus the transformed version.</p>\n<p>Read more here:  <a href=\"https://web.archive.org/web/20130610154533/http://profs.sci.univr.it/%7Edallapre/ICALP05.pdf\" rel=\"nofollow noreferrer\">http://profs.sci.univr.it/~dallapre/ICALP05.pdf</a></p>\n</div>",
            "votes": "10",
            "user": "0xC0000022L",
            "time": "Jan 9, 2023 at 8:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To be <strong>more practical</strong> in the question of <strong>code obfuscation</strong>, there are several metrics that can be used:</p>\n<ul>\n<li>The percentage of optimized and non-optimized obfuscated code after the compiler optimization pass and the overall effectiveness of the obfuscation.</li>\n<li>The percentage of changed bytes at the binary level for two obfuscated binaries, as well as the percentage of similarity between them.</li>\n<li>Statistics for opcodes in the original binary and the binary with obfuscated source code, including the number of movs, leas, jumps, calls, pushes, and other opcodes that were added.</li>\n<li>The percentage of changes in the control flow of the code in the IDA code graph for the original binary and the binary with obfuscated source code.\nThe use of automatic tools to simplify, optimize, and deobfuscate the code, and a comparison of the original binary with the optimized one.</li>\n</ul>\n<p>By using these metrics, it is possible to get a more practical and quantitative understanding of the effectiveness of code obfuscation techniques. This can help organizations make informed decisions about how to protect their code and intellectual property.</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Jan 9, 2023 at 8:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. This sounds a bit vague, except for the reference to the IDA code graph.</span>",
                    "time": null
                },
                {
                    "user": "BenjaminL",
                    "text": "<span class=\"comment-copy\">For visual comparison of blocks similarity IDA is very useful. Also BinDiff can be used for this task.</span>",
                    "time": null
                }
            ]
        }
    ]
}