{
    "title": "Why do I get different addresses for the printf function when I disassemble with otool?",
    "link": "https://reverseengineering.stackexchange.com/questions/15213/why-do-i-get-different-addresses-for-the-printf-function-when-i-disassemble-with",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using <code>otool</code> on macOS to disassemble some simple C programs I built in order to gain a better understanding of assembly language.  I disassembled three programs, all of which consist of a single <code>printf</code> statement.  One prints the string <code>\"Hello, World!\\n\"</code>, one prints a single integer formatted as a decimal, and the other prints two integers formatted as decimals.</p>\n<p>My question regards the instruction <code>call _printf</code>.  The disassembly doesn't show <code>_printf</code>; it shows the address of the <code>_printf</code> symbol.  I get a different address each time.  At first I thought this was because <code>gcc</code> converts any <code>printf</code> that doesn't use additional parameters to <code>puts</code>, but when I disassembled the third program I got still another address for printf.  The code looks like this:</p>\n<p>First program:</p>\n<pre><code>0000000100000f76        callq   0x100000f82\n</code></pre>\n<p>Second program:</p>\n<pre><code>0000000100000f7e        callq   0x100000f8a\n</code></pre>\n<p>Third program:</p>\n<pre><code>0000000100000f7a        callq   0x100000f86\n</code></pre>\n<p>I would like to gain a better understanding of how the glibc symbols are laid out in the executable.  I am of course using the Mach-O format, but I have a feeling this variation in addresses is more universal.  Also, given that the address is more or less random, how can one tell from the disassembly what function is being called?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "761",
    "tags": [
        "disassembly",
        "functions",
        "mach-o"
    ],
    "user": "Legend of Overfiend",
    "time": "Apr 24, 2017 at 14:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">how do you disassemble it? can you paste a bigger snippet around the call?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the addresses are different because the binaries are not identical and differ in their layout. </p>\n<p>as for finding out which functions are being called:</p>\n<p>easy solution: use <code>-V</code> to have <code>otool</code> print hints about the symbols being called. </p>\n<p>hard solution: disassemble target addresses and figure out how the dynamic calls work in OS X and how <code>dyld</code> resolves symbols. it may be useful to use a debugger here and consult source code of <code>dyld</code> and <code>ld</code>(available at Apple 's open source website)</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 26, 2017 at 15:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This appears to be a relative call. In a relative call in 32-bit assembly, the operand is added to the address of the next instruction (instruction right after the call). Keep in mind the the operand would be signed in this case. </p>\n<p>Unfortunately, I don't know 64-bit assembly, but it seems to be similar.</p>\n<p>If you look at the addresses for program one and program two, you can see that the difference is 8. This is the same with their operands, so it isn't random.</p>\n<p><a href=\"http://x86.renejeschke.de/html/file_module_x86_id_26.html\" rel=\"nofollow noreferrer\">Hear is a link describing calls in more detail.</a></p>\n<p>I couldn't find as good of an example for 64-bit.</p>\n<p>Try searching around for relative calls if that doesn't clear it up.</p>\n</div>",
            "votes": "0",
            "user": "xXx_KittyKitty_xXx",
            "time": "Apr 26, 2017 at 1:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I don't think that's the problem here. <code>otool</code> prints already resolved target addresses.</span>",
                    "time": null
                }
            ]
        }
    ]
}