{
    "title": "Specific byte purpose in header of little endian ARM binary",
    "link": "https://reverseengineering.stackexchange.com/questions/9538/specific-byte-purpose-in-header-of-little-endian-arm-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a little endian 32-bit ARM binary, compiled for a CPU that's running embedded Linux. I want to figure out what a specific byte in the binary means. An example hex view of the first few bytes of my binary is:</p>\n<pre><code> 03 00 00 00 82 2C 00 00  50 01 00 00 C0 01 00 00\n 1A 00 00 00 2B 00 00 00  80 00 00 00 00 00 00 00\n 24 26 00 00 08 00 00 00  04 10 00 00 30 29 00 00\n FC FF 07 00 00 00 00 00  F7 27 13 00 FF 03 00 00\n 01 00 00 00 74 2C 00 00  00 00 00 00 00 00 00 00\n</code></pre>\n<p>I am interested in finding the purpose of the byte with value <code>0x13</code> in line 4. The particular number seems to increase as the size of the binary increases, but I can't seem to find the exact correlation between file size and this number. I have tried the usual suspects (number of blocks, file size in e.g. KB etc.) but nothing gives an exact match with the number I observe in that byte offset.</p>\n<p>Disassembling the binary in IDA renders the following assembly code for that portion:</p>\n<pre><code>ROM:00000000                 AREA ROM, CODE, READWRITE, ALIGN=0\nROM:00000000                 CODE32\nROM:00000000                 DCD 3, 0x2C82, 0x150, 0x1C0, 0x1A, 0x2B, 0x80, 0\nROM:00000020                 DCD off_2624\nROM:00000024                 DCD 8, 0x1004, 0x2930, 0x7FFFC, 0\nROM:00000038                 DCD 0x1327F7, 0x3FF, 1, 0x2C74, 0, 0\n</code></pre>\n<p>where the number of interest appears in the last line as <code>DCD 0x1327F7</code>. That number doesn't appear anywhere else in the code, neither that address is referenced anywhere in the rest of the code. The neighboring bytes (here <code>0x27F7</code>) change in a seemingly \"random\" way (it is likely possible that I just haven't figured out their purpose <em>yet</em>). Regardless I am only interested in the <code>0x13</code> field. </p>\n<p>Is there a convention for the contents of the first bytes of an ARM binary? Any ideas as to the purpose of that byte or if there actually exists a correlation to the file's size?</p>\n<p><strong>P.S.</strong> For differential analysis purposes I'm adding another file's initial bytes. Here the number I am interested in is <code>0x03</code> in line 4. The offset of interest is always the same. The first file was 11928 bytes whereas this one is 2850 bytes.</p>\n<pre><code>0300 0000 9608 0000 5001 0000 0701 0000\n0a00 0000 1300 0000 8000 0000 0000 0000\n6404 0000 0800 0000 0410 0000 9006 0000\nfcff 0700 0000 0000 087d 0300 ff03 0000\n0100 0000 8808 0000 0000 0000 0000 0000\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "637",
    "tags": [
        "ida",
        "binary-analysis",
        "arm"
    ],
    "user": "koukouviou",
    "time": "Aug 3, 2015 at 16:39",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">\"A binary\" (or in this context, \"an ARM binary\") typically refers to an executable file. However, it seems as though you're in fact asking about <i>a binary file</i> (a non-text-based file that is not necessarily executable). Assuming that's the case, what program is consuming/modifying this binary file?</span>",
            "time": null
        },
        {
            "user": "koukouviou",
            "text": "<span class=\"comment-copy\">The program is compiled <a href=\"https://en.wikipedia.org/wiki/Ladder_logic\" rel=\"nofollow noreferrer\">ladder logic</a> that runs on an embedded ARM. I am not 100% sure whether this \"binary\" runs on the CPU as is or if it's first \"unpacked\" by another process on that CPU. I lean towards the option that the code <i>is</i> executable, as the rest of the assembly code from IDA contains the compiled binary for my source code.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">If this was an executable running unter linux, it should be in ELF file format, or maybe in COFF, but both formats don't match your hex dump. So i'm almost sure this is either a binary for some other OS, or a file that's getting interpreted by something. Maybe the name of other files in your file system, or the name of the program used to open your file, could give a hint.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As per the comments above, you would need to reverse engineer your ladder logic program to determine how it's parsing and updating this binary file.</p>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Aug 3, 2015 at 16:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "koukouviou",
                    "text": "<span class=\"comment-copy\">I already gave that a go but it's extremely tedious, I was hoping I would get away with a simpler solution as I already figured out the byte's correlation with the file's size. Thanks anw!</span>",
                    "time": null
                }
            ]
        }
    ]
}