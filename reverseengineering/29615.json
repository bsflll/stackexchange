{
    "title": "How can I tell ld to link to a local symbol in a shared object?",
    "link": "https://reverseengineering.stackexchange.com/questions/29615/how-can-i-tell-ld-to-link-to-a-local-symbol-in-a-shared-object",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Symbols in shared objects can be either local or global.  This is controlled by a flag in the symbol table. If the symbol is local, ld won't resolve to it.</p>\n<p>Reverse engineering can often be aided by doing this, by linking a shared object and referencing its symbols (e.g. <code>printf(\"%p\", main_arena)</code>.  Since all the information is there, and its only a flag telling ld to ignore this, it should be possible to tell ld to resolve a local symbol as well.  How can I do this?</p>\n<p>Note that a simple patch of the flag isn't enough:</p>\n<pre><code>objcopy --globalize-symbol=main_arena libc-2.30.so libc-2.30.global_symbols.so\n</code></pre>\n<p>even though the symbol is now listed as global, <code>ld</code> still can't find it, because all global symbols must be before any local (see <a href=\"https://github.com/lief-project/LIEF/issues/112\" rel=\"nofollow noreferrer\">https://github.com/lief-project/LIEF/issues/112</a> ) and perhaps for other issues (see <a href=\"https://stackoverflow.com/questions/6527014/making-a-local-symbol-global\">https://stackoverflow.com/questions/6527014/making-a-local-symbol-global</a> ).  It might be possible to rebuild the entire symbol table, but this will introduce other changes that we don't want.  What we want is simply to tell <code>ld</code> \"Please break the rules and resolve local symbols as well, just like gdb does.\"</p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "419",
    "tags": [
        "symbols",
        "gcc",
        "dynamic-linking"
    ],
    "user": "SRobertJames",
    "time": "Nov 25, 2021 at 5:01",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Why not change <code>ld</code>'s source, build and do whatever?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">By <code>ld</code> you mean <code>ld</code> (from Binutils, or <code>lld.ld</code> from Clang) or you mean <code>ld.so</code>?</span>",
            "time": null
        },
        {
            "user": "SRobertJames",
            "text": "<span class=\"comment-copy\">@0xC0000022L <code>ld.so</code></span>",
            "time": null
        }
    ],
    "answers_data": []
}