{
    "title": "How to change PE signature? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4633/how-to-change-pe-signature",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/4633/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-06-20 16:41:30Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/4633/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm looking for a way to recognize an executable file as a NullSoft installer. IÂ´m trying to prove that a malicious software is capable of changing the PE signature so we can not trust in some tool tell us a PE is a NullSoft Installer only because it have found the NullSoft signature. </p>\n<p>Any help will be appreciated, recommended tools, etc ...</p>\n<p><strong>EDIT</strong></p>\n<p>After reading the Stolas's answer I decided to edit the question and add more info.</p>\n<p>I already tried with to use an hex editor on an original NullSoft installer and I searched for the string <code>NullSoft</code> this yielded the following result:</p>\n<p><img alt='Result for searching the string \"Nullsoft\" with UltrEedit.' src=\"https://i.sstatic.net/UJMrQ.png\"/></p>\n<p>The string was found in a <code>XML</code>:</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n    &lt;assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"X86\" name=\"Nullsoft.NSIS.exehead\" type=\"win32\"/&gt;\n    &lt;description&gt;\n        Nullsoft Install System v2.46\n    &lt;/description&gt;\n    &lt;dependency&gt;\n        &lt;dependentAssembly&gt;\n            &lt;assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"X86\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\" /&gt;\n        &lt;/dependentAssembly&gt;\n    &lt;/dependency&gt;\n    &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n        &lt;security&gt;\n            &lt;requestedPrivileges&gt;\n                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n            &lt;/requestedPrivileges&gt;\n        &lt;/security&gt;\n    &lt;/trustInfo&gt;\n    &lt;compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\"&gt;\n        &lt;application&gt;\n            &lt;supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/&gt;\n            &lt;supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\"/&gt;\n        &lt;/application&gt;\n    &lt;/compatibility&gt;\n&lt;/assembly&gt;\n</code></pre>\n<p>These seems to be what I want to insert in my \"malicious\" app. So, how can I add that into my app? </p>\n<p>My app it's just a \"Hello world\" written in Visual C++.</p>\n<p>I'm aware that I have to write this at the same offset that in the original, but I just don't know how.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "malware",
        "binary-analysis",
        "pe"
    ],
    "user": "Raydel Miranda",
    "time": "10 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Could you clarify how this relates to FLIRT? You want to prove that IDA is vulnerable or something?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">@0xC0000022L: I removed his <code>flirt-signatures</code> tag since there is no NullSoft installer FLIRT signature. Seems like he applied the wrong tag to his question.</span>",
            "time": null
        },
        {
            "user": "Raydel Miranda",
            "text": "<span class=\"comment-copy\">@JasonGeffner Yes the tag was wrong, I ment <code>signature</code> no <code>flirt-signature</code>.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">It is well known that the format can be faked, since just need the right data at the right location.  Why not reverse the order instead - create a NSIS file and then insert your non-NSIS data in place of the compressed content?  This has the equivalent effect.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For this you'd first need to realize how programs are recognized to be specific types of software.</p>\n<p>This can be specific imports, strings or binary strings within the code. When you realize how tools make these signatures try to be cunning and put the signature in your 'malicious' application. Check it with your 'signature' tooling and tweak if required.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Jun 18, 2014 at 20:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sigtran",
                    "text": "<span class=\"comment-copy\">nice answer, just to add, here is an idea to check:  -- Add a new section \".ndata\" to a target exe  -- copy the appended data of a good nullsoft install package to a target exe.  -- check against the software that recognizes sigs.  Both can be done via a simple hex editor of your choice</span>",
                    "time": null
                }
            ]
        }
    ]
}