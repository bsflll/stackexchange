{
    "title": "How to get notified about IDA database events not covered in the IDA SDK?",
    "link": "https://reverseengineering.stackexchange.com/questions/1956/how-to-get-notified-about-ida-database-events-not-covered-in-the-ida-sdk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In my <a href=\"https://reverseengineering.stackexchange.com/questions/1906/how-can-my-plugin-get-notified-of-anterior-or-posterior-comments-and-more-chan\">previous question</a> I had originally asked for this, but since this aspect of the question was completely disregarded, I feel compelled to ask it separately.</p>\n<p>There are certain events apparently not covered in the IDA SDK. I learned in the above linked question that anterior and posterior comments are supported, but what about other events such as when I press <kbd>h</kbd> (e.g. <code>2Ah</code> becomes <code>42</code>) to change the number to base 10 (and back) or <kbd>r</kbd> to show it as character (e.g. <code>2Ah</code> becomes <code>*</code>).</p>\n<p>How would I go about to catch these?</p>\n<p><strong>NB:</strong> in general this question would also relate to IDA versions prior to the ones supporting a particular event notification. E.g. the IDA SDK 6.4, according to Igor, introduced notifications for anterior and posterior comments. How can I get older versions and 6.4 to co-operate w.r.t. those events in conjunction with <a href=\"http://sourceforge.net/projects/collabreate/\" rel=\"nofollow noreferrer\">collabREate</a>?</p>\n<p>I know that it is allowed to reverse engineer IDA itself, so what I am looking for are pointers.</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "934",
    "tags": [
        "ida",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "0xC0000022L",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "alexanderh",
            "text": "<span class=\"comment-copy\">In case you haven't seen it Dumpinfo.idc might be a good start. Here is a <a href=\"https://www.hex-rays.com/products/ida/support/freefiles/dumpinfo.idc\" rel=\"nofollow noreferrer\">link</a> for the IDC script created by J.C. Roberts. I'm unsure if it answers your questions so adding as a comment.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@alexanderh: no, I hadn't known about this one. Thanks for the pointer. It certainly looks like a starting point.</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">I think the only possible answer to this question is \"reverse engineering\".  Discover the mechanism by which the action in which you are interested is triggered, and then patch IDA (or use DLL injection etc) to send some sort of custom notification.  However, I doubt it will be that easy; you could expect, perhaps, multiple code paths responsible for the same action.  I expect if it were that easy, Hex-Rays would add the notifications themselves.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I needed to do a similar task I ended up hooking the IDB save event and then scanned the IDB for modifications using the IDA API before each user save. it took about a few seconds to scan the entire function list, aggregating most information for both functions and data elements.</p>\n<p>To me, that sounds like a more practical approach than trying to reverse engineer IDA and patching these hooks in, especially when trying to catch UI events such as user hotkeys.</p>\n<p>one point to note though, is that aggregating structure/enum data might be difficult if you choose not to rely on IDA's id numbers if you're doing to handle more than one IDB file.</p>\n<p>If you do wish to reverse engineer IDA, it'll be very interesting to join a discussion on the topic somewhere.\nsince IDA now uses Qt for most of it's UI (though I'll guess the migration to Qt wasn't as smooth as one could hope), a great starting point into Qt will be <a href=\"http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing\" rel=\"nofollow noreferrer\">Daniel Pistelli's Qt Internals and Reversing</a> article, which also includes an IDAPython script at the end (yet reading the entire article is highly recommended).</p>\n<p>it's somewhat outdated but assuming IDA uses Qt 4.8.x there aren't many differences (if you'd like I can list the ones I know of).</p>\n<p>basically, since Qt is very event-driven (and with some luck IDA 6.0 was designed with that in mind) it might be the case that you just need to listen, in Qt-dialect this is called <code>connect</code>-ing a <code>slot</code> (event handler) to a <code>signal</code> (event), for at-least some of the specific events you wish to hook.</p>\n<p>I previously did some moderate Qt-IDA hacks as I call them, using Qt and PyQt to manipulate Qt objects under IDA's application. In the same manner I managed to add and edit menu items and tool bars manually, it is definitely possible to look up the context menu popup when right-clicking in IDA's disassembly view or hooking the hotkeys.</p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/11181/adding-a-toolbar-to-ida-using-pyside/12999#12999\">This RE.SE</a> answer of mine might be a good place to start.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Thanks for taking the time to answer. It's a good start in the direction Rolf holds will be the only feasible method.</span>",
                    "time": null
                }
            ]
        }
    ]
}