{
    "title": "Why would just two bits of the SP be used here?",
    "link": "https://reverseengineering.stackexchange.com/questions/26581/why-would-just-two-bits-of-the-sp-be-used-here",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the section of disassembled code in question. It’s from a Linux kernel module compiled for 4.4.16 on ARMv7.</p>\n<pre><code>  ; Registers used:\n  ;  - r3 :  unsigned long argp\n\n0000005c         mov        r1, sp\n00000060         bic        r2, r1, #0x1fc0\n00000064         bic        r2, r2, #0x3f\n00000068         ldr        r4, [r2, #0x8]\n0000006c         adds       r1, r3, #0x1\n00000070         sbcslo     r1, r1, r4\n00000074         movlo      r4, #0x0\n00000078         cmp        r4, #0x0\n0000007c         bne        loc_dc\n</code></pre>\n<p>The stack at this point looks like this:</p>\n<pre><code>00  &lt;- SP\n04  [padding]\n07  u8 arg_kernel\n08  pushed[r4]\n0c  pushed[r5]\n10  pushed[r6]\n14  pushed[lr]\n18  &lt;Previous SP&gt;\n</code></pre>\n<p>Here’s how I decoded this assembly into pseudo-C:</p>\n<pre><code>r4 = *(SP &amp; 0xe000 + 8);\nr1 = argp + 1;\n\nif (r1 overflowed) {\n    r1 -= r4;\n    r4 = 0;\n}\n\nif (r4 == 0) {\n  /* jump */\n}\n</code></pre>\n<p>If I got this right, I don’t really understand the purpose of this code. If I made a mistake, I <em>really</em> don’t understand it. Can anyone offer any insight into the purpose of these operations?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "42",
    "tags": [
        "disassembly",
        "linux",
        "arm",
        "kernel"
    ],
    "user": "MTCoster",
    "time": "Dec 18, 2020 at 16:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your translation is wrong. The two BIC instructions clear the 13 low bits of the stack pointer (1FC0|3F = 1FFF). In kernel mode, this produces a pointer to the<a href=\"https://stackoverflow.com/q/43176500\"> <code>thread_info</code> structure</a> for the current thread.</p>\n<p>The <code>ldr</code> then reads the field at offset 8 in it which <a href=\"https://elixir.bootlin.com/linux/v4.3/source/arch/arm/include/asm/thread_info.h\" rel=\"nofollow noreferrer\">seems to be <code>addr_limit</code></a> and <code>r3+1</code> apparently should not exceed it.</p>\n<p>Combined, the code matches this helper from <code>uaccess.h</code>:</p>\n<pre><code>#define __range_ok(addr, size) ({ \\\n    unsigned long flag, roksum; \\\n    __chk_user_ptr(addr);   \\\n    __asm__(\"adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0\" \\\n        : \"=&amp;r\" (flag), \"=&amp;r\" (roksum) \\\n        : \"r\" (addr), \"Ir\" (size), \"0\" (current_thread_info()-&gt;addr_limit) \\\n        : \"cc\"); \\\n    flag; })\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 19, 2020 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}