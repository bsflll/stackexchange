{
    "title": "Rebuild symbol table",
    "link": "https://reverseengineering.stackexchange.com/questions/4549/rebuild-symbol-table",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to load a function I have decompiled in IDA Pro.  All I have is the IDA Pro function name <code>sub_xxxx()</code> and obviously the address.  I had thought about using <code>dlopen</code> to load the binary but obviously I don't have a symbol to load as the binary has been stripped.  Could I somehow call the function without a symbol table?  Or do I have to rebuild the symbol table of the binary to then use <code>dlsym</code> to locate and load the symbol?</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "dynamic-linking"
    ],
    "user": "allbabel",
    "time": "Jun 5, 2014 at 15:28",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can call a function at any address. So, load the dynamic library into your process address space, figure out the base of the newly loaded library and take the offset from the base of the library of the function you wan't to call and add that together. </p>\n<p>So if IDA says the base of the binary is <code>0x4000</code> and your function is at address <code>0x4100</code>, then you have an offset of <code>0x100</code>. Then if you load your library it winds up getting loaded at address <code>0x8000</code>, you make a function pointer (with the correct signature of course) pointing at address <code>0x8000 + 0x100</code> and call it. Depending on your platform the base you get for your dynamic library from the platform loader may be further offset from the actual base IDA shows.</p>\n<p>Another option is of course to add a new export definition for your <code>sub_xxx()</code> function to the dynamic library and having the loader actually handle any relocations. It will be far more reliable, will allow you to name the function something sane so that you can handle future updates to the library where the function address changes simply by re-adding your new export to the new version. Use something like <a href=\"http://www.zynamics.com/bindiff.html\" rel=\"nofollow\">BinDiff</a> to find the new location of the function.</p>\n<p>The third popular option is to use something similar to <a href=\"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\" rel=\"nofollow\">IDAs FLIRT</a> signatures in order to scan the loaded dynamic library for the function directly in memory. It's generally called signature scanning and <a href=\"https://wiki.alliedmods.net/Signature_Scanning\" rel=\"nofollow\">here's a more thorough explanation</a> of the concept on the Windows platform. Very simplified it's a technique for finding a function based off of pattern extracted from the function prologue.</p>\n<p>In your case you control the application from what I can see and want to call into a dynamic library you don't have the source for. In that case I would probably go with the second option or the first one if you know that the library will never change.</p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Jun 5, 2014 at 15:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "allbabel",
                    "text": "<span class=\"comment-copy\">I like the first option, I am thinking of using dlopen to open the library but then how do I get the address of the loaded library in code?  I could look at /proc/maps etc but it would be nice to grab it in code.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">@allbabel I haven't done this myself but could you perhaps use <code>library = dlopen(\"path\", RTLD_NOW)</code>, then <code>address = dlsym(library, \"some_known_exported_function\")</code>. Then take the offset of your function from the known exported function and add that to the value returned by <code>dlsym</code>?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I do not know your exact case. But if the binary is just stripped (or sstrip is used) and your function is just a call to an external symbol of a dynamic library, you might want to take a look at this little IDA python script of mine: <a href=\"http://h4des.org/blog/index.php?/archives/343-Restoring-external-symbol-calls-in-IDA-when-ELF-sections-are-deleted.html\" rel=\"nofollow\">http://h4des.org/blog/index.php?/archives/343-Restoring-external-symbol-calls-in-IDA-when-ELF-sections-are-deleted.html</a></p>\n<p>This script uses an ELF parser library I wrote (called ZwoELF) that tries to only use information that the ELF loader is using to circumvent problems that almost all analysis tools/frameworks I tested have because they rely on optional data like ELF sections.</p>\n</div>",
            "votes": "0",
            "user": "user5843",
            "time": "Jun 13, 2014 at 15:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}