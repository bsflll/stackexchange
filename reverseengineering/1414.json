{
    "title": "Thread Injection on OSX",
    "link": "https://reverseengineering.stackexchange.com/questions/1414/thread-injection-on-osx",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Much reverse engineering has been done on Windows over the years leading to great undocumented functionality, such as using <code>NtCreateThreadEx</code> to <a href=\"http://securityxploded.com/ntcreatethreadex.php\">inject</a> threads across sessions.  </p>\n<p>On OSX the topic of thread injection seems relatively uncharted.  With the operating system being so incredibly large, where can I begin looking in order to uncover the functionality I desire?</p>\n<p>For example, if someone were to ask me this about Windows, I would expect an answer telling me to begin reverse engineering <code>CreateRemoteThread</code> or to start looking at how the kernel creates user threads and point them into <code>ntoskrnl.exe</code>.</p>\n</div>",
    "votes": "13",
    "answers": 3,
    "views": "3k",
    "tags": [
        "osx"
    ],
    "user": "mrduclaw",
    "time": "Mar 31, 2013 at 3:00",
    "comments": [
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">The <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/software\">software</a> is redundant as the majority of questions here involve software.</span>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<span class=\"comment-copy\">Seems that there are a significant number of hardware related questions as well.  If a hardware RE wanted to use this site, wouldn't it be nice if he/she could just put \"software\" on their ignored tags and be free from questions like mine?</span>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">A hardware RE could also add the <a href=\"https://reverseengineering.stackexchange.com/questions/tagged/hardware\">hardware</a> to his favorite tags. It would have a similar effect. Do post you opinion here -&gt; <a href=\"http://meta.reverseengineering.stackexchange.com/questions/3/how-should-software-questions-be-tagged\" title=\"how should software questions be tagged\">meta.reverseengineering.stackexchange.com/questions/3/â€¦</a></span>",
            "time": null
        },
        {
            "user": "mrduclaw",
            "text": "<span class=\"comment-copy\">@AshRj Fair point. I'll fix it in the future.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Admittedly, I don't know much about OSX, or even Linux.  But I would suggest looking at the <a href=\"http://www.gnu.org/software/gdb/current/\">GDB</a> source code.  GDB somehow is able to attach to running processes in order to debug them.  I would imagine this would, at least, provide similar functionality that you're looking for and prove a decent place to start.</p>\n<p>If you're looking for a system call, it appears that <code>ptrace</code> is how GDB might do it.  Also, <a href=\"http://www.alexonlinux.com/how-debugger-works\">here's</a> a nice overview of how debuggers work.</p>\n<p><strong>Update</strong>: </p>\n<p>Actually it seems that Uninformed wrote an <a href=\"http://uninformed.org/index.cgi?v=4&amp;a=3\">article</a> that covers this topic somewhat.  In the article they discuss:</p>\n<blockquote>\n<p>A lot of people seem to move to Mac OS X from a Linux or BSD\n  background and therefore expect the ptrace() syscall to be useful.\n  However, unfortunately, this isn't the case on Mac OSX. For some\n  ungodly reason, Apple decided to leave ptrace() incomplete and unable\n  to do much more than take a feeble attempt at an anti-debug mechanism\n  or single step the process.</p>\n</blockquote>\n<p>Also from that article, it looks like <code>thread_create_running</code> might be the function you're looking for.  <a href=\"http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/thread_create_running.html\">Link</a> to the man page.</p>\n</div>",
            "votes": "12",
            "user": "omghai2u",
            "time": "Mar 31, 2013 at 2:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">The Uninformed article is really great and I think right what I needed to get me started in the right direction.  Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For OS X injection, I would look at the mach_star projects (mach_override and mach_inject)</p>\n<p><a href=\"https://github.com/rentzsch/mach_star\" rel=\"nofollow\">https://github.com/rentzsch/mach_star</a></p>\n<p>Also, Pin now has os x support</p>\n<p><a href=\"http://software.intel.com/en-us/articles/pin-a-binary-instrumentation-tool-downloads\" rel=\"nofollow\">http://software.intel.com/en-us/articles/pin-a-binary-instrumentation-tool-downloads</a></p>\n</div>",
            "votes": "4",
            "user": "broadway",
            "time": "Apr 3, 2013 at 7:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might find this useful -- I ended up writing a tutorial about this recently, since, as you note, documentation for this stuff is always so sketchy and often out of date.</p>\n<p><a href=\"http://soundly.me/osx-injection-override-tutorial-hello-world/\" rel=\"nofollow\">http://soundly.me/osx-injection-override-tutorial-hello-world/</a></p>\n</div>",
            "votes": "0",
            "user": "jar",
            "time": "May 7, 2014 at 19:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}