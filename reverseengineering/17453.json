{
    "title": "How do you use the Radare debugger with command line arguments (parameters)?",
    "link": "https://reverseengineering.stackexchange.com/questions/17453/how-do-you-use-the-radare-debugger-with-command-line-arguments-parameters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If I want to debug <code>ls</code> I can run,</p>\n<pre><code>radare -d /bin/ls\n</code></pre>\n<p>But, how do I provide an argument or parameter to <code>ls</code>? Like I would do if I wanted to run <code>radare -d /bin/ls -1</code>. I've tried it like that without quotes, which returns </p>\n<blockquote>\n<p>radare2: invalid option -- '1'</p>\n</blockquote>\n<p>I've also tried quoting the whole thing</p>\n<pre><code>radare2 -d \"/bin/ls -1\"\nCould not execvp: No such file or directory\n[w] Cannot open 'dbg:///bin/ls\\ -1' for writing.\n</code></pre>\n<p><a href=\"https://radare.gitbooks.io/radare2book/content/introduction/basic_debugger_session.html\" rel=\"nofollow noreferrer\">The Radare2book's <em>\"Basic Debugger Session\"</em></a> says , <em>\"or you can start a new program by specifying its name and parameters\"</em>, but it's not clear how you specify the parameters.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "6k",
    "tags": [
        "debugging",
        "debuggers",
        "radare2"
    ],
    "user": "Evan Carroll",
    "time": "Feb 13, 2018 at 2:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Seems like radare has problems with passing arguments starting with dash (\"-\"). Please consider <a href=\"https://github.com/radare/radare2/issues\" rel=\"noreferrer\">open an issue</a>.</p>\n<p>Anyway, you can pass arguments to radare2 debugged program in several ways.</p>\n<p>The simplest way is:</p>\n<pre><code>r2 -d program arg1 arg2 arg3\n</code></pre>\n<ul>\n<li><strong>r2</strong> is an alias for radare2.</li>\n<li><strong>-d</strong> is telling radare2 to debug the execuable.</li>\n<li><strong>arg1..3</strong> are the arguments passed to the executable by radare2.</li>\n</ul>\n<p>For example:</p>\n<pre><code>$ r2 -d echo Hello, World!\nProcess with PID 4755 started...\n= attach 4755 4755\nbin.baddr 0x00400000\nUsing 0x400000\nasm.bits 64\n -- You haxor! Me jane?\n\n[0x7f9b1b000c30]&gt; dc\nHello, World!\n</code></pre>\n<p>Another way is using the <code>ood</code> command inside radare2 shell:</p>\n<p>Execute <code>radare2 ./program</code>, then type <code>ood arg1 arg2 arg3</code>. The <code>ood</code> command is used to \"<em>reopen in debugger mode (with args)</em>\".</p>\n<pre><code>$ r2 /bin/ls\n -- Use V! to enter into the visual panels mode (dwm style)\n\n[0x004049a0]&gt; doo -la\nProcess with PID 4757 started...\nFile dbg:///bin/ls  -la reopened in read-write mode\n= attach 4757 4757\n4757\n\n[0x7f5f36600c30]&gt; dc\ntotal 206\ndrwxrwxrwx 0 root root   512 Feb 13 04:25 .\ndrwxrwxrwx 0 root root   512 Jan 16 05:30 ..\n</code></pre>\n<p>You can also call <code>ood</code> with dynamic parameters using backticks. For example we want debug our program using the content from a file on our system as an arguments:</p>\n<pre><code>ood `!cat file.txt`\n</code></pre>\n<p>Say file.txt content is 'foo bar' so this equivalent to executing <code>ood foo bar</code></p>\n<ul>\n<li><strong>backticks</strong> are used for passing the output of radare2 commands.</li>\n<li><strong>!</strong> is running the given command as in system(3).</li>\n</ul>\n<p>Another way to pass arguments to radare2 debugged program is by using <code>rarun2</code> profile files:</p>\n<pre><code>$ r2 -R profile.rr2 -d program\n$ cat profile.rr2\n#!/usr/bin/rarun2\narg1=foo\narg2=bar\n</code></pre>\n<ul>\n<li><strong>-R</strong> [rarun2]  specify rarun2 profile to load.</li>\n</ul>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Feb 13, 2018 at 12:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Dacav",
                    "text": "<span class=\"comment-copy\">The last bit of this question seems to be wrong (possibly reporting an old behaviour?) I found that the correct way of specifying a profile is via <code>-r</code>, not <code>-R</code>. <code>-R</code> can be used to specify directives without using a file.  In other words: <code>r2 -r profile.rr2 -d program</code></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1><code>rarun2</code></h1>\n<p>This comes under the purview of <code>rarun2</code> which isn't documented in the radare2 book, but instead in <a href=\"https://monosource.gitbooks.io/radare2-explorations/content/intro/debugging.html\" rel=\"nofollow noreferrer\">radare2-explorations</a>. From <code>man rarun2</code></p>\n<blockquote>\n<p>The <code>rr2</code> (<code>rarun2</code>) configuration file accepts the following directives, described as key=value entries and comments defined as lines starting with '#'.</p>\n<p><code>arg[0-N]</code>    set value for argument N passed to the program</p>\n</blockquote>\n<p>So you can run that simply by either creating a profile, or doing this</p>\n<pre><code>r2 -R arg0=\"-1\" -d /bin/ls\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Evan Carroll",
            "time": "Feb 13, 2018 at 3:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}