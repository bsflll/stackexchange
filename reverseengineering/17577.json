{
    "title": "Magic number in resource loading routine",
    "link": "https://reverseengineering.stackexchange.com/questions/17577/magic-number-in-resource-loading-routine",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm practicing windows disassembly on x64 notepad.exe</p>\n<p>I've managed to find buffer allocation and string resources load.\nBut after that follows code, which I can't fully understand:<br/>\nrbx = 0, rdx = 0 before this part</p>\n<pre><code>            mov     r9, cs:str_res_guid_18 ;  dq 12h\n            lea     rcx, some_data         ;  some address\n            mov     edx, 28h\n            sub     r9, rcx        \n            mov     r8, rdx\n\nloc_100003150: \n            lea     rax, [r8+7FFFFFD6h]    ; what is this number?\n            cmp     rax, rbp\n            jz      short loc_100003173\n            movzx   eax, word ptr [rcx+r9] ; str_res_guid_18\n            cmp     ax, bp\n            jz      short loc_100003173\n            mov     [rcx], ax\n            add     rcx, 2\n            sub     r8, 1\n            jnz     short loc_100003150\n\nloc_100003173: \n            cmp     r8, rbp\n            jz      loc_1000058A0\n</code></pre>\n<p>What does 7FFFFFD6h stands for? And why is it compared against null?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "97",
    "tags": [
        "windows",
        "x86-64",
        "winapi"
    ],
    "user": "Vlad Fedyaev",
    "time": "Mar 2, 2018 at 13:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This seems to be an optimized wchar_t string copy. The compiler took advantage of the fact that there is a fixed offset between source and destination. Ignoring the  lea  check, the assembly could be represented by this pseudocode:</p>\n<pre><code>wchar_t *dst = &amp;some_data; //rcx\nwchar_t *src = ?; //r9\ndelta = src-dst; //r9 =r9-dst\nmaxc = 0x28; //r8\n\nloop:\n wchar_t ch = dst[delta]; (dst+(src-dst) = src, so ch=src[i];)\n if ( ch==0 ) break;\n *dst = ch;\n dst++;\n maxc--;\n if ( maxc!=0 ) goto loop;\n</code></pre>\n<p>Now let's look at the mysterious <code>lea</code>. First thing you need to remember that it's basically just a fancy <code>mov</code>, and the operands are not necessarily addresses.</p>\n<p>so let's take <code>lea     rax, [r8+7FFFFFD6h]</code> and do some math:</p>\n<pre><code>rax = r8+0x7FFFFFD6\n</code></pre>\n<p>multiply both sides by 2:</p>\n<pre><code>2*rax = 2*r8+0xFFFFFFAC\n</code></pre>\n<p>treat number as signed:</p>\n<pre><code>2*rax = 2*r8-0x54\n</code></pre>\n<p>now divide:</p>\n<pre><code>rax = r8 - 0x2a\n</code></pre>\n<p>so testing rax==0 is the same as r8==0x2a. Possibly the code is checking that number of characters to copy is not greater than the buffer size. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Mar 2, 2018 at 19:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vlad Fedyaev",
                    "text": "<span class=\"comment-copy\">Thanks Igor, that seems to be the case and it all fits. However, can you clarify, why is there a multiplication in lea.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@VladFedyaev there is no multiplication, it’s been factored out by the compiler. basically, 0x7FFFFFD6 is 0xFFFFFFAC divided by two without sign extension. I multiplied the equation so it’s easier to see where 0x2A is coming from.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">see also a similar trick here: <a href=\"https://reverseengineering.stackexchange.com/a/6272\">reverseengineering.stackexchange.com/a/6272</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>ignore the first part: 7FF..FF is a sequence of 1's\nThe interesting part is the D6 which equals 1101 0110, or 214 in decimal.\nSo it check's whether a couple of bytes after the addrress in R8 is a Zero</p>\n<p>Also, have a look at section OPERATING SYSTEMS here:\n<a href=\"https://software.intel.com/en-us/articles/introduction-to-x64-assembly\" rel=\"nofollow noreferrer\">https://software.intel.com/en-us/articles/introduction-to-x64-assembly</a></p>\n</div>",
            "votes": "0",
            "user": "dns43",
            "time": "Mar 2, 2018 at 14:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}