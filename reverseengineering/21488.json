{
    "title": "How to prevent angr from taking dozens of hours and GB of memory solving a (seemingly) simple CTF problem",
    "link": "https://reverseengineering.stackexchange.com/questions/21488/how-to-prevent-angr-from-taking-dozens-of-hours-and-gb-of-memory-solving-a-seem",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was recently working on a (seemingly) simple CTF challenge where the input was a base64 encoded file and the binary would check for correctness in one function call. The catch is that the checking function was about 88k basic blocks long, but is entirely linear. So each block would check for a single byte and, if incorrect, would branch to a smaller block that would call an exiting function. The operation in each block is simple:</p>\n<pre><code>if(RANDOM_CONST0 == mem[i] ^ RANDOM_CONST1){\n    goto next_basic_block;\n}else{\n    exiting_function()    //no return\n}\n</code></pre>\n<p>The constants used are different for each basic block. So, it seemed like a great target for angr!</p>\n<p><strong>Attempts (using <code>call_state</code>):</strong></p>\n<p>1)</p>\n<ul>\n<li>Uses <code>SimulationManager.explore</code></li>\n<li>Drops <code>avoid</code> and <code>deadended</code> states after each step (using <code>step_func</code>)</li>\n<li>Runs of out memory after ~10 minutes (8GB)</li>\n</ul>\n<p>2)</p>\n<ul>\n<li>Uses <code>SimulationManager.step</code></li>\n<li>Manually prunes off 'bad' state after each step (e.g. one that leads to calling the exiting function)</li>\n<li>Evaluates a single byte of the solution after each block\n\n<ul>\n<li>Sets the memory to concrete value 0 (for memory reduction)</li>\n</ul></li>\n<li>Still churning after 20 hours (65k bytes of solution)\n\n<ul>\n<li>Dramatic slowing at this point -- about 1 byte/3 seconds</li>\n</ul></li>\n<li>Uses <code>SimulationManager.simplify</code> to reduce memory overhead per step</li>\n</ul>\n<p><strong>Other misc things:</strong></p>\n<ul>\n<li>Absolutely <em>no</em> constraints on the symbolic memory (containing the solution)</li>\n<li>The buffer is ~88k and constraints on that much memory alone consumes a lot of RAM</li>\n</ul>\n<p><strong>Questions:</strong></p>\n<ul>\n<li>Why is so much memory be taken up?\n\n<ul>\n<li>The <em>only</em> symbolic register is <code>eax</code> in each basic block (because it reads a symbolic byte from memory), but it does not compound complexity with each step (it gets set to another symbolic value in the next basic block)</li>\n</ul></li>\n<li>Why has angr slowed so dramatically?</li>\n</ul>\n<p>I uploaded the CTF binary <a href=\"http://s000.tinyupload.com/?file_id=88399206211278650157\" rel=\"nofollow noreferrer\">here</a> for those interested.</p>\n<p><a href=\"https://i.sstatic.net/NezD5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/NezD5.png\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "1k",
    "tags": [
        "angr"
    ],
    "user": "sherrellbc",
    "time": "Jun 14, 2019 at 15:25",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">This is probably not what you want, but if you simply wanted this function to accept any input, you could just patch the badboy function, so that it jumps to the accepting code.</span>",
            "time": null
        },
        {
            "user": "sherrellbc",
            "text": "<span class=\"comment-copy\">@bart1e The flag is not in the binary per-se. The flag is encoded as a base64 file that is fed as input. All this binary does is tell you whether or not the file you fed into it is 'correct'. So patching won't help here. So my intention was to use angr to symbolically derive what the necessary input condition was such that this <code>check</code> function returned success. It does technically work, it just take many hours and GB of RAM to get there.</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">Symbolic Execution is perhaps not the right approach here. Using a binary ninja script which just does pattern matching I was able to get the flag (<code>I_reverse_all_this_and_all_I_got_is_this_flag</code>) in ~5 minutes.</span>",
            "time": null
        },
        {
            "user": "sherrellbc",
            "text": "<span class=\"comment-copy\">@0xec I'd agree. I was considering doing the same with IDA and just pulled out the relevant parts of each block. But the intent was to solve this with angr, so I got something to work. Then, realizing it was impractical, wanted to see why so that I might better understand the underlying issue.</span>",
            "time": null
        },
        {
            "user": "Jasen",
            "text": "<span class=\"comment-copy\">what happen after  exiting_function() ? why is that not also a goto?</span>",
            "time": null
        }
    ],
    "answers_data": []
}