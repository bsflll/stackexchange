{
    "title": "x86 ASM question about hexadecimal numbers and how to transfer them",
    "link": "https://reverseengineering.stackexchange.com/questions/16592/x86-asm-question-about-hexadecimal-numbers-and-how-to-transfer-them",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I am wondering why I cannot do this </p>\n<pre><code>mov eax, ffffffffh\n</code></pre>\n<p>but I can do this:</p>\n<pre><code>mov eax, 0ffffffffh\n</code></pre>\n<p>Could anybody explain please? In this case, I am using the Flat Assembler but I think this is not assembler-specific. </p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "5k",
    "tags": [
        "assembly",
        "hexadecimal"
    ],
    "user": "BoSsYyY",
    "time": "Oct 21, 2017 at 10:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Most assemblers require numeric constants to begin with a digit, this is so they can distinguish between them and labels.  </p>\n<p>You can see it in <a href=\"https://flatassembler.net/docs.php?article=fasmg_manual#1\" rel=\"nofollow noreferrer\"><em>FASM Fundamental syntax rules</em></a>:</p>\n<blockquote>\n<p>Numbers are distinguished from names by the fact that they either\n  begin with a decimal digit, or with the \"$\" character followed by any\n  hexadecimal digit. This means that a token can be considered numeric\n  even when it is not a valid number. To be a correct one it must be one\n  of the following: a decimal number (optionally with the letter \"d\"\n  attached at the end), a binary number followed by the letter \"b\", an\n  octal number followed by the letter \"o\" or \"q\", or a hexadecimal\n  number either prepended with \"$\" or \"0x\", or followed by the character\n  \"h\". Because the first digit of a hexadecimal number can be a letter,\n  it may be needed to prepend it with the digit zero in order to make it\n  recognizable as a number. For example, \"0Ah\" is a valid number, while\n  \"Ah\" is just a name.</p>\n</blockquote>\n<p>and in <a href=\"http://people.sju.edu/~ggrevera/arch/references/MASM61PROGUIDE.pdf\" rel=\"nofollow noreferrer\">MASM Manual</a> as well:</p>\n<blockquote>\n<p>Hexadecimal numbers must always start with a decimal digit (0â€“9). If\n  necessary, add a leading zero to distinguish between symbols and\n  hexadecimal numbers that start with a letter.</p>\n</blockquote>\n<p>Looking at <code>0ffffffffh</code> you can see 8 significant hex digits, exactly as you'd expect. This is not unique to <code>0ffffffffh</code>, another numeric literals should be written with a leading zero as well --  <code>0d1h</code>, <code>0aah</code>, <code>0b0h</code>.  </p>\n<p>These days it is common for assemblers to support the <code>0xffffffff</code> syntax. If yours is not (FLAT supports it), make sure to pay attention to the leading zero, otherwise the hexadecimal value would be interpreted as a label or another symbol name.</p>\n</div>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Oct 21, 2017 at 12:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}