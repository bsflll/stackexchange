{
    "title": "How to get all the references to function using PyDBG?",
    "link": "https://reverseengineering.stackexchange.com/questions/2180/how-to-get-all-the-references-to-function-using-pydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to get all the addresses in the binary that some function is called from using PyDbg. The address of the function will be supplied as a parameter. </p>\n<p>Do I have actually to scan all the code, looking for the call that is calling that function or is there a more elegant way?</p>\n<p><strong>Update:</strong></p>\n<p>The function is not exported or imported. </p>\n<p><strong>Update 2:</strong></p>\n<p>For example <strong>ImmDbg</strong>  how can it find all the references and show them?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "451",
    "tags": [
        "malware",
        "debuggers"
    ],
    "user": "PhoeniX",
    "time": "Jun 3, 2013 at 19:26",
    "comments": [
        {
            "user": "0xea",
            "text": "<span class=\"comment-copy\">im not sure pydbg has any static analysis built into it and so i don't think it could do much more than what Igor suggested</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">For update 2: it does that using static analysis. Roughly the same as IDA. Disassemble the entire binary and note every immediate destination.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">presumably I still do not know about <b>radare</b> capabilities, is there some \"cheep\" static disassembler library that can be connected to PyDbg and produce some sort of \"ImmDbg\" result?</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">@ph0sec: you shouldn't amend your question with things that <i>broaden</i> instead of narrow down the scope of it.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">@0xC0000022L: So, how do you suggest to ask this question? In my opinion, this will help to understand the matter and resolve the problem I have.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you want all the <code>call</code> instructions (and possibly fake <code>call</code>s using <code>push</code> and <code>jmp</code> and similar using opaque predicates) you won't get around static analysis (<a class=\"post-tag\" href=\"/questions/tagged/static-analysis\" rel=\"tag\" title=\"show questions tagged 'static-analysis'\">static-analysis</a>) of the binary. And if the binary is in any way packed or encrypted that means you need to get through that layer first.</p>\n<p>Igor's solution will be your best bet short of loading the file into a good disassembler and finding all the cross-references to the function you are interested in. But it has the limitation that Igor already pointed out.</p>\n<p>Static analysis has to deal with a lot of ambiguities and issues when distinguishing data and code. But <em>good</em> disassemblers are fairly good at making the right guess and will offer to interactively mark items one way or the other in case of doubt.</p>\n<h3>Conclusion</h3>\n<p>What this means is that PyDbg is probably not the right tool for the problem at hand unless you manage to coerce it into making use of a proper full-fledged disassembler to get all cross-references. But the better choice is probably something like <a href=\"http://radare.org/\">radare2</a> and then, if you are more familiar with PyDbg, applying the gained knowledge to the debugged target in PyDbg.</p>\n</div>",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Jun 3, 2013 at 17:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Ok thanks, I understand your point and I'll take a look @ radare. I'd like to understand another thing - in the main question</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@ph0sec: if it's closely related, edit your question, otherwise better ask a new question :) ... it's better than changing the scope of an existing question after people answered.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>Put a breakpoint on the function address.</li>\n<li>When hit, get the dword at <code>ESP</code> - that would be the return address.</li>\n</ol>\n<p>This, obviously, will catch only the actual calls, not all potential ones.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jun 3, 2013 at 17:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Thanks, this is indeed the obvious one. But I need all of them :).</span>",
                    "time": null
                }
            ]
        }
    ]
}