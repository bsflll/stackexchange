{
    "title": "Elf binary manipulation tool on ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/14810/elf-binary-manipulation-tool-on-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do you know any free tool for binary manipulation elf file on ARM, something like ERESI elfsh for Intel?</p>\n<p>Purpose - adding instructions into existing binary elf file.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "724",
    "tags": [
        "arm",
        "elf",
        "binary"
    ],
    "user": "Ryszard Grzesica",
    "time": "Mar 3, 2017 at 14:29",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Are you interested in static modification specifically? Many tools provide dynamic / runtime modification capabilies for ARM binaries</span>",
            "time": null
        },
        {
            "user": "Ryszard Grzesica",
            "text": "<span class=\"comment-copy\">Yes, correct. I am interested in static modification - most of issues which I fix are not easily reproducible and/or require hours of running platform (any kind of stability issues). The only way (which I am using now) is to mix preloading with instruction changes, sometimes I have luck - several debug/logging instructions which I can exchange and call some @plt function which I preload then. Of course such an approach has limited use.. I presume that static injector would have serious limitations too (or even does not exist from this reason). Thank you for your time.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">By preloading do you mean using LD_PRELOAD to perform dynamic library injection?</span>",
            "time": null
        },
        {
            "user": "Ryszard Grzesica",
            "text": "<span class=\"comment-copy\">Yes. Context is that I have closed platform where apps are \"ours\", middleware is closed (but luckily with symbols), lower layers of userland are closed without symbols and logging (which I managed to enable, but mostly I am doomed to already implemented routines), kernel is open. This is Android but targeted stack is aside of native Android mechanisms. This is context of current project but there are also different projects where, lets say, mapping of closed and open source differs but final goal is to reverse to fix something (or find excuses or proof leting to redirect issue).</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Thank you for providing these details. Unfortunately I do not have a static binary manipulation solution for you right now, but I did find a dynamic instrumentation tool for android called <a href=\"https://github.com/crmulliner/adbi\" rel=\"nofollow noreferrer\">adbi</a> that uses library injection. It is not a static modification tool but it may make your job easier. If I find something like ERESI that has support for ARM ELF binaries I will let you know.</span>",
            "time": null
        }
    ],
    "answers_data": []
}