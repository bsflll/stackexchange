{
    "title": "Mapping a high level statement back in assembly dump",
    "link": "https://reverseengineering.stackexchange.com/questions/10967/mapping-a-high-level-statement-back-in-assembly-dump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Say, I have compiled a large code base, e.g. gzip/gmp/python/php etc. on Linux. Is there any means to map a high level C construct, e.g. assignment/if-else/for/while/Math expression back in the assembly dump produced by <code>objdump</code> or something similar? Please let me know how far it is possible in both the cases when debug information is present and absent.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "336",
    "tags": [
        "disassembly",
        "decompilation",
        "c",
        "objdump"
    ],
    "user": "sherlock",
    "time": "Sep 26, 2015 at 12:15",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Do you want to decompile the code or map assembly to original source ?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">It sounds like what you're asking is, \"is it possible to reverse engineer software?\" So if I'm understanding you correctly, the answer is, \"yes.\"</span>",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Note that just about any of your original \"ssignment/if-else/for/while/Math expression\" in the C source may be optimized beyond recognition, or even entirely be omitted. I.e., even with the lowest compiler optimization settings, you won't find the \"5\" of a statement <code>i = 100/5;</code> back in your executable. (Assuming any 21st century compiler was used.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll try to outline a possible ways you can go:</p>\n<ol>\n<li>If you compile with debug symbols, you can use <em>objdump</em> to produce a more readable disassembly.</li>\n<li>if you give <em>gcc</em> the flag <code>-fverbose-asm</code>, the assembler it emits will be a lot clearer to read.</li>\n<li>Use the <code>-S</code> (note: capital <strong>S</strong>) switch to <em>gcc</em>, and it will emit the assembly code to a file with a <strong>.s</strong> extension. For example, the following command:\n<code>gcc -O2 -S -c foo.c</code> will leave the generated assembly code on the file <strong>foo.s</strong>. </li>\n</ol>\n<p>Also, you can generate this in <strong>AT&amp;T</strong> syntax as well as in <strong>Intel</strong> syntax: <code>gcc -S -masm=att code.c</code> <code>gcc -S -masm=intel code.c</code></p>\n<p>Frankly, I've digested the info from <a href=\"https://stackoverflow.com/questions/1289881/using-gcc-to-produce-readable-assembly%22%20here%22\">here</a>. Hope it will help.</p>\n<p>EDIT: some useful links:</p>\n<p><a href=\"http://www.limitedwish.org/threethings/2012/05/11/c-objdump-asm/\" rel=\"nofollow noreferrer\">The info that's more specific to your question</a></p>\n<p><a href=\"http://www.eresi-project.org/browser/trunk/testsuite/elf/etrel_inject/etrel_original\" rel=\"nofollow noreferrer\">Looks very promising except that the project is abandoned</a></p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}