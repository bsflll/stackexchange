{
    "title": "Prevention of reverse engineering of a microcontroller's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/29964/prevention-of-reverse-engineering-of-a-microcontrollers-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What steps may I take to make it more expensive to reverse engineer a firmware I want to use on a cheap microcontroller?</p>\n<p>Options I see so far:</p>\n<ol>\n<li>Flood it with epoxy with quartz or metal dust to make physical access or x-ray harder</li>\n<li>keep device always-on, and store important part in energy-dependent memory. Ideally a key that decrypts firmware</li>\n<li>Use detection of disasembling process, and erase firmware if triggered. For example a light sensor inside the box or conductivity test or shake sensor.</li>\n<li>Use firmware obfuscation</li>\n<li>Use a particular MC that has an option to disallow firmware read. Is there something in stm32f0 family with this property?</li>\n<li>Add physical parts and firmware code that are not actually needed</li>\n<li>Erase the text from the microcontroller's body</li>\n</ol>\n<p>What points would make your life harder? What other options can you think of?</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "200",
    "tags": [
        "firmware",
        "firmware-analysis"
    ],
    "user": "Surprised Seagull",
    "time": "Feb 1, 2022 at 19:03",
    "comments": [
        {
            "user": "dcom-launch",
            "text": "<span class=\"comment-copy\"><a href=\"https://www.riscure.com/uploads/2017/09/Practical-optical-fault-injection-on-secure-microcontrollers.pdf\" rel=\"nofollow noreferrer\">riscure.com/uploads/2017/09/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}