{
    "title": "Extract certificate information of a process from memory dump",
    "link": "https://reverseengineering.stackexchange.com/questions/29915/extract-certificate-information-of-a-process-from-memory-dump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a <code>.dmp</code> file for <code>googleupdate.exe</code> process. I wanted to check in WinDbg this process has a certificate or not in order to detect this process has modified or not because this process has tried access <code>lsass.exe</code> multiple time.</p>\n<p>How can I check the integrity and also maliciousness of this process in WinDbg? I have just a memory dump from that process and nothing more. I should check it in WinDbg.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "278",
    "tags": [
        "memory",
        "memory-dump",
        "digital-forensics"
    ],
    "user": "Timberwolf",
    "time": "Jan 30, 2022 at 19:36",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">This paper seems to exactly match your question: <a href=\"https://www.sciencedirect.com/science/article/pii/S2666281720300123\" rel=\"nofollow noreferrer\">On Challenges in Verifying Trusted Executable Files in Memory Forensics - DFRWS 2020 EU</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In short, the PE loader does not explicitly load up the certificate details into the new process at run-time.</p>\n<p>In the binary, the certificates are referenced via the IMAGE_DIRECTORY_ENTRY_SECURITY directory; but they are not in a section that is mapped into virtual memory. The data is instead appended to the file.</p>\n<p>You might get lucky and find the cert data has been mapped via a memory mapped file, or if you captured a full kernel dump you might have a copy of it. Otherwise you will have to try and source the file from the computer.</p>\n<p>Your best bet is to manually compare the code-in-memory to a valid copy of googleupdate.</p>\n<p>Also keep in mind that the source binary could be completely valid, but the behavior changed at run-time (via code injection, etc.). So even if you could easily validate the integrity of the certificate, it wouldn't detect rogue threads, hooked functions, etc.</p>\n</div>",
            "votes": "1",
            "user": "josh poley",
            "time": "Feb 9, 2022 at 22:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}