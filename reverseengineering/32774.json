{
    "title": "Getting corrupted video stream when Reverse Engineering UDP video stream from cheap Indian WiFi camera Drone",
    "link": "https://reverseengineering.stackexchange.com/questions/32774/getting-corrupted-video-stream-when-reverse-engineering-udp-video-stream-from-ch",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://youtu.be/wbsQERiqhrE\" rel=\"nofollow noreferrer\">enter link description here</a></p>\n<p>I have this Quadcopter \"Garuda\" that can stream video to an Android APP named VS FPV PRO over wifi.\nI wanted to receive the video stream on my laptop to run some computer vision models so I tried to reverse engineer the Android APP using jadx decompiler.\nI was able to write this python script that initiates the video stream and give a 1 second heartbeat packet to keep the video stream alive.\nYou can see that wireshark is receiving a steady flow of UDP packets of the video stream.\nThe command being</p>\n<p>$ ffplay udp:/172.16.10.1:8888</p>\n<p>I am using ffplay to display the video stream as internally in the app also ffmpeg was being used.\nIn the end of the above video you can see the stream I am able to see the top few lines are somewhat RGB and below it there is a lot of missing pixels. I suspect a decoding issue where error correction might not be happening. I tried setting the peobesize to 32, increasing fifo buggersize and setting framerate but the outcome was the same.\nI feel I am close but I have no leads about this problem so please do give any suggestions or advice on what might be the problem and how to solve it.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "64",
    "tags": [
        "android",
        "networking",
        "wireshark"
    ],
    "user": "Anish N.",
    "time": "Feb 28, 2024 at 12:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'll suggest to you first SSL unpin the target app (using either LSPosed or Frida) &amp; analyze the decrypted/detailed app traffic on Reqable/PCAPDroid/Burp Suite/MITMProxy</p>\n<p>Frida SSL Unpinning Script:-\n<a href=\"https://github.com/apkunpacker/FridaScripts/blob/main/SSLUnpinning.js\" rel=\"nofollow noreferrer\">https://github.com/apkunpacker/FridaScripts/blob/main/SSLUnpinning.js</a></p>\n<p>After which, you should should Developer Assistant app to find the current activity inside the app where the video is streamed. From there, you can use jadx to decompile the code &amp; figure out how target classes decode &amp; play the video.\n(App link: <a href=\"https://play.google.com/store/apps/details?id=com.appsisle.developerassistant\" rel=\"nofollow noreferrer\">https://play.google.com/store/apps/details?id=com.appsisle.developerassistant</a> )</p>\n<p>Further, I'll recommend using SimpleHook LSPosed module to ease reverse engineering, it can help figure out lot of stuff like what classes are triggered on a particular button click, which saves your time.</p>\n<p>Perhaps, there's some \"shortcut\" to figure out what that video format is, it's better if you can find it. But, in case you don't, then you'll have to walk this path to reverse engineer the app directly to figure out the decode flow.</p>\n</div>",
            "votes": "0",
            "user": "Vansh Santoshi",
            "time": "Jul 22, 2024 at 8:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}