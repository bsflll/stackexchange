{
    "title": "Problem with entry point detection as a file offset",
    "link": "https://reverseengineering.stackexchange.com/questions/8476/problem-with-entry-point-detection-as-a-file-offset",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found problem with finding file offset which actually is program entry point.</p>\n<p>In case I experience problem, value of AddressOfEntryPoint is 0x1018. Here is a section which maps this address.</p>\n<p><img alt=\"Section header\" src=\"https://i.sstatic.net/903S0.png\"/></p>\n<p>I assume entry point should be <code>0x28 = 0x10 + 0x1018 - 0x1000 (PointerToRawData + AddressOfEntryPoint - VirtualAddress)</code></p>\n<p>However tools says it is 0x18 instead. I'm not sure why, made some experiments and came up with another formula. </p>\n<pre><code>0x18 = (0x10 / 0x200) * 0x200 + 0x1018 - 0x1000 ((PointerToRawData / FileAlignment) * FileAlignment + AddressOfEntryPoint - VirtualAddress)\n</code></pre>\n<p>I use FileAlignment from OptionalHeader and it works great, however I don't know if it is a coincidence or somewhere documented, so asking here for confirmation.</p>\n<hr/>\n<p>Also, probably not important, but file is packed with UPack(0.399), packer signature BE****AD50FF7634EB7C4801.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "pe",
        "entry-point"
    ],
    "user": "ST3",
    "time": "Mar 16, 2015 at 10:59",
    "comments": [
        {
            "user": "user2823000",
            "text": "<span class=\"comment-copy\">I don't really understand what you are trying to calculate, if you already have the (virtual) address of the entry point, you should just add the base image.</span>",
            "time": null
        },
        {
            "user": "ST3",
            "text": "<span class=\"comment-copy\">@Dillinur I want to calculate file offset for EP.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"https://code.google.com/p/corkami/wiki/PE#PointerToRawData\" rel=\"nofollow\">https://code.google.com/p/corkami/wiki/PE#PointerToRawData</a> --</p>\n<blockquote>\n<p>if a section's physical start is lower than 200h (the lower limit for\n  standard alignment), it is rounded down to 0.</p>\n</blockquote>\n<p>Thus, the entry point's physical offset would be:\n<code>0x00000018 = 0x00000000 + 0x00001018 - 0x00001000</code> (PointerToRawData_rounded_down + AddressOfEntryPoint - VirtualAddress)</p>\n</div>",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Mar 16, 2015 at 15:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">Well it should be <code>0x18</code> because IDA and DIE says so, also I know packer signature and it is at 0x18, not 0x28. So I think there should be something related to FileAlignment and PointerToRawData values, because msdn says PointerToRawData should be multiple of FileAlignment, however it is not.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">After reading <a href=\"https://code.google.com/p/corkami/wiki/PE#PointerToRawData\" rel=\"nofollow noreferrer\">code.google.com/p/corkami/wiki/PE#PointerToRawData</a>, I learned something new and updated my answer above :)</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">The section start had to be non-zero in order to be loaded.  I don't remember why we chose 0x10.  Perhaps because that's where the PE signature was, so it looked nice.</span>",
                    "time": null
                },
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">Great, thanks. All I did was rounding down, but I needed verification if it is not a coincidence.</span>",
                    "time": null
                },
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">@peterferrie You don't remember why?? Of topic question, but are you one of those who designed UPack? If so is there any information for unpacking script? I could reverse it, but that info could save some time.</span>",
                    "time": null
                }
            ]
        }
    ]
}