{
    "title": "Simulate Windows menu item activation",
    "link": "https://reverseengineering.stackexchange.com/questions/12312/simulate-windows-menu-item-activation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to shortcut the call to a procedure that is activated when clicking on a menu item. </p>\n<p>I injected a DLL on the process that creates this window with the menu bar.</p>\n<p>I used Spy++ from VisualStudio to obtain the Menu Identifier for this specific item (wid: 40003). Now I am calling </p>\n<p><code>CallWindowProcW(wndproc, hwnd, WM_COMMAND, 40003, 0);</code> </p>\n<p><strong>However, the item procedure is not triggered.</strong>\nI cannot call the procedure directly because I do not know what it is. I just know that when I click this menu it activates it.</p>\n<p>I have obtained <code>windproc</code> and <code>hwnd</code> doing the following inside my DLL:</p>\n<pre><code> void Init()\n {\n     DWORD procID = GetProcessId(GetCurrentProcess());\n     EnumWindows(myCallback, procID);\n }\n\n BOOL CALLBACK myCallback(HWND hWnd, LPARAM lParam)\n {\n     DWORD wndId;\n\n     GetWindowThreadProcessId(hWnd, &amp;wndId);\n     if(wndId == (DWORD)lParam) //Found the right window handle\n     {\n         WNDPROC windowFunc = (WNDPROC)GetWindowLong(hWnd, GWL_WNDPROC);\n         LRESULT result = CallWindowProcW(windowFunc, hWnd, WM_COMMAND, 40003, 0);\n         return FALSE;\n     }\n     return TRUE;\n  }\n</code></pre>\n<p><s><strong>EDIT</strong>: Have also tried SendMessageA, PostMessageA and DispatchMessageA and failed</s></p>\n<p><strong>EDIT2</strong>: See answer below for working PostMessageA.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "533",
    "tags": [
        "windows",
        "dll-injection"
    ],
    "user": "gibertoni",
    "time": "Apr 1, 2016 at 19:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have identified the problem. It comes in two steps:</p>\n<p><strong>1. Use PostMessageA instead of CallWindowProc</strong></p>\n<p><code>PostMessageA(hWnd, WM_COMMAND, 40003, 0)</code> does the heavy lifting and calls the WindowProc on the desired window.  </p>\n<p><strong>2. Make sure that the Window is Top-Level</strong></p>\n<p>I had ignored this before because the application window was visible and I thought it was top-level. </p>\n<p>However, since I am executing <code>EnumWindows</code> on the <code>Init</code> procedure of my injected dll, my launcher process was still running and the window was child of my launcher. </p>\n<p>I had to wait for the launcher to quit, and then called <code>EnumWindows</code> and <code>PostMessage</code>.</p>\n</div>",
            "votes": "1",
            "user": "gibertoni",
            "time": "Apr 1, 2016 at 19:10",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to have made this a comment but do not have enough points to do so so this would have been a comment on the answer.   </p>\n<p>Simply put, the topmost window in a windows environment receives the RawInputThread (RIT).  The RIT automatically receives the mouse and keyboard messages and sends them to that window which is at the top of the Z order.   Having done a lot of this stuff in the distant past, if you ever need to take total control, a trick that can be done is to implement a top most window (z order) window which covers the whole screen, RIT will give it all messages, and you do what you want with them.</p>\n<p>Back when I was doing this there was little to no documentation on  RIT but now you can find lots of documentation.  I found this on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms645543(v=vs.85).aspx\" rel=\"nofollow\">MSDN Raw Input</a>, but it looks like they are making it more complicated than it really needs to be.  MSFT has done things over the years where they hide a topic, then clarify, then put the topic back into hiding.  duckduckgo shows numerous <a href=\"https://duckduckgo.com/?q=%22raw%20input%20thread%22&amp;t=hk&amp;ia=web\" rel=\"nofollow\">hits</a>  and yielded a nice <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20140213-00/?p=1773/\" rel=\"nofollow\">gem</a> google didn't find on its first page.</p>\n</div>",
            "votes": "0",
            "user": "Div",
            "time": "Aug 19, 2016 at 13:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}