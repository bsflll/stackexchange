{
    "title": "Is it possible to add a label to an ELF executable and then call that label? If so, how?",
    "link": "https://reverseengineering.stackexchange.com/questions/20388/is-it-possible-to-add-a-label-to-an-elf-executable-and-then-call-that-label-if",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say we have this simple \"hello world\" nasm code that will be compiled to an ELF executable:</p>\n<pre><code>global main\n\nsection .data\n    message db \"Hello World!\", 0x00\n\nsection .text\n\nmain:\n    call    hello\n    ret\n\nhello:\n    lea     rdi, [rel message]\n    call    puts\n    ret\n.end:\n</code></pre>\n<p>Is it possible to add a label called <code>decrypt</code> into the compiled ELF executable and then subsequently call it (with/without the source code)?</p>\n<pre><code>global main\n\nsection .data\n    message db \"Hello World!\", 0x00\n\nsection .text\n\nmain:\n    call    decrypt                              &lt;---------------Addition\n    call    hello\n    ret\n\ndecrypt:                                         &lt;---------------Addition\n    DECRYPTOR_SECTION hello, hello.end-hello     &lt;---------------Addition\n    ret                                          &lt;---------------Addition\n\nhello:\n    lea     rdi, [rel message]\n    call    puts\n    ret\n.end:\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "297",
    "tags": [
        "elf",
        "patching",
        "injection",
        "nasm"
    ],
    "user": "Arne",
    "time": "Jan 16, 2019 at 10:17",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Compiled code does not contain labels. (And no, \"debug information\" does not count.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am not sure what your intent is.</p>\n<p>If you mean you have to add a function and call it before  main after the source is compiled, then yes it is definitely possible. All you have to do is run through some hoops like finding a code cave, assembling the new code in code cave, and detouring the first instruction of main to call your new function and return back to main's next instruction. </p>\n<p>If you mean I want the function to be sequential then it might be possible if you can destroy and recreate the assembly in-place (kinda tough).</p>\n<p>And no there is no label you need to calculate relative address / absolute address of the newly added function and use one form of e8 or ff25 call  </p>\n<p>Having source can help you in understanding the assembly but you have to play in assembly only if you have to patch a compiled executable.  </p>\n<p>A program prior to addition of encrypt proc will look like this (a simple msgbox in windows notice both caption and text are pointing to a string which is unintelligible)</p>\n<p><a href=\"https://i.sstatic.net/it6Kp.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/it6Kp.jpg\"/></a></p>\n<p>You may need to implement the commented out source code inline for decrypting </p>\n<pre><code>.386\n.model flat, stdcall\noption casemap:none\ninclude \\masm32\\include\\windows.inc\ninclude \\masm32\\include\\kernel32.inc\nincludelib kernel32.lib\ninclude \\masm32\\include\\user32.inc\nincludelib user32.lib\n\n.data\nEncrypted   db 217,243,234,245,252,249,255,254,183,227,176,228,229\n            db 228,255,226,249,241,252,176,254,255,190,162,144\n\n.code\nstart:\n    ;call decrypt\n    call hello\n    invoke ExitProcess,NULL\n\n; decrypt proc\n    ; xor ecx,ecx\n    ; complete:\n    ; lea esi , Encrypted \n    ; add esi,ecx\n    ; movzx eax , byte ptr ds:[esi]\n    ; xor eax ,090h\n    ; mov byte ptr ds:[Encrypted + ecx], al\n    ; add ecx,1\n    ; cmp byte ptr ds:[Encrypted + ecx - 1 ],0\n    ; jne complete\n    ; ret\n; decrypt endp\n\n\nhello proc\n    invoke MessageBox, NULL,addr Encrypted, addr Encrypted, MB_OK\n    ret\nhello endp \n\nend start\n</code></pre>\n<p>After you implement your decrypt proc some where in existing free space (called code cave) it may look like this  </p>\n<p>Now you have to destroy the first call jmp here decrypt \nadd the code that you destroyed and jump back to the next correct sequential instruction post the destroyed code</p>\n<pre><code>CPU Disasm\nAddress       Command                                            Comments\n00152000      XOR     ECX, ECX\n00152002      /LEA     ESI, [154000]\n00152008      |ADD     ESI, ECX\n0015200A      |MOVZX   EAX, BYTE PTR DS:[ESI]\n0015200D      |XOR     EAX, 00000090\n00152012      |MOV     BYTE PTR DS:[ECX+154000], AL\n00152018      |ADD     ECX, 1\n0015201B      |CMP     BYTE PTR DS:[ECX+153FFF], 0\n00152022      \\JNE     SHORT 00152002\n00152024      RETN\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Jan 19, 2019 at 6:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Arne",
                    "text": "<span class=\"comment-copy\">hi firstly, thank you for the time you put into this answer. Iâ€™d like to ask however, how do I calculate the address of the newly added function? (Sry, noob here)</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">it probably depends on what you are using to patch in first place most debuggers will let you assemble a call in-place with an address and it will auto calculate the differences and this has got nothing to do with reverse engineering</span>",
                    "time": null
                }
            ]
        }
    ]
}