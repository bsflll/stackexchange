{
    "title": "Some help with sprite graphic",
    "link": "https://reverseengineering.stackexchange.com/questions/8145/some-help-with-sprite-graphic",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get the sprites from a game from 1997 called Swing (US: Marble Master). The file is called <a href=\"https://drive.google.com/file/d/0BwnokKRE3G8URVdKWmdLSy1nM0E/view?usp=sharing\" rel=\"nofollow noreferrer\">NORMAL.SET</a> and contains a set of sprites. There is an executable named SHOWSET.EXE that displays the entire set after printing a number on each sprite.</p>\n<p>There are also a file called <a href=\"https://drive.google.com/open?id=0BwnokKRE3G8UdU5VTFVVMFkwME0&amp;authuser=0\" rel=\"nofollow noreferrer\">HINTERH.SWG</a> (SWG probably stands for SWING). I was able to figure out what this file type is using TiledGGD! It is raw data without headers, has the size 640x480, 16 bpp, big endian, (A)RGB. See Screenshot below.</p>\n<p><img alt=\"HINTERH.SWG opened in TiledGGD\" src=\"https://i.sstatic.net/6WsaQ.png\"/></p>\n<p>Using the same settings in TiledGGD I get a close approximation of the <a href=\"https://drive.google.com/file/d/0BwnokKRE3G8URVdKWmdLSy1nM0E/view?usp=sharing\" rel=\"nofollow noreferrer\">NORMAL.SET</a> image. Below you find the output from SHOWSET.EXE (left), aswell as the image how TiledGGD displays it (right).</p>\n<p><img alt=\"NORMAL.SET as displayd in game and in TiledGGD\" src=\"https://i.sstatic.net/Rbr2h.png\"/></p>\n<p>Using a screenshot of the SHOWSET.EXE output, I was able to get close to the codec (?correct term?) used for the pixel data in the NORMAL.SET. I do believe it is based on 16-bit ARGB1555, but still different. Below you see the image extracted from the screenshot. Let's call it screenshot-sprite.</p>\n<p><img alt=\"Sprite extracted from Screenshot\" src=\"https://i.sstatic.net/E5Q7s.png\"/></p>\n<p>Those are the first 192 bytes from NORMAL.SET</p>\n<pre><code>47 69 62 20 6D 69 72 20 27 6E 65 20 4B 75 67 65\n6C 0A 00 1A 73 74 61 6E 64 61 72 64 00 00 00 00\n00 00 00 00 9D 4F DD 32 00 00 00 00 68 27 01 00\n14 00 01 0F 1E 00 1E 00 2C 03 00 00 03 00 00 00\n00 00 00 00 03 00 0A 00 90 08 90 08 90 08 90 08 &lt;1,2---\n8F 08 8F 08 8E 08 6D 08 6C 04 6B 04 03 00 0A 00\n03 00 08 00 90 08 91 08 91 08 91 08 91 08 91 08\n90 08 90 08 8F 08 8E 08 6D 08 6C 04 6A 04 4A 04\n03 00 08 00 03 00 06 00 91 08 91 08 B2 08 B2 08\nB2 08 B2 08 B2 08 B2 08 B2 08 91 08 90 08 8F 08\n8E 08 6D 08 6C 04 6B 04 49 04 48 04 03 00 06 00\n03 00 05 00 90 08 B2 08 B2 08 B3 08 B3 0C B3 0C\n</code></pre>\n<p>Those are the first 192 bytes from the screenshot-sprite.</p>\n<pre><code>42 4D 50 07 00 00 00 00 00 00 46 00 00 00 38 00\n00 00 1E 00 00 00 E2 FF FF FF 01 00 10 00 03 00\n00 00 0A 07 00 00 3B 00 00 00 3B 00 00 00 00 00\n00 00 00 00 00 00 00 7C 00 00 E0 03 00 00 1F 00\n00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 &lt;1---\n00 00 00 00 00 00 00 00 00 00 90 08 90 08 90 08 &lt;2---\n90 08 8F 08 8F 08 8E 08 6D 08 6C 04 6B 04 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 90 08 91 08 91 08 91 08 91 08 91 08 90 08\n90 08 8F 08 8E 08 6D 08 6C 04 6A 04 4A 04 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n</code></pre>\n<p>You can see the point where the data does probably begin (arrow 1), you see a similar hex string <code>90 08 90 08 90 08</code>.</p>\n<p>You also see that the data in the screenshot-sprite probably begins with 10 byte-pairs (arrow 2). In the NORMAL.SET you find <code>0A 00</code>. Now I read about RLE and with some fantasy I could see a link between 10 byte-pairs and <code>0A 00</code> which I could translate into \"ten times a black pixel\".</p>\n<p>I am still confused why I see two blue sprites in the NORMAL.SET, where in the screenshot there is only one blue sphere. But that is something I would care about at a later time.</p>\n<p><strong>NOTE</strong><br/>\nAt this point I am quite sure that I am on the right track! I think RLE decompression is the only thing missing here, besides figuring out where the data starts and what the headers are supposed to mean. Maybe they aren't even of much use to me.</p>\n<p>I am not sure, if I still have a question at the moment. If nobody disagrees, I would keep this here until I figured out the rest in the hopes that someday, to someone this will be helpful. I will update this as soon as I solved the riddle.</p>\n<p>Until the, if you got a a solution for the RLE ready, don't be shy to post ;)</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "308",
    "tags": [
        "digital-forensics",
        "binary-format"
    ],
    "user": "Daniel",
    "time": "Feb 25, 2015 at 16:16",
    "comments": [
        {
            "user": "glampert",
            "text": "<span class=\"comment-copy\">You'll have to give a lot more information before anyone can help you, starting with what file format this is. A screenshot from some kind of editor doesn't really help. What games used it? Where did you find it? File extension? Is it based on a known format (JPG,PNG,TGA)? Which editor(s) did you try? You get the idea...</span>",
            "time": null
        },
        {
            "user": "Daniel",
            "text": "<span class=\"comment-copy\">Okay, I did. :)</span>",
            "time": null
        },
        {
            "user": "glampert",
            "text": "<span class=\"comment-copy\">Now this is a nicely formulated question! Hope someone can help you. ;)</span>",
            "time": null
        },
        {
            "user": "Mints97",
            "text": "<span class=\"comment-copy\">You can try <a href=\"http://www.angusj.com/resourcehacker/\" rel=\"nofollow noreferrer\">Recource Hacker</a></span>",
            "time": null
        },
        {
            "user": "Daniel",
            "text": "<span class=\"comment-copy\">The file extension has nothing to do with the file type in this case.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The quick answer is:</p>\n<p><code>14 00</code> are the first two bytes of a sprite. The raw bitmap data starts at offset 20, in this case with <code>03 00 0A 00</code>. The file is RLE encoded, <code>03 00</code> being the escape sequence and <code>0A 00</code> is telling me that 20 pixels with <code>00 00</code> (16 bpp) follow.</p>\n<p>With this information I was able to reverse engineer the sprite group.</p>\n</div>",
            "votes": "1",
            "user": "Daniel",
            "time": "Feb 5, 2015 at 21:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}