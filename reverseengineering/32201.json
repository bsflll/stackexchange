{
    "title": "How does IDA know the symbol names for classes and interfaces?",
    "link": "https://reverseengineering.stackexchange.com/questions/32201/how-does-ida-know-the-symbol-names-for-classes-and-interfaces",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reversing a 32 bit library used by a Linux game (I am sure someone might recognize the engine used). I was messing around with <a href=\"https://github.com/rizinorg/cutter\" rel=\"nofollow noreferrer\">cutter</a> and when trying to compare it to IDA, which I have used in the past for this library, I noticed that I couldn't search for C++ classes the same way I do with IDA's Ctrl+L.</p>\n<p>IDA's output:</p>\n<p><a href=\"https://i.sstatic.net/jpVqm.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA Output\" src=\"https://i.sstatic.net/jpVqm.png\"/></a></p>\n<p>If I search in Cutter's \"Symbols\" tab:</p>\n<p><a href=\"https://i.sstatic.net/0feoM.png\" rel=\"nofollow noreferrer\"><img alt=\"Cutter symbols\" src=\"https://i.sstatic.net/0feoM.png\"/></a></p>\n<p>There is also a \"VTable\" tab, which also looked interesting since it's basically what I am looking for, but although it shows about 1k VTables, none of them have any kind of name:</p>\n<p><a href=\"https://i.sstatic.net/PeEhm.png\" rel=\"nofollow noreferrer\"><img alt=\"Cutter VTable\" src=\"https://i.sstatic.net/PeEhm.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "233",
    "tags": [
        "ida",
        "c++",
        "symbols",
        "vtables",
        "cutter"
    ],
    "user": "trxgnyp1",
    "time": "Aug 24, 2023 at 8:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The class names come from <a href=\"https://en.wikipedia.org/wiki/Run-time_type_information\" rel=\"nofollow noreferrer\">RTTI</a> descriptors embedded in the binary.</p>\n<p>Consider this simple example of retrieving the class of an object at runtime:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nclass Base {\npublic:\n    virtual void vvfunc() {}\n};\n\nusing namespace std;\nint main() {\n    Base* pb = new Base;\n    // class Base\n    cout &lt;&lt; typeid(*pb).name() &lt;&lt; endl;\n    // .PEAVBase@@\n    cout &lt;&lt; typeid(pb).raw_name() &lt;&lt; endl;   \n    delete pb;\n}\n\n</code></pre>\n<p>The second line of the output is a decorated class name - the symbol names used to name VTables are stored in the exact same format. Note that binaries can be stripped off type information at compile time.</p>\n<p>An example IDA tool for structuring and parsing RTTI is <a href=\"https://github.com/rcx/classinformer-ida7\" rel=\"nofollow noreferrer\">ClassInformer</a> plugin.</p>\n</div>",
            "votes": "0",
            "user": "mimak",
            "time": "Aug 24, 2023 at 11:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "trxgnyp1",
                    "text": "<span class=\"comment-copy\">I have used ClassInformer before, although not for this project, since it only works for windows binaries. While searching around some time ago I saw that since some version ago, IDA has integrated support for RTTI, and I am guessing that's why those names show up in Ctrl+L. I will mark this answer as solved because it contains useful information, but my original issue was that there is a \"Classes\" window in Cutter that displays all these classes.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Turns out that Cutter actually provides RTTI information, but not under the \"Symbols\" window but under another \"Classes\" window that is hidden by default.</p>\n<p>You can open it from <em>Windows &gt; Info &gt; Classes</em>.</p>\n</div>",
            "votes": "0",
            "user": "trxgnyp1",
            "time": "Aug 24, 2023 at 12:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}