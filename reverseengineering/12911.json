{
    "title": "Function dependencies in static libraries",
    "link": "https://reverseengineering.stackexchange.com/questions/12911/function-dependencies-in-static-libraries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I read in <a href=\"https://stackoverflow.com/a/12801856/4480139\">another SO thread</a>:</p>\n<blockquote>\n<p>With static libraries, the unit of copying is the object file in the\n  library.</p>\n</blockquote>\n<p>In other words, if two programs call a function from a certain object file, both programs end up with all of the object file in the executable.</p>\n<p>Yet, the above answer is from 2012 and I was wondering if newer linkers have come up with smarter solutions, that is, solution that only copy those functions into the executable that are actually needed (e.g. because other functions depend on them).</p>\n<ul>\n<li>Are there any general reasons why this is not a good idea or impossible?</li>\n<li>Is there a way I can find out dependencies between functions inside a static library? Does the linker or the linking process provide this information?</li>\n</ul>\n<p>By the term dependency I mean the fact that a certain library function is always copied together with another function into the executable. </p>\n<p><strong>My overall goal is the following:</strong></p>\n<p>I have an unknown binary but I know it contains code from a certain static library. I don't know the version of the library. I also know that this executable uses a certain function from this static library. I would like to know which other functions are also in the executable (no matter if actually used or not).</p>\n<p>Thanks for any answers, remarks or ideas. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "static-analysis",
        "compilers",
        "binary-format",
        "libraries"
    ],
    "user": "langlauf.io",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Codoka",
            "text": "<span class=\"comment-copy\">Have you considered BinDiff'ing to identify similarities? It's now free <a href=\"https://www.zynamics.com/software.html\" rel=\"nofollow noreferrer\">zynamics.com/software.html</a></span>",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "<span class=\"comment-copy\">@0xcode what exactly do you mean ? Diffing what against what? What should be similar? How could it help me achieve my goal?</span>",
            "time": null
        },
        {
            "user": "Codoka",
            "text": "<span class=\"comment-copy\">Basically, given a compiled version of the static library you already know about, you might consider doing binary-level diffing for each individual function, i.e., check whether there are \"similar\" functions to it in your unknown binary.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are actually asking multiple different questions here :</p>\n<blockquote>\n<p><em>[Regarding static linking only a few functions of a library]</em></p>\n<p>Are there any general reasons why this is not a good idea or impossible?</p>\n</blockquote>\n<p>Well it <em>could</em> be possible if it's your code and you know what you are doing (basically making a new library that is a subpart of the first one), but otherwise there's just no simple way to forsee which parts of the object file you are going to use in a general case.</p>\n<blockquote>\n<p>Is there a way I can find out dependencies between functions inside a static library? Does the linker or the linking process provide this information?</p>\n</blockquote>\n<p>That would really depend on your library. It might be possible in some case, but outright impossible in other cases. If your library is simple enough and clean enough, it could be easy though.</p>\n<blockquote>\n<p>I have an unknown binary but I know it contains code from a certain static library. I also know that this executable uses a certain function from this static library. I would like to know which other functions are also in the executable (no matter if actually used or not).</p>\n</blockquote>\n<p>That's a totally different problem! I'm not sure I perfectly understand your question, because if you know which static library is linked, you already know that the whole library is in your binary and basically reachable. You can then propagate this information with the usual tools (FLIRT signatures, Diaphora, Rizzo, etc.).</p>\n<p>If you know the library, but not the exact version, you'd usually have to craft an heuristic in order to compare the lib in your binary with multiple versions of this library. (That might also depend on your guessing the compilation parameters if you only have the source code).</p>\n<p>If you have no clue about the library that's being use, I guess you'd just have to either make a blind guess or to reverse the whole thing.</p>\n</div>",
            "votes": "2",
            "user": "user2823000",
            "time": "Jun 22, 2016 at 17:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Good point, Indeed, I know the library but not the version. And yes, I am thinking about a heuristic how to compare it with multiple versions. My intution was that the answer to my questions would help in coming up with a suitable heuristic</span>",
                    "time": null
                },
                {
                    "user": "langlauf.io",
                    "text": "<span class=\"comment-copy\">Let's assume my library is clean enough. How would you try to get the dependencies?</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Regarding the dependencies of a single function in the library, I'd go for some IDA Python. A really naive first approach would be to include anything that has a xref from your function, and to double-check there is no pointer arithmetic whatsoever.</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Regarding the heuristic, it's really a case-by-case specific problem. If you know the compilation settings, just go with the usual tools stated in my answer. If you only have the source code, I'd try to match either the function prototypes or the error messages as generic pieces of advice, but it's hard to tell if that'll be suited to your library.</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Don't forget to recursively apply your algorithm on any function and ressources it'll find. Well there is no guarantee here, with such a static, you have no way to be sure you either missed computer paths or followed some behind opaque predicates.</span>",
                    "time": null
                }
            ]
        }
    ]
}