{
    "title": "Recognize a decryption algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/22100/recognize-a-decryption-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse a malware that builds its IAT at runtime. Due to my inexperience, I'm having trouble to understand this function that accepts into EAX a dword (maybe some sort of hash) and into EDX the base address of kernel32.dll. Could you point me how can I work it out? I can't use the decompiler right now.</p>\n<p><a href=\"https://i.sstatic.net/0zQI7.png\" rel=\"nofollow noreferrer\"><img alt=\"DecryptionFunction\" src=\"https://i.sstatic.net/0zQI7.png\"/></a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "218",
    "tags": [
        "disassembly",
        "malware",
        "decryption"
    ],
    "user": "Kartone",
    "time": "Sep 11, 2019 at 10:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The function parses the PE header to locate the <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#export-directory-table\" rel=\"nofollow noreferrer\"><code>IMAGE_EXPORT_DIRECTORY</code></a> which has the structure</p>\n<p><a href=\"https://i.sstatic.net/tuhSt.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/tuhSt.png\"/></a></p>\n<p><code>NumberOfNames</code> contains the number of symbols exported by this PE and is located at an offset of <code>0x18</code>.</p>\n<p><code>AddressOfNames</code> is a pointer to an array of null-separated list of exported function names. This is located at offset <code>0x20</code>.</p>\n<p>Using the <code>NumberOfNames</code> value it iterates over the list of exported function names and calculates a hash value for each.</p>\n<p>The algorithm to calculate hash is something like.</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()\n{\n    // The name to hash\n    char name[] = \"GetModuleFileNameA\";\n\n    unsigned int hash = 0;\n    unsigned char ch, cl;\n\n    for (int i=0; i&lt;strlen(name); i++)\n    {\n        ch = ((hash &gt;&gt; 8) &amp; 0xFF) ^ name[i];\n        hash = (hash &amp; 0xffff00ff) | (ch &lt;&lt; 8);\n        hash = _rotl(hash, 8);        \n        cl =  (hash &amp; 0xFF) ^ ((hash &gt;&gt; 8) &amp; 0xFF);\n        hash = (hash &amp; 0xFFFFFF00) | cl;\n    }\n    printf(\"%08X\", hash);\n}\n</code></pre>\n<p>If the calculated hash matches, it returns the corresponding address of the API.</p>\n<p>The above code calculates the hash of <code>GetModuleFileNameA</code> which comes out to <code>416F346F</code>. The code can thus be assumed to be correct.</p>\n<p>Check here: <a href=\"https://rextester.com/NIBW6473\" rel=\"nofollow noreferrer\">https://rextester.com/NIBW6473</a></p>\n</div>",
            "votes": "3",
            "user": "0xec",
            "time": "Sep 11, 2019 at 19:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">This 0x416F346F could be the hash for GetModuleFileNameA. Or this 0x0A7E6B43 could be the hash for VirtualAlloc and this 0x65233F5A could be for Sleep.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@Kartone The code works for the given hashes.</span>",
                    "time": null
                },
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">Great answer! Thanks for your help. Last question, do you know if symbol _IMAGE_EXPORT_DIRECTORY is working into Win7 and over? Actually I'm following your hints but, different from other structures, WinDBG complain there is no symbol associated. Thanks again!</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@Kartone Yes, <code>_IMAGE_EXPORT_DIRECTORY</code> is defined in the PE specification and would work across all Windows OS. Probably you don't have the proper pdb symbols loaded in windbg.</span>",
                    "time": null
                },
                {
                    "user": "Kartone",
                    "text": "<span class=\"comment-copy\">I will dig into the issue, then. Thanks.</span>",
                    "time": null
                }
            ]
        }
    ]
}