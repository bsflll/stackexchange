{
    "title": "Pass Play integrity api when app is repacked with Frida-gadget",
    "link": "https://reverseengineering.stackexchange.com/questions/32573/pass-play-integrity-api-when-app-is-repacked-with-frida-gadget",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have decompiled an app that uses the Play integrity API.</p>\n<p>I attach the <a href=\"https://frida.re/docs/gadget/\" rel=\"nofollow noreferrer\">Frida-gadget</a> and rebuild/resign the apk.\nAfter installing it on an unrooted phone (that passes the Play integrity API), the repacked app does not seems to pass it anymore (makes sense because the 'Genuine app binary' part of PI is broken).\nIn the Frida script I hook the following function to make it return com.android.vending</p>\n<blockquote>\n<p>android.app.ApplicationPackageManager.getInstallerPackageName()</p>\n</blockquote>\n<p>But still integrity fails. Is there any known method to pass integrity?</p>\n<p>I tried the same on a rooted phone with <a href=\"https://github.com/chiteroman/PlayIntegrityFix\" rel=\"nofollow noreferrer\">Play  Integrity Fix module (magisk)</a> installed and have gotten the same result.</p>\n<p>Are there other function which are used to determine app integrity that I can hook?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "646",
    "tags": [
        "android",
        "frida"
    ],
    "user": "user45316",
    "time": "Dec 14, 2023 at 13:14",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">I don't know how Play Integrity API verifies genunity of the app, but it is common security knowledge that that a system (here an app) should never try to verify itself, because if it had been tampered the verification is useless as the app could lie about it's status. So I would expect that Google implemented the check at least in Play Services or even distributed between Play Services and some backend server.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">But you seem to try to modify not a regular app but Play Store app which is usually a system app working very closely e.g.with Play Services via RPC. Not sure if it is possible to do the same if the one app has been modified and uses a different APk signature.</span>",
            "time": null
        },
        {
            "user": "user45316",
            "text": "<span class=\"comment-copy\">@Robert I understand but would guess that in the end there are some data collectors of Play integrity on which the result is based that can be fooled. (In a simalar way that the Play Integrity Fix module fools the services on rooted phones to pass PI. I think that it might perhaps work when I fake the getPackageInfo.signatures result, I will try it when I find some time. The app should normally be installed from the Play Store (if not it gives a warning to do so).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You won't pass it as long as you tampered with the app ( signature is changed/ Signature integrity is broken )</p>\n<p>That's the point of Google's App Integrity. It's a four way communication; between android app, app server, google play services &amp; google servers.</p>\n<p>Unless you reverse engineer the play services, anti-tampering will be difficult to bypass. I'm not even sure if you can bypass it even after reverse engineering google play services.</p>\n<hr/>\n<p>What is the solution ? How can I change the app's code/behavior ?</p>\n<p>Don't tamper with the app statically. Root your phone, and use frida or LSPosed to hook &amp; tamper with the app. That will ensure that signature integrity isn't broken &amp; you have actually modified the app code. Make sure your rooted phone passes Play Integrity.</p>\n<p>If the amount of code you are changing is huge &amp; hooking dynamically will slow the app down, then there are also ways to solve it.</p>\n<hr/>\n<p>How can I see this protection in action ?</p>\n<p>Install \"Play Integrity API checker\" from play store. Open it and click \"Check\", and after the results, click on \"&lt;&gt;\" button to see the response. Take a screenshot or note it down.</p>\n<p>Now, just resign the app &amp; install it. Try it again, it'll pass the tests again. Click on \"&lt;&gt;\" to see response and screenshot/note it down.</p>\n<p>Now, compare both responses. You'll notice that it'll fail some tests. \"UNRECOGNIZED_VERSION\", \"UNEVALUATED\" is what you'll see on some values instead of positive values. That's app integrity.</p>\n<p>Source code of both the app itself &amp; server is available on Github. Try tampering with them (it should be easy now, right ? Since you have the source code now ) and try to pass those failed test. Spoilers: You won't be able to, because Google checks for the app's signature, not app itself.</p>\n<hr/>\n<p>Reference:\n<a href=\"https://support.google.com/googleplay/android-developer/answer/10183279\" rel=\"nofollow noreferrer\">https://support.google.com/googleplay/android-developer/answer/10183279</a></p>\n</div>",
            "votes": "0",
            "user": "Vansh Santoshi",
            "time": "Jul 22, 2024 at 10:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vansh Santoshi",
                    "text": "<span class=\"comment-copy\">App link:- <a href=\"https://play.google.com/store/apps/details?id=gr.nikolasspyr.integritycheck\" rel=\"nofollow noreferrer\">play.google.com/store/apps/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}