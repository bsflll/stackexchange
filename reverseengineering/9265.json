{
    "title": "AT&T XOR argument at radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/9265/att-xor-argument-at-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Recently I faced with strange (in my opinion) behavior of radare2.</p>\n<p>I have been reading the <a href=\"https://dustri.org/b/defeating-crackme03-with-radare2.html\" rel=\"nofollow\">Artificial truth</a> blog post about <a href=\"http://hackingbits.github.io/blog/crackme-03/\" rel=\"nofollow\">Hacking bits</a> with this <a href=\"https://github.com/geyslan/crackmes/blob/master/src/crackme.03.asm\" rel=\"nofollow\">crackme</a>.</p>\n<p>In an article Julien used <strong><em>Intel</em></strong> syntax,\nbut I choose <strong><em>AT&amp;T</em></strong>.</p>\n<p>So I started disassemble crackme:</p>\n<pre><code>$ r2 ./crackme.03.32\n</code></pre>\n<p>Set syntax to intel, block size to 10 bytes and seek to needed address and print disassemble:</p>\n<pre><code>[0x00010020]&gt; e asm.syntax = intel\n[0x00010020]&gt; b 10\n[0x00010020]&gt; s 0x0010112\n[0x00010112]&gt; pd\n</code></pre>\n<p>Output was:</p>\n<pre><code>       0x00010112    80f2ac         xor dl, 0xac\n       0x00010115    eb02           jmp 0x10119\n</code></pre>\n<p>But when I changed syntax to ATT:</p>\n<pre><code>[0x00010112]&gt; e asm.syntax = att\n[0x00010112]&gt; pd\n</code></pre>\n<p>I received that:</p>\n<pre><code>       0x00010112    80f2ac         xorb $-0x54, %dl\n       0x00010115    eb02           jmp 0x10119\n</code></pre>\n<p>In the <a href=\"https://github.com/geyslan/crackmes/blob/master/src/crackme.03.asm#L159\" rel=\"nofollow\">source code</a> of crackme we can find that value of argument is 0xac <em>(xor dl, 0xac)</em>.</p>\n<h2>So, actually, question:</h2>\n<p>Why <strong>80 f2 ac</strong> translate to the same opcodes, but with different arguments for AT&amp;T and Intel syntax.</p>\n<p><strong><em>Why 0xac became -0x54?</em></strong></p>\n<hr/>\n<pre><code>$ r2 -version\nradare2 0.10.0-git 8247 @ linux-little-x86-64 git.0.9.9-148-gd5f2661\ncommit: d5f2661cbe1a32bc26490bd7a1864ef45907aaea build: 2015-06-26\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "disassemblers",
        "crackme"
    ],
    "user": "Alex Bender",
    "time": "Dec 16, 2017 at 16:48",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">It's a matter of notation of a single byte <i>only</i>. The <i>byte</i> value <code>0xAC</code> can be written as <code>-0x54</code>.</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">You should learn about representation of signed and unsigned values; this will make it clear immediately. Interpreting the first bit of <code>0xac</code> as a sign bit, not a value bit, will result in <code>-0x54</code>, as <code>0xac</code>+<code>0x54</code>=<code>0x100</code>.</span>",
            "time": null
        },
        {
            "user": "Alex Bender",
            "text": "<span class=\"comment-copy\">Thanks for explaining! I have thought about signed and unsigned values.</span>",
            "time": null
        },
        {
            "user": "Maijin",
            "text": "<span class=\"comment-copy\">Now here is the current output after changing the syntax with att in radare2.   <code>xorb $0xac, %dl</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It was signed and unsigned question.</p>\n<p>The way to change the signedness is by negating it, which is NOTing all bits of that number and incrementing it by 1</p>\n<pre><code>&gt;&gt;&gt; 256 - (~(-0x54)+1)\n172\n&gt;&gt;&gt; hex(172)\n'0xac'\n&gt;&gt;&gt; \n</code></pre>\n</div>",
            "votes": "1",
            "user": "Alex Bender",
            "time": "Jul 1, 2015 at 11:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}