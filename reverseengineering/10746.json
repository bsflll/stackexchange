{
    "title": "What does mov qword ptr ds:[rax+18], r8 mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/10746/what-does-mov-qword-ptr-dsrax18-r8-mean",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>mov qword ptr ds:[rax+18], r8\n</code></pre>\n<p>In the above code, where are we copying the value of r8 register into?</p>\n<p>I know that <code>ds</code> means data segment which is a segment in memory, but what does exactly <code>[rax+18]</code> mean?</p>\n<p>More specifically, these are the parts I'm having trouble with understanding:</p>\n<ol>\n<li>Is it mandatory that <code>rax</code> should hold an address in such situation?</li>\n<li>what is the role of <code>18</code>?</li>\n<li>How can I trace the <code>[rax+18]</code>?</li>\n</ol>\n<p>I know it is newbie's question but I am one.</p>\n</div>",
    "votes": "30",
    "answers": 1,
    "views": "59k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "x86-64"
    ],
    "user": "FreeMind",
    "time": "Dec 2, 2017 at 8:45",
    "comments": [
        {
            "user": "tmr232",
            "text": "<span class=\"comment-copy\">As this is your second \"what does this code do\" question in a short time I am wondering, what have you tried to do to understand the code? <a href=\"https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\" rel=\"nofollow noreferrer\">Intel's Architecture Manuals</a> are quite helpful (though a bit overwhelming at first), and I suggest having a look there before asking here. The second volume include the <a href=\"https://www-ssl.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\" rel=\"nofollow noreferrer\">instruction set reference</a>.</span>",
            "time": null
        },
        {
            "user": "FreeMind",
            "text": "<span class=\"comment-copy\">@tmr232 If you notice this question is asking a different concept from the former one. Indeed, I have got a copy of intel's Architecture manual but it does not exactly answer my question. It even explains the instructions in the strict way. If you check out my former question answer it just explains <code>qword</code>, <code>ds</code>, <code>mov</code> which I already know but I have difficulty with the exact questions asked above.</span>",
            "time": null
        },
        {
            "user": "rev",
            "text": "<span class=\"comment-copy\">This is basically <code>mov [rax + 18], r8</code>, which: 1) takes the value that <code>rax</code> holds, 2) adds 18 to it, 3) writes the value of <code>r8</code> to that address.</span>",
            "time": null
        },
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">@FreeMind <code>rax</code> may point to a structure. In that case <code>[rax+18]</code> is the address of a member of the structure. A compiler cannot address directly because it's address is not known at compile time.</span>",
            "time": null
        },
        {
            "user": "user1156544",
            "text": "<span class=\"comment-copy\">@FreeMind accept the solution if you think it is valid (as I do)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lets go over the instruction piece by piece:</p>\n<h2>mov</h2>\n<p><strong><code>mov</code></strong><code>qword ptr ds:[rax+18],r8</code></p>\n<p>This is the <a href=\"https://en.wikipedia.org/wiki/Opcode\" rel=\"noreferrer\">opcode</a> part of the instruction. It describes the base operation the CPU is required to perform. <code>mov</code> is an opcode instructing a CPU to copy data from the second <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"noreferrer\">operand</a> to the first operand. The first operand on the <code>mov</code> instruction is a target operand, and the second is the source.</p>\n<h2>qword ptr</h2>\n<p><code>mov</code><strong><code>qword ptr</code></strong><code>ds:[rax+18],r8</code></p>\n<p>This second <a href=\"https://en.wikipedia.org/wiki/Operand\" rel=\"noreferrer\">operand</a> is the most complex part of this instruction, so I've split it to several pieces and I'll go over each individually.</p>\n<p>This part is the first part of the first operand. Operands are objects such as addresses or registers on which operations are performed. <code>qword</code> indicates this operand describes an address of quad-word size, in Intel's x86 family of processors this means 8 bytes (a word is 2 bytes long). <code>ptr</code> indicates the value of the operand should be treated as an address.</p>\n<p>In our case, this means assigning the value in the second operand to the 8 bytes starting at the address pointed to by the remaining of the first operand (<code>ds:[rax+18]</code>).</p>\n<h2>ds:</h2>\n<p><code>mov qword ptr</code><strong><code>ds:</code></strong><code>[rax+18],r8</code></p>\n<p>The colon is optional, and if present it follows the segment register to use when accessing data addresses. This is called <a href=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\" rel=\"noreferrer\">memory segmentation</a>. Segment registers were first created to allow accessing memory addresses wider than the size of registers in 16bit processors and became redundant in 32 and 64-bit processors outside of real-mode, which is the mode most CPUs start at before they're switched to protected-mode (32bit) or long-mode (64bit).</p>\n<p>Except for specific-meaning special segment registers (such as <code>fs</code> in 32bit windows, and <code>gs</code> in Linux and 64-bit windows), this can be widely ignored if not operating in 16bit modes.</p>\n<h2>[rax+18]</h2>\n<p><code>mov qword ptr ds:</code><strong><code>[rax+18]</code></strong><code>,r8</code></p>\n<p>The brackets are coupled with the previously discussed <code>ptr</code> keyword and are used to highlight the address is being dereferenced before the operation is performed. All values inside the brackets should be added together to calculate the target address.</p>\n<p>In our case, this means <code>rax</code> + 18. This means <code>rax</code> probably points to a structure, a class, an array or some other complex memory object, and we're accessing the member at offset 18 of that memory structure. As there isn't any prefix or postfix indicating the number's base, I'll assume it's in hex.</p>\n<p>This means <code>rax</code> could be an array of qwords, and this instruction is accessing the forth (index 3) element of that array (since 18h=24=8*3).</p>\n<p><code>rax</code> could be a structure of four qwords, such as a three-dimensional point in time defined as the following:</p>\n<pre><code>struct _point\n{\n    long x;\n    long y;\n    long z;\n    long t;\n};\n</code></pre>\n<p>probably accessing the <code>t</code> member.</p>\n<p>It is important to note that for certain optimization reasons (into which I won't dive here), <code>rax</code> is not necessarily pointing the beginning of a structure, and could be already pointing to an offset within the structure, adding 18 to that offset instead.</p>\n<h2>, (comma)</h2>\n<p><code>mov qword ptr ds:[rax+18]</code><strong><code>,</code></strong><code>r8</code></p>\n<p>Commas are simply operand separators, indicating the first operand has ended and the second is about to begin.</p>\n<h2>r8</h2>\n<p><code>mov qword ptr ds:[rax+18],</code><strong><code>r8</code></strong></p>\n<p>Compared to the first operand, the second one is a piece of cake. This simply means the value currently in register <code>r8</code> is the source value, and what will be assigned to the address <code>rax+18</code>.</p>\n</div>",
            "votes": "53",
            "user": "NirIzr",
            "time": "Dec 19, 2019 at 11:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Andrey Portnoy",
                    "text": "<span class=\"comment-copy\">If <code>rax</code> is pointing at the beginning of an array of 8 byte sized elements, wouldn't <code>rax + 0x18</code> point at the fourth, not the third element? <code>rax</code> is pointing at the first element, so offsetting by 3 gives 4.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@AndreyPortnoy Looks like you're right. Thanks for catching my mistake! I edited my answer</span>",
                    "time": null
                },
                {
                    "user": "gonidelis",
                    "text": "<span class=\"comment-copy\">This answer makes the world a better place to live, in some sense...</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@gonidelis haha! &lt;3</span>",
                    "time": null
                }
            ]
        }
    ]
}