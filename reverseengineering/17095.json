{
    "title": "Example of key fishing with OllyDbg logging? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17095/example-of-key-fishing-with-ollydbg-logging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/17095/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2018-01-24 01:19:01Z\">7 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/17095/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm new to reverse engineering. Can you give an example of a crackme to do \"non-hardcoded\" key fishing and how to log the x86 registers to spot the generated key? </p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "286",
    "tags": [
        "ollydbg",
        "x86",
        "crackme",
        "register"
    ],
    "user": "Tigre",
    "time": "7 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">Nearly any crackme is what you'd call \"non-hardcoded\" one.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It doesn't work like that, unfortunately. I'm going to be drastically oversimplifying the topic, but the 10,000-foot view is that you have two ways to reverse engineer:</p>\n<p><strong>Static Analysis</strong>: Studying a binary without running it. Programs like <strong><a href=\"https://www.hex-rays.com/products/ida/\" rel=\"nofollow noreferrer\">IDA</a></strong> can be used to disassemble a binary to automagically lay bare what it can of the binary's workings. This does A LOT for you if you know what you're looking at. Otherwise, prepare to be 100% overwhelmed. There's an amazing introduction to IDA on YouTube that you can watch <strong><a href=\"https://www.youtube.com/watch?v=cGDcTSCB7y4\" rel=\"nofollow noreferrer\">here</a></strong>. </p>\n<p><strong>Dynamic Analysis</strong>: Studying the behavior of a binary while it's executing. This is when you use debuggers like <strong><a href=\"http://www.ollydbg.de/\" rel=\"nofollow noreferrer\">OllyDbg</a></strong>, <strong><a href=\"https://x64dbg.com/#start\" rel=\"nofollow noreferrer\">x64dbg</a></strong>, <strong><a href=\"https://developer.microsoft.com/en-us/windows/hardware/download-windbg\" rel=\"nofollow noreferrer\">WinDbg</a></strong>, <strong><a href=\"https://github.com/cheat-engine/cheat-engine\" rel=\"nofollow noreferrer\">Cheat Engine</a></strong>, etc.</p>\n<p>There are really complex things you can do via other applications/plugins/libraries/frameworks, but you tend to discover those during threads of research. There's likely a plugin or something out there for Olly that will profusely log events/tracing, but the reason what you're interested in won't really work is the amount of data you'd be logging would be insane. You'd still have to search through it all to make sense of everything. Consider there are registers, memory, on-disk, and off-site (which gets you into network protocol land).</p>\n<p>For what you're interested in, there's a really, really good video tutorial that uses OllyDbg and IDA to reverse a crackme (<a href=\"https://www.youtube.com/watch?v=DEDYk8zN53A\" rel=\"nofollow noreferrer\">video here</a>). For a different approach for the same crackme via dynamic analysis, (<a href=\"https://www.youtube.com/watch?v=Emiuht3YSXA\" rel=\"nofollow noreferrer\">here is a video</a>) where I use Cheat Engine, which is an unorthodox tool for the job but that I think a beginner such as yourself would learn a lot from (there's memory scanning, patching, writing custom Assembly and creating a script, etc.). Full disclosure: the tutorial using Cheat Engine is from me.</p>\n<p>You have a lot of learning ahead of you, but try to enjoy the ride!</p>\n</div>",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jan 2, 2018 at 15:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tigre",
                    "text": "<span class=\"comment-copy\">Thanks for your answer! Yes, I was talking about dynamic analysis. Do you think that a logging script like this: <a href=\"https://github.com/deresz/funcap\" rel=\"nofollow noreferrer\">github.com/deresz/funcap</a> , which is for IDA Pro, can track the x86 registers values for a non-hardcoded generated key? What I'm trying to understand is \"unique key generation\" vs \"generation of lots of compatible keys\". And if a unique generated key can be tracked among the x86 registers values.</span>",
                    "time": null
                },
                {
                    "user": "dsasmblr",
                    "text": "<span class=\"comment-copy\">The best answer I can give you is \"maybe.\" Your hands are now dirty enough that you can dive in and see what you come up with. There's just a lot of nitty-gritty details on an individual binary basis where no generic answer can apply. If you're trying to reverse the algorithm used for a dynamically-generated key, then there's no telling what kind of algorithm you're dealing with. By all means, find an automated solution and churn your binary through it, but with what you're asking for, there's not a one-size-fits-all solution. Also, again, registers aren't the only thing to keep track of.</span>",
                    "time": null
                },
                {
                    "user": "Tigre",
                    "text": "<span class=\"comment-copy\">I'm a total newbie. I just want to find a crackme to see an example of x86-register-value logging when the key is unique and generated, not hardcoded.</span>",
                    "time": null
                },
                {
                    "user": "dsasmblr",
                    "text": "<span class=\"comment-copy\">Try inquiring on the Tuts4You forum. Someone there may be able to satisfy exactly what it is you're looking to achieve: <a href=\"https://forum.tuts4you.com/\" rel=\"nofollow noreferrer\">forum.tuts4you.com</a></span>",
                    "time": null
                }
            ]
        }
    ]
}