{
    "title": "C++ Unary equals (unary operator=)",
    "link": "https://reverseengineering.stackexchange.com/questions/25367/c-unary-equals-unary-operator",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In C++ binaries, I find Qt methods like <code>??4QString@@QEAAAEAV0@AEBV0@@Z</code> which demangle to</p>\n<pre><code>public: class QString &amp; __ptr64 __cdecl QString::operator=(class QString const &amp; __ptr64) __ptr64\n</code></pre>\n<p>or in shorter form, <code>QString&amp; QString::operator=(QString const&amp;)</code>. The return value does not appear to be used. What is the purpose of this \"unary equals\", given that it does not seem to be a construct people write in the original code?</p>\n<p><strong>Edit</strong></p>\n<p>I found the source of my confusion. I'm perfectly award of the calling convention with <code>this</code>, and what <code>operator=</code> is supposed to do. It's common, in my experience, for people to indicate <code>this</code> as a direct argument when reversing software. This is, for instance, what IDA does. It was what I was intending to do as well. So, it <em>would</em> have been considered unary, as I wrote it only take on argument (<code>this</code>).</p>\n<p>It turns out that IDA somehow incorrectly assigned the type, and gave it the signature <code>__int64 __fastcall QString__operator_(_QWORD)</code> instead of <code>QString* __fastcall QString__operator_(QString *, QString const *)</code>. I don't know what caused this. The output from [demangler.com], which I put in the first half of my post, did not include the implicit <code>this</code>, contrary to my expectations.</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "612",
    "tags": [
        "binary-analysis",
        "c++",
        "qt"
    ],
    "user": "Alex Meiburg",
    "time": "Jun 22, 2020 at 17:38",
    "comments": [
        {
            "user": "MSalters",
            "text": "<span class=\"comment-copy\">The return type seems to be a reference, not a pointer. C++ allows you to choose any return type for <code>operator=</code>, including <code>void</code>. But the default behavior is to return <code>*this</code> as a reference.</span>",
            "time": null
        },
        {
            "user": "HolyBlackCat",
            "text": "<span class=\"comment-copy\">It's not unary. The single parameter you see is the second operand, and the first operand is <code>this</code> (it's a class member function, not a free function).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is rather <code>C++</code> question, but nonetheless:</p>\n<p>what you see is an assignment operator for the class <code>QString</code>. It enables you to write things like <code>a = b</code>, where <code>a, b</code> are of <code>QString</code> type.</p>\n<p>The reason why it returns value is to enable you to write: <code>a = b = c</code> instead of <code>a = c</code> and <code>b = c</code> and you may see this pattern in case of other operators overloading (see <a href=\"https://stackoverflow.com/questions/4421706/what-are-the-basic-rules-and-idioms-for-operator-overloading\">question</a> for instance).</p>\n<p><code>C++</code> standard demands the compiler to generate the <code>=</code> operator if it wasn't written by a programmer, so you can expect it to be present even if not used directly.</p>\n</div>",
            "votes": "6",
            "user": "bart1e",
            "time": "Jun 22, 2020 at 7:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The default assignment operator for primitives returns a value, and the standard convention for operator overloading is to not deviate from the behavior of the operator you are overloading. This is why it's good practice to continue to return the assigned reference from the assignment overload operator.</p>\n<p>Because of this behavior, there's a well-used idiom in C (and to C++ by extension) regarding checking the return value of a function upon assignment.</p>\n<p>For example, consider an invocation of realloc:</p>\n<pre><code>// int *ptr;\n// size_t size;\n\nsize *= 2;\nint *nptr = realloc(ptr, size);\nif (nptr)\n    ptr = nptr;\nelse\n    return ERROR;\n</code></pre>\n<p>We can simplify the code by moving assignment expressions inside the if condition. Here, we take advantage of two assignment expressions, <code>size *= 2</code>, which returns the value of the variable after doubling, and the assignment to <code>nptr</code>, which will be <code>NULL</code> (<code>0</code>) on failure.</p>\n<pre><code>// int *ptr;\n// size_t size;\n\nint *nptr;\nif (nptr = realloc(ptr, size *= 2))\n    ptr = nptr;\nelse\n    return ERROR;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Tyzoid",
            "time": "Jun 22, 2020 at 14:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}