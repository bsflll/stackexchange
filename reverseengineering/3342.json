{
    "title": "Run command on breakpoint without stopping",
    "link": "https://reverseengineering.stackexchange.com/questions/3342/run-command-on-breakpoint-without-stopping",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to automate the following in my <code>.gdbinit</code>:</p>\n<pre><code>break boost::uuids::detail::sha1::process_bytes\n\n# When execution stops at the above breakpoint,\n# I want to display the contents of `rcx` as a string:\nx/s $rcx\nc  # do not stop here\n</code></pre>\n<p>How do I automate this?</p>\n<h3>UPDATE: Here's a better <code>.gdbinit</code> example:</h3>\n<pre><code># Our custom-built libcurl, with debugging symbols enabled:\nset environment LD_PRELOAD=./curl/curl-7.34.0/lib/.libs/libcurl.so\n\n# File that connects to the evil server:\nfile ./evil\n\n# Make sure we get notified when it connects!\nbreak curl_easy_setopt\ncommands $bpnum\nclear curl_easy_setopt  # to avoid recursion\ncall curl_easy_setopt(curl, CURLOPT_VERBOSE)\ncontinue\nend\n</code></pre>\n<p>This hooks in to the evil binary, and when it initialises its curl handle, we set set it to verbose so we get lots of output about what's going on.</p>\n<p>Thanks for the answer.</p>\n</div>",
    "votes": "10",
    "answers": 1,
    "views": "4k",
    "tags": [
        "gdb"
    ],
    "user": "Attila O.",
    "time": "Jan 3, 2014 at 6:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Easy enough. In your case what you most likely want is <a href=\"http://www.sourceware.org/gdb/onlinedocs/gdb.html#Break-Commands\" rel=\"noreferrer\"><code>commands</code></a> which can be used to create \"routines\" that run whenever a breakpoint is hit. For your case roughly:</p>\n<pre><code>break boost::uuids::detail::sha1::process_bytes\ncommands 1\nx/s $rcx\ncontinue\nend\n</code></pre>\n<p>Problem is that you need to hardcode the breakpoint number. Depending on the GDB version you may get around this using the <code>$bpnum</code> convenience variable. So:</p>\n<pre><code>break boost::uuids::detail::sha1::process_bytes\ncommands $bpnum\nx/s $rcx\ncontinue\nend\n</code></pre>\n<p>Also see <a href=\"https://stackoverflow.com/a/11019683/476371\">this</a> concerning the last example.</p>\n<p><strong>Note:</strong> using this method can be quite taxing on the CPU depending on how often this gets called and whether a hardware breakpoint could be used by GDB.</p>\n<hr/>\n<p>You can also use the conditional form of breakpoints. Check out the actual authoritative reference <a href=\"http://www.sourceware.org/gdb/onlinedocs/gdb.html#Set-Breaks\" rel=\"noreferrer\">here</a>. The form looks like this:</p>\n<pre><code>break ... if cond\n</code></pre>\n<p>You can also set the condition independent of setting the breakpoint, if you know the breakpoint number. Use <code>info break</code> to get the number of the breakpoint and then use that as <code>bnum</code> in:</p>\n<pre><code>condition bnum expression\n</code></pre>\n</div>",
            "votes": "10",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}