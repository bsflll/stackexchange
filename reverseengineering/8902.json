{
    "title": "identify packer compression or encryption algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/8902/identify-packer-compression-or-encryption-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I do have an executable <strong>packed</strong> file.</p>\n<p>I want to detect <em>compression</em> or <em>encryption</em> algorithm dynamic and static ways separatly; of course without signature base way.</p>\n<p>How can I detect compression or encryption algorithm used for packing exe file dynamically and statically ways ? (dynamic detect ways and static detect ways without signature base ways of course separately). I do not want any tools. I want ways for paper.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "980",
    "tags": [
        "static-analysis",
        "dynamic-analysis",
        "executable",
        "encryption",
        "packers"
    ],
    "user": "Alireza Jafari Fard",
    "time": "Jul 16, 2015 at 10:45",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've tried some <a href=\"http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\" rel=\"nofollow\">heuristic</a> <a href=\"http://www.devttys0.com/2013/06/encryption-vs-compression-part-2/\" rel=\"nofollow\">methods</a> of detecting specific compression/encryption streams based on data entropy; the bottom line is that they \"kinda\" worked, but in practice there was nothing conclusive. For example, it's easy to differentiate deflate compression streams from LZMA compression streams this way, but very hard to tell the difference between LZMA and AES.</p>\n<p>The best way I've found for identifying raw compression streams is a brute-force approach (e.g., try decompressing it as deflate, then try LZMA, etc). It does work, but is slow, especially for LZMA streams where there are multiple compression options to test for each offset in the file/data.</p>\n</div>",
            "votes": "1",
            "user": "devttys0",
            "time": "May 16, 2015 at 12:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can get a some part of compressed data, and compress it again. If ratio is high, these data was compressed/encrypted.</p>\n</div>",
            "votes": "0",
            "user": "Artem_N",
            "time": "May 16, 2015 at 7:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alireza Jafari Fard",
                    "text": "<span class=\"comment-copy\">Thank you. But I want detect kind of algorithm.for example the used algorithm is NRV2B or lzma1. of course with out search a string as a signature in file</span>",
                    "time": null
                },
                {
                    "user": "Artem_N",
                    "text": "<span class=\"comment-copy\">It's impossible, in my opinion.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">@AlirezaJafariFard instead of error-prone signature search, you could check the file's header and / or try to identify the algorithm by some of its properties (which is error-prone and spoof-able too, but that's surely better than a plain signature search)</span>",
                    "time": null
                }
            ]
        }
    ]
}