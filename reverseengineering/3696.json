{
    "title": "Reversing simple hello world in C++ [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3696/reversing-simple-hello-world-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/3696/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-02-20 18:14:32Z\">11 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/3696/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>Can someone explain me why a simple C++ application - </p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n    std::cout &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre>\n<p>compiled with MSVC 2012 looks very weird in IDA / Olly? Why I see hundreds of lines of ASM code instead of the few I expected? Can someone explain to me where all that code comes from? Thanks.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "assembly",
        "c++"
    ],
    "user": "user1505497",
    "time": "11 years ago",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">1. standard entry/exit code, 2. libraries, 3. 1 line of C++ is only very rarely translated to 1 line of assembly. How \"few\" did you actually expect?</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">If you don't make any C++ library function calls (for example, if you only use Windows API functions) then you can configure the MSVC 2012 linker to use main() as the entry point. This will remove all extraneous ASM code from the linked executable.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One piece of code you use is #include  this includes:\n<a href=\"http://www.opensource.apple.com/source/gcc/gcc-937.2/libio/iostream.h\" rel=\"nofollow\">http://www.opensource.apple.com/source/gcc/gcc-937.2/libio/iostream.h</a></p>\n<p>You might spot the Class. This generates a lot of code, also you need to think about libs, default compiler generated code etc etc.</p>\n<p>If you assemble a basic application with NASM you will also spot more Assembly than you wrote.</p>\n</div>",
            "votes": "5",
            "user": "Stolas",
            "time": "Feb 17, 2014 at 10:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several reasons for that:</p>\n<ul>\n<li>Compiler itself - you will get slightly different code while using different compilers due to optimizations compiler implements, its default options.</li>\n<li>to actually run your code, compiler will insert bootstrap code for, processing possible command line commands, security protections that are common today, language specifics support:\n<ul>\n<li>buffer overflow - stack cookies</li>\n<li>UAC protections</li>\n<li>RTTI - real time type information, C++ thing</li>\n<li>and there are others too.</li>\n</ul></li>\n<li>Another thing, is compiler optimizations which in most cases will make the code you wrote, look completely different. In some cases, compiler can event remove you code at all - you will get an \"empty\" executable :-)</li>\n</ul>\n<p>I hope that you understand, that to add all the above, compiler needs to add some code and this is even before <code>your code</code> is there. Of course, you can disable all of the above by playing with the parameters.</p>\n<p><a href=\"http://www.catch22.net/tuts/reducing-executable-size\" rel=\"nofollow\">Reducing Executable Size</a> is a pretty good list of useful info which can help you to understand what is going on under the hood.</p>\n<p>My suggestion is to write the following code</p>\n<pre><code>int main()\n{\n   return 0;\n}\n</code></pre>\n<p>remove all optimizations and start your study from there by adding/removing compiler options one in a time.</p>\n<p>Have Fun!</p>\n</div>",
            "votes": "4",
            "user": "PhoeniX",
            "time": "Feb 20, 2014 at 9:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}