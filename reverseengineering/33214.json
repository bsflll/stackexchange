{
    "title": "reverse engineering 2.4g mouse",
    "link": "https://reverseengineering.stackexchange.com/questions/33214/reverse-engineering-2-4g-mouse",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this mouse <a href=\"https://www.hp.com/gb-en/shop/product.aspx?id=6vy95aa&amp;opt=abb&amp;sel=acc\" rel=\"nofollow noreferrer\">https://www.hp.com/gb-en/shop/product.aspx?id=6vy95aa&amp;opt=abb&amp;sel=acc</a></p>\n<p>I wonder if it is possible to reverse engineer firmware and add functionality in mouse? if yes what is the starting point(book/article etc) to do this? Its closed source but just wondering</p>\n<p>what is the starting point for learning hardware reverse engineering?</p>\n<p>e.g. Putting mouse to deep sleep when not in use, I guess it eats up battery even if not using</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "55",
    "tags": [
        "hardware",
        "firmware-analysis"
    ],
    "user": "Nitin S",
    "time": "Sep 11, 2024 at 10:53",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">The first thing would be to open it up and look at the PCB. Try to find anything written and see if you can spot soldered on chips with markings that help to identify them. If you happen to spot a flash chip, look up its specs and see if you can dump it and make sense of it with binwalk, for example. This question is really very open-ended, despite being about a specific device.</span>",
            "time": null
        }
    ],
    "answers_data": []
}