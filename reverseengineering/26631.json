{
    "title": "Call libc functions from the payload statically injected into ELF binary",
    "link": "https://reverseengineering.stackexchange.com/questions/26631/call-libc-functions-from-the-payload-statically-injected-into-elf-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on ELF-injector, which given some payload (currently it's an assembly file with .text section only) will inject it into ELF binary. I had related <a href=\"https://reverseengineering.stackexchange.com/questions/26386/elf-binary-injection\">post</a> here.</p>\n<p>Now I would like to make it more usable and allow the payload call library functions linked by the victim (at least libc functions).</p>\n<p><em>Note:</em> I am changing first instructions of the entry point to execute my code first. Does it mean I cannot yet use dynamically linked functions?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "314",
    "tags": [
        "linux",
        "c",
        "elf",
        "dll-injection",
        "injection"
    ],
    "user": "Nazar Pasternak",
    "time": "Dec 27, 2020 at 10:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For any external functions used (e.g. libc functions), there will exist a stub in the binary's PLT for said function. When the program calls the function, it jumps to the PLT stub, which correctly handles finding the address of the function the first time it is called.</p>\n<p>For your purposes, you can read the PLT addresses or offsets from the binary, and use that for calling the library function. You could even use offsets to calculate addresses of and call functions that are not imported into the PLT.</p>\n<p>Even if you are injecting at the entry point of the program before any boilerplate initialization code, the program is still only run after the runtime dynamic linker/interpreter (ld.so) has set up the dynamically linked libraries, so I think you should be fine.</p>\n</div>",
            "votes": "1",
            "user": "multithr3at3d",
            "time": "Dec 27, 2020 at 23:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}