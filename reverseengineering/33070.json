{
    "title": "extract third party libraries names and versions used in BIN files",
    "link": "https://reverseengineering.stackexchange.com/questions/33070/extract-third-party-libraries-names-and-versions-used-in-bin-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i am having an issue trying to extract third party libraries from bin files and lost on how to go on this.\na bit about my background: i am junior software engineer that have no knowledge about reverse engineering and machine learning but to get third part libraries from bin files and i have no idea how to solve this.</p>\n<p>update:</p>\n<p>what input i use is a binary file that is firmware bin file.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "97",
    "tags": [
        "binary-analysis"
    ],
    "user": "RET URN",
    "time": "Jul 16, 2024 at 20:41",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Is the execution environment Linux, Windows, something else? It would be helpful to know what format the binaries conform to (ELF, PE, MACH-O, etc.)</span>",
            "time": null
        },
        {
            "user": "RET URN",
            "text": "<span class=\"comment-copy\">linux  but the users will put there hardware firmware bin files for us to extract the libs used in it</span>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">“my tech lead shoved this project on me” - go back and ask for help. You’re a junior, you’re expected to need help on new tasks.</span>",
            "time": null
        },
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">I’m still not sure what you’re trying to do though. You have hardware firmware - is it a single static binary? In which case you can’t realistically extract much from it: feed it into IDA or Ghidra and hope they identify known functions. You’re not going to get anything useful out of this though. Or a file system? Mount it and search for likely files. But 100% ask your lead for help.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Unless you are lucky and the libraries contain a string containing their name and version library identification isn't an easy topic. If the firmware is developed by a subcontractor the better approach would be to request an Software Bill of Materials (SBOM) file containing all the information you want.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming the binaries are dynamically linked, one possible starting point is, for a given executable binary, identifying the shared object (i.e. library) files it imports code from by looking at the strings in its <code>.dynstr</code> section.</p>\n<blockquote>\n<pre><code>  .dynstr\n         This section holds strings needed for dynamic linking,\n         most commonly the strings that represent the names\n         associated with symbol table entries.  This section is of\n         type SHT_STRTAB.  The attribute type used is SHF_ALLOC.\n</code></pre>\n</blockquote>\n<p>We can use <code>readelf</code> to extract this info:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ readelf -p .dynstr binaries/register.cgi | grep \"\\.so\"\n  [    1b]  libm.so.0\n  [    9e]  libsal.so.0\n  [    f4]  libfds.so.0\n  [   100]  libcfg.so.0\n  [   10c]  libcfgtbl.so.0\n  [   11b]  libcmd.so.0\n  [   127]  libclicmd.so.0\n  [   136]  libglue.so.0\n  [   143]  libvty.so.0\n  [   14f]  libcrypt.so.0\n  [   15d]  libcJSON.so.0\n  [   16b]  libcgiutil.so.0\n  [   17b]  libtacplus.so\n  [   189]  libradius.so.0\n  [   198]  libssl.so.1.1\n  [   1a6]  libcrypto.so.1.1\n  [   1b7]  libcustom.so.0\n  [   1c6]  ld-uClibc.so.0\n  [   1d5]  libubacktrace.so.0\n</code></pre>\n<p>With this info in hand, you could then attempt to further identify the origin of each of the shared object files in the list.</p>\n</div>",
            "votes": "0",
            "user": "julian",
            "time": "Jul 11, 2024 at 19:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RET URN",
                    "text": "<span class=\"comment-copy\">that works if you are on linux and have the available liberaries for it and dynamic linking is really a luxury when all you have is a bin file like .so .bin .exe something like that with no directions</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@RETURN This method simply extracts info already present in a dynamically-linked ELF executable. It does not depend on the libraries themselves being present on the same filesystem, or on linking/loading the libraries. All you need is the binary file, as can be seen in the example command. You stated in a comment above that you're working in a Linux environment. Are you actually talking about firmware binary extraction, like with <code>unblob</code> or <code>binwalk</code>?</span>",
                    "time": null
                },
                {
                    "user": "RET URN",
                    "text": "<span class=\"comment-copy\">what input i use is a binary file that is firmware  , sadly your method won't work on firmware as the firmware doesn't have dynamic linking maybe we need to extract libraries used in firmware then parse it as json with versions.</span>",
                    "time": null
                },
                {
                    "user": "RET URN",
                    "text": "<span class=\"comment-copy\">that's the error : readelf: Error: Not an ELF file - it has the wrong magic bytes at the start my file type : file 1_88.bin 1_88.bin: PE32+ executable (console) x86-64, for MS Windows</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@RETURN Yes, you must first unpack the firmware binaries. If you're working with PE binaries obviously you need to use tools designed to work with that format and not ELF. Please update your question to clearly explain what you're doing.</span>",
                    "time": null
                }
            ]
        }
    ]
}