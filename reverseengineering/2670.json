{
    "title": "ea_t datatype in IDA API",
    "link": "https://reverseengineering.stackexchange.com/questions/2670/ea-t-datatype-in-ida-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In IDAPython, what is the <code>ea_t</code> data type? It is used in the <code>set_debug_name()</code> function as follows:</p>\n<pre><code>bool set_debug_name(ea, name)\n</code></pre>\n<p>If I have a 64-bits address, can it be represented by the <code>ea_t</code> data type ?</p>\n<p>For example, in this Python script:</p>\n<pre><code>line = \"ffffffff81000000 T startup_64\"\naddr = int(line[:16],16)\nname = line[19:]\nidaapi.set_debug_name(addr,name)\n</code></pre>\n<p>I receive this error while executing the IDA Python script:</p>\n<pre><code>TypeError: Expected an ea_t type\n</code></pre>\n<p>from IDA Pro:</p>\n<pre><code>Python&gt; from idaapi import *\nPython&gt; line=\"ffffffff81000000 T startup_64\"\nPython&gt; addr=int(line[:16],16)\nPython&gt; name=line[19:]\nPython&gt; print \"addr: %x\" %(addr)\naddr: ffffffff81000000\nPython&gt; print name\nstartup_64\nPython&gt; set_debug_name(addr,name)\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"X\\IDA Pro\\IDA61\\python\\idaapi.py\", line 23612, in set_debug_name\n    return _idaapi.set_debug_name(*args)\nTypeError: Expected an ea_t type\n</code></pre>\n<p>Are the <code>idaapi.py</code> files different for 32-bits and 64-bits IDA Pro versions?</p>\n<p>I am using a 32-bits version of IDAPro.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "ida-plugin"
    ],
    "user": "Neon Flash",
    "time": "Aug 22, 2013 at 12:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From pro.h:</p>\n<pre><code>#ifdef __EA64__\n  typedef uint64 ea_t;      // effective address\n</code></pre>\n<p>Yes also in python it can represent a 64-bit address</p>\n<p>32-bit and 64-bit files are the same (they're is only 1 file)</p>\n<p>The following very basic script works fine for me on notepad.exe using 64-bit IDA;</p>\n<pre><code>Python&gt;from idaapi import *\nPython&gt;ea = 0x0000000100003590L\nPython&gt;hex(get_byte(ea))\n0x48\n</code></pre>\n<p>-edit-</p>\n<p>Updated to show your script working in 32-bit IDA:</p>\n<pre><code>Python&gt;print sys.version\n2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)]\nPython&gt;line=\"ffffffff81000000 T startup_64\"\nPython&gt;addr=int(line[:16],16)\nPython&gt;type(addr)\n&lt;type 'long'&gt;\nPython&gt;set_debug_name(addr,\"bla\")\nTrue\nPython&gt;name=line[19:]\nPython&gt;set_debug_name(addr,name)\nTrue\n</code></pre>\n<p>Did you try updating your idapython with a 'newer' version from Google code? <a href=\"http://code.google.com/p/idapython/\" rel=\"nofollow\">http://code.google.com/p/idapython/</a></p>\n</div>",
            "votes": "3",
            "user": "ixje",
            "time": "Aug 22, 2013 at 14:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Neon Flash",
                    "text": "<span class=\"comment-copy\">Thanks. I have updated my question with the Python script and the error message that I receive. addr stores a 64 bit address.</span>",
                    "time": null
                },
                {
                    "user": "Neon Flash",
                    "text": "<span class=\"comment-copy\">Please note that I am using 32 bit version of IDA, will it still work?</span>",
                    "time": null
                },
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">See my updated answer. For me your script also works in a 32-bit IDA instance</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another way to force an integer to fit into an <code>ea_t</code> is to use the <code>ea_pointer</code> proxy class that was added in 6.8 (iirc). Similarly, you can do the same for things that are <code>adiff_t</code> or <code>sval_t</code> using the <code>sval_pointer</code> proxy class. (That <code>ida_pro.py</code> module from IDAPython contains a number of array and pointer types that you can use to clamp values to a certain range dictated by the database).</p>\n<pre><code>Python&gt;meh = idaapi.ea_pointer()\nPython&gt;meh.assign(-1)\nPython&gt;meh.value()\n0xffffffff\n</code></pre>\n<p>Although, you're eating the (performance) cost of instantiating an object when you can just ensure that your integer always fits (signed or unsigned) within the database bit size.</p>\n</div>",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 22, 2024 at 0:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}