{
    "title": "Patched Application causes Acces Violation c0000005",
    "link": "https://reverseengineering.stackexchange.com/questions/23244/patched-application-causes-acces-violation-c0000005",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been working with this application to remove it's trial limitations.\nBut every byte I change, it throws an acces violation.</p>\n<p>Piece of the code:</p>\n<p>Original:</p>\n<pre><code>003354C6 - 0F85 D3000000         - jne 0033559F\n00EA54CC - FF 87 54050000        - inc [edi+00000554]\n00EA54D2 - 83 BF 54050000 0A     - cmp dword ptr [edi+00000554],0A { 10 }\n003354D9 - 0F82 C0000000         - jb 0033559F\n003354DF - 6A 00                 - push 00 { 0 }\n</code></pre>\n<p>Patched</p>\n<pre><code>003354D2 - 83 BF 54050000 0F     - cmp dword ptr [edi+00000554],0F { 15 }\n</code></pre>\n<p>Nothing else is changed.\nNow the program does run, but after ~4 seconds it crashes.</p>\n<p>When running through x64dbg it catches the exception, but I don't know what to do with it.\n<a href=\"https://i.sstatic.net/ECrdt.png\" rel=\"nofollow noreferrer\"><img alt=\"x64dbg\" src=\"https://i.sstatic.net/ECrdt.png\"/></a></p>\n<p>And run just normally it gives this\n<a href=\"https://i.sstatic.net/zkpzi.png\" rel=\"nofollow noreferrer\"><img alt=\"Windows crash report\" src=\"https://i.sstatic.net/zkpzi.png\"/></a></p>\n<p>Any help, tips would be appreciated!</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "605",
    "tags": [
        "ollydbg",
        "x64dbg",
        "patching"
    ],
    "user": "Daan Rozebloem",
    "time": "Feb 13, 2020 at 23:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Without more information it's hard to tell for sure.  However, I'd make 2 observations -</p>\n<ul>\n<li><p>It appears that your patch is trying to increase the upper bound of a loop from 10 to 16.</p></li>\n<li><p>The function in which the access violation occurs appears to be a C++ class member function where the faulting instruction is trying to read a member variable. (esi here is loaded from ecx where ecx is the <code>this</code> pointer.</p></li>\n</ul>\n<p>The combination makes me suspect that the increase in loop limit results in an out-of-bounds array access.  e.g. something like this -</p>\n<pre><code>std::array&lt;some_class*,10&gt; widgets;         // or std::vector or C-array etc\n\n.. elsewhere ..\n\nfor( size_t i = 0; i &lt; 10; ++i ) {          // the patch changes 10 to 15\n    widgets[i]-&gt;faulting_function( ... );\n}\n</code></pre>\n<p>To confirm this hypothesis and resolve it you are going to have work backwards from the faulting function to see where ecx comes from and then increase the size of the container.  If however, this is static and in the data section of the exefile then it might not be trivial to do so.</p>\n</div>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Feb 14, 2020 at 23:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Daan Rozebloem",
                    "text": "<span class=\"comment-copy\">Thanks for your response. I've looked further at it, and tries to patch some other areas. Still throws acces violation. So it's an anti-tamper measure. I'm new to x32dbg and I need to run a trace from entrypoint till execution with the original file and patched file. Do you know how?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>This is more of a comment-answer, but as I am below 50 reputation, I can only post answers.</strong></p>\n<p>It's something to do with the <code>cmp</code> instruction you are byte-patching.</p>\n<p>An access violation is occuring with the <code>EIP</code> register, which tells the computer what instruction to execute next, and controls the flow of the program. The <code>cmp</code> you are patching is breaking, likely because the what it's returning isn't met for the <code>jb</code> instruction to occur, hence the <code>EIP</code> is throwing an access violation.</p>\n<p>How is the <code>cmp</code> working exactly? Have you reversed that?</p>\n</div>",
            "votes": "0",
            "user": "Graham",
            "time": "Feb 14, 2020 at 16:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}