{
    "title": "Stuck in x87 FLD instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/13683/stuck-in-x87-fld-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been working for my final project which is a disassembler for AMD64 instruction set, and i was trying to disassemble machine code by hand to understand it correctly. But i got stuck at a x87 instruction.</p>\n<p>Machine code of instruction is: <code>dd 04 c5 60 40 08 08...</code></p>\n<p>I've checked AMD64 manual vol3, and it says DD is an x87 instruction and with the help of ModRM byte ,which is <code>0b00000100</code>, my ModRM.reg field is <code>000</code> and with this information manual says this instructions meaning is \"FLD mem64real\". But since I've compiled this code for i386 target architecture i think that i shouldn't have 64 bit memory adress. </p>\n<p>But the most interesting part is when i checked the binary with objdump, it says that this bytes are corresponds to <code>fldl   0x8084060(,%eax,8)</code> but i can't find any information about FLDL instruction nor how does objdump find this. </p>\n<p>So my question is am i doing something wrong ?</p>\n<p>How objdump think that instruction is FLDL but manual says its FLD ?</p>\n<p>Target machine of binary is i386.</p>\n<p>I use AMD64 manual volume 3 to check instructions</p>\n<p>Version of objdump is <code>GNU objdump (GNU Binutils for Debian) 2.26.1</code></p>\n<p>Here is readelf output of binary</p>\n<pre><code>ELF Header\nMagic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF32\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              EXEC (Executable file)\nMachine:                           Intel 80386\nVersion:                           0x1\nEntry point address:               0x80482c0\nStart of program headers:          52 (bytes into file)\nStart of section headers:          3744 (bytes into file)\nFlags:                             0x0\nSize of this header:               52 (bytes)\nSize of program headers:           32 (bytes)\nNumber of program headers:         8\nSize of section headers:           40 (bytes)\nNumber of section headers:         31\nSection header string table index: 28\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "742",
    "tags": [
        "disassembly",
        "objdump",
        "amd64"
    ],
    "user": "Efe Can",
    "time": "Oct 9, 2016 at 21:38",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">\"For example, fld[lst] means fldl, flds, or fldt; fst{ls} means fst, fstl, or fsts; and fild{l|ll} means fild, fildl, or fildll.\" <a href=\"https://docs.oracle.com/cd/E19620-01/805-4693/805-4693.pdf\" rel=\"nofollow noreferrer\">docs.oracle.com/cd/E19620-01/805-4693/805-4693.pdf</a> also <a href=\"http://www.felixcloutier.com/x86/FLD.html\" rel=\"nofollow noreferrer\">felixcloutier.com/x86/FLD.html</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>fldl</code> is just the <a href=\"https://en.wikipedia.org/wiki/X86_assembly_language#Syntax\" rel=\"nofollow noreferrer\">AT&amp;T syntax</a> for the \"FLD\" instruction involving a long (4 bytes) register. This is equivalent to </p>\n<pre><code>fld     qword ptr [eax*8 + 8084060h]\n</code></pre>\n<p>in Intel syntax.</p>\n<p>You could <a href=\"https://stackoverflow.com/questions/10362630/how-can-objdump-emit-intel-syntax\">instruct objdump to emit Intel syntax</a> with the <code>-M intel</code> flag.</p>\n<hr/>\n<p>While i386 does not support 64-bit addresses, it certain can read 64 bits out given an address. The \"FLD m64fp\" instruction reads 8 bytes from the input address (<code>0x8084060 + eax*8</code> in this case), interprets it as a floating point number (a <code>double</code>), and then pushes it to the FPU register stack.</p>\n<p>In this case <code>0x8084060</code> is likely an address to a global array of <code>double</code> and <code>eax</code> is an index to fetch a value out of the array.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Efe Can",
                    "text": "<span class=\"comment-copy\">But where did <code>+eax*8</code> come from ? I know that DD means it's an x87 instruction and i use ModRM byte(04) to find it's <code>fld</code> and i think somehow c5 means <code>eax*8</code>. But i cannot find what is that C5 byte or which table i should look to find its values.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So this answer only focuses on the second question of @Efe:\nHow is <code>+eax*8</code> constructed.</p>\n<p>You can determine the SIB-offsets with the following steps. We analyze the first two bytes <code>04 c5</code> of the whole instruction:</p>\n<pre><code>dd 04 c5 60 40 08 08\n</code></pre>\n<p>First, we only focus on the MOD-REG-R/M Byte (look <a href=\"http://www.c-jump.com/CIS77/CPU/x86/X77_0060_mod_reg_r_m_byte.htm\" rel=\"nofollow\">here</a> for details)</p>\n<pre><code>MOD-REG-R/M Byte = 04\n--------------------------------------------------\n04   0000 0100\nMOD  00          Meaning: SIB with no displacement\nREG  000         Meaning: eax (32-Bit)\nR/M  100         Meaning: SIB with no displacement\n</code></pre>\n<p>Second, we analyze the SIB Byte of the instruction (look <a href=\"http://www.c-jump.com/CIS77/CPU/x86/X77_0100_sib_byte_layout.htm\" rel=\"nofollow\">here</a> for details). Scaled indexed addressing mode uses the second byte (namely, SIB byte) that follows the MOD-REG-R/M.</p>\n<pre><code>SIB Byte = C5\n--------------------------------------------------\nc5    1100 0101\nScale 11    Meaning: Index*8\nIndex 000   Meaning: eax register\nBase  101   Meaning: Displacement only\n</code></pre>\n<p>The combination of MOD and Base lead to (look <a href=\"http://www.c-jump.com/CIS77/CPU/x86/X77_0110_scaled_indexed.htm\" rel=\"nofollow\">here</a> for details)</p>\n<pre><code>MOD = 00 and BASE field = 101:\n--------------------------------------------------\ndisp + eax*n\n</code></pre>\n</div>",
            "votes": "2",
            "user": "knx",
            "time": "Oct 10, 2016 at 7:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Efe Can",
                    "text": "<span class=\"comment-copy\">I've totally got distracted with <code>mem64real</code> keyword in manual and forgot about that we determine memory address starting with ModRM.r/m field. Thanks for reminding me that</span>",
                    "time": null
                }
            ]
        }
    ]
}