{
    "title": ".NET: How to debug or decompile a DanamicMethod with dnSpy?",
    "link": "https://reverseengineering.stackexchange.com/questions/30985/net-how-to-debug-or-decompile-a-danamicmethod-with-dnspy",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a managed .NET executable that supplies the msil bytecode of a function as raw bytes. It constructs a <code>DynamicMethod</code> object, sets the bytecode with <code>DynamicMethod.DynamicILInfo.SetCode()</code> and invokes it with <code>DynamicMetho.Invoke()</code>.</p>\n<p>What is the best way to decompile or step into this DynamicMethod thing? How do I reverse it?</p>\n<p>DnSyp doc has this to say:</p>\n<blockquote>\n<p>Dynamic modules can be debugged (but not dynamic methods due to CLR limitations)</p>\n</blockquote>\n<p>But there has to be a way to deal with it.</p>\n<p>I am new to .NET debugging so there might be a simple solution I am missing.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "719",
    "tags": [
        "dynamic-analysis",
        ".net",
        "dnspy"
    ],
    "user": "bernd feinman",
    "time": "Oct 12, 2022 at 22:24",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">Flare-On chall 8? ;)</span>",
            "time": null
        },
        {
            "user": "bernd feinman",
            "text": "<span class=\"comment-copy\">yes. .NET is entirely beyond me. i have literally opened dnspy for the first time yesterday.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can debug <code>DynamicMethod</code>'s using the <code>EventPipe</code> API. I've written a library that uses it to allow for code injection via <code>DynamicMethod</code> that can be debugged: <a href=\"https://github.com/damieng/DamienG.Library/blob/master/DamienG.Library/Diagnostics/EventPipe/DynamicMethodInjector.cs\" rel=\"nofollow noreferrer\">https://github.com/damieng/DamienG.Library/blob/master/DamienG.Library/Diagnostics/EventPipe/DynamicMethodInjector.cs</a></p>\n<p>First, create a new <code>DynamicMethodInjector</code> object:\n<code>var injector = new DynamicMethodInjector(\"MyTypeName\", \"MyMethodName\");</code></p>\n<p>Then, add some IL to your <code>DynamicMethod</code>:\n<code>injector.AddMethodBody(ILGenerator il);</code></p>\n<p>You can then invoke the <code>DynamicMethod</code> as normal, adding a breakpoint to the <code>EventPipe.Start</code> method to avoid hitting the breakpoint before the IL is injected:\n<code>\n// Inject IL into the process\ninjector.Inject();</code></p>\n<p>// Invoke your DynamicMethod\nvar result = (int)m.Invoke(obj, new object[] { 1, 2 });\n</p>\n</div>",
            "votes": "3",
            "user": "evandrix",
            "time": "Mar 1, 2023 at 2:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "evandrix",
                    "text": "<span class=\"comment-copy\">The file <a href=\"https://github.com/damieng/DamienG.Library/blob/master/DamienG.Library/Diagnostics/EventPipe/DynamicMethodInjector.cs\" rel=\"nofollow noreferrer\">github.com/damieng/DamienG.Library/blob/master/DamienG.Library/…</a> is no longer available. Has it been moved elsewhere? Is there another mirror to it?</span>",
                    "time": null
                }
            ]
        }
    ]
}