{
    "title": "Is there any tool to visually see program stack in linux while debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/15960/is-there-any-tool-to-visually-see-program-stack-in-linux-while-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>By stack I mean the location where local variable, return address etc are stored. Which is pointed to by the esp and ebp.</p>\n</div>",
    "votes": "8",
    "answers": 3,
    "views": "8k",
    "tags": [
        "debugging",
        "x86",
        "debuggers",
        "stack"
    ],
    "user": "pizzaEatingGuy",
    "time": "Jul 30, 2017 at 23:28",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\"><a href=\"https://github.com/eteran/edb-debugger/wiki/Stack-View\" rel=\"nofollow noreferrer\">github.com/eteran/edb-debugger/wiki/Stack-View</a></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">look for gdbinit by various authors like mammon they usually decipher and print the stack contents or simply write a script with x/x *(long *) esp , esp+4 and run it on every step,</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can easily view it using Visual Panels in <a href=\"https://github.com/radareorg/radare2\" rel=\"nofollow noreferrer\">radare2</a>. Here's a teaser:</p>\n<p><a href=\"https://i.sstatic.net/CCVtg.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/CCVtg.png\"/></a></p>\n<h2>Installation</h2>\n<p>First of all, install radare2 from git repository:</p>\n<pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\n<h2>Debugging</h2>\n<p>To debug a program with radare2 call it with the debug flag <code>-d</code>:<br/>\n<code>$ r2 -d /bin/ls</code></p>\n<p>Now the program is opened in debug mode.<br/>\nUse <code>v!</code> to show the Visual Panel modes. Now you can see the assembly at the left and the stack panel at the right. You can step into and step over using <code>s</code> or <code>S</code> accordingly. Use <code>?</code> to list more commands in the Visual Panels mode.</p>\n<h2>Some more ways to display the stack</h2>\n<ul>\n<li><code>pxa @ rsp</code> - to show annotated hexdump</li>\n<li><code>pxw @ rsp</code> - to show hexadecimal words dump (32bit)</li>\n<li><code>pxq @ rsp</code> - to show hexadecimal quad-words dump (64bit)</li>\n<li><code>ad@r:SP</code> - to analyze the stack data</li>\n</ul>\n<hr/>\n<p>To read more about debugging with radare2 it is recommended to read <a href=\"https://book.rada.re/\" rel=\"nofollow noreferrer\">radare2 book</a> and especially the <a href=\"https://book.rada.re/first_steps/basic_debugger_session.html\" rel=\"nofollow noreferrer\">Basic Debugger Session</a> chapter.</p>\n</div>",
            "votes": "12",
            "user": "jonny",
            "time": "Nov 21, 2021 at 3:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ollie",
                    "text": "<span class=\"comment-copy\">The links at the end of your answer 404, BTW.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use gdb, for example let see this simple program</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre>\n<p>Compile it</p>\n<pre><code>gcc -o simple simple.c -g\n</code></pre>\n<p>Run with gdb</p>\n<pre><code>gdb ./simple\n</code></pre>\n<p>Set a breakpoint in the main function and run</p>\n<pre><code>(gdb) b main\n(gdb) r\n</code></pre>\n<p>And now we can look at the registers contents</p>\n<pre><code>(gdb) i r \nrax            0x400526 0x400526\nrbx            0x0  0x0\nrcx            0x0  0x0\nrdx            0x7fffffffe518   0x7fffffffe518\nrsi            0x7fffffffe508   0x7fffffffe508\nrdi            0x1  0x1\nrbp            0x7fffffffe420   0x7fffffffe420\nrsp            0x7fffffffe420   0x7fffffffe420\nr8             0x4005b0 0x4005b0\nr9             0x7ffff7de78e0   0x7ffff7de78e0\nr10            0x846    0x846\nr11            0x7ffff7a2e740   0x7ffff7a2e740\nr12            0x400430 0x400430\nr13            0x7fffffffe500   0x7fffffffe500\nr14            0x0  0x0\nr15            0x0  0x0\nrip            0x40052a 0x40052a &lt;main+4&gt;\neflags         0x246    [ PF ZF IF ]\ncs             0x33 0x33\nss             0x2b 0x2b\nds             0x0  0x0\nes             0x0  0x0\nfs             0x0  0x0\ngs             0x0  0x0\n</code></pre>\n<p>Dump the stack</p>\n<pre><code>    (gdb) x/20x $sp\n    0x7fffffffe420: 0x00400540  0x00000000  0xf7a2e830  0x00007fff\n    0x7fffffffe430: 0x00000000  0x00000000  0xffffe508  0x00007fff\n    0x7fffffffe440: 0xf7ffcca0  0x00000001  0x00400526  0x00000000\n    0x7fffffffe450: 0x00000000  0x00000000  0xbbbdddd1  0xdfdea768\n    0x7fffffffe460: 0x00400430  0x00000000  0xffffe500  0x00007fff\n</code></pre>\n<p>Show the instructions</p>\n<pre><code>(gdb)  list\n1   #include &lt;stdio.h&gt;\n2   \n3   int main(){\n4     printf(\"hello world\\n\");\n5     return 0;\n6   }\n7   \n8   \n\n(gdb) x/4i $pc\n    =&gt; 0x40052a &lt;main+4&gt;:   mov    edi,0x4005c4\n       0x40052f &lt;main+9&gt;:   call   0x400400 &lt;puts@plt&gt;\n       0x400534 &lt;main+14&gt;:  mov    eax,0x0\n       0x400539 &lt;main+19&gt;:  pop    rbp\n</code></pre>\n<p>And so on ...</p>\n</div>",
            "votes": "4",
            "user": "invictus85",
            "time": "Jul 31, 2017 at 12:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>please have a look to <a href=\"https://github.com/hugsy/gef\" rel=\"nofollow noreferrer\">gef</a> it is incredibly useful and continuously improved. Here some notes from the main github page:</p>\n<ol>\n<li>Entirely OS Agnostic, NO dependencies: GEF is battery-included and\nis installable in 2 seconds (unlike PwnDBG).</li>\n<li>Fast limiting the number of dependencies and optimizing code to make\nthe commands as fast as possible (unlike PwnDBG).</li>\n<li>Provides more than 50 commands to drastically change your experience\nin GDB.</li>\n<li>Easily extendable to create other commands by providing more\ncomprehensible layout to GDB Python API.</li>\n<li>Works consistently on both Python2 and Python3.</li>\n<li>Built around an architecture abstraction layer, so all commands work\nin any GDB-supported architecture such as x86-32/64, ARMv5/6/7,\nAARCH64, SPARC, MIPS, PowerPC, etc. (unlike PEDA)</li>\n<li>Suited for real-life apps debugging, exploit development, just as\nmuch as CTF (unlike PEDA or PwnDBG)</li>\n</ol>\n<h1>Installation</h1>\n<pre><code>wget -q -O- https://github.com/hugsy/gef/raw/master/gef.sh | sh\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\"><a href=\"https://meta.stackexchange.com/questions/8231/are-answers-that-just-contain-links-elsewhere-really-good-answers\">Link only answers are not ideal</a>, please expand your answer to include relevant details such as what features are offered.</span>",
                    "time": null
                }
            ]
        }
    ]
}