{
    "title": "why code at .rodata executes [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20460/why-code-at-rodata-executes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2019-01-25 19:34:00Z\">6 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/20460/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>How come the following code executes if buf* is @ rodata segment ?</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nchar *buf[] = {\n\"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\xc3 IS THIS DATA?\"\n};\nchar arr_chr[500] = \"I AM READ_WRITE\";\n\nint main(){\n    ((void (*)()) buf[0])();\n\n    printf(\"%s\\n\", buf[0]);\n    printf(\"%s\\n\", arr_chr);\n}\n</code></pre>\n<p>compiled with <code>gcc version 7.3.0</code> without flags @ x86_64-linux-gnu </p>\n<p><code>file</code>'s output:</p>\n<p>check: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, not stripped</p>\n<p><a href=\"https://i.sstatic.net/9BupH.png\" rel=\"nofollow noreferrer\"><img alt=\"ida sc\" src=\"https://i.sstatic.net/9BupH.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "792",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "James W.",
    "time": "6 years ago",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">It segfaults on my system... which is the 'normal' behavior for this code. I suspect your system to be weird. Anyway, this is definitely NOT about reverse-engineering.</span>",
            "time": null
        },
        {
            "user": "James W.",
            "text": "<span class=\"comment-copy\">Kowalski ? This was tested on a fresh Ubuntu VM</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Have you tried on a real system, though ? Come on Private, I am sure you can do better than that! :-)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you mixed up segments and sections on ELF. Unlike PE where sections define how the application is mapped and page permissions, ELF loaders only use segments <code>PT_LOAD</code> to do that. Segments don't have name, so there's nothing like <code>.rodata</code> segment, only <code>.rodata</code> section. You can verify that be setting 0x0 to the field <code>ElfN_Ehdr::e_shoff</code>, it'll still work.</p>\n<p>Now regarding the initial question, it seems ELF executable used to have only two <code>PT_LOAD</code> segments, one is <code>R-X</code> and <code>RW-</code>. If a data is const, it'll be stored inside the first segment which is also executable. It's not true anymore on my archlinux.</p>\n</div>",
            "votes": "2",
            "user": "wisk",
            "time": "Jan 24, 2019 at 21:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}