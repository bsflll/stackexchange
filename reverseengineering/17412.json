{
    "title": "How can i start the RE process in radare2?(make changes to the registers) [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17412/how-can-i-start-the-re-process-in-radare2make-changes-to-the-registers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/17412/edit\">editing this post</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2018-02-12 09:07:48Z\">7 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/17412/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm an absolute newbie to reverse engineering. I have a 32bit lsb arm binary which I would like to reverse engineer using radare2. How should I begin ?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "arm",
        "radare2",
        "binary"
    ],
    "user": "user7083361",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not clear exactly what are you asking for, so I'll start from the basic.</p>\n<h2>Reverse Engineering 101</h2>\n<p>If you don't have previous experience with assembly or reverse engineering I'd suggest you to start from there since you need to know the techniques before you should get to know the tools.</p>\n<p>You can start learning from any source you find suitable for you. </p>\n<ul>\n<li><a href=\"https://reverseengineering.stackexchange.com/questions/1754/windows-wiki-books-and-tutorials\">Our Community list of Books and Tutorials</a></li>\n<li><a href=\"https://beginners.re/\" rel=\"nofollow noreferrer\">Reverse Engineering for Beginners</a></li>\n</ul>\n<h2>radare2 101</h2>\n<p>The recommended source to start learning about radare is the <a href=\"https://radare.gitbooks.io/radare2book/content/\" rel=\"nofollow noreferrer\">radare2 book</a></p>\n<blockquote>\n<p><strong>Introduction</strong><br/>\n  This book aims to cover most usage aspects of radare2. A framework for reverse engineering and analyzing binaries</p>\n</blockquote>\n<p>You can also check my <a href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\" rel=\"nofollow noreferrer\">Series of tutorials</a> about radare2 which go through all the information you need to to to start reversing with radare2. You can check as well the <a href=\"https://radare2.securisec.com/\" rel=\"nofollow noreferrer\">radre2 wiki</a>.</p>\n<p>I highly encourage you to begin from these sources. You'll find them helpful, I'm sure!</p>\n<hr/>\n<p>Now, into a more specific answer. How to use it for reverse engineering? Here are the basic steps:</p>\n<h2>Installation</h2>\n<p>Radare2’s development is pretty quick – the project evolves every day, therefore it’s recommended to use the current git version over the stable one. Sometimes the stable version is less stable than the current git version!</p>\n<pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\n<h2>Static Session</h2>\n<p>To open a basic static session (i.e without debugging) you should simply pass your program name to radare2:</p>\n<pre><code>$ r2 ./program_name\n — Thank you for using radare2. Have a nice night!\n[0x08048370]&gt; \n</code></pre>\n<h2>Debugging session</h2>\n<p>To debug using radare2 pass <code>-d</code>:</p>\n<pre><code>$ r2 -d /program_name\nProcess with PID 6972 started...\n= attach 6972 6972\nbin.baddr 0x00400000\nUsing 0x400000\nasm.bits 64\n -- Execute a command on the visual prompt with cmd.vprompt\n[0x7fc6b4200c30]&gt;\n</code></pre>\n<h2>Making changes to the registers</h2>\n<p>Since you specifically mentioned this question, you can modify the registers using the <code>dr</code> command and subcommands. Just execute <code>dr?</code> to get help about the command and its subcommands. If you want, for example, to change <code>RAX</code>, simply execute:</p>\n<pre><code>[0x00400697]&gt; dr rax\n0x00400697\n[0x00400697]&gt; dr rax=0x41414141\n0x00400697 -&gt;0x41414141\n[0x00400697]&gt; dr rax\n0x41414141\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Feb 8, 2018 at 6:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A workflow I typically use:</p>\n<pre><code>$&gt; radare2 -d /path/to/my/bin\n[some addr]&gt; aaa\n[some addr]&gt; afll\n[some addr]&gt; db sym.main\n[some addr]&gt; dc\n[main addr]&gt; v!\n</code></pre>\n<p>From here, you'll be dropped into visual mode and you can step through the binary via <code>s</code> and step over lines via <code>S</code>.</p>\n<p>What this sequence of commands does is:</p>\n<ol>\n<li>Runs various analysis tasks (which will be displayed as they're completed)</li>\n<li>Lists functions in the binary (in verbose mode)</li>\n<li>Sets a breakpoint at the <code>main</code> function (assuming it exists)</li>\n<li>Continues until this breakpoint is reached (i.e. the start of <code>main</code>)</li>\n<li>Enters visual mode</li>\n</ol>\n<p>Of course, this is just a particular workflow I happen to use. There are other commands that are useful for other things, for example:</p>\n<ul>\n<li><code>s sym.main</code> - seeks to the address of the <code>main</code> function</li>\n<li><code>s 0xdeadbeef</code> - we can pass any arbitrary address to seek</li>\n<li><code>pdf</code> - displays the disassembly of the function you're currently in</li>\n<li><code>iM</code> - displays the address of the program's entry point</li>\n<li><code>iZ</code> - displays ASCII strings found within the binary</li>\n<li><code>aaaa</code> - this runs an even more detailed analysis than <code>aaa</code> above (may take some time)</li>\n<li><code>VV</code> - displays the control flow graph (CFG) of the current function (invaluble tool)</li>\n<li><code>dr rax</code> - displays the contents of the <code>rax</code> register (obviously any register can be substituted here and you can even change the value via <code>dr rax = 0x12</code>)</li>\n<li><code>x @ 0xdeadbeef</code> - e<strong>x</strong>amines memory at address <code>0xdeadbeef</code></li>\n<li><code>? 0xdeadbeef</code> - converts the number provided (<code>0xdeadbeef</code>) to various bases and formats</li>\n</ul>\n<hr>\n<p>This is not a complete tutorial, but I certainly hope it helps you. Some resources I found extremely useful:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=LAkYW5ixvhg\" rel=\"nofollow noreferrer\">Introduction to Reverse Engineering with Radare2</a></li>\n<li><a href=\"https://samsymons.com/blog/reverse-engineering-with-radare2-part-1/\" rel=\"nofollow noreferrer\">Reverse Engineering with Radare2, Part 1</a></li>\n<li><a href=\"https://github.com/ifding/radare2-tutorial\" rel=\"nofollow noreferrer\">ifding/radare2-tutorial</a></li>\n</ul>\n<p><strong>Full disclaimer: this following link is one of my own</strong></p>\n<ul>\n<li><a href=\"https://jmcph4.github.io/2018/02/07/crackerjack-introduction-and-puzzle-a-solution.html\" rel=\"nofollow noreferrer\">Crackerjack - Introduction and Puzzle A Solution</a> (walkthrough using radare2 of a collection of crackmes I am making)</li>\n</ul>\n</hr></div>",
            "votes": "1",
            "user": "jmcph4",
            "time": "Jun 24, 2020 at 2:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "xate",
                    "text": "<span class=\"comment-copy\"><code>iM</code> lists the address of the program's main function, <code>ie</code> is the entry point.</span>",
                    "time": null
                }
            ]
        }
    ]
}