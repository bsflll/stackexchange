{
    "title": "How can I let IDA execute int 2D so that execution transfers to the exception handler function?",
    "link": "https://reverseengineering.stackexchange.com/questions/9056/how-can-i-let-ida-execute-int-2d-so-that-execution-transfers-to-the-exception-ha",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a program that dynamically loads <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680634%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">SetUnhandledExceptionFilter</a> and uses it to set a function as an exception handler. It then calls <code>int 2D</code> - so that execution transfers to the function only when the program is not being debugged.</p>\n<p>I want to see how the function behaves dynamically - specifically because I'm having trouble understanding how it works with its <code>EXCEPTION_POINTER*</code> parameter - but I can't really do that because execution won't even transfer there while I'm debugging.</p>\n<p>How can I make IDA execute int 2D so that I can see execution transfer to the exception handler function and see its behavior dynamically?</p>\n<p>I tried following the advice in <a href=\"https://reverseengineering.stackexchange.com/questions/6268/handling-int-2d-anti-debugger-technique-in-ida-pro?rq=1\">this answer</a>, but it didn't help: changing <code>0x2DCD</code> to <code>0x2DFF</code> had the exact same effect - the program crashed.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "903",
    "tags": [
        "ida",
        "anti-debugging"
    ],
    "user": "Tristan",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Carlos Garcia",
            "text": "<span class=\"comment-copy\">Could you post a relevant excerpt of the assembly?</span>",
            "time": null
        },
        {
            "user": "newgre",
            "text": "<span class=\"comment-copy\">you could also try one of IDAStealth or ScyllaHide for IDA plugins.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The KERNEL32.UnhandledExceptionFilter() is special, because it checks for the presence of a debugger, and refuses to call the process-defined UnhandledExceptionFilter() if one is present.  In order to reach the process-defined routine, you need to set a breakpoint on NTDLL.NtQueryInformationProcess(), and check for these parameters on the stack: -1, 7, a pointer, 4, 0.  When you see it, you can step over the function, change the return value to -1, and resume execution.  Then the filter function will be called.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Jun 3, 2015 at 15:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}