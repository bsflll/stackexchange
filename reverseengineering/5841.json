{
    "title": "Python library for assembling x86, x64 and ARM exploits",
    "link": "https://reverseengineering.stackexchange.com/questions/5841/python-library-for-assembling-x86-x64-and-arm-exploits",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It would be very useful to have a pure Python library that could assemble x86, x64, and ARM instructions. Do you have a recommendation?</p>\n<p>I don't mind if they are not pure Python, but that'd be preferred.</p>\n</div>",
    "votes": "6",
    "answers": 3,
    "views": "12k",
    "tags": [
        "disassembly",
        "assembly",
        "python"
    ],
    "user": null,
    "time": "May 3, 2019 at 17:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Take a look at Gallopsled's pwntools.  Does all the things you want it to, and has most of it built in already.</p>\n<p><a href=\"https://github.com/Gallopsled/pwntools\" rel=\"nofollow noreferrer\">https://github.com/Gallopsled/pwntools</a></p>\n<p>For a few examples of it in use, I put up some <a href=\"https://gist.github.com/ebeip90\" rel=\"nofollow noreferrer\">writeups from Codegate 2013</a> and the <a href=\"http://pwnies.dk/\" rel=\"nofollow noreferrer\">pwnies do their own writeups</a> as well.</p>\n<p>Here's a quick example of \"I want to <code>dup</code> file descriptor #4 (e.g. a connected TCP socket) to stdin/stdout/stderr, and pop a shell\".</p>\n<pre><code>#!/usr/bin/env python\nfrom pwn import *\ncontext.arch = 'amd64' # Default architecture is i386\n\nshellcode = shellcraft.dupio(4) + shellcraft.sh()\nprint shellcode\nprint '----'\nprint enhex(asm(shellcode))\nprint '----'\nprint hexdump(asm(shellcode))\n</code></pre>\n<p>Prints out</p>\n<pre><code>dup_1:\n    push 4\n    pop rbp\n\n    push 3\nloop_2:\n    pop rsi\n    dec rsi\n    js after_3\n    push rsi\n\n    /* call dup2('rbp', 'rsi') */\n    push SYS_dup2 /* 0x21 */\n    pop rax\n    mov rdi, rbp\n    syscall\n\n    jmp loop_2\nafter_3:\n    /* execve(path='/bin///sh', argv=['sh'], envp=0) */\n    /* push '/bin///sh\\x00' */\n    push 0x68\n    mov rax, 0x732f2f2f6e69622f\n    push rax\n    mov rdi, rsp\n    /* push argument array ['sh\\x00'] */\n    /* push 'sh\\x00' */\n    push 0x1010101 ^ 0x6873\n    xor dword ptr [rsp], 0x1010101\n    xor esi, esi /* 0 */\n    push rsi /* null terminate */\n    push 8\n    pop rsi\n    add rsi, rsp\n    push rsi /* 'sh\\x00' */\n    mov rsi, rsp\n    xor edx, edx /* 0 */\n    /* call execve() */\n    push SYS_execve /* 0x3b */\n    pop rax\n    syscall\n\n----\n6a045d6a035e48ffce780b566a21584889ef0f05ebef6a6848b82f62696e2f2f2f73504889e768726901018134240101010131f6566a085e4801e6564889e631d26a3b580f05\n----\n00000000  6a 04 5d 6a  03 5e 48 ff  ce 78 0b 56  6a 21 58 48  │j·]j│·^H·│·x·V│j!XH│\n00000010  89 ef 0f 05  eb ef 6a 68  48 b8 2f 62  69 6e 2f 2f  │····│··jh│H·/b│in//│\n00000020  2f 73 50 48  89 e7 68 72  69 01 01 81  34 24 01 01  │/sPH│··hr│i···│4$··│\n00000030  01 01 31 f6  56 6a 08 5e  48 01 e6 56  48 89 e6 31  │··1·│Vj·^│H··V│H··1│\n00000040  d2 6a 3b 58  0f 05                                  │·j;X│··│\n00000046\n0490a0e30280a0e30900a0e10810a0e13f0090ef018058e2faffff5a0c008fe20020a0e305002de90d10a0e10b0090ef2f62696e2f736800\n0000a0e31eff2fe1\n</code></pre>\n<p>They've also got nifty command-line tools for testing shellcode.  For example:</p>\n<pre><code>$ pwn shellcraft i386.linux.echo \"Hello world\"\n6801010101813424736d6501686f20776f6848656c6c6a04586a015b89e16a0b5acd80\n</code></pre>\n<p>If you pipe it to a file or another program, raw binary is sent.</p>\n<pre><code>$ pwn shellcraft i386.linux.echo \"Hello world\" | xxd\n00000000: 6801 0101 0181 3424 736d 6501 686f 2077  h.....4$sme.ho w\n00000010: 6f68 4865 6c6c 6a04 586a 015b 89e1 6a0b  ohHellj.Xj.[..j.\n00000020: 5acd 80                                  Z..\n</code></pre>\n<p>You can print out the raw annotated assembly:</p>\n<pre><code>$ pwn shellcraft i386.linux.echo \"Hello world\" -f asm\n/* push 'Hello world' */\npush 0x1010101\nxor dword ptr [esp], 0x1656d73\npush 0x6f77206f\npush 0x6c6c6548\n/* call write('1', 'esp', 0xb) */\npush SYS_write /* 4 */\npop eax\npush (1) /* 1 */\npop ebx\nmov ecx, esp\npush 0xb\npop edx\nint 0x80\n</code></pre>\n<p>Or generate an ELF:</p>\n<pre><code>$ pwn shellcraft i386.linux.echo \"Hello world\" --format elf &gt; hello\n$ file hello\nhello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped \n</code></pre>\n<p>And even automatically execute or debug it:</p>\n<pre><code>$ pwn shellcraft ... --run\n$ pwn shellcraft ... --debug\n</code></pre>\n<p>You can also assemble your own shellcode on the command-line:</p>\n<pre><code>$ pwn asm nop\n90\n$ pwn asm nop | xxd\n00000000: 90                                       .\n</code></pre>\n</div>",
            "votes": "5",
            "user": "Zach Riggle",
            "time": "May 10, 2017 at 22:31",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some Python assembler libraries:</p>\n<h3><a href=\"https://github.com/grant-olson/pyasm\" rel=\"noreferrer\">Pyasm - Python x86 Assembler</a></h3>\n<blockquote>\n<p>Pyasm is a full-featured dynamic assembler written entirely in Python. By dynamic, it means that it can be used to generate and execute machine code in python at runtime without requiring the generation of object files and linkage. It essentially allow 'inline' assembly in Python modules on x86 platforms.</p>\n</blockquote>\n<h3><a href=\"https://github.com/jbremer/pyasm2\" rel=\"noreferrer\">pyasm2</a></h3>\n<blockquote>\n<p>An easy and powerful assembler engine in Python. Although it's called pyasm2, this is not per se a successor of Pyasm or pyASM. pyasm2 aims to be as flexible as possible, it will support x86, SSE and SSE2.</p>\n</blockquote>\n<h3><a href=\"https://github.com/sipefree/d00ks\" rel=\"noreferrer\">d00ks</a></h3>\n<blockquote>\n<p>d00ks is an ARM assembler and simulator.</p>\n</blockquote>\n<h3><a href=\"https://github.com/Falaina/AsmJit-Python\" rel=\"noreferrer\">AsmJit-Python</a></h3>\n<blockquote>\n<p><em><a href=\"https://github.com/kobalicek/asmjit\" rel=\"noreferrer\">AsmJit</a></em> is a complete JIT and remote assembler for C++ language. It can generate native code for x86 and x64 architectures and supports the whole x86/x64 instruction set - from legacy MMX to the newest AVX2. It has a type-safe API that allows C++ compiler to do a semantic checks at compile-time even before the assembled code is generated or run.</p>\n</blockquote>\n</div>",
            "votes": "6",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zach Riggle",
                    "text": "<span class=\"comment-copy\">None of these assemble x86/x64 <i>and</i> ARM.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Today, several years after the original post and answers - There's another noteworthy package for generating machine code from assembly- <a href=\"https://www.keystone-engine.org/\" rel=\"nofollow noreferrer\">Keystone</a>.</p>\n<p>Keystone is written in C++ but has binding for many languages (Python included), and supports multiple architectures (including x86, amd64 and ARM) so it's a perfect fit!</p>\n<p>Quoting the website's highlighted features:</p>\n<blockquote>\n<ol>\n<li>Multi-architecture, with support for Arm, Arm64 (AArch64/Armv8), Ethereum Virtual Machine, Hexagon, Mips, PowerPC, Sparc, SystemZ, &amp; X86 (include 16/32/64bit).</li>\n<li>Clean/simple/lightweight/intuitive architecture-neutral API.</li>\n<li>Implemented in C/C++ languages, with bindings for Java, Masm, Visual Basic, C#, PowerShell, Perl, Python, NodeJS, Ruby, Go, Rust, Haskell &amp; OCaml available.</li>\n<li>Native support for Windows &amp; *nix (with Mac OSX, Linux, *BSD &amp; Solaris confirmed).</li>\n<li>Thread-safe by design.</li>\n<li>Open source.</li>\n</ol>\n</blockquote>\n<p>Keystone is part of a more extensive set of tools together with <a href=\"https://www.capstone-engine.org/\" rel=\"nofollow noreferrer\">Capstone</a> (Disassembler) and <a href=\"https://www.unicorn-engine.org/\" rel=\"nofollow noreferrer\">Unicorn</a> (Emulator).</p>\n<p>Additionally, if you just want something quick and easy (and don't mind using an online service) - shell-storm's <a href=\"https://shell-storm.org/online/Online-Assembler-and-Disassembler/\" rel=\"nofollow noreferrer\">online dis/assembler</a> is also based on Keystone and Capstone</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Nov 11, 2020 at 10:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}