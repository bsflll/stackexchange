{
    "title": "IDAPython - Find the start of an undefined code blob",
    "link": "https://reverseengineering.stackexchange.com/questions/21828/idapython-find-the-start-of-an-undefined-code-blob",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently working on an IDAPython script that aims to remove various rogue-byte from the malware that I'm reversing. </p>\n<p>I'm in a case where some portions of my code contain this type of anti-disassembly trick:\n<a href=\"https://i.sstatic.net/sKd7W.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/sKd7W.png\"/></a></p>\n<p>The fact is that without patching the rogue byte, I can't define this undefined blob as a proper function (P shortcut).</p>\n<p>So the script is basically doing this:</p>\n<ul>\n<li><p>Find the following opcode: \"<em>90 C3 FE</em>\" (for \"<em>nop, retn, FE</em>\", FE is the rogue-byte).</p></li>\n<li><p>Patch the \"FE\" byte and replace it by a NOP (<em>0x90</em>).</p></li>\n<li><p>Define the new NOP as code.</p></li>\n</ul>\n<p>As all the function having this rogue-bytes in it are undefined, I now need to define them as proper function.</p>\n<p>But I don't know how to go back to the address of the beginning of the undefined function. For instance, that's the result after executing my IDAPython script:\n<a href=\"https://i.sstatic.net/VyosA.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/VyosA.png\"/></a></p>\n<p>The rogue-byte is indeed patch, but now I just need to find the address of \"<em>loc_410687</em>\".</p>\n<p>How can I get this address within my IDAPython script? </p>\n<p><em>(I specify that not all of the function that contains the rogue-byte start by those 3 xors, that's a coincidence. So I can't look for them in order to get the start of the function.)</em></p>\n<p>Any idea?</p>\n<p>Thanks!</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "682",
    "tags": [
        "ida",
        "malware",
        "idapython"
    ],
    "user": "Guillaume",
    "time": "Aug 3, 2019 at 2:01",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">That's the PonyLoader btw. for which the source got leaked: <a href=\"https://github.com/nyx0/Pony/blob/master/source/PonySrc/Pony.asm\" rel=\"nofollow noreferrer\">github.com/nyx0/Pony/blob/master/source/PonySrc/Pony.asm</a> Search for \"AntiDisasmTrick\" - at least in the sourcecode those 3 xors are fixed.</span>",
            "time": null
        },
        {
            "user": "Guillaume",
            "text": "<span class=\"comment-copy\">Yeah, that's indeed a pony sample! That's amazing how you recognize it with only 20 instructions :) Thanks for the source code, it's really helping me</span>",
            "time": null
        },
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Did you try to reanalyze program after all patching is done ?</span>",
            "time": null
        },
        {
            "user": "Guillaume",
            "text": "<span class=\"comment-copy\">Yes, I started the analysis even before the rogue-byte things, I'm just trying to make the code cleaner and more pleasant to look at ^^ It even work perfectly in a debugger, the rogue-byte are not affecting anything !</span>",
            "time": null
        }
    ],
    "answers_data": []
}