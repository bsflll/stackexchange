{
    "title": "Unable to figure out how to map segments in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/20414/unable-to-figure-out-how-to-map-segments-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a 2 MB executable that I'm attempting to reverse engineer. It's executed on a 16-bit 8086 CPU.</p>\n<p>The segments go from 4000 (0x140000) to F000 (0x1F0000).</p>\n<p>I'm attempting to map the segments in the Program Segmentation window, but when doing so, addresses for call / jump operations fail to resolve when converting the entrypoint to code.</p>\n<p>Taking the final segment as an example, I set the Start Address to 0x1F0000, and the End Address to 0x200000. I set the base to 0xF000, as this is how it's referred to in the machine code.</p>\n<p>I do the same with the other segments, including the problem segment (0xD000 -&gt; 0x1D0000).</p>\n<p>When converting to code, the resulting line is resolved as follows:</p>\n<pre><code>jmp far ptr 0D000h:1Ah\n</code></pre>\n<p>This is as expected, jumping to segment 0xD000, with an offset of 0x1A, however IDA is not happy with this, complaining about it with the NONAME and BOUNDS errors.</p>\n<p>I have no idea how to properly map this in IDA. Can someone point me in the right direction?</p>\n<p>[edit]</p>\n<p>For reference, I already have the full list of segments I want to map along with their binary addresses:</p>\n<p>2000:0x1F0000</p>\n<p>3000:0x1F0000</p>\n<p>4000:0x140000</p>\n<p>5000:0x150000</p>\n<p>6000:0x160000</p>\n<p>7000:0x170000</p>\n<p>8000:0x180000</p>\n<p>9000:0x190000</p>\n<p>A000:0x1A0000</p>\n<p>B000:0x1B0000</p>\n<p>C000:0x1C0000</p>\n<p>D000:0x1D0000</p>\n<p>E000:0x1E0000</p>\n<p>F000:0x1F0000</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "505",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "lyptt",
    "time": "Jan 19, 2019 at 11:35",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">How did you get 0x140000 from 4000?</span>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky 140000 is the file offset, 4000 is the base segment offset.</span>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<span class=\"comment-copy\">For this architecture, segments are mapped from the end of the file - 64kb (F000, 0x1F0000) backwards, in 64kb chunks.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">On a normal 8086, segment 4000 would be mapped to 40000. You also have dupes in your list. I think youâ€™re not explaining everything.</span>",
            "time": null
        },
        {
            "user": "lyptt",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky It's not a normal 8086, it's an 8086 compatible clone. On this architecture the first two segments are mapped to the same offset as the last one.</span>",
            "time": null
        }
    ],
    "answers_data": []
}