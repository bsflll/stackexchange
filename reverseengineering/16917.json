{
    "title": "ARM64 syscalls table",
    "link": "https://reverseengineering.stackexchange.com/questions/16917/arm64-syscalls-table",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wonder if there some syscall table for Linux ARM64 architecture?\nI found syscall table for <a href=\"https://w3challs.com/syscalls/?arch=arm_strong\" rel=\"noreferrer\">Linux ARM32</a> and many other architectures, but the problem still exists.</p>\n<p>Does anyone know where can I find a syscall table exactly for ARM64?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "21k",
    "tags": [
        "assembly",
        "linux",
        "arm",
        "system-call"
    ],
    "user": "merrychap",
    "time": "May 23, 2018 at 13:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>arm64 syscall numbers are defined at: <a href=\"https://github.com/torvalds/linux/blob/v4.17/include/uapi/asm-generic/unistd.h\" rel=\"nofollow noreferrer\">https://github.com/torvalds/linux/blob/v4.17/include/uapi/asm-generic/unistd.h</a></p>\n<p>This is a bit confusing since it is quite different from x86 and x86_64 and arm 32-bit which define syscall numbers under <code>arch/</code>, e.g. <a href=\"https://github.com/torvalds/linux/blob/v4.17/arch/arm/tools/syscall.tbl\" rel=\"nofollow noreferrer\"><code>arch/arm/tools/syscall.tbl</code></a> for arm 32-bit, but the arm64 file has a comment saying:</p>\n<blockquote>\n<p>New architectures should use this file and implement the less feature-full calls in user space.</p>\n</blockquote>\n<p>so I'm guessing that it is just because aarch64 is new and used a newer more arch agnostic mechanism, while the old ones can never break userland compatibility and thus cannot be updated to the new mechanism.</p>\n<p>This is corroborated by the following minimal runnable aarch64 assembly Linux call example that works on QEMU and uses <code>64</code> for <code>write</code> and <code>93</code> for <code>exit</code>:</p>\n<p>main.S</p>\n<pre><code>.text\n.global _start\n_start:\n    /* write */\n    mov x0, #1\n    ldr x1, =msg\n    ldr x2, =len\n    mov x8, #64\n    svc #0\n\n    /* exit */\n    mov x0, #0\n    mov x8, #93\n    svc #0\nmsg:\n    .ascii \"hello world\\n\"\nlen = . - msg\n</code></pre>\n<p><a href=\"https://github.com/cirosantilli/arm-assembly-cheat/blob/4735730c384740405f4a521ed9aa7a6c827bce6d/v8/linux/hello.S\" rel=\"nofollow noreferrer\">GitHub upstream</a>.</p>\n<p>Assemble and run:</p>\n<pre><code>aarch64-linux-gnu-as -o main.o main.S\naarch64-linux-gnu-ld -o main.out main.o\nqemu-aarch64 main.out\n</code></pre>\n<p>Tested in Ubuntu 16.04 amd64.</p>\n<p><strong><code>strace</code> source code</strong></p>\n<p>This is a good place to easily cheat to check the syscall numbers, see: <a href=\"https://unix.stackexchange.com/questions/421750/where-do-you-find-the-syscall-table-for-linux/499016#499016\">https://unix.stackexchange.com/questions/421750/where-do-you-find-the-syscall-table-for-linux/499016#499016</a></p>\n<p>It also confirms what I said about newer archs seeming to have unified call numbers.</p>\n</div>",
            "votes": "13",
            "user": "Ciro Santilli OurBigBook.com",
            "time": "Sep 17, 2020 at 16:29",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Update</strong>: See <a href=\"https://reverseengineering.stackexchange.com/a/18834/21559\">this answer</a> for up-to-date information on where ARM64 syscall definitions are found. Note that the information below may just be for backwards-compatibility.</p>\n<hr/>\n<p>See <a href=\"https://github.com/torvalds/linux/blob/master/arch/arm64/include/asm/unistd32.h\" rel=\"nofollow noreferrer\"><code>arch/arm64/include/asm/unistd32.h</code></a>:</p>\n<pre><code> ...\n #define __NR_restart_syscall 0\n __SYSCALL(__NR_restart_syscall, sys_restart_syscall)\n #define __NR_exit 1\n __SYSCALL(__NR_exit, sys_exit)\n #define __NR_fork 2\n __SYSCALL(__NR_fork, sys_fork)\n #define __NR_read 3\n __SYSCALL(__NR_read, sys_read)\n #define __NR_write 4\n __SYSCALL(__NR_write, sys_write)\n #define __NR_open 5\n __SYSCALL(__NR_open, compat_sys_open)\n #define __NR_close 6\n __SYSCALL(__NR_close, sys_close)\n            /* 7 was sys_waitpid */\n __SYSCALL(7, sys_ni_syscall)\n #define __NR_creat 8\n __SYSCALL(__NR_creat, sys_creat)\n ...\n</code></pre>\n<p>You'll also find a few AArch64-specific syscalls in <a href=\"https://github.com/torvalds/linux/blob/master/arch/arm64/include/asm/unistd.h\" rel=\"nofollow noreferrer\"><code>arch/arm64/include/asm/unistd.h</code></a>.</p>\n</div>",
            "votes": "9",
            "user": "tonysdg",
            "time": "Jul 18, 2018 at 15:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ciro Santilli OurBigBook.com",
                    "text": "<span class=\"comment-copy\">I think the truly interesting file for arm64 is <code>include/uapi/asm-generic/unistd.h</code>: <a href=\"https://reverseengineering.stackexchange.com/a/18834/12321\">reverseengineering.stackexchange.com/a/18834/12321</a></span>",
                    "time": null
                },
                {
                    "user": "tonysdg",
                    "text": "<span class=\"comment-copy\">@CiroSantilli新疆改造中心六四事件法轮功: Huh -- I wonder what the files I linked are used for now? Perhaps the <code>glibc</code> version has something to do with it... anyways, based on your experimental results, the <code>asm-generic</code> file is likely correct.</span>",
                    "time": null
                }
            ]
        }
    ]
}