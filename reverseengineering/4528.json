{
    "title": "Is this just junk?",
    "link": "https://reverseengineering.stackexchange.com/questions/4528/is-this-just-junk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some decompiled code using Hex Rays. I can see that there is a memory copy operation but I am lost in what the code is trying to do after that with calls such as <code>_floatsidf</code>. What is this code trying to do ?</p>\n<pre><code>int __fastcall v6495(const void *a1, size_t a2)\n{\n  const void *v2; // r6@1\n  size_t v3; // r7@1\n  int v4; // r0@1\n  int v5; // r7@1\n  __int64 v6; // r8@1\n  int v7; // r1@1\n  int v8; // r0@1\n  __int64 v9; // r0@1\n  __int64 v10; // r0@1\n  __int64 v11; // ST00_8@1\n  int v12; // r1@1\n  int v13; // r0@1\n  __int64 v14; // r0@1\n  int v15; // r0@1\n  int v16; // r1@1\n  __int64 v17; // r0@1\n\n  v2 = a1;\n  v3 = a2;\n  gettimeofday(&amp;v824, 0);\n  pthread_mutex_lock((pthread_mutex_t *)(v217 + 110720));\n  v4 = v217;\n  *(_DWORD *)(v217 + 73728) = -2028273664;\n  memcpy((void *)(v4 + 73732), v2, v3);\n  pthread_cond_signal((pthread_cond_t *)(v217 + 110976));\n  pthread_cond_wait((pthread_cond_t *)(v217 + 111232), (pthread_mutex_t *)(v217 + 110720));\n  pthread_mutex_unlock((pthread_mutex_t *)(v217 + 110720));\n  v5 = v217;\n  gettimeofday(&amp;v825, 0);\n  LODWORD(v6) = _floatsidf(v825.tv_sec);\n  HIDWORD(v6) = v7;\n  v8 = _floatsidf(v825.tv_usec);\n  LODWORD(v9) = _divdf3(v8);\n  LODWORD(v10) = _aeabi_dadd(v6, v9);\n  v11 = v10;\n  LODWORD(v6) = _floatsidf(v824.tv_sec);\n  HIDWORD(v6) = v12;\n  v13 = _floatsidf(v824.tv_usec);\n  LODWORD(v14) = _divdf3(v13);\n  v15 = _aeabi_dadd(v6, v14);\n  LODWORD(v17) = _subdf3(v11, HIDWORD(v11), v15, v16);\n  unk_408D81C8 = v17;\n  return v5 + 73732;\n}\n</code></pre>\n<p>After the answer of <a href=\"https://reverseengineering.stackexchange.com/users/3473/blabb\">blabb</a>:</p>\n<p><code>v217</code> is initialised in a previous function where <code>v6520</code> is in the <code>.bss</code> segment.</p>\n<pre><code>int v3480()\n{\n  __int32 v0; // r0@1\n\n  v0 = time(0);\n  srand48(v0);\n  v877 = &amp;v3688;\n  v1277 = &amp;v7299;\n  v1634 = &amp;v5690;\n  v2042 = &amp;v7024;\n  v873 = &amp;v3688;\n  v872 = &amp;unk_40ABAFB5;\n  v1274 = &amp;v7299;\n  v485 = &amp;unk_40ABAFF5;\n  v1631 = &amp;v5690;\n  v1629 = &amp;unk_40ABAFD9;\n  v2037 = &amp;v7024;\n  v2038 = &amp;unk_40ABAFE9;\n  v5661 = -1;\n  v2325 = -1;\n  v1259 = -1;\n  v4048 = -1;\n  v5509 = &amp;v5497;\n  v3845 = &amp;unk_40ABAEEC;\n  v3522 = &amp;v4191;\n  v7253 = &amp;unk_40ABAEE4;\n  v2081 = &amp;v3009;\n  v5828 = &amp;unk_40ABAEDC;\n  v7014 = &amp;v2061;\n  v3636 = &amp;unk_40ABAED4;\n  v221 = &amp;v6523;\n  v218 = &amp;v6524;\n  v219 = &amp;v6525;\n  v217 = &amp;v6520;\n  v1455 = &amp;v6523;\n  unk_40ABAEF4 = &amp;v6524;\n  v7297 = &amp;dword_409581D0;\n  v5530 = &amp;dword_409581D0;\n  if ( dword_409581D0 )\n  {\n    v6935();\n  }\n  else\n  {\n    v4335();\n    dword_409581D0 = 1;\n  }\n  return 0;\n}\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "1k",
    "tags": [
        "decompilation"
    ],
    "user": "allbabel",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Check the <code>unk_408D81C8 = v17;</code> just one line before the return - this sets a global variable. So, the part after the mutex may not contribute to the result of the function, but ut's certainly not junk. Since the code does a gettimeofday() before and after the mutex, and the 'junk' does some calculations with the results, i <i>guess</i> it's calculating the time spent in the mutex and storing that into the global variable at 408D81C8 - i didn't take the time to really understand the code, though.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Is this just junk?</strong> No.</p>\n<p><strong>What does _floatsidf do?</strong> It converts an integer to a double in a software floating point implementation.</p>\n<p>Firstly, the Hex-Rays decompiler produces C-like pseudocode. What you're looking at is not the code. In some cases, like this, it would be easier to reverse it by reading the assembly. A lot of what you see is junk, because there are decompilation artefacts introduced by the decompiler. I suggest that you first learn how the assembly works, then learn how to use the decompiler interactively to fix the artefacts.</p>\n<h2>Decompiler Artefacts</h2>\n<h3>Incorrect Return Types</h3>\n<pre><code>LODWORD(v6) = _floatsidf(v825.tv_sec);\nHIDWORD(v6) = v7;\n</code></pre>\n<p>The variable <code>v7</code> is not initialised. Looking at the declaration, we can see that it's a value from <code>r1</code>:</p>\n<pre><code>int v7; // r1@1\n</code></pre>\n<p>Because the <code>_floatsidf</code> function returns a <code>double</code> split across <code>r0</code> and <code>r1</code>, and Hex-Rays is not aware of this, it doesn't represent this correctly. Those two lines would be better written as:</p>\n<pre><code>v6 = _floatsidf(v825.tv_sec);\n</code></pre>\n<h3>Incorrect Argument Types</h3>\n<p>Let's skip down a bit:</p>\n<pre><code>LODWORD(v9) = _divdf3(v8);\n</code></pre>\n<p>A quick web search shows that <code>_divdf3</code> does floating point division, and takes two arguments. Hex-Rays has discarded the second argument, so you can't know what it is.</p>\n<p><code>_subdf3</code> also takes two arguments, not four, which is another decompiler artefact (two 64-bit arguments have been split into four 32-bit arguments).</p>\n<p>Finally, a search for <code>_aeabi_dadd</code> reveals that it is an alias for <code>adddf3</code>, which performs addition.</p>\n<h2>What is this code trying to do?</h2>\n<pre><code>// v217 relative globals\nint dword_12000;\nchar buf_12004[???];\npthread_mutex_t mutex_1b080;\npthread_cond_t cond_1b180;\npthread_cond_t cond_1b280;\n\nint __fastcall v6495(const void *data, size_t length) {\n\n    gettimeofday(&amp;g_start_time, 0);\n\n    pthread_mutex_lock(&amp;mutex_1b080);\n    dword_12000 = 0x871b0000;\n    memcpy(buf_12004, data, length);\n    pthread_cond_signal(&amp;cond_1b180);\n    pthread_cond_wait(&amp;cond_1b280, &amp;mutex_1b080);\n    pthread_mutex_unlock(&amp;mutex_1b080);\n\n    gettimeofday(&amp;g_end_time, 0);\n\n    double v11 = (double)(g_end_time.tv_sec) + (double)(g_end_time.tv_usec) / ???;\n    double v15 = (double)(g_start_time.tv_sec) + (double)(g_start_time.tv_usec) / ???;\n    unk_408D81C8 = v11 - v15;\n\n    return buf_12004;\n}\n</code></pre>\n<p>The question marks have been destroyed during decompilation, but inferring from the context, they're probably <code>1000000.0</code>, and <code>unk_408D81C8</code> is probably the time elapsed in seconds.</p>\n<p>Please don't ask questions like this. Questions like \"What is this code trying to do ?\" or \"Is this junk?\" contribute very little to this community, and feels a bit like the \"please do my homework\" questions from Stack Overflow. A more helpful question might be \"How can you reverse ARM soft-float using Hex-Rays?\"</p>\n</div>",
            "votes": "3",
            "user": "Dougall",
            "time": "Jun 11, 2014 at 0:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://opensource.apple.com/source/clang/clang-503.0.38/src/projects/compiler-rt/lib/floatsidf.c\" rel=\"nofollow\">http://opensource.apple.com/source/clang/clang-503.0.38/src/projects/compiler-rt/lib/floatsidf.c</a></p>\n<blockquote>\n<pre><code>//===-- lib/floatsidf.c - integer -&gt; double-precision conversion --*- C -*-===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n//\n// This file implements integer to double-precision conversion for the\n// compiler-rt library in the IEEE-754 default round-to-nearest, ties-to-even\n// mode.\n//\n//===----------------------------------------------------------------------===//\n\n#define DOUBLE_PRECISION\n#include \"fp_lib.h\"\n\n#include \"int_lib.h\"\n\nARM_EABI_FNALIAS(i2d, floatsidf)\n\nfp_t __floatsidf(int a) {\n\n    const int aWidth = sizeof a * CHAR_BIT;\n\n    // Handle zero as a special case to protect clz\n    if (a == 0)\n        return fromRep(0);\n\n    // All other cases begin by extracting the sign and absolute value of a\n    rep_t sign = 0;\n    if (a &lt; 0) {\n        sign = signBit;\n        a = -a;\n    }\n\n    // Exponent of (fp_t)a is the width of abs(a).\n    const int exponent = (aWidth - 1) - __builtin_clz(a);\n    rep_t result;\n\n    // Shift a into the significand field and clear the implicit bit.  Extra\n    // cast to unsigned int is necessary to get the correct behavior for\n    // the input INT_MIN.\n    const int shift = significandBits - exponent;\n    result = (rep_t)(unsigned int)a &lt;&lt; shift ^ implicitBit;\n\n    // Insert the exponent\n    result += (rep_t)(exponent + exponentBias) &lt;&lt; significandBits;\n    // Insert the sign bit and return\n    return fromRep(result | sign);\n}\n</code></pre>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jun 4, 2014 at 19:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "allbabel",
                    "text": "<span class=\"comment-copy\">This did answer the initial question so I wish I could give you that but I think the initial question was wrongly expressed.  I am trying to work out what the code does and have amended the question accordingly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You may need to find where <code>v217</code>  is initialized </p>\n<p>From a fleeting glance, it appears to be junk as all the function does seem to be returning.</p>\n<p><code>v5 + const</code> where <code>v5 = v217</code> which doesn't seem to be initialized.</p>\n<p>By the way, Google first hit returns source code for <code>_floatsidf</code> and LLVM <code>intodpfloat()</code> function.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 4, 2014 at 21:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "allbabel",
                    "text": "<span class=\"comment-copy\">I have amended the post, v217 is initialised before this function.  So if this is obfuscation is it junk code insertion?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the function you added does not seem to have any relation with the first function the value that is iinitialised may be same or may be different logically  you should be looking at a sequence that should be  v 217 = SOMETHING; tonnes of junk that doesnt alter v217 in between ;call FunctionThatUsesV217(a,b......z) { };</span>",
                    "time": null
                }
            ]
        }
    ]
}