{
    "title": "HTML/JS app - getting a reference to an element which is not part of the DOM",
    "link": "https://reverseengineering.stackexchange.com/questions/31345/html-js-app-getting-a-reference-to-an-element-which-is-not-part-of-the-dom",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to debug an app which I don't own which uses HTML5 and JS, which displays a video stream.  The issue is that the video stutters when viewed in high resolution.</p>\n<p>Note that the code is obfuscated, but has been prettyfied which helps a little.  So far using Chrome developer tools and by injecting listeners I have determined that the video is being displayed in a <code>&lt;canvas&gt;</code> element.  From my research, I have determined that displaying video content in <code>&lt;canvas&gt;</code> requires the use of <code>&lt;video&gt;</code>, where the data taken from the video element is manipulated and written on to the <code>&lt;canvas&gt;</code>.</p>\n<p>My problem is that I want to get a reference to the <code>&lt;video&gt;</code> element, which apparently is not a part of the DOM.  The use of Chrome developer tools reveals no such element, nor does <code>getElementsByTagName()</code>.  I find clues in the code which indicate a <code>&lt;video&gt;</code> element most likely exists, so my conclusion is that it is just used in memory as a tool and is not added to the DOM.</p>\n<p>Does anyone have any suggestions as to how I can get a reference to this element?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "70",
    "tags": [
        "javascript"
    ],
    "user": "KevinHJ",
    "time": "Jan 2, 2023 at 14:34",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li><p>Look for any requests to <code>document.createElement</code> or <code>document.createElementNS</code> in the code that may be creating and appending the <code>&lt;video&gt;</code> element to the DOM. You might be able to locate the <code>&lt;video&gt;</code> element by searching the child nodes of its parent element.</p>\n</li>\n<li><p>Look for any event listeners associated with the <code>&lt;video&gt;</code> element. For example, if the <code>&lt;video&gt;</code> element has a onended event listener, you could try triggering it and seeing if it produces any output in the console or other visible effects.</p>\n</li>\n<li><p>Search the code for any mentions of the <code>&lt;video&gt;</code> element. You might notice references to an attribute in the code, for instance, if the <code>src</code> attribute of the <code>&lt;video&gt;</code> element is set dynamically.</p>\n</li>\n<li><p>You might be able to locate the <code>&lt;video&gt;</code> element by looking for it in the virtual DOM or component tree if the code makes use of a JavaScript library or framework (like React or Angular).</p>\n</li>\n<li><p>If the <code>&lt;video&gt;</code> element is being used to display a video stream from a server, you may be able to locate it by inspecting the network traffic in the developer tools. For example, if the video stream is served via the HTML5 <code>MediaSource</code> API, network requests for video segments should be visible in the network panel.</p>\n</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "r0xdeadbeef",
            "time": "Jan 3, 2023 at 2:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}