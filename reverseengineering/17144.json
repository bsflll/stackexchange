{
    "title": "Objective-C disassembling - I dont understand this code",
    "link": "https://reverseengineering.stackexchange.com/questions/17144/objective-c-disassembling-i-dont-understand-this-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I assembled a simple objective-c file that prints hello to the screen. this is the code:</p>\n<pre><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n    NSString* a = [NSString stringWithUTF8String: \"hi\"];\n    NSLog(a);\n    return 0;\n}\n</code></pre>\n<p>When I assembled it and converted it into Nasm syntax, this is the output:</p>\n<pre><code>section .text\ndefault rel\nextern _OBJC_CLASS_$_NSString\nextern _NSLog\nextern _objc_msgSend   \nglobal _main \n_main:   \n    push rbp \n    mov rbp, rsp \n    sub rsp, 16 \n    lea rdx, [ L_.str] \n    mov dword [rbp - 4], 0\n    mov rax, qword [ L_OBJC_CLASSLIST_REFERENCES_$_] \n    mov rsi, qword [ L_OBJC_SELECTOR_REFERENCES_]\n    mov rdi, rax \n    call    _objc_msgSend \n    mov qword [rbp - 16], rax \n    mov rax, qword [rbp - 16] \n    mov rdi, rax ; rdi has rax\n    mov al, 0 \n    call    _NSLog \n    xor eax, eax \n    add rsp, 16 \n    pop rbp \n    ret \n\nsegment __DATA,__objc_classrefs\nL_OBJC_CLASSLIST_REFERENCES_$_: dq  _OBJC_CLASS_$_NSString\n\n    segment __TEXT,__cstring\nL_.str: db  \"hi\"\n\n    segment .__TEXT,.__objc_methname\nL_OBJC_METH_VAR_NAME_:   db \"stringWithUTF8String:\"\n\n    segment __DATA,__objc_selrefs\nL_OBJC_SELECTOR_REFERENCES_: dq L_OBJC_METH_VAR_NAME_\n\n    segment __DATA,__objc_imageinfo\nL_OBJC_IMAGE_INFO:\n    dd  0\n    dd  64\n</code></pre>\n<p>I understand most of it, like the different objc segments, but I dont understand things like <code>mov   rax, qword [rbp - 16]</code> or even <code>mov al, 0</code>. This is 64 bit assembly code so why is the register <code>al</code> referenced? and why is <code>[rbp-16]</code> stored into <code>rax</code>?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "731",
    "tags": [
        "osx",
        "nasm"
    ],
    "user": "Camden",
    "time": "Jan 8, 2018 at 1:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The instructions</p>\n<pre><code>mov qword [rbp - 16], rax \nmov rax, qword [rbp - 16] \n</code></pre>\n<p>are created by the compiler which is using <a href=\"https://en.wikipedia.org/wiki/Stack-based_memory_allocation\" rel=\"noreferrer\">stack based memory allocation</a> to store the result from the NSString objc call. If you compile with optimizations, the compiler should eliminate the need to store the value in stack altogether.</p>\n<p>The </p>\n<pre><code>mov al, 0\n</code></pre>\n<p>is set as an input to the NSLog function which is a variadic function so it needs a way to determine how many variables are stored in vector registers (<code>xmm</code>/<code>ymm</code>) vs general purpose ones (e.g. <code>rdi</code>, <code>rsi</code>, etc.) when processing the input arguments. Since the number of vector registers is far less than 256, it only needs to use 8-bits and will only look at <code>al</code>. This saves a bit of space in code utilization as the <code>mov al, xx</code> operation only takes 2 bytes.</p>\n</div>",
            "votes": "5",
            "user": "cimarron",
            "time": "Jan 8, 2018 at 5:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Camden",
                    "text": "<span class=\"comment-copy\">So mov qword [rbp - 16], rax moves the NSString into rax?</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">It's the other way around. <code>mov qword [rbp - 16], rax</code> moves the value in <code>rax</code> into the stack memory. <code>rax</code> holds the value returned from the objc call which is a pointer to a NSString instance</span>",
                    "time": null
                },
                {
                    "user": "Camden",
                    "text": "<span class=\"comment-copy\">so why is there a <code>mov rax, qword [ rbp - 16 ]</code>? wouldnt that be the opposite?</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">Yes, first it saves the return value to memory and then loads it back up into <code>rax</code>. The compiler is just basically translating operations it has identified without trying to optimize anything which is why it is so inefficient.</span>",
                    "time": null
                }
            ]
        }
    ]
}