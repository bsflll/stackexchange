{
    "title": "What C construct could generate this assembly sequence?",
    "link": "https://reverseengineering.stackexchange.com/questions/3811/what-c-construct-could-generate-this-assembly-sequence",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following disassembly:</p>\n<pre><code>mov BL, [EAX]\ninc EAX\nmov [EDX], BL\ninc EDX\n</code></pre>\n<p>I could see this being the result of:</p>\n<pre><code>uint8_t foo = bar;\n++bar;\nuint8_t tmp = foo;\n++foo;\n</code></pre>\n<p>But this assumes C99. Is there some other C construct that could produce the code above?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "391",
    "tags": [
        "disassembly",
        "x86",
        "static-analysis",
        "c"
    ],
    "user": "avgvstvs",
    "time": "Mar 6, 2014 at 19:07",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">The infamous <code>strcpy</code> loop, <code>*dst++ = *src++</code> ?</span>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<span class=\"comment-copy\">What's tripping me up is that I had thought that the MOV instruction was limited so that the operands had to have the same size?  This looks like I'm asking \"Move a 32b value into the lower 8b of the EBX register.\"</span>",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\"><code>[EDX]</code> does not stand for \"the EDX register\". It stands for \"the address pointed to by the EDX register\". The constrained you mentioned is valid, and in this case the instruction <code>mov [EDX], BL</code> is interpreted as \"move the lowest byte of the <code>EBX</code> register to the byte at the address pointed to by (the value of) the <code>EDX</code> register.\"</span>",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "<span class=\"comment-copy\">DCoder, would you care to post your comment as an answer so I can give due credit?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you just want the answer without the explanation, scroll to the bottom of this post.</p>\n<hr/>\n<p>The <code>[register]</code> notation stands for \"<em>take the value stored in <code>register</code> and interpret it as an address</em>\". If the addressed entity size is ambiguous, it can be clarified using <code>DWORD PTR [register]</code> for <code>DWORD</code>-sized pointers (and similarly for other pointer sizes).</p>\n<blockquote>\n<pre><code>mov BL, [EAX]\n</code></pre>\n</blockquote>\n<p>This line treats the value in the <code>EAX</code> register as a pointer to a single byte (the size of <code>BL</code>), reads a byte from that address and stores it in <code>BL</code>. </p>\n<blockquote>\n<pre><code>inc EAX\n</code></pre>\n</blockquote>\n<p>This line increments the value of <code>EAX</code>, effectively advancing to the next byte.</p>\n<blockquote>\n<pre><code>mov [EDX], BL\n</code></pre>\n</blockquote>\n<p>This line treats the value in the <code>EDX</code> register as a pointer to a single byte (again, the size of the other operand tells us this), and writes a byte that is stored in <code>BL</code> to that address.</p>\n<blockquote>\n<pre><code>inc EDX\n</code></pre>\n</blockquote>\n<p>This line increments the value of <code>EDX</code>, advancing to the next byte.</p>\n<p>With all this information, we can see that this sequence basically copies a byte from one address to another. Most likely it is used in a loop such as string copy or memory copy. If there's a line similar to <code>test BL, BL</code> afterwards to determine if the copied byte was NULL, it's most likely a string copy; if there's a length/address check instead - it's probably a memory/buffer copy that works on a specified amount of bytes.</p>\n<hr/>\n<p>In C parlance, this can be represented as:</p>\n<pre><code>char t; // BL\nchar *src; // EAX\nchar *dst; // EDX\n\n// initialize src and dst here\n\nt = *src;\n++src;\n*dst = t;\n++dst;\n</code></pre>\n<p>Or, as K&amp;R put it ever so tersely:</p>\n<pre><code>*dst++ = *src++;\n</code></pre>\n</div>",
            "votes": "6",
            "user": "DCoder",
            "time": "Mar 10, 2014 at 17:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}