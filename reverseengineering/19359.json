{
    "title": "How to calculate checksum from known data? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/19359/how-to-calculate-checksum-from-known-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2018-10-29 09:11:10Z\">6 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/19359/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm trying to create the algoritm to produce the actual checksum byte (D0) in a vehicle 11-bit CAN bus message, where all values are known by scanning the current bus (which I'm trying to replicate with other values, but I cant find the mathematical relation between data and checksum byte).<br/><br/></p>\n<p>here are the sample data (in hex): <br/>\n<strong>D0    D1  D2  D3  D4  D5  D6  D7</strong> <br/>\n9F  70  FC  70  FC  0D  0F  00 <br/>\nA9  7A  FC  70  FC  0D  0F  00 <br/>\nAA  7B  FC  70  FC  0D  0F  00 <br/>\nAB  7C  FC  70  FC  0D  0F  00 <br/>\nAB  7C  FC  70  FC  0D  0F  00 <br/>\n0D  7D  FC  70  FC  0D  0F  60 <br/>\n0E  7E  FC  70  FC  0D  0F  60 <br/>\n09  79  FC  70  FC  0D  0F  60 <br/>\n0A  7A  FC  70  FC  0D  0F  60 <br/>\n0B  7B  FC  70  FC  0D  0F  60 <br/><br/>\nSome more data with the same checksum(0xFF) at D0:<br/>\n<strong>D0    D1  D2  D3  D4  D5  D6  D7</strong> <br/>\nFF  70  FC  70  FC  0D  0F  60 <br/>\nFF  74  F9  70  F9  0D  0F  62 <br/>\nFF  17  01  20  01  0D  0F  02 <br/>\nFF  AE  0D  70  0D  0D  0F  02 <br/>\nFF  13  13  0   13  0D  0F  02 <br/>\nFF  B8  10  60  10  0D  0F  02 <br/>\nFF  56  11  C0  11  0D  0F  02 <br/>\nFF  0D  2D  D0  2E  0D  0F  02 <br/><br/>\nSome more with another known and same checksum (0x16):<br/>\n<strong>D0    D1  D2  D3  D4  D5  D6  D7</strong> <br/>\n16  7E  FF  70  FF  0D  0F  62 <br/>\n16  7E  FF  70  FF  0D  0F  62 <br/>\n16  F0  03  50  0B  0D  0F  02 <br/>\n16  78  13  B0  13  0D  0F  02 <br/>\n16  F9  2E  00  27  0D  0F  02 <br/>\n16  EE  FF  60  FF  0D  0F  02 <br/> <br/> <br/></p>\n<p>D0 = checksum <br/>\nD1,D2,D3,D4 = torque values (critical) <br/>\nD5 = Engine coolant temp <br/>\nD6,D7 = No important engine data <br/> <br/></p>\n<p>Anyone?</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "497",
    "tags": [
        "crc"
    ],
    "user": "N.C",
    "time": "6 years ago",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">Having so many messages with the same checksum strikes me as odd. I tried typical bytewise addition and it gets you close, but it's always off by a bit. For example for the 0x16 messages I can calculate 0x6A and 0x6C. If they were the same you could just assume a hidden constant and fix it but it's odd. Xor seems to perform worse. I don't think it's a complex algorithm but I can't figure it out.</span>",
            "time": null
        },
        {
            "user": "Twifty",
            "text": "<span class=\"comment-copy\">It's obviously not a checksum if the following bytes are different for the same initial value. It looks more like a control/message/id byte to me.</span>",
            "time": null
        },
        {
            "user": "N.C",
            "text": "<span class=\"comment-copy\">I think it is: ((D1+D2+D3+D4+D5+D6+D7)-85)&amp;0xFF, I will verify it today, but sometimes it does not match, like +/-1 what it should be, very strange.</span>",
            "time": null
        },
        {
            "user": "N.C",
            "text": "<span class=\"comment-copy\">((D1+D2+D3+D4+D5+D6+D7)-85)&amp;0xFF, getting close, but it is not the correct method.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>OP was getting close with <code>D0=((D1+D2+D3+D4+D5+D6+D7)-85)&amp;0xFF</code>. That's not the correct method (sometimes it's off by 1), but consider the values of <code>(D1+D2+D3+D4+D5+D6+D7)-D0</code>: for the given data, it has the values <code>['-0xa8', '0x57', '0x156', '0x255', '0x354']</code>.</p>\n<p>What's the common property? Yes, they're all divisible by <code>0xFF</code> when subtracted by <code>0x57</code>.</p>\n<p>Therefore, the checksum byte is the sum of all bytes, subtract <code>0x57</code>, modulo <code>0xFF</code>, then if the result is <code>0</code> then replace it with <code>0xFF</code>. (alternatively this can be written as <code>(sum - 0x58) % 0xFF + 1</code>)</p>\n<p>It is impossible for the checksum byte to be 0.</p>\n</div>",
            "votes": "1",
            "user": "user202729",
            "time": "Oct 26, 2018 at 13:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}