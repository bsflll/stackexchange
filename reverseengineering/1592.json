{
    "title": "Where can I learn more about black-box fuzzing of small embedded systems?",
    "link": "https://reverseengineering.stackexchange.com/questions/1592/where-can-i-learn-more-about-black-box-fuzzing-of-small-embedded-systems",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://en.wikipedia.org/wiki/Fuzz_testing\">Fuzzing</a> has become a very common place technique used for software testing and is heavily used to find security problems. There are many frameworks (<a href=\"https://github.com/OpenRCE/sulley\">sully</a>, <a href=\"http://peachfuzzer.com/\">Peach Fuzzer</a> etc.) that are geared up for fuzzing large, complex software systems. I have not found much information about fuzzing of smaller, simpler embedded systems (generally those that are small and simple enough to not run an OS).</p>\n<p>These small systems are found everywhere - RFID card readers, burglar alarm systems, keyless entry systems, engine control units, HVAC controls, and so on. They frequently have very limited inputs and outputs (buttons, keypads, small character displays, LEDs, buzzers, RF communications). Complex networking (Ethernet, TCP/IP), serial ports etc. are rare.</p>\n<p>I have had good success employing fuzzing like techniques to find security problems and see how the system behaves. Currently, this has largely comprised of fuzzing the formatting of packets sent into the system, based on observations of genuine packets. Some examples:</p>\n<ul>\n<li>Using fuzzing to determine the structure of packets - sometimes you know\nthe approximate packet format, but things like ID bits, checksums\netc. are not always certain if you only have a small number of\ngenuine devices or sampled transmissions. </li>\n<li>Finding problems in packet\ndecoding when packets are longer than expected - simple things like\nsetting variable packet lengths to higher than expected values.</li>\n<li>Finding limits of acceptable transmissions - things like\nretransmission are common in one-way RF systems. What is the smallest\nnumber of packets that will register as a correct transmission? How\nmuch can we vary the baud rate (i.e. is there good clock recovery in\nthe receiver). </li>\n<li>Finding the limits of jamming detection. How far can\nwe push the system before jamming is detected? Finding undocumented\nfeatures - for example, if 00 is arm, 01 is disarm, 10 is part-arm,\nwhat does 11 do?</li>\n</ul>\n<p>One of the biggest challenges I have found is methods to detect the state of the system. This has generally ended up with a hodge-podge of outputs taken from LEDs, LCD buses and so on. I have been using Arduino and Arduino-like boards for the inputs and outputs (generally a <a href=\"http://www.pjrc.com/teensy/\">Teensy 2.0</a>). I also often need to include a method to power cycle the system in the event of a crash.</p>\n<p>What I have been surprised by is that I cannot find many others performing work or research in this area. I'm largely making this up as I go along.</p>\n<p>So, the questions are:</p>\n<ul>\n<li>Are there any resources out there along these lines? </li>\n<li>Can any of the complex fuzzing frameworks be used for this application?</li>\n</ul>\n<p>(as an aside, I don't think this is a failure to google. Similar concepts include \"glitching\" and \"fault injection\", but I believe this to be distinct)</p>\n<p>I have seen this training available:\n<a href=\"https://www.blackhat.com/us-13/training/peach-fuzzer-embedded-edition.html\">https://www.blackhat.com/us-13/training/peach-fuzzer-embedded-edition.html</a></p>\n</div>",
    "votes": "15",
    "answers": 2,
    "views": "4k",
    "tags": [
        "hardware",
        "fuzzing"
    ],
    "user": "Cybergibbons",
    "time": "Apr 5, 2013 at 14:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Peach is excellent at fuzzing smaller embedded systems.  The configuration and detection is the big difference for embedded systems.  This tends to change device to device, but one of my most used tools is the Cana Kit Relay Controller (<a href=\"http://www.canakit.com/4-port-usb-relay-controller.html\">http://www.canakit.com/4-port-usb-relay-controller.html</a>).  Peach has a monitor module that is able to trigger the relays.  I use this to turn devices on/off, or simulate a USB cable being plugged in/out, etc.</p>\n<p>From there you need to handle detection.  This will differ widely between device.  Sometimes you can use JTAG, other times I have hooked up photo sensors to read LED's with the help of a small board such as the Teensy.  With networked devices, usually a ping is a good starting point.</p>\n<p>One advantage with Peach is adding a module to detect faults or perform device resets is easy if you have some basic coding experience.</p>\n<p>When setup correctly you should be able to perform long term device fuzzing.  This means the fuzzer is able to restart the device when a fault is identified or the device is unresponsive, and able to detect failure states that could be interesting to further research.</p>\n</div>",
            "votes": "7",
            "user": "Michael Eddington",
            "time": "Apr 5, 2013 at 20:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">Do you have more detail on controlling the output from Peach, say, working with the Teensy?</span>",
                    "time": null
                },
                {
                    "user": "Michael Eddington",
                    "text": "<span class=\"comment-copy\">The Teensy is easy to interface with over <a href=\"http://www.pjrc.com/teensy/usb_serial.html\" rel=\"nofollow noreferrer\">USB Serial</a>.  Peach 3 has a serial port Publisher (I/O interface) for sending fuzzed data and receiving a response back.  This is an easy way to interface.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You seem to be on the right track. As @Michael Eddington pointed out Peach is excellent at fuzzing embedded systems (not just to smaller simple ones in my experience). I have similar experience using it with a variety of methods to check if the device is still alive such as a simple ICMP message if it's networked, JTAG responses, or just a change in serial output when doing for example secure boot glitching. More advanced would be looking at for example a change in the power profile to detect a successful attack.</p>\n<p>Regarding fault injection you can extract some ideas regarding setups by reading papers from conferences like <a href=\"http://conferenze.dei.polimi.it/FDTC13/\" rel=\"nofollow\">FDTC</a>, <a href=\"http://cosade.org/\" rel=\"nofollow\">Cosade</a> and the like.</p>\n</div>",
            "votes": "2",
            "user": "ixje",
            "time": "Apr 6, 2013 at 8:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}