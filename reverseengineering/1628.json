{
    "title": "How to see what data is being transmitted when an application calls home?",
    "link": "https://reverseengineering.stackexchange.com/questions/1628/how-to-see-what-data-is-being-transmitted-when-an-application-calls-home",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Always wondered how it would be possible to see what data is being transmitted back and forth with an application that calls home.</p>\n<p>Let's say we emulate the server via host file redirect. Would it be possible to see what requests are being made by the application?</p>\n<p>Also is it possible at all to intercept the response(and view data) from the real server before it reaches the application?</p>\n</div>",
    "votes": "15",
    "answers": 7,
    "views": "11k",
    "tags": [
        "tools",
        "windows",
        "security",
        "php",
        "serial-communication"
    ],
    "user": "GuYY",
    "time": "Apr 6, 2013 at 13:57",
    "comments": [
        {
            "user": "RobotHumans",
            "text": "<span class=\"comment-copy\">Everything here seems to be HTTP inspection related.  For more custom protocols, you could hook ws32.recv and ws32.send respectively as well.  I don't think it's a full on answer, but it's an option that bears noting I think.</span>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">@CallmeV I don't see anything HTTP-specific in the question or answers.</span>",
            "time": null
        },
        {
            "user": "RobotHumans",
            "text": "<span class=\"comment-copy\">@JonathonReinhart - clarification: many of the answers refer to mostly web proxies</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You may capture the traffic with packet sniffer to capture all the communications of client\\server application, or You may use reverse proxy to intercept and alter data in real time.</p>\n<p>In simple words, network sniffers allow You to see data flow between client and server, analyse it and reverse the protocol communications\nReverse proxy intercept communication between client and server, allow alter the requests and re-send them, manipulate and examine in real time.</p>\n<p><strong>Network sniffers:</strong></p>\n<p><a href=\"https://www.wireshark.org/\">WireShark</a> </p>\n<p><a href=\"http://www.tcpdump.org/\">tcpdump</a></p>\n<p><a href=\"https://www.winpcap.org/windump/\">WinDump</a></p>\n<p><strong>Reverse Proxy:</strong></p>\n<p><a href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\">ZAP (OWASP Project)</a></p>\n<p><a href=\"https://code.google.com/p/vulture/downloads/list\">Vulture</a></p>\n<p><a href=\"http://www.portswigger.net/burp/help/proxy.html\">Burp Proxy</a></p>\n<p><a href=\"https://fiddler2.com/fiddler2/\">Fiddler</a> (most recommended for Web\\malware analysis)</p>\n<p>You may see <strong>samples of successful use of such technique</strong> here:</p>\n<p><a href=\"http://gursevkalra.blogspot.co.il/2011/06/intercepting-blackberry-application.html\">Intercepting Blackberry Application Traffic</a> </p>\n<p><a href=\"http://www.randomsync.net/2010/07/intercepting-ssl-traffic-using.html\">Intercepting SSL traffic using WebScarab</a> </p>\n<p><a href=\"http://www.thesprawl.org/research/ios-data-interception/\">iOS data interception</a></p>\n</div>",
            "votes": "19",
            "user": "Denis Laskov",
            "time": "Apr 6, 2013 at 14:22",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a couple of ways that come to mind. The first would be to use a network packet analyzer on the actual client running the application. Some well known packet analyzers are <a href=\"http://www.wireshark.org/\">Wireshark</a>, <a href=\"http://www.tcpdump.org/\">tcpdump</a>, and even <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=4865\">Microsoft Network Monitor</a>.</p>\n<p>Another alternative would be to intercept the traffic via man-in-the-middle (M. The easiest way to do this (if you control the client) is to turn your Linux based laptop into a wireless access point, and intercept the client's traffic, analyze it, and route it to the internet. This will require 2 network cards, at least one of them being a wireless card.</p>\n<p>Here's a tutorial to get you started on performing a mitm attack in this manner:\n<a href=\"http://www.backtrack-linux.org/forums/showthread.php?t=1939\">http://www.backtrack-linux.org/forums/showthread.php?t=1939</a></p>\n<p>Or <a href=\"http://mitmproxy.org/\">mitmproxy</a> is another great tool to accomplish this (and they support SSL), and have lots of examples on their website.</p>\n</div>",
            "votes": "7",
            "user": "Mick",
            "time": "Apr 6, 2013 at 14:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Just before posting this answer I realized he's asking how to do this on windows and my answers is for Mac. I'm posting it regardless because I believe it might be useful for others trying to perform the same thing but then using a Mac</strong></p>\n<p>If you're using a Mac, then it's really easy by the combination of a Remote Virtual Interface (rvi) and Wireshark. Note that this does not work if your application uses HTTP/SSL, in that case do what @MickGrove suggests and perform a MITM.  </p>\n<p>Assume you do have a mac, try this:</p>\n<ol>\n<li>Connect your phone/ipad/ipod via USB</li>\n<li>Go to system information (use Spotlight or via Apple Logo -&gt; about this mac) and under hardware-&gt;USB  find your iphone and copy the Serial Number (it's a long hex number)</li>\n<li>Open a terminal and type <code>rvictl -s &lt;serialnumber&gt;</code> This will create a network interface called rvi0.</li>\n<li>Open wireshark and start sniffing on rvi0</li>\n<li>Once done type <code>rvictl -x &lt;serialnumber&gt;</code> to remove the interface</li>\n</ol>\n</div>",
            "votes": "5",
            "user": "ixje",
            "time": "Apr 6, 2013 at 14:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the network traffic is in \"plain text\" (not encrypted) then a network sniffer such as Wireshark is ideal.</p>\n<p>If the network traffic is encrypted via SSL but you have the private key (or if the client application does not validate the server's public key) then you can use a proxy such as <a href=\"http://www.portswigger.net/burp/\" rel=\"noreferrer\">Burp</a>.</p>\n<p>If the network traffic is encrypted via SSL and you don't have the private key readily available and the client validates the server's public key then you can use a program such as <a href=\"http://www.bindshell.net/tools/echomirage.html\" rel=\"noreferrer\">Echo Mirage</a>, which hooks Winsock's send and receive functions, thus giving you access to the plain text before it's encrypted and after it's decrypted.</p>\n<p>Alternatively, if network traffic is encrypted using something other than SSL then you'd need to reverse engineer the client software to determine how the encryption and decryption are performed. Your best bet would be to find cross-references to Winsock's send and receive functions and determine how the client encrypts the data before sending it and decrypts it after receiving it.</p>\n</div>",
            "votes": "5",
            "user": "Jason Geffner",
            "time": "Apr 9, 2013 at 1:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another option that's pointed out in the comments above by @CallMeV is to use hooking.  On Windows you may look at using <a href=\"http://easyhook.codeplex.com/\" rel=\"nofollow\">EasyHook</a>.</p>\n</div>",
            "votes": "4",
            "user": "mrduclaw",
            "time": "Apr 9, 2013 at 6:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can add the HTTP proxy <a href=\"http://www.fiddler2.com/fiddler2/\" rel=\"nofollow\" title=\"Fiddler\">Fiddler</a> to the list if they use a HTTP protocol</p>\n</div>",
            "votes": "1",
            "user": "rslite",
            "time": "Apr 6, 2013 at 14:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, do you know what is the IP address or domain which the malware is trying to call home?\nIf you do, you can try changing the hosts file located at <code>%systemroot%\\system32\\drivers\\etc\\</code>. That way, it won't be able to call home.</p>\n<p>Then use Wireshark to sniff the traffic.\nOnce you know the IP address and the port number, you can use the filters to make it more appeasing to the eyes and easier to find the information that you require.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 7, 2013 at 15:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">A better method would be a transparent proxy which also intercepts the DNS queries. I am aware of such systems that have been used at the anti-malware company for which I work. It was proprietary, however.</span>",
                    "time": null
                },
                {
                    "user": "Gilles 'SO- stop being evil'",
                    "text": "<span class=\"comment-copy\">I wouldn't do this with malware: you aren't preventing it from phoning home unless you're absolutely sure it won't contact other hosts than the one you blocked (and if it tries IP addresses, changing <code>hosts</code> won't help a bit). And this isn't a very useful approach anyway, since preventing the application from phoning home is likely to inhibit the interesting behaviors you're trying to observe — if it can't initiate the connection, there won't be any traffic to sniff.</span>",
                    "time": null
                }
            ]
        }
    ]
}