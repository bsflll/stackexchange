{
    "title": "Is this anti-tamper solution fool-proof?",
    "link": "https://reverseengineering.stackexchange.com/questions/13709/is-this-anti-tamper-solution-fool-proof",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://libreboot.org/faq/#intelme\" rel=\"nofollow\">https://libreboot.org/faq/#intelme</a></p>\n<blockquote>\n<p>Introduced in June 2006 in Intel's 965 Express Chipset Family of (Graphics and) Memory Controller Hubs, or (G)MCHs, and the ICH8 I/O Controller Family, the Intel Management Engine (ME) is a separate computing environment physically located in the (G)MCH chip.</p>\n</blockquote>\n<p>The Intel Management Engine has access to the CPU's RAM. However, the CPU does not have access to the RAM reserved by the Intel Management Engine.</p>\n<p>The idea is simple: the software developer distributes the software encrypted. When the user launches an application, the IME takes over. It loads the encrypted program into the IME's RAM (the CPU does not have access to this). Then, it fetches a public key from a server and decrypts the program in memory. The IME then executes the application.</p>\n<p>Alternatively, the public key could be hard-coded in the IME.</p>\n<p>I'm just wondering if this method is theoretically uncrackable.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "358",
    "tags": [
        "memory",
        "encryption",
        "anti-debugging"
    ],
    "user": "Michael",
    "time": "Oct 13, 2016 at 6:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This method (if I understand correctly how exactly IME works) is not theoretically uncrackable, it is practically impossible.</p>\n<p>The devil, as usual, is in details - this method relies on 2 capabilities that AFAIK IME simply doesn't have - ability to run the application on the main CPU from IME (it requires interaction with the OS, and according to the method definition the decrypted program remains in the memory which is not accessible for main CPU)  and ability to secretly and reliably distribute the code that should run on it (to distribute the public key with the code that should run on IME).</p>\n<p>In addition the IME runs on very weak processor (especially in comparison with man CPU itself).</p>\n<p>As far as I know IME code is distributed as so-called \"DAL applets\". This is actually something like JAVA ME code, packed in JEFF/DALP format - and @Igor Skochinsky wrote a <a href=\"https://github.com/skochinsky/jeff-tools\" rel=\"nofollow\">set of utilities</a> to unpack it - which means that the public key can be easily found.  </p>\n<p>Generally speaking, the main discrepancy here is as follows:</p>\n<ul>\n<li>If the application runs on the main CPU, it can be dumped during run, even if it is decrypted by IME and thus the scheme is not unbreakable.</li>\n<li>If in contrary the application runs on the IME it can not be distributed encrypted and it is possible to reverse engineer it and thus the scheme is not unbreakable too.</li>\n</ul>\n</div>",
            "votes": "0",
            "user": "w s",
            "time": "Oct 13, 2016 at 7:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Michael",
                    "text": "<span class=\"comment-copy\">Thank you for the clarification. I admit it is not currently possible to run the application on the main CPU from IME. But I suspect it is possible to define some sort of interface between the CPU and IME that allows the application to run on the IME and for the CPU to interact with it. If the user is running GNU/Linux for example, then maybe the application runs on the IME and simply streams the GUI data using the X11 protocol to a X11 server running on the main CPU.</span>",
                    "time": null
                },
                {
                    "user": "Michael",
                    "text": "<span class=\"comment-copy\">As for the distribution of the public key, by being hard-coded in the IME, I mean that the key is physically stored in the hardware itself where it's hard to extract from the CPU <a href=\"https://blog.cryptographyengineering.com/2014/10/04/why-cant-apple-decrypt-your-iphone/\" rel=\"nofollow noreferrer\">similar to how Apple does iOS encryption</a>.</span>",
                    "time": null
                }
            ]
        }
    ]
}