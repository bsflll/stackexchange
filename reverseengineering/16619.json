{
    "title": "iOS entitlements for enable calling to private API",
    "link": "https://reverseengineering.stackexchange.com/questions/16619/ios-entitlements-for-enable-calling-to-private-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to analyze iOS private framework that broke commonly used GitHub project called <code>AppLister</code>. Here's some info about the API:</p>\n<pre><code>Framework : MobileCoreServices.framework.\nClass: LSApplicationWorkspace.\nMethod: allApplication.\n</code></pre>\n<p>Starting from iOS11, this call returns empty list unless the following entitlement is added to the application :  <code>com.apple.appstored.xpc.request</code></p>\n<p>It seems like this API was closed in iOS11 and you need the following entitlement in order to allow it. </p>\n<p>Prior to reversing, I wish to understand the flow of entitlement verification in general and maybe get into some details.. </p>\n<p>From what I've found out so far, it looks like the App use XPC for remote daemon that perform the actual verification. </p>\n<p>but I still have some black holes in this explanation. </p>\n<pre><code>1. Does the policy checker daemon also perform the method itself, or just return allow/block verdict.\n2. Does the flow involve kernel verification or just user-space processes. \n3. Is there a way to bypass this flow if I can only control the local process (not the checker or course) by skipping the policy check phase and call the API directly ? \n</code></pre>\n<p>I'd be happy to here some more about how this is working, and if I've missed something. </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ios"
    ],
    "user": "Zohar81",
    "time": "Oct 25, 2017 at 7:51",
    "comments": [
        {
            "user": "newenglander",
            "text": "<span class=\"comment-copy\">Were you able to get AppLister running on iOS 11 with that entitlement?</span>",
            "time": null
        },
        {
            "user": "Zohar81",
            "text": "<span class=\"comment-copy\">No, I actually found an alternative method which doesn't require this entitlement .. The entitlements needed for the specified method are only for apple native apps. if you find out otherwise, please let me know.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Apparently the kernel extension called AppleMobileFileIntegrity (AFMI) is responsible for enforcing the entitlements. Here's a presentation which has some detail of the implementation:</p>\n<p><a href=\"http://newosxbook.com/files/HITSB.pdf\" rel=\"nofollow noreferrer\"><em>The Apple Sandbox -five years later</em> by Jonathan Levin.</a></p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 25, 2017 at 8:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}