{
    "title": "Reversing an FPGA circuit",
    "link": "https://reverseengineering.stackexchange.com/questions/85/reversing-an-fpga-circuit",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's assume I have a device with an FPGA on it, and I managed to extract the bitstream from its flash. How would I go about recovering its behavior?</p>\n<p>One simple case is if it implements a soft processor - in that case there should be firmware for that processor somewhere and I can just disassemble that. But what if it's just a bunch of IP blocks and some additional logic?</p>\n</div>",
    "votes": "27",
    "answers": 3,
    "views": "12k",
    "tags": [
        "hardware",
        "fpga"
    ],
    "user": "Igor Skochinsky",
    "time": "Mar 20, 2013 at 17:33",
    "comments": [
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\"><code>\"if it implements a soft processor - in that case there should be firmware for that\"</code>.... but a soft processor isn't firmware (what processor would run that firmware?) It is a configuration of hardware elements on the FPGA.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">I meant that the soft processor would have to run <i>some</i> code, and that code would have to be stored somewhere(possibly in the same flash rom as the fpga bitstream)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While FPGA makers don't just throw their formats out there, there is extensive documentation at a low level. Xilinx devices are a good example. </p>\n<p>To reverse engineer the bit stream you might generate test cases that implement simple logic and see how those translate to the bit stream, then move on to designs that exercise different portions of the chip. </p>\n<p>At the basic level, you would want to know how a CLB is controlled then the IOBs and interconnects. the CLBs are the logic the IOBs the are connected to the pins and interconnects link up the CLBs and  IOBs. <a href=\"http://www2-c703.uibk.ac.at/teaching/ws2009/esa/fpga.pdf\" rel=\"nofollow noreferrer\">This document</a> should give you a lot of insight into how FPGAs are implemented and how you might go about reverse engineering the bit streams. Do note that newer FPGAs are moving to 6-input luts rather than 4-input as was common.</p>\n<p>Just keep in mind that the bit stream isn't software - it is a hardware configuration image. So, it's actually very similar to how ENIAC must have been programmed - rewiring circuits and flipping switches to program it - except in this case you are setting up routes with interconnects and logic in the CLBs.</p>\n<p>Also the guy behind the Ben NanoNote is writing a <a href=\"https://github.com/Wolfgang-Spraul/fpgatools\" rel=\"nofollow noreferrer\">fpga-toolchain</a> which I am following avidly.  Since a secondary to my SparcStation collecting hobby is reimplementing sun4m, a SparcStation architecture, in FPGA. After all who wouldn't want to be able to configure an FPGA from an FPGA with your own processor design on it.</p>\n<p>Update: It's worth noting that IceStorm (mostly ice40 chips) and NextPNR (Multi targeted at ice40/ECP5/Xilinx Series 7) are the current state of the art reverse engineered FPGA toolchains.</p>\n</div>",
            "votes": "23",
            "user": "cb88",
            "time": "Feb 5, 2019 at 15:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the fpga.pdf seems to 404 can some one relink it</span>",
                    "time": null
                },
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">I'm not sure where it went ... I'm pretty sure if was from the ESA 2009 FPGA workshop though.</span>",
                    "time": null
                },
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">FYI: FPGA PDF link is 404.</span>",
                    "time": null
                },
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">@JonathonReinhart The Wayback machine may have a copy ... it says the machine with the copy is down right now currently though. <a href=\"https://web.archive.org/web/20120813074341/http://www2-c703.uibk.ac.at/teaching/ws2009/esa/fpga.pdf\" rel=\"nofollow noreferrer\">web.archive.org/web/20120813074341/http://www2-c703.uibk.ac.at/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Xilinx Virtex II had an \"open\" bitstream, meaning that the bitstream format was documented and public. People could then manipulate the bitstream as they saw fit. Since then, the format has been closed (IMO) to keep people from (1) RE'ing the device which is a big concern for some interests and (2) to keep their technology a secret from competitors. </p>\n<p>Newer technologies allow for the bitstream to be encrypted from within the FPGA toolchain and to do internal decryption before programming the FPGA. So, you'll need to make sure that the bitstream you've captured is decrypted before trying to analyze it.</p>\n<p>Also, with the realization of Partial Reconfiguration (through Xilinx), RE attempts will become more complicated as you can no longer sit-and-watch behavior of devices.</p>\n</div>",
            "votes": "2",
            "user": "bitsdanceforme",
            "time": "Jan 30, 2014 at 19:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>RapidSmith does that for you. <a href=\"http://rapidsmith.sourceforge.net/\" rel=\"nofollow noreferrer\">http://rapidsmith.sourceforge.net/</a></p>\n<p>There is also a paper that you can read as the starting point: \"Recent Advances in FPGA Reverse Engineering\" Hoyoung Yu, Hansol Lee, Sangil Lee , Youngmin Kim  and Hyung-Min Lee</p>\n</div>",
            "votes": "1",
            "user": "Dr. Ehsan Ali",
            "time": "Mar 23, 2019 at 7:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}