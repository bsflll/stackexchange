{
    "title": "INT 31h MS DOS Lock linear region function",
    "link": "https://reverseengineering.stackexchange.com/questions/32409/int-31h-ms-dos-lock-linear-region-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>cseg01:000561C4                 mov     edx, offset sub_56BA0\ncseg01:000561C9                 mov     eax, offset sub_56C66\ncseg01:000561CE                 sub     eax, edx\ncseg01:000561D0                 push    eax             ; eax = 4 bytes = size of linear region in bytes\ncseg01:000561D1                 mov     eax, offset sub_56BA0\ncseg01:000561D6                 push    eax             ; eax = 4 bytes = start of linear region\ncseg01:000561D7                 call    Lock_Linear_Region_INT_31h\n\n</code></pre>\n<pre><code>cseg01:00056D2D Lock_Linear_Region_INT_31h proc near    ; CODE XREF: sub_4E387+4Cp\ncseg01:00056D2D                                         ; Proc????+21p ...\ncseg01:00056D2D\ncseg01:00056D2D arg_0           = word ptr  8\ncseg01:00056D2D arg_2           = word ptr  0Ah\ncseg01:00056D2D arg_4           = word ptr  0Ch\ncseg01:00056D2D arg_6           = word ptr  0Eh\ncseg01:00056D2D\ncseg01:00056D2D                 push    ebp\ncseg01:00056D2E                 mov     ebp, esp\ncseg01:00056D30                 push    esi\ncseg01:00056D31                 push    edi\ncseg01:00056D32                 push    ebx\ncseg01:00056D33                 push    ecx\ncseg01:00056D34                 push    fs\ncseg01:00056D36                 push    gs\ncseg01:00056D38                 push    es\ncseg01:00056D39                 mov     cx, [ebp+arg_0] ; low 2 bytes address of linear region\ncseg01:00056D3D                 mov     bx, [ebp+arg_2] ; high 2 bytes address of linear region\ncseg01:00056D41                 mov     di, [ebp+arg_4] ; low 2 bytes size of linear region\ncseg01:00056D45                 mov     si, [ebp+arg_6] ; high 2 bytes size of linear region\ncseg01:00056D49                 mov     ax, 600h\ncseg01:00056D4D                 int     31h             ; DPMI Services   ax=func xxxxh\ncseg01:00056D4D                                         ; LOCK LINEAR REGION\ncseg01:00056D4D                                         ; BX:CX = starting linear address\ncseg01:00056D4D                                         ; SI:DI = size of region in bytes\ncseg01:00056D4D                                         ; Return: CF set on error\ncseg01:00056D4D                                         ; CF clear if successful\ncseg01:00056D4F                 mov     eax, 0\ncseg01:00056D54                 jnb     short loc_56D5F ; return 0 if CF = 1\ncseg01:00056D56                 nop\ncseg01:00056D57                 nop\ncseg01:00056D58                 nop\ncseg01:00056D59                 nop\ncseg01:00056D5A                 mov     eax, 1\ncseg01:00056D5F\ncseg01:00056D5F loc_56D5F:                              ; CODE XREF: Lock_Linear_Region_INT_31h+27j\ncseg01:00056D5F                 pop     es\ncseg01:00056D60                 pop     gs\ncseg01:00056D62                 pop     fs\ncseg01:00056D64                 pop     ecx\ncseg01:00056D65                 pop     ebx\ncseg01:00056D66                 pop     edi\ncseg01:00056D67                 pop     esi\ncseg01:00056D68                 pop     ebp\ncseg01:00056D69                 retn\ncseg01:00056D69 Lock_Linear_Region_INT_31h endp\n\n</code></pre>\n<p>This is MS DOS code.</p>\n<p>sub_56BA0 and sub_56C66 is just empty functions (between them there is program code - i.e. real functions).</p>\n<p>For what uses INT 31h ax = 600h in this code? LOCK LINEAR REGION - What is means?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "54",
    "tags": [
        "disassembly",
        "dos"
    ],
    "user": "black4joss",
    "time": "Oct 20, 2023 at 14:58",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">it seems to virtual locking the page starting at the address 56ba0 and the size is 0xc6  the first push is the result of subtract 0x000000c6 so 0x0000 and 0x00c6  the second push is 0x00056ba0  <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtuallock\" rel=\"nofollow noreferrer\">winapi documentation of VirtualLock</a>  and a [delorie doc for int 31 0x600] (<a href=\"http://www.delorie.com/djgpp/doc/dpmi/api/310600.html\" rel=\"nofollow noreferrer\">delorie.com/djgpp/doc/dpmi/api/310600.html</a>)</span>",
            "time": null
        },
        {
            "user": "black4joss",
            "text": "<span class=\"comment-copy\">I dont understand for what - lock linear region - what is the purpose?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">Locking of pages prevents the page from being paged out and thus ensures no page fault exception occurs  the pages are always available for access even in case of severe memory congestion</span>",
            "time": null
        },
        {
            "user": "black4joss",
            "text": "<span class=\"comment-copy\">Another question. For example, I decompile assembler code from IDA (I make C++ code from assembler). That code (program functions) between sub_56BA0 and sub_56C66 in the IDA listing, should I place this code (that same program funcitons) in the same way in my C++ code between these empty functions sub_56BA0 and sub_56C66? That is, completely copy the placement of functions?</span>",
            "time": null
        }
    ],
    "answers_data": []
}