{
    "title": "Instruction without \"apparent\" previous instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/17529/instruction-without-apparent-previous-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working through the educational \"bomb.exe\" file where you must defuse the bomb by entering the correct inputs.  This can only be accomplished by reversing the executable file.  There are no hints when the file is run.</p>\n<p>I came across these two random jump instructions which appear to be inserted out of the flow of the program.  What is the reason for their existence?  Is this a byproduct of an unoptimized compilation?  If they're there on purpose then which instruction points to these?</p>\n<p><a href=\"https://i.sstatic.net/LlIS9.png\" rel=\"nofollow noreferrer\"><img alt=\"Mysterious entry points\" src=\"https://i.sstatic.net/LlIS9.png\"/></a>\n<a href=\"https://i.sstatic.net/QRTOk.png\" rel=\"nofollow noreferrer\"><img alt=\"Entire Function + To/From locations\" src=\"https://i.sstatic.net/QRTOk.png\"/></a></p>\n<p>Appreciate any help!</p>\n<p>Looking at the \"flat\" view it appears that they are not called from anywhere.  Could these jumps be sites of malicious code injections if someone had bad intentions?  It seems that if they are connected to a proper flow the injected code would go unnoticed at first glance.  If I should open another thread for this question I can do that too.</p>\n<p><a href=\"https://i.sstatic.net/CAidQ.png\" rel=\"nofollow noreferrer\"><img alt=\"Flat View\" src=\"https://i.sstatic.net/CAidQ.png\"/></a></p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "190",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "ButtahNBred",
    "time": "Feb 24, 2018 at 16:58",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">That fragment of a tree is not enough for me. Can you post the entire function? (Unless it's too long, then only post the from/to part.)</span>",
            "time": null
        },
        {
            "user": "ButtahNBred",
            "text": "<span class=\"comment-copy\">I have included an image of the entire function with the dialogue showing all of the to/from.  I'm not sure how this will help with where those two isolated JMP instructions are being called from.</span>",
            "time": null
        },
        {
            "user": "Graham Best",
            "text": "<span class=\"comment-copy\">was this program patched before you disassembled it? Or are you patching it currently?</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">There might be some indirect jumps to those instructions like jmp eax that IDA cant correctly resolve. It’s diffficult to say just by looking at an image</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">switch to flat mode (space bar), then you'll see better the sequence of instructions.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The flat view makes it obvious: the \"hanging\" jumps are part of the function but IDA detected that they are not reachable because the function calls preceding them (<code>exit</code> and <code>bombExplodes</code>) do not return. If you really want to see the jumps in a \"proper\" graph, you can clear no-returning flag from those functions, but it will be somewhat artificial since those instructions are not reachable in normal execution flow.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Feb 24, 2018 at 18:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}