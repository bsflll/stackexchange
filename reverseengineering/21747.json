{
    "title": "Firestick get application binary",
    "link": "https://reverseengineering.stackexchange.com/questions/21747/firestick-get-application-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to reverse engineer and ultimately patch an application on my Amazon Firestick. To doo this, I want to analyze the app executable.</p>\n<p>I believe third-party apk's are stored in the <code>/data</code> directory but this directory is not readable on an unrooted device. I've also considered dumping the process memory while the app is running, but I believe this would also require rooting the device. I would prefer to not root the device if possible but I understand that might be necessary. </p>\n<p>Does anyone know of a way I can get the application binary without rooting the device?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "454",
    "tags": [
        "android"
    ],
    "user": "genghiskhan",
    "time": "Jul 23, 2019 at 16:05",
    "comments": [
        {
            "user": "anon",
            "text": "<span class=\"comment-copy\">All rooting does is get you access to the root account. If you want to do <i>anything</i> that you're not explicitly allowed by e.g. the file's permissions, you're going to need to root it. This might not even be hard or even unsupported, necessarily; there are plenty of consumer devices (besides the obvious ones) that are meant to be rootable, especially for developers. You could always dig through Amazon's documentation to see -- maybe have a look at their developer resources? I'd imagine they have <i>some</i> provision for deploying to a Firestick, which might have the answers you need.</span>",
            "time": null
        },
        {
            "user": "genghiskhan",
            "text": "<span class=\"comment-copy\">I think you're right that I will need to root the device. However, it seems to me that rooting the Firestick is tricky. For my version of the firmware, the most prevalent method involved shorting a circuit on the board. The developer docs only provide options for monitoring resource usage.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>adb shell pm list packages -f</code> should list all of the installed packages, as well as the path to their apk. Find the apk you're interested in, then pull it with <code>adb pull &lt;path&gt;</code>.</p>\n<p>e.g.</p>\n<pre><code>&gt; adb shell pm list packages -f\n....\npackage:/data/app/com.google.android.dialer-nt9PJ8MFE293dEV61etgIA==/base.apk=com.google.android.dialer\n....\n&gt; adb pull /data/app/com.google.android.dialer-nt9PJ8MFE293dEV61etgIA==/base.apk\n</code></pre>\n</div>",
            "votes": "3",
            "user": "JesusFreke",
            "time": "Jul 24, 2019 at 18:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">This doesn't require rooting?</span>",
                    "time": null
                },
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">I just tried this and it allows me to \"download\" the directory but it is empty.</span>",
                    "time": null
                },
                {
                    "user": "JesusFreke",
                    "text": "<span class=\"comment-copy\">I added a more specific example. You should be able to pull the apk file itself, not the directory</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I came across this forum thread that had the correct solution: <a href=\"https://forum.xda-developers.com/fire-tv/help/extract-apk-t3674633\" rel=\"nofollow noreferrer\">https://forum.xda-developers.com/fire-tv/help/extract-apk-t3674633</a>. The solution was to download ESFile Explorer and backup the app for which I was seeking the APK. I could then run <code>adb pull /storage/emulated/0/backups/app/&lt;my app&gt;</code>.</p>\n</div>",
            "votes": "2",
            "user": "genghiskhan",
            "time": "Jul 23, 2019 at 23:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}