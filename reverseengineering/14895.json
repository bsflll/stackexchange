{
    "title": "Why are symbols with local binding present in the symbol table of my ELF files?",
    "link": "https://reverseengineering.stackexchange.com/questions/14895/why-are-symbols-with-local-binding-present-in-the-symbol-table-of-my-elf-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I found out that there are symbols with <code>binding=LOCAL</code> and <code>visibility=HIDDEN</code> in the symbol table (<code>.symtab</code>) of ELF executables/libraries. What are they needed for? They are not involved in the relocation process nor can be invoked externally. Are they included in the symbol table for exception handling?</p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "5k",
    "tags": [
        "linux",
        "elf"
    ],
    "user": "user19496",
    "time": "Mar 14, 2017 at 21:15",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">This is not exactly an RE question...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Symbol Binding and Symbol Visibility</h3>\n<blockquote>\n<p>What are they needed for?</p>\n</blockquote>\n<p>There must be a way for the <a href=\"https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter2-88783.html\" rel=\"noreferrer\">link editor</a> (<code>ld</code>) to determine the scope of a symbol during link-time. In other words, symbol binding allows the link editor to differentiate between symbols visible only within a particular file being linked (local scope) vs. symbols that can be referenced from within functions located in other files (global scope).</p>\n<p>Symbol visibility attributes (default, protected, hidden or internal) have special meaning for the <a href=\"http://man7.org/linux/man-pages/man8/ld.so.8.html\" rel=\"noreferrer\">runtime- (dynamic) linker (<code>ld-linux.so.*</code>)</a>, telling it which symbols in the symbol table are used by the executable internally vs. which symbols may be used by other executables dynamically linked to it at program runtime.</p>\n<p>From <a href=\"https://www.technovelty.org/code/why-symbol-visibility-is-good.html\" rel=\"noreferrer\">Why symbol visibility is good</a>:</p>\n<blockquote>\n<p>ELF has two related concepts for managing symbols in your programs.\n  The first concept is the symbol <strong>binding</strong>. <em>Global</em> binding means the\n  symbol is visible outside the file being built; <em>local</em> binding is the\n  opposite and keeps the symbol local only (static) and weak is like\n  global, but suggests that the symbol can be overridden.</p>\n<p>This is all well and good, but starts breaking down when you want to load many different modules and keep strict API's (such as, say, dynamic libraries!).</p>\n<p>Binding attributes are useful for the linker putting together object files; but aren't a complete solution.</p>\n<p>To combat this, ELF provides for visibility attributes. Symbols can be default, protected, hidden or internal. Using these attributes, we can flag extra information for the dynamic loader so it can know which symbols are for public consumption, and which are for internal use only.</p>\n<p>The most logical way to use this is to make all symbols by default hidden with <code>-fvisibility=hidden</code> and then \"punch holes in the wall\" for those symbols you want visible.</p>\n</blockquote>\n<h3>Symbols and Relocation</h3>\n<blockquote>\n<p>They are not involved in the relocation process</p>\n</blockquote>\n<p>This is false.</p>\n<p>From the <a href=\"http://refspecs.linux-foundation.org/elf/gabi41.pdf\" rel=\"noreferrer\">System V ABI Edition 4.1 (generic), Chapter 4: Object Files, Relocation</a>:</p>\n<blockquote>\n<p>Relocation is the process of connecting symbolic references with\n  symbolic definitions. For example, when a program calls a function,\n  the associated call instruction must transfer control to the proper\n  destination address at execution.</p>\n</blockquote>\n<p>From the <a href=\"https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter2-90421.html\" rel=\"noreferrer\">Oracle Linker and Libraries Guide, Part I: Using the Link-Editor and Runtime Linker, Section 2: Link Editor Symbol Processing</a>:</p>\n<blockquote>\n<p>During input file processing, all local symbols from the input\n  relocatable objects are passed through to the output file image. All\n  global symbols from the input relocatable objects, together with\n  globals symbols from shared object dependencies, are accumulated\n  internally within the link-editor.</p>\n</blockquote>\n<h3>Symbols and Program Runtime</h3>\n<blockquote>\n<p>nor can they be invoked externally</p>\n</blockquote>\n<p>Symbols are never invoked during program runtime. During runtime the instruction pointer in the CPU jumps to the memory addresses in virtual memory of instructions located at offsets calculated by the link-editor (relocation). If symbols were relevant during runtime the symbol table could not be removed (stripped) from executable binaries.</p>\n</div>",
            "votes": "9",
            "user": "julian",
            "time": "Mar 14, 2017 at 21:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}