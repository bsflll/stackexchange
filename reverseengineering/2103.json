{
    "title": "Try to deobfuscate multi layered javascript",
    "link": "https://reverseengineering.stackexchange.com/questions/2103/try-to-deobfuscate-multi-layered-javascript",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to the <a href=\"http://techyzilla.blogspot.ca/2012/09/better-javascript-obfuscating-method-to-protect-your-code.html\">techy zilla blog</a></p>\n<p>It will be much harder to deobfuscate code that has been obfuscated using multiple obfuscating algorithms. According to them, jsbeautifier can't fix this obfuscated code. Can you find another way to deobfuscate this type of obfuscation? If not, what is the closest you can get?</p>\n<pre><code>var _0x2815=[\"\\x33\\x20\\x31\\x28\\x29\\x7B\\x32\\x20\\x30\\x3D\\x35\\x3B\\x34\\x20\\x30\\x7D\",\"\\x7C\",\"\\x73\\x70\\x6C\\x69\\x74\",\"\\x78\\x7C\\x6D\\x79\\x46\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\\x7C\\x76\\x61\\x72\\x7C\\x66\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\\x7C\\x72\\x65\\x74\\x75\\x72\\x6E\\x7C\",\"\\x72\\x65\\x70\\x6C\\x61\\x63\\x65\",\"\",\"\\x5C\\x77\\x2B\",\"\\x5C\\x62\",\"\\x67\"];eval(function (_0xf81fx1,_0xf81fx2,_0xf81fx3,_0xf81fx4,_0xf81fx5,_0xf81fx6){_0xf81fx5=function (_0xf81fx3){return _0xf81fx3;} ;if(!_0x2815[5][_0x2815[4]](/^/,String)){while(_0xf81fx3--){_0xf81fx6[_0xf81fx3]=_0xf81fx4[_0xf81fx3]||_0xf81fx3;} ;_0xf81fx4=[function (_0xf81fx5){return _0xf81fx6[_0xf81fx5];} ];_0xf81fx5=function (){return _0x2815[6];} ;_0xf81fx3=1;} ;while(_0xf81fx3--){if(_0xf81fx4[_0xf81fx3]){_0xf81fx1=_0xf81fx1[_0x2815[4]]( new RegExp(_0x2815[7]+_0xf81fx5(_0xf81fx3)+_0x2815[7],_0x2815[8]),_0xf81fx4[_0xf81fx3]);} ;} ;return _0xf81fx1;} (_0x2815[0],6,6,_0x2815[3][_0x2815[2]](_0x2815[1]),0,{}));\n</code></pre>\n</div>",
    "votes": "11",
    "answers": 4,
    "views": "24k",
    "tags": [
        "obfuscation",
        "javascript",
        "deobfuscation"
    ],
    "user": "user101579",
    "time": "May 26, 2013 at 2:24",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">If you really want obfuscated Javascript, just compile something to asm.js</span>",
            "time": null
        },
        {
            "user": "Viet",
            "text": "<span class=\"comment-copy\">@Antimony: Quite a good idea!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using <a href=\"http://malzilla.sourceforge.net/downloads.html\" rel=\"noreferrer\">Malzilla</a>, I was able to de-obfuscate this in ~30 seconds. </p>\n<p><strong>Step 1</strong>, open Malzilla, select the <em>Decoder</em> tab, and paste the JavaScript.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/18qVw.jpg\"/></p>\n<p><strong>Step 2</strong>, you can optionally press the \"Format Code\" button to get a rudimentary re-formatting of the JS.</p>\n<p><strong>Step 3</strong>, check <em>Override eval()</em>, and click the <em>Run script</em> button.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2Fq6b.jpg\"/></p>\n<p>You'll notice that in the output box, the de-obfuscated code is printed:</p>\n<pre><code>function myFunction(){var x=5;return x}\n</code></pre>\n</div>",
            "votes": "15",
            "user": "Mick",
            "time": "May 27, 2013 at 18:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Denis Laskov",
                    "text": "<span class=\"comment-copy\">great manual :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Why limit yourself to static deobfuscation? If you run that script through a JavaScript debugger and break on the <code>return</code> statement, you can see that <code>_0xf81fx1</code> = <code>function myFunction(){var x=5;return x}</code>, which was the plain-text of the function before it was obfuscated.</p>\n<p>Furthermore, if you run it through <a href=\"http://jsbeautifier.org\">http://jsbeautifier.org</a>, the last line of the output is:</p>\n<p><code>}('3 1(){2 0=5;4 0}', 6, 6, 'x|myFunction|var|function|return|' ['split']('|'), 0, {}));</code></p>\n<p>It can be seen that the <code>'3 1(){2 0=5;4 0}'</code> string just holds the indeces for the strings in the string-array <code>'x|myFunction|var|function|return|'</code>. So <a href=\"http://jsbeautifier.org\">http://jsbeautifier.org</a> does pretty much deobfuscate it most all the way anyway.</p>\n</div>",
            "votes": "11",
            "user": "Jason Geffner",
            "time": "May 26, 2013 at 3:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user101579",
                    "text": "<span class=\"comment-copy\">I don't know how to interpret '3 1(){2 0=5;4 0}'</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>jsbeautifier.org is not the source for JS deobfuscation, actually. See this question for more details <a href=\"https://reverseengineering.stackexchange.com/questions/1436/analyzing-highly-obfuscated-javascript\">Analyzing highly obfuscated JavaScript</a></p>\n<p>After multiple de-obfuscations, it seems that code behind is: </p>\n<pre><code>//eval function myFunction(){var x=5;return x}\n</code></pre>\n<p><a href=\"http://jsunpack.jeek.org/?report=24921f4d96d1e05abfc0affd2233bd69874056c9\" rel=\"nofollow noreferrer\">http://jsunpack.jeek.org/?report=24921f4d96d1e05abfc0affd2233bd69874056c9</a></p>\n</div>",
            "votes": "8",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You could try using <a href=\"https://lelinhtinh.github.io/de4js/\" rel=\"nofollow noreferrer\">de4js</a>. For the javascript snippet in the original post, de4js produces the following output:</p>\n<pre><code>var _0x2815 = [\"3 1(){2 0=5;4 0}\", \"|\", \"split\", \"x|myFunction|var|function|return|\", \"replace\", \"\", \"\\\\w+\", \"\\\\b\", \"g\"];\neval(function (_0xf81fx1, _0xf81fx2, _0xf81fx3, _0xf81fx4, _0xf81fx5, _0xf81fx6) {\n    _0xf81fx5 = function (_0xf81fx3) {\n        return _0xf81fx3;\n    };\n    if (!_0x2815[5][_0x2815[4]](/^/, String)) {\n        while (_0xf81fx3--) {\n            _0xf81fx6[_0xf81fx3] = _0xf81fx4[_0xf81fx3] || _0xf81fx3;\n        };\n        _0xf81fx4 = [function (_0xf81fx5) {\n            return _0xf81fx6[_0xf81fx5];\n        }];\n        _0xf81fx5 = function () {\n            return _0x2815[6];\n        };\n        _0xf81fx3 = 1;\n    };\n    while (_0xf81fx3--) {\n        if (_0xf81fx4[_0xf81fx3]) {\n            _0xf81fx1 = _0xf81fx1[_0x2815[4]](new RegExp(_0x2815[7] + _0xf81fx5(_0xf81fx3) + _0x2815[7], _0x2815[8]), _0xf81fx4[_0xf81fx3]);\n        };\n    };\n    return _0xf81fx1;\n}(_0x2815[0], 6, 6, _0x2815[3][_0x2815[2]](_0x2815[1]), 0, {}));\n</code></pre>\n<p>When the <code>eval</code> radio button is selected, this reduces to</p>\n<pre><code>function myFunction() {\n    var x = 5;\n    return x\n}\n</code></pre>\n</div>",
            "votes": "2",
            "user": "julian",
            "time": "Sep 11, 2019 at 14:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}