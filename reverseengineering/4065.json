{
    "title": "Are there ANY supported Fermi Disassemblers out there?",
    "link": "https://reverseengineering.stackexchange.com/questions/4065/are-there-any-supported-fermi-disassemblers-out-there",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've recently started exploring the world of GPU-based malware.  Academia doesn't have a ton of papers here, but there's some powerful ones.  I'm looking at trying to improve the communities tools in terms of NVIDIA's fermi ISA, (since AMD published theirs!)  </p>\n<p>To date, I've not found any fermi disassemblers, but one ONE fermi assembler:</p>\n<p><a href=\"http://code.google.com/p/asfermi/\" rel=\"nofollow\">asfermi</a></p>\n<p>Are their any plugins/disassemblers that this community is aware of, that my google searches have apparently turned up zilch?  NVIDIA's supplied tools don't work for binaries compiled with vs2010.  </p>\n<p>=============[Updated Context]===================</p>\n<p>Appears that to a certain extent, my assumptions were wrong.  NVIDIA's disassembly tools (nvobjdump, nvdisasm) are designed only to work with their *.cubin (maybe *.ptx) intermediate assemblies.  Which is bad, from a malware analysis perspective.  </p>\n<p>After searching extensively I found a dead project called <a href=\"https://github.com/laanwj/decuda\" rel=\"nofollow\">decuda</a>.  (I say dead because it hasn't had a commit in years.)  AND it doesn't seem to be able to handle disassembling *.cubin binaries from the latest releases, 5.5 and 6.0.  </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "681",
    "tags": [
        "disassembly",
        "windows",
        "linux",
        "nvidia"
    ],
    "user": "avgvstvs",
    "time": "Apr 17, 2014 at 23:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, after spending lots of time in NVIDIA's documentation, and the recent update to 6.0, they added the ability for their program <code>cuobjdump</code> to extract *.cubin files from any given target executable.  So you can extract *.cubin files from PE or ELF files like this:</p>\n<pre><code>C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v6.0\\Bin\\win32\\Debug&gt;cuobjdump -xelf all simpleAtomicIntrinsics.exe\n</code></pre>\n<p>Then use <code>nvdisasm</code> on your target *.cubin file:</p>\n<pre><code>C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v6.0\\Bin\\win32\\Debug&gt;nvdisasm NVIDIA-CUDA-simpleAtomicIntrinsics.sm_50.cubin\n</code></pre>\n<p>Oh, by the way, <code>nvdisasm</code> does actually use control-flow disassembly.  <code>cuobjdump</code> uses linear.  </p>\n<p>By playing with the provided tools you can extract opcodes, but unfortunately there's snakey instructions like <code>S2R</code> which according to NVIDIA's <a href=\"http://docs.nvidia.com/cuda/cuda-binary-utilities/index.html#fermi\" rel=\"nofollow\">documentation</a> does this:  </p>\n<p><code>S2R    Special Register to Register</code></p>\n<p>With no documentation I've seen yet as to what the special registers even ARE on this architecture.  The best documentation on this so far is <a href=\"https://code.google.com/p/asfermi/wiki/FAQ\" rel=\"nofollow\">here</a>.</p>\n</div>",
            "votes": "2",
            "user": "avgvstvs",
            "time": "May 1, 2014 at 21:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}