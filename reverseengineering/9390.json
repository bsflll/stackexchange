{
    "title": "Implementation of mul x86 assembly instruction in python [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/9390/implementation-of-mul-x86-assembly-instruction-in-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-07-21 07:56:27Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/9390/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm trying to implement the <code>mul</code> x86 assembly instruction in python and would like your advise to do it in the most pythonic way.</p>\n<p>Here is what I've done so far:</p>\n<pre><code>eax = 0x51EB851F\nedx = 0x5D0FCF\n\n# mul edx\n\n#EDX (higher part of result)\n&gt;&gt;&gt; hex(0x5d0fcf * 0x51EB851F &amp; 0xFFFFFFFF00000000)\n'0x1dc79e00000000L' # To be truncated (EDX=0x001DC79E)\n\n# EAX (lower part of result)\n&gt;&gt;&gt; hex(0x5d0fcf * 0x51EB851F &amp; 0xFFFFFFFF)\n'0x66807511'\n</code></pre>\n<p>Is there a cleaner/more pythonic way of doing this?</p>\n<p>Many thanks in advance for your inputs.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "956",
    "tags": [
        "assembly",
        "x86",
        "python"
    ],
    "user": "Sebastien Damaye",
    "time": "9 years ago",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">You forgot to update the flags of the EFLAGS register. It might lead to some quite big differences when executing this fake instruction in place of the real one. In fact, you cannot expect something that simple, you should really look at the Intel manual about the instructions in details.</span>",
            "time": null
        },
        {
            "user": "Sebastien Damaye",
            "text": "<span class=\"comment-copy\">Thank you for this 1st feedback. Is there any python library/code that already does that? I would like not to reinvent the wheel... :)</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">From what I know, <a href=\"https://github.com/bdcht/amoco\" rel=\"nofollow noreferrer\">amoco</a> might be the thing you are looking for. But, there must also others that I don't know.</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">I recommend you to take a look to Pyvex <a href=\"https://github.com/angr/pyvex/\" rel=\"nofollow noreferrer\">github.com/angr/pyvex</a> and use it instead of re-inventing the wheel.</span>",
            "time": null
        }
    ],
    "answers_data": []
}