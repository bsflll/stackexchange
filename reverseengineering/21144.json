{
    "title": "Bypassing anti-debugging",
    "link": "https://reverseengineering.stackexchange.com/questions/21144/bypassing-anti-debugging",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to RE Stardew Valley to write cheats for it. The problem is that when I trace the pointers for my health/energy/etc... back more than one level the game crashes. It probably has some kind of anti-debugging checks in it. I looked into it a little bit and apparently there's a bunch of things they can do to detect debuggers and exit - does anyone know of a good way to figure out what they're doing without just searching the binary in IDA? I could do that but it seems like a bit of a pain in the arse.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "8k",
    "tags": [
        "anti-debugging"
    ],
    "user": "3asssains",
    "time": "Apr 14, 2019 at 14:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depending on which debugger you are using, there are a few options.</p>\n<p>VEH debugger option in Cheat Engine will bypass some anti-debugging techniques. </p>\n<p>If you use x64dbg or x32dbg, you can use ScyllaHide:\n<a href=\"https://github.com/x64dbg/ScyllaHide\" rel=\"nofollow noreferrer\">https://github.com/x64dbg/ScyllaHide</a></p>\n<p>There is also TitanHide(kernel mode):\n<a href=\"https://github.com/mrexodia/TitanHide\" rel=\"nofollow noreferrer\">https://github.com/mrexodia/TitanHide</a></p>\n</div>",
            "votes": "2",
            "user": "Hx0",
            "time": "Apr 14, 2019 at 18:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}