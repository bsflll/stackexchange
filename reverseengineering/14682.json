{
    "title": "3 questions on Assembly - meaning of code, Decompilation in Linux, Higher level perspective,",
    "link": "https://reverseengineering.stackexchange.com/questions/14682/3-questions-on-assembly-meaning-of-code-decompilation-in-linux-higher-level",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Following the question here (<a href=\"https://reverseengineering.stackexchange.com/questions/14650/5-questions-on-assembly-syntax-meaning-and-equivalent-in-high-level-code-eg\">3 questions on assembly - syntax, meaning, and equivalent in high level code (eg C++)</a>), I would like to know for the same x86 code in AT&amp;T syntax:</p>\n<pre><code>xor $0x20, (%eax) \nand $0x20, %ah \nor $0x20, %dh \ndec (%edi) \ndec %si \ndec %sp \ndec %bp\n</code></pre>\n<ol>\n<li><p>What are the implications of the last two lines of code (decrementing stack pointer and base pointer)?</p></li>\n<li><p>What are the lines of code doing from a higher level perpective? - Eg \"Takes an input and outputs a string\"</p></li>\n<li><p>What are some Linux commands (that come with distros) that decompile assembly code?  - I have only found downloadable software suggestions thus far.</p></li>\n</ol>\n<p>This is not a homework question - I am new to assembly. Example code is not from actual code - it's to help me get a better understanding &amp; illustrate my questions. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "171",
    "tags": [
        "assembly",
        "decompilation",
        "linux",
        "binary"
    ],
    "user": "unseen_rider",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">You should post real examples, not something you made up, otherwise the answers would be useless.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">\"I'm learning English, so can you explain what 'gut what excite' means? I just made it up because I know some of these words but please translate it\" - this is what your questions look like.</span>",
            "time": null
        },
        {
            "user": "unseen_rider",
            "text": "<span class=\"comment-copy\">Ok point made. I will post another question with actual code.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>What are some Linux commands (that come with distros) that decompile assembly code?</p>\n</blockquote>\n<p>There are none. You can see this for yourself if you look at the functionality provided by tools in the <a href=\"https://www.gnu.org/software/binutils/\" rel=\"nofollow noreferrer\">GNU binutils</a> collection. </p>\n<h3>Stack Frames</h3>\n<p>On System V i386 systems <code>%esp</code> and <code>%ebp</code> are used by the compiler to manage stack frames on the runtime stack (it is the compiler that transforms source code into assembly). Stack frames are created on the runtime stack when functions are called. </p>\n<p>From the <a href=\"https://refspecs.linuxfoundation.org/elf/abi386-4.pdf\" rel=\"nofollow noreferrer\">System V Application Binary Interface Intel386 Architecture Processor Supplement</a>, chapter 3 \"Low-Level System Information\" section 9 \"Function Calling Sequence\" (page 37):</p>\n<ul>\n<li><code>%esp</code>\n<blockquote>\n<p>The stack pointer holds the limit of the current stack frame, which is the address of the stack’s bottom-most, valid word. At all\n  times, the stack pointer should point to a word-aligned area.</p>\n</blockquote></li>\n<li><code>%ebp</code>\n<blockquote>\n<p>The frame pointer optionally holds a base address for the current\n  stack frame. Consequently, a function has registers pointing to\n  both ends of its frame. Incoming arguments reside in the previous frame, referenced as positive offsets from <code>%ebp</code>, while local\n  variables reside in the current frame, referenced as negative\n  offsets from <code>%ebp</code>. A function must preserve this register’s value\n  for its caller</p>\n</blockquote></li>\n</ul>\n<p>Here is a picture of a standard stack frame (from the System V Application Binary Interface Intel386 Architecture Processor Supplement, page 36):\n<a href=\"https://i.sstatic.net/S1Qso.png\" rel=\"nofollow noreferrer\"><img alt=\"Standard Stack Frame\" src=\"https://i.sstatic.net/S1Qso.png\"/></a></p>\n<p>And here is a different diagram of a portion of a process runtime stack (from CSAPP chapter 3 \"Machine-Level Representation of Programs\":\n<a href=\"https://i.sstatic.net/bvhpK.png\" rel=\"nofollow noreferrer\"><img alt=\"Stack with multiple frames\" src=\"https://i.sstatic.net/bvhpK.png\"/></a></p>\n<p>The runtime stack is a region high in a process's virtual memory. For reference, here is a diagram of virtual memory (from TLPI, chapter 6 \"Processes\"):\n<a href=\"https://i.sstatic.net/k4hPj.png\" rel=\"nofollow noreferrer\"><img alt=\"Layout of a Process in Virtual Memory\" src=\"https://i.sstatic.net/k4hPj.png\"/></a></p>\n<p>Now to your question:</p>\n<blockquote>\n<p>What are the implications of the last two lines of code (decrementing stack pointer and base pointer)?</p>\n</blockquote>\n<p>The code that you have provided is not from a called function, so no stack frame would be created for this code. In other words, no function calls means no stack frame creation. This code would be mapped from an executable ELF binary's <code>.text</code> section to the <code>text</code> segment in virtual memory when executed and its process image is created.  This means that in the context of the code you have provided, the statements <code>dec %sp</code> and <code>dec %bp</code> are of no consequence since there are no function calls and no stack frames to be managed.</p>\n<blockquote>\n<p>What are the lines of code doing from a higher level perpective? - Eg \"Takes an input and outputs a string\"</p>\n</blockquote>\n<p>There is not much going on here. <code>xor $0x20, (%eax)</code> is an example of <a href=\"http://www.c-jump.com/CIS77/ASM/Addressing/lecture.html#R77_0010_indirect\" rel=\"nofollow noreferrer\">indirect addressing</a>, where the value in <code>%eax</code> is treated as a memory address and whatever is at that address is <code>xor</code>'ed with the integer value 32. <code>dec (%edi)</code> results in the value in <code>%edi</code> being treated as a memory address, and whatever is at that address has 1 subtracted from it. The other statements are just arithmetic performed on values in CPU registers. I am not sure how this sequence of computations would be represented in a high level language.</p>\n<h3>Conclusion</h3>\n<p>The best thing you could do for yourself is learn how to create some basic functional assembly code and step through the code with a debugger like <code>gdb</code> using the <code>stepi</code> and <code>info registers</code> commands. This will allow you to see for yourself what happens as a result of each statement. It will also speed up the learning process and deepen your understanding of assembly and virtual memory. </p>\n</div>",
            "votes": "2",
            "user": "julian",
            "time": "Feb 18, 2017 at 3:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}