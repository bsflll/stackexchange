{
    "title": "Prevent malware from deleting itself during installation on Windows x64",
    "link": "https://reverseengineering.stackexchange.com/questions/2274/prevent-malware-from-deleting-itself-during-installation-on-windows-x64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Can anyone suggest a tool to prevent a malware from deleting itself on Windows x64? The purpose is to collect all the components of the whole process of infection.</p>\n<p>I've looked at CaptureBat, but its drivers are only 32-bit.\nI also thought about using file recovery utilities for this.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "malware",
        "digital-forensics"
    ],
    "user": "PhoeniX",
    "time": "Jun 19, 2013 at 1:26",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">No need to use a third-party tool. You can just use ACLs.  See <a href=\"http://serverfault.com/questions/285058/prevent-a-program-from-deleting-files-in-windows#comment267157_285063\" title=\"prevent a program from deleting files in windows%23comment267157_285063\">serverfault.com/questions/285058/…</a></span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">Ok, thanks. I'll try it but as mentioned in the suggested post, it can crash the application or even prevent it from executing by the \"desired\" path. Still, I'm more interested with something that will not interfere with the program flow.</span>",
            "time": null
        },
        {
            "user": "PSS",
            "text": "<span class=\"comment-copy\">How about manually patching your executable?</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">It's a way, but needs development. Or, if you mean, by using debugger, then it is also not straight forward. As it looks right now, I'll eventually will need to develop my own tool :)</span>",
            "time": null
        },
        {
            "user": "h4sh",
            "text": "<span class=\"comment-copy\">So did you get you hands dirty? I need exactly what you requested for, I´m analyzing a malware which deletes itself. I created the forensic timeline with sleuthkit fls, but there is no trace of the deleted file. File carving is a possibility but it is time consuming so I'm also looking for something as practical as capture bat is for x32.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are couple of ways that I could think of.</p>\n<p><strong>First off</strong>, you could use <a href=\"http://www.cuckoosandbox.org\" rel=\"nofollow\"><strong>Cuckoo Sandbox</strong></a>. It is an automated malware analysis system. It is open source and its modules are written in <a href=\"http://python.org\" rel=\"nofollow\"><strong>Python</strong></a>. To quote the website: </p>\n<blockquote>\n<p>Malware! Tear it apart, discover its ins and outs and collect actionable threat data. Cuckoo is the leading open source automated malware analysis system.</p>\n</blockquote>\n<p>Pretty exciting, isn't it? I believe, it will capture dropped files by default. Once a malware sample is submitted to <strong><a href=\"http://www.cuckoosandbox.org\" rel=\"nofollow\">Cuckoo Sandbox</a></strong> and analysis is completed, user gets analysis report. Certain sub-directory of the analysis report will contain files <strong>Cuckoo</strong> was able to dump. For more information check out <strong><a href=\"https://cuckoo.readthedocs.org/en/latest/usage/results/index.html?highlight=dropped\" rel=\"nofollow\">Cuckoo's Analysis Result</a></strong> page. </p>\n<p>In addition, you could create your own custom module to process dropped files. What are <strong>processing modules</strong>? Per <a href=\"https://cuckoo.readthedocs.org/en/latest/customization/processing/index.html\" rel=\"nofollow\"><strong>Cuckoo Doc Website</strong></a>:  </p>\n<blockquote>\n<p>Cuckoo’s processing modules are Python scripts that let you define custom ways to analyze the raw results generated by the sandbox and append some information to a global container that will be later used by the signatures and the reporting modules. You can create as many modules as you want, as long as they follow a predefined structure...</p>\n</blockquote>\n<p>I am pretty sure there are other automated sandboxes out there as well. However, you have to remember, there is no 100% guarantee a sandbox will process your malware just the way it would execute in real life environment. </p>\n<p><strong>Second method</strong>. You really need to know <strong>HOW</strong> dropped files are deleted for this method to work. I have already mentioned it in the comments above. You could also patch your executable. Let's say <strong><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa363915%28v=vs.85%29.aspx\" rel=\"nofollow\">DeleteFile()</a></strong> is used. If patching malware is not an option, you could hook <strong><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa363915%28v=vs.85%29.aspx\" rel=\"nofollow\">DeleteFile()</a></strong> function system wide. It is standard Windows API used to delete a file. This function is exported by <strong>Kernel32.dll</strong>. There is a lot written about system wide or global hooks and ways to accomplish it. I will not go in details about it here. However, there is one thing worth mentioning, you have to make sure you \"trick\" malware into \"thinking\" file is indeed delete by returning appropriate values. That's why, there could be a problem with using ACL directly. What if malware checks a return of <strong>DeleteFile()</strong> (or whatever it uses to delete the dropped file), and gets <strong>ERROR_ACCESS_DENIED</strong>? It might very well divert it from the regular \"desired\" execution path. </p>\n<p>In addition, there are debuggers out there, that you help you make this process rather semi-automated. To mention few: <a href=\"http://debugger.immunityinc.com\" rel=\"nofollow\"><strong>Immunity Debugger</strong></a> by <a href=\"http://www.immunityinc.com\" rel=\"nofollow\"><strong>Immunity Inc</strong></a>. It employs very well supported Python API for automation and scripting. There are other option out there as well.</p>\n<p>What I would like to mention at the end is that you are absolutely right. You might need to look into creating a little tool of your own. There is no \"one-fits-all\" solution. Some automated solutions might work better then others. From time to time you will have to dig in. Remember, getting your hands \"dirty\" gives you great and in-depth understanding of things happening behind the \"curtain\". I personally love such an involvement, and find it to be a really great learning experience.</p>\n</div>",
            "votes": "6",
            "user": "PSS",
            "time": "Jun 18, 2013 at 21:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Thanks a lot for your explanation! So it decided then, I'll try to develop a such tool, something I need to think about how and I completely understand your passion about getting hand \"dirty\" as I also like to do it too.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can try the APIMonitor as well. Firstly filter the WINAPI calls you are looking for in this case we're looking for CreateProcessA, CreateProcessW, WriteFile, and WriteFileEx so that we can track any new file or process creation. Now load the executable into it and In the summary tab in the top-right corner It'll list all the API calls being made and the data being sent. In many cases, that's insufficient so we can put a breakpoint on the API called made, select the API call for the File being written, and right-click &gt; breakpoint&gt;before the call. Now rerun the executable and it'll be stopped when the file is created hence you can go into the folder, and review the file as per your requirement.</p>\n</div>",
            "votes": "0",
            "user": "BuggyBugs",
            "time": "May 4, 2024 at 17:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}