{
    "title": "What is the quickest way to run code of my own DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/14117/what-is-the-quickest-way-to-run-code-of-my-own-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not sure if the title is that telling but what I want to do is hack into an executable and do as little as necessary to get the code from my DLL running since I want to write as few lines of assembly code as possible.</p>\n<p>I already have the place where I'd like to jump in and I am ready to insert the necessary assembly instructions into the executable using ollydbg but since I never did that before I'm afraid I need a little help on those last steps.</p>\n<p>What I want to do is basically:</p>\n<ol>\n<li>Force the executable to load my DLL</li>\n<li>Push a few parameters onto the stack for <code>init_my_dll()</code></li>\n<li>call <code>init_dll()</code> </li>\n</ol>\n<p>but I'm not sure what's the best way to accomplish that. Is there a straight forward way to get this done?</p>\n<p>Btw: Is what I'm doing here actually called \"dll-injection\"? </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "351",
    "tags": [
        "ollydbg",
        "dll",
        "dll-injection"
    ],
    "user": "Stefan Falk",
    "time": "Dec 5, 2016 at 22:29",
    "comments": [
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">possible duplicate of <a href=\"http://reverseengineering.stackexchange.com/questions/2793/dll-injection-and-getprocaddress-with-the-winapi\" title=\"dll injection and getprocaddress with the winapi\">reverseengineering.stackexchange.com/questions/2793/â€¦</a></span>",
            "time": null
        },
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">But to answer your question - yes, what you're doing is called DLL / code injection, and what you want to do can be relatively easily achieved using Windows APIs (<code>VirtualAllocEx</code> -&gt; <code>CreateRemoteThread(..., LoadLibraryA, \"your_dll.dll\", ...)</code>). You can do it yourself if you want, too (that's called <i>manual mapping</i>).</span>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">This is \"dll-injection\". Like mentioned by Martin, just create a thread at the location of 'LoadLibraryA' with the library name. As for additional parameters, you should be able to mess with the stack.</span>",
            "time": null
        },
        {
            "user": "Stefan Falk",
            "text": "<span class=\"comment-copy\">@Martin So the \"easiest\" way is to inject code into the executable which calls <code>CreateRemoteThread()</code> in order to load my dll, then call <code>GetProcAddress()</code> to get the address of  <code>init_my_dll()</code> and call it? The link you are referring seems to do something different - if I get this right there are <i>two</i> processes in the end. I don't get how I would make the target process call <code>init_my_dll()</code> as described there.</span>",
            "time": null
        },
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">No - you don't use <code>GetProcAddress</code> to call your function. You use it to find <code>LoadLibraryA</code>, and call it. That function will load your DLL, and will call its <code>DllMain</code> - and that function could be calling your <code>init_my_dll</code> function. That said - if you're trying to do this with a game, be careful, those have anti-cheats which usually detect this technique and ban you.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I ended up placing the required code in the executable:</p>\n<pre><code>00C0B500   68 B6B4C000      PUSH ForgedAl.00C0B4B6                    ; ASCII \"lua-extension.dll\"\n00C0B505   FF15 88F4C000    CALL DWORD PTR DS:[&lt;&amp;KERNEL32.LoadLibrar&gt; ; kernel32.LoadLibraryA\n\n00C0B50B   68 C9B4C000      PUSH ForgedAl.00C0B4C9                    ; ASCII \"initialize\"\n00C0B510   50               PUSH EAX                                  ; push dll handle\n00C0B511   FF15 8CF4C000    CALL DWORD PTR DS:[&lt;&amp;KERNEL32.GetProcAdd&gt; ; kernel32.GetProcAddress\n\n00C0B517   56               PUSH ESI                                  ; holds pointer to the struct I want to steal -&gt; parameter of \"initialize\"\n00C0B518   FFD0             CALL EAX                                  ; call \"initialize\"\n00C0B51A   5E               POP ESI\n\n00C0B51B  ^E9 6648D0FF      JMP ForgedAl.0090FD86                     ; jump back and continue original program flow\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Stefan Falk",
            "time": "Dec 14, 2016 at 22:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}