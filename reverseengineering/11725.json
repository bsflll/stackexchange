{
    "title": "Stack and local variables",
    "link": "https://reverseengineering.stackexchange.com/questions/11725/stack-and-local-variables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to disassemble this code:</p>\n<pre><code>int main()\n{\n    int arr[5] = {1,2,3,4,5};\n    int i;\n    for(i=0;i&lt;5;i++)\n    {\n        printf(\"Element:%d\\n\",arr[i]);\n    }\n    return 0;\n}\n</code></pre>\n<p>IDA output: <code>sub esp, 30h</code></p>\n<p>Question: What does it mean? I thought it would be <code>18h(5x4+4)</code></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "664",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Trey",
    "time": "Jan 9, 2016 at 7:34",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">Can you follow the assembly to see what it's doing with the extra space? (If not you might want to post some more if it's not too long.) Which compiler or optimisation settings - I assume you do still have a loop, it hasn't unrolled it? Is it using pushes to set up function call arguments, or is it storing them to [esp], [esp+4] etc., i.e. has it reserved some extra stack space for those?</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">sun esp,30h means the compiler made a space in stack for 0x30 the space / value is compiler and optimization dependent and you shouldn't be caring much if the compiler thinks it needs a football ground to play chess then let it play in a soccer ground you concentrate on the moves</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems like you are compiling under amd64 (which is quite likely in 2016 ;). Compiler allocates all stack memory (but not only, the same for function arguments) with alignment to 8 bits. You assume, that int is 32 bits, and it might me 32 bits on your machine, but compiler still will be allocating 8 bytes (64 bits). So 5*8+8=48 = 0x30.</p>\n<p>Try allocating an array of five chars (aka uint8_t). The compiler will still allocate 8 bytes * number of elements.</p>\n<p>Read about attribute packed (gcc) or pragma pack (Windows).</p>\n</div>",
            "votes": "4",
            "user": "aleek",
            "time": "Mar 1, 2016 at 10:53",
            "is_accepted": true,
            "comments": []
        }
    ]
}