{
    "title": "lldb: break at start of actual code, not entrypoint",
    "link": "https://reverseengineering.stackexchange.com/questions/6719/lldb-break-at-start-of-actual-code-not-entrypoint",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want lldb to break at the start of the actual code of an OS X application (which might be called <em>main</em> if symbols are existing). </p>\n<p>I am currently looking this up by hand, but as I want to script some actions, it would be great if this could somehow be realized automatically</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/8fUYr.png\"/></p>\n<p>Do you have any idea if there is a way?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "5k",
    "tags": [
        "debugging",
        "osx",
        "lldb"
    ],
    "user": "muffel",
    "time": "Nov 26, 2014 at 18:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try this:</p>\n<pre><code>(lldb) break set -n main\n(lldb) r\n(lldb) thread backtrace\n\nframe #0: 0x0000000000405696 app`main(argc=1, argv=...) + 22 at app.cpp:11\nframe #1: 0x00007ffff7216ec5 libc.so.6`__libc_start_main + 245\nframe #2: 0x0000000000401f79 app\n</code></pre>\n<p>The frame below (before) main is the one you want, and it's showing the library and function name.  You can set a breakpoint on it just like any other:</p>\n<pre><code>(lldb) break set -n __libc_start_main\nBreakpoint 1: where = libc.so.6`__libc_start_main, address = 0x00007ffff7216dd0\n</code></pre>\n<p>or, to be more specific:</p>\n<pre><code>(lldb) break set -s libc.so.6 -n __libc_start_main\nBreakpoint 2: where = libc.so.6`__libc_start_main, address = 0x00007ffff7216dd0\n</code></pre>\n<p>If you know the address, you could use it directly:</p>\n<pre><code>(lldb) break set -a 0x000000...\n</code></pre>\n<p>Then restart the process, and you should hit it immediately:</p>\n<pre><code>(lldb) r\nThere is a running process, kill it and restart?: [Y/n] y\n...\n* thread #1: ...__libc_start_main, name = 'app', stop reason = breakpoint\nframe #0: 0x00007ffff7216dd0 libc.so.6`__libc_start_main\n-&gt; ...: pushq  %r14\n(lldb)\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Tim Sylvester",
            "time": "Sep 4, 2015 at 16:43",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try adding a breakpoint on a bad address. In GDB, the way I do this is: <code>b *0xf00</code>, or something similar. Here's what it looks like for me in GDB, and maybe you'll find a way to duplicate the same behavior:</p>\n<pre><code>\n$ gdb ./a.out\n(gdb) b *0xf00\n(gdb) r\nStarting program: ./a.out \nWarning:\nCannot insert breakpoint 1.\nCannot access memory at address 0xf00\n\n(gdb) x/2i $rip\n=&gt; 0x7ffff7ddb2d0 &lt;_start&gt;:   mov    rdi,rsp\n   0x7ffff7ddb2d3 &lt;_start+3&gt;: call   0x7ffff7ddea70 \n</code></pre>\n</div>",
            "votes": "1",
            "user": "Peter Goodman",
            "time": "Nov 28, 2014 at 0:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Peter Goodman",
                    "text": "<span class=\"comment-copy\">Oh hrm, I think I misunderstood the question. This is a convenient trick nonetheless :-P  Perhaps you can find out if there's a known entrypoint before main, e.g. __libc_start_main. You might find that there's a semi-hackish way to add a breakpoint at an address that is at some fixed, predictable offset relative to the entrypoint.</span>",
                    "time": null
                },
                {
                    "user": "muffel",
                    "text": "<span class=\"comment-copy\">thanks for your answer :) My problem is, that I would prefer a scriptable workflow for this. Of course I could look for some kind of a <i>main</i>, but that doesn't necessarily exist..</span>",
                    "time": null
                }
            ]
        }
    ]
}