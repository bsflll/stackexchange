{
    "title": "How can I extract the complete filesystem (including temp files) from a router's firmware?",
    "link": "https://reverseengineering.stackexchange.com/questions/8526/how-can-i-extract-the-complete-filesystem-including-temp-files-from-a-routers",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm a newbie to reverse engineering, so pardon my ignorance. I am trying to extract the complete filesystem from a Netgear router's firmware. Using <code>binwalk</code>, I was able to extract the kernel and a <code>squashfs</code> file system. So far so good. The issue is that the file system is incomplete. Many directories (e.g. <em>/etc</em>, <em>/mnt</em>, <em>/var</em>, <em>/www</em>) are only symbolic links to non-existent directories in <em>/tmp</em>, which itself is empty. </p>\n<p>I'm guessing that (as I've seen on other routers) the contents of <em>/tmp</em> will be another filesystem that is created on startup and stored in RAM. Am I correct? And is there some way of determining the contents of the temporary filesystem from the firmware? </p>\n</div>",
    "votes": "4",
    "answers": 3,
    "views": "4k",
    "tags": [
        "firmware"
    ],
    "user": "P Jones",
    "time": "Mar 23, 2015 at 0:10",
    "comments": [
        {
            "user": "booto",
            "text": "<span class=\"comment-copy\">You might find that it populates the tempfs on boot via an init script. I'd normally suggest looking in <i>/etc/init.d</i> but you mention that path lives in the tempfs itself. If you could link to the download page for the firmware, it could help in getting more specific information.</span>",
            "time": null
        },
        {
            "user": "P Jones",
            "text": "<span class=\"comment-copy\">@booto: There is an init file, and I'd already suspected it might be what I was looking for, but being new to all this, I wasn't sure how to get into it. (BTW it's just a link to busybox, so it may be a red herring).</span>",
            "time": null
        },
        {
            "user": "P Jones",
            "text": "<span class=\"comment-copy\">@booto: the router model number is WNR1000v3. The Netgear support site is <a href=\"http://downloadcenter.netgear.com/#register\" rel=\"nofollow noreferrer\">here</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I checked the newest firmware of WNR1000v3 and I could extract <code>/etc</code> and <code>/www</code> folders without any problem using binwalk v2.0.0.<p>\nYou can get a lot of useful information about the whole system if you download the GPL codes <a href=\"http://kb.netgear.com/app/answers/detail/a_id/2649/~/netgear---open-source-code-for-programmers-(gpl)\" rel=\"nofollow\">http://kb.netgear.com/app/answers/detail/a_id/2649/~/netgear---open-source-code-for-programmers-(gpl)</a>.<br/>\nAs I see from the GPL code, the router starts with the <code>/sbin/rc</code> file, which initializes the mounts, networks, etc and starts services. The tmp folder is generally a ramfs, which is mounted from rc with the following line:<br/></p>\n<pre><code>mount(\"ramfs\", \"/tmp\", \"ramfs\", MS_MGC_VAL, NULL);\n</code></pre>\n</p></div>",
            "votes": "4",
            "user": "ebux",
            "time": "Apr 23, 2015 at 9:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try the extract-firmware.sh from the firmware-mod-kit -&gt;</p>\n<p><a href=\"https://code.google.com/p/firmware-mod-kit/wiki/Documentation?tm=6\" rel=\"nofollow\">https://code.google.com/p/firmware-mod-kit/wiki/Documentation?tm=6</a></p>\n</div>",
            "votes": "2",
            "user": "tyh",
            "time": "Mar 23, 2015 at 4:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "P Jones",
                    "text": "<span class=\"comment-copy\">Thanks! I wI'll try it out tonight and let you know how it goes.</span>",
                    "time": null
                },
                {
                    "user": "P Jones",
                    "text": "<span class=\"comment-copy\">Sorry for the delay. Busy, busy, busy.  Although I'm happy to have been shown a new tool (with seems to have some features that I'd like to play with) the firmware mod kit got me essentially the same result as binwalk. I've already extracted the firmware and a filesystem. What I need is to know how to get the temp filesystem that's written at startup.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have access to the model, pickup a cheep JTAG interface, and get hacking.\nNow If that's not possible, I'd check out QEMU for vitalizing the firmware.\nand getting a shell to play with.</p>\n<p>I highly recommend checking out devttys0 blog series \"exploiting embedded systems\" parts 1 to 4.\n<a href=\"http://www.devttys0.com/2011/09/exploiting-embedded-systems-part-1/\" rel=\"nofollow\">http://www.devttys0.com/2011/09/exploiting-embedded-systems-part-1/</a></p>\n<p>In part 4 he's using QEMU as an exploit dev environment. Great stuff! </p>\n</div>",
            "votes": "0",
            "user": "0x535431",
            "time": "Mar 27, 2015 at 18:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "P Jones",
                    "text": "<span class=\"comment-copy\">The JTAG interface is a bit out of my skill set at the moment, but I may work to change that,  As for QEMU and devttys0 I will look into that right away. His blog has been very helpful so far.   Thanks for your help!</span>",
                    "time": null
                }
            ]
        }
    ]
}