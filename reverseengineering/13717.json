{
    "title": "Reverse Engineering Exported DLL Function",
    "link": "https://reverseengineering.stackexchange.com/questions/13717/reverse-engineering-exported-dll-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to read the arguments sent to an external dll file \"FlashToolLib.dll\". My hook function is never triggered, I am guessing because I have the address wrong.  I have tried the address in both the dll, and the exe</p>\n<p><strong>FUNCTION:</strong></p>\n<pre><code> public FlashTool_Connect_BROM_ByName\n.text:5F866580 FlashTool_Connect_BROM_ByName proc near\n.text:5F866580\n.text:5F866580 var_B4          = dword ptr -0B4h\n.text:5F866580 var_B0          = dword ptr -0B0h\n.text:5F866580 var_AC          = dword ptr -0ACh\n.text:5F866580 var_A8          = dword ptr -0A8h\n.text:5F866580 var_A4          = dword ptr -0A4h\n.text:5F866580 var_A0          = dword ptr -0A0h\n.text:5F866580 var_9C          = dword ptr -9Ch\n.text:5F866580 var_98          = dword ptr -98h\n.text:5F866580 var_94          = dword ptr -94h\n.text:5F866580 var_84          = dword ptr -84h\n.text:5F866580 var_80          = dword ptr -80h\n.text:5F866580 var_7C          = dword ptr -7Ch\n.text:5F866580 var_78          = dword ptr -78h\n.text:5F866580 var_68          = dword ptr -68h\n.text:5F866580 var_64          = dword ptr -64h\n.text:5F866580 var_60          = dword ptr -60h\n.text:5F866580 var_5C          = dword ptr -5Ch\n.text:5F866580 var_4C          = dword ptr -4Ch\n.text:5F866580 var_48          = dword ptr -48h\n.text:5F866580 var_44          = dword ptr -44h\n.text:5F866580 var_40          = dword ptr -40h\n.text:5F866580 var_30          = dword ptr -30h\n.text:5F866580 var_2C          = dword ptr -2Ch\n.text:5F866580 var_28          = dword ptr -28h\n.text:5F866580 var_4           = dword ptr -4\n.text:5F866580 arg_0           = dword ptr  8\n.text:5F866580 arg_4           = dword ptr  0Ch\n.text:5F866580 arg_8           = dword ptr  10h\n.text:5F866580 arg_C           = dword ptr  14h\n.text:5F866580 arg_10          = dword ptr  18h\n</code></pre>\n<p><strong>MY C++ CODE:</strong></p>\n<pre><code>    #include \"stdafx.h\"\n#include &lt;iostream&gt;\n#include &lt;detours.h&gt;\n#include &lt;Windows.h&gt;\n\n\nvoid hookedFunc(DWORD arg1, DWORD arg2, DWORD arg3, DWORD arg4, DWORD arg5) {\n\n\n    //Msgbox - arg 1//////////////////////////////////////////////////////////////////////////////\n    WCHAR szTest[10]; // WCHAR is the same as wchar_t\n                      // swprintf_s is the same as sprintf_s for wide characters\n    swprintf_s(szTest, 10, L\"%d\", arg1); // use L\"\" prefix for wide chars\n    MessageBox(NULL, szTest, L\"TEST\", MB_OK); // a messageboy example again L as prefix\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    std::cout &lt;&lt; \"original function: argument1 = \" &lt;&lt; arg1 &lt;&lt; std::endl; //print argument\n    std::cout &lt;&lt; \"original function: argument2 = \" &lt;&lt; arg2 &lt;&lt; std::endl; //print argument\n    std::cout &lt;&lt; \"original function: argument3 = \" &lt;&lt; arg3 &lt;&lt; std::endl; //print argument\n    std::cout &lt;&lt; \"original function: argument4 = \" &lt;&lt; arg4 &lt;&lt; std::endl; //print argument\n    std::cout &lt;&lt; \"original function: argument5 = \" &lt;&lt; arg5 &lt;&lt; std::endl; //print argument\n\n}\n\n\n\nBOOL APIENTRY DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)\n{\n    HMODULE FlashToolLib = GetModuleHandleA(\"FlashToolLib.dll\");\n    LPVOID fConnect = (LPVOID)GetProcAddress(FlashToolLib, \"FlashTool_Connect_BROM_ByName\");\n\n\n    switch (dwReason)\n    {\n\n\n    case DLL_PROCESS_ATTACH:\n\n\n        MessageBox(NULL, L\"We are in.\", L\"Injection Success.\", MB_OK);\n        DetourTransactionBegin();\n        DetourAttach((PVOID*)fConnect,(PVOID)hookedFunc);\n        DetourTransactionCommit();\n\n    }\n    return TRUE;\n}\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "function-hooking",
        "dll-injection"
    ],
    "user": "user1698144",
    "time": "Oct 14, 2016 at 3:58",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">avoid using absolute addresses like 4axxxxx unless you are 120â„… sure that the modules in question will always load at the same base address</span>",
            "time": null
        },
        {
            "user": "user1698144",
            "text": "<span class=\"comment-copy\">What would the alternative be?</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">have you tried to detour any other function?  It might be that the one that you hooked was called before your DLL was loaded, and then never called again.</span>",
            "time": null
        },
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">I couldn't find docs on the <code>DetourAttach</code> function but I <i>think</i> you're using it incorrectly. See <a href=\"http://stackoverflow.com/questions/16981225/how-to-use-detourattach-for-a-pointer-to-a-function-in-hex\">this</a>. Maybe try with <code>DetourAttach((PVOID*) &amp;fConnect, (PVOID) hookedFunc)</code>?</span>",
            "time": null
        },
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">Apart from that, have you tried checking what's at the function's offset with a memory viewer, right after hooking, to check if it was done properly? Have you tried putting a breakpoint on the function to check if it gets called at all?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Searched the local drive for an unknown binary that uses a dll<br/>\nfound <code>calc.exe from gnuwin32</code> it uses 2 dlls <code>calc2.dll</code> and <code>readline5.dll</code></p>\n<p>copied all 3 of them to a test directory </p>\n<pre><code>e:\\GNUWIN32\\bin&gt;cp -v calc.exe calc2.dll readline5.dll e:\\test\\detours\\.\n`calc.exe' -&gt; `e:\\\\test\\\\detours\\\\./calc.exe'\n`calc2.dll' -&gt; `e:\\\\test\\\\detours\\\\./calc2.dll'\n`readline5.dll' -&gt; `e:\\\\test\\\\detours\\\\./readline5.dll'\n</code></pre>\n<p>wrote a small idc script to dump an arbitrary function </p>\n<pre><code>e:\\test\\detours&gt;cat temp.idc\n#include &lt;idc.idc&gt;\nstatic main(void)\n{\n  auto fp;\n  fp = fopen(\"bla.lst\",\"w\");\n  GenerateFile(OFILE_LST,fp,MinEA(),MaxEA(),0x0);\n  fclose(fp);\n  Exit(2);\n}\n</code></pre>\n<p>executed idafree to make a lst file</p>\n<pre><code>idag.exe -B -Stemp.idc calc2.dll\n</code></pre>\n<p>found the RVA of an arbitrary Function</p>\n<pre><code>e:\\test\\detours&gt;grep -i imagebase bla.lst\n.text:68D41000 ; Imagebase   : 68D40000\n\ne:\\test\\detours&gt;grep -i export.*zcmp bla.lst\n.text:68DC1440 ; Exported entry 791. zcmp\n.text:68DC1E10 ; Exported entry 792. zcmpmod\n\ne:\\test\\detours&gt;set /a 0x68dc1440-0x68d40000\n529472\n</code></pre>\n<p>made a simple poc using the rva </p>\n<pre><code>//compiled and linked with enterprise wdk using\n//cl /LD /W4 /Ox /Zi /analyze /EHsc d2r.cpp /link /DEBUG /RELEASE %linklibs% /EXPORT:DFunc\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n#include \"include\\detours.h\"\n#pragma comment (lib , \"lib\\\\detours.lib\")\ntypedef void (__cdecl *SomeFunction)(int,int,int,int,int,int);\nvoid  __cdecl DFunc(int i,int j,int k,int l,int m,int n);\nSomeFunction Func2Detour = (SomeFunction)((DWORD)GetModuleHandle(\"calc2.dll\") + 529472 );\nvoid  __cdecl DFunc(int i,int j,int k,int l,int m,int n) {\n  int x = 0;\n  printf(\"Arg %2d = 0x%08x\\t0x%08x\\n\" , x++,i,*(int*)i);\n  printf(\"Arg %2d = 0x%08x\\n\" , x++, j);\n  printf(\"Arg %2d = 0x%08x\\n\" , x++, k);\n  printf(\"Arg %2d = 0x%08x\\t0x%08x\\n\" , x++,l,*(int *)l);\n  printf(\"Arg %2d = 0x%08x\\n\" , x++, m);\n  printf(\"Arg %2d = 0x%08x\\n\" , x++, n);\n  Func2Detour(i,j,k,l,m,n);\n}\nINT APIENTRY DllMain(HMODULE,DWORD Reason,LPVOID) {\n  if (Reason == DLL_PROCESS_ATTACH ){\n    DetourTransactionBegin();\n    DetourUpdateThread(GetCurrentThread());\n    DetourAttach(&amp;(PVOID&amp;)Func2Detour, DFunc);\n    DetourTransactionCommit();\n  }\n  return TRUE;\n}\n</code></pre>\n<p>compiled and linked as commented in source above </p>\n<pre><code>Microsoft (R) C/C++ Optimizing Compiler Version 19.00.23506 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nd2r.cpp\nMicrosoft (R) Incremental Linker Version 14.00.23506.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:d2r.dll\n/dll\n/implib:d2r.lib\n/debug\n/DEBUG\n/RELEASE\nuser32.lib\nkernel32.lib\ndbghelp.lib\n/EXPORT:DFunc\nd2r.obj\n   Creating library d2r.lib and object d2r.exp\n</code></pre>\n<p>injected the dll with <strong>withdll.exe</strong> from detours sample </p>\n<pre><code>e:\\test\\detours&gt;e:\\detour\\bin.X86\\withdll.exe /d:d2r.dll .\\calc.exe\nwithdll.exe: Starting: `.\\calc.exe'\nwithdll.exe:   with `e:\\test\\detours\\d2r.dll'\nC-style arbitrary precision calculator (version 2.11.10.1)\nCalc is open software. For license details type:  help copyright\n[Type \"exit\" to exit, or \"help\" for help.]\n\n;\n</code></pre>\n<p>the detour dumps all the six arguments </p>\n<pre><code>; 2+2\nArg  0 = 0x0134b750     0x00000002\nArg  1 = 0x00000001\nArg  2 = 0x00000000\nArg  3 = 0x68de11f4     0x00000002\nArg  4 = 0x00000001\nArg  5 = 0x00000000\n        4\n; 45^89\n        1367457148855142104017389933103900519105\n058455901337287730364197964327832579556343262083\n; 4^8\nArg  0 = 0x0134b7f8     0x00000004\nArg  1 = 0x00000001\nArg  2 = 0x00000000\nArg  3 = 0x68de11fc     0x00000004\nArg  4 = 0x00000001\nArg  5 = 0x00000000\n        65536\n; 4.5^8\nArg  0 = 0x0134b828     0x0000002d\nArg  1 = 0x00000001\nArg  2 = 0x00000000\nArg  3 = 0x0134dab8     0x0000000a\nArg  4 = 0x00000001\nArg  5 = 0x00000000\n        168151.25390625\n; 3&amp;5\nArg  0 = 0x0134b828     0x00000003\nArg  1 = 0x00000001\nArg  2 = 0x00000000\nArg  3 = 0x68de11f8     0x00000003\nArg  4 = 0x00000001\nArg  5 = 0x00000000\n        1\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Oct 14, 2016 at 21:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}