{
    "title": "Attaching gdb to hidden library/process",
    "link": "https://reverseengineering.stackexchange.com/questions/2717/attaching-gdb-to-hidden-library-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On OSX I'm trying to debug/attach to a framework that the application unarchives at runtime. The frame work normally resides in the /Resources folder within the application bundle as .gz file. </p>\n<p>The problem I'm having is that framework doesn't appear to show up anywhere in the processes that I can see. Besides that I have no idea how to attach to it while it's loaded in memory to set a breakpoint so I can start debugging. </p>\n<p>Any tips or advice on the peculiarly crafted framework would be appreciated.</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "458",
    "tags": [
        "debuggers",
        "gdb"
    ],
    "user": "Joe Habadas",
    "time": "Aug 31, 2013 at 6:10",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">You should be a little more specific. There are ways to attach to forked children. The way you write the question it's a bit too unspecific. E.g. how to give advice on something we don't know what it is?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't have experience of OSX, but at the least in Linux you can do this:</p>\n<p>First, get some idea what system calls (<code>syscall</code> or <code>int 80h</code> in Linux) the library might be using, if any. You can use your favorite disassembler or code tracer for this part. If the library itself does not have any system calls, find out or deduce what system calls its child functions may be using. If you have no idea or this step gets too difficult due to the size and/or complexity of the library, you can skip this first part.</p>\n<p>Then, start <code>gdb</code> with the program. If by now you already know which system calls to catch, then catch only those. Otherwise catch them all. The command is <code>catch syscall</code>. Then <code>r</code> to run the program.</p>\n<p>At this point I usually do <code>disp/10i $pc</code> to see a little a bit of the code.</p>\n<p>Once you're inside the system call, do <code>backtrace</code> to print the stack frames. Set breakpoints in all of them or only in the ones you're interested of. The instruction to use is <code>break</code>, for example <code>break *0xdeadbeef</code>. Then <code>continue</code>.</p>\n<p>If you arrived in the desired library or function, great. If not, then <code>delete</code> the breakpoint you arrived in and then <code>continue</code>, and repeat until you arrive in the function you're interested of.</p>\n<p>Hope this helps.</p>\n</div>",
            "votes": "2",
            "user": "nrz",
            "time": "Sep 1, 2013 at 8:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">To find out about system calls you could use <code>ktrace</code>, <code>dtrace</code> and <code>struss</code>, depending on the OSX version.</span>",
                    "time": null
                }
            ]
        }
    ]
}