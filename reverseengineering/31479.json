{
    "title": "Java bytecode dynamic analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/31479/java-bytecode-dynamic-analysis",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been trying to patch a certain functionality of a jar file, that's essentially a GUI app. I've tried numerous java agents -as it seems to be the only viable option for java- for such a task, however quite a few limitations arose. Namely:</p>\n<ul>\n<li>Previously loaded classes don't fire up again during logging (causes plot holes).</li>\n<li>Specific method calls are often omitted.</li>\n<li>Real time decompilation is unheard of when it comes this approach, even though it's generally feasible.</li>\n</ul>\n<p>I was wondering if there's a better approach -or an alternative that addresses those 'issues'- to go about dynamically analyse java executables, and not just instrumentation; as it seems to be geared more towards debugging during development rather than reverse engineering.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "103",
    "tags": [
        "java",
        "jar"
    ],
    "user": "kqvanity",
    "time": "Jan 28, 2023 at 2:51",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">So your question is a bout temporarily modifying a Java program? Because for a permanent modification it would be easier to directly modify the class files. For temporary modification <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">frida.re</a> should be suitable. Hooking and modifying method arguments and return values should be easier with Frida than using an JavaAgent.</span>",
            "time": null
        },
        {
            "user": "kqvanity",
            "text": "<span class=\"comment-copy\">@Robert  <code>your question is a bout temporarily modifying a Java program?</code> It's more about understanding the obfuscated code, by interacting with certain functionalities at the app itself then simultaneously seeing which specific portions are getting called, and selectively inspect them (that's why i was asking for concurrent deobfuscation to omit this separate inspection stage). <code>should be easier with Frida than using an JavaAgent.</code> Aw. I thought it was only confined to Android.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Since Frida 12.10 there is also support for HotSpot JVM (non-Android) <a href=\"https://frida.re/news/2020/06/29/frida-12-10-released/\" rel=\"nofollow noreferrer\">frida.re/news/2020/06/29/frida-12-10-released</a></span>",
            "time": null
        },
        {
            "user": "kqvanity",
            "text": "<span class=\"comment-copy\">Thanks. Will look into frida as of now, as I've never dealt with it before.</span>",
            "time": null
        }
    ],
    "answers_data": []
}