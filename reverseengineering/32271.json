{
    "title": "Retrieve & dump type information from IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/32271/retrieve-dump-type-information-from-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to retrieve IDA Pro .idb database's each type info, such as:</p>\n<ul>\n<li><em>size and name of a structure;</em></li>\n<li><em>each member variable type and name;</em></li>\n<li><em>each member variable size and offset;</em></li>\n</ul>\n<p>And dump it to a .h file in a formatted manner. (\"Create C header file...\" just dumps without sizes and offsets and does not allow to pre-format it.) How to do this?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "292",
    "tags": [
        "ida",
        "c++",
        "idapython",
        "dumping",
        "script"
    ],
    "user": "void_17",
    "time": "Sep 8, 2023 at 6:06",
    "comments": [
        {
            "user": "mimak",
            "text": "<span class=\"comment-copy\">You can use <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_struct.html\" rel=\"nofollow noreferrer\">ida_struct</a> API to retrieve the needed information via Python terminal/plugins</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's obviously doable (you already noted the <code>Create C header file</code> functionality), but if you want to customize the output, you'll have to code it yourself.</p>\n<p>Here's what you'll need:</p>\n<ul>\n<li><code>ida_typeinf.first_named_type</code> and <code>ida_typeinf.next_named_type</code> to iterate through all of the type names in a TIL (i.e., the main TIL for an IDB).</li>\n<li>To retrieve a <code>tinfo_t</code> type object from a type name, create <code>tif = ida_typeinf.tinfo_t()</code>, then do <code>tif.get_named_type(name)</code> with the name returned from the functions above.</li>\n<li>Once you have the <code>tinfo_t tif</code> object, if <code>tif.is_struct()</code> returns <code>True</code>, you can get the structure details via the function <code>tif.get_udt_details</code> by passing it a new <code>ida_typeinf.udt_type_data_t</code> data structure.</li>\n<li><code>ida_typeinf.udt_type_data_t</code> is a vector of <code>udt_member_t</code> objects (plus additional information, e.g. size and alignment). Each <code>udt_member_t</code> object describes one field in a <code>struct</code> or <code>union</code>. You can retrieve member names via the <code>.name</code> field, and each field's <code>tinfo_t</code> type via the <code>.type</code> field.</li>\n</ul>\n<p>That's all you need. However, if you've never worked with types programmatically before, you're going to find it tricky. It is already evident from the above that <code>tinfo_t</code> is a mutually recursive data structure, i.e., the <code>tinfo_t</code> for a structure contains other data structures (like <code>udt_type_data_t</code>) that themselves contain <code>tinfo_t</code> objects to describe structure field types. Due to the mutual recursion in the data structures, functions involving <code>tinfo_t</code> objects are often mutually recursive.</p>\n</div>",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Sep 8, 2023 at 20:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "void_17",
                    "text": "<span class=\"comment-copy\">Thank you so much for such a detailed answer! I will try this</span>",
                    "time": null
                },
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">Very nice. Thanks for the explanation. It took me like 2 hours to find your answer and only then I managed to understand how I have to walk up the inheritance tree all the classes and also walk all the members of classes.</span>",
                    "time": null
                }
            ]
        }
    ]
}