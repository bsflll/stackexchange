{
    "title": "Print string at address with radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/20340/print-string-at-address-with-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have created a very basic golang program which display a message with fmt.Println().</p>\n<p>Here is what is see in radare2:</p>\n<pre><code>lea rcx, obj.main.statictmp_0 ; 0x4c84b0 ; \"y[K\"\nmov qword [local_48h], rcx\nlea rcx, [local_40h]        ; 0x40 ; '@' ; 64\nmov qword [rsp], rcx\nmov qword [local_8h], 1\nmov qword [local_10h], 1\ncall sym.fmt.Println\n</code></pre>\n<p>I suppose obj.main.statictmp_0 contains my string message.</p>\n<p>I have tried:</p>\n<pre><code>ps @obj.main.statictmp_0\n</code></pre>\n<p>but it does not display my message.\nAny idea ?</p>\n<p>Thanks</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "radare2"
    ],
    "user": "Bob5421",
    "time": "Jan 11, 2019 at 14:01",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">Well, GO compiled binaries might behave differently than other binaries. Can you share the binary itself? :)</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">go uses  counted string with no zerotermination  a pointer and size array   struct chararray { char * str , int size }   chararray[] = { \"foo\" ,3 ;.........}   so  0x4c84b0 in your case is pointer to  string  since you are on x64 the next qword that is 0x4c84bc will hold the string length</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>use <code>pf S @obj.main.statictmp_0</code>. string length is at address <code>@obj.main.statictmp_0+8</code> if using 64bit or <code>@obj.main.statictmp_0+4</code> if using 32bit!</p>\n<pre><code>pf S @obj.main.statictmp_0   ; gives you string\npf p @obj.main.statictmp_0+8 ; gives you string length\n</code></pre>\n</div>",
            "votes": "0",
            "user": "arman",
            "time": "Jan 11, 2019 at 18:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}