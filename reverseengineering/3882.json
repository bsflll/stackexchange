{
    "title": "How does Kernel Detective check if API functions are hooked?",
    "link": "https://reverseengineering.stackexchange.com/questions/3882/how-does-kernel-detective-check-if-api-functions-are-hooked",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One of the many features of Kernel Detective is the possibility to retrieve the original addresses of the native apis functions implemented in the driver win32k.sys and checking if they are hooked. What are the possible ways to achieve the same ? </p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "kernel-mode"
    ],
    "user": "user4170",
    "time": "Mar 16, 2014 at 10:57",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">You might be also interested in HookShark. I know this is not the place for guessing, but I think it works the same. \"It scans through the code-section of every loaded module of each running process and compares it with the file-image\"</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For conventional inline hooks (that just replace the first few bytes of the function), you can simply read the first few bytes of each function to check if it is hooked. Deeper inline hooks will be difficult to detect.</p>\n<p>Apart from inline hooks, someone may also hook the SSDT. The SSDT is a table that sits between syscalls from WINAPI's and the kernelmode functions that implement them. The SSDT is indexed by syscall ID and maps each ID to the address of the kernelmode function. This mapping <a href=\"http://j00ru.vexillium.org/ntapi/\" rel=\"nofollow noreferrer\">remains static</a> for any given service pack for a Windows OS. So it is very easy to figure out what function each syscall ID corresponds to, and thus what function each entry in the SSDT should correspond to.</p>\n<p>To detect SSDT hooks and restore original addresses, you could try any of the following:</p>\n<p>You could load your program/driver once before the SSDT is hooked, and grab the original addresses. This would be fairly reliable, as long as you load your driver before the hook is in place.</p>\n<p>Alternatively, you could download the .pdb file from Microsoft's symbol store and get the original addresses from it using the DIA SDK or DbgHelp API's. This is very reliable as long as a connection is present and nothing is interfering with it. However, this would be quite slow for a .pdb as big as the one for ntoskrnl or win32k.</p>\n<p>There are actually two SSDT's, a regular SSDT and a Shadow SSDT. If only the first SSDT is hooked, you could check the values with those in the Shadow SSDT. Or vice versa.</p>\n<p>You can check if any entries in the SSDT point to addresses outside the kernel/win32k. This is a very reliable way of detecting the hooks, but it won't easily get you the original address.</p>\n<p>Scanning for a byte signature is a somewhat reliable and stealthy way you could locate the original addresses.</p>\n<p>There's also a similar question <a href=\"https://reverseengineering.stackexchange.com/questions/1461/is-there-an-easy-way-to-detect-if-the-ssdt-has-been-patched-from-a-memory-dump\">here</a></p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ivan_pozdeev",
                    "text": "<span class=\"comment-copy\">An alternative way to read the original SSDT entries is from the kernel image on disk. It's a PE file, and <code>KeServiceDescriptorTable</code> is an exported entry.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think you should read from original file (exe, dll) of exported API function and compare with the data in the loading memory. To avoid the fake result in which the read API functions are also hooked, you should use some tricks to get the original read API function from memory.</p>\n<p>Hope this help!</p>\n</div>",
            "votes": "1",
            "user": "tuantm",
            "time": "Jun 9, 2014 at 1:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}