{
    "title": "Bypassing ASLR without leak address",
    "link": "https://reverseengineering.stackexchange.com/questions/26553/bypassing-aslr-without-leak-address",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found a stack buffer overflow.</p>\n<p>Currently, this is the situation:</p>\n<ul>\n<li>NX/DEP disabled</li>\n<li>ASLR enabled</li>\n<li>Not a PIE</li>\n</ul>\n<p>I am able to override the return address and jump to PLT sections.</p>\n<p>My problem is that I can only copy data until the return address because of the null byte, therefore I can not jump to my shellcode in the stack. The binary starts in <code>0x00090000</code>, so it is a problem to perform ROP gadget, since I can copy only one address until the return address.</p>\n<p>Also, my binary contains a call to system that I can jump to, but in this case I need to put the address of the string argument in R0, and this is not possible due to the ASLR. I am also able to override 4 registers.</p>\n<p>Does anyone have an idea how to bypass the ASLR here without leaking an address? Current architecture: ARM.</p>\n</div>",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "exploit",
        "buffer-overflow"
    ],
    "user": "alpico",
    "time": "Nov 24, 2021 at 15:23",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">You mention ASLR but then a fixed load address, so which is it?</span>",
            "time": null
        },
        {
            "user": "alpico",
            "text": "<span class=\"comment-copy\">The binary is compiled without PIE</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">So ASLR does not apply then?</span>",
            "time": null
        },
        {
            "user": "alpico",
            "text": "<span class=\"comment-copy\">There is ASLR(libraries ,stack ..), but not on the binary itself,</span>",
            "time": null
        },
        {
            "user": "alpico",
            "text": "<span class=\"comment-copy\">Does someone have an idea ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well if you are not able to leak any of the addresses you cannot really use ROP, but because ARM is little-endian, you can actually override the last few bytes of the return-address. You end up with a relative jump in the binary. Unfortunately you can only perform one jump.</p>\n<pre><code>Return Address before:                     0x1122334455667788\nReturn Address overridden:                 0x112233445566????\nReturn Address overridden (case string):   0x11223344556600??\n</code></pre>\n<p>As you described your problem the bufferoverflow is triggered by a string that is NULL-terminated, so that lowers the possible jump-locations but maybe you are lucky and find a good location. like</p>\n<pre><code>call rax   (there surely is an equivalent instruction on ARM, but idk)\n</code></pre>\n<p>Maybe there are references to the shellcode on the stack or in some registers an you can perform a indirect branch to that pointer and execute the shellcode on the stack.</p>\n</div>",
            "votes": "2",
            "user": "Trac3r",
            "time": "Feb 24, 2021 at 14:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can think of a few possible solutions. All (obviously) depend on specifics you did not mention. I hope you find at least one of these useful.</p>\n<ol>\n<li>Place shellcode <em>before</em> the overwritten return address. This depends on the length of the buffer (plus any additional data on the stack) but might be enough (at least to jump or copy another piece of code, located someplace else).</li>\n<li>Take the <code>ret2libc</code> approach one step further - jump to a gadget that performs some register manipulation and <em>then</em> calls a useful function (such as system) either by directly calling <code>system</code> or calling/jumping to a register you can control.</li>\n<li>Keep in mind you don't necessarily have to <em>overwrite</em> the remainder of the stack. It may be enough to have some limited control over it. You know the stack back-trace and have some control of the code being executed next, make sure there're enough stack pops (a single instruction in ARM) and a branch or some other useful gadget.</li>\n<li>use JOP. It is possible (albeit harder) to construct sequences of gadgets that, instead of falling-through using <code>ret</code> instructions are connected using a series of jump/branch instructions. This requires searching for gadgets that end with a <code>call</code>/<code>b</code>/etc instruction (preferably one that uses a register) instead of with a <code>ret</code> instruction.</li>\n</ol>\n<p>Note that for a more general answer, certain primitives can be used to gain code execution without bypassing ASLR although that really depends in the scenario (and you usually have to be extremely lucky).</p>\n</div>",
            "votes": "0",
            "user": "NirIzr",
            "time": "Nov 24, 2021 at 15:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Perhaps <a href=\"https://github.com/zeroKilo/ASLRCalcWV\" rel=\"nofollow noreferrer\">my friend's tool</a> can help you, it calculates addresses at runtime.</p>\n</div>",
            "votes": "-1",
            "user": "mimak",
            "time": "Dec 16, 2020 at 8:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "alpico",
                    "text": "<span class=\"comment-copy\">Did not understand how that can help me</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Please add a description instead of a bare link</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">ok i just tried to help</span>",
                    "time": null
                }
            ]
        }
    ]
}