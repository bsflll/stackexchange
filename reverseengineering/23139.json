{
    "title": "Performing Buffer overflow in Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/23139/performing-buffer-overflow-in-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have buffer overflow in a program i check(it is an array of pointers, and i can overflow the data in the first pointer), but the data i can write is not on the stack, it is on a space the system allocated(it does not have name in /proc{id}/maps). and it is not the heap. \nIs there any option to perform code execution via this scenario ? \nAs well as, is there option to overflow different segments ? </p>\n<p>Thanks,</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "55",
    "tags": [
        "assembly",
        "linux",
        "c",
        "buffer-overflow"
    ],
    "user": "Raien land",
    "time": "Jan 28, 2020 at 21:35",
    "comments": [
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">Please use gdb and see which region it is located on? Is the address fixed every time? Is it next to the binary or any shared object every time?</span>",
            "time": null
        },
        {
            "user": "Raien land",
            "text": "<span class=\"comment-copy\">Hi, Sorry for the delay. if i look int the /proc/{id}/maps , the first two raw is the binary and after that the above mentioned region. The binary is always in the same address, but the other regions are not. The binary start with 004 and the mentioned location start with 777. Do you have any ideas ?</span>",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "<span class=\"comment-copy\">Can you add more info to the question? E.g. debugger output explaining the scenario. I don't understand where you are able to write.</span>",
            "time": null
        }
    ],
    "answers_data": []
}