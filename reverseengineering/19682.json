{
    "title": "x86-64 bit Buffer Overflow, help with overwriting %rip",
    "link": "https://reverseengineering.stackexchange.com/questions/19682/x86-64-bit-buffer-overflow-help-with-overwriting-rip",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get a buffer overflow exploit to work on Ubuntu 16.04 LTS 64bit.</p>\n<p>To this end I use the following vulnerable program:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char* argv[])\n{\n\n    char buffer[256];\n    strcpy(buffer, argv[1]);\n    printf(\"%s\\n\", buffer);\n    return 0;\n}\n</code></pre>\n<p>I deactivate ALSR (temporarily set <code>/proc/sys/kernel/randomize_va_space</code> to <code>0</code>) and compile my code with</p>\n<pre><code>gcc vuln.c -o vuln -z execstack -fno-stack-protector\n</code></pre>\n<p>I manage to overwrite <code>rip</code> with 6 <code>B</code>'s using </p>\n<pre><code>gdb$ run $(python -c 'print \"A\"*264 + \"B\"*6')\n</code></pre>\n<p>and get the following result in gdb:</p>\n<pre><code>RSI: 0x602010 ('A' &lt;repeats 200 times&gt;...)\nRDI: 0x1 \nRBP: 0x4141414141414141 ('AAAAAAAA')\nRSP: 0x7fffffffd9d0 --&gt; 0x0 \nRIP: 0x424242424242 ('BBBBBB')\nStopped reason: SIGSEGV\n0x0000424242424242 in ?? ()\n</code></pre>\n<p>Which makes perfect sense to me.</p>\n<p>I would like to overwrite <code>rip</code> with the beginning of my buffer of \"<code>A</code>\"'s so I can later place my shellcode at the beginning of the buffer (preceeded by some noop's):</p>\n<p>So, knowing, how many <code>A</code>'s I wrote in the buffer I have a look at <code>rsp</code> minus an offset (I am just playing with the offset until I get a line starting with <code>A</code>'s:</p>\n<pre><code>gdb$ x/20x $rsp-288\n0x7fffffffd8b0: 0x00007fffffffdaa8  0x0000000200000000\n0x7fffffffd8c0: 0x4141414141414141  0x4141414141414141\n0x7fffffffd8d0: 0x4141414141414141  0x4141414141414141\n</code></pre>\n<p>So, from this I am taking, that my buffer starts at <code>0x7fffffffd8c0</code> on the stack.</p>\n<p>Next I'll redirect <code>rip</code> to <code>0x7fffffffd8c0</code> as follows:</p>\n<pre><code>gdb$ run $(python -c 'print \"A\"*264 + \"\\x7f\\xff\\xff\\xff\\xd8\\xc0\"[::-1]')\n</code></pre>\n<p>Which works:</p>\n<pre><code>RBP: 0x4141414141414141 ('AAAAAAAA')\nRSP: 0x7fffffffd9d0 --&gt; 0x0 \nRIP: 0x7fffffffd8c0 ('A' &lt;repeats 200 times&gt;...)\n</code></pre>\n<p>As I am planning to put shellcode at the beginning of the buffer I just assume, my shellcode will be 10 bytes long and see if this works:</p>\n<pre><code>gdb$ run $(python -c 'print \"S\"*10 + \"A\"*254 + \"\\x7f\\xff\\xff\\xff\\xd8\\xc0\"[::-1]')\n</code></pre>\n<p>and now something I don't understand happens: Despite the fact, that I write exactly the same amount of characters into my buffer, the value of <code>rip</code> changes, apparently it no longer points to the start of my buffer:</p>\n<pre><code>RSI: 0x602010 (\"SSSSSSSSSS\", 'A' &lt;repeats 190 times&gt;...)\nRDI: 0x1 \nRBP: 0x4141414141414141 ('AAAAAAAA')\nRSP: 0x7fffffffd980 --&gt; 0x0 \nRIP: 0x7fffffffd8ca ('A' &lt;repeats 182 times&gt;)\n</code></pre>\n<p>Instead of <code>0x7fffffffd8c0</code> <code>rip</code> now contains <code>0x7fffffffd8ca</code>.</p>\n<p>So it is actually still pointing to the beginning of my <code>A</code>'s instead of the <code>S</code>'s which I injected in my python command:</p>\n<pre><code>gdb-peda$ x/20 $rip-10\n0x7fffffffd8c0: 0x5353535353535353  0x4141414141415353\n0x7fffffffd8d0: 0x4141414141414141  0x4141414141414141\n</code></pre>\n<p>Obviously I am just getting started with this stuff.</p>\n<p>Why is this happening?</p>\n<p>What am I missing?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "8k",
    "tags": [
        "buffer-overflow",
        "amd64"
    ],
    "user": "schtopps",
    "time": "Oct 22, 2018 at 8:38",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Have you tried with another number of 'S' characters ? Does it work the same or is it really linked to the fact you have 0xa characters ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Don't worry, the shellcode is executing properly, just that the debugger \"skipped\" past the execution.</p>\n<p>Remember that <code>rip</code> is the instruction pointer and whatever code present at the <code>rip</code> is executed. If the code is invalid however, something will go wrong (for example a SIGSEGV will be raised)</p>\n<p>In this particular case, a <code>S</code> (byte <code>\\x53</code>) corresponds to a <code>push rbx</code> command (which is valid, and push 8 bytes to the stack), while an <code>A</code> is a <code>rex.B</code> - basically speaking, it causes a SIGSEGV in this case.</p>\n<p>So in the latter case, ten <code>push rbx</code> commands get executed. (note the <code>esp</code> is decreased by <code>0x7fffffffd9d0 - 0x7fffffffd980 = 0x50</code>, which is 10 times the size of <code>rbx</code>)</p>\n<p>What you can do instead: Break at the <code>ret</code> instruction in the <code>main</code> function. After the breakpoint is hit, execute 1 more instruction then the <code>rip</code> should have the desired value.</p>\n</div>",
            "votes": "6",
            "user": "user202729",
            "time": "Oct 22, 2018 at 10:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}