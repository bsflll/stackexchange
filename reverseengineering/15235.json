{
    "title": "Netgear n300 auth bypass vulnerability",
    "link": "https://reverseengineering.stackexchange.com/questions/15235/netgear-n300-auth-bypass-vulnerability",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was looking at <a href=\"http://www.shellshocklabs.com/2015/09/part-1en-hacking-netgear-jwnr2010v5.html\" rel=\"nofollow noreferrer\">writeup</a> on Netgear N300 authentication bypass vulnerability and I have found some inconsistencies in the article with my understanding of it. I want a second opinion on this because I'm not very good at reading MIPS disassembly. </p>\n<p>I have problem with two statements from article</p>\n<blockquote>\n<p>As you can see in the following image if the url contains the string ( BRS_netgear_success.html ) it moves to an interesting piece of code which sets two variables in the nvram to 0 (need_not_login and start_in_blankstate)</p>\n</blockquote>\n<p>As far as I can tell the nvram_set function sets the first variable \"need_not_login\" to '0' (ascii) taken from asc_40B7A8, but I think the second one \"start_in_blankstate\" is set to '1'. Because the $a1 is set to value from aGate_interf+0x18. I think this is some sort of compiler optimization. aGate_interf starts at 0x40BCA8 when we add 0x18 we get 0x40BCC0 which points to char '1'. Here is the disassembly that shows this:</p>\n<p><a href=\"https://i.sstatic.net/SecuA.png\" rel=\"nofollow noreferrer\"><img alt=\"nvram_set for start_in_blankstate\" src=\"https://i.sstatic.net/SecuA.png\"/></a><br/>\nand aGate_interf+0x18:\n<a href=\"https://i.sstatic.net/fzhng.png\" rel=\"nofollow noreferrer\"><img alt=\"aGate_interf+0x18\" src=\"https://i.sstatic.net/fzhng.png\"/></a></p>\n<p>The second mistake is also related to this. The author claims that when value of 'start_in_blankstate' is different from '1' then login is bypassed. </p>\n<blockquote>\n<p>If yes, we find a reference to start_in_blankstate where it's compared to be different to 1 and if yes the login is bypassed:</p>\n</blockquote>\n<p>But that doesn't make sense to me. As I understand it nvram_get loads the value of 'start_in_blankstate' to $v0 then it's copied to $v1 and $v0 is loaded with '1'. They are compared at 0x403940. There is bne instruction so if they don't equal it's true (take green) if they equal it's false (take red) and bypass authentication. It can be seen here:\n<a href=\"https://i.sstatic.net/hsUUp.png\" rel=\"nofollow noreferrer\"><img alt=\"auth bypass\" src=\"https://i.sstatic.net/hsUUp.png\"/></a></p>\n<p>Also this rather fits the variable name \"start_in_blankstate\" that when this is set to 1 the router was not started yet and is in blank state, so bypass login and user can set his password. Is my understanding of this correct or was the author right?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "285",
    "tags": [
        "disassembly",
        "firmware",
        "mips"
    ],
    "user": "J91321",
    "time": "Apr 27, 2017 at 9:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I can see given the data you provided you're right on both accounts, If I understand you correctly.</p>\n<p>Two things to note, though:</p>\n<ul>\n<li><p>The value in <code>aGate_interf+0x18</code> is indeed the value set to <code></code>start_in_blankstate`, but it's not too clear what's the value there, given the second image.</p></li>\n<li><p>If <code>start_in_blankstate</code> equals \"1\" the branch is not taken, and execution continues to the strcmp` call (which might be a password validation?).</p></li>\n</ul>\n<p>This might be a patched version, or some error in the article. It does look a bit like it was copied from someplace else or that the link to the firmware download was added later on without validation.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Apr 27, 2017 at 10:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "J91321",
                    "text": "<span class=\"comment-copy\">It should be the vulnerable version. To make it clearer aGate_interf starts at 0x40BCA8 IDA correctly identified it as ascii string. I undefined it to clearly see what char is on 0x40BCA8+0x18. It's '1'. (Don't know why it's used like this) Don't know what those strcmp checks do (not password that is checked elsewhere I believe). strcmp returns 0 if strings match and there is beqz instruction. So I assume it's more likely that whatever is compared there won't match so the syslog branch is executed. And that bypasses the login.</span>",
                    "time": null
                }
            ]
        }
    ]
}