{
    "title": "How does a stripped XCOFF binary still remain usable?",
    "link": "https://reverseengineering.stackexchange.com/questions/18479/how-does-a-stripped-xcoff-binary-still-remain-usable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IBM's AIX <a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_aix_71/com.ibm.aix.cmds5/strip.htm\" rel=\"nofollow noreferrer\"><code>strip</code></a> utility documentation states the following:</p>\n<blockquote>\n<p>The strip command with no options removes the line number information,\n  relocation information, symbol table, the debug section, and the\n  typchk section, and the comment section.</p>\n</blockquote>\n<p>If relocation information is removed, how come the stripped executable still remain usable?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "file-format"
    ],
    "user": "sherlock",
    "time": "Jun 7, 2018 at 19:22",
    "comments": [
        {
            "user": "manduca",
            "text": "<span class=\"comment-copy\">Okay, that‘s weird. Without relocation information, the binary either has to be position independent code or cannot be ASLRed. I‘m looking forward to the answer.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">That's not exactly a reverse engineering question, though.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>COFF files were not designed to support relocation after link-time:</p>\n<blockquote>\n<p>The binary format used initially for Linux was an <code>a.out</code>\n  variant. <strong>When introducing shared libraries certain design\n  decisions had to be made to work in the limitations of\n  <code>a.out</code>. The main accepted limitation was that no <em>relocations</em> are performed at the time of loading and afterward.\n  The shared libraries have to exist in the form they are\n  used at run-time on disk.</strong> This imposes a major restriction on the way shared libraries are built and used: every\n  shared library must have a fixed load address; otherwise it\n  would not be possible to generate shared libraries which\n  do not have to be relocated.<sup>1</sup></p>\n</blockquote>\n<p>While XCOFF represents an extension of COFF that does support use of shared libraries, the relocation information removed by <code>strip</code> pertains to information used for link-time relocation rather than load- or run-time relocation:</p>\n<ul>\n<li><blockquote>\n<p>Reduces the size of an Extended Common Object File Format (XCOFF) object file by removing information used by the binder and symbolic debug program.</p>\n</blockquote></li>\n<li><blockquote>\n<p>The binder uses the relocation information to modify address constants and other relocatable values when individual XCOFF object files are linked to create an XCOFF executable file.<sup>2</sup></p>\n</blockquote></li>\n</ul>\n<p>The binder appears to play a role similar to that of the link editor <a href=\"http://man7.org/linux/man-pages/man1/ld.1.html\" rel=\"nofollow noreferrer\"><code>ld</code></a> on Linux systems. </p>\n<p>See the description of the <code>-x</code> flag:</p>\n<blockquote>\n<p>Removes the symbol table information but does not remove static or external symbol information. <strong>The -x flag also removes relocation information, therefore linking to the file would not be possible.</strong></p>\n</blockquote>\n<hr/>\n<ol>\n<li><p><a href=\"https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf\" rel=\"nofollow noreferrer\">How to Write Shared Libraries</a></p></li>\n<li><p><a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_aix_71/com.ibm.aix.files/XCOFF.htm#XCOFF__sua3i125jbau\" rel=\"nofollow noreferrer\">Relocation Information for XCOFF File (reloc.h)</a></p></li>\n</ol>\n</div>",
            "votes": "6",
            "user": "julian",
            "time": "Jun 7, 2018 at 21:47",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>apparently the <a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_aix_71/com.ibm.aix.files/XCOFF.htm\" rel=\"nofollow noreferrer\">XCOFF format</a>  has a separate section for dynamic linker (<em>system loader</em>):</p>\n<blockquote>\n<h1>Loader Section (loader.h)</h1>\n<p>The loader section contains information required by the system loader\nto load and relocate an executable XCOFF object. The loader section is\ngenerated by the binder. The loader section has an s_flags section\ntype flag of STYP_LOADER in the XCOFF section header. By convention,\n.loader is the loader section name. The data in this section is not\nreferenced by entries in the XCOFF symbol table.</p>\n</blockquote>\n<p>Presumably this one is not removed by <code>strip</code>, so the file still works.</p>\n<p>See also similar question on what happens with <a href=\"https://reverseengineering.stackexchange.com/questions/2539/what-symbol-tables-stay-after-a-strip-in-elf-format\">stripped ELF files</a>.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}