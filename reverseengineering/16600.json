{
    "title": "Reversing Self-Modifying Malware",
    "link": "https://reverseengineering.stackexchange.com/questions/16600/reversing-self-modifying-malware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>recently i got my hands on one sample that self-modifies its <code>.text</code> section. So, I placed a breakpoint on <code>.text</code> section on write operation and then continued. I found out that it zeroes out the <code>.text</code> section and then writes the decrypted code to that section and then makes a call to the decrypted OEP. I used Scylla to correct the OEP and dump the <code>.exe</code> file.</p>\n<p><a href=\"https://i.sstatic.net/prlmd.png\" rel=\"noreferrer\"><img alt=\"Scylla_output\" src=\"https://i.sstatic.net/prlmd.png\"/></a></p>\n<p>When i get the imports it shows that the program only imports <code>kernel32.dll</code>.</p>\n<p><a href=\"https://i.sstatic.net/zDYzc.png\" rel=\"noreferrer\"><img alt=\"PEBear_output\" src=\"https://i.sstatic.net/zDYzc.png\"/></a></p>\n<p>This is the assembly of the dumped <code>.exe</code> file in the <code>PEBear</code>.</p>\n<p><a href=\"https://i.sstatic.net/rMf0h.png\" rel=\"noreferrer\"><img alt=\"ImmunityDBG_output\" src=\"https://i.sstatic.net/rMf0h.png\"/></a></p>\n<p>This is what I get when i try to open the dumped file in <code>ImmunityDbg</code>.</p>\n<p>The imports i get are also very different from what <code>Scylla</code> gave me + The dumped program does not run it crashes right away. What am i doing wrong?</p>\n<p>Thanks.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "ollydbg",
        "malware",
        "unpacking",
        "immunity-debugger"
    ],
    "user": "rustam Shirinov",
    "time": "Oct 22, 2017 at 20:19",
    "comments": [
        {
            "user": "ubnix",
            "text": "<span class=\"comment-copy\">could you give the sha256 hash of the file?</span>",
            "time": null
        },
        {
            "user": "rustam Shirinov",
            "text": "<span class=\"comment-copy\"><code>9ed85a6de31604eb431cdd7632cad0e5be54af10a16cc6ca0b886d1f92bb91b8</code></span>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">ImmunityDbg is a fork of OllyDbg, both sometimes have difficult to recognize the code of the unpacked part. In Olly you can right click on these unrecognized code and click Analysis &gt; Analyze Code. I'll suggest you to follow the steps Igor mentioned in <a href=\"https://reverseengineering.stackexchange.com/a/91/18698\">this answer</a>. You'll often have a hard time making an unpacked file executable, keep this in mind.</span>",
            "time": null
        },
        {
            "user": "rustam Shirinov",
            "text": "<span class=\"comment-copy\">Thanks for the advice, btw I forgot to mention everytime i go through the same procedure I get different hashes even though I m doing the same thing.</span>",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "<span class=\"comment-copy\">Is it possible malware using anti-debugging methods?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Start by placing a breakpoint on the entrypoint itself, which is probably not in the .text section at all, but in another section entirely.  You will see that the program resolves its own imports dynamically, probably by searching within kernel32.dll for LoadLibrary and GetProcAddress.</p>\n<p>By tracing through the top layer, you will also find when the decryption is complete and the transfer of control occurs to the decrypted code.  If you dump the file at that moment, and then disassemble the result, you might be able to see the cause of the crash - it is likely to be anti-debugging mechanisms, of which there are too many possibilities to list here (but see <a href=\"http://pferrie.host22.com/papers/antidebug.pdf\" rel=\"noreferrer\">http://pferrie.host22.com/papers/antidebug.pdf</a> for a selection of commonly-used ones).</p>\n</div>",
            "votes": "5",
            "user": "peter ferrie",
            "time": "Oct 27, 2017 at 15:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rustam Shirinov",
                    "text": "<span class=\"comment-copy\">Thanks. Even though my problem was IAT I will upvote for detailed answer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Thanks everyone who responded. The IAT was the problem. The OEP I found was the real OEP pointing to the unpacked code. But the dumped executable was not runnable because IAT was corrupt. After Fixing IAT in Scylla. It is now runnable.</p>\n</div>",
            "votes": "2",
            "user": "rustam Shirinov",
            "time": "Oct 27, 2017 at 19:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}