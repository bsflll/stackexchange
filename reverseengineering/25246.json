{
    "title": "ARM bx instruction branches to address not specified as argument",
    "link": "https://reverseengineering.stackexchange.com/questions/25246/arm-bx-instruction-branches-to-address-not-specified-as-argument",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging an ARM cortex M4 (STM32F4) running FreeRTOS.\nInside the assembly FreeRTOS function <code>vPortSVCHandler</code>, there's a branch instruction</p>\n<pre><code>bx r14\n</code></pre>\n<p>using GDB, I step through instruction by instruction and find that r14 (lr) contains the value <code>0xfffffffd</code> (not a valid address) immediately before the bx instruction is executed.</p>\n<p>For some reason, GDB doesn't follow the <code>bx</code> instruction with <code>si</code> (hangs), but I'm still able to <code>step</code> via openOCD.  I find that the function that's branched to is in fact a valid function at address <code>0x08012abc</code>.</p>\n<p>From the ARM docs on <code>bx</code>, its argument should be a register containing an address to branch to.  </p>\n<p>Clearly, I'm misunderstanding or looking at the wrong docs.</p>\n<p>I tried tweaking <code>lr</code> with GDB just before the branch instruction.  Changing it to <code>0x0</code> or <code>0xfffffff7</code> results in a hard fault shortly after the branch.</p>\n<p>How does this branch instruction, when called with a value of <code>0xfffffffd</code>, result in branching to a valid function at <code>0x08102abc</code>?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "923",
    "tags": [
        "arm"
    ],
    "user": "RemarkableBucket",
    "time": "Jun 9, 2020 at 5:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Values around <code>FFFFFFFF</code> are used in Cortex-M for  <em><a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/Babefdjc.html\" rel=\"nofollow noreferrer\">exception returns</a></em>\n(ECX_RETURN). Currently defined values:</p>\n<ol>\n<li><p>0xFFFFFFF1 - return to Handler mode, restore state from main stack</p></li>\n<li><p>0xFFFFFFF9 - return to Thread mode, restore state from main stack</p></li>\n<li><p>0xFFFFFFFD - return to Thread mode, restore state from process stack</p></li>\n</ol>\n<p>So the actual branch address is taken from the stack (MSP or PSP, depending on the low bits of the value). See the linked document for more details. </p>\n<p>Since GDB is mostly used for user-mode debugging, it does not expect such shenanigans and probably tries to set a breakpoint at the value of <code>LR</code> which naturally fails. OpenOCD knows about exceptions and is able to step properly. </p>\n</div>",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2020 at 7:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}