{
    "title": "gdb shows that EBP contains a value other than some address(which is what it is supposed to contain). How is this possible?",
    "link": "https://reverseengineering.stackexchange.com/questions/22524/gdb-shows-that-ebp-contains-a-value-other-than-some-addresswhich-is-what-it-is",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am fairly new to RE and Binary Exploitation, I have learned basic assembly instructions for Binary Exploitation and I was doing <a href=\"https://exploit.education/protostar/stack-zero/\" rel=\"nofollow noreferrer\">Protostar exercises (stack0)</a> in which I have to simply overflow the <code>buffer</code> variable. Disassembly of main function is:-</p>\n<pre><code>(gdb) disas main\nDump of assembler code for function main:\n0x080483f4 &lt;main+0&gt;:    push   ebp\n0x080483f5 &lt;main+1&gt;:    mov    ebp,esp\n0x080483f7 &lt;main+3&gt;:    and    esp,0xfffffff0\n0x080483fa &lt;main+6&gt;:    sub    esp,0x60\n0x080483fd &lt;main+9&gt;:    mov    DWORD PTR [esp+0x5c],0x0\n0x08048405 &lt;main+17&gt;:   lea    eax,[esp+0x1c]\n0x08048409 &lt;main+21&gt;:   mov    DWORD PTR [esp],eax\n0x0804840c &lt;main+24&gt;:   call   0x804830c &lt;gets@plt&gt;\n0x08048411 &lt;main+29&gt;:   mov    eax,DWORD PTR [esp+0x5c]\n0x08048415 &lt;main+33&gt;:   test   eax,eax\n0x08048417 &lt;main+35&gt;:   je     0x8048427 &lt;main+51&gt;\n0x08048419 &lt;main+37&gt;:   mov    DWORD PTR [esp],0x8048500\n0x08048420 &lt;main+44&gt;:   call   0x804832c &lt;puts@plt&gt;\n0x08048425 &lt;main+49&gt;:   jmp    0x8048433 &lt;main+63&gt;\n0x08048427 &lt;main+51&gt;:   mov    DWORD PTR [esp],0x8048529\n0x0804842e &lt;main+58&gt;:   call   0x804832c &lt;puts@plt&gt;\n0x08048433 &lt;main+63&gt;:   leave  \n0x08048434 &lt;main+64&gt;:   ret    \nEnd of assembler dump.\n</code></pre>\n<p>I set a break point on <code>ret</code> instruction and run the program but when I examine the stack in <code>gdb</code>, it shows this output(overflow after 90 A's): </p>\n<pre><code>(gdb) info registers\neax            0x29 41\necx            0xb7fd84c0   -1208122176\nedx            0xb7fd9340   -1208118464\nebx            0xb7fd7ff4   -1208123404\nesp            0xbffff7bc   0xbffff7bc\nebp            0x41414141   0x41414141\nesi            0x0  0\nedi            0x0  0\neip            0x8048434    0x8048434 &lt;main+64&gt;\neflags         0x200246 [ PF ZF IF ID ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n</code></pre>\n<p>When looking at <code>ebp</code> I am really curious to know that what happened that caused <code>ebp</code> to have value <code>0x41414141</code>? What I understand is when <code>leave</code> isntruction is executed stack frame is destroyed and <code>x/x $esp is 0x41414141</code> which makes sense and <code>x/x $ebp is Cannot access memory at address 0x41414141</code>\nso how does value of <code>ebp</code> changed to <code>0x41414141</code>?</p>\n<p>PS: I already solved that exercise but while examining the stack I was not getting how <code>ebp</code> got changed and feel free to edit the question tag because I am not sure what tag will be appropriate.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "653",
    "tags": [
        "binary-analysis",
        "gdb"
    ],
    "user": "daya",
    "time": "Nov 12, 2019 at 16:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>leave</code> instruction is equivalent to:</p>\n<pre><code>mov esp, ebp\npop ebp\n</code></pre>\n<p>The second instruction pops the value on the top of the stack and stores it in <code>ebp</code>. In the case of a stack-based buffer overflow, your stack layout looks like:</p>\n<pre><code>&lt;--- low addresses           high addresses ---&gt;\n[ buffer being overflowed ][saved EBP][RET ADDR]\n                           ^\n</code></pre>\n<p>When <code>leave</code> is executed, the <code>mov esp, ebp</code> instruction first restores <code>esp</code> to point at the marked location in the diagram above, then pops a value off the stack into <code>ebp</code>. So if you've overflowed the buffer with 'AAAA...', both the saved <code>ebp</code> and the return address will be set to <code>0x41414141</code>.</p>\n</div>",
            "votes": "4",
            "user": "Brendan Dolan-Gavitt",
            "time": "Nov 12, 2019 at 20:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "daya",
                    "text": "<span class=\"comment-copy\">Thanks for the help, but why we cannot access the memory location where <code>ebp</code> is pointing now?</span>",
                    "time": null
                },
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">Unless by coincidence <code>0x41414141</code> happens to be a memory region that the program was already using, then there's no reason to expect it to be accessible. <code>0x41414141</code> is just the \"AAAA\" you wrote to the stack (interpreted as a 32-bit integer).</span>",
                    "time": null
                },
                {
                    "user": "daya",
                    "text": "<span class=\"comment-copy\">That clarifies it, thanks for explanantion</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For the CPU, <code>ebp</code> (and even <code>esp</code> most of the time) are not really different from <code>eax</code>, <code>ebx</code> and other registers. They can contain any data, not necessarily valid addresses. You only get problems (faults/exceptions) if you actually try to execute instructions that use those registers as addresses (directly or indirectly), or, in case of <code>ESP</code>, <a href=\"https://wiki.osdev.org/Interrupts\" rel=\"nofollow noreferrer\">an interrupt happens</a>.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 12, 2019 at 21:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}