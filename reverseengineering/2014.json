{
    "title": "How can one extract the appended data of a Portable Executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How do you reliably extract appended data in a Portable Executable?</p>\n</div>",
    "votes": "9",
    "answers": 3,
    "views": "10k",
    "tags": [
        "pe"
    ],
    "user": "Ange",
    "time": "May 6, 2013 at 10:59",
    "comments": [
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">(I was asked in relation with <a href=\"http://reverseengineering.stackexchange.com/questions/160/how-do-you-reverse-engineer-an-exe-compiled-with-pyinstaller\">this</a> question)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just to clarify: the <em>appended data</em> - also called <em>overlay</em> - is the part of a PE file that is not covered by the header.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/p1tXR.png\"/></p>\n<p>Because of some tricky conditions in the PE file format, it might be difficult to determine in some extreme case, so it's better to rely on a robust library such as <a href=\"https://code.google.com/p/pefile/\" rel=\"noreferrer\">pefile</a>.</p>\n<p>Here is a simple Python script that relies on pefile to extract the appended data:</p>\n<pre><code>import pefile\nimport sys\n\nfilename = sys.argv[1]\nwith open(filename, \"rb\") as s:\n    r = s.read()\n\npe = pefile.PE(filename)\noffset = pe.get_overlay_data_start_offset()\n\nwith open(filename + \".app\", \"wb\") as t:\n    t.write(r[offset:])\n</code></pre>\n<p>use with your filename as argument.</p>\n<hr/>\n<p>Personally, I usually do it with Hiew - as Hiew is faster to start than anything else, and also PE-robust:</p>\n<ol>\n<li>go at appended data start\n\n<ol>\n<li>in <code>Hex</code> or <code>ASM</code> mode, press <kbd>F8</kbd> to view PE header information</li>\n<li><kbd>Alt</kbd>+<kbd>F2</kbd> to go at appended data start</li>\n</ol></li>\n<li>select until the end\n\n<ol>\n<li><kbd>Keypad-<code>*</code></kbd> to start selection</li>\n<li><kbd>Ctrl</kbd>+<kbd>End</kbd> to go at bottom of the file</li>\n<li><kbd>Keypad-<code>*</code></kbd> again to finish selection</li>\n</ol></li>\n<li><kbd>F2</kbd> to write selection to file</li>\n</ol>\n</div>",
            "votes": "10",
            "user": "Ange",
            "time": "May 6, 2013 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">You may want to skip an existing Authenticode signature as well.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, the Authenticode signature must be last in the file or it will fail validation.  You cannot (any more) append data after the signature.</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">There could be a signature at the end of the appended data, so one might not want to select until the bottom of the file.</span>",
                    "time": null
                },
                {
                    "user": "evlncrn8",
                    "text": "<span class=\"comment-copy\">if there is a signature then it'll be recorded in the data directory, so you have the start offset and size there, its pretty simple</span>",
                    "time": null
                },
                {
                    "user": "evandrix",
                    "text": "<span class=\"comment-copy\"><a href=\"https://asciinema.org/a/171993\" rel=\"nofollow noreferrer\">asciinema.org/a/171993</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is not that hard to do manually.</p>\n<ol>\n<li>Find the PE header from the MZ header and determine the location of the section table.</li>\n<li><p>Walk the section table, and determine the maximum value of <code>PointerToRawData</code> + <code>SizeOfRawData</code>. (note: these values are subject to alignment using the <code>FileAlignment</code> member of the <code>IMAGE_OPTIONAL_HEADER</code>).</p></li>\n<li><p>Use the determined maximum as the file offset to the overlay data.</p></li>\n</ol>\n<p>Note that some installers/file formats do not actually use this calculation, but they instead have a small trailer at the end of file which points to the beginning of the payload. For example, ZIP file format works like that - that's why a self-extracting ZIP can be extracted irregardless of whether the unpacker stub is PE, DOS MZ, ELF, Mach-O or anything else.</p>\n</div>",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "May 6, 2013 at 11:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, this is not sufficient.  SizeOfRawData can have any value, even gigabytes large in a small file.  It's bound by VirtualSize at that point.  <i>Accurately</i> determining the end of the image is not trivial.</span>",
                    "time": null
                },
                {
                    "user": "Karsten Hahn",
                    "text": "<span class=\"comment-copy\">@peterferrie What would be a good algorithm? I am actually trying to implement one. pefile does it roughly as suggested here.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">@Veitch, my answer to your other question now has sample code and a description, which should be what you need.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another option is the <a href=\"//github.com/mewrev/pe\" rel=\"nofollow noreferrer\">mewrev/pe</a> Go package:</p>\n<pre><code>package main\n\nimport (\n   \"github.com/mewrev/pe\"\n   \"io/ioutil\"\n   \"log\"\n   \"os\"\n)\n\nfunc main() {\n   file, e := pe.Open(\"vs_BuildTools.exe\")\n   if e != nil {\n      log.Fatal(e)\n   }\n   y, e := file.Overlay()\n   if e != nil {\n      log.Fatal(e)\n   }\n   ioutil.WriteFile(\"vs_BuildTools.overlay\", y, os.ModePerm)\n}\n</code></pre>\n</div>",
            "votes": "0",
            "user": "Zombo",
            "time": "Jan 19, 2021 at 2:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}