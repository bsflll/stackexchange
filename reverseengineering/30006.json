{
    "title": "Why does Ghidra show no references to any strings?",
    "link": "https://reverseengineering.stackexchange.com/questions/30006/why-does-ghidra-show-no-references-to-any-strings",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm attempting to compare <a href=\"https://github.com/lindenis-org/lindenis-v536-device/blob/master/config/chips/v536/bin/boot0_sdcard_sun8iw16p1_ddr3.bin\" rel=\"nofollow noreferrer\">this binary bootloader</a> to <a href=\"https://github.com/hno/allwinner-boot/tree/70576dd51b65722abadd5ea6169f6c20639cf211/boot0\" rel=\"nofollow noreferrer\">a slightly different C version of some boot code</a>. My initial approach is to look at the <code>msg()</code> calls and the strings they use. I can dump the strings, and most of the strings in the binary are also in the C code. However, Ghidra shows only one or two strings as being referenced anywhere.</p>\n<p>Disassembly seems to be working since it's matching relatively closely between the binary and the repository code.</p>\n<p><strong>Binary</strong>\n<a href=\"https://i.sstatic.net/n8AKp.png\" rel=\"nofollow noreferrer\"><img alt=\"disassembly\" src=\"https://i.sstatic.net/n8AKp.png\"/></a></p>\n<p><strong>Repository Code</strong>\n<a href=\"https://i.sstatic.net/UIjH4.png\" rel=\"nofollow noreferrer\"><img alt=\"repository code\" src=\"https://i.sstatic.net/UIjH4.png\"/></a></p>\n<p>Note that the file in question isn't an ELF or PE/COFF. It's a boot loader image where the very first address is the first instruction (that jumps down past some header info to 00000338). Supposedly it gets loaded into SRAM at address 0x00000000. I believe that since the jump at address 0x00 does seem to go to the correct location (0x00000338).</p>\n<p>I suppose as part of the setup code, the strings could get copied elsewhere...</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ghidra",
        "strings"
    ],
    "user": "watkipet",
    "time": "Feb 9, 2022 at 1:13",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">Did you use any loader for this binary? It might be that the sections are not correctly constructed and thus memory addresses do not match for it to be correctly referenced.</span>",
            "time": null
        },
        {
            "user": "watkipet",
            "text": "<span class=\"comment-copy\">No. I didn't use a loader. This file isn't an ELF or PE--it's some proprietary format. I'll add more information to the question.</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">Are you sure it should start at <code>0x0</code>? In the linked source code you can find lines like this <code>#define  UBOOT_BASE  0x4a000000</code> and similar that defines much higher addresses.</span>",
            "time": null
        },
        {
            "user": "watkipet",
            "text": "<span class=\"comment-copy\">Yes. I'm sure it starts at 0x0. At 0x0, you can see a jump to the instructions in my screenshot. U-boot gets loaded after this code (boot0).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My problem was that the boot loader code gets loaded into SRAM, which has a base address of 0x20000. So that means the code can access data based at 0x0 and also the same data starting at offset 0x20000 (which it does for strings). So I added an entry, \"SRAM A\", to my Memory Map:\n<a href=\"https://i.sstatic.net/z62hE.png\" rel=\"nofollow noreferrer\"><img alt=\"memory map\" src=\"https://i.sstatic.net/z62hE.png\"/></a></p>\n<p>As you can see, the source of the data comes from the same binary file.</p>\n<p>Then I went hunting for all the pointers to the strings which pointed out past 0x20000 and converted them to string pointers. Here's one:\n<a href=\"https://i.sstatic.net/3muIv.png\" rel=\"nofollow noreferrer\"><img alt=\"pointer to SRAM\" src=\"https://i.sstatic.net/3muIv.png\"/></a></p>\n<p>Here's the string in SRAM (it's referenced):\n<a href=\"https://i.sstatic.net/Z6gza.png\" rel=\"nofollow noreferrer\"><img alt=\"SRAM string\" src=\"https://i.sstatic.net/Z6gza.png\"/></a></p>\n<p>Here's the same string based at 0x0 (it has no references):\n<a href=\"https://i.sstatic.net/1DV6G.png\" rel=\"nofollow noreferrer\"><img alt=\"0x0 string\" src=\"https://i.sstatic.net/1DV6G.png\"/></a></p>\n<p>I suspect there are many other reasons that strings won't show up as referenced in Ghidra--this is just one possible reason.</p>\n</div>",
            "votes": "3",
            "user": "watkipet",
            "time": "Feb 10, 2022 at 1:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">This is exactly what a custom loader should do. Build memory maps.</span>",
                    "time": null
                }
            ]
        }
    ]
}