{
    "title": "When patching static software, is there a preferred patching strategy?",
    "link": "https://reverseengineering.stackexchange.com/questions/29310/when-patching-static-software-is-there-a-preferred-patching-strategy",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Suppose you have something like this (in x86-like asm)</p>\n<pre><code>10 | mov ebx 1 // good response from function \"check\" below\n20 | call check() // modifies eax\n30 | test eax ebx\n40 | jeq good\n50 | bad:   call lose()\n60 | jmp finish\n70 | good:  call win()\n80 | finish:    push/pop stuff from stack\n90 | retn 0\n</code></pre>\n<p>Suppose I want to modify the logic so that it always executes some <code>win()</code>. From what we have, there are multiple ways to accomplish this. Here are strategies I can see:</p>\n<ol>\n<li>NOP 10-60 (but then maybe important registers/stack are not set because <code>check()</code> isn't called as well as registers/stack may not be set properly)</li>\n<li>30 - make it <code>test eax eax</code> or something along these lines. Seems like a solid way, but isn't it then better to do (3)</li>\n<li>40 - make jump unconditional. This is what I do currently, but I wonder if the CPU overhead (for things like <code>30 | test eax ebx</code> are acceptable)</li>\n<li>50 or 60 - make either perform <code>jmp good</code> -- seems  like the destructive/potentially crash inducing approach due to registers/stack being already pre-set for lose() function</li>\n<li>Create a ROP chain/inject my own logic to just call win() -- isn't it too much for this situation?</li>\n<li>modify <code>10 | mov ebx 1</code> to be set to <code>0</code> -- but then in case <code>win()</code> should be called, it won't be</li>\n</ol>\n<p>I wonder if there is a standard strategy recommended for patching like this.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "88",
    "tags": [
        "binary",
        "assembly"
    ],
    "user": "TAbdiukov",
    "time": "Sep 20, 2021 at 5:27",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">mov ebx,0 ; jq good maybe ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The better solution (on my opinion) is</p>\n<ol>\n<li>the simpler,</li>\n<li>less influencing other program logic,</li>\n<li>provides length equality of opcodes you want to replace and those you want to insert.</li>\n</ol>\n<p>By my experience the less painful way is to switch conditional jump (<code>je</code>) to unconditional <code>jmp</code>, as opcodes are always the same length (<code>74 0a</code> vs <code>eb 0a</code>):</p>\n<pre><code>;addr  opcode                  instruction\n0:     bb 01 00 00 00          mov    ebx,0x1\n5:     e8 00 00 00 00          call   sub_check\na:     85 d8                   test   eax,ebx\nc:     74 0a                   je     18 &lt;good&gt;\n000000000000000e &lt;bad&gt;:\ne:     e8 00 00 00 00          call   sub_lose\n13:    e9 00 00 00 00          jmp    18 &lt;good&gt;\n0000000000000018 &lt;good&gt;:\n18:    e8 00 00 00 00          call   sub_win\n</code></pre>\n<p>and</p>\n<pre><code>;addr  opcode               instruction\n0:     bb 01 00 00 00       mov    ebx,0x1\n5:     e8 00 00 00 00       call   sub_check\na:     85 d8                test   eax,ebx\nc:     eb 0a                jmp    18 &lt;good&gt;\n000000000000000e &lt;bad&gt;:\ne:     e8 00 00 00 00       call   sub_lose\n13:    e9 00 00 00 00       jmp    18 &lt;good&gt;\n0000000000000018 &lt;good&gt;:\n18:    e8 00 00 00 00       call   sub_win\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Ornstein89",
            "time": "Sep 29, 2021 at 17:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}