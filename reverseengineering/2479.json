{
    "title": "Android bytecode verifier",
    "link": "https://reverseengineering.stackexchange.com/questions/2479/android-bytecode-verifier",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One of the things that makes Java bytecode (.class) so easy to reverse engineer is that the JVM's verifier ensures that bytecode can always be disassembled via linear sweep. Instructions have to be consecutive starting at offset 0, and you can't jump into the middle of an instruction.</p>\n<p>However <a href=\"http://www.dexlabs.org/blog/bytecode-obfuscation\">this post</a> implies that Dalvik does not do such bytecode verification. The authors do all the usual x86 shenanigans like jumping into the middle of an instruction, which is apparently allowed. Is this true? Do Android VMs actually perform any kind of loadtime bytecode verification? If not, why?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "android",
        "byte-code"
    ],
    "user": "Antimony",
    "time": "Jul 15, 2013 at 5:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>this is not entirely true. Dalvik bytecode will also be verified on the device, but this happens during installation time, not runtime. A verified and optimized version of the dex file will be stored on the system, protected by file system permission (you cannot change it afterwards unless you have rooted your device).</p>\n<p>The trick that was used in the blog post is that you can set a specific flag within the class header which tells the verifier to skip this class.</p>\n</div>",
            "votes": "11",
            "user": "thux",
            "time": "Sep 20, 2013 at 1:03",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Android also contains bytecode verification but this step is moved from class loading on the device to the dex compiler (as it is similarily done in J2ME).</p>\n<p>Alter dexing your class files (and before packaging to an <code>.apk</code> file) you can modify the files and introduce the referenced <em>obfuscation</em>.</p>\n<p>So at loading time no further verifcation is done.</p>\n<p><a href=\"https://android.googlesource.com/platform/dalvik/+/master/docs/\">Specification of the dex compiler</a>.</p>\n<p>The verification of the bytecode at load time is removed to enhance the loading time (the same reason as this is done in J2ME).</p>\n</div>",
            "votes": "9",
            "user": "Uwe Plonus",
            "time": "Jul 15, 2013 at 9:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}