{
    "title": "GCC Loop optimization",
    "link": "https://reverseengineering.stackexchange.com/questions/3845/gcc-loop-optimization",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been looking at some simple C code and the different output from GCC using different optimization levels.</p>\n<p><strong>C code</strong></p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 0;\n\n    while(i&lt;10) {\n            printf(\"Hello\\n\");\n            i++;\n    }\n\n    i = 0;\n\n    while(i&lt;10) {\n            printf(\"i: %d\\n\", i);\n            i++;\n    }\n</code></pre>\n<p>}</p>\n<p>When I compile the code using <code>-Os</code> or <code>-O2</code> the first loop works a bit differently. It it decrements instead of incrementing, and it is in two different ways. I am wondering why it decrements instead of incrementing like in the code, and the the small difference between <code>-Os</code> and <code>-O2</code>.</p>\n<p><strong>-Os compiled</strong></p>\n<pre><code>0x400486 &lt;main+6&gt;       mov     edi,0x40068c\n0x40048b &lt;main+11&gt;      call    0x400450 &lt;puts@plt&gt;\n0x400490 &lt;main+16&gt;      dec     ebx\n0x400492 &lt;main+18&gt;      jne     0x400486 &lt;main+6&gt;\n</code></pre>\n<p><strong>-O2 compiled</strong></p>\n<pre><code>0x400490 &lt;main+16&gt;      mov    edi,0x40069c\n0x400495 &lt;main+21&gt;      call   0x400450 &lt;puts@plt&gt;\n0x40049a &lt;main+26&gt;      sub    ebx,0x1\n0x40049d &lt;main+29&gt;      jne    0x400490 &lt;main+16&gt; \n</code></pre>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly"
    ],
    "user": "Sindre Smistad",
    "time": "Mar 11, 2014 at 6:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>By decrementing, compiler can make use of <code>jne</code> (jump if not equal/zero) which does the comparison (to zero) and jump in a single instruction. In case of incrementing, it would have to do a <code>cmp/test</code> (with 10) and then a conditional jump like <code>jnz/jne</code>. I believe it is a part of optimization.</p>\n<p><code>-Os</code> flag optimizes to bring down the code size. The code generated using <code>-Os</code> uses <code>dec ebx</code> instead of <code>sub ebx, 0x1</code>, since <code>dec ebx</code> is a 2-byte instruction while <code>sub ebx, 0x1</code> is a 3-byte instruction (Note the address at which the next instruction begins). That explains the small difference.</p>\n</div>",
            "votes": "7",
            "user": "pank4j",
            "time": "Mar 11, 2014 at 7:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PlasmaHH",
                    "text": "<span class=\"comment-copy\">This does explain the difference in one direction, but not the other; it seems that there must be an advantage of <code>sub</code> over <code>dec</code> otherwise O2 would not have chosen it.</span>",
                    "time": null
                },
                {
                    "user": "Sindre Smistad",
                    "text": "<span class=\"comment-copy\">With a little research I think I found the reason why <b>O2</b> uses <b>sub</b> instead of <b>dec</b>. <a href=\"http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf\" rel=\"nofollow noreferrer\">IntelÂ® 64 and IA-32 Architectures Optimization Reference Manual</a> In table C-19 in appendix C <b>add/sub</b> has a lower latency.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Because I can't comment, I'll try to fix some inaccuracies in pnak4j's answer.</p>\n<p><code>dec ebx</code> is really a 1-byte instruction (I don't know why it appears to be 2-bytes). <code>DEC</code> sets the <code>ZF</code> flag accordingly to the result of (<code>ebx-1</code>) when: zero or not zero. Then, <code>JNE</code> does the jump if not zero (<code>JNE</code>/<code>JNZ</code> are the same). <code>JMP</code> is not a conditional jump, therefore it would not make much sense after <code>CMP</code>/<code>TEST</code>. </p>\n</div>",
            "votes": "5",
            "user": "perror",
            "time": "Mar 11, 2014 at 7:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pank4j",
                    "text": "<span class=\"comment-copy\">By <code>jmp</code>, I meant a conditional jump. An unconditional jump doesn't make much sense after a compare. It has been edited. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "PlasmaHH",
                    "text": "<span class=\"comment-copy\"><code>dec ebx</code> is <code>0xff 0xcb</code></span>",
                    "time": null
                }
            ]
        }
    ]
}