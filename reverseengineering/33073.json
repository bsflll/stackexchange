{
    "title": "How to determine if an ntfs partition (inside VHDX) is dirty?",
    "link": "https://reverseengineering.stackexchange.com/questions/33073/how-to-determine-if-an-ntfs-partition-inside-vhdx-is-dirty",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a VHDX file containing a single NTFS partition, when I mount this VHDX using Disk Management it's determined to be \"dirty\":</p>\n<p><a href=\"https://i.sstatic.net/UXDiQWED.png\" rel=\"nofollow noreferrer\"><img alt=\"There's a problem with this drive\" src=\"https://i.sstatic.net/UXDiQWED.png\"/></a></p>\n<p>I do indeed have some issues reading this disk until I run <code>ChkDsk</code> on it, so the message is correct.</p>\n<p>I want to check, programmatically, if a partition needs ChkDsk before attempting to read it and after reading NTFS documentation from <a href=\"https://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf\" rel=\"nofollow noreferrer\">here</a> and <a href=\"https://www.top-password.com/blog/how-to-manually-clear-or-set-dirty-bit-on-windows-volume/\" rel=\"nofollow noreferrer\">here</a> I understood the Dirty flag should be set in the <code>$Volume</code> file in the <code>$VOLUME_INFORMATION</code> attribute:</p>\n<p><a href=\"https://i.sstatic.net/HlbJQNoO.png\" rel=\"nofollow noreferrer\"><img alt=\"$VOLUME_INFORMATION\" src=\"https://i.sstatic.net/HlbJQNoO.png\"/></a></p>\n<p>However if I read this information the Dirty flag is not set as can be seen from this hex dump:\n<a href=\"https://i.sstatic.net/ykBWbrh0.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ykBWbrh0.png\"/></a></p>\n<p>However, after mounting (and without making any further changes) with Disk Management the dirty flag is immediately set:</p>\n<p><a href=\"https://i.sstatic.net/iP0hwxj8.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/iP0hwxj8.png\"/></a></p>\n<p>So how does Windows determine the disk is dirty if the flag was not set?\nAnd if I cannot use the dirty flag, how can I determine it programmatically?</p>\n<p>In this example the disk is from Windows 7 and the partition is MBR style. There are no other partitions in the VHDX.</p>\n<p><strong>EDIT</strong>\nFound the following extra information in Windows Internals 7th edition part 2 (page 709):</p>\n<blockquote>\n<p>The dirty bit has a slightly different meaning compared to previous editions of Windows. The $VOLUME_INFORMATION attribute of the NTFS root namespace still contains the dirty bit, but also contains the P-bit, which is used to require a Proactive Scan, and the F-bit, which is used to require a full check disk due to the severity of a particular corruption. The dirty bit is set to 1 by the file system driver if the p-bit or the F-bit are enabled, or if the $Corrupt stream contains one or more corruption records.</p>\n</blockquote>\n<p>So it looks like the P-Bit (Proactive scan bit) or the F-Bit might be set. Unfortunately I haven't found information where this bits are stored. Perhaps in 2nd byte of the flag field which is a <code>USHORT</code> ?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "43",
    "tags": [
        "windows",
        "file-format",
        "filesystem"
    ],
    "user": "Remko",
    "time": "Jul 12, 2024 at 9:45",
    "comments": [],
    "answers_data": []
}