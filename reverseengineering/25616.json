{
    "title": "Can I force GDB breakpoints and disassemble?",
    "link": "https://reverseengineering.stackexchange.com/questions/25616/can-i-force-gdb-breakpoints-and-disassemble",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorry English isn't my first language.</p>\n<p>I noticed something when setting breakpoints in GDB. It appears that they are ignored if symbols aren't loaded.</p>\n<p>I have found it weird how GDB behaves when there are no symbols at all loaded and if I want to debug something I am having to set a break point at <strong>__libc_start_main@plt</strong> and <strong>nexti</strong> until I reach a the main binary.  I also noticed that I cannot disassemble there in the main binary either (I receive this odd message \"<em>No function contains program counter for selected frame.</em>\"), but that aside it break points are essentially ignored. I have found an odd work around and that is setting</p>\n<pre><code>set *0x56555878 = 0xcc \n</code></pre>\n<p>My questions are:</p>\n<ul>\n<li>Why does GDB behave so weirdly without symbols?</li>\n<li>Why do normal for breakpoints fail to be recognized?</li>\n<li>Is setting my desired breakpoints to 0xcc and then resting; Is this a good practice?</li>\n<li>Is there a better way to set breakpoints?</li>\n<li>Why can I not disassemble without Why can I not disassemble without symbols?</li>\n</ul>\n<p>Edit: It looks like I cannot set *breakpoints in glibc but I can when I land in int main() program , But while in the int main() , I lose ability to disassemble.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "debugging",
        "c++",
        "gdb",
        "breakpoint",
        "debugging-symbols"
    ],
    "user": "LUser",
    "time": "Aug 6, 2020 at 15:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>gdb is primarily a Source Level Debugger</p>\n<p>to set a bp on an address instead of symbol use *</p>\n<pre><code>(gdb) break main\nBreakpoint 1 at 0x100401094: file mingtest.cpp, line 4.\n(gdb) break *0x100401094\nNote: breakpoint 1 also set at pc 0x100401094.\nBreakpoint 2 at 0x100401094: file mingtest.cpp, line 4.\n(gdb)\n</code></pre>\n<p>you can disassemble using address, length at any arbitrary addresss</p>\n<pre><code>(gdb) disassemble 0x100401094,+0x10\nDump of assembler code from 0x100401094 to 0x1004010a4:\n   0x0000000100401094 &lt;main(int, char**)+20&gt;:   mov    edx,DWORD PTR [rbp+0x10]\n   0x0000000100401097 &lt;main(int, char**)+23&gt;:   lea    rcx,[rip+0x1f62]        # 0x100403000\n   0x000000010040109e &lt;main(int, char**)+30&gt;:   call   0x100401110 &lt;printf&gt;\n   0x00000001004010a3 &lt;main(int, char**)+35&gt;:   mov    DWORD PTR [rbp-0x4],0x0\nEnd of assembler dump.\n(gdb)\n</code></pre>\n</div>",
            "votes": "4",
            "user": "blabb",
            "time": "Aug 7, 2020 at 23:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}