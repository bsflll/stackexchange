{
    "title": "Sniffing TCP packets using Wireshark",
    "link": "https://reverseengineering.stackexchange.com/questions/21321/sniffing-tcp-packets-using-wireshark",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer a decoder. The decoder contains a web server that makes sending/receiving information through the Internet possible.\nTo do so I need to sniff the packets that the decoder receives from an Android application installed on my phone, this application is what controls the decoder.</p>\n<p>I tried using Wireshark at first, but it turned out that the packets are sent over SSL, so they are all encrypted. I then tried to sniff my TCP packets using mitmproxy, which didn't work since it doesn't sniff TCP packets, it only logs packets sent over HTTP.</p>\n<p>After reading the answers to the following question <a href=\"https://github.com/mitmproxy/mitmproxy/issues/2883\" rel=\"nofollow noreferrer\">How can I capture all traffic network by mitmproxy?</a>. I decided to give Wireshark a second try.</p>\n<p>However, I need the private key which is stored on the decoder. This will enable me the decrypt the SSL packets. </p>\n<p>Is there any way I can get this private key from the decoder? would openssl solve this problem? I am on Linux, Ubuntu.</p>\n<p>I would appreciate some help with this!</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "789",
    "tags": [
        "linux",
        "decryption",
        "security",
        "sniffing",
        "wireshark"
    ],
    "user": "yosra",
    "time": "May 16, 2019 at 11:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can instead try injecting code into the process to dump the raw data before it is encrypted/after it is decrypted.</p>\n<p>You can use Google's <a href=\"https://github.com/google/ssl_logger/\" rel=\"nofollow noreferrer\"><code>ssl_logger</code></a> for that.</p>\n<p>You need to run <code>python ssl_logger.py -pcap log.pcap 123</code> with <code>123</code> being the process ID. Add <code>-verbose</code> to see live output.</p>\n<p>(Note that it needs Python2 and not Python3.)</p>\n<p>Once you are done, quit with Ctrl+C and analyze the <code>log.pcap</code> file in Wireshark, it will now contain unencrypted data.</p>\n</div>",
            "votes": "2",
            "user": "CherryDT",
            "time": "Mar 8, 2020 at 20:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}