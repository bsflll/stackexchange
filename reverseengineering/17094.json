{
    "title": "Decompiled code calls a function with unitialized variables",
    "link": "https://reverseengineering.stackexchange.com/questions/17094/decompiled-code-calls-a-function-with-unitialized-variables",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on decompiling the scripting engine from the game Rayman 2. It's going pretty well, but I'm getting stuck on a particular function which calls another function with arguments that aren't initialized.</p>\n<p>This is the relevant piece of the function:</p>\n<pre><code>void __cdecl fn_p_stIntelligenceEvalTreeEngine(HIE_tdstSuperObject \n*superObject, tdstNodeInterpret_ *nodeInterpreter, tdstGetSetParam_ \n*getSetParam)\n{\n  ...\n\n  HIE_tdstSuperObject *superObject_1; // [sp+0h] [bp-20h]@0\n  tdstNodeInterpret_ *nodeInterpreter_1; // [sp+4h] [bp-1Ch]@0\n  tdstGetSetParam_ *getSetParam_1; // [sp+8h] [bp-18h]@0\n\n  ...\n\n  evaluatedNode = fn_p_stEvalTree(superObject_1, nodeInterpreter_1, getSetParam_1);\n</code></pre>\n<p>From what I understand, at the time of calling the variables have already been put in place, namely at bp-20, bp-1C and bp-18h. Now what I'm failing to understand is how these variables are assigned. Should I be looking at the parent function which calls this function to see how these variables are created? Or is there some other explanation?</p>\n<p>Here's the full function for those interested:\n<a href=\"https://pastebin.com/Udj4K8PW\" rel=\"nofollow noreferrer\">https://pastebin.com/Udj4K8PW</a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "109",
    "tags": [
        "decompilation",
        "c"
    ],
    "user": "Robin Sonneveld",
    "time": "Jan 1, 2018 at 22:09",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">It's \"some other explanation\": decompilation is still guesswork. It helps, for stock functions that do standard things, but as soon as you go \"WTH!?\", it's time to take a look at the original disassembly.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">show us the asm.</span>",
            "time": null
        }
    ],
    "answers_data": []
}