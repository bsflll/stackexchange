{
    "title": "Is pointer decryption possible?",
    "link": "https://reverseengineering.stackexchange.com/questions/18325/is-pointer-decryption-possible",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I’m pretty new to reverse engineering, so bear with me...</p>\n<p>I’m trying to get a few <code>struct</code> definitions (or whatever they’re called) from this one binary. After some time fiddling around with it, I’ve gathered some data I’m pretty sure belongs to the one of the <code>struct</code>s I’m interested in. However, upon closer inspection, I’ve noticed the addresses of these “pieces of data” are scattered all over the place within this binary, instead of being in one contiguous chunk, as a <code>struct</code> should be.</p>\n<p>A quick Google search on this issue suggested it might be happening because of “pointer encryption”, which apparently is more like <code>xor</code>ing than encrypting(?)... and following searches on the topic lead to nothing.</p>\n<p>Which leads me to ask this: what exactly is “pointer encryption”? Can it be undone? And, if so, how can I decrypt it?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "binary-analysis",
        "c++",
        "pointer"
    ],
    "user": "Bruno Fauth",
    "time": "May 20, 2018 at 20:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>pointer encryption</p>\n</blockquote>\n<p>There is no such thing. There is only <em>pointer obfuscation.</em> This is essentially how Microsoft markets a couple of functions, and they're pretty open about it from the docs on <a href=\"https://msdn.microsoft.com/en-us/library/bb432254(v=vs.85).aspx\" rel=\"noreferrer\"><code>EncodePointer</code></a></p>\n<blockquote>\n<p>Encoding globally available pointers helps protect them from being exploited. The <code>EncodePointer</code> function <strong>obfuscates</strong> the pointer value with a secret so that it cannot be predicted by an external agent. The secret used by <code>EncodePointer</code> is different for each process.</p>\n</blockquote>\n<p>From one of the <a href=\"https://blogs.msdn.microsoft.com/michael_howard/2006/01/31/protecting-against-pointer-subterfuge-kinda/\" rel=\"noreferrer\">Microsoft blogs from 2006</a></p>\n<blockquote>\n<p>All these functions do is <code>XOR</code> a pointer with a random number; the first two functions use a random number held in every application’s  process information block, and the system versions use a value that is tied to each system reboot and is accessible to every application running on the box. [...] Rather than using the pointer directly, the pointer is encoded and stays encoded until you’re about to use it. This makes is more difficult for an attacker, because he must overwrite the function pointer with a value that would calculate correctly after the <code>XOR</code> operation. Not impossible, but highly unlikely.</p>\n</blockquote>\n</div>",
            "votes": "5",
            "user": "Evan Carroll",
            "time": "May 21, 2018 at 2:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Current versions of Windows have an algorithm that is slightly smarter than just XOR because it was easy to break if you had both the plain and obfuscated pointer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think there is any encryption going on. Probably the program uses multiple structs to store the data which is completely normal.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 22, 2018 at 7:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}