{
    "title": "x86_64 Calling convention",
    "link": "https://reverseengineering.stackexchange.com/questions/6337/x86-64-calling-convention",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am slightly confused by some x86_64 linux code here (generated by llvm):</p>\n<pre><code># BB#0:                                 # %entry\n    push    RBP\n.Ltmp21:\n    .cfi_def_cfa_offset 16\n.Ltmp22:\n    .cfi_offset rbp, -16\n    mov RBP, RSP\n.Ltmp23:\n    .cfi_def_cfa_register rbp\n    push    RBX\n    push    RAX\n.Ltmp24:\n    .cfi_offset rbx, -24\n    mov EDI, .L.urandom\n    mov ESI, 8\n    call    open\n    mov EBX, EAX\n    mov EDI, EBX\n    mov ESI, ptrenc.keys\n    mov EDX, 16\n    call    read\n</code></pre>\n<p>From what I read in wikipedia, I would have expected the arguments to open and read to be passed in R-Registers (RDI, RSI, RDX). </p>\n<p>The code uses the 64-bit Registers to build the stack frame. Why does it use the 32-bit registers for the calls? </p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "990",
    "tags": [
        "disassembly",
        "x86-64",
        "calling-conventions"
    ],
    "user": "John Nemo",
    "time": "Sep 30, 2014 at 8:39",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">You should read the <a href=\"http://www.x86-64.org/documentation/abi.pdf\" rel=\"nofollow noreferrer\">System V Application Binary Interface for AMD64</a>. It contains all the answers to your questions!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, your question is mainly about this part of the code (if I do not care about the second call which is similar anyway):</p>\n<pre><code>mov EDI, .L.urandom\nmov ESI, 8\ncall    open\n</code></pre>\n<p>In fact, this is perfectly okay to go through <code>ESI</code> and <code>EDI</code> as it is done here, because the value that are transfered are 32 bits values... and, anyway, in amd64, when manipulating 32 bits registers you will blank the upper 32 bits of the corresponding 64 bits registers (zero-extended). So, you end-up with <code>RSI</code> and <code>RDI</code> which are containing the right values and you only had to transfer 32 bits from the memory to the registers... It may be seen as a small optimization.</p>\n</div>",
            "votes": "3",
            "user": "perror",
            "time": "Sep 30, 2014 at 12:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You'll find an answer in <a href=\"http://llvm.org/releases/3.5.0/docs/ReleaseNotes.html#abi-and-abi-extensions\" rel=\"nofollow\">here</a>. If you want more details, well, <a href=\"http://llvm.org/docs/LangRef.html\" rel=\"nofollow\">here</a> you'll find everything you need. </p>\n</div>",
            "votes": "-2",
            "user": "yaspr",
            "time": "Sep 29, 2014 at 11:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Please don't post just links. Try to quote the relevant parts in the answer. P.S. your links don't seem to actually answer the question.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Well, the purpose is not to idiotically answer the question, rather to make a point. There's no need to ask a question for which there's already an answer in the documentation. Plus, the links answer the question perfectly, all you have to do is look !</span>",
                    "time": null
                },
                {
                    "user": "JamalS",
                    "text": "<span class=\"comment-copy\">@yaspr: \"Idiotically answer the question...\" What on earth is idiotic about answering the question, as you're suppose to be doing on the SE?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">As I said in my previous comment : The answer is in the documentation ! Redundancy, that's idiotic.</span>",
                    "time": null
                },
                {
                    "user": "SamB",
                    "text": "<span class=\"comment-copy\">Sometimes the URLs people use to link to the documentation go dead, so it's best to provide a summary of what the documentation actually says. (And it can take a fair bit of work to actually work out the implications of the documentation, too...)</span>",
                    "time": null
                }
            ]
        }
    ]
}