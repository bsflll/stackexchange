{
    "title": "Analyzing Windows kernel driver",
    "link": "https://reverseengineering.stackexchange.com/questions/21334/analyzing-windows-kernel-driver",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to analyze some Windows kernel driver. What I want to achieve is full execution trace, from driver entry to end point. Driver is heavily virtualized and contains multiple anti-debugging checks so using WinDbg isn't an option. I have tried VMWare gdb stub connected with IDA but tracing seems to doesn't work, it hangs and even few hours aren't enough. Have you any ideas how to do it in the simplest way?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "882",
    "tags": [
        "ida",
        "windows",
        "debugging",
        "windbg",
        "kernel"
    ],
    "user": "kozera2137",
    "time": "May 19, 2019 at 15:28",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Please show the specific issue. Your current topic is huge.</span>",
            "time": null
        },
        {
            "user": "kozera2137",
            "text": "<span class=\"comment-copy\">@Biswapriyo My question is how to make driver execution trace (like WinDbg t command, address + all registers state)  in the simplest way but not using WinDbg, I need something lower level.</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">windbg == dynamic analysis whereas IDA == static analysis.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Itâ€™s not geared towards exactly this purpose but you can probably make something based on <a href=\"https://github.com/googleprojectzero/bochspwn-reloaded\" rel=\"nofollow noreferrer\">Bochspwn</a>:</p>\n<blockquote>\n<p>Bochspwn Reloaded is an instrumentation module for the Bochs IA-32 emulator, similar to the original Bochspwn project from 2013. It performs taint tracking of the kernel address space of the guest operating systems, to detect the disclosure of uninitialized kernel stack/heap memory to user-mode and other data sinks.</p>\n</blockquote>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 21, 2019 at 21:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "kozera2137",
                    "text": "<span class=\"comment-copy\">I thought about it but I couldn't figure out how to run Windows 10 on it. Have you ever tried and can give me some tips? Each tutorial I have seen wasn't working.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Does it have to be win10? Maybe the driver will run in an older version</span>",
                    "time": null
                },
                {
                    "user": "kozera2137",
                    "text": "<span class=\"comment-copy\">Yes, for a few reasons it have to be Windows 10.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These days you may be able to use <a href=\"https://github.com/thalium/icebox\" rel=\"nofollow noreferrer\">Icebox</a> (and related projects) to achieve the required level introspection into the driver.</p>\n<p>I am unsure if this will be yielding the results you hope for, but it builds on an idea I first came across <a href=\"https://www.virusbulletin.com/uploads/pdf/conference_slides/2013/WillemsHund-VB2013.pdf\" rel=\"nofollow noreferrer\">at the VirusBulletin conference in 2013</a>. The whole thesis can be found <a href=\"https://www.syssec.ruhr-uni-bochum.de/media/emma/veroeffentlichungen/2014/11/21/Dissertation-Willems.pdf\" rel=\"nofollow noreferrer\">here</a>. Icebox appears to build on the same principle and is completely FLOSS, whereas the original CXPInspector by Willems and Hund never was (to the best of my knowledge). Their initial work was commercialized into something known as VMRay today.</p>\n<p>It's not exactly tracing you will get with this, but the authors of the seminal work remarked at the conference how they often managed to pin down a particular page access to a particular function call, so this approach provides more introspection than one would think at first glance.</p>\n</div>",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Jun 10, 2021 at 8:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}