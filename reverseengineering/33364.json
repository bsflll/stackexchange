{
    "title": "Ollvm deobfuscation",
    "link": "https://reverseengineering.stackexchange.com/questions/33364/ollvm-deobfuscation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am looking for efficient way to deobfuscate ollvm covered .so Android native lib. I was able to recover computed jumps (by manual patching), however I am struggling to recover control flow graph. Is there any way to do that? I've already tried using HexRaysDeob IDA plugin, but it didn't help. Can you share your experience in this area? What are you usually doing for deobfuscation?</p>\n</div>",
    "votes": "-2",
    "answers": 1,
    "views": "117",
    "tags": [
        "android",
        "deobfuscation",
        "control-flow-graph"
    ],
    "user": "tart",
    "time": "Jan 21 at 9:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">While the tone of some comments was certainly not the kindest, we do have rules about questions. One of them <a href=\"https://reverseengineering.stackexchange.com/help/dont-ask\">is that questions should not try to elicit subjective answers</a> because that makes them hard to answer and judge (in terms of up/downvoting). Feel free to browse <a href=\"https://reverseengineering.stackexchange.com/help\">our help center</a> to acquaint yourself with the general ideas as well as specifics behind this Q&amp;A format. One way to fix your question to better fit, is to edit it.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's not very clear from the way you phrased it, but I assume you're asking how to recover the CFG of a function obfuscated with <em>control flow flattening</em> technique.</p>\n<p>On the surface, the solution seems pretty simple:</p>\n<ol>\n<li>find the switch/dispatch variable</li>\n<li>for every write to the switch variable inside the dispatcher loop, replace it with a jump to the basic block/switch case for the corresponding value</li>\n</ol>\n<p>However, finding a way to automate this (unless you need to recover just one function) is the hard part. Most existing solutions were made for a specific target and may or may not work on yours, but understanding the basics should allow you to figure out how to do it in <em>your specific situation</em>.</p>\n<p>A few links on the topic that may be useful:</p>\n<ul>\n<li><a href=\"https://nerodesu017.github.io/posts/2023-12-01-antibots-part-8\" rel=\"nofollow noreferrer\">Deobfuscating Geetest CAPTCHA: A Practical Guide to Control Flow Flattening </a></li>\n<li><a href=\"https://synthesis.to/2021/03/03/flattening_detection.html\" rel=\"nofollow noreferrer\">Automated Detection of Control-flow Flattening</a></li>\n<li><a href=\"https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html\" rel=\"nofollow noreferrer\">Deobfuscation: recovering an OLLVM-protected program</a></li>\n</ul>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 1 at 20:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}