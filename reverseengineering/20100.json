{
    "title": "How does API call work on Android (NDK)?",
    "link": "https://reverseengineering.stackexchange.com/questions/20100/how-does-api-call-work-on-android-ndk",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In windows platform, an application usually references its IAT(Import Access Table) to get the address of the APIs it wants, then call it. Then some mechanisms are done as demonstrated <a href=\"http://www.osronline.com/article.cfm?id=257\" rel=\"noreferrer\">here</a> nicely.</p>\n<p>However, I cannot find out how API calls work on Android NDK. I think there's no IAT in an ELF file. Could anybody tell me how API calls on android works, in assembly level?</p>\n<blockquote>\n<p>E.g.</p>\n<p>When I call <code>ALooper_acquire(&amp;mylooper)</code> then it assembles as</p>\n<pre><code> mov r4, 0x2000  ; address of mylooper\n bl 0x7777fff0      ;address of ALooper_acauire\n ... after ALooper_acquire()\n</code></pre>\n<p>then in <code>0x7777fff0</code>:</p>\n<pre><code>Blah blah happens to call system api, ...\n</code></pre>\n</blockquote>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "2k",
    "tags": [
        "linux",
        "android",
        "arm",
        "system-call",
        "api"
    ],
    "user": "Hyeonseo Yang",
    "time": "Dec 18, 2018 at 12:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To answer your question, let us first set a solid ground in terms of entities and definitions.</p>\n<p><b>ELF</b> stands for \"Executable and Linkable format\". <br/>\nThat is, it defines the structure and shape of two types of files:</p>\n<ul>\n<li>Executables (Shared Objects *.so and stand-alone executables)</li>\n<li>Linkables (Object files *.o)</li>\n</ul>\n<p>Let us focus on executables.</p>\n<h3>Dependencies resolution of executables</h3>\n<p>Among other things, <b>ELF</b> defines a method of describing and resolving dependencies of executable.</p>\n<p><strong>Dependencies</strong></p>\n<p>Put simple, dependencies are required external symbols. \nSymbols are named (identified) chunks of memory.\nSome of the chunks are data chunks (Global variables) while others are code-data chunks (Global functions). \nSince a symbol is a part of a module (aka Shared Object), any required symbol is coupled with a module.</p>\n<p>In summary, dependencies are needed symbols and modules.</p>\n<p><em>Note that a function that is a part of an OS API could be and usually is an external symbol. However, it's not always the case.</em></p>\n<p><strong>Dependencies description</strong></p>\n<p>ELF defines a structure called Dynamic Segment used to store information needed by the loader (aka dynamic linker) in the loading process of an executable.\nAn executable's dependencies description is stored in its Dynamic Segment.</p>\n<p>Needed symbols are organized in a table called Dynamic Symbol Table that's referred by the Dynamic Segment:</p>\n<p><a href=\"https://i.sstatic.net/83QbD.png\" rel=\"noreferrer\"><img alt=\"]\" src=\"https://i.sstatic.net/83QbD.png\"/></a>\n<em>Reference to a symbol table under Loader directives- <a href=\"https://elfy.io/KYze4\" rel=\"noreferrer\">https://elfy.io/KYze4</a></em></p>\n<p>A dynamic symbol table is a contiguous array of symbol descriptors:</p>\n<p><a href=\"https://i.sstatic.net/TBgqq.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/TBgqq.png\"/></a>\n<em>.dynsym under Symbols - <a href=\"https://elfy.io/KYze4\" rel=\"noreferrer\">https://elfy.io/KYze4</a></em></p>\n<p>Needed modules on the other hand are described directly with DT_NEEDED entries:</p>\n<p><a href=\"https://i.sstatic.net/MPBIq.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/MPBIq.png\"/></a>\n<em>Needed modules under Loader directives - <a href=\"https://elfy.io/KYze4\" rel=\"noreferrer\">https://elfy.io/KYze4</a></em></p>\n<p><strong>Dynamic link</strong></p>\n<p>Now we are ready to discuss the wiring mechanism that lets an executable reach its dependencies <b>once</b> they are resolved by the loader.\nWe will do it by following the steps of an external function call.</p>\n<p>Let's take a call to <em>__android_log_print</em> as an example (ARM 32 bit).</p>\n<pre><code>...\n   1d21a:       f7fa e8e8       blx     173ec ; __android_log_print@plt\n...</code></pre>\n<p>The above is an assembly that calls __android_log_print which prints out text to Android Logcat.\nBut in fact, that <strong>blx</strong> instruction branches to a specific code-stub in a special area called <strong>Procedure Link Table</strong> (PLT).\nThere's a code stub in the PLT for <em>every</em> needed external function.</p>\n<p>Here's __android_log_print's stub:</p>\n<pre><code>...\n000173ec __android_log_print@plt:\n   173ec:       e28fc600        add     ip, pc, #0, 12\n   173f0:       e28cca11        add     ip, ip, #69632   \n   173f4:       e5bcf9f4        ldr     pc, [ip, #2548]! \n000173f8 sleep@plt:\n   173f8:       e28fc600        add     ip, pc, #0, 12\n   173fc:       e28cca11        add     ip, ip, #69632\n   17400:       e5bcf9ec        ldr     pc, [ip, #2540]!\n...\n</code></pre>\n<p>The three instructions in the stub do the following: (pseudo code)\n<pre><code>JUMP *(GOT_ADDRESS + GOT_OFFSET_OF(__android_log_print))\n</code></pre></p>\n<p>The <strong>Global Offset Table</strong> (GOT) is a table of pointers.\nThere's a cell in the GOT for every external function.\nThat is, every external function has its own cell in the GOT.\nOnce the loading process is done, the cell of function X contains the memory address of function X.</p>\n<ul>\n<li>The address computation of the right cell in the GOT is split into 3 because of\nencoding limitations. eg: Large offsets can't be encoded in a \nsingle instruction.</li>\n</ul>\n<p>It's the OS loader responsibility to initialize the GOT with the right memory addresses, based on the information discussed before.</p>\n<p>The PLT and GOT are parts of the ELF specification.</p>\n</div>",
            "votes": "7",
            "user": "Lero",
            "time": "Dec 12, 2018 at 5:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hyeonseo Yang",
                    "text": "<span class=\"comment-copy\">Thank you so much!! Sounds like this applies to any linux executables, right?</span>",
                    "time": null
                },
                {
                    "user": "Lero",
                    "text": "<span class=\"comment-copy\">@KYHSGeekCode  I have yet to see a Linux executable that's formatted with a format other than ELF. So it's safe to assume that a Linux executable would be an ELF file, and in such case, yes, the mechanism would be the same.</span>",
                    "time": null
                },
                {
                    "user": "Chris Stratton",
                    "text": "<span class=\"comment-copy\">ELF was not Linux's initial dynamic executable format.  And there are some static binary formats in use today.  But what's really notable about Android is that it uses a unique libc.  Some embedded systems use alternate libc's as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}