{
    "title": "How to interpret disassembled MIPS code?",
    "link": "https://reverseengineering.stackexchange.com/questions/18974/how-to-interpret-disassembled-mips-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have disassembled MIPS binary with raw opcodes. How to interpret, for example, these lines:</p>\n<pre><code>Disassembly of section .data:\n\n00000000 &lt;.data&gt;:\n    ... ...\n    f864:   30a5ffff    sd  ra,-23248(ra)\n    f868:   00804021    addi    zero,t2,-32768\n    f86c:   10a00017    bnez    t8,0xffff78b0\n    f870:   00004821    addi    t0,t2,0\n</code></pre>\n<p>and these 3 lines:</p>\n<pre><code>25b8:   8c670000    syscall 0x19e\n25bc:   8c680004    bltz    zero,0x1c7f0\n25c0:   8c690008    j   0x1a630\n</code></pre>\n<p>what mean data in each column?</p>\n<p><strong>Edit:</strong> The files are contents of memory (in hex) of SPI Flash regions, converted to binary form (.bin) use <code>xxd -r</code>. The <code>file</code> command determines the file type of file.bin as <code>data</code> file type.</p>\n<p>I tried transform binary into <a href=\"https://github.com/octavetek/research/blob/master/Bootloader.elf?raw=true\" rel=\"nofollow noreferrer\">ELF</a>:</p>\n<p><code>mips-linux-gnu-objcopy -I binary -O elf32-little --rename-section .data=.text --change-address +0x80000000 file.bin file.elf</code></p>\n<p>then to disassemble an ELF <a href=\"https://pastebin.com/raw/bF4uapVd\" rel=\"nofollow noreferrer\">file</a>:</p>\n<p><code>mips-linux-gnu-objdump -m mips  -D file.elf</code></p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "linux",
        "embedded",
        "mips"
    ],
    "user": "minto",
    "time": "Aug 7, 2018 at 19:52",
    "comments": [
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\">This looks like objdump, it's a linear sweep so data will be interpreted as instructions but it's data. Look for .text seciton if you want code. This looks meaningless.</span>",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "<span class=\"comment-copy\"><a href=\"https://resources.infosecinstitute.com/linear-sweep-vs-recursive-disassembling-algorithm/\" rel=\"nofollow noreferrer\">resources.infosecinstitute.com/â€¦</a></span>",
            "time": null
        },
        {
            "user": "minto",
            "text": "<span class=\"comment-copy\">@yaspr Yes, it's from <code>objdump</code>, but there is no .text section produced in the output. I used command <code>mips-linux-gnu-objdump -D -b binary -m mips file.bin</code></span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Use -d rather than -D</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>.data</code> <em>section</em> is mapped to the <em>data segment</em> which is not executable. This is because it does not contain executable code; rather, it contains data (hence the name). As a result, when this data is treated as code and disassembled, the results will not be meaningful. </p>\n</div>",
            "votes": "2",
            "user": "julian",
            "time": "Aug 4, 2018 at 14:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">The other files I disassembled also start from <code>&lt;.data&gt;</code> section, it's present in all files (bootloader, Image, Perm.nonvol, Dyn.nonvol)</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@minto are these ELF binaries? You need to determine their format and structure prior to disassembly</span>",
                    "time": null
                },
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">These files are contents of memory (in hex) of SPI Flash regions, converted to binary form (.bin) use <code>xxd -r</code>. The <code>file</code> command determines the file type of file.bin as <code>data</code> file type.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@minto this is important information that should have been included in the question. Please edit your question.</span>",
                    "time": null
                },
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">I'm inclined to think that the memory addresses I used to extract memory areas are incorrect, most likely they just don't match the real location of memory regions.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The columns are like follows:</p>\n<pre><code>  address| bytes     | disassembly\n---------|-----------|--------------------------\n    f864:|  30a5ffff |  sd  ra,-23248(ra)\n</code></pre>\n<p>Address <em>usually</em> corresponds to the execution address for structured file formats (e.g. ELF), but for raw binary it matches the plain file offset (i.e. the file is assumed to be loaded at 0). If you want to pretend that your file is loaded at another address, you can pass the <code>--adjust-vma=OFFSET</code> flag to <code>objdump</code>.</p>\n<p>You don't see <code>.text</code> in the output because the raw binary has no section headers to describe its structure, so <code>objdump</code> makes up a pseudo-section <code>.data</code> to represent the file's contents. Normally data sections are not disassembled, so you need to use <code>-D</code> instead of <code>-d</code> to force its disassembly. </p>\n<p>The disassembly you quote looks quite nonsensical, so probably you either have data intermixed with code (a common situation in embedded firmwares), or the binary is not MIPS code but some other architecture.</p>\n<p><code>8c670000</code>, <code>8c670004</code> and <code>8c670008</code> in the second snippet actually looks like a table of addresses to me, so probably it's data. You'll need to look through disassembly and sort out data from code.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 6, 2018 at 12:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">Thanks for pointing to this. Really, .bin and .hex files do not have sections; they just have addresses which are equal to the byte index. I have to convert binary file to ELF file format at MIPS32 boot address for disassemble.</span>",
                    "time": null
                },
                {
                    "user": "minto",
                    "text": "<span class=\"comment-copy\">I updated topic and have added new details.</span>",
                    "time": null
                }
            ]
        }
    ]
}