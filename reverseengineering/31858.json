{
    "title": "Reverse Engineer 16 Bit error checking byte calculation",
    "link": "https://reverseengineering.stackexchange.com/questions/31858/reverse-engineer-16-bit-error-checking-byte-calculation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hello =) I am attempting to reverse engineer a communications protocol to some obsolete equipment. Communication happens on an RS485 line.</p>\n<p>I have captured several exchanges and seem to have figured out a bit the structure.</p>\n<p>What I am missing at the moment is to see how I would calculate the last 2 bytes which seem to be a CRC, Checksum, LRC,... some sort of Calculated bytes depending on the data.</p>\n<p>This is a Master -&gt; Slave Communication.\nM: <code>Hex bytes sent by master</code>\nSx: <code>Hex Bytes replied by Slave x</code></p>\n<p>Serial Numbers of Slaves:\nS1: F376150801196\nS2: F306103101122\nS3: F306093001029</p>\n<ul>\n<li><p>Broadcasting message to Discover devices</p>\n</li>\n<li><p>M: <code>ff 00 00 04 00 00 00 00 00 13 00 02 00 00 18 01</code></p>\n</li>\n<li><p>S1: <code>fe 00 f3 04 00 00 00 00 00 00 00 00 ac 04 a5 02</code></p>\n</li>\n<li><p>S2: <code>fe 00 f3 04 00 00 00 00 00 00 00 00 62 04 5b 02</code></p>\n</li>\n<li><p>S3: <code>fe 00 f3 04 00 00 00 00 00 00 00 00 05 04 fe 01</code></p>\n</li>\n</ul>\n<p>Devices getting enumerated :</p>\n<ul>\n<li><p>M:  <code>ff 00 f3 02 ac 04 00 00 00 1b 00 00 00 00 bf 02</code></p>\n</li>\n<li><p>S1: <code>fe 00 f3 02 ac 04 38 30 35 31 36 37 ac 04 8e 04</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 03 ac 04 00 00 00 1b 00 00 00 00 c0 02</code></p>\n</li>\n<li><p>S1: <code>fe 00 f3 03 ac 04 38 30 35 31 36 37 ac 04 8f 04</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 16 ac 04 00 00 00 1b 00 00 ac 04 83 03</code></p>\n</li>\n<li><p>S1: <code>fe 00 f3 16 ac 04 38 30 35 31 36 37 ac 04 a2 04</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 02 62 04 00 00 00 1b 00 00 00 00 75 02</code></p>\n</li>\n<li><p>S2: <code>fe 00 f3 02 62 04 31 33 30 31 36 30 62 04 ea 03</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 03 62 04 00 00 00 1b 00 00 00 00 76 02</code></p>\n</li>\n<li><p>S2: <code>fe 00 f3 03 62 04 31 33 30 31 36 30 62 04 eb 03</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 16 62 04 00 00 00 1b 00 00 62 04 ef 02</code></p>\n</li>\n<li><p>S2: <code>fe 00 f3 16 62 04 31 33 30 31 36 30 62 04 fe 03</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 02 05 04 00 00 00 1b 00 00 00 00 18 02</code></p>\n</li>\n<li><p>S3: <code>fe 00 f3 02 05 04 30 33 39 30 36 30 05 04 37 03</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 03 05 04 00 00 00 1b 00 00 00 00 19 02</code></p>\n</li>\n<li><p>S3: <code>fe 00 f3 03 05 04 30 33 39 30 36 30 05 04 38 03</code></p>\n</li>\n<li><p>M:  <code>ff 00 f3 16 05 04 00 00 00 1b 00 00 05 04 35 02</code></p>\n</li>\n<li><p>S3: <code>fe 00 f3 16 05 04 30 33 39 30 36 30 05 04 4b 03</code></p>\n</li>\n</ul>\n<hr/>\n<p>Acknowledgement of recieved command from different slaves to the commands of move slave from Master</p>\n<ul>\n<li>S1: <code>fe 00 f3 41 00 00 00 00 00 00 00 00 ac 04 e2 02</code></li>\n<li>S2: <code>fe 00 f3 41 00 00 00 00 00 00 00 00 62 04 98 02</code></li>\n<li>S3: <code>fe 00 f3 41 00 00 00 00 00 00 00 00 05 04 3b 02</code></li>\n</ul>\n<p>Commands, acknowledged by the acknowledge command of each respective Slave accordingly</p>\n<ul>\n<li><p>S1 Stop Movement:</p>\n</li>\n<li><p>M: <code>ff fb f3 41 00 00 90 01 c2 01 00 03 ac 04 35 05</code></p>\n</li>\n<li><p>S2 Stop Movement:</p>\n</li>\n<li><p>M: <code>ff fb f3 41 ff 00 00 00 00 00 00 03 62 04 96 04</code></p>\n</li>\n<li><p>S3 Stop Movement:</p>\n</li>\n<li><p>M: <code>ff fb f3 41 ff 00 00 00 00 00 00 03 05 04 39 04</code></p>\n</li>\n<li><p>S3 Go Right <code>ff fb f3 41 ff 01 00 00 00 00 00 03 05 04 3a 04</code></p>\n</li>\n<li><p>S3 Go Left  <code>ff fb f3 41 ff 02 00 00 00 00 00 03 05 04 3b 04</code></p>\n</li>\n<li><p>S3 Go Down  <code>ff fb f3 41 ff 03 00 00 00 00 00 03 05 04 3c 04</code></p>\n</li>\n<li><p>S3 Go Up    <code>ff fb f3 41 ff 04 00 00 00 00 00 03 05 04 3d 04</code></p>\n</li>\n<li><p>S2 Go Right <code>ff fb f3 41 ff 01 00 00 00 00 00 03 62 04 97 04</code></p>\n</li>\n<li><p>S2 Go Left  <code>ff fb f3 41 ff 02 00 00 00 00 00 03 62 04 98 04</code></p>\n</li>\n<li><p>S2 Go Down  <code>ff fb f3 41 ff 03 00 00 00 00 00 03 62 04 99 04</code></p>\n</li>\n<li><p>S2 Go Up    <code>ff fb f3 41 ff 04 00 00 00 00 00 03 62 04 9a 04</code></p>\n</li>\n<li><p>S1 Go Right <code>ff fb f3 41 ff 01 90 01 c2 01 00 03 ac 04 35 06</code></p>\n</li>\n<li><p>S1 Go Left  <code>ff fb f3 41 ff 02 90 01 c2 01 00 03 ac 04 36 06</code></p>\n</li>\n<li><p>S1 Go Down  <code>ff fb f3 41 ff 03 90 01 c2 01 00 03 ac 04 37 06</code></p>\n</li>\n<li><p>S1 Go Up    <code>ff fb f3 41 ff 04 90 01 c2 01 00 03 ac 04 38 06</code></p>\n</li>\n</ul>\n<p>S3 Go to</p>\n<ul>\n<li>400 , 450 : <code>ff fb f3 41 ff 05 90 01 c2 01 00 03 05 04 92 05</code></li>\n<li>401 , 450 : <code>ff fb f3 41 ff 05 91 01 c2 01 00 03 05 04 93 05</code></li>\n<li>402 , 450 : <code>ff fb f3 41 ff 05 92 01 c2 01 00 03 05 04 94 05</code></li>\n<li>403 , 450 : <code>ff fb f3 41 ff 05 93 01 c2 01 00 03 05 04 95 05</code></li>\n<li>404 , 450 : <code>ff fb f3 41 ff 05 94 01 c2 01 00 03 05 04 96 05</code></li>\n<li>405 , 450 : <code>ff fb f3 41 ff 05 95 01 c2 01 00 03 05 04 97 05</code></li>\n<li>406 , 450 : <code>ff fb f3 41 ff 05 96 01 c2 01 00 03 05 04 98 05</code></li>\n<li>407 , 450 : <code>ff fb f3 41 ff 05 97 01 c2 01 00 03 05 04 99 05</code></li>\n<li>408 , 450 : <code>ff fb f3 41 ff 05 98 01 c2 01 00 03 05 04 9a 05</code></li>\n<li>409 , 450 : <code>ff fb f3 41 ff 05 99 01 c2 01 00 03 05 04 9b 05</code></li>\n<li>410 , 450 : <code>ff fb f3 41 ff 05 9a 01 c2 01 00 03 05 04 9c 05</code></li>\n</ul>\n<hr/>\n<p>From my observations the Structure I have the following identified:</p>\n<p><code>ff    fb    f3    41 ff 05 9a 01 c2 01 00 03 05     04     9c     05</code></p>\n<p>byte1 byte2 byte3 --------------------------------- byte13 byte14 byte15 byte16</p>\n<ul>\n<li><p>bytes 13 and 14 are to identify the specific device which is in a multi-drop network for whom the command is for. It is the last 5 numbers of the serial number represented in Hexadecimal.</p>\n<ul>\n<li>0405 -&gt; 01029 &lt;- S3: F306093001029</li>\n<li>0462 -&gt; 01122 &lt;- S2: F306103101122</li>\n<li>04ac -&gt; 01196 &lt;- S1: F376150801196</li>\n</ul>\n</li>\n<li><p>bytes 15 and 16 are the calculated ones, which I am trying to figure out how they get calculated.</p>\n</li>\n</ul>\n<hr/>\n<p>I have been manually attempting to calculate and compare several 16 bit CRCs and also tried running several frames through <a href=\"https://reveng.sourceforge.io/\" rel=\"nofollow noreferrer\">Reveng</a> with out much luck, no models ever get found.</p>\n<hr/>\n<p>Any help and insights would be greatly apreciated.</p>\n<p>Thanks!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "242",
    "tags": [
        "serial-communication",
        "crc",
        "checksum"
    ],
    "user": "Pau Coma Ramirez",
    "time": "May 12, 2023 at 0:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, after reviewing <a href=\"https://reverseengineering.stackexchange.com/q/20748/2490\">This following Stack Overflow Question</a></p>\n<p>I opened up an excel and made some tests and effectively</p>\n<p>Sum of all bytes is the calculation</p>\n<ul>\n<li>Hex  <code>ff  00  00  04  00  00  00  00  00  13  00  02  00  00  18  01</code></li>\n<li>Dec  <code>255 0   0   4   0   0   0   0   0   19  0   2   0   0</code>\n<ul>\n<li>Sum of all in Decimal = <strong>280</strong> --&gt; Respresented in Hex <code>0118</code></li>\n</ul>\n</li>\n</ul>\n<p>Sometimes we search for too complicated answers to simple things.</p>\n<p>Thanks anyway for having a look.</p>\n</div>",
            "votes": "2",
            "user": "Pau Coma Ramirez",
            "time": "May 12, 2023 at 0:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}