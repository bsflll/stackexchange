{
    "title": "Where can be assembly-csharp.dll decrypted?",
    "link": "https://reverseengineering.stackexchange.com/questions/12735/where-can-be-assembly-csharp-dll-decrypted",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So I have an android game. Its <code>Assembly-CSharp.dll</code> causes <code>.NET Reflector</code> to show</p>\n<blockquote>\n<p>File is not a portable executable. DOS header does not contain 'MZ'\n  signature</p>\n</blockquote>\n<p>It's encrypted. The app seems to decrypt that assembly at app launch time.</p>\n<p>So I used <code>UltraCompare</code> to point out what is changed from previous version(It wasn't encrypted).</p>\n<p><code>classes.dex</code> was identical, so no java code was changed.<br/>\n<code>libmain.so</code> and <code>libunity.so</code> was identical, but <code>libmono.so</code> had a big change.</p>\n<p>There was some new added symbols which seem to be related with encryption such as <code>TEAEncrypt</code>, <code>TEADecrypt</code>, <code>TEAEncryptString</code>, <code>TEADecryptString</code>, and some\nmono library's C# internal call routine like <code>ves_icall_System_Security_SecureString_EncryptInternal</code>.</p>\n<p>If it's the means of the encryption, I wander where are those functions called.</p>\n<p>There was some changes to <code>Assembly-CSharp-firstpass.dll</code>, <code>Assembly-UnityScript.dll</code>, <code>Assembly-UnityStript-firstpass.dll</code> with <strong>a same change pattern</strong>. I can't figure out what does this means.</p>\n<p>So where can be the <strong>Assembly-CSharp.dll</strong> decrypted at runtime?\nOr is there another way without decrypting that at runtime?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "dll"
    ],
    "user": "Ris",
    "time": "May 25, 2016 at 11:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Mono is, basically, open source. So anyone can create a Mono implementation that, whenever it reads a chunk of a CIL DLL file, applies encryption to it. Maybe Unity delivers a libmono.so that does encryption with its newest version; maybe the vendor of the game implemented something themselves. You could start checking patch notes of Unity to learn if this is an official new feature; if not, it's likely that the game vendor created their own encrypting libmono.so.</p>\n<p>Your TEA functions are, most likely, called within the libmono.so itself. If i had to implement something like that, i'd write wrapper functions <code>TEAopen</code>, <code>TEAread</code>, <code>TEAclose</code> for <code>fopen</code>, <code>fread</code>, <code>fclose</code> that decrypt on reading the file, then replace the <code>f-*</code> functions in the mono-code that reads a DLL with the <code>TEA-*</code> functions.</p>\n<p>TEA encryption works with 8-byte chunks, which may be one of the reasons it was used here; if you want to read just a part of the file, you don't need to read everything before your part, except a few bytes to fill the 8-byte-block. But this also means the same 8 input bytes will always result in the same 8 output bytes, if your original DLL has areas with a lot of '\\0' bytes, they will result in the same 8 bytes repeated over and over in the encrypted DLL.</p>\n<p>While <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.4708&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">TEA has a weakness that turns a 128 bit key into 126 effective bits, there seems to be no known plaintext attack on it</a>. This means, your observed same change pattern won't help you. So you need to extract the key from the mono implementation yourself. Disassemble that file, especially the <code>TEAEncrypt</code> and <code>TEADecrypt</code> functions. They should look somewhat like the code from the <a href=\"https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm\" rel=\"nofollow\">Wikipedia article</a>. Their second parameter is the key; either try to find out where that key is stored/generated, or do some dynamic analysis, put a breakpoint on those functions, and check what the parameter they get actually is. Also, check if it's really a standard TEA implementation, or maybe XTEA or a different key schedule constant or something. Once you have the key, find a program that takes a file and a TEA key and decrypts it, or roll your own; this shouldn't be too difficult as there are lots of open source TEA implementations in any language of your choice.</p>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 25, 2016 at 10:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ris",
                    "text": "<span class=\"comment-copy\">So that same change pattern is not related to encryption. Only Assembly-CSharp.dll was encrypted. Anyway, those functions seems to be almost same with the wikipedia source. I have another question here, what routine is managing the assembly loading?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">What routine is managing the assembly loading? Best check the mono source code (<a href=\"https://github.com/mono\" rel=\"nofollow noreferrer\">github.com/mono</a>). Comparing that source with your libmono.so is probably the fastest way to find out what's different/where the encryption happens.</span>",
                    "time": null
                },
                {
                    "user": "Ris",
                    "text": "<span class=\"comment-copy\">yep, I found it. I used IDA Proximity Browser. I didn't know the purpose of that browser and I finally got it. I searched TEADecryptString's function calls and found the key.</span>",
                    "time": null
                }
            ]
        }
    ]
}