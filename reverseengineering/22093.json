{
    "title": "How is `va_list` implemented in Assembler level on ARMv7 Android?",
    "link": "https://reverseengineering.stackexchange.com/questions/22093/how-is-va-list-implemented-in-assembler-level-on-armv7-android",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to extract all arguments from <code>CallStaticObjectMethodV</code> JNI call on ARMv7 Android at Assembler level.</p>\n<p>Can anyone advice how is <code>va_list</code> implemented on low level in ARMv7 Android?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "374",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "Vitalii",
    "time": "Sep 10, 2019 at 8:22",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <em>Procedure Call Standard for the ARMÂ® Architecture</em> (ARM IHI 0042E):</p>\n<p>Typedef: <code>va_list</code></p>\n<p>Base type:</p>\n<pre><code>struct __va_list {\nvoid *__ap;\n}\n</code></pre>\n<p>Notes:</p>\n<blockquote>\n<p>A <code>va_list</code> may address any object in a parameter list. Consequently,\n  the first object addressed may only have word alignment (all objects\n  are at least word aligned), but any double-word aligned object will\n  appear at the correct double-word alignment in memory. In C++,\n  <code>__va_list</code> is in namespace <code>std</code>.</p>\n</blockquote>\n<p>So basically it's just a pointer to the word-aligned arguments in memory.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 10, 2019 at 9:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}