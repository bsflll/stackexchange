{
    "title": "Finding password in disassembled code",
    "link": "https://reverseengineering.stackexchange.com/questions/13147/finding-password-in-disassembled-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to learn reverse engineering techniques, apologies in advance if I leave anything out</p>\n<p>I'm trying to find the password in the following section of disassembled code (there are other blocks of code in case those need to be included as well)</p>\n<pre><code>push    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\npush    esi\npush    ebx\nsub     esp, 158h\nmov     eax, [ebp+arg_4]\nmov     [esp+1Ch], eax\nmov     eax, large gs:14h\nmov     [esp+14Ch], eax\nxor     eax, eax\nmov     dword ptr [esp+2Eh], 74726170h\nmov     word ptr [esp+32h], 32h\nmov     dword ptr [esp+141h], 32656854h\nmov     dword ptr [esp+145h], 6150646Eh\nmov     word ptr [esp+149h], 7472h\nmov     byte ptr [esp+14Bh], 0\nmov     dword ptr [esp+4], offset aPassword ; \"password:\\n\"\nmov     dword ptr [esp], offset _ZSt4cout ; std::cout\ncall    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt; &amp;,char const*)\nmov     dword ptr [esp+8], 100h ; int\nlea     eax, [esp+41h]\nmov     [esp+4], eax    ; char *\nmov     dword ptr [esp], offset _ZSt3cin ; this\ncall    __ZNSi3getEPci  ; std::istream::get(char *,int)\nlea     eax, [esp+40h]\nmov     [esp], eax\ncall    __ZNSaIcEC1Ev   ; std::allocator&lt;char&gt;::allocator(void)\nlea     eax, [esp+40h]\nmov     [esp+8], eax\nmov     dword ptr [esp+4], offset aThisisnotthepa ; \"thisisnotthepassword\"\nlea     eax, [esp+38h]\nmov     [esp], eax\ncall    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator&lt;char&gt; const&amp;)\nlea     eax, [esp+40h]\nmov     [esp], eax\ncall    __ZNSaIcED1Ev   ; std::allocator&lt;char&gt;::~allocator()\nmov     dword ptr [esp+8], 3E8h ; n\nlea     eax, [esp+41h]\nmov     [esp+4], eax    ; s2\nmov     dword ptr [esp], offset s1 ; \"FBQ2GE9\"\ncall    _strncmp\ntest    eax, eax\njnz     short loc_8048A74\n</code></pre>\n<p>If the compare succeeds, then the password is correct</p>\n<p>I was thinking that it would have been <code>FBQ2GE9</code>, but that's apparently the wrong answer. What am I missing here?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "7k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "x86"
    ],
    "user": "user906153",
    "time": "Jul 26, 2016 at 15:46",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">On what grounds did you reject <code>FBQ2GE9</code> as the solution? (Mainly because you don't tell why in your post, but particularly interesting because Alex says it <i>is</i> correct after all.)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not specialist, especially in C++ re, but password is constructing in the lines:</p>\n<pre><code>mov     dword ptr [esp+2Eh], 74726170h\n...\nmov     byte ptr [esp+14Bh], 0\n</code></pre>\n<p>Second command is <code>null</code>-byte in null terminated strings. \nAlso, you should take care to <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow\">endianness</a>.\nSo answer is in that numbers: <code>70617274 32 54686532 6E645061 7274</code>.\nThis is hex representation of password, which you can convert into ascii with python3 command:</p>\n<pre><code>$ python3 -c 'import binascii; print(binascii.unhexlify(\"7061727432546865326E6450617274\"))'\nb'part2The2ndPart'\n</code></pre>\n<p>So the answer is <code>part2The2ndPart</code></p>\n<p>Also take a look at the <a href=\"http://beginners.re\" rel=\"nofollow\">Denis's Yrichev reverse engineering book for beginners.</a></p>\n<p><em>UPDATE</em></p>\n<pre><code>./part1.exe\npassword:\nFBQ2GE9\ncorrect!\nusername: part2, password: The2ndPart\n10.56.15.125\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Alex Bender",
            "time": "Jul 26, 2016 at 17:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user906153",
                    "text": "<span class=\"comment-copy\">How did you construct the hex string? I had 7472617032326568546150646E7472 for it, which is trap22ehTaPdntr in ascii</span>",
                    "time": null
                },
                {
                    "user": "user906153",
                    "text": "<span class=\"comment-copy\">Also, I tried part2The2ndPart as the password and that did not work either. If you want to look at the binary, I uploaded it here: filehosting.org/file/details/588766/part1.exe</span>",
                    "time": null
                },
                {
                    "user": "Alex Bender",
                    "text": "<span class=\"comment-copy\"><code>74726170h</code> = <code>7061 7274</code>;  you should read it from its end via chunks by two</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@user906153 It's to do with endianness and C standards for storing strings <a href=\"https://stackoverflow.com/questions/1568057/ascii-strings-and-endianness\" title=\"ascii strings and endianness\">stackoverflow.com/questions/1568057/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}