{
    "title": "How to interpret this __ctype_b based predicate?",
    "link": "https://reverseengineering.stackexchange.com/questions/31175/how-to-interpret-this-ctype-b-based-predicate",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am getting this simplified function from the decomplication results of Ghidra, and I am having a hard time interpreting what the predicate would evaluate to since I do not have access to <code>__ctype_b</code> structure, in other words, what is this predicate indicating (eg. no blank spaces, digits only, ect...) ?</p>\n<pre><code>int myFunc(char myChar) {\n\n    if ((*(unsigned short*)((char)myChar * 2 + __ctype_b) &gt;&gt; 6 &amp; 1) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "118",
    "tags": [
        "disassembly",
        "decompilation",
        "c",
        "ghidra"
    ],
    "user": "Anis LOUNIS aka AnixPasBesoin",
    "time": "Nov 25, 2022 at 14:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>_ctype</code> is a common name for an array with flags used for implementing the <code>is...</code> family of C runtime function-like macros from <code>ctype.h</code> (<code>isupper</code>, <code>islower</code>, <code>isalpha</code>, <code>isdigit</code> and so on). For example, see <a href=\"https://github.com/syracuse-mscs-2019/simplescalar/blob/master/glibc-1.09/locale/C-ctype_ct.c\" rel=\"nofollow noreferrer\">this file</a> from early glibc:</p>\n<pre><code>CONST unsigned short int __ctype_b_C[] =\n  {\n    0,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl|_ISspace|_ISblank,\n</code></pre>\n<p>If we assume that __ctype_b is an array of shorts, the function seems to be equivalent to:</p>\n<pre><code>return (__ctype_b[myChar]&gt;&gt;6 &amp; 1)==0;\n</code></pre>\n<p>or</p>\n<pre><code>return (__ctype_b[myChar]&amp; (1&lt;&lt;6))==0;\n</code></pre>\n<p>If the bits in the table use <a href=\"https://github.com/syracuse-mscs-2019/simplescalar/blob/master/sslittle-na-sstrix/include/ctype.h\" rel=\"nofollow noreferrer\">standard values</a>, <code>1&lt;&lt;6</code> corresponds to the <code>_ISpunct</code> flag, so the function seems to return  <code>!ispunct(myChar)</code>;</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 25, 2022 at 21:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}