{
    "title": "Saving program execution state for fuzzing",
    "link": "https://reverseengineering.stackexchange.com/questions/8943/saving-program-execution-state-for-fuzzing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Suppose I have a program that has two functions, <code>functionA</code> and <code>functionB</code> called sequentially.  </p>\n<p><code>functionA</code> requires a significant amount of processing in order to execute, and in the course of the execution sets up and maintains many global variables referenced by <code>functionB</code>. </p>\n<p>I want to fuzz input to <code>functionB</code>, but having to run <code>functionA</code> first forces me to wait about 10 seconds before I can see the results of a particular test.</p>\n<p>How can I save the program state after executing <code>functionA</code> and resume at <code>functionB</code> when I want to run a set of tests? </p>\n<p>Additionally, what mechanisms are there to alter the program variables to reflect the new fuzzing values?</p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "466",
    "tags": [
        "dynamic-analysis",
        "fuzzing",
        "instrumentation"
    ],
    "user": "amccormack",
    "time": "Aug 31, 2018 at 1:24",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">Intel PIN tool has an <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/58423/Pin/html/group__CONTEXT__API.html\" rel=\"nofollow noreferrer\">API</a> to replay execution by saving/restoring the processor states, memory changes need to be tracked manually. Also have a look at this <i><a href=\"http://www.cs.berkeley.edu/~krste/papers/pin-wbia.pdf\" rel=\"nofollow noreferrer\">pdf</a></i>. However do note that the API has changed than what is mentioned in the pdf, but you will get the general idea.</span>",
            "time": null
        },
        {
            "user": "Carlos Garcia",
            "text": "<span class=\"comment-copy\">As mentioned above, memory accesses can be tricky to follow, as well as things like open file descriptors, etc. If you are doing some in-memory fuzzing and those functions don't have a lot of side effects it is doable. Otherwise it gets really cumbersome very quickly.</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">Similar with the suggestions above, if the functionA does not have side effects (e.g. open/read/write into files, call system calls), then you can use Context Manipulation API of Intel Pin to write your fuzzer. I have implemented such a \"reverse execution\" mechanism for my personal project, you can see in (<a href=\"https://github.com/tathanhdinh/PathExplorer/blob/windows_version/version_1/src/base/checkpoint.cpp\" rel=\"nofollow noreferrer\">github.com/tathanhdinh/PathExplorer/blob/windows_version/…</a>). I am sorry for the self-advertisement.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot\" rel=\"nofollow noreferrer\"><code>CreateToolhelp32Snapshot()</code></a> would help for creating a snapshot of program state, especially fuzzing a la <a href=\"http://www.reverse-engineering.info/PE_Information/Crackers_Guide_To_Program_Flow.pdf\" rel=\"nofollow noreferrer\">this paper</a></p>\n<p>Also, Peter Van Eeckhoutte covered what you're attempting to do in (in-memory fuzzing) in <a href=\"https://www.corelan.be/index.php/2010/10/20/in-memory-fuzzing/\" rel=\"nofollow noreferrer\">this blogpost</a></p>\n<p>Both are outlined step by step</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Aug 31, 2018 at 1:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">First paper doesn't even mention <code>CreateToolhelp32Snapshot</code>. Additionally, <code>CreateToolhelp32Snapshot</code> cannot be used to create a process snapshot that is easily useable for the purposes of execution control.</span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">I said it would help, as in supplemental also its not for execution control its to restore state: <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot\" rel=\"nofollow noreferrer\">docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/…</a> \"th32ProcessID: The process identifier of the process to be included in the snapshot. This parameter can be zero to indicate the current process. This parameter is used when the TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPMODULE32, or TH32CS_SNAPALL value is specified. Otherwise, it is ignored and all processes are included in the snapshot.\"</span>",
                    "time": null
                },
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">one can use the Context struct for the values returned in this manner along with CreateThread, GetThreadContext and SetThreadContext last, i mentioned an easier, already writ way via Corelan</span>",
                    "time": null
                }
            ]
        }
    ]
}