{
    "title": "Inverse And operation",
    "link": "https://reverseengineering.stackexchange.com/questions/15873/inverse-and-operation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to write a keygen to a crack me that I'm learning from and I got stuck. What happens there is pretty simple:</p>\n<p>Let's say that I entered the password: \"12121212\"</p>\n<pre><code>XOR DWORD PTR DS:[ECX+EAX],1234567\nAND BYTE PTR DS:[ECX+EAX],0E\nADD ECX,4\nCMP ECX,8\n</code></pre>\n<p>As we can see, the first <code>DWORD</code> of the password (<code>0x32313231</code>, <em>notice that x86 processors use</em> <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\"><em>little-endian layout</em></a>) is being <code>XORed</code> with <code>0x1234567</code> so <code>0x32313231 ^ 0x1234567</code> results with <code>0x56771233</code>.\nThen there is an <code>AND</code> operation on the first byte (<code>0x56</code>) of the manipulated password and <code>0xe</code> which results with <code>0x6</code>. After that, the program repeats the operations, this time on the second <code>DWORD</code> of the password.</p>\n<p>My question is: I know I can reverse <code>XOR</code> but is it possible with <code>AND</code> operation?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "patch-reversing",
        "xor"
    ],
    "user": "Xozu",
    "time": "Jul 21, 2017 at 14:08",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While there's no way to know with 100% certainty what was the original value before the AND operation, you can find some <em>possible</em> values producing the same result, and sometimes that's enough. </p>\n<p>Basically, for <code>x &amp; N = z</code>, you can start from <code>z</code> and set any bits to <code>1</code> where you have are 0 in <code>N</code>. <code>z</code> itself will always work too.</p>\n<p>For example, if we know that <code>x &amp; 0xE == 6</code>, then at any of the following values of <code>x</code> will work: 6,7, 0x16, 0x17, 0x26, 0x27 and so on. </p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 21, 2017 at 16:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">This answer helps me a lot!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answer is <strong>no</strong>. Unlike bitwise <code>XOR</code>, bitwise <code>AND</code> can't be reversed:</p>\n<pre><code>0 &amp; 1 = 0\n0 &amp; 0 = 0\n</code></pre>\n<p>Both <code>AND</code> and <code>OR</code> are not reversible. This is in contrast to <code>XOR</code> and <code>NOT</code> operators which are reversible.</p>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Jul 21, 2017 at 13:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}