{
    "title": "Difference between INT 0X80 and SYSCALL",
    "link": "https://reverseengineering.stackexchange.com/questions/16702/difference-between-int-0x80-and-syscall",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <strong>SYSCALL</strong> instruction is said to be the 64-bit version of <strong>INT 0X80</strong>, however it's still possible to use the latter in 64-bit code (although <a href=\"https://linux.die.net/man/1/strace\" rel=\"noreferrer\">strace</a> decodes it wrong because of the 64-bit ABI I guess) which usually goes through a <a href=\"https://github.com/torvalds/linux/blob/e7d0c41ecc2e372a81741a30894f556afec24315/arch/x86/entry/entry_64_compat.S#L267\" rel=\"noreferrer\">\"legacy entry\"</a>. But there's something I don't quite understand, why is the <em>SYSCALL</em> instruction faster? </p>\n</div>",
    "votes": "9",
    "answers": 1,
    "views": "18k",
    "tags": [
        "x86",
        "system-call"
    ],
    "user": "Trey",
    "time": "Nov 3, 2017 at 16:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The short answer is that <code>syscall</code> has less overhead than <code>int 0x80</code>. </p>\n<p>For more details on why this is the case, see the accepted answer to <a href=\"https://stackoverflow.com/questions/15168822/intel-x86-vs-x64-system-call\">Intel x86 vs x64 system call</a>, where a nearly identical question was asked: </p>\n<blockquote>\n<p>I'm told that syscall is lighter and faster than generating a software interrupt. Why it is faster on x64 than x86, and can I make a system call on x64 using int 80h?</p>\n</blockquote>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://lkml.org/lkml/2002/12/9/13\" rel=\"noreferrer\">Intel P6 vs P7 system call performance</a>\n<ul>\n<li>this email thread discusses the observed slowdown on certain Intel CPUs caused by the overhead associated with <code>int 0x80</code></li>\n</ul></li>\n<li><p><a href=\"http://articles.manugarg.com/systemcallinlinux2_6.html\" rel=\"noreferrer\">Sysenter Based System Call Mechanism in Linux 2.6</a></p>\n<blockquote>\n<p>It was found out that this software interrupt method [int 0x80] was much slower on Pentium IV processors. To solve this issue, Linus implemented an alternative system call mechanism to take advantage of SYSENTER/SYSEXIT instructions provided by all Pentium II+ processors.</p>\n</blockquote></li>\n<li><p><a href=\"http://www.win.tue.nl/~aeb/linux/lk/lk-4.html\" rel=\"noreferrer\">The Linux kernel, 4.6 Sysenter and the vsyscall page (2003)</a></p>\n<blockquote>\n<p>It has been observed that a 2 GHz Pentium 4 was much slower than an 850 MHz Pentium III on certain tasks, and that this slowness is caused by the very large overhead of the traditional <code>int 0x80</code> interrupt on a Pentium 4. Some models of the i386 family do have faster ways to enter the kernel. On Pentium II there is the <code>sysenter</code> instruction. Also AMD has a <code>syscall</code> instruction. </p>\n</blockquote></li>\n</ul>\n</div>",
            "votes": "11",
            "user": "julian",
            "time": "Nov 3, 2017 at 18:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}