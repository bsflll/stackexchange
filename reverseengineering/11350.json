{
    "title": "Colorize and disassemble byte sequences with IDA Pro and IDAPython",
    "link": "https://reverseengineering.stackexchange.com/questions/11350/colorize-and-disassemble-byte-sequences-with-ida-pro-and-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Maybe someone could help me with the following problem:</p>\n<p>I have an interesting byte sequence that I found within a MIPS ELF binary that exists on the hard drive. This byte sequence may be, for example, <code>9c 6c 3c 04 80 2d 24 84 85</code>. Now I want to find this byte sequence with IDAPython. Therefore, I use the <code>idc.FindBinary()</code> function like so:</p>\n<pre><code>address = idc.FindBinary(0, SEARCH_DOWN, byte_sequence)\n</code></pre>\n<p>which finds the first occurrence of the byte sequence at <code>address</code>. In general I want to achieve two things:</p>\n<ol>\n<li><p>I want to colorize the effected affected lines in the IDA View</p></li>\n<li><p>I want to get the disassembled instructions</p></li>\n</ol>\n<p>Currently there are two subproblems I want to solve:</p>\n<ol>\n<li><p>The byte sequence may start <strong>within</strong> the instruction, for example, in a <code>jal address</code> the byte sequence starts at <code>address</code> instead of at <code>jal</code>. <strong>How can I search backwards to find the beginning of the instruction when the byte sequence started within the instruction?</strong> Colorizing works with:</p>\n<pre><code>SetColor(address, CIC_ITEM, 0x208020)\n</code></pre></li>\n<li><p>If the byte sequence is 9 bytes long (as in the example above), <strong>how can I tell IDAPython to disassemble all 9 bytes</strong>. I would have to know how \"long\" the instructions are that IDAPython disassembles to get to the next instruction. What I know is that I can disassemble at a single addresses with:</p>\n<pre><code>disasm = idc.GetDisasm(address)\n</code></pre></li>\n</ol>\n<p>Any help would be greatly appreciated!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "binary"
    ],
    "user": "metaphysicalmarty",
    "time": "Nov 18, 2015 at 9:25",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Not 100% sure, but i seem to remember that MIPS instructions are always exactly 4 bytes, so you can just do some modulo calculations. Otherwise, <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/265.shtml\" rel=\"nofollow noreferrer\">PrevHead</a> and <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/264.shtml\" rel=\"nofollow noreferrer\">NextHead</a> are probably what you want (<code>idc.PrevHead</code> and <code>idc.NextHead</code> in <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow noreferrer\">IdaPython</a>).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can easily do that using Sark:</p>\n<pre><code># Get all the lines relevant to your bytes\nfor line in sark.lines(start=address, end=address + len(byte_sequence)):\n    # For each line, color it, and print the disasm and the instruction length\n    line.color = 0x123456\n    print 'Line Size: {}\\nLine Disasm: {}'.format(line.size, line.disasm)\n</code></pre>\n<p>You might need to add handling for cases where there is no disassembly (the bytes are data-bytes and not code).</p>\n</div>",
            "votes": "3",
            "user": "tmr232",
            "time": "Nov 18, 2015 at 11:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}