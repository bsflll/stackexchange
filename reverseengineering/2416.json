{
    "title": "How to reverse engineer simple usb device [windows -> linux]",
    "link": "https://reverseengineering.stackexchange.com/questions/2416/how-to-reverse-engineer-simple-usb-device-windows-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd like to reverse engineer my usb beer-can refrigurator, which does connect via USB on windows and via simple GUI tray-tool can set/query temperature.</p>\n<p>I was thinking about running virtualboxed driver and capturing usb communications via wireshark and usbmon interface.</p>\n<p>Anyone know of handy guide/tools that would help me reverse engineer this and possibly write simple userspace tool / driver?</p>\n</div>",
    "votes": "23",
    "answers": 2,
    "views": "15k",
    "tags": [
        "windows",
        "linux",
        "usb"
    ],
    "user": "AoeAoe",
    "time": "Jul 6, 2013 at 0:14",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">It's not quite the same as your question, but you may want to look at <a href=\"http://reverseengineering.stackexchange.com/questions/1786/usb-dongle-traffic-monitoring\" title=\"usb dongle traffic monitoring\">reverseengineering.stackexchange.com/questions/1786/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>VMWare can capture USB traffic between the device and the VM. A VMWare engineer even made an open-source tool for analyzing and visualizing USB logs - Virtual USB analyzer.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/2WH1x.png\"/></p>\n<ul>\n<li><a href=\"http://vusb-analyzer.sourceforge.net/\" rel=\"noreferrer\">Web site</a></li>\n<li><a href=\"http://vusb-analyzer.sourceforge.net/tutorial.html\" rel=\"noreferrer\">Tutorial</a></li>\n</ul>\n<p>Alternatively, a tool for converting VMWare logs to .pcap for analyzing in Wireshark is available <a href=\"http://esec-lab.sogeti.com/post/2011/04/06/Sniffing-USB-traffic-with-VMWare\" rel=\"noreferrer\">from Sogeti</a>.</p>\n</div>",
            "votes": "28",
            "user": "Igor Skochinsky",
            "time": "Jul 6, 2013 at 1:51",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Matt Cutts wrote a series of blog posts outlining the general approach of reverse-engineering a USB device and getting it working with linux, and explaining how he did this for a USB controlled toy missile launcher. You may find them a useful starting point.</p>\n<ul>\n<li><a href=\"http://www.mattcutts.com/blog/reverse-engineering-a-windows-usb-driver/\">http://www.mattcutts.com/blog/reverse-engineering-a-windows-usb-driver/</a></li>\n<li><a href=\"http://www.mattcutts.com/blog/playing-with-a-usb-missile-launcher/\">http://www.mattcutts.com/blog/playing-with-a-usb-missile-launcher/</a></li>\n<li><a href=\"http://www.mattcutts.com/blog/linux-usb-device-driver-info/\">http://www.mattcutts.com/blog/linux-usb-device-driver-info/</a></li>\n<li><a href=\"http://www.mattcutts.com/blog/compile-a-simple-usb-program-in-linux/\">http://www.mattcutts.com/blog/compile-a-simple-usb-program-in-linux/</a></li>\n</ul>\n</div>",
            "votes": "19",
            "user": "Jason Geffner",
            "time": "Jul 7, 2013 at 22:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}