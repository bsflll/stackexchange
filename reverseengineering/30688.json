{
    "title": "​Why output is disabled in console when using int3?",
    "link": "https://reverseengineering.stackexchange.com/questions/30688/why-output-is-disabled-in-console-when-using-int3",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>​I am using NASM(2.15) assembler to generate code. But I am unable to figure out why it does not show output in the console(windows system) when using <code>int3</code> - software breakpoint, it only shows output in the debugger console while debugging.</p>\n<p>code:</p>\n<pre><code>global _main\nextern _printf\n\nsection .text\n_main:\n    int3             ; [*] Comment/Uncomment this to enable/disable output\n    push dword[esp+4]    \n    push fmt_d\n    call _printf\n    add esp, 8\n    xor eax, eax\n    ret\n\nsection .data\nfmt_d: db 'argc = %d', 10, 0\n</code></pre>\n<p>However, when <code>int3</code> is disabled, we get output as usual in both the consoles(windows system, debugger console).</p>\n<p>What is special about the <code>int3</code> command that inhibits the printf's output capability?</p>\n<p>I assembled and linked both cases once <code>int3</code> enabled and then disabled into <code>pf_disable.exe</code>, <code>pf_enable.exe</code> using NASM &amp; MinGW 4.8.2-<code>gcc.exe</code>.\nThen I matched the assembly output(<code>.asm</code>) generated by IDA for 2 cases, but there were only 3 differences,</p>\n<ul>\n<li>Hash of files(CRC,MD5) are different.</li>\n<li>Different offset of <code>fmt_d</code> in the <code>.data section</code>, which is obvious as <code>int3</code> was introduced in one case and absent in another in <code>_main</code> function.</li>\n</ul>\n<p><code>.obj</code> files for both the cases are almost same except, one has <code>int3</code> while other hasn't in <code>_main</code> function.</p>\n<p>With above differences, I understand it has to do something more than just <code>int3</code> but I am unable to figure out.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "71",
    "tags": [
        "assembly",
        "breakpoint",
        "exception",
        "nasm"
    ],
    "user": "Viktor",
    "time": "Jul 23, 2022 at 14:36",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">Isn't  <code>int3</code> a breakpoint? If I understand this correctly it does not disable the output, it just suspends.</span>",
            "time": null
        },
        {
            "user": "Viktor",
            "text": "<span class=\"comment-copy\">@ws Indeed it is breakpoint a software breakpoint. But if we can get output in debugger console then why not in default console.</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Uhm, so you have a debugger attached and a proper debugger loop consuming those breakpoints? Otherwise the <code>int 3</code> is merely going to end up ending your program, I reckon. Even if you placed the <code>printf</code> before the <code>int 3</code>, chances are that the output buffer doesn't get flushed before the breakpoint either.</span>",
            "time": null
        }
    ],
    "answers_data": []
}