{
    "title": "WHY and WHEN do we need SEH for buffer overflowing",
    "link": "https://reverseengineering.stackexchange.com/questions/19372/why-and-when-do-we-need-seh-for-buffer-overflowing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In our course in university, we recently moved on from standard buffer-overflows to SEH based ones.</p>\n<p>My exploit is already ready and working thanks to some nice tutorials, although I am still not sure I completely understand, when and why we need the SEH buffer-overflow.</p>\n<p>My understanding so far is that, if there are no explicit exception handlers in the source code, every thread will get an automatic one, specific handlers will be there additionally.</p>\n<p>For programs, which are vulnerable to SEH BOF a buffer-overflow will cause the e.g. Immunity debugger to pause the program at an exception. Only after the exception is passed to the program the <code>EIP</code> register is overwritten with the malicious buffer.</p>\n<h2>Question 1:</h2>\n<blockquote>\n<p>Why does this not happen for every program then since there should be an automatic exception handler in any case?</p>\n</blockquote>\n<p>After passing the exception <code>EIP</code> and <code>ESP</code> are overwritten, with values from my buffer, yet other registers are zeroed out (<code>EAX</code>, <code>EBX</code>, <code>ESI</code> &amp; <code>EDI</code> in my example). So I can control <code>EIP</code> and <code>ESP</code>, but the tutorials mention that it is useless, due to the zeroed out registers.\nHowever, they never explain why the zeroed out registers are the problem - so here is my second lack of understanding.</p>\n<h2>Question 2:</h2>\n<blockquote>\n<p>What exactly is the deal with the zeroed out registers and why would they break shellcode execution?</p>\n</blockquote>\n<p>Now we also overwrite the NSEH and SEH records and using a pattern can figure out the exact offset to overwrite those. Then comes the magic with referencing some module which has <code>POP POP RET</code> to get to <code>ESP + 8</code>.</p>\n<p>Plus eventually yet another jump.</p>\n<h2>Question 3:</h2>\n<blockquote>\n<p>Why do I need POP POP RET and the final jump?</p>\n</blockquote>\n<hr/>\n<p>I have the exploit working and can hand it in like this, yet it feels very unsatisfactory and pointless without actually understanding what is going on.\nI only started working with low level stuff recently and still have a lot to learn, so I am very thankful for every help.</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "x86",
        "immunity-debugger",
        "buffer-overflow",
        "seh"
    ],
    "user": "SuperSpitter",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, read this:</p>\n<p><a href=\"https://www.blackhat.com/presentations/bh-asia-03/bh-asia-03-litchfield.pdf\" rel=\"noreferrer\">https://www.blackhat.com/presentations/bh-asia-03/bh-asia-03-litchfield.pdf</a></p>\n<p>That's pretty much how all this started.</p>\n<p>A SEH buffer overflow is a specific stack overflow that targets the <code>EXCEPTION_REGISTRATION_RECORD</code> sitting some arbitrary distance down the stack.</p>\n<blockquote>\n<p>Why does this not happen for every program then since there should be an automatic exception handler in any case?</p>\n</blockquote>\n<p>Yes it would, as you can't really disable SEH on Windows. Provided your buffer overflow can reach the <code>EXCEPTION_REGISTRATION_RECORD</code> and you can trigger an exception.</p>\n<blockquote>\n<p>After passing the exception EIP and ESP are overwritten, with values from my buffer, yet other registers are zeroed out (EAX, EBX, ESI &amp; EDI in my example).</p>\n</blockquote>\n<p>from my <code>ntdll.dll</code> version <code>10.0.17134.254</code>...</p>\n<p>before being <code>XOR</code>'d...</p>\n<p><code>EAX</code> holds a pointer to the current <code>EXCEPTION_REGISTRATION_RECORD</code> so if you have overwritten <code>EXCEPTION_REGISTRATION_RECORD-&gt;Next</code> with the payload address and set the <code>EXCEPTION_REGISTRATION_RECORD-&gt;Handler</code> to a random instruction that peformed <code>JMP/CALL [EAX]</code>, that might be an attack vector.</p>\n<p><code>EBX</code> is already set to <code>0</code> at the start of <code>RtlDispatchException</code> It previously contained the <code>PEXCEPTION_RECORD</code>.</p>\n<p><code>ESI</code> is the <code>PEXCEPTION_RECORD</code> and <code>EDI</code> is the <code>PCONTEXT</code>.</p>\n<blockquote>\n<p>What exactly is the deal with the zeroed out registers and why would they break shellcode execution?</p>\n</blockquote>\n<p>They don't necessarily. Before we get to execution of the handler we have to go through <code>ntdll!KiDispatchUserException</code> -&gt; <code>ntdll!RtlDispatchException</code> which end up overwriting all the registers anyway. </p>\n<p>It's why the kernel saves them in the <code>CONTEXT</code> struct before returning to usermode.</p>\n<p>This exploit isn't a simple <code>EIP</code> hijack. There are big changes to the stack and registers before we get execution after the exception.</p>\n<blockquote>\n<p>Why do I need POP POP RET and the final jump?</p>\n</blockquote>\n<p>Do you mean why not just set the <code>EXCEPTION_REGISTRATION_RECORD-&gt;Handler</code> directly to the shellcode?</p>\n<p>This is a ROP gadget to redirect execution to the value of <code>ESP+8</code>. If you get this far in the exploit then the data at <code>ESP+8</code> is controllable by you, but you might not necessarily know where that is in advance.</p>\n<p>Secondly, there are many sanity and security checks between the exception and the handler execution. If any of these fail the program is terminated before the handler is run. What these consist of depend on the version of Windows you are targeting. SafeSEH is one of them. Very simply it validates the handler address against a whitelist, but it can't validate for handlers in modules that were not compiled with SafeSEH. So if the POP/POP/RET comes from a module loaded and compiled without SafeSEH, ntdll cannot determine if it's malicious. </p>\n<blockquote>\n<p>Plus eventually yet another jump.</p>\n</blockquote>\n<p>This is the best part!</p>\n<p>Because <code>ESP+8</code> is where we will be landing, we can put the shellcode here. Except it's the <code>EXCEPTION_REGISTRATION_RECORD</code> that we need to be intact so <code>EXCEPTION_REGISTRATION_RECORD-&gt;Handler</code> makes the first part of the exploit work.</p>\n<p>Luckily, <code>EXCEPTION_REGISTRATION_RECORD-&gt;Prev</code> (which you have as <code>NSEH</code>) represents the first 4 bytes to the shellcode where POP/POP/RET will return.</p>\n<p>A short jump in x86 can be encoded with just 2 bytes. So this final jump skips 6 byte over the <code>NSEH</code> so it can remain valid for the exploit to work.</p>\n<p>This blog :</p>\n<p><a href=\"https://dkalemis.wordpress.com/2010/10/27/the-need-for-a-pop-pop-ret-instruction-sequence/\" rel=\"noreferrer\">https://dkalemis.wordpress.com/2010/10/27/the-need-for-a-pop-pop-ret-instruction-sequence/</a></p>\n<p>Explains the final part far better than I can.</p>\n</div>",
            "votes": "6",
            "user": "Abigail",
            "time": "Sep 18, 2018 at 5:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">It might be worth noting that this kind of stack-based exploit does no longer work in Microsoft's 64-bit world. See the article <a href=\"http://www.osronline.com/article.cfm?article=469\" rel=\"nofollow noreferrer\">osronline.com/article.cfm?article=469</a>. With 32-Bit programs (C++), MS offers the /SAFESEH linker option preventing such exploits as well (if I understood right).</span>",
                    "time": null
                }
            ]
        }
    ]
}