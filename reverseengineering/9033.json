{
    "title": "How to recognize the function call in a dynamic lib?",
    "link": "https://reverseengineering.stackexchange.com/questions/9033/how-to-recognize-the-function-call-in-a-dynamic-lib",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>when I disassemble an OpenCV dynamic library file (<code>libopencv_imgproc.so</code>), I find that there are a lot of <code>bl</code> instructions which target address are in the <code>.plt</code> section. But, I could'n find its symbol info. </p>\n<pre><code>00110ee0 &lt;cvResize&gt;:\n  110ee0:   b5f0        push    {r4, r5, r6, r7, lr}\n  110ee2:   4603        mov r3, r0\n  110ee4:   b0bf        sub sp, #252    ; 0xfc\n  ...\n  110ef4:   4ca8        ldr r4, [pc, #672]  ; (111198 &lt;cvResize+0x2b8&gt;)\n  110ef6:   9500        str r5, [sp, #0]\n  110ef8:   f70e ebda   blx 1f6b0 &lt;_init+0x2b4&gt;\n  ...\n</code></pre>\n<p>I could not find the address <code>1f6b0</code> in the <code>.text</code> section. It actually is in the <code>.plt</code> section. However, I couldn't find it in the symbol table.\nHow can I get these missed symbol info?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "548",
    "tags": [
        "arm",
        "dynamic-linking"
    ],
    "user": "winter333",
    "time": "Jun 1, 2015 at 7:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Doing it the hard way:</p>\n<ol>\n<li><p>disassemble the target PLT stub and figure out what pointer it's using. E.g.:</p>\n<pre><code>359dc:  e28fc601    add ip, pc, #1048576    ; 0x100000\n359e0:  e28ccaa2    add ip, ip, #663552 ; 0xa2000\n359e4:  e5bcf900    ldr pc, [ip, #2304]!    ; 0x900\n</code></pre>\n<p>Here, the <code>ip</code> will be: <code>0x359e4+0x100000+0xa2000 = 0x1D79E4</code>, so the last <code>LDR</code> will dereference <code>1D79E4+0x900 = 0x1D82E4</code>.  </p></li>\n<li><p>look up the address in the list of relocs (<code>objdump -dr</code>):</p>\n<pre><code>001d82e4  00005216 R_ARM_JUMP_SLOT   00000000   _ZN2cv10cvarrToMatEPKv\n</code></pre></li>\n</ol>\n<p>Doing it the easy way:</p>\n<ol>\n<li><p>Just use IDA :), or at least a newer <code>objdump</code> <a href=\"http://www.sourceware.org/ml/binutils/2004-04/msg00469.html\" rel=\"nofollow\">which knows about PLT stubs</a>.</p>\n<pre><code>000359dc &lt;_ZN2cv10cvarrToMatEPKvbbi@plt&gt;:\n</code></pre></li>\n</ol>\n<p>Please note that <code>objdump</code> relies on the fact that the order of PLT stubs usually matches the order of relocations in the PLT reloc list. In theory, one can patch a PLT stub after linking so it uses another symbol's pointer.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jun 1, 2015 at 7:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}