{
    "title": "Ghidra Python - Get Decompile Line Text by RVA",
    "link": "https://reverseengineering.stackexchange.com/questions/24685/ghidra-python-get-decompile-line-text-by-rva",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there a way in Ghidra Python to get the corresponding decompile line by <code>RVA</code>? </p>\n<p>Or the opposite - get the corresponding <code>RVA</code> from a given line in a decompile?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "python",
        "ghidra"
    ],
    "user": "macro_controller",
    "time": "Apr 11, 2020 at 10:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know how any examples how you could get the line like Ghidra would render it, but as a start you can look at <a href=\"https://github.com/schlafwandler/ghidra_ExportToX64dbg\" rel=\"nofollow noreferrer\">https://github.com/schlafwandler/ghidra_ExportToX64dbg</a>.</p>\n<p>The basic idea is to walk the C-AST and extract the ClangStatements that have a corresponding RVA.</p>\n<p>This has limitations, namely:</p>\n<blockquote>\n<p>At the moment the source code export is limited to elements that appear as <code>ClangStatement</code> in the <code>ClangTokenGroup</code> returned by <code>getCCodeMarkup()</code>. This works fine for most variable assignments and function calls, but excludes most control flow altering constructs (like <code>if</code>, <code>for</code> or <code>while</code>).</p>\n</blockquote>\n<p>If you really need the line and not the ClangStatement, my first idea is to search for the Ghidra code that renders the AST, find the part where a line is rendered and extend it to retain a mapping from a line to a list of ClangStatements used in that line. Then you can iterate over the lines and filter for those that use a statement that has the RVA you are interested in.</p>\n</div>",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Apr 11, 2020 at 13:42",
            "is_accepted": true,
            "comments": []
        }
    ]
}