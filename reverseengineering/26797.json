{
    "title": "QEMU with GDB: Stepping Instruction causes Windows VM BSOD",
    "link": "https://reverseengineering.stackexchange.com/questions/26797/qemu-with-gdb-stepping-instruction-causes-windows-vm-bsod",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently analyzing a piece of software inside a Windows 10 QEMU virtual machine which is connected to a remote GDB debugger. I have set breakpoints to audit what the application is doing.</p>\n<p>I have set breakpoints in GDB of the applications' OEP and some of the RIP addresses (is that even correct term?) of it's functions. However, this is where I'm tripping over.</p>\n<p>When these functions fire, GDB pauses QEMU and I can see that the breakpoint was hit. QEMU's virtual machine is paused and I can do things like save memory dump and whatnot via the QEMU Monitor. However I wanted to see, for example, what the next address is that the function calls. So I use <code>si</code> to step to the next instruction. This is literally Russian roulette - it will sometimes step onto the next instruction, or cause the Win10 VM to freeze and then crash to a BSOD with either <code>KERNEL_EXCEPTION_NOT_HANDLED</code> or <code>SERVICE_EXCEPTION_NOT_HANDLED</code>, etc.</p>\n<p>I was reading somewhere that I need to tell Windows to relax its internal stack protection by enabling \"Debugging Mode\" so it doesn't BSOD when I use step instruction. Is this correct or am I using the wrong GDB command that's causing Windows to BSOD?</p>\n<p>Cheers.</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "174",
    "tags": [
        "debugging",
        "qemu"
    ],
    "user": "Coburn64",
    "time": "Jan 17, 2021 at 6:44",
    "comments": [],
    "answers_data": []
}