{
    "title": "How to interpret the final 0x03 0x00 in this minimal gzip sample?",
    "link": "https://reverseengineering.stackexchange.com/questions/22400/how-to-interpret-the-final-0x03-0x00-in-this-minimal-gzip-sample",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reading <a href=\"http://www.zlib.org/rfc-gzip.html\" rel=\"nofollow noreferrer\">gzip format specification</a>, trying to understand byte-to-byte the following minimal example (generated using <code>echo -n | gzip &gt; /tmp/a.gz</code>):</p>\n<pre><code>00000000  1f 8b 08 00 70 3c b4 5d  00 03 03 00 00 00 00 00  |....p&lt;.]........|\n00000010  00 00 00 00                                       |....|\n00000014\n</code></pre>\n<p>I managed to map most of the bytes, but the \"03 00\" is something I cannot interpret. I wrote a Python script to fuzz different values for the \"03\" byte, but nothing other than that byte is allowed:</p>\n<pre><code>[15:13:05]&gt;&gt;&gt; import subprocess\n[15:13:08]&gt;&gt;&gt; results = {}                  \n[15:13:10]&gt;&gt;&gt; for i in range(256): results[i] = subprocess.Popen(f'''echo '1f8b0800703cb45d0003{hex(i)[2:]:0&gt;2}000000000000000000'  | xxd -r -p |  zcat''', shell=True, stderr=subprocess.PIPE).stderr.read()\n... \nPp0�` ��@�X▒�x8�h(�H�[15:13:25]&gt;&gt;&gt; \n[15:13:26]&gt;&gt;&gt; results2 = {value: list(k for k in results if results[k] == value) for value in results.values()}\n[15:13:31]&gt;&gt;&gt; results2\n{b'\\ngzip: stdin: invalid compressed data--format violated\\n': [0, 1, 2, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255], b'': [3], b'\\ngzip: stdin: unexpected end of file\\n': [4, 5, 11, 12, 13, 19, 20, 21, 27, 28, 29, 35, 36, 37, 43, 44, 45, 51, 52, 53, 59, 60, 61, 67, 68, 69, 75, 76, 77, 83, 84, 85, 91, 92, 93, 99, 100, 101, 107, 108, 109, 115, 116, 117, 123, 124, 125, 131, 132, 133, 139, 140, 141, 147, 148, 149, 155, 156, 157, 163, 164, 165, 171, 172, 173, 179, 180, 181, 187, 188, 189, 195, 196, 197, 203, 204, 205, 211, 212, 213, 219, 220, 221, 227, 228, 229, 235, 236, 237, 243, 251]}\n</code></pre>\n<p>What's this <code>0x03 0x00</code> and where in the gzip (or <a href=\"https://www.w3.org/Graphics/PNG/RFC-1951#block-format\" rel=\"nofollow noreferrer\">DEFLATE</a>) documentation can I find it?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "263",
    "tags": [
        "decompress"
    ],
    "user": "d33tah",
    "time": "Oct 26, 2019 at 20:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you read <a href=\"https://zlib.net/zlib-1.2.11.tar.gz\" rel=\"nofollow noreferrer\">zlib source code</a> alongside the <a href=\"https://www.rfc-editor.org/rfc/rfc1951\" rel=\"nofollow noreferrer\">DEFLATE Compressed Data Format Specification</a> you can find where they come from.</p>\n<p>The bits in those bytes represent the start and end of the compressed stream.</p>\n<p>Specifically they come from 2 relevant places in the source code -</p>\n<pre><code>// trees.c\n// line 978\n\n// _tr_flush_block \n\nsend_bits(s, (STATIC_TREES&lt;&lt;1)+last, 3);\n</code></pre>\n<p>Where here <code>last=1</code> and <code>STATIC_TREES=1</code>\n(these correspond to <code>BFINAL</code> and <code>BTYPE</code> in the specification)\nThis outputs 3 bits 1, 1, 0 into the compressed file.</p>\n<p>These indicate that the compressed block uses the 'fixed tree' and is also the last block.</p>\n<p>Then it indicates that it's reached the end of the block -</p>\n<pre><code>// trees.c\n// line 1108\n\n// compress_block\n\nsend_code( c, END_BLOCK, ltree )\n</code></pre>\n<p>The end-of-block code is 256 which for the fixed huffman tree corresponds to 7 zero bits. (See 3.2.6 in the DEFLATE specification.)\nHence this outputs 7 bits 0, 0, 0, 0, 0, 0, 0 to the compressed file.</p>\n<p>This gives us 10 bits in total -</p>\n<pre><code>1 1 0 0 0 0 0 0 0 0\n</code></pre>\n<p>Converting to bytes according the specification we get -</p>\n<pre><code>00000011 00000000, or\n0x03, 0x00\n</code></pre>\n<p>These are the values that you are seeing.</p>\n</div>",
            "votes": "4",
            "user": "Community",
            "time": "Oct 7, 2021 at 7:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}