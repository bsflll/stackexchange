{
    "title": "Checking if a call is a API/Library call in IDApython?",
    "link": "https://reverseengineering.stackexchange.com/questions/25729/checking-if-a-call-is-a-api-library-call-in-idapython",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I asked the question a while ago but found no answer so I'm trying my luck again</p>\n<p>the only solution is this :</p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/9352/finding-all-api-calls-in-a-function\">Finding all API calls in a function</a></p>\n<p>but it doesn't work when the library call is a .NET library call, and it seems like it doesn't include calling to recognized staticley linked library calls that were recognized by flirt</p>\n<p>basically i just want to check if a call instruction is a API/Library call or just a local function call</p>\n<p>I already tried to use the GetOpType function but didnt work, both of the \"local\" calls and library calls will return 10 :</p>\n<pre><code>void [mscorlib]System.Threading.Thread::Sleep(int32)\n10\n\nunsigned int8[] Loader.Nyan::AES_Decrypt(unsigned int8[] bytesToBeDecrypted)\n10 (LOCAL function)\n</code></pre>\n<p>Currently I'm using regex as a dirty workaround to find library calls only if there is a [*] in the operand but there has to be a better way..</p>\n<p>as another work around I'm checking to see if the last byte of call is 0x0A or not, based on experience all the library calls have this byte at the end, not sure if its gonna work for all the calls or not</p>\n</div>",
    "votes": "2",
    "answers": 0,
    "views": "225",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin"
    ],
    "user": "OneAndOnly",
    "time": "Aug 26, 2020 at 11:53",
    "comments": [
        {
            "user": "David",
            "text": "<span class=\"comment-copy\">You might be able to check “local” calls by checking what section the call points to. For a typical C program local calls will be to the same code section. Unsure how this works with .Net.</span>",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "<span class=\"comment-copy\">@David Thanks for answer, but  this will not detect statically linked library calls (that were detected by flirt), and its not gonna generalize well. its just weird that they didn't include a simple API call to check if a call is library call or not, it seems like this actually is implemented considering in IDA you can clearly see if a call is library call or not based on coloring and other stuff</span>",
            "time": null
        },
        {
            "user": "David",
            "text": "<span class=\"comment-copy\">in that case, check my simple is_library_func() from this gist: <a href=\"https://gist.github.com/edeca/716c38cc78c5df17120583c203c1640d\" rel=\"nofollow noreferrer\">gist.github.com/edeca/716c38cc78c5df17120583c203c1640d</a></span>",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "<span class=\"comment-copy\">@David yes i am aware the LIB flags, but in .net, using GetOpnd API call will return you the name of the operand, there is no address so i can use against the lib flag, Im not sure how to get the operand value as a actual address instead of name, even the raw bytes of call instructions in .NET are not address or offset, they are some sort of index in a table</span>",
            "time": null
        }
    ],
    "answers_data": []
}