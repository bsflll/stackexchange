{
    "title": "Basic question: how to input non-printable hex values in GDB / NC? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/18295/basic-question-how-to-input-non-printable-hex-values-in-gdb-nc",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>This question already has answers here</b>:\n                                \n                            </div>\n</div>\n</div>\n</div>\n<div class=\"flex--item mb0 mt4\">\n<a dir=\"ltr\" href=\"/questions/13928/managing-inputs-for-payload-injection\">Managing inputs for payload injection?</a>\n<span class=\"question-originals-answer-count\">\n                                (2 answers)\n                            </span>\n</div>\n<div class=\"flex--item mb0 mt8\">Closed <span class=\"relativetime\" title=\"2018-09-18 13:51:52Z\">6 years ago</span>.</div>\n</div>\n</aside>\n</div>\n<p>I'm working on a CTF challenge that is an introduction to smashing the stack. I have the binary working in GDB, and can overwrite the correct part of the stack with printable characters. </p>\n<p>The challenge, however, is that the binary expects 0xdeadbeef in the correct stack location - and I'm a bit stumped on how to input that value. I've seen examples online where python is used to supply hex values as the argument to the binary - but this particular binary runs, prints a query message, THEN expects input, instead of just reading an argument.</p>\n<p>What is the best way to handle this, initially in GDB to confirm my approach, and then using NC to receive the actual flag? I'm working on Ubuntu.</p>\n<p>Apologies for asking a basic question, but this has been tripping me up.</p>\n<p>Thank you!</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "11k",
    "tags": [
        "gdb",
        "hex"
    ],
    "user": "BronzeOtter",
    "time": "6 years ago",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<span class=\"comment-copy\"><code>0xdeadbeef</code> is not non-printable.  It is what is commonly known as<code>hexspeak</code></span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Go read <a href=\"https://reverseengineering.stackexchange.com/questions/13928/managing-inputs-for-payload-injection/13929#13929\">this answer</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, you have several options to do so. These are the two simplest:</p>\n<p>Supplying the input through the pipeline:</p>\n<pre><code>$ python -c \"print '\\xde\\xad\\xbe\\xef'\" | ./binary\n$ python -c \"print 0xdeadbeef\" | ./binary\n</code></pre>\n<p>Supplying the input from within GDB:</p>\n<pre><code>(gdb) r &lt;&lt;&lt; $(python -c \"print '\\xde\\xad\\xbe\\xef'\")\n(gdb) r &lt;&lt;&lt; $(python -c \"print 0xdeadbeef\")\n</code></pre>\n</div>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Sep 18, 2018 at 8:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}