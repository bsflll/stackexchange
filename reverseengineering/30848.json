{
    "title": "Can an OpenWrt FIT kernel be virtualized in qemu?",
    "link": "https://reverseengineering.stackexchange.com/questions/30848/can-an-openwrt-fit-kernel-be-virtualized-in-qemu",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a router I'd like to virtualize in order to do some dynamic analysis.\nI could virtualize individual binaries with qemu, but I'd like to have the whole ecosystem up and running.</p>\n<p>I'll start here:</p>\n<pre><code>$ file firmware.bin\nfirmware.bin: data\n</code></pre>\n<p>Okay, binwalk to the rescue.</p>\n<pre><code>$ binwalk -e firmware.bin\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n4755          0x1293          UBI erase count header, version: 1, EC: 0x0, VID header offset: 0x800, data offset: 0x1000\n</code></pre>\n<p>Great, I've got something.\nThe UBI is a little funky, but with a little legwork, I've got two files.</p>\n<pre><code>$ file rootfs.ubfs\nrootfs.ubfs: Squashfs filesystem, little endian, version 1024.0, compressed, 7852451465615376384 bytes, 906821632 inodes, blocksize: 1024 bytes, created: Wed Mar 26 08:01:38 2092\n\n$ xxd kernel.ubfs | head\n00000000: d00d feed 0043 8904 0000 0038 0043 8598  .....C.....8.C..\n00000010: 0000 0028 0000 0011 0000 0010 0000 0000  ...(............\n00000020: 0000 006c 0043 8560 0000 0000 0000 0000  ...l.C.`........\n00000030: 0000 0000 0000 0000 0000 0001 0000 0000  ................\n00000040: 0000 0003 0000 0004 0000 005c 6298 dbf6  ...........\\b...\n00000050: 0000 0003 0000 0027 0000 0000 4152 4d20  .......'....ARM\n00000060: 4f70 656e 5772 7420 4649 5420 2846 6c61  OpenWrt FIT (Fla\n00000070: 7474 656e 6564 2049 6d61 6765 2054 7265  ttened Image Tre\n00000080: 6529 0000 0000 0003 0000 0004 0000 000c  e)..............\n00000090: 0000 0001 0000 0001 696d 6167 6573 0000  ........images..\n</code></pre>\n<p>Looks like my version of <code>file</code> isn't picking up on the \"kernel.bin\" file, but\nwe can see that it's an <code>OpenWrt FIT</code>.</p>\n<p>I'm not quite sure where to go from here.\n<code>kernel.bin</code> seems to maybe be a dtb or \"Device Tree Blob\".\nI think I need all of the information stored in the dtb in order to properly virtualize.\nMy understanding is that the dtb lays out physical memory addresses and interrupt request lines\nneeded to communicate with other devices, some of which may be virtualizable by qemu.\nA <code>dtb</code> file can even be <a href=\"https://www.qemu.org/docs/master/system/riscv/virt.html#hardware-configuration-information\" rel=\"nofollow noreferrer\">passed to qemu</a>\nwith the <code>-dtb</code> option.</p>\n<p>At this point, I'm still thinking I need a kernel.\nI can build one from the GPL source of the same model, but different hardware revision.\nLike usual, GPL sources aren't out for the latest firmwares / models.</p>\n<p>So where is the kernel?\nA <code>binwalk</code> on <code>kernel.bin</code> and a strings later, I find a recognizable kernel\n<a href=\"https://elixir.bootlin.com/linux/v4.0.9/source/net/ipv4/tcp.c#L1974\" rel=\"nofollow noreferrer\">string</a> in the <code>kernel.bin</code> file.</p>\n<pre><code>$ strings E4 | grep \"too many orphaned sockets\"\n6TCP: too many orphaned sockets\n</code></pre>\n<p>Makes sense. The 0xe4 bytes extracted are probably a decompression stub.\nThen I was able to grep on a decompressed kernel image.</p>\n<p>This isn't a kernel image.\nThere's an openwrt FIT stub in front of the decompression stub?\nThat makes sense.</p>\n<p>So there's a rootfs, and a dtb.\nThe kernel appears to be in embedded in the dtb.\nThe logical thing would be to figure out the <code>OpenWrt FIT</code> format.\nMy google-fu isn't helping much here.</p>\n<p>Can an \"OpenWrt FIT\" kernel be virtualized in qemu?\nI'm having trouble finding documentation on the format.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "206",
    "tags": [
        "firmware",
        "arm",
        "binwalk",
        "router"
    ],
    "user": "Matthew Tingum",
    "time": "Sep 2, 2022 at 2:23",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Just a general note: as long as you have a way to pass the kernel to the boot loader and the kernel knows the image format and is told where to find it, all of this should work.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know anything about OpenWrt FIT format, but I've built an OpenWRT VM to run on OpenStack in the past, so virtualising your router image might be doable.</p>\n<p>My first thought was that you build an OpenWRT VM image then copy the file content from the router image that you have into the new QCOW.</p>\n<p>Here's my notes on the build, it was a couple of years ago so ymmv:</p>\n<pre><code>## http://hackstack.org/x/blog/2014/08/17/openwrt-images-for-openstack/\n## https://centos.pkgs.org/7/centos-x86_64/zlib-static-1.2.7-17.el7.x86_64.rpm.html\n\ngit clone git://git.openwrt.org/openwrt.git\ncd openwrt\necho \"src-git dtroyer https://github.com/dtroyer/openwrt-packages\" &gt;&gt;feeds.conf.default\n./scripts/feeds update -a\n./scripts/feeds install -a\n\nsudo yum -y groupinstall development\nsudo yum -y install ncurses-devel zlib-devel openssl-devel\nyum -y install http://mirror.centos.org/centos/7/os/x86_64/Packages/zlib-static-1.2.7-17.el7.x86_64.rpm\n\nmake defconfig\n\nmake menuconfig\n  Target System: x86\n  Subtarget: KVM guest\n  Target Images\n    [*] ext4\n    (128) Root filesystem partition size (in MB)\n    (/dev/vda2) Root partition on target device\n  Base System\n    {*} block-mount\n    &lt;*&gt; rc.cloud\n\nmake -j &lt;cpu_count&gt;\n\n# troubleshoot\nmake V=sw\n\ngzip -dc bin/x86/openwrt-x86-kvm_guest-combined-ext4.img.gz &gt;openwrt-x86-kvm_guest-combined-ext4.img\nsudo kpartx -av openwrt-x86-kvm_guest-combined-ext4.img\nmkdir -p imgroot\nsudo mount -o loop /dev/mapper/loop0p2 imgroot\nsudo chroot imgroot /bin/ash\n# in chroot:\n  # set root password\n  sed -e '/^root/ s|^root.*$|root:\\!:16270:0:99999:7:::|' -i /etc/shadow\n  # configure lan interface with dhcp - doesn't seem to work?\n  uci set network.lan.proto=dhcp; uci commit\n  # Configure opkg:\n  sed -e \"s|http.*/x86/|http://bogus.hackstack.org/openwrt/x86/|\" -i /etc/opkg.conf\nsudo umount imgroot\nsudo kpartx -dv openwrt-x86-kvm_guest-combined-ext4.img\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Sep 2, 2022 at 7:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}