{
    "title": "What does this XOR do?",
    "link": "https://reverseengineering.stackexchange.com/questions/9495/what-does-this-xor-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand exactly what is happening in the below loop. I've commented in what I <em>believe</em> is happening. I came to these conclusions by googling every op code and trying to understand what it means in addition to running the code in ImmunityDebugger and observing behavior. </p>\n<p>I'm not sure if that is the most efficient means of research. Please let me know if there are other best practices for discovering functionality of relatively small selections of code. </p>\n<p><strong>What happens at memory address <code>00401053</code>? What does XOR do in this case?</strong></p>\n<pre><code>0040104B  |. 31C9           XOR ECX,ECX\n0040104D  |&gt; 8A81 58214000  /MOV AL,BYTE PTR DS:[ECX+402158] ;Move first byte of [ECX+402158] into AL\n00401053  |. 34 7D          |XOR AL,7D                       ;Not sure what this means\n00401055  |. 3A81 40214000  |CMP AL,BYTE PTR DS:[ECX+402140] ;Compare AL with the first byte of [ECX+402140]\n0040105B     75 1E          |JNZ SHORT i_am_hap.0040107B     ;Jump out of loop if not zero &lt;&lt; What does that mean?\n0040105D  |. 41             |INC ECX                         ;increment ECX value\n0040105E  |. 83F9 18        |CMP ECX,18                      ;loop runs 18 times\n00401061    ^7C EA          \\JL SHORT i_am_hap.0040104D      ;If above CMP fails restart the loop\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "x86",
        "immunity-debugger"
    ],
    "user": null,
    "time": "Jul 30, 2015 at 6:31",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">AL=AL^0x7d, ^ means xor</span>",
            "time": null
        },
        {
            "user": "Carlos Garcia",
            "text": "<span class=\"comment-copy\">Please solve the Flare challenges yourself ;)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Loop</strong></p>\n<p>First of all, when you say \"loop runs 18 times\", it is 0x18 times (hexa), actually, so 16+8=24 times.</p>\n<p><strong>Xor</strong></p>\n<pre><code>XOR operand1, operand2\n</code></pre>\n<p>is nothing more than a logical XOR (11=&gt; 0, 10=&gt; 1, 01=&gt; 1, 00=&gt; 0).</p>\n<p>Here it would be AL = AL XOR 01111101.</p>\n<p>A <strong>24 bytes string</strong> is likely <strong>stored at 0x402158</strong> and is XORed with 0x7d. I say 24 bytes because this code loops 24 times, ECX being incremented each time, and the XORed byte is located at ECX+0x402158.</p>\n<p>It means that every byte <strong>from 0x402158 to 0x402158 + 0x18</strong> (0x402158 -&gt; 0x402170) will be XORed with 0x7d.</p>\n<p><strong>JNZ</strong></p>\n<p>Regarding your next question :</p>\n<pre><code>Jump out of loop if not zero &lt;&lt; What does that mean?\n</code></pre>\n<p>The JNZ operand is following a comparison (CMP). Under the hood, CMP is no more than a subtraction. If subtraction result equals zero, then Zero Flag (ZF) is set to one. JNZ operand (Jump if Not Zero) only jumps if ZF is set to 0.</p>\n<p><strong>Conclusion</strong></p>\n<p>This being said, I thing you can figure out what is going on here. There is a string being XORed with 0x7d char after char. Every time a char is XORed, it's compared with another string located at 0x402140. If XORed char is different from the one in this string, then JNZ jumps. Pseudo C code would look like this :</p>\n<p><strong>Code edited thanks to Guntram Blohm comment</strong></p>\n<pre><code>char chr;\nint i;\nchar check[]=\"\\x2a\\x18\\x11\\x11\\x5d\\x19\\x12\\x13\\x18\\x5d\\x30\\x14\\x0e\\x09\\x18\\x0f\\x5d\\x3‌​5\\x1c\\x1e\\x16\\x13\\x19\\x12\"\nfor (i=0; i&lt;24; i++) {\n    argv[1][i] ^= '\\x7d';\n    if (argv[1][i] != check[i]) {\n        break;\n    }\n}\n</code></pre>\n</div>",
            "votes": "6",
            "user": "Hackndo",
            "time": "Jul 30, 2015 at 8:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Good answer, except that the <code>check=\"something\"</code> somehow misses the point (and doesn't even have 24 characters). If someone runs the <code>strings</code> utility on this program, they'll see the \"password\" immediately. The point is using a check like <code>char check[]=\"\\x2a\\x18\\x11\\x11\\x5d\\x19\\x12\\x13\\x18\\x5d\\x30\\x14\\x0e\\x09\\x18\\x0f\\x5d\\x35\\x1c\\x1e\\x16\\x13\\x19\\x12\"</code>; this hides the \"password\" but allows the program to check the input.</span>",
                    "time": null
                },
                {
                    "user": "Hackndo",
                    "text": "<span class=\"comment-copy\">Good point, I wrote it a bit rashly. I edited my answer, thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the snippet is functionally equivalent to this powershell script</p>\n<p>copy paste to file.ps1 and run it like  </p>\n<h3>powershell -f file.ps1 \"&lt;guessed password&gt;\"</h3>\n<pre><code>$402140=$args[0].tochararray();\n$402158=@(13,28,14,14,10,18,15,25,93,20,14,93,14,24,30,15,24,9,93,31,28,31,4)\n$ecx=0;\ndo{$al=(($402158[$ecx]) -bxor 0x7d);\nif($al-ne$402140[$ecx]) {\"bad pass\";Throw;}\n$ecx++;\n}while($ecx-lt$402158.length)\n</code></pre>\n<blockquote class=\"spoiler\">\n<p> $p=\"\";13,28,14,14,10,18,15,25,93,20,14,93,14,24,30,15,24,9,93,31,28,31,4|%\n {$p+=\"{0}\" -f [char]($_-bxor 0x7d)};$p</p>\n</blockquote>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Jul 30, 2015 at 11:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}