{
    "title": "How to parse objdump output data?",
    "link": "https://reverseengineering.stackexchange.com/questions/26253/how-to-parse-objdump-output-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm somehow newbe in reverse engineering and currently I'm reading <a href=\"https://github.com/ckonstantinou/re4b/blob/master/RE4B-EN.pdf\" rel=\"nofollow noreferrer\">RE4B</a> book.</p>\n<p><a href=\"https://i.sstatic.net/pHUSw.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/pHUSw.jpg\"/></a></p>\n<p>In the image above:</p>\n<ol>\n<li>I can't figure out the role of <code>s</code> in the functions <code>f1</code> and <code>f2</code>. As far as I know, based on the last line in the image (i.e. <code>s     db 'world', 0xa, 0</code>), the variable <code>s</code> is a pointer to the beginning of <em>world</em> string. So, why this value is over-writed with <em>-1C</em> in the functions? (<code>s = dword ptr -1Ch</code>)</li>\n<li>As you know, we can use stack to pass function arguments. The question is why the compiler used <code>mov [esp+1Ch+s], offset s ; \"world\\n\"</code> instead of <code>mov [esp], offset s ; \"world\\n\"</code>?</li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "419",
    "tags": [
        "disassembly",
        "objdump"
    ],
    "user": "Ebrahim Ghasemi",
    "time": "Nov 5, 2020 at 11:37",
    "comments": [],
    "answers_data": []
}