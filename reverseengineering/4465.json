{
    "title": "Where is ntdll.dll?",
    "link": "https://reverseengineering.stackexchange.com/questions/4465/where-is-ntdll-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to get the base address of <code>ntdll.dll</code> over the <code>PEB</code>. So, what I did was to dump the <code>PEB</code> (<code>d fs:[30]</code>). Then, I tried to get to <code>PEB_LDR_DATA</code> over the offset <code>0xC</code>. Over the offset <code>0x1C</code> of <code>PEB_LDR_DATA</code> I found the the pointer of <code>InInitializationOrderModuleList</code> and I was told that I can find the <code>ntdll.dll</code> address there. And that I should first find the address of <code>kernel32.dll</code> (which is always the second entry). So, I was able to find the address of <code>kernel32.dll</code> but it seems like I can't find the address of <code>ntdll.dll</code>. </p>\n<pre><code>00251ED8  .ܛὈ%Ậ%ὐ%Ẵ%.....@ᐴ@怀.TVٜڔ倀...뉨粘뉨粘趨即....ꮫꮫꮫꮫ......ܨ‐%Ỡ%‘%Ứ%\n00251F58  †%Ẽ%.粑Ⱘ粒怀:Ȉ퀨粘⅘粓䀄耈..니粘니粘뾿䠂....ꮫꮫꮫꮫ......ܵC:\\WINDOWS\\system32\\\n00251FD8  kernel32.dll.ꮫꮫꮫꮫﻮﻮﻮ......߁⅐%Ὀ%⅘%ὐ%Ⅰ%὘%.粀똾粀耀@Bᾰ%Ῐ%䀄耈..늰粘늰粘뿀䠂\n00252058  ....ꮫꮫꮫꮫ.....ߎC:\\WINDOWS\\WinSxS\\x86_Microsoft.VC90.CRT_1fc8b3b\n002520D8  9a1e18e3b_9.0.21022.8_x-ww_d08d0375\\MSVCR90.dll.ꮫꮫꮫꮫ.....ߩẬ%‐%\n00252158  Ẵ%‘%Ẽ%†%.硒ⵀ硔　.¾À⁸%℠%䀆逈..닀粘닀粘㷎䜱....ꮫꮫꮫꮫ....ߊ.ᓮîŸ%Ÿ%ﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮ\n</code></pre>\n<p>This is the part where I have found the <code>kernel32.dll</code>. But in the fact of that this a linked list. Shouldn't I be able to find <code>ntdll.dll</code> too? </p>\n<p>When, I open up the window of \"Executable Modules\" I can see the <code>ntdll.dll</code> but it seem I am not able to find the base address inside of the <code>Struct</code>. </p>\n<p>Please tell me if you need clarification or if I am grievously mistaken.</p>\n</div>",
    "votes": "9",
    "answers": 2,
    "views": "5k",
    "tags": [
        "windows",
        "assembly",
        "memory",
        "immunity-debugger"
    ],
    "user": "Dirk",
    "time": "May 28, 2014 at 7:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code below will set <code>EAX</code> to the image base address of <code>ntdll.dll</code>:</p>\n<pre><code>MOV EAX, DWORD PTR FS:[30]     ; EAX = PEB\nMOV EAX, DWORD PTR DS:[EAX+0C] ; EAX = PEB-&gt;Ldr\nMOV EAX, DWORD PTR DS:[EAX+1C] ; EAX = PEB-&gt;Ldr.InInitializationOrderModuleList.Flink\nMOV EAX, DWORD PTR DS:[EAX+8]  ; EAX = image base of ntdll (LDR_MODULE's BaseAddress)\n</code></pre>\n<p>Based on your question above, it seems like you understand everything through the <code>MOV EAX, DWORD PTR DS:[EAX+1C]</code> instruction. Since <code>ntdll.dll</code> is the first module loaded, it's the first <code>LDR_MODULE</code> entry in <code>InInitializationOrderModuleList</code>. So with <code>EAX</code> pointing to <code>PEB-&gt;Ldr.InInitializationOrderModuleList.Flink</code>, <code>[EAX+0]</code> points to the list entry's <code>Flink</code>, <code>[EAX+4]</code> points to the list entry's <code>Blink</code>, and <code>[EAX+8]</code> is the <code>BaseAddress</code> value of the first <code>LDR_MODULE</code> entry (<code>ntdll.dll</code>'s <code>LDR_MODULE</code>).</p>\n<p>This image from <a href=\"http://blog.csdn.net/programmingring/article/details/11357393\" rel=\"noreferrer\">http://blog.csdn.net/programmingring/article/details/11357393</a> may help:<img alt=\"diagram\" src=\"https://i.sstatic.net/GVtLO.jpg\"/></p>\n<p>When <code>EAX</code> is set to <code>PEB-&gt;Ldr.InInitializationOrderModuleList.Flink</code>, it's pointing to the orange <code>Flink</code> in the first <code>LDR_MODULE</code> above. It's followed by the <code>Blink</code> at <code>[EAX+4]</code>, and the \"<code>DllBase</code>\" (<code>BaseAddress</code>) at <code>[EAX+8]</code>.</p>\n</div>",
            "votes": "12",
            "user": "Jason Geffner",
            "time": "May 27, 2014 at 16:11",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming you want to see it in Windbg.</p>\n<p>You can follow this walk through for each pointer points to successive <code>LDR_DATA_TABLE_ENTRY</code> the output is from <code>calc.exe</code>. </p>\n<pre><code>0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(@$peb+c)+c)\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\calc.exe\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(@$peb+c)+c))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\ntdll.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(@$peb+c)+c)))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\kernel32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(@$peb+c)+c))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\SHELL32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(@$peb+c)+c)))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\ADVAPI32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\RPCRT4.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c)))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\Secur32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\GDI32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c)))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\USER32.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c))))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\msvcrt.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c)))))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\SHLWAPI.dll\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c))))))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"\"\n0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY -y Full poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(poi(@$peb+c)+c)))))))))))))\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\calc.exe\"\n</code></pre>\n<p><strong>an alternate representation of the above method</strong></p>\n<pre><code>lkd&gt; dt nt!_ldr_data_table_entry -y Full @@c++(@$peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink)\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\Program Files\\Windows Kits\\8.0\\Debuggers\\x86\\windbg.exe\"\nlkd&gt; dt nt!_ldr_data_table_entry -y Full @@c++(@$peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink-&gt;Flink)\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\ntdll.dll\"\nlkd&gt; dt nt!_ldr_data_table_entry -y Full @@c++(@$peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink-&gt;Flink-&gt;Flink)\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\kernel32.dll\"\nlkd&gt; dt nt!_ldr_data_table_entry -y Full @@c++(@$peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink-&gt;Flink-&gt;Flink-&gt;Flink)\n   +0x024 FullDllName : _UNICODE_STRING \"C:\\WINDOWS\\system32\\ADVAPI32.dll\"\n</code></pre>\n</div>",
            "votes": "4",
            "user": "blabb",
            "time": "May 30, 2014 at 8:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}