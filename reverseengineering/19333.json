{
    "title": "What are the difference syscall and int 0x2E instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/19333/what-are-the-difference-syscall-and-int-0x2e-instructions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From this question: <a href=\"https://reverseengineering.stackexchange.com/q/16075/23069\">How does the Windows Native API communicate with the kernel?</a></p>\n<p>Here is an example of <code>ZwClose(HANDLE Handle);</code> system call in NTDLL.DLL in Windows 10 X86_64:</p>\n<pre><code>NtClose         proc near\nmov     r10, rcx\nmov     eax, 0Fh\ntest    byte ptr ds:7FFE0308h, 1\njnz     short loc_a\nsyscall\nretn\n\nloc_a:\nint     2Eh\nretn\nNtClose         endp\n</code></pre>\n<p>My question is, why there is two different instruction <code>syscall</code> and <code>int 0x2E</code> in one subroutine? The <code>0xF</code> value in EAX is the ID of <code>ZwClose()</code> and/or <code>NtCose()</code>. While debugging, code execution never goes to <code>int 0x2E</code>, <code>syscall</code> instruction is always executed and <a href=\"http://www.osronline.com/article.cfm?id=257\" rel=\"noreferrer\"><code>ds:7FFE0308h</code> becomes zero</a>.</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "8k",
    "tags": [
        "windows",
        "x86",
        "kernel-mode",
        "system-call"
    ],
    "user": "Biswapriyo",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>7FFE0308h</code> is a pointer inside the <code>KUSER_SHARED_DATA</code> struct.</p>\n<blockquote>\n<p>The pre-set address for access from kernel mode is defined symbolically in WDM.H as KI_USER_SHARED_DATA. It helps when debugging to remember that this is 0xFFDF0000 or 0xFFFFF780`00000000, respectively, in 32-bit and 64-bit Windows. Also defined is a convenient symbol, SharedUserData, which casts this constant address to a KUSER_SHARED_DATA pointer.</p>\n<p>The read-only user-mode address for the shared data is 0x7FFE0000, both in 32-bit and 64-bit Windows.</p>\n</blockquote>\n<p>Ref: <a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data.htm\" rel=\"nofollow noreferrer\">https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data.htm</a></p>\n<p>We see from that ref above that SharedUserData+0x308 is</p>\n<blockquote>\n<p>0x0308 ULONG SystemCall</p>\n</blockquote>\n<p>for Windows versions 1511 and higher.</p>\n<p>So what does it do?</p>\n<pre><code>//\n// On AMD64, this value is initialized to a nonzero value if the system\n// operates with an altered view of the system service call mechanism.\n//\n\nULONG SystemCall;\n</code></pre>\n<p>from recent ntddk.h</p>\n<p>...not very helpful.</p>\n<p>So what's the difference between int 2e and syscall <strong>in this context?</strong></p>\n<p>Ref: <a href=\"https://twitter.com/honorary_bot/status/966609444674162688\" rel=\"nofollow noreferrer\">https://twitter.com/honorary_bot/status/966609444674162688</a></p>\n<blockquote>\n<p>Might be a clue: 'int 2e' instruction can be trapped by vmx, syscall not</p>\n</blockquote>\n<p>More info here: <a href=\"https://www.amossys.fr/fr/ressources/blog-technique/windows10-th2-int2e-mystery/\" rel=\"nofollow noreferrer\">https://www.amossys.fr/fr/ressources/blog-technique/windows10-th2-int2e-mystery/</a></p>\n<hr/>\n<p><strong>In the context of your question</strong> the <code>ntdll.dll</code> <code>int 0x2e</code> system calls probably have something to do with Virtualization Based Security. They have been present in Windows 10 since version 1511, after having been removed as a syscall method since Windows 8.</p>\n</div>",
            "votes": "9",
            "user": "Gehock",
            "time": "Feb 14, 2023 at 14:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>int 2Eh</code> is used on 32bit OS to enter the kernel mode. On 64-bit, the same is obtained by using <code>syscall</code>. The check done on memory address <code>0x7ffe0300</code> is one of <a href=\"http://www.rohitab.com/discuss/topic/40881-a-quick-way-to-detect-64-bit-windows/\" rel=\"noreferrer\">the ways to detect the bitness</a>.</p>\n</div>",
            "votes": "6",
            "user": "Paweł Łukasik",
            "time": "Sep 13, 2018 at 16:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}