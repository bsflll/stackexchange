{
    "title": "Does hex-rays support VLA in any way?",
    "link": "https://reverseengineering.stackexchange.com/questions/11682/does-hex-rays-support-vla-in-any-way",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was testing some 'C' code with VLAs. It wasn't that surprising that Hex-Rays was not able to recognize VLA. As with structures there is some way to make it understand (simply making the variable type of the structure you think it is) - is there similar thing for VLAs?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "530",
    "tags": [
        "ida",
        "c",
        "hexrays",
        "array"
    ],
    "user": "rec",
    "time": "Jan 2, 2016 at 23:57",
    "comments": [
        {
            "user": "user3629249",
            "text": "<span class=\"comment-copy\">you could simply call malloc() after obtaining the size of the array.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like Hexrays does not support this.</p>\n<p>Following the instructions for variable-length arrays (<a href=\"https://www.hex-rays.com/products/ida/support/tutorials/varstr/index.shtml\" rel=\"nofollow\">https://www.hex-rays.com/products/ida/support/tutorials/varstr/index.shtml</a>) shows that it does work for IDA disassembly and Set Type (hotkey Y), but not in the decompiler output (Hexrays).</p>\n<p>Example source:</p>\n<pre><code>typedef struct {\n  int a;\n  int b;\n  char c[0];\n} foo;\n\nint main() {\n  foo* f = malloc(512);\n  f-&gt;c[123] = 0;\n}\n</code></pre>\n<p>Struct defined in IDA:</p>\n<pre><code>00000000 struc_1         struc ; (sizeof=0x8, mappedto_1, variable size)\n00000000 a               dd ?\n00000004 b               dd ?\n00000008 c               db 0 dup(?)             ; XREF: main+1D/w\n00000008 struc_1         ends\n</code></pre>\n<p>Example disassembly after annotation:</p>\n<pre><code>push    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 20h\nmov     dword ptr [esp], 200h ; size\ncall    _malloc\nmov     [esp+1Ch], eax\nmov     eax, [esp+1Ch]\nmov     [eax+(struc_1.c+7Bh)], 0\nleave\nretn\n</code></pre>\n<p>Example decompiled output:</p>\n<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  struc_1 *result; // eax@1\n\n  result = (struc_1 *)malloc(0x200u);\n  BYTE3(result[0x10].a) = 0;\n  return (int)&amp;result-&gt;a;\n}\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Zach Riggle",
            "time": "Feb 3, 2016 at 17:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}