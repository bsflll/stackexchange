{
    "title": "MSVC Generates Weird Code for Volatile Local Variable",
    "link": "https://reverseengineering.stackexchange.com/questions/14689/msvc-generates-weird-code-for-volatile-local-variable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to know how MSVC 2010 generates code for volatile local variable and have done a test. This simple test function uses a volatile local variable:</p>\n<pre><code>int proc1(int a, int b) {\n    int volatile volvar=0;\n\n    int c=a;\n    if (b&gt;a) \n        c=0;\n    return c;\n}\n</code></pre>\n<p>The initialization of the integer <code>volvar</code> should not be eliminated by the optimizer due to the <code>volatile</code> keyword. The generated 64bit assembly is like this:</p>\n<pre><code>_TEXT   SEGMENT\nvolvar$ = 8\na$ = 8\nb$ = 16\n?proc1@@YAHHH@Z PROC                    ; proc1, COMDAT\n\n; 3    : int volatile volvar=0;\n\n    xor eax, eax\n\n; 4    : \n; 5    :    int c=a;\n; 6    :    if (b&gt;a) \n\n    cmp edx, ecx\n    cmovg   ecx, eax\n    mov DWORD PTR volvar$[rsp], eax;&lt;---what is 'mov DWORD PTR [8+rsp], eax'?\n\n; 7    :        c=0;\n; 8    :    return c;\n\n    mov eax, ecx\n\n; 9    : }\n\n    ret 0\n?proc1@@YAHHH@Z ENDP                    ; proc1\n_TEXT   ENDS\nEND\n</code></pre>\n<p>Notice the symbol <code>volvar$</code> equals to 8, so the instruction generated for the volatile local variable assignment write to the address [8+rsp]. RSP wasn't modified so should point to the return address. But my understanding of the 64bit stack layout is that there is no longer any parameters above the return address. Instead, [8+rsp] should point to the RCX storage location for the CALLING FUNCTION which has nothing to do with our current function. Does that overwrite the stack of the calling function incorrectly?</p>\n<p>Is it a bug with the compiler?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "158",
    "tags": [
        "disassembly",
        "c++",
        "x86-64"
    ],
    "user": "JavaMan",
    "time": "Feb 18, 2017 at 13:15",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No, it's not a compiler bug.</p>\n<p>The x64 calling convention on Windows says that the caller needs to allocate space on the stack for 4 register parameters even if the called function has less than 4 arguments.  Whilst, notionally, these are for the called function to spill the 1st four parameters (passed in registers RCX, RDX, R8 and R9) to, there is no requirement for it do so.</p>\n<p>In fact, even if the called function has fewer than 4 parameters, these 4 stack locations are effectively owned by the called function, and may be used by the called function for other purposes besides saving parameter register values. </p>\n<p>See <a href=\"https://msdn.microsoft.com/en-us/library/ew5tede7(v=vs.140).aspx\" rel=\"nofollow noreferrer\" title=\"here\">Microsoft's documentation</a> for details.</p>\n<p>In your example, <code>proc1</code> doesn't need to spill any registers so the compiler can efficiently use this allocated space for your <code>volvar</code> local variable instead.</p>\n</div>",
            "votes": "4",
            "user": "Ian Cook",
            "time": "Feb 18, 2017 at 22:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}