{
    "title": "Radare2 debugging - How to get into lazy imported functions?",
    "link": "https://reverseengineering.stackexchange.com/questions/18819/radare2-debugging-how-to-get-into-lazy-imported-functions",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a linux binary that imports functions from an external library (shared object). The functions are <a href=\"https://en.wikipedia.org/wiki/Lazy_loading\" rel=\"nofollow noreferrer\">lazy loaded</a> and not available when rip is at <code>@main</code> or <code>@entry</code>. When i step into such a function (like <code>call sym.imp.&lt;function&gt;</code>) it goes into plt-&gt;got-&gt;linker-&gt;function. Doing this manually (step-into) is very time consuming and uncomfortable. None of the analysis functions (<code>aaa</code>) seem to register any functions (<code>afl ~ &lt;function&gt;</code>) of the lazy loaded library so there is no way to gather the function start address (until the linker fills the plt/got).</p>\n<p>The only way i figured out so far is to break at the <code>call</code>, look up the mapped memory (<code>dm</code>) of the (now loaded) library and adding the offset of the function (gathered by directly/statically loading the library beforehand). This finally leads to the target function start address. </p>\n<p>Even though this works i think its still too complicated for such a basic task and there might be a much easier way. I can remember that IDA/Windows allowed to prepare a static environment (load binary, libs, add comments, annotations and such) and once going into the debugger the initialization phase (linker) detected the prepared libs and asked to use/overload them in the dynamic session. There, you could easily set breakpoints on the functions and the debugger stopped successfully.</p>\n<p>The question is: How to get into lazy loaded imported functions without going over plt/got/linker in radare2? </p>\n<p>Edit:\nHere is a specific example:</p>\n<pre><code>r2 -d /usr/bin/rar\naaa\ndb sym.imp.__swprintf_chk\ndc\n</code></pre>\n<p>Then you end up in the <code>.plt</code> (twice) and then in <code>map.usr_lib_ld_2.27.so.r_x + 50055</code>.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "4k",
    "tags": [
        "debugging",
        "linux",
        "radare2",
        "dynamic-linking"
    ],
    "user": "Maniaxx",
    "time": "Jul 17, 2018 at 19:44",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">Can you please share your binary and point to the specific locations. This way we will be able to give you the best answer.</span>",
            "time": null
        },
        {
            "user": "Maniaxx",
            "text": "<span class=\"comment-copy\">I've added an example.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>sym.imp.*</code> symbols are pointing to the <code>plt</code> and this is intended. In order to locate a specific function of a loaded module/library, you need to use the <code>dmi</code> command and its subcommands.</p>\n<p>To follow your example, in the following steps I'll demonstrate how to reach the address of <code>__swprintf_chk</code>.</p>\n<p>First, open a binary in a debug mode. I'm using the <em>same</em> binary as you.</p>\n<pre><code>$ r2 -d /usr/bin/rar\n\nProcess with PID 8617 started...\n= attach 8617 8617\nbin.baddr 0x00400000\nUsing 0x400000\nasm.bits 64\n -- This computer has gone to sleep.\n[0x7f1f85401090]&gt;\n</code></pre>\n<p><code>__swprintf_chk</code> is part of <em>libc</em> so we need the library to be loaded in the memory first. By default, radare2 breaks before <code>libc</code> is loaded into the memory so let's quickly continue the execution until we reach the program's entrypoint using <code>dcu</code> (<strong>d</strong>ebug <strong>c</strong>ontinue <strong>u</strong>ntil):</p>\n<pre><code>[0x7f1f85401090]&gt; dcu entry0\nContinue until 0x00403000 using 1 bpsize\nhit breakpoint at: 403000\n</code></pre>\n<p>Now that we are at the program's entrypoint, we can simply execute the following command:</p>\n<pre><code>[0x00403000]&gt; dmi libc __swprintf_chk\n235 0x001335f0 0x7f1f845c35f0 GLOBAL   FUNC  162 __swprintf_chk\n</code></pre>\n<p>We received the address of <code>__swprintf_chk</code> which is <code>0x7f1f845c35f0</code>. We can use radare2's internal grep (<code>~</code>) to take only this value:</p>\n<pre><code>[0x00403000]&gt; dmi libc __swprintf_chk~[2]\n0x7f1f845c35f0\n</code></pre>\n<p>We can also print it as a radare2 commands using <code>dmi*</code>:</p>\n<pre><code>[0x00403000]&gt; dmi* libc __swprintf_chk\nf sym.__swprintf_chk 162 0x7f1f845c35f0\n</code></pre>\n<p>And if you want to execute the command, simply prepend it with a dot:</p>\n<pre><code>[0x00403000]&gt; .dmi* libc __swprintf_chk\n[0x00403000]&gt; f~sym.__swprintf_chk\n0x7f1f845c35f0 162 sym.__swprintf_chk\n</code></pre>\n<p>As you can see, the address was added as a flag named \"sym.__swprintf_chk\".</p>\n<p>For more help you can execute <code>dmi?</code> and <code>dm?</code> and read the help for these commands.<br/>\nMore information can be found in the <a href=\"https://radare.gitbooks.io/radare2book/content/debugger/memory_maps.html\" rel=\"nofollow noreferrer\">\"Memory Maps\"</a> chapter I wrote for r2book.</p>\n</div>",
            "votes": "4",
            "user": "Megabeets",
            "time": "Jul 17, 2018 at 20:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}