{
    "title": "Trying to reverse encypter to decrytper in C. Can't figure out what I'm missing",
    "link": "https://reverseengineering.stackexchange.com/questions/32243/trying-to-reverse-encypter-to-decrytper-in-c-cant-figure-out-what-im-missing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Goal:\nTrying to reverse encrypter to decrypter that successfully decrypts.</p>\n<p>This is the pseudo-code of the disassembled encrypting program. There are no function calls, and I've been able to somewhat replicate this code in C.</p>\n<pre class=\"lang-c prettyprint-override\"><code>\nundefined8 main(void)\n\n{\n  int random;\n  time_t current_time;\n  long in_FS_OFFSET;\n  uint time_number;\n  uint rand_seven;\n  long counter;\n  FILE *open_flag;\n  size_t size_of_flag_file;\n  void *pointer_allocated_memory_block;\n  FILE *open_flag_enc;\n  long off_40;\n  \n  off_40 = *(long *)(in_FS_OFFSET + 40);\n  open_flag = fopen(\"flag\",\"rb\");\n  fseek(open_flag,0,2);\n  size_of_flag_file = ftell(open_flag);\n  fseek(open_flag,0,0);\n  pointer_allocated_memory_block = malloc(size_of_flag_file);\n  fread(pointer_allocated_memory_block,size_of_flag_file,1,open_flag);\n  fclose(open_flag);\n  current_time = time(NULL);\n  time_number = (uint)current_time;\n  srand(time_number);\n  for (counter = 0; counter &lt; (long)size_of_flag_file; counter = counter + 1) {\n    random = rand();\n    *(byte *)((long)pointer_allocated_memory_block + counter) = *(byte *)((long)pointer_allocated_memory_block + counter) ^ (byte)random;\n    rand_seven = rand();\n    rand_seven = rand_seven &amp; 7;\n    *(byte *)((long)pointer_allocated_memory_block + counter) = *(byte *)((long)pointer_allocated_memory_block + counter) &lt;&lt; (sbyte)rand_seven | *(byte *)((long)pointer_allocated_memory_block + counter) &gt;&gt; 8 - (sbyte)rand_seven;\n  }\n  open_flag_enc = fopen(\"flag.enc\",\"wb\");\n  fwrite(&amp;time_number,1,4,open_flag_enc);\n  fwrite(pointer_allocated_memory_block,1,size_of_flag_file,open_flag_enc);\n  fclose(open_flag_enc);\n  if (off_40 != *(long *)(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return 0;\n}\n\n</code></pre>\n<p>This is the code that needs work: I have tried multiple iterations. If I could get some help or an overview of what I could be/am missing?</p>\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nint main() {\n    unsigned int time_number;\n    size_t counter;\n    FILE *open_flag;\n    size_t size_of_flag_file;\n    void *pointer_allocated_memory_block;\n    FILE *open_flag_enc;\n\n    printf(\"[DEBUG] Starting program...\\n\");\n\n    // Open the encrypted file\n    printf(\"[DEBUG] Attempting to open encrypted file...\\n\");\n    open_flag = fopen(\"flag.enc\", \"rb\");\n    if (open_flag == NULL) {\n        perror(\"[ERROR] Could not open file\");\n        return 1;\n    }\n    printf(\"[LOG] Successfully opened encrypted file.\\n\");\n\n    // Read the RNG seed from the first 4 bytes of the file\n    fread(&amp;time_number, 1, 4, open_flag);\n    printf(\"[LOG] RNG Seed read: %u\\n\", time_number);\n\n    // Determine the size of the remaining file\n    fseek(open_flag, 0, SEEK_END);\n    size_of_flag_file = ftell(open_flag) - 4;\n    fseek(open_flag, 4, SEEK_SET);\n    printf(\"[LOG] Size of remaining file: %zu bytes\\n\", size_of_flag_file);\n\n    // Read the encrypted flag into memory\n    pointer_allocated_memory_block = malloc(size_of_flag_file);\n    fread(pointer_allocated_memory_block, 1, size_of_flag_file, open_flag);\n    fclose(open_flag);\n    printf(\"[LOG] Successfully read encrypted data into memory.\\n\");\n\n    // Seed RNG with the same seed\n    printf(\"[DEBUG] Seeding RNG...\\n\");\n    srand(time_number);\n\n    // Decrypt the flag\n    printf(\"[DEBUG] Starting decryption...\\n\");\n    unsigned char *buffer = (unsigned char *)pointer_allocated_memory_block;\n    for (counter = 0; counter &lt; size_of_flag_file; counter++) {\n        int random = rand();\n        int rand_seven = rand() &amp; 7;\n        \n        buffer[counter] = (buffer[counter] &lt;&lt; (8 - rand_seven)) | (buffer[counter] &gt;&gt; rand_seven);\n        buffer[counter] ^= (unsigned char)random;\n    }\n    printf(\"[LOG] Decryption completed.\\n\");\n\n    // Write the decrypted flag to \"flag.txt\"\n    printf(\"[DEBUG] Writing decrypted flag to file...\\n\");\n    open_flag_enc = fopen(\"flag.txt\", \"wb\");\n    fwrite(pointer_allocated_memory_block, 1, size_of_flag_file, open_flag_enc);\n    fclose(open_flag_enc);\n    printf(\"[LOG] Successfully wrote decrypted flag to 'flag.txt'.\\n\");\n\n    // Free allocated memory\n    printf(\"[DEBUG] Freeing allocated memory...\\n\");\n    free(pointer_allocated_memory_block);\n\n    printf(\"[LOG] Program completed successfully.\\n\");\n    return 0;\n}\n\n</code></pre>\n<p>Thank you for your time.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "103",
    "tags": [
        "debugging",
        "decompilation",
        "decryption",
        "xor"
    ],
    "user": "Brandon Gregory",
    "time": "Sep 2, 2023 at 8:18",
    "comments": [
        {
            "user": "w s",
            "text": "<span class=\"comment-copy\">It looks like you're initializing srand with a constant in your decriptor, while in encryptor it is initialized with something else. Are you sure that it should be so?</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">Previous comment is correct. The decompilation shows that the seed for the random number generator is the first 4 bytes in the <code>.enc</code> file. You're using a hard-coded seed, though. You need to read the first 4 bytes and use that as your seed instead of using a fixed value. You appear to have realized that, and then commented the code out and used a fixed seed anyway.</span>",
            "time": null
        },
        {
            "user": "Brandon Gregory",
            "text": "<span class=\"comment-copy\">Yes, I was initially trying something with the original program and comparing it. I have it fixed to the first 4 bytes of the file now. I'll edit the post to reflect that.</span>",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">So the problem is you don't get what you expect when your decryptor runs? I'd recommend putting debug prints at each iteration in your decryption loop, and then stepping through the original program in a debugger and comparing the values along the way. The problem might be that the C standard library you're using implements <code>rand</code> (and <code>srand</code>) differently from the binary's version. The validation process I outlined will let you hone in on the problem very quickly.</span>",
            "time": null
        },
        {
            "user": "Brandon Gregory",
            "text": "<span class=\"comment-copy\">Thank you, I didn't think to compare the standards and libraries. That could be the problem. I'll try out that validation process and compare and fix any libraries. I'll let you know how it goes.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd recommend debugging the decryption loop in your code, and the encryption loop in the original binary, side-by-side and comparing the values at each step. It's possible that your binary's <code>rand()</code> might be producing different values from the one in the original binary -- the behavior of <code>rand()</code> may vary by version of the C standard library, or across implementations of the C standard library. If that's the case, you'd want to replicate their implementation, or just try to use the same standard library that they did.</p>\n</div>",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Sep 2, 2023 at 23:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}