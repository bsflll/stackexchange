{
    "title": "Bin file is not only storing 0s and 1s, ASCII or otherwise",
    "link": "https://reverseengineering.stackexchange.com/questions/3252/bin-file-is-not-only-storing-0s-and-1s-ascii-or-otherwise",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Upon checking out a binary file, <a href=\"http://en.wikipedia.org/wiki/Binary_file\" rel=\"nofollow noreferrer\">and according to convincing evidence</a>, .bin file extensions are supposed to denote a file type which stores its data as 0s and 1s, or 31/32 in ASCII hex(ASCII character codes for 1 and 0). Upon entering a file I noticed that it doesn't just store 0s and 1s:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/8vRh5.png\"/></p>\n<p>The first sixteen bytes fall within a possible 8-bit value (range: 0-256), which makes sense since each value is a byte. But my questioning is, since it's called \"bin\", why does it store values like every other file? What is the difference? The values are not 1s and 0s, but values falling anywhere between 0-256 per byte. That doesn't add up to me.</p>\n<p>Why is it called a binary file when it stores byte-ranged values the same as any other file would? How is a bin different than a jpeg? </p>\n</div>",
    "votes": "-5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "encodings",
        "hex"
    ],
    "user": "confused for real",
    "time": "Dec 21, 2013 at 19:42",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">\"according to convincing evidence\" -- <i>nowhere</i> in that \"evidence\" is stated that \"binary\" data gets stored \"as 0s and 1s, or 31/32 in ASCII hex\". It's actually a fairly good answer to your question.</span>",
            "time": null
        },
        {
            "user": "majidarif",
            "text": "<span class=\"comment-copy\">Honestly, anyone can use any file extension they want that's why the proper checking of a filetype is by looking for the magic number.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From the Wikipedia article to which you linked:</p>\n<blockquote>\n<p>A binary file is a computer file that is not a text file; it may\n  contain any type of data, encoded in binary form for computer storage\n  and processing purposes.</p>\n</blockquote>\n<p>That's what you're seeing in your screenshot above, but the hex editor you're using is displaying binary data (<code>0</code>s and <code>1</code>s) in hexadecimal form to make it more readable.</p>\n<p>From <a href=\"http://en.wikipedia.org/wiki/Hexadecimal\">http://en.wikipedia.org/wiki/Hexadecimal</a>:</p>\n<blockquote>\n<p>the primary use of hexadecimal notation is a human-friendly\n  representation of binary-coded values in computing and digital\n  electronics</p>\n</blockquote>\n<p>If you prefer, you can use a hex editor like <a href=\"http://www.sweetscape.com/010editor/\">010 Editor</a> which will happily show you the content of the file as <code>0</code>s and <code>1</code>s instead of in hexademical format (<code>View --&gt; Edit As --&gt; Binary</code> in the program's menu bar).</p>\n</div>",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Dec 21, 2013 at 19:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "confused for real",
                    "text": "<span class=\"comment-copy\">If all data is stored in binary, why is there a specific file called a .bin? Everything on the computer is in binary, so what's the purpose of a binary file? Also, I don't understand hex too well, but I do binary.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Yes, at the lowest level, storage media does store everything in binary (even text files). File extensions (such as <code>.bin</code>) are primarily intended to indicate to the user the type of content in the file. I don't know what file you're looking at, but someone chose to name it <code>.bin</code>. The extension itself doesn't change the content of the file, and doesn't always reflect the actual content of a file. For example, you could rename a <code>.jpg</code> file to <code>.bin</code> and your graphics editor would still be able to open the file just fine as a JPEG file.</span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Merely to indicate to a <i>human</i> that the contents of a file is not something simple, such as \"text\". An extension <code>.txt</code> is a strong indicator it is perfectly alright to attempt to open a file with a text editor. For <code>.bin</code> it signifies the opposite.</span>",
                    "time": null
                },
                {
                    "user": "confused for real",
                    "text": "<span class=\"comment-copy\">So your points are that, aside from binary numbers, a .bin file is typically not parsed/read by typical software as it would a typical file, i.e. text, .txt, video, .mp4, etc. File extension, I know, does not denote format, but it is often used to do so to make it clearly differentiated from, say, another format. A .bin file is not encoded in ASCII format for Notepad to parse and display, but its format could well be understood by Intel Celeron, so the difference is merely formatting/encoding schemes. Is that what you guys mean?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No, for your Intel Celeron to \"understand\" the content of the file it would need to be assembly code, and that does not appear to be the case for the file you showed above.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems you're new to Hex. You can think of Hex as a compact form for binary. The following table might help you:</p>\n<pre><code>0 hex is 0000 binary\n1 hex is 0001 binary\n2 hex is 0010 binary\n3 hex is 0011 binary\n4 hex is 0100 binary\n5 hex is 0101 binary\n6 hex is 0110 binary\n7 hex is 0111 binary\n8 hex is 1000 binary\n9 hex is 1001 binary\na hex is 1010 binary\nb hex is 1011 binary\nc hex is 1100 binary\nd hex is 1101 binary\ne hex is 1110 binary\nf hex is 1111 binary\n</code></pre>\n</div>",
            "votes": "6",
            "user": "Thomas Weller",
            "time": "Dec 21, 2013 at 20:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "confused for real",
                    "text": "<span class=\"comment-copy\">I am not new to binary or hexadecimal, and you didn't need to show me a table. My questioning was regarding the encoding differences between bin and other formats, and that they're all 0s and 1s, in square waves, on the circuit level. My confusion was actually the encoding differences I believe, because all files are encoded at the lowest level in binary, so I didn't understand quite the difference from a bin to a, say, jpeg using that same manner of logic. But, apparently, the difference seems to lie in encoding schemes.</span>",
                    "time": null
                },
                {
                    "user": "confused for real",
                    "text": "<span class=\"comment-copy\">I also don't find hexademical easier than binary. Strangely, binary is what I learned first, and hexadecimal seems harder to get my head around.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@confusedforreal: which is where this table comes in <i>real</i> handy. Because if you know that one nibble (4 bit) is one hex digit, that table is very very useful for understanding.</span>",
                    "time": null
                }
            ]
        }
    ]
}