{
    "title": "Decompilation techniques for DOS .COM files",
    "link": "https://reverseengineering.stackexchange.com/questions/3789/decompilation-techniques-for-dos-com-files",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've found a binary copy of a DOS freeware game I was fond of back in the day (<a href=\"http://dosgamer.com/firefighter/\">Firefighter</a>, downloadable as <code>FIRE.COM</code>) but the source code is not available. I'd like to re-implement it in C or Python using Unix curses and while I'm fully competent to do that part, I know almost nothing about tools for reverse-engineering and decompiling DOS .COM file binaries.  </p>\n<p>Going by documentation that says .COM is headerless raw machine code, I tried running <code>objdump -D -b binary -m i386</code> on it. The result didn’t look valid. <code>objdump -D -b binary -m i8086 –adjust-vma=0×100</code> appeared to do the trick as did using NASM with <code>ndisasm -b 16 -a -o 0×100</code> and both of those do seem to produce plausible <em>assembly</em> listings.</p>\n<p>Ideally, though, I'm looking for something that decompiles and renders to C in <em>as-if-it-were-assembler</em> style with generated variable names and useful annotations on the DOS traps. I understand that such a beast may not exist, but on the chance one does I'm seeking recommendations.</p>\n</div>",
    "votes": "16",
    "answers": 6,
    "views": "15k",
    "tags": [
        "tools",
        "decompilation",
        "decompiler",
        "dos-com"
    ],
    "user": "ESR",
    "time": "Mar 8, 2014 at 21:26",
    "comments": [
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\">Welcome to RE! Have you searched and looked at the existing questions on the site?</span>",
            "time": null
        },
        {
            "user": "ESR",
            "text": "<span class=\"comment-copy\">How is this not in scope under \"tools commonly used for reverse engineering hardware or software\"?</span>",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "<span class=\"comment-copy\"><a href=\"http://reverseengineering.stackexchange.com/q/1854/189\">Have you looked through the existing questions?</a> Have you tried out any of the solutions already provided? Where/Why have the existing questions failed? This question shows absolutely no previous research.</span>",
            "time": null
        },
        {
            "user": "grkvlt",
            "text": "<span class=\"comment-copy\">I have updated the question; Can the on hold status be removed?</span>",
            "time": null
        },
        {
            "user": "aybe",
            "text": "<span class=\"comment-copy\">Maybe you can get some hints here <a href=\"http://www.program-transformation.org/Transform/MachineCodeDecompilers\" rel=\"nofollow noreferrer\">program-transformation.org/Transform/MachineCodeDecompilers</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My answer is a little late; newcomer to this site. The Decompiler project was initiated in order to decompile MS-DOS EXE and COM binaries. The project has both a command-line and a GUI tool:</p>\n<p><a href=\"https://sourceforge.net/projects/decompiler/\" rel=\"noreferrer\">https://sourceforge.net/projects/decompiler/</a></p>\n<p>Use the following command with the command-line tool to decompile COM programs:</p>\n<pre><code>decompile --default-to ms-dos-com myprog.com\n</code></pre>\n<p>In the GUI, use the menu command <code>File</code> &gt; <code>Open as...</code> to open the COM file and specify a start address like 0800:0100.</p>\n</div>",
            "votes": "7",
            "user": "John Källén",
            "time": "Jul 25, 2015 at 8:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA Pro and a number of other disassemblers will disassemble your file, assuming that it isn't compressed or otherwise obfuscated.  But this is only the first step in producing a working assembly language program, which you will need if you are to translate it into a higher language.</p>\n<p>Essentially you are looking at two projects.  The first is to produce a working assembly language version of your game.  The second is to translate the game mechanics and logic into C++ or whatever.  The first is easier than the second.</p>\n</div>",
            "votes": "5",
            "user": "Paddywhacker",
            "time": "Apr 14, 2014 at 4:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently found a DOS program which turns .COM and .EXE into a simple \"pseudo-code\".\nThe program is   ---   exe2c.zip</p>\n<p><a href=\"http://www.codeforge.com/dlpre/201558/cb2e19437871.zip__.html\" rel=\"nofollow\">http://www.codeforge.com/dlpre/201558/cb2e19437871.zip__.html</a></p>\n<p>Not an \"excellent\" tool, but i found it useful.\nStart by executing    ENVMNU.EXE    and then entering the .COM or .EXE filename.\n---(hint?)  If better results are necessary, use the individual modules\n( such as the DOS to ASM module ) and hand-edit ASM discrepancies \nthen feed them to the ASM to C module and observe the results.</p>\n<p>-- William Gallant</p>\n</div>",
            "votes": "4",
            "user": "user4069",
            "time": "Aug 29, 2014 at 8:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>no beast exist that will decompile 16 bit com program<br/>\nif you prefer to debug it look for grdb from ladsoft<br/>\nalso have in hand a copy of ralf browns interrupt list for all the<br/>\nint 21 / int 10 SetCursor / GetCursor calls   </p>\n<p>also make sure you rename the downloaded exe to be 8dot3 compatible<br/>\n(name less than 8 charecters)</p>\n<pre><code>GRDB.EXE firefi.com    \n\nGet Real Debugger Version 9.6  Copyright (c) 1997-2009 David Lindauer (LADSoft)\nGRDB comes with ABSOLUTELY NO WARRANTY, for details type `?g'\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `?gr' for details\n\nDPMI Start code hooked\nHistory enabled\neax:00000000 ebx:00000000 ecx:00007500 edx:00000000 esi:00000000 edi:00000000\nebp:00000000 esp:0000FFEE eip:00000100 flag:00000202 NV UP EI PL NZ NA PO NC\nds:1F25 es:1F25 fs:1F25 gs:1F25 ss:1F25 cs:1F25\n1F25:0100 E9 25 27       jmp          2828\nSize: 00007500\n-&gt;  \n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 21, 2014 at 0:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As I review your application (Fire.COM), I think you should use some DOS debugger like Turbo Debugger 5.0 to debug and reverse this application because I have some encrypted stage in it. If you want to \"decompile\" these application to C code, it's very hard, I had tried some tools in the past (2008) but there was not a good tool to do it. I also got a C source but there was many inline assembly in it.</p>\n</div>",
            "votes": "2",
            "user": "tuantm",
            "time": "Aug 29, 2014 at 7:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For <code>.com</code> (MS DOS) programs I use ndisasm (Netwide Disassembler) as mentioned in <a href=\"https://stackoverflow.com/a/4404700/851957\">this</a> answer. It is very simple, just work without any magic.</p>\n</div>",
            "votes": "1",
            "user": "MarianD",
            "time": "Nov 4, 2021 at 11:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}