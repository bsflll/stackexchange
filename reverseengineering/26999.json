{
    "title": "Expanding .data section at particular area",
    "link": "https://reverseengineering.stackexchange.com/questions/26999/expanding-data-section-at-particular-area",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a program which creates a hard-coded number of objects. I patched the binary so that now it can attempt to create more objects than the limit allows, however when it does it allocates them to memory that wasn't supposed to be originally written to in the <code>.data</code> section. Here's an illustration:</p>\n<p><a href=\"https://i.sstatic.net/pFIlZ.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/pFIlZ.png\"/></a></p>\n<p>I'm wondering what approach I should use tackle this. Right now, I used CFF Explorer to create a an exact copy of the <code>.data</code> section, called <code>.dataex</code>, which has double the size of <code>.data</code>, and put it at the end of the binary:</p>\n<p><a href=\"https://i.sstatic.net/Ke2El.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Ke2El.png\"/></a></p>\n<p>My initial thought was that there is possibly some way to \"shift\" the references down so that the program will use the ones in <code>.dataex</code>, and then do another \"shift\", but this time only from <code>.dataex + n</code>. That way, there is more free space which the program can use to create new objects.</p>\n<p>I realise I may be missing/overlooking/misunderstanding many things here, so please let me know if what I want to do is even possible, or if there exists a simpler solution.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "108",
    "tags": [
        "ida",
        "disassembly",
        "pe",
        "memory",
        "segmentation"
    ],
    "user": "daedsidog",
    "time": "Feb 12, 2021 at 4:17",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sounds possible, the difficulty of achieving it I think would depend on:</p>\n<ul>\n<li>how the objects are allocated (inline access vs allocator)</li>\n<li>the type of references (direct addressing vs indirect)</li>\n<li>the amount of references that there are to the objects</li>\n</ul>\n<p>If it's just a small number of references and allocations then it might not matter which method you use - the easiest and fastest would be the best I guess.</p>\n<p>If that isn't the case then the next best might be where the allocation is through an allocation function and the references are all indirect. In that case there's no need to fix the references and you'd just need to patch the allocator - to use your custom memory.</p>\n<p>If the allocation is inline or the access is direct then fixing the allocations and references might be done with relative ease if they are done using references which are resolved during the loading of the program - i.e relocations (<a href=\"https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-54839.html\" rel=\"nofollow noreferrer\">https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-54839.html</a>). You might then iterate over all the relocations in the relocations section and modifying the ones that refer to the objects structure in the <code>.data</code> section to point to your new <code>.dataex</code> section.</p>\n<p>You also might want to take a look at lief (<a href=\"https://lief.quarkslab.com/\" rel=\"nofollow noreferrer\">https://lief.quarkslab.com/</a>). I haven't found your specific use case - but it might help with the boilport in implementing your solution.</p>\n</div>",
            "votes": "1",
            "user": "Moshe Green",
            "time": "Feb 12, 2021 at 12:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}