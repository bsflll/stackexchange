{
    "title": "Associating Symbol Names with .PLT Entries",
    "link": "https://reverseengineering.stackexchange.com/questions/6213/associating-symbol-names-with-plt-entries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Doing some messing around with ELF (of both the x86 and ARM varieties).</p>\n<p>Associating symbol names with entries in the <code>.got</code> section is straightforward.  Find the <code>.got</code> section, find the relocation section <code>.rel.plt</code>/<code>.rela.plt</code> whose <code>.sh_info</code> contains the index of the <code>.got</code>, and find the symbol section <code>.dynsym</code> that contains the symbol names.</p>\n<p>Everything lines up nicely between these sections, and I can accurately assign symbol names to entries in the <code>.got</code>.  </p>\n<p>However, I also want names for the stubs in the <code>.plt</code> section.  A rough percentage of the time, symbols for the <code>.plt</code> can be inferred based on the ordering of <code>.got</code> symbols, and an offset from the base of the <code>.plt</code> section.  For whatever reason, occasionally this is not the case.</p>\n<p>Binutils <code>objdump</code> can accurately generate them for x86, and IDA can accurately generate them for x86 and ARM (both without <code>-g</code> debugging symbols).  How are these generated?</p>\n<p>In the case of IDA, I could reasonably assume there's some advanced logic going on based on interpretation of the instructions in the <code>.plt</code>, but I know that must not be the case for <code>objdump</code>.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "elf",
        "got",
        "plt"
    ],
    "user": "Zach Riggle",
    "time": "Oct 14, 2014 at 3:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>See <a href=\"http://www.sourceware.org/ml/binutils/2004-04/msg00469.html\" rel=\"nofollow\">this thread</a>. Basically, they rely on the fact that the order of PLT relocations matches the order of the stubs in <code>.plt</code> section, and the stubs are all of the same size.</p>\n<p>On some platforms you can also use <code>st_value</code> of the symbol entry in the dynamic symbol table.</p>\n<p>IDA indeed usually does not rely on the order of symbols/relocations but checks the actual instructions in the stub.</p>\n</div>",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Sep 10, 2014 at 5:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}