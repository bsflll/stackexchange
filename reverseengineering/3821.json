{
    "title": "Reversing a synchronisation cable between LED displays",
    "link": "https://reverseengineering.stackexchange.com/questions/3821/reversing-a-synchronisation-cable-between-led-displays",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have two LED Call queuing displays. I don't know what is the english name for this but is LED display that you can increment one and people take paper ticket, used for counters, it looks something like this:</p>\n<p><img alt=\"LED Call queuing display\" src=\"https://i.sstatic.net/P4qus.jpg\"/></p>\n<p>The two displays are connected with a RJ11/14 cable that sincronizes the information between them. I want to place a Arduino between them to get the current value in the display. I suspect the information between is passed using something like a serial connection (<a href=\"http://arduino.sundh.com/2012/01/arduino-ethernet-shield-hooked-up-to-led-message-display/\" rel=\"nofollow noreferrer\">mostly because posts like this</a>), however it may only send a <em>tick</em> event to the other board. I can't find a brand in the display, neither any documentation. What I would like to know is how should I try to reverse the RJ11 pinout. </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "109",
    "tags": [
        "hardware"
    ],
    "user": "Artur Ventura",
    "time": "Mar 7, 2014 at 19:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The place to start would be to characterize the electrical signal.  Using an oscilloscope, you can determine:</p>\n<ul>\n<li>what voltages are used?</li>\n<li>assuming it's digital, are there more than two levels?</li>\n<li>what are the shortest duration signals?</li>\n<li>what seems to be the voltage level when there is no traffic?</li>\n<li>which end is driving which line? (Hint: unplug one end and check voltages)</li>\n</ul>\n<p>After you have the electrical parameters, you can build a circuit to interface the signal(s) to your Arduino.  The simplest would be to simply connect signal and ground to appropriate lines on the Arduino, but you might need to incorporate level converters or buffers. </p>\n<p>Once you have access to the digital signal, you can start to work on the protocol details.  At the datalink layer, some questions are:</p>\n<ul>\n<li>what is the size of the frame?</li>\n<li>is there an identifiable header?</li>\n<li>is there a length field?</li>\n<li>is there a CRC or checksum?</li>\n<li>can the protocol be identified as some well-known protocol?</li>\n<li>can you correlate messages with external stimuli?</li>\n<li>is the protocol bidirectional or unidirectional?</li>\n</ul>\n<p>Once you have captured a number of frames as data on a computer, you can use a number of different kinds of approaches to determine the protocol details  I find it useful to experiment with the frames in an interactive Python session to quickly test ideas. Another promising tool for that would be an open source tool called <a href=\"http://www.netzob.org/\" rel=\"nofollow\">Netzob</a>.</p>\n</div>",
            "votes": "2",
            "user": "Edward",
            "time": "Mar 24, 2014 at 12:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}