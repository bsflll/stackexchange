{
    "title": "PE ImageBase presence in PDB",
    "link": "https://reverseengineering.stackexchange.com/questions/31872/pe-imagebase-presence-in-pdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is <code>ImageBase</code> of a PE binary present in its PDB or can it only be retrieved from the binary?</p>\n<p>I have studied both <a href=\"https://github.com/microsoft/microsoft-pdb\" rel=\"nofollow noreferrer\">Microsoft's PDB sources</a> and <a href=\"https://llvm.org/docs/PDB/index.html\" rel=\"nofollow noreferrer\">LLVM docs</a> without much luck finding it.</p>\n<p>In the <a href=\"https://llvm.org/docs/PDB/DbiStream.html#optional-debug-header-stream\" rel=\"nofollow noreferrer\">DBI stream</a> there exist section headers with section RVAs, but I couldn't find any trace of their corresponding VAs or the base address itself.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "112",
    "tags": [
        "pe",
        "address",
        "pdb"
    ],
    "user": "mimak",
    "time": "May 15, 2023 at 13:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe this information is not stored within the PDB files in any recent versions.</p>\n<p>Microsoft's <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/debug-interface-access-sdk?view=vs-2022\" rel=\"nofollow noreferrer\">DIA SDK</a> used for dumping information contained in PDB files does provide a method named <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiasymbol-get-virtualaddress?view=vs-2022\" rel=\"nofollow noreferrer\"><code>get_virtualAddress</code></a> (as opposed to <a href=\"https://learn.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiasymbol-get-relativevirtualaddress?view=vs-2022\" rel=\"nofollow noreferrer\"><code>get_relativeVirtualAddress</code></a>) which should, in theory, return the real virtual address of a static symbol (segment, section, frame data etc.), however both of these methods currently return the same value (RVA) in all test cases I've tried. The implementations of two methods <em>are</em> different though, suggesting that there could be some use cases where the VAs are in fact stored within the data.</p>\n<p>Keep in mind that the PDB format dates back to 90s, so if I had to guess I'd say that the actual VA's were contained within PDB files back before ASLR was introduced. This is, of course, only speculation on my part.</p>\n</div>",
            "votes": "4",
            "user": "ynwarcs",
            "time": "May 16, 2023 at 11:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">That's what I assumed too and instead extracted the imagebase directly from binary with IDAPython, thanks</span>",
                    "time": null
                }
            ]
        }
    ]
}