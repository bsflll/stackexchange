{
    "title": "Byte frequencies in different architectures' binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/12145/byte-frequencies-in-different-architectures-binaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>what I'm looking for</h2>\n<p>I have a binary that, for various reasons, I'm pretty sure is executable machine code (although possibly for a VM language, although I doubt it's Java). I'm looking for a table of byte frequencies for byte values v. architecture.</p>\n<p>I recognize that those values will vary by compiler, operating system ABI / API, application, and binary format, but for my purposes I'm assuming they vary most markedly by architecture, and:</p>\n<ul>\n<li>I just need frequencies for the actual executable code- the <code>.text</code> section- not the entire binary.</li>\n<li>the binary's targeting one of the most common end-user operating systems from 1985 - 2005 (so, old-style unices, Linux, VMS, DOS, Windows NT, MacOS, or OSX).</li>\n<li>it was compiled with default flags on the most common compilers for those systems</li>\n</ul>\n<p><del>If all that fails, I'd at least want a list of <code>nop</code> opcodes for all the most common architectures, since I think it's probably fair to assume most compilers use nops for padding, and runs of nops will help me figure out where a good entry point for a disassembler would be.</del>\nWait, there's <a href=\"https://en.wikipedia.org/wiki/NOP\">this list on wikipedia</a>. Thank you, wikipedia.</p>\n<h2>my use case</h2>\n<p>I have a snippet of a binary, which I'm pretty sure is executable object code (sans headers / section information. I think it's the <code>.text</code> section (or whatever you'd call that) in its original format).</p>\n<p>I'm not <strong>sure</strong> that it's even from a binary, but when converted to a grayscale bitmap it has some clear patterns (stripes at regular intervals), and I've noticed that the bytes <code>FF FF</code> appear often enough, and beside other bytes in the form <code>Fx</code>, that I get the feeling I'm looking at high memory addresses. The shannon entropy is low enough I'm pretty sure it's not compressed or encrypted (around 7.76), but all 256 possible byte values are represented.</p>\n<p>I can't actually give the hexdump itself for personal reasons.</p>\n</div>",
    "votes": "7",
    "answers": 1,
    "views": "353",
    "tags": [
        "binary-analysis",
        "binary",
        "binary-format"
    ],
    "user": "Parthian Shot",
    "time": "Mar 3, 2016 at 20:32",
    "comments": [
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\">Wait, after looking through other questions on here, I've realized that I should probably just use <code>binwalk</code>, which in fairness I hadn't found in previous searches on the larger internet. I feel kind of silly now, but I'll leave this question and answer it myself in a bit. Assuming binwalk actually helps. If it doesn't help, I guess I'll just... wait around...</span>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\">Hm. <code>binwalk -A</code> isn't getting me anything, nor is <code>binwalk -I</code>. Literally- they're giving me no hits. Just as a sanity check, running <code>binwalk -A</code> against <code>/bin/bash</code> also got me no hits and no error codes, so I'm not sure what to think.</span>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\"><code>binwalk</code> does give me entropy values consistently around 0.94 for all four kilobytes, while <code>/bin/bash</code> (for the code section) consistently fluctuates around 0.75. Not sure what to make of that.</span>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\">What I <i>do</i> know is that <code>binwalk -H</code> reports that both /bin/bash and the binary I'm looking at appear to have a \"high entropy\" section that extends for nearly the same number of KB (~5 for bash and ~6 for the binary I'm using). According to <code>readelf</code>, that starts at the tail end of <code>.gnu.hash</code> and the rest (most of it) is in <code>.dynsym</code>.</span>",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<span class=\"comment-copy\">A symbol table would make sense, given the stripes at regular intervals...</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming that this is indeed executable code with no data at all (please note that the .text section used to include things that nowadays go to .rodata), bytes FF and other Fx could also be parts of relative addresses for backward branches (loops).\nIf you see obvious striping, it suggests that the min. instruction size is likely greater than 1 byte, so Intel is probably out. Can you tell if striping is regular or has subpatterns? If the former, it is probably a RISC architecture (all instructions are 4 bytes long) like SPARC or MIPS, otherwise it is some kind of instruction set similar to PDP-11 (all instructions are of even length, but it varies). After you've narrowed the field, you'll have to do a word-based analysis, because in most architectures with word-based instruction format the opcodes aren't byte-aligned. </p>\n</div>",
            "votes": "1",
            "user": "Leo B.",
            "time": "Dec 10, 2016 at 19:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}