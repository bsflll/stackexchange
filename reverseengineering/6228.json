{
    "title": "How do the internals of a Windows update security patch work?",
    "link": "https://reverseengineering.stackexchange.com/questions/6228/how-do-the-internals-of-a-windows-update-security-patch-work",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Wasn't sure where to ask this on stack exchange, so vote to close if you think it is in the wrong place.</p>\n<p>I am analyzing a Windows security patch. Having never examined a windows security patch, and being unaware of their structure I am trying to figure it out for myself.</p>\n<p>In the patch I have (this week's I.E patch) I have these files:</p>\n<pre><code>_manifest.cix.xml &lt;- obviously a manifest for the patch. \nBinary files numbered 0 - 130 \nDozens of files with similar names to this: amd64_1d07faac344e137a0d122aad24eb4e6e_31bf3856ad364e35_11.2.9600.17280_none_eaadf6b3ac7d9c33.manifest &lt;- I am assuming that these are architecture specific changes. \npackage_1_for_kb2977629~31bf3856ad364e35~amd64~~11.2.1.0.cat &lt;- A catalog of some sort. Not sure how it's used by the update. \npackage_1_for_kb2977629~31bf3856ad364e35~amd64~~11.2.1.0.mum &lt;- more information about the update. \n</code></pre>\n<p><strong>My question is</strong>: Is there comprehensive documentation for how all of these parts work together, if not, how do all of these parts work together? </p>\n<p>I imagine, what has to happen is that some mechanism has to tell the update where in the binary to patch, and then one of those files numbered 0-130 is the code to overwrite. I'm sure there is a standard format so that I can interpret these files. </p>\n<p>For instance: </p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v3\" manifestVersion=\"1.0\"&gt;\n  &lt;assemblyIdentity name=\"1d07faac344e137a0d122aad24eb4e6e\" version=\"11.2.9600.17280\" processorArchitecture=\"amd64\" language=\"neutral\" buildType=\"release\" publicKeyToken=\"31bf3856ad364e35\" versionScope=\"nonSxS\" /&gt;\n  &lt;deployment /&gt;\n  &lt;dependency discoverable=\"false\"&gt;\n    &lt;dependentAssembly dependencyType=\"install\"&gt;\n      &lt;assemblyIdentity name=\"Microsoft-Windows-IE-MemoryAnalyzer\" version=\"11.2.9600.17280\" processorArchitecture=\"amd64\" language=\"neutral\" buildType=\"release\" publicKeyToken=\"31bf3856ad364e35\" versionScope=\"nonSxS\" /&gt;\n    &lt;/dependentAssembly&gt;\n  &lt;/dependency&gt;\n&lt;/assembly&gt;\n</code></pre>\n<p>Would seem to suggest that we are about to patch assembly 1d07faac344e137a0d122aad24eb4e6e which might be named \"Microsoft-Windows-IE-MemoryAnalyzer. That's just a guess! I don't see any reference in here to the code to patch. I imagine one way of doing that is to just read through these manifests in order, and apply the patches in the order the manifests are read. First manifest gets binary file 0 and so on. That seems janky, and I bet I'm wrong about that. </p>\n<p>Based on the size of the files themselves, I would imagine that they aren't rewriting the whole module, although they might be compressed. Without any reference I haven't a clue as to their structure. I imagine there would be snippets of code, and offsets for where to rewrite the DLLs/Exes in question. Of course I ran strings on the binaries, but didn't find anything. </p>\n<p>What I would most like to figure out through this is which particular functions are being patched in IE. </p>\n</div>",
    "votes": "13",
    "answers": 2,
    "views": "5k",
    "tags": [
        "windows",
        "patching",
        "binary"
    ],
    "user": "MrSynAckSter",
    "time": "Sep 12, 2014 at 14:33",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">regarding the cat files..  <a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff537872%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/windows/hardware/…</a> and <a href=\"http://msdn.microsoft.com/en-us/library/aa741204%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/aa741204%28v=vs.85%29.aspx</a></span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Windows security updates don't patch (edit) existing binaries on disk; they replace the full binaries on disk.</span>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<span class=\"comment-copy\">That helps a lot. So is there a way that I am missing to see which 0-130 of the binaries maps to which IE binary file? I suppose I could match them up by sizes.</span>",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">im not sure the sizes may help, microsoft are very fond of using lz compression in stuff like this</span>",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "<span class=\"comment-copy\">Good call. I'm sure there's a simple convention which file maps to which file.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just downloaded the KB2977629 patch file (IE11-Windows6.1-KB2977629-x64.MSU). It looks like the information about which file corresponds to what is inside the <code>_manifest_.cix.xml</code> file (there is a single, very long, line inside). You have for example:</p>\n<pre><code>&lt;File id=\"214\" name=\"amd64_microsoft-windows-s..-downlevel.binaries_31bf3856ad364e35_6.3.9600.17280_none_5f668c1aff756211\\msspellcheckingfacility.exe\" length=\"940032\" time=\"130528725776317394\" attr=\"32\"&gt; ... &lt;/File&gt;\n&lt;Delta&gt;\n  &lt;Source type=\"PA30\" name=\"35\"&gt; (...) &lt;/Source&gt;\n  &lt;Basis file=\"214\"/&gt;\n&lt;/Delta&gt;\n</code></pre>\n<p>35 seems to be the name of one of the files in the archive. These files begin with 4 bytes that read \"PA30\", so it looks like a specific format. I've found some reference to this patching system in a patent application: <a href=\"http://www.google.com/patents/US20070260653\" rel=\"noreferrer\">http://www.google.com/patents/US20070260653</a>.</p>\n<p>Actually, most Windows updates do not use this delta patching system, but rather contain the full versions of each file they are going to replace.</p>\n</div>",
            "votes": "6",
            "user": "Ale",
            "time": "Sep 19, 2014 at 21:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Refael Ackermann",
                    "text": "<span class=\"comment-copy\">A bit more information about this \"technology\" - <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=1562\" rel=\"nofollow noreferrer\">microsoft.com/en-us/download/details.aspx?id=1562</a></span>",
                    "time": null
                },
                {
                    "user": "Arioch",
                    "text": "<span class=\"comment-copy\">@RefaelAckermann link got 404ed</span>",
                    "time": null
                },
                {
                    "user": "Refael Ackermann",
                    "text": "<span class=\"comment-copy\"><a href=\"https://web.archive.org/web/20150801180457/http://www.microsoft.com/en-us/download/details.aspx?id=1562\" rel=\"nofollow noreferrer\">web.archive.org/web/20150801180457/http://www.microsoft.com/…</a> The title was \"Using Binary Delta Compression (BDC) Technology to Update Windows Operating Systems\" Seems like BDC was the precursor to RDC</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's an API: <a href=\"https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)</a></p>\n<p>The mspatcha.dll and mspatchc.dll, which implement it, are under SYSTEM32 as late as of Windows 10.</p>\n<p>Couldn't find the docs for the format, though.</p>\n<hr/>\n<p>Here's a fun fact: Microsoft Azure DevOps Server (formerly known as Team Foundation Server/TFS) uses the MSPatch format to store version controlled items. If you look at the <code>tbl_Content</code> table, you'll see some records where the <code>Content</code> field starts with the telling <code>PA31</code> signature.</p>\n<p>Now, TFS is all managed code. It could be that TFS taps into <code>mspatchX.dll</code> for resolving those records. Or alternatively, there might be a managed (read: easy to reverse) implementation of the PA31 decoding logic... Stay tuned.</p>\n<hr/>\n<p>UPD: TFS makes a P/Invoke call into <code>msdelta.dll</code>. Here is a managed API wrapper, reverse engineered out of TFS' code: <a href=\"https://gist.github.com/sevaa/a49457319946379b60e885f6b5a9f5ca\" rel=\"nofollow noreferrer\">https://gist.github.com/sevaa/a49457319946379b60e885f6b5a9f5ca</a> The debug symbols for msdelta.dll are out on the MS Symbol server. References to the source files can be seen at <a href=\"https://windows-internals.com/source/files.html\" rel=\"nofollow noreferrer\">https://windows-internals.com/source/files.html</a> under base/compress/msdelta.</p>\n</div>",
            "votes": "1",
            "user": "Seva Alekseyev",
            "time": "May 4, 2022 at 15:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}