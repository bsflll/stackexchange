{
    "title": "Batch rename functions knowing their prototypes in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/19132/batch-rename-functions-knowing-their-prototypes-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a long list of mappings from IDA function names (<code>sub_??????</code>) to known function prototypes. The prototype is complete, I mean it contains the return type, the name as in the code and the argument types and names. </p>\n<p>My question is, how can I batch rename and overwrite all the data about the functions with this prototype information using an IDAPython script?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "functions"
    ],
    "user": "JavierG",
    "time": "Aug 22, 2018 at 19:35",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">Sometimes IDA can't detect function parameters from stack (like __fastcall). So you have to determine the numbers of prameters.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA has the <a href=\"https://github.com/idapython/src/blob/29ec1ceba20cc5c9c7139300e93befb3a3d18b1b/python/idc.py#L5236\" rel=\"nofollow noreferrer\"><code>idc.SetType</code></a> method that would accept a function start offset and a function prototype string and will set that function's prototype, although it will not set the function's name.</p>\n<p>The <code>idc.SetType</code> function is actually a convenience function around <code>ida_typeinf.idc_parse_decl</code> and <code>ida_typeinf.apply_type</code>, through a couple of other methods defined in the <code>idc</code> module. If you wanna set both function name and prototype, you could use <code>idc.parse_decl</code> to parse the prototype and then call <code>idc.apply_type</code> and <code>idc.set_name</code> to set the prototype and name.</p>\n<p>Reading the code I linked to around <code>idc.SetType</code> really makes the API clear. </p>\n<p>An example code could look something like this:</p>\n<pre><code>prototype_details = idc.parse_decl(PROTOTYPE, idc.PT_SILENT)\nif prototype_details:\n    idc.set_name(FUNCTION_ADDRESS, prototype_details[0])\n    idc.apply_type(FUNCTION_ADDRESS, prototype_details)\n</code></pre>\n<p>Naturally, you'll need to replace <code>PROTOTYPE</code> and <code>FUNCTION_ADDRESS</code> with the function's prototype and address, as well as implement this inside a loop. I'll leave this an an exercise for the reader.</p>\n</div>",
            "votes": "3",
            "user": "NirIzr",
            "time": "Aug 22, 2018 at 19:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">This is probably not enough. All types used in function prototypes (structure pointers, for example) should be imported too, either with import header file or by creating corresponding structures, otherwise setting prototype will fail.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. Of course. I didn't address auxiliary structures because OP didn't mention any but you're obviously right.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>use <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.SetType\" rel=\"nofollow noreferrer\">idc.SetType</a> to <code>change type</code></p>\n<h4>Example</h4>\n<pre class=\"lang-py prettyprint-override\"><code>import idc\n\nfuncAddr = 0x1024D0000\nprint(\"funcAddr=0x%X\" % funcAddr)\noldFuncType = idc.get_type(funcAddr)\nprint(\"oldFuncType=%s\" % oldFuncType)\n\nnewFuncType = \"id objc_msgSend_arrayByAddingObjectsFromArray__1024D0000(id curObj, const char * arrayByAddingObjectsFromArray_, id someArray)\"\nprint(\"newFuncType=%s\" % newFuncType)\nsetTypeRet = idc.SetType(funcAddr, newFuncType)\nprint(\"setTypeRet=%s\" % setTypeRet)\nif setTypeRet == 1:\n  print(\"SetType OK [0x%X] %s -&gt; %s\" % (funcAddr, oldFuncType, newFuncType))\nelse:\n  print(\"! SetType failed [0x%X] %s -&gt; %s\" % (funcAddr, oldFuncType, newFuncType))\n</code></pre>\n<p>output:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>oldFuncType=id(void *, const char *, ...)\n\nsetTypeRet=True\nSetType OK [0x1024D0000] id(void *, const char *, ...) -&gt; id objc_msgSend_arrayByAddingObjectsFromArray__1024D0000(id curObj, const char * arrayByAddingObjectsFromArray_, id someArray)\n</code></pre>\n</div>",
            "votes": "0",
            "user": "crifan",
            "time": "Jan 2, 2024 at 3:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}