{
    "title": "What is the meaning of jmp dword ptr off_XXXXXXXX + 8 in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/30025/what-is-the-meaning-of-jmp-dword-ptr-off-xxxxxxxx-8-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the meaning of this kind of jmp instruction in x86 assembly in IDA?</p>\n<p><a href=\"https://i.sstatic.net/gBn0u.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/gBn0u.png\"/></a></p>\n<p>Does it mean that we should jump to the address <code>[6CA2E9B0] + 8</code> or <code>[6CA2E9B0+8]</code>?\nWhen I follow that off_XXX, I get to the memory region that looks like this:</p>\n<p><a href=\"https://i.sstatic.net/GrFrz.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/GrFrz.png\"/></a></p>\n<p>Is this some kind of a jump table? <code>loc_6C954360</code> is indeed pointed by the address <code>6CA2E9B0</code>, does it mean that the instruction in question jumps to the address pointed by <code>6CA2E9B0+8</code>? If that's the case, then I must've messed something up in the debugger as the computed address didn't seem to be the same as the one stored in memory.</p>\n<p>EDIT:\nI read about the <code>FF /5</code> jump which I believe is present here:\n<a href=\"https://i.sstatic.net/EtyhM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/EtyhM.png\"/></a></p>\n<p>It should load to <code>EIP</code> the far address stored in the memory location specified by the 4 bytes next to the <code>FF 25</code>. And it seems like it is how it works, as I managed to see that happening in the debugger. However, the address after <code>FF 25</code> is slightly modified when the library is loaded into a process, are those addresses somehow adjusted once the process starts using the library?\nAlso what is the point of this kind of jumps, why are functions defined in this way?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "995",
    "tags": [
        "ida",
        "assembly",
        "x86"
    ],
    "user": "Moteke",
    "time": "Feb 12, 2022 at 12:56",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">dereference the pointer add the displacement to the dereferenced value and jump to the resultant  normally a method in a class</span>",
            "time": null
        },
        {
            "user": "Moteke",
            "text": "<span class=\"comment-copy\">@blabb so in other words EIP = [6CA2E9B0] + 8 = 6C954360 + 8?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA displays +8 because the target address is in the middle of a data item (xmmword is 16 bytes).</p>\n<p>You should undefine the oversized item and create two separate qwords, the second one should be actual pointer used by the instruction.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 12, 2022 at 12:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Moteke",
                    "text": "<span class=\"comment-copy\">Thanks, it makes more sense now. Do you know though why the referenced function shown in IDA is different from the one actually being called when the library is loaded? It looks like those offsets were changed and now point at different functions.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Moteke sorry I donâ€™t know. Possibly something changed during debugging.</span>",
                    "time": null
                }
            ]
        }
    ]
}