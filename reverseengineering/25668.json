{
    "title": "GDBserver on Qemu not honoring \"follow-fork-mode child\"",
    "link": "https://reverseengineering.stackexchange.com/questions/25668/gdbserver-on-qemu-not-honoring-follow-fork-mode-child",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using <code>gdb-multiarch</code> version 9.1 on Ubuntu to connect to a <code>qemu-mipsel-static</code> version 4.2.0 running a MIPS application which daemonizes itself with <code>fork()</code>, and which is running the built-in <code>gdbserver</code>. Here is the relevant GDB output:</p>\n<pre><code>Breakpoint 5, 0x7f5bb874 in daemon () from ./lib/libc.so.0\n</code></pre>\n<p>The next instruction is <code>jalr</code> to <code>fork</code></p>\n<pre><code>(gdb) si\n0x7f5738e0 in fork () from ./lib/libc.so.0\n</code></pre>\n<p>Now we are in <code>fork()</code>, let's check the state of <code>follow-fork-mode</code></p>\n<pre><code>(gdb) show follow-fork-mode \nDebugger response to a program call of fork or vfork is \"child\".\n</code></pre>\n<p>Everything looks good, let's finish the function and check our return value</p>\n<pre><code>(gdb) finish\nRun till exit from #0  0x7f5738e0 in fork () from ./lib/libc.so.0\n0x7f5bb87c in daemon () from ./lib/libc.so.0\n(gdb) p $v0\n$7 = 119052\n(gdb) # what\n</code></pre>\n<p>The PID indicates we are still attached to the parent process</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "769",
    "tags": [
        "gdb",
        "mips",
        "qemu"
    ],
    "user": "user503997",
    "time": "Aug 13, 2020 at 15:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\" rel=\"nofollow noreferrer\">the docs</a>:</p>\n<blockquote>\n<p>On most systems, GDB has no special support for debugging programs\nwhich create additional processes using the fork function. When a\nprogram forks, GDB will continue to debug the parent process and the\nchild process will run unimpeded. If you have set a breakpoint in any\ncode which the child then executes, the child will get a SIGTRAP\nsignal which (unless it catches the signal) will cause it to\nterminate.</p>\n</blockquote>\n<blockquote>\n<p>On some systems, GDB provides support for debugging programs that\ncreate additional processes using the fork or vfork functions. On\nGNU/Linux platforms, this feature is supported with kernel version\n2.5.46 and later.</p>\n</blockquote>\n<p>Could it be that your kernel version is too low?</p>\n<p>You can also try <a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_30.html\" rel=\"nofollow noreferrer\"><code>catch fork/vfork/exec </code></a> commands.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 16, 2020 at 15:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user503997",
                    "text": "<span class=\"comment-copy\">Thank you for your reply. It wasn't the kernel version, as it was running on a recent Ubuntu release. Even Ubuntu 4.10 (Warty Warthog), the first Ubuntu released, used a newer kernel than 2.5.4.</span>",
                    "time": null
                }
            ]
        }
    ]
}