{
    "title": "ASM code hook/patching with trampoline function",
    "link": "https://reverseengineering.stackexchange.com/questions/17995/asm-code-hook-patching-with-trampoline-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am stuck on making (my little self-task for learning) that thing:\n<a href=\"https://i.sstatic.net/kzYU0.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/kzYU0.png\"/></a></p>\n<p>Basically it should be something like Themida or VMProtect (do mutation, virtualization, etc.), but in my case,\n<strong>i want to take ASM code between pointers, obfuscate it etc</strong>, and write it to some DLL. On original application, \nwe have a patched trampoline with generated by our \"disasm tool\" function... Hmm, any example how to make that? =)</p>\n<p>Maybe it is not a good idea of protection software code or something like that, i just do that for learning. I know how ASM pointers\nworks in theory. For example, i can do all of that manually with Olly, but how to do that programatically like VMProtect, Enigma or Themida\n\"compiler tools\" do this? Never tried to make a something like that by my self. And did not find any examples, because that is \"arcane\" level\nof programming, and also such things hard to find on opensource =(</p>\n<p>So to questions:</p>\n<p>1)How to search programmatically ASM pointer inside compiled application?</p>\n<p>2)How to \"cut\" &amp; disasm code between 2 ASM pointers programmatically?</p>\n<p>3)How to paste them back (after edit) programmatically?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "c++",
        "c",
        "assembly"
    ],
    "user": "Happy Day",
    "time": "Apr 16, 2018 at 13:28",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">It is difficult to understand this.</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">I don't understand the trampoline function. But I know little about hooking with Easyhook. Link: <a href=\"https://easyhook.github.io/\" rel=\"nofollow noreferrer\">easyhook.github.io</a></span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">check  rewolf  opensource virtualizer    <a href=\"https://github.com/rwfpl/rewolf-x86-virtualizer\" rel=\"nofollow noreferrer\">github.com/rwfpl/rewolf-x86-virtualizer</a></span>",
            "time": null
        },
        {
            "user": "Happy Day",
            "text": "<span class=\"comment-copy\">Ohh thanks, that's exactly what i need. Found, std::vector&lt;std::pair&lt;DWORD, DWORD&gt;&gt; scanForMarkers(BYTE *data, DWORD length) and other usefull things. ;)</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">@HappyDay: please post answers in the answer box, don't add them into the question body or comments. but make sure it's an actual answer and not just \"something that looks like it\".</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>1) If by pointer you mean \"pattern\" or \"watermark\" the first thing that comes into my mind is BlackMagic (read <a href=\"https://github.com/acidburn974/Blackmagic/blob/master/BlackMagic/BMPattern.cs\" rel=\"nofollow noreferrer\">FindPattern</a> function)</p>\n<p>2) </p>\n<ul>\n<li>A program is a file that have a certain structure (PE file format), so you have to read it as an array since all you want to do is replacing bytes withing a range</li>\n<li>after obtaining the Start offset and End offset (which are the address of the \"Begin\" and \"End\" respectively) you disassemble the bytes between them, you can use for example <a href=\"https://github.com/gdabah/distorm\" rel=\"nofollow noreferrer\">Distorm</a> or <a href=\"http://www.ollydbg.de/srcdescr.htm\" rel=\"nofollow noreferrer\">Olly disasm</a> (this one can assemble back your code)</li>\n<li>the original code should replaced by something like (don't forget to replace the remaining bytes)</li>\n</ul>\n<blockquote>\n<pre><code>push offset dllName    \ncall LoadLibraryA    ; load the dll\n\npush offset FunctionName     \npush eax  \ncall GetProcAddress   ; obtain the address of the moved function\n\ncall/jmp eax ; call or jump to the moved function\n</code></pre>\n</blockquote>\n<p>3) At this point the disassembled code should have been obfuscated/encrypted, and since it will be moved to another dll it's there (inside the dll) where it should be compiled back, you can either choose to assemble it manually (on memory) with (for example) Olly disasm (your program should manually generate a dll which is a lot of effort) or compile it (to disk) with (for example) MASM32</p>\n<p>Notes : </p>\n<ul>\n<li>you should check that addresses inside the moved function is not called/reference somewhere else</li>\n<li>in case of presence of relocation (i.e the program doesn't have fixed image base) the addresses referenced by the moved function should be updated at runtime (for example : patched by the decryption routine)</li>\n<li>You should learn more about PE structure since you'll have to deal a lot with it in your project.</li>\n<li>this are some hints and not the only way to do it</li>\n</ul>\n</div>",
            "votes": "3",
            "user": "COB RCE",
            "time": "Apr 23, 2018 at 19:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answer is LLVM. It allows to load the assembly and manipulate it. If you own the source code of the program, which you want to protect, it's even easier, because you'll be able to compile it via LLVM and have higher level of code manipulation. See <a href=\"http://llvm.org/docs/WritingAnLLVMPass.html\" rel=\"nofollow noreferrer\">LLVM pass</a> there's an example on modifying the binary code during the compilcation</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "May 24, 2018 at 14:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}