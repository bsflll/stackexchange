{
    "title": "Floating point in RE intermediate languages like vine il, bap il, and google/zynamics reil",
    "link": "https://reverseengineering.stackexchange.com/questions/5998/floating-point-in-re-intermediate-languages-like-vine-il-bap-il-and-google-zyn",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Are there any technical hurdles to implementing floating point support in re-oriented intermediate languages? I ask because none seem to support it, but give few reasons why. The only comment on the topic I've seen is from Sebastian Porst who in 2010 merely said</p>\n<blockquote>\n<p>REIL is primarily made to find security-relevant bugs in code. FPU code pretty much never plays a role in such code.</p>\n</blockquote>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "328",
    "tags": [
        "static-analysis"
    ],
    "user": "broadway",
    "time": "Jan 17, 2015 at 1:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Floating point support is possible.  I think there are two reasons why it's not common:</p>\n<ul>\n<li><p>Most applications of binary ILs don't work with floating point.  For example, most SMT solvers only have support for integer arithmetic operations.  Modeling behavior is not very useful if one cannot reason about it.</p></li>\n<li><p>There are not many mature libraries for arbitrary precision floating point code that can be readily pulled into these projects.</p></li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Ed McMan",
            "time": "Aug 1, 2014 at 22:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is an excellent recent work to translate floating point instructions to LLVM bitecode language, the project is called <a href=\"http://blog.trailofbits.com/2014/06/23/a-preview-of-mcsema/\" rel=\"nofollow\">McSema</a> and is managed by people at <a href=\"http://www.trailofbits.com/\" rel=\"nofollow\">TrailOfBits</a>.</p>\n<p>One of the developer promised to get it OpenSource once the code will get in a good shape.</p>\n<p><strong>EDIT</strong>: I just saw the answer from Ed McMan. I totally agree with him about the fact that the lack of tools handling this kind of problem makes it quite hard to integrate into binary program analysis framework. But, this is already a consequence of the problem, not a cause.</p>\n<p>In fact, in my humble opinion, what is making this problem extremely tedious is its own nature. You have to deal with a continuous problem (logic on floating point numbers) and transform it into a discrete one (propositional logic).</p>\n<p>The mix of these two models makes it very difficult to handle because a small difference in the input may end-up in a drastically different output (the bit-vector size may also have a big impact on the output). This kind of behavior is quite close to what you encounter in cryptographic hash functions, where a small modification of the input will result in a complete change of the output. </p>\n<p>And, this high variability of the output doesn't help tools to wrap all the behaviors into a meaningful logic formula that could be expressed in propositional logic along with the others.</p>\n<p>There is maybe some hope if SMT-solvers start to consider mixing usual <code>QF_AUFBV</code> logic (often used for program simulation) and floating point logic (<code>QF_LRA</code> and <code>QF_NRA</code>).</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Aug 2, 2014 at 8:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">Yeah, I had forgotten about McSema even though I had seen the <a href=\"http://recon.cx/2014/slides/McSema.pdf\" rel=\"nofollow noreferrer\" title=\"McSema Slides\">slides</a> before.</span>",
                    "time": null
                },
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">Apparently mcsema was opensourced today. <a href=\"https://github.com/trailofbits/mcsema\" rel=\"nofollow noreferrer\">github.com/trailofbits/mcsema</a></span>",
                    "time": null
                },
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">PANDA also supports lifting FPU operations to LLVM; it does so by using CLANG to compile the QEMU softfloat helper functions to LLVM bitcode, then linking that bitcode into execution at runtime.</span>",
                    "time": null
                }
            ]
        }
    ]
}