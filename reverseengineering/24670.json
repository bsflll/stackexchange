{
    "title": "Appending strings mid function",
    "link": "https://reverseengineering.stackexchange.com/questions/24670/appending-strings-mid-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using Ida Freeware. The string should not be changed in <code>.data</code> section. Basically I need to append a few letters to a string mid function. Currently it looks like this:\n<img alt=\"Instructions\" src=\"https://i.sstatic.net/BgjLi.png\"/></p>\n<p>First I would like to test my theory. How can I change the string in memory for just this function call?</p>\n<p>Later on:\nI generated a simple asm from this code</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;string.h&gt;\n\nchar string[] = \"filterscripts/%s\";\n\nvoid fun(char filename[])\n{\n  char result[128];\n  strncpy(result, string, sizeof result);\n  strncat(result, \".amx\", sizeof result);\n}\n\nint main() {\n  fun(\"Shorter\");\n}\n</code></pre>\n<p><code>i686-w64-mingw32-gcc -S -Wall main.c</code></p>\n<p>Resulting in</p>\n<pre><code>    .file   \"main.c\"\n    .globl  _string\n    .data\n    .align 4\n_string:\n    .ascii \"filterscripts/%s\\0\"\n    .text\n    .globl  _fun\n    .def    _fun;   .scl    2;  .type   32; .endef\n_fun:\n    pushl   %ebp\n    movl    %esp, %ebp\n    pushl   %edi\n    subl    $148, %esp\n    movl    $128, 8(%esp)\n    movl    $_string, 4(%esp)\n    leal    -136(%ebp), %eax\n    movl    %eax, (%esp)\n    call    _strncpy\n    leal    -136(%ebp), %eax\n    movl    $-1, %ecx\n    movl    %eax, %edx\n    movl    $0, %eax\n    movl    %edx, %edi\n    repnz scasb\n    movl    %ecx, %eax\n    notl    %eax\n    leal    -1(%eax), %edx\n    leal    -136(%ebp), %eax\n    addl    %edx, %eax\n    movl    $2020434222, (%eax)\n    movb    $0, 4(%eax)\n    nop\n    addl    $148, %esp\n    popl    %edi\n    popl    %ebp\n    ret\n    .def    ___main;    .scl    2;  .type   32; .endef\n    .section .rdata,\"dr\"\nLC0:\n    .ascii \"Shorter\\0\"\n    .text\n    .globl  _main\n    .def    _main;  .scl    2;  .type   32; .endef\n_main:\n    pushl   %ebp\n    movl    %esp, %ebp\n    andl    $-16, %esp\n    subl    $16, %esp\n    call    ___main\n    movl    $LC0, (%esp)\n    call    _fun\n    movl    $0, %eax\n    leave\n    ret\n    .ident  \"GCC: (GNU) 5.3.1 20160211\"\n    .def    _strncpy;   .scl    2;  .type   32; .endef\n</code></pre>\n<p>I could identify either strncpy or snprintf function calls, put the \".amx\" in the <code>.data</code> section somewhere, and use a trampoline to put parts of the above code to do it, but are there more streamlined and acknowledged ways to do it?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "51",
    "tags": [
        "ida"
    ],
    "user": "Misiur",
    "time": "Apr 10, 2020 at 12:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not sure I understood the problem correctly but one option could be to inject the final, changed string somewhere in memory and patch the <code>push</code> instruction to use the new address.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 10, 2020 at 12:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}