{
    "title": "Decoding the UPX ELF header file",
    "link": "https://reverseengineering.stackexchange.com/questions/3335/decoding-the-upx-elf-header-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Still on my way to understand how to prevent the usage of the <code>-d</code> (decompress) option of UPX (see this <a href=\"https://reverseengineering.stackexchange.com/questions/3323/how-to-prevent-upx-d-on-an-upx-packed-executable\">question</a>), I try to identify the header file of UPX in ELF executable files.</p>\n<p>Looking at the code, all the sources seems to be in the files <code>lx_elf.h</code> and <code>lx_elf.cpp</code> (stands for <em>Linux Elf</em>). I tried to follow the code but I got lost in it...</p>\n<p>I also did take a look at the beginning of an UPX compressed executable file (amd64), visualized in 8-bytes per line mode for more clarity (and thanks to <a href=\"http://code.google.com/p/corkami/wiki/ELF101\" rel=\"nofollow noreferrer\">Corkami ELF-101</a>):</p>\n<pre><code>00000000: 7f45 4c46 0201 0103  .ELF....\n00000008: 0000 0000 0000 0000  ........\n00000010: 0200 3e00 0100 0000  ..&gt;.....\n00000018: 0831 4200 0000 0000  .1B.....    ELF HEADER\n00000020: 4000 0000 0000 0000  @.......\n00000028: 0000 0000 0000 0000  ........\n00000030: 0000 0000 4000 3800  <a class=\"__cf_email__\" data-cfemail=\"1937373737593721\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a>.\n00000038: 0200 4000 0000 0000  ..@.....\n\n00000040: 0100 0000 0500 0000  ........\n00000048: 0000 0000 0000 0000  ........\n00000050: 0000 4000 0000 0000  ..@.....\n00000058: 0000 4000 0000 0000  ..@.....    PROGRAM HEADER TABLE\n00000060: f438 0200 0000 0000  .8......\n00000068: f438 0200 0000 0000  .8......\n00000070: 0000 2000 0000 0000  .. .....\n00000078: 0100 0000 0600 0000  ........\n\n00000080: 487d 0500 0000 0000  H}......\n00000088: 487d 6500 0000 0000  H}e.....\n00000090: 487d 6500 0000 0000  H}e.....\n00000098: 0000 0000 0000 0000  ........\n000000a0: 0000 0000 0000 0000  ........    UPX HEADER (???)\n000000a8: 0000 2000 0000 0000  .. .....\n000000b0: a298 b634 5550 5821  ...4UPX!\n000000b8: f407 0d16 0000 0000  ........\n000000c0: 1676 0500 1676 0500  .v...v..\n000000c8: 0002 0000 bd00 0000  ........\n000000d0: 0200 0000 fbfb 21ff  ......!.\n\n000000d8: 7f45 4c46 0201 0100  .ELF....\n000000e0: 0200 3e00 0d70 2840  ..&gt;..p(@\n000000e8: 0f1b f26d 1605 00e8  ...m....   ELF HEADER (again)\n000000f0: 6d05 0013 01eb be7b  m......{\n000000f8: 3800 0805 1c00 1b00  8.......\n00000100: 060f 0527 9b90 27ec  ...'..'.\n00000108: 4000 4007 c001 0008  @.@.....\n....8&lt;....\n</code></pre>\n<p>My guess is that the second ELF header (always located at an offset of <code>0xd8</code>) is the header of the compressed executable. And indeed, when looking at the original ELF header of the executable (before applying <code>upx</code>) we find:</p>\n<pre><code>00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............\n00000010: 0200 3e00 0100 0000 7028 4000 0000 0000  ..&gt;.....p(@.....\n00000020: 4000 0000 0000 0000 e86d 0500 0000 0000  @........m......\n00000030: 0000 0000 4000 3800 0800 4000 1c00 1b00  <a class=\"__cf_email__\" data-cfemail=\"e6c8c8c8c8a6c8de\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a>...@.....\n00000040: 0600 0000 0500 0000 4000 0000 0000 0000  ........@.......\n00000050: 4000 4000 0000 0000 4000 4000 0000 0000  @.@.....@.@.....\n00000060: c001 0000 0000 0000 c001 0000 0000 0000  ................\n00000070: 0800 0000 0000 0000 0300 0000 0400 0000  ................\n00000080: 0002 0000 0000 0000 0002 4000 0000 0000  ..........@.....\n</code></pre>\n<p>A few fields have been omitted in the compressed version but the header is mainly preserved. So, lets assume this is just a short version of the original ELF header.</p>\n<p>But, what I would like to understand are the fields of the first header:</p>\n<pre><code>00000080: 487d 0500 0000 0000  H}......\n00000088: 487d 6500 0000 0000  H}e.....\n00000090: 487d 6500 0000 0000  H}e.....\n00000098: 0000 0000 0000 0000  ........\n000000a0: 0000 0000 0000 0000  ........    UPX HEADER (???)\n000000a8: 0000 2000 0000 0000  .. .....\n000000b0: a298 b634 5550 5821  ...4UPX!\n000000b8: f407 0d16 0000 0000  ........\n000000c0: 1676 0500 1676 0500  .v...v..\n000000c8: 0002 0000 bd00 0000  ........\n000000d0: 0200 0000 fbfb 21ff  ......!.\n</code></pre>\n<p>So, my question is about discovering the location and the meaning of the fields of the UPX header. If somebody knows about UPX internals any hint would be appreciated.</p>\n</div>",
    "votes": "5",
    "answers": 2,
    "views": "16k",
    "tags": [
        "elf",
        "packers",
        "upx"
    ],
    "user": "perror",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Check out <code>src/stub/src/include/linux.h</code> (search for <code>UPX_MAGIC_LE32</code>) and <code>header.S</code> in the same directory. Don't have time to investigate beyond that, but if I was you I'd attach GDB and step through the disassembly line by line.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Thanks for the hint, I was really lost in this code ! I will take a deeper look (and take the time to write down a proper answer if nobody dare to do it before me ;-)).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's very easy to prevent the UPX tool to unpack an UPX compressed file. If you take a look to the source code you will see that it checks for the magic string <code>UPX_MAGIC_LE32</code> in <code>p_lx_interp.cpp</code>. So, I simply changed all matches of the string (in binary chunks) \"<code>UPX!</code>\" to \"<code>AAA!</code>\". I copied <code>/bin/ls</code> (ELF64) to another folder and packed with UPX. Then I edited it like this:</p>\n<pre>\n$ pyew ls\nELF Information\n(...)\n[0x00000000]&gt; /s UPX # Search for the string UPX\nHINT[0x000000b4]: UPX!........p...p...8.............!..ELF......&gt;<a class=\"__cf_email__\" data-cfemail=\"e7c9c9c9a2a7c9c982c9c9c9c997\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a>\nHINT[0x0000abcc]: UPX!.........S...USQRH..VH..H..1.1.H....P.....t.....H.......\nHINT[0x0000ad3b]: UPX executable packer http://upx.sf.net $..$Id: UPX 3.07 Cop\nHINT[0x0000ad6b]: UPX 3.07 Copyright (C) 1996-2010 the UPX Team. All Rights Re\nHINT[0x0000ad90]: UPX Team. All Rights Reserved. $....^j._j.X..j._j....N...p...I.......\n[0x00000000]&gt; s 0xb4 # Seek to the specified offset in the file\n[0x000000b4:0x000000b4]&gt; edit # Open the file for editing\n[0x000000b4:0x000000b4]&gt; wx 414141 # Patch in hexadecimal\n[0x000000b4:0x000000b4]&gt; s 0xabcc\n[0x0000abcc:0x0000abcc]&gt; wx 414141\n[0x0000abcc:0x0000abcc]&gt; s 0xafe7\n[0x0000afe7:0x0000afe7]&gt; wx 414141\n[0x0000afe7:0x0000afe7]&gt; s 0xb3ac\n[0x0000b3ac:0x0000b3ac]&gt; wx 414141\n[0x0000b3ac:0x0000b3ac]&gt; q # And quit\n$ ./ls\n(...lots of files...)\n$ upx -d ./ls\n                       Ultimate Packer for eXecutables\n                          Copyright (C) 1996 - 2010\nUPX 3.07        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Sep 08th 2010\n        File size         Ratio      Format      Name\n   --------------------   ------   -----------   -----------\nupx: ls: NotPackedException: not packed by UPX\n\nUnpacked 0 files.\n</pre>\n<p>That's all. Anyway, remember that you're only preventing this tool to unpack UPX compressed files. UPX is a compressor that anyone with basic knowledge about packers can uncompress with little to no effort.</p>\n</div>",
            "votes": "12",
            "user": "perror",
            "time": "Feb 11, 2014 at 10:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I am just surprised that it is so simple... In fact, your answer does not totally match with the question but it answer totally my overall goal. So, thanks a lot !</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">this answer exactly echoes what i posted to your old question simply changing the STRING UPX to XPX prevents upx -d from working</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">And funnily enough, he did exactly what we suggested the OP do: read the source code.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://reverseengineering.stackexchange.com/a/3324/1562\">As answered in response to your previous question</a>, UPX is open-source, so you can read the commented code to understand the headers: <a href=\"http://upx.sourceforge.net/download/upx-3.91-src.tar.bz2\" rel=\"nofollow noreferrer\">http://upx.sourceforge.net/download/upx-3.91-src.tar.bz2</a></p>\n</div>",
            "votes": "-3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">First, your comment is not an answer. And, second, previous answer didn't give any practical way to achieve this because the proof of concept of Ange was done for the PE format of UPX, I'm now asking for ELF format.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">My answer is that you should look at the documentation in the ELF-specific UPX code :)</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">I'm with Jason on this: it seems simple, all you have to do is read the decompression code (ELF-specific) and find a way to break it. What better place to start than the source code?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@fileoffset: And I am with perror. See, the header files even get mentioned in the question. It's not like the author didn't do his homework. Jason's comment doesn't answer the question, it tells the author to go find the answer in a <b>heap</b> of (yes, commented) code. I value Jason as a member of the RCE community and I did before RE.SE even existed. But I hope this does not become the standard of answers on here for the future. And yes, the downvote is from me, but I figured from the debate and Jason's own comments that it might make sense to elaborate <i>why</i> I downvoted.</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">To be fair, this is a reverse engineering forum. This question doesn't even require reverse engineering, just reading source code and some coding and testing. You don't need to reverse engineer open source software :)</span>",
                    "time": null
                }
            ]
        }
    ]
}