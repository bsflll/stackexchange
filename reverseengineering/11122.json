{
    "title": "Follow steps in dissassembly after application start",
    "link": "https://reverseengineering.stackexchange.com/questions/11122/follow-steps-in-dissassembly-after-application-start",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to reverse engineering so this seems like a very basic issue, and still I was not able to find an answer to it myself yet. Hopefully someone can point me in the right direction. </p>\n<p>I am on Windows, I disassembled an exe file using \"PE Explorer\". For now, my process was to somehow, mostly by trial and error, identify the machine code steps I want to change in the dissasembly, then make the necessary change by opening the same exe in a hex editor, finding the same instruction and changing it there.</p>\n<p>(Side note here: This two step process is quite inefficient. Is there a program you can recommend where I can combine both steps in one go, or at least side by side?) </p>\n<p>While this has worked for me so far, I believe there must be a better way than doing this by trial and error and manually trying to identify the functions in the machine code. Is there? Particularly, is there a way to run a program (exe) and in parallel follow the steps in the dissasembly (ideally slowed down..)? </p>\n<p>Thank you.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "181",
    "tags": [
        "disassembly",
        "windows",
        "debugging"
    ],
    "user": "vic",
    "time": "Oct 16, 2015 at 10:44",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">Use a debugger like <i><a href=\"http://www.ollydbg.de\" rel=\"nofollow noreferrer\">OllyDbg</a></i> which can patch executables.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">cdb -c \"bp $exentry;g\" &lt;yourexe&gt; or windbg -Q -c \"bp $exentry;g\" &lt;your exe\"  will break on WinMainCrt . etc etc (the Address of Entry point in PeHeader)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Particularly, is there a way to run a program (exe) and in parallel\n  follow the steps in the dissasembly (ideally slowed down..)?</p>\n</blockquote>\n<p>Yes, the type of tool you're describing is called a \"debugger\".</p>\n<p>Some popular debuggers for Windows are:</p>\n<ul>\n<li><a href=\"http://www.ollydbg.de/version2.html\" rel=\"nofollow\">OllyDbg</a></li>\n<li><a href=\"https://www.hex-rays.com/products/ida/index.shtml\" rel=\"nofollow\">IDA Pro</a>'s debugger</li>\n<li><a href=\"http://x64dbg.com/\" rel=\"nofollow\">x64dbg</a></li>\n</ul>\n<p>There are <a href=\"http://www.woodmann.com/collaborative/tools/index.php/Category:Debuggers\" rel=\"nofollow\">plenty of others</a>, but these are some of the most user-friendly.</p>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Oct 16, 2015 at 14:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">Thanks Jason. Will one of those allow me to make direct changes in the machine code and save back to the same exe? Also, which is your personal favorite?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">OllyDbg v2.01 allows it. You can use an extra plugin for IDA Pro to allow it. Not sure about x64dbg since I so rarely use it. As for my personal favorite, it depends on the requirements. For user-mode x86 debugging on Windows, I use OllyDbg. For user-mode x64 debugging on Windows, I use x64dbg. For kernel-mode debugging on Windows and for user-mode and kernel-mode debugging on non-Windows platforms, I use IDA Pro's debugger.</span>",
                    "time": null
                }
            ]
        }
    ]
}