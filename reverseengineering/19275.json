{
    "title": "XMM register instructions and their c equivalents",
    "link": "https://reverseengineering.stackexchange.com/questions/19275/xmm-register-instructions-and-their-c-equivalents",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to convert some x86 assembly back into C++, and I cannot figure out how this set of instructions was originally written.</p>\n<pre><code>movd xmm0,eax ; byte read from device '0x04'\ncvtdq2pd xmm0,xmm0 ; convert packed to double?\nshr eax,0x1F ; highest bit\naddsd xmm0,qword ptr ds:[eax*8+0x4F6CC0] ; global [0, 4294967296] if I read it right\ncvtpd2ps xmm0,xmm0 ; double to packed?\nmovss dword ptr ds:[ebx+0x34],xmm0 ; store the result\n</code></pre>\n<p>I've tried various forms of casting <code>float</code> and <code>double</code> to other data types on <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">Compiler Explorer</a> but I cannot find anything that reproduces the <code>cvtdq2pd</code> and <code>cvtpd2ps</code> instructions.</p>\n<p>What would the above code look like in c/c++ and what is the resulting data type?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "x86",
        "float"
    ],
    "user": "Twifty",
    "time": "Sep 6, 2018 at 22:18",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">I'd guess the first four lines are loading an unsigned 32-bit value into a double: if cvtdq2pd treats the input as signed then you'd need to add 1&lt;&lt;32 to correct the output if the top bit of the input is set.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You likely won't get an exact reproduction because <code>cvtdq2pd</code> takes the lower 64 bits of the second operand but since we're limited to 32 bits because we're using <code>eax</code> here, there are probably better(?) instructions to use.</p>\n<p><code>cvtsi2sd xmm0, eax</code></p>\n<p>will do the same thing as</p>\n<p><code>movd xmm0,eax</code></p>\n<p><code>cvtdq2pd xmm0,xmm0</code></p>\n<p>See here <a href=\"https://www.felixcloutier.com/x86/CVTDQ2PD.html\" rel=\"noreferrer\">https://www.felixcloutier.com/x86/CVTDQ2PD.html</a> &amp; <a href=\"https://www.felixcloutier.com/x86/CVTSI2SD.html\" rel=\"noreferrer\">https://www.felixcloutier.com/x86/CVTSI2SD.html</a></p>\n<p>So really what it's doing is converting a 32 bit <strong>signed</strong> integer value into a double precision floating point.</p>\n<hr/>\n<p>Onto your actual question:</p>\n<p><code>cvtpd2ps xmm0,xmm0 ; double to packed?</code></p>\n<blockquote>\n<p>CVTPD2PS xmm1, xmm2/m128</p>\n<p>Convert two packed double-precision floating-point values in xmm2/mem to two single-precision floating-point values in xmm1.</p>\n</blockquote>\n<p>This will pack the two double precision floats at <code>xmm0[0:63]</code> &amp; <code>xmm0[64:127]</code> into the lower 64 bits of <code>xmm0</code>, converting them from double to single precision floating point values (<code>xmm0[0:31]</code> &amp; <code>xmm0[32:63]</code>).</p>\n<p>Ref: <a href=\"https://www.felixcloutier.com/x86/CVTPD2PS.html\" rel=\"noreferrer\">https://www.felixcloutier.com/x86/CVTPD2PS.html</a></p>\n<p>So if the lower 64 bits of <code>xmm0</code> represented a <code>double</code>, it's now been converted to a 32 bit float, which now sits in the lower 32 bits of <code>xmm0</code>.</p>\n<p><code>movss dword ptr ds:[ebx+0x34],xmm0</code></p>\n<blockquote>\n<p>MOVSS xmm2/m32, xmm1</p>\n<p>Move scalar single-precision floating-point value from xmm1 register to xmm2/m32.</p>\n</blockquote>\n<p>Now stores the 4 byte result from <code>xmm0[0:31]</code> into <code>[ebx+0x34]</code>, which we know is a single precision <code>float</code> from the result of the <code>cvtpd2ps</code> operation.</p>\n<p>So the result of this operation is a 32 bit <code>float</code>.</p>\n<p>Ref: <a href=\"https://www.felixcloutier.com/x86/MOVSS.html\" rel=\"noreferrer\">https://www.felixcloutier.com/x86/MOVSS.html</a></p>\n<hr/>\n<p>This code here should be a reasonable approximation. <a href=\"https://gcc.godbolt.org/z/0mi2_9\" rel=\"noreferrer\">In Godbolt</a> it gives me similar assembly to what you have.</p>\n<pre><code>double* d_arr = (double*)0x4F6CC0;\n\nint main() {\n\n    int in = 4;\n    int signbit = ((unsigned int)in &gt;&gt; 31);\n    float result = *(double*)(d_arr + signbit) + in;\n    return 0;\n}\n</code></pre>\n<hr/>\n<p>Conclusion:</p>\n<p><code>cvtdq2pd</code> &amp; <code>cvtpd2ps</code> are too powerful for what's actually being calculated here. Unless I'm reading this totally wrong, the upper 64 bits of <code>xmm0</code> are never relevant to the result.</p>\n<p>Disclaimer:</p>\n<p>I've never used floating point assembly before. I just looked up the docs now. I could be missing something.</p>\n</div>",
            "votes": "9",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}