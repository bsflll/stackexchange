{
    "title": "Figure out method name with _dl_runtime_resolve_xsavec",
    "link": "https://reverseengineering.stackexchange.com/questions/29901/figure-out-method-name-with-dl-runtime-resolve-xsavec",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a packed Linux shared library that decrypts function stub with INIT_ARRAY.</p>\n<p>When it's decrypted I'm unable to determine the method name. All method calls are redirected with relocation table. Something similar to this:</p>\n<pre><code>push 34h\njmp  _dl_runtime_resolve_xsavec\n</code></pre>\n<p>How can I figure out the real address it's calling?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "670",
    "tags": [
        "elf"
    ],
    "user": "daisy",
    "time": "Jan 20, 2022 at 10:50",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>_dl_runtime_resolve</code> looks like a typical name for the dynamic symbols lookup function in the dynamic loader (ld.so). The argument is usually a reference to the symbol being resolved in the dynamic symbol table. It can be either an index, or a raw offset (index multiplied by symbol entry size).</p>\n<p>In “normal” binaries the dynamic symbols reside in the <code>.dynsym</code> section, but it is not actually enforced by the loader. It actually uses the DT_DYNSYM/DT_STRTAB entries from the dynamic table (PT_DYNAMIC segment type). Since your binary is packed, it could be obfuscated even further and use the pointer to the dynamic table from the first entry of the GOT.</p>\n<p>If you can debug the binary, it may be easier to step through the resolver code and see how it decides which symbol to resolve than trying to deduce it statically.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 22, 2022 at 14:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}