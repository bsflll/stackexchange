{
    "title": "Call instruction - preceding ?@_ in references?",
    "link": "https://reverseengineering.stackexchange.com/questions/13351/call-instruction-preceding-in-references",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Seems to be a question of no importance, but I'm just curious: Is there a deeper meaning of the preceeding (single/double) <code>?</code>-marks, <code>@</code>-signs or <code>__</code> underscores in these different <code>call</code> instructions?</p>\n<pre><code>call ??2@YAPAXI@Z\ncall ??0CAdviseObject@CBLObject@@QAE@PAUIDispatch@@PAVCBLInstance@@@Z\ncall ?StartAutoReconnect@CBLObject@@IAEXIH@Z\ncall @__security_check_cookie@4\ncall __SEH_epilog\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "470",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "call"
    ],
    "user": "knx",
    "time": "Aug 24, 2016 at 14:48",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The leading <code>?</code> identifies a C++ name mangled symbol. Two <code>??</code> signify operators, constructors, destructors, constant strings, and various compiler generator functions. For example <code>??0</code> is a constructor. <a href=\"http://www.geoffchappell.com/studies/msvc/language/decoration/index.htm\" rel=\"nofollow\">This site</a> has a good breakdown of the mangling pieces used by MSVC.</p>\n<p>A leading underscore <code>_</code> can either be due to the calling convention or due to the CRT/compiler identification standard. They will prefix all of their symbols with <a href=\"https://msdn.microsoft.com/en-us/library/2e6a4at9.aspx\" rel=\"nofollow\">two leading underscores</a> <code>__</code> as a way to help prevent name collisions:</p>\n<blockquote>\n<p>In Microsoft C++, identifiers with two leading underscores are\n  reserved for compiler implementations.</p>\n</blockquote>\n</div>",
            "votes": "3",
            "user": "josh poley",
            "time": "Aug 24, 2016 at 16:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These are so-called \"mangled\" or \"decorated\" names. You can use undname utility from Visual Stduio to demangle them:</p>\n<pre><code>void * __cdecl operator new(unsigned int)\npublic: __thiscall CBLObject::CAdviseObject::CAdviseObject(struct IDispatch *,cl\nass CBLInstance *)\nprotected: void __thiscall CBLObject::StartAutoReconnect(unsigned int,int)\n</code></pre>\n<p>For more info: <a href=\"https://en.wikipedia.org/wiki/Name_mangling\" rel=\"nofollow\">Wikipedia</a>, <a href=\"https://msdn.microsoft.com/en-us/library/deaxefa7.aspx\" rel=\"nofollow\">MSDN</a>.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 24, 2016 at 15:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}