{
    "title": "Tracing int 0x80 instructions using PIN",
    "link": "https://reverseengineering.stackexchange.com/questions/6144/tracing-int-0x80-instructions-using-pin",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote this small pintool that tries to record the number of <code>int 0x80</code> instructions executed. I did this roughly as follows :-</p>\n<p><code>xed_iclass_enum_t iclass = static_cast&lt;xed_iclass_enum_t&gt;(INS_Opcode(ins));</code></p>\n<p>I then compare iclass against XED_ICLASS_INT and print out the EIP if found. I'm doing this on a statically compiled test binary that :-</p>\n<pre><code>1. Prints hello world\n2. Makes a call to mprotect\n</code></pre>\n<p>However, the number of <code>int 0x80</code> instructions encountered is just one. Is there something obvious I'm doing wrong? I tried using XED_ICLASS_SYSCALL too but that did not help.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "727",
    "tags": [
        "instrumentation"
    ],
    "user": null,
    "time": "Aug 31, 2014 at 15:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>PIN_AddSyscallEntryFunction</h1>\n<p>Why not just use <code>PIN_AddSyscallEntryFunction</code>?  This is an ABI-agnostic way of doing things, that lets you use <code>PIN_GetSyscallArgument</code> and related functions rather than manually inspecting the stack and register context.</p>\n<h1>INS_IsInterrupt</h1>\n<p>You could also use <code>INS_IsInterrupt</code> at instrumentation time to gather the information at analysis time.  Note that this won't catch any systemm calls made via the <code>syscall</code> or <code>sysenter</code> instructions.</p>\n<h1>Examples</h1>\n<p>As a simple example, if you look at the file <a href=\"https://github.com/JonathanSalwan/stuffz/blob/master/binary_analysis_with_ins_counts/inscount0.cpp#L48\" rel=\"nofollow\"><code>inscount0.cpp</code></a> that comes with Pin, if you add the following check, you'll only instrument syscalls.</p>\n<h3>INS_IsInterrupt</h3>\n<p>In <code>inscount0.cpp</code>, change the routines as shown below.  The module will now count the number of <code>int</code> instructions executed, rather than the total number of instructions executed.</p>\n<pre><code>VOID Instruction(INS ins, VOID *v)\n{\n    if(INS_IsSyscall(ins))\n    {\n        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);\n    }\n}\n</code></pre>\n<p>Now all syscall instructions will be counted.  You can use the standard <code>INS_InsertCall</code> arguments to inspect the stack or register context.</p>\n<h3>PIN_AddSyscallEntryFunction</h3>\n<p>Add this function before <code>main</code></p>\n<pre><code>void OnSyscall(THREADID threadIndex, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v)\n{\n    printf(\"Made syscall #%i\\n\", PIN_GetSyscallNumber(ctxt, std));\n}\n</code></pre>\n<p>and add this line to <code>main</code> before <code>PIN_StartProgram</code>.</p>\n<pre><code>PIN_AddSyscallEntryFunction(OnSyscall, 0);\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Aug 31, 2014 at 17:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}