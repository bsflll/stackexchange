{
    "title": "Unknown parameters in custom signal handler on Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/20453/unknown-parameters-in-custom-signal-handler-on-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>   0x0000000008001946:  mov    0xa8(%rdx),%rax\n   0x000000000800194d:  lea    0x28(%rdx),%rsi\n   0x0000000008001951:  lea    0x2(%rax),%rdi\n   0x0000000008001955:  add    $0xe,%rax\n   0x0000000008001959:  mov    %rax,0xa8(%rdx)\n   0x0000000008001960:  jmpq   0x8001ee0\n</code></pre>\n<p>Above is the <em>full</em> disassembly of a signal handler which is customarily set by the program which I'm looking into, i.e., the program registers the signal handler and immediately invokes it by raising a <code>SIGILL</code> using the opcode <code>ud2</code>.</p>\n<p>The signal handler is registered here:</p>\n<pre><code>   0x8001965:   push   %rbx\n   0x8001966:   xor    %eax,%eax\n   0x8001968:   mov    $0x26,%ecx\n   0x800196d:   sub    $0xa0,%rsp\n   0x8001974:   lea    0x8(%rsp),%rdi\n   0x8001979:   rep stos %eax,%es:(%rdi)\n   0x800197b:   lea    -0x3c(%rip),%rax        # 0x8001946\n   0x8001982:   lea    0x10(%rsp),%rdi\n   0x8001987:   movl   $0x8000004,0x90(%rsp)\n   0x8001992:   mov    %rax,0x8(%rsp)\n   0x8001997:   callq  0x8000f60 &lt;sigfillset@plt&gt;\n   0x800199c:   xor    %edx,%edx\n   0x800199e:   test   %eax,%eax\n   0x80019a0:   jne    0x80019bb\n   0x80019a2:   lea    0x8(%rsp),%rbx\n   0x80019a7:   xor    %edx,%edx\n   0x80019a9:   mov    $0x4,%edi\n   0x80019ae:   mov    %rbx,%rsi\n   0x80019b1:   callq  0x8000f90 &lt;sigaction@plt&gt;\n</code></pre>\n<p>Where <code>0x8001946</code> is the address of the handler, as disassembled prior to that in the first code-block.</p>\n<p>My question is regarding the first instruction of the signal handler which appears to make no sense at all, and I can't debug it since I can't put a breakpoint on it:</p>\n<pre><code>0x0000000008001946:  mov    0xa8(%rdx),%rax\n</code></pre>\n<p><code>%rdx</code> is defined by the ABI as the third parameter passed to a function, and as defined by <code>sigaction</code> the third argument of <code>sa_sigaction</code> is a <code>void *</code> (a casted <code>ucontext_t</code> structure) but there is no <code>0xa8</code>th index into the definition of a <code>struct ucontext_t</code>, which leads me to believe it's something else.</p>\n<p>I thought it might be an <code>%rdx</code> set before the <code>ud2</code> instruction is called:</p>\n<pre><code>   0x0000000008000fde:  test   %al,%al\n   0x0000000008000fe0:  mov    $0x2,%edx\n   0x0000000008000fe5:  je     0x8001028\n   0x0000000008000fe7:  movslq %ebx,%rdi\n   0x0000000008000fea:  mov    %rbp,%rsi\n   0x0000000008000fed:  callq  0x8001190\n</code></pre>\n<p>But prior to the call to <code>0x80001190</code> (the bug), <code>%rdx</code> only contains <code>$0x2</code>. So I'm even more confused.</p>\n<p>Could anyone shed some light on what <code>%rdx</code> could contain at <code>0x8001946</code> after a <code>SIGILL</code> is raised, and  the signal is passed off to the custom handler defined at that address?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "144",
    "tags": [
        "linux",
        "gcc",
        "x86-64"
    ],
    "user": "Omniscient Phynial Sniper",
    "time": "Jan 23, 2019 at 19:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems to be <code>%rip</code> (the address of the <code>ud2</code>):</p>\n<pre><code>#include &lt;signal.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;ucontext.h&gt;\n\nvoid handler(int signo, siginfo_t *info, void *context) {\n    ucontext_t *uc = (ucontext_t*)context;\n    printf(\"%llx\\n\", uc-&gt;uc_mcontext.gregs[REG_RIP]);\n}\n</code></pre>\n<p>compiles to:</p>\n<pre><code>handler(int, siginfo_t*, void*):\n        movq    168(%rdx), %rsi\n        movl    $.L.str, %edi\n        xorl    %eax, %eax\n        jmp     printf\n.L.str:\n        .asciz  \"%llx\\n\"\n</code></pre>\n<p>(<a href=\"https://gcc.godbolt.org/z/RC064L\" rel=\"nofollow noreferrer\">https://gcc.godbolt.org/z/RC064L</a>)</p>\n</div>",
            "votes": "2",
            "user": "booto",
            "time": "Jan 24, 2019 at 9:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}