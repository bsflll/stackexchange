{
    "title": "Hex-Rays decompiles array to int",
    "link": "https://reverseengineering.stackexchange.com/questions/11857/hex-rays-decompiles-array-to-int",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I decompiled one dll using Hex-Ray but it decompiled array type input argument of dll to int. Any idea how to handle this ??</p>\n<pre><code>double dzSell(int a1, double a2, int a3, int a4, int a5)\n</code></pre>\n<p>int a1 is array type in dll</p>\n<p>Sadly i can not comment Marware answer so putting it here</p>\n<p>so e.g. line like this </p>\n<pre><code>v9 = *(double *)(a1 + 8 * (v5 - 1));\n</code></pre>\n<p>should be changed to ???</p>\n<pre><code>v9 = *(double *)(a1[2] * (v5 - 1));\n</code></pre>\n<p>and int a1 to double *a1 ??</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "451",
    "tags": [
        "decompilation",
        "dll",
        "hexrays",
        "array"
    ],
    "user": "Krzysztof",
    "time": "Jan 27, 2016 at 8:14",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">See <a href=\"http://reverseengineering.stackexchange.com/questions/4047/how-do-i-adjust-the-length-of-the-parameters-in-ida\">How do I adjust the length of the parameters in IDA?</a></span>",
            "time": null
        },
        {
            "user": "speeder",
            "text": "<span class=\"comment-copy\">I am personalyl almost giving up on Hex-Rays, it is extremely buggy, right now I am having a simialr problem, except Hex-Rays insist that this double is stored in \"rax\", except it is a 32bit app, and nowhere in the disasm RAX (or any hack to allow that somehow in 32bit) is ever used, Hex-Rays just assumes extremely wrong.</span>",
            "time": null
        },
        {
            "user": "franck",
            "text": "<span class=\"comment-copy\">@speeder what are you using then ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not sure I understand the problem, but if you want to transform a1 to pointer type just pass cursor on the function prototype, press <kbd>Y</kbd> and edit the type of the function argument to, for example, <code>int *</code> or whatever pointer type  you need.\nThat's a type of the function you'll get:</p>\n<pre><code>double dzSell(\n</code></pre>\n<p><strong>int* a1</strong>, </p>\n<pre><code>double a2, int a3, int a4, int a5)\n</code></pre>\n</div>",
            "votes": "1",
            "user": "w s",
            "time": "Jan 27, 2016 at 6:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recall I couldn't handle this case using Hex-rays, I managed to refactor all occurrences of the pattern like:\na1 + 0 is the first index - a1[0],\na1 + 4 is the second - a1[1]\n...and so on.</p>\n<p>Had some trial and error to distinguish between structs and arrays and it worked.</p>\n<p><strong>UPDATE</strong>\nCan't comment.\nThis statment meaning depends on the context, what's the value of v5?</p>\n<ul>\n<li><p>v5 - 1 can be an array operation</p></li>\n<li><p>But without code, int a1 in the function declaration is the return value (look at the function bottom you'll probably find a return a1;) it's a double array,\nand v9 is the result of *(double *)(a1[2] * (v5 - 1));</p></li>\n<li><p>*(double *) : is not actually a double pointer, this cast is added by Hex-rays,(according to the above assumption) it merely means the index of the double array resulted from (a1[2] * (v5 - 1));</p></li>\n<li><p>Knowing where v5 come from will be the key, but probably it's just declared and not used</p></li>\n</ul>\n</div>",
            "votes": "0",
            "user": "Marware",
            "time": "Jan 27, 2016 at 18:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>here is the example how Hex-Rays decompile pointers</p>\n<pre><code>/* The computational routine */\nextern \"C\" __declspec(dllexport) void myfun2 (double x, double *y, double *z, int n)\n{\n    int i;\n    /* multiply each element y by x */\n    for (i=0; i&lt;n; i++) {\n        z[i] = x * y[i];\n    }\n}\n\n\n/*\nint __cdecl myfun2(double a1, int a2, int a3, int a4)\n{\n  int result; // eax@3\n  int i; // [sp+0h] [bp-4h]@1\n\n  for ( i = 0; i &lt; a4; ++i )\n  {\n    *(double *)(a3 + 8 * i) = a1 * *(double *)(a2 + 8 * i);\n    result = i + 1;\n  }\n  return result;\n}\n*/\n</code></pre>\n<p>so clearly pointer variables are converted to int, it means that casting double * -&gt; int must be done as a2 and a3 are used to access the array. For proper casting i used (uintptr_t)buffer</p>\n</div>",
            "votes": "0",
            "user": "Krzysztof Fajst",
            "time": "Jan 29, 2016 at 3:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">According to the StackOverflow rules you need to update the question, not to insert additional answer</span>",
                    "time": null
                }
            ]
        }
    ]
}