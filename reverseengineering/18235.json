{
    "title": "JAVA Decryption - Reverse engineering an Android application",
    "link": "https://reverseengineering.stackexchange.com/questions/18235/java-decryption-reverse-engineering-an-android-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to decrypt an encrypted string, but I am stuck in <code>Ciper.doFinal()</code> where the decryption throws a <code>BadPaddingException</code>.\nThe string in question is <strong>3qBogw/PIqpErH/DyEHLTQ==</strong>. One thing I know is that the string when decrypted contains a number (It is used in <code>Integer.valueOf()</code>)</p>\n<p>First, the following method is called;</p>\n<pre><code>public static String getRandom() {\n    String str1 = UUID.randomUUID().toString();\n    String str2 = dCpw^jDyaip^Hfy]XgdRbp_imwbheJCFxTF^ligkteDEdrbtsu\\yIV[;\n    StringBuilder localStringBuilder = new StringBuilder();\n    localStringBuilder.append(str1);\n    localStringBuilder.append(str2);\n    return StringUtils.replaceEachRepeatedly(localStringBuilder.toString(), new String[] { \"dCp\" }, new String[] { \"gPs\" });\n}\n</code></pre>\n<p>Nothing too fancy here just creates a UUID and concats it with a constant string and also uses Apache StringUtils to replace all occurances of dCp to gPs - (not sure why that is required)</p>\n<pre><code>public static String decrypt(String str) {\n   try {\n      String random = getRandom();\n      byte[] decode = Base64.decode(str, 0);\n      byte[] array = convertToArray(random);\n      return new String(ciperDecrypt(decode, array, array), \"UTF-8\");\n   } catch (Exception e) {\n      e.printStackTrace();\n      return \"\";\n   }\n}\n</code></pre>\n<p>Here in the decrypt method, the generated random value is passed to a method in order to convert it to a byte array. \nFollowing is that method,</p>\n<pre><code>private static byte[] convertToArray(String str) throws UnsupportedEncodingException {\n    byte[] obj = new byte[16];\n    byte[] bytes = str.getBytes(\"UTF-8\");\n    int length = str.length();\n    System.arraycopy(bytes, 0, obj, 0, Math.min(bytes.length, obj.length));\n    return obj;\n}\n</code></pre>\n<p>There is nothing fancy here too, just returns a byte array obtained from <code>String.getBytes()</code> methods. But what is interesting is that only first 16 bytes are used. This is what worries me, if you look at this carefully, in the <code>getRandom()</code> method they concat a <code>UUID</code> string and another constant string. But once the same string is passed to this method, the rest of the string is ignored.</p>\n<p>And then finally ciperDecrypt method uses a <code>Ciper</code> to decrypt the string. </p>\n<pre><code>public static byte[] ciperDecrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {\n    try {\n        Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        SecretKeySpec secret = new SecretKeySpec(paramArrayOfByte2, \"AES\");\n        IvParameterSpec param = new IvParameterSpec(paramArrayOfByte3);\n        localCipher.init(2, secret, param);\n        return localCipher.doFinal(paramArrayOfByte1);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n</code></pre>\n<p>This procedure looks fine, but when I try to execute it, I get a <code>BadPaddingException</code> when the <code>doFinal()</code> line is executed. What I suspect is in the creation of the <code>byte[]</code> where there is some data loss. </p>\n<p>It would be really helpful if anyone can identify where I have gone wrong. \nI would really appreciate it, \nThanks!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "480",
    "tags": [
        "android",
        "java"
    ],
    "user": "Sudara",
    "time": "May 11, 2018 at 22:50",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">Adding to my answer - I guess the key really seems to be wrong because it makes no sense. It decrypts a fixed string with a random key (first 16 bytes of the UUID), I don't see how this would ever work without sheer luck.</span>",
            "time": null
        },
        {
            "user": "Madushan",
            "text": "<span class=\"comment-copy\">Instead of trying to reverse engineer the encryption algorithm, you can try hooking the original decryption function using frida (<a href=\"https://www.frida.re/docs/android/\" rel=\"nofollow noreferrer\">frida.re/docs/android</a>)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I <em>think</em> your decryption is wrong, possibly because you use a wrong key.</p>\n<p>If I remember correctly, PKCS5 allows you to <em>kind of</em> detect faulty decrypts. The reason is that PKCS5 expects decrypted data to be in a special padding format. If your decryption fails, the padding format isn't adhered to and thus it complains about bad padding.</p>\n<p>Without having looked it up, an example:</p>\n<p>Say I use PKCS5 padding for my input (length 10 bytes) for a block size of 16 bytes. Properly padded it would look like this:</p>\n<pre><code>Data      xx xx xx xx xx xx xx xx xx xx 06 06 06 06 06 06\n</code></pre>\n<p>The <code>06</code> bytes at the end are padding and their value must be how many padding bytes there are.</p>\n<p>So if you decrypt something and the last <code>n</code> bytes (<code>n</code> = byte value of last byte) aren't <code>n</code>, PKCS5 will complain about bad padding.</p>\n<p>In my experience that happens with faulty decryptions due to wrong key.</p>\n</div>",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "May 15, 2018 at 3:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}