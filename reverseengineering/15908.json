{
    "title": "Why does IDA identify so many non-existent methods in this binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/15908/why-does-ida-identify-so-many-non-existent-methods-in-this-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The decompilation and auto-analysis of this binary is grossly inaccurate. I am providing the <a href=\"http://www.mediafire.com/file/2c922amt64d0rym/bug_manage_system\" rel=\"nofollow noreferrer\">binary</a> as well as the <a href=\"http://www.mediafire.com/file/938tb37emkkxifz/bug_manage_system.idb\" rel=\"nofollow noreferrer\">IDB</a>. IDA v6.95, 32 bit was used for the analysis. Can anyone take a look and suggest how I can improve the accuracy of IDA's analysis in this case?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "428",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "sherlock",
    "time": "Jul 25, 2017 at 7:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Would you mind ellaborating which functions you are refering to? The ones I see (IDA 6.95, 32bit, linux) seem pretty normal to me. Here is the list:</p>\n<p><a href=\"https://i.sstatic.net/NwoKd.png\" rel=\"nofollow noreferrer\"><img alt=\"function list\" src=\"https://i.sstatic.net/NwoKd.png\"/></a></p>\n<p>Generally, IDA adds functions as soon as it finds any referal of control flow, so broken functions are often generated by opaque predicates and falsely parsed jump tables.</p>\n<p><strong>edit:</strong>\nThe functions you are referring to (<code>sub_6C8</code>, <code>sub_6D0</code>, <code>sub_6D8</code>) are functions related to the global offset table (see segment name). These are basically trampoline functions redirecting the control flow.</p>\n<p>(PLT stands for procedure linkage table)</p>\n<p>I'm not completely certain why IDA treats them as functions, but the functionality is no mistery.</p>\n<p>You may try commands like:</p>\n<pre><code>readelf --relocs bug_manage_system\n</code></pre>\n<p>or</p>\n<pre><code>objdump -T bug_manage_system\n</code></pre>\n<p>Also, it may help to have a look at raw disassembler output of <code>.plt.got</code> using objdump or any other tool.</p>\n<p>Reading an article about the linking procedure of elf files may certainly help:\n<a href=\"https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html\" rel=\"nofollow noreferrer\">PLT and GOT - the key to code sharing and dynamic libraries</a>\n<a href=\"https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html\" rel=\"nofollow noreferrer\">GOT and PLT for pwning.</a>\n<a href=\"https://reverseengineering.stackexchange.com/questions/1992/what-is-plt-got/1993\">What is PLT/GOT?</a></p>\n</div>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Jul 27, 2017 at 5:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">There are many e.g. <code>sub_6C8</code>, <code>sub_6D0</code>, <code>sub_6D8</code> etc. Also, I seem to be not able to find any cross reference to <code>malloc</code></span>",
                    "time": null
                },
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Look at the decompiler's output of the functions above.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@Holmes.Sherlock any other functions? See my updated answer</span>",
                    "time": null
                }
            ]
        }
    ]
}