{
    "title": "gcc storing value of a variable at a different location",
    "link": "https://reverseengineering.stackexchange.com/questions/5834/gcc-storing-value-of-a-variable-at-a-different-location",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I compiled the following program using gcc version 4.6.3 on Ubuntu 32bit with the command <code>gcc -ggdb -o test test.c</code></p>\n<pre><code>\nvoid test(int a, int b, int c, int d)\n{\n    int flag;\n    char buffer[10];<br/>\n    flag = 31337;\n    buffer[0] = 'a';\n    a = 5;\n}\n\nint main(void)\n{\n    test(1, 2, 3, 4);\n    return 0;\n}\n</code></pre>\n<p>The disassembly of the above test function in gdb is :-\n<pre><code>\n   0x08048404 &lt;+0&gt;:     push   ebp\n   0x08048405 &lt;+1&gt;:     mov    ebp,esp\n   0x08048407 &lt;+3&gt;:     sub    esp,0x28\n   0x0804840a &lt;+6&gt;:     mov    eax,gs:0x14\n   0x08048410 &lt;+12&gt;:    mov    DWORD PTR [ebp-0xc],eax\n   0x08048413 &lt;+15&gt;:    xor    eax,eax\n   0x08048415 &lt;+17&gt;:    mov    DWORD PTR [ebp-0x20],0x7a69\n   0x0804841c &lt;+24&gt;:    mov    BYTE PTR [ebp-0x16],0x41\n=&gt; 0x08048420 &lt;+28&gt;:    mov    DWORD PTR [ebp-0x1c],0x5\n   0x08048427 &lt;+35&gt;:    mov    eax,DWORD PTR [ebp-0xc]\n   0x0804842a &lt;+38&gt;:    xor    eax,DWORD PTR gs:0x14\n   0x08048431 &lt;+45&gt;:    je     0x8048438 \n   0x08048433 &lt;+47&gt;:    call   0x8048320 &lt;__stack_chk_fail@plt&gt;\n   0x08048438 &lt;+52&gt;:    leave\n   0x08048439 &lt;+53&gt;:    ret\n</code></pre></p>\n<p>As much as I know, the assembly instruction after arrow corresponds to the C instruction <code>a = 5;</code> in test function. So the address <code>[ebp-0x1c]</code> should represent the address of variable <code>a</code>.<br/>\nBut the address that <code>[ebp-0x1c]</code> represents is <code>0xbffff2bc</code> and the address of variable <code>a</code> is <code>0xbffff2e0</code>.<br/>\nI don't understand how both addresses can be different. Is this some kind of optimization done by gcc?<br/></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "181",
    "tags": [
        "disassembly"
    ],
    "user": "rht",
    "time": "Jul 11, 2014 at 16:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you're not reading <code>a</code> anywhere, it seems gcc doesn't even bother reading it from the stack, and creates a local variable for it. Try replacing the <code>a=5</code> with <code>a+=5</code>, so the compiler has to read the variable, and the instruction will probably be changed to access [ebp+8], which is where the parameter should be stored.</p>\n<p>The reason for this behaviour <em>might</em> be that gcc tries to make the 32 bit code generation more similar to the 64 bit version, where parameters are passed in registers, and need to be saved <em>below</em> the stack pointer if the compiler needs the register, or a pointer to the parameter needs to be created. Doing the same in 32 bit - at least sometimes - might help the developers share code between the 32- and 64 bit optimizers.</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 11, 2014 at 17:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">Yep specifically, if it's accessing the argument it should be [ebp + 8]. ebp is BFFFF2D8 so if you add 8 to that, we get the value of 0xbffff2e0 the op expected.</span>",
                    "time": null
                },
                {
                    "user": "rht",
                    "text": "<span class=\"comment-copy\">Replacing the <code>a=5</code> with <code>a+=5</code> did store 5 at the address of <code>a</code>. Although its useless to accept an argument which is to be modified without even reading from it once. But why is it creating a new variable and not using the one passed. One answer <i>might</i> be what you suggested that it is trying to generate 32 bit code more similar to 64 bit version.</span>",
                    "time": null
                }
            ]
        }
    ]
}