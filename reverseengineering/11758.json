{
    "title": "How do you calculate Address Start / Size of PE Section like .rdata / .data",
    "link": "https://reverseengineering.stackexchange.com/questions/11758/how-do-you-calculate-address-start-size-of-pe-section-like-rdata-data",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to clone ollydbg's functionalities in vb6, so I could write my own tools easier then using it's scripting engine.</p>\n<p>I started of with trying to map the memory map's addresses exactly the same way ollydbg does it.</p>\n<p><a href=\"https://i.sstatic.net/AjHpH.png\" rel=\"nofollow noreferrer\"><img alt=\"ollyview\" src=\"https://i.sstatic.net/AjHpH.png\"/></a></p>\n<p>The PE header is at 0x00400000 with Size 0x1000</p>\n<p>I assume the 0x00400000 is retrieved like so.</p>\n<pre><code>Dim AddressOfPE As Long = NTHEADER.OptionalHeader.ImageBase\n</code></pre>\n<p>Now I want to map the addresses for all the other stuff most importantly <code>.text</code> <code>.rdata</code> but I wouldn't mind having them all.</p>\n<p>what I tried is this</p>\n<pre><code>For u = 0 To UBound(SECTIONSHEADER)\n    AddressStart = AddressOfPE + SECTIONSHEADER(u).VirtualAddress\n    Debug.Print \"(\" &amp; u &amp; \") \" &amp; SECTIONSHEADER(u).nameSec &amp; _\n    \" AddressStart = \" &amp; Hex(AddressStart) &amp; _\n    \" VirtualAddress = \" &amp; Hex(SECTIONSHEADER(u).VirtualAddress) &amp; _\n    \" VirtualSize = \" &amp; Hex(SECTIONSHEADER(u).VirtualSize) &amp; _\n    \" SizeOfRawData = \" &amp; Hex(SECTIONSHEADER(u).SizeOfRawData)\n    'Hunt for strings\n    If SECTIONSHEADER(u).nameSec = \".rdata\" Or SECTIONSHEADER(u).nameSec = \".data\" Then\n        MsgBox \"a\"\n    End If\n    AddressEnd = AddressStart + SECTIONSHEADER(u).SizeOfRawData\n    Debug.Print \"(\" &amp; u &amp; \") \" &amp; SECTIONSHEADER(u).nameSec &amp; _\n    \" AddressEnd(?) = \" &amp; Hex(AddressEnd) &amp; _\n    \" OllyAddressEnd(?) = \" &amp; Hex(SECTIONSHEADER(u).SizeOfRawData)\nNext u\n</code></pre>\n<p>Debug log looks like this</p>\n<pre><code>(0) .text  AddressStart = 401000 VirtualAddress = 1000 VirtualSize = 1FAB3AD SizeOfRawData = 1FAB400\n(0) .text  AddressEnd(?) = 23AC400 OllyAddressEnd(?) = 1FAB400\n(1) .rdata AddressStart = 23AD000 VirtualAddress = 1FAD000 VirtualSize = 855586 SizeOfRawData = 855600\n(1) .rdata AddressEnd(?) = 2C02600 OllyAddressEnd(?) = 855600\n(2) .data  AddressStart = 2C03000 VirtualAddress = 2803000 VirtualSize = 2D045C4 SizeOfRawData = 1DF000\n(2) .data  AddressEnd(?) = 2DE2000 OllyAddressEnd(?) = 1DF000\n(3) .rsrc  AddressStart = 5908000 VirtualAddress = 5508000 VirtualSize = 105CC SizeOfRawData = 10600\n(3) .rsrc  AddressEnd(?) = 5918600 OllyAddressEnd(?) = 10600\n</code></pre>\n<p>Looking at this image seems I got it all right? but the size addresses are off.</p>\n<p><a href=\"https://i.sstatic.net/tb1dM.jpg\" rel=\"nofollow noreferrer\"><img alt=\"pe101 image\" src=\"https://i.sstatic.net/tb1dM.jpg\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ollydbg",
        "pe",
        "vb6"
    ],
    "user": "SSpoke",
    "time": "Jan 15, 2016 at 2:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Dang I solved it, I thought you had to add the previous section size to create new section address but it doesn't work like that.</p>\n<p>Still got a little bug where <code>VirtualSize</code> is smaller then OllyDbg's Memory Map Sizes for that section, but it seems <code>SizeOfRawData</code> is more accurate sometimes?</p>\n<p>But I guess I could fix this by taking the previous StartAddress for each section and subtracting one from it to get the End Size.</p>\n<p>I guess I could mark this solved.</p>\n<pre><code>Dim AddressOfPE As Long\nDim RawFileOffsetToCheck As Long\nDim StartAddress as Long\nDim EndAddresss as Long   \n\nAddressOfPE = NTHEADER.OptionalHeader.ImageBase\n\nFor u = 0 To UBound(SECTIONSHEADER)\n    StartAddress = AddressOfPE + SECTIONSHEADER(u).VirtualAddress\n    EndAddresss = AddressOfPE + RoundUp((SECTIONSHEADER(u).VirtualAddress + SECTIONSHEADER(u).VirtualSize), NtHeader.OptionalHeader.SectionAlignment) - 1\n\n    If offset &gt;= StartAddress And offset &lt;= EndAddresss Then\n        RawFileOffsetToCheck = offset - StartAddress  + SECTIONSHEADER(u).PointerToRawData\n    End If\n    'Hunt for strings\n    'TODO: Use the STUFF here.. pretty easy since we get the file offset here [RawFileOffsetToCheck]\nNext u\n\n\nPublic Function RoundUp(V, M) As Long\n    If (V Mod M) = 0 Then\n        RoundUp = V\n    Else\n        RoundUp = ((V \\ M) + 1) * M\n    End If\nEnd Function\n</code></pre>\n<p>Debug outputs exactly like ollydbg view</p>\n<pre><code>.text  401000 23ACFFF\n.rdata 23AD000 2C02FFF\n.data  2C03000 5907FFF\n.rsrc  5908000 5918FFF\n</code></pre>\n</div>",
            "votes": "2",
            "user": "SSpoke",
            "time": "Jan 15, 2016 at 1:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the algorithm is essentially the smaller of VirtualSize and SizeOfRawData (except when SizeOfRawData is zero, then VirtualSize is always used), rounded up to a multiple of SectionAlignment.  I can hand-craft some corner cases which break that algorithm, but a compiler isn't going to do that.</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\"><code>if VirtualSize = 0x1700 and SectionAlignment = 0x200 then EndAddress = EndAddress + (0x1700 % 0x200);</code>  correct?</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Doesn't give me good results I will try to fix this up.. I think I know a better way</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Nope that doesn't do it adding the SectionAlignment makes it go over into the next section, so that's not it either, I know of some tricks I discovered like Export tables size is calculated like this <code>(NTHEADER.OptionalHeader.DataDirectory(1).Size / 20) - 1</code>   1 being Exports index. I been looking at other debuggers source code and <code>FileAlignment</code> and <code>SectionAlignment</code> isn't even used in them very odd indeed.</span>",
                    "time": null
                },
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">Okay thanks for your advice it works perfectly!, I didn't understand the concept of rounding up it works good now.</span>",
                    "time": null
                }
            ]
        }
    ]
}