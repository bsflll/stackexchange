{
    "title": "How to intercept a call to function with known name from known DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/12356/how-to-intercept-a-call-to-function-with-known-name-from-known-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>First of all I wasn't very much into reversing until now, so excuse me if my question is dumb.</em></p>\n<p>I have a windows DLL most likely made with Visual C++. It's been developed in 1998 and has Mfc42.dll (4.21.7022) and mfc42u.dll and msvcirt.dll (5.00.7022) distributed with it.</p>\n<p>I managed to see function names exported by the DLL (it is easy) but not their parameters of-course. These functions are not called directly by any application, but I know they are called indirectly. I think they're being called by some other APIs, but the chain is unknown to me.</p>\n<p>My question is: Is it possible to extract the function signatures (function parameters and return value), write some kind of bindings (that should be possible) and finally call them myself?</p>\n<p>The last addition is that DLL in question has DllRegisterServer and DllUnregisterServer functions.</p>\n<h2>update</h2>\n<p>The DLLs I'm talking about are from an old speech synthesizer L&amp;H TTS3000. I wanted to research it more for fun than for something real and as it is extremely old and retired that shouldn't run into any trouble.\nSo if any one wants to reproduce these DLLs you can browse to this page:\n<a href=\"http://www.v3mail.com/download/ttsengines.htm\" rel=\"nofollow noreferrer\">http://www.v3mail.com/download/ttsengines.htm</a>\nand download any of the extra voices. They are not available (files are deleted) but they could be downloaded using web.archive.org.\nSo here is a dumpbin example for one of the english voice DLLs</p>\n<pre><code>dumpbin Engvf160.dll /exports\n...\nFile Type: DLL\n\n  Section contains the following exports for ENGVF160.dl\n\n           0 characteristics\n    373160B4 time date stamp Thu May 06 13:28:20 1999\n        0.00 version\n           1 ordinal base\n          99 number of functions\n          18 number of names\n\n    ordinal hint RVA      name\n\n         97    0 0000E23A DllRegisterServer\n         98    1 0000E25B DllUnregisterServer\n         99    2 000099A0 TtsEgGetCodeInfo\n          1    3 0000E280 vfClose\n          2    4 0000E308 vfGenPcm\n          3    5 0000E389 vfGetCaps\n          4    6 0000EE61 vfGetSil\n          5    7 0000EEA3 vfGetSpkr\n          6    8 0000EF11 vfGetVersion\n          7    9 0000F63D vfGetVol\n          8    A 0000EF4E vfOpen\n          9    B 0000F16D vfP2Tic\n         10    C 0000F479 vfSetSegDb\n         11    D 0000F482 vfSetSil\n         12    E 0000F4D6 vfSetSpkr\n         13    F 0000F550 vfSetSynthRange\n         14   10 0000F67F vfSetVol\n         15   11 0000F6D3 vfTuneSpkr\n\n  Summary\n\n        7000 .data\n       7B000 .rdata\n        3000 .reloc\n        1000 .rsrc\n        F000 .text\n</code></pre>\n<p>Imports:</p>\n<pre><code>... Section contains the following imports:\n\n   KERNEL32.dll\n             63470020 Import Address Table\n             634EA1C0 Import Name Table\n                    0 time date stamp\n                    0 Index of first forwarder reference\n\n                308  lstrlenA\n                1F5  OutputDebugStringA\n                2FF  lstrcmpiA\n                17D  GetWindowsDirectoryA\n                2F9  lstrcatA\n                302  lstrcpyA\n                 5D  DisableThreadLibraryCalls\n\n   ADVAPI32.dll\n             63470000 Import Address Table\n             634EA1A0 Import Name Table\n                    0 time date stamp\n                    0 Index of first forwarder reference\n\n                176  RegQueryInfoKeyA\n                162  RegDeleteKeyA\n                15B  RegCloseKey\n                172  RegOpenKeyExA\n                15F  RegCreateKeyExA\n                186  RegSetValueExA\n                164  RegDeleteValueA\n\n   MSVCRT.dll\n             63470040 Import Address Table\n             634EA1E0 Import Name Table\n                    0 time date stamp\n                    0 Index of first forwarder reference\n\n                291  malloc\n                 F1  _ftol\n                2B3  sqrt\n                18E  _pctype\n                115  _isctype\n                 61  __mb_cur_max\n                2C1  strncpy\n                2B0  sin\n                258  fprintf\n                113  _iob\n                2B2  sprintf\n                2BA  strcpy\n                25E  free\n                299  memset\n                10F  _initterm\n                 9D  _adjust_fdiv\n                297  memcpy\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "c++",
        "c",
        "dll"
    ],
    "user": "Gonzalez",
    "time": "Apr 27, 2017 at 8:40",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">So you seem to be dealing with a COM server of some kind. Of course you can try to find the signatures. If you're lucky the type library is included in the resource section already. Does it export more functions than the two you named? It may be helpful if you offer the output of <code>dumpbin</code> or a screenshot with CFF Explorer or something along these lines.</span>",
            "time": null
        },
        {
            "user": "Gonzalez",
            "text": "<span class=\"comment-copy\">Yes, it does have way more functions than I listed and their names make sense in context of the library usage purpose.  I can provide dumpbin output, what keys should I include (e.g. exports or anything else)?</span>",
            "time": null
        },
        {
            "user": "dingo_kinznerhook",
            "text": "<span class=\"comment-copy\">Exports and imports are both helpful. You might also be able to tell something about the parameters and return values by examining the functions - calling conventions might make it possible to identify what external values are being used by the functions.</span>",
            "time": null
        },
        {
            "user": "Gonzalez",
            "text": "<span class=\"comment-copy\">I've edited my post.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>The Bad News</h2>\n<p><code>DllRegisterServer</code> and <code>DllUnregisterServer</code> are two functions involved in the registration of a COM server DLL into the system. Therefore, their export is a good indication you're dealing with a COM server DLL. COM servers are infamous of their many indirect calls, mainly because a DLL server exposes from itself objects designed to be used by other executables and DLLs. You're likely to have to deal with many indirect calls between different executables.</p>\n<h2>The Good News</h2>\n<p>Now, the good news are that because COM defines functions to and objects in such a freestyle way, it also encourages creation of <em>Type Library</em> files (*.tlb). Those files have a machine-readable format that defines the classes, methods, interfaces in details. If you can find the Type Library file(s) for your DLLs, you could extract all function arguments (Including names!), function return types, etc. directly from those files.</p>\n<p>Type Library files are likely to be in the application's directory, with other application resources or as part of the PE file itself. There are <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680581(v=vs.85).aspx\" rel=\"nofollow noreferrer\">several</a> Type Library file readers, as well as python implementation (<code>pythoncom.LoadTypeLib</code> from the <a href=\"https://sourceforge.net/projects/pywin32/\" rel=\"nofollow noreferrer\">win32 package</a>).</p>\n<p>Documentation is a bit scarce, but having a Type Library will make the entire reverse engineering easier.</p>\n<h2>If all else fails</h2>\n<p>In the unfortunate case you can't find the Type Library file, you'll have to reverse engineer the functions you're interested in intercepting, and extract the meaning (and types, and sizes) of parameters from the functions themselves. This is often a bit trickier compared to having both caller and callee, but is quite doable. I the case of a <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms693345(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><em>in-process COM server</em></a>, you can even debug the calls to your COM server quite easily (by debugging the executable that loads the DLL/com server, the <em>COM client</em>, and placing breakpoints on methods of the <em>COM server</em>).</p>\n<p>One last thing, there are some automated tools that attempt to automatically generate a DLL proxy, <a href=\"https://www.shysecurity.com/post/20130111-Dll%20Proxy\" rel=\"nofollow noreferrer\">here's one</a>.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NathanL",
                    "text": "<span class=\"comment-copy\">Most COM DLLs have the type library built in.  You can view it with OLEView (<a href=\"https://msdn.microsoft.com/en-us/library/d0kh9f4c.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/d0kh9f4c.aspx</a>).</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Nathan yes, I mentioned that...</span>",
                    "time": null
                },
                {
                    "user": "NathanL",
                    "text": "<span class=\"comment-copy\">Ah, so you did. :)</span>",
                    "time": null
                }
            ]
        }
    ]
}