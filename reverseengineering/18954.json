{
    "title": "When I write into a memory address in gdb, is it an absolute address or PC-relative address?",
    "link": "https://reverseengineering.stackexchange.com/questions/18954/when-i-write-into-a-memory-address-in-gdb-is-it-an-absolute-address-or-pc-relat",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Recently I tried to use <code>Hopper Disassembler</code> to do the reverse engineering on a Mac application. After decompiling the executable file, I got a bunch of cstrings defined in the specific location. For example, on <code>0x105d4a804</code> there is a string <code>\"SQLITECIPHER\"</code>.</p>\n<p>But my problem is that: is <code>0x105d4a804</code> a relative address or an absolute one?</p>\n<p>I found that if I use gdb to run the executable file, I can use x/s to print that string correctly, exactly in that location.</p>\n<p>This raises my concern. Is this string probably defined as a global variable? Why is the memory location in gdb as same as defined in the executable? Any explanation will be appreciated!</p>\n<p><a href=\"https://i.sstatic.net/5t8rw.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/5t8rw.jpg\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "590",
    "tags": [
        "hopper",
        "mach-o"
    ],
    "user": "Patroclus",
    "time": "Jul 31, 2018 at 21:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know exactly about Mac applications, but .text, .rodata, .data etc are usually at static locations which stay the same while parsing the ELF in a disassembler and during runtime. There's a feature called Position Independent Executables(PIE) in which even these sections are subject to ASLR. In newer gcc versions PIE is enabled by default unless specifically opted out in the compiler flags.</p>\n<p>From <a href=\"https://eklitzke.org/position-independent-executables\" rel=\"nofollow noreferrer\">here</a></p>\n<blockquote>\n<p>You can use the -pie or -PIE flags to GCC to create what is called a “position independent executable” (a.k.a. PIE). When you do this GCC will only generate relocatable code. There is still an entry point for the program with a hard-coded address, but all the entry point does is set things up to run the relocatable code.</p>\n<p>The main use case for this is ASLR hardening. When a PIE ASLR binary starts up the kernel picks a random virtual memory address to load all code other than the entry point stub at. This makes it harder to exploit a large class of security vulnerabilities common to C/C++ programs. Most Linux distributions do not compile typically binaries with this option because there is real, measurable overhead to invoking relocatable functions. Distributions like Debian and Ubuntu only compile particularly security sensitive binaries (e.g. ssh) as PIEs. (Traditional non-PIE binaries will still use ASLR on Linux, but only for loading dynamic libraries).</p>\n</blockquote>\n<p>In the application you're reversing PIE may have been disabled.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}