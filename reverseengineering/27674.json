{
    "title": "How to get the input necessary to get to the end",
    "link": "https://reverseengineering.stackexchange.com/questions/27674/how-to-get-the-input-necessary-to-get-to-the-end",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In short, I have a code that gets an input via stdin. Once it has the input string in memory, it verifies its integrity by calling a function for every condition, and <code>exit</code>ing the program if those conditions are not met.</p>\n<p>There are 20 of those verifications, and I do not think it is efficient to reverse it manually considering the first is (according to Ghidra disassemblying), being <code>param1 = (long) input;</code> and <code>input</code> = the 32-byte array in which the input is stored,</p>\n<pre><code>void verify1(long param_1){\n    if ((int)*(char *)(param_1 + 4) * (int)*(char *)(param_1 + 0xf) - (int)*(char *)(param_1 + 0xd) !=\n      0x349f) {\n        exit(-1);\n      }\n    return;\n}\n</code></pre>\n<p>I think a program or plugin to automate this would be useful. However, I could not find anything useful at all.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "481",
    "tags": [
        "binary-analysis",
        "linux",
        "c",
        "ghidra"
    ],
    "user": "Néstor Llop",
    "time": "May 17, 2021 at 12:16",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">You could try <code>angr</code> or <code>z3</code> to get what input would be needed for passing all the checks.</span>",
            "time": null
        },
        {
            "user": "Néstor Llop",
            "text": "<span class=\"comment-copy\">Roger that, and thank you for the answer. Gonna try them out</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">There's an example of using angr to solve a crackme employing many checks <a href=\"https://binaryresearch.github.io/2020/01/15/Analyzing-ELF-Binaries-with-Malformed-Headers-Part-3-Solving-A-Corrupted-Keygenme.html\" rel=\"nofollow noreferrer\">here</a> (I'm the author of the article)</span>",
            "time": null
        },
        {
            "user": "Néstor Llop",
            "text": "<span class=\"comment-copy\">Okay, @julian, I am reading it. I'm sure it'll be interesting!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>trying to tackle it with pencil and paper</p>\n<p>a common pattern pattern noticeable is<br/>\n(int)*(char *)(param_1 + x)  which is equivalent to param_1[x] (unsigned char Array access)</p>\n<p>so if you pass an array like</p>\n<pre><code>char param_1[] ={ 0,1,2,3,4,5,6,7,8,9,0xa,0xb,0xc,0xd,0xe,0xf}; \n</code></pre>\n<p>then the function will multiply param_1[4] * param_1[0xf] and subtract param_1[0xd]\nor actually 4*0xf-0xd = 0x2f</p>\n<p>since we know it is a char so any of these values can be only with 0 to 255</p>\n<p>so the equation is a * b = 0x349f+c where a,b,c can only be between 0 and 255 or rather 1 and 255 as multiplication by 0 is 0</p>\n<p>simply brute forcing you have a possible 215 key space for next round</p>\n<pre><code>def brute1(x):    \n    for divisor in range(1, x + 1):\n        rem = (x % divisor)\n        quo = (x / divisor)\n        if ( (rem == 0) and (quo &lt; 128) and (divisor&lt;255) ):\n            print(\"a = %3d        b = %3d          c = %3d\\t\" % \n            (divisor,quo,((divisor*quo)-0x349f)))\n            \nprint (\"a = param_1[4] b = param_1[0xf] c = param_1[0xd]\")            \nfor i in range(0x349f,(0x349f+0xff),1):    \n    brute1(i)\n</code></pre>\n<p>some possible chars</p>\n<pre><code>python verify.py | wc -l\n216\npython verify.py | head -n 5\na = param_1[4] b = param_1[0xf] c = param_1[0xd]\na = 175        b =  77          c =   4\na = 245        b =  55          c =   4\na = 221        b =  61          c =  10\na = 107        b = 126          c =  11\n</code></pre>\n<p>with this in hand you can possibly lift the function and dump it into a  c maybe for testing a set of key lets say (55,245,4)</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid verify1(unsigned char *param_1)\n{\n    if (\n        (int)*(unsigned char *)(param_1 + 4) *\n                (int)*(unsigned char *)(param_1 + 0xf) -\n            (int)*(unsigned char *)(param_1 + 0xd) !=\n        0x349f)\n    {\n        exit(-1);\n    }\n    return;\n}\n\nint main(void)\n{\n    unsigned char param_1[] = {0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 245};\n    verify1(param_1);\n    printf(\"we passed verify1\\n\");\n}\n</code></pre>\n<p>compiling and executing</p>\n<pre><code>cl /Zi /W4 /analyze /Od /nologo verify.cpp /link /release\nverify.cpp\n\nverify.exe\nwe passed verify1\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "May 17, 2021 at 19:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}