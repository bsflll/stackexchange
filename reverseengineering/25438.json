{
    "title": "Why does IDA Pro fail to add these constants?",
    "link": "https://reverseengineering.stackexchange.com/questions/25438/why-does-ida-pro-fail-to-add-these-constants",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to port Enrique Nissim's script from his presentation \"Reverse Engineering and Bug Hunting on KMDF Drivers\" to IDA 7.4. His original script can be found at:</p>\n<p><a href=\"https://github.com/IOActive/kmdf_re/tree/master/code\" rel=\"nofollow noreferrer\">https://github.com/IOActive/kmdf_re/tree/master/code</a></p>\n<p>My somewhat updated version can be found at:\n<a href=\"https://github.com/MrSynAckSter/kmdf_re/blob/master/code/kmdf_re.py\" rel=\"nofollow noreferrer\">https://github.com/MrSynAckSter/kmdf_re/blob/master/code/kmdf_re.py</a></p>\n<p>While I have eliminated most of the errors, I noticed that on all of the drivers I tried it on some of the constants fail to be added to the IDA database.</p>\n<p>Errors like these propagate upon running the script:</p>\n<pre><code>(1, '_GUID')\n(2, 'GUID')\n(3, 'RUNTIME_FUNCTION')\n(4, 'UNWIND_INFO_HDR')\n(5, 'UNWIND_CODE')\n(6, '_UNICODE_STRING')\n(7, 'USHORT')\n(8, 'PWSTR')\n(9, 'WCHAR')\n(10, 'wchar_t')\n(11, 'FILE')\n(12, '_iobuf')\n(13, '_MAJOR_FUNCTIONS')\n(14, 'MAJOR_FUNCTIONS')\nMAJOR_FUNCTIONS: failed to add constant DispatchCreate=0 (0x0)\nMAJOR_FUNCTIONS: failed to add constant DispatchCreateNamedPipe=1 (0x1)\nMAJOR_FUNCTIONS: failed to add constant DispatchCLose=2 (0x2)\nMAJOR_FUNCTIONS: failed to add constant DispatchRead=3 (0x3)\nMAJOR_FUNCTIONS: failed to add constant DispatchWrite=4 (0x4)\nMAJOR_FUNCTIONS: failed to add constant DispatchQueryInformation=5 (0x5)\nMAJOR_FUNCTIONS: failed to add constant DispatchSetInformation=6 (0x6)\nMAJOR_FUNCTIONS: failed to add constant DispatchQueryEA=7 (0x7)\nMAJOR_FUNCTIONS: failed to add constant DispatchSetEA=8 (0x8)\nMAJOR_FUNCTIONS: failed to add constant DispatchFlushBuffers=9 (0x9)\nMAJOR_FUNCTIONS: failed to add constant DispatchQueryVolumeInformation=10 (0xA)\nMAJOR_FUNCTIONS: failed to add constant DispatchSetVolumeInformation=11 (0xB)\nMAJOR_FUNCTIONS: failed to add constant DispatchDirectoryControl=12 (0xC)\nMAJOR_FUNCTIONS: failed to add constant DispatchFileSystemControl=13 (0xD)\nMAJOR_FUNCTIONS: failed to add constant DispatchDeviceIOControl=14 (0xE)\nMAJOR_FUNCTIONS: failed to add constant DispatchInternalDeviceControl=15 (0xF)\nMAJOR_FUNCTIONS: failed to add constant DispatchShutdown=16 (0x10)\nMAJOR_FUNCTIONS: failed to add constant DispatchLockControl=17 (0x11)\nMAJOR_FUNCTIONS: failed to add constant DispatchCleanup=18 (0x12)\nMAJOR_FUNCTIONS: failed to add constant DispatchCreateMailslot=19 (0x13)\nMAJOR_FUNCTIONS: failed to add constant DispatchQuerySecurity=20 (0x14)\nMAJOR_FUNCTIONS: failed to add constant DispatchSetSecurity=21 (0x15)\nMAJOR_FUNCTIONS: failed to add constant DispatchPower=22 (0x16)\nMAJOR_FUNCTIONS: failed to add constant DispatchSystemControl=23 (0x17)\nMAJOR_FUNCTIONS: failed to add constant DispatchDeviceChange=24 (0x18)\nMAJOR_FUNCTIONS: failed to add constant DispatchQueryQuota=25 (0x19)\nMAJOR_FUNCTIONS: failed to add constant DispatchSetQuota=26 (0x1A)\nMAJOR_FUNCTIONS: failed to add constant DispatchPNP=27 (0x1B)\n</code></pre>\n<p>I have narrowed their origin to this bit of the script at line 439:</p>\n<pre><code>def load_kmdf_types_into_idb():\n    header_path = idautils.GetIdbDir()\n    idaapi.idc_parse_types(\"\".join([header_path, \"WDFStructs.h\"]), idc.PT_FILE)\n    for idx in range(1, idc.get_ordinal_qty\n\n\n()):\n        #Fails to add some of the types\n        print((idx, idc.get_numbered_type_name(idx)))\n        idc.import_type(idx, idc.get_numbered_type_name(idx))\n</code></pre>\n<p>However the IDA documentation doesn't help much in terms of deciphering the \"failed to add constant\" errors.</p>\n<p><a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_typeinf-module.html#import_type\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/idapython_docs/ida_typeinf-module.html#import_type</a></p>\n<pre><code>import_type(til, idx, name, flags=0)\n \nCopy a named type from til to idb.\n\nParameters:\ntil - type library (C++: const til_t *)\nidx - the position of the new type in the list of types (structures or enums). -1 means at the end of the list (C++: int)\nname - the type name (C++: const char *)\nflags - combination of Import type flags (C++: int)\nReturns: tid_t\nBADNODE on error\n</code></pre>\n<p>The big question for me is <strong>why is this type import failing</strong>? Is it because the types already exist, or is there some subtle syntax error here? Is the flag parameter here mandatory? The error and documentation make is very difficult to tell exactly what's going on here.</p>\n<p>The reason why I care is I believe that the failing imports are contributing to the driver failing to find IoControlls, driver major functions, and other important structures for reverse engineering KMDF drivers.</p>\n<p>Here are my main theories for why this is happening:</p>\n<ol>\n<li><p>Somehow the behavior of import_type doesn't exactly work closely enough to the original Til2Idb method that was in the original script.</p>\n</li>\n<li><p>The types are somehow are already in the database in some conflicting way due to flirt signatures or something. I tried looking for them manually, but I don't see them being added on any of the drivers I have tried with the script.</p>\n</li>\n<li><p>This is IDA telling me that the constants cant be added because they don't exist in the database and the script is functioning more or less as intended. If this is cases I wish the IDA docs would give me some indication of this behavior.</p>\n</li>\n</ol>\n<p>I hope this makes the question clear guys. I hope you can help!</p>\n<p>Update: As an added wrinkle, when I manually import the header file this is parsing IDA doesn't generate any errors.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "947",
    "tags": [
        "ida",
        "driver"
    ],
    "user": "MrSynAckSter",
    "time": "Jul 5, 2020 at 18:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA does not allow conflicting names anywhere in the database(including enum members).</p>\n<p>Most likely both <code>_MAJOR_FUNCTIONS</code> and <code>MAJOR_FUNCTIONS</code> have the same set of members, so the first one wins.</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jul 4, 2020 at 21:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Can you give some suggestion of how I'd alter the plugin to not fail?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Itâ€™s not a failure but just a warning.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\"><i>Something</i> is failing silently in the script then as it does not populate common functions like \"iocreatedevice\"</span>",
                    "time": null
                }
            ]
        }
    ]
}