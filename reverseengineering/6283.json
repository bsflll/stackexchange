{
    "title": "Most efficient way to extend a program using a DLL [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6283/most-efficient-way-to-extend-a-program-using-a-dll",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-09-26 15:49:14Z\">10 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/6283/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I have wrote a program in C++ and I built it as a DLL. I want to utilize functions that are in this DLL in another program to overwrite other functions. Unfortunately, they're not any exports and cannot be added to the imports table. Not only that I have functions that I would like to be able to <code>jmp</code> to and utilize and then return. </p>\n<p>Did I perhaps build this incorrectly ?</p>\n<p>I have the source so I can make changes in VSC++ although, I can would preferable like to do this in ASM.</p>\n<p>I have thought about calling <code>LoadLibrary()</code> but that I believe will put the DLL in a random location and making patches to this will be a bit difficult, if I am not mistaken.</p>\n<p>Let me know your ideas on how I can solve this.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "498",
    "tags": [
        "disassembly",
        "ollydbg",
        "x86",
        "dll"
    ],
    "user": "LUser",
    "time": "10 years ago",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "<span class=\"comment-copy\">why can't you make them exports? and you could just use loadlibrary -&gt; patch at base returned + displacment.. ie:base address may vary, but the relative address to the base shouldnt</span>",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<span class=\"comment-copy\">LoadLibrary returns address as handle to the dll's location and you just do math everytime before doing patchs. There is a work around if you can't edit the imports of the program you can hijack one of the dll's the program loads normally and proxy every call to the original dll file (There's tools for this too :P) The functions you won't use you can use those for your program's special functions, remember a DLL file will always load first if it's next to the program then it will start loading from windows/system32 whatever. Which makes making proxy dll's pretty clean alternative.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The most efficient and easiest way is to export the functionality using <code>dllexport</code> in C++.</p>\n<p>Any other way is rewriting the functionality of windows APIs which defeats point of writing an 'efficient' way to extend the functionality.</p>\n<p>You thought about doing what with <code>LoadLibrary</code>? You know that <code>LoadLibrary</code> returns the base address of where it's loaded? Or you could even use <code>GetModuleHandle</code> to get the base. So, it's easy enough to do <code>Base + Offset</code></p>\n<p>If this doesn't answer your question then you can elaborate why you can't use <code>dllexport</code>?</p>\n<p>Edit:\nInside your dll add the code:</p>\n<pre><code>__declspec(dllexport) void __stdcall ShowMessageBox( )\n{\n    MessageBoxA( 0, \"HelloWorld from exported function!\", \"\", MB_OK );\n}\n</code></pre>\n<p>Inside your exe add the code:</p>\n<pre><code>#pragma comment(lib, \"TheFullPathToYourOutputDirOrUseRelaltive\\\\Bla.lib\")\n\n__declspec(dllimport) void __stdcall ShowMessageBox( );\n</code></pre>\n<p>The lib file will be generated in the output directory of your dll. This is only required for build and isn't required for distribution to your end-users.</p>\n<p>Finally call our function <code>ShowMessageBox( );</code>. </p>\n</div>",
            "votes": "1",
            "user": "Paul",
            "time": "Sep 23, 2014 at 22:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "LUser",
                    "text": "<span class=\"comment-copy\">I am currently using the Base + Offset for my fix. Can you provide an example of using dllexport in c++ . I am fairly new to C++ and mainly use ASM.</span>",
                    "time": null
                }
            ]
        }
    ]
}