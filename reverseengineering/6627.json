{
    "title": "Segmentation on x86 for stack canaries",
    "link": "https://reverseengineering.stackexchange.com/questions/6627/segmentation-on-x86-for-stack-canaries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just compiled some C code that reads in input using <code>gets</code> and disassembled the code. The platform is Ubuntu 32-bit.</p>\n<p>There are these 3 lines that check if the canary value has been tampered with.</p>\n<pre><code>   0x08048455 &lt;+33&gt;:    mov    edx,DWORD PTR [esp+0x7c]\n   0x08048459 &lt;+37&gt;:    xor    edx,DWORD PTR gs:0x14\n   0x08048460 &lt;+44&gt;:    je     0x8048467 &lt;main+51&gt;\n</code></pre>\n<p>I set a breakpoint on <code>0x08048459</code> and saw that the <code>gs</code> register had the value 0x33.</p>\n<p>My questions are:</p>\n<ol>\n<li>What is gs:0x14 given that gs is 0x33? Is 0x33 an index to something? Is it a memory location of some sort?</li>\n<li>Are there any x86 instructions to move the value of gs to any other register? Or perhaps push it onto the stack?</li>\n</ol>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "x86",
        "segmentation",
        "stack"
    ],
    "user": null,
    "time": "Nov 13, 2014 at 21:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check the stack protection in the <a href=\"http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/arch/x86/include/asm/stackprotector.h\">linux kernel source</a>. The <code>gs</code> register gets initialized by the kernel to a percpu structure, which contains a random value that's intended to be used as stack canary. This stack canary is at offset 20 (0x14) for 32 bit programs. It's randomized for each process to avoid malware being able to rely on it being always the same value.</p>\n<p>The 0x33 is actually an index into a table in the kernel, that you don't have access to, so it's quite meaningless from userland. The virtual memory that makes up the percpu structure is mapped to physical memory \"somewhere\" though gs and the kernel table index that gs maps to, but this physical memory is <em>not</em> mapped to any address that you can address 'normally', i.e. through the 'normal' cs/ds/ss segments.</p>\n<p>When you google for segment registers, you might find some information that says \"the segment register is shifted left by 4 bits, then added to the offset, to result in the real address\", but that applies to <em>real mode</em> only. Linux has always used <em>protected mode</em>. You can find more detailed information about segments in real and protected mode <a href=\"http://geezer.osdevbrasil.net/johnfine/segments.htm\">here</a>.</p>\n<p>To read the value, there is a <code>push gs</code> instruction you can use. There's a <code>pop gs</code> as well. But as mentioned, knowing the value won't help you, and setting the value to anything will most likely result in a segmentation fault.</p>\n</div>",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Nov 13, 2014 at 12:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}