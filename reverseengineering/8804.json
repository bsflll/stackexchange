{
    "title": "Why does calling the original function from my hook fail?",
    "link": "https://reverseengineering.stackexchange.com/questions/8804/why-does-calling-the-original-function-from-my-hook-fail",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to retrieve text from another program. I used <em>Ollydbg</em> to find the address for the function I need to hook to get the info. I used <strong><em>EasyHook</em></strong> to inject the code below. </p>\n<p>The hook works fine until I call the original function. It crashes each time I do. I think it may have something to do with the return type of the function. Since I am new to reversing, I am having trouble determining the correct return type. I tried several different return types ranging from void to int. After the function returns, <code>EAX</code> points to a unicode string but the value isn't used. From what I read, <code>EAX</code> is where a returned variable would be stored.</p>\n<p><strong>Update:</strong>\n<br/>I now see that this exception is occurring. </p>\n<pre><code>System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n   at ServerDLL.Injector.DoSomeThingDelegate.Invoke(Int32 argument1, Int32 argument2)\n   at ServerDLL.Injector.DoSomeThing(Int32 argument1, Int32 argument2)\n</code></pre>\n<p>Calling the function:</p>\n<pre><code>Address   Hex dump          Command                                  Comments\n00425373  |.  894424 04     MOV DWORD PTR SS:[ESP+4],EAX             ; /Arg2\n00425377  |.  8B45 A8       MOV EAX,DWORD PTR SS:[EBP-58]            ; |\n0042537A  |.  890424        MOV DWORD PTR SS:[ESP],EAX               ; |Arg1\n0042537D  |.  E8 8EC3FFFF   CALL DoSomething;\n00425382  |.  8B4D 8C       MOV ECX,DWORD PTR SS:[EBP-74]\n00425385  |.  8B45 A8       MOV EAX,DWORD PTR SS:[EBP-58]\n</code></pre>\n<p>Â </p>\n<pre><code>static string DoSomeThing(int argument1, int argument2)\n{\n    Log.WriteLine(argument1);\n    Log.WriteLine(argument2);\n    DoSomeThingDelegate del = Marshal.GetDelegateForFunctionPointer(new IntPtr(0x421810), typeof(DoSomeThingDelegate)) as DoSomeThingDelegate;\n    if (del == null) return \"\";\n    return del(seatnumber, stack); \n}\n\n[UnmanagedFunctionPointer(CallingConvention.Cdecl, SetLastError = true, CharSet = CharSet.Auto)]\ndelegate string DoSomeThingDelegate(int argument1, int argument2);\n\npublic void Run(RemoteHooking.IContext InContext, String InArg1)\n{\n    CreateRecvHook = LocalHook.Create(new IntPtr(0x421810), new  DoSomeThingDelegate(DoSomeThing), this);\n    CreateRecvHook.ThreadACL.SetExclusiveACL(new Int32[] { 0 });\n}\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "785",
    "tags": [
        "assembly",
        "ollydbg",
        "c#",
        "injection"
    ],
    "user": "Player5",
    "time": "Dec 16, 2015 at 23:03",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">The error may be caused due to the improper calling convention (<code>cdecl</code>, <code>stdcall</code>, <code>fastcall</code> etc) rather than the return type. From the code dump, it looks more of a <code>stdcall</code> as the stack pointer is not adjusted.</span>",
            "time": null
        },
        {
            "user": "Player5",
            "text": "<span class=\"comment-copy\">It seems EasyHook must use cdecl, stdcall, or thiscall. It still crashed with the same exception after changing to the other calling conventions though.</span>",
            "time": null
        },
        {
            "user": "svick",
            "text": "<span class=\"comment-copy\">I don't understand, you say you want to hook another program, but then you're creating a process-local hook? After skimming the docs, I think you need <code>RemoteHooking</code>.</span>",
            "time": null
        },
        {
            "user": "Player5",
            "text": "<span class=\"comment-copy\">That code is in the DLL that I am injecting. It is how all the examples I have seen are done. I use RemoteHooking.Inject to inject it though. Also, it gets injected fine. I can retrieve the values I need. The problem is with calling the original function. When it is called, I get the exception.</span>",
            "time": null
        }
    ],
    "answers_data": []
}