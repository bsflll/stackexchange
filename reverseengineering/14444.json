{
    "title": "What is the relationship between .NET and x86-64 assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/14444/what-is-the-relationship-between-net-and-x86-64-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm gathering that it's nearly a waste of time to try to reverse .NET applications in a native debugger. But why? Of course the computer is executing machine code in the end, not CIL. So what clutters the x86-64 code so much when running a .NET application? Is the general rule to use native debuggers on native code and tools like ILSpy on .NET?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "126",
    "tags": [
        "debuggers"
    ],
    "user": "the_endian",
    "time": "Jan 19, 2017 at 10:03",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">By this logic, it must be easy to debug Visual Basic code in a native debugger, because \"the computer is executing machine code in the end\"</span>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<span class=\"comment-copy\">@VitalyOsipov I don't understand your comment. It seems to have no substance?</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">It's your question that has no substance, I was simply pointing out your faulty logic.</span>",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "<span class=\"comment-copy\">@VitalyOsipov the definition of a question is to gather information in the form of an answer. The question \"what is the relationship between .NET and x64 assembly?\" Cannot be uninformed.</span>",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">After all, I didn't post my reply as a full-blown answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Microsoft .Net uses <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">CIL</a> (Common Intermediate Language). It is a - bytecode - assembly language for a virtual machine which is an abstract stack-based CPU - by abstract I mean not implemented in hardware.<br/>\nTherefore, x86 gdb cannot make sense of the .Net bytecode given that all it knows is x86 assembly. \nBut, in general you can easily reverse a bytecode into source code (because the VM states are more deterministic than those of a hardware CPU) or debug it using and .Net virtual machine with debug capabilities (i.e. ILSpy). \nIf you want more info on debuggers/decompilers/... for .Net check out this <a href=\"http://scottge.net/2015/07/16/best-net-decompiler-tools/\" rel=\"nofollow noreferrer\">link</a>.\nAlso, if you debug with gdb, you're most likely to be debugging the VM assembly code rather than the .Net bytecode of the application. In other words, what you are seeing is the VM running bytecode, not the bytecode running. </p>\n</div>",
            "votes": "1",
            "user": "yaspr",
            "time": "Jan 19, 2017 at 11:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">regarding \"most likely VM code \": it is either VM or JITted (compiled with just-in-time-compilation)code.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Indeed, I avoided getting into such details. Good point, thanks.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think it's more that you're debugging the code that launches the runtime assembly (and produces an error if it's not found) then after that is just pure MSIL which is effectively in another language (rather than machine code), which gets interpreted by the runtime (think of it like Java bytecode).. which will be meaningless without translating that to what the virtual machine would do... which a good .NET decompiler would actually convert to code for you anyway.</p>\n</div>",
            "votes": "2",
            "user": "Matthew1471",
            "time": "Jan 19, 2017 at 11:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}