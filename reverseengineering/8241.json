{
    "title": "Assembly- Using push and ESP-Register to store addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/8241/assembly-using-push-and-esp-register-to-store-addresses",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found the following assembly lines presented in a tutorial which I do not understand:</p>\n<pre><code> xor eax, eax      =&gt; clear, I know that, it makes eax = 0\n push eax          =&gt; push 0 on the stack\n push 0x68732f2f   =&gt; push \"//sh\" to the stack (the numbers are opcodes I guess, output of hexdump)\n push 0x6e69622f   =&gt; push \"/bin\" to the stack (again opcodes, representing \"/bin\" )\n mov ebx, esp      =&gt; put address of \"/bin//sh\\0\" into ebx, via esp\n ....\n</code></pre>\n<p><strong>My question:</strong> \nWhy we put address of \"/bin//sh\" into ebx, via esp using the line mov ebx, esp for that ?</p>\n<p>I draw a sketch:</p>\n<pre><code>         |                        |\n         |------------------------|&lt;-----ESP (I know that ESP always points to the top)\n(a)      |  0x6e69622f  (\"//sh\")  |\n         |------------------------|\n(b)      |   0x68732f2f (\"/bin\")  |\n         |------------------------|\n(c)      |       0                |\n         |------------------------|\n</code></pre>\n<p><strong>How I try to explain it to myself</strong>(I am not sure if it is correct, but I thought to think about a little bit before I ask in that forum here):</p>\n<p>ESP is a 32-bit register such that it is large enough to comprise the addresses at (a), (b) and (c) (which I marked above).</p>\n<p>Is that right? I hope somebody can help me?</p>\n<p>best regards, </p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "9k",
    "tags": [
        "assembly",
        "esp",
        "register"
    ],
    "user": "user3097712",
    "time": "Feb 14, 2015 at 23:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, let me clarify this:</p>\n<p><code>ESP</code> is a 32-bit register which contains a pointer to the stack.\nIt is not, by any means, big enough to <code>comprise the addresses at [...]</code>. It is just <em>pointing</em> at a memory location which holds <code>a</code>, <code>b</code>, and <code>c</code>.</p>\n<hr/>\n<p>What your exploit does is push a string to the stack. Look at the <code>/bin//sh</code> hexadecimal representation:</p>\n<pre><code>2f 62 69 6e 2f 2f 73 68\n</code></pre>\n<p>And now look at your assembly:</p>\n<pre><code>push 0x68732f2f\npush 0x6e69622f\n</code></pre>\n<p>This is <em>not</em> any kind of opcodes, but rather the ASCII representation of the string, pushed as double words (basically, pushes the string in less instructions)</p>\n<p>An alternative way would be:</p>\n<pre><code>push '/' ; same as push 0x2f\npush 'b' ; same as push 0x62\npush 'i' ; same as push 0x69\npush 'n' ; same as push 0x6e\npush '/' ; same as push 0x2f\npush '/' ; same as push 0x2f\npush 's' ; same as push 0x73\npush 'h' ; same as push 0x68\n</code></pre>\n<p>Basically, it's doing the same as above, just in less instructions, by combining the ASCII codes together: <code>6e69622f</code> instead of <code>2f</code>, <code>62</code>, <code>69</code>, <code>6e</code> separated. It's also pushing a <code>0</code>, which is a <a href=\"http://en.wikipedia.org/wiki/Null-terminated_string\" rel=\"noreferrer\">terminator for a C-style string</a>, so that the string ends there.</p>\n<p>Now, the stack has <code>/bin//sh</code>, and all you gotta do is <a href=\"http://www.cs.dartmouth.edu/~sergey/cs108/examples/shellcode32-1.c\" rel=\"noreferrer\">call <code>sys_execve</code></a>, by doing an <code>int 0x80</code> (interrupt), which is the way Linux uses to make syscalls.</p>\n<p>Since <a href=\"http://asm.sourceforge.net/syscall.html\" rel=\"noreferrer\">the syscall ID for <code>sys_execve</code> is 11</a>, you move <code>11</code> to <code>al</code> (lower part of <code>eax</code>), and put the first argument into <code>ebx</code>, which is a <em>pointer to a string</em>. And since <code>ESP</code> is pointing to the top of the stack, and the top of the stack contains the <code>/bin//sh</code> we pushed before, the exploit assembly means this:</p>\n<pre><code>sys_execve(\"/bin//sh\");\n</code></pre>\n<p>There you go, exploited! :)</p>\n</div>",
            "votes": "6",
            "user": "rev",
            "time": "Feb 15, 2015 at 1:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for the good explanation. It helps me a lot to understand it.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">@user3097712 no problem, be sure to ask me if I didn't explain any part properly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Its just a technique to embed strings in the exploit, as u can define them in a regular fashion, as u need their address to access them but in an exploit these addresses are dynamic not static or constants.</p>\n</div>",
            "votes": "0",
            "user": "Alok Saini",
            "time": "Feb 19, 2015 at 9:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}