{
    "title": "What type of disassembler is distorm?",
    "link": "https://reverseengineering.stackexchange.com/questions/14665/what-type-of-disassembler-is-distorm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In <a href=\"http://web.uvic.ca/~salam/PhD/Alam_Shahid_PhD_2014.pdf\" rel=\"noreferrer\">Alam</a> you can find the classical differentiation between disassemblers. The author explains in general the two well known types of disassemblers:</p>\n<blockquote>\n<ol>\n<li><p>The <strong>Linear Sweep</strong> technique starts from the first byte of the code and disassembles one instruction at a time until the end. [...]</p></li>\n<li><p>The <strong>Recursive Traversal</strong> technique relies on the control flow of the program and decodes the bytes by following the control flow of the\n  program. [...]</p></li>\n</ol>\n</blockquote>\n<p>Afterwards, the author introduces <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">distorm</a> and he makes the following statement:</p>\n<blockquote>\n<p>Both techniques have some deficiencies. To overcome these deficiencies\n  <strong>a good disassembler would combine both techniques</strong>. One such open\n  source disassembler, for non-commercial use, is distorm.</p>\n</blockquote>\n<p>After reading the docs of <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">distorm</a>, I'm not able to confirm this last statement. In my opinion, distorm seems to work like a classic Linear-Sweep version, and also will struggle with fake instructions and obfuscation (see <a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">1</a>). It calls itself \"stream disassembler\", where I was not able to fully clarify this expression.</p>\n<p><strong>With these facts, I have two questions:</strong></p>\n<ol>\n<li><p>Is distorm really a combination of linear sweep and recursive\ntraversal as mentioned by the author?</p></li>\n<li><p>What is your formal understanding of a \"stream disassembler\"?</p></li>\n</ol>\n<hr/>\n<p><a href=\"http://web.uvic.ca/~salam/PhD/Alam_Shahid_PhD_2014.pdf\" rel=\"noreferrer\">0</a> Page 47 in Alam, Shahid, et al. \"A framework for metamorphic malware analysis and real-time detection.\" computers &amp; security 48 (2015): 212-233.</p>\n<p><a href=\"https://github.com/gdabah/distorm/wiki\" rel=\"noreferrer\">1</a> <a href=\"https://github.com/gdabah/distorm/wiki/StreamDisassembler\" rel=\"noreferrer\">https://github.com/gdabah/distorm/wiki/StreamDisassembler</a></p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassemblers"
    ],
    "user": "knx",
    "time": "Feb 16, 2017 at 17:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>DiStorm does <strong>not</strong> implement recursive traversal, however you can use distorm (or others, e.g. capstone) to implement your own recursive traversal algortihm.</p>\n<p>There are a range of tools available doing something like this for you: IDA, BinaryNinja, JakStab (claims 'Iterative Disassembly') etc.</p>\n<p>Since retrieving the ControlFlowGraph is a hard problem, people tend to separate between the translation from machine code to assembler and the useage of those frameworks to retrieve the actual control flow.</p>\n<p>Cite from <a href=\"https://github.com/gdabah/distorm/wiki/FlowControlSupport\" rel=\"noreferrer\">diStorms Github:</a></p>\n<blockquote>\n<p>This is the time to say that diStorm, as a stream disassembler, doesn't do the flow control analysis work for you, but it will help you do that more easily.</p>\n</blockquote>\n<p>Disassemblers try to help by indicating which instructions may change the control flow and supplying direct targets, but implementing control flow recovery is non-trivial due to indriect jumps and anti-disassembler techniques.</p>\n<p>Regarding the second part of the question: It disassembles a given stream of bytes (buffer object). That doesn't seem any different from any disassembler out there.</p>\n</div>",
            "votes": "7",
            "user": "Nordwald",
            "time": "Feb 16, 2017 at 7:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Okay, that totally confirmed my understandings. Danke f√ºr die schnelle Antwort!</span>",
                    "time": null
                }
            ]
        }
    ]
}