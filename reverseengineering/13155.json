{
    "title": "Patch is detected yet hardware access breakpoint isn't hit",
    "link": "https://reverseengineering.stackexchange.com/questions/13155/patch-is-detected-yet-hardware-access-breakpoint-isnt-hit",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wonder how is that possible. </p>\n<p>I found debugger detection in TLS Callback function - there is conditional jump after some check.</p>\n<p>When I step over it with debugger and modify ZF flag to bypass detection everything works fine. But when I try to patch this jump to the opposite (jne to je) application freezes and bombards me with OutputDebugString. </p>\n<p>I don't save patch to the file, I patch it while process is in memory.</p>\n<p>I was interested how this patch is detected, so I set Hardware Access Breakpoints on bytes that I patched, and then run it. Breakpoints weren't hit, and yet application changed it behavior just like it always do when I patch. </p>\n<p>Notice that difference in code flow have nothing to do with this detection since when I modify ZF flag application works fine. </p>\n<p>So I am very baffled, how does this application detects that patch, when it doesn't apparently access memory that I patched? Or is Hardware Access Breakpoint imperfect? I am interested in general ideas, how would you go about detecting whether your code was patched or not, without hitting hardware breakpoints.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "164",
    "tags": [
        "hardware",
        "breakpoint",
        "patching"
    ],
    "user": "larw",
    "time": "Jul 28, 2016 at 0:35",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">My first idea would be that your program uses <a href=\"https://msdn.microsoft.com/de-de/library/windows/desktop/ms680553(v=vs.85).aspx\" rel=\"nofollow noreferrer\">ReadProcessMemory</a> to access its own address space, and the hardware breakpoint is inactive while the system is in kernel mode.</span>",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">it might acquire the context, erase the breakpoints, and then perform the scan.  if you set hardware breakpoints in other places that are known to be reached, are they hit?  if not, then that's what is happening.</span>",
            "time": null
        }
    ],
    "answers_data": []
}