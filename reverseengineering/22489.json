{
    "title": "Why is fastcall used for replacing thiscall functions in memory instead of cdecl?",
    "link": "https://reverseengineering.stackexchange.com/questions/22489/why-is-fastcall-used-for-replacing-thiscall-functions-in-memory-instead-of-cdecl",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assume I were to be reversing some game which processes all of it's movement client side and have determined some function to be of the type:</p>\n<pre><code>bool __thiscall Player::CanJump(Player *this)\n</code></pre>\n<p>that I have determined to be a member of the Player object's vtable. Now lets assume I wanted to edit that object's vtable to point to my own dll injected implementation so that I could jump whenever I wanted. I could declare it as</p>\n<pre><code>bool __fastcall CanJumpReplacement(Player *player) {\n    return true;\n}\n</code></pre>\n<p>and replace the Player's vtable entry with a pointer to this function. This works as expected, but <em>why should I use the fastcall convention here</em>? Fastcall is used almost exclusively for this purpose from what I can tell, but I was reading through the calling conventions and cdecl seems to be a much closer match to thiscall than fastcall. Both calling conventions succeeded in replacing the function.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "decompilation",
        "c++",
        "c"
    ],
    "user": "ahoward",
    "time": "Nov 9, 2019 at 0:13",
    "comments": [
        {
            "user": "Paul Gigel",
            "text": "<span class=\"comment-copy\">Doesn't the x64 Calling convention replace _thiscall anyway with _fastcall ? <a href=\"https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/cpp/build/…</a> <a href=\"https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170\" rel=\"nofollow noreferrer\">x64 calling convention</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This question is a bit confusing.</p>\n<p>Both <code>__fastcall</code> and <code>__thiscall</code> share that they use <code>ecx</code> as the first storage point. So either you implicitly say the class pointer will be in <code>ecx</code> (<code>__thiscall</code>) or you say the function is not a member function but has one argument - which also gets passed in <code>ecx</code> when using <code>__fastcall</code> so the class pointer still ends up in the right register.</p>\n<p>Also, both calling conventions use callee cleanup so no problem here, too.</p>\n<p>However, this only works for no-argument functions. If your function had an argument, it would end up in <code>edx</code> for <code>__fastcall</code>, but on the stack for <code>__thiscall</code> and therefore not work anymore.</p>\n</div>",
            "votes": "5",
            "user": "Johann Aydinbas",
            "time": "Nov 10, 2019 at 0:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ahoward",
                    "text": "<span class=\"comment-copy\">Ok, so basically fastcall is preferable for functions with no arguments, otherwise you would have to use cdecl/stdcall depending on context and read ecx manually to get the this pointer.</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">That is a different question really. For my last project that required C++ member function hooking, I wrote 2 small wrapper functions defined as <code>__declspec(naked) __stdcall</code> which had inline assembly code that turned the this pointer from <code>ecx</code> to a standard stack argument on entry, and on exit took the <code>this</code> pointer from the stack and moved it into <code>ecx</code> again.</span>",
                    "time": null
                },
                {
                    "user": "Paul Gigel",
                    "text": "<span class=\"comment-copy\">Doesn't the x64 Calling convention replace _thiscall anyway with _fastcall ? <a href=\"https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/cpp/build/…</a> <a href=\"https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170\" rel=\"nofollow noreferrer\">x64 calling convention</a></span>",
                    "time": null
                }
            ]
        }
    ]
}