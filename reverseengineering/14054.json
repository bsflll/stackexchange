{
    "title": "Why does vtable function pointers have +1?",
    "link": "https://reverseengineering.stackexchange.com/questions/14054/why-does-vtable-function-pointers-have-1",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So here is a byte sequence <code>45 A6 F7</code> in the <code>vtable</code>.<br/>\nIt points to a subroutine which is located at <code>F7A644</code>.<br/>\nIDA expresses it as \"function_symbol <strong>+1</strong>\"<br/>\nWhy does it plus one?<br/>\nWhy is it <code>45 A6 F7</code> rather than <code>44 A6 F7</code>?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "470",
    "tags": [
        "ida",
        "disassembly",
        "arm",
        "vtables"
    ],
    "user": "ManDongI",
    "time": "Jan 23, 2017 at 10:09",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">Please <a href=\"https://reverseengineering.stackexchange.com/posts/14054/edit\">edit</a> your question and add what architecture (and, if important, what OS) this code is for. At least with the correct tags, and preferably also in the main text.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If it is ARM architecture that may use THUMB encoding it can be result of the following issue:</p>\n<p>If I remember correctly, calls to the virtual functions can be executed with assembly command similar to <code>BLX</code> as indirect jump, which allows switching between ARM and THUMB encoding. In this case this <code>+ 1</code> means that the target of the jump is encoded in THUMB.</p>\n<p>See <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204j/Cihfddaf.html\">here</a> for more information about this mechanism.</p>\n<blockquote>\n<p>All these instructions cause a branch to label, or to the address\n  contained in Rm. In addition:</p>\n<ul>\n<li>The BL and BLX instructions copy the address of the next instruction into lr (r14, the link register).</li>\n<li>The BX and BLX instructions can change the processor state from ARM to Thumb, or from Thumb to ARM. BLX label always changes the state. BX\n  Rm and BLX Rm derive the target state from bit[0] of Rm:</li>\n<li>if bit[0] of Rm is 0, the processor changes to, or remains in, ARM state</li>\n<li>if bit[0] of Rm is 1, the processor changes to, or remains in, Thumb state.</li>\n</ul>\n</blockquote>\n</div>",
            "votes": "9",
            "user": "w s",
            "time": "Nov 27, 2016 at 10:25",
            "is_accepted": true,
            "comments": []
        }
    ]
}