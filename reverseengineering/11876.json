{
    "title": "Call function in remote (OpenOCD) target from gdb",
    "link": "https://reverseengineering.stackexchange.com/questions/11876/call-function-in-remote-openocd-target-from-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any way to call a function on a remote target that's attached via JTAG? Currently I have OpenOCD hooked up to a target and I'm attached with gdb, and I know the address of the function I want to call as well as its signature.</p>\n<p>With a normal binary and gdb, the following (somewhat surprisingly) works. Supposing I have a function like:</p>\n<pre><code>static int f(int x) {\n    printf(\"The value of x is %d\\n\", x);\n    return x*2;\n}\n</code></pre>\n<p>I can run that function, even in a stripped binary, under gdb, as long as I know its address:</p>\n<pre><code>cosimo:~ moyix$ gdb -q --args ./hello \nReading symbols from ./hello...(no debugging symbols found)...done.\n(gdb) break *0x100000ee0\nBreakpoint 1 at 0x100000ee0\n(gdb) r\nStarting program: /Users/moyix/hello \n\nBreakpoint 1, 0x0000000100000ee0 in _mh_execute_header ()\n(gdb) call (0x100000f20)(10)\nThe value of x is 10\n$1 = 20\n</code></pre>\n<p>But trying to do something similar with gdb hooked up to OpenOCD gives me:</p>\n<pre><code>moyix@dev:~/git/openocd-code$ arm-none-eabi-gdb -q\n(gdb) target remote localhost:3333\nRemote debugging using localhost:3333\n0x8006b06c in ?? ()\n(gdb) call (0xC0066E08)(0x10000, 4, 0, 0, 0)\nEntry point address is not known.\n(gdb) \n</code></pre>\n<p>I gather from a bit of googling that it's because <a href=\"https://stackoverflow.com/questions/14549440/gdb-function-entry-point-not-known\">gdb wants somewhere to place its dummy stack frame</a>, and since it has no symbol information or even an entry point for the binary it doesn't know where to put it. Is there any way to manually give it a location for its dummy frame (with the hope that it'll put things back the way they were once the function executes...)?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "896",
    "tags": [
        "gdb",
        "jtag"
    ],
    "user": "Brendan Dolan-Gavitt",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This isn't the cleanest solution, and I still don't know how to make gdb do it properly. My solution was to simply manually \"call\" the function by:</p>\n<ol>\n<li>Save the current set of registers (<code>info reg</code> =&gt; log file).</li>\n<li>Set up parameters by manually modifying registers, pushing things onto the stack, etc, being careful to make sure not to overwrite anything higher than the current stack pointer.</li>\n<li>Put a breakpoint on each return from the function I want to call. (Note: possibly in the future it would work better to just set the return address to some arbitrary point and then set a breakpoint on that point.)</li>\n<li>Set the program counter to the address of the function I want to call.</li>\n<li>Once the breakpoint hits, inspect return values etc.</li>\n<li>Restore the register values by hand (including the stack pointer).</li>\n</ol>\n<p>This isn't perfect, since it requires a lot of manual effort at the beginning and end, but works well enough for occasional use.</p>\n</div>",
            "votes": "1",
            "user": "Brendan Dolan-Gavitt",
            "time": "Jan 31, 2016 at 18:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have come across this question for the same issue on a different use case: debugging an ELF binary through <code>qemu-arm</code>, trying to call code from the attached process.</p>\n<p>I could give <code>gdb</code> the information it missed, designating the target binary file as a symbol file (using the <code>symbol-file</code> command).</p>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Files.html\" rel=\"nofollow\">https://sourceware.org/gdb/onlinedocs/gdb/Files.html</a></p>\n<p>Of course, it might be more complicated in your case. Linking a binary file using the live in-device addresses might do the trick, although it may not be trivial.</p>\n</div>",
            "votes": "0",
            "user": "Fhtagn",
            "time": "Jul 15, 2016 at 16:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}