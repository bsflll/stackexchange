{
    "title": "3 questions on assembly - syntax, meaning, and equivalent in high level code (eg C++)",
    "link": "https://reverseengineering.stackexchange.com/questions/14650/3-questions-on-assembly-syntax-meaning-and-equivalent-in-high-level-code-eg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For the following example, using x86 code in AT&amp;T format:</p>\n<pre><code>xor $0x20, (%eax) \nand $0x20, %ah \nor $0x20, %dh \ndec (%edi) \ndec %si\ndec %sp\ndec %bp\n</code></pre>\n<p>My understanding:</p>\n<pre><code>Line 1: takes value in %eax and does an XOR operation with 0x20\n\nLine 2: takes value in %ah and dies an AND operation with 0x20\n\nLine 3:  takes value in %dh and does an OR operation with 0x20.\n\nLine 4: decrements value in %edi by 1\n\nLine 5: decrements value in %si by 1\n\nLine 6: decrements value in %sp by 1\n\nLine 7: decrements value in %bp by 1\n</code></pre>\n<p>Questions: </p>\n<ol>\n<li><p>What happens to the result after each step of code has been run?</p></li>\n<li><p>Does the order of the operands matter? If yes why?</p></li>\n<li><p>How do you construct some equivalent code (e.g. decompile into c++) from this assembly code?</p></li>\n</ol>\n<p>This is not a homework question - I am new to assembly.\nExample code is not from actual code - it's to help me get a better understanding &amp; illustrate my questions. </p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "467",
    "tags": [
        "assembly",
        "decompilation",
        "binary"
    ],
    "user": "unseen_rider",
    "time": "Feb 18, 2017 at 1:20",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">something does not seem quite right about those offsets</span>",
            "time": null
        },
        {
            "user": "ysap",
            "text": "<span class=\"comment-copy\">Where are the arguments?</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">@unseen_rider This article may help you with some of the terminology: <a href=\"https://docs.oracle.com/cd/E19120-01/open.solaris/817-5477/6mkuavhrv/index.html\" rel=\"nofollow noreferrer\">Instructions, Operands, and Addressing</a>. Are you interested in any particular instruction set? x86 for example</span>",
            "time": null
        },
        {
            "user": "ysap",
            "text": "<span class=\"comment-copy\">As the article @SYS_V links to suggests, you should rename these to \"operands\" rather than \"arguments\". By \"arguments\" one usually means the input given to a function, and since you're asking about C++, your intention is unclear.</span>",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">If you're trying to double-check your understanding of provided code, perhaps share your thoughts and let us correct you instead of providing you with the answers?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Note</strong>: this answer corresponds to the <a href=\"https://reverseengineering.stackexchange.com/revisions/14650/5\">original question</a>.</p>\n<p>I am new to assembly as well so I can see where you are coming from. With that being said, there seem to be quite a few issues with the contrived code that you have posted. </p>\n<blockquote>\n<p>Does the order of the operands matter? If yes why?</p>\n</blockquote>\n<p>There are two different styles of human-readable mnemonics used to represent CPU instruction codes: AT&amp;T and Intel. While the order the operands are shown in is different between Intel and AT&amp;T syntax, the order of instruction code bytes in memory is constant.</p>\n<p>Intel syntax:</p>\n<pre><code>08048074 &lt;main&gt;:\n 8048074:       55                      push   ebp\n 8048075:       89 e5                   mov    ebp,esp\n 8048077:       b8 00 00 00 00          mov    eax,0x0\n 804807c:       5d                      pop    ebp\n 804807d:       c3                      ret    \n</code></pre>\n<p>AT&amp;T syntax:</p>\n<pre><code>08048074 &lt;main&gt;:\n 8048074:       55                      push   %ebp\n 8048075:       89 e5                   mov    %esp,%ebp\n 8048077:       b8 00 00 00 00          mov    $0x0,%eax\n 804807c:       5d                      pop    %ebp\n 804807d:       c3                      ret  \n</code></pre>\n<p>The (little-endian) byte sequence <code>89 e5</code> is represented as <code>mov ebp,esp</code> in Intel syntax and as <code>mov %esp,%ebp</code> in AT&amp;T syntax. Though the mnemonic representations of the operands are opposite of each other, they represent the same byte sequence. The order of the opcode mnemonics matters in that it is determined by the syntax used to represent the instruction codes.</p>\n<h3>The code</h3>\n<blockquote>\n<p>What happens to the result after each step of code has been run?</p>\n</blockquote>\n<p>Every line of the code posted in the question except the last contains at least one illegal operand so only that line could feasibly run.</p>\n<p>AT&amp;T syntax is assumed.</p>\n<p><code>0x2000: cs cs cs</code></p>\n<ul>\n<li><code>%cs</code> is a <a href=\"https://reverseengineering.stackexchange.com/questions/2006/how-are-the-segment-registers-fs-gs-cs-ss-ds-es-used-in-linux\">segment register</a> and, being a <a href=\"http://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html#registers\" rel=\"nofollow noreferrer\">register</a>, must be prefixed with the <code>%</code> symbol. There are 3 operands here that are all the same register and no instruction. This is illegal. I am not sure what you envisioned would happen here.</li>\n</ul>\n<p><code>0x2001: xor x20,(eax)</code></p>\n<ul>\n<li><code>x20</code> is an illegal operand. Constants are <a href=\"http://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html#instructions\" rel=\"nofollow noreferrer\">immediate</a> operands which must be prefixed with the <code>$</code> symbol, so this operand should be <code>$0x20</code>. <code>%eax</code> is a register, hence the <code>%</code> prefix is required. <code>(eax)</code> should instead be <code>(%eax)</code>.</li>\n</ul>\n<p><code>0x2002: and x20,%ah</code></p>\n<ul>\n<li><code>x20</code> should be <code>$0x20</code></li>\n</ul>\n<p><code>0x2003: or x20, %dh</code></p>\n<ul>\n<li><code>x20</code> should be <code>$0x20</code></li>\n</ul>\n<p><code>0x2004: dec (ebi)</code></p>\n<ul>\n<li><code>ebi</code> looks like it is supposed to be a register. Did you mean <code>%edi</code> or <code>%ebx</code>? Either way, it lacks the <code>%</code> prefix</li>\n</ul>\n<p><code>0x2005: dec %si</code></p>\n<ul>\n<li>The <code>dec</code> instruction decrements the contents of its operand by one. So the value stored in <code>%si</code> will be decremented.</li>\n</ul>\n<p>Fixed up, the code would look like this:</p>\n<pre><code>xor $0x20, (%eax)\nand $0x20, %ah\nor  $0x20, %dh\ndec (%edi)\ndec %si\n</code></pre>\n<blockquote>\n<p>How do you construct some equivalent code (e.g. c++) from this assembly code?</p>\n</blockquote>\n<p>Assuming that the corrected code is actually correct, someone with sufficient understanding could simply look at this snippet and create a roughly equivalent statement or sequence of statements in a high level language. For mere mortals, there are tools called decompilers.</p>\n<h3>Resources</h3>\n<p><a href=\"https://download-mirror.savannah.gnu.org/releases/pgubook/ProgrammingGroundUp-1-0-booksize.pdf\" rel=\"nofollow noreferrer\">Programming from the Ground Up</a> by Jonathan Bartlett and\n\"Professional Assembly Language\" by Richard Blum are pretty good IMO. A more technical resource is the <a href=\"https://refspecs.linuxfoundation.org/elf/abi386-4.pdf\" rel=\"nofollow noreferrer\">System V Application Binary Interface Intel386 Architecture Processor Supplement</a>, which sheds light on some of the mysteries of the processor and virtual memory. <a href=\"https://stackoverflow.com/tags/x86/info\">SO's x86 wiki</a> has a list of many resources. Of course, there are also the <a href=\"https://software.intel.com/en-us/articles/intel-sdm\" rel=\"nofollow noreferrer\">Intel manuals</a>.</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "unseen_rider",
                    "text": "<span class=\"comment-copy\">thanks for your answer. Very useful and helpful. I have updated my questions earlier following this, and have two more assembly lines of code at the bottom. - Do they decrement the base pointer and stack pointer values? What are the implications of this? What does the code do from a high level perspective?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@unseen_rider the question is now so different from the original that the answer does not really reflect what is being asked. In a case like this my advise is to make a new question. Also, if you like a particular answer you should  <a href=\"http://reverseengineering.stackexchange.com/help/someone-answers\">accept it</a></span>",
                    "time": null
                },
                {
                    "user": "unseen_rider",
                    "text": "<span class=\"comment-copy\">Ok thank you. Have done. <a href=\"http://reverseengineering.stackexchange.com/questions/14682/3-questions-on-assembly-meaning-of-code-decompilation-in-linux-higher-level\" title=\"3 questions on assembly meaning of code decompilation in linux higher level\">reverseengineering.stackexchange.com/questions/14682/…</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To answer your third question, from a computer science aspect c++ or any other highlevel language that isn't one to one mnemonic map of machine opcodes; soul purpose is to mitigate complexity. That being said c++ we can infer isn't or shouldn't be a 1 to 1 map to assembly. Some c syntax can't be exactly mapped. </p>\n<p>For example a jump statement progresses the code to any other byte. So a jump can act like a conditional branch or a function call, etc. All very different statements in c++ yet they use the key part, jump instruction. </p>\n<p>I think a better approach would be to ask how a c++ basic statements compile to assembly. If you understand and know thoughs it then is a simple thing to find those blocks in assembly.</p>\n<p><strong>note</strong> In modern setting most high level languages don't compile to x86 assembly but byte code or some operating specific format, often not far from assembly, however different enough that it requires the operating system to run. This is to abstract the underlying hardware so software doesn't have to get recompiled.</p>\n</div>",
            "votes": "1",
            "user": "marshal craft",
            "time": "Feb 16, 2017 at 7:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}