{
    "title": "How to calculate value inside stack segment (SS)",
    "link": "https://reverseengineering.stackexchange.com/questions/25892/how-to-calculate-value-inside-stack-segment-ss",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an assembly row which the following information:</p>\n<pre><code>EBP = 006FFB50\nSS  = 002B  \n</code></pre>\n<p>When I looked on this row:</p>\n<pre><code>mov eax,dword ptr ss:[ebp+8]  \n</code></pre>\n<p>I assumed that EBP + 8 = 006FFB50 + 8 = 006FFB58.<br/>\nBut according to x64DBG, this is the result:</p>\n<pre><code>dword ptr [ebp+8]=[006FFB58]=006FFC98  \n</code></pre>\n<p>I don't understand how it was calculated.<br/>\nWhy <code>ss:[006FFB58]</code> is equal to <code>006FFC98</code>?</p>\n<p>Picture for reference with more information:<br/>\n<a href=\"https://i.sstatic.net/MZbco.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/MZbco.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "554",
    "tags": [
        "assembly",
        "x64dbg",
        "stack"
    ],
    "user": "E235",
    "time": "Sep 15, 2020 at 11:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Registers <code>ss</code>, <code>cs</code>, <code>ds</code>, <code>es</code>, <code>gs</code>, <code>fs</code> are special. They are called <em>segment registers</em> and contain not addresses but <em>selectors</em>.</p>\n<p>A selector is used by the CPU as a reference to a segment - area of memory with a specific base (start address), limit (end address) and permissions.</p>\n<p>Selectors and segments are set up by the OS and in theory there may be many different segments, however in practice all modern OSes use flat memory segments (0 to 0xFFFFFFFF for 32-bit processes) for the standard code and data segments (<code>ss</code>, <code>cs</code>, <code>ds</code>)<sup>1</sup>. This means that in the expression <code>ss:[ebp+8]</code>, only the value of <code>EBP</code> is used for calculating the address. In your case it is indeed correct that</p>\n<p>EBP + 8 = 006FFB50 + 8 = 006FFB58</p>\n<p>which matches the value shown in brackets.</p>\n<p>However, the value after the <code>=</code> sign in the debugger is <strong>not</strong> the result of the calculation but the value which is present <em>in memory</em> at that address. If you open a memory dump and go to address 006FFB58, you should see <code>006FFC98</code> there.</p>\n<p>The brackets in the debugger hint signify <strong>memory dereference</strong>, similarly to the assembly syntax.</p>\n<p><sup>1</sup> <code>gs</code> and <code>fs</code> are treated differently and are usually used for Thread Local Storage (TLS) block which is different for every thread and does not start at 0 so e.g. fs:0 does not map to the RAM address 0.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Sep 15, 2020 at 15:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}