{
    "title": "Capturing ADB commands sent by a Windows program to a phone",
    "link": "https://reverseengineering.stackexchange.com/questions/30044/capturing-adb-commands-sent-by-a-windows-program-to-a-phone",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to see, what ADB commands a Windows program is sending to my Android phone, to see how its functions operate.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "511",
    "tags": [
        "android"
    ],
    "user": "aaas",
    "time": "Oct 26, 2023 at 9:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>ADB is a combination of three components: <sup><a href=\"https://developer.android.com/studio/command-line/adb\" rel=\"nofollow noreferrer\">1</a></sup></p>\n<blockquote>\n<ol>\n<li>A client, which sends commands. The client runs on your development machine. You can invoke a client from a command-line terminal by\nissuing an adb command.</li>\n<li>A daemon (adbd), which runs commands on a device. The daemon runs as a background process on each device.</li>\n<li>A server, which manages communication between the client and the daemon. The server runs as a background process on your development\nmachine.</li>\n</ol>\n</blockquote>\n<h2>Capture local TCP traffic</h2>\n<p>So you have multiple possibilities to capture ADB traffic. The easiest way would be to capture the TCP data sent from adb client to the server. Both are running by default on your computer on your user account, so they simply communicate via localhost (as far as I know not protected in any way). That communication can therefore be sniffed using Wireshark. I am not sure if Wireshark already contains a dissector for adb client-server communication (or at least there are third party dissectors available of adb traffic) but even if not you should see the commands in plain text in the traffic and you can execute sample commands where you exactly know the command to learn how such packets do look alike.</p>\n<h2>Capture USB traffic</h2>\n<p>The second way would be to capture the USB traffic. How that can be done depends on the used OS, but as far as I know there should be a possibility on each of the major OS (Windows, Linux, MacOS).</p>\n<h2>Capture used adb command-line</h2>\n<p>A third way (if the program that sends adb command executes commands using adb client, you could monitor the created processes and their command-line. On Windows you you for example use <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/procmon\" rel=\"nofollow noreferrer\">Sysinternals Process Monitor</a> to monitor all process creation and their command-line.</p>\n</div>",
            "votes": "3",
            "user": "Robert",
            "time": "Mar 9, 2023 at 13:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In addition to the solutions that @Robert provided, one of the simplest ways to see adb logs is to use the command <code>adb logcat</code>.</p>\n<p>Logcat is a command-line tool that dumps a log of system messages, including stack traces when the device throws an error and messages that you have written from your app with the Log class.</p>\n</div>",
            "votes": "0",
            "user": "h0r53",
            "time": "Jul 20, 2022 at 18:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}