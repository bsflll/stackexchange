{
    "title": "Smart approach or Brute force?",
    "link": "https://reverseengineering.stackexchange.com/questions/23554/smart-approach-or-brute-force",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Background:</strong> I'm a beginner reverse engineer and I wanted to try writing my own c++ programs and reverse-engineering them. I wrote something and I'm not sure a smart way of reversing it. Usually, I can think of it as a math formula and just do it in reverse to figure out the algorithm but I can't think of any other way than brute-forcing for this scenario.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    char key[9];\n    int total = 0;\n\n    cout &lt;&lt; \"Enter Key: \";\n\n    cin &gt;&gt; key;\n\n    for (char item : key)\n    {\n        total = total + (int)item;\n    }\n\n    if (total == 895)\n    {\n        puts(\"Correct\");\n    }\n    else\n    {\n        puts(\"Sorry buddy\");\n    }\n\n    return 0;\n}\n</code></pre>\n<p>btw sorry if my c++ isn't very good. I am new to this language haha</p>\n<p><strong>Main Goal:</strong> I want to know if there is a smarter way of going about this or is brute force the only way. Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "155",
    "tags": [
        "c++"
    ],
    "user": "arian",
    "time": "Mar 28, 2020 at 9:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your code basically takes 9 chars, 8 from user input + 1 null terminator.\neach one can be between 0-255.</p>\n<p>You char array bytes are <em>signed</em>, so maximum value for each is 127 (hex: 7F)</p>\n<p>You want the result of those byte values to end up equal to 895.</p>\n<p>In order to achieve the result, you need to pass any combination of bytes that sum up to your value.</p>\n<p>Example:\n127*7+6 = 895</p>\n<p>hex:\n\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x7F\\x06</p>\n<p>This will solve your algorithm:</p>\n<p><code>echo 7f7f7f7f7f7f7f06 | xxd -r -p|./compiled_executable</code></p>\n<p><code>xxd -r -p</code> simply takes hex values and converts them to chars.</p>\n<p>Note that the max value your input can end up with is 1016. More than that - nothing will solve it and it will always fail.</p>\n</div>",
            "votes": "1",
            "user": "Yotamz",
            "time": "Mar 28, 2020 at 10:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The question is not clear. Are you asking about</p>\n<ol>\n<li>an approach to finding a single input that results in \"Correct\" being printed? or</li>\n<li>an approach to deriving a method that will generate correct inputs for you (e.g. keygenning)?</li>\n</ol>\n<p>If it is 1, then the answer is as simple as using a calculator.</p>\n<p>If it is 2, then many options exist, such as using a constraint solver (z3, angr, KLEE).</p>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Mar 28, 2020 at 21:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}