{
    "title": "Problem with IDA pro 6.8 disassemble galaxy s6 sboot",
    "link": "https://reverseengineering.stackexchange.com/questions/10995/problem-with-ida-pro-6-8-disassemble-galaxy-s6-sboot",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have some problem with Galaxy S6 boot loader (<code>sboot.bin</code>).</p>\n<p>From <code>0x3F000</code> of that file, I think that there exists the real boot loader.</p>\n<p>So I tried to disassemble it with ida 6.8 pro (64bit)</p>\n<p>But It does not disassemble it clearly. (in both thumb mode and arm mode)</p>\n<p>IDA pro 6.8 can support the Galaxy S6 boot loader (<code>sboot.bin</code>)?</p>\n<p>Is there anyone who succeed in disassembling the Galaxy S6 boot loader (<code>sboot.bin</code>)? (aka armv8, aarch64 architecture)</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "android",
        "arm"
    ],
    "user": "J.Cho",
    "time": "Oct 29, 2021 at 7:31",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Why not use the latest IDA version? Maintenance ran out?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Fernand Lone Sang from Quarkslab has had success disassembling the S6 bootloader (ARMv8, AArch64):</p>\n<ul>\n<li><a href=\"https://blog.quarkslab.com/reverse-engineering-samsung-s6-sboot-part-i.html\" rel=\"nofollow noreferrer\">Reverse Engineering Samsung S6 SBOOT - Part I</a></li>\n<li><a href=\"https://blog.quarkslab.com/reverse-engineering-samsung-s6-sboot-part-ii.html\" rel=\"nofollow noreferrer\">Reverse Engineering Samsung S6 SBOOT - Part II</a></li>\n</ul>\n<p>SBOOT's base address is identified to be <code>0x02102000</code> by executing this python script:</p>\n<pre><code>import sys\nimport string\nimport struct\n\nRT_SVC_DESC_FORMAT  = \"BBB5xQQQ\"\nRT_SVC_DESC_SIZE    = struct.calcsize(RT_SVC_DESC_FORMAT)\nRT_SVC_DESC_OFFSET  = 0xcb50\nRT_SVC_DESC_ENTRIES = (0xcc10 - 0xcb50) / RT_SVC_DESC_SIZE\n\nif len(sys.argv) != 2:\n    print(\"usage: %s &lt;sboot.bin&gt;\" % sys.argv[0])\n    sys.exit(1)\n\nsboot_file = open(sys.argv[1], \"rb\")\nsboot_data = sboot_file.read()\n\nrt_svc_desc = []\nfor idx in range(RT_SVC_DESC_ENTRIES):\n    start = RT_SVC_DESC_OFFSET + (idx &lt;&lt; 5)\n    desc = struct.unpack(RT_SVC_DESC_FORMAT,\n                         sboot_data[start:start+RT_SVC_DESC_SIZE])\n    rt_svc_desc.append(desc)\n\nstrlen = lambda x: 1 + strlen(x[1:]) if x and x[0] in string.printable else 0\n\nfor base_addr in range(0x2100000, 0x21fffff, 0x1000):\n    names = []\n    print(\"[+] testing base address %08x\" % base_addr)\n    for desc in rt_svc_desc:\n        offset = desc[3] - base_addr\n        if offset &lt; 0:\n            sys.exit(0)\n        name_len = strlen(sboot_data[offset:])\n        if not name_len:\n            break\n        names.append(sboot_data[offset:offset+name_len])\n    if len(names) == RT_SVC_DESC_ENTRIES:\n        print(\"[!] w00t!!! base address is %08x\" % base_addr)\n        print(\"    found names: %s\" % \", \".join(names))\n</code></pre>\n</div>",
            "votes": "2",
            "user": "pevik",
            "time": "Jul 27, 2021 at 23:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>it's an ARM64 binary. If we're looking at the same sboot.bin, it's actually starting at offset 10:</p>\n<pre><code>0x00000000      0x00000010      DCD 0x10        ; ^P\n0x00000004      0xe99c208a      DCD 0xe99c208a  ; &lt;8A&gt; &lt;9C&gt;&lt;E9&gt;\n0x00000008      0x00000000      DCD 0x0 ; \n0x0000000c      0x00000000      DCD 0x0 ; \n0x00000010      0x14000002      B 0x18\n        -------------------------------\n0x00000014      0x14000000      B 0x14\n        -------------------------------\n0x00000018      0x58000a80      LDR X0, #336            ; 0x168\n0x0000001c      0xb9400000      LDR W0, [X0, #0]\n0x00000020      0xd2b00001      MOVZ X1, 0x8000, LSL #16\n</code></pre>\n<p>Try using disarm (<a href=\"http://newosxbook.com/tools/disarm.html\" rel=\"nofollow\">http://newosxbook.com/tools/disarm.html</a>) since IDA somehow has trouble with this file. (There are also apparently ARM32 bits towards its end)</p>\n</div>",
            "votes": "0",
            "user": "Just helping",
            "time": "May 27, 2016 at 19:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">Since ida6.9 there is ARM64 support. Use Alt-S to set your segment bitness to 64 to be able to use it.</span>",
                    "time": null
                }
            ]
        }
    ]
}