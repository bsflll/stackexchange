{
    "title": "Android Intercepts for log the Funtion Calls to javax",
    "link": "https://reverseengineering.stackexchange.com/questions/16069/android-intercepts-for-log-the-funtion-calls-to-javax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Im reversing an apk that uses a native library  <code>.so</code> to make calls to some  Java methods thru reflexion</p>\n<p>I know by analysing the app that exist the followings calls:</p>\n<pre><code>import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\n//This metods are called from native c++ \n//via reflection\nMac mac= Mac.getInstance(method);\n//Log this methods parameters\nSecretKeySpec key=new SecretKeySpec(byte[],string);\nmac.init(key);\nret=m.doFinal();//log the return\n</code></pre>\n<p>The aplication is debuggeable in the manifest</p>\n<p>How I can log the parameters of this methods?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "153",
    "tags": [
        "decompilation",
        "android",
        "java"
    ],
    "user": "Rolando Corratge Nieves",
    "time": "Aug 11, 2017 at 16:39",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are several ways you can go about doing this. <br/><br/></p>\n<p>Rooted android:<br/>\nUse Xposed with Inspeckage or your own module to log the calls to these methods.<br/><br/>\nFor a non-rooted android, it's a bit more complicated but shouldn't be too much of a problem.<br/>\nDecompile the APK and add smali classes that have the same signature of the functions that you intend to log.<br/> inside the functions you created.<br/>\nFor example, if you're looking to hook the method Log.e, then your smali file would look something like this:<br/></p>\n<pre><code>.class public LmyLog;\n.super Ljava/lang/Object;\n\n.method public e(Ljava/lang/String;Ljava/lang/String;)I\n    .locals 1\n    # log whatever params you need \n    invoke-static {p0, p1}, LsomeClassForLoggin;-&gt;log(Ljava/lang/String;Ljava/lang/String;)V\n\n    invoke-static {p0,p1}, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I\n\n    move-result v0\n\n    return v0\n.end method \n</code></pre>\n<p>Now, this alone won't be enough because your methods won't get called from the .so.<br/>\nSo next step would be to locate the classname of the method you're looking to hook and log and edit it in a hex editor.<br/>\nSo in this example we'll be looking for Landroid/util/Log; and we'll be replacing it with LmyLog;<br/>\nThat should redirect the calls from smali to your own code.</p>\n</div>",
            "votes": "1",
            "user": "NotGI",
            "time": "Nov 8, 2017 at 19:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}