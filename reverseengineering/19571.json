{
    "title": "Is the value of EBP before the main function important?",
    "link": "https://reverseengineering.stackexchange.com/questions/19571/is-the-value-of-ebp-before-the-main-function-important",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So before we come to the main function, it looks we are in a function with a name __libc_start_main</p>\n<p>and before we come to our main function we obviously push EBP value in the stack ( the value of EBP before main function, in the __libc_start_main function)</p>\n<p>so first off is this value important? after the execution of main function, will the __libc_start_main function need this value?</p>\n<p>is there any function that gets called before __libc_start_main therefore making this EBP value important? </p>\n<p>i tested it and even if i overwrite this value(in the stack) with overflowing, the program finishes with no problem but i don't get how and why? shouldn't it result in error or page fault? </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "x86",
        "memory",
        "buffer-overflow",
        "stack",
        "register"
    ],
    "user": "John P",
    "time": "Oct 8, 2018 at 15:25",
    "comments": [
        {
            "user": "user464014",
            "text": "<span class=\"comment-copy\">All general-purpose registers are zeroed by the Linux loader before the program starts executing, which gets passed to __libc_start_main I believe</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>__libc_start_main</code> is called by the <em>entry point code</em> (usually in a file called <code>crt0.S</code> or similar) and <em>that</em> code usually sets up the initial <code>EBP</code> value (usually to 0, to denote end of the call stack for the debuggers). Here's a sample entry point code from a random ELF binary:</p>\n<pre><code>_start:\n     xor     ebp, ebp\n     pop     esi\n     mov     ecx, esp\n     and     esp, 0FFFFFFF0h\n     push    eax\n     push    esp             ; stack_end\n     push    edx             ; rtld_fini\n     push    offset __libc_csu_fini ; fini\n     push    offset __libc_csu_init ; init\n     push    ecx             ; ubp_av\n     push    esi             ; argc\n     push    offset main     ; main\n     call    ___libc_start_main\n     hlt\n</code></pre>\n<p>While <code>__libc_start_main</code> itself <em>could</em> initialize <code>EBP</code> to 0, this would make it appear as if it's the first code in the binary when looking at the call stack, which is not correct (the execution begins at <code>_start</code>, the entry point).</p>\n<p>Besides, <code>__libc_start_main</code>  can be (and often is) written in C instead of assembly, and it's easier for the compiler to generate the standard prolog code for it instead of making some kind of special case exception.</p>\n<p>As for overwriting the value, you don't get a crash because:</p>\n<ol>\n<li><code>ebp</code> is not actually used by the caller of <code>___libc_start_main</code> (the entry point code)</li>\n<li><code>___libc_start_main</code> does not actually return, since it calls <code>exit()</code> with the return value of <code>main()</code> to directly exit to the OS, so your corrupted <code>ebp</code> does not matter</li>\n</ol>\n<p>In the unlikely event that <code>___libc_start_main</code> does return (e.g. due to a bug in libc), the entry point code will execute the <code>hlt</code> instruction which is privileged so the process will be killed by the OS.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Oct 8, 2018 at 18:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John P",
                    "text": "<span class=\"comment-copy\">One question, why in the wikipedia of crt0, in the code for x86_64 the entry code directly calls main instead of __libc_start_main? <a href=\"https://en.wikipedia.org/wiki/Crt0\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Crt0</a></span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">It depends on the specific compiler/toolchain/libc used. __libc_start_main can perform additional tasks before or after calling main, but in some cases you donâ€™t really need them</span>",
                    "time": null
                },
                {
                    "user": "John P",
                    "text": "<span class=\"comment-copy\">so overall if we have _libc_start_main, the order of execution is crt0 -&gt; _libc_start_main -&gt; main, correct?</span>",
                    "time": null
                }
            ]
        }
    ]
}