{
    "title": "Reversing Daly BMS BLE protocol by mocking the peripheral",
    "link": "https://reverseengineering.stackexchange.com/questions/30464/reversing-daly-bms-ble-protocol-by-mocking-the-peripheral",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on an app that helps users to monitor their batteries. The app must support Daly BMS and I am reversing the protocol over BLE.</p>\n<p>So far, I have the services/characteristics UUID. Some of them are GATT and two are customs. The laters I think are used to exchange information about the battery:</p>\n<pre><code>#define SERVICE_DALY_NATIVE_UUID                                    \"f000ffc0-0451-4000-b000-000000000000\"\n#define SERVICE_DALY_NATIVE_CHARACTERISTIC_NATIVE1_UUID             \"f000ffc1-0451-4000-b000-000000000000\"\n#define SERVICE_DALY_NATIVE_CHARACTERISTIC_NATIVE2_UUID             \"f000ffc2-0451-4000-b000-000000000000\"\n</code></pre>\n<p>I have written an ESP32 firmware to mock the actual BLE device that comes with the BMS (attached to the UART).\nI reversed most UART packets so far (as well as for RS-485 and CANbus).\nMy peripheral advertise itself as \"DL-01020304056\".</p>\n<p>The Daly BMS app sees my device and successfully connects to it.\nBut then the app sounds to be negotiating the MTU as it displays \"Request MTU failed\" error message, and then disconnects.</p>\n<p>Therefore I then tried to setup several MTU on the peripheral side (500, 512 and 517) but this did not overcome the issue.</p>\n<p>What should I do?</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "505",
    "tags": [
        "bluetooth"
    ],
    "user": "St√©phane de Luca",
    "time": "Jun 1, 2022 at 16:48",
    "comments": [],
    "answers_data": []
}