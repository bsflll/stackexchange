{
    "title": "Trying to identify block of code which generates 256 bit key",
    "link": "https://reverseengineering.stackexchange.com/questions/19042/trying-to-identify-block-of-code-which-generates-256-bit-key",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reversing a C++ program using IDA PRO to examine how the some data is stored, encrypted and decrypted.</p>\n<p>I've managed to identify the data is encrypted with AES CBC 16 block and 256 bit key. I have tested this as I have found the generated key in the program and managed to decrypt the data using online tools.</p>\n<p>The problem I have is working out how the AES 256 bit key is generated. I have identified the code but is several hundered lines long. I \"think\" its a cut n copy of one of the hash functions from OpenSSL as I see references to that in other areas of the code but I cant be 100% sure.</p>\n<p>There isn't much to go on in the code except a few magic numbers like 0x2AAAAAAB and that 3 DWORDS are pushed to the stack before the sub is called.</p>\n<p>I've downloaded the OpenSSL code but cant find anything yet. I've also used tools like Detect it Easy and a Plugin for IDA, which finds some crypto signatures which I BP, but they are never hit when stepping over the keygen function.</p>\n<p>Can anyone recommend anything what can help which this ? My ASM skills are no where near good enough to Single Step several hundreds of instructions.</p>\n<p>EDIT: I used the Hex Rays decomplier for the specific func and it churned out only a few lines of code !?!</p>\n<p>I've put it on paste bin at:</p>\n<p><a href=\"https://pastebin.com/y6Zu42Ux\" rel=\"nofollow noreferrer\">https://pastebin.com/y6Zu42Ux</a></p>\n<p>Can anyone explain what it does ? However I'm not even sure this is the correct code as no matter where I press F5 to generate the Pseudo Code, it gives me the same output.</p>\n<p>EDIT: here is the paste of the full code</p>\n<p><a href=\"https://pastebin.com/x0pjyuZD\" rel=\"nofollow noreferrer\">https://pastebin.com/x0pjyuZD</a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "624",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "henda79",
    "time": "Aug 12, 2018 at 10:42",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<span class=\"comment-copy\">Please also make the disassembly listing available for this function.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">googling the constants 0xc48, 0x848 and 0x448 is a good idea. <a href=\"http://www.rohitab.com/discuss/topic/36066-blowfish/\" rel=\"nofollow noreferrer\">rohitab.com/discuss/topic/36066-blowfish</a> relates this to blowfish somehow</span>",
            "time": null
        },
        {
            "user": "henda79",
            "text": "<span class=\"comment-copy\">added a pastebin link to the full code</span>",
            "time": null
        },
        {
            "user": "henda79",
            "text": "<span class=\"comment-copy\">@sudhackar There are references to blowfish in the code but I'm not sure this routine is part of it. I've posted the full code of that routine and a few small subs it uses</span>",
            "time": null
        },
        {
            "user": "henda79",
            "text": "<span class=\"comment-copy\">Yes, I found the decrypt routine as I can see the cleartext at the end and I can see the key used to decrypt, but I cant work out how it generates the key as the routine is so long.</span>",
            "time": null
        }
    ],
    "answers_data": []
}