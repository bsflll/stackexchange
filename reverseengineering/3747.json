{
    "title": "How to dump the bootloader of NetBSD router?",
    "link": "https://reverseengineering.stackexchange.com/questions/3747/how-to-dump-the-bootloader-of-netbsd-router",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently acquired root access to an Apple Airport Express router (2nd gen), and I would like to dump the current bootloader of the device to a .bin file I suppose.  What tools would be necessary for doing such a thing?  I am open to all suggestions short of desoldering the flash chip from the device.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "637",
    "tags": [
        "firmware"
    ],
    "user": "ipatch",
    "time": "Feb 24, 2014 at 3:30",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Is the NetBSD an assumption you make based on the fact that MacOS X uses parts of the NetBSD and FreeBSD userland?</span>",
            "time": null
        },
        {
            "user": "ipatch",
            "text": "<span class=\"comment-copy\">No, I have root access on the box, and when I run <code>uname -a</code> it states NetBSD 4.0</span>",
            "time": null
        },
        {
            "user": "Stefan Arentz",
            "text": "<span class=\"comment-copy\">Chris, how did you get root access? If this over the network or did you attach a serial terminal?</span>",
            "time": null
        },
        {
            "user": "ipatch",
            "text": "<span class=\"comment-copy\">@StefanArentz I soldered to pads on the router, and used a FTDI cable / converter to get root access.</span>",
            "time": null
        },
        {
            "user": "Stefan Arentz",
            "text": "<span class=\"comment-copy\">Chris that is great. I should crack mine open. I have an old 1st gen and it cannot be configured anymore because Apple dropped support for it in the Airport Utility.app - I'm interested in reversing the configuration protocol and create an alternative app for it.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Okay, one of the lowest level approaches would be to desolder the flash and then read it with a device suitable for that particular chip.</p>\n<p>However, if you have a JTAG (<a class=\"post-tag\" href=\"/questions/tagged/jtag\" rel=\"tag\" title=\"show questions tagged 'jtag'\">jtag</a>) probe, <a href=\"https://reverseengineering.stackexchange.com/q/1374/245\">find the JTAG header</a> and find out as much as possible about the chips (otherwise you can literally fry the hardware). Then use the JTAG probe and an openly available tool such as OpenOCD to dump the contents of the flash chip. This should also be usable to flash it again.</p>\n<p>However, since this is very specific to each piece of hardware it's hardly possible to give some generic advice about how to go about and what to be careful about.</p>\n<p>Refer to the above linked question for details on how to find the JTAG header after disassembling the device and look in the <a class=\"post-tag\" href=\"/questions/tagged/jtag\" rel=\"tag\" title=\"show questions tagged 'jtag'\">jtag</a> tag to find other existing questions and answers surrounding that topic.</p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}