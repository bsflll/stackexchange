{
    "title": "How can i remove dead code and opaque predicates?",
    "link": "https://reverseengineering.stackexchange.com/questions/31993/how-can-i-remove-dead-code-and-opaque-predicates",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<hr/>\n<p>I have the following problem on my agenda: There is an obfuscated .exe (this is a virus that I am investigating) in addition to having an MBA, etc. bullshit, he has Opaque predicates and dead code, I know there are solvers to solve this gap(z3), but they have problems with execution speed, when I delete one instruction in a graph and compare it with the original graph, it takes too much time, I also made the solver see not just one graph, but the entire function, because of this, I have big problems with the speed of execution, since there are more than 1000 instructions in the function - I delete one at a time, and it's simply unbearable to wait so long, the solver also has problems with registers, since there is no inheritance of data from variables and I have to update the lower part of the registers every time.</p>\n<p>Are there any elegant ways to solve opaque predicates and dead code?(my implementations of this on solver are: <a href=\"https://github.com/Nitr0-G/DynamicRetDec\" rel=\"nofollow noreferrer\">https://github.com/Nitr0-G/DynamicRetDec</a> and <a href=\"https://github.com/Nitr0-G/Z3-Dead-Code-Elemination\" rel=\"nofollow noreferrer\">https://github.com/Nitr0-G/Z3-Dead-Code-Elemination</a>). Perhaps opaque predicates and dead code elimination can be solved somehow with the help of data tracking? Are there any implementations that I could look at or maybe concepts?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "197",
    "tags": [
        "assembly",
        "c++",
        "deobfuscation",
        "dynamic-analysis"
    ],
    "user": "Swoke",
    "time": "Jun 27, 2023 at 17:59",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, as I understand it, it is impossible to do this at the level of an assembly language as such.</p>\n<p>In order to delete dead code in a normal sense, it is necessary to carry out the stages of code analysis, or rather data flow graph, it is impossible to do this in one run of the assembler code with the unicron emulator, i.e. I need to form a conditional data map (This also applies to opaque predicates)\n<a href=\"https://www.sciencedirect.com/topics/computer-science/data-flow-graph\" rel=\"nofollow noreferrer\">https://www.sciencedirect.com/topics/computer-science/data-flow-graph</a></p>\n<p><a href=\"http://bears.ece.ucsb.edu/research-info/DP/dfg.html\" rel=\"nofollow noreferrer\">http://bears.ece.ucsb.edu/research-info/DP/dfg.html</a></p>\n<p>Let's say I add the second phase of the run, i.e. on the first I will form a data flow graph, and on the second I will already apply this data flow graph to the code and start optimizing it all. Then I stumble upon another problem, in order to understand at the assembler level whether the command is correct even with a dfg(data flow graph), we need to delete one variable or number and compare it with the original tree and check that our calculations are not broken in any way. If I take a real case of a virus that is very well obfuscated, then you and I will sit in a puddle, because if there are more than 1000 instructions in one function, then our optimization will be extremely long.</p>\n<p>But many readers may object and say that the same can be done with a solver, but I will answer you that it takes about 534MC to recalculate our example with a certain solver constraint</p>\n<pre><code>    s.add(!(*orig.rax == *opt.rax &amp;&amp; *orig.rbx == *opt.rbx &amp;&amp; *orig.rcx == *opt.rcx &amp;&amp; *orig.rdx == *opt.rdx &amp;&amp; *orig.rbp == *opt.rbp &amp;&amp; *orig.rsp == *opt.rsp &amp;&amp; *orig.rsi == *opt.rsi \n        &amp;&amp; *orig.rdi == *opt.rdi \n        &amp;&amp; *orig.r8 == *opt.r8 &amp;&amp; *orig.r9 == *opt.r9 &amp;&amp; *orig.r10 == *opt.r10 &amp;&amp; *orig.r11 == *opt.r11 &amp;&amp; *orig.r12 == *opt.r12 &amp;&amp; *orig.r13 == *opt.r13 &amp;&amp; *orig.r14 == *opt.r14 \n        &amp;&amp; *orig.r15 == *opt.r15 &amp;&amp; *orig.xmm0 == *opt.xmm0 &amp;&amp; *orig.xmm1 == *opt.xmm1 &amp;&amp; *orig.xmm2 == *opt.xmm2 &amp;&amp; *orig.xmm3 == *opt.xmm3 &amp;&amp; *orig.xmm4 == *opt.xmm4\n        &amp;&amp; *orig.xmm5 == *opt.xmm5 &amp;&amp; *orig.xmm6 == *opt.xmm6 &amp;&amp; *orig.xmm7 == *opt.xmm7 &amp;&amp; *orig.xmm8 == *opt.xmm8 &amp;&amp; *orig.xmm9 == *opt.xmm9 &amp;&amp; *orig.xmm10 == *opt.xmm10\n        &amp;&amp; *orig.xmm11 == *opt.xmm11 &amp;&amp; *orig.xmm12 == *opt.xmm12 &amp;&amp; *orig.xmm13 == *opt.xmm13 &amp;&amp; *orig.xmm14 == *opt.xmm14 &amp;&amp; *orig.xmm15 == *opt.xmm15 &amp;&amp; *orig.zf == *opt.zf \n        &amp;&amp; *orig.of == *opt.of &amp;&amp; *orig.cf == *opt.cf &amp;&amp; *orig.pf == *opt.pf &amp;&amp; *orig.sf == *opt.sf &amp;&amp; *orig.af == *opt.af &amp;&amp; *orig.df == *opt.df));\n</code></pre>\n<p>The constraint above will take you about 534MC for one repeat, and now imagine that we have ten such repetitions, it will just be incomprehensible in terms of execution time. With opaque predicates, things are a little better, but everything is still performed for an extremely long time...\nAlong the way, we can only optimize only those instructions that obviously fall out of our dfg at all, but there are few such cases and in real cases this will be extremely rare for us.</p>\n<p>Of all the cases, only one will help us:\nWe need to collect the entire trace of the program to the place we need, despite the garbage data and dead code, etc. obfuscation. Then we will need to lift the collected instructions to llvm-ir or any other ir and after that we can proceed to normal optimization.</p>\n<p>In its own way, you need to develop a source to source compiler for deobfuscation(asm2asm with different optimizations):\n<a href=\"https://github.com/rose-compiler/rose\" rel=\"nofollow noreferrer\">https://github.com/rose-compiler/rose</a>\n<a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Source-to-source_compiler</a></p>\n</div>",
            "votes": "0",
            "user": "Swoke",
            "time": "Jun 28, 2023 at 0:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}