{
    "title": "How to import a file system image with Ghidra Headless Analyzer?",
    "link": "https://reverseengineering.stackexchange.com/questions/25422/how-to-import-a-file-system-image-with-ghidra-headless-analyzer",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently debugging the EXT4 loader, and using the GUI and selecting the file every time is fairly annoying. The simpler solution would be to have a Headless Analyzer invocation that imports the file system image and parses it.</p>\n<p>The naive way of simply calling the Headless Analyzer with the arguments for the project location, name and <code>-import image.ext4</code> results in the following errors:</p>\n<pre><code>INFO  No load spec found for import file: &lt;redacted&gt;.ext4   (AutoImporter.java:215) \nERROR The AutoImporter could not successfully load &lt;redacted&gt;.ext4 with the provided import parameters. Please ensure that any specified processor/cspec arguments are compatible with the loader that is used during import and try again.   (HeadlessAnalyzer.java:1651) \nERROR REPORT: Import failed for file: &lt;redacted&gt;.ext4   (HeadlessAnalyzer.java:1688) \n</code></pre>\n<p>The <a href=\"https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html\" rel=\"nofollow noreferrer\">documentation</a> only covers handling specific binaries, so this doesn't seem like it is supported currently.</p>\n<p>A workaround that <em>does not</em> work for my specific use case, but might suffice for others is to mount the image and then use the <code>-recursive</code> argument for the Headless Analyzer.</p>\n<p>A solution could be a script, which would call whatever is called after selecting a file via the <code>Open File System</code> menu option. There doesn't seem to be one like this shipped with Ghidra yet, but maybe there is one written by the community somewhere.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "firmware",
        "ghidra"
    ],
    "user": "Florian Magin",
    "time": "Jun 29, 2020 at 16:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The solution that I found that suffices for my current issue of debugging the EXT4 parser is is the following Ghidra Script, saved as <code>ImportFS.java</code>:</p>\n<pre><code>import ghidra.app.script.GhidraScript;\nimport ghidra.formats.gfilesystem.FSRL;\nimport ghidra.formats.gfilesystem.FileSystemRef;\nimport ghidra.formats.gfilesystem.FileSystemService;\n\nimport java.io.File;\n\npublic class ImportFS extends GhidraScript{\n\n        @Override\n        protected void run()throws Exception{\n                File filesystemImage = askFile(\"Choose Filesystem Container\", \"Select\");\n                FSRL fsrl = FSRL.fromString(\"file://\" + filesystemImage.getAbsolutePath());\n                FileSystemService fileSystemService = FileSystemService.getInstance();\n                FileSystemRef ref = fileSystemService.probeFileForFilesystem(fsrl, monitor, null);\n        }\n}\n</code></pre>\n<p>And invoking the Headless Analyzer with</p>\n<pre><code>analyzeHeadless /tmp temp_project -scriptPath /path/to/script/folder -readOnly -preScript ImportFS.java /path/to/file.img\n</code></pre>\n<p><code>askFile</code> will not prompt for the file via a GUI when running in headless mode, so either <code>/path/to/file.img</code> has to be provided via the argument or a property file.</p>\n<p>Further code would be needed for actually importing the file system tree after parsing, but this should be doable.</p>\n</div>",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Jun 30, 2020 at 6:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}