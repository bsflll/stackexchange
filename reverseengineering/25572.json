{
    "title": "How does an executable’s static API differ from it’s dynamic API?",
    "link": "https://reverseengineering.stackexchange.com/questions/25572/how-does-an-executable-s-static-api-differ-from-it-s-dynamic-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Running an executable in Cuckoo sandbox gives me its dynamic API information. How do these API calls differ from their static API information (eg. If I were to just put the executable through IDA Pro or Ghidra?) I know that the static API calls have different names from the dynamic ones, but are they two separate non intersecting sets (i.e. each particular API name only belongs to either the static API category or the dynamic API category, and never both?)</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "225",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "malware",
        "ghidra"
    ],
    "user": "nidorinas",
    "time": "Jul 28, 2020 at 16:51",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">\"Static API calls\" are usually visible as imports when doing a static analysis. Hence both sets intersect (if I get your definition of static/dynamic API calls correctly).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, I want to clarify some of the concepts about \"API calls.\" I will explain these concepts, mainly thinking of WinAPI and PE files. I'm not claiming these definitions are correct for all systems.</p>\n<p><strong>Operating system programming interfaces</strong></p>\n<p>I assume you are referring to OS API libraries as API. OS API is consists of different interfaces that user-mode applications can use to access the operating system. Using OS API, user-mode applications can abstract system call interfaces with more portable ones. There are many other benefits of OS API libraries like diversifying basic system call operations with high-level operations and making system call interface independent from user mode application interface. Some known OS API implementations are WinAPI and Glibc.</p>\n<p><strong>How can obtain shared library (DLL files in Microsoft Windows systems) information from an executable file?</strong></p>\n<p>Most of the time shared library information is given in the PE header. And static analysis tools extract that information from that. I'm sure disassemblers like IDA has advanced features and extensions for detecting dynamic library loading.</p>\n<p><strong>How can we get dynamically loaded library information?</strong></p>\n<p>Some software like computer viruses and commercial products want to hide their operations from inspection to hide their activities or protect their intellectual property. They use dynamic loading to mask their OS and other API usages. They use <em>LoadLibrary</em> like API functions (and lots of different variations) for loading shared libraries. A sandbox or debugger can access this information hooking these functions. But, it is not sure that they can find all instances of dynamic loading.</p>\n<p><strong>Can static and dynamic shared library information differ?</strong></p>\n<p>I don't know how Cuckoo and IDA access shared library information, but static and dynamic analysis can show different shared libraries. Theoretically, some static analysis methods could find all dynamically loaded libraries. Which does not mean they mostly do.</p>\n</div>",
            "votes": "3",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Aug 3, 2020 at 9:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>on windows.\ndynamic link use funcion like loadlibrary or getprocaddress to get process function address and call them.\nstatic link use a table call import address table define in the excutable maintain by the system when program was loaded(the table have the process function address)</p>\n</div>",
            "votes": "-2",
            "user": "user34006",
            "time": "Jul 30, 2020 at 19:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}