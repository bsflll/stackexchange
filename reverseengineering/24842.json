{
    "title": "IDAPython: idaapi.get_highlight for demangled names",
    "link": "https://reverseengineering.stackexchange.com/questions/24842/idapython-idaapi-get-highlight-for-demangled-names",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using the following code to get the address of the selected function/variable:</p>\n<pre><code>hightlight = idaapi.get_highlight(idaapi.get_current_viewer())\nscreen_ea = idaapi.get_screen_ea()\nea = idaapi.get_name_ea(screen_ea, name)\n</code></pre>\n<p>It works like a charm except until you meet demangled name in IDA View :( </p>\n<p>For example, for this line </p>\n<pre><code>.text:00406744                 call    KBTickCount(void)\n</code></pre>\n<p>idaapi.get_name_ea call would never return the proper address, because the real name is ?KBTickCount@@YIJXZ.</p>\n<p>I know that I can just change demangled names representation in IDA Pro, but I'm working on a public plugin and I'm thinking about end users.</p>\n<p>And I also want to make it work in Pseudocode view, where all names are demangled.</p>\n<p>Any ideas on how to get the address of the selected function/variable for a particular line?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "514",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk",
        "ida-plugin"
    ],
    "user": "mastermind",
    "time": "Apr 26, 2020 at 20:28",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">On what action/event does your code execute?</span>",
            "time": null
        },
        {
            "user": "mastermind",
            "text": "<span class=\"comment-copy\">I set hotkey action handler if it matters</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All action callbacks receive a context pointer with various information pre-filled:</p>\n<pre><code>  ea_t cur_ea;           ///&lt; the current EA of the position in the view\n  uval_t cur_value;      ///&lt; the possible address, or value the cursor is positioned on\n\n  func_t *cur_func;      ///&lt; the current function\n  func_t *cur_fchunk;    ///&lt; the current function chunk\n\n  struc_t *cur_struc;    ///&lt; the current structure\n  member_t *cur_strmem;  ///&lt; the current structure member\n\n  enum_t cur_enum;       ///&lt; the current enum\n\n  segment_t *cur_seg;    ///&lt; the current segment\n</code></pre>\n<p>(from <code>kernwin.hpp</code>)</p>\n<p>So you can just use <code>ctx.cur_value</code> (or its Python synonym, <code>cur_extracted_ea</code>) to directly get the address/value/identifier under cursor, without having to resolve it yourself.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 30, 2020 at 9:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mastermind",
                    "text": "<span class=\"comment-copy\">Didn't know about that, thank you very much!</span>",
                    "time": null
                }
            ]
        }
    ]
}