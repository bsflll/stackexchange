{
    "title": "Finding a mathematical calculation which uses Pi within binary",
    "link": "https://reverseengineering.stackexchange.com/questions/22409/finding-a-mathematical-calculation-which-uses-pi-within-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Given a large (~14MB) binary compiled for a X86 64-bit system, what would be the basic steps to go through in order to find the usage of Pi (Ï€) for calculation of a certain parameter (flag)?</p>\n<p>I'm rather new at this, and I've tried looking through strings to find different mathematical terms and numbers, and I've also gone over the Functions window, and found names such as <code>_tan</code>, <code>_pow</code>, <code>_sqrt</code>, <code>_sin</code>, etc., but no mention of Pi specifically. </p>\n<p>Can anyone recommend another way to approach this? \nUnfortunately I cannot share the specific binary I am working on. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "114",
    "tags": [
        "ida",
        "x86",
        "static-analysis"
    ],
    "user": "Charles",
    "time": "Oct 28, 2019 at 15:04",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">why do you think it's calculating Pi instead of using a hardcoded value?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's a couple of likely possibilities for how the value of Pi is included in the code -</p>\n<p>1) It is calculated using trig functions. e.g. </p>\n<pre><code>4.0 * atan( 1.0 )\n</code></pre>\n<p>2) It is stored as a floating-point constant. In hexadecimal representation these could be -</p>\n<pre><code>0x40490FDB            // 32-bit floating point\n0x400921FB54442D18    // 64-bit floating point\n</code></pre>\n<p>However, you need to be aware of compiler optimisations, including <a href=\"https://en.wikipedia.org/wiki/Constant_folding\" rel=\"nofollow noreferrer\">constant folding</a>.</p>\n<p>Even if the source code uses my first possibility, the compiler may optimise it to a floating-point constant. (i.e. my 2nd possibility)</p>\n<p>Then, if the value Pi is only ever used in contexts where it appears in calculations with other constant values, the compiler may perform that part of any calculations at compile time and include only the result in the object file.\ne.g.</p>\n<pre><code>pi = 4.0 * atan( 1.0 );                   // may become = 3.1415926536..\ncircumference = 2.0 * pi * radius;        // may become = 6.2831853.. * radius\ndegrees = radians * 180 / pi;             // may become = radians * 57.2957795..\nresult = fourier_integral / (2.0 * pi);   // may become = fourier_integral * 0.1591549..\n</code></pre>\n<p>So, in summary, you might not find the value of Pi at all and may have to search for likely related constant values.</p>\n</div>",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Nov 23, 2019 at 10:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Charles",
                    "text": "<span class=\"comment-copy\">Thanks, this is very helpful. I will go over the binary again.</span>",
                    "time": null
                }
            ]
        }
    ]
}