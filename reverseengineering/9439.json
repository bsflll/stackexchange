{
    "title": "What does this combination SCAS and STOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/9439/what-does-this-combination-scas-and-stos",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a simple snippet with several instructions:</p>\n<pre><code>01:    mov   edi, [ebp+8]\n02:    mov   edx, edi\n03:    xor   eax, eax\n04:    or    ecx, 0FFFFFFFFh\n05:    repne scasb\n06:    add   ecx, 2\n07:    neg   ecx\n08:    mov   al, [ebp+0Ch]\n09:    mov   edi, edx\n10:    rep   stosb\n11:    mov   eax, edx\n</code></pre>\n<p>I should explain:</p>\n<blockquote>\n<p>1.<em>What is the type of the <code>[ebp+8]</code> in line <code>01</code> and <code>[ebp+C]</code>  in\n  line <code>08</code>, respectively.</em></p>\n<p>2.<em>What this code does?</em></p>\n</blockquote>\n<ol>\n<li><p>Line <code>01</code> is something like <code>edi = *(ebp+8)</code>, it stores destination address, not sure. But i can't explain line <code>08</code></p></li>\n<li><p>By following the <code>intel</code> manual <code>SCASB (scan byte string)</code> i assume what this code does initialize a buffer for the string, repeatedly writes <code>0</code> byte <code>eax</code> times, then assign <code>al</code> to <code>edi</code>.</p></li>\n</ol>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "822",
    "tags": [
        "assembly",
        "x86",
        "decompile"
    ],
    "user": "Roman Kiselenko",
    "time": "Jul 25, 2015 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li><code>ebp</code> points to the stack, which is where function parameters are stored. <code>ebp+8</code> is your first parameter, and <code>ebp+0C</code> the second one.</li>\n<li>The first parameter is a pointer to a 0-terminated string, and gets loaded into <code>edi</code>.</li>\n<li>The <code>repne scasb</code> instruction will increment <code>edi</code>, and decrement <code>ecx</code>, until either <code>ecx</code> is zero or <code>edi</code> points to a byte that is equal to the one in <code>al</code> - 0 in your case, so this scans for the end of a C string.</li>\n<li>Adding 2 to <code>ecx</code>, then negating it, will make it equal to the string length. Try it out yourself on paper with an example or two.</li>\n<li><code>eax</code> gets the second pararmeter of the function, from <code>ebp+0C</code>.</li>\n<li>The string (the address of the string has been saved in <code>edx</code> and is back in <code>edi</code>) gets overwritten with the byte in <code>al</code> - your second function parameter.</li>\n</ul>\n<p>So what this function does is overwrite a null-terminated string of unknown length (parameter 1) with a sequence of identical bytes (parameter 2).</p>\n</div>",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 25, 2015 at 8:56",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>emulating the sequence with powershell</p>\n<pre><code>cat scasb.ps1\n$edx=$edi=$args[0];  $eax=0; $ecx=-1;\nwhile($edi[$ecx--]){}; $ecx+=2;  $ecx=-$ecx;\n\"length of string using .net method \"+$edi.length;\n\"length of string using repne scasb \"+$ecx;\n$edi=$edx.tochararray()\nwhile($ecx){$edi[--$ecx]=$args[1]};  $ofs=\"\"; $edx;[string]$edi\n</code></pre>\n<p>result</p>\n<pre><code>powershell -f scasb.ps1 \"abracadabra gili gili choo\" r\nlength of string using .net method 26\nlength of string using repne scasb 26\nabracadabra gili gili choo\nrrrrrrrrrrrrrrrrrrrrrrrrrr\n</code></pre>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Jul 27, 2015 at 14:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}