{
    "title": "What is this assembly doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20843/what-is-this-assembly-doing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote a very basic crackme to learn how assembly works.</p>\n<p>Even though I wrote it myself, I am having some trouble understanding a few pieces of the assembly:</p>\n<p><a href=\"https://i.sstatic.net/ZAZZD.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZAZZD.png\"/></a></p>\n<p>What I know up to now is: <code>[rbp+rax+input_buffer]</code> is basically <code>input_buffer[rax]</code>, xor'ing two of the same registers resets them and that's about it (apart from the very basic stuff like add, mov, inc).</p>\n<p>I specifically don't understand what <code>movsx ..</code> and <code>add ecx, 0FFF..</code> is doing.</p>\n<p><s>The input_buffer is filled with <code>_fgets</code>. I'm intentionally not saying a working input to see if you can figure it out (it shouldn't be hard anyways).</s></p>\n<p>A proper input would be <code>0123456789\\n</code>, note that I discard the newline via <code>strcspn</code>.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "155",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 10, 2019 at 20:57",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I guess the original code is something like:</p>\n<pre><code>char input_buffer[...];\n// ...\nint c = input_buffer[i];\n</code></pre>\n<p>Since the variable <code>c</code> is a <code>int</code> and <code>input_buffer</code> is a <code>char[]</code>, your compiler has to promote the read <code>char</code> as a <code>int</code>. That's why you have the <code>movsx</code> instruction. It will read the current character and sign extend it, so it'll fit to a <code>int</code>.</p>\n<p>About the <code>add</code>, it's common for a compiler to encode a <code>sub dst, imm</code> as <code>add dst, -imm</code>, if you negate <code>0xffffffd0</code> (SHIFT - in IDA), you'll obtain <code>-0x30</code>. This is how you convert the ASCII digit into a integer.</p>\n</div>",
            "votes": "3",
            "user": "wisk",
            "time": "Mar 10, 2019 at 22:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}