{
    "title": "IDA Pro don't understand address extension register in HC16",
    "link": "https://reverseengineering.stackexchange.com/questions/28038/ida-pro-dont-understand-address-extension-register-in-hc16",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Source:</p>\n<pre><code>ROM:13A2 006                 ldab    #0Fh            ; Load B\nROM:13A4 006                 ldx     #0FA27h         ; Load IX\nROM:13A8 006                 tbxk                    ; Transfer B to XK\nROM:13AA 006                 ldaa    #55h            ; Load A\nROM:13AC 006                 staa    0, X            ; Store A\n</code></pre>\n<p>Every time I see this, I must calculate in my mind, what it is storing to REGISTER_NAME with address 0xFFA27 (and also save all register addresses in my mind). For some reason, IDA ignores the register description in *.cfg with 0xFFA27 address and with 0xFA27 as well (I've tried that).</p>\n<p>Can I setup IDA to generate something more human readable? Like</p>\n<pre><code>ROM:13AC 006                 staa    0, X                 ; Store A to 0xFFA27\n</code></pre>\n<p>or</p>\n<pre><code>ROM:13AC 006                 staa    0, X ; REGISTER_NAME ; Store A to 0xFFA27\n</code></pre>\n<p>Because 90% of my code consists of similar expressions.</p>\n<p>PS I'm very new, so be patient please.</p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "82",
    "tags": [
        "ida"
    ],
    "user": "segar",
    "time": "Aug 5, 2021 at 15:12",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "<span class=\"comment-copy\">There are three processor modules which IDA supports best: x86/x64, ARM/ARM64 and PowerPC. Everything else has a basic implementation: no function argument recognition, no type definitions, no structure application on the code. Especially, no support for platform-specific things. You will have to either implement the feature that you need yourself, in case processor module source code is available in IDA SDK, or workaround it in some way: via IDC script or IDA plugin which sets a hook on processor module events.</span>",
            "time": null
        }
    ],
    "answers_data": []
}