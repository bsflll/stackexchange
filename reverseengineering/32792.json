{
    "title": "Offset addressing",
    "link": "https://reverseengineering.stackexchange.com/questions/32792/offset-addressing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I’m writing a C-SKY (CK803S) processor module for IDA Pro, and a question arose about offsets in transitions, small ones are fine, but long ones lead to nowhere, from the documentation:\n<a href=\"https://i.sstatic.net/CYqWE.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/CYqWE.jpg\"/></a></p>\n<p>in code I implemented it like this:<code>insn.Op1.addr = insn.ea + (((code32 &amp; 0x3FFFFFF) &lt;&lt; 1) &amp; 0x3FFFFFF);</code></p>\n<p><a href=\"https://i.sstatic.net/slbDk.jpg\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/slbDk.jpg\"/></a></p>\n<p>but I don’t understand what sign_extend does ?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "69",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "debugging",
        "binary-analysis"
    ],
    "user": "Andynvkz",
    "time": "Mar 7, 2024 at 6:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Signextend is expanding an integer of some size into a larger size and filling the extra bits with the original sign bit. In other words - keeping the larger int positive/negative.</p>\n<p>Example:</p>\n<p>An original 8-bit number <code>0x7F</code> (Binary <code>01111111</code>) signextended to 32 bit becomes <code>0x0000007F</code>.</p>\n<p>An original 8-bit number <code>0x80</code> (Binary <code>10000000</code>) signextended to 32 bit becomes <code>0xFFFFFF80</code></p>\n<p>It makes sense using this operation in offsets as a relative offset can be negative.</p>\n</div>",
            "votes": "0",
            "user": "Yotamz",
            "time": "Mar 7, 2024 at 6:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andynvkz",
                    "text": "<span class=\"comment-copy\">that is, if 26 bits are 0, then we set bits 31..26 to 0, otherwise to 1? or force set to 1 - sign_extend, to 0 - zero_extend?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">If the most significant bit is 1 - all additional higher bits are set to 1. Otherwise - 0. signed, <code>(int8) 0xFF</code> equals to decimal<code>-1</code>. To keep the value in 32 bit they have to be all 1s, i.e. <code>0xFFFFFFFF</code></span>",
                    "time": null
                }
            ]
        }
    ]
}