{
    "title": "Recover Library Function ProtoType from IDA-Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/15810/recover-library-function-prototype-from-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on a reverse engineering task, in which I need to recover function prototype (including number of parameters, type of each parameter) from the input binary (<code>ELF</code> binary on <code>64-bit</code> Linux).</p>\n<p>While <code>IDA-Pro</code> can be guided to recover function prototype for functions defined inside the binary code, I am trapped in recovering library functions invoked inside the binary code. </p>\n<p>For example:</p>\n<pre><code>mov str_pointer, %rdi\ncall puts  &lt;---- Library function \n</code></pre>\n<p>So here is my question: </p>\n<ol>\n<li>can I use IDA-Pro to somehow recover the library function's prototype? </li>\n<li>If notï¼Œit seems to me that I can benefit from some database on this info? Could anyone shed some lights on this? </li>\n</ol>\n<p>Thanks</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "547",
    "tags": [
        "ida",
        "ida-plugin"
    ],
    "user": "lllllllllllll",
    "time": "Jul 12, 2017 at 15:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Go to the function that you want to get the prototype for and press \"Y\". If you have the decompiler, just decompile it and check if the prototype it guessed is right. Often you will need to fix things manually. However, I can assure these ways work because I actually use them almost daily.</p>\n</div>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Jul 13, 2017 at 9:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}