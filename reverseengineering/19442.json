{
    "title": "What is the password to this file? I can't figure it out with radare2 or gdb",
    "link": "https://reverseengineering.stackexchange.com/questions/19442/what-is-the-password-to-this-file-i-cant-figure-it-out-with-radare2-or-gdb",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is the binary file. <a href=\"https://drive.google.com/file/d/1ywN60yZYIhPPRyZMGbQudZRYoLYBhkeJ/view?usp=sharing\" rel=\"nofollow noreferrer\">https://drive.google.com/file/d/1ywN60yZYIhPPRyZMGbQudZRYoLYBhkeJ/view?usp=sharing</a></p>\n<p>I am able to figure out some of the assembly, but can't get the correct password. I know that it is two integers separated by a space.</p>\n<p>EDIT: By using the command <code>ps @ str.d__d</code> you get the result of <code>%d %d</code>. It is located at the address <code>0x0804853f</code>.</p>\n<p>EDIT2: I figured out that there are multiple local variables being used:  </p>\n<pre><code>var int local_2ch @ ebp-0x2c \nvar int local_20h @ ebp-0x20 \nvar int local_1ch @ ebp-0x1c \nvar unsigned int local_18h @ ebp-0x18 \nvar int local_14h @ ebp-0x14 \nvar int local_10h @ ebp-0x10\nvar int canary @ ebp-0xc\nvar int local_4h @ ebp-0x4 \narg int arg_4h @ esp+0x4 \n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "x86",
        "decompilation"
    ],
    "user": "rockower",
    "time": "Sep 24, 2018 at 21:04",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">how do you know that it's \"two integers separated by a space\"? what else did you figure out?</span>",
            "time": null
        },
        {
            "user": "rockower",
            "text": "<span class=\"comment-copy\">By using the command <code>ps @ str.d__d</code> you get the result of <code>%d %d</code>.  This is all located at the address 0x0804853f.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">please add what you already discovered to the question (click 'edit')</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's how you can do it. \nUsual stuff : <code>r2 file; aaa; <a class=\"__cf_email__\" data-cfemail=\"3a4a5e5c7a49435714575b5354\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a></code></p>\n<p>You can see the params to <code>scanf</code> pushed to stack.</p>\n<pre><code>|           0x08048537      8d45e4         lea eax, [local_1ch]\n|           0x0804853a      50             push eax\n|           0x0804853b      8d45e0         lea eax, [local_20h]\n|           0x0804853e      50             push eax\n|           0x0804853f      6855860408     push str.d__d               ; 0x8048655 ; \"%d %d\" ; const char *format\n|           0x08048544      e887feffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)\n</code></pre>\n<p>Lets rename locals.</p>\n<pre><code>[0x080484eb]&gt; afv?\nUsage: afv  [rbs]\n| afvr[?]                       manipulate register based arguments\n| afvb[?]                       manipulate bp based arguments/locals\n| afvs[?]                       manipulate sp based arguments/locals\n| afv*                          output r2 command to add args/locals to flagspace\n| afvR [varname]                list addresses where vars are accessed (READ)\n| afvW [varname]                list addresses where vars are accessed (WRITE)\n| afva                          analyze function arguments/locals\n| afvd name                     output r2 command for displaying the value of args/locals in the debugger\n| afvn [new_name] ([old_name])  rename argument/local\n| afvt [name] [new_type]        change type for given argument/local\n| afv-([name])                  remove all or given var\n\n[0x080484eb]&gt; afvn input_1 local_20h\n[0x080484eb]&gt; afvn input_2 local_1ch\n[0x080484eb]&gt; <a class=\"__cf_email__\" data-cfemail=\"6515010325161c084b08040c0b\" href=\"/cdn-cgi/l/email-protection\">[email protected]</a>\n</code></pre>\n<p>Now it looks like</p>\n<pre><code>|           0x08048537      8d45e4         lea eax, [input_2]\n|           0x0804853a      50             push eax\n|           0x0804853b      8d45e0         lea eax, [input_1]\n|           0x0804853e      50             push eax\n|           0x0804853f      6855860408     push str.d__d               ; 0x8048655 ; \"%d %d\" ; const char *format\n|           0x08048544      e887feffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)\n</code></pre>\n<p>There's a check for Correct/Incorrect</p>\n<pre><code>|       `-&gt; 0x08048579      837de800       cmp dword [local_18h], 0\n|       ,=&lt; 0x0804857d      7412           je 0x8048591\n|       |   0x0804857f      83ec0c         sub esp, 0xc\n|       |   0x08048582      685b860408     push str.Correct            ; 0x804865b ; \"Correct!\" ; const char *s\n|       |   0x08048587      e824feffff     call sym.imp.puts           ; int puts(const char *s)\n|       |   0x0804858c      83c410         add esp, 0x10\n|      ,==&lt; 0x0804858f      eb10           jmp 0x80485a1\n|      ||   ; CODE XREF from main (0x804857d)\n|      |`-&gt; 0x08048591      83ec0c         sub esp, 0xc\n|      |    0x08048594      6864860408     push str.Incorrect          ; 0x8048664 ; \"Incorrect!\" ; const char *s\n|      |    0x08048599      e812feffff     call sym.imp.puts           ; int puts(const char *s)\n|      |    0x0804859e      83c410         add esp, 0x10\n</code></pre>\n<p>If <code>local_18h</code> is 1/0, Correct/Incorrect is printed out to stdout respectively. Rename <code>local_18h</code> to <code>final_flag</code> as it decides the final output.</p>\n<pre><code>[0x0804852b]&gt; afvn final_flag local_18h\n</code></pre>\n<p>Some constants are loaded to local variables. Remember/rename them to follow in code.</p>\n<pre><code>|           0x0804850f      c745e8010000.  mov dword [final_flag], 1\n|           0x08048516      c745ec2a0000.  mov dword [local_14h], 0x2a ; '*' ; 42\n|           0x0804851d      c745f0390500.  mov dword [local_10h], 0x539 ; 1337\n</code></pre>\n<p><code>final_flag</code> is initially 1 (true). Just after input, there's a check to set <code>final_flag</code> to 0(false).</p>\n<pre><code>|           0x0804854c      8b45ec         mov eax, dword [const_2a]\n|           0x0804854f      35280a0000     xor eax, 0xa28\n|           0x08048554      89c2           mov edx, eax\n|           0x08048556      8b45e0         mov eax, dword [input_1]\n|           0x08048559      39c2           cmp edx, eax\n|       ,=&lt; 0x0804855b      7407           je 0x8048564\n|       |   0x0804855d      c745e8000000.  mov dword [final_flag], 0\n|       |   ; CODE XREF from main (0x804855b)\n</code></pre>\n<p>This can be roughly translated to:</p>\n<pre><code>if const_2a^0xa28 != input_1:\n    final_flag = False\n</code></pre>\n<p>To pass this input_1 = const_2a^0xa28 </p>\n<pre><code>&gt;&gt;&gt; 0x2a^0xa28\n2562\n</code></pre>\n<p>Similar check for input_2</p>\n<pre><code>|       `-&gt; 0x08048564      8b45f0         mov eax, dword [const_539]\n|           0x08048567      f7d0           not eax\n|           0x08048569      89c2           mov edx, eax\n|           0x0804856b      8b45e4         mov eax, dword [input_2]\n|           0x0804856e      39c2           cmp edx, eax\n|       ,=&lt; 0x08048570      7407           je 0x8048579\n|       |   0x08048572      c745e8000000.  mov dword [final_flag], 0\n</code></pre>\n<p>This can be roughly translated to:</p>\n<pre><code>if ~const_539 != input_2:\n    final_flag = False\n</code></pre>\n<p>To pass this input_2 = ~const_539</p>\n<pre><code>&gt;&gt;&gt; ~0x539\n-1338\n</code></pre>\n<p>Finally</p>\n<pre><code>./part2\nEnter the password: 2562 -1338\nCorrect!\n</code></pre>\n</div>",
            "votes": "3",
            "user": "sudhackar",
            "time": "Sep 25, 2018 at 7:53",
            "is_accepted": true,
            "comments": []
        }
    ]
}