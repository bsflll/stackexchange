{
    "title": "How to Fix a memory dump of a dll - so i dynamically reverse it using olly \\ ida",
    "link": "https://reverseengineering.stackexchange.com/questions/11474/how-to-fix-a-memory-dump-of-a-dll-so-i-dynamically-reverse-it-using-olly-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I need to analyze a memory dump of a malware module, unfortunately the sample is not the original dll, but the dump of the dll from the memory.</p>\n<p>Now fixing the <code>sections headers</code> is fairly easy - i just need to match the <code>Virtual address \\ size</code> to the <code>Raw address \\ size</code> because this is what the PE will get once loaded to memory (Which is the case for the dump)</p>\n<p>But now there is a different problem, when i open the file on IDA-PRO for example, the memory isnt aligned correctly thus the analysis is incorrect and not all <code>call</code> functions with relative addresses work properly (they dont point to the right location - or to a location which makes sense in terms of PE size)</p>\n<p>I feel like the solution of Re-basing the PE on ida is incomplete and does not fix everything as i need it to be.\nAlso i would like to fix the PE so i can dynamically load it later with ollydbg (as if i had the original)</p>\n<p>So my question is:\nHow exactly would you recommend me to fix the PE Headers and Rebase the program so i can load it successfully?</p>\n<p>For the VirusTotal-Intelligence users, the Sample MD5 is:\n3bb85abe51b0f96f501d2bb32ec4edef\nSHA256:\n83c95637712cacc0ca280892465a75a3a10a2d8df48dd816ae703bccb15db51d</p>\n<p>Samples:\n<a href=\"https://www.hybrid-analysis.com/search?query=vxfamily%3AGen:Variant.Terkcop\" rel=\"noreferrer\">https://www.hybrid-analysis.com/search?query=vxfamily%3AGen:Variant.Terkcop</a></p>\n<p><strong>2015_12_08_ExtraInfo</strong>:\n@ubnix, I havent yet read the content of the materials you sent me, but im much aware of the importance of IAT - By the way this is exactly the problem when im loading the file on IDA.</p>\n<p>The dll is being loaded at address 0x10000000 (Thus every section is loaded at 0x10001000 - depending on size and so on respectively, 0x10000000 and forward.)</p>\n<p>The code of the malware is expecting the IAT to be located at 0x05320000, which is not the case obviously. When i try on IDA-PRO to change the location of the IAT Segment (Ctrl + S or ALT + S if i recall) it is crashing my IDA client.</p>\n<p>Obviously changing the Address would only work as a temporary solution to see the malware statically on IDA pro and not as a solution to run the malware with ollydbg. If i would want to run the malware with olly, i need to somehow make the dll run under the correct address of 0x5320000</p>\n<p>When changing the BaseAddress of the PE from 0x10000000 to the address i want (Using CFF Explorer), it is still being loaded at 0x10000000 at ollydbg.. no idea why</p>\n<p><strong>Edit2 2015_12_15</strong>:\nExample of a sample i \"fixed\" his headers, yet its still not working properly (Problems with all CRT fucntions)</p>\n<p>The original sample:\n<a href=\"https://www.hybrid-analysis.com/sample/53dd790b1bd0588e542d33bde49dbf33c6fb7828e91a8d13c416c831108d642c?environmentId=1\" rel=\"noreferrer\">https://www.hybrid-analysis.com/sample/53dd790b1bd0588e542d33bde49dbf33c6fb7828e91a8d13c416c831108d642c?environmentId=1</a></p>\n<p>After i fixed the sample:\n<a href=\"https://www.dropbox.com/s/6dz7athzdja94p4/53_fixed_rebase.dll?dl=0\" rel=\"noreferrer\">https://www.dropbox.com/s/6dz7athzdja94p4/53_fixed_rebase.dll?dl=0</a></p>\n<p>Please note that both of these files are samples of malware and might cause antivirus to alert.</p>\n<p>The sample i fixed is definitely working more properly, and ida can instantly recognize all the functions - yet i think i missed something, because only the CRT functions or functions such as \"Init operation\" (Like c++ classes initialization) are failing.</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "windows",
        "ollydbg",
        "pe",
        "memory-dump"
    ],
    "user": "0xAK",
    "time": "Dec 15, 2015 at 7:05",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This would be a comment but since I still don't have enough reputation for comments, I will leave it as an answer:</p>\n<p>For a dump to work correctly, there are a couple of more things you need to do besides fixing the section headers:</p>\n<ul>\n<li>Travel the data directories and make sure they all point to the proper table</li>\n<li>Once you are sure the data directories point to the right place make sure that the imports and exports are fixed (among all the other used tables!). Precisely, you need to be sure that the Import Address Table(IAT) and the Export Address Table(EAT) are correct. If the notions like IAT and EAT are foreign to you I suggest you to read about those tables in the official <a href=\"https://download.microsoft.com/download/e/b/a/eba1050f-a31d-436b-9281-92cdfeae4b45/pecoff.doc\" rel=\"noreferrer\">PE file format specification</a> under \"The .idata Section\" and \"The .edata Section\".</li>\n<li>Also, since this question is closely related to PE file format, I suggest You to read the following documents: <a href=\"http://www.bandwidthco.com/whitepapers/compforensics/binary/eff/An%20In-Depth%20Look%20into%20the%20Win32%20Portable%20Executable%20File%20Format.pdf\" rel=\"noreferrer\">An In-Depth Look into the Win32 Portable Executable File Format Part 1</a> and <a href=\"http://reversingproject.info/wp-content/uploads/2009/05/an_in-depth_look_into_the_win32_portable_executable_file_format_part_2.pdf\" rel=\"noreferrer\">An In-Depth Look into the Win32 Portable Executable File Format Part 2</a></li>\n</ul>\n<p>I know I just posted a lot of material to read but believe me, I am talking from my personal experience, and these resources are a must if You want to understand the PE file format and the procedure of dumping PE files correctly. If you have any more questions feel write to ask and I will answer ASAP.</p>\n</div>",
            "votes": "6",
            "user": "ubnix",
            "time": "Dec 8, 2015 at 15:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">i've changed my question and added some more information about the problem</span>",
                    "time": null
                },
                {
                    "user": "ubnix",
                    "text": "<span class=\"comment-copy\">@RE-Beginner: DLLs are usually compiled with ASLR enabled. Check the Characteristics field in the IMAGE_FILE_HEADER to see does it contain the IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE flag. What this means is that the DLL will be loaded on a random address in memory and for it to work correctly, the relocation table must be specified and correct. So, is the relocation table specified in your malware sample?</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">No this is not the case, also my reversing environment is set on windows XP, so it shouldnt effect me</span>",
                    "time": null
                },
                {
                    "user": "ubnix",
                    "text": "<span class=\"comment-copy\">@RE-Beginner: could you upload the sample?</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">yes i've added a way to download the sample on my message <a href=\"https://www.hybrid-analysis.com/search?query=vxfamily%3AGen:Variant.Terkcop\" rel=\"nofollow noreferrer\">hybrid-analysis.com/search?query=vxfamily%3AGen:Variant.Terkcop</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>open the dumped file in a hexeditor say hxd<br/>\nselect the bytes from offset <code>0x400 to 0xfff</code> and delete them<br/>\n(<code>all the bytes would be 0x00</code>)<br/>\nsave the file your imports should turn out ok<br/>\npointer to raw data would normally be 0x400<br/>\nbut since this is a memory as you say the pe header would be 0x1000 bytes     deleting the extra bytes should align the text segment as well as entry point to correct place    </p>\n<p>if there are any misalignments further down in other sections you may need to trim the extra 00000 bytes  based on <code>size of raw data + pointer to raw data</code> this should normally match the next sections pointer to raw data</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 10, 2015 at 19:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">What i would usually do, instead of deleting the <code>zero-bytes</code> was to change to PE header to match that extra offset - so instead of having a raw-size of 0x400, i would change it to 0x1000 and it would fix the problem (so far)  I havent tried what u suggested yet, but i dont think its any different!   Will come back later with results</span>",
                    "time": null
                },
                {
                    "user": "0xAK",
                    "text": "<span class=\"comment-copy\">any idea why only the crt functions are not working properly on ollydbg?</span>",
                    "time": null
                },
                {
                    "user": "T.Todua",
                    "text": "<span class=\"comment-copy\">couldnt you write a sample app that does this automatically for a given file?</span>",
                    "time": null
                }
            ]
        }
    ]
}