{
    "title": "iOS Obfuscated Import Table",
    "link": "https://reverseengineering.stackexchange.com/questions/8392/ios-obfuscated-import-table",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking at an Apple iOS binary file which is heavily protected and I trying to figure out if there's a way to get some of the information back.</p>\n<p>When I open the binary in IDA I see this in the Imports Tab:</p>\n<pre><code>Address     |            Name                 |     Library\n0002EFF0    |     lg8ZfjWOccD3RctMJwwU9b      |  /usr/lib/libstdc++.6.dylib\n0002EFF4    |          4rqFsZJpPBx            |  /usr/lib/libz.1.dylib\n0002EFF8    |     I0Lotzqwlr8UzNDPNddy5       |/System/Library/Frameworks/UIKit.framework/UIKit\n</code></pre>\n<p>etc...</p>\n<p>I'm trying to figure out what is going on, appreciate if someone could tell me how this could happen, and it there's a way for me to resolve what functions are being used.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "345",
    "tags": [
        "ida",
        "assembly",
        "arm",
        "ios",
        "import-reconstruction"
    ],
    "user": "d123",
    "time": "Oct 21, 2016 at 3:32",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My guess would be that the packer/obfuscator does manual importing by scanning for dylibs in memory or maybe walking the dyld structures. The names in the import list are red herrings, and the fake imports are probably present only to ensure the loading of the required dylibs. you will have to analyze and/or debug the code to figure out how it really works.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 5, 2015 at 20:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}