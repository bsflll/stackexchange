{
    "title": "In IDA what does db and dd offset means in data section?",
    "link": "https://reverseengineering.stackexchange.com/questions/29733/in-ida-what-does-db-and-dd-offset-means-in-data-section",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, in <code>.data</code> section there is some variable, and after it there is <code>db</code> or <code>dd</code> (<code>offset</code>). What exactly does this mean? And what does “align” means? Is there any Wiki or something like that that tells all this in detail?</p>\n<pre><code>    .data:0048A374                 db    0\n    .data:0048A375                 db    0\n    .data:0048A376                 db    0\n    .data:0048A377                 db    0\n    .data:0048A378 off_48A378      dd offset unk_48A000    ; DATA XREF: start+41↑o\n    .data:0048A37C                 dd offset unk_48A1CE\n    .data:0048A380                 dd offset unk_48A1CE\n    .data:0048A384                 dd offset unk_48A33C\n    .data:0048A388 byte_48A388     db 1                    ; DATA XREF: __InitVCL+3↑r\n    .data:0048A389                 align 10h\n    .data:0048A390                 dd offset WinMain\n    .data:0048A394                 dd offset __matherr\n    .data:0048A398                 dd offset __matherrl\n    .data:0048A39C                 align 10h\n    .data:0048A3A0                 dd offset unk_48F66C\n    .data:0048A3A4                 dd offset off_490784\n    .data:0048A3A8                 dd offset off_490788\n    .data:0048A3AC                 dd offset __handle_setargv\n    .data:0048A3B0                 dd offset __handle_exitargv\n    .data:0048A3B4                 dd offset __handle_wsetargv\n    .data:0048A3B8                 dd offset __handle_wexitargv\n    .data:0048A3BC                 dd offset dword_48F0EC\n    .data:0048A3C0 byte_48A3C0     db 0                    ; DATA XREF: ___CRTL_VCL_Init_2+2↑r\n    .data:0048A3C0                                         ; __InitVCL+17↑r\n    .data:0048A3C1 byte_48A3C1     db 0                    ; DATA XREF: .text:00401060↑r\n    .data:0048A3C1                                         ; ___CRTL_VCL_Init_2+B↑r ...\n    .data:0048A3C2                 dd offset unk_4906E4\n    .data:0048A3C6                 dd offset unk_4907AC\n    .data:0048A3CA                 dd offset unk_4904F0\n    .data:0048A3CE                 db    0\n    .data:0048A3CF ; DWORD dwTlsIndex\n    .data:0048A3CF dwTlsIndex      dd 0                    ; DATA XREF: start:loc_401012↑r\n    .data:0048A3CF                                         ; .text:00401082↑r ...\n    .data:0048A3D3 dword_48A3D3    dd 0                    ; DATA XREF: start+1A↑w\n    .data:0048A3D7 dword_48A3D7    dd 0                    ; DATA XREF: start+4D↑w\n    .data:0048A3D7                                         ; .text:__getHInstance↑r ...\n    .data:0048A3DB                 db  90h ; ђ\n    .data:0048A3DC ; Exported entry 156. ___CPPdebugHook\n    .data:0048A3DC                 public ___CPPdebugHook\n    .data:0048A3DC ___CPPdebugHook db    0                 ; DATA XREF: start+E↑o\n    .data:0048A3DC                                         ; sub_46AF30+20↑o ...\n    .data:0048A3DD                 db    0\n    .data:0048A3DE                 db    0\n    .data:0048A3DF                 db    0\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida"
    ],
    "user": "ScienceDiscoverer",
    "time": "Dec 20, 2021 at 10:32",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">define: b - byte, d - dword</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. While your question is certainly valid, it's also trivial and the answer can be found in the first pages of books about x86 assembly language. E.g. <a href=\"https://www.randallhyde.com/AssemblyLanguage/\" rel=\"nofollow noreferrer\">here</a> or <a href=\"https://en.wikibooks.org/wiki/X86_Assembly\" rel=\"nofollow noreferrer\">here</a> ... aside from that it's be best to paste text as text and not a screenshot. Because: search engines.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li><code>db</code> means “<strong>d</strong>efine <strong>b</strong>yte”, i.e. a reservation of <strong>1</strong> byte of memory,</li>\n<li><code>dw</code> means “<strong>d</strong>efine <strong>w</strong>ord” (<strong>2</strong> bytes of memory),</li>\n<li><code>dd</code> means “<strong>d</strong>efine <strong>d</strong>ouble-word” (<strong>4</strong> bytes of memory).</li>\n</ul>\n<p>The <code>offset</code> prefix means to fill the reserved byte(s) <em>not with the mentioned data itself (i.e., <em>not with the content</em>),</em> but only with the <em>offset</em> to it (i.e., with the <strong>position</strong> of data in memory, expressed as the number of bytes from the beginning of the segment).</p>\n<p>The <code>align</code> directive means “If this address is not a multiple of the given number, skip the necessary number of bytes to fulfill this address requirement for the next data”.</p>\n<hr/>\n<p>You may see it in your listing:</p>\n<ul>\n<li><p><code>db 1</code>  is at address <code>0048a388</code>, it occupies only <strong>1</strong> byte (<code>db</code> – <strong>d</strong>efine <strong>b</strong>yte, i.e., <strong>1</strong> byte) and fills  it with the given value (<code>1</code>). So the next address is <code>0048a389</code>.</p>\n</li>\n<li><p>At this next address (<code>0048a389</code>) is the <code>align 10h</code> directive, so the byte at this address and the subsequent 6 bytes at addresses</p>\n<ul>\n<li><code>0048a38a</code>, <code>0048a388b</code>, <code>0048a38c</code>, <code>0048a38d</code>, <code>0048a38e</code>, and <code>0048a38f</code></li>\n</ul>\n<p>are <em>skipped,</em> because they <em>don't fulfill</em> the request “a multiple of 10h” (i.e., their last digit in hexadecimal notation is <em>not</em> <code>0</code>).</p>\n</li>\n<li><p>At the next address <code>0048a390</code> (which finally fulfills the <code>align 10h</code> requirement) is the directive</p>\n<ul>\n<li><code>dd offset WinMain</code>,</li>\n</ul>\n<p>which reserves 4 bytes of memory (<code>dd</code> – <strong>d</strong>efine <strong>d</strong>ouble word), and fills them with the <em>offset</em> of the (start of) <code>WinMain</code> function (<code>offset WinMain</code>).</p>\n</li>\n</ul>\n</div>",
            "votes": "6",
            "user": "MarianD",
            "time": "Dec 21, 2021 at 8:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}