{
    "title": "Resolving DLL function names using ordinals",
    "link": "https://reverseengineering.stackexchange.com/questions/12872/resolving-dll-function-names-using-ordinals",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out how to get the imports of a PE using the PEfile python project (<a href=\"https://github.com/erocarrera/pefile\" rel=\"nofollow\">https://github.com/erocarrera/pefile</a>)</p>\n<p>One thing special about that library is the <strong>ordlookup</strong> folder.\nIt looks like it is mapping ordinals to specific function names for known dlls.</p>\n<p>I ran PEfile on a .exe I had and I got in the imports: </p>\n<pre><code>\"wsock32.dll\": {\n    \"listen\": \"0x44a560\",\n    \"accept\": \"0x44a564\",\n    \"htons\": \"0x44a568\",\n    \"getsockname\": \"0x44a56c\",\n    \"gethostbyname\": \"0x44a570\",\n    \"gethostname\": \"0x44a574\",\n    \"ntohl\": \"0x44a578\",\n    \"inet_addr\": \"0x44a57c\",\n    \"ntohs\": \"0x44a580\",\n    \"ioctlsocket\": \"0x44a584\",\n    \"recv\": \"0x44a588\",\n    \"send\": \"0x44a58c\",\n    \"recvfrom\": \"0x44a590\",\n    \"sendto\": \"0x44a594\",\n    \"select\": \"0x44a598\",\n    \"connect\": \"0x44a59c\",\n    \"WSACleanup\": \"0x44a5a0\",\n    \"WSAStartup\": \"0x44a5a4\",\n    \"inet_ntoa\": \"0x44a5a8\",\n    \"bind\": \"0x44a5ac\",\n    \"getpeername\": \"0x44a5b0\",\n    \"setsockopt\": \"0x44a5b4\",\n    \"socket\": \"0x44a5b8\",\n    \"WSAGetLastError\": \"0x44a5bc\",\n    \"closesocket\": \"0x44a5c0\"\n  },\n</code></pre>\n<p>Then I removed the line that allows that ordlookup module to work an re-ran PEfile:</p>\n<pre><code>\"wsock32.dll\": {\n    \"null\": \"0x44a5c0\"\n},\n</code></pre>\n<p>Why do I get two different answer? What are ordinals / what does ordinals do?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "windows",
        "pe",
        "static-analysis",
        "python"
    ],
    "user": "muchwow",
    "time": "Jun 17, 2016 at 12:24",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">You might have wanted to know \"what are ordinals?\" before going to work with DLL's â€“ they don't \"do\" things. Basically, \"[t]he export address table [is] an array of length N holding the addresses of the exported functions/data [...] <b>Indexes into this table are called <i>ordinals</i></b>.\" (<a href=\"http://blog.omega-prime.co.uk/?p=115\" rel=\"nofollow noreferrer\">blog.omega-prime.co.uk/?p=115</a>)</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">If there are lots of imports then using ordinals saves space in bin i wrote a ord2name plugin for ollydbg search woodmanns you can get soome pointers if u cant locate comment back and i will see if i can find it</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can you the following to get the DLLs:</p>\n<pre><code>for entry in pe.DIRECTORY_ENTRY_IMPORT:\n    if entry.dll != None:\n        print(entry.dll.decode())\n</code></pre>\n<p>Simply put, ordinals are positions of functions in a given DLL. BUT not every ordinal is the same for a given function. The function Sleep sor example has different ordinals depending on the OS version, even the architecture of the system (32 bit / 64 bit). Research and check which function you can safely get by ordinals. I'm not a big expert but I hope this helps.</p>\n</div>",
            "votes": "1",
            "user": "Belial",
            "time": "Sep 2, 2018 at 15:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}