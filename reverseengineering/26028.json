{
    "title": "How do i identify parameters function of md5sum of specific binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/26028/how-do-i-identify-parameters-function-of-md5sum-of-specific-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, i downloaded the binary. Here are some details before moving forward:</p>\n<p><code>revbinary: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=2f0bc3cfa6ec6a297f58ae75f8802bd1b5ef7162, not stripped</code></p>\n<pre><code>        linux-vdso.so.1 (0x00007fffec358000)\n        libmariadb.so.3 =&gt; /lib/x86_64-linux-gnu/libmariadb.so.3 (0x00007f1d76fbe000)\n        libcrypto.so.1.1 =&gt; /lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f1d76cd2000)\n        libzip.so.4 =&gt; /lib/x86_64-linux-gnu/libzip.so.4 (0x00007f1d76cb7000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1d76af2000)\n        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1d76ad0000)\n        libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f1d76ab3000)\n        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1d76aab000)\n        libgnutls.so.30 =&gt; /lib/x86_64-linux-gnu/libgnutls.so.30 (0x00007f1d768e1000)\n        libbz2.so.1.0 =&gt; /lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007f1d768ce000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f1d7703c000)\n        libp11-kit.so.0 =&gt; /lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00007f1d7679a000)\n        libidn2.so.0 =&gt; /lib/x86_64-linux-gnu/libidn2.so.0 (0x00007f1d76779000)\n        libunistring.so.2 =&gt; /lib/x86_64-linux-gnu/libunistring.so.2 (0x00007f1d765f5000)\n        libtasn1.so.6 =&gt; /lib/x86_64-linux-gnu/libtasn1.so.6 (0x00007f1d765df000)\n        libnettle.so.8 =&gt; /lib/x86_64-linux-gnu/libnettle.so.8 (0x00007f1d7659f000)\n        libhogweed.so.6 =&gt; /lib/x86_64-linux-gnu/libhogweed.so.6 (0x00007f1d76556000)\n        libgmp.so.10 =&gt; /lib/x86_64-linux-gnu/libgmp.so.10 (0x00007f1d764d3000)\n        libffi.so.7 =&gt; /lib/x86_64-linux-gnu/libffi.so.7 (0x00007f1d764c7000)\n</code></pre>\n<p>So, as you can see it depends upon <code>libcrypto.so</code> which is i think openssl library. Now debugging a a function called from main, named <code>process_data</code> has this code as ghidra gave with some modification: <a href=\"https://cdn.discordapp.com/attachments/716265091489595473/761480880060366848/mysql_zip.c\" rel=\"nofollow noreferrer\">process_data_code</a></p>\n<p>Now, i know upto md5 part that it get data from message table and stores a row....... So, i came to md5sum part, its passing the variables to md5sum but i dont know what are the functions of md5sum parameters. If it were libc functions like snprintf or fputs i could see manpage or try googling but it didnt give me nice results. This stackoverflow answer</p>\n<p><a href=\"https://i.sstatic.net/uKydD.png\" rel=\"nofollow noreferrer\"><img alt=\"Stackoverflow\" src=\"https://i.sstatic.net/uKydD.png\"/></a> says the first parameter is password, second is length of password\nand third is some weird shit. So, if you see the code you will get md5sum has 4 parameters</p>\n<p><code>md5sum(random_mysql_rows_bufarray,mysql_rows_buffer_length &amp; 0xffffffff, filename_ofvarlocal, mysql_rows_buffer_length &amp; 0xffffffff);</code></p>\n<p>Also, that answer says md5sum having 4 parameter isnt openssl md5. I just want to figure out what is the function of those 4 parameters in md5sum. Also if you could explain what is the weird <code>&amp; 0xfffffff</code> thing then it would be great! Here's the binary : <a href=\"https://cdn.discordapp.com/attachments/716265091489595473/761489241875808266/revbinary\" rel=\"nofollow noreferrer\">reverse binary</a></p>\n<p>Yeah, md5sum takes 4 parameter, got it.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "221",
    "tags": [
        "decompilation",
        "elf",
        "ghidra",
        "binary",
        "openssl"
    ],
    "user": "Machinexa2",
    "time": "Oct 3, 2020 at 8:54",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">remove the image and link the <a href=\"https://stackoverflow.com/questions/21947393/in-which-library-is-the-md5-function\">query</a>  and according  to that query it was a mistake and was edited later to show only three arguments openssl.md5sum takes 3 arguments only remove words that are not usable in a public site from your query thethird argument is a pointer to the returned hashvalue a char buffer[]</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>the file command says the binary is unstripped you shouldn't have much problem identifying the arguments</p>\n<p>the &amp;0xffffffff is a mask to get a 32 bit value from a 64 bit value</p>\n<p>for example if a function is proto typed as <code>ulong64 foo(ulong64 a, ulong b);</code></p>\n<p>as x64 calling convention uses 6 registers in linux system ABI  <a href=\"https://stackoverflow.com/questions/17437191/function-parameters-transferred-in-registers-on-64bit-os\">RDI, RSI, RDX, RCX, R8, and R9</a>  you cannot simply pass rsi without zeroing the upper 32 bits</p>\n<p>the &amp; 0xffffffff zeros the upper 32 bits of 64 bit register</p>\n<pre><code>&gt;&gt;&gt; a = 0x123456789abcdef0\n&gt;&gt;&gt; b = a &amp; 0xffffffff\n&gt;&gt;&gt; print(\"val32=%016x\\nval64=%016x\\n\" % (b,a))\nval32=000000009abcdef0\nval64=123456789abcdef0 \n</code></pre>\n<p>if the line you pasted is from ghidra then ghidra might be mistaking the use of a register you can over ride the function signature</p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Oct 2, 2020 at 20:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}