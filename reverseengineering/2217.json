{
    "title": "Reverse Engineering Managed Code",
    "link": "https://reverseengineering.stackexchange.com/questions/2217/reverse-engineering-managed-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is reverse engineering managed code from .NET easier or harder?  I think it might be Java bytecode that can be easily converted back into source code.  Is managed code from .NET similar, and why?</p>\n</div>",
    "votes": "7",
    "answers": 3,
    "views": "5k",
    "tags": [
        ".net"
    ],
    "user": "zer",
    "time": "Jun 9, 2013 at 14:11",
    "comments": [
        {
            "user": "DCoder",
            "text": "<span class=\"comment-copy\">I'll let someone else compare .NET to Java, but if the bytecode hasn't been intentionally obfuscated (e.g. by Dotfuscator), it's definitely easier to reverse than <i>unmanaged code</i>. Compare results of dotPeek versus those of Hex-Rays. The VM is a lot less \"organically grown\" than the x86 architecture (read: much cleaner), and the managed binaries contain a lot more metadata.</span>",
            "time": null
        },
        {
            "user": "Mike Strobel",
            "text": "<span class=\"comment-copy\">As to .NET versus Java, I find that .NET IL is generally easier to decompile than Java bytecode.  For example, the way locals are managed in Java bytecode is more complicated (e.g., double-word types occupy two slots); the end offset of exception handler blocks must be computed manually, as it is not included in the metadata; ranges of local variables may need to be computed if code is compiled without debug information; since Java 5, <code>finally</code> blocks have been inlined.  I'm sure there are other minor inconveniences that I am overlooking, though .NET surely has several of its own.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Reverse engineering .net without any anti-reverse engineering protections is trivial.</p>\n<p>The reason is that programs like these are compiled down to an intermediate language that we call <strong>bytecode</strong> which contains high level information (symbol names,data definitions etc) making it possible to recover source code almost similar to the original which simplifies the reverse engineering process.</p>\n<p>Because of that obfuscation is very common, so take a look at these <strong><a href=\"http://www.woodmann.com/collaborative/tools/index.php/Category%3a.NET_Deobfuscation_Tools\" rel=\"nofollow\">.NET Deobfuscation Tools</a></strong> posted at <strong><a href=\"http://www.woodmann.com/forum/activity.php\" rel=\"nofollow\">woodmann</a></strong>.</p>\n<blockquote>\n<p>So is .NET malware usually compiled into native images and obfuscated, or is it usually just obfuscated .NET code?</p>\n</blockquote>\n<p>I doubt malware authors want something like .net converted to native code.<br/>\n<br>\nThe reason behind someone using .net malware is i guess because it can run on many platforms without caring about processor architecture so in .net malware they definitely want CIL to be there.</br></p>\n<p>Also think about the different languages .net supports.</p>\n</div>",
            "votes": "7",
            "user": "Lorenzo Dematté",
            "time": "Jun 11, 2013 at 7:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "dna",
                    "text": "<span class=\"comment-copy\"><code>I doubt malware authors want something like .net converted to native code.</code> Well I won't be so sure, there might be some advantages to go native over managed. Of course the processor architecture plays an important part however if you are not targeting too exotic devices, you can came up with an <i>acceptable portability</i> assuming only common instruction sets are used. Moreover I think it's actually possible to compile every references into native format, which should make a <i>framework free</i> app. This post has definitely exhausted my curiosity, I will have to try that!</span>",
                    "time": null
                },
                {
                    "user": "nomilk",
                    "text": "<span class=\"comment-copy\">@dna I agree.I shouldn't have put it that way there might be some advantages on doing that , i just cant think any right now.maybe these can help: <a href=\"http://www.symantec.com/connect/blogs/net-malware-looking-forward-windows-7\" rel=\"nofollow noreferrer\">symantec.com/connect/blogs/…</a> <a href=\"https://www.defcon.org/images/defcon-15/dc15-presentations/dc-15-ziegler.pdf\" rel=\"nofollow noreferrer\">defcon.org/images/defcon-15/dc15-presentations/…</a></span>",
                    "time": null
                },
                {
                    "user": "dna",
                    "text": "<span class=\"comment-copy\">Thanks for the links. I do agree with you, relying on the CLR is the easiest and most portable way to go - especially since it can focus non Windows OSes as well. Still this article is pretty interesting, <a href=\"http://www.ntcore.com/files/netint_native.htm\" rel=\"nofollow noreferrer\">ntcore.com/files/netint_native.htm</a>. It introduces a native loader for what I guess - not read everything yet - are a .NET 3.5 native images. Yet the author says it himself : <code>this is just a mess</code>. Shipping the framework along with the app and cheating ngen to target an older CPU. No comment, but still funny!</span>",
                    "time": null
                },
                {
                    "user": "nomilk",
                    "text": "<span class=\"comment-copy\">@dna Thx for the information ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In general, bytecode is easier to reverse engineer than compiled code.  It (usually) contains a lot more metadata and uses an idealized computing model.  A good obfuscater can make this much harder, but still not nearly as complex as native code written with reverse engineering in mind.  This is because bytecode languages don't allow nearly as many 'tricks' as real-world processors because they are designed to be higher level, safer, and portable.</p>\n<p>To address your specific issue, you can see how simple the CIL for .NET is at <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow\">Wikipedia</a>, and MS provides a <a href=\"http://msdn.microsoft.com/en-us/library/f7dy01k1%28v=VS.80%29.aspx\" rel=\"nofollow\">disassembler</a> in their .NET SDK.  Higher-level tools are just a google away.</p>\n</div>",
            "votes": "3",
            "user": "Robert Mason",
            "time": "Jun 9, 2013 at 19:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note that .NET code can also be compiled into native images as described by MS in the article <a href=\"http://msdn.microsoft.com/en-us/library/ht8ecch6%28v=vs.90%29.aspx\" rel=\"nofollow\">Compiling MSIL to Native Code</a>.\nthis is usally used for obivous security reasons :</p>\n<ul>\n<li>Code harder to reverse engineer</li>\n<li>No need of the JIT compiler at runtime</li>\n</ul>\n</div>",
            "votes": "1",
            "user": "dna",
            "time": "Jun 9, 2013 at 16:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zer",
                    "text": "<span class=\"comment-copy\">Good stuff, thanks guys.  So is .NET malware usually compiled into native images and obfuscated, or is it usually just obfuscated .NET code?</span>",
                    "time": null
                },
                {
                    "user": "dna",
                    "text": "<span class=\"comment-copy\">I never analysed a .NET malware. Yet I'm pretty sure you can find them in both formats, probably a little bit more into native binaries. But that's just an educated guess.</span>",
                    "time": null
                }
            ]
        }
    ]
}