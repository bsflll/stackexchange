{
    "title": "Reversing PECompact packed code (How SEH works)",
    "link": "https://reverseengineering.stackexchange.com/questions/11237/reversing-pecompact-packed-code-how-seh-works",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently reversing file that is packed with PECompact packer. I'm interested in actual algorithm how it unpacks itself rather than having unpacked file.</p>\n<p>It uses SEH for modifying program flow. So I would like to ask about SEH.</p>\n<p>So what I have:\n<a href=\"https://i.sstatic.net/0Z6fi.png\" rel=\"nofollow noreferrer\"><img alt=\"Step 1\" src=\"https://i.sstatic.net/0Z6fi.png\"/></a></p>\n<p>So I add breakpoint at <code>0x4517E4</code> after I pass exception into app I go here</p>\n<p><a href=\"https://i.sstatic.net/0B4eP.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/0B4eP.png\"/></a></p>\n<p>It does some code modifications and returns <code>0</code> (<code>ExceptionContinueExecution</code> from <code>EXCEPTION_DISPOSITION</code> enum). It returns to kernel function, but where should execution be continued from, after it goes back into app? I have tried putting breakpoint at <code>0x401016</code> because it is a point where exception occurred and it stopped there, I would like to ask if this is just a coincidence, or it should work this way?</p>\n<p>I believe it is related to <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa363082%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">EXCEPTION_RECORD</a> structure <code>ExceptionAddress</code> value. Am I right?</p>\n<p>So that I really want to know how exception handling determines point, from which program execution should be continued according to different return values from handler function.</p>\n<p><a href=\"http://www.filedropper.com/8b977be6928c30a5fe3886f6906c9e0fd83e85a75643eee5688c32461a96bcd9\" rel=\"nofollow noreferrer\">Also file I'm working on can be downloaded here</a></p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "exception",
        "seh"
    ],
    "user": "ST3",
    "time": "Nov 3, 2015 at 8:33",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">and the reason for doing this according to the author - to prevent anti-malware software from seeing the unpacking code and reporting false positives.  The problem is that we can emulate right through the SEH and still see the unpacker code.</span>",
            "time": null
        },
        {
            "user": "ST3",
            "text": "<span class=\"comment-copy\">@peterferrie didn't knew that, and it sound like \"anti anti-malware\". But ye it is very simple to reach unpacking stub.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think this is a great moment to introduce you to <a href=\"https://www.microsoft.com/msj/0197/exception/exception.aspx\" rel=\"nofollow\">this</a> great article written back in 1997, but which still holds up. I really recommend that you read it because it will explain to you everything about SEH. To answer your question about continuing execution, I will quote one paragraph from the article:</p>\n<blockquote>\n<p>When the operating system sees that <strong>ExceptionContinueExecution</strong> was\n  returned, it interprets this to mean that you've fixed the problem and\n  <strong>the faulting instruction should be restarted</strong>. Since my _except_handler\n  function tweaked the EAX register to point to valid memory, the MOV\n  EAX,1 instruction works the second time and function main continues\n  normally. See, that wasn't so complicated, was it?</p>\n</blockquote>\n</div>",
            "votes": "2",
            "user": "ubnix",
            "time": "Dec 3, 2015 at 14:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>MOV     EAX, F0450569\nLEA     ECX, DWORD PTR DS:[EAX+1000129E]   ;  ecx will be 00451807\nMOV     DWORD PTR DS:[ECX+1], EAX          ;  451808 will hold f0450569\nMOV     EDX, DWORD PTR SS:[ESP+4]          ;  ExceptionRecord\nMOV     EDX, DWORD PTR DS:[EDX+C]          ;  ExceptionRecord-&gt;ExceptionAddress == 401016\nMOV     BYTE PTR DS:[EDX], 0E9             ;  byte@exceptionAddress to e9 five byte jump\nADD     EDX, 5                             ;  ExceptionAddress+5 ==40101b\nSUB     ECX, EDX                           ;  451807-edx = 507ec\nMOV     DWORD PTR DS:[EDX-4], ECX          ;  assembles jmp 507ec @exception address\nXOR     EAX, EAX                           ;  retn 0 == exception has been handled\nRETN                                       ; 401016 == jmp 507ec instead of mov [eax],ecx\n</code></pre>\n<p>since the exception handler does not modify the eip but changes the opcodes of old eip you will end up executing the same old eip<br/>\npure coincidence<br/>\nnormally you should check ContextRecord-&gt;Eip before exiting from seh    handler this contains the eip that will be executed upon retun from kernel    check [[ESP+C]+0XB8]  on the retn to see the Context-&gt;Eip in seh handler</p>\n<p>you can also set a breakpoint in ntdll.NtContinue this is the function that    crosses the um-&gt;km boundary on seh exit<br/>\nwhen hit you can set a bp on CONTEXT-&gt;Eip ( xxx* + 0xb8 on x86 32 bit)    </p>\n</div>",
            "votes": "0",
            "user": "blabb",
            "time": "Nov 3, 2015 at 11:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}