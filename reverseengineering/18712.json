{
    "title": "ELF binary corrupted after adding instruction in non-executable section",
    "link": "https://reverseengineering.stackexchange.com/questions/18712/elf-binary-corrupted-after-adding-instruction-in-non-executable-section",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been messing around a little with Radare2 trying to master binary exploitation and patching.<br/>\nI added a couple of assembly instructions to an <em>x86 elf binary</em> in a non-executable section of the file, precisely the section <em>LOAD1</em> I spotted after listing the available sections of the executable :</p>\n<pre><code> S=\n00* 0x08048000 |#################################-----------------------------------------------| 0x0804868c  1.6K mr-x  LOAD0\n01  0x08049f0c |---------------------------------------------------------------------------#####| 0x0804a028   280 mrw-  LOAD1\n=&gt;  0x080483d0 |--------------------------------------------------------------------------------| 0x080483cf\n</code></pre>\n<p>Then when I tried to execute the binary I got the following error :</p>\n<pre><code>Inconsistency detected by ld.so: dl-version.c: 205: _dl_check_map_versions: Assertion `needed != NULL' failed!\n</code></pre>\n<p>I think the instructions types I added are not relevant in this matter as the issue arises with <code>mov</code> instructions as well as with simple <code>jmp</code>.  </p>\n<p>From what I know, the linking step had been performed at the compilation/linking of the original source code, so how does it come that <strong>ld</strong> is involved here ?</p>\n<p>What exactly causes the linker inconsistency triggering the above error ?  </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "355",
    "tags": [
        "x86",
        "radare2",
        "patching",
        "binary-editing"
    ],
    "user": "programmersn",
    "time": "Jul 6, 2018 at 17:21",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">use <code>iS</code> and not <code>S</code> or <code>S=</code> to list the sections</span>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<span class=\"comment-copy\">@Megabeets Why does <code>iS</code> list much more sections that <code>S</code> and <code>S=</code> commands do ?</span>",
            "time": null
        },
        {
            "user": "programmersn",
            "text": "<span class=\"comment-copy\">@Megabeets Moreover, <i>r2</i> <a href=\"https://radare.gitbooks.io/radare2book/content/basic_commands/sections.html\" rel=\"nofollow noreferrer\">doc</a> does not say a word about <code>iS</code>.</span>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\"><code>S</code> is outdated and eventually will be replaced with iS</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note that no section information is provided in your question. <code>LOAD0</code> and <code>LOAD1</code> refer to loadable segments. Refer to the SysV ABI for more details.</p>\n<blockquote>\n<p>From what I know, the linking step had been performed at the compilation/linking of the original source code, so how does it come that <strong>ld</strong> is involved here ?</p>\n</blockquote>\n<p>The link editor <a href=\"http://man7.org/linux/man-pages/man1/ld.1.html\" rel=\"nofollow noreferrer\">ld</a> is not involved here; rather, the dynamic linker/loader <a href=\"http://man7.org/linux/man-pages/man8/ld.so.8.html\" rel=\"nofollow noreferrer\">ld.so</a> is. </p>\n<blockquote>\n<p>What exactly causes the linker inconsistency triggering the above error ?</p>\n</blockquote>\n<p>Run <code>LD_DEBUG=symbols,bindings</code> or <code>LD_DEBUG=all</code>.</p>\n<p>See <a href=\"https://stackoverflow.com/questions/22564780/debugging-ld-inconsistency-detected-by-ld-so\">https://stackoverflow.com/questions/22564780/debugging-ld-inconsistency-detected-by-ld-so</a></p>\n</div>",
            "votes": "1",
            "user": "julian",
            "time": "Jul 7, 2018 at 0:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "programmersn",
                    "text": "<span class=\"comment-copy\">\"<i>Run LD_DEBUG=symbols,bindings or LD_DEBUG=all</i>\" How can I perform that while not having access to the source code ?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@programmersn LD_DEBUG is used to examine the behavior or the dynamic linker. Only the executable is needed. See <a href=\"https://docs.oracle.com/cd/E19683-01/816-1386/chapter3-33/index.html\" rel=\"nofollow noreferrer\">docs.oracle.com/cd/E19683-01/816-1386/chapter3-33/index.html</a></span>",
                    "time": null
                },
                {
                    "user": "programmersn",
                    "text": "<span class=\"comment-copy\">Just tried out exporting <i>LD_DEBUG=all</i> as env variable as you advised, but it does not show anything when the faulty program is executed (apart from the inconsistency message already mentioned), although debugging symbols are listed when running any other program.</span>",
                    "time": null
                }
            ]
        }
    ]
}