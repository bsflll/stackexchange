{
    "title": "Call function by ebp",
    "link": "https://reverseengineering.stackexchange.com/questions/22540/call-function-by-ebp",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I looking at exe file with Ida I see </p>\n<p><code>call dword ptr [ebp -70p]</code></p>\n<p>What is that? Why this function calling by ebp and not <code>call sub_0xabcd</code></p>\n<p>How can I know which function is that to enter to this function and see what happen there?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "721",
    "tags": [
        "ida",
        "windows",
        "functions",
        "register"
    ],
    "user": "ffz37097.eanok.com",
    "time": "Nov 14, 2019 at 18:31",
    "comments": [
        {
            "user": "ffz37097.eanok.com",
            "text": "<span class=\"comment-copy\">@Biswapriyo How can I know if this pointer to function(maybe in another dll). What should I see when I will looking at <code>ebp -70p</code>. ?  By the way why dword indicative for poiner to function?</span>",
            "time": null
        },
        {
            "user": "ffz37097.eanok.com",
            "text": "<span class=\"comment-copy\">@Biswapriyo why x64dbg is better than ida? Ida can debug exe file too...</span>",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "<span class=\"comment-copy\">I have moved my comments to the answer. You may remove the comments.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There could be a huge number of reasons for this ranging from something as innocuous as a method pointer being a local variable to obfuscation (highly unlikely with the assembly you showed). As for how to follow it, you can either BP the call and follow it or track the frame pointer to see what it's set to.</p>\n</div>",
            "votes": "1",
            "user": "Pickle Rick",
            "time": "Nov 15, 2019 at 4:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>call</code> instruction with local variable suggests it may be <a href=\"https://en.wikipedia.org/wiki/Function_pointer\" rel=\"nofollow noreferrer\">function pointer</a>.\nBut function pointer can be used in many cases. The simplest example is a raw\nC style function pointer.</p>\n<ul>\n<li>MSVC command used: <code>cl.exe /MDd file.c</code></li>\n<li>Environment: Intel X86</li>\n<li>Sample C code:</li>\n</ul>\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid func(int a) {\n    printf(\"%d\\n\", a);\n}\n\nint main(void) {\n    void (*func_ptr)(int) = &amp;func;\n    (*func_ptr)(10);\n}\n</code></pre>\n<ul>\n<li>IDA assembly view with only with function pointer call:</li>\n</ul>\n<pre><code>mov     dword ptr [ebp-4], offset func  ; move function pointer to stack\npush    10                              ; push 10 for first parameter\ncall    dword ptr [ebp-4]               ; call the function pointer\nadd     esp, 4\n</code></pre>\n<ul>\n<li><p>Other cases:</p>\n<ul>\n<li>The function pointer can be returned by calling <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress\" rel=\"nofollow noreferrer\"><code>GetProcAddress()</code></a>\nfunction which gets the address of an exported function.</li>\n<li>The function pointer may be a method of an instantiated object.</li>\n<li>It may be a <a href=\"https://en.wikipedia.org/wiki/Virtual_function\" rel=\"nofollow noreferrer\">virtual method</a> which may be resolved at runtime.</li>\n<li>It may be a real function call but the binary is dumped from memory before\nthe function import is resolved (<a href=\"https://www.youtube.com/watch?v=RfnuMhosxuQ\" rel=\"nofollow noreferrer\">video</a>).</li>\n</ul>\n</li>\n</ul>\n<p>How to know what happen there? Load it in a debugger. Set a breakpoint in that\nindirect call and follow its execution procedure. Judge other subroutines also.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}