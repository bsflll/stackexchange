{
    "title": "What is happening with these exceptions in OllyDbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/20021/what-is-happening-with-these-exceptions-in-ollydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse engineer something which appears to purposely create exceptions as part of its logic. In the image below, there are multiple DIV EAX commands that generate division by 0 exceptions because the value of EAX is set to 0. I told the debugger to send them back to the application. Since the application has some anti-reverse-engineering functionality, I am guessing that the command itself is for obfuscation while the real logic sits in the exception handler, which retries the command at the same address multiple times, and changes the values in other registers. However, the run trace in OllyDbg does not show the commands from this exception handler, and using 'Step Into' also does not work. How can I enable tracing and/or stepping through code in the exception handler?</p>\n<p><a href=\"https://i.sstatic.net/wBZVc.png\" rel=\"nofollow noreferrer\"><img alt=\"Run trace\" src=\"https://i.sstatic.net/wBZVc.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "777",
    "tags": [
        "ollydbg",
        "anti-debugging",
        "exception"
    ],
    "user": "HAL",
    "time": "Dec 1, 2018 at 10:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can see the list of SEH Chain in the View tab -&gt; SEH Chain. Just set a breakpoint at the address of SEH.</p>\n<p><a href=\"https://i.sstatic.net/OCP9b.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/OCP9b.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "ismael_akez",
            "time": "Dec 1, 2018 at 15:15",
            "is_accepted": true,
            "comments": []
        }
    ]
}