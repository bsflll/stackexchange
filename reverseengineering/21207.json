{
    "title": "Use ghidra decompiler with command line",
    "link": "https://reverseengineering.stackexchange.com/questions/21207/use-ghidra-decompiler-with-command-line",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there a way to run ghidra from command line ?</p>\n<p>GUI interface is very heavy.</p>\n<p>What i want is just to get functions list and decompile them in c.</p>\n<p>Thanks</p>\n</div>",
    "votes": "8",
    "answers": 4,
    "views": "15k",
    "tags": [
        "ghidra"
    ],
    "user": "Bob5421",
    "time": "Apr 24, 2019 at 15:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The Ghidra decompiler was integrated into <a href=\"https://github.com/radareorg/radare2\" rel=\"nofollow noreferrer\">radare2</a>, which is a command line disassembler (among other things). </p>\n<p>You need to install the <a href=\"https://github.com/radareorg/r2ghidra-dec\" rel=\"nofollow noreferrer\">r2ghidra-dec</a> package. You can then use the <code>afl</code> command to print the function list and the <code>pdg</code> command to show Ghidra's decompiled output for a given function.</p>\n<p>For example:</p>\n<pre><code>[0x080484d0]&gt; afl\n0x080484d0    1 50           entry0\n0x08048503    1 4            fcn.08048503\n0x08048480    1 6            sym.imp.__libc_start_main\n0x08048530    4 50   -&gt; 41   sym.deregister_tm_clones\n0x08048570    4 58   -&gt; 54   sym.register_tm_clones\n0x080485b0    3 34   -&gt; 31   entry.fini0\n0x080485e0    1 6            entry.init0\n0x08048780    1 2            sym.__libc_csu_fini\n0x08048520    1 4            sym.__x86.get_pc_thunk.bx\n0x0804865f    1 63           sym.vuln\n0x08048430    1 6            sym.imp.gets\n0x08048714    1 4            loc.get_return_address\n0x08048420    1 6            sym.imp.printf\n0x08048784    1 20           sym._fini\n0x08048720    4 93           sym.__libc_csu_init\n0x08048510    1 2            sym._dl_relocate_static_pie\n0x0804869e    1 118          main\n0x08048490    1 6            sym.imp.setvbuf\n0x08048450    1 6            sym.imp.getegid\n0x080484b0    1 6            sym.imp.setresgid\n0x08048460    1 6            sym.imp.puts\n0x080485e6    3 121          sym.flag\n0x080484a0    1 6            sym.imp.fopen\n0x08048470    1 6            sym.imp.exit\n0x08048440    1 6            sym.imp.fgets\n0x080483e8    3 35           sym._init\n[0x080484d0]&gt; pdg @ sym.vuln\n\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: [r2ghidra] Removing arg arg_4h because it doesn't fit into ProtoModel\n\nvoid sym.vuln(void)\n{\n    undefined4 uVar1;\n    int32_t unaff_EBX;\n    char *s;\n    int32_t var_4h;\n\n    sym.__x86.get_pc_thunk.bx();\n    sym.imp.gets(&amp;s);\n    uVar1 = loc.get_return_address();\n    sym.imp.printf(unaff_EBX + 0x19c, uVar1);\n    return;\n}\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Dvd848",
            "time": "Nov 8, 2019 at 19:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "elig",
                    "text": "<span class=\"comment-copy\">r2pm install r2ghidra</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check my answer <a href=\"https://reverseengineering.stackexchange.com/questions/21630/ghidra-how-to-run-a-python-3-script-with-headless-analyzer/21632#21632\">here</a>.</p>\n<p>All you have to do is to use <code>./analyzeHeadless</code> script, which comes with ghidra:</p>\n<pre><code>./analyzeHeadless ghidra-project-directory -import binary-file -postscript yourpythonscript\n</code></pre>\n<p>You can either use <code>java</code> or <code>python 2.7</code>. You can check the ghidra api <a href=\"https://ghidra.re/ghidra_docs/api/ghidra\" rel=\"noreferrer\">here</a>.</p>\n<p>You can write the script (in python) in the following way:</p>\n<pre><code>from  ghidra.app.decompiler import DecompInterface\nfrom ghidra.util.task import ConsoleTaskMonitor\n\n# get the current program\n# here currentProgram is predefined\n\nprogram = currentProgram\ndecompinterface = DecompInterface()\ndecompinterface.openProgram(program);\nfunctions = program.getFunctionManager().getFunctions(True)\nfor function in list(functions):\n    print(function)\n    # decompile each function\n    tokengrp = decompinterface.decompileFunction(function, 0, ConsoleTaskMonitor())\n    print(tokengrp.getDecompiledFunction().getC())\n</code></pre>\n</div>",
            "votes": "10",
            "user": "R4444",
            "time": "Aug 11, 2019 at 5:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One way is using Ghidra's <em>CppExporter</em> class within a Java class that extends <em>GhidraScript</em> class. Ghidra's source code contains some sample codes that could be found at the following link : <a href=\"https://github.com/NationalSecurityAgency/ghidra/tree/master/Ghidra/Features/Decompiler/ghidra_scripts\" rel=\"nofollow noreferrer\">Decompiler samples</a>.\nI took one of them and improved a bit the code.</p>\n<p>The code below has to be copied in a file called <strong>Decompile.java</strong>\nThen, you have to run Ghidra's <strong>analyzeHeadless</strong> binary tool.</p>\n<pre><code>&lt;ghidra_root&gt;/support/analyzeHeadless &lt;ghidra_project_dir&gt; &lt;project_name&gt; \\\n    -import &lt;path_to_binary&gt; -postscript &lt;your_path&gt;/Decompile.java &lt;out_C_file_path&gt;\n</code></pre>\n<p>Command example : </p>\n<pre><code>./analyzeHeadless MyProjDir MyProj -import libX.so -postscript Decompile.java libX_dec.c\n</code></pre>\n<p>Note : You might have to create project dir if it does not already exist.</p>\n<p><strong>Decompile.java</strong> example :</p>\n<pre><code>import java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Arrays;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport ghidra.app.plugin.core.script.Ingredient;\nimport ghidra.app.plugin.core.script.IngredientDescription;\nimport ghidra.app.script.GatherParamPanel;\nimport ghidra.app.script.GhidraScript;\nimport ghidra.app.util.Option;\nimport ghidra.app.util.OptionException;\nimport ghidra.app.util.exporter.CppExporter;\nimport ghidra.app.util.exporter.ExporterException;\n\npublic class Decompile extends GhidraScript implements Ingredient {\n    private static Logger log;\n\n    public Decompile() {\n        log = LogManager.getLogger(Decompile.class);\n    }\n\n    public void export(String filename) {\n        File outputFile = new File(filename);\n        CppExporter cppExporter = new CppExporter();\n        cppExporter.setExporterServiceProvider(state.getTool());\n\n        List&lt;Option&gt; options = new ArrayList&lt;Option&gt;();\n        Option cppExportHeaderOption =\n                new Option(CppExporter.CREATE_HEADER_FILE, new Boolean(false));\n        options.add(cppExportOption);\n        try {\n            cppExporter.setOptions(options);\n        } catch (OptionException e) {\n            log.error(\"Unable to set cppExporter options\", e);\n            return;\n        }\n\n        try {\n            cppExporter.export(outputFile, currentProgram, null, monitor);\n        } catch (IOException e) {\n            log.error(\"Failed writing decompiled code as output\", e);\n        } catch (ExporterException e) {\n            log.error(\"Failed to export with cppExporter\", e);\n        }\n    }\n\n    @Override\n    public void run() throws Exception {\n        IngredientDescription[] ingredients = getIngredientDescriptions();\n        for (IngredientDescription ingredient : ingredients) {\n            state.addParameter(ingredient.getID(), ingredient.getLabel(),\n                    ingredient.getType(), ingredient.getDefaultValue());\n        }\n\n        String[] args = getScriptArgs();\n        export(args[0]);\n    }\n\n    @Override\n    public IngredientDescription[] getIngredientDescriptions() {\n        IngredientDescription[] retVal = new IngredientDescription[] {\n          new IngredientDescription(\n                \"COutputFile\", \"Output C File\", GatherParamPanel.FILE, \"\")};\n        return retVal;\n    }\n}\n</code></pre>\n</div>",
            "votes": "2",
            "user": "vhamon",
            "time": "Aug 22, 2019 at 8:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote this script that takes in a binary and spews out the C source to a file. Just had to slightly modify ghidra's Ghidra/Features/Decompiler/ghidra_scripts/Decompile.java script.</p>\n<p><a href=\"https://github.com/h4sh5/ghidra-headless-decompile\" rel=\"nofollow noreferrer\">https://github.com/h4sh5/ghidra-headless-decompile</a></p>\n</div>",
            "votes": "1",
            "user": "Haoxi Tan",
            "time": "Aug 2, 2019 at 14:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Please provide the core details of the solution in your answer and not only link to code that accomplishes that. It will make it far more useful as a reference in the future.</span>",
                    "time": null
                }
            ]
        }
    ]
}