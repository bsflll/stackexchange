{
    "title": "IDA: Segment Class Name",
    "link": "https://reverseengineering.stackexchange.com/questions/2400/ida-segment-class-name",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As per <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/517.shtml\" rel=\"nofollow\">IDA Online Help</a>:</p>\n<blockquote>\n<p>The segment class name identifies the segment with a class name (such as CODE, FAR_DATA, or STACK). The linker places segments with the same class name into a contiguous area of memory in the runtime memory map.</p>\n</blockquote>\n<p>IDA has the following predefined segment class names:</p>\n<pre><code>    CODE    -       Pure code\n    DATA    -       Pure data\n    CONST   -       Pure data\n    BSS     -       Uninitialized data\n    STACK   -       Uninitialized data\n    XTRN    -       Extern definitions segment\n</code></pre>\n<p>As far as I could tell permission on a segment already offer all relevant information.\nWhat is the exact purpose(or applicable usage) of <em>Segment Class Name</em>? How does IDA utilize it internally?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "ida"
    ],
    "user": "PSS",
    "time": "Jul 2, 2013 at 15:53",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have looked through <a href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" rel=\"nofollow\">IDA SDK</a> and specifically <em>segment.hpp</em> file, and this is what I figured out. IDA has 12 segments types defined based on how those are treated by kernel. In addition, there are several \"fake\" segments, which IDA presumes would not contain code or data. As a result those are completely excluded from disassembly. This is how segment type is defined:</p>\n<pre><code>/* 94 */  uchar type;   // Type of the segment. The kernel treats different\n                        // segment types differently.\n                        // Segments marked with '*' contain no instructions\n                        // or data and are not declared as 'segments' in\n                        // the disassembly.\n\n#define SEG_NORM        0       // Unknown type, no assumptions\n#define SEG_XTRN        1       // * segment with 'extern' definitions\n                                //   no instructions are allowed\n#define SEG_CODE        2       // code segment\n#define SEG_DATA        3       // data segment\n#define SEG_IMP         4       // java: implementation segment\n#define SEG_GRP         6       // * group of segments\n#define SEG_NULL        7       // zero-length segment\n#define SEG_UNDF        8       // undefined segment type (not used)\n#define SEG_BSS         9       // uninitialized segment\n#define SEG_ABSSYM     10       // * segment with definitions of absolute symbols\n#define SEG_COMM       11       // * segment with communal definitions\n#define SEG_IMEM       12       // internal processor memory &amp; sfr (8051)\n</code></pre>\n<p>The Class of the segment is \"mapped\" to its type in the following manner:</p>\n<pre><code> //                      \"CODE\"  -&gt; SEG_CODE\n //                      \"DATA\"  -&gt; SEG_DATA\n //                      \"CONST\" -&gt; SEG_DATA\n //                      \"STACK\" -&gt; SEG_BSS\n //                      \"BSS\"   -&gt; SEG_BSS\n //                      \"XTRN\"  -&gt; SEG_XTRN\n //                      \"COMM\"  -&gt; SEG_COMM\n //                      \"ABS\"   -&gt; SEG_ABS\n</code></pre>\n<p>In addition, I have found out that permissions are actually \"figured out\" and set by particular loader modules, which would also set segment types (ergo Classes) based on specifics of the loaded file. </p>\n</div>",
            "votes": "4",
            "user": "PSS",
            "time": "Jul 10, 2013 at 5:11",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Also, while permissions are more or less standardized and can inform you about the types of data/code found in a segment, remember that if you're talking about malware analysis there is no guarantee that the permissions on a segment are what you would expect.</p>\n<p>Not to mention that there is often a fair amount of header tampering in addition to non-standard memory utilization.  In fact, this is often how you can tell whether something was written in assembly, mangled with a tool or compiled from some other language.</p>\n</div>",
            "votes": "4",
            "user": "David Hoelzer",
            "time": "Jul 13, 2013 at 1:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are differences between the segments types other than the permissions. For example XTRN is used to show the pink areas for imports in the disassembly view.\nI guess that info also helps IDA in the autoanalysis phase for code, data and const segments. Elements in code sections have higher chance of being code then data, and vice versa.\nStack is obviously very different at how it's displayed and handled.</p>\n</div>",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jul 3, 2013 at 10:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">@Nirlzr \"I guess that info also helps IDA in the autoanalysis phase for code, data and const segments\" How does it help IDA?</span>",
                    "time": null
                }
            ]
        }
    ]
}