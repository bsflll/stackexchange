{
    "title": "How is the I/O address space on the PC arranged?",
    "link": "https://reverseengineering.stackexchange.com/questions/20333/how-is-the-i-o-address-space-on-the-pc-arranged",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm disassembling a 16-bit DOS executable, and looking at the following three instructions:</p>\n<pre><code>mov dx,0x3ce\nmov ax,0xff08\nout dx,ax\n</code></pre>\n<p>I know it writes the value <code>0xff08</code> to I/O port <code>0x3ce</code>. I also know that port <code>0x3ce</code> is the \"Graphics 1 &amp; 2 Address\" register on an IBM EGA card. Problem is, according to the <a href=\"http://www.minuszerodegrees.net/oa/OA%20-%20IBM%20Enhanced%20Graphics%20Adapter.pdf\" rel=\"nofollow noreferrer\">manual</a>, this port should take a byte value, not a word.</p>\n<p>What I'm guessing is happening is that the word <code>0xff08</code> is taken as two different bytes, where one byte ends up in the specified register and the other goes to an adjacent one. Or maybe the offending byte gets thrown out? Either way it's a guess, as I can't seem to find much info about this specific behavior.</p>\n<p>I don't have a good intuitive sense about which direction the I/O address space flows, or how the little-endian storage of the word may come into play. After this snippet executes, which ports got which bytes?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "482",
    "tags": [
        "disassembly",
        "x86",
        "address",
        "graphics"
    ],
    "user": "smitelli",
    "time": "Jan 10, 2019 at 23:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Port I/O works similar to memory I/O, so the low byte (08) will be written to the port 3CE and the high byte (0xFF) to the port 3CF. </p>\n<p>Example from <a href=\"http://www.retroarchive.org/swag/EGAVGA/0222.PAS.html\" rel=\"nofollow noreferrer\"><em>Use of bitplanes in mode 12h</em></a>:</p>\n<blockquote>\n<p>The index port of the Graphics Controller (part of the VGA interface) is at\n  $3CE. The data port is at (index+1), so $3CF. If we want to write a 4 to index\n  2, we do: Port[$3CE]:=2; { index } Port[$3CF]:=4; { data }\n  But there is a way to do it with one Port[]. There's also a PortW[] 'array',\n  and if the addressed port isn't a 16-bit one, it sends the lo byte to\n  address, and the high byte to address+1. Just what we need. The example\n  becomes: PortW[$3CE]:=$0402; { index in low byte, data in high byte }</p>\n</blockquote>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jan 11, 2019 at 0:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}