{
    "title": "Reverse Engineering Android Kernel",
    "link": "https://reverseengineering.stackexchange.com/questions/12692/reverse-engineering-android-kernel",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How do I reverse engineer the Android kernel currently running on an Android phone?  I'm most interested in seeing/manipulating the call stack.  Basically, gdb or something like Ollydgb would be great.  I am not looking to build the kernel from source.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "android"
    ],
    "user": "user2883649",
    "time": "May 20, 2016 at 13:24",
    "comments": [
        {
            "user": "SkryptX",
            "text": "<span class=\"comment-copy\">You can't analyze something that does not naturally communicate with you and you can't attach a normal debugger to it, because it's not a process. Possabilities are: You can disassemble your phone and attach a hardwaredebugger, maybe use the Android simulator with some kind of hack, maybe modify your system in a way that it lets you access deeper levels of the system. Or you just build a custom kernel that you modify and lets you examine the callstack of it. It don't see a \"easy to go\" solution for this, but maybe somebody has a better idea. If you find something share it with us :)</span>",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Waaaay too little info to be a good question. Well Android is a Linux kernel. Do you have superuser on the phone or can you gain it, e.g. by means of ADB or similar? Mainly it's unclear <i>which</i> call stack you want to see (the one inside kernel space, the one inside user space or even the Dalvik call stack). Would <code>strace</code> be of help in any way?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Probably the easiest way to go about it is to find out what firmware image your phone is running and download it, extract the kernel blob (zImage), then fire that up in the android emulator/QEMU and remote kgdb into it.</p>\n<p>You could unpack the kernel using unmkbootimg: <a href=\"https://github.com/osm0sis/mkbootimg\" rel=\"noreferrer\">https://github.com/osm0sis/mkbootimg</a></p>\n<p>There are plenty of tutorials on xda for unpacking the kernel.</p>\n<p>Here's a link of some dude debugging an android kernel in the emulator:\n<a href=\"http://www.informit.com/articles/article.aspx?p=2431417&amp;seqNum=3\" rel=\"noreferrer\">http://www.informit.com/articles/article.aspx?p=2431417&amp;seqNum=3</a></p>\n</div>",
            "votes": "4",
            "user": "Tom Cornelius",
            "time": "May 20, 2016 at 18:34",
            "is_accepted": true,
            "comments": []
        }
    ]
}