{
    "title": "Automating a crackme solving process",
    "link": "https://reverseengineering.stackexchange.com/questions/19390/automating-a-crackme-solving-process",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say we have a simple crackme, which asks for a password. After verifying it, <code>eax</code> will contain <code>1</code> if it is correct, and <code>0</code> otherwise. Is there a way (I am interested both in Linux and Windows) for automating the following:</p>\n<ol>\n<li>Load executable</li>\n<li>Put breakpoint at a known address</li>\n<li>Provide a password as input for the executable</li>\n<li>When reaching the breakpoint set <code>eax</code> to <code>1</code></li>\n<li>Save any output of the executable</li>\n</ol>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "631",
    "tags": [
        "debuggers",
        "crackme",
        "automation"
    ],
    "user": "robert",
    "time": "Sep 18, 2018 at 18:02",
    "comments": [
        {
            "user": "Twifty",
            "text": "<span class=\"comment-copy\">There are too many variables for an automated process. In the past I've extracted the asm I'm interested in and added it inline to a c/c++ app. Another method would be to load the binary from c/c++ and call the functions directly, much like you would do with a dll.</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">This question is equivalent to \"do you know any scriptable debugger\"...</span>",
            "time": null
        },
        {
            "user": "robert",
            "text": "<span class=\"comment-copy\">Yes, it may be equivalent to \"do you know any scriptable debugger\"...</span>",
            "time": null
        },
        {
            "user": "user22970",
            "text": "<span class=\"comment-copy\">If you will automate stuff on linux, note that ptrace will read/write data as 64 bit on 64 bit systems, not 32 bit. that means you should be carful with a code you reuse that was originally written to 32 bit, it might need modifications</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>windbg in windows and gdb in linux both are capable of executing scripts to automate tasks  </p>\n<p>what you ask should be doable fairly easily in both of the debuggers </p>\n<p>here is a demeo for windbg </p>\n<p>source for a simple crackme that takes a password</p>\n<pre><code>:\\&gt;cat simcram.cpp\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\nint checkpass(char *pass) {\n    return strcmp(\"goodboy\" , pass);\n}\nint main(int argc , char *argv[] ) {\n    if(argc != 2 ) {\n        printf(\"usage %s password\\n\" , argv[0]);\n        exit(0);\n    }\n    int res = checkpass(argv[1]);\n    if(res == 0 ) {\n        printf(\"please proceeed to vault\\n\");\n    } else {\n        printf(\"access denied incorrect password\\n\");\n    }\n    return res;\n}\n</code></pre>\n<p>executing directly on console </p>\n<pre><code>:\\&gt;simcram.exe\nusage simcram.exe password\n\n:\\&gt;simcram.exe foobar\naccess denied incorrect password\n\n:\\&gt;simcram.exe goodboy\nplease proceeed to vault\n</code></pre>\n<p>a scripted execution that would set eax to 0 irresepective on any password</p>\n<pre><code>:\\&gt;cdb -c \"g simcram!checkpass;gu;r eax= 0;g;q\" simcram.exe abracadabragiligilichoo\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nCommandLine: simcram.exe abracadabragiligilichoo\n\n\nntdll!LdrpDoDebuggerBreak+0x2c:\n77b205a6 cc              int     3\n0:000&gt; cdb: Reading initial command 'g simcram!checkpass;gu;r eax= 0;g;q'\n\nplease proceeed to vault  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nquit:\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 18, 2018 at 18:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the number of instructions executed is proportional to the number of characters correct (i.e, maybe it's a simple byte-by-byte strcmp), then you could use instrumentation tools like <a href=\"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool\" rel=\"nofollow noreferrer\">Pintool</a> to count the number of instructions executed, and use that to brute-force the password byte-by-byte. <a href=\"https://github.com/mattfeng/hsf/tree/master/2016/isengard_fixed\" rel=\"nofollow noreferrer\">Here's</a> an example of that.</p>\n</div>",
            "votes": "1",
            "user": "user464014",
            "time": "Sep 22, 2018 at 20:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}