{
    "title": "How to connect two Windows VMWare virtual machines over a virtual serial port for kernel debugging on a Linux host",
    "link": "https://reverseengineering.stackexchange.com/questions/13139/how-to-connect-two-windows-vmware-virtual-machines-over-a-virtual-serial-port-fo",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>The problem:</strong> Recently I had to perform a kernel debugging on two MS windows VMWare virtual machines connected via a virtual serial port, and while running on a GNU/Linux host.</p>\n<p><strong>The layout:</strong> GNU/Linux host with Arch Linux distribution (even though the distro does not play a crucial role in this scenario), with VMWare Workstation 11 installed, hosting two MS Windows virtual machines - MS Windows 7SP1 x64 (the DEBUGGER), and MS Windows 8.0 x64 (the DEBUGGEE).</p>\n<p><strong>The solution:</strong> I did quite a lot of Googling to figure this out, and there was some information here and there, but I was no able to find a solution that would work for my case.\nTherefore, I have compiled my findings and a working step-by-step approach in the solution written below. Hopefully this will be also useful for someone else as well.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "windows",
        "debugging",
        "virtual-machines"
    ],
    "user": "lockout",
    "time": "Jul 25, 2016 at 12:30",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">this was on an old vmwareplayer  (the physical machine that hosts the vms shouldn't matter theoratically) <a href=\"http://www.woodmann.com/forum/entry.php?234-connect-two-virtual-machines-on-one-physical-host-and-use-wdeb386-to-debug-win98-app\" rel=\"nofollow noreferrer\">woodmann.com/forum/â€¦</a></span>",
            "time": null
        },
        {
            "user": "lockout",
            "text": "<span class=\"comment-copy\">The named socket creation differs per physical host OS. And there are differences across VMware versions with how to set up the VM (debugger) to VM (debuggee) communication.</span>",
            "time": null
        },
        {
            "user": "Marcus",
            "text": "<span class=\"comment-copy\">I followed your steps..but no output.Debugger m/c not able to connect debuggee machine.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a step-by-step approach, excluding the actual host system installation, VMware setup and Virtual Machine creation, since these are rudimentary steps and anyone willing to perform kernel debugging should be capable doing.\nThe approach is split into three parts - the VM hardware settings, MS Windows configuration, and establishing a debugging session.</p>\n<h2>I. VM hardware settings</h2>\n<ol>\n<li><p>Start with the DEBUGGER VM (the one from where you will be connecting to the DEBUGGEE to perform kernel debugging). In virtual machine settings hardware tab click 'Add...' to add new 'Serial port' device. </p>\n<p><a href=\"https://i.sstatic.net/au2mO.png\" rel=\"nofollow noreferrer\"><img alt=\"VMWare VM serial port\" src=\"https://i.sstatic.net/au2mO.png\"/></a></p></li>\n<li><p>Set Serial port type to 'Output to socket'.</p>\n<p><a href=\"https://i.sstatic.net/kSLkO.png\" rel=\"nofollow noreferrer\"><img alt=\"Output to socket\" src=\"https://i.sstatic.net/kSLkO.png\"/></a></p></li>\n<li><p>Give the name to the Socket (named pipe) a one you desire in a writeable location. I chose a '/tmp' folder and give the name 'com1', so that the full path of the socket is '/tmp/com1'. Since the DEBUGGER will connect to a DEBUGGEE specify the direction of connection as 'From: Client' and 'To: A Virtual Machine'. Also, make sure the device status is selected as 'Connect at power on' unless you require otherwise.</p>\n<p><a href=\"https://i.sstatic.net/G3Ng5.png\" rel=\"nofollow noreferrer\"><img alt=\"Named pipe\" src=\"https://i.sstatic.net/G3Ng5.png\"/></a></p></li>\n<li><p>Once you click 'Finish' the DEBUGGER VM is prepared to use the serial connection.</p>\n<p><a href=\"https://i.sstatic.net/XeL7o.png\" rel=\"nofollow noreferrer\"><img alt=\"Debugger ready\" src=\"https://i.sstatic.net/XeL7o.png\"/></a></p></li>\n<li><p>Configure the DEBUGGEE VM (the one which will be debugged). In virtual machine settings hardware tab click 'Add...' to add new 'Serial port' device.Set Serial port type to 'Output to socket'. Give the name to the Socket exactly the same one as you set it for the DEBUGGER, in this case - '/tmp/com1'. Specify the direction of connection as 'From: Server' and 'To: A Virtual Machine'. Check that device status is selected as 'Connect at power on' unless you require otherwise.</p>\n<p><a href=\"https://i.sstatic.net/T3gFs.png\" rel=\"nofollow noreferrer\"><img alt=\"Debuggee named pipe\" src=\"https://i.sstatic.net/T3gFs.png\"/></a></p></li>\n<li><p>For the I/O mode make sure that 'Yield CPU on poll' is checked. Once done, this will prepare your VM to use the serial connection, and both VMs should be able to communicate over that.\n<a href=\"https://i.sstatic.net/mo4TG.png\" rel=\"nofollow noreferrer\"><img alt=\"Debuggee ready\" src=\"https://i.sstatic.net/mo4TG.png\"/></a></p></li>\n</ol>\n<h2>II. MS Windows configuration</h2>\n<ol start=\"7\">\n<li><p>Start you DEBUGGEE machine in order to enable debugging mode on a MS Windows system. Launch the command prompt 'cmd.exe' as Administrator and execute the 'bcdedit' command to view the current boot settings.</p>\n<p><a href=\"https://i.sstatic.net/zd5La.png\" rel=\"nofollow noreferrer\"><img alt=\"bcdedit\" src=\"https://i.sstatic.net/zd5La.png\"/></a></p></li>\n<li><p>Execute (and adjust identifiers as needed) the following commands to create an additional boot option with debugging enabled:</p>\n<blockquote>\n<p>bcdedit /copy {current} /d \"Windows 8 Debugging\"</p>\n<p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debug on</p>\n<p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debugtype serial</p>\n<p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debugport 1</p>\n<p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} baudrate 115200</p>\n</blockquote>\n<p>This should get your MS Windows DEBUGGEE be ready to boot in a debugging mode once restarted.</p></li>\n</ol>\n<h2>III. Establishing a debugging session</h2>\n<ol start=\"9\">\n<li><p>Start the DEBUGGER VM. Download and install the MS Windows SDK with debugging tools. The Microsoft Windows SDK for Windows 7 can be found <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=3138\" rel=\"nofollow noreferrer\">here</a>. Run the WinDbg and choose 'File/Kernel Debug (Ctrl+K)' to configure a debugging session over serial connection. In kernel Debugging settings COM tab, set baud rate to 115200 and port - com1 (or the name you specified). Once you click OK, the WinDbg will start waiting on com1 for incoming debugging sessions.</p>\n<p><a href=\"https://i.sstatic.net/8HLQw.png\" rel=\"nofollow noreferrer\"><img alt=\"WinDbg Setup\" src=\"https://i.sstatic.net/8HLQw.png\"/></a></p></li>\n<li><p>Start the DEBUGGEE VM. Make sure you choose the \"Windows 8 Debugging\" boot option to start the machine in the debugging mode.</p></li>\n<li><p>On your DEBUGGER VM in WinDbg you should see an incoming kernel debugging connection. Select 'Debug/Break (Ctrl+Break)' to issue an interrupt and start debugging the kernel.</p>\n<p><a href=\"https://i.sstatic.net/dp0VN.png\" rel=\"nofollow noreferrer\"><img alt=\"Kernel debugging connection\" src=\"https://i.sstatic.net/dp0VN.png\"/></a></p></li>\n</ol>\n<p>These steps should be enough to get the Kernel Debugging session over serial connection between two MS Windows VMs on a GNU/Linux host up and running.</p>\n</div>",
            "votes": "4",
            "user": "lockout",
            "time": "Jul 25, 2016 at 12:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mohd Shahril",
                    "text": "<span class=\"comment-copy\">Thank you for the step by step explanation, it works!</span>",
                    "time": null
                }
            ]
        }
    ]
}