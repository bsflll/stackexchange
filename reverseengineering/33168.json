{
    "title": "Finding entrypoints (native functions) in games/programs",
    "link": "https://reverseengineering.stackexchange.com/questions/33168/finding-entrypoints-native-functions-in-games-programs",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on a personal project involving reverse engineering a game executable to hook specific functions. The goal is to create a modding framework similar to ScriptHookV for GTA5 or F4SE for Fallout4. I've already created my basic DLL (in C#). The game loads/executes my code fine. The next step is finding functions to hook.</p>\n<p>While I have experience with reverse engineering, manually finding and analyzing hundreds of functions is impractical. I've explored techniques like basic signature scanning, but to no avail. I'm a little stuck because the exe has obviously been stripped of any debug symbols and i'm not a \"low level guru\".</p>\n<p><strong>The actual questions:</strong></p>\n<ol>\n<li>What are the most efficient methods to locate potential function\naddresses within a stripped executable?</li>\n<li>How can I identify the function's signature and/or name without access\nto source code or debug symbols?</li>\n<li>Are there tools or techniques to automate this process partially or\nfully? How do established modding frameworks (e.g., ScriptHookV,\nF4SE, etc) typically approach this problem?</li>\n</ol>\n<p>I'm particularly interested in understanding the process of identifying functions related to specific game features (e.g., health, time of day, player state) without relying solely on trial and error. These functions are internal/private and not simply in the export table of the exe.</p>\n<p>Any insights or recommendations would be greatly appreciated.</p>\n<p><strong>Additional Notes:</strong></p>\n<p>I'm aware of tools like IDA Pro and Ghidra, but I'm looking for a more efficient approaches beyond manual analysis. The game in question (Scrap Mechanic) is irrelevant to the core problem; I'm looking for general techniques applicable to various applications. I prefer working in C#, but i do know the basics of c/c++. I'm also not interested in using any paid software.</p>\n<p><em>While obvious in my eyes i feel like i should mention the OS is windows, architecture is x86.</em></p>\n<p><strong>TL;DR:</strong>\nGiven a game's windows executable, how would one go about finding internal functions (e.g. for getting/setting health values, setting time of day, etc)? How do frameworks like ScriptHookV for GTA5 get a list of 100s of functions and their names and signatures. Maybe i'm overcomplicating this and they're just modifying values in RAM and wrapping that in a new function. Any help is appreciated!</p>\n<p><strong>EDIT:</strong>\nWith entrypoint i mean game functions. Take ScripthookV for GTAV for example, you can set the clothing of NPCs, time of day, weather, wanted  level, spawn vehicles, find terrain height at any point, get/set weapon, give ammo, etc etc...\nThese functions are called/used internally in the game, but are not exported. Somehow scripthook has a list of offsets/addresses of these functions and can call them directly. The question is how did they get this list (and how can I make one üòÅ)</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "127",
    "tags": [
        "windows",
        "function-hooking",
        "c#",
        "game-hacking"
    ],
    "user": "galla153",
    "time": "Aug 27, 2024 at 10:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, you need to determine what engine the game is built on.</p>\n<p>If the game is written in Unity, there is no point in learning C++ code, since all important game mechanics are written in C#. In this case, BepInEx will help (it supports IL2CPP games). You will study the code and look for functions in dnSpy / dotPeek.</p>\n<p>If the game is written in RPG Maker, then it can be completely unpacked to the sources.</p>\n<p>For Gadot and Unreal, you need to determine the engine version, and load symbols for known functions. If you really need the engine features.</p>\n<p>Finally, if you found an old game written in C++ from scratch or on some not very common engine, you will have to decompile it and manually search in IDA / Ghidra.</p>\n<p>In any case, remember that in modern engines, game logic is most often separated from rendering, and can often be written in different language like interpreted LUA or JS and stored in open (or encrypted) form in game archives, while you study the native code of the engine itself.</p>\n<p>P.S. Entry Point is WinMain or a function marked as exported. That should be enough. IDA and other similar decompilers analyze the code segment of the executable file and find all functions for you. Which of them do you call EntryPoint? All hundreds of thousands are Entry for other functions and algorithms, and at the same time they all go to WinMain along the call chain.</p>\n</div>",
            "votes": "1",
            "user": "Albeoris",
            "time": "Aug 25, 2024 at 10:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "galla153",
                    "text": "<span class=\"comment-copy\">The game (Scrap Mechanic) is written in a custom engine. It did use OGRE some years ago (which is technically not really an engine i guess). Some things are implemented in lua, but the fun stuff (suspension pieces, logic gates, etc) isnt. With this custom API i'd also like to implement better file IO since the LUA env is sandboxed.  PS. I was playing cyberpunk (with mods) the other day and again i found \"addresslibrary.json and -.bin\", same for GTAV and Fallout4. Is it coincidence that all those files have the same name/style? or which software/technique is uses to generate those? Thx thoüòÅ</span>",
                    "time": null
                }
            ]
        }
    ]
}