{
    "title": "How can I detect if my application is running in x64debug?",
    "link": "https://reverseengineering.stackexchange.com/questions/29276/how-can-i-detect-if-my-application-is-running-in-x64debug",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am writing my own applications to practice reversing. I want to be able to detect debuggers and change the execution in response.</p>\n<p>When building the application, I am easily able to detect it is being debugged with\n<code>System.Diagnostics.Debugger.IsAttached</code> or kernel32.dll's <code>CheckRemoteDebuggerPresent</code>method.</p>\n<pre><code>if (System.Diagnostics.Debugger.IsAttached)\n            {\n                //code if being debugged\n            }\n</code></pre>\n<p>When I debug my release in x64dbg though, the debugger is not detected. Is there a way to detect this?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "728",
    "tags": [
        "x64dbg",
        "anti-debugging",
        "c#"
    ],
    "user": "Srackers",
    "time": "Sep 11, 2021 at 17:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Pretty sure <code>System.Diagnostics.Debugger.IsAttached</code> detects only managed debuggers, whereas the code you mentioned <code>CheckRemoteDebuggerPresent</code>, should work on any kind of debugger, provided there is no anti-anti-debugging protection applied.\nManaged debuggers, refer to those such as your .net managed debugger.</p>\n<p>Note that <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-checkremotedebuggerpresent\" rel=\"nofollow noreferrer\">CheckRemoteDebuggerPresent</a>, when the handle is set to the current process, is essentially the same as <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent\" rel=\"nofollow noreferrer\">IsDebuggerPresent</a></p>\n<p>IsDebuggerPresent is the simplest way to check if a debugger is attached to your process, but also the easiest debugging detection technique to bypass.</p>\n<p>You can checkout this article for a list of some of the common techniques used (there are many ways to detect !) : <a href=\"https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software\" rel=\"nofollow noreferrer\">https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software</a></p>\n</div>",
            "votes": "1",
            "user": "Jack",
            "time": "Sep 11, 2021 at 18:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}