{
    "title": "How to extract machine code from a file(especially executable) in C",
    "link": "https://reverseengineering.stackexchange.com/questions/26956/how-to-extract-machine-code-from-a-fileespecially-executable-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How to get machine code of a file(mainly executables) in C?\nI have written a C program to convert machine code to assembly. But how to get machine code of a file? How would I go about programming a c program to convert a file to machine code?</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "2k",
    "tags": [
        "c",
        "executable",
        "exe",
        "machine-code"
    ],
    "user": "BleepLogger",
    "time": "Feb 5, 2021 at 14:30",
    "comments": [
        {
            "user": "auspicious99",
            "text": "<span class=\"comment-copy\">Can you please write more about your understanding of what a file is, and why you need a program to \"convert a file to machine code\"? Like, why couldn't a file already contain machine code? Then we can better understand where you are coming from and answer, including clearing up any misconceptions if needed.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can make a program that interprets machine code using an engine like <a href=\"http://www.capstone-engine.org\" rel=\"nofollow noreferrer\">Capstone-engine</a>, this is the easiest way to do something that gives you good results in an optimized way easily, keep in mind that this is not an easy task, it is much better to use a ready-made tool, we have many free and very good options and constantly updated like <a href=\"https://ghidra-sre.org/\" rel=\"nofollow noreferrer\">Ghidra</a>, but if you still want to write your own enjoy and also read the manual <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2a-manual.pdf\" rel=\"nofollow noreferrer\">IA-32 Intel manual</a>.</p>\n</div>",
            "votes": "1",
            "user": "Happy",
            "time": "Feb 5, 2021 at 19:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Happy",
                    "text": "<span class=\"comment-copy\">Read the Capstone-Engine documentation and its implementation in C language here: <a href=\"http://www.capstone-engine.org/lang_c.html\" rel=\"nofollow noreferrer\">capstone-engine.org/lang_c.html</a></span>",
                    "time": null
                },
                {
                    "user": "BleepLogger",
                    "text": "<span class=\"comment-copy\">Thank you so much. This cleared my doubt. I have upvoted and accepted. Thanks for sharing your knowledge.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>its very hard to understand what you want</p>\n<blockquote>\n<p>How to get machine code of a file(mainly executables) in C?</p>\n</blockquote>\n<p>so you want a C program that loads an executable file (for example dos,windows,linux exucutable) and showing you the whole or parts of the image (that normaly contains machine code and data)?</p>\n<p>so there are several documented file formats that can contain machine code</p>\n<ul>\n<li>dos exe (legacy exe format: <a href=\"https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files\" rel=\"nofollow noreferrer\">https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files</a>)</li>\n<li>windows exe (pe format: <a href=\"https://en.wikipedia.org/wiki/Portable_Executable\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Portable_Executable</a>)</li>\n<li>linux (elf\nformat: <a href=\"https://de.wikipedia.org/wiki/Executable_and_Linking_Format\" rel=\"nofollow noreferrer\">https://de.wikipedia.org/wiki/Executable_and_Linking_Format</a>),</li>\n<li>dynamic libraries</li>\n<li>object files from several compilers in\nomf, coff format</li>\n<li>pure/properitary binary files with no documented\nlayout</li>\n</ul>\n<p>for example see IDAs supported files types: <a href=\"https://www.hex-rays.com/products/ida/file_formats/\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/file_formats/</a></p>\n<blockquote>\n<p>I have written a C program to convert machine code to assembly.</p>\n</blockquote>\n<p>so you've already got some sort of disassembler?</p>\n<blockquote>\n<p>But how to get machine code of a file?</p>\n</blockquote>\n<p>read the spec of your operating system file format and write a small loader/parser, there are serveral C,C++,go,python ... example on github/google...</p>\n<blockquote>\n<p>How would I go about programming a c program to convert a file to machine code?</p>\n</blockquote>\n<p>and now you revert you question completely - before - you ask how to load a file with machine-code and now you ask how to convert \"a file\" to machine-code</p>\n<p>what format is \"a file\" in your example - some sort of source-code or object file format?</p>\n<p>Normaly this is the way: C/C++/Assembler/whatever-Source --&gt; Compiler --&gt; Objectfiles --&gt; OS-related-Executable-Format[Machine-Code+Data]</p>\n<p>try to ask more precise - its easy to help you when its clear what your exact target is</p>\n</div>",
            "votes": "1",
            "user": "llm",
            "time": "Feb 7, 2021 at 12:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>from binascii import *\nfrom pefile import *\nfrom capstone import *\n\nif(sys.argv[1]):\n    pe      = PE(sys.argv[1])\n    entry   = pe.OPTIONAL_HEADER.AddressOfEntryPoint\n    base    = pe.OPTIONAL_HEADER.ImageBase\n    OEP = base+entry\n    bytes   = pe.get_data(entry,17)\n    print(hexlify(bytes))\n    for i in (Cs(CS_ARCH_X86,CS_MODE_64).disasm(bytes,OEP)):\n        print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n    \n</code></pre>\n<p>result and confirmation</p>\n<pre><code>:\\&gt;python getbytatent.py c:\\Windows\\System32\\calc.exe\nb'e84bfdffff6a5868e82e0101e8eb99ffff'\n0x1012d6c:      call    0x1012abc\n0x1012d71:      push    0x58\n0x1012d73:      push    0x1012ee8\n0x1012d78:      call    0x100c768\n\n:\\&gt;cdb -c \"u @$exentry l4;q\" c:\\Windows\\System32\\calc.exe | awk \"/Reading/,/quit/\"\n0:000&gt; cdb: Reading initial command 'u @$exentry l4;q'\ncalc!WinMainCRTStartup:\n00a92d6c e84bfdffff      call    calc!__security_init_cookie (00a92abc)\n00a92d71 6a58            push    58h\n00a92d73 68e82ea900      push    offset calc!_CT??_R0?AV_com_error+0xdc (00a92ee8)\n00a92d78 e8eb99ffff      call    calc!_SEH_prolog4 (00a8c768)\nquit:\n</code></pre>\n<p>i hate putting this here after that comment BY OP<br/>\nit takes less than a minute to convert that into winapi<br/>\n(i should state that winapi is not c )<br/>\nand a pure c does not have the PE format structures defined<br/>\none can obviously do fopen(),fseek(),fread() but well that is beyond compare exercise in futility</p>\n<pre><code>:\\&gt;type mcc.cpp\n#include &lt;windows.h&gt;\n#include &lt;dbghelp.h&gt;\n#include &lt;stdio.h&gt;\nint main (int argc ,char * argv[]) {\n    if(argc == 2) {\n        HMODULE hMod = LoadLibraryA(argv[1]);\n        if(hMod){\n            DWORD AEP = ((PIMAGE_NT_HEADERS32)ImageNtHeader(hMod))-&gt;OptionalHeader.AddressOfEntryPoint;\n            DWORD OEP = (DWORD)hMod + AEP;\n            for (int i =0; i&lt; 17 ; i++) {\n                printf(\"%02x \",*(BYTE *)(OEP+i));\n            }\n        }\n    }\n}\n:\\&gt;cl /Zi /W4 /analyze /Od mcc.cpp /nologo /link /release dbghelp.lib\nmcc.cpp\n\n\n:\\&gt;mcc.exe c:\\Windows\\System32\\calc.exe\ne8 4b fd ff ff 6a 58 68 e8 2e 82 00 e8 eb 99 ff ff\n:\\&gt;\n</code></pre>\n<p>and just to complete the circle a fragile non productive c hack<br/>\nfor a specific application<br/>\nin a specific os<br/>\nwith specific dos, nt headers,<br/>\naep in .code section starting at 0x400<br/>\nfile alignment of 0x200 and page alignment of 0x1000</p>\n<pre><code>:\\&gt;type futilemcc.cpp\n//assume = ass u and me a beyond compare exercise in futility\n#include &lt;stdio.h&gt;\nint main (int argc ,char *argv[] ){\n    if(argc ==2){\n        FILE *fp = NULL;\n        unsigned long nth = NULL;\n        unsigned char mcc[17] ={0};\n        errno_t err= fopen_s(&amp;fp,argv[1],\"rb\");\n        if(err == 0 &amp;&amp; fp != NULL) {\n            if ( fseek(fp,0x3c,SEEK_SET) == 0) {\n                fread_s(&amp;nth,sizeof(unsigned long),sizeof(unsigned long),1,fp);\n                if ( fseek(fp,nth+0x28,SEEK_SET) == 0) {\n                    fread_s(&amp;nth,sizeof(unsigned long),sizeof(unsigned long),1,fp);\n                    if ( fseek(fp,nth-(0x1000-0x400),SEEK_SET) == 0) {\n                        fread_s(&amp;mcc,sizeof(mcc),sizeof(unsigned char),sizeof(mcc),fp);\n                        for(int i =0;i&lt;17;i++){\n                            printf(\"%02x \",mcc[i]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n:\\&gt;complink.bat futilemcc\n\n:\\&gt;cl /Zi /W4 /analyze /nologo /Od /EHsc futilemcc.cpp /link /release\nfutilemcc.cpp\n\n:\\&gt;futilemcc.exe c:\\Windows\\System32\\calc.exe\ne8 4b fd ff ff 6a 58 68 e8 2e 01 01 e8 eb 99 ff ff\n:\\&gt;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Feb 9, 2021 at 19:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "BleepLogger",
                    "text": "<span class=\"comment-copy\">I had specifically mentioned \"C\" in the title! I also tagged this question as \"C\"! Why did you paste python code here?</span>",
                    "time": null
                },
                {
                    "user": "llm",
                    "text": "<span class=\"comment-copy\">its just an python exampel for windows exe (PE) loading - here is the wine-pe loader in your prefered language, Sir! : <a href=\"https://github.com/wine-mirror/wine/blob/master/libs/wine/loader.c\" rel=\"nofollow noreferrer\">github.com/wine-mirror/wine/blob/master/libs/wine/loader.c</a></span>",
                    "time": null
                }
            ]
        }
    ]
}