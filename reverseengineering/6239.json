{
    "title": "What is the difference between F9 and Ctrl-F9 in OllyDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/6239/what-is-the-difference-between-f9-and-ctrl-f9-in-ollydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the difference between <kbd>Ctrl</kbd>-<kbd>F9</kbd> and <kbd>F9</kbd> in OllyDbg except the fact that the first command will stop the program execution on the next <code>RET</code> instruction while the second command will stop the program execution on the next breakpoint/program termination ?</p>\n<p>I just noticed that the debugging application give the different results in these cases (different register values after function call, etc) while executing the following code:</p>\n<pre><code>; ...\nCALL module_name.some_address\nTEST EAX, EAX\n; ...\n</code></pre>\n<p>I've set breakpoints on each of these instructions and noticed that the behavior is different when I just press <kbd>F9</kbd> after first breakpoint or press <kbd>F7</kbd> and <kbd>Ctrl</kbd>-<kbd>F9</kbd>.</p>\n<p>Why ?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "FrozenHeart",
    "time": "Sep 15, 2014 at 20:04",
    "comments": [
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">f9 executes the program ctrl+f9 traces (recursively steps over ) through the program if your binary has some antidebugging measures tracing can trigger them there isnt enough information to provide an answer apart from quoting ollydbg.hlp about these Global Shortcut Behaviours</span>",
            "time": null
        },
        {
            "user": "FrozenHeart",
            "text": "<span class=\"comment-copy\">@blabb Ok, even if this function have some debugger detection why did it work in Ctrl-F9 and didn't work in case of F9? Both of them are handled from the debugger. What is the difference?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know exactly how this feature is implemented in Ollydbg, but we can have a look at how it is implemented in x64_dbg as it is open-source.</p>\n<p>The <kbd>Ctrl</kbd>-<kbd>F9</kbd> (execute till return) functionality is implemented by <code>cbDebugRtr</code> in <code>x64_dbg_dbg/debugger_commands.cpp</code>. We can see that it calls <code>StepOver</code> which is a method provided by TitanEngine.</p>\n<pre><code>CMDRESULT cbDebugRtr(int argc, char* argv[])\n{\n    StepOver((void*)cbRtrStep);\n    cbDebugRun(argc, argv);\n    return STATUS_CONTINUE;\n}\n</code></pre>\n<p>In the TitanEngine document the description of StepOver is described as follows :</p>\n<blockquote>\n<p>StepOver function</p>\n<p>The StepOver traces code by single-stepping over calls. This tracing\n  function sets an INT3 breakpoint after the call, which is used to call\n  your callback. There is no guarantee that code execution will return\n  from that call, and thus no guarantee that your callback will ever be\n  called. The breakpoint is run only once, and is removed once your\n  callback has finished.</p>\n</blockquote>\n<p>TitanEngine is also open-source, here is the implementation of <code>StepOver</code> in <code>TitanEngine / TitanEngine.Debugger.Control.cpp</code></p>\n<pre><code>__declspec(dllexport) void TITCALL StepOver(LPVOID StepCallBack)\n{\n    ULONG_PTR ueCurrentPosition = GetContextData(UE_CIP);\n    unsigned char instr[16];\n    MemoryReadSafe(dbgProcessInformation.hProcess, (void*)ueCurrentPosition, instr, sizeof(instr), 0);\n    char* DisassembledString = (char*)StaticDisassembleEx(ueCurrentPosition, (LPVOID)instr);\n    if(strstr(DisassembledString, \"CALL\") || strstr(DisassembledString, \"REP\") || strstr(DisassembledString, \"PUSHF\"))\n    {\n        ueCurrentPosition += StaticLengthDisassemble((void*)instr);\n        SetBPX(ueCurrentPosition, UE_BREAKPOINT_TYPE_INT3 + UE_SINGLESHOOT, StepCallBack);\n    }\n    else\n        StepInto(StepCallBack);\n}\n</code></pre>\n<p>After each step the callback function <code>cbRtrStep</code> is called which checks if the current instruction is a <code>RET</code> and if so the debugger is stopped. (<code>x64_dbg_dbg/debugger.cpp</code>)</p>\n<pre><code>void cbRtrStep()\n{\n    unsigned int cipch = getCIPch();\n    if(cipch == 0xC3 or cipch == 0xC2)\n        cbRtrFinalStep();\n    else\n        StepOver((void*)cbRtrStep);\n}\n</code></pre>\n<p>So, to sum up, <kbd>Ctrl</kbd>-<kbd>F9</kbd> is doing step-over until it encounters a <code>RET</code> instruction. If you press <kbd>F7</kbd> and <kbd>Ctrl</kbd>-<kbd>F9</kbd> the debugger will single-step the instructions of the function; the function you are calling might be doing debugger detection that is not triggered when setting a breakpoint after this function. </p>\n</div>",
            "votes": "4",
            "user": "ekse",
            "time": "Sep 17, 2014 at 1:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "FrozenHeart",
                    "text": "<span class=\"comment-copy\">Ok, even if this function have some debugger detection why did it work in Ctrl-F9 and didn't work in case of F9? Both of them are handled from the debugger. What is the difference?</span>",
                    "time": null
                },
                {
                    "user": "ekse",
                    "text": "<span class=\"comment-copy\">I can't tell without seeing the code. The debugger detection method could for example by looking for INT3 opcodes in the function code.</span>",
                    "time": null
                }
            ]
        }
    ]
}