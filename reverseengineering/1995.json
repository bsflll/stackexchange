{
    "title": "Better explanation of different x86 CALL variations",
    "link": "https://reverseengineering.stackexchange.com/questions/1995/better-explanation-of-different-x86-call-variations",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Hoping to get a better explanation of x86 <code>call</code> instruction. I sort of understand the call near and call far. But I don't fully understand the segment part. A little insight into my main problem,  I am looking at a binary in IDA and its start code is:</p>\n<pre><code>push 0xdeadbeef\ncall near 0xdeadbeef\n</code></pre>\n</div>",
    "votes": "13",
    "answers": 2,
    "views": "14k",
    "tags": [
        "x86",
        "assembly"
    ],
    "user": "k0ng0",
    "time": "May 3, 2013 at 20:20",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">This is very <code>1337</code> code, if it has <code>deadbeef</code> in it ;)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>99% of the calls you'll encounter in modern binaries are <code>near</code>.</p>\n<ul>\n<li>call <code>near</code> (with opcode <code>E8</code>) is a call relative to the current address, and only affects <code>?IP</code>. Thus it will add the operand (word or double word) to the next instruction pointer. it's <em>adding</em> the operand to <code>?IP</code></li>\n<li>call <code>far</code> (with opcode <code>9A</code>) jumps to an <a href=\"http://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm#1792\">absolute segment and offset</a>. ie, it's like <em>setting</em> <code>CS</code> and <code>?IP</code> at once.</li>\n</ul>\n<p>The memory is actually organized in segments. In modern OSes, you usually don't mess with segments (<code>CS</code> has a fixed value in User mode and Kernel mode), so you don't change them for any reason.</p>\n<p>The rare cases of actual segment changes are as <a href=\"http://code.google.com/p/corkami/source/browse/trunk/wip/MakePE/examples/asm/jumps.asm#173\">anti-debugs</a> or <a href=\"http://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm#2242\">messing</a> <a href=\"http://blog.rewolf.pl/blog/?p=443\">with</a> 32/64b modes </p>\n</div>",
            "votes": "13",
            "user": "Ange",
            "time": "May 3, 2013 at 16:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Isn't it related with the <a href=\"http://en.wikipedia.org/wiki/Setjmp.h\" rel=\"nofollow noreferrer\">setjmp/lngjmp</a> C functions (see this <a href=\"http://web.eecs.utk.edu/~huangj/cs360/360/notes/Setjmp/lecture.html\" rel=\"nofollow noreferrer\">tutorial</a>) ?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@perror: AFAIK not directly.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, \"long\" in the sense of \"longjmp\" has nothing to do with far jump.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A segment is a \"window\" into a section of memory. You can map all or part of memory into a single segment, and multiple segments can have overlapping views of the same memory.  A far call or jump allows you to move between or within those windows.  A near call or jump allows you to move only within the current window.</p>\n<p>The only difference between the call and the jump is that the call saves the return address on the stack.  For a far call, the return selector is saved on the stack, too.</p>\n<p>However, your question lacks sufficient detail of what exactly you want to know.</p>\n</div>",
            "votes": "7",
            "user": "peter ferrie",
            "time": "May 5, 2013 at 3:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">how does the call memory segment specified in the opcode e.g. <code>E8 D2 12 00 00    call    sub_402390</code> how does 000012D2 relate to 402390? That's where I'm lost.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the 12D2 is added to the memory address immediately after the end of the instruction, so the call instruction ends at 4010BE + 12D2 = 402390.</span>",
                    "time": null
                }
            ]
        }
    ]
}