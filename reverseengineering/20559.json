{
    "title": "What is this assembly code, fld qword ptr code here doing? Also, how do I store my own value?",
    "link": "https://reverseengineering.stackexchange.com/questions/20559/what-is-this-assembly-code-fld-qword-ptr-code-here-doing-also-how-do-i-store",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reverse engineering a game using cheat engine and trying to trace where my health gets reduced.</p>\n<p>Basically the health gets stored in the stack and then pops out for displaying on the screen. After it pops out I tried to modify the memory address but that didn't work. Which means we need to modify it before it gets placed into the stack. After lots of diligent scrolling back, I came across the following code.</p>\n<pre><code>fld qword ptr[ebp-38]\n</code></pre>\n<p>This code basically pushes my health onto the stack. However, there are a whole bunch of really odd things in this code:</p>\n<ol>\n<li>This code pushes a value into the float register. It pushes my health float value (71.70) <strong>onto the Float registers</strong>. However, it is not clear from where its getting this value from. From [EBP-38]? It can't be that because that stores the value \"-2.0\".</li>\n<li>Once the value is pushed onto the Float registers, I notice that a value has been <strong>pushed onto the first register</strong> and all other values <strong>seem to be shifted.</strong> Both of these changes happen from just 1 instruction. Please take a look at the screenshot to see what I'm talking about.</li>\n</ol>\n<p>(If screenshot doesn't show big then right-click and \"open in new tab\" for a bigger size).\n<a href=\"https://i.sstatic.net/PcV4I.png\" rel=\"nofollow noreferrer\"><img alt=\"cheat engine showing the line that adds our data\" src=\"https://i.sstatic.net/PcV4I.png\"/></a></p>\n<ol start=\"3\">\n<li>Here's the really odd part. If I select this code in cheat engine then it shows the details of the operation on the right pane. There it shows that the value being moved is \"double\". However, this is supposed to be a floating point instruction. So shouldn't a float value get moved?</li>\n<li>Another odd thing is that after the value is moved, the float register shows that all 0s have been moved. The existing value is shifted down.</li>\n</ol>\n<p><a href=\"https://i.sstatic.net/Cb4Hy.png\" rel=\"nofollow noreferrer\"><img alt=\"after the fld instruction has executed the float registers have changed\" src=\"https://i.sstatic.net/Cb4Hy.png\"/></a></p>\n<p>So my question is:</p>\n<p>1) What does this instruction do exactly?</p>\n<p>2) To change this value to a custom value, can I change the source address? (wherever that is?). Assuming that that is [EBP-38] If yes, then can I use a simple move instruction for this?</p>\n<p>Something like mov [ebp-38], (hex value for 99 float)?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "assembly",
        "cheat-engine"
    ],
    "user": "Mugen",
    "time": "Feb 5, 2019 at 12:14",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Qword is 8 bytes not 4 bytes so what you show in your first screen shot as 32 bit value is not correct representation</p>\n<p>ebp-38 is an address \nit can point to x y z where x,y,z can be char , int , float  , double , \"your fancy new secret type\"</p>\n<p>Qword qualifies the address with the type here it says it is a 64 bit numeric </p>\n<p>float operations opearate on float (32) / double (64) / and ? long double ?? 80 </p>\n<pre><code>cdb -c \".formats 4051eccc`c0000000;q\" cdb | grep -iE \"Double|Float\"\n  Float:   low -2 high 3.28008\n  Double:  71.7\n</code></pre>\n<p>you can see how float operations work on botb 32 bit as well as 64 bit based on bit size type qualifiers assembling some instructions in-place </p>\n<pre><code>0:000&gt; a .\n771f05a6 push 4051eccc\n771f05ab push 0xc0000000\n771f05b0 fld qword ptr [esp]\n771f05b3 fld dword ptr [esp]\n</code></pre>\n<p>disassembling to confirm </p>\n<pre><code>771f05b6\n0:000&gt; u . l4\nntdll!LdrpDoDebuggerBreak+0x2c:\n771f05a6 68ccec5140      push    4051ECCCh\n771f05ab 68000000c0      push    0C0000000h\n771f05b0 dd0424          fld     qword ptr [esp]\n771f05b3 d90424          fld     dword ptr [esp]\n</code></pre>\n<p>stepping through to see the results</p>\n<pre><code>0:000&gt; \n771f05a6 68ccec5140      push    4051ECCCh\n0:000&gt; t\n771f05ab 68000000c0      push    0C0000000h\n0:000&gt; t\n771f05b0 dd0424          fld     qword ptr [esp] ss:0023:000af874=4051ecccc0000000\n0:000&gt; t\n771f05b3 d90424          fld     dword ptr [esp]      ss:0023:000af874=c0000000\n</code></pre>\n<p>querying registers</p>\n<pre><code>0:000&gt; r st0\nst0=-2.0000000000000e+0000 (1:4000:8000000000000000)\n0:000&gt; r st1\nst1= 7.16999969482421875000000000000e+0001 (0:4005:8f66660000000000)\n0:000&gt; dd esp l2\n000af874  c0000000 4051eccc\n\n0:000&gt; ?? *(float *) @@masm(@esp)\nfloat -2\n\n0:000&gt; ?? *(double *) @@masm(@esp)\ndouble 71.6999969482421875\n</code></pre>\n<p>you should better read this to learn how fpu works why the top slot is copied etc At <a href=\"http://www.ray.masmcode.com/tutorial/index.html\" rel=\"nofollow noreferrer\">Simply FPU by Raymond Filiatreault</a>  read chapter 1 internals where he explains how st registers are loaded and copied and trashed an unloaded</p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Feb 5, 2019 at 13:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mugen",
                    "text": "<span class=\"comment-copy\">I've tried to read this answer multiple times but it goes over my head. Each time I quit somewhere in the middle. I guess I'll have to catch someone to put this in simple words. Thanks for replying.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">it is simple qword (quad word) is 64bit number   fld uses Qword in that instruction you posted so it means it is operating on DOUBLE  (8 bytes ) not  32 Bit Float (4 bytes)</span>",
                    "time": null
                },
                {
                    "user": "Mugen",
                    "text": "<span class=\"comment-copy\">Could you please explain what is \"0:000&gt; a .\" just before the code? I don't think I've seen that anywhere.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">open windbg and try that  . is alias for current instruction pointer (eip / rip) a is assemble command  it assembles in place  a . is assemble at eip  u . is disassemble at eip</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think <code>fld</code> instruction is something like you load floating value into FPU registers. Example <code>st0</code> to <code>st7</code></p>\n<p>Note: <code>f</code> means <code>floating</code></p>\n<p><strong>How do I store my own value?</strong></p>\n<p>If you interested, this is just example to load your own value :</p>\n<pre><code>global _start\n\nsection .data\nvalue: dq 3.0\n\nsection .text\n\n_start:\n\nfld qword [value] ; store 3 into st0 \n</code></pre>\n</div>",
            "votes": "0",
            "user": "Febriyanto Nugroho",
            "time": "Dec 16, 2019 at 11:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}