{
    "title": "Does anyone recognize this keyboard encoding scheme?",
    "link": "https://reverseengineering.stackexchange.com/questions/8293/does-anyone-recognize-this-keyboard-encoding-scheme",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am finalizing the reverse-engineering of a linux driver for the <a href=\"https://rads.stackoverflow.com/amzn/click/com/B0083H4NG4\" rel=\"nofollow noreferrer\">Perixx MX-2000 IIB</a> mouse. One of the features the mouse has is arbitrary button mapping. I can assign a button to produce various keys or mouse buttons. I have recorded a few button assignments available in the Windows driver, and figured out a few myself, but there doesn't seem to be a discernible (to me) pattern to map the whole address space.</p>\n<p>The keys behave like this: Two bytes control a particular mouse button. I have learned a few keys and modifiers, and will post below. Setting the mouse button to the <em>hex value</em> gives me <em>keyboard output</em> when clicked. </p>\n<p><strong>keyboard output</strong> | <strong>hex value</strong><br/>\n<kbd>a</kbd> | <code>0x0400</code><br/>\n<kbd>b</kbd> | <code>0x0500</code><br/>\n<kbd>c</kbd> | <code>0x0600</code><br/>\n...<br/>\n<kbd>z</kbd> | <code>0x1D00</code><br/>\n<kbd>1</kbd> | <code>0x1E00</code><br/>\n<kbd>2</kbd> | <code>0x1F00</code><br/>\n...<br/>\n<kbd>9</kbd> | <code>0x2600</code><br/>\n<kbd>0</kbd> | <code>0x2700</code><br/>\n<kbd>return</kbd> | <code>0x2800</code><br/>\n<kbd>esc</kbd> | <code>0x2900</code><br/>\n<kbd>backspace</kbd> | <code>0x2A00</code><br/>\n<kbd>tab</kbd> | <code>0x2B00</code><br/>\n<kbd>space</kbd> | <code>0x2C00</code><br/>\n...<br/>\n<kbd>Volume Up</kbd> | <code>0x8000</code> (XF86AudioRaiseVolume)<br/>\n<kbd>Volume Down</kbd> | <code>0x8100</code> (XF86AudioLowerVolume)<br/>\n...  </p>\n<p>I've mapped through <code>0x8A00</code> but will spare you the whole table. The interesting things are that thing like XF86 commands appear pretty early, like in <code>0x6F00</code> is XF86AudioMicMute, or <code>0x6600</code> is the power off key.</p>\n<p>As for the least significant byte, part of that is modifiers, applied as a mask. <kbd>Ctl</kbd> is <code>(1 &lt;&lt; 0)</code>, <kbd>shift</kbd> is <code>(1 &lt;&lt; 1)</code>, <kbd>alt</kbd> is <code>(1 &lt;&lt; 2)</code> and <kbd>super/meta/windows</kbd> is <code>(1&lt;&lt;3)</code>. So this way, <kbd>shift</kbd>+<kbd>a</kbd> (capital A) is <code>0x0402</code>. <kbd>Ctl</kbd>+<kbd>Alt</kbd>+<kbd>a</kbd> would be <code>0x0405</code>. All four modifiers give you <code>0x0F</code> for the least sig. byte. Playing around with the high nybble of the LSB, say with values like <code>0x0440</code> gives me more keys, like XF86Mute. So it seems the address space is massive.</p>\n<p>On top of this, there are some keys from the windows driver that presented as an entirely different scheme.</p>\n<p><strong>Output</strong> | <strong>hex value</strong><br/>\n<kbd>aMouse Scroll up</kbd> | <code>0x0143</code><br/>\n<kbd>Mouse Scroll down</kbd> | <code>0xFF43</code><br/>\n<kbd>WWW Search</kbd> | <code>0x2122</code><br/>\n<kbd>WWW Back</kbd> | <code>0x2422</code><br/>\n<kbd>WWW Forward</kbd> | <code>0x2522</code><br/>\n<kbd>Email</kbd> | <code>0x8A21</code><br/>\n<kbd>Internet Expl Back</kbd> | <code>0x8842</code> (presents as mouse button 8 in X11)<br/>\n<kbd>IE Forward</kbd> | <code>0x9042</code> (mouse button 9)<br/>\n<kbd>Calculator</kbd> | <code>0x9221</code><br/>\n<kbd>My Computer</kbd> | <code>0x9421</code><br/>\n<kbd>Mute</kbd> | <code>0xE220</code><br/>\n<kbd>Volume Up</kbd> | <code>0xE920</code><br/>\n<kbd>Volume Down</kbd> | <code>0xEA20</code> </p>\n<p>And a few mouse buttons:</p>\n<p><strong>output</strong> | <strong>hex</strong><br/>\n<kbd>Left Click</kbd> | <code>0x8142</code><br/>\n<kbd>Right Click</kbd> | <code>0x8242</code><br/>\n<kbd>Wheel Click</kbd> | <code>0x8442</code> </p>\n<p>and finally, these are internal mouse commands. They don't register any events on my linux machine, but do change things in the mouse's internal settings</p>\n<p><strong>action</strong> | <strong>hex</strong></p>\n<p><kbd>Cycle DPI setting</kbd> | <code>0x034A</code><br/>\n<kbd>DPI increase</kbd> | <code>0x014A</code><br/>\n<kbd>DPI decrease</kbd> | <code>0x004A</code><br/>\n<kbd>Cycle mouse profile</kbd> | <code>0x074A</code><br/>\n<kbd>Profile Up</kbd> | <code>0x054A</code><br/>\n<kbd>Profile Down</kbd> | <code>0x044A</code> </p>\n<p>And finally there is a special set that looks like <code>0x0a88</code> that point internally to macro memory.</p>\n<p>I can't find any encoding schemes or keyboard mappings that might match this. Alphabetical keys? And If you notice, <kbd>volume up</kbd> is both <code>0x8000</code> and <code>0xE920</code> while <kbd>vol down</kbd> is both <code>0x8100</code> and <code>0xEA20</code>. So somewhat of a light at the end of the tunnel that there is a consistent distance between those. </p>\n<p>But really, I can't figure out a standard mapping this matches. Or any way to figure out all the keys without manually fiddling with the memory and looping through <code>0x0000</code> to <code>0xFFFF</code> and clicking with <code>xev</code> each time.</p>\n<p>Thoughts? is any of this familiar? or other patterns spotted?</p>\n<p><strong>edit</strong>: All key information I've mapped so far is <a href=\"https://gist.github.com/pzl/94438a72f578b478a610\" rel=\"nofollow noreferrer\">in this gist</a> including <code>0x0000</code> through <code>0xFF00</code> (leaving LSByte <code>0x00</code>). So there is still a massive address space left. And it still makes no sense to me with the extra keys from the windows driver like <code>0x9421</code> = XF86Explorer</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "334",
    "tags": [
        "encodings",
        "driver"
    ],
    "user": "Dan P",
    "time": "Feb 5, 2019 at 9:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Those are 16-bit USB keyboard/Keypad scan codes. Please see <a href=\"http://download.microsoft.com/download/1/6/1/161ba512-40e2-4cc9-843a-923143f3456c/scancode.doc\" rel=\"nofollow\">Keyboard Scan Code Specification</a> for details. Appendix C contains the complete mapping </p>\n</div>",
            "votes": "3",
            "user": "Lorem Ipsum",
            "time": "Feb 22, 2015 at 21:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}