{
    "title": "Using angr/radare2 to estimate values given chunks of assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/25745/using-angr-radare2-to-estimate-values-given-chunks-of-assembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently using radare2 in order to construct a simple CFG, each block/node in that graph is composed of one or more assembly instructions, I wish to estimate the value of specific register or stack position as best as I can.</p>\n<p>Few examples:</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>xor rax, rax\ninc rax\n; Given these instructions, solve(rax) =&gt; 1\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>mov rcx, 3\nmov rbx, rcx\nmov rax, rbx\n; Given the instructions above, solve(rax) =&gt; 3\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>mov rbx, rcx\nmov rax, rbx\n; Given the instructions above, solve(rax) =&gt; Unknown\n</code></pre>\n<p><strong>Example 4:</strong></p>\n<pre><code>mov rdx, 1\nshl rdx, 2\nadd rdx, 3\nmov [rsp], rdx\n; Given the instructions above, solve([rsp]) =&gt; 7\n</code></pre>\n<p>I'm looking for a simple Python example to start with, which either takes opcodes directly or and address and evaluates/solve for specific register/stack position.</p>\n<p>I've already looked into some symbolic execution examples, which looks like what I need, but I'm pretty new to this so a simple working example would really help.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "231",
    "tags": [
        "radare2",
        "python",
        "angr"
    ],
    "user": "Aviel Fedida",
    "time": "Aug 25, 2020 at 19:23",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a small angr script that can do so:</p>\n<pre><code>proj = angr.Project('...path...')\nstate = proj.factory.blank_state(addr=0x0804EA9E)\nsimulation = proj.factory.simgr(state)\nret = simulation.explore(find=0x0804EAA3)\nprint(ret.found[0].regs.ecx)\n</code></pre>\n<p>Between the addresses <code>0x0804EA9E</code> to <code>0x0804EAA3</code> I've got <code>mov ecx, 0Ah</code> so I get: <code>&lt;BV32 0xa&gt;</code> from the print.</p>\n<p>I know its not much, but as I've said, I'm new. And hopefully this simple script will help others.</p>\n<p>Really good resources to start with:</p>\n<ul>\n<li><a href=\"https://docs.angr.io/core-concepts/states#state-presets\" rel=\"nofollow noreferrer\">https://docs.angr.io/core-concepts/states#state-presets</a></li>\n<li><a href=\"https://blog.notso.pro/2019-03-20-angr-introduction-part0/\" rel=\"nofollow noreferrer\">https://blog.notso.pro/2019-03-20-angr-introduction-part0/</a></li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Aviel Fedida",
            "time": "Aug 26, 2020 at 6:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}