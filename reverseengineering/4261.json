{
    "title": "Difference between 'add' and 'adds' in ARM assembler?",
    "link": "https://reverseengineering.stackexchange.com/questions/4261/difference-between-add-and-adds-in-arm-assembler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am starting to look a bit more precisely at ARM assembler and I looked up some dumps from <code>objdump</code>. I saw a lot of instruction (<code>add</code> is not the only one) with an extra <code>s</code> at the end (<code>adds</code>, <code>subs</code>, ...).</p>\n<p>I looked a bit to the ARM documentation and it seems to mean something significant, but I can't figure out exactly what (the documentation I found about it seemed extremely obscure to me).</p>\n<p>Has somebody some insight on what is the meaning of this extra <code>s</code> added at the end of some ARM instructions ?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "60k",
    "tags": [
        "arm",
        "gas"
    ],
    "user": "perror",
    "time": "May 4, 2014 at 18:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Usual <code>ADD</code> doesn't update flags.\n<code>ADDS</code> does.\nSee better documentation at <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/Cihcjfjg.html\" rel=\"noreferrer\">arm infocenter</a>.\nAs it wrote there:</p>\n<blockquote>\n<p>If S is specified, these instructions update the N, Z, C and V flags according to the result.</p>\n</blockquote>\n</div>",
            "votes": "11",
            "user": "perror",
            "time": "May 5, 2014 at 22:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Iwillnotexist Idonotexist",
                    "text": "<span class=\"comment-copy\">@perror If you want another concrete example, consider a loop <code>while(--i){...}</code>. One way to implement it is to have <code>sub reg, #1</code> followed by an explicit compare to zero (which will set the <code>Z</code> zero flag when reg becomes 0), then a predicated branch. With <code>subs reg, #1</code> the <code>Z</code> flag is implicitly updated, therefore no explicit comparison is required.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The extra <code>s</code> character added to the ARM instruction mean that the <strong>APSR</strong> (Application Processor Status Register) will be updated depending on the outcome of the instruction.</p>\n<p>The status register (APSR) contain four flags <code>N</code>, <code>Z</code>, <code>C</code> and <code>V</code> which means the following:</p>\n<ul>\n<li><code>N == 0</code>: The result is greater or equal to 0, which is considered positive, and so the <code>N</code> (negative) bit is set to 0.</li>\n<li><code>Z == 1</code>: The result is 0, so the <code>Z</code> (zero) bit is set to 1.</li>\n<li><code>C == 1</code>: We lost some data because the result did not fit into 32 bits, so the processor indicates this by setting <code>C</code> (carry) to 1.</li>\n<li><code>V = 0</code>: From a two's complement signed-arithmetic viewpoint, 0xffffffff really means -1, so the operation we did was really (-1) + 1 = 0. That operation clearly does not overflow, so <code>V</code> (overflow) is set to 0.</li>\n</ul>\n<p>More information about the <em>condition flags</em> in the ARM architecture can be found <a href=\"http://community.arm.com/groups/processors/blog/2010/07/16/condition-codes-1-condition-flags-and-codes\">here</a>.</p>\n</div>",
            "votes": "13",
            "user": "perror",
            "time": "May 4, 2014 at 22:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">One additional point: depending on the disassembler/settings, the Thumb-1 instructions (short, 16-bit encodings for a subset of instructions) may be displayed without the S suffix, even though they, in fact, do update flags. See Table 4-9 <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dui0473j/dom1359731157381.html\" rel=\"nofollow noreferrer\">here</a>.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Is it because it is the default behavior of the instruction in thumb mode, or the opcodes are really different but the mnemonic does not show up the difference ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">The former. In Thumb-1, all ALU instructions set the flags and so I guess the creators dropped the suffix as \"unnecessary\". With Thumb-2, full equivalence with the ARM set was achieved and you can choose if you want to set flags or not. Thus the move to UAL and explicit S suffix.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Shouldn't the explanation to <code>N == 0</code> be <code>The result is greater than or equal to 0 ...</code> ?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">@perror There is another tricky thing about flags which is called flexible second operand: C flag can be updated in some cases even if S suffix does not exist in the command, see <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/CIHDDCIF.html\" rel=\"nofollow noreferrer\">infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/â€¦</a> for more details</span>",
                    "time": null
                }
            ]
        }
    ]
}