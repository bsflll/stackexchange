{
    "title": "How to verify if Firefox is actually sending zlib data over SPDY?",
    "link": "https://reverseengineering.stackexchange.com/questions/8616/how-to-verify-if-firefox-is-actually-sending-zlib-data-over-spdy",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I recently posted a <a href=\"https://stackoverflow.com/q/27454189/1091116\">StackOverflow bounty</a> related to figuring out whether it is Wireshark, Firefox or just the data sample that is wrong, judging by the fact that latest Wireshark cannot dissect it. This is a continuation of the question.</p>\n<p>Assuming that the bounty linked above is correct, here is the full SYN_STREAM SPDY packet that Wireshark cannot dissect:</p>\n<blockquote>\n<p>800300010100015500000001000000004000783fe3c6a7c2003b01c4fe00000009000000073a6d6574686f6400000003474554000000053a70617468000000012f000000083a76657273696f6e00000008485454502f312e31000000053a686f73740000000d3139322e3136382e302e313734000000073a736368656d650000000568747470730000000a757365722d6167656e74000000414d6f7a696c6c612f352e30202857696e646f7773204e5420352e313b2072763a33302e3029204765636b6f2f32303130303130312046697265666f782f33302e30000000066163636570740000003f746578742f68746d6c2c6170706c69636174696f6e2f7868746d6c2b786d6c2c6170706c69636174696f6e2f786d6c3b713d302e392c2a2f2a3b713d302e380000000f6163636570742d6c616e67756167650000000e656e2d55532c656e3b713d302e3500000003646e740000000131000000ffff</p>\n</blockquote>\n<p>According to Wireshark, the compressed header should start at \"783f\". Unfortunately, I cannot decompress it:</p>\n<pre><code>$ python\nPython 2.7.8 (default, Nov 10 2014, 08:19:18) \n[GCC 4.9.2 20141101 (Red Hat 4.9.2-1)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import zlib\n&gt;&gt;&gt; header = \"783fe3c6a7c2003b01c4fe00000009000000073a6d6574686f6400000003474554000000053a70617468000000012f000000083a76657273696f6e00000008485454502f312e31000000053a686f73740000000d3139322e3136382e302e313734000000073a736368656d650000000568747470730000000a757365722d6167656e74000000414d6f7a696c6c612f352e30202857696e646f7773204e5420352e313b2072763a33302e3029204765636b6f2f32303130303130312046697265666f782f33302e30000000066163636570740000003f746578742f68746d6c2c6170706c69636174696f6e2f7868746d6c2b786d6c2c6170706c69636174696f6e2f786d6c3b713d302e392c2a2f2a3b713d302e380000000f6163636570742d6c616e67756167650000000e656e2d55532c656e3b713d302e3500000003646e740000000131000000ffff\".decode('hex')\n&gt;&gt;&gt; zlib.decompress(header)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nzlib.error: Error 2 while decompressing data\n</code></pre>\n<p>Is it actually zlib? How can I prove it?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "461",
    "tags": [
        "decompress",
        "https-protocol"
    ],
    "user": "d33tah",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I managed to decompress it in Python by specifying the decompression dictionary:</p>\n<pre><code>#!/usr/bin/python3\n\nimport zlib\nimport base64\n\nheader = (\"783fe3c6a7c2003b01c4fe00000009000000073a6d6574686f\"\n\"6400000003474554000000053a70617468000000012f000000083a76657273696f6e000000084\"\n\"85454502f312e31000000053a686f73740000000d3139322e3136382e302e313734000000073a\"\n\"736368656d650000000568747470730000000a757365722d6167656e74000000414d6f7a696c6\"\n\"c612f352e30202857696e646f7773204e5420352e313b2072763a33302e3029204765636b6f2f\"\n\"32303130303130312046697265666f782f33302e30000000066163636570740000003f7465787\"\n\"42f68746d6c2c6170706c69636174696f6e2f7868746d6c2b786d6c2c6170706c69636174696f\"\n\"6e2f786d6c3b713d302e392c2a2f2a3b713d302e380000000f6163636570742d6c616e6775616\"\n\"7650000000e656e2d55532c656e3b713d302e3500000003646e740000000131000000ffff\")\n\nzdict = base64.b16decode(\"000000076F7074696F6E730000000468656164000000\"\n\"04706F7374000000037075740000000664656C65746500000005747261636500000006\"\n\"6163636570740000000E6163636570742D636861727365740000000F6163636570742D\"\n\"656E636F64696E670000000F6163636570742D6C616E67756167650000000D61636365\"\n\"70742D72616E6765730000000361676500000005616C6C6F770000000D617574686F72\"\n\"697A6174696F6E0000000D63616368652D636F6E74726F6C0000000A636F6E6E656374\"\n\"696F6E0000000C636F6E74656E742D6261736500000010636F6E74656E742D656E636F\"\n\"64696E6700000010636F6E74656E742D6C616E67756167650000000E636F6E74656E74\"\n\"2D6C656E67746800000010636F6E74656E742D6C6F636174696F6E0000000B636F6E74\"\n\"656E742D6D64350000000D636F6E74656E742D72616E67650000000C636F6E74656E74\"\n\"2D74797065000000046461746500000004657461670000000665787065637400000007\"\n\"657870697265730000000466726F6D00000004686F73740000000869662D6D61746368\"\n\"0000001169662D6D6F6469666965642D73696E63650000000D69662D6E6F6E652D6D61\"\n\"7463680000000869662D72616E67650000001369662D756E6D6F6469666965642D7369\"\n\"6E63650000000D6C6173742D6D6F646966696564000000086C6F636174696F6E000000\"\n\"0C6D61782D666F72776172647300000006707261676D610000001270726F78792D6175\"\n\"7468656E7469636174650000001370726F78792D617574686F72697A6174696F6E0000\"\n\"000572616E676500000007726566657265720000000B72657472792D61667465720000\"\n\"000673657276657200000002746500000007747261696C6572000000117472616E7366\"\n\"65722D656E636F64696E6700000007757067726164650000000A757365722D6167656E\"\n\"74000000047661727900000003766961000000077761726E696E67000000107777772D\"\n\"61757468656E746963617465000000066D6574686F6400000003676574000000067374\"\n\"6174757300000006323030204F4B0000000776657273696F6E00000008485454502F31\"\n\"2E310000000375726C000000067075626C69630000000A7365742D636F6F6B69650000\"\n\"000A6B6565702D616C697665000000066F726967696E31303031303132303132303232\"\n\"3035323036333030333032333033333034333035333036333037343032343035343036\"\n\"3430373430383430393431303431313431323431333431343431353431363431373530\"\n\"32353034353035323033204E6F6E2D417574686F726974617469766520496E666F726D\"\n\"6174696F6E323034204E6F20436F6E74656E74333031204D6F766564205065726D616E\"\n\"656E746C7934303020426164205265717565737434303120556E617574686F72697A65\"\n\"6434303320466F7262696464656E343034204E6F7420466F756E6435303020496E7465\"\n\"726E616C20536572766572204572726F72353031204E6F7420496D706C656D656E7465\"\n\"64353033205365727669636520556E617661696C61626C654A616E20466562204D6172\"\n\"20417072204D6179204A756E204A756C204175672053657074204F6374204E6F762044\"\n\"65632030303A30303A3030204D6F6E2C205475652C205765642C205468752C20467269\"\n\"2C205361742C2053756E2C20474D546368756E6B65642C746578742F68746D6C2C696D\"\n\"6167652F706E672C696D6167652F6A70672C696D6167652F6769662C6170706C696361\"\n\"74696F6E2F786D6C2C6170706C69636174696F6E2F7868746D6C2B786D6C2C74657874\"\n\"2F706C61696E2C746578742F6A6176617363726970742C7075626C6963707269766174\"\n\"656D61782D6167653D677A69702C6465666C6174652C73646368636861727365743D75\"\n\"74662D38636861727365743D69736F2D383835392D312C7574662D2C2A2C656E713D30\"\n\"2E\")\n\nheader = base64.b16decode(header.upper())\n\nz = zlib.decompressobj(zdict=zdict)\nprint(z.decompress(bytearray(header)))\n</code></pre>\n</div>",
            "votes": "2",
            "user": "d33tah",
            "time": "Apr 1, 2015 at 14:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}