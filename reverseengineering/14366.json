{
    "title": "What exactly is this piece of assembly code doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/14366/what-exactly-is-this-piece-of-assembly-code-doing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This assembly is for Intel x86-64 bit, seems to be too baffling to me.</p>\n<p><a href=\"https://i.sstatic.net/CXhq3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/CXhq3.png\"/></a></p>\n<ul>\n<li>How come the <code>jz</code> instruction jump to a non-instruction (<code>0x400AC9</code>)?</li>\n<li>How come the <code>call</code> invokes a non-existing address?</li>\n</ul>\n<p>For curious ones, the binary is <a href=\"https://www.mediafire.com/?yx5pv8llsvta4i8\" rel=\"nofollow noreferrer\">here</a>.</p>\n</div>",
    "votes": "0",
    "answers": 3,
    "views": "513",
    "tags": [
        "assembly",
        "x86",
        "elf",
        "call"
    ],
    "user": "sherlock",
    "time": "Jan 11, 2017 at 16:41",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>How come the jz instruction jump to a non-instruction (0x400AC9)?</p>\n</blockquote>\n<p>It does not. There is no such thing as \"an instruction\". Jumps do not jump to <em>instructions</em>, they jump to <em>addresses</em>.</p>\n<blockquote>\n<p>How come the call invokes a non-existing address?</p>\n</blockquote>\n<p>It does not. If you check what the code actually does, you will find this call will never be executed.</p>\n<hr/>\n<p>Here is the relevant part of your code, prefixed with their original hex bytes.</p>\n<pre><code>400AC7:  66 b8 eb 05             mov    ax,0x5eb\n400ACB:  31 c0                   xor    eax,eax\n400ACD:  74 fa                   jz     0x400AC9\n400ACF:  e8 0f b6 45 b0          call   0xffffffffb045b61c\n400AD4:  3c 38                   cmp    al,0x38\n400AD6:  0f                      .byte 0xf\n400AD7:  85                      .byte 0x85\n400AD8:  bc                      .byte 0xbc\n</code></pre>\n<p>If you assume the instruction at 400AC7 executes, it loads <code>ax</code> with some value but it gets immediately discarded by the next instruction, which clears it to <code>0</code>. Because of that, the jump will <strong>always</strong> be taken!</p>\n<p>The jump goes to 400AC9, and if we disassemble starting at that, we get some other code:</p>\n<pre><code>400AC9:  eb 05                   jmp    0x400AD0\n400ACB:  31 c0                   xor    eax,eax\n400ACD:  74 fa                   je     0x0\n400ACF:  e8 0f b6 45 b0          call   0xffffffffb045b61a\n400AD4:  3c 38                   cmp    al,0x38\n400AD6:  0f                      .byte 0xf\n</code></pre>\n<p>and it looks like you did not get any further, because there are still weird calls and undefined codes. However, look at the first instruction! It jumps again into the middle of something what appears to be an instruction <em>at this point</em> – but if you start disassembling there, you will see that everything from that address on is perfectly ordinary code.*</p>\n<p><sup>* Since this is a \"crackme\" and you already failed the first of its tests, I will not spoil the rest of it.</sup></p>\n</div>",
            "votes": "4",
            "user": "Jongware",
            "time": "Jan 12, 2017 at 13:06",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA disassembled the instructions incorrectly. You need to manually change the instruction after jz to data and then change the jz destination to code. </p>\n</div>",
            "votes": "1",
            "user": "yellowbyte",
            "time": "Jan 11, 2017 at 17:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">How will <code>jz</code> come out of the loop?</span>",
                    "time": null
                },
                {
                    "user": "yellowbyte",
                    "text": "<span class=\"comment-copy\">Change the mov instruction to data and change the data at location 400AC9 to code. That will disassemble into a jump instruction that will jump out of the loop.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should patch the ptrace the program uses to check if it's being traced by a debugger and then use gdb or another debugger to see what's going on @runtime, if you insist on statically analyzing it you'll have to manually fix up the jump as yujyet said.</p>\n</div>",
            "votes": "0",
            "user": "a Nobody",
            "time": "Jan 11, 2017 at 18:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}