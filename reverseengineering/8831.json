{
    "title": "Processing a handle to a module",
    "link": "https://reverseengineering.stackexchange.com/questions/8831/processing-a-handle-to-a-module",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have found the following lines in a sample which I try to analyze. Here, are the lines:</p>\n<pre><code>   ....\n   push  afg.00401189       \"ntdll.dll\" \n   call  GetmoduleHandleW\n   neg   eax\n   sbb   eax, eax\n   neg   eax\n   RETN\n</code></pre>\n<p>So, I do not understand the lines after the call instruction. We have sbb instruction between two neg-operations, but what can be the purpose of that. Can somebody explain that ? </p>\n<p>PS: Intuitively, I would say that at the end I have the handle to ntdll.dll in EAX...but the operations between the call and retn are very strange. I am confused.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "128",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "May 6, 2015 at 22:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>neg / sbb / neg</code> code in your question is the equivalent of the following C code:</p>\n<pre><code>eax = (eax != 0)\n</code></pre>\n<p>In other words, the function returns <code>GetModuleHandleW(\"ntdll.dll\") != NULL</code>.</p>\n<p>The <code>neg / sbb / neg</code> construct is explained in detail here:</p>\n<p><a href=\"https://books.google.com/books?id=_78HnPPRU_oC&amp;pg=PT392\" rel=\"nofollow\"><em>Reversing: Secrets of Reverse Engineering</em>, section A.2.8.1. Pure Arithmetic Implementations</a></p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "May 7, 2015 at 3:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}