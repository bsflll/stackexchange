{
    "title": "Find the kernel structure that contains device name",
    "link": "https://reverseengineering.stackexchange.com/questions/3233/find-the-kernel-structure-that-contains-device-name",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using WinDbg to try enumerate drivers and their associated devices. Getting the driver name is very easy. It is found in the <a href=\"http://msdn.moonsols.com/win7rtm_x86/DRIVER_OBJECT.html\" rel=\"nofollow\">_DRIVER_OBJECT</a> structure. Unfortunately, the <a href=\"http://msdn.moonsols.com/win7rtm_x86/DEVICE_OBJECT.html\" rel=\"nofollow\">_DEVICE_OBJECT</a> does not contain the name of the device. </p>\n<p>Using the <code>!devobj</code> command I can see the name of the device, but I would like to find the table/structure that contains the name.</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "windbg",
        "kernel-mode"
    ],
    "user": "ben_re",
    "time": "Dec 20, 2013 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So assuming like you said, you have the linear address of your device object, use the windbg extension <code>!object 0xlinearaddress</code>. Based on your windows build, it will display the linear address of the object header. Which in memory exists right below the object.</p>\n<p>Use windbg to parse the <code>OBJECT_HEADER</code> structure for you. Starting with Windows 7 you are going to have a member called <code>InfoMask</code>, earlier versions have <code>NameInfoOffset</code>. </p>\n<p>If you have an earlier build, <code>NameInfoOffset</code> is subtracted from the linear base of the object header, to get you the base of an <code>OBJECT_HEADER_NAME_INFO</code> structure for that object.</p>\n<p>If you have a Windows 7 build or later, <code>InfoMask</code> is a bitmask describing other creator structures that exist before the beginning of the header. It is computed using the <code>ObInfoMaskToOffsetTable</code> which contains the offset to the <code>OBJECT_HEADER_NAME_INFO</code> structure for the object. It is always at a constant location but the <code>InfoMask</code> should be used to determine if the object is named, because not all objects are required to be named.</p>\n<p>So a quick example for you, let's say you have a device object at <code>fffffa8001234560</code>. Let's also presume you are using Windows 7 x64.</p>\n<p>Your name info would be:</p>\n<pre><code>dt nt!_object_header_name_info fffffa8001234560-0x30-0x20\n</code></pre>\n<p>-0x30 to base of header\n-0x20 because in this case <code>InfoMask</code> used in the table has an index value of 0x20.</p>\n<p>This structure contains the name <strong>relative</strong> to it's object directory. </p>\n<p>Also have a look at the exported kernel routine <code>ObQueryNameInfo</code>.</p>\n</div>",
            "votes": "8",
            "user": "everdox",
            "time": "Dec 20, 2013 at 18:34",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From what I remember, both XP and Win7 always had this format:</p>\n<p><code>object_directory_followed</code> by <code>object_header</code> whose <code>_QUAD</code> part (opaque do not use this field) points to the <code>OBJECT</code></p>\n<p>If you did <code>dt nt!_Object_header_name_info &lt;address of object&gt; - 0x28</code>:</p>\n<pre><code>kd&gt; !devobj \\Device\\Beep;dt nt!_OBJECT_HEADER_NAME_INFO 86884db8-28\nDevice object (86884db8) is for:\n Beep \\Driver\\Beep DriverObject 86e703b8\nCurrent Irp 00000000 RefCount 0 Type 00000001 Flags 00000044\nDacl e1020c34 DevExt 86884e70 DevObjExt 86884ec8 \nExtensionFlags (0000000000)  \nDevice queue is not busy.\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"Beep\"\n   +0x00c QueryReferences  : 1\nkd&gt; !devobj \\Device\\00000013\nDevice object (86fe7cd0) is for:\n 00000013 \\Driver\\PnpManager DriverObject 86fe9328\nCurrent Irp 00000000 RefCount 0 Type 00000004 Flags 00001040\nDacl e1020c34 DevExt 86fe7d88 DevObjExt 86fe7d90 DevNode 86fe7b88 \nExtensionFlags (0x00000010)  DOE_START_PENDING\nDevice queue is not busy.\nkd&gt; dt nt!_OBJECT_HEADER_NAME_INFO 86fe7cd0-28\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"00000013\"\n   +0x00c QueryReferences  : 1\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Ange",
            "time": "Dec 23, 2013 at 16:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}