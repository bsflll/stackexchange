{
    "title": "64-bit integers on 32-bit machines",
    "link": "https://reverseengineering.stackexchange.com/questions/8454/64-bit-integers-on-32-bit-machines",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's say I create a program in C like this and compile it on a regular 64-bit desktop machine:</p>\n<pre><code>#include &lt;stdint.h&gt;\n\nint main(void)\n{\n    uint64_t a = 0x12345679abcdefULL;\n    uint64_t b = 0xfdcba987654321ULL;\n    uint64_t c = a + b;\n    return 0;\n}\n</code></pre>\n<p>I just tested the code using <code>gcc -O0 -S</code>. It seems to allocate two 32-bit values on the stack and add then with <code>addl</code> and <code>adcl</code> separately. This happens for both <code>-m32</code> and <code>-m64</code> switch, even though I am on a 64-bit machine, and there indeed seem to be a dedicated instruction set for 64-bit integers, including operations such as <code>movq</code> and <code>addq</code>.</p>\n<ol>\n<li><p>Why did <code>gcc</code> produce code like for a 32-bit machine even if I told it to use 64-bit arithmetic with <code>-m64</code>?</p>\n<pre><code>&gt;uname -a\nCYGWIN_NT-6.2-WOW work 1.7.35(0.287/5/3) 2015-03-04 12:07 i686 Cygwin\n\n&gt;gcc --version\ngcc (GCC) 4.9.2\n</code></pre></li>\n</ol>\n<p>Now, let's say I'm on a 32-bit machine and I operate on 64-bit integers.</p>\n<ol start=\"2\">\n<li><p>The program allocated two 32-bit variables <strong>on the stack</strong>. Is this part of a C/C++ standard, or is allocating them on the heap to be expected with some compilers (because they try to fit a 64-bit integer into a 32-bit stack in a different way)?</p></li>\n<li><p>If I put <code>movq</code> in a program designed for a 32-bit machine, will the desired behavior be emulated, or will the instruction be misunderstood?</p></li>\n</ol>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "11k",
    "tags": [
        "x86",
        "c",
        "x86-64",
        "stack-variables"
    ],
    "user": "rr-",
    "time": "Mar 13, 2015 at 14:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><strong>1:</strong></h2>\n<p>See the <strong>Immediates</strong> section on <a href=\"https://web.archive.org/web/20160719053302/www.x86-64.org/documentation/assembly.html\" rel=\"nofollow noreferrer\">this 64 bit assembly reference</a>.</p>\n<blockquote>\n<p>Immediate values inside instructions remain 32 bits and their value is sign extended to 64 bits</p>\n</blockquote>\n<p>There just isn't an instruction to move a 64 bit immediate value to <em>memory</em> (*). And because it can be emulated nicely by moving two chunks of 32 bit, there was no reason to introduce new 64 bit instructions. (They could have changed the immediate <code>mov</code>s to always use 64 bits. But considering that most constants you'll ever use are &lt;= 2^31, using 32 bit only saves a lot of space for the upper zero bytes, and costs a bit when you actually use larger constants, so this saves memory).</p>\n<p>(*) However, there are instructions to move a 64 bit immediate value to the 64 bit registers, because you can't access the high 32 bit in registers, opposed to memory.</p>\n<p>I don't know why your program produced separate addl/adcl instructions; this is what i got from your program:</p>\n<pre><code>    pushq   %rbp\n    movq    %rsp, %rbp\n    movl    $2041302511, -24(%rbp)\n    movl    $1193046, -20(%rbp)\n    movl    $-2023406815, -16(%rbp)\n    movl    $16632745, -12(%rbp)\n    movq    -16(%rbp), %rax\n    movq    -24(%rbp), %rdx\n    leaq    (%rdx,%rax), %rax\n    movq    %rax, -8(%rbp)\n    movl    $0, %eax\n    leave\n    ret\n</code></pre>\n<p>As you can see, the <code>leaq    (%rdx,%rax), %rax</code> adds 64 bit numbers all right. This was a gcc 4.4.7 on a RHEL 6.6 64 bit system. Please, always state your compiler and OS version, as the output may be quite dependent on those.</p>\n<h2><strong>2:</strong></h2>\n<p>As long as you're dealing with an x86/amd64 architecture, you can probably rely on local variables being put on the stack, and global variables not on the stack. But please note the concept of 'stack' and 'heap' aren't as clearly defined as it would seem. The <code>brk/sbrk</code> mechanism of allocating memory is deprecated; modern implementations use <code>mmap</code>. This might mean you have several small heaps in different sections of your address space. On ARM and MIPS, there's no stack pointer at all - there's just a convention that one specific register serves as the stack pointer, but the instructions to push/pop would work with other registers as well(*). In theory, the compiler is free to do a <code>mmap()</code> at the start of each function to allocate local memory, and <code>munmap()</code> it at the end of the function. The only thing the compiler <em>must</em> do is not keep the memory allocated (for reasonable definitions of allocated) after the function exits.</p>\n<p>(*) This is a bit of an oversimplification but demonstrates the concept.</p>\n<p>Of course, the idea of using <code>mmap()</code> to make space for local variables is an extreme example, that <em>probably</em> noone uses. But lots of compilers put local variables into processor registers and never reserve space on the stack for them (if you never use a pointer to them, and on architectures that aren't as register-starved as x86). Many architectures use processor registers for function arguments as well. And i've seen microcontroller C compilers that allow you to put all variables local to a function into a static area, if you use a certain keyword so the compiler knows the function isn't called recursively. So, while most of the time, local variables will be placed on the stack, you shouldn't assume this is carved in stone.</p>\n<h2><strong>3.</strong></h2>\n<p>The instruction will be misunderstood. The processor can be in 32 bit or 64 bit mode, and the same instructions (in the meaning of: the same sequence of instruction bytes) have different meanings in each of them. For example, <code>48 89 43 ec</code> is <code>mov [rbx-20],rax</code> in 64 bit mode, but <code>dec eax; mov DWORD PTR [ebx-0x14],eax</code> in 32 bit mode.</p>\n</div>",
            "votes": "6",
            "user": "derpasaurus",
            "time": "Feb 1, 2018 at 9:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rr-",
                    "text": "<span class=\"comment-copy\">Very well presented answer, thanks! Two further questions arise: regarding 1 - is there anything I can read about how specifically gcc decides which instruction set (64/32 bit) to use? Regarding 2 - using <code>mmap</code> sounds to be <i>much</i> more expensive than moving a stack pointer (standardized or not). Do ARM or MIPS compilers stray from the convention you've mentioned?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Which instruction set gcc uses depends on -m32 or -m64. Which exact instructions within that instruction set are used depends on (at least) compiler version number and optimization; i don't think there's a comprehensive documentation on this except the source code itself. I amended my answer a bit in respect to the local variables conventions.</span>",
                    "time": null
                }
            ]
        }
    ]
}