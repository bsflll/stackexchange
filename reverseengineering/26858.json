{
    "title": "How can i recognize the length of this array based on the assembly instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/26858/how-can-i-recognize-the-length-of-this-array-based-on-the-assembly-instruction",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://i.sstatic.net/XRsR4.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/XRsR4.png\"/></a></p>\n<p>In the sourcecode i can clearly see that the Array called \"buf\" is 32 byte long since 1 char = 1 byte\nI assume that the array starts at the address [rbp-0x30] and the argv[ ] is stored in the register rsi and moved onto the stack in line 22.\n<strong>Here are the questions:</strong></p>\n<ul>\n<li>First of all, why is it a QWORD PTR? A Qword is 8 Byte, how does that make sense when a char is only 1 byte</li>\n<li>Where can i recognize the 32-byte length of the buf-array in the assembler code?</li>\n</ul>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "492",
    "tags": [
        "gdb",
        "buffer-overflow"
    ],
    "user": "Fluctuation23",
    "time": "Jan 24, 2021 at 2:22",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Could you replace the screenshot by text? You can use code formatting so it’s displayed nicely.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think it's possible to estimate the length of the local variable(s) using the instruction at <code>main+0x04</code> which is <code>sub rsp, 0x30</code>, that's the space the function allocates  on the stack for local variables. In your case it's (0x30) 48 bytes, so we now know that the local variables are all 48 bytes or less.\n<code>argc</code> was provided to the <code>main()</code> function through the <code>edi</code> register as we can see on <code>main+0x08</code>, which is moved into the allocated stack space at offset -0x24.</p>\n<p>We know that <code>argc</code> is 4 bytes in length due to the <code>mov</code> instruction at <code>main+0x08</code>, so I imagine the stack is now aligned as follows:</p>\n<ul>\n<li>From <code>-0x30</code> to <code>-0x28</code> = <code>**argv</code> pointer, 8 bytes.</li>\n<li>From <code>-0x24</code> to <code>-0x20</code> = <code>argc</code>, 4 bytes.</li>\n<li>From <code>-0x20</code> down to the stored <code>RBP</code> qword = <code>buf</code>, 32 bytes.</li>\n</ul>\n<p><br/>\n<a href=\"https://i.sstatic.net/Fn7e3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Fn7e3.png\"/></a></p>\n</div>",
            "votes": "1",
            "user": "Abdullah Mohamed",
            "time": "Feb 23, 2021 at 10:55",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>The array doesn't start @ <code>-30</code>. That's where the <code>argv</code> pointer is stored, i.e. notice contains of rsi are moved on stack @ 22. Also notice instruction 26 where 8 is being added to that pointer, so that you can access <code>argv[1]</code> in <code>strcpy</code>.</li>\n<li>Array is stored @ <code>-20</code>. The array must be stored from -32 to 1 (i.e. from -20h). But there's no way to know this (assuming you don't have symbols or you don't know the source code) without analyzing complete stack and predicting size and locations of other variables (this is a very small program thus you can somehow predict by looking at the code). And with more optimizations, it will be very difficult to predict the existence of that array.</li>\n<li>The type information of buff is lost after compilation.  This is a very common problem in type recovery.</li>\n<li>Workaround - if you have the source code then compiler this code with <code>gcc -g</code> flag. Then examine the symbol table using something like <code>readelf</code>.</li>\n<li>Workaround - A naïve decompiler will detect the type as a scalar of size char or int, while a professional decompiler like ida pro will be able to guess correct type information.</li>\n</ol>\n</div>",
            "votes": "0",
            "user": "R4444",
            "time": "Jan 24, 2021 at 3:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}