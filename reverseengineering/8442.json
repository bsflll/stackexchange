{
    "title": "Anti-debugging techniques - Preventing me from setting a memory and hardware breakpoint. How can I bypass that?",
    "link": "https://reverseengineering.stackexchange.com/questions/8442/anti-debugging-techniques-preventing-me-from-setting-a-memory-and-hardware-bre",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm debugging this process which has a lot of anti debugging techniques in it, and I faced something new which I don't know how to bypass yet.</p>\n<p>Changing the code dynamically causes exceptions to occur and the process to crash.\nSo setting <code>INT 3</code> breakpoints is not an option. The way I'm debugging the process is only with <code>Hardware Breakpoints</code>.</p>\n<p>Now I have found the function (at least one of themâ€¦) which reads portions of the memory and using some CheckSum function over that memory, and then it checks if the memory CheckSum is as it expected. If I changed one byte in the memory, the CheckSum would not be as expected, thus the process would crash. This is actually very simple and done like this in the code:</p>\n<pre><code>CMP EAX,EDX                  ; Compare CheckSum\nJE __GoodCode                  ; jmp must be taken\nCALL &lt;CrashProgram&gt;\n__GoodCode: \nXOR EAX,EAX\n...\n</code></pre>\n<p>The hex value of <code>JE short</code> is <code>0x74 0x0B</code> and I want to change it to <code>JMP short</code> which is <code>0xEB 0x0B</code>. When I do that, the program would crash.\nI found out where the program is crashing using <code>Memory breakpoints</code> at different places of the code and then I found the function doing the CheckSum (it reads all the memory). But now I figured out there is another existing function which probably does something similar! causing the program to crash.</p>\n<p>But this time when I put a <code>Memory breakpoint</code> on my 'changed' JE to JMP it never stops on the breakpoint.</p>\n<p>So this is my first problem, another problem I had is that I had a function I suspected had something to do with the crashing when changing the code, but when I set a <code>Hardware breakpoint</code> on it, it didn't break. I know for sure that this function is being called and the code definitely runs. So I thought to myself there is probably something making sure my <code>Memory &amp; Hardware breakpoints</code> won't work, some sort of anti-debugging mechanism.</p>\n<p>I read a little bit about it and found out about <code>GetThreadContext</code>, in my case it calls <code>Wow64GetThreadContext</code>. It receives a Context structure which holds most registers. Here is how the Context structure looks like:</p>\n<pre><code>CONTEXT _X86_\n\ntypedef struct _CONTEXT {\nDWORD ContextFlags;\n/* ContextFlags contians CONTEXT_DEBUG_REGISTERS. */\nDWORD Dr0;\nDWORD Dr1;\nDWORD Dr2;\nDWORD Dr3;\nDWORD Dr6;\nDWORD Dr7;\n/* ContextFlags contians CONTEXT_FLOATING_POINT. */\nFLOATING_SAVE_AREA FloatSave;\n/* ContextFlags contians CONTEXT_SEGMENTS. */\nDWORD SegGs;\nDWORD SegFs;\nDWORD SegEs;\nDWORD SegDs;\n/* ContextFlags contians CONTEXT_INTEGER.*/\nDWORD Edi;\nDWORD Esi;\nDWORD Ebx;\nDWORD Edx;\nDWORD Ecx;\nDWORD Eax;\n/* ContextFlags contians CONTEXT_CONTROL */\nDWORD Ebp;\nDWORD Eip;\nDWORD SegCs; // MUST BE SANITIZED\nDWORD EFlags; // MUST BE SANITIZED\nDWORD Esp;\nDWORD SegSs;\n/* ContextFlags word contains CONTEXT_EXTENDED_REGISTERS */\nBYTE ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];\n} CONTEXT;\n</code></pre>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms679284(v=vs.85).aspx\" rel=\"nofollow noreferrer\">https://msdn.microsoft.com/en-us/library/windows/desktop/ms679284(v=vs.85).aspx</a></li>\n</ul>\n<p>The first parameters are my <code>Hardware breakpoints</code> and I can see them clearly, but it doesn't seem like it does something with their values. So I don't think it's this function which is causing the crash. Whenever it is called, it seems more like a debug code. Also, this function is never called regularly - only after the program is crashing.</p>\n<p>Now there is also <code>ReadProcessMemory</code> which I read it might bypass my <code>Memory breakpoints</code> for some reason. I set logging breakpoints on that function and it never seemed like it reads a <code>Page</code>(size 0x1000) close to the function I changed, and yes I checked the size it was reading as well.\nAlthough this function is called regularly it still doesn't seem like this is it.</p>\n<p>I have also heard about <code>ZwProtectVirtualMemory</code> functions to change the attributes of memory regions so that the <code>Memory breakpoint</code> 'exceptions' won't occur, and the debugger won't receive them. This function is being called out, but I'm not sure what is the usage, or what parameters are relevant to me in the memory.</p>\n<p>Is there anything else I might be missing?</p>\n<p>The article I was reading which was helping me quite a lot, but did not help me find out what was causing the crash:\n<a href=\"http://waleedassar.blogspot.in/2012/11/defeating-memory-breakpoints.html\" rel=\"nofollow noreferrer\">http://waleedassar.blogspot.in/2012/11/defeating-memory-breakpoints.html</a></p>\n<hr/>\n<p>I have changed my wording of this question. I hope it's clearer now.</p>\n</div>",
    "votes": "10",
    "answers": 1,
    "views": "3k",
    "tags": [
        "windows",
        "assembly",
        "ollydbg",
        "anti-debugging",
        "winapi"
    ],
    "user": "0xAK",
    "time": "Aug 8, 2021 at 11:31",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Did you change the bytes on disk, or in memory only? The program might be reading its executable file. Also, some programs try to detect if they're running in a debugger. Did you install a <a href=\"http://reverseengineering.stackexchange.com/questions/3489/are-there-any-ollydbg-anti-debug-anti-anti-debug-plugins-what-work-with-windows\">Stealth plugin</a>? Will the program work from Ollydbg if you don't patch anything? Or maybe the program detects memory breakpoints. Will the program work if you don't patch anything, but set a memory breakpoint anyway?</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">And you might be interested in <a href=\"http://reverseengineering.stackexchange.com/questions/6124/why-was-my-memory-breakpoint-not-triggered-in-ollydbg?rq=1\">this</a> which links to <a href=\"http://waleedassar.blogspot.in/2012/11/defeating-memory-breakpoints.html\" rel=\"nofollow noreferrer\">this</a>.</span>",
            "time": null
        },
        {
            "user": "0xAK",
            "text": "<span class=\"comment-copy\">@GuntramBlohm I changed the byte dynamically only in the memory. not on the disk.  I am using a Stealth plugin, the program does check if its being debugged or not.  The program works good with a Stealth plugin in Olly and i can debug the program using Hardware Breakpoints (Normal breakpoints add Int 3)</span>",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">At the end of the 2nd link, they say \"N.B. ReadProcessMemory has also been used as a stealthy way to read memory without triggering Hardware Breakpoints.\" I'd assume that ReadProcessMemory copies the memory using kernel ring 0 mode, so it avoids the page restrictions that apply to user mode. Can't hurt to check if ReadProcessMemory gets called somewhere.</span>",
            "time": null
        },
        {
            "user": "0xAK",
            "text": "<span class=\"comment-copy\">@GuntramBlohm, Wow yeah, ReadProcessMemory does happen! i would have never guessed that this API bypasses olly's memory breakpoints.. Always good to learn new things!  Thought i have found that this API is called just before the crash happens in a new thread.. i logged all of the calls to <code>ReadProcessMemory</code> and the second parameter <code>pBaseAddress</code> is never even close to the memory i changed.. it must be something else or am i missing something?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Some possibilities (out of many):</p>\n<p>1.\nThe program may call <code>SetThreadContext</code>, or <code>ZwContinue</code> which sets all registers using a new CONTEXT.\nIf the DRx registers are reset then your hardware breakpoints are removed.</p>\n<p>2.\nThe program calls <code>ZwSetInformationThread</code> with the <code>0x11</code> (<code>ThreadHideFromDebugger</code>) parameter. If the thread is hidden from the debugger then breakpoint exceptions will not be caught by a debugger but will be passed to the program, if unhandled - it will crash.</p>\n</div>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Nov 18, 2019 at 10:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}