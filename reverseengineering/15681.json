{
    "title": "Is it possible for a .exe PE file to do something without any imports at all?",
    "link": "https://reverseengineering.stackexchange.com/questions/15681/is-it-possible-for-a-exe-pe-file-to-do-something-without-any-imports-at-all",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All Portable Executable files that I've found with zero imports in the Import Address Table have not functioned. I also know that while .NET files often do not have the typical OS imports, they must still import either <code>_CorExeMain</code> or <code>RHBinder__ShimExeMain</code>.</p>\n<p>Lastly, even packed files, while they will not have the main modules' imports, will still have imports necessary to start and unpack the file. <em>Is it possible for a .exe PE file to have absolutely zero imports but still run and perform any useful function on a machine?</em></p>\n<p><strong>Please note</strong>: I am not talking about DLL files which are used by other executables for their function exports. I am talking about a standalone .exe file.</p>\n</div>",
    "votes": "6",
    "answers": 3,
    "views": "3k",
    "tags": [
        "pe",
        "executable"
    ],
    "user": "the_endian",
    "time": "Feb 28, 2019 at 17:02",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "<span class=\"comment-copy\">I'm still not clear - do you mean a program that uses no imported functions at all?  Without APIs, you can't even print on the screen.  Then it becomes a question of how you define \"useful\".  Alternatively, all Crinkler-packed files have an empty import table, yet do many amazing things, by parsing memory structures to find the loader, and then resolving the imports at runtime.</span>",
            "time": null
        },
        {
            "user": "xvk3",
            "text": "<span class=\"comment-copy\">Yes, programs can easily lookup the base address of \"kernel32.dll\" from the PEB. Then walk the PE header and export directory and dynamically lookup function addresses.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although blabb's answer shows <em>an</em> executable without any imports, I'm assuming OP was asking about a more functional executable, and not as a theoretical exercise of that level.</p>\n<p>I can think of four types of reasonable, useable executable file types that may not have any imports:</p>\n<ol>\n<li><p>An executable that does not require any OS APIs.</p>\n<p>This is somewhat similar to blabb's answer, but coming up with a more realistic example. Coming up with an executable that makes some kind of complex calculation might be an example. Still, this does not seem like the kind of executable OP is looking for.</p></li>\n<li><p>An executable that fulfils its function by using the default loaded libraries.</p>\n<p>Different OSes have different default libraries, and this might not be always possible, but on windows for example <code>ntdll.dll</code> and <code>kernel32.dll</code> are always loaded into a process, and additional libraries may also be loaded, depending on PE file flags. Some of this is even done <em>by the kernel</em> before most of the PE file format (and the import directory specifically) are processed, other libraries are loaded by the loader automatically or by other library dependencies. An executable may use those available APIs without having any imports, however some additional work to manually resolve APIs will be needed. </p></li>\n<li><p>An executable that resolves it's own imports based on default loaded libraries.</p>\n<p>Using those available APIs from previously mentioned libraries, an executable can implement it's own API search and even library loading code without actually importing the required APIs. This is what some packers do. Specifically, those implementing their own <code>GetProcAddr</code> functionality on windows, or using <code>GetProcAddr</code> and <code>LoadLibrary</code> to dynamically load APIs with an empty import table.</p></li>\n<li><p>An executable that directly implements syscalls to use OS services.</p>\n<p>This possibility is the most complex and fragile, as implementing syscalls directly is difficult and may change between OS updates without prior warnings. Basically, most APIs end up with a syscall instruction that transfers control to the kernel, where the requested operation is actually carried out by the kernel. An executable can issues those directly whenever an OS service is required.</p></li>\n</ol>\n</div>",
            "votes": "12",
            "user": "NirIzr",
            "time": "Jun 10, 2018 at 1:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "conio",
                    "text": "<span class=\"comment-copy\">I don't really see the difference between 2 and 3. (Though I generally agree with what you said and voted up.)</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">I split up \"only using available APIs\" and \"Loading additional libraries\". Naturally, most of those differences are kinda similar and only slightly differ. Thanks for the upvote :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>void main (void)\n{\n    __asm\n    {\n        retn\n    }\n}\n</code></pre>\n<p>compiled and linked using </p>\n<pre><code>cl /nologo /W4 /Ox /analyze noimpo.cpp /link /DEBUG:NONE /RELEASE /ENTRY:main /INCREMENTAL:NO /FIXED /SUBSYSTEM:windows /ALIGN:128 /DRIVER\n</code></pre>\n<p>will create a working PE file </p>\n<p>**edit ** </p>\n<pre><code>// win 7 sp1 32 bit machine and ewdk 1703 cl.exe\nunsigned long long time = 0xdeadbeefdeadbeef;\n__declspec(naked) void main (void)\n{   \n    __asm\n    {\n        push OFFSET time\n        call ntqst      \n        retn\n    }   \n    ntqst:\n    __asm\n    {\n        mov eax,107h\n        mov edx , 7ffe0300h\n        call dword ptr ds:[edx]\n        retn 4\n    }\n}\n</code></pre>\n<p>running under debugger to see if it really does some thing useful </p>\n<pre><code>cdb -c \"g @$exentry;dq 400380 l1;pc;p;dq 400380 l1;.formats qwo(400380);.time;q\" noimpo.exe | grep -i quit -B 16\n\n00400380  deadbeef`deadbeef &lt;----- marker\n\n00400380  01d2ef24`40afa83a &lt;----- actual result\n\nEvaluate expression: &lt; result from .formats \nxxxxxxxxxxxxxxxxxxxxxxxxx\n  Time:             Tue Jun 27 14:33:33.028 2017 \nxxxxxxxxxxxxxxxxxxxxxxxxx\n\nresult from .time command\n\nDebug session time: Tue Jun 27 14:33:33.028 2017 \nxxx\nquit:\n</code></pre>\n</div>",
            "votes": "7",
            "user": "blabb",
            "time": "Jun 27, 2017 at 9:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">I appreciate the response and the knowledge is useful, however, I think you missed the part of this sentence: \". Is it possible for a .exe PE file to have absolutely zero imports but still run and perform any useful function on a machine?\" 'anything useful.'</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if you think querying system time is useful you have it in the edit</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, it is <em>possible</em> but may depend on the OS you're trying to run it on. From the <a href=\"http://www.phreedom.org/research/tinype/\" rel=\"noreferrer\">TinyPE page</a> by  Alexander Sotirov:</p>\n<blockquote>\n<p>Unfortunately the 97 byte PE file does not work on Windows 2000. This\n  is because the loader tries to call a function from KERNEL32, but\n  KERNEL32.DLL is not loaded. All other versions of Windows load it\n  automatically, but on Windows 2000 we have to make sure that\n  KERNEL32.DLL is listed in the import table of the executable.\n  Executing a PE file with no imports is not possible.</p>\n</blockquote>\n<p>So, if you use XP or above you can rely on kernel32 being in memory and use its functions. I suspect (but did not check) that even on Windows 2000 the <strong><code>ntdll.dll</code></strong> is mapped by the kernel, so you may be able to use it to do useful work (e.g. <code>LdrLoadDll</code> to load other DLLs and <code>LdrGetProcedureAddress</code> to resolve functions).</p>\n</div>",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Jun 27, 2017 at 9:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}