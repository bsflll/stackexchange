{
    "title": "Strange function in IDA Pro: Only one basic block ending with a jmp sub_xxxxxx (instead of a ret)",
    "link": "https://reverseengineering.stackexchange.com/questions/8517/strange-function-in-ida-pro-only-one-basic-block-ending-with-a-jmp-sub-xxxxxx",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><img alt=\"IDA Pro function with no ret as last instruction but a jump to a label\" src=\"https://i.sstatic.net/Dtwx4.png\"/></p>\n<p>Analyzing the ELF file /usr/bin/curl (Ubuntu 14.04, 64bit), I stumbled upon a strange function (see image). It is called regularly via <code>call sub_403D90</code> but does not end with a ret. Instead, it jumps to a label / another function (<code>sub_403C90</code>).\nThis is strange because there seems to be no return to <code>sub_403D90</code>, as from <code>sub_403C90</code> onwards in the control flow, there are no jumps but only rets.</p>\n<p>Can someone explain to me why this is? Does it makes sense?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "784",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "compilers",
        "functions"
    ],
    "user": "langlauf.io",
    "time": "Mar 23, 2015 at 9:13",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is just a bit of optimization. A <code>call xxxx</code> followed by a <code>ret</code> can be optimized to a <code>jmp xxxx</code>.</p>\n</div>",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Mar 22, 2015 at 12:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">Commonly known as \"Tail Call\" elimination / optimization.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">@IanCook: Thank you for the keyword. I only came up with \"tail recursion elimination\", which isn't the case here, so i decided to omit it.</span>",
                    "time": null
                }
            ]
        }
    ]
}