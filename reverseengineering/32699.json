{
    "title": "finding unknown CRC 32 bit algorithm used in a firmware file",
    "link": "https://reverseengineering.stackexchange.com/questions/32699/finding-unknown-crc-32-bit-algorithm-used-in-a-firmware-file",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to modify a firmware image for a WiFi router. The image file consist of an UBI image, 0x04100000 bytes in size. Additonally, 20 bytes of unknown metadata have been appended to the UBI image data. I have two different official firmware files for this router. After comparing those 20 bytes of both files I am convinced now that the first 4 bytes are a 32 bit CRC of some sort.</p>\n<p>Because CRC32 is very common, I tried CRC32 with various common start values and polynominals without luck. I applied it only across the UBI data before those 20 bytes, the UBI data with the remaining 16 bytes and the UBI data with the whole 20 bytes while using a 0x00000000 and 0xffffffff placeholder for the CRC.</p>\n<p><a href=\"https://i.sstatic.net/g7v4f.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/g7v4f.png\"/></a></p>\n<p>What could I try next? Is there a way to programatically find CRC32 start values/polynominals when the data and CRC are given?</p>\n<p>Here are the files: <a href=\"https://drive.google.com/file/d/15n_Pg8zeSOf_VCcflWoTaMm8MwxBaFXk/view?usp=drive_link\" rel=\"nofollow noreferrer\">https://drive.google.com/file/d/15n_Pg8zeSOf_VCcflWoTaMm8MwxBaFXk/view?usp=drive_link</a></p>\n<p>Decompiling the Broadcom CFE bootloader that installs the firmware would be an option but isn't going to be easy at all.</p>\n<p>Thanks!</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "83",
    "tags": [
        "crc",
        "firmware-analysis"
    ],
    "user": "Shamblr",
    "time": "Feb 4, 2024 at 11:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>OK my question didn't age well. Turns out \"RevEng\" was the tool I needed:</p>\n<pre><code>reveng.exe -w 32 -fs 010139.3.4.001.0-dec-crc.bin\nreveng.exe: warning: you have only given 1 sample\nreveng.exe: warning: to reduce false positives, give 4 or more samples\nwidth=32  poly=0x04c11db7  init=0xffffffff  refin=true  refout=true  xorout=0x00000000  check=0x340bc6d9  residue=0x00000000  name=\"CRC-32/JAMCRC\"\n</code></pre>\n<p>The input file for RevEng contained the UBI image data plus the 4 bytes CRC appended to the end (thats what RevEng expects).</p>\n</div>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Feb 6, 2024 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">You can accept this as an answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}