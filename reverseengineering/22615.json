{
    "title": "Where can you find the name of a driver causing a kernel mode crash?",
    "link": "https://reverseengineering.stackexchange.com/questions/22615/where-can-you-find-the-name-of-a-driver-causing-a-kernel-mode-crash",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am in an interesting situation. I have very limited Windows kernel experience, so I just don't know what data structure to look for in order to find what I need to know. </p>\n<p>There is a driver that is crashing Windows on my host machine. I know this much from examining the memory dump from the driver. </p>\n<pre><code>For analysis of this file, run !analyze -v\nnt!KeBugCheckEx:\nfffff807`4cdc14e0 48894c2408      mov     qword ptr [rsp+8],rcx ss:0018:fffff389`040e6990=00000000000000f7\n3: kd&gt; !analyze -v\n*******************************************************************************\n*                                                                             *\n*                        Bugcheck Analysis                                    *\n*                                                                             *\n*******************************************************************************\n\nDRIVER_OVERRAN_STACK_BUFFER (f7)\nA driver has overrun a stack-based buffer.  This overrun could potentially\nallow a malicious user to gain control of this machine.\nDESCRIPTION\nA driver overran a stack-based buffer (or local variable) in a way that would\nhave overwritten the function's return address and jumped back to an arbitrary\naddress when the function returned.  This is the classic \"buffer overrun\"\nhacking attack and the system has been brought down to prevent a malicious user\nfrom gaining complete control of it.\nDo a kb to get a stack backtrace -- the last routine on the stack before the\nbuffer overrun handlers and bugcheck call is the one that overran its local\nvariable(s).\nArguments:\nArg1: fffff389040e69d0, Actual security check cookie from the stack\nArg2: 000041be41f88edc, Expected security check cookie\nArg3: ffffbe41be077123, Complement of the expected security check cookie\nArg4: 0000000000000000, zero\n\nDebugging Details:\n------------------\n\n\nKEY_VALUES_STRING: 1\n\n    Key  : Analysis.CPU.Sec\n    Value: 1\n\n    Key  : Analysis.DebugAnalysisProvider.CPP\n    Value: Create: 8007007e on DESKTOP-GS87ORM\n\n    Key  : Analysis.DebugData\n    Value: CreateObject\n\n    Key  : Analysis.DebugModel\n    Value: CreateObject\n\n    Key  : Analysis.Elapsed.Sec\n    Value: 9\n\n    Key  : Analysis.Memory.CommitPeak.Mb\n    Value: 64\n\n    Key  : Analysis.System\n    Value: CreateObject\n\n\nBUGCHECK_CODE:  f7\n\nBUGCHECK_P1: fffff389040e69d0\n\nBUGCHECK_P2: 41be41f88edc\n\nBUGCHECK_P3: ffffbe41be077123\n\nBUGCHECK_P4: 0\n\nSECURITY_COOKIE:  Expected 000041be41f88edc found fffff389040e69d0\n\nSTACK_TEXT:  \nfffff389`040e6988 fffff807`4ce7c485 : 00000000`000000f7 fffff389`040e69d0 000041be`41f88edc ffffbe41`be077123 : nt!KeBugCheckEx\nfffff389`040e6990 fffff807`4cc4066c : 00000000`00000000 fffff807`4d21a91b 00000000`00000000 fffff389`040e74c0 : nt!_report_gsfailure+0x25\nfffff389`040e69d0 fffff389`040e6960 : fffff389`040e6970 fffff389`040e6980 fffff389`040e6990 fffff389`040e69a0 : nt!NtSetInformationWorkerFactory+0x35c\nfffff389`040e6b30 fffff389`040e6970 : fffff389`040e6980 fffff389`040e6990 fffff389`040e69a0 00000000`00000000 : 0xfffff389`040e6960\nfffff389`040e6b38 fffff389`040e6980 : fffff389`040e6990 fffff389`040e69a0 00000000`00000000 00000000`00000000 : 0xfffff389`040e6970\nfffff389`040e6b40 fffff389`040e6990 : fffff389`040e69a0 00000000`00000000 00000000`00000000 00000000`00000000 : 0xfffff389`040e6980\nfffff389`040e6b48 fffff389`040e69a0 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0xfffff389`040e6990\nfffff389`040e6b50 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0xfffff389`040e69a0\n\n\nSYMBOL_NAME:  nt!_report_gsfailure+25\n\nMODULE_NAME: nt\n\nIMAGE_NAME:  ntkrnlmp.exe\n\nSTACK_COMMAND:  .thread ; .cxr ; kb\n\nBUCKET_ID_FUNC_OFFSET:  25\n\nFAILURE_BUCKET_ID:  0xF7_MISSING_GSFRAME_nt!_report_gsfailure\n\nOS_VERSION:  10.0.18362.1\n\nBUILDLAB_STR:  19h1_release\n\nOSPLATFORM_TYPE:  x64\n\nOSNAME:  Windows 10\n\nFAILURE_ID_HASH:  {82d2c1b5-b0cb-60a5-9a5d-78c8c4284f84}\n\nFollowup:     MachineOwner\n</code></pre>\n<p><strong>Main Question:</strong> Is it possible to directly extract the name of the crashing driver from a windows (kernel only) memory dump file? </p>\n<p><strong>If not, is it possible to extract that information by enabling user mode crash dumps</strong> (by this I mean the \"active\" crash dump with by user and kernel space)? </p>\n<p>If it is possible, <strong>where should I look for the data structure to find this information? Is there a convenient Wdbg command that will get me close?</strong> </p>\n<p>My main goal is to examine the root cause of the driver's crashing behavior and possibly recreate the crash myself. </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "driver",
        "kernel"
    ],
    "user": "MrSynAckSter",
    "time": "Nov 25, 2019 at 8:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is possible. Take a minute to read the output from analyze. There's a few fields that will tell you what driver faulted like \"FAULTING_MODULE\", \"IMAGE_NAME\", and \"MODULE_NAME\". </p>\n<p>It will give you the state of the registers as well and specifically what instruction that caused the crash so you'll see something like </p>\n<pre><code>driver + offset:\naddresss: instruction\n</code></pre>\n<p>Then below that, you'll see the stack context which is pretty useful to see what's going on. If I remember correctly, the command for that it uses is \"kb\"</p>\n<p>If you use the .trap command for the field \"TRAP_FRAME\", you will go to the context of where it crashed too which is pretty sick. </p>\n<p>Anyhow, all that will give you everything you need to finish your exploit. Happy hacking!</p>\n</div>",
            "votes": "2",
            "user": "Jon",
            "time": "Nov 25, 2019 at 7:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Thanks for replying! I've updated the question with the full analyze output. It says it crashed in the nt image, which sadly doesn't help much. Any other tips to tease out the faulting module?</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">If you look into STACK TEXT, you'll see that there's a call stack. And before OS crashed somewhere within kernel image, which is called nt, it was executing some other code. So it's not the kernel which crashed, it's some driver which called the kernel API with the wrong parameters, which made kernel panic. Thus you need to analyze the call stack to see who it was. There are addresses of the code which was executed before hitting the kernel: 0xfffff389040e6960, 0xfffff389040e6970, etc. You need to find out which driver was at those addresses.</span>",
                    "time": null
                },
                {
                    "user": "J...",
                    "text": "<span class=\"comment-copy\">While you can do this the hard way, there are also pretty good tools like BlueScreenView or WhoCrashed that generally do a pretty good job of identifying the probable faulting module.  The information is in the dump file, of course, but decoding it for the specific system that faulted is a somewhat tedious exercise.</span>",
                    "time": null
                }
            ]
        }
    ]
}