{
    "title": "Modify function to return a static value",
    "link": "https://reverseengineering.stackexchange.com/questions/22334/modify-function-to-return-a-static-value",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am learning IDA pro on a test binary and I'd like to return a static value from this function:</p>\n<pre><code>; __int64 __fastcall sub_B580(char *name)\nsub_B580 proc near\n\npai= qword ptr -70h\nreq= addrinfo ptr -68h\nservice= byte ptr -2Fh\nvar_20= qword ptr -20h\n\n; __unwind {\npush    rbp\npush    rbx\nsub     rsp, 68h\nmov     rax, fs:28h\nmov     [rsp+78h+var_20], rax\nxor     eax, eax\ntest    rdi, rdi\njz      loc_B676\n\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "385",
    "tags": [
        "ida"
    ],
    "user": "bestupload",
    "time": "Nov 3, 2019 at 17:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Returning a static value from any function is quite easy. I assume that your calling convention takes return value in the (e|r)ax register.</p>\n<p>So to return some value, just patch your function to look like</p>\n<pre><code>mov rax, &lt;value&gt;\nret\n</code></pre>\n<p>Lets consider an example.</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint test(int n) {\n    int i, sm = 0;\n    for (i = 1; i &lt;= n; i++)\n        sm += (i * i);\n    return sm;\n}\n\nint main(int argc, char **argv) {\n    int n;\n    scanf(\"%d\", &amp;n);\n    printf(\"%d\\n\", test(n));\n    return 0;\n}\n</code></pre>\n<p>When run this looks like</p>\n<pre><code>$ ./test\n9\n285\n$ ./test\n10\n385\n</code></pre>\n<p>When compiled this looks like</p>\n<pre><code>.text:0000000000000720                 public test\n.text:0000000000000720 test            proc near               ; CODE XREF: main+2C↓p\n.text:0000000000000720\n.text:0000000000000720 var_14          = dword ptr -14h\n.text:0000000000000720 var_8           = dword ptr -8\n.text:0000000000000720 var_4           = dword ptr -4\n.text:0000000000000720\n.text:0000000000000720 ; __unwind {\n.text:0000000000000720                 push    rbp\n.text:0000000000000721                 mov     rbp, rsp\n.text:0000000000000724                 mov     [rbp+var_14], edi\n.text:0000000000000727                 mov     [rbp+var_8], 0\n.text:000000000000072E                 mov     [rbp+var_4], 1\n.text:0000000000000735                 jmp     short loc_745\n.text:0000000000000737 ; ---------------------------------------------------------------------------\n.text:0000000000000737\n.text:0000000000000737 loc_737:                                ; CODE XREF: test+2B↓j\n.text:0000000000000737                 mov     eax, [rbp+var_4]\n.text:000000000000073A                 imul    eax, [rbp+var_4]\n.text:000000000000073E                 add     [rbp+var_8], eax\n.text:0000000000000741                 add     [rbp+var_4], 1\n.text:0000000000000745\n.text:0000000000000745 loc_745:                                ; CODE XREF: test+15↑j\n.text:0000000000000745                 mov     eax, [rbp+var_4]\n.text:0000000000000748                 cmp     eax, [rbp+var_14]\n.text:000000000000074B                 jle     short loc_737\n.text:000000000000074D                 mov     eax, [rbp+var_8]\n.text:0000000000000750                 pop     rbp\n.text:0000000000000751                 retn\n.text:0000000000000751 ; } // starts at 720\n.text:0000000000000751 test            endp\n</code></pre>\n<p>Click on the function start at 0x720.\nGo to Edit -&gt; Patch Program -&gt; Assemble.</p>\n<p>In the window opened write</p>\n<pre><code>mov eax, 99\n</code></pre>\n<p>and press OK.</p>\n<p>It will patch the current <code>push rbp</code>.</p>\n<p>Finally write</p>\n<pre><code>ret\n</code></pre>\n<p>press OK and then Cancel to stop patching.</p>\n<p>Go to Edit -&gt; Patch Program -&gt; Apply patches to input file</p>\n<p>Save binary with the updated changes. Now it runs like</p>\n<pre><code>$ ./test\n9\n99\n$ ./test\n10\n99\n$ ./test\n99\n99\n</code></pre>\n</div>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Oct 18, 2019 at 4:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bestupload",
                    "text": "<span class=\"comment-copy\">Thank you so much.  I had another question: I have a if condition that if met will call exit(0). Is there a way i can change exit(0) to continue; ?</span>",
                    "time": null
                },
                {
                    "user": "sudhackar",
                    "text": "<span class=\"comment-copy\">Please post it as other question.</span>",
                    "time": null
                }
            ]
        }
    ]
}