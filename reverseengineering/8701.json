{
    "title": "Analyzing a use-after-free bug (taint analysis?)",
    "link": "https://reverseengineering.stackexchange.com/questions/8701/analyzing-a-use-after-free-bug-taint-analysis",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm analyzing a use-after-free bug in IDA Pro by hand. Basically, I control the content of an object (pointed by a register) and I want to force a write at an arbitrary address. For instance, I might find a <code>mov [ebx], eax</code>, where I can control both <code>eax</code> and <code>ebx</code>.</p>\n<p>Is there a way to automate this task at least in part?</p>\n<p>Here's a simple example. Let's say we control the data pointed by <code>ecx</code> and we have this code:</p>\n<pre><code>  mov eax, [ecx]\n  test dword ptr [ecx+8], 8\n  jz skip\n  mov ebx, [ecx+4]\n  mov [eax], ebx    &lt;---- arbitrary write\nskip:\n</code></pre>\n<p>As you can see, by choosing the values at [ecx], [ecx+4] and [ecx+8] carefully, we can perform an arbitrary write. In reality, the code is much more complex, so it's hard to keep track of what we control and find a suitable instruction.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "789",
    "tags": [
        "ida",
        "vulnerability-analysis"
    ],
    "user": "Kiuhnm",
    "time": "Apr 14, 2015 at 22:52",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Are you speaking about a ROP gadget or am I totally confused ?</span>",
            "time": null
        },
        {
            "user": "Kiuhnm",
            "text": "<span class=\"comment-copy\">@perror No, it's not about ROP. The application frees an object by mistake and keep using it (through a dangling pointer). If you succeed in allocating some data you control at the same address where the freed object was, you can compromise the application. For instance, you can force the application to write 0x20 at a particular address which may modify the length of a javascript array so that you can now read beyond the real end of the array, etc... The problem is that you need to find an asm instruction that you can control.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would agree with you in that you need to implement some kind of taint tracing, what is tricky statically. Moreover, you need to know whether there are any constraints applied to your controlled values. Also, we land in the symbolic execution domain (warning, there be dragons).</p>\n<p>Anyway, maybe <a href=\"https://github.com/cea-sec/miasm#user-content-symbolic-execution\">this project</a> can be helpful to you. It even has <a href=\"https://github.com/cea-sec/miasm/tree/master/example/ida\">IDA Pro integration</a> in the latest version.</p>\n<p>Good luck!</p>\n</div>",
            "votes": "5",
            "user": "Carlos Garcia",
            "time": "Apr 15, 2015 at 7:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}