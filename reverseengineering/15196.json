{
    "title": "Android Native Library - How to match java references to sub_XXX function (static way)",
    "link": "https://reverseengineering.stackexchange.com/questions/15196/android-native-library-how-to-match-java-references-to-sub-xxx-function-stati",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently learning how native functions are implemented among the ELF SO files contained inside an APK. I'm using IDA.   </p>\n<p>Native calls are always achieved in this way. </p>\n<pre><code>// First load the library \nclass myClass{\npublic myClass(){\n  super();\n  v0 = system.loadLibrary(\"library-native\"); \n  //then declare the methods \n}\npublic static native int nativeMethod(byte[] arg0, boolean arg1) ;\n}\nvoid a(){\n  // then uses it \n  ret = this.nativeMethod(byte,bool) ; \n}\n</code></pre>\n<p>According to my little experiences in JNI, when looking to library-native.so using a disassembler  I should see something like Java_package_name_libname_class_NativeMethod among the exported function. </p>\n<p>I cannot see any of these elements. \nWhen I'm searching  the desired function (nativeMethod in the past example) inside the disassembled code, I do not find any clue. </p>\n<p>I wonder how Dalvik process manages to call the right function when a native call is performed, and how can I find myself the source code of the desired functions ?</p>\n<p>Thanks</p>\n<p>EDIT : \nI add the nm and readelf output to clarify. </p>\n<pre><code>nm --defined-only library-native.so \nnm library-native.so : no symbols\nreadelf -s library-native.so | grep nativeMethod // gives no output\n//The only JNI related function \nnm -D --defined-only library-native.so | grep JNI\n00XX: JNI_onLoad\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "833",
    "tags": [
        "android",
        "disassemblers"
    ],
    "user": "deadeert",
    "time": "Apr 26, 2017 at 13:16",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">if you run <code>nm</code> on the file, does  it list the expected symbols?</span>",
            "time": null
        },
        {
            "user": "deadeert",
            "text": "<span class=\"comment-copy\">Hey Igor, I add the nm and readelf output. Thanks for pointing this out !</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Well, if the original file does not export the symbols, I can only think of two possibilities:</p>\n<ol>\n<li>the methods are registered dynamically at load time.</li>\n<li>(most likely) the file is obfuscated/encrypted and is decrypted on load.</li>\n</ol>\n<p>In both cases the action probably happens in the <code>JNI_onLoad</code> function. You will need to debug it to see what's going on.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 26, 2017 at 13:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "deadeert",
                    "text": "<span class=\"comment-copy\">Could you provide an example (link or quick writing) of method register at load time, I'm not sure to understand what you are talking about and it interest me a lot. Thanks you very much.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">see <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#wp5833\" rel=\"nofollow noreferrer\"><code>RegisterNatives</code></a> and <a href=\"http://stackoverflow.com/a/1012427/422797\">this example</a></span>",
                    "time": null
                },
                {
                    "user": "deadeert",
                    "text": "<span class=\"comment-copy\">Thanks. Command  <code>nm -Du --defined-only native-library.so | grep -i registernative</code> outputs nothing.  Same for <code>readelf -s  native-library.so | grep -i registernative</code> command.  Are you agree with me when I conclude that option 2 you pointed is right in this case ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><code>RegisterNatives</code> is a field (function pointer) in the <code>JNIEnv</code> structure (first argument passed to <code>JNI_onLoad</code>). You won't see the field names in the binary, just numerical offsets.</span>",
                    "time": null
                }
            ]
        }
    ]
}