{
    "title": "Mnemonic suffixes for x86-64 assembly for AT&T syntax",
    "link": "https://reverseengineering.stackexchange.com/questions/32479/mnemonic-suffixes-for-x86-64-assembly-for-att-syntax",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand suffixes used for the AT&amp;T syntax for the x64 assembly used for instruction mnemonics.</p>\n<p>For regular cases:</p>\n<pre><code>'b',     // 8_bit\n'w',     // 16_bit\n'l',     // 32_bit\n'q',     // 64_bit\n't',     // 80_bit\n</code></pre>\n<p>Examples: Intel vs AT&amp;T:</p>\n<pre><code>inc word ptr [rbx]        incw   (%rbx)\ninc dword ptr [rbx]       incl   (%rbx)\ninc qword ptr [rbx]       incq   (%rbx)\n</code></pre>\n<p>But then for floating-point instructions, it's different:</p>\n<pre><code>L'b',     // 8_bit\nL'w',     // 16_bit\nL's',     // 32_bit\nL'l',     // 64_bit\nL't',     // 80_bit\n</code></pre>\n<p>If so, then why does the GCC compiler give me this:</p>\n<pre><code>fiadd word ptr [rcx]           fiadds (%rcx)\nfiadd dword ptr [rcx]          fiaddl (%rcx)\n</code></pre>\n<p>Can some confirm if I'm right, or correct me?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "152",
    "tags": [
        "assembly",
        "x86-64",
        "intel"
    ],
    "user": "c00000fd",
    "time": "Nov 7, 2023 at 11:25",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, you are right: <a href=\"https://en.wikibooks.org/wiki/X86_Assembly/GNU_assembly_syntax#Operation_Suffixes\" rel=\"nofollow noreferrer\">Operation suffixes</a> on wikibooks.</p>\n</div>",
            "votes": "1",
            "user": "Ruslan Garipov",
            "time": "Nov 8, 2023 at 5:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}