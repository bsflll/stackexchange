{
    "title": "How to convert assembly to pseudo code? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20061/how-to-convert-assembly-to-pseudo-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions asking for help <b>reverse-engineering a specific system</b> are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2018-12-06 14:02:43Z\">6 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/20061/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I have the following assembly. I don't know how to follow assembly. I was wondering if there is a way to convert assembly to a human readable pseudo code or better yet C code:</p>\n<pre><code>init:\n mov    eax, [ebp+8]    # pointer to key\n push   eax\n mov    eax, [ebp+c]    # pointer to ciphertext\n push   eax\n mov    eax, [ebp+10]   # ciphertext length\n push   eax\n mov    eax, [ebp+1c]   # pointer to plaintext\n push   eax\n xor    ecx, ecx    # loop counter\n\nloop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n\n mov    eax, [esp+c]\n add    eax, edx\n mov    al, byte ptr [eax]\n sub    al, 0x41\n\n mov    ebx, [esp+8]\n add    ebx, ecx\n mov    bl, byte ptr [ebx]\n sub    bl, 0x41\n\n sub    bl, al\n jns    tail\n add    bl, 0x1a\n\ntail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    [eax+ecx], bl\n\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n</code></pre>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "assembly",
        "x86",
        "c"
    ],
    "user": "sukhvir",
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although rewriting assembly to pseudo C is not technically reverse engineering, I'll try to help </p>\n<pre><code>init:\n mov    eax, [ebp+8]\n push   eax\n mov    eax, [ebp+0xc]\n push   eax\n mov    eax, [ebp+0x10]\n push   eax\n mov    eax, [ebp+0x1c]\n puse   eax\n xor    ecx, ecx\n</code></pre>\n<p>This block just basically sets up parameters, as already mentioned <code>ecx</code> is a <code>counter</code>.</p>\n<pre><code>loop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n</code></pre>\n<p>Here <code>edx</code> is zeroed out, counter is moved to <code>eax</code> and unsigned division by 6 is performed. <code>div</code> stores the quotient in <code>eax</code> and remainder in <code>edx</code>.</p>\n<pre><code>mov    eax, [esp+0xc]\nadd    eax, edx\nmov    al, [eax]\nsub    al, 0x41\n</code></pre>\n<p>Here pointer from the key is accessed at offset <code>edx</code> and 0x41 is subtracted.</p>\n<pre><code>char a = key[counter % 6] - 0x41;\n</code></pre>\n<p>On to the next block</p>\n<pre><code>mov    ebx, [esp+8]\nadd    ebx, ecx\nmov    bl, [ebx]\nsub    bl, 0x41\n</code></pre>\n<p>Here pointer from the <code>ciphertext</code> is accessed at offset <code>counter</code> and 0x41 is subtracted.</p>\n<pre><code>char b = ciphertext[counter] - 0x41;\n</code></pre>\n<p>Next</p>\n<pre><code>sub    bl, al\njns    tail\nadd    bl, 0x1a\n</code></pre>\n<p>Here <code>a</code> and <code>b</code> are subtracted and if difference is less than zero 0x1a is added to <code>b</code>;</p>\n<pre><code>b = b - a;\nif(b &lt; 0) b += 0x1a;\n</code></pre>\n<p>Next:</p>\n<pre><code>tail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    byte ptr [eax+ecx], bl\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n</code></pre>\n<p>Here 0x41 is added back to <code>b</code> and its written to <code>plaintext</code> at offset <code>counter</code>.</p>\n<pre><code>plaintext[counter] = b+0x41;\ncounter++;\n</code></pre>\n<p>This was done in a loop with <code>length</code> as the limit.</p>\n<pre><code>while(counter &lt; length)\n</code></pre>\n<p>Equivalent complete code.</p>\n<pre><code>void decode(char *key, char *ciphertext, size_t length, char *plaintext){\n    size_t counter = 0; \n    do{\n        char diff = ciphertext[counter] - key[counter % 6];\n        plaintext[counter++] = 0x41 + diff + (diff &lt; 0 ? 0x1a : 0);\n    }\n    while(counter &lt; length);\n}\n</code></pre>\n</div>",
            "votes": "7",
            "user": "sudhackar",
            "time": "Dec 12, 2018 at 3:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2347953",
                    "text": "<span class=\"comment-copy\">Probably not much sense commenting on a closed question, but the subtraction is the wrong way aroundâ€”key is supposed to be subtracted from cipher text. Also it's the Vigenere cipher.</span>",
                    "time": null
                }
            ]
        }
    ]
}