{
    "title": "Analysing an executable with a 24bit segmented address space",
    "link": "https://reverseengineering.stackexchange.com/questions/33327/analysing-an-executable-with-a-24bit-segmented-address-space",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an executable of a legacy embedded system that I want to analyze.<br/>\nThe system uses an 80186 assembler. The architecture of the system is similar to 16bit DOS but instead of a 20bit address space this device uses a 24bit address space where the segment is shifted by 8 bits rather than by 4.</p>\n<p>I tried opening the executable in ghidra but I get an error:</p>\n<blockquote>\n<p>ghidra.program.model.address.AddressOverflowException: Address\nOverflow in add ...</p>\n</blockquote>\n<p>How can I analyze such an executable?<br/>\nPerhaps there is a way to configure ghidra to preform address mapping differently?<br/>\nIs there another reverse engineering tool that will allow me to configure address space segmentation differently?<br/>\nMaybe there is some pre-processing that I can do to make this executable load in one of the already available architectures?</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "50",
    "tags": [
        "ghidra",
        "segmentation",
        "dos-exe"
    ],
    "user": "Arik Yavilevich",
    "time": "Dec 3, 2024 at 18:32",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Are you sure that Ghidra support the extended memory mode (24bits address-space) ? The error message seems to complains about an overflow on the address-space value, so it might be the problem. So, the segmentation process might be in the line. You may have a more accurate answer by submitting an issue report directly on Ghidra's Github page.</span>",
            "time": null
        }
    ],
    "answers_data": []
}