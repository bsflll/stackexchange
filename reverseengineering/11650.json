{
    "title": "How can I decompile an ARM Cortex-M0 .hex file to C++?",
    "link": "https://reverseengineering.stackexchange.com/questions/11650/how-can-i-decompile-an-arm-cortex-m0-hex-file-to-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The source file is in intel 32 bit .hex format, it was built for a nuvoton NUC220LE3AE. I want to decompile it to C++, or at least assembly. I have some experience with assembly, but mostly with MIPS and that was years ago - so high level code is preferred. </p>\n<p>Link to .hex file: <a href=\"http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex\" rel=\"nofollow\">http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex</a></p>\n<p>The device it resides in is a SMOK Xcube 2 (e-cig box mod.)</p>\n<p>My goal is to add an option to control the LED color based on the atomizer temperature.</p>\n<p>I searched but could not find an applicable how-to.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "25k",
    "tags": [
        "arm",
        "decompile"
    ],
    "user": "KING_BOZAR",
    "time": "Mar 23, 2017 at 21:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Short answer: You can't.</p>\n<p>At least, don't expect a readable, and compilable, C source code. There's discussion why elsewhere on this site, so i won't get into details.</p>\n<p>Also, note there's not an easy walk-through or how-to. You need to experiment, and you'll need some experience as well. </p>\n<p>To get you started, you might:</p>\n<ul>\n<li>convert the .hex file into a raw binary file, for example using <a href=\"http://hex2bin.sourceforge.net/\" rel=\"noreferrer\">Hex2bin</a></li>\n<li>use that binary file with the <a href=\"https://retdec.com/decompilation/\" rel=\"noreferrer\">retargetable Decompiler</a> selecting \"raw machine code\" and probably \"ARM+Thumb\" as architecture</li>\n<li>If the results of of the retargetable decompiler are unsatisfactory (it didnt work well for me, last time i tried), you might want to try the <a href=\"https://www.onlinedisassembler.com/odaweb/\" rel=\"noreferrer\">Online Disassembler</a> to get assembly code</li>\n<li>Of course, the ultimate tool is <a href=\"http://www.hex-rays.com\" rel=\"noreferrer\">IDA</a>, but the freeware version can't handle ARM, and the price is probably a bit steep for a hobby project.</li>\n</ul>\n</div>",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Dec 30, 2015 at 11:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "KING_BOZAR",
                    "text": "<span class=\"comment-copy\">The online disassebmler only supports up to armv5, but the coretex m0 this is based on uses armv6.  I think my company has a license for IDA, but I've gotta ask around on the specifics.</span>",
                    "time": null
                },
                {
                    "user": "domen",
                    "text": "<span class=\"comment-copy\">You could just use <code>&lt;yourarch&gt;-objdump -b binary -xD file.bin</code> on the raw binary.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>radare2 supports these ihex files directly </p>\n<p>note the command in radare2 in my original answer uses switch -b32 \nSYS_V commented that it should be -b16 and posted an answer with ample details how to proceed from the end of my answer to a tangible result here is the link to that thread <a href=\"https://reverseengineering.stackexchange.com/questions/15006/approach-to-extract-useful-information-from-binary-file\">how to find usefull info from a bin file</a></p>\n<pre><code>:\\&gt;ls -l\ntotal 172\n-rw-rw-rw-  1 Admin 0 172401 2016-01-01 00:44 SMOK_X_CUBE_II_firmware_v1.07.hex\n\n:\\&gt;rahash2 -a md5 SMOK_X_CUBE_II_firmware_v1.07.hex\nSMOK_X_CUBE_II_firmware_v1.07.hex:0x00000000-0x0002a170 md5: 351660a42b846d19e35f54f75530e2d9\n\n:\\&gt;radare2 -A -a arm -b 32 ihex://SMOK_X_CUBE_II_firmware_v1.07.hex\nFunction too big at 0xa50e54\nFunction too big at 0xfe25a2ac\nFunction too big at 0x1648234\nFunction too big at 0x13ed738\n[0x00000000]&gt; s 0xc1\n[0x000000c1]&gt; pd 10\n|          0x000000c1    4885460c       mcrreq p5, 4, r8, r6, c8\n|          0x000000c5    f070fc00       ldrshteq r7, [ip], 0\n|          0x000000c9    480047e9       stmdb r7, {r3, r6} ^\n|          0x000000cd    1b0000e8       stmda r0, {r0, r1, r3, r4}\n|          0x000000d1    0e002004       strteq r0, [r0], -0xe\n|          0x000000d5    48804704       strbeq r8, [r7], -0x48\n|          0x000000d9    480047fe       cdp2 p0, 4, c0, c7, c8, 2\n|          0x000000dd    e7fee7fe       cdp2 p14, 0xe, c15, c7, c7, 7\n|          0x000000e1    e7fee7fe       cdp2 p14, 0xe, c15, c7, c7, 7\n|          0x000000e5    e7fee75d       stclpl p14, c15, [r7, 0x39c]!\n[0x000000c1]&gt;\n</code></pre>\n<p>if you were wondering how did radare2 get the 4885460c at address 0xxxxc1 \nthen read further</p>\n<p>intel seems to have published the specs of ihex file format i got hold of one pdf from microsym named intelhex.pdf  dont know if any latest version are available this is my first brush with ihex or arm for that matter </p>\n<pre><code>Hexadecimal Object File Format Specification Revision A January 6, 1988\n</code></pre>\n<p>based on the description in the file </p>\n<p>it seems each line in the ihex file starts with a <kbd>colon :</kbd><br/>\nfollowed by ONE BYTE     = record length<br/>\nfollowed by TWO BYTES    = offset to load<br/>\nfollowed by ONE BYTE     = Record Type<br/>\nLast BYTE in the line    = Checksum     </p>\n<p>each of the above are hexpairs ie BYTE E8 will be 0x45 0x38 in the file</p>\n<pre><code>3A 31 30 30 30 30 30 30 30 45 38 30 45 30 30 :10000000E80E00\n</code></pre>\n<p>the file consists of 3833 lines out of which 3830 lines have a record length of 0x10</p>\n<pre><code>wc SMOK_X_CUBE_II_firmware_v1.07.hex\n  3833   3833 172401 SMOK_X_CUBE_II_firmware_v1.07.hex\n\ngrep -ivn :10 SMOK_X_CUBE_II_firmware_v1.07.hex\n1::020000040000FA\n3832::04000005000000C136\n3833::00000001FF\n</code></pre>\n<p>dissecting the first line </p>\n<pre><code>line1 data size   = 0x02 \nload offset       = 0x0000\nrecord type is    = 0x04  (extended linear address 32 bit format)\n</code></pre>\n<p>and it stays as is until another record 04 is encountered lets check if the file contains another record 04</p>\n<pre><code>:\\&gt;grep -in :......04 SMOK_X_CUBE_II_firmware_v1.07.hex\n1::020000040000FA\n</code></pre>\n<p>only one line\nthe last line 3833 denotes end of file <code>record type 0x01</code><br/>\nthe last but one line denotes start linear address <code>record type 0x05</code>  and EIP = 0xc1   checksum matches <code>(100 - (0xc1 + 0x05 + 0x04 ) ) == 0x36</code></p>\n<p>so that leaves 3830 lines as code data xx</p>\n<p>based on the above details we can carve the bytes    </p>\n<p>delete the <code>first , last . last but one</code> lines from the input file<br/>\n<code>sed substitute</code> the first nine characters and last two character and <code>rip off the line endings \\r\\n</code> .      </p>\n<pre><code>sed s/:........//g &lt; in | sed s/..$//g | tr -d  \"\\r\\n\" &gt; out\n</code></pre>\n<p>lets check out if sed magic worked  we should have 32 characters per line if it worked concatenated into one big string </p>\n<pre><code>:\\&gt;wc out\n     0      1 122560 out\n\n:\\&gt;set /a 32*3830\n122560\n</code></pre>\n<p>lets convert the hex pairs to binary </p>\n<pre><code>rax2 -s &lt; out &gt; bin \n</code></pre>\n<p>this doesn't work as it should deliver us half the input size but it is higher than that also the inversion <code>rax2 -S &lt; bin &gt; is_original</code>  doesn't get us the original input back </p>\n<p>to the developers of radare if you read this can you check if rax2 -s works properly in windows if input is file  it seems it suffers from unix / windows line ending quirks (windows seems to convert the binary 0x0A to 0x0d 0x0a when using the redirection operator </p>\n<pre><code>:\\&gt;rax2 -s &lt; out &gt; bin\n\n:\\&gt;wc bin\n  616  4126 61896 bin\n\n:\\&gt;set /a 61896 * 2\n123792\n</code></pre>\n<p>lets cook a python unhexlify </p>\n<pre><code>:\\&gt;cat makebin.py\nimport binascii\nfp = open(\"out\",\"rb\")\nfo = open(\"bin\",\"wb\")\nbuff = fp.read()\nfo.write(binascii.unhexlify(buff))\nfp.close()\nfo.close()\n:\\&gt;python makebin.py\n\n:\\&gt;wc *\n   616   4126  61280 bin\n  3830   3830 172350 in\n     6     14    139 makebin.py\n     0      1 122560 out\n   616   4126  61896 rax2bin\n  5068  12097 418225 total\n\n:\\&gt;set /a 61280*2\n122560\n:\\&gt;\n</code></pre>\n<p>python seems to deliver us the correct bytes </p>\n<p>lets ask radare2 if the size 122560 is right </p>\n<pre><code>[0x000000c1]&gt; if\nfile     ihex://SMOK_X_CUBE_II_firmware_v1.07.hex\nfd       2357404\nsize     0xef60\nblksz    0x0\nmode     r--\nblock    0x100\nformat   any\n\n[0x000000c1]&gt; !rax2 0xef60*2\n122560\n[0x000000c1]&gt;\n</code></pre>\n<p>it seems to agree lets xxd and look if we fished the right bytes at right offset </p>\n<pre><code>:\\&gt;xxd -g 4 -l 32 -s 0xc1 bin\n00000c1: 4885460c f070fc00 480047e9 1b0000e8  H.F..p..H.G.....\n00000d1: 0e002004 48804704 480047fe e7fee7fe  .. .H.G.H.G.....\n</code></pre>\n<p>it looks right now we can try and start understanding the mnemonics \n(google doesn't seem to know much about mccreq i don't know arm so good-luck from here on </p>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Mar 27, 2017 at 5:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">The target processor, ARM Cortex-M0,  uses a 16-bit Thumb instruction set even though its architecture is 32-bit</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@SYS_V  thanks for the info i see you posted an answer to the other thread that refers to this question with lots of details  ill add a foot note to the answer referring to that thread and this comment</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">You are welcome. The explanation in this post of how to use r2 to disassemble <code>.hex</code> files was very useful</span>",
                    "time": null
                }
            ]
        }
    ]
}