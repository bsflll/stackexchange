{
    "title": "Confused about the use of the shl instruction in this disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/27453/confused-about-the-use-of-the-shl-instruction-in-this-disassembly",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I created a code construct in C to see how it looks in x86. I'm confused about the use of the shl instructions. I'm confused about what is happening in between the lines &lt;+39&gt; and &lt;+51&gt; I don't get how those instructions translate to the source code.</p>\n<p><a href=\"https://i.sstatic.net/JW4Dm.png\" rel=\"nofollow noreferrer\"><img alt=\"Code construct\" src=\"https://i.sstatic.net/JW4Dm.png\"/></a></p>\n<p>Here's the source code:\n<a href=\"https://i.sstatic.net/Nz3r7.png\" rel=\"nofollow noreferrer\"><img alt=\"Source\" src=\"https://i.sstatic.net/Nz3r7.png\"/></a></p>\n<p>It's obviously compiler optimisation but I'm not understanding how that would be equal to multiplying by 21. [It's bit shifting eax, 0x2, or multiplying by 4 twice, but I don't understand how the add instructions make it go from multiplying by 16 to 21]</p>\n<p>Thanks for any help! Rohail.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "301",
    "tags": [
        "disassembly",
        "x86",
        "c",
        "gdb"
    ],
    "user": "Constructive",
    "time": "Apr 13, 2021 at 11:50",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi, I'd say it's still a good idea to swap your screenshot for actual text even now after you got an answer.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's break it down line by line. Assuming <code>x</code> is the thing you want to multiply by <code>21</code> and it's stored in <code>eax</code> (as it is in this example after line <code>34</code>).</p>\n<pre><code>&lt;39&gt;: mov edx, eax  ; so copy the x to edx\n&lt;41&gt;: mov eax, edx  ; it's pointless to do this mov; after those two lines eax &amp; edx has the value of x\n&lt;43&gt;: shl eax, 2    ; so eax = x * 4\n&lt;46&gt;: add eax, edx  ; so eax = x * 5  (x * 4 + x)\n&lt;48&gt;: shl eax, 2    ; so eax = x * 20 (x * 5 * 4)\n&lt;51&gt;: add eax, edx  ; so eax = x * 21 (x * 5 * 4 + x)\n</code></pre>\n<p>PS. For the future please post code as a text. Much easier to copy than from the image.</p>\n</div>",
            "votes": "5",
            "user": "Paweł Łukasik",
            "time": "Apr 13, 2021 at 12:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Constructive",
                    "text": "<span class=\"comment-copy\">Thanks for the help!</span>",
                    "time": null
                }
            ]
        }
    ]
}