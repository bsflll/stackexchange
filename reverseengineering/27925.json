{
    "title": "Read and write to register with Frida",
    "link": "https://reverseengineering.stackexchange.com/questions/27925/read-and-write-to-register-with-frida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an instruction that looks like this in Ghidra:</p>\n<pre><code>       100168ff0 e9 13 00 32     orr        w9,wzr,#0x1f\n</code></pre>\n<p>Using <code>lldb</code> I can set a breakpoint on the instruction after this, read <code>w9</code> to confirm what value it is storing and modify it if needs be.</p>\n<p>I am trying to do something similar with Frida with the following script:</p>\n<pre><code>var t_module = 'testApp';\nvar loadAddress = Module.getBaseAddress(t_module);\nvar instructionOffset = ptr(0x168ff4);\n\nvar toAtt = loadAddress.add(instructionOffset);\n\nInterceptor.attach(toAtt, {\n    onEnter: function(args) {\n        console.log(\"[+] Module base address found at \" + loadAddress)\n        console.log(\"[+] Found instruction at \" + toAtt)\n        console.log(\"[+] Attempting to read w9: \" + this.context.w9)\n    }\n});\n</code></pre>\n<p>however trying to read <code>w9</code> just returns <code>undefined</code>.  It is defined <a href=\"https://frida.re/docs/javascript-api/#aarch64-enum-types\" rel=\"nofollow noreferrer\">here</a> so is not that Frida is calling it something else.</p>\n<p>I can confirm the right address is being reached using:</p>\n<pre><code>Memory.readByteArray(ptr(\"0x102ab4ff0\"),4)\n</code></pre>\n<p>where <code>0x102ab4ff0</code> is the address printed by the script, and comparing it to the instruction at the beginning from Ghidra.</p>\n<p>I'm not sure if I've misunderstood something about Frida or where I should attach. <a href=\"https://reverseengineering.stackexchange.com/questions/21701/dump-value-of-register-using-frida\">This</a> is the closest question I could find and that just says to use <code>this.context.eax</code>.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ios",
        "register",
        "frida",
        "arm64",
        "aarch64"
    ],
    "user": "Jon",
    "time": "Jul 1, 2021 at 11:48",
    "comments": [
        {
            "user": "James W.",
            "text": "<span class=\"comment-copy\">did you see any of your logs from <code>onEnter</code>? ( also, you don't need to <code>.add</code> a <code>ptr</code>, you can just add the offset using <code>.add(0x11)</code>. there is no <code>eax</code> in arm64 ) to answer your question please print <code>console.log(JSON.stringify(this.context))</code></span>",
            "time": null
        },
        {
            "user": "Jon",
            "text": "<span class=\"comment-copy\">Thank you very much @whoopdedoo! This suggestion helped me work out the problem.  The comment about eax was more to illustrate that that was what I understood to be the correct way to address a register as opposed to eax being used by arm64, I am a complete RE n00b though so it was a fair assumption to make.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The issue was that <code>w9</code> is a 32-bit register and I was using a 64 bit device.  By calling <code>this.context.x9</code> for the 64 bit register the Frida script worked perfectly.  Many thanks to @whoopdedoo, their suggestion to log <code>this.context</code> was what led me to search more about ARM registers and realise my mistake.</p>\n</div>",
            "votes": "1",
            "user": "Jon",
            "time": "Sep 10, 2021 at 15:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}