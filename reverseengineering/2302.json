{
    "title": "What algorithm does Metasm use to dissassemble binary code?",
    "link": "https://reverseengineering.stackexchange.com/questions/2302/what-algorithm-does-metasm-use-to-dissassemble-binary-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://metasm.cr0.org/\" rel=\"nofollow\">Metasm</a> is an assembly manipulation suite written in Ruby. It does provide a quite extensive API for disassembling and extracting a CFG representation from a binary program.</p>\n<p>I would like to know what algorithm is used to extract the CFG. Is this usual linear sweep or recursive traversal, or is another algorithm?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "481",
    "tags": [
        "disassembly"
    ],
    "user": "perror",
    "time": "Jun 21, 2013 at 14:08",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Have you looked at Metasm's source code?</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">This is what I am currently doing (but my Ruby is really not good). There is also a word about it in the README file but I would like to be sure how it is really done.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The strategy used by Metasm is referenced in the peer-reviewed literature on their website. Look at <a href=\"http://metasm.cr0.org/docs/sstic08-metasm-jcv.pdf\" rel=\"nofollow\">the article published in the Journal of Computer Virology in 2008</a>, in section 3.1. To quote them, </p>\n<blockquote>\n<p>Standard disassembly. </p>\n<p>Out of the box, the disassembly engine in Metasm\n  works this way :</p>\n<ol>\n<li>Disassemble the binary instruction at the instruction pointer.</li>\n<li>Analyse the effects of the instruction.</li>\n<li>Update the instruction pointer.</li>\n</ol>\n</blockquote>\n<p>That sounds more like recursive traversal to me, and less like linear sweep. The engine disassembles the next instruction based upon the effects of the previous instruction, which would allow the disassembly engine to follow branches in the logic, etc.</p>\n<p>Also, I have not examined their code in-depth, but in <code>metasm/disassemble.rb</code> it looks like they maintain some sort of autoanalysis queue for addresses to continue analyzing. Look for functions referencing backtracing - it definitely seems like recursive traversal.</p>\n</div>",
            "votes": "4",
            "user": "dingo_kinznerhook",
            "time": "Jun 20, 2013 at 21:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Hmmm, this is obviously NOT a recursive traversal. It looks more to a symbolic execution by constraints solving. But, this answer my question. Moreover, I didn't know this paper, so thanks a lot for your answer!</span>",
                    "time": null
                },
                {
                    "user": "dingo_kinznerhook",
                    "text": "<span class=\"comment-copy\">Is there a good place to read up on the difference? I'm not sure I understand the difference - are symbolic execution and recursive traversal mutually exclusive?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Well, recursive traversal only track partially the semantics of <code>call</code>/<code>ret</code> instructions, and will perform linear sweep the rest of the time. Symbolic execution will require to grab the semantics of each instruction and apply it from an known initial state (ie the memory at the beginning of the process). So, recursive traversal is what I call a <i>syntaxic-based disassembler</i> and the symbolic execution is a <i>semantics-based disassembler</i> (because it requires to know the semantics of all instructions.</span>",
                    "time": null
                }
            ]
        }
    ]
}