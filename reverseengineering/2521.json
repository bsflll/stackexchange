{
    "title": "Why are there (sometimes major) differences between java source code and its decompiled result?",
    "link": "https://reverseengineering.stackexchange.com/questions/2521/why-are-there-sometimes-major-differences-between-java-source-code-and-its-dec",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I compiled some [relatively complex] Java code into a .class file, then used jad to decompile it back into java. Of course, the code was obfuscated, which was to be expected. However, given that I had the original code, I thought I'd be able to look through the decompiled code fairly easily. However, I noticed differences in the code, such as where certain variables were defined (including differences of scope).</p>\n<p>Is there any main reason for this? I imagine it's one of those things that just happen in decompilation of code, but I'm more curious about what factors cause the change (e.g. complexity of code, whether it refers to other files, etc.).</p>\n<p>Could someone provide me with a good explanation on what factors cause the differences in the code before and after?</p>\n<h3>Edit</h3>\n<p>Technically, the .class file is pulled from a jar. I extracted the contents and used the .class file in there.</p>\n<p>As far as which obfuscator I used, I used the Retroguard obfuscator with the following options (I'm currently just exploring obfuscation and finding out what each thing does to the final result):</p>\n<pre><code>.option Application\n.option Applet\n.option Repackage\n.option Annotations\n.option MapClassString\n.attribute LineNumberTable\n.attribute EnclosingMethod\n.attribute Deprecated\n</code></pre>\n<p>Documentation for the script can be found on <a href=\"http://www.retrologic.com/rg-docs-scripting.html\" rel=\"nofollow noreferrer\">their site</a>. It's a little unorganized, but you should be able to find adequate explanations in there. It's also noteworthy that I stripped the generics and the local variable table.</p>\n<p>I have now also set up a way (inspired by the creators of the Minecraft Coder Pack) to rename the sources using data from a file (or files), which is passed to a dictionary of lists for packages, classes, methods, and fields.</p>\n<pre><code># snippet from the MCP version (mine's slightly different) (all in Python):\nsrg_types = {'PK:': ['obf_name', 'deobf_name'],\n            'CL:': ['obf_name', 'deobf_name'],\n            'FD:': ['obf_name', 'deobf_name'],\n            'MD:': ['obf_name', 'obf_desc', 'deobf_name', 'deobf_desc']}\nparsed_dict = {'PK': [],\n               'CL': [],\n               'FD': [],\n               'MD': []}\n</code></pre>\n<p>A line is then parsed from the file, and it is passed into the <code>parsed_dict</code> and then used to rename everything (back and forth). Implemented after compiling than decompiling the first time (after I noticd differences).</p>\n</div>",
    "votes": "7",
    "answers": 3,
    "views": "5k",
    "tags": [
        "decompilation",
        "java"
    ],
    "user": "JMcAfreak",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">By the way, which obfuscator did you use? Doesn't sound like a very good obfuscators. Also, Jad is pretty old. I'd recommend using Procyon instead for unobfuscated code.</span>",
            "time": null
        },
        {
            "user": "JMcAfreak",
            "text": "<span class=\"comment-copy\">@Antimony Edited the question with the answer to that. As a side note, I'm not trying to completely obfuscate everything right now. I'm throwing things at the wall and seeing what sticks (yes, very disorganized, but also fun).</span>",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "<span class=\"comment-copy\">If you're trying to decompile obfuscated classes, you should be using Krakatau. It's specifically designed to handle obfuscated classes and can often deal with stuff that no other decompiler can. <a href=\"https://github.com/Storyyeller/Krakatau\" rel=\"nofollow noreferrer\">github.com/Storyyeller/Krakatau</a></span>",
            "time": null
        },
        {
            "user": "JMcAfreak",
            "text": "<span class=\"comment-copy\">@Antimony Sweet. Thanks for the suggestion. I'll look into that.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java compiles to bytecode that is run in the JVM, and stored in the .class files. This bytecode is not a 1:1 representation of the original code, and includes several compiler-implemented optimizations. Information is lost when these optimizations are performed, and due to that lost information decompilers can't reconstruct the code back into exactly what it was.</p>\n</div>",
            "votes": "11",
            "user": "Ditmar Wendt",
            "time": "Jul 23, 2013 at 0:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To add on to what Ditmar said, the big problem is probably your obfuscation. Normal Java bytecode is actually surprisingly close to the original source, at least from the perspective of C or C++ (or even Scala). You'll always lose some information, but unobfuscated Java can be decompiled to something close to the original, especially if you compile with debug information.</p>\n<p>All that goes out the window with obfuscation however, as obfuscators deliberately try to manipulate the structure of the code. When decompiling obfuscated code, you should be more amazed when you find similarities at all.</p>\n</div>",
            "votes": "6",
            "user": "Antimony",
            "time": "Jul 23, 2013 at 2:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ditmar Wendt",
                    "text": "<span class=\"comment-copy\">Yeah, according to the poster's edit this is certainly a question sparked by obfuscation. Good call on predicting that. Readers should note that these answers apply to .NET MSIL languages(like C#) in a very similar fashion in regards to obfuscation/their close to 1:1 bytecode.</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@Ditmar Java's a bit closer to the bytecode then with CIL since the bytecode was only designed for a single language. But you're right that they're very similar.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your choice of decompiler can greatly affect the outcome. You should try either JODE, or Fernflower (which I believe goes by Androchef).</p>\n<p>Before decompiling, it might be a good idea to do some simple deobfuscation yourself. For example, you could try</p>\n<ul>\n<li><p>Remapping of Java keywords that have been used as class/method/variable names to legal Java identifiers. This task is very easy to do by using the Remapping adapters provided by the ASM library, <a href=\"http://asm.ow2.org/asm40/javadoc/user/org/objectweb/asm/commons/RemappingClassAdapter.html\" rel=\"nofollow\">http://asm.ow2.org/asm40/javadoc/user/org/objectweb/asm/commons/RemappingClassAdapter.html</a></p></li>\n<li><p>Some simple reorganization of blocks. Many obfuscators will stick gotos into awkward places that would be \"within a single expression\" in the Java source code, e.g. pushing something to the stack, then jumping, then storing it to a local variable in the destination is perfectly viable in bytecode, but understanding that the bytecode is simply doing var = value might give some decompilers a hard time.</p></li>\n</ul>\n</div>",
            "votes": "4",
            "user": "Nessie",
            "time": "Aug 29, 2013 at 7:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Fernflower isn't very good, and I don't think it's even publicly available any more. Also, Krakatau will automatically handle the second deobfuscation you mentioned as well as many others, though the results aren't as good if the code is already unobfuscated.</span>",
                    "time": null
                }
            ]
        }
    ]
}