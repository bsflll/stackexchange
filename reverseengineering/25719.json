{
    "title": "How to restrict angr to printable characters",
    "link": "https://reverseengineering.stackexchange.com/questions/25719/how-to-restrict-angr-to-printable-characters",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a binary that scanfs and then does some checks and returns either FAIL or SUCCESS that has SUCCESS for multiple inputs. Although only one of the inputs has only printable characters. How do I restrict angr to work with only printable characters entered into the scanf?</p>\n<pre><code>import angr\n\ndef main():\n    proj = angr.Project('a.out')\n    init_state = proj.factory.entry_state()\n    simulation = proj.factory.simgr(init_state)\n    simulation.explore(find=lambda s: b\"SUCCESS\\n\" in s.posix.dumps(1))\n    \n    for solution in simulation.found:\n        print(solution.posix.dumps(0), solution.posix.dumps(1))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>This gives me an output containing a lot of unprintable \\xDD where DD is a hex number. Can I restrict angr to use only printable characters when exploring and how; or how do I prevent angr from stopping after it finds one solution to get to the SUCCESS message. Currently although there are multiple solutions it finds one and only ONE.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c",
        "angr"
    ],
    "user": "user282909",
    "time": "Aug 22, 2020 at 6:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Providing you know the length of the flag (obtain for example from RE) you can modify your code in the following way:</p>\n<pre><code>import claripy\nflag_chars = [claripy.BVS('flag_%d' % i, 8) for i in range(15)]\nflag = claripy.Concat(*flag_chars+[claripy.BVV(b'\\n')])\n</code></pre>\n<p>That will create an array with 15 (in this example) bit vectors of the size of 8-bits. And on the following line we will concatenate them (+ new line value) to obtain one value that we can operate on.</p>\n<p>Next, we pass the flag to create our state.</p>\n<pre><code> init_state = proj.factory.entry_state(stdin=flag)\n</code></pre>\n<p>Having the init state, we can restrict the flag:</p>\n<pre><code> for k in flag_chars:\n     init_state.solver.add(k &lt;= 0x7f)\n     init_state.solver.add(k &gt;= 0x20)\n</code></pre>\n<p>The rest stays the same.</p>\n<p>Full program:</p>\n<pre><code>import angr\nimport claripy\n\ndef main():\n    proj = angr.Project('a.out')\n    flag_chars = [claripy.BVS('flag_%d' % i, 8) for i in range(15)]\n    flag = claripy.Concat(*flag_chars+[claripy.BVV(b'\\n')])\n\n    init_state = proj.factory.entry_state(stdin=flag)\n\n    for k in flag_chars:\n        init_state.solver.add(k &lt;= 0x7f)\n        init_state.solver.add(k &gt;= 0x20)\n\n    simulation = proj.factory.simgr(init_state)\n    simulation.explore(find=lambda s: b\"SUCCESS\\n\" in s.posix.dumps(1))\n\n    for solution in simulation.found:\n        print(solution.posix.dumps(0), solution.posix.dumps(1))\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Aug 24, 2020 at 21:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}