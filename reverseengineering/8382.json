{
    "title": "Initializing a struct in win32 assembly programming using MASM",
    "link": "https://reverseengineering.stackexchange.com/questions/8382/initializing-a-struct-in-win32-assembly-programming-using-masm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to create a demo program demonstrating struct(s) in MASM ,</p>\n<p>I've written a code like this :</p>\n<pre><code>struct1 struct\nfirst db ?\nsecond dw ?\nstruct1 EndS\n\n.386\n.model flat,stdcall\noption casemap:none\n\ninclude \\masm32\\include\\windows.inc ; holds predifned structures\n\ninclude \\masm32\\include\\kernel32.inc \ninclude \\masm32\\include\\user32.inc\n\nincludelib \\masm32\\lib\\kernel32.lib\nincludelib \\masm32\\lib\\user32.lib\n\n.data\nMessageTitle  db \"The title\",0\nMessageText   db \"The first program which shows simple messagebox\",0\n\n\n.code\nstart:\n\nInitializedstructure struct1 &lt;'A',1024&gt;\n;invoke MessageBox, NULL, addr MessageText, addr MessageTitle, MB_OK\nmov eax, struct1.first \n;invoke ExitProcess, NULL\nend start\n</code></pre>\n<p>but when I disassembled the program I found some kind of instructions that\n not sensible for initializing the structure of the program :</p>\n<pre><code>.text:00401000 start:\n.text:00401000                 inc     ecx\n.text:00401001                 add     [eax+edi*4], al\n.text:00401001 ; ---------------------------------------------------------------------------\n.text:00401004                 dd 7Fh dup(0)\n.text:00401200                 dd 380h dup(?)\n.text:00401200 _text           ends\n</code></pre>\n<p>Why MASM assembled the code like this ? I think I've made some mistake in the code,haven't I? I think there's no well-explained document about it ...</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "disassemblers",
        "struct"
    ],
    "user": "user3679015",
    "time": "Mar 4, 2015 at 19:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to have <code>Initializedstructure struct1 &lt;'A',1024&gt;</code> in your <code>.data</code> segment, not in your <code>.code</code> segment.</p>\n</div>",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 4, 2015 at 19:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3679015",
                    "text": "<span class=\"comment-copy\">I did what you said and I used mov eax , struct1.first or struct1.second but in the disassembled code they didn't reference correctly.sth like : mov eax, 0 and mov ebx, 1 , could you say what's the problem ?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Masm uses 0 and 1 as the address constants is: you told it to do so because you told it to use the offset in the structure, NOT the memory location. And indeed, the field \"first\" sits at offset 0 and occupies a byte. This makes the offset for \"second\" equal to 1.\nYou probably wanted to access the <strong>instantiation</strong> of your structure, which you placed at the address called Initializedstructure. In this case, you would have to use</p>\n<pre><code>mov eax, [Initializedstructure].First\n</code></pre>\n<p>to access the field \"first\" of that Initializedstructure.\nAnd, by the way, should you try to access such structures using vector instructions (SSE, AVX), Masm frequently looses it altogether and you need to additionally specify the operand size, such as</p>\n<pre><code>vmovdqu xmm0, xmmword ptr [Initializedstructure].Some128bitField\n</code></pre>\n<p>Hope it helps.</p>\n</div>",
            "votes": "0",
            "user": "Stefan Carter",
            "time": "May 23, 2017 at 10:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}