{
    "title": "How XOR works in my code?",
    "link": "https://reverseengineering.stackexchange.com/questions/15156/how-xor-works-in-my-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this assembly code:</p>\n<pre><code>XOR DWORD PTR DS:[ECX+EAX],1234567\n</code></pre>\n<p>And what it does is just xoring the first 4 bytes of EAX with 1234567.\nSo if the first 4 bytes are :</p>\n<pre><code>31 32 31 32\n</code></pre>\n<p>After xor they become:</p>\n<pre><code>56 77 12 33\n</code></pre>\n<p>I tried many xor Calculators to understand how it was xored with no luck\nany help?</p>\n</div>",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "encryption",
        "xor"
    ],
    "user": "Xozu",
    "time": "Apr 13, 2017 at 9:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What may be confusing you is the fact that memory on x86 processors uses <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\"><em>little-endian layout</em></a>. The four bytes <code>31 32 31 32</code>, when interpreted as a 4-byte integer (dword), become <code>0x32313231</code>. If we perform xor operation  on it:</p>\n<pre><code>0x32313231^0x1234567=0x33127756\n</code></pre>\n<p>And putting  0x33127756 back into little-endian memory order we get:</p>\n<pre><code>56 77 12 33\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 13, 2017 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">Now i understand it much better thank you!</span>",
                    "time": null
                },
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">Then you should accept the answer...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The command you refer to is a good example for CISC architectures:</p>\n<pre><code>XOR DWORD PTR DS:[ECX+EAX],1234567\n</code></pre>\n<p>This first add the values of <code>ECX</code> and <code>EAX</code>, then interprets the sum as a memory address and xors <strong>the value at that location with</strong> <code>1234567</code></p>\n<p>Also, please note that the <code>EAX</code> register is always 4-byte sized. For less bytes, you may use <code>ax</code>, <code>al</code> or <code>ah</code> and for higher (8-byte) values you may use <code>RAX</code> (on 64 bit systems). Please note these names are referring to sections of the same register.</p>\n</div>",
            "votes": "1",
            "user": "Nordwald",
            "time": "Apr 13, 2017 at 8:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}