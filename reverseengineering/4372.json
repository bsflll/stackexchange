{
    "title": "After a CALL instruction, jumping to RETN",
    "link": "https://reverseengineering.stackexchange.com/questions/4372/after-a-call-instruction-jumping-to-retn",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to analyze a piece of code, I'm confused about the following line:</p>\n<pre><code>CALL  fct.00402589\n</code></pre>\n<p>Then after that, I come across a block beginning with RETN.(See below)<br/>Here are a couple of lines of that code-block:</p>\n<pre><code>RETN\nNOP\nPUSH EBP\nMOV EBP,ESP\nLEA ESP, DWORD PTR SS:[ESP-0X2D0]\nPUSH ESP\nCALL ntdll.RtCaptureContext\n......\n......\nINT 3 \nNOP\n</code></pre>\n<p>So as I said, after the call I am in the line RETN. But when I want to go further(click on the \"step over\"-button of ollydbg) then it jumps back to the next line after the call-instruction.\nIn the line before the last instruction \"NOP\", there is the instruction INT 3.</p>\n<p>I have figured out that in some cases, especially as anti-debugging technique, the program inserts the opcode 0xCC of INT 3 to confuse the debugger. The debugger thinks that it is a breakpoint because normally, the debugger uses OxCC to set breakpoints.</p>\n<p>So, I change the debugging options of ollydbg (Options -&gt; Debugging Options -&gt; Exceptions and then click the INT 3 breaks-Box). From now on, the debugger does not trap the exception, it passes the exception to the program.</p>\n<p>When I start the program again, and come to the call-instruction, then the following appears(again i copy some lines):</p>\n<pre><code>JMP DWORD PTR DS: [&lt;%crtdll._GetMainArgs&gt;] \nNOP\nNOP\nADD BYTE PTR DS:[EAX], AL\nADD BYTE PTR DS:[EAX], AL\nJMP DWORD PTR DS: [&lt;%crtdll._strcmpi&gt;]\nNOP\nNOP\nADD BYTE PTR DS:[EAX], AL\nADD BYTE PTR DS:[EAX], AL\nJMP DWORD PTR DS: [&lt;%crtdll._atoi&gt;]\nNOP\nNOP\nADD BYTE PTR DS:[EAX], AL\nADD BYTE PTR DS:[EAX], AL\nJMP DWORD PTR DS: [&lt;%crtdll._exit&gt;]\nNOP\nNOP\nADD BYTE PTR DS:[EAX], AL\nADD BYTE PTR DS:[EAX], AL\nJMP DWORD PTR DS: [&lt;%crtdll._memcpy&gt;]\nNOP\nNOP\n----\n</code></pre>\n<p>And so on, has anyone a clue? Or can someone explain me what is going on here?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "user3097712",
    "time": "May 19, 2014 at 4:50",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Where is the connection between the <code>int3</code>, <code>call</code> and <code>retn</code>? The <code>call</code> and <code>retn</code> just about anybody can explain you, but the question is unclear.</span>",
            "time": null
        },
        {
            "user": "user3097712",
            "text": "<span class=\"comment-copy\">ok, then forget INT 3. What does RETN in combination with a CALL instruction mean ?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>int3</code> that you see in your disassembly exists for the purposes of debugging, because it is hit when there is a bug in the executing code.  It is intended to transfer control to a debugger in order to present the user (i.e. developer) with a more meaningful information about the location and possibly the cause of the problem.  In the absence of a debugger, it will force termination of the program to occur, which is the safest possible action.  For example, in the case of heap corruption, continued execution could result in exploitation and execution of arbitrary code.</p>\n<p>There are other reasons for <code>int3</code> instructions to appear - they can be unused padding between routines, particular for hot-patch-aware functions, among other things.  The presence of <code>int3</code> is not always an indication of anti-debugging techniques.  In fact, it could be said that it is more likely to be not an anti-debugging technique at all.</p>\n<p>edit: after your comment clarified your question a bit better - what you're asking about is not a jump to a return, but a jump to a routine that returns.  That's quite different.</p>\n<p>So, a call to a routine leaves the return address on the stack.  That return address is the line immediately after the call instruction.  When a routine executes the ret instruction, the code resumes after the call.  The jump instruction is merely a transfer of control to a routine which will return, allowing the code to continue executing.</p>\n<p>A transfer of control to an exit() routine, irrespective of the name, does what it suggests: it causes the process to terminate.  If you are tracing through code and you hit that, then the process is done.  If you think that it should do more, then you need to watch the code that executed prior to that transfer of control.  Perhaps the program expects particular command-line options to be set, in order to do any work.</p>\n</div>",
            "votes": "2",
            "user": "peter ferrie",
            "time": "May 20, 2014 at 15:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">ok, then back to JMP DWORD PTR DS: [&lt;%crtdll._GetMainArgs&gt;]. After the call instruction, I come to that. When I go further, the debugger switches from that to the back to the first line after the CALL instruction. I look up the functions. They are all from the C Runtime Library. So, when I step further, after a while I come to the \"exit\" function and that means that the process is finished. Is there a trick to pass that exit function to anaylze the other part of the code?</span>",
                    "time": null
                }
            ]
        }
    ]
}