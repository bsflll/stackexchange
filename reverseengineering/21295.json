{
    "title": "Set a breakpoint on GDB entry point for stripped PIE binaries without disabling ASLR",
    "link": "https://reverseengineering.stackexchange.com/questions/21295/reversing-elf-64-bit-lsb-pie-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Given a position-independent, statically-linked, stripped binary, there does not appear to be a way in GDB to set a breakpoint at the entry point without disabling ASLR.</p>\n<ul>\n<li><code>break start</code> and similar functions do not work, because there is no symbolic information</li>\n<li><code>set stop-on-solib-events 1</code> does not work as the binary is not dynamically linked</li>\n<li><code>break *0xdeadbeef</code> for the entry point does not work, as the entry point is unresolved until the binary starts</li>\n<li><code>catch load</code> does not work, as it does not load any libraries</li>\n<li><code>start</code> does not work, as <code>main</code> is not defined and no libraries are loaded</li>\n</ul>\n<p>Without patching the binary, what mechanism can I use to break at the first instruction executed?</p>\n<h2>Possible?</h2>\n<p>Since a now-deleted response to the question said that a PIE statically-linked binary is impossible, a trivial example is the linker itself.</p>\n<p>It is statically linked.</p>\n<pre><code>$ ldd /lib/x86_64-linux-gnu/ld-2.19.so\n    statically linked\n</code></pre>\n<p>It is executable.</p>\n<pre><code>$ strace /lib/x86_64-linux-gnu/ld-2.19.so\nexecve(\"/lib/x86_64-linux-gnu/ld-2.19.so\", [\"/lib/x86_64-linux-gnu/ld-2.19.so\"], [/* 96 vars */]) = 0\nbrk(0)                                  = 0x7ff787b3d000\nwritev(2, [{\"Usage: ld.so [OPTION]... EXECUTA\"..., 1373}], 1Usage: ld.so [OPTION]... EXECUTABLE-FILE [ARGS-FOR-PROGRAM...]\n</code></pre>\n<p>It is position-independent.</p>\n<pre><code>$ readelf -h /lib/x86_64-linux-gnu/ld-2.19.so | grep DYN\n  Type:                              DYN (Shared object file)\n</code></pre>\n<h2>Solutions</h2>\n<p>It looks like this can be done with Python by utilizing some of the events made available: <a href=\"http://asciinema.org/a/19078\" rel=\"noreferrer\">http://asciinema.org/a/19078</a></p>\n<p>However, I'd like a native-GDB solution.</p>\n<p>A successful solution will break at <code>_start</code> in ld.so when executed directly without disabling ASLR.  It should look something like this:</p>\n<pre><code>sh $ strip -s /lib/x86_64-linux-gnu/ld-2.19.so -o ld.so\nsh $ gdb ./ld.so\n(gdb) $ set disable-randomization off\n(gdb) $ &lt;your magic commands&gt;\n(gdb) $ x/i $pc\n=&gt; 0x7f9ba515d2d0:     mov    rdi,rsp\n(gdb) $ info proc map\nprocess 10432\nMapped address spaces:\n\n        Start Addr           End Addr       Size     Offset objfile\n    0x7f9ba515c000     0x7f9ba517f000    0x23000        0x0 /lib/x86_64-linux-gnu/ld-2.19.so \n    0x7f9ba537e000     0x7f9ba5380000     0x2000    0x22000 /lib/x86_64- linux-gnu/ld-2.19.so\n    0x7f9ba5380000     0x7f9ba5381000     0x1000        0x0 \n    0x7fffc34c7000     0x7fffc38ca000   0x403000        0x0 [stack]\n    0x7fffc398b000     0x7fffc398d000     0x2000        0x0 [vdso]\n0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]\n</code></pre>\n</div>",
    "votes": "20",
    "answers": 4,
    "views": "28k",
    "tags": [
        "debugging",
        "gdb",
        "elf"
    ],
    "user": "Hamza Ince",
    "time": "Aug 3, 2015 at 20:22",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Did you try to set a breakpoint in the GOT section ? For example, on <code>_libc_start_main()</code>.</span>",
            "time": null
        },
        {
            "user": "Zach Riggle",
            "text": "<span class=\"comment-copy\">\"position-independent, statically-linked\" -- There is no GOT.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">My bad... I read too quickly. Sorry.</span>",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "<span class=\"comment-copy\">related: <a href=\"https://stackoverflow.com/questions/10483544/stopping-at-the-first-machine-code-instruction-in-gdb\" title=\"stopping at the first machine code instruction in gdb\">stackoverflow.com/questions/10483544/…</a></span>",
            "time": null
        },
        {
            "user": "nostromo",
            "text": "<span class=\"comment-copy\">related: <a href=\"https://stackoverflow.com/questions/22488499/how-to-set-earliest-possible-breakpoint\" title=\"how to set earliest possible breakpoint\">stackoverflow.com/questions/22488499/…</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>UPDATE: GDB 8.1 has a <code>starti</code> command, as mentioned below by /u/ruslan</p>\n<p>Setting a breakpoint on an unmapped address before starting the target process does this, effectively.  It's not correct functionality, but rather a side-effect of the failure to set the breakpoint.</p>\n<pre><code>(gdb) break *0\nBreakpoint 1 at 0x0\n(gdb) r\nStarting program: /home/user/ld.so \nError in re-setting breakpoint 1: Warning:\nCannot insert breakpoint 1.\nCannot access memory at address 0x0\n\nWarning:\nCannot insert breakpoint 1.\nCannot access memory at address 0x0\n\n(gdb) x/i $pc\n=&gt; 0x7faae3a25cd0:      mov    rdi,rsp\n</code></pre>\n</div>",
            "votes": "24",
            "user": "Zach Riggle",
            "time": "Feb 6, 2018 at 22:45",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Starting with GDB 8.1, there's a special command for this: <code>starti</code>. Example GDB session:</p>\n<pre><code>$ gdb /bin/true\nReading symbols from /bin/true...(no debugging symbols found)...done.\n(gdb) starti\nStarting program: /bin/true \n\nProgram stopped.\n0xf7fdd800 in _start () from /lib/ld-linux.so.2\n(gdb) x/5i $pc\n=&gt; 0xf7fdd800 &lt;_start&gt;: mov    eax,esp\n   0xf7fdd802 &lt;_start+2&gt;:       call   0xf7fe2160 &lt;_dl_start&gt;\n   0xf7fdd807 &lt;_dl_start_user&gt;: mov    edi,eax\n   0xf7fdd809 &lt;_dl_start_user+2&gt;:       call   0xf7fdd7f0\n   0xf7fdd80e &lt;_dl_start_user+7&gt;:       add    ebx,0x1f7e6\n</code></pre>\n</div>",
            "votes": "12",
            "user": "Ruslan",
            "time": "Feb 2, 2018 at 18:26",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can define gdb function to break on first argument of libc_star_main. The first si/ni is to load libc itself. Put it in your .gdbinit file.</p>\n<pre><code>define bmain\n    si\n    ni\n    b __libc_start_main\n    c\n    b *($rdi)\n    c\nend\n</code></pre>\n</div>",
            "votes": "3",
            "user": "p0tr3c",
            "time": "Feb 8, 2020 at 8:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just stumbled across this and thought I would add a bit.</p>\n<p>If you want to stop at the entry point of a stripped, dynamically-linked program, I recommend the following procedure.</p>\n<ol>\n<li>Start GDB with the file.</li>\n<li>Start the program with <code>starti</code> so that the loader maps it into memory.\n(By default GDB turns off ASLR for your program, but this method will work either way.)</li>\n<li>Use <code>info file</code> to get the address of the entry point.  This will show virtual addresses <em>after start</em> (that's why we used <code>starti</code> first).</li>\n<li>Find the entry point and set a breakpoint at that address.</li>\n<li>Run <code>cont</code> to get to the breakpoint.</li>\n</ol>\n<pre><code>$ gdb /usr/bin/ls\n(gdb) starti\n(gdb) info file\n...\nLocal exec file:\n    `/usr/bin/ls', file type elf64-x86-64.\n    Entry point: 0x55555555a7d0\n...\n(gdb) b *0x55555555a7d0\n(gdb) cont\n...\nBreakpoint 1, 0x000055555555a7d0 in ?? ()\n(gdb) x/i $rip\n=&gt; 0x55555555a7d0:  endbr64 \n</code></pre>\n<p>Now, if you want <code>main</code> on Linux, step ahead through the disassembly until you find out how <code>rdi</code> is being set (assuming the usual <code>crt0.o</code> has been linked to start the C runtime).</p>\n<pre><code>(gdb) \n   0x55555555a7f1:  lea    rdi,[rip+0xffffffffffffe5f8]        # 0x555555558df0\n</code></pre>\n<p>Ah ha!  We can find <code>main</code> (even without any symbols) at 0x555555558df0.</p>\n<pre><code>(gdb) b *0x555555558df0\n(gdb) cont\n</code></pre>\n<p>Now you are at <code>main</code>.\nLeaving this here in case someone else comes along with the same question.</p>\n</div>",
            "votes": "0",
            "user": "Stacy J",
            "time": "Mar 8, 2021 at 17:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}