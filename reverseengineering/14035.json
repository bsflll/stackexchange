{
    "title": "Am I interpreting the instructions correctly or not. (ollydbg + executable)",
    "link": "https://reverseengineering.stackexchange.com/questions/14035/am-i-interpreting-the-instructions-correctly-or-not-ollydbg-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm fairly new in reverse engineering, but I do comprehend assembly code. However, I'm facing a problem. </p>\n<p>It is about an old Rockstar game, \"Bully: The scholarship edition\" (released 2007 - aka \"Canis Canem Edit\"). It however has issues to perform on Windows 10 anniversary edition OS that I have at this moment. That is expected since it's an old software. To resolve that, I tried many online solutions (compat mode, setting CPU affinity, ect), which didn't helped much.</p>\n<p>So I decided to look into the code by using OllyDbg. The cause of the crash is pretty constant; an access violation. However, it is purely random. I am able to play a hour without problems, or experiencing a crash within 10 minutes. The program apparently tries to move data from address 0 to a register, which isn't allowed. The exception is always thrown at the same place, where the pointer call occurs.</p>\n<p>Here is a screenshot from OllyDbg when debugging the program. (Sorry for small resolution, it's an old game, hence the resolution is set at 1280x960)</p>\n<p><a href=\"https://i.sstatic.net/qZtHt.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/qZtHt.png\"/></a></p>\n<p>The exception is thrown at address <code>0088729D</code> which has this instruction</p>\n<pre><code>MOV ECX, DWORD PTR DS:[EAX]\n</code></pre>\n<p>The EAX register is apparently empty (you can see that in the image). So I checked when information is moved to that register. It happens at the address (I've selected the line and added comment \"<em>moves empty address</em>\") <code>00887281</code>. It contains the following instruction:</p>\n<pre><code>MOV EAX, DWORD PTR SS:[ESP+8]\n</code></pre>\n<p>As far I know, SS is the stack segment register and ESP extended stack pointer. The ESP register contains address <code>0019F3A0</code>. With offset 8, the address is now <code>0019F3A8</code> (see selection in the right bottom box). It contains <code>00002000</code>.</p>\n<p>I'm now clueless after this point. I don't understand why the address during the call is zero and not that value. I expect that the EAX register would contain <code>00002000</code> after the instruction. However, this is not the case this time. The EAX register contains <code>00000000</code>.</p>\n<p>I believe that I'm interpreting this incorrectly. Can someone point me where my misinterpretation occurs or inform me how to check this problem more correctly?</p>\n<p>Thank you.</p>\n<p><em>PS: the reason for this is because I've played bully in my childhood and want to play again. Apparently, there are other users with the same problem, even after attempting the known solutions on the web. Perhaps if I find a solid solution for this, that I would be able to help others too.</em></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "196",
    "tags": [
        "ollydbg",
        "debugging"
    ],
    "user": "KarelG",
    "time": "Nov 24, 2016 at 10:03",
    "comments": [
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">From what I can tell, [ESP+8] is an argument to the function you are currently in. You should check higher up your callstack and see what's going on there.</span>",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "<span class=\"comment-copy\">There is a whole lot of context missing. Without knowing the nature of the routine and the program structure, it is really hard to give any advice. But you could try the crowbar approach: Insert a jump before the instruction which crashes, test eax and return (or skip the crashing instructions). Else, you can execute the 'normal' code. You should be able to find some unused bytes for that. Btw: 'call eax' hints a jumptable (switch-statement)</span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">It hints a virtual method call (vtable), jump tables are pretty much always implemented as jmp dword ptr [reg<i>sizeof(void</i>)+tableAddress]</span>",
            "time": null
        },
        {
            "user": "KarelG",
            "text": "<span class=\"comment-copy\">@mrexodia Can you elaborate that? (Or put a link with info about that). Your comment has confused me. I know what virtual methods are but your conclusion is strange. I didn't interpret these instructions as a possible virtual method. Gotcha try the crowbar method to dig it further.</span>",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "<span class=\"comment-copy\">@KarelG it uses ECX (generally the <code>this</code> pointer) and calls an from there somewhere. In normal code any <code>call eax</code> is usually a function pointer or virtual function call, not a switch table.</span>",
            "time": null
        }
    ],
    "answers_data": []
}