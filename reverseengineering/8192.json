{
    "title": "Correcting subroutine offset in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/8192/correcting-subroutine-offset-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Upon performing a disassembly of a binary, I noticed that many of the subroutines have the wrong offset for the address. It seems that the byte preceding the 2 byte address is wrong. For example, in the screenshot below, the disassembly indicates the functions should be at 0xA5C1E and 0xA5BCA. I've double checked the raw hex dump and confirmed that there is an \"A\" byte before the 2 byte address. It's also interesting to note that addresses which start with \"A\" are impossible in this binary since it's only 0x7FFFF in length. Based on experience from other binaries, I know the true addresses for these functions should be 0x25C1E and 0x25BCA, respectively.  I can also confirm that I have subroutines which start at these locations.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.sstatic.net/nIPuj.png\"/></p>\n<p>I've disassembled other binaries (different application, same processor) and this problem didn't appear. However, every binary I've disassembled from this application shows this problem.</p>\n<p>Is there a way to correct this in IDA Pro?  Does it have anything to do with my DPP register values?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "r00kie",
    "time": "Feb 10, 2015 at 4:29",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">I don't even know which processor or hardware this is, but 2 things come to mind. a) Your binary is intended to be loaded at 0x80000, but you're loading it to 0x00000. b) The hardware doesn't decode more than 19 address bits, so 0xa5c1e maps to 0x25c1e on the address bus, and the software uses address bit 19 as a kind of flag.</span>",
            "time": null
        },
        {
            "user": "r00kie",
            "text": "<span class=\"comment-copy\">Danke sch√∂n! You were exactly right about the loading offset! It took some fiddling around (and some searching on Google), but I think I figured it out. Do you want to post the same thing again as an \"answer\" so I can answer it appropriately?</span>",
            "time": null
        },
        {
            "user": "Peter Andersson",
            "text": "<span class=\"comment-copy\">@GuntramBlohm The architecture is C166. It's an old Siemens/ST architecture that later became Infineon and is now used by Intel in their ultra low cost mobile solutions and Infineon in their embedded systems and industrial control systems. It's 16 bit and segmented. What are you working with r00kie if I may ask?</span>",
            "time": null
        },
        {
            "user": "r00kie",
            "text": "<span class=\"comment-copy\">Impressive with such a small screenshot!  It's an automotive ecu.  :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your broken addresses seem to be exactly 0x80000 plus the intended address.</p>\n<p>There's two possibilities:</p>\n<ul>\n<li>Your binary is intended to be loaded at <code>0x80000</code>, but you're loading it to <code>0x00000</code>.</li>\n<li>The hardware doesn't decode more than 19 address bits, so <code>0xa5c1e</code> maps to <code>0x25c1e</code> on the address bus, and the software uses address bit 19 as a kind of flag.</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Feb 10, 2015 at 11:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}