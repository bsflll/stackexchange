{
    "title": "How to know what does the function do?",
    "link": "https://reverseengineering.stackexchange.com/questions/21464/how-to-know-what-does-the-function-do",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've made a simple c++ program. In the ollydbg i searching for the string which is my name, there are 2-3 call functions near the string location but i don't know what those function do.</p>\n<p>My question is is there a way to know what those function do? is it print function or maybe other function?</p>\n<p><a href=\"https://i.sstatic.net/igDu7.png\" rel=\"nofollow noreferrer\"><img alt=\"the program\" src=\"https://i.sstatic.net/igDu7.png\"/></a></p>\n</div>",
    "votes": "-1",
    "answers": 3,
    "views": "758",
    "tags": [
        "ollydbg",
        "x64dbg"
    ],
    "user": "Frd",
    "time": "Jun 11, 2019 at 15:34",
    "comments": [
        {
            "user": "bart1e",
            "text": "<span class=\"comment-copy\">Could you upload your program and the resulting executable?</span>",
            "time": null
        },
        {
            "user": "Frd",
            "text": "<span class=\"comment-copy\">added:).........</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>i searching for the string</p>\n</blockquote>\n<p>Presumably \"<code>fffaaarrriiiddd</code>.\" So we find ourselves at <code>0x401538</code>, where the string is referenced.</p>\n<blockquote>\n<p>there are 2-3 call functions near the string location...\n  is is there a way to know what those function do? is it print function\n  or maybe other function?</p>\n</blockquote>\n<p>The first call after <code>0x401538</code>, which is at <code>0x40154b</code> and calls to <code>0x46ec30</code> is the print function. We know this because it gets the string as an argument (see <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-software-conventions?view=vs-2019\" rel=\"nofollow noreferrer\">x64 calling convention</a>) and because the call is followed by the struct accesses, as we would expect.</p>\n<p>The second call after <code>0x401538</code> is correctly identified as a call to <code>getch</code> (or possibly a wrapper function that <code>jmp</code>'s to the imported DLL function).</p>\n<p>The call before <code>0x401538</code>, which is at <code>0x401538</code> and calls to <code>0x40e760</code>, is less obvious. Because it is part of <code>main</code> but precedes the print function, which is the first call we expect based on the known functionality of <code>main</code>, I suspect it is just some sort of convention with which I am unfamiliar. Look at the disassembly at <code>0x40e760</code>. What does that function do? Try compiling a binary with a no/different functionality. Is there always a call in <code>main</code> after the stack setup? Or are there always two calls for <code>cout</code>?</p>\n</div>",
            "votes": "0",
            "user": "devtty1er",
            "time": "Jun 11, 2019 at 16:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Frd",
                    "text": "<span class=\"comment-copy\">So we can assume if there is a string at above the call then the it's the print function?, what if there's no string?</span>",
                    "time": null
                },
                {
                    "user": "devtty1er",
                    "text": "<span class=\"comment-copy\">That's probably an oversimplification for which people could contrive counterexamples, but it's generally a good expectation. The print function has to get a value to print somehow. Looking at the arguments to the function, you will eventually trace one of them back to a string, even if it is less local to the call or indirected somehow.</span>",
                    "time": null
                },
                {
                    "user": "Frd",
                    "text": "<span class=\"comment-copy\">Let say i got another call function and no string at above the call function, how do i know what func it would be?</span>",
                    "time": null
                },
                {
                    "user": "devtty1er",
                    "text": "<span class=\"comment-copy\">The way I see it, the possible approaches for the general case are to 1) reverse engineer the functionality by looking at the disassembly/decompilation of the function in question -- this is called static analysis 2) if you have source code, you should be able to simply compile with debug symbols 3) if you have similar (or the same) source code, you could also use a tool like BinDiff 4) you could use dynamic analysis to match a function's behavior to the behavior of a known function.</span>",
                    "time": null
                },
                {
                    "user": "devtty1er",
                    "text": "<span class=\"comment-copy\">For this example, we used static analysis (1). Debug symbols (2) is certainly a valid approach, which you might already have for free -- I don't know if OllyDbg displays them. As @bart1e suggests, another tool, such as IDA, might make this approach easier.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First and easy way is to open the resulting executable in <code>IDA</code> which will just show you the function names for library functions.\n<a href=\"https://i.sstatic.net/z51IZ.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA_analysis\" src=\"https://i.sstatic.net/z51IZ.png\"/></a></p>\n<p>Other still easy way is to just breakpoint before these function calls, step over these functions and observe the console output. You should be able to find at least <code>cout</code> this way. To do this in <code>x64dbg</code>, set up the breakpoint in the <code>main</code> function and keep clicking <code>Run</code> until you see it highlighted this way (that is <code>EIP</code> blue arrow in the same line as your breakpoint):\n<a href=\"https://i.sstatic.net/NXzjU.png\" rel=\"nofollow noreferrer\"><img alt=\"x64dbgBreakpoint\" src=\"https://i.sstatic.net/NXzjU.png\"/></a></p>\n<p>Then, keep clicking <code>Step over</code> until <code>EIP</code> is pointing on the first function call. Look at the console and click <code>Step over</code> once again. You should see that nothing happened there. Do the same thing with the subsequent function and after stepping over it, you will see the string being printed in the console.</p>\n</div>",
            "votes": "0",
            "user": "bart1e",
            "time": "Jun 11, 2019 at 16:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Frd",
                    "text": "<span class=\"comment-copy\">I tried to breakpoint before the function calls then step over the function but why i got dragged to other function (DbgUiRemoteBreakin)</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">Are you sure that you used step over (not step into)?</span>",
                    "time": null
                },
                {
                    "user": "Frd",
                    "text": "<span class=\"comment-copy\">Im pretty sure i clicked step over</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">I've updated my answer to better explain this process.</span>",
                    "time": null
                },
                {
                    "user": "Frd",
                    "text": "<span class=\"comment-copy\">Thanks bart1e :), i would likely to ask ur opinion, Let say i got another call function and no string at above the call function, how do i know what func it would be other than you mention above?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are building your own code to understand the assembly, I suggest you use your compilers options to output an assembly listing. For example:</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/fa-fa-listing-file?view=msvc-160\" rel=\"nofollow noreferrer\">Microsoft Visual C++ Listing</a> using /FA option</li>\n<li>GCC use -Wa,-adhln -g option</li>\n</ul>\n<p>You can also compile your program to include PDB files, and use freely available <a href=\"https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86\" rel=\"nofollow noreferrer\">WinDbg</a> to step through code or disassembly line by line, easily viewing source code or disassembly.</p>\n<p>Alternatively you can use <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">Compiler Explorer</a> to quickly examine assembly code generated by various C/C++ compiler versions, with various optimizations and for different platforms</p>\n</div>",
            "votes": "0",
            "user": "chentiangemalc",
            "time": "Jan 11, 2021 at 8:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}