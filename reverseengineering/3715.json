{
    "title": "I want to know more about how a particular exploit works. How do I do that? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3715/i-want-to-know-more-about-how-a-particular-exploit-works-how-do-i-do-that",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> This question does not appear to be about reverse engineering within the scope defined in the <a href=\"https://reverseengineering.stackexchange.com/help/on-topic\">help center</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2014-02-24 23:47:02Z\">11 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/3715/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I am given a VM of a server running a <a href=\"https://www.rapid7.com/db/modules/exploit/linux/ftp/proftp_telnet_iac\" rel=\"nofollow\">vulnerable version of ProFTP</a> and a attacker VM which exploits the server using <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/ftp/proftp_telnet_iac.rb\" rel=\"nofollow\">an exploit provided with MetaSploit</a>. I need to write a Snort rule to detect potential malicious attacks on the server as a part of my class assignment. Looking at the exploit code I can easily write a rule to look for the keyword <code>SITE</code> or <code>\\x8d\\xa0\\xfc\\xdf\\xff\\xff</code> (as my vulnerable Vm is an Ubuntu machine). However, that would be pretty lame and also writing patches specific to the code of the exploit is not a good practice. I would like the rule to apply even if the exploit code is changed. </p>\n<p>I have read about <a href=\"http://bugs.proftpd.org/show_bug.cgi?id=3521\" rel=\"nofollow\">the bug</a> and I know that the presence of special IAC character (255 or <code>\\xFF</code>) would potentially lead to buffer overflow. However, any normal packet could contain  <code>\\xFF</code> and writing a rule for detecting <code>\\xFF</code> would to false positives. I want to know some specific details of the exploit which would either help me figure out where I need to look for the IAC character or help me find some details about the exploit which would allow me to find malicious packets without having to resort to look for IAC character <code>\\xFF</code>. How do I go about doing that? Any help or pointers would be appreciated.</p>\n<p>Thanks.</p>\n<p><strong>EDIT:</strong></p>\n<p>Currently, I have installed <a href=\"http://udis86.sourceforge.net/\" rel=\"nofollow\">udcli</a> to try to understand the commands in the <code>ROPStack</code> portion of the code. For ex: I am trying to evaluate line 100 (<code>0x805a544,  # mov eax,esi / pop ebx / pop esi / pop ebp / ret</code>) in the code. I have tried:</p>\n<pre><code>echo \"08 05 a5 44\" | udcli -32 -x\necho \"805a544\" | udcli -32 -x\necho \"44 a5 05 08\" | udcli -32 -x\necho \"44 a5 05 80\" | udcli -32 -x\n</code></pre>\n<p>But none of them evaluates to the following sequence</p>\n<pre><code>mov eax,esi\npop ebx\npop esi\npop ebp\nret\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "332",
    "tags": [
        "disassembly",
        "linux",
        "exploit",
        "buffer-overflow"
    ],
    "user": "TheRookierLearner",
    "time": "11 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">ProFTPD is open-source and the vulnerability is very well-documented, meaning there's no need to analyze a specific exploit. Your question would be better asked on <a href=\"http://security.stackexchange.com/\">security.stackexchange.com</a> as writing a Snort rule does not require any reverse engineering in this context.</span>",
            "time": null
        },
        {
            "user": "jbh",
            "text": "<span class=\"comment-copy\">He clearly stated that he is studying this vulnerability as part of a class, with the intent to learn. Although his question is a bit vague, completely disregarding it because others have analyzed the exploit, is contrary to the point of stack exchange.</span>",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">@jbh: Asking a question unrelated to reverse engineering is contrary to the point of the Reverse Engineering Stack Exchange :)</span>",
            "time": null
        },
        {
            "user": "qwm",
            "text": "<span class=\"comment-copy\">@TheRookierLearner: from what I see in the bug link you provided, integer underflow is triggered by <code>buf[4102] == TELNET_IAC</code></span>",
            "time": null
        },
        {
            "user": "qwm",
            "text": "<span class=\"comment-copy\"><code>'\\n'</code> means the end of src-buffer for the <code>pr_netio_telnet_gets</code> function. If your snort rule somehow a-priori knows the length of buffer you can skip this test by efficiency consideration, ofc</span>",
            "time": null
        }
    ],
    "answers_data": []
}