{
    "title": "Intel PIN and nm unable to capture binary symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/13639/intel-pin-and-nm-unable-to-capture-binary-symbols",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to generate a log of all identified symbols in a binary file. The application i'm trying to inspect is busybox. I've created a Pin Tool that successfully captures symbols (no demangling) and place them underneath the module they belong to, and worked just fine for many binaries except busybox. For example this command:</p>\n<pre><code>pin -t &lt;pin-tool-shared-object&gt; busybox -ls\n</code></pre>\n<p>Was able to generate only the following output:</p>\n<pre><code>MODULE busybox:\n.init\n.plt\n.text\n\n# eof\n</code></pre>\n<p>Not finding any of the desired symbols. Unsure of where the problem was, I tried many variations of the <code>nm</code> command. The output was always the same:</p>\n<pre><code>$ nm -an /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n$ nm -an -D /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n$ nm -D /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n</code></pre>\n<p>What is happening here and how can I get a trace of the called symbols in this case (or at least a static <code>nm</code>-like output of these symbols).</p>\n<p>The full Pin tool code is found <a href=\"https://github.com/gfreivasc/PinPlays/blob/master/callgraph.cpp\" rel=\"nofollow\">here</a>, as it might be the problem too.</p>\n<p><strong>EDIT</strong></p>\n<p>Running the tool in verbose mode <code>-v</code>, that generates the sequential call graph, gives me traces like these when in busybox basic blocks:</p>\n<pre><code>0x404970 | CALL .plt\n0x42d41f | RET\n0x404970 | CALL .plt\n0x42d41f | RET\n0x43bcd1 | CALL .text\n0x4053fb | CALL .text\n0x4040d0 | CALL .plt\n0x405416 | RET\n0x43bcf6 | RET\n0x404740 | CALL .plt\n</code></pre>\n<p>Which is nowhere near helpful. Apparently there are no exported symbols in this module.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "160",
    "tags": [
        "linux",
        "symbols",
        "intel"
    ],
    "user": "Gabriel Vasconcelos",
    "time": "Oct 3, 2016 at 18:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sounds like the binary has ben stripped (had its symbol table removed). Since <code>busybox</code> is usually compiled statically to not have any external dependencies and be entirely self-contained, it does not need even dynamic symbols to function. You'll just have to figure out how to achieve your goal without symbols.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Oct 3, 2016 at 18:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gabriel Vasconcelos",
                    "text": "<span class=\"comment-copy\">The symbols are just what I'm looking for. I'm seeing if I can compile it without stripping it. It's open source, which might help.</span>",
                    "time": null
                },
                {
                    "user": "Gabriel Vasconcelos",
                    "text": "<span class=\"comment-copy\">Correct. I was able to make an unstripped version. There's a make option specifically and clearly for that purpose <code>make busybox_unstripped</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}