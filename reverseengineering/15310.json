{
    "title": "How to debug ServiceMain function of a service?",
    "link": "https://reverseengineering.stackexchange.com/questions/15310/how-to-debug-servicemain-function-of-a-service",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a malware which is checking for keyboard type and locale information.</p>\n<p>After that, it creates a service with BinaryPathName as malware's exe address. After creating a service, malware starts it \nand call <code>StartServiceCtrlDispatcher</code> and kinda stucks there. No further code is evaluated after that.</p>\n<p>I have done all this analysis in OllyDbg and ImmDbg.</p>\n<p>I want to debug a ServiceMain Function of the service installed by this malware.</p>\n<p>After googling a lot, I have found <a href=\"https://support.microsoft.com/en-us/help/824344/how-to-debug-windows-services\" rel=\"nofollow noreferrer\" title=\"this\">this</a> article. I tried performing the 2nd method \"Configure a service to start with the WinDbg debugger attached\" but somehow my VM froze.</p>\n<p>So my question (in general), How can I debug ServiceMain function of any service?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "windows",
        "ollydbg",
        "windbg",
        "winapi"
    ],
    "user": "Priyank Chheda",
    "time": "Jun 8, 2018 at 2:54",
    "comments": [
        {
            "user": "Lieven Keersmaekers",
            "text": "<span class=\"comment-copy\">Did you make the service interactive?</span>",
            "time": null
        },
        {
            "user": "Priyank Chheda",
            "text": "<span class=\"comment-copy\">Yes. By ticking\"Allow service to interact with desktop\" in service properties &gt; Log on tab.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>This answer ignores the case of shared services, since that is more elaborate and OP did not mention that specifically.</em></p>\n<p>Services are usually normal processes like any other process, however they are executed by the operating system and not the creating/starting process, which may be a cause for some confusion.</p>\n<h2>How to debug services?</h2>\n<p>Like any other process, you can either attach to it after its running most (read: all decent) debuggers support attaching (and putting protected process services aside) can be attached to.\nIf you fear you'd miss some crucial part of the execution before you get to attach you could use tools that let you debug spawned processes. Ollydbg supports that as well as x64. And Rohitab's API Monitor has decent capabilities when it comes to detecting and attaching to new processes.</p>\n<h2>but why execution stopped after calling <code>StartServiceCtrlDispatcher</code>?</h2>\n<p>However, when dealing with most malware samples it'll be good enough to just create the process yourself and skip any service related functions.</p>\n<p>It seems that your specific issue is with the execution of the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686324(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>StartServiceCtrlDispatcher</code></a> function, which is the function called <em>by the service entry point</em> in order to register connect back to the service manager. That connection to the service manager is how the service reports it has be successfully load and functional, how it gets commands to shutdown, restart etc.</p>\n<p><code>StartServiceCtrlDispatcher</code> has a single parameter which is the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686001(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>SERVICE_TABLE_ENTRY</code></a> structure. It has two members, the second of which is of type <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms685138(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>LPSERVICE_MAIN_FUNCTION</code></a> and called <code>lpServiceProc</code>. That parameter is actually a function pointer to the <code>ServiceMain</code> function. Pick it up, parse the structure and you'll get to where execution will be given back to the service in order to continue execution!</p>\n<h2>VM, why you no run?!</h2>\n<p>Well, unfortunately you did not provide enough details to diagnose that one.</p>\n</div>",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 8, 2018 at 3:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I prefer to use HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Debugger see more <a href=\"https://blogs.msdn.microsoft.com/greggm/2005/02/21/inside-image-file-execution-options-debugging/\" rel=\"nofollow noreferrer\">here</a>.\nTo specify the debugger process, which starts as soon as the service process does. So that I'm able to set up the breakpoints at the very beginning.</p>\n</div>",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Sep 6, 2018 at 8:24",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Others have already described elegant ways of doing this, so I'll post a dirty (but very versatile) trick: </p>\n<p>Open the binary in a hex editor and replace the first two bytes of the function you want to debug with EB FE (a jump to itself). Run the binary normally (e.g. start the service) and once the process starts consuming 100% CPU (well, 100% of one core), attach the debugger, put a break point at your little infinite loop, hit run, patch in the original bytes and you're ready to debug. </p>\n<p>It's really ugly and quite impractical, but it will work with everything from DLLs to drivers. </p>\n</div>",
            "votes": "1",
            "user": "user2347953",
            "time": "Sep 10, 2018 at 20:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}