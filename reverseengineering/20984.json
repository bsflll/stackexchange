{
    "title": "Most efficient way to begin analyzing malware binary",
    "link": "https://reverseengineering.stackexchange.com/questions/20984/most-efficient-way-to-begin-analyzing-malware-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm taking a reverse engineering course and the class has just been given a big project where we have to analyze a packed malware binary. I am using a Windows 10 VM. I am a little confused on where to begin. The professor has mentioned that the best place to start is by taking a snapshot of your initial system setup, running the malware, and then \"figuring out what has changed\".</p>\n<p>My strategy is as follows:</p>\n<ol>\n<li>Take a memory backup of my initial VM state. </li>\n<li>Set up my VM so that a network connection is available, but doesn't actually connect to the internet.</li>\n<li>Run the malware (in a debugger? outside of a debugger?).</li>\n<li>???</li>\n</ol>\n<p>This is where I get a little iffy. I am not sure what \"checking for changes on the system\" entails. Does this mean I need to take a memory dump of the OS state after the malware has run? What should I be looking for within the memory dump? Is there some tool that identifies meaningful changes between my starting state and the state after the malware runs? Do I need to audit the registry keys to see what has been changed? If I know the malware uses the network, should I be running Wireshark? </p>\n<p>Ultimately, I am not sure what the most efficient approach is. It is a pretty powerful piece of malware with a lot of functionality and I want to make sure I collect all necessary information upfront so I don't waste time later in the project.</p>\n<p>Thank you</p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "968",
    "tags": [
        "windows",
        "malware",
        "dynamic-analysis"
    ],
    "user": "lll",
    "time": "Mar 28, 2019 at 19:46",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Go to <a href=\"https://github.com/ytisf/theZoo\" rel=\"nofollow noreferrer\">the Zoo</a>... and watch animals! :-)</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">If it’s packed then in order to analyze it you will need to unpack it. In order to do this effectively you will need to determine how it’s packed. You don’t seem to have much experience with analysis and the scope of the question is quite broad, so my advice would be to study malware analysis write ups shared by professionals online to get an insight into their methodology and workflow, as well as looking through a few intro level tutorials. The web is awash with “how to get started with malware analysis”-type material. I’m sure your professor has provided you with a lot of material as well.</span>",
            "time": null
        },
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">Try to narrow your question down to a specific technical problem, such as help identifying how the binary is packed or finding the original entry point, etc</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I find it really disturbing that in an official university class there are no proper safety guidelines and procedures for students before dealing with actual malware. This is super risky and should be dealt with accordingly. However, here are a few steps to make your task safer and easier:</p>\n<h2><strong>Building a malware lab:</strong></h2>\n<p>You can follow the full procedure <a href=\"https://zeltser.com/free-malware-analysis-windows-vm/\" rel=\"noreferrer\">here</a> by Lenny Zelster. In short, it has the following steps:</p>\n<ul>\n<li>Install Virtualization Software - I recommend <a href=\"https://www.virtualbox.org/wiki/Downloads\" rel=\"noreferrer\">Virtualbox</a> for beginners.</li>\n<li>Get a Windows Virtual Machine - You can <a href=\"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines\" rel=\"noreferrer\">download</a> a free trial from Microsoft.</li>\n<li>Update the VM and Install Malware Analysis Tools - Static Analysis: <a href=\"https://ghidra-sre.org/\" rel=\"noreferrer\">Ghidra</a>, <a href=\"https://www.hex-rays.com/products/ida/support/download_freeware.shtml\" rel=\"noreferrer\">IDA</a>, <a href=\"https://github.com/radareorg/cutter\" rel=\"noreferrer\">Cutter</a>, <a href=\"https://www.winitor.com/get.html\" rel=\"noreferrer\">PE Studio</a>, Dynamic Analysis: <a href=\"https://x64dbg.com/#start\" rel=\"noreferrer\">X64dbg</a>, <a href=\"http://www.ollydbg.de/\" rel=\"noreferrer\">OllyDbg</a>, <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools\" rel=\"noreferrer\">WinDbg</a>, <a href=\"https://www.immunityinc.com/products/debugger/\" rel=\"noreferrer\">Immunity Debugger</a>. You can also find many other tools and guides <a href=\"https://github.com/rshipp/awesome-malware-analysis\" rel=\"noreferrer\">here</a>.</li>\n<li>Specific tools for your mission \"figuring out what has changed\": <a href=\"https://docs.microsoft.com/en-us/sysinternals/\" rel=\"noreferrer\">Sysinternals</a></li>\n</ul>\n<h2>Understanding our task:</h2>\n<p>Once your lab is set, let's examine our tasks, from your words:</p>\n<blockquote>\n<p>\"checking for changes on the system\" &amp; \"figuring out what has changed\"</p>\n</blockquote>\n<p>Since we are dealing with a Windows based system, we need to ask ourselves what possible system changes can be done by malware and for what purpose. For example, malware is usually looking to achieve some kind of persistency. This is usually done by the following methods:</p>\n<ul>\n<li>Registry run keys</li>\n<li>Startup folder</li>\n<li>Scheduled tasks</li>\n<li>Service registrations</li>\n</ul>\n<p>A much more comprehensive list is available by MITRE ATT&amp;CK <a href=\"https://attack.mitre.org/tactics/TA0003/\" rel=\"noreferrer\">here</a>.</p>\n<p>In addition, malware usually has some sort of intention, for example stealing <a href=\"https://blog.talosintelligence.com/2018/07/smoking-guns-smoke-loader-learned-new.html\" rel=\"noreferrer\">cookies</a>, hooking to a <a href=\"https://www.symantec.com/connect/blogs/brief-look-zeuszbot-20\" rel=\"noreferrer\">web browsers</a> or maybe just wait for a <a href=\"https://www.us-cert.gov/ncas/alerts/TA18-201A\" rel=\"noreferrer\">secondary</a> payload or update. If we ignore <a href=\"https://zeltser.com/fileless-malware-beyond-buzzword/\" rel=\"noreferrer\">\"Fileless\" or \"Memory Injections\"</a> attacks for the simplicity of this short guide, malware has to leave some file traces on the system. We need to look for files (executable or not) written to the file system. </p>\n<h2>Getting our hands dirty:</h2>\n<p>In order to monitor the system changes mentioned above, we can use Sysinternal tools initially developed by Mark Russinovich and now owned by Microsoft. </p>\n<p>Tip: it's recommended to read Mark's <a href=\"https://docs.microsoft.com/en-us/sysinternals/learn/windows-internals\" rel=\"noreferrer\">Windows Internals book</a> for anyone starting with malware analysis.</p>\n<p>Being more specific, the tools of the Sysinternals suite you should learn how to use are:</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns\" rel=\"noreferrer\">Autoruns</a> - execute and note your initial system values.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/procmon\" rel=\"noreferrer\">Process Monitor</a> - After you read the manual, create a filter to only follow the malware you are executing. Note any file and registry changes, this will be a really good starting point.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns\" rel=\"noreferrer\">Autoruns</a> - execute and note any changes to your system and what new autoruns have been registered.</li>\n</ul>\n<p>The guide above should get you to a good starting point for your project.</p>\n<h2>If you want to cheat</h2>\n<p>You can skip all this stages and use one of the publicly available malware detonation sandboxes. However,  in order to become a reverse engineer or malware analyst you should only use these tools once you have learned the basics and understand what you are actually doing. </p>\n<ul>\n<li><a href=\"http://hybrid-analysis.com/\" rel=\"noreferrer\">Hybrid-Analysis</a> </li>\n<li><a href=\"https://app.sndbox.com/\" rel=\"noreferrer\">Sndbox</a></li>\n<li><a href=\"https://app.any.run/#register\" rel=\"noreferrer\">Anyrun</a></li>\n</ul>\n</div>",
            "votes": "5",
            "user": "GelosSnake",
            "time": "Mar 31, 2019 at 11:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "knowmalware",
                    "text": "<span class=\"comment-copy\">This is a fairly comprehensive answer, but I would add <a href=\"https://sourceforge.net/projects/regshot/\" rel=\"nofollow noreferrer\">RegShot</a> and maybe <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\" rel=\"nofollow noreferrer\">Sysmon</a>.  RegShot is straightforward.  You take a snapshot before running a process, a second one after, and then to compare them.  If you select \"Scan dir\" and enter \"C:\\\" in the box, it will also tell you file changes.  These are snapshots at the time the buttons are pressed, so may miss files that are dropped and deleted.  Use Process Monitor or Sysmon for that info and more.</span>",
                    "time": null
                },
                {
                    "user": "GelosSnake",
                    "text": "<span class=\"comment-copy\">I did not want to make his life too easy. With ProcMon he has greater chance of learning.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You may consider reading <a href=\"https://practicalmalwareanalysis.com/\" rel=\"nofollow noreferrer\">Practical Malware Analysis Book</a> which describes in depth malware analysis process and techniques and contains in depth answers to your questions.\nChapter 3 briefly describes tools you may use to monitor changes made by malware.</p>\n</div>",
            "votes": "4",
            "user": "bart1e",
            "time": "Mar 29, 2019 at 9:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The steps i take when analyzing malware sample are:</p>\n<ol>\n<li><p>check file in cff explorer. (entrypoint section, weird section names, overlay size etc)</p></li>\n<li><p>open sample in Detect It Easy to see if its packed or not, and if so which packer is used.</p></li>\n<li><p>unpack it.</p></li>\n<li><p>Analyze unpacked sample in IDA to see what I'm dealing with.</p></li>\n</ol>\n<p>Of course, you have to make a snapshot of your system before you run your sample.\nIf your goal is \"figuring out what has changed\" rather than unpacking, checkout process explorer and process monitor from sysinternals suite. Wireshark is also a good habit to run in background.</p>\n<p>You could also use online sandboxes for that purpose. checkout <a href=\"https://github.com/rshipp/awesome-malware-analysis\" rel=\"nofollow noreferrer\">https://github.com/rshipp/awesome-malware-analysis</a></p>\n<p>To get unpacking tuts and scripts check <a href=\"https://tuts4you.com\" rel=\"nofollow noreferrer\">https://tuts4you.com</a></p>\n</div>",
            "votes": "2",
            "user": null,
            "time": "Mar 31, 2019 at 8:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}