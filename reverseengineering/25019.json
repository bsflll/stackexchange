{
    "title": "Format String Direct Parameter Behavior",
    "link": "https://reverseengineering.stackexchange.com/questions/25019/format-string-direct-parameter-behavior",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am investigating a format string vulnerability on arm64 (linked against musl libc), and am encountering some odd behavior while debugging the output.</p>\n<p>From the decompilation, the program has a classic format string vulnerability that boils down to:</p>\n<pre><code>fprintf(stdout, user_controlled_data);\n</code></pre>\n<p>Using repetitive format specifiers (e.g. <code>%p%p%p%p</code>), I can dump massive swaths of memory by including thousands of these characters. That works as expected.</p>\n<p>The problem arises when I try direct parameter access. For some reason, <code>%1$p</code> works but not <code>%2$p</code>, but 3 up to about 12 works, and everything I've tried after that fails. By \"fails\", I mean no values are printed, except the newline automatically added to my string earlier in code is eaten somehow. In the debugger, <code>fprintf</code> returns -1, and <code>errno</code> is set to 0x16, which I believe is EINVAL.</p>\n<p>For this particular scenario, I need the ability to read/write a particular stack offset in the thousands. But I cannot print it to confirm since direct parameter access does not work. I <em>can</em> see the target parameter by using repeated characters, but I need direct parameters to work going forward due to other constraints.</p>\n<p>Now, I understand this is in \"undefined behavior\" territory, but I compiled a vulnerable test binary (statically linked against Glibc, I should probably try against musl) on the system that works as expected with no issues (e.g. <code>%9000$p</code> prints something).</p>\n<p>Is there something that would cause this behavior, or something I am missing? I can provide further information if needed.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "381",
    "tags": [
        "exploit",
        "arm64"
    ],
    "user": "multithr3at3d",
    "time": "May 15, 2020 at 13:12",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After posting the question, I started to think about the difference in the libc I was using. I compiled the basic test binary again but with musl, and also saw the unexpected behavior there. This seems to be due to the <code>printf</code> implementation in <a href=\"https://github.com/bminor/musl/blob/master/src/stdio/vfprintf.c#L464\" rel=\"nofollow noreferrer\">musl</a>:</p>\n<pre><code>        if (isdigit(s[1]) &amp;&amp; s[2]=='$') {\n            l10n=1;\n            argpos = s[1]-'0';\n            s+=3;\n        }\n</code></pre>\n<p>It only uses direct parameters if there is exactly one digit following the <code>%</code>, followed by a <code>$</code>. This explains why I was unable to print any larger stack offsets.</p>\n<p><strong>Edit:</strong> This seems <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html\" rel=\"nofollow noreferrer\">standard</a>-compliant:</p>\n<blockquote>\n<p>\"%n$\", where n is a decimal integer in the range [1,{NL_ARGMAX}], giving the\n  position of the argument in the argument list.</p>\n</blockquote>\n<p>Then, looking at <a href=\"https://pubs.opengroup.org/onlinepubs/7908799/xsh/limits.h.html\" rel=\"nofollow noreferrer\">the definition</a> of NL_ARGMAX:</p>\n<blockquote>\n<p>NL_ARGMAX </p>\n<p>Maximum value of digit in calls to the printf() and scanf()\n  functions. Minimum Acceptable Value: 9</p>\n</blockquote>\n<p>So it appears that the implementation is indeed following the standard by allowing the minimum value of 9, which is certainly inconvenient for writing compact format string exploits.</p>\n</div>",
            "votes": "1",
            "user": "multithr3at3d",
            "time": "May 31, 2020 at 19:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">The author of musl makes a point of sticking to the word of the standards, so perhaps you should consult those. It's also possible you found a defect in the code, though.</span>",
                    "time": null
                }
            ]
        }
    ]
}