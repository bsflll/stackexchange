{
    "title": "Why doesn't alloca_probe follow x64 calling convention?",
    "link": "https://reverseengineering.stackexchange.com/questions/22476/why-doesnt-alloca-probe-follow-x64-calling-convention",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was practising reverse engineering on some Windows x64 applications when I came across this function:</p>\n<pre><code>call alloca_probe\n</code></pre>\n<p>This <em>alloca_probe</em> function has some strange implementation:</p>\n<ol>\n<li>EAX is used as a function argument (for the allocation size)</li>\n<li>The prolog saves current state of R10 and R11 even though they are considered volatile registers by convention.</li>\n</ol>\n<p>As I can recall, the x64 calling convention by Microsoft indicates:</p>\n<ul>\n<li>RCX, RDX, R8, and R9 should be used as the first 4 function arguments.</li>\n<li>RAX, RCX, RDX, R8, R9, R10, R11 are all volatile registers.</li>\n</ul>\n<p><em>alloca_probe</em> function clearly doesn't follow this convention...  </p>\n<p><strong>My question is:</strong></p>\n<p>Why doesn't this function follow the convention, and how does the compiler know how to use these type of functions (e.g using EAX as first argument)?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "455",
    "tags": [
        "ida",
        "assembly",
        "calling-conventions"
    ],
    "user": "YAYAdest",
    "time": "Nov 7, 2019 at 3:51",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is not a standard function but a compiler helper, used by the compiler to perform some necessary housekeeping (allocate extra stack space) so it doesn’t have to follow the ABI for “normal” functions. </p>\n<p>Because it is called in the prolog of the parent function while the user code has not started executing yet, special care needs to be taken. </p>\n<p>EAX use likely comes from the x86 version which has similar constraints and could not use stack arguments. In theory any register could have been used but    <code>mov eax, imm</code> has a short encoding which saves space in the prolog. \nThe normally volatile registers need to be saved because they need to be preserved by the function’s prolog we’re executing and if they get trashed there may be all kinds of wrong results. </p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Nov 7, 2019 at 7:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "YAYAdest",
                    "text": "<span class=\"comment-copy\">Thanks! Is this compiler helper actually an intrinsic function? If so, aren't those functions suppose to be inlined?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Intrinsics are pseudo functions which map to processor instructions. This one is different as it’s inserted by the compiler and not by programmer.</span>",
                    "time": null
                }
            ]
        }
    ]
}