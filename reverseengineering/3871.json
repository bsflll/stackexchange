{
    "title": "Best Practice to handle/document dynamically loaded calls/branches/jumps in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/3871/best-practice-to-handle-document-dynamically-loaded-calls-branches-jumps-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have been reversing some binaries that either have broken relocation tables (ELF binaries), or due to architecture limitations \"build\" function addresses arithmetically in a register then branch to the register which wrecks havoc in terms of code readability/cross-referencing. Therefore, I wrote an IDApython script to fix up these calls/references. Effectively the script uses poor man's static tracing and some logic to find what function is being called and creates a cross-reference. </p>\n<p><code>add_cref(ea_from,ea_to,fl_CF)</code></p>\n<p>In its current state, I create a repeatable comment or a function comment for readability. This works as shown below, and is MUCH better now that I read what a repeatable comment really is, however it can be somewhat annoying keeping function comments synced with function names in the function window and what not while reversing/documenting the binary. Is there a better way of accomplishing this?</p>\n<p>Another nuisance is if I re-run auto-analyze, these comments are cleared.</p>\n<p><img alt=\"Repeatable Comments/Function Comments\" src=\"https://i.sstatic.net/RVtGj.png\"/></p>\n</div>",
    "votes": "3",
    "answers": 0,
    "views": "397",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "jbh",
    "time": "Mar 14, 2014 at 18:33",
    "comments": [],
    "answers_data": []
}