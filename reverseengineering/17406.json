{
    "title": "AT&T - Does assembly code return whatever is in %eax by default?",
    "link": "https://reverseengineering.stackexchange.com/questions/17406/att-does-assembly-code-return-whatever-is-in-eax-by-default",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have the following AT&amp;T assembly code:</p>\n<pre><code>  movl 12(%ebp),%eax\n  cmpl %eax,8(%ebp)\n  jle L7\n  movl 8(%ebp),%eax\nL7:\n  leave\n</code></pre>\n<p>I'm supposed to \"transpose\"(??) it to C code. I actually just have to fill in the blanks in this skeleton C code:</p>\n<pre><code>int g(int x, int y) {\n    if (x ______ y)\n        return ______;\n    else\n        return ______;\n}\n</code></pre>\n<p>From what I unerstand, the assembly is going to return whatever is in <code>%eax</code> when done.</p>\n<p>So this is how I understand what's happening:</p>\n<p>The <code>cmpl %eax,8(%ebp)</code> line is comparing x (<code>8(%ebp)</code>) with y (<code>%eax</code>). If x is <code>&lt;=</code> to y, we jump to <code>L7:</code> and return whatever is in <code>%eax</code> at that time, which is y. Otherwise, we proceed to the next line in the assembly code and <code>movl</code> x (<code>8(%ebp)</code>) to <code>%eax</code>, and return whatever is in <code>%eax</code>, which would be x at that point.</p>\n<p>In the end, this is what I think is happening:</p>\n<pre><code>int g(int x, int y) {\n    if (x &lt;= y)\n        return y;\n    else\n        return x;\n}\n</code></pre>\n<p>Am I correct in saying that the assembly returns whatever is in <code>%eax</code> when the assembly code is finished running?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "255",
    "tags": [
        "assembly",
        "decompilation"
    ],
    "user": "velkoon",
    "time": "Feb 7, 2018 at 8:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>Am I correct in saying that the assembly returns whatever is in %eax when the assembly code is finished running?</p>\n</blockquote>\n<p>Assembly doesn't \"return\" anything.</p>\n<p>In assembly, it is left to the programmer to decide how to pass values between the caller and callee routines.  In order to avoid things getting messy, <a href=\"https://en.wikipedia.org/wiki/Calling_convention\" rel=\"nofollow noreferrer\">calling conventions</a> have been devised.</p>\n<p>Your question therefore becomes \"what calling convention was used to compile the unknown C code to the known assembly?\"</p>\n<p>When compiling for x86 architectures, C compilers usually use the <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl\" rel=\"nofollow noreferrer\">cdecl convention</a>. \n Working on the assumption that was the convention used here, then integer results would indeed always be returned in register EAX.</p>\n</div>",
            "votes": "1",
            "user": "eggyal",
            "time": "Feb 7, 2018 at 9:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}