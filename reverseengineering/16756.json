{
    "title": "Unable to find Send/Recv type calls in Network Application",
    "link": "https://reverseengineering.stackexchange.com/questions/16756/unable-to-find-send-recv-type-calls-in-network-application",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Target is protected by nProtect Gameguard. Packets are encrypted. Goal is to obtain unencrypted packet information via the client.</p>\n<p>I obtained the free, 5.0 version, of IDA, and disassembled GVOnline.exe (the Uncharted Waters Launch exe). Interestingly enough, what is actually listed as running in Task Manager is NOT the exe, it is GVOnline.bin (another, much larger file in the same directory. Anyway, in the disassembled GVOnline.exe, I cannot find anything that looks like socket calls in the Imports table. No Send, Recv, or any of the other analogs.</p>\n<p>I've created a Pastebin of the Imports:\n<a href=\"https://pastebin.com/UEtKSwSk\" rel=\"nofollow noreferrer\">https://pastebin.com/UEtKSwSk</a></p>\n<p>And here is a Pastebin of the Names:\n<a href=\"https://pastebin.com/GwMaCfVs\" rel=\"nofollow noreferrer\">https://pastebin.com/GwMaCfVs</a></p>\n<p>How could the application be sending and receiving packets, if not through these calls?</p>\n<p>Do I need to disassemble GVOnline.bin instead of the exe?</p>\n<p>Could it be that Gameguard itself is responsible for communicating with the Socket? If that's the case, then I'd suspect Gameguard would also be responsible for encrypting the packet payload, but I should be able to get the raw information from the software itself, as it must construct it somehow before passing it to whatever sends or encrypts it.</p>\n<p>Thank you</p>\n<p>Update:</p>\n<p>It turns out that I was disassembling the wrong Binary. From a decision made in the initial executable, a second binary is opened and this is where the network calls are made. Disassembling this revealed the network calls and encryption routines.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "421",
    "tags": [
        "ida",
        "ollydbg",
        "encryption"
    ],
    "user": "Lokked",
    "time": "Nov 14, 2017 at 22:39",
    "comments": [
        {
            "user": "ebux",
            "text": "<span class=\"comment-copy\">Library functions can be imported based on <a href=\"https://stackoverflow.com/questions/3598108/how-can-i-call-a-exported-function-using-ordinal-number\">ordinals</a> also. Try to check the GetProcAddress function calls.</span>",
            "time": null
        },
        {
            "user": "user15338",
            "text": "<span class=\"comment-copy\">Given the EXE imports LoadLibraryA, and LoadLibraryExA - both of which are responsible for loading a module at runtime, it's likely that the WinSocket library is dynamically loaded at runtime.</span>",
            "time": null
        },
        {
            "user": "Lokked",
            "text": "<span class=\"comment-copy\">For this specific question, I've found the answer. I'm keeping a thread going on elitepvpers.com titled \"Emulation Project - Gameguard'd Client\". The answer to the above is that a second process is run where network calls (along with a whole lot of other functions) are running. I was disassembling the wrong binary. I appreciate the answers, as I learned something about software protection and ordinal-based library functions. Thank you!</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not familiar with GameGuard in particular, but it's quite common for these types of protections to keep an encrypted import table, load the imports and construct the IAT themselves during runtime.</p>\n<p>Usually, you could detour the functions by injecting and rewriting after the application has loaded, but seeing that GameGuard is a toolkit made precisely to stop these kinds of things, I suspect you have to get a lot more tricky.</p>\n<p>Edit: You can look for old safedisc/cdilla and securom unpacking tutorials for an intro on these kinds of wrappers.</p>\n</div>",
            "votes": "1",
            "user": "Tobias",
            "time": "Nov 17, 2017 at 12:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lokked",
                    "text": "<span class=\"comment-copy\">While the correct answer is, \"You are probably not disassembling the correct binary,\" I thank you for providing more insight on what is possible in the world of software protection.</span>",
                    "time": null
                },
                {
                    "user": "Tobias",
                    "text": "<span class=\"comment-copy\">Oh sorry, I thought you'd figured that part out since you mentioned the .bin file was shown in the tasklist :)</span>",
                    "time": null
                }
            ]
        }
    ]
}