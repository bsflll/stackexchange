{
    "title": "What is the encoding format for unconditional Jumps on SPARC/SPARC64?",
    "link": "https://reverseengineering.stackexchange.com/questions/15446/what-is-the-encoding-format-for-unconditional-jumps-on-sparc-sparc64",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to figure out the encoding for unconditional JMPs on SPARC, i.e the JMP. After disassembling a few binaries.</p>\n<p>In my IDA disassembly the encoding for JMP %g1 is:</p>\n<pre><code>81 c0 40 00 \n</code></pre>\n<p>Digging through the spark manuals, I can't seem to find a record of how this is encoded. I am also confused as to why IDA refers to a \"JMP\" as opposed to the \"JMPL\" in the docs. </p>\n<p>The JMPL encoding recommendations given in the SPARC9 manual are a little arcane to me and I struggle with what they are getting at:</p>\n<pre><code>10-RD-OP3-RS1-i-[-]-rs2 \n</code></pre>\n<p>or </p>\n<pre><code>10-RD-OP3-RS1-i-siMM3\n</code></pre>\n<p>\"If either of the low-order two bits of the jump address is nonzero, a mem_address_not_aligned\nexception occurs\"</p>\n<p>Well, I'm not sure how that squares with the instruction that IDA found. Can someone break down how this maps to JMP %g1? How would this change for JMP %g2? </p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "149",
    "tags": [
        "encodings",
        "sparc",
        "assembly"
    ],
    "user": "MrSynAckSter",
    "time": "May 30, 2017 at 18:28",
    "comments": [
        {
            "user": "Rup",
            "text": "<span class=\"comment-copy\">I suspect it sees the 'L' as an implementation detail - often you'd just write JMP and leave it up to the assembler whether it generates a short or long jump (but my SPARC is rusty). %g2 - you should probably get hold of a SPARC assembler and experiment, e.g. GNU binutils is easy to build targeting any chip - if you can build it in a Linux VM or a Mac at least, or maybe Cygwin just works too nowadays. Or you could hex-edit your SPARC binary and run it through IDA again at a pinch to see if you can change it to g2 yourself.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>81 c0 40 00 can be broken down as follows</p>\n<pre><code>    \n10 00000 111000 00001 0 0000000000000\n\n^--op1\n   ^--rd\n         ^--op3\n                ^--rs1\n                      ^--i\n                         ^--rs2/simmm13\n</code></pre>\n<p>To change the target from %g1 to %g2, just change the rs1 field from 00001 to 00010.</p>\n<p>The 'L' is simply an artifact of at&amp;t syntax vs intel syntax. In at&amp;t syntax, the instruction name encodes information about the argument size. In intel syntax, that's done via the decorating of arguments.</p>\n</div>",
            "votes": "5",
            "user": "broadway",
            "time": "Jun 26, 2017 at 13:42",
            "is_accepted": true,
            "comments": []
        }
    ]
}