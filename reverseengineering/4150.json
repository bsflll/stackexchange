{
    "title": "How do I view external function calls in dynamically linked ELF binary in linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/4150/how-do-i-view-external-function-calls-in-dynamically-linked-elf-binary-in-linux",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I used the <code>file</code> command in Linux to get information about a binary file. I am also looking for the addresses that these calls are located at. I think I can get this information from GDB or <code>objdump</code> but I am not very good with Linux commands and programs yet so any help is much appreciated. The output from the file command is below:</p>\n<pre><code>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x6d232dd468b2344847a4b9c81eb064ffe257d5d0, stripped\n</code></pre>\n<p>Then using the <code>strings</code> command I got this output (I see several C function calls but which are external ?):</p>\n<pre><code>/lib/ld-linux.so.2\n-#mH4\n__gmon_start__\nlibc.so.6\n_IO_stdin_used\nexit\nstrncmp\nstrncpy\nputs\nprintf\nmalloc\natoi\n__libc_start_main\nGLIBC_2.0\nPTRh\nQVh&gt;\nUWVS\n[^_]\ntesting\nstrncmp: %s;\natoi\nComplete\n;*2$\"\n</code></pre>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "9k",
    "tags": [
        "gdb",
        "static-analysis",
        "dynamic-analysis",
        "dynamic-linking",
        "objdump"
    ],
    "user": null,
    "time": "Apr 27, 2014 at 4:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>use nm instead of strings. Undefined symbols (indicated by a <code>U</code>) will be resolved externally (by the <code>libc</code> or whatever), and <code>T</code> (or <code>t</code>) symbols are locally defined. Lowercase indicates a local symbol, uppercase a global symbol.</p>\n<p>Of course, this assumes there's a symbol table present. In your example, it's been stripped.</p>\n<p>In that case, you can do <code>objdump -T</code> file to list the external references.</p>\n</div>",
            "votes": "7",
            "user": "perror",
            "time": "Apr 27, 2014 at 10:58",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answer to your question is fairly easy. You can either use the <code>nm</code> command with the <code>-D</code> switch (or <code>--dynamic</code>), or use <code>objdump</code> with the <code>-T</code> switch. Both commands will output the dynamic symbol table entries and the libraries they originate from.</p>\n</div>",
            "votes": "4",
            "user": "yaspr",
            "time": "Apr 26, 2014 at 23:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}