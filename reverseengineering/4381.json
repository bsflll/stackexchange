{
    "title": "OllyDBG causes executables saved by it to ask for administrator privileges when run",
    "link": "https://reverseengineering.stackexchange.com/questions/4381/ollydbg-causes-executables-saved-by-it-to-ask-for-administrator-privileges-when",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Whenever I save an executable in OllyDBG (Right-click, Copy to executable, All modifications then Save File), the saved executable asks for administrator privileges when I run it.</p>\n<p>I tried opening OllyDBG as a regular user and then saving the file, but no luck. I also tried manipulating the file's permissions, but no luck either.</p>\n<p>Is there a way to save a file so that regular users can run it?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg",
        "executable"
    ],
    "user": "LmnICE",
    "time": "May 20, 2014 at 3:56",
    "comments": [
        {
            "user": "DOD",
            "text": "<span class=\"comment-copy\">Does this binary before modification need administrator privileges when you run it?</span>",
            "time": null
        },
        {
            "user": "helloworld",
            "text": "<span class=\"comment-copy\">Maybe target executable is located in C:\\ or other place with RW access only for administrators?</span>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">Is is possible you patched something, that will cause this?</span>",
            "time": null
        },
        {
            "user": "LmnICE",
            "text": "<span class=\"comment-copy\">@DOD, no, it's a program that is supposed to be run by any user.</span>",
            "time": null
        },
        {
            "user": "LmnICE",
            "text": "<span class=\"comment-copy\">@helloworld, indeed it is (Program Files directory), but I tried changing the save path to the Desktop, and it still asks for admin privileges before running.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>UAC has certain heuristics that will cause a file to request elevation unless a manifest exists that states otherwise. Such heuristics include files that seem to be setup programs for some software. But there are more heuristics and other situations where elevation is assumed to be required.</p>\n<p>If the executable has no manifest, you need to add one. Otherwise you may have to modify the existing one.</p>\n<p>You can tell by loading it into a resource editor or resource viewer such as:</p>\n<ul>\n<li><a href=\"http://www.angusj.com/resourcehacker/\" rel=\"nofollow noreferrer\">http://www.angusj.com/resourcehacker/</a></li>\n<li><a href=\"http://www.resedit.net/\" rel=\"nofollow noreferrer\">http://www.resedit.net/</a></li>\n</ul>\n<p>... and so on. Check out the answers to this question: <a href=\"https://reverseengineering.stackexchange.com/q/2319\">Freely available resource hacking applications</a> ...</p>\n<h3>Workarounds are:</h3>\n<ul>\n<li>this can be done by setting the value <code>level=\"asInvoker\"</code> in element <code>requestedExecutionLevel</code> of the manifest (see <a href=\"https://superuser.com/questions/24631/prevent-elevation-uac-for-an-application-that-doesnt-need-it\">here</a> and more generally <a href=\"http://msdn.microsoft.com/en-us/library/aa905330.aspx\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://www.codeproject.com/Articles/17968/Making-Your-Application-UAC-Aware\" rel=\"nofollow noreferrer\">here</a>)</li>\n<li>or if you don't have the requirement that the file be saved and can instead provide a script to launch it, you can set an environment variable (<code>set __COMPAT_LAYER=RUNASINVOKER</code>) as explained <a href=\"https://superuser.com/a/450503\">here</a></li>\n</ul>\n<p>Unfortunately this is somewhat of a science to get right.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "LmnICE",
                    "text": "<span class=\"comment-copy\">This is very helpful, thank you. Setting the level attribute in the requestedExecutionLevel element worked. There was a much easier fix though: the filename of the binary was original_patched.exe, which tripped the UAC heuristics you mentioned. So all I had to do was rename the file. Interestingly, setting the manifest correctly trumped the UAC heuristics.</span>",
                    "time": null
                }
            ]
        }
    ]
}