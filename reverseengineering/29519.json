{
    "title": "What is \"nullsub_XXX\" in vtable in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/29519/what-is-nullsub-xxx-in-vtable-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I looking in a vtable structure in IDA pro, I know that <code>___cxa_pure_virtual</code> means that the function is virtual.</p>\n<p>But what does <code>nullsub_XXX</code> mean in a vtable structure?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "671",
    "tags": [
        "ida",
        "c++",
        "static-analysis",
        "vtables"
    ],
    "user": "vtable",
    "time": "Nov 9, 2021 at 10:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>Welcome to the Reverse engineering stack exchange Q&amp;A site! Although you only asked about <code>nullsub_</code>, you described <code>___cxa_pure_virtual</code> slightly incorrectly so I'll describe it as well</em></p>\n<h3>nullsub_X</h3>\n<p>IDA makes a minimal effort of providing meaningful, yet general, names for functions according to their implementation by adding a prefix or name for certain <em>types</em> of functions.</p>\n<p>One such case is <code>nullsub</code>, which is a name automatically given (during the analysis phase) to all <em>empty</em> functions. Meaning functions that simply return without doing <strong>anything</strong>.</p>\n<p>Additionally, since names are unique in IDA, when an in-use name is set to a function IDA will postfix it with an underscore and then an auto-incremented number (starting with 1).</p>\n<p>If you're wondering why such functions should exist in the first place, <a href=\"https://reverseengineering.stackexchange.com/questions/2420/what-are-nullsub-functions-in-ida/2422#2422\">this</a> post answers that question quite diligently.</p>\n<h3>___cxa_pure_virtual</h3>\n<p>This is a function implemented by <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/\" rel=\"nofollow noreferrer\"><code>libstdc++</code></a> (and a similar function is implemented by other C++ standard libraries) as a place-holder to <strong>pure</strong> virtual functions in virtual function tables.</p>\n<p>Although pure virtual functions have no implementation the compiler cannot eliminate the risk of pure virtual functions being called at run-time, and so a stub such as <code>___cxa_pure_virtual</code> is used as a place-holder for all pure virtual functions, so that if it ever happens that a pure virtual function would be called at runtime, there an explicit handling (termination of the program with a somewhat meaningful crash, often).</p>\n</div>",
            "votes": "6",
            "user": "NirIzr",
            "time": "Nov 11, 2021 at 12:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}