{
    "title": "How can I use radare2 to list all xrefs to a string?",
    "link": "https://reverseengineering.stackexchange.com/questions/29800/how-can-i-use-radare2-to-list-all-xrefs-to-a-string",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>radare2 can list all strings with <code>iz</code> , and list all functions with <code>afl</code>.  How can I use radar2e to list the XREFs for each string? That is, for each string, which funcs reference it?</p>\n<p>I'd like to be able to do this for all strings and also for select strings (one by one).</p>\n<p>Likewise: How can I find xrefs (call sites) to a given func? E.g. \"Show me all funcs (or addresses) that call <code>sym.imp.system</code>\"?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "radare2"
    ],
    "user": "SRobertJames",
    "time": "Dec 30, 2021 at 22:21",
    "comments": [
        {
            "user": "shluvme",
            "text": "<span class=\"comment-copy\"><code>axt @sym.imp.system</code> will give you all addresses that reference that import</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>[0x140012e60]&gt; ps @ 0x1400143f8\nUsage: r2 -c '!*r2p x' # run commands via r2pipe\n\n[0x140012e60]&gt; axt 0x1400143f8\nmain 0x140001253 [DATA] lea rdx, str.Usage:_r2__c__r2p_x__run_commands_via_r2pipe_n\n[0x140012e60]&gt; pd 6 @ 0x140001253-10\n|           0x140001249      00ff           add bh, bh\n|           0x14000124b      1500300100     adc eax, 0x13000\n|           0x140001250      488bc8         mov rcx, rax               ; int64_t arg1\n|           0x140001253      488d159e3101.  lea rdx, str.Usage:_r2__c__r2p_x__run_commands_via_r2pipe_n ; 0x1400143f8 ; \"Usage: r2 -c '!*r2p x' # run commands via r2pipe\\n\" ; int64_t arg2\n|           0x14000125a      e8b1fdffff     call fcn.140001010\n|           0x14000125f      c74424600100.  mov dword [var_60h], 1\n[0x140012e60]&gt;  \n\n                                                    \n</code></pre>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/11597/find-reference-to-string-in-radare2\">similar answer here</a></p>\n<p>Edit:</p>\n<p>type ps? for help on ps<br/>\nany command in radare2 if appended with a ?( question mark ) will print the help on usage</p>\n<pre><code>C:\\&gt;r2 -qq -c \"ps?;q\" -\nUsage: ps[bijqpsuwWxz+] [N]  Print String\n| ps       print string\n| ps+[j]   print libc++ std::string (same-endian, ascii, zero-terminated)\n| psb      print strings in current block\n| psi      print string inside curseek\n| psj      print string in JSON format\n| psp[j]   print pascal string\n| psq      alias for pqs\n| pss      print string in screen (wrap width)\n| psu[zj]  print utf16 unicode (json)\n| psw[j]   print 16bit wide string\n| psW[j]   print 32bit wide string\n| psx      show string with escaped chars\n| psz[j]   print zero-terminated string\n</code></pre>\n<p>so ps does a print string</p>\n<p>so search for an arbitrary string inside the binary whose address we would like to look for reference<br/>\n(do not ask what iz~6 does below learn yourself )</p>\n<pre><code>C:\\&gt;r2 -qq -c \"iz~:6;q\" f:\\radare2\\bin\\radare2.exe\n3   0x000131f8 0x1400143f8 49  50   .rdata  ascii   Usage: r2 -c '!*r2p x' # run commands via r2pipe\\n\n</code></pre>\n<p>so the file address of an arbitrary string inside the arbitrary binary is\n<strong>0x000131f8</strong><br/>\nvirtual address of the arbitrary string inside the arbitrary binary is\n<strong>0x1400143f8</strong></p>\n<p>we are trying to find if any xrefs exist to this address using the command axt<br/>\n(to learn yourself do a? b? c? d? to know what commands exist and what subcommands exist )</p>\n<pre><code>C:\\&gt;r2 -qq -c \"axt?;q\" -\nUsage: axt[?gq*]  find data/code references to this address\n| axtj [addr]  find data/code references to this address and print in json format\n| axtg [addr]  display commands to generate graphs according to the xrefs\n| axtq [addr]  find and list the data/code references in quiet mode\n| axt* [addr]  same as axt, but prints as r2 commands\n</code></pre>\n<p>so axt address will show if any xrefs exist</p>\n<p>lets learn something new here<br/>\n( try to learn why  I am not using the address as shown above ?.<br/>\nwhat is the backtick doing and more importantly where you can find it using ? in radare2 help.<br/>\nwhat does the [] (square brackets do ?<br/>\nhow the whole things get magically converted to  an apparent address</p>\n<pre><code>[0x140012e60]&gt; axt `iz~:6[2]`\nmain 0x140001253 [DATA] lea rdx, str.Usage:_r2__c__r2p_x__run_commands_via_r2pipe_n\n[0x140012e60]&gt;  \n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jan 1, 2022 at 4:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "SRobertJames",
                    "text": "<span class=\"comment-copy\">Thank you.  Can you please explain what each of those three commands does, so that I can learn? Especially what is the point of the first <code>ps</code>, which just seems to display a usage message.</span>",
                    "time": null
                }
            ]
        }
    ]
}