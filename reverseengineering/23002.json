{
    "title": "Strange function in Disassembly (IDA)",
    "link": "https://reverseengineering.stackexchange.com/questions/23002/strange-function-in-disassembly-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was reversing one executable in IDA and found out the function with this structure:</p>\n<pre><code>.text:0058A6E0 sub_58A6E0      proc near               \n.text:0058A6E0\n.text:0058A6E0 var_4           = dword ptr -4\n.text:0058A6E0\n.text:0058A6E0                 push    ecx\n.text:0058A6E1                 mov     ecx, ds:SHAppBarMessage\n.text:0058A6E7                 mov     eax, offset loc_612BC0\n.text:0058A6EC                 or      eax, offset loc_612BBA\n.text:0058A6F1                 or      eax, offset loc_612BB4\n.text:0058A6F6                 or      eax, offset loc_612BAE\n.text:0058A6FB                 or      eax, ecx\n.text:0058A6FD                 mov     ecx, ds:ShellExecuteW\n.text:0058A703                 or      eax, ecx\n.text:0058A705                 mov     ecx, ds:SHGetFileInfoW\n.text:0058A70B                 or      eax, ecx\n.text:0058A70D                 mov     ecx, ds:VariantInit\n.text:0058A713                 or      eax, ecx\n.text:0058A715                 mov     ecx, ds:VariantClear\n.text:0058A71B                 or      eax, ecx\n.text:0058A71D                 mov     ecx, ds:VariantCopy\n.text:0058A723                 or      eax, ecx\n.text:0058A725                 mov     ecx, ds:VariantCopyInd\n.text:0058A72B                 or      eax, ecx\n.text:0058A72D                 mov     ecx, ds:VariantChangeType\n...\n\nLots of different functions.\n\n...\n.text:0058B8B8                 or      eax, ecx\n.text:0058B8BA                 mov     ecx, ds:RegCloseKey\n.text:0058B8C0                 or      eax, ecx\n.text:0058B8C2                 mov     ecx, ds:RegOpenKeyExW\n.text:0058B8C8                 or      eax, ecx\n.text:0058B8CA                 mov     ecx, ds:RegQueryValueExW\n.text:0058B8D0                 or      eax, ecx\n.text:0058B8D2                 mov     ecx, dword_617AC4\n.text:0058B8D8                 or      eax, offset loc_6129F8\n...\nRepeating simillar stuff\n...\n.text:0058B8F6                 or      eax, offset loc_6129D4\n.text:0058B8FB                 or      eax, ecx\n.text:0058B8FD                 mov     ecx, [esp+4+var_4]\n.text:0058B901                 or      eax, offset loc_6129CE\n.text:0058B906                 or      eax, offset loc_6129C8\n...\nRepeating simillar stuff\n...\n.text:0058B938                 or      eax, offset loc_61298C\n.text:0058B93D                 or      eax, offset loc_612986\n.text:0058B942                 or      eax, ecx\n.text:0058B944                 pop     ecx\n.text:0058B945                 retn\n.text:0058B945 sub_58A6E0      endp\n</code></pre>\n<p>I have tried to find what it is and why it was used, but I found literally nothing about it. It's not the first time I see similar function, so I really want to know what is it. It doesn't make any sense for me and simply abusing the imports. Thank you.</p>\n<p>UPD: There is a hex values for some part of this function.</p>\n<pre><code>C1 8B 0D 20 65 61 00 0B  C1 8B 0D 1C 65 61 00 0B\nC1 8B 0D 18 65 61 00 0B  C1 8B 0D 14 65 61 00 0B\nC1 8B 0D 10 65 61 00 0B  C1 8B 0D 0C 65 61 00 0B\nC1 8B 0D 08 65 61 00 0B  C1 8B 0D 04 65 61 00 0B\nC1 8B 0D 00 65 61 00 0B  C1 8B 0D FC 64 61 00 0B\nC1 8B 0D F8 64 61 00 0B  C1 8B 0D F4 64 61 00 0B\nC1 8B 0D F0 64 61 00 0B  C1 8B 0D EC 64 61 00 0B\nC1 8B 0D E8 64 61 00 0B  C1 8B 0D E4 64 61 00 0B\nC1 8B 0D E0 64 61 00 0B  C1 8B 0D DC 64 61 00 0B\nC1 8B 0D D8 64 61 00 0B  C1 8B 0D D4 64 61 00 0B\nC1 8B 0D D0 64 61 00 0B  C1 8B 0D CC 64 61 00 0B\nC1 8B 0D C8 64 61 00 0B  C1 8B 0D C4 64 61 00 0B\nC1 8B 0D C0 64 61 00 0B  C1 8B 0D BC 64 61 00 0B\nC1 8B 0D B8 64 61 00 0B  C1 8B 0D B4 64 61 00 0B\nC1 8B 0D B0 64 61 00 0B  C1 8B 0D AC 64 61 00 0B\nC1 8B 0D A8 64 61 00 0B  C1 8B 0D A4 64 61 00 0B\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "74",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Matthew Darens",
    "time": "Jan 15, 2020 at 8:43",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">can you show raw bytes?</span>",
            "time": null
        },
        {
            "user": "Matthew Darens",
            "text": "<span class=\"comment-copy\">Do you mean hex values?</span>",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">yes, to see if those opcodes could be something else than code and IDA assuming them as code does it incorrectly.</span>",
            "time": null
        },
        {
            "user": "Matthew Darens",
            "text": "<span class=\"comment-copy\">Sadly, I can't find it. I have downloaded many malware samples to reverse and I can't realize which one it was. All I know, that function sub_58A6E0 was referenced once or twice, so it did not look like a loading functions by offsets.</span>",
            "time": null
        },
        {
            "user": "Matthew Darens",
            "text": "<span class=\"comment-copy\">I have updated the post with the hex input from the function. This is the <code>or      eax, ecx</code> and <code>mov     ecx, ds:\"function\"</code> repeated. I hope it can help.</span>",
            "time": null
        }
    ],
    "answers_data": []
}