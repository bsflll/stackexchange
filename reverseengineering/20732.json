{
    "title": "What is this function doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20732/what-is-this-function-doing",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have this function, named <code>__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm</code>.</p>\n<p>And this is the relevant assembly:</p>\n<pre><code>mov     rdi, [rbp+var_A80]\nmov     rsi, [rbp+var_A88] \nmov     rdx, [rbp+string_length]\ncall    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm \n</code></pre>\n<p>From what I've noticed by looking at the registers before and after calling the function, the address of RSI is incremented by string_length, but I still have no idea what RDI is doing.</p>\n<p>Another weird thing is that the string length reported by the register is 0x046, but the address is incremented by 0x040.</p>\n<p>The RDI is <code>00007FFEEFBFF240</code> before the call, <code>0000000100400040</code> after it.</p>\n<p>EDIT:</p>\n<p>IDA is not letting me debug the function, as it throws SIGBUS.</p>\n<p>I am slowly reversing the function, i'll update here with progress.</p>\n<p>RDI is compared with 0FFFFFFFFFFFFFFF0h (Why?)</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "295",
    "tags": [
        "ida",
        "binary-analysis"
    ],
    "user": "G. Ramistella",
    "time": "Feb 27, 2019 at 16:05",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">This is most likely just a <code>std::string</code> constructor. From personal experience with STL code, take educated guesses and move on. You'll turn crazy if you reverse all of it. I usually just check xrefs to some function and if it looks like it may be simply creating an <code>std::string</code> from a C string, I treat the function as such until further context shows it doesn't.</span>",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "<span class=\"comment-copy\">One more tip to make code more readable: Go to <code>Options -&gt; Demangled names -&gt; Select names</code> so you don't have to look at 500 character mangled names all day.</span>",
            "time": null
        },
        {
            "user": "blabb",
            "text": "<span class=\"comment-copy\">it is a gcc demangled name _std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init(char const*, unsigned long) as suggested turn on demangling in options and iirc ida should probably show it as standard function using flirt</span>",
            "time": null
        }
    ],
    "answers_data": []
}