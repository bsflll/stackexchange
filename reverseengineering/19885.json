{
    "title": "Reverse Engineering bios of ATM Machine",
    "link": "https://reverseengineering.stackexchange.com/questions/19885/reverse-engineering-bios-of-atm-machine",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I bought an Hyosung NH1500 off Offer-up and it boots up and initializes some peripherals and then spits out and error of \"COM download is failed\". I've searched Google and 0 results came up, I've been searching and reading everything I can about ATMs and reverse engineering them but there's not much information. I was able to find the ATM's update file and in the update file is a file called <code>boot.bin</code> and when I throw it into IDA Pro and set processor to ARM Little-Endian ARMv4T because the processor is an S3C2410A and that's what the datasheet said but I cannot figure out the address to load the binary at to get any disassembled code that looks correct, but inside that file is the string \"COM download is failed\".</p>\n<p>So what I am asking is, can anyone help me find the loading address of <code>bios.bin</code> in the update file located <a href=\"https://ufile.io/4xbb1\" rel=\"nofollow noreferrer\">here</a>.</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "633",
    "tags": [
        "disassembly",
        "binary-analysis",
        "decompilation",
        "firmware"
    ],
    "user": "flipbeatz",
    "time": "Nov 14, 2018 at 11:23",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Have a look at <a href=\"https://www.researchgate.net/publication/294112252_Determining_image_base_of_firmware_for_ARM_devices_by_matching_literal_pools\" rel=\"nofollow noreferrer\">this paper</a> perhaps the method can be applied to your MIPS device as well.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The files in the update are <strong>not ARM</strong> but classic 16-bit x86 code. For example, loading <code>bios.bin</code> at F000:0000 and starting disassembly from F000:FFF0 (standard x86 entrypoint) produces nice code:</p>\n<pre><code>cseg:FFF0                _reset:                            \ncseg:FFF0                                                   \ncseg:FFF0 FA                             cli\ncseg:FFF1 BA A4 FF                       mov     dx, 0FFA4h\ncseg:FFF4 B8 02 80                       mov     ax, 8002h\ncseg:FFF7 EF                             out     dx, ax\ncseg:FFF8 EA 20 00 00 F0                 jmp     far ptr loc_F000_20\n</code></pre>\n<p>The code is apparently hardware-specific and does not resemble much the classic BIOS of the generic PCs. </p>\n</div>",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Nov 14, 2018 at 19:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}