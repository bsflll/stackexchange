{
    "title": "In iOS, how can I find all hooked functions in substrate tweak",
    "link": "https://reverseengineering.stackexchange.com/questions/6151/in-ios-how-can-i-find-all-hooked-functions-in-substrate-tweak",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to reverse a compiled tweak. As a first step, I want to find out all the functions it hooks. I can find all the calls to substrate framework functions, but I didn't figure out which functions are hooked (<code>r0</code>). What is the best way to do this?</p>\n<ol>\n<li><p>How can I start an app using <code>gdb</code> instead of attaching to a running process. The straightforward way results in a <code>SIGABRT</code> and the call stacks look something like</p>\n<pre><code>#0  0x39ee91f0 in __pthread_kill ()\n#1  0x39f53796 in pthread_kill ()\n#2  0x39e99fdc in abort ()\n#3  0x33bdec10 in GSRegisterPurpleNamedPort ()\n#4  0x33bde890 in _GSEventInitialize ()\n#5  0x31604f38 in UIApplicationMain ()\n#6  0x0022d97c in ?? ()\n#7  0x000910c8 in ?? ()\n</code></pre></li>\n<li><p>I tried to write a tweak to hook into the substrate framework functions, e.g. <code>MSHookFunction</code>.</p>\n<pre><code>#include &lt;CydiaSubstrate.h&gt;\n\nvoid (*oldMSHookFunction)(void *, void *, void **);\n\nvoid newMSHookFunction(void *symbol, void *hook, void **old) {\n    printf(\"CC_HOOKED\\n\");\n    oldMSHookFunction(symbol, hook, old); \n }\n\n__attribute__((constructor)) static void initialize() {\n    NSLog(@\"CC_LOADED\");\n    MSHookFunction(MSHookFunction, &amp;newMSHookFunction, &amp;oldMSHookFunction);\n }\n</code></pre></li>\n</ol>\n<p>With <code>syslog</code>, I found that my tweak is successfully loaded with <code>CC_LOADED</code> printed and there were other tweaks loaded after mine. However, no <code>CC_HOOKED</code> is printed out. What happened ?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ios"
    ],
    "user": "c c",
    "time": "Sep 1, 2014 at 18:52",
    "comments": [
        {
            "user": "c c",
            "text": "<span class=\"comment-copy\">The second way hooks successfully. <code>printf</code> doesn't print to syslog. Still don't know how to fix the first way.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>#include \"substrate.h\"\n#include &lt;dlfcn.h&gt;\n\nvoid resolveSymbol(const void *addr) {\n    Dl_info info;\n    if (dladdr(addr, &amp;info)) {\n        NSLog(@\"&lt;hooksubstrate&gt; Resolved symbol at address %p: dli_fname %s, dli_fbase %p, dli_sname %s, dli_saddr %p\", addr, info.dli_fname, info.dli_fbase, info.dli_sname, info.dli_saddr);\n    }\n    else {\n        NSLog(@\"&lt;hooksubstrate&gt; Can't resolve symbol at address %p\", addr);\n    }\n}\n\nvoid (*oldMSHookFunction)(void *, void *, void **);\n\nvoid newMSHookFunction(void *symbol, void *hook, void **old) {\n    NSLog(@\"&lt;hooksubstrate&gt; MSHookFunction: symbol %p, new %p, old %p\", symbol, hook, old);\n    resolveSymbol(symbol);\n    resolveSymbol(hook);\n    resolveSymbol(old);\n    oldMSHookFunction(symbol, hook, old);\n}\n\nvoid (*oldMSHookMessageEx)(Class, SEL, IMP, IMP *);\n\nvoid newMSHookMessageEx(Class c/*lass*/, SEL s/*elector*/, IMP replacement, IMP *result) {\n    NSLog(@\"&lt;hooksubstrate&gt; MSHookMessageEx: class %@, selector %@, new %p, old %p\", NSStringFromClass(c/*lass*/), NSStringFromSelector(s/*elector*/), replacement, result);\n    resolveSymbol((const void *) *replacement);\n    resolveSymbol((const void *) result);\n    oldMSHookMessageEx(c/*lass*/, s/*elector*/, replacement, result);\n}\n\n__attribute__((constructor))\nstatic void initialize() {\n    MSHookFunction(MSHookMessageEx, &amp;newMSHookMessageEx, &amp;oldMSHookMessageEx);\n    MSHookFunction(MSHookFunction, &amp;newMSHookFunction, &amp;oldMSHookFunction);\n    NSLog(@\"&lt;hooksubstrate&gt; Hooked into MSHookFunction &amp; MSHookMessageEx\");\n}\n</code></pre>\n<p>With sample output (for an old version)</p>\n<pre><code>&gt; cat /dev/null &gt; /var/log/syslog\n&gt; cat /var/log/syslog | grep \"Loading\"\nSep 12 17:06:54 iPad Clash of Clans[2372]: MS:Notice: Loading: /Library/MobileSubstrate/DynamicLibraries/HookSubstrate.dylib\nSep 12 17:06:54 iPad Clash of Clans[2372]: MS:Notice: Loading: /Library/MobileSubstrate/DynamicLibraries/xxCOCPlugin.dylib\n&gt; cat /var/log/syslog | grep \"&lt;cc&gt;\"\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; Hooked into MSHookFunction &amp; MSHookMessageEx\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; MSHookFunction: old 0x845fd, new 0x3af4fd\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; Resolved symbol at address 0x845fd: dli_fname /var/mobile/Applications/1A631C27-CE93-4845-B7FB-0637D600E10C/Clash of Clans.app/Clash of Clans, dli_fbase 0x4000, dli_sname (null), dli_saddr 0x0\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; Resolved symbol at address 0x3af4fd: dli_fname /Library/MobileSubstrate/DynamicLibraries/xxCOCPlugin.dylib, dli_fbase 0x3a7000, dli_sname _Z20func_hook_new_searchi, dli_saddr 0x3af4fd\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; MSHookMessageEx: class AppController, selector application:didFinishLaunchingWithOptions:, new 0x3afdb5\nSep 12 17:06:54 iPad Clash of Clans[2372]: &lt;cc&gt; Resolved symbol at address 0x3afdb5: dli_fname /Library/MobileSubstrate/DynamicLibraries/xxCOCPlugin.dylib, dli_fbase 0x3a7000, dli_sname _Z60hook_AppController_application_didFinishLaunchingWithOptionsP11objc_objectP13objc_selectorS0_S0_, dli_saddr 0x3afdb5\n</code></pre>\n</div>",
            "votes": "1",
            "user": "c c",
            "time": "Sep 28, 2014 at 1:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "GroovyCarrot",
                    "text": "<span class=\"comment-copy\">I find that MSHookFunction sets it's symbol pointer to NULL if it's trying to hook its own address, and forces a crash. Is this a recent safety feature?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can find all the hooked Objective C methods in a tweak by first doing a cross reference of _MSHookMessageEx in IDA Pro. In the functions which call _MSHookMessageEx, the method name can be seen loaded into R1, just before the call to _MSHookMessageEx.</p>\n<p>To launch an app with gdb, use debugserver. It acts as an endpoint for remote gdb or lldb on iOS. You can find more information about debugserver on this page - <a href=\"http://iphonedevwiki.net/index.php/Debugserver\" rel=\"nofollow\">http://iphonedevwiki.net/index.php/Debugserver</a></p>\n<p>Also, I would recommend using Theos (<a href=\"http://iphonedevwiki.net/index.php/Theos\" rel=\"nofollow\">http://iphonedevwiki.net/index.php/Theos</a>) to do the function hooking. It makes development of MobileSubtrate tweaks a lot easier.</p>\n<p>Judging by your question, I seem to get the idea that you're trying to hook MobileSubtrate's own functions like MSHookFunction. MobileSubstrate is only designed to hook other functions and not itself.</p>\n</div>",
            "votes": "0",
            "user": "REnoob",
            "time": "Sep 8, 2014 at 22:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c c",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. The cool thing about MobileSubstrate is it <i>can</i> hook everything, including MSHookFunction. The problem of the original code is that I should use NSLog instead of printf, and everything else works just fine.</span>",
                    "time": null
                }
            ]
        }
    ]
}