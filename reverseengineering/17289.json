{
    "title": "How to find a fuction hash when manually resolving in shellcode?",
    "link": "https://reverseengineering.stackexchange.com/questions/17289/how-to-find-a-fuction-hash-when-manually-resolving-in-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm disassembling a shellcode and I found that it resolves adress of some function manually using the hash to find function in kernel32.dll.\nexample  :</p>\n<pre><code>call findKernel32Base\n....\npush 0EC0E4E8Eh\ncall findSymbolByHash\nmov [ebp-4], eax\n</code></pre>\n<p>For this example the function resolved is LoadLibraryA, I found it by searching the hash on google but what if I don't find it on google  ? \nHow can I find the function related to the hash value without debugging the shellcode ( some manually resolve failed when I debug it so it crash ) ?</p>\n<p>Thank you !</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "443",
    "tags": [
        "shellcode"
    ],
    "user": "Neolex",
    "time": "Jan 25, 2018 at 16:43",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>iirc you cant go from a constant hash to name \nbut hash an exported name compare the generated hash with the constant </p>\n<p>you can see a discussion and an implementation <a href=\"http://www.openrce.org/blog/view/681/Shellcode_Analysis\" rel=\"nofollow noreferrer\">here</a></p>\n<p>a ripped python implementation using the discussion as follows</p>\n<pre><code>:\\&gt;cat foo.py\ndef rol32(val, amt):\n        return ( (val &lt;&lt; amt) &amp; 0xffffffff ) | ( ( val &gt;&gt; (32 - amt) ) &amp; 0xffffffff )\n\ndef ror32(val, amt):\n        return ( (val &gt;&gt; amt) &amp; 0xffffffff ) | ( ( val &lt;&lt; (32 - amt) ) &amp; 0xffffffff )\n\ndef add32(val, amt):\n        return (val + amt) &amp; 0xffffffff\n\ndef hash_export(name):\n    result = 0\n    index = 0\n    while(index &lt; len(name)):\n        result  = add32(ror32(result, 13), ord(name[index]) &amp; 0xff)\n        index += 1\n    return result\n\nprint hex(hash_export(\"LoadLibraryA\"))\n:\\&gt;python foo.py\n0xec0e4e8eL\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jan 25, 2018 at 18:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}