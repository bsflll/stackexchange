{
    "title": "patch function in ARM binary to always return 0",
    "link": "https://reverseengineering.stackexchange.com/questions/14152/patch-function-in-arm-binary-to-always-return-0",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an ARM binary in which I want to patch a function to always return 0.\nMy understanding is this means I need to set <code>r0</code> register to 0.</p>\n<p>The disassembly looks like this</p>\n<pre><code>STMFD           SP!, {R4-R6,LR}\n&lt;lots of code&gt;\nLDMFD           SP!, {R4-R6,PC}\n</code></pre>\n<p>Can I overwrite all of this with a <code>mov r0, 0</code> -&gt; <code>0000A0E3</code> followed by a return (<code>mov pc, lr</code> -&gt; <code>0EF0A0E1</code>)?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "arm",
        "patching"
    ],
    "user": "Remko",
    "time": "Dec 12, 2016 at 13:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As you stated, returning in ARM/Thumb is to set the R0 register and return.</p>\n<p>You can patch the program a number of ways to do what you want. You can replace the top most instructions with <code>mov r0, 0</code> and <code>mov pc, lr</code> and leaving the remaining code as is would make it not execute those instructions after <code>mov pc, lr</code> and just return to the calling function.</p>\n<pre><code>MOV R0, 0\nMOV PC, LR\n// leave the rest as is, it wont execute\n</code></pre>\n<p>You can also patch starting after  STMFD SP!, {R4-R6,LR} with MOV R0, 0 and then nopping all the way to the return statement LDMFD SP!, {R4-R6,PC}.</p>\n<pre><code>STMFD SP!, {R4-R6,LR}\nMOV R0, 0\n// NOP ALL THE WAY TO:\nLDMFD SP!, {R4-R6,PC}\n</code></pre>\n<p>You can also just patch starting after <code>STMFD SP!, {R4-R6,LR}</code> with <code>MOV R0, 0</code> and then replacing the following instruction with <code>LDMFD SP!, {R4-R6,PC}</code> to return early making the rest of the code below it un-executed.</p>\n<pre><code>STMFD SP!, {R4-R6,LR}\nMOV R0, 0\nLDMFD SP!, {R4-R6,PC}\n// leave the rest as is, it wont execute\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Ghassan Idriss",
            "time": "Dec 12, 2016 at 18:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">Yes that is what I expected but was unsure if the <code>STMFD / LDMFD</code> was required to balance the stack</span>",
                    "time": null
                }
            ]
        }
    ]
}