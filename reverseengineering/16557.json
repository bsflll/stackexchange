{
    "title": "Building a control flow graph from machine code",
    "link": "https://reverseengineering.stackexchange.com/questions/16557/building-a-control-flow-graph-from-machine-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to write my own soft, that can disassemble code, and turn it into conrol flow graph. Now i know the basics of graph theory, but i don't get where i should start, do i need to basically keep the tracing of all <code>call</code>,<code>jmp</code>,<code>ret</code>,<code>jxx</code> instructions to detect individual blocks of instructions to make blocks of code into graph nodes? Can someone give me kick where to start?</p>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "machine-code"
    ],
    "user": "WokNoodlesWithOysterSauce",
    "time": "Oct 16, 2017 at 0:50",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<span class=\"comment-copy\">did you try at least with this approach and stumbled upon some issues? I think with such formulated question this is too broad</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This could go serveral ways depending on whatever you want to use third party software. For example, you could use the stream-disassembler <strong>diStorm</strong> to implement linear disassembly. When you have to keep track of all branch targets and progress then one after another starting at the entry point.</p>\n<p>If you want to do this cross-platform, you could even pitch in an intermediate language like <strong>VEX</strong> or <strong>REIL</strong>. </p>\n<p>Remember though, that finding the next branch to disassemble isn't always easy: You will encounter problems with opaque predicates and indirect branches... you could implement and evaluate data-flow analysis at this point, but this would go to far.</p>\n<p>Some concepts:</p>\n<p><strong>Linear disassembly</strong>: Start at the given offset and go. You can get the start of the next address from the length of the instruction before.</p>\n<p><strong>Recursive disassembly</strong>: Start linear disassembly at each branch target starting from the entry point.</p>\n<p><strong>Heuristic disassembly</strong>: This term often describes everything improving on the recursive disassembly for example by detecting jump tables, opque prediates or speculative disassembly of code sections to discover more code.</p>\n<p>Good luck</p>\n</div>",
            "votes": "7",
            "user": "Nordwald",
            "time": "Oct 16, 2017 at 5:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The techniques already described by the others are quite well known and, unfortunately incorrect in many cases. The current state-of-the-art in matter of disassembly is using what we call '<em>symbolic execution</em>'.</p>\n<p>Basically, you will need to collect the semantics of each assembly instruction and explore each branch of the possible execution of the program and, when you encounter a choice (an <code>if</code> statement), you will ask the formula built from the stacking of all these instruction what are the conditions to get a <code>true</code> and a <code>false</code>. It will give you the feasible paths and the associated inputs you need to feed the program with to reach the <code>true</code> branch or the <code>false</code> branch of this test.</p>\n<p>This technique is quite painful to set up because you need to grab the entire semantics of each instruction of the assembly you are considering. But, it turns out that it is quite trustable and quite efficient on average programs.</p>\n<p>Here are a few links:</p>\n<ul>\n<li><a href=\"https://blog.trailofbits.com/2017/05/15/magic-with-manticore/\" rel=\"nofollow noreferrer\">Magic with Manticore</a>;</li>\n<li><a href=\"https://arxiv.org/pdf/1610.00502.pdf\" rel=\"nofollow noreferrer\">A Survey of Symbolic Execution Techniques</a>;</li>\n<li><a href=\"https://www.cs.umd.edu/~mwh/se-tutorial/symbolic-exec.pdf\" rel=\"nofollow noreferrer\">Symbolic Execution for finding bugs</a>;</li>\n<li><a href=\"https://triton.quarkslab.com/\" rel=\"nofollow noreferrer\">Triton: Dynamic Binary Analysis</a>;</li>\n<li><a href=\"http://angr.io/\" rel=\"nofollow noreferrer\">Angr</a>;</li>\n<li>... many others ...</li>\n</ul>\n</div>",
            "votes": "2",
            "user": "perror",
            "time": "Oct 17, 2017 at 8:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">Thanks for answer and resources, maybe I can continue my research if it is feasible to use for my purpose.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">Symbolic execution was what i was referring to as <i>dataflow analysis</i>. Honestly, non of these projects is realiable at all (if you consider <i>real</i> world software). There is a sound reason, why this techniques are not used in state-of-the-art analysis software</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@Norwald: First, dataflow analysis and symbolic execution are two very different things. Mostly because dataflow analysis accept to abstract some semantics away in order to terminate (this is close to abstract interpretation). Which is absolutely not the case in symbolic execution. Now, about the fact that none of the projects are reliable... your are <b>right</b>. But, the method is not really in cause for that, it is because either implementation issues or the fact that they do not symbolically cover all the environment (e.g. floating point ops). But, this method is very difficult to achieve.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Norwald's answer better at explaining default disassembly strategies. But, I want to share my experience on my discontinued project about a metamorphic virus which disassembles binary code and finds ROP chains to make the same virus semantically. </p>\n<p>You can use <strong>Capstone Framework</strong> to disassemble and <strong>GraphViz</strong> for visualization.</p>\n<p>For semantic analysis strategy, you can check code backward after disassembled all .text section and find branch instructions. After that, you can trace branching with tracing data associated with the branch instruction. For example:</p>\n<p><a href=\"https://i.sstatic.net/khFBK.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Tracing branching instructions\" src=\"https://i.sstatic.net/khFBK.jpg\"/></a></p>\n<p>I hope it works for you.</p>\n</div>",
            "votes": "2",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Mar 3, 2018 at 12:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}