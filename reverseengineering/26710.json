{
    "title": "The Knowledge of Compiler for becoming a good Reverser",
    "link": "https://reverseengineering.stackexchange.com/questions/26710/the-knowledge-of-compiler-for-becoming-a-good-reverser",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just reached the the topic of Compilers in the book \"Reversing:Secrets of Reverse Engineering\" So, I want to ask, is the knowledge of Compilers necessary for becoming a Malware Reverse Engineer?</p>\n<p>Can anyone please guide me? ☺️</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "512",
    "tags": [
        "ida",
        "debugging",
        "binary-analysis",
        "malware",
        "disassemblers"
    ],
    "user": "Ramesses II",
    "time": "Jan 8, 2021 at 19:43",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">This question is really trying to elicit opinions and therefore not suitable for this site as it stands. But let me try to answer by stating the obvious: a reverse (code) engineer usually has to excel in knowledge about all aspects of how the subject matter came to be. So yes, it's necessary. How much it matters will vary. But to give you a glance, you will quickly become accustomed to how certain compilers produce code and will notice when this is not the case. This matters when you are looking at protection/anti-debugging mechanisms et cetera.</span>",
            "time": null
        },
        {
            "user": "Ramesses II",
            "text": "<span class=\"comment-copy\">Thanks ☺️ Understood</span>",
            "time": null
        },
        {
            "user": "R4444",
            "text": "<span class=\"comment-copy\">I would think like this - it will be easier for you to deconstruct a table piece by piece, if you know how it has been constructed. Otherwise there is a chance that you may break it. The knowledge of compiler too chain, standard defense mechanisms, common malware patterns certainly help.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you were given a piece of source code written in a language you had never seen before, you would want to study the syntax and rules of the language so that you could understand what the piece of code is doing.</p>\n<p>A compiler transforms a high-level human friendly language (C for example) into in binary instructions that a CPU can run directly. These binary instructions are called assembly.</p>\n<p>Understanding the process by which a program is compiled from human friendly languages to binary instructions is helpful for anyone writing programs because it lets you reason about what actually happens on the computer. Studying compilers helps you understand the syntax and rules at work when the compiler writes a program in assembly.</p>\n<p>Compilers do all manner of smart things to make programs \"better\" or \"faster\". They can remove code which will never be executed, they can reorder chunks of code  to use less memory, they can precompute constant values at compile time rather than running them at execution time.</p>\n<p>By understanding what a compiler can do, you can recognize how it rewrites programs when it creates assembly. As a reverse engineer, recognizing these patterns will let you reason about what the original human friendly code was doing.</p>\n<p>Knowledge of compilers and their output will make it easier to spot when something different has been introduced into an existing program.</p>\n<p>Compilers are to computers what the discovery of flight was to transportation. They are a revolutionary technological breakthrough which are often taken for granted.</p>\n<p>The two go-to references are <a href=\"https://rads.stackoverflow.com/amzn/click/com/0321486811\" rel=\"nofollow noreferrer\">Ullman</a> (commonly known as the <a href=\"https://en.wikipedia.org/wiki/Dragon_Book\" rel=\"nofollow noreferrer\">\"Dragon Book\"</a>) and <a href=\"https://www.cs.princeton.edu/%7Eappel/modern/\" rel=\"nofollow noreferrer\">Appel</a> (commonly known as the \"Tiger Book\"). Or good old <a href=\"https://en.wikipedia.org/wiki/Compiler\" rel=\"nofollow noreferrer\">Wikipedia on Compilers</a>. You can pickup a used early edition copy of <a href=\"https://rads.stackoverflow.com/amzn/click/com/0321486811\" rel=\"nofollow noreferrer\">Ullman</a> for $20. It's well worth it.</p>\n</div>",
            "votes": "4",
            "user": "pythonpython",
            "time": "Jan 7, 2021 at 15:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}