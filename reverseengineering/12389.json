{
    "title": "Intel PIN: InsertPredicatedCall and INS_InsertCall",
    "link": "https://reverseengineering.stackexchange.com/questions/12389/intel-pin-insertpredicatedcall-and-ins-insertcall",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The intel PIN manual (section Memory Reference Trace) says:</p>\n<blockquote>\n<p>We also use <code>INS_InsertPredicatedCall</code> instead of <code>INS_InsertCall</code> to\n  avoid generating references to instructions that are predicated when\n  the predicate is false <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/index.html#MAddressTrace\" rel=\"nofollow\">see here.</a></p>\n</blockquote>\n<p>_</p>\n<blockquote>\n<p>When the instruction has a predicate and the predicate is false, the\n  analysis function is not called <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/group__INS__INST__API.html#g446df8cbefd4950b78cba7c9e7346053\" rel=\"nofollow\">see here.</a></p>\n</blockquote>\n<p>If I want to analyze all instructions that are actually executed, which of the two shall I pick?</p>\n<p>I assume <code>INS_InsertPredicatedCall</code> but I am not sure because I have seen <code>INS_InsertCall</code> more often. But why would somebody use it, i.e., why would somebody want to analyze instructions </p>\n<blockquote>\n<p>that are predicated when the predicate is false</p>\n</blockquote>\n<p>? Maybe a minimal example of how the two functions lead to different results would be helpful here...</p>\n</div>",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "instrumentation",
        "pintool"
    ],
    "user": "langlauf.io",
    "time": "Apr 9, 2016 at 17:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are correct, we should use <code>INS_InsertPredicatedCall</code> instead of <code>INS_InsertCall</code> in your case. It is quite intuitive to distinguish one from the other, consider the following code</p>\n<pre><code>cond:\n  xor eax, eax\n  mov edx, 0x1\n  cmp word [esp + 0x4], 0x5\n  cmovz eax, edx\n  ret\n</code></pre>\n<p>whose <code>C</code> code is something likes</p>\n<pre><code>int cond(int input)\n{\n  return input == 0x5 ? 1 : 0;\n}\n</code></pre>\n<p>If you use <code>INS_InsertCall</code> to trace executed instructions of <code>cond(input)</code>, then <strong>for any value</strong> of <code>input</code>, you observe always the trace:</p>\n<pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\ncmovz eax, edx\nret\n</code></pre>\n<p>But if you use <code>INS_InsertPredicateCall</code>, then for <code>input != 0x5</code>, you will observe only:</p>\n<pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\nret\n</code></pre>\n<p>since <code>cmovz</code> is a predicated instruction, it is executed only if <code>ZF = 1</code>.</p>\n</div>",
            "votes": "3",
            "user": "Ta Thanh Dinh",
            "time": "Apr 10, 2016 at 5:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}