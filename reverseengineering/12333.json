{
    "title": "What segment do ELF SHN_COMMON objects get allocated in?",
    "link": "https://reverseengineering.stackexchange.com/questions/12333/what-segment-do-elf-shn-common-objects-get-allocated-in",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to understand the contents of an ELF relocatable object (*.o file), which appears to be a \nFortran file compiled to SPARC object code. I am looking at the sections below, which all look fine. \nNote the <code>.data</code> and <code>.bss</code> sized 0xB4 and 0x12C respectively.</p>\n<pre><code>                   sh_type: SHT_NULL     sh_flags:      sh_offset: 00000000 sh_size: 00000000 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000000 sh_entsize: 00000000\n.shstrtab          sh_type: SHT_STRTAB   sh_flags:      sh_offset: 00000034 sh_size: 00000052 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000001 sh_entsize: 00000000\n.text              sh_type: SHT_PROGBITS sh_flags: xa   sh_offset: 00000088 sh_size: 00002154 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000008 sh_entsize: 00000000\n.data              sh_type: SHT_PROGBITS sh_flags:  aw  sh_offset: 000021E0 sh_size: 000000B4 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000008 sh_entsize: 00000000\n.bss               sh_type: SHT_NOBITS   sh_flags:  aw  sh_offset: 00002298 sh_size: 0000012C sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000008 sh_entsize: 00000000\n.stab.index        sh_type: SHT_PROGBITS sh_flags:      sh_offset: 00002298 sh_size: 00000024 sh_link: 00000006 sh_info: 00000000 sh_addralign: 00000004 sh_entsize: 0000000C\n.stab.indexstr     sh_type: SHT_STRTAB   sh_flags:      sh_offset: 000022BC sh_size: 00000079 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000001 sh_entsize: 00000000\n.symtab            sh_type: SHT_SYMTAB   sh_flags:  a   sh_offset: 00002338 sh_size: 00000300 sh_link: 00000008 sh_info: 00000023 sh_addralign: 00000004 sh_entsize: 00000010\n.strtab            sh_type: SHT_STRTAB   sh_flags:  a   sh_offset: 00002638 sh_size: 00000232 sh_link: 00000000 sh_info: 00000000 sh_addralign: 00000001 sh_entsize: 00000000\n.rela.text         sh_type: SHT_RELA     sh_flags:  a   sh_offset: 0000286C sh_size: 00000150 sh_link: 00000007 sh_info: 00000002 sh_addralign: 00000004 sh_entsize: 0000000C\n</code></pre>\n<p>Looking at the symbols in the object file, I found some symbols explicitly allocated in the <code>.data</code> and \n<code>.bss</code> sections (I've trimmed the list of symbols to what I believe is relevant to the questions) as \nwell as symbols that appear to be referring to large data objects (likely arrays given that this is\na Fortran program) in the <code>SHN_COMMON</code> pseudo-section.</p>\n<pre><code>name                         type                section         value        size\n...snippage...\n11 GPB.t5matp.i              STT_OBJECT        4 .bss            000000A8         4\n12 GPB.t5matp.x1             STT_OBJECT        4 .bss            000000B0         4\n13 GPB.t5matp.xdenom         STT_OBJECT        4 .bss            000000B8         4\n14 GPB.t5matp.pbar           STT_OBJECT        4 .bss            000000C0         4\n...snippage...\n31 GPB.t5matp.rgasx          STT_OBJECT        3 .data           000000AC         4\n32 GPB.t5matp.xmolm          STT_OBJECT        3 .data           000000B0         4\n33                           STT_SECTION       5 .stab.index     00000000         0\n34                           STT_SECTION       6 .stab.indexstr  00000000         0\n35 wrncom_                   STT_OBJECT    65522 SHN_COMMON      00000008       800\n36 wrnco2_                   STT_OBJECT    65522 SHN_COMMON      00000008      6404\n37 psiinc_                   STT_OBJECT    65522 SHN_COMMON      00000008   6000000\n38 psirec_                   STT_OBJECT    65522 SHN_COMMON      00000008   4000000\n39 psichc_                   STT_OBJECT    65522 SHN_COMMON      00000008   3000000\n40 psiloc_                   STT_OBJECT    65522 SHN_COMMON      00000008    400000\n41 psicoc_                   STT_OBJECT    65522 SHN_COMMON      00000008     40000\n42 psidoc_                   STT_OBJECT    65522 SHN_COMMON      00000008   8000000\n43 t5mat_                    STT_FUNC          2 .text           00000028       756\n44 apcad_                    STT_NOTYPE        0                 00000000         0\n45 t5matp_                   STT_FUNC          2 .text           00000520      7220\n</code></pre>\n<p>Reading the ELF docs (e.g. <a href=\"http://www.sco.com/developers/gabi/2003-12-17/ch4.sheader.html\" rel=\"nofollow\">http://www.sco.com/developers/gabi/2003-12-17/ch4.sheader.html</a>)\nI read that symbols defined relative to <code>SHN_COMMON</code> sections \"...are common symbols, such\nas FORTRAN COMMON or unallocated C external variables.\" The linker is supposed to allocate\nspace for the objects, but my question is: in which segment does this allocation occur? \nPerhaps I'm missing something obvious, but it isn't clear to me which segment will end up\ncontaining these objects. The combined size of the SHN_COMMON objects greatly exceeds the\nspecified sizes of the <code>.data</code> and <code>.bss</code> sections. Is there any other metadata that\n guides the linker when it comes to SHN_COMMON sections?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "492",
    "tags": [
        "elf",
        "object-code"
    ],
    "user": "John Källén",
    "time": "Apr 3, 2016 at 20:23",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<span class=\"comment-copy\">Wild guess: as these segments are uninitialized, the linker doesn't put them in any specific segment. When the loader starts the program, it allocates memory wherever convenient, which may offen mean <code>mmap</code>, so it's not any specific segment. Think about it as a poor man's <code>malloc</code> emulation.</span>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<span class=\"comment-copy\">Would you agree that, given your guess, it would be appropriate to allocate space for these objects in the segment containing the <code>.bss</code> section, seeing as no indication is given in the file as to their final location?</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">try linking the .o and see where they end up.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The uninitialized variables are placed in the Common section before the linking process. If they are initialized in another file, they will go into the .data section, otherwise, if still uninitialized or initialized to 0, they will be put in the .bss.</p>\n</div>",
            "votes": "1",
            "user": "Christopher Baboch",
            "time": "Dec 12, 2016 at 21:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}