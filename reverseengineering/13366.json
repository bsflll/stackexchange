{
    "title": "Not enough space for shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/13366/not-enough-space-for-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am working on an exploit for a ctf-challenge and could't find any hint about my problem. My steps so far:</p>\n<ul>\n<li>I could successfully overwrite EIP with an \"jmp esp\" address and jump to my shellcode.</li>\n<li>I have determined all \"bad-chars\" which will cut my shellcode. There are none ;)</li>\n</ul>\n<p>The problem is, I have only 44 bytes of space for my shellcode and this is not enough for my shellcode. Since my egghunter can't find the rest of my shellcode, I assume it's not written in the memory. The OS is Windows 7 x86 without SP1.</p>\n<p>Is there any way to expand the space for my shellcode or to exploit the application in another way? Thanks in advance.</p>\n<p>SynTraX</p>\n</div>",
    "votes": "0",
    "answers": 4,
    "views": "4k",
    "tags": [
        "exploit"
    ],
    "user": "user17239",
    "time": "Aug 26, 2016 at 8:33",
    "comments": [
        {
            "user": "user17243",
            "text": "<span class=\"comment-copy\">Actually the application is just a server which is vulnerable to buffer overflow in a specific command send over a specific port. There is no authentication available. With \"other request\" you talking about other commands? I have fuzzed the application using spike on all other available commands and even on random commands. There was just this one buffer overflow. The goal of the application is to execute own shellcode. Another point: It's not necessary to run the application on Windows 7. Windows XP is possible as well. I have exact the same issue on Win XP as on Win7. The .text section in wh</span>",
            "time": null
        },
        {
            "user": "s3c",
            "text": "<span class=\"comment-copy\">The other commands might not be exploitable, but that doesn't mean they don't store data after you send them commands. Try sending your exploit shellcode to these commands, and your exploit containing the egg-hunter to the vulnerable command.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">@user17239: s3c is right, I was about to advise you to code a egg-hunter, this is the way to go.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do you have tried to combine different commands? First you send the reverse shell(with egg marker) with a another command and then the vulnerable command with the egghunter. \nYou have to search for a command that keeps the reverse shellcode in memory after the execution of the first command so that the egghunter can find the egg. \nVulnserver: GDOG puts the reverse shellcode in memory and KSTET sends the egghunter.\n<a href=\"https://bogner.sh/2016/04/the-hard-life-of-exploit-developers/\" rel=\"nofollow noreferrer\">https://bogner.sh/2016/04/the-hard-life-of-exploit-developers/</a></p>\n</div>",
            "votes": "2",
            "user": "wehgrzhb63",
            "time": "Nov 29, 2017 at 19:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can check for other fragmented overflows but, I recommend you to check if your egghunter works first. Another thing is bad-chars are not standard for all situations, check receiving function and search for special bad-chars.</p>\n<p>Some options:</p>\n<ul>\n<li>Send other data to server and try to find them with your egg hunter (as @s3c said)</li>\n<li>Use ret2libc and ROP chains to open backdoor (add user, set bash to listen port, download &amp; execute..)</li>\n<li>Exploit developers and malware writers developed lots of other application for little spaces using self-modifying code and compression techniques</li>\n<li>Overwrite PLT and function pointers for further information exchange</li>\n</ul>\n<p>And lots of other methods depending program semantic and implementation.</p>\n</div>",
            "votes": "1",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Dec 5, 2020 at 5:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's hard to comment without more information. It could be that there are other requests that store content in memory, which you can then look for later using your egghunter. Alternatively you could consider another attack, for example if the service supports auth, use th 44 bytes you have to patch out the auth check to always return true, etc.</p>\n</div>",
            "votes": "0",
            "user": "s3c",
            "time": "Aug 26, 2016 at 8:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "s3c",
                    "text": "<span class=\"comment-copy\">M, wasn't paying attention, Win7 likely won't allow you to change program code on non writable sections, you'll have to check if this is the case for the specific program, depends on what the code pages were marked as during compile time.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are able to store a file, say a dll, your shellcode could load said dll. See <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx\" rel=\"nofollow\">MSDN on DllMain</a></p>\n</div>",
            "votes": "0",
            "user": "asdf",
            "time": "Aug 29, 2016 at 17:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}