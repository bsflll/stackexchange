{
    "title": "Target application crashes when using ReadProcessMemory",
    "link": "https://reverseengineering.stackexchange.com/questions/12732/target-application-crashes-when-using-readprocessmemory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an interesting application that seems to crash whenever a particular region of memory is read using <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx\" rel=\"nofollow\">ReadProcessMemory</a>. I know it's not doing anything special with RPM because:</p>\n<ol>\n<li>Injecting a DLL to read that region of memory directly also causes a crash.</li>\n<li>Scanning regions with applications like <a href=\"http://www.cheatengine.org/\" rel=\"nofollow\">CheatEngine</a> also causes a crash.</li>\n</ol>\n<p>It's also not a guard region or a region with special protection flags. It's just a private R+W region.</p>\n<p>At first I thought they were installing hardware data breakpoints like those described <a href=\"http://www.codeproject.com/Articles/28071/Toggle-hardware-data-read-execute-breakpoints-prog\" rel=\"nofollow\">here</a>, but after checking the debug registers of all threads and seeing that they were all zero made me conclude that another technique is used.</p>\n<p>I suspect that they are somehow raising an exception whenever that piece of memory is read. I'm looking to understand what they're doing and how to detect it, or at the very least, make RPM not crash the application.</p>\n<p>P.S. I cannot attach a debugger to this application, and the executable is encrypted, but I do know that various TLS callbacks are used along with VEH exception handlers.</p>\n</div>",
    "votes": "2",
    "answers": 4,
    "views": "2k",
    "tags": [
        "memory",
        "exception"
    ],
    "user": "Dave",
    "time": "May 25, 2016 at 1:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Alright, it would appear that we have an answer to this. And it's a lot simpler than I thought, and actually pretty cool.</p>\n<p>Basically, they allocate some pages with no physical backing until the page is accessed. This means that any access whatsoever (even in kernel mode) will validate the page, thus allowing the application to see that the page has been validated and promptly crash the game.</p>\n<p>To avoid this, you can use <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms684949(v=vs.85).aspx\" rel=\"nofollow noreferrer\">QueryWorkingSetEx</a> or <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/dn957452(v=vs.85).aspx\" rel=\"nofollow noreferrer\">NtQueryVirtualMemory</a> and if the \"valid\" property of the returned structure is zero, then you probably shouldn't be reading that page.</p>\n<p>I can't say for certain that this is the correct answer, but it fits my analysis. If anybody has more information on this technique, specifically how to implement it with something like <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx\" rel=\"nofollow noreferrer\">VirtualAlloc</a>, I would love to learn more.</p>\n<p>P.S. The application doesn't appear to have any kernel mode access whatsoever, it's just a regular user mode application.</p>\n<p><strong>EDIT:</strong> Sample C++ implementation can be found <a href=\"https://gist.github.com/dkrutsko/d6118638b0ef711b30bfcfe5b083d067\" rel=\"nofollow noreferrer\">here</a>.</p>\n</div>",
            "votes": "2",
            "user": "Dave",
            "time": "Jan 24, 2017 at 3:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "JavaMan",
                    "text": "<span class=\"comment-copy\">let me guess, the game you were trying to RPM is either Overwatch or Wow from Blizzard? This technique has been discussed in many game cheating websites. And yes, this is the way they detect RPM</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check if attaching windbg in <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff552274(v=vs.85).aspx\" rel=\"nofollow noreferrer\">non-invasive mode</a> works. If yes, <a href=\"https://stackoverflow.com/questions/14666721/windbg-how-to-check-memory-segment-permission\">check the page permissions</a> of the target address range.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">Yep, I tried that before, and it still crashed. But I checked the page permission externally and it came up as 0x4 (PAGE_READWRITE).</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Dave: well, in that case I can only suggest checking what exactly happens using a kernel debugger.</span>",
                    "time": null
                },
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">Yep I think I might end up doing that.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Is there any kernel mode anti-debug? The ReadProcessMemory is using KeAttachProcess. Maybe there's an inline hook that stops you.</p>\n<p>Using ARK tools like PCHunter can search hooks in your system easily.</p>\n<p>And I don't think that the application can detect RPM in user mode. In fact, to detect RPM, either hooking NtReadVirtualMemory or hooking the system page fault handler is need. What's more, even if the page is protected with PAGE_NO_ACCESS, the application shouldn't crash.</p>\n<p>So I suspect that there is kernel mode hooking.</p>\n</div>",
            "votes": "0",
            "user": "Misty",
            "time": "May 25, 2016 at 22:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">I'll have to give it a try, but I want to emphesize that it's not only RPM, reading the memory directly through code injection crashes the application as well. Maybe there is some VEH magic going on but I have to read up on it.</span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">@Dave Are you sure that the reading memory operation makes the  application crash? Maybe it crashes when you inject, and that's very usual.</span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">@Dave And what's crash information? You can upload a dump of that program.</span>",
                    "time": null
                },
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">I conducted a simple test. I injected a DLL and scanned a regular region. Then I detached the DLL. I attached it again to scan another region I suspected was going to crash and it did, about 4600 bytes in.  The program has a built in crash mailer. It's not so much that it crashes but just hangs until you terminate it.</span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">have you asked in other communities? I googled it and You are trying to deal with Overwatch app.Since it is a game client, I strongly suspect there is kernel mode protect</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>VirtualProtect or WriteProcessMemory are affected by this </p>\n<p>because windows checks up the Vad Table with \nwith a internal function called \"MiCheckForConflictingNode\"\nwindows reacts to 0x00200000 what is 2 = VVadImageMap = 2\nto value 0x00400000 what is in VadTypeVadWriteWatch = 4 \nto value 0x0008000 this flag is \"NoChange\" yes (1) or no (0) either contains 0 or 1</p>\n<p>KeAttachProcess also calls a trigger im uncertain if its a flag or a function that got set</p>\n<p>the trigger from the target is made to delay executed\nit then read out that information that got left from KeAttachProcess</p>\n<p>after this the target prints a error but its only a trigger </p>\n<p>to avoid this do not use that functions or either emulate them so they dont call triggers or flags\nthere other ways too</p>\n<p>microsoft gives a .txt file what includes text that is pure scam and talks like 10 pages about that microsoft is protecting those companys</p>\n<p>and saying something like \"stack error\" what is not the case its just scamming and trolling</p>\n<p>also i figured out that this part got added to windows with over a so called \"security update\" what is rather about the take the users away the rights from his own computer</p>\n<p>thats why i never liked windbg it has a tons of dependencies</p>\n<p>as you can see this problem here </p>\n</div>",
            "votes": "0",
            "user": "Djuy Doiu",
            "time": "Feb 13, 2019 at 0:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}