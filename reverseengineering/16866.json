{
    "title": "IDAPython: How to check if an instruction is a conditional branch or jump?",
    "link": "https://reverseengineering.stackexchange.com/questions/16866/idapython-how-to-check-if-an-instruction-is-a-conditional-branch-or-jump",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to know using IDAPython if an instruction at the end of a basic block is a jump/branch instruction (like <code>B</code> or <code>JNZ</code>) and also determine if it's conditional or not. I need it in a CPU agnostic way, without relying on mnemonics.</p>\n<p>I cannot find how to do so by grepping in the $IDA_DIR/python directory.</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "joxeankoret",
    "time": "Jun 27, 2018 at 15:10",
    "comments": [
        {
            "user": "NirIzr",
            "text": "<span class=\"comment-copy\">I'm not sure I understood the phrasing, did you mean to ask if a branch is conditional or not? (i.e. the difference between <code>JMP</code> and <code>Jcc</code> instructions?)</span>",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "<span class=\"comment-copy\">I want to determine if the instructions is a branch/jump (like B or JNZ) and then also determine if it's conditional or not. But in a CPU agnostic way, without relaying on mnemonics.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can try this function that I wrote which worked just fine in some quick tests I did. You might need to implement more code to handle <em>edge cases</em>, but in general it should work.</p>\n<p>The function was written with the following generic assumptions (<em>which isn't always true</em>):</p>\n<ul>\n<li>A Branch\\Jump instruction has at least one local reference</li>\n<li>A Conditional Branch would have the flow continued to the next instruction in True/False cases.</li>\n</ul>\n<p>And here's the code which is commented where I think it'd be helpful:</p>\n<pre><code>from idaapi import *\nfrom idc import *\n\ndef check_conditional(func_ea, addr):\n    # Get: function's base address, suspicious branch/jmp address\n    # Returns: a strings which says whether the address is a Conditional Branch, Unconditional Branch or neither\n\n    f_start = get_func(func_ea).startEA\n    f_end = FindFuncEnd(f_start)\n\n    # Get local function's references made from the instruction\n    refs = CodeRefsFrom(addr, 0)\n    refs = set(filter(lambda x: x&gt;=f_start and x&lt;=f_end, refs)) \n    if refs:\n        # Add a reference to the next instruction if the flow continues to it\n        next_head = NextHead(addr, f_end)\n        if isFlow(GetFlags(next_head)):\n            # refs holds the referenced address so you can use them later\n            refs.add(next_head)\n            return \"Conditional Branch\"\n        else:\n            return \"Unconditional Branch\"           \n    else:\n        return \"Not JMP/Branch at all\"\n</code></pre>\n</div>",
            "votes": "3",
            "user": "Megabeets",
            "time": "Dec 2, 2017 at 8:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">I was thinking about something similar but wanted to get a cleaner solution</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This solution isn't 100% architecture agnostic but it is a little simpler and shouldn't be too difficult to add support for architectures with delay slots. If you are just interested whether the flow is conditional or not then you can ignore the <code>Rfirst0</code> part.</p>\n<pre><code>def conditional_branches_for(ea):\n    func = idaapi.get_func(ea)\n\n    for basicblock in idaapi.FlowChart(func):\n        # Insert logic here for getting branch for archs with delay slots\n        last_ea = PrevHead(basicblock.endEA)\n\n        # Get any Xrefs that are not part of the regular flow\n        if Rfirst0(last_ea) == idaapi.BADADDR:\n            print('Skipping {:#x} because it is not a branch'.format(last_ea))\n            continue\n\n        successors = len(tuple(basicblock.succs()))\n        if successors == 0:\n            branch_type = 'does not branch'\n        elif successors == 1:\n            branch_type = 'has an unconditional branch'\n        else:\n            branch_type = 'has a conditional branch'\n\n        print('BasicBlock at {:#x} {}'.format(last_ea, branch_type))\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Bambu",
            "time": "Dec 2, 2017 at 21:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}