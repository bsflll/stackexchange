{
    "title": "How does storing values in registers result in a functioning program? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/9525/how-does-storing-values-in-registers-result-in-a-functioning-program",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2015-08-21 15:30:07Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/9525/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm currently learning assembly, but I cannot seem to understand how storing values into registers and manipulating them results in a working program. </p>\n<p>I was wondering if you guys could provide a very easy to understand explanation on why certain things are being done within the assembly code.</p>\n<p>Take for example the Hello World program in assembly code:</p>\n<pre><code>section     .text\nglobal      _start                              ;must be declared for linker (ld)\n\n_start:                                         ;tell linker entry point\n</code></pre>\n<ol>\n<li><p>Why does the message length need to be put into the EDX register? And why is the EDX register chosen rather than a DX register or EAX register?</p>\n<pre><code>mov     edx,len                             ;message length\nmov     ecx,msg                             ;message to write\n</code></pre></li>\n<li><p>I also do not understand why we are moving 1 into the EBX register? And for that matter moving 4 into the EAX register?</p>\n<pre><code>mov     ebx,1                               ;file descriptor (stdout)\nmov     eax,4                               ;system call number (sys_write)\nint     0x80                                ;call kernel\n</code></pre>\n<p>Why are we moving 1 into EAX? What is so significant about EAX compared to the other registers? And what happened to the 4 stored in EAX previously?</p>\n<pre><code>mov     eax,1                               ;system call number (sys_exit)\nint     0x80                                ;call kernel\n\nsection     .data\nmsg     db  'Hello, world!',0xa                 ;string\nlen     equ $ - msg                             ;length of string\n</code></pre></li>\n<li><p>How does data in the individual register interact with each other? How do they know that data is stored within them? </p></li>\n</ol>\n<p>TL DR: How is it all merged to present Helloworld onto the screen? </p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "assembly",
        "x86",
        "linux"
    ],
    "user": "user36278",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jongware",
            "text": "<span class=\"comment-copy\">You may want to study a bit more before asking on Reverse Engineering. \"How do [registers] know that data is stored within them?\", for example, is an extremely na√Øve question. It's not as if a register must look somewhere to see if it <i>has</i> some value stored in it. The same goes, actually, for your other questions as well.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It would be more helpful to give a <em>full</em> sample program instead of bits and pieces. You could inline your questions using <code>;</code>-preprended lines.</p>\n<blockquote>\n<p>1) Why does the message length need to be put into the EDX register?\n  And why is the EDX register chosen rather than a DX register or EAX\n  register?</p>\n<pre><code>    mov     edx,len                             ;message length\n    mov     ecx,msg                             ;message to write\n</code></pre>\n</blockquote>\n<p>Where (in which register) each parameter lands really is a matter of the architecture (seemingly here x86_64): <a href=\"https://en.wikipedia.org/wiki/Application_binary_interface\" rel=\"nofollow\">ABI</a>. The order usually is the same as for the C runtime functions which are the frontend to the syscalls, here <a href=\"http://man7.org/linux/man-pages/man2/write.2.html\" rel=\"nofollow\"><code>write</code></a>. It's a convention between the kernel and user mode.</p>\n<blockquote>\n<p>2) I also do not understand why we are moving 1 into the EBX register?\n  And for that matter moving 4 into the EAX register?</p>\n<pre><code>    mov     ebx,1                               ;file descriptor (stdout)\n    mov     eax,4                               ;system call number (sys_write)\n    int     0x80                                ;call kernel\n</code></pre>\n</blockquote>\n<p><strong>One</strong> is literally the file number of the <a href=\"https://en.wikipedia.org/wiki/Standard_streams\" rel=\"nofollow\">standard stream</a> named <code>stdout</code>.</p>\n<p><strong>Four</strong> is the system call number (essentially an index into a table) and <strong><code>int 0x80</code></strong> is a call gate into the kernel. I.e. execution transitions into the kernel and the respective system call (here <code>sys_write</code>) knows where to take the parameters from.</p>\n<blockquote>\n<p>Why are we moving 1 into EAX? What is so significant about EAX\n  compared to the other registers? And what happened to the 4 stored in\n  EAX previously?</p>\n</blockquote>\n<p>Usually the return value also ends up in EAX or EDX:EAX or similar. So the 4 would have been overwritten. It depends on the return type.</p>\n<p><strong>One</strong> in this case is the system call number of <code>sys_exit</code>, the kernel-side function for the libc <a href=\"http://man7.org/linux/man-pages/man2/exit.2.html\" rel=\"nofollow\"><code>exit</code></a> function.</p>\n<blockquote>\n<pre><code>    mov     eax,1                               ;system call number (sys_exit)\n    int     0x80                                ;call kernel\n\nsection     .data\n\nmsg     db  'Hello, world!',0xa                 ;string\nlen     equ $ - msg                             ;length of string\n</code></pre>\n<p>3) How does data in the individual register interact with each other?\n  How do they know that data is stored within them?</p>\n</blockquote>\n<p>They don't. The kernel picks them from these registers and the (user mode) developer simply has to know where to put these pieces of data.</p>\n<p>In the normal case the user mode developer will, however, make use of a C runtime, like glibc.</p>\n</div>",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Aug 1, 2015 at 12:44",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>int 80</code> is used to perform system calls</p>\n<p>Each  system call has an index  </p>\n<p>The index is always passed in <strong>eax</strong> register </p>\n<p>The function calls may need arguments </p>\n<p>The <strong>first five arguments</strong> are passed via <strong>ebx,ecx,edx,esi,edi</strong> registers</p>\n<p>If there are more than five arguments a special method is employed using an array pointer </p>\n<p>prototype of sys_write is as follows</p>\n<p>ssize_t sys_write(unsigned int fd, const char * buf, size_t count) </p>\n<p>index of sys_write  = 4   </p>\n<p>so    </p>\n<pre><code>eax = index == 4,    \nebx = fd    == 1,stdout    \necx = char* == msg   \nedx = count == len   \n</code></pre>\n<p>same goes to sys_exit</p>\n<p>take a look at the links below for a concise syscall index ,arguments ,prototypes , and source details</p>\n<p><a href=\"http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#note117\" rel=\"nofollow\">http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#note117</a>\n<a href=\"http://asm.sourceforge.net/syscall.html#4\" rel=\"nofollow\">http://asm.sourceforge.net/syscall.html#4</a></p>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 1, 2015 at 15:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Int 80 is a method of performing a syscall to the Linux kernel. This method is specific to Linux. </p>\n<p>Take a look at arch/x86/include/asm/unistd_32.h\nIt has documentation for this \"function\". </p>\n<p>Typically in assembly you push your inputs to any function you call in reverse order to the stack. However this is a special command where the functional inputs are stored in the registers.</p>\n<p>Take a look also at <a href=\"https://en.m.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux\" rel=\"nofollow\">https://en.m.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux</a></p>\n</div>",
            "votes": "0",
            "user": "Viktor",
            "time": "Aug 1, 2015 at 13:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}