{
    "title": "x86 ELF - argc location on stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/24694/x86-elf-argc-location-on-stack",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>According to the <a href=\"http://www.sco.com/developers/devspecs/abi386-4.pdf\" rel=\"nofollow noreferrer\">System V ABI for x86</a>, <code>esp</code> should be pointing at <code>argc</code> when entering <code>main</code>. However, I've seen many binaries where <code>argc</code> instead is retrieved from <code>esp + 4</code>, or <code>esp + 8</code>. Is this correct, or am I missing something? Also, why do these offset differ?</p>\n<p><a href=\"https://i.sstatic.net/X2FWQ.png\" rel=\"nofollow noreferrer\"><img alt=\"Figure 3-31\" src=\"https://i.sstatic.net/X2FWQ.png\"/></a></p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "740",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Martin",
    "time": "Apr 13, 2020 at 1:11",
    "comments": [
        {
            "user": "julian",
            "text": "<span class=\"comment-copy\">some of your comments were deleted for violating the <a href=\"https://reverseengineering.stackexchange.com/conduct\">code of conduct</a>. Please review it.</span>",
            "time": null
        },
        {
            "user": "Yotamz",
            "text": "<span class=\"comment-copy\">Consider that \"main\" is not always the program's entry point. There may be initialisation routines added at compile time before. If this happens, then the init procedure calls \"main\", pushing argc on the stack. After the call, [ESP] will point to the return address and [ESP+4] will contain argc. At the beginnig of main, a PUSH EBP will move ESP another 4 bytes back, now [ESP+8]=argc.</span>",
            "time": null
        },
        {
            "user": "Martin",
            "text": "<span class=\"comment-copy\">@Yotamz yes, I figured that much. In that case, neither _start nor main have esp pointing at argc, so neither comply with what the ABI says, correct?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think your confusion stems from the fact that quoted part of the spec is talking about the <em>process entry point</em> which is a different concept from the C <code>main</code> function. The <code>main</code> is called by the C library startup code so it will follow the standard calling sequence rather than \"Initial process stack layout\". For 386, it means that <code>argc</code> will be the first value passed on the stack after the return address, and <code>argv</code> will be the second. I.e. at the beginning of <code>main</code>, the layout will look like this</p>\n<pre><code>|                |\n+----------------+\n| argv           | &lt;-- esp+8\n+----------------+\n| argc           | &lt;-- esp+4\n+----------------+\n| return address | &lt;-- esp\n+----------------+\n</code></pre>\n<p>If the compiler decides to use the frame pointer, then <code>argc</code> will be typically accessed as <code>[ebp+8]</code> due to the extra 4 bytes taken by the saved <code>ebp</code>.</p>\n</div>",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 15, 2020 at 18:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}