{
    "title": "IAT Hook via Kernel Driver",
    "link": "https://reverseengineering.stackexchange.com/questions/29602/iat-hook-via-kernel-driver",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've wrote a kernel driver recently and it does multiple things, but I wanted to add a IAT hook for a certain driver.</p>\n<p>I want to hook the IAT of another driver from my driver if that makes sense.</p>\n<p>So I understand your typical IAT hook is done via DLL injection so you're within the same address space as said module.</p>\n<p><strong>The main question I'm having is can someone give an example of IAT hooking a kernel driver via a kernel driver?</strong> I can't figure it out.</p>\n<p>I've been using multiple examples of regular IAT hooking via dll injection but applying it to the Kernel driver instead.</p>\n<p><strong>Expected outcome:</strong> Driver1.sys (does the IAT hook) parses the import table of Driver2.sys and replaces the function \"DbgPrintEx\" import with a function located in Driver1.sys aka accomplishing an IAT hook.</p>\n<p><strong>Here is what I wrote / referenced:</strong></p>\n<pre><code>NTSTATUS _HOOKS_::HookFn(PVOID ModuleBase, const char* FunctionName, uintptr_t HookFunc, uintptr_t* OrigFunc) {\n\nIMAGE_DOS_HEADER DosHeader{ 0 };\nmemcpy(&amp;DosHeader, ModuleBase, sizeof(IMAGE_DOS_HEADER));\n\nIMAGE_NT_HEADERS NtHeaders{ 0 };\nmemcpy(&amp;NtHeaders, (PVOID)((uintptr_t)ModuleBase + DosHeader.e_lfanew), sizeof(IMAGE_NT_HEADERS));\n\nIMAGE_IMPORT_DESCRIPTOR ImportDescriptor{ 0 };\nIMAGE_DATA_DIRECTORY ImportsDirectory = NtHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];\n\nmemcpy(&amp;ImportDescriptor, (PVOID)((uintptr_t)ModuleBase + ImportsDirectory.VirtualAddress), sizeof(ImportDescriptor));\n\nLPCSTR LibraryName = NULL;\nPVOID Library = NULL;\nIMAGE_IMPORT_BY_NAME FunctionNamee{ 0 };\n\nwhile (ImportDescriptor.Name != NULL) {\n    memcpy(&amp;LibraryName, &amp;ImportDescriptor.Name + (uintptr_t)ModuleBase, sizeof(LibraryName));\n\n    IMAGE_THUNK_DATA OriginalFirstThunk{ 0 }, firstThunk{ 0 };\n    memcpy(&amp;OriginalFirstThunk, (PVOID)(ImportDescriptor.OriginalFirstThunk + (uintptr_t)ModuleBase), sizeof(IMAGE_THUNK_DATA));\n    memcpy(&amp;firstThunk, (PVOID)(ImportDescriptor.FirstThunk + (uintptr_t)ModuleBase), sizeof(IMAGE_THUNK_DATA));\n\n    while (OriginalFirstThunk.u1.AddressOfData != NULL) {\n\n        memcpy(&amp;FunctionNamee, (PVOID)(OriginalFirstThunk.u1.AddressOfData + (uintptr_t)ModuleBase), sizeof(IMAGE_IMPORT_BY_NAME));\n\n        Log::Debug(\"First function name -&gt; %s\\n\", FunctionNamee);\n\n        if (!strcmp(FunctionNamee.Name, FunctionName)) {\n            Log::Debug(\"FOUND FUNCTION!!! Address -&gt; %p\\n\", firstThunk.u1.Function);\n        }\n    }\n}\n\n\nreturn STATUS_SUCCESS;\n</code></pre>\n<p>This code BSOD's on: <code>memcpy(&amp;ImportDescriptor, (PVOID)((uintptr_t)ModuleBase + ImportsDirectory.VirtualAddress), sizeof(ImportDescriptor));</code></p>\n<p>Correct me if I'm wrong but since kernel drivers share the same address space I can just simply use memcpy or RtlCopyMemory to obtain the structs needed for this hook, does anyone have any references or some sort of documentation I can read?</p>\n<p>Thanks to all in advance!</p>\n<p>extra info:</p>\n<ul>\n<li>Windows 10</li>\n<li>Using VMWare for testing</li>\n<li>I'm testing the hook on my own driver</li>\n</ul>\n<p>EDIT: Posted the faulting source line that causes BSOD.</p>\n<p>Upon debugging via WinDbg(x64), the driver obtains all the addresses correctly comparing them to memory view. Except <code>ImportDescriptor</code> gets an RVA of 0x6000, when inspecting <code>ModuleBase + 0x6000</code> for the RVA it shows that this memory region is invalid, so I believe that the 0x6000 RVA is incorrect and I'm not sure why</p>\n<p><strong>BUG CHECK CODES:</strong></p>\n<ul>\n<li>BSOD Error Code: PAGE_FAULT_IN_NONPAGED_AREA</li>\n<li>BUG Check Code: 50</li>\n</ul>\n</div>",
    "votes": "3",
    "answers": 3,
    "views": "1k",
    "tags": [
        "c++",
        "function-hooking",
        "kernel-mode",
        "driver",
        "iat"
    ],
    "user": "Ballers",
    "time": "Nov 26, 2021 at 15:21",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">do the addresses passed to <code>memcpy</code> look correct? You should be able to check it in the debugger before stepping inside the call.</span>",
            "time": null
        },
        {
            "user": "Ballers",
            "text": "<span class=\"comment-copy\">The addresses being passed to memcpy look correct but upon looking at what some of the data types are receiving look incorrect, for example ImportsDirectory \t<code>IMAGE_DATA_DIRECTORY ImportsDirectory = NtHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];</code> seems to be returning an invalid virtual address, it returns 0x6000 so ImportDescriptor should be <code>DriverBase + 0x6000</code>, and viewing this memory region in WINDBG shows that this memory region is invalid. Do you know why I'm getting these logical errors? I believe I'm getting everything correctly?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The problem seems to be in the source address calculation:</p>\n<pre><code>&amp;ImportDescriptor.Name + (uintptr_t)ModuleBase\n</code></pre>\n<p>This adds the <em>address</em> of a local variable (which is on the stack) to the image base, so the result is probably some non-existent address.</p>\n<p>You should add its <em>value</em>, which is an RVA, to the image base. I.e. something like this:</p>\n<pre><code>memcpy(&amp;LibraryName, (PVOID)((ULONG_PTR)ModuleBase+ImportDescriptor.Name) , sizeof(LibraryName))\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 24, 2021 at 21:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ballers",
                    "text": "<span class=\"comment-copy\">My apologizes I posted the wrong line, but that is indeed an error I did not spot. The function never reaches that line I posted above. It actually crashes on getting the ImportDescriptor data. I edited the main post correcting my error.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, it turns out that if you're testing an IAT hook on a driver, the driver must be compiled in the release mode rather than in the debug one.</p>\n<p>If the driver is compiled in the debug mode, the RVA for the <code>Import Descriptor</code> seems to be wrong. But the issue is resolved with compiling in the release rather than in the debug mode.</p>\n<p>Thanks to all for the help.</p>\n</div>",
            "votes": "1",
            "user": "MarianD",
            "time": "Nov 25, 2021 at 16:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">This, again, sort of suggests that you were running at the wrong IRQL or similar (on account of. Unfortunately given the insufficient information in both the question and the answer, hardly anyone will get out any insights from this Q&amp;A now. We still don't know the exact bug-check code and so even someone knowing the ropes in KM will still <i>at most</i> be able to <i>guess</i> what exactly it is you encountered here. And your \"conclusion\" will lead to magical thinking by other laypeople that release mode is somehow \"safer\" and to eventual cargo cult. -1</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">neither release nor debug should alter logic if it alters logic you should actually ascertain if it is a <a href=\"https://en.wikipedia.org/wiki/Heisenbug\" rel=\"nofollow noreferrer\">HEISENBUG</a></span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@blabb this is simply untrue. I think with more than sixteen years of Windows KM development and some formal training in the subject matter, I know a thing or two. And even if you don't dabble in KM your are certainly aware that assertions don't fire in \"release\" (free) builds, but do in \"debug\" (checked) ones. Heck that's the whole reason for the name checked builds in the first place. Similarly macros expand differently. Loads of them actually. Now one could argue that this is \"technically\" not altering the logic. But in fact it is, because differently expanding macros mean different code...</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">... being executed. Not that this is a clear-cut case here, since the question didn't even originally state the bug-check code.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@0xC0000022L yes infact there are documented apis <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/realtimeapiset/nf-realtimeapiset-queryunbiasedinterrupttimeprecise\" rel=\"nofollow noreferrer\">that behave differently in release versus build</a>  i was commenting about the calculation about a  dereferenced address and / or its page being present</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is unfortunately not going to be an <em>answer</em>, because you don't give enough information. If I end up writing an answer, it will be a different one. So long I'll make this non-answer a community wiki, attempting to give clues, ask for details and point to resources.</p>\n<blockquote>\n<p>Correct me if I'm wrong but since kernel drivers share the same\naddress space I can just simply use memcpy or RtlCopyMemory [...]</p>\n</blockquote>\n<p>Uhm this statement is \"sort of\" true, but then it also isn't. It depends on so many aspects in (Windows) kernel mode. While the address space (i.e. min through max address) is <em>technically</em> the same, it depends a whole lot in which context your code executes (e.g. the IRQL) and of the attributes for the memory you attempt to access (e.g. NonPagedPool vs. PagedPool).</p>\n<p>However, this is introductory material for KM driver development, so I recommend you pick up a book such as \"Windows Kernel Programming\" from Pavel Yosifovich or even the somewhat older work \"Programming the Microsoft Windows Driver Model\" from Walter Oney. The courses offered by OSR and Yosifovich would also be a great way to learn this stuff.</p>\n<p>Besides you forgot to mention <em>which</em> bug-check code you're getting. This is very much relevant to help you. The parameters included in the bug-check can also give an idea in absence of a full memory dump (or in your case a live debug session). The parameters are those four items included alongside the bug-check code in a blue screen.</p>\n<ul>\n<li>At what IRQL is your code executing during the bug-check? You can't touch</li>\n<li>How is the code marked in your driver? (e.g. <code>PAGED_CODE()</code> or similar?)\n<ul>\n<li>Also, in case you attempt this in <code>DriverEntry</code> that one always runs at <code>PASSIVE_LEVEL</code> either way ...</li>\n</ul>\n</li>\n<li>Who is the caller of the function?</li>\n<li>Assuming you're not doing this inside an I/O request code path, you're still fairly wasteful with stack. KM code has quite the limits when it comes to available stack.</li>\n<li>All the above questions, comments, remarks also should be checked for code you call (such as <code>Log::Debug()</code>).</li>\n</ul>\n<p>That said, your above statement should be true for all intents and purposes at <code>PASSIVE_LEVEL</code> and to some extent at <code>APC_LEVEL</code>. But even then it pays of to make use of SEH for some code and make use of <code>MmIsAddressValid</code> and <code>ProbeForRead</code> and similar routines as appropriate.</p>\n<p><strong>Btw:</strong> perhaps you'd like instead to tell us what it is you're trying?  Although admittedly none of this is very closely related to RCE.</p>\n</div>",
            "votes": "1",
            "user": "2 revs0xC0000022L",
            "time": "Nov 25, 2021 at 21:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}