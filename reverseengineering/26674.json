{
    "title": "finding sequence of opcode in binary",
    "link": "https://reverseengineering.stackexchange.com/questions/26674/finding-sequence-of-opcode-in-binary",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have dis-assmebled binary and want to check if it contains particular sequence of opcodes(obtained from other reference binary). how to do that . i know plain byte\nlevel comparison wont work as as memory address etc may differ.</p>\n<pre><code>example :\n0000001806991C0                 push    rdi\n.text:00000001806991C1                 sub     rsp, 30h\n.text:00000001806991C5                 mov     [rsp+38h+var_18], 0FFFFFFFFFFFFFFFEh\n.text:00000001806991CE                 mov     [rsp+38h+arg_0], rbx\n.text:00000001806991D3                 mov     rdi, rcx\n.text:00000001806991D6                 lea     rbx, [rcx+60h]\n.text:00000001806991DA                 lea     rax, off_180B6BED0\n.text:00000001806991E1                 mov     [rbx], rax\n.text:00000001806991E4                 xor     r8d, r8d\n.text:00000001806991E7                 lea     rdx, nullsub_1\n.text:00000001806991EE                 mov     rcx, rbx\n.text:00000001806991F1                 call    sub_1800A4160\n.text:00000001806991F6                 mov     rcx, rbx\n.text:00000001806991F9                 call    sub_1800A4148\n.text:00000001806991FE                 xchg    ax, ax\n.text:0000000180699200                 lea     rdx, sub_180259E24\n.text:0000000180699207                 lea     rcx, [rdi+50h]\n.text:000000018069920B                 call    sub_180079CEC\n.text:0000000180699210                 lea     rcx, [rdi+50h]\n.text:0000000180699214                 call    sub_1800A74C4\n.text:0000000180699219                 lea     rax, off_180BE6328\n</code></pre>\n</div>",
    "votes": "1",
    "answers": 4,
    "views": "694",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "static-analysis"
    ],
    "user": "John",
    "time": "Dec 30, 2020 at 18:16",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Depending on the specific instruction set encoding, <em>regular expressions</em> operating on the binary itself may be flexible enough to ignore the parts which would change based on address.</p>\n<p>Piping the code through a naive disassembler and running the regular expression engine on the textual ouptut may be preferable to doing so on the binary as it's a lot easier to wire rules that ignore particular operands when they've been split out (though you would now be doing a multi-line match)</p>\n<p>Sometimes it's not worth worrying about the <em>right</em> tool for the job, but just whipping up some code in your favorite language-of-convenience (today, probably python) to solve a one-time need.</p>\n<p>It's also quite possible you could just do this with a text editor to find <em>part</em>  of the pattern and then manually check the candidates for a complete match./</p>\n</div>",
            "votes": "2",
            "user": "Chris Stratton",
            "time": "Dec 30, 2020 at 20:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "John",
                    "text": "<span class=\"comment-copy\">i am new bie, could you tell some example regular expression for multiple instruction in IDA or in other tool. any example would be appreciated. Thanks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Would disassembly, split off the instruction column, then diff, followed by manually comparing using side-by-side text editors (of the disassembled output of each) be fast and simple enough for a one off use.</p>\n<p>Otherwise you need a <em>smart</em> comparison that knows that registers and memory locations can be interchanged for each other as long as each is consistent throughout; resulting in the same output - and thus each section of code having an identical function, those sections would be a copy of each other.</p>\n<p>It depends on how much code you have to check and how often you intend to do this.</p>\n<p>One advantage of the so-called smart comparison is that it can iterate over the code, shifting by one address, and find every possible way to match; resulting in a few false positives that need to be manually identified.</p>\n<p>A disadvantage of relying on a disassembler is that it can miss (or go out of sync) and fail to disassemble a few sections of code; leaving some possible matches (or near matches) unfound - leading to a Copyright claim.</p>\n<p>A program capable of an exhaustive comparison may be more useful than one that only discovers low hanging fruit. It's a matter of the intended end-use and the investment in the project necessary for the results that are expected to be had.</p>\n</div>",
            "votes": "1",
            "user": "Rob",
            "time": "Dec 30, 2020 at 21:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "John",
                    "text": "<span class=\"comment-copy\">Are you suggesting manual comparison, code in which i am searching is quite big so some script in IDA or automated method would work only,</span>",
                    "time": null
                },
                {
                    "user": "Rob",
                    "text": "<span class=\"comment-copy\">No I'm not, why?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It sounds like you just want to search a binary file for some sequence of binary values. Maybe I've misread and it's more complicated than that.</p>\n<p>I'd start with good old grep.</p>\n<pre><code>cat binary.exe |  xxd -p | tr -d '\\n' | grep -o -e '774b'\n</code></pre>\n<p>Send your binary through <code>xxd -p</code> to turn it into a hex string.</p>\n<p>Remove the new lines with <code>tr -d '\\n'</code></p>\n<p>The hand it off to <code>grep -o -e '774b'</code> to search for hex value <code>774b</code>.</p>\n<p>The <code>-o</code> flag limits grep to only show the match, not the entire line (or file in this case as it's been turned into a single hex string line.</p>\n<p>If you'd like to see some characters (bytes) before and after the match, add dots (<code>.</code>) for example <code>grep -o -e '....774b....'</code> to see 2 bytes before and 2 bytes after the match.</p>\n</div>",
            "votes": "1",
            "user": "pythonpython",
            "time": "Dec 31, 2020 at 17:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you do not necessary want to use IDA, you could use radare2 and then do:</p>\n<pre><code>radare2 &lt;your_file&gt;\n</code></pre>\n<p>then do:</p>\n<pre><code>/x &lt;youropcodes&gt;\n</code></pre>\n<p>.</p>\n<p>Example:</p>\n<pre><code>/x 900a0b0c90\n</code></pre>\n<p>.</p>\n<p>To get examples of how to use this command on radare2 you could use:</p>\n<pre><code>/x?\n</code></pre>\n<p>.</p>\n<p>If you necessary want to use IDA pro for your knowledge, you could skip my answer.</p>\n</div>",
            "votes": "0",
            "user": "ultimate-anti-reversing",
            "time": "Jan 3, 2021 at 0:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}