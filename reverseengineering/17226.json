{
    "title": "Difference between 'readelf' and 'radare2' addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/17226/difference-between-readelf-and-radare2-addresses",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an MIPS binary file that I want to analyze. I am having a little trouble understanding the way elfread and r2 interpret the adressing scheme from a binary. </p>\n<p>For example, r2 finds a function named <code>bcmVlan_setDefaultAction</code> at the location <code>0x0800d318</code>:</p>\n<pre><code>[0x0800fbb8]&gt; s sym.bcmVlan_setDefaultAction  \n[0x0800d318]&gt;\n</code></pre>\n<p>While as per the .symtab table, this function is located at <code>0x0000d2c8</code></p>\n<pre><code>$ readelf -a bcmvlan.ko | grep bcmVlan_setDefaultAction\n123: 0000d2c8   616 FUNC    GLOBAL DEFAULT    2 bcmVlan_setDefaultAction\n</code></pre>\n<p>I tried some other functions too. It seems the addresses shown by readelf and r2 are corelated, but I can't find why this difference is there.</p>\n<p>Regards.</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "921",
    "tags": [
        "elf",
        "radare2",
        "address"
    ],
    "user": "Fulcrum",
    "time": "Jan 17, 2018 at 17:24",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">If the addresses are correlated, it might be because of different base addresses. Please compare the output of <code>readelf -l &lt;filename&gt; | grep LOAD</code> to the output of <code>f~LOAD0</code> from radare2. You can also check radare's base address using <code>e bin.baddr</code>. To rebase, use <code>r2 -B &lt;0xaddr&gt; &lt;filename&gt;</code>.</span>",
            "time": null
        },
        {
            "user": "Fulcrum",
            "text": "<span class=\"comment-copy\">No instance of 'LOAD' found by r2 or readelf. It seems the base address used by r2 is 0x0800000. This explains part of the problem. BTW I found your posts about 'Gameboy' and 'Simple Crackme' to be very helpful and interesting.</span>",
            "time": null
        },
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">Thanks! Mind to share the binary? It will help us understand better.</span>",
            "time": null
        },
        {
            "user": "Fulcrum",
            "text": "<span class=\"comment-copy\">That file is actually a linux kernel module (.ko) for MIPS architecture. I pulled it from my router. 'modinfo' shows that the file license is 'proprietary'. I'm not sure if I am allowed to share it. Any idea?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>.symtab</h2>\n<p>The symbol table of readelf (<code>.symtab</code>) shows you the offset of each symbol from the base of the section the symbol is in.</p>\n<p>As you showed us, when you listing the table you get something like that:</p>\n<pre><code>$ readelf --symbols &lt;filename&gt;\nSymbol table '.symtab' contains 471 entries:\n   Num:    Value  Size Type    Bind   Vis      Ndx Name\n     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 00000000     0 SECTION LOCAL  DEFAULT    2\n     2: 00000000     0 SECTION LOCAL  DEFAULT    4\n     3: 00000000     0 SECTION LOCAL  DEFAULT    6\n     4: 00000000     0 SECTION LOCAL  DEFAULT    8\n     5: 00000000     0 SECTION LOCAL  DEFAULT   10\n     6: 00000000     0 SECTION LOCAL  DEFAULT   12\n       ...    ... Truncated for readability ...   ...\n   462: 0000d2c8   616 FUNC    GLOBAL DEFAULT    2 bcmVlan_setDefaultAction\n</code></pre>\n<p>One column is interested us especially, which is the <code>Ndx</code> column. <code>readelf</code> identifies each section by an integer index. This is what Ndx stands for. The output of the <code>.symtab</code> shows us that our function <code>bcmVlan_setDefaultAction</code> belongs to Ndx number 2.</p>\n<h2>Section Table</h2>\n<p>To see which section has index number \"2\" you should execute:</p>\n<pre><code>$ readelf --sections &lt;filename&gt;\n</code></pre>\n<p>When you'll execute it you'd probably see something like this:</p>\n<pre><code>There are ?? section headers, starting at offset 0x????:\nSection Headers:\n\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] &lt;section name&gt;    &lt;type&gt;          00000000 0000?? 0000?? ??   A  0   0  4\n  [ 2] .text             &lt;type&gt;          00000000 000050 00???? 00  AX  0   0 16\n</code></pre>\n<p>You function will probably be in the <code>.text</code> section which its base address (<code>Off</code> column) is <code>0x000050</code>, i.e 0x50 bytes from the beginning of the file.</p>\n<p>Then, it should all make sense since it is what you get when subtracting the address you got from <code>readelf</code> from the one you got from <code>radare2</code>:</p>\n<pre><code>0x0d318 - 0x0d2c8 = 0x50. \n</code></pre>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Jan 18, 2018 at 9:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}