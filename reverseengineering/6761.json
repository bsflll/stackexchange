{
    "title": "Modify py2exe packed executable",
    "link": "https://reverseengineering.stackexchange.com/questions/6761/modify-py2exe-packed-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an application in Python compiled with py2exe.\nI have successfully extracted python scripts using Py2ExeDumper converted to <code>.py</code> using Easy Python Decompiler.</p>\n<p>I made some modification to the python code and recompiled <code>.py</code> files to <code>.pyc</code> files.</p>\n<p>Question : How can I rebuild the exe file using the new edited <code>.pyc</code> files ?</p>\n<p>Thanks</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "python",
        "patch-reversing"
    ],
    "user": "itseeder",
    "time": "Dec 4, 2014 at 17:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instead of trying to rebuild the EXE from the <code>.pyc</code> files, you can just use py2exe to build a new EXE from the modified <code>.py</code> files.</p>\n<p>Alternatively, if you really want to <em>replace</em> the library in the original EXE, you would need to extract the EXE's <code>PYTHONSCRIPT</code> resource with a resource editor, un-marshal the array of code objects, replace the code object of your choosing in the array, re-marshal the array of code objects, and replace the <code>PYTHONSCRIPT</code> resource data with this new marshaled stream. You can look at <code>_create_script_data</code> in <a href=\"http://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/py2exe/runtime.py\" rel=\"nofollow\">http://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/py2exe/runtime.py</a> for more details.</p>\n</div>",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Dec 4, 2014 at 18:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "itseeder",
                    "text": "<span class=\"comment-copy\">This project is very big and have a lot of .pyc files. That's the reason why i am searching to replace the entire library in exe. There is a way to make setup.py for py2exe automatically from directory?</span>",
                    "time": null
                },
                {
                    "user": "itseeder",
                    "text": "<span class=\"comment-copy\">This point it's not clear: \"replace the code object of your choosing in the array, re-marshal the array of code objects\" can you explain more detailed please?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Questions related to writing Python code to handle arrays and marshal data should be asked on <a href=\"http://stackoverflow.com/\">stackoverflow.com</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A py2exe generated executable basically consists of three main parts - <em>PYTHONSCRIPT</em>, the runtime python dll &amp; library.zip.</p>\n<p><em>PYTHONSCRIPT</em> can be modified with a decent resource editor. It is basically a marshalled array holding pyc files. The main script of the application is usually stored here.</p>\n<p>In order to make changes you need to unmarshal the code objects, decompile it to <em>py</em>, make changes, recompile back to <em>pyc</em>, marshal it back to generate a new <em>PYTHONSCRIPT</em> and finally update the executable.</p>\n<p>Modifying library.zip is easier as it is a standard zip file. It contains other <em>pyc/pyo</em> files. You can decompile them, make changes, recompile it back to <em>pyc/pyo</em>, and zip them up. Next replace the overlay in the executable with your new zip file and you are done.</p>\n<p>In order to automate some of the above steps you can use a tool <a href=\"https://sourceforge.net/projects/p2ebe/\" rel=\"nofollow\">Py2Exe Binary Editor</a>\n<br/><sub>Note: I am the author of the above tool</sub></p>\n</div>",
            "votes": "1",
            "user": "0xec",
            "time": "Dec 20, 2014 at 6:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}