{
    "title": "Decoding algorithm with checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/26453/decoding-algorithm-with-checksum",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm a newbie, so I'm asking for your help.</p>\n<p>I have to decode dumped data from an appliance because I wanted to try understand the data.</p>\n<p>The data are in this format and some information are known:</p>\n<p>7E 00 20 10 75 00 00 00 07 5F C7 6F 4F 01 <strong>05</strong> C8 .. .. .. (some other bytes that are the same for each packet)</p>\n<p>7e = <strong>start framing</strong> (Does not change)</p>\n<p>20 = <strong>length of packet</strong> (Does not change)</p>\n<p>10 75 = <strong>packet type</strong> (Does not change)</p>\n<p>00 00 00 07 = <strong>incremental number</strong>, when it reach 00 00 00 FF, the next is 00 00 01 00\nwhen checksum is failed the appliance retries with same number.</p>\n<p>5F C7 6F 4F <strong>hex timestamp</strong> (unix timestamp converted in hexadecimal)</p>\n<p>01 <strong>ALTERNATING VALUE</strong> 01 or 21 (this value alternate on each received packet)</p>\n<p>05 <strong>MISTERY BYTE</strong>, i'll explain later</p>\n<p>C8 checksum calculated with the sum of incremental number plus hex timestamp, then mod 256 and subtracted with 0x03 when the alternating value is 21 or 0x23 when alternating value is set to 01. When the resulting value is negative you have to discard all FF FF and take the last byte.</p>\n<p>The problem is the mistery byte.</p>\n<p>At first glance seems to be:</p>\n<p>When last byte of timestamp is greather than checksum, the mistery byte is: 06, else is 05.\nBut sometimes this value is \"07\"</p>\n<p>Here another example:</p>\n<p>7E 00 20 10 75 00 00 00 08 5F C7 71 73 21 <strong>06</strong> 0F .. .. ..</p>\n<p>checksum calculation method:\n00 + 00 + 00  + 08 + 5F + C7 + 71 = 0x212 (decimal 530)</p>\n<p>530 mod 256 = 18</p>\n<p>decimal 18 to hex = 12</p>\n<p>because the alternating value is 21, i have to subtract 0x3 -&gt; 12 - 0x03  = checksum = 0F</p>\n<p>now the last byte of checksum 73 is greather than 0F so the result of mistery byte seems correct to be 06</p>\n<p>the problem comes when mistery field is sometimes 07. I think that this value is not merely a comparing with last byte of timestamp with checksum, but i missed something.</p>\n<p>7E 00 20 10 75 00 00 00 87 5F C7 7B ED 21 <strong>07</strong> 12</p>\n<p>7E 00 20 10 75 00 00 00 88 5F C7 7B FF 01 <strong>07</strong> 05</p>\n<p>Here some other example that seems 06 alternate with 07:</p>\n<p>7E 00 20 10 75 00 00 00 D0 5F C7 80 89 01 <strong>06</strong> DC</p>\n<p>7E 00 20 10 75 00 00 00 D1 5F C7 80 8F 21 <strong>07</strong> 03</p>\n<p>7E 00 20 10 75 00 00 00 D2 5F C7 80 95 01 <strong>06</strong> EA</p>\n<p>7E 00 20 10 75 00 00 00 D3 5F C7 80 96 21 <strong>07</strong> 0C</p>\n<p>7E 00 20 10 75 00 00 00 D4 5F C7 80 9B 01 <strong>06</strong> F2</p>\n<p>but soon there are 07 for a lot of rows</p>\n<p>7E 00 20 10 75 00 00 00 D9 5F C7 80 A9 21 <strong>07</strong> 25</p>\n<p>7E 00 20 10 75 00 00 00 DA 5F C7 80 AA 01 <strong>07</strong> 07</p>\n<p>7E 00 20 10 75 00 00 00 DB 5F C7 80 AA 21 <strong>07</strong> 28</p>\n<p>some examples with \"05\" mistery byte.</p>\n<p>7E 00 20 10 75 00 00 01 09 5F C7 82 00 21 <strong>05</strong> AF</p>\n<p>7E 00 20 10 75 00 00 01 0A 5F C7 82 05 01 <strong>05</strong> 95</p>\n<p>7E 00 20 10 75 00 00 01 0B 5F C7 82 26 21 <strong>05</strong> D7</p>\n<p>7E 00 20 10 75 00 00 01 0C 5F C7 82 2C 01 <strong>05</strong> BE</p>\n<p>Any clue of what this mistery byte is used for?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "621",
    "tags": [
        "disassembly",
        "decryption",
        "crc",
        "dumping",
        "memory-dump"
    ],
    "user": "Daniel Davis",
    "time": "Dec 6, 2020 at 14:06",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Looks like it's just addition for the checksum, so nice job on that.</p>\n<p>The mystery byte is part of the checksum.</p>\n<p>The accumulator is 2 bytes.</p>\n<pre><code>data = \"\"\"0000AAAAAA7E00201075000000075FC76F4F0105C8\n0000AAAAAA7E00201075000000875FC77BED210712\n0000AAAAAA7E00201075000000885FC77BFF010705\"\"\".strip().split(\"\\n\")\n\nimport struct\n\nfor i,l in enumerate(data):\n    xs = bytes.fromhex(l)\n    body = xs[:-2]\n    xsum = xs[-2:]\n\n    v = 187\n    for b in body:\n        v+=b\n\n    \n    print(\"msg\",i,\"body\",body.hex(),\"checksum\",xsum.hex(),\"calcxsum\",struct.pack(\"&gt;H\",v).hex())\n</code></pre>\n<p>Run:</p>\n<pre><code>$ python3 xsumtest.py \nmsg 0 body 0000aaaaaa7e00201075000000075fc76f4f01 checksum 05c8 calcxsum 05c8\nmsg 1 body 0000aaaaaa7e00201075000000875fc77bed21 checksum 0712 calcxsum 0712\nmsg 2 body 0000aaaaaa7e00201075000000885fc77bff01 checksum 0705 calcxsum 0705\n</code></pre>\n</div>",
            "votes": "3",
            "user": "pythonpython",
            "time": "Dec 6, 2020 at 20:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Daniel Davis",
                    "text": "<span class=\"comment-copy\">Thanks. I guessed part of the algorithm by myself, observing similitude with other checksum calculation method.  Here the complete payloads <a href=\"https://pastebin.com/mkXc3Wkd\" rel=\"nofollow noreferrer\">pastebin.com/mkXc3Wkd</a>  (i can't execute your script, tried with python3.7.3 and i receive IndexError: list assignment index out of range)</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Do you have more messages which have a different length? I think the mystery byte is part of a 2byte flag field.</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Updated answer , it's a 2byte checksum with a 1byte stride with an initialization of 187. haha.</span>",
                    "time": null
                },
                {
                    "user": "Daniel Davis",
                    "text": "<span class=\"comment-copy\">Thank you, very helpful!</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">If you have any more binary messages you'd be comfortable sharing, I'd appreciate it. I'm working on some research to automate these sorts of tasks.</span>",
                    "time": null
                }
            ]
        }
    ]
}