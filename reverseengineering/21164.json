{
    "title": "ISO8859-1 serialization for strings",
    "link": "https://reverseengineering.stackexchange.com/questions/21164/iso8859-1-serialization-for-strings",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am currently investigating a weird layout for storing of what appears to be strings (medical format).</p>\n<p>Looking at the dump for a bunch of those strings here is what I see:</p>\n<pre><code>$ hexdump -C out0000 \n00000000  df ff 79 17 01 09 00 49  53 4f 38 38 35 39 2d 31  |..y....ISO8859-1|\n00000010  02 08 00 30 30 30 30 30  30 30 30                 |...00000000|\n0000001b\n$ hexdump -C out0001\n00000000  df ff 79 19 01 09 00 49  53 4f 38 38 35 39 2d 31  |..y....ISO8859-1|\n00000010  02 0a 00 83 74 83 40 83  93 83 67 83 80           |<a class=\"__cf_email__\" data-cfemail=\"2e000000005a006e00000049\" href=\"/cdn-cgi/l/email-protection\">[emailÂ protected]</a>..|\n0000001d\n$ hexdump -C out0009\n00000000  df ff 79 21 01 09 00 49  53 4f 38 38 35 39 2d 31  |..y!...ISO8859-1|\n00000010  02 12 00 91 71 95 7e 90  ac 90 6c 95 61 83 5a 83  |....q.~...l.a.Z.|\n00000020  93 83 5e 81 5b                                    |..^.[|\n00000025\n$ hexdump -C out0002\n00000000  df ff 79 16 01 09 00 49  53 4f 38 38 35 39 2d 31  |..y....ISO8859-1|\n00000010  02 07 00 46 41 4e 54 4f  4d 55                    |...FANTOMU|\n0000001a\n$ hexdump -C out0004\n00000000  df ff 79 0f 01 09 00 49  53 4f 38 38 35 39 2d 31  |..y....ISO8859-1|\n00000010  02 00 00                                          |...|\n00000013\n</code></pre>\n<p>Has anyone seen this format before ? What is this ?</p>\n<hr/>\n<p>Steps to extract those weird strings:</p>\n<ol>\n<li>You need an instance (image) from a Toshiba MRT200SP5,</li>\n<li><p>Extract the <code>Original Data</code>, using eg.:</p>\n<p>gdcmraw -t 700d,1008 toshiba_input.dcm original_data.raw</p></li>\n<li><p>Use the work in progress <a href=\"https://github.com/malaterre/TOSHIBA_MEC_MR3/blob/master/dump4.c\" rel=\"nofollow noreferrer\"><code>dump4.c</code></a> to process one portion of it (Type = WSTRING)</p></li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "96",
    "tags": [
        "binary"
    ],
    "user": "tibar",
    "time": "Apr 17, 2019 at 6:49",
    "comments": [
        {
            "user": "wisk",
            "text": "<span class=\"comment-copy\">You need to provide more information about how you get these files. For instance, the name of the used software and the kind of data it provides. All I can see here is: <code>df ff 79</code> seem to be a marker or a magic number. The following byte is the size of the next part. And ISO8859-1 is a character encoding.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>with a cursory glance it appears your data is formatted like this<br/>\n(assumed big endian  but the actual data SHORT field appears to be little endian \nyou may need to improvise )   </p>\n<p>the block is variable sized and the size is embedded prior to the data</p>\n<pre><code>typedef struct _FOO {   \nBYTE[3]       magic                 \\\\ dfff79 same in all blocks    \nBYTE[1]       siz_exc_magic&amp;siz_fld \\\\ 17,19,21,16,0f  \nint           another_magic         \\\\ 01090049  \nchar[8]       encode                \\\\ ISO8859-1   \nBYTE[1]       some_byte             \\\\ 02 same in all blocks  \nshort         act_size_of_data      \\\\ 08,0a,12,7,0   \ndata[1]       variable_sized_data\n}                \n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Apr 17, 2019 at 9:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}