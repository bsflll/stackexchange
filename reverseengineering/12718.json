{
    "title": "Reliable way to recognize STL template classes?",
    "link": "https://reverseengineering.stackexchange.com/questions/12718/reliable-way-to-recognize-stl-template-classes",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since the template classes are different between instantiation, it is extremely difficult for library recognition using universal patterns.</p>\n<p>But the control flow graph and references to system call of those template functions should be almost the same.</p>\n<p>So is there a good and reliable way to identify and recognize these STL classes ?</p>\n<p>Note: some classes using template like <code>std::string</code> is fixed. These classes can be recognized by FLAIR (Fast Library Acquisition for Identification and Recognition).</p>\n</div>",
    "votes": "6",
    "answers": 0,
    "views": "918",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "Misty",
    "time": "May 23, 2016 at 17:38",
    "comments": [
        {
            "user": "tibar",
            "text": "<span class=\"comment-copy\">STL is mostly about performance and algorithm, I do not see how you could recognize <code>std::copy</code> after it has been optimized...</span>",
            "time": null
        },
        {
            "user": "Misty",
            "text": "<span class=\"comment-copy\">oh I know there must be some stl functions cannot be recognized, but classes like vector should be easier to be recognized. Some inline functions can be ignored simply.</span>",
            "time": null
        }
    ],
    "answers_data": []
}