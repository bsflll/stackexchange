{
    "title": "Analyzing Game Map/Terrain Format",
    "link": "https://reverseengineering.stackexchange.com/questions/13870/analyzing-game-map-terrain-format",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to understand how this game builds the map and terrain. Specially if it uses a heightmap. So I can write an app that can view the map and move around (camera) freely.</p>\n<p>First, I'm not entirely sure if the game actually uses height maps. But it was made in 2000/2001, so it makes sense if it did.</p>\n<p>The following files are loaded each time a map is loaded. I'll use <strong>map 4</strong> as an example from here on:</p>\n<pre><code>/map/map4.spt\n/map/map4.inf\n/map/map4.obj\n/terrain/chunk4.dat\n/terrain/addterrain4.ctr\n/terrain/addterrain4.obj\n/terrain/addterrain4.inf\n/terrain/addterrain4.t16\n/terrain/terrain4.obj\n/terrain/terrain4.t16\n</code></pre>\n<h1>*.T16</h1>\n<p>I know these are textures.</p>\n<p>Here is <code>terrain4.t16</code> unpacked (terrain):<br/>\n<a href=\"https://i.sstatic.net/YDXDW.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/YDXDW.png\"/></a></p>\n<p>And here is <code>addterrain4.t16</code> unpacked (building):<br/>\n<a href=\"https://i.sstatic.net/shxOj.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/shxOj.png\"/></a></p>\n<h1>*.SPT</h1>\n<p>I know this is an encrypted script. It contains things like ambient light color, sky color and other configurations for the map. </p>\n<h1>*.CTR</h1>\n<p>I'm not sure about this yet but I don't think this is the heightmap.</p>\n<h1>*.INF</h1>\n<p>I'm not sure about this yet but I don't think this is the heightmap. But it looks like positions for buildings/objects on the map.</p>\n<h1>*.OBJ</h1>\n<p>Although this sounds like a 3D object file, it isn't. So far I was able to parse this file with this script:</p>\n<pre><code>with open(\"map4.obj\", \"rb\") as bin:\n    bin.seek(0, 2)\n    file_size = bin.tell()\n\n    bin.seek(0)\n\n    unk1 = struct.unpack(\"&lt;h\", bin.read(2))[0]\n\n    width  = struct.unpack(\"&lt;h\", bin.read(2))[0]\n    height = struct.unpack(\"&lt;h\", bin.read(2))[0]\n\n    c_width = struct.unpack(\"&lt;h\", bin.read(2))[0]\n    c_heigth = struct.unpack(\"&lt;h\", bin.read(2))[0]\n\n    size1 = struct.unpack(\"&lt;I\", bin.read(4))[0]\n    size2 = struct.unpack(\"&lt;I\", bin.read(4))[0]\n\n    bin.seek(50)\n\n    # (1, 76, 76, 304, 304, 5776, 92416)\n    print(unk1, width, height, c_width, c_heigth, size1, size2)\n\n    for x in range(size1):\n        unk2 = struct.unpack(\"&lt;BBBB\", bin.read(4))\n\n    for y in range(size2):\n        unk3 = struct.unpack(\"&lt;BB\", bin.read(2))\n</code></pre>\n<p>The script reads the file till the end so I think I got the parsing right. But I still don't understand what those bytes (unk2, unk3) mean.</p>\n<p>Here are the first few bytes: <code>(1, 76, 76, 304, 304, 5776, 92416)</code>.</p>\n<p><code>76x76</code> seems to me like an image widthxheight. This is the part where I start to suspect that this must be the heightmaps.</p>\n<p><code>304x304</code> is the size of the map coordinates, if I go to the bottom right part of the map, the coords show me x304 y304. <code>(0,0) (304,304)</code></p>\n<p><code>5776</code> is 76*76.</p>\n<p><code>92416</code> is 304*304.</p>\n<p>I'm guessing the cellspacing is 4, because <code>304/76 = 4</code>.</p>\n<blockquote>\n<p>Hmmm... Maybe I should be reading <strong>terrain4.obj</strong> instead of <strong>map4.obj</strong> ???</p>\n</blockquote>\n<p>Checking <strong>terrain4.obj</strong> (filesize: 2,194,888)</p>\n<pre><code>with open(\"terrain4.obj\", \"rb\") as bin:\n    bin.seek(0, 2)\n    file_size = bin.tell()\n\n    bin.seek(0)\n\n    width  = struct.unpack(\"&lt;I\", bin.read(4))[0]\n    height = struct.unpack(\"&lt;I\", bin.read(4))[0]\n\n    print(width, height)\n\n    for x in range(width*height):\n        unk1 = struct.unpack(\"&lt;fffHH\", bin.read(16))\n        print(unk1)\n\n        for y in range(10):\n            unk2 = struct.unpack(\"&lt;ffffffBBBBff\", bin.read(36))\n            print(unk2)\n\n        unk3 = struct.unpack(\"&lt;HH\", bin.read(4))\n        print(unk3)\n\n    print((bin.tell()-file_size) == 0)\n</code></pre>\n<p>results of prints (last few lines):</p>\n<pre><code>(64656, 900)\n(9536.0, 0.0, -9664.0, 8, 60)\n(9536.0, 367.3583679199219, -9664.0, 0.6106882691383362, 0.7202576398849487, -0.3290725350379944, 125, 125, 125, 255, 0.5, 0.5)\n(9472.0, 439.9534912109375, -9664.0, 0.6727219820022583, 0.5930730104446411, -0.4423908591270447, 72, 72, 72, 255, 0.0, 0.5)\n(9472.0, 529.98291015625, -9600.0, 0.5103294849395752, 0.5574429631233215, -0.6548444032669067, 91, 91, 91, 255, 0.0, 0.0)\n(9536.0, 428.7572021484375, -9600.0, 0.5774530172348022, 0.5274922251701355, -0.6231372356414795, 83, 83, 83, 255, 0.5, 0.0)\n(9600.0, 382.6859436035156, -9600.0, 0.32311421632766724, 0.6967470049858093, -0.6404222846031189, 110, 110, 110, 255, 1.0, 0.0)\n(9600.0, 331.24566650390625, -9664.0, 0.4635116457939148, 0.8214490413665771, -0.3322325348854065, 149, 149, 149, 255, 1.0, 0.5)\n(9600.0, 326.34356689453125, -9728.0, 0.5303630828857422, 0.847672700881958, -0.012873286381363869, 122, 122, 122, 255, 1.0, 1.0)\n(9536.0, 370.5403747558594, -9728.0, 0.603411078453064, 0.7964465618133545, 0.039598409086465836, 107, 107, 107, 255, 0.5, 1.0)\n(9472.0, 423.61572265625, -9728.0, 0.6945193409919739, 0.7165639996528625, -0.06464438885450363, 97, 97, 97, 255, 0.0, 1.0)\n(9472.0, 439.9534912109375, -9664.0, 0.6727219820022583, 0.5930730104446411, -0.4423908591270447, 72, 72, 72, 255, 0.0, 0.5)\n(64656, 900)\n(9664.0, 0.0, -9664.0, 8, 60)\n(9664.0, 323.531005859375, -9664.0, -0.16421209275722504, 0.9194830656051636, -0.3571907877922058, 202, 202, 202, 255, 0.5, 0.5)\n(9600.0, 331.24566650390625, -9664.0, 0.11137175559997559, 0.9239282011985779, -0.3659959137439728, 199, 199, 199, 255, 0.0, 0.5)\n(9600.0, 382.6859436035156, -9600.0, 0.32311421632766724, 0.6967470049858093, -0.6404222846031189, 110, 110, 110, 255, 0.0, 0.0)\n(9664.0, 370.8617248535156, -9600.0, -0.030711062252521515, 0.8036384582519531, -0.5943247675895691, 202, 202, 202, 255, 0.5, 0.0)\n(9728.0, 387.73626708984375, -9600.0, -0.3357184827327728, 0.8114649057388306, -0.478348970413208, 202, 202, 202, 255, 1.0, 0.0)\n(9728.0, 359.2901306152344, -9664.0, -0.4858676493167877, 0.869583010673523, -0.0880785584449768, 202, 202, 202, 255, 1.0, 0.5)\n(9728.0, 373.6744079589844, -9728.0, -0.6241185665130615, 0.7812370657920837, -0.012026631273329258, 202, 202, 202, 255, 1.0, 1.0)\n(9664.0, 302.3572998046875, -9728.0, -0.23366673290729523, 0.9231089949607849, -0.3054006099700928, 202, 202, 202, 255, 0.5, 1.0)\n(9600.0, 326.34356689453125, -9728.0, 0.23029862344264984, 0.9547197222709656, -0.18834225833415985, 177, 177, 177, 255, 0.0, 1.0)\n(9600.0, 331.24566650390625, -9664.0, 0.11137175559997559, 0.9239282011985779, -0.3659959137439728, 199, 199, 199, 255, 0.0, 0.5)\n(64656, 900)\nTrue\n</code></pre>\n<h1>*.DAT</h1>\n<p>First few bytes of 2,127,308 total:</p>\n<pre><code>00000000 19 00 00 00 00 01 00 00 23 00 00 00 00 00 80 42 ........#......B\n00000016 00 00 FF 43 00 00 80 C2 00 00 00 00 FF FF 7F 3F ...C...........?\n00000032 00 00 00 00 7A 7A 7A FF 00 00 00 3F 00 00 00 3F ....zzz....?...?\n00000048 00 00 00 00 00 00 FF 43 00 00 80 C2 00 00 00 00 .......C........\n00000064 FF FF 7F 3F 00 00 00 00 7A 7A 7A FF 00 00 00 00 ...?....zzz.....\n00000080 00 00 00 3F 00 00 00 00 00 00 FF 43 00 00 00 80 ...?.......C....\n00000096 00 00 00 00 FF FF 7F 3F 00 00 00 00 7A 7A 7A FF .......?....zzz.\n00000112 00 00 00 00 00 00 00 00 00 00 80 42 00 00 FF 43 ...........B...C\n</code></pre>\n<p>I'm not sure about this one though.</p>\n<p><strong>My Questions:</strong></p>\n<ul>\n<li>Could the .obj file possibly be the heightmap, if not, what is it?</li>\n<li>Any idea what the .CTR and .INF files are? (guesses?)</li>\n</ul>\n<p><strong>Additional Information:</strong></p>\n<p>The map 4 is called Lava Canyon. It features paths surrounded by canyons of lava.</p>\n<p>Minimap Texture:</p>\n<p><a href=\"https://i.sstatic.net/ZJLpo.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/ZJLpo.png\"/></a></p>\n<p>Related files: <a href=\"http://www.mediafire.com/file/cab16yc1sbr3gpw/map_files.zip\" rel=\"nofollow noreferrer\">Download From Mediafire</a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "370",
    "tags": [
        "binary-analysis",
        "hex"
    ],
    "user": "majidarif",
    "time": "Nov 6, 2016 at 4:09",
    "comments": [
        {
            "user": "majidarif",
            "text": "<span class=\"comment-copy\">okay, so they're actually not using heightmaps. Instead its a 3D object of the map. <code>terrain4.obj</code> are vertices.</span>",
            "time": null
        }
    ],
    "answers_data": []
}