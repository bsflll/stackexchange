{
    "title": "Function calls to unmapped memory",
    "link": "https://reverseengineering.stackexchange.com/questions/32864/function-calls-to-unmapped-memory",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm examining an iOS framework (extracted from a dyld shared cache) and there are a lot of branch-link instructions to functions which don't exist.  For example,</p>\n<pre><code>bl #-0x50e7e04\n</code></pre>\n<p>Performing the arithmetic based on the next function address, that's a call to 0x194151e140.  However, running</p>\n<pre class=\"lang-sh prettyprint-override\"><code>otool -l &lt;framework&gt; | grep addr | awk '{print $NF}' | sort\n</code></pre>\n<p>reveals the lowest memory address corresponding to a mapped file is 0x1990da000.</p>\n<p>Is this some RE countermeasure?  What's going on here?</p>\n<p>For context, this is from the private framework CMCapture from iOS 14.5.  The machine code is</p>\n<pre><code>7f 60 bc 96\n</code></pre>\n<p>at address 0x199245f44.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "105",
    "tags": [
        "ios",
        "arm64"
    ],
    "user": "August Vrubel",
    "time": "Apr 5, 2024 at 13:37",
    "comments": [
        {
            "user": "wisk",
            "text": "<span class=\"comment-copy\">I'm not familiar with this environment, but could you share the address of this instruction and the byte code (just 4 bytes). At first it seems you're not disassembling a valid instruction: it could be data or being encrypted.</span>",
            "time": null
        },
        {
            "user": "wisk",
            "text": "<span class=\"comment-copy\">The instruction seems correctly encoded, and I can't personally obtain this file. Can you try to disassemble it with Ghidra or equivalent? Can you tell if the instructions around this <code>bl</code> look corrects?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In iOS, the system frameworks are loaded together and often reference each other directly.</p>\n<p>If you're using Ghidra, you can get it to resolve these references by importing the shared cache as a file system and then importing the frameworks from that file system.  You can then right-click on the reference (which will be highlighted in red), and click \"References -&gt; Add to Program\".  It is important to note that the \"Add to program\" option will only appear if you imported in the manner described.</p>\n</div>",
            "votes": "1",
            "user": "August Vrubel",
            "time": "Apr 11, 2024 at 17:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}