{
    "title": "ARM debugging interesting behavior",
    "link": "https://reverseengineering.stackexchange.com/questions/3541/arm-debugging-interesting-behavior",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was just disassembling and debugging an ARM binary for fun and I noticed something unusual. Consider the following set of instructions:-</p>\n<pre><code>   0x00008058 &lt;+4&gt;: mov r1, pc\n   0x0000805c &lt;+8&gt;: add r1, r1, #24\n   0x00008060 &lt;+12&gt;:    mov r0, #1\n</code></pre>\n<p>I tried setting a breakpoint at <code>0x0000805c</code> and checked the value of the register <code>r1</code>. I was expecting to see <code>0x0000805c</code> -- however, interestingly the value is <code>0x8060</code>.</p>\n<p>Why is this? Is this because of some sort of instruction pipelineing? </p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "166",
    "tags": [
        "debugging",
        "arm"
    ],
    "user": null,
    "time": "Jan 24, 2014 at 16:27",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, it's because of pipelining.</p>\n<p>From <a href=\"http://winarm.scienceprog.com/arm-mcu-types/how-does-arm7-pipelining-works.html\" rel=\"nofollow noreferrer\">http://winarm.scienceprog.com/arm-mcu-types/how-does-arm7-pipelining-works.html</a> --</p>\n<blockquote>\n<p><img alt=\"ARM pipelining\" src=\"https://i.sstatic.net/sIrwO.gif\"/></p>\n<p>PC (Program Counter) is calculated <strong>8 bytes ahead</strong> of current\n  instruction.</p>\n</blockquote>\n</div>",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jan 24, 2014 at 14:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}