{
    "title": "Anti-Reverse Question on implementing a Shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/15525/anti-reverse-question-on-implementing-a-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to make things harder for someone to reverse my code.</p>\n<p>I think that implementing a shellcode following this <a href=\"http://mcdermottcybersecurity.com/articles/windows-x64-shellcode\" rel=\"nofollow noreferrer\">article</a> could work for my case.</p>\n<p>How can I access (or share) global variables in the shellcode I am loading?</p>\n<p>I assume you can pass variables as arguments.</p>\n<p>Thanks</p>\n</div>",
    "votes": "-2",
    "answers": 1,
    "views": "255",
    "tags": [
        "anti-debugging"
    ],
    "user": "fred26",
    "time": "Jun 20, 2017 at 23:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Writing a shellcode is often a task considerably more difficult than developing a piece of software. To me it seems your assumption about developing your program as a shellcode is incorrect and will create problems for you later on.</p>\n<p>This kind of thing is often addressed using Packers and Crypters. There are several relatively simple ones (like <a href=\"https://upx.github.io/\" rel=\"nofollow noreferrer\">UPX</a>), while some are considered quite effective (<a href=\"https://www.oreans.com/themida.php\" rel=\"nofollow noreferrer\">Themida</a> and <a href=\"http://www.aspack.com/\" rel=\"nofollow noreferrer\">ASPack</a>). There are many more available packers to choose from, some are free and some are commercial. </p>\n<p>If you are reluctant to use any of the available packers I believe researching that domain will prove more fruitful to your goal. Using a shellcode will more often require:</p>\n<ol>\n<li>Writing location independent code.</li>\n<li>creating your own DLL loading/locating and API resolving functionalities.</li>\n<li>writing or editing assembly directly.</li>\n</ol>\n<p>And will however provide only little advantage over code compiled normally. For example, anti-debugging techniques (as mentioned in your comments) are not limited to \"shellcode\" and can just as easily be injected/written into C/C++ code. Moreover, most packers include anti-debugging tricks by default (or provide such configuration).</p>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Jun 14, 2017 at 14:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "fred26",
                    "text": "<span class=\"comment-copy\">I just need to protect some key parts of my code. That's why I thought small shellcodes could be dynamically loaded, decrypted and executed</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">This is quite simply bypassed without proper protection. One could just as easily breakpoint before shellcode execution and then read your secret parts, either code or data. You might also want to consider packing/protecting a shared object (DLL/SO) with the secret part.</span>",
                    "time": null
                },
                {
                    "user": "fred26",
                    "text": "<span class=\"comment-copy\">The ideia is to also have the shellcode check if debugger is present and prevent debuggers from being attached as well. Other alternative is to code my own LoadLibrary, and load and encrypted piece of code ?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@fred26 See my latest edit</span>",
                    "time": null
                }
            ]
        }
    ]
}