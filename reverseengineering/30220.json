{
    "title": "Identifying rating algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/30220/identifying-rating-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to identify the rating algorithm used to calculate the <strong>displayed average</strong> of a 1 star to 5 stars rating system. To analyze the data I collated the first and last 1000 ranks and added the <em>real average</em>.</p>\n<p>Please see my <a href=\"https://ethercalc.net/cx3tlrd2xeqe\" rel=\"nofollow noreferrer\">EtherCalc table</a>.</p>\n<p>Here is what I know about the underlying algorithm:</p>\n<ul>\n<li>It is symmetrical.</li>\n<li>It gives more power to the majority of votes.</li>\n<li>It is pretty simple and not (intentionally) based on any known (complicated) mathematical method.</li>\n<li>No information other than the respective number of votes is used for the calculation.</li>\n<li>It tries to give supposedly dishonest votes (those allegedly submitted just to force the rating up (5 stars) or down (1 star)) less weight, so not every vote is worth the same. For example: If the vast majority of votes concentrate around 1 star and 2 stars votes with a smooth decline and a sudden jump at 5 stars votes, those 5 stars votes will count less (not necessarily 3.00 or 4.00, it could also be something like 4.88).</li>\n<li>To detect outliers (suspected dishonest votes) a relative smooth rating curve is expected.</li>\n<li>Items with overwhelmingly favorable ratings get bonus points what gets them over 5 stars.</li>\n</ul>\n<p>I guess the easiest way to determine the algorithm is to analyze the items with the fewest numbers of total ratings. For example:</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>rank</th>\n<th>5 stars</th>\n<th>4 stars</th>\n<th>3 stars</th>\n<th>2 stars</th>\n<th>1 star</th>\n<th>total</th>\n<th>displayed average</th>\n<th>real average</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>535.</td>\n<td>15</td>\n<td>1</td>\n<td>3</td>\n<td>0</td>\n<td>1</td>\n<td>20</td>\n<td>5.42</td>\n<td>4.45</td>\n</tr>\n<tr>\n<td>9802.</td>\n<td>2</td>\n<td>3</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>15</td>\n<td>3.11</td>\n<td>3.47</td>\n</tr>\n<tr>\n<td>9908.</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>2</td>\n<td>2</td>\n<td>10</td>\n<td>2.86</td>\n<td>2.90</td>\n</tr>\n<tr>\n<td>9944.</td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n<td>0</td>\n<td>1</td>\n<td>4</td>\n<td>2.71</td>\n<td>2.50</td>\n</tr>\n<tr>\n<td>9978.</td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n<td>0</td>\n<td>2</td>\n<td>5</td>\n<td>2.26</td>\n<td>2.20</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Since I've been thinking about this for too long and can't come up with the solution, I kindly ask for your valuable help.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "211",
    "tags": [
        "static-analysis",
        "math"
    ],
    "user": "madlen",
    "time": "Apr 8, 2022 at 13:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, this is a comment at the moment, but I cannot add comments still not having a minimum of 50 reputations.</p>\n<p>You have not given some information on which your knowledge is founded. That might help to confirm those - or not.</p>\n<p>Am I correct that you cannot create a response from the site by creating specific input for your own defined combinations?</p>\n<p>Then I would try to attack the algorithm by</p>\n<ul>\n<li>selecting most simple combinations, and when displayed, and the real average is not the same. Like here:</li>\n</ul>\n<p><a href=\"https://i.sstatic.net/jpIYD.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/jpIYD.png\"/></a></p>\n<ul>\n<li>Or selecting combinations where only a single star rating is incrementing and the others keep the same</li>\n</ul>\n<p><strong>Edit 10.04.22</strong></p>\n<p>Meanwhile, I did a second approach: guessing an almost linear formula with a fixed factor for each star, so that the average is calculated by (number of 5 stars)*a+(number of 4 stars)*b+etc/total.\nThen I selected the ones with Zero 1 star, and Zero 2 stars and optimized the factors, resulting in</p>\n<ul>\n<li>5 stars: factor 5.705</li>\n<li>4 stars: factor 4.19</li>\n<li>3 stars: factor 2.335</li>\n</ul>\n<p>Total difference of deltas of that model (<code>abs(result - displayed average)</code> versus average model is reduced, but not Zero =&gt; guessed formula is not good enough. This is expected from the information you gave for the algorithm. However the biggest deltas are found for good scored results =&gt; a new model is to be guessed to represent that non-linear impact.</p>\n<p>I think in that way you can come closer to a model that is good enough and get a final low delta, but it will never be the original algorithm.\nAlternatively, an \"automated formula guesser\" is needed, that combines the 5 variables to a result that comes close to the displayed average. However, this will also most probably not be the original algorithm.</p>\n</div>",
            "votes": "1",
            "user": "Rohit Gupta",
            "time": "Feb 5, 2023 at 8:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "madlen",
                    "text": "<span class=\"comment-copy\">Thanks for your comment. - My knowledge is based on a survey of the author. Unfortunately, he didn't want to reveal more information. - Yes, you are correct. - That's an interesting approach. Have you come to any approximation with this?</span>",
                    "time": null
                },
                {
                    "user": "dieter reichl",
                    "text": "<span class=\"comment-copy\">Edited above answer with new input</span>",
                    "time": null
                },
                {
                    "user": "madlen",
                    "text": "<span class=\"comment-copy\">Thank you very much for your considerations. - Another approach might be to put the respective number of the 1 star to 5 stars ratings in relation to the number of all ratings, somehow \"smooth\" these five ratio values and then calculate the number of the 1 star to 5 stars ratings from them to finally get the desired result. What do you think?</span>",
                    "time": null
                },
                {
                    "user": "dieter reichl",
                    "text": "<span class=\"comment-copy\">Yes, but I would not call that reverse engineering anymore because not exactly the same but only similar results are received. Methods I know for that are multivariate analysis or artificial neural networks.</span>",
                    "time": null
                },
                {
                    "user": "madlen",
                    "text": "<span class=\"comment-copy\">I think, you got me wrong. My approach should serve as a possible way to discover the actual algorithm. But I don't really know how to do the \"smoothing\".</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think what you are looking for is a statistical method for computing the formula. If you fit a least squares model to the five data values you've provided, you can get a prediction formula for this data that looks like:</p>\n<p><code>displayed_average = 3.6746154 + 0.162307923 * five_stars + 0.275384615 * four_stars -0.171548462*three_stars - 0.45 * one_star</code></p>\n<p>which predicts the displayed average as</p>\n<p><a href=\"https://i.sstatic.net/3FHHe.png\" rel=\"nofollow noreferrer\"><img alt=\"Predicted values\" src=\"https://i.sstatic.net/3FHHe.png\"/></a></p>\n<p>Obviously, this is only based upon the five data values you provided. If you had 10000 values, you could come a lot closer to the actual formula by using those additional data points. For more information on fitting least squares linear regression models in R, see <a href=\"https://kenanfellows.org/kfp-cp-sites/cp19/cp19/lesson-1-least-squares-linear-regression-r/index.html\" rel=\"nofollow noreferrer\">this tutorial.</a></p>\n</div>",
            "votes": "0",
            "user": "dingo_kinznerhook",
            "time": "Sep 7, 2022 at 15:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ian Cook",
                    "text": "<span class=\"comment-copy\">If you fit a  linear regression model to the 2000 points provided (after normalizing the scores to a total of 1 for each observation) and look at residual plots you will see huge heteroskedasticity (especially for higher displayed averages.) The patterns of residuals are very good indication of the existence of non-linear features which the question indicates.   In your example regression it's not surprising that you get a perfect fit as you've fitted a 5 parameter model to just 5 data points.  Other than in degenerate cases this will almost always be the result.</span>",
                    "time": null
                },
                {
                    "user": "dingo_kinznerhook",
                    "text": "<span class=\"comment-copy\">I goofed and didn't realize the EtherCalc  table contains the whole dataset. I might delete this answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}