{
    "title": "Useless instructions in a compiled getter",
    "link": "https://reverseengineering.stackexchange.com/questions/29546/useless-instructions-in-a-compiled-getter",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is the second time I see this kind of function today :</p>\n<pre><code>.text:00000000000010B0 sub_10B0        proc near               ; CODE XREF: sub_1120:loc_1143↓p\n.text:00000000000010B0                 lea     rdi, byte_4418\n.text:00000000000010B7                 lea     rax, byte_4418\n.text:00000000000010BE                 cmp     rax, rdi\n.text:00000000000010C1                 jz      short locret_10D8\n.text:00000000000010C3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr\n.text:00000000000010CA                 test    rax, rax\n.text:00000000000010CD                 jz      short locret_10D8\n.text:00000000000010CF                 jmp     rax\n.text:00000000000010CF ; ------------------------------------------------------------------\n.text:00000000000010D1                 align 8\n.text:00000000000010D8\n.text:00000000000010D8 locret_10D8:                            ; CODE XREF: sub_10B0+11↑j\n.text:00000000000010D8                                         ; sub_10B0+1D↑j\n.text:00000000000010D8                 retn\n.text:00000000000010D8 sub_10B0        endp\n</code></pre>\n<p>As I understand, both <code>jz</code> are going to jump anyway, so the first <code>jz</code> is always going to jump to the <code>ret</code>.</p>\n<p>Why isn't this function written more simply, just like a single <code>return &amp;byte_4418</code> ?</p>\n<pre><code>lea     rax, byte_4418\nretn\n</code></pre>\n<p>I hope my English is good enough to be understood.</p>\n<p>Thank you,</p>\n<p>Max</p>\n<p>PS : I'm sorry, I don't know which compiler is used.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "115",
    "tags": [
        "ida",
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "Max Buridant",
    "time": "Nov 16, 2021 at 14:21",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I expect that the compiler emitted two different symbol references in the two LEA instructions, and uses the compare instruction to detect at run time whether the two symbols were resolved to the same address at link time. Many modern compilers/linkers offer \"link time code generation\" aka \"whole program optimization\", where the compiler's optimizer runs at link time. In such a system, there would be no need for a runtime check, but the compiler is (re-)called at link time and can optimize (in this case: eliminate/not generate the dead path) in response to seeing all modules getting linked together.</p>\n</div>",
            "votes": "3",
            "user": "Michael Karcher",
            "time": "Nov 14, 2021 at 17:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}