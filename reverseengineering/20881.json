{
    "title": "GDB: Could not load shared library symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/20881/gdb-could-not-load-shared-library-symbols",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently having a look at the Damn Vulnerable Router Firmware, and I'm roughly following the description that is given here:</p>\n<p><a href=\"https://p16.praetorian.com/blog/getting-started-with-damn-vulnerable-router-firmware-dvrf-v0.1\" rel=\"nofollow noreferrer\">https://p16.praetorian.com/blog/getting-started-with-damn-vulnerable-router-firmware-dvrf-v0.1</a></p>\n<p>This means I did the following:</p>\n<ul>\n<li>Extracted the firmware with binwalk</li>\n<li>Copied qemu-mipsel-static into the squashfs-root of the extracted firmware</li>\n<li>Emulated the binaries with qemu using chroot, like this:<code>sudo chroot . ./qemu-mipsel-static -g 1234 ./pwnable/Intro/stack_bof_01 test123</code></li>\n<li>Started GDB and entered: <code>set architecture mips</code> and <code>target remote 127.0.0.1:1234</code></li>\n</ul>\n<p>When I now continue with <code>c</code> I get:</p>\n<blockquote>\n<p>(gdb) c\n  Continuing.\n  warning: Could not load shared library symbols for 3 libraries, e.g. /lib/libgcc_s.so.1.\n  Use the \"info sharedlibrary\" command to see the complete listing.\n  Do you need \"set solib-search-path\" or \"set sysroot\"?\n  [Inferior 1 (Remote target) exited with code 0101]\n  (gdb) info sharedlibrary\n  No shared libraries loaded at this time.</p>\n</blockquote>\n<p>Although this is only a warning and the debugged program seems to execute just fine, I'm wondering if I actually need to copy some more libraries into my squashfs-root folder in order to get this clean. And if so how do I find out which libraries and where to get them? (<code>info sharedlibrary</code> didn't yield anything) </p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "firmware",
        "gdb",
        "exploit",
        "qemu",
        "firmware-analysis"
    ],
    "user": "Lord Vapor",
    "time": "Mar 14, 2019 at 22:31",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. It'll really be hard to help you unless you provide a little more context and pinpoint exactly the question you have. Right now this is fairly broad.</span>",
            "time": null
        },
        {
            "user": "Lord Vapor",
            "text": "<span class=\"comment-copy\">Hi, thanks for welcoming me here. I actually like Chris Stratton's response, so I'll probably just leave the question as it is, if this is ok.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Typically when cross-debugging a remote target with GDB, you do not try to preserve debug symbols in files loaded onto the target, but rather for reasons of space use only stripped binaries there.</p>\n<p>Instead, you keep the versions with symbols intact (and potentially also associated sources) on your PC, and point the debugger at those.  If your files with debug symbols on the PC are the ancestors of the stripped files running on the remote target device, then the addresses match and the debugger can use those local files to lookup symbols for the addresses reported by the remote target.</p>\n<p>Pointing at local files with debug info is what the hints about \"set solib-search-path\" or \"set sysroot\" are suggesting to you, specifically for system libraries used by the program you are debugging.  Typically you would also invoke the debugger with a local copy of the program you want to debug, so that it can access the symbols (and perhaps even find the high level sources) of the program as well as the libraries.</p>\n<p>That said, this may not be all that relevant to you.</p>\n<p>First, debugging the internals of system libraries is rarely interesting, unless you suspect a problem there.  Rather, what is interesting is the way in which an application <em>uses</em> system libraries, ie the calls it makes and the results it gets (the same information you might get by running with <code>ltrace</code> interception)</p>\n<p>Because <em>dynamic link symbols</em> remain even in stripped executables, a good debugger when properly configured can decode dynamic link symbols and the Procedure Linkage Table (PLT) and identify the dynamic library functions being called, even when you have no other symbols or sources for either the system libraries or the program.</p>\n</div>",
            "votes": "4",
            "user": "Chris Stratton",
            "time": "Mar 18, 2019 at 1:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Lord Vapor",
                    "text": "<span class=\"comment-copy\">Thanks for the detailed answer. This is exactly the background info I wanted to have on this topic.</span>",
                    "time": null
                }
            ]
        }
    ]
}