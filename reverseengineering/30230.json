{
    "title": "Where can I find the encryption algorithm in source code?",
    "link": "https://reverseengineering.stackexchange.com/questions/30230/where-can-i-find-the-encryption-algorithm-in-source-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When I submit a Customer Reference ID in an Android Application it POSTs an encrypted string to an API endpoint.</p>\n<p>For example, if I enter the following CR ID :</p>\n<p>\"SR-54585482\"</p>\n<p>it POSTs the following Encrypted Data:</p>\n<pre><code>splainText : \"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\"\n\n     Count : 31\n</code></pre>\n<p>How do I find the encryption algorithm in the source code of the APK?</p>\n<p>In which file can I find about this encryption?</p>\n<p>Dex2Jar File here : <a href=\"https://www.mediafire.com/file/hs0qyirhuk4ygo8/test-dex2jar.jar/file\" rel=\"nofollow noreferrer\">https://www.mediafire.com/file/hs0qyirhuk4ygo8/test-dex2jar.jar/file</a></p>\n<p>APK from here :\n<a href=\"https://play.google.com/store/apps/details?id=com.sundirect.sundth\" rel=\"nofollow noreferrer\">https://play.google.com/store/apps/details?id=com.sundirect.sundth</a></p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "encryption",
        "android",
        "java"
    ],
    "user": "Cruzer Blade",
    "time": "Apr 10, 2022 at 17:03",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">First the encrypted text is obviously base64 encoded which hides too much information, better look at it in raw or at least he's encoding. Second, why do you think this is an information security question(there is a stack exchange site dedicated to reverse engineering which would suite much better)? And third have you at least tried to most obvious search for <code>Cipher.getInstance</code> in Jadx when you are searching for a cipher?</span>",
            "time": null
        },
        {
            "user": "schroeder",
            "text": "<span class=\"comment-copy\">If you just want to know how to analyse the source code to locate the encryption algorithm, then all of the details about what the algorithm does to specific strings is irrelevant.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">The screenshot just contains some numbers which are not relevant to any crypto but the way assets and resources are handled. Better option is to share the apk. Also I see references to <code>mono</code> and <code>xamarin</code> in the screenshot so maybe the app is not built in java but .NET.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">I won't be able to help you privately. You can share the apk here if possible.</span>",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "<span class=\"comment-copy\">The screenshots offer no additional use - only waste space. Please use text to share code in any post.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on your screenshots (as already mentioned in comments) - references to <code>mono</code> and <code>xamarin</code> help us understand that the apk is probably built with .NET. In this method the code is probably written as C# and then compiled to DLLs depending on what classes you use in the code.</p>\n<p>See : <a href=\"https://github.com/xamarin/xamarin-android\" rel=\"nofollow noreferrer\">https://github.com/xamarin/xamarin-android</a> for more details on this.</p>\n<p>A simple unzip will confirm that too.</p>\n<pre><code>$ unzip ../Sun.apk -d .\n...\nassemblies/xxx.dll\n...\n</code></pre>\n<p>Now most of the static analysis can be based on decompiling .NET dlls which can be done using something like <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noreferrer\">ILSpy</a>.</p>\n<p>Looking at the type of dlls</p>\n<pre><code>$ file assemblies/xxx.dll\nassemblies/xxx.dll : data\n</code></pre>\n<p>The dlls are actually compressed with lz4 based on this <a href=\"https://github.com/xamarin/xamarin-android/pull/4686\" rel=\"nofollow noreferrer\">PR</a> and then can be uncompressed using a <a href=\"https://github.com/x41sec/tools/blob/master/Mobile/Xamarin/Xamarin_XALZ_decompress.py\" rel=\"nofollow noreferrer\">script</a></p>\n<pre><code>$ find . -type f -name \"*.dll\" -exec mv {} {}.lz4 \\;\n$ find . -type f -name \"*.lz4\" -exec python Xamarin_XALZ_decompress.py {} {}.dll \\;\n</code></pre>\n<p>Now ILSpy can load and decompile these DLLs.\nBased on the ciphertext you provide it looks like a block cipher such as AES. Look around for that in the decompiled code in <code>Sundirect.dll</code>\nWe find this snippet in <code>Sundirect.Services</code></p>\n<pre><code>using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic static string Encrypt(string inputText, string encryptionKey)\n{\n    UTF8Encoding uTF8Encoding = new UTF8Encoding();\n    RijndaelManaged rijndaelManaged = new RijndaelManaged();\n    rijndaelManaged.Mode = CipherMode.CBC;\n    rijndaelManaged.Padding = PaddingMode.PKCS7;\n    rijndaelManaged.KeySize = 128;\n    rijndaelManaged.BlockSize = 128;\n    byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n    byte[] array = new byte[16];\n    int num = bytes.Length;\n    if (num &gt; array.Length)\n    {\n        num = array.Length;\n    }\n    Array.Copy(bytes, array, num);\n    rijndaelManaged.Key = array;\n    rijndaelManaged.IV = array;\n    string result = Convert.ToBase64String(rijndaelManaged.CreateEncryptor().TransformFinalBlock(uTF8Encoding.GetBytes(inputText), 0, uTF8Encoding.GetBytes(inputText).Length));\n    rijndaelManaged.Dispose();\n    return result;\n}\n</code></pre>\n<p>Right Click -&gt; Analyze to see what code uses this function and we see that is is used to encrypt post data</p>\n<pre><code>...\nSundirect.Services.LoginAPIServices.LoginAync(string, string) : Task&lt;LoginDetailsOutputDto&gt;\nSundirect.Services.LoginAPIServices.GetUserPasswordAsync(string) : Task&lt;UserPasswordDto&gt;\n...\n</code></pre>\n<p>Click and browse to that location and you see that the key to encrypt is hardcoded</p>\n<pre><code>...\nstring value2 = BaseServices.Encrypt(input, \"419201ddtuz3082249879134d06093b95991g6f70d\");\n...\n</code></pre>\n<p>This can help us write a simple decryptor like this</p>\n<pre><code>using System.Diagnostics;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class Test\n{\n    public static string Encrypt(string inputText, string encryptionKey)\n    {\n        UTF8Encoding uTF8Encoding = new UTF8Encoding();\n        Aes? rijndaelManaged = Aes.Create(\"AesManaged\");\n        rijndaelManaged.Mode = CipherMode.CBC;\n        rijndaelManaged.Padding = PaddingMode.PKCS7;\n        rijndaelManaged.KeySize = 128;\n        rijndaelManaged.BlockSize = 128;\n        byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n        byte[] array = new byte[16];\n        int num = bytes.Length;\n        if (num &gt; array.Length)\n        {\n            num = array.Length;\n        }\n        Array.Copy (bytes, array, num);\n        rijndaelManaged.Key = array;\n        rijndaelManaged.IV = array;\n        string result =\n            Convert\n                .ToBase64String(rijndaelManaged\n                    .CreateEncryptor()\n                    .TransformFinalBlock(uTF8Encoding.GetBytes(inputText),\n                    0,\n                    uTF8Encoding.GetBytes(inputText).Length));\n        rijndaelManaged.Dispose();\n        return result;\n    }\n\n    public static string Decrypt(string inputText, string encryptionKey)\n    {\n        UTF8Encoding uTF8Encoding = new UTF8Encoding();\n        Aes? rijndaelManaged = Aes.Create(\"AesManaged\");\n        rijndaelManaged.Mode = CipherMode.CBC;\n        rijndaelManaged.Padding = PaddingMode.PKCS7;\n        rijndaelManaged.KeySize = 128;\n        rijndaelManaged.BlockSize = 128;\n        byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n        byte[] array = new byte[16];\n        int num = bytes.Length;\n        if (num &gt; array.Length)\n        {\n            num = array.Length;\n        }\n        Array.Copy (bytes, array, num);\n        rijndaelManaged.Key = array;\n        rijndaelManaged.IV = array;\n        byte[] b64 = Convert.FromBase64String(inputText);\n        string result =\n            System.Text.Encoding.UTF8.GetString(rijndaelManaged\n                    .CreateDecryptor()\n                    .TransformFinalBlock(b64,\n                    0,\n                    b64.Length));\n        rijndaelManaged.Dispose();\n        return result;\n    }\n\n    public static void Main()\n    {\n        string key = \"419201ddtuz3082249879134d06093b95991g6f70d\";\n        string e = Decrypt(Encrypt(\"input\", key), key);\n        Debug.Assert(e==\"input\");\n        Console.WriteLine(Decrypt(\"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\", key));\n    }\n}\n</code></pre>\n<p>which on running decrypts</p>\n<pre><code>\"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\"\n</code></pre>\n<p>to</p>\n<pre><code>CR-13261150|03|2022-04-04 22:40\n</code></pre>\n</div>",
            "votes": "2",
            "user": "sudhackar",
            "time": "Apr 11, 2022 at 6:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}