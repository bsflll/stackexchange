{
    "title": "State of the Art Fuzzing Framework [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1375/state-of-the-art-fuzzing-framework",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p><b>Want to improve this question?</b> <a href=\"/posts/1375/edit\">Update the question</a> so it's <a href=\"/help/on-topic\">on-topic</a> for Reverse Engineering Stack Exchange.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2013-03-31 11:02:23Z\">12 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/1375/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I've previously rolled my own Fuzzing Framework, and tried a few others like Peach Fuzzer.  It's been awhile since I've looked at vulnerability hunting, what is the state of the art with regard to fuzzing?  That is, if I were to start fuzzing Acme Corp's PDF Reader today, what toolset should I look into?  </p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "fuzzing"
    ],
    "user": "mrduclaw",
    "time": "12 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are three types of fuzzers:</p>\n<ul>\n<li><em>mutation fuzzers</em>, which start with a large list of diverse, good input files and a list of mutations. Then, each file is mutated in some way and passed to the application to see if the app can handle the mutated input. Charlie Miller's 2010 <a href=\"https://fuzzinginfo.files.wordpress.com/2012/05/cmiller-csw-2010.pdf\" rel=\"nofollow noreferrer\">CanSecWest talk</a> covers this approach nicely. Generally it's straightforward to roll your own version of a mutation fuzzer for a file format.</li>\n<li><em>generative fuzzers</em>, which at their simplest just generate random output. More complex versions will be able to describe protocols and methods for injecting randomness in various fields of the protocols. <a href=\"https://github.com/OpenRCE/sulley\" rel=\"nofollow noreferrer\">Sulley</a> is a tool in this class. A particularly nice subclass is <em>grammar-based</em> fuzzers, where you start with a BNF grammar and generate strings by walking the grammar directly.</li>\n<li><em>whitebox fuzzers</em> are arguably a different class, where some constraint solver reasons about code paths to generate new inputs for fuzzing. <a href=\"https://github.com/MozillaSecurity/avalanche\" rel=\"nofollow noreferrer\">avalanche</a> is a publicly available tool for this. (SAGE, the tool that @0xea pointed out, is another example.)</li>\n</ul>\n<p><a href=\"https://web.archive.org/web/20220419114422/https://www.ise.io/wp-content/uploads/2018/04/analysisfuzzing.pdf\" rel=\"nofollow noreferrer\">Another of Miller's papers</a> has a nice overview of the first two. And you should probably see the <a href=\"http://www.fuzzing.org/\" rel=\"nofollow noreferrer\">Fuzzing book's website</a>, which has some software you can start with.</p>\n</div>",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Apr 19, 2022 at 11:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">this is hardly the state of the art, and that's the problem with this question , i don't think it can be answered in a good way</span>",
                    "time": null
                },
                {
                    "user": "EfForEffort",
                    "text": "<span class=\"comment-copy\">@0xea, is it my breakdown into types of fuzzing or the tools that I list that isn't state of the art?</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">the tools and papers, they are few years old, tho i know people are still using them with great success</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">@0xea Innovation doesn't come over night.  If those tools are a few years old but there has been no improvements, then they are still the state of the art.  I don't see the problem.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Don't know about the state of the art , but some advances have been in the direction of combining symbolic execution as with <a href=\"https://web.archive.org/web/20160311223607/http://research.microsoft.com/en-us/um/people/pg/public_psfiles/cacm2012.pdf\" rel=\"nofollow noreferrer\">SAGE</a> from MS Research (there should be a better paper, but I think it's paywalled). Also <a href=\"https://ieeexplore.ieee.org/document/6200194\" rel=\"nofollow noreferrer\">A Taint Based Approach for Smart Fuzzing</a> shows how to combine taint analysis for advanced fuzzing (there should be some non-paywalled version around). Also, I expect most people don't really publish their advanced techniques until they exhaust them, which is the main problem of this question.</p>\n</div>",
            "votes": "4",
            "user": "Glorfindel",
            "time": "Apr 19, 2022 at 7:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Right, there will always be the walled garden of secret techniques, but the state of the art is implied public knowledge.  That is, it is the current state of the highest level of <b>general</b> development.  There will always be outliers that perform better, but they are not the state of the art, they are the outliers above it.  Nonetheless, thanks for the suggested reading.</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">a fair point...</span>",
                    "time": null
                }
            ]
        }
    ]
}