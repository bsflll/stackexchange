{
    "title": "Reverse engineering CRC8 algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/30983/reverse-engineering-crc8-algorithm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to reverse-engineer a protocol which includes a final byte that is (possibly) a CRC-8 with some unknown parameters.</p>\n<p>I have collected some data, however, the downside is the fixed length</p>\n<pre><code>&lt;------------------ data ------------------&gt;  CRC Byte\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  B1\n20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  6B\nC8 6E 4D 00 00 00 00 00 00 00 00 00 00 00 00  55\n38 3C 80 40 40 40 A0 95 91 33 23 0B A1 C6 19  44\n01 40 BA 1E 5D 4C 0A 04 16 60 E5 4A C0 78 35  DF\n</code></pre>\n<p>I have already tried <a href=\"https://reveng.sourceforge.io/\" rel=\"nofollow noreferrer\">reveng</a> with no luck. I can provide more messages and their respective CRCs.</p>\n<p><strong>EDIT 1</strong>:</p>\n<p>Data with small differences. I have collected some data (<a href=\"https://pastebin.com/BfkNadRJ\" rel=\"nofollow noreferrer\">pastebin</a>) with small differences, for example, the following:</p>\n<pre><code>38 3C 80 40 20 70 A5 15 A5 33 64 F5 A0 2A 59 BD\n38 3C 80 40 20 70 A5 15 A5 33 64 F5 A0 26 59 B4\n                                        ^\n\n38 3C 80 40 20 40 A0 95 91 33 23 0B A0 CA 1D 09\n38 3C 80 40 20 40 A0 95 91 33 23 0B A0 C5 1D 42\n                                        ^\n</code></pre>\n<p><strong>EDIT 2</strong>:</p>\n<p>I have found some messages with one bit of difference:</p>\n<pre><code>38 3C 80 40 40 70 A5 15 A5 33 64 F5 A1 31 5D B1\n38 3C 80 40 40 70 A5 15 A5 33 64 F5 A1 34 5D 77\n38 3C 80 40 40 70 A5 15 A5 33 64 F5 A1 35 5D B6\n38 3C 80 40 40 70 A5 15 A5 33 64 F5 A1 38 5D 7E\n38 3C 80 40 40 70 A5 15 A5 33 64 F5 A1 39 5D BF\n                                        ^\n\n38 3C 80 40 40 40 A0 95 91 33 23 E7 A1 38 1E EC\n38 3C 80 40 40 40 A0 95 91 33 23 E7 A1 39 1E 2D\n                                        ^\n\n38 3C 80 40 40 40 A0 95 91 33 23 0B A1 CA 1D 2F\n38 3C 80 40 40 40 A0 95 91 33 23 0B A1 CE 1D 28\n                                        ^\n</code></pre>\n<p><strong>EDIT 3</strong>:</p>\n<p>I have found some patterns following <a href=\"https://www.csse.canterbury.ac.nz/greg.ewing/essays/CRC-Reverse-Engineering.html\" rel=\"nofollow noreferrer\">this</a> tutorial using the following messages (<a href=\"https://pastebin.com/qqGiZKX4\" rel=\"nofollow noreferrer\">pastebin</a>):</p>\n<pre><code>383c80404070a515a53364f5a1315db1\n383c80404070a515a53364f5a1345d77\n383c80404070a515a53364f5a1355db6\n383c80404070a515a53364f5a1385d7e\n383c80404070a515a53364f5a1395dbf\n383c80404070a515a53364f5a13a5dfd\n383c80404070a515a53364f5a13b5d3c\n                           ^\n</code></pre>\n<p>After XORing I can get the following difference messages:</p>\n<pre><code>0100C1\n020083\n040007\n08000E\n</code></pre>\n<p>It seems that after shifting the difference message 1 bit to the left, the resulting checksum also is being shifted 1 bit to the left. And if the leading bit of the checksum (the one about to be shifted out) is 1, then the resulting checksum will be equal to the previous shifted one place and XORed with 1 (as if 1 was the polynomial of the crc8).</p>\n<p>However, this does not hold further for these messages:</p>\n<pre><code>383c80404070a515a53364f5a1245d73\n383c80404070a515a53364f5a1345d77\n</code></pre>\n<p>After XORing:</p>\n<pre><code>100004\n</code></pre>\n<p>Some other examples:</p>\n<pre><code>383c80404040a095913323e0a0d51d0d\n383c80404040a095913323e0a1d51d8b\n--------------------------------\n                         1000086\n\n383c80402070a515a5332422a02d7568\n383c80402070a515a5332422a42d756a\n--------------------------------\n                         4000002\n</code></pre>\n<p><strong>EDIT 4</strong>:</p>\n<p>Take the following example:</p>\n<pre><code>383c80404040a0959133230ba1ce1d28\n383c80404040a0959133230ba1d41da1\n--------------------------------\n                          1A0089\n</code></pre>\n<p><code>1A0089</code> can be obtained by XORing <code>100004 ^ 8000E ^ 20083</code>. I am not sure if it has something to do with the checksum.</p>\n<p><strong>EDIT 5</strong>:</p>\n<p>I have made a table of single bit difference messages:</p>\n<pre><code>00 00 00 01 -&gt; 98\n00 00 00 02 -&gt; 31 ?\n00 00 00 04 -&gt; 62\n00 00 00 08 -&gt; C4\n\n00 00 00 10 -&gt; 91\n00 00 00 20 -&gt; 23\n00 00 00 40 -&gt; 46 ?\n00 00 00 80 -&gt; 8C ?\n\n00 00 01 00 -&gt; C1\n00 00 02 00 -&gt; 83\n00 00 04 00 -&gt; 07\n00 00 08 00 -&gt; 0E\n\n00 00 10 00 -&gt; 04\n00 00 20 00 -&gt; 08 ?\n00 00 40 00 -&gt; 10 ?\n00 00 80 00 -&gt; 20 ?\n\n00 01 00 00 -&gt; 86\n00 02 00 00 -&gt; \n00 04 00 00 -&gt; 02\n00 08 00 00 -&gt; \n\n00 10 00 00 -&gt;\n00 20 00 00 -&gt;\n00 40 00 00 -&gt; 67\n00 80 00 00 -&gt;\n</code></pre>\n<p>I have marked with <code>?</code> the entries I predicted myself following the steps described in <strong>edit 3</strong>. Other entries were obtained XORing either original or difference messages (as described in <strong>edit 4</strong>).</p>\n<p><strong>EDIT 6</strong>:</p>\n<p>I have collected more data (<a href=\"https://pastebin.com/w9nqukAF\" rel=\"nofollow noreferrer\">pastebin</a>).</p>\n</div>",
    "votes": "4",
    "answers": 0,
    "views": "482",
    "tags": [
        "crc"
    ],
    "user": "Afck",
    "time": "Feb 16, 2023 at 21:50",
    "comments": [
        {
            "user": "dieter reichl",
            "text": "<span class=\"comment-copy\">Can you give more details what the protocol is used for? What makes you believe that this is checksum/CRC and not part of data?</span>",
            "time": null
        },
        {
            "user": "Afck",
            "text": "<span class=\"comment-copy\">@dieterreichl I have no details about the protocol, but I think it is some sort of low level protocol where the data is divided in blocks of 16 bytes. I am sure the last byte is a checksum because it is deterministic with respect of the input data. Same data outputs same checksum. I have even found collisions.</span>",
            "time": null
        },
        {
            "user": "Afck",
            "text": "<span class=\"comment-copy\">@dieterreichl I can provide you more data if you need</span>",
            "time": null
        },
        {
            "user": "dieter reichl",
            "text": "<span class=\"comment-copy\">More data would be beneficial, yes. When possible show data with differences in single bytes only like 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B1, 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ab, 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 cd</span>",
            "time": null
        },
        {
            "user": "Afck",
            "text": "<span class=\"comment-copy\">@dieterreichl I have posted a pastebin with similar data. I don't know if there are many cases with single byte differences but I have found one as shown in the question.</span>",
            "time": null
        }
    ],
    "answers_data": []
}