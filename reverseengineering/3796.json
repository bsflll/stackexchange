{
    "title": "Strange behavior in the reverse execution of traces",
    "link": "https://reverseengineering.stackexchange.com/questions/3796/strange-behavior-in-the-reverse-execution-of-traces",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In fuzzing applications with Pin (the Pintool source code is hosted <a href=\"https://github.com/tathanhdinh/PathExplorer/tree/windows_version/version_1\" rel=\"nofollow\">here</a>, I am sorry for the self-advertisement), I get a very bizarre situation in tracing executed instructions, the following trace:</p>\n<pre><code>...\n0x404f94        test edx, edx                    \n0x404f96        jnz 0x404fe1                   \n0x404fe1        pop ebp                        \n0x404f89        rep cmpsb byte ptr [esi], byte ptr [edi]\n0x404f8b        pop edi                        \n0x404f8c        pop esi                        \n0x404f8d        jz 0x404f94                    \n0x404f8f        sbb edx, edx\n...\n</code></pre>\n<p>is extracted from the execution of wget. The bizarre observation is that the instruction after 0x404f8f is somehow arbitrary, normaly it should be:</p>\n<pre><code>0x404f91        sbb edx, 0xffffffff\n</code></pre>\n<p>but \"sometimes\" it is:</p>\n<pre><code>0x779a015d      add esp, 0x4\n</code></pre>\n<p>which is located in the NtWaitForMultipleObjects. To say \"sometimes\", I mean that it does not always happen but it happens and that is 100% reproducible.</p>\n<p>I still cannot figure out what happened here. First, the observation means that the control-flow of the program has been changed in a unpredictable way. Second, the bizarre instruction located in NtWaitForMultipleObjects, namely it must be in the kernel-space, but here I have observed it in the program (i.e. in the user-space).</p>\n<p>I know that this question is quite specific but feel free to request me more information. I really appreciate any help.</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "135",
    "tags": [
        "fuzzing",
        "instrumentation"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Mar 5, 2014 at 16:04",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Is the program multi-threaded?</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">Thanks a lot, Igor. I think that you have actually given the answer. I am going to fix the Pintool with the multi-threaded model in mind and give the result later.</span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">Thanks again Igor, your suggestion is exactly the problem. The bizarre instruction is not so bizarre, it is in fact the instruction of an other thread. I still do not know why wget on Windows is multi-threaded though, but that is another problem.  Would you mind let your suggestion as an answer so that I can accept it?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When dealing with multi-threaded program, you may end up getting instructions from different threads. You can for example check the current thread ID to make sure you're getting what you need.</p>\n<p>Even if the program itself does not use threads, they may be created by system libraries. One of the most common examples is the <a href=\"https://stackoverflow.com/questions/12670097/what-is-the-purpose-of-this-mysterious-tppwaiterpthread-thread\">TppWaiterpThread</a>. RPC functions also often create threads.</p>\n</div>",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}