{
    "title": "Reversing serial RS485 half duplex bus protocol understanding",
    "link": "https://reverseengineering.stackexchange.com/questions/8237/reversing-serial-rs485-half-duplex-bus-protocol-understanding",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a master &amp; slaves setup in which the slaves only respond when spoken too.  I can snoop &amp; record an existing master/slaves conversation.  I have an extra slave device that I would like to have my own conversation with, but have so far failed miserably.  I suspect that each device has its own unique ID, but have no idea what my extra slave devices ID is.</p>\n<p>What I know from a logic analyzer &amp; days worth of studying:</p>\n<ul>\n<li>messages start with 0x10</li>\n<li>prior to message end is a 2 byte CRC-16/MCRF4XX, little endian (thanks: reveng!)</li>\n<li>messages end with 0x1003</li>\n</ul>\n<p>Suspicions:</p>\n<ul>\n<li>first byte is a message type identifier, I've observed ~12 unique message types based on this.  Each message 'type' based on this has the same length.</li>\n<li>second byte might ??? be a destination device id ???.  Based on this suspicion I took the first 20 unique messages, inserted 255 different ID's into this byte, and sent each of them (correctly packetized with start + data + crc + end) - it did not respond to any of them.</li>\n</ul>\n<p>Data sample from the bus during startup, I removed the start, crc &amp; end bytes:</p>\n<pre><code>0xff020300010400\n0x09510000\n0xff01030002ffff\n0xff020300013c03\n0x01000000\n0x350d0000\n0xff01030002ffff\n0xff020300020200\n0x02007400...big packet with lots of text from a slave A...\n0x340d7400...big packet with lots of text from a/the master?...\n0xff010300010000\n0xff020300010800\n0x09510000\n0xff01030003ffff\n0xff020300030200\n0x02007400...big packet with lots of text from a slave A...  (exactly the same as prior 2 big packets)\n0x340d7400...big packet with lots of text from the master or yet a third slave?... (exactly the same as prior 2 big packets)\n0x0952040000000080\n0xff010300010000\n0xff02030001101000\n0x09510000\n0xff01030004ffff\n0xff020300040200\n0x02007400...big packet with lots of text from a slave B...\n0x340d7400...big packet with lots of text from the master or yet a third slave?...\n0x0952040000000080\n0xff010300010000\n0xff020300012000\n0x09510000\n0xff01030005ffff\n0xff020300050200\n0x02007400...big packet with lots of text from a slave B...  (exactly the same as prior 2 big packets)\n0x340d7400...big packet with lots of text from the master or yet a third slave?... (exactly the same as prior 2 big packets)\n0x0952040000000080\n0xff010300010000\n0xff020300010400\n0x09510000\n0xff01030002ffff\n0xff020300020200\n0x0952040000000080\n</code></pre>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "hardware",
        "serial-communication",
        "protocol"
    ],
    "user": "Zac",
    "time": "Feb 14, 2015 at 6:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sounds a lot like my recent CAN bus sniffing. Ha! That's funny, RS485 is a popular alternative to CAN. :P </p>\n<p>A few quick thoughts:</p>\n<ul>\n<li>You're not terminating your \"RE\" master node properly.</li>\n<li>You need to check the very first comms to see if there is an opening sequence, such as to establish privilege.</li>\n<li>I see numbers incrementing in your output. That's definitely not on accident.</li>\n<li>Are the big packets all the same size? If not, there will be a length value somewhere in the packet. You'll need some kind of program to go through each packet checking if any byte or word matches the length of the total packet or length following (and also with / without CRC+0x1003).</li>\n</ul>\n<p>Googling for <code>RS485 half duplex bus protocol crc 0x1003</code> led me to a few interesting PDFs about protocols. Unless the makers are hideously paranoid, they'll be using something \"normal\" on the RS485 bus: </p>\n<ul>\n<li>Modbus (can have ASCII or TCP frames). I haven't studied TCP frames, but wouldn't surprise me if that could be source of the incrementing values.</li>\n<li>CANopen maybe? Why not it's a protocol... :P</li>\n<li><a href=\"https://www.automationdirect.com/static/manuals/ea1mg6userm/appxa.pdf\" rel=\"nofollow\">This PDF result</a> from the google above lists all kinds of different protocols I haven't heard of before.</li>\n</ul>\n<p>I'd set up a chipKIT uC32 with multiple UARTs in the middle with a \"master\" side and a \"slave\" side. You'll probably need the \"driver\" or \"transceiver\" ICs for each circuit. Oh, an Arduino might work, but the 80MHz PIC32 in the chipKIT rocks. Once you can relay messages and the system keeps working, you'll know a lot more about what's going on. Physically and signal-wise.</p>\n</div>",
            "votes": "1",
            "user": "Krista K",
            "time": "Feb 16, 2015 at 3:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zac",
                    "text": "<span class=\"comment-copy\">Thanks for the tips! I love the idea of relaying messages, that will let me know the direction the packets are traveling. Will dig into your other comments.</span>",
                    "time": null
                },
                {
                    "user": "Zac",
                    "text": "<span class=\"comment-copy\">To answer a few questions: first packet in my listing is the first packet on the wire during startup. The big packets with the first byte matching are the same size; grouping all packets by the first byte makes it appear to be a fixed size packet protocol.</span>",
                    "time": null
                }
            ]
        }
    ]
}