{
    "title": "Questions regarding PLT/GOT and statically linking",
    "link": "https://reverseengineering.stackexchange.com/questions/23051/questions-regarding-plt-got-and-statically-linking",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am looking at the assembly code of a heap-overflow challenge (<a href=\"https://exploit-exercises.lains.space/protostar/heap3/\" rel=\"nofollow noreferrer\">heap3</a> in Protostar) which uses a vulnerability of an old version of <code>dlmalloc</code> to execute the exploit. Below is the assembler dump:</p>\n<pre><code>0x08048889 &lt;main+0&gt;:    push   ebp\n0x0804888a &lt;main+1&gt;:    mov    ebp,esp\n0x0804888c &lt;main+3&gt;:    and    esp,0xfffffff0\n0x0804888f &lt;main+6&gt;:    sub    esp,0x20\n0x08048892 &lt;main+9&gt;:    mov    DWORD PTR [esp],0x20\n0x08048899 &lt;main+16&gt;:   call   0x8048ff2 &lt;malloc&gt;\n0x0804889e &lt;main+21&gt;:   mov    DWORD PTR [esp+0x14],eax\n0x080488a2 &lt;main+25&gt;:   mov    DWORD PTR [esp],0x20\n0x080488a9 &lt;main+32&gt;:   call   0x8048ff2 &lt;malloc&gt;\n0x080488ae &lt;main+37&gt;:   mov    DWORD PTR [esp+0x18],eax\n0x080488b2 &lt;main+41&gt;:   mov    DWORD PTR [esp],0x20\n0x080488b9 &lt;main+48&gt;:   call   0x8048ff2 &lt;malloc&gt;\n0x080488be &lt;main+53&gt;:   mov    DWORD PTR [esp+0x1c],eax\n0x080488c2 &lt;main+57&gt;:   mov    eax,DWORD PTR [ebp+0xc]\n0x080488c5 &lt;main+60&gt;:   add    eax,0x4\n0x080488c8 &lt;main+63&gt;:   mov    eax,DWORD PTR [eax]\n0x080488ca &lt;main+65&gt;:   mov    DWORD PTR [esp+0x4],eax\n0x080488ce &lt;main+69&gt;:   mov    eax,DWORD PTR [esp+0x14]\n0x080488d2 &lt;main+73&gt;:   mov    DWORD PTR [esp],eax\n0x080488d5 &lt;main+76&gt;:   call   0x8048750 &lt;strcpy@plt&gt;\n0x080488da &lt;main+81&gt;:   mov    eax,DWORD PTR [ebp+0xc]\n0x080488dd &lt;main+84&gt;:   add    eax,0x8\n0x080488e0 &lt;main+87&gt;:   mov    eax,DWORD PTR [eax]\n0x080488e2 &lt;main+89&gt;:   mov    DWORD PTR [esp+0x4],eax\n0x080488e6 &lt;main+93&gt;:   mov    eax,DWORD PTR [esp+0x18]\n0x080488ea &lt;main+97&gt;:   mov    DWORD PTR [esp],eax\n0x080488ed &lt;main+100&gt;:  call   0x8048750 &lt;strcpy@plt&gt;\n0x080488f2 &lt;main+105&gt;:  mov    eax,DWORD PTR [ebp+0xc]\n0x080488f5 &lt;main+108&gt;:  add    eax,0xc\n0x080488f8 &lt;main+111&gt;:  mov    eax,DWORD PTR [eax]\n0x080488fa &lt;main+113&gt;:  mov    DWORD PTR [esp+0x4],eax\n0x080488fe &lt;main+117&gt;:  mov    eax,DWORD PTR [esp+0x1c]\n0x08048902 &lt;main+121&gt;:  mov    DWORD PTR [esp],eax\n0x08048905 &lt;main+124&gt;:  call   0x8048750 &lt;strcpy@plt&gt;\n0x0804890a &lt;main+129&gt;:  mov    eax,DWORD PTR [esp+0x1c]\n0x0804890e &lt;main+133&gt;:  mov    DWORD PTR [esp],eax\n0x08048911 &lt;main+136&gt;:  call   0x8049824 &lt;free&gt;\n0x08048916 &lt;main+141&gt;:  mov    eax,DWORD PTR [esp+0x18]\n0x0804891a &lt;main+145&gt;:  mov    DWORD PTR [esp],eax\n0x0804891d &lt;main+148&gt;:  call   0x8049824 &lt;free&gt;\n0x08048922 &lt;main+153&gt;:  mov    eax,DWORD PTR [esp+0x14]\n0x08048926 &lt;main+157&gt;:  mov    DWORD PTR [esp],eax\n0x08048929 &lt;main+160&gt;:  call   0x8049824 &lt;free&gt;\n0x0804892e &lt;main+165&gt;:  mov    DWORD PTR [esp],0x804ac27\n0x08048935 &lt;main+172&gt;:  call   0x8048790 &lt;puts@plt&gt;\n0x0804893a &lt;main+177&gt;:  leave\n0x0804893b &lt;main+178&gt;:  ret\nEnd of assembler dump.\n</code></pre>\n<p>Now looking at the assembler dump what I can understand is <code>malloc()</code> and <code>free()</code> are linked to the binary statically, while <code>strcpy()</code> and <code>puts()</code> are linked using PLT. </p>\n<p>When I try to compile this program using it's source code, I get <code>malloc@plt</code> and <code>free@plt</code>, which when compiled on my local machine uses the wrong version of <code>dlmalloc</code>. The challenge is compiled and placed on a Debian distribution which we have to boot up in order to try this challenge but I would like to try it on my local machine. Can someone explain how I will be able to compile it so that <code>malloc()</code> and <code>free()</code> are statically linked with the binary.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "224",
    "tags": [
        "binary-analysis",
        "dynamic-linking",
        "plt"
    ],
    "user": "Rev-time",
    "time": "Jan 20, 2020 at 14:10",
    "comments": [
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">Why would you rebuild the binary ? It is enough to copy it to your machine and try it if you want.</span>",
            "time": null
        },
        {
            "user": "Rev-time",
            "text": "<span class=\"comment-copy\">Thing is copying from the virtual machine is a big pain for me and I would like to create my own versions of this particular challenge too</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are given only the code of the <code>main()</code> and <code>winner()</code> functions because only these ones are relevant for the exploitation. But, of course, the binary embed also the code of <code>malloc()</code> and <code>free()</code> which are taken from the original Doug Lea's <code>malloc()</code> function. If you want to reproduce the same binary with the code, you may need to add the code of the <a href=\"http://gee.cs.oswego.edu/dl/html/malloc.html\" rel=\"nofollow noreferrer\">original Doug Lea's <code>malloc()</code></a> as well.</p>\n<p>You can find the source code <a href=\"http://gee.cs.oswego.edu/pub/misc/\" rel=\"nofollow noreferrer\">here</a>.</p>\n</div>",
            "votes": "1",
            "user": "perror",
            "time": "Jan 20, 2020 at 14:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rev-time",
                    "text": "<span class=\"comment-copy\">Thank you for your help. Now this might sound like a stupid question, but could you please explain how I will be able to embed the source code into the binary. I am not quite familiar with using gcc properly</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Rev-time this is probably question for StackOverflow or SuperUser since it does not involve reverse engineering</span>",
                    "time": null
                }
            ]
        }
    ]
}