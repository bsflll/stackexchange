{
    "title": "What should the instruction string be for capstone",
    "link": "https://reverseengineering.stackexchange.com/questions/30647/what-should-the-instruction-string-be-for-capstone",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The following program doesn't correctly disassemble string \"d280001d\", it just outputs:</p>\n<blockquote>\n<p>0x1000:</p>\n</blockquote>\n<p>I also tried \"\\xd2\\x80\\x00\\x1d\", which I got from <a href=\"http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=movz%20%20x29%2C%20%230%0D%0A&amp;arch=arm64&amp;as_format=inline#assembly\" rel=\"nofollow noreferrer\">shell-storm.org</a>, still got the same issue. Anybody can help me on what is going wrong? I cannot find explanation about what kind of input string format capstone expects. Thanks</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;inttypes.h&gt;\n#include &lt;capstone/capstone.h&gt;\n#define CODE \"1d0080d2\" // expect: movz  x29, #0\n\nint main(void)\n{\n\n  csh handle;\n  cs_insn *insn;\n  size_t count;\n  //if (cs_open(CS_ARCH_ARM64, CS_MODE_ARM, &amp;handle) != CS_ERR_OK)\n  if (cs_open(CS_ARCH_ARM64, CS_MODE_ARM, &amp;handle) != CS_ERR_OK)\n    return -1;\n\n  count = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &amp;insn);\n  if (count &gt; 0) {\n    size_t j;\n    for (j = 0; j &lt; count; j++) {\n      // Assembly code address Address ,mnemonic It's the opcode ,op_str It's the operands \n      printf(\"0x%\"PRIx64\":\\t%s\\t\\t%s\\n\", insn[j].address, insn[j].mnemonic,\n      insn[j].op_str);\n    }\n    cs_free(insn, count);\n  } else\n    printf(\"ERROR: Failed to disassemble given code!\\n\");\n\n  cs_close(&amp;handle);\n  return 0;\n}\n</code></pre>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "102",
    "tags": [
        "capstone"
    ],
    "user": "yeeha",
    "time": "Jul 16, 2022 at 19:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You CODE def needs the data formatted like this:</p>\n<pre><code>#define CODE \"\\x1d\\x00\\x80\\xd2\" // expect: movz  x29, #0\n</code></pre>\n<p>You don't need to change the endian format, please see the Capstone docs for guidance: <a href=\"https://www.capstone-engine.org/lang_c.html\" rel=\"nofollow noreferrer\">https://www.capstone-engine.org/lang_c.html</a></p>\n<p>Output:</p>\n<pre><code>$ ./cap \n0x1000: movz        x29, #0\n</code></pre>\n</div>",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jul 17, 2022 at 5:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yeeha",
                    "text": "<span class=\"comment-copy\">Thanks for the help. I actually tried different enumeration of the 4 byte orders (including  \"\\x1d\\x00\\x80\\xd2\") and nothing works. I am wondering if there is something wrong with the way I build my capstone.</span>",
                    "time": null
                },
                {
                    "user": "yeeha",
                    "text": "<span class=\"comment-copy\">I built capstone with the following command:  CAPSTONE_ARCHS=\"aarch64\" CAPSTONE_USE_SYS_DYN_MEM=no CAPSTONE_DIET=yes CAPSTONE_X86_REDUCE=yes sh -x  ./make.sh debug</span>",
                    "time": null
                },
                {
                    "user": "Mega Tonnage",
                    "text": "<span class=\"comment-copy\">I didn't do anything special:  <code>gcc -lcapstone -o cap cap.c</code></span>",
                    "time": null
                }
            ]
        }
    ]
}