{
    "title": "ARMCC/C++ Empty Vtable entries",
    "link": "https://reverseengineering.stackexchange.com/questions/16672/armcc-c-empty-vtable-entries",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am reversing an application for the 3ds which are compiled with ARMCC.</p>\n<p>I found the vtables of the key classes and have a problem figuring out how the C++ representation of these was.</p>\n<p>Vtable of first base class:</p>\n<pre><code>fBase::dtor\n0                     // no dtorFree\nfBase::function1\nfBase::function2\n...\nfBase::function13\n</code></pre>\n<p>Vtable of second base class:</p>\n<pre><code>sBase::dtor\n0                     // no dtorFree\nsBase::function1\nfBase::function2\n...\nsBase::function13\n</code></pre>\n<p>Now the problematic one:</p>\n<p>Vtable of Actor class:</p>\n<pre><code>Actor::dtor\n0                     // no dtorFree\nsBase::function1\nfBase::function2\n... (3-12)\nsBase::function13\n0                     // gap in vtable?\nActor::function14\nActor::function15\n... (16-19)\nActor::function20\n0                     // gap in vtable?\nActor::function21\nActor::function22\n... (23-34)\nActor::function35\n</code></pre>\n<p>At the beginning I assumed that these are pure virtual function (Actor::function20-1()=0;) but these \"gaps\" in the vtables are not \"overwritten\" by any top level classes and thus the gaps also end up in their vtables.</p>\n<p>What causes these empty vtable entries and how'd the C++ representation look like?</p>\n</div>",
    "votes": "3",
    "answers": 2,
    "views": "353",
    "tags": [
        "decompilation",
        "c++",
        "arm",
        "virtual-functions"
    ],
    "user": "iBent",
    "time": "Oct 31, 2017 at 10:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Two possibilities come to mind:</p>\n<ol>\n<li><p>These are slots for pure virtual methods. In many implementations the compiler provides something like <code>__purecall</code>  or <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#pure-virtual\" rel=\"nofollow noreferrer\"><code>__cxa_pure_virtual</code></a> to catch accidental calls, but since they are not supposed to happen anyway, a NULL works just as well on resource-constrained platforms.</p></li>\n<li><p>Itanium C++ ABI reserves two slots preceding the function table itself for the <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable\" rel=\"nofollow noreferrer\"><em>offset to top</em> and <em>typeinfo pointer</em></a>. </p></li>\n</ol>\n<p>In most classes, offset to top is 0 and the typeinfo pointer can be zero as well if RTTI is not used, so normally you would see <em>two</em> zeroes between vtables, so I strongly suspect you have the case #1. </p>\n<p>As for why they're not overridden, maybe it's a bug in the source code. As long as they're not actually called it's all kosher from the C++ point of view AFAIK.</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Oct 31, 2017 at 11:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After reversing a bit more:</p>\n<p>It cannot be __cxa_pure_virtual. I found the implementation for that in my binary.</p>\n<p>It looks like the compiler just did some very poor optimizations: The virtual function slot is never called so the corresponding functions were optimized away but it didn't actually shift the slot indices. Interesting.</p>\n</div>",
            "votes": "0",
            "user": "iBent",
            "time": "May 22, 2020 at 8:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}