{
    "title": "Ldr arm thumb2 must be multiple of 4?",
    "link": "https://reverseengineering.stackexchange.com/questions/18029/ldr-arm-thumb2-must-be-multiple-of-4",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I saw here <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/CIHDGFEG.html\" rel=\"nofollow noreferrer\">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/CIHDGFEG.html</a> that on arm thumb2 ldr must be multiple of 4.</p>\n<p>I run on arm thumb 2  and want run this instruction <code>ldr r0, [pc, #0x13]</code> .</p>\n<p>I trunslate in to <code>DFF81300</code> and that works, even 0x13 is not multiple of 4.</p>\n<p>Why is that?   </p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "320",
    "tags": [
        "binary-analysis",
        "arm",
        "binary-editing"
    ],
    "user": "ivn23744sawoe.com",
    "time": "Apr 18, 2018 at 19:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The instruction generated by your assembler for ldr is in fact ldr.w, a 32-bit Thumb 2 instruction, as you can see in the encoding using four bytes. In my experience, ARM assemblers try to be intelligent and figure out the best (or only) working instruction encoding - especially when using unified syntax.</p>\n<p>The four byte alignment is only a restriction for ldr instructions encoded as 16 bit instructions (footnote [b] in the document you linked). I suppose this restriction was made due to restricted encoding space for the constant offset in a 16 bit opcode, so the thumb instruction set designers went for a larger possible offset here.</p>\n</div>",
            "votes": "2",
            "user": null,
            "time": "Apr 18, 2018 at 21:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}