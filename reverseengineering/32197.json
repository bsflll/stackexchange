{
    "title": "Simple Question About Reversing a Python",
    "link": "https://reverseengineering.stackexchange.com/questions/32197/simple-question-about-reversing-a-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, detect it easy, shows that the .exe is a python 3.9 compiled on visual studio and the compiler was MS Visual C/C++. Trying to unpack it using <code>pyinstxtractor</code> fails, and shows me the error of</p>\n<blockquote>\n<p>cookie missing etc.</p>\n</blockquote>\n<p>That happens when you are trying to unpack a .NET application, but I'm kind of confused now. I can't unpack it and it's a python. How is that? Even on <code>DnSpy</code>, it only shows me the header. What should I do now?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "255",
    "tags": [
        "disassembly",
        "idapython",
        "python"
    ],
    "user": "Roy Guzman",
    "time": "Sep 3, 2023 at 22:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>If the executable is indeed a pyinstaller binary, then you generally need to make sure that you're running <code>pyinstxractor</code> inside the same version of python as produced the executable. Try to verify that is the case.</li>\n<li>The executable might not be a pyinstaller binary, as there are multiple python \"compiler\" options. The other major one is <code>py2exe</code> (<a href=\"https://pypi.org/project/py2exe/\" rel=\"nofollow noreferrer\">https://pypi.org/project/py2exe/</a>), and there's another project <code>unpy2exe</code> for dealing with that format(<a href=\"https://pypi.org/project/unpy2exe/\" rel=\"nofollow noreferrer\">https://pypi.org/project/unpy2exe/</a>) Like pyinstxractor, I've found that it's generally better to run this project with the same python version.</li>\n<li>If you want to ID what version of python it's using, you can use <code>strings</code></li>\n<li>DnSpy won't help you with python binaries. It only decompiles .NET CIL. Instead, once you've got the python executable unpacked into its requisite .pyc files, you'll want to run a separate decompiler utility like <code>uncompyle6</code>(<a href=\"https://pypi.org/project/uncompyle6/\" rel=\"nofollow noreferrer\">https://pypi.org/project/uncompyle6/</a>) or <code>decompyle3</code> (<a href=\"https://github.com/rocky/python-decompile3\" rel=\"nofollow noreferrer\">https://github.com/rocky/python-decompile3</a>). Then you can open the produced .py files in your favorite editor.</li>\n</ol>\n<p>Here's another reference that's helpful if you aren't familiar with analyzing python:\n<a href=\"https://betterprogramming.pub/analysis-of-compiled-python-files-629d8adbe787\" rel=\"nofollow noreferrer\">https://betterprogramming.pub/analysis-of-compiled-python-files-629d8adbe787</a></p>\n</div>",
            "votes": "1",
            "user": "mayahustle",
            "time": "Sep 11, 2023 at 9:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}