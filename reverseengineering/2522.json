{
    "title": "Binary instrumentation with Python",
    "link": "https://reverseengineering.stackexchange.com/questions/2522/binary-instrumentation-with-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm interested in performing (dynamic) binary instrumentation using Python to be able to analyze the binary by instructions during execution for</p>\n<ul>\n<li><p>Windows</p>\n</li>\n<li><p>Linux</p>\n<p>Can someone suggest such tool/framework? Does it even exist or possible?</p>\n</li>\n</ul>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis"
    ],
    "user": "PhoeniX",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "<span class=\"comment-copy\">Man ... that is going to be hella slow.</span>",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">I know, but currently I do not really care :)</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"https://code.google.com/p/processtap/\">https://code.google.com/p/processtap/</a> -</p>\n<blockquote>\n<p><strong>ProcessTap</strong> is a dynamic tracing framework for analyzing closed\n  source-applications. ProcessTap is inspired by <a href=\"http://opensolaris.org/os/community/dtrace/\">DTrace</a> and <a href=\"http://sourceware.org/systemtap/\">SystemTap</a>,\n  but it is specific for analyzing closed-source user-space\n  applications. ProcessTap leverages dynamic binary instrumentation to\n  intercept the events of interest (e.g., function calls, system call,\n  memory accesses, and conditional control transfers). Although the\n  current implementation relies on <a href=\"http://www.pintool.org/\">PinTool</a>, alternative back-ends for\n  instrumentation (e.g., <a href=\"http://www.valgrind.org/\">Valgrind</a>, <a href=\"http://www.qemu.org/\">Qemu</a>, or <a href=\"http://code.google.com/p/dynamorio/\">DynamoRIO</a>) can be used. The\n  language used in ProcessTap for writing scripts to instrument\n  applications is <a href=\"http://www.python.org/\">Python</a>.</p>\n</blockquote>\n</div>",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jul 22, 2013 at 22:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Despite being an afternoon hack, <a href=\"https://github.com/pgoodman/Python-Binary-Instrumenter\" rel=\"nofollow\">this static binary instrumenter</a> might get you part way there. However, consider these crucial limitations:</p>\n<ul>\n<li>It's not dynamic insofar as it runs at compile time, not at runtime.</li>\n<li>It is also not comprehensive, in the sense that shared and dynamically loaded libraries will not be instrumented by this.</li>\n<li>It provides no mechanisms for maintaining state, except by linking in your own code (exampled in the <code>gc</code> directory and <code>Makefile</code>). There isn't a good way of connecting instrumentation to that code, except by perhaps declaring and using an <code>extern</code> symbol whose mangled name you know.</li>\n</ul>\n<p>BUT, it is in python ;-)</p>\n</div>",
            "votes": "4",
            "user": "Peter Goodman",
            "time": "Sep 9, 2013 at 20:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}