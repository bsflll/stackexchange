{
    "title": "Need help disassembling Qualcomm QDSP6",
    "link": "https://reverseengineering.stackexchange.com/questions/16330/need-help-disassembling-qualcomm-qdsp6",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Im trying to disassemble a qualcomm QDSP6 modem file. According to the ELF header, there should be 26 sections(modem.b00-b25). However after dumping the device, b.16,b.17,b.25 are missing, making the file impossible to open with IDA.</p>\n<p>The device is an Alcatel 4060-A. I have full access to the phone's emmc via usb download mode, also tried dumping the same modem partition via ADB. Same result, the partition is missing those 3 sections. Even reading the raw unpacked file in a hex editor, there is no mention of those 3 elf sections</p>\n<p>Any suggestions?</p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "user1698144",
    "time": "Sep 13, 2017 at 8:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">how did you do \"dumping the device\"? what device? provide more info</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should check the program headers with <code>readelf -a modem.b00</code>.\nIt will show you which sections have a <code>FileSiz</code> of zero bytes. These are probably the ones missing.</p>\n<p>Then you can put together the original <code>ELF</code> file by loading each <code>modem.bNN</code> section at the right offset, as indicated by the <code>Offset</code> field in the <code>readelf -a</code> output.</p>\n<p>I don't know which rom you used, i downloaded the one from <a href=\"https://forum.xda-developers.com/android/general/rom-alcatel-ideal-4060a-stock-android-5-t3637885\" rel=\"nofollow noreferrer\">xdadev</a></p>\n<p>unzipped using <code>unzip</code>. Then extracted the <code>modem.img</code> file using <code>7z</code>:</p>\n<pre><code>7z -omodem x modem.img\n</code></pre>\n<p>then in <code>modem/image</code> there are the <code>modem.bNN</code> files.\nof those: b04, b17, b18 and b25  are missing.\nWhen looking at <code>readelf -a modem.b00</code>, I can see that those are exactly the ones with <code>FileSiz == 0</code>.</p>\n<pre><code>Type    Offset   VirtAddr PhysAddr FileSiz  MemSiz   Flg Align\nNULL    00000000 00000000 00000000 00000374 00000000     00000000    -- b00 ELF header\nNULL    00001000 8d500000 8d500000 00001c68 00002000     00001000    -- b01 hashes, signature, certs\nINTERP  01c47280 c1cbe280 89cbe280 00000001 00000001 R   00000001    -- b02\nLOAD    00003000 c0000000 88000000 00001540 00001540 R E 00001000    -- b03\nLOAD    00005000 c0004000 88004000 00000000 00001000 RW  00001000    -- \nLOAD    00005000 c0008000 88008000 0002c160 0002c160 RW  00001000    -- b05\nLOAD    00032000 c0038000 88038000 0005e340 0005e340 RW  00001000    -- b06\nLOAD    00091000 c00c0000 880c0000 00200000 00200000 R E 00001000    -- b07\nLOAD    00291000 c02c0000 882c0000 00280000 00280000 R E 00001000    -- b08\nLOAD    00511000 c0540000 88540000 00033a2c 00033a2c RWE 00001000    -- b09\nLOAD    00545000 c0574000 88574000 000b0a2c 000b0a2c R E 00001000    -- b10\nLOAD    005f6000 c0630000 88630000 000f78b4 000f78b4 R E 00001000    -- b11\nLOAD    006ee000 c0728000 88728000 00df81d0 00df81d0 R E 00001000    -- b12\nLOAD    014e7000 c1540000 89540000 00062fe0 00062fe0 RW  00001000    -- b13\nLOAD    0154a000 c15c0000 895c0000 004fbb93 004fbb93 R   00001000    -- b14\nLOAD    01a46000 c1abd000 89abd000 00208a83 00208a83 RW  00001000    -- b15\nDYNAMIC 01c47284 c1cbe284 89cbe284 00000078 00000078 RW  00000004    -- b16\nLOAD    01c4f000 c1cc6000 89cc6000 00000000 000ddc64 RW  00001000    -- \nLOAD    01c50000 c1da4000 89da4000 00000000 010b9000 RW  00001000    -- \nLOAD    01c4f000 c2e5d000 8ae5d000 00013e00 00013e00 RW  00001000    -- b19\nLOAD    01c63000 c2e71000 8ae71000 00079648 00079648 R   00001000    -- b20 .. zlib\nLOAD    01cdd000 c2eeb000 8aeeb000 00947000 00947000 R   00001000    -- b21 .. q6zip\nLOAD    02625000 c3833000 8b833000 00013000 00013000 RW  00001000    -- b22 .. delta\nLOAD    02639000 c3847000 8b847000 0008e000 0008e000 RWE 00001000    -- b23\nLOAD    026c8000 c38d6000 8b8d6000 0006ecb4 0006ecb4 RW  00001000    -- b24\nLOAD    02737000 c3945000 8b945000 00000000 01bbb000 RW  00001000    -- \n</code></pre>\n<p>Other things to note:</p>\n<ul>\n<li>modem.mdt == modem.b00 + modem.b01</li>\n<li>modem.b01 contains sha256 hashes of all other non empty sections. And a signature and certificates.</li>\n<li>modem.b20 can be decompressed using zlib.decompress</li>\n<li>modem.b21 and modem.b22 use compression methods designed by qualcomm. Named q6zip and deltacompress respectivly.</li>\n</ul>\n<p>I will soon post decompression tools for the delta and q6zip sections on my github account.\nEDIT: Soon was 6 years later, now on <a href=\"https://github.com/nlitsme/qualcomm-q6zip\" rel=\"nofollow noreferrer\">github</a></p>\n<p>The qualcomm hexagon documentation can be found <a href=\"https://developer.qualcomm.com/software/hexagon-dsp-sdk/tools\" rel=\"nofollow noreferrer\">here</a>, free registration required. The instruction set is described in <a href=\"https://developer.qualcomm.com/download/hexagon/hexagon-v62-programmers-reference-manual.pdf\" rel=\"nofollow noreferrer\">Hexagon V62 Programmer's Reference Manual</a>.</p>\n<p>See also the <a href=\"https://github.com/gsmk/hexagon/blob/master/README.md\" rel=\"nofollow noreferrer\">README.md</a> from <a href=\"https://github.com/gsmk/hexagon\" rel=\"nofollow noreferrer\">https://github.com/gsmk/hexagon</a>.</p>\n</div>",
            "votes": "7",
            "user": "Willem Hengeveld",
            "time": "Nov 23, 2023 at 15:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1698144",
                    "text": "<span class=\"comment-copy\">That did the trick. IDA does assemble the file now. Would you happen to know where I could find documentation of the Hexagon instruction set, or examples?</span>",
                    "time": null
                },
                {
                    "user": "not2qubit",
                    "text": "<span class=\"comment-copy\">Where can I find those: \"decompression tools for the <b>delta</b> and <b>q6zip</b>\"?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>for decompressing RO or RW sections,\nI recommend using the utilities from the sources.\nq6zip_ro_uncompress.py or rw_decompress_file.py</p>\n<p>universal method of unpacking - doesn't exist,\neven on one chipset, the algorithm, like add q6zip, or RO dictionary size can change.\nso, better has the same version of sources.</p>\n<p>I can't give a more accurate answer,\nbecause while I was olny decompress the few RO section,\nRW - unpacked with errors.</p>\n<p>unpack is better on Linux. and sources need recompile.</p>\n<p>I also recommend trying to swith the device into download mode, and just dump the memory. although I'm not sure that there will be all the unpacked blocks, but worth a try.</p>\n<p>I now have a similar problem with MDM9230, TCL(alcatel) Y900NB, I don't even know what version of dlpager is used (( and  I can't unpack it too.\n(i haven't HW, I just work with SW)</p>\n<p>in principle, all the above just flooding, I only want to ask Willem Hengeveld, maybe he will tell something more, but need rep 50 for comment, so need answer ))</p>\n</div>",
            "votes": "2",
            "user": "peter carver",
            "time": "Aug 6, 2018 at 17:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Maybe I'm missing something but where can we find those scripts/resources?</span>",
                    "time": null
                },
                {
                    "user": "peter carver",
                    "text": "<span class=\"comment-copy\">as I wrote above, all scripts in the BB  source code distributed by QCOM. Of course, there are not only scripts, but also * .c files as well.  The problem is when there are none QCOM support. what are your result, except that were missed?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">To be honest, I was looking for a concrete link or pointer to whan should/can an individual do to get those resources from QCOM, if that's relevant.</span>",
                    "time": null
                },
                {
                    "user": "peter carver",
                    "text": "<span class=\"comment-copy\">it's horrible. I see xda-dev. I haven't any  to say.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@0xC0000022L users are limited by the <i>number</i> (8) of links they can post in a single comment/answer, so there shouldn't be a problem for newcomers to post a link to a resource.</span>",
                    "time": null
                }
            ]
        }
    ]
}