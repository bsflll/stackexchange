{
    "title": "Is Ghidra's decompilation of ARMv7 strb.w instruction broken?",
    "link": "https://reverseengineering.stackexchange.com/questions/25309/is-ghidras-decompilation-of-armv7-strb-w-instruction-broken",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently disassembling some firmware, when I stumbled across the following code snippet produced by Ghidra (the names are already my own ones):</p>\n<pre><code>void memset(byte *addr,byte value,int count)\n                            assume LRset = 0x0\n                            assume TMode = 0x1\n  undefined         r0:1           &lt;RETURN&gt;                                \n  byte *            r0:4           addr                                    \n  byte              r1:1           value\n  int               r2:4           count\n  undefined4        r0:4           iPtr                                    \n\n22 b1           cbz        count,LAB_FIN\n02 44           add        count,addr\n                      LAB_LOOP\n00 f8 01 1b     strb.w     value,[iPtr],#0x1\n90 42           cmp        iPtr,count\nfb d1           bne        LAB_LOOP\n                      LAB_FIN  \n70 47           bx         lr\n00              ??         00h\nbf              ??         BFh\n</code></pre>\n<p>Ghidra's decompiler produces the following output (after setting some types):</p>\n<pre><code>void memset(byte *addr,byte value,int count)\n{\n  byte *iPtr;\n\n  if (count != 0) {\n    iPtr = addr;\n    do {\n      iPtr = iPtr + 1;\n      *iPtr = value;                // write to iPtr AFTER the pointer was increased\n      iPtr = iPtr;\n    } while (iPtr != addr + count);\n  }\n  return;\n}\n</code></pre>\n<p>Now, I have two questions:</p>\n<ol>\n<li><p>The decompiled function suggests that this <code>memset</code> function will not set the given address (addr) to the specified value, but will always start with <code>addr+1</code>. This, however, doesn't feel right and as far as I understand the <code>strb.w</code> instruction it uses post-indexing. Therefore - I think - the order of the pointer-increment and the assignment instruction is wrong. Am I right or do I miss something?</p></li>\n<li><p>After the bx instruction there are two further bytes. I don't have the slightest idea what they are. Given that they are not \"00\" I don't think that they are (solely) used for alignment purposes.  (The next function definitively starts directly after these two bytes.) Does anyone have an idea?</p></li>\n</ol>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "520",
    "tags": [
        "decompilation",
        "c",
        "arm",
        "ghidra"
    ],
    "user": "Delors",
    "time": "Jun 16, 2020 at 9:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Indeed, it seems to be incorrect. The syntax <code>[R0],#1</code> is called  <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dui0552a/BABJGHFJ.html\" rel=\"nofollow noreferrer\"><em>post-indexed</em></a>: first the store (or load) is performed, and <em>then</em> the base address is incremented (or decremented) by the value specified. So the assignment and increment should be swapped.</p>\n<p>As for <code>00 BF</code>, it is the opcode for the <code>NOP</code> instruction, probably inserted to align next function on a 4-byte boundary.</p>\n</div>",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Jun 17, 2020 at 15:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}