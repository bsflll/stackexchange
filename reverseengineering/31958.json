{
    "title": "How to get Ghidra to show `PUSH LAB_xxx` in Decompile view",
    "link": "https://reverseengineering.stackexchange.com/questions/31958/how-to-get-ghidra-to-show-push-lab-xxx-in-decompile-view",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am new to using Ghidra and I am trying to reverse engineer an x86 Windows executable written in Delphi Pascal.</p>\n<p>I believe I am seeing a problem with the analysis of Try Finally blocks and I'd like to understand current limitations or my own misunderstandings.</p>\n<p>TL;DR: How can I get Ghidra to recognize that <code>LAB_004c9a4c</code> is part of the same function above it?</p>\n<p>Ghidra shows the function ending at <code>004c9a44</code> with the RET.</p>\n<p>The jump at <code>004c9a45</code> is a kind of Finally handler.</p>\n<p>The problem is that the <code>PUSH LAB_004c9a4c</code> at <code>004c9a31</code> is never represented anywhere in the Decompile view.</p>\n<p>The analysis into <code>LAB_004c9a4c</code> and past depends on being included in the same function as above (otherwise treating <code>LAB_004c9a4c</code>  as its own function causes A LOT of headaches: a ton of unaff_EBP variables, etc. and it seems like the wrong approach)</p>\n<p>Is there a way I can achieve this? I have played around with some analysis settings in Ghidra, but nothing ever worked.</p>\n<pre><code>...\n\n                     LAB_004c9a29                                    XREF[1]:     004c9a1f(j)  \n004c9a29 33 c0           XOR        param_1,param_1\n004c9a2b 5a              POP        param_2\n004c9a2c 59              POP        ECX\n004c9a2d 59              POP        ECX=&gt;LAB_004c9a45\n004c9a2e 64 89 10        MOV        dword ptr FS:[param_1],param_2\n004c9a31 68 4c 9a        PUSH       LAB_004c9a4c\n         4c 00\n004c9a36 80 7d ff 00     CMP        byte ptr [EBP + local_5],0x0\n004c9a3a 74 08           JZ         LAB_004c9a44\n004c9a3c 8b 45 f8        MOV        param_1,dword ptr [EBP + local_c]\n004c9a3f e8 20 0a        CALL       FUN_0047a464                                     undefined FUN_0047a464(int * * p\n         fb ff\n                     LAB_004c9a44                                    XREF[1]:     004c9a3a(j)  \n004c9a44 c3              RET\n                     LAB_004c9a45                                    XREF[2]:     FUN_004c9290:004c94ae(*), \n                                                                                  FUN_004c9290:004c9a2d(*)  \n004c9a45 e9 c6 ac        JMP        FUN_00404710                                     undefined4 FUN_00404710(undefine\n         f3 ff\n                     -- Flow Override: CALL_RETURN (CALL_TERMINATOR)\n004c9a4a eb              ??         EBh\n004c9a4b ea              ??         EAh\n                     LAB_004c9a4c                                    XREF[1]:     FUN_004c9290:004c9a31(*)  \n004c9a4c 80 7d ff 00     CMP        byte ptr [EBP + -0x1],0x0\n004c9a50 74 14           JZ         LAB_004c9a66\n004c9a52 8b 4d ec        MOV        ECX,dword ptr [EBP + -0x14]\n004c9a55 2b 4d e4        SUB        ECX,dword ptr [EBP + -0x1c]\n004c9a58 83 e9 40        SUB        ECX,0x40\n004c9a5b 8b 55 f8        MOV        EDX,dword ptr [EBP + -0x8]\n004c9a5e 8b 45 f4        MOV        EAX,dword ptr [EBP + -0xc]\n004c9a61 e8 3a 07        CALL       FUN_0047a1a0                                     undefined FUN_0047a1a0(undefined\n         fb ff\n...\n\n</code></pre>\n<p><a href=\"https://i.sstatic.net/3tduX.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/3tduX.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "260",
    "tags": [
        "ghidra",
        "delphi"
    ],
    "user": "Brenton Bostick",
    "time": "Jun 9, 2023 at 22:36",
    "comments": [
        {
            "user": "Brenton Bostick",
            "text": "<span class=\"comment-copy\">IDA Pro does analyze this code correctly (treats as a single function).  This issue may be related to Ghidra not understanding SEH: <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/2477\" rel=\"nofollow noreferrer\">github.com/NationalSecurityAgency/ghidra/issues/2477</a></span>",
            "time": null
        }
    ],
    "answers_data": []
}