{
    "title": "Can you decompile code if you Know the Complier?",
    "link": "https://reverseengineering.stackexchange.com/questions/26203/can-you-decompile-code-if-you-know-the-complier",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My company has a small number of .exe that were written in the '80s that are performing some minorly important tasks. Source code is gone and documentation is scarce. In order to run them we need to use DOSBox. My team wants to get the process into a modern language so we can maintain the code and if possible see how the program functions. Previous attempts to reserve engineer have failed, I believe because not enough time was allotted to work on the problem. I've doing some exploration to see what is possible. Thus far this is what I think I have found:</p>\n<ol>\n<li>Using IDA PRO 5.0 I can get the code back to assembly. The code looks functional.</li>\n<li>From the above, it appears the original code was either Pascal or Delphi.</li>\n<li>It looks like I can see what compiler (Borland) was used to create the .exe files.</li>\n</ol>\n<p>My question is if I know the compiler was Borland, can I use that information to get back to a relatively correct source code? I know the variable names will be bad and it might have other issue that need to be debugged, but just getting back to the basic structure of the code with loops and defined function calls and methods would be great. If not, am I stuck trying to learn assembly to get a better idea of what is going on?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "371",
    "tags": [
        "ida",
        "decompilation",
        "delphi"
    ],
    "user": "Timothy",
    "time": "Oct 31, 2020 at 2:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For most languages -- especially ones that are compiled directly into machine code -- the answer to whether knowing the compiler makes it easier to decompile them is \"no\". <a href=\"https://reverseengineering.stackexchange.com/questions/311/why-are-machine-code-decompilers-less-capable-than-for-example-those-for-the-clr\">I wrote a post a while ago explaining the difficulties that machine code decompilers face</a>; none of them are made easier by knowing the compiler.</p>\n<p>However, your question doesn't mention any of the specific machine code decompilers such as Ghidra. It has the potential to make your life a lot easier, by giving you a reasonably-good approximation of the source code that is interactive (i.e., allows you to change names and types, add comments, etc). I'd recommend giving it a look. Regardless, assembly language will be involved in the process.</p>\n</div>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Oct 31, 2020 at 18:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}