{
    "title": "reversing apk - getting native code in classes.dex",
    "link": "https://reverseengineering.stackexchange.com/questions/13047/reversing-apk-getting-native-code-in-classes-dex",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've start reversing some android application. I have a little experience in this subject, but i got stuck on a little matter.</p>\n<p>The app i'm trying to reverse uses <strong>JNI</strong> (java native interface), meaning some of the code is not java - it is assembly.. To my knowing, the native code should be somewhere in the <strong>classes.dex</strong> file too (together with the dalvik bytecode).</p>\n<p>My problem is that the tool i'm using that knows to convert the dex file into a java code (<strong>dex2jar</strong>) doesn't seem to know how to handle the native code inside the <strong>classes.dex</strong> file. So my questions are: Is there any tool that knows to do this conversion? If not, does someone have general knowledge about the whereabouts of native code in dex files (if it is there)?</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "android",
        "apk"
    ],
    "user": "user3848844",
    "time": "Jul 16, 2016 at 14:46",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No, native code isn't in classes.dex. If an android apk file has native code, the apk itself, when unzipping, should have a <code>lib</code> subdirectory, which may have architecture-dependent subdirectories  <code>armeabi</code>. <code>armeabi-v7a</code>. <code>x86</code> and possibly others, and those will contain the native code objects. Sometimes, shared objects may be in other directories as well, especially if they belong to some libraries the application linked in.</p>\n<p>For example, i unzipped the apk of one application that i know to have native code:</p>\n<pre><code>$ unzip -l net.skoobe.reader-1.apk\n[ stuff omitted ]    \n     2291  2016-03-14 10:27   NDK_LICENSES\n    18549  2016-03-14 10:27   assets/www/error.js\n   345568  2016-03-14 10:27   assets/armeabi/lib64libcrittercism-v3.so\n   308716  2016-03-14 10:27   assets/armeabi-v7a/lib64libcrittercism-v3.so\n   345696  2016-03-14 10:27   assets/arm64-v8a/lib64libcrittercism-v3.so\n     5088  2016-03-14 10:25   lib/armeabi/librsjni.so\n  2890256  2016-03-14 10:26   lib/armeabi/libskoobe.so\n     5088  2016-03-14 10:25   lib/armeabi/libRSSupport.so\n  2792064  2016-03-14 10:26   lib/armeabi-v7a/libskoobe.so\n  4555592  2016-03-14 10:26   lib/x86/libskoobe.so\n    18560  2015-03-26 19:09   lib/armeabi-v7a/librsjni.so\n   420320  2015-03-26 19:09   lib/armeabi-v7a/libRSSupport.so\n    26636  2015-03-26 19:09   lib/x86/librsjni.so\n   518512  2015-03-26 19:09   lib/x86/libRSSupport.so\n   159719  2016-03-14 10:27   META-INF/MANIFEST.MF\n[ more stuff omitted ]    \n</code></pre>\n</div>",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jul 16, 2016 at 14:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3848844",
                    "text": "<span class=\"comment-copy\">Thank you! it helped :) Is there a special approach to REing JNI code? or treat it like any assembly code?</span>",
                    "time": null
                }
            ]
        }
    ]
}