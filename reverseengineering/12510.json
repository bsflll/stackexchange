{
    "title": "Question of analysing function of DLL and write program to call it [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12510/question-of-analysing-function-of-dll-and-write-program-to-call-it",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions asking for help <b>reverse-engineering a specific system</b> are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2016-04-26 14:03:18Z\">9 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/12510/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I have a customized DLL in a large software. The DLL compress/decompress image files. I need to use the DLL separately to get my important images back to decompressed version. \nI can see its function in IDA pro, but I am not sure whether my finding is correct. And I don't know how to call the function properly in C#.\nThe attached pictures is my IDA pro result and my test C# program(of course the program doesn't work).\nPlease help me. </p>\n<p><a href=\"https://i.sstatic.net/PMSyG.jpg\" rel=\"nofollow noreferrer\"><img alt=\"DLL function in IDA Pro\" src=\"https://i.sstatic.net/PMSyG.jpg\"/></a></p>\n<p><a href=\"https://i.sstatic.net/fN4yF.png\" rel=\"nofollow noreferrer\"><img alt=\"Test C# program\" src=\"https://i.sstatic.net/fN4yF.png\"/></a></p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "447",
    "tags": [
        "ida",
        "dll",
        "c#"
    ],
    "user": "xken629",
    "time": "9 years ago",
    "comments": [
        {
            "user": "svick",
            "text": "<span class=\"comment-copy\">Why are you trying to return <code>byte[]</code>? The disassembled code seems to return <code>FILE*</code>.</span>",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "<span class=\"comment-copy\">Did you try debugging the original DLL to see what are the real parameters? Also, I'd recommend first interfacing using C, to be sure the interfaces are ok before dealing with the possible marshaling issues.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, follow the advice of the two commentors and investigate on the semantics of the ArcCompress method. In case it is really returning a C file pointer, what would you do with it in C# ?? Not much, I assume. You wouldn't probably be able to close the file there.</p>\n<p>But anyway, here are two possibilities to call your ArcCompress method from C#. As a small test, first a fictive simple ArcCompress C dll function, as a test facility to see whether the pointers are marshalled correctly. The function must be declared as extern \"C\" to avoid name mangling.</p>\n<pre><code>//Next line is from the header file\n//#define PINVOKE_DLL_API __declspec(dllexport)\nPINVOKE_DLL_API FILE* __cdecl ArcCompress(char* a1, char* a2, int a3)\n{\n    a1[2] = 0xfe;\n    FILE* f = fopen(\"D:\\\\testfile.bin\", \"wb+\");\n    fwrite(a1, a3, 1, f);\n    return f;\n}\n</code></pre>\n<p>This simple function accepts your byte arrays, modifies one byte and writes it into a file, returning the file pointer of the open file.\nAnd here come two possibilities to call this function from C# (In my example, the dll is named \"pinvoke_dll.dll\" instead of \"Arc.dll\"):</p>\n<ol>\n<li><p>The buffer parameters are ordinary references, not much special here. It should be checked however if there may arise problems with the .NET garbage collector. The arrays are assumed as having been initialized.</p>\n<pre><code>[DllImport(\"pinvoke_dll.dll\", CallingConvention = CallingConvention.Cdecl)]\npublic static extern IntPtr ArcCompress(ref byte a,  ref byte b, Int32 c);\n\nprivate void button1_Click(object sender, EventArgs e)\n{\n    IntPtr f = ArcCompress(ref a[0], ref b[0], a.Length );\n}\n</code></pre></li>\n<li><p>The buffer parameters are C# pointers being treated just like ordinary C-pointers. In this case you must tag your method as \"unsafe\" (and check the corresponding checkbox in the project properties), and mark the pointers as fixed, thus informing the garbage collector not to touch them.</p></li>\n</ol>\n<p><code>\n    public unsafe partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        [DllImport(\"pinvoke_dll.dll\", CallingConvention = CallingConvention.Cdecl)]\n        public static extern IntPtr ArcCompress(byte* p1, byte* p2, Int32 c);\n        byte[] a = new byte[10]{1,2,3,4,5,6,7,8,9,0};\n        byte[] b = new byte[10]{0,9,8,7,6,5,4,3,2,1};\n        private void button1_Click(object sender, EventArgs e)\n        {\n            fixed (byte* p1 = &amp;a[0], p2 = &amp;b[0])\n            {\n                IntPtr f = ArcCompress(p1, p2, a.Length);\n            }\n        }\n    }\n</code>\nBTW, in this way you may apply pointer arithmetics in C# just like in C. You must have in mind that you are in an unsafe context, just like in C or C++.</p>\n<p>Have fun!</p>\n</div>",
            "votes": "2",
            "user": "josh",
            "time": "Apr 24, 2016 at 13:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "xken629",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. My problem is solved. The function actually takes two file name strings and returns an int  The correct function call is in c# is   <code>[DllImport(\"Arc.dll\", CallingConvention = CallingConvention.Cdecl, EntryPoint = \"ArcCompress\")]         public static extern int ArcCompress(byte[] infile, byte[] outfile, ref int method);</code></span>",
                    "time": null
                }
            ]
        }
    ]
}