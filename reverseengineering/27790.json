{
    "title": "Retrieve user data as if it were the game making the request",
    "link": "https://reverseengineering.stackexchange.com/questions/27790/retrieve-user-data-as-if-it-were-the-game-making-the-request",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Don't think the title really summed it up but here goes.</p>\n<p>There's a game built in Unreal Engine 4 that displays your (and other users) in-game statistics e.g a leaderboards page.</p>\n<p>I can determine some possible IPs that the game must be talking to in order to retrieve this data but the payload is simply a hex dump and is unreadable (looks to be encoded)</p>\n<p>Just wondering if there is a way to determine how the game is making the request, the details of that request and how it's interpreting the returned data.</p>\n<p>(To summarise: I'm trying to get in-game statistics without any external api provided - since the developers don't have one)</p>\n<p>Many thanks :)</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "294",
    "tags": [
        "game-hacking",
        "unknown-data"
    ],
    "user": "John",
    "time": "Jun 4, 2021 at 13:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>EDIT: Just realized that I completely misunderstood your question. It seems you already have IPs. You're just trying to decode packet information, in which case I have no answer. However, I'll leave this here as it may still be useful for others.</p>\n<p>Most games nowadays use relay servers in which all players (clients) connect to in order to disseminate such statistics like you see in the leaderboards. You used to be able to get player IPs from P2P (client hosted) games, just like in MW2 for example, as all participating clients had to connect to your computer. That is, of course, if you are picked as host.</p>\n<p>If the game in question uses P2P, then you could throw something together in Wireshark. It will require a bit of trial-and-error, but I suggest finding the port being used by the game, then put that into a filter in Wireshark to get IP addresses of all clients.</p>\n<p><strong>If P2P, try this:</strong></p>\n<ol>\n<li>Open command prompt</li>\n<li>Type <code>ipconfig /all</code></li>\n<li>Note your IP address</li>\n<li>Type <code>tasklist | find \"game.exe\"</code></li>\n<li>Note \"PID\" number -- second column in output</li>\n<li><code>netstat -ano | find \" PID\"</code> -- include the space as it will filter out similar PIDs, if any</li>\n<li>Note the port(s) in use -- e.g. <code>TCP/UDP | 192.168.1.1:2529 | 123.123.123.123:1234 | ESTABLISHED | PID</code> (2529 is being used)</li>\n<li>Fire up Wireshark</li>\n<li>Select your network adapter</li>\n<li>In the bar at the top, type in <code>tcp.port == *PORT* &amp;&amp; ip.src != *YOUR IP*</code></li>\n<li>You should begin to see different IP addresses. These are what you're looking for. You'll likely also be getting game server IP addresses as well.</li>\n<li>(Optional) Let it run for a bit, then go to Statistics &gt; Endpoints &gt; IPv4 and check the box at the bottom \"Limit to display filter\"</li>\n</ol>\n<p><strong>Keep the following points in mind when performing the steps above:</strong></p>\n<ul>\n<li>Often times, a process may have child processes</li>\n<li>Often times, a process may be using multiple ports</li>\n</ul>\n<p>However, if the game doesn't use P2P, then I'm not entirely sure of your options.</p>\n<p>I will edit this post if I forgot anything.</p>\n</div>",
            "votes": "1",
            "user": "Steve",
            "time": "Jun 5, 2021 at 18:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}