{
    "title": "Cannot find the caller of the main function in a disassembled firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/4116/cannot-find-the-caller-of-the-main-function-in-a-disassembled-firmware",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am looking at an unstripped ARM elf firmware file using IDA Pro. There is an <code>init()</code> function and a <code>main()</code> function. From my understanding of the logic, it's probably structured like this:</p>\n<pre><code>init()\nwhile (1) {\n   main();  \n}\n</code></pre>\n<p>or the <code>main()</code> itself contains a super loop. However, the strange things are 1) I am not able to find any calling references for the <code>main()</code>. 2) Nor can I identify a super loop structure inside <code>main()</code>.</p>\n<p>The <code>main()</code> is like this:</p>\n<pre><code>  B1: PUSH    {R3-R7,LR}\n  ...\nRN_end_of_main:\n  B2: POP     {R3-R7}\n  B3: POP     {R3}\n  B4: BX      R3\n  (end of main)\n</code></pre>\n<p>The <code>init()</code> is like this (directly following main()):</p>\n<pre><code>  A1: PUSH    {R3-R7,LR}\n      ...\n  A2: LDR     R0, main+1    # This is the only place that references main()\n  A3: B       RN_end_of_main\n  (end of init)\n  (data)\n</code></pre>\n<p><code>A1, A2, .. B3</code> are line numbers added by myself here for easier explanation.</p>\n<p>First off, IDA Pro shows \"Three are no refs to main()\" when using \"Jumps to xrefs to operand...\" function. And line A2 is the only place in the whole firmware disassembly that references <code>main()</code>. However , it put address <code>main+1</code> to <code>R0</code> which I don't understand. It looks like <code>R0</code> is not used after jumping to <code>RN_end_of_main</code>, and the <code>init()</code> will just return using the originally pushed <code>LR</code> which will go nowhere.</p>\n<p>Anything missing in my understanding of this code? And is there some hidden way that <code>main()</code> can be called?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "856",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "arm"
    ],
    "user": "Penghe Geng",
    "time": "Apr 21, 2014 at 21:37",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">What about the caller of <code>init()</code>? Is there any code after calling <code>init()</code>?</span>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">What does the entry point (<code>e_entry</code>) field of the ELF header show? Perhaps it is <code>main</code>, and some external piece of code (like a bootloader, or linker/loader) is calling it?</span>",
            "time": null
        },
        {
            "user": "Penghe Geng",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky No. There's no further code after <code>init()</code> returns, just some data there.</span>",
            "time": null
        },
        {
            "user": "Penghe Geng",
            "text": "<span class=\"comment-copy\">@JonathonReinhart Using <code>objdump</code>, I can see the start address is <code>0x10000</code>, which just puts CPU in user mode and BX to <code>init()</code>. The following code after BX is some data</span>",
            "time": null
        },
        {
            "user": "Jonathon Reinhart",
            "text": "<span class=\"comment-copy\">I would then go about searching for the address of <code>main</code>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Finally I think I might have one explanation for this.</p>\n<p>The ARM elf format firmware file is further converted to a hex bin file which is used by the boot loader to program into the on board flash. So my speculation is that both <code>init</code> and <code>main</code> probably are actually called by the boot loader code.</p>\n<p>This speculation is possible because the elf file is still fully relocatable. The elf--&gt;bin step might do a relocation process to make it callable by the already-present bootloader.</p>\n<p>With this speculation, the <code>init</code> function doesn't call the <code>main</code> actually. Both just are called and returned normally by the bootloader.</p>\n</div>",
            "votes": "3",
            "user": "Penghe Geng",
            "time": "May 4, 2014 at 19:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}