{
    "title": "32-bit binary stack layout on a x64 Linux OS",
    "link": "https://reverseengineering.stackexchange.com/questions/12397/32-bit-binary-stack-layout-on-a-x64-linux-os",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Stack layout is well documented in many ways. Especially for <em>x86</em> systems as there were numerous tutorials on how to exploit stack overflow on old 32-bit systems many years ago.</p>\n<p>So far we can know that on a 32-bit system, the user stack starts from <em>0xc0000000</em> address (which is the limit between usermode and kernelmode).</p>\n<p>This address is not the same if we take an <em>Elf32</em> running on a <em>x86-64</em> linux system.</p>\n<p>I cannot find this address but I can figure out it is <em>0xffffe000</em> thanks to gdb:</p>\n<p><code>(gdb) x $esp\n0xffffd4bc: 0xf7e16a83\n(gdb) x/w 0xffffdffc\n0xffffdffc: 0x00000000\n(gdb) x/w 0xffffe000\n0xffffe000: Cannot access memory at address 0xffffe000\n</code></p>\n<p>We can actually see that the <em>0xffffe000</em> address points to an invalid location (or at least the process doesn't have proper permission to access this memory page).</p>\n<p>Yet I cannot especially find a relevant source that tells us that <strong>the gnu stack of a x86 program on a x64 linux starts from 0xffffe000</strong>. Am I doing things wrong?</p>\n<p>I can find sources telling us about <em>linux-gate.so.1</em> but I do not think this is the point here.</p>\n<p>Any ideas, reversers?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "Geoffrey R.",
    "time": "Apr 11, 2016 at 12:10",
    "comments": [
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">This is a coincidence, I have the same problem with you about the valid address of 32-bit binary stack on x64.</span>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<span class=\"comment-copy\">What values can you get then?</span>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<span class=\"comment-copy\">I found something probably relevant here: <a href=\"http://stackoverflow.com/questions/29426476/linux-process-virtual-address-spaces-address-range\" title=\"linux process virtual address spaces address range\">stackoverflow.com/questions/29426476/…</a></span>",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "<span class=\"comment-copy\">I gets closer here: <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.19#L910\" rel=\"nofollow noreferrer\">lxr.free-electrons.com/source/arch/x86/include/asm/…</a></span>",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "<span class=\"comment-copy\">In <a href=\"https://lwn.net/Articles/631631/\" rel=\"nofollow noreferrer\">this article</a>, the valid range for stack of a process is calculated from <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L840\" rel=\"nofollow noreferrer\">TASK_SIZE</a> for 32-bit processes.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The valid stack access range of a (32 or 64 bit) process can be viewed by looking into its <em>memory map</em>. We can observe the memory map of a process with id <code>pid</code> by <code>cat /proc/pid/maps</code>, an example of a <code>32-bit process</code> on my 64-bit box:</p>\n<pre><code>...\n09b58000-09b79000 rw-p 00000000 00:00 0                    [heap]\n...\nf7785000-f7787000 rw-p 001c7000 00:23 592106               /usr/lib/libc-2.20.so\n...\nf77c2000-f77c4000 r--p 00000000 00:00 0                    [vvar]\nf77c4000-f77c5000 r-xp 00000000 00:00 0                    [vdso]\n...\nf77e8000-f77e9000 rw-p 00022000 00:23 592099               /usr/lib/ld-2.20.so\nfff9b000-fffbc000 rw-p 00000000 00:00 0                    [stack]\n</code></pre>\n<p>Then the valid range for <code>stack</code> is <code>[0xfff9b000, 0xfffbc000)</code>, memory access to an address higher or equal than <code>0xfffbc000</code> will trigger <code>memory access violation</code> exception. According to <a href=\"https://lwn.net/Articles/631631/\" rel=\"nofollow\" title=\"How programs get run: ELF binaries\">this article</a>, this range is calculated when the kernel <a href=\"http://lxr.free-electrons.com/source/fs/binfmt_elf.c?v=3.18#L571\" rel=\"nofollow\">maps the binary into the memory</a>, and by <a href=\"http://lxr.free-electrons.com/source/fs/binfmt_elf.c?v=3.18#L555\" rel=\"nofollow\">several</a> <a href=\"http://lxr.free-electrons.com/source/fs/exec.c?v=3.18#L640\" rel=\"nofollow\">functions</a>, the interesting input for them is <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L840\" rel=\"nofollow\"><code>STACK_TOP</code></a> which is defined by <code>TASK_SIZE</code> for <a href=\"http://lxr.free-electrons.com/source/arch/x86/include/asm/processor.h?v=3.18#L834\" rel=\"nofollow\">32-bit processes</a>.</p>\n</div>",
            "votes": "2",
            "user": "Ta Thanh Dinh",
            "time": "Apr 12, 2016 at 14:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Geoffrey R.",
                    "text": "<span class=\"comment-copy\">Well, I guess this deserves several further investigations. Thanks for your answer.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks @GeoffreyR., you are welcome. In fact, I have the same question with you.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a partial answer.</p>\n<p>One can determine wether the memory layout ends up to <strong>0xc0000000</strong> or <strong>0xffffe000</strong> thanks to the <a href=\"http://linux.die.net/man/2/personality\" rel=\"nofollow\">personality system call</a>. By reading the <em>ADDR_LIMIT_3GB</em> flag it is possible to figure out wether a 32-bit process is mapped up to <strong>0xc0000000</strong> or <strong>0xffffe000</strong>.</p>\n<p>I could not tell why the <strong>0xffffe000</strong> is relevant, except that it is 8192 bytes shorter that the end of a <em>4GB memory space</em>. Maybe it has something to do with the kernel stack size.</p>\n</div>",
            "votes": "0",
            "user": "Geoffrey R.",
            "time": "Apr 12, 2016 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}