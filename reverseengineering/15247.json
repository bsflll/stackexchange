{
    "title": "whats the purpose of this code snippet?",
    "link": "https://reverseengineering.stackexchange.com/questions/15247/whats-the-purpose-of-this-code-snippet",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm using at&amp;t ordering\nI came across this a little while ago and while i understand why we want to push a stack frame when we call a new routine I don't see why it was done here:   (for the example i'm looking at static code and the jmp address is just an example and arbritrary)</p>\n<pre><code>pushq %rbp\nmovq %rsp, %rbp\npop %rbp\njmp $0x10002135a\nnopw(%rax, %rax)\n</code></pre>\n<p>so It turns out the next instruction after the nop is a new function entry so I surmise the nop stuff was done to achieve some sort of alignment.  When I go and look at the jumped address I get a real stack frame (standard series of pushes, register saves, etc and at the end of the function standard pops and does the retq.</p>\n<p><strong>What did we gain by doing the push/pop sequence?</strong> </p>\n<p>The only thing i can think of is because it does the pop before the jump is that when the other does the retq it might be returning to the rbp prior to this little bit of code.  It's as if this little bit of jmp code never existed?  if so why have this little bit of code here in the first place?  Or perhaps at runtime the jmp address will occupy more bytes and spill into the nopw area?  just guessing.</p>\n<p>It almost looks like its a template or a macro that is doing nothing since the pop is restoring the original base pointer that was saved.  Or is this more along the lines of the compiler trying to get things aligned?</p>\n<p>We got to this point via a jmp.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "156",
    "tags": [
        "assembly",
        "osx",
        "stack"
    ],
    "user": "Div",
    "time": "Apr 28, 2017 at 18:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is most likely an optimized <a href=\"https://en.wikipedia.org/wiki/Tail_call\" rel=\"nofollow noreferrer\">tail call</a>. The original code probably looked similar to this:</p>\n<pre><code>int f1()\n{\n//some code which was optimized out\n  return f2();// &amp;f2=0x10002135a\n}\n</code></pre>\n<p>Since there is no code after calling <code>f2</code>, there is no need to perform any additional actions, so the compiler <em>restored the original stack pointer</em> and <em>jumped</em> to <code>f2</code> instead of performing the call. Since the stack was restored, the address of return from <code>f1</code> is at the top of the stack, so when <code>f2</code> returns, it will <em>return to the place <code>f1</code> was called from</em>. This trick saves a few instructions compared to the non-optimized \"call f2 then return\" sequence.</p>\n<p>Now, the compiler could also just remove all stack manipulation completely and leave just the jump, but possibly some other considerations prevented that (e.g. frame pointer omission optimization was turned off which made it insert <code>ebp</code> initialization in all functions, even those not using it).</p>\n</div>",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2017 at 19:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Div",
                    "text": "<span class=\"comment-copy\">I don't actually have the source code but this makes the most sense, the code I'm look at seems to be littered with this construct and your answer seems to make a lot of sense.  I took a look at the wiki reference and indeed it does describe the idea of using the current base pointer as the return point when we eventually return somewhere, so it does make sense.</span>",
                    "time": null
                }
            ]
        }
    ]
}