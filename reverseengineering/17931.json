{
    "title": "Why are there absolute jmps in disassembly of position independent code?",
    "link": "https://reverseengineering.stackexchange.com/questions/17931/why-are-there-absolute-jmps-in-disassembly-of-position-independent-code",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm playing around with Hopper and am looking at the disassembly of a binary that <code>otool</code> reports as having the <code>PIE</code> flag.</p>\n<p>It's my understanding that as a result, the executable base address will be randomized, and so jumps have to be relative to the current instruction pointer.</p>\n<p>However, looking at the output of this PIE binary in Hopper, I see absolute jumps like so:</p>\n<pre><code>00000001000021df    mov      rbx, rax\n00000001000021e2    test     rbx, rbx\n00000001000021e5    je       0x1000021c0\n</code></pre>\n<p>Is Hopper just translating the relative jumps into an absolute jump assuming the text segment is loaded at the standard virtual address of <code>0x100000000</code>, or am I missing something conceptual with regards to how position independent executables work?</p>\n</div>",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "osx",
        "mach-o",
        "macos",
        "pie"
    ],
    "user": "1110101001",
    "time": "Apr 9, 2018 at 21:14",
    "comments": [
        {
            "user": "Megabeets",
            "text": "<span class=\"comment-copy\">Mind to attach the corresponding opcodes? The hexbytes which represent the instructions.</span>",
            "time": null
        },
        {
            "user": "1110101001",
            "text": "<span class=\"comment-copy\">Hopper reports that the instruction at 0x1000021e5 is encoded as <code>74 D9</code> @Megabeets . I see that this corresponds to a relative jump according to the intel reference. I'm guessing then that Hopper is just converting the relative jump into its equivalent for easy viewing?</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As mentioned in your comment, the corresponding opcode to <code>je 0x1000021c0</code> is <code>74 D9</code>. Thus, there's no doubt that you are facing a relative JMP. Hopper is translating the relative JMP so it'll be easier for a reverse engineer to understand the flow of the code without having to calculate addresses.</p>\n<p>I'll demonstrate what Hopper does with a simple example using radare2 (although you can use your favorite tool to do the same).</p>\n<p>First, we'll open radare2 with 10000 empty bytes allocated in <code>rwx</code> permissions so we'll have a \"sandbox\" to play in:</p>\n<pre><code>$ r2 malloc://10000\n</code></pre>\n<p>Since our base address is <code>0x00000000</code> we'll seek (go to) to <code>0x000021e5</code> so it'll be easier for us to see the relative jump:</p>\n<pre><code>[0x00000000]&gt; s 0x21e5\n[0x000021e5]&gt;\n</code></pre>\n<p>See how our current address changed to <code>0x21e5</code>? good !  </p>\n<p>Now, let's write our hex-bytes (<code>74 d9</code>) in the current address:</p>\n<pre><code>[0x000021e5]&gt; wx 74d9\n</code></pre>\n<p>And disassemble one instruction in this address:</p>\n<pre><code>[0x000021e5]&gt; pd 1\n        ╰─&lt; 0x000021e5      74d9           je 0x21c0\n</code></pre>\n<p>As you can see, radare2, as Hopper does, translated the jump in address<code>0x????21e5</code> to <code>je 0x????21c0</code>.</p>\n</div>",
            "votes": "5",
            "user": "Megabeets",
            "time": "Apr 9, 2018 at 5:36",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>well megabeets was faster \nhere is how to check it in windbg </p>\n<pre><code>0:000&gt; ? .\nEvaluate expression: 1999570342 = 772f05a6\n0:000&gt; EB . 74 D9\n0:000&gt; U . L1\nntdll!LdrpDoDebuggerBreak+0x2c:\n772f05a6 74d9            je      ntdll!LdrpDoDebuggerBreak+0x7 (772f0581)\n0:000&gt; ? 772F0581 - .\nEvaluate expression: -37 = ffffffdb\n0:000&gt; ? 21E5-21C0\nEvaluate expression: 37 = 00000025\n0:000&gt;\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 9, 2018 at 5:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}