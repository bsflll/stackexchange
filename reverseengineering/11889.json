{
    "title": "List arrays (de-reference pointers) in Ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/11889/list-arrays-de-reference-pointers-in-ollydbg",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to interpret some contents of memory, it would be nice to decode contents of the lower left window in Olly (memory hex dump).</p>\n<p>A specific example is a char** array.  Specifically char *argv[].  argv is a pointer to an array of pointers, each of which is the beginning of a string.  Here I have 3 arguments to my program, so including the path and exe name that makes argc=4 as I enter main(int argc, char *argv[]).</p>\n<p>In the image below I graphically show argv=0x0041 0E80 from where we see 4 32-bit values in memory, each is a pointer to the beginning of strings argv[0], argv<a href=\"https://i.sstatic.net/9QQDr.png\" rel=\"nofollow noreferrer\">1</a>, argv[2], and argv[3] (sorry about red line).</p>\n<p><a href=\"https://i.sstatic.net/9QQDr.png\" rel=\"nofollow noreferrer\"><img alt=\"hexdump window in Olly (sorry about red line)\" src=\"https://i.sstatic.net/9QQDr.png\"/></a></p>\n<p>If I select the 4 bytes at 00410EA0, or those 16 bytes starting at 00410EA8 and right-click in this hex-dump window of Olly (lower left quadrant) I'd like to bring up a list of strings.  I see there are options to decode as structures and pointer to structure, so I would think there would be something simpler for arrays and arrays of strings.  </p>\n<p>Any hints?  Thanks.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "491",
    "tags": [
        "ollydbg"
    ],
    "user": "Markbotix",
    "time": "Jan 30, 2016 at 1:38",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>right click in the dump pane -&gt; integer -&gt; address with ascii/unicode dump</p>\n<p>src , execution , and screen shot below</p>\n<pre><code>multiargs.exe I Me You We Us Them\n\narg 00 = multiargs.exe\narg 01 = I\narg 02 = Me\narg 03 = You\narg 04 = We\narg 05 = Us\narg 06 = Them\n\nollydbg.exe multiargs.exe I Me You We Us Them\n\ntype multiargs.cpp\n\n#include &lt;stdio.h&gt;\nint main (int argc , char *argv[]) {\n        for (int i=0;i&lt;argc;i++){\n                printf(\"arg %02d = %s\\n\",i,argv[i]);\n        }\n}\n</code></pre>\n<p><a href=\"https://i.sstatic.net/mWDJM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/mWDJM.png\"/></a></p>\n</div>",
            "votes": "3",
            "user": "blabb",
            "time": "Jan 30, 2016 at 6:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">That's great, thanks.  You answered it completely.  \"Integer\" by itself not what I would have thought of, but I guess I should keep in mind Olly seems to analyze lots of data, such as in immediate operands in code, or register contents, to see if they are strings.  So indirectly I get my desired result by having Olly list the bytes as 32-bit quantities, which happen to list strings since it checks values to see if they're valid strings.  Great answer, thanks!  This will lead me to writing another question, how to make my own structure to use in \"Decode as structure...\"</span>",
                    "time": null
                },
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">I might add that I learned two more things from your answer:  how to move over the leftmost address column in the code quadrant (upper left of CPU window) to show the labels (eg: \"main\" and \"printf\"), and that I can run Olly from the DOS command line!    By the way, how did you get it the label to appear in red?  Sorry... kind of trivial question.</span>",
                    "time": null
                },
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">I notice it is the same mechanism as the stack (lower right quadrant in CPU window) with its \"Columns\"-&gt;\"Address\" or \"Address with ascii dump\".</span>",
                    "time": null
                },
                {
                    "user": "Markbotix",
                    "text": "<span class=\"comment-copy\">I think when I encounter char** arrays I will use your answer method as follows: I'll select the memory words of the array in the hex dump, right-click -&gt; \"Open in separate dump window\", and in that window I'll apply your right-click -&gt; \"Integer\"-&gt;\"Address\".</span>",
                    "time": null
                }
            ]
        }
    ]
}