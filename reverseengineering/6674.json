{
    "title": "debug a .dll compressed with pe compact",
    "link": "https://reverseengineering.stackexchange.com/questions/6674/debug-a-dll-compressed-with-pe-compact",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to load a DLL in IDA and OllyDbg, but it says the file is compressed. I checked with a couple of tools and came to know that the file is compressed with PECompact. I think it also has reverse-engineer protection enabled because debuggers are not able to load it but other tools can disassemble it.</p>\n<p>So, my question is how do I unpack the DLL and start debugging ?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "ollydbg",
        "pe",
        "unpacking",
        "patch-reversing"
    ],
    "user": "ASHUTOSH",
    "time": "Jul 15, 2015 at 15:59",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "<span class=\"comment-copy\">Check here as there are several tools that deal with that packer: <a href=\"http://www.woodmann.com/collaborative/tools/index.php/Category:Unpacking_Tools\" rel=\"nofollow noreferrer\">woodmann.com/collaborative/tools/index.php/â€¦</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There exist unpackers for PECompact.</p>\n<p>Try unpecompact2, I think there are two versions.\n<a href=\"http://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(MadMickael_version)\" rel=\"nofollow\">http://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(MadMickael_version)</a>\n<a href=\"http://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(smola_version)\" rel=\"nofollow\">http://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(smola_version)</a></p>\n<p>If those doesn't work, you can try generic unpacker such as <a href=\"http://rce.su/rldepacker/\" rel=\"nofollow\">RL!dePacker</a>, <a href=\"http://www.xuetr.com/?p=11\" rel=\"nofollow\">linxerUnpacker</a>, <a href=\"http://qunpack.ahteam.org/\" rel=\"nofollow\">Quick Unpack</a></p>\n</div>",
            "votes": "3",
            "user": "JayXon",
            "time": "Jan 13, 2015 at 22:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">This answer is not constructive, what exactly someone can learn from it otherwise the strings to search for. Can you please post some meaningful links/data that can help others get an actual answer?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As I never worked with PECompact before I downloaded a few unpackmes and tested it.  It looks like a very easy system to unpack.</p>\n<p>The script <a href=\"https://tuts4you.com/download.php?view.2932\" rel=\"nofollow noreferrer\">PeCompact 2.xx - 3.xx OEP Finder</a> by atom0s found the OEP correctly for every unpackme I tested.  Please note that you will need to ignore a couple of exceptions (INT3 breaks and Memory access violations), but the anti-debugging will be defeated by the <code>DBH</code> instruction in ODBGScript.</p>\n<p>For some of the unpackmes I found a simple API redirection was also present: each reference to the KERNEL32 API was redirected to a couple of instructions where the correct value was loaded in EAX followed by a <code>JMP EAX</code> instruction (see image):</p>\n<p><img alt=\"API redirection\" src=\"https://i.sstatic.net/5vQ5z.png\"/></p>\n<p>For such cases, I wrote this small script to solve the redirection (You will need to set the hard-coded value to the address of the first wrong entry):</p>\n<pre><code>var oep\nvar next\n\nmov oep, eip\nmov next, 00460974  // FIXME\n\nFIX:\n    mov eip, [next]\n    sto\n    mov [next], eax\n    add next, 4\n    cmp [next], 0\n    jne FIX\n\nmov eip, oep\nret\n</code></pre>\n<p>Once this second script is completed you can dump the file and fix the IAT as usual.</p>\n<p>Also, it is not clear in your post if your problems are due to the fact that you are working on a DLL instead of an EXE file. If that's the case, you can either use the <a href=\"http://www.ollydbg.de/Loaddll.htm\" rel=\"nofollow noreferrer\">LOADDLL tool</a> or modify the PE header to load the DLL as an EXE (Here is an <a href=\"http://www.pctools.com/security-news/unpacking-a-suspicious-dll/\" rel=\"nofollow noreferrer\">example</a> of how to do it on LordPE).</p>\n</div>",
            "votes": "1",
            "user": "Maurice",
            "time": "Jul 15, 2015 at 20:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Maurice",
                    "text": "<span class=\"comment-copy\">I just noticed that Scylla and ImpREC have plugins to fix the IAT redirection on PECompact.  Therefore, my second script is not really needed.</span>",
                    "time": null
                }
            ]
        }
    ]
}