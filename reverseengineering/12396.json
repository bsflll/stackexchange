{
    "title": "Any easy way to decompile virtual function instances?",
    "link": "https://reverseengineering.stackexchange.com/questions/12396/any-easy-way-to-decompile-virtual-function-instances",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What I mean is when the Hex-Rays compiler gives me something like this:</p>\n<pre><code>int v1;\n\n\nCreateSomeInterface(&amp;v1);\n\n(*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(0);\n</code></pre>\n<p>And I have a C++ header with the interface defined like this:</p>\n<pre><code>struct SomeInterface\n{\n    virtual void func1() = 0;\n    virtual void func2() = 0;\n} ;\n</code></pre>\n<p>And I know that the structure of the VT is pretty straightforward (it is a standard layout for all windows interfaces - all virtual functions pointers are stored sequentially <strong>in a memory location pointer by the first structure member</strong>), eg.:</p>\n<p>At location <strong><code>*(void **)this</code></strong>:</p>\n<pre><code>struct _SomeInterfaceLayOut\n{\n        void (*func1)();\n        void (*func2)();\n} ;\n</code></pre>\n<p>Is there some easy straightforward way to set the type of <code>v1</code>? Currently if I parse the C++ header with the virtual function declarations, the created local type <code>SomeInterface</code> won't contain anything and also won't be available for the decompiler to apply.</p>\n<p>For now the only solution I think I see is manually converting all virtual functions into function pointers but this seems like hell a lot of a work.</p>\n<p>I'm interested in this because it'll allow me more easily to understand the decompiled code. Names are better then addresses, for me at least.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "c++",
        "hexrays",
        "virtual-functions"
    ],
    "user": "rec",
    "time": "Apr 12, 2016 at 11:30",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "<span class=\"comment-copy\">\"There is no royal road to geometry.\"</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If I understand correctly, you already have the definition of your interface, so you can just create a structure with all fields having the names of the functions (or maybe even import it if your header file is simple enough), and then define the type of your variable to this structure (Edit-&gt;Set Type, or '<strong>Y</strong>'). That way, the \"v1+4\" will appears as \"yourStructName.func2\".</p>\n</div>",
            "votes": "1",
            "user": "user2823000",
            "time": "Apr 11, 2016 at 17:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rec",
                    "text": "<span class=\"comment-copy\">You understand correctly and I have done exactly what you suggest here before. I parse the C++ header with the interface declaration but then the type created is empty and not available for the decompiler to apply. I guess that maybe is because the C header parser in IDA won't recognize virtual function.</span>",
                    "time": null
                },
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Well first, check in the Structures tab that the structure is what you're expecting it to be (import might give strange results). Then, sometimes the decompiler has just a hard time understanding offset, but if the structure is right, it should definitely work in the dissassembly.</span>",
                    "time": null
                },
                {
                    "user": "rec",
                    "text": "<span class=\"comment-copy\">So you think IDA Pro will parse structure with virtual functions just fine and be able to deduce it's internal structure?</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">IDA's header parser is somewhat limited. Do as Dillinur said: define a structure for your vtable, then define a pointer to the vtable in your struct, then make v1 a pointer to that struct (all by entering C style type expressions or pulling them from a little header that you write for the purpose).</span>",
                    "time": null
                },
                {
                    "user": "rec",
                    "text": "<span class=\"comment-copy\">@DarthGizka - Well that would be easy with something simple but imagine hundreds lines of headers (for example the Directx interface). I suppose there is easier way.</span>",
                    "time": null
                }
            ]
        }
    ]
}