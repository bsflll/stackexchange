{
    "title": "Why does IDA not show certain library functions in the function list?",
    "link": "https://reverseengineering.stackexchange.com/questions/30155/why-does-ida-not-show-certain-library-functions-in-the-function-list",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is very confusing and problematic. For example, in a certain executable, the winsock2 library is imported, but only CERTAIN functions from it are listed in the functions tab. However, they are NOT the only functions that are in use. I'm not sure right now, but it may be that the other functions which ARE in use, do not have the _imp_ prefix in the code, while the ones that are listed, do. But I'm really confused because effectively what I end up with is really misleading.</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "635",
    "tags": [
        "ida"
    ],
    "user": "swaggg",
    "time": "Mar 18, 2022 at 4:30",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, some background. When a binary imports an API function, the operating system loader stores a function pointer to that function in a location specified by metadata in the binary's executable headers. In IDA, on Windows, this section generally is named <code>.idata</code> and is colored pink. You can see a typical example in the following screenshot:</p>\n<p><a href=\"https://i.sstatic.net/SFvts.png\" rel=\"nofollow noreferrer\"><img alt=\"this screenshot\" src=\"https://i.sstatic.net/SFvts.png\"/></a></p>\n<p>There are two patterns that code in a binary uses to invoke these imported API functions. First, you might see <code>call</code> instructions that reference the function pointers in the aforementioned <code>.idata</code> section directly, as in:</p>\n<p><a href=\"https://i.sstatic.net/ttYXh.png\" rel=\"nofollow noreferrer\"><img alt=\"this screenshot\" src=\"https://i.sstatic.net/ttYXh.png\"/></a></p>\n<p>Secondly, for some API functions, the binary might include a so-called \"thunk\" function, which consists of one single <code>jmp</code> instruction to the imported function pointer.</p>\n<p><a href=\"https://i.sstatic.net/TXXjv.png\" rel=\"nofollow noreferrer\"><img alt=\"this screenshot\" src=\"https://i.sstatic.net/TXXjv.png\"/></a></p>\n<p>Now, on to your question. Only imports with associated thunk functions will end up in the functions window. This is natural, because thunk functions are actual functions, whereas function pointers are not functions (they're pointers). If you want to see the collection of functions imported by a given binary, use the Imports window (View-&gt;Open subviews-&gt;Imports) instead of the Functions window.</p>\n</div>",
            "votes": "3",
            "user": "Rolf Rolles",
            "time": "Mar 19, 2022 at 19:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">Thanks for the explanation, Rolf! I'd noticed this regularity with only the imported functions having this internal wrapper being listed in the functions tab, but I didn't know the reason. I have a follow-up question: Does this mean the pink functions are dynamically linked while the blue ones are statically linked?</span>",
                    "time": null
                },
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">Teal, rather...</span>",
                    "time": null
                },
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">And by the way, I've never seen a thunk function be referenced from anywhere. Does it actually ever get called in the code?</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Yes, your understanding of pink (dynamic) vs. teal (static) is correct (assuming IDA has correctly identified a teal library function, and it's not a false positive). As for whether thunk functions are referenced, they should always be referenced, or the linker would normally remove them (though that might not happen if compiling in debug mode). You can see in my third screenshot above that there are two incoming cross-references to the thunk function (see the green text to the right).</span>",
                    "time": null
                }
            ]
        }
    ]
}