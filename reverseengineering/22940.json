{
    "title": "IDAPython api which get indirect memory address reference",
    "link": "https://reverseengineering.stackexchange.com/questions/22940/idapython-api-which-get-indirect-memory-address-reference",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm currently learning to use IDAPython for automated analysing on many binaries. Some binaries load memory address into register by adding base address with offset, that idautils.XrefsTo() cannot detect. In example:</p>\n<p><a href=\"https://i.sstatic.net/7gyu3.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/7gyu3.png\"/></a></p>\n<p><a href=\"https://i.sstatic.net/r8IWS.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/r8IWS.png\"/></a></p>\n<p>However, IDA-View can detect that reference kind. My question is, is there any other IDAPython api can detect that, or anyone knows the script behind IDA-View which can do that? Thank you.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "373",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Anh Pham",
    "time": "Jan 8, 2020 at 13:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm not 100% sure but I believe IDA-View did <strong>not</strong> recognize the operand as an offset in your case. Otherwise it'd have disassembled it as <code>addi r4, r9, offset aTelnet ; \"TELNET\"</code> or something similar. To convert an operand to an offset, you can try the <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#op_plain_offset\" rel=\"nofollow noreferrer\">idc.op_plain_offset()</a> function. I can't tell the exact syntax for your case as I don't have the addresses but it'll likely be something like <code>idc.op_plain_offset(ea, 2, idc.get_segm_start(ea))</code> assuming <code>ea</code> is the instruction address, 2 is the operand index (3rd operand) which is the offset and the base address is the beginning of the segment this instruction belongs to.</p>\n<p>Hope that helps.</p>\n</div>",
            "votes": "1",
            "user": "Fernando MercÃªs",
            "time": "May 10, 2020 at 3:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anh Pham",
                    "text": "<span class=\"comment-copy\">IDA must use some technique to store or track values of the registers because it statically analyses the binary instead of debugging, in this case is <b>r9</b>. Your suggestion actually is the final step of that technique. I'm wondering how IDA can do it.</span>",
                    "time": null
                }
            ]
        }
    ]
}