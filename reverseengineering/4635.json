{
    "title": "What's the difference between a disassembler, debugger and decompiler?",
    "link": "https://reverseengineering.stackexchange.com/questions/4635/whats-the-difference-between-a-disassembler-debugger-and-decompiler",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have heard of disassemblers like IDA and debuggers like OllyDbg but honestly, when you give both of them a binary file it gives me the assembly code. I know that the decompiler gives the source code if you provide it a binary. However, I don't know how they differ in terms of mode of operationand I ask myself questions like \"Why can a android/python code be decompiled but a C code be only disassembled?\"</p>\n<p>Can anyone give a precise difference between these 3 kinds of tools?</p>\n</div>",
    "votes": "7",
    "answers": 2,
    "views": "23k",
    "tags": [
        "disassembly",
        "decompilation",
        "binary-analysis",
        "debuggers"
    ],
    "user": "Pervy Sage",
    "time": "Jun 18, 2014 at 19:06",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">related: <a href=\"http://reverseengineering.stackexchange.com/questions/311/\">reverseengineering.stackexchange.com/questions/311</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These terms are currently defined on this site as follows:</p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/tagged/disassemblers\"><strong>Disassembler</strong></a>:</p>\n<blockquote>\n<p>A disassembler is a software tool which transforms machine code into a\n  human readable mnemonic representation called assembly language.</p>\n</blockquote>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/tagged/debuggers\"><strong>Debugger</strong></a>:</p>\n<blockquote>\n<p>Debuggers allow the user to view and change the running state of a program.</p>\n</blockquote>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/tagged/decompiler\"><strong>Decompiler</strong></a>:</p>\n<blockquote>\n<p>Software used to revert the process of compilation. Decompiler takes a\n  binary program file as input and output the same program expressed in\n  a structured higher-level language.</p>\n</blockquote>\n</div>",
            "votes": "15",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Pervy Sage",
                    "text": "<span class=\"comment-copy\">Ok. I at least understand a decompiler but I still don't understand difference between disassembler and debugger. I was seeing some of the tutorials on REing  and find the guys stepping through the assembly code (in a disassembler). In that case, isn't the code code running? So how does this differ from a debugger?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">A debugger contains a disassembler so that you can see the disassembled code through which you're stepping. However, not all disassembler tools contain live-debugging functionality.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to add the following definition to avoid any doubts:</p>\n<blockquote>\n<p>Decompilers are different from disassemblers in one very important aspect. While both generate\n  human readable text, <strong>decompilers generate much higher level text, which is more concise and much\n  easier to read</strong>.</p>\n</blockquote>\n<p>Excerpted from <a href=\"https://www.hex-rays.com/files/decomp_disasm.pdf\" rel=\"nofollow noreferrer\">official hex-rays doc</a></p>\n<p>Conclusion, the decompilers alleviate both problems compared to disassemblers: their output is shorter and less repetitive.</p>\n</div>",
            "votes": "1",
            "user": "js1984",
            "time": "Dec 12, 2016 at 13:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">A major difference, as yet unmentioned, between <i>disassembling</i> and <i>decompiling</i> is that disassembly is deterministic. Every machine code instruction disassembles to precisely <i>one</i> assembler instruction (I'll not mention the data/code dichotomy here, which is a kind of a Halting Problem). When <i>decompiling</i>, on the other hand, a single instruction may be translated into a number of expressions, and conversely, any number of instructions may be gathered into one high level expression â€“ all at the discretion of the decompiler. Different decompilers may yield different results.</span>",
                    "time": null
                },
                {
                    "user": "Soufiane Tahiri",
                    "text": "<span class=\"comment-copy\">If you are looking for a simple/simplistic answer: a  Disassembler is a tool that transforms a binary to a low level language / mnemonic / assembly while a decompiler transforms the binary to (theoretically, or not...) its primary high level language used to code this binary. Meaning that not every binary could be decompiled but every binary could be disassembled. .NET assemblies and JAVA files for exemple once decompiled could be transformed to their original C#/Java code.</span>",
                    "time": null
                }
            ]
        }
    ]
}