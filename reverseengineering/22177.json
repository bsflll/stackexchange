{
    "title": "What binary value does Thread and Process ID Register contains in Android ARM?",
    "link": "https://reverseengineering.stackexchange.com/questions/22177/what-binary-value-does-thread-and-process-id-register-contains-in-android-arm",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have following instructions in Android shared library:</p>\n<pre><code>MRC p15, 0, R3,c13,c0, 3 \nLDR R3, [R3,#4] \nMOV R0, #0 \nSTR R0, [R3,#0xC]\n</code></pre>\n<p>According to ARM documentation:</p>\n<blockquote>\n<p>Reading or writing the Thread and Process ID Registers has no effect\n  on the processor state or operation. These registers provide OS\n  support and must be managed by the OS.</p>\n</blockquote>\n<p>That's nice, but what is implementation of this register value in Android or ARM Linux?</p>\n<p>From the code, it tries to read Thread and Process ID Register value as structure,and it reads some field with offset <code>4</code>. This field is pointer to structure itself, and it writes <code>0</code> to field with offset <code>12</code>.</p>\n<p>So, the register value is for sure not <code>pthread_t</code>, because, according to Android source codes, <code>pthread_t</code> field with offset 4 is <code>unsigned int</code> and not pointer to any structure.</p>\n<p>Does anyone know where can I find definition of structure returned by <code>MRC c13::c0::3</code> in Android ARM?</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "201",
    "tags": [
        "android",
        "arm"
    ],
    "user": "Vitalii",
    "time": "Sep 24, 2019 at 9:31",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just in case anyone else will have the same issue, after reading a lot of Android sources and real applications memory dumps, I found that:</p>\n<ul>\n<li><code>MRC c13::c0::3</code> returns pointer to structure that contains 2 words.</li>\n<li>The 2nd world is the same value as <code>pthread_self</code> returns (i. e. it is <code>pthread_t</code> of current thread).</li>\n<li><code>pthread_t</code> is actually pointer to <code>pthread_internal_t</code> structure, you can see its definition here for example <a href=\"https://android.googlesource.com/platform/bionic.git/+/refs/heads/android10-release/libc/bionic/pthread_internal.h\" rel=\"nofollow noreferrer\">https://android.googlesource.com/platform/bionic.git/+/refs/heads/android10-release/libc/bionic/pthread_internal.h</a></li>\n<li>From the definition, field at offset 12 (0xC) is <code>pid_t cached_pid_</code>.</li>\n</ul>\n<p>So, this code sets cached pid value to <code>0</code>. It looks like it is required to force <code>getpid</code> to read real <code>pid</code> value instead of using cached one (PID caching is known source of bugs in some <code>glibc</code> versions).</p>\n</div>",
            "votes": "3",
            "user": "Vitalii",
            "time": "Sep 24, 2019 at 8:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}