{
    "title": "Demangle c++ functions in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/11591/demangle-c-functions-in-radare2",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am learning radare2. Is there a way to demangle c++ functions during disassembling? For example in gdb</p>\n<pre><code>set print asm-demangle\n</code></pre>\n<p>changes </p>\n<pre><code>callq 0x400a30 &lt;_ZNSo3putEc@plt&gt;\n</code></pre>\n<p>to</p>\n<pre><code>callq 0x400a30 &lt;_std::ostream::put(char)@plt&gt;\n</code></pre>\n<p>edit:\nI had radare2 0.9.6 which comes with Ubuntu's synaptic package manager. I reinstalled it from <a href=\"https://github.com/radare/radare2\" rel=\"nofollow\">https://github.com/radare/radare2</a>. Now I see the <code>asm.demangle</code> variable after entering <code>Ve</code>, it is set to true, but names are still mangled.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "radare2"
    ],
    "user": "robert",
    "time": "Dec 19, 2015 at 10:09",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check <code>e asm.demangle</code>, and set it to true or false as required.</p>\n<p>Is the radare2 version you are using the latest one?</p>\n<p>You should be able to view all the configuration data with <code>e</code>.</p>\n<p>Typing <code>e??</code> should show you a complete list of configuration variables with their description. You can grep through the output for all the vars that have the pattern <em>demangle</em> with</p>\n<pre>\n[0x00001d52]&gt; e??~demangle\n        asm.demangle: Show demangled symbols in disasm\n        bin.demangle: Import demangled symbols from RBin\n            bin.lang: Language for bin.demangle\n[0x00001d52]&gt;\n</pre>\n<p>Radare2 needs to be told to load the demangle informations at startup, so you can set <code>bin.demangle</code> to <code>true</code>, and reopen the file:</p>\n<pre><code> e bin.demangle = true\n oo \n</code></pre>\n<p>Last but not least, you can provide a symbol name in its mangled form on a case by case basis, using the command <code>iD</code>:</p>\n<pre><code>[0x7c810705]&gt; iD cxx _ZNSo3putEc\nstd::ostream::put\n[0x7c810705]&gt;\n</code></pre>\n<p>By the way, a tip instead of asking a question here and waiting forever:\nradare2 is self documented, so you can begin by typing <code>?</code> to get help, and then append <code>?</code> to each command, like <code>a?</code>, or <code>pd?</code> and so onâ€¦</p>\n</div>",
            "votes": "4",
            "user": "jvoisin",
            "time": "Dec 20, 2015 at 13:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">Sorry, but how? If I enter <code>e asm.demangle=true</code>, I get: variable 'asm.demangle' not found</span>",
                    "time": null
                }
            ]
        }
    ]
}