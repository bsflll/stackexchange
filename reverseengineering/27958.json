{
    "title": "Adding signatures to Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/27958/adding-signatures-to-ghidra",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a couple of questions about the Ghidra</p>\n<ol>\n<li><p>I am analyzing a binary file and in the binary it uses a functions from libstdc++. What is the best way to add the signatures of functions from \"libstdc++\" into my binary file ?</p>\n</li>\n<li><p>I see in the \"External program\" window multiple so files, from where Ghidra takes this so files ?</p>\n</li>\n</ol>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "ghidra"
    ],
    "user": "prtqwsq",
    "time": "Jul 6, 2021 at 8:10",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>The easiest way is to get a build of libstdc++ with DWARF debug symbols e.g. by downloading it from the Debian repositories <a href=\"https://packages.debian.org/buster/libstdc++6-7-dbg\" rel=\"nofollow noreferrer\">https://packages.debian.org/buster/libstdc++6-7-dbg</a>.\nIn general you can also compile it yourself, but for common libraries Debian tends to have a version built with debug symbols already. You can then auto analyse it (or run only the DWARF debug analyses), and export a GDT archive via \"Capture Function Signatures\", either as a file archive or project archive, and then load this in your desired binary and apply it.</p>\n</li>\n<li><p>Ghidra searches some folders for libraries when a binary is imported, I already described the details in <a href=\"https://reverseengineering.stackexchange.com/a/27871/31435\">this answer</a> (with screenshots)</p>\n</li>\n</ol>\n</div>",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Jul 6, 2021 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}