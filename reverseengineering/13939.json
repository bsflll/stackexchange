{
    "title": "How to copy API calls names to clipboard on OllyDBG v2.01?",
    "link": "https://reverseengineering.stackexchange.com/questions/13939/how-to-copy-api-calls-names-to-clipboard-on-ollydbg-v2-01",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to figure out how to copy API function names to clipboard to analize the asm listing properly on my own editor.</p>\n<p>I can see OllyDBG gives you the ability to mouse over a call and seeing the function name in a little window, that's quite cool</p>\n<p><a href=\"https://i.sstatic.net/Vv8F8.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/Vv8F8.png\"/></a></p>\n<p>But... I don't see any way around to copy these function names to the clipboard so i could speed the process of play around with the final asm listing stored on disk faster.</p>\n<p>Before even considering this manual copy/pasting I've thought about using a promising plugin called asm2clipboard but that one doesn't seem to work with ollydbg v2.01.</p>\n<p>Usually API calls would appear in the form of comments when debugging normal exes, but these particular API functions were loaded by hash and are called via a pointer.</p>\n<p>In any case, if there isn't any workaroudn about this, how can i learn how to build ollydbg v2.01 plugins? I see this another <a href=\"https://reverseengineering.stackexchange.com/a/8292/18079\">thread</a> with a hello world example but it seems it requires <code>plugin.h</code> and <code>ollydbg.lib</code>, where can i find them? They don't seem to live in the <a href=\"http://www.ollydbg.de/odbg201.zip\" rel=\"nofollow noreferrer\">odbg201.zip</a> file</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "283",
    "tags": [
        "ollydbg",
        "tools"
    ],
    "user": "BPL",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The plugin is available in an old beta version iirc 201 h scroll down a little in the sites page you should see it on nov 19 2012 entry  look here for my earlier post iirc i posted a full plugin src with compile instructions using vc++  </p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/9514/avoid-re-enabling-patches-between-reruns-in-ollydbg/\">Avoid re-enabling patches between reruns in Ollydbg</a></p>\n<p><a href=\"https://reverseengineering.stackexchange.com/questions/8630/command-for-command-line-plugin-does-not-work\">Command for Command line plugin does not work</a></p>\n<p>here is a source code for getting the information<br/>\nusage right click in disassemble window to find men Blabbtest<br/>\non execution you will get a msgbox with the name of the api </p>\n<p>compiled and linked with enterprise wdk compiler and linker\nusing </p>\n<p><strong>cl /nologo /J /W4 /Ox /Zi /analyze /EHsc /LD *.cpp /link user32.lib ollydbg.lib</strong> </p>\n<pre><code>#define _UNICODE\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n#include \"plugin.h\"\nvoid Disassemble(ulong addr,ulong threadid,wchar_t *jumpaddr) {\n  ulong length,declength; uchar cmd[MAXCMDSIZE],*decode; t_disasm da; t_reg *reg;\n  length=Readmemory(cmd,addr,MAXCMDSIZE,MM_SILENT|MM_PARTIAL);\n  decode=Finddecode(addr,&amp;declength); reg=Threadregisters(threadid);\n  length=Disasm(cmd,length,addr,decode,&amp;da,DA_TEXT|DA_OPCOMM|DA_MEMORY,reg,NULL);\n  Decodeknownbyaddr(da.jmpaddr,0,0,0,jumpaddr,1,1);\n}\nstatic int About(t_table *,wchar_t *,ulong ,int mode) {\n  int n; wchar_t s[TEXTLEN]; if (mode==MENU_VERIFY) { return MENU_NORMAL; }\n  else if (mode==MENU_EXECUTE) {\n    Resumeallthreads(); n=StrcopyW(s,TEXTLEN,\n        L\"BlabbTest plugin v 1\\nCopyright from genesis to eternity blabb\\n\\n\");\n    wchar_t jaddy[TEXTLEN] ={0};\n    Disassemble(Getcpudisasmselection(),Getcputhreadid(),jaddy);\n    n+=StrcopyW(s+n,TEXTLEN-n,jaddy); MessageBoxW(0,s,L\"BlabbTest\",0);\n    Suspendallthreads(); return MENU_NOREDRAW;\n  };  return MENU_ABSENT;\n};\nstatic t_menu mainmenu[] = {\n  { L\"|BlabbTest\", L\"About BlabbTest plugin\", K_NONE, About, NULL, 0 },\n  { NULL,NULL,K_NONE,NULL,NULL,0}    };\nextc t_menu * __cdecl ODBG2_Pluginmenu(wchar_t *type) {\n  if(wcscmp(type,PWM_DISASM)==0) { return mainmenu; }   return NULL;\n};\nBOOL WINAPI DllEntryPoint(HINSTANCE ,DWORD ,LPVOID ) { return 1; };\nextc int __cdecl ODBG2_Pluginquery(int ollydbgversion,ulong *,\nwchar_t pluginname[SHORTNAME],wchar_t pluginversion[SHORTNAME]) {\n  if (ollydbgversion&lt;201) {  return 0; }\n  wcscpy_s(pluginname,SHORTNAME,L\"BlabbTest\");\n  wcscpy_s(pluginversion,SHORTNAME,L\"2.00.01\");\n  return PLUGIN_VERSION; };\n</code></pre>\n<p>here is the result \n<a href=\"https://i.sstatic.net/pp38a.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/pp38a.png\"/></a></p>\n<p>instead of Decodeknownbyaddr() use Findlabel() to find the Label of jmpaddr</p>\n<pre><code>#define _UNICODE\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n#include \"plugin.h\"\nstatic int About(t_table *,wchar_t *,ulong ,int mode) {\n  int n; wchar_t s[TEXTLEN],labl[TEXTLEN];ulong length,addr;t_cmdinfo cmdinf={0};\n  if ( mode==MENU_VERIFY ) { return MENU_NORMAL; }\n  else if (mode==MENU_EXECUTE)   {\n    Resumeallthreads();     n=StrcopyW(s,TEXTLEN,\n    L\"BlabbTest plugin v 1\\nCopyright from genesis to eternity blabb\\n\\n\");\n    uchar cmd[MAXCMDSIZE]; addr = Getcpudisasmselection();\n    length=Readmemory(cmd,addr,MAXCMDSIZE,MM_SILENT|MM_PARTIAL);    \n    Cmdinfo(cmd,length,addr,&amp;cmdinf,0xfff,NULL);    \n    Findlabel(cmdinf.jmpaddr,labl,0);\n    n+=StrcopyW(s+n,TEXTLEN,labl);\n    MessageBoxW(0,s,L\"BlabbTest\",0);\n    Suspendallthreads();     return MENU_NOREDRAW;\n  };  return MENU_ABSENT;\n};\nstatic t_menu mainmenu[] = {\n  { L\"|BlabbTest\", L\"About BlabbTest plugin\", K_NONE, About, NULL, 0 },\n  { NULL,NULL,K_NONE,NULL,NULL,0}\n};\nextc t_menu * __cdecl ODBG2_Pluginmenu(wchar_t *type) {\n  if(wcscmp(type,PWM_DISASM)==0) { return mainmenu; }\n  return NULL;\n};\nBOOL WINAPI DllEntryPoint(HINSTANCE ,DWORD ,LPVOID ) { return 1; };\nextc int __cdecl ODBG2_Pluginquery(int ollydbgversion,ulong *,\nwchar_t pluginname[SHORTNAME],wchar_t pluginversion[SHORTNAME]) {\n  if (ollydbgversion&lt;201) {  return 0; }\n  wcscpy_s(pluginname,SHORTNAME,L\"BlabbTest\");\n  wcscpy_s(pluginversion,SHORTNAME,L\"2.00.01\");\n  return PLUGIN_VERSION; };\n</code></pre>\n<p>well you should at-least customarily peruse the code and documentation </p>\n<p>add these two lines and pass the t_reg * to cmdinfo to decode register or indirect calls </p>\n<pre><code>  t_reg *reg;\n  reg=Threadregisters(Getcputhreadid());\nCmdinfo(cmd,length,addr,&amp;cmdinf,0xfff,reg);    \n</code></pre>\n<p><a href=\"https://i.sstatic.net/lTqMm.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/lTqMm.png\"/></a></p>\n</div>",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">Thanks for all your help wit this stuff, finally I've come up with a plugin which will help me to speed up the disassembling of some projects I got in mind, right now my olly environment is quite good. Ideally I'd write a plugin reading content from PWM_INFO but it seems quite time consuming I don't want to spend more time on this task, I see the answer of your other thread doesn't address the question so I'll wait for the author to mail me back (if he decides to do so...) or just him writing proper documentation. In any case, giving you +1 on the other thread for the effort, Have fun you too</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Just for the record, x64dbg supports this out of the box and ignore you're missing something it's easy to implement.</span>",
                    "time": null
                },
                {
                    "user": "BPL",
                    "text": "<span class=\"comment-copy\">@mrexodia First time I hear about that debugger, I've looked at it and it feels like it's a much better version of OllyDBG, plus it's open source, I don't see any reason why i should stay with the good old Olly anymore. Active community/development... what else? Thanks for this good advice!</span>",
                    "time": null
                }
            ]
        }
    ]
}