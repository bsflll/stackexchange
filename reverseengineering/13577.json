{
    "title": "Getting past a whole lot of anti-debug measures for a windows exe",
    "link": "https://reverseengineering.stackexchange.com/questions/13577/getting-past-a-whole-lot-of-anti-debug-measures-for-a-windows-exe",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to debug a windows exe that is really full of anti-debug measures. It has pretty much everything you can think of DBGuiremotebreakin, Ntsetinformationthread, NtQueryInformationProcess, the works. The only problem is that I really need to get into it. The anti-debug stuff is mixed in all throughout the code with important computations that are used for the stuff I want to see. How could I start trying to spoof the measures so I can observe register usage unfoiled?</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "6k",
    "tags": [
        "debuggers",
        "anti-debugging",
        "disassemblers"
    ],
    "user": "codechao",
    "time": "Sep 24, 2016 at 16:47",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use something like Scylla Hide</p>\n<p><a href=\"https://github.com/nihilus/ScyllaHide\" rel=\"nofollow noreferrer\">https://github.com/nihilus/ScyllaHide</a></p>\n<p>It has plugins for most popular debuggers. It has lots of hiding options and presets for advanced packers like Themida.</p>\n<p>You can also try Titan Hide.</p>\n<p><a href=\"https://github.com/mrexodia/TitanHide\" rel=\"nofollow noreferrer\">https://github.com/mrexodia/TitanHide</a></p>\n</div>",
            "votes": "5",
            "user": "Ghassan Idriss",
            "time": "Jun 16, 2017 at 18:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Denis Laskov",
                    "text": "<span class=\"comment-copy\">My +1 vote  for this one. I am not Olly fan, but this one obviously did the work for topicstarter. Well done :)</span>",
                    "time": null
                },
                {
                    "user": "codechao",
                    "text": "<span class=\"comment-copy\">sorry, took a little break to recoup after that effort. This is flagged as best answer. Thank you!</span>",
                    "time": null
                },
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">The second link seems broken in the way that the repository was deleted</span>",
                    "time": null
                },
                {
                    "user": "Ghassan Idriss",
                    "text": "<span class=\"comment-copy\">Updated link to new repo</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think, in such cases strategy is very depend on type of anti-debug mechanisms used, sort of computations that you are looking for, and amount of time you ready to spent on this task.</p>\n<p>IMO you should follow this plan:</p>\n<ol>\n<li><p>statically analyse the binary [IDA] to map all those anti-debug features and points of interest you looking for. </p></li>\n<li><p>if possible, try to understand those important computations without actual file execution. you can re-create them in python, run them as separate binary or emulate them with, for example, pyEmu <a href=\"https://github.com/codypierce/pyemu\" rel=\"nofollow\">https://github.com/codypierce/pyemu</a></p></li>\n<li><p>if [2] was not successful, carefully make yourself thru each anti-debug feature during execution of binary under debugger. Use map you built in [1] to make it faster</p></li>\n</ol>\n<p>Hope it helps :) </p>\n</div>",
            "votes": "1",
            "user": "Denis Laskov",
            "time": "Sep 24, 2016 at 18:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ghassan Idriss",
                    "text": "<span class=\"comment-copy\">Maybe Sylla hide or Titan hide may be of assistance here as well. Plugins for most debuggers are available.</span>",
                    "time": null
                },
                {
                    "user": "codechao",
                    "text": "<span class=\"comment-copy\">thanks this does help. I will try to start with that. Basically a string is created through modifications to the .data of the exe. I want to know the string that it generates. It might be possible to selectively nop all the anti-debug features, but there's a lot and they're prolific, and usually around critical code.</span>",
                    "time": null
                },
                {
                    "user": "codechao",
                    "text": "<span class=\"comment-copy\">I wish I could upvote you 1000 times @GhassanIdriss but I can't even once, because it was just a comment. Those two in conjunction worked where others didn't! I was able to get the string generated fine using ODBG.</span>",
                    "time": null
                },
                {
                    "user": "Ghassan Idriss",
                    "text": "<span class=\"comment-copy\">I made an answer for it</span>",
                    "time": null
                }
            ]
        }
    ]
}