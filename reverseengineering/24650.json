{
    "title": "Ghidra Python - Get x-refs of a specific function",
    "link": "https://reverseengineering.stackexchange.com/questions/24650/ghidra-python-get-x-refs-of-a-specific-function",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>What is the best way to get calling x-refs for a specific function?</p>\n<p>I am aware of the following method: </p>\n<pre><code>func = getFirstFunction()\n\nwhile func is not None:\n    func_name = func.getName()\n    if func_name == &lt;my_func&gt;:\n        entry_point = func.getEntryPoint()\n        references = getReferencesTo(entry_point)\n\nfunc = getFunctionAfter(func)\n</code></pre>\n<p>Is there a way to do that without iterating through all the functions? </p>\n</div>",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "python",
        "ghidra"
    ],
    "user": "macro_controller",
    "time": "Apr 8, 2020 at 8:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>getReferencesTo takes an address</p>\n<p>toAddr() converts a string to Address you can combine both </p>\n<p>like this</p>\n<pre><code>&gt;&gt;&gt; getReferencesTo(toAddr(\"ZwCreateKey\"))\n\narray(ghidra.program.model.symbol.Reference, \n[\nFrom: 14095680c To: 1401b33c0 Type: DATA Op: 0 IMPORTED, \nFrom: 140a22fbd To: 1401b33c0 Type: DATA Op: 0 DEFAULT, \nFrom: Entry Point To: 1401b33c0 Type: EXTERNAL Op: -1 DEFAULT, \nFrom: 140628dc5 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407478dd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1406bdfcd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1408db10c To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1406f5dec To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407c7190 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407d01da To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1405a8745 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \n</code></pre>\n<p>the function limits its display to max 4096 refs if  there are  more\nuse the recommended ReferenceManager</p>\n<pre><code>&gt;&gt;&gt; refs = currentProgram.referenceManager.getReferencesTo(toAddr(\"ZwCreateKey\"))\n&gt;&gt;&gt; for i in refs:\n...     print i\n... \nFrom: 14095680c To: 1401b33c0 Type: DATA Op: 0 IMPORTED\nFrom: 140a22fbd To: 1401b33c0 Type: DATA Op: 0 DEFAULT\nFrom: Entry Point To: 1401b33c0 Type: EXTERNAL Op: -1 DEFAULT\nFrom: 140628dc5 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1407478dd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1406bdfcd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1408db10c To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\n</code></pre>\n</div>",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 8, 2020 at 17:03",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't think there is a method that filters functions by name, but you can write the above a bit more concise with lambdas and a bit more functional approach.</p>\n<pre><code>fm = currentProgram.getFunctionManager()\nfuncs = fm.getFunctions(True)\nfiltered_funcs = filter(lambda f: f.getName() == '&lt;your function name&gt;', funcs)\nx_refs = map(lambda f: getReferencesTo(f.getEntryPoint()), filtered_funcs)\n</code></pre>\n<p>You could even fold them more but (probably) hurting the readability.</p>\n</div>",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Apr 8, 2020 at 14:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is possible via the Symbol Table:</p>\n<pre><code>sym = currentProgram.symbolTable.getSymbol(func_name)\n\nfunc = currentProgram.functionManager.getFunction(sym.key)\n# the following should be equivalent\nfunc = currentProgram.functionManager.getFunctionAt(sym.address)\n\nrefs = getReferencesTo(func.entryPoint)\n</code></pre>\n<p>Symbols in this case are the Ghidra Function symbols, not the kind of symbols which might be contained in binary, but could be stripped.\nIt works with names like <code>FUN_100008628</code>, <code>entry</code>, or any function you renamed.</p>\n</div>",
            "votes": "0",
            "user": "Florian Magin",
            "time": "Apr 8, 2020 at 19:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}