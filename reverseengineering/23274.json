{
    "title": "JEB Decompiler - Signature recognition engine",
    "link": "https://reverseengineering.stackexchange.com/questions/23274/jeb-decompiler-signature-recognition-engine",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been playing around with the <a href=\"https://www.pnfsoftware.com/\" rel=\"nofollow noreferrer\">JEB decompiler</a> and Android reverse engineering suite. One interesting feature they have is deobfuscation by <a href=\"https://www.pnfsoftware.com/blog/jeb-library-code-matching-for-android/\" rel=\"nofollow noreferrer\">library code matching</a> in which 3rd party libraries out there (written in Java) which have been obfuscated are recognized and matched with the original library names.</p>\n<p>However, the plugin allows custom parameters to fine tune the accuracy of detection\n. I still cant wrap my head around and understand how the option and parameters work? Could any Java language experts explain and give examples? Im using JEB 3.7</p>\n<p><a href=\"https://i.sstatic.net/xXjDM.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/xXjDM.png\"/></a></p>\n</div>",
    "votes": "1",
    "answers": 0,
    "views": "198",
    "tags": [
        "decompilation",
        "android",
        "java"
    ],
    "user": "Nederealm",
    "time": "Feb 17, 2020 at 7:31",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">JEB is a pretty expensive software - why not ask the software company who develops JEB?</span>",
            "time": null
        }
    ],
    "answers_data": []
}