{
    "title": "How to demangle symbols with starting with \"@@\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/16263/how-to-demangle-symbols-with-starting-with",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm looking at a PE binary which, given the names of some of the imported symbols, looks like it was built using the Delphi programming language. I'm basing this assumption on the symbols the binary is exporting, e.g. <code>@@Calculator@Initialize</code> and <code>@@Calculator@Finalize</code>. The <code>Initialize</code> and <code>Finalize</code> are reminiscent of the <code>initialization</code> and <code>finalization</code> keywords of the Delphi <code>unit</code> construct.</p>\n<p>Here is an excerpt of the output of dumpbin:</p>\n<pre><code>     45    0 001335BC @@Aaft@Finalize\n     44    1 001335AC @@Aaft@Initialize\n     13    2 000E78C8 @@Advreg@Finalize\n     12    3 000E78B8 @@Advreg@Initialize\n</code></pre>\n<p>The only references to Borland's/Embarcadero's mangling scheme I have are these (one in English, one in German) which both describe the mangling scheme in C++:</p>\n<ul>\n<li><a href=\"https://github.com/mildred/Lysaac/blob/master/doc/boa.utf8.txt\" rel=\"nofollow noreferrer\">https://github.com/mildred/Lysaac/blob/master/doc/boa.utf8.txt</a></li>\n<li><a href=\"http://edn.embarcadero.com/article/27758\" rel=\"nofollow noreferrer\">http://edn.embarcadero.com/article/27758</a></li>\n</ul>\n<p>None of the patterns in those references seem to apply to the <code>@@</code> prefix of this symbol. One hypothetical interpretation of <code>@@Foo@Initialize</code> is \"this symbol is for a special function <code>Initialize</code>\", where the <code>@@</code> prefix is used to avoid conflicts with a \"regular\" method <code>Initialize</code> in a class <code>Foo</code>.</p>\n<p>Unfortunately I don't have access to TDUMP.exe so I can't demangle this myself in order to confirm my hypothesis. So how should I be interpreting these symbols matching the pattern <code>@@&lt;name&gt;@Initialize</code>and <code>@@&lt;name&gt;@Finalize</code>?</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "531",
    "tags": [
        "symbols",
        "delphi"
    ],
    "user": "John Källén",
    "time": "Sep 5, 2017 at 8:19",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">Are you sure it's <code>@@Calculator@Initialize</code> and not <code>@Calculator@@Initialize</code> ?</span>",
            "time": null
        },
        {
            "user": "John Källén",
            "text": "<span class=\"comment-copy\">Quite sure. All the symbols are following the pattern <code>@@&lt;foo&gt;@Initialize</code> and <code>@@&lt;foo&gt;@Finalize</code></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>IDA demangles <code>@@Unit1@Initialize</code> as <code>__linkproc__ Unit1::Initialize</code> and looking for <code>__linkproc__</code> yields <a href=\"http://webfiles.icebreak.org/webfiles/CBuilderCD/v4/Runimage/Cbuilder4/Source/RTL/SOURCE/MISC/UM.C\" rel=\"nofollow noreferrer\">some clues</a>:</p>\n<blockquote>\n<p>Modifiers (mutually exclusive)</p>\n<p>UM_LINKER_PROC   Special linker procedure (#pragma package)</p>\n<p>case QUALIFIER:      /* virdef flag or <strong>linker proc</strong> */</p>\n</blockquote>\n<p>So looks like these functions are generated for the linker to ensure a specific initialization order. Apparently in C++ files this is achieved by using <a href=\"http://docwiki.embarcadero.com/RADStudio/Berlin/en/Pragma_package\" rel=\"nofollow noreferrer\"><code>#pragma package</code></a>, and I guess for Pascal units it happens automatically. (C++ Builder can use C++ and Pascal code in a single project; in fact most of VCL is implemented in Object Pascal and C++ Builder includes a Delphi compiler).</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}