{
    "title": "What is \"instruction camouflage\" obfuscation?",
    "link": "https://reverseengineering.stackexchange.com/questions/1673/what-is-instruction-camouflage-obfuscation",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have an obfuscated binary which only print a simple <code>Hello World!</code>\nand exit like this:</p>\n<pre><code>Hello World!\n</code></pre>\n<p>But, when I am looking at the assembly with <code>objdump</code>, I cannot find any\ncall to <code>printf</code> or <code>write</code>, nor find the string <code>Hello World!</code>.</p>\n<pre><code>0804840c &lt;main&gt;:\n 804840c:       be 1e 84 04 08          mov    $0x804841e,%esi\n 8048411:       89 f7                   mov    %esi,%edi\n 8048413:       b9 26 00 00 00          mov    $0x26,%ecx\n 8048418:       ac                      lods   %ds:(%esi),%al\n 8048419:       34 aa                   xor    $0xaa,%al\n 804841b:       aa                      stos   %al,%es:(%edi)\n 804841c:       e2 fa                   loop   8048418 &lt;main+0xc&gt;\n 804841e:       23 4f 29                and    0x29(%edi),%ecx\n 8048421:       46                      inc    %esi\n 8048422:       ae                      scas   %es:(%edi),%al\n 8048423:       29 4e 5a                sub    %ecx,0x5a(%esi)\n 8048426:       29 6e ae                sub    %ebp,-0x52(%esi)\n 8048429:       c2 9c 2e                ret    $0x2e9c\n 804842c:       ae                      scas   %es:(%edi),%al\n 804842d:       a2 42 17 54 55          mov    %al,0x55541742\n 8048432:       55                      push   %ebp\n 8048433:       23 46 69                and    0x69(%esi),%eax\n 8048436:       e2 cf                   loop   8048407 &lt;frame_dummy+0x27&gt;\n 8048438:       c6 c6 c5                mov    $0xc5,%dh\n 804843b:       8a fd                   mov    %ch,%bh\n 804843d:       c5 d8 c6 ce 8b          vshufps $0x8b,%xmm6,%xmm4,%xmm1\n 8048442:       a0 aa 90 90 90          mov    0x909090aa,%al\n 8048447:       90                      nop\n ...\n 804844f:       90                      nop\n</code></pre>\n<p>The obfuscation technique claimed to be used here is called <em>instruction\ncamouflage</em> (see this <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.125.5028\" rel=\"noreferrer\">paper</a>). Can someone explain what is it and how does it works ?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "obfuscation"
    ],
    "user": "perror",
    "time": "Apr 15, 2013 at 13:17",
    "comments": [
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">In general, a <a href=\"http://en.wikipedia.org/wiki/Mask_(computing)\" rel=\"nofollow noreferrer\">mask</a> is a value applied on a bitfield via a bitwise operation, to read, set or reset a particular bit.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I agree the name must be changed. But, it seems to be extremely difficult to find a proper one. The point of this technique is mainly to conceal the executed code from a simple naive static analysis. For now, after discussions, \"<i>code cloaking</i>\" is the best I can come with... but I don't know if it would be accepted.</span>",
            "time": null
        },
        {
            "user": "Ange",
            "text": "<span class=\"comment-copy\">For me (personally), being understood by most of the community is more important than using a perfect - but new - word that no one has heard of and that might be misinterpreted (for that reason, I tend to use 'ROP' even if I personally prefer 'return-to-libc'). And 'hiding' and 'obfuscating' are way more widespread than 'cloaking' IMHO.</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">So, you would advise \"<i>code hiding</i>\" ? (code obfuscation cannot be an option because it cannot tag one technique among others). It is perfectly okay with me also. (Post-scriptum: 'ROP' and 'return-into-libc' are really two different techniques)</span>",
            "time": null
        },
        {
            "user": "perror",
            "text": "<span class=\"comment-copy\">I found a reference about <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.125.5028\" rel=\"nofollow noreferrer\">instruction camouflage</a>. Though it is not a very well known paper, their name seems okay (I hope this is the last time I modify this... I'm just a mess, sorry).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instruction camouflage is an obfuscation technique against simple naive static\nanalysis of the binary. The binary program is composed of two parts:</p>\n<ul>\n<li>A decoder</li>\n<li>An encoded payload</li>\n</ul>\n<p>When executed, the binary first goes to the decoder and decode the\npayload that unveil the real assembly code. At the end, the decoder\njumps to the decoded payload and execute the code.</p>\n<p>The benefit of this technique is that statically disassembling the\nbinary will not give you hints on what is really doing the program.\nSomehow, it forces the analyst to execute first the decoder part (for\nreal or symbolically) and, then, look at the decoded payload.</p>\n<p>In the proposed example, the decoder part is the following:</p>\n<pre><code>0804840c &lt;main&gt;:\n 804840c:       be 1e 84 04 08          mov    $0x804841e,%esi\n 8048411:       89 f7                   mov    %esi,%edi\n 8048413:       b9 26 00 00 00          mov    $0x26,%ecx\n 8048418:       ac                      lods   %ds:(%esi),%al\n 8048419:       34 aa                   xor    $0xaa,%al\n 804841b:       aa                      stos   %al,%es:(%edi)\n 804841c:       e2 fa                   loop   8048418 &lt;main+0xc&gt;\n</code></pre>\n<p>You can see that there is a loop between <code>0x8048418</code> and <code>0x804841c</code>\nwhich apply a xor <code>0xaa</code> to each byte in the payload (from <code>0x804841e</code>\nto  <code>0x804841e + 0x25 = 0x8048443</code>, the loop counter is <code>%ecx</code>).</p>\n<p>So, the best way to know what is done in the payload is to take <code>gdb</code>\nand to set a breakpoint after the decoder has completed his task:</p>\n<pre><code>GNU gdb (GDB) 7.4.1-debian\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later\n(gdb) break main\nBreakpoint 1 at 0x804840c\n(gdb) run\nStarting program: ./instruction_camouflage\n\nBreakpoint 1, 0x0804840c in main ()\n</code></pre>\n<p>Lets check that the code hasn't change.</p>\n<pre><code>(gdb) disas\nDump of assembler code for function main:\n=&gt; 0x0804840c &lt;+0&gt;: mov    $0x804841e,%esi\n   0x08048411 &lt;+5&gt;: mov    %esi,%edi\n   0x08048413 &lt;+7&gt;: mov    $0x26,%ecx\n   0x08048418 &lt;+12&gt;:    lods   %ds:(%esi),%al\n   0x08048419 &lt;+13&gt;:    xor    $0xaa,%al\n   0x0804841b &lt;+15&gt;:    stos   %al,%es:(%edi)\n   0x0804841c &lt;+16&gt;:    loop   0x8048418 &lt;main+12&gt;\n   0x0804841e &lt;+18&gt;:    and    0x29(%edi),%ecx\n   0x08048421 &lt;+21&gt;:    inc    %esi\n   0x08048422 &lt;+22&gt;:    scas   %es:(%edi),%al\n   0x08048423 &lt;+23&gt;:    sub    %ecx,0x5a(%esi)\n   0x08048426 &lt;+26&gt;:    sub    %ebp,-0x52(%esi)\n   0x08048429 &lt;+29&gt;:    ret    $0x2e9c\n   0x0804842c &lt;+32&gt;:    scas   %es:(%edi),%al\n   0x0804842d &lt;+33&gt;:    mov    %al,0x55541742\n   0x08048432 &lt;+38&gt;:    push   %ebp\n   0x08048433 &lt;+39&gt;:    and    0x69(%esi),%eax\n   0x08048436 &lt;+42&gt;:    loop   0x8048407 &lt;frame_dummy+39&gt;\n   0x08048438 &lt;+44&gt;:    mov    $0xc5,%dh\n   0x0804843b &lt;+47&gt;:    mov    %ch,%bh\n   0x0804843d &lt;+49&gt;:    vshufps $0x8b,%xmm6,%xmm4,%xmm1\n   0x08048442 &lt;+54&gt;:    mov    0x909090aa,%al\n   0x08048447 &lt;+59&gt;:    nop\n...\n   0x0804844f &lt;+67&gt;:    nop\nEnd of assembler dump.\n</code></pre>\n<p>Let's put a breakpoint just after the loop and continue till it is reached.</p>\n<pre><code>(gdb) break *0x0804841e\nBreakpoint 2 at 0x804841e\n(gdb) continue\nContinuing.\n\nBreakpoint 2, 0x0804841e in main ()\n</code></pre>\n<p>Now, we should be able to access the code as it will be executed.</p>\n<pre><code>(gdb) disas\nDump of assembler code for function main:\n   0x0804840c &lt;+0&gt;: mov    $0x804841e,%esi\n   0x08048411 &lt;+5&gt;: mov    %esi,%edi\n   0x08048413 &lt;+7&gt;: mov    $0x26,%ecx\n   0x08048418 &lt;+12&gt;:    lods   %ds:(%esi),%al\n   0x08048419 &lt;+13&gt;:    xor    $0xaa,%al\n   0x0804841b &lt;+15&gt;:    stos   %al,%es:(%edi)\n   0x0804841c &lt;+16&gt;:    loop   0x8048418 &lt;main+12&gt;\n=&gt; 0x0804841e &lt;+18&gt;:    and    %ebp,%esp\n   0x08048420 &lt;+20&gt;:    sub    $0x4,%esp\n   0x08048423 &lt;+23&gt;:    and    $0xfffffff0,%esp\n   0x08048426 &lt;+26&gt;:    add    $0x4,%esp\n   0x08048429 &lt;+29&gt;:    push   $0x8048436\n   0x0804842e &lt;+34&gt;:    call   0x80482f0 &lt;puts@plt&gt;\n   0x08048433 &lt;+39&gt;:    mov    %ebp,%esp\n   0x08048435 &lt;+41&gt;:    ret    \n   0x08048436 &lt;+42&gt;:    dec    %eax\n   0x08048437 &lt;+43&gt;:    gs\n   0x08048438 &lt;+44&gt;:    insb   (%dx),%es:(%edi)\n   0x08048439 &lt;+45&gt;:    insb   (%dx),%es:(%edi)\n   0x0804843a &lt;+46&gt;:    outsl  %ds:(%esi),(%dx)\n   0x0804843b &lt;+47&gt;:    and    %dl,0x6f(%edi)\n   0x0804843e &lt;+50&gt;:    jb     0x80484ac &lt;__libc_csu_init+76&gt;\n   0x08048440 &lt;+52&gt;:    and    %ecx,%fs:(%edx)\n   0x08048443 &lt;+55&gt;:    add    %dl,-0x6f6f6f70(%eax)\n   0x08048449 &lt;+61&gt;:    nop\n   ...\n   0x0804844f &lt;+67&gt;:    nop\nEnd of assembler dump.\n</code></pre>\n<p>And, still there is these strange instructions after the <code>ret</code>, lets visualize it as a string.</p>\n<pre><code>(gdb) x /s 0x08048436\n0x8048436 &lt;main+42&gt;:     \"Hello World!\\n\"\n</code></pre>\n<p>So, we found all the pieces of the program and how it works.</p>\n</div>",
            "votes": "12",
            "user": "perror",
            "time": "Apr 15, 2013 at 13:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">Personally I've never heard the term \"code masking\" nor does Google or Wikipedia turn up any hints. Could you link to some resource where this term is actually used?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I don't know how to call this obfuscation. I couldn't find a proper generic name for this. Give some name, I'll change it in the question and in the answer.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">I'm used to it being called naive encryption since I assume you mean the question to cover more than xor? E.g some simple combinations of rotations and xor? Otherwise it's a xor cipher. I actually can't think of a really good name for ciphers that are trivially reversible. Given your explanation the same sort of answer would cover any complex cipher scheme as well. I.e the operations between your entry point and breakpoint could be arbitrarily complex but would still fall to your technique. It doesn't rely on the cipher being trivial.</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">I think we just call this \"self-modification\".</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">Knowing the algorithm and key don't change the fact that it's a decryption. I wasn't suggesting a new word, I was mentioning the word I'd expect.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is also commonly known as an <strong>encryption wrapper</strong>. I'm sure there are several other similar names used in the industry. </p>\n<p>The actual code isn't as important as the concept. The plaintext code is prepended (in executive order) by a decryption stub responsible for decoding the body of the code. In this way, the main code body (payload in the case of malware) is encrypted, and thus doesn't have constant bytes. The decoder stub itself remains constant in this example, though <strong>polymorphism</strong> is a later evolution that regenerates the encoder and decoder so that they, too, contain no constant bytes. By lessening the number of constant bytes between copies of the code, detection signature exposure is reduced.</p>\n<p>Decoder stubs can offer decompression as well.</p>\n<p>This mechanism got heavy use in the early days of self-replicating PC viruses. These were labeled with the characteristic of being <strong>self-encrypting</strong>. It is still used in today by some subversive software. </p>\n<p><em>Importantly, native code isn't the only code that can be 'wrapped' in this fashion.</em></p>\n</div>",
            "votes": "2",
            "user": "dyasta",
            "time": "Apr 15, 2013 at 16:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}