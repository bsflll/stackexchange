{
    "title": "How does IPA decryption works?",
    "link": "https://reverseengineering.stackexchange.com/questions/21881/how-does-ipa-decryption-works",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All IPAs being downloaded from AppStore gets encrypted on servers as part of FairPlay DRM. But decryption is accomplished on local device. As far as I know there is some hardware module which contains all the decryption logic. Is there any info how this module works, which algorithms uses? </p>\n</div>",
    "votes": "6",
    "answers": 1,
    "views": "963",
    "tags": [
        "decryption",
        "encryption",
        "binary",
        "ios"
    ],
    "user": "AseN",
    "time": "Aug 13, 2019 at 21:03",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I’m not aware of any detailed description of the app encryption on iOS. My guess is that because FairPlay framework and kext are heavily obfuscated, it’s much easier to just let it run on the device and get the final decrypted code that spend countless hours reverse engineering the obfuscated algorithms which in the end will need the key material produced on the physical device. </p>\n<p>On the other hand, if you do spend those months/years to find out the exact details, you just might discover a way to perform decryption offline after all :)</p>\n</div>",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 15, 2019 at 22:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "AseN",
                    "text": "<span class=\"comment-copy\">Yes, it is much easier to extract decrypted code from device`s memory, but I wondered maybe there were some researches about actual module's work</span>",
                    "time": null
                }
            ]
        }
    ]
}