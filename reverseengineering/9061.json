{
    "title": "Binary diffing: Why moving ebx to eax, instead of pushing ebx?",
    "link": "https://reverseengineering.stackexchange.com/questions/9061/binary-diffing-why-moving-ebx-to-eax-instead-of-pushing-ebx",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was doing binary diffing, I want to know why  <code>mov eax,ebx</code> is used instead of <code>push ebx</code>.</p>\n<p>This is the binary diffing image: </p>\n<p>Before patch :<img alt=\"enter image description here\" src=\"https://i.sstatic.net/98qtP.jpg\"/></p>\n<p>After patch : <img alt=\"enter image description here\" src=\"https://i.sstatic.net/dyAqw.jpg\"/></p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "535",
    "tags": [
        "assembly",
        "binary-analysis",
        "x86",
        "bin-diffing"
    ],
    "user": "Vlad",
    "time": "Jun 4, 2015 at 13:55",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The function prototype for <code>?EnsureCollectionCache@CFormElement@@QAEJXZ</code> is the same before and after the patch. <a href=\"http://www.agner.org/optimize/calling_conventions.pdf\" rel=\"nofollow\">It demangles to</a>:</p>\n<p><code>public: long int __thiscall CFormElement::EnsureCollectionCache(void)</code></p>\n<p>And the calling convention for the parent function, <code>?DoReset@CFromElement@@QAEJH@Z</code>,  is the same before and after as well:</p>\n<p><code>public: long int __thiscall CFormElement::DoReset(int)</code></p>\n<p>Before and after the patch, the <code>CFormElement::DoReset</code> function saves the value of its <code>int</code> argument in register <code>ebx</code>. Before the patch, this value is pushed onto the stack at EIP <code>639C2C58</code> because other code in the function will likely make use of it later. After the patch, the <code>mov eax, ebx</code> instruction is effectively a no-op since the call to <code>CFormElement::EnsureCollectionCache</code> will overwrite <code>eax</code>.</p>\n<p>As for why the compiler made this change, it's difficult to say without seeing the rest of the function. Perhaps after the patch, the code in the rest of the function gets the value of the <code>int</code> argument from the stack relative to <code>ebp</code> as opposed to grabbing it from the top of the stack.</p>\n</div>",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Jun 4, 2015 at 14:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vlad",
                    "text": "<span class=\"comment-copy\">Yes! I'm wondering why should the no-op instruction be used.... what about the lines 3 and 4 of the yellow node? here the <code>esi</code> would have a different value according to the first line . am I right?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No, in both cases <code>esi</code> will get set to the return value of <code>CFormElement::EnsureCollectionCache</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It may be because the calling convention changed from __cdecl (using the stack to receive the arguments) to __fastcall or even to a calling convention invented by the compiler (using EAX as the register holding the same information that was pushed on to the stack in the previous version).</p>\n</div>",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Jun 4, 2015 at 14:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No, the calling convention didn't change.</span>",
                    "time": null
                }
            ]
        }
    ]
}