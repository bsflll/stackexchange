{
    "title": "Difference between Instruction and Function in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/6026/difference-between-instruction-and-function-in-ida-pro",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am newbie in IDA Pro. I have a basic question, what is the difference between instruction and function in IDA Pro? Is function contains some instructions on it ?!</p>\n<p>Thanks in advance :)</p>\n</div>",
    "votes": "-3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Hossein Mobasher",
    "time": "Aug 6, 2014 at 8:22",
    "comments": [
        {
            "user": "0xec",
            "text": "<span class=\"comment-copy\">The difference between instruction and function is exactly the same as in a piece of Assembly Code.</span>",
            "time": null
        },
        {
            "user": "Dominik Antal",
            "text": "<span class=\"comment-copy\">This is not the official definition of the terms, I'ld define them as: A Function is a set of instructions, while an instruction is an operation to the processor. (bytes/opcodes) This is not specific to IDA Pro.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An instruction is bytes that can be decoded. They may or may not be real instruction by virtue of not being called. Might be data that looks like possible code. </p>\n<p>Functions is instructions that have been indicated are called and this is the start. The indication might be a user action like pressing <kbd>P</kbd> or <kbd>auto analysis</kbd> following call locations in other code/functions. </p>\n<p>But, in either case you can tell IDA that something is or is not code or functions. The only trick is if some bytes of a function are not valid instructions, then IDA will not lets you create a function. </p>\n</div>",
            "votes": "2",
            "user": "Simeon Pilgrim",
            "time": "Aug 6, 2014 at 19:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Hossein Mobasher",
                    "text": "<span class=\"comment-copy\">Thank you very much. You said \"bytes that can be decided.\"  What does your means?</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">@HosseinMobasher decided should be decoded. Burned by auto correct. Will fix.</span>",
                    "time": null
                },
                {
                    "user": "Hossein Mobasher",
                    "text": "<span class=\"comment-copy\">Thanks :) Another question is. You said \"An instruction is bytes that can be decoded.\" and you also said \"They (=Instructions) may or may not be real instruction ...\" ?! Instructions may or may not be real instructions ?</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">@HosseinMobasher yes, just because a sequence of bytes forms \"valid instructions\" does not mean those bytes will be excuted, thus instructions they may not be. It's a common anti static analysis pattern (x86) for code to jumping into the middle of a byte stream thus the instructions are different. On more RISC like processors (ARM,MIPS) code must be on byte alignment boundaries. But this is a large topic, and more than one question will answer, go forth and read.</span>",
                    "time": null
                }
            ]
        }
    ]
}