{
    "title": "Hooking IAT in remote process with Python?",
    "link": "https://reverseengineering.stackexchange.com/questions/29425/hooking-iat-in-remote-process-with-python",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm trying to hook a win32 function call (<code>CreateFileW</code>) inside of a notepad process to have the function do additional actions before returning what it should do. Ultimately, this will assist me in some RE translation efforts for another project I'm working on, but I'm just doing this as a proof of concept.</p>\n<p>I'm the most comfortable in Python, so I've been trying to accomplish this task in this language.</p>\n<p>There are a lot of small to large scale Python libraries out there on how to RPM/WPM, but hooking/detouring are not focus points with these projects.</p>\n<p>Here is an example of what I've attempted to do with both the <a href=\"https://github.com/srounet/Pymem\" rel=\"nofollow noreferrer\">pymem</a> and <a href=\"https://github.com/hakril/PythonForWindows\" rel=\"nofollow noreferrer\">PythonForWindows</a> libraries to accomplish this task:</p>\n<pre><code>import pymem\nimport sys\nimport os\nfrom json import dumps\n\nwdir = os.path.abspath('.')\n\nlog_path = os.path.join(wdir, 'out.log').replace(\"\\\\\", \"\\\\\\\\\")\nerr_path = os.path.join(wdir, 'err.log').replace(\"\\\\\", \"\\\\\\\\\")\n\nshellcode = \"\"\"\nimport sys\nfrom os import chdir\nfrom traceback import format_exc\nsys.path=%s\nchdir(sys.path[0])\n\ndef write_file(message):\n    with open(\"%s\", \"a\") as f:\n        f.write(str(message))\n\ntry:\n    import windows\n    from windows.hooks import *\n\n    @CreateFileWCallback\n    def createfile_callback(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, real_function):\n        try:\n            write_file(\"Trying to open {0}\".format(lpFileName))\n            return real_function()\n        except:\n            write_file(format_exc())\n\n    peb = windows.current_process.peb.modules[0]\n    imp = peb.pe.imports\n    \n    iat_create_file = [entry for entry in imp['kernel32.dll'] if entry.name == \"CreateFileW\"]\n    \n    result = iat_create_file[0].set_hook(createfile_callback)\nexcept:\n    write_file(format_exc())\n\"\"\" % (\n    dumps(sys.path).replace(\"\\\\\", \"\\\\\\\\\"),\n    'err.log'\n)\n\npm = pymem.Pymem('notepad.exe')\npm.inject_python_interpreter()\npm.inject_python_shellcode(shellcode)\n</code></pre>\n<p>This code is <em>supposed</em> to hook the <code>CreateFileW</code> function, log the name of the file it's interacting with to a file and then return the rest of the function. My problem is that when this function is called within notepad, the program just hangs -- so not successful unfortunately.</p>\n<p>I have a feeling that my code here:</p>\n<pre><code>pm.inject_python_shellcode(shellcode)\n</code></pre>\n<p>is <a href=\"https://pymem.readthedocs.io/en/latest/api.html?highlight=inject_python_shellcode#pymem.Pymem.inject_python_shellcode\" rel=\"nofollow noreferrer\">spawning a thread and executing immediately</a>, instead of only executing when it has been called - but I don't know of a different way to do this.</p>\n<p>I'm totally open to different ways to go about this. I know <code>ctypes</code> is powerful for this work, but I'm unsure how to implement something like that in this method. I learn best by example code and have easily dumped dozens of hours searching for ways to do this without success. Thanks for any help you can provide!</p>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "498",
    "tags": [
        "python",
        "function-hooking",
        "injection",
        "iat"
    ],
    "user": "tunemein",
    "time": "Oct 17, 2021 at 15:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I cross-posted this to another community that I'm a part of and ended up getting my answer (I should have done this sooner..):</p>\n<p>It was likely that my code was getting garbage collected, hence the lock up. To keep the code there, I added:</p>\n<pre><code>while True:\n  pass\n</code></pre>\n<p>to the end of my <code>try</code> block. The text is now being logged.</p>\n</div>",
            "votes": "3",
            "user": "tunemein",
            "time": "Oct 17, 2021 at 16:36",
            "is_accepted": true,
            "comments": []
        }
    ]
}