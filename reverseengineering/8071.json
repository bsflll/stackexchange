{
    "title": "Help Tracking Win Messages",
    "link": "https://reverseengineering.stackexchange.com/questions/8071/help-tracking-win-messages",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm new to reverse engineering, have been using olly and x64_dbg. I've ,to a degree, successfully reverse engineered and understood functions and parts of code of a couple applications. I cannot READ Asm or spot data structures quite yet. I recently tried peeking at a disassembled code of a new PE and it's obfuscated. So it's far over my head at this point but I continued to dig in. I came across a popup dialog created/initiated by the <code>User32.CreateWindowExA</code>  function. Due to anti debugging code I cannot place any breakpoints in the actual executable.... well certain memory locations of the exe and dlls can have breakpoints. Anyway I narrowed things down to a <code>DispatchMessageA</code> function being called then the <code>CreateWindowExA</code> function. I can't find out what happens between the two or find the GetMessage funct. I believe I know the message being sent but my question is, how do I find the receiving message function for the appropriate message sent out. Let's say 3 different messages can be sent out how do I find out who collects them?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "352",
    "tags": [
        "disassembly"
    ],
    "user": "TurtleMan",
    "time": "Jan 21, 2015 at 4:56",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As it stands the query is too broad </p>\n<p>to capture all the messages that are sent Via GetMessageX to a certain process A conditional log  breakpoint similar to this can be employed</p>\n<p><strong>OS xpsp3 using windbg and <code>Ken Johnsons</code> sdbgext windbg extension</strong></p>\n<p>Demo Result  </p>\n<p><strong>finding index of GetMessage</strong></p>\n<pre><code>0:000&gt; uf USER32!NtUserGetMessage\nUSER32!NtUserGetMessage:\n7e4191b2 b8a5110000      mov     eax,11A5h\n7e4191b7 ba0003fe7f      mov     edx,offset SharedUserData!SystemCallStub (7ffe0300)\n7e4191bc ff12            call    dword ptr [edx]\n7e4191be c21000          ret     10h\n</code></pre>\n<p><strong>to know how many step over is required</strong> </p>\n<pre><code>0:000&gt; uf ntdll!KiFastSystemCall\nntdll!KiFastSystemCall:\n7c90e510 8bd4            mov     edx,esp\n7c90e512 0f34            sysenter\n7c90e514 c3              ret\n</code></pre>\n<p><strong>setting a conditional log breakpoint using index and number of step overs</strong> </p>\n<pre><code>0:000&gt; bp ntdll!KiFastSystemCall \".if(@eax == 11a5) {r $t0 = poi(@esp+8);p 2 \\\"!usermsg @$t0;g\\\";} .else {gc}\"\n</code></pre>\n<p><strong>confirming the breakpoint</strong></p>\n<pre><code>0:000&gt; .bpcmds\nbp0 0x7c90e510  \".if(@eax == 11a5) {r $t0 = poi(@esp+8);p 2 \\\"!usermsg @$t0;g\\\";} .else {gc}\";\n</code></pre>\n<p><strong>executing</strong> </p>\n<pre><code>0:000&gt; g\n</code></pre>\n<p>**log the voluminous spew to be  parsed later **</p>\n<pre><code>eax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    000a01d6\nName      C\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        00000088\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd026\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    00080186\nName      /\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        0000005a\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd14f\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    000a0160\nName      *\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        0000005b\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd249\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\n</code></pre>\n</div>",
            "votes": "2",
            "user": "blabb",
            "time": "Jan 21, 2015 at 7:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "TurtleMan",
                    "text": "<span class=\"comment-copy\">Wow thanks. It appears I have a lot to learn but not being able to see how deep the rabbit hole gets only makes me more excited. X64_dbg does not have conditional breakpoints yet. Their hardware breakpoints don't reliably work yet. It's a great program I look forward to its future but I'll give windgb a look at and hopefully things go well. Thanks for the advice. I plan to start reading.       practical reverse engineering.      this weekend. Hopefully that'll help with the obfuscation.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@TurtleMan: Please, don't forget to tick the answer as correct ! And possibly vote for it if you think it deserve it. The principle of Stack-Exchange websites is based on the hypothesis that every should follow these simples rules. If nobody do it, it won't be possible to distinguish good answers from gibberish.</span>",
                    "time": null
                }
            ]
        }
    ]
}