{
    "title": "Get stack references in Ghidra of a function from the java api",
    "link": "https://reverseengineering.stackexchange.com/questions/21071/get-stack-references-in-ghidra-of-a-function-from-the-java-api",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How can one access all references to the stack (also outside of its frame) a <a href=\"http://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/Function.html\" rel=\"nofollow noreferrer\">function</a> has via the Java Plugin API?</p>\n<p>Example: This instructions write values <strong>outside</strong> of the stack frame of the function:</p>\n<p><a href=\"https://i.sstatic.net/L5ERd.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/L5ERd.png\"/></a></p>\n<p>Do I need to traverse the CFG of the function? (If yes, how do I do this?)</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra"
    ],
    "user": "Jonas Felber",
    "time": "Apr 7, 2019 at 20:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I asked the question on <a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/390\" rel=\"nofollow noreferrer\">github</a> and got the following reply:</p>\n<blockquote>\n<p>Assuming stack analysis has been performed and the function has been\n  marked with stack references as shown above, you can iterate over the\n  references \"from\" the body of the function (i.e., AddressSetView). The\n  references returned would need to be filtered as other type of\n  references would also be returned. Although there are a variety of\n  ways to obtain references here is one example:</p>\n</blockquote>\n<pre><code>Function f;\nProgram p;\nReferenceManager refMgr = p.getReferenceManager();\n    for (Address fromAddr : refMgr.getReferenceSourceIterator(f.getBody(), true)) {\n        for (Reference ref : refMgr.getReferencesFrom(fromAddr)) {\n            if (ref.isStackReference()) {\n                StackReference stackRef = (StackReference) ref;\n            }\n        }\n}\n</code></pre>\n<p>The important part is that your analysis must take place AFTER the stack analysis happened, which is quite late. You can control when your analysis runs in the constructor by passing the point where you want to run into the parent constructor.</p>\n</div>",
            "votes": "1",
            "user": "Jonas Felber",
            "time": "Apr 24, 2019 at 7:56",
            "is_accepted": true,
            "comments": []
        }
    ]
}