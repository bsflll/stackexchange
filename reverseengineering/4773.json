{
    "title": "How should I reach my shellcode?",
    "link": "https://reverseengineering.stackexchange.com/questions/4773/how-should-i-reach-my-shellcode",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am trying to exploit this little program I found on <a href=\"http://opensecuritytraining.info/\" rel=\"nofollow noreferrer\">opensecuritytraining.info</a>.\nBut, somehow, I am stuck at this point. What I did was to create a file which gets read from the program. Here is the code I am using for this:</p>\n<pre><code>#!/usr/bin/env python\n\nimport struct\n\nmystring = b\"\\xCC\"*1096# junk\nnSEH = b\"\\xeb\\x06\\x90\\x90\"\nSEH  = struct.pack(\"&lt;L\", 0x004011B6)\nopcode = \"\\xe9\\xdf\\xf6\\xff\\xff\"\n\nmystring += nSEH + SEH + (\"\\x90\"*16) + opcode\nfileName='C:\\hellothere.bin'\n\nwith open(fileName, 'wb') as fb:\n    fb.write(bytearray(mystring))\nfb.close()\n</code></pre>\n<p>So, I am stuck at this point where I am overriding the buffer with <code>\\xCC</code>, But my question is, when I am placing another jump code where the <code>CC</code>'s override the saved <code>EIP</code> register. Can I jump further backwards to where my shell code takes place ? </p>\n<p>I mean in principle this should be possible for some tweaking or adjusting  of the exploit code itself.</p>\n<p>Any idea ?</p>\n<p><img alt=\"exercise\" src=\"https://i.sstatic.net/SWEJR.png\"/></p>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "500",
    "tags": [
        "windows",
        "x86",
        "buffer-overflow"
    ],
    "user": "Dirk",
    "time": "Jul 3, 2014 at 7:45",
    "comments": [
        {
            "user": "schroeder",
            "text": "<span class=\"comment-copy\">This is a pure programming question. Try the ReverseEngineering.stackexchange.com forum?</span>",
            "time": null
        },
        {
            "user": "Dirk",
            "text": "<span class=\"comment-copy\">@schroeder okay i will to that. But i was not shure if the RE is the right place for this question</span>",
            "time": null
        },
        {
            "user": "Dirk",
            "text": "<span class=\"comment-copy\">maybe some op could migrate this question to RE if this is the wrong place for this topic?</span>",
            "time": null
        },
        {
            "user": "Dmitry Janushkevich",
            "text": "<span class=\"comment-copy\">I'll just leave the <a href=\"https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/\" rel=\"nofollow noreferrer\">Corelan tutorial</a> link here for further reference.</span>",
            "time": null
        },
        {
            "user": "Fewmitz",
            "text": "<span class=\"comment-copy\">Are you gaining execution via an SEH overwrite? It already looks like you've done pretty much the whole thing. If you want to jump further you can change nSEH to \\xeb\\xff, change your opcode to a bigger jump back. You could also put a second jump in your shellcode but I don't know why you would do that.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as the screenshot depicts, I can say that you are on the right track. You have correctly, overwritten the <strong>Pointer to NextSEH</strong> and <strong>SE Handler</strong>.</p>\n<h1><strong>Some explanation:</strong></h1>\n<p><strong>Exception Registration Record Structure</strong></p>\n<pre><code>typedef struct _EXCEPTION_REGISTRATION_RECORD\n{\n   struct _EXCEPTION_REGISTRATION_RECORD *Next;\n   PEXCEPTION_ROUTINE                     Handler;\n} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;\n</code></pre>\n<p>Whenever a new function is called which has exception handling mechanism, the <strong>EXCEPTION_REGISTRATION_RECORD</strong> is added to the stack. Where <strong>*Next</strong> is the pointer to the <strong>Previous EXCEPTION_REGISTRATION_RECORD</strong> and <strong>Handler</strong> is the function pointer to the <strong>Exception handler</strong>.</p>\n<p>The <strong>FS:0</strong> register always points to the first <strong>EXCEPTION_REGISTRATION_RECORD</strong>. Once the <strong>EXCEPTION_REGISTRATION_RECORD</strong> is pushed on the stack, the <strong>FS:0</strong> register will be set to point to the new <strong>EXCEPTION_REGISTRATION_RECORD</strong> and <strong>Next</strong> record will be set to point to the previous value of <strong>FS:0</strong> register. This will maintain the link list of the SEH chains.</p>\n<p><strong>ExceptionHandler Structure</strong></p>\n<pre><code>typedef EXCEPTION_DISPOSITION (*ExceptionHandler) (\n    IN PEXCEPTION_RECORD ExceptionRecord,\n    IN ULONG64 EstablisherFrame,\n    IN OUT PCONTEXT ContextRecord,\n    IN OUT PDISPATCHER_CONTEXT DispatcherContext\n);\n</code></pre>\n<p>When an exception occurs, <strong>System Exception Dispatcher</strong> routine kicks in and it's sets up it's own stack frame. The structure of the <strong>ExceptionHandler</strong> is pushed to the stack. </p>\n<p>In SEH overwrite scenario, an attacker is lucky because, <strong>System Exception Dispatcher</strong> routine places the <strong>EstablisherFrame</strong> value on the stack at <strong>[ESP+8]</strong> before this <strong>ExceptionHandler</strong> function is called. </p>\n<p><strong>EstablisherFrame</strong> is the pointer to the <strong>NextSEH</strong> record. An attacker is able to control it by overwriting <strong>NextSEH</strong> record with arbitrary memory address.</p>\n<p><strong>Note:</strong> <em>Attacker has not overwritten the <strong>EstablisherFrame</strong>. However, the attacker has overwritten <strong>NextSEH</strong> pointer which was there on the stack.</em></p>\n<p>Once, you pass the exception <strong>System Exception Dispatcher</strong> passes the control to the <strong>SE handler</strong> and the exception handling code is executed.</p>\n<p><strong>Exploitation Tactics:</strong></p>\n<ol>\n<li>Attacker will overwrite the <strong>NextSEH</strong> with <strong>Backward Jump</strong> and the <strong>SE Handler</strong> with the address of <strong>POP/POP/RET</strong> sequence.</li>\n<li>Once the exception occurs, the address of <strong>NextSEH</strong> will be placed on the stack at <strong>[ESP+8]</strong> due to exception dispatch routine prologue.</li>\n<li>Once the exception is passed, the exception dispatcher routine will pass the control to <strong>SE Handler</strong>.</li>\n<li><strong>SE Handler</strong> will execute the <strong>POP/POP/RET</strong> sequence and will <strong>POP</strong> the address of <strong>NextSEH</strong> in <strong>EIP</strong>. Hence, gaining code execution.</li>\n</ol>\n<p>Please accept my apologies if there are mistakes in the answer, and please help to improve the answer so that it's useful to the community members.</p>\n<p>Thanks.</p>\n</div>",
            "votes": "8",
            "user": "john4tech",
            "time": "Jul 3, 2014 at 13:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dirk",
                    "text": "<span class=\"comment-copy\">As far as my knowledge is about SEH explotation, i would agree with your answer. Maybe there are some details i have overlooked, but to me it seems correct :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, you can simply jump backwards. Control flow should reach your NOP pad, you can code your trampoline in there.</p>\n</div>",
            "votes": "3",
            "user": "Dmitry Janushkevich",
            "time": "Jul 3, 2014 at 7:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}