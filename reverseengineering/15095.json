{
    "title": "GNU objcopy: elf to hex missing sections",
    "link": "https://reverseengineering.stackexchange.com/questions/15095/gnu-objcopy-elf-to-hex-missing-sections",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using objcopy to convert elf to hex. When I disassemble the elf in IDA Pro, all the sections are present, but they are missing from my hex and it seems the elf headers:</p>\n<pre><code>C:\\TricoreGCC&gt;tricore-readelf -l test1.elf\n\nElf file type is EXEC (Executable file)\nEntry point 0x80132000\nThere are 3 program headers, starting at offset 52\n\nProgram Headers:\nType           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\nLOAD           0x000000 0x80130000 0x80130000 0x023e8 0x023e8 R E 0x4000\nLOAD           0x003000 0x801cb000 0x801cb000 0x01478 0x01478 RW  0x4000\nLOAD           0x005500 0xd0015500 0xd0015500 0x00000 0x00008 RW  0x4000\n\nSection to Segment mapping:\nSegment Sections...\n00     .text .rodata\n01     .data\n02     .bss\n</code></pre>\n<p>In an assembler file I have this:</p>\n<pre><code>.section .jfuel , \"x\"\nj translatefuel\n</code></pre>\n<p>In a linker script file I have this:</p>\n<pre><code>SECTIONS\n{\n. = 0x800B5964;\n.jfuel : { *(.jfuel) }\n. = 0x80132000;\n.text : { *(.text) }\n.rodata : { *(.rodata) }\n. = 0x801CB000;\n.data : { *(.data) }\n. = 0xD0015500;\n.bss : { *(.bss) }\n}\n</code></pre>\n<p>The elf file does contain symbols from this section though:</p>\n<pre><code>Symbol table '.symtab' contains 85 entries:\nNum:    Value  Size Type    Bind   Vis      Ndx Name\n 0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND\n 1: 800b5964     0 SECTION LOCAL  DEFAULT    1...\n</code></pre>\n<p>and later there is my .text section:</p>\n<pre><code> 5: 80132000     0 SECTION LOCAL  DEFAULT    5...\n</code></pre>\n<p>Somehow I am not defining the section properly in the linker script file. Because it doesn't have a traditional name like .text I'm missing something that is stopping it getting into the sections to \"load\" into the elf and hence the hex, although IDA Pro loading the elf is showing the sections correctly placed, and their contents.</p>\n<p>Posting in RE because I'm patching binaries with a combination of C and asm.</p>\n<p>Thanks!</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "elf",
        "section"
    ],
    "user": "John Banks",
    "time": "Apr 4, 2017 at 22:39",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">what exactly do you mean by \"missing from my hex\"?</span>",
            "time": null
        },
        {
            "user": "John Banks",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky There are four bytes of code in the .jfuel section that appear in IDA Pro when I load the elf, but they do not show in the hex file loaded into Hex Workshop. <code>tricore-objcopy --set-start=0x80000000 -O ihex test1.elf test1.hex</code> is the conversion I am using from elf to hex.</span>",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "<span class=\"comment-copy\">please post full dump of your elf headers (the one you posted doesn't mention <code>.jfuel</code> so seems to be something else)</span>",
            "time": null
        },
        {
            "user": "John Banks",
            "text": "<span class=\"comment-copy\">@IgorSkochinsky That was the clue I needed, thanks! .text has AX (alloc, execute) whereas .jfuel only had X. I changed the assembler file to show <code>.section .jfuel , \"ax\" j translatefuel</code> where ax replaced x and now the hex file contains everything.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Answer in this case after hint from @Igor Skochinsky is:</p>\n<p>Change:</p>\n<pre><code>.section .jfuel , \"x\"\nj translatefuel\n</code></pre>\n<p>To:</p>\n<pre><code>.section .jfuel , \"ax\"\nj translatefuel\n</code></pre>\n<p>.text has AX (alloc, execute) by default whereas .jfuel only had X because that was all I added originally.</p>\n</div>",
            "votes": "0",
            "user": "John Banks",
            "time": "Apr 5, 2017 at 12:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}