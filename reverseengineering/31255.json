{
    "title": "Is it possible to work with 'marked positions' in IDA from idapython, and if so, how?",
    "link": "https://reverseengineering.stackexchange.com/questions/31255/is-it-possible-to-work-with-marked-positions-in-ida-from-idapython-and-if-so",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm working on an IDA script in which I'd like to iterate through addresses that have been marked (with Alt-M).</p>\n<p>Looking at the <a href=\"https://hex-rays.com/products/ida/support/idapython_docs/ida_moves.html\" rel=\"nofollow noreferrer\">idapython documentation</a>, it looks like maybe I can do this via the <code>bookmark_t</code> proxy class and related functions, but it's not clear to me how to make this work.  For example:</p>\n<pre><code>def find_index(*args) â€‘&gt; uint32\n    find_index(e, ud) -&gt; uint32\n    e: lochist_entry_t const &amp;\n    ud: void *\n</code></pre>\n<p><code>e</code> is obviously a lochist_entry_t, but I can't tell from the context what <code>ud</code> is supposed to represent, or how I would pass it as a void pointer to the call.  (For giggles, I tried to pass <code>None</code> in place of a NULL pointer, and it actually crashed ida.  Oops.)</p>\n<p>I've searched the web for examples of using this api, but haven't found anything helpful.</p>\n<p>Is what I'm trying to do possible? If so, can someone please provide a working example, or a reference/doc/blogpost somewhere that I missed, or even just a nudge the right direction?</p>\n<p>Thanks in advance.</p>\n<p>Edit:</p>\n<p>Digging through more idapython documentation (in unrelated areas) leads me to believe that <code>ud</code> is user-defined context data, but it's not yet clear how to create this (since passing NULL/None seems to be a no-go) or pass it to the functions.</p>\n<p>Edit 2:</p>\n<p>Further research has led me to trying to use <code>ctypes</code> to create pointers to various data types, but even when using <code>c_void_p</code> to create a void pointer, I'm still getting a <code>TypeError</code> for the <code>void*</code> argument.</p>\n<p>I also found some mention of using SWIG's <code>cdata</code> and similar functions, which would seem to make sense, since it appears idapython uses SWIG.  However, I can't seem to figure out what/how to import to get access to that in python.   Looking at various docs leads me to believe that those functions would be exposed via the SWIG interface definitions, and a quick look through the idapython SWIG interface definitions and the IDA SDK doesn't reveal anything I can actually import to give me access to those SWIG functions.</p>\n<p>Edit 3:</p>\n<p>I did manage to find <code>uchar_array(size_t)</code> which returns a character array pointer, so I tried to pass that to <code>bookmark_t_size(e, ud)</code> and again IDA crashed.  So at this point, I'm not sure what to try next.</p>\n</div>",
    "votes": "3",
    "answers": 1,
    "views": "119",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "Bill B",
    "time": "Dec 10, 2022 at 21:44",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To clarify, location history and marked positions are two different things...but it's not surprising that you wandered into that API and got stuck since that's the SWIG wrapper around the SDK itself and is hence not too user-friendly.</p>\n<p>However, there's <code>get_mark_comment</code> and <code>get_marked_pos</code> over at <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/ida_idc.html\" rel=\"nofollow noreferrer\">https://www.hex-rays.com/products/ida/support/idapython_docs/ida_idc.html</a> which is much easier and straightforward to use. Your mark limit is <code>MAX_MARK_SLOT</code>, so you can use this with those idc functions to iterate through all of the possible marks in the database.</p>\n</div>",
            "votes": "1",
            "user": "Ali Rizvi-Santiago",
            "time": "Feb 8, 2023 at 0:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}