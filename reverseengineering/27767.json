{
    "title": "An incomprehensible line in the output from hex rays",
    "link": "https://reverseengineering.stackexchange.com/questions/27767/an-incomprehensible-line-in-the-output-from-hex-rays",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>v5 = (*(int (__cdecl **)(int))((char *)&amp;etext + 1))(a1);\n</code></pre>\n<p>Please explain me what does this line mean (if possible, please write from what it was compiled from (language - c))</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "76",
    "tags": [
        "hexrays"
    ],
    "user": "Inc.ace",
    "time": "Jun 1, 2021 at 13:01",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's just a convoluted function call via function pointers.</p>\n<pre><code>(*(int (__cdecl **)(int))\n</code></pre>\n<p>casts a given number to a pointer to a function pointer (note the <code>**</code> so second degree function pointer) and dereferences it so you end up with a regular function pointer. The calling convention in use being <code>cdecl</code>. The target function would look like:</p>\n<pre><code>int __cdecl do_something(int some_arg) { ... }\n</code></pre>\n<p>The number being cast and dereferenced then is the address of <code>etext</code> plus 1. So at <code>etext + 1</code> is an address, that points to another address that points to a function.</p>\n<p>That function then is called with <code>a5</code> as the argument, storing the return value in v5.</p>\n<p>If I had to make up a C snippet, it would be something like this, the last line being what you posted:</p>\n<pre><code>typedef int (_cdecl *fptr2)(int);    //first degree function pointer typedef\ntypedef int (_cdecl **fptr1)(int);   //second degree function pointer typedef\n\nint _cdecl do_something(int arg)\n{\n    return arg+5;\n}\n\nvoid main()\n{\n    struct\n    {\n        char unused;             //this is for the etext + 1\n        fptr2 pp_func;           //stores a fptr to a fptr\n    } etext;\n\n    fptr1 func = &amp;do_something;  //first degree function pointer\n    etext.pp_func = &amp;func;       //second degree function pointer\n    (*etext.pp_func)(1337);      //the actual call and the equivalent of your line\n}\n</code></pre>\n<p>A more real-world example would probably be <code>etext+1</code> storing a pointer to a list of function pointers. Outside of that I rarely see second degree function pointers.</p>\n</div>",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Jun 5, 2021 at 0:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}