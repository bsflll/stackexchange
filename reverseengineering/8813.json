{
    "title": "How to bypass ZwContinue?",
    "link": "https://reverseengineering.stackexchange.com/questions/8813/how-to-bypass-zwcontinue",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>During an analysis, I have found a call to <code>ZwContinue</code>. The executable file first gets the address of <code>ntdll.NtContinue</code> and stores it in the EAX register.</p>\n<p>After I step over the following assembly line, </p>\n<pre><code>  CALL EAX      ; ntdll.ZwContinue\n</code></pre>\n<p>then OllyDbg (v1.10) terminates the process.</p>\n<p>I have found out that this is a kind of anti-debugging mechanism but I could not figure out how to defeat it.</p>\n<p>Is there any plugin which I can use or any other helpful trick?</p>\n</div>",
    "votes": "10",
    "answers": 2,
    "views": "8k",
    "tags": [
        "assembly",
        "anti-debugging"
    ],
    "user": "user3097712",
    "time": "May 7, 2015 at 16:37",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>ntdll!ZwContinue takes the same parameters than ntdll!NtContinue, that is the following :</p>\n<pre><code>NTSTATUS NTAPI \nNtContinue (\n  IN PCONTEXT ThreadContext,\n  IN BOOLEAN  RaiseAlert\n);\n</code></pre>\n<p>You can read the \"Eip\" field in the PCONTEXT structure, put a breakpoint on this address, and press Run to reach your breakpoint and continue your analysis.</p>\n<p>If you want to try Olly 2.01, it has a nice feature for this particular case : \"Decode as structure\" in the Dump Window.</p>\n<p><img alt=\"Decode as structure\" src=\"https://i.sstatic.net/KLT9U.png\"/></p>\n<p><img alt=\"Decoded\" src=\"https://puu.sh/hBCg6/61177e85b0.png\"/></p>\n</div>",
            "votes": "10",
            "user": "Community",
            "time": "Mar 10, 2017 at 9:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for your answer. To set a BP at EIP in PCONTEXT, do I have to find the EIP value in the hex window, or how can I achieve that in ollydbg v1.10 ?</span>",
                    "time": null
                },
                {
                    "user": "Spl3en",
                    "text": "<span class=\"comment-copy\">@user3097712 I don't know another way than doing it manually on OllyDBG 1.10.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">ollydbg 1,10 alt+f1 -&gt; bp [[esp+4] + 0xb8 ] when broken on ntdll!Nt/ZwContinue will set a break on PContext-&gt;Eip in x86</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">From user mode <code>NtContinue</code> is in fact identical to <code>ZwContinue</code>. More of these <code>Nt*</code>/<code>Zw*</code> pairs exist and they are usually the primary system services. In kernel mode these functions also exist, but differ. One of them (don't remember which) will have access checks in place when called from user mode, whereas the other is meant to be used from a kernel mode caller exclusively.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check the context argument to NtContinue (first arg). NtContinue works as an anti-debug by potentially clearing DR7 or breaking out of single stepping by clearing the trap flag, then returning to the IP specified in the context, after applying the register state.</p>\n</div>",
            "votes": "7",
            "user": "everdox",
            "time": "May 4, 2015 at 22:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">While the other answer describes how to get around it, this one explains much better what's going on under the hood.</span>",
                    "time": null
                }
            ]
        }
    ]
}