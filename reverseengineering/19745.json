{
    "title": "Changing local variable in caller from callee in C? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/19745/changing-local-variable-in-caller-from-callee-in-c",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<div>\n<aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">\n<div class=\"d-flex fd-column fw-nowrap\">\n<div class=\"d-flex fw-nowrap\">\n<div class=\"flex--item wmn0 fl1 lh-lg\">\n<div class=\"flex--item fl1 lh-lg\">\n<div>\n<b>Closed.</b> This question is <a href=\"/help/closed-questions\">off-topic</a>. It is not currently accepting answers.\n                                \n                            </div>\n</div>\n</div>\n</div>\n</div>\n<hr class=\"my12 outline-none baw0 bb bc-blue-400\"/>\n<div class=\"fw-nowrap fc-black-500\">\n<div class=\"d-flex fd-column lh-md\">\n<div class=\"mb0 d-flex\">\n<div class=\"flex--item mr8\">\n<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" height=\"18\" viewbox=\"0 0 18 18\" width=\"18\"><path d=\"M15 6.38A6.5 6.5 0 0 0 7.78.04h-.02A6.5 6.5 0 0 0 2.05 5.6a6.3 6.3 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.3 6.3 0 0 0 15 6.37M4.03 5.85A4.5 4.5 0 0 1 8 2.02a4.5 4.5 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.3 4.3 0 0 1-1.64-3.94M10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2z\"></path></svg>\n</div>\n<p> Questions on <b>software development</b> are off-topic here, but can be asked on <a href=\"http://stackoverflow.com/about\">Stack Overflow</a>.</p>\n</div>\n<div class=\"mb0 mt6 d-flex\">\n<p class=\"ml24 pl2\">Closed <span class=\"relativetime\" title=\"2021-09-13 23:50:44Z\">3 years ago</span>.</p>\n</div>\n<div class=\"ml24 pl2\">\n</div>\n</div>\n</div>\n<div class=\"mt24 d-flex gsx gs8\">\n<a class=\"s-btn s-btn__outlined flex--item js-post-notice-edit-post\" href=\"/posts/19745/edit\">\n                        Improve this question\n                    </a>\n</div>\n</aside>\n</div>\n<p>I'm implementing a function which is going to perform some time-consuming task, and I'd like to hack the benchmarking part a bit by changing the variable indicating the CPU time my function has started executing. Here is the code:</p>\n<pre><code>#if defined(_MSC_VER)\n#pragma intrinsic(__rdtsc)\n#else\nstatic __inline__ uint64_t __rdtsc() {\n    uint32_t hi, lo;\n    __asm__ volatile\n        (\n        \"rdtsc\"\n        : \"=a\"(lo), \"=d\"(hi)\n        );\n    return (((uint64_t) hi) &lt;&lt; 32) | ((uint64_t) lo);\n}\n#endif\n\n\nint arg = 42;\n\nuint64_t start_tSC, end_tSC;\n\n// Get total clock cycles for func\nstart_tSC = __rdtsc();\nfunc(arg);\nend_tSC = __rdtsc();\ndouble func_tSC = end_tSC - start_tSC;  // &lt;---- let's minimize this\n</code></pre>\n<p>Basically, I want to set <code>start_tSC</code> to the current clock time-stamp right before all tasks have been completed <strong>within <code>func</code></strong>.</p>\n<pre><code>void func(int arg) {\n    perform_tasks(arg);\n    /* black magic that resets start_tSC in the CALLER */\n}\n</code></pre>\n<p>Since local variables and function parameters tend to be stored on the stack, can I somehow deduce where <code>start_tSC</code> resides by looking at the address of <code>arg</code>?</p>\n<hr/>\n<p><em>System information</em></p>\n<pre><code>~ $ uname -a\nLinux hive30 4.15.0-36-generic #39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n<p>Also note that I have access to the target system as a normal user, which means I can build the executable as well as view the resulting assembly code via <code>gcc -S</code>. Here is some <a href=\"https://www.7-cpu.com/cpu/Haswell.html\" rel=\"nofollow noreferrer\">hardware information</a>, if relevant.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "320",
    "tags": [
        "x86",
        "linux",
        "c",
        "stack",
        "stack-variables"
    ],
    "user": "nalzok",
    "time": "3 years ago",
    "comments": [
        {
            "user": "user3629249",
            "text": "<span class=\"comment-copy\">please do not cross post your questions</span>",
            "time": null
        },
        {
            "user": "user202729",
            "text": "<span class=\"comment-copy\">Not very related to reverse engineering.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Edit:<br/>\nTo make the offset irrelevent to your stack frame size, i'd start by reading the address of the caller's stack frame pointer (the caller's ebp, located right before your return address, at <code>DWORD PTR [ebp]</code>).</p>\n<p>You cannot assume the offset of <code>start_tSC</code> doesn't change as your code can be run with different versions of benchmarks.</p>\n<p>Before explaining the idea, it operates under the assumption that the call for [<code>GetSystemTimeAsFileTime</code>, <code>__rdtsc</code>, <code>GetTickCount</code> or any other function ] is performed right before the call for your function. The justification for this assumption is that when preforming benchmarks, precision is essential and timing tend to wrap the tested code as close as possible.</p>\n<p>The basic idea is to find the variable that contains the value that returns from the timing function.<br/>\nYou can read the return address from the memory (at <code>DWORD PTR [ebp + 4]</code>) and try to disassemble the code prior to your function until you find a call instruction (skip the call to your own function as the return address points right after this call). the instruction after the call should look something like:</p>\n<pre><code>MOV [ebp - offset], eax\n</code></pre>\n<p>and you can deduce the offset of <code>start_tSC</code> from here.</p>\n<p>Do note that disassemble code backwards is not straightforward as x86 code doesn't have constant length opcodes.<br/>\nAlso note that this solution requires more code, expanding the function size by (probably) a lot.</p>\n</div>",
            "votes": "0",
            "user": null,
            "time": "Dec 28, 2018 at 18:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Chris Stratton",
                    "text": "<span class=\"comment-copy\">You seem to have missed the point of the question with this proposal to modify the code of the caller.  The point is to modify the <i>behavior</i> of the <i>existing</i> calling code, without actually changing that code.</span>",
                    "time": null
                },
                {
                    "user": "user22970",
                    "text": "<span class=\"comment-copy\">oh, yea, i see it now. my bad. i really misunderstood the question here</span>",
                    "time": null
                }
            ]
        }
    ]
}