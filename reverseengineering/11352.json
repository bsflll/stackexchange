{
    "title": "Locate compressed section of executable",
    "link": "https://reverseengineering.stackexchange.com/questions/11352/locate-compressed-section-of-executable",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am playing with <a href=\"http://clinical.netforum.healthcare.philips.com/us_en/Explore/Clinical-News/MRI/Philips-DICOM-Viewer-download-version-R30-SP3\" rel=\"nofollow noreferrer\">Philips DICOM Viewer - download version R3.0 SP3</a>. This viewer can display DICOM information (press <code>F9</code>). Since the displayed strings are not stored in the DICOM file itself, I suspect they are stored somewhere in the binary (standalone binary, no extra DLL loaded):</p>\n<p><a href=\"https://i.sstatic.net/nLfPF.png\" rel=\"nofollow noreferrer\"><img alt=\"Screenshot of DICOM Information\" src=\"https://i.sstatic.net/nLfPF.png\"/></a></p>\n<p>However I could not find it using <code>strings</code> and or:</p>\n<pre><code>$ binwalk -M -X -e PmsDView.exe\n</code></pre>\n<p>Followed by:</p>\n<pre><code>$ grep -r Manufacturer _PmsDView.exe.extracted\n</code></pre>\n<p>and</p>\n<pre><code>$ find _PmsDView.exe.extracted/ -exec strings -n 12 -e l {} \\; | grep Manufacturer\n</code></pre>\n<p>I picked <code>Manufacturer</code> since this is one of the longer string. Also I only used <code>-e s</code> and <code>-e l</code> as they make the more sense (eg: <code>strings -e l PmsDView.exe</code> and <code>strings -e s PmsDView.exe</code>). I've run <code>-e b</code>, <code>-e B</code> and <code>-e L</code> but they did not return anything.</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "127",
    "tags": [
        "binary-analysis",
        "encryption"
    ],
    "user": "tibar",
    "time": "Nov 19, 2015 at 8:15",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Have you tried searching for <code>Manufacturer</code> as a wide-character Unicode string?</span>",
            "time": null
        },
        {
            "user": "Neitsa",
            "text": "<span class=\"comment-copy\">Also, you could check the imported DLLs (recursively) and see if one of them contain one of the searched strings. Another solution is to scan the whole process address space with a debugger ( I think process explorer can also do that). As stated by @JasonGeffner, search for char or wchar strings. If you still can't find it then it's probably concealed in some way.</span>",
            "time": null
        }
    ],
    "answers_data": []
}