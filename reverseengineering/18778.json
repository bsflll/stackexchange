{
    "title": "How to find the executable code of the native method in the library * .so? (Android)",
    "link": "https://reverseengineering.stackexchange.com/questions/18778/how-to-find-the-executable-code-of-the-native-method-in-the-library-so-andr",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm doing reverse engineering of a mobile application for android and I had a question how to find the executable code of the native method in the library * .so. From the code of the code, the native method <code>void method(int i)</code> is called. But it is not in the list of exported functions in the library!</p>\n<p>I made a test project. The fact is that when we declare the native method in Java code, we write this:</p>\n<pre><code>extern \"C\"\nJNIEXPORT jstring\nJNICALL\nJava_com_test_MainActivity_stringFromJNI(\n        JNIEnv *env,\n        jobject /* this */) {\n    std::string hello = \"Hello from C++\";\n    return env-&gt;NewStringUTF(hello.c_str());\n}\n</code></pre>\n<p>in this case the method will be in the list of exported library methods.\nI do not understand how to define the native function so that it is not visible in the list of exported functions?\nAnd how to look for the source code for such functions?</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "800",
    "tags": [
        "ida",
        "decompilation",
        "android",
        "java",
        "libraries"
    ],
    "user": "Sergey Unk",
    "time": "Jul 16, 2018 at 14:58",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are two different ways to define JNI methods. The easiest way is to just give the functions special names like in the examples you've seen. </p>\n<p>However, this is not necessary. JNI methods can also be registered dynamically with the <code>RegisterNatives</code> method. This is typically done in a function named <code>JNI_OnLoad</code>, which will automatically be called when the library is loaded. This lets you basically just pass a table of function pointers to the VM, so the methods don't even have to appear in the symbol table anywhere. In fact, you could theoretically write out the code at runtime and pass a pointer to that.</p>\n</div>",
            "votes": "2",
            "user": "Antimony",
            "time": "Jul 13, 2018 at 4:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sergey Unk",
                    "text": "<span class=\"comment-copy\">It is very interesting! Do you have examples of source codes for dynamic method registration? And how specifically to find the executable code of these methods? By pointers to the address?</span>",
                    "time": null
                },
                {
                    "user": "realtebo",
                    "text": "<span class=\"comment-copy\">Wow. I am interested, too</span>",
                    "time": null
                }
            ]
        }
    ]
}