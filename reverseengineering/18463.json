{
    "title": "How to simplify C++ standard template library in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/18463/how-to-simplify-c-standard-template-library-in-ida",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've a X64 DLL file which uses C++ standard library heavily. I've loaded the PDB symbol file in IDA and all the subroutines names <code>sub_xxyz</code> changes to <code>std::xyz</code>, which is as expected. But there are many subroutines, for example one name is like <code>std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void *Dst, _BYTE *a2, __int64 a3)</code>. Too long, isn't it ;)</p>\n<p>Under the hood, all these subroutines mainly do some memory manipulation with <code>malloc()</code>, <code>memcpy()</code>, <code>memmove()</code> etc. Hence my question, Can I simplify those subroutines in IDA by any means?</p>\n</div>",
    "votes": "5",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "Biswapriyo",
    "time": "Jun 5, 2018 at 19:19",
    "comments": [
        {
            "user": "Sprite",
            "text": "<span class=\"comment-copy\">This plugin may be helpful to you. <a href=\"https://github.com/zyantific/REtypedef\" rel=\"nofollow noreferrer\">github.com/zyantific/REtypedef</a></span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although this function name is indeed quite long, there's no easy way to simplify it nor is it too difficult to understand once you gain decent C++ development experience, using std especially. The TLDR answer is that this is a constructor for a <a href=\"http://www.cplusplus.com/reference/string/string/\" rel=\"nofollow noreferrer\"><code>std::string</code></a> object (specifically this looks like the <a href=\"http://www.cplusplus.com/reference/string/string/string/\" rel=\"nofollow noreferrer\">substring(3) constructor</a>, but I'm not 100% sure).</p>\n<p>If you visit the <a href=\"http://www.cplusplus.com/reference/string/string/\" rel=\"nofollow noreferrer\"><code>std::string</code> reference page</a>, you'll see this is the definition for <code>std::string</code>:</p>\n<pre><code>typedef std::basic_string&lt;char&gt; string; \n</code></pre>\n<p>The <code>std::string</code> class is being defined using the <code>std::basic_string</code> class template, which has three template parameters:</p>\n<ol>\n<li>the character type used for the string object.</li>\n<li>an object to control some string traits.</li>\n<li>The allocator used to actually allocate the string buffers for the class.</li>\n</ol>\n<p>In the <code>std::string</code> case, however, only the first template parameter is provided - the other two are the default ones defined based on the first template parameter (char), and although they can be replaced with different or more complex traits or allocators, this isn't the case for the <code>std::string</code> class. </p>\n<p>Although the typedef string is pretty simple and straightforward thanks to the default templates parameters being unspecified, when the object is built and actually defined by the compiler the full definition is used, which adds a lot of boilerplate definitions.</p>\n<p>If we split it up to it's parts, we'll see <code>std::basic_string</code> is being used and three template parameters are specified. As mentioned for the <code>std::string</code>, the second (<code>std::char_traits&lt;char&gt;</code>) and third (<code>std::allocator&lt;char&gt;</code>) are derived by the first and are both templates by themselves, receiving the same template parameter <code>std::basic_string</code> got (<code>char</code>).</p>\n<p>After the class definition, the two colons indicate a definition of an object under the class namespace:</p>\n<pre><code>::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void *Dst, _BYTE *a2, __int64 a3)\n</code></pre>\n<p>We can easily see this is a function that has the same name as the class itself, which is the known way to define a constructor. </p>\n<p>Lastly, as with every function we have the parameters this function accepts inside the parentheses:</p>\n<pre><code>void *Dst, _BYTE *a2, __int64 a3\n</code></pre>\n<p>To simplify the full definition back to <code>std::basic_string&lt;char&gt;</code>, one would need to hold the default template parameters for all std template classes, and strip the ones that are recognized as the default ones. Although this is not a very difficult task, it seems a little redundant to me. You are obviously encouraged to either develop such a plugin yourself or suggest the feature improvement to the IDA development team.</p>\n</div>",
            "votes": "4",
            "user": "NirIzr",
            "time": "Jun 5, 2018 at 21:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Biswapriyo The last paragraph discusses the task of actually simplifying those names but as mentioned I personally find it redundant.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Nirlzr: may be a worthwhile endeavor parsing the for <code>typedef</code> occurrences that are specializations of the standard containers and use an IDAPython script or plugin to make the names more readable. But yeah, it looks kind of like a tedious task. It'd probably require some proper C++ parser like <code>libclang</code> in the first place.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@0xC0000022L Not sure about the c++ parsing, because these function names are not really free strings but compiler-mangled names. There are slight variations between compilers (which IDA already support, obviously) but basically I think it is structured enough for you to not need a actual C++ parsing, at least on the plugin's side. I believe you could also scrape some DBs or websites to get the default values without doing any c++ parsing either. YMMV and I didn't go into details because I don't thing anybody should be wasting their time on that, tbh.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Biswapriyo I also went into details in here for anyone that is not familiar with the std and has trouble reading the function names. Goal was not to explain that one name you provided but show how std/template names are built and how they should be interpreted by the unfamiliar reader.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@NirIzr: I was referring to the part where one sifts through the STL headers, looking for <code>typedef</code> instances that look akin to <code>typedef basic_string&lt;wchar_t&gt; wstring</code> for any number of container classes. Because that's where the short names come from (<code>std::string</code>, <code>std::wstring</code> etc) and where the defaults will be known (provided you can parse C++). With libclang it's really a lot easier than it used to be (e.g. trying to parse the XML AST output from GCC).</span>",
                    "time": null
                }
            ]
        }
    ]
}