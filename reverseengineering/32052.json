{
    "title": "How can I find which JNI library implements a java native method at runtime for Android applications?",
    "link": "https://reverseengineering.stackexchange.com/questions/32052/how-can-i-find-which-jni-library-implements-a-java-native-method-at-runtime-for",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am doing security research, my target application includes some JNI libraries which implements some native java methods I am interested in. This app is obfuscated, I can't directly find the library by unpacking the APK archive.</p>\n<p>Searching on the Web I found I can use ART's <a href=\"https://cs.android.com/android/platform/superproject/main/+/refs/heads/main:art/runtime/native_bridge_art_interface.cc;drc=e759826803f67ead26354fbcaf746ec6d74e178f;l=56\" rel=\"nofollow noreferrer\">GetNativeMethods()</a> from a JNI function, then use the native method's JNI pointer to find the shared library where it is located. But ART is a private API and latest Android versions block the loading of <code>libart.so</code>, I can't use it.</p>\n<p>I am using Xposed to instrument the target application at runtime.</p>\n</div>",
    "votes": "0",
    "answers": 0,
    "views": "182",
    "tags": [
        "android",
        "java"
    ],
    "user": "hldev",
    "time": "Jul 12, 2023 at 17:04",
    "comments": [
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">I know only two way to access a native method via JNI: 1. the method is exported by the library 2. using the JNI method <code>RegisterNatives</code> <a href=\"https://www.baeldung.com/jni-registernatives\" rel=\"nofollow noreferrer\">baeldung.com/jni-registernatives</a></span>",
            "time": null
        },
        {
            "user": "hldev",
            "text": "<span class=\"comment-copy\">@Robert so I should somehow hook into RegisterNatives to find the native methods name mapping? Yes I guess they use that to be able to obfuscated the symbols in the JNI library.</span>",
            "time": null
        },
        {
            "user": "Robert",
            "text": "<span class=\"comment-copy\">Yes, but finding this method isn't that easy. As you can see on the linked web site <code>RegisterNatives</code> is not an exported method but a method that belongs to a struct. So you first have to find the struct then calculate the offset to the method pointer in the struct to get the final pointer you can hook.</span>",
            "time": null
        }
    ],
    "answers_data": []
}