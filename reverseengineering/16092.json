{
    "title": "How can I identify how this string is being encoded so I can replicate it?",
    "link": "https://reverseengineering.stackexchange.com/questions/16092/how-can-i-identify-how-this-string-is-being-encoded-so-i-can-replicate-it",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A friends company uses an old VB6 application to generate encoded strings to then use in their also old and out of date database system.</p>\n<p>They have the application running in standalone mode so I can test inputs and have it generate an encoded output, but they wanted to migrate it into a web based system to build the request string to prevent someone from having to access the old desktop locally.</p>\n<pre><code>Input: AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\nOutput: ~^}]|\\sSrRqQpPwWvVuUtTkKjJiIhHoOnNmMlLcCbBaA`@gGfFeE\n\nInput: 1234567890\nOutput: 4=&lt;3210765\n\nInput: 1\nOutput: 5\n\nInput: 12\nOutput: 65\n\nInput: 123\nOutput: 765\n</code></pre>\n<p>Any ideas on where I can start to figure this out? It looks like it does a single character encode and then reverses the string.</p>\n<p>EDIT: Gets a little more complex it seems.... If the input cross into a new column it appears to subtract 4?</p>\n<pre><code>Input: ?\nOutput: ;\n\nInput: 789:;&lt;=&gt;?\nOutput: ;:98?&gt;=&lt;3\n</code></pre>\n<p>Looks like maybe the application is using multiple definitions? Or doing some type of math range to determine to add or subtract?</p>\n<p><a href=\"https://i.sstatic.net/wJJPU.gif\" rel=\"nofollow noreferrer\"><img alt=\"ASCII Table\" src=\"https://i.sstatic.net/wJJPU.gif\"/></a></p>\n<p>Decompiled Code that makes very little sense to me.</p>\n<pre><code>Private Sub CommandButton_Click() '408C90\n  Dim var_44 As TextBox\n  Dim var_48 As TextBox\n  loc_00408CB5: var_8 = &amp;H4010C0\n  loc_00408D16: Set var_44 = Me\n  loc_00408D25: var_28 = password.Text\n  loc_00408D6D: Set var_44 = Len(var_28)\n  loc_00408D7C: var_28 = password.Text\n  loc_00408DBE: \n  loc_00408DC5: If Len(var_28) &lt; 0 Then GoTo loc_00408EDA\n  loc_00408DE5: var_54 = Me\n  loc_00408DF2: var_64 = 1\n  loc_00408DF9: var_6C = 2\n  loc_00408E00: var_44 = 0\n  loc_00408E07: var_5C = 9\n  loc_00408E1C: var_28 = CStr(Mid$(vbObject, Len(var_28), 1))\n  loc_00408E34: call __vbaStrI2(Asc(var_28) xor eax, Me, var_28, var_44, 0040856Ch, 000000A0h, 000000A0h, 000000A0h, 000000A0h)\n  loc_00408E70: var_84 = var_24\n  loc_00408E76: var_8C = 8\n  loc_00408E81: Var_Ret_1 = CLng(__vbaStrI2(Asc(var_28) xor eax, Me, var_28, var_44, 0040856Ch, 000000A0h, 000000A0h, 000000A0h, 000000A0h))\n  loc_00408E8C: var_5C = Chr(Var_Ret_1)\n  loc_00408EA1: var_6C = var_24 &amp; var_24\n  loc_00408EC5: eax = var_5C Or FFFFFFFFh\n  loc_00408ECB: var_5C Or FFFFFFFFh = var_5C Or FFFFFFFFh + Len(var_28)\n  loc_00408ED5: GoTo loc_00408DBE\n  loc_00408EDA: \n  loc_00408EF0: var_A0 = vbEmpty\n  loc_00408F04: Set var_44 = Me\n  loc_00408F0F: var_28 = ip.Text\n  loc_00408F3B: Set var_48 = var_28\n  loc_00408F4A: var_30 = User.Text\n  loc_00408FC0: var_40 = \"http://\" &amp; var_28 &amp; \"/login?name=\" &amp; var_30 &amp; \"&amp;password=\" &amp; var_24\n  loc_00408FCA: Me.MousePointer = var_40\n  loc_0040902F: GoTo loc_00409081\n  loc_00409080: Exit Sub\n  loc_00409081: \n  loc_00409091: Exit Sub\nEnd Sub\n</code></pre>\n</div>",
    "votes": "2",
    "answers": 2,
    "views": "573",
    "tags": [
        "encryption",
        "encodings",
        "strings",
        "visual-basic",
        "vb6"
    ],
    "user": "Landmine",
    "time": "Mar 9, 2020 at 18:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Edit</strong>: <em>The encryption is Bitwise XOR with the key 0x04 (see the bottom of this answer)</em> </p>\n<p>The application uses a simple <a href=\"https://en.wikipedia.org/wiki/Substitution_cipher\" rel=\"nofollow noreferrer\">Substitution Cipher</a> (Or, to be exact <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" rel=\"nofollow noreferrer\">Caesar Cipher</a> with shift 4) and then perform reverse() on the function.  </p>\n<p>We can domnstrate it using python's <a href=\"https://www.tutorialspoint.com/python/string_maketrans.htm\" rel=\"nofollow noreferrer\">maketrans</a> method:</p>\n<blockquote>\n<p>The method maketrans() returns a translation table that maps each\n  character in the intabstring into the character at the same position\n  in the outtab string. Then this table is passed to the translate()\n  function.</p>\n</blockquote>\n<p>Here's a quick script for example that proves this is the encryption used:</p>\n<pre><code>from string import maketrans\n\n# Define list of characters\nchars = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890\"  \n\n# Perform Caesar Cipher on our string\ncipher_chars = \"\"\nfor c in chars:\n    cipher_chars+= chr(ord(c)+4)\n\n# Create a translation table\ntransition = maketrans(chars, cipher_chars)\n\n# We use \"[::-1]\" to reverse the string\ndef encrypt (plaintext):\n    return plaintext.translate(transition)[::-1] \n</code></pre>\n<p>Let's try it:</p>\n<pre><code>encrypt(\"1\")\n'5'\n\nencrypt (\"12\")\n'65'\n\nencrypt(\"123\")\n'765'\n</code></pre>\n<p>And it also works vise versa:</p>\n<pre><code>encrypt(\"65\")\n'12'\n\nencrypt(\"765\")\n'123'\n</code></pre>\n<h2>Edit:</h2>\n<p>According to the decompiled code you've added and @Ilmari's great comment and response which was correctly pointed out the following finding: the encryption is <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\" rel=\"nofollow noreferrer\">XOR</a> with \"0x04\".</p>\n<p>Here's the updated <code>encrypt</code> function:</p>\n<pre><code>def encrypt (plaintext):\n    return ''.join(chr(ord(c) ^ 4) for c in plaintext)[::-1]\n</code></pre>\n</div>",
            "votes": "6",
            "user": "Megabeets",
            "time": "Aug 16, 2017 at 12:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Landmine",
                    "text": "<span class=\"comment-copy\">Interesting. That's pretty dang cool. I was thinking it may have been an ASCII offset, looked like it was 4 higher for each ASCII value and then reversed.</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Correct, it is called Caesar Cipher, I edited the post accordingly.</span>",
                    "time": null
                },
                {
                    "user": "Landmine",
                    "text": "<span class=\"comment-copy\">It is amazing what people know and share. Thank you so much.</span>",
                    "time": null
                },
                {
                    "user": "Landmine",
                    "text": "<span class=\"comment-copy\">Updated the original question with new findings, perhaps you could share some more of your knowledge with me? Thank you again.</span>",
                    "time": null
                },
                {
                    "user": "Ilmari Karonen",
                    "text": "<span class=\"comment-copy\">Unfortunately, this doesn't seem to fully match the OP's test strings. The actual byte mapping seems to be bitwise XOR with the constant 4, rather than adding 4 to the ASCII code.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on your examples, it looks like the strings are reversed and each byte is <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\" rel=\"nofollow noreferrer\">XORed</a> with the byte 4.  Here's a quick Perl one-liner to demonstrate this:</p>\n<pre><code>perl -lne 'print reverse($_) ^ (\"\\x04\" x length($_))'\n</code></pre>\n<p>and what happens when you apply it to your test strings:</p>\n<pre><code>$ cat test.txt\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890\n1\n2\n123\n?\n789:;&lt;=&gt;?\n\n$ perl -lne 'print reverse($_) ^ (\"\\x04\" x length($_))' test.txt \n~^}]|\\sSrRqQpPwWvVuUtTkKjJiIhHoOnNmMlLcCbBaA`@gGfFeE\n4=&lt;3210765\n5\n6\n765\n;\n;:98?&gt;=&lt;3\n</code></pre>\n<p>The fact that the input string gets reversed is pretty obvious if you compare the encryptions of <code>1</code> → <code>5</code> and <code>2</code> → <code>6</code> with <code>123</code> → <code>765</code>.</p>\n<p>After figuring that out, and guessing that the rest is just a bytewise substitution cipher, you can figure out the pattern to the substitutions by looking at the encryptions of the letters.  Specifically, we can see that (ignoring the reversal), the letters:</p>\n<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ\n</code></pre>\n<p>encrypt to:</p>\n<pre><code>EFG@ABCLMNOHIJKTUVWPQRS\\]^\n</code></pre>\n<p>Noting that <code>@</code> comes right before <code>A</code> in ASCII (and <code>`</code> likewise comes right before <code>a</code>), we can see that the encrypted alphabet is shuffled around in chunks of 4 letters:</p>\n<pre><code>Input:  ABC DEFG HIJK LMNO PQRS TUVW XYZ\nOutput: EFG @ABC LMNO HIJK TUVW PQRS \\]^\n</code></pre>\n<p>We can also see that the mapping is self-inverse: <code>HIJK</code> encrypts to <code>LMNO</code> while <code>LMNO</code> encrypts back to <code>HIJK</code>.  This, along with the regular pattern of letter position swaps, should be a pretty strong hint that we might be dealing with bitwise XOR.  Comparing the ASCII codes of any pair of plaintext/ciphertext letters is then sufficient to reveal the constant key byte (which we can then test on other known input strings to confirm our guess).</p>\n</div>",
            "votes": "4",
            "user": "Ilmari Karonen",
            "time": "Aug 16, 2017 at 10:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}