{
    "title": "Help reverse engineering a CRC",
    "link": "https://reverseengineering.stackexchange.com/questions/32093/help-reverse-engineering-a-crc",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Evening all</p>\n<p>Been trying to reverse-engineer the CRC for this data, and no clue what CRC is being used. What we think is the first 6 bytes are the data, the 7th is a sequence number, and the 8th the actual CRC.</p>\n<p>So:\nData: 277F0000FFFF Sequence/counter?: 00  CRC: 61</p>\n<p>Sample here:</p>\n<pre><code>277F0000FFFF0061\n277F0000FFFF0104\n277F0000FFFF024E\n277F0000FFFF032B\n277F0000FFFF043F\n277F0000FFFF055A\n277F0000FFFF0610\n277F0000FFFF0775\n277F0000FFFF0838\n277F0000FFFF095D\n277F0000FFFF0A17\n277F0000FFFF0B72\n277F0000FFFF0C66\n277F0000FFFF0D03\n277F0000FFFF0E49\n277F0000FFFF0F2C\n277F0000FFFF1036\n277F0000FFFF1153\n277F0000FFFF1219\n277F0000FFFF137C\n277F0000FFFF1468\n277F0000FFFF150D\n277F0000FFFF1647\n277F0000FFFF1722\n277F0000FFFF186F\n277F0000FFFF190A\n277F0000FFFF1A40\n277F0000FFFF1B25\n277F0000FFFF1C31\n277F0000FFFF1D54\n277F0000FFFF1E1E\n277F0000FFFF1F7B\n277F0000FFFF202A\n277F0000FFFF214F\n277F0000FFFF2205\n277F0000FFFF2360\n277F0000FFFF2474\n277F0000FFFF2511\n277F0000FFFF265B\n277F0000FFFF273E\n277F0000FFFF2873\n277F0000FFFF2916\n277F0000FFFF2A5C\n277F0000FFFF2B39\n277F0000FFFF2C2D\n</code></pre>\n<p>Tried reveng both with and without the counter, but no clue and have no idea what to do next. Any suggestions please?</p>\n<blockquote>\n<p>REVENG -w 8 -s 277F0000FFFF0061  277F0000FFFF0104 277F0000FFFF024E 277F0000FFFF1219\nREVENG: no models found</p>\n</blockquote>\n<blockquote>\n<p>REVENG -w 8 -s 277F0000FFFF61  277F0000FFFF04 277F0000FFFF4E 277F0000FFFF19\nREVENG: no models found</p>\n</blockquote>\n</div>",
    "votes": "2",
    "answers": 1,
    "views": "259",
    "tags": [
        "crc"
    ],
    "user": "Andy",
    "time": "Jul 23, 2023 at 21:20",
    "comments": [
        {
            "user": "Deadbeef",
            "text": "<span class=\"comment-copy\">I may be wrong, but these look like canbus messages to me. Please provide more details about this: 1. From what application is it? 2. Do you have a firmware dump? 3. Some more relevant information about this.</span>",
            "time": null
        },
        {
            "user": "Andy",
            "text": "<span class=\"comment-copy\">This if from a Claas tractor, I believe, and yes CANBUS. No firmware dump unfortunately.  I plan to grab my own traces, just in case there's any more info I can find, these were provided to me however as being exactly that. I have asked Claas for assistance in encoding this \"Open Steering Interface\" protocol, but no response as yet.  I'm suspecting their interface is not quite as \"open\" as they might otherwise claim..</span>",
            "time": null
        },
        {
            "user": "C0DER",
            "text": "<span class=\"comment-copy\">Hello Andy, would you please include the CAN identifiers as well? I mean CAN identifers plus the 8 payload bytes.</span>",
            "time": null
        },
        {
            "user": "Andy",
            "text": "<span class=\"comment-copy\">Thanks, will see if I have them - I was given this trace sanitised, but it's on my to-do list to gather some myself with full IDs</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From this dataset looks like the CRC <code>init</code> value changes - its in a group of 8 different values with <code>poly</code>=0xc5</p>\n<pre><code>$ reveng -w 8 -s 277F0000FFFF024E 277F0000FFFF055A 277F0000FFFF0B72 277F0000FFFF0C66\nwidth=8  poly=0xc5  init=0xd4  refin=false  refout=false  xorout=0x00  check=0x42  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF2205 277F0000FFFF2511 277F0000FFFF2B39 277F0000FFFF2C2D\nwidth=8  poly=0xc5  init=0x5e  refin=false  refout=false  xorout=0x00  check=0x40  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF202A 277F0000FFFF273E 277F0000FFFF2916\nwidth=8  poly=0xc5  init=0x1d  refin=false  refout=false  xorout=0x00  check=0x2b  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF2360 277F0000FFFF2474 277F0000FFFF2A5C\nwidth=8  poly=0xc5  init=0x9b  refin=false  refout=false  xorout=0x00  check=0xfd  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF214F 277F0000FFFF265B 277F0000FFFF2873\nwidth=8  poly=0xc5  init=0xd8  refin=false  refout=false  xorout=0x00  check=0x96  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF0061 277F0000FFFF0775 277F0000FFFF095D 277F0000FFFF0E49 277F0000FFFF1219 277F0000FFFF150D 277F0000FFFF1B25 277F0000FFFF1C31\nwidth=8  poly=0xc5  init=0x97  refin=false  refout=false  xorout=0x00  check=0x29  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF032B 277F0000FFFF043F 277F0000FFFF0A17 277F0000FFFF0D03\nwidth=8  poly=0xc5  init=0x11  refin=false  refout=false  xorout=0x00  check=0xff  residue=0x00  name=(none)\n$ reveng -w 8 -s 277F0000FFFF0104 277F0000FFFF0610 277F0000FFFF0838 277F0000FFFF0F2C\nwidth=8  poly=0xc5  init=0x52  refin=false  refout=false  xorout=0x00  check=0x94  residue=0x00  name=(none)\n</code></pre>\n<p>Whats confusing to me is this property still holds for all available value in this dataset. From <a href=\"https://en.wikipedia.org/wiki/Cyclic_redundancy_check#Data_integrity\" rel=\"nofollow noreferrer\">wikipedia</a>\n<a href=\"https://i.sstatic.net/jOCXH.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.sstatic.net/jOCXH.png\"/></a></p>\n<p>Example</p>\n<pre class=\"lang-py prettyprint-override\"><code>In [26]: tests = ['277F0000FFFF0061', '277F0000FFFF0104', '277F0000FFFF024E', '277F0000FFFF032B', '277F0000FFFF043F', '277F0000FFFF055A', '277F0000FFFF0610', '277F0000FFFF0775', '\n    ...: 277F0000FFFF0838', '277F0000FFFF095D', '277F0000FFFF0A17', '277F0000FFFF0B72', '277F0000FFFF0C66', '277F0000FFFF0D03', '277F0000FFFF0E49', '277F0000FFFF0F2C', '277F0000FF\n    ...: FF1036', '277F0000FFFF1153', '277F0000FFFF1219', '277F0000FFFF137C', '277F0000FFFF1468', '277F0000FFFF150D', '277F0000FFFF1647', '277F0000FFFF1722', '277F0000FFFF186F', '\n    ...: 277F0000FFFF190A', '277F0000FFFF1A40', '277F0000FFFF1B25', '277F0000FFFF1C31', '277F0000FFFF1D54', '277F0000FFFF1E1E', '277F0000FFFF1F7B', '277F0000FFFF202A', '277F0000FF\n    ...: FF214F', '277F0000FFFF2205', '277F0000FFFF2360', '277F0000FFFF2474', '277F0000FFFF2511', '277F0000FFFF265B', '277F0000FFFF273E', '277F0000FFFF2873', '277F0000FFFF2916', '\n    ...: 277F0000FFFF2A5C', '277F0000FFFF2B39', '277F0000FFFF2C2D']\n\nIn [27]: b = [bytes.fromhex(i) for i in tests]\n\nIn [28]: xor(xor(b[0], b[1]), b[8]) == b[9]\nOut[28]: True\n</code></pre>\n</div>",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jul 24, 2023 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Andy",
                    "text": "<span class=\"comment-copy\">I wonder if the init comes from info in a different PGN perhaps?  I'm going to try and get my own trace, perhaps this one was filtered before I received it, this is all I have:  <a href=\"https://pastebin.com/Z2fSNfsF\" rel=\"nofollow noreferrer\">pastebin.com/Z2fSNfsF</a> and there's this one as well from the same machine: <a href=\"https://pastebin.com/bHRe2PJw\" rel=\"nofollow noreferrer\">pastebin.com/bHRe2PJw</a></span>",
                    "time": null
                }
            ]
        }
    ]
}