{
    "title": "reversing pyinstaller compiled exe",
    "link": "https://reverseengineering.stackexchange.com/questions/32503/reversing-pyinstaller-compiled-exe",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>i created some compiled binaries using different languages and tried to understand them using x64dbg, the compiled binaries produced by the c language/gcc compiler were pretty easy to understand, then i compiled a simple hello world program in python using pyinstaller, the output exe file was larger and was messier, i could not understand any of  the binary code in x64dbg, can anyone help me understand it? or provide some resources?, i am learning reverse engineering by compiling my own code and reversing it.</p>\n</div>",
    "votes": "1",
    "answers": 2,
    "views": "320",
    "tags": [
        "x64dbg"
    ],
    "user": "Praveen",
    "time": "Nov 17, 2023 at 12:36",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "<span class=\"comment-copy\">Welcome to RE.SE. There are numerous questions about the very same topic. Please also have a look <a href=\"https://reverseengineering.stackexchange.com/search?q=pyinstaller\">at them</a>.</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On macOS at least, the Python modules are prepended as zlib streams to the executable. I recommend you give a try at <a href=\"https://github.com/extremecoders-re/pyinstxtractor\" rel=\"nofollow noreferrer\">pyinstxtractor</a> — using a recent version of Python — to attempt to decompress the zlib streams as <code>.pyc</code> files then a bytecode decompiler like <a href=\"https://github.com/zrax/pycdc\" rel=\"nofollow noreferrer\">pycdc</a>.</p>\n</div>",
            "votes": "2",
            "user": "Ninja Inc",
            "time": "Nov 17, 2023 at 13:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Praveen",
                    "text": "<span class=\"comment-copy\">i want to understand the binary/asm and what it does, not how to decompile it, thank you.</span>",
                    "time": null
                },
                {
                    "user": "masterX244",
                    "text": "<span class=\"comment-copy\">@Praveen the assembler/binary code is only the loader and python interpreter. your own code is stored the pyc stuff glued afterwards.</span>",
                    "time": null
                },
                {
                    "user": "Praveen",
                    "text": "<span class=\"comment-copy\">@masterX244 i cannot find the .pyc, i compiled it as a single exe</span>",
                    "time": null
                },
                {
                    "user": "masterX244",
                    "text": "<span class=\"comment-copy\">@Praveen those files are glued onto the exe, thats what the answer says where this comment is chained off</span>",
                    "time": null
                },
                {
                    "user": "Praveen",
                    "text": "<span class=\"comment-copy\">@masterX244 yea got that, but how do i know which is which?, like which part of the exe is the file?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PyInstaller binaries are basically self extracting archives that contain compiled Python code for the program and its dependencies.</p>\n<p>The extraction code and also some of these libraries may be native binary files.</p>\n<p>However, pure Python code does not compile into native assembly but into an IR that the Python runtime, which is included in the package, can run. As mentioned, these files have a <code>.pyc</code> extension.</p>\n<p>This is <em>marshalled</em> code, in Python terms, and it can be <em>un-marshalled</em> into its IR representation using the builtin <code>marshal</code> module.</p>\n<p>Loading a PyInstaller executable in a RE tool will only produce a generic archive-extraction code that is unrelated to the actual program code.</p>\n</div>",
            "votes": "2",
            "user": "Yotamz",
            "time": "Nov 22, 2023 at 8:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}