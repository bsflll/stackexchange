{
    "title": "How would you protect this Crypter?",
    "link": "https://reverseengineering.stackexchange.com/questions/11872/how-would-you-protect-this-crypter",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Imagine you are working in a kind of crypter that only works with the current function deciphered, rest of the code is ciphered by symmetric encryption. When a new function is about to be called, the current function is enciphered and the following is deciphered and called.</p>\n<p>My assumption is that a analyst can easily dump the deciphered code (real code) each time a function is called, due to is the unique time where code is leaked/deciphered. Also, an analyst could easily repatch the executable in order to extract the protection, but it would need the symmetric key, once he has it, he just has to remove the encryption/decryption blocks and decipher the code.</p>\n<p>Question here is: How can I implement a secure system that accomplish:</p>\n<ul>\n<li>Key management without leaking the key, or protecting it from being retrieved. (So the executable isn't patched for removing crypter's protection).</li>\n<li>Avoid dumping per deciphered function. (Thus the analyst wouldn't dump the whole executable's deciphered code just dumping deciphered functions in runtime).</li>\n</ul>\n<p>It would be great to read some advices. Thanks!</p>\n</div>",
    "votes": "0",
    "answers": 1,
    "views": "248",
    "tags": [
        "binary-analysis",
        "encryption",
        "cryptography"
    ],
    "user": "kub0x",
    "time": "Jan 28, 2016 at 9:12",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<span class=\"comment-copy\">Even if you were able to keep the key \"hidden\" (using white-box cryptography or other means) and obfuscate the decryption algorithm well, one could still decrypt your program by calling your decryption function(s) on each encrypted function and dumping the output. I actually discussed this briefly @ <a href=\"https://www.youtube.com/watch?v=mWsT5M6rHWI#t=15m7s\" rel=\"nofollow noreferrer\">youtube.com/watch?v=mWsT5M6rHWI#t=15m7s</a> (it's about encrypted strings but the same approach could also be applied to encrypted functions).</span>",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a thing that might help you in modern crypto research, it is called white-box cryptography and relatively good Q&amp;A article resides <a href=\"http://joye.site88.net/papers/Joy08whitebox.pdf\" rel=\"nofollow noreferrer\">here</a> .</p>\n<p>Generally speaking if the key exists sometimes in the memory you can safely assume that sometimes it will be dumped and reused.</p>\n<p>However you can harden the problem by using the following techniques:</p>\n<ul>\n<li>Obfuscate the key (compute them on the fly)</li>\n<li>Obfuscate the encryption/decryption algorithm</li>\n<li>Use different keys for different functions</li>\n<li>Re-encrypting the function back may be done with different keys</li>\n<li>Use checksums for verification of encrypted code before usage</li>\n<li>Use Intel SGX or similar features of other processors to avoid debugging</li>\n<li>Use anti-debugging and anti-dumping techniques</li>\n</ul>\n<p>Good luck.</p>\n</div>",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Small remark: Encrypting the code by function boundaries leaks information about the code structure. You can divide your encryption blocks differently.</span>",
                    "time": null
                }
            ]
        }
    ]
}