{
    "title": "What to look for in the ARM64 assembly of a Golang binary to find the list of kill signals that affect the binary execution?",
    "link": "https://reverseengineering.stackexchange.com/questions/26529/what-to-look-for-in-the-arm64-assembly-of-a-golang-binary-to-find-the-list-of-ki",
    "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm reverse engineering an <code>ARM64</code> Golang binary built with <code>musl</code> and I've already detected <code>kill -10,12,15 pid</code> as the signals which interact with it, where <code>10</code> and <code>12</code> represent user-defined signals. I think there must be other signals as well and I wish to detect them. In particular, may there be other user-defined signals or only 2 <code>SIGUSR</code>s are available no matter what? Since signals are being sent to the binary during runtime I wanted to know if there are signature functions in Golang's runtime that may be imported in the binary and represent signal handling functionalities in the binary.</p>\n</div>",
    "votes": "1",
    "answers": 1,
    "views": "88",
    "tags": [
        "arm64"
    ],
    "user": "Newbie",
    "time": "Dec 13, 2020 at 15:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Traditionally only two signals are reserved for users - <code>SIGUSR1</code> and <code>SIGUSR2</code>. But there are possibilities for others as well as mentioned <a href=\"https://unix.stackexchange.com/questions/48582/why-there-are-only-two-user-defined-signals/48594\">here</a>.</p>\n<p>I would check if the signals <code>SIGUSR1</code> and <code>SIGUSR2</code> does anything besides the obvious, like maybe call other subroutines.</p>\n</div>",
            "votes": "1",
            "user": "goofy",
            "time": "Dec 28, 2020 at 1:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}