{
  "title": "Some question about IDA [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/18252/some-question-about-ida",
  "content": "This binary was from a CTF challenge.\n\nI found 2 way to solve this, one is run & debug the bin, set a break point and see result in flag after the bin running, another is trying to understand the function.\n\nThere are some parts that i dont understand even when i solved this challenge :\n\nWhy my IDA reverse the string (v6 should be \"Bkav\" and v7 + v8 should be \"Security\"\n\nAs you see, it pass the char* v6 (\"Bkav\") into the func01 and func02, but when i do the same thing, it give wrong flag. But when i try to pass the \"BkavSecurity\" in to func01 and func02, it give me right flag. Quite confuse about this.\n\n\n\nYou can find file here : https://www.sendspace.com/file/g7w8nz\n\n",
  "votes": "-2",
  "answers": 2,
  "views": "189",
  "tags": [
    "ida",
    "hexrays"
  ],
  "user": "beo sen",
  "time": "6 years ago",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "please give this question a more meaningful title",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "You're passing a flag? Where? It's not clear to me what you're asking here.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Remember that what you're passing is an address. And the address of v6 and since v6,v7 and v8 are adjacent to each other so any method that works on char * will read from one to the other until it reaches byte 0.\n\n```\nLetter |  Address | Variable\n   B   | ebp-7e5h | -> v6 (4 bytes)\n   k   | ebp-7e4h | \n   a   | ebp-7e3h | \n   v   | ebp-7e2h | \n   S   | ebp-7e1h | -> v7 (4 bytes)\n   e   | ebp-7e0h |\n   c   | ebp-7dfh |\n   u   | ebp-7deh |\n   r   | ebp-7ddh | -> v8 (4 bytes)\n   i   | ebp-7dch |\n   t   | ebp-7dbh |\n   y   | ebp-7dah |\n  \\0   | ebp-7d9h | -> v9 (1 byte)\n\n```\n",
      "votes": "0",
      "user": "Paweł Łukasik",
      "time": "May 13, 2018 at 12:55",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "well you can create a stackvar K   on all the four instructions and convert those stack variables to an array of proper length \n\nthen you can see ida showing you the offsets from base the screen shot is from ida free 5 on a 32 bit machine  (it doesn't decompile ) \n\nbut in your case i think decompilation would be more better ( this construct is an inlined/unrolled strcpy(src,dest) \n\n\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "May 14, 2018 at 19:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}