{
  "title": "How to hook or call \"non-native/non-exported functions\"?",
  "link": "https://reverseengineering.stackexchange.com/questions/32842/how-to-hook-or-call-non-native-non-exported-functions",
  "content": "I wrote this simple application in C++ to learn about reverse engineering:\n\n```\n#include <iostream>\n#include <windows.h>\n\nvoid PrintMessage(const char *message) {\n    std::cout << message << \"  \n\";\n}\n\nint main() {\n    while (true) {\n        if (GetAsyncKeyState(VK_SPACE) & 0x1) {\n            PrintMessage(\"Space Pressed\");\n        }\n    }\n    return 0;\n}\n\n```\nFirst of all, I don't know what is the right way to call them, and probably that's the reason why I cannot find any information about it, but by \"non-native/non-exported functions\" I mean any function that was written within the app and not imported from another DLL, like user32.dll for MessageBox native API.\n\nAssuming I don't know anything about the app above, but I have it's compiled executable file, is it possible to find PrintMessage's address in it, and hook or call it from an external process? (through DLL injection, maybe?)\n\nMy goal is to write a second app, that can attach to the one above to achieve 2 things:\n\nI've found plenty of tutorials about Native Functions, mainly Windows API, but none related to what I'm trying to achieve. Is it even possible? What should I look for to learn about it?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "67",
  "tags": [
    "windows",
    "dynamic-analysis",
    "function-hooking"
  ],
  "user": "Unknown X",
  "time": "Mar 28, 2024 at 19:54",
  "comments": [
    {
      "user": "Robert",
      "text": "The PrintMessage function should be seen as function if you load the compiled binary in Ghidra or a similar tool. However the compiler my optimize your code and automatically inline the code of PrintMessage, in such a case you won't find a separate function. If you have a function you can hook it. For hooking a non-exported function using frida please see my related answer on Stackoverflow.",
      "time": null
    },
    {
      "user": "Unknown X",
      "text": "@Robert Thank you. After compiling my app on debug mode, I was able to find the functions using x64dbg. However, release mode does what you're saying about optimizing and inlining functions. In those cases, is still possible to hook to inline functions? I believe that most real apps use release settings to deliver their software, so I wonder if this technique could be used on real scenarios with more knowledge to detect inline functions, or if inline functions cannot be called from the outside.",
      "time": null
    },
    {
      "user": "Unknown X",
      "text": "@Robert Also, is there any conventions that compilers use for preparation of functions? I've found a tutorial where a DLL written in C was injected to an app written in C as well, so the pointer to the function address worked like a charm. I wonder if different compilers use different \"prologue\" for their functions (e.g. parameters setup), or there are a standard of calling conventions for every compiler.",
      "time": null
    }
  ],
  "answers_data": []
}