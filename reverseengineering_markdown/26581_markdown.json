{
  "title": "Why would just two bits of the SP be used here?",
  "link": "https://reverseengineering.stackexchange.com/questions/26581/why-would-just-two-bits-of-the-sp-be-used-here",
  "content": "This is the section of disassembled code in question. It’s from a Linux kernel module compiled for 4.4.16 on ARMv7.\n\n```\n  ; Registers used:\n  ;  - r3 :  unsigned long argp\n\n0000005c         mov        r1, sp\n00000060         bic        r2, r1, #0x1fc0\n00000064         bic        r2, r2, #0x3f\n00000068         ldr        r4, [r2, #0x8]\n0000006c         adds       r1, r3, #0x1\n00000070         sbcslo     r1, r1, r4\n00000074         movlo      r4, #0x0\n00000078         cmp        r4, #0x0\n0000007c         bne        loc_dc\n\n```\nThe stack at this point looks like this:\n\n```\n00  <- SP\n04  [padding]\n07  u8 arg_kernel\n08  pushed[r4]\n0c  pushed[r5]\n10  pushed[r6]\n14  pushed[lr]\n18  <Previous SP>\n\n```\nHere’s how I decoded this assembly into pseudo-C:\n\n```\nr4 = *(SP & 0xe000 + 8);\nr1 = argp + 1;\n\nif (r1 overflowed) {\n    r1 -= r4;\n    r4 = 0;\n}\n\nif (r4 == 0) {\n  /* jump */\n}\n\n```\nIf I got this right, I don’t really understand the purpose of this code. If I made a mistake, I really don’t understand it. Can anyone offer any insight into the purpose of these operations?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "42",
  "tags": [
    "disassembly",
    "linux",
    "arm",
    "kernel"
  ],
  "user": "MTCoster",
  "time": "Dec 18, 2020 at 16:45",
  "comments": [],
  "answers_data": [
    {
      "content": "Your translation is wrong. The two BIC instructions clear the 13 low bits of the stack pointer (1FC0|3F = 1FFF). In kernel mode, this produces a pointer to the thread_info structure for the current thread.\n\nThe ldr then reads the field at offset 8 in it which seems to be addr_limit and r3+1 apparently should not exceed it.\n\nCombined, the code matches this helper from uaccess.h:\n\n```\n#define __range_ok(addr, size) ({ \\\n    unsigned long flag, roksum; \\\n    __chk_user_ptr(addr);   \\\n    __asm__(\"adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0\" \\\n        : \"=&r\" (flag), \"=&r\" (roksum) \\\n        : \"r\" (addr), \"Ir\" (size), \"0\" (current_thread_info()->addr_limit) \\\n        : \"cc\"); \\\n    flag; })\n\n```\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 19, 2020 at 21:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}