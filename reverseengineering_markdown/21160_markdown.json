{
  "title": "Is the main function's name in the symbol table of C & C++ programs always 'main'? if not, how to find the name?",
  "link": "https://reverseengineering.stackexchange.com/questions/21160/is-the-main-functions-name-in-the-symbol-table-of-c-c-programs-always-main",
  "content": "So I'm trying to write a reversing tool that parses symbol table to find the main function's address\n\nright now all the binaries I'm checking the name of main function is still main in symbol table\n\nmy question is can this change? because right now my check to finding the main function is that string being equal to main\n\nif it can change, what are the possible values? if it can have too many possible values then how can i find it in the binary?\n\n",
  "votes": "2",
  "answers": 3,
  "views": "981",
  "tags": [
    "x86",
    "c",
    "elf",
    "binary",
    "x86-64"
  ],
  "user": "Max",
  "time": "Apr 16, 2019 at 6:39",
  "comments": [],
  "answers_data": [
    {
      "content": "Since you mentioned ELF in the tag. WinMain, DllMain, etc should not be a concern for you. They're name conventions for Windows.\n\nThe main function is the first function executed for a C/C++ program. However, it doesn't mean this is the real first function / code executed. You will usually find some initialization code before this function is called.\n\nYes. Actually, you find this static symbol because your executable is not stripped. If you run strip(1) on the executable, you'll lose this information.\n\nIt can be anything.\n\nFor instance: without static symbol and if your executable is not compiled with the -static switch, you can still retrieve the address of the main function by finding the first parameter of __libc_start_main. This function is normally imported from the shared object libc.so, so you can find its dynamic symbol.\n\n",
      "votes": "4",
      "user": "wisk",
      "time": "Apr 16, 2019 at 20:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "Max",
          "text": "you mean  in function _start before calling the function you mentioned, we always push the absolute address of main correct? ( no matter the compiler? ) because i want to write a tool that works no matter how the C/C++ code is compiled and what the attacker has done",
          "time": null
        },
        {
          "user": "wisk",
          "text": "It's not necessary pushed. It depends on the calling convention. For instance, for x86-64 (system v) the first parameter will be set in the register rdi.",
          "time": null
        }
      ]
    },
    {
      "content": "Just a quick note in case you would not be aware of this:\n\n```\n$ cat tiny.c\n#include <unistd.h>\nvoid _start() {\n  _exit(42);\n}\n\n```\non x86-64, here is what I get (you need a static libc: libc.a):\n\n```\n$ gcc -static -ffreestanding -nostartfiles  -s -o tiny tiny.c\n$ ./tiny || echo $?\n42\n\n```\nPay attention that:\n\n```\n$ file tiny\ntiny: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=5557e6655b77976b7c248711af6f508d931fc3af, stripped\n\n```\nbut only:\n\n```\n$ objdump -x tiny\n\ntiny:     file format elf64-x86-64\ntiny\narchitecture: i386:x86-64, flags 0x00000102:\nEXEC_P, D_PAGED\nstart address 0x0000000000400180\n\nProgram Header:\n    LOAD off    0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21\n         filesz 0x0000000000000240 memsz 0x0000000000000240 flags r-x\n    LOAD off    0x0000000000001000 vaddr 0x0000000000601000 paddr 0x0000000000601000 align 2**21\n         filesz 0x0000000000000018 memsz 0x0000000000000018 flags rw-\n    NOTE off    0x0000000000000158 vaddr 0x0000000000400158 paddr 0x0000000000400158 align 2**2\n         filesz 0x0000000000000024 memsz 0x0000000000000024 flags r--\n     TLS off    0x0000000000001000 vaddr 0x0000000000601000 paddr 0x0000000000601000 align 2**2\n         filesz 0x0000000000000000 memsz 0x0000000000000004 flags r--\n   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4\n         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .note.gnu.build-id 00000024  0000000000400158  0000000000400158  00000158  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  1 .text         0000006a  0000000000400180  0000000000400180  00000180  2**4\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  2 .eh_frame     00000050  00000000004001f0  00000000004001f0  000001f0  2**3\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  3 .tbss         00000004  0000000000601000  0000000000601000  00001000  2**2\n                  ALLOC, THREAD_LOCAL\n  4 .got.plt      00000018  0000000000601000  0000000000601000  00001000  2**3\n                  CONTENTS, ALLOC, LOAD, DATA\n  5 .comment      0000002c  0000000000000000  0000000000000000  00001018  2**0\n                  CONTENTS, READONLY\nSYMBOL TABLE:\nno symbols\n\n```\n",
      "votes": "3",
      "user": "tibar",
      "time": "Apr 18, 2019 at 13:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "Johann Aydinbas",
          "text": "I have no idea what you are pointing out with this comment. Care to elaborate?",
          "time": null
        },
        {
          "user": "tibar",
          "text": "@JohannAydinbas I was simply pointing out that elf executable may not have a main symbol (eg. $ objdump -x tiny | grep main return nothing in my case).",
          "time": null
        }
      ]
    },
    {
      "content": "main() means your program is a console application.\n\nWinMain() means the program is a GUI application -- that is, it displays windows and dialog boxes instead of showing console.\n\nDllMain() means the program is a DLL. A DLL cannot be run directly but is used by the above two kinds of applications.\n\n",
      "votes": "-1",
      "user": "mailwl",
      "time": "Apr 16, 2019 at 6:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "Max",
          "text": "so these are the only possible values correct and i need to check for these only?",
          "time": null
        },
        {
          "user": "mailwl",
          "text": "there is wmain() for unicode apps, don't know if other values exists. I think, other than main() is windows specific",
          "time": null
        }
      ]
    }
  ]
}