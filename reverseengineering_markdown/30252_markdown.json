{
  "title": "idapython: how to get decompiler output corresponding to the indirect call",
  "link": "https://reverseengineering.stackexchange.com/questions/30252/idapython-how-to-get-decompiler-output-corresponding-to-the-indirect-call",
  "content": "For, e.g. disassembler or IDA view:\n\n\n\nDecompiler or Hex View:\n\n\n\nI can get the decompilation of whole function using something like:\n\n```\ndecompiled = ida_hexrays.decompile(ea)\n\n```\nBut, in this way I get the complete decompilation, but not the part which is only highlighted.\n\nFor. e.g. I want something like - let's say for the instruction:\n\n```\n.text:00000000004011BB                 call    rdx\n\n```\nThe corresponding decompilation would only be:\n\n```\nv4 = ((__int64 (__fastcall *)(_QWORD))a2)(v7) + v3;\n\n```\nAny help is appreciated.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "R4444",
  "time": "Apr 11, 2022 at 22:35",
  "comments": [],
  "answers_data": [
    {
      "content": "This probably takes more code than it should but here's an approach that could work:\n\nThe idea is to use the decompiled function's ctree to narrow down the pseudocode lines you care about. At a glance:\n\nHere's some code that will find the parent statement for a given ea (steps 1 through 3 above):\n\n```\ndef find_parent_cinsn(cfunc, citem):\n    if not citem.is_expr():\n        return citem\n    cinsn = None\n    class cvisitor(ida_hexrays.ctree_visitor_t):\n        def __init__(self):\n            super().__init__(ida_hexrays.CV_FAST | ida_hexrays.CV_PARENTS)\n\n        def visit_expr(self, expr) -> int:\n            nonlocal cinsn\n            if expr.obj_id == citem.obj_id:\n                for parent in reversed(self.parents):\n                    if not parent.is_expr():\n                        cinsn = parent\n                        break\n                return 1  # Stop enumeration\n            return 0\n\n    cvisitor().apply_to(cfunc.body, None)\n    return cinsn\n\n\ndef pseudo_for_ea(ea):\n    cfunc = ida_hexrays.decompile(ea)\n    citem = cfunc.body.find_closest_addr(ea)\n    citem = find_parent_cinsn(cfunc, citem)\n\n    if citem:\n        print(\"Most likely statement for {:X}: {:X}  {}\".format(ea, citem.ea, citem.cinsn.opname))\n\n        # Now, cross-ref the pseudocode lines to the citem using the citem\n        # references embedded in each line of the cfunc's pseudocode\n        #\n        # cfunc.citems[] -> 0\n        #\n\n\n```\nGood luck!\n\n",
      "votes": "2",
      "user": "vmallet",
      "time": "Apr 13, 2022 at 17:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "R4444",
          "text": "Hey, thanks for your answer! I designed in a way - assuming the first tag contains corresponds to the tag we receive from find_parent_cinsn citem if citem:         for item in cfunc.get_pseudocode():             if format(citem.index, \"X\").zfill(16) in item.line.split()[0]:                 decomp = ida_lines.tag_remove(item.line)                 return len(re.findall('\\((.*?)\\)',decomp)[-1].split(\",\"))",
          "time": null
        }
      ]
    },
    {
      "content": "There is an undocumented API for this: find_item_coords(item)\n\nThus you can do something like this in IDAPython:\n\n```\ncfunc = ida_hexrays.decompile(ea)\nitem = cfunc.body.find_closest_addr(ea)\ncoord = cfunc.find_item_coords(item)\n\n```\nThe coord returned is a (x, y) tuple denoting column and row number for the item in the pseudo code.\n\nHope this can help you.\n\n",
      "votes": "0",
      "user": "r4ve1",
      "time": "Jul 10, 2023 at 15:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}