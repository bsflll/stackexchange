{
  "title": "Is this just junk?",
  "link": "https://reverseengineering.stackexchange.com/questions/4528/is-this-just-junk",
  "content": "I have some decompiled code using Hex Rays. I can see that there is a memory copy operation but I am lost in what the code is trying to do after that with calls such as _floatsidf. What is this code trying to do ?\n\n```\nint __fastcall v6495(const void *a1, size_t a2)\n{\n  const void *v2; // r6@1\n  size_t v3; // r7@1\n  int v4; // r0@1\n  int v5; // r7@1\n  __int64 v6; // r8@1\n  int v7; // r1@1\n  int v8; // r0@1\n  __int64 v9; // r0@1\n  __int64 v10; // r0@1\n  __int64 v11; // ST00_8@1\n  int v12; // r1@1\n  int v13; // r0@1\n  __int64 v14; // r0@1\n  int v15; // r0@1\n  int v16; // r1@1\n  __int64 v17; // r0@1\n\n  v2 = a1;\n  v3 = a2;\n  gettimeofday(&v824, 0);\n  pthread_mutex_lock((pthread_mutex_t *)(v217 + 110720));\n  v4 = v217;\n  *(_DWORD *)(v217 + 73728) = -2028273664;\n  memcpy((void *)(v4 + 73732), v2, v3);\n  pthread_cond_signal((pthread_cond_t *)(v217 + 110976));\n  pthread_cond_wait((pthread_cond_t *)(v217 + 111232), (pthread_mutex_t *)(v217 + 110720));\n  pthread_mutex_unlock((pthread_mutex_t *)(v217 + 110720));\n  v5 = v217;\n  gettimeofday(&v825, 0);\n  LODWORD(v6) = _floatsidf(v825.tv_sec);\n  HIDWORD(v6) = v7;\n  v8 = _floatsidf(v825.tv_usec);\n  LODWORD(v9) = _divdf3(v8);\n  LODWORD(v10) = _aeabi_dadd(v6, v9);\n  v11 = v10;\n  LODWORD(v6) = _floatsidf(v824.tv_sec);\n  HIDWORD(v6) = v12;\n  v13 = _floatsidf(v824.tv_usec);\n  LODWORD(v14) = _divdf3(v13);\n  v15 = _aeabi_dadd(v6, v14);\n  LODWORD(v17) = _subdf3(v11, HIDWORD(v11), v15, v16);\n  unk_408D81C8 = v17;\n  return v5 + 73732;\n}\n\n```\nAfter the answer of blabb:\n\nv217 is initialised in a previous function where v6520 is in the .bss segment.\n\n```\nint v3480()\n{\n  __int32 v0; // r0@1\n\n  v0 = time(0);\n  srand48(v0);\n  v877 = &v3688;\n  v1277 = &v7299;\n  v1634 = &v5690;\n  v2042 = &v7024;\n  v873 = &v3688;\n  v872 = &unk_40ABAFB5;\n  v1274 = &v7299;\n  v485 = &unk_40ABAFF5;\n  v1631 = &v5690;\n  v1629 = &unk_40ABAFD9;\n  v2037 = &v7024;\n  v2038 = &unk_40ABAFE9;\n  v5661 = -1;\n  v2325 = -1;\n  v1259 = -1;\n  v4048 = -1;\n  v5509 = &v5497;\n  v3845 = &unk_40ABAEEC;\n  v3522 = &v4191;\n  v7253 = &unk_40ABAEE4;\n  v2081 = &v3009;\n  v5828 = &unk_40ABAEDC;\n  v7014 = &v2061;\n  v3636 = &unk_40ABAED4;\n  v221 = &v6523;\n  v218 = &v6524;\n  v219 = &v6525;\n  v217 = &v6520;\n  v1455 = &v6523;\n  unk_40ABAEF4 = &v6524;\n  v7297 = &dword_409581D0;\n  v5530 = &dword_409581D0;\n  if ( dword_409581D0 )\n  {\n    v6935();\n  }\n  else\n  {\n    v4335();\n    dword_409581D0 = 1;\n  }\n  return 0;\n}\n\n```\n",
  "votes": "0",
  "answers": 3,
  "views": "1k",
  "tags": [
    "decompilation"
  ],
  "user": "allbabel",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Check the unk_408D81C8 = v17; just one line before the return - this sets a global variable. So, the part after the mutex may not contribute to the result of the function, but ut's certainly not junk. Since the code does a gettimeofday() before and after the mutex, and the 'junk' does some calculations with the results, i guess it's calculating the time spent in the mutex and storing that into the global variable at 408D81C8 - i didn't take the time to really understand the code, though.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Is this just junk? No.\n\nWhat does _floatsidf do? It converts an integer to a double in a software floating point implementation.\n\nFirstly, the Hex-Rays decompiler produces C-like pseudocode. What you're looking at is not the code. In some cases, like this, it would be easier to reverse it by reading the assembly. A lot of what you see is junk, because there are decompilation artefacts introduced by the decompiler. I suggest that you first learn how the assembly works, then learn how to use the decompiler interactively to fix the artefacts.\n\n```\nLODWORD(v6) = _floatsidf(v825.tv_sec);\nHIDWORD(v6) = v7;\n\n```\nThe variable v7 is not initialised. Looking at the declaration, we can see that it's a value from r1:\n\n```\nint v7; // r1@1\n\n```\nBecause the _floatsidf function returns a double split across r0 and r1, and Hex-Rays is not aware of this, it doesn't represent this correctly. Those two lines would be better written as:\n\n```\nv6 = _floatsidf(v825.tv_sec);\n\n```\nLet's skip down a bit:\n\n```\nLODWORD(v9) = _divdf3(v8);\n\n```\nA quick web search shows that _divdf3 does floating point division, and takes two arguments. Hex-Rays has discarded the second argument, so you can't know what it is.\n\n_subdf3 also takes two arguments, not four, which is another decompiler artefact (two 64-bit arguments have been split into four 32-bit arguments).\n\nFinally, a search for _aeabi_dadd reveals that it is an alias for adddf3, which performs addition.\n\n```\n// v217 relative globals\nint dword_12000;\nchar buf_12004[???];\npthread_mutex_t mutex_1b080;\npthread_cond_t cond_1b180;\npthread_cond_t cond_1b280;\n\nint __fastcall v6495(const void *data, size_t length) {\n\n    gettimeofday(&g_start_time, 0);\n\n    pthread_mutex_lock(&mutex_1b080);\n    dword_12000 = 0x871b0000;\n    memcpy(buf_12004, data, length);\n    pthread_cond_signal(&cond_1b180);\n    pthread_cond_wait(&cond_1b280, &mutex_1b080);\n    pthread_mutex_unlock(&mutex_1b080);\n\n    gettimeofday(&g_end_time, 0);\n\n    double v11 = (double)(g_end_time.tv_sec) + (double)(g_end_time.tv_usec) / ???;\n    double v15 = (double)(g_start_time.tv_sec) + (double)(g_start_time.tv_usec) / ???;\n    unk_408D81C8 = v11 - v15;\n\n    return buf_12004;\n}\n\n```\nThe question marks have been destroyed during decompilation, but inferring from the context, they're probably 1000000.0, and unk_408D81C8 is probably the time elapsed in seconds.\n\nPlease don't ask questions like this. Questions like \"What is this code trying to do ?\" or \"Is this junk?\" contribute very little to this community, and feels a bit like the \"please do my homework\" questions from Stack Overflow. A more helpful question might be \"How can you reverse ARM soft-float using Hex-Rays?\"\n\n",
      "votes": "3",
      "user": "Dougall",
      "time": "Jun 11, 2014 at 0:14",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "http://opensource.apple.com/source/clang/clang-503.0.38/src/projects/compiler-rt/lib/floatsidf.c\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Jun 4, 2014 at 19:23",
      "is_accepted": false,
      "comments": [
        {
          "user": "allbabel",
          "text": "This did answer the initial question so I wish I could give you that but I think the initial question was wrongly expressed.  I am trying to work out what the code does and have amended the question accordingly.",
          "time": null
        }
      ]
    },
    {
      "content": "You may need to find where v217  is initialized \n\nFrom a fleeting glance, it appears to be junk as all the function does seem to be returning.\n\nv5 + const where v5 = v217 which doesn't seem to be initialized.\n\nBy the way, Google first hit returns source code for _floatsidf and LLVM intodpfloat() function.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Jun 4, 2014 at 21:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "allbabel",
          "text": "I have amended the post, v217 is initialised before this function.  So if this is obfuscation is it junk code insertion?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "the function you added does not seem to have any relation with the first function the value that is iinitialised may be same or may be different logically  you should be looking at a sequence that should be  v 217 = SOMETHING; tonnes of junk that doesnt alter v217 in between ;call FunctionThatUsesV217(a,b......z) { };",
          "time": null
        }
      ]
    }
  ]
}