{
  "title": "How to find if a function is using registers as parameters?",
  "link": "https://reverseengineering.stackexchange.com/questions/25836/how-to-find-if-a-function-is-using-registers-as-parameters",
  "content": "The disassembly of the function Winload!CmpFindNlsData whose prototype I'm trying to construct\n\n```\n00893c10 8bff            mov     edi,edi\n00893c12 55              push    ebp\n00893c13 8bec            mov     ebp,esp\n00893c15 83ec40          sub     esp,40h\n00893c18 53              push    ebx\n00893c19 56              push    esi\n00893c1a 57              push    edi\n00893c1b 8d45e0          lea     eax,[ebp-20h]\n00893c1e 8bf1            mov     esi,ecx\n00893c20 50              push    eax\n00893c21 33db            xor     ebx,ebx\n00893c23 8975ec          mov     dword ptr [ebp-14h],esi\n00893c26 83cfff          or      edi,0FFFFFFFFh\n00893c29 895dcc          mov     dword ptr [ebp-34h],ebx\n00893c2c 52              push    edx\n00893c2d 56              push    esi\n00893c2e 897dc8          mov     dword ptr [ebp-38h],edi\n00893c31 897dd0          mov     dword ptr [ebp-30h],edi\n00893c34 895dd4          mov     dword ptr [ebp-2Ch],ebx\n00893c37 897de0          mov     dword ptr [ebp-20h],edi\n00893c3a 895de4          mov     dword ptr [ebp-1Ch],ebx\n00893c3d 897dc0          mov     dword ptr [ebp-40h],edi\n00893c40 895dc4          mov     dword ptr [ebp-3Ch],ebx\n00893c43 895de8          mov     dword ptr [ebp-18h],ebx\n00893c46 ff5604          call    dword ptr [esi+4]\n00893c49 85c0            test    eax,eax\n00893c4b 0f845d010000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893c51 8d4df4          lea     ecx,[ebp-0Ch]\n00893c54 8bd0            mov     edx,eax\n00893c56 51              push    ecx\n00893c57 68b8208e00      push    offset winload!CmpControlString (008e20b8)\n00893c5c 8bce            mov     ecx,esi\n00893c5e e869510000      call    winload!CmpFindSubKeyByNameWithStatus (00898dcc)\n00893c63 8d45e0          lea     eax,[ebp-20h]\n00893c66 50              push    eax\n00893c67 56              push    esi\n00893c68 ff5608          call    dword ptr [esi+8]\n00893c6b 397df4          cmp     dword ptr [ebp-0Ch],edi\n00893c6e 0f843a010000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893c74 8d45e0          lea     eax,[ebp-20h]\n00893c77 50              push    eax\n00893c78 ff75f4          push    dword ptr [ebp-0Ch]\n00893c7b 56              push    esi\n00893c7c ff5604          call    dword ptr [esi+4]\n00893c7f 85c0            test    eax,eax\n00893c81 0f8427010000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893c87 8d4df4          lea     ecx,[ebp-0Ch]\n00893c8a 8bd0            mov     edx,eax\n00893c8c 51              push    ecx\n00893c8d 68f8208e00      push    offset winload!CmpNlsString (008e20f8)\n00893c92 8bce            mov     ecx,esi\n00893c94 e833510000      call    winload!CmpFindSubKeyByNameWithStatus (00898dcc)\n00893c99 8d45e0          lea     eax,[ebp-20h]\n00893c9c 50              push    eax\n00893c9d 56              push    esi\n00893c9e ff5608          call    dword ptr [esi+8]\n00893ca1 397df4          cmp     dword ptr [ebp-0Ch],edi\n00893ca4 0f8404010000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893caa 8d45e0          lea     eax,[ebp-20h]\n00893cad 50              push    eax\n00893cae ff75f4          push    dword ptr [ebp-0Ch]\n00893cb1 56              push    esi\n00893cb2 ff5604          call    dword ptr [esi+4]\n00893cb5 85c0            test    eax,eax\n00893cb7 0f84f1000000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893cbd 8d4df4          lea     ecx,[ebp-0Ch]\n00893cc0 8bd0            mov     edx,eax\n00893cc2 51              push    ecx\n00893cc3 6808218e00      push    offset winload!CmpCodePageString (008e2108)\n00893cc8 8bce            mov     ecx,esi\n00893cca e8fd500000      call    winload!CmpFindSubKeyByNameWithStatus (00898dcc)\n00893ccf 8d45e0          lea     eax,[ebp-20h]\n00893cd2 50              push    eax\n00893cd3 56              push    esi\n00893cd4 ff5608          call    dword ptr [esi+8]\n00893cd7 397df4          cmp     dword ptr [ebp-0Ch],edi\n00893cda 0f84ce000000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893ce0 8d45e0          lea     eax,[ebp-20h]\n00893ce3 50              push    eax\n00893ce4 ff75f4          push    dword ptr [ebp-0Ch]\n00893ce7 56              push    esi\n00893ce8 ff5604          call    dword ptr [esi+4]\n00893ceb 85c0            test    eax,eax\n00893ced 0f84bb000000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893cf3 6870228e00      push    offset winload!CmpAcpString (008e2270)\n00893cf8 8bd0            mov     edx,eax\n00893cfa 8bce            mov     ecx,esi\n00893cfc e885330000      call    winload!CmpFindValueByName (00897086)\n00893d01 8bf8            mov     edi,eax\n00893d03 8d45e0          lea     eax,[ebp-20h]\n00893d06 50              push    eax\n00893d07 56              push    esi\n00893d08 ff5608          call    dword ptr [esi+8]\n00893d0b 83ffff          cmp     edi,0FFFFFFFFh\n00893d0e 0f849a000000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893d14 8d45d0          lea     eax,[ebp-30h]\n00893d17 50              push    eax\n00893d18 57              push    edi\n00893d19 56              push    esi\n00893d1a ff5604          call    dword ptr [esi+4]\n00893d1d 85c0            test    eax,eax\n00893d1f 0f8489000000    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893d25 8d4dc8          lea     ecx,[ebp-38h]\n00893d28 8bd7            mov     edx,edi\n00893d2a 51              push    ecx\n00893d2b 8d4df8          lea     ecx,[ebp-8]\n00893d2e 51              push    ecx\n00893d2f 50              push    eax\n00893d30 8bce            mov     ecx,esi\n00893d32 e8c7340000      call    winload!CmpValueToData (008971fe)\n00893d37 8bf8            mov     edi,eax\n00893d39 8d45d0          lea     eax,[ebp-30h]\n00893d3c 50              push    eax\n00893d3d 56              push    esi\n00893d3e 897ddc          mov     dword ptr [ebp-24h],edi\n00893d41 ff5608          call    dword ptr [esi+8]\n00893d44 85ff            test    edi,edi\n00893d46 7466            je      winload!CmpFindNLSData+0x19e (00893dae)\n00893d48 8b55f8          mov     edx,dword ptr [ebp-8]\n00893d4b 33c9            xor     ecx,ecx\n00893d4d 33c0            xor     eax,eax\n00893d4f 668955da        mov     word ptr [ebp-26h],dx\n00893d53 66894dd8        mov     word ptr [ebp-28h],cx\n00893d57 c745f002000000  mov     dword ptr [ebp-10h],2\n00893d5e 663bc2          cmp     ax,dx\n00893d61 731d            jae     winload!CmpFindNLSData+0x170 (00893d80)\n00893d63 8b75f0          mov     esi,dword ptr [ebp-10h]\n00893d66 0fb7c1          movzx   eax,cx\n00893d69 d1e8            shr     eax,1\n00893d6b 66391c47        cmp     word ptr [edi+eax*2],bx\n00893d6f 740c            je      winload!CmpFindNLSData+0x16d (00893d7d)\n00893d71 6603ce          add     cx,si\n00893d74 66894dd8        mov     word ptr [ebp-28h],cx\n00893d78 663bca          cmp     cx,dx\n00893d7b 72e9            jb      winload!CmpFindNLSData+0x156 (00893d66)\n00893d7d 8b75ec          mov     esi,dword ptr [ebp-14h]\n00893d80 8b5d08          mov     ebx,dword ptr [ebp+8]\n00893d83 6a36            push    36h\n00893d85 58              pop     eax\n00893d86 663907          cmp     word ptr [edi],ax\n00893d89 750c            jne     winload!CmpFindNLSData+0x187 (00893d97)\n00893d8b c745e801000000  mov     dword ptr [ebp-18h],1\n00893d92 e992000000      jmp     winload!CmpFindNLSData+0x219 (00893e29)\n00893d97 8d45e0          lea     eax,[ebp-20h]\n00893d9a 50              push    eax\n00893d9b ff75f4          push    dword ptr [ebp-0Ch]\n00893d9e 56              push    esi\n00893d9f ff5604          call    dword ptr [esi+4]\n00893da2 85c0            test    eax,eax\n00893da4 7513            jne     winload!CmpFindNLSData+0x1a9 (00893db9)\n00893da6 8d45c8          lea     eax,[ebp-38h]\n00893da9 50              push    eax\n00893daa 56              push    esi\n00893dab ff5608          call    dword ptr [esi+8]\n00893dae 32c0            xor     al,al\n00893db0 5f              pop     edi\n00893db1 5e              pop     esi\n00893db2 5b              pop     ebx\n00893db3 8be5            mov     esp,ebp\n00893db5 5d              pop     ebp\n00893db6 c20c00          ret     0Ch\n00893db9 8d4dd8          lea     ecx,[ebp-28h]\n00893dbc 8bd0            mov     edx,eax\n00893dbe 51              push    ecx\n00893dbf 8bce            mov     ecx,esi\n00893dc1 e8c0320000      call    winload!CmpFindValueByName (00897086)\n00893dc6 8bf8            mov     edi,eax\n00893dc8 8d45c8          lea     eax,[ebp-38h]\n00893dcb 50              push    eax\n00893dcc 56              push    esi\n00893dcd ff5608          call    dword ptr [esi+8]\n00893dd0 33c0            xor     eax,eax\n00893dd2 8945dc          mov     dword ptr [ebp-24h],eax\n00893dd5 8d45e0          lea     eax,[ebp-20h]\n00893dd8 50              push    eax\n00893dd9 56              push    esi\n00893dda ff5608          call    dword ptr [esi+8]\n00893ddd 83ffff          cmp     edi,0FFFFFFFFh\n00893de0 74cc            je      winload!CmpFindNLSData+0x19e (00893dae)\n00893de2 8d45d0          lea     eax,[ebp-30h]\n00893de5 50              push    eax\n00893de6 57              push    edi\n00893de7 56              push    esi\n00893de8 ff5604          call    dword ptr [esi+4]\n00893deb 85c0            test    eax,eax\n00893ded 74bf            je      winload!CmpFindNLSData+0x19e (00893dae)\n00893def 8d4dc0          lea     ecx,[ebp-40h]\n00893df2 8bd7            mov     edx,edi\n00893df4 51              push    ecx\n00893df5 8d4df8          lea     ecx,[ebp-8]\n00893df8 51              push    ecx\n00893df9 50              push    eax\n00893dfa 8bce            mov     ecx,esi\n00893dfc e8fd330000      call    winload!CmpValueToData (008971fe)\n00893e01 894304          mov     dword ptr [ebx+4],eax\n00893e04 85c0            test    eax,eax\n00893e06 7408            je      winload!CmpFindNLSData+0x200 (00893e10)\n00893e08 8d45c0          lea     eax,[ebp-40h]\n00893e0b 50              push    eax\n00893e0c 56              push    esi\n00893e0d ff5608          call    dword ptr [esi+8]\n00893e10 8d45d0          lea     eax,[ebp-30h]\n00893e13 50              push    eax\n00893e14 56              push    esi\n00893e15 ff5608          call    dword ptr [esi+8]\n00893e18 33c0            xor     eax,eax\n00893e1a 394304          cmp     dword ptr [ebx+4],eax\n00893e1d 748f            je      winload!CmpFindNLSData+0x19e (00893dae)\n00893e1f 8b45f8          mov     eax,dword ptr [ebp-8]\n00893e22 66894302        mov     word ptr [ebx+2],ax\n00893e26 668903          mov     word ptr [ebx],ax\n00893e29 8d45e0          lea     eax,[ebp-20h]\n00893e2c 50              push    eax\n00893e2d ff75f4          push    dword ptr [ebp-0Ch]\n00893e30 56              push    esi\n00893e31 ff5604          call    dword ptr [esi+4]\n00893e34 85c0            test    eax,eax\n00893e36 0f8472ffffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893e3c 6848228e00      push    offset winload!CmpOemCpString (008e2248)\n00893e41 8bd0            mov     edx,eax\n00893e43 8bce            mov     ecx,esi\n00893e45 e83c320000      call    winload!CmpFindValueByName (00897086)\n00893e4a 8bf8            mov     edi,eax\n00893e4c 8d45e0          lea     eax,[ebp-20h]\n00893e4f 50              push    eax\n00893e50 56              push    esi\n00893e51 ff5608          call    dword ptr [esi+8]\n00893e54 83ffff          cmp     edi,0FFFFFFFFh\n00893e57 0f8451ffffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893e5d 8d45d0          lea     eax,[ebp-30h]\n00893e60 50              push    eax\n00893e61 57              push    edi\n00893e62 56              push    esi\n00893e63 ff5604          call    dword ptr [esi+4]\n00893e66 85c0            test    eax,eax\n00893e68 0f8440ffffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893e6e 8d4dc8          lea     ecx,[ebp-38h]\n00893e71 8bd7            mov     edx,edi\n00893e73 51              push    ecx\n00893e74 8d4df8          lea     ecx,[ebp-8]\n00893e77 51              push    ecx\n00893e78 50              push    eax\n00893e79 8bce            mov     ecx,esi\n00893e7b e87e330000      call    winload!CmpValueToData (008971fe)\n00893e80 8bf8            mov     edi,eax\n00893e82 8d45d0          lea     eax,[ebp-30h]\n00893e85 50              push    eax\n00893e86 56              push    esi\n00893e87 897ddc          mov     dword ptr [ebp-24h],edi\n00893e8a ff5608          call    dword ptr [esi+8]\n00893e8d 85ff            test    edi,edi\n00893e8f 0f8419ffffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893e95 8b55f8          mov     edx,dword ptr [ebp-8]\n00893e98 33c9            xor     ecx,ecx\n00893e9a 33c0            xor     eax,eax\n00893e9c 668955da        mov     word ptr [ebp-26h],dx\n00893ea0 66894dd8        mov     word ptr [ebp-28h],cx\n00893ea4 663bc2          cmp     ax,dx\n00893ea7 7322            jae     winload!CmpFindNLSData+0x2bb (00893ecb)\n00893ea9 8b75f0          mov     esi,dword ptr [ebp-10h]\n00893eac 33db            xor     ebx,ebx\n00893eae 0fb7c1          movzx   eax,cx\n00893eb1 d1e8            shr     eax,1\n00893eb3 66391c47        cmp     word ptr [edi+eax*2],bx\n00893eb7 740c            je      winload!CmpFindNLSData+0x2b5 (00893ec5)\n00893eb9 6603ce          add     cx,si\n00893ebc 66894dd8        mov     word ptr [ebp-28h],cx\n00893ec0 663bca          cmp     cx,dx\n00893ec3 72e9            jb      winload!CmpFindNLSData+0x29e (00893eae)\n00893ec5 8b75ec          mov     esi,dword ptr [ebp-14h]\n00893ec8 8b5d08          mov     ebx,dword ptr [ebp+8]\n00893ecb 6a36            push    36h\n00893ecd 58              pop     eax\n00893ece 663907          cmp     word ptr [edi],ax\n00893ed1 8b7d0c          mov     edi,dword ptr [ebp+0Ch]\n00893ed4 0f8496000000    je      winload!CmpFindNLSData+0x360 (00893f70)\n00893eda 8d45e0          lea     eax,[ebp-20h]\n00893edd 50              push    eax\n00893ede ff75f4          push    dword ptr [ebp-0Ch]\n00893ee1 56              push    esi\n00893ee2 ff5604          call    dword ptr [esi+4]\n00893ee5 85c0            test    eax,eax\n00893ee7 0f84b9feffff    je      winload!CmpFindNLSData+0x196 (00893da6)\n00893eed 8d4dd8          lea     ecx,[ebp-28h]\n00893ef0 8bd0            mov     edx,eax\n00893ef2 51              push    ecx\n00893ef3 8bce            mov     ecx,esi\n00893ef5 e88c310000      call    winload!CmpFindValueByName (00897086)\n00893efa 894508          mov     dword ptr [ebp+8],eax\n00893efd 8d45c8          lea     eax,[ebp-38h]\n00893f00 50              push    eax\n00893f01 56              push    esi\n00893f02 ff5608          call    dword ptr [esi+8]\n00893f05 8d45e0          lea     eax,[ebp-20h]\n00893f08 50              push    eax\n00893f09 56              push    esi\n00893f0a ff5608          call    dword ptr [esi+8]\n00893f0d 8b4508          mov     eax,dword ptr [ebp+8]\n00893f10 83f8ff          cmp     eax,0FFFFFFFFh\n00893f13 0f8495feffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893f19 8d4dd0          lea     ecx,[ebp-30h]\n00893f1c 51              push    ecx\n00893f1d 50              push    eax\n00893f1e 56              push    esi\n00893f1f ff5604          call    dword ptr [esi+4]\n00893f22 85c0            test    eax,eax\n00893f24 0f8484feffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893f2a 8b5508          mov     edx,dword ptr [ebp+8]\n00893f2d 8d4dc0          lea     ecx,[ebp-40h]\n00893f30 51              push    ecx\n00893f31 8d4df8          lea     ecx,[ebp-8]\n00893f34 51              push    ecx\n00893f35 50              push    eax\n00893f36 8bce            mov     ecx,esi\n00893f38 e8c1320000      call    winload!CmpValueToData (008971fe)\n00893f3d 894704          mov     dword ptr [edi+4],eax\n00893f40 85c0            test    eax,eax\n00893f42 7408            je      winload!CmpFindNLSData+0x33c (00893f4c)\n00893f44 8d45c0          lea     eax,[ebp-40h]\n00893f47 50              push    eax\n00893f48 56              push    esi\n00893f49 ff5608          call    dword ptr [esi+8]\n00893f4c 8d45d0          lea     eax,[ebp-30h]\n00893f4f 50              push    eax\n00893f50 56              push    esi\n00893f51 ff5608          call    dword ptr [esi+8]\n00893f54 33c9            xor     ecx,ecx\n00893f56 394f04          cmp     dword ptr [edi+4],ecx\n00893f59 0f844ffeffff    je      winload!CmpFindNLSData+0x19e (00893dae)\n00893f5f 8b45f8          mov     eax,dword ptr [ebp-8]\n00893f62 66894702        mov     word ptr [edi+2],ax\n00893f66 668907          mov     word ptr [edi],ax\n00893f69 394de8          cmp     dword ptr [ebp-18h],ecx\n00893f6c 7412            je      winload!CmpFindNLSData+0x370 (00893f80)\n00893f6e eb02            jmp     winload!CmpFindNLSData+0x362 (00893f72)\n00893f70 33c9            xor     ecx,ecx\n00893f72 33c0            xor     eax,eax\n00893f74 894b04          mov     dword ptr [ebx+4],ecx\n00893f77 668903          mov     word ptr [ebx],ax\n00893f7a 894f04          mov     dword ptr [edi+4],ecx\n00893f7d 668907          mov     word ptr [edi],ax\n00893f80 8b4d10          mov     ecx,dword ptr [ebp+10h]\n00893f83 b001            mov     al,1\n00893f85 6a14            push    14h\n00893f87 5a              pop     edx\n00893f88 c741044c1a8e00  mov     dword ptr [ecx+4],offset winload!`string' (008e1a4c)\n00893f8f 66895102        mov     word ptr [ecx+2],dx\n00893f93 668911          mov     word ptr [ecx],dx\n00893f96 e915feffff      jmp     winload!CmpFindNLSData+0x1a0 (00893db0)\n00893f9b cc              int     3```\n\n```\n",
  "votes": "0",
  "answers": 3,
  "views": "253",
  "tags": [
    "disassembly",
    "assembly",
    "register"
  ],
  "user": "Bhavya Singh",
  "time": "Sep 8, 2020 at 10:30",
  "comments": [
    {
      "user": "macro_controller",
      "text": "You can see in the non-official documentation of the function here: codewarrior.cn/ntdoc/wrk/config/CmpFindNLSData.htm",
      "time": null
    },
    {
      "user": "fpmurphy",
      "text": "You asked a similar question last month.  See reverseengineering.stackexchange.com/questions/25728/…",
      "time": null
    },
    {
      "user": "blabb",
      "text": "not once but twice and I already told it either takes 3 or 5 parameters I saw ecx but didn't see edx except for a push edx (which might be an argument to the call [esi+4]",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "ok  it is _fastCall\nso this function takes 5 arguments\n2 in registers ecx,edx 3 in stack 8,12,16\nand As I Commented edx is used as an argument to the First Indirect call [esi+4]\n\ncopy pasted the disassembly to notepad++\nused the column editor to rip out the bytes from the paste\npasted the bytes in hxd to make a bin\n\n```\nOffset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000  8B FF 55 8B EC 83 EC 40 53 56 57 8D 45 E0 8B F1  ‹ÿU‹ìƒì@SVW.Eà‹ñ\n00000010  50 33 DB 89 75 EC 83 CF FF 89 5D CC 52 56 89 7D  P3Û‰uìƒÏÿ‰]ÌRV‰}\n00000020  C8 89 7D D0 89 5D D4 89 7D E0 89 5D E4 89 7D C0  È‰}Ð‰]Ô‰}à‰]ä‰}À\n00000030  89 5D C4 89 5D E8 FF 56 04 85 C0 0F 84 5D 01 00  ‰]Ä‰]èÿV.…À.„]..\n00000040  00 8D 4D F4 8B D0 51 68 B8 20 8E 00 8B CE E8 69  ..Mô‹ÐQh¸ Ž.‹Îèi\n00000050  51 00 00 8D 45 E0 50 56 FF 56 08 39 7D F4 0F 84  Q...EàPVÿV.9}ô.„\n00000060  3A 01 00 00 8D 45 E0 50 FF 75 F4 56 FF 56 04 85  :....EàPÿuôVÿV.…\n00000070  C0 0F 84 27 01 00 00 8D 4D F4 8B D0 51 68 F8 20  À.„'....Mô‹ÐQhø \n00000080  8E 00 8B CE E8 33 51 00 00 8D 45 E0 50 56 FF 56  Ž.‹Îè3Q...EàPVÿV\n00000090  08 39 7D F4 0F 84 04 01 00 00 8D 45 E0 50 FF 75  .9}ô.„.....EàPÿu\n000000A0  F4 56 FF 56 04 85 C0 0F 84 F1 00 00 00 8D 4D F4  ôVÿV.…À.„ñ....Mô\n000000B0  8B D0 51 68 08 21 8E 00 8B CE E8 FD 50 00 00 8D  ‹ÐQh.!Ž.‹ÎèýP...\n000000C0  45 E0 50 56 FF 56 08 39 7D F4 0F 84 CE 00 00 00  EàPVÿV.9}ô.„Î...\n000000D0  8D 45 E0 50 FF 75 F4 56 FF 56 04 85 C0 0F 84 BB  .EàPÿuôVÿV.…À.„»\n000000E0  00 00 00 68 70 22 8E 00 8B D0 8B CE E8 85 33 00  ...hp\"Ž.‹Ð‹Îè…3.\n000000F0  00 8B F8 8D 45 E0 50 56 FF 56 08 83 FF FF 0F 84  .‹ø.EàPVÿV.ƒÿÿ.„\n00000100  9A 00 00 00 8D 45 D0 50 57 56 FF 56 04 85 C0 0F  š....EÐPWVÿV.…À.\n00000110  84 89 00 00 00 8D 4D C8 8B D7 51 8D 4D F8 51 50  „‰....MÈ‹×Q.MøQP\n00000120  8B CE E8 C7 34 00 00 8B F8 8D 45 D0 50 56 89 7D  ‹ÎèÇ4..‹ø.EÐPV‰}\n00000130  DC FF 56 08 85 FF 74 66 8B 55 F8 33 C9 33 C0 66  ÜÿV.…ÿtf‹Uø3É3Àf\n00000140  89 55 DA 66 89 4D D8 C7 45 F0 02 00 00 00 66 3B  ‰UÚf‰MØÇEð....f;\n00000150  C2 73 1D 8B 75 F0 0F B7 C1 D1 E8 66 39 1C 47 74  Âs.‹uð.·ÁÑèf9.Gt\n00000160  0C 66 03 CE 66 89 4D D8 66 3B CA 72 E9 8B 75 EC  .f.Îf‰MØf;Êré‹uì\n00000170  8B 5D 08 6A 36 58 66 39 07 75 0C C7 45 E8 01 00  ‹].j6Xf9.u.ÇEè..\n00000180  00 00 E9 92 00 00 00 8D 45 E0 50 FF 75 F4 56 FF  ..é’....EàPÿuôVÿ\n00000190  56 04 85 C0 75 13 8D 45 C8 50 56 FF 56 08 32 C0  V.…Àu..EÈPVÿV.2À\n000001A0  5F 5E 5B 8B E5 5D C2 0C 00 8D 4D D8 8B D0 51 8B  _^[‹å]Â...MØ‹ÐQ‹\n000001B0  CE E8 C0 32 00 00 8B F8 8D 45 C8 50 56 FF 56 08  ÎèÀ2..‹ø.EÈPVÿV.\n000001C0  33 C0 89 45 DC 8D 45 E0 50 56 FF 56 08 83 FF FF  3À‰EÜ.EàPVÿV.ƒÿÿ\n000001D0  74 CC 8D 45 D0 50 57 56 FF 56 04 85 C0 74 BF 8D  tÌ.EÐPWVÿV.…Àt¿.\n000001E0  4D C0 8B D7 51 8D 4D F8 51 50 8B CE E8 FD 33 00  MÀ‹×Q.MøQP‹Îèý3.\n000001F0  00 89 43 04 85 C0 74 08 8D 45 C0 50 56 FF 56 08  .‰C.…Àt..EÀPVÿV.\n00000200  8D 45 D0 50 56 FF 56 08 33 C0 39 43 04 74 8F 8B  .EÐPVÿV.3À9C.t.‹\n00000210  45 F8 66 89 43 02 66 89 03 8D 45 E0 50 FF 75 F4  Eøf‰C.f‰..EàPÿuô\n00000220  56 FF 56 04 85 C0 0F 84 72 FF FF FF 68 48 22 8E  VÿV.…À.„rÿÿÿhH\"Ž\n00000230  00 8B D0 8B CE E8 3C 32 00 00 8B F8 8D 45 E0 50  .‹Ð‹Îè<2..‹ø.EàP\n00000240  56 FF 56 08 83 FF FF 0F 84 51 FF FF FF 8D 45 D0  VÿV.ƒÿÿ.„Qÿÿÿ.EÐ\n00000250  50 57 56 FF 56 04 85 C0 0F 84 40 FF FF FF 8D 4D  PWVÿV.…À.„@ÿÿÿ.M\n00000260  C8 8B D7 51 8D 4D F8 51 50 8B CE E8 7E 33 00 00  È‹×Q.MøQP‹Îè~3..\n00000270  8B F8 8D 45 D0 50 56 89 7D DC FF 56 08 85 FF 0F  ‹ø.EÐPV‰}ÜÿV.…ÿ.\n00000280  84 19 FF FF FF 8B 55 F8 33 C9 33 C0 66 89 55 DA  „.ÿÿÿ‹Uø3É3Àf‰UÚ\n00000290  66 89 4D D8 66 3B C2 73 22 8B 75 F0 33 DB 0F B7  f‰MØf;Âs\"‹uð3Û.·\n000002A0  C1 D1 E8 66 39 1C 47 74 0C 66 03 CE 66 89 4D D8  ÁÑèf9.Gt.f.Îf‰MØ\n000002B0  66 3B CA 72 E9 8B 75 EC 8B 5D 08 6A 36 58 66 39  f;Êré‹uì‹].j6Xf9\n000002C0  07 8B 7D 0C 0F 84 96 00 00 00 8D 45 E0 50 FF 75  .‹}..„–....EàPÿu\n000002D0  F4 56 FF 56 04 85 C0 0F 84 B9 FE FF FF 8D 4D D8  ôVÿV.…À.„¹þÿÿ.MØ\n000002E0  8B D0 51 8B CE E8 8C 31 00 00 89 45 08 8D 45 C8  ‹ÐQ‹ÎèŒ1..‰E..EÈ\n000002F0  50 56 FF 56 08 8D 45 E0 50 56 FF 56 08 8B 45 08  PVÿV..EàPVÿV.‹E.\n00000300  83 F8 FF 0F 84 95 FE FF FF 8D 4D D0 51 50 56 FF  ƒøÿ.„•þÿÿ.MÐQPVÿ\n00000310  56 04 85 C0 0F 84 84 FE FF FF 8B 55 08 8D 4D C0  V.…À.„„þÿÿ‹U..MÀ\n00000320  51 8D 4D F8 51 50 8B CE E8 C1 32 00 00 89 47 04  Q.MøQP‹ÎèÁ2..‰G.\n00000330  85 C0 74 08 8D 45 C0 50 56 FF 56 08 8D 45 D0 50  …Àt..EÀPVÿV..EÐP\n00000340  56 FF 56 08 33 C9 39 4F 04 0F 84 4F FE FF FF 8B  VÿV.3É9O..„Oþÿÿ‹\n00000350  45 F8 66 89 47 02 66 89 07 39 4D E8 74 12 EB 02  Eøf‰G.f‰.9Mèt.ë.\n00000360  33 C9 33 C0 89 4B 04 66 89 03 89 4F 04 66 89 07  3É3À‰K.f‰.‰O.f‰.\n00000370  8B 4D 10 B0 01 6A 14 5A C7 41 04 4C 1A 8E 00 66  ‹M.°.j.ZÇA.L.Ž.f\n00000380  89 51 02 66 89 11 E9 15 FE FF FF CC              ‰Q.f‰.é.þÿÿÌ\n\n```\nloaded the bin file as raw x86 le @base 0x893c10\nadded a few structs,overridesfunction declarations and a passable PseudoCode emerges as below\n\n```\nbool __fastcall\nCmpFindNLSData(_HHIVE32 *MyHive,ulong *index,UNICODE_STRING *ACP_NSL,UNICODE_STRING *OEMHAL,\n              UNICODE_STRING *DEFINTL)\n\n{\n  bool bVar1;\n  ulong *indx;\n  ulong uVar2;\n  short *psVar3;\n  PWSTR pWVar4;\n  uint uVar5;\n  ulong local_44;\n  ulong local_3c;\n  ulong local_34;\n  ushort local_2c [2];\n  short *local_28;\n  ulong local_24;\n  ulong local_10;\n  USHORT local_c [4];\n  \n  local_3c = 0xffffffff;\n  local_34 = 0xffffffff;\n  local_24 = 0xffffffff;\n  local_44 = 0xffffffff;\n  bVar1 = false;\n  indx = (*MyHive->GetCellRoutine)(MyHive,index);\n  if (indx == (ulong *)0x0) {\n    return false;\n  }\n  func_0x00898dcc(MyHive,indx,(UNICODE_STRING *)0x8e20b8,&local_10);\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n  if (local_10 == 0xffffffff) {\n    return false;\n  }\n  indx = (ulong *)(*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n  if (indx == (ulong *)0x0) {\n    return false;\n  }\n  func_0x00898dcc(MyHive,indx,(UNICODE_STRING *)0x8e20f8,&local_10);\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n  if (local_10 == 0xffffffff) {\n    return false;\n  }\n  indx = (ulong *)(*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n  if (indx == (ulong *)0x0) {\n    return false;\n  }\n  func_0x00898dcc(MyHive,indx,(UNICODE_STRING *)0x8e2108,&local_10);\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n  if (local_10 == 0xffffffff) {\n    return false;\n  }\n  uVar2 = (*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n  if (uVar2 == 0) {\n    return false;\n  }\n  indx = (ulong *)func_0x00897086(0x8e2270);\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n  if (indx == (ulong *)0xffffffff) {\n    return false;\n  }\n  uVar2 = (*MyHive->GetCellRoutine)(MyHive,indx);\n  if (uVar2 == 0) {\n    return false;\n  }\n  psVar3 = (short *)func_0x008971fe(uVar2,local_c,&local_3c);\n  local_28 = psVar3;\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_34);\n  if (psVar3 == (short *)0x0) {\n    return false;\n  }\n  uVar5 = 0;\n  local_2c[0] = 0;\n  if (local_c[0] != 0) {\n    do {\n      if (*(short *)((int)psVar3 + uVar5) == 0) break;\n      local_2c[0] = (short)uVar5 + 2;\n      uVar5 = (uint)local_2c[0];\n    } while (local_2c[0] < local_c[0]);\n  }\n  if (*psVar3 == 0x36) {\n    bVar1 = true;\n  }\n  else {\n    uVar2 = (*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n    if (uVar2 == 0) goto LAB_00893da6;\n    indx = (ulong *)func_0x00897086(local_2c);\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_3c);\n    local_28 = (short *)0x0;\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n    if (indx == (ulong *)0xffffffff) {\n      return false;\n    }\n    uVar2 = (*MyHive->GetCellRoutine)(MyHive,indx);\n    if (uVar2 == 0) {\n      return false;\n    }\n    pWVar4 = (PWSTR)func_0x008971fe(uVar2,local_c,&local_44);\n    ACP_NSL->Buffer = pWVar4;\n    if (pWVar4 != (PWSTR)0x0) {\n      (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_44);\n    }\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_34);\n    if (ACP_NSL->Buffer == (PWSTR)0x0) {\n      return false;\n    }\n    ACP_NSL->MaximumLength = local_c[0];\n    ACP_NSL->Length = local_c[0];\n  }\n  uVar2 = (*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n  if (uVar2 == 0) {\n    return false;\n  }\n  indx = (ulong *)func_0x00897086(0x8e2248);\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n  if (indx == (ulong *)0xffffffff) {\n    return false;\n  }\n  uVar2 = (*MyHive->GetCellRoutine)(MyHive,indx);\n  if (uVar2 == 0) {\n    return false;\n  }\n  psVar3 = (short *)func_0x008971fe(uVar2,local_c,&local_3c);\n  local_28 = psVar3;\n  (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_34);\n  if (psVar3 == (short *)0x0) {\n    return false;\n  }\n  uVar5 = 0;\n  local_2c[0] = 0;\n  if (local_c[0] != 0) {\n    do {\n      if (*(short *)((int)psVar3 + uVar5) == 0) break;\n      local_2c[0] = (short)uVar5 + 2;\n      uVar5 = (uint)local_2c[0];\n    } while (local_2c[0] < local_c[0]);\n  }\n  if (*psVar3 != 0x36) {\n    uVar2 = (*MyHive->GetCellRoutine)(MyHive,(ulong *)local_10);\n    if (uVar2 == 0) {\nLAB_00893da6:\n      (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_3c);\n      return false;\n    }\n    indx = (ulong *)func_0x00897086(local_2c);\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_3c);\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_24);\n    if (indx == (ulong *)0xffffffff) {\n      return false;\n    }\n    uVar2 = (*MyHive->GetCellRoutine)(MyHive,indx);\n    if (uVar2 == 0) {\n      return false;\n    }\n    pWVar4 = (PWSTR)func_0x008971fe(uVar2,local_c,&local_44);\n    OEMHAL->Buffer = pWVar4;\n    if (pWVar4 != (PWSTR)0x0) {\n      (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_44);\n    }\n    (*MyHive->ReleaseCellRoutine)(MyHive,(ulong)&local_34);\n    if (OEMHAL->Buffer == (PWSTR)0x0) {\n      return false;\n    }\n    OEMHAL->MaximumLength = local_c[0];\n    OEMHAL->Length = local_c[0];\n    if (!bVar1) goto LAB_00893f80;\n  }\n  ACP_NSL->Buffer = (PWSTR)0x0;\n  ACP_NSL->Length = 0;\n  OEMHAL->Buffer = (PWSTR)0x0;\n  OEMHAL->Length = 0;\nLAB_00893f80:\n  DEFINTL->Buffer = (PWSTR)0x8e1a4c;\n  DEFINTL->MaximumLength = 0x14;\n  DEFINTL->Length = 0x14;\n  return true;\n}\n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Sep 9, 2020 at 18:31",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Typically, a register's value being used in a function prior to being initializing it is a hint that it may be a parameter.\n\nHere we see ecx being used for the first time in this function:\n\n```\n00893c1e 8bf1            mov     esi,ecx\n\n```\nThere are a few different standard calling conventions that pass parameters in the ecx register such as fastcall. C++ compilers also can use thiscall calling convention, which passes the this pointer of an object to the function via the ecx register. Later on we see this:\n\n```\n00893cfa 8bce            mov     ecx,esi\n00893cfc e885330000      call    winload!CmpFindValueByName (00897086)\n\n```\nPlacing the same value back in ecx and calling another function. It is highly likely that ecx is being used to pass parameters in these functions.\n\n",
      "votes": "1",
      "user": "Shane Reilly",
      "time": "Sep 8, 2020 at 13:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "David",
          "text": "The call to ecx+4 (esi is ecx here) at 0x893c46 is also a good sign of behaviour like a virtual function table.",
          "time": null
        }
      ]
    },
    {
      "content": "To determine if a function is using some registers as parameters: You could find the call references of the function, then see prior to the function call if those registers' values are copied from other operands and then later in the function, those values are used.\n\n",
      "votes": "0",
      "user": "Minh-Triet Pham Tran",
      "time": "Sep 8, 2020 at 16:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}