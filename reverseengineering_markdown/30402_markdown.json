{
  "title": "How can I make Ghidra have access to external libraries?",
  "link": "https://reverseengineering.stackexchange.com/questions/30402/how-can-i-make-ghidra-have-access-to-external-libraries",
  "content": "I am trying to decompile a executable file, I have the source code of the external libraries that it is using, I wonder if there is a way that I can make Ghidra recognize these libraries, just like it does with windows calls, e.g: fopen,printf, etc.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "6k",
  "tags": [
    "x86",
    "ghidra"
  ],
  "user": "Rafael Ferreira",
  "time": "May 13, 2022 at 21:39",
  "comments": [],
  "answers_data": [
    {
      "content": "If I understand the question correctly, this is what should be done in order for Ghidra to have access to external libraries.\n\nFor the following C code:\n\n```\n#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello World\");\n    return 1;\n}\n\n```\nCompile the code with your favorite compiler, I choose clang. With the compiler front-end, clang code.c -o code that will produce an executable.\n\nIn Ghidra create a new project and import the executable file to Ghidra either by dragging the file to the Project or in the menu choose \"file\" and press \"Import File\" (Press I in the keyboard) and choose the executable file.\n\nAfter importing the executable file Ghidra will show you a Dialog:\n\n\n\nIn the Dialog click on Options and a new window will appear:\n\n\n\nTick \"Load External Libraries\" and press \"OK\" twice. Ghidra will locate and import the necessary external libraries to your project.\n\n",
      "votes": "2",
      "user": "BadSugar",
      "time": "May 14, 2022 at 21:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}