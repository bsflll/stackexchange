{
  "title": "ELF file format find shared object for symbol",
  "link": "https://reverseengineering.stackexchange.com/questions/22640/elf-file-format-find-shared-object-for-symbol",
  "content": "(in Windows) PE file format contains Import table with Module\\Dll Name which tells PE loader where to search for symbol e.g. KERNEL32.dll -> CreateFileW\n\nIn the ELF file format there is Symbol table with info field which tells if the symbol is Global\\Local\\Weak\\etc.\n\nMy question is how does the Unix loader know what is the module, shared object where to search for this symbol e.g. ???? -> snprintf\n\nI noticed objdump can dump this info objdump -T /bin/ls.\n\nGLIBC_2.2.5 snprintf\n\nCould someone with more knowledge on ELF file format shed some light on Unix dynamic-linking?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "310",
  "tags": [
    "elf",
    "dynamic-linking"
  ],
  "user": "krusty",
  "time": "Nov 29, 2019 at 12:21",
  "comments": [],
  "answers_data": [
    {
      "content": "Short answer: it does not. It just searches the whole list of loaded modules until the symbol is found (or not). A small degree of control over more exact symbol matching can be achieved via versioned symbols but otherwise it's pretty much a free-for-all.\n\nBy design, the ELF symbol space is global (or flat) so any symbol can be preempted by another module. This is used for example when hooking symbols via LD_PRELOAD_LIBRARY environment variable.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Nov 29, 2019 at 13:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}