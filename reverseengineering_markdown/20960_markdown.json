{
  "title": "What changed after Android 8.0?",
  "link": "https://reverseengineering.stackexchange.com/questions/20960/what-changed-after-android-8-0",
  "content": "I compile code below use library Cydia Substrate, and run on a test application, and it works Android 4.4, 5.1, 6.0, 7.0, 7.1. But on Android 8.0+ application does not work with this code, why is that? Why hook does not work in own process?\n\n```\n#include <jni.h>\n#include <CydiaSubstrate.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nlong baseAddr(char *soname) //find base address\n{\n    void *imagehandle = dlopen(soname, RTLD_LOCAL | RTLD_LAZY);\n    if (soname == NULL)\n        return NULL;\n    if (imagehandle == NULL){\n        return NULL;\n    }\n    uintptr_t * irc = NULL;\n    FILE *f = NULL;\n    char line[200] = {0};\n    char *state = NULL;\n    char *tok = NULL;\n    char * baseAddr = NULL;\n    if ((f = fopen(\"/proc/self/maps\", \"r\")) == NULL)\n        return NULL;\n    while (fgets(line, 199, f) != NULL)\n    {\n        tok = strtok_r(line, \"-\", &state);\n        baseAddr = tok;\n        tok = strtok_r(NULL, \"\\t \", &state);\n        tok = strtok_r(NULL, \"\\t \", &state); // \"r-xp\" field\n        tok = strtok_r(NULL, \"\\t \", &state); // \"0000000\" field\n        tok = strtok_r(NULL, \"\\t \", &state); // \"01:02\" field\n        tok = strtok_r(NULL, \"\\t \", &state); // \"133224\" field\n        tok = strtok_r(NULL, \"\\t \", &state); // path field\n\n        if (tok != NULL) {\n            int i;\n            for (i = (int)strlen(tok)-1; i >= 0; --i) {\n                if (!(tok[i] == ' ' || tok[i] == '\\r' || tok[i] == '  \n' || tok[i] == '\\t'))\n                    break;\n                tok[i] = 0;\n            }\n            {\n                size_t toklen = strlen(tok);\n                size_t solen = strlen(soname);\n                if (toklen > 0) {\n                    if (toklen >= solen && strcmp(tok + (toklen - solen), soname) == 0) {\n                        fclose(f);\n                        return (long)strtoll(baseAddr,NULL,16);\n                    }\n                }\n            }\n        }\n    }\n    fclose(f);\n    return NULL;\n}\n\nlong location;\n\nlong RealOffset(long offset)\n{\n    if (location == 0)\n    {\n\n        location = baseAddr(\"/data/app/com.test.test-1/lib/arm/libtest.so\");\n        if (location == 0)\n        {\n\n            location = baseAddr(\"/data/app-lib/com.test.test-1/libtest.so\");\n        }\n    }\n    return location + offset;\n}\n\nvoid orig_func(void*);\nvoid hook_func(void*){\n    return;\n}\n\n__attribute__((constructor))\nvoid main() {\n    MSHookFunction((void *) RealOffset(0x1234C), (void *) &hook_func, (void **) &orig_func); //replace the function\n}\n\n```\n",
  "votes": "0",
  "answers": 0,
  "views": "104",
  "tags": [
    "android"
  ],
  "user": "Cly 4",
  "time": "Mar 25, 2019 at 19:26",
  "comments": [
    {
      "user": "Chris Stratton",
      "text": "Even if your goal is reverse engineering, the question as currently written is about software development, and is lacking specific information about the failure which would be required when posting a development debug question.  Please consider putting in some logging to dump the maps file it is parsing to logcat and record the progress of your program.",
      "time": null
    },
    {
      "user": "Cly 4",
      "text": "The problem is in Android 8.0 :) There can not get root to check error records in logcat. And i have AMD, in Android Studio can't run Android above 7.1",
      "time": null
    },
    {
      "user": "Chris Stratton",
      "text": "Logcat does not require root",
      "time": null
    },
    {
      "user": "Cly 4",
      "text": "Yes, i checked, After Android 8.0 changed patch now: /data/app/com.test.test-dGVzdGV0ZXN0dA==/lib/arm/libtest.so  And with each installation, this patch change.",
      "time": null
    },
    {
      "user": "Chris Stratton",
      "text": "You probably should not have hardcoded the expected path in the first place.  There are java apis to get the app's data directory that you could pass down to your jni code.  Or you can simply recognize the map entry where the actual filename matches rather than trying to match the directory name, which seems to include some sort of base64-like uniqueness or versioning.",
      "time": null
    }
  ],
  "answers_data": []
}