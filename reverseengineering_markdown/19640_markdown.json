{
  "title": "Wrong RVA values inside IMAGE_IMPORT_DESCRIPTOR",
  "link": "https://reverseengineering.stackexchange.com/questions/19640/wrong-rva-values-inside-image-import-descriptor",
  "content": "I load the entire PE into an std::vector<Byte> fileContent using std::fstream.\n\nThen I obtain the executable's dos header:\n\nIMAGE_DOS_HEADER* imageDosHeader = (IMAGE_DOS_HEADER*)fileContent.data();\n\nAfter that, I check whether the PE is valid(MZ and PE00 signatures).\n\nIf it is, I get its import descriptor:\n\n```\nIMAGE_IMPORT_DESCRIPTOR* imageImportDescriptor = (IMAGE_IMPORT_DESCRIPTOR*)((DWORD)imageDosHeader + imageNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n\n//Note: the VirtualAddress field equals 0x4FFC, so I assume it's valid\n\n```\nNow, I iterate through the dlls and try to display their names as following:\n\n```\nfor(DWORD i = 0; ; i++)\n{\n    bool isCurrentDllValid = true;\n\n    //if all fields of the current dll are zeros, then this dll is the last one, so break the outer loop\n    for(DWORD j = 0; j < sizeof(IMAGE_IMPORT_DESCRIPTOR); j++)\n    {\n        if((*(DWORD*)((DWORD)&imageImportDescriptor[i] + j)))\n            break;\n        else if(j == sizeof(IMAGE_IMPORT_DESCRIPTOR) - 1)\n            isCurrentDllValid = false;\n    }\n\n    if(!isCurrentDllValid)\n        break;\n\n    char* dllName = (char*)((DWORD)imageDosHeader + imageImportDescriptor[i].Name);\n\n```\nThe problem is: an attempt to display the dllName causes crash.\n\nAlso, the Name field is an RVA, but its value is 0x6C61766E (the same thing is with the rest of the fields, the smallest one is TimeDateStamp with 0x637465, still abnormal one), while size of the PE is less than 0x7000.\n\nIn hex editor, RVA of e.g. \"KERNEL32.dll\" is 0x46F0.\n\nHave you any idea why is it so? Am I missing something really simple?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "windows",
    "binary-analysis",
    "pe",
    "binary",
    "binary-format"
  ],
  "user": "anx199",
  "time": "Oct 16, 2018 at 16:18",
  "comments": [
    {
      "user": "mrexodia",
      "text": "You are forgetting that rva is not the same as the offset in the file. Unless you have a dump from memory in your vector you will have to convert the rva to a file offset.",
      "time": null
    },
    {
      "user": "anx199",
      "text": "@mrexodia Thanks for your reply, I realized that yesterday. It's such a silly mistake.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@mrexodia you should add this as an answer so it’s not hidden in a comment",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "I usually only use this site from my phone, so it’s always cumbersome to write answers... I wrote one though:)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Unfortunately the real life samples don’t always follow the nice and tidy specification; they only need to work on a specific implementation, not the ideal one described in the documentation. \n\nCorkami gathers details about practical PE format features, for example:\n\nOr maybe this:\n\nSo check if you have either situation. \n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Oct 16, 2018 at 22:05",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Unless you are loading a mapped PE file in your vector, you have to convert all RVAs to file offsets.\n\nThe pseodocode looks something like this:\n\n```\nfunc rva2offset(pe, rva):\n    for section in pe.sections:\n        if rva >= section.rva and rva < section.rva + section.size:\n            return section.fileoffset + (rva - section.rva)\n    return nil\n\n```\nThe code does not account for the actual way the kernel maps the PE file in memory (alignment and other edge cases), so use it with care.\n\n",
      "votes": "5",
      "user": "mrexodia",
      "time": "Oct 25, 2018 at 7:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "LFMekz",
          "text": "Gotta love MrExodia. You really are a legend out here. Really helped. By the way if youre using Microsoft horribly outdated and jargon heavy PE pages with ambiguous offsets. The more explict form to their crappy struct ref for me SectionHeader.PointerToRawData + RVA  - SectionHeader.VirtualAddress. RVA is what you need to convert (in my case was OffSetToData for resource_data)",
          "time": null
        }
      ]
    }
  ]
}