{
  "title": "Why is there in a nop in the while loop",
  "link": "https://reverseengineering.stackexchange.com/questions/2876/why-is-there-in-a-nop-in-the-while-loop",
  "content": "So I have the following C code I wrote:\n\n```\n#include <stdio.h>\n\n\nint main() {\n    int i = 1;\n\n    while(i) {\n        printf(\"in loop  \n\");\n        i++;\n\n        if(i == 10) {\n            break;\n        }\n    }\n\n    return 0;\n}\n\n```\nCompiled with gcc (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 it disassembles to this:\n\n```\n   0x000000000040051c <+0>: push   %rbp\n   0x000000000040051d <+1>: mov    %rsp,%rbp\n   0x0000000000400520 <+4>: sub    $0x10,%rsp\n   0x0000000000400524 <+8>: movl   $0x1,-0x4(%rbp)\n   0x000000000040052b <+15>:    jmp    0x400541 <main+37>\n   0x000000000040052d <+17>:    mov    $0x400604,%edi\n   0x0000000000400532 <+22>:    callq  0x4003f0 <puts@plt>\n   0x0000000000400537 <+27>:    addl   $0x1,-0x4(%rbp)\n   0x000000000040053b <+31>:    cmpl   $0xa,-0x4(%rbp)\n   0x000000000040053f <+35>:    je     0x400549 <main+45>\n   0x0000000000400541 <+37>:    cmpl   $0x0,-0x4(%rbp)\n   0x0000000000400545 <+41>:    jne    0x40052d <main+17>\n   0x0000000000400547 <+43>:    jmp    0x40054a <main+46>\n   0x0000000000400549 <+45>:    nop\n   0x000000000040054a <+46>:    mov    $0x0,%eax\n   0x000000000040054f <+51>:    leaveq \n   0x0000000000400550 <+52>:    retq  \n\n```\nWhy is there a nop on +45? And why does not je on +35 just jump right to +46?\n\n",
  "votes": "12",
  "answers": 3,
  "views": "2k",
  "tags": [
    "disassembly"
  ],
  "user": "Sindre Smistad",
  "time": "Oct 3, 2013 at 22:28",
  "comments": [],
  "answers_data": [
    {
      "content": "It might be for function alignment. As it is now it returns on 0x400550, which can be divided by 8. If it returned on 0x40054f it isn't aligned. Just a speculation, though.\n\n",
      "votes": "15",
      "user": "perror",
      "time": "Oct 13, 2013 at 8:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Sindre Smistad",
          "text": "I Googled function alignment and found this post on SO, and it seems to answer my question in some more detail. Thank you for your help.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "Sorry, I'm not convinced this is function alignment. This only applies to function starts, not ends. It's not -falign-labels either (there is a nop inserted as per description of falign-labels but the adjusted address is not used). I rather think this is caused by the compiler reserving some bytes for longer representation of opcodes and not cleaned up.",
          "time": null
        },
        {
          "user": "microtherion",
          "text": "Yes, this just appears to be unoptimized code. Try comparing the code generated by -O3 or -Os to the code generated by -O0.",
          "time": null
        }
      ]
    },
    {
      "content": "via Optimizing subroutines in assembly language by Agner Fog. PDF\n\n",
      "votes": "3",
      "user": "alexanderh",
      "time": "Oct 18, 2013 at 22:33",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "Can you point out this better alignment in the OP's disassembly? I don't get why the nops place would be an improvement.",
          "time": null
        }
      ]
    },
    {
      "content": "Another reason for NOP insertion is due to pipeline scheduling. If it takes a cycle for branch prediction to determine whether it was correct or not (and if not to flush the pipe), then you'd need a cycle delay before results are committed to registers.\n\nRegarding the specific example where the jump equal goes to a NOP, it appears to me that the processor needs a cycle to determine whether it got the right answer or not and adjust the pipe as necessary. \n\nGreat job digging in to the code and understanding what is going on. :)\n\n",
      "votes": "0",
      "user": "bitsdanceforme",
      "time": "Mar 19, 2014 at 16:14",
      "is_accepted": false,
      "comments": []
    }
  ]
}