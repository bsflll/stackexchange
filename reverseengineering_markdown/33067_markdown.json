{
  "title": "Extract flag from .exe file",
  "link": "https://reverseengineering.stackexchange.com/questions/33067/extract-flag-from-exe-file",
  "content": "I have to extract a flag from a test.exe file. The respective flag is run as an argument for the test.exe file => \"test.exe FlagName\" and in this way I will reach the next flag.\n\nI determined type of test.exe file:\n\nBase address: 00400000\nEntry point: 0041200a\n\nMSDOS\n\n```\nOperation system: MS-DOS[8086, 16-bit, EXE]\n\n```\nPE32\n\n```\nOperation system: Windows(95)[I386, 32-bit, Console]\nLinker: Microsoft Linker\nLanguage: C#\nLibrary: .NET(v4.0.30319)\nProtector: Confuser(1.X)\nProtection: Obfuscation(Heuristic)[Modified EP + Strange EP position + Strange sections + Anti-ILDASM + Ctrl flow + Watermark]\nProtection: Anti analysis(Heuristic)[Anti-dump]\nPacker: Packer detected(Heuristic)[Last section EP + Section 0 (\"Ih?|(0\") compressed]\n\n```\nIDA Interactive Disassembler, the only information\n\n\n\nOutput of Ghidra decompiler:\n\nvoid entry(void)\n\n{\n\n/* WARNING: Could not recover jumptable at 0x0041200a. Too many branches */\n\n/* WARNING: Treating indirect jump as call */\n\n_CorExeMain();\n\nreturn;\n\n}\n\nundefined __fastcall FUN_00405d00(undefined4 param_1,undefined2 param_2)\n\n{\n\nundefined uVar1;\n\nint in_EAX;\n\nbyte in_CF;\n\n*(int *)(in_EAX + -0x2693f8e2) = *(int *)(in_EAX + -0x2693f8e2) + 0x6f + (uint)in_CF;\n\nuVar1 = in(param_2);\n\nreturn uVar1;\n\n}\n\nOutput of Ghidra for each Ghidra decompiled function, assembly lines:\n\n```\n                         //\n                         // SECTION.4 \n                         // ram:00412000-ram:004121ff\n                         //\n                         **************************************************************\n                         *                POINTER to EXTERNAL FUNCTION                *\n                         **************************************************************\n                         undefined _CorExeMain()\n         undefined         AL:1           <RETURN>\n                         0  _CorExeMain  <<not bound>>\n                         PTR__CorExeMain_00412000                        XREF[3]:     00400158(*), 00400224(*), \n                                                                                      entry:0041200a  \n    00412000 90 88 00 00     addr       MSCOREE.DLL::_CorExeMain\n    00412004 00              ??         00h\n    00412005 00              ??         00h\n    00412006 00              ??         00h\n    00412007 00              ??         00h\n    00412008 00              ??         00h\n    00412009 00              ??         00h\n                         **************************************************************\n                         *                       THUNK FUNCTION                       *\n                         **************************************************************\n                         thunk undefined entry()\n                           Thunked-Function: MSCOREE.DLL::_CorExeMain\n         undefined         AL:1           <RETURN>\n                         entry                                           XREF[2]:     Entry Point(*), 004000a8(*)  \n    0041200a ff 25 00        JMP        dword ptr [->MSCOREE.DLL::_CorExeMain]\n             20 41 00\n    00412010 00 00 00        align      align(496)\n             00 00 00 \n             00 00 00 \n\n\n\n\n\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined __fastcall FUN_00405d00(undefined4 param_1, un\n         undefined         AL:1           <RETURN>\n         undefined4        ECX:4          param_1\n         undefined2        DX:2           param_2\n                         FUN_00405d00                                    XREF[1]:     Entry Point(*)  \n    00405d00 83 90 1e        ADC        dword ptr [EAX + 0xd96c071e],0x6f\n             07 6c d9 6f\n    00405d07 8e e4           MOV        FS,SP\n    00405d09 1f              POP        DS\n    00405d0a ec              IN         AL,param_2\n    00405d0b cb              RETF\n    00405d0c dc              ??         DCh\n    00405d0d 05              ??         05h\n    00405d0e a3              ??         A3h\n    00405d0f b0              ??         B0h\n\n```\nFrom what I understand, there are 2 options:\n\nIn both situations I don't understand anything, I need help and solving the problem, to receive the 2nd flag. If it is possible, I would like the solution for both of the 2 options.\n\nMany thanks\n\n",
  "votes": "0",
  "answers": 0,
  "views": "162",
  "tags": [
    "assembly",
    "decompilation",
    "c++",
    "ghidra"
  ],
  "user": "RandomUser",
  "time": "Jul 8, 2024 at 9:25",
  "comments": [
    {
      "user": "Robert",
      "text": "The output Library: .NET(v4.0.30319) may indicate that the binary contains .Net byte code. have you tried to load it in a Dot.Net decompiler like IlSpy? IDA and Ghidra may only recognize the native launcher and ignore the attached .Net byte code.",
      "time": null
    },
    {
      "user": "RandomUser",
      "text": "I tried DNsSPy and IlSpy, but the output is more confusing like the output of the Ghidra, as example:   internal class \\u200e\\u202c\\u202d\\u206e\\u200e\\u206c\\u200e\\u206c\\u200d\\u200b\\u206b\\u206f\\u206b\\u206e\\u202b   Maybe the code is protected by some \"obfuscated method\". Today I read about that, I saw my output :   Protector: Confuser(1.X) Protection: Obfuscation(Heuristic)[Modified EP + Strange EP position + Strange sections + Anti-ILDASM + Ctrl flow + Watermark]   So...now I am searching about a of how to revert \"obfuscated \" technique",
      "time": null
    },
    {
      "user": "Виолетта",
      "text": "give link to exe file, you neeed try use x64dbg, and try dump, use ScyllaHide",
      "time": null
    }
  ],
  "answers_data": []
}