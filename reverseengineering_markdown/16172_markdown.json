{
  "title": "In Memory DLL Injection",
  "link": "https://reverseengineering.stackexchange.com/questions/16172/in-memory-dll-injection",
  "content": "I am currently working on learning how different types of DLL injection can be performed. Right now I am able to run a function by:\n\nSo, right now I am just executing a _MessageBox_ which is surely uninteresting. What I want to do right now is to execute a function which will load a DLL into its own address space and execute it, like how a traditional PE loader works. I took a reference code and tried but I am getting an access violation when I inspect using Olly. \n\nPlease tell me, is it even possible?\n\n",
  "votes": "0",
  "answers": 3,
  "views": "2k",
  "tags": [
    "ollydbg",
    "c++",
    "winapi",
    "dll-injection"
  ],
  "user": "ashish",
  "time": "Aug 24, 2017 at 8:10",
  "comments": [],
  "answers_data": [
    {
      "content": "Aphex has demo's written in Delphi with a few code injection examples. Should compile with Delphi 2007...maybe even with Delphi 7.\n\nMost examples rely on Aphex's AfxCodeHook library (with source), and this is where the heavy lifting is done. Even without a copy of Delphi, you can review this source to understand the techniques used.\n\n",
      "votes": "2",
      "user": "Mick",
      "time": "Aug 28, 2017 at 17:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "ashish",
          "text": "I came across some C# examples, they were always using an assembly stub routine to resolve dlls and DllMain function call stub. Why is that so?",
          "time": null
        },
        {
          "user": "Mick",
          "text": "I am not familiar with C# having the ability to call inline asm. Certainly possible in C/C++/Delphi. Can you link a specific example?",
          "time": null
        },
        {
          "user": "ashish",
          "text": "Please see here",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Unlikely to be as easy on Windows 7 onwards, especially with the plethora of options that can be enabled to thwart certain exploit types (think EMET and friends).",
          "time": null
        }
      ]
    },
    {
      "content": "Yes it is possible but to load a DLL into a process's own address space , what are you using?\n\nYou should use LoadLibrary(\"my.dll\") for this case.\nNote that you dont need to use CreateRemoteThread() for this case.\n\n",
      "votes": "0",
      "user": "stng",
      "time": "Aug 24, 2017 at 8:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "I imagine OP was asking about remotely injecting a DLL, not loading to it's own process.",
          "time": null
        },
        {
          "user": "stng",
          "text": "From OP's ques: \"What I want to do right now is to execute a function which will load a DLL into its own address space and execute it\"",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Please read the entirety of OPs question, you'll see it clearly discusses DLL injections.",
          "time": null
        },
        {
          "user": "stng",
          "text": "Yes I have read it completely, He initially did discuss DLL injection in a remote process but first he wants to know how to load a DLL in a normal process itself and which according to me he is correct in doing because first you should know how to load a dll normally in your own process then you can think about remotely injecting it!",
          "time": null
        },
        {
          "user": "ashish",
          "text": "Please see the code I have written here",
          "time": null
        }
      ]
    },
    {
      "content": "Well as you already pointed out the usual process of a simple DLL injection is\n\nYou said you already managed to create a thread and open a message box.\nTo load your payload library you just need to call LoadLibrary instead of MessageBox.\n\nThat would be, in my opinion, the easiest way to inject a library into a process. However, sometimes you need to use a different technique since Anti Virus / Anti Cheat Software (depending on your work area) can block this method easily.\n\nA more advanced method is Manual Mapping. Basically you are loading the payload library yourself, without the help of the operating system, and map it into the target process' memory. Instructions for this method can be found here.\n\nAnother little trick when working with low level Windows stuff is to take a look at the reactOS documentation. reactOS is a different operating system, but implements the Windows API. It's not garuanteed to be fully compatible but it should give you an idea how the functions are implemented.\n\nFor example, you can find the implementation of LoadLibrary here.\n\nThere are more ways to get your code into your target. Let your creativity run free.\n\nBy the way, a neat library I like to use for this tasks is BlackBone.\n\n",
      "votes": "0",
      "user": "Michael Pittino",
      "time": "Aug 25, 2017 at 9:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "ashish",
          "text": "Actually, I was trying to ManualMapping but it was not working in my case. As in manual map, we have to specify the function which will get executed and its size and the technique that most of the code found on the internet is same (subtracting an empty function defined just after our function) and it did not work. I manually wrote the size by making it a separate section using #pragma, but it also didn't  seem to work.",
          "time": null
        },
        {
          "user": "ashish",
          "text": "And as I add LoadLibrary method just after the MessageBox API, the DLL gets loaded but as soon as it gets loaded the process exits. What can be the problem?",
          "time": null
        },
        {
          "user": "Michael Pittino",
          "text": "Do you create a new thread in your payload's DllMain?",
          "time": null
        },
        {
          "user": "ashish",
          "text": "Yes, I first write the payload code using WriteProcessMemory and then I use CreateRemoteThread giving it the payload address.",
          "time": null
        }
      ]
    }
  ]
}