{
  "title": "Run PE File - (Executable) From Memory",
  "link": "https://reverseengineering.stackexchange.com/questions/17110/run-pe-file-executable-from-memory",
  "content": "Would be grateful for your suggestion.Trying to run a 32/64bit on (Windows 10- 64 bit /Visual studio) program which tries to run an executable from memory.This is for my learning purpose.\n\n```\n#include <iostream> // Standard C++ library for console I/O\n#include <string> // Standard C++ Library for string manip\n#include <Windows.h> // WinAPI Header\n#include <TlHelp32.h> //WinAPI Process API\n\n#ifdef _WIN64\ntypedef IMAGE_NT_HEADERS64  IMAGE_NT_HEADERS;\ntypedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;\ntypedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;\ntypedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;\n#else\ntypedef IMAGE_NT_HEADERS32  IMAGE_NT_HEADERS;\ntypedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;\ntypedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;\ntypedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;\n#endif \n\n\n// use this if you want to read the executable from disk\nHANDLE MapFileToMemory(LPCSTR filename)\n{\n  std::streampos size;\n  std::fstream file(filename, std::ios::in | std::ios::binary \n |std::ios::ate);\n if (file.is_open())\n {\n    size = file.tellg();\n\n    char* Memblock = new char[size]();\n\n    file.seekg(0, std::ios::beg);\n    file.read(Memblock, size);\n    file.close();\n\n    return Memblock;\n    }\n return 0;\n }\n int RunPortableExecutable(void* Image)\n  {\n   IMAGE_DOS_HEADER* DOSHeader; // For Nt DOS Header symbols\n   IMAGE_NT_HEADERS* NtHeader; // For Nt PE Header objects & symbols\n   IMAGE_SECTION_HEADER* SectionHeader;\n\n    PROCESS_INFORMATION PI; \n    STARTUPINFOA SI; \n    CONTEXT* CTX;\n\n\nDWORD* ImageBase; //Base address of the image\nvoid* pImageBase; // Pointer to the image base\n\nint count;\nchar CurrentFilePath[1024];\n\nDOSHeader = PIMAGE_DOS_HEADER(Image); // Initialize Variable\nNtHeader = PIMAGE_NT_HEADERS(DWORD(Image) + DOSHeader->e_lfanew); // Initialize\n\nGetModuleFileNameA(0, CurrentFilePath, 1024); // path to current executable\n\nif (NtHeader->Signature == IMAGE_NT_SIGNATURE) // Check if image is a PE File.\n{\n    ZeroMemory(&PI, sizeof(PI)); // Null the memory\n    ZeroMemory(&SI, sizeof(SI)); // Null the memory\n\n    if (CreateProcessA(CurrentFilePath, NULL, NULL, NULL, FALSE,\n        CREATE_SUSPENDED, NULL, NULL, &SI, &PI)) // Create a new instance of current\n        //process in suspended state, for the new image.\n    {\n        // Allocate memory for the context.\n        CTX = LPCONTEXT(VirtualAlloc(NULL, sizeof(CTX), MEM_COMMIT, PAGE_READWRITE));\n        CTX->ContextFlags = CONTEXT_FULL; // Context is allocated\n\n        if (GetThreadContext(PI.hThread, LPCONTEXT(CTX))) //if context is in thread\n        {\n            // Read instructions\n            ReadProcessMemory(PI.hProcess, LPCVOID(CTX->Rbx + 8), LPVOID(&ImageBase), 4, 0);\n\n            pImageBase = VirtualAllocEx(PI.hProcess, LPVOID(NtHeader->OptionalHeader.ImageBase),\n                NtHeader->OptionalHeader.SizeOfImage, 0x3000, PAGE_EXECUTE_READWRITE);\n\n            // Write the image to the process\n            WriteProcessMemory(PI.hProcess, pImageBase, Image, NtHeader->OptionalHeader.SizeOfHeaders, NULL);\n\n            for (count = 0; count < NtHeader->FileHeader.NumberOfSections; count++)\n            {\n                SectionHeader = PIMAGE_SECTION_HEADER(DWORD(Image) + DOSHeader->e_lfanew + 248 + (count * 40));\n\n                WriteProcessMemory(PI.hProcess, LPVOID(DWORD(pImageBase) + SectionHeader->VirtualAddress),\n                    LPVOID(DWORD(Image) + SectionHeader->PointerToRawData), SectionHeader->SizeOfRawData, 0);\n            }\n            WriteProcessMemory(PI.hProcess, LPVOID(CTX->Rbx + 8),\n                LPVOID(&NtHeader->OptionalHeader.ImageBase), 4, 0);\n\n            // Move address of entry point to the eax register\n            CTX->Rax = DWORD(pImageBase) + NtHeader->OptionalHeader.AddressOfEntryPoint;\n            SetThreadContext(PI.hThread, LPCONTEXT(CTX)); // Set the context\n            ResumeThread(PI.hThread); //´Start the process/call main()\n\n            return 0; // Operation was successful.\n        }\n    }\n}\n\n      //enter valid bytes of a  *64 BIT* program here.\n      //Sample code \n       unsigned char rawData[37376] = {\n       0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00}; \n\n    int main()\n {\n      RunPortableExecutable(rawData); // run executable from the array - \n                                 // 64bit program in hex -coverted from exe\n       getchar();\n }\n\n```\nAfter successful compile on VS 2017 on x64 platform , getting exception.\n\n```\n if(NtHeader->Signature == IMAGE_NT_SIGNATURE) // Check if image is a PE File  \n\n```\nStill clueless on how the 64bit PE format works on Windows 10.\nIs the issue on running code (hex format) or this program itself?\nAm i missing any points? Any suggestions useful.\n\n",
  "votes": "2",
  "answers": 5,
  "views": "13k",
  "tags": [
    "c++",
    "pe",
    "x86-64",
    "windows-10"
  ],
  "user": "Chandra",
  "time": "Jan 4, 2018 at 10:49",
  "comments": [
    {
      "user": "user2073973",
      "text": "You have to make sure that your compiler is compiling as the same \"bitness\" (don't know the correct word) as the payload you are trying to run. If you compile the injector as 64 bit, your payload also has to be 64 bit. Same goes for 32 bit applications",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "what exception?",
      "time": null
    },
    {
      "user": "Chandra",
      "text": "@PawełŁukasik: Unhandled exception at 0x00007FF64224103C in PE_execute.exe: 0xC0000005: Access violation reading location 0x00000000422540E8",
      "time": null
    },
    {
      "user": "Peanut",
      "text": "Have you debugged the program..? What's Signature pointing to? Doesn't really seem related to SRE",
      "time": null
    },
    {
      "user": "Chandra",
      "text": "Clearly x64 - NT memory pointing something out of bound. Please x86 and x64 comparison (Debug mode). Pls refer the link x86 and x64.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have managed to debug and find your problems, but it's really is out of scope since your \"bytes\" of a \"64 bit \" program does not have \"IMAGE_NT_SIGNATURE\" (PE00) but rather has \"IMAGE_DOS_SIGNATURE\" (MZ). https://i.sstatic.net/NdPCQ.png\n\nIf I were you, I would first find/prepare proper code for running it as SHELL CODE ( by the way, you know that exploits/shells/malware use the same method yes ? ).\n\nFurthermore, your approach is wrong from the \"valid bytes of a  64 BIT program here\" to the end.\n\nI shall not post a full solution/answer because that way you will learn nothing.\nUse the following snippet in addition to what I said, and you shall succeed in your \"learning purpose\":\n\n```\nIMAGE_DOS_HEADER* lpDosHeader = (IMAGE_DOS_HEADER*)lpBaseAddress;\n\nif(lpDosHeader->e_magic != IMAGE_DOS_SIGNATURE)\n{\n    return 0;\n}\n\nIMAGE_NT_HEADERS* lpNtHeader = (IMAGE_NT_HEADERS*)(lpBaseAddress+lpDosHeader->e_lfanew);\n\nif(lpNtHeader->Signature != IMAGE_NT_SIGNATURE)\n{\n    return 0;\n}\n\n```\nNOTE that \"lpBaseAddress\" is BYTE*.\n\nMore reference: https://stackoverflow.com/questions/38161809/generating-shellcode-from-an-exe\n\n",
      "votes": "2",
      "user": "Mecanik",
      "time": "Jan 30, 2018 at 15:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "Chandra",
          "text": "@Nobert:  aware malware use the same method. This prof of concept.  On the Windows 10 (64bit OS )  -my original 32 bit  program has run time error though it compiled successfully.  Will try your new code and update here. Thanks for your efforts..Cheers!",
          "time": null
        },
        {
          "user": "Mecanik",
          "text": "@Chandra No problem, happy to help!",
          "time": null
        }
      ]
    },
    {
      "content": "So, you've initialized several bytes:\n\nunsigned char rawData[37376] = {\n       0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00}; \n\nBut then, you're accessing DOSHeader->e_lfanew which is not initialized in rawData.\nMost likely data DOSHeader->e_lfanew contains some trash like 0xCCCCCCCC or 0xDDDDDDDD, so NtHeader points to some memory outside of rawData and you get exception trying to access non-existing memory address.\n\n",
      "votes": "1",
      "user": "Anton Kukoba",
      "time": "Jan 4, 2018 at 15:23",
      "is_accepted": false,
      "comments": [
        {
          "user": "Chandra",
          "text": "MSDN says, In a valid PE file, the Signature field is set to the value 0x00004550, which in ASCII is \"PE00\". A #define, IMAGE_NT_SIGNATURE, is defined for this value. This is applicable  for 32bit files  or 64bits as well. My image hex look like this..  [link] (1drv.ms/i/s!AgQa8i37A0sigoIZPkX6dAmx4bOJMA). I have to change to 64 bit instead of 32 on hex  editor when i am copying.",
          "time": null
        },
        {
          "user": "Chandra",
          "text": "Please note that the above  rawData[ ] is NOT full hex value.",
          "time": null
        }
      ]
    },
    {
      "content": "The canonical example (IMHO) was written in C by Joachim Bauch in his MemoryModule project.\n\nThere is an Object-Pascal port (both Lazarus and Delphi) called BTMemoryModule.\n\n",
      "votes": "1",
      "user": "Mick",
      "time": "Jan 4, 2018 at 20:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "Chandra",
          "text": "Just checked example MemoryModule seems  work on 32bit version. Can not select X64 from visual studio to compile.So, it is 32 bit version only?",
          "time": null
        },
        {
          "user": "Mick",
          "text": "Comments in the codebase indicate it supports 64-bit. You'll have to add this as a build target yourself if you don't see it in Visual Studio.",
          "time": null
        }
      ]
    },
    {
      "content": "For anyone who sees this in the future.\nThe problem was indeed the 64 vs 32 bit issue that the asker thought. The mistake is in this line NtHeader = PIMAGE_NT_HEADERS(DWORD(Image) + DOSHeader->e_lfanew);.\n\nHere, you attempt to add two pointers as a hack to get an address and cast it as a pointer to IMAGE_NT_HEADERS structure. 64-bit pointers, as @dee_two mentioned are 64bits long and DWORD-ing them truncates them; you should get a warning from the vs compiler about this.\n\nThe solution is here: don't ever typecast pointers to DWORD, especially on 64-bit architecture. Instead typecast it to a ULONG_PTR or UINT_PTR, like this:\nNtHeader = PIMAGE_NT_HEADERS(ULONG_PTR(Image) + DOSHeader->e_lfanew);\n\nI lost too much time to find this answer...\n\n",
      "votes": "1",
      "user": "Avery3R",
      "time": "Mar 8, 2019 at 14:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "VOLVO",
          "text": "I use ULONG_PT instance of DWORD, but now, My Program will open self. (Not byte of exe).",
          "time": null
        }
      ]
    },
    {
      "content": "DWORD is typedefined as unsigned long which is 32bits but the address is 64bits long hence the access violation error. So, use size_t datatype which is typedefined as unsigned long long (64bits long).\n\nAs it is a 64 bit program, replace all DWORD's with size_t.\n\n",
      "votes": "0",
      "user": "dee_two",
      "time": "Feb 12, 2019 at 10:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}