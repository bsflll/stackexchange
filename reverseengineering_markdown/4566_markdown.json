{
  "title": "Understanding a specific assembly line",
  "link": "https://reverseengineering.stackexchange.com/questions/4566/understanding-a-specific-assembly-line",
  "content": "I try to analyze an .exe file and I have always something like that:\n\n```\nMOV EAX, DWORD PTR DS:[ESI]\n\n```\nI search a lot for that and I know that the expression with [...] means that we store the context of ESI in EAX. \nFor example, when I have in ESI the value 00000101 (5 in decimal), then I would represent it in C like this:\n\n```\n    int x = 5;\n    int y = x;\n\n```\nOk, thats fine, but what if I have an address in ESI ? Something like 001B5355 from which i know that it is an address. \nHow would I represent it then? Maybe use something like a pointer which would point to 001B5355 ?\n\n```\n  UnknownType *immediatePointer = &001B5355;\n\n  UnknownType *pointerEAX = *immediatePointer;\n\n```\nI need help because the whole assembly code of the .exe consists of that kind of lines and I do not know how to represent it to imagine how it could implement it. \n\n",
  "votes": "2",
  "answers": 2,
  "views": "383",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "user3097712",
  "time": "Jun 8, 2014 at 20:24",
  "comments": [],
  "answers_data": [
    {
      "content": "The instruction\n\n```\nMOV EAX, DWORD PTR DS:[ESI]\n\n```\ntakes the contents of the DWORD pointed to by DS:ESI. If you the value of ESI is known to you and is a constant, you could do it in a single line like this:\n\n```\nunsigned eax = *(unsigned *)0x001B5355;\n\n```\nYou can make it a little better by splitting it into two parts (as you have done) so that you can name the pointer.\n\n```\nunsigned *ptr = (unsigned *)0x001B5355;\nunsigned eax = *ptr;\n\n```\nThis assumes that unsigned is a 32-bit quantity with your compiler.\n\n",
      "votes": "5",
      "user": "Edward",
      "time": "Jun 8, 2014 at 20:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "user3097712",
          "text": "ok, thanks. You mean it is ok when I assume that it is or can be represented by using the pointer principle/concept ?",
          "time": null
        },
        {
          "user": "Edward",
          "text": "@user3097712: yes, that's correct, but be careful to use the correct syntax as I've shown in these examples.",
          "time": null
        }
      ]
    },
    {
      "content": "If esi holds 5 mov eax, [esi] will \ncreate an  access violation as 5 will not be a valid address in normal cases.\n\nand it does not translate to int x = 5 ; int y = x\nthat is represented by  mov eax , esi not mov eax [esi] \n\n```\npointermagic:\\>type pointermagic.cpp\n\nint x = 4;\nint *y = &x;\nint z = x + *y;\nint main (void)\n{\n    return z + x;\n}\n\npointermagic:\\>cl /Zi /nologo pointermagic.cpp /link /RELEASE\n\npointermagic:\\>cdb -c \"g main; uf @eip;q\" pointermagic.exe \n\n0:000> cdb: Reading initial command 'g main; uf @eip;q'    \npointermagic!main:\n00401000 55              push    ebp\n00401001 8bec            mov     ebp,esp\n00401003 a140bb4000      mov     eax,dword ptr [pointermagic!z (0040bb40)]\n00401008 030500b04000    add     eax,dword ptr [pointermagic!x (0040b000)]\n0040100e 5d              pop     ebp\n0040100f c3              ret\nquit:\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jun 9, 2014 at 7:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}