{
  "title": "Android App's hardcoded local keystore password r3versing",
  "link": "https://reverseengineering.stackexchange.com/questions/14701/android-apps-hardcoded-local-keystore-password-r3versing",
  "content": "Novice Android security researcher here. Recently I was tasked with the task/challenge of exposing a certain app's hardcoded local keystore password.\n\nI've decompiled it with JEB2 and obviously within huge mess of code I can see various references to the cryptographic algorithms, hashing and encoding routines (OCRA1, HMAC, SHA1, AES, base64 etc.) utilized in the classes and methods of the prototypes, related calls etc.\n\nNow, from the experienced pentester's viewpoint would it be possible to reveal the hardcoded pass through app's heap dumps or maybe traffic interception with the BurpSuite's mitm attack via fake certificate between the client/server point? If so, how would I then discern it from the ocean of other strings?!\n\nIf that's not possible what is the proper way to proceed from then on taking into account lack of experience in reading java or reverse engineering crypto stuff?\n\nRegards\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "decompilation",
    "android",
    "obfuscation",
    "encryption",
    "decryption"
  ],
  "user": "martin_s",
  "time": "Feb 21, 2017 at 19:16",
  "comments": [],
  "answers_data": [
    {
      "content": "First thing I'd try to search for uses of standard implementation of the key store,  KeyStore class. This class is external for the application and should be referenced by name.\n\nIf this key store uses standard API it probably uses the the KeyStore.load function which gets the desired password as a second parameter.\n\nGood luck. \n\n",
      "votes": "1",
      "user": "w s",
      "time": "Feb 21, 2017 at 7:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "martin_s",
          "text": "What about the heap dumping scenario, can that help ?",
          "time": null
        },
        {
          "user": "w s",
          "text": "@martin_s Only if the code and/or related strings are generated on the fly, obfuscated or encrypted. However in this case you'll probably receive a lot more strings, and the main problem of distinguishing between needed and not needed strings will remain.",
          "time": null
        },
        {
          "user": "w s",
          "text": "Do you know where is this local keystore located ? Is your code obfuscated ?",
          "time": null
        },
        {
          "user": "martin_s",
          "text": "@w s The challenger essentially told me that I should be able to discover all this vulnerabilites, keystore name and location with hard-coded pass by reading decompiled code.",
          "time": null
        },
        {
          "user": "martin_s",
          "text": "@w s Can you tell me the typical names and locations for the keystore file?",
          "time": null
        }
      ]
    },
    {
      "content": "With Jeb or another tool for static analysis of source code, seek out calls to the Keystore API classes and member functions. \n\nOnce you have identified a function of interest, especially if it has arguments that include the password or a hash of it, you can then move onto dynamic analysis of the code by using a hooking framework to hook the function of interest to inspect its arguments and return values. \n\nThere are several hooking frameworks available for Android, including frida and Xposed. \n\n",
      "votes": "2",
      "user": "Commodore1024",
      "time": "Jul 10, 2018 at 18:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}