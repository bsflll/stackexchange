{
  "title": "Combining a RAM snapshot and an exe in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/33353/combining-a-ram-snapshot-and-an-exe-in-ghidra",
  "content": "I have two things: (1) A .exe file, and (2) a memory snapshot of a system running that .exe file at a moment in time.\n\nGhidra's auto analyzer very nicely figures out the .exe file and separates it into .text and .data sections. But the .exe file doesn't have the memory addresses or values that were used by the system at the moment the snapshot was taken.\n\nCan I combine these two things in a useful way with Ghidra? I'd love it if the Ghidra file for the memory snapshot knew that the .exe was loaded in it - it's very helpful to have the right addresses and live values.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "108",
  "tags": [
    "ghidra"
  ],
  "user": "bbayles",
  "time": "Dec 29, 2024 at 2:20",
  "comments": [],
  "answers_data": [
    {
      "content": "I believe you can.\n\nFrom what I remember Ghidra has a auto-analyzer process where the .exe file can be separate sections like .text and .data.\nTo make use of the memory snapshot, youâ€™d want to map it to the .exe's sections. First, figure out where the .exe was loaded in memory (its base address) when the snapshot was taken. Then, in Ghidra, you can rebase the .text and .data sections to align with the memory addresses in the snapshot.(i believe this last sentence is possible i cant remember tho...)\n\nOnce its done, Ghidra will let you analyze the live values from the snapshot alongside the symbols and code from the .exe. This should give you a much clearer picture of how the executable was functioning at the time of the snapshot.\" (hope this helps!)\n\n",
      "votes": "0",
      "user": "bllry",
      "time": "Jan 1 at 6:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "hippietrail",
          "text": "I believe you use \"file/add to program\" to get two files into a single address space. There are two ways to \"reposition\" a memory block and I don't yet understand the difference. One has a four-way arrow icon and says \"Move a block to another address\" and the other has a house icon and says \"Set image base\". For some file formats you can specify a load address at load time, but not for Windows PE. But maybe however OP is loading the memory snapshot has such an option?",
          "time": null
        },
        {
          "user": "bbayles",
          "text": "Thanks - this is exactly the process I want to automate. The part where I manually relocate each section is what I'm trying to avoid.",
          "time": null
        },
        {
          "user": "Nalan PandiKumar",
          "text": "There are two types of loading the executables into ram. One method is using absolute addressing, in this method the exe file which about load into the ram, contains all the addresses of the segments hardcoded in the binary file itself  and in each execution, os load it into same address es , other method is relative addressing, in this method the binary file only contains offsets calculated relative to the instruction pointer this type binary is called PIE.",
          "time": null
        },
        {
          "user": "Nalan PandiKumar",
          "text": "The os can also load the binary anywhere in ram. It can also change the base address of the segments with the help of ASLR to make hard to predict the memory layout at runtime in between different executions.",
          "time": null
        }
      ]
    }
  ]
}