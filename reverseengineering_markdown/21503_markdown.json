{
  "title": "Unexpected SEGFAULT when there's apparently nothing that would cause it",
  "link": "https://reverseengineering.stackexchange.com/questions/21503/unexpected-segfault-when-theres-apparently-nothing-that-would-cause-it",
  "content": "This is a from a CTF problem I'm working on. Hopefully it's appropriate to ask this question here.\n\n\n\nAbove is the GDB output when the segfault goes off. movaps is the offending instruction, meaning that rsp+0x40 is most likely pointing to unmapped memory.\n\nHowever, a closer look at the memory allocated for the stack\n\n\n\nand rsp=0x00007ffde19d78a8 from the GDB output, shows that rsp+0x40 is well within the allocated bounds. This is really confusing for me, is there something I'm missing here? Something else I can look into to debug this?\n\nFinally the output when running this under strace\n\n```\n[pid 32671] --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL} ---\n[pid 32671] +++ killed by SIGSEGV (core dumped) +++\n\n```\nshows that it's apparently a null pointer dereference (si_addr=NULL), which doesn't make any sense to me because the offending instruction movaps XMMWORD PTR [rsp+0x40],xmm0 isn't accessing a NULL pointer?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "linux"
  ],
  "user": "Filip Kilibarda",
  "time": "Jun 17, 2019 at 22:31",
  "comments": [],
  "answers_data": [
    {
      "content": "According to this the address should be aligned by 16, which is not happen. Your rsp value is ending by 0xa8, so [rsp + 0x40] will be aligned by 8, not 16.\n\n",
      "votes": "2",
      "user": "w s",
      "time": "Jun 18, 2019 at 7:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "Filip Kilibarda",
          "text": "Should've read that 2nd paragraph! Thanks a lot, actually had no idea misalignment could trigger hardware faults, always thought it was just less efficient.",
          "time": null
        }
      ]
    }
  ]
}