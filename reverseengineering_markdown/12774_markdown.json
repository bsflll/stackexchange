{
  "title": "Win32 Structured Exception Handling in MS C++ - Mapping compiler code to assembly code",
  "link": "https://reverseengineering.stackexchange.com/questions/12774/win32-structured-exception-handling-in-ms-c-mapping-compiler-code-to-assembl",
  "content": "I am trying to read through Matt Pietrek article on \"A Crash Course on the Depths of Win32 Structured Exception Handling\" linked here. In the section titled Compiler-level SEH, he writes:\n\nAt this point, I am a bit confused. All along, until this point I thought that the callback function is the function that is going to handle the exception, i.e. the code inside the _except block. Kindly help me understand this.\n\nAlso, if the filter-expression code corresponds with the callback function, then what corresponds to the code inside '{}' after the filter-expression?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "824",
  "tags": [
    "windows",
    "x86",
    "c++",
    "exception",
    "seh"
  ],
  "user": "user1720897",
  "time": "Jun 1, 2016 at 9:02",
  "comments": [],
  "answers_data": [
    {
      "content": "In case of the compiler-level SEH, the callback invoked by the OS is the compiler-provided function, usually __except_handler3 or similar. Once called, it inspects the stack, retrieves the trylevel, looks up the corresponding scopetable entry and calls the exception filter (lpfnFilter). If the filter returns non-zero, the handler (lpfnHandler) is invoked - this is the code corresponding to the code inside the __except/__finally block.\nFor a specific example, check Appendix I here: http://www.openrce.org/articles/full_view/21\n\nNote that C++ EH uses a somewhat more complicated approach compared to \"simple\" SEH to ensure proper semantics (such as automatic object destruction during unwinding), so it's not as easy to map back to source code, but doable (see Appendix II in the above article).\n\nBTW, in recent Visual Studio versions, Microsoft provides almost complete CRT source, including the implementation of __except_handlerN and ___CxxFrameHandler, so you could look there too (e.g. \\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\crt\\src\\eh\\frame.cpp).\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Jun 1, 2016 at 10:40",
      "is_accepted": true,
      "comments": []
    }
  ]
}