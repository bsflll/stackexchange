{
  "title": "Reversing assembler DCD directive list into a c++ variable",
  "link": "https://reverseengineering.stackexchange.com/questions/13061/reversing-assembler-dcd-directive-list-into-a-c-variable",
  "content": "For example we have assembler variable \"foo\" defined as:\n\n```\n.text:00001078 foo      DCD 0xffffffff, 0xffffeeee\n\n```\nHow it(variable foo) would look like in c++(or whatever higher lang)???\n\n",
  "votes": "2",
  "answers": 1,
  "views": "53",
  "tags": [
    "disassembly",
    "assembly",
    "c++",
    "hexrays"
  ],
  "user": "Taggart Comet",
  "time": "Jul 17, 2016 at 15:28",
  "comments": [],
  "answers_data": [
    {
      "content": "Many possibilities.\n\nlong long foo=0xffffffffffffeeee (assuming big endian mode)\n\nlong long foo=0xffffeeeeffffffff (assuming big endian mode)\n\nint foo[2]={-1, -4370}\n\nshort foo[4]={-1, -1, -1, -4370}\n\nchar foo[16]=\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xee\\xee\\xee\\xee\"\n\nstruct { int a, short b, short c } foo = { -1, -1, -4370 } (and variations depending on endianness)\n\nYou really can't determine the original type of initalized data without looking at the code that uses it.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jul 17, 2016 at 15:45",
      "is_accepted": true,
      "comments": []
    }
  ]
}