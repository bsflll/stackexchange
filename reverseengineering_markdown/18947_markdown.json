{
  "title": "Why doesn't IDA break on the WriteFile function?",
  "link": "https://reverseengineering.stackexchange.com/questions/18947/why-doesnt-ida-break-on-the-writefile-function",
  "content": "I searched all places in IDA that call the imported WriteFile function and put a breakpoint on them.\n\nBut while debugging I saw with ProcMon that my exe wrote to the file but even though it did not stop on the breakpoint. I also saw that file was written to.\n\nWhy is that?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "590",
  "tags": [
    "ida",
    "breakpoint",
    "exe"
  ],
  "user": "Keystone",
  "time": "Jul 31, 2018 at 18:16",
  "comments": [
    {
      "user": "user22970",
      "text": "it might be accessing a lower level write api such as NtWriteFile, maybe try breaking on it instead? also, by hitting ctrl+x you can see where a function is being used. (cross reference)",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@Amirag: ... or higher-level such as those from the C runtime (fwrite, fprintf and other members of that family). Because if the application isn't statically linked these imports would be imports of the C runtime DLLs rather than of the application itself.",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "For your use case, you could use an API monitor to see precisely which functions are being called, as well as trigger a breakpoint  for a debugger to attach and handle.",
      "time": null
    },
    {
      "user": "Keystone",
      "text": "@NirIzr I never understand how to work with ApiMonitor ,all the time I tried to monitor process, thos process are close/ stack because of ApiMonitor",
      "time": null
    },
    {
      "user": "Keystone",
      "text": "@0xC0000022L import tab show only the function that compiled as static ? How can I see dynamic compiled functions like fwrite",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "A few possibilities come to mind:\n\nTo determine the real cause, double-click the event in Process Monitor and check the Stack tab. If you configure the symbols properly, you should see the actual path through the process and the kernel and determine what exact location in the process triggered the write and inspect the code there.\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Aug 1, 2018 at 15:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}