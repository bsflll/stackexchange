{
  "title": "How do I view the call stack of an executable?",
  "link": "https://reverseengineering.stackexchange.com/questions/22968/how-do-i-view-the-call-stack-of-an-executable",
  "content": "Basically I'm trying to edit memory (replace branch with a nop so the executable can't branch to auth function). I've done successful reverse engineering on gaming consoles, but I don't really know where to start on PC. WinDbg? VS2010 debugger? I would really appreciate any tips or pointers, thanks :)\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "330",
  "tags": [
    "memory"
  ],
  "user": "J. Doe",
  "time": "Jan 12, 2020 at 3:05",
  "comments": [
    {
      "user": "Kennet Celeste",
      "text": "What you are looking for is not suitable for here but rather tutorial websites and/or youtube videos.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think that what you are looking for is a disassembler for PE format files (Windows Portable Executable format). The call stack itself has nothing to do with it - you need to modify the flow of a program. \n\nWindbg and X64dbg are great debugging tools for PC, as well as IDA and Ghidra for static analysis and patching.\n\n",
      "votes": "2",
      "user": "macro_controller",
      "time": "Jan 12, 2020 at 11:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}