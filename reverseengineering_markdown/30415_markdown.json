{
  "title": "How to convert addresses shown by IDA when statically analyzing a DLL to real addresses in runtime",
  "link": "https://reverseengineering.stackexchange.com/questions/30415/how-to-convert-addresses-shown-by-ida-when-statically-analyzing-a-dll-to-real-ad",
  "content": "In a DLL I am trying to reverse there often is a reference to something I believe to be a fixed pointer (like a global var) which looks like dword_10038534. The references I am talking about look like this\n\n```\nv7 = dword_10038534\nv10 = v7\nv4 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v10 + 44))(v10, a2);\n\n```\nFor context this DLL was created in late 90s using Visual c++ (most likely VC++4). There is no anti-debug or packing in place. I have heard that patterns like the one I've shown may be connected with C++ classes and virtual method table, however I have strong reasons to believe the DLL was written in C not C++, although this is unconfirmed\n\n",
  "votes": "1",
  "answers": 0,
  "views": "162",
  "tags": [
    "ida",
    "windows",
    "dll",
    "pointer",
    "msvc"
  ],
  "user": "Curious User",
  "time": "May 17, 2022 at 11:02",
  "comments": [
    {
      "user": "Robert",
      "text": "The following article itself as well as linked articles may be of interest for you: devblogs.microsoft.com/oldnewthing/20170120-00/?p=95225",
      "time": null
    }
  ],
  "answers_data": []
}