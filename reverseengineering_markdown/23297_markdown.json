{
  "title": "Hash from pseudocode [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/23297/hash-from-pseudocode",
  "content": "What is the hash? Generated from ida pro\n\n```\nint __fastcall hash(_BYTE *a1)\n{\n  _BYTE *v1; // r4@1\n  int v2; // r5@1\n  int v3; // r6@1\n\n  v1 = a1;\n  v2 = 0;\n  v3 = 1;\n  while ( *v1 )\n  {\n    v3 = (*v1 + v3) % 51407;\n    v2 = (v3 + v2) % 51407;\n    ++v1;\n  }\n  return ~(v3 | (v2 << 16));\n}\n\n```\n",
  "votes": "-2",
  "answers": 1,
  "views": "107",
  "tags": [
    "ida",
    "c++",
    "c"
  ],
  "user": "William E. Conger",
  "time": "5 years ago",
  "comments": [
    {
      "user": "multithr3at3d",
      "text": "Ways to solve this on your own: 1. Research code for hash algorithms, compare to this decompilation 2. Run an input through this function, compare it to the output of the same input through known hash functions.",
      "time": null
    },
    {
      "user": "multithr3at3d",
      "text": "It is important that you include in the question what you've already tried and the research you've done.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "for an array x[] whose count is n\n\nthe series for v3 without the mod()  will be \n\nn * (1 + x[0]) +  (n-1) * x[1] +  (n-2) * x[2] + (n-3) * x[3] + .... (n-r) * x[r] +...+ x[n]  \n\nthe series for v2 without the mod() will be\n\n1+x[0]+x[1]+x[2]+....x[r]+...x[n]\n\nassuming \"secret\" is passed as input\nthen hash will be 0xf72efd78\n\nredone in python\n\n```\ninput = \"secret\"\nl = len(input)\nv2 = 0\nv3 = 1\nfor i in range(0,l,1):\n    v3 = (ord(input[i]) + v3)\n    v2 = v3 + v2\n    print(hex(v2),hex(v3))\nprint (\"hash for input %s = %08x\" %(input,(~(v2 << 16 | v3)) & 0xffffffff))\n\n```\nresult \n\n```\n0x74 0x74  \n0x14d 0xd9 \n0x289 0x13c\nconforming the series for v2\n>>> hex( 3 * (1 + ord(\"secret\"[0])) + 2 * ord(\"secret\"[1]) + 1 * ord(\"secret\"[2]))\n'0x289'\n0x437 0x1ae\n0x64a 0x213\n0x8d1 0x287\nhash for input secret = f72efd78\n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Feb 20, 2020 at 17:35",
      "is_accepted": true,
      "comments": [
        {
          "user": "William E. Conger",
          "text": "It is Adler-32 with custom base number 51407",
          "time": null
        }
      ]
    }
  ]
}