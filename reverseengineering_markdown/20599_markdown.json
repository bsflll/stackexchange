{
  "title": "IDAPython modules: Prefer using idaapi or ida_*, and ignore idc completely?",
  "link": "https://reverseengineering.stackexchange.com/questions/20599/idapython-modules-prefer-using-idaapi-or-ida-and-ignore-idc-completely",
  "content": "I've recently started writing a few IDAPython plugins or scripts instead of using the native SDK, but I think I did not really figure out which module(s) are recommended to be imported. Typically, my script imports look somehow like this:\n\n```\nimport ida_funcs\nimport ida_kernwin\nimport ida_lines\nimport ida_nalt\nimport ida_name\nimport ida_segment\nimport ida_struct\nimport idaapi\nimport idautils\nimport idc\nfrom ida_bytes import *\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n```\nI've only just now realized that the idaapi module imports all the single modules. For example, I can define an action handler as\n\n```\nclass MyHandler(ida_kernwin.action_handler_t):\n\n```\nbut also as\n\n```\nclass MyHandler(idaapi.action_handler_t):\n\n```\nSo far, I was always trying to find the module the members originate from, and replace idaapi with the original module name where possible. But then I found BADADDR to originate from an ida_idaapi module, and the name feels so ridiculous, I wondered if I've been doing the right thing all along. The source and documentation on it is quite empty.\n\nThen, on the other hand, there is idc, which seems to provide IDC like functions, even with C style name casing. If I recall correctly, I read that the usage of this module is deprecated and only meant for quickly porting IDC scripts; the documentation prominently states\n\n```\nThis file is subject to change without any notice.\nFuture versions of IDA may use other definitions.\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "idapython",
    "idapro-sdk"
  ],
  "user": "Ray",
  "time": "Feb 11, 2019 at 17:39",
  "comments": [],
  "answers_data": [
    {
      "content": "Short answer is that both idaapi and idc modules should be avoided if possible.\n\nThe idaapi module is there for backwards compatibility and should be avoided if possible. It will be dropped in a future version of IDA (probably with little to no warning ahead of time). You should strongly prefer the ida_ prefixed modules.\n\nIn older versions of IDA, a single module exposed all IDA functionality (that was idaapi), with a few modules implementing utility functions (in idautils) and IDC-translations to ease migration from IDC to IDAPython (in idc).\n\nWith IDA 6.95, IDA's python SDK was divided into multiple modules and idaapi was left to avoid breaking all existing code that relies on the idaapi module. \n\nSince the idc module has been part of IDA for a long while (since IDAPython started), I think it'll remain part of IDA for longer than idaapi, so if you have to pick whether to use idc or idaapi (and cannot use the specific ida_* modules, for some obscure reason), I suggest you prefer idc over idaapi.\n\nIt's also important to note that idaapi has nearly no content on itself, and you'll see that nowadays idaapi.py is mostly composed of importing the other modules into it's namespace. This is also wrong for several reasons (accidental namespace overshadowing, longer load times by loading unnecessary code) and was part of the reason the namespace was split.\n\nThe ida_idaapi module, however, is part of the new interface and should be used whenever needed. This is where general definitions that have no other reasonable module are made.\n\nProtip: When I want to convert an idaapi usage to an ida_* usage, I simply import the object at hand and print it's help, which will list where is this object actually defined.\n\nP.S.\nAlthough not really a duplicate, this is somewhat related to How is IDAPython API structured?\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Feb 11, 2019 at 14:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ray",
          "text": "Thanks for clearing that up! The link to your answer (which I fixed, was cut off at the start) also gives a great insight on the history :)",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Is this still valid? Even the example idapythonrc.py still references idaapi ...",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "@0xC0000022L I believe so. idaapi is a wrapper around other ida_* modules and is left there for backwards compatibility. the idapythonrc.py example is a good example of why the backwards compatibility is still there. If you take a look at it's history you'll see it hasn't really changed for quite a while, while newer idapython script files use the ida_* modules instead.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Hmm, interesting. Thanks. It does indeed seem to be left alone. But backwards compatibility seems odd, given the break we head in compatibility just some versions ago (both because of an overhaul of all the names and Python 2.x vs. Python 3.x). Dropping that aspect would have been very easy at that point, IMO. Now anything going forward making use of the idaapi functionality without heeding the (not very obvious) warning signs of its deprecation is going to mean another breakage down the road :-|",
          "time": null
        }
      ]
    }
  ]
}