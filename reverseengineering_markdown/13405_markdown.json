{
  "title": "WinDbg - RVA of current instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/13405/windbg-rva-of-current-instruction",
  "content": "Do someone know a windbg command to display the RVA of a certain instruction within it's module?\n\nRight now, if I want to find the RVA of the current instruction, let's say, the RVA of that test eax, eax:\n\n```\n16237915 8b4e0c          mov     ecx,dword ptr [esi+0Ch]\n16237918 e8633ff0ff      call    NPSWF32!BrokerMainW+0x1b0a4 (1613b880)\n1623791d 85c0            test    eax,eax\n1623791f 7507            jne     NPSWF32!BrokerMainW+0x11714c (16237928)\n16237921 8bce            mov     ecx,esi\n16237923 e80838fdff      call    NPSWF32!BrokerMainW+0xea954 (1620b130)\n16237928 8b4810          mov     ecx,dword ptr [eax+10h]\n\n```\nI have to find first the base address of the module:\n\n```\n0:000> lm a 1623791d \nBrowse full module list\nstart    end        module name\n15c70000 16b53000   NPSWF32    (export symbols)     \n\n```\nAnd calculate the RVA myself:\n1623791d - 15c70000 = 5C791D\n\nMy question, is there a windbg command that will give me this result immediately.\n\nThanks in advance!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "973",
  "tags": [
    "disassembly",
    "windows",
    "debugging",
    "debuggers",
    "windbg"
  ],
  "user": "Aviv",
  "time": "Sep 1, 2016 at 9:29",
  "comments": [],
  "answers_data": [
    {
      "content": "put this is some txt file and save it somewhere like c:\\myrva.txt\n\n```\n.foreach ( place { lm1ma ${$arg1} } ){ .printf \"Rva for input is %x  \n\", ${$arg1}-${place} }\n\n```\nand use it like \n\n```\n0:000> $$>a< c:\\\\rva.txt @edx\nRva for input is 470b4\n0:000> ? edx\nEvaluate expression: 1997238452 = 770b70b4\n0:000> $$>a< c:\\\\rva.txt .\nRva for input is a04fa\n0:000> ? .\nEvaluate expression: 1997604090 = 771104fa\n0:000> $$>a< c:\\\\rva.txt 7711050a\nRva for input is a050a\n\n```\nWell if you think this should be a regular windbg command you can write your own extension\nand do !rva \nwith engextcpp framework this should take no more than 5 lines of code as below \n\n```\n#include <engextcpp.cpp>\nclass EXT_CLASS : public ExtExtension {\npublic:\n    EXT_COMMAND_METHOD(rva);\n};\nEXT_DECLARE_GLOBALS();\nEXT_COMMAND( rva, \"rva\", \"{;e,d=@$ip;!rva;}\" ) {\n    ULONG64 inaddr = GetUnnamedArgU64 (0);\n    ULONG ModIndex = NULL;\n    ULONG64 Modbase = NULL;\n    m_Symbols->GetModuleByOffset(inaddr,0,&ModIndex,&Modbase);\n    Out(\"Rva For Inaddress %I64x is %I64X  \n\" ,inaddr ,(inaddr - Modbase));    \n}\n\n```\ncompiled and linked with \n\n```\ncl /LD /nologo /W4 /Ox  /Zi /EHsc rva.cpp /link /EXPORT:DebugExtensionInitialize /Export:rva /Export:help /RELEASE %linklibs%\n\n```\nand execute happily it takes one argument an expression and by default the expression is current instruction pointer viz $ip \n\nextension auto loaded during start of session\n\n```\nwindbg -c \".load rva\" calc\n\n```\nand happy rvaing for ever\n\n```\n0:000> !rva\nRva For Inaddress 776e04f6 is A04F6\n0:000> !rva @edx\nRva For Inaddress 776870b4 is 470B4\n0:000> !rva ntdll\nRva For Inaddress 77640000 is 0\n0:000> !rva calc\nRva For Inaddress 440000 is 0\n0:000> !rva calc!WinMain\nRva For Inaddress 441635 is 1635\n\neven some obscure unrealistic expression will work\n0:000> !rva @@c++( ( @$proc )->Ldr)\nRva For Inaddress 77717880 is D7880\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Sep 2, 2016 at 7:47",
      "is_accepted": true,
      "comments": [
        {
          "user": "Aviv",
          "text": "Thank you for your solution, it works. I just feel like the feature should have existed as a windbg regular command",
          "time": null
        },
        {
          "user": "blabb",
          "text": "you can code your own extension that does this  ala windbg !rva style i edited my answer to include this approach you may take a look",
          "time": null
        }
      ]
    }
  ]
}