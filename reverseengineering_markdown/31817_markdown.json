{
  "title": "Replace a function in a Windows 32-bit binary with a custom C function",
  "link": "https://reverseengineering.stackexchange.com/questions/31817/replace-a-function-in-a-windows-32-bit-binary-with-a-custom-c-function",
  "content": "I am reverse engineering a Windows game from 1995 using Ghidra, and I'm currently documenting all the decompiled functions. My goal is to replace a function in the original binary with a custom C function, test the game, and proceed incrementally, one function at a time, rather than attempting to get all the decompiled C code working at once.\n\nSome challenges I'm facing:\n\nI'm aware of projects like KeeperFX and Syndicate Wars port (http://swars.vexillium.org/), which managed to achieve similar goals (e.g., by converting the executable into a DLL).\n\nWhat are my options for replacing a function in the original binary with a custom C function while addressing the challenges mentioned above?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "250",
  "tags": [
    "windows",
    "decompilation"
  ],
  "user": "Cesar Canassa",
  "time": "Apr 24, 2023 at 12:44",
  "comments": [
    {
      "user": "Cesar Canassa",
      "text": "@rce Yes, the \"EXE to DLL\" technic looks promising, but I don't know how they solve the shared global variables problem.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Watcom lives on as OpenWatcom ... check it out. If you want to get closer to the original, you could try 1.9 or 1.8, too.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@rce: may not be relevant for this particular case, but there are some issues when using data exports and delay-loading together.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "When trying to renew an old game, it's important to have a working thing relatively soon - otherwise, there's a great chance of your work getting wasted. So it's good you've turned towards RE ideas with potential of having full game usable without having it fully remade.\n\nThe DLL approach taken in KeeperFX:\n\nThe ASM approach taken in SW Port:\n\nThere's also a 3rd approach - you'd find it in Magic Carpet HD. That project author just used Ida Pro to generate C code out of the whole game, and then continued fixing the generated C until it started working. I consider this approach very risky - you need to put a lot of effort to make the game work. Also, the generated C code has a very low quality this way, and it may negatively influence further progress of the project. Plus, the brute-force C conversion introduced a lot of bugs.\n\nGeneral points:\n\nFor accessing global variables and functions between original game and remade C code:\n\nBasically:\n\n",
      "votes": "1",
      "user": "mefistotelis",
      "time": "Nov 10, 2023 at 13:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}