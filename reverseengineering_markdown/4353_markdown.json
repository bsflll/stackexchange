{
  "title": "How do you compare C source code with the corresponding binary's assembly in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/4353/how-do-you-compare-c-source-code-with-the-corresponding-binarys-assembly-in-ida",
  "content": "I'm wondering if there's a way to compare source code to the disassembled assembly in IDA Pro? (e.g. I compile hello.c in Linux then open the binary in IDA Pro in OS X, and would like to compare the assembly with the source so make it easier to find out what's going on). Does such a feature exist?\n\nADDED From Comment:\nBy the way, I forgot to mention, I am in OS-X and the binary was compiled by Lunux\n\n",
  "votes": "4",
  "answers": 5,
  "views": "6k",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "c",
    "disassemblers"
  ],
  "user": "trusktr",
  "time": "May 19, 2014 at 4:50",
  "comments": [
    {
      "user": "milahu",
      "text": "karta may be helpful. see also Source-level debugging",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can compile your file with DWARF information in it, since IDA supports it:\n\n\n\n",
      "votes": "3",
      "user": "jvoisin",
      "time": "May 17, 2014 at 17:26",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Not really. But Visual Studio for example has a debugger, that can directly point to the source (from where the problem occurs) if you start the debugger in the same instance where you loaded your solution. Also Visual Studio supports to output PDB files (and a MAP file, if needed) which would give you all function names, variables names, parameters, etc. This is helpful too when debugging in IDA. \n\nYou should find out if your compiler can also output a kind of 'debug' file which you can import in IDA Pro. If not, then it's not possible in this case.\n\n",
      "votes": "2",
      "user": "Zuka",
      "time": "May 17, 2014 at 10:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "trusktr",
          "text": "I forgot to mention I'm in OS X and the binary was compiled in Linux.",
          "time": null
        }
      ]
    },
    {
      "content": "I've done this while looking for IP theft before and while it's very unlikely that you will be able to recover a perfect 1 to 1 match there's still certain structures and flows that creep into functions that have been copied from elsewhere. It's very hard to read a piece of code and then copy it and not have the original ideas influence your design. You have a similar situation only that you're looking for matching functions in order to ease your reverse engineering.\n\nThis is what I would do:\n\nI've successfully used this strategy to successfully identify and analyze similarities between software written in a native language and software written in a managed language. It's quite a powerful technique. If you're on a constrained budget and both reference and suspect binaries are targeting the same platform using the same compiler, you can build a FLIRT database from your reference binaries. This will likely miss a large number of good candidates though.\n\nIf you're not analyzing any binaries produced by someone else, just build your target with debug information and you'll get all the information you need, see DWARF if you're using GCC or PDB if you're using MSVC. Alternatively just tell the compiler to produce assembly output: GCC, MSVC.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "if this is for learning puprose and you want to understand how is assembly generated for   your source lines create an assembly listing every major compiler should have the option   \n\nfor example with visual studio you can issue /FAcs  switch to generate an assembly listing file with an extension .cod\nthe listing file will show how each line in your source has been transformed into assembly  \n\n```\ncomparesrc:\\>dir /b\ncomparesrc.cpp\n\ncomparesrc:\\>type comparesrc.cpp\n#include <stdio.h>  // standard include file\nint main (void)\n{ // this line will become prolog\n    printf(\"hello my dear source compare  \n\");  // see str in .data section\n    puts(\"c\");  // will put a char* with line break to console\n    puts(\"om\");\n    puts(\"pare\");\n    int a,b,c,d;\n    a = 2; b =3 ; c = 4;\n    d = a+b-c;    // 2+3 -4 = 1\n    printf(\"%d  \n\",d);  // should print 1\n    d = (a*b)/c;  // 2*3 /4 = 6 /4  numerator = 1\n    printf(\"%d  \n\",d);  // should printf 1\n    d = (a*b)%c;   // 2 * 3 % 4 denominator = 2\n    printf(\"%d  \n\",d);  // should print 2\n    return 0;   // lets generate a cod file and see the assembly\n}   // this line will get converted to epilog\n\n\n\ncomparesrc:\\>cl /FAcs /nologo /Zi  comparesrc.cpp /link /RELEASE\ncomparesrc.cpp\n\ncomparesrc:\\>type comparesrc.cod\n; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01\n\n\n        TITLE   XXXX\\comparesrc.cpp\n        .686P\n        .XMM\n        include listing.inc\n        .model  flat\n\nINCLUDELIB LIBCMT\nINCLUDELIB OLDNAMES\n\nCONST   SEGMENT\n$SG3850 DB      'hello my dear source compare', 0aH, 00H\n        ORG $+2\n$SG3851 DB      'c', 00H\n        ORG $+2\n$SG3852 DB      'om', 00H\n        ORG $+1\n$SG3853 DB      'pare', 00H\n        ORG $+3\n$SG3858 DB      '%d', 0aH, 00H\n$SG3859 DB      '%d', 0aH, 00H\n$SG3860 DB      '%d', 0aH, 00H\nCONST   ENDS\nPUBLIC  _main\nEXTRN   _puts:PROC\nEXTRN   _printf:PROC\n; Function compile flags: /Odtp\n; File xxx\\comparesrc.cpp\n\n_TEXT   SEGMENT\n_c$ = -16                                               ; size = 4\n_d$ = -12                                               ; size = 4\n_b$ = -8                                                ; size = 4\n_a$ = -4                                                ; size = 4\n_main   PROC\n\n; 3    : { // this line will become prolog\n\n  00000 55               push    ebp\n  00001 8b ec            mov     ebp, esp\n  00003 83 ec 10         sub     esp, 16                        ; 00000010H\n\n; 4    :     printf(\"hello my dear source compare  \n\");  // see str in .data sect\nion\n\n  00006 68 00 00 00 00   push    OFFSET $SG3850\n  0000b e8 00 00 00 00   call    _printf\n  00010 83 c4 04         add     esp, 4\n\n; 5    :     puts(\"c\");  // will put a char* with line break to console\n\n  00013 68 00 00 00 00   push    OFFSET $SG3851\n  00018 e8 00 00 00 00   call    _puts\n  0001d 83 c4 04         add     esp, 4\n\n; 6    :     puts(\"om\");\n\n  00020 68 00 00 00 00   push    OFFSET $SG3852\n  00025 e8 00 00 00 00   call    _puts\n  0002a 83 c4 04         add     esp, 4\n\n; 7    :     puts(\"pare\");\n\n  0002d 68 00 00 00 00   push    OFFSET $SG3853\n  00032 e8 00 00 00 00   call    _puts\n  00037 83 c4 04         add     esp, 4\n\n; 8    :     int a,b,c,d;\n; 9    :     a = 2; b =3 ; c = 4;\n\n  0003a c7 45 fc 02 00\n        00 00            mov     DWORD PTR _a$[ebp], 2\n  00041 c7 45 f8 03 00\n        00 00            mov     DWORD PTR _b$[ebp], 3\n  00048 c7 45 f0 04 00\n        00 00            mov     DWORD PTR _c$[ebp], 4\n\n; 10   :     d = a+b-c;    // 2+3 -4 = 1\n\n  0004f 8b 45 fc         mov     eax, DWORD PTR _a$[ebp]\n  00052 03 45 f8         add     eax, DWORD PTR _b$[ebp]\n  00055 2b 45 f0         sub     eax, DWORD PTR _c$[ebp]\n  00058 89 45 f4         mov     DWORD PTR _d$[ebp], eax\n\n; 11   :     printf(\"%d  \n\",d);  // should print 1\n\n  0005b 8b 4d f4         mov     ecx, DWORD PTR _d$[ebp]\n  0005e 51               push    ecx\n  0005f 68 00 00 00 00   push    OFFSET $SG3858\n  00064 e8 00 00 00 00   call    _printf\n  00069 83 c4 08         add     esp, 8\n\n; 12   :     d = (a*b)/c;  // 2*3 /4 = 6 /4  numerator = 1\n\n  0006c 8b 45 fc         mov     eax, DWORD PTR _a$[ebp]\n  0006f 0f af 45 f8      imul    eax, DWORD PTR _b$[ebp]\n  00073 99               cdq\n  00074 f7 7d f0         idiv    DWORD PTR _c$[ebp]\n  00077 89 45 f4         mov     DWORD PTR _d$[ebp], eax\n\n; 13   :     printf(\"%d  \n\",d);  // should printf 1\n\n  0007a 8b 55 f4         mov     edx, DWORD PTR _d$[ebp]\n  0007d 52               push    edx\n  0007e 68 00 00 00 00   push    OFFSET $SG3859\n  00083 e8 00 00 00 00   call    _printf\n  00088 83 c4 08         add     esp, 8\n\n; 14   :     d = (a*b)%c;   // 2 * 3 % 4 denominator = 2\n\n  0008b 8b 45 fc         mov     eax, DWORD PTR _a$[ebp]\n  0008e 0f af 45 f8      imul    eax, DWORD PTR _b$[ebp]\n  00092 99               cdq\n  00093 f7 7d f0         idiv    DWORD PTR _c$[ebp]\n  00096 89 55 f4         mov     DWORD PTR _d$[ebp], edx\n\n; 15   :     printf(\"%d  \n\",d);  // should print 2\n\n  00099 8b 45 f4         mov     eax, DWORD PTR _d$[ebp]\n  0009c 50               push    eax\n  0009d 68 00 00 00 00   push    OFFSET $SG3860\n  000a2 e8 00 00 00 00   call    _printf\n  000a7 83 c4 08         add     esp, 8\n\n; 16   :     return 0;   // lets generate a cod file and see the assembly\n\n  000aa 33 c0            xor     eax, eax\n\n; 17   : }   // this line will get converted to epilog\n\n  000ac 8b e5            mov     esp, ebp\n  000ae 5d               pop     ebp\n  000af c3               ret     0\n_main   ENDP\n_TEXT   ENDS\nEND\n\ncomparesrc:\\>\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "May 17, 2014 at 15:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Basically it isn't possible for the most part.\n\nSince you compile the code to machine codes, compilers add lots of stuff and optimizations to your code. So, recognizing the code with additions would be hard (especially when code is big).\n\nWhy are you doing this? Tthere are different strategies to use and I can help more if I know.\n\n",
      "votes": "0",
      "user": "user4665",
      "time": "May 19, 2014 at 4:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "trusktr",
          "text": "My goal is to learn how it works, and learning reverse engineering.",
          "time": null
        }
      ]
    }
  ]
}