{
  "title": "Help understand decompiled IDA code",
  "link": "https://reverseengineering.stackexchange.com/questions/18507/help-understand-decompiled-ida-code",
  "content": "I got stuck at yellow lines, dont understand what it's gonna do. Need advice or help, thanks!\n\n\n\nFile : https://www.sendspace.com/file/3yowjg\n\nPassword : 1\n\n```\nvoid __fastcall sub_A513C0(char *Src, HWND hWnd)\n{\n  int input_flag; // esi\n  HWND v3; // edi\n  unsigned int pos; // ebx\n  int num_char; // edx\n  char *tmp_input_flag; // edi\n  char chr; // cl\n  int v8; // ecx\n  unsigned int v9; // esi\n  int encoded_flag; // eax\n  HWND v11; // [esp+Ch] [ebp-1D8h]\n  unsigned int v12; // [esp+10h] [ebp-1D4h]\n  unsigned int tmp_pos; // [esp+14h] [ebp-1D0h]\n  char v14[252]; // [esp+1Ch] [ebp-1C8h]\n  char Dst; // [esp+118h] [ebp-CCh]\n  char v16; // [esp+12Dh] [ebp-B7h]\n  CHAR Text[16]; // [esp+17Ch] [ebp-68h]\n  __int64 v18; // [esp+18Ch] [ebp-58h]\n  int v19; // [esp+194h] [ebp-50h]\n  char v20; // [esp+198h] [ebp-4Ch]\n\n  input_flag = Src;\n  v3 = hWnd;\n  v11 = hWnd;\n  strcpy_s(&Dst, 100u, Src);\n  pos = 0;\n  v12 = 0;\n  if ( strlen(input_flag) )\n  {\n    do\n    {\n      if ( pos )\n        num_char = *(input_flag + pos) - *(input_flag + pos - 1);\n      else\n        num_char = *input_flag - 65;            // convert to alphabet 0->26\n      if ( num_char < 0 )\n        num_char = -num_char;\n      tmp_pos = 0;\n      if ( strlen(input_flag) )                 // lower to upper\n                                                // \n      {\n        tmp_input_flag = input_flag;\n        do\n        {\n          chr = *tmp_input_flag;\n          if ( num_char + *tmp_input_flag > 90 )\n            chr -= 26;\n          ++tmp_pos;\n          v14[tmp_input_flag++ - input_flag] = num_char + chr;\n        }\n        while ( tmp_pos < strlen(input_flag) );\n        pos = v12;\n      }\n      v8 = input_flag + 1;\n      v9 = strlen(input_flag);\n      if ( v9 >= 0xFA )\n      {\n        __report_rangecheckfailure(v8, num_char);\n        __debugbreak();\n        JUMPOUT(__security_check_cookie);\n      }\n      v14[v9] = 0;\n      ++pos;\n      input_flag = v14;\n      v12 = pos;\n    }\n    while ( pos < strlen(v14) );\n    v3 = v11;\n  }\n  encoded_flag = strcmp(input_flag, \"NMOVUMUUHUGCMOTOGCNUEY\");\n  if ( encoded_flag )\n    encoded_flag = -(encoded_flag < 0) | 1;\n  if ( !encoded_flag && v16 == 69 )\n  {\n    v19 = 2112115;\n    _mm_storeu_si128(Text, _mm_loadu_si128(&xmmword_A521C0));\n    v18 = qword_A521D0;\n    memset(&v20, 0, 0x48u);\n    strcat_s(Text, 0x64u, &Dst);\n    if ( MessageBoxA(v3, Text, \"Good work!\", 0) == 1 )\n      PostQuitMessage(0);\n  }\n}\n\n```\nI believe this code is just getting input_flag and using a Caesar cipher with the first letter of input_flag.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "717",
  "tags": [
    "ida",
    "decompilation"
  ],
  "user": "beo sen",
  "time": "Jun 11, 2018 at 17:10",
  "comments": [
    {
      "user": "julian",
      "text": "Please do not post screenshots of code. Include the code as text in the body of the question.",
      "time": null
    },
    {
      "user": "beo sen",
      "text": "Edited with code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "tmp_input_flag is just a pointer to the current char of the whole string which starts with input_flag.\n\n```\n   tmp_input_flag = input_flag;  // set to first chars location\n   do\n   {\n      chr = *tmp_input_flag;     // hold the actual value at pointers location, e.g. 'A'\n      if ( num_char + *tmp_input_flag > 90 )  //check to see if outside Upper-Case letters and remedy\n         chr -= 26;\n      ++tmp_pos;\n      v14[tmp_input_flag++ - input_flag] = num_char + chr;  //in first round determine shift modifier to use in rest, except when < 65\n   }\n\n```\nSome example cases:\n\n```\na -> A (32)\nl -> L (32)\no -> O (32)\nalo->ALO\n\nA -> O (14)\nL -> Z (14)\nO -> C (12)\nALO->OZC\n\n1 -> D (19)\n2 -> E (19)\n3 -> F (19)\n4 -> G (19)\n1234->DEFG\n\n{ -> R (41)\n} -> T (41)\n| -> S (41)\n~ -> U (41)\n{}|~->RTSU\n\n```\nNote that if ASCII values less than 65/'A'(line 38) are used the results are not influenced by the same shift value.\n\n```\n_ -> X (7)\n= -> P (19)\n! -> N (45)\n$ -> Q (45)\n% -> R (45)\n& -> S (45)\n_=!$%&->XPNQRS\n\n```\n",
      "votes": "3",
      "user": "Alim Ã–zdemir",
      "time": "Jun 12, 2018 at 11:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}