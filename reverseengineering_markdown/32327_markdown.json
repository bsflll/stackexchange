{
  "title": "APK Reversing. Some code is hidden?",
  "link": "https://reverseengineering.stackexchange.com/questions/32327/apk-reversing-some-code-is-hidden",
  "content": "Sorry for my English. I accepted a challenge (part of the partial exams of the year) from my university professor of IT Security and Privacy. He gave me an APK and I need to find out how the login is handled, therefore how the data is sent to an endpoint I don't know.\n\nI currently have the APK installed on the Genymotion emulator. I extracted the installed APK with APK Extractor. At this point I converted the dex files to jar with dex2jar and opened the two jar classes in jd-gui.\n\nThe strange thing is that I can't find any reference to login or passwords. The only thing I find is:\n\n```\npublic final class PasswordAuthentication {\n    private String userName;\n    private char[] password;\n\n    public PasswordAuthentication(String userName, char[] password) {\n        this.userName = userName;\n        this.password = (char[])password.clone();\n    }\n\n    public String getUserName() {\n        return this.userName;\n    }\n\n    public char[] getPassword() {\n        return this.password;\n    }\n}\n\n```\nI wonder if somehow this information could be hidden or if I'm doing something wrong. Also jd-gui is a very poor string search editor.\n\nHow should I proceed, in your opinion?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "250",
  "tags": [
    "disassembly",
    "apk",
    "jar"
  ],
  "user": "Mr Ciccio",
  "time": "Sep 28, 2023 at 12:35",
  "comments": [],
  "answers_data": [
    {
      "content": "There are two possibilities:\n\nThe used decompiler is wrong or fails to decode certain classes. Community driven decompilers like dex2jar aren't perfect decompilers, they often fail or create incorrect output. Therefore in case of problems it is always a good idea to use more than one decompiler and compare the results.\n\nFor example I would use Jadx-Gui as a second decompiler. It also decompiles whole APK files to Java code and has an integrated full-text search engine for code and XML resources.\n\nAnd as a third decompiler I would recommend Apktool. It does decompile to Smali instead of Java code so the generated code is more like assembler, however if you are just searching for where a certain class is referenced apktool + grep or a similar search tool can be very helpful. Note that class names in Smali are not written as com.example.packagename.Classname but as Lcom/example/packagename/Classname;. My recommendation is to search for both variants, the first may capture usages via dynamic class loading, the second via static class references.\n\nAnother possibility is that the decompiled APK file is not a pure Java/Kotlin (thus DEX)  code APK file. Nowadays there are quite a few alternative languages and compiler systems which can build APK files. Those generated APK files will still contain some DEX code files, but other parts are implemented in different languages common decompiler like dex2jar and Jadx-Gui can not decompile. From within this alternative code resources it is possible to instantiate classes present in the DEX files.\n\n",
      "votes": "2",
      "user": "Robert",
      "time": "Sep 29, 2023 at 12:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}