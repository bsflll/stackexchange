{
  "title": "Rust string capacity lower than string lenght",
  "link": "https://reverseengineering.stackexchange.com/questions/25606/rust-string-capacity-lower-than-string-lenght",
  "content": "According to RUST documentation, strings are stored this way :\n\n\n\nThis is a statement I can verify while reversing rust binaries.\nThe thing is that when I am reversing rust binaries, I likely encounter cases where capacity is lower than length of the string, eg :\n\n```\n[stack]:00007FFC8BE97218 str_ABCED dq offset ABCED               ; DATA XREF: XX\n[stack]:00007FFC8BE97218                                         ; (len=10) ABCEDFGHIJ\n[stack]:00007FFC8BE97220 dq 28h                                  ; String len: 40\n[stack]:00007FFC8BE97228 cap_ABCED dq 25h                        ; String 'capacity'\n\n```\nHow is such a thing possible? Do any resource exists explaining rust internals?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "282",
  "tags": [
    "debugging",
    "memory"
  ],
  "user": "Qwark",
  "time": "Aug 4, 2020 at 9:32",
  "comments": [
    {
      "user": "Jongware",
      "text": "If you check the acrual string pointer, how much space is reserved there?",
      "time": null
    },
    {
      "user": "Qwark",
      "text": "@usr2564301 not sure to understand what you mean, the actual string is 40 bytes long, as stated by the \"string len\" (0x00007FFC8BE97220) in memory",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "Can you paste the code you used to create this string because I am not able to reproduce this?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "have you considered the possibility that it might be using the str\ninstead of String which only has length and no capacity and\nyou are looking at a bogus third value ?\n\n```\n:\\>cat main.rs\nfn main() {\n        let s1 = String::from(\"Hello, std::world!\");\n    println!(\"{}\",s1);\n        println!(\"{} {}\",s1.capacity() , s1.len());\n        let s2 = \"Hello, std::world!o\";\n    println!(\"{}\",s2);\n        println!(\"{} {}\",s2.capacity() , s2.len());\n}\n:\\>cargo build\n   Compiling hello_world v0.1.0 \nerror[E0599]: no method named `capacity` found for reference `&str` in the current scope\n --> main.rs:7:22\n  |\n7 |     println!(\"{} {}\",s2.capacity() , s2.len());\n  |                         ^^^^^^^^ method not found in `&str`\n\n```\nlike shown below for the first string\n\n```\n0:000> dv /v \n00000064`f0cff920              s2 = struct str*\n00000064`f0cff8c0              s1 = \"Hello, std::world!\"\n0:000> dpa 00000064`f0cff920 l3\n00000064`f0cff920  00007ff6`65cf2638 \"Hello, std::world!o\"\n00000064`f0cff928  00000000`00000013\n00000064`f0cff930  00000000`00000010  <<<<<<<  bogus garbage \n0:000> dpa 00000064`f0cff8c0 l3\n00000064`f0cff8c0  00000174`116191f0 \"Hello, std::world!..............................\"\n00000064`f0cff8c8  00000000`00000012\n00000064`f0cff8d0  00000000`00000012  <<<<<<<<<<<<< correct\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Aug 7, 2020 at 22:02",
      "is_accepted": true,
      "comments": [
        {
          "user": "Qwark",
          "text": "This is probably it, missed that details in the doc ! Thanks !",
          "time": null
        }
      ]
    }
  ]
}