{
  "title": "Visualizing ELF binaries",
  "link": "https://reverseengineering.stackexchange.com/questions/6003/visualizing-elf-binaries",
  "content": "I recently saw an older talk by Sergey Bratus and Greg Conti by the name of Voyage of the Reverser: A Visual Study of Binary Species.\n\nAre there any opensource/free tools that one could use to see visual representations of the binaries that are fed in (similar to what is shown in the talk)?\n\nSamples from the talk:\n\n\n\n\n\n",
  "votes": "62",
  "answers": 7,
  "views": "18k",
  "tags": [
    "binary-analysis",
    "elf",
    "visualization"
  ],
  "user": null,
  "time": "Nov 30, 2022 at 12:52",
  "comments": [],
  "answers_data": [
    {
      "content": "The tool we used for the talk, binviz, is available here: binviz_0.zip.\n\nSome papers are here:\n\nAnd, there is also an earlier Black Hat talk, in addition to the one I\ndid with Sergey:\n\nI haven't used it in a while but binviz was written in Visual C# (VS2005\nor maybe VS2008).  The .zip is the project (source) file so it should\nload into visual studio and run.  There is also a compiled .exe in...\n/binviz_0.44bw/binviz_0.01/bin/Debug/. You should just be able to double\nclick it and run on a Windows machine. I developed it under XP, but\nhave since used it under Windows 7 and it worked more or less the same.\n(mouseover event behavior is a little different, but still usable).\n\nNote that binviz is a research prototype and has a bug... it doesn't\nlike small files.  Would try something 10M in size and then work down\nfrom there. I think it is around 500K where it starts getting cranky.\n\n",
      "votes": "46",
      "user": "perror",
      "time": "Aug 2, 2014 at 14:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "Thanks for your reaction! In your 2008 paper you mention platform independent versions as \"future work\" (p. 8). Were you able to pursue this any further, or is the download still the canonical \"current\" version?",
          "time": null
        },
        {
          "user": "Greg Conti",
          "text": "I went down the a variant path of trying to include automated mapping of arbitrary binaries.  see binary mapping paper and wasn't able to explore the platform independent version further.  So yes, this is the \"current\" version.",
          "time": null
        },
        {
          "user": "Denis",
          "text": "@GregConti Will this software recognize writing patterns in text like articles or books?",
          "time": null
        }
      ]
    },
    {
      "content": "cantor.dust\n\n\n\nSadly, I think the development stopped, at least I haven't heard any news about this project recently.\n\nBinwalk\n\n\ndevttys0 implemented a similar visualization in binwalk.\n\nVix/Biteye\n\nGithub\n\n\n\nbinglide\n\n\n\nsenseye\n\n\n\nbinvis.io\n\n\n\n===\n\nBinVis\n\nPortEx\n\nVeles\n\nBinary visualization framework.\n\n\n",
      "votes": "33",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "These are graphic dumps from the source data. I use this extensively, with a hex reader I wrote myself -- it's a great way to quickly locate \"data\" (see the difference between .text and .data) and larger structures (which often contain repeating or similar data on the same offsets).\n\nThe top images show raw data dumped as grayscale information: each byte is treated as a pixel. Presumably, the author chose grayscale for convenience. I prefer a full range of contrasting colors, so long swathes of \"same\" and \"similar\" data can be discerned easier.\n\nThe blocks of solid color near the bottom (.rsrc) are icons and other graphics. They appear horizontally stretched out because they are displayed as one-pixel-per-byte, and are actually 16-, 24-, or 32-bpp images.\n\n(I don't believe the entire top is .text! Executable code appears as random pixels, but the top 1/3rd in that image is less dense. It's probably the MZ and PE Executable Header; these contain lots of zeros. The more denser part in the bottom 1/3rd is part of .text and most likely the Virtual Call table, which happens to contain the byte 0xFF a lot.)\n\nIn the bottom images, each byte is displayed in a monochrome binary format: each byte is shown as 8 consecutive pixels. By convention, these are displayed with the most significant bit first. There is no need to check for 'endianness', as that only comes into play when dealing with single values larger than a single byte.\n\nWriting something like this yourself is not hard; probably most important is to make the graphics routines as fast as possible, in particular the monochrome bitmaps. This is also addressed by Conti et al., Visual Reverse Engineering of Binary and Data Files (http://www.rumint.org/gregconti/publications/2008_VizSEC_FileVisualization_v53_final.pdf):\n\nScreenshots of my own tool, very similar to what is shown above:\n\nThe .text section of CALC.EXE. The repeating structure on the bottom is the Virtual Call table.\n\n\n\nA file containing RLE-encoded images. The RLE compression can be recognized by the horizontal stripes of \"coherent\" data (better visible when changing the width interactively).\n\n\n\nGZ compressed data, in monochrome. This is as close to random static as possible.\n\n\n\nA tiny embedded bitmap font found in another executable. The random bits between characters are the width in pixels - see the synchronically scrolling hex dump.\n\n\n\nSome data is better visualized in other ways. This is an old-style VGA palette (6x6x6 RGB).\n\n\n\n",
      "votes": "14",
      "user": "Jongware",
      "time": "Aug 2, 2014 at 12:20",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The data visualizing tool I saw used in the talk seems to be almost identical if not identical to the BinVis tool available on Google Code. A screenshot of some of the features:\n\n\n\nNote: the above is an old version as I could not install the latest on my PC; see Google code site for more.\n\n",
      "votes": "13",
      "user": "JamalS",
      "time": "Aug 2, 2014 at 9:36",
      "is_accepted": false,
      "comments": [
        {
          "user": "broadway",
          "text": "Yeah, it's his work, and I think all that's available unless cantor.dust shows up as opensource.",
          "time": null
        },
        {
          "user": "PlasmaHH",
          "text": "It seems that the current version is availabel in binvis.googlecode.com/svn/trunk/binviz_0.01/bin/Release/â€¦ by just renaming .exe.deploy to .exe",
          "time": null
        }
      ]
    },
    {
      "content": "BinView is a prototype for a tool for binary data visualization\n\nGitHub repository\n\n\n\n\n\n\n\n\n\n",
      "votes": "11",
      "user": "Russlan K",
      "time": "Feb 16, 2015 at 0:21",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I wrote https://github.com/REMath/implementations/blob/master/code_examples/plot_hex.py which implements the ngram method presented Conti as well as a clustering component to isolate visual properties. \n\n",
      "votes": "9",
      "user": "turnersr",
      "time": "Aug 5, 2014 at 14:15",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I was part of a team that built a dynamic visualization tool (dynamic because it operates on executions of binaries, not on static binaries) called Haxxis:\n\nhttps://github.com/voidALPHA/cgc_viz (the visualization component developed by voidALPHA)\nhttps://github.com/Vector35/traceapi (generates traces using a modified qemu that are fed into the visualizer)\n\nWhile it mainly works on \"Decree\" format (a 32bit x86 modified elf format) it would be easy to adapt to other binary formats. It produces some nifty visualizations: \n\nhttps://www.youtube.com/watch?v=6r1fOrDb80s&list=PLuDRBJDBc4F9HnfV5tQDwqhSs9a5VPegD\nhttps://www.youtube.com/watch?v=LEfejsqEucY&list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&index=13\nhttps://www.youtube.com/watch?v=SYYZjTx92KU&list=PL6wMum5UsYvZx2x9QGhDY8j3FcQUH7uY0&index=31 (long overview of the CGC event itself with snippets of Haxxis throughout)\n\n",
      "votes": "3",
      "user": "Jordan",
      "time": "Sep 6, 2017 at 21:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}