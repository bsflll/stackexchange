{
  "title": "Inconsistency in function addresses of the hooked functions (address shift)",
  "link": "https://reverseengineering.stackexchange.com/questions/29405/inconsistency-in-function-addresses-of-the-hooked-functions-address-shift",
  "content": "I came across \"a strange\" inconsistency in terms of the function addresses in the particular application.\n\nFirst, the main function is hooked successfully, the address is derived in a fashion:\n\nbaseAddress + Offset, i.e. from Ghidra baseAddress is 140000000 and the address of the main function is: 0x39EA0\n\nSo, the main function address is\n\n```\n(DWORD_PTR*) baseAddress + 0x39EA0 / (2 * sizeof(DWORD))\n\n```\nThis works just fine.\n\nBut now I am trying to call\n\n```\ngladius::world::World* __fastcall gladius::gui::GUI::getWorld(gladius::gui::GUI* thisptr);\n\n```\nfrom within the hooked function and\n\nwhich according to Ghidra supposed to be at 14003ef30.\n\nThat makes the offset equal to 0x3ef30 (plus pointer arithmetic). But at that offset from the baseAddress I get\n\n```\nGladius.exe!proxy::video::RenderQueueManager::get\n\n```\nfunction.\n\nwhich in the static analysis is at address 14003ecc0, 270 bytes away from the static address of getWorld.\n\nSo, what is happening? Why the stack shifted by 270 bytes? Is it the size of my hooked function?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "166",
  "tags": [
    "c++",
    "function-hooking",
    "dll-injection"
  ],
  "user": "Irbis77",
  "time": "Oct 12, 2021 at 18:57",
  "comments": [
    {
      "user": "Irbis77",
      "text": "Found using x64dbg that the address of the getWorld function shifted in comparison to static analysis by 60 bytes, i.e. it is 0x3EF90. Why it is the case is still not clear.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "what is the  xxx /  (2*sizeof(DWORD) )   if you have a correct  base +offset they simply cannot  be different in different invocations or tools  base + offset should always yield the same symbol  ie if main is at 0x1000 + 320 ==1320 then main can be at 2320  or 8320 or 0x4000320  but not 2860 or 8940 or 0x400199 etc offset cannot be different check the casting , division precedence , bracketing  etc and also when you write your query provide the tools output rather than your interpretation of result  this works fine may not be actually fine because you interpreted it wrong",
      "time": null
    },
    {
      "user": "Irbis77",
      "text": "xxx/ (2*sizeof(DWORD) is a reference to pointer arithmetic. I.e. DWORD_PTR* address = <pointer address> + sizeof(DWORD_PTR). Not sure, why it is 2* in this case, but it gives the right offset for most of the functions. I will update the question with the screenshots for the place in the debug run in question. Thank you.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "OK. Found the issue after checking the screenshots again. It seems that I simply missed the correct beginning of the function while examining Ghidra output.\n\nVerifying everything once again as @blabb has suggested has shown that I've missed the correct address for the beginning of the function.\n\nHere are screenshots for how to it was evaluated:\n\nAddress in Ghidra:\n\nAddresses in VS:\n\n\nAs you can see the Ghidra offset = 140000000 - 140353ed0 = 353ed0\n\nIs the same as VS offset = createWorld - baseAddress = 0x00007ff6076d3ed0 - 0x00007ff607380000 = 353ed0\n\nAs I said - there was a mistake in checking Ghidra offset somehow...\n\n",
      "votes": "1",
      "user": "Irbis77",
      "time": "Oct 22, 2021 at 6:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}