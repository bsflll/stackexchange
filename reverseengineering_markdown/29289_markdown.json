{
  "title": "convert C++ code to python code",
  "link": "https://reverseengineering.stackexchange.com/questions/29289/convert-c-code-to-python-code",
  "content": "while I'm doing RE using ghidra i saw this code\n\n```\n  byte bVar1;\n  byte bVar2;\n  uint uVar3;\n  \n  uVar3 = 0;\n  while (bVar2 = (byte)uVar3, (char)bVar2 < '\\b') {\n    bVar1 = *(byte *)(uVar3 + param_1) ^ *(byte *)(uVar3 + param_2);\n    *(byte *)(uVar3 + param_1) = (bVar1 << (bVar2 & 7) | bVar1 >> 8 - (bVar2 & 7)) - bVar2;\n    uVar3 = (uint)(byte)(bVar2 + 1);\n  }\n  return;\n\n```\ni know the code rotate shift but i don't think it's the same i know it's kinda diffrent here not a simple bit movement\n\nso write a python code will make the bit-roll here make sense\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "decompilation",
    "c++",
    "ghidra"
  ],
  "user": "K. John Michel",
  "time": "Sep 14, 2021 at 9:45",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "FlareOn 2021 - UnlockYourFiles :)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This code can be cleaned up to be a bit more readable\n\n```\nvoid __cdecl decrypt(char *dst,char *src)\n{\n  byte j;\n  uint i;\n\n  i = 0;\n  while (j = (byte)i, (char)j < 8) {\n    dst[i] = ((dst[i] ^ src[i]) << (j & 7) | (byte)(dst[i] ^ src[i]) >> 8 - (j & 7)) - j;\n    i = (uint)(byte)(j + 1);\n  }\n  return;\n}\n\n```\nBut the shifting and or-ing still might be confusing. In this case, it's easer to look at disassembly than the decomplication and if you would do that the operations that constitutes for loop body are xor, rol and sub. So the shifting and or is pseudo-code for assembly rol opcode.\n\nAnd it can be implemented by a simple lambda\n\n```\nrol = lambda val, r_bits, max_bits: \\\n    (val << r_bits%max_bits) & (2**max_bits-1) | \\\n    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))\n\n```\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Sep 15, 2021 at 14:07",
      "is_accepted": false,
      "comments": []
    }
  ]
}