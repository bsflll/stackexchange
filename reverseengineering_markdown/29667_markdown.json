{
  "title": "How does Cheat Engine offset calculation work?",
  "link": "https://reverseengineering.stackexchange.com/questions/29667/how-does-cheat-engine-offset-calculation-work",
  "content": "I have this memory address 0F58F478 and this offset 5C. I'm using memory sharp and it works perfectly when I'm adding this number.\n\n```\nIntPtr address = _mSharp.Read<IntPtr>(0F58F478, false) + 0x5C;\n// address output: 035F4E60\n\n```\nAccording to Cheat Engine this would be the result 035F4E60. But I've tried using a Hex Calculator and the result is by far kinda different. I'd like to know how MemorySharp or CheatEngine calculates this sum.\n\n\n\nNotice that when I add 0 to a pointer this change its value, how this works? Why 0 is adding value there?\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "memory",
    "hex",
    "address",
    "offset",
    "cheat-engine"
  ],
  "user": "Sharki",
  "time": "Dec 5, 2021 at 9:38",
  "comments": [
    {
      "user": "blabb",
      "text": "what are you adding ?in hex calculator ?  0F58F478 + 5c  this ? >>> print(hex(0x0F58F478+0x5c)) === 0xf58f4d4 if yes then you are not dereferencing  0F58F478  is a pointer you need to read what it points to and add 0x5c to the result",
      "time": null
    },
    {
      "user": "Sharki",
      "text": "Ahhhh ok, it makes sense, thanks! just one question more, why add 0x0 to the 0F58F478 pointer changes its value? (I've updated the post with a new image) Also, is a pointer the same that memory address?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As I Commented if you are adding 0x5c to 0x0F58F478 and getting 0xf58f4d4\nit is not what the memory sharp or cheat engine does\n\n0x0xf58f4d4  is a pointer an address in the memory space\nthey dereference the pointer and add 0x5c to the result\n\nyour other query why adding 0 also falls under the same category adding 0 or 10 or 5c or 100 or 987 and dereferencing them will always provide the underlying value\n\nalso keep an eye on the square brackets [] means dereference\nwithout square brackets means direct addition\nas the first entry in your screen shot shows\n\n```\n&a  = 0x0F58F478                            &a = __addressof(a);\n*a  = 0x3454e04                             *a = value of a\n a  + 0x5c = 0xf58f4d4                      direct addition \n[a] + 0x5c = 0x3454e04+0x5c ==  0x3454e60   dereferenced addition\n[a+ 0x5c] = [f58f4d4] = *f58f4d4 = some other value that is got by \nfirst adding  and then  dereferencing\n\n```\nsince this appears to be c# you should try reading about unsafe / boxing / unboxing etc as it appears you are not aware of pointers,memory ,dereferencing etc\n\nhere is a boxing example in powershell\n\n```\nPS C:\\> $a = 123                                                                                                        \nPS C:\\> $b = $a     b contains what was in $a viz 123                                                                                                    \nPS C:\\> $a = 456    a gets a new value and a new address                                                                                                      \nPS C:\\> $a,$b                                                                                                            \n456\n123\nPS C:\\>  \n\n```\nor in c# unsafe construct\n\n```\n:\\>dir /b\nunsafe.cs\n\n:\\>type unsafe.cs\nusing System;\nclass Program\n{\nstatic unsafe void Main()\n{\n   int var = 32;\n   int* p = &var;\n   Console.WriteLine(\"value is 0x{0:x}\" , var);\n   Console.WriteLine(\"address is 0x{0:x}\" , (int)p);\n   Console.WriteLine(\"dereferenced is 0x{0:x}\" , (*p + 0x5c));\n   Console.WriteLine(\"undereferenced is 0x{0:x}\" , ((int)p + 0x5c));\n   Console.WriteLine(\"somegarbage  is 0x{0:x}\" , *((p + 0x5c)));\n}\n}\n:\\>csc unsafe.cs /unsafe\nMicrosoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\n:\\>unsafe.exe\nvalue is 0x20\naddress is 0x4feac4\ndereferenced is 0x7c\nundereferenced is 0x4feb20\nsomegarbage  is 0x0\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Dec 5, 2021 at 17:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}