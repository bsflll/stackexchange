{
  "title": "Hooking function with frida",
  "link": "https://reverseengineering.stackexchange.com/questions/22142/hooking-function-with-frida",
  "content": "How can i hook functions with frida?\nCan someone give me an example please, for something that do that?\n\nHook at 0x412312 and change the assembly code to \"mov eax, 999\"\n\nI Arleady tried something like:\nhttps://pastebin.com/eGPf5k0R\n\nbut it doesn't work for me, thx for helping!\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "patch-reversing",
    "function-hooking",
    "hooking",
    "frida"
  ],
  "user": "yoni",
  "time": "Sep 16, 2019 at 23:50",
  "comments": [
    {
      "user": "sudhackar",
      "text": "What do you want to achieve exactly? If you want to just patch 1 instruction, use Memory.patchCode or Memory.writeByteArray to write this instruction or its raw representation.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Try using Memory.patchCode to achieve this. Here's a short example.\n\n```\nint test() { return 1024; }\n\nint main(int argc, char **argv) {\n    printf(\"%d  \n\", test());\n    return 0;\n}\n\n```\nWhen compiled this looks like\n\n```\n[0x00400560]> s sym.test\n[0x00400656]> pdf\n┌ (fcn) sym.test 11\n│   sym.test ();\n│           ; CALL XREF from main @ 0x400670\n│           0x00400656      55             push rbp\n│           0x00400657      4889e5         mov rbp, rsp\n│           0x0040065a      b800040000     mov eax, 0x400              ; 1024\n│           0x0040065f      5d             pop rbp\n└           0x00400660      c3             ret\n[0x00400656]> s sym.main\n[0x00400661]> pdf\n┌ (fcn) main 44\n│   int main (int argc, char **argv, char **envp);\n│           ; var char **var_10h @ rbp-0x10\n│           ; var int32_t var_4h @ rbp-0x4\n│           ; arg int argc @ rdi\n│           ; arg char **argv @ rsi\n│           ; DATA XREF from entry0 @ 0x40057d\n│           0x00400661      55             push rbp\n│           0x00400662      4889e5         mov rbp, rsp\n│           0x00400665      4883ec10       sub rsp, 0x10\n│           0x00400669      897dfc         mov dword [var_4h], edi     ; argc\n│           0x0040066c      488975f0       mov qword [var_10h], rsi    ; argv\n│           0x00400670      e8e1ffffff     call sym test()             ; sym.test\n│           0x00400675      89c6           mov esi, eax\n│           0x00400677      bf24084000     mov edi, 0x400824           ; const char *format\n│           0x0040067c      b800000000     mov eax, 0\n│           0x00400681      e89afeffff     call sym.imp.printf         ; int printf(const char *format)\n│           0x00400686      b800000000     mov eax, 0\n│           0x0040068b      c9             leave\n└           0x0040068c      c3             ret\n\n```\nAt 0x0040065a, the constant 1024(0x400) is copied to eax. When run this looks like\n\n```\n$ ./test\n1024\n\n```\nThis can be patched at runtime by frida using patchCode\n\n```\nvar pc = new NativePointer(0x0040065a)\nMemory.patchCode(pc, 5, function (code) {\n  var cw = new X86Writer(code, { pc: pc });\n  cw.putMovRegU32('eax', 999);\n  cw.flush();\n});\n\n```\nWhen run\n\n```\n$ frida -q -l patch_code.js -f ./test --no-pause\nSpawned `./test`. Resuming main thread!                                  \n999\nProcess terminated\n\n```\nAnother method of hooking a function is to use an Interceptor with onEnter to access args and onLeave to access the return value.\n\n```\nfunction hook(address) {\n    Interceptor.attach(address, {\n        onEnter: function (args) {\n            console.log(args[0])\n        },\n        onLeave: function (ret) {\n            ret.replace(999)\n        }\n    })\n}\n\n```\n",
      "votes": "6",
      "user": "sudhackar",
      "time": "Mar 21, 2024 at 11:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}