{
  "title": "Magic number in resource loading routine",
  "link": "https://reverseengineering.stackexchange.com/questions/17577/magic-number-in-resource-loading-routine",
  "content": "I'm practicing windows disassembly on x64 notepad.exe\n\nI've managed to find buffer allocation and string resources load.\nBut after that follows code, which I can't fully understand:\nrbx = 0, rdx = 0 before this part\n\n```\n            mov     r9, cs:str_res_guid_18 ;  dq 12h\n            lea     rcx, some_data         ;  some address\n            mov     edx, 28h\n            sub     r9, rcx        \n            mov     r8, rdx\n\nloc_100003150: \n            lea     rax, [r8+7FFFFFD6h]    ; what is this number?\n            cmp     rax, rbp\n            jz      short loc_100003173\n            movzx   eax, word ptr [rcx+r9] ; str_res_guid_18\n            cmp     ax, bp\n            jz      short loc_100003173\n            mov     [rcx], ax\n            add     rcx, 2\n            sub     r8, 1\n            jnz     short loc_100003150\n\nloc_100003173: \n            cmp     r8, rbp\n            jz      loc_1000058A0\n\n```\nWhat does 7FFFFFD6h stands for? And why is it compared against null?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "97",
  "tags": [
    "windows",
    "x86-64",
    "winapi"
  ],
  "user": "Vlad Fedyaev",
  "time": "Mar 2, 2018 at 13:05",
  "comments": [],
  "answers_data": [
    {
      "content": "This seems to be an optimized wchar_t string copy. The compiler took advantage of the fact that there is a fixed offset between source and destination. Ignoring the  lea  check, the assembly could be represented by this pseudocode:\n\n```\nwchar_t *dst = &some_data; //rcx\nwchar_t *src = ?; //r9\ndelta = src-dst; //r9 =r9-dst\nmaxc = 0x28; //r8\n\nloop:\n wchar_t ch = dst[delta]; (dst+(src-dst) = src, so ch=src[i];)\n if ( ch==0 ) break;\n *dst = ch;\n dst++;\n maxc--;\n if ( maxc!=0 ) goto loop;\n\n```\nNow let's look at the mysterious lea. First thing you need to remember that it's basically just a fancy mov, and the operands are not necessarily addresses.\n\nso let's take lea     rax, [r8+7FFFFFD6h] and do some math:\n\n```\nrax = r8+0x7FFFFFD6\n\n```\nmultiply both sides by 2:\n\n```\n2*rax = 2*r8+0xFFFFFFAC\n\n```\ntreat number as signed:\n\n```\n2*rax = 2*r8-0x54\n\n```\nnow divide:\n\n```\nrax = r8 - 0x2a\n\n```\nso testing rax==0 is the same as r8==0x2a. Possibly the code is checking that number of characters to copy is not greater than the buffer size. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Mar 2, 2018 at 19:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vlad Fedyaev",
          "text": "Thanks Igor, that seems to be the case and it all fits. However, can you clarify, why is there a multiplication in lea.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@VladFedyaev there is no multiplication, it’s been factored out by the compiler. basically, 0x7FFFFFD6 is 0xFFFFFFAC divided by two without sign extension. I multiplied the equation so it’s easier to see where 0x2A is coming from.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "see also a similar trick here: reverseengineering.stackexchange.com/a/6272",
          "time": null
        }
      ]
    },
    {
      "content": "ignore the first part: 7FF..FF is a sequence of 1's\nThe interesting part is the D6 which equals 1101 0110, or 214 in decimal.\nSo it check's whether a couple of bytes after the addrress in R8 is a Zero\n\nAlso, have a look at section OPERATING SYSTEMS here:\nhttps://software.intel.com/en-us/articles/introduction-to-x64-assembly\n\n",
      "votes": "0",
      "user": "dns43",
      "time": "Mar 2, 2018 at 14:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}