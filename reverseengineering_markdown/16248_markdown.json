{
  "title": "Can we decompile an .exe or .dll as %100? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/16248/can-we-decompile-an-exe-or-dll-as-100",
  "content": "I wanna get an  answer for my questions. Thanks!...\n\n",
  "votes": "1",
  "answers": 1,
  "views": "63k",
  "tags": [
    "decompilation",
    "decompile",
    "decompiler",
    "c#"
  ],
  "user": "Busi",
  "time": "7 years ago",
  "comments": [
    {
      "user": "NirIzr",
      "text": "Decompilation is not something you can easily perform programmatically, some tools try but eventually you'll have to have a human do at least some of the work.",
      "time": null
    },
    {
      "user": "Busi",
      "text": "Could you be more clear? so when i decompiled a file it was giving  like 140+ errors, couldn't fix it...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Since the compilation output of .NET languages is MSIL, which is quite readable itself, it can be transformed back to (almost) original source code.\nThere are many applications which can do that.\nMy favourite is dnSpy since it's free, open source and has debugging functionalities. AFAIK it can even try to build a Visual Studio Solution (.sln) file from your input which should be what you look for.\n\nBut under certain circumstances some information is lost during the compilation process.\nYou would have to manually fix those errors. For example anonymous functions can confuse a decompiler easily. And of course - if the developer tries to protect his application there are various techniques like obfuscation which would make your life harder.\n\nSo to answer your questions directly:\n\n",
      "votes": "3",
      "user": "Michael Pittino",
      "time": "Sep 3, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}