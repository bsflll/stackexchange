{
  "title": "What is the algorithm used in Recursive Traversal disassembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/2347/what-is-the-algorithm-used-in-recursive-traversal-disassembly",
  "content": "Disassembling binary code is a quite difficult topic, but for now only two (naive) algorithms seems to be broadly used in the tools.\n\nYet, the description of these algorithms are quite vague. In real-life tools, they have been a bit refined to improve the accuracy of the disassembling. \n\nFor example, objdump perform a linear sweep but will start from all the symbols (and not only the beginning of the sections marked as code.\n\nSo, can somebody give a more realistic description of the recursive traversal algorithm (e.g. as it is coded in IDAPro) ?\n\n",
  "votes": "13",
  "answers": 2,
  "views": "9k",
  "tags": [
    "disassemblers"
  ],
  "user": "perror",
  "time": "Jun 26, 2013 at 15:34",
  "comments": [
    {
      "user": "debray",
      "text": "IIRC in recursive traversal the disassembler tries to follow all control transfer instructions -- i.e., identify and continue disassembly at the various possible control flow targets of the instruction -- not just call instructions.",
      "time": null
    },
    {
      "user": "viv",
      "text": "Lida which is based on Bastard's libdisasm, diStorm3 and beaengine are some open source disassembly engines that use recursive disassembly.Also a paper:  Obfuscation of executable code to improve resistance to static disassembly by Cullen and Saumya gives a rough algorithm for recursive sweep disassembly.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have decided to post my answer not to overthrow Igor's answer, but to have an addition to it. I was not comfortable with editing his post either. I am pretty new to the forum and not sure how it is taken by other members. \n\nThere is a little theory I have recently learned, which I would like to share. Anyways, what I have taken in about IDA Pro from The IDA Pro Book (Part I, Section 1) is that it uses Recursive Descent Disassembly, which is based on the concept of control flow. The key element to this approach is the analysis of each instruction in order to determine if it is referenced from any other location. Each instruction is classified according to how it interacts with EIP. There are several main classifications:\n\nTo summarize, I would like to quote The IDA Pro Book:\n\n",
      "votes": "12",
      "user": "PSS",
      "time": "Jun 26, 2013 at 20:36",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Here's a very simplified overview of how IDA does it:\n\nOf course, in reality things are more complex. To start with, there's not a single queue but several. From the SDK's auto.hpp:\n\n```\n//\n//      This file contains functions that work with the autoanalyzer\n//      queue. The autoanalyzer works when IDA is not busy processing\n//      the user keystrokes.\n//      The autoanalyzer has several queues. Each queue has its priority.\n//      A queue contains addresses or address ranges.\n//      The addresses are kept sorted by their values.\n//      The analyzer will process all addresses from the first queue, then\n//      switch to the second queue and so on.\n//      There are no limitations on the size of the queues.\n//      The analyzer stops when all queues are empty.\n//\n//      Also this file contains functions that deal with the IDA status\n//      indicator and the autoanalysis indicator.\n//      You may use these functions to change the indicator value.\n//\n\n// Names and priorities of the analyzer queues\n\ntypedef int atype_t;\nconst atype_t           // priority,  description\n  AU_NONE = 00,         //    placeholder, not used\n  AU_UNK  = 10,         //  0 convert to unexplored\n  AU_CODE = 20,         //  1 convert to instruction\n  AU_WEAK = 25,         //  2 convert to instruction (ida decision)\n  AU_PROC = 30,         //  3 convert to procedure start\n  AU_TAIL = 35,         //  4 add a procedure tail\n  AU_TRSP = 38,         //  5 trace stack pointer (not used yet)\n  AU_USED = 40,         //  6 reanalyze\n  AU_TYPE = 50,         //  7 apply type information\n  AU_LIBF = 60,         //  8 apply signature to address\n  AU_LBF2 = 70,         //  9 the same, second pass\n  AU_LBF3 = 80,         // 10 the same, third pass\n  AU_CHLB = 90,         // 11 load signature file (file name is kept separately)\n  AU_FINAL=200;         // 12 final pass\n\n```\n",
      "votes": "12",
      "user": "Igor Skochinsky",
      "time": "Jun 26, 2013 at 17:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "perror",
          "text": "Am I wrong if I say that you are using a work-list approach of the algorithm. Like in data-flow analysis ? (It is quite nice indeed)",
          "time": null
        }
      ]
    }
  ]
}