{
  "title": "FEEDFACE in OSX malware",
  "link": "https://reverseengineering.stackexchange.com/questions/1946/feedface-in-osx-malware",
  "content": "I was reverse engineering a piece of code in \"Crisis\" for fun and I encountered the following :-\n\n```\n__INIT_STUB_hidden:00004B8F                 mov     eax, 8FE00000h\n__INIT_STUB_hidden:00004B94\n__INIT_STUB_hidden:00004B94 loc_4B94:                               \n__INIT_STUB_hidden:00004B94                 mov     ebx, 41424344h\n__INIT_STUB_hidden:00004B99                 cmp     dword ptr [eax], 0FEEDFACEh\n__INIT_STUB_hidden:00004B9F                 jz      short loc_4BB9\n__INIT_STUB_hidden:00004BA1                 add     eax, 1000h\n__INIT_STUB_hidden:00004BA6                 cmp     eax, 8FFF1000h\n__INIT_STUB_hidden:00004BAB                 jnz     short loc_4B94\n\n```\nWhat is supposed to happen here? Why is the presence of FEEDFACE expected at the address 8FFF0000 or 8FFF1000? I understand that feedface/feedfacf are Mach-O magic numbers -- however why are they expected to be present at those addresses?\n\n",
  "votes": "8",
  "answers": 2,
  "views": "2k",
  "tags": [
    "malware",
    "osx"
  ],
  "user": null,
  "time": "Apr 28, 2013 at 15:53",
  "comments": [],
  "answers_data": [
    {
      "content": "It's the Mach-O header magic. From mach-o/loader.h:\n\n```\n/* Constant for the magic field of the mach_header (32-bit architectures) */\n#define MH_MAGIC        0xfeedface      /* the mach magic number */\n#define MH_CIGAM        0xcefaedfe      /* NXSwapInt(MH_MAGIC) */\n\n```\nIn OS X, the Mach-O header is often included as part of the __TEXT segment so it's mapped into memory. The code is searching for a Mach-O file mapped somewhere in that address range - probably some system library - possibly so it can search for a necessary function to call (enumerate Mach-O load commands to locate the symbol table, etc.).\n\n",
      "votes": "8",
      "user": "Igor Skochinsky",
      "time": "Apr 28, 2013 at 13:42",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Crisis is trying to locate dyld location in that piece of code: 32bits dyld is usually located at 8FE00000 - it uses that to solve symbols, if I'm not mistaken.\n\nCheck my Crisis analysis if you haven't already.\n\n",
      "votes": "3",
      "user": "Ange",
      "time": "May 7, 2013 at 10:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ange",
          "text": "(the link is not always working)",
          "time": null
        }
      ]
    }
  ]
}