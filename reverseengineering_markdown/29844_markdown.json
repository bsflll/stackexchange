{
  "title": "Double jump when calling functions",
  "link": "https://reverseengineering.stackexchange.com/questions/29844/double-jump-when-calling-functions",
  "content": "I wanted to ask why there is a double jump when calling some functions? For example first call:\n\n```\n.text:005AC266                 push    eax\n.text:005AC267                 call    j_WinRegisterWindow\n\n\n```\nSecond jump:\n\n```\n.text:00491157 j_WinRegisterWindow proc near           ; CODE XREF: WinMain+37p\n.text:00491157                 jmp     WinRegisterWindow\n.text:00491157 j_WinRegisterWindow endp\n\n\n```\nAnd finally it's function:\n\n```\n\n.text:005AC180 ; int __cdecl WinRegisterWindow(HINSTANCE hInstance)\n.text:005AC180 WinRegisterWindow proc near             ; CODE XREF: j_WinRegisterWindowj\n.text:005AC180\n.text:005AC180 hInstance       = dword ptr  8\n.text:005AC180\n.text:005AC180                 push    ebp\n.text:005AC181                 mov     ebp, esp\n.text:005AC183                 sub     esp, 40h\n.text:005AC186                 push    ebx\n.text:005AC187                 push    esi\n.text:005AC188                 push    edi\n\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "72",
  "tags": [
    "ida"
  ],
  "user": "black4joss",
  "time": "Jan 11, 2022 at 10:10",
  "comments": [
    {
      "user": "Robert",
      "text": "One possible reason is that the pointer in the call statement is limited to a certain bit size which is not enough to reach the actual implementation. What architecture is the binary you have loaded in Ida?",
      "time": null
    },
    {
      "user": "black4joss",
      "text": "x86 architecture",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It because of the \"Link Incrementally\".\n\nFor example, there is a test program:\n\n```\n#include <iostream>\n\nvoid test(void)\n{\n    std::cout << \"Hello\" << std::endl;\n    return;\n}\n\nint main()\n{\n    test();\n    return 0;\n}\n\n```\nIf I enable /INCREMENTAL option, the code is:\n\n```\n; __int64 __fastcall main()\nmain proc near\npush    rbp\npush    rdi\nsub     rsp, 0E8h\nlea     rbp, [rsp+20h]\nlea     rcx, __2B9C3776_ConsoleApplication1@cpp ; JMC_flag\ncall    j___CheckForDebuggerJustMyCode\ncall    j_?test@@YAXXZ  ; test(void)\nxor     eax, eax\nlea     rsp, [rbp+0C8h]\npop     rdi\npop     rbp\nretn\nmain endp\n\n; void test(void)\nj_?test@@YAXXZ proc near\njmp     ?test@@YAXXZ    ; test(void)\nj_?test@@YAXXZ endp\n\n; void test(void)\n?test@@YAXXZ proc near\npush    rbp\npush    rdi\nsub     rsp, 0E8h\nlea     rbp, [rsp+20h]\nlea     rcx, __2B9C3776_ConsoleApplication1@cpp ; JMC_flag\ncall    j___CheckForDebuggerJustMyCode\nlea     rdx, _Val       ; \"Hello\"\nmov     rcx, cs:__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; _Ostr\ncall    j_??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char>>(std::ostream &,char const *)\nlea     rdx, j_??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char>>(std::ostream &)\nmov     rcx, rax\ncall    cs:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))\nlea     rsp, [rbp+0C8h]\npop     rdi\npop     rbp\nretn\n?test@@YAXXZ endp\n\n```\nAnd if I disable the /INCREMENTAL option, the code is:\n\n```\n; __int64 __fastcall main()\nmain proc near\npush    rbp\npush    rdi\nsub     rsp, 0E8h\nlea     rbp, [rsp+20h]\nlea     rcx, __2B9C3776_ConsoleApplication1@cpp ; JMC_flag\ncall    __CheckForDebuggerJustMyCode\ncall    ?test@@YAXXZ    ; test(void)\nxor     eax, eax\nlea     rsp, [rbp+0C8h]\npop     rdi\npop     rbp\nretn\nmain endp\n\n; void test(void)\n?test@@YAXXZ proc near\npush    rbp\npush    rdi\nsub     rsp, 0E8h\nlea     rbp, [rsp+20h]\nlea     rcx, __2B9C3776_ConsoleApplication1@cpp ; JMC_flag\ncall    __CheckForDebuggerJustMyCode\nlea     rdx, _Val       ; \"Hello\"\nmov     rcx, cs:__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; _Ostr\ncall    ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char>>(std::ostream &,char const *)\nlea     rdx, ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char>>(std::ostream &)\nmov     rcx, rax\ncall    cs:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))\nlea     rsp, [rbp+0C8h]\npop     rdi\npop     rbp\nretn\n?test@@YAXXZ endp\n\n```\nMore info about the Link Incrementally:\nhttps://docs.microsoft.com/en-us/cpp/build/reference/incremental-link-incrementally?view=msvc-170\n\n",
      "votes": "4",
      "user": "Ox9A82",
      "time": "Jan 11, 2022 at 11:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "black4joss",
          "text": "Thank you very much!",
          "time": null
        },
        {
          "user": "BadSugar",
          "text": "@black4, please review your past questions and kindly accept answers that answer your question. This could help to see which question has an answer.",
          "time": null
        }
      ]
    }
  ]
}