{
  "title": "What does __PAIR__ mean in Hex-Rays decompiler output? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/8317/what-does-pair-mean-in-hex-rays-decompiler-output",
  "content": "what does this code on IDA? i've found with this a couple of times and i don't have idea what means.\n\n```\nint a5;\nint dGainMax;\nCOERCE_DOUBLE(__PAIR__(a5, dGainMax))\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "8k",
  "tags": [
    "ida",
    "decompiler",
    "hexrays"
  ],
  "user": "Criss Moreyra",
  "time": "10 years ago",
  "comments": [
    {
      "user": "huang",
      "text": "See here: gist.github.com/es3n1n/â€¦, hope to help.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "__PAIR__() seems to be a macro that computes an unsigned long value from its two arguments, which it interprets as containing the high and low bits of that value. \n\nThe topic linked by Guntram - Understanding __PAIR__ macro from IDA PRO Pseudo Decompiler to look better contains a definition for the macro and examples of its use, but no explanation of it.\n\n```\n// The following definition is not quite correct because it always returns\n// uint64. The above C++ functions are good, though.\n#define __PAIR__(high, low) (((unsigned long)(high)<<sizeof(high)*8) | low)\n\n```\nThe macro doesn't make a lot of sense. Either it was transcribed erroneously (with the original containing sizeof(low) instead of sizeof(high)) or the above-mentioned pseudo decompiler uses it only in cases where it works. \n\nIf the following conditions hold:\n\nthen the macro can be used to form a value of double register width - like DX:AX - from two register-width values. \n\nCondition 2 is necessary because otherwise the behaviour would be undefined (no-op on Intel chips, for example, since they mask shifts for registers <= 32 bit with 31). Condition 3 is necessary because otherwise 'excess' bits in low could bleed over the bits of high in the resulting value.\n\nThe comment and the context (usage example) suggest that \n\nThis implies a compiler of the LP64 variety, like those usually found in 64-bit UNIX (not the LLP64 kind common on Wintel platforms). \n\nThe naming of the COERCE_DOUBLE macro is a bit unfortunate since it probably refers to converting the value to a double while 'coercing' might also mean reinterpreting the bits as a floating point value, something which certain programming tricks used to rely on. \n\nAlso, there is some ambiguity regarding the conversion. The x86 FPU can load signed integers directly into floating point registers (FILD) but not unsigned ones, which means that x86 compilers have to emit a load of extra code for converting unsigned integers.\n\nThis means that the __PAIR__ macro with its implied unsignedness can erroneously suggest major inefficiencies that aren't there, since x86 CPUs tend to interpret double-width register values are as signed whenever signedness matters (see instructions like CDQ, DIV or FILD, for example). The devil is in the details which are hidden and glossed over by the strange macros. Hence it is advisable to consult the disassembly to find out what's really going on, even though the SP simulation of the disassembler can be a bit off on occasion.\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}