{
  "title": "How is the I/O address space on the PC arranged?",
  "link": "https://reverseengineering.stackexchange.com/questions/20333/how-is-the-i-o-address-space-on-the-pc-arranged",
  "content": "I'm disassembling a 16-bit DOS executable, and looking at the following three instructions:\n\n```\nmov dx,0x3ce\nmov ax,0xff08\nout dx,ax\n\n```\nI know it writes the value 0xff08 to I/O port 0x3ce. I also know that port 0x3ce is the \"Graphics 1 & 2 Address\" register on an IBM EGA card. Problem is, according to the manual, this port should take a byte value, not a word.\n\nWhat I'm guessing is happening is that the word 0xff08 is taken as two different bytes, where one byte ends up in the specified register and the other goes to an adjacent one. Or maybe the offending byte gets thrown out? Either way it's a guess, as I can't seem to find much info about this specific behavior.\n\nI don't have a good intuitive sense about which direction the I/O address space flows, or how the little-endian storage of the word may come into play. After this snippet executes, which ports got which bytes?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "482",
  "tags": [
    "disassembly",
    "x86",
    "address",
    "graphics"
  ],
  "user": "smitelli",
  "time": "Jan 10, 2019 at 23:31",
  "comments": [],
  "answers_data": [
    {
      "content": "Port I/O works similar to memory I/O, so the low byte (08) will be written to the port 3CE and the high byte (0xFF) to the port 3CF. \n\nExample from Use of bitplanes in mode 12h:\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Jan 11, 2019 at 0:06",
      "is_accepted": false,
      "comments": []
    }
  ]
}