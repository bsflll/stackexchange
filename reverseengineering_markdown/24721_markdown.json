{
  "title": "MSVC Destructors with 2 Arguments",
  "link": "https://reverseengineering.stackexchange.com/questions/24721/msvc-destructors-with-2-arguments",
  "content": "I'm reversing a program which I assume was compiled with MSVC. It's seeming like the first entry in each vtable is the class' destructor. However, when I look at the disassembly and decompilation, it seems like the destructors all take a second argument, and that the object's memory is only freed if that second argument is nonnull.\n\nWhat is the purpose for this second argument? I would think that, if it's a destructor, the class should always be destructed and its memory freed. So why the second argument which could prohibit the memory from being freed up?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "632",
  "tags": [
    "msvc"
  ],
  "user": "sasschary",
  "time": "Apr 16, 2020 at 3:16",
  "comments": [
    {
      "user": "malikcjm",
      "text": "In C++ there is a construct called \"placement new operator\". It can be used to construct object in pre-allocated area. For example on the stack. In such case when memory was not allocated for the object, destructor cannot released that memory. Please take a look at  \"How to delete the memory allocated by placement new ?\" on geeksforgeeks.org/placement-new-operator-cpp there is nice example. It's possible to call destructor directly like this : \"    // No delete : Explicit call to Destructor.      pe->~Complex(); \"",
      "time": null
    },
    {
      "user": "sasschary",
      "text": "Interesting, I didn't know about placement new. So, then, a call to delete object in the original code might call the destructor with a non-null second argument, while a call to the destructor, say, because the object was on the stack and went out of scope would have a null second argument, and thus not try to deallocate memory which was on the stack. Am I understanding correctly?",
      "time": null
    },
    {
      "user": "malikcjm",
      "text": "This is exactly how I understood usage of that second parameter.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "These wrappers are used in classes with virtual destructors to cover two situations:\n\nFrom my old article:\n\nFor more details see also C++: Under the Hood by Jan Gray, one of the main developers of Visual C++.\n\nI also recommend you to make some classes with custom operators new/delete and check the generated code.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Apr 18, 2020 at 21:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}