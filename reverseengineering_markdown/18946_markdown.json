{
  "title": "What's the meaning of dword_XXXX and offset dword_XXXX in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/18946/whats-the-meaning-of-dword-xxxx-and-offset-dword-xxxx-in-ida",
  "content": "Consider the following code:\n\nIn C++:\n\n```\nSomeClass* globalPointer; // we don't know what it points to, but it's not null a pointer, it's initialized\n\nvoid someFunction()\n{\n  globalPointer->someVirtualFunction();\n}\n\n```\nIn IDA (inside someFunction):\n\n```\nmov     ecx, dword_XXXX ; ecx = globalPointer\nmov     eax, [ecx] ; eax = vtable\njmp     dword ptr [eax+30h] ; call vtable[0x30]\n\n```\nThe meaning of dword_XXXX is just a pointer value. I tried to check it this way:\n\n```\nprintf(\"Address of pointer = %p, pointer's value = %p  \n\", &otherPointer, otherPointer);\n\n```\nAnd I got:\n\n```\npush dword_XXXX ; otherPointer\npush offset dword_XXXX ; &otherPointer\npush offset format ; \"Address of pointer = %p, pointer's value = %p  \n\"\n\ncall printf\n\n```\nThus dword_XXXX seems to be a pointer's value and offset dword_XXXX seems to be an address of the pointer.\n\nHowever, I noticed another code (which can be expressed the same as the c++ function I provided above):\n\n```\nSomeClass2* globalPointer2;\n\nvoid someFunction2()\n{\n  globalPointer2->someVirtualFunction2();\n}\n\n```\nAnd IDA surprisingly gave me (inside someFunction2):\n\n```\nmov eax, dword_XXXX ; eax = globalPointer2\nmov ecx, offset dword_XXXX ; ecx = &globalPointer2\njmp dword ptr [eax+5Ch] ; call [globalPointer2+0x5C] with &globalPointer2 as this?? It should be call vtable[0x5C]\n\n```\nI checked the values and found out that IDA somehow \"changes\" the meaning of dword_XXXX, in this case it actually was:\n\n```\nmov eax, dword_XXXX ; eax = vtable\nmov ecx, offset dword_XXXX ; ecx = globalPointer2\njmp dword ptr [eax+5Ch] ; call vtable[0x5C]\n\n```\nWhy the meaning of dword_XXXX was different in the second case? In the first case it was just pointer, but in the second case it was *pointer.\n\nAnd the meaning of offset dword_XXXX in the first case was &pointer and in the second case was pointer.\n\nI'm sorry if something is unclear, I really tried to simplify that as much as possible.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "x86",
    "nasm"
  ],
  "user": "anx199",
  "time": "Jul 31, 2018 at 18:03",
  "comments": [
    {
      "user": "Avery3R",
      "text": "Remove your answer from the question and add it as an answer. You can post answers to your own questions",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think I figured out what's going on.\n\nThe opcodes for the printing were (assuming dword_AAAAAAAA instead of general dword_XXXX):\n\n```\nFF 35 AA AA AA AA    push dword_AAAAAAAA; otherPointer\n68 AA AA AA AA       push offset dword_AAAAAAAA; &otherPointer\n\n```\nThanks to this site, I know that the above instructions are equal to:\n\n```\npush [0xAAAAAAAA]; push otherPointer\npush 0xAAAAAAAA;   push &otherPointer\n\n```\nSo, in this case, dword_XXXX is equal to value of a pointer. However, in the second case (again assuming dword_AAAAAAAA instead of general dword_XXXX):\n\n```\nA1 AA AA AA AA    mov eax, dword_AAAAAAAA ; eax = vtable\nB9 AA AA AA AA    mov ecx, offset dword_AAAAAAAA ; ecx = globalPointer2\n\n```\nAnd it's equal to:\n\n```\nmov eax, [0xAAAAAAAA] ; eax = vtable\nmov ecx, 0xAAAAAAAA ; ecx = globalPointer2\n\n```\nThus in this case dword_XXXX is equal to *pointer rather than pointer.\n\nTherefore I think the answer is: it depends. We need to understand what dword_XXXX means - it can be a pointer, an address of the pointer, or even pointer to pointer to pointer, and so on. But IDA gives us a hint: offset dword_XXXX means a raw value of whatever dword_XXXX is and dword_XXXX gives a dereferenced value of it.\n\n",
      "votes": "5",
      "user": "anx199",
      "time": "Aug 3, 2018 at 12:41",
      "is_accepted": true,
      "comments": []
    }
  ]
}