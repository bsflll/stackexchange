{
  "title": "How works k command in windbg",
  "link": "https://reverseengineering.stackexchange.com/questions/31624/how-works-k-command-in-windbg",
  "content": "I am studying a Windows x86 binary in windbg.\nWhen i debug a function, in can see the call stack with « k » command.\n\nMy question is: how works windbg internaly to get this call stack ?\n\nI was thinking it works with ebp register and stack frame.\n\nBut some functions does not push esp/ebp in the begining. So how works k command in this case ?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "261",
  "tags": [
    "x86",
    "windbg",
    "callstack"
  ],
  "user": "Bob5421",
  "time": "Mar 4, 2023 at 14:47",
  "comments": [],
  "answers_data": [
    {
      "content": "It uses the ebp, esp and eip registers for each stack frame unless you explicitly pass them to the k command yourself. If those registers aren't set correctly then usually you'll get a inaccurate stack trace or nothing at all.\n\nYou might find this article to be useful as well.\n\n",
      "votes": "1",
      "user": "sudo",
      "time": "Mar 6, 2023 at 20:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}