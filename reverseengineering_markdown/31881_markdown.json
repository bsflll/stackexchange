{
  "title": "Identify mod operation in ARM firmware with IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/31881/identify-mod-operation-in-arm-firmware-with-ida",
  "content": "I have the firmware in which mod operation must be done. I want to find this part of instructions.\n\nAssume the following logic exist in the firmware:\n\n```\nres = var % 17\n\n```\nI have tried to make search by % 0x11 using IDA pseudocode and python but it does not find anything. Also I have tried to use gcc to dissemble this mod operation written in C but without any success.\n\nArchitecture: armv7-m\n\nCPU: cortex-m4\n\n",
  "votes": "2",
  "answers": 1,
  "views": "156",
  "tags": [
    "ida",
    "disassembly",
    "arm"
  ],
  "user": "ALEX",
  "time": "May 18, 2023 at 16:52",
  "comments": [
    {
      "user": "genghiskhan",
      "text": "I can't say for certain but one thing to look for would be division by multiplication which could be involved in a modulo calculation. In short, look for a multiplication by a weird/large constant then a right shift by floor(log2(17)) = 4.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "An option in these cases is to compile a relevant code snippet with appropriate architecture options and see what assembly is generated.\n\nFor example, take this code.\n\n```\nlong mod17( long x )\n{\n    return x % 17;\n}\n\n```\nCompiling it with gcc -mcpu=cortex-m4 -O2, gives -\n\n```\nmod17(long):\n        ldr     r3, .L3\n        smull   r3, r2, r3, r0\n        asrs    r3, r0, #31\n        rsb     r3, r3, r2, asr #3\n        add     r3, r3, r3, lsl #4\n        subs    r0, r0, r3\n        bx      lr\n.L3:\n        .word   2021161081    // 0x78787879\n\n```\nThe output assembly gives some clues that you could look for in your firmware -\n\nTests of similar code using int instead of long results in the same magic constant.\n\nHowever, using unsigned integers results in a different magic constant - 0xF0F0F0F1 and just 1 shift instruction so you might want to look for these too.\n\n(Compulsory godbolt link.)\n\n",
      "votes": "2",
      "user": "Ian Cook",
      "time": "May 19, 2023 at 21:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "ALEX",
          "text": "As I wrote in my question I tried to do exactly what you have done but I am unable to find any magic constants or similar sequence of commands.",
          "time": null
        }
      ]
    }
  ]
}