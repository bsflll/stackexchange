{
  "title": ".00cfg section in the PE file",
  "link": "https://reverseengineering.stackexchange.com/questions/19593/00cfg-section-in-the-pe-file",
  "content": "What's that .00cfg section that is being added by Visual Studio 2017\nto PE32+ binary files (for x64 builds)? I'm assuming it stands for\n\"Control Flow Guard\" section. It is relatively small and mostly empty:\n\n\n\nAny idea what is the layout of data in it?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "pe",
    "windows-10",
    "pe32",
    "x86-64"
  ],
  "user": "c00000fd",
  "time": "Oct 10, 2018 at 8:57",
  "comments": [],
  "answers_data": [
    {
      "content": "Windows loader does not care about section names, so the name does not really matter, but usually this section contains the pointer to the indirect call guard check (___guard_check_icall_fptr). The pointer to it is stored in the GuardCFCheckFunctionPointer field of the load configuration directory.\n\nI guess in the newer files it may contain some additional pointers (see below). The zeroes are probably just padding to the default section alignment (512 or 1024 bytes, not sure which).\n\nP.S. found a recent x64 PE with more pointers. Apparently the following is the full layout for a 32-byte section:\n\n```\n __guard_check_icall_fptr       dq offset _guard_check_icall_nop\n __guard_dispatch_icall_fptr    dq offset _guard_dispatch_icall_nop\n __guard_ss_verify_failure_fptr dq offset __guard_ss_verify_failure_default\n __guard_ss_verify_sp_fptr      dq offset __guard_ss_verify_sp_default\n\n```\nFirst two pointers are part of the Control Flow Guard implementation, the other two are from the now-deprecated Return Flow Guard. All four are referenced by fields in the load configuration directory, i.e. in theory they don't have to be in this order or even placed together.\n\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "Oct 10, 2018 at 20:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "c00000fd",
          "text": "Thanks. What was weird for me is that they chose to dedicate the entire section to that. Why not use an existing data section.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "in most binaries I've seen it's meged into .rdata or .text. Ifact, I'm not sure if I've ever seen it remaining separate. possibly your sample had some customization",
          "time": null
        }
      ]
    },
    {
      "content": "The most useful reference I've seen about this section is in this Adobe source comment:\n\n```\n//\n// Allocate xyz in the .00cfg so that it is implicitly merged into the \n// import section of the binary (which is read-only).\n// Indirect calls using this pointer do not have the guard check function,\n// and so will not fail the CFG check.\n//\n\n```\nThe code appears to add the following data to the section (assuming x64):\n\n```\n8 byte address the function\n4 byte boolean (speculation) whether or not indirect calls should be verified.\n4 byte boolean (speculation) whether or not the function pointer is valid.\n\n```\nI have yet to see any official documentation on the section though.\n\n",
      "votes": "2",
      "user": "josh poley",
      "time": "Oct 10, 2018 at 16:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}