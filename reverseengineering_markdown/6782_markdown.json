{
  "title": "IDA Pro: How can I set memory breakpoint on field of structure?",
  "link": "https://reverseengineering.stackexchange.com/questions/6782/ida-pro-how-can-i-set-memory-breakpoint-on-field-of-structure",
  "content": "How can I set memory breakpoint on field of structure ?\n\nCurrently if I mapped structure to memory region it uses starting address of structure as address of all fields. See screenshow\n\n\n\nAs result I cannot quickly add breakpoint to field isHandshakeReceived. I'd need to manually calculate its address.\n\nIs there easier method ?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida"
  ],
  "user": "expert",
  "time": "Dec 7, 2014 at 22:49",
  "comments": [],
  "answers_data": [
    {
      "content": "Like most input fields in IDA, the breakpoint dialogue's Location field accepts expressions like \n\n```\neax + GetMemberOffset(GetStrucIdByName(\"foo_t\"), \"isHandshakeReceived\")\n\n```\nI have no idea why IDA doesn't accept 0x376e5f0 + foo_t.isHandshakeReceived... Anyway, being able to enter expressions is very useful and it can save a lot of hassle.\n\nThe erroneous address display is a result of the simplistic way in which IDA manages things internally. Basically, everything contained in a struct or array belongs to its starting address ('head'), and if the display is continued over multiple lines then IDA simply reprints the starting address instead of the correct address. It's a bit annoying but that's the way IDA works.\n\nP.S.: perhaps it would be worth it to file a defect report or post in IDA's bug forum; after all, the displayed addresses are definitely wrong. I wouldn't hold my breath but who knows...\n\n",
      "votes": "1",
      "user": "DarthGizka",
      "time": "Jan 7, 2015 at 6:25",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "To the best of my knowledge IDA can't go through and automatically identify\n\nUse DbgHook in the following way:\n\n```\nclass DbgHook(DBG_Hooks):\n... snip ...\ndebugger = DbgHook()\ndebugger.hook()\n\n```\nUsing this class will require you to implement the def dbg_bpt(self,tid,ea) callback. This call back is called when a breakpoint is hit in your code. From there you can set a breakpoint on the instruction where the base address of the structure is moved into a register. You can get the value of that register in your code using the following:\n\n```\nfrom idc import *\nstructAddr = idc.GetRegValue('EAX')\n\n```\nIn your dbg_bpt callback you can calculate the offset inside the structure and set an access breakpoint on that address using SetBptAttr(address, bptattr, value) where address is the address of the member (calculated off of the register) and value is BPT_RDWR.\n\nHere is the IDA Python API documentation and here is a good sample project implementing debugger callbacks.\n\n",
      "votes": "0",
      "user": "Fewmitz",
      "time": "Dec 8, 2014 at 4:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}