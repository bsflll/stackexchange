{
  "title": "Forcefully interpret code in x64dbg",
  "link": "https://reverseengineering.stackexchange.com/questions/18528/forcefully-interpret-code-in-x64dbg",
  "content": "I was just wondering if there was a way to force an interpretation of a block of code in x64dbg. \n\nThe section im analyzing fluctuates between this:\n\n\n\nand this:\n\n\n\n",
  "votes": "2",
  "answers": 1,
  "views": "651",
  "tags": [
    "x64dbg"
  ],
  "user": "Xymistic",
  "time": "Jun 15, 2018 at 18:50",
  "comments": [
    {
      "user": "Megabeets",
      "text": "It's not quite clear what are you asking. Please clarify your question and what you want to achieve. Also, please mention what you already tried.",
      "time": null
    },
    {
      "user": "Xymistic",
      "text": "My question might be completely bogus - I'm not too sure but essentially: When i scroll up and down, sometimes sections of code appear as data instead of commands and they seem to swap. Is there any way for me to force x64dbg to interpret a section as code in a specific way so that instead of interpreting it like this: puu.sh/AFKL1/46fcdf5c8d.png  it is interpreted as this: puu.sh/AFKMI/5259abad45.png  (I tried to get the same addresses)",
      "time": null
    },
    {
      "user": "Xymistic",
      "text": "I haven't tried much either because I'm not too sure what exactly is happening (why the code interpretation changes?).",
      "time": null
    },
    {
      "user": "Megabeets",
      "text": "Seems like the code isn't aligned correctly. Give a try to right-click and then choose an option from the \"Analysis\" menu. For example, \"Analyze module (CTRL+A)\"",
      "time": null
    },
    {
      "user": "Xymistic",
      "text": "Thanks for the suggestion, however analysing the module doesn't seem to help.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You are encountering the issue of backwards disassembly. When you give x64dbg an address to disassemble at it will start decoding at exactly this address, go to the next instruction, etc.\n\nFor example if you have the bytes:\n\nEB 00 48 83 C4 38 C3\n\nAnd you start disassembling at the first byte you will see:\n\n```\n0 | EB 00       | jmp 2\n2 | 48 83 C4 38 | add rsp,38\n6 | C3          | ret\n\n```\nIf you start disassembling at the second byte you will see:\n\n```\n1 | 00 48 83    | add byte ptr ds:[rax-7D],cl\n4 | C4          | ???\n5 | 38 C3       | cmp bl,al\n\n```\nThe reason you are seeing garbage like this when scolling up is that x64dbg has no idea about instruction starts and tries to heuristically determine what the previous instruction was based on the bytes. If the result of this algorithm is wrong x64dbg will disassemble at an incorrect location causing strange looking instructions. You can find the implementation of that algorithm here. It is based on the algorithm used inside OllyDbg.\n\nAs some users suggested you can use analysis, but the results of this are not used during backwards disassembly because generally everything works fine.\n\n",
      "votes": "4",
      "user": "mrexodia",
      "time": "Jun 15, 2018 at 17:49",
      "is_accepted": true,
      "comments": []
    }
  ]
}