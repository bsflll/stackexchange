{
  "title": "Steps for determining the hash algorithm used",
  "link": "https://reverseengineering.stackexchange.com/questions/2642/steps-for-determining-the-hash-algorithm-used",
  "content": "I have 5 test users and they have the same password. I am testing an application which stores the password in the database in an encrypted format. I want learn which hash algorithm has been used on this program? So my question is what is your advice to solve this problem? \n\nAre there any standard steps that can be followed?\n\nUser Password: test123\n\nencrypt format for different user's same  password:  \n\nh9ttr35YmriZmKpo/9sasilzawjUbKYZ\n\nM321NBD2wWLfltj46O/EuVmadsaHn8o0\n\n213/zAYdB+Bi14ZayHPygNpklhjDijka\n\n",
  "votes": "3",
  "answers": 2,
  "views": "17k",
  "tags": [
    "encryption",
    "cryptography",
    "cryptanalysis"
  ],
  "user": "Goshawk",
  "time": "Sep 16, 2013 at 14:44",
  "comments": [
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "How long does it take to compute a hash? Is it too little to measure, or can you see a brief CPU spike?",
      "time": null
    },
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "Do you have at least the application binary? Are the symbols stripped?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The normal process in that case, by which I mean what attackers do, is to reverse-engineer the application code, i.e. disassembly and similar tools, to find the actual code. This will give definite answers.\n\nIf you do not reverse-engineer the code, then you will be reduced to guesswork, which can be tedious because there will be no clue as to whether you are \"close\" to the solution or not. Contrary to what is often shown in Hollywood movies, when the key or algorithm is not right, you do not get a slightly blurred picture. The real-world cryptography is a world of all-or-nothing; you either have the right system all along, down to the last bit, or you get seemingly random noise. (Except if the algorithm is prodigiously poor, which unfortunately happens quite often when people feel that they can do crypto like they do Web pages, by hastily slapping together examples scavenged from blog sites.)\n\nAs for guesses, we can say the following:\n\n",
      "votes": "13",
      "user": null,
      "time": "Aug 9, 2013 at 13:01",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The resulting cipher is 32 characters so you're probably looking at an MD5 hash. If it was SHA256 it would be 64 characters long. \n\nAs the resulting cipher is different in each case, then the application is likely using a salt with the hash to increase the security and remove the threat of using rainbow tables for hash comparison.\n\nAccess to the application source code or database stored procedures would be useful!\n\n",
      "votes": "0",
      "user": null,
      "time": "Aug 9, 2013 at 10:45",
      "is_accepted": false,
      "comments": [
        {
          "user": "Gilles 'SO- stop being evil'",
          "text": "The hashes are 24 bytes long, not 32 bytes. The remark about the salt is correct. It's probably 8 bytes of salt + 16 bytes of hash. The hash could be MD5, or it could be a truncated SHA-1 or SHA-2, possibly iterated. Or it could be something else altogether, but the mere fact that the hash is salted shows that the application is at least doing something right. Maybe even using a good hashing function like PBKDF2!",
          "time": null
        },
        {
          "user": "AviD",
          "text": "@Gilles The salt might be included in that value, or it might not. Or, for all we know, that is not a hash, but a symmetric encryption. Or something else.",
          "time": null
        },
        {
          "user": "Steeve",
          "text": "The hash can't be MD5 because MD5 hashes contain only hexadecimal characters.",
          "time": null
        }
      ]
    }
  ]
}