{
  "title": "Frida Android how to change value of array passed to method",
  "link": "https://reverseengineering.stackexchange.com/questions/32161/frida-android-how-to-change-value-of-array-passed-to-method",
  "content": "Let's assume we have a such code snippet:\n\n```\npublic class Test {\n  public void testArrayValue() {\n    Object[] objects = new Object[1];\n    fillObject(objects);\n    Log.d(\"test\", (String)objects[0]);\n  }\n  public void fillObject(Object[] objects) {\n    objects[0] = new String(\"fillObject str\");\n  }\n}\n\n```\nHow to hook the fillObject method to change the value of the first element in array passed to method?\n\n```\nJava.perform(function () {\n    var clazz = Java.use(\"com.some.package.Test\");\n    clazz.fillObject.overload('[Ljava.lang.Object;').implementation = function(var_0) {\n        \n      // this won't work :( assigning a string value to var_0[0] \n      // does not pass it outside the hooked code\n      // \n      var stringClass = Java.use(\"java.lang.String\");\n      var stringInstance = stringClass.$new(\"Hello World\");\n      var_0[0] = stringInstance\n    };\n});\n\n```\nThe output of running hooked code will be \"fillObject str\", and not \"Hello World\"\n\n",
  "votes": "1",
  "answers": 1,
  "views": "629",
  "tags": [
    "java",
    "frida"
  ],
  "user": "alx",
  "time": "Aug 12, 2023 at 5:17",
  "comments": [
    {
      "user": "alx",
      "text": "yes, the hooked code is executed. I just removed all unnecessary code to make it easier to point out the code that doesn't work. Despite the fact that I  assign a new value to var_0[0], it is not passed out of the hooked code.",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Just for the records: is the Java code running in an JRE or inside an Android app (Dalvik VM)?",
      "time": null
    },
    {
      "user": "alx",
      "text": "Java bytecode is converted to Dalvik bytecode and runs inside Dalvik VM",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Yes I know that. From the perspective of Java code there is no difference but from the perspective of Frida there is a difference. I just want to understand if the bug you were running into is limited to Android or if it is a general Java hooking problem.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Frida seems to have some bugs regarding Java arrays that are modified or replaced by JavaScript code. My guess is that the conversion (and mapping of modifications) between the Java array instance and JavaScript array instance has some flaws.\n\nTherefore the only alternative I see is using pure Java methods to modify the array content, that way you should be able to bypass this bug.\n\nOne possible way is to use the method Arrays.fill(Object[] array, int fromIndex,int toIndex, Object val)1:\n\n```\nvar stringClass = Java.use(\"java.lang.String\");\nvar stringInstance = stringClass.$new(\"Hello World\");\nvar arraysClass = Java.use(\"java.util.Arrays\");\narraysClass.fill(var_0, 0, 1, stringInstance); // equivalent to var_0[0] = stringInstance\n\n```\nI have not tested this code, but it should perform the array modification you  want to do.\n\n",
      "votes": "1",
      "user": "Robert",
      "time": "Aug 12, 2023 at 16:51",
      "is_accepted": true,
      "comments": [
        {
          "user": "alx",
          "text": "Great! It works. Only a little fix: toIndex - the index of the last element exclusive: arraysClass.fill(var_0, 0, 1, stringInstance); Thanks.",
          "time": null
        },
        {
          "user": "Robert",
          "text": "@alx Yes indeed the toIndex parameter should be 1, I have corrected that in my answer. If my answer was helpful feel free to upvote it (up arrow on the left) and/or accept it (gray arrow).",
          "time": null
        }
      ]
    }
  ]
}