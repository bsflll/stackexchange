{
  "title": "Function names syntax returned by radare2's afl?",
  "link": "https://reverseengineering.stackexchange.com/questions/20359/function-names-syntax-returned-by-radare2s-afl",
  "content": "Radare2's afl command returns function names with a specific syntax that I could not find documentation on:\n\nFor example:\n\n```\nradare2 -2 -A -q -c \"aflj\" C:/Windows/system32/advapi32.dll\n\n0x77cce13c   22 280          sub.ntdll.dll_RtlNtStatusToDosError_13c\n0x77cce259    7 62           fcn.77cce259\n0x77cce29c   10 88           sub.KERNEL32.dll_lstrcmpiW_29c\n0x77cce2f9   24 463          sub.KERNEL32.dll_lstrlenW_2f9\n0x77c617b4    1 40           sym.imp.KERNEL32.dll_LocalAlloc\n0x77c6abe5    5 92   -> 130  sub.KERNEL32.dll_LocalAlloc_be5\n0x77c7edd5    1 20           sub.KERNEL32.dll_LocalAlloc_dd5\n\n```\nThe DLL file names are all in lowercase:\n\n",
  "votes": "3",
  "answers": 1,
  "views": "922",
  "tags": [
    "radare2"
  ],
  "user": "remi.chateauneu",
  "time": "Jan 13, 2019 at 18:52",
  "comments": [
    {
      "user": "Jongware",
      "text": "The last 3 hex digits are taken from the address. As for the capitalization: did you compare this with the names of those DLL's?",
      "time": null
    },
    {
      "user": "remi.chateauneu",
      "text": "So, the 3 hex digits are taken from the address of what ? How is it possible to point to a DLL \"sub.*\" function \"sub.*\" which is not an exported symbole \"sym.*\" ?   Is there a relation between sym.imp.KERNEL32.dll_LocalAlloc and  sub.KERNEL32.dll_LocalAlloc_be5 ?  Here are the file names, they are in lowercase:  - \"C:\\Windows\\System32  \ntdll.dll\"  - \"C:\\Windows\\System32\\kernel32.dll\"",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I will start by answering your specific three questions, and then will shed more light about the naming structure of functions in radare2.\n\nThe meaning of the 3 hexadecimal digits at the end of function names like \"sub.KERNEL32.dll_lstrlenW_2f9\" are the last 3 digits of the function address. The confusion here is because this is not an imported function name, but a regular function. This naming caused by the aan command which you probably used when you executed aaa or opened a file with th -A flag: $ r2 -A <filename>. \n\nAs stated in the radare2 documentation:\n\n```\n...\naan                 autoname functions that either start with fcn.* or sym.func.*\n...\n\n```\nThe aan command will auto-generate a name, based on the flags being used in the function. This should ease the analysis for the user before analyzing the function.\n\nSo let's have a look at a function which is called sub.KERNEL32.dll_DisableThreadLibraryCalls_18002a860. You can see that an import function called \"DisableThreadLibraryCalls\" is being called. This is why the function was renamed by aan:\n\n```\n[0x18002a860]> pdf\n╭ (fcn) sub.KERNEL32.dll_DisableThreadLibraryCalls_18002a860 35\n│   sub.KERNEL32.dll_DisableThreadLibraryCalls_18002a860 ();\n│           ; arg unsigned int arg3 @ rdx\n│           0x18002a860      4883ec28       sub rsp, 0x28\n│           0x18002a864      83fa01         cmp edx, 1\n│       ╭─< 0x18002a867      7510           jne 0x18002a879\n│       │   0x18002a869      48833dff1f00.  cmp qword [0x18002c870], 0 ; [0x18002c870:8]=0\n│      ╭──< 0x18002a871      7506           jne 0x18002a879\n│      ││   0x18002a873      ff159f170000   call qword sym.imp.KERNEL32.dll_DisableThreadLibraryCalls \n│      ╰╰─> 0x18002a879      b801000000     mov eax, 1\n│           0x18002a87e      4883c428       add rsp, 0x28\n╰           0x18002a882      c3             ret\n[0x18002a860]>\n\n```\nsym stands for \"Symbol\". This is a symbol taken from the binary's Symbol Table.\nsub. stands for \"Subroutine\". This can by a standalone function but most likely a part of a function, like JMPTABLE blocks, addresses in pointer table, etc.\n\nIn general, radare2 keeps the case of the libraries as shown in the Import Address Tables. But I think sometimes it is being modified in favor of readability and to make it easier to differentiate between an import function, and a renamed function (aan).\n\nI made some ASCII-arts for you, hope this would make things clearer.\n\nRegular Function\n\n```\nfcn.77cce259\n|      |\n|      |__ The function's address\n|\n|__ stands for \"Function\"\n\n```\nImported function\n\n```\nsym.imp.KERNEL32.dll_LocalAlloc\n |   |     |            |\n |   |     |            |__ The imported function name, \"LocalAlloc\"\n |   |     |\n |   |     |__ the Library name. In this case, \"kernel32.dll\"\n |   |\n |   |\n |   |___ \"Import\", this is an imported function\n |\n |___ \"Symbol\", taken from the Symbol Table\n\n```\nAuto-Generated Name\n\n```\nsub.ntdll.dll_RtlNtStatusToDosError_13c\n |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n |                   |\n |                   |__ auto-generated name based on flags that being used\n |                       the 3 digits at the end are the function's address\n |__ \"Subroutine\"\n\n```\n",
      "votes": "6",
      "user": "Megabeets",
      "time": "Jan 14, 2019 at 15:11",
      "is_accepted": true,
      "comments": [
        {
          "user": "remi.chateauneu",
          "text": "If I have well understood, the function sub.KERNEL32.dll_DisableThreadLibraryCalls_18002a860 is not strictly related to the import sym.imp.KERNEL32.dll_DisableThreadLibraryCalls, except that the former might call the latter, along with possibly other imports.",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "Yes, exactly! This is the auto generated name based on an one Imported function that was used in this function.",
          "time": null
        }
      ]
    }
  ]
}