{
  "title": "How to show KUSER_SHARED_DATA members in decompiled C code?",
  "link": "https://reverseengineering.stackexchange.com/questions/26157/how-to-show-kuser-shared-data-members-in-decompiled-c-code",
  "content": "Here is a sample C code which prints Windows version directly from address\nof KUSER_SHARED_DATA. Tested in Windows 10 only. The raw memory address\ndiffer in Windows version but that's not the point.\n\n```\n#include <stdio.h>\n\nint main(void)\n{\n    wprintf(\n        L\"Version: %lu.%lu.%lu  \n\",\n        *(unsigned int *)(0x7FFE0000 + 0x026C),\n        *(unsigned int *)(0x7FFE0000 + 0x0270),\n        *(unsigned int *)(0x7FFE0000 + 0x0260)\n    );\n}\n\n```\nHere are the decompiled code:\n\nIn GHIDRA:\n\n```\nint main(int _Argc,char **_Argv,char **_Env)\n\n{\n    wprintf(L\"Version: %lu.%lu.%lu  \n\",\n        (ulonglong)_DAT_7ffe026c,\n        (ulonglong)_DAT_7ffe0270,\n        (ulonglong)_DAT_7ffe0260);\n  return 0;\n}\n\n```\nIn IDA Pro + Hex-Rays:\n\n```\nint __fastcall main()\n{\n    wprintf(L\"Version: %lu.%lu.%lu  \n\",\n        MEMORY[0x7FFE026C],\n        MEMORY[0x7FFE0270],\n        MEMORY[0x7FFE0260]);\n  return 0;\n}\n\n```\nMy question: In decompiled code, is it possible to show the memory address as\nthe member of KUSER_SHARED_DATA? For example, I want to show MEMORY[0x7FFE0260]\nas SharedData.NtBuildNumber or something similar to it.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "1k",
  "tags": [
    "windows",
    "decompilation",
    "ghidra",
    "hexrays"
  ],
  "user": "Biswapriyo",
  "time": "Oct 22, 2020 at 19:36",
  "comments": [],
  "answers_data": [
    {
      "content": "For IDA/Hex-Rays:\n\n\n\n\n\n\n\n\n\nThat's it. Now the disassembly listing looks like this:\n\n\n\nAnd the decompilation looks like this:\n\n\n\n",
      "votes": "4",
      "user": "Rolf Rolles",
      "time": "Oct 23, 2020 at 4:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "Rolf Rolles",
          "text": "You could write a script to do all of that automatically if you wanted to. Is it really worth the effort, however? It took less than two minutes to do it. Unless you're doing it very frequently for some reason, I personally don't see the point in investing the effort into writing a script. As for whether there's one command to do all of that, why on earth would there be? What would you propose for the name of that command?",
          "time": null
        }
      ]
    },
    {
      "content": "ghidra\n\n```\naddr = toAddr(0x7ffe0000)\ncurrentProgram.memory.createUninitializedBlock(\"KUSER_SHARED_PAGE\",addr,0x1000,0)\ncreateData(addr,getDataTypes(\"KUSER_SHARED_DATA\")[0])\n\n```\nresult\n\n```\nundefined8 main(void)\n\n{\n  wprintf((__crt_locale_pointers *)L\"Version: %lu.%lu.%lu  \n\",\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtMajorVersion,\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtMinorVersion,\n          (ulonglong)KUSER_SHARED_DATA_7ffe0000.NtBuildNumber);\n  return 0;\n}\n\n```\nMethod 1)\n\nUse VirtualQuery to get the size\nshown below is a python poc\ncompare the result to (MEMORY_BASIC_INFO *)foo.RegionSize\n\n```\n:\\>cat vq.py\nfrom ctypes import *\nmeminfo =(c_ulong * 0x8)()\nwindll.kernel32.VirtualQuery(0x7ffe0000,byref(meminfo),sizeof(meminfo))\nfor i in meminfo:\n    print (hex(i))\n\n\n:\\>python vq.py\n0x7ffe0000\n0x7ffe0000\n0x2\n0x1000\n0x1000\n0x2\n0x20000\n0x0\n\n```\nMethod 2)\n\nuse windbg !vprot to get the same\n\n```\n:\\>cdb -c \"!vprot 7ffe0000;q\" cdb | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command '!vprot 7ffe0000;q'\nBaseAddress:       7ffe0000\nAllocationBase:    7ffe0000\nAllocationProtect: 00000002  PAGE_READONLY\nRegionSize:        00001000\nState:             00001000  MEM_COMMIT\nProtect:           00000002  PAGE_READONLY\nType:              00020000  MEM_PRIVATE\nquit:\n\n```\nMethod 3)\n\nuse windbg !address to Get a more Verbose Details of the same Address Space\n\n```\n:\\>cdb -c \"!address 7ffe0000;q\" cdb | awk \"/Usage:/,/quit/\"\nUsage:                  Other\nBase Address:           7ffe0000\nEnd Address:            7ffe1000\nRegion Size:            00001000 (   4.000 kB)\nState:                  00001000          MEM_COMMIT\nProtect:                00000002          PAGE_READONLY\nType:                   00020000          MEM_PRIVATE\nAllocation Base:        7ffe0000\nAllocation Protect:     00000002          PAGE_READONLY\nAdditional info:        User Shared Data\n\n\nContent source: 1 (target), length: 1000\nquit:\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Oct 24, 2020 at 6:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}