{
  "title": "How do relocations work for imported functions in SH4 ELF?",
  "link": "https://reverseengineering.stackexchange.com/questions/29325/how-do-relocations-work-for-imported-functions-in-sh4-elf",
  "content": "I build very simple hello world code with sh4 gcc compiler as shared library:\n\n```\n#include <stdio.h>\nvoid hello()\n{\n    printf(\"Hello world!  \n\");\n}\n\n```\nBut when I load .so file into the disassembler(IDA or Ghidra), I can't actually find where puts is being called. Even though hello() function exists:\n\nBut at the point where it should actually call printf/puts there's some address load operation which points to non existing address:\n\nI can see puts in the import section, but there's no code that references besides some data reference from .LOAD section.\n\nNevertheless case I build the code as the executable, not the shared library. puts thunk becomes visible among the functions:\n\n\nAs if import thunks are not propagated for shared libraries, but propagated for the executables.\n\nI've tried to find the issue myself so I ran readelf on both binaries. And it appears that it depends on relocation data. Here's executable file dump:\n\n```\n'PLT' relocation section at offset 0x4002d0 contains 48 bytes:\n Offset     Info    Type            Sym.Value  Sym. Name + Addend\n0041103c  000002a4 R_SH_JMP_SLOT     00400380   puts@GLIBC_2.2 + 0\n00411040  000001a4 R_SH_JMP_SLOT     00000000   __gmon_start__ + 0\n00411044  000005a4 R_SH_JMP_SLOT     004003b8   __libc_start_main@GLIBC_2.2 + 0\n00411048  000003a4 R_SH_JMP_SLOT     004003d4   abort@GLIBC_2.2 + 0\n\n```\nAnd here's how it looks for shared module:\n\n```\n'PLT' relocation section at offset 0x364 contains 36 bytes:\n Offset     Info    Type            Sym.Value  Sym. Name + Addend\n00011010  000001a4 R_SH_JMP_SLOT     00000000   __cxa_finalize@GLIBC_2.2 + 0\n00011014  000003a4 R_SH_JMP_SLOT     00000000   puts@GLIBC_2.2 + 0\n00011018  000004a4 R_SH_JMP_SLOT     00000000   __gmon_start__ + 0\n\n```\nSym.Value is zero, and both Ghidra and IDA fails to determine where the thunks point. So the question are:\n\nThe way the shared library was built:\n\n```\nsh4-linux-gnu-gcc -c -g -fPIC hello.c -o hello.o\nsh4-linux-gnu-gcc hello.o -shared -o libhello.so\n\n```\n",
  "votes": "2",
  "answers": 0,
  "views": "189",
  "tags": [
    "ida",
    "ghidra",
    "elf",
    "relocations"
  ],
  "user": "Anton Kukoba",
  "time": "Sep 27, 2021 at 12:12",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "How did you compile it, using what toolchain and what switches? I'm seeing different results.",
      "time": null
    },
    {
      "user": "Anton Kukoba",
      "text": "I've used gcc-sh4-linux-gnu toolchain. I've added the build command line in the main post. I can provide my binaries if needed.",
      "time": null
    },
    {
      "user": "Anton Kukoba",
      "text": "Here are my binaries if needed: ufile.io/e9pscn0u",
      "time": null
    }
  ],
  "answers_data": []
}