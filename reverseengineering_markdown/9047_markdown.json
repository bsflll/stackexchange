{
  "title": "How do I find a collision for a simple hash algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/9047/how-do-i-find-a-collision-for-a-simple-hash-algorithm",
  "content": "I have the following hash algorithm:\n\n```\n    unsigned long specialNum=0x4E67C6A7;\n    unsigned int ch;\n    char inputVal[]=\"                        AAPB2GXG\";\n\n\n    for(int i=0;i<strlen(inputVal);i++)\n    {\n        ch=inputVal[i];\n\n        ch=ch+(specialNum*32);\n        ch=ch+(specialNum/4);\n\n        specialNum=bitXor(specialNum,ch);\n    }\n\n    int outputVal=specialNum;\n\n```\nThe bitXor simply does the Xor operation:\n\n```\nint bitXor(int a,int b)\n{\n    return (a & ~b) | (~a & b);\n}\n\n```\nNow I want to find an Algorithm that can generate an \"inputVal\" when the outputVal is given.(The generated inputVal may not be necessarily be same as the original inputVal.That's why I want to find collision).\nThis means that I need to find an algorithm that generates a solution that when fed into the above algorithm results same as specified \"outputVal\".\nThe length of solution to be generated should be less than or equal to 32.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "693",
  "tags": [
    "c++",
    "c",
    "static-analysis",
    "patch-reversing",
    "hash-functions"
  ],
  "user": "ASHUTOSH",
  "time": "Jun 2, 2015 at 10:54",
  "comments": [
    {
      "user": "0xec",
      "text": "You should try the Z3 Solver. It's ideal in such cases.",
      "time": null
    },
    {
      "user": "ASHUTOSH",
      "text": "What is Z3?What does it do? How can I use it in my situation?",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Z3 is a SMT Solver. You can check out this article.",
      "time": null
    },
    {
      "user": "perror",
      "text": "Another link (similar technique than the one suggested by Extreme Coders): HackingWeek 2015 â€“ Reverse 4.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "A Lame brute forcer with an arbitrary seed value using the code you provided finds a few collisions under an hour\n\n```\n#include <stdio.h>\n#include <windows.h>\nint bitXor(int a,int b) { return (a & ~b) | (~a & b); }\nvoid hashit( void) {  \n    SYSTEMTIME st;  \n    unsigned long specialNum=0x4E67C6A7,savedspecialNum=0x4E67C6A7;\n    unsigned int ch;\n    char inputVal[32]={0};\n    GetSystemTime(&st);\n    printf(\"System time is : %02d:%02d:%02d:%02d  \nBruteforce seed = 0xfffffff0  \n\", \n    st.wHour, st.wMinute,st.wSecond,st.wMilliseconds);\n    for (unsigned __int64 in = 0xfffffff0; in < 0xffffffffffffffff; in++) {     \n        _i64toa_s( in,inputVal,sizeof(inputVal),10);        \n        for(unsigned int i=0;i<strlen(inputVal);i++){\n            ch=inputVal[i];\n            ch=ch+(specialNum*32);\n            ch=ch+(specialNum/4);\n            specialNum=bitXor(specialNum,ch);\n        }\n        if(specialNum == savedspecialNum) {\n            GetSystemTime(&st);\n            printf(\"The system time is: %02d:%02d:%02d:%02d  \n\", \n            st.wHour, st.wMinute,st.wSecond,st.wMilliseconds);\n            printf(\"%I64x\\t%x  \n\",in,specialNum);\n        }\n        specialNum = savedspecialNum;\n    }\n}\nvoid main (void) {\n    hashit();\n}\n\n```\nresult \n\n```\nSystem time is : 06:17:40:328\nBruteforce seed = 0xfffffff0\nThe system time is: 06:51:23:343\n198172e4a       4e67c6a7\n\n```\nEdit\n\nAn improved but still Lame bruteforcer finds the first collision in 80 odd seconds      \n\n```\n#include <stdio.h>\n#include <windows.h>\nchar in[33] = {\"4294967280\"};\nunsigned long specialNum=0x4E67C6A7,savedspecialNum=0x4E67C6A7;\nSYSTEMTIME lt;\nvoid main (void ){ unsigned int ch; GetLocalTime(&lt);\n printf(\"BruteForce Started At %02d:%02d:%02d:%02d Seed used 0n%s 0x%I64x  \n\",\n lt.wHour, lt.wMinute,lt.wSecond,lt.wMilliseconds,in,_strtoui64(in,0,10));\n while(in[0] <= 57) { while(in[1] <= 57) { while(in[2] <= 57) {\n    while(in[3] <= 57) { while(in[4] <= 57) { while(in[5] <= 57) {\n       while(in[6] <= 57) { while(in[7] <= 57) { while(in[8] <= 57) {\n          while(in[9] <= 57 ) { for(unsigned int i=0;i<10;i++) {\n            ch=in[i]; ch=ch+(specialNum*32); ch=ch+(specialNum/4);\n            specialNum=specialNum^ch;\n           } if(specialNum == savedspecialNum) { GetLocalTime(&lt);\n            printf(\"First Collision Found 0n%s 0x%I64x  \nBruteForce Ended \"\n            \"At %02d:%02d:%02d:%02d  \n\",in,_strtoui64(in,0,10),lt.wHour,\n            lt.wMinute,lt.wSecond,lt.wMilliseconds);return;\n           }specialNum = savedspecialNum; in[9]++;\n          }in[8]++;in[9]='0';\n         }in[7]++;in[8]='0','0';\n        }in[6]++;in[7]='0','0','0';\n       }in[5]++;in[6]='0','0','0','0';\n      }in[4]++;in[5]='0','0','0','0','0';\n     }in[3]++;in[4]='0','0','0','0','0','0';\n    }in[2]++;in[3]='0','0','0','0','0','0','0';\n   }in[1]++;in[2]='0','0','0','0','0','0','0','0';\n  }in[0]++;in[1]='0','0','0','0','0','0','0','0','0';\n }\n}\n\n```\nResult\n\n```\n>strarray.exe\nBruteForce Started At 19:26:45:437 Seed used 0n4294967280 0xfffffff0\nFirst Collision Found 0n6846623306 0x198172e4a\nBruteForce Ended At 19:28:01:921\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Jun 3, 2015 at 14:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "ASHUTOSH",
          "text": "So the 1147ee384 and 115da3233 are solutions.But when I input them in my hash algorithm, the hash calculated does not match with savedspecialNum.Why is this happening ?Dont you think specialNum should be initialized back to 4e67c6a7 after each iteration of outer loop?",
          "time": null
        },
        {
          "user": "ASHUTOSH",
          "text": "Yeah you missed to initialize the specialNum back to 4e67c6a7.It works. But is there any way to improve the efficiency?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "yeah i saved the original but it seems i posted some stale code thanks for noticing it i have edited  the init part",
          "time": null
        }
      ]
    }
  ]
}