{
  "title": "What format could this image mask be?",
  "link": "https://reverseengineering.stackexchange.com/questions/31567/what-format-could-this-image-mask-be",
  "content": "So I'm looking at these sprite files from a type of virtual world format that's no longer around. They appear to be JPEGs with some custom markers, one of which appears to be an alpha mask. Here's some examples with the first 30 bytes from the chunk in each file, immediately following \"CWMAHUF1\"\n\nAll I've been able to determine is that the first four bytes are a word that seems to have nothing to do with the actual length of the chunk. However, they are all divisible by the image's height and further divisible by 4.\n\nindoor_stadiumwl01.sprite and indoor_stadiumwl02.sprite seem to be (almost) all 0s, and the image themselves look to be almost completely opaque\n\nI'm not entirely sure what the data is supposed to look like decoded, but the mask appears to be binary\n\n",
  "votes": "2",
  "answers": 0,
  "views": "42",
  "tags": [
    "binary-format"
  ],
  "user": "DoomTay",
  "time": "Feb 19, 2023 at 21:44",
  "comments": [
    {
      "user": "Rup",
      "text": "Your \"divided by 4\" column is the same as width/32 rounded up. So first four = (width rounded up to 32) * height / 8",
      "time": null
    },
    {
      "user": "Rup",
      "text": "so I'd guess that's the size in bytes of the uncompressed bitmap, one pixel per bit, and the remainder of each file is compressed data, perhaps something simple like RLE or LZ, since the ratio between length and first four varies. Unless someone recognises the next few bytes I'd try and find the code that unpacks this and look at that.",
      "time": null
    },
    {
      "user": "Rup",
      "text": "Actually I'd guess Huffman from the \"HUF1\". Tried Googling that though, and only found your thread on Reddit 5 years ago. The 4x4 examples you posted there are probably more tractable, although would be useful to know where the transparent bit is in the first one, and whether the checkerboard starts wth on or off top left",
      "time": null
    },
    {
      "user": "Rup",
      "text": "The problem then is reverse engineering the Huffman trees though, and I don't know how you'd approach that: the bit sequences could be split anywhere, could contain repeats / run lengths, maybe start with some initialisation data, maybe adapt. Ditto I think find the unpacking code if you can, especially if you search it for HUF1.",
      "time": null
    },
    {
      "user": "DoomTay",
      "text": "Seems my best shot would be to decompile the program that uses these sprites somehow",
      "time": null
    }
  ],
  "answers_data": []
}