{
  "title": "What purpose of MOVZX EAX,AX after MOVZX EAX, WORD PTR [RBP+ADDR.SA_DATA]?",
  "link": "https://reverseengineering.stackexchange.com/questions/20177/what-purpose-of-movzx-eax-ax-after-movzx-eax-word-ptr-rbpaddr-sa-data",
  "content": "I thought it was strange when I was looking at the code below. The first instruction clearly has completed the task of data transfer and expansion into 16 bits. Why is there a \"mov Eax,ax\" in the assembly code?\n\n```\n    movzx   eax, word ptr [rbp+addr.sa_data]\n    movzx   eax, ax\n    mov     edi, eax\n    call    _htons\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "702",
  "tags": [
    "ida",
    "assembly",
    "x86"
  ],
  "user": "RT zhou",
  "time": "Dec 22, 2018 at 9:01",
  "comments": [],
  "answers_data": [
    {
      "content": "Obviously the movzx eax, ax is useless.\nI would say this is unoptimized code, this C code could reproduce the same generated code.\n\n```\n#include <stdint.h>\n\nvoid f(uint16_t v)\n{\n}\n\nstruct S\n{\n        uint16_t a;\n};\n\nint main(void)\n{\n        struct S s;\n        s.a = 0x1122;\n        f(s.a);\n        return 0;\n}\n\n```\nCompiling with gcc without optimization options, the code is:\n\n```\n1134:       0f b7 45 fe             movzx  eax,WORD PTR [rbp-0x2]\n1138:       0f b7 c0                movzx  eax,ax\n113b:       89 c7                   mov    edi,eax\n113d:       e8 d7 ff ff ff          call   1119 <f>\n\n```\nNote, I wasn't able to produce the same result neither with clang or vc++.\nBesides, it only happens when the value is read from a structure.\n\n",
      "votes": "2",
      "user": "wisk",
      "time": "Dec 22, 2018 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "RT zhou",
          "text": "I think it's because I took the data from the addr structure and produced this code. Thank you for your answer.",
          "time": null
        }
      ]
    }
  ]
}