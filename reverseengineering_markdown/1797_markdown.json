{
  "title": "Kernel level Dynamic Binary Instrumentation",
  "link": "https://reverseengineering.stackexchange.com/questions/1797/kernel-level-dynamic-binary-instrumentation",
  "content": "Is there anything like PIN or DynamoRIO to instrument at Kernel level? The platforms I'm more interested on are Windows and OSX.\n\n",
  "votes": "11",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "dynamic-analysis",
    "osx",
    "kernel-mode",
    "instrumentation"
  ],
  "user": "joxeankoret",
  "time": "Apr 20, 2013 at 5:50",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Linux covered here.",
      "time": null
    },
    {
      "user": "cb88",
      "text": "Related: stackoverflow.com/questions/8058005/â€¦ and the DanamoRio developers are activly interested in Mac OS X(updated as of yesterday): code.google.com/p/dynamorio/issues/detail?id=58",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@joxeankoret: I'd suggest to split the question into two, one for Windows one for MacOSX. vTune clearly does what you're asking, so I reckon it is possible.",
      "time": null
    },
    {
      "user": "joxeankoret",
      "text": "@0xC0000022L I don't think we need to split it. An answer for just one platform is more than what I honestly expect. BTW, as far as I see, vTune does not support instrumenting at kernel level in Windows, does it?",
      "time": null
    },
    {
      "user": "RobotHumans",
      "text": "An additional point of interest for just detouring instead of a dbi framework is something like NCodeHook.  It needs a little work to get to kernel space, but not much.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Tools like Qemu or Bochs are IMO pretty similar to DBI frameworks conceptually and they work on the entire system, including the kernel. Research efforts like BitBlaze and S2E have used modified versions of Qemu to trace kernel mode components for bug finding. \n\nThe key difference, I think, is that Qemu/Bochs as whole system emulators do not present a by default view of the program under inspection as a DBI does. A DBI allows for dynamic editing of the program by default. Emulators have the primitives required to effect DBI, they can read and write memory and by extension program code, but they do not provide the API that PIN does for program modification.\n\nSo the best I can do is, you can use Qemu to make a kernel mode DBI and others have done this, but I don't know of something more usable out of the box. \n\n",
      "votes": "3",
      "user": "Andrew",
      "time": "Apr 20, 2013 at 7:03",
      "is_accepted": true,
      "comments": [
        {
          "user": "Brendan Dolan-Gavitt",
          "text": "This is true, but as noted in the intro to the DynamoRIO kernel paper, one big reason to do DBI in the kernel is because you want to analyze device drivers. And QEMU etc. emulate a fairly limited range of hardware. The S2E project has done a little bit of work in this area by using symbolic execution to fake out the missing device inputs, but it's not a panacea. A real kernel DBI solution that can run on real hardware would be better.",
          "time": null
        },
        {
          "user": "Andrew",
          "text": "Oh there was a system that did this called Simics, you could program device drivers in Python or C. I wonder if it's still for sale.",
          "time": null
        }
      ]
    }
  ]
}