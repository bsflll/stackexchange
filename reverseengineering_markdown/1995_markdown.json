{
  "title": "Better explanation of different x86 CALL variations",
  "link": "https://reverseengineering.stackexchange.com/questions/1995/better-explanation-of-different-x86-call-variations",
  "content": "Hoping to get a better explanation of x86 call instruction. I sort of understand the call near and call far. But I don't fully understand the segment part. A little insight into my main problem,  I am looking at a binary in IDA and its start code is:\n\n```\npush 0xdeadbeef\ncall near 0xdeadbeef\n\n```\n",
  "votes": "13",
  "answers": 2,
  "views": "14k",
  "tags": [
    "x86",
    "assembly"
  ],
  "user": "k0ng0",
  "time": "May 3, 2013 at 20:20",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "This is very 1337 code, if it has deadbeef in it ;)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "99% of the calls you'll encounter in modern binaries are near.\n\nThe memory is actually organized in segments. In modern OSes, you usually don't mess with segments (CS has a fixed value in User mode and Kernel mode), so you don't change them for any reason.\n\nThe rare cases of actual segment changes are as anti-debugs or messing with 32/64b modes \n\n",
      "votes": "13",
      "user": "Ange",
      "time": "May 3, 2013 at 16:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "perror",
          "text": "Isn't it related with the setjmp/lngjmp C functions (see this tutorial) ?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@perror: AFAIK not directly.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "no, \"long\" in the sense of \"longjmp\" has nothing to do with far jump.",
          "time": null
        }
      ]
    },
    {
      "content": "A segment is a \"window\" into a section of memory. You can map all or part of memory into a single segment, and multiple segments can have overlapping views of the same memory.  A far call or jump allows you to move between or within those windows.  A near call or jump allows you to move only within the current window.\n\nThe only difference between the call and the jump is that the call saves the return address on the stack.  For a far call, the return selector is saved on the stack, too.\n\nHowever, your question lacks sufficient detail of what exactly you want to know.\n\n",
      "votes": "7",
      "user": "peter ferrie",
      "time": "May 5, 2013 at 3:10",
      "is_accepted": false,
      "comments": [
        {
          "user": "the_endian",
          "text": "how does the call memory segment specified in the opcode e.g. E8 D2 12 00 00    call    sub_402390 how does 000012D2 relate to 402390? That's where I'm lost.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "the 12D2 is added to the memory address immediately after the end of the instruction, so the call instruction ends at 4010BE + 12D2 = 402390.",
          "time": null
        }
      ]
    }
  ]
}