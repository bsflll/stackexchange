{
  "title": "Dumping SQLITE database out of memory and viewing without original DB",
  "link": "https://reverseengineering.stackexchange.com/questions/14988/dumping-sqlite-database-out-of-memory-and-viewing-without-original-db",
  "content": "I am researching some malware which loads multiple Sqlite Databases into memory during its operation. I've managed to dump the memory to disk in a large block however I cannot view the databases currently as I can't figure out how large the file should be.\n\nThe headers appear intact however I can't easily figure out where the \"end\" of the database is. Can someone help me figure out what the byte size of the entire DB should be form this header? Or can someone suggest some software that is not picky on the format of the DB, eg if I include garbage at the end of the file it will automatically figure out where to stop.\n\nFormat explained here:\nhttps://www.sqlite.org/fileformat.html\n\n```\nHeader = SQLite format 3\n00 00 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00 \n\nPage size = 1024\n04 00 \n\nFormat write version\n01\n\nFormat read version\n01 \n\nBytes unreserved space\n00 \n\nMaximum embedded payload fraction (must be 64)\n40 \n\nMaximum embedded payload fraction (must be 32)\n20 \nLeaf payload fraction (must be 32)\n20 \n\nFile Change counter\n00 00 01 5f\n\nSize of the database file in pages (16)\n00 00 00 10 \n\nPage number of the first freelist trunk page\n00 00 00 09 \n\nTotal number of freelist pages.\n00 00 00 01 \n\nThe schema cookie\n00 00 00 03 \n\nThe schema format number. Supported schema formats are 1, 2, 3, and 4.\n00 00 00 04 \n\nDefault page cache size.\n00 00 00 00 \n\nThe page number of the largest root b-tree page when in auto-vacuum or incremental-vacuum modes, or zero otherwise.\n00 00 00 00 \n\nThe database text encoding. A value of 1 means UTF-8. A value of 2 means UTF-16le. A value of 3 means UTF-16be.\n00 00 00 01 \n\nThe \"user version\" as read and set by the user_version pragma.\n00 00 00 0F\n\nTrue (non-zero) for incremental-vacuum mode. False (zero) otherwise.\n00 00 00 00 00 \n\nThe \"Application ID\" set by PRAGMA application_id.\n00 00 00 00 \n\nReserved for expansion. Must be zero. \n00 00 00 00 \n00 00 00 00\n00 00 00 00 \n00 00 00 00 \n00 00 00 00 \n\nThe version-valid-for number.\n00 00 00 01\n\nSQLITE_VERSION_NUMBER\n00 2D F1 B8\n\n```\nedit: Appears the problem may be in the database table format. Here is an example of one of the tables.\n\nFormat of Dumped DB. Table def starts at offset 229\n\n```\ntableCommTypeCommType   \nCREATE TABLE CommType\n(\n    CommID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n    CommName TEXT NOT NULL\n)\n\n```\nIf I recreate the DB myself I get the following format. Why is this different?\n\nStarts at offset 784 (lots of padding before)\n\n```\ntablesqlite_sequencesqlite_sequence\nCREATE TABLE sqlite_sequence(name,seq)\nutableCommTypeCommType\nCREATE TABLE `CommType` (\n    `CommID` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `CommName` TEXT NOT NULL\n)\n\n```\nedit2: It appears I've dumped RAM that was used by the in memory database creation. I have lots and lots of the same CREATE TABLE strings in a sequence repeating with small changes. Most likely due to the code doing \"sql = sql + moreSql\" or something like that and I've just dumped these strings opposed to an entire in memory database. I need to do a bigger memory dump to find the actual DB\n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "memory",
    "memory-dump"
  ],
  "user": "rollsch",
  "time": "Mar 23, 2017 at 23:09",
  "comments": [
    {
      "user": "rollsch",
      "text": "The problem is possibly in the CREATE TABLE statements. My test DB produces different text in the binary at a different offset.",
      "time": null
    },
    {
      "user": "Nordwald",
      "text": "can you provide the sample hash digest?",
      "time": null
    },
    {
      "user": "rollsch",
      "text": "Sorry I'm not familiar with what that is.",
      "time": null
    },
    {
      "user": "Nordwald",
      "text": "The string-form of a hash of the sample (e.g. md5, sha1, ...)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "A Hex Editor that supports binary templates to parse and view data is probably the best tool to view where a sqlite database starts and ends. Then you can copy these hex bytes out to a seperate file and view as database from there on.\n\nAn example of such a hex editor is 010 editor and here is an example of a sqlite binary template for sqlite.\n\n\n\n",
      "votes": "1",
      "user": "Remko",
      "time": "Mar 24, 2017 at 10:24",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Straight from the linked website:\n\nSo in your case, we have a page size of 1024 bytes and 16 pages. So i assume the payload of the database file is about 16384 bytes + 100 bytes for the header.\n\n",
      "votes": "0",
      "user": "Nordwald",
      "time": "Mar 23, 2017 at 7:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "rollsch",
          "text": "I tried changing the page size to something small like 10 pages and making the file size at least that however i always says corrupt database header. I tried making some test databases and adding junk data at the end however they always load successfully so perhaps there is something else screwy with this DB.",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "That indicates something is wrong with the header. Could you provide the last 4 header fields or even upload a sample? (e.g. memory page dump)",
          "time": null
        },
        {
          "user": "rollsch",
          "text": "When you say header fields what are you referring to?",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "@rolls I'm referring to the last 32 bytes not listed in the table (see header definition, starting at 'Application Id'",
          "time": null
        },
        {
          "user": "rollsch",
          "text": "My bad I thought I had the entire thing in there. I've added it in. It appears to be correct and valid. From the testing I've done it appears the table creation is possibly where the problem is. It uses different style quotes and different spacing to what 3011 normally produces. I might try recreating the entire header manually and then appending the pages and see if it will open. If that fails I'll get the C# sqlite source code and step through it to see what specifically it disagrees with.",
          "time": null
        }
      ]
    }
  ]
}