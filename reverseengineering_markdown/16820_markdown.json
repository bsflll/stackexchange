{
  "title": "where the variable and it's size are stored inside windows executabe file?",
  "link": "https://reverseengineering.stackexchange.com/questions/16820/where-the-variable-and-its-size-are-stored-inside-windows-executabe-file",
  "content": "\n\ni am beginner in reverse engineering. i want to understand where the variables and it's size are stored inside an windows executable file.  \n\nsomehow i can able to find the values of variables i declared inside a c program. \n\nas you can see in 00402000  the bar variable's value is stored.\nbut i can't find where the variable name \"bar\" and it's size is stored.In data section values only get stored. In which section i can find variable names and it's sizes? \nthen i have another doubt as you can see in the picture there is some address like  00402000. is it the address of a byte which exist in harddrive?\nlike RAM , HardDisk also an has address for each byte?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "316",
  "tags": [
    "ida",
    "assembly",
    "x86",
    "pe"
  ],
  "user": "Naveen prakash",
  "time": "Nov 23, 2017 at 1:47",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, that is how it works. Information about variables such as name, size and type are high-level language concepts. Such information is lost when code written in a high-level language is compiled into machine code. This is part of the reason why reverse engineering binary executables can be challenging.\n\nRead the answers to this question: how data types and variables are converted to machine code?\n\nThe bit width of a value (half-word, word, double word, etc) can sometimes be inferred from the read/write operations performed on it; if it is written from memory into a register, you can look at the size of the register. eax is 32 bit, al is 16 bits, etc.\n\nTo locate statically allocated variables, disassemble the function(s) in which they are accessed. Pointers (memory addresses) to these variables will be operands in instructions that access these values.\n\nIn your case this means disassembling main(). Since nothing is done with the variables in main() other than reassignment, it is possible that the compiler did not generate any code referencing these variables (dead code elimination).\n\nThis is an address in virtual memory. Read more about this here: \n\nLinux example: http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/\n\nhttps://stackoverflow.com/questions/2170843/va-virtual-address-rva-relative-virtual-address\n\n",
      "votes": "2",
      "user": "julian",
      "time": "Nov 23, 2017 at 3:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}