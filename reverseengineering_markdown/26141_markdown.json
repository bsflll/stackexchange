{
  "title": "Difference in binary behaviour (execution/under debugger)",
  "link": "https://reverseengineering.stackexchange.com/questions/26141/difference-in-binary-behaviour-execution-under-debugger",
  "content": "I was trying out a simple heap overflow example (http://highaltitudehacks.com/2020/09/05/arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow/) but replicated the relevant code in x86/x64 to understand it better. This is the code I used\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n    char *name = malloc(0x6);\n    char *command = malloc(0x6);\n    strcpy(command,\"whoami\");\n    strcpy(name,\"zzzzzzzzzzzzzzzzls -l\");\n\n    system(command);\n}\n\n```\nI noticed that if I compiled the code and ran it normally, I will get system to execute \"ls -l\" and does a folder listing. However, if I was stepping through the binary using lldb from start to midway and proceed to continue the rest of the execution while inside lldb, I will see \"whoami\" executed instead.\n\nI am testing this on a Mac OS and I am not sure if this is due to lldb or Mac OS behaviour?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "60",
  "tags": [
    "x86-64",
    "lldb"
  ],
  "user": "localacct",
  "time": "Oct 21, 2020 at 6:37",
  "comments": [
    {
      "user": "sudhackar",
      "text": "Its possible that while debugging the heap chunks that get allocated are far apart or have some extra padding in between. Add printf(\"%p : %p  \n\", name, command) before strcpy to verify the addresses with and without debugger.",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "Iâ€™m voting to close this question because Its not related to RE in any way.",
      "time": null
    },
    {
      "user": "localacct",
      "text": "Thanks @sudhackar. Just curious though, my rationale for putting this in RE is because I was reversing it and the binary's behaviour looks different under lldb. Would it have been better if I posted this under Security Stack Exchange instead?",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "This was more of a \"weird behaviour\" question. Needs more looking around, not anything specific to RE.",
      "time": null
    },
    {
      "user": "localacct",
      "text": "Sorry just one more question. How did you know the exact difference was 0x10 (16 bytes)?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For the overflow from name to command to work, the difference between the addresses of both should be 0x10 bytes.\n\nI verified what I mentioned in the case earlier - Adding\n\n```\nprintf(\"%p:%p  \n\", name, command);\n\n```\nUnder a debugger stepping through main gives the addresses as\n\n```\n0x100404080:0x1002059f0\n\n```\nHere delta > 0x10 bytes and hence the name strcpy would not overflow to command\n\nwhile without stepping or without a debugger comes out\n\n```\n0x7fa890405830:0x7fa890405840\n\n```\nexactly 0x10 bytes.\n\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Oct 21, 2020 at 7:19",
      "is_accepted": true,
      "comments": []
    }
  ]
}