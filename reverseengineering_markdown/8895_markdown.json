{
  "title": "Decompile erlang .beam files compiled without debug_info",
  "link": "https://reverseengineering.stackexchange.com/questions/8895/decompile-erlang-beam-files-compiled-without-debug-info",
  "content": "I have an app that use erlang .beam compiled files without debugging information.\nSomeone have some tips how to decompile or reverse engineering these?\n\nThanks in advance\n\n",
  "votes": "2",
  "answers": 1,
  "views": "7k",
  "tags": [
    "patch-reversing",
    "erlang"
  ],
  "user": "itseeder",
  "time": "Oct 30, 2017 at 17:18",
  "comments": [
    {
      "user": "Jongware",
      "text": "\"7.11  Is there a \"reverse compiler\" for BEAM files?\" (erlang.org/faq/tools.html)",
      "time": null
    },
    {
      "user": "itseeder",
      "text": "I already see it. But honestly did you understand how to pass to beam_lib arguments to obtain abstract_code?",
      "time": null
    },
    {
      "user": "user12249",
      "text": "Can't write comments, yet, so you get the link as an answer. The HelloMike challenge from the 9447 CTF was a beam file without debug_info. This writeup goes through the reversing process of the file: medium.com/@shanewilton/…",
      "time": null
    },
    {
      "user": "itseeder",
      "text": "Following your advice and link i get that i don't have debug_info and i get an empty file if i try to decompile it with the command: erl -noshell -eval ‘hipe:c(my_beam, [pp_beam]), init:stop().’ > my_beam.disas. Do you have a tip? i get this error: (no error logger present) error: \"Error in process <0.0.0> with exit value: {fun ction_clause,[{init,prepare_run_args,[{eval,[<<11 bytes>>,<<11 bytes>>,<<13 byte s>>]}]},{init,map,2},{init,boot,1}]}  \n\"",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can get low-level bytecode source of .beam file with beam_disasm:file(module_name)\n\nIt's not easy to read it and takes time to figure it out. But it's much verbose and easier to comprehend than any real hardware assembly code. You can give it a try.\n\nFor example, if you have a .beam file called \"my_module.beam\", open erl and type \n\n```\nfile:write_file(\"/tmp/my_module_disasm\", io_lib:fwrite(\"~p.  \n\", [beam_disasm:file(my_module)])).\n\n```\nwhere '/tmp/my_module_disasm' is the path where you want to save the result.\n\n",
      "votes": "4",
      "user": "pumbo",
      "time": "Jul 7, 2015 at 3:41",
      "is_accepted": true,
      "comments": []
    }
  ]
}