{
  "title": "Java - Decipher encrypted classes in a jar file",
  "link": "https://reverseengineering.stackexchange.com/questions/11746/java-decipher-encrypted-classes-in-a-jar-file",
  "content": "I have a couple of classes that are encrypted. The class loader must decrypt these before executing in the JVM.\n\nThe question is, how and where?\n\nWhat can I do to understand who is responsible to decrypt these classes before deploy?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "3k",
  "tags": [
    "encryption",
    "java",
    "byte-code",
    "jar"
  ],
  "user": "itseeder",
  "time": "Jan 12, 2016 at 19:15",
  "comments": [
    {
      "user": "Antimony",
      "text": "Did you check whether it starts with the magic bytes CAFEBABE? If so, it's probably not encrypted.",
      "time": null
    },
    {
      "user": "itseeder",
      "text": "Already checked it and also in hexview. I know class files structure so i am sure that is encrypted.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Find which of the visible classes implement java.lang.ClassLoader.\n\nThen you can look at its findClass and findResource implementation.\n\n",
      "votes": "3",
      "user": "ratchet freak",
      "time": "Jan 12, 2016 at 11:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "itseeder",
          "text": "I can't find the key that i need to unencrypt classes. I forget to mention that i have a lancher.exe that initialize the jvm, most probably will be there. Did you have some suggestion to find the key from there without reverse engineering all calls to jvm in Ida?",
          "time": null
        },
        {
          "user": "ratchet freak",
          "text": "You'll need to intercept the call that sets the key for decryption. Stepping through with a debugger until it enters the decryption routine should help.",
          "time": null
        }
      ]
    },
    {
      "content": "I also had this issue, where I was trying to decompile some java classes but they were all encrypted and I think there is a non obvious solution I would like to mention before I describe how to actually do the decrypting and that is:\n\n(1) Try and find an older version of the software that doesn't contain encrypted classes. If it is a public application you might be able to find older version on archive.org and it's very possible that the classes were not encrypted in the older version.\n\nHowever, if you are stuck with an encrypted jar, or java application loaded from a native application then there is a pretty obvious way to decrypt it, and the principle of how to do this are described in this infoworld article. But these are just the principles, how do you do this in practice?\n\nWell the most obvious way that I found is to dump the classes loaded by the jvm. The article describes making edits to .class files that pretty much do exactly this, but it's kinda hard to do this if your class files are loaded by a .exe or something. Whether you're trying to decrypt a java class that is loaded by a .exe/.dmg/.jar it will have to at some point touch a jvm - I think. Knowing this, we can use an external tool to do the dumping instead of editing the java program to dump its own files.\n\nAt a high level the way to do this is:\n\nNB: If dumpclass says 0 classes dumped after you run it, but takes a while to do the dumping, ignore it, the classes were dumped and for some reason it is not reporting the correct number of classes. If you don't see the classes next to dumpclass.jar try setting the output path explicitly.\n\nSome other tips:\n\n",
      "votes": "0",
      "user": "nmu",
      "time": "Nov 4, 2020 at 11:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}