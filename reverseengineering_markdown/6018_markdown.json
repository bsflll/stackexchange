{
  "title": "How to hook the entry point of a DLL?",
  "link": "https://reverseengineering.stackexchange.com/questions/6018/how-to-hook-the-entry-point-of-a-dll",
  "content": "I have written a C API with support for static import hooking via overwriting the corresponding IAT entry of an exported function. It works nicely for older simple applications, but for more modern applications, it is less effective. This is primarily due to the large amount of applications nowadays that dynamically import functions. \n\nMy solution to this problem was to create the process in an initial suspended state and then hook the LoadLibrary(Ex)(A/W)  family of functions along with GetProcAddress() to replace the retrieved address of a target function with my own. That solution is limited in part due to the fact that it is based off the application only importing dynamic functions and libraries in the executable module, without working for processes created later ( although that could be solved by hooking CreateProcess() ) or more importantly, it doesn't handle the DLLs in the application that also call the target functions I want to hook. This is obviously because the DLLs have a separate import section in their own PE from the executable module. \n\nWhich brings me to my question, how do I hook the entry point of a DLL? I want to implement that method because I need the DLL to be bound to the libraries it imports statically, so I can hook  the LoadLibrary/GetProcAddress functions in before the DLL has a chance to load/import them in DLLMain. I'm assuming there is a way to do this by changing the entry point of the DLL, or by hooking a lower level function that handles calling a DLL entry point in kernel32.dll. \n\nIf the method I'm requesting has a better alternative, then I would gladly accept that solution as well if it achieves my desired effect.\n\nMy processor is an AMD Athlon II X2 250 that is x86-x64 compatible, and my operating system is Windows 7.\n\n",
  "votes": "5",
  "answers": 2,
  "views": "7k",
  "tags": [
    "windows",
    "c",
    "dll",
    "pe",
    "function-hooking"
  ],
  "user": "CaptainObvious",
  "time": "Aug 3, 2014 at 22:39",
  "comments": [],
  "answers_data": [
    {
      "content": "To answer the original question, what you can do is to hook LdrpCallInitRoutine in ntdll.dll. This function is used by DLL loading/unloading code to actually call the DLL entry point (DllMain) and also the TLS callbacks. The first argument is the address to be called:\n\n```\nBOOLEAN NTAPI LdrpCallInitRoutine(PDLL_INIT_ROUTINE EntryPoint, PVOID BaseAddress, ULONG Reason, PVOID Context);\n\n```\n",
      "votes": "4",
      "user": "perror",
      "time": "Aug 5, 2014 at 19:09",
      "is_accepted": true,
      "comments": [
        {
          "user": "CaptainObvious",
          "text": "I'm changing this to the chosen answer, since this answers the question I asked in the OP.",
          "time": null
        },
        {
          "user": "user541686",
          "text": "Question -- how do you find LdrpCallInitRoutine without debug symbols?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Mehrdad: you can that ask it in a new question; comments are for commenting/clarifications",
          "time": null
        },
        {
          "user": "user541686",
          "text": "@IgorSkochinsky: it was for clarification. It's suggested in the answer but it's not even clear that it's possible in general.",
          "time": null
        }
      ]
    },
    {
      "content": "You should not be using IAT overwriting hooking method for the same reasons you mentioned.\nUse the inline hooking method with a JMP instruction to the target hook. You need to save the overwritten bytes somewhere as you need to use it as the trampoline. \nSee this as an example of inline hook. \n\nUsing inline hook ensures that all (existing or future) modules loaded in the same address space will using the hooked functions no matter how they resolve the addresses of the APIs. \n\njbremer.org has good informative resources on API hooking.\n\n",
      "votes": "3",
      "user": "0xec",
      "time": "Aug 4, 2014 at 2:04",
      "is_accepted": false,
      "comments": [
        {
          "user": "CaptainObvious",
          "text": "I wouldn't say that an inline hook insures that all future modules will use the function, unless those modules use the same module that contains the hook.",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@CaptainObvious Of course. Suppose you inline hooked Kernel32.CreateFileA then calling some other function such as Gdi32.BitBlt would never trigger the hook. What I meant, that any module who calls CreateFileA would be using our hooked function.",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@CaptainObvious In case you are not aware, every process has exactly a single copy of a dll in its address space. That means there is a single copy of the function CreateFileA no matter how many times you load kernel32 using LoadLibrary. In our case when we inline hook, it is hooked for once and for all.",
          "time": null
        }
      ]
    }
  ]
}