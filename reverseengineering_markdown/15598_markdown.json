{
  "title": "What additional data does a compiler populate the buffer space with? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/15598/what-additional-data-does-a-compiler-populate-the-buffer-space-with",
  "content": "I am currently learning about the stack, in particular how to perform stack overflow attacks. I understand that the buffer is not the size that the program initially set it as, for example if we deployed a buffer like this char buffer [100], when compiled the buffer size will end up being greater than 100. What data does the compiler add to the initial 100 bytes of data?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "64",
  "tags": [
    "compilers",
    "stack"
  ],
  "user": "Us3rname",
  "time": "7 years ago",
  "comments": [
    {
      "user": "yaspr",
      "text": "You're talking padding and memory alignment. I doubt there'll be enough space to insert anyting useful. Check my answer here (reverseengineering.stackexchange.com/questions/14450/â€¦).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "char buffer [0x100 ]. as local that ends up in stack is filled with junk. (uninitilised buffer )\n\nsame buffer if declared as global is zero initialised ie the complete buffer will have 0x0's \n\ncompiler can pad your buffer based on alignment  \n\ncan embed patterns based on debug versus release builds\n\nthese are implementation details and subject to chsnge between versions \n\n",
      "votes": "0",
      "user": "blabb",
      "time": "Jun 20, 2017 at 4:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}