{
  "title": "How to Convert given set of Assembly-Level Instructions to High-Level Language Code?",
  "link": "https://reverseengineering.stackexchange.com/questions/30972/how-to-convert-given-set-of-assembly-level-instructions-to-high-level-language-c",
  "content": "As I am working on malware analysis, I got stuck in a place where I have to change the given set of assembly-level instructions to high-level code. Example:\n\n```\nmov ebp, esp       \n\nand eax,0\n\n```\n```\nr_ebp_1 = r_esp_1 \n\nr_eax_1 = r_eax_1 & 0x0\n\n```\nThough I have searched on the internet, I couldn't get the solution I am searching for. Could someone please help me to find the answer?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "304",
  "tags": [
    "decompilation"
  ],
  "user": "okokok hack",
  "time": "Dec 25, 2022 at 9:37",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "Is this homework? If so, presumably your instructor gave you some directions in this regard in the earlier material...?",
      "time": null
    },
    {
      "user": "Mega Tonnage",
      "text": "One thing to keep in mind is that there likely will not be a 1:1 mapping of assembly to higher level language instructions. You need to understand what the assembly instructions are doing, then write the equivalent HL code. Don't try to translate each line of assembly.",
      "time": null
    },
    {
      "user": "okokok hack",
      "text": "Dear @RolfRolles, as I told I'm working on malware analysis, for doing in dept analysis I suppose to do this",
      "time": null
    },
    {
      "user": "AKS",
      "text": "It is just like asking to convert my jet  to a car that too among various kind of cars and without even knowing which kind of car. Please note that to become a satellite one need to left ground, that is the expected path. Going down, you need to be clear on various parameters (read as requirements).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "mov ebp, esp\n\nand eax,0\n\nSince the code is incomplete, I would venture to guess that this is part of a function and that the function returns a value in the eax register.\nThus, based on the truth table of the logical operation AND - whatever is in eax - it will be set to zero.\n\nreturn 0;\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "May 1, 2023 at 20:15",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "For the solution of your trivial example, see the answer of @rce.\n\nHowever, achieving a proper understanding of a more realistc, fairly complex assembler code and convert it into HL-code, you should be sure that your reversing produced not only understandable, but also correct HL-code.\n\n\"Correct\" means here that the original assembler code and the HL-code produce the same results, which you can verify e.g. by letting them run in two instances of IdaPro, each with the debugger running, and comparing after each significant step for correctness.\n\nYou could proceed like so:\n\nAs this seems tedious, for more complex algorithms (which cannot be recognized by other means like the use of known \"magic numbers\"), this can be a successful strategy for a proper reverse engineering of non-trivial assembler code. It can become difficult, e.g. if you have \"flattened\" code or algorithms which contain vectorized code realized with intrinsics.\n\n",
      "votes": "1",
      "user": "josh",
      "time": "Dec 23, 2022 at 12:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}