{
  "title": "Determine Control-Flow Of A .NET Assembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/25585/determine-control-flow-of-a-net-assembly",
  "content": "Using DnSpy is great, but it's very awkward to ascertain the control-flow of an executable. Is anyone able to advise on free-of-charge helpful apps that display a control-flow graph?\n\nIDA Home does not work on .NET assemblies, nor does Radare2 sadly.\n\nHopefully someone can tell what they do?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "272",
  "tags": [
    ".net"
  ],
  "user": "Dalski",
  "time": "Jul 30, 2020 at 12:51",
  "comments": [],
  "answers_data": [
    {
      "content": "So I though it would be a nice pet-project so I've started building a PoC tool that can generate a CFG for a given method in the .NET assembly.\n\nThe PoC uses Mono.Cecil to inspect the binary and produces a graph in a DOT language than later can be transformed into a picture with dot tool and works on IL level.\n\nA bit of technical info.\n\nFirst it determines leaders - instructions that will be the first instruction in the basic blocks (BB) - by going through the opcodes and checking the control flow type:\n\nAlso doing that we can construct edges between those BBs, there will be different outgoing edges depending on the type of flow:\n\nThe only thing we need to do having those info, is to generate a graph definition in the DOT langage.\n\nCalling the tool in the following way\n\nwill generate for us a \"nice\" CFG for the method AddCustomDebugInformations.\n\n\n\nIt might fail for some strange (or normal) edge cases and of course there's a lot to improve but overall CFG is there ;)\n\nLink to the repo: https://github.com/pawlos/cfg\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Aug 6, 2020 at 8:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}