{
  "title": "gdb shows wrong instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/13881/gdb-shows-wrong-instruction",
  "content": "I'm debugging android jni with gdb. There's a jni function A(), I need to set breakpoint there and step through. I calculated the address with module_base+offset, which is 0x99B62C7A, then I tried to verify if it's the right address, with gdb command:\n\n```\ndisplay /5i 0x99B62C7A\n\n```\nIt prints some unexpected instructions, which is different from IDA:\n\n\nAnd if I put a breakpoint there and click on the UI to trigger the breakpoint, the process crashes with SIGSEGV. \n\nSo why gdb displays different instructions? Is the crash has something to do with the bad instruction?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "android",
    "gdb"
  ],
  "user": "aj3423",
  "time": "Nov 9, 2016 at 8:46",
  "comments": [],
  "answers_data": [
    {
      "content": "Your instructions shown by Ida are Thumb-mode instructions. The easiest way to verify this is by checking the addresses - each instruction has 2 bytes. Gdb doesn't know this however, and assumes 4 byte arm instructions. When an object has a symbol table, gdb can detect the instruction mode from that, but will fallback to a default mode when it can't. You can change this fallback mode; set arm fallback-mode thumb should do the trick.\n\nThis explains the SIGSEGV as well as breakpoints use different opcodes in arm and thumb mode.\n\n",
      "votes": "6",
      "user": "Guntram Blohm",
      "time": "Nov 8, 2016 at 10:07",
      "is_accepted": true,
      "comments": []
    }
  ]
}