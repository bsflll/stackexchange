{
  "title": "Reassembling ELF binary files",
  "link": "https://reverseengineering.stackexchange.com/questions/22813/reassembling-elf-binary-files",
  "content": "I have been doing a number of CTF activities when I came across something I’m unfamiliar with. As I am somewhat new to exploitation and reverse engineering, this was unfamiliar to me.\n\nI have 7 pieces of an ELF binary file. I’ve been using readelf to get a better idea of where to put each piece. But I’m still unable to glean the order except for piece 4 contains the header and piece 6 contains the section names.\n\nI’ve been using ‘cat’ to glue the pieces together then run them through readelf and gdb. Is there an easier way that I’m just missing?\n\nFor reference the particular example can be found on 0x0539.net -> Fangorn Forest -> Fragmented. I don’t want the answer. What I’m looking for is someone to point me in the right direction. \n\n",
  "votes": "8",
  "answers": 2,
  "views": "1k",
  "tags": [
    "elf"
  ],
  "user": "t3nt0nbr1ck",
  "time": "Dec 24, 2019 at 20:27",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "what about creating a small python script that will try the combinations of the remaining parts and checking if the can be interpreted as a valid ELF file? Probably some of the combinations will result in an error and remaining ones could be inspected manually.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here is the flag:\n\nNotes:\n\nResulting file:\n\nSince the symbol table and section header table were intact, objdump -dj .text reassembled.elf was used to compare disassembly of the code in the file to that of cat to check for consistency. There were some differences, but it turned out not to matter, as the flag was recoverable even though the program segfaults:\n\n",
      "votes": "2",
      "user": "julian",
      "time": "Mar 19, 2020 at 16:36",
      "is_accepted": false,
      "comments": [
        {
          "user": "t3nt0nbr1ck",
          "text": "I see where I went wrong, thanks!",
          "time": null
        },
        {
          "user": "julian",
          "text": "@t3nt0nbr1ck you are welcome",
          "time": null
        },
        {
          "user": "macro_controller",
          "text": "I wouldn't publish the flag :) It's kinda cheating, if they want the flag they should do your step themselves IMO.",
          "time": null
        },
        {
          "user": "t3nt0nbr1ck",
          "text": "@macr0controller I agree.",
          "time": null
        }
      ]
    },
    {
      "content": "It may be beneficial to study what the flags in the header actually mean. This will tell you useful information such as, where \"things\" are located and the size of said \"things\". Plus you would gain a better understanding of the ELF file format!\n\nAfter that, you could probably automate the process with a python script, looking for key flags and using them to piece it together. \n\n",
      "votes": "1",
      "user": "Chase Opsahl",
      "time": "Dec 23, 2019 at 21:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "t3nt0nbr1ck",
          "text": "So, I tried both methods, and got literally no where. I was able to sort the resulting files into only ones with the elf header (720), then I wrote a shell script to attempt to run each file, which failed because I keep getting access denied. tried file, which did confirm that almost all of them read as valid executables. when I try an objdump I just run into errors on every file, stating that there are references that go beyond the file size. I'm sort of still lost. Any recommendations?",
          "time": null
        }
      ]
    }
  ]
}