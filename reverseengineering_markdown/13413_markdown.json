{
  "title": "Are .NET DLLs, even the best obfuscated ones, less secure than C++ DLLs?",
  "link": "https://reverseengineering.stackexchange.com/questions/13413/are-net-dlls-even-the-best-obfuscated-ones-less-secure-than-c-dlls",
  "content": "From what I understand about .NET code, it is first compiled to Microsoft Common Intermediate Language (MSIL) before being translated to machine code at runtime.\n\nWhereas C++ code is compiled directly to machine code.\n\nSo reverse engineering .NET DLLs is a lot easier than reverse engineering C++ DLL because of the rich metadata that MSIL has. However, if I obfuscate my .NET code with the best possible .NET obfuscation tools, can I get the kind of decompilation protection that C++ DLLs offer? Why?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "decompilation",
    "deobfuscation",
    ".net"
  ],
  "user": "Graviton",
  "time": "Sep 3, 2016 at 7:14",
  "comments": [],
  "answers_data": [
    {
      "content": "C++ code is most likely translated to assembly and then translated to machine code\n\n.net code is compiled to Bytecode which is executed in a virtual environment\n\nWikipedia provides a good overview of current .net obfuscators and the techniques they apply: Wikipedia: List of obfuscators for .NET All of these techniques offer a huge increase in secrecy, but can not hope to reach the security offered by packed / obfuscated binaries (see recent malware packing / obfuscation)\n\nOn the other hand, 'standard' C++ libraries are not obfuscated, i.e. they don't have a decompilation protection. Most problems emerging while reverse engineering them originate from compiler optimization techniques. \n\n.Net binaries contains semantic information. Machine code has no concept for 'strings' or variable types other than x-byte-sized fields. That being said, the obfuscation offered by the frameworks on the wikipedia page should be more than sufficient for most scenarios.\n\n",
      "votes": "1",
      "user": "Nordwald",
      "time": "Sep 2, 2016 at 9:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "Graviton",
          "text": "Do you see that there are decompilers that can deobfuscate the tools you mention? such as de4dot",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "While some specific obfuscations may be 'undone' by searching for traces the original obfuscater leaves behind, the actual recovered code, nevertheless should be only slightly better understandable than decompiled C++ code. Thanks for pointing that out",
          "time": null
        },
        {
          "user": "Graviton",
          "text": "Nordwald, I've read your answers a few times during past few days, and I am not sure what is your point. C++ compiles to machine code whereas .Net compiles to IL language. Even the most obfuscated IL code is more readable than machine code, is it not so?",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "Not necessarily. While IL code does contain some meta-information, obfuscations like spaghetti code DO apply here. Anyways, obfuscated machine code will always be harder to reverse than obfuscated IL. Someone familiar with assembler instructions and compiler optimization might rather analyze the compiled binary than obfuscated IL.",
          "time": null
        },
        {
          "user": "rollsch",
          "text": "If you reverse X86 asm everyday you might find it easier than obfuscated MSIL. MSIL is probably simpler to read, but less people are experienced in it.",
          "time": null
        }
      ]
    }
  ]
}