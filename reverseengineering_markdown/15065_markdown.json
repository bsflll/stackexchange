{
  "title": "Help editing & repacking (repackaging) .img wi-fi camera firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/15065/help-editing-repacking-repackaging-img-wi-fi-camera-firmware",
  "content": "I've been playing around with a cheapish ($15 on sale @ Wal-Mart) WiFi camera. It has a UART port which drops me into a shell from which I can launch telnetd and login easily. However, even though the filesystem is mounted readwrite, when I edit anything (i.e. init.d) and then reboot, the filesystem goes back to its previous state and telnetd doesn't run. :(\n\nMy long term goal is to figure out how to replace or edit the camera's streaming binary files so that it's not dependent upon a hosted cloud server to store and stream videos. (Currently to stream from outside my house, the video bounces off their cloud server; and I must use their proprietary app!) My short term (current) goal is to figure out how to repack the firmware and rewrite to the camera. \n\nI was able to sniff a firmware update, and the firmware file is found at:\n\n```\nhttps://app.isecurityplus.com/seedonk/firmware/minions/A356_upgrade_00.10.008_20161107.img\n\n```\nand\n\n```\n$ file A356_upgrade_00.10.008_20161107.img \nA356_upgrade_00.10.008_20161107.img: u-boot legacy uImage, Imogen-X860-I, Linux/ARM, OS Kernel Image (Not compressed), 6709304 bytes, Mon Nov  7 02:33:58 2016, Load Address: 0x80008000, Entry Point: 0x80008000, Header CRC: 0x37467C4E, Data CRC: 0x93CBB08E\n\n```\nbinwalk shows:\n\n```\n$ binwalk -Me A356_upgrade_00.10.008_20161107.img \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             uImage header, header size: 64 bytes, header CRC: 0x37467C4E, created: 2016-11-07 02:33:58, image size: 6709304 bytes, Data Address: 0x80008000, Entry Point: 0x80008000, data CRC: 0x93CBB08E, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: \"Imogen-X860-I\"\n10063         0x274F          xz compressed data\n10284         0x282C          xz compressed data\n\n<etc..snip.. eventually it creates a 0.cpio file>\n\n$ cpio -idv < 0.cpio \n$ ls\n0.cpio      dev     init        lib32       media       package     run  system     var\nbin     etc     ko      libexec     mnt     proc        sbin        tmp\ncpio-root   home        lib     linuxrc     opt     root        sys     usr\n\n```\nThis community has been amazing and I've learned so much about RE. I've found a few posts on here about repackaging this sort of thing but I still have enough knowledge gap to fall short on knowing where my next step would be. Any guidance?\n\nMany thanks!\n\n",
  "votes": "4",
  "answers": 1,
  "views": "1k",
  "tags": [
    "embedded"
  ],
  "user": "justin",
  "time": "Apr 2, 2017 at 0:38",
  "comments": [],
  "answers_data": [
    {
      "content": "It sounds like in this case in order for modifications to the file system to persist across device reboots, changes must be made to the firmware image itself and the modified image must then be written to memory using the \"upgrade\" facility provided by the device. Here is the general workflow according to the firmware mod kit archive page at Google Code:\n\nSince extraction does not seem to be a problem and since the file system format is cpio and not something more exotic, you may be able to use the GNU cpio utility and not need any special tools to modify the file system and then re-compress it.  \n\nThe modified file system will likely need to be located at the offset in the rebuilt firmware image the bootloader expects it to be. For reference, devttys0 has a full walk-through in his article Firmware Patching: Fixing the TEW-632BRP.\n\nAdditional resources:\n\nFirmware Modification Kit - Giving YOU the power to customize your firmware\n\nbitsum forum\n\nHow to View, Modify and Recreate initrd.img. \n\n",
      "votes": "2",
      "user": "julian",
      "time": "Apr 2, 2017 at 4:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}