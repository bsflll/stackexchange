{
  "title": "What happens when a DLL is added to AppInit_DLL",
  "link": "https://reverseengineering.stackexchange.com/questions/1376/what-happens-when-a-dll-is-added-to-appinit-dll",
  "content": "I have a malware sample that adds a DLL to the registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs.  There is malicious functionality in the DLL referenced by the registry key but this malware sample does not load or call the DLL, nor does it exhibit any other malicious behavior.\n\nWhy would malware add a DLL to this registry key?\n\n",
  "votes": "8",
  "answers": 2,
  "views": "25k",
  "tags": [
    "windows",
    "malware",
    "dll"
  ],
  "user": "amccormack",
  "time": "Mar 29, 2013 at 19:19",
  "comments": [],
  "answers_data": [
    {
      "content": "Basically, all DLLs listed in that reg-key are loaded when any process is started. \nFor more info see Working with the AppInit_DLLs registry value.\n\nThey are usually used by malicious code (tho it doesn't have to be malicious) as a way of DLL injection, to hook functions for example. To be more precise, AppInit DLLs are actually loaded only by the processes that link user32.dll.,as peter ferrie points out, AppInit DLLs are loaded by user32.dll after it has been loaded. \nThe actual registry path differs between 64bit and 32bit version of OS.\n\nSo for for 32 bit DLL on 32 bit systems the path is:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs] \n\n```\nFor  64 bit DLL on 64 bit system :\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs]\n\n```\nFor for 32 bit DLL on 64 bit system:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs] \n\n```\nMultiple entries are split with space or comma, and the path to the DLL must not contain any spaces for obvious reasons.\nOn Vista and later, the AppInit DLLs need to be signed, tho the registry value RequireSignedAppInit_DLLs can be set to 0 which disables this requirement.\n\n",
      "votes": "9",
      "user": "0xea",
      "time": "Mar 30, 2013 at 19:11",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "It's more correct to say that the AppInit_DLL dll is loaded by user32.dll when user32.dll itself is loaded, and that can happen dynamically (delay-load or manual load). There can be more than one registered DLL in there, too.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "AFAIK RequireSignedAppInit_DLLs was added around Vista/Windows7 but was still off by default, and only turned on by default with a windows 10 update.",
          "time": null
        },
        {
          "user": "c00000fd",
          "text": "I don't think this works on Windows 10 anymore.",
          "time": null
        }
      ]
    },
    {
      "content": "The implementation of AppInit DLL in windows 7 is as follows:\n\nIn user32.dll!ClientThreadSetup the LoadAppInitDlls export from kernel32.dll is being called for any process except the LogonProcess.\n\nkernel32.dll!LoadAppInitDlls checks the LoadAppInit_DLLs registry key and if set calls BasepLoadAppInitDlls (except when offset 3 of the PEB has value 2).\n\nBasepLoadAppInitDlls calls LoadLibraryEx for each DLL set in the AppInit_DLLs registry key. If signing is required (when the RequireSignedAppInit_DLLs registry value is set) the LOAD_LIBRARY_REQUIRE_SIGNED_TARGET flag is passed to LoadLibraryEx.\n\nSo by setting this registry key, the malware dll will be injected into every process started after setting this key. On previous OS versions AppInit DLL's were not called for non gui/console processes but at least on Windows 7 it's also called for non gui processes.\n\n",
      "votes": "9",
      "user": "Remko",
      "time": "Mar 30, 2013 at 22:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}