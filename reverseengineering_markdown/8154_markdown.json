{
  "title": "pintool to intercept writes and VirtualProtect",
  "link": "https://reverseengineering.stackexchange.com/questions/8154/pintool-to-intercept-writes-and-virtualprotect",
  "content": "On Linux the strace.so pintool gives a good overview on how system calls are intercepted in PIN. One could monitor the value of EAX to see which system call is being invoked(and mprotect and writes could be intercepted in the fashion).\n\nHow could we do something similar for Windows? I see that the int 2e interrupt is used to trap into the kernel and that the system calls numbers are given at here. Is NtWriteFile the analogue of write? Also is NtProtectVirtualMemory the analogue of mprotect?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "547",
  "tags": [
    "operating-systems",
    "pintool",
    "system-call"
  ],
  "user": null,
  "time": "Feb 4, 2015 at 7:26",
  "comments": [
    {
      "user": "perror",
      "text": "I might have a bad understanding of your question, but pintool is suppose to work also for Windows. Haven't you tried it for Windows ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Pintools on Windows can also aid you in instrumenting system calls. Also, if its discovered that the cpu supports sysenter/syscall, those are used in place of int 2e. However, this has no bearing on whether or not instrumentation can take place.\n\nTo answer your second question, yes, NtReadFile, NtWriteFile and NtDeviceIoControlFile are the *nix equivalent of read/write/ioctl.\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Feb 4, 2015 at 12:42",
      "is_accepted": true,
      "comments": []
    }
  ]
}