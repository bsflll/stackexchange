{
  "title": "How to locate module_init() offset from ELF header of Linux kernel module?",
  "link": "https://reverseengineering.stackexchange.com/questions/13024/how-to-locate-module-init-offset-from-elf-header-of-linux-kernel-module",
  "content": "The header is self explanatory but to explain myself better.\nI have an ELF binary - loadable kernel module, compiled with symbols.\nI want to know how to locate the offset of the module_init() function.\nCan I find this info using readelf ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "linux",
    "elf",
    "driver",
    "entry-point"
  ],
  "user": "TakashiYamamoto",
  "time": "Dec 12, 2019 at 8:06",
  "comments": [
    {
      "user": "Vitaly Osipov",
      "text": "For example, lwn.net/Articles/531148 Also, module_init is not a real function, it's a macro as described in that article.",
      "time": null
    },
    {
      "user": "perror",
      "text": "@TakashiYamamoto: Tell me if I am wrong, but I always thought that the init_module() function was located at the start of the module address... Have you examples where it is not the case? I am interested to know about!",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To read with readelf the parameter is \"-s\":\n\n```\n Options are:\n    -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I\n    -h --file-header       Display the ELF file header\n    -l --program-headers   Display the program headers\n        --segments          An alias for --program-headers\n    -S --section-headers   Display the sections' header\n       --sections          An alias for --section-headers\n    -g --section-groups    Display the section groups\n    -t --section-details   Display the section details\n    -e --headers           Equivalent to: -h -l -S\n    -s --syms              Display the symbol table\n       --symbols           An alias for --syms\n    --dyn-syms             Display the dynamic symbol table\n    -n --notes             Display the core notes (if present)\n\n```\nSo, with readelf -s module.ko is enough to read the symbols. \n\n",
      "votes": "2",
      "user": "sinkmanu",
      "time": "Aug 27, 2017 at 11:23",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "First disassemble your module\n\n```\nobjdump -xDsl module.ko > disassemble.txt\n\n```\nThen edit the file and search for section init. It look like this:\n\nDisassembly of section .init.text:\n\n```\n002bdb01 <init_module>:\ninit_fct():\n\n```\n",
      "votes": "-3",
      "user": "0xC0000022L",
      "time": "Dec 17, 2019 at 23:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "This answer looks like it has great potential for improvement. @laurent can I suggest you edit it to elaborate a bit more?",
          "time": null
        }
      ]
    }
  ]
}