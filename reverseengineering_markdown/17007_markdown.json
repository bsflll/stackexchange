{
  "title": "Using stdin when debugging with r2pipe",
  "link": "https://reverseengineering.stackexchange.com/questions/17007/using-stdin-when-debugging-with-r2pipe",
  "content": "I was using radare2 (2.2.0) with r2pipe (0.9.5) for python3 to debug the code generated by:\n\n\n```\n#include <stdio.h>\n\nint main(){\n    char entrada[14];\n    gets(entrada);\n    puts(entrada);\n    return 0;\n}\n\n```\nDisassembling the main function with radare2 outputs:\n\n```\n0x00400546      55             pushq %rbp\n0x00400547      4889e5         movq %rsp, %rbp\n0x0040054a      4883ec10       subq $0x10, %rsp\n0x0040054e      488d45f0       leaq local_10h, %rax\n0x00400552      4889c7         movq %rax, %rdi\n0x00400555      b800000000     movl $0, %eax\n0x0040055a      e8e1feffff     callq sym.imp.gets          ; char*gets(char *s)\n0x0040055f      488d45f0       leaq local_10h, %rax\n0x00400563      4889c7         movq %rax, %rdi\n0x00400566      e8c5feffff     callq sym.imp.puts          ; int puts(const char *s)\n0x0040056b      b800000000     movl $0, %eax\n0x00400570      c9             leave\n0x00400571      c3             retq\n\n```\nHowever, when debugging this program with python using this script\n\n\n```\nimport r2pipe as r2\nprog = r2.open(\"./a.out\")\n\nprog.cmd(\"aaa\")\nprog.cmd(\"doo\")\n\nprog.cmd(\"db 0x0040055f\") #Breakpoint after 'gets' call\n\nprog.cmd(\"dc\")\nprog.cmd(\"dc\")\n\n```\nthe execution stucks in the \"gets\" call, no matter which input I use. The same sequence of commands works fine with the radare2's CLI. I also tried using dor stdin=input.txt before doo which, despite the fact it works, it isn't convenient to write files to the disk, and for some uses, is not possible to determine the needed input before the execution.\n\nWhat is the best way to use stdin with r2pipe?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "radare2"
  ],
  "user": "danielbb",
  "time": "Dec 19, 2017 at 18:43",
  "comments": [],
  "answers_data": [
    {
      "content": "Just use i.e. pseudo-terminal as file in the command. I usually create rarun2 file\n\n```\n#!/usr/bin/rarun2\nstdin=/dev/pts/20\n\n```\nAnd in the r2pipe script I run\n\n```\nr2.cmd('e dbg.profile=re2.rr2')\n\n```\nto configure usage of this script by r2 debug session.\n\nThen, on one terminal you run your r2pipe and on the other (the one that is /dev/pts/20) you type\n\n```\necho \"<input>\" > /dev/pts/20\n\n```\n",
      "votes": "4",
      "user": "Paweł Łukasik",
      "time": "Dec 19, 2017 at 22:53",
      "is_accepted": true,
      "comments": [
        {
          "user": "danielbb",
          "text": "Didn't work for me.  After the gets call, the terminal used as stdin (mine was /dev/pts/3) becomes nearly unresponsive, and running echo \"<input>\" > /dev/pts/3 in both /dev/pts/3 or any other terminal does prints the <input> to that /dev/pts/3 terminal, but it isn't passed to process that is being debugged. I think i set the stdin correctly though, because prog.cmd(\"dd\") returns 0 0x0 r-C /dev/pts/3  1 0x0 r-P pipe:[254433]  2 0x0 r-C /dev/pts/1.",
          "time": null
        },
        {
          "user": "danielbb",
          "text": "I'll try again later with a  pty unlinked to a terminal, and i'll verify if i'm passing the newline character correctly. Thanks for the response :)",
          "time": null
        },
        {
          "user": "danielbb",
          "text": "I don't fully understand why, but using openpty worked for me. Thanks again",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "@danielbb If it works then please mark this as an answer",
          "time": null
        }
      ]
    }
  ]
}