{
  "title": "Approaches to detect (compressed) audio in firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/23231/approaches-to-detect-compressed-audio-in-firmware",
  "content": "Edit: The audio data is on a separate IC\n\nThere are a few seconds of audio in a toy's 128 kB firmware - somewhere...\n\nHere is a downsampled look at the bits (white = 1):\n\n\n\nMy beginner's attempts to analyse the disassembly in order to find the audio data blocks have not been successful so far. There appear to be sections that are visually different, although it's not something very obvious. Trying the different raw audio import options in Audacity only results in \"noise\".\n\nI am assuming a (simple?) compression scheme is in use, so maybe RLE, DPCM or even ADPCM.\n\nMy guess is that the areas that do not show the byte boundary (LSB/MSB set = white) as clearly (=higher bit frequency?) are worth a closer look. \n\nI am going to try to gather information about the audio resolution and rate by analysing the audio output, to help get an estimate of what I am looking for.\n\nA few ideas on how to proceed:\n\nFinding data (as opposed to code) from program analysis:\n\nFinding audio data directly by:\n\nWorking with a debugger:\n\nBut all of these require a lot of legwork and more background knowledge than I currently have, so the outlook is rather limited..\n\nWhat other approaches to finding data in firmware should I consider? \n\n",
  "votes": "0",
  "answers": 0,
  "views": "130",
  "tags": [
    "firmware",
    "firmware-analysis"
  ],
  "user": "handle",
  "time": "Feb 20, 2020 at 19:35",
  "comments": [
    {
      "user": "Robert",
      "text": "As long as you don't know the format finding it requires a lot of luck. If possible I would check the chip executing the code regarding the supported audio formats.",
      "time": null
    },
    {
      "user": "Rup",
      "text": "I'd guess mu law 8KHz mono, since that's fairly common in telephony (and a good step up from linear 8-bit PCM if you've got a 12+ bit DAC), and it doesn't feel worth going overboard with anything complex for only a few seconds of audio. Here's the widely used (I think) Sun decode code: search for bytes 0F and F0 near lots of shift instructions, and you might get lucky.",
      "time": null
    },
    {
      "user": "nneonneo",
      "text": "If it's a simple enough compression scheme (ADPCM, uLaw, etc.), playing it as if it's PCM will sometimes actually work. You'll get something that's noisy as heck but the underlying audio (e.g. voice, music) will be audible under the noise. This lets you determine at least two things: the bitrate/sample rate of the audio, and where in the file the audio is. (I realize you've tried this - but maybe try listening very carefully to the noise!)",
      "time": null
    },
    {
      "user": "handle",
      "text": "I've used Audacity to convert a recording of the desired audio into a few different formats (with compression) to have something as a reference. Indeed, with some formats, the original audio can be recognized when playing back the raw data. Meanwhile, I have found out the audio actually comes from another IC... Must have been the cheapest option.",
      "time": null
    }
  ],
  "answers_data": []
}