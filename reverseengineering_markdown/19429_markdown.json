{
  "title": "Disassembly - Why the CMP instruction is multiplying by 2 the value being compared",
  "link": "https://reverseengineering.stackexchange.com/questions/19429/disassembly-why-the-cmp-instruction-is-multiplying-by-2-the-value-being-compar",
  "content": "I'll get right to the point, I have a crack me program, that is a program with a password inside that needs to be found so that you can complete the challenge.  \n\nI easily found the cmp instruction with the password, but the numeric password was multiplied by 2. \n\nin the program does not have anything to multiply or divide the password, then this must be caused by something else\n\nso I had to get the hexadecimal value of the password convert to decimal and divide by 2 to have the real password.\n\nhere is the cmp instruction:\n\n```\nCMP DWORD PTR SS:[EBP-C],961DB0\n\n```\nI would like to know why the password has been multiplied by 2 in this cmp instruction.\n\n\n\nA photo of the Source Code, I do not have it without being in the photo.\n\n\n\nThank you very much in advance.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "436",
  "tags": [
    "disassembly",
    "ollydbg",
    "debuggers",
    "disassemblers",
    "crackme"
  ],
  "user": "AqueleCaraComNome",
  "time": "Sep 23, 2018 at 0:01",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Can you replace those photos with the real code? It will make question better and reproducible for others.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The cmp instruction does not multiply anything by two. Instead, the piece of code seen in your ollydbg screen shot is the implementation of the following line from the poor quality source code image you attached:\n\n```\nif ((!key) || (key > (0x1337 * 2000)))\n\n```\nFirst, in address 0x01051C09, key is compared to 0. If key equals 0 a jump to 0x01051C18 is taken. Otherwise, key is compared to 0x0961DB0. If key is below or equal to 0x0961DB0 another jump is taken. If key is greater than 0x0961DB0 execution continues to 0x01051C18.\n\nAs you should've guessed by now, 0x0961DB0 is simply 0x1337 times 2000.\n\nInstructions 0x01051C18 to 0x01051C22 are the implementation of calling wrong, setting eax to the correct return value (1) and then jumping to where (I assume) the function prolog and ret are executed.\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Oct 1, 2018 at 17:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "AqueleCaraComNome",
          "text": "Thanks, but suppose we did not have the source code, how could we identify that 0x0961DB0 is 0x1337 * 2000?",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "We would not necessarily recognise that. Instead, we may write condition as key > 0x0961DB0. It's essentially the same.",
          "time": null
        },
        {
          "user": "AqueleCaraComNome",
          "text": "Now I understand, thank you for clarifying the problem.",
          "time": null
        }
      ]
    }
  ]
}