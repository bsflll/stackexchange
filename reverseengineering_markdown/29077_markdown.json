{
  "title": "Does Golang's cgo now support output with .gopclntab?",
  "link": "https://reverseengineering.stackexchange.com/questions/29077/does-golangs-cgo-now-support-output-with-gopclntab",
  "content": "I read this page in which the author, Chris Siebenmann, states that binaries created using cgo will not have the gopclntab or the gosymtab sections. However, I see that on go version go1.13.15 linux/amd64, I have built a Go program which links basic c code, using cgo, and I've confirmed with radare2 that there is in fact a .gopclntab section in the resulting binary.\n\nHas there been a change since this article (and the referenced Building a Better Go Linker article) was written? Or is there some other situation in which cgo may strip these sections? I ask because I have indeed seen other cgo output binaries that have these sections missing, but I have been unable to reproduce this using my version of the cgo toolchain.\n\nAside from just knowing this fact, this information is relevant to reverse engineering go binaries because the .gopclntab can be used to extract symbol information. In the past, the absence of this table due to cgo compilation has made it more difficult to do so.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "288",
  "tags": [
    "compilers",
    "section",
    "go"
  ],
  "user": "the_endian",
  "time": "Jul 31, 2021 at 22:21",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "It seems to be a question for go developers, not sure why you are asking here…",
      "time": null
    },
    {
      "user": "the_endian",
      "text": "@IgorSkochinsky I agree that the Go developers may be able to answer this question. However, it is relevant to reversing Go binaries. Not having this section has made it difficult to do so, and I have not found a clear answer in the docs. The question is being asked from a reversing perspective. Although, I do agree that it borderline could be a general Go question; but I've found that Go developer forums usually focus on the language itself, rather than the binary outputs of the compiler at such a low level.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "I’m not sure what you expect since by your description the answer seems to be “yes”. As for when it’s present or not, golang developers surely know better than us.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think the gopclntab section should always be present in any Go binary. Without it panic() couldn't print a stack trace. I suspect the author you are citing was mistaken about this.\n\nThat being said, AFAIK gopclntab will not include symbols or unwind information for linked C libraries. This information is exclusively found in DWARF.\n\n",
      "votes": "1",
      "user": "Felix Geisendörfer",
      "time": "Sep 8, 2021 at 20:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}