{
  "title": "Kernel dealing with the section headers in an ELF",
  "link": "https://reverseengineering.stackexchange.com/questions/4551/kernel-dealing-with-the-section-headers-in-an-elf",
  "content": "I recently read that the kernel and the dynamic loader mostly deal with the program header tables in an ELF file and that assemblers, compilers and linkers deal with the section header tables.\n\nThe number of program header tables and section header tables are mentioned in the ELF header in fields named  e_phnum and e_shnum respectively. e_phnum is two bytes in size, so if the number of program headers is > 65535, we use a scheme known as extended numbering where, e_phnum is set to 0xffff and sh_link field of the zeroth section header table holds the actual count.\n\nMy doubt is :\n\n",
  "votes": "1",
  "answers": 1,
  "views": "943",
  "tags": [
    "linux",
    "file-format",
    "elf",
    "kernel-mode"
  ],
  "user": null,
  "time": "Jun 6, 2014 at 18:30",
  "comments": [],
  "answers_data": [
    {
      "content": "I've just checked the linux kernel loading ELF function (loading_elf_binary) and I find out that if e_phnum > (65536U / sizeof(struct elf_phdr)) or e_phnum < 1, the current loading routine will stop (line 613-615), the ELF file won't be loaded:\n\n```\n610         /* Now read in all of the header information */\n611         if (loc->elf_ex.e_phentsize != sizeof(struct elf_phdr))\n612                 goto out;\n613         if (loc->elf_ex.e_phnum < 1 ||\n614                 loc->elf_ex.e_phnum > 65536U / sizeof(struct elf_phdr))\n615                 goto out;\n616         size = loc->elf_ex.e_phnum * sizeof(struct elf_phdr);\n617         retval = -ENOMEM;\n618         elf_phdata = kmalloc(size, GFP_KERNEL);\n619         if (!elf_phdata)\n620                 goto out;\n\n```\nReference: http://lxr.free-electrons.com/source/fs/binfmt_elf.c\n\nAlso the number of programheader (e_phnum) in ELF32/64 is always 16 bit variable\n\n```\n203 typedef struct elf32_hdr{\n204   unsigned char e_ident[EI_NIDENT];\n205   Elf32_Half    e_type;\n206   Elf32_Half    e_machine;\n207   Elf32_Word    e_version;\n208   Elf32_Addr    e_entry;  /* Entry point */\n209   Elf32_Off     e_phoff;\n210   Elf32_Off     e_shoff;\n211   Elf32_Word    e_flags;\n212   Elf32_Half    e_ehsize;\n213   Elf32_Half    e_phentsize;\n214   Elf32_Half    e_phnum;\n215   Elf32_Half    e_shentsize;\n216   Elf32_Half    e_shnum;\n217   Elf32_Half    e_shstrndx;\n218 } Elf32_Ehdr;\n219 \n220 typedef struct elf64_hdr {\n221   unsigned char e_ident[EI_NIDENT];     /* ELF \"magic number\" */\n222   Elf64_Half e_type;\n223   Elf64_Half e_machine;\n224   Elf64_Word e_version;\n225   Elf64_Addr e_entry;           /* Entry point virtual address */\n226   Elf64_Off e_phoff;            /* Program header table file offset */\n227   Elf64_Off e_shoff;            /* Section header table file offset */\n228   Elf64_Word e_flags;\n229   Elf64_Half e_ehsize;\n230   Elf64_Half e_phentsize;\n231   Elf64_Half e_phnum;\n232   Elf64_Half e_shentsize;\n233   Elf64_Half e_shnum;\n234   Elf64_Half e_shstrndx;\n235 } Elf64_Ehdr;\n\n```\nDefine data type as followed:\n\n```\n9 typedef __u16   Elf32_Half;\n16 typedef __u16   Elf64_Half;\n\n```\nReference: http://lxr.free-electrons.com/source/include/uapi/linux/elf.h#L263\n\nSo, also in the case of a invalid value of e_phnum (invalid ELF file), the maximum value of e_phnum is 65535.\n\nHope this helpful!\n\n",
      "votes": "2",
      "user": "tuantm",
      "time": "Jun 9, 2014 at 7:23",
      "is_accepted": true,
      "comments": []
    }
  ]
}