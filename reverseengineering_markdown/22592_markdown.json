{
  "title": "What is the usual way to determine if a Game uses KernelMode or UserMode Anti cheat?",
  "link": "https://reverseengineering.stackexchange.com/questions/22592/what-is-the-usual-way-to-determine-if-a-game-uses-kernelmode-or-usermode-anti-ch",
  "content": "How does one find out if a game uses KernelMode anti cheat or UserMode?\n\nFor example the Game Black Desert Online uses Xigncode.\n\nIf i google a bit about Xigncode i immediately find out that: \n\n\"Xigncode uses a driver called xhunter1.sys. to protect\" -> KernelMode\n\nWhat Tools and Steps are used by the people to determine this?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "546",
  "tags": [
    "anti-debugging",
    "game-hacking"
  ],
  "user": "Ojav",
  "time": "Nov 21, 2019 at 11:06",
  "comments": [],
  "answers_data": [
    {
      "content": "There is not a single Anti Cheat(AC) I am aware of that is kernel mode without using ObRegisterCallbacks to block access to the process. In fact a good number of the AC drivers I've looked at are nothing more than these callbacks and, sometimes, kernel pattern scans. Nearly every kernel mode AC will also have an IOCTL pipe that's pretty obvious (e.g \\Device\\AcName). No kernel AC is going to hide themselves, using a tool like Driver List should also be obvious. Many will also use DbgLog in DriverEntry which you can see with DebugView using kernel capture. They will also almost universally be signed with a certificate matching the AC name.  I guess the best answer to this is just to use generic tools to look through loaded drivers, it's typically very obvious if an AC driver is loaded.\n\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Dec 5, 2019 at 4:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "That \"IOCTL pipe\" is called a device object, by the way ;)",
          "time": null
        }
      ]
    }
  ]
}