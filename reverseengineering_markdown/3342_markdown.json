{
  "title": "Run command on breakpoint without stopping",
  "link": "https://reverseengineering.stackexchange.com/questions/3342/run-command-on-breakpoint-without-stopping",
  "content": "I'd like to automate the following in my .gdbinit:\n\n```\nbreak boost::uuids::detail::sha1::process_bytes\n\n# When execution stops at the above breakpoint,\n# I want to display the contents of `rcx` as a string:\nx/s $rcx\nc  # do not stop here\n\n```\nHow do I automate this?\n\n```\n# Our custom-built libcurl, with debugging symbols enabled:\nset environment LD_PRELOAD=./curl/curl-7.34.0/lib/.libs/libcurl.so\n\n# File that connects to the evil server:\nfile ./evil\n\n# Make sure we get notified when it connects!\nbreak curl_easy_setopt\ncommands $bpnum\nclear curl_easy_setopt  # to avoid recursion\ncall curl_easy_setopt(curl, CURLOPT_VERBOSE)\ncontinue\nend\n\n```\nThis hooks in to the evil binary, and when it initialises its curl handle, we set set it to verbose so we get lots of output about what's going on.\n\nThanks for the answer.\n\n",
  "votes": "10",
  "answers": 1,
  "views": "4k",
  "tags": [
    "gdb"
  ],
  "user": "Attila O.",
  "time": "Jan 3, 2014 at 6:24",
  "comments": [],
  "answers_data": [
    {
      "content": "Easy enough. In your case what you most likely want is commands which can be used to create \"routines\" that run whenever a breakpoint is hit. For your case roughly:\n\n```\nbreak boost::uuids::detail::sha1::process_bytes\ncommands 1\nx/s $rcx\ncontinue\nend\n\n```\nProblem is that you need to hardcode the breakpoint number. Depending on the GDB version you may get around this using the $bpnum convenience variable. So:\n\n```\nbreak boost::uuids::detail::sha1::process_bytes\ncommands $bpnum\nx/s $rcx\ncontinue\nend\n\n```\nAlso see this concerning the last example.\n\nNote: using this method can be quite taxing on the CPU depending on how often this gets called and whether a hardware breakpoint could be used by GDB.\n\nYou can also use the conditional form of breakpoints. Check out the actual authoritative reference here. The form looks like this:\n\n```\nbreak ... if cond\n\n```\nYou can also set the condition independent of setting the breakpoint, if you know the breakpoint number. Use info break to get the number of the breakpoint and then use that as bnum in:\n\n```\ncondition bnum expression\n\n```\n",
      "votes": "10",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}