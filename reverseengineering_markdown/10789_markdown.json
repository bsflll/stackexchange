{
  "title": "Without push instructions [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/10789/without-push-instructions",
  "content": "If I pass an argument to a function, it should be translated in assembly language into push something. I coded the following in C:\n\n```\n#include <stdio.h>\n\nint sum(int a, int b,int c)\n{\n    int total;\n    total = a + b + c;\n    printf (\"I will return now\");\n    return(total);\n}\n\nint media(int a, int b,int c)\n{\n    int total;\n    total = (a + b + c)/3;\n    printf (\"  \nI will return now  \n\");\n    return (total);\n}\n\nint main ()\n{\n    int num1,num2,num3;\n    char keypress[1];\n\n    num1 = 5;\n    num2 = 10;\n    num3 = 15;\n    printf (\"  \nCalling sum function  \n\");\n    sum(num1,num2,num3);\n    printf (\"  \nWaiting a keypress to call media function  \n\");\n    scanf (\"%c\",keypress);\n    media(num1,num2,num3);\n    printf (\"  \nWaiting a keypress to end  \n\");\n    scanf (\"%c\",keypress);\n    return(0);\n}\n\n```\nI compiled it: gcc -S example.c. It generated an example.s file and my expectation was to saw some push instructions. Here is the produced assembly code:\n\n```\n    .file   \"example.c\"\n    .section    .rodata\n.LC0:\n    .string \"I will return now\"\n    .text\n    .globl  sum\n    .type   sum, @function\nsum:\n.LFB0:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movl    %esi, -24(%rbp)\n    movl    %edx, -28(%rbp)\n    movl    -24(%rbp), %eax\n    movl    -20(%rbp), %edx\n    addl    %eax, %edx\n    movl    -28(%rbp), %eax\n    addl    %edx, %eax\n    movl    %eax, -4(%rbp)\n    movl    $.LC0, %edi\n    movl    $0, %eax\n    call    printf\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size   sum, .-sum\n    .section    .rodata\n.LC1:\n    .string \"  \nI will return now\"\n    .text\n    .globl  media\n    .type   media, @function\nmedia:\n.LFB1:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movl    %esi, -24(%rbp)\n    movl    %edx, -28(%rbp)\n    movl    -24(%rbp), %eax\n    movl    -20(%rbp), %edx\n    addl    %eax, %edx\n    movl    -28(%rbp), %eax\n    addl    %edx, %eax\n    movl    %eax, -4(%rbp)\n    movl    -4(%rbp), %ecx\n    movl    $1431655766, %edx\n    movl    %ecx, %eax\n    imull   %edx\n    movl    %ecx, %eax\n    sarl    $31, %eax\n    movl    %edx, %ecx\n    subl    %eax, %ecx\n    movl    %ecx, %eax\n    movl    %eax, -4(%rbp)\n    movl    $.LC1, %edi\n    call    puts\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size   media, .-media\n    .section    .rodata\n.LC2:\n    .string \"  \nCalling sum function\"\n    .align 8\n.LC3:\n    .string \"  \nWaiting a keypress to call media function\"\n.LC4:\n    .string \"%c\"\n.LC5:\n    .string \"  \nWaiting a keypress to end\"\n    .text\n    .globl  main\n    .type   main, @function\nmain:\n.LFB2:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $16, %rsp\n    movl    $5, -4(%rbp)\n    movl    $10, -8(%rbp)\n    movl    $15, -12(%rbp)\n    movl    $.LC2, %edi\n    call    puts\n    movl    -12(%rbp), %edx\n    movl    -8(%rbp), %ecx\n    movl    -4(%rbp), %eax\n    movl    %ecx, %esi\n    movl    %eax, %edi\n    call    sum\n    movl    $.LC3, %edi\n    call    puts\n    leaq    -13(%rbp), %rax\n    movq    %rax, %rsi\n    movl    $.LC4, %edi\n    movl    $0, %eax\n    call    __isoc99_scanf\n    movl    -12(%rbp), %edx\n    movl    -8(%rbp), %ecx\n    movl    -4(%rbp), %eax\n    movl    %ecx, %esi\n    movl    %eax, %edi\n    call    media\n    movl    $.LC5, %edi\n    call    puts\n    leaq    -13(%rbp), %rax\n    movq    %rax, %rsi\n    movl    $.LC4, %edi\n    movl    $0, %eax\n    call    __isoc99_scanf\n    movl    $0, %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE2:\n    .size   main, .-main\n    .ident  \"GCC: (Debian 4.7.2-5) 4.7.2\"\n    .section    .note.GNU-stack,\"\",@progbits\n\n```\nOf course, I'm missing something because I just saw  two pushq instructions. \n\nMy question is what am I missing?\n\n",
  "votes": "1",
  "answers": 3,
  "views": "1k",
  "tags": [
    "assembly",
    "gcc",
    "amd64"
  ],
  "user": "user13458",
  "time": "9 years ago",
  "comments": [
    {
      "user": "Hackndo",
      "text": "Answers below are accurate. Don't forget thought that  push is not always used when calling functions in 32 bits architecture. You'll probably see mov DWORD PTR [ESP+0x8], 0x24,  mov DWORD PTR [ESP+0x4], 0xa and mov DWORD PTR [ESP], 0x5 more often.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "That's true for some 32-bit calling conventions, but your program is a 64-bit program and thus follows the System V Application Binary Interface for AMD64.\n\nFrom https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI:\n\n",
      "votes": "6",
      "user": "Jason Geffner",
      "time": "Sep 3, 2015 at 17:29",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you want assembly code without the use of push instruction from a C code, there is always the C prototype #inline.\n\n",
      "votes": "1",
      "user": "John Greene",
      "time": "Sep 5, 2015 at 15:53",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "-I think you must read more about passing parameters using x86-64 and x32 modes.\n\n-As @jason Geffner has said, injecting aguments via 32 bits is performed by stacking em up, while via 64 bits, is different, they are stored in regisers (notably rsi,rdi)\n\n-This link illustrates more the mechanism of printf arguments introducing in 64 bit processors.\n\nX86-64 processing\n\nx32 and below\n\n",
      "votes": "0",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}