{
  "title": "How to override c++ string class with LD_PRELOAD",
  "link": "https://reverseengineering.stackexchange.com/questions/18456/how-to-override-c-string-class-with-ld-preload",
  "content": "i am trying to override predefined functions such as strcmp, getenv, etc.\ni already override some of them using LD_PRELOAD options.\nbut i can't override string class, how can i override c++ string class\n\ni already tried something like this;\n\n```\nclass string{\n    char* str;\npublic:\n    string (char* str2){\n        str = str2;\n        std::cout << str2 << std::endl ;\n    }\n    bool operator==(char* str2)  {\n        std::cout << \"c++ => \" << str << \"==\" << str2 << std::endl;\n        return false; \n    }\n    compare(char* str2)  {\n        std::cout << \"c++ => \" << str << \"==\" << str2 << std::endl;\n        return 0;\n    }\n};  \n\n```\nbut it doesn't work i can't print the string that compared or even defined.\n\ncompile;\n\n```\ng++ -g -Wall -shared -fPIC -ldl -o bypasscpp.so bypass.cpp\n\n```\nAnd running program with;\n\n```\nLD_PRELOAD=\"./bypasscpp.so\" ./app\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "c++",
    "function-hooking",
    "decompile",
    "gcc"
  ],
  "user": "Mustafa Akdeniz",
  "time": "Jun 7, 2018 at 8:05",
  "comments": [
    {
      "user": "NirIzr",
      "text": "It seems you're trying to achieve something else and I feel this may not be the best way to achieve it. You may want to consider describing your end goal and look for alternative solutions.",
      "time": null
    },
    {
      "user": "Mustafa Akdeniz",
      "text": "@NirIzr i already tried many different solutions this is my last solution. I need to override these classes.",
      "time": null
    },
    {
      "user": "w s",
      "text": "@Mustafa Adeniz Are these class methods virtual ?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@MustafaAkdeniz: seriously, Nirlzr is right. If you (also!) described what you want to achieve rather than prescribing a particular method, we would be in a better position to help. Just because this is your last straw doesn't mean there aren't better ways to achieve what you want. Why else would you be asking here?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@malikcjm can you please put it in the answer box for future visitors?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Are you trying to override std::string? Please check https://en.cppreference.com/w/cpp/string/basic_string. std::string is just a typedef for std::basic_string<char> which means that std::string is not dynamically linked. In other words those methods you try to override are statically linked into you ./app.\n\n",
      "votes": "0",
      "user": "0xC0000022L",
      "time": "Jun 7, 2018 at 8:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "std::string is a name for the char-specialization of the std::basic_string template class. And while it can be statically linked, it is also provided as a function by the libstdc++6.so as evidenced by running readelf --dyn-syms /usr/lib/x86_64-linux-gnu/libstdc++.so.6|awk '$4 ~ /^FUNC/ {print $8}'|cut -d @ -f 1|c++filt|grep 'std::basic_string<char' (tested on Ubuntu 16.04).",
          "time": null
        }
      ]
    }
  ]
}