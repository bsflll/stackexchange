{
  "title": "How do tools like objdump find names of functions and their start address in ELF binaries?",
  "link": "https://reverseengineering.stackexchange.com/questions/21119/how-do-tools-like-objdump-find-names-of-functions-and-their-start-address-in-elf",
  "content": "I have written a ELF parser that disassmbles the .text section using capstone\n\nmy problem is that i dont know how can i segment the text section based on functions and print the name of the function just like the output of objdump -d\n\nbecause objdump outputs like this :\n\n0x01000 func1:\n\n0x01000 .. \n\n0x01001 ..\n\nhow can i find out the name and start address of every function in .text so i can output something like objdump? \n\ni tried using string to see if the names store somewhere in the binary for example in symbol table,  but couldn't find them anywhere in it!\n\n(note that I'm not talking about import functions and such, just the functions inside the actual main code in the .text section) \n\n",
  "votes": "1",
  "answers": 1,
  "views": "11k",
  "tags": [
    "elf",
    "objdump"
  ],
  "user": "John P",
  "time": "Apr 11, 2019 at 18:53",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "You realize there is the BFD library which really makes it easy to write an ELF parser yourself? All part of the binutils project ...",
      "time": null
    },
    {
      "user": "John P",
      "text": "@0xC0000022L  this was for our homework and we had to write the entire parser ourselves and only use capstone to disassemble, so how can i get the function names and their addresses during parsing?",
      "time": null
    },
    {
      "user": "julian",
      "text": "Is the symbol table present in the binary?",
      "time": null
    },
    {
      "user": "John P",
      "text": "@julian yes there is, but still doesnt contain name of functions otherwise string wouldve find them",
      "time": null
    },
    {
      "user": "Chris Stratton",
      "text": "It sounds very unlikely that would be true if objdump is finding them.  This is likely at a point where you need to post a brief sample exhibiting the problem somewhere.  You can also rebuild objdump from source with custom logging to figure out how it is working.   Make sure you are running the exact same elf through objdump - a stripped elf would not have internal names, so even objdump wouldn't find them, and it would be too bad if you were wasting time chasing a mixup resulting from having run a different version of the file through the objdump test.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In order to accomplish that you need some knowledge about ELF files. I'm not going explain every detail about ELF files since is a lot to cover so I'll try to be as precise as I can.\n\nNOTE #01: I will use radare2 to dissect the file but you can do it with any hex editor out there.\n\nNOTE #02: Here is the link to the cpp file that I compile to explain you ELF files. Feel free to take it or make your own.\n\nFirst, you need to know the structure of headers in ELF files. Here you can see the structures of the headers.\n\nThe first thing we want to look for is e_ident that represent the format of the file (32bit or 64bit) since the file header will be different depending of the file format.\n\nGo to the 0x04 offset of the file and check one byte. (s means seek)\n\n```\n:> s 0x04\n0x00000004  02\n\n```\ne_ident = 0x02 means 64bit format.\n\nNow that we now the file format we need to know the offset of the section header(e_shoff), the size of each entry(e_shentsize), and the number of entries in the section header(e_shnum).\n\n```\n:> s 0x28\n0x00000028  e03b 0000 0000 0000\n\n:> s 0x3A\n0x0000003a  4000\n\n:> s 0x3C\n0x0000003c  1d00\n\n```\ne_shoff = 0x3be0 This is the offset of the section header.\ne_shentsize = 0x40 (64 bytes)\ne_shnum = 0x1d (29 entries)\n\nWe also going to need the index of the section header that contains the names of each section header. This is store in e_shstrndx\n\n```\n:> s 0x3e\n0x0000003e  1c00\n\n```\ne_shstrndx = 0x1c (entry 28)\n\nWith the entry number you can get the address of shstrtab:\n\n```\n// e_shoff+(e_shentsize*e_shstrndx)+sh_offset\n:> s 0x3be0+(0x40*0x1c)+0x18\n0x000042f8  df3a 0000 0000 0000\n\n```\nshstrtab = 0x3adf\n\nNow that you have that information you can run a loop that checks all the section entries:\n\n```\n//pseudocode\nfor (i=0; i<e_shnum; i++)\n    entryN = e_shoff+(e_shentsize*i);\n\n```\nNOTE #03:I'll not print those values here because I have to explain more but that will give you something similar to the command readelf -W -l [program]\n\nEach entry has a structure like the section header. To get the name of each entry add sh_name to shstrtab \n\nI'm only going to show you how I got .text but the idea will be the same for any section entry. In my case .text was the entry 0x0e(14). I'm going to need sh_name, the offset in the file sh_offset, and the size sh_size\n\n```\n//e_shoff+(e_shentsize*e_shstrndx)+sh_name\n:> s 0x3be0+(0x40*0x0e)+0x00\n0x00003f60  9d00 0000\n\n// Get the name\n:> s 0x3adf+0x9d\n0x00003b7c  2e74 6578 7400 2e66 696e 6900 2e72 6f64  .text..fini..rod\n\n//e_shoff+(e_shentsize*e_shstrndx)+sh_offset\n:> s 0x3be0+(0x40*0x0e)+0x18\n0x00003f78  9010 0000 0000 0000\n\n//e_shoff+(e_shentsize*e_shstrndx)+sh_size\n:> s 0x3be0+(0x40*0x0e)+0x20\n0x00003f80  3102 0000 0000 0000\n\n```\nentryName = 0x3be0 // .text\nsh_offset = 0x1090\nsh_size = 0x0231 (561bytes)\n\nIf you can't found it this way then your ELF file must be corrupted. You can take the one I compile to follow this explanation. Good luck. \n\n",
      "votes": "2",
      "user": "Ricardo",
      "time": "Apr 14, 2019 at 20:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}