{
  "title": "Batch disassembling DLL and EXE files?",
  "link": "https://reverseengineering.stackexchange.com/questions/16893/batch-disassembling-dll-and-exe-files",
  "content": "In %SYSTEMROOT%, there are about 2000 DLL and EXE files. I am looking into reverse engineering some of them which are dependencies of other applications.\n\nHowever, what I would preferably want is disassembling all of them and get the assembly files from all files in order to search through the code more \"quickly\". Even though I keep focusing on individual functions and files, I would otherwise need to decompile each DLL individually, which is a lot of repetitive work.\n\nIt's hard enough to find a proper x64 disassembler tool, let a long something that has command line options. Do you have any idea how to solve this problem?\n\n",
  "votes": "8",
  "answers": 3,
  "views": "6k",
  "tags": [
    "windows",
    "assembly"
  ],
  "user": "bytecode77",
  "time": "Dec 1, 2017 at 21:32",
  "comments": [],
  "answers_data": [
    {
      "content": "If you have any version of Visual Studio or Visual Studio Build Tools installed, you have a powerful command line tool called dumpbin, which includes a disassembler option, available to you.\n\n```\ndumpbin /SECTION:.text /DISASM file.exe > file.txt\n\n```\nFor more information, look at the MSDN documentation on dumpbin\n\n",
      "votes": "9",
      "user": "0xC0000022L",
      "time": "Jun 17, 2018 at 20:03",
      "is_accepted": true,
      "comments": [
        {
          "user": "bytecode77",
          "text": "This is amazing! Never knew there were built in tools in the VS tool chain for that. I will accept your answer and upvote both, as you have described the core issue most complete (how to decompile a file). I'll find a scripting solution then (cygwin, LINQPad, etc.)",
          "time": null
        },
        {
          "user": "Simple Sandman",
          "text": "For anyone trying to find dumpbin, refer to this StackOverflow question. For me with VS 2019, I had to install \"C++ profiling tools\" as an individual component in the VS installer.",
          "time": null
        }
      ]
    },
    {
      "content": "Unix tools are your friends!  You can disassemble all files by using a combination of Unix commands.  These are easily available on Windows through Cygwin.\n\n```\nfind $SYSTEMROOT -name \\*.exe -or -name \\*.dll -print0 |\nxargs -0 -n 1 dumpbin /disasm \n\n```\nThe first command finds all .exe and .dll commands. The second applies dumpbin, which comes packaged with Visual Studio, on each found file name. You can redirect the output into a file, or you can modify the above sequence to write the output of each disassembled file into a different output file.  You can also replace dumpbin with your favourite disassembler.\n\n",
      "votes": "5",
      "user": "Diomidis Spinellis",
      "time": "Dec 3, 2017 at 5:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "bytecode77",
          "text": "I don't see any package named \"dumpbin\". If \"disasm\" is a placeholder for any disassembler command line tool, then I would first need one. The real complexity for me is to find and use a proper tool. Having one would already be sufficient, as there are plenty of ways to invoke it, cygwin being only one of them.",
          "time": null
        },
        {
          "user": "fpmurphy",
          "text": "dumpbin is a Visual Studio tool",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@DiomidisSpinellis: these days I'd always recommend all the basic tools included with Git for Windows. My main argument: it's a code-signed distribution.",
          "time": null
        },
        {
          "user": "Diomidis Spinellis",
          "text": "@0xC0000022L I like that Cygwin through its package manager allows you to choose from hundreds of projects, thus allowing you to grow with it. Isn't Git for Windows restricting in this area?",
          "time": null
        }
      ]
    },
    {
      "content": "You can always write an IDAPython script that would:\n\nand then load the next file by calling idc.LoadFile again.\n\nIMO, IDA's disassembler usually yields better results in comparison to the dumpbin utility.\n\n",
      "votes": "0",
      "user": "NirIzr",
      "time": "Jun 18, 2018 at 8:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}