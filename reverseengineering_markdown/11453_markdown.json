{
  "title": "Hiding shared library calls from ltrace",
  "link": "https://reverseengineering.stackexchange.com/questions/11453/hiding-shared-library-calls-from-ltrace",
  "content": "I am trying to implement some antidebug methods. Although I have encrypted texts, ltrace reveals them, for example:\n\n```\nstrstr(\"Name:\\tltrace  \n\", \"ltrace\") \n\n```\nA solution would be static linking, but I do not want to statically link everything. Is there a way to select which functions to link statically, or to prevent ltrace from revealing these information?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "513",
  "tags": [
    "c",
    "dynamic-linking"
  ],
  "user": "robert",
  "time": "Dec 3, 2015 at 15:06",
  "comments": [
    {
      "user": "robert",
      "text": "Thank you downvoter. Can you write a comment too or just pressing the downvote button?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "That's a question for https://stackoverflow.com/\n\nYou could have your program try to find and terminate running ltrace processes. But this has limited use if your process doesn't have sufficient privileges or if the user renames ltrace or if the user patches out (disables) your ltrace-termination code.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jason Geffner",
          "text": "(And as a side comment, having your program terminate or interfere with users' other processes at runtime is likely to make for very unhappy users.)",
          "time": null
        }
      ]
    },
    {
      "content": "ltrace uses ptrace to patch instructions in the original binary to a breakpoint. This is specifically done to every plt entry in the dynamically linked binary. The plt entries contain a small piece of code to resolve and jump to the function being called.\n\nYou can probably write code in your program to do the opposite and restore every breakpoint after ltrace has patched it. See arch_enable_breakpoint in the ltrace source\n\n",
      "votes": "0",
      "user": "sudhackar",
      "time": "Aug 24, 2023 at 15:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}