{
  "title": "KeygenMe - My output has one wrong character",
  "link": "https://reverseengineering.stackexchange.com/questions/11969/keygenme-my-output-has-one-wrong-character",
  "content": "I'm trying to get into reverse engineering and am beginning with .NET, attempting various CrackMes and KeygenMes that I've found on the internet. Until now, I haven't really struggled but this latest one is driving me mad:\n\nhttps://tuts4you.com/download.php?view.1894\n\nVT link if needed: https://www.virustotal.com/en/file/9bd07d7cbd053f6ad27792487679b18b2f72b589440d8ab81f9cdc4d84301178/analysis/1454947890/\n\nDecompiling with ILSpy reveals the license check performed:\n\n```\n    FileStream fileStream = new FileStream(\"key.dat\", FileMode.Open, FileAccess.Read);\n    StreamReader streamReader = new StreamReader(fileStream);\n    string text = streamReader.ReadToEnd();\n    byte[] bytes = Encoding.Unicode.GetBytes(this.TextBox1.Text);\n    SHA512 sHA = new SHA512Managed();\n    sHA.ComputeHash(bytes);\n    if (Operators.ConditionalCompareObjectEqual(this.CodeCrypt(text), Convert.ToBase64String(sHA.Hash), true))\n    {\n        Interaction.MsgBox(\"Good job, make a keymaker\", MsgBoxStyle.Information, \"Done\");\n    }\n    else\n    {\n        Interaction.MsgBox(\"Try again, it is very simple\", MsgBoxStyle.Critical, \"No ....\");\n    }\n    streamReader.Close();\n    fileStream.Close();\n\n```\nHere is the CodeCrypt method:\n\n```\nKey = \"AoRE\";\npublic string CodeCrypt(string text)\n{\n    string text2 = \"\";\n    int arg_0F_0 = 1;\n    int num = Strings.Len(text);\n    checked\n    {\n        for (int i = arg_0F_0; i <= num; i++)\n        {\n            int num2 = i % Strings.Len(this.Key);\n            if (num2 == 0)\n            {\n                num2 = Strings.Len(this.Key);\n            }\n            text2 += Conversions.ToString(Strings.Chr(Strings.Asc(Strings.Mid(this.Key, num2, 1)) ^ Strings.Asc(Strings.Mid(text, i, 1)) - 6));\n        }\n        return text2;\n    }\n}\n\n```\nSeemed quite straight forward to reverse, so I generated my own key generation method:\n\n```\n    private static string Key(string name)\n    {\n        string key = \"\";\n\n        SHA512 sHA = new SHA512Managed();\n        string hash = Convert.ToBase64String(sHA.ComputeHash(Encoding.Unicode.GetBytes(name)));\n\n\n        for (int i = 1; i <= hash.Length; i++)\n        {\n            int num2 = i % 4;\n            if (num2 == 0)\n            {\n                num2 = 4;\n            }\n            var test = Convert.ToChar((\"AoRE\"[num2 - 1] ^ hash[i - 1]) + 6);\n            key += test;\n        }\n        return key;\n\n    }\n\n```\nThen I wrote my license:\n\n```\n using (StreamWriter sw = new StreamWriter(File.Open(\"key.dat\", FileMode.Create), Encoding.Unicode))\n        sw.Write(Key(\"Tom\"));\n\n```\nBut it fails. I set a breakpoint to see what the output from CodeCrypt() and the SHA512 hash was, and saw this:\n\nCodeCrypt: 8dmVQYHqap7MbFngePjLSxvaC9kVgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==\nSHA512: 8dmVQYHqap7MbFngePjLSxvaC9/VgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==\n\nThe 27th character differs in these outputs and I just don't understand why. What am I missing here?\n\nThanks in advance.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "242",
  "tags": [
    "decompilation"
  ],
  "user": "tom982",
  "time": "Feb 8, 2016 at 21:59",
  "comments": [
    {
      "user": "blabb",
      "text": "may be you have some problems implementing the mid thingy  powershell returns this for \"Tom\"  [convert]::ToBase64String(([system.security.cryptography.SHA512Managed]::Create(\"SHA512\")).ComputeHash([Text.encoding]::Unicode.GetBytes(\"Tom\"))) 8dmVQYHqap7MbFngePjLSxvaC9/VgaDiyR2p550IFO2kzGAuC9yWufBs5LZGbKeR/KAFGVTBb47z4sa686eBTA==",
      "time": null
    },
    {
      "user": "tom982",
      "text": "Thanks for your reply. In the answer below, someone managed to identify that this was an encoding issue with my usage of Convert.ToChar().",
      "time": null
    },
    {
      "user": "blabb",
      "text": "yeah saw that answer by mike nice find indeed",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Your algorithm calculates the correct byte for each character of the base64 encoded hash, however your implementation of that byte's string encoding is not correct.\n\nConvert.ToChar() simply casts the byte to a char.\n\nVB's Strings.Chr() converts the byte to unicode, using the system's current default code page. This is most likely Windows-1252 for US/Western Europe.\n\nFor bytes 0x00-0x7F, UTF-8 and Windows-1252 have the same binary representation. But things are different for bytes 0x80-0xFF, and it just so happens that the / character is the only character XOR'd to a value greater than 0x7F (it's 0x83).\n\nIn Windows-1252, 0x80-0xFF represent single-byte extended characters.\nIn UTF-8, these extended characters require two bytes of storage: 0x01 0x92.\n\nThis means that the crackme is buggy, because the license file depends on the system's character encoding (which could change).  The license file should have used unicode consistently.\n\nTo fix your code, replace Convert.ToChar() with Encoding.Default.GetString()\n\n```\nvar test = Encoding.Default.GetString(\n               new[] { (byte)((\"AoRE\"[num2 - 1] ^ hash[i - 1]) + 6) });\n\n```\nEdited to add\n\nOne thing I want to point out is that a char in C# is 2 bytes and stores a 16-bit unicode character (unlike C where a char is 1 byte). This is why casting and using the default encoding are different operations.\n\n",
      "votes": "8",
      "user": "Mike Haboustak",
      "time": "Feb 9, 2016 at 15:20",
      "is_accepted": true,
      "comments": [
        {
          "user": "tom982",
          "text": "Thank you so much! This worked perfectly. My first thought was that it was an encoding problem and I was careful to make everything unicode, but obviously missed this line. Thanks again for restoring my sanity.",
          "time": null
        }
      ]
    }
  ]
}