{
  "title": "trying to understand this mov memory[register] instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/26146/trying-to-understand-this-mov-memoryregister-instruction",
  "content": "Windows 10, IDA Home, 64bit application compiled with Visual Studio.\n\nI'm reverse engineering a crackme and i found this instruction :\n\n```\n  mov     cl, byte_51B000[eax]\n  mov     byte_51B018[edx], cl \n\n```\nin these 2 byte_ location are null terminated strings.\n\nI'm not sure to understand exactly what it's doing. Is it like an array index where byte_* is the array and [eax/edx] is the index ? i can't find this kind of syntax anywhere, is it IDA specific ?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "62",
  "tags": [
    "ida"
  ],
  "user": "ker2x",
  "time": "Oct 21, 2020 at 12:37",
  "comments": [
    {
      "user": "Jongware",
      "text": "This indeed is the same as [eax+byte_51B000].",
      "time": null
    },
    {
      "user": "ker2x",
      "text": "@usr2564301 thank you :)",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "Not adding an answer because I do not know if this is an IDA specific idiom. But – from memory – you can change the display using the hotkey for \"Change offset type\" (usually o).",
      "time": null
    }
  ],
  "answers_data": []
}