{
  "title": "how to does this instruction work: `mov qword ptr [rbp-0x30], 0x4020c5`",
  "link": "https://reverseengineering.stackexchange.com/questions/25778/how-to-does-this-instruction-work-mov-qword-ptr-rbp-0x30-0x4020c5",
  "content": "The following is the code snippet (shown partially) I have:\n\n```\nq = strrchr(resolved, '/');     /* given /home/misha/docs.txt, q now pts to the last slash */\n    if (q != NULL) {\n      p = q + 1;                   /* p points to docs.txt */\n\n      if (q == resolved)\n        q = \"/\";\n      else {\n        do {\n          --q;\n        } while (q > resolved && *q == '/');\n\n```\nThe generated output with -S flag using objdump:\n\n```\n401789:       e8 7a fb ff ff          call   401308 <strrchr>\n  40178e:       48 89 45 d0             mov    QWORD PTR [rbp-0x30],rax\n    if (q != NULL) {\n  401792:       48 83 7d d0 00          cmp    QWORD PTR [rbp-0x30],0x0\n  401797:       0f 84 12 01 00 00       je     4018af <fb_realpath+0x22d>\n      p = q + 1;                   /* p points to docs.txt */\n  40179d:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017a1:       48 83 c0 01             add    rax,0x1\n  4017a5:       48 89 45 d8             mov    QWORD PTR [rbp-0x28],rax\n\n      if (q == resolved)\n  4017a9:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017ad:       48 3b 85 e0 fe ff ff    cmp    rax,QWORD PTR [rbp-0x120]\n  4017b4:       75 0a                   jne    4017c0 <fb_realpath+0x13e>\n        q = \"/\";\n  4017b6:       48 c7 45 d0 c5 20 40    mov    QWORD PTR [rbp-0x30],0x4020c5\n  4017bd:       00\n  4017be:       eb 33                   jmp    4017f3 <fb_realpath+0x171>\n      else {\n        do {\n          --q;\n  4017c0:       48 83 6d d0 01          sub    QWORD PTR [rbp-0x30],0x1\n        } while (q > resolved && *q == '/');\n  4017c5:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017c9:       48 3b 85 e0 fe ff ff    cmp    rax,QWORD PTR [rbp-0x120]\n  4017d0:       76 0b                   jbe    4017dd <fb_realpath+0x15b>\n  4017d2:       48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]\n  4017d6:       0f b6 00                movzx  eax,BYTE PTR [rax]\n  4017d9:       3c 2f                   cmp    al,0x2f\n  4017db:       74 e3                   je     4017c0 <fb_realpath+0x13e>\n\n```\nNow, I have a question about q = \"/\"; instruction. q is defined as a char* and as seen from this examples, it contains a value returned by strrchr fucntion. Then it is assigned to a string - q = \"/\"; further in the code. Now, the instruction which represents that in assembly is - mov QWORD PTR [rbp-0x30],0x4020c5. I have very hard time understanding this instruction. Now, my understanding is that, it supposed to move the string \"/\" to the location pointed by q. But how does it know the location pointed by q? i.e. rbp-0x30 is a location on the stack where q is stored. And this location is supposed to contain the address of the object where q is pointing. But, I interpret mov QWORD PTR [rbp-0x30],0x4020c5 as move string 0x4020c5 to rbp-0x30 i.e. the address of q. That is where I am confused as that location is supposed to contain the address and not the string.\n\nThanks for reading and your help is appreciated.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "assembly",
    "x86",
    "x86-64"
  ],
  "user": "R4444",
  "time": "Aug 29, 2020 at 17:49",
  "comments": [],
  "answers_data": [
    {
      "content": "mov QWORD PTR [rbp-0x30],0x4020c5 means exactly \"move 0x4020c5 to a memory location rbp-0x30 and treat this number as qword\" (8 - byte number).\n\nBut q is at the memory location rbp - 0x30, so anything you write into that address, will be written into q. So, the number 0x4020c5 was written into q. The number 0x4020c5 is not a string itself - it's a memory address of a string (just a pointer). So q points to a string at 0x4020c5, hence q[0] == '/' and q[1] == NULL.\n\nAnd that's the behaviour that we expect from instruction q = \"/\" - it doesn't change the memory the q points at, but changes the q itself.\n\n",
      "votes": "4",
      "user": "bart1e",
      "time": "Aug 29, 2020 at 18:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "enedil",
          "text": "Nitpick: q[1] == 0 and coincidentally q[1] == NULL, but 0 and NULL should not be confused.",
          "time": null
        }
      ]
    },
    {
      "content": "you can add some print address of variable debug aid in your source to get a grip of these addresses\n\nsee the disassembly of line no 5 in the paste below\n\n```\n#include <stdio.h>\n\nint main (void) {\n    char * q;\n    q = \"/\";\n    printf(\"%p  \n\",&q);\n}\n\n```\ndisassembly\n\n```\nslashaddr!main:\n    3 01141000 55              push    ebp\n    3 01141001 8bec            mov     ebp,esp\n    3 01141003 51              push    ecx\n    5 01141004 c745fc90011801  mov     dword ptr [ebp-4], (01180190)\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Aug 29, 2020 at 21:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "R4444",
          "text": "thanks so much @blabb",
          "time": null
        }
      ]
    }
  ]
}