{
  "title": "Finding \"free\" inside libc.so",
  "link": "https://reverseengineering.stackexchange.com/questions/10687/finding-free-inside-libc-so",
  "content": "I extracted the libc.so.6 from within a vulnerable image used for exploitation purposes. I open up the shared object in IDA and I look at the symbols inside the \"Exports\" tab. I find \"free\"; upon visiting the function however, its body seems to do something rather different from what I'd expect from a dlmalloc free implementation. What am I missing?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "158",
  "tags": [
    "linux",
    "shared-object"
  ],
  "user": null,
  "time": "Aug 22, 2015 at 12:00",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Are there any version symbols in your libc.so? Maybe you're not dealing with the standard glibc, but a very old version, or Âµlibc, or even a version that has custom implementations of some functions, trading memory footprint for speed, or vice versa.",
      "time": null
    },
    {
      "user": "user1743",
      "text": "The machine has a dynamically compiled binary that has a vulnerable binary(that can be exploited due to how dlmalloc works). ldd shows that the binary depends on this shared object.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I could not figure out why this problem happens. However, I just dumped \"free\" from within gdb, opened it up in IDA and it works just fine.\n\n",
      "votes": "0",
      "user": null,
      "time": "Aug 25, 2015 at 16:35",
      "is_accepted": true,
      "comments": []
    }
  ]
}