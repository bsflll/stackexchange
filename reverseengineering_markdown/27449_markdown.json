{
  "title": "Ghidra headless + bindiff (binexport)",
  "link": "https://reverseengineering.stackexchange.com/questions/27449/ghidra-headless-bindiff-binexport",
  "content": "I am working on patch diffing using ghidra + bindiff (specifically, binexport), and am looking for advice on using bindiff with Ghidra headless.\n\nida_haru does essentially everything that I need, but for IDA instead of Ghidra. Specifically, I am wondering if something like the _make_BinExport() function exists for Ghidra.\n\n```\ndef _make_BinExport(self, target, ida_path):\n        binexp_path = self._get_db_path_noext(target) + '.BinExport'\n        #binexp_path = os.path.splitext(target)[0] + '.BinExport'\n        if not self._clear and os.path.exists(binexp_path):\n            self._dprint('already existed BinExport: {}'.format(binexp_path))\n            return 0\n\n        #cmd = [ida_path, '-A', '-S{}'.format(g_exp_path), '-OExporterModule:{}'.format(binexp_path), target]  # the .BinExport filename should be specified in 4.3\n        cmd = [ida_path, '-A', '-S{}'.format(g_exp_path), '-OBinExportModule:{}'.format(binexp_path), target]\n        #print cmd\n        \n        self._dprint('getting BinExport for {}'.format(target))\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = proc.communicate()\n        return proc.returncode\n\n```\nThings I have done:\n\nI'm missing:\n\nAdvice and insights appreciated!\n\n",
  "votes": "1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ghidra",
    "bin-diffing",
    "tool-bindiff"
  ],
  "user": "Kayla0x41",
  "time": "Apr 12, 2021 at 22:14",
  "comments": [
    {
      "user": "R4444",
      "text": "did you check this project? github.com/ubfx/BinDiffHelper",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have posted my solution GitHub https://github.com/Kayla0x41/ghidraheadless_binexport\n\nThe key is the following lines of code (to be used with Ghidra headless):\n\n```\naddr_set = currentProgram.getMemory()\nf = File(program_name + '.BinExport')\nexporter = BinExportExporter() #Binary BinExport (v2) for BinDiff\nexporter.export(f, currentProgram, addr_set, monitor)\n\n```\nThis line is used to export a sample_name.BinExport file for each sample analyzed, where sample_name is the name of the sample.\n\n",
      "votes": "0",
      "user": "Kayla0x41",
      "time": "Jun 17, 2021 at 19:05",
      "is_accepted": true,
      "comments": [
        {
          "user": "Kayla0x41",
          "text": "Updated link: github.com/BiSECT-Temp/ghidraheadless_binexport",
          "time": null
        }
      ]
    },
    {
      "content": "There are some additional imports required:\n\n```\nfrom com.google.security import binexport\nimport java.io.File as File\n\n```\nwithout which the codes will not work.\n\n",
      "votes": "0",
      "user": "Winston",
      "time": "Jul 12, 2021 at 7:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}