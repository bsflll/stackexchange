{
  "title": "Get Multiple Function Names for One Address in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/20074/get-multiple-function-names-for-one-address-in-ida",
  "content": "I am trying to get a complete list of symbol names in IDA. All functions that return names operate primarily around looking at particular addresses and there corresponding entries in the symbol table, instead of looking at all the entries of the symbol table itself.\n\nThis is okay until you have symbols that are at the same address, such as constructors and destructors for a class C1 and C2, D1 and D2 (as described in the C++ ABI). The traditional methods get_func_name(ea) and GetFunctionName(ea) don't work, because they only give one result for a given address.\n\nIf multiple symbol names point to the same effective address, how can I get all of those symbol names?\n\nEdit:\n\nConsider the following code:\n\n```\nclass apple{\n    public:\n        apple(int a);\n        ~apple();\n};\n\napple::apple(int a){}\napple::~apple(){}\n\nint main(){\n    apple a = apple(1);\n    return 0;\n}\n\n```\nCompiling this with g++ -o apple apple.cpp to get our executable and then running readelf -s gives us, among other entries:\n\n```\n53: 0000000000400554    11 FUNC    GLOBAL DEFAULT   14 _ZN5appleD1Ev\n57: 0000000000400546    14 FUNC    GLOBAL DEFAULT   14 _ZN5appleC1Ei\n65: 0000000000400546    14 FUNC    GLOBAL DEFAULT   14 _ZN5appleC2Ei\n70: 0000000000400554    11 FUNC    GLOBAL DEFAULT   14 _ZN5appleD2Ev\n\n```\nNotice how C1 and C2 have the same address.\n\nNow, using IDAPython, we can use idautils.Names() (as suggested) or any of the other methods previously discussed, in code like this:\n\n```\nimport idautils\nfor name in idautils.Names():\n    print name\n\n```\nand we get results looking like, among other information that's not relevant, this:\n\n```\n(4195654L, '_ZN5appleC2Ei')\n(4195668L, '_ZN5appleD2Ev')\n\n```\nNotice how it only finds the C2 and D2 constructor / destructor, but not C1 and D1. Is it possible to 'find' the C1 and D1 constructor / destructor with IDA?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "785",
  "tags": [
    "ida",
    "idapython",
    "elf"
  ],
  "user": "theTheodidact",
  "time": "Dec 10, 2018 at 13:59",
  "comments": [],
  "answers_data": [
    {
      "content": "IDA, while loading ELF file, will choose only one name and use if for specific address, because there's no way for IDA to have multiple names for on address. So you'll have to invent something to extend IDA loader for elf files, to make it somehow store the alternative names for the address.\n\n",
      "votes": "3",
      "user": "Anton Kukoba",
      "time": "Dec 10, 2018 at 14:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "theTheodidact",
          "text": "Well that's a bummer.. thanks for the answer though! It's helpful to know there isn't a way forward apart from extending the loader.",
          "time": null
        }
      ]
    },
    {
      "content": "Maybe going the other way might be a workaround/solution?\n\nYou can enumerate all names with idautils.Names() which returns a list of tuples (ea, name). Then you just filter for the function address and have all possible names for that location I assume.\n\n",
      "votes": "1",
      "user": "Johann Aydinbas",
      "time": "Dec 9, 2018 at 2:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "theTheodidact",
          "text": "Nice idea, but still doesn't work--see edit with code and results example.",
          "time": null
        }
      ]
    }
  ]
}