{
  "title": "Implementing call into compiled, undocumented, C DLL; divining exported function prototype",
  "link": "https://reverseengineering.stackexchange.com/questions/11217/implementing-call-into-compiled-undocumented-c-dll-divining-exported-function",
  "content": "I've been attempting to build my own implementation of Nvidia's Surround functionality by using their DLLs within a more reliable and automatic system. I'm pretty new to this; I've been a programmer for a while, but I've never had need to do any reverse engineering like this, so apologies if I'm being profoundly dumb.\n\nSo far I have managed the following:\n\nWhere I'm stuck:\n\nWhen I was using API monitor, I couldn't seem to catch any direct calls to the function I was looking at (NvCplApiDisableSpan), I only ever found it in the stack before a wndproc call. Also, the break points that I placed in and around that function never get triggered.\n\nMy current thoughts are that I'll need to \"see\" the assembly of the function being called so I can get to the next step of figuring out how to shape my calls to that function correctly.\n\nI thought perhaps that the function was being called by a different process, having being triggered to do so by nvcplui.exe, but according to procexp that's not the case; nvcplui.exe is the only process using that dll.\n\nAny advise you have for me would be greatly appreciated; I'm not averse to doing my homework, but I can't see a way forward without maybe getting hold of a copy of IDA, however, that's a little outside my budget.\n\n",
  "votes": "3",
  "answers": 0,
  "views": "249",
  "tags": [
    "dll",
    "functions"
  ],
  "user": "Glitcher",
  "time": "Oct 30, 2015 at 23:20",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "Have you considered using the evaluation version of IDA Pro?",
      "time": null
    }
  ],
  "answers_data": []
}