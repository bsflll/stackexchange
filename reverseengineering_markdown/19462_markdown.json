{
  "title": "Working with 16bit offsets and segments in Radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/19462/working-with-16bit-offsets-and-segments-in-radare2",
  "content": "I have a simple DOS COM program which I want to analyse using Radare2:\n\n```\n  USE16\n  ORG 100h\n\n  mov ax, cs\n  dec ax\n  mov ds, ax\n\n  mov dx, message+10h\n  mov ah, 9\n  int 21h\n  ret\n\nmessage:   db \"Hello there!$\"\n\n```\n(Use yasm or echo \"jMhIjti6HQG0Cc0hw0hlbGxvIHRoZXJlISQ=\" | base64 -d > test.com to compile it to a binary.)\n\nWhen I load the binary using r2 -b16 test.com radare shows that I'm at 0000:0000.\n\nHow can I tell radare that the actual program address should be 0000:0100?\n\nAlso how can I tell radare that the offset loaded into the dx register points to message? In other words, can I tell radare that dx is an offset using a segment that starts at 0000:0100 - 0x10?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "radare2",
    "dos"
  ],
  "user": "zxxc",
  "time": "Sep 26, 2018 at 18:15",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use -m 0x100 to load the binary at a specific address, as can be seen in r2 -h output:\n\nSo you can do something like this:\n\n```\n$ r2 -m 0x100 -b 16 test.com\n\n[0000:0100]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0000:0100]> pdf\n╭ (fcn) fcn.00000100 13\n│   fcn.00000100 ();\n│           0000:0100      8cc8           mov ax, cs\n│           0000:0102      48             dec ax\n│           0000:0103      8ed8           mov ds, ax\n│           0000:0105      ba1d01         mov dx, 0x11d                ; 285\n│           0000:0108      b409           mov ah, 9\n│           0000:010a      cd21           int 0x21                     ; '!'\n╰           0000:010c      c3             ret\n\n```\nRegarding your second question, the bytes that interpreted as mov dx, 0x11d are ba1d01. As you can see, 0x01d1 is hard coded so r2 won't add message + to it.\n\nYou can create a flag using f str.message 13 @ 0x10d but it would probably not  be helpful in your case.\n\n",
      "votes": "3",
      "user": "Megabeets",
      "time": "Sep 26, 2018 at 18:51",
      "is_accepted": true,
      "comments": [
        {
          "user": "zxxc",
          "text": "Thanks. I tried -m before but it felt a bit hacky. I thought there is a way of manually defining sections/segments where I could specify what is the base address of the section and then instruct r2 to use that section after 0000:0103.",
          "time": null
        },
        {
          "user": "zxxc",
          "text": "Interestingly, when I do r2 -m 0x110 -b 16 test.com, then f str.message 13 @ 0x11d and then aa, the message will be displayed in the comment and the disassembly becomes mov dx, str.message. Not a solution since code offsets are wrong but it feels so close. :)",
          "time": null
        },
        {
          "user": "zxxc",
          "text": "Thanks, I accepted the answer since I think you covered everything and nobody seems to know better. Looks like radare2 in its current version is not the right tool to disassemble old 16-bit DOS executables.",
          "time": null
        }
      ]
    }
  ]
}