{
  "title": "Why are these 0-byte jumps used as a delay?",
  "link": "https://reverseengineering.stackexchange.com/questions/18981/why-are-these-0-byte-jumps-used-as-a-delay",
  "content": "I'm debugging an old PC BIOS and see a lot of what I assume are delay sequences, using 0-byte jump instructions (EB 00 = jmp short $+2).\n\n\n\nWhy this particular instruction? I'm guessing it must have some desirable timing properties.\n\nThe CPU in question is a 386SX clocked at 16MHz.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "168",
  "tags": [
    "disassembly",
    "x86",
    "bios"
  ],
  "user": "pesco",
  "time": "Aug 5, 2018 at 10:59",
  "comments": [],
  "answers_data": [
    {
      "content": "Here's a fragment from the leaked AWARD BIOS source code (file COMMON.MAC):\n\n```\nSIODELAY    MACRO               ; SHORT IODELAY\n        jmp short $+2\n        ENDM\n\nIODELAY     MACRO               ; NORMAL IODELAY\n        siodelay\n        siodelay\n        ENDM\n\nWAFORIO     MACRO               ; NORMAL IODELAY\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        siodelay\n        ENDM\n\nNEWIODELAY      MACRO\n        out 0ebh,al              \n            ENDM  \n\n```\nSo apparently this was intended specifically as a delay after I/O operations, presumably to give the potentially slow hardware time to process the request from the CPU.\n\nI also found this in the OS/2 programming FAQ:\n\nIt's not quite the pattern in your snippet so could be just an instance of cargo-cult copypasting.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Aug 5, 2018 at 18:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "pesco",
          "text": "Cool, thanks, that helps. The part about flushing the pipeline actually confirms what I suspected. Though I still wonder how the proper reasoning would go, rather than \"everybody does this and it seems to work\".",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "you could try asking on retrocomputing, maybe people there know more about early hardware",
          "time": null
        },
        {
          "user": "gilm",
          "text": "I remember that I used to nop my way through and that worked fine for me. My only guess is that jmp flushes cache, plus, it takes many more clock ticks per bytes that just a single nop. They probably want to save ROM bytes yet still have lots of cycles spared. It only seems a mystery because you know there are better ways than jmp+$2 :)",
          "time": null
        }
      ]
    }
  ]
}