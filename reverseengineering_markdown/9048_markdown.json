{
  "title": "Unpacking abo1.exe advanced buffer overflow challenge from www.binary-auditing.com",
  "link": "https://reverseengineering.stackexchange.com/questions/9048/unpacking-abo1-exe-advanced-buffer-overflow-challenge-from-www-binary-auditing-c",
  "content": "It seems abo1.exe advanced_buffer_overflow challenge is packed, I've tried to unpack it, but I am still beginner in unpacking.It seems it is packed manually. I've also tried OllyDump and ImortREC.\n\nCan any body give me a hand on unpacking it?\nHere is the file : http://www.binary-auditing.com/binary-auditing-training-package.zip\n\npassword : fdcd2ff4c2180329053650f3075d39f4\n\n",
  "votes": "1",
  "answers": 1,
  "views": "336",
  "tags": [
    "unpacking",
    "packers"
  ],
  "user": "Vlad",
  "time": "Jun 2, 2015 at 11:32",
  "comments": [
    {
      "user": "blabb",
      "text": "md5 hash of the file  22702fbfc5b198080aca8f0be6f2df0b is not packed its a strcpy vuln challenge",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The file abo1.exe (MD5: 22702FBFC5B198080ACA8F0BE6F2DF0B) doesn't look packed to me. Looking at the PE structure we can see the entry point is in the .text section and the file has a few imports:\n\n\n\nDisassembling this entry point shows some code that looks normal. The main function gets the command line arguments and passes them to another function  before terminating:\n\n\n\nLooking at this other function we can see a strcpy to a stack destination buffer with an attacker supplied source buffer.\n\n\n\nThe challenge from the training perspective is to exploit this stack based buffer overflow in order to gain arbitrary code execution (which is beyond the scope of this answer).\n\n",
      "votes": "3",
      "user": "QAZ",
      "time": "Jun 2, 2015 at 11:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vlad",
          "text": "IDA gives me this error at start: The import segment seems to be destroyed.... IDA just show five imports.",
          "time": null
        },
        {
          "user": "Vlad",
          "text": "Can u give me more guide on this 3 line: mov     eax, [ebp+arg_4] ||||  ||||                      add     eax, 4      ||||                    mov     ecx, [eax]",
          "time": null
        },
        {
          "user": "QAZ",
          "text": "The getmainargs docs (bit.ly/1Fpd03y) tell us the Argv parameter will be \"An array of null-terminated strings representing command-line arguments entered by the user of the program.\" The \"mov eax, [ebp+arg_4]\" pulls the ptr to the array of pointers. EAX now points to first entry in the array. The \"add eax, 4\" advanced to the second entry in the array (as according to the docs, the first entry is \"the command with which the program is invoked\"). The \"mov ecx, [eax]\" get the second pointer in the array which is a pointer to the first user supplied cmd line arg.",
          "time": null
        }
      ]
    }
  ]
}