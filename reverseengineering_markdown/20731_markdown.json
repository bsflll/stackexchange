{
  "title": "Find functions names in .init_array section in unstripped library",
  "link": "https://reverseengineering.stackexchange.com/questions/20731/find-functions-names-in-init-array-section-in-unstripped-library",
  "content": "Is it possible to find out all instances of static initialization in a elf dynamic library.\nI can dump the array of function pointers in .init_array section via objdump command like this.\nobjdump -s -j .init_array <libname.so>\n\nIs there a way to map these function pointers back to function names. I have unstripped library with debug symbols.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "947",
  "tags": [
    "elf",
    "objdump",
    "gcc",
    "debugging-symbols"
  ],
  "user": "Arpit Aggarwal",
  "time": "Feb 27, 2019 at 15:22",
  "comments": [
    {
      "user": "sudhackar",
      "text": "should be one liner in radare2. r2 -AA libname.so -qc \"pxr @ sym..init_array\" ",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "Gave it some time and wrote this for i in `objdump -s -j .init_array libname.so | tail -n 1 | xxd -r | xxd -e -g 8 | tail -n 1 | grep -Eo \"[0-9a-f]{16}\"`; do nm libname.so | grep $i; done. It will break. Looks like this",
      "time": null
    },
    {
      "user": "Arpit Aggarwal",
      "text": "@sudhackar the radare2 command above gives this error -\" |ERROR| Invalid command 'pxr @ sym..init_array' (0x70)\"",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "This is 3 months old, they might have changed the command. Let me check and confirm.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This can easily be achieved with radare2. I have this version installed\n\n```\n[rese] r2 -v\nradare2 4.6.0-git 25072 @ linux-x86-64 git.4.4.0-486-ga5e8cf0c9\ncommit: a5e8cf0c9bd94e5f8d679e281c486584f23251e3 build: 2020-07-28__11:41:47\n\n```\nEnable .init_array in a program as such\n\n```\n#include <stdio.h>\nstatic void f1(void) __attribute__((constructor));\nstatic void f2(void) __attribute__((constructor));\nstatic void f3(void) __attribute__((constructor));\n\nvoid f1() { puts(__FILE__ \":f1\"); }\nvoid f2() { puts(__FILE__ \":f2\"); }\nvoid f3() { puts(__FILE__ \":f3\"); }\n\nint main(int argc, char **argv) {\n    puts(__FILE__ \":main\");\n    return 0;\n}\n\n```\nWhich works as expected\n\n```\n[rese] make test\ncc     test.c   -o test\n[rese] ./test\ntest.c:f1\ntest.c:f2\ntest.c:f3\ntest.c:main\n\n```\nUse the pxr to annotate while dumping as hex\n\n```\n[rese] r2 -AA -qq -c 'pxr 0x30 @ sym..init_array' test \n0x00200da0 0x0000000000000680   ........ @loc.__init_array_start 1664 (.text) sym.frame_dummy entry.init0 R X 'push rbp'\n0x00200da8 0x000000000000068a   ........ 1674 (.text) sym.f1 sym.f1 R X 'push rbp'\n0x00200db0 0x000000000000069d   ........ 1693 (.text) sym.f2 sym.f2 R X 'push rbp'\n0x00200db8 0x00000000000006b0   ........ 1712 (.text) sym.f3 sym.f3 R X 'push rbp'\n0x00200dc0 0x0000000000000640   @....... @loc.__init_array_end 1600 (.text) sym.__do_global_dtors_aux sym.__do_global_dtors_aux R X 'cmp byte [rip + 0x2009c9], 0'\n0x00200dc8 0x0000000000000001   ........ @obj._DYNAMIC 0 loc.imp._ITM_deregisterTMCloneTable R X 'jg 0x47'\n\n```\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Nov 9, 2020 at 17:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}