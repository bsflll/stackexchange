{
  "title": "Infer function parameter types from caller argument type in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/31025/infer-function-parameter-types-from-caller-argument-type-in-ida",
  "content": "So i have the following code:\n\n```\nstruct my_struct_t var1;\nfun(var1);\n\n```\nI don't have the symbols for fun's parameter type but since it's called with an argument with type my_struct i would want IDA to infer that type. I know it's not always that straight forward, (e.g. multiple callers each calling with different arguments) but it sounds like a basic feature to propagate that kind of type information and maybe give the choice to the user to select the type when there are multiple options.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "141",
  "tags": [
    "ida",
    "ida-plugin"
  ],
  "user": "xar3",
  "time": "Oct 22, 2022 at 8:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Hex-Rays will propagate type information \"upwards\", i.e., it will use type information from called functions or global variables to set the types of local variables (including arguments) in calling / referencing functions. It does not propagate type information \"downwards\", i.e., take actual parameter type information from calling functions and apply it to the formal parameters of called functions. So, in brief, the answer to your question is \"no\". There are several reasons for this, some of them architectural, others relating to the fact that it's actually unsafe to do it in many circumstances.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Oct 22, 2022 at 9:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "xar3",
          "text": "with my limited experience, it looks like by default the downwards type propagation would be useful. So even though i agree that this is not suitable to be a default analysis option, i think it's still a useful functionality to have on demand. (probably wouldn't be much difficult to have a plugin to do that).  ps interested to know what are the architectural reasons that may interfere with the downward propagation of types",
          "time": null
        }
      ]
    }
  ]
}