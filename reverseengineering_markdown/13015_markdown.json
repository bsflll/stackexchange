{
  "title": "Find cryptography used by iOS applications by analyzing ARM assembly in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/13015/find-cryptography-used-by-ios-applications-by-analyzing-arm-assembly-in-ida",
  "content": "I am looking at the disassembly for iOS applications and need to figure out a way to analyze the cryptography used. I have tried using different plugins for IDA such as FindCrypt, IDAsignsrch, and IDAScope but none of them accurately analyze the cryptography. More specifically for iOS, developers use cryptography by using Apple's Common Crypto library. I have found calls made to methods in the library but what I really need are the function arguments for these methods that specify which crypt alg is used, length of the key, initialization vectors, etc. Backtracking to get the function arguments seems too complicated so is there any other way I can go about getting this information? Thanks for any help.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "698",
  "tags": [
    "ida",
    "idapython",
    "arm",
    "ida-plugin",
    "ios"
  ],
  "user": "Eccmms",
  "time": "Jul 8, 2016 at 14:05",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "\"I have found calls made to methods in the library but what I really need are the function arguments for these methods that specify which crypt alg is used, length of the key, initialization vectors, etc. Backtracking to get the function arguments seems too complicated\" - If by \"backtracing\" you mean following cross-references to the cryptographic library functions, then 1) you're lucky that those cross-references exist and 2) it's the best way to find the arguments passed to those functions.",
      "time": null
    },
    {
      "user": "Eccmms",
      "text": "Sorry, there were no cross references. I meant starting from the call to the method and going backward in the disassembly to try to figure out what registers were loaded with before the call was made. However, this has turned out to be more difficult than I thought, especially in static analysis",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "\"I meant starting from the call to the method and going backward in the disassembly to try to figure out what registers were loaded with before the call was made.\" - Yes, that's the correct way to find out what function arguments are passed to the cryptographic library functions.",
      "time": null
    },
    {
      "user": "Vitaly Osipov",
      "text": "Read up on Objective C internals - particularly message passing. blog.zynamics.com/2010/04/27/objective-c-reversing-i reverse.put.as/wp-content/uploads/2011/06/â€¦. Perhaps do some debugging jeffhui.net/2014/03-reverse-engineering-objective-c.html",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "FindCrypt and IDASignsrch are both plugins used to scan the binary itself for cryptographic algorithm signatures. Non of them try to map API functions (and certainly not for iOS).\nThey work by searching for specific constants and structures nearly always used for specific cryptographic related initialization and hardcoded values.\n\nIDAScope Is a tool that can label functions based on the APIs they're using, so it kind of does what you're looking for but is limited to windows executables and APIs. \n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Oct 19, 2016 at 21:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}