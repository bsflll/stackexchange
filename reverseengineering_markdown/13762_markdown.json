{
  "title": "What values do I use for Freescale ARM imx233 μP in IDA Pro “memory layout dialog” for RAM and ROM?",
  "link": "https://reverseengineering.stackexchange.com/questions/13762/what-values-do-i-use-for-freescale-arm-imx233-%ce%bcp-in-ida-pro-memory-layout-dialo",
  "content": "What is the memory address information I should plug into IDA for this BIN file?\n\nGOAL:\n\nTo disassemble a BIN file extracted from firmware.sb\n\nThis BIN file contains the low level board initialization, SDRAM clocks, power, Interrupt Controller, LCD, duart, and more.\n\nI need the values passed to the LCD, duart and other to know what exact hardware my board uses and to know if firmware for an earlier board will work on a later board.\n\nI will use these values to create linux drivers at a later date. (LCD)\n\nRef this question.\n\nBACKGROUND INFO:\n\nBoard initialization sequence:\n\nPart of the this BIN file is loaded into the on chip RAM (OCRAM) for minimal board init. \nThis code is executed and will init the rest of the board most important for this question the SDRAM.\nMore of this BIN file will load into the SDRAM then execute and init the rest of the board. This BIN will then load and pass control to the OS. \n\nBasically a boot loader.\n\nHere is a simple example of this using my custom u-boot and kernel. Oversimplified and information removed for brevity. Actual BIN file info.\n\n```\nLOAD    addr=0x00001000 len=0x00001ef4\nCALL    addr=0x00001000 arg=0x00000000\nLOAD    addr=0x40002000 len=0x000368ec\nLOAD    addr=0x40600000 len=0x002ed3c8\nLOAD    addr=0x40a00000 len=0x00002b1e\nCALL    addr=0x40002000 arg=0x00000000\n\n```\nThis is part of the memory map for this μP.\n\n```\nOCRAM 0x00000000 - 0x00007FFF 32KB\nSDRAM 0x40000000 - 0x5FFFFFFF 512MB\nPeripherals 0x80000000 - 0xBFFFFFFF\n\n```\nExample of Peripherals:\n\n```\nCLKCTRL 0x80040000 - 0x80041FFF\nDBGUART 0x80070000 - 0x80071FFF\n\n```\nThe μP is a Freescale mx23 or imx233.\n\nThis board has 16MB SDRAM 0x40000000 - 0x01000000\n\nIn the “ARM architecture options” dialog I set:\n\nBase architecture as ARMv5TEJ.\n\nVFP instructions as NONE\n\nThumb instructions as Thumb\n\nIn the “Disassembly memory organization” dialog I am unsure what to set.\n\nIs the RAM section my SDRAM, 0x40000000 - 0x01000000?\n\nIs the ROM section my OCRAM, 0x00000000 - 0x00007FFF?\n\nWhat about Input file loading address, file offset, loading size?\n\nWould the loading size be the 16MB of my SDRAM?\n\nWhere does the peripherals addresses go?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "524",
  "tags": [
    "ida",
    "disassembly",
    "arm",
    "memory"
  ],
  "user": "jc__",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "I'll make this brief:\n\nYes, this is correct. But AFAIK not too important. IDA will create different segment for different code parts based on this input, but will handle fine which ever values are entered.\n\nYes, this is again correct but again AFAIK it's not too important.\n\nfor low-level code executed, and especially for boot loaders, the loading address should be specified in the chip's datasheet.\n\nYep. IDA will add the RAM address space as an additional segment for you.\n\nIDA doesn't explicitly support peripherals, you'll need to include those in your RAM definition or create a different segment manually after the file is loaded. You'll need to manually specify what peripheral is exposed at each address either by adding different segments for different peripherals or by creating and naming variables/structures. \n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Oct 19, 2016 at 21:32",
      "is_accepted": true,
      "comments": []
    }
  ]
}