{
  "title": "How to figure out which library a native JNI function is calling?",
  "link": "https://reverseengineering.stackexchange.com/questions/14503/how-to-figure-out-which-library-a-native-jni-function-is-calling",
  "content": "I'm trying to perform static analysis on Android framework code, and I'm coming across some Java methods that are calling JNI functions. How do I figure out which native libraries these functions reside in?\n\nThanks.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "android",
    "libraries"
  ],
  "user": "user1118764",
  "time": "Jan 26, 2017 at 9:05",
  "comments": [],
  "answers_data": [
    {
      "content": "I haven't touched Android in almost a year but IIRC:\n\nAll JNI libraries need to be loaded from Java side first e.g.\n\n```\nSystem.loadLibrary(\"hello-jni\");\n\n```\nwhich translates to invoke-virtual in compiled Java.\n\nAlso, IDA Pro identifies fully qualified names in .sos it decompiles, so you will be able to figure out Java names for those JNI functions. See also http://www.hexblog.com/?p=809.\n\nThis tool may also be of help, although it's rather old https://github.com/maaaaz/jnianalyzer.\n\n",
      "votes": "3",
      "user": "Vitaly Osipov",
      "time": "Jan 28, 2017 at 6:42",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "It's been a while, but there should be a static code block with the .so they are calling. I would need to disassemble a file using a shared library. \n\nIt will resemble:\nhttps://stackoverflow.com/questions/8437106/java-jni-call-to-load-library\n\n",
      "votes": "2",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "user1118764",
          "text": "Thanks. In the example given, would the static library be libndkfoo.so?",
          "time": null
        }
      ]
    }
  ]
}