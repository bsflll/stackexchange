{
  "title": "AT&T XOR argument at radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/9265/att-xor-argument-at-radare2",
  "content": "Recently I faced with strange (in my opinion) behavior of radare2.\n\nI have been reading the Artificial truth blog post about Hacking bits with this crackme.\n\nIn an article Julien used Intel syntax,\nbut I choose AT&T.\n\nSo I started disassemble crackme:\n\n```\n$ r2 ./crackme.03.32\n\n```\nSet syntax to intel, block size to 10 bytes and seek to needed address and print disassemble:\n\n```\n[0x00010020]> e asm.syntax = intel\n[0x00010020]> b 10\n[0x00010020]> s 0x0010112\n[0x00010112]> pd\n\n```\nOutput was:\n\n```\n       0x00010112    80f2ac         xor dl, 0xac\n       0x00010115    eb02           jmp 0x10119\n\n```\nBut when I changed syntax to ATT:\n\n```\n[0x00010112]> e asm.syntax = att\n[0x00010112]> pd\n\n```\nI received that:\n\n```\n       0x00010112    80f2ac         xorb $-0x54, %dl\n       0x00010115    eb02           jmp 0x10119\n\n```\nIn the source code of crackme we can find that value of argument is 0xac (xor dl, 0xac).\n\nWhy 80 f2 ac translate to the same opcodes, but with different arguments for AT&T and Intel syntax.\n\nWhy 0xac became -0x54?\n\n```\n$ r2 -version\nradare2 0.10.0-git 8247 @ linux-little-x86-64 git.0.9.9-148-gd5f2661\ncommit: d5f2661cbe1a32bc26490bd7a1864ef45907aaea build: 2015-06-26\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "radare2",
    "disassemblers",
    "crackme"
  ],
  "user": "Alex Bender",
  "time": "Dec 16, 2017 at 16:48",
  "comments": [
    {
      "user": "Jongware",
      "text": "It's a matter of notation of a single byte only. The byte value 0xAC can be written as -0x54.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "You should learn about representation of signed and unsigned values; this will make it clear immediately. Interpreting the first bit of 0xac as a sign bit, not a value bit, will result in -0x54, as 0xac+0x54=0x100.",
      "time": null
    },
    {
      "user": "Alex Bender",
      "text": "Thanks for explaining! I have thought about signed and unsigned values.",
      "time": null
    },
    {
      "user": "Maijin",
      "text": "Now here is the current output after changing the syntax with att in radare2.   xorb $0xac, %dl",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It was signed and unsigned question.\n\nThe way to change the signedness is by negating it, which is NOTing all bits of that number and incrementing it by 1\n\n```\n>>> 256 - (~(-0x54)+1)\n172\n>>> hex(172)\n'0xac'\n>>> \n\n```\n",
      "votes": "1",
      "user": "Alex Bender",
      "time": "Jul 1, 2015 at 11:30",
      "is_accepted": true,
      "comments": []
    }
  ]
}