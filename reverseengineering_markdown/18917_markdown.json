{
  "title": "Binwalk does not show anything when process binary",
  "link": "https://reverseengineering.stackexchange.com/questions/18917/binwalk-does-not-show-anything-when-process-binary",
  "content": "I tried use Binwalk to extract content of binary firmware image dumped from flash, but Binwalk does not show anything.\nI tried commands\n\n```\nbinwalk -Me file.bin\nbinwalk --dd='.*' file.bin\n\n```\nstrings command  against a firmware image not show any human readable strings. Entropy command returns Falling entropy edge (0.689208) Or possibly, binary image is neither encrypted nor compressed?\n\n\n\n",
  "votes": "3",
  "answers": 1,
  "views": "5k",
  "tags": [
    "binary-analysis",
    "firmware",
    "embedded",
    "binwalk"
  ],
  "user": "minto",
  "time": "Jul 29, 2018 at 20:32",
  "comments": [],
  "answers_data": [
    {
      "content": "I tried:\n\n```\n$> binwalk --opcodes Image1.bin\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n348           0x15C           MIPS instructions, function epilogue\n516           0x204           MIPS instructions, function epilogue\n652           0x28C           MIPS instructions, function epilogue\n780           0x30C           MIPS instructions, function epilogue\n1160          0x488           MIPS instructions, function epilogue\n1268          0x4F4           MIPS instructions, function epilogue\n2208          0x8A0           MIPS instructions, function epilogue\n....\n\n```\nSo, it really looks like a raw MIPS binary to me. I guess that this firmware is for a router or something similar.\n\nYou should just force your disassembler to take this file as raw MIPS and process it.\n\nNote: A 'raw binary' is just a file with raw opcodes in it without any specific recognizable format (such as ELF, PE or Mach-O). Raw formats are just intended to be mapped directly in memory without going through an operating system first. It is very common in the embedded software World.\n\n",
      "votes": "5",
      "user": "perror",
      "time": "Jul 30, 2018 at 6:27",
      "is_accepted": true,
      "comments": [
        {
          "user": "minto",
          "text": "Yes, its firmware for  eMTA modem, MIPS cpu. What linux based disassembler tool will be suitable for this? (for windows platform, I assume its IDA Pro, for sure). Is there way to convert raw opcodes into readable assembly code?",
          "time": null
        },
        {
          "user": "perror",
          "text": "I can advise you to read the answers of this SO question. It gives several good hints to solve your problem. And, you do not really need to convert the raw format into something else once you identified it. Just disassemble it. :)",
          "time": null
        },
        {
          "user": "minto",
          "text": "In this case, the other parts of firmware (bootloader, Perm.Nonvol, Dynamic Nonvol) also should be raw binary file format, ot they can be other format?  At least one of them, Dynamic nonvol, have readable strings.",
          "time": null
        },
        {
          "user": "perror",
          "text": "It might be that the firmware is two parts: one part for a memory dump of the system and another part which will be the file-system which lies in a read-write mass memory. But, this is pure speculation, I do not have enough information to say more than wild guesses.",
          "time": null
        },
        {
          "user": "minto",
          "text": "For the other files, Bootloader and Permnonvol files have the same format, binwalk --opcodes show they are raw binary files with opcodes. Dynnonvol file is different, there are no opcodes, binwalk --dd='.*'  extracted 6 files. So Flash Device regions have different format in my case.",
          "time": null
        }
      ]
    }
  ]
}