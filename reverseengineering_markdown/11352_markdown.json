{
  "title": "Locate compressed section of executable",
  "link": "https://reverseengineering.stackexchange.com/questions/11352/locate-compressed-section-of-executable",
  "content": "I am playing with Philips DICOM Viewer - download version R3.0 SP3. This viewer can display DICOM information (press F9). Since the displayed strings are not stored in the DICOM file itself, I suspect they are stored somewhere in the binary (standalone binary, no extra DLL loaded):\n\n\n\nHowever I could not find it using strings and or:\n\n```\n$ binwalk -M -X -e PmsDView.exe\n\n```\nFollowed by:\n\n```\n$ grep -r Manufacturer _PmsDView.exe.extracted\n\n```\nand\n\n```\n$ find _PmsDView.exe.extracted/ -exec strings -n 12 -e l {} \\; | grep Manufacturer\n\n```\nI picked Manufacturer since this is one of the longer string. Also I only used -e s and -e l as they make the more sense (eg: strings -e l PmsDView.exe and strings -e s PmsDView.exe). I've run -e b, -e B and -e L but they did not return anything.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "127",
  "tags": [
    "binary-analysis",
    "encryption"
  ],
  "user": "tibar",
  "time": "Nov 19, 2015 at 8:15",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "Have you tried searching for Manufacturer as a wide-character Unicode string?",
      "time": null
    },
    {
      "user": "Neitsa",
      "text": "Also, you could check the imported DLLs (recursively) and see if one of them contain one of the searched strings. Another solution is to scan the whole process address space with a debugger ( I think process explorer can also do that). As stated by @JasonGeffner, search for char or wchar strings. If you still can't find it then it's probably concealed in some way.",
      "time": null
    }
  ],
  "answers_data": []
}