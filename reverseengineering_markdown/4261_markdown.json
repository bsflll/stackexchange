{
  "title": "Difference between 'add' and 'adds' in ARM assembler?",
  "link": "https://reverseengineering.stackexchange.com/questions/4261/difference-between-add-and-adds-in-arm-assembler",
  "content": "I am starting to look a bit more precisely at ARM assembler and I looked up some dumps from objdump. I saw a lot of instruction (add is not the only one) with an extra s at the end (adds, subs, ...).\n\nI looked a bit to the ARM documentation and it seems to mean something significant, but I can't figure out exactly what (the documentation I found about it seemed extremely obscure to me).\n\nHas somebody some insight on what is the meaning of this extra s added at the end of some ARM instructions ?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "60k",
  "tags": [
    "arm",
    "gas"
  ],
  "user": "perror",
  "time": "May 4, 2014 at 18:30",
  "comments": [],
  "answers_data": [
    {
      "content": "Usual ADD doesn't update flags.\nADDS does.\nSee better documentation at arm infocenter.\nAs it wrote there:\n\n",
      "votes": "11",
      "user": "perror",
      "time": "May 5, 2014 at 22:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "Iwillnotexist Idonotexist",
          "text": "@perror If you want another concrete example, consider a loop while(--i){...}. One way to implement it is to have sub reg, #1 followed by an explicit compare to zero (which will set the Z zero flag when reg becomes 0), then a predicated branch. With subs reg, #1 the Z flag is implicitly updated, therefore no explicit comparison is required.",
          "time": null
        }
      ]
    },
    {
      "content": "The extra s character added to the ARM instruction mean that the APSR (Application Processor Status Register) will be updated depending on the outcome of the instruction.\n\nThe status register (APSR) contain four flags N, Z, C and V which means the following:\n\nMore information about the condition flags in the ARM architecture can be found here.\n\n",
      "votes": "13",
      "user": "perror",
      "time": "May 4, 2014 at 22:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "One additional point: depending on the disassembler/settings, the Thumb-1 instructions (short, 16-bit encodings for a subset of instructions) may be displayed without the S suffix, even though they, in fact, do update flags. See Table 4-9 here.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Is it because it is the default behavior of the instruction in thumb mode, or the opcodes are really different but the mnemonic does not show up the difference ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "The former. In Thumb-1, all ALU instructions set the flags and so I guess the creators dropped the suffix as \"unnecessary\". With Thumb-2, full equivalence with the ARM set was achieved and you can choose if you want to set flags or not. Thus the move to UAL and explicit S suffix.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Shouldn't the explanation to N == 0 be The result is greater than or equal to 0 ... ?",
          "time": null
        },
        {
          "user": "w s",
          "text": "@perror There is another tricky thing about flags which is called flexible second operand: C flag can be updated in some cases even if S suffix does not exist in the command, see infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/â€¦ for more details",
          "time": null
        }
      ]
    }
  ]
}