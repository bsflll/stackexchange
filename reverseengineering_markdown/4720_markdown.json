{
  "title": "Would OllyDbg help recognizing the passed parameters between the caller and the calle?",
  "link": "https://reverseengineering.stackexchange.com/questions/4720/would-ollydbg-help-recognizing-the-passed-parameters-between-the-caller-and-the",
  "content": "The calling convention used in assembly differs depending to the compiler, so I need to know \nHow ollydbg2.01 would help me to recognize the parameters passed from caller to the callee and the values returned back from the callee to the caller for a CALL instruction.\nThe assembly which I am working on is compiled by Microsoft visual C++.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ollydbg"
  ],
  "user": "was.chm",
  "time": "Jun 27, 2014 at 7:36",
  "comments": [],
  "answers_data": [
    {
      "content": "Ollydbg already shows the parameters passed to a functions in the CPU window. This of course works for standard functions such as printf , CreateFileA which Ollydbg knows about. For example see the image below. The parameters to CreateWindowExA are shown.\n\n\n\nNow the return value of a function is usually kept in register eax in x86. So just note the value after the function returns. Of course in case of a hand-coded assembly the return value may be anywhere.\n\n",
      "votes": "2",
      "user": "0xec",
      "time": "Jun 27, 2014 at 8:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "was.chm",
          "text": "But in general case like CALL 0049E6D0, Dose OllyDbg help recognizing passed parameters and returned values between caller and callee parts of assembly?",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@user3778418 In a general case ollydbg cannot guess the number & types of parameters passed to a function. You need some other program for that like IDA which have better analysis capabilities.",
          "time": null
        }
      ]
    }
  ]
}