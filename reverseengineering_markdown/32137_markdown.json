{
  "title": "missing caller function in call stack",
  "link": "https://reverseengineering.stackexchange.com/questions/32137/missing-caller-function-in-call-stack",
  "content": "I'm trying to intercept and locate tcp packets in memory through debugging of windows 10. Suppose I set a break point at TcpReceive, the call stack looks like this\n\n```\nkd> kc\n# Call Site\ntcpip!TcpReceive\ntcpip!TcpNlClientReceiveDatagrams\ntcpip!IppProcessDeliverlist\ntcpip!IppReceiveHeaderBatch\ntcpip!IppReceivePackets\ntcpip!FlpReceiveNonPreValidatedNetBufferListChain\ntcpip!FlReceiveNetBufferListChainCalloutRoutine\nnt!KeExpandKernelStackAndCalloutInternal\nnt!KeExpandKernelStackAndCalloutEx\ntcpip!NetioExpandKernelStackAndCallout\ntcpip!FlReceiveNetBufferListChain\nNDIS!ndisMIndicateNetBufferlistsToOpen\nNDIS!ndisMTopReceiveNetBufferLists\n\n```\nHere are the problems:\n\n```\nbp tcpip!TcpReceive\nbp tcpip!IppReceiveHeaderBatch \".echo header batch;r;k;g\" //display function arguments\n\n```\nBut the output of IppReceiveHeaderBatch just above TcpReceive won't necessarily be the actual upstream of TcpReceive. How do I know which output is the real upstream?\n\n```\ntypedef struct _NET_BUFFER {\n      NET_BUFFER *Next;\n      MDL        *CurrentMdl;\n      ULONG      CurrentMdlOffset;\n...\nPHYSICAL_ADDRESS DataPhysicalAddress;\n...\n}\n\n```\n",
  "votes": "0",
  "answers": 0,
  "views": "35",
  "tags": [
    "windbg",
    "networking"
  ],
  "user": "anonymous bear",
  "time": "Aug 6, 2023 at 16:02",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "What you might be seeing is that kc is walking the frame pointers, and it's likely that the function being called does not use a frame pointer. This results in a partial view of the callstack. However, if you go to your Disassembly Options in IDA and enable display of the \"Stack Pointer\". This will show you the distance to the top of the frame for any given instruction address. Essentially if you add this value to @rsp, that should shift your stack to the actual return address. You can then use that address to get the next frame size and repeat until you get to the actual top of the stack.",
      "time": null
    },
    {
      "user": "Ali Rizvi-Santiago",
      "text": "Solution to point 2 might be slow, but you can use 2 conditional breakpoints. Within the conditions of those breakpoints, set a temporary register once the correct path is taken and clear the temporary register with another breakpoint on exit. Then for the address you're trying to monitor, only perform your desired actions when that temporary register is actually set.",
      "time": null
    }
  ],
  "answers_data": []
}