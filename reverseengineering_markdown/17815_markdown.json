{
  "title": "Is it possible to set breakpoints relatively to the memory block in x64dbg or a similar debugger?",
  "link": "https://reverseengineering.stackexchange.com/questions/17815/is-it-possible-to-set-breakpoints-relatively-to-the-memory-block-in-x64dbg-or-a",
  "content": "Some of my breakpoints perfectly survive multiple restarts.\n\nBut many interesting parts of the code I am debugging have different locations in memory after a restart. It seems the reason is, that the code is loaded into a different memory segment, after a restart. And it further looks like the parts I am looking for are at least absolutely positioned to the memory block they are in.\n\nCLARIFICATION:\nI suspect that the code which stays in place during restarts is a statically linked library and the code which switches places is the main program itself.\nDoes this make sense?\n\nIs there a way in x64dbg(or a similar debugger) to account for that and set memory breakpoints relatively to the block they are loaded into?\n\nAnd why do some Parts of the code always get loaded into the same block while others are randomly loaded into one memory segment?\n\nEDIT:\nIs there furtheremore a method to somehow label constant ponters that are relatively positioned to the memory segment? It would be really helpful to directly recognize which constant im looking on instead of recalculating by hand which one in comparison to the last start it it.\n\nEDIT3:\n\nHere a screenshot for clarification:\n\n\nYou can see that the adresses stay the same on the lower two bytes, but differ on the higher 2 bytes according to the memory block they are loaded into.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "memory",
    "dynamic-analysis",
    "breakpoint",
    "x64dbg"
  ],
  "user": "Maurice Döpke",
  "time": "Mar 27, 2018 at 10:35",
  "comments": [
    {
      "user": "blabb",
      "text": "you mean  some part of code inside a single binary gets loaded at different addresses ?  or you mean the dlls gets loaded at different address if it is later then it could be due to aslr  (address space layout randomisation)",
      "time": null
    },
    {
      "user": "Maurice Döpke",
      "text": "I can not tell that for sure, but i suspect the code that always gets loaded in the same place is a statically linked library, while the programm itself is randomly loaded into some memory block.  This is what aslr does if i got that correcly, isn't it?",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "In x64dbg you can see which module you’re in when you’re looking at the code. Everything is stored in the database in relative addresses so ASLR should not be a problem. Could you show a screenshot of the debugger when looking at this code?",
      "time": null
    },
    {
      "user": "Maurice Döpke",
      "text": "Sure, I added a screenshot to the original question.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "does 43exxx 438xxx belong to your main module the one you are loading or attaching to ? if yes  then that address change is because of aslr",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "windows > greater than vista implement a security feature called ASLR (Address Space Layout Randomisation ) \n\nthis feature randomly changes the Base Address of the binary each time it is restarted  this prevents  constant address dependent exploits obsolete \n\nfor dlls the base address is changed per boot  \n\neven though the address space is randomised there can be clashes and the binary might be loaded in the same base address several times \n\nsuppose you have code like this \n\n```\n#include <stdio.h>\n#include <windows.h>\nvoid main (void) {\n    char buff[MAX_PATH] = {0};\n    GetModuleFileName(NULL,buff,MAX_PATH);\n    printf(\"%p\\t%s  \n\" , GetModuleHandle(NULL) , buff);\n    HMODULE hntdll = GetModuleHandle(\"kernel32\");\n    GetModuleFileName(hntdll,buff,MAX_PATH);\n    printf(\"%p\\t%s  \n\" , hntdll , buff);\n}\n\n```\nyou can see the binary is loaded in the same address 3 times consecutively while changing its base the fourth time  also you can see the dll is always loaded in same address on all 4 restarts (this address may change on rebooting )\n\n```\nC:\\Users\\printbaseaddr>printbaseaddr.exe\n00C80000        C:\\Users\\printbaseaddr\\printbaseaddr.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n\nC:\\Users\\printbaseaddr>printbaseaddr.exe\n00C80000        C:\\Users\\printbaseaddr\\printbaseaddr.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n\nC:\\Users\\printbaseaddr>printbaseaddr.exe\n00C80000        C:\\Users\\printbaseaddr\\printbaseaddr.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n\nC:\\Users\\printbaseaddr>printbaseaddr.exe\n003D0000        C:\\Users\\printbaseaddr\\printbaseaddr.exe  <<<<<<<<<\n774E0000        C:\\Windows\\system32\\kernel32.dll\n\n```\nyou can see if your binary is ASLR enabled using any pe file explorer \none way is to use dumpbin /headers and look for Dynamic Base in Dll Characteristics\n\n```\nC:\\Users\\printbaseaddr>dumpbin /headers printbaseaddr.exe | grep  Dyna\n                   Dynamic base\n\n```\nyou can patch this in the file to diasble aslr for an executable  and you will notice the exe is always loaded in its prefferred base which for an exe is normally 0x400000\n\n```\n:\\>fc printbaseaddr.exe printbaseaddrmod.exe\nComparing files printbaseaddr.exe and PRINTBASEADDRMOD.EXE\n00000156: 40 00\n\n:\\>xxd -s 0x154 -l 10 printbaseaddrmod.exe\n0000154: 0300 0081 0000 1000 0010                 ..........\n\n:\\>xxd -s 0x154 -l 10 printbaseaddr.exe\n0000154: 0300 4081 0000 1000 0010                 ..@.......\n\n:\\>echo off\nfor /L %i in (1,1,10) do printbaseaddrmod.exe\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n00400000        printbaseaddr\\printbaseaddrmod.exe\n774E0000        C:\\Windows\\system32\\kernel32.dll\n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Mar 27, 2018 at 19:30",
      "is_accepted": true,
      "comments": [
        {
          "user": "mrexodia",
          "text": "ASLR is fully supported by x64dbg and is not the problem the op is having...",
          "time": null
        },
        {
          "user": "blabb",
          "text": "@mrexodia thanks the op didnt comeback so i do not know what was the problem i just suggested  ASLR as a possible cause to eliminate if x64 supports ASLR fully then i guess the problem lies elsewhere",
          "time": null
        }
      ]
    }
  ]
}