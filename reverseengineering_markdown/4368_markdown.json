{
  "title": "Experiences from reverse engineers in detecting recursive calls",
  "link": "https://reverseengineering.stackexchange.com/questions/4368/experiences-from-reverse-engineers-in-detecting-recursive-calls",
  "content": "I have absolutely no experience in reversing real-world binary codes, so I wonder how the obfuscated codes prevent reversers. I doubt that the reverses always find some ways to understand what are hiden inside, even for heavy obfuscated codes, but I do not know how they think about them. \n\nThat partly comes from this question in detecting recursive calls where both two answers give a static approach: looking recursively in the functions called by the original function whether it is re-called.\n\nIn somehow theoretical manner, this approach can be bypassed if the programmer uses the continuation passing style, that is because there is no more explicit \n\n```\ncall myself\n\n```\ninside the code. The following program I have implemented to test out this idea:\n\n```\ntemplate<typename T> \nauto obf_if(bool p, T a, T b) -> T\n{\n  T* pts[4] = { &a, &b, &a + 1, &b + 1 };\n  return *pts[int{ p }];\n}\n\ntemplate<typename T>\nauto obf_cmp(T a, T b) -> int\n{\n  return obf_if<int>(a == b, 0, obf_if<int>(a < b, -1, 1));\n}\n\nusing obf_strcmp_t = std::function < int(char*, char*) >;\n\nauto h_strcmp(obf_strcmp_t func, char* str1, char* str2) -> int\n{\n  return obf_if<int>((*str1 == *str2) && (*str1 != 0), \n                     func(str1 + 1, str2 + 1), obf_cmp<int>(*str1, *str2));\n}\nusing h_strcmp_t = decltype(h_strcmp);\n\nobf_strcmp_t y_strcmp(h_strcmp_t func)\n{\n  return std::bind(func, std::bind(y_strcmp, func), \n                   std::placeholders::_1, std::placeholders::_2);\n}\n\nint main(int argc, char* argv[]) \n{\n  char str1[] = \"ab\"; \n  char str2[] = \"ac\";\n  return y_strcmp(h_strcmp)(str1, str2);\n}\n\n```\nThis is a trivial implementation of strcmp using the y combinator. But this piece of codes leads to the fact that there is no more direct call inside the implementation (even no conditional jump), except the first one \n\n```\ny_strcmp(h_strcmp)(str1, str2)\n\n```\nAs an amateur, I have even loaded the binary code (compiled by VS2013) in IDA and see a big mess where calls are replaced by \n\n```\n call edx\n\n```\nHowever because I write it I know how to detect this (e.g. the implicit recursive calls are detected by tracing the arguments passed into the function, the value of edx can only be one of passed arguments), and I think so do the reversers. So my question is:\n\nSuppose that you do not know this trick, does it prevent you in understanding the binary code?\n\nNB Because w-s has suggested that this question is only an opinion-based one, so it will be closed sooner or later, but I very appreciate if someone gives an idea.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "446",
  "tags": [
    "ida",
    "obfuscation",
    "deobfuscation",
    "functions"
  ],
  "user": "Ta Thanh Dinh",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "w s",
      "text": "Strictly speaking it is opinion based question. Less strictly speaking there is dynamic analysis. Such kind of obfuscation (as almost any other obfuscation) will not prevent anyone to read this code because there is no obfuscation that can prevent reading the code at all, obfuscation just makes code reading slower.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "Thanks a lot w-s, I am very agree with you. That leads me to this question because when I read some very nice approachs in code obfuscation, the question in my head is always: if the reversers know this trick, does it prevent them anymore.",
      "time": null
    },
    {
      "user": "w s",
      "text": "It is much more psychological question then question of reverse engineering. I know a lot of reversers that will stop reversing any code when they see any kind of obfucation but I also know some reverse engineers that will not recognize here any obfuscation and will define this code as \"over-designed\" and over C++ed :)",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "I got your joke w-s :D. I think that I should delete this psycho question before it is down-voted by many people and I lose all of my reputation points.",
      "time": null
    },
    {
      "user": "gandolf",
      "text": "This will only slow down a dedicated reverser, but because the code itself is not hiding its functionality in any way, it can be reversed given enough time. And like the answer below, there are ways to identify recursive functions, no matter how elusive the programmer may try to be. stack based traces are a good way to spot this.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Hook the start of all functions that you're concerned might be recursive with EasyHook. Have your hooking function log the function address in the thread local storage (to avoid synchronisation issues) then look at either a full stack back trace or just the calling function. Recursive functions will be obvious.\n\n",
      "votes": "1",
      "user": "offbyseveral",
      "time": "May 23, 2014 at 4:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "Thanks a lot offbyseveral, I am very appreciated your answer. I am very agree with you that this obfuscation trick (which bypasses the static analysis) can be bypassed easily by the dynamic analysis (in particular, nothing is hidden inside a \"session\" of dynamic analysis). But the problem is the dynamic analysis is quite bad in detecting which might \"potentially become\" recursive calls.",
          "time": null
        },
        {
          "user": "offbyseveral",
          "text": "To do what you want to do rigorously is impossible. Imagine a program that only becomes recursive when a structure is full of data which correctly decrypts using a key. Or which is based on a specific password. Static analysis isn't going to cut it for all but the most trivial programs.",
          "time": null
        },
        {
          "user": "offbyseveral",
          "text": "Imagine that a program does call edx based on data lookup in a vtable that has been modified by an attacker with an exploit to become recursive. To solve your problem rigorously you'd need to first show that the program state can't be modified in this way and then you'd be a very rich person indeed!",
          "time": null
        },
        {
          "user": "Ta Thanh Dinh",
          "text": "Thanks a lot offbyseveral, you are absolutely correct. The question is not rigorous (coincidentally I have just used the word \"rigorous\" to reponse the comment of gandolf) so it is impossible to give a precise answer. I just want to receive your precious ideas.",
          "time": null
        }
      ]
    }
  ]
}