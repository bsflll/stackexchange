{
  "title": "Putting instructions in placeholder code IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/11925/putting-instructions-in-placeholder-code-ida",
  "content": "In IDA, is it possible to convert placeholder data into a code segment?\n\nIn the end of the library I am working with, there is an uninitialized segment starting at 016AAB31.\n\nThe hex and actual data (which is question mark strings), however, does not allow me to put arm asm instructions into it, using the edit feature. It claims that it cannot convert the \"????\"s to hexadecimal integers. \n\nIs there a way to extend the code segment to let me add more code, or any other way to do this? Thanks\n\n",
  "votes": "1",
  "answers": 2,
  "views": "482",
  "tags": [
    "ida",
    "assembly",
    "arm",
    "segmentation"
  ],
  "user": "Aspire",
  "time": "Feb 3, 2016 at 0:32",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Your uninitialized segment is probably a .bss segment, which basically means \"I need 123456 bytes in ram, but because they are all initialized to 0, I won't inflate the executable by repeating 123456 zero bytes\". So there's no space present in your file, and even if there was, your library relies on these bytes being 0, so you can't put anything there.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Edit > Segments > Create Segment\n\n",
      "votes": "1",
      "user": "Zach Riggle",
      "time": "Feb 3, 2016 at 16:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "Aspire",
          "text": "I have tried this but it still does not let me do so, with the same error. In addition, even if I am able to get the code into there, (and label the segment as pure code) it does not transfer into instructions, only the hex characters that make up the instructions.",
          "time": null
        },
        {
          "user": "Zach Riggle",
          "text": "Have you actually told IDA that it's code?  e.g. Select the address and hit C or invoke idc.MakeCode?",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Create segment has to do with segmentation registers in (mainly old, 16 bit) x86 code, and arm/thumb switches on arm, but nothing with executable file segments.",
          "time": null
        }
      ]
    },
    {
      "content": "I would recommend against doing this in IDA. IDA is not a patching tool. Although there are plugins for IDA that implement this, there are far better choices for executable format editors, that are better equipped to add additional sections and manupulate data in it, which seems to be what you're after.\n\nI suspect IDA won't be able to patch in the modified/new section even if you managed to create it. I think you'll have to use another tool for the job.\n\nSince you're working with ARM assembly, I'll assume you're working on an executable in the elf format. For that, simply using objcopy --add-section would do the trick. You might also want to take a look at --set-section-flags afterwards.\n\nMore advanced tools include the eresi and radare projects. Both capable and designed to manipulate ELF executables to ease the work of a reverse engineer and/or security researcher.\n\n",
      "votes": "0",
      "user": "NirIzr",
      "time": "Oct 21, 2016 at 13:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}