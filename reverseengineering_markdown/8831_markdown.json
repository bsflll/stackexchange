{
  "title": "Processing a handle to a module",
  "link": "https://reverseengineering.stackexchange.com/questions/8831/processing-a-handle-to-a-module",
  "content": "I have found the following lines in a sample which I try to analyze. Here, are the lines:\n\n```\n   ....\n   push  afg.00401189       \"ntdll.dll\" \n   call  GetmoduleHandleW\n   neg   eax\n   sbb   eax, eax\n   neg   eax\n   RETN\n\n```\nSo, I do not understand the lines after the call instruction. We have sbb instruction between two neg-operations, but what can be the purpose of that. Can somebody explain that ? \n\nPS: Intuitively, I would say that at the end I have the handle to ntdll.dll in EAX...but the operations between the call and retn are very strange. I am confused.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "128",
  "tags": [
    "assembly"
  ],
  "user": "user3097712",
  "time": "May 6, 2015 at 22:25",
  "comments": [],
  "answers_data": [
    {
      "content": "The neg / sbb / neg code in your question is the equivalent of the following C code:\n\n```\neax = (eax != 0)\n\n```\nIn other words, the function returns GetModuleHandleW(\"ntdll.dll\") != NULL.\n\nThe neg / sbb / neg construct is explained in detail here:\n\nReversing: Secrets of Reverse Engineering, section A.2.8.1. Pure Arithmetic Implementations\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "May 7, 2015 at 3:21",
      "is_accepted": true,
      "comments": []
    }
  ]
}