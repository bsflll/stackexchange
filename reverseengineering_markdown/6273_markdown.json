{
  "title": "Right order of function arguments",
  "link": "https://reverseengineering.stackexchange.com/questions/6273/right-order-of-function-arguments",
  "content": "i have the following function with three arguments:\n\n```\n sub_602667B proc near \n\n arg_0 = dword ptr 4\n arg_4 = dword ptr 8\n arg_8 = dword ptr 0Ch\n\n push    [esp+arg_8]\n push    [esp+4+arg_4]\n push    15\n push    [esp+0Ch+arg_0]\n\n```\nThen I make the following sketch : \n\n```\n esp, ebp -> | Old EBP        |  +0\n             | Return Address |  +4\n             | Argument 1     |  +8\n             | Argument 2     |  +12\n             | Argument 3     |  +16\n\n```\nAnd now I have the following on my paper:\n\n```\n   push    [esp+arg_8]     => is Argument 2,( because esp + 12(=0Ch) = Argument 2\n   push    [esp+4+arg_4]   => is Argument 2,( because esp + 4 + 8 = Argument 2 )\n   push    15\n   push    [esp+0Ch+arg_0] => is Argument 3,( because esp + 12 + 4 = 16 = Argument 3\n\n```\nSo my question would be : Is that sketch ok? I wanted to ask because the point that Argument 2 is pushed twice and Argument 1 is not taken surprises me \n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "stack",
    "arguments"
  ],
  "user": "user3097712",
  "time": "Sep 21, 2014 at 13:41",
  "comments": [],
  "answers_data": [
    {
      "content": "Your code snippet does not contain push esp, ebp, so why would there be an \"old EBP\" on the stack? At the beginning of the function, your stack should look like this:\n\n```\nesp + 00 | return address\nesp + 04 | Argument 1 (arg_0)\nesp + 08 | Argument 2 (arg_4)\nesp + 0C | Argument 3 (arg_8)\n\n```\nAfter that, remember that esp changes after each push. IDA is already doing the maths for you and splitting the displacement into the +4 and +arg_4 parts â€” they represent \"balance esp back to its initial value\" and \"convert the remaining offset to a local variable\", respectively. The function is pushing exactly those variables which are referenced:\n\n```\npush    [esp+arg_8]      ; Argument 3\npush    [esp+4+arg_4]    ; Argument 2\npush    15\npush    [esp+0Ch+arg_0]  ; Argument 1\n\n```\nIf you want to find out more, you can highlight the [esp+4+arg_4] part in the disassembly and press Q to convert the displacement to a single number.\n\nThen go to Options > General... > Disassembly and enable the Display disassembly line parts: [x] Stack pointer setting. \n\nNow you see the difference between the esp value at the start of the function and the esp value in the current line.\n\nSubtract that difference from the displacement in the push, and you should get the right local variable.\n\n",
      "votes": "1",
      "user": "DCoder",
      "time": "Sep 21, 2014 at 14:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}