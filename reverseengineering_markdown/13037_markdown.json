{
  "title": "Nonsensical disassembled ARM instructions",
  "link": "https://reverseengineering.stackexchange.com/questions/13037/nonsensical-disassembled-arm-instructions",
  "content": "I have been tracing through my binary and converting it to C code so I can understand it easily. As I am going through the instructions and functions, I keep stumbling upon code that don't make sense. \nFor example:\n\n```\nROM:080004B8                 CMNNE.W         R4, #1\nROM:080004BC                 BEQ.W           loc_80007DE\n\n```\nThis code will never branch.\nAnother example:\n\n```\nSTRB.W          R0, [SP,#0x18+var_18] @ where var_18 is -0x18\n\n```\nWhich is similar to indexing an array in C like this \"array[5-5]\". Why is this happening? Is this the disassembler? A form of obfuscated code that is trying to frustrate me? A poor compiler? \n\n",
  "votes": "1",
  "answers": 1,
  "views": "397",
  "tags": [
    "ida",
    "arm"
  ],
  "user": "Tyler",
  "time": "Jul 15, 2016 at 13:50",
  "comments": [
    {
      "user": "w s",
      "text": "Is this code between functions ? Is it ARM or Thumb ?",
      "time": null
    },
    {
      "user": "Vitaly Osipov",
      "text": "It's been a while since I looked at ARM code, so I might be totally wrong - why are you saying your first example will never branch? if Z=1, CMNNE is not executed and BEQ branches; If Z=0, CMNNE is executed (testing R4) and BEQ would branch on the result.",
      "time": null
    },
    {
      "user": "Tyler",
      "text": "The first example is between functions and the second example is inside a function. It is Thumb. @VitalyOsipov you are correct. I have edited the post by removing that example.",
      "time": null
    },
    {
      "user": "Tyler",
      "text": "Here is a better example. A value from the stack is loaded to R0, shifted, and saved in R0 (the value in the stack does not get updated). The next line loads a different value from the stack which removes the shifted value from the line before. What is the point of these instructions that have no purpose?",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "IDA does this for you - intentionally. The reason is it keeps track of modifications of the stack pointer, and yet attempts to keep the (relative!) addresses of local variables the same, Quite helpful actually.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To expand on Rad Lexus' comment, which describes the situation very well but may not be understandable without an example:\n\nWithin a function, the stack pointer, in most cases, isn't constant. It may change when parameters for a function/method/subroutine are pushed, when the programmer uses things like alloca, and for other reasons as well, depending on the compiler and processor.\n\nThis makes tracking the position of arguments and local variables quite hard. For example, code like f(i++) may result in something like\n\n```\nmov r0, [sp, #8]     ; read the variable\nmov [sp], r0          ; put it on the argument stack\nsub sp, sp, #4        ; adjust the stack pointer\nadd r0, r0, #1        ; calculate the ++\nmov [sp, #12], r0    ; write back result\n\n```\nwhich is a version that makes the change to sp visible; normally, that change will be hidden in something like stmfd sp!, {r0}\n\nIn such cases, it's quite difficult to see that the \"read\" and \"write\" operations access the same address in memory while the sp value has changed.\n\nThis is why decompilers like IDA assign names to those locations - as an example, let's assume in my example the variable is named var_4 with a value of 4.\n\nNow IDA can emit\n\n```\nmov r0, [sp, var_4+#4]     ; read the variable\nmov [sp, var_4+#8], r0     ; write back result\n\n```\nwith var_4 hinting at \"the same variable\", and the #4/#8 at the offset from [sp] that needs to be added to var_4 in each of these cases.\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Jul 15, 2016 at 13:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}