{
  "title": "PPPoE username and password from ZTE ZXHN F680 V6",
  "link": "https://reverseengineering.stackexchange.com/questions/30309/pppoe-username-and-password-from-zte-zxhn-f680-v6",
  "content": "I'm trying to extract the PPPoE username and password from a ZTE ZXHN F680 V6 router. I have obtained several files from the router and can get access to other files if needed.  Here is where I'm at.\n\nI have obtained the cspd file after reading this Q&A.  I also have a config.bin file but was unable to determine any information from it using binwalk or strings commnads.  Both returned empty results and indicated high level of entropy.\n\nHere is a link to the files extracted from router.\n\nI assume that the PPPoE file will be in an encoded or encrypted or both .xml file.  So, my search in the cspd file for strings resulted in potentially useful information.\n\n```\n$ strings cspd | grep .xml\n/var/tmp/db_user_cfg.xml\nCP download xml doc failed!\n/etc/db_user_cfg.xml\nplease input cfg file(/proc/cfg/db_user_cfg.xml) eg.\n/var/tmp/db_cp_cfg.xml\n/var/tmp/db_reload_cfg.xml\n/var/tmp/db_backup_cfg.xml\n/etc/db_default_%s_cfg.xml\n/var/tmp/db_Decry_cfg.xml\n/var/tmp/usb_rst_cfg.xml\ndbc_mgr_file_xml.c\nat %d line of xml file\nsbsize(%d) xmlsize(%d)\n/userconfig/cfg/db_user_cfg.xml\n/etc/db_default_cfg.xml\n/userconfig/cfg/db_backup_cfg.xml\n\n```\nI think the best candidates for containing the PPPoE username and password are /userconfig/cfg/db_backup_cfg.xml,  /userconfig/cfg/db_user_cfg.xml and /etc/db_default_cfg.xml.\n\nI have checked those files using binwalk and it seems they are high level of entropy with only one section (no obvious header), so have been encrypted, not simply encoded:\n\n```\nbinwalk -E db_user_cfg.xml\n\nWARNING: Failed to import matplotlib module, visual entropy graphing will be disabled\n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n0             0x0             Rising entropy edge (0.954061)\n\n```\nI following the above linked post I have used Ghidra 10 to de-compile the cspd file and searched for these strings, as well as functions for decryption.  I found the following files:\n\nI think the most likely candidate to get a key for decryption is dbcCfgSetAesKey, but that's only because of the name of the function and the target .xml files have cfg in their names.\n\nThe body of the dbcCfgSetAesKey function is below.  It only accepts one variable and :\n\n```\nundefined4 dbcCfgSetAesKey(void *param_1)\n\n{\n  if (param_1 != (void *)0x0) {\n    memcpy(g_szMD5Key,param_1,0x20);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n```\nI searched Ghidra for g_szMD5Key and found there was only a Label with that name, no function. It appears to me that the above dbcCfgSetAesKey function is copying the config file AES key to a memory location to be accessed later by the decryption process.  They key may be some type of MD5 hash?\n\nMy questions are:\n\nI know my questions will be rather noob since I am just starting to learn reverse engineering / compiling.  I am fairly good with encryption and modes, but not create with Ghidra or C++.  If my question is much to simple and uninformed just let me know.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "5k",
  "tags": [
    "firmware",
    "router"
  ],
  "user": "I'm Root James",
  "time": "Apr 23, 2022 at 7:01",
  "comments": [
    {
      "user": "xax",
      "text": "Can you upload cspd file?",
      "time": null
    },
    {
      "user": "I'm Root James",
      "text": "@xax I have uploaded a zip file of the files extracted from the router.  There is also a directory tagparam with a p12 certificate, and config.bin.  All seem encrypted. drive.google.com/file/d/1UEV9xGcFIq4aQfRj-k9_uJx4CEPirykA/â€¦",
      "time": null
    },
    {
      "user": "xax",
      "text": "This config file using AES-256-CBC algorithm and deflate zlib compression. key_str = \"C1DB7A773d634602dc8c\", iv_str = \"ZTE%FN$GponNJ025\" -> key = sha256(key_str), iv = first 16byte of sha256(iv_str) -> key = 4a5e07466a0777eb2650bbd4fc85bb7498e3048d4219916c5f50576ad5c25bce iv    = 83197b65889558bb6723df979895bb36 Decrypt method in  function DecryByAESCBC and key_str C1DB7A773d634602dc8c I find from paramtag file. But this decrypt success only file db_backup_cfg.xml.",
      "time": null
    },
    {
      "user": "I'm Root James",
      "text": "Thanks for that info.  I assume that the zlib decompress must happen first because when I open the file as bytes in Python3 and check the length of the db_backup_cfg.xml file print(len(payload) % 16) the output is 8.  So the file is not padded the right length for  AES 256 CBC mode decryption.  But when I try to zlib decompress using python3, payload = zlib.decompress(payload) I get the error, zlib.error: Error -3 while decompressing data: incorrect header check.",
      "time": null
    },
    {
      "user": "xax",
      "text": "hex view You can use decode.py db_backup_cfg.bin db_backup_cfg.xml after decrypt or using my script using zcu zte_f608.py zte_f608.py --key-prefix C1DB7A773d634602dc8c --iv-prefix ZTE%FN$GponNJ025 db_backup_cfg.xml out.xml",
      "time": null
    }
  ],
  "answers_data": []
}