{
  "title": "What to look for in the ARM64 assembly of a Golang binary to find the list of kill signals that affect the binary execution?",
  "link": "https://reverseengineering.stackexchange.com/questions/26529/what-to-look-for-in-the-arm64-assembly-of-a-golang-binary-to-find-the-list-of-ki",
  "content": "I'm reverse engineering an ARM64 Golang binary built with musl and I've already detected kill -10,12,15 pid as the signals which interact with it, where 10 and 12 represent user-defined signals. I think there must be other signals as well and I wish to detect them. In particular, may there be other user-defined signals or only 2 SIGUSRs are available no matter what? Since signals are being sent to the binary during runtime I wanted to know if there are signature functions in Golang's runtime that may be imported in the binary and represent signal handling functionalities in the binary.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "88",
  "tags": [
    "arm64"
  ],
  "user": "Newbie",
  "time": "Dec 13, 2020 at 15:36",
  "comments": [],
  "answers_data": [
    {
      "content": "Traditionally only two signals are reserved for users - SIGUSR1 and SIGUSR2. But there are possibilities for others as well as mentioned here.\n\nI would check if the signals SIGUSR1 and SIGUSR2 does anything besides the obvious, like maybe call other subroutines.\n\n",
      "votes": "1",
      "user": "goofy",
      "time": "Dec 28, 2020 at 1:48",
      "is_accepted": false,
      "comments": []
    }
  ]
}