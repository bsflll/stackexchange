{
  "title": "How to specify stack-based return values in IDA Pro (GoLang)",
  "link": "https://reverseengineering.stackexchange.com/questions/18305/how-to-specify-stack-based-return-values-in-ida-pro-golang",
  "content": "tl;dr: I am reversing a GoLang 1.10 executable, compiled for Windows. I am trying to make IDA correctly recognize the calling convention.\n\nDetails: I am looking at an x86 executable where the following (nonstandard) calling convention is used. \n\nThe caller now has the return values and the arguments still in the local stack frame, the latter on top of the former, and cleans up. This is a GoLang 1.10 executable, but I am describing the calling convention that I am seeing here, I do not know any reference for this. If something about the GoLang calling convention in Windows compiled executables is known; I would be very interested in that as well.\n\nMore to the point however, I am looking for a way to make IDA correctly understand this calling convention. As an example, consider the following code:\n\n```\n test proc near                   ; test receives two arguments\n   sub     esp, 18h               ; create stack frame\n   mov     eax, [esp+1Ch]         ; argument 1 to test:\n   mov     [esp], eax             ;  moved to top of stack frame\n   mov     eax, [esp+20h]         ; argument 2 to test:\n   mov     [esp+4], eax           ;  moved second to top of stack frame\n   call    sub1                   ; call sub1(test_arg_1, test_arg_2)\n   mov     eax, [esp+14h]         ; retrieve return_value_1\n   mov     ecx, [esp+10h]         ; retrieve return_value_2\n   mov     [esp], ecx           \n   mov     [esp+4], eax\n   call    sub2                   ; call sub2(return_value_1, return_value_2)\n   movzx   eax, byte ptr [esp+8]  ; retrieve single return value\n   xor     eax, 1                 ; negate result\n   mov     [esp+24h], al          ; store result below arguments to test\n   add     esp, 18h               ; close stack frame\n   retn                           ; return\n\n```\nI tried to give sub1 more parameters:\n\n```\nint __cdecl sub1(int, int, int, int, int, int)\n\n```\nBut unfortunately, it is not reflected in the decompiled code that the last two \"arguments\" to this function are actually return values which are being passed on to sub2:\n\n```\nint __cdecl test(int a1, int a2)\n{\n  int v2; // ST10_4\n  int v3; // ST14_4\n  unsigned __int8 v4; // ST08_1\n  int esp_08; // [esp+8h] [ebp-10h]\n  int esp_0C; // [esp+Ch] [ebp-Ch]\n  int esp_10; // [esp+10h] [ebp-8h]\n  int esp_14; // [esp+14h] [ebp-4h]\n  void *retaddr; // [esp+18h] [ebp+0h]\n\n  sub1(a1, a2, esp_08, esp_0C, esp_10, esp_14);\n  sub2(v2, v3);\n  return v4 ^ 1;\n}\n\n```\nIn an attempt to make use of this advanced calling convention syntax, I also created a structure containing two 32 bit integer fields and declared sub1 as follows:\n\n```\nstruc_1 __usercall sub1@<0:^8.4,4:^12.4>(int, int)\n\n```\nI tried several variations of this, different offsets, also returning only a native type, but IDA 7.1 always crashed with the following message:\n\nIs there any good way or workaround to make IDA recognize this calling convention and accurately reflect it in the decompiled code?\n\nTo produce the above example, you can use the following test.go source file:\n\n```\npackage main\nimport \"os\"\n\nfunc sub2(x int, y int) bool { return x == y }\nfunc sub1(x int, y int) (int, int) { return y,x }\nfunc test(x int, y int) bool { return ! sub2(sub1(x,y)) }\n\nfunc main() {\n  test(1,2)\n  os.Exit(0)\n}\n\n```\nYou can compile it as follows (disabling optimization is important):\n\n```\nset GOARCH=386\ngo build -gcflags=-N -gcflags=-l test.go\n\n```\nIn IDA, the test function should be automatically renamed to main_test.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "x86",
    "calling-conventions"
  ],
  "user": "james",
  "time": "May 22, 2018 at 10:41",
  "comments": [
    {
      "user": "mrexodia",
      "text": "Since you appear to have the latest IDA and it crashes, you can probably contact support with this question.",
      "time": null
    },
    {
      "user": "james",
      "text": "A good idea, thanks. I was somewhat afraid to be using the syntax incorrectly, but I will ask them about it.",
      "time": null
    },
    {
      "user": "Anton Kukoba",
      "text": "Does it work if you declare it like this? int __cdecl test(int a1, int a2, int * return1, int * return2)",
      "time": null
    },
    {
      "user": "james",
      "text": "Dear @AntonKukoba, thanks for the idea, sadly it doesn't work. In that case, it just thinks that the arguments are int pointers rather than ints, nothing else changes.",
      "time": null
    },
    {
      "user": "Anton Kukoba",
      "text": "Can you give me a sample, I'd like to experiment",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have been in touch with IDA support and unfortunately, right now, there does not seem to be a good way to do this. IDA assumes in many cases that the return value of a function must be stored in a register. This is also the reason for the crash when trying to overrule this inherent assumption with scattered arguments.\n\n",
      "votes": "1",
      "user": "james",
      "time": "May 24, 2018 at 9:38",
      "is_accepted": true,
      "comments": []
    }
  ]
}