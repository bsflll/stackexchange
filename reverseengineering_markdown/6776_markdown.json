{
  "title": "Change a text in DOS executables [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/6776/change-a-text-in-dos-executables",
  "content": "We have a DOS executable program like to NC. How do we find and change a text or a ASCII art in it?\n\nI'm a newbie in reverse.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "dos"
  ],
  "user": "ali",
  "time": "10 years ago",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Hexdump it, disassemble it, find the text, change it. Your question is way too unspecific to be answered well.",
      "time": null
    },
    {
      "user": "ali",
      "text": "Which tool can help me? IDA Pro DOSBox Plugin? This Answer?",
      "time": null
    },
    {
      "user": "Spektre",
      "text": "@ali. some compilers have decompilers I saw borland TP7/TCPP versions that make the source code in Pascall/C++ but only for programs compiled by them of coarse. also forget about variable/function names they where auto-generated. for asm I thing NASM has also some disassembler in the full package but I could be wrong haven't use it in a looooong time",
      "time": null
    },
    {
      "user": "ali",
      "text": "Thank you @Spektre :)",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "Note that it's ok to ask about a specific system, as long as it's a 'i came this far, i'm stuck now' kind of question. The problem i have with this post is the unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem part. The question could mean anything from \"are there any tools that will let me modify dos executables\" to \"how do i find a text string in an executable if my hex editor doesn't find it\" to \"how do i handle packed DOS executable\". This makes it hard to know what the OP expects and what kind of answer would actually help him.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Tools\n\nAny hex editor will do. Under DOS both NC and VC have their own which are enough. Very good DOS tool is HIEW (hex editor + x86 dissasembler).\n\nwhat to do\n\nWindows\n\nYou could write window App that will present the DOS program. Just you need to pass mouse movement and keyboard events to the DOS program (which can be run as hidden process) and present the (invisible) DOS screen in your Window. In Windows use DLPORTIO driver or any other way to get Kernel mode access rights so you can actually read / access the DOS VRAM or access the commandline or DOSbox backbuffer by WinAPI in gfx. Decode it back to text (the font is usually fixed so that should be easy enough) and recode it to your new texts and present back in your window App.\n\n[Notes]\n\nGraphical DOS program means it uses graphic video mode instead of Text mode. NC is example of Text mode program not graphical !!! Some Text mode based Apps use different text modes so you should detect actual text mode resolution. I think some call to EGA/VGA BIOS int 13h should do the trick or you can hook up the entire interrupt for this. If you got aligned lines and table borders then that can be also used for resolution detection. You should do this once in a while because resolution can change during operation for example try ALT+F9 in VC.\n\n",
      "votes": "6",
      "user": "Spektre",
      "time": "Jan 9, 2016 at 9:48",
      "is_accepted": true,
      "comments": []
    }
  ]
}