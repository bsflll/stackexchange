{
  "title": "Trying to call the Exit Shellcode in a c program",
  "link": "https://reverseengineering.stackexchange.com/questions/27483/trying-to-call-the-exit-shellcode-in-a-c-program",
  "content": "```\n#include<stdio.h>\n#include<stdint.h>\n\nchar shellcode[] = \"\\xb8\\x3c\\x00\\x00\\x00\"\n                   \"\\xbf\\x14\\x00\\x00\\x00\"\n                   \"\\x0f\\x05\";\n\nint main()\n{\n    uint64_t *ret;\n    ret = (uint64_t *)&ret + 2;\n    (*ret) = (uint64_t)shellcode;\n}\n\n```\nso here what i am trying to do is run the exit shellcode by modifying the rets address to the shellcodes address and exiting the c program with status 20.\n\n```\nReading symbols from ./Shellcode...\n(gdb) l\n1       #include<stdio.h>\n2       #include<stdint.h>\n3\n4       char shellcode[] = \"\\xb8\\x3c\\x00\\x00\\x00\"\n5                          \"\\xbf\\x14\\x00\\x00\\x00\"\n6                          \"\\x0f\\x05\";\n7\n8       int main()\n9       {\n10\n(gdb) \n11          uint64_t *ret;\n12          ret = (uint64_t *)&ret + 2;\n13          (*ret) = (uint64_t)shellcode;\n14      }\n(gdb) \nLine number 15 out of range; Shellcode.c has 14 lines.\n(gdb) break 12\nBreakpoint 1 at 0x1129: file Shellcode.c, line 12.\n(gdb) run\nStarting program: /home/kali/oscp/asm/32/Shellcode \n\nBreakpoint 1, main () at Shellcode.c:12\n12          ret = (uint64_t *)&ret + 2;\n(gdb) print /x &shellcode\n$1 = 0x555555558028\n(gdb) x/8xg $rsp\n0x7fffffffdf70: 0x0000555555555150      0x00007ffff7e12d0a\n0x7fffffffdf80: 0x00007fffffffe068      0x0000000100000000\n0x7fffffffdf90: 0x0000555555555125      0x00007ffff7e127cf\n0x7fffffffdfa0: 0x0000000000000000      0xd60b04d41db666f5\n(gdb) s\n13          (*ret) = (uint64_t)shellcode;\n(gdb) x/8xg $rsp\n0x7fffffffdf70: 0x0000555555555150      0x00007ffff7e12d0a\n0x7fffffffdf80: 0x00007fffffffe068      0x0000000100000000\n0x7fffffffdf90: 0x0000555555555125      0x00007ffff7e127cf\n0x7fffffffdfa0: 0x0000000000000000      0xd60b04d41db666f5\n(gdb) print /x $rip\n$2 = 0x555555555135\n(gdb) s\n14      }\n(gdb) x/8xg $rsp\n0x7fffffffdf70: 0x0000555555555150      0x0000555555558028\n0x7fffffffdf80: 0x00007fffffffe068      0x0000000100000000\n0x7fffffffdf90: 0x0000555555555125      0x00007ffff7e127cf\n0x7fffffffdfa0: 0x0000000000000000      0xd60b04d41db666f5\n(gdb) print /x $rip\n$3 = 0x555555555148\n(gdb) s\n0x0000555555558028 in shellcode ()\n(gdb) print /x $rip\n$4 = 0x555555558028\n(gdb) x/8xg $rsp\n0x7fffffffdf80: 0x00007fffffffe068      0x0000000100000000\n0x7fffffffdf90: 0x0000555555555125      0x00007ffff7e127cf\n0x7fffffffdfa0: 0x0000000000000000      0xd60b04d41db666f5\n0x7fffffffdfb0: 0x0000555555555040      0x0000000000000000\n(gdb) s\nSingle stepping until exit from function shellcode,\nwhich has no line number information.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000555555558028 in shellcode ()\n\n```\nThe shellcode address does fall into rip but the shellcode does not execute or something that i am unable to understand.\nso like what should I do to make my shellcode run and have an exit status of 20.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "194",
  "tags": [
    "assembly",
    "c",
    "buffer-overflow",
    "shellcode",
    "x86-64"
  ],
  "user": "user8166560",
  "time": "Apr 16, 2021 at 12:21",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "how do you compile this? I have no problem successfully running this in a quick test. Though you never set status code to 20 (only copy from eax)",
      "time": null
    },
    {
      "user": "user8166560",
      "text": "This code \"\\xbf\\x14\\x00\\x00\\x00\" sets the exit status code, im just wondering to remove the 0x00 from the shellcode to prevent string termination.",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "No, in this case \\x00 do not matter. Make sure that you disable NX (-zstackexec) so that the stack can be executable so again how do you compile this?.",
      "time": null
    },
    {
      "user": "user8166560",
      "text": "i did use -z execstack, but still no luck, it works in the ubuntu bionic versions but not on the fossa one",
      "time": null
    }
  ],
  "answers_data": []
}