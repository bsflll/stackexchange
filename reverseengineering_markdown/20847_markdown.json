{
  "title": "Reverse engineer SharePoint hash algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/20847/reverse-engineer-sharepoint-hash-algorithm",
  "content": "I'm trying to reverse engineer a hash algorithm used by SharePoint 2016 in MSSCrawlUrl database table. I would like to avoid discussions about the idea itself (which I agree goes against SharePoint best practices), the answer is one word: legacy.\n\nIn short, that database table contains some URLs and their hashes. SharePoint somehow calculates a hash from values in AccessUrl column (which contains URLs), and puts the result into AccessHash column. The calculation is done by unmanaged (i.e. non-.Net) code.\n\nSo far I was able to figure out the following:\n\nAfter that I applied some brute force but couldn't figure out other algorithm parameters. The problem is a little bit more complicated because:\n\nHere are some examples of URLs and their hashes:\n\n```\nAccessURL       AccessHash\nhttp://a0       2141537348\nhttp://a1      -1380154216\nhttp://a2       -547891125\nhttp://a4        981557741\nhttp://a8       -169013482\nhttp://aq       -319117100\nhttp://aa        -55893049\n\n```\nMore examples can be found in this file: https://bitbucket.org/johnnyjob/spreveng/src/master/CrcHack/Program.cs\n\nThe code which performs a brute force can be found here: https://bitbucket.org/johnnyjob/spreveng/src/master/\n\nI'm open to any ideas, thanks in advance.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "124",
  "tags": [
    "crc"
  ],
  "user": "johnnyjob",
  "time": "Mar 11, 2019 at 11:54",
  "comments": [
    {
      "user": "Remko",
      "text": "I would suggest to have a look at the .net binaries responsible for creating the hash and load those in a disassembler such as JustDecompile.",
      "time": null
    },
    {
      "user": "johnnyjob",
      "text": "@Remko I tried actually (using ILSpy), but the problem is that the hash is calculated by unmanaged (native) code.",
      "time": null
    },
    {
      "user": "Avery3R",
      "text": "If you wanted to look at it in a native code disassembler there are a couple of free ones.",
      "time": null
    },
    {
      "user": "Remko",
      "text": "As @Avery3R says: if you have already identified the binary, run it through a disassembler. Perhaps public symbols and or trace comments can already point you in the right direction.",
      "time": null
    },
    {
      "user": "Biswapriyo",
      "text": "Where is the binary?",
      "time": null
    }
  ],
  "answers_data": []
}