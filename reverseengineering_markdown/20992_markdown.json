{
  "title": "Reassembling reversed ASM",
  "link": "https://reverseengineering.stackexchange.com/questions/20992/reassembling-reversed-asm",
  "content": "I am trying to reassemble code reversed from an executable using radare2. I have managed to extract the asm and am using nasm for reassembling. \n\nThe question is, the code also contains commands like \nbyte ptr [esi],pushal, fucomi st(3) and sqrtps xmm5, xmmword [edx - 1] which I'm unfamiliar with.\n\nI tried assembling with the nasm -felf -o command. However, I'm getting the following errors.\n\n```\ntest.asm:68: error: comma, colon, decorator or end of line expected after operand\ntest.asm:69: error: comma, colon, decorator or end of line expected after operand\ntest.asm:85: error: comma, colon, decorator or end of line expected after operand\ntest.asm:133: error: comma, colon, decorator or end of line expected after operand\ntest.asm:167: error: impossible combination of address sizes\ntest.asm:167: error: invalid effective address\ntest.asm:298: error: symbol `pushal' redefined\ntest.asm:423: error: comma, colon, decorator or end of line expected after operand\ntest.asm:637: error: comma, colon, decorator or end of line expected after operand\ntest.asm:802: error: symbol `pushal' redefined\n\n\n```\nAccording to this stackoverflow post, the keyword ptr does not exist in nasm and it suggested that the word be removed. Doing that resolved a few errors. Now I have the following errors:\n\n```\ntest.asm:68: error: comma, colon, decorator or end of line expected after operand\ntest.asm:69: error: comma, colon, decorator or end of line expected after operand\ntest.asm:85: error: comma, colon, decorator or end of line expected after operand\ntest.asm:133: error: comma, colon, decorator or end of line expected after operand\ntest.asm:298: error: symbol `pushal' redefined\ntest.asm:423: error: comma, colon, decorator or end of line expected after operand\ntest.asm:637: error: comma, colon, decorator or end of line expected after operand\ntest.asm:802: error: symbol `pushal' redefined\n\n\n```\nSince I have no idea what pushal and sqrtps mean, I'm reluctant to remove them from the code. Could someone please explain what these commands mean? \n\nAdditionally suggestions on how I can get this as a compilable error-free code are also welcome.\n\nEDIT:\nFollowing user blabb s suggestion, i replaced pushal with pushad and now I have only 2 errors\n\n```\ntest.asm:80: error: comma, colon, decorator or end of line expected after operand\ntest.asm:127: error: comma, colon, decorator or end of line expected after operand\n\n```\nThe 2 lines in question are: \n\n```\nfucomi st(3)\nand\nsqrtps xmm5, xmmword [edx - 1]\n\n```\nany suggestions as to how to handle this?\n\nEDIT 2:\nincluding lines 76-83\n\n```\npop esi\nint3\nsti\nxor ebx,ebx\nfucomi st(0),st(3)\njmp 0x400299\npop es\nxor ebx, ebx\n\n```\nand lines 122-132\n\n```\nadd cl, bh\niretd\nmov dr0, ebx\nand eax, ebx\nret\npush 0xf\nsqrtps xmm5, xmmword [edx - 1]\npush ecx\npush 0xffffffffffffffff\ncall dword [ecx + 0x51]\npush ecx\n\n```\nEDIT3:\nBased on user blabb s suggestion and also by referring the NASM docs, I found that NASM does not accept st(0),st(3) and instead it accepts st0,st3. Now only one error left.\n\n```\ntest.asm:127: error: comma, colon, decorator or end of line expected after operand\n\n```\nStill did not understand how to handle this.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "1k",
  "tags": [
    "radare2",
    "reassembly",
    "nasm"
  ],
  "user": "Flipsyde",
  "time": "Mar 30, 2019 at 3:01",
  "comments": [
    {
      "user": "dingo_kinznerhook",
      "text": "You mean assemble, not recompile? Usually the term compile refers to a high level language. Nasm is an assembler, not a compiler.",
      "time": null
    },
    {
      "user": "dingo_kinznerhook",
      "text": "Could you show us lines 79-81 and 126-128? That would make it easier to see what could be causing the problem on adjoining lines.",
      "time": null
    },
    {
      "user": "Flipsyde",
      "text": "@dingo_kinznerhook, updated the question with the code lines and changed recompiling to reassembling.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "SYNONYMS for Instruction ( PUSH ALL DOUBLE WORDS  / longs)\n\npushad   intel (masm , yasm , nasm , tasm)\npushal   at&t with ( gas )   \n\nsqrtps = square root of single precision floating point  \n\nif you can use intrinsic use SQRTPS __m128 _mm_sqrt_ps (__m128 a);\n\nit takes the 128bit value in src calculates the square rot of it and places the square root in destination xmmword (128 bit register)\n\nyou can always find equivalent syntax for all of these instructions and modify the inconsisitent syntax to suit the tool\n\na cpp src code that illustrates sqrtps usage \n\n```\n//visual studio declares __m128 as union\n// for gcc use _mm_set_xxx intrinsc\n#include <stdio.h>\n#include <intrin.h>\n\nint main(void) {\n    __m128 res;\n    res.m128_f32[0]=256.0;\n    res.m128_f32[1]=64.0;\n    res.m128_f32[2]=16.0;\n    res.m128_f32[3]=4.0;\n    res = _mm_sqrt_ps (res);\n    printf(\"%f %f %f %f  \n\",\n    res.m128_f32[0],\n    res.m128_f32[1],\n    res.m128_f32[2],\n    res.m128_f32[3]\n    );\n}\n\n```\ncompiled and linked and executed \n\n```\n:\\>cl /Zi /W4 /Ox /analyze /nologo sqrtps.cpp /link /nologo  /release\nsqrtps.cpp\n\n:\\>sqrtps.exe\n16.000000 8.000000 4.000000 2.000000\n\n```\ndisassembly\n\n```\n:\\>cdb -c \"uf sqrtps!main;q\" sqrtps.exe | grep -i sqrtps.*xmm\n01081000 0f510db0e10b01  sqrtps  xmm1,xmmword ptr [sqrtps!_xmm (010be1b0)]\n\n```\nrelooking at your query it appears you have some problems in the listing \n\nfucomi iirc takes two operands your query shows only one st(3)\n\nedit\nyes it takes two operands the first operand is st0 and is default \nso your listing probably omitted it (dont take my word check confirm and then change to fucomi st,st(3)\n\n and iirc nasm doesnt understand xmmword i think it needs DQWORD \n\n\n\nand i don't think unaligned access like [edi -1] is possible with sse operations \n\nno it was not either unaligned access nor dqword \nnasm simply doesnt like any decorator or qualifier \n\nthis assembles links and behaves properly\n\n```\n:\\>ls\ntest.asm\n\n:\\>cat test.asm\nsection .text\nglobal main\nmain:\nsqrtps xmm0,[edi-1]\nret\n:\\>nasm -f win32 -o test.obj test.asm\n\n:\\>ls\ntest.asm  test.obj\n\n:\\>link test.obj /debug /entry:main /release /nologo\n\n:\\>ls\ntest.asm  test.exe  test.obj  test.pdb\n\n:\\>..  \ndisasm.exe -p intel -b 32 -e 0x200 -k 6,5000 test.exe\n00000000  0F5147FF          sqrtps xmm0,oword [edi-0x1]\n00000004  C3                ret\n00000005  00                db 0x00\n00000006  skipping 0x1388 bytes\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Mar 29, 2019 at 18:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "Flipsyde",
          "text": "if you can use intrinsic use SQRTPS __m128 _mm_sqrt_ps (__m128 a); Could you please explain/elaborate this line?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "i added a c program for intrinsic usage and an asm listing that assembles fine with nasm for sqrtps",
          "time": null
        },
        {
          "user": "Flipsyde",
          "text": "Tried replacing xmmword with all other options(oword,yword,zword,etc.). Nothing worked. got too many errors like shown below. test.asm:12: warning: register size specification ignored test.asm:64: warning: register size specification ignored test.asm:65: warning: register size specification ignored test.asm:84: warning: register size specification ignored test.asm:89: warning: register size specification ignored test.asm:390: warning: register size specification ignored... What do i write instead of sqrtps xmm5, xmmword [edx - 1]??",
          "time": null
        },
        {
          "user": "blabb",
          "text": "did you read or see the nasm program i adder",
          "time": null
        },
        {
          "user": "Flipsyde",
          "text": "My mistake. I should have mentioned that. As suggested I removed the xmmword qualifier. This gave me another bunch of errors ;test.asm:890: warning: register size specification ignored; test.asm:1005: warning: register size specification ignored ; test.asm:12: error: invalid combination of opcode and operands; test.asm:64: error: invalid combination of opcode and operands ;...  .  Due to this i assumed that that too failed and went back to original error.",
          "time": null
        }
      ]
    }
  ]
}