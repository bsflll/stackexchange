{
  "title": "Extracting threads' stack from Windows memory dump",
  "link": "https://reverseengineering.stackexchange.com/questions/12782/extracting-threads-stack-from-windows-memory-dump",
  "content": "I have a memory dump of a VM running Windows server 2012 R2. The dump is of the entire RAM (4 GB).\n\nI want to extract as many features as possible from this dump. Mainly I want to extract all stacks of all threads running on the machine and exist in the memory. Alternatively, I want to extract call sequences of all threads.\n\nAre there any tools / tutorials / books etc. which can help me perform this task?\n\nI am familiar with both Volatility and Rekall, are there any specific plugins that can help me achieve my goals there?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "3k",
  "tags": [
    "digital-forensics",
    "callstack",
    "thread",
    "stack",
    "process"
  ],
  "user": "Yuval",
  "time": "Jun 2, 2016 at 9:32",
  "comments": [
    {
      "user": "perror",
      "text": "I might have misunderstood your problem, but why not simply using the pstree command in Volatility and, then, manage something with procmemdump, dlldump or memdump? But, I must have missed something.",
      "time": null
    },
    {
      "user": "Yuval",
      "text": "I am not sure, but how can I extract the stack or call-sequence of the processes using these commands?",
      "time": null
    },
    {
      "user": "perror",
      "text": "Well, you can dump the memory of the process. It contains the stack for sure... But, you see, your question lack of a precise definition of what you want because what kind of stack representation would you have at the end?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@perror: I assume OP wants to extract the call stacks or backtraces (like Windbg's k or GDB's bt).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I am Not Sure what you are looking for let me try    \n\ni have a dump file of a vm too MEMORY.dmp from a vm that ran xp sp3 created using .crash from a kernel debugger attached to it    \n\ni loaded it using windbg as below    \n\n```\nwindbg -z memory.dmp \n\n```\nnow i thought i will count how many threads are running so i did some thing like this \n\n```\nkd> r $t0 = 0; !for_each_thread \"r $t0= @$t0+1\" ; ? @$t0\nEvaluate expression: 306 = 00000132\n\n```\nnow let me see the call stacks for all threads so i do \n\n```\nkd> !for_each_thread  \".thread @#Thread ; k2\"\n\n```\nit spits out \n\n```\nImplicit thread is now 812915b8\n # ChildEBP RetAddr  \n00 fc8d37b4 804dc0f7 nt!KiSwapContext+0x2e\n01 fc8d37c0 804e3b7d nt!KiSwapThread+0x46\nImplicit thread is now 8128eda8\n # ChildEBP RetAddr  \n00 fc8e3d34 804dc0f7 nt!KiSwapContext+0x2e\n01 fc8e3d40 804e407e nt!KiSwapThread+0x46\nImplicit thread is now 8128eb30\n # ChildEBP RetAddr  \nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n```\nok instead of k2 i do k i get a full stack trace \n\n```\nImplicit thread is now 810efda8\n  *** Stack trace for last set context - .thread/.cxr resets it\n # ChildEBP RetAddr  \n00 f8ad3c38 804dc0f7 nt!KiSwapContext+0x2e\n01 f8ad3c44 804dc143 nt!KiSwapThread+0x46\n02 f8ad3c6c bf802f52 nt!KeWaitForSingleObject+0x1c2\n03 f8ad3ca8 bf801b2a win32k!xxxSleepThread+0x192\n04 f8ad3cec bf819e6c win32k!xxxRealInternalGetMessage+0x418\n05 f8ad3d4c 804de7ec win32k!NtUserGetMessage+0x27\n06 f8ad3d4c 7c90e4f4 nt!KiFastCallEntry+0xf8\n07 0007fe24 7e4191be ntdll!KiFastSystemCallRet\n08 0007fe44 0100a740 USER32!NtUserGetMessage+0xc\n09 0007fe80 0100c216 wmiprvse!WindowsDispatch+0x31\n0a 0007ff14 0100c314 wmiprvse!Process+0x225\n0b 0007ff1c 010247aa wmiprvse!WinMain+0x4e\n0c 0007ffc0 7c817067 wmiprvse!WinMainCRTStartup+0x174\n0d 0007fff0 00000000 kernel32!BaseProcessStart+0x23\nImplicit thread is now 8113b960\n  *** Stack trace for last set context - .thread/.cxr resets it\n\nXXXXXXXXXXXXXXXX\n\n```\nhope your query is answered if not please explain what is it you mean by call sequences \n\naddressing the comment by Igor Skochinsky \n\nif the format of the file is raw as in lets say captured with matthieu suiches now defunct win32dd.exe one can use volatility's plugin raw2dmp and use the resulting windbg compatible dmpfile in windbg as above\n\nvol25 -f foo.dmp --profile=Win7SP1x86 imageinfo\n\n```\nVolatility Foundation Volatility Framework 2.5\nINFO    : volatility.debug    : Determining profile based on KDBG search...\n          Suggested Profile(s) : Win7SP0x86, Win7SP1x86\n                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)\n                     AS Layer2 : FileAddressSpace (E:\\vola\\foo.dmp)\n                      PAE type : PAE\n                           DTB : 0x185000L\n                          KDBG : 0x82d32c28L\n          Number of Processors : 1\n     Image Type (Service Pack) : 1\n                KPCR for CPU 0 : 0x82d33c00L\n             KUSER_SHARED_DATA : 0xffdf0000L\n           Image date and time : 2016-06-02 18:08:14 UTC+0000\n\n```\nvol25 -f foo.dmp  --profile=Win7SP1x86 raw2dmp --output-image=foowind.dmp\n\n```\nVolatility Foundation Volatility Framework 2.5\nWriting data (5.00 MB chunks): |.....\n\n```\ndumpchk.exe foowind.dmp \n\n```\nLoading dump file foowind.dmp\n\nMicrosoft (R) Windows Debugger Version 10.0.10586.567 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLoading Dump File [xxx\\foowind.dmp]\nKernel Complete Dump File: Full address space is available\n\nComment: 'File was converted with Volatility'\nxxxxxxxxxxxxxxxxxxxxxxx\n*** ERROR: Module load completed but symbols could not be loaded for win32dd.exe\nCannot find frame 0x6c, previous scope unchanged\n*** ERROR: Module load completed but symbols could not be loaded for win32dd.sys\nProbably caused by : win32dd.exe ( win32dd!Unknown )\n\n```\n",
      "votes": "4",
      "user": "blabb",
      "time": "Jun 3, 2016 at 5:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "I think the OP has a raw (plain binary) memory dump, not a DMP file.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "@IgorSkochinsky i see i didn't realize that well then either volatility or memoryze should be able to read them â€“  i edited my answer to address this issue with volatility raw2dmp",
          "time": null
        }
      ]
    },
    {
      "content": "Now, if you can elaborate a little bit more on what are you trying to find. I'll probably will be give more specific instructions.\n\nGood luck.\n\n",
      "votes": "0",
      "user": "PhoeniX",
      "time": "Jun 3, 2016 at 12:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}