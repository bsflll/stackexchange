{
  "title": "Why does an executable give an error when opened in $tool?",
  "link": "https://reverseengineering.stackexchange.com/questions/1852/why-does-an-executable-give-an-error-when-opened-in-tool",
  "content": "I have an executable that runs in the operating system, but when when I open it in $tool I get an error. What is going on?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "492",
  "tags": [
    "tools",
    "malware",
    "file-format",
    "pe"
  ],
  "user": "Vehm Stark",
  "time": "Jun 4, 2013 at 2:09",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "An example of an error (e.g. a screenshot) would make this more realistic.",
      "time": null
    },
    {
      "user": "dyasta",
      "text": "Dunno why you were voted down. It's a worthy topic. Perhaps the question wasn't clear.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@90h: the question is relatively clear, but Igor's point of criticism hasn't been addressed at all, but it would make sense to address it.",
      "time": null
    },
    {
      "user": "dyasta",
      "text": "@VehmStark Let the community decide. I think it's fine as is. It is a general question with a general answer, and doesn't require specifics to have utility.",
      "time": null
    },
    {
      "user": "dyasta",
      "text": "A related question at RE.SE, including a couple specific examples, is here: How to Prevent Use of Resource Editors",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is caused by a differences in the operating system's loader and the file format parsing code in the tool you are using. Malicious program authors often exploit differences between an executable file format's specification and how the file format is actually used by the loader in practice. If there are differences between the file format specification and the operating system loader, there exist executables which will run but are not legal according to the specification! For example, up until Windows Vista a PE executable can be missing several header fields and the Window's loader will still load it. It's likely your tool was written by looking at the file format specification and not at the implementation of the loader and thus cannot necessarily handle all executables which are successfully loaded by the operating system.\n\nIn reality an executable file format is specified in three categories of places:\n\nThese three things often differ in very subtle ways and malicious program authors take advantage of this fact. Just remember that the ultimate arbiter for whether something is a valid executable or not is the loader. If the executable runs but your tools are failing, your tools do not take into account the real-world behavior of the operating system loader.\n\nThe best work documenting this phenomena that I am aware of is by Ange Albertini for the PE executable file format.\n\n",
      "votes": "9",
      "user": "Vehm Stark",
      "time": "Apr 20, 2013 at 21:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ange",
          "text": "After Windows Vista, it's not possible anymore to cut the OptionalHeader at Subsystem: the comment in pefile is only valid until Windows XP.",
          "time": null
        }
      ]
    },
    {
      "content": "Try using Rohitab's API Monitor to use the loader to open the program and watch the failed calls. Might point you in the right direction.\n\n",
      "votes": "1",
      "user": "Mick",
      "time": "Apr 21, 2013 at 23:33",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "actually this wouldn't help, because the third-party programs handling PE files will not use the default library functions provided by the operating system, e.g. as part of ntdll.dll.",
          "time": null
        }
      ]
    }
  ]
}