{
  "title": "How can I set an address to be a relative offset pointer in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/17796/how-can-i-set-an-address-to-be-a-relative-offset-pointer-in-ida-pro",
  "content": "I have the following sequence of bytes in IDA Pro:\n\n```\n.text:0044A838          db 2Ah\n.text:0044A839          db 0ADh ; Â­\n.text:0044A83A          db    4\n.text:0044A83B          db    0\n.text:0044A83C          dd rva word_44AD3E     \n.text:0044A840          dd rva word_44AD4C\n.text:0044A844          dd rva word_44AD5C\n\n```\nThis region should be interpreted as four consecutive relative pointers, but right now, it is four raw bytes, and then three relative pointers. How can I instruct IDA that the first element is a relative offset pointer?\n\nWhen I mark the first element as being a 32-bit integer, the its simply the value 0x4AD2A, which IDA does not recognize as being an xref that I can follow. I cannot mark this 32-bit element as an offset (by pressing O), since the address 0x4AD2A is not valid in this executable.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida"
  ],
  "user": "Willi Ballenthin",
  "time": "Mar 25, 2018 at 13:19",
  "comments": [],
  "answers_data": [
    {
      "content": "Define the element to be the appropriate size (such as by pressing d repeatedly). Then press Ctrl-R (or use the menu entry: Edit->Operand Type->Offset->Offset (User Defined)), select Use image base as offset base, and accept the dialog.\n\n\n\n",
      "votes": "2",
      "user": "Willi Ballenthin",
      "time": "Mar 25, 2018 at 13:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "Michael Karcher",
          "text": "And if the resulting address is above 4G, make sure to choose OFF64, even if it is a 32-bit variable. The width of the memory cell need not match the size of the resulting address.",
          "time": null
        }
      ]
    },
    {
      "content": "Press UDDDO or you may be able to get away with UQO\n\nNote: the leading U is to ensure you are starting from a consistent state, and is not strictly necessary.\n\nKey meanings:\n\nU - Undefine\nD - Data [byte]\nD - Data [word]\nD - Data [dword]\nO - Offset\n\nor\n\nU - Undefine\nQ - Hex (will convert to D/QWORD for free)\nO - Offset\n\nI (heart) Vim\n\n",
      "votes": "0",
      "user": "Orwellophile",
      "time": "Mar 7, 2021 at 11:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Willi Ballenthin",
          "text": "using O/Offset usually interprets the data as a VA rather than RVA, which is what I am looking for here.",
          "time": null
        },
        {
          "user": "Orwellophile",
          "text": "When-ever I do this in my own code, (64 bit, __ImageBase at 0x140000000 and QWORD values), they come out perfectly as (Absolute) values.   If you are doing 32 bit stuff, I am officially clueless, and the only relative offsets in the 64 bit work I do are the RIP relative type.    However, I did notice the other day while browsing the configuration options of IDA that there's a tremendous list of things you can assign to keyboard shortcuts -- so you might be able to figure something.   Otherwise, I could write a quick Python based hotkey for you if I understood your crazy 32bit world.",
          "time": null
        }
      ]
    }
  ]
}