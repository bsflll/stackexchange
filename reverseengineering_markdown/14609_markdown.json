{
  "title": "xor eax, eax in x64",
  "link": "https://reverseengineering.stackexchange.com/questions/14609/xor-eax-eax-in-x64",
  "content": "I have following code:\n\n```\nsub rsp, 40                 ; 00000028H\nlea rcx, OFFSET FLAT:$SG4237\ncall    printf\nxor eax, eax\nadd rsp, 40                 ; 00000028H\nret 0\n\n```\nWhy there is xor eax, eax , instead of xor rax, rax?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "5k",
  "tags": [
    "disassembly",
    "assembly",
    "x86-64",
    "patch-reversing"
  ],
  "user": "J. Doe",
  "time": "Feb 9, 2017 at 18:13",
  "comments": [
    {
      "user": "newgre",
      "text": "Because the return value is likely \"int\", which is 32-bit in most compiler models (LP64/LLP64).",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "Why do x86-64 instructions on 32-bit registers zero the upper part of the full 64-bit register?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In x64, any operation on a 32-bit register clears the top 32 bits of the corresponding 64-bit register too, so there's no need to use xor rax, rax which would necessitate an extra REX byte for encoding.\n\n",
      "votes": "12",
      "user": "Igor Skochinsky",
      "time": "Feb 9, 2017 at 18:53",
      "is_accepted": true,
      "comments": []
    }
  ]
}