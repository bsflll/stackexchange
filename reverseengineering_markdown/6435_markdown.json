{
  "title": "Determining the size of an object allocated on the heap",
  "link": "https://reverseengineering.stackexchange.com/questions/6435/determining-the-size-of-an-object-allocated-on-the-heap",
  "content": "As part of an assignment, dealing with the operation aurora vulnerability, I am supposed to determine the size of C++ classes allocated on the heap.\n\nI used: \n\n```\n0:017> !heap -p -a <address of the class I am researching>\n\n```\nAnd got:\n\n```\naddress 047dcf08 found in\n  _DPH_HEAP_ROOT @ 12d1000\n  in busy allocation (DPH_HEAP_BLOCK:     UserAddr     UserSize -    VirtAddr   VirtSize)\n                             4501270:      47dcf08           f8 -     47dc000       2000\n\n```\nAccording to the user size, the object is 0xf8 in size, but are there any header/trailer bytes that need to be subtracted to get the actual size of the class in this allocation block ?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "debugging",
    "windbg"
  ],
  "user": "dnraikes",
  "time": "Oct 13, 2014 at 8:30",
  "comments": [],
  "answers_data": [
    {
      "content": "No, UserSize is the size that was sent to the allocator.\n\n```\nmalloc(0x100); // usersize 100\n\n```\nThe obvious exception to this would be if you're using a custom heap allocator built on top of the standard heap allocator.\n\n",
      "votes": "2",
      "user": "Zach Riggle",
      "time": "Oct 13, 2014 at 21:34",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This is not a direct answer but windbg has a nice command that lets you \"decipher\" the answer to most of these question by yourself the name of the command is .ocommand\n\nan example showing how you can ascertain what usersize points to using this command\n\n```\n#include <stdio.h>\n#include <windows.h>\n\nvoid dbg (PCHAR cmdstr , PVOID value) {\n    char buff[0x300] = {0};\n    sprintf_s(buff,cmdstr,value);\n    OutputDebugStringA(buff);\n    return ;\n}\nint main(void) {\n    printf (\n        \"This is a windbg .ocommand Example  \n\"\n        \"This command can be leveraged to execute windbg commands   \n\"\n        \"For example command !heap -p -a is performed on allocated heap  \n\"\n        \"Output of !heap -p -a <address> can be viewed in windbg   \n\"\n        \"issue .ocommand myjick in windbg prior to running this exe  \n\"\n        \"or run this exe with windbg -c \\\".ocommand myjick\\\" ocommand.exe  \n\"\n        );\n    HANDLE hHeap = NULL;   \n    if((hHeap = GetProcessHeap() ) != NULL)     {\n        for (int i = 1 ; i< 6; i++)  {\n            PCHAR mem[6] = {0};\n            if (( mem[i] = (PCHAR)HeapAlloc(hHeap,0,0x101*i) ) != NULL)   {\n                dbg(\"myjick !heap -p -a %x ;g;  \n  \n\",mem[i]);\n            }\n        }\n    }\n    return 0; //all the allocated heaps need to be freed\n}\n\n```\noutput for the above code \n\ncdb -c \".ocommand myjick ;g;q\" ocommand.exe\n\n```\n0:000> cdb: Reading initial command '.ocommand myjick ;g;q'\nTreat output prefixed with 'myjick ' as a command\n\nThis is a windbg .ocommand Example\nThis command can be leveraged to execute windbg commands\nFor example command !heap -p -a is performed on allocated heap\nOutput of !heap -p -a <address> can be viewed in windbg\nissue .ocommand myjick in windbg prior to running this exe\nor run this exe with windbg -c \".ocommand myjick\" ocommand.exe \n\n    address 001537e8 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        001537e0 0024 0000  [07]   001537e8    00101 - (busy)    \n    address 00153908 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153900 0044 0000  [07]   00153908    00202 - (busy)    \n    address 00153b28 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153b20 0064 0000  [07]   00153b28    00303 - (busy)    \n    address 00153e48 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00153e40 0084 0000  [07]   00153e48    00404 - (busy)    \n    address 00154268 found in\n    _HEAP @ 150000\n      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state\n        00154260 00a4 0000  [07]   00154268    00505 - (busy)\n\n```\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Oct 15, 2014 at 7:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}