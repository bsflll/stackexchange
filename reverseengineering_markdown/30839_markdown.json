{
  "title": "ghidra returning wrong function address",
  "link": "https://reverseengineering.stackexchange.com/questions/30839/ghidra-returning-wrong-function-address",
  "content": "I am reverse engineering a android app shared library (.so file) and I am trying to use frida to hook a non exported native function\nI am using this hook\n\n```\nconst ghidraImageBase = 0x00100000; \nconst moduleName = \"libclient.so\";\nconst moduleBaseAddress = Module.findBaseAddress(moduleName);\nconst ghidraFunction = 0x0168a7c8;\nconst functionRealAddress = moduleBaseAddress.add(ghidraFunction - ghidraImageBase);\n\nInterceptor.attach(functionRealAddress, {\n    onEnter: function(args) {\n\n        console.log(\"function called\");\n\n    },\n    onLeave: function(ignored) {}\n});\n\n```\nHowever function called is never logged even though the function is getting called\nI am pretty sure something is wrong with the addresses so I tried hooking into a exported function using the address I got from ghidra\n\n\n\nwhich is 0x014ccd08 and ghidra image base is equal to 0x00100000 meaning the offset of the function should be 0x014ccd08 - 0x00100000 = 0x013ccd08\nhowever when I run\n\n```\nconsole.log(\"moduleBaseAddress:\" + Module.findBaseAddress(\"libclient.so\"))\n\n\nModule.enumerateExports(\"libclient.so\", {\n    onMatch: function(e) {\n        if (e.type == 'function') {\n            if (e.name == \"Java_exported_function etc...\") {\n                console.log(\"Function found\");\n                console.log(JSON.stringify(e))\n            }\n        }\n    },\n    onComplete: function() {}\n});\n\n```\nthe above code execution result is\n\n```\nmoduleBaseAddress:0xb6900000\nFunction recognized by name\n{\"type\":\"function\",\"name\":\"Java_exported_function...\",\"address\":\"0xb755b9e1\"}\n\n```\nthe .so library is loaded at 0xb6900000 and the function address is at 0xb755b9e1 meaning the function offset is 0xb755b9e1 - 0xb6900000 = 0x00c5b9e1\nentirely different from the 0x013ccd08 I found earlier.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "android",
    "ghidra",
    "memory",
    "frida"
  ],
  "user": "ahmed mani",
  "time": "Aug 31, 2022 at 1:14",
  "comments": [
    {
      "user": "Robert",
      "text": "Do you use an emulator or a real device? If you are using an emulator make sure not to use an x86 image with an armv7/arm64 app. The integrated arm emulation is incompatible with frida.",
      "time": null
    },
    {
      "user": "ahmed mani",
      "text": "i am using a x86 image however frida does support hooking of native functions with arm translation as stated by its creator in this issue github.com/frida/frida/issues/1567 come to think of it now i dont know which version of arm library is being loaded since it has both arm64 and armeabi-v7a and the one i reversed on ghidra is arm64 is there a way to tell which one is loaded into memory",
      "time": null
    },
    {
      "user": "Robert",
      "text": "I can only recommend to you to use a real device or an ARM image.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "turns out i decompiled the wrong library the emulator i was running is 32bit where as the library i decompiled in ghidra is 64bit decompiling the 32bit lib i get the correct offsests same as expected ones\n\n",
      "votes": "0",
      "user": "ahmed mani",
      "time": "Oct 9, 2022 at 21:32",
      "is_accepted": true,
      "comments": []
    }
  ]
}