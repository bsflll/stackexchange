{
  "title": "Analyze all functions with radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/20132/analyze-all-functions-with-radare2",
  "content": "I have a big library in which IDA found ~84300 functions but using aa in radare2 I was just able to found ~3000.\n\nI tried setting anal.hasnext to true, anal.from and anal.to to the start and the end of the .text section but with not luck\n\nSo is there an optimal way to analyze all the functions using radare?\n\nBy optimal I mean avoiding xrefs or other analyzis\n\nThanks\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "binary-analysis",
    "radare2"
  ],
  "user": "Fabian Mendez",
  "time": "Dec 14, 2018 at 1:38",
  "comments": [
    {
      "user": "defragger",
      "text": "You can try to use aab as it's quite fast and does not handle xrefs.",
      "time": null
    },
    {
      "user": "Fabian Mendez",
      "text": "It worked, can you create an answer so I can mark it as answered",
      "time": null
    },
    {
      "user": "Fabian Mendez",
      "text": "I'm sorry some functions that were correctly analyzed before now are just a bunch of add byte [eax], al",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To see the help of analysis you can use aa?. For a more detailed information i would always suggest visiting the sourcecode as a lot of aa commands are combinations of different steps. A good starting point is at libr/core/cmd_anal.c\n\naab instead is a total different approach and can create a lot of false positives.\n\nYou could also give aaa a try but i assume that will take some time to finish.\n\n",
      "votes": "1",
      "user": "defragger",
      "time": "Dec 15, 2018 at 6:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}