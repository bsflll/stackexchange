{
  "title": "How can i generate function call tree in IDA for non-standart function calls?",
  "link": "https://reverseengineering.stackexchange.com/questions/8776/how-can-i-generate-function-call-tree-in-ida-for-non-standart-function-calls",
  "content": "I have large PE file (C++), which has lots of indirect function calls using vtable and jmp dword.\n\nHow can I generate a call tree for such functions ? (like with IDA User xrefs chart menu).\n\nHere is an example of disassembled code:\n\n```\nUPX1:2401135C sub_2401135C proc near                  ; CODE XREF: sub_2401263C+Cp\nUPX1:2401135C                                         ; StartAddress+21p ...\nUPX1:2401135C test    eax, eax\nUPX1:2401135E jz      short locret_2401136A\nUPX1:24011360 call    ds:off_24057054\nUPX1:24011366 or      eax, eax\nUPX1:24011368 jnz     short loc_2401136B\nUPX1:2401136A\nUPX1:2401136A locret_2401136A:                        ; CODE XREF: sub_2401135C+2j\nUPX1:2401136A retn\nUPX1:2401136B ; ---------------------------------------------------------------------------\nUPX1:2401136B\nUPX1:2401136B loc_2401136B:                           ; CODE XREF: sub_2401135C+Cj\nUPX1:2401136B mov     al, 2\nUPX1:2401136D jmp     sub_2401141C\nUPX1:2401136D sub_2401135C endp\n\n```\nUser xref chart can show only call ds:off_24057054 branch if I will include data xrefs. What can I do to see the jmp sub_2401141C branch ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida"
  ],
  "user": "Victor",
  "time": "Apr 27, 2015 at 22:36",
  "comments": [],
  "answers_data": [
    {
      "content": "In these cases the target of the calls is generated at runtime and can not be determined statically (with very few exceptions). \n\nYou need to record this information while running the binary and incorporate the extra info into your IDB by using the AddCodeXref API or alike.\n\nIf you don't want to write your own thing, this plugin can assist you in doing that and more: funcap\n\nEDIT\n\nIn the case of jmp subxxx the target of the jump is well defined. You could programatically go throught the whole binary, extract the target of the jump and add the cross reference. \n\nI hacked something together, give it a try.\n\n```\ndef is_external_jmp(ins_ea):\n    \"\"\"\n    True for JMPs between functions.\n    NN_JMP (86): jmp sub_xxx (0xE9 + offset) or jmp loc_xxx (0xE9 + offset)\n    \"\"\"    \n    decode_insn(ins_ea)\n\n    if cmd.itype == NN_jmp:\n        # HACK: GetOperandValue returns the target\n        # address, not the offset (as I would expect)\n        target = GetOperandValue(ins_ea, 0)\n        (s, e) = current_function_boundaries(ins_ea)\n\n        if target < s or target > e:\n            # Not within the current function\n            return True\n\n    return False\n\n\ndef current_function_boundaries(ea=None):\n    \"\"\"\n    Convenience function\n    @returns: boundaries or None\n    \"\"\"\n    if not ea:\n        ea = ScreenEA()\n\n    f = get_func(ea)\n\n    if not f:\n        # Probably called outside a function\n        return (None, None)\n\n    else:\n        return (f.startEA, f.endEA)\n\n\ndef main():\n\n    for f_ea in Functions():\n        for ins_ea in FuncItems(f_ea):\n            if is_external_jmp(ins):\n                # One of these \"jmp sub_xxx\"\n                target = GetOperandValue(ins_ea, 0)\n                AddCodeXref(ins_ea, target, fl_CN)\n\n\n\nif __name__ == '__main__':\n    main()\n\n```\n",
      "votes": "4",
      "user": "Carlos Garcia",
      "time": "Apr 27, 2015 at 17:51",
      "is_accepted": true,
      "comments": [
        {
          "user": "Victor",
          "text": "In this example the call target is not generated at runtime. It uses a jump instruction with hardcoded value UPX1:2401136D jmp     sub_2401141C",
          "time": null
        },
        {
          "user": "Carlos Garcia",
          "text": "I just got your question correctly and updated my answer (was reading from a phone).",
          "time": null
        },
        {
          "user": "Dominik Antal",
          "text": "I knew funcap, but you script is another treasure in my toolset now! Thank you.",
          "time": null
        }
      ]
    }
  ]
}