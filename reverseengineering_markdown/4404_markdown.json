{
  "title": "Insert logging into existing binary code, ARM",
  "link": "https://reverseengineering.stackexchange.com/questions/4404/insert-logging-into-existing-binary-code-arm",
  "content": "I want to add logging to some function(s) in the shared (.so) library. (ARM, Android, a mix of Arm and Thumb modes; C++, some functions are virtual and therefore nameless, invoked via VFT.)\n\nDoes anyone already have code that does this or almost this? (Adds logging to existing functions.)\n\n(I am thinking about patching at run-time (on-the-fly), but you may suggest something static.)\n\nThe procedures usually start with a PUSH/STM instruction, but it's difficult to place a branch into just one instruction, at least in the thumb mode.\nHow do I modify existing procedures?\n\nOne more issue is to detect code residing in PLT.\nHow do I detect code in PLT, how do I \"dereference\" the plt entry?\n\nRelated info:\n\nThe caching issues are discussed here:\nPatching ARM7 code during runtime (but no code at the moment).\n\nQt-specific stuff: http://www.ntcore.com/files/qtrev.htm or (the same) http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing and about Qt signals&slots.\n\nAbout printing out RTTI (when it's available, of course).\n\nUPD: reDroid: reverse-engineering tools for Android NDK/C++/Qt (source at github).\n\n",
  "votes": "3",
  "answers": 3,
  "views": "2k",
  "tags": [
    "c++",
    "arm",
    "patching"
  ],
  "user": "18446744073709551615",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "The Android Dynamic Binary Instrumentation Toolkit (adbi) should allow you to do what you need to do.\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "May 22, 2014 at 13:29",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can use Dynamic Binary Instrumentation to achieve what you want as suggested by Jason Geffner.\n\nYou can use PINdroid by Intel. Read this presentation on Android Binary Instrumentation.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "18446744073709551615",
          "text": "As to Pin, is there ARM support? Pin is used for the instrumentation of programs. It supports Linux*,Windows*, macOS and  Android* executables for IA-32, and Intel(R) 64.",
          "time": null
        },
        {
          "user": "john4tech",
          "text": "If I'm not wrong then yes, you can use Pindroid for ARM too. I have not used it in Android. But according to me, yes you can. Pindroid Tutorial",
          "time": null
        }
      ]
    },
    {
      "content": "What i usually do, is find a suitable BL or BLX  instruction, and replace it with a BL to my logging code,  at the end of my logginghook, then jump to the original target.\n\noriginal code:\n\n```\nMOV R0, #123\nBLX  somefunction\n\n```\nthen in C i write some function:\n\n```\nint hooksomefunction(int arg)\n{\n     // insert logging code here\n\n     return somefunction(arg);\n}\n\n```\nand change the original code to:\n\n```\nMOV R0, #123\nBLX  hooksomefunction\n\n```\nOther methods of inserting a call of your own:\n\n",
      "votes": "1",
      "user": "Willem Hengeveld",
      "time": "May 22, 2014 at 13:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}