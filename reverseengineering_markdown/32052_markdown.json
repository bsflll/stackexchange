{
  "title": "How can I find which JNI library implements a java native method at runtime for Android applications?",
  "link": "https://reverseengineering.stackexchange.com/questions/32052/how-can-i-find-which-jni-library-implements-a-java-native-method-at-runtime-for",
  "content": "I am doing security research, my target application includes some JNI libraries which implements some native java methods I am interested in. This app is obfuscated, I can't directly find the library by unpacking the APK archive.\n\nSearching on the Web I found I can use ART's GetNativeMethods() from a JNI function, then use the native method's JNI pointer to find the shared library where it is located. But ART is a private API and latest Android versions block the loading of libart.so, I can't use it.\n\nI am using Xposed to instrument the target application at runtime.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "182",
  "tags": [
    "android",
    "java"
  ],
  "user": "hldev",
  "time": "Jul 12, 2023 at 17:04",
  "comments": [
    {
      "user": "Robert",
      "text": "I know only two way to access a native method via JNI: 1. the method is exported by the library 2. using the JNI method RegisterNatives baeldung.com/jni-registernatives",
      "time": null
    },
    {
      "user": "hldev",
      "text": "@Robert so I should somehow hook into RegisterNatives to find the native methods name mapping? Yes I guess they use that to be able to obfuscated the symbols in the JNI library.",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Yes, but finding this method isn't that easy. As you can see on the linked web site RegisterNatives is not an exported method but a method that belongs to a struct. So you first have to find the struct then calculate the offset to the method pointer in the struct to get the final pointer you can hook.",
      "time": null
    }
  ],
  "answers_data": []
}