{
  "title": "How would I go about getting an application's XMPP request before it is SSL-encrypted?",
  "link": "https://reverseengineering.stackexchange.com/questions/12850/how-would-i-go-about-getting-an-applications-xmpp-request-before-it-is-ssl-encr",
  "content": "Disclaimer: I am very new to Reverse Engineering, though it captivates me. Hence, I'm apologizing beforehand if I say anything ridiculous in the following, and hope you will help me find the way!\n\nContext: I have an application which seems coded in Adobe AIR and running on my x64 Windows 7. This application does a lot of things, but what interests me is: it communicates with an XMPP server through port 5223, through SSL. My goal is to be able to read the XML requests sent by the client to the server before they are SSL-encrypted (so right after the request is created, but right before it is encrypted).\n\nUnsuccessful tries: I attempted to set up a MitM, but the application won't accept my custom-crafted certificate because it is different from the real server certificate. I also attempted to use Echo Mirage, but without any success.\n\nI have read a bit about hooking, and figured it was adapted to my problem. I was thinking: if I can get the application to print the XMPP request before SSL-encrypting it, the job would be done. To do so, implementing a C# hook with EasyHook seemed like a good idea to me.\n\nAm I largely mistaken? If not, how exactly would I go about getting my hook function to print the requests, and before which function call should I place it?I am open to any documentation you might have for me!\n\n",
  "votes": "1",
  "answers": 1,
  "views": "247",
  "tags": [
    "function-hooking"
  ],
  "user": "Azami",
  "time": "Jun 15, 2016 at 13:16",
  "comments": [],
  "answers_data": [
    {
      "content": "Thanks for providing a good amount of context in your question.\n\nYes, hooking is the way to go. The function that you'd want to hook is the function that performs the SSL encryption, as it would be the function that receives the plaintext as input.\n\nThe hard part is finding that encryption function. To do so, I recommend that you use Process Monitor to capture the network-send events and double-click on those events to see the callstack. You can then use a disassembler and/or a debugger to analyze the functions in the callstack that are called prior to the low-level network send call. This will help you narrow down which functions to analyze so that you can more easily find the function that performs the encryption.\n\nAlternatively, you can try to find the encryption function by searching for cryptographic functions via a tool like PEiD with its Krypto ANALyzer plugin and then analyzing them with a disassembler.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Jun 15, 2016 at 14:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}