{
  "title": "What is the meaning of *((_DWORD *)",
  "link": "https://reverseengineering.stackexchange.com/questions/32902/what-is-the-meaning-of-dword",
  "content": "I disassemble some code using IDA Pro and get the pseudo-code. It showed something like below.\n*((_DWORD *)a1 + 150) = 3;\n*(_DWORD *)(a1 + 604) = 1;\nI can't understand what is happening for this two code, anybody can explainï¼Ÿ\n\n",
  "votes": "0",
  "answers": 1,
  "views": "158",
  "tags": [
    "ida"
  ],
  "user": "yepochangfeng",
  "time": "Apr 17, 2024 at 12:46",
  "comments": [],
  "answers_data": [
    {
      "content": "This is pretty much standard C representation\n*((_DWORD *)a1 + 150) = 3; means a1 is a pointer to _DWORD and we dereference the 150th member of the array with base a1\nNote that *(_DWORD *)(a1 + 604) = 1; the order of brackets is a bit different and assuming the type of a1 - I guess its dereferencing the 151st element since sizeof(_DWORD) is 4 and 604 = 151 x 4.\n\nYou can pretty much recreate this\n\n```\nvoid f(int * a) {\n    a[150] = 3;\n    a[151] = 1;\n}\n\nint main() {\n    int x[256];\n    f(x);\n}\n\n```\ncompile this - alternatively gcc.godbolt here\n\n```\n$ gcc -O1 -o test test.c\n\n```\nloading this in ida and decompiling\n\n```\nvoid __fastcall f(__int64 a1)\n{\n  *(_DWORD *)(a1 + 600) = 3;\n  *(_DWORD *)(a1 + 604) = 1;\n}\n\n```\nYou can press Y after clicking on a1 and change the type of a1 to int * and get this\n\n```\nvoid __fastcall f(int *a1)\n{\n  a1[150] = 3;\n  a1[151] = 1;\n}\n\n```\nNote that this is not always true - a1 could be a pointer to a struct and the code could be changing a member.\n\n",
      "votes": "3",
      "user": "sudhackar",
      "time": "Apr 18, 2024 at 6:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}