{
  "title": "Thread local storage access on Windows XP",
  "link": "https://reverseengineering.stackexchange.com/questions/14171/thread-local-storage-access-on-windows-xp",
  "content": "Recently the Microsoft Visual Studio 2015 compiler finally complied with the C++ standards mandate to generate thread-safe code for function local statics. For the most part this works just fine but I ran into a situation on Windows XP where the following 3 instructions led to a blow up:\n\n```\nmov     eax,dword ptr fs:[0000002Ch]\nmov     ecx,dword ptr [MyModule!_tls_index (102eea44)]\nmov     ecx,dword ptr [eax+ecx*4]\n\n```\nObviously the compiler seems to implement thread-safety by first poking into the TLS slot of the current thread. fs:2Ch is supposed to lead to the TLS array per documentation. However on Windows XP, fs:2Ch doesn't seem to be set. This returned 0 for me and so did the next instruction (_tls_index was also 0.) That led to the 3rd instruction blowing up as it was accessing invalid memory.\n\nDoes anybody know why fs:2Ch might not be set on Windows XP? Function local statics are used all over our code and I can't imagine no one else running into this.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "windows",
    "thread"
  ],
  "user": "ForeverLearning",
  "time": "Dec 14, 2016 at 21:43",
  "comments": [],
  "answers_data": [
    {
      "content": "If your module is a DLL that is loaded dynamically by your executable, then Thread Local Storage won't be initialized on Windows XP for the DLL.\n\nQuoting from my \"Ultimate\" Anti-Debugging Reference, section 4, page 25:\n\n\"On Windows Vista and later, dynamically-loaded DLLs also support Thread Local Storage. This is in direct contradiction to the existing Portable Executable format documentation, which states that \"Statically declared TLS data objects ... can be used only in statically loaded image files. This fact makes it unreliable to use static Thread Local Storage data in a DLL unless you know that the DLL, or anything statically linked with it, will never be loaded dynamically with the LoadLibrary API function\".\n\n",
      "votes": "3",
      "user": "peter ferrie",
      "time": "Dec 16, 2016 at 17:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "ForeverLearning",
          "text": "Peter: Thank you very much! That is indeed a great resource. I wish it was easily findable on Google. FWIW, a kind soul also sent this across to me: connect.microsoft.com/VisualStudio/Feedback/Details/1941836  Now things are a lot clearer.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "More on the history of this issue: nynaeve.net/?p=189",
          "time": null
        },
        {
          "user": "Pupsik",
          "text": "Any ideas how to solve the following problem? I have .NET executable that call function from native DLL (P/Invoke). The DLL is loaded by LoadLibrary and I hit the issue (since DLL have static variables). I tried somehow to add native DLL to DLL Import table of the .NET executable (PE), but I've failed to run the executable afterwards... Not sure If this will actually helps.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "@Pupsik, please create a new question to discuss your issue.  The comments section is not appropriate for the purpose.",
          "time": null
        }
      ]
    }
  ]
}