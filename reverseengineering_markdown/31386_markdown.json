{
  "title": "Is there an interactive way to search for immediate integer values using a mask in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/31386/is-there-an-interactive-way-to-search-for-immediate-integer-values-using-a-mask",
  "content": "Other than scripting a solution to this, can anyone recommend an interactive method to search for immediate integer values by mask in IDA?\n\nLet me explain. Consider NTSTATUS values used in Windows internally. Roughly speaking if you see a 32 bit value that starts with (hexadecimal) C, followed by three 0 and then some arbitrary value in the lower 16 bit, chances are you are looking at an NTSTATUS error code. There are also success and warning codes, but a solution to this question would equally apply there.\n\nNow, if I hit Alt+i, I am able to search an immediate value and repeat that search later on with Ctrl+i. Alas, it only lets me search for exact values.\n\nWhat I would want is something akin to the CIDR notation for IP addresses, where -- for example -- I could give 0xC0000000/16 as the immediate \"search mask\" and it would find all of the values that fall into that range (0xC0000000 .. 0xC000FFFF). Another example would be 0xC0110000/16 which would find most of the status codes defined via enum MACRO_HIDP in the range 0xC0110000 .. 0xC011FFFF.\n\nI realize that such a search could take a long time, but it would also be incredibly useful, especially if there was still the option to \"Find all occurrences\" where the \"Instruction\" column would be able to show me if I have already \"treated\" with m to turn into an enum.\n\nAlso, the IDC/IDAPython function find_imm() appears to suffer from the same limitation. And the only \"optimization\" I have found is to use the search for binary to narrow it down to a candidate list (basically mimicking that bit mask) and then using find_imm() and matching the EAs against each other. Guess I could have used Sark instead, but not sure it uses an optimization that compares.\n\nAs per a comment I tried using ? as a wildcard, but that doesn't work and yields:\n\n\n\n",
  "votes": "3",
  "answers": 1,
  "views": "243",
  "tags": [
    "ida"
  ],
  "user": "0xC0000022L",
  "time": "Jan 12, 2023 at 15:08",
  "comments": [
    {
      "user": "Pulpo",
      "text": "Its been a while since I used IDA but can't you search for immediate value 0xC0000?????",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This isn't a valid answer since it's scripting, but find_imm uses find_byte (or find_byter) to seek for each octet of your immediate value while using the flags (get_flags) to exclude results via FF_CODE (and FF_DATA). For FF_CODE (with the mask MS_CLS) you'd be excluding results that don't have the FF_IMMD bit set (mask is MS_CODE). Once your candidates are found, then a proper check can be done.\n\nThat's why it needs exact values, anyways, since it's being used as a key to find the whole value. You can probably get away performance-wise in Py with doing something similar (but only including the bytes you care about).\n\nEncountered a situation where I needed to do something similar and it reminded me of this answer. It depends on the ida-minsc plugin.\n\n```\neverything = database.info.bounds()\n\n# Search entire database for any items with 0x44 in them,\n# that is code, and has an immediate value.\nfor ea in db.address(everything, step=lambda ea: db.address.nextbyte(0x44, ea)):\n    if not db.type.code(ea) or db.type.flags(db.address.head(ea), idaapi.MS_CODE) != idaapi.FF_IMMD:\n        continue\n\n    # Explicitly mask the immediates, looking for desired value (????4344).\n    immediates = ins.ops_immediate(ea)\n    if any(ins.op(ref) & 0x0000FFFF == 0x00004344 for ref in immediates):\n        if len(immediates) > 1:\n            print('check', hex(db.disasm(ref)))\n        db.tag(ea, 'alloc.candidate', [ref.opnum for ref in immediates][0])\n    continue\n\n# I did another pass to translate the address of each immediate to a\n# `call` instruction, but you can do this to get some windbg breakpoints.\nfor f, _ in db.selectcontents('alloc.candidate'):\n  for ea, res in func.select(f, 'alloc.candidate'):\n    #db.tag(ea, 'alloc.break', '.printf\"(%p) HIT\\  \n\",@rip;g')\n    print(\"bp {:s}+{:#x}\".format(db.module(), db.offset(ea)))\n\n```\n",
      "votes": "2",
      "user": "Ali Rizvi-Santiago",
      "time": "Jun 25, 2024 at 15:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Thank you and welcome on RE.SE. Oh, I think it is a valid answer, even though it isn't spot on for my question (in which I ask for an interactive way). However, this helps me still, because in absence of an answer I've been looking for other ways to achieve the same. So thank you.",
          "time": null
        }
      ]
    }
  ]
}