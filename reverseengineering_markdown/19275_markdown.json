{
  "title": "XMM register instructions and their c equivalents",
  "link": "https://reverseengineering.stackexchange.com/questions/19275/xmm-register-instructions-and-their-c-equivalents",
  "content": "I'm trying to convert some x86 assembly back into C++, and I cannot figure out how this set of instructions was originally written.\n\n```\nmovd xmm0,eax ; byte read from device '0x04'\ncvtdq2pd xmm0,xmm0 ; convert packed to double?\nshr eax,0x1F ; highest bit\naddsd xmm0,qword ptr ds:[eax*8+0x4F6CC0] ; global [0, 4294967296] if I read it right\ncvtpd2ps xmm0,xmm0 ; double to packed?\nmovss dword ptr ds:[ebx+0x34],xmm0 ; store the result\n\n```\nI've tried various forms of casting float and double to other data types on Compiler Explorer but I cannot find anything that reproduces the cvtdq2pd and cvtpd2ps instructions.\n\nWhat would the above code look like in c/c++ and what is the resulting data type?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "x86",
    "float"
  ],
  "user": "Twifty",
  "time": "Sep 6, 2018 at 22:18",
  "comments": [
    {
      "user": "Rup",
      "text": "I'd guess the first four lines are loading an unsigned 32-bit value into a double: if cvtdq2pd treats the input as signed then you'd need to add 1<<32 to correct the output if the top bit of the input is set.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You likely won't get an exact reproduction because cvtdq2pd takes the lower 64 bits of the second operand but since we're limited to 32 bits because we're using eax here, there are probably better(?) instructions to use.\n\ncvtsi2sd xmm0, eax\n\nwill do the same thing as\n\nmovd xmm0,eax\n\ncvtdq2pd xmm0,xmm0\n\nSee here https://www.felixcloutier.com/x86/CVTDQ2PD.html & https://www.felixcloutier.com/x86/CVTSI2SD.html\n\nSo really what it's doing is converting a 32 bit signed integer value into a double precision floating point.\n\nOnto your actual question:\n\ncvtpd2ps xmm0,xmm0 ; double to packed?\n\nThis will pack the two double precision floats at xmm0[0:63] & xmm0[64:127] into the lower 64 bits of xmm0, converting them from double to single precision floating point values (xmm0[0:31] & xmm0[32:63]).\n\nRef: https://www.felixcloutier.com/x86/CVTPD2PS.html\n\nSo if the lower 64 bits of xmm0 represented a double, it's now been converted to a 32 bit float, which now sits in the lower 32 bits of xmm0.\n\nmovss dword ptr ds:[ebx+0x34],xmm0\n\nNow stores the 4 byte result from xmm0[0:31] into [ebx+0x34], which we know is a single precision float from the result of the cvtpd2ps operation.\n\nSo the result of this operation is a 32 bit float.\n\nRef: https://www.felixcloutier.com/x86/MOVSS.html\n\nThis code here should be a reasonable approximation. In Godbolt it gives me similar assembly to what you have.\n\n```\ndouble* d_arr = (double*)0x4F6CC0;\n\nint main() {\n\n    int in = 4;\n    int signbit = ((unsigned int)in >> 31);\n    float result = *(double*)(d_arr + signbit) + in;\n    return 0;\n}\n\n```\nConclusion:\n\ncvtdq2pd & cvtpd2ps are too powerful for what's actually being calculated here. Unless I'm reading this totally wrong, the upper 64 bits of xmm0 are never relevant to the result.\n\nDisclaimer:\n\nI've never used floating point assembly before. I just looked up the docs now. I could be missing something.\n\n",
      "votes": "9",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}