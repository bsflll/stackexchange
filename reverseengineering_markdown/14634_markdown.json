{
  "title": "How to debug packet processing with overlapped socket on Windows",
  "link": "https://reverseengineering.stackexchange.com/questions/14634/how-to-debug-packet-processing-with-overlapped-socket-on-windows",
  "content": "The problem is quite complex so i don't want to run into unneccessary details.\n\nI have a network application, that communicates with multiple clients at once via UDP. I haven't written it and there is no way to get source codes. Its author has abandoned it so i cannot expect any kind of support from his side. That server application contains a bug, that allows anyone to crash it by sending a specificaly malformed packet. I need to develop some kind of fix on my own.\n\nI'm trying to analyze the program using IDA Free, x64dbg and some other tools. However i am unable to find the code, which is processing the received packets. First i've looked up the API calls and found a call to WSARecvFrom (documentation by MSDN) and set a breakpoint to it. But inspecting its arguments i found out, it is using overlapped sockets. I learned little bit about this model here. According to that article, the receive operation is performed asynchronously and completed later and there are 2 ways how the program can be notified when it's finished.\n\nHowever in my application both lpCompletionRoutine and lpOverlapped.hEvent are NULL. Yet the function always return -1 and WSAGetLastError() is 3E5 (WSA_IO_PENDING).\n\n\nIf lpCompletionRoutine and lpOverlapped.hEvent are both NULL, how does the application know, when to process the received data and more importantly, how do i find that code, which processes those data??\n\nEDIT: I have tried searching API call WSAGetOverlappedResult, there isn't any. I also tried setting a hardware breakpoint on that buffer, but it didn't break until exception ACCESS_VIOLATION, where data were already in buffer and being processed.\n\nI need to find the beginning of the processing, but there is quite a lot of code between.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "701",
  "tags": [
    "windows",
    "winapi",
    "networking"
  ],
  "user": "Youda008",
  "time": "Feb 13, 2017 at 14:48",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "This is really more of a programming question, but are there calls to WSAGetOverlappedResult?",
      "time": null
    },
    {
      "user": "Youda008",
      "text": "Unfortunately, there aren't, i have already searched for them, should have written it in the question. I also tried hardware breakpoint on that buffer, but it didn't work and i don't understand why. Look at the edited question.",
      "time": null
    },
    {
      "user": "Youda008",
      "text": "So the problem was, it was using GetQueuedCompletionStatus instead of WSAGetOverlappedResult. I had to find it the hard way - going back in code flow through return addresses on stack and setting hardware memory breakpoints on various places to trace where those data came from.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "maybe you can write up a detailed answer on how exactly you did it?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "So the problem was, the network application was using GetQueuedCompletionStatus instead of WSAGetOverlappedResult. It is explained here: https://support.microsoft.com/cs-cz/help/181611/socket-overlapped-i-o-versus-blocking-nonblocking-mode. I just somehow missed this article.\n\nIf you're asking how i found it out, well i had to do it the hard way. I started at the instruction causing ACCESS_VIOLATION, and i went backwards in the code flow using return addresses on stack trying to trace the origin the malformed data. Unfortunately the crash was happening in other thread than packet processing, so i also had to use hardware memory breakpoints to find, where are those data copied from, etc.\n\nOne mistery however remains unsolved, and that's: Why didn't a hardware breakpoint put directly in the buffer passed to WSARecvFrom pause my program? When code reaches GetQueuedCompletionStatus, data are clearly there, but it passes my breakpoint and performed this operation without breaking.\n\n",
      "votes": "1",
      "user": "Youda008",
      "time": "Feb 18, 2017 at 10:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "Re the last paragraph: hw breakpoints set in user mode won't catch data being written from the kernel mode. You need to use a kernel debugger for that.",
          "time": null
        }
      ]
    }
  ]
}