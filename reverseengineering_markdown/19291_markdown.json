{
  "title": "Correct my understanding on a basic allocation memory",
  "link": "https://reverseengineering.stackexchange.com/questions/19291/correct-my-understanding-on-a-basic-allocation-memory",
  "content": "Here is the function\n\nIf I understand correctly:\n\nThen another pointer of memory size  3200 is created.\nThe address of this new pointer is written in the first buffer between the bit 127 to the bit 127+64=191. \n\nThen we return the address of the first buffer.\n\nAm I right?\n\nThank you very much!!!\n\nPS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "70",
  "tags": [
    "assembly",
    "linux",
    "x86-64"
  ],
  "user": "David Labay",
  "time": "Sep 8, 2018 at 15:49",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes!\n\nWell it will be the 128th bit. The qword at rax+0x10 is 128 bits from the head of your first malloc.\n\nBut these aren't strictly bit offsets. You can calculate how many bits from the start of memory, but I would question why it matters. \n\nrax is a 64 bit register so you can use it to represent 2^64 values. \n\nIf rax is 0x12345678 and I add 1, what should happen? It will become 0x12345679 regardless of how many bits you want that to represent. (Oversimplification but I hope this make the point).\n\nFor example: mov dword ptr [rax+4], 0xC8\n\nRef: https://www.felixcloutier.com/x86/MOV.html\n\nFrom the above ref, this is a mov m32, imm32 which means copy a 32bit constant into the 32bit DWORD through this pointer [rax+4]\n\nSo because [rax+4] represents a pointer to byte addressable memory, the +4 represents 4 bytes.\n\nThis is only because the m32 operand to mov is concerned with the address of bytes. There are other x86 instruction that can manipulate bits, but not this one.\n\n",
      "votes": "4",
      "user": "Abigail",
      "time": "Sep 8, 2018 at 18:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}