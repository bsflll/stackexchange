{
  "title": "How to find the location of the vtable?",
  "link": "https://reverseengineering.stackexchange.com/questions/5956/how-to-find-the-location-of-the-vtable",
  "content": "Actually, I am trying to learn a little about vtable overflows. So, my learning documents state the following: \n\nSo, my question is, how do I find the location of the vtable pointer ? \n\nI mean, do I have to search through PEB like when I am trying to find the base address from some modules. Or, is this specific for each situation ?\n\n",
  "votes": "9",
  "answers": 1,
  "views": "11k",
  "tags": [
    "debuggers",
    "c++",
    "vtables"
  ],
  "user": "Dirk",
  "time": "Jul 28, 2014 at 13:50",
  "comments": [],
  "answers_data": [
    {
      "content": "This is compiler dependent - the compiler may place the vtable wherever it wants to, as long as it does it consistently. However, in most cases, the vtable pointer is the first element (at offset 0) of the generated structure.\n\n```\nclass test {\n    int a;\n    int b;\n    test()          { ...; }\n    ~test()         { ...; }\n    void somefunc() { ...; }\n    int c;\n}\n\n```\nwould use this memory layout for the class:\n\n```\n+----------------+               +--------------+\n|  vtable        | ------------> | test         |\n+----------------+               +--------------+\n|  a             |               | ~test        |\n+----------------+               +--------------+\n|  b             |               | somefunc     |\n+----------------+               +--------------+\n|  c             |\n+----------------+\n\n```\nso (assuming pointers and integers are all 4 bytes), the vtable is at offset 0, a at 4, b at 8 and c at 12.\n\nNote that not all compilers use this convention. For example, the Watcom C++ 386 compiler didn't use a vtable at all, but mixed the function pointers with data. (I know this case because i once disassembled a game that was compiled with Watcom 20 years ago. Not that i expect you to ever see this kind of layout in a modern compiler, just to provide an example that it can be different):\n\n```\n+----------------+\n|  test          |\n+----------------+\n|  ~test         |\n+----------------+\n|  a             |\n+----------------+\n|  b             |\n+----------------+\n|  somefunc      |\n+----------------+\n|  c             |\n+----------------+\n\n```\nThe entries at offset 0 and 4 (again, assuming 4 byte integers/pointers) are the parameterless constructor and destructor function of the class, the rest is a mix of variables and methods in the order they appear in the class definition. Of course, this is horribly inefficient, because the compiler has to initialize every class method whenever an object is instantiated, instead of just setting one pointer to the vtable.\n\nTL;DR: In most cases, the vtable pointer is the first element of the class structure, but you really need to know which compiler was used and which conventions this compiler has.\n\nAnother thing - you talk about a \"vtable overflow\" in your original post. Your \"normal\" exploit doesn't overflow a vtable; the vtables are pre-initialized when your program starts, and (normally) never ever change. To write an exploit, you would either:\n\nAs vtables normally don't change, and may even be placed in a read-only memory segment by the compiler, your normal exploit ignores 1. and uses 2.\n\n",
      "votes": "11",
      "user": "Guntram Blohm",
      "time": "Jul 28, 2014 at 13:52",
      "is_accepted": true,
      "comments": []
    }
  ]
}