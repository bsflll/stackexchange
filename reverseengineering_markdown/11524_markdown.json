{
  "title": "Hidden code in dissasembly",
  "link": "https://reverseengineering.stackexchange.com/questions/11524/hidden-code-in-dissasembly",
  "content": "I'm testing malware that built from single EXE file and it doesn't load any other DLLs.\n\nI can see that EXE is register as COM object (I don't know how EXE can be COM object...). But when I run it and looking in procmon, I can see that it writes values to the registry.\n\nI tried to open the EXE file with IDA Pro 6.8 / OllyDbg, and I can't see any RegSetValue call or even reference (there is no load of Advapi32.dll).\n\nI suspect that there is some hidden code that I can't see in these disassembles. \n\nIf there is such hidden code how can I see it? And btw, how EXE can register as COM object at all?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "malware"
  ],
  "user": "nrofis",
  "time": "Dec 14, 2015 at 13:52",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "When checking the file with procmon, remember you can see the stack backtrace for each API call. This might give you a hint what happens in your executable.",
      "time": null
    },
    {
      "user": "nrofis",
      "text": "@GuntramBlohm thank you I really forget it! This can be very usefull.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What you see is probably a \"packed/obfuscated\" malware. \nThere are many ways to \"hide\" RegSetValue from static analysis but my best guess is that what you see is Runtime API Address Resolution:\n\"There are two main types of API obfuscation. In the first type, all API function addresses are resolved before the main routine of the program begins. In the second, API function addresses are resolved individually at call-time. \nYou can read more about it from this  paper by Symantec.\nIf you want to \"see the code\" you would have to unpack it first.\n\nFor your second question there is a good discussion about it over here.\n\n",
      "votes": "2",
      "user": "GelosSnake",
      "time": "Dec 14, 2015 at 14:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "nrofis",
          "text": "Thank you for your answer, its probably the situation. But what do you mean by \"you would have to unpack it first\"?  How do I unpack it?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "@nrofis: See Unpacking Binaries.",
          "time": null
        },
        {
          "user": "GelosSnake",
          "text": "Its a bit tricky and I will never be able to give you the \"right\" answer. But since you already said you are working with ollydbg, step slowly into the code, look for functions which neither write file to disk or can be used to inject code to other process. For example writeprocessmemory than try to dump the PE with OllyDumpEx . But again, its a very long shot.   If you really want to learn how to deal with malware than I recommend the following book: nostarch.com/malware",
          "time": null
        }
      ]
    }
  ]
}