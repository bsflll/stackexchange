{
  "title": "What does the code keyword in Ghidra mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/25297/what-does-the-code-keyword-in-ghidra-mean",
  "content": "I'm reversing a binary and I found this strange keyword I haven't seen before  called 'code'. I looked up the C++ keywords and there doesn't seem to be one. Could anyone provide me with more information about this keyword?\n\n```\n      if (*(int *)(param_1 + 4) != 0) {\n        (*(code *)(&PTR_thunk_FUN_005a7840_008dd8b8)[(int)param_2[4]])(*(int *)(param_1 + 4));\n      }\n\n```\nIn Assembly.\n\n```\n00491b95 85  c0           TEST       EAX ,EAX\n00491b97 74  10           JZ         LAB_00491ba9\n00491b99 8b  4e  10       MOV        ECX ,dword ptr [ESI  + 0x10 ]\n00491b9c 8b  14  8d       MOV        EDX ,dword ptr [ECX *0x4  + -> thunk_FUN_005a7840 ] = 00401c30\n         b8  d8  8d \n         00\n00491ba3 50              PUSH       EAX\n00491ba4 ff  d2           CALL       EDX\n\n```\n",
  "votes": "5",
  "answers": 1,
  "views": "5k",
  "tags": [
    "ghidra",
    "decompiler"
  ],
  "user": "DohnJoe",
  "time": "Jun 14, 2020 at 22:42",
  "comments": [
    {
      "user": "Michael Karcher",
      "text": "Not an answer, because I did no diligent research, but I assume that \"code*\" is supposed to mean \"a function pointer of unspecified type\", just like \"void*\" means \"a data pointer of unspecified type\".",
      "time": null
    },
    {
      "user": "DohnJoe",
      "text": "I see what you're getting at and it does seem like it, but I want more info on it.",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "(I'm not totally sure about this to post it as an answer). The decompiler concluded that there is a CALL to the address pointed to by your code. It doesn't know its prototype but it does know that this is called as a function. You can't normally CALL a void *, so code * is the way to show it. Consider it a cast to unknown-prototyped function.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There was a function rabbit-hole that I was following in Ghidra that had the (**(code **)) as well.\n\nI cross-examined that section in x64dbg and stepped-over the execution and monitored the EAX register to see the result of return uVar3; or return *(undefined4 *)(iVar2 + 0x2c);\n\nThe result of this (**(code **)) function was a function pointer (0x040E2B98) which contained a function pointer (0x03DE2D10) which contained a function pointer (0x03B2802B) which FINALLY was an actual function that began with push esi.\n\nThus, the answer to this question is...\n\n(code *) is the same as (void *)\naka - function pointer\naka - the address location of the beginning of a function\naka - read this MSDN VOID PTR DOCUMENTATION\n\n```\n...\n  if ((iVar2 != 0) && (*(int *)(iVar2 + 0x40) != 0)) {\n    uVar3 = (**(code **)(*(int *)(*(int *)(iVar2 + 0x40) + 0x28) + 0xc70))();\n    return uVar3;\n  }\n  iVar2 = FUN_03b03811();\n  if (iVar2 == 0) {\n    return 0;\n  }\n  return *(undefined4 *)(iVar2 + 0x2c);\n\n```\n",
      "votes": "4",
      "user": "Stryker2k2",
      "time": "Jul 11, 2022 at 14:26",
      "is_accepted": true,
      "comments": []
    }
  ]
}