{
  "title": "Stuck in x87 FLD instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/13683/stuck-in-x87-fld-instruction",
  "content": "I've been working for my final project which is a disassembler for AMD64 instruction set, and i was trying to disassemble machine code by hand to understand it correctly. But i got stuck at a x87 instruction.\n\nMachine code of instruction is: dd 04 c5 60 40 08 08...\n\nI've checked AMD64 manual vol3, and it says DD is an x87 instruction and with the help of ModRM byte ,which is 0b00000100, my ModRM.reg field is 000 and with this information manual says this instructions meaning is \"FLD mem64real\". But since I've compiled this code for i386 target architecture i think that i shouldn't have 64 bit memory adress. \n\nBut the most interesting part is when i checked the binary with objdump, it says that this bytes are corresponds to fldl   0x8084060(,%eax,8) but i can't find any information about FLDL instruction nor how does objdump find this. \n\nSo my question is am i doing something wrong ?\n\nHow objdump think that instruction is FLDL but manual says its FLD ?\n\nTarget machine of binary is i386.\n\nI use AMD64 manual volume 3 to check instructions\n\nVersion of objdump is GNU objdump (GNU Binutils for Debian) 2.26.1\n\nHere is readelf output of binary\n\n```\nELF Header\nMagic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF32\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              EXEC (Executable file)\nMachine:                           Intel 80386\nVersion:                           0x1\nEntry point address:               0x80482c0\nStart of program headers:          52 (bytes into file)\nStart of section headers:          3744 (bytes into file)\nFlags:                             0x0\nSize of this header:               52 (bytes)\nSize of program headers:           32 (bytes)\nNumber of program headers:         8\nSize of section headers:           40 (bytes)\nNumber of section headers:         31\nSection header string table index: 28\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "742",
  "tags": [
    "disassembly",
    "objdump",
    "amd64"
  ],
  "user": "Efe Can",
  "time": "Oct 9, 2016 at 21:38",
  "comments": [
    {
      "user": "Vitaly Osipov",
      "text": "\"For example, fld[lst] means fldl, flds, or fldt; fst{ls} means fst, fstl, or fsts; and fild{l|ll} means fild, fildl, or fildll.\" docs.oracle.com/cd/E19620-01/805-4693/805-4693.pdf also felixcloutier.com/x86/FLD.html",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "fldl is just the AT&T syntax for the \"FLD\" instruction involving a long (4 bytes) register. This is equivalent to \n\n```\nfld     qword ptr [eax*8 + 8084060h]\n\n```\nin Intel syntax.\n\nYou could instruct objdump to emit Intel syntax with the -M intel flag.\n\nWhile i386 does not support 64-bit addresses, it certain can read 64 bits out given an address. The \"FLD m64fp\" instruction reads 8 bytes from the input address (0x8084060 + eax*8 in this case), interprets it as a floating point number (a double), and then pushes it to the FPU register stack.\n\nIn this case 0x8084060 is likely an address to a global array of double and eax is an index to fetch a value out of the array.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Efe Can",
          "text": "But where did +eax*8 come from ? I know that DD means it's an x87 instruction and i use ModRM byte(04) to find it's fld and i think somehow c5 means eax*8. But i cannot find what is that C5 byte or which table i should look to find its values.",
          "time": null
        }
      ]
    },
    {
      "content": "So this answer only focuses on the second question of @Efe:\nHow is +eax*8 constructed.\n\nYou can determine the SIB-offsets with the following steps. We analyze the first two bytes 04 c5 of the whole instruction:\n\n```\ndd 04 c5 60 40 08 08\n\n```\nFirst, we only focus on the MOD-REG-R/M Byte (look here for details)\n\n```\nMOD-REG-R/M Byte = 04\n--------------------------------------------------\n04   0000 0100\nMOD  00          Meaning: SIB with no displacement\nREG  000         Meaning: eax (32-Bit)\nR/M  100         Meaning: SIB with no displacement\n\n```\nSecond, we analyze the SIB Byte of the instruction (look here for details). Scaled indexed addressing mode uses the second byte (namely, SIB byte) that follows the MOD-REG-R/M.\n\n```\nSIB Byte = C5\n--------------------------------------------------\nc5    1100 0101\nScale 11    Meaning: Index*8\nIndex 000   Meaning: eax register\nBase  101   Meaning: Displacement only\n\n```\nThe combination of MOD and Base lead to (look here for details)\n\n```\nMOD = 00 and BASE field = 101:\n--------------------------------------------------\ndisp + eax*n\n\n```\n",
      "votes": "2",
      "user": "knx",
      "time": "Oct 10, 2016 at 7:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "Efe Can",
          "text": "I've totally got distracted with mem64real keyword in manual and forgot about that we determine memory address starting with ModRM.r/m field. Thanks for reminding me that",
          "time": null
        }
      ]
    }
  ]
}