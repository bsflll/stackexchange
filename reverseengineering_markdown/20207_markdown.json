{
  "title": "What is __sighandler_t struct and purpose of SIGTRAP signal handler",
  "link": "https://reverseengineering.stackexchange.com/questions/20207/what-is-sighandler-t-struct-and-purpose-of-sigtrap-signal-handler",
  "content": "I'm reversing an ELF x86 binary which apparently has anti-reversing/anti-debuging protections, and one of the first thing the ELF does is to call a sys_signal with a SIGTRAP value :\n\n```\n.text:08048063                 mov     eax, 48         ; sys_signal\n.text:08048068                 mov     ebx, 5          ; SIGTRAP\n.text:0804806D                 mov     ecx, offset sub_80480E2\n.text:08048072                 int     80h             ; LINUX - sys_signal\n.text:08048074                 jmp     short loc_8048077\n\n```\nI have three questions :\n\nI found in signal.h those lines : \n\n```\n/* Type of a signal handler.  */\ntypedef void (*__sighandler_t) (int);\n\n```\nIs __sighandler_t only a ptr to a function?\n\nThanks ! Feel free to tell me if I'm not beeing clear or if I forgot a usefull information.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "anti-debugging",
    "struct"
  ],
  "user": "Nark",
  "time": "Dec 27, 2018 at 10:06",
  "comments": [],
  "answers_data": [
    {
      "content": "When a SIGTRAP is raised, normally the handler given in parameter of signal is called. If you have a debugger attached, this function will not get called.\nIf your handler is never called, you can assume a debugger is attached.\n\nHere is a simple example:\n\n```\n#include <signal.h>\n#include <stdio.h>\n\nvoid on_trap(int n)\n{\n        puts(\"on_trap\");\n}\n\nvoid callme(void)\n{\n        puts(\"hello\");\n        __asm__ volatile(\"int $0x03\");\n        puts(\"bye\");\n}\n\nint main(void)\n{\n        signal(SIGTRAP, on_trap);\n        callme();\n        return 0;\n}\n\n```\nNormal run:\n\n```\n$ ./antidebug\nhello\non_trap\nbye\n\n```\nWith gdb:\n\n```\ngdb -q antidebug\nReading symbols from antidebug...(no debugging symbols found)...done.\n(gdb) r\nStarting program: /tmp/antidebug\nhello\n\nProgram received signal SIGTRAP, Trace/breakpoint trap.\n0x0000000008001174 in callme ()\n(gdb) c\nContinuing.\nbye\n\n```\nsighandler_t is a typedef for a function pointer, not a structure.\nIf you want to define a memory area as a structure, you can use the shortcut ALT+Q.\n\nsub_80480E2 contains code, as mentioned this is not a structure but a function pointer.\nImagine you have the syscall sigaction instead, you can simply check the man page to see the structure definition.\nBut IDA Pro has most of structures definition from standard libraries.\n\nYes.\n\n",
      "votes": "4",
      "user": "wisk",
      "time": "Dec 27, 2018 at 16:27",
      "is_accepted": true,
      "comments": []
    }
  ]
}