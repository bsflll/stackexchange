{
  "title": "segmentation fault at `mov byte [esi+7], al`",
  "link": "https://reverseengineering.stackexchange.com/questions/20868/segmentation-fault-at-mov-byte-esi7-al",
  "content": "```\nSection .text\n        global _start\n\n_start:\n        jmp short GoToCall\n\nshellcode:\n        pop             esi\n        xor             eax, eax\n        mov byte        [esi+7], al\n        lea             ebx, [esi]\n        mov long        [esi + 8], ebx\n        mov long        [esi + 12], eax\n        mov byte        al, 0x0b\n        mov             ebx, [esi]\n        lea             ecx, [esi + 8]\n        lea             edx, [esi + 12]\n        int             0x80\n\nGoToCall:\n        Call shellcode\n        db      \"/bin/shJAAAABBBB\"\n\n```\nAfter compiling the above shellcode I got below disassembly. where at 3rd line I am getting the Segmentaion fault.\n\n```\n(gdb) disassemble shellcode \nDump of assembler code for function shellcode:\n   0x08049002 <+0>: pop    %esi\n   0x08049003 <+1>: xor    %eax,%eax\n=> 0x08049005 <+3>: mov    %al,0x7(%esi)\n   0x08049008 <+6>: lea    (%esi),%ebx\n   0x0804900a <+8>: mov    %ebx,0x8(%esi)\n   0x0804900d <+11>:    mov    %eax,0xc(%esi)\n   0x08049010 <+14>:    mov    $0xb,%al\n   0x08049012 <+16>:    mov    (%esi),%ebx\n   0x08049014 <+18>:    lea    0x8(%esi),%ecx\n   0x08049017 <+21>:    lea    0xc(%esi),%edx\n   0x0804901a <+24>:    int    $0x80\nEnd of assembler dump.\n(gdb) printf \"%s\", $esi\n/bin/shJAAAABBBB(gdb) printf \"%s\", $esi+7\nJAAAABBBB(gdb) si\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x08049005 in shellcode ()\n(gdb) \n\n```\n",
  "votes": "3",
  "answers": 4,
  "views": "2k",
  "tags": [
    "assembly",
    "shellcode"
  ],
  "user": "Mukesh",
  "time": "Mar 13, 2019 at 20:18",
  "comments": [],
  "answers_data": [
    {
      "content": "The instruction that causes the SIGSEGV is trying to store a '\\0' after the 'h' in \"/bin/shJAAAABBBB\".\n\nAll your code/data is in the .text section which is probably read-only.\nRun objdump -h on the resulting binary, and you should see something like the following in the output:\n\n```\n  5 .text         00000031  00001000  00001000  00001000  2**4\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n\n```\nwhich contains the addresses where the bytes of the string are stored.\n\n",
      "votes": "2",
      "user": "booto",
      "time": "Mar 13, 2019 at 22:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "wisk",
          "text": "Actually for ELF executable, memory protections are set according to the segment and not the section. But anyways, you're right.",
          "time": null
        },
        {
          "user": "Mukesh",
          "text": "If I want to write into the \"/bin/shJAAAABBBB\" and execute the shellcode what update I have to make in the assemble?",
          "time": null
        }
      ]
    },
    {
      "content": "The memory where you shellcode is located and executed is not writable.\nIt could happen for different reasons, my guess is your shellcode is encoded as a C literal string. Since this memory location is not writable, so you get an exception.\n\nIf you just want to try the shellcode, allocate a memory page using mmap(2) with flag PROT_EXEC | PROT_READ | PROT_WRITE, copy your shellcode inside and jump on it.\n\nBy the way, your shellcode is null byte free, if you copy it using strcpy(3) function, you can remove both xor eax, eax and mov [esi+7], al because strcpy(3) will write the 0x00 for you. Just make sure to trim \"/bin/shJAAAABBBB\" to \"/bin/sh\".\n\n",
      "votes": "1",
      "user": "wisk",
      "time": "Mar 13, 2019 at 22:36",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "It's because /bin/sh needs \\0, so replace it \"AAAABBBB\" with \\0\n\n",
      "votes": "1",
      "user": "Febriyanto Nugroho",
      "time": "Oct 5, 2019 at 12:12",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As the answer of @booto shows, objdump -h prints out .text section is readonly.\n\nYou can try to compile like this and don't have to update the original source code:\n\n```\nnasm -f elf32 -o ./Execve.o Execve.nasm\nld -N -o ./Execve ./Execve.o\n\n```\nld -N:\n\n",
      "votes": "0",
      "user": "jasonz",
      "time": "Dec 27, 2019 at 7:25",
      "is_accepted": false,
      "comments": []
    }
  ]
}