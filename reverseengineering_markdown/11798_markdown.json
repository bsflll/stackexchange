{
  "title": "Exe Unpack or Process Spy - Getting process internals",
  "link": "https://reverseengineering.stackexchange.com/questions/11798/exe-unpack-or-process-spy-getting-process-internals",
  "content": "I want to rewrite a application tool in C# that is written in VB6. This application does not work in windows 8/10 due to some compatibility issues.\n\nIt is an old game server management tool. This application read and writes to another process memory(a game).\n\nI want the memory address to which the tool write/read from.\n\nThe tool is only 42kb. and use kernel32.dll to read game process memory.\n\nI tried to decompile this application from publically available decompiler but it didn't work. The file is packed with some PE-Pack was released by ANAKiN.\n\nI also tried to read game memory values but unable to figure out which values i need because of a large amount of values.\n\nIs there any way i can spy/spectate on this tool, to find out what it is requesting from kernel32 library. or what external memory addresses it is reading from or writing to ?. \n\nOr there is any unpacker tool that can unpack the file so i can decompile it.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "680",
  "tags": [
    "decompilation",
    "unpacking",
    "process"
  ],
  "user": "Ahtsham Farooq",
  "time": "Jan 19, 2016 at 15:19",
  "comments": [],
  "answers_data": [
    {
      "content": "The easiest solution would be to monitor the application with API Monitor to see what parameters it supplies to ReadProcessMemory() and WriteProcessMemory().\n\n\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Jan 19, 2016 at 16:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ahtsham Farooq",
          "text": "ok i will try that",
          "time": null
        }
      ]
    }
  ]
}