{
  "title": "What is this 2D vector image (file) format?",
  "link": "https://reverseengineering.stackexchange.com/questions/33243/what-is-this-2d-vector-image-file-format",
  "content": "Context: I'm currently re-engineering an old (2015) E-paper display tag just for the fun of it. For the curious ones, I'm using Ghidra to disassemble and decompile, and trying to make up some sense of the results. The tag uses an ARM Cortex M0 based MCU and a 1.44 inch EPD, and receives its display content via NFC.\n\nAfter receiving some (RLE compressed) KB of data and inflating that data, the application interprets the data. This is my current knowledge about the contents:\n\nElement type 0x20 is special. Each data chunk is appended to a buffer. When finally element type 0x13 is used, its data are also appended, and then the whole buffer is the image to draw.\n\nI spent several hours in web research but could not find any hint. The \"usual suspects\" like CGM, EMF, EPS, SVG, WMF or Gerber do not match. I looked into few others, too.\n\nWhat (file) format of a (simple) vector graphic is this?\n\nThe application is a mix of apparently assembler, C, and C++ code. Specifically all drawing functions receive the same pointer, which is certainly this. There is also a function pointer table in the structure pointed to, known as vtable. This makes me conclude that libraries are used.\n\nCurrently I'm at a bit-block transfer function that supports 16 colours. It can be that this is a proprietary format, but it makes no sense to support more than the two colours of EPDs of that time. That's why I think it is some more generic format.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "82",
  "tags": [
    "file-format",
    "graphics"
  ],
  "user": "the busybee",
  "time": "Oct 10, 2024 at 19:00",
  "comments": [
    {
      "user": "jsotola",
      "text": "could be custom file format",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "(These are only assumptions). Since the device has a simple display and that basic shapes are specified by a single byte of the protocol I would try to find a correlation between packet bits and the actual visual result. This may be as simple as 1/0 to paint/clear pixel. Expect a checksum of the packet and/or parity bits inbetween.",
      "time": null
    },
    {
      "user": "the busybee",
      "text": "@jsotola Thanks for your hint, it's true, however, even though I'm in CS for decades and always learning, I cannot know all file formats. :-D If it is a known file format, it would make my reengineering a lot simpler. Currently I need to interpret each element type's function in detail.",
      "time": null
    },
    {
      "user": "the busybee",
      "text": "@Yotamz Thanks for your suggestions, I will surely verify my findings with experiments. Currently the device is still in its code-readout fixture and I still need to find a way to communicate with NFC.",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "True. I meant to say that it may be a common format for this type of embedded device - but not necessarily a well known graphics file format that is seen in PCs (for reducing overhead, memory use etc.). It makes identifying them harder, for lack of headers/magic values and so on",
      "time": null
    }
  ],
  "answers_data": []
}