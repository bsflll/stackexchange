{
  "title": "How to get all the references to function using PyDBG?",
  "link": "https://reverseengineering.stackexchange.com/questions/2180/how-to-get-all-the-references-to-function-using-pydbg",
  "content": "I'd like to get all the addresses in the binary that some function is called from using PyDbg. The address of the function will be supplied as a parameter. \n\nDo I have actually to scan all the code, looking for the call that is calling that function or is there a more elegant way?\n\nUpdate:\n\nThe function is not exported or imported. \n\nUpdate 2:\n\nFor example ImmDbg  how can it find all the references and show them?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "451",
  "tags": [
    "malware",
    "debuggers"
  ],
  "user": "PhoeniX",
  "time": "Jun 3, 2013 at 19:26",
  "comments": [
    {
      "user": "0xea",
      "text": "im not sure pydbg has any static analysis built into it and so i don't think it could do much more than what Igor suggested",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "For update 2: it does that using static analysis. Roughly the same as IDA. Disassemble the entire binary and note every immediate destination.",
      "time": null
    },
    {
      "user": "PhoeniX",
      "text": "presumably I still do not know about radare capabilities, is there some \"cheep\" static disassembler library that can be connected to PyDbg and produce some sort of \"ImmDbg\" result?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@ph0sec: you shouldn't amend your question with things that broaden instead of narrow down the scope of it.",
      "time": null
    },
    {
      "user": "PhoeniX",
      "text": "@0xC0000022L: So, how do you suggest to ask this question? In my opinion, this will help to understand the matter and resolve the problem I have.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Since you want all the call instructions (and possibly fake calls using push and jmp and similar using opaque predicates) you won't get around static analysis (static-analysis) of the binary. And if the binary is in any way packed or encrypted that means you need to get through that layer first.\n\nIgor's solution will be your best bet short of loading the file into a good disassembler and finding all the cross-references to the function you are interested in. But it has the limitation that Igor already pointed out.\n\nStatic analysis has to deal with a lot of ambiguities and issues when distinguishing data and code. But good disassemblers are fairly good at making the right guess and will offer to interactively mark items one way or the other in case of doubt.\n\nWhat this means is that PyDbg is probably not the right tool for the problem at hand unless you manage to coerce it into making use of a proper full-fledged disassembler to get all cross-references. But the better choice is probably something like radare2 and then, if you are more familiar with PyDbg, applying the gained knowledge to the debugged target in PyDbg.\n\n",
      "votes": "5",
      "user": "0xC0000022L",
      "time": "Jun 3, 2013 at 17:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "PhoeniX",
          "text": "Ok thanks, I understand your point and I'll take a look @ radare. I'd like to understand another thing - in the main question",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@ph0sec: if it's closely related, edit your question, otherwise better ask a new question :) ... it's better than changing the scope of an existing question after people answered.",
          "time": null
        }
      ]
    },
    {
      "content": "This, obviously, will catch only the actual calls, not all potential ones.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Jun 3, 2013 at 17:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "PhoeniX",
          "text": "Thanks, this is indeed the obvious one. But I need all of them :).",
          "time": null
        }
      ]
    }
  ]
}