{
  "title": "Output of gdb `info registers`",
  "link": "https://reverseengineering.stackexchange.com/questions/9221/output-of-gdb-info-registers",
  "content": "Upon running info registers in gdb, we get an output similar to the following:\n\n```\nrax            0x1c 28\nrbx            0x0  0\nrcx            0x400a60 4196960\nrdx            0x7fffffffde88   140737488346760\nrsi            0x1  1\nrdi            0x400932 4196658\nrbp            0x0  0x0\nrsp            0x7fffffffde68   0x7fffffffde68\nr8             0x400ad0 4197072\nr9             0x7ffff7dea560   140737351951712\nr10            0x7fffffffdc30   140737488346160\nr11            0x7ffff7732dd0   140737344908752\nr12            0x4007f0 4196336\nr13            0x7fffffffde80   140737488346752\nr14            0x0  0\nr15            0x0  0\nrip            0x7ffff7732dd0   0x7ffff7732dd0\neflags         0x202    [ IF ]\ncs             0x33 51\nss             0x2b 43\nds             0x0  0\nes             0x0  0\nfs             0x0  0\ngs             0x0  0\n\n```\nWhile I do understand the for rax, rcx etc, GDB is converting the value to decimal for the second column, this doesn't seem consistent. Some registers, namely rsp and rip show the same value in hex, even in the second column. eflags on the other hand shows the flags in the second column.\n\nWhat is the reason that gdb does this? If it is going to show the same info (in case of rsp and rip), isn't it redundant? Also, how does this generalize on other architectures? (The above output is for x86-64).\n\nSource. I re-asked this question since I thought I would find more specific answer in reverse engineering point of view.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "6k",
  "tags": [
    "gdb",
    "register"
  ],
  "user": "Rakholiya Jenish",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "In fact, in assembly you can find only three types of values:\n\nGeneral purpose registers, such as rax, rbx, ..., are used to store either numerical values (that will trigger the behavior of the program) or memory addresses (to know where to read/write or to jump).\n\nOf course, as most of human beings are used to decimal format for the values used in programs, it is important to display a decimal format when the register might contain such values.\n\nNow, it is important to know that memory addresses are usually given in hexadecimal format (mainly for compactness reasons). And, general purpose registers might also contain memory addresses. That is why gdb display both decimal and hexadecimal formats just in case one or the other is the best suitable for the current value.\n\nThe registers rsp, rip (and rbp) are special cases because they are specifically used to store addresses (and only this), thus it would be of no use to translate the content of such registers into decimal format. That is why gdb is only giving an hexadecimal format for these registers.\n\nFinally, the case of the rflags/eflags is a bit special because this register has a meaning that is bit-per-bit dependent (see the following figure).\n\n\n\nTherefore, giving the decimal, hexadecimal or binary format is not really useful to the user (except if you can relate the numbers to the flags instantly). But, it is much more useful to give the list of flags that are set as 'true' (this is the [ IF ] that you see in your example). Yet, gdb gives the hexadecimal value of the eflags as it can be accessed and used as a value in programs (I have seen this for obfuscation purpose).\n\n",
      "votes": "5",
      "user": "perror",
      "time": "Jun 25, 2015 at 7:35",
      "is_accepted": true,
      "comments": [
        {
          "user": "Rakholiya Jenish",
          "text": "Thanks perror. Also from source file of 64bit-core.xml, it seems somewhat clear why it is happening so.",
          "time": null
        }
      ]
    }
  ]
}