{
  "title": "Why is this string on the stack not exactly the one I entered? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/1672/why-is-this-string-on-the-stack-not-exactly-the-one-i-entered",
  "content": "I was trying to understand buffer overflow attacks using the following C program \n\n```\n#include\"stdio.h\"  \n#include\"string.h\"   \nvoid iwontprint()  \n{  \n    printf(\"i wont be printed!\");  \n}  \n\nvoid callme()  \n{  \n    char buffer[8];  \n    gets(buffer);  \n    puts(buffer);  \n}  \n\nint main(int argc,int** argv)  \n{  \n    callme();  \n    return 0;  \n}\n\n```\nLoading up the program in GDB before calling the gets(buffer) gives the following value of ESP : \n\n```\n0xbffff4d4: 0xb7ff0590 0x080484db 0xb7fc1ff4 0xbffff4e8  \n0xbffff4e4: 0x080484b6 0xbffff568 0xb7e79e46 0x00000001\n\n```\nAnd after entering the input 123456789abc\\x7c\\x84\\x04\\x08 I am getting totally different values in ESP :\n\n```\n0xbffff4d4: 0xbffff4d8 0x34333231 0x38373635 0x63626139  \n0xbffff4e4: 0x6337785c 0x3438785c 0x3430785c 0x3830785c\n\n```\nI've already set randomize_va_space = 0\n\n```\n$cat /proc/sys/kernel/randomize_va_space   \n0\n\n```\nCan anybody provide any pointers as to what am I missing here ?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "410",
  "tags": [
    "disassembly",
    "gdb",
    "buffer-overflow"
  ],
  "user": "Novice User",
  "time": "12 years ago",
  "comments": [
    {
      "user": "Mellowcandle",
      "text": "Although very interesting I find it off topic, voting to close",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Your Stack is totally fine. Look more careful at the values:\n\n0x34333231 0x38373635 0x63626139 0x6337785c 0x3438785c 0x3430785c 0x3830785c\n\nwhich interpreted as an ascii string becomes this. literally:\n\n123456789abc\\x7c\\x84\\x04\\x08\n\nAs you can see, it's exactly what you entered. And I mean by that, that for example \\x7c is the String \"\\x7c\" and not \"|\". Use this technique to send the values properly:\n\necho -e \"123456789abc\\x7c\\x84\\x04\\x08\" | ./yourbinary\n\n",
      "votes": "9",
      "user": "samuirai",
      "time": "Apr 9, 2013 at 10:30",
      "is_accepted": true,
      "comments": [
        {
          "user": "Novice User",
          "text": "Thanks for your response. however I am not able to understand why 0x63626139  is there instead of 0x0804847c (which i entered as input in little endian).",
          "time": null
        },
        {
          "user": "Novice User",
          "text": "AFAIK , 0xbffff4d8 & 0x34333231 are for char buffer[8] and 0x38373635 should be for value of EBP (old). Then the next value should be the one i entered (beyond 12 bytes) ?",
          "time": null
        },
        {
          "user": "samuirai",
          "text": "No. You didn't enter 0x0804847c. You entered 0x3830785c, which is: 0x5c==\\ , 0x78==x, 0x30==0, 0x38==8 that is \\x08 as a string. not the byte value 0x08.",
          "time": null
        },
        {
          "user": "0xea",
          "text": "actually , echo won't interpret \\x escapes either unless you specify -e switch",
          "time": null
        },
        {
          "user": "samuirai",
          "text": "Only on Linux. The BSD Version doesn't know this option (unix.com/man-page/FreeBSD/1/echo)",
          "time": null
        }
      ]
    },
    {
      "content": "Samurai's answer is correct , but put more clearly , your mistake is that you enter the literal string \n\n```\n123456789abc\\x7c\\x84\\x04\\x08\n\n```\nwhere as what you probably want is something like:\n\n```\nperl -e 'print \"123456789abc\\x7c\\x84\\x04\\x08\"' | ./yourbinary\n\n```\nIn the first case the \\x7c\\x84\\x04\\x08 is just that, a 16 characters length string, where in the second case, the \\x escape sequence is actually interpreted and \\x7c\\x84\\x04\\x08 is printed as just 4 bytes.\n\n",
      "votes": "4",
      "user": "Patrick Mevzek",
      "time": "Mar 26, 2018 at 8:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}