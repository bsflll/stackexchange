{
  "title": "What could this sequence of assembly instructions possibly mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/2167/what-could-this-sequence-of-assembly-instructions-possibly-mean",
  "content": "I have recently came across the following sequence of assembly instructions. \n\n```\ncall    ds:WSAStartup\npush    ecx\npush    edi\nmov     ecx, 69E65AC4h\nmov     edi, 2776452Ah\npop     edi\npop     ecx\njmp     short loc_ABCD\n\n```\nPlease help me make sense of these particular 4 instructions below:\n\n```\nmov     ecx, 69E65AC4h\nmov     edi, 2776452Ah\npop     edi\npop     ecx\n\n```\nWhy would you move direct values into registers, just to over write them with next 2 instructions?\n\nADDED:\nIn regards to Rolf Rolles and peter ferrie comments bellow. First off, thank you, guys, for your input. I really appreciate it. What puzzles me the most and seems to be relatively interesting is the fact the the executable in question seems to be clean and clear of code obfuscation of any sort. How relevant is such a small amount of obfuscation for AV defeating purposes? I would assume, not too relevant. \n\nI have also came across the post here on RE What is the purpose of 'mov edi, edi'?  . \nRE user QAZ on the accepted answer mentioned something about support of run time hot patching. Could it be something along those lines?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "736",
  "tags": [
    "disassembly",
    "windows",
    "assembly",
    "x86"
  ],
  "user": "PSS",
  "time": "Apr 28, 2017 at 12:58",
  "comments": [
    {
      "user": "alexanderh",
      "text": "Hi. Could you post the hash of the file? I'd like to check out the obfuscation. Thanks.",
      "time": null
    },
    {
      "user": "PSS",
      "text": "@alexanderh. I might not be understanding something here, but how hash of the file could let you check it for obfuscation? Thanks.",
      "time": null
    },
    {
      "user": "alexanderh",
      "text": "because I can use the hash to locate the executable.",
      "time": null
    },
    {
      "user": "Rolf Rolles",
      "text": "With regards to your addendum: no, that code was not inserted for hot-patching purposes.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Without further information, it looks like deliberate obfuscation:  instructions with no ultimate effect inserted into the code to make it harder to read.  I doubt that code was generated by a compiler.\n\n",
      "votes": "8",
      "user": "Rolf Rolles",
      "time": "Jun 2, 2013 at 3:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "PSS",
          "text": "I thought about it as well. But it is in line after normal \"making total\" sense instructions. I don't even see it being any useful for obfuscation purposes. 4 instructions inside perfectly easy to ready and follow assembly. Totally weird :)",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "Post some more of the context, then; some more instructions before and after.",
          "time": null
        },
        {
          "user": "PSS",
          "text": "Updated. Calls WSStartup and then jumps right after. Nothing extraordinary.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "It seems definitely to be obfuscation.  The compiler is pretty good about eliminating useless code like that (through non-memory-based liveness analysis, one of the oldest and simplest global data flow analyses) so I doubt that code would be generated by a compiler, except perhaps with optimizations disabled (and even then I am skeptical, since the values are not used in any computation).",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "it's used to attempt to defeat AV signatures, by inserting useless instructions that would otherwise allow a match against the call.",
          "time": null
        }
      ]
    }
  ]
}