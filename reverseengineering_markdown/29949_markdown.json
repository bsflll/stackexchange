{
  "title": "How to define \"code\" variable type in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/29949/how-to-define-code-variable-type-in-ghidra",
  "content": "Of all the confusing parts of Ghidra, I'd like to ask about the \"code\" keyword. A similar question was asked here. However, I am not asking what the keyword is, but how to interpret/define this keyword.\n\nIn that post, it is said that this is a function pointer. And, from what I can tell in the example Ghidra gave below, that would make some sense (still trying to wrap my head around it). But how can I define \"code\" so that gcc will recognize it and have it work properly? Is there a general solution to this or must I decide case-by-case what to do? In another Ghidra project I'm figuring out, there are numerous examples of \"code\" appearing. I'm assuming I can't just replace it with any old data type? Unless...?\n\n```\nvoid FUN_00101020(void)\n{\n                    // WARNING: Treating indirect jump as call\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "decompilation",
    "c",
    "ghidra",
    "functions",
    "pointer"
  ],
  "user": "Luke Dunn",
  "time": "Jan 29, 2022 at 9:52",
  "comments": [],
  "answers_data": [
    {
      "content": "code is a generic term for an undefined function pointer. Ghidra's usage of assigning variables as code * is only produced through auto-analysis and not an exposed type for users.  A generic void * or function definition should be used instead.\n\na function can be prototyped as below in a generic way\n\n```\ntypedef returntype callingconvention functionname( {type of argument} argument1},..... )   \n\n```\ncode represents this generic function pointer\n\ntypedef int __stdcall foo(int a,int b); is a specific function pointer\n\nso if you understand or found that a specific area belongs to foo(....) then you can define it as such by setting the type of function.\n\nthen instead of (code *) ghidra should be able to infer the type and\ndecompile the function as  (*(foo *)) blah;\n\nat least that is what is the expected behavior  and this behavior again depends on several different heuristics.\n\nin the snippet you posted there are several undefined..\n\nghidra doesn't know the function type nor its argument type and it cant find the pointer as well..\n\n```\nfor example x=GetProcAddress(.....)\ncall x \n\n```\nwhere x would be pointer to some dynamically obtained function from an arbitrarily loaded helper module\n\nthe arguments would be the prototype the author of the code provided when he coded  the snippet\n\n```\n(*(code *)(undefined *)0x0)();\n\n```\nfor example if the function was prototyped as\n\n```\nvoid __cdecl blah(char * first , w_char_t * second,.....)\n\n```\nthen you can arbitrarily reverse it as\n\n```\nvoid __unknown code (void * myfirst, void * mysecond,....)\n\n```\nthis is what is represented by code\n\n",
      "votes": "1",
      "user": "mumbel",
      "time": "Feb 7, 2022 at 17:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "Luke Dunn",
          "text": "Are the typedef's strictly necessary in this example? Also, I don't think I've ever seen the \"calling convention\" or \"__stdcall\" before, I'm sorry to say",
          "time": null
        },
        {
          "user": "blabb",
          "text": "then you should try to see them.  actively look for them and get yourself acquinted with them",
          "time": null
        }
      ]
    }
  ]
}