{
  "title": "IDA: Generic approach to determine if an instruction reads from, or writes to, memory?",
  "link": "https://reverseengineering.stackexchange.com/questions/12053/ida-generic-approach-to-determine-if-an-instruction-reads-from-or-writes-to-m",
  "content": "I would like to determine if an instruction a) reads from or b) writes to a memory address.\nI can currently think of two approaches in IDA:\n\nIs there a better way to find out what I want? Ideally a way that works for multiple CPU architectures?\n\n",
  "votes": "4",
  "answers": 4,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "idapython",
    "idapro-sdk"
  ],
  "user": "langlauf.io",
  "time": "Sep 14, 2016 at 23:52",
  "comments": [
    {
      "user": "Ta Thanh Dinh",
      "text": "Is it required to use IDA? Do you want to do static or dynamic analysis?",
      "time": null
    },
    {
      "user": "langlauf.io",
      "text": "@TaThanhDinh : static analysis. IDA would be nice but if there is another way, that is fine too.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "In this case, you may find Xed useful. It gives high-level API to determine whether an instruction may read or write memory. I dont know whether Capstone has similar API.",
      "time": null
    },
    {
      "user": "langlauf.io",
      "text": "Sounds like a good plan.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "While the API may be cumbersome, most of the information you are looking for is \"readily\" available from IDA during static analysis. Some of it is somewhat generic, while other pieces require different handling per processor type.\n\nTo check if an operand performs read or write access to memory, you can use the following:\n\n```\nimport idaapi\nimport idautils\nimport idc\n\nOPND_WRITE_FLAGS = {\n    0: idaapi.CF_CHG1,\n    1: idaapi.CF_CHG2,\n    2: idaapi.CF_CHG3,\n    3: idaapi.CF_CHG4,\n    4: idaapi.CF_CHG5,\n    5: idaapi.CF_CHG6,\n}\n\nOPND_READ_FLAGS = {\n    0: idaapi.CF_USE1,\n    1: idaapi.CF_USE2,\n    2: idaapi.CF_USE3,\n    3: idaapi.CF_USE4,\n    4: idaapi.CF_USE5,\n    5: idaapi.CF_USE6,\n}\n\ndef print_insn_mem_interaction(ea):\n    insn = idautils.DecodeInstruction(ea)\n\n    # The features are needed for operand flags.\n    feature = insn.get_canon_feature()\n\n    for op in insn.ops:\n        # You always get 6 operands. Some of them are set to `o_void` to indicate\n        # that they are not used.\n        if op.type == idaapi.o_void:\n            break\n\n        # There are 3 types of memory references in IDA. We want all 3.\n        is_mem = op.type in (idaapi.o_mem, idaapi.o_phrase, idaapi.o_displ)\n\n        # Extract per-operand read/write status from the feature.\n        is_write = feature & OPND_WRITE_FLAGS[op.n]\n        is_read = feature & OPND_READ_FLAGS[op.n]\n\n        if not is_mem:\n            # Operand does not access memory.\n            continue\n\n        # Ugly line for the display. Sorry.\n        action = 'memory {}'.format('/'.join(filter(bool, ('read' if is_read else None, 'write' if is_write else None))))\n\n        print(f\"Operand[{op.n}]<{idc.print_operand(ea, op.n)}> : {action}\")\n\n```\nTelling the addresses accessed, though, is a different story.\n\nThe parsing of o_displ and o_phrase operands is processor-type specific, and is completely undocumented (actually, the docs say \"do as you like\").\nIf you are interested in a working parser for x86 and x64, you can check my code here.\n\nIf you need to work with any other architecture, I'd recommend using a more script-friendly disassembler. Capstone is probably a good choice on that matter.\n\nAnd finally, if you need the actual addresses, you will probably have to turn to  dynamic analysis.\n\n",
      "votes": "6",
      "user": "tmr232",
      "time": "May 12, 2022 at 11:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "KulaGGin",
          "text": "I believe there's potentially a bug in this code. When you check if operand type is o_void in if op.type == idaapi.o_void: break, you break out of the loop that iterates through the sequence of all operands in the instruction. So if first operand is o_void, it break and not check all other operands after it, which could potentially be valid operands. I noticed it after I saw that when you check if operand is_mem or not, you continue and don't break. I understand that on practice on x86 pretty much all the time third+ operands will always be null. But what about all other architectures?",
          "time": null
        },
        {
          "user": "KulaGGin",
          "text": "Thx for the answer, btw. Would've taken me 10 hours, or more like days of work and parsing through the IDA documentation to be able to decipher it and manage to write a plugin to log all instructions in a function that write to memory.",
          "time": null
        },
        {
          "user": "tmr232",
          "text": "@KulaGGin it's been some years since... But I think my assumption was that if an operand is empty, the ones after it will be empty as well. Might have been a mistake.",
          "time": null
        }
      ]
    },
    {
      "content": "Updated @tmr232's answer for IDA 7.4+ using a better syntax for printing strings(f-strings):\n\n```\nimport idaapi\nimport idautils\nimport idc\n\nOPND_WRITE_FLAGS = {\n    0: idaapi.CF_CHG1,\n    1: idaapi.CF_CHG2,\n    2: idaapi.CF_CHG3,\n    3: idaapi.CF_CHG4,\n    4: idaapi.CF_CHG5,\n    5: idaapi.CF_CHG6,\n}\n\nOPND_READ_FLAGS = {\n    0: idaapi.CF_USE1,\n    1: idaapi.CF_USE2,\n    2: idaapi.CF_USE3,\n    3: idaapi.CF_USE4,\n    4: idaapi.CF_USE5,\n    5: idaapi.CF_USE6,\n}\n\ndef print_insn_mem_interaction(ea):\n    insn = idautils.DecodeInstruction(ea)\n\n    # The features are needed for operand flags.\n    feature = insn.get_canon_feature()\n\n    for op in insn.ops:\n        # You always get 6 operands. Some of them are set to `o_void` to indicate\n        # that they are not used.\n        if op.type == idaapi.o_void:\n            break\n\n        # There are 3 types of memory references in IDA. We want all 3.\n        is_mem = op.type in (idaapi.o_mem, idaapi.o_phrase, idaapi.o_displ)\n\n        # Extract per-operand read/write status from the feature.\n        is_write = feature & OPND_WRITE_FLAGS[op.n]\n        is_read = feature & OPND_READ_FLAGS[op.n]\n\n        if not is_mem:\n            # Operand does not access memory.\n            continue\n\n        # Ugly line for the display. Sorry.\n        action = 'memory {}'.format('/'.join(filter(bool, ('read' if is_read else None, 'write' if is_write else None))))\n\n        stringToPrint = f\"Operand[{op.n}]<{idc.print_operand(ea, op.n)}> : {action}\"\n        print(stringToPrint)\n\n```\n",
      "votes": "0",
      "user": "KulaGGin",
      "time": "May 10, 2022 at 21:00",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you have IDA Pro 6.x, then solution is pretty straightforward: https://www.hex-rays.com/products/ida/support/tutorials/tracing.pdf\n\n",
      "votes": "-1",
      "user": "assp1r1n3",
      "time": "Feb 16, 2016 at 22:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "langlauf.io",
          "text": "Sorry, I do not understand what you mean. Could you be a bit more specific ?",
          "time": null
        },
        {
          "user": "assp1r1n3",
          "text": "@stackoverflowwww place the cursor inside the disassembly view, right-click menu or main \"Debugger\" menu, and you will see \"Add read/write trace\". Hope that helps",
          "time": null
        }
      ]
    },
    {
      "content": "Other than dynamic analysis (like suggested in the comments) there's no way to get that information from IDA.\n\nIDA does not maintain a complete Intermediate Representation (also called intermediate language) and that sort of information is unavailable to IDA, mostly because it's unneeded for implementation of disassemblers. It is however needed for decompilers, so  hex-rays decompiler probably implements a more complete IR but doesn't make it accessible to the user.\n\nUsually using IL each assembly instruction is translated into multiple intermediate language instructions, which together achieve the same goal as the original instruction. This turns instructions into operations that are less complex and are easier to manipulate/process.\n\nThere are open source tools that provide or implement an IL such as OpenREIL, which you could use outside of IDA (Specifically it has the STM and LDM instructions).\n\n",
      "votes": "-1",
      "user": "NirIzr",
      "time": "Sep 14, 2016 at 23:48",
      "is_accepted": false,
      "comments": []
    }
  ]
}