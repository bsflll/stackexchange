{
  "title": "How do you print fixed width strings with radare's print format `pf`?",
  "link": "https://reverseengineering.stackexchange.com/questions/18618/how-do-you-print-fixed-width-strings-with-radares-print-format-pf",
  "content": "Let's say I have a byte sequence where U is an unsigned int (4 bytes), and ccccccccccccccc is a 15 byte character array\n\n```\nUcccccccccccccccU\n\n```\nIs it possible to print this structure using pf? I can print this with \n\n```\npf i;\nps 15 @ 4;\npf i @ 19;\n\n```\nIf both of those integers were next to each other, I could do pf ii, and what I would like to do is something like pf is15i -- which doesn't work because s is for * char[] to a string, and not a char array.\n\nIf I do something like pf 5c, I get them outputted as single characters (ex.,)\n\n```\n0x00000008 [0] {\n  0x00000008 = '6'\n}\n0x00000009 [1] {\n  0x00000009 = '0'\n}\n0x0000000a [2] {\n  0x0000000a = '0'\n}\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "749",
  "tags": [
    "radare2",
    "strings"
  ],
  "user": "Evan Carroll",
  "time": "Jun 27, 2018 at 19:52",
  "comments": [],
  "answers_data": [
    {
      "content": "To understand how to use pf the way you want, we should go over it step-by-step.\n\nI opened an empty memory for a radare2 playground:\n\n```\n$ r2 malloc://200\n[0x00000000]>\n\n```\nNext, I wrote date to this playground, inspired by your example:\n\n```\n[0x00000000]> wx AABBCCDD @ 0\n[0x00000000]> w ccccccccccccccc @ 4\n[0x00000000]> wx 11223344 @ 19\n\n```\nBasically, I wrote 4 bytes, followed by 15 characters and then other 4 bytes. This is how it looks in the memory:\n\n```\n[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  aabb ccdd 6363 6363 6363 6363 6363 6363  ....cccccccccccc\n0x00000010  6363 6311 2233 4400 0000 0000 0000 0000  ccc.\"3D.........\n\n```\nTo print this structure I did something like this:\n\n```\n[0x00000000]> pf x[15]zx\n0x00000000 = 0xddccbbaa\n0x00000004 = ccccccccccccccc\n0x00000013 = 0x44332211\n\n```\nAs you already know, pf is used to print formatted data. By using pf?? and pf??? you can see examples and understand each part of my command. \n\nYou can use i instead of x if you want to print integers.\n\n```\n[0x00000000]> pf i[15]zi 1st 2nd third\n   1st : 0x00000000 = -573785174\n   2nd : 0x00000004 = ccccccccccccccc\n third : 0x00000013 = 1144201745\n\n```\nMy structure consists of 4 parts:\n\nYou can also name the fields:\n\n```\n[0x00000000]> pf x[15]zx 1st 2nd third\n   1st : 0x00000000 = 0xddccbbaa\n   2nd : 0x00000004 = ccccccccccccccc\n third : 0x00000013 = 0x44332211\n\n```\nYou can use other format characters such as e to swap endians, etc\n\n",
      "votes": "4",
      "user": "Megabeets",
      "time": "Jun 28, 2018 at 4:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "Evan Carroll",
          "text": "I understand most of that, but where did you [15]z from the syntax? I tried c15 as a syntax which seemed more intuitive. Also what will yours do if the 15-characters is \\0\\0foo\\0\\bar, ie not a c-string?",
          "time": null
        },
        {
          "user": "Evan Carroll",
          "text": "Lol it's documented like this pf: pf[.k[.f[=v]]|[v]]|[n]|[0|cnt][fmt] [a0 a1 ...] That's the [0|cnt] with the mandatory [] ....well that's totally user-friendly.",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "It is documented at pf???. And for your foo-bar example -- assume we have the following bytes in memory: aabbccdd0000666f6f0062617200eeff1122, You can print it with: pf x..zzx and you'll get 4 fields: 4 bytes hex, \"foo\", \"bar\" and another 4 bytes hex.",
          "time": null
        },
        {
          "user": "Evan Carroll",
          "text": "Yep, all this checks out and works -- though I have to wonder why for z the length [15]z and for N, it's N1",
          "time": null
        }
      ]
    }
  ]
}