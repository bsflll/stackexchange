{
  "title": "IDAPython: idaapi.get_highlight for demangled names",
  "link": "https://reverseengineering.stackexchange.com/questions/24842/idapython-idaapi-get-highlight-for-demangled-names",
  "content": "I'm using the following code to get the address of the selected function/variable:\n\n```\nhightlight = idaapi.get_highlight(idaapi.get_current_viewer())\nscreen_ea = idaapi.get_screen_ea()\nea = idaapi.get_name_ea(screen_ea, name)\n\n```\nIt works like a charm except until you meet demangled name in IDA View :( \n\nFor example, for this line \n\n```\n.text:00406744                 call    KBTickCount(void)\n\n```\nidaapi.get_name_ea call would never return the proper address, because the real name is ?KBTickCount@@YIJXZ.\n\nI know that I can just change demangled names representation in IDA Pro, but I'm working on a public plugin and I'm thinking about end users.\n\nAnd I also want to make it work in Pseudocode view, where all names are demangled.\n\nAny ideas on how to get the address of the selected function/variable for a particular line?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "514",
  "tags": [
    "ida",
    "idapython",
    "idapro-sdk",
    "ida-plugin"
  ],
  "user": "mastermind",
  "time": "Apr 26, 2020 at 20:28",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "On what action/event does your code execute?",
      "time": null
    },
    {
      "user": "mastermind",
      "text": "I set hotkey action handler if it matters",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "All action callbacks receive a context pointer with various information pre-filled:\n\n```\n  ea_t cur_ea;           ///< the current EA of the position in the view\n  uval_t cur_value;      ///< the possible address, or value the cursor is positioned on\n\n  func_t *cur_func;      ///< the current function\n  func_t *cur_fchunk;    ///< the current function chunk\n\n  struc_t *cur_struc;    ///< the current structure\n  member_t *cur_strmem;  ///< the current structure member\n\n  enum_t cur_enum;       ///< the current enum\n\n  segment_t *cur_seg;    ///< the current segment\n\n```\n(from kernwin.hpp)\n\nSo you can just use ctx.cur_value (or its Python synonym, cur_extracted_ea) to directly get the address/value/identifier under cursor, without having to resolve it yourself.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Apr 30, 2020 at 9:12",
      "is_accepted": true,
      "comments": [
        {
          "user": "mastermind",
          "text": "Didn't know about that, thank you very much!",
          "time": null
        }
      ]
    }
  ]
}