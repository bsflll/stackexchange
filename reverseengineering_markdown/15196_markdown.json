{
  "title": "Android Native Library - How to match java references to sub_XXX function (static way)",
  "link": "https://reverseengineering.stackexchange.com/questions/15196/android-native-library-how-to-match-java-references-to-sub-xxx-function-stati",
  "content": "I'm currently learning how native functions are implemented among the ELF SO files contained inside an APK. I'm using IDA.   \n\nNative calls are always achieved in this way. \n\n```\n// First load the library \nclass myClass{\npublic myClass(){\n  super();\n  v0 = system.loadLibrary(\"library-native\"); \n  //then declare the methods \n}\npublic static native int nativeMethod(byte[] arg0, boolean arg1) ;\n}\nvoid a(){\n  // then uses it \n  ret = this.nativeMethod(byte,bool) ; \n}\n\n```\nAccording to my little experiences in JNI, when looking to library-native.so using a disassembler  I should see something like Java_package_name_libname_class_NativeMethod among the exported function. \n\nI cannot see any of these elements. \nWhen I'm searching  the desired function (nativeMethod in the past example) inside the disassembled code, I do not find any clue. \n\nI wonder how Dalvik process manages to call the right function when a native call is performed, and how can I find myself the source code of the desired functions ?\n\nThanks\n\nEDIT : \nI add the nm and readelf output to clarify. \n\n```\nnm --defined-only library-native.so \nnm library-native.so : no symbols\nreadelf -s library-native.so | grep nativeMethod // gives no output\n//The only JNI related function \nnm -D --defined-only library-native.so | grep JNI\n00XX: JNI_onLoad\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "833",
  "tags": [
    "android",
    "disassemblers"
  ],
  "user": "deadeert",
  "time": "Apr 26, 2017 at 13:16",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "if you run nm on the file, does  it list the expected symbols?",
      "time": null
    },
    {
      "user": "deadeert",
      "text": "Hey Igor, I add the nm and readelf output. Thanks for pointing this out !",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Well, if the original file does not export the symbols, I can only think of two possibilities:\n\nIn both cases the action probably happens in the JNI_onLoad function. You will need to debug it to see what's going on.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Apr 26, 2017 at 13:22",
      "is_accepted": false,
      "comments": [
        {
          "user": "deadeert",
          "text": "Could you provide an example (link or quick writing) of method register at load time, I'm not sure to understand what you are talking about and it interest me a lot. Thanks you very much.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "see RegisterNatives and this example",
          "time": null
        },
        {
          "user": "deadeert",
          "text": "Thanks. Command  nm -Du --defined-only native-library.so | grep -i registernative outputs nothing.  Same for readelf -s  native-library.so | grep -i registernative command.  Are you agree with me when I conclude that option 2 you pointed is right in this case ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "RegisterNatives is a field (function pointer) in the JNIEnv structure (first argument passed to JNI_onLoad). You won't see the field names in the binary, just numerical offsets.",
          "time": null
        }
      ]
    }
  ]
}