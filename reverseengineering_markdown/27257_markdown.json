{
  "title": "GHIDRA: Create an array of strings that are padded",
  "link": "https://reverseengineering.stackexchange.com/questions/27257/ghidra-create-an-array-of-strings-that-are-padded",
  "content": "I'm working on decompiling a DOS .exe that was written in Pascal or Delphi. When looking at the decompiled code, there appears to be many strings that are are padded with 00. Example:\n\n```\n06 53 54 52 49 4E 47 00 00 00 STRING\n07 41 4E 4F 54 48 45 52 00 00 ANOTHER\n08 4C 41 53 54 7F 4F 4E 45 00 LAST ONE\n\n```\nThe leading number is the length of string, using Pascal conventions. If I were to run the .exe, these strings appear in a list. Because of this, I assume that the organization of the strings is supposed to be a list of some sort.\n\nMy questions are these:\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ghidra"
  ],
  "user": "Timothy",
  "time": "Mar 17, 2021 at 1:30",
  "comments": [
    {
      "user": "AltxF4",
      "text": "I am running into this same problem with an Arm cortex-M binary. The only solution I have found is manually editing the raw hex to place the terminated strings sequentially, then placing the removed padding bytes after the last string to keep everything aligned. Very hacky, I know.... but it works so far.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "While it'd be nice to define a struct using Ghidra's flexible arrays, they are limited in functionality to the point where I haven't found them particularly useful.\n\nIn your case though, the padding bytes may actually make your life easier. If the strings are all 9 bytes like your example, you could do this:\n\n```\nstruct pstring {\n  byte len;\n  char[9] str;\n}\n\n```\nAnd then make an array of pstring instances.\n\n",
      "votes": "2",
      "user": "hairlessbear",
      "time": "May 22, 2023 at 2:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}