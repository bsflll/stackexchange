{
  "title": "Difference between 32 bit and 64 bit disassemblers",
  "link": "https://reverseengineering.stackexchange.com/questions/22076/difference-between-32-bit-and-64-bit-disassemblers",
  "content": "As far as my level of understanding goes, the only difference between a 32 bit and 64 bit disassembler is that the produced assembler-code of a 32 bit disassembler is only using 32 bit assembly instructions, while a 64 bit disassembler also makes use of 64 bit instructions and registers.\n\nMy questions is, what are the advantages of using a 64 bit disassembler over a 32 bit disassembler?\n\nFurthermore, if I want to disassemble a program compiled for a 64 bit machine, can I use a 32 bit disassembler like OllyDBG for that and what how would the output differ from a 64 bit disassembler like x64dbg?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "debuggers",
    "disassemblers",
    "x64dbg"
  ],
  "user": "J.Doe",
  "time": "Dec 8, 2019 at 18:21",
  "comments": [],
  "answers_data": [
    {
      "content": "There are no set definitions for \"32-bit disassembler\" and \"64-bit disassembler\". The terms are in fact ambiguous.\n\n32-bit and 64-bit just refer to CPU architectures. Specifically to things such as register size and bus size. These can apply to many things.\n\nSpecifically, in the case of a disassembler, they can apply to two things:\n\nFurthermore, there are multiple CPU families which come in both 32- and 64-bit flavours. The most relevant today are Intel & AMD, and ARM.\n\nThese are all independent. You could have a disassembler compiled to run on 32-bit Intel machines which is capable of disassembling binaries that are supposed to run on 64-bit ARM processors.\n\nNow in the same CPU, a 64-bit architecture may or may not be an extension of a previous 32-bit architecture. This is the case with Intel.\n\nSo a 32-bit binary will typically be able to run on a 32-bit machine or a 64-bit machine, but a 64-bit binary will only be able to run on a 64-bit machine because it will use instructions, registers, addressing modes, etc than the 32-bit machine does not support.\n\nLikewise if you try to disassemble a 64-bit binary using a disassember that is designed only to disassemble 32-bit binaries of the same CPU family, it will only recognize the 32-bit instructions, registers, addressing modes, etc. All of the 64-bit-specific stuff will just confuse the disassembler.\n\nI'm not familiar with either OllyDBG or x64dbg so I don't know what they are capable of.\n\nYou seem to be under the impression that a \"32 bit disassembler\" will somehow convert or translate 64 bit code into 32 bit code. That is not possible. That would be in the realm of cross-compiling and emulation.\n\n",
      "votes": "3",
      "user": "hippietrail",
      "time": "Sep 9, 2019 at 10:48",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "32 and 64 differ in another way than you think. You have pretty much the same binary code but on 64 you operate on 64-bit registers and 64-bit data. 32 and 64 are about data not code. Using OllyDBG on 64-bit code is ok, but:\n\n",
      "votes": "0",
      "user": "0xC0000022L",
      "time": "Dec 6, 2019 at 8:14",
      "is_accepted": false,
      "comments": []
    }
  ]
}