{
  "title": "Calculating check sum of m-bus data frame",
  "link": "https://reverseengineering.stackexchange.com/questions/11375/calculating-check-sum-of-m-bus-data-frame",
  "content": "I'm trying to calculate the check sum of a m-bus data frame. In page 1 of this PDF I'm able to read that the frame's check sum \"is calculated from the arithmetical sum of the data mentioned above, without taking carry digits into account\". The data I have above are the bytes:\n\nIn page 2 we can find that one example of a valid data frame is:\n\n```\n68 03 03 68 53 01 BB 0F 16\n\n```\nIn hexadecimal, being 0F the check sum. Unfortunately I must be doing something wrong because I'm not able to reach that value.\n\nCould someone explain how this algorithm, to find the check sum, works?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "hex",
    "protocol",
    "binary-format",
    "hexadecimal"
  ],
  "user": "Rui Lima",
  "time": "Nov 21, 2015 at 18:11",
  "comments": [],
  "answers_data": [
    {
      "content": "just one sample is never sufficient to answer a checksum query you need a bunch of samples to corelate and find patterns  \n\nso looking at the linked pdf it seems it is clear enough\n\nskip the start and sum the data and extract the least two bytes \n\n```\nskip     sum     mask \nx,x,x,x | y,y,... 0x000000ff = checksum\n\n```\nso the sample you posted would be \n\n```\nskip         | sum            \n68 , 3 ,3 68 | 53 , 01 , bb |  =\n\n```\nchecksum\n\n```\n\"{0:X2}\" -f ((0x53+0x1+0xbb) -band 0x000000ff) = 0x0f seems to match \n\n```\nrunning this on other sequnces in the pdf seem to tally\n\n```\nPS C:\\> $a = \"{0:X2}\" -f ((0x53+0xfe+0x51+0x01+0x7a+0x01) -band 0x000000ff) ; $a\n1E \nPS C:\\> $a = \"{0:X2}\" -f ((0x73+0x01+0x51+0x01+0x7A+0x02 ) -band 0x000000ff) ; $a\n42\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Nov 22, 2015 at 8:22",
      "is_accepted": true,
      "comments": []
    }
  ]
}