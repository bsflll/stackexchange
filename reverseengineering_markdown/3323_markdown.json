{
  "title": "How to prevent \"upx -d\" on an UPX packed executable?",
  "link": "https://reverseengineering.stackexchange.com/questions/3323/how-to-prevent-upx-d-on-an-upx-packed-executable",
  "content": "I recently read a tweet from Ange about a technique to fool UPX when the option -d (decompress) is called.\n\nI would like to know how this is working and, what are the technique to prevent an UPX packed executable to be decompressed through upx -d (if possible for, both, Linux and Windows).\n\n",
  "votes": "13",
  "answers": 2,
  "views": "35k",
  "tags": [
    "packers",
    "upx"
  ],
  "user": "perror",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "0xec",
      "text": "Of course @blabb's answer prevents upx -d but you should be aware that Generic Unpackers such as RL Depacker can still unpack such files.",
      "time": null
    },
    {
      "user": "Jessie Lesbian",
      "text": "If you want to, protect your UPX output with Denuvo/VMProtect/enigma protector/anything of this nature and no-one can decompress it.",
      "time": null
    },
    {
      "user": "Jane",
      "text": "@JessieLesbian not to be picky but \"no-one can decompress it\" is (simply) not really true. It's like saying \"No one can break into this system, it's 100% secure.\" same thing here, \"No one can decompress this malware, it's 100% secure.\"",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "UPX doesn't check the unpacking stub's integrity, and just blindly restores the data from the stored information, not from the actual execution.\n\nSince UPX is open-source and documented (commented IDB), it's easy to modify its and actually do something extra (anti-debug, patch, decryption, jump to real entrypoint...) that will be lost when 'upx -d' is used.\n\nSuch UPX hack is not uncommon in malware.\n\n",
      "votes": "15",
      "user": "Ange",
      "time": "Dec 30, 2013 at 11:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "If I get it right, it only requires to modify the checksum of the packed executable... Or did I misunderstood something ?",
          "time": null
        },
        {
          "user": "Tiago",
          "text": "@perror did you figure this out?",
          "time": null
        },
        {
          "user": "perror",
          "text": "I appeared to be true (at the time I tested it). So, modifying the checksum of the executable won't prevent to execute it, but will render the decompression a bit more difficult (because you need to bypass this checksum verification before applying the decompression).",
          "time": null
        }
      ]
    },
    {
      "content": "Fooling upx -d can be as simple as one byte patch here is a small sample.\n\nPack the MS-Windows standard calc.exe, hexedit one byte and result is an undepackable executable with upx -d (this is not corrupting the exe, the exe will run and can be unpacked manually). Only unpacking with the -d switch wont work.\n\n",
      "votes": "13",
      "user": "Community",
      "time": "Jun 29, 2023 at 9:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jane",
          "text": "first of all - great answer! - Just have to ask; is the one-byte-patch arbitrary chosen in this answer or can it be more? e.g I thought of changing UPX's \"signature\" (the text \"UPX\" which is very common in UPX-packed exe's), to something like, DTK (randomly made up)  or would that corrupt it ? (as in running it and changing it back, and then upx -d)",
          "time": null
        },
        {
          "user": "Jane",
          "text": "adding another comment just to point: if I can improve my comment just point it out! :) Wishes from Sweden!",
          "time": null
        }
      ]
    }
  ]
}