{
  "title": "What is an \"opaque predicate\"?",
  "link": "https://reverseengineering.stackexchange.com/questions/1669/what-is-an-opaque-predicate",
  "content": "I saw the term of opaque predicates several times in obfuscation papers. As far as I understand it, it refers to predicates that are hard to evaluate in an automated manner. Placing it at strategical points of the program (jmp, test, ...) can mislead the analysis of a program by automatic tools.\n\nMy definition is lacking of precision and, moreover, I have no idea on how to estimate the opacity of such a predicate (its efficiency). So, can somebody give a proper definition and maybe a few examples ?\n\n",
  "votes": "20",
  "answers": 4,
  "views": "13k",
  "tags": [
    "obfuscation"
  ],
  "user": "perror",
  "time": "Apr 9, 2013 at 7:48",
  "comments": [],
  "answers_data": [
    {
      "content": "The answers already in this thread are good ones.  In a nutshell, an opaque predicate is \"something that a program analysis might miss, if the program analysis is not sophisticated enough\".  Denis' example was based on the inverse of constant propagation, and served as an anti-checksum mechanism.  Joxean's SetErrorMode example was an environment-based opaque predicate that was used for dynamic anti-emulation.  Two of Ange's answers were also dynamic anti-emulation; based upon the environment, and based upon uncommon platform features.  Ange's other example was more like an anti-disassembly trick via indirect addressing.\n\nIn the academic literature, an opaque predicate is referred to as a branch that always executes in one direction, which is known to the creator of the program, and which is unknown a priori to the analyzer.  The notion of \"hardness\" of an opaque predicate is deliberately omitted from this definition.  Academic predicates are often based upon number-theoretic constructions, aliasing relationships, recursive data structures; basically anything that is commonly understood by program analysis researchers to cause problems for a program analysis tool.  \n\nMy favorite researcher Mila Dalla Preda has shown that the ability for an abstract interpreter to break a given category of opaque predicate is related to the \"completeness\" of the domain with respect to the property tested by the predicate.  She demonstrates by using mod-k-based opaque predicates, and elicits a family of domains that are complete (i.e. incur no abstract precision loss) for mod-k with respect to common transformers (addition, multiplication, etc).  Then she explores the use of obscure theoretical constructions such as completeness refinement to automatically construct a domain for breaking a certain category of predicate.  See this paper for more details.\n\n",
      "votes": "21",
      "user": "perror",
      "time": "Feb 16, 2020 at 23:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "Yennefer",
          "text": "Hi, the link is broken. Do you happen to know where I can find it?  Thank you",
          "time": null
        },
        {
          "user": "Joe",
          "text": "@Yennefer An archived copy of the paper is available on the Web Archive at web.archive.org/web/20090116013739/http://profs.sci.univr.it/â€¦",
          "time": null
        }
      ]
    },
    {
      "content": "An opaque predicate is an obfuscated condition, that, followed with a conditional operation, will make the analysis harder, and in some cases impossible until code is actually executed until that condition is evaluated.\n\nThis is used to disrupt static analysis (outcome is unpredictable) or emulation (to tell the difference between a real machine and an emulated environment).\n\nThey can rely on executions conditions, CPU features, API calls, and documented or not.\n\nAs values of registers are neither null nor completely random on process start, they can be relied on to create tests that look random but are actually deterministic:\n\nexample:\n\n```\n<EntryPoint>:\n   jnz <InvalidPath>\n   <ValidPath>\n\n```\nthus, it might be impossible to tell in advance what the next instructions will be.\n\n",
      "votes": "19",
      "user": "Ange",
      "time": "Apr 10, 2013 at 13:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Not necessarily the predicate must be hard to evaluate. An opaque predicate is a condition which the result is known in advance by the programmer and that cannot be resolved statically (by a compiler, for example) and must be resolved dynamically.\n\nAn example I noticed in malware some years ago:\n\n```\n  SetErrorMode(100);\n  if ( SetErrorMode(1024) == 100 )\n    // Valid Path\n  else\n    // Invalid Path\n\n```\nWithout executing the program (or knowing how the Win32 API SetErrorMode works) there is no way to determine which of the paths the program will take. However, as SetErrorMode returns the last previous code set, the programmer knows before executing this piece of code that the 1st path is the only valid one.\n\n",
      "votes": "14",
      "user": "0xC0000022L",
      "time": "Apr 17, 2013 at 4:59",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Sort of it also can be found in malicious obfuscated JavaScript code:\n\n```\n001     vz = 1;\n002     var1 = 49;\n003     var2 = var1;\n004     if (var1 == var2){\n005       document.location = \"http://path.to.malicious.website\";\n006     }\n\n```\nhere You see attempt in line 001-004 declare vars and conditions, that meaningless, and present to change obfuscated code hash and to complicate automatic analysis.\n\np.s. this is very simple examples, for more complicated samples of opaque predicate in JS see DefenceCode blog post\n\n",
      "votes": "9",
      "user": "Denis Laskov",
      "time": "Apr 9, 2013 at 8:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}