{
  "title": "Finding \"controller vibration\" function in game",
  "link": "https://reverseengineering.stackexchange.com/questions/20428/finding-controller-vibration-function-in-game",
  "content": "I want to build a \"force feedback chair\" for Need for Speed: Payback, so I thought about hooking the function responsible for the controller vibration and sending the motor speed parameter to a motor over Serial (to an arduino).\nI successfully hooked the XInputSetState function (responsible for Controller Vibration) and sent the parameters over usb, and everything worked fine.\nThe problem is, I want to play the game with a Wheel (Logitech g29).\nThe \"XInputSetState\" function still gets called, but the motor speed parameter is always 0 (makes sense, if you have two controllers connected to your pc, only the one you're driving with vibrates not the other one).\nMy Wheel also has no Vibration feedback (so no function that i can hook there).\n\nSo my thought was, that if you for example drive against a wall, the game checks if a Controller is connected, and if it's the case, calls the XInputSetState function with the correct motor speed parameter (so the Controller vibrates).\n\nFor now I tried setting a breakpoint on XInputSetState and moving up the Callstack, to see what function still gets called with the correct motor speed parameter (even if no Controller is present), but my knowledge with reveersing is still very limited so no luck there.\n\nSo how would you go about looking for such a function?\nAny tips and hints are welcome.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "85",
  "tags": [
    "windows",
    "function-hooking"
  ],
  "user": "julman",
  "time": "Jan 20, 2019 at 20:53",
  "comments": [],
  "answers_data": [
    {
      "content": "I think your approach of looking up the callstack is generally sound, but might be too time consuming.\n\nAs you have no doubt experienced, without debugging information it can be challenging even to piece together what the different frames are, before trying to determine if any of those functions are relevant.\n\nThe crucial function deciding whether to call the vibration logic based on the controller type might not even be on the stack if the system is built around an asynchronous event loop.\n\nMy suggestion would be to look into the DirectInput APIs to figure out what functions the game would call to query information about the controller. This is likely necessary for the game to decide whether it should run the vibration logic or not.\n\nKeep in mind that the game is likely querying the controller info very early (either at launch or just before entering the game from the menu), and then storing the necessary information somewhere in its memory. If you can find that, you might be able to find where in the callstack leading up to XInputSetState that memory location is being checked.\n\n",
      "votes": "1",
      "user": "Charles Ellis",
      "time": "Jan 21, 2019 at 3:14",
      "is_accepted": false,
      "comments": []
    }
  ]
}