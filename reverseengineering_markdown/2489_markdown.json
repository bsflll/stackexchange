{
  "title": "Where and how is variable entanglement obfuscation used?",
  "link": "https://reverseengineering.stackexchange.com/questions/2489/where-and-how-is-variable-entanglement-obfuscation-used",
  "content": "I don't know the exact name of this obfuscation, so I call it variable entanglement for now.\n\nI already saw this principle in a few binaries but I never found a complete description of what was possible and what was not.\n\nThe idea is to confuse the reverser by mixing two values together and performing the operations on the mixed values. Once all operations have been performed, one can recompose the results by some simple operations. For example, a naive example could be:\n\n```\nint foo (int a, int b) {\n  long long x = 0;\n  // Initial entanglement\n  x = (a << 32) | b;\n\n  // Performing operations on both variables\n  x += (12 << 32) & 72;\n  ...\n\n  // Final desentanglement\n  a = (int) (x >> 32);\n  b = (int) (((int) -1) & x);\n} \n\n```\nOf course, here, we mix everything in one variable (and I did not take care of details such as the overflows). But, you can imagine way more complex initial entanglement where you re-split everything in two variables (or more), e.g. by xoring them together. \n\nOperations such as addition, multiplication, ... have to be redefined for this new format, so it can mislead the reverser.\n\nMy question now, does anyone know about different such schema of variable entanglement (the one I gave is really basic) ? And, maybe, can give pointers or publication about it ?\n\n",
  "votes": "8",
  "answers": 1,
  "views": "367",
  "tags": [
    "obfuscation",
    "whitebox-crypto"
  ],
  "user": "perror",
  "time": "Jul 18, 2013 at 1:03",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Is this actual source or is this something a decompiler spat out (or you created based on disassembly)?",
      "time": null
    },
    {
      "user": "newgre",
      "text": "X is uninitialized. Shouldn't it be | b instead of & b? Also, long is not necessarily double the size of int. Why not post a working example? That might make it easier to give a meaningful answer to your question.",
      "time": null
    },
    {
      "user": "perror",
      "text": "In fact, this is pure junk. It is just here to illustrate the idea. It won't even compile. I have some examples in assembly (x86+SSE), but they are not really explicit and easy to understand.",
      "time": null
    },
    {
      "user": "perror",
      "text": "@newgre: Thanks noticing all these errors (sorry to not have fixed this at first, I was busy doing something else...).",
      "time": null
    },
    {
      "user": "Antimony",
      "text": "I don't know about publications that explore this technique specifically, but JBCO does a weak form of this (sable.mcgill.ca/publications/papers/2007-1/â€¦).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm not sure whether this is along the lines you're looking for (and quite possibly you've already figured out all of this and more), but here's a crude formalization and then some implementation thoughts.  Conceptually, this tries to separate what it means to entangle several values from how entangled values are represented.  \n\nConceptually, entangled values can be thought of as aggregates where the different components retain their values, don't interfere with each other, and can be independently extracted.  A convenient way to think of such aggregates is as n-tuples of values; for simplicity I assume n = 2 here.  Also, I assume that we have operations to construct tuples from a collection of values, and to extract the component values from a tuple.\n\nWe now need to be able to carry out operations on tuples.\nFor this, for each operation op in the original program we now have 2 versions: op1, which operates on the first component of a 2-tuple, and op2, which operates on the second component:\n\nFinally (and this is where the obfuscation comes in), we need a way to encode tuples as values and decode values into tuples.  If the set of values is S, then we need two functions enc and dec that must be inverses of each other:\n\nExamples: \n\nFrom an implementation perspective, we'd like to be able to perform operations directly on encoded representations of values.  For this, corresponding to each of the operations op1 and op2 above, we need to define \"encoded\" versions op1* and op2* that must satisfy the following soundness criterion:\n\nand similarly for op2*.\n\nA lot of details are omitted (mostly easy enough to work out), and this basic approach could be prettified in various ways, but I don't know whether this is along the lines you were asking for and also whether maybe this is pretty straightforward and you've already worked it all out for yourself.  Anyway, I hope this is useful.\n\nFrom @perror's comment (below) it seems clear that the formalization above is not powerful enough to capture the obfuscation he has in mind (though it might be possible to get a little mileage from generalizing the encoding/decoding functions enc and dec).\n\nI had forgotten about this paper, which discusses a transformation that seems relevant (see Sec. 6.1, \"Split variables\"):\n\n",
      "votes": "8",
      "user": "debray",
      "time": "Jul 18, 2013 at 13:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "I think you perfectly defined the basic operators and formalized the context of it. But, the example I gave was probably too naive and, thus, a bit misleading. To give maybe a better example, what if you have x=a^b and y=a^(~b) and try to apply some operations on a and b through operations on x and y. In this schema, the word entanglement is a bit more obvious I guess. I will try to dig a bit this schema and propose a full example. Finally, it is totally unrelated but are you Saumya Debray ? (I read several of his papers and I am a big fan! :))",
          "time": null
        },
        {
          "user": "debray",
          "text": "I think I understand the subtleties of the obfuscation a little better now -- thanks!  I'll need to go think about that some more.  (On an unrelated note, my first name is indeed Saumya. :-)",
          "time": null
        },
        {
          "user": "debray",
          "text": "@perror : the formalization I gave doesn't seem powerful enough to capture what you have in mind.  But meanwhile I remembered a paper by Collberg et al. that describes a transformation that may be relevant: please see the edited response above.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Yes, this is exactly what I was looking for ! Thanks ! So, it is called \"split variables\".",
          "time": null
        }
      ]
    }
  ]
}