{
  "title": "Modify code with ILSpy",
  "link": "https://reverseengineering.stackexchange.com/questions/9178/modify-code-with-ilspy",
  "content": "I want to modify an exe a little bit.\n\nWith ILSpy I see all the code that I need but I don't know how to modify the code.\n\nI tried \"save code\" on ILSpy that exports a .cs file, but when I open the .cs file in Visual Studio and change the code I can't compile or run the modified code.\n\nIs there a way to do that?\n\nP.S.\nI read that I can change the code in assembly but I don't know assembly so I have to do that at high level, if there is a way.\n\n",
  "votes": "9",
  "answers": 4,
  "views": "57k",
  "tags": [
    "disassembly",
    ".net",
    "c#"
  ],
  "user": "sivlab",
  "time": "Jun 19, 2015 at 20:30",
  "comments": [
    {
      "user": "Abr001am",
      "text": "you cant modify exe file using ILSpy , you should rather manipulate CFF explorer and patch new addresses of CS and DS in header each time you dilate or shorten the code for more informations)",
      "time": null
    },
    {
      "user": "sivlab",
      "text": "Thanks for you comment but I'm a newbie in this field and I'm only able to modify if the decompiler show me all the code with a high-level language such as C#. I'm trying with .Net Reflector and Reflexil but I have some trouble as show in beyond comments.",
      "time": null
    },
    {
      "user": "Imran Qadir Baksh - Baloch",
      "text": "There are 2 Save as and Save Code youtube.com/watch?v=ZhancUbQN2k",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For reference to those still looking for an answer to this question, I would recommend trying dnSpy - it allows you to do exactly what the requester asked - modify the high level code and recompile.\n\nIt isn't perfect, but I've been able to make small changes to the in-house exe's we have where we didn't have the latest source code (disgruntled employees, don't ask).\n\nhttps://github.com/dnSpy/dnSpy\n\n",
      "votes": "11",
      "user": "Raithlin",
      "time": "Oct 21, 2020 at 11:05",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You may work according to the following pattern:\n\nCode parts which do not recompile in ILSpy or Reflector (each has its own strengths and weaknesses) can be exported in IL and perhaps manually rearranged to recompile in the tools, then further processed in Visual Studio. Unfortunately, VS does not allow for inline IL assembled code.\n\nFor instance, Reflector protects itself (among other means like obfuscation) against recompilation with useless jumps confusing the recompiler. ILSpy mostly is able to cope with this.\n\nILSpy for instance is not able to recompile subclasses (i.e. classes within a class). They just not show up in the class tree, when in C# view. In IL view, you see all of them.\n\n",
      "votes": "5",
      "user": "josh",
      "time": "Jun 27, 2015 at 11:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "sivlab",
          "text": "Thanks for the reply. You hit the point: ILSpy doesn't generate a complete/correct project so in VS I saw the code that I want to edit but in the compiling VS generates a lot of errors. Unfortunately I don't know the complete \"desing\" of the software so I don't know which part I have to rearrange.",
          "time": null
        },
        {
          "user": "josh",
          "text": "ILSpy in IL view - as well as Reflector in IL view or ILDASM output - should give you the complete \"design\". It may be - in particular for non-trivial assemblies - very well possible to identify the causes of errors of a VS project and link them to the IL view. The missing or erroneous parts may be reconstructed in C# from a manual conversion of IL code to C#. It is a similar but simpler procedure than the step from assembly to HL in other languages,  Understanding a \"design\" is very much easier in a HL view like C#.",
          "time": null
        }
      ]
    },
    {
      "content": "Currently, there's no way to modify the binary directly with ILSpy. The only solution is the one you described, export the source and recompile it.\n\nHowever, the feature you are looking for is included with .NET Reflector in the Reflexil plugin.\n\n",
      "votes": "2",
      "user": "Spl3en",
      "time": "Jun 20, 2015 at 0:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "sivlab",
          "text": "I tried .NET Reflector with Reflexil plugin and I had some improvements. But once I found the method that I want to modify I go with \"Replace all with code\" but Reflexil show me it empty. So I can't modify it. Some help?",
          "time": null
        },
        {
          "user": "josh",
          "text": "Reflexil is an excellent tool. To learn it, you may look at the tutorial in codeproject.com created by the inventor of Reflexil. The \"Replace all with code\" intentionally offers you an empty method intended to replace a given method completely with your own one.",
          "time": null
        }
      ]
    },
    {
      "content": "I used piece of software a few years ago that allowed limited editing of the generated code directly within the tool itself, but when I say 'limited', I really mean limited. In fact, this feature was actually removed from more\nrecent releases of this software. The old version that had this feature is\nno longer available, but it's still a decent and free .NET decompiler so if you want to check it out, it's called DotNet Resolver.\n\nThere's also the Reflexil plugin for Reflector, which has already been mentioned, but it's also pretty unreliable and limited.\n\nIf you really want to get things done, however, I'd recommend using the ILDASM and ILASM tools which are installed with Visual Studio. \n\nI know you want to be able to just edit the high level code, but that's just not very\nfeasible. You can use Reflector to export the source code generated from a\ndisassembled .NET application as a project, but then you have errors, missing\ndependencies, and the like to deal with.\n\nWith ILDASM and ILASM you would be editing the MSIL directly, but it's really the best way to go about modifying a .NET application. MSIL is actually pretty\nsimple and you won't have to deal with the source code produced by tools like\nReflector, which are often riddled with errors. \nMoreover, you generally won't have to worry about obfuscation. In 99% of cases you will always be able to disassemble .NET applications down to MSIL\nand then reassemble them without any issue.\n\nThere are plenty of resources online to aid you with both editing and understanding MSIL if you're not familiar with it. Good luck!\n\n",
      "votes": "2",
      "user": "Radical Raccoon",
      "time": "Jun 28, 2015 at 1:43",
      "is_accepted": false,
      "comments": [
        {
          "user": "sivlab",
          "text": "Thanks a lot. As I wrote in above comment, yeah, the decompiler generates the code that I interested in but when I export it to VS the compilation failed due to the several errors. And without the complete knowledge of the software it is impossible to correct the errors (at least for me). I will try the tool in VS that you have mentioned modifying MSIL directly.",
          "time": null
        }
      ]
    }
  ]
}