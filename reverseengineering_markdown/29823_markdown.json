{
  "title": "CR16C architecture code pointers in Ghidra?",
  "link": "https://reverseengineering.stackexchange.com/questions/29823/cr16c-architecture-code-pointers-in-ghidra",
  "content": "On CompactRISC CR16C architecture, because instructions only start at even-numbered addresses, code pointers (as used by JAL, JUMP, Jcond) are shifted one bit to the right. These are distinct from data pointers, which are byte-addressable and just contain the target address without any bit shifting.\n\nDoes Ghidra have any additional pointer type that can be used to distinguish between these code pointers and data pointers?\n\nExample of how this currently looks, using the standard pointer type for both:\n\n\n\n(field1 is a code pointer, with the comment indicating the address it should be, and field2 is a data pointer)\n\nI tried creating a function definition and setting the type as a pointer to that, but it still kept pointing to the wrong address. So, alternatively, could this behaviour be a bug?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "119",
  "tags": [
    "ghidra",
    "pointer"
  ],
  "user": "zzt",
  "time": "Jan 6, 2022 at 9:18",
  "comments": [],
  "answers_data": []
}