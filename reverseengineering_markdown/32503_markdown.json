{
  "title": "reversing pyinstaller compiled exe",
  "link": "https://reverseengineering.stackexchange.com/questions/32503/reversing-pyinstaller-compiled-exe",
  "content": "i created some compiled binaries using different languages and tried to understand them using x64dbg, the compiled binaries produced by the c language/gcc compiler were pretty easy to understand, then i compiled a simple hello world program in python using pyinstaller, the output exe file was larger and was messier, i could not understand any of  the binary code in x64dbg, can anyone help me understand it? or provide some resources?, i am learning reverse engineering by compiling my own code and reversing it.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "320",
  "tags": [
    "x64dbg"
  ],
  "user": "Praveen",
  "time": "Nov 17, 2023 at 12:36",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Welcome to RE.SE. There are numerous questions about the very same topic. Please also have a look at them.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "On macOS at least, the Python modules are prepended as zlib streams to the executable. I recommend you give a try at pyinstxtractor — using a recent version of Python — to attempt to decompress the zlib streams as .pyc files then a bytecode decompiler like pycdc.\n\n",
      "votes": "2",
      "user": "Ninja Inc",
      "time": "Nov 17, 2023 at 13:32",
      "is_accepted": false,
      "comments": [
        {
          "user": "Praveen",
          "text": "i want to understand the binary/asm and what it does, not how to decompile it, thank you.",
          "time": null
        },
        {
          "user": "masterX244",
          "text": "@Praveen the assembler/binary code is only the loader and python interpreter. your own code is stored the pyc stuff glued afterwards.",
          "time": null
        },
        {
          "user": "Praveen",
          "text": "@masterX244 i cannot find the .pyc, i compiled it as a single exe",
          "time": null
        },
        {
          "user": "masterX244",
          "text": "@Praveen those files are glued onto the exe, thats what the answer says where this comment is chained off",
          "time": null
        },
        {
          "user": "Praveen",
          "text": "@masterX244 yea got that, but how do i know which is which?, like which part of the exe is the file?",
          "time": null
        }
      ]
    },
    {
      "content": "PyInstaller binaries are basically self extracting archives that contain compiled Python code for the program and its dependencies.\n\nThe extraction code and also some of these libraries may be native binary files.\n\nHowever, pure Python code does not compile into native assembly but into an IR that the Python runtime, which is included in the package, can run. As mentioned, these files have a .pyc extension.\n\nThis is marshalled code, in Python terms, and it can be un-marshalled into its IR representation using the builtin marshal module.\n\nLoading a PyInstaller executable in a RE tool will only produce a generic archive-extraction code that is unrelated to the actual program code.\n\n",
      "votes": "2",
      "user": "Yotamz",
      "time": "Nov 22, 2023 at 8:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}