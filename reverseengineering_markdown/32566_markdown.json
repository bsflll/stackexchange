{
  "title": "Reverse engineering MQTT payload in a (apparently) sophisticated smart lamp",
  "link": "https://reverseengineering.stackexchange.com/questions/32566/reverse-engineering-mqtt-payload-in-a-apparently-sophisticated-smart-lamp",
  "content": "I have recently bought a (quite expensive) smart lamp. It is not from a known producer, it's a relatively small company, but they seem to have implemented MQTT in a quite serious way.\n\nThrough packet inspection, I have extracted the following relevant MQTT messages exchanged between the lamp and the server.\n\nWhat I did is the following, in order to communicate with the lamp via MQTT:\n\nI have tested everything and, if I send (certain) payloads to the lamp, it answers (sometimes with an error message if the message contains weird values).\n\nNow, I have tried to send the exact payload I have sniffed to turn on and off the lamp, it answers by sending its status (like RSSI etc.) but nothing happens.\n\nHere is the payload I have sniffed when I turn on the light (username and topic are redacted, if they will be necessary I'll post a pastebin link so that I can later delete it and spread information as little as possible as it contains my username).\n\n```\n{\"id\":49,\"jsonrpc\":\"2.0\",\"method\":\"SetOrControlDevices\",\"params\":{\"data\":[{\"data\":{\"dps\":{\"1\":true},\"time\":{\"1\":2}},\"node_id\":17,\"sn\":33333}],\"frame_status\":0,\"from_account\":\"123456789012\",\"md5\":\"F8CC42572A96E337034CB982282C91BA\",\"rand\":\"D8SN8R6J\",\"time\":\"1702424815396\"}}\n\n```\nAfter a quick research, I have realized that the fields md5 and rand are not there for pure aesthetic purposes. They are evidence of an implementation of MQTT enhanced authentication through DIGEST-MD5. It is an authentication method that uses the MD5 hash and a challenge-response mechanism to secure communication between client and server. This method avoids transmitting passwords in plain text over the network. When a client wants access, the server sends a challenge, and the client responds with a hashed result. If the server's expected result matches the client's response, authentication succeeds, enhancing security against password exposure and replay attacks.\n\nNow here is my question: how can I approach (and possibly \"hack\") this novel type of MQTT authentication?\n\nI have considered other options such as:\n\n",
  "votes": "0",
  "answers": 0,
  "views": "56",
  "tags": [
    "networking",
    "smart-devices"
  ],
  "user": "user3161330",
  "time": "Dec 13, 2023 at 9:52",
  "comments": [
    {
      "user": "0xec",
      "text": "Is there a companion app to control the lamp? If so that might reveal more information.",
      "time": null
    },
    {
      "user": "user3161330",
      "text": "There is for iOS and Android. I decompiled the one for android, but I found nothing concerning MQTT. The device comes with a touch screen that controls the light via BLE and updates its firmware via WiFi. I downloaded a .bin file and a .img file when updating its firmware but I have no idea on where to start reverse engineering those.",
      "time": null
    },
    {
      "user": "0xec",
      "text": "The firmware files can be a place to start. Run binwalk and see if it is able to extract or find anything interesting.",
      "time": null
    }
  ],
  "answers_data": []
}