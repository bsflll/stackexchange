{
  "title": "Simplifying and reversing an encryption/decryption algorithm in ASM X86 / Python",
  "link": "https://reverseengineering.stackexchange.com/questions/31072/simplifying-and-reversing-an-encryption-decryption-algorithm-in-asm-x86-python",
  "content": "I'm trying to reverse a decoding function in order to produce the function for encoding (for the curious this is a save game for a legacy adventure game which use codes for saving).\n\nSo far I have ported the decoding function from ASM X86 to Python and it's working fine.\nMy problem is I'm not able to reverse the function because I don't understand what the code does with the bitwise operations. Specially the bitwise OR is like voodoo to me.\n\nI'd like some help to simplify/understand the function and reverse it.\n\nMy code so far:\n\n```\ndef load_and_decode_value(text, index, table):\n  current_char = ord(text[index])\n  return table[current_char]\n\ndef text_to_hex(text):\n  with open(\"DECODE_TABLE.bin\", mode='rb') as file:\n    DECODE_TABLE = file.read()\n\n  decoded = []\n  char_index = 0\n  text_len = len(text)\n\n  for i in range(0, 5):\n\n    val_0 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_1 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_next_0 = (val_0 * 2048) | (val_1 * 64)\n    val_1 = (val_next_0 // 256) & 0xFF\n    decoded.append(val_1)\n\n    if i == 4:\n      break\n\n    val_2 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_3 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_next_1 = (((val_2 * 2) | val_next_0) * 16777216) | (val_3 * 1048576)\n    val_3 = (val_next_1 // 16777216) & 0xFF\n    decoded.append(val_3)\n\n    val_4 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_next_2 = val_next_1 | (val_4 * 32768)\n    val_4 = (val_next_2 // 65536) & 0xFF\n    decoded.append(val_4)\n\n    val_5 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_6 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_next_2 = val_next_2 | (val_5 * 1024)\n    val_next_3 = val_next_2 | (val_6 * 32)\n    val_6 = (val_next_3 // 256) & 0xFF\n    decoded.append(val_6)\n\n    val_7 = load_and_decode_value(text, char_index, DECODE_TABLE)\n    char_index += 1\n    val_8 = (val_next_3 | val_7) & 0xFF \n    decoded.append(val_8)\n\n  return decoded\n\n```\nThe content of the DECODE_TABLE.bin file:\n\n```\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF 00 01 02 03 04 05 06 07 08 09 FF FF FF FF FF FF FF 0A 0B 0C 0D \n0E 0F 10 11 01 12 13 01 14 15 00 16 17 18 19 1A FF 1B 1C 1D 1E 1F FF \nFF FF FF FF FF 0A 0B 0C 0D 0E 0F 10 11 01 12 13 01 14 15 00 16 17 18 \n19 1A 1B FF 1C 1D 1E 1F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \nFF FF FF                                                             \n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "209",
  "tags": [
    "disassembly",
    "assembly",
    "x86",
    "python",
    "encodings"
  ],
  "user": "Simon",
  "time": "Nov 7, 2022 at 8:06",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Have you considered the comment from the duplicate which suggested that this may be Base32 with this particular alphabet?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Tip is Comment every line.\n\nEx)\n\n```\nwhile i < HARDCODED_LIMIT:\n    # Break when text index is out of range\n    if text_char_index >= text_len:\n        break\n    # Load text's ascii number\n    eax = ord(text[text_char_index])\n    # Increase text index\n    text_char_index += 1\n    # Load encode array's Nth data (if indexth text's ascii is 116, load 26)\n    eax = TEXT_ENCODE_ARRAY[eax]\n    # If Nth char is not a character(0~9a~zA~Z), then break\n    if eax < 0: # This code is wrong, (0xff < 0) is False\n        break\n\n```\nThen try to make code in high-level language\n\n```\ntext: str = \"Hello\"\ntext.replace(\"t\", \"\\x1a\")\n\n```\nIn this level, unusable code is snipped such as\n\n```\nesi = eax & 0xFF # eax is smaller than 0xff (eax is Nth data of ENCODE_ARRAY.bin), so this code is same as esi = eax\n\n```\nChange bitwise operator to human friendly operator\n\n```\nesi = esi << 0xB # This could be\nesi = esi * 2048 # and, this could be\nesi *= 2048\n\n```\nTry to change common function to def func1()\n\nI think, it seems that the above is repeated\n\nJust make a function code and fill in the changing part with parameters\n\nThen you can read it easily, you can change it to asm code, make decode function, make decode asm code.\n\nPS. If you don't understand bitwise operators, leave them as bitwise operator.\n\n",
      "votes": "1",
      "user": "Eveheeero",
      "time": "Nov 3, 2022 at 1:38",
      "is_accepted": false,
      "comments": [
        {
          "user": "Simon",
          "text": "Hi and thank you for taking the time to answer my question. I have rewritten the function based on your comments. You can see it in first post. Can you explain how to reverse it ?",
          "time": null
        }
      ]
    }
  ]
}