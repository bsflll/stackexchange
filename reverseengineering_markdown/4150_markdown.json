{
  "title": "How do I view external function calls in dynamically linked ELF binary in linux?",
  "link": "https://reverseengineering.stackexchange.com/questions/4150/how-do-i-view-external-function-calls-in-dynamically-linked-elf-binary-in-linux",
  "content": "I used the file command in Linux to get information about a binary file. I am also looking for the addresses that these calls are located at. I think I can get this information from GDB or objdump but I am not very good with Linux commands and programs yet so any help is much appreciated. The output from the file command is below:\n\n```\nELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x6d232dd468b2344847a4b9c81eb064ffe257d5d0, stripped\n\n```\nThen using the strings command I got this output (I see several C function calls but which are external ?):\n\n```\n/lib/ld-linux.so.2\n-#mH4\n__gmon_start__\nlibc.so.6\n_IO_stdin_used\nexit\nstrncmp\nstrncpy\nputs\nprintf\nmalloc\natoi\n__libc_start_main\nGLIBC_2.0\nPTRh\nQVh>\nUWVS\n[^_]\ntesting\nstrncmp: %s;\natoi\nComplete\n;*2$\"\n\n```\n",
  "votes": "7",
  "answers": 2,
  "views": "9k",
  "tags": [
    "gdb",
    "static-analysis",
    "dynamic-analysis",
    "dynamic-linking",
    "objdump"
  ],
  "user": null,
  "time": "Apr 27, 2014 at 4:30",
  "comments": [],
  "answers_data": [
    {
      "content": "use nm instead of strings. Undefined symbols (indicated by a U) will be resolved externally (by the libc or whatever), and T (or t) symbols are locally defined. Lowercase indicates a local symbol, uppercase a global symbol.\n\nOf course, this assumes there's a symbol table present. In your example, it's been stripped.\n\nIn that case, you can do objdump -T file to list the external references.\n\n",
      "votes": "7",
      "user": "perror",
      "time": "Apr 27, 2014 at 10:58",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "The answer to your question is fairly easy. You can either use the nm command with the -D switch (or --dynamic), or use objdump with the -T switch. Both commands will output the dynamic symbol table entries and the libraries they originate from.\n\n",
      "votes": "4",
      "user": "yaspr",
      "time": "Apr 26, 2014 at 23:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}