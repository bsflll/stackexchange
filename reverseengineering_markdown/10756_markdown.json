{
  "title": "How the signature level set to the process in Windows 8?",
  "link": "https://reverseengineering.stackexchange.com/questions/10756/how-the-signature-level-set-to-the-process-in-windows-8",
  "content": "From this blog article:\n\nWindows 8 instituted the Signing Level, also sometimes referred to as the Signature Level. This undocumented number was a way for the system to differentiate the different types of Windows binaries, something that became a requirement for Windows RT as part of its requirement to prohibit the execution of Windows “desktop” applications.\n\nHow this signature level are determined on what basis ? Is that flag passed to CreateProcess or kernel handles this ?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "449",
  "tags": [
    "cryptography",
    "protection",
    "windows-8"
  ],
  "user": "Balu",
  "time": "Aug 31, 2015 at 11:16",
  "comments": [],
  "answers_data": [
    {
      "content": "See http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf:\n\n\n\nSo the signing level is embedded in the signed image's (file's) certificate. There are no special flags passed to CreateProcess(), but PspCreateProcess() (a kernel function that's executed as a result of CreateProcess()) extracts and validates the signing level from the executed image's certificate.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Aug 31, 2015 at 14:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "Balu",
          "text": "nosuchcon.org/talks/2014/… Page 22 :: In Vista, CREATE_PROTECTED_PROCESS was the only flag needed for CreateProcess to do the right thing • But in Windows 8.1, how to specify the actual protection level required (type and signer?) • Using the new Protection Level Attribute (0x2000B) in the Process/Thread Attribute List   .What about that flag signifies then ?",
          "time": null
        }
      ]
    }
  ]
}