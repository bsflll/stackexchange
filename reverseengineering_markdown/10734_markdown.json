{
  "title": "Failure at finding the value of the dereferenced pointer",
  "link": "https://reverseengineering.stackexchange.com/questions/10734/failure-at-finding-the-value-of-the-dereferenced-pointer",
  "content": "```\n000007FEEC55CF58| 48 8D 0D F1 A7 0B 00 | lea rcx,qword ptr ds:[7FEEC617750] | ;7FEEC617750:\"500117367\"\n\n```\nI see the above line in the ollyDBG which has the value of \"500117367\" according to the comment made by the ollyDBG itself. \n\nHowever, I don't know how to access the dereferenced pointer value. When I press Ctrl + G and go to the 7FEEC617750 memory address, I get an expression like push rbx which is not the value shown in the ollyDBG. \n\nI am pretty confused by how I should use the offsets and stack in ollyDBG. I simply want to know how to access the value of pointer shown in the comment of ollyDBG [7FEEC617750] and also find out what accesses and writes to [7FEEC617750].\n\nP.S Thanks to AcidShout for pinpointing, indeed, the debugger is x64_dbg the cousin of ollyDBG :)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "252",
  "tags": [
    "disassembly",
    "address",
    "assembly",
    "pointer"
  ],
  "user": "FreeMind",
  "time": "Aug 28, 2015 at 19:56",
  "comments": [
    {
      "user": "rev",
      "text": "There's no dereference happening there. What you see is equivalent to mov rcx, 0x7FEEC617750. lea does not dereference even though the value is inside brackets []",
      "time": null
    },
    {
      "user": "rev",
      "text": "Also, how are you debugging x64 code inside Olly?",
      "time": null
    },
    {
      "user": "FreeMind",
      "text": "@AcidShout Indeed it is x64_dbg the cousin of ollyDBG :) sorry about representing the issue in the wrong way I am newbie in reversing.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Right-click on the disassembly line above in OllyDbg and choose Follow in Dump. That will tell OllyDbg to navigate to address 7FEEC617750 in the dump pane and allow you to see the memory at that address:\n\n\n\nTo see what accesses and writes to the memory at that address, right-click in the dump pane on the first byte of memory at that address and set a hardware breakpoint on-access:\n\n\n\nEdit:\n\nAll that said, AcidShout's two comments above in response to your question are spot-on!\n\n",
      "votes": "6",
      "user": "Jason Geffner",
      "time": "Aug 28, 2015 at 19:33",
      "is_accepted": true,
      "comments": [
        {
          "user": "FreeMind",
          "text": "Thanks for the answer. Indeed, I am using the x64_dbg, anyway the solution is the same.",
          "time": null
        },
        {
          "user": "FreeMind",
          "text": "Anyway, whenever I put a breakpoint the program crashes. What should I do in such situation?!",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "One question per post. Please create a new post for that new question.",
          "time": null
        },
        {
          "user": "FreeMind",
          "text": "It is alright but the crashing is related directly to this question?!",
          "time": null
        },
        {
          "user": "FreeMind",
          "text": "Please check out reverseengineering.stackexchange.com/questions/10741/â€¦",
          "time": null
        }
      ]
    }
  ]
}