{
  "title": "Hooking a function",
  "link": "https://reverseengineering.stackexchange.com/questions/32779/hooking-a-function",
  "content": "So, I'm attempting to create a mod for an older game, Fable: The Lost Chapters.  I was able to find the MacOS release of the game, which contains symbols, and I was also able to find a leaked debug build for windows, which also contains symbols.  Both have made the modding process far easier, however this function specifically I have been unable to call or hook.\n\nHere's what the function looks like within IDA when demangled.\n\nMacOS\nCThingCreatureBase::SetCurrentAction(CCreatureActionBase const&)\n\nWindows Debug Build\nbool __thiscall CThingCreatureBase::SetCurrentAction(CThingCreatureBase *this, const CCreatureActionBase *action)\n\nAnd here's how I'm hooking the function.\n\n```\ntypedef bool (__thiscall* tSetCurrentAction)(CThingCreatureBase*, CCreatureActionBase const &);\n\ntSetCurrentAction oSetCurrentAction;\n\nbool __fastcall hSetCurrentAction(CThingCreatureBase* This, CCreatureActionBase const & action)\n{\n    return oSetCurrentAction(This, action);\n}\n\nif (MH_Initialize() == MH_OK)\n    std::cout << \"MinHook Initialized\" << std::endl; \n\nif(MH_CreateHook((LPVOID)0x6644F0, &hSetCurrentAction, reinterpret_cast<void**>(&oSetCurrentAction)) == MH_OK)\n        std::cout << \"SetCurrentAction Hooked\" << std::endl;\n\n    if (MH_EnableHook((LPVOID)0x6644F0) == MH_OK)\n        std::cout << \"SetCurrentAction Enabled\" << std::endl;\n\n```\nThough for some reason, the game crashes whenever oSetCurrentAction is called.\n\nHere's the exception when debugging Exception thrown at 0x00692F03 in Fable.exe: 0xC0000005: Access violation reading location 0xCCCCCCD0.\n\nI'm hopeful that I'm just missing something obvious, what someone will easily spot, but that's probably not the case.  Any help would be greatly appreciated.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "149",
  "tags": [
    "ida",
    "disassembly",
    "c++",
    "dll",
    "hooking"
  ],
  "user": "Reaper",
  "time": "Mar 2, 2024 at 13:46",
  "comments": [
    {
      "user": "Yotamz",
      "text": "Could you add the crash information? A debugger output maybe. Looking at your code, in MH_CreateHook(...) you use an absolute address: 0x6644F0. If it is taken from the symbols table offsets, it is an offset from the ImageBase that you need to calculate to the correct virtual address.",
      "time": null
    },
    {
      "user": "Reaper",
      "text": "The address is not taken from a symbols table, all I'm doing is comparing what the function looks like in the debug build of the game, and finding is location in release.  Also, the function hooks, with the correct arguments being passed through.  I've added the debugger output as well.",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "In the first line you define the original function pointer tSetCurrentAction() as a __thiscall. Your hook function, hSetCurrentAction is declared as __fastcall. The hook function will take the action argument from EDX which is undefined. The original function, trying to access the action argument will most likely end up reading some arbitrary memory address and crash.",
      "time": null
    },
    {
      "user": "Reaper",
      "text": "How would I go about hooking a __thiscall function, with minhook it looked like the hooked function had to be static.",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "__thiscall is just a calling convention. Changing the pointer to that should work. Your function is called by the game as __thiscall with a this * in ECX (same as a __fastcall) and action on the stack. Translated to __fastcall terms, the action argument is the third arg passed to your hook function. If you add an unused second arg to your hook function then you can leave the content as is.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In the first line you define the original function pointer tSetCurrentAction() as a __thiscall.\n\nYour hook function, hSetCurrentAction is declared as __fastcall.\n\nThe hook function will take the action argument from EDX which is undefined. The original function, trying to access the action argument will most likely end up reading some arbitrary memory address and crash.\n\n__thiscall is just a calling convention, changing the pointer to that type should work:\n\nYour function is called by the game as __thiscall with a this * in ECX (same as a __fastcall) and action on the stack. Translated to __fastcall terms, the action argument is the third arg passed to your hook function.\n\nIf you add an unused second arg to your hook function then you can leave the content as is.\n\nA less important note:\n\nIn many debug builds, the space between functions is filled by the compiler with 0xCC bytes. The access violation reading from 0xCCCCCCD0 suggests that the original function tried to dereference the undefined space pointed to by EDX, got 0xCCCCCCCC, added the offset to method or data in the \"object\" (0xC) and then read or called it at 0xCCCCCCD0.\n\n",
      "votes": "1",
      "user": "Yotamz",
      "time": "Mar 7, 2024 at 7:09",
      "is_accepted": false,
      "comments": []
    }
  ]
}