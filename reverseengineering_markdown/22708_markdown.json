{
  "title": "IDA - ObjC - Meaning of _BYTE and dword_0?",
  "link": "https://reverseengineering.stackexchange.com/questions/22708/ida-objc-meaning-of-byte-and-dword-0",
  "content": "This is my first experience disassembling/reverse engineering, and am having a bit of difficulty keeping up. For reference, I'm trying to uncover the inner workings of a pretty good library in my industry. The following method takes in a string and returns some content represented by long long.\n\n```\nsigned __int64 __cdecl +[Lib generateLongLongValue:](Lib_meta *self, SEL a2, id a3)\n{\n  void *v3; // x0\n  void *v4; // x19\n  char *v5; // x0\n  char *v6; // x20\n  unsigned __int64 v7; // x25\n  signed __int64 v8; // x22\n  signed __int64 v9; // x26\n  int v10; // w0\n  signed __int64 v11; // x8\n  signed __int64 v12; // x23\n  int v13; // w0\n  __int16 v14; // w24\n  __int16 i; // w23\n  __int16 v16; // w0\n  bool v17; // w9\n  signed __int64 v18; // x20\n\n  v3 = (void *)objc_retain(a3, a2);\n  v4 = v3;\n  v5 = (char *)objc_msgSend(v3, \"length\");\n  v6 = v5;\n  v7 = (unsigned __int64)(v5 - 1);\n  if ( v5 == (_BYTE *)&dword_0 + 1 )\n  {\nLABEL_25:\n    v18 = -1LL;\n    goto LABEL_26;\n  }\n  ...\n}\n\n```\nConverted into standard Objective-C, this would look like so (I think): \n\n```\n+ (NSInteger)generateLongLongValue:(NSString*)string\n{\n    NSInteger v18;\n\n    if (string.length - 1 == (_BYTE *)&dword_0 + 1) {\n        v18 = -1LL;\n        goto LABEL_26;\n    }\n\n    ...\n}\n\n```\nI'm really lost as to what (_BYTE *)&dword_0 + 1 is supposed to mean here. Could somebody please provide some sort of explanation, or provide resources that I can look into so I can understand for myself?\n\nCheers\n\n",
  "votes": "1",
  "answers": 1,
  "views": "274",
  "tags": [
    "ida",
    "arm",
    "ios"
  ],
  "user": "Mohamed Marbouh",
  "time": "Dec 10, 2019 at 5:25",
  "comments": [],
  "answers_data": [
    {
      "content": "I suspect youâ€™ve got a false positive during analysis and a constant (0 or 1) got wrongly converted to an offset (probably because in your database 0 is a valid address). The decompiler uses info from disassembly so in cases like this it may be necessary to clean up the disassembly:\n\nPress Tab on the line with &dword_0 and if there is an offset dword_0 or similar in the disassembly, press O to remove it, then Tab back to pseudocode and press F5 to refresh. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 10, 2019 at 14:09",
      "is_accepted": false,
      "comments": []
    }
  ]
}