{
  "title": "The questions about ADR.W instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/12258/the-questions-about-adr-w-instruction",
  "content": "When reversing a ARM firmware using IDA Pro, I find a instruction:\n\nROM:080461FC 0F F2 24 30         ADR.W      R0, aBt_test_mode ; \"BT_TEST_MODE\"\n\n...\n\nROM:08046524    aBt_test_mode       DCB \"BT_TEST_MODE\",0\n\n...\n\nI know this is a Thumb-2 instruction.\n\nimm8=0010 0100\n\nRd=0000\n\nimm3=011\n\nbut I don't know how to calculate imm32. (imm32 = ZeroExtend(i:imm3:imm8, 32))\nand how to calculate the 08046524?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "273",
  "tags": [
    "arm",
    "thumb2"
  ],
  "user": "user6903",
  "time": "Mar 20, 2016 at 4:02",
  "comments": [],
  "answers_data": [
    {
      "content": "As you say, you have -\n\nimm8 = 0010 0100\n\nimm3 = 011\n\nbut you also have\n\ni = 0\n\nthen\n\nimm32 = ZeroExtend(i:imm3:imm8,32) =>\n\nimm32 = ZeroExtend(0:011:00100100,32) =>\n\nimm32 = ZeroExtend(001100100100,32) =>\n\nimm32 = 00000000000000000000001100100100 = 0x00000324\n\nThe ADR instruction description explains that \"This instruction adds an immediate value to the PC value to form a PC-relative address, and writes the result to the\ndestination register.\"\n\nAs you are in Thumb mode, the value of PC is equal to the (4 byte aligned) address of the instruction + 4 bytes. \nIn your case the instruction is at address 0x080461FC so PC = 0x080461FC + 4 = 0x08046200\n\nThe address calculation is then -\n\nPC + imm32 = 0x08046200 + 0x00000324 = 0x08046524\n\nThis is what you see in IDA's disassembly.\n\nIf you look in the 'Operation' section of the ADR instruction in the ARM architecture reference manual you can see this explained.\n\n",
      "votes": "2",
      "user": "Ian Cook",
      "time": "Mar 20, 2016 at 9:08",
      "is_accepted": true,
      "comments": []
    }
  ]
}