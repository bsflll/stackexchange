{
  "title": "Disassemble scanf storage register",
  "link": "https://reverseengineering.stackexchange.com/questions/25278/disassemble-scanf-storage-register",
  "content": "I am trying to understand scanf function a have 3 question regarding it.\nthis is c file:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n    int x;\n    printf(\"Enter X:  \n\");\n    scanf(\"%i\",&x);\n    printf(\"You entered %d...  \n\",x);\n    return  0;\n}\n\n```\nand here is gas:\n\n```\n.text\n    .section    .rodata\n.LC0:\n    .string \"Enter X:\"\n.LC1:\n    .string \"%i\"\n.LC2:\n    .string \"You entered %d...  \n\"\n    .text\n    .globl  main\n    .type   main, @function\nmain:\n    pushq   %rbp    #\n    movq    %rsp, %rbp  #,\n    subq    $16, %rsp   #,\n# a.c:5:    printf(\"Enter X:  \n\");\n    leaq    .LC0(%rip), %rdi    #,\n    call    puts@PLT    #\n# a.c:6:    scanf(\"%i\",&x);\n    leaq    -4(%rbp), %rax  #, tmp90\n    movq    %rax, %rsi  # tmp90,\n    leaq    .LC1(%rip), %rdi    #,\n    movl    $0, %eax    #,\n    call    __isoc99_scanf@PLT  #\n# a.c:7:    printf(\"You entered %d...  \n\",x);\n    movl    -4(%rbp), %eax  # x, x.0_1\n    movl    %eax, %esi  # x.0_1,\n    leaq    .LC2(%rip), %rdi    #,\n    movl    $0, %eax    #,\n    call    printf@PLT  #\n# a.c:8:    return  0;\n    movl    $0, %eax    #, _6\n# a.c:9: }\n    leave   \n    ret \n    .size   main, .-main\n    .ident  \"GCC: (Debian 8.3.0-6) 8.3.0\"\n    .section    .note.GNU-stack,\"\",@progbits\n\n```\n1)\nThe rsi should take address of x int, but it takes the address from -4(%rbp), where there is nothing, in time of execution. Because the initialization of x variable comes from the stdin as scanf waits for input to init the variable. But the what is in -4(%rbp) in the time of instruction leaq -4(%rbp), %rax? It looks like garbage, not address of x, which value should be initialized from stdin.\n\n2)according to this https://stackoverflow.com/questions/54165346/integer-describing-number-of-floating-point-arguments-in-xmm-registers-not-passe, the movl $0, %eax is to zero FP registers in al, but that is the same convention for printf. So my question is, to which functions from glibc or other libraries apply this convetion? (So I have to zero %al in printf, scanf, ....?). I assume to every, that has va_list or variable argument?\n\n3) where in the gas source is stack canary in that should protect scanf buffer from overflow? according to this: How does scanf interact with my code in assembly, this should set canary (in masm):\n\n```\n0x080484c5 <+6>: mov    eax,gs:0x14\n   0x080484cb <+12>:    mov    DWORD PTR [ebp-0xc],eax\n   0x080484ce <+15>:    xor    eax,eax\n\n```\nBut I see nothing similar to this in my gas source, which is also output from gcc, which should set it by itself (unless there is some checking in the the scanf function itself which is not visible in my source). So where is it?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "958",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "Herdsman",
  "time": "Jun 11, 2020 at 17:44",
  "comments": [],
  "answers_data": [
    {
      "content": "",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jun 12, 2020 at 10:35",
      "is_accepted": false,
      "comments": []
    }
  ]
}