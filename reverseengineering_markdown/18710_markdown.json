{
  "title": "index of array in assembly? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/18710/index-of-array-in-assembly",
  "content": "In the following picture the line i want to mention is:\n\n```\nmov [esp+eax*4+0Ch], edx\n\n```\nHere eax is the index in the array. But, where is the address of the array to access?\n\nwhat does mean this line of code ? (0Ch)\n\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "6k",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "ReverserT",
  "time": "6 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "Usually, when running through an array, we can find the following lines of assembly code:\n\n```\nmov [base_address_of_array + array_index * size_of_an_item_in_array], edx\n\n```\nIn your case, my guess would be that the array is on the stack (that is why you find esp as part of the base address of the array. Then, you also have an offset to esp which is 0Ch (which is 12 in decimal). So, the array is located at esp + 0Ch. Then, eax is the index and 4 is the size of an item in the array (probably an integer of 4 bytes).\n\nIf we look at the whole CFG, I would translate it back to C in something like this:\n\n```\nint array[4];\n\nfor (int i = 0; i < 4; ++i)\n  array[i] = i;\n\n```\nNote: I supposed that the blue arc in the CFG is getting back to loc_401381.\n\n",
      "votes": "4",
      "user": "perror",
      "time": "Jul 6, 2018 at 16:33",
      "is_accepted": true,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "The assembly code looks like pointer arithmetic with arrays. Isn't it?",
          "time": null
        }
      ]
    }
  ]
}