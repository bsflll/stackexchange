{
  "title": "Reverse Engineering a CRC-16",
  "link": "https://reverseengineering.stackexchange.com/questions/32739/reverse-engineering-a-crc-16",
  "content": "I am looking for help in reverse engineering what I believe to be a CRC-16.  I have tried all of the known polynomials as well as bit and byte ordering with no success.  I am able to determine that all 48 bits are used to determine the 16 bit check.  I am not 100% that the 16 bits are a CRC, but suspect that it is based on the fact that I can change 1 or more of the bits in the data or 1 or more bit in the check and I am flagged that there is a mismatch.  Here is a small set of data:\n\n```\n0C3F67F00000    0A97\n2BBA307F0013    D786\n0C41BAA50000    4F3A\n309809FF0013    69CF\n0C3ED12A0000    C3A9\n2AA2B27F0013    BED4\n0C3F1EBF0000    D1AB\n2ACA3F7F0013    2EFD\n0C3BD5C20000    4C82\n2EE755BF0000    D7CB\n\n```\nAny help in determining the algorithm would be much appreciated!\n\n",
  "votes": "0",
  "answers": 0,
  "views": "56",
  "tags": [
    "crc"
  ],
  "user": "Keith",
  "time": "Feb 18, 2024 at 12:09",
  "comments": [
    {
      "user": "Robert",
      "text": "What have you tried so far? There are quite a few similar posts on this site where the answers contained detailed ways how you may be able to calculate the CRC that was used to generate those values.",
      "time": null
    },
    {
      "user": "C0DER",
      "text": "Can you provide some context? What are three bytes? They look like CAN bus data, because they are 8 bytes. But if I am right - we need to know what vehicle and so on.",
      "time": null
    },
    {
      "user": "Keith",
      "text": "This is data communicated between a device with a PIC16HV540 and battery with a 24C02 EPROM.  What I have shown is data from 5 different batteries.  The 48 bit data starting with \"0\" represents serial numbers.  This has been verified.  The 48 bit data starting with numbers, or every other dataset, represents date codes. These have also been verified to represent date codes. The data makes sense from MSB to LSB. I have verified that changing any value of the 12 characters will result in a mismatch to the CRC/checksum so I am convinced that all 48 bits participate in the CRC.",
      "time": null
    },
    {
      "user": "Keith",
      "text": "I also have a newer version of this same device that I was able to determine that all blocks of data start with 48 bits of data followed by a 16 CRC.  This new device used a microcontroller with documented CRC calculations, using a poly of 0x1021, and initial value of 0XFFFF, and final Xor of 0x0000.  In this new device the byte order was reversed in the 16 bit CRC.  With the older device I have tried all of the common polynomials and initial conditions.  I have tried reversing the data and swapping byte orders.",
      "time": null
    },
    {
      "user": "Keith",
      "text": "I attempted to use Revenge, but it immediately comes back with no results.  The timeframe of the device is from around the year 2000.  Is there any type of check or CRC algorithm variation from around this timeframe that may have been common that I am overlooking?",
      "time": null
    }
  ],
  "answers_data": []
}