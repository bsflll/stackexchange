{
  "title": "Memory segment in IDA - ARM kernel",
  "link": "https://reverseengineering.stackexchange.com/questions/11260/memory-segment-in-ida-arm-kernel",
  "content": "I just loaded up an ARM kernel image into IDA. When I boot up the ARM kernel and inspect the kernel symbols, I can see the following :-\n\n```\n/ $ cat /proc/kallsyms | head -n 10\n00000000 t __vectors_start\n80008240 T asm_do_IRQ\n80008240 T _stext\n80008240 T __exception_text_start\n80008244 T do_undefinstr\n80008408 T do_IPI\n8000840c T do_DataAbort\n800084a8 T do_PrefetchAbort\n80008544 t gic_handle_irq\n800085a0 T secondary_startup\n\n```\nWhen I load the kernel image into IDA, I am presented with functions with a memory segment that is loaded at 0x8000. As the kernel symbols are not present in the ARM kernel, this is making analysis hard.\n\nHow can I map the addresses I see in the ARM image(I'm running it in Qemu, and could debug the kernel using gdb-multiarch) with the addresses I see in IDA? I'm guessing rebasing the .text section in IDA would be the way to go. If so, how could I go about finding the address to which I would have to rebase the segment?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "linux",
    "kernel-mode",
    "segmentation"
  ],
  "user": null,
  "time": "Nov 6, 2015 at 16:48",
  "comments": [
    {
      "user": "w s",
      "text": "Would you post a list of segments you see in IDA ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I figured out a solution. Here is what I did.\n\n",
      "votes": "4",
      "user": null,
      "time": "Nov 7, 2015 at 9:49",
      "is_accepted": true,
      "comments": []
    }
  ]
}