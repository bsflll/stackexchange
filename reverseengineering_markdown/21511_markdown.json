{
  "title": "Setting a conditional kernel breakpoint in WinDbg grinds the debuggee OS to a halt",
  "link": "https://reverseengineering.stackexchange.com/questions/21511/setting-a-conditional-kernel-breakpoint-in-windbg-grinds-the-debuggee-os-to-a-ha",
  "content": "My setup:\n\nI'm trying to follow the SendMessage call from the user space:\n\n\n\nInto the kernel, by setting a conditional breakpoint on win32k!NtUserMessageCall:\n\n\n\nIf we take the declaration of the NtUserMessageCall function:\n\n```\nNTSTATUS NtUserMessageCall(\n    HWND hWnd,\n    UINT uMsg,\n    WPARAM wParam,\n    LPARAM lParam,\n    ULONG_PTR ResultInfo,\n    DWORD dwWndProcType,\n    BOOL bAnsi);\n\n```\nThe condition for the breakpoint is for uMsg == WM_SYSCOMMAND (or 0x112). I set it as such:\n\n```\nba e 1 fffff960`00163318 \"j (@rdx=0x112) ''; 'gc'\"\n\n```\nI can then check that it was set up alright:\n\n\n\nBut when I then \"Go\" the OS:\n\n\n\nThe debuggee OS literally grinds to a halt. I can't do anything. I can see some \"life\" in there by seeing the clock widget jumping by 20 second intervals but it is impossible to interact with windows or do anything. Note that if I disable the breakpoint above, everything starts working smoothly.\n\nCan someone explain what am I doing wrong there? And how can I make it work?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "698",
  "tags": [
    "windbg",
    "breakpoint",
    "kernel-mode"
  ],
  "user": "c00000fd",
  "time": "Jun 18, 2019 at 21:49",
  "comments": [
    {
      "user": "Ricardo",
      "text": "If you can't do anything how you disable the breakpoint? I think you will have to run the OS in sort of virtual machine and debug that....",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@Ricardo: The debuggee OS is running in a virtual machine. (The first screenshot is from a debuggee. It's showing a user-mode IDA. I added it to show that the execution was a few commands away from entering the kernel mode.)",
      "time": null
    },
    {
      "user": "blabb",
      "text": "make sure you are comparing not assigning  with a double == instead of single = use process specifc breakpoint with /p switch (it is a very hot path ) evaluating conditionals is a very intensive work",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@blabb: hmm, that might be an idea. So how would I get the addr of EPROCESS by PID?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "not sure how you can do it with ida as front end  shown below is a pure windbg demo\n\nfinding _EPROCESS with name or Cid\n\n```\n1: kd> !process 0 0 explorer.exe\nPROCESS ffff8e0c835c9300\n    SessionId: 1  Cid: 0fc8    Peb: 00583000  ParentCid: 0f8c\n    DirBase: 0a600002  ObjectTable: ffffd58bc24b0d40  HandleCount: 1913.\n    Image: explorer.exe\n\n1: kd> !process 0fc8 0\nSearching for Process with Cid == fc8\nPROCESS ffff8e0c835c9300\n    SessionId: 1  Cid: 0fc8    Peb: 00583000  ParentCid: 0f8c\n    DirBase: 0a600002  ObjectTable: ffffd58bc24b0d40  HandleCount: 1913.\n    Image: explorer.exe\n\n```\nsetting an unconditional process specific software bp\n\n```\n1: kd> bp /p ffff8e0c835c9300 win32kfull!NtUserMessageCall\nWARNING: Software breakpoints on session addresses can cause bugchecks.\nUse hardware execution breakpoints (ba e) if possible.\n\n1: kd> g\nBreakpoint 0 hit\nwin32kfull!NtUserMessageCall:\nffffeae2`57cdc020 48895c2408      mov     qword ptr [rsp+8],rbx\n\n0: kd> ? @$proc\nEvaluate expression: -125290582076672 = ffff8e0c`835c9300\n\n0: kd> kb\n # RetAddr            Call Site\n00 fffff803`2abdb285  win32kfull!NtUserMessageCall\n01 00007ffc`bb641184  nt!KiSystemServiceCopyEnd+0x25\nxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n0: kd> r rdx\nrdx=0000000000000081\n\n```\nsetting a conditional process specific breakpoint \n\n```\n0: kd> bp /p ffff8e0c835c9300 win32kfull!NtUserMessageCall \".if (@rdx != 0x112 ) { gc;}\"\n\nWARNING: Software breakpoints on session addresses can cause bugchecks.\nUse hardware execution breakpoints (ba e) if possible.\nbreakpoint 0 redefined\n\n0: kd> bl\n     0 e Disable Clear  ffffeae2`57cdc020  win32kfull!NtUserMessageCall \".if (@rdx != 0x112 ) {gc;}\"\n     Match process data ffff8e0c`835c9300\n\n\n0: kd> g\n\nwin32kfull!NtUserMessageCall:\nffffeae2`57cdc020 48895c2408      mov     qword ptr [rsp+8],rbx\n\n1: kd> ? @$proc\nEvaluate expression: -125290582076672 = ffff8e0c`835c9300\n\n1: kd> r rdx\nrdx=0000000000000112\n\n```\ncall stack for break \n\n```\n1: kd> kb\n # RetAddr             Call Site\n00 fffff803`2abdb285   win32kfull!NtUserMessageCall\n01 00007ffc`bb641184   nt!KiSystemServiceCopyEnd+0x25\n02 00007ffc`bb8b9d60   win32u!NtUserMessageCall+0x14\n03 00007ffc`bb8b98d2   USER32!RealDefWindowProcWorker+0x150\n04 00007ffc`b8aeea12   USER32!RealDefWindowProcW+0x52\n05 00007ffc`b8aeeaf2   UxTheme!DoMsgDefault+0x2e [es\\uxtheme\\handlers.cpp @ 550] \n06 00007ffc`b8ae8626   UxTheme!OnDwpSysCommand+0x32 [es\\uxtheme  \nctheme.cpp @ 7566] \n07 00007ffc`b8ae7641   UxTheme!_ThemeDefWindowProc+0x4c6 [emes\\uxtheme\\sethook.cpp @ 1067] \n08 00007ffc`bb8b9ad4   UxTheme!ThemeDefWindowProcW+0x11 [hemes\\uxtheme\\sethook.cpp @ 1109] \n09 00007ffc`a339bd0c   USER32!DefWindowProcW+0x1c4\n0a 00007ffc`a33b0f2e   v_WndProc+0xac\n0b 00007ffc`bb8bca66   s_WndProc+0x6e\n0c 00007ffc`bb8bc78c   USER32!UserCallWinProcCheckWow+0x266\n0d 00007ffc`bb8cfa83   USER32!DispatchClientMessage+0x9c\n0e 00007ffc`be5322c4   USER32!_fnDWORD+0x33\n0f 00007ffc`bb641184   ntdll!KiUserCallbackDispatcherContinue\n10 00007ffc`bb8b9d60   win32u!NtUserMessageCall+0x14\n11 00007ffc`bb8b98d2   USER32!RealDefWindowProcWorker+0x150\n12 00007ffc`b8aeea12   USER32!RealDefWindowProcW+0x52\n13 00007ffc`b8aeebb4   UxTheme!DoMsgDefault+0x2e [hemes\\uxtheme\\handlers.cpp @ 550] \n14 00007ffc`b8ae8626   UxTheme!OnDwpNcLButtonDown+0xa4 [hemes\\uxtheme  \nctheme.cpp @ 7157] \n15 00007ffc`b8ae7641   UxTheme!_ThemeDefWindowProc+0x4c6 [\\themes\\uxtheme\\sethook.cpp @ 1067] \n16 00007ffc`bb8b9ad4   UxTheme!ThemeDefWindowProcW+0x11 [l\\themes\\uxtheme\\sethook.cpp @ 1109] \n17 00007ffc`a339bd0c   USER32!DefWindowProcW+0x1c4\n18 00007ffc`a33b0f2e   v_WndProc+0xac\n19 00007ffc`bb8bca66   s_WndProc+0x6e\n1a 00007ffc`bb8bc582   USER32!UserCallWinProcCheckWow+0x266\n1b 00007ffc`a33a48a3   USER32!DispatchMessageWorker+0x1b2\n1c 00007ffc`a33a47a9   FrameMessagePump+0xe3\n1d 00007ffc`a33a46f6   explorerframe!BrowserThreadProc+0x85\n1e 00007ffc`a33a5a12   explorerframe!BrowserNewThreadProc+0x3a\n1f 00007ffc`a33b70c2  InternalResumeRT+0x12\n20 00007ffc`babdb3ec  Run+0xb2\n21 00007ffc`babdb0a5  TT_Run+0x3c\n22 00007ffc`babdaf85  ThreadProc+0xdd\n23 00007ffc`bc9ac315  s_ThreadProc+0x35\n24 00007ffc`bb6d7e94   shcore!_WrapperThreadProc+0xf5\n25 00007ffc`be4f7ad1   KERNEL32!BaseThreadInitThunk+0x14\n26 00000000`00000000   ntdll!RtlUserThreadStart+0x21\n\n```\nthere  isn't any special reason to use software bp  it comes by rote \n\nhow to do multiple conditions\n\n```\n1: kd> bp win32kfull!NtUserMessageCall \".if ( ( @rdx != 410 ) & ( @rcx != 20498 ) ) { r rdx,rcx; gc }\"\nWARNING: Software breakpoints on session addresses can cause bugchecks.\nUse hardware execution breakpoints (ba e) if possible.\nbreakpoint 0 redefined\n1: kd> g\nrdx=0000000000000084 rcx=0000000000010404\nrdx=0000000000000084 rcx=000000000001046e\nrdx=0000000000000084 rcx=0000000000010404\nrdx=0000000000000020 rcx=0000000000010470\nrdx=0000000000000020 rcx=000000000001046e\nrdx=0000000000000020 rcx=00000000000104a6\nrdx=0000000000000020 rcx=000000000001048e\nrdx=0000000000000020 rcx=0000000000060480\nrdx=0000000000000020 rcx=0000000000010446\nrdx=0000000000000020 rcx=0000000000010404\nrdx=0000000000000407 rcx=000000000001047c\nrdx=0000000000000084 rcx=0000000000010404\nrdx=000000000000004e rcx=0000000000010492\nwin32kfull!NtUserMessageCall:\nffffeae2`57cdc020 48895c2408      mov     qword ptr [rsp+8],rbx\n1: kd> r rdx,rcx\nrdx=0000000000000407 rcx=0000000000020498\n\n```\ndemo for bitwise versus logical operators and why logical operator needs to be evaluated as c++\n\n```\n0:000> $$ display rdx and rcx register\n0:000> r rdx, rcx\nrdx=0000000000000000 rcx=00007ffd7a57fc04\n0:000> $$ evaluating logical operator as C++ expression\n0:000> ?? @rdx && @rcx\nbool false\n0:000> $$ evaluating logical operator as masm expression (will fail)\n0:000> ? @rdx && @rcx\nNumeric expression missing from '& @rcx'\n0:000> $$ evaluating bitwise operator as masm expression \n0:000> ? @rdx & @rcx\nEvaluate expression: 0 = 00000000`00000000\n0:000> $$ evaluating bitwise operator as c++ expression \n0:000> ?? @rdx & @rcx\nunsigned int64 0\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jun 20, 2019 at 10:43",
      "is_accepted": true,
      "comments": [
        {
          "user": "c00000fd",
          "text": "Thanks. Two quick questions. 1) Why are you using software breakpoint instead of a hardware one? and 2) if I want to set up an AND condition, when I did ba e 1 /p ffffe001ab2c4180 fffff96000218ac0 \".if (@rdx != 0x112 || @rcx != 0x103cc) {gc;}\"` it triggered the breakpoint but not when I expected. RDX was not 0x112 and RCX was not 0x103cc. Is there another syntax for the OR/AND operator?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "no special reason  what are you trying bitwise OR (|) or  logical OR (||) anyway I added an edit take a look",
          "time": null
        },
        {
          "user": "c00000fd",
          "text": "I'm sorry, but what does if( @rdx != 410 ) & ( @rcx != 20498 ) do? If the & means AND then it's as if you wrote if(true). Also can you explain what's the purpose of r rdx,rcx part? As for the software bp it may cause BSOD if the memory is not paged yet. That's why I asked.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "& is bitwise && is logical  & is masm operator && is c++ operator  so if your default expression evaluator is masm && will  err and break  you need to enclose the condition with a @@c++ qualifier  that is why i asked what are you trying",
          "time": null
        }
      ]
    }
  ]
}