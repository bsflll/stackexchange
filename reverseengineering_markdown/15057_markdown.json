{
  "title": "IDA ignoring register changes in pseudocode",
  "link": "https://reverseengineering.stackexchange.com/questions/15057/ida-ignoring-register-changes-in-pseudocode",
  "content": "The Watcom compiler uses a fairly unusual calling convention, and IDA seems to be discarding some of the changes as irrelevant to its built-in pseudo-code. In my experience, that usually means I'm doing something wrong, as opposed to IDA :)\n\nFor example, in the following function fragment, the changes to ebx and edx are ignored in the pseudo-code.\n\n```\n; void __usercall RunScrIncDec(GeneralObject *object@<eax>, int *bufPtr@<edx>, int value@<ebx>)\nRunScrIncDec    proc near\n                cmp     byte ptr [edx], 0Ah\n                jnz     short loc_164288\n\n                inc     ebx\n                inc     edx\n                retn\n...\n\n```\nNote here that bufPtr and value are both incremented, and value is indeed passed by value, not by reference.\n\nIf I change the function's return type so that it's an int by replacing the void return type with an int and appending the value location @<ebx>, then IDA includes ebx one in the pseudo-code, but still ignores edx.\n\nIs there any way to tell IDA to pay attention to these changes?\nThat edx and ebx aren't merely spoiled by the function, and that they're notable changes that should be reversed to bufPtr++ and value++ rather than not showing any pseudo-code at all?\nOr is this just something that IDA isn't built to handle?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "492",
  "tags": [
    "ida",
    "functions"
  ],
  "user": "RobinHood70",
  "time": "Apr 2, 2017 at 8:54",
  "comments": [],
  "answers_data": [
    {
      "content": "As you rightfully figured out, IDA only takes into account changes it understands are related to the rest of the code. It will consider those values only in the case they're indeed return values the calling function.\n\nWhat you'll need to do, as you've figured out yourself, is to make IDA understand those are returned values.\n\nHere's a trick to let you do that, by setting that function to return a structure of two DWORDs (or any other type defined in the structure).\n\nFirst, create an IDA structure by going to the structures view (shift+F9) and then create a new structure (INS).\n\nIn that structure, define two DWORD integers (either by using D on the bottom of the structure or CTRL+E to increase the structure's size first).\n\nThen go back to the function, and modify the function's prototype. replace the void return type with the name of your structure, and append the value location specifier after the function's name. To specify two registers, in our case EBX and EDX`, use colons in between.\n\nThe final result should look like this, assuming you named your struct s_ret:\n\n```\ns_ret __usercall RunScrIncDec@<eax:ecx>(GeneralObject *object@<eax>, int *bufPtr@<edx>, int value@<ebx>)\n^^^^^                        ^^^^^^^^^^\n\n```\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Apr 2, 2017 at 9:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "RobinHood70",
          "text": "Thank you! I'd figured out I could sort of hack a pointer with a double register return value in a similar manner, but of course, that's not quite the same, and produced all kinds of wonky results. This is the bit I was missing.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "You're welcome! Glad I could help",
          "time": null
        },
        {
          "user": "RobinHood70",
          "text": "Follow-up question: I'm now getting some uses of __PAIR__ as IDA tries to treat the double DWORD as 64-bit value. Is there any way around this?",
          "time": null
        }
      ]
    }
  ]
}