{
  "title": "Permanently load a DLL to an executable",
  "link": "https://reverseengineering.stackexchange.com/questions/21000/permanently-load-a-dll-to-an-executable",
  "content": "With the help of IDA I was able to hard-code changes into an executable by simply replacing some bytes with a hex editor, what I did was to change the resolution to something larger.\n\nI've learnt that it's possible to do a similar thing with hooks, so I transferred all of the edits to multiple hooks. Now the issue is that I need to load my newly created DLL before anything else which means using a different method other than simply injecting it.\n\nI hope this makes sense, what would be the best method to achieve this?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "dll",
    "dll-injection",
    "assembly"
  ],
  "user": "George D",
  "time": "Mar 30, 2019 at 14:21",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. How is it different than simply injecting? One method of injecting a DLL is to create a process yourself, which means you typically have all required rights to do whatever you like with it. Combine that with starting said process suspended and you have a recipe for injecting DLLs before the main entry point of the executable gets to run ... what am I missing? (duh, only saw the answer after I commented ... that answer embodies all I described)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "An easy way to do this is to modify the IAT (Import Address Table/Import Directory) which can be done with a tool such as LordPE.\n\nFrom the main screen choose PE Editor and select the executable (or DLL) that you wish to modify:\n\n\nThen click Directories:\n\n\nClick the Ellipsis button next to Import Table:\n\n\nRight Click and choose add import:\n\n\nNow add your dll and an export from the DLL:\n\n\nPress OK and then SAVE. Although not required you can correct the PE checksum with the ? button (and save afterwards):\n\n\nNote that adding the import doesn't mean that the executable loading your dll calls the export specified. It just means that the dll will be loaded and it's DLLMain will be called.\n\n",
      "votes": "6",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Érycson Nóbrega",
          "text": "Just letting you know, instead of using LordPE, you can use PE Tools (petoolse.github.io/petools), the process is very similar.",
          "time": null
        }
      ]
    },
    {
      "content": "You could create a loader which simply creates your target app in suspended state and loads dll into virtual address space of that process. That way the dll you injected would run before entrypoint of the target app.\nExample code:\n\n```\nSTARTUPINFO si;\nPROCESS_INFORMATION pi;\nZeroMemory(&si, sizeof(STARTUPINFO));\nZeroMemory(&pi, sizeof(PROCESS_INFORMATION));\nsi.cb = sizeof(STARTUPINFO);\nLPCSTR dllname = \"testdll.dll\";\nLPVOID stringAddr = NULL;\nLPVOID LoadLib = NULL;\n\nLoadLib = GetProcAddress(GetModuleHandle(\"kernel32.dll\"), \"LoadLibraryA\");\nif (LoadLib == NULL) {\n    return -1;\n}\n\nif (!CreateProcess(TEXT(\"target.exe\"), NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi)) {\n    return -1;\n}\n\nstringAddr = VirtualAllocEx(pi.hProcess, NULL, strlen(dllname), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);\nif (stringAddr == NULL) {\n    return -1;\n}\n\nWriteProcessMemory(pi.hProcess, stringAddr, dllname, strlen(dllname), NULL);\nCreateRemoteThread(pi.hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)LoadLib, stringAddr, NULL, NULL);\nResumeThread(pi.hThread);\nWaitForSingleObject(pi.hProcess, INFINITE);\n\nCloseHandle(pi.hProcess);\nCloseHandle(pi.hThread);\nreturn 0;\n\n```\n",
      "votes": "4",
      "user": null,
      "time": "Mar 31, 2019 at 6:29",
      "is_accepted": false,
      "comments": []
    }
  ]
}