{
  "title": "How to use SHL/SAL, LEA and Add for arithmetic operations",
  "link": "https://reverseengineering.stackexchange.com/questions/30072/how-to-use-shl-sal-lea-and-add-for-arithmetic-operations",
  "content": "I'm having problem computing the following arithmetic questions using SHL/SAL, LEA and ADD, and hoping someone can help explain or find the best ways to apply those:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "927",
  "tags": [
    "assembly"
  ],
  "user": "Evion Wong",
  "time": "Feb 22, 2022 at 21:46",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Sounds a bit like homework/assignment.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "SHL and SAL are the same instruction, they do the same: Shift bits to the left.\n\nShifting bits to the left is equivalent to multiplying by two.\n\nFor example, if you have the number 3 in the register AX, it would look something like this:\n\n```\nmov ax, 3 ; ax = 3 = 0000 0000 0000 0011\nsal ax, 1 ; ax = 6 = 0000 0000 0000 0110 \n\n```\nLEA allows you to perform a memory-addressing computation in the instruction, so you can use it to calculate an effective address (without accessing it).\n\nFor example:\n\n```\nmov rax, 0x100\nmov rdi, 0x200\nlea rax, [rax + rdi*2 + 0x10]\n; rax = rax + rdi*2 + 0x10 \n; rax = 0x100 + 0x200*2 + 0x10\n; rax = 0x100 + 0x400 + 0x10\n; rax = 0x510\n\n```\nHowever, not all operations are valid addressing modes, you should check Intel SDM Volume 1 \"Basic Architecture\":\n\n\n\nSo finally, to address your homework question, let's see:\n\nWith shifts you can only multiply by powers of two, the same happens with lea, however, you know that 24 = 3*8, so you could do add 3 times the variable, and then multiply it by 8.\n\n```\n; rax = var\nlea rax, [rax + rax*2] ; rax = 3*var\nsal rax, 3             ; rax = 3*var*8\n\n```\nFor 1000 we could do something similar, we know that 1000 is 2*5*2*5*2*5\n\n```\nlea rax, [rax + rax*4] ; rax = 5*var\nlea rax, [rax + rax*4] ; rax = 5*5*var\nlea rax, [rax + rax*4] ; rax = 5*5*5*var\nsal rax, 3             ; rax = 8*125*var = 1000*var\n\n```\nAn alternative could be:\n\n```\nlea rdi, [rax + rax*2] ; rdi = 3*var\nsal rax, 7             ; rax = var*128\nsub rax, rdi           ; rax = var*128 - var*3 = var * 125\nsal rax, 3             ; rax = var*125 * 8\n\n```\n",
      "votes": "2",
      "user": "Marco",
      "time": "Feb 23, 2022 at 0:47",
      "is_accepted": false,
      "comments": []
    }
  ]
}