{
  "title": "Trap Flag - Anti-debugging trick",
  "link": "https://reverseengineering.stackexchange.com/questions/18978/trap-flag-anti-debugging-trick",
  "content": "I am trying to reverse a program which is employing some kind of anti-debugging trick based on the use of  SEHs and the TF. The code stars with:\n\n\n\nSo apparently it's generating an exception with\n\n```\nXOR DWORD PTR [ESP], 154h\n\n```\nWhich ultimately terminates with a call to ExitProcess() without even running the program.\n\nI tried using NOPs to bypass this but since upon execution the EP is already pointing to this problematic piece of code it did not work. \n\nHow can  I bypass this and what's really triggering the exception?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "x86",
    "anti-debugging"
  ],
  "user": "Slava",
  "time": "Aug 5, 2018 at 9:30",
  "comments": [],
  "answers_data": [
    {
      "content": "It is setting a trap flag with that xor instruction \n\nwhen it is run normally (not under debugger)\n\nthe trap flag is triggered so the handler gets a chance to execute \n\nwhen the binary is run under debugger the trap flag is ignored \nand the handler doesn't get a chance to execute\n\nhard patch to point to the handler directly or simply change the eip in debugger  for analyzing \n\nyour screenshot looks like you are using ollydbg \n\nif so just press shift + f9 after setting a breakpoint at 0x401060  @ the seh handler  that would pass the exception to the program and would bypass the trick\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Aug 5, 2018 at 19:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "mrexodia",
          "text": "Most likely this is ollydbg specific behavior.",
          "time": null
        }
      ]
    }
  ]
}