{
  "title": "How to find vulnerabilities in stripped binaries?",
  "link": "https://reverseengineering.stackexchange.com/questions/13770/how-to-find-vulnerabilities-in-stripped-binaries",
  "content": "Do you just use tools like strace and a debugger to disassemble and find syscalls and then read the disassembly to find say for example a buffer overflow? Is that all you can do? I mean after all you don't have the source code.\n\nIf someone could shed some light on this particular topic I would be very grateful.\n\nThank you.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "631",
  "tags": [
    "debugging",
    "exploit",
    "security"
  ],
  "user": "user209343",
  "time": "Oct 20, 2016 at 14:18",
  "comments": [
    {
      "user": "Nordwald",
      "text": "I suggest reading something about data flow analysis",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Generally speaking finding vulnerabilities is not only about static reverse engineering, there are also dynamic techniques such as fuzzing. \nThere are some fuzzing frameworks/products that can be used for this, \npart of them are using dynamic instrumentation and such as AFL, some part gives you an ability to configure generation of the data such as Peach.\n\nIf you can not or don't want to use fuzzers, you can reverse engineer the program. The fact of stripping doesn't mean that you lost all the useful information about the binary, in most cases you still have a lot of other possibilities to locate specific functionality in it such as:\n\nBTW, if you still want to run the application in order to locate system calls, \nyou can expand this methodology to using ltrace which is not limited by system calls, but gives you all dynamic library calls. \n\n",
      "votes": "1",
      "user": "w s",
      "time": "Oct 23, 2016 at 10:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}