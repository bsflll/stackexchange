{
  "title": "Is it possible to change the value of a register when a certain instruction is executed?",
  "link": "https://reverseengineering.stackexchange.com/questions/13300/is-it-possible-to-change-the-value-of-a-register-when-a-certain-instruction-is-e",
  "content": "I was wondering if it was possible to change the value of a register when an instruction gets executed. For example\n\n```\n0x10 call eax\n\n```\nSay eax contains 0x20 at that point, I want to add 0x10 to it so that the address that gets called is now 0x30.\n\nWhat I tried doing was set a AddVectoredExceptionHandler and put an INT3 on 0x10. When my exception handler gets called, I restore the original byte at 0x10. Then I add 0x10 to eax and jump to ExceptionInfo->ContextRecord->Eip. This obviously doesn't work well because I never return to the OS.\n\nIs there another way or is this even possible?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "312",
  "tags": [
    "windows",
    "x86",
    "exception"
  ],
  "user": "Majiick",
  "time": "Aug 18, 2016 at 10:16",
  "comments": [],
  "answers_data": [
    {
      "content": "Alright, so apparently you can just edit ExceptionInfo->ContextRecord->Eax inside your \n\nLONG CALLBACK VectoredHandler(\n  _In_ PEXCEPTION_POINTERS ExceptionInfo\n); \n\nfunction and the OS will set the eax to that value when it returns the execution back to where the exception was(If you return EXCEPTION_CONTINUE_EXECUTION.)\n\n",
      "votes": "1",
      "user": "Majiick",
      "time": "Aug 18, 2016 at 4:31",
      "is_accepted": true,
      "comments": []
    }
  ]
}