{
  "title": "ELF link_map when linked as RELRO",
  "link": "https://reverseengineering.stackexchange.com/questions/6525/elf-link-map-when-linked-as-relro",
  "content": "When linking a binary with -Wl,-z,relro,-z,now, all relocations are performed at start-up before passing control to the binary.\n\nBecause of this, there is no need for the .got.plt segment.  Normally, a pointer to the linker's link_map structure is stored in this segment.\n\nWhen compiled with full RELRO, where, if anywhere, can a copy of the link_map be obtained without consulting other loaded libraries, or libdl?\n\nThe place one would expect it to be -- in the segment marked with the tag DT_PLTGOT -- it does not appear.  Instead, there's just a link back to Program Header of type PT_DYNAMIC.  The slot in the segment marked DT_GOTPLT starts with the offset of the DYNAMIC section, and does not contain any pointers to the link map.\n\nHeaders\n\n```\n$ readelf -a amd64-pwntest-relro | egrep -i '(_dynamic|pltgot)'\n 0x0000000000000003 (PLTGOT)             0x202eb8\n    48: 0000000000202ca8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n\n```\nBinary is RELRO\n\n```\n$ checksec.sh --file amd64-relro\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\nFull RELRO      No canary found   NX disabled   PIE enabled     No RPATH   No RUNPATH   amd64-relro\n\n```\nGDB shows that the data at the specified offset, at runtime, does not contain a link map pointer.\n\n```\n$ gdb ./amd64-relro\ngdb-peda$ start\ngdb-peda$ vmmap relro\nStart              End                Perm      Name\n0x0000555555554000 0x0000555555556000 r-xp      /home/user/pwntools-regression/src/amd64-relro\n0x0000555555756000 0x0000555555757000 r-xp      /home/user/pwntools-regression/src/amd64-relro\n0x0000555555757000 0x0000555555758000 rwxp      /home/user/pwntools-regression/src/amd64-relro\ngdb-peda$ telescope 0x0000555555554000+0x202eb8 5\n00:0000|  0x555555756eb8 --> 0x202ca8 \n01:0008|  0x555555756ec0 --> 0x0 \n02:0016|  0x555555756ec8 --> 0x0 \n03:0024|  0x555555756ed0 --> 0x7ffff7675870 (<__GI___libc_free>:        mov    rax,QWORD PTR [rip+0x33b671]        # 0x7ffff79b0ee8)\n04:0032|  0x555555756ed8 --> 0x7ffff79c0430 (<__pthread_create_2_1>:    push   rbp)\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "4k",
  "tags": [
    "linux",
    "elf",
    "got",
    "plt"
  ],
  "user": "Zach Riggle",
  "time": "Nov 20, 2014 at 8:48",
  "comments": [],
  "answers_data": [
    {
      "content": "If the binary has a DT_DEBUG entry in the PT_DYNAMIC area, it will be filled with a pointer to the r_debug symbol in the dynamic linker.\n\n```\ntest:00007F17ED7DDDB0 Elf64_Dyn <DT_SYMENT, 18h>\ntest:00007F17ED7DDDB0 Elf64_Dyn <DT_DEBUG, offset _r_debug>\ntest:00007F17ED7DDDB0 Elf64_Dyn <DT_PLTGOT, offset _GLOBAL_OFFSET_TABLE_>\n\n```\nThe second field in r_debug is the pointer to link_map:\n\n```\ndebug001:00007F17ED5DC1A0 _r_debug dd 1                                    ; r_version\ndebug001:00007F17ED5DC1A0 db 0, 0, 0, 0\ndebug001:00007F17ED5DC1A0 dq offset _link_map_head                ; r_map\ndebug001:00007F17ED5DC1A0 dq offset _dl_debug_state               ; r_brk\ndebug001:00007F17ED5DC1A0 dd RT_ADD                               ; r_state\ndebug001:00007F17ED5DC1A0 db 0, 0, 0, 0\ndebug001:00007F17ED5DC1A0 dq 7F17ED3B8000h                        ; r_ldbase\n\n```\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Oct 23, 2014 at 10:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "Zach Riggle",
          "text": "Bummer that there doesn't appear to be any additional ways for a stripped binary.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "Even stripped binaries have dynamic section, and usually it includes the DT_DEBUG entry, so what's the problem?",
          "time": null
        },
        {
          "user": "Zach Riggle",
          "text": "After revisiting, it appears that I misunderstood your post.  The DT_DEBUG entry is populated at runtime.  I mistook the output of readelf -a binary showing 0 for that slot to mean that it didn't contain useful data.  Examining under GDB shows that is it populated.",
          "time": null
        },
        {
          "user": "Zach Riggle",
          "text": "Awesome, thanks again!  Just landed a pull request for pwntools to take advantage of this.  Saves about thirty seconds (50% of runtime; slow network comms) vs. leaking a GOT pointer into libc and doing a scandown then parsing the elf header.",
          "time": null
        }
      ]
    }
  ]
}