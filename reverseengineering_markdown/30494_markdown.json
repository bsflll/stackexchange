{
  "title": "What is libm_sse2_sin_precise() and how to find it's parameters in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/30494/what-is-libm-sse2-sin-precise-and-how-to-find-its-parameters-in-ida",
  "content": "I'm new to reverse engineering with IDA.\n\nI've found libm_sse2_sin_precise while inspecting c-pseudocode for some Win32 executable.\n\n\n\nI tried clicking that function but the executable requires the DLLs.\n\nSo, I cannot view the pseudocode for that function.\n\n\n\nCan anyone tell What's the libm_sse2_sin_precise and How do I find parameters for that function.\n\nDisassembly around the call:\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "257",
  "tags": [
    "ida",
    "disassembly",
    "assembly"
  ],
  "user": null,
  "time": "Jun 10, 2022 at 5:21",
  "comments": [
    {
      "user": "sudhackar",
      "text": "MSVC calls __libm_sse2_sin_precise when compiling for 32-bit x86. see stackoverflow.com/questions/1844669/benefits-of-x87-over-sse",
      "time": null
    },
    {
      "user": "user41255",
      "text": "@sudhacker Got it! Thanks! But how do I find the parameters of that function?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Can you add the disassembly around the call?",
      "time": null
    },
    {
      "user": "user41255",
      "text": "@IgorSkochinsky Yes.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "From the disassembly, I looks like the function uses xmm0 as input and returns the result in xmm0 as well.\n\nBecause x86 code normally uses stack for passing arguments, the decompiler fails to detect this automatically, so you need to specify the function prototype manually using __usercall. Something like\n\n```\ndouble __usercall sin_sse<xmm0>(double <xmm0>);\n\n```\nShould work.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jun 10, 2022 at 6:19",
      "is_accepted": true,
      "comments": []
    }
  ]
}