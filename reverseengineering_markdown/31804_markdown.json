{
  "title": "Can radare2 skip syscall when `db main;dts+;dc`",
  "link": "https://reverseengineering.stackexchange.com/questions/31804/can-radare2-skip-syscall-when-db-maindtsdc",
  "content": "more detailed see this\n\nIn short, I want to skip syscall when recording program, but it seems that the program would always stop after ths syscall.\n\nHope someone can help me. Thanks.\n\nbelow is running results:\n\n```\n$ git rev-parse origin/master\n093d583000f9f78ec1a4d8643cb59e465a0ede7c\n$ git diff origin/master \ndiff --git a/libr/main/radare2.c b/libr/main/radare2.c\nindex 2bc1cb68f9..15ce049d9c 100644\n--- a/libr/main/radare2.c\n+++ b/libr/main/radare2.c\n@@ -1706,7 +1706,7 @@ R_API int r_main_radare2(int argc, const char **argv) {\n                        debug = r_config_get_b (r->config, \"cfg.debug\");\n                        if (ret != -1 && r_cons_is_interactive ()) {\n                                char *question;\n-                               bool no_question_debug = ret & 1;\n+                               bool no_question_debug = 1;\n$ r2 -NAd -c \"db main;dts+;db;dc;dr rip;pd-- 4\" /mnt/ubuntu/home/czg/csapp3e/asm/prog\n...\n0x00401060 - 0x00401061 1 --x sw break enabled valid cmd=\"\" cond=\"\" name=\"main\" module=\"/mnt/ubuntu/home/czg/csapp3e/asm/prog\"\n0x7fbe6445b08b\n            0x7fbe6445b07e      6690           nop\n            ; CALL XREF from map._usr_lib_ld_linux_x86_64.so.2.r_x @ +0x198ae(x)\n            ; CALL XREFS from rip @ +0x5238(x), +0x5252(x)\n            0x7fbe6445b080      f30f1efa       endbr64\n            0x7fbe6445b084      b80c000000     mov eax, 0xc            ; 12\n            0x7fbe6445b089      0f05           syscall\n            0x7fbe6445b08b      488905e64101.  mov qword [0x7fbe6446f278], rax ; [0x7fbe6446f278:8]=0\n            0x7fbe6445b092      4839f8         cmp rax, rdi\n        ,=< 0x7fbe6445b095      7209           jb 0x7fbe6445b0a0\n        |   0x7fbe6445b097      31c0           xor eax, eax\n[0x7fdcd2e4908b]> ds\n[0x7fdcd2e4908b]> dr rip\n0x7fdcd2e49092\n\n```\nBest regards\n\n",
  "votes": "3",
  "answers": 1,
  "views": "49",
  "tags": [
    "debugging",
    "radare2"
  ],
  "user": "An5Drama",
  "time": "Apr 20, 2023 at 11:35",
  "comments": [],
  "answers_data": [
    {
      "content": "I have answered in the github ticket. But I'm copypasting the answer for practical reasons :9\nThat's the oneliner you want:\n\nr2 -c “dcu main;e dbg.trace=true;dsu -1;dt” -d /bin/ls\n\nSome comments below:\n\nAlso, bear in mind that you can't use dtd if you run the traces until the program dies, because there will be no memory allocated and you cant disassemble . better to continue until a specific address or exit syscall or so.\n\nAnother thing is that you are tracing EVERYTHING so you probably want to see other vars like dbg.trace.inrange or dbg.trace.libs to avoid recording instructions from libraries or from sections of the binary that you dont need.\n\n",
      "votes": "2",
      "user": "pancake",
      "time": "Apr 20, 2023 at 20:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}