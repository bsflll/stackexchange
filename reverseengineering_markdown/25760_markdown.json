{
  "title": "Getting the algorithm used inside this .so file",
  "link": "https://reverseengineering.stackexchange.com/questions/25760/getting-the-algorithm-used-inside-this-so-file",
  "content": "I'v been trying to reverse-engineer a BLE \"Smartlock\" to open it using Python instead of the App that it came with.\n\nI progressed quite far with disassembling the SDK they provide, identifying BLE packets, headers and all, but now I'm stuck.\nIt contains a .so file inside the Java library which is reponsible for encoding and decoding the data that is sent from and to the lock.\nIt takes two arguments and returns the en- or decrypted data:\n\n```\n// .java - The data as a byte array and a single byte to somehow encrypt it all\npublic static native byte[] decodeWithEncryptByte(byte[] dataByteArray, byte encryptByte);\n\n```\nMaybe it's even an algorighm that is well known/has a name, but I'm completely stuck. Any tip would be helpful, even in human-readable pseudocode!\n\nThe decodeWithEncriptByte part follows:\n\n```\n.text:00000a20 <Java_com_scaf_android_client_CodecUtils_decodeWithEncrypt>:\n.text:00000a20 55                               push   %ebp\n.text:00000a21 57                               push   %edi\n.text:00000a22 56                               push   %esi\n.text:00000a23 53                               push   %ebx\n.text:00000a24 e8 97 fb ff ff                   call   0x000005c0\n.text:00000a29 81 c3 b7 25 00 00                add    $0x25b7,%ebx\n.text:00000a2f 8d 64 24 c4                      lea    -0x3c(%esp),%esp\n.text:00000a33 8b 74 24 50                      mov    0x50(%esp),%esi\n.text:00000a37 0f b6 44 24 5c                   movzbl 0x5c(%esp),%eax\n.text:00000a3c 8b 4c 24 58                      mov    0x58(%esp),%ecx\n.text:00000a40 88 44 24 2f                      mov    %al,0x2f(%esp)\n.text:00000a44 8b 06                            mov    (%esi),%eax\n.text:00000a46 89 4c 24 04                      mov    %ecx,0x4(%esp)\n.text:00000a4a c7 44 24 08 00 00 00 00          movl   $0x0,0x8(%esp)\n.text:00000a52 89 34 24                         mov    %esi,(%esp)\n.text:00000a55 ff 90 e0 02 00 00                call   *0x2e0(%eax)\n.text:00000a5b 8b 7c 24 58                      mov    0x58(%esp),%edi\n.text:00000a5f 89 44 24 20                      mov    %eax,0x20(%esp)\n.text:00000a63 8b 06                            mov    (%esi),%eax\n.text:00000a65 89 7c 24 04                      mov    %edi,0x4(%esp)\n.text:00000a69 89 34 24                         mov    %esi,(%esp)\n.text:00000a6c ff 90 ac 02 00 00                call   *0x2ac(%eax)\n.text:00000a72 89 c5                            mov    %eax,%ebp\n.text:00000a74 8b 06                            mov    (%esi),%eax\n.text:00000a76 89 6c 24 04                      mov    %ebp,0x4(%esp)\n.text:00000a7a 89 34 24                         mov    %esi,(%esp)\n.text:00000a7d ff 90 c0 02 00 00                call   *0x2c0(%eax)\n.text:00000a83 8b 4c 24 20                      mov    0x20(%esp),%ecx\n.text:00000a87 89 c7                            mov    %eax,%edi\n.text:00000a89 8b 06                            mov    (%esi),%eax\n.text:00000a8b 89 4c 24 10                      mov    %ecx,0x10(%esp)\n.text:00000a8f 89 6c 24 0c                      mov    %ebp,0xc(%esp)\n.text:00000a93 c7 44 24 08 00 00 00 00          movl   $0x0,0x8(%esp)\n.text:00000a9b 89 7c 24 04                      mov    %edi,0x4(%esp)\n.text:00000a9f 89 34 24                         mov    %esi,(%esp)\n.text:00000aa2 ff 90 40 03 00 00                call   *0x340(%eax)\n.text:00000aa8 8b 06                            mov    (%esi),%eax\n.text:00000aaa c7 44 24 08 00 00 00 00          movl   $0x0,0x8(%esp)\n.text:00000ab2 89 7c 24 04                      mov    %edi,0x4(%esp)\n.text:00000ab6 89 34 24                         mov    %esi,(%esp)\n.text:00000ab9 ff 90 e0 02 00 00                call   *0x2e0(%eax)\n.text:00000abf 89 44 24 24                      mov    %eax,0x24(%esp)\n.text:00000ac3 8b 06                            mov    (%esi),%eax\n.text:00000ac5 89 7c 24 04                      mov    %edi,0x4(%esp)\n.text:00000ac9 89 34 24                         mov    %esi,(%esp)\n.text:00000acc ff 90 ac 02 00 00                call   *0x2ac(%eax)\n.text:00000ad2 89 44 24 28                      mov    %eax,0x28(%esp)\n.text:00000ad6 85 c0                            test   %eax,%eax\n.text:00000ad8 7e 3f                            jle    0x00000b19\n.text:00000ada 8b 7c 24 24                      mov    0x24(%esp),%edi\n.text:00000ade 89 c1                            mov    %eax,%ecx\n.text:00000ae0 89 74 24 50                      mov    %esi,0x50(%esp)\n.text:00000ae4 0f b6 e8                         movzbl %al,%ebp\n.text:00000ae7 0f b6 74 24 2f                   movzbl 0x2f(%esp),%esi\n.text:00000aec 89 f8                            mov    %edi,%eax\n.text:00000aee 01 cf                            add    %ecx,%edi\n.text:00000af0 8b 8b fc ff ff ff                mov    -0x4(%ebx),%ecx\n.text:00000af6 8d 76 00                         lea    0x0(%esi),%esi\n.text:00000af9 8d bc 27 00 00 00 00             lea    0x0(%edi,%eiz,1),%edi\n.text:00000b00 89 f2                            mov    %esi,%edx\n.text:00000b02 83 c0 01                         add    $0x1,%eax\n.text:00000b05 32 50 ff                         xor    -0x1(%eax),%dl\n.text:00000b08 88 50 ff                         mov    %dl,-0x1(%eax)\n.text:00000b0b 32 14 29                         xor    (%ecx,%ebp,1),%dl\n.text:00000b0e 88 50 ff                         mov    %dl,-0x1(%eax)\n.text:00000b11 39 f8                            cmp    %edi,%eax\n.text:00000b13 75 eb                            jne    0x00000b00\n.text:00000b15 8b 74 24 50                      mov    0x50(%esp),%esi\n.text:00000b19 8b 7c 24 28                      mov    0x28(%esp),%edi\n.text:00000b1d 8b 06                            mov    (%esi),%eax\n.text:00000b1f 89 34 24                         mov    %esi,(%esp)\n.text:00000b22 89 7c 24 04                      mov    %edi,0x4(%esp)\n.text:00000b26 ff 90 c0 02 00 00                call   *0x2c0(%eax)\n.text:00000b2c 8b 4c 24 24                      mov    0x24(%esp),%ecx\n.text:00000b30 8b 16                            mov    (%esi),%edx\n.text:00000b32 89 7c 24 0c                      mov    %edi,0xc(%esp)\n.text:00000b36 89 4c 24 10                      mov    %ecx,0x10(%esp)\n.text:00000b3a 89 44 24 04                      mov    %eax,0x4(%esp)\n.text:00000b3e 89 34 24                         mov    %esi,(%esp)\n.text:00000b41 c7 44 24 08 00 00 00 00          movl   $0x0,0x8(%esp)\n.text:00000b49 89 44 24 24                      mov    %eax,0x24(%esp)\n.text:00000b4d ff 92 40 03 00 00                call   *0x340(%edx)\n.text:00000b53 8b 44 24 20                      mov    0x20(%esp),%eax\n.text:00000b57 8b 16                            mov    (%esi),%edx\n.text:00000b59 89 34 24                         mov    %esi,(%esp)\n.text:00000b5c 89 44 24 08                      mov    %eax,0x8(%esp)\n.text:00000b60 8b 44 24 58                      mov    0x58(%esp),%eax\n.text:00000b64 c7 44 24 0c 00 00 00 00          movl   $0x0,0xc(%esp)\n.text:00000b6c 89 44 24 04                      mov    %eax,0x4(%esp)\n.text:00000b70 ff 92 00 03 00 00                call   *0x300(%edx)\n.text:00000b76 8b 44 24 24                      mov    0x24(%esp),%eax\n.text:00000b7a 8d 64 24 3c                      lea    0x3c(%esp),%esp\n.text:00000b7e 5b                               pop    %ebx\n.text:00000b7f 5e                               pop    %esi\n.text:00000b80 5f                               pop    %edi\n.text:00000b81 5d                               pop    %ebp\n.text:00000b82 c3                               ret    \n.text:00000b83 8d b6 00 00 00 00                lea    0x0(%esi),%esi\n.text:00000b89 8d bc 27 00 00 00 00             lea    0x0(%edi,%eiz,1),%edi\n\n```\nSimilarly, the encode process is probably very similar.\n\nI have used a online disassembler to analyse the Assembly and the opened file is available over there as well, if anyone has a clue what's going on here!\n\nAny help is greatly appreciated!\n\nEDIT: The file is available here: https://github.com/ttlock/Android_SDK_Demo/blob/master/app/libs/ttlock-release-3.0.7.aar\n\nTo view the specific file in question, you only need to download it and extract it, inside is a folder named jni/ with the different architectures of the same thing\n\nThe device is a TTLock and I'm looking to reverse-engineer it to make it fully open-source, so that people can make custom gateways to the locks, permitting it to work locally (current Gateway only supports Web-operation... and phones China for that). I have 5 TTLocks here, although they're nice locks, it's a bummer that they don't work over LAN when the internet is down.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "754",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "Fusseldieb",
  "time": "Aug 31, 2020 at 21:28",
  "comments": [
    {
      "user": "morsisko",
      "text": "Ghidra can generate pseudocode, however there are some indirect calls that may be important. You could live-debug the binary to check what is going on.",
      "time": null
    },
    {
      "user": "Fusseldieb",
      "text": "Thanks for the suggestion. I tried it but couldn't really get an usable result @morsisko",
      "time": null
    },
    {
      "user": "nornor",
      "text": "Try to using r2dec or IDA Decompiler with static analysis will be very helpful",
      "time": null
    },
    {
      "user": "morsisko",
      "text": "Without having the whole .so it is hard to tell anything more helpful",
      "time": null
    },
    {
      "user": "Fusseldieb",
      "text": "@julian I included the file and a better description on what I'm planning to do",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "With a 256-byte table dscrc_table declared, the decryption loop is a one-liner:\n\n```\n  for( int i = 0; i < vNewByteArrayLen; ++i )\n    vNewByteArrayElts[i] ^= a4KeyByte ^ dscrc_table[vNewByteArrayLen];\n\n```\nSee my gist on GitHub.\n\nEdit: is this thing really being used to protect your door from being opened by unauthorized people? Throw it away!\n\n",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "Sep 1, 2020 at 3:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "Fusseldieb",
          "text": "Wow! That's just amazing! I'll take a look at it, but I'm still a bit overthrown by all the C++ code. The whole Java code is already a mess, one function calls the other, all without proper names due being decompiled. You helped me a ton with that! If you're interested in this little journey to opensource the lock, let me know, but no need for that! :)",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "It's nearly identical. Since that function does not take a key byte as input, it instead uses the last byte as the key. If you were to take your input array, chop off the last byte (making the array one byte smaller), and pass the smaller array and the key byte to the function above, the results would be the same.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "In more specific detail, the differences are: 1) since that function does not take a key byte as argument, it uses the last element in the array as the key byte; 2) the for loop goes for one fewer iteration (not processing the last, key, byte); 3) the expression for accessing dscrc_table is almost the same, but put a -1 at the end of it inside of the square brackets; 4) since the for loop ignores the last byte (as that is used as the key), the size of the output array is one byte smaller.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "I have to reiterate, if this is the encryption scheme being used to protect your front door, REMOVE IT AND THROW IT AWAY.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "Each output byte is the XOR of three things: 1) the input byte from the array; 2) the byte passed as argument; 3) the one pulled from dscrc_table[len(array)]. Note that #2 and #3 are the same for every iteration of the loop; only #1 changes.",
          "time": null
        }
      ]
    },
    {
      "content": "Rolf Gave a nice Answer comparing his gist with a few minutes of ghidra on the file you edited in ghidra does give a nearly identical Pseudo Code\n\nlooking at JniEnv it is defined like\n\n```\nstruct {\nconst struct func* Funcs;\njwhatever GetSomeJava(jsomething foo, jotherthing blah) {\nreturn funcs->GetSomeJava(…...);\n}\n229 function ptrs like this \n}\n\n```\nso creating a fake struct with 230 PVOIDS and retyping the param 1 as JniEnv*\nghidra makes the *code (blah + foo ) as Env->xn\nthe dscrc is a dallas semiconductor crc lookup table\n\nhere is the pseudo code from ghidra\n\n```\n/* WARNING: Function: __i686.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */\n\nundefined4\nJava_com_scaf_android_client_CodecUtils_decodeWithEncrypt\n          (JniEnv *Env,int param_2,byte *dallasarray,byte key)\n\n{\n  byte bVar1;\n  int local_EAX_53;\n  int local_EAX_76;\n  int local_EAX_93;\n  byte *local_EAX_153;\n  uint uVar2;\n  int i;\n  byte *pbVar3;\n  undefined4 uVar4;\n  \n  local_EAX_53 = (**(code **)((int)Env->field_0x0 + 0x2e0))(Env,dallasarray,0);\n  local_EAX_76 = (**(code **)((int)Env->field_0x0 + 0x2ac))(Env,dallasarray);\n  local_EAX_93 = (**(code **)((int)Env->field_0x0 + 0x2c0))(Env,local_EAX_76);\n  (**(code **)((int)Env->field_0x0 + 0x340))(Env,local_EAX_93,0,local_EAX_76,local_EAX_53);\n  local_EAX_153 = (byte *)(**(code **)((int)Env->field_0x0 + 0x2e0))(Env,local_EAX_93,0);\n  uVar2 = (**(code **)((int)Env->field_0x0 + 0x2ac))(Env,local_EAX_93);\n  if (0 < (int)uVar2) {\n    i = (int)local_EAX_153;\n    do {\n      pbVar3 = (byte *)(i + 1);\n      bVar1 = *(byte *)i;\n      *(byte *)i = key ^ bVar1;\n      *(byte *)i = key ^ bVar1 ^ dscrc_table[uVar2 & 0xff];\n      i = (int)pbVar3;\n    } while (pbVar3 != local_EAX_153 + uVar2);\n  }\n  uVar4 = (**(code **)((int)Env->field_0x0 + 0x2c0))(Env,uVar2);\n  (**(code **)((int)Env->field_0x0 + 0x340))(Env,uVar4,0,uVar2,local_EAX_153);\n  (**(code **)((int)Env->field_0x0 + 0x300))(Env,dallasarray,local_EAX_53,0);\n  return uVar4;\n}\n\n```\nimporting data types from this ghidra Extension  JniAnalyzer\nthe PseudoCode becomes Still Better\n\n```\nF:\\>mkdir jniana\n\nF:\\>cd jniana\n\nF:\\jniana>f:\\git\\bin\\git.exe clone https://github.com/Ayrx/JNIAnalyzer.git\n\nCloning into 'JNIAnalyzer'...\nremote: Enumerating objects: 347, done.\nRremote: Total 347 (delta 0), reused 0 (delta 0), pack-reused 347                                                       Recei\nReceiving objects: 100% (347/347), 14.27 MiB | 102.00 KiB/s, done.\nResolving deltas: 100% (92/92), done.\n\nF:\\jniana>dir /b /s *.gdt\nF:\\jniana\\JNIAnalyzer\\JNIAnalyzer\\data\\jni_all.gdt\n\nF:\\jniana>f:\\ghidra912\\ghidraRun.bat\n\nclick the small black arrow in Data Type Manager \nOpen File Archieve \nNavigate to this gdt and load it \n\nSelect the Function in decompiler and Edit Function Signature \nRetype the First Argument to JniEnv* and see the differnece \nas below \n\n```\nPseudo Code After Adding the Correct type for first Argument JniEnv * param1\n\n```\njbyteArray\nJava_com_scaf_android_client_CodecUtils_decodeWithEncrypt\n          (JNIEnv *Env,int Unused,jbyteArray param_3,byte param_4)\n\n{\n  byte bVar1;\n  jbyte *buf;\n  jsize len;\n  jbyteArray array;\n  byte *buf_00;\n  uint len_00;\n  byte *pbVar2;\n  byte *pbVar3;\n  \n  buf = (*(*Env)->GetByteArrayElements)((JNIEnv *)Env,param_3,(jboolean *)0x0);\n  len = (*(*Env)->GetArrayLength)((JNIEnv *)Env,(jarray)param_3);\n  array = (*(*Env)->NewByteArray)((JNIEnv *)Env,len);\n  (*(*Env)->SetByteArrayRegion)((JNIEnv *)Env,array,0,len,buf);\n  buf_00 = (byte *)(*(*Env)->GetByteArrayElements)((JNIEnv *)Env,array,(jboolean *)0x0);\n  len_00 = (*(*Env)->GetArrayLength)((JNIEnv *)Env,(jarray)array);\n  if (0 < (int)len_00) {\n    pbVar2 = buf_00;\n    do {\n      pbVar3 = pbVar2 + 1;\n      bVar1 = *pbVar2;\n      *pbVar2 = param_4 ^ bVar1;\n      *pbVar2 = param_4 ^ bVar1 ^ dscrc_table[len_00 & 0xff];\n      pbVar2 = pbVar3;\n    } while (pbVar3 != buf_00 + len_00);\n  }\n  array = (*(*Env)->NewByteArray)((JNIEnv *)Env,len_00);\n  (*(*Env)->SetByteArrayRegion)((JNIEnv *)Env,array,0,len_00,(jbyte *)buf_00);\n  (*(*Env)->ReleaseByteArrayElements)((JNIEnv *)Env,param_3,buf,0);\n  return array;\n}\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Sep 2, 2020 at 18:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "Fusseldieb",
          "text": "Thanks for helping out! Yes, I saw a very similar, if not identical code, but I was kinda overwhelmed with all those variables. Does it XOR every variable like Rolf mentioned (and then XOR it back to the \"original\" array?) I'm rewriting a very crude C++ program that does this process so that I can run the Wireshark value through it and see what comes out, but I'm still a little bit stuck.",
          "time": null
        }
      ]
    }
  ]
}