{
  "title": "Reverse engineering proprietary database file format .IDF",
  "link": "https://reverseengineering.stackexchange.com/questions/15530/reverse-engineering-proprietary-database-file-format-idf",
  "content": "I have an old (I think) Windows software on a cd-rom, that is basically a database and its interface for show the data it contains.\n\nI don't like the software view interface, want to make my own with visual studio or similar, but of course I can't access the database. All that I know is it's made of a good number of IDF files, they contains both data and photos/images shown on the screen through the software.\n\nMy question is where to start if I want reverse engineering these files, getting the data with their relations. Would be enough have tables of strings and numbers. I have a little experience with rev.eng. made through Cheat Engine, for some games, but nothing more.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "155",
  "tags": [
    "windows",
    "decryption"
  ],
  "user": "joe",
  "time": "Jun 12, 2017 at 9:57",
  "comments": [
    {
      "user": "Rup",
      "text": "Is the original viewer split into lots of DLLs? There might be an IDF access DLL. You could try using WinApiOverride or similar to see how the existing viewer calls into its DLLs, and - perhaps with a little reverse engineering to understand those calls - use the same DLLs to access the database in your viewer.",
      "time": null
    },
    {
      "user": "joe",
      "text": "unfortunately i haven't dlls, but thanks anyway.",
      "time": null
    }
  ],
  "answers_data": []
}