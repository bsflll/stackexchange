{
  "title": "How to unpack kkrunchy executables?",
  "link": "https://reverseengineering.stackexchange.com/questions/14039/how-to-unpack-kkrunchy-executables",
  "content": "I'm trying to figure out how to unpack kkruncy executable, sources here and binaries here, anyone knows how to do it?\n\nMy main idea was testing out some little hello world exes compressed with kkrunchy but for some reason the exes will crash. Ie:\n\n```\n#define UNICODE\n\n#include <windows.h>\n\nvoid start()\n{\n    MessageBox(NULL, L\"X\", L\"Y\", MB_OK);\n}\n\n```\nor:\n\n```\nglobal start\n; kernel32.lib Exports\nextern _ExitProcess@4\nextern _GetStdHandle@4\nextern _WriteFile@20\n\nsection .text\n\nstart:\n    ; DWORD  bytes;\n    mov     ebp, esp\n    sub     esp, 4\n\n    ; hStdOut = GetstdHandle( STD_OUTPUT_HANDLE)\n    push    -11\n    call    _GetStdHandle@4\n    mov     ebx, eax\n\n    ; WriteFile( hstdOut, message, length(message), &bytes, 0);\n    push    0\n    lea     eax, [ebp-4]\n    push    eax\n    push    (message_end - message)\n    push    message\n    push    ebx\n    call    _WriteFile@20\n\n    ; ExitProcess(0)\n    push    0\n    call    _ExitProcess@4\n\n    ; never here\n    hlt\nmessage:\n    db      'Hello', 10, 13, 0\nmessage_end:\n\n```\nI've used the default parameters but the executables are broken. In any case, how could i figure out how to unpack kkrunchy executables?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "tools",
    "unpacking",
    "decompress",
    "packers"
  ],
  "user": "BPL",
  "time": "Nov 24, 2016 at 17:22",
  "comments": [],
  "answers_data": [
    {
      "content": "For my unpacking session I'm using x64dbg and I will unpack the executable in kkrunchy_023a2.zip.\n\nGet to the entry point and enable trace record. Also bind the Trace into beyond trace record option to say Ctrl+/.\n\n\n\nNext up, press G (for graph) and you should see the return blocks marked in red.\n\n\n\nPut a breakpoint on both of them, run, step and you will notice a function with a suspiciously large graph...\n\n\n\nNow go ahead and use that Trace into beyond trace record function to keep stepping through while skipping the instructions that were already traced over. You will quickly notice that this algorithm is exhausting the (default) 50000 step count and a bit of clicking around will tell you where the loop condition is.\n\n\n\nPut a hardware breakpoint on that destination, run and you should see the original entry point.\n\n\n\nNext up open Scylla Ctrl+I, hit IAT Autosearch, OK, Get Imports, Dump, Fix Dump and you have an unpacked executable. I will leave it upto you to properly clean out the garbage from that dump...\n\n",
      "votes": "4",
      "user": "mrexodia",
      "time": "Nov 24, 2016 at 20:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "BPL",
          "text": "Thanks for your answer! I've been able to get a dump of the exe following some of your steps but i needed to cheat here (put a hw breakpoint directly :(). I didn't understand the step where you say \"Now go ahead and use that Trace into beyond trace record function to step through while skipping the instructions that were already traced over.\" , I haven't been able to see that label \"OEP Jump\" , look at my screen , i don't see the same labels than you, once i've step after the ret i've pressed \"ctrl+/\" till i've reached 0x005F214E , +1",
          "time": null
        },
        {
          "user": "BPL",
          "text": "Btw, with this another executable it seems there isn't those 2 ret blocks in the graph anymore.",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "Yes you have to keep stepping with Ctrl+/ until you no longer get to new places. That's where you can see that location. I marked it with comments, but you can see the counts in the info box below. See here for a video mega.nz/#!7lpGyZha!20jgbFvV9z2zBIBSujLW694m_meJ70p786LhT4qlP28",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "The other example you linked has a single return block. If you break there and step out, you can see a similar (but different) procedure doing the decompression. You can find the entry point jump at 005EC514 in a similar way.",
          "time": null
        },
        {
          "user": "BPL",
          "text": "Fair enough, in any case, thanks a lot for your nice explanations. I've been using these debuggers for ~2weeks and i've started with olly... after discovering x64dbg i don't miss ollydbg at all :D",
          "time": null
        }
      ]
    }
  ]
}