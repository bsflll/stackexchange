{
  "title": "How to analyse a poorly documented DLL API?",
  "link": "https://reverseengineering.stackexchange.com/questions/9117/how-to-analyse-a-poorly-documented-dll-api",
  "content": "I'm working on a sensor with PSI5 interface and I'm using PSI Simulyzer box to simulate the environment during testing. This box comes with a software (some sort of digital oscilloscope) to make the measurements, but API header files and libraries are also provided. My intent is to use this API to automate non-regression test measurements.\n\nThis API is very poorly documented - it's basically a doxygen generated from the header file. I'm trying to guess the missing details, but some things just won't work in my software. Namely, I don't seem to be able to switch between synchronous and asynchronous modes, while the original software has a drop-down which works just fine.\n\nI decided to analyze the original software by placing breakpoints to several (about 20) DLL functions which seem to be related to configuration in Visual Studio debugger, and note which of these functions are called, and with which arguments. I didn't succeed so far - when I call the same functions with the same arguments on my side, communication mode won't change.\n\nHere's what I think causes my approach to fail:\n\nI see how to overcome issues 1 and 2, but doing such extended analysis by hand is too time-consuming. Is there a way to automate the process of setting breakpoints to all functions of a DLL, and log the arguments when these functions are called? Maybe there is a debugger more adapted to this task than Visual Studio?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "debugging",
    "c++",
    "dll"
  ],
  "user": "Dmitry Grigoryev",
  "time": "Jun 10, 2015 at 22:07",
  "comments": [],
  "answers_data": [
    {
      "content": "My first recommendation would be to contact the vendor and ask them your questions. You paid for the product and its SDK, so if the latter is not usable, they should offer support to you.\n\nAs for monitoring DLL function calls, I'd recommend using API Monitor and its External DLL Filter functionality. It won't solve everything for you since you'd still need to figure out how many arguments are expected for each DLL function (you can extract that information with IDA), but I think it'll get you 90% of the way there.\n\n\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "Jun 10, 2015 at 22:11",
      "is_accepted": true,
      "comments": [
        {
          "user": "Dmitry Grigoryev",
          "text": "I expect the help from the vendor anytime now. Unfortunately it's complicated in practice, because I'm an external employee and I have to contact the lab equipment team who in turn will contact the vendor. I may well get this sorted out before that help arrives.",
          "time": null
        },
        {
          "user": "Dmitry Grigoryev",
          "text": "This API Monitor looks really promising. I know my ways in Linux with strace and LD_DEBUG, but DLLs are somewhat new to me.",
          "time": null
        },
        {
          "user": "Dmitry Grigoryev",
          "text": "API monitor works great, except for one thing: each function is displayed with 4 parameters, regardless of the actual number. Is it possible to use the header files I have to define the actual number of parameters for each function?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Yes, see rohitab.com/discuss/topic/39013-external-dll-structures",
          "time": null
        }
      ]
    }
  ]
}