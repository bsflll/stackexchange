{
  "title": "Will this code run in real machine or is it some kind of Anti Reversing code?",
  "link": "https://reverseengineering.stackexchange.com/questions/8351/will-this-code-run-in-real-machine-or-is-it-some-kind-of-anti-reversing-code",
  "content": "I am reversing a file which is not running properly in Vmware.The code from the AEP is as shown below :\n\n```\nPOP EDI     ; value of edi is 0x7C816D4F kernel32.7C816D4F\nPUSH EAX    ;value of eax is 0\nINC EBP     ;value of ebp was 0x12FFF0\nIN EAX,DX   ;value of DX is 0xEB94    \nAAS\nIN AL,0BF                      \nDEC ESP\n\n```\nWhat I think is that  a privileged instruction(IN) is called from user mode which is not allowed and therefore execution fails.\nIN is used for anti VM code but it requires specific values (VMXh port value in EAX etc) but in my case it is not being used.\n\nMy question is ,is it some kind of anti debugging or is the file corrupt and will it run on a non VM machine(in my case XP).\n\nAnd lastly,if a packer uses the method I mentioned above ie calling IN from usermode for Anti-reversing how come the sample runs on a real machine(since in this case also the privileged instruction will be called in user mode).\n\n",
  "votes": "3",
  "answers": 2,
  "views": "407",
  "tags": [
    "malware",
    "debugging",
    "x86"
  ],
  "user": "rebel87",
  "time": "Feb 28, 2015 at 10:03",
  "comments": [],
  "answers_data": [
    {
      "content": "Not easy to answer since there's not much context provided, but a few possibilities:\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Feb 28, 2015 at 18:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "and the first three characters spell \"_PE\".  I doubt that it's executed code.  Port 0xBF is not defined by standard hardware.",
          "time": null
        },
        {
          "user": "rebel87",
          "text": "Thanks for the answer Jason: 1>This code is at the AEP and there is no TLS code present so I doubt that VM detection is possible. 2>There is no SEH routine barring the default one i.e. there is only one entry in the SEH chain 3>This code must run because it these are the instructions present at the AEP.",
          "time": null
        },
        {
          "user": "rebel87",
          "text": "Thanks for the comment Peter,could you elaborate how did you come to this conclusion...",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@rebel87: aas is an extremely rare opcode to see in modern compiled code; so is, dec esp -- subtracting only 1 from the stack pointer. Seeing 'random' disassembly such as this is an immediate red flag.",
          "time": null
        },
        {
          "user": "rebel87",
          "text": "@Jongware Thanks for the answer ,I'll keep that in mind i.e.    Rare opcode is suspectible...",
          "time": null
        }
      ]
    },
    {
      "content": "I think I got the answer from :\nhttps://stackoverflow.com/questions/89607/what-is-a-privileged-instruction\n\nSummary of the answers in that post :\n\nThe cause is probably a corrupted stack or a messed up function pointer call ,this usually happens when using function pointers that point to invalid data. It can also happen if you have code that trashes your return stack or if you are using old compilers/libraries.\n\nThe guy who programmed the exe  may be using a local array and it is near the top of the function declaration. His bounds checking may have gone insane and overwritten the return address and it points to some instruction that only kernel is allowed to execute.\n\n",
      "votes": "0",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}