{
  "title": "Understanding Hex-Rays syntax",
  "link": "https://reverseengineering.stackexchange.com/questions/27840/understanding-hex-rays-syntax",
  "content": "I have a Ida decompiled function that invokes another function through a function pointer but I'm really confused how it calculates it's address. I'm new to hex-rays syntax.\n\n```\nint __fastcall SUB_XXXX(int a1)\n{\n  int result; // r0\n  int (__fastcall *v3)(int); // r2\n \n  result = 0;\n  if ( *off_BD2561B0 )\n  {\n    v3 = *(int (__fastcall **)(int))(*off_BD2561B0 + 36);// off_BD2561B0 DCD dword_BD277D84\n    if ( v3 )\n      result = v3(a1);\n  }\n  return result;\n}\n\n```\nSo,\nv3 = dword_BD277D84 + 0x24 = 0xBD277DA8\nOr\nv3 = ValueAt(dword_BD277D84) + 0x24 ?\n\nI'm kinda confused with off_* and dword_* thing.\n\n",
  "votes": "2",
  "answers": 0,
  "views": "117",
  "tags": [
    "ida",
    "decompilation",
    "arm",
    "hexrays"
  ],
  "user": "Ronny",
  "time": "Jun 14, 2021 at 9:01",
  "comments": [
    {
      "user": "Guillaume",
      "text": "You can find a list of all IDA's prefixes here hex-rays.com/products/ida/support/idadoc/609.shtml In your case, dword_x refere to the DWORD at the address x and off_y to the offset at the address y",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Look at the assembly, it should be more explicit",
      "time": null
    }
  ],
  "answers_data": []
}