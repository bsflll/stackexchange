{
  "title": "how to use core file in radare2?",
  "link": "https://reverseengineering.stackexchange.com/questions/20434/how-to-use-core-file-in-radare2",
  "content": "In gdb i can backtrace with core file and executable file.\nIt seems radare2 can read core file. like this\n\n```\n$ r2 core\nSetting up coredump: asm.arch <-> x86 and asm.bits <-> 64\nSetting up coredump: Registers have been set\nSetting up coredump: 22 maps have been found and created\n[0x00000000]> \n\n```\nbut after that i don't know what to do next?\nI can't find any documentation about using core file in radare2. \n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "radare2"
  ],
  "user": "mug896",
  "time": "Jan 21, 2019 at 16:19",
  "comments": [],
  "answers_data": [
    {
      "content": "It's more regular programming question than RE. Core dump file is a state of the process when the file was created (usually due to a crash) so debugger commands are the most suitable in such case. In Radare2 those are the ones from d? category.\n\n```\nUsage: d   # Debug commands\n| db[?]                    Breakpoints commands\n| dbt[?]                   Display backtrace based on dbg.btdepth and dbg.btalgo\n| dc[?]                    Continue execution\n| dd[?]                    File descriptors (!fd in r1)\n| de[-sc] [perm] [rm] [e]  Debug with ESIL (see de?)\n| dg <file>                Generate a core-file (WIP)\n| dH [handler]             Transplant process to a new handler\n| di[?]                    Show debugger backend information (See dh)\n| dk[?]                    List, send, get, set, signal handlers of child\n| dL[?]                    List or set debugger handler\n| dm[?]                    Show memory maps\n| do[?]                    Open process (reload, alias for 'oo')\n| doo[args]                Reopen in debugger mode with args (alias for 'ood')\n| dp[?]                    List, attach to process or thread id\n| dr[?]                    Cpu registers\n| ds[?]                    Step, over, source line\n| dt[?]                    Display instruction traces (dtr=reset)\n| dw <pid>                 Block prompt until pid dies\n| dx[?]                    Inject and run code on target process (See gs)\n\n```\nYou can get values of registers when coredump was created by issuing dr command or show the backtrace by one of the dbt.\n\nWhat are the next steps are really dependent on your case - what you want to obtain from this dump.\n\nProbably this is not the most used function in r2 ;)\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Jan 21, 2019 at 21:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}