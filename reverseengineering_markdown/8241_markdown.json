{
  "title": "Assembly- Using push and ESP-Register to store addresses",
  "link": "https://reverseengineering.stackexchange.com/questions/8241/assembly-using-push-and-esp-register-to-store-addresses",
  "content": "I have found the following assembly lines presented in a tutorial which I do not understand:\n\n```\n xor eax, eax      => clear, I know that, it makes eax = 0\n push eax          => push 0 on the stack\n push 0x68732f2f   => push \"//sh\" to the stack (the numbers are opcodes I guess, output of hexdump)\n push 0x6e69622f   => push \"/bin\" to the stack (again opcodes, representing \"/bin\" )\n mov ebx, esp      => put address of \"/bin//sh\\0\" into ebx, via esp\n ....\n\n```\nMy question: \nWhy we put address of \"/bin//sh\" into ebx, via esp using the line mov ebx, esp for that ?\n\nI draw a sketch:\n\n```\n         |                        |\n         |------------------------|<-----ESP (I know that ESP always points to the top)\n(a)      |  0x6e69622f  (\"//sh\")  |\n         |------------------------|\n(b)      |   0x68732f2f (\"/bin\")  |\n         |------------------------|\n(c)      |       0                |\n         |------------------------|\n\n```\nHow I try to explain it to myself(I am not sure if it is correct, but I thought to think about a little bit before I ask in that forum here):\n\nESP is a 32-bit register such that it is large enough to comprise the addresses at (a), (b) and (c) (which I marked above).\n\nIs that right? I hope somebody can help me?\n\nbest regards, \n\n",
  "votes": "4",
  "answers": 2,
  "views": "9k",
  "tags": [
    "assembly",
    "esp",
    "register"
  ],
  "user": "user3097712",
  "time": "Feb 14, 2015 at 23:25",
  "comments": [],
  "answers_data": [
    {
      "content": "First of all, let me clarify this:\n\nESP is a 32-bit register which contains a pointer to the stack.\nIt is not, by any means, big enough to comprise the addresses at [...]. It is just pointing at a memory location which holds a, b, and c.\n\nWhat your exploit does is push a string to the stack. Look at the /bin//sh hexadecimal representation:\n\n```\n2f 62 69 6e 2f 2f 73 68\n\n```\nAnd now look at your assembly:\n\n```\npush 0x68732f2f\npush 0x6e69622f\n\n```\nThis is not any kind of opcodes, but rather the ASCII representation of the string, pushed as double words (basically, pushes the string in less instructions)\n\nAn alternative way would be:\n\n```\npush '/' ; same as push 0x2f\npush 'b' ; same as push 0x62\npush 'i' ; same as push 0x69\npush 'n' ; same as push 0x6e\npush '/' ; same as push 0x2f\npush '/' ; same as push 0x2f\npush 's' ; same as push 0x73\npush 'h' ; same as push 0x68\n\n```\nBasically, it's doing the same as above, just in less instructions, by combining the ASCII codes together: 6e69622f instead of 2f, 62, 69, 6e separated. It's also pushing a 0, which is a terminator for a C-style string, so that the string ends there.\n\nNow, the stack has /bin//sh, and all you gotta do is call sys_execve, by doing an int 0x80 (interrupt), which is the way Linux uses to make syscalls.\n\nSince the syscall ID for sys_execve is 11, you move 11 to al (lower part of eax), and put the first argument into ebx, which is a pointer to a string. And since ESP is pointing to the top of the stack, and the top of the stack contains the /bin//sh we pushed before, the exploit assembly means this:\n\n```\nsys_execve(\"/bin//sh\");\n\n```\nThere you go, exploited! :)\n\n",
      "votes": "6",
      "user": "rev",
      "time": "Feb 15, 2015 at 1:26",
      "is_accepted": true,
      "comments": [
        {
          "user": "user3097712",
          "text": "thanks for the good explanation. It helps me a lot to understand it.",
          "time": null
        },
        {
          "user": "rev",
          "text": "@user3097712 no problem, be sure to ask me if I didn't explain any part properly.",
          "time": null
        }
      ]
    },
    {
      "content": "Its just a technique to embed strings in the exploit, as u can define them in a regular fashion, as u need their address to access them but in an exploit these addresses are dynamic not static or constants.\n\n",
      "votes": "0",
      "user": "Alok Saini",
      "time": "Feb 19, 2015 at 9:47",
      "is_accepted": false,
      "comments": []
    }
  ]
}