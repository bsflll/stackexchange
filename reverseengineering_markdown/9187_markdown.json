{
  "title": "Computing the length of a string in ARM",
  "link": "https://reverseengineering.stackexchange.com/questions/9187/computing-the-length-of-a-string-in-arm",
  "content": "I was trying to reverse the following ARM code.\n\n```\nmystery7\n02 46            MOV R2, R0\n08 B9            CBNZ R0, loc_100E1D8\n00 20            MOVS R0, #0\n70 47            BX LR\nloc_100E1D8\n90 F9 00 30      LDRSB.W R3, [R0]\n02 E0            B loc_100E1E4\nloc_100E1DE\n01 32            ADDS R2, #1\n92 F9 00 30      LDRSB.W R3, [R2]\nloc_100E1E4\n00 2B            CMP R3, #0\nFA D1            BNE loc_100E1DE\n10 1A            SUBS R0, R2, R0\n6F F3 9F 70      BFC.W R0, #0x1E, #2\n70 47            BX LR\n; End of function mystery7\n\n```\nI can see that its a function that computes the length of a string. However the BFC.W instruction seems to clear the most significant 2 bits. So, the sign bit and the bit to its immediate right are cleared. Why is that done?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "arm"
  ],
  "user": null,
  "time": "Jun 20, 2015 at 14:58",
  "comments": [],
  "answers_data": [
    {
      "content": "I post this as an \"answer\", because my reputation doesn't yet allow me a comment. \n\nThe problem is copied from the book \"Practical Reverse Engineering\" by Bruce Dang et al. as \"mystery7\", see Figure 2.13 in the book. The author himself does not comment on the strange BFC.W statement. This very statement has been commented in another blog here, as \"I don’t understand the purpose of setting the two most significant bits of the difference to zero. Those bits shouldn’t be set in the first place for any reasonable strings.\"\n\nMaybe that statement serves some purpose. If yes it might be rather obscure.\n\n",
      "votes": "2",
      "user": "josh",
      "time": "Jun 25, 2015 at 17:12",
      "is_accepted": false,
      "comments": []
    }
  ]
}