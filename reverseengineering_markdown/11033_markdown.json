{
  "title": "How to decrypt data in binary file by XOR operator using a given key at specific offset? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/11033/how-to-decrypt-data-in-binary-file-by-xor-operator-using-a-given-key-at-specific",
  "content": "I've a binary data files which are encrypted by a simple XOR cipher using a given key at offset +0x88 (which is 0x80 long), then the data (+0x108) is compressed by lzo1x.\n\nWhat would be the most efficient way of decrypting such files?\n\nPreferably by using some command-line utilities (where I can specify the input offsets) or some script (without too much coding)?\n\nWhat would be the right approach?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "11k",
  "tags": [
    "linux",
    "decryption",
    "decompress",
    "xor",
    "command-line"
  ],
  "user": "kenorb",
  "time": "9 years ago",
  "comments": [
    {
      "user": "w s",
      "text": "The right approach is writing script in a language of your choice. I'd do it in Python.",
      "time": null
    },
    {
      "user": "perror",
      "text": "As @ws suggested, you should just take your favorite language and make a tool for that... In fact, I don't see the point of this question. Am I missing something ?",
      "time": null
    },
    {
      "user": "w s",
      "text": "No there isn't.",
      "time": null
    },
    {
      "user": "kenorb",
      "text": "@perror The point is to have useful Q&A about simple XOR deciphering (which seems there is a lack in here) and to share the knowledge. I don't see the reason why criticise the question by people who doesn't know the answer.",
      "time": null
    },
    {
      "user": "kenorb",
      "text": "@ws Now there is one.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Use dd to extract the data what you need, e.g. (using bash syntax):\n\n```\ndd if=foo.dat bs=1 skip=$((0x88)) count=$((0x80)) of=xorkey.bin\ndd if=foo.dat bs=1 skip=$((0x108)) of=data1.bin\n\n```\nThen convert it using simple Python code:\n\n```\n#!/usr/bin/env python3\n\ndef str_xor(data, key):\n    for i in range(len(data)):\n        data[i] ^= key[i % len(key)]\n    return data\n\nkey  = bytearray(open('xorkey.bin', 'rb').read())\ndata = bytearray(open('data1.bin',  'rb').read())\nencoded = str_xor(data, key)\nopen(\"data1.bin.xor\", \"wb\").write(encoded)\ndecoded = str_xor(data, key)\nopen(\"data1.bin.xor.xor\", \"wb\").write(decoded)\n\n```\nThen install lzop tool which offers compression/decompression of the LZO1X algorithms (install via: apt-get/brew install lzop), e.g.:\n\n```\nlzop -dc data1.bin.xor > data1.out\n\n```\n",
      "votes": "1",
      "user": "kenorb",
      "time": "Oct 6, 2015 at 11:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "blabb",
          "text": "you could use powershell to get the bytes from a specific block of file and use it foreach operator to xor the bytes like this $foo=(($c=gc .\\encrypted.dat -Encoding byte)[0x80..$C.Length]) |%{$_ -bxor 63}",
          "time": null
        },
        {
          "user": "cweiske",
          "text": "Instead of writing your own python code, you can use xortool-xor from github.com/hellman/xortool",
          "time": null
        }
      ]
    }
  ]
}