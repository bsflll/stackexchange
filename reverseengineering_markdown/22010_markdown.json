{
  "title": "Figuring out correct user input key from final key + generated buffer",
  "link": "https://reverseengineering.stackexchange.com/questions/22010/figuring-out-correct-user-input-key-from-final-key-generated-buffer",
  "content": "I've recently gotten into reversing crackmes, and I seem to always fail at the ones similar to this.\n\nThe final key that the program uses for comparison is not the key that should be used as input, the key used as input is used in an algorithm with another set of data to check if it generates the final key.\nHere is the code so it makes a bit more sense.\n\n```\nsigned __int64 __fastcall ValidateSerials(unsigned int *generatedData, unsigned int *finalCorrectSerial, unsigned int *UserInputSerial)\n{\n  signed int i; // [rsp+0h] [rbp-18h]\n  signed int j; // [rsp+4h] [rbp-14h]\n  signed int currentUserInputsr; // [rsp+8h] [rbp-10h]\n  int v7; // [rsp+Ch] [rbp-Ch]\n\n  for ( i = 0; i < 4; ++i )\n  {\n    v7 = 0;\n    currentUserInputsr = UserInputSerial[i];\n    for ( j = 6; j >= 0; --j )\n    {\n      v7 += generatedData[j] * (currentUserInputsr & 1);\n      currentUserInputsr >>= 1;\n    }\n    if ( v7 != finalCorrectSerial[i] )\n      return 0i64;\n  }\n  return 1i64;\n}\n\n```\nif I know generatedData and finalCorrectSerial, how can I generate the correct UserInputSerial? I've tried to reverse the entire functions logic but I always get it wrong. I'm fairly new into solving keygens such as this but not reverse engineering in general.\n\nThanks\n\n",
  "votes": "0",
  "answers": 2,
  "views": "91",
  "tags": [
    "c++",
    "crackme"
  ],
  "user": null,
  "time": "Aug 30, 2019 at 20:35",
  "comments": [],
  "answers_data": [
    {
      "content": "I wrote a function, that generates a valid input from given generatedData and finalCorrectSerial. The function calculates a subset that, when summed up, equals the corresponding value in finalCorrectSerial. It then creates a valid input from that. (The function subsetSum() is taken from here and was modified to return just one subset and that by it's indices):\n\n```\nbool subsetSum(unsigned int* set, unsigned int* subSet, int n, int subSize, int total, int nodeCount ,int sum, int* outN) {\n   if( total == sum) {\n       *outN = subSize;\n      return 1;\n   } \n   else {\n      for( int i = nodeCount; i < n; i++ ) {     //find node along breadth\n         subSet[subSize] = i;\n         if (subsetSum(set,subSet,n,subSize+1,total+set[i],i+1,sum, outN)) return 1;     //do for next node in depth\n      }\n   }\n   return 0;\n}\n\nbool genInput(unsigned int* generatedData, unsigned int* finalCorrectSerial, unsigned int* out) {\n    for (int i = 0; i < 4; i++) {\n        unsigned int subs[7];\n        int size = 0;\n        subsetSum(generatedData, subs, 7, 0, 0, 0, finalCorrectSerial[i], &size);\n\n        std::cout << \"finalCorrectSerial[\" << i << \"] (\" << finalCorrectSerial[i] << \") has \" << (size ? \"a\" : \"no\") << \" subset (indices): \";\n        for (int j = 0; j < size; j++ ) {\n            std::cout << subs[j] << \" \";\n        }\n        std::cout << \"  \n\";\n\n        if (!size) return 0;\n\n        for (int j = 0; j < size; j++) {\n            out[i] |= (1u << (6 - subs[j]));\n        }\n\n    }\n    return 1;\n}\n\n```\nA test run (with arbitrary numbers):\n\n```\nint main()\n{\n  unsigned int genData[] = { 10, 55, 1, 3, 7, 98, 1};\n  unsigned int key[] = { 66, 5, 4, 5};\n  unsigned int input[4] = { 0 };\n\n  std::cout << \"Generating Input was \" << (genInput(genData, key, input) ? \"successfull  \n\" : \"unsuccessful  \n\");\n  for (int j = 0; j < 4; j++) {\n            std::cout << input[j] << \" \";\n    }\n    std::cout << \"  \n\";\n\n  std::cout << (ValidateSerials(genData, key, input) ? \"true\" : \"false\");\n\n  return 1;\n}\n\n```\nreturns\n\n```\nfinalCorrectSerial[0] (66) has a subset (indices): 0 1 2 \nfinalCorrectSerial[1] (5) has a subset (indices): 2 3 6 \nfinalCorrectSerial[2] (4) has a subset (indices): 2 3 \nfinalCorrectSerial[3] (5) has a subset (indices): 2 3 6 \nGenerating Input was successfull\n112 25 24 25 \ntrue\n\n```\n",
      "votes": "1",
      "user": "Anonymous Anonymous",
      "time": "Aug 31, 2019 at 15:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "user29468",
          "text": "Thank you, that actually worked. But i'm still a little confused on it all. What would you say is necessary to learn/understand well before tackling key gens similar to this?",
          "time": null
        }
      ]
    },
    {
      "content": "This function simply checks each input number (UserInputSerial[i]) whether it is correct and it's doing so by summing up generatedData[j] * (UserInputSerial[i] & (1 << (6 - j))), so it's basically iterating through UserInputSerial[i]'s 7 least significant bytes and if some of them is 1 the relevant number from generatedData will be taken into the sum (v7).\n\nSince, I suspect, the author of this crackme wants to accept only one input, v7 has to get different values for all possible inputs, so for each a = UserInputSerial[i1], b = UserInputSerial[i2], if a != b, then v7 counted for a has to be different than v7 counted for b. In other words, if v7 is function taking UserInputSerial[i] and generatedData, it has to be injection. \n\nThe easiest way to generate such a function is to initialise generatedData in such a way, that generatedData[j] > sum(generatedData[i<j]). So for example it could be that generatedData[j] = 2^j or generatedData[j] = 3^j. So, knowing the correct v7 value for each UserInputSerial[i] and generatedData, you should be able to easily obtain the x such that v7(x, generatedData) = finalCorrectSerial[i] in a way similar as you would convert finalCorrectSerial[i] to binary.\n\nSo, assuming that indeed generatedData[j] > sum(generatedData[i<j]), you can write something like this:\n\n```\nchar bits[7]; // bits of the correct UserInputSerial[i]\nint a = finalCorrectSerial[i];\nfor (j = 6; j >= 0; j--)\n{\n    if (a >= generatedData[j])\n    {\n        a -= generatedData[j];\n        bits[j] = 1;\n    }\n    else\n        bits[j] = 0;\n}\n\n```\nIf it's not the case, you can just check v7(x, generatedData) for all possible numbers having less or 7 bytes and check which one will cause v7 to produce the desired value (finalCorrectSerial[i]).\n\n",
      "votes": "0",
      "user": "bart1e",
      "time": "Aug 31, 2019 at 10:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}