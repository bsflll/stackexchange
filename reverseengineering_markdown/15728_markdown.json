{
  "title": "Dumping Memory to Raw File",
  "link": "https://reverseengineering.stackexchange.com/questions/15728/dumping-memory-to-raw-file",
  "content": "Is there a way to dump a section of process memory knowing the start and end address to raw bin file via a winapi function or some other method? I know that you can do this easily with a debugger, but that's not what I'm looking for.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "winapi",
    "dumping",
    "memory-dump"
  ],
  "user": "John Wayne",
  "time": "Jun 30, 2017 at 20:14",
  "comments": [
    {
      "user": "josh poley",
      "text": "OpenProcess & ReadProcessMemory + CreateFile & WriteFile",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have recently made an API in python to read and write memory - could be useful for a quick solution.\nhttps://github.com/samsonpianofingers/pymem\n\nyou could use this like this\n\n```\nimport pymem\n\nhandle = pymem.open_process_name(\"program.exe\")\naddress = 0x12c0000\nsize = 1000\nbuffer = pymem.read_bytes(handle, address, size)\nwith open(\"dump.bin\", \"wb\") as f:\n    f.write(buffer)\n    f.flush()\n    f.close()\n\n```\n",
      "votes": "1",
      "user": "Samson",
      "time": "Jul 1, 2017 at 7:02",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "you can craft a powershell script in case of emergency  (no python no internet only base machine cant install anything whatever )   \n\nthe code below is rubbish hack you may need to declare proper managed types    etc to make it robust it is just to show an idea   \n\n```\n$procid = (Get-Process -Name $args[0]).Id\n$baseaddr = (Get-Process -Name $args[0] -Module)[0].BaseAddress;\n$signature = @\"\n[DllImport(\"kernel32.dll\")] public static extern IntPtr OpenProcess(\n    uint h,bool b ,uint p);\n[DllImport(\"kernel32.dll\")] public static extern bool ReadProcessMemory(\n    IntPtr hp,IntPtr Base,[Out]Byte[] buff,int Size,[Out]int bread);\n\"@\n$rpm = Add-Type -MemberDefinition $signature -Name rpm -PassThru\n[Byte[]] $buff = New-Object Byte[](256)\n[int]$bread =0;\n$proc = $rpm::OpenProcess(0x001F0FFF,0,$procid);\n$read = $rpm::ReadProcessMemory($proc,$baseaddr,$buff,256,$bread);\n$a = \"\";\n$a+=[char[]]$buff[0..1]+[char[]]$buff[78..118]\n$procid\n\"{0:X}\" -f [int]$baseaddr\n$a\n\n```\nrunning it like \n\n```\npowershell -f foo.ps1 note*\n3388\n8D0000\nM Z T h i s   p r o g r a m   c a n n o t   b e   r u n   i n   D O S   m o d e .\n\npowershell -f foo.ps1 exp*\n304\nC40000\nM Z T h i s   p r o g r a m   c a n n o t   b e   r u n   i n   D O S   m o d e .\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jul 1, 2017 at 19:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}