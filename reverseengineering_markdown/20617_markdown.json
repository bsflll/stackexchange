{
  "title": "decomplied apk with bad parameters",
  "link": "https://reverseengineering.stackexchange.com/questions/20617/decomplied-apk-with-bad-parameters",
  "content": "I'm trying to reverse engineering an android app API so this is what I tried:\n\nFirst the app was using Okhttp certificate pinning and I couldn't track the URLs with Charles then I tried this method and now the tracking part is working but the request body is encrypted and I really can't understand the method of encryption because all of the requests have different length and its not like Base64 here like this example : \n\nnow I'm trying to decompile the APK and try to understand the encryption method. so I decompile the APK then start to find endpoints (this app using okhttp and retrofit), I found the endpoint I wanted \n\n```\n@POST(\"e/xam/ple\")\nCall<Object> m3550a(@Header(\"Content-Type\") String str, @Body String str2);\n\n```\nthen I tried to rebuild the process of sending this endpoint to simulate the request and encryption but not only its so hard (Java decompiler and Jadx cant decompile all the methods and some of them have exception) but some the methods have bad parameters like this method : \n\n```\npublic static String j(Context context) {\n    try {\n        return aa.a(context);\n    } catch (Exception e2) {\n        e2.printStackTrace();\n        return a;\n    }\n}\n\n```\nand the aa.a() method : \n\n```\npublic static String a(byte[] bArr) {\n    char[] cArr = new char[(bArr.length * 2)];\n    for (int i = 0; i < bArr.length; i++) {\n        int i2 = bArr[i] & 255;\n        int i3 = i * 2;\n        cArr[i3] = c[i2 >>> 4];\n        cArr[i3 + 1] = c[i2 & 15];\n    }\n    return new String(cArr);\n}\n\n```\nis there any way to do this easier i searched the decompiled folder for encrption methods and i find this codes : \n\nCipher : \n\n```\npublic class C1355f {\n/* renamed from: a */\npublic static String f3576a = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GSADCBiQKBgQCVSNDQlVBMy2Wh4J3usfQydpwIzY6FwqDwV0Dd+Bk6PA5sc3usQ8mmjLiI2YD1RDv4jjvmAdkXK+HXuxm2fI6XeIQvgnPRaaj9yNcJnFNViogidcFO7Kg2YYj8yj6DgnCkAtgJeUx2DVvyPnv+Vk1q37Tg4qW0dEFNkWL9hKXGSwIDAQAB\";\n\n/* renamed from: a */\npublic static byte[] m3787a(String str, String str2) throws Exception {\n    try {\n        str = C1355f.m3786a(str);\n        str2 = str2.getBytes(\"UTF8\");\n        byte[] bArr = new byte[16];\n        Arrays.fill(bArr, (byte) 0);\n        AlgorithmParameterSpec ivParameterSpec = new IvParameterSpec(bArr);\n        Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        instance.init(1, str, ivParameterSpec);\n        return instance.doFinal(str2);\n    } catch (String str3) {\n        throw new Exception(str3);\n    }\n}\n\n/* renamed from: a */\npublic static SecretKeySpec m3786a(String str) throws UnsupportedEncodingException {\n    Object obj = new byte[16];\n    Arrays.fill(obj, (byte) 0);\n    str = str.getBytes(\"UTF-8\");\n    System.arraycopy(str, 0, obj, 0, str.length < obj.length ? str.length : obj.length);\n    return new SecretKeySpec(obj, \"AES\");\n}\n\n/* renamed from: a */\npublic static byte[] m3788a(byte[] bArr, String str) throws Exception {\n    bArr = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(bArr));\n    Cipher instance = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n    instance.init(1, bArr);\n    return instance.doFinal(str.getBytes());\n}\n}\n\n```\nBase64 : \n\n```\nprivate byte[] f8405h = new byte[0];\nBase64.encodeToString(this.f8405h, 2)\n\n```\nsorry if this question is a mess but i need help anything can be helpfull\n\n",
  "votes": "0",
  "answers": 1,
  "views": "226",
  "tags": [
    "android",
    "java",
    "apk",
    "api"
  ],
  "user": "Amin",
  "time": "Feb 13, 2019 at 17:57",
  "comments": [],
  "answers_data": [
    {
      "content": "JADX often provides inaccurate de-compilation output. You'll have to look at the smali in methods that you find inconsistent.\nAbout the wrong parameter in the aa.a method, you'll have to check the smali to make sure you've got the right class and the right method because I never saw JADX get the types wrong. \nNow, about the request body, it seems like it's the base64 of some encrypted bytes. If I were you I'd look for xrefs for the endpoint retro fit method, and see how the arguments are generated.\nYou could also try to hook the methods from the cipher class you found and compare that to what you see in the requests.\n\n",
      "votes": "0",
      "user": "NotGI",
      "time": "Feb 16, 2019 at 10:28",
      "is_accepted": false,
      "comments": []
    }
  ]
}