{
  "title": "Sniffing TCP traffic for specific process using Wireshark",
  "link": "https://reverseengineering.stackexchange.com/questions/1970/sniffing-tcp-traffic-for-specific-process-using-wireshark",
  "content": "Is it possible to sniff TCP traffic for a specific process using Wireshark, even through a plugin to filter TCP traffic based on process ID?\n\nI'm working on Windows 7, but I would like to hear about solution for Linux as well.\n\n",
  "votes": "27",
  "answers": 6,
  "views": "63k",
  "tags": [
    "sniffing",
    "wireshark"
  ],
  "user": "Mellowcandle",
  "time": "May 17, 2014 at 6:48",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "strace, see this answer over on AskUbuntu and no, if you limit your question to be specific to WireShark I think there is no such thing. On Windows you could use the Network Monitor, a sniffer created by MS themselves. Plus there is an experimental build for Windows, see this mailing list entry.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Wireshark works on the network interface level, it can't know which process has sent a packet.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@IgorSkochinsky: being a KM driver developer I can tell you that at least the information would be available. But then, libpcap doesn't only have a Windows implementation and I think this limitation may be owed to the cross-platform nature of the library.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Process Attribution In Network Traffic (PAINT)/Wireshark from DigitalOperatives might be what you're looking for. It's based on Wireshark 1.6.5, and it works with Windows Vista and above. It has been released to the public in December 2012 for research purposes, and I've been using it since then. Not only does it work - you can filter the traffic through the columns - but it's quite fast.\n\nThe blog post Process Attribution In Network Traffic from their developers explains it in detail.\n\n\n\n",
      "votes": "36",
      "user": "Peter Mortensen",
      "time": "May 17, 2014 at 6:46",
      "is_accepted": true,
      "comments": [
        {
          "user": "TDKPS",
          "text": "Ooops, my bad. Thought I had added it. Link It appears I can't add more than two links yet.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "alright, fixed that for you. Hope it's fine this way.",
          "time": null
        },
        {
          "user": "Hayden Thring",
          "text": "2nd link is broken",
          "time": null
        }
      ]
    },
    {
      "content": "Well, if you're willing to not use Wireshark, you can do this out of the box with Microsoft Network Monitor.\n\nAnd the even better news is that on Windows 7 (or Win2008 R2) and newer, you can start/stop captures from the command line without installing anything (you can even do it remotely).\n\nThis MSDN blog post explains the entire (simple) process.\n\n\n\n",
      "votes": "21",
      "user": "Glorfindel",
      "time": "Jul 26, 2021 at 9:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Arbitrary packets are typically not associated with a process. For established TCP sockets, this information could potentially be looked up on-the-fly, but there is no way to express a capture filter to limit filtering to a single process.\n\nSome of the options are:\n\nFor the latter approach, I wrote some scripts to automate it, it can be found at https://github.com/Lekensteyn/netns. It was precisely designed for this purpose, create a network capture from a single process (and its children) without leaking other traffic.\n\nVarious other approaches such as using eBPF and custom dissectors to add process information, as well as potential approaches for Windows and macOS can be found in these issues on the Wireshark issue tracker:\n\n",
      "votes": "6",
      "user": "Lekensteyn",
      "time": "Apr 10, 2020 at 15:58",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "An alternative suggestion to Wireshark as of ~2018, the current Microsoft-developed solution that has superseded Microsoft Network Monitor is Microsoft Message Analyzer.\n\nThe latest build of Version 1.4 as of this post is published October 28, 2016, and the Message Analyzer TechNet Blog has gone mysteriously radio silent as of ~September 2016 after regular postings before then.\n\nUpdate: The Message Analyzer was retired late 2019.\n\n",
      "votes": "3",
      "user": "gcode",
      "time": "Feb 20, 2021 at 20:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "dsasmblr",
          "text": "The link to the download page for Microsoft Messenger Analyzer no longer exists. Accordingly, here are the manual download links for both the 32-bit and 64-bit versions. 32-bit: download.microsoft.com/download/2/8/3/… 64-bit: download.microsoft.com/download/2/8/3/… Known Issues in v1.4: download.microsoft.com/download/2/8/3/…",
          "time": null
        },
        {
          "user": "gcode",
          "text": "@dsasmblr Could you be more specific about what link isn't working? The ones I posted are still working.",
          "time": null
        },
        {
          "user": "dsasmblr",
          "text": "Huh. The first link you have wasn't working initially (it is now, though). Even when I Googled the name of the application and tried clicking on the link from the search results, it took me to a 404 page. MS might've been updating something at that moment. I nabbed the download links from a cached version of the page.",
          "time": null
        },
        {
          "user": "toster-cx",
          "text": "> Microsoft Message Analyzer (MMA) is being retired and its download packages removed from microsoft.com sites on November 25 2019. Sad...",
          "time": null
        },
        {
          "user": "gcode",
          "text": "@toster-cx Updated my answer, thank you for mentioning it. Sorry about that :(",
          "time": null
        }
      ]
    },
    {
      "content": "On Mac\n\n```\nsudo unbuffer tshark -lni utun1 2>/dev/null |unbuffer -p grep TCP |tee /dev/tty | unbuffer -p awk -v ip=`ifconfig utun1 |grep inet |awk '{print $2}'` '{if($3==ip){print $8}else{print $10}}'  |unbuffer -p grep -owE \"[0-9]{1,5}\" |xargs  -I {} sh -c  'G=$(echo {}|tr -d \"\\r\"); sudo lsof -i TCP -OPn -o | grep $G'\n\n```\nChange lsof -i TCP -OPn -o with netstat -aptun for linux\n\n",
      "votes": "1",
      "user": "marcobazzani",
      "time": "Apr 5, 2020 at 19:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The best option for Windows that I have found in 2023 is using WinShark, which is not that well known:\n\nhttps://github.com/airbus-cert/Winshark\n\nIt uses ETW to capture PID related to each packet, you just have to use something like winshark.header.ProcessId == 1234.\n\n\n\nInstalling it is also very straightforward which is explained in their github.\n\n",
      "votes": "0",
      "user": "OneAndOnly",
      "time": "Oct 13, 2023 at 15:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}