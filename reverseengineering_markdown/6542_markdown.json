{
  "title": "How do I find non-exported symbols of a binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/6542/how-do-i-find-non-exported-symbols-of-a-binary",
  "content": "You can use nm(liux/mac) to find exported and imported functions/symbols, is it possible to find the non-exported symbols of a binary in a similar way? Are there command line tools to assist with this?\nPrimarily looking to do .apk/.ipa analysis.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "443",
  "tags": [
    "binary-analysis",
    "static-analysis",
    "symbols",
    "binary"
  ],
  "user": "Cala",
  "time": "Oct 29, 2014 at 14:14",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "Is this for a binary you built yourself from source code? Or is this for a binary someone else built? If the latter, who was the developer and what is the binary? (Some developers like Microsoft make public symbols available for some of their binaries).",
      "time": null
    },
    {
      "user": "Cala",
      "text": "This is for pre-built binaries, or sometimes library .so files. The binaries are from various developers for android/iOS.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You would need to ask the developers of those Android / iOS apps for the symbols. It's very unlikely that they've made their apps' symbols publicly available.\n\nHowever, keep in mind that although symbols are helpful, they aren't required to reverse engineer an app.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Oct 29, 2014 at 14:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}