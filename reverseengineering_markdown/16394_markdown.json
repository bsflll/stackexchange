{
  "title": "Reverse engineering of Managed C++/C# CrackMe",
  "link": "https://reverseengineering.stackexchange.com/questions/16394/reverse-engineering-of-managed-c-c-crackme",
  "content": "I'm reverse engineering the CrackMe which is written on Managed C++/C#.\nArguments are \"string\" (email in this case) and \"serial\". Serial is somehow depends on string and I need to understand how.\n\nI used dnSpy to disassemble the program and found onClick function which begins the process of checking if the serial was right: button2_onClick\n\nIn the end of this function we can see a boolean function Check() which returns true if the serial was right: Check()\n\nAs I'm new to reverse engineering (and especially to RE of .NET apps) so I need some explanations about the decompiled code we can see in these two functions:\n\n1) What exactly does\n\n```\nmd = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>4, ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>2);\n\n```\nmean on line 25 of button2_onClick? I understand that this is some type of assignment, but no more.\n\n2) What these lines (14, 15 lines and so on, of Check()) do? \n\n```\n*(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>2 + 16) = 0;\n*(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>2 + 20) = 0;\n\n```\n3) What do the numbers (5, 6, 7 near the end of lines) mean?\n\n```\n<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>._Tidy(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>5, true, 0u);\n\nbasic_string<char,std::char_traits<char>,std::allocator<char>\\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>6;\n\nbasic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>* right2 = <Module>.md5(&basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>7, str);\n\n```\n4) Is it just a comparison of two strings in disguised form?\n\n```\nresult =(<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>.compare(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020>, 0u, (uint)(*(ref basic_string<char,std::char_traits<char>,std::allocator<char>\\u0020> + 16)), ptr, count) == 0);\n\n```\n5)Maybe there's a easier way which I don't know to solve this crackme? I firstly tried to use IDA as always, but that wasn't really helpful in this case.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    ".net",
    "crackme",
    "c#"
  ],
  "user": "kekyc",
  "time": "Sep 26, 2017 at 17:16",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "this looks more like Managed C++/.NET than C#",
      "time": null
    },
    {
      "user": "kekyc",
      "text": "@PawełŁukasik I'll consider that, thank you.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "EDIT: that's partially true, upon further investigation it looks like that at index 16, the length of the string is stored, and at index 20 it's some kind of type. If value @20 is > 16 then the string is in fact a pointer to memory region where the string is stored. For shorter strings it is stored internally. So setting those two to 0 is initialization/reseting the values.\n\nA bit of more info, although it is a bit harder than in normal .NET application one can still get to the data that's needed to correctly solve this. If we inspect the method where we compare\n\n\n\nwe can there inspect the variables & addresses that are in fact memory locations that are containing the values. maybe you can't inspect them from Locals, but if you press CTRL+G, and type the memory location you will be taken where you need to be.\n\n\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Sep 25, 2017 at 17:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "kekyc",
          "text": "After your answer I began to understand the disassembled code better, but I still can't understand what globally happening in Check() function.  And also, I tried to debug the code with dnSpy. It works and it helps to understand the program, but I can't see values the most of the important variables (see the screenshots) - there are just no these strings in the memory. Nothing changes when the program doing an assignment (or probably it actually changes, but no there where I'm looking for it). pic1 pic2",
          "time": null
        },
        {
          "user": "kekyc",
          "text": "Also, indeed, <Module>.GetString() looks like custom function and requires some analysis.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "well in C++ значение/value is a pointer to the value. I would bet you need to dereference it. Post the whole binary if you want a bit more analysis.",
          "time": null
        },
        {
          "user": "kekyc",
          "text": "I even tried to dump process memory with WinHex after that, but still found nothing useful. Here's the binary",
          "time": null
        },
        {
          "user": "kekyc",
          "text": "The problem was I haven't checked variables such as num5 in the memory. Actually wanted key was in memory on address which was  stored in num5. screenshot",
          "time": null
        }
      ]
    }
  ]
}