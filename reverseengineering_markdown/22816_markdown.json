{
  "title": "CreateTimerQueueTimer arguments differs from WinAPI",
  "link": "https://reverseengineering.stackexchange.com/questions/22816/createtimerqueuetimer-arguments-differs-from-winapi",
  "content": "I was reading a man page about CreateTimerQueueTimer.\n\n```\nBOOL CreateTimerQueueTimer(\n  PHANDLE             phNewTimer,\n  HANDLE              TimerQueue,\n  WAITORTIMERCALLBACK Callback,\n  PVOID               DueTime,\n  DWORD               Period,\n  DWORD               Flags,\n  ULONG               Parameter\n);\n\n```\nThe doc states:\n\nSo I needed to set this to 0 to avoid the callback to be executed periodically.\nThe problem was that modifying the period value has no effect on periodicity. Once loaded in OllyDBG, Olly reconstructed the arguments and the call giving me this function signature :\n\n```\nBOOL CreateTimerQueueTimer(\n PHANDLE             phNewTimer,\n HANDLE              TimerQueue,\n WAITORTIMERCALLBACK Callback,\n ULONG               Parameter,\n PVOID               DueTime,\n DWORD               Period,\n DWORD               Flags\n);\n\n```\nNotice that the parameter argument changed position, and thus all my patches was useless. I guess this error might be due to an old version of the API where the Parameter argument was in 4th position, but I can be wrong. Also, I can't find old WinAPIs to confirm my sayings.\nAm I guessing right or am I missing something?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "350",
  "tags": [
    "assembly",
    "malware",
    "winapi",
    "calling-conventions"
  ],
  "user": "Nark",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Yep, I think I've seen a similar case before. It happens very rarely, but because you can do some stunts at the C preprocessor level as well as at the linker level, this happens to work.\n\nIn this case I looked it up in the 3790.1830 DDK (Windows 2003 Server) and several newer WDKs and SDKs.\n\n```\nWINBASEAPI\nBOOL\nWINAPI\nCreateTimerQueueTimer(\n    PHANDLE phNewTimer,\n    HANDLE TimerQueue,\n    WAITORTIMERCALLBACK Callback,\n    PVOID Parameter,\n    DWORD DueTime,\n    DWORD Period,\n    ULONG Flags\n    ) ;  \n\n```\n```\nWINBASEAPI\nBOOL\nWINAPI\nCreateTimerQueueTimer(                                                                                                                                                                                             \n    __deref_out PHANDLE phNewTimer,\n    __in_opt    HANDLE TimerQueue,\n    __in        WAITORTIMERCALLBACK Callback,\n    __in_opt    PVOID Parameter,\n    __in        DWORD DueTime,\n    __in        DWORD Period,\n    __in        ULONG Flags \n    ) ;   \n\n```\n... this API moved into another header: Include/um/threadpoollegacyapiset.h (check out this study on API sets).\n\n```\nWINBASEAPI\nBOOL\nWINAPI\nCreateTimerQueueTimer(\n    _Outptr_ PHANDLE phNewTimer,\n    _In_opt_ HANDLE TimerQueue,\n    _In_ WAITORTIMERCALLBACK Callback,\n    _In_opt_ PVOID Parameter,\n    _In_ DWORD DueTime,\n    _In_ DWORD Period,\n    _In_ ULONG Flags\n    );  \n\n```\n... so no change up until this point (other than adopting SAL2 annotations).\n\nFor the Windows 10 SDKs 10.0.10240.0, 10.0.16299.0, 10.0.17134.0, 10.0.17134.0, 10.0.17763.0, 10.0.18362.0 it still has the same order for the arguments as for Windows 8.1. So it stands to reason you ran into a documentation issue rather than an actual change here.\n\nThere is no pending or old (and closed) pull request mentioning this function, so you may want to consider sending one.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Dec 23, 2019 at 19:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nark",
          "text": "Thanks, is there any resource out there that references old versions of the API? Can't find them on the waybackmachine !",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@Nark not sure what the point would be, since - as they say - the code doesn't lie. And as I pointed out to you the headers show the same argument order since at least Windows 2000. That new subdomain won't be in the Internet Archive and generally MS has changed URLs so often I'd consider you lucky if you managed to find one. Why not cross-check with the Windows 7 SDK or older ones, if you need to validate my findings?!",
          "time": null
        },
        {
          "user": "Nark",
          "text": "so it is rather a linker/compiler problem if I get it right ?",
          "time": null
        }
      ]
    }
  ]
}