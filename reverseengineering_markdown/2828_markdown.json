{
  "title": "What do the following ARM instructions mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/2828/what-do-the-following-arm-instructions-mean",
  "content": "I have some ARMv7 instructions that I do not understand, despite reading the reference at: ARM Information Center\n\nIn the context of:\n\n```\n  a7a4d8:   b530        push    {r4, r5, lr}\n  a7a4da:   466c        mov r4, sp\n  a7a4dc:   4605        mov r5, r0\n  a7a4de:   682a        ldr r2, [r5, #0]\n  a7a4e0:   ebad 0d02   sub.w   sp, sp, r2\n  a7a4e4:   f104 0014   add.w   r0, r4, #20 ; 0x14\n  a7a4e8:   4669        mov r1, sp\n  a7a4ea:   b082        sub sp, #8\n  a7a4ec:   466a        mov r2, sp\n  a7a4ee:   462b        mov r3, r5\n  a7a4f0:   f746 f1b8   bl  5c0864 <RoutineName>\n  a7a4f4:   9800        ldr r0, [sp, #0]\n  a7a4f6:   9901        ldr r1, [sp, #4]\n  a7a4f8:   46a5        mov sp, r4\n  a7a4fa:   bd30        pop {r4, r5, pc}\n\n```\nWhat does the following do? Can someone explain in terms of pseudo-code?\n\n```\n  a7a4de:   682a        ldr r2, [r5, #0]\n  a7a4e0:   ebad 0d02   sub.w   sp, sp, r2\n  a7a4e4:   f104 0014   add.w   r0, r4, #20 ; 0x14\n\n  a7a4f4:   9800        ldr r0, [sp, #0]\n  a7a4f6:   9901        ldr r1, [sp, #4]\n\n```\n",
  "votes": "5",
  "answers": 1,
  "views": "9k",
  "tags": [
    "disassembly",
    "arm"
  ],
  "user": "chuacw",
  "time": "Sep 23, 2013 at 15:51",
  "comments": [],
  "answers_data": [
    {
      "content": "ldr r2, [r5, #0]\nmeans r2=*(r5+0)\nwhich loads the value pointed to by r5 and places it in r2.\n\nsub.w   sp, sp, r2\nmeans sp=sp-r2\nwhich subtracts sp by the value in r2 (to allocate stack space).\n\nadd.w   r0, r4, #20 ; 0x14\nmeans r0=r4+20\nwhich adds 20 (decimal) to r4 and places the result in r0.\n\nldr r0, [sp, #0]\nmeans r0=*(sp+0)\nwhich loads the value pointed to by sp and places it in r0.\n\nldr r1, [sp, #4]\nmeans r1=*(sp+4)\nwhich loads the value pointed to by (sp+4) and places it in r1.\n\nIn C pseudo-code it looks something like this:\n\n```\nx_a7a4d8(dword *ptr_allocsize, void *arg1)\n{\n  alloca(*ptr_allocsize)\n  dword p2;\n  qword p1;\n  x_5c0864(&arg1, &p1, &p2, ptr_allocsize)\n  return p1;\n}\n\n```\nso it allocates some space for the value returned by the 5c0864 routine (because it uses the stack to return the value), calls the 5c0864 routine, and returns the value returned by 5c0864.\n\n",
      "votes": "5",
      "user": "0xC0000022L",
      "time": "Sep 23, 2013 at 19:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "chuacw",
          "text": "Thank you, Peter! I finally found that this is addressed under addressing modes here: davespace.co.uk/arm/introduction-to-arm/addressing.html",
          "time": null
        }
      ]
    }
  ]
}