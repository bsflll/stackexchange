{
  "title": "Finding address in IDA from address found in Cheat Engine",
  "link": "https://reverseengineering.stackexchange.com/questions/21581/finding-address-in-ida-from-address-found-in-cheat-engine",
  "content": "I found a pointer's address, 0x485FE058, in Cheat Engine. However, when I load up the exe in IDA, the addresses are smaller and start from 0x00401000. I read up somewhere that this was called virtual memory addresses. But, after looking, I couldn't figure out how to plug the dynamic addresses in Cheat Engine and make them show up.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "disassembly",
    "x86",
    "cheat-engine"
  ],
  "user": "8bitMafia",
  "time": "Jul 6, 2019 at 19:59",
  "comments": [],
  "answers_data": [
    {
      "content": "Edit -> Segment-> Rebase in IDA and input the address where it is actually loaded in CheatEngine \n\nYou will have one-to-one-correspondence.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Jul 1, 2019 at 7:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jeffrey Mvutu Mabilama",
          "text": "I get that the rebase will work if I know the position of the same instruction in IDA and the position of the exact same instruction line in memory. ... But Cheat Engine unfortunately does not provide a mapping of the whole binary (unless I miss something). In that regard, how to know what the lines of the memory correspond to in the binary ? I guess I could trying making a search of binary values near by copying the bytes in CE where there is the function I want to modify.. :/",
          "time": null
        }
      ]
    }
  ]
}