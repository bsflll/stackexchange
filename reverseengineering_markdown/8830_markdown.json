{
  "title": "Expressing trace semantics as a solution for a fixpoint equation",
  "link": "https://reverseengineering.stackexchange.com/questions/8830/expressing-trace-semantics-as-a-solution-for-a-fixpoint-equation",
  "content": "I was reading through the chapter on Obfuscation in \"Practical Reverse Engineering\" I encountered the following statement.\n\nCould someone explain what that means in simple terms? If you could point me towards any resources for further reading and learning, that'd be great too.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "115",
  "tags": [
    "obfuscation",
    "program-analysis"
  ],
  "user": null,
  "time": "May 6, 2015 at 19:52",
  "comments": [],
  "answers_data": [
    {
      "content": "You may consult pages 39-41 in the thesis \n\nof M. Dalla Preda about formal obfuscation; or sections 4.4 and 4.5 in the orignal paper \n\nof Cousot and Cousot.\n\nThe theory is formal and requires much more technical details than the following interpretation, but the idea is that:\n\nThe \"finite trace\" semantics of a program P is defined by the set of all finite traces of P. A trace is nothing but a finite sequence of states of P, obtained when running P, step-by-step over \"commands\" of P. \n\n(You may note that, from a state, we can get a set of possible next states, because the command at this state can be nondeterministic: it can receive some value from environment).\n\nTo calculate the finite trace semantics of P, one way (which one is refered in your book) is to use a function F defined from FinSeqs to FinSeqs:\n\n```\nF : FinSeq -> FinSeq\n\n```\nwhere FinSeqs is the set of all \"sub-set of finite sequences of states of P\" (you may think that each sub-set is a possible value for the \"finite trace\" semantics of P). \n\nThis function F map a sub-set X to a sub-set X' so that each trace x' of X' has a trace x of X as suffix (that is the reason why it is called \"backward\" in the paper of Cousot and Cousot). Particularly, we have that\n\n```\nx' = sj . x\nx = si . x1\n\n```\nand sj must be able to be a next state of si. The least fixpoint of the function F, namely some set Xp so that\n\n```\nF(Xp) = Xp\n\n```\nis called the trace semantics of P.\n\n",
      "votes": "1",
      "user": "Ta Thanh Dinh",
      "time": "May 7, 2015 at 0:52",
      "is_accepted": true,
      "comments": []
    }
  ]
}