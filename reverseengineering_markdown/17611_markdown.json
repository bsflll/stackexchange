{
  "title": "help needed to understand this pseudo code from ida and possibly recreate it",
  "link": "https://reverseengineering.stackexchange.com/questions/17611/help-needed-to-understand-this-pseudo-code-from-ida-and-possibly-recreate-it",
  "content": "I've be on with the application for a while now and have pinpointed some interested functions, I would like to be able to implement them in to another application but I'm not sure how to get them \"out\" of IDA.\n\nI was going to try and copy the ASM code and use that, then I found how to decompile it into some Pseudo readable Code, but I can't get it to compile again as I don't have enough experience with C.\n\nHere is the code it generated:\n\n```\nint __usercall sub_10001000@<eax>(unsigned int a1@<eax>, int a2@<ecx>)\n    {\n      unsigned __int16 v2; // dx@1\n      unsigned int v3; // eax@1\n\n      v2 = (unsigned __int8)a1;\n      v3 = a1 >> 8;\n\n      return *(_DWORD *)(a2 + 4 * v2 + 3144)\n      + (*(_DWORD *)(a2 + 4 * (unsigned __int8)v3 + 2120) ^ (*(_DWORD *)(a2 \n      + 4 * BYTE1(v3) + 1096) + *(_DWORD *)(a2 + 4 * ((unsigned __int16)(v3 \n      >> 8) >> 8) + 72)));\n    }\n\n```\nI'd like to understand what this code does and to hopefully recreate it.\n\nWould anyone be so kind as to write out a function what performs the same task ?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "c"
  ],
  "user": "henda79",
  "time": "Mar 6, 2018 at 10:47",
  "comments": [
    {
      "user": "Abr001am",
      "text": "Ok i misundertood do you need to compile a disassembled function in a new application ? i don't think it's feasible because the anatomic nature of asm code don't fit to be recompiled again, there is an example of boomrang that tries to recompiles a recovered code from ASM but it often fails.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "the function takes a dword from one of each equally spaced table does some magic with it and returns a dword you can see     let a1  = 0x10000000     let a2  = 0x20000000     so  v2  = 0x0000     so  v3  = 0x00100000      (0x20000000 + (4 * 0) + 3144) = dword[0x20000c48] +      (0x20000000 + (4 * 0) + 2120) = dword[0x20000848] ^        (0x20000000 + (4 * 0) + 1096) = dword[0x20000448] +     (0x20000000 + (4 * 0) + 0072) = dword[0x20000048]",
      "time": null
    },
    {
      "user": "henda79",
      "text": "@blabb Thanks, I've had a go at creating a function but can't get it compiled, I'm not too clever with C/C++. Could you write out a function please ?",
      "time": null
    },
    {
      "user": "blabb",
      "text": "since this question is closed you may have to start anew start by showing both the pseudo code and disassembly along with what you tried and where you are stuck no one may be writing you a replacement function  but may provide you advice on how to write one yourself",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The thing about \"decompiled\" code is, it doesn't really say much about what the author was trying to do. It is simply the compiler's view on what the code meant, and the compiler will optimize away most of the readability. :P\n\nTake that \"decompiled\" function, and first off, let's turn it into compilable C.\nFor the most part, that just means stripping off the @<register> stuff from the function and parameter names. We don't care about registers any more. That's the compiler's job. :P\n\n```\nint sub_10001000(unsigned int a1, int a2)\n{\n  unsigned __int16 v2;\n  unsigned int v3;\n\n  v2 = (unsigned __int8)a1;\n  v3 = a1 >> 8;\n\n  return *(_DWORD *)(a2 + 4 * v2 + 3144)\n  + (*(_DWORD *)(a2 + 4 * (unsigned __int8)v3 + 2120) ^ (*(_DWORD *)(a2 \n  + 4 * BYTE1(v3) + 1096) + *(_DWORD *)(a2 + 4 * ((unsigned __int16)(v3 \n  >> 8) >> 8) + 72)));\n}\n\n```\nNow...see all that *(_DWORD *) stuff? It happens every time we use a2. That hints that a2 should be a _DWORD *. Note that when we do that, C will change what a2 + (whatever) means. (It'll add (whatever) * the size of a _DWORD, which is almost certainly 4.) We also have to adjust the stuff inside so that instead of adding 4 * X, we simply add X.\n\n```\nint sub_10001000(unsigned int a1, _DWORD * a2)\n{\n  unsigned __int16 v2;\n  unsigned int v3;\n\n  v2 = (unsigned __int8)a1;\n  v3 = a1 >> 8;\n\n  // 786 = 3144/4, 530 = 2120/4, 274 = 1096/4, 18 = 72/4\n  return *(a2 + v2 + 786) \n  + (*(a2 + (unsigned __int8)v3 + 530) ^ (*(a2\n  + BYTE1(v3) + 274) + *(a2 + ((unsigned __int16)(v3\n  >> 8) >> 8) + 18)));\n}\n\n```\nNow, look at the things we're doing with v2 and v3. Converting them to 8-bit unsigned integers, shifting them by 8...taking \"byte 1\"...etc. And it's all based on a1. Basically, this code is treating a1 not as one 32-bit integer, but as four 8-bit integers.\n\nLet's add that observation to the code.\n\n```\nint sub_10001000(unsigned int a1, _DWORD * a2)\n{\n  unsigned __int16 v2;\n  unsigned int v3;\n  unsigned __int8 b0, b1, b2, b3;\n\n  v2 = (unsigned __int8)a1;\n  v3 = a1 >> 8;\n\n  b0 = v2;\n  b1 = (unsigned __int8) v3;\n  b2 = (unsigned __int8) (a1 >> 16);\n  b3 = (unsigned __int8) (a1 >> 24);\n\n  return *(a2 + b0 + 786) + (*(a2 + b1 + 530) ^ (*(a2 + b2 + 274) + *(a2 + b3 + 18)));\n}\n\n```\nC says that *(pointer + offset) and pointer[offset] are equivalent. Let's see if this increases readability any.\n\n```\nint sub_10001000(unsigned int a1, _DWORD * a2)\n{\n  unsigned __int16 v2;\n  unsigned int v3;\n  unsigned __int8 b0, b1, b2, b3;\n\n  v2 = (unsigned __int8)a1;\n  v3 = a1 >> 8;\n\n  b0 = v2;\n  b1 = (unsigned __int8) v3;\n  b2 = (unsigned __int8) (a1 >> 16);\n  b3 = (unsigned __int8) (a1 >> 24);\n\n  return a2[b0 + 786] + (a2[b1 + 530] ^ (a2[b2 + 274] + a2[b3 + 18]));\n}\n\n```\nSo the formula even fits on one line now.\n\nNow, since we no longer use v2 and v3 in the function (aside from calculating the byte values, and we can do that ourselves), we can get rid of them.\n\n```\nint sub_10001000(unsigned int a1, _DWORD * a2)\n{\n  unsigned __int8 b0, b1, b2, b3;\n\n  b0 = a1;\n  b1 = a1 >> 8;\n  b2 = a1 >> 16;\n  b3 = a1 >> 24;\n\n  return a2[b0 + 786] + (a2[b1 + 530] ^ (a2[b2 + 274] + a2[b3 + 18]));\n}\n\n```\nC has an 8-bit-integer type: uint8_t. And every modern C compiler knows about it. So we can get rid of these compiler-specific names.\n\nAlso, since C99, we can declare a variable where it's first initialized.\n\n```\n#include <stdint.h>\n\nint sub_10001000(unsigned int a1, _DWORD * a2)\n{\n  uint8_t b0 = a1;\n  uint8_t b1 = a1 >> 8;\n  uint8_t b2 = a1 >> 16;\n  uint8_t b3 = a1 >> 24;\n\n  return a2[b0 + 786] + (a2[b1 + 530] ^ (a2[b2 + 274] + a2[b3 + 18]));\n}\n\n```\nNotice now, also...when you put the numbers in order, any two adjacent numbers will have the same difference between them (256). And the first value is not at 0, but at 18. Looks like a2 is actually being treated as a pointer to a struct that looks somewhat like this (as far as we can see)...\n\n```\nstruct example {\n    DWORD unknown[18];\n    DWORD w[256];\n    DWORD x[256];\n    DWORD y[256];\n    DWORD z[256];\n};\n\n```\nwhich would be used like...\n\n```\n#include <stdint.h>\n\nint sub_10001000(unsigned int a1, struct example *ex)\n{\n    uint8_t b0 = a1;\n    uint8_t b1 = a1 >> 8;\n    uint8_t b2 = a1 >> 16;\n    uint8_t b3 = a1 >> 24;\n\n    return ex->z[b0] + (ex->y[b1] ^ (ex->x[b2] + ex->w[b3]));\n}\n\n```\nBut we can't know much more from this code alone -- including what the function is supposed to do -- so it's impossible to come up with much more meaningful names. The rest of the code should help with that.\n\n",
      "votes": "5",
      "user": "cHao",
      "time": "Jun 26, 2018 at 13:08",
      "is_accepted": true,
      "comments": [
        {
          "user": "Abr001am",
          "text": "Very interesting effort, cheers!",
          "time": null
        },
        {
          "user": "Abr001am",
          "text": "Do not forget that most optimizers deal with integer division by 2 directly by shifting to right, see here.",
          "time": null
        },
        {
          "user": "henda79",
          "text": "Thanks cHao for your lengthy explanation. It really helped me out and is much appreciated !",
          "time": null
        },
        {
          "user": "henda79",
          "text": "errrmm, how do I accept the answer ? There doesn't seem to be an option.",
          "time": null
        },
        {
          "user": "cHao",
          "text": "Click the check mark next to an answer (near the vote buttons) to accept it.",
          "time": null
        }
      ]
    }
  ]
}