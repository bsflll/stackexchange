{
  "title": "how data types and variables are converted to machine code?",
  "link": "https://reverseengineering.stackexchange.com/questions/16811/how-data-types-and-variables-are-converted-to-machine-code",
  "content": "I know that every x86 instruction has an opcode for that, but I don't know how data types and variables are converted to machine code. So I tried to figure out. I wrote a simple C program and converted it to assembly:\n\n```\n#include<stdio.h>\n\nint variable1=1;\nint variable2=1;\n\nchar variable3='A';\nchar variable4='A';\n\nchar name[20]=\"naveen prakash\";\n\n\nint main(int argc, char const *argv[])\n{\n\nchar g[4]=\"hell\";\nint local_variable1=1;\nint local_variable2=2;\nint local_variable3;\n\nvariable1=0;\nvariable2=1;\n\n variable3='B';\n variable4='A';\n\n printf(\"HeLLO wORLD  \n\");\n getch();\n\n}\n\n```\nAssembly for the above program (Compiled using gcc -S hello.c):\n\n```\n.file   \"hello.c\"\n.globl _variable1\n    .data\n    .align 4\n_variable1:\n    .long   1\n.globl _variable2\n    .align 4\n_variable2:\n    .long   1\n.globl _variable3\n_variable3:\n    .byte   65\n.globl _variable4\n_variable4:\n    .byte   65\n.globl _name\n_name:\n    .ascii \"naveen prakash\\0\"\n    .space 5\n    .def    ___main;    .scl    2;  .type   32; .endef\n    .section .rdata,\"dr\"\nLC1:\n    .ascii \"HeLLO wORLD\\0\"\nLC0:\n    .ascii \"hell\\0\"\n    .text\n.globl _main\n    .def    _main;  .scl    2;  .type   32; .endef\n_main:\n    pushl   %ebp\n    movl    %esp, %ebp\n    andl    $-16, %esp\n    subl    $32, %esp\n    call    ___main\n    movl    LC0, %eax\n    movl    %eax, 16(%esp)\n    movl    $1, 20(%esp)\n    movl    $2, 24(%esp)\n    movl    $0, _variable1\n    movl    $1, _variable2\n    movb    $66, _variable3\n    movb    $65, _variable4\n    movl    $LC1, (%esp)\n    call    _puts\n    call    _getch\n    leave\n    ret\n    .def    _puts;  .scl    2;  .type   32; .endef\n    .def    _getch; .scl    2;  .type   32; .endef\n\n```\nI could figure out only  global variables and cannot find local variables. \nThen I created executable file of the above program and used IDA, ollyDBG, PE Explorer and tried to find where the variables are, but I could not find.\n\nWhat happens to the variables and data type declarations when it converted into machine language?\n\nI read that .data segment contains the initialized data, then I tried to find my initialized data, but I couldn't find anything. I have a text \"naveen prakash\" but I can't find it anywhere in the executable file. I used Hex editor to view the binary  file.\n\nSo my question is, How variables and data types are represented in machine code and how do we find it using debuggers?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "3k",
  "tags": [
    "disassembly",
    "assembly",
    "x86",
    "machine-code"
  ],
  "user": "Naveen prakash",
  "time": "Nov 22, 2017 at 8:38",
  "comments": [
    {
      "user": "EWD-0-",
      "text": "The local variables are located in the stack of every function. You can easily find local ones in the definition of a function in Idea for example. It shows the locals with negative pointer values on the top of the function definition.",
      "time": null
    },
    {
      "user": "Nordwald",
      "text": "There are no variables in assembler, as they are a high level concept. There are bitfields of different lengths, which are interpreted depending on the operation. These can reside on the stack (locals) or at a certain memory location (globals).",
      "time": null
    },
    {
      "user": "blabb",
      "text": "your name char array has been optimised away by the compiler since you are not using it  try a printf(\"%s\", name ) and i will remain",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is an expansion of Nordwald's comment:\n\nVariable and data type declaration information is lost when code written in a high-level language are translated into machine language via compilation, since notions of variables and data types do not exist in machine language. This is part of the reason why decompilation is challenging.\n\nHigh-level languages are machine-independent. In order for code written in a HLL to be executed on a machine by its CPU, it needs to be translated into a form that is compatible with the CPU instruction set architecture of the target machine. Examples of instruction sets are x86, MIPS and ARM. We can think of instruction sets as representations of processor-specific machine language. Machine language deals only with binary values that represent information such as constants, memory locations, CPU registers and instructions.\n\nIt is not enough to simply perform HLL to object code translation, however. Information must be organized in a file in such a manner that it can be mapped into memory by the program loader and become a running process. This is where binary formats and system application binary interfaces (ABIs) enter the picture.\n\nWhen it comes to binary analysis, several things need to be taken into consideration:\n\nI believe gcc will compose ELF binaries by default. ELF binaries are structured such that memory is allocated for statically-allocated variables such as global variables in the .data section. String literals such as \"hello world\" are stored in the .rodata section and are accessed via pointers. \n\nOf course, if the binary you are analyzing is a PE rather than an ELF binary, this is not relevant. Either way, you should consult the ABI documentation appropriate for your system.\n\nRegardless of this, space for variables local to functions will be allocated on the runtime stack in virtual memory, not within the binary. This is the difference between static memory allocation and stack-based allocation:\n\nThis will be reflected in the code generated by the compiler, since it is the compiler that is responsible for generating the code that manages the runtime stack. \n\nSee also:\n\nHow to figure out method argument sizes and types in elf32-i386 disasembly?\n\n1. TIE: Principled Reverse Engineering of Types in Binary Programs\n\n2. Scott, Michael L. Programming Language Pragmatics. 3rd ed. Page 117\n\n",
      "votes": "2",
      "user": "julian",
      "time": "Nov 22, 2017 at 16:08",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Assembly represents variables using pointers in memory.\n The better question is \"How are variables represented in memory?\"\n\n",
      "votes": "0",
      "user": "danx",
      "time": "Nov 22, 2017 at 15:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}