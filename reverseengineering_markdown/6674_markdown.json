{
  "title": "debug a .dll compressed with pe compact",
  "link": "https://reverseengineering.stackexchange.com/questions/6674/debug-a-dll-compressed-with-pe-compact",
  "content": "I am trying to load a DLL in IDA and OllyDbg, but it says the file is compressed. I checked with a couple of tools and came to know that the file is compressed with PECompact. I think it also has reverse-engineer protection enabled because debuggers are not able to load it but other tools can disassemble it.\n\nSo, my question is how do I unpack the DLL and start debugging ?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "ollydbg",
    "pe",
    "unpacking",
    "patch-reversing"
  ],
  "user": "ASHUTOSH",
  "time": "Jul 15, 2015 at 15:59",
  "comments": [
    {
      "user": "PhoeniX",
      "text": "Check here as there are several tools that deal with that packer: woodmann.com/collaborative/tools/index.php/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There exist unpackers for PECompact.\n\nTry unpecompact2, I think there are two versions.\nhttp://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(MadMickael_version)\nhttp://www.woodmann.com/collaborative/tools/index.php/UnPECompact2_(smola_version)\n\nIf those doesn't work, you can try generic unpacker such as RL!dePacker, linxerUnpacker, Quick Unpack\n\n",
      "votes": "3",
      "user": "JayXon",
      "time": "Jan 13, 2015 at 22:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "PhoeniX",
          "text": "This answer is not constructive, what exactly someone can learn from it otherwise the strings to search for. Can you please post some meaningful links/data that can help others get an actual answer?",
          "time": null
        }
      ]
    },
    {
      "content": "As I never worked with PECompact before I downloaded a few unpackmes and tested it.  It looks like a very easy system to unpack.\n\nThe script PeCompact 2.xx - 3.xx OEP Finder by atom0s found the OEP correctly for every unpackme I tested.  Please note that you will need to ignore a couple of exceptions (INT3 breaks and Memory access violations), but the anti-debugging will be defeated by the DBH instruction in ODBGScript.\n\nFor some of the unpackmes I found a simple API redirection was also present: each reference to the KERNEL32 API was redirected to a couple of instructions where the correct value was loaded in EAX followed by a JMP EAX instruction (see image):\n\n\n\nFor such cases, I wrote this small script to solve the redirection (You will need to set the hard-coded value to the address of the first wrong entry):\n\n```\nvar oep\nvar next\n\nmov oep, eip\nmov next, 00460974  // FIXME\n\nFIX:\n    mov eip, [next]\n    sto\n    mov [next], eax\n    add next, 4\n    cmp [next], 0\n    jne FIX\n\nmov eip, oep\nret\n\n```\nOnce this second script is completed you can dump the file and fix the IAT as usual.\n\nAlso, it is not clear in your post if your problems are due to the fact that you are working on a DLL instead of an EXE file. If that's the case, you can either use the LOADDLL tool or modify the PE header to load the DLL as an EXE (Here is an example of how to do it on LordPE).\n\n",
      "votes": "1",
      "user": "Maurice",
      "time": "Jul 15, 2015 at 20:58",
      "is_accepted": false,
      "comments": [
        {
          "user": "Maurice",
          "text": "I just noticed that Scylla and ImpREC have plugins to fix the IAT redirection on PECompact.  Therefore, my second script is not really needed.",
          "time": null
        }
      ]
    }
  ]
}