{
  "title": "The debugger could not attach to the selected process",
  "link": "https://reverseengineering.stackexchange.com/questions/3143/the-debugger-could-not-attach-to-the-selected-process",
  "content": "I want to debug an application which when opened, it will open a fork from it.\n\ne.g. program.exe will run 2 program.exe in the task manager\n\nthe software is EMS SQL Management Studio for PostgreSQL\n\nwhen I try to attach debugger to the first .exe file (trial Wizard) a Message Box shows as follows:\n\nI can attach the debugeer to the second .exe (Main Program Window) file. But it is useless.\n\nI think my problem is that one of them is the parent process and the other is the child process. Can I know how to open the child process alone (maybe inspect arguments) so I can attach debugger to it.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "5k",
  "tags": [
    "disassembly",
    "ida",
    "windows",
    "decompilation"
  ],
  "user": "Danyal",
  "time": "Jan 2, 2014 at 8:45",
  "comments": [
    {
      "user": "PhoeniX",
      "text": "What is you final goal?",
      "time": null
    },
    {
      "user": "Danyal",
      "text": "I want to Unpack EMS SQL Management Studio for PostgreSQL",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To debug child processes, you can use procmon to inspect the whole flow and get the information regarding the parameter that the child processes are executed with. Or, you can breakpoint on CreateProcessA(W) or similar and go from there.\n\nHxD could be used as a hex editor for the above.\n\n",
      "votes": "5",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "Danyal",
          "text": "1. WinDBG cannot debug this exe as it says. 2. I found 0xEB 0xFE using CFF. now what? I disassembled it but it doesn't run",
          "time": null
        },
        {
          "user": "PhoeniX",
          "text": "at the hex editor, you need to get to the entery point and there replace first 2 bytes with 0xeb 0xfe. After replacement, execute the file. Just save the original ones, to restore them once you are connected with the debugger.",
          "time": null
        }
      ]
    },
    {
      "content": "It may have a form of protection from debugger attaching. Programs can call IsDebuggerPresent or have a different way of dealing with debugger detection. They usually pop up a fake \"error\" or immediately terminate.\n\nYou could modify kernel32.dll (it has the debugger check function) and make it return false, but it's not usually a good idea to mess with system files.\n\n",
      "votes": "4",
      "user": "Discord",
      "time": "Dec 24, 2013 at 4:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "Danyal",
          "text": "ok. Any way to bypass debugger protection",
          "time": null
        },
        {
          "user": "Discord",
          "text": "Not much that I know of unfortunately.",
          "time": null
        }
      ]
    }
  ]
}