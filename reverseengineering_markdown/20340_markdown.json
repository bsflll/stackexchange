{
  "title": "Print string at address with radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/20340/print-string-at-address-with-radare2",
  "content": "I have created a very basic golang program which display a message with fmt.Println().\n\nHere is what is see in radare2:\n\n```\nlea rcx, obj.main.statictmp_0 ; 0x4c84b0 ; \"y[K\"\nmov qword [local_48h], rcx\nlea rcx, [local_40h]        ; 0x40 ; '@' ; 64\nmov qword [rsp], rcx\nmov qword [local_8h], 1\nmov qword [local_10h], 1\ncall sym.fmt.Println\n\n```\nI suppose obj.main.statictmp_0 contains my string message.\n\nI have tried:\n\n```\nps @obj.main.statictmp_0\n\n```\nbut it does not display my message.\nAny idea ?\n\nThanks\n\n",
  "votes": "1",
  "answers": 1,
  "views": "4k",
  "tags": [
    "radare2"
  ],
  "user": "Bob5421",
  "time": "Jan 11, 2019 at 14:01",
  "comments": [
    {
      "user": "Megabeets",
      "text": "Well, GO compiled binaries might behave differently than other binaries. Can you share the binary itself? :)",
      "time": null
    },
    {
      "user": "blabb",
      "text": "go uses  counted string with no zerotermination  a pointer and size array   struct chararray { char * str , int size }   chararray[] = { \"foo\" ,3 ;.........}   so  0x4c84b0 in your case is pointer to  string  since you are on x64 the next qword that is 0x4c84bc will hold the string length",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "use pf S @obj.main.statictmp_0. string length is at address @obj.main.statictmp_0+8 if using 64bit or @obj.main.statictmp_0+4 if using 32bit!\n\n```\npf S @obj.main.statictmp_0   ; gives you string\npf p @obj.main.statictmp_0+8 ; gives you string length\n\n```\n",
      "votes": "0",
      "user": "arman",
      "time": "Jan 11, 2019 at 18:19",
      "is_accepted": true,
      "comments": []
    }
  ]
}