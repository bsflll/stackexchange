{
  "title": "Disassemble and debug dynamic generated code executed via delegate in c#",
  "link": "https://reverseengineering.stackexchange.com/questions/25839/disassemble-and-debug-dynamic-generated-code-executed-via-delegate-in-c",
  "content": "I'm trying to reverse engeneer a malware using dnSpy that at some point do this:\n\n```\ndelegate IntPtr H7IREAEBYY(string path, IntPtr data);\nbyte[] array = new byte[]\n        { 233, 151, ... }\n\nIntPtr value = IntPtr.Zero;\nIntPtr intPtr = W47PO0IHP8.VirtualAlloc(IntPtr.Zero, (uint)array.Length, 12288U, 64U);\nMarshal.Copy(array, 0, intPtr, array.Length);\n        W47PO0IHP8.H7IREAEBYY h7IREAEBYY = (W47PO0IHP8.H7IREAEBYY)Marshal.GetDelegateForFunctionPointer(intPtr, typeof(W47PO0IHP8.H7IREAEBYY));\nh7IREAEBYY(path, intPtr2);  \n\n```\nWhen the delegate is executed the debugger step over the delegate and i can't analyze such code, how can i analyze or disassemble the code in the array that is executed through a delegate?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "824",
  "tags": [
    "malware",
    ".net"
  ],
  "user": "n0t0r1us",
  "time": "Sep 8, 2020 at 17:40",
  "comments": [],
  "answers_data": [
    {
      "content": "You cannot do that with dnSpy, as the code that is stored in array is not managed code but native. So you have to extract that bytes, saved them in a file and analyze spearately with a native disassembler like r2, Ghidra, IDA etc.\n\nAs for stepping into, it's the same. You have to use a native debugger and not the one from dnSpy.\n\nSince this is a mixed binary it might be tricky to setup the system in such a way that you could step from one part of the code debugged in dnSpy and to the other that is native.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Sep 10, 2020 at 15:17",
      "is_accepted": false,
      "comments": []
    }
  ]
}