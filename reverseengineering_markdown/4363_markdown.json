{
  "title": "Memory allocation on the stack",
  "link": "https://reverseengineering.stackexchange.com/questions/4363/memory-allocation-on-the-stack",
  "content": "Here is a sample function reverse engineered from an easy program:\n\n```\nmain            proc near\nvar_70          = dword ptr -70h\nvar_6C          = dword ptr -6Ch\nvar_68          = dword ptr -68h\ni_2             = dword ptr -54h\ni               = dword ptr -4\npush    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 70h\nmov     [esp+70h+i], 0\njmp     short loc_804840A\n￼￼￼loc_80483F7:\nmov     eax, [esp+70h+i]\nmov     edx, [esp+70h+i]\nadd     edx, edx\nmov     [esp+eax*4+70h+i_2], edx\nadd     [esp+70h+i], 1\nloc_804840A:\ncmp     [esp+70h+i], 13h\njle     short loc_80483F7\nmov     [esp+70h+i], 0\njmp     short loc_8048441\nloc_804841B:\nmov    eax, [esp+70h+i]\nmov    edx, [esp+eax*4+70h+i_2]\nmov    eax, offset aADD ; \"a[%d]=%d  \n\"\nmov    [esp+70h+var_68], edx\nmov    edx, [esp+70h+i]\nmov    [esp+70h+var_6C], edx\nmov    [esp+70h+var_70], eax\ncall   _printf\nadd    [esp+70h+i], 1\nloc_8048441:\ncmp    [esp+70h+i], 13h\njle     short loc_804841B\nmov    eax, 0\nleave \nretn\nmain   endp\n\nC code\n\n#include <stdio.h>\nint main() {\n    int a[20];\n    int i;\n    for (i=0; i<20; i++)\n        a[i]=i*2;\n    for (i=0; i<20; i++)\n        printf (\"a[%d]=%d  \n\", i, a[i]);\n    return 0;\n}\n\n```\nMy questions are:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "memory",
    "stack-variables"
  ],
  "user": "upton",
  "time": "May 20, 2014 at 20:06",
  "comments": [
    {
      "user": "DCoder",
      "text": "Read Why addresses of variable on stack are not consecutive? and the answers there.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In your case because int is 4 bytes and you want 20 element\n\n```\nint a[20] // --> 20 * 4 = 0x50\n\n```\nso it is very normal for i and i_2\n\nThe other thing is that your compiler didn't push printf arguments into stack. It pre-allocated the stack location in \n\n```\nvar_70 = dword ptr -70h\nvar_6C = dword ptr -6Ch\nvar_68 = dword ptr -68h\n\n```\nand called the function like this\n\n```\nmov    edx, [esp+eax*4+70h+i_2]\nmov    eax, offset aADD ; \"a[%d]=%d  \n\"\nmov    [esp+70h+var_68], edx\nmov    edx, [esp+70h+i]\nmov    [esp+70h+var_6C], edx\nmov    [esp+70h+var_70], eax\ncall   _printf\n\n```\nBut there is 2 reason for such a thing (not your case)...\n\nyeap! as @DCoder commented, you asked it Here before.\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "upton",
          "text": "In that question, the answers says the temporary variables, like var_70 ,generated due to copy params are not local variables. But I think that's not correct.",
          "time": null
        }
      ]
    }
  ]
}