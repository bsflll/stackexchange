{
  "title": "Odd jsr destination in SuperH disassembly w/ Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/22262/odd-jsr-destination-in-superh-disassembly-w-ghidra",
  "content": "I'm reverse engineering firmware from an old sampler/groovebox that uses a Hitachi SuperH-3 7706 processor, making great progress.  Out of the 8M or so of code, everything looks and lines up correctly.  However, in a few spots I see some stuff that makes me scratch my head and I'm not sure what is going on...\n\nThis function looks a lot like another one in a different area, which eventually calls memcpy().  This version of it makes a jsr to the middle of a function (0x8C010D20) and doesn't make a lot of sense given what is being stuffed into the function argument registers (see 0x80018e82 for actual jsr). And the 0x400B is definitely a jsr r0.\n\nHere is the disassembly of the caller and the callee.  What am I missing here?\n\n```\n-- Caller --\n                     **************************************************************\n                     *                          FUNCTION                          *\n                     **************************************************************\n                     undefined __stdcall rom_copy_to_ram_maybe(int param_1)\n     undefined         r0:1           <RETURN>\n     int               r4:4           param_1\n     undefined4        Stack[-0x4]:4  local_4                                 XREF[1]:     80018e70(*)\n     undefined4        Stack[-0x8]:4  local_8                                 XREF[2]:     80018e72(*),\n                                                                                           80018e88(*)\n                     rom_copy_to_ram_maybe\n80018e70 2f e6           mov.l      r14,@-r15=>local_4\n80018e72 4f 22           sts.l      pr,@-r15=>local_8\n80018e74 24 48           tst        param_1,param_1\n80018e76 d5 06           mov.l      @(DAT_80018e90,pc),r5=>DAT_a0400000              = A0400000h\n80018e78 8f 01           bf/s       LAB_80018e7e\n80018e7a 6e f3           _mov       r15,r14\n80018e7c d5 05           mov.l      @(DAT_80018e94,pc),r5=>SUB_a0000000              = A0000000h\n                     LAB_80018e7e                                    XREF[1]:     80018e78(j)\n80018e7e d0 06           mov.l      @(->FUN_8c010d20,pc),r0                          = 8c010d20\n80018e80 d4 06           mov.l      @(PTR_DAT_80018e9c,pc),param_1=>DAT_8d800000     = 8d800000\n80018e82 40 0b           jsr        @r0=>FUN_8c010d20                                TODO: this makes no sense... it'\n80018e84 00 09           _nop\n80018e86 6f e3           mov        r14,r15\n80018e88 4f 26           lds.l      @r15=>local_8+,pr\n80018e8a 00 0b           rts\n80018e8c 6e f6           _mov.l     @r15+,r14\n80018e8e 00 09           nop\n                     DAT_80018e90                                    XREF[2]:     rom_copy_to_ram_maybe:80018e76(R\n                                                                                  rom_copy_to_ram_maybe:80018e76(R\n80018e90 a0 40 00 00     undefined4 A0400000h\n                     DAT_80018e94                                    XREF[2]:     rom_copy_to_ram_maybe:80018e7c(R\n                                                                                  rom_copy_to_ram_maybe:80018e7c(R\n80018e94 a0 00 00 00     undefined4 A0000000h\n                     PTR_FUN_80018e98                                XREF[2]:     rom_copy_to_ram_maybe:80018e7e(R\n                                                                                  rom_copy_to_ram_maybe:80018e7e(R\n80018e98 8c 01 0d 20     addr       FUN_8c010d20\n                     PTR_DAT_80018e9c                                XREF[2]:     rom_copy_to_ram_maybe:80018e80(R\n                                                                                  rom_copy_to_ram_maybe:80018e80(R\n80018e9c 8d 80 00 00     addr       DAT_8d800000\n\n\n```\n```\n-- Callee --\n                     **************************************************************\n                     *                          FUNCTION                          *\n                     **************************************************************\n                     uint __stdcall FUN_8c010d10(char param_1)\n     uint              r0:4           <RETURN>\n     char              r4:1           param_1\n     undefined4        Stack[-0x4]:4  local_4                                 XREF[1]:     8c010d10(*)\n                     FUN_8c010d10                                    XREF[4]:     8c010a82(c), 8c010b14(*),\n                                                                                  8c010cec(c), 8c010d08(*)\n8c010d10 2f e6           mov.l      r14,@-r15=>local_4\n8c010d12 74 bf           add        -0x41,param_1\n8c010d14 64 4c           extu.b     param_1,param_1\n8c010d16 e1 19           mov        #0x19,r1\n8c010d18 34 16           cmp/hi     r1,param_1\n8c010d1a 8f 02           bf/s       LAB_8c010d22\n8c010d1c 6e f3           _mov       r15,r14\n8c010d1e a0 01           bra        LAB_8c010d24\n                     **************************************************************\n                     *                          FUNCTION                          *\n                     **************************************************************\n                     undefined FUN_8c010d20()\n     undefined         r0:1           <RETURN>\n                     FUN_8c010d20                                    XREF[2]:     rom_copy_to_ram_maybe:80018e82(c\n                                                                                  80018e98(*)\n8c010d20 e0 00           _mov       #0x0,r0\n                     LAB_8c010d22                                    XREF[1]:     FUN_8c010d10:8c010d1a(j)\n8c010d22 e0 01           mov        #0x1,r0\n                     LAB_8c010d24                                    XREF[1]:     FUN_8c010d10:8c010d1e(j)\n8c010d24 6f e3           mov        r14,r15\n8c010d26 00 0b           rts\n8c010d28 6e f6           _mov.l     @r15+,r14\n8c010d2a 00 09           nop\n8c010d2c 00 09           nop\n8c010d2e 00 09           nop```\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "251",
  "tags": [
    "firmware",
    "ghidra",
    "superh"
  ],
  "user": "telengard",
  "time": "Jun 29, 2021 at 20:42",
  "comments": [],
  "answers_data": [
    {
      "content": "I'm not 100% sure I'm reading it right but it seems FUN_8c010d20 performs a part of the epilog processing:\n\nI'm not sure why this is done in a separate function instead of inline but I suspect it may be caused by over-aggressive \"shared code\" optimization (sometimes also called reverse inlining), when the compiler (or more commonly linker) scans the binary for common code sequences (especially at the end of functions) and replaces them by calls to a common function to reduce total code size. This can bring substantial code size savings but in this case it basically replaced two instructions by a function call which itself takes more space (especially if we add the 4-byte function address literal).\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 8, 2019 at 14:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "telengard",
          "text": "That definitely seems to be what it is doing, but given all the setup in rom_copy_to_ram_maybe, including putting values in the registers for function arguments, it seems odd that nothing is done.  8c010d20 is in the middle of the function at a label (setting r0 to 0), then falls through to the other label (sets r0 to 1) and then returns.  Seems like a lot of setup for what amounts to either a NOP or returning a 1.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@telengard maybe check if code is being copied around or some memory remapping is going on",
          "time": null
        },
        {
          "user": "telengard",
          "text": "I will go over it again, I've spent a lot of time reversing to the point I'm pretty confident with the memory map and any code being copied around (which does happen).  thanks.  I guess that confirms that what is going on doesn't totally look right.  :)",
          "time": null
        }
      ]
    }
  ]
}