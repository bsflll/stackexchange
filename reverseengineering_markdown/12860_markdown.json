{
  "title": "Why does the C compiler generate integer multiplication with large, seemingly random, numbers?",
  "link": "https://reverseengineering.stackexchange.com/questions/12860/why-does-the-c-compiler-generate-integer-multiplication-with-large-seemingly-ra",
  "content": "Hi I want to write those instructions in C, I'm having trouble with SAR EDX,6,\n\nASM\n\n```\nMOV EDX,8\nMOV EDI,1\nIMUL EDI,EDX\nMOV EAX,ED9CE24E\nIMUL EDI\nSAR EDX,6\n\n```\nmy try\n\n```\nint edi=1\nint edx=8\nedi*=edx;\nedx=((long long)edi*0xED9CE24E) >> 32 >> 6;\n\n```\n",
  "votes": "-1",
  "answers": 1,
  "views": "271",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "Gues",
  "time": "Jun 16, 2016 at 13:53",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, the sar instruction is at least similar enough to >> to be valid in your code. Technically, sar is for shift arithmetric right which treats the carry/sign bit a bit different. But handling edge cases like overflow etc. can't be translated well from assembly to C anyway.\n\nThe question that's more interesting is \"what does this do\". In this case, the compiler is using a trick to replace an (expensive) float division by a (cheap) integer multiplication.\n\nFor example, calculating \n\n```\nint something=get_an_integer_from_somewhere();\nint result=(int)((double)something/1.2345)\n\n```\nis quite expensive.\n\nBut, since 1/1.2345 = 0.810044552, this is the same as \n\nresult=(int)((double)something*0.810044552). \n\nWell, we replaced a division by a multiplication, but this is still expensive.\n\nHowever, we can write 0.810044552 as 3479114859/4294967296. And 4294967296 \"happens\" to be 2^32. So we can rewrite the whole thing as\n\nresult=something*3479114859/4294967296. And suddenly we don't need the floating point multiplication/division anymore; we just need an integer division, which is, in this case, very inexpensive, as it's just a shift right by 32 bits.\n\nAnd this is what your original C code seems to have been, which was then optimized by the compiler to not use a float division:\n\nresult=input/8.619\n\nTry it with some example values.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Jun 16, 2016 at 13:53",
      "is_accepted": true,
      "comments": [
        {
          "user": "Gues",
          "text": "Hi, Thanks for the details explanation, I'm trying to figure out how you calculated its division by 8.619 by following your instruction in reverse, 1/8.619=4983138759/4294967296 then what?",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "The code multiplies with 8, then with 3986481742 which is ED9CE24E in decimal, so 8*3986481742=31891853936 altogether. Then it divides by 2^38 (2^32 by using edx and ignoring eax, 2^6 due to the shift). 2^38 is 274877906944. So the code multplies with 31891853936/274877906944, or divides by 274877906944/31891853936, which is 8.619.",
          "time": null
        }
      ]
    }
  ]
}