{
  "title": "How To Print Addresses in Radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/16862/how-to-print-addresses-in-radare2",
  "content": "I'm switching over to Radare2 from GDB mixed with peda. One of the things I love about GDB, is the p command. For example, p system prints out the address of system. As well, peda's searchmem function is wonderful for uses such as searchmem SHELL. In Radare2, I have no idea how to achieve this. I've been Google'ing to the high heavens to no avail. Does anyone know if Radare2 has this ability?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "4k",
  "tags": [
    "radare2"
  ],
  "user": "Henry F",
  "time": "Nov 29, 2017 at 3:30",
  "comments": [],
  "answers_data": [
    {
      "content": "To print the address of system export of libc with radare2 you can use dmi libc system\n\nFirst you need to open radare2 and continue executing until you reach the program’s entrypoint. You have to do this because radare2 is starting its debugging before libc is loaded. When you’ll reach the entrypoint, the library would probably be loaded.\n\nNow use the dmi command and pass it libc and the desired function. \n\n```\n$ r2 -d binary_name\n\n[0xf771ab30]> dcu entry0\nContinue until 0x080483d0 using 1 bpsize\nhit breakpoint at: 80483d0\n\n[0x080483d0]> dmi libc system\n\n```\nWorth to mention here, that after the analysis (see a?) radare2 associates names to interesting offsets in the file such as Sections, Function, Symbols, Strings, etc. Those names are called ‘flags’. You can print the flags and their addresses with f. For more help see f? and read the \"flags\" chapter in radare2 book. \n\nTo know how to print different addresses and flags in different ways I'd recommend trying the p? command and reading the \"Printing\" chapter.\n\nSearching in radare2, including in memory, can be done with the / command. You can get more help about the available search commands by using /?. I highly recommend reading the \"Search\" chapter in radare2 book. See my answer here for example.\n\nReferences\n\n",
      "votes": "4",
      "user": "Megabeets",
      "time": "Nov 29, 2017 at 4:29",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "From the peda source code:\n\n```\n def searchmem(self, start, end, search, mem=None):\n        \"\"\"\n        Search for all instances of a pattern in memory from start to end\n        Args:\n            - start: start address (Int)\n            - end: end address (Int)\n            - search: string or python regex pattern (String)\n            - mem: cached mem to not re-read for repeated searches (raw bytes)\n        Returns:\n            - list of found result: (address(Int), hex encoded value(String))\n        \"\"\"\n\n```\nThis sounds quite similar to r2's searching capability:\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}