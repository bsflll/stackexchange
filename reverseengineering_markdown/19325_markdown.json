{
  "title": "What does \"Missing cjmp bb in predecessor\" mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/19325/what-does-missing-cjmp-bb-in-predecessor-mean",
  "content": "In new builds of Radare, I'm getting\n\n```\nMissing cjmp bb in predecessor at 0x1006aa416\n\n```\nWhat does this mean? I filed a bug on this here. But, it was answered with \n\nWhat is the cause of this warning?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "272",
  "tags": [
    "radare2",
    "error"
  ],
  "user": "Evan Carroll",
  "time": "Sep 14, 2018 at 5:38",
  "comments": [
    {
      "user": "sudhackar",
      "text": "I see a similar bug patched github.com/radare/radare2/issues/11469. Pull from repo and build again. If the issue persists you'll get a better discussion over GitHub.",
      "time": null
    },
    {
      "user": "Evan Carroll",
      "text": "@sudhackar see the update.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "bb refers to basic block, which is  a sequence of instructions without branches (except possibly at the end), and corresponds to nodes in a control flow graph (CFG), a structure commonly used in program analysis.\n\ncjmp is obviously a conditional jump. Apparently the analysis code did not find an expected pattern and is warning you that the results may be not so good because of that.\n\nIf we look at the message in the source code, we can see the \"decrypted\" message in the comment:\n\n```\n// predecessor must be a conditional jump\n\n```\nThis code seems to be analyzing patterns for jump tables, a common issue in disassemblers because they often mix data with code, and need to be recognized for proper disassembly.  The current analyzer seems to expect a specific pattern (likely the one present in Linux/GCC-produced files) but your file uses an instruction sequence that does not match its expectations. There are following possibilities:\n\nInterestingly, I looked at the address in question, and apparently there is a conditional jump in the predecessor block, so there may be some subtle bug in some other part of the code (e.g. basic block analysis) that prevents it from making the match.\n\n\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Sep 13, 2018 at 18:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}