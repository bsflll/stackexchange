{
  "title": "IDA - How do I find every call to a sub",
  "link": "https://reverseengineering.stackexchange.com/questions/27313/ida-how-do-i-find-every-call-to-a-sub",
  "content": "I'm using IDA to try and understand how a particular executable works. I've found the routine I'm interested in IDA Pro and it all makes perfect sense, in so much as I can see exactly the process play out as I'd expect.\n\nWhat I'm very confused about, though, is that I get to the top of the routine and I can't find any calls of references to it. To be clear, this is an executable and there are no exported functions - it's actually a Windows service.\n\nIf I right click and List Crossreferences I just a get single line in rdata? Is there anyway to find what calls this routine?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida"
  ],
  "user": "Dan",
  "time": "Mar 25, 2021 at 18:01",
  "comments": [
    {
      "user": "R4444",
      "text": "can you elaborate more with an example or a screenshot?",
      "time": null
    },
    {
      "user": "Rolf Rolles",
      "text": "Sounds like a virtual function, or, at least, function that is only referenced via function pointer.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Short of debugging it and adding a hardware breakpoint on the vtable/vfunction, this may give you some additional information.  Whether it is enough, or whether it will work in this case, I cannot say.\n\n```\n.rdata:0000000141A0E088 ; const BonusEventHttpTask::`vftable'\n.rdata:0000000141A0E088 ??_7BonusEventHttpTask@@6B@ dq offset HttpTask__m_0\n.rdata:0000000141A0E090                 dq offset return_null\n.rdata:0000000141A0E098                 dq offset HttpTask__m_10\n.rdata:0000000141A0E0A0                 dq offset HttpTask__m_18\n.rdata:0000000141A0E0A8                 dq offset return_1\n.rdata:0000000141A0E0B0                 dq offset return_0\n.rdata:0000000141A0E0B8                 dq offset return_0\n...\n\n```\n```\nCPickupPlacement *__fastcall CPickupPlacement::__construct(CPickupPlacement *a1, \n        int a2, Vector4 *position, Vector4 *rotation, int a5, int a6)\n{\n    // ... \n    pPickupPlacement->__vftable = &CPickupPlacement::`vftable';\n    //... \n    return pPickupPlacement;\n}\n\n```\n```\n//...\n    v14 = pPickupPlacement ? CPickupPlacement::__construct(pPickupPlacement, a2, a1, a3, a4, a8) : 0i64;\n    // ...\n    qword_140000000 = v14;\n// ...\n\n```\nHere is the definition for UnknownStruct referenced in point 5.  Open \"Local types\" and press Ins then paste in:\n\n```\nstruct UnknownVtable {\n    void* Function[1024];\n};\n\nstruct UnknownStruct {\n    UnknownVtable* vtable;\n    __int64 qword[1024];\n};\n\n```\n",
      "votes": "2",
      "user": "Orwellophile",
      "time": "Apr 20, 2022 at 8:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "Talespin_Kit",
          "text": "what does \"dq offset\" mean?",
          "time": null
        },
        {
          "user": "Orwellophile",
          "text": "@Talespin_Kit it's a QWORD sized pointer to where-ever the real thing is.",
          "time": null
        }
      ]
    }
  ]
}