{
  "title": "Redirecting Program Output from /dev/*char_device* to Text File",
  "link": "https://reverseengineering.stackexchange.com/questions/16506/redirecting-program-output-from-dev-char-device-to-text-file",
  "content": "I am currently trying to reverse an IoT machine running the 2.6 Linux Kernel on which I have root. On this machine, software writes to /dev/some_device to control what I believe to be are GPIO pins for a serial bus. In order to take control of these GPIO pins, I have been attempting to reverse the on-board software to grasp how the drivers are looking for input, but the decompilation has been messy/missing parts. \n\nThus, my question: \nAm I able to redirect program output intended for /dev/some_device to a text file for analysis?\n\nFor example, the current mapping:\n\n```\n\nProgram -> (char sequence) -> /dev/*char_device*\n\n```\nI am looking for a way to redirect the program output from the device to a text file, or better, any writes to the device to a text file. Example:\n\n```\n\nProgram -> (char sequence) --\\       /dev/*char_device*\n                              \\\n                               \\-----> *my_text_file*\n\n```\nAgain, my motivation to do so is to analyze how the driver is expecting input. I already know my logical input/output/return communications on the serial bus, I just need to be able to determine the specifics of the device driver. Any help is appreciated. Let me know if more information is required.\n\n-Update-\nHere is a method I tracked down in the source code decompliation. While I cannot verify that this is the exact handler for the devices I'm targeting, it used by devices with similar names. \n\n```\n\n// Address range: 0x1000c470 - 0x1000c6f7\nint32_t function_1000c470(int32_t * a1, int32_t a2, int32_t a3, char * path) {\n    int32_t v1 = (int32_t)a1;\n    int32_t v2; // bp-144\n    int32_t v3 = &v2 // 0x1000c470_0\n    v2 = v3;\n    g602 = v3;\n    int32_t fd = open(path, O_RDWR);\n    int32_t * fd2 = (int32_t *)(v1 + 4); // 0x1000c4a8_0\n    *fd2 = fd;\n    if (*fd2  0x1000c6d8\n    } else {\n        // 0x1000c500\n        fprintf(g94, \"opening serial device %s with fd %d  \n\", path, *fd2);\n        int32_t termios_p;\n        tcgetattr(*fd2, (struct termios *)&termios_p);\n        cfmakeraw((struct termios *)&termios_p);\n        cfsetospeed((struct termios *)&termios_p, 9);\n        cfsetispeed((struct termios *)&termios_p, 9);\n        tcsetattr(*fd2, TCSANOW, (struct termios *)&termios_p);\n        ioctl(*fd2, 0x5415);\n        g1 &= -0x2000001;\n        ioctl(*fd2, 0x5418);\n        *(int32_t *)(v1 + 16) = 0;\n        *(int32_t *)(v1 + 20) = 0;\n        int32_t * v4 = (int32_t *)(4 * *fd2 / 32 + v1 + 1668); // 0x1000c630_0\n        *v4 = 1  0x1000c674\n        }\n        // 0x1000c674\n        *(int32_t *)(v1 + 8) = v7 + 1;\n        *(int32_t *)(v1 + 1624) = 0;\n        *(int32_t *)(v1 + 1620) = 0;\n        *(int32_t *)(v1 + 1628) = 0;\n        memset((char *)(v1 + 120), 0, 1500);\n        function_1000c6f8(*fd2, 0);\n        // branch -> 0x1000c6d8\n    }\n    int32_t v8 = v2; // 0x1000c6dc\n    g602 = *(int32_t *)(v8 - 4);\n    return *(int32_t *)(v8 + 4);\n}\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "120",
  "tags": [
    "firmware",
    "linux",
    "driver"
  ],
  "user": "J. Bednard",
  "time": "Oct 9, 2017 at 1:01",
  "comments": [
    {
      "user": "J. Bednard",
      "text": "To add, the /dev/device I am targeting is a character device. It'd like to divert its input steam to an output file.",
      "time": null
    },
    {
      "user": "J. Bednard",
      "text": "Part of my thought believes that the /dev device is just a pointer to the driver handler. If that is case, would I be able to overwrite the pointer to my own device?",
      "time": null
    },
    {
      "user": "Kerim Can Kalıpcıoğlu",
      "text": "It is also a file. Which interface this software use for accessing device? Is it uses open(2)?",
      "time": null
    },
    {
      "user": "J. Bednard",
      "text": "@de6f I have updated the original post with the decompiled source code which is working on the device file.",
      "time": null
    },
    {
      "user": "J. Bednard",
      "text": "Ideally, I should be able to take the supplied code and recompile it into my own program and try to harness termios to setup a serial connection. I'm a bit weary on this being the correct code those as the /dev/device I am trying to target is an IBM SDLC serial bus. In fact, I'm going to make the assumption that the code in the post is not for the device that I am targetting.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I have used /dev/ptmx for that purpose:\n\nSay i want to intercept data written to /dev/somedevice\n\nMake sure the interceptor gets started before the original program opens the device.\n\nAlso, i think you may run into problems handling ioctls this way.\n\n",
      "votes": "2",
      "user": "Willem Hengeveld",
      "time": "Oct 9, 2017 at 19:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "J. Bednard",
          "text": "Thank you William. I'll give this a try when I sit down next. I'll report back.",
          "time": null
        }
      ]
    }
  ]
}