{
  "title": "Base64 encoding with missing padding and many uppercase letters",
  "link": "https://reverseengineering.stackexchange.com/questions/13323/base64-encoding-with-missing-padding-and-many-uppercase-letters",
  "content": "Following string looks like base64 to me, but fewer digits or lowercase characters than upper. Some base64 decoders fail decoding it.\nCould it still be base64? Is there a way to decode it?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "encodings"
  ],
  "user": "user2274486",
  "time": "Aug 20, 2016 at 17:48",
  "comments": [
    {
      "user": "Jongware",
      "text": "Not if you don't know the exact input alphabet size and order.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This might be base64, Although it is missing the required padding. base64 encoded string lengths are 4*(n/3) where n is the original string. Padding is done with one or two equal (=) marks. Since your string is 110 bytes long, it should end with two padding bytes.\n\nManually adding the two padding bytes (which are sometimes omitted because they're predictable) results in the following hex:\n5e43461540021f4d454545175d5e56545304164c555c0e1d0741155a4c41071153436d15524b43155d405616030b06040051504d06045454570c0350510256530e050450550b095a0a0a050c020454010355\n\nDoes this look right to you?\n\nBecause more than half the characters in this binary string are relatively low numbers and uppercase letters are at the bottom of the base64 table, it's reasonable to have an encoded string with many uppercase letters.\n\nThis is merely a guess, and must be validated by comparing multiple known input/output pairs or by actually reverse engineering the encoding/decoding function.\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Aug 20, 2016 at 23:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}