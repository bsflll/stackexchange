{
  "title": "Understand DLL function signature from ordinal",
  "link": "https://reverseengineering.stackexchange.com/questions/21281/understand-dll-function-signature-from-ordinal",
  "content": "I'm trying with ghidra to reverse a 32-bit proprietary application that uses mfc42.dll and I'm obtaining mixed results with respect to imported functions.\n\nTo my surprise the DLLs don't use names to export functions like the ELF format, but use the so called ordinals and you need another file (the corresponding .lib) to link them with the actual name.\n\nIn the binary there is a particular function that seems to call ordinal 4129 and ordinal 5710 corresponding to CString::Left(int) and CString::Right(int) respectively (ghidra internally uses an XML to track the correspondence function <-> ordinal).\n\nBut if I check the actual assembly of this function seems that these functions take a further argument (this can be deduced from the stack depth value that you can enable along the disassembly with ghidra). Obviously I'm taking into account the fact that the class instance is passed via the ecx register but that it's not relevant for the discussion, I'm interested in the arguments passed using the stack.\n\nTrying to reverse the dll itself, indeed ghidra finds out the signature as having two arguments but bad enough it cannot tell what is the actual name of these functions.\n\nSince mfc42.dll (I think) is a pretty standard library can anyone explain to me what is going on?\n\nTo add information, the application seems compiled using Visual Studio VC6, this can be deduced from the signature of the FuncInfo structure that is 0x19930520.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "2k",
  "tags": [
    "dll",
    "ghidra",
    "mfc",
    "pe32"
  ],
  "user": "gipi",
  "time": "May 5, 2019 at 20:24",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "Had a quick look in IDA which fetched debug symbols for mfc42.dll and reading the code, it seems like CString::Left actually takes 2 arguments of type CString, one as the source, one as the destination.",
      "time": null
    },
    {
      "user": "gipi",
      "text": "thanks @JohannAydinbas, could you share the path in your windows installation so that I can check myself? and possibly share what IDA shows you?",
      "time": null
    }
  ],
  "answers_data": []
}