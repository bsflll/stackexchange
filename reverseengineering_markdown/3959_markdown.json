{
  "title": "Convert MIPS assembly code to C? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/3959/convert-mips-assembly-code-to-c",
  "content": "Can someone help me convert the following MIPS code back to C?\n\nAssume that the variables f, g, h, i, and j are assigned to registers $s0, $s1, $s2, $s3, and $s4, respectively. Base address of the arrays A and B are in registers $s6 and $s7, respectively.\n\n```\nsll $t0, $s0, 2      # $t0 = f * 4\nadd $t0, $s6, $t0    # $t0 = &A[f]\nsll $t1, $s1, 2      # $t1 = g * 4\nadd $t1, $s7, $t1    # $t1 = &B[g]\nlw $s0, 0($t0)       # f = A[f]\naddi $t2, $t0, 4 \nlw $t0, 0($t2)\nadd $t0, $t0, $s0\nsw $t0, 0($t1)\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "24k",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "Pete",
  "time": "11 years ago",
  "comments": [
    {
      "user": "avgvstvs",
      "text": "What have you already come up with?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Seems like your h, i and j aren't used at all.\n\nHere is your code including my comments:\n\n```\nsll $t0, $s0, 2         # $t0 = f * 4\nadd $t0, $s6, $t0       # $t0 = &A[f]\nsll $t1, $s1, 2         # $t1 = g * 4\nadd $t1, $s7, $t1       # $t1 = &B[g]\nlw $s0, 0($t0)          # f = A[f]\naddi $t2, $t0, 4        # $t2=$t0+4 => $t2 points to A[f+1] now\nlw $t0, 0($t2)          # $t0 = A[f+1]\nadd $t0, $t0, $s0       # $t0 = $t0 + $s0  => $t0 is now A[f] + A[f+1]\nsw $t0, 0($t1)          # store the result into B[g]\n\n```\nSo the whole snipped could have been\n\n```\nB[g] = A[f] + A[f+1];\n\n```\nin C. Assuming, of course, that A and B are arrays of 4-byte integers.\n\n",
      "votes": "5",
      "user": "Guntram Blohm",
      "time": "Mar 25, 2014 at 21:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}