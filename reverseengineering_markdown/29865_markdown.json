{
  "title": "Why does this hooking function work and never cause a \"backwards\" jump?",
  "link": "https://reverseengineering.stackexchange.com/questions/29865/why-does-this-hooking-function-work-and-never-cause-a-backwards-jump",
  "content": "```\n//src = the place to write the hook, dst is the function you jump to, len is length \n//of stolen bytes (MUST fall on a boundray between instructions)\nBYTE* TrampHook32(BYTE* src, BYTE* dst, const DWORD len)\n{\n    //Make sure length is long enough for a jump\n    if (len < 5) return 0;\n\n    //Allocate memory to execute the stolen bytes\n    BYTE* gateway = (BYTE*)VirtualAlloc(0, len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n    //Copy the stolen bytes into allocated memory\n    memcpy_s(gateway, len, src, len);\n\n    //Calculate the relavibe address of the jump\n    uintptr_t gatewayRelativeAddr = src - gateway - 5;\n\n    //Add a jump at the end of the stolen bytes back to the original function\n    *(gateway + len) = 0xE9;\n\n    //Add the relative address into the jump\n    *(uintptr_t*)((uintptr_t)gateway + len + 1) = gatewayRelativeAddr;\n\n    //This inserts a jump to dst into the original function (pointed to by src.)\n    //Note: the function at dst must contain a jump to gateway otherwise this won't work\n    Detour32(src, dst, len);\n\n    //Return a pointer to the gateway\n    return gateway;\n}\n\n```\nThis function is from a GuidedHacking tutorial. The purpose is to hook a function without destroying its original functionality by putting all the bytes overwritten by the jump instruction  in a spot in virtual memory to be executed after the injected code finishes. The line uintptr_t gatewayRelativeAddr = src - gateway - 5; seems to imply that gateway will always be less than src considering theres no such thing as a negative relative address, but how can the guy who wrote this be confident that the address returned by VirtualAlloc will be less than the one taken in to the function as the src parameter? Or maybe an RVA that goes past the limits of a DWORD will simply underflow to a huge number which the CPU will see and also end overflowing to a reasonable number therefore making this valid? pls help\n\n",
  "votes": "2",
  "answers": 1,
  "views": "183",
  "tags": [
    "x86"
  ],
  "user": "EatingTechnobladesRemainsAt3am",
  "time": "Jan 13, 2022 at 4:27",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. Please turn to the help center or ask on our meta site if anything comes up.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "From the Intel 64 and IA-32 Architecture manual:\n\nBecause the jump used is relative (0xE9) it doesn't matter if it is negative. Because jmp is relative to the instruction and the instruction takes 5 bytes -5 is used.\n\nFurther explanation is here in Calculation of jmp address through subtraction\n\n",
      "votes": "2",
      "user": "chentiangemalc",
      "time": "Jan 13, 2022 at 6:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}