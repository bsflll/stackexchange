{
  "title": "Detect Debugger exploring Stack",
  "link": "https://reverseengineering.stackexchange.com/questions/11671/detect-debugger-exploring-stack",
  "content": "I am interested in the following technique to detect if a debugger is attached or not.\n\nhttp://spareclockcycles.org/2012/02/14/stack-necromancy-defeating-debuggers-by-raising-the-dead/\n\nHowever I tried the examples and they don't seem to work.\n\nDo the Windows Debug API modify the debugee stack when they are attached or when they are present?\n\nThanks !\n\n",
  "votes": "1",
  "answers": 1,
  "views": "308",
  "tags": [
    "anti-debugging"
  ],
  "user": "fred26",
  "time": "Jan 1, 2016 at 14:25",
  "comments": [],
  "answers_data": [
    {
      "content": "The results in the article rely on details which are specific to the version of Windows and to the debugger which is present at the time.  They have not been documented widely because they are so unreliable.\n\nWindows will inject a thread into an attached process in order to gather information about the process, which led to the \"DebugBreak overwrite\" technique to defeat it.\n\nThere are additional checks which are performed when a debugged process is launched, which can result in altered stack state, but the whole thing is just chasing ghosts.  The behavior of Windows could be changed at any time to reintroduce the behavior or change it in yet other ways.\n\n",
      "votes": "2",
      "user": "peter ferrie",
      "time": "Jan 1, 2016 at 16:45",
      "is_accepted": true,
      "comments": []
    }
  ]
}