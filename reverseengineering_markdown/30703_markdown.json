{
  "title": "Trying to learn more about unpacking",
  "link": "https://reverseengineering.stackexchange.com/questions/30703/trying-to-learn-more-about-unpacking",
  "content": "I am working on getting better with concepts of unpacking manually to get more clarity on understanding packing routines and decryption logic, so I am trying a few tutorials on PESpin! Previously I worked with UPX & ASPack, any tutorials apart from , will be appreciated, not looking for shortcuts like set a breakpoint, then jmp, then dump kind of stuffs . Thank you for reading this.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "550",
  "tags": [
    "x64dbg",
    "unpacking"
  ],
  "user": "ElementalX",
  "time": "Jul 25, 2022 at 20:40",
  "comments": [
    {
      "user": "ElementalX",
      "text": "Here's a link to the tutorial am following : reversing.be/article.php?story=20050726211417143",
      "time": null
    },
    {
      "user": "Mega Tonnage",
      "text": "tuts4you has/had many unpacking tutorials and an UnPackMe collection... you can still find them online.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You don't need to care about the decrypting routine because a single packed binary can contain many decrypting routines and to analyse every single one of them is time consuming. So you need to utilise the fact that a packed program is packed not from source code but from a compiled binary which mean one way or the other, the decryption routine has to decrypt to some original binary and jump to it to execute.\n\nThere are two step in an unpacking process. The first is to find the Original Entry Point (OEP) of the program and the second is try to recover lost data (iat, steal entrypoint).\n\nTo find the OEP you can relies on these informations:\n\nAfter you have found the OEP, you will need to recover obfuscated part of the packed binary (like IAT, stolen OEP, ...). Here is a hint for the IAT, you can trace where the obfuscated function which call the api and then build your own IAT and replace those call with the IAT call. And after that you can dump the binary and run it normally.\n\nThis is just a tip of the iceberg, each protector has it own unique way to pack and unpack, each version of the protector also has a new way too. So this is just a general tutorial but with each packed binary you have to adapt to the technique it use because there is no universal way to unpack a binary and it is mathematically proven to be true (check appendix of this paper: https://www.acsac.org/2006/papers/122.pdf).\n\n",
      "votes": "3",
      "user": "KishouYusa",
      "time": "Jul 27, 2022 at 7:42",
      "is_accepted": true,
      "comments": []
    }
  ]
}