{
  "title": "How does sysenter instruction in windows 7 work?",
  "link": "https://reverseengineering.stackexchange.com/questions/6288/how-does-sysenter-instruction-in-windows-7-work",
  "content": "How does the sysenter instruction work?\nWhat instruction is called after sysenter?\nIs the next instruction saved in a register?\n\n```\nmov     edx,esp\nsysenter\n\n```\n",
  "votes": "3",
  "answers": 2,
  "views": "6k",
  "tags": [
    "disassembly",
    "windows",
    "assembly",
    "kernel-mode"
  ],
  "user": "user2522767",
  "time": "Sep 23, 2014 at 10:24",
  "comments": [
    {
      "user": "evlncrn8",
      "text": "it goes into ring 0 typically with edx pointing to the parameters and eax being the 'id' of what to do",
      "time": null
    },
    {
      "user": "perror",
      "text": "possible duplicate of How does sysenter work under Linux?",
      "time": null
    },
    {
      "user": "perror",
      "text": "I am suspecting that sysenter works the same for Linux and Windows... But, I didn't try with Windows, so you need to try out.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@perror: the linked question explains how to use sysenter to call Linux syscalls. It does not explain how systenter works on the CPU level.",
      "time": null
    },
    {
      "user": "perror",
      "text": "@Igor : Right, I probably misunderstood the question. Sorry.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here is a perfect explanation how sysenter works: http://www.osronline.com/article.cfm?id=257\n\nIn essence:\nAll native API calls from User Mode have a body that simply loads an index into EAX, executes SystemCallStub, and returns\n\nSystemCallStub saves a pointer to the top of the User Mode stack into EDX and executes a SYSENTER instruction\n\nSYSENTER disables interrupts, switches the thread into Kernel Mode and executes the instruction located in the SYSENTER_EIP_MSR (which on XP SP1 is KiFastCallEntry)\n\nKiFastCallEntry builds a trap frame so it knows where to go when returning back to User Mode, enables interrupts, and jumps into KiSystemService\n\nKiSystemService, amongst doing other things, copies the parameters from the User stack (pointed to by EDX) and takes the value previously stored in EAX and executes the function located at KiServiceTable[EAX]\n\nThe native API now executes in Kernel Mode with the previous mode of the thread set to User Mode\n\n",
      "votes": "9",
      "user": "pHiL",
      "time": "Sep 23, 2014 at 11:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "user2522767",
          "text": "exactly can you say where save address eiP after call sysenter in returning to user mode?in stack or register?",
          "time": null
        },
        {
          "user": "pHiL",
          "text": "a trap frame is used and setup for EIP after returning to user-mode. read about how trap frames work exactly",
          "time": null
        },
        {
          "user": "user2522767",
          "text": "Did you mean Nowhere saving? can you show me a reference about trap frames work? tanx",
          "time": null
        },
        {
          "user": "pHiL",
          "text": "the trap frame is set in kernel-mode so you cant modify it from user-mode. If you want to learn more, search for \"interrupts, traps, exceptions\"",
          "time": null
        }
      ]
    },
    {
      "content": "The SYSENTER instruction affects many registers, but most importantly it sets EIP to the value of the SYSENTER_EIP_MSR register (in IA-32 terminology). At boot-time, Windows sets SYSENTER_EIP_MSR to the address of ntoskrnl!KiFastCallEntry().\n\nSo at a high-level, SYSENTER \"jumps\" to ntoskrnl!KiFastCallEntry().\n\nFor more details, see http://www.codeguru.com/cpp/misc/misc/system/article.php/c8223/%22System-Call-Optimization-with-the-SYSENTER-Instruction.htm and http://trapframe.org/just-enough-kernel-to-get-by-2/.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Sep 23, 2014 at 11:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}