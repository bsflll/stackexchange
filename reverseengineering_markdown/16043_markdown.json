{
  "title": "How to monitor specific variables in a running process?",
  "link": "https://reverseengineering.stackexchange.com/questions/16043/how-to-monitor-specific-variables-in-a-running-process",
  "content": "I would like to monitor, record, specific variables in an application but I am not sure what is the right way to approach this problem.\n\nThe application is a mix of C(5%) and C++(95%) and it is relatively big, around 5 million lines of code. The target OS is CentOS 7 and my application is always compiled with debugging flags (-g3 -ggdb) and I can add/remove flags if necessary to achieve what I am looking for. In the ideal scenario I don't want to instrument the code in the main application, mainly due to the size of the app, and/or add any overhead to my application.\n\nI have not started implementing anything yet but I have two different approaches:\n\nI am still not sure about how I can handle different data types, maybe I can somehow infer the data type by parsing the main program but I am now sure.\n\nI understand that the OS won't let me easily access the memory of another process, but there should be a trick. What is that trick?\nIs there a more straight forward way of doing this?\nWhat is the overhead associated with this?\nIs there a way to also write into a variable?\n\nThe second approach is more interesting because everything is in its address space, so no trick is requuired. How ever I still have to know the type of the variable.\n\nI am sure others have had similar problems but I don't know what this process is called. What should I search for to get more information? I understand this is a very general question, any pointers are highly appreciated.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "895",
  "tags": [
    "binary-analysis",
    "c++",
    "memory"
  ],
  "user": "Ali",
  "time": "Aug 9, 2017 at 7:27",
  "comments": [
    {
      "user": "blabb",
      "text": "should it be inferred that a debugger like gdb is not an option thereby eliminating ptrace apis in the second program you propose to write",
      "time": null
    },
    {
      "user": "Ali",
      "text": "@blabb I honestly did not consider using a debugger. I have no problem with using a debugger as a long as the overhead remains low.",
      "time": null
    },
    {
      "user": "conio",
      "text": "You want less overhead and therefore discard binary instrumentation and source-level instrumentation and prefer debuggers and network access? Can you explain how the conclusion follows from the premise?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "well if you can use a debugger then you can employ a variety of monitoring techniques.\nThe example below is for a windows app being debugged by windbg.   \n\nbut gdb is equally versatile and you should be able to adapt GDB to do what is being done here \n\ncalc is windows calculator it can work in the following radix hex, dec, oct and bin \n\nit stores the radix in a global variable named g_nRadix\n\n```\n0:004> x /v calc!g_nRadix\npub global 00524058             0 calc!g_nRadix = <no type information>\n\n```\nnow assume i want to monitor this variable and log when it is written to \n\ni can write a small txt file that contains a few commands and run it on starting the app with windbg as below \n\nthe txt file that contains the debugger commands (aka script file)\n\n```\nC:\\>cat monvar.txt\ng @$exentry\nba w 4 calc!g_nRadix \".echotime;dd calc!g_nRadix l1;gc\"\ng\nC:\\>\n\n```\ndata breakpoints are context specific so i execute until Address Of Entry Point (similar to _start function in linux app)  first line g @$exentry    \n\nwhen i am at the the entry point i set a write data breakpoint on this variable and run the executable  second and third line \n\ni start the app inside the debugger as shown in the title of command prompt in the screens shot below \n\nand when ever i change the radix in the gui\n\nthe debugger will print a time stamp and the content of the variable i am monitoring and keep running \n\n\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Aug 10, 2017 at 18:19",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "What you are looking for is called value profiling. It's a technique that aims at logging the values of certain variables (like loop bounds) in order to extract all possible values and use them to fine tune the code for better performance.\n\nOne thing you should know, once you compile your code, debug info or not, there's no more notion of variable. And, if you use a compiler optimization flag, and you should, variables will be optimized out.\n\nThis said, your best option is either to go through your code and put prints manually (even through a parsing script); or you can go with a compiler plug-in.\n\nIf you are using GCC, I would recommend writing a plug-in guided by your own directive i.e. #pragma watch var which then instructs the compiler to instrument at the GIMPLE level with a function from a library - let's call it watch_var.so. This library's functions look like the following prototype : dump_int_var_value(FILE *fd, char *var_name, int var_value). \n\nOnly at the compiler level can you cleanly automate this process given that you'll know when the variable is declared, when it is used (read & written), and its type. \nThe pragma directive mentioned above can come in two flavors : \n\n1) Placed before variable declaration, var1 & var2 will be watched.\n\n```\n #pragma watch var\n int var1, var2;\n\n```\n2) Placed at the beginning of a block, x and y will be watched in the first example. And, only i will be watched in the second one. \n\n```\n #pragma watch var \n int function1(int a, int b)\n {\n     int x = a, y = b;\n     return x + y;\n }\n\n #pragma watch var\n if (a < b)\n {\n     for (int i = 0; i < n; i++)\n        t[i] = a * i;\n }\n\n```\nFrom here, I guess you get the idea. \n\nFrom where I stand, I see this as the only clean solution to handling variables without having to re-invent the wheel or delve into complicated tricks.\n\n",
      "votes": "0",
      "user": "yaspr",
      "time": "Oct 9, 2017 at 20:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}