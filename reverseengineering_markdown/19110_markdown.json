{
  "title": "How to protect memory area, not segment or page!",
  "link": "https://reverseengineering.stackexchange.com/questions/19110/how-to-protect-memory-area-not-segment-or-page",
  "content": "I want to protect the certain memory area, like 0x12345678 ~ 0x12345679.\nso if another thread accesses to that area, I want to generate exception.\n\nTo solve my problem, I've found and used VirtualProtectEx win32 api.\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa366899(v=vs.85).aspx\n\nAnd my code looks as follows.\n\n```\n...\nDWORD dwA = 0xFFFFFFFF;\nDWORD dwC = 0xCCCCCCCC;\nint main()\n{\n    DWORD dwProtect = PAGE_READONLY;\n\n    HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, TRUE, GetCurrentProcessId());\n    VirtualProtectEx((HANDLE)handle, (PVOID)&dwA, 4, dwProtect, &dwProtect);\n    DWORD dwB = dwA;\n    dwC = 0x00000000;\n    dwA = 0x00000000;\n...\n\n```\nHere, I set read-only protection to dwA's memory.\nBut at dwC = 0x00000000, I got exception.\nI think it's because VirtualProtectEx protects the page, not the certain memory.\n\nBut I just want to protect only dwA's memory.\n\nCan anybody please help me by leading me to correct direction?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "88",
  "tags": [
    "windows",
    "c++",
    "c",
    "virtual-memory"
  ],
  "user": "Luis Bergmann",
  "time": "Aug 20, 2018 at 16:50",
  "comments": [],
  "answers_data": [
    {
      "content": "The protections are supported only on page granularity by the CPU and you cannot change that. What you can do is in  your exception handler check which address generated the fault, and if it's not the variable you want to \"protect\", restore permissions to the original value, single-step to allow the write be performed, then disable writes again. This is complicated and pretty slow so should be used only when necessary.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Aug 20, 2018 at 17:58",
      "is_accepted": true,
      "comments": []
    }
  ]
}