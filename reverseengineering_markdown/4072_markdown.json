{
  "title": "How to modify/replace a non exported function in a native code dll",
  "link": "https://reverseengineering.stackexchange.com/questions/4072/how-to-modify-replace-a-non-exported-function-in-a-native-code-dll",
  "content": "I disassembled a misbehaving dll with IDA and identified the faulty code. Now I want to go one step further and replace the function with a self-written, hopefully less faulty one. The dll I'm talking about is written in C/C++ and the function in question is not exported.\n\nWhat would be a practicable way to overwrite/replace this function along with relocation information and all? Everything I found on the net was about rebuilding MSIL dll's.\n\nMy guess would be to write a new function in assembler, assemble it, create a\nnew section in the dll, put the code there and somehow introduce a call to the new\nfunction at the beginning of the original implementation. But I don't know these\nsteps would exactly look or how to merge the relocation info etc.\nOr is there a better solution?\nAre there any primers or tools to help me get such a thing done?\n\nEdit: Meanwhile I found articles about similar topics\n\n",
  "votes": "8",
  "answers": 2,
  "views": "3k",
  "tags": [
    "dll"
  ],
  "user": "user2011659",
  "time": "Apr 16, 2014 at 10:59",
  "comments": [],
  "answers_data": [
    {
      "content": "I think you have 4 options here:\n\nThe option #4 is the best because it allows you to write in high level code your logic and you only need to write in assembler the LoadLibrary (or dlopen), GetProcAddress and the final calling code. And only once. Then you can modify as many times as you want the library with your code.\n\n",
      "votes": "11",
      "user": "joxeankoret",
      "time": "Apr 17, 2014 at 7:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "user2011659",
          "text": "Could you please clarify some points for me? Ad 1-3: Is it right that I can't use absolute addresses for jumps without also modifying relocation information? So how do I jump into another section or refer to data sections etc? Ad 4 and general: Are there any papers/books about that?",
          "time": null
        },
        {
          "user": "joxeankoret",
          "text": "You can use absolute addresses as long as you don't move the sections (otherwise, except for a DLL, you would need to relocate all the code). As for papers/books on this topic, I don't know, sorry.",
          "time": null
        }
      ]
    },
    {
      "content": "After putting more thorough thinking into this I decided to go with option 1 in joxeankoret's list. As the main focus of the fix is reordering some actions and the code is interspersed with debug logging calls I might get away with some pc relative short jumps overwriting the debug code.\n\nSome additional info to extend joxeankoret's answer and my comment:\n\nOne hardcore solution to the absolute address problem seems to be to completely remove the relocation section.\n\nAnother possiblity is to use the Relocation Section Editor to manually edit/add/remove the relocations.\n\nRegarding option 4, there seems to be the possibility to edit the PE import address table to omit the LoadLibrary/GetProcAddress code.\n\n",
      "votes": "0",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}