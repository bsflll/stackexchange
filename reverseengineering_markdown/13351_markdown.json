{
  "title": "Call instruction - preceding ?@_ in references?",
  "link": "https://reverseengineering.stackexchange.com/questions/13351/call-instruction-preceding-in-references",
  "content": "Seems to be a question of no importance, but I'm just curious: Is there a deeper meaning of the preceeding (single/double) ?-marks, @-signs or __ underscores in these different call instructions?\n\n```\ncall ??2@YAPAXI@Z\ncall ??0CAdviseObject@CBLObject@@QAE@PAUIDispatch@@PAVCBLInstance@@@Z\ncall ?StartAutoReconnect@CBLObject@@IAEXIH@Z\ncall @__security_check_cookie@4\ncall __SEH_epilog\n\n```\n",
  "votes": "0",
  "answers": 2,
  "views": "470",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "call"
  ],
  "user": "knx",
  "time": "Aug 24, 2016 at 14:48",
  "comments": [],
  "answers_data": [
    {
      "content": "The leading ? identifies a C++ name mangled symbol. Two ?? signify operators, constructors, destructors, constant strings, and various compiler generator functions. For example ??0 is a constructor. This site has a good breakdown of the mangling pieces used by MSVC.\n\nA leading underscore _ can either be due to the calling convention or due to the CRT/compiler identification standard. They will prefix all of their symbols with two leading underscores __ as a way to help prevent name collisions:\n\n",
      "votes": "3",
      "user": "josh poley",
      "time": "Aug 24, 2016 at 16:13",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "These are so-called \"mangled\" or \"decorated\" names. You can use undname utility from Visual Stduio to demangle them:\n\n```\nvoid * __cdecl operator new(unsigned int)\npublic: __thiscall CBLObject::CAdviseObject::CAdviseObject(struct IDispatch *,cl\nass CBLInstance *)\nprotected: void __thiscall CBLObject::StartAutoReconnect(unsigned int,int)\n\n```\nFor more info: Wikipedia, MSDN.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Aug 24, 2016 at 15:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}