{
  "title": "Proprietary 3D Format Reverse Engineering: What Could These Numbers And Matrices Represent?",
  "link": "https://reverseengineering.stackexchange.com/questions/29070/proprietary-3d-format-reverse-engineering-what-could-these-numbers-and-matrices",
  "content": "I'm trying to reverse engineer a model format from an older Russian game (Pathologic) with limited success. It is a proprietary model format not recognized by any converters/editing tools (believe me, I've tried! someone on the fan forums confirmed this with the person behind the engine, also). I'd like to be able to read the models into a potential open-source recreation of the original engine. The original game uses Direct3D and is from 2005, so I read up on relevant docs to get a start. Unfortunately, it's not the \"x\" model format.\n\nWhat I've got so far (for a simple mesh):\n\nThings I'm struggling to understand (least to most important)\n\nAttached is a very simple mesh (way under 1kB) I'm studying before moving on to the more complex ones. I believe it to be a simple textured plane. I've started with a similar mesh that was in XY plane, this one seems to be oriented a bit more arbitrarily. Since it's a plane, I assume it has 4 vertices and 2 faces.\n\nSimple Mesh\n\nFile's structure as far as I can understand it\n\nAfter that it becomes a mix of 12-element float matrices and the recurring 3x floats with some padding/magic numbers between them.\n\n\n\nI'd appreciate any and all help with answering my questions/helping with the bullet points I'm struggling on. I could also provide other mesh examples as needed.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "435",
  "tags": [
    "binary-analysis",
    "file-format",
    "binary-format"
  ],
  "user": "Xtal44",
  "time": "Jul 30, 2021 at 23:44",
  "comments": [
    {
      "user": "mindoverflow",
      "text": "Am I reading these correctly? pastebin.com/4qLcryW8",
      "time": null
    },
    {
      "user": "Xtal44",
      "text": "@mindoverflow almost, but not exactly. Between the \"mat?\" float array and list 3 float array there's 73 bytes of data I cannot identify. List 3 should start at 0xC0 (alternatively, offset +192). That would place vertex 0's X coordinate at 0xCC. 0xCC is 7D, 0xCD is 00, giving us 125 (a word, Little Endian). I've added the way I mapped the file out in a hex editor to the original post, I didn't know I could attach images before.",
      "time": null
    },
    {
      "user": "mindoverflow",
      "text": "I accidentally read 4-byte uint16s, which is nonsense. This should be correct: pastebin.com/bYjjerNR   I'm afraid I can't help you any further here due to my limited knowledge of 3D formats, I'd suggest parsing a lot of headers and looking for correlations.",
      "time": null
    },
    {
      "user": "Xtal44",
      "text": "@mindoverflow thank you for trying your hand at it!",
      "time": null
    },
    {
      "user": "mindoverflow",
      "text": "I had an idea just now and tried to verify it. It's a bit off rouding-wise, but the \"matrices\" could actually be lists of normalized surface normals. That would make a lot more sense than the transformation matrices, too. Either way, could you upload a model that has some more tris?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm giving up for good. If you say that there's 21 .mesh files for 21x the same object in the scene, then chances are good that there's a lot more non-mesh data in this file (as you said, baked shadow info, world pos, colliders, actor references, possibly animation data, ... Sounds unusual to me, but there's probably a reason to put all of this into one file).\n\nI was able to find two zlib compressed streams in the actor file at 0x4B and 0x11C using binwalk, but that's about it. The mesh files are way more complex than they look at first glance...\n\nYou might get some more info out of the files by changing random values and observing the effects, but chances are slim that you find out how these files really work without debugging or reverse engineering the executable.\n\n",
      "votes": "1",
      "user": "mindoverflow",
      "time": "Aug 9, 2021 at 6:08",
      "is_accepted": false,
      "comments": [
        {
          "user": "Xtal44",
          "text": "Thank you very much for your efforts! I will look into the zlib compressed streams, also. Reverse engineering the executable is not out of the question - I'm already doing so to figure out the proprietary script format (which also appears to be compiled to some kind of a proprietary assembly language, with C++ classes for each instruction in the main engine DLL) the game uses. Thanks for the suggestions.",
          "time": null
        }
      ]
    }
  ]
}