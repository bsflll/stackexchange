{
  "title": "gdb shows that EBP contains a value other than some address(which is what it is supposed to contain). How is this possible?",
  "link": "https://reverseengineering.stackexchange.com/questions/22524/gdb-shows-that-ebp-contains-a-value-other-than-some-addresswhich-is-what-it-is",
  "content": "I am fairly new to RE and Binary Exploitation, I have learned basic assembly instructions for Binary Exploitation and I was doing Protostar exercises (stack0) in which I have to simply overflow the buffer variable. Disassembly of main function is:-\n\n```\n(gdb) disas main\nDump of assembler code for function main:\n0x080483f4 <main+0>:    push   ebp\n0x080483f5 <main+1>:    mov    ebp,esp\n0x080483f7 <main+3>:    and    esp,0xfffffff0\n0x080483fa <main+6>:    sub    esp,0x60\n0x080483fd <main+9>:    mov    DWORD PTR [esp+0x5c],0x0\n0x08048405 <main+17>:   lea    eax,[esp+0x1c]\n0x08048409 <main+21>:   mov    DWORD PTR [esp],eax\n0x0804840c <main+24>:   call   0x804830c <gets@plt>\n0x08048411 <main+29>:   mov    eax,DWORD PTR [esp+0x5c]\n0x08048415 <main+33>:   test   eax,eax\n0x08048417 <main+35>:   je     0x8048427 <main+51>\n0x08048419 <main+37>:   mov    DWORD PTR [esp],0x8048500\n0x08048420 <main+44>:   call   0x804832c <puts@plt>\n0x08048425 <main+49>:   jmp    0x8048433 <main+63>\n0x08048427 <main+51>:   mov    DWORD PTR [esp],0x8048529\n0x0804842e <main+58>:   call   0x804832c <puts@plt>\n0x08048433 <main+63>:   leave  \n0x08048434 <main+64>:   ret    \nEnd of assembler dump.\n\n```\nI set a break point on ret instruction and run the program but when I examine the stack in gdb, it shows this output(overflow after 90 A's): \n\n```\n(gdb) info registers\neax            0x29 41\necx            0xb7fd84c0   -1208122176\nedx            0xb7fd9340   -1208118464\nebx            0xb7fd7ff4   -1208123404\nesp            0xbffff7bc   0xbffff7bc\nebp            0x41414141   0x41414141\nesi            0x0  0\nedi            0x0  0\neip            0x8048434    0x8048434 <main+64>\neflags         0x200246 [ PF ZF IF ID ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n\n```\nWhen looking at ebp I am really curious to know that what happened that caused ebp to have value 0x41414141? What I understand is when leave isntruction is executed stack frame is destroyed and x/x $esp is 0x41414141 which makes sense and x/x $ebp is Cannot access memory at address 0x41414141\nso how does value of ebp changed to 0x41414141?\n\nPS: I already solved that exercise but while examining the stack I was not getting how ebp got changed and feel free to edit the question tag because I am not sure what tag will be appropriate.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "653",
  "tags": [
    "binary-analysis",
    "gdb"
  ],
  "user": "daya",
  "time": "Nov 12, 2019 at 16:59",
  "comments": [],
  "answers_data": [
    {
      "content": "The leave instruction is equivalent to:\n\n```\nmov esp, ebp\npop ebp\n\n```\nThe second instruction pops the value on the top of the stack and stores it in ebp. In the case of a stack-based buffer overflow, your stack layout looks like:\n\n```\n<--- low addresses           high addresses --->\n[ buffer being overflowed ][saved EBP][RET ADDR]\n                           ^\n\n```\nWhen leave is executed, the mov esp, ebp instruction first restores esp to point at the marked location in the diagram above, then pops a value off the stack into ebp. So if you've overflowed the buffer with 'AAAA...', both the saved ebp and the return address will be set to 0x41414141.\n\n",
      "votes": "4",
      "user": "Brendan Dolan-Gavitt",
      "time": "Nov 12, 2019 at 20:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "daya",
          "text": "Thanks for the help, but why we cannot access the memory location where ebp is pointing now?",
          "time": null
        },
        {
          "user": "Brendan Dolan-Gavitt",
          "text": "Unless by coincidence 0x41414141 happens to be a memory region that the program was already using, then there's no reason to expect it to be accessible. 0x41414141 is just the \"AAAA\" you wrote to the stack (interpreted as a 32-bit integer).",
          "time": null
        },
        {
          "user": "daya",
          "text": "That clarifies it, thanks for explanantion",
          "time": null
        }
      ]
    },
    {
      "content": "For the CPU, ebp (and even esp most of the time) are not really different from eax, ebx and other registers. They can contain any data, not necessarily valid addresses. You only get problems (faults/exceptions) if you actually try to execute instructions that use those registers as addresses (directly or indirectly), or, in case of ESP, an interrupt happens.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Nov 12, 2019 at 21:41",
      "is_accepted": false,
      "comments": []
    }
  ]
}