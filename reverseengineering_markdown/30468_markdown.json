{
  "title": "What change to the source code would produce an LT compare rather than an OLT compare in MIPS assembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/30468/what-change-to-the-source-code-would-produce-an-lt-compare-rather-than-an-olt-co",
  "content": "I need some help reverse engineering a function in MIPS assembly. It was compiled for the PlayStation 2's EmotionEngine CPU. My goal is to produce a matching decomp of the function; it is the proof-of-concept for a project of mine that I am hoping will get the ball rolling for PS2 decompilation.\n\nThe function is very simple; it takes two floats, g and absLimit, and limits the absolute value of g to absLimit.  Here is the C++ source code I have written so far (not matching):\n\n```\n// Limits the absolute value of g to absLimit\nfloat GLimitAbs(float g, float absLimit)\n{\n    float result = g;\n    if (g > absLimit)\n        result = absLimit;\n    else if (g < -absLimit)\n        result = -absLimit;\n    return result;\n}\n\n```\nHere you can see the target assembly on the left, and the current compiled source on the right. The compiler is ee-gcc 2.96 with standard optimization (-O2).\n\n\n\nAs you can see, the target assembly has this confounding pattern of c.lt.s instructions followed by nops, whereas my code produces c.olt.s instructions sans nops.\n\nMy research has not turned up much as there are very few resources for PS2 reversing. One thing I've learned is that the OLT compare \"does not signal an exception for unordered values\" while the LT compare does. However, I don't fully understand what that means or what kind of code pattern would result in one over the other.\n\nIs there some change to the source that I'm missing that would produce a matching decomp of the function? Or could perhaps the only explanation be that I'm using the wrong compiler/assembler/etc? Any help would be appreciated.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "105",
  "tags": [
    "assembly",
    "decompilation",
    "c++",
    "mips",
    "gcc"
  ],
  "user": "Zac",
  "time": "Jun 3, 2022 at 6:34",
  "comments": [
    {
      "user": "Michael Karcher",
      "text": "I suspect the difference is rooted in different compiler flags. The missing NOPs are an indicator the right side is better optimized. Also OLT is faster than LT. Try compiling with less optimization than O2, and play around with math modes like -ffast-math or its negation.",
      "time": null
    }
  ],
  "answers_data": []
}