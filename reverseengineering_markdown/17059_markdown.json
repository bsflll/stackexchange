{
  "title": "How to set bp in a dll which loads later in pykd?",
  "link": "https://reverseengineering.stackexchange.com/questions/17059/how-to-set-bp-in-a-dll-which-loads-later-in-pykd",
  "content": "I am using pykd to debug an application which loads a dll only when some condition is met. How do I set a breakpoint in the dll which has not loaded yet in pykd such that my handler gets the callback? Currently my code looks something like this\n\n```\nclass ExceptionHandler(pykd.eventHandler):\n    def __init__(self):\n        pykd.eventHandler.__init__(self)\n\n    def onException(self, exceptionInfo):\n        return pykd.eventResult.NoChange\n\n    def onBreakpoint(self, id):\n        return pykd.eventResult.NoChange\n\n    def onThreadStart(self):\n        return pykd.eventResult.NoChange\n\n    def onThreadStop(self):\n        return pykd.eventResult.NoChange\n\n    def onLoadModule(self, base, name):\n        print \"onLoadModule \" + name\n        # sys.stdout.flush()\n        # if name == \"test_module\":\n        #     # test_module = pykd.module(\"test_module\")\n        #     # test_module.reload()\n        #     # pykd.setBp(test_module.offset('test_function'), breakCount)\n        #     # print pykd.dbgCommand(\"bl\")\n        #     print pykd.dbgCommand('bp test_module!test_function \"r;gc\"')\n        #     # print pykd.dbgCommand(\"bl\")\n        #     # print \"Breakpoint Set %x\" % (test_module.offset('test_function'))\n        #     print \"Breakpoint Set\"\n        return pykd.eventResult.NoChange\n\n    def onUnloadModule(self, base, name):\n        return pykd.eventResult.NoChange\n\npykd.initialize()\npykd.handler = ExceptionHandler()\npykd.startProcess(\"testmydelayedload.exe %s\\\\%s\" % (os.getcwd(), sys.argv[1].strip()))\nalloc_module = pykd.module(\"ntdll\")\nalloc_module.reload()\nb0 = pykd.setBp(alloc_module.offset('RtlAllocateHeap')+0xe6, breakCount)\nb1 = pykd.setBp(alloc_module.offset('RtlFreeHeap'), breakCount)\npykd.loadExt(\"C:\\\\Program Files\\\\Windows Kits\\\\10\\\\Debuggers\\\\x86\\\\winext\\\\ext.dll\")\npykd.go()\npykd.killAllProcesses()\n\n```\nI have tried to manually set the breakpoint using pykd.dbgCommand but the callback is not triggered in that case. I tried to change the return value of onLoadModule to other than pykd.eventResult.NoChange while setting a bp. What am I missing?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "513",
  "tags": [
    "windows",
    "windbg",
    "pykd"
  ],
  "user": "sudhackar",
  "time": "Dec 28, 2017 at 8:15",
  "comments": [
    {
      "user": "Lieven Keersmaekers",
      "text": "Change bp to bu",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "@LievenKeersmaekers setting a bp with pykd.dbgCommand won't trigger the callback as I said. I want something which uses the pykd's api.",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "I just figured it out, the variable storing the bp should be global otherwise it won't work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I just figured it out, the variable storing the bp should be global otherwise it won't work. It should be alive out of the class's context.\n\n```\ndef onLoadModule(self, base, name):\n        global test_function, test_module\n        print \"onLoadModule \" + name\n        if name == \"jscript\":\n            test_module = pykd.module(\"jscript\")\n            test_module.reload()\n            test_function = pykd.setBp(test_module.offset('test_function'), breakCount)\n            print \"Breakpoint Set %x\" % (test_module.offset('test_function'))\n        return pykd.eventResult.NoChange\n\n```\n",
      "votes": "0",
      "user": "sudhackar",
      "time": "Dec 28, 2017 at 11:40",
      "is_accepted": true,
      "comments": []
    }
  ]
}