{
  "title": "ZwQueryInformationThread - what is it exactly?",
  "link": "https://reverseengineering.stackexchange.com/questions/6153/zwqueryinformationthread-what-is-it-exactly",
  "content": "By analyzing a piece of assembly code of a Trojan, I found a string \"ZwQueryInformationThread\". I assume that it is an anti-debugging technique because the process terminates after hitting that line. \n\nBut, I could not find any good explanation for \"ZwQueryInformationThread\" stopping the process. For me, the purpose is clear: it tries to make my work harder, but I would like to get more information about that. \n\nSo, my question would be:\n\n",
  "votes": "2",
  "answers": 3,
  "views": "2k",
  "tags": [
    "anti-debugging"
  ],
  "user": "user3097712",
  "time": "Sep 2, 2014 at 6:20",
  "comments": [],
  "answers_data": [
    {
      "content": "I believe what you are seeing is the NtSetInformationThread detection of anti-anti-debug tools. The technique is documented at https://ntquery.wordpress.com/2014/03/29/anti-debug-ntsetinformationthread/#more-6.\n\n",
      "votes": "1",
      "user": "broadway",
      "time": "Sep 2, 2014 at 0:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "its one of those 'multipurpose' api queries, where the parameters dictate what information you want (for example, thread exit code, thread entrypoint, if a thread is debuggable and so on)..\n\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms684283%28v=vs.85%29.aspx\n\nthe threadinfoclass is the 'key' parameter, which isnt documented too well, so like all good reversers, we hope that reactos has a reference.. and.. it does\n\nhttp://doxygen.reactos.org/d8/dfb/xdk_2pstypes_8h_ae45f91e457cfd1075daa9a900902a16d.html\n\nso all you then need to figure out is the size of ThreadInformationLength required for the threadinfoclass you want is, so you just do it in the usual fashion of calling it with a small buffer, then checking the return value from the call (if it worked, its NT_SUCCESS which is zero), otherwise it'll be another value, typically one indicating the buffer was too small (in which case allocate a buffer of size of the (ReturnLength) parameter you passed and call again... \n\nhope that helps\n\nedit : just remembered this...\n\nThreadHideFromDebugger is a commonly used anti debug, it has one caveat however, (parameter passed is a pointer to a TRUE (dword)...), once this is done, passing false etc.. will NOT work.. ie: once the call is successful for that thread, the hide from debugger can not be undone)\n\n",
      "votes": "1",
      "user": "evlncrn8",
      "time": "Sep 2, 2014 at 0:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "ZwQueryInformationThread is low-level API with deals with querying information about threads.\nMalware related you can hide from a debugger just like evlncrn8 said.\nYou could also use this to hide a thread like a rootkit would by hooking the API.\n\nHow about you set a breakpoint on all the common exit APIs and look back to what actually calls the exit so you can work your way back to what's actually happening? There no point just looking at ZwQueryInformationThread and guessing it's that API.\n\nBreakpoint the following:\n\nSoon as it exits you'll able to follow it all back to whats actually closing the program.\n\n",
      "votes": "1",
      "user": "Paul",
      "time": "Sep 2, 2014 at 7:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}