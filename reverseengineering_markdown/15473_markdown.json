{
  "title": "Why is IDA call analysis failing?",
  "link": "https://reverseengineering.stackexchange.com/questions/15473/why-is-ida-call-analysis-failing",
  "content": "I am trying to reverse an ELF (C++) binary using IDA v6.95. Decompiler complains that the call analysis is failing. I am attaching the IDB database. What can I do to fix the IDB?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "14k",
  "tags": [
    "ida",
    "decompiler"
  ],
  "user": "sherlock",
  "time": "Jun 3, 2017 at 9:26",
  "comments": [],
  "answers_data": [
    {
      "content": "Call analysis failed at: 08048B19 \n\nThe instruction at that location:\n\n```\ncall __ZNSaIcEC1Ev ; std::allocator<char>::allocator(void)\n\n```\nNow decompile this function: \n\n```\nint __stdcall std::allocator<char>::allocator(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) {\n    return std::allocator<char>::allocator(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n```\nNotice that hexrays has the function signature wrong, it expects too many arguments. After changing it to:\n\n```\nvoid __stdcall std__allocator_char___allocator()\n\n```\nThe main functon will decompile.\n\nNote that hexrays doesn't accept the template arguments <char> and namespace specifier std:: in a function prototype.\nSince changing the prototype does not rename the function you can replace the function name with any name, as long as ida considers it valid.\n\n",
      "votes": "2",
      "user": "Willem Hengeveld",
      "time": "Jun 6, 2017 at 6:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "Doesn't work for me. Can you please share your IDB?",
          "time": null
        },
        {
          "user": "Willem Hengeveld",
          "text": "ah, i made a typo: the function signature should be: void __stdcall std__allocator_char___allocator()  without the < and >",
          "time": null
        }
      ]
    },
    {
      "content": "the IDB database can not open now.\n\nlist my case for other refer:\n\nin IDA:\n\nin some_parent_function, do F5=decompile, report error:\n\nDecompilation failure: 9D6ADDC: call analysis failed\n\n\n\n->\n\n->\n\n```\nvoid __usercall sub_9D6B278(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, ...)\n{\n  va_list va; // [xsp+50h] [xbp+50h]\n\n  va_start(va, a10);\n  _Block_object_dispose(va, 8);\n}\n\n```\nmeans:\n\nyou should look inside the error callee function assembly code\n\ntry to understand it real used parameters (and better to understand it internal logic)\n\nhere related assembly code is:\n\n```\n__text:0000000009D6B278 ; =============== S U B R O U T I N E =======================================\n__text:0000000009D6B278\n__text:0000000009D6B278\n__text:0000000009D6B278 ; __int64 __fastcall sub_9D6B278(int, char)\n__text:0000000009D6B278 sub_9D6B278       ; CODE XREF: -[NSObject bdp_addObserverForKeyPaths:identifier:options:context:task:]+1D8↑p\n__text:0000000009D6B278                                         ; __text:0000000009D6AF04↑p\n__text:0000000009D6B278\n__text:0000000009D6B278 arg_50          =  0x50\n__text:0000000009D6B278\n__text:0000000009D6B278                 ADD             X0, SP, #arg_50 ; void *\n__text:0000000009D6B27C                 MOV             W1, #8  ; int\n__text:0000000009D6B280                 B               __Block_object_dispose\n__text:0000000009D6B280 ; End of function sub_9D6B278\n\n```\nand can figure out: only two real parameter\n\nso here change function to correct two parameters:\n\ncursor selected function name -> right click -> Set Type (Y)\n\n\n\nchange from (too many, wrong number of parameter) :\n\nto (correct number of parameter):\n\nthen decompiled is OK:\n\n\n\n",
      "votes": "0",
      "user": "crifan",
      "time": "Jun 23, 2022 at 1:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}