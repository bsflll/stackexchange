{
  "title": "idapython - Determine if item is code or data",
  "link": "https://reverseengineering.stackexchange.com/questions/13449/idapython-determine-if-item-is-code-or-data",
  "content": "I need to determine whether an IDA's item is code or data.\nSometimes, data resides in an executable's code section (virtual functions tables, switch tables and stuff).\nSo in IDA, you can sometimes see this stuff in the code section:\n\n```\n.text:100A1424     aInternetfreepr db 'InternetFreeProxyInfoList',0\n.text:100A1424                                             ; DATA XREF: .text:10038688o\n.text:100A143E                     align 10h\n.text:100A1440     aInternetfreeco db 'InternetFreeCookies',0 ; DATA XREF: .text:10038680o\n.text:100A1454     aInternetfortez db 'InternetFortezzaCommand',0\n.text:100A1454                                             ; DATA XREF: .text:10038678o\n\n```\nis there a method I can call to defer between code and data using only the EA?\n\nThanks in advance.\n\n",
  "votes": "5",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida",
    "disassembly",
    "idapython",
    "python",
    "disassemblers"
  ],
  "user": "Aviv",
  "time": "Sep 7, 2016 at 10:09",
  "comments": [],
  "answers_data": [
    {
      "content": "IDA utilizes flags for checking the properties of locations.\n\nLooking at the API you can use GetFlags(ea) and pass its output to isCode(flags) to check if a location is flagged as being code.\n\nYou can find the exact definitions of the flags in IDC.IDC. A small excerpt:\n\n```\n#define isCode(F)       ((F & MS_CLS) == FF_CODE) // is code byte?\n#define isData(F)       ((F & MS_CLS) == FF_DATA) // is data byte?\n#define isTail(F)       ((F & MS_CLS) == FF_TAIL) // is tail byte?\n#define isUnknown(F)    ((F & MS_CLS) == FF_UNK)  // is unexplored byte?\n#define isHead(F)       ((F & FF_DATA) != 0)      // is start of code/data?\n\n```\nYou can use this from Python like so:\n\n```\nea = ScreenEA()\nflags = GetFlags(ea)\n\nif isData(flags):\n    print(\"It's data!\")\n\nelif isCode(flags):\n    print(\"It's code!\")\n\n```\n",
      "votes": "8",
      "user": "David",
      "time": "Mar 27, 2019 at 6:42",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Additionally, you can use Sark to get it done:\n\n```\nimport sark\n\n# For current line\nsark.Line().is_code\n\n# For specific line\nsark.Line(ea).is_code\n\n```\nNote: I am the creator of Sark.\n\n",
      "votes": "3",
      "user": "tmr232",
      "time": "Sep 9, 2016 at 14:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "Aviv",
          "text": "Sark is a great and well written library. However, it is much slower than using the \"native\" IDAPython functions (the speed using Sark was unbearable and improved significantly after rewriting some of its functionality)",
          "time": null
        },
        {
          "user": "tmr232",
          "text": "The performance is indeed an issue. I still prefer it in most cases as it easier to write in, and performance can be improved later by replacing the relevant code.",
          "time": null
        },
        {
          "user": "Aviv",
          "text": "Well said. I'm enjoying much of your code projects, keep going bro",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "I don't want this come off as being rude, but it is good etiquette and a SE requirement to fully disclose your affiliation to solutions you advertise in your answers. See  reverseengineering.stackexchange.com/help/behavior",
          "time": null
        }
      ]
    }
  ]
}