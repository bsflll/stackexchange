{
  "title": "native function naming convention in Qt for Android",
  "link": "https://reverseengineering.stackexchange.com/questions/4537/native-function-naming-convention-in-qt-for-android",
  "content": "In a project, I cannot find the names of native functions in the .so libraries.\nThat is, a native function must be called something like Java_com_package_ClassName_functionName(). I do find functionName in the .so libraries, but either without the Java_com_package_ClassName_ prefix, or wrapped into a mangled C++ name.\n\nSo:\n\n",
  "votes": "0",
  "answers": 1,
  "views": "414",
  "tags": [
    "android",
    "qt",
    "dalvik"
  ],
  "user": "18446744073709551615",
  "time": "Jun 5, 2014 at 9:06",
  "comments": [],
  "answers_data": [
    {
      "content": "The naming conventions for JNI functions are given by the Dalvik VM, a library couldn't change them and expect them to work, i.e. be callable from the Java part of the application. But, the Java_package_function convention is only needed for functions that Java wants to call, it it not neccesary for a C/C++ function calling another one. \n\nIf you compile\n\n```\njint Java_com_example_foo(JNIEnv*  env, jobject  this) { return bar(); }\nint bar() { return 3; }\n\n```\ninto a library, you can call Java_com_example_foo from java, and you won't be able to call bar from java, but nothing prevents Java_com_example_foo from calling bar.\n\nSo, there are 2 possibilities that come to mind:\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jun 5, 2014 at 11:41",
      "is_accepted": false,
      "comments": []
    }
  ]
}