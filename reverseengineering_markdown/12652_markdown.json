{
  "title": "16 bit Dos string concat function",
  "link": "https://reverseengineering.stackexchange.com/questions/12652/16-bit-dos-string-concat-function",
  "content": "I just got into reversing, i'm a bit puzzled by a part of the following code.\nI know what its doing, from a technical aspect, but i don't really understand why its doing it.\n\nThis is the part I have a question about.\n\n```\nseg005:292F                 test    si, 1           ; ?\nseg005:2933                 jz      short loc_21587\nseg005:2935                 movsb                   ; move byte DS:SI to ES:DI\nseg005:2936                 dec     cx\n\n```\nWhy check to see if the LSB is set and, if it is, move only one byte before moving the rest of the string? Does this have to do with alignment? That's the best explanation I can think up.\n\nThe entire function is below. All comments and names were filled out by me. Any other notes/comments on them or the function as a whole are appreciated.\nThanks.\n\n```\nseg005:290A\nseg005:290A ; =============== S U B R O U T I N E =======================================\nseg005:290A\nseg005:290A ; Attributes: bp-based frame\nseg005:290A\nseg005:290A StringConcat    proc far                ; CODE XREF: sub_1FFED+16P\nseg005:290A                                         ; sub_1FFED+3AP ...\nseg005:290A\nseg005:290A Destination     = word ptr  6\nseg005:290A Source          = word ptr  8\nseg005:290A\nseg005:290A                 push    bp\nseg005:290B                 mov     bp, sp\nseg005:290D                 push    si              ; save SI\nseg005:290E                 push    di              ; save DI\nseg005:290F                 cld                     ; clear direction flag.\nseg005:2910                 mov     di, [bp+Destination]\nseg005:2913                 push    ds              ; move ds....\nseg005:2914                 pop     es              ; ...into es\nseg005:2915                 mov     dx, di\nseg005:2917                 xor     al, al          ; al = search char. 0x0\nseg005:2919                 mov     cx, 0FFFFh\nseg005:291C                 repne scasb\nseg005:291E                 lea     si, [di-1]      ; last char in string\nseg005:2921                 mov     di, [bp+Source]\nseg005:2924                 mov     cx, 0FFFFh\nseg005:2927                 repne scasb\nseg005:2929                 not     cx              ; length of string\nseg005:292B                 sub     di, cx          ; move back to the start of the string?\nseg005:292D                 xchg    si, di          ; si = start of source string.\nseg005:292D                                         ; di = end ofdestination string\nseg005:292F                 test    si, 1           ; ?\nseg005:2933                 jz      short loc_21587\nseg005:2935                 movsb                   ; move byte DS:SI to ES:DI\nseg005:2936                 dec     cx\nseg005:2937\nseg005:2937 loc_21587:                              ; CODE XREF: StringConcat+29j\nseg005:2937                 shr     cx, 1           ; Divide cx by 2. Moving words, not bytes, so half the size\nseg005:2939                 rep movsw               ; move words DS:SI to ES:DI CX times\nseg005:293B                 jnb     short loc_2158E\nseg005:293D                 movsb\nseg005:293E\nseg005:293E loc_2158E:                              ; CODE XREF: StringConcat+31j\nseg005:293E                 xchg    ax, dx\nseg005:293F                 pop     di\nseg005:2940                 pop     si\nseg005:2941                 pop     bp\nseg005:2942                 retf\nseg005:2942 StringConcat    endp\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "178",
  "tags": [
    "ida",
    "static-analysis",
    "dos-exe"
  ],
  "user": "Taekahn",
  "time": "May 13, 2016 at 7:08",
  "comments": [],
  "answers_data": [
    {
      "content": "It's a minor speed optimization. The main loop for moving characters use movsw (move words) which was probably slightly faster than moving bytes. However, in case the number of bytes is odd, one byte would be left uncopied, and that's why there is an extra mosvb before and after it (so the extra byte is moved before or after, depending on alignment of the string address).\n\n",
      "votes": "6",
      "user": "perror",
      "time": "May 13, 2016 at 12:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "there is a performance hit to copying from a misaligned source address, hence the need to align it first",
          "time": null
        }
      ]
    }
  ]
}