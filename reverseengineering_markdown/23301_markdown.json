{
  "title": "Conditional to check bytes against user input [ELF 32-bit]",
  "link": "https://reverseengineering.stackexchange.com/questions/23301/conditional-to-check-bytes-against-user-input-elf-32-bit",
  "content": "I'm trying to understand the following snippet code from a CTF binary. It is part of an ELF 32-bit and I decompiled it with Ghidra.\n\n```\nundefined4 check_serial(char *code)\n\n{\n  size_t sVar1;\n  undefined4 uVar2;\n  int in_GS_OFFSET;\n  int iterator;\n  byte correct_code [16];\n  int local_10;\n\n  local_10 = *(int *)(in_GS_OFFSET + 0x14);\n  correct_code[0] = 0x27;\n  correct_code[1] = 0x31;\n  correct_code[2] = 0x20;\n  correct_code[3] = 0x1c;\n  correct_code[4] = 0x1a;\n  correct_code[5] = 8;\n  correct_code[6] = 4;\n  correct_code[7] = 0x18;\n  correct_code[8] = 0x5c;\n  correct_code[9] = 0;\n  correct_code[10] = 0x31;\n  correct_code[11] = 0x18;\n  correct_code[12] = 0x44;\n  correct_code[13] = 3;\n  correct_code[14] = 0x17;\n  correct_code[15] = 0xe;\n  sVar1 = strlen(code);\n  if (sVar1 == 0x10) {\n    iterator = 0;\n    while (iterator < 0x10) {\n      if ((uint)(byte)((char)iterator + 100U ^ correct_code[iterator]) != (int)code[iterator]) {\n        uVar2 = 0;\n        goto LAB_08048aca;\n      }\n      iterator = iterator + 1;\n    }\n    uVar2 = 1;\n  }\n  else {\n    uVar2 = 0;\n  }\n\n```\nI've already renamed some variables to make the code more clear.\nI have to find the correct serial that will give me the flag. However, I don't understand the following instruction:\n\n```\nif ((uint)(byte)((char)iterator + 100U ^ correct_code[iterator]) != (int)code[iterator])\n\n```\nIn the first iteration of the loop, it takes the iterator (which is 0) and adds 100 to it. This makes a total of 100 and performs a XOR operation with correct_code[0] which is 0x27 or 39 in decimal. The result of the XOR between 100 and 39 is 43.\n\nIf I perform all the iterations of the loop, I get the following serial:\n\n43 84 70 123 114 97 110 115 48 109 95 119 52 114 101 125\n\nHowever, the binary says this is not the correct serial.\nI tried with and without spaces.\n\nWhat I am not understanding about this code snippet?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "302",
  "tags": [
    "elf",
    "ghidra"
  ],
  "user": "Raptor",
  "time": "Feb 19, 2020 at 22:24",
  "comments": [],
  "answers_data": [
    {
      "content": "Hehe, you're definitely close and on the right track; however, when you say this: \n\n```\nHowever, the binary says this is not the correct serial. I tried with and without spaces.\n\n```\nThis tells me that you're a tad confused and entering it wrong. I have two things:\n\nIf you print your values as characters, you may see something pretty interesting...  \n\nAlso, I'm going to break it down a little bit so you can see the big picture juuuust in case you're new to this and would like to learn something new today...Lets focus on the if statement. It's saying that if the length of your code isn't 0x10, or 16, it will assign uVar2 to 0. If it is the length, it'll be assigned to 1. This tells me that undefined4 check_serial(char *code) is actually a boolean function and can be rewritten to bool check_serial(char *code). \n\nNow if the length of your serial is 0x10, it'll go to this code block (cleaned up a bit):\n\n```\nif (codeLen == 0x10) \n{\n    iterator = 0;\n    while (iterator < 0x10) \n    {\n        if (iterator + 100U ^ correct_code[iterator]) != code[iterator]) \n        {\n            return false;\n        }\n        iterator++;\n    }\n}\n\n```\nIf the operation inside that if statement doesn't match, it'll return false. You can get an idea of what it's checking if you get all the values inside correct_code and do that operation yourself. \n\n```\nbyte test[] = {\n    0x27, 0x31, 0x20, 0x1c, 0x1a, 0x8, 0x4, 0x18, 0x5c, 0x0, 0x31, 0x18, 0x44, 0x3, 0x17, 0xe\n};\n\nint main()\n{\n    int i = 0;\n    const int thing= 100;\n\n    // These are your values in decimal\n    while (i < 0x10)\n    {\n        std::cout << (i + thing ^ test[i]) << \" \";\n        i++;\n    }\n    std::cout << std::endl;\n\n    i = 0;\n    // These are your values in hexadecimal\n    while (i < 0x10)\n    {\n        std::cout << std::hex << (i + thing ^ test[i]) << \" \";\n        i++;\n    }\n    std::cout << std::endl;\n\n    i = 0;\n    // Lastly, your values as alphanumeric characters\n    while (i < 0x10)\n    {\n        std::cout << char(i + thing ^ test[i]);\n        i++;\n    }\n\n    return 0;\n}\n\n```\nThis will get you this:\n\n```\nRelease>ConsoleApplication6.exe\n67 84 70 123 114 97 110 115 48 109 95 119 52 114 101 125\n43 54 46 7b 72 61 6e 73 30 6d 5f 77 34 72 65 7d\nCTF{rans0m_w4re}\n\n```\nAnyhow, hope this clears up what you were stuck on! I would recommend going over it again and trying it out on a different ctf binary or something on crackme/rootme/whatever. \n\nLastly, here is how I would clean up this code block:\n\n```\nbool check_serial(char *code)\n{\n    int iterator = 0;\n    byte correct_code[16] = {\n        0x27, 0x31, 0x20, 0x1c, 0x1a, 0x8, 0x4, 0x18, \n        0x5c, 0x0, 0x31, 0x18, 0x44, 0x3, 0x17, 0xe\n    };\n\n    codeLen = strlen(code);\n    if (codeLen == 0x10) \n    {\n        while (iterator < 0x10) \n        {\n            if ((iterator + 100U ^ correct_code[iterator]) != code[iterator]) \n            {\n                return false;\n            }\n            iterator++;\n        }\n        return true;\n    }\n    return false;\n}\n\n```\n",
      "votes": "1",
      "user": "Jon",
      "time": "Feb 20, 2020 at 0:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "Raptor",
          "text": "Thanks for your answer! It was very well explained. I'm just not getting the part were the numbers are converted to the final string. Why is 67, 84, 70, etc. equal CTF{rans0m_w4re}?",
          "time": null
        },
        {
          "user": "Jon",
          "text": "Sure thing. Those numbers are the decimal representation of your flag. When you're viewing anything in a debugger/disassembler, you'll see everything in numbers. For example, AAAA will be 0x41 0x41 0x41 0x41. BBBB will be 66 66 66 66, if that makes sense",
          "time": null
        },
        {
          "user": "Raptor",
          "text": "But there are more numbers in your ConsoleApplication6.exe output than letters of the code. I do get what you mean about the letters in disassembler.",
          "time": null
        }
      ]
    }
  ]
}