{
  "title": "Tracing int 0x80 instructions using PIN",
  "link": "https://reverseengineering.stackexchange.com/questions/6144/tracing-int-0x80-instructions-using-pin",
  "content": "I wrote this small pintool that tries to record the number of int 0x80 instructions executed. I did this roughly as follows :-\n\nxed_iclass_enum_t iclass = static_cast<xed_iclass_enum_t>(INS_Opcode(ins));\n\nI then compare iclass against XED_ICLASS_INT and print out the EIP if found. I'm doing this on a statically compiled test binary that :-\n\n```\n1. Prints hello world\n2. Makes a call to mprotect\n\n```\nHowever, the number of int 0x80 instructions encountered is just one. Is there something obvious I'm doing wrong? I tried using XED_ICLASS_SYSCALL too but that did not help.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "727",
  "tags": [
    "instrumentation"
  ],
  "user": null,
  "time": "Aug 31, 2014 at 15:36",
  "comments": [],
  "answers_data": [
    {
      "content": "Why not just use PIN_AddSyscallEntryFunction?  This is an ABI-agnostic way of doing things, that lets you use PIN_GetSyscallArgument and related functions rather than manually inspecting the stack and register context.\n\nYou could also use INS_IsInterrupt at instrumentation time to gather the information at analysis time.  Note that this won't catch any systemm calls made via the syscall or sysenter instructions.\n\nAs a simple example, if you look at the file inscount0.cpp that comes with Pin, if you add the following check, you'll only instrument syscalls.\n\nIn inscount0.cpp, change the routines as shown below.  The module will now count the number of int instructions executed, rather than the total number of instructions executed.\n\n```\nVOID Instruction(INS ins, VOID *v)\n{\n    if(INS_IsSyscall(ins))\n    {\n        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);\n    }\n}\n\n```\nNow all syscall instructions will be counted.  You can use the standard INS_InsertCall arguments to inspect the stack or register context.\n\nAdd this function before main\n\n```\nvoid OnSyscall(THREADID threadIndex, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v)\n{\n    printf(\"Made syscall #%i  \n\", PIN_GetSyscallNumber(ctxt, std));\n}\n\n```\nand add this line to main before PIN_StartProgram.\n\n```\nPIN_AddSyscallEntryFunction(OnSyscall, 0);\n\n```\n",
      "votes": "2",
      "user": "Zach Riggle",
      "time": "Aug 31, 2014 at 17:04",
      "is_accepted": true,
      "comments": []
    }
  ]
}