{
  "title": "XORing command-line for encryption?",
  "link": "https://reverseengineering.stackexchange.com/questions/6267/xoring-command-line-for-encryption",
  "content": "I have the following lines\n\n```\n push [ebp+dwBytes]\n push 8                 ; dwFlags\n call ds:GetProcessHeap\n push eax               ; hHeap\n call ds:HeapAlloc      \n push [ebp:lpCmdLine]   ; char *\n mov edi, eax\n call _atol\n mov esi, eax\n xor esi, 28Ch\n mov eax, esi\n pop ecx\n mov edx, ebx\n xor eax, 1104h\n xor ecx, ecx\n shr edx, 1\n jz  short loc_60114A\n\n```\nThe first part is not difficult. They get a handle to the default heap and after that, they allocate some memory on that heap using the handle hHeap. \n\nThe part with lpCmdLine take the lpCmdLine and converts it into a long value.\n\nNow, I do not understand the part which comes after call _atol.\nEspecially the lines with the XOR :\n\n```\n xor esi, 28Ch\n\n```\nQuestions:\na) Is that a way of encryption ? I mean, is it so that they try to encrypt the string pointed by lpCmdLine ? \n\nb) Normally I had a cmp before jz, but here as you can see, there is only a jz instruction? Why is the cmp is missing ? \n\nbest regards, \n\n",
  "votes": "0",
  "answers": 1,
  "views": "510",
  "tags": [
    "assembly",
    "xor"
  ],
  "user": "user3097712",
  "time": "Sep 20, 2014 at 17:58",
  "comments": [
    {
      "user": "evlncrn8",
      "text": "atol = ascii to long, so if you passed 12345678 on the commandline then eax would become that, then its xoring the value, presumably for a compare later, so at a guess      jz doesnt need a compare, some of the other operations will adjust the eflags.. like the shr edx.. if edx = 0 after this the zero flag will be set",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The number returned by _atol() is XOR'ed with 0x28C and then XOR'ed again with 0x1104. Since XOR is an associative operation, this is equivalent to XOR'ing the number returned by _atol() with 0x1388.\n\nThere's not enough context in your snippet above to infer how this resulting value is being used.\n\nAlso, it's unlikely that what IDA is labeling as lpCmdLine is really the program's command line, since a command line typically begins with the executable's file name, on which _atol() would typically fail (you can create a process and have only command line arguments as the command line, and alternatively it is possible that the code above expects the executable's file name to be numeric (like 123.exe), but these are both less likely than IDA just mislabling the variable).\n\nThe jz instruction checks the CPU's Zero Flag. The shr instruction prior to the jz instruction sets the Zero Flag as follows (from http://x86.renejeschke.de/html/file_module_x86_id_285.html) --\n\nIn other words, if after shr edx, 1 the register edx is 0x00000000, then the jump is taken. As with your previous question, though, there's not enough context in your snippet above to infer how this is being used.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Sep 21, 2014 at 15:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}