{
  "title": "angr with a golang target",
  "link": "https://reverseengineering.stackexchange.com/questions/20352/angr-with-a-golang-target",
  "content": "Here is a very basic golang program:\n\n```\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var s1 string\n    fmt.Scanln(&s1)\n\n    if s1==\"goodpassword\" {\n        fmt.Println(\"Good\")\n    } else {\n        fmt.Println(\"Wrong\")\n    }\n}\n\n```\nI have compiled this program (elf64 linux binary).\n\nI have diasssembled the binary and i have found the addresses of the 2 fmt.Println calls: \n\n```\n...\n0x00490d4f     lea rax, obj.main.statictmp_1    ; wrong\n...\n0x00490d99     lea rax, obj.main.statictmp_0    ; good\n...\n\n```\nNow, i have wrote this python program:\n\n```\nimport angr\nfrom angr.state_plugins import SimSystemPosix\n\np = angr.Project('./mybinary')\n\nsm = p.factory.simulation_manager()\nsm.explore(find= 0x00490d99, avoid= 0x00490d4f)\n\nprint(sm.found[0].posix.dumps(0))\n\n```\nI do not understand why angr does not return \"goodpassword\" string.\nI have something wrong but i do not understand what...\n\nThanks for your help\n\n",
  "votes": "2",
  "answers": 1,
  "views": "599",
  "tags": [
    "angr"
  ],
  "user": "Bob5421",
  "time": "Jan 13, 2019 at 9:27",
  "comments": [],
  "answers_data": [
    {
      "content": "The Go run time is fairly complicated that symbolic solvers will not run out-of-the-box as-is. You are asking angr to figure out everything on it's own which may be feasible for simple and uncomplicated C programs but not for something like Go binaries.\n\nFor example, the fmt.Scanln function will call multiple Go functions before you reach libc.read. Angr has SimProcedures for read but not for fmt.Scanln. To figure out what fmt.Scanln does it has to symbolically execute after which only it may able to discover the dependency between stdin and the program output. Symbolically executing Scanln is by no way a simple task.\n\nInstead, you should break down the problem in parts which you can ask angr to solve. Like if you have identified the buffer where the user input is stored you can mark that as symbolic and instruct angr to find the path to the \"good password\" branch.\n\nFurther resources on Go reversing:\n\n",
      "votes": "3",
      "user": "0xec",
      "time": "Jan 13, 2019 at 11:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "Bob5421",
          "text": "Thanks. I have identified the buffer but how can i mark it as symbolic and how can i instruct angr to find the good password ?",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@Bob5421 Check this",
          "time": null
        },
        {
          "user": "Bob5421",
          "text": "Thanks i have already read this documentation but there are so much cases i do not understand which one is the good. In fact i want to virtually start my program at the address after the scanf and ask angr to solve password.",
          "time": null
        }
      ]
    }
  ]
}