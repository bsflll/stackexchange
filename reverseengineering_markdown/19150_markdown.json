{
  "title": "What does this magic number do? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/19150/what-does-this-magic-number-do",
  "content": "I've opened a 64 bit DLL file in IDA. One function has this pseudocode:\n\n```\nunsigned __int64 output;\nULONG input;\noutput = (unsigned __int64)(input * (unsigned __int128)0xE38E38E38E38E38Fui64 >> 64) >> 5;\n\n```\nHere is the equivalent assembly view:\n\n```\nmov     rcx, r13\nmov     [rsp+56], rcx\nmov     edx, [rsp+152]\nmov     rax, 0E38E38E38E38E38Fh\nmul     rdx\nmov     r8, rdx\nshr     r8, 5\nmov     [r15], r8d\ncmp     r8d, esi\ncmova   r8d, ebx\n\n```\nWhen I want to compile that same code in MSVC++, it shows:\n\n```\nwarning C4293: '>>': shift count negative or too big, undefined behavior\n\n```\nMy question is, what does that long constant value do? Is there anything cryptic with that bit shifting?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "x86",
    "compiler-optimization"
  ],
  "user": "Biswapriyo",
  "time": "6 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "although I flagged this question should be closed as duplicate, keeping it has some additional value because of the multiple different magic number values used, redirecting users encountering different magic values to the same resource.\n\nOn modern processors, integer division is one of the slowest arithmetic operations you can have a processor perform. Often orders of magnitude slower than other arithmetic operations.\n\nIt turns out that if divisor is constant you can avoid the expensive division operation using clever arithmetic tricks to a set of considerably faster operations (multiplications, additions and shifts), thus reaching overall faster performance at the expense of slightly larger code.\n\nThis is often called \"division by magic numbers\" because those numbers indeed often look like randomly selected numbers, that is not, however, the case. Compilers (and sometimes humans, too) use those tricks often nowadays, since size of code is less of an issue thanks to the exponential growth of storage capacity. \n\nThe general approach is that we can develop an equation like the following:\n\nX / Y == X * (1/Y) == sqrt((X * 2^n) * (1/Y)), 2^n) == ((x << n) * 1/Y)>>n\n\nIn your case, 0xE38E38E38E38E38Fui64 with a shift of 3 bits is the hardcoded magic number used for division by 9 for unsigned 64 bit integers. Since your code actually shifts by 5, the actual divisor equals 9 * 2^2 = 36.\n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Aug 24, 2018 at 21:26",
      "is_accepted": true,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "Somehow 0xE38E38E38E38E38Fui64 >> 64) >> 5 is equivalent with divided by 36. May you explain that in your answer?",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Ah. Yes. I didn't notice the arithmetic shift in your code is 5 instead of the expected shift by 3. The additional shift by two bits means you're actually dividing by 9*2^2 = 9*4 = 36",
          "time": null
        },
        {
          "user": "Biswapriyo",
          "text": "But, diving by 9 and multiplying by 0xE38... will not be same as the second one 1/9 isn't finite.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Those are close approximations that work for integers. You're correct it will not work when you assign the result into a floating point variable.",
          "time": null
        }
      ]
    }
  ]
}