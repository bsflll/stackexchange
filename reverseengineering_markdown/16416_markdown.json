{
  "title": "IDA pro 6.9, what does \"lambda\" in type notation mean in C++ reversed code",
  "link": "https://reverseengineering.stackexchange.com/questions/16416/ida-pro-6-9-what-does-lambda-in-type-notation-mean-in-c-reversed-code",
  "content": "I was looking into a C++ program compiled for aarch64 with ida pro 6.9 and came across something really weird:\n\nsomescope::SomeClass<false>::some_name<somescope::SomeClass<false>::other_name(uint,uint,uint)::{lambda(void *,bool)#2}>::SOMETHING\n\nI'm really confused by this notation... Specifically:\n\nI'm fairly new to reverse engineering and I've tried to google this for like an hour... Please hint me if you've got clue.\n\nThanks in advance!\n\n",
  "votes": "3",
  "answers": 1,
  "views": "521",
  "tags": [
    "ida",
    "c++"
  ],
  "user": "hpwsue",
  "time": "Sep 26, 2017 at 14:01",
  "comments": [],
  "answers_data": [
    {
      "content": "About your first question: what does ...lambda... mean: Yes, obviously, it refers to a lambda function.\n\nThe second part of your first question: What is #2: Some experimentation with lambda's shows that this is like a sequence number of lambda's within a function.\nNote that gcc and clang have different ways of encoding this.\ngcc uses the lambda()#2 notation, while clang uses something like $_1.\n\nYour second question: what is other_name: I think that would be the function where the lambda is defined.\n\nAnd some_name being the function which is passed the lambda as a template parameter.\n\nThe lambda's themselves are passed as a struct containing either copies of values or pointers, or from a c++ point of view: references, to the closure defined by the lambda.\n\nExperimenting with how your compiler treats lambda's is quite easy.\nWrite some test code:\n\n```\n#include <stdio.h>\n\ntemplate<typename FN>\nint test(FN f)\n{\n    return f();\n}\n\nint main(int, char**)\n{\n    int a, b;\n    auto f1 = [](int a, int b) { return a+b; };\n    int c = test([&a, b, &f1]() { return f1(a,b); });\n    auto f2 = [](int a, int b) { return a-b; };\n    int d = test([&a, b, &f2]() { return f2(a,b); });\n\n    printf(\"c=%d, d=%d  \n\", c, d);\n    return 0;\n}\n\n```\nThen compile with least optimization, and debug symbols:\n\n```\ng++ -O0 -g yourfile.cpp\n\n```\nAnd view the resulting binary in ida.\n\n",
      "votes": "3",
      "user": "Willem Hengeveld",
      "time": "Sep 26, 2017 at 19:23",
      "is_accepted": true,
      "comments": []
    }
  ]
}