{
  "title": "Java says \"ghidra\" is unknown protocol when creating project on linux",
  "link": "https://reverseengineering.stackexchange.com/questions/27777/java-says-ghidra-is-unknown-protocol-when-creating-project-on-linux",
  "content": "Update: I installed Eclipse and PyDev in Linux and my code works now. This confirms it was an issue setting up the Python/Jython paths. I would still like to know how to import ghidra.jar into jython so that I can use the command line in the future. Any help here would be greatly appreciated.\n\nI am making a ghidra project on Linux. I am using a Ghidra jar and jython to code my application. I am adding ghidra to my path with system.path.append() and I am running my program with\njython main.py.\n\nMy code worked with Pydev in Eclipse on Windows, but on Linux I am getting\n\nwhen I reach ghidraProject.createProject(). I investigated the source and I found that the error occurs when Java tries to make a url from a string. I know Ghidra has a protocol handler which should be handling the protocol \"ghidra\". I assume Java doesn't register the protocol handler somehow. I tried Handler.registerHandler() with no luck.\n\nWhy is \"ghidra\" an unknown protocol on Linux, but the same code works (save for the PyDev environment) in Eclipse/Windows?\n\nError printout:\n\n\n",
  "votes": "3",
  "answers": 1,
  "views": "261",
  "tags": [
    "ghidra"
  ],
  "user": "rbe",
  "time": "Jun 29, 2023 at 10:14",
  "comments": [],
  "answers_data": [
    {
      "content": "You are trying to use Ghidra without initializing it first, Ghidra isn't really designed as a typical Java library which you could use like any other .jar. If you want to check out how the Ghidra provided pythonRun entry point handles a minimal jython REPL embedded inside Ghidra, check out: https://github.com/NationalSecurityAgency/ghidra/blob/da94eb86bd2b89c8b0ab9bd89e9f0dc5a3157055/Ghidra/Features/Python/src/main/java/ghidra/python/PythonRun.java\n\nThe crucial part here is:\n\n```\nApplicationConfiguration configuration = new HeadlessGhidraApplicationConfiguration();\nApplication.initializeApplication(layout, configuration);\n\n```\nwhich runs through various initialization steps that the overall Ghidra code assumes to have happened when being executed, one of them being the setup for the ghidra:// protocol handler.\nSpecifically the call to ghidra.framework.protocol.ghidra.Handler.registerHandler() happens inside ghidra.ProjectInitializer#run.\n\n",
      "votes": "4",
      "user": "Florian Magin",
      "time": "May 8, 2023 at 9:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "rbe",
          "text": "I initialized the application in my code:   configuration = HeadlessGhidraApplicationConfiguration() configuration.setInitializeLogging(False)  Application.initializeApplication(GhidraJarApplicationLayout(), configuration)  I think the issue is that I'm not replicating how PyDev creates the Jython environment.",
          "time": null
        },
        {
          "user": "Florian Magin",
          "text": "I'd need more details on your project and how you are starting it then, especially if your Eclipse/PyDev install has the Ghidra Dev plugin installed",
          "time": null
        }
      ]
    }
  ]
}