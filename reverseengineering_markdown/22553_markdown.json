{
  "title": "Strange vtable setup in constructor disassembly",
  "link": "https://reverseengineering.stackexchange.com/questions/22553/strange-vtable-setup-in-constructor-disassembly",
  "content": "In a program I'm trying to recover data structures I've discovered the following strange (ARM) disassembly code:\n\n```\nctor_1:\n    ldr  r1, =vtable_base\n    str  r1, [r0]             ;r0 always contains object instance ptr\n    ;... more setup\n    bx   lr\n\nctor_2:\n    push {r4,lr}\n    mov  r4, r0\n    bl   ctor_1\n    ldr  r1, =vtable_derived\n    str  r1, [r0]             ;vtable override in derived class\n    add  r0, r0, #0x20\n    bl   obj_ctor             ;calls an object's ctor at r0+0x20\n    ldr  r1, =vtable_derived_so\n    str  r1, [r0, 0x20]       ;overrides object vtable\n    ;...\n    pop  {r4,lr}\n    bx   lr\n\n```\nSo far it looks all fine. There seems to be a derived class overriding the vptr after the base class ctor has been called. An internal subobject is first initialized in obj_ctor and then the vtable is set to a derived subobject. The first strange thing is why ctor_2 doesn't directly call the subobject's derived ctor which in turn sets up first the base subobject. I suppose this happened because the call has been inlined by the compiler.\n\nHowever, things get spicy when the whole object is again subclassed:\n\n```\nctor_3:\n    push {r4,lr}\n    mov  r4, r0\n    bl   ctor_2\n    ldr  r1, =vtable_derived2\n    ldr  r2, =vtable_derived2_so\n    str  r1, [r0]           ;vtable to the new subclass\n    str  r2, [r0, 0x20]     ;what??\n    ;...\n    pop  {r4,lr}\n    bx   lr\n\n```\nI have absolutely no idea how this is possible. How can a subclass 'change' a member type (which is definitely not even a pointer) which has already been setup in a superclass? It is confirmed that ctor_2 and ctor_3 create both valid opaque objects.\n\nDo I misunderstand how vtables work in disassembly? Could a compiler generate such code from valid C++?\n\nI don't know if that's important, but the symbols ctor_2 and the ctor_2 called from ctor_3 are actually different albeit executing the exact same code (maybe because of different ctors?).\n\nEDIT:\n\nThis is how the destructors look like:\n\n```\ndtor_1:\n    push {r4, lr}\n    ldr  r1, =vtable_base\n    str  r1, [r0]                      ;why overwrite the vtable with the same value?\n    ;...calls to delete for heap objects\n    pop  {r4, lr}\n    bx   lr\n\ndtor_2:\n    push {r4, lr}\n    mov  r4, r0\n    ldr  r1, =vtable_derived\n    ldr  r2, =vtable_derived_so\n    str  r1, [r0]\n    str  r2, [r0, #0x20]\n    add  r0, r0, #0x20\n    bl   dtor_base_so\n    mov  r0, r4\n    bl   dtor_1\n    pop  {r4, lr}\n    bx   lr\n\ndtor_3:\n    push {r4, lr}\n    mov  r4, r0\n    ldr  r1, =vtable_derived2\n    ldr  r2, =vtable_derived2_so\n    str  r1, [r0]\n    str  r2, [r0, #0x20]\n    ;...\n    bl   dtor_2\n    pop  {r4, lr}\n    bx   lr\n\n```\nAs you can see, the vtables are overwritten with the same value. There is no call to dtor_derived2_so, so the vtable overwrite seems unneccesary. Even more interesting is that when the subobject should be destructed, there's always a call to dtor_base_so and not dtor_derived_so. I checked the vtables of derived_so and derived2_so and they have the following two destructors:\n\n```\ndtor_derived_so:\n    ldr  r12, =0xFFFFFFE0              ;-0x20\n    add  r0, r0, r12\n    b    dtor_2\n\ndtor_derived2_so:\n    ldr  r12, =0xFFFFFFE0              ;-0x20\n    add  r0, r0, r12\n    b    dtor_3\n\n```\nWhen they're called they call immediately the corresponding dtor. Since they reference fixed locations at which the object should be destroyed, the subobjects seem to only exist inside derived2's class. What is going on here? Why would one force the object's destruction if a subobject is destroyed? Or do we have here a special case of virtual inheritance?\n\nHere are the vtables:\n\n```\nvtable_base:\n    dcd  0x82016D20          ;dtor_1\n    dcd  0x82016CE0          ;dtor_1 (destruct and free)\n    dcd  0x82016BF8\n    dcd  0x82016C98\n    dcd  0x82016BB8\n    dcd  0x82016B78\nvtable_derived:\n    dcd  0x8201691C          ;dtor_2\n    dcd  0x820168D8          ;dtor_2 (destruct and free)\n    dcd  0x82016BF8\n    dcd  0x8201686C\n    dcd  0x8201682C\n    dcd  0x820167F8\n    dcd  0x820167C4\nvtable_derived2:\n    dcd  0x82016364          ;dtor_3\n    dcd  0x82016320          ;dtor_3 (destruct and free)\n    dcd  0x82016BF8\n    dcd  0x8201686C\n    dcd  0x8201682C\n    dcd  0x820167F8\n    dcd  0x820167C4\nvtable_base_so:\n    dcd  0x82015CE8          ;dtor_base_so\n    dcd  0x82015CC4          ;dtor_base_so (destruct and free)\nvtable_derived_so:\n    dcd  0x82017178          ;dtor_derived_so\n    dcd  0x82017168          ;dtor_derived_so (destruct and free)\nvtable_derived2_so:\n    dcd  0x820171B8          ;dtor_derived2_so\n    dcd  0x820171A8          ;dtor_derived2_so (destruct and free)\n\n```\n",
  "votes": "3",
  "answers": 3,
  "views": "645",
  "tags": [
    "disassembly",
    "assembly",
    "c++",
    "arm",
    "vtables"
  ],
  "user": "Overblade",
  "time": "Nov 18, 2019 at 19:38",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "can you also add the vtables, including the two dwords before each if they're not zero?",
      "time": null
    },
    {
      "user": "Overblade",
      "text": "You mean the data before the address the vptr points to? Yeah sure, there is always an address to some other location close to the vtables.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "I mean a list of DCD xxx at vtable_base, vtable_derived etc.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Thanks for vtables. Iâ€™ll check them and update my answer some time soon.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You're correctly interpreting C++'s way of implementing class inheritance, however your assumption that the \"subobject\" is a member object of the class may be incorrect.\n\nThrough compiled code alone, It is impossible to completely distinguish member objects from additional inheritance in multiple inheritance classes as both appear the same. As a matter of fact, seeing something like this is one of the ways to distinguish a member object from multiple inheritance. Another is using RTTI information, if it exists.\n\nIn C++, multiple inheritance is implemented by appending one base class structure after the other, where all additional members are often be added to the first class (although if I remember correctly, that's not required by the standard). You can read about the memory layout of multiple inheritance classes in this article, which also covers the diamond inheritance problem and it's common solution - virtual inheritance - and the resulting memory layout.\n\nThe following figure (taken from the article) illustrates the memory layout of a multiple-inheritance class:\n\n\n\nI also found this gist example code that shows how multiple inheritance works under the hood and includes the expected structure in the comments at the top of the file.\n\nYou should definitely check it out in compiler explorer. Where you could easily see how this all looks in most compiler and architecture configurations.\n\nI think the inclusion of names and symbols together with instant update upon modifications and the control over the optimization levels makes this a great way to understand the memory layout and code of multiple inheritance.\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Nov 20, 2019 at 12:34",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Could it be multiple inheritance? That could explain why the vptr of the supposed subobject is overwritten by ctor_2 without having to assume the compiler to inline anything. The derived class might actually have two base classes, the \"base\" and the \"subobject\". If this is the case, it kinda makes sense why the compiler would make ctor_3 to change the vptr of both base classes instead of just one of them. I'm not quite sure what exactly this would mean for the destructors, though.\n\n",
      "votes": "3",
      "user": "pants64",
      "time": "Nov 19, 2019 at 22:48",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You have here multiple inheritance where both base classes have virtual destructors. The pattern you see in dtor_derived_so is a so-called \"non-virtual thunk\", which adjusts this before calling the whole class destructor. Normally you should also see 0xFFFFFFE0 (offset to base) in the second dword before the secondary vtables. I was able to produce code and vtable layout very similar to your example with the following source code:\n\n```\nclass A\n{\n  int a, b, c, d;\npublic:\n  A() {};\n  virtual ~A() {};\n  virtual int f1() { return 0;};\n};\n\nclass B\n{\n  int x;\npublic:\n  virtual ~B() {};\n};\n\n\nclass C: public A, B\n{\npublic:\n  virtual int f1() { return 2;};\n};\n\nclass D: public C\n{\npublic:\n  virtual int f1() { return 3;};\n};\n\n\nint main()\n{\n D d;\n}\n\n```\nFor more info, see the Itanium C++ ABI, in particular 2.5 Virtual Table Layout.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Nov 20, 2019 at 12:06",
      "is_accepted": false,
      "comments": []
    }
  ]
}