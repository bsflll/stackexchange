{
  "title": "Memory map in AVR Harvard architecture",
  "link": "https://reverseengineering.stackexchange.com/questions/22727/memory-map-in-avr-harvard-architecture",
  "content": "In this video https://youtu.be/D0VKuZuuvW8?t=259 .\n\nYou can see that flash address is beteen 0x0 to 0x3fff. and Data memory ( Io register and SRAM )  is between  0x0 to 0x8ff .\n\nSo in the video he ask how that can be passable? and he answer that AVR used Harvard architecture , and data and code in diffrent address (not like x86)\n\nI don't understand the answer .\n\nIn ida , how can I parse this binary? what is the address of ram and what is the address of rom ? ( I must type it while I load binary file of avr ).\n\nIn 0x0 there is 32 registers (data) or code in flash?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "386",
  "tags": [
    "ida",
    "static-analysis",
    "flash",
    "rom"
  ],
  "user": "joif doi",
  "time": "Dec 12, 2019 at 13:19",
  "comments": [
    {
      "user": "Bruce Abbott",
      "text": "microchipdeveloper.com/8avr:memory",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Different means are used to access each.\n\nIn simple terms, only instructions and any operands embedded within the instruction stream would be read from program memory.  Any \"memory access\" by code would go to data memory.\n\nOf course that strict a boundary doesn't really make for a working computer.  So there is a special instruction to inefficiently read data from program memory.  And also a highly restricted one for writing data to program memory, which can only be run from code that is itself located in the bootloader region.\n\nSo in short, it works because accessing the memory uses a completely different mechanism for each type of memory.\n\nA binary or hex file you load would probably go only into program memory.  Some bootloaders might be able to be able to dump something into data RAM, but you'd need some out-of-band command to tell them to put the data there, or have to invent some private convention that a certain range of addresses in a HEX file would be shorthand for data vs. program memory.  This likely isn't done, because there's no real need to preload data to data memory - rather, you talk to the running program and exchange data with it.\n\nA debugger (for either virtual or emulated hardware) can of course typically allow you to change memory contents while a program is paused.\n\n",
      "votes": "2",
      "user": "Chris Stratton",
      "time": "Dec 12, 2019 at 21:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}