{
  "title": "Ancient number formats (probably fixed-point)",
  "link": "https://reverseengineering.stackexchange.com/questions/4513/ancient-number-formats-probably-fixed-point",
  "content": "I'm analyzing an rather ancient 3D mesh format (from 1995 or 1996). Inside the files, there are blocks of what I think are vertices.\n\nFor example, the following is a direct hex dump from such a part:\n\n```\n7855DAFF\n5BE60E00\n353D0200\nC82D0B00\n5BE60E00\n353D0200\nC82D0B00\n5BE60E00\nB61AEDFF\n7855DAFF\n5BE60E00\nB61AEDFF\n7855DAFF\n59D2FDFF\n363D0200\nC82D0B00\n59D2FDFF\n363D0200\nC82D0B00\n59D2FDFF\nB61AEDFF\n7855DAFF\n59D2FDFF\nB61AEDFF\n\n```\nThese blocks are introduced by a little header, which has a value that could be the number of vertices that are present in the corresponding data block. For this excerpt, there is a 0x08. Since we have 24 values of 32bit, I think it is safe to assume that these blocks are actual vertices (0x08 * 3 = 24, with xyz). Other headers also have this value and their data blocks also have the exact number of dwords ([value in header] * 3 => number of dwords).\n\nBut, now I'm struggling at deciphering the number format that was used. It isn't IEEE754; a friend of mine also pointed out that the hardware that was used these days didn't perform well with floating-point numbers and therefore often fixed-point numbers where used.\n\nSo, any idea what kind of format this could be ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "324",
  "tags": [
    "binary-analysis",
    "file-format"
  ],
  "user": "martin",
  "time": "Jun 3, 2014 at 9:13",
  "comments": [
    {
      "user": "6EQUJ5",
      "text": "I wonder if the fact that every word ends with either FF or 00 has meaning? Or are you sure they are not simply 32-bit integers?",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "Do you know, or can you find out, which kind of hardware that was? Knowing which processor was used could help a lot, and even if you just know \"it was some kind of bumblebee\", there might be someone here who worked with bumblebees 20 years ago and remembers some details.",
      "time": null
    },
    {
      "user": "martin",
      "text": "It was mainly designed for the 80486 (minimum requirements of 33 MHz), so I think it is safe to assume 32bit dwords.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "if you reverse the byte order, and assume signed numbers you get these triplets:\n\n```\n-2468488  976475   146741\n  732616  976475   146741\n  732616  976475 -1238346\n-2468488  976475 -1238346\n-2468488 -142759   146742\n  732616 -142759   146742\n  732616 -142759 -1238346\n-2468488 -142759 -1238346\n\n```\nthese seem like the coordinates of the corners of a 3d cube  \n\n```\nx=(-2468488 .. 732616)\ny=( -142759 .. 976475)\nz=(-1238346 .. 146742)\n\n```\n",
      "votes": "5",
      "user": "Willem Hengeveld",
      "time": "Jun 3, 2014 at 8:27",
      "is_accepted": true,
      "comments": [
        {
          "user": "martin",
          "text": "Ah, it could be so simple. I'll try it with other, bigger sets of vertices and import them into Blender to see whats going on.",
          "time": null
        },
        {
          "user": "martin",
          "text": "Yeah, that's it. Just simple 32bit signed ints. I successfully managed to extract the vertices. Now I need to normalize them. I want the dimension with the largest extend to lie between 0 and 1 and the smaller dimensions to lie between 0 and <0. Aspect ratio should be maintained. Should I ask here or somewhere else? What's the right way?",
          "time": null
        },
        {
          "user": "Clockwork-Muse",
          "text": "You may want to state why you reversed the byte order, because I was initially slightly confused as to that point.",
          "time": null
        },
        {
          "user": "martin",
          "text": "The byte order has to be reversed because the numbers are saved in little endian format.",
          "time": null
        },
        {
          "user": "Willem Hengeveld",
          "text": "@madmartin: i think that is more a math question, what you are looking for is called translation, and scaling.",
          "time": null
        }
      ]
    }
  ]
}