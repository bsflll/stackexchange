{
  "title": "Reproducing video format",
  "link": "https://reverseengineering.stackexchange.com/questions/23021/reproducing-video-format",
  "content": "I received a promotional video screen with a USB interface. It comes with a couple example videos, one of which is here: https://drive.google.com/file/d/1B-wSURAgK-ePrfpKFM5nYbNhQ5mD-Ii2/view?usp=sharing md5sum 506a6c478b0874262802e8ae7d718c59\n\nI'd love to figure out how to generate this file format, but I don't have much experience in reverse engineering. It seems to be a mostly normal AVI file, and can play in VLC just fine.\n\nI've been poking around with ffprobe, in a hex editor, and RiffPad, and found the following things:\n\nAny help with what to do next would be very appreciated.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "208",
  "tags": [
    "file-format"
  ],
  "user": "rsheldiii",
  "time": "Jan 16, 2020 at 17:59",
  "comments": [
    {
      "user": "rsheldiii",
      "text": "I've mostly resolved to figuring this out by myself. Given that VLC reads the frames and video itself with no issue I know I'm dealing with someone that should be reasonable - it looks like a bog-standard MJPEG, 4:2:0 subsampling, the 4 standard huffman tables embedded for some reason and 2 quantization tables.  I've found the BinData gem and I'm bitbanging this out",
      "time": null
    }
  ],
  "answers_data": []
}