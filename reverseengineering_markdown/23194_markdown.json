{
  "title": "ELF imported symbols colision",
  "link": "https://reverseengineering.stackexchange.com/questions/23194/elf-imported-symbols-colision",
  "content": "From what I understand, the ELF format doesn't specify which symbols come from which file - Every ELF that uses import has a list of symbols to import and list of file names, and the loader is trying to locate those symbols in the file names. \n\nBut what happens if there is a collision - the same symbol appears twice, in different files? Is it possible to somehow force by the ELF format the destination file to look for a specific symbol? \n\n",
  "votes": "2",
  "answers": 1,
  "views": "233",
  "tags": [
    "elf"
  ],
  "user": "macro_controller",
  "time": "Feb 5, 2020 at 12:54",
  "comments": [],
  "answers_data": [
    {
      "content": "This should be the problem of the linker at compile time. These things are not solved dynamically but statically. It should produce an error of the kind multiple definition as illustrated on the following example (taken from here): \n\n```\n/tmp/ccscmcbS.o:(.bss+0x0): multiple definition of `global_base'\n/tmp/ccyjhjQC.o:(.bss+0x0): first defined here\n/tmp/ccscmcbS.o: In function `find_free_block':\nsupport.c:(.text+0x0): multiple definition of `find_free_block'\n/tmp/ccyjhjQC.o:main.c:(.text+0x0): first defined here\n/tmp/ccscmcbS.o: In function `request_space':\nsupport.c:(.text+0x55): multiple definition of `request_space'\n/tmp/ccyjhjQC.o:main.c:(.text+0x55): first defined here\n/tmp/ccscmcbS.o: In function `get_block_ptr':\nsupport.c:(.text+0xfe): multiple definition of `get_block_ptr'\n/tmp/ccyjhjQC.o:main.c:(.text+0xfe): first defined here\ncollect2: error: ld returned 1 exit status\n\n```\n",
      "votes": "3",
      "user": "perror",
      "time": "Feb 5, 2020 at 15:43",
      "is_accepted": true,
      "comments": [
        {
          "user": "macro_controller",
          "text": "I understand the compile-time, but my question is about the run time because then It's possible to do some naughty stuff",
          "time": null
        },
        {
          "user": "perror",
          "text": "Well, it can't be possible at runtime because it would be stopped at compile time... except if you use dlopen. But, in this case, the first loaded symbol will stay and anything with the same name will be rejected.",
          "time": null
        },
        {
          "user": "macro_controller",
          "text": "So basically the resolve order is the key? If the symbol name is found, the search is over, and there is no chance for the other name to be loaded too?",
          "time": null
        },
        {
          "user": "perror",
          "text": "The thing is that two same symbols cannot be loaded. I one is already present, the second won't make it. At build time or at run time... Collisions are avoided at any price.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@macr0controller correct. You may want to check out LD_PRELOAD and friends. macOS has a similar facility (DYLD_INSERT_LIBRARIES).",
          "time": null
        }
      ]
    }
  ]
}