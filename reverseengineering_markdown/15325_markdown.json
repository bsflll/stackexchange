{
  "title": "Ways to detect Function hooking?",
  "link": "https://reverseengineering.stackexchange.com/questions/15325/ways-to-detect-function-hooking",
  "content": "I making a game and I'm trying to find a way to prevent against function hooking (IAT/VMT/etc), or at the least detect it, I understand how they work but dont see a very reliable way to detect or prevent them. Does anyone have any ideas on how to do this? it would be greatly appreciated.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "function-hooking"
  ],
  "user": "Xiurt",
  "time": "May 10, 2017 at 23:43",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "it's a bit too broad asked like this but this and this should give you some hints.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here are several possible solutions for the problem. Generally specking you will need a combination of watchdog and hidden traps. This will not be a bullet proof but will be good enough to make it hard on the attacker to hook your game.\n\nVary Basic:\n\nBasic:\n\nAdvanced Basic (in addition to Basic):\n\nAdvanced (in addition to the above):\n\nMore Advanced:\n\nThat's for now. I'll think about more options along the way.\n\n",
      "votes": "1",
      "user": "PhoeniX",
      "time": "May 14, 2017 at 5:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This ties into the Turing-old problem of execution prevention. So, I'll try to answer a very general question in a very general way.\n\nPerhaps the most common method for function hooking is editing the IAT at runtime or during execution(Or the constant address table in .rdata for local functions). But detecting function hooks by checking the IAT is completely unreliable. It's like assuming a page that has been torn out of a book is still there because the index says it is. No runtime-filled tables (IAT, VMT, Windows Executable Header) containing references to instructions are guaranteed to provide any conclusive information as to what is actually being executed in memory. \n\nA common method for hooking that is invisible to a program's address tables is applied by placing a jump instruction into the assembly of the targeted function directly after the stack pointer is moved into the base pointer to be pushed and before the stack is expanded.\n\nSo, speaking in terms of reliable automatic prevention, we are led to the conclusion that we must derive the conditions upon which our \"Hook Detector\" detects function hooks from the predictability of our program's execution procedure. \n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "May 13, 2017 at 12:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "are you going to expand on this or that's your whole answer?",
          "time": null
        },
        {
          "user": "Nash",
          "text": "Doing some research/analysis of patterns. Will expand when I have more insight. You're a Hex-Rays overlord so feel free to correct and edit.",
          "time": null
        }
      ]
    }
  ]
}