{
  "title": "Reversing an MFC application: How to find class memory layouts?",
  "link": "https://reverseengineering.stackexchange.com/questions/12385/reversing-an-mfc-application-how-to-find-class-memory-layouts",
  "content": "I have an old computer game I want to reverse (Windows 95 \"Hover!\" to be exact), and I figured out that it uses the MFC.\n\nHexRays often decompiles pseudocode like this, which, for example, deals with an MFC class CWinThread:\n\n\nAs you can see, the variable this is the CWinThread instance, but the layout of it seems undefined, it accesses its members through offsets.\n\nI want / need to find out which members are at which offsets.\n\nEven while easy to guess in the marked example (+48 seems to be the peeked message), there's another member slightly more below at offset +60 about which I have no clue. I searched the MSDN documentation and looked into the header file to find a layout of the class, but couldn't find anything that helped me.\n\nWhere would I retrieve such member / memory layout information about MFC classes?\n\n",
  "votes": "4",
  "answers": 3,
  "views": "5k",
  "tags": [
    "hexrays",
    "mfc"
  ],
  "user": "Ray",
  "time": "Apr 12, 2016 at 17:51",
  "comments": [],
  "answers_data": [
    {
      "content": "You might have a look here, line number 456.\n\nThe method you are looking for seems to be the OnIdle function.\n\nRemark: In 2018, the link is not active any more. However, the sources might be found in a Visual Studio Community edition (I am using VS2015), directory\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\atlmfc\\src\\mfc\".\nThe CWinThread class is contained in the file thrdcore.cpp.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ray",
          "text": "That's pretty amazing! Anyway, if I find another MFC class, how would I look this up?",
          "time": null
        },
        {
          "user": "josh",
          "text": "According to MS, the MFC full source code has been released by them. See msdn.microsoft.com/en-us/library/bs046sh0.aspx. Possibly only in the professional version of VStudio. Until some years ago, I had made many projects with MFC, and it was always possible to step into the MFC sources. However, I have not much reversing experience with them. The Ida decompiler seems to do a good job in the recognition of MFC.",
          "time": null
        },
        {
          "user": "Ray",
          "text": "The link seems dead, is it possible to get a new one?",
          "time": null
        },
        {
          "user": "josh",
          "text": "Here the link is still alive!",
          "time": null
        },
        {
          "user": "josh",
          "text": "No problem, Ray. I searched a little and could not find the sources in the web. However, they are contained in VStudio. I edited the answer accordingly.",
          "time": null
        }
      ]
    },
    {
      "content": "In order to easily import the information into IDA it's possible to:\n\nThe types should appear in the \"Local Types\" tab now.\n\n",
      "votes": "2",
      "user": "user202729",
      "time": "Sep 25, 2018 at 16:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "user202729",
          "text": "@RayKoopa Cannot reproduce. / Does any other struct definition get loaded?",
          "time": null
        },
        {
          "user": "Ray",
          "text": "Nevermind, I was dumbly trying to load the PDB generated for a sample MFC app. I now loaded the PDB files provided with the MFC source. However, IDA only creates a vtable for the main class (like CObject) and not for child classes, like CWinApp. That makes it slightly useless...",
          "time": null
        }
      ]
    },
    {
      "content": "One way would be to get your hand on a copy of the compiler that was used to produce the binary, including the stock libraries that shipped with it - ideally the exact same version, or at least as close as possible. \n\nThen you can simply compile suitable little test programs and load them into IDA for inspection and/or in order to export the type info and import it into the IDA database for your binary. Single struct defs can easily be transported via the clipboard (display as C struct, copy, switch to the other IDA, paste).\n\n",
      "votes": "0",
      "user": "DarthGizka",
      "time": "Apr 9, 2016 at 5:13",
      "is_accepted": false,
      "comments": []
    }
  ]
}