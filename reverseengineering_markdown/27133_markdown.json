{
  "title": "When sampling the call stack, what is the point of grouping it just because the function addresses are close?",
  "link": "https://reverseengineering.stackexchange.com/questions/27133/when-sampling-the-call-stack-what-is-the-point-of-grouping-it-just-because-the",
  "content": "https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/\n\nWhy does it make sense to group them together just because they are close?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "50",
  "tags": [
    "callstack"
  ],
  "user": "misaki",
  "time": "Mar 2, 2021 at 6:02",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "Since two, or more addresses are part of the same function why would you not group them together?",
      "time": null
    },
    {
      "user": "misaki",
      "text": "Why does it make sense to have \"close addresses\" instead of \"same address\"?　If it's the same function, it should have the same address... I think...",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "The func A from the lib has calls to strcmp@0xDEADBEEF and strlen@ 0xDEADBEADin it that are expensive. Since you analyze the lib, you want to see the performance metrics on func A level. Since there are no symbols, the tool cannot say that 0xDEADBEEF and 0xDEADBEED are both part of func A so you have to do the grouping based on proximity. That's my understanding for the grouping (I would probably do the same) but ofc you could ask the author for his clarification.",
      "time": null
    }
  ],
  "answers_data": []
}