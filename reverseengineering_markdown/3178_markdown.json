{
  "title": "What impact does noninvasive debugging have?",
  "link": "https://reverseengineering.stackexchange.com/questions/3178/what-impact-does-noninvasive-debugging-have",
  "content": "What impact does noninvasive user mode debugging with WinDbg have on the process?\nWill it be detectable by the process?\n\nOf course I could imagine that if the threads are suspended, differences in execution time of a function could be detected by comparing to \"usual\" values.\n\nMicrosoft itself does not indicate more impact than suspending threads. Is that true?\n\n",
  "votes": "10",
  "answers": 2,
  "views": "1k",
  "tags": [
    "anti-debugging",
    "windbg"
  ],
  "user": "Thomas Weller",
  "time": "Dec 13, 2013 at 8:35",
  "comments": [],
  "answers_data": [
    {
      "content": "It is effectively true that there is no additional impact.  Non-invasive debugging is simply suspending the process, and then reading the register context and memory.  Since there are no alterations to the memory, there isn't any physical thing to detect.  The timing discrepancies that it introduces are detectable, but the same effects can be produced by a system under heavy load, so the detection is unreliable for that reason (though the author of the detection routine might not care).\n\nHowever, the very presence of an active debugger anywhere on the system is detectable, independently of the method used to debug.  The non-invasive debugging technique simply defeats some of the more common methods.\n\n",
      "votes": "8",
      "user": "peter ferrie",
      "time": "Dec 13, 2013 at 19:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Exception handling can also make a difference. I'm currently looking at some code which triggers exceptions causing program termination if run outside the debugger under the right circumstances. When the same happens inside the debugger, the exception handling is intercepted and the program behaves differently (it doesn't crash anymore but it also doesn't behave as if run outside the debugger).\n\n",
      "votes": "1",
      "user": "Devolus",
      "time": "Dec 14, 2013 at 11:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "Exceptions should not make any difference, since the non-intrusive debugger won't see them.  Plenty of applications behave differently in the presence of an attached debugger.  The question is whether the application that you have behaves the same way without any debugger compared to the non-intrusive debugger (it should).  If there's a difference, then perhaps the application detected the debugger.",
          "time": null
        }
      ]
    }
  ]
}