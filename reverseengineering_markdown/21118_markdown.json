{
  "title": "Can I define custom enum-type to be used in Ghidra as a data type?",
  "link": "https://reverseengineering.stackexchange.com/questions/21118/can-i-define-custom-enum-type-to-be-used-in-ghidra-as-a-data-type",
  "content": "I'm trying to learn Ghidra. Say, if it generated the following code for loading functions from an array of function names from gpfnCommCtrlAPI:\n\n\n\nI was able to retype gpfnCommCtrlAPI into char*[14] which made it quite readable:\n\n\n\nBut then is it possible to retype g_pfnsUxCtrl, a pointer to an array of function pointers, (possibly with a custom enum) to make it a little bit more readable? Here's an example of how it looks now in case of g_pfnsUxCtrl[7]:\n\n\n\nPS. To understand what index 7 refers to in that case I need to go back to the gpfnCommCtrlAPI array, which may not be immediately available where g_pfnsUxCtrl[7] is used.\n\nPS2. In that case case, I manually renamed p_comctl32_HandleScrollCmd variable to make it more readable.\n\n",
  "votes": "10",
  "answers": 1,
  "views": "6k",
  "tags": [
    "windows",
    "binary-analysis",
    "decompilation",
    "static-analysis",
    "ghidra"
  ],
  "user": "c00000fd",
  "time": "Apr 11, 2019 at 6:42",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Which executable file did you analyse?",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@Biswapriyo: comctrl32.dll x86 build from Win10.",
      "time": null
    },
    {
      "user": "Simeon Pilgrim",
      "text": "that sounds like you want a typedef if you want X to mean g_pfnsUxCtrl[7] unless your want to use the enum to replace the 7",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "you are able to add your own enum type inside Data Type Manager. (Keep in mind to select correct size).\n\n\n\n\n\n\n\nThen you should be able to change the type to your newly created enum and everything should be nicely resolved.\n\n",
      "votes": "3",
      "user": "erexo",
      "time": "Apr 23, 2019 at 9:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "c00000fd",
          "text": "yeah, that's how you define a generic enum. But how would you apply it to the particular example I showed above?",
          "time": null
        },
        {
          "user": "erexo",
          "text": "if that proc list is relatively short with const count and you really would like custom names instead of integers, then you can create a custom type with lots of integers of different names. Then you'll have a single object with couple of variables and each of those will have a custom name. And if those addresses are constant which is kinda stupid but you can look where you land with that, you can try to set p_comct132_HandleScrollCmd to enumType and g_pfnsUxCtrl to pointer to enumType. Both solutions are silly, in your case I'd just memorize those integers",
          "time": null
        }
      ]
    }
  ]
}