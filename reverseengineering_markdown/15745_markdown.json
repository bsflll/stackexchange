{
  "title": "Why shell code only with nop slide working for me?",
  "link": "https://reverseengineering.stackexchange.com/questions/15745/why-shell-code-only-with-nop-slide-working-for-me",
  "content": "I'm trying to understand the exploit for SLMail 5.5.\n\nHere is the basic flow :\n\n4) Below are the first few instructions that my shellcode has without NOP slide, as soon as the highlighted weird instruction is executed, the instructions in the memory are getting changed (So weird!!)\n\n```\n0159A128   BF A849F49D      MOV EDI,9DF449A8\n0159A12D   D9E5             FXAM\n0159A12F   D97424 F4        FSTENV (28-BYTE) PTR SS:[ESP-C] <-- Weird instruction\n0159A133   5B               POP EBX\n0159A134   33C9             XOR ECX,ECX\n0159A136   B1 52            MOV CL,52\n0159A138   317B 12          XOR DWORD PTR DS:[EBX+12],EDI\n0159A13B   83EB FC          SUB EBX,-4\n0159A13E   03D3             ADD EDX,EBX\n\n```\nMy memory looks this after the execution of the highlighted instruction:\n\n```\n0159A12F   0100             ADD DWORD PTR DS:[EAX],EAX\n0159A131   0000             ADD BYTE PTR DS:[EAX],AL\n0159A133   0000             ADD BYTE PTR DS:[EAX],AL <--Jumping here after the weird instruction\n0159A135   00FF             ADD BH,BH\n0159A137   FF31             PUSH DWORD PTR DS:[ECX]\n0159A139   7B 12            JPO SHORT 0159A14D\n0159A13B   83EB FC          SUB EBX,-4\n0159A13E   03D3             ADD EDX,EBX\n\n```\nBut with NOP slide appended to the shellcode, the below instruction which is actually in the line of execution gets excuted weithouit any hassle and making the exploit to work.... \n\n```\n0159A133   5B               POP EBX\n\n```\nCan anyone explain why I need NOP slide to stop this weird behavior.\nThank You.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "exploit",
    "metasploit"
  ],
  "user": "Vinod Pn",
  "time": "Jul 2, 2017 at 5:50",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "why did you put FSTENV  in your shellcode?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "oh, you used the encoder. I guess it screwed up somehow.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Let's look up what the \"weird instruction\" does:\n\nIn our case, the destination is ESP-C, which is 12 bytes before the start of the code (if code starts at ESP). Since the FPU state is 28 bytes, it goes further and overwrites the beginning of shellcode with the FPU values. If you add a NOP sled, the sled gets overwritten which has no effect because it won't be executed again. Without the sled, the currently executing instructions are overwritten which breaks the shellcode.\n\nApparently FSTENV is used as a part of the \"getpc\" primitive (one of the values stored is the current EIP) and it requires some stack space for the environment. So you need to ensure that either you have free space around ESP or add a NOP sled for padding. Or you can try modifying the encoder to use a more common call $+5/pop ebx sequence which would overwrite only one dword at ESP.\n\n",
      "votes": "6",
      "user": "Igor Skochinsky",
      "time": "Jul 2, 2017 at 9:26",
      "is_accepted": true,
      "comments": [
        {
          "user": "shebaw",
          "text": "Had to log in to upvote this. Nice observation.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "the technique is described in the \"Shellgames\" presentation on my site.  [esp-0c] allows a pop instruction to be used to return EIP in the popped register.  However, you need the stack pointer to be far enough from the code to avoid being overwritten.",
          "time": null
        }
      ]
    }
  ]
}