{
  "title": "Is there always 1:1 correlation between hexadecimal and binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/3555/is-there-always-11-correlation-between-hexadecimal-and-binary",
  "content": "I was wondering this because I have found that some instructions, on the machine code level, are too large if taken a step down from hex to 0s and 1s.\n\nOn Motorola 68000 I found that some instructions need multiple parts, and/or need to actually have three instructions because the data can't all fit(such as writing a string).\n\nBut I decided to make this really simple with the x86 instruction pusha.\n\npusha is 0x60 in hexadecimal, which is not even one byte: 1100 000.\n\nWILL x86 will parse this (assuming I write this in an executable directly) without adding an extra zero to make it two bytes?\n\nBasically, I have noticed some issues with transferring hexadecimal to bin, so I was wondering, once again ... is hexadecimal always 1:1 correlated with binary, or is some modding needed sometimes(such as with those regarding size)?\n\n",
  "votes": "-2",
  "answers": 1,
  "views": "208",
  "tags": [
    "binary-analysis",
    "hex",
    "machine-code"
  ],
  "user": "Lucky Wicker",
  "time": "Jan 25, 2014 at 22:42",
  "comments": [
    {
      "user": "alexanderh",
      "text": "I have found this link to be helpful in regards to explaining x86 encoding - c-jump.com/CIS77/CPU/x86/lecture.html#X77_0010_real_encoding",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "\"which is not even one byte: 1100 0000\" (You missed an extra 0.) How many bytes do you believe it is, then? Two (2 pairs of 0s and 1s)? Four, since the hex form is 0x60? 9: 6 0s, 2 1s, and including the space?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is always a 1:1 ratio. 0x60 is a byte 0110 0000 always. Its very beneficial to understand that everything just comes back to binary. The rest is all just representations. There is no difference between 'A', 0x41, and 0b01000000. You will have to put the leading zero infront of your example, although compilers could assume, that i'm not sure of) but there is a large difference better 0b01100000 (PUSHA) and 0b1110000 (LOOPNZ).\n\nFor x86, it might be interesting for you to look at the op code encoding a table can be found here\n\nIn terms of machine code, the op code deems how many more bytes are needed to complete an instruction. This is one of the differences between a RISC (e.g. ARM) and CISC (e.g. x86) architectures. RISC instructions sets use a fixed instruction length, where as CISC instruction sets have variable instruction lengths.\n\n",
      "votes": "3",
      "user": "jbh",
      "time": "Jan 25, 2014 at 22:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}