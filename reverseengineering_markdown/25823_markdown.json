{
  "title": "What is the meaning of ARM LDAXR/STLXR instructions?",
  "link": "https://reverseengineering.stackexchange.com/questions/25823/what-is-the-meaning-of-arm-ldaxr-stlxr-instructions",
  "content": "Often while disassembling ARM files, I see some code snippet with the following pattern:\n\n```\nloc_BB30:\n.text:C0 FE 5F 88 LDAXR           WZR, W0, [X22]\n.text:00 04 00 51 SUB             W0, W0, #1\n.text:C0 FE 01 88 STLXR           W1, W0, [X22]\n.text:A1 FF FF 35 CBNZ            W1, loc_BB30\n\n```\nWhich is translated to the following decompile code:\n\n```\n  do\n  {\n    v2 = __ldaxr((unsigned int *)v1);\n    v1 = (unsigned int)(v1 - 1);\n  }\n  while ( __stlxr(v1, v3) );\n\n```\nWhat is the meaning of this code? What kind of c code actually produces this kind of snippet?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "arm"
  ],
  "user": "macro_controller",
  "time": "Sep 6, 2020 at 11:18",
  "comments": [],
  "answers_data": [
    {
      "content": "This general pattern of exclusive-access instructions is usually seen when atomic variables are modified.\n\nC++ Example (C++11 or later)\n\n```\n  #include <atomic>\n\n  void release( std::atomic<int>& refcount ) {\n      refcount--;\n  }\n\n```\nYou can see here on godbolt that GCC's ARM64 compilation of the above produces your assembly code.\n\nC Example (C11)\n\n```\n#include <stdatomic.h>\n\nvoid release( _Atomic int* refcount ) {\n    (*refcount)--;\n}\n\n```\nGodbolt version here\n\nC Example (prior to C11, using GCC built-ins)\n\n```\nvoid release( int* refcount ) {\n    __atomic_sub_fetch( refcount, 1, __ATOMIC_ACQ_REL );\n}\n\n```\nGodbolt version here\n\n",
      "votes": "5",
      "user": "Ian Cook",
      "time": "Sep 8, 2020 at 8:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}