{
  "title": "Arm ldr diffrent between # and =",
  "link": "https://reverseengineering.stackexchange.com/questions/17786/arm-ldr-diffrent-between-and",
  "content": "In ARM assembly, what is the difference between \n\nldr r4, =0x44454433\n\nand\n\nldr r4, #0x44454433 ?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "binary-analysis",
    "arm"
  ],
  "user": "Hcjf",
  "time": "Mar 25, 2018 at 19:16",
  "comments": [],
  "answers_data": [
    {
      "content": "the first one ldr r4, =0x44454433 is a valid pseudo instuction\n\nthe second one is invalid \n\nbtw the syntax is not for a real instruction but an alias a pseudo instruction  \n\nthe assembler creates proper instruction with respect to immediate values  \n\nmost of these questions can be answered by assembling a single instruction and \ndisassembling it\nyou can use armasm from msvc \nor you can use keystone with python or\nuse the innumerable online assembler disassembler sites   \n\n```\nimport sys\nfrom keystone import *\ninstruction = raw_input(\"Enter your arm instruction :  \")\nprint instruction\n\nks = Ks(KS_ARCH_ARM,KS_MODE_ARM|KS_MODE_THUMB)\nblah = ks.asm(instruction)\nfor i in blah[0]:\n    print \"%02x \" % i, \nprint \"  \n\"\n\n```\nexecuted the script to get \n\n```\n:\\>python asmarm.py\nEnter your arm instruction :  ldr r4,=0x44455533\nldr r4,=0x44455533\n00  4c  00  bf  33  55  45  44\n\n```\non the other hand if you try assembling the second instruction it will raise an error unexpected token\n\n```\n:\\>python asmarm.py\nEnter your arm instruction :  ldr r4,=#0x44554533\nldr r4,=#0x44554533\nTraceback (most recent call last):\n  File \"asmarm.py\", line 7, in <module>\n    blah = ks.asm(instruction)\n  File \"c:\\python27\\lib\\site-packages\\keystone\\keystone.py\", line 198, in asm\n    raise KsError(errno, stat_count.value)\nkeystone.keystone.KsError: Unknown token in expression (KS_ERR_ASM_EXPR_TOKEN)\n\n```\nor you can use capstone to disassemble a hex byte sequence\n\nas below\n\n```\nimport sys\nfrom capstone import *\nimport binascii\ninp = binascii.unhexlify( ''.join(sys.argv[1].split()))\ncs = Cs(CS_ARCH_ARM , CS_MODE_THUMB)\ncs.Detail = True\ndis = cs.disasm( inp,  int(sys.argv[2],16))\nfor i in dis:\n    print(\"0x%x:\\t\" % i.address),\n    print(binascii.hexlify(i.bytes)),\n    print(\"\\t%s\\t%s\" %(i.mnemonic, i.op_str)) \n\n```\nexecuting the script \n\n```\n:\\>discap.py \"00  4c  00  bf  33  55  45  44\" 0x440000\n0x440000:       004c    ldr     r4, [pc, #0]\n0x440002:       00bf    nop\n0x440004:       3355    strb    r3, [r6, r4]\n0x440006:       4544    add     r5, r8\n\n```\nif you use msvc route you need to open a vsdev cmdprompt with a proper architecxture and simple use armasm with an input file  as below \n\nset correct arch and host\n\n```\nC:\\>cat bld.bat\npushd ..    \ncall \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\vsdevcmd.bat\" -arch=arm -host_arch=x86   \n\n```\nsrc file contents \n\n```\nC:\\>cat myasm.asm\n    AREA .text, CODE, ARM\ntest PROC\n    ldr r4,=0x44455533\n    ENDP    \n    END\n\n```\nexecute and open a msvc arm devprompt\n\n```\nC:\\>bld.bat\n\nC:\\>pushd ..\n\nC:\\>call \"C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\vsdevcmd.bat\" -arch=arm -host_arch=x86\n**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.6.1\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\nC:\\>popd\n\n```\nassemble the input file \n\n```\nC:\\>armasm myasm.asm\nMicrosoft (R) ARM Macro Assembler Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n```\ndisassemble the obj file \n\n```\nC:\\>dumpbin /disasm myasm.obj\nMicrosoft (R) COFF/PE Dumper Version 14.13.26128.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file myasm.obj\n\nFile Type: COFF OBJECT\n\ntest:\n  00000000: 4C00      ldr         r4,00000004\n  00000002: 0000      movs        r0,r0\n  00000004: 5533      strb        r3,[r6,r4]\n  00000006: 4445      add         r5,r5,r8\n\n  Summary\n\n          60 .debug$S\n           8 .text\n\nC:\\> \n\n```\n",
      "votes": "4",
      "user": "blabb",
      "time": "Mar 26, 2018 at 18:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "not2qubit",
          "text": "Exactly what I was looking for. Thanks for showing capstone and keystone.",
          "time": null
        },
        {
          "user": "not2qubit",
          "text": "What pip package is keystone?",
          "time": null
        }
      ]
    },
    {
      "content": "Although this is be a simple LMGTFY question, I'm going to answer since it took me some time to find it.\n\nAssuming it's 32bit ARM all the opcodes are 4 bytes long so this poses a question how one can include a 32bit value in the opcode if opcode with such big data would not fit in 4 bytes.\n\n```\nldr r4, =0x44454433\n\n```\nis a pseudo-instruction.\n\nThe other const #0x44454433 is just a const value, but with this form (having 32 bit value in it and just the value) seems invalid (not an expert on ARM).\n\n",
      "votes": "3",
      "user": "Paweł Łukasik",
      "time": "Mar 25, 2018 at 6:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "Correct. It just a convenient shorthand notation for \"load a large constant from a nearby address\". It is not an instruction in itself; a disassembler may choose to show it that way, but the actual code is something different.",
          "time": null
        },
        {
          "user": "Brendan Dolan-Gavitt",
          "text": "If you're curious about what immediate values can be represented in the instruction directly, I thought this was a nice resource: alisdair.mcdiarmid.org/arm-immediate-value-encoding",
          "time": null
        }
      ]
    }
  ]
}