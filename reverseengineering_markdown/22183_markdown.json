{
  "title": "Simple C program disassembled with Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/22183/simple-c-program-disassembled-with-ghidra",
  "content": "I am trying to figure out what is going on with my simple example programs, when I disassemble them with Ghidra. I am not sure whether this is some strange Ghidra behaviour or something that is set by default during compile time which produce a lot of assembly code, but I actively write only few LOC.\n\nHere is my sample C program created with VS Studio 2017:\n\n```\nvoid main()\n{\n    int x = 1;\n    int y = 2;\n    x = x + y;\n}\n\n```\nAnd this is what I get when I try to disassemble it with Ghidra:\n\n\n\nThe above screenshot is from the supposed 'entry' point of the program. But why is it so complex? I did a simple program to test how local variables are presented in Assembly and I get such output. Yet it should be few simple Assembly commands instead.\n\n\n\nI am not sure what I am missing out here, so if someone could help me to try and understand this, I would be grateful.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "6k",
  "tags": [
    "disassembly",
    "assembly",
    "c",
    "ghidra"
  ],
  "user": "Rebegin",
  "time": "Sep 24, 2019 at 13:09",
  "comments": [],
  "answers_data": [
    {
      "content": "Program entry point != main\n\nYou're seeing disassembly of a few of the functions automatically linked to the program by the compiler toolchain that are responsible for setting up the C Run-Time (CRT) environment. \n\nFrom Microsoft's CRT Initialization:\n\nFrom What is the difference between main and mainCRTStartup?:\n\nAn exercise you may find interesting is compiling the following code (assuming VS Studio 2017 allows it) and then disassembling the resulting binary:\n\nint main(){}\n\nHere is the Linux version: Linux x86 Program Start Up\n\n",
      "votes": "5",
      "user": "julian",
      "time": "Sep 24, 2019 at 16:47",
      "is_accepted": true,
      "comments": [
        {
          "user": "Rebegin",
          "text": "Thank you Julian, a bit clearer now. However, where can I find my main function then? I cannot locate it.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@Rebegin main should be called at some point by mainCRTStartup. If you're still having a hard time finding it in the disassembly of the program, you can first run the program using a debugger and set a breakpoint at main, look at the call stack, and then revisit the disassembly and decompilation produced by Ghidra",
          "time": null
        },
        {
          "user": "Rebegin",
          "text": "Thanks Julian, nice tips. Will do that. I have one other question, but I will open another thread here, because it requires a bit more information. I am essentially trying to learn difference between Global vs Local variables in Assembly. I know the theory that global are stored in Memory, and Local variables are on Stack, but I want to see it with my C code and my disassembly.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@Rebegin you are welcome",
          "time": null
        }
      ]
    }
  ]
}