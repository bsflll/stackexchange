{
  "title": "lldb - breakpoint not reached when attach do process (but executing when set before app running)",
  "link": "https://reverseengineering.stackexchange.com/questions/9445/lldb-breakpoint-not-reached-when-attach-do-process-but-executing-when-set-bef",
  "content": "I am trying to set breakpoint to existing processes, but when i am trying to do it breakpoint is not reached, but when i am running app directly in lldb and set breakpoint before it runs all breakpoints are wokring fine. Let's have a look on example:\n\nFirst case (trying to attach to exising process):\n\n```\nMacBook-Pro-Michal:Damn m1entus$ ps aux | grep -i calculator\nm1entus         28940   0,0  0,0  2432772    676 s001  S+    1:21     0:00.00 grep -i calculator\nm1entus         28863   0,0  0,2  2762000  36000   ??  U     1:19     0:00.73 /Applications/Calculator.app/Contents/MacOS/Calculator\n\n```\nnext\n\n```\n(lldb) attach -p 28863\n\n```\nnext\n\n```\n(lldb) b *0x00000001000093dd\nBreakpoint 1: address = 0x00000001000093dd\n(lldb) c\nProcess 28863 resuming\n\n```\nAnd nothing is happening when open showAbout... (i took address from Hopper)\n\nSecond case (run app with lldb command):\n\n```\nMacBook-Pro-Michal:Damn m1entus$ lldb /Applications/Calculator.app/Contents/MacOS/Calculator \n(lldb) target create \"/Applications/Calculator.app/Contents/MacOS/Calculator\"\nCurrent executable set to '/Applications/Calculator.app/Contents/MacOS/Calculator' (x86_64).\n(lldb) b *0x00000001000093dd\nBreakpoint 1: address = 0x00000001000093dd\n(lldb) run\nProcess 28972 launched: '/Applications/Calculator.app/Contents/MacOS/Calculator' (x86_64)\n\n```\nwhen i open showAbout: in Calculator my breakpoint is reached:\n\n```\nProcess 28972 stopped\n* thread #1: tid = 0x8f823, 0x00000001000093dd Calculator`___lldb_unnamed_function161$$Calculator, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n frame #0: 0x00000001000093dd Calculator`___lldb_unnamed_function161$$Calculator\nCalculator`___lldb_unnamed_function161$$Calculator:\n->  0x1000093dd <+0>:  pushq  %rbp\n0x1000093de <+1>:  movq   %rsp, %rbp\n0x1000093e1 <+4>:  movq   0x12b98(%rip), %rdi       ; (void *)0x00007fff7374e488: NSDictionary\n0x1000093e8 <+11>: movq   0x12301(%rip), %rsi       ; \"dictionaryWithObject:forKey:\"\n\n```\nCould someone could explain me why it is happening and how to attach to exising process and hit breakpoint ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "567",
  "tags": [
    "gdb",
    "osx",
    "ios",
    "lldb",
    "breakpoint"
  ],
  "user": "Michal Zaborowski",
  "time": "Jul 25, 2015 at 11:44",
  "comments": [],
  "answers_data": [
    {
      "content": "The reason is due to address space layout randomization (ASLR). The dynamic loader will employ some randomization in the starting address (the slide) which you must account for. When you start the application in lldb, no slide is applied so the addresses are the same.\n\nHere is an example of it in action from two different Calculator apps running\n\nThe default starting address for the TEXT segment is 0x0100000000 so the first one is applying a slide of 0x40c6000 and the second has a slide of 0x5e21000.\n\nLet's say I wanted to set a breakpoint on -[LCDController showValue]. For my particular version of Calculator, this has an address of 0x0100001610. If I start Calculator in lldb, I can simply put a breakpoint on that address but if I attach to one already loaded I must account for the slide. In the first example, I would need to put a breakpoint on:\n\n```\n0x0100001610 + 0x40c6000 = 0x1040c7610\n\n```\nand the second that would be:\n\n```\n0x0100001610 + 0x5e21000 = 0x105e22610.\n\n```\n",
      "votes": "3",
      "user": "kenorb",
      "time": "Feb 16, 2016 at 23:25",
      "is_accepted": false,
      "comments": []
    }
  ]
}