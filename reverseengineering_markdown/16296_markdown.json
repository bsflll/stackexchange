{
  "title": "Knowledge about CPU hardware",
  "link": "https://reverseengineering.stackexchange.com/questions/16296/knowledge-about-cpu-hardware",
  "content": "Recently, I have taken the computer organization course that explains in the logic gate level how a CPU works and etc...\n\nUp until now I have been treating the CPU as a black box that runs assembly instructions, even when I was learning in my free time about cracking, and doing exploits, and reverse engineering in general. \n\nBut that got me wondering, in the security field, how much research is being done using or combining CPU bugs, like software bugs, and using it to run code remotely or do other stuff. \n\nDo reverse engineers, who try to find computer exploits, gain an advantage if they know the internal implementation of the CPU? Down to the logic gate level of course, not just the high level components. \n\n",
  "votes": "23",
  "answers": 4,
  "views": "4k",
  "tags": [
    "disassembly",
    "assembly",
    "hardware",
    "exploit"
  ],
  "user": "user4906231",
  "time": "Sep 8, 2017 at 12:21",
  "comments": [],
  "answers_data": [
    {
      "content": "To extend the answer of perror:\n\nPerhaps you should take a look into a recently published whitepaper named Breaking the x86 ISA, by Christopher Domas. It was published on blackhat17 and describes an approach for digging into x86 chips and extracting hidden machine instructions.\n\nSomehow related microcode-internals from academia:\n\nEDIT: I added the reference mentioned by Dan.\n\nEDIT: I added the recently published spectre or meltdown attack, which exploits critical vulnerabilities in modern processors.\n\n",
      "votes": "25",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Dan Mills",
          "text": "And then there was this from a couple of years back: media.ccc.de/v/29c3-5265-en-page_fault_liberation_army_h264 Seems the page fault mechanisms interaction with the MMU on X86 is actually Turing complete.",
          "time": null
        }
      ]
    },
    {
      "content": "In fact, the CPU are much more checked and verified than programs. It is very unlikely to find a (significant) bug in a CPU. Even though it happens from time to time.\n\nTherefore, it is much more interesting to look at software bugs (because they are more likely) than hardware bugs.\n\nYet, you have a few occurrences of hardware bugs that led to disclosure of some \"secrets\". The most famous one being probably the one from the Bell company (the 2600Hz bug).\n\nBasically, this bug was coming from the fact that they were two types of signals transmitted between the phone booth and the telecommunication central. The command signals and the voice signals:\n\nAll these signals were encoded into an electrical signals and sent from the phone booth to the central. The problem was coming from the fact that the encoding module from the voice signals was not strictly bounded to usual human voice frequencies. One could produce an unusual sound in the phone and get an encoding that would be understood as a command signal by the central.\n\nIn fact, one hacker did realize that if you produced a sound of 2600Hz, the audio encoding of this signal was corresponding to a command signal of a long-distance call (it was as if you inserted a coin of 25 cents in the phone booth). And, by an extraordinary coincidence, at this time a brand of cereals (for kids' breakfast), called \"Cap'n Crunch\", was offering to his customers a whistle that was producing a sound of this exact same frequency.\n\n\n\nAt this time, these cereal boxes became very popular and the phone company did loose a bit of money. :-)\n\n",
      "votes": "9",
      "user": "perror",
      "time": "Sep 8, 2017 at 17:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "David",
          "text": "Although you may not (easily) find an actual implementation error in a modern CPU there is lots to be gained in the security field by understanding the many complex interactions between system parts, corners of the instruction set and newer implementations like TPM.",
          "time": null
        }
      ]
    },
    {
      "content": "Modern microprocessors are quite complex, but probably can be represented in fewer lines of code than an OS plus libs, etc. (Although one would be coded in Verilog and the other in C.) Nonetheless, the complexity is so great that having source code wouldn't be of much benefit.\n\nIf we focus on instruction execution (vs peripheral functions like memory management), functionality is quite well defined, and therefore easy to verify. Moreover, the cost of a mistake is quite high--you can't simply push out a patch like you can in software. Therefore, designs are simulated for days before being taped out, and there are even formal methods to prove that every part of the chip has been exercised.\n\nHowever, the amount of state held by a CPU is astronomical. A bug where the CPU jumped to the wrong instruction all the time would be quickly found. The reality is that there could be a rare sequence of events--perhaps not even easily reproducible given the stochastic nature of out-of-order processors--that leads to misbehavior. Such bugs would also be hard to exploit.\n\nThere are indeed bugs found after tape out. Most processors have an errata sheet, and few designs go to production on A0 (one full tape out, no metal fixes) silicon. But, I mostly see bugs or design gaps in peripheral functions. For an example list of bugs, search for something like \"Skylake errata.\"\n\n",
      "votes": "2",
      "user": "Joseph Byrne",
      "time": "Sep 9, 2017 at 1:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "Bob",
          "text": "> you can't simply push out a patch like you can in software â€” Not so true anymore; many higher-level CPU bugs can be (and often are) fixed with microcode updates applied either via the OS or via motherboard firmware updates. Especially the OS updates are not much different from any other OS/driver update.",
          "time": null
        },
        {
          "user": "tonysdg",
          "text": "microcode updates applied either via the OS ... which ironically opens up even more opportunities for security problems.",
          "time": null
        }
      ]
    },
    {
      "content": "As a very specific example, I'm sure you could take the recently acknowledged SKL150 erratum and build an exploit on top of it that could tunnel through verification systems, JIT-compiled langauges, etc, since it breaks the basic assumption that the processor behaves as designed.\n\nThe \"symptom\" of SKL150 as reported was crashing, but that's only because the affected value was a pointer which became invalid, but you could equally use all the the regular techniques to exploit it instead. Of course, this is probably at the 9 out of 10 difficulty level.\n\n",
      "votes": "1",
      "user": "BeeOnRope",
      "time": "Sep 9, 2017 at 23:24",
      "is_accepted": false,
      "comments": []
    }
  ]
}