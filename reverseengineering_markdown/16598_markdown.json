{
  "title": "Overriding the second argument with conditional breakpoints",
  "link": "https://reverseengineering.stackexchange.com/questions/16598/overriding-the-second-argument-with-conditional-breakpoints",
  "content": "With conditional breakpoints I'm able to alter the return value of a function. For example, when setting a breakpoint on the return instruction, the following IDC expression ensures that the function always returns false:\n\n```\nEAX=0\n\n```\nNow I would like to override the second argument that the function receives with a value of zero. The breakpoint is set on the first instruction of the function (push 1Ch). Unfortunately, I cannot get the following IDC expression to work as intended:\n\n```\n(ESP+8)=0\n\n```\nWhen the function is called, the value located at ESP+8 refers to the size of the buffer that is about to receive a bunch of values. By purposely setting the buffer size to zero, the function won't return any values.\n\nHow can I configure a conditional breakpoint with IDA that sets the value at ESP+8 to zero? And is it possible to do this by simply editing the breakpoint instead of running a script?\n\nI still can't get the script to run successfully. When using the write_dbg_memory function, I get the following error message:\n\n```\nRuntime error at _idc+0x00000022: Attempt to call undefined function 'write_dbg_memory'\n\n```\nIt also seems that the write_dbg_memory function that is listed here and here, uses different arguments (long ea, string data).\n\n",
  "votes": "1",
  "answers": 1,
  "views": "778",
  "tags": [
    "ida",
    "debugging",
    "breakpoint"
  ],
  "user": "303",
  "time": "Oct 23, 2017 at 18:58",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use IDC functions to write to memory addresses.\nI recommend write_dbg_memory() function.\n\n```\nwrite_dbg_memory(ESP+8, 0, size)\n\n```\nhttps://www.hex-rays.com/products/ida/support/idapython_docs/\n\nActually the line/s you put in condition of a breakpoint is also considered as a script which is executed when encountering the BP. So it has to follow the rules of writing a script. EAX = 0 is a simple line you've used before.\n\nIf IDC is not working you can use idaapi.dbg_write_memory api. I've tried the following line as a condition and it works fortunately! Choose \"Python\" for the \"Scriptinng Language\" menue bar.  \n\n```\ndaapi.dbg_write_memory(GetRegValue(\"ESP\")+8,\"HELLO\")\n\n```\n",
      "votes": "2",
      "user": "EWD-0-",
      "time": "Oct 23, 2017 at 20:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "303",
          "text": "Thank you for your answer. Unfortunately, I still can't get the script to run properly. Please check my question again, I've updated it accordingly.",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "WLC! I've added a new line to the answer check it out... Hope it works",
          "time": null
        },
        {
          "user": "303",
          "text": "When I try to run that code via File > IDC command..., I receive the following error message: Variable 'daapi' is undefined. Maybe those features aren't supported by IDA version 5.0.0.879?",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "Have you chosen Python as scripting language? If you go with IDC, which is the default value, it won't work.",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "Right click on the address and choose \"Edit Breakpoint\". Then on the condition bar click on \"...\" bar. On the new page at the right bottom side choose Python as scripting language",
          "time": null
        }
      ]
    }
  ]
}