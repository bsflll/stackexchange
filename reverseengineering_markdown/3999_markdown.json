{
  "title": "Why does IDA Pro's pseudocode function not produce for loops?",
  "link": "https://reverseengineering.stackexchange.com/questions/3999/why-does-ida-pros-pseudocode-function-not-produce-for-loops",
  "content": "Question came up in a reverse engineering class.  The prof asked this question.  I mean, in the grand scheme of things, while loops == for loops, I don't have a problem with that.  \n\nIDA Pro book... Google... not seeing anything online here.  \n\nSo why does IDA pro never produce for loops in its pseudocode generator?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "ida-plugin"
  ],
  "user": "avgvstvs",
  "time": "Apr 1, 2014 at 13:11",
  "comments": [
    {
      "user": "avgvstvs",
      "text": "Why the downvote?  How is this question off-topic?  Wrong tags?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "The question as stated is presented as an \"obvious\" fact without any evidence.",
      "time": null
    },
    {
      "user": "LUser",
      "text": "I wanted to say usually it produces do while loops.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Just because you haven't seem them does not mean they don't exist. In my experience the decompiler produces for loops all the time.\n\nEDIT: Here's just one example:\n\n```\n loc_804B520:\n                 xor     edx, edx\n                 jmp     short loc_804B52B\n\n loc_804B524:\n                 mov     al, [edi+edx]\n                 mov     [ebx+edx], al\n                 inc     edx\n\n loc_804B52B:\n                 cmp     edx, esi\n                 jl      short loc_804B524\n\n```\nOutput:\n\n```\n  for ( i = 0; i < a2; ++i )\n    *(_BYTE *)(v2 + i) = *(_BYTE *)(a1 + i);\n\n```\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "Apr 1, 2014 at 13:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "avgvstvs",
          "text": "Well, for the record the question came up in a reversing class, and no one had the answer.  The prof asked the question.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "Well, the current question definitely does not mention it came from \"the prof\". Maybe you should rephrase your question and describe the full context.",
          "time": null
        },
        {
          "user": "avgvstvs",
          "text": "I updated the context accordingly.",
          "time": null
        },
        {
          "user": "avgvstvs",
          "text": "Would it be possible for you to provide an assembly blob that should be interpreted correctly as a for loop?",
          "time": null
        }
      ]
    },
    {
      "content": "The decompiler can produce for loops.\n\nIt uses the Ctree statement element cit_for and the Ctree expression cfor_t to represent these code constructs in the decompilation graph.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Apr 1, 2014 at 4:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}