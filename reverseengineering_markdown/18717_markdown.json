{
  "title": "Stack buffer size is different between C and ASM",
  "link": "https://reverseengineering.stackexchange.com/questions/18717/more-memory-allocated-on-the-stack-than-seems-to-be-needed",
  "content": "Given that function:\n\n```\nvoid vuln( char * arg ) {\n    char buf[256];\n    strcpy(buf, arg);\n}\n\n```\nDisassembled in:\n\n```\n       0x0804842b      55             push ebp                                                                                                                                                                                          \n       0x0804842c      89e5           mov ebp, esp                                                                                                                                                                                      \n       0x0804842e      81ec08010000   sub esp, 0x108                                                                                                                                                                                    \n       0x08048434      83ec08         sub esp, 8                                                                                                                                                                                        \n       0x08048437      ff7508         push dword [arg_8h]                                                                                            \n       0x0804843a      8d85f8feffff   lea eax, ebp - 0x108                                                                                                                                                                              \n       0x08048440      50             push eax                                                                                                           \n       0x08048441      e8bafeffff     call sym.imp.strcpy                                                                                             \n       0x08048446      83c410         add esp, 0x10                                                                                                                                                                                     \n       0x08048449      c9             leave                                                                                                                                                                                             \n       0x0804844a      c3             ret             \n\n```\nIt overflows when the argument is 264 = 0x108 chars and I was expecting 256 bytes. Why compiler adds 8 bytes with sub esp,8 ?       \n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly"
  ],
  "user": "dafnahaktana",
  "time": "Dec 29, 2017 at 18:27",
  "comments": [
    {
      "user": "Trey",
      "text": "It's probably because of strcpy",
      "time": null
    },
    {
      "user": "Kartone",
      "text": "Why ? What ? How ? :-)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "\n\nThis is enough information to allow us to determine why the compiler generates code that creates unused space on the stack. Let us examine the code, focusing on instructions that result in stack frame memory allocation:\n\n```\n   0x0804842b      55             push ebp                     ( 1 )                                                                                                                                                                     \n   0x0804842c      89e5           mov ebp, esp                                                                                                                                                                                      \n   0x0804842e      81ec08010000   sub esp, 0x108               ( 2 )                                                                                                                                                                     \n   0x08048434      83ec08         sub esp, 8                   ( 3 )                                                                                                                                                                    \n   0x08048437      ff7508         push dword [arg_8h]          ( 4 )                                                                                  \n   0x0804843a      8d85f8feffff   lea eax, ebp - 0x108                                                                                                                                                                              \n   0x08048440      50             push eax                     ( 5 )                                                                                      \n   0x08048441      e8bafeffff     call sym.imp.strcpy          ( 6 )                                                                                   \n   0x08048446      83c410         add esp, 0x10                                                                                                                                                                                     \n   0x08048449      c9             leave                                                                                                                                                                                             \n   0x0804844a      c3             ret             \n\n```\n\nConclusion:\n\nThe compiler uses sub esp, 8 to maintain stack frame alignment to a 16-byte boundary.\n\nSee also:\n\n",
      "votes": "5",
      "user": "julian",
      "time": "Dec 29, 2017 at 23:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "julian",
          "text": "@usr2564301 yes, good point. I will change it. Thanks.",
          "time": null
        },
        {
          "user": "Kartone",
          "text": "Superb answer @SYS_V. Thank you. Can you explain me why it reserve 0x108 (264) bytes for a char buf[256] and not 0x100 ?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@Kartone The best I can do is guess: if 264 bytes are allocated for the buffer, we have 8 + 264 + 8 + 4 + 4 = 288, where 288 % 16 = 0. However, if 256 bytes are allocated for the buffer, with the given code we instead have 8 + 256 + 8 + 4 + 4 = 280, where 280 % 16 = 8, which means the stack is not correctly aligned to a 16-byte boundary.  To correct for this, the compiler would have to generate additional instructions to align the stack.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@Kartone no problem, you are welcome",
          "time": null
        }
      ]
    }
  ]
}