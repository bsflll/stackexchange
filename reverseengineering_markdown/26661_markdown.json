{
  "title": "Try to parse buffer as PE with IDAPython",
  "link": "https://reverseengineering.stackexchange.com/questions/26661/try-to-parse-buffer-as-pe-with-idapython",
  "content": "file_buffer = requests.get(file_url)\n\nbuf_size = len(file_buffer)\n\npe_file = pefile.PE(data=file_buffer)\n\nprint(\"This is really a pe imphash %s.\" % pe_file.get_imphash())\n\naddr = hex(id(file_buffer))\n\nprint(\"PE start memory at %s length %d.\" % (addr, len(file_buffer)))\n\nnew_loader = ida_idaapi.loader_input_t()\n\nmem_inp = ida_diskio.create_memory_linput(addr, buf_size)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "189",
  "tags": [
    "idapython",
    "pe",
    "idapro-sdk",
    "ida-plugin"
  ],
  "user": "BlackRussian",
  "time": "Jan 7, 2021 at 10:25",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "Your code is broken. What is addr?",
      "time": null
    },
    {
      "user": "BlackRussian",
      "text": "ea_t - I cant' this parameter right in python @RolfRolles",
      "time": null
    },
    {
      "user": "Rolf Rolles",
      "text": "Right. Well, your code snippet shows no definition for that variable, so we don't know what you did wrong. Nobody can help you until you show us how you defined the addr variable.",
      "time": null
    },
    {
      "user": "BlackRussian",
      "text": "buffer = b'\\xB8\\x01\\x00\\x00\\x00' id(addr) - will be the start address of the buffer thank you for your help",
      "time": null
    },
    {
      "user": "Rolf Rolles",
      "text": "Man, if you want help, paste the real code into your question, not pseudocode, not snippets that you think are relevant, the whole thing.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "After some research time, I found a way to do it in CPP but not in python.\n\nhttps://github.com/SentineLabs/Memloader/blob/main/MemoryLoader/MemoryLoader/MemoryLoader.cpp\n\nThe most relevant part of the code dealing with loading PEs from buffer to memory:\n\n```\nvoid destroy_linput(linput_t* li)\n{\n    close_linput(li);\n}\n\nlinput_t* create_linput(std::vector< bit7z::byte_t >& file_buffer)\n{\n    return create_bytearray_linput(file_buffer.data(), file_buffer.size());\n}\n\nvoid destroy_linfos(load_info_t* linfos)\n{\n    free_loaders_list(linfos);\n}\n\nload_info_t* create_linfos(linput_t* li)\n{\n    return build_loaders_list(li, \"\");\n}\n\nconst unique_ptr_s1<linput_t, destroy_linput> li2{\n  create_linput(file_buffer)\n};\n        \nconst unique_ptr_s1<load_info_t, destroy_linfos> linfos{\n  create_linfos(li2.get())\n};\n\n```\n",
      "votes": "2",
      "user": "perror",
      "time": "Apr 1, 2021 at 21:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}