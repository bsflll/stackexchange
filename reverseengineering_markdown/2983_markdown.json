{
  "title": "How to predict address space layout differences between real and gdb-controlled executions?",
  "link": "https://reverseengineering.stackexchange.com/questions/2983/how-to-predict-address-space-layout-differences-between-real-and-gdb-controlled",
  "content": "It's something that puzzle me for a long time. I can observe that there is a difference between the real execution of a program and the gdb-controlled one.\n\nBut, here is an example:\n\nSo, here we have a difference of 96 bytes between the two runs. But, how can I predict this difference for a given program without having it running in the real memory layout (just by knowing the gdb memory layout) ?\n\nAnd, also, from where/what is coming this difference ?\n\n",
  "votes": "19",
  "answers": 2,
  "views": "15k",
  "tags": [
    "gdb",
    "memory"
  ],
  "user": "perror",
  "time": "Oct 30, 2013 at 11:15",
  "comments": [],
  "answers_data": [
    {
      "content": "There could be other factors involved, but my guess would be that changes in the process environment variables, which are stored on the stack, are what's causing this issue.\n\nRunning a small program that just prints out the environment variables reveals a couple variations in environment variables when run inside vs outside gdb on my system.\n\n```\nint main(int argc, char **argv, char** envp)\n{\n  char** env;\n  for (env = envp; *env != 0; env++)\n  {\n    char* thisEnv = *env;\n    printf(\"%s  \n\", thisEnv);    \n  }\n}\n\n```\nFirst, when running under gdb, there is a LINES variable that isn't present when the process is started outside of gdb:\n\n```\nLINES=83\n\n```\nSecondly, the underscore environment variable is different. When running outside of gdb, it is set to the name of the executable:\n\n```\n_=./gdbtest\n\n```\nBut when started from inside gdb, it is set to the path of the gdb binary:\n\n```\n_=/usr/bin/gdb\n\n```\nYou can try to run the program normally, then attach to it with gdb/gdbserver, which should avoid these variations in environment variables (assuming that is in fact what is causing your problem).\n\nIf your process is short-lived, it can be hard to pause the process before it exits. Maybe someone else has some good suggestions on starting a process in a paused state; I usually use a second program like this one to catch the process as it is starting and pause it so I can attach a debugger to it.\n\n",
      "votes": "17",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vitaly Osipov",
          "text": "This answer on stackoverflow shows how to run gdb with a controlled environment stackoverflow.com/a/17775966. You can simply use his script (remember to run unset commands inside gdb)",
          "time": null
        }
      ]
    },
    {
      "content": "Just to add to the answers, I can tell how to get close to a clean environment despite gdb. In fact, there are two methods to reach this:\n\nThat was two methods you can use with gdb to follow a program without too much differences with the real execution. But, they are many others!\n\n",
      "votes": "4",
      "user": "perror",
      "time": "Aug 10, 2017 at 9:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}