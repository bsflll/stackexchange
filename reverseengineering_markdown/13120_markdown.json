{
  "title": "IDA 6.8 SDK change calling convention",
  "link": "https://reverseengineering.stackexchange.com/questions/13120/ida-6-8-sdk-change-calling-convention",
  "content": "Is there any way to change the calling convention programmatically?\nI found some C++ code in this repo but wasn't able to successfully update it to 6.8.\n\n```\nstatic bool idaapi convert_to_usercall(void *ud)\n{\n    vdui_t &vu = *(vdui_t *)ud;\n    if (!vu.cfunc)\n        return false;\n    if ( vu.cfunc->entry_ea == BADADDR )\n        return false;\n    tinfo_t type;\n    qtype fields;       \n    if (!vu.cfunc->get_func_type(type, fields))\n        return false;\n    func_type_info_t fti;\n    int a = build_funcarg_info(idati, type.c_str(), fields.c_str(), &fti, 0);\n    if (!convert_cc_to_special(fti))\n        return false;\n    fields.clear();\n    type.clear();\n    build_func_type(&type, &fields, fti);\n    if ( !apply_tinfo(idati, vu.cfunc->entry_ea, type.c_str(), fields.c_str(), 1) )\n        return false;\n    vu.refresh_view(true);\n    return true;\n}\n\n```\nThe code seems to use apis that are now deprecated or changed up. Does anybody know a way to fix up this code or some other approach.\n\nAny help would be appreciated, whether it is C++ or Python.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "idapython",
    "idapro-sdk"
  ],
  "user": "ImCodezz",
  "time": "Jul 22, 2016 at 18:01",
  "comments": [],
  "answers_data": [
    {
      "content": "SetType? An example in Python could be this:\n\n```\nSetType(func_ea, \"int x(int arg1, char *arg2);\")\n\n```\n",
      "votes": "1",
      "user": "joxeankoret",
      "time": "Jul 23, 2016 at 11:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "ImCodezz",
          "text": "Thanks for the response, but isn't there a way to set the calling convention explicitly? I want this task to be automated so I don't know know the function signature",
          "time": null
        },
        {
          "user": "joxeankoret",
          "text": "What I usually do is GetType, modify the returned prototype to set the __cdecl/__thiscall/__whatever calling conventiong and then issue a SetType call with the new string.",
          "time": null
        }
      ]
    },
    {
      "content": "Ok, I found a solution in Python and it should work the same in C++. For anyone interested, here's the code. It changes the calling convention from __usercall to __fastcall:\n\n```\nold_func_type = idaapi.tinfo_t()\ncfunc.get_func_type(old_func_type)\n\nfi = idaapi.func_type_data_t()\nif old_func_type.get_func_details(fi):\n    if (fi.cc == idaapi.CM_CC_SPECIAL) or (fi.cc == idaapi.CM_CC_SPECIALE) or (fi.cc == idaapi.CM_CC_SPECIALP):\n        fi.cc = idaapi.CM_CC_FASTCALL\n\n        new_func_type = idaapi.tinfo_t()\n        new_func_type.create_func(fi)\n\n        idaapi.apply_tinfo2(ea, new_func_type, idaapi.TINFO_DEFINITE)\n\n```\n",
      "votes": "0",
      "user": "ImCodezz",
      "time": "Jul 29, 2016 at 16:25",
      "is_accepted": true,
      "comments": []
    }
  ]
}