{
  "title": "What does a thread function look like in assembly? (LPTHREAD_START_ROUTINE, CreateRemoteThread) [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/6825/what-does-a-thread-function-look-like-in-assembly-lpthread-start-routine-crea",
  "content": "Using CreateRemoteThread we can call a specific kind of function of another process. It has to be application-defined and of type LPTHREAD_START_ROUTINE.\nIf no such function does exist in the target process you have to inject your own and that's where I need your help.\nUsing VirtualAllocEx and WriteProcessMemory I would like to inject such a function as byte code. So I'd like to know, what such a function looks like in raw assembly.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "633",
  "tags": [
    "windows",
    "assembly",
    "byte-code"
  ],
  "user": "Forivin",
  "time": "10 years ago",
  "comments": [
    {
      "user": "Dominik Antal",
      "text": "This should help, create the project in an IDE and observe it in a debugger.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This question is a little too broad to answer without more information but I'll cover some general points about what I think you're looking for. I'm also going to assume x86 calling convention on Windows for simplicity's sake.\n\nThe only thing that really determines what a function \"looks like\" in assembly is its calling convention, but there's no restriction (particularly writing raw byte code) about what a function can do. In the case of using CreateRemoteThread the only restriction is that you don't corrupt the stack (which could crash the target process)\n\nSo for example, I could write a function in assembly that looks like this:\n\n```\nnop\nnop\nnop\nnop\nret\n\n```\nAnd it would be 100% valid. But as far as more complicated functionality let's look at the MSDN for CreateRemoteThread:\n\nLPTHREAD_START_ROUTINE is a #define to the following function definition:\n\n```\nDWORD WINAPI ThreadProc(\n  _In_  LPVOID lpParameter\n);\n\n```\nWhere WINAPI is another #define to the stdcall calling convention. You can check the wiki for it here but the important part (if you're writing raw assembly\") is that for WINAPI/stdcall functions the callee function cleans up the stack, which means the function that you write which runs in the remote process will have to cleanup its parameter(s). This is done with the ret N set of instructions. For example, if you have:\n\n```\nWINAPI foo(int x)\n\n```\nThen the foo will have to clean up one parameter on the stack, so the assembly for this function will end with a ret 4 instruction, because there was one parameter which means 4 bytes need to be cleaned up on the stack.\n\nSimilarly, if you had:\n\n```\nWINAPI bar(int x, int y)\n\n```\nThen the assembly will end with a ret 8 instruction, because there are 2 parameters = 8 bytes now. It's also important to note that if I had something like:\n\n```\nWINAPI foobar(char x, char y, int z)\n\n```\nIt will still end in a ret 0C. Even though the char params only have one byte of data the stack will still be aligned in 4 byte increments.\n\nGoing back to the API for CreateRemoteThread you can see that one of the paremeters is\n\n```\nLPVOID lpParameter\n\n```\nWhich is the pointer that gets passed a parameter to your remote function. This means that in your \"remote\" function you'd have to clean up one parameter on the stack using a ret 4 instruction. If you perform some tricks you can write your WINAPI function in C code, have the compiler compile it for you (makes it easier to code and you don't have to worry about cleanup yourself), and find the function at run time to copy it off.\n\n",
      "votes": "3",
      "user": "Fewmitz",
      "time": "Dec 14, 2014 at 18:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Forivin",
          "text": "Thank you, this was very helpful. So, am I correct, that the function may look like this? pastebin.com/rz4cep7f Also, can you give me an advice on were to learn the basics about raw assembly? It seems to be quite different from inline assembly and the assembly returned by assembly.ynh.io",
          "time": null
        },
        {
          "user": "Forivin",
          "text": "I'm also wondering if I need a near or far return. x86.renejeschke.de/html/file_module_x86_id_280.html",
          "time": null
        },
        {
          "user": "Fewmitz",
          "text": "Near return. Far returns are only used to switch between segments, which in modern OS isn't something you (usually) have to worry about in userspace. Also, in your assembly you're popping the parameter to ECX, which means when you do the RET 4 at the end you will had incremented the stack by one DWORD too many. Instead of a pop you would want to do something like mov ecx,[esp]",
          "time": null
        },
        {
          "user": "Fewmitz",
          "text": "As far as learning Assembly, the best source is really going to be stepping through functions in a debugger. The more you see how contructs, the stack, etc are laid out when you write code an functions the more obvious it will become. The link you put in your comment is in AT&T format which is different than what you have in the pastebin. Both formats result in the same execution but they're displayed differently. If you attach Windbg and debug your assembly that way it will be in Intel format which may clear up some confusion",
          "time": null
        },
        {
          "user": "Fewmitz",
          "text": "Though it might also be helpful to check out a book like Practical Malware Analysis; by reverse engineering some stuff you'll get used to looking at assembly and therefore have a better understanding of what it should look like if you write it",
          "time": null
        }
      ]
    }
  ]
}