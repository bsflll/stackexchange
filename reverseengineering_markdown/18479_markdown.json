{
  "title": "How does a stripped XCOFF binary still remain usable?",
  "link": "https://reverseengineering.stackexchange.com/questions/18479/how-does-a-stripped-xcoff-binary-still-remain-usable",
  "content": "IBM's AIX strip utility documentation states the following:\n\nIf relocation information is removed, how come the stripped executable still remain usable?\n\n",
  "votes": "4",
  "answers": 2,
  "views": "1k",
  "tags": [
    "file-format"
  ],
  "user": "sherlock",
  "time": "Jun 7, 2018 at 19:22",
  "comments": [
    {
      "user": "manduca",
      "text": "Okay, that‘s weird. Without relocation information, the binary either has to be position independent code or cannot be ASLRed. I‘m looking forward to the answer.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "That's not exactly a reverse engineering question, though.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "COFF files were not designed to support relocation after link-time:\n\nWhile XCOFF represents an extension of COFF that does support use of shared libraries, the relocation information removed by strip pertains to information used for link-time relocation rather than load- or run-time relocation:\n\nThe binder appears to play a role similar to that of the link editor ld on Linux systems. \n\nSee the description of the -x flag:\n\n",
      "votes": "6",
      "user": "julian",
      "time": "Jun 7, 2018 at 21:47",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "apparently the XCOFF format  has a separate section for dynamic linker (system loader):\n\nPresumably this one is not removed by strip, so the file still works.\n\nSee also similar question on what happens with stripped ELF files.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}