{
  "title": "How to determine if an ntfs partition (inside VHDX) is dirty?",
  "link": "https://reverseengineering.stackexchange.com/questions/33073/how-to-determine-if-an-ntfs-partition-inside-vhdx-is-dirty",
  "content": "I have a VHDX file containing a single NTFS partition, when I mount this VHDX using Disk Management it's determined to be \"dirty\":\n\n\n\nI do indeed have some issues reading this disk until I run ChkDsk on it, so the message is correct.\n\nI want to check, programmatically, if a partition needs ChkDsk before attempting to read it and after reading NTFS documentation from here and here I understood the Dirty flag should be set in the $Volume file in the $VOLUME_INFORMATION attribute:\n\n\n\nHowever if I read this information the Dirty flag is not set as can be seen from this hex dump:\n\n\nHowever, after mounting (and without making any further changes) with Disk Management the dirty flag is immediately set:\n\n\n\nSo how does Windows determine the disk is dirty if the flag was not set?\nAnd if I cannot use the dirty flag, how can I determine it programmatically?\n\nIn this example the disk is from Windows 7 and the partition is MBR style. There are no other partitions in the VHDX.\n\nEDIT\nFound the following extra information in Windows Internals 7th edition part 2 (page 709):\n\nSo it looks like the P-Bit (Proactive scan bit) or the F-Bit might be set. Unfortunately I haven't found information where this bits are stored. Perhaps in 2nd byte of the flag field which is a USHORT ?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "43",
  "tags": [
    "windows",
    "file-format",
    "filesystem"
  ],
  "user": "Remko",
  "time": "Jul 12, 2024 at 9:45",
  "comments": [],
  "answers_data": []
}