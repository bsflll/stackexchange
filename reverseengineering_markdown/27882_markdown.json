{
  "title": "OllyDbg - ReadFile API",
  "link": "https://reverseengineering.stackexchange.com/questions/27882/ollydbg-readfile-api",
  "content": "I am learning reverse engineering (Lena's Reversing for Newbies) Part 2.\nI'm confused about ReadFile API.\n\nIn Part 2,  I created a blank Keyfile.dat near application (without a key in it).\n\n\n\npBytesRead : addresses of number of bytes read\n\nSize (Number of Bytes to Read) = 70 // number of bytes to read.\n\nI'm confused about this part.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "342",
  "tags": [
    "ollydbg"
  ],
  "user": "Jason",
  "time": "Nov 21, 2021 at 9:58",
  "comments": [],
  "answers_data": [
    {
      "content": "OllyDbg wants to help you, and offer you an additional info — “What is currently at a given address?”\n\n(In the C-language parlance, address is a pointer to memory: “address points to something in memory,” so you may read -> as “points to”.)\n\nBut why 0 in the first case, and 00 in the second one?\n\nBecause - again - OllyDbg wants to help you. It is smart enough to correctly interpret the meaning of the memory content — in a given context — for you, a human:\n\nYes - more precisely, at most (maximum) 70 bytes.\n\n",
      "votes": "1",
      "user": "MarianD",
      "time": "Nov 21, 2021 at 17:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can find more info on ReadFile function at MSDN.\n\nThe function signature from MSDN:\n\n```\nBOOL ReadFile(\n  HANDLE       hFile,\n  LPVOID       lpBuffer,\n  DWORD        nNumberOfBytesToRead,\n  LPDWORD      lpNumberOfBytesRead,\n  LPOVERLAPPED lpOverlapped\n);\n\n```\nAnd if you agree with me, that how the function was called:\n\n```\nReadFile(EAX, OFFSET 0x0040211A, 0x46, OFFSET 0x00402173, 0);\n\n```\nHere 0x46 (a hexadecimal number) is placed on nNumberOfBytesToRead parameter and we will read 70 (in decimal) characters.\n\n",
      "votes": "0",
      "user": "MarianD",
      "time": "Nov 21, 2021 at 9:58",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jason",
          "text": "Right, but what is 0x46 ? when the Keyfile.dat file is empty, why ReadFile read 0x46 or 70d ?",
          "time": null
        },
        {
          "user": "BadSugar",
          "text": "@Jason 0x46 is the value for nNumberOfBytesToRead parameter. That function will read 0x46 in hex characters.",
          "time": null
        },
        {
          "user": "Jason",
          "text": "Can you explain more? Where did this value come from? The ReadFile function read keyfile.dat and the value is 0x64? the 0x64 or 70d character is F in ascii. i confused :(",
          "time": null
        },
        {
          "user": "BadSugar",
          "text": "@jason look at the asciitable asciitable.com",
          "time": null
        },
        {
          "user": "blabb",
          "text": "ReadFile takes a parameter x==NoofBytesToRead if the file has more x api will read only x if it is less than x it will read whatever is available since you created a blank file it will read 0 bytes if you fill garbage of 3 mb in your keyfile it will return you 70 decimal bytes from that garbage at the file seek position   if your file seek positon is at1.5 mb of thatgarbage it will return you 70 bytes from the 1.5 mb position",
          "time": null
        }
      ]
    }
  ]
}