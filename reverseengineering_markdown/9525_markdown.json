{
  "title": "How does storing values in registers result in a functioning program? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/9525/how-does-storing-values-in-registers-result-in-a-functioning-program",
  "content": "I'm currently learning assembly, but I cannot seem to understand how storing values into registers and manipulating them results in a working program. \n\nI was wondering if you guys could provide a very easy to understand explanation on why certain things are being done within the assembly code.\n\nTake for example the Hello World program in assembly code:\n\n```\nsection     .text\nglobal      _start                              ;must be declared for linker (ld)\n\n_start:                                         ;tell linker entry point\n\n```\nTL DR: How is it all merged to present Helloworld onto the screen? \n\n",
  "votes": "1",
  "answers": 3,
  "views": "4k",
  "tags": [
    "assembly",
    "x86",
    "linux"
  ],
  "user": "user36278",
  "time": "9 years ago",
  "comments": [
    {
      "user": "Jongware",
      "text": "You may want to study a bit more before asking on Reverse Engineering. \"How do [registers] know that data is stored within them?\", for example, is an extremely na√Øve question. It's not as if a register must look somewhere to see if it has some value stored in it. The same goes, actually, for your other questions as well.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It would be more helpful to give a full sample program instead of bits and pieces. You could inline your questions using ;-preprended lines.\n\nWhere (in which register) each parameter lands really is a matter of the architecture (seemingly here x86_64): ABI. The order usually is the same as for the C runtime functions which are the frontend to the syscalls, here write. It's a convention between the kernel and user mode.\n\nOne is literally the file number of the standard stream named stdout.\n\nFour is the system call number (essentially an index into a table) and int 0x80 is a call gate into the kernel. I.e. execution transitions into the kernel and the respective system call (here sys_write) knows where to take the parameters from.\n\nUsually the return value also ends up in EAX or EDX:EAX or similar. So the 4 would have been overwritten. It depends on the return type.\n\nOne in this case is the system call number of sys_exit, the kernel-side function for the libc exit function.\n\nThey don't. The kernel picks them from these registers and the (user mode) developer simply has to know where to put these pieces of data.\n\nIn the normal case the user mode developer will, however, make use of a C runtime, like glibc.\n\n",
      "votes": "3",
      "user": "0xC0000022L",
      "time": "Aug 1, 2015 at 12:44",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "int 80 is used to perform system calls\n\nEach  system call has an index  \n\nThe index is always passed in eax register \n\nThe function calls may need arguments \n\nThe first five arguments are passed via ebx,ecx,edx,esi,edi registers\n\nIf there are more than five arguments a special method is employed using an array pointer \n\nprototype of sys_write is as follows\n\nssize_t sys_write(unsigned int fd, const char * buf, size_t count) \n\nindex of sys_write  = 4   \n\nso    \n\n```\neax = index == 4,    \nebx = fd    == 1,stdout    \necx = char* == msg   \nedx = count == len   \n\n```\nsame goes to sys_exit\n\ntake a look at the links below for a concise syscall index ,arguments ,prototypes , and source details\n\nhttp://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#note117\nhttp://asm.sourceforge.net/syscall.html#4\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Aug 1, 2015 at 15:46",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Int 80 is a method of performing a syscall to the Linux kernel. This method is specific to Linux. \n\nTake a look at arch/x86/include/asm/unistd_32.h\nIt has documentation for this \"function\". \n\nTypically in assembly you push your inputs to any function you call in reverse order to the stack. However this is a special command where the functional inputs are stored in the registers.\n\nTake a look also at https://en.m.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux\n\n",
      "votes": "0",
      "user": "Viktor",
      "time": "Aug 1, 2015 at 13:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}