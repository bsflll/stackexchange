{
  "title": "\"check:\" keyword in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/24577/check-keyword-in-ghidra",
  "content": "I have disassembled the crackme0x06 challenge (http://security.cs.rpi.edu/courses/binexp-spring2015 inside challenges.zip). It's an ELF 32bit unstripped binary. The decompiled C code using Ghidra looks like :\n\n```\nundefined4 main(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n{\n  undefined local_7c [120];\n\n  printf(\"IOLI Crackme Level 0x06  \n\");\n  printf(\"Password: \");\n  scanf(\"%s\",local_7c);\n  check(local_7c,param_3);\n  return 0;\n}\n\n```\nIntel x86 looks like : \n\n```\n                             **************************************************************\n                             *                          FUNCTION                          *\n                             **************************************************************\n                             undefined main(undefined param_1, undefined param_2, und\n             undefined         AL:1           <RETURN>\n             undefined         Stack[0x4]:1   param_1\n             undefined         Stack[0x8]:1   param_2\n             undefined4        Stack[0xc]:4   param_3                                 XREF[1]:     08048651(R)  \n             undefined[120]    Stack[-0x7c]   local_7c                                XREF[2]:     0804863e(*), \n                                                                                                   08048658(*)  \n             undefined4        Stack[-0x9c]:4 local_9c                                XREF[2]:     08048641(W), \n                                                                                                   08048654(W)  \n             undefined4        Stack[-0xa0]:4 local_a0                                XREF[4]:     08048626(*), \n                                                                                                   08048632(*), \n                                                                                                   08048645(*), \n                                                                                                   0804865b(*)  \n                             main                                            XREF[2]:     Entry Point(*), \n                                                                                          _start:08048417(*)  \n        08048607 55              PUSH       EBP\n        08048608 89 e5           MOV        EBP,ESP\n        0804860a 81 ec 88        SUB        ESP,0x88\n                 00 00 00\n        08048610 83 e4 f0        AND        ESP,0xfffffff0\n        08048613 b8 00 00        MOV        EAX,0x0\n                 00 00\n        08048618 83 c0 0f        ADD        EAX,0xf\n        0804861b 83 c0 0f        ADD        EAX,0xf\n        0804861e c1 e8 04        SHR        EAX,0x4\n        08048621 c1 e0 04        SHL        EAX,0x4\n        08048624 29 c4           SUB        ESP,EAX\n        08048626 c7 04 24        MOV        dword ptr [ESP]=>local_a0,s_IOLI_Crackme_Level   = \"IOLI Crackme Level 0x06  \n\"\n                 63 87 04 08\n        0804862d e8 86 fd        CALL       printf                                           int printf(char * __format, ...)\n                 ff ff\n        08048632 c7 04 24        MOV        dword ptr [ESP]=>local_a0,s_Password:_0804877c   = \"Password: \"\n                 7c 87 04 08\n        08048639 e8 7a fd        CALL       printf                                           int printf(char * __format, ...)\n                 ff ff\n        0804863e 8d 45 88        LEA        EAX=>local_7c,[EBP + -0x78]\n        08048641 89 44 24 04     MOV        dword ptr [ESP + local_9c],EAX\n        08048645 c7 04 24        MOV        dword ptr [ESP]=>local_a0,DAT_08048787           = 25h    %\n                 87 87 04 08\n        0804864c e8 47 fd        CALL       scanf                                            int scanf(char * __format, ...)\n                 ff ff\n        08048651 8b 45 10        MOV        EAX,dword ptr [EBP + param_3]\n        08048654 89 44 24 04     MOV        dword ptr [ESP + local_9c],EAX\n        08048658 8d 45 88        LEA        EAX=>local_7c,[EBP + -0x78]\n        0804865b 89 04 24        MOV        dword ptr [ESP]=>local_a0,EAX\n        0804865e e8 25 ff        CALL       check                                            undefined check(undefined4 param\n                 ff ff\n        08048663 b8 00 00        MOV        EAX,0x0\n                 00 00\n        08048668 c9              LEAVE\n        08048669 c3              RET\n\n```\nMy Question is what is \"check\" keyword? I have run ltrace and strace on the binary, so I know its neither some library function nor system-call. What is it then?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "220",
  "tags": [
    "assembly",
    "decompilation",
    "elf",
    "ghidra",
    "decompile"
  ],
  "user": "Prithi",
  "time": "Mar 31, 2020 at 6:47",
  "comments": [
    {
      "user": "0xec",
      "text": "check is the name of the function which checks the correctness of the password. If you double click on it in Ghidra, it should take you to its location.",
      "time": null
    },
    {
      "user": "Prithi",
      "text": "Thanks for the suggestion. I just realized and found check has its own definition. Rookie mistake I guess.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "check is a symbol name inside your binary - meaning it's just a name of the function the Ghidra can recognize. \n\n",
      "votes": "1",
      "user": "macro_controller",
      "time": "Mar 31, 2020 at 7:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}