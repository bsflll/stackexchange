{
  "title": "Hopper: What does stack[xxxx] mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/18617/hopper-what-does-stackxxxx-mean",
  "content": "When using the 'decompiler' tool in Hopper on the start function of an application it shows this:\n\n\n\nWhat does the stack[2043] mean, is it 2043 bytes from the top of high memory and its assigning it to the stack?\n\nHere is what the assembly looks like for the same function:\n\n\n\n",
  "votes": "2",
  "answers": 0,
  "views": "171",
  "tags": [
    "disassembly",
    "decompilation",
    "hopper"
  ],
  "user": "pzirkind",
  "time": "Jun 27, 2018 at 15:19",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "Frankly, it's really difficult to interpret the decompilation. For example, it uses the raw register variable esp in the output, when esp is modified by the prologue -- so which value of esp is it referring to? (Evidently the pre-prologue version.) Also the disassembly listing would be more clear if it showed the symbolic declarations for var_14, var_10, etc. I have a feeling they refer to -0x14, -0x10, etc. but it would help clear things up. Anyway, given the tenor of your question, I'd say the decompilation will just confuse you and simply to ignore it (or use Hex-Rays).",
      "time": null
    }
  ],
  "answers_data": []
}