{
  "title": "Why use some cracks a patch and a keygen? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/9132/why-use-some-cracks-a-patch-and-a-keygen",
  "content": "A lot of cracked software in the internet looks like it's liberated with a patched executable and an additional key generator. Why so complicated? If the executable is patched why isn't the necessity for a key completely removed?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "671",
  "tags": [
    "patching"
  ],
  "user": "user2011659",
  "time": "9 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "One of the possible reasons for this is assymetric encryption used in newer protections. The software vendor has the private key, the public key is embedded in the software. This means you just can't write a key generator from the information that's publicly available. If the key checking itself is heavily protected against modification, it may be easier to roll your own private/public key pair, have your keygen use the private part of this pair, and replace the original public key in the software with yours.\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Jun 14, 2015 at 21:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "kwyntes",
          "text": "If we're already patching the binary AND we've figured out the mechanism to check keys for validity, why couldn't we simply make the key verification function always return true?",
          "time": null
        }
      ]
    },
    {
      "content": "Sometimes, it's better to do so because the target has a powerful protection against trivial patches; therefore, the cracker would make some changes to make the target accepts a generated key (that might not be fully correct) so the target protection would simply collapse because it's (kind of) registered.\n\n",
      "votes": "0",
      "user": "Yaser Alnajjar",
      "time": "Jun 16, 2015 at 16:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}