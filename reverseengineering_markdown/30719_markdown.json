{
  "title": "How to reverse an import function?",
  "link": "https://reverseengineering.stackexchange.com/questions/30719/how-to-reverse-an-import-function",
  "content": "I'm reversing windows .sys file and an import function RtlLookupEntryHashTable appears in my target functions. I want to know the pseudocode of it. How to achieve this?\n\n```\n.text:00000001C00218C2                 call    cs:wcsnlen\n.text:00000001C00218C9                 nop     dword ptr [rax+rax+00h]\n.text:00000001C00218CE                 mov     rdx, r15\n.text:00000001C00218D1                 mov     ecx, ebx\n.text:00000001C00218D3                 lea     r8d, [rax+rax]\n.text:00000001C00218D7                 call    RtlCompute37Hash\n.text:00000001C00218DC                 bts     eax, 1Fh\n.text:00000001C00218E0                 lea     r8, [rsp+0B8h+Context] ; Context\n.text:00000001C00218E5                 xorps   xmm0, xmm0\n.text:00000001C00218E8                 mov     edx, eax        ; Signature\n.text:00000001C00218EA                 lea     rcx, stru_1C0077988 ; HashTable\n.text:00000001C00218F1                 mov     ebx, eax\n.text:00000001C00218F3                 movdqu  xmmword ptr [rsp+0B8h+Context.ChainHead], xmm0\n.text:00000001C00218F9                 call    cs:RtlLookupEntryHashTable\n.text:00000001C0021900                 nop     dword ptr [rax+rax+00h]\n\n```\nWhen I double clicked it, I got this\n\n```\n.idata:00000001C007E378                                         ; sub_1C0014BCC+107↑p ...\n.idata:00000001C007E380 ; PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlLookupEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, ULONG_PTR Signature, PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context)\n.idata:00000001C007E380                 extrn RtlLookupEntryHashTable:qword\n.idata:00000001C007E380                                         ; CODE XREF: KfdAleRemoveFlowContextTable+102↑p\n.idata:00000001C007E380                                         ; KfdAleAcquireEndpointContextFromFlow+92↑p ...\n.idata:00000001C007E388 ; BOOLEAN __stdcall KeTestSpinLock(PKSPIN_LOCK SpinLock)\n.idata:00000001C007E388                 extrn KeTestSpinLock:qword\n\n```\n",
  "votes": "1",
  "answers": 0,
  "views": "94",
  "tags": [
    "windows",
    "functions",
    "windows-10"
  ],
  "user": "anonymous bear",
  "time": "Aug 1, 2022 at 7:28",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. It's not quite clear what you want. What's your question? If you want to see pseudo-code for a function imported from elsewhere, you'll have to open that elsewhere location (in this case likely ntoskrnl.exe) and find the function there and throw a decompiler at that.",
      "time": null
    },
    {
      "user": "raspiduino",
      "text": "Like 0xC0000022L said, it's a function from ntoskrnl.exe that your .sys file imported and used. If you just want to know that that function does, you can search on Google. If you want to know the pseudo-code, you can decompile ntoskrnl.exe or you can view the (clone) source code of that function from ReactOS project",
      "time": null
    },
    {
      "user": "anonymous bear",
      "text": "I found it in the import finally. Thx",
      "time": null
    }
  ],
  "answers_data": []
}