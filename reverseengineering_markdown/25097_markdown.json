{
  "title": "Finding AddressOfEntryPoint for a 64-bit process",
  "link": "https://reverseengineering.stackexchange.com/questions/25097/finding-addressofentrypoint-for-a-64-bit-process",
  "content": "Okay, so in the following code-snippet I am starting a notepad.exe process in a suspended state and trying to get the AddressOfEntryPoint of the process. Problem is I can't seem to find the actual codeEntry.\n\nBoth the application and the notepad.exe process is 64-bit.\n\nWhat am I doing wrong?\n\nHere is the commented code-snippet:\n\n```\n#include <iostream>\n#include <windows.h>\n#include <winternl.h>\n\n#pragma comment(lib, \"ntdll\")\n\nusing namespace std;\n\nint main() {    \n    STARTUPINFOA si;\n    si = {};\n    PROCESS_INFORMATION pi = {};\n    PROCESS_BASIC_INFORMATION pbi = {};\n    DWORD returnLength = 0;\n    CreateProcessA(0, (LPSTR)\"c:\\\\windows\\\\system32\\  \notepad.exe\", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi);\n\n    // get target image PEB address and pointer to image base\n    NtQueryInformationProcess(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLength);\n    DWORD_PTR pebOffset = (DWORD_PTR)pbi.PebBaseAddress + 10;\n\n    // get target process image base address\n    LPVOID imageBase = 0;\n    ReadProcessMemory(pi.hProcess, (LPCVOID)pebOffset, &imageBase, 16, NULL);\n\n    // read target process image headers\n    BYTE headersBuffer[4096] = {};\n    ReadProcessMemory(pi.hProcess, (LPCVOID)imageBase, headersBuffer, 4096, NULL);\n\n    // get AddressOfEntryPoint\n    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headersBuffer;\n    PIMAGE_NT_HEADERS64 ntHeader = (PIMAGE_NT_HEADERS64)((DWORD_PTR)headersBuffer + dosHeader->e_lfanew);\n    LPVOID codeEntry = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)imageBase);\n\n    // Do something with the AddressOfEntryPoint(print to console in this case)\n    cout << codeEntry << endl;\n\n    return 0;\n}\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "c++",
    "winapi"
  ],
  "user": "upayansaha",
  "time": "May 23, 2020 at 8:05",
  "comments": [],
  "answers_data": [
    {
      "content": "Generally you are doing almost all correct, there are however two simple mistakes.\n\nFirst and probably most important is here \n\n```\nDWORD_PTR pebOffset = (DWORD_PTR)pbi.PebBaseAddress + 10;\n\n```\nThe offset to ImageBaseAddress is not 10, it's 0x10 (16 in DEC). So you need to do it like this\n\n```\nDWORD_PTR pebOffset = (DWORD_PTR)pbi.PebBaseAddress + 0x10;\n\n```\nSecondly, are you sure that sizeof LPVOID is 16? At least on my compiler it is 8, not 16, so you are mostly like overwriting data on the stack. That's why I propose this approach\n\n```\nReadProcessMemory(pi.hProcess, (LPCVOID)pebOffset, &imageBase, sizeof(LPVOID), NULL);\n\n```\ninstead of\n\n```\nReadProcessMemory(pi.hProcess, (LPCVOID)pebOffset, &imageBase, 16, NULL);\n\n```\n",
      "votes": "7",
      "user": "morsisko",
      "time": "May 23, 2020 at 12:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "upayansaha",
          "text": "Worked perfectly after making the changes you suggested. Such a silly error on my part. Anyhoo thank you so much for pointing it out mate!",
          "time": null
        }
      ]
    }
  ]
}