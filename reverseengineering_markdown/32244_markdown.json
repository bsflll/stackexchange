{
  "title": "Ghidra: undefined4 to bytearray",
  "link": "https://reverseengineering.stackexchange.com/questions/32244/ghidra-undefined4-to-bytearray",
  "content": "I am trying to reverse a c++ program and make the decompiler represent a byte-array in a single line.\nThe c++ code contains the following line:\n\n```\nBYTE fileArray[139] = {0x50, 0x51....}\n\n```\nGhidra decompiles this to:\n\n```\n  undefined4 local_98;\n  undefined4 local_94;\n  undefined4 local_90;\n\n  local_98 = 0x4035150;\n  local_94 = 0x14;\n  local_90 = 0x89630000;\n...\n\n```\nI managed to set the data type to byte[139] expecting it to result in a single line representing the byte-array but instead I got the following result:\n\n```\n  byte local_98 [139];\n  \n  local_98[0] = 0x50;\n  local_98[1] = 0x51;\n  local_98[2] = 3;\n...\n\n\n```\nIs it possible to display a byte-array (or even a char array) in a single line in Ghidra?\nAnd if not, is there a reason why?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "323",
  "tags": [
    "decompilation",
    "ghidra",
    "decompiler",
    "struct"
  ],
  "user": "0x0000000000000000000",
  "time": "Aug 31, 2023 at 15:39",
  "comments": [
    {
      "user": "blabb",
      "text": "if the underlying disassembly assignement is in dword sized ptr there is no way the decompiler can infer a byte sized assignemnt  if the original code was byte foo[xx] = {...} compiler will normally make it dword blah [xx/4] = { group of 4 bytes per assignement .... }",
      "time": null
    },
    {
      "user": "0x0000000000000000000",
      "text": "Alright, and is it possible to format it yourself in Ghidra? I don't mind the manual work but with this formatting its hard to keep overview (for me atleast)",
      "time": null
    },
    {
      "user": "blabb",
      "text": "Sorry i dont know i simply set the data-type rename the xxx_nn to myfoo confirm by scrolling if there are 139 myfoo[index]   and simply ignore the long display",
      "time": null
    }
  ],
  "answers_data": []
}