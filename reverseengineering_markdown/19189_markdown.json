{
  "title": "How are images found inside DLLs accessed? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/19189/how-are-images-found-inside-dlls-accessed",
  "content": "Sometimes a program displays images that don't exist as jpegs or bmps that come with the program so they have to be residing inside the exe itself or inside a DLL that comes with the program. So My question is, how does the program access the image in the DLL in assembly and in what format is the image typically stored there?\nI also have a question about text that the program displays but the text is nowhere to be seen either in the exe or dll, so where is that text stored or is it possibly encrypted?\n\nFor example the \"made with Unity\" splash screen in unity.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "199",
  "tags": [
    "windows",
    "dll",
    "pe-resources"
  ],
  "user": "Robert Tattorn",
  "time": "6 years ago",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "it's too broad to be answered. Anyone can come up with their own encoding of both images and text and just decode them on the fly in memory and then display. Provide some specifics (maybe an example of such an app) then we can give you the details.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Welcome to RE.SE. I agree with Paweł that the question is too broad as it stands (which means it will likely get closed). Are you talking about the PE resource section or what is the question about specifically? There's a myriad of ways such data could be stored, including obfuscated inside or outside the actual PE image.",
      "time": null
    },
    {
      "user": "Robert Tattorn",
      "text": "Yes the resources inside a PE / exe.  I want to know how to find the image data and its location inside the executable even if it is encrypted. Can I use a program such as ollydbg to back trace the image from it being displayed on screen to the decryption process to memory accessing it ?",
      "time": null
    },
    {
      "user": "Robert Tattorn",
      "text": "It is given above, there are many DLLs and It is unknown in which of them the image resides, but I'm thinking whether I can access and edit encrypted resources with 'resource hacker' or other similar program. If not, then can I at least find where they reside inside the exe/dll ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "First find the DLL or EXE file that you want to access for that resource. THe main goal is to create a handle for that resource/image file, as everything in Windows has to accessed by an object/handle.\n\n```\nHMODULE hModule = LoadLibrary(\"FileName.dll\");\n\n```\n```\nHRSRC hResInfo = FindResource(hModule, ResourceName, RT_ICON);\n\n```\n```\nHGLOBAL hResData = LoadResource(hModule, hResInfo);\n\n```\n```\nHANDLE lpBuffer = LockResource(hResData);\n\n```\n```\nDWORD dwSize = SizeofResource(hModule, hResInfo);\n\n```\n```\nHANDLE hFile = CreateFile(FileName, GENERIC_ALL, 0, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);\n\n```\nChange RT_ICON flags with the Resource Type that you want to access. Now use the hFile handle with WriteFile() to make a file or ReadFile() to read that file.\n\nHere is an example of C code to extract the first icon from shell32.dll and save it as image.png file:\n\n```\n#include <Windows.h>\n\nBOOL ExtractResource(PSTR ResName, PSTR FileName) {\n    HMODULE hModule = LoadLibrary(\"shell32.dll\");\n    HRSRC hResInfo = FindResource(hModule, ResName, RT_ICON);\n    HGLOBAL hResData = LoadResource(hModule, hResInfo);\n    HANDLE lpBuffer = LockResource(hResData);\n    DWORD dwSize = SizeofResource(hModule, hResInfo);\n    HANDLE hFile = CreateFile(FileName, GENERIC_ALL, 0, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);\n    BOOL result = WriteFile(hFile, lpBuffer, dwSize, 0, 0);\n    return result;\n}\n\nint main() {\n    ExtractResource(\"#1\", \"image.png\");\n}\n\n```\n",
      "votes": "0",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "As the question is indeed very broad there isn't much we can tell. However, PE resources are often used to cary images and icons inside executable files. They are then loaded using APIs like LoadResource and LoadImage. You can read about resources, their type and formats over on MSDN.\n\nAs a side note, images can also be stored as files in other formats, other extensions, other encodings and even compressed or encrypted. So the fact you don't see a .bmp file does not necessarily mean there are no image resource files alongside the executable. \n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Aug 29, 2018 at 19:28",
      "is_accepted": false,
      "comments": []
    }
  ]
}