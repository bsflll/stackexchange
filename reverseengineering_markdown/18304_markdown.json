{
  "title": "Reverse engineering IE thick client",
  "link": "https://reverseengineering.stackexchange.com/questions/18304/reverse-engineering-ie-thick-client",
  "content": "Internet Explorer allows for creating thick clients that run in the browser via a Browser Helper Object (BHO). \n\nIn trying to reverse one such thick client I noticed that the website downloads about fifteen DLL files making it difficult to discern where the entry point is.\n\nSince the files were written in .NET they were (mostly) decompiled by using dotPeek\n\nWhat are some steps that can be taken to help narrow down the entry point - and possibly to debug certain actions? Also, is there another tool that would prove more useful in decompiling .NET dll's?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "264",
  "tags": [
    "debugging",
    "decompilation",
    "dll"
  ],
  "user": "pzirkind",
  "time": "May 17, 2018 at 13:55",
  "comments": [
    {
      "user": "zerocool",
      "text": "entry point for what dll or IE i didn't get what u mean   so can explain more ?",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "dnSpy is miles better than anything else out there. As a bonus you can also use it to debug executables you donâ€™t have the source for.",
      "time": null
    }
  ],
  "answers_data": []
}