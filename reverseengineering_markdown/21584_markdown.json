{
  "title": "Reverse Python Bytecode",
  "link": "https://reverseengineering.stackexchange.com/questions/21584/reverse-python-bytecode",
  "content": "I try reverse python bytecode (Content in a .pyc file). I do not want to decompile the code, just understand the Python bytecode :)\n\nThe LOAD_NAME statement, pushes the value associated with co_names (tuple of names of local variables...) [namei] onto the stack. (How can I check these values contained in co_names?)\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "python"
  ],
  "user": "jukebox",
  "time": "Jun 30, 2019 at 12:08",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use the marshal module to load the code object.\n\nNow, suppose you want to find out what does LOAD_NAME 1 loads on the evaluation stack.\n\n```\nimport marshal\n\nco = marshal.load(...)\nprint co.co_names[1]\n\n# Or if you want to print the entire co_names\nprint co.co_names\n\n```\nRefer to the dis module for further reference.\n\n",
      "votes": "4",
      "user": "0xec",
      "time": "Jul 2, 2019 at 11:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}