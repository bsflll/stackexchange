{
  "title": "Follow steps in dissassembly after application start",
  "link": "https://reverseengineering.stackexchange.com/questions/11122/follow-steps-in-dissassembly-after-application-start",
  "content": "I am new to reverse engineering so this seems like a very basic issue, and still I was not able to find an answer to it myself yet. Hopefully someone can point me in the right direction. \n\nI am on Windows, I disassembled an exe file using \"PE Explorer\". For now, my process was to somehow, mostly by trial and error, identify the machine code steps I want to change in the dissasembly, then make the necessary change by opening the same exe in a hex editor, finding the same instruction and changing it there.\n\n(Side note here: This two step process is quite inefficient. Is there a program you can recommend where I can combine both steps in one go, or at least side by side?) \n\nWhile this has worked for me so far, I believe there must be a better way than doing this by trial and error and manually trying to identify the functions in the machine code. Is there? Particularly, is there a way to run a program (exe) and in parallel follow the steps in the dissasembly (ideally slowed down..)? \n\nThank you.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "181",
  "tags": [
    "disassembly",
    "windows",
    "debugging"
  ],
  "user": "vic",
  "time": "Oct 16, 2015 at 10:44",
  "comments": [
    {
      "user": "0xec",
      "text": "Use a debugger like OllyDbg which can patch executables.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "cdb -c \"bp $exentry;g\" <yourexe> or windbg -Q -c \"bp $exentry;g\" <your exe\"  will break on WinMainCrt . etc etc (the Address of Entry point in PeHeader)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes, the type of tool you're describing is called a \"debugger\".\n\nSome popular debuggers for Windows are:\n\nThere are plenty of others, but these are some of the most user-friendly.\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Oct 16, 2015 at 14:23",
      "is_accepted": true,
      "comments": [
        {
          "user": "vic",
          "text": "Thanks Jason. Will one of those allow me to make direct changes in the machine code and save back to the same exe? Also, which is your personal favorite?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "OllyDbg v2.01 allows it. You can use an extra plugin for IDA Pro to allow it. Not sure about x64dbg since I so rarely use it. As for my personal favorite, it depends on the requirements. For user-mode x86 debugging on Windows, I use OllyDbg. For user-mode x64 debugging on Windows, I use x64dbg. For kernel-mode debugging on Windows and for user-mode and kernel-mode debugging on non-Windows platforms, I use IDA Pro's debugger.",
          "time": null
        }
      ]
    }
  ]
}