{
  "title": "Reversing network traffic and rebuild packets",
  "link": "https://reverseengineering.stackexchange.com/questions/12474/reversing-network-traffic-and-rebuild-packets",
  "content": "I want to learn something about reverse engineering.\n\nI want to rebuild the TeamSpeak connection (client connects to server).\n\nI hooked the recv and send + encrypt/decrypt functions and logged the following:\n\n```\nSEND_CRYPT: clientinitiv alpha=5KPOgZDgbleuNw== omega=MEwDAgcAAgEgAiBHsn4CYlt90fs0G1sEnx0nmGPfQYMwegBrhzD3yKj3xAIhAKmF+INBCx3rP6FPHq5XfEQt2RFDHdan9EhyZwaziDrV ip=52.28.46.214\nRECV_CRYPT: initivexpand alpha=5KPOgZDgbleuNw== beta=xauLd710Z+FpNA== omega=MEsDAgcAAgEgAiAeZO7JB+dpowIKbjBiTtovildErI2tDPRfMmgBBF\\/h5AIgLkw8l3NXolC6nzuMltP3dbewY0hLzMnEK38uhl0N20w=\nSEND_CRYPT: clientinit client_nickname=zodiac client_version=3.0.18.2\\s[Build:\\s1445512488] client_platform=Windows client_input_hardware=1 client_output_hardware=1 client_default_channel client_default_channel_password client_server_password client_meta_data client_version_sign=F0hY25Dtja0wcU6dzC39rNuYbhnDAbIwPHC3VO9Oicf13kUY2I2g6scPZ3p195Cw9gUYdBIRYm8ucHEhtSeWCw== client_key_offset=104 client_nickname_phonetic client_default_token client_badges=Overwolf=0 hwid=c7b85b27969edb59fc3103155deb11fb\nSEND_CRYPT: ,3e8bfb43b3abf4f6331ebd6d65523eeb\nRECV_CRYPT: ‘—\n\n```\nTeamspeak encrypts with AES the network traffic so alpha/omega are probably the keys for that.\n\nI also sniffed the traffic:\n\n\n\nI tried in Delphi to simply send this:\n\n```\nclientinitiv alpha=5KPOgZDgbleuNw== omega=MEwDAgcAAgEgAiBHsn4CYlt90fs0G1sEnx0nmGPfQYMwegBrhzD3yKj3xAIhAKmF+INBCx3rP6FPHq5XfEQt2RFDHdan9EhyZwaziDrV ip=52.28.46.214\n\n```\nas an udp packet to the server, but didn't get a response.\n\nI hope someone can explain me how I can figure out what to send and what each packet does/contains.\n\nThanks!\n\n",
  "votes": "1",
  "answers": 0,
  "views": "1k",
  "tags": [
    "protocol",
    "packet",
    "sniffing"
  ],
  "user": "nemoest",
  "time": "Apr 18, 2016 at 19:34",
  "comments": [
    {
      "user": "Rup",
      "text": "If it were a sensible crypto protocol then alpha and omega wouldn't themselves be the keys, they'd be using e.g. Diffie-Hellman Key Exchange to agree a shared key without ever transmitting it, and alpha, beta and omega would be components of that. Note however that the command could be read as 'init IV', where IV usually means Initialization Vector, and that an IV or AES key here would normally be 128, 192 or 256 bits (=32,48,64 bytes) whereas e.g. alpha is 10, first omega 78, second 77.",
      "time": null
    },
    {
      "user": "Rup",
      "text": "I think you might do better to work out how it generates these values or processes the response if you can reverse-engineer that out of the client. Alternatively try and capture many traces and look for common patterns, e.g. do some bytes in either parameter crease slowly and so might be a time stamp? Here your two omega values start with the same 10 bytes: is that always true? Might that mean something? etc.",
      "time": null
    }
  ],
  "answers_data": []
}