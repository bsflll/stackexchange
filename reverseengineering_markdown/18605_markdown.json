{
  "title": "How identify witch cpu run assembly [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/18605/how-identify-witch-cpu-run-assembly",
  "content": "I have around 300 bytes of binary machine code.\n\nI don't know which instruction set the code is for so I can't open it with IDA.\n\nIs there any tool that can help identify the instruction set?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "machine-code"
  ],
  "user": "FIF9K9J",
  "time": "6 years ago",
  "comments": [
    {
      "user": "julian",
      "text": "Developing techniques for identification of the target architecture of object code is a challenge being actively researched. The approach used by binwalk is scanning for opcode signatures. See Automatic classification of object code using machine learning as an example of a different approach.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are several tools to identify the opcodes in a file.\n\n",
      "votes": "3",
      "user": "perror",
      "time": "Jun 26, 2018 at 17:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "FIF9K9J",
          "text": "I don't have a bin fie,  I just have 400 bytes of hex  , I can copy it to bin file",
          "time": null
        },
        {
          "user": "perror",
          "text": "Then, binwalk...",
          "time": null
        },
        {
          "user": "perror",
          "text": "Ah, you can also use this binwalk IDAplugin.",
          "time": null
        },
        {
          "user": "zerocool",
          "text": "what if the code is a vm code this method won't work special if it is handmade vm @perror",
          "time": null
        },
        {
          "user": "perror",
          "text": "If you can see the bytes, then you can extract it... there is no magic here.",
          "time": null
        }
      ]
    },
    {
      "content": "You might try to use cpu_rec it claims to be able to identify a wide variety of architectures by analyzing the raw binary data ( 70 architectures).\n\ncpu_rec is a tool that recognizes cpu instructions in an arbitrary binary file. It can be used as a standalone tool, or as a plugin for binwalk.  \n\nAdd the flag -% when using binwalk.\n\nBe patient. Waiting a few minutes for the result is to be expected.\nOn my laptop the tool takes 25 seconds and 1 Gb of RAM\nto create the signatures for 70 architectures, and then the analysis\nof a binary takes one minute per Mb.\nIf you want the tool to be faster, you can remove some architectures,\nif you know that your binary is not one of them (typically Cray or\nMMIX are not found in a firmware).\n\nJust run the tool, with the binary file(s) to analyze as argument(s)\nThe tool will try to match an architecture for the whole file, and\nthen to detect the largest binary chunk that corresponds to a CPU\narchitecture; usually it is the right answer.\n\nIf the result is not satisfying, prepending twice -v to the arguments\nmakes the tool very verbose; this is helpful when adding a new\narchitecture to the corpus.\n\nIf https://github.com/LRGH/elfesteem is installed, then the\ntool also extract the text section from ELF, PE, Mach-O or COFF\nfiles, and outputs the architecture corresponding to this section;\nthe possibility of extracting the text section is also used when\nbuilding a corpus from full binary files.\n\nOption -d followed by a directory dumps the corpus in that directory;\nusing this option one can reconstruct the default corpus.\n\nRunning the tool as a binwalk module typically results in:\n\n```\nshell_prompt> binwalk -% corpus/PE/PPC/NTDLL.DLL corpus/MSP430/goodfet32.hex\n\nTarget File:   .../corpus/PE/PPC/NTDLL.DLL\nMD5 Checksum:  d006a2a87a3596c744c5573aece81d77\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             None (size=0x5800, entropy=0.620536)\n22528         0x5800          PPCel (size=0x4c800, entropy=0.737337)\n335872        0x52000         None (size=0x1000, entropy=0.720493)\n339968        0x53000         IA-64 (size=0x800, entropy=0.491011)\n342016        0x53800         None (size=0x22000, entropy=0.727501)\n\nTarget File:   .../corpus/MSP430/goodfet32.hex\nMD5 Checksum:  4b295284024e2b6a6257b720a7168b92\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             MSP430 (size=0x5200, entropy=0.472185)\n20992         0x5200          None (size=0xe00, entropy=0.467086)\n\n```\nWe can notice that during the analysis of PPC/NTDLL.DLL\na small chunk has been identified as IA-64.\nThis is an erroneous detection, due to the fact that\nthe IA-64 architecture has statistical properties similar\nto data sections.\n\nIf the entropy value is above 0.9, it is probably encrypted or compressed\ndata, and therefore the result of cpu_rec should be meaningless.\n\nKnown architectures in the default corpus\n68HC08\n68HC11\n8051\nAlpha\nARcompact\nARM64 ARMeb ARMel ARMhf\nAVR\nAxisCris\nBlackfin\nCell-SPU\nCLIPPER\nCompactRISC\nCray\nEpiphany\nFR-V\nFR30\nFT32\nH8-300\nHP-Focus\nHP-PA\ni860\nIA-64\nIQ2000\nM32C\nM32R\nM68k\nM88k\nMCore\nMico32\nMicroBlaze\nMIPS16 MIPSeb MIPSel\nMMIX\nMN10300\nMoxie\nMSP430\nNDS32\nNIOS-II\nOCaml\nPDP-11\nPIC10 PIC16 PIC18 PIC24\nPPCeb PPCel\nRISC-V\nRL78\nROMP\nRX\nS-390\nSPARC\nSTM8\nStormy16\nSuperH\nTILEPro\nTLCS-90\nTMS320C2x TMS320C6x\nV850\nVAX\nVisium\nWE32000\nX86-64\nX86\nXtensa\nZ80\n#6502#cc65\n\n",
      "votes": "1",
      "user": "user22363",
      "time": "Jun 26, 2018 at 22:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "julian",
          "text": "This tool is unreliable due to its tendency to produce false positives. This is due in large part to a lack of binary file preprocessing required to identify and differentiate between data and code regions (\"de-noising\"). It is telling that in the only example given a false positive is produced.",
          "time": null
        }
      ]
    }
  ]
}