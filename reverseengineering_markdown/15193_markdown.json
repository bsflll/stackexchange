{
  "title": "Radare2 C output",
  "link": "https://reverseengineering.stackexchange.com/questions/15193/radare2-c-output",
  "content": "I made a simple hello world program, and put it in radare2. I then ran the pc command, which displayed C output. The output was this:\n\n```\n#define _BUFFER_SIZE 256\nconst uint8_t buffer[256] = {\n  0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x8d,\n  0x3d, 0x3b, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xfc, 0x00, 0x00,\n  0x00, 0x00, 0xb0, 0x00, 0xe8, 0x0d, 0x00, 0x00, 0x00, 0x31,\n  0xc9, 0x89, 0x45, 0xf8, 0x89, 0xc8, 0x48, 0x83, 0xc4, 0x10,\n  0x5d, 0xc3, 0xff, 0x25, 0x80, 0x00, 0x00, 0x00, 0x4c, 0x8d,\n  0x1d, 0x71, 0x00, 0x00, 0x00, 0x41, 0x53, 0xff, 0x25, 0x61,\n  0x00, 0x00, 0x00, 0x90, 0x68, 0x00, 0x00, 0x00, 0x00, 0xe9,\n  0xe6, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20,\n  0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0a, 0x00, 0x00, 0x01, 0x00,\n  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,\n  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x0f, 0x00, 0x00,\n  0x34, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x8b, 0x0f,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,\n  0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x10, 0x00,\n  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00,\n  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n```\nThe issue is that I do not know how to properly use this output (compile it, use it, etc). If anybody can help please do. Thanks!\n\n",
  "votes": "10",
  "answers": 3,
  "views": "28k",
  "tags": [
    "c",
    "radare2"
  ],
  "user": "LifeInKernelSpace",
  "time": "Apr 20, 2017 at 23:40",
  "comments": [
    {
      "user": "mrexodia",
      "text": "It will only print the current location as a c-style array. You can use this if you want to use the buffer in your code...",
      "time": null
    },
    {
      "user": "Nordwald",
      "text": "@mrexodia please consider reformulating the content of your comment as an answer for the sake of other people with similar questions.",
      "time": null
    },
    {
      "user": "LifeInKernelSpace",
      "text": "@mrexodia yeah I know, but I don't know how to use the buffer...",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "Neither do I, why do you want a C buffer?",
      "time": null
    },
    {
      "user": "LifeInKernelSpace",
      "text": "@mrexodia I was wondering how to use it...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The pc command will output n bytes from the current seek (s) as a C array, where n is the Block size (b) or the length mentioned in the command.  \n\nThe output is then can be used to, for example, manipulate the array outside of radare2, build a shellcode, decrypt a buffer and so on.\n\nLet's demonstrate it with a simple example.\nHere's a tiny HelloWorld.c program:\n\n```\n#include  <stdio.h>\n\nvoid main()\n{\n        printf(\"Hello, World!  \n\");\n}\n\n```\nLet's compile it with gcc HelloWorld.c -o HelloWorld and open it with radare2 r2 -A HelloWorld \n\nNow let's seek to main and print the function:  \n\n```\n[0x00400400]> s main\n[0x004004d7]> pdf\n            ;-- main:\n/ (fcn) sym.main 17\n|  sym.main ();\n|           ; DATA XREF from 0x0040041d (entry0)\n|       0x004004d7      55             push rbp\n|       0x004004d8      4889e5         mov rbp, rsp\n|       0x004004db      bf74054000     mov edi, str.Hello__World_ ; \"Hello, World!\"\n|       0x004004e0      e80bffffff     call sym.imp.puts          ; int puts(const char *s)\n|       0x004004e5      90             nop\n|       0x004004e6      5d             pop rbp\n\\       0x004004e7      c3             ret\n\n```\nAs I said, just a simple Hello World program :)  \n\nNow, instead of printing the disassembly let's print only the hex bytes of the function using pxf:\n\n```\n0x004004d7  5548 89e5 bf74 0540 00e8 0bff ffff 905d  UH...t.@.......]\n0x004004e7  c3\n\n```\nThese are the hex-bytes which represent the function.\nTo the final part, using bf sym.main let's define the current Block size to be as the size of main, and then print the C-array using pc:\n\n```\n[0x004004d7]> bf sym.main\n[0x004004d7]> pc\n#define _BUFFER_SIZE 17\nconst uint8_t buffer[17] = {\n  0x55, 0x48, 0x89, 0xe5, 0xbf, 0x74, 0x05, 0x40, 0x00, 0xe8,\n  0x0b, 0xff, 0xff, 0xff, 0x90, 0x5d, 0xc3\n};\n\n```\nYou can easily see that the array is structured from the hex bytes we printed before, from 0x55 (push rbp) to 0xc3 (return).  That's it.\n\nLet's say for example that you  disassembled a program and spotted a XOR encrypted data and you want to dump it to a C program and manipulate it there. In such case you need to seek to the offset of the encrypted data (s <addr>), define the block size to be the length of the data (b 150) and then dump it as a C-array using pc (or as a python array using pcp).  \n\nDecompilation\nSome people expect the pc command to be a decompilation of the program to C. If you want to decompile a function to C in radare you can use one of the following ways:  \n\nThe pdc command to print C-like syntax:  \n\n```\nfunction sym.main () {\n    loc_0x4004d7:\n\n     //DATA XREF from 0x0040041d (entry0)\n       push rbp                 \n       rbp = rsp                \n       edi = str.Hello__World ; \"Hello, World!\"                                                                       \n       int puts(const char * s : 0x00400574 = Hello, World!)                                    \n       pop rbp                  \n\n}\n\n```\nUse r2dec - a plugin to radare that can produce a pseudo-C output\nUse radeco - a radare decompiler tool based on radeco-lib.\nUse r2snowman - radare2 plugin which integrates the snowman decompiler.\n\n",
      "votes": "20",
      "user": "Megabeets",
      "time": "Oct 27, 2018 at 6:31",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I wanted to expand on MegaBeets awesome answer. I don't see the point of pdc. It seems more wrong and less high-level.\n\npdf is awesome for my use cases. If I want something high level, I'll use pdd with r2dec. You can install it with r2pm -i r2dec.\n\n```\n[0x0000063a]> pdd\n/* r2dec pseudo C output */\n#include <stdint.h>\n\nvoid main (void) {\n    puts (\"Hello, World!\");\n}\n\n```\nFor more information see\n\n",
      "votes": "4",
      "user": "Evan Carroll",
      "time": "Oct 26, 2018 at 19:23",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Very late answer - r2ghidra is a good choice to decompile as well\n\nInstall it\n\n```\nr2pm update\nr2pm -ci r2ghidra\n\n```\nand then analyse and seek to your function\n\n```\n$ r2 -AAA elf\n[0x0804851b]> s fcn.08048451\n[0x08048451]> pdg\n\nuint fcn.08048451(void)\n\n{\n    uint uVar1;\n    uint unaff_EBP;\n    uint uStack_4;\n\n    *(*0x10 + -4) = unaff_EBP;\n    if (*0x804a021 == '1') {\n        *0x804a020 = *0x804a020 ^ 0x34;\n        *0x804a022 = *0x804a022 ^ 0x32;\n        *0x804a023 = *0x804a023 ^ 0x88;\n        if (*0x804a024 == 'X') {\n            if (*0x804a025 == '\\0') {\n                if (*0x804a022 == 0x7c) {\n                    if (*0x804a020 == 0x78) {\n                        if (*0x804a023 == 0xdd) {\n                            uVar1 = 1;\n                        }\n                        else {\n                            uVar1 = 0;\n                        }\n                    }\n                    else {\n                        uVar1 = 0;\n                    }\n                }\n                else {\n                    uVar1 = 0;\n                }\n            }\n            else {\n                uVar1 = 0;\n            }\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n\n```\nthis will most likely not produce result that can be easily compiled - you'll need to fix it.\n\n",
      "votes": "0",
      "user": "hold-me",
      "time": "Oct 23, 2024 at 7:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}