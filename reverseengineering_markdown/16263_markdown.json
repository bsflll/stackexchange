{
  "title": "How to demangle symbols with starting with \"@@\"?",
  "link": "https://reverseengineering.stackexchange.com/questions/16263/how-to-demangle-symbols-with-starting-with",
  "content": "I'm looking at a PE binary which, given the names of some of the imported symbols, looks like it was built using the Delphi programming language. I'm basing this assumption on the symbols the binary is exporting, e.g. @@Calculator@Initialize and @@Calculator@Finalize. The Initialize and Finalize are reminiscent of the initialization and finalization keywords of the Delphi unit construct.\n\nHere is an excerpt of the output of dumpbin:\n\n```\n     45    0 001335BC @@Aaft@Finalize\n     44    1 001335AC @@Aaft@Initialize\n     13    2 000E78C8 @@Advreg@Finalize\n     12    3 000E78B8 @@Advreg@Initialize\n\n```\nThe only references to Borland's/Embarcadero's mangling scheme I have are these (one in English, one in German) which both describe the mangling scheme in C++:\n\nNone of the patterns in those references seem to apply to the @@ prefix of this symbol. One hypothetical interpretation of @@Foo@Initialize is \"this symbol is for a special function Initialize\", where the @@ prefix is used to avoid conflicts with a \"regular\" method Initialize in a class Foo.\n\nUnfortunately I don't have access to TDUMP.exe so I can't demangle this myself in order to confirm my hypothesis. So how should I be interpreting these symbols matching the pattern @@<name>@Initializeand @@<name>@Finalize?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "531",
  "tags": [
    "symbols",
    "delphi"
  ],
  "user": "John Källén",
  "time": "Sep 5, 2017 at 8:19",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Are you sure it's @@Calculator@Initialize and not @Calculator@@Initialize ?",
      "time": null
    },
    {
      "user": "John Källén",
      "text": "Quite sure. All the symbols are following the pattern @@<foo>@Initialize and @@<foo>@Finalize",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IDA demangles @@Unit1@Initialize as __linkproc__ Unit1::Initialize and looking for __linkproc__ yields some clues:\n\nSo looks like these functions are generated for the linker to ensure a specific initialization order. Apparently in C++ files this is achieved by using #pragma package, and I guess for Pascal units it happens automatically. (C++ Builder can use C++ and Pascal code in a single project; in fact most of VCL is implemented in Object Pascal and C++ Builder includes a Delphi compiler).\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}