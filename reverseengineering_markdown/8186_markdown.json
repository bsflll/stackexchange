{
  "title": "Is it possible to find static pointer with disassembler?",
  "link": "https://reverseengineering.stackexchange.com/questions/8186/is-it-possible-to-find-static-pointer-with-disassembler",
  "content": "I found an assembler instruction: mov [esi+2F],dl. I think ESI is a reference to a struct or class. 0x2F is the offset that references a property of the struct/class. Is it possible to find the value of the ESI register? I think this class or struct is initialized when the game is started.\n\nFor example, I tried to reverse GTA San Andreas. A lot of memory addresses of the GTA SA here.\n\nI've found such information in this site: 0xB6F5F0 - Player pointer (CPed).\n\nI think it's address that I finding now. But how I can find it with debugger like cheat-engine without pointer scan? I'd like to find addresses in asm code. It's possible?\n\nI tried to set a breakpoint to the instruction. But I think it's useless because ESI address is dynamic. As I understand CPed struct/class uses dynamic memory allocation.\n\nI am sorry for my bad English and thanks in advance.\n\n",
  "votes": "6",
  "answers": 1,
  "views": "8k",
  "tags": [
    "disassembly",
    "debuggers",
    "pointer"
  ],
  "user": "tested",
  "time": "Feb 25, 2015 at 16:14",
  "comments": [
    {
      "user": "RoraΖ",
      "text": "I'm a little confused, \"But how I can find it with debugger\", do you want to find the value of ESI in a debugger or in a disassembler?  Since the address of the struct/class is most likely dynamic you won't be able to find it with a disassembler.",
      "time": null
    },
    {
      "user": "rev",
      "text": "@raz however, since the game uses it, there must be a static location which stores the pointer.",
      "time": null
    },
    {
      "user": "user2823000",
      "text": "Either you do it the \"hard\" way, you backtrack instructions until you find what is the last modification on ESI and thus what is its value at that point. Or you just put a breakpoint on your debugger and read the value of ESI at this instruction. Any specific reason you want to do this statically?",
      "time": null
    },
    {
      "user": "RoraΖ",
      "text": "@AcidShout Why?  If it's an object it's most likely allocated at runtime and no static location in the binary is necessary.  Unless it's a global variable there's not reason for it to have a static location.",
      "time": null
    },
    {
      "user": "rev",
      "text": "@raz you still have the variable which stores a pointer to the allocated object, and you can take it from there. and that variable will be static",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm going to explain you a bit how most games do it (I have never reversed any GTA but I suppose it's something like this anyway).\n\nI'm going to cover static and dynamic allocation of structures.\n\nThe static way:\n\n```\nGlobalGameInfo g_info;\n// ...\ng_info.some_data = 1;\n\n```\nThis is what ends up being a static offset in IDA, like so:\n\n```\nlea eax, [g_info + 0xAABB] ; suppose 0xAABB is the offset for 'some_data'\nmov [eax], 1;\n\n```\ng_info is always going to stay at the same offset, so once you find it, you can just use g_info + offset to get your data.\n\nThe dynamic way:\n\n```\nPlayer* players; // can be defined as Player* players[<count>] or Player** players;\n                 // it's the same\n// ...\nplayers = new Player[players_count];\n// ...\nplayers[1].alive = false;\n\n```\nWhich then results in:\n\n```\n; this is a static location which is actually the \"players\" variable\n; and it contains an address which points to the offset in memory of the\n; actual players structure\ndword_xxxx dd ?\n\n```\nSo to use it in e.g. Cheat Engine, you Add a new address, check Pointer, add the xxxx part of dword_xxxx, and in offset, put your desired offset.\nFor example, to get players[1].alive, with alive being on offset e.g. 0x100, you'd calculate:\n\n```\nvalue_stored_in_dword_xxxx + sizeof(Player) * player_id + 0x100\n\n```\nSo if dword_xxxx -> 0xAABBCCDD, sizeof(Player) -> 0x204, player_id -> 8, and offset -> 0x100, your calculation would be:\n\n```\n0xAABBCCDD + (0x204 * 8) + 0x100\n// ^base      ^size   ^id  ^offset\n\n```\nSince you gave us mov [esi + 0x2F], dl:\n\nCheat Engine\n\nIn Cheat Engine, it's easy as inputting the pointer and the offset:\n\n\n\nAs you can see, 0x5CCB138 is the dword_xxxx, the value inside dword_xxxx is 0x09021A00, and that + 0x142 (my offset) results in the start of the in-game name.\n\nC\n\nIn case you want to do it programmatically, you can do it like this in C:\n\n```\nPCHAR my_name = PCHAR (*PDWORD(0x5CCB138) + 0x142);\n^save the addr|       | ^deref to get     | add the offset\n              | ^cast |    0x09021A00     |\n\n// -> be careful, do not surpass the max length!\n// -> also remember that there's 'your name' length + 1 \\x00 byte\n//    at the end!\nchar new_name[] = \"newName\";\nstrncpy(my_name, new_name, sizeof(new_name)); // again: be careful with the length!\n\n```\nThe proper way, however, would be reversing the entire struct like this:\n\n```\nstruct player_data {\n    int ID;\n    char name[15];\n    int some_data;\n    ...;\n};\n// make sure the order / size of each item is correct!\n// a single error can fuck up the entire struct\n\n// I'm going to assume you understand pointers\nplayer_data* data = *(player_data**) 0x5CCB138;\n\n// do your changes\n// again, be careful with the length!\n// also note that sizeof() will not work if you use char*\nchar new_name[] = \"new name!\";\nstrncpy(data->name, new_name, sizeof(new_name));\n\n```\n",
      "votes": "10",
      "user": "rev",
      "time": "Feb 9, 2015 at 14:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}