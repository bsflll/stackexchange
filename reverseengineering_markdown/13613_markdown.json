{
  "title": "Is it possible to hook CPU instructions without severe performance impact?",
  "link": "https://reverseengineering.stackexchange.com/questions/13613/is-it-possible-to-hook-cpu-instructions-without-severe-performance-impact",
  "content": "I have been working on some unpackers, and I noticed that at their end, they mostly use this:\n\n```\nmov edx, [ebp+oep]\ncall edx ; now, you're at the OEP of the original binary\n\n```\nOr this:\n\n```\nmov ecx, [ebp+oep]\njmp ecx\n\n```\nOr this:\n\n```\nmov eax, [ebp+oep]\npush eax\nret\n\n```\nKnowing that, with a quick hook on absolute jumps/calls you'd unpack stuff in literally seconds. Apart from that, some software uses cpuid and rdstc to identify you, while protecting the assembly heavily with a lot of obfuscation. Put an \"instruction breakpoint\" on either, and you just bypassed everything faster than your eye blinks!\n\nIs what I'm saying possible, without severe performance hits? I am aware of tracing, but that's really really slow so it's not an option.\n\nEdit: I am aware of the existence of hypervisors, I just have no idea if they fit my situation, and if so, I wouldn't know how to apply those techniques to work, so any pointers, even if Google keywords, would be great.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "breakpoint",
    "hooking",
    "hypervisor"
  ],
  "user": null,
  "time": "Oct 4, 2018 at 4:25",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "you can put a physical breakpoint somewhere like that, but it might be detected by the program.  Using a hypervisor-level debugger, you can place a virtual breakpoint, and the performance is good, but the hypervisor might be detected by the program.  There is no single solution.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The best way to currently do this is by creating a micro-hypervisor, exploiting technologies originally created to support faster virtualization to monitor usermode as well as kernelmode code. This became quite a common replacement for AVs once SSDT hooking was protected by Microsoft using patch-guard. Additionally, a few security companies sprung out, using hypervisors and micro-kernels to protect and separate different components of the OS (an example is Bromium), and Microsoft recently announced their Application Guard which uses the same technique and actually installs an hypervisor when windows is installed.\n\nAlthough setting up an  hypervisor might seem like a silver bullet, it has many disadvantages:\n\nToday, there are several open source hypervisors available, most for experimentation purposes and don't include a lot of actual features past the infrastructure needed to set up a functional hypervisor.\n\nHere are some of those open source proof of concepts, that could be used as a starting point:\n\nHooking the Interrupt Vector Table, Interrupt Descriptor Table or the System Service Dispatch Table was very common in the not so distant past. Although this does not give the same granularity a hypervisor has and you won't be able to detect specific instructions, it was common practice that was partially replaced by hypervisors to get low level monitoring not provided by the OS.\n\nThe basic idea behind it is to override the list of addresses a CPU executes when certain interrupts are triggered. This is usually the OS's responsibility to handle interrupts and how many low level functionality is provided by the OS (such as managing memory and permissions, paging, multiple task support, input/output with peripherals etcetera). This technique was made somewhat irrelevant on certain OSes using techniques like PatchGuard.\n\nThe rtdsc instruction is a bit special in a way not may other instructions are. Quoted from here:\n\nIt is special because it has it's own disabling control bit(\"time stamp disable\") in CR4. When that control bit is set, only kernelmode code is allowed to execute the rdtsc instruction, but what's more interesting is that when this control bit is set, using rdtsc from usermode will trigger a General Protection Fault, thus making such instructions detectable by the kernel.\n\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Apr 14, 2017 at 16:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "phuclv",
          "text": "Windows does support nested virtualization. Not sure the exact time but at least since before this answer",
          "time": null
        }
      ]
    }
  ]
}