{
  "title": "Encryption (AES-128) in automatic meters reading",
  "link": "https://reverseengineering.stackexchange.com/questions/14759/encryption-aes-128-in-automatic-meters-reading",
  "content": "I have theoretical questions about encryption when there's a lot of devices involved. Specifically it's about reading meters (water/gas/heat meters).\n\nHere's some introduction.\n\nI was trying to read a water meter but it turned out data frames are encrypted with AES-128. What's not encrypted is the water meter number (actually its a radio thingy).\n\nI was able to download a pretty old version of the software (released 8 years ago, I know there's newer version but I don't have access). It was written in .Net so I decompiled it with JustDecompile soft. I was looking for any classes responsible for encryption. What I found about AES is connected to USB stick, so I assume that all the decryption stuff (or the important one) is placed on USB stick.\n\nAnd here's the question - remember - just theoretical one - how would you solve problem of encryption if you were the programmer/engineer behind it? Would it be just one decryption key? Or key would be generated based on device's number? What about device itself? Each would have different encryption KEY based on its numbers?\n\nAs I said - these are just theoretical questions. I know that I have no chance of decrypting it without some serious reverse engineering, but I've already spent hours on this, so I'm just curious.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "982",
  "tags": [
    "decompilation",
    "encryption",
    "decryption",
    ".net"
  ],
  "user": "Chrobry",
  "time": "Mar 26, 2017 at 14:50",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "AES-128 is very specific, how did you find it out?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "\"AES is connected to USB stick\" does not make sense...",
      "time": null
    },
    {
      "user": "Chrobry",
      "text": "It's written in documentation. As for \"connected to USB\" - what I meant was that there's a class called \"USBKeys\" and there's a static method called AES there. And that's all about AES. But I decompiled older version of software. I'm guessing that these water meters were encrypted later than this software I have was released.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "What is the connection between the meter and the PC? USB?",
      "time": null
    },
    {
      "user": "Chrobry",
      "text": "No. It's wireless transmition. W-MBUS (Wireless MBUS)/OMS (Open Metering System) standard on 868 MHz. That is being read by (in version of manufacturer) terminal on Windows Mobile (It can be also smartfon, but I'm not sure how they manage that). Probably it's being decrypted on that terminal as well. But there's also PC software where's that data can be managed.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I can see a few \"types\" of keys used here, I'll list each with it's pros and cons:\n\nThe ones I would assume are most likely to be used in the scenario you describe are either 1 or 2, as security is rarely a consideration for those type of embedded devices today, let alone 10-20 years ago. I made this list more general then necessary in hopes it'll be useful for future readers.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Mar 26, 2017 at 14:28",
      "is_accepted": false,
      "comments": []
    }
  ]
}