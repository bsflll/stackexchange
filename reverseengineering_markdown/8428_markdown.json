{
  "title": "IDAPro, the arguments could not be passed to the python script",
  "link": "https://reverseengineering.stackexchange.com/questions/8428/idapro-the-arguments-could-not-be-passed-to-the-python-script",
  "content": "Using IDA 6.6, I cannot pass command line arguments to the IDAPython script.\n\nThe command I use is:\n\n```\nidaq64 -c -A -S\"myscrip.py arg1\" thebinpath. \n\n```\nHere is the demo script myscript.py:\n\n```\nimport sys\nif len(sys.argv) >= 2:\n    print(\"Successfully received parameters: \" + str(sys.argv))\nelse:\n    print(\"Failed receiving parameters!!\")\n\n```\nI obviously expect the python script to print the \"Successfully received parameters\" sentence with \"arg1\" as the only parameter, however \"Failed receiving parameters!!\" is printed instead.\n\nFor some unknown reason sys.argv has only one string (myscript.py).\n\nI guess that there might be another way of getting these parameters, is this right?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "William",
  "time": "Jul 27, 2018 at 5:01",
  "comments": [
    {
      "user": "joxeankoret",
      "text": "I have had problems as well with arguments in IDAPython scripts. My recommendation, which is what I do and works, is to use environment variables, like: SOME_VAR=value idaq64 -A -S\"script.py\" binary",
      "time": null
    },
    {
      "user": "William",
      "text": "Thank you for your reply. I later find another solution for this. The python arguments seems to be stored in the idc.ARGV. So I just use idc.ARGV to test the arguments.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Roughly three years have passed and this relatively simple question still lacks a proper answer. Encountering the same issue today using IDA 7.0, I might as well spend the time providing a proper answer.\n\nQuoting from IDA's help file\n\nThe documentation quoted above provides an explicit example for the IDC scripting language but leaves us to interpolate / guess what would be the IDAPython equivalent.\n\nNaturally, one might assume idc's ARGV parameter will be translated to python's well known sys.argv, which is used precisely for that in most python files as is well-documented to hold the command line arguments provided when a script is run.\n\nThe name resemblance fooled me too, however because of how python scripts are executed in IDA the documentation above should be treated literally in python as well. The ARGV is the only place arguments are accessible to IDA python scrips executed using the -S flag.\n\nIn IDA python, however, it is not available as a global paramter but should be accessed through the idc module.\n\nHere's a simple example;\n\ngiven the followingf myscript.py file:\n\n```\nimport sys, idc\n\nprint(\"Sys args: \" + str(sys.argv))\nprint(\"Idc args: \" + str(idc.ARGV))\n\n```\nExecuting the following command (ignoring the usual IDA banner):\n\n```\nida64 -A -S\"myscript.py\" arg1 \"arg one and a half\" arg2 -L/some/other/flags/logfile.txt -t\n\n```\nWill result in the following output:\n\n```\nSys args: []\nIdc args: [\"arg1\", \"arg one and a half\", \"arg2\"]\n\n```\n",
      "votes": "6",
      "user": "0xC0000022L",
      "time": "Jul 27, 2018 at 11:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}