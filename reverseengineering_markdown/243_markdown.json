{
  "title": "How does GDB's process recording work?",
  "link": "https://reverseengineering.stackexchange.com/questions/243/how-does-gdbs-process-recording-work",
  "content": "A curious and useful feature of GDB is process recording, allowing an analyst to step forwards and backwards through execution, writing a continuous log of the changes to program state that allow for remarkably accurate playback of program code.\n\nAlthough we can all safely say the process recording log contains the executable's changes to the various data and control registers, the functionality is much more than keeping some serialized representation of the current continuation. For example, I've been able to reify the state of an executable that uses threads to modify shared memory.\n\nCertainly we can't expect time dependent code to work, but if threading code modifying shared state can, in general, be stepped through backwards and still work reliably again, what limitations does process recording have beyond the purely architectural challenges (i.e displaced stepping) specified in the documentation?\n\n",
  "votes": "9",
  "answers": 1,
  "views": "698",
  "tags": [
    "gdb",
    "debuggers"
  ],
  "user": "zetavolt",
  "time": "Mar 24, 2013 at 17:46",
  "comments": [
    {
      "user": "Peter Andersson",
      "text": "Is this really reverse engineering? It seems to me that it relates more to forward engineering and reading code as the GDB source is open.",
      "time": null
    },
    {
      "user": "zetavolt",
      "text": "Point taken, I believe the topic is certainly of interest to reverse engineers so I was banking on it being considered appropriate.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "AFAIK it is based on a relatively new CPU feature in Intel x86 CPUs. It is the same feature that is used for \"recording\" in VMware.",
      "time": null
    },
    {
      "user": "zetavolt",
      "text": "I think we can all agree that the question (generally) is of immediate interest to reverse engineers. Additionally, the chance of receiving a thoughtful and intelligent response relating to this particular question is much greater here than on StackOverflow, which I think merits your consideration Peter.",
      "time": null
    },
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "While this question isn't directly about doing RE, it's of particular interest to people doing RE and it's about understanding a tool of RE in a way that helps understand RE techniques. So I think it is on-topic on this site.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The feature is described in a bit more detail on GDB wiki:\n\nThis presentation describes even more of the internals.\n\nIn addition to above, for some remote targets GDB can make use of their \"native\" reverse execution by sending Remote Serial Protocol packets bc (backward continue) and bs (backward step). Such targets include:\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}