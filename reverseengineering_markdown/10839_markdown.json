{
  "title": "Optimization of strcpy at the assembler level",
  "link": "https://reverseengineering.stackexchange.com/questions/10839/optimization-of-strcpy-at-the-assembler-level",
  "content": "I'm writing small C programs to teach myself how to use GDB to disassemble code.  The C in question is:\n\n```\nvoid function( char **pointer )\n{\n   *pointer = malloc(100);\n   strcpy(*pointer,\"This is text\");\n}\n\n```\nThe disassembly is:\n\n```\n0x400620:    push   %rbp\n0x400621:    mov    %rsp,%rbp\n0x400624:    sub    $0x10,%rsp\n0x400628:    mov    %rdi,-0x8(%rbp)\n0x40062c:    mov    $0x64,%edi\n0x400631:    callq  0x4004f0 <malloc@plt>\n0x400636:    mov    %rax,%rdx\n0x400639:    mov    -0x8(%rbp),%rax\n0x40063d:    mov    %rdx,(%rax)\n0x400640:    mov    -0x8(%rbp),%rax\n0x400644:    mov    (%rax),%rax\n0x400647:    movabs $0x2073692073696854,%rcx\n0x400651:    mov    %rcx,(%rax)\n0x400654:    movl   $0x74786574,0x8(%rax)\n0x40065b:    movb   $0x0,0xc(%rax)\n0x40065f:    leaveq \n0x400660:    retq   \n\n```\nI understand the prologue: 0x400620-0x400624. I also understand that the pointer is being initialized to 100 char here: 0x400628-0x40063d.\n\nI cannot seem to figure out what strcpy is doing and I do not understand how to examine the contents of the addresses listed in 0x400647 and 0x400654.\n\nCan someone help me work through this?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "1k",
  "tags": [
    "disassembly"
  ],
  "user": "David Lee Braun",
  "time": "Sep 12, 2015 at 9:52",
  "comments": [],
  "answers_data": [
    {
      "content": "So, I assume that you understood the stack-frame initialization part and the call to the malloc through the PLT (Procedure Linking Table).\n\n```\n0x400636:    mov    %rax,%rdx\n\n```\nThis line take the return code of the malloc function and save it in the rdx register. This value correspond to the address of the memory space you just created through the malloc call.\n\n```\n0x400639:    mov    -0x8(%rbp),%rax\n\n```\nHere, you take the first argument of the function we are in (char **pointer according to your source code) and it is stored in the rax register.\n\n```\n0x40063d:    mov    %rdx,(%rax)\n\n```\nThis line transfert the address of the allocated memory area to the pointer variable.\n\n```\n0x400640:    mov    -0x8(%rbp),%rax\n\n```\nAn (unnecessary) copy of the first argument of function in rax (the register already store this value, probably a glitch of the compiler that did not optimized enough).\n\n```\n0x400644:    mov    (%rax),%rax\n\n```\nSet rax as the address pointed by pointer.\n\n```\n0x400647:    movabs $0x2073692073696854,%rcx\n\n```\nTo understand that, you need to decompose this magic number 0x2073692073696854 and cut it into pieces. Lets use gdb for that:\n\n```\n(gdb) p /c 0x54\n$1 = 84 'T'\n(gdb) p /c 0x68\n$2 = 104 'h'\n(gdb) p /c 0x69\n$3 = 105 'i'\n(gdb) p /c 0x73\n$4 = 115 's'\n(gdb) p /c 0x20\n$5 = 32 ' '\n(gdb) ...\n\n```\nI guess that you start to see what is the meaning of this big number by now...\n\n```\n0x400651:    mov    %rcx,(%rax)\n\n```\nOn this line, the previous magic number is stored in the address pointed by pointer.\n\n```\n0x400654:    movl   $0x74786574,0x8(%rax)\n\n```\nThis last magic number is, in fact, the end of your string (it correspond to the word text).\n\n```\n0x40065b:    movb   $0x0,0xc(%rax)\n\n```\nCopy the \\0 character to end the string at the right place (0xc is the size of the string and rax is the start address of the string).\n\n",
      "votes": "5",
      "user": "perror",
      "time": "Sep 12, 2015 at 7:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "user45891",
          "text": "The text seems to be in the wrong order in the register value - that is because x86/64 stores values in little-endian",
          "time": null
        },
        {
          "user": "perror",
          "text": "I forgot to tell about that, wasn't it obvious ?",
          "time": null
        },
        {
          "user": "user45891",
          "text": "The likelihood of it being obvious for people not that deep into assembly are fairly low. I try to read answers here as if I knew next to nothing and saw that as a possible follow-up question",
          "time": null
        },
        {
          "user": "David Lee Braun",
          "text": "This pretty much explains it.  I was thinking that the string was stored at instead of the string was those funny numbers.  Thanks for the explanation.",
          "time": null
        }
      ]
    },
    {
      "content": "Look at the hex digits at 0x400647 and convert them to ascii characters, byte by byte (2 digits by 2 digits). Does the result ring a bell?\n\nSince the source for your strcpy is a constant string, the compiler optimizes \"copy the contents of a static string, byte by byte, until \\0 is reached\" to \"fill the target with the expected bytes in the fastest way possible\".\n\nIf you want to see what the memory looks like after the optimized strcpy, set a breakpoint on 0x40065b and enter x/20b *$rax.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Sep 12, 2015 at 7:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "David Lee Braun",
          "text": "Because I did not use any optimization flags it never occurred to me that the compiler was taking liberties and optimizing.  thanks for pointing this out Guntram.",
          "time": null
        }
      ]
    }
  ]
}