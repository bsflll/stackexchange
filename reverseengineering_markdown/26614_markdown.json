{
  "title": "C++ structure containing a RTTI getter function?",
  "link": "https://reverseengineering.stackexchange.com/questions/26614/c-structure-containing-a-rtti-getter-function",
  "content": "I'm working on reversing a C++ application and I've come across a structure that contains a getter function that returns TypeDescriptor*, I've read some articles on RTTI and reversing C++ but can't find a structure that matches what I'm seeing.\n\nIt seems to be a compiler generated structure because of the TypeDescriptor getter? I'm hoping someone can point me in the right direction. There's multiple of these structures, they are in mostly contiguous but not completely as far as I can see.\n\nPseudo code for the struct looks like:\n\n```\n// These are all function pointers\nclass SomeClazz\n{\n    // func1/func2 are pointers to the same function. It looks like a constructor.\n    void* func1(void* param1, void** param2);\n    void* func2(void* param1, void** param2);\n    // This function differs depending on the class. I believe this to be a implementation of a virtual function maybe?\n    virtual void handler();\n    // Returns a pointer to a RTTI TypeDescriptor depending on the class\n    TypeDescriptor* get_type_descriptor();\n    void get_something();\n} \n\n```\nHere's code in the func1/2 functions in case there's a hint of what it is:\n\n```\n\nundefined ** FUN_00125860(longlong param_1,undefined **param_2)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  \n  *param_2 = (undefined *)&Vftable_maybe_00589ef0;\n  uVar1 = *(undefined4 *)(param_1 + 0xc);\n  uVar2 = *(undefined4 *)(param_1 + 0x10);\n  uVar3 = *(undefined4 *)(param_1 + 0x14);\n  *(undefined4 *)(param_2 + 1) = *(undefined4 *)(param_1 + 8);\n  *(undefined4 *)((longlong)param_2 + 0xc) = uVar1;\n  *(undefined4 *)(param_2 + 2) = uVar2;\n  *(undefined4 *)((longlong)param_2 + 0x14) = uVar3;\n  return param_2;\n}\n\n```\nHere's get_type_descriptor:\n\n```\nTypeDescriptor * class::get_type_descriptor(void)\n\n{\n  return &class_<lambda_88a0d3301c644a20c1df3ad0c52a86e4>_RTTI_Type_Descriptor;\n}\n\n////////////\nLEA RAX, [class_<lambda_88a0d3301c644a20c1df3ad0c52 ...]\nRET\n\n```\nHere's get_something, not sure what the purpose is or what it's doing:\n\n```\nLEA RAX, [RCX+0x8]\nRET\n\n```\nAny help/suggestions would be great. Thanks.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "428",
  "tags": [
    "binary-analysis",
    "c++",
    "ghidra",
    "struct"
  ],
  "user": "user3238415",
  "time": "Dec 23, 2020 at 10:57",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "I'm pretty sure that's a shared_ptr with a custom deleter. Grep for typeid in MSVC <memory>.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IIRC the typeid operator returns a pointer to a type info instance.\n\nOverall the code looks like a lambda expression implementation; the “constructor” captures the context so that the “handler” (lambda body) can access the variables it needs from the outer scope.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Dec 23, 2020 at 15:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "user3238415",
          "text": "Thanks. Maybe impossible from what I've provided but any chance you could provide some pseudo code of how you imagine it might have looked? I haven't had much luck trying to recreate this in code.  Also thank you for your amazing RTTI article.",
          "time": null
        }
      ]
    },
    {
      "content": "This is a lambda expression. When the lambda expression has captures it is compiled into a implementation defined structure. In my case the lambda has captures, using MSVC the structure was _Func_Base defined as:\n\n```\n#pragma warning(push)\n#pragma warning(disable : 4265) // class has virtual functions, but destructor is not virtual (/Wall)\n// CLASS TEMPLATE _Func_base\ntemplate <class _Rx, class... _Types>\nclass __declspec(novtable) _Func_base { // abstract base for implementation types\npublic:\n    virtual _Func_base* _Copy(void*) const                 = 0;\n    virtual _Func_base* _Move(void*) noexcept              = 0;\n    virtual _Rx _Do_call(_Types&&...)                      = 0;\n    virtual const type_info& _Target_type() const noexcept = 0;\n    virtual void _Delete_this(bool) noexcept               = 0;\n\n#if _HAS_STATIC_RTTI\n    const void* _Target(const type_info& _Info) const noexcept {\n        return _Target_type() == _Info ? _Get() : nullptr;\n    }\n#endif // _HAS_STATIC_RTTI\n\n    _Func_base()                  = default;\n    _Func_base(const _Func_base&) = delete;\n    _Func_base& operator=(const _Func_base&) = delete;\n    // dtor non-virtual due to _Delete_this()\n\nprivate:\n    virtual const void* _Get() const noexcept = 0;\n};\n#pragma warning(pop)\n\n```\n",
      "votes": "0",
      "user": "user3238415",
      "time": "Dec 26, 2020 at 5:15",
      "is_accepted": true,
      "comments": []
    }
  ]
}