{
  "title": "Decompilation techniques for DOS .COM files",
  "link": "https://reverseengineering.stackexchange.com/questions/3789/decompilation-techniques-for-dos-com-files",
  "content": "I've found a binary copy of a DOS freeware game I was fond of back in the day (Firefighter, downloadable as FIRE.COM) but the source code is not available. I'd like to re-implement it in C or Python using Unix curses and while I'm fully competent to do that part, I know almost nothing about tools for reverse-engineering and decompiling DOS .COM file binaries.  \n\nGoing by documentation that says .COM is headerless raw machine code, I tried running objdump -D -b binary -m i386 on it. The result didn’t look valid. objdump -D -b binary -m i8086 –adjust-vma=0×100 appeared to do the trick as did using NASM with ndisasm -b 16 -a -o 0×100 and both of those do seem to produce plausible assembly listings.\n\nIdeally, though, I'm looking for something that decompiles and renders to C in as-if-it-were-assembler style with generated variable names and useful annotations on the DOS traps. I understand that such a beast may not exist, but on the chance one does I'm seeking recommendations.\n\n",
  "votes": "16",
  "answers": 6,
  "views": "15k",
  "tags": [
    "tools",
    "decompilation",
    "decompiler",
    "dos-com"
  ],
  "user": "ESR",
  "time": "Mar 8, 2014 at 21:26",
  "comments": [
    {
      "user": "asheeshr",
      "text": "Welcome to RE! Have you searched and looked at the existing questions on the site?",
      "time": null
    },
    {
      "user": "ESR",
      "text": "How is this not in scope under \"tools commonly used for reverse engineering hardware or software\"?",
      "time": null
    },
    {
      "user": "asheeshr",
      "text": "Have you looked through the existing questions? Have you tried out any of the solutions already provided? Where/Why have the existing questions failed? This question shows absolutely no previous research.",
      "time": null
    },
    {
      "user": "grkvlt",
      "text": "I have updated the question; Can the on hold status be removed?",
      "time": null
    },
    {
      "user": "aybe",
      "text": "Maybe you can get some hints here program-transformation.org/Transform/MachineCodeDecompilers",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "My answer is a little late; newcomer to this site. The Decompiler project was initiated in order to decompile MS-DOS EXE and COM binaries. The project has both a command-line and a GUI tool:\n\nhttps://sourceforge.net/projects/decompiler/\n\nUse the following command with the command-line tool to decompile COM programs:\n\n```\ndecompile --default-to ms-dos-com myprog.com\n\n```\nIn the GUI, use the menu command File > Open as... to open the COM file and specify a start address like 0800:0100.\n\n",
      "votes": "7",
      "user": "John Källén",
      "time": "Jul 25, 2015 at 8:00",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "IDA Pro and a number of other disassemblers will disassemble your file, assuming that it isn't compressed or otherwise obfuscated.  But this is only the first step in producing a working assembly language program, which you will need if you are to translate it into a higher language.\n\nEssentially you are looking at two projects.  The first is to produce a working assembly language version of your game.  The second is to translate the game mechanics and logic into C++ or whatever.  The first is easier than the second.\n\n",
      "votes": "5",
      "user": "Paddywhacker",
      "time": "Apr 14, 2014 at 4:52",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I recently found a DOS program which turns .COM and .EXE into a simple \"pseudo-code\".\nThe program is   ---   exe2c.zip\n\nhttp://www.codeforge.com/dlpre/201558/cb2e19437871.zip__.html\n\nNot an \"excellent\" tool, but i found it useful.\nStart by executing    ENVMNU.EXE    and then entering the .COM or .EXE filename.\n---(hint?)  If better results are necessary, use the individual modules\n( such as the DOS to ASM module ) and hand-edit ASM discrepancies \nthen feed them to the ASM to C module and observe the results.\n\n-- William Gallant\n\n",
      "votes": "4",
      "user": "user4069",
      "time": "Aug 29, 2014 at 8:14",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "no beast exist that will decompile 16 bit com program\nif you prefer to debug it look for grdb from ladsoft\nalso have in hand a copy of ralf browns interrupt list for all the\nint 21 / int 10 SetCursor / GetCursor calls   \n\nalso make sure you rename the downloaded exe to be 8dot3 compatible\n(name less than 8 charecters)\n\n```\nGRDB.EXE firefi.com    \n\nGet Real Debugger Version 9.6  Copyright (c) 1997-2009 David Lindauer (LADSoft)\nGRDB comes with ABSOLUTELY NO WARRANTY, for details type `?g'\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `?gr' for details\n\nDPMI Start code hooked\nHistory enabled\neax:00000000 ebx:00000000 ecx:00007500 edx:00000000 esi:00000000 edi:00000000\nebp:00000000 esp:0000FFEE eip:00000100 flag:00000202 NV UP EI PL NZ NA PO NC\nds:1F25 es:1F25 fs:1F25 gs:1F25 ss:1F25 cs:1F25\n1F25:0100 E9 25 27       jmp          2828\nSize: 00007500\n->  \n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Mar 21, 2014 at 0:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As I review your application (Fire.COM), I think you should use some DOS debugger like Turbo Debugger 5.0 to debug and reverse this application because I have some encrypted stage in it. If you want to \"decompile\" these application to C code, it's very hard, I had tried some tools in the past (2008) but there was not a good tool to do it. I also got a C source but there was many inline assembly in it.\n\n",
      "votes": "2",
      "user": "tuantm",
      "time": "Aug 29, 2014 at 7:04",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "For .com (MS DOS) programs I use ndisasm (Netwide Disassembler) as mentioned in this answer. It is very simple, just work without any magic.\n\n",
      "votes": "1",
      "user": "MarianD",
      "time": "Nov 4, 2021 at 11:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}