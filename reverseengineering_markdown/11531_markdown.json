{
  "title": "Static Address in Dynamically Loaded DLL",
  "link": "https://reverseengineering.stackexchange.com/questions/11531/static-address-in-dynamically-loaded-dll",
  "content": "I am trying to re-write the following function in my injected DLL.\n\n```\nmov edi,edi\npush ebp\nmov ebp,esp\nmov eax, [sound.dll+1AE0]\npush eax\nmov ecx,[ebp+08]\nmov eax,[ecx]\nmov eax,[eax+0C]\npush eax\ncall sound.dll+7C640\npop ebp\nret 0004\n\n```\nI am loading my DLL via CreateRemoteThread. Is there a way to get the address of sound.dll+1AE0 (or linkage) when the DLL is loaded without having to to do GetModuleHandleEx and calculate the address dynamically?\n\nMaybe with some imports or some linkage artifact?\n\nThanks!\n\nEDIT:\n\nThe GetModuleHandleEx approach will look like:\n\nLoad mem1AE0 with sound.dll+1AE0 address\n\nand then in my function:\n\n```\n_declspec(naked) void MyFunction() { \n    __asm { \n        mov edi,edi \n        push ebp \n        mov ebp,esp \n        mov eax, mem1AE0 \n        mov eax, [eax] \n        push eax \n        mov ecx,[ebp+08] \n        mov eax,[ecx] \n        mov eax,[eax+0C] \n        push eax \n        call sound.dll+7C640 \n        pop ebp \n        ret 0004 \n    } \n} \n\n```\nThe problem is when I have a call [sound.dll+XXXX] instruction\n\nIn that case I need to create a variable which will point to that memory\n\nLoad it with the correct address and also create a proxycall DWORD\n\nand then do:\n\n```\npush eax \nmov eax, memXXXX \nmov eax, [eax] \nmov memXXXX_content, eax \npop eax \ncall memXXXX_content \n\n```\nwhich is totally inefficient unless I am doing somehting wrong?\n\nThanks\n\nEDIT: I believe there is no way to get static links if you are dynamically loading your DLL. \n\n",
  "votes": "5",
  "answers": 0,
  "views": "382",
  "tags": [
    "function-hooking"
  ],
  "user": "fred26",
  "time": "Dec 28, 2015 at 22:55",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "what's the problem with calling GetModuleHandleEx or OpenProcess/ReadProcessMemory?",
      "time": null
    },
    {
      "user": "Nick Cano",
      "text": "What is your end goal here? You are re-implementing the function exactly the same? If you have a specific change, it may be better to patch it in-place. Either that or place your hook at a more specific level.",
      "time": null
    },
    {
      "user": "fred26",
      "text": "Yes, I need to replace that function entirey. Exactly the same.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "your second snippet should appear as \"call [memXXXX_content]\" because there is no form of absolute near call in x86, but that makes the whole thing equivalent to \"call [memXXXX]\".",
      "time": null
    },
    {
      "user": "fred26",
      "text": "peter, I tried it and it doesn't work. call [memXXXX] calls the mem itself and not its content",
      "time": null
    }
  ],
  "answers_data": []
}