{
  "title": "Simulate Windows menu item activation",
  "link": "https://reverseengineering.stackexchange.com/questions/12312/simulate-windows-menu-item-activation",
  "content": "I am trying to shortcut the call to a procedure that is activated when clicking on a menu item. \n\nI injected a DLL on the process that creates this window with the menu bar.\n\nI used Spy++ from VisualStudio to obtain the Menu Identifier for this specific item (wid: 40003). Now I am calling \n\nCallWindowProcW(wndproc, hwnd, WM_COMMAND, 40003, 0); \n\nHowever, the item procedure is not triggered.\nI cannot call the procedure directly because I do not know what it is. I just know that when I click this menu it activates it.\n\nI have obtained windproc and hwnd doing the following inside my DLL:\n\n```\n void Init()\n {\n     DWORD procID = GetProcessId(GetCurrentProcess());\n     EnumWindows(myCallback, procID);\n }\n\n BOOL CALLBACK myCallback(HWND hWnd, LPARAM lParam)\n {\n     DWORD wndId;\n\n     GetWindowThreadProcessId(hWnd, &wndId);\n     if(wndId == (DWORD)lParam) //Found the right window handle\n     {\n         WNDPROC windowFunc = (WNDPROC)GetWindowLong(hWnd, GWL_WNDPROC);\n         LRESULT result = CallWindowProcW(windowFunc, hWnd, WM_COMMAND, 40003, 0);\n         return FALSE;\n     }\n     return TRUE;\n  }\n\n```\nEDIT: Have also tried SendMessageA, PostMessageA and DispatchMessageA and failed\n\nEDIT2: See answer below for working PostMessageA.\n\n",
  "votes": "3",
  "answers": 2,
  "views": "533",
  "tags": [
    "windows",
    "dll-injection"
  ],
  "user": "gibertoni",
  "time": "Apr 1, 2016 at 19:13",
  "comments": [],
  "answers_data": [
    {
      "content": "I have identified the problem. It comes in two steps:\n\n1. Use PostMessageA instead of CallWindowProc\n\nPostMessageA(hWnd, WM_COMMAND, 40003, 0) does the heavy lifting and calls the WindowProc on the desired window.  \n\n2. Make sure that the Window is Top-Level\n\nI had ignored this before because the application window was visible and I thought it was top-level. \n\nHowever, since I am executing EnumWindows on the Init procedure of my injected dll, my launcher process was still running and the window was child of my launcher. \n\nI had to wait for the launcher to quit, and then called EnumWindows and PostMessage.\n\n",
      "votes": "1",
      "user": "gibertoni",
      "time": "Apr 1, 2016 at 19:10",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I would like to have made this a comment but do not have enough points to do so so this would have been a comment on the answer.   \n\nSimply put, the topmost window in a windows environment receives the RawInputThread (RIT).  The RIT automatically receives the mouse and keyboard messages and sends them to that window which is at the top of the Z order.   Having done a lot of this stuff in the distant past, if you ever need to take total control, a trick that can be done is to implement a top most window (z order) window which covers the whole screen, RIT will give it all messages, and you do what you want with them.\n\nBack when I was doing this there was little to no documentation on  RIT but now you can find lots of documentation.  I found this on MSDN Raw Input, but it looks like they are making it more complicated than it really needs to be.  MSFT has done things over the years where they hide a topic, then clarify, then put the topic back into hiding.  duckduckgo shows numerous hits  and yielded a nice gem google didn't find on its first page.\n\n",
      "votes": "0",
      "user": "Div",
      "time": "Aug 19, 2016 at 13:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}