{
  "title": "Recognizing instructions containing low-level control flows",
  "link": "https://reverseengineering.stackexchange.com/questions/19347/recognizing-instructions-containing-low-level-control-flows",
  "content": "There are some x86 instructions which containing a low-level** control flow in its semantics, for example div because its semantics is roughly as:\n\n```\nif (source == 0)\n   throw exception...\nelse\n   return rdx:rax / source\n\n```\nor instructions with rep prefix, etc. While a mov or a xor doesn't contain any control flow.\n\nI am trying to classify instructions of x86 ISA depending on this criteria, my starting point now is looking into Xed's API to know if there exists some function which can give such an information, but it doesn't seem having any.\n\nConcretely for div, I've checked xed_decoded_inst_conditionally_writes_registers, xed_operand_conditional_read/write, but all of them return false.\n\n** I'm sorry for this word, I don't know the precise terminology for this case.\n\nEdit: many thanks for comments but I've badly expressed my question. I update in the following some discussion to make the context more clear.\n\nXed's API would not give full instruction semantics, but some. For example, with some xed API (which I described above) we can get:\n\n```\nmov rax, r8\n\noperands:                       2\nuses rflag:                     no\nhas conditional read operand:   no\nhas conditional write operand:  no\nconditionally write register:   no\n\n```\nand\n\n```\ncmovb rax, r8\n\noperands:                       3\nuses rflag:                     yes\nhas conditional read operand:   no\nhas conditional write operand:  yes\nconditionally write register:   yes\n\n```\nso at least I know that cmovb should have some conditional control flow in its semantics, while mov has not. \n\nI tried to apply this logic for other instructions: it works for some (e.g. rep movsb, etc.), but not all: \n\n*** I have initially thought that div contains conditional data-flow, but changed later :)\n\n",
  "votes": "3",
  "answers": 0,
  "views": "78",
  "tags": [
    "x86",
    "control-flow-graph"
  ],
  "user": "Ta Thanh Dinh",
  "time": "Sep 16, 2018 at 8:19",
  "comments": [
    {
      "user": "mrexodia",
      "text": "Not automated, but in the Intel manual for instructions there is information about when exceptions happen. See for example c9x.me/x86/html/file_module_x86_id_176.html",
      "time": null
    },
    {
      "user": "Abigail",
      "text": "A mov or xor may alter control flow in the same way by triggering a page fault eception with invalid memory access.",
      "time": null
    }
  ],
  "answers_data": []
}