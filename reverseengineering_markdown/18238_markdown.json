{
  "title": "Know which bytes are opcode and which operands in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/18238/know-which-bytes-are-opcode-and-which-operands-in-ida",
  "content": "I want to extract a generic signature of a function in IDA and wanted to use just the opcodes of the instructions without its operands.\n\nExample:\n\n\n\nFrom the first instruction I want to know the bytes that tell the disassembler that it is a MOVZX instruction.\n\nFrom the second and third one the ones that say it is a MOV instruction (probably 8B).\n\nAnd so on..\n\nI'm aware that some instructions have modifiers. I just want to know the bytes that translate to certain mnemonic.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "873",
  "tags": [
    "ida",
    "disassembly",
    "disassemblers"
  ],
  "user": "0xfede7c8",
  "time": "May 11, 2018 at 15:25",
  "comments": [],
  "answers_data": [
    {
      "content": "In general this is not solvable since the opcode and operands may be sharing the same bytes (e. g. some instructions encode part of their opcode in the mod R/M byte, which can also  contain some of the operands at the same time), but you can get some  approximation by inspecting the Operands array of the insn_t structure returned by the decode_insn function. The offb member of each op_t element is supposed to be the offset of the bytes corresponding to the operand in the instruction bytes. \n\nNote that it may be 0 since itâ€™s not always possible to determine operand location at the byte level, especially on non-x86 architectures. For more info check the ua.hpp header in the SDK.\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "May 11, 2018 at 20:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "Willem Hengeveld",
          "text": "Or you could use insn_t::itype",
          "time": null
        },
        {
          "user": "Willem Hengeveld",
          "text": "Note also that many risc cpu's store operands as bitfields in the opcode.",
          "time": null
        }
      ]
    }
  ]
}