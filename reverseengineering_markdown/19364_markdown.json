{
  "title": "Help reverse decrypt function (decode -> encode)",
  "link": "https://reverseengineering.stackexchange.com/questions/19364/help-reverse-decrypt-function-decode-encode",
  "content": "I have this java function that decode 8bytes text string(encoded as int[]):\n\n```\npublic static int[] decode(int[] text, int[] key) {\n   int j = 0x3c; //value 60 in decimal\n   int i = 0x33; //value 51 in decimal\n   int[] result;\n\n   for ( i = 0x33; ; (text[1]) ^= ((key[j]) ^ (text[4])) + i ){\n       j = j - 1;\n       text[7] ^= ((key[j--]) ^ (text[3])) + i;\n       text[6] ^= ((key[j--]) ^ (text[2])) + i;\n       text[5] ^= ((key[j]) ^ (text[1])) + i;\n       j = j - 1;\n       result = text;\n       (text[4]) ^= ((key[j]) ^ text[0]) + i;\n       if ( j <= 0 )\n           break;\n       j = j - 1;\n       text[0] ^= ((key[j--]) ^ (text[7])) + i;\n       text[3] ^= ((key[j]) ^ (text[6])) + i;\n       text[2] ^= ((text[4]) ^ (text[5])) + i;\n       j = j - 1;\n       //System.out.println(\"i \" +i+\" - j \"+j);\n   }\nreturn result;\n}\n\n```\nbut if I wanted to do the reverse, how can build the encode function? how do I build the inverse method(from decoded text to encode text)?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "353",
  "tags": [
    "decryption"
  ],
  "user": "Mark Last Jr",
  "time": "Sep 16, 2018 at 18:46",
  "comments": [],
  "answers_data": [
    {
      "content": "For\n\n```\na = b ^ c\n\n```\nSince the XOR operation is trivial to reverse when any 2 values in a, b, c are known, this will only require you to just reverse the order in which operations were done. I had to do this in C since I don't use Java.\n\n```\nint *encode(int *text, int *key) {\n  int j = 0x0;\n  int i = 0x33; // value 51 in decimal\n\n  for (i = 0x33;;) {\n    text[4] ^= ((key[j++]) ^ (text[0])) + i;\n    text[5] ^= ((key[j++]) ^ (text[1])) + i;\n    text[6] ^= ((key[j++]) ^ (text[2])) + i;\n    text[7] ^= ((key[j++]) ^ (text[3])) + i;\n    text[1] ^= ((key[j++]) ^ (text[4])) + i;\n    if (j >= 0x3c)\n      break;\n    text[2] ^= ((text[4]) ^ (text[5])) + i;\n    text[3] ^= ((key[j++]) ^ (text[6])) + i;\n    text[0] ^= ((key[j++]) ^ (text[7])) + i;\n  }\n  return text;\n}\n\n```\nHere's the full code that works.\n\n```\n#include <stdio.h>\n\nint *decode(int *text, int *key) {\n  int j = 0x3c; // value 60 in decimal\n  int i = 0x33; // value 51 in decimal\n\n  for (i = 0x33;;) {\n    text[1] ^= ((key[j--]) ^ (text[4])) + i;\n    text[7] ^= ((key[j--]) ^ (text[3])) + i;\n    text[6] ^= ((key[j--]) ^ (text[2])) + i;\n    text[5] ^= ((key[j--]) ^ (text[1])) + i;\n    text[4] ^= ((key[j--]) ^ (text[0])) + i;\n    if (j <= 0)\n      break;\n    text[0] ^= ((key[j--]) ^ (text[7])) + i;\n    text[3] ^= ((key[j--]) ^ (text[6])) + i;\n    text[2] ^= ((text[4]) ^ (text[5])) + i;\n  }\n  return text;\n}\n\nint *encode(int *text, int *key) {\n  int j = 0x0;\n  int i = 0x33; // value 51 in decimal\n\n  for (i = 0x33;;) {\n    text[4] ^= ((key[j++]) ^ (text[0])) + i;\n    text[5] ^= ((key[j++]) ^ (text[1])) + i;\n    text[6] ^= ((key[j++]) ^ (text[2])) + i;\n    text[7] ^= ((key[j++]) ^ (text[3])) + i;\n    text[1] ^= ((key[j++]) ^ (text[4])) + i;\n    if (j >= 0x3c)\n      break;\n    text[2] ^= ((text[4]) ^ (text[5])) + i;\n    text[3] ^= ((key[j++]) ^ (text[6])) + i;\n    text[0] ^= ((key[j++]) ^ (text[7])) + i;\n  }\n  return text;\n}\n\nint key[] = {0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,\n             0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,\n             0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,\n             0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,\n             0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,\n             0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41};\nint text[] = {0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68};\n\nint main(int argc, char **argv) {\n  int i, *d, *e;\n  for (i = 0; i < 8; i++) {\n    printf(\"%x::\", text[i]);\n  }\n  putchar(10);\n  d = decode(text, key);\n  for (i = 0; i < 8; i++) {\n    printf(\"%x::\", d[i]);\n  }\n  putchar(10);\n  e = encode(text, key);\n  for (i = 0; i < 8; i++) {\n    printf(\"%x::\", e[i]);\n  }\n  putchar(10);\n}\n\n```\nThis produces the following output\n\n```\n61::62::63::64::65::66::67::68::\n65a::3e9::64a::bd6::5c2::11::1a9::85e::\n61::62::63::64::65::66::67::68::\n\n```\nI was able to get back the original array after a decode and encode.\n\n",
      "votes": "4",
      "user": "sudhackar",
      "time": "Sep 18, 2018 at 4:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mark Last Jr",
          "text": "thanks @sudhackar, i've understand the procedure. The code is ok.     int *encode(int *text, int *key) {       int j = 0x0;   int i = 0x33; // value 51 in decimal    for (i = 0x33;;) {     text[4] ^= ((key[j++]) ^ (text[0])) + i;     text[5] ^= ((key[j++]) ^ (text[1])) + i;     text[6] ^= (",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "@MarkLastJr If this is the solution you're looking for mark accepted and close it.",
          "time": null
        }
      ]
    }
  ]
}