{
  "title": "How to interpret entries from Exports tab in ProcessHacker",
  "link": "https://reverseengineering.stackexchange.com/questions/3704/how-to-interpret-entries-from-exports-tab-in-processhacker",
  "content": "I use ProcessHacker version 2.33 to inspect the functions which are exported by DLLs in running processes. In the screen-shot below you can see a few exported functions from a C++ application, along with their Ordinal number and virtual address (VA):\n\n\n\nThis is a pretty cool feature of ProcessHacker, which I was not able to find in ProcessExplorer. However, regarding the entries you can see in this screen-shot, I was not able to find what do the ? (question marks) and the number, which prefixes the names of the functions, mean. Also, I'm not sure what the single and double @ (at) symbols in the name, followed by a group of capital letters or number, mean.\n\nQuestion 1: What do the symbols (?, @), number-prefix and capital letter suffixes represent? How can one interpret them?\n\nQuestion 2: What does the \"Ordinal\" column mean?\n\nQuestion 3: Does the \"VA\" column show the offset of the procedure entry point, with respect to the base address of the .text segment of the DLL? If not, what does it represent?\n\nQuestion 4: How can one compute the absolute address of any function from the Exports tab?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "569",
  "tags": [
    "dll",
    "libraries",
    "processhacker"
  ],
  "user": "Benny",
  "time": "Feb 18, 2014 at 10:45",
  "comments": [
    {
      "user": "alexanderh",
      "text": "Here is a quick comparison of the export of a DLL found by Process Hacker and the exports identified by IDA. Hopefully the below answers and the side by side will be helpful. i.sstatic.net/T7VYk.png",
      "time": null
    },
    {
      "user": "Benny",
      "text": "@alexanderh thanks for the photo. It sheds some light on the matter.",
      "time": null
    },
    {
      "user": "0xea",
      "text": "It's better to open new questions than add new ones.",
      "time": null
    },
    {
      "user": "Benny",
      "text": "@0xea I did want to do that, however, the title of the question and the intro + picture would have been the same for the new question.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Those are C++ name decorations. \n\nSee Name Decoration on MSDN for more info.\n\nQuestion 2: Ordinals are just another way of making exports. You either export a function by name or by ordinal. It is unique in that binary only. You get functions by ordinals by using GetProcAddress() just the same as you would with a name. \n\nI could recommend \"Windows via C/C++\" book for many more details about those mechanisms. \n\n",
      "votes": "2",
      "user": "0xea",
      "time": "Feb 18, 2014 at 11:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jongware",
          "text": "That page doesn't really offer a good explanation. OTOH, the remark at the bottom \"There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler\" is crucial. You can only guess what version was used by trying to decode.",
          "time": null
        }
      ]
    },
    {
      "content": "I'd  recommend loading the dll file into PE Explorer (View->Export), which will undecorate the names for you and show you the corresponding parameters/return value/calling convention.\n\nYou may also want to check out this question.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}