{
  "title": "structures defined on stack?",
  "link": "https://reverseengineering.stackexchange.com/questions/24637/structures-defined-on-stack",
  "content": "While reading this paper on type recovery from executables, I came across following paragraph:\n\nAnd they mentioned that they don't consider such structures in their analysis. Do they simply mean programs like these?\n\n```\n#include <stdio.h>\n\nstruct P\n{\n  int a;\n  int b;\n};\n\nint main()\n{\n  struct P p, *pp;\n  pp = &p;\n  pp->a = 4;\n  printf(\"%d  \n\", pp->a);\n  return 0;\n}\n\n```\nOr is there any other way which resonates their statement?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "52",
  "tags": [
    "decompilation",
    "type-reconstruction"
  ],
  "user": "R4444",
  "time": "Apr 7, 2020 at 3:52",
  "comments": [],
  "answers_data": [
    {
      "content": "Consider a function like this:\n\n```\nint func1(int x)\n{\n  int y;\n  char buf[16];\n  y = x;\n  buf[0]=x&0xff;\n  return y+buf[0];\n}\n\n```\nIf the compiler uses a naive variable allocation algorithm and does not try to use registers for variables, it will likely lay out the variables sequentially in the stack:\n\n```\noff|\n00 | y dd ?\n04 | buf db 16 dup ?\n\n```\nWhich can be thought of as a structure:\n\n```\n struct frame_func1\n {\n    int y;\n    char buf[16];\n };\n\n```\nIn reality, the \"base\" of the structure will not be ebp, since usually it points between local variables and incoming arguments, i.e \"after\" this pseudo-structure.\n\nI'm not quite sure why the paper goes to the conclusion mentioned in your quote. Maybe the authors mean that detecting local variables which are structures would be akin to detecting structure members in a structure an thus out of scope? Not sure....\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Apr 7, 2020 at 12:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "R4444",
          "text": "Although this doesn't ans the question, thanks for this great explanation",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "@R4444 I understand the paper the same as Igor. Why it doesn't answer your question?",
          "time": null
        },
        {
          "user": "R4444",
          "text": "hmmm, I take it back it does answer the question, though the conclusion (of paper authors) is convoluted. thanks",
          "time": null
        }
      ]
    }
  ]
}