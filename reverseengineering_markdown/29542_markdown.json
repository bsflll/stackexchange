{
  "title": "How to call a func in an executable binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/29542/how-to-call-a-func-in-an-executable-binary",
  "content": "I have a binary with a func that I can disassemble.  What are simple ways for me to call it with arbitrary args and observe its return val and behavior?\n\nIdeally, I'd like to do this:\n\nI'm operating on Linux, but this question is relevant to other OS as well.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "disassembly",
    "binary-analysis",
    "dynamic-analysis",
    "libraries",
    "call"
  ],
  "user": "SRobertJames",
  "time": "Nov 11, 2021 at 21:17",
  "comments": [],
  "answers_data": [
    {
      "content": "If the binary is a PIE, exporting functions via the LIEF binary instrumentation framework should allow you to call the function you are interested in as if it was a function in a shared object.\n\nIf the binary is dynamically linked and contains code for setting up the standard C runtime environment e.g. __libc_start_main calling main(), you can hook these functions with LD_PRELOAD and interpose your own code via shared library injection which calls the target function directly with arguments of your choosing.\n\nUsing the Qiling emulator, you can record the state of the program and then replay the target function in GDB. Since the code is being emulated, it is straightforward to manipulate any aspect of the process' state (registers, memory, etc.)\n\nUsing Frida, Pin, DynamoRIO etc. you can basically make the program do what you want at run time, in this case hook a function, manipulate its arguments and observe the subsequent behavior.\n\ne9patch is a static binary rewriting tool that allows one to change/insert code prior to run time.\n\nThere are probably even more ways to do this, such as process snapshotting with ptrace and /proc and then manipulating registers and memory with ptrace, emulation with PANDA, emulation with Unicorn, emulation with QEMU, possibly even ELF parasite code or inserting code that calls the target function using LD_PRELOAD together with __attribute__ ((constructor)) injected_function(). You have a lot of options.\n\n",
      "votes": "5",
      "user": "sudhackar",
      "time": "Dec 21, 2022 at 20:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}