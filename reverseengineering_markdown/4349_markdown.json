{
  "title": "Is it possible to (heuristic) identify the begin addr of main function in a stripped ELF?",
  "link": "https://reverseengineering.stackexchange.com/questions/4349/is-it-possible-to-heuristic-identify-the-begin-addr-of-main-function-in-a-stri",
  "content": "So basically I am working on some tripped dynamic linked ELF binaries (32 bit Linux x86), using objdump to disassemble them, modifying and trying to reassemble them.\n\nIn the unstripped binary, we can get the beginning address of main function based on the symbol table, however, on the stripped binary, we just don't know where the main function is.\n\nOf course I can just adjust the whole text section, and starting from the original entry point of the ELF.\n\nBut the problems are:\n\nSo I would like to use some way to identify the main function in a stripped ELF (heuristically)...\n\nRight now I don't have some strategies on this issue, Could anyone give me some help?\n\n",
  "votes": "4",
  "answers": 4,
  "views": "1k",
  "tags": [
    "disassembly",
    "x86",
    "elf",
    "reassembly"
  ],
  "user": "lllllllllllll",
  "time": "May 17, 2014 at 8:09",
  "comments": [],
  "answers_data": [
    {
      "content": "The catch is to determine whether the image in question uses a \"standard\" C runtime library of sorts (glibc, musl, uclibc) or not. If it does, then you can grab the entry point address and match the code at that address against your collection of startup routines from those libraries and pinpoint the main() location as you'd know which call is the one transferring control to main().\n\nThen, the image might not be linked against any well-known C runtime, say, if it's a code piece that directly invokes kernel syscalls or if it managed to whip its own CRT library.\n\nAnother good point would be if the program wasn't written in C at all and uses some other fancy language, but that seems to be outside the scope of the question as main() won't be relevant for those, I guess.\n\n",
      "votes": "3",
      "user": "Dmitry Janushkevich",
      "time": "Jun 26, 2014 at 11:59",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I started to answer to this in « Reversing ELF 64-bit LSB executable, x86-64 ,gdb », but this was focused only to AMD64.\n\nIndeed, the key is really to locate the __libc_start_main function and take its first argument as a pointer to the entry of the main function. The full description of this function is the following (from its manual page):\n\nSo, the __libc_start_main gives you not only the address of the main() procedure but also access to int argc, char** argv and char** envp.\n\nThe point will then be to extract each of these arguments from the assembly code which may vary depending on the ABI (Application Binary Interface) you are using (function arguments may be pushed on the stack or in specific registers).\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "```\nobjdump -f exe_name\n\nexe_name:     file format elf32-little\narchitecture: UNKNOWN!, flags 0x00000112:\nEXEC_P, HAS_SYMS, D_PAGED\nstart address 0x00306990\n\n```\nThe start address mentioned above is the main entry point in the executable. You can also verify this using gdb\n\n```\n(gdb) break *0x00306990\n\n```\nNormally, the start address is mapped to symbol _start, so you can also do\n\n```\n(gdb) break _start\n\n```\nIf I recall correctly, _start calls __libc_start_main which in turn calls __libc_csu_init\n\n",
      "votes": "3",
      "user": "manav m-n",
      "time": "Jun 26, 2014 at 15:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "So I am thinking that, in the asm code disassembled from objdump, we should always find this :\n\n```\npush addr\ncall __libc_start_main\n\n```\nand in a heuristical perspective, we can just consider the addr in the above code is the beginning addr of main function.\n\nAm I right? Is there any exception?\n\n",
      "votes": "2",
      "user": "lllllllllllll",
      "time": "May 16, 2014 at 17:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "In fact, it depends on the ABI you are using. For example, in SystemV AMD64, you will find the first argument in the register %rdi.",
          "time": null
        }
      ]
    }
  ]
}