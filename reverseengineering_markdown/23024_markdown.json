{
  "title": "VC 6 C++ Exception handling, nTryBlocks=0, pTryBlockMap=0 , how?why?",
  "link": "https://reverseengineering.stackexchange.com/questions/23024/vc-6-c-exception-handling-ntryblocks-0-ptryblockmap-0-howwhy",
  "content": "I'm trying to decompile an old binary (about 20 year old).\n\nThe program uses exceptions.\n\nI found some FuncInfo but they do not contain any pTryBlockMap and nTryBlocks is 0.\n\nI've tried many options on the VC6 compiler but I could not get this result.\n\nThe stack doesn't look like a regular stack:\n\n```\n...\nSEH handler\nscope table\nTry Level\nsaved EBP\nreturn address\n\n```\nBut it looks like:\n\n```\n...\nSEH handler\nTry level\nreturn address\n\n```\nDo you have any idea how to achieve this and why it would have been like that ?\n\nSEH Handler is :\n\n```\nMOV        EAX,DAT_00412c90\nJMP        ___CxxFrameHandler\n\n```\nFuncInfo@00412c90\n\n```\n19930520\n00000005\n00412cb0\n00000000\n00000000\n00000000\n00000000\n00000000\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "163",
  "tags": [
    "decompilation",
    "c++",
    "callstack"
  ],
  "user": "picryott",
  "time": "Jan 16, 2020 at 22:10",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "What is the SEH handler called? Do you have a link to the binary?",
      "time": null
    },
    {
      "user": "picryott",
      "text": "@Igor Skochinsky Sorry, I can't provide a link to the binary.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Even when there are no try/catch blocks in a function, the compiler may generate a FunctionInfo structure and register a C++EH handler (such as __CxxFrameHandler). This is necessary, for example, to destruct automatic (stack-allocated) C++ objects going out of scope, or cleaning up a partially constructed object in a constructor. In such functions there will be no try blocks but you should see non-zero pUnwindMap with pointers to unwind funclets containing calls to destructors of stack objects, i.e. something like:\n\n```\nlea ecx, [ebp-2Ch]\njmp std::string::~string\n\n```\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Jan 16, 2020 at 22:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "picryott",
          "text": "That's it. Thank you. And the difference in the stack seems to be an optimization option for the compiler (/Ox).",
          "time": null
        }
      ]
    },
    {
      "content": "Actually it was so obvious - I just haven't read the C++ standard and was writing throw() specification thinking it would allow all exceptions - instead it turned out it was the exact opposite.\n\nAnd yes this throw function specification is what is causing those zero TryBlockMap  with more than one Unwind entries. Here is a VC++ 6.0 (and later) compilable example (view dissasembly of f):\n\n```\n#include <stdio.h>\n\nstruct B {\n    int a, b;\n};\n\nstruct B1 {\n    B1() {};\n    B1(const B1& tmp) {\n        a1 = tmp.a1;\n        printf(\"B1::B1 copy constr  \n\");\n    }\n    ~B1() {\n        printf(\"~B1()  \n\");\n    }\n    int a1, b1;\n};\n\nstruct A : B, B1 {\n    int b, c;\n};\n\nstruct A f() throw(int) {\n    struct A tmp;\n    return tmp;\n}\n\nint main() {\n    f();\n}\n\n```\nWith two unwind entries. The tricky part in that scenario is that throw specification is not added to the type of the function so even if you have debug symbols (PDB) - you still will have your head banging against the wall.\n\nEDIT: Actually the above example won't work for newer versions of MSVC - if you want to do it there you would need to add a try - catch block encapsulating the f() call.\n\nAlso the class A and all of it's parents were a test case for another question related to the topic of C++ exception if you want to learn more but otherwise I don't think this exact structure is necessary to trigger the generation of FunctionInfo with zero TryBlocks. There just need to be something going on in f I think.\n\n",
      "votes": "1",
      "user": "rec",
      "time": "Apr 25, 2020 at 10:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}