{
  "title": "Read a struct from memory",
  "link": "https://reverseengineering.stackexchange.com/questions/2789/read-a-struct-from-memory",
  "content": "I'm trying to load a struct defined in a program that i'm reading the memory of, so I can use it to define objects in my python debugger (in windows).\n\nWhat format do structs take in memory, and what information can i get from finding the struct.\nIs it possible to find the offsets for all attributes, and all objects linking to the struct?\n\nI'd prefer to be able to do this without using breakpoints, but I can use them if there is no other way.\n\n",
  "votes": "7",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "python",
    "c",
    "struct"
  ],
  "user": "yarbelk",
  "time": "Sep 14, 2013 at 6:29",
  "comments": [],
  "answers_data": [
    {
      "content": "You should rather ask your questions with some kind of example output so that answers are not based on guesswork. \n\nDoes iam loading the struct mean \n\nor does it mean\n\nAssuming you use ReadProcessMemory \nthe buffer you provided will be filled with bytes. It is up to you to cast it to proper type for accessing various members of the struct \n(yes you need a valid prototype of the structure beforehand).\n\nA pseudo form could be like this\n\n```\ntype result;\nBYTE foo[0x100];\nMystruct *blah;\nint s1;\nPSTR s2;\nresult = ReadProcessMemory(where,howmuch,destination,VerifiactionPointer)\nblah = (MyStruct *)destination;\ns1 = blah->someint;\ns2 = blah->somestring;\n\n```\nMemory you see will always contain hex bytes that are indistinguishable from one another. It is like clay in the hands of a potter. \n\nOnly the artisan can give it form. Clay by itself can never become a statue or a finely crafted teapot.\n\n",
      "votes": "5",
      "user": "ixje",
      "time": "Sep 14, 2013 at 18:33",
      "is_accepted": true,
      "comments": [
        {
          "user": "Hanan",
          "text": "It worth noting that structs in memory could be larger than what they should be according to the source code, unless pack where used in the definition of the struct they maybe aligned in memory hence be larger in size.",
          "time": null
        }
      ]
    }
  ]
}