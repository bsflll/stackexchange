{
  "title": "Connecting to jtag-openocd-gdb to arm11 device with IDA gets no control",
  "link": "https://reverseengineering.stackexchange.com/questions/2780/connecting-to-jtag-openocd-gdb-to-arm11-device-with-ida-gets-no-control",
  "content": "I have a binary chunk from a piece of hardware I've been deciphering with IDA for a couple days now. Today I finally got a probe connected via JTAG and have openocd start up a GDB server. IDA is connecting to the GDB service but when I attach to process it shows all zeros in memory and the PC is no were where I expect it to be. Basically seems like IDA has no control and is not hooking to it. BTW, the target is running and I rather not do a halt reset if I don't have to. I believe this is possible with JTAG. \n\nThere is no process per-say but I really would like to be able to set breakpoints and single step in some places in the code. Obviously there is some setup issue. Any ideas?\n\nUPDATE:\n\nI had a lot to learn and turned out a number of things wrong. \n\nThx for your help so far, this surely has been a learning experience.\n\n",
  "votes": "10",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "hardware",
    "gdb",
    "arm",
    "jtag"
  ],
  "user": "frunk420",
  "time": "Sep 13, 2013 at 15:17",
  "comments": [
    {
      "user": "dingo_kinznerhook",
      "text": "Can you post here the OpenOCD output, the output from the telnet command-line, and the commands you are using in GDB to do this? I am not an expert at OpenOCD and could be wrong, but on many targets I think that you have to enter debug mode in order to do this, and that involves halting the processor.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Turns out openocd for ARM11 had a few bugs in it. I ended up making a few changes to get it working as per the arm spec: \n\nIn arm11_debug_entry\n\nIn arm11_leave_debug_state\n\n```\n    /* disable debug cache write thrus, etc */\nretval = arm11_run_instr_data_prepare(arm11);\n    if (retval != ERROR_OK)\n        return retval;\n\n retval = arm11_run_instr_data_to_core_via_r0(arm11, 0xeeef0f10, 0x00);\n    if (retval != ERROR_OK)\n        return retval;\n\n /* re write Coprocessor control */\n retval = arm11_run_instr_data_to_core_via_r0(arm11, 0xee010f10, arm11->saved_c1cntrl);\n    if (retval != ERROR_OK)\n        return retval;\n\n retval = arm11_run_instr_data_finish(arm11);\n    if (retval != ERROR_OK)\n        return retval;\n\n```\nI'll try to get these changes rolled in so others don't have my problem. \n\n",
      "votes": "5",
      "user": "frunk420",
      "time": "Sep 16, 2013 at 12:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Given that you want to single step you'll be halting the processor sooner or later, what keeps you from trying it now? \n\nI'm trying to envision how the JTAG unit would be able to inspect the memory if the running program is keeping the bus(ses) in use? I expect the TAP can access some boundary cells while the processor is running as they're basically copied/mirrored values, but other memories I don't know. \n\nI'd suggest halting the target and trying again. It makes most sense to me that IDA can only query and next correctly display the state of the CPU registers and memory when it has control.\n\n",
      "votes": "1",
      "user": "ixje",
      "time": "Sep 12, 2013 at 14:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}