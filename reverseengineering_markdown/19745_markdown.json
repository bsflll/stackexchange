{
  "title": "Changing local variable in caller from callee in C? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/19745/changing-local-variable-in-caller-from-callee-in-c",
  "content": "I'm implementing a function which is going to perform some time-consuming task, and I'd like to hack the benchmarking part a bit by changing the variable indicating the CPU time my function has started executing. Here is the code:\n\n```\n#if defined(_MSC_VER)\n#pragma intrinsic(__rdtsc)\n#else\nstatic __inline__ uint64_t __rdtsc() {\n    uint32_t hi, lo;\n    __asm__ volatile\n        (\n        \"rdtsc\"\n        : \"=a\"(lo), \"=d\"(hi)\n        );\n    return (((uint64_t) hi) << 32) | ((uint64_t) lo);\n}\n#endif\n\n\nint arg = 42;\n\nuint64_t start_tSC, end_tSC;\n\n// Get total clock cycles for func\nstart_tSC = __rdtsc();\nfunc(arg);\nend_tSC = __rdtsc();\ndouble func_tSC = end_tSC - start_tSC;  // <---- let's minimize this\n\n```\nBasically, I want to set start_tSC to the current clock time-stamp right before all tasks have been completed within func.\n\n```\nvoid func(int arg) {\n    perform_tasks(arg);\n    /* black magic that resets start_tSC in the CALLER */\n}\n\n```\nSince local variables and function parameters tend to be stored on the stack, can I somehow deduce where start_tSC resides by looking at the address of arg?\n\nSystem information\n\n```\n~ $ uname -a\nLinux hive30 4.15.0-36-generic #39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n\n```\nAlso note that I have access to the target system as a normal user, which means I can build the executable as well as view the resulting assembly code via gcc -S. Here is some hardware information, if relevant.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "320",
  "tags": [
    "x86",
    "linux",
    "c",
    "stack",
    "stack-variables"
  ],
  "user": "nalzok",
  "time": "3 years ago",
  "comments": [
    {
      "user": "user3629249",
      "text": "please do not cross post your questions",
      "time": null
    },
    {
      "user": "user202729",
      "text": "Not very related to reverse engineering.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Edit:\nTo make the offset irrelevent to your stack frame size, i'd start by reading the address of the caller's stack frame pointer (the caller's ebp, located right before your return address, at DWORD PTR [ebp]).\n\nYou cannot assume the offset of start_tSC doesn't change as your code can be run with different versions of benchmarks.\n\nBefore explaining the idea, it operates under the assumption that the call for [GetSystemTimeAsFileTime, __rdtsc, GetTickCount or any other function ] is performed right before the call for your function. The justification for this assumption is that when preforming benchmarks, precision is essential and timing tend to wrap the tested code as close as possible.\n\nThe basic idea is to find the variable that contains the value that returns from the timing function.\nYou can read the return address from the memory (at DWORD PTR [ebp + 4]) and try to disassemble the code prior to your function until you find a call instruction (skip the call to your own function as the return address points right after this call). the instruction after the call should look something like:\n\n```\nMOV [ebp - offset], eax\n\n```\nand you can deduce the offset of start_tSC from here.\n\nDo note that disassemble code backwards is not straightforward as x86 code doesn't have constant length opcodes.\nAlso note that this solution requires more code, expanding the function size by (probably) a lot.\n\n",
      "votes": "0",
      "user": null,
      "time": "Dec 28, 2018 at 18:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "Chris Stratton",
          "text": "You seem to have missed the point of the question with this proposal to modify the code of the caller.  The point is to modify the behavior of the existing calling code, without actually changing that code.",
          "time": null
        },
        {
          "user": "user22970",
          "text": "oh, yea, i see it now. my bad. i really misunderstood the question here",
          "time": null
        }
      ]
    }
  ]
}