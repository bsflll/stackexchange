{
  "title": "Make this function return true",
  "link": "https://reverseengineering.stackexchange.com/questions/14559/make-this-function-return-true",
  "content": "Sorry, I'm quite new to assembly, and I'm trying to make the code bellow return true:\n\n```\n.text:1000E3E0 ; =============== S U B R O U T I N E =======================================\n.text:1000E3E0\n.text:1000E3E0\n.text:1000E3E0 ; bool __thiscall LicenseChecker::LicenseCheckerPlugin::hasValidLicense(LicenseChecker::LicenseCheckerPlugin *__hidden this)\n.text:1000E3E0                 public ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ\n.text:1000E3E0 ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ proc near\n.text:1000E3E0                                         ; DATA XREF: .rdata:off_10024D68o\n.text:1000E3E0                 mov     eax, [ecx+0Ch]\n.text:1000E3E3                 mov     al, [eax+20h]\n.text:1000E3E6                 retn\n.text:1000E3E6 ?hasValidLicense@LicenseCheckerPlugin@LicenseChecker@@QAE_NXZ endp\n.text:1000E3E6\n.text:1000E3E6 ; ---------------------------------------------------------------------------\n\n```\nOn a \"crackme\". I heard somewhere that 1 returns true, but no idea on how to do it.\nI searched the web, but I simply couldn't understand what to do. I'm used to high-level programming languages, so assembly confuses me a lot.\nSorry for asking for such a simple thing.\n\n",
  "votes": "-1",
  "answers": 2,
  "views": "7k",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "patching"
  ],
  "user": "GabrielTK",
  "time": "Dec 19, 2017 at 3:30",
  "comments": [
    {
      "user": "julian",
      "text": "can you provide the program containing this function?",
      "time": null
    },
    {
      "user": "GabrielTK",
      "text": "@SYS_V Sorry, I didn't see your comment at the time. I formatted my PC, so I think I don't have it anymore.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Very easy. \n\n(*) Patching can be done manually using a hex editor or you can use OllyDBG or any tool that permits such transformations (check the web ;) ).\n\nThis is a simple and concise answer. If you wish more details, let me know.\n\n",
      "votes": "0",
      "user": "yaspr",
      "time": "Feb 3, 2017 at 7:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jongware",
          "text": "It doesn't look like 64-bit code to me.",
          "time": null
        },
        {
          "user": "yaspr",
          "text": "Sure, but does it matter? It's a proper answer to a very clear question. And, I have CLEARLY specified a : rax VARIANT (been there all the time, no edit).",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "mov eax,1 is also fine x64 code and will zero the higher part of rax anyway.",
          "time": null
        },
        {
          "user": "yaspr",
          "text": "I agree, but I see it as a detail :)",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "It may not be such a trivial detail for someone \"I'm quite new to assembly\". It's a tiny change â€“ just change mov rax, 1 to mov eax, 1. (Looking at the current return value, it could even be just mov al, 1.)",
          "time": null
        }
      ]
    },
    {
      "content": "```\nmov al, 0x1\ntest al, al\nret\n\n```\nIn binary: B0 01 84 C0 C3\n\nSet al to 1, then AND with itself. The result is always 1, so ZF is always zero. Quite trivial, but gets the job done. Patch at the beginning so you don't have to fill leftover bytes with nop instructions.\n\n",
      "votes": "0",
      "user": "mimak",
      "time": "Dec 5, 2020 at 12:24",
      "is_accepted": false,
      "comments": []
    }
  ]
}