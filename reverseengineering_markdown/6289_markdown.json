{
  "title": "exploit - Why not execute shellcode with the inline assembler?",
  "link": "https://reverseengineering.stackexchange.com/questions/6289/exploit-why-not-execute-shellcode-with-the-inline-assembler",
  "content": "The typical structure of executing shell code is the following-: (The code snippet is taken from here)\n\n```\nchar shellcode[] = \"\";             /* global array */\nint\nmain (int argc, char **argv)\n{\n        int (*ret)();              /* ret is a function pointer */\n        ret = (int(*)())shellcode; /* ret points to our shellcode */\n                                   /* shellcode is type caste as a function */\n        (int)(*ret)();             /* execute, as a function, shellcode[] */\n        exit(0);                   /* exit() */\n}\n\n```\nWhy not use asm(inline assembler) to execute shellcode ? It is then much more simpler than doing pointer acrobatics such as converting an array to a function pointer and then executing that array as a function ?\n\nIs there any drawbacks of using the assembler ? And are there any particular advantage of using an array to execute shell code ?\n\n",
  "votes": "2",
  "answers": 3,
  "views": "2k",
  "tags": [
    "c",
    "exploit",
    "shellcode"
  ],
  "user": "Sreyan",
  "time": "Sep 23, 2014 at 9:42",
  "comments": [
    {
      "user": "Kerim Can Kalıpcıoğlu",
      "text": "Inline assembly is compiler dependent and even you fit for every syntax with macros, it may behave different because optimization. Using this way is more easy and predictable.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This execute-from-array method is used to test shellcodes in bytes format, which is often the way shellcodes are provided (see http://shell-storm.org/shellcode/). It also emulates the usual way shellcodes are being used in an exploit. \n\nInline assembly is compiler dependent and shellcode developers might use assemblers directly such as nasm or MASM. However if you are developing your own shellcode there is nothing stopping you from using inline assembly, just keep in mind that the shellcode must be position independent.\n\n",
      "votes": "4",
      "user": "ekse",
      "time": "Sep 23, 2014 at 17:03",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sreyan",
          "text": "Why is it necessary to have the array declared as global ? Will any harm come if it is declared locally in main()",
          "time": null
        }
      ]
    },
    {
      "content": "The article you quote is about writing new shellcode to be used in exploits later. The specific snippet is about testing the shellcode. It does not really matter much how you jump to it in your test rig. \n\nIn addition, the method from the article lets you test binary shellcode, which is usually all you have when creating an exploit payload.\n\n",
      "votes": "1",
      "user": "Vitaly Osipov",
      "time": "Sep 24, 2014 at 1:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Because, this technique would require to rewrite the code of the program...\n\nAnd, most of the time, you cannot rewrite the .text section... You only have access to the data stored in the stack and/or the heap. That is why we use ROP.\n\n",
      "votes": "0",
      "user": "perror",
      "time": "Sep 23, 2014 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sreyan",
          "text": "why is it so important to execute our code from the .TEXT section? What harm will come if we execute it from the .CODE section ?",
          "time": null
        },
        {
          "user": "perror",
          "text": ".text == .code",
          "time": null
        },
        {
          "user": "Sreyan",
          "text": "In real life do all shellcodes need to be executed from the .TEXT section ? What is the matter if I patch the .CODE section of an executable and place my shellcode there ? Does that destroy position independency ? Why use ROP in the first place ?",
          "time": null
        }
      ]
    }
  ]
}