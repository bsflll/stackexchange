{
  "title": "Converting assembly function to c",
  "link": "https://reverseengineering.stackexchange.com/questions/13333/converting-assembly-function-to-c",
  "content": "I have the following function in assembly, and i'm trying to convert it to c.\n\nthe function accept 2 parameters, the first one is char* and the second is the int\n\nthis is the assembly code:\n\n```\n71D3C400     PUSH EBP\n71D3C401     MOV EBP,ESP\n71D3C403     SUB ESP,8\n71D3C406     MOV DWORD PTR SS:[EBP-8],0\n71D3C40D     MOV DWORD PTR SS:[EBP-4],0\n71D3C414     JMP SHORT 71D3C41F                       ; 71D3C41F\n71D3C416     MOV EAX,DWORD PTR SS:[EBP-4]\n71D3C419     ADD EAX,1\n71D3C41C     MOV DWORD PTR SS:[EBP-4],EAX\n71D3C41F     MOV ECX,DWORD PTR SS:[EBP-4]\n71D3C422     CMP ECX,DWORD PTR SS:[EBP+C]\n71D3C425     JNB SHORT 71D3C46B                       ; 71D3C46B\n71D3C427     MOV EDX,DWORD PTR SS:[EBP+8]\n71D3C42A     ADD EDX,DWORD PTR SS:[EBP-4]\n71D3C42D     MOVZX EAX,BYTE PTR DS:[EDX]\n71D3C430     CMP EAX,0D\n71D3C433     JE SHORT 71D3C443                        ; 71D3C443\n71D3C435     MOV ECX,DWORD PTR SS:[EBP+8]\n71D3C438     ADD ECX,DWORD PTR SS:[EBP-4]\n71D3C43B     MOVZX EDX,BYTE PTR DS:[ECX]\n71D3C43E     CMP EDX,0A\n71D3C441     JNZ SHORT 71D3C445                       ; 71D3C445\n71D3C443     JMP SHORT 71D3C416                       ; 71D3C416\n71D3C445     MOV EAX,DWORD PTR SS:[EBP+8]\n71D3C448     ADD EAX,DWORD PTR SS:[EBP-4]\n71D3C44B     MOVZX ECX,BYTE PTR DS:[EAX]\n71D3C44E     ADD ECX,DWORD PTR SS:[EBP-8]\n71D3C451     MOV DWORD PTR SS:[EBP-8],ECX\n71D3C454     MOV EDX,DWORD PTR SS:[EBP-8]\n71D3C457     SHL EDX,1\n71D3C459     MOV EAX,DWORD PTR SS:[EBP-8]\n71D3C45C     AND EAX,80000000\n71D3C461     SHR EAX,1F\n71D3C464     OR EDX,EAX\n71D3C466     MOV DWORD PTR SS:[EBP-8],EDX\n71D3C469     JMP SHORT 71D3C416                       ; 71D3C416\n71D3C46B     MOV EAX,DWORD PTR SS:[EBP-8]\n71D3C46E     MOV ESP,EBP\n71D3C470     POP EBP\n71D3C471     RETN\n\n```\nand this is my c code until now:\n\n```\n_71D3C400 (char*str, int len) {\n    int var1 = 0; // [EBP-8]\n    int var2 = 0; // [EBP-4]\n\n    goto _71D3C41F;\n\n_71D3C416:\n    var2++;\n\n_71D3C41F:\n    ECX = [EBP-4];\n\n71D3C422     CMP ECX,DWORD PTR SS:[EBP+C]\n71D3C425     JNB SHORT 71D3C46B                       ; 71D3C46B\n    if (str[var2] == 0x0D) {\n        goto _71D3C443;\n    }\n\n    if (str[var2] != 0x0A) {\n        goto _71D3C445;\n    }\n\n_71D3C443:\n    goto _71D3C416;\n\n_71D3C445:\n    var1 = str[var2] + var1;\n    var1 = (var1 << 1) | ((var1 & 0x80000000) >> 0x1F);\n    goto _71D3C416;\n\n_71D3C46B:\n    return var1;\n}\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "642",
  "tags": [
    "assembly",
    "decompilation"
  ],
  "user": "dieSdiesneB",
  "time": "Aug 21, 2016 at 15:49",
  "comments": [],
  "answers_data": [
    {
      "content": "This code may look like this:\n\n```\nint someFunction (char*str, int len) {\n    int var1 = 0, var2 = 0;\n\n    while (var2 <= len) {\n        if (str[var2] != '\\r' && str[var2] != '  \n') {\n            var1 = str[var2] + var1;\n            var1 = (var1 << 1) | ((var1 & 0x80000000) >> 0x1F);\n        }\n\n        var2++;\n    }\n\n    return var1;\n}\n\n```\nYou could also rewrite it using for loop for(var2=0;var2<len;var2++)\n\n",
      "votes": "3",
      "user": "dieSdiesneB",
      "time": "Aug 21, 2016 at 20:44",
      "is_accepted": true,
      "comments": []
    }
  ]
}