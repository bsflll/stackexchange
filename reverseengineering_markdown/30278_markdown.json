{
  "title": "Why is Visual Studio compiling my EXE file with an entry point that is not in the file?",
  "link": "https://reverseengineering.stackexchange.com/questions/30278/why-is-visual-studio-compiling-my-exe-file-with-an-entry-point-that-is-not-in-th",
  "content": "So I am trying to open my test app EXE file in ollydbg to study the assembly, the stack, registers and all that stuff for educational purposes and it gives me this message saying that the entry point is outside the code. Indeed it is, I can see the value in the Optional Header.AddressOfEntryPoint field which clearly exceeds the file size.\n\nMy question is why is this happening?\n\nThis is the C code. Very simple.\n\n```\n#include<studio.h>\n\nint main()\n{\n   printf(\"THIS IS OUR TEST APP!\");\n\n   return 0;\n}\n\n```\nThe file on disk ends at an offset of 95ffh.\n\nThe entry point is 11334h.\n\nI am new to reverse Engineering so please be kind.\n\nI am using Visual studio 2017 community edition, PEBear and OllyDbg for my studies on Windows 10. I am using C to write simple programs for study.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "278",
  "tags": [
    "windows",
    "c",
    "pe"
  ],
  "user": "EmexNatera",
  "time": "Apr 17, 2022 at 15:20",
  "comments": [
    {
      "user": "sudhackar",
      "text": "Hello and welcome to re.se. Please also post compilation flags, a link to sample binary and source you use to compile.",
      "time": null
    },
    {
      "user": "EmexNatera",
      "text": "I have updated the question. I hope that is sufficient information. @sudhackar",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "Please post a link to sample binary as well. Are you able to run the file well?",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Have you considered that the entry point of the loaded executable at run-time is changed by ASLR?",
      "time": null
    },
    {
      "user": "josh poley",
      "text": "Also keep in mind that the CRT wants a chance to run before main, so the compiler will mark  MainCRTStartup() the entry point (see stackoverflow.com/a/22935162/858968)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Because the entrypoint in a PE file refers to an offset within the memory image of the file after being loaded by the operating system loader. The entrypoint, like all so-called \"relative virtual addresses\" (RVAs) referenced in the PE header, does not refer to a physical offset within the PE file. Any particular bytes within the PE file (after the initial MZ and PE headers) probably will not have the same file offset and relative virtual address. Look into the difference between \"section alignment\" versus \"file alignment\", and the concept of a \"section\" within a PE file.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Apr 18, 2022 at 3:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}