{
  "title": "Import table vs Import Address Table",
  "link": "https://reverseengineering.stackexchange.com/questions/16870/import-table-vs-import-address-table",
  "content": "What's the difference between the Import Table and the Import Address Table?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "18k",
  "tags": [
    "binary-analysis",
    "x86",
    "pe"
  ],
  "user": "Trey",
  "time": "Nov 30, 2017 at 12:39",
  "comments": [
    {
      "user": "julian",
      "text": "Duplicate of What's the difference between the import table, import adress table, and import name table?. Also  RTFM. Hence the down vote.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As general, I recommend reading the PE Format documentation on MSDN regarding the PE structure. \n\nThe Import Table is actually called \"Import Directory Table\" and contains entries for every DLL which is loaded by the executable. Each entry contains, among other, Import Lookup Table (ILT) and Import Address Table (IAT)\n\nTo quote from the PE format specs about Import Directory Table:\n\nThe Import Address Table is comprised of function pointers, ans is used to get the addresses of functions when the DLLs are loaded. A compiled application was designed so that all API calls will not use direct hardcoded addresses but rather work through a function pointer. The pointer table can be accessed in several ways -- either directly by a call to [pointer address] or by the \"Import Lookup Table\" and the \"Hint/Name Table\".\n\nLet's quote again from the PE specs about the \"Import Address Table\":\n\n",
      "votes": "17",
      "user": "evandrix",
      "time": "Jun 15, 2020 at 12:30",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "First, beside “yours” two tables, I introduce a third one, the Import Lookup Table.\n\nSide by side with the Import Address Table, these two tables look like in this simplified picture:\n\n\n\nThis picture shows the situation in your executable file on disk. They are totally identical, with the exactly same lists of the API function names (more precisely, pointers to the displayed names), in the exactly same order.\n\nNow, the loader loads your executable and maps all required DLLs (Dynamic-Link Libraries) into your virtual memory space.\n\nAfter finishing it and some calculations, the loader already knows addresses of all your imported functions.\n\nSo it replaces the names of your imported functions in the second table (Import Address Table) with their addresses, and the situation in memory becomes different:\n\n\n\nOn the other hand, the Import Table, more precisely Import Directory Table, is a gateway to these 2 tables.\n\nIt is an array (a table) of entries, one entry (a row) for every imported library.\nA simplified picture of it is here:\n\n\n\nEvery row consist of 5 double words (pointers). Important are only 3 of them, the first (a pointer to the ILT), the last (a pointer to the IAT), and the last but one (identifying the row by the name of DLL; so it's a pointer to the DLL's name in the fourth involved table, the Hint/Name Table).\n\nSo its cooperation with other two tables looks like this:\n\n\n\n(I omitted the fourth table, the mentioned Hint/Name Table with names of all imported functions and names of all imported libraries, too.)\n\n",
      "votes": "9",
      "user": "MarianD",
      "time": "Oct 14, 2021 at 17:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}