{
  "title": "How return type works [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/12370/how-return-type-works",
  "content": "I declared this\n\n```\nint returnDummy() {\n    return 0x100;\n}\n\n```\nand compile as a static libray.\nWhat result will be returned if I declare the prototype like this,\n\n```\nbool returnDummy();\n\n```\nand link upper static library and call that?\n\nDoes it simply casts 0x100 to true, or does it read just lowest 1 byte 0x00 and return false?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "114",
  "tags": [
    "c++"
  ],
  "user": "user160368",
  "time": "9 years ago",
  "comments": [
    {
      "user": "Jacen",
      "text": "I think this question belongs more to stackoverflow than to reverseengineering.stackexchange. It's about C++ language implementation, not about reverse engineering.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "That's undefined behavior. Aka the compiler/linker is allowed to break all the rules or make up their own.\n\nHowever the typical function call ABI will put the return value into EAX if it fits (which both bool and int will). With bool either being defined as 0 for false and non zero for true or as zero for false and a specific value (like 0xffffffff or 1) for true.\n\nSo after the function call the return register will contain 0x100 but the compiler could assume it was a specific value (if the ABI said so) and then use that assumption for further optimization. \n\nFor example if true was defined as 0xffffffff then a ternary returnDummy()?val1:val2 can be implemented as \n\n```\nint mask = returnDummy();\nres = (mask&val1) | (~mask&val2);\n\n```\n",
      "votes": "1",
      "user": "ratchet freak",
      "time": "Apr 8, 2016 at 9:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}