{
  "title": "How can I tell if an app is using anti-debug techniques? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/2778/how-can-i-tell-if-an-app-is-using-anti-debug-techniques",
  "content": "How can I detect whether an application is using anti-debug techniques? I'm using OllyDbg (2.01beta).\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ollydbg",
    "anti-debugging"
  ],
  "user": "Artur Szymczak",
  "time": "11 years ago",
  "comments": [
    {
      "user": "Till",
      "text": "Try to attach a debugger to the process of that application once it is active and see if it terminates right away.... that would be a start.",
      "time": null
    },
    {
      "user": "perror",
      "text": "What kind of anti-debug technique ?",
      "time": null
    },
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "If it's closed-source, it's using an anti-debug technique. If it's not closed source, look at the source.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Peter Ferrie has written a nice paper on this: The \"Ultimate\" Anti-Debugger Reference. A lot of techniques exist, like timing, checking if a process is running named OllyDBG for example. Sometimes people come up with new ideas. Step though your program and try to detect yourself if the program acts differently due to your debugging / olly or vmware (if this is the case).\n\n",
      "votes": "3",
      "user": "Stolas",
      "time": "Sep 10, 2013 at 14:09",
      "is_accepted": true,
      "comments": [
        {
          "user": "asheeshr",
          "text": "This answer would be even more useful if you could add an abstract of the paper into it.",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "The paper has a lot of code samples and how they work.",
          "time": null
        }
      ]
    }
  ]
}