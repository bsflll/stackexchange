{
  "title": "Frida hook InsertMenuItemW",
  "link": "https://reverseengineering.stackexchange.com/questions/30253/frida-hook-insertmenuitemw",
  "content": "I'm trying to get information about menu items in an application. Experimentally established that InsertMenuItemW is called. Thanks to the documentation, I set the number of input parameters and wrote this hook.\n\n```\nvar InsertMenuItemW = Module.findExportByName(\"user32.dll\", \"InsertMenuItemW\");\nconst oInsertMenuItemW = new NativeFunction(InsertMenuItemW, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']);\nInterceptor.replace(oInsertMenuItemW, new NativeCallback((pathPtr, pathPtr1, pathPtr2, pathPtr3) => {\n    console.log(\" \"+pathPtr, pathPtr1, pathPtr2, pathPtr3);\n    const fd = oInsertMenuItemW(pathPtr, pathPtr1, pathPtr2, pathPtr3);\n    return fd;\n}, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']));\n\n```\nAccording to the documentation, I can get information about the new menu item by calling MENUITEMINFOA. But I can't figure out how to do it with Frida.\n\nhttps://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitemw\n\nQuestion update\n\nI was advised in the comments to use Memory.alloc.\n\nOn the Internet, I found this example where the hook allows you to read downloaded files.\n\n```\nvar pGetFileInformationByHandleEx = Module.findExportByName(\"kernel32.dll\", \"GetFileInformationByHandleEx\");\n\nvar fGetFileInformationByHandleEx = new NativeFunction(pGetFileInformationByHandleEx, \"bool\",[\"pointer\", \"uint\", \"pointer\", \"uint\"]);\n\nfunction getNameFromHandle(hFile) {\n    var lpFileInformation = Memory.alloc(0x200);\n    // 0x2 -> FILE_NAME_INFO\n    var callRes = fGetFileInformationByHandleEx(hFile, 0x2, lpFileInformation, 0x200);\n    if (callRes) {\n        console.log(\"|_ hFile: \" + (lpFileInformation.add(0x4)).readUtf16String());\n    } else {\n        console.log(\"|_ hFile: N/A\");\n    }\n}\n\n```\nAccording to the documentation the third parameter (output).\n\n```\nBOOL GetFileInformationByHandleEx(\n  [in]  HANDLE                    hFile,\n  [in]  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,\n  [out] LPVOID                    lpFileInformation,\n  [in]  DWORD                     dwBufferSize\n);\n\n```\nin the code you can see that we are passing the third parameter:Memory.alloc(0x200);\n\n```\nvar callRes = fGetFileInformationByHandleEx(hFile, 0x2, lpFileInformation, 0x200)\n\n```\nBut according to the InsertMenuItem documentation the fourth parameter is [in, out]\n\n```\nBOOL GetMenuItemInfoA(\n  [in]      HMENU           hmenu,\n  [in]      UINT            item,\n  [in]      BOOL            fByPosition,\n  [in, out] LPMENUITEMINFOA lpmii\n);\n\n```\nAs I understand it, we must pass the lpmi of our InsertMenuItem as the fourth parameter. But how do we get out?\n\nMy current code\n\n```\nvar InsertMenuItemW = Module.findExportByName(\"user32.dll\", \"InsertMenuItemW\");\nvar GetMenuItemInfoW = Module.findExportByName(\"user32.dll\", \"GetMenuItemInfoW\");\n\n\nvar fGetMenuItemInfoW = new NativeFunction(GetMenuItemInfoW, \"bool\",[\"pointer\", \"pointer\", \"pointer\", \"pointer\"]);\nfunction getHandle(hmenu, item, fByPosition, lpmi) {\n    var lpFileInformation = lpmi || Memory.alloc(0x200);\n    var lpFileInformation2 = Memory.alloc(0x200);\n    var callRes = fGetMenuItemInfoW(hmenu, item, fByPosition, lpmi);\n    console.log(lpFileInformation2);\n    console.log(\"-----------\");\n}\nconst oInsertMenuItemW = new NativeFunction(InsertMenuItemW, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']);\nInterceptor.replace(oInsertMenuItemW, new NativeCallback((hmenu, item, fByPosition, lpmi) => {\n    \n    //call GetMenuItemInfoW\n    getHandle(hmenu, item, fByPosition, lpmi);\n    const fd = oInsertMenuItemW(hmenu, item, fByPosition, lpmi);\n    return fd;\n}, 'pointer', ['pointer', 'pointer', 'pointer', 'pointer']));\n\n```\n",
  "votes": "2",
  "answers": 0,
  "views": "131",
  "tags": [
    "javascript",
    "winapi",
    "frida"
  ],
  "user": "user123",
  "time": "Apr 13, 2022 at 11:15",
  "comments": [
    {
      "user": "Robert",
      "text": "I would start by importing InsertMenuItemW the same way you imported InsertMenuItemW. For the out parameter you will have to allocate memory using Memory.alloc.",
      "time": null
    },
    {
      "user": "user123",
      "text": "Thanks for the answer. Can you explain why I need to use GetMenuItemInfoA and not GetMenuItemInfoW ?",
      "time": null
    },
    {
      "user": "Robert",
      "text": "It doesn't matter which version you use. Unless your system language uses multi-byte characters you don't need to use the W version. Usually handling of Wide strings (UTF-16) is often more complicated. Not sure about Frida if wide strings are well supported.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@Robert doesn't it still matter whether the applications against which you use it uses the A or the W variety? I don't quite get your reasoning here. Unless you hook the underlying functionality from win32u.dll (previously user32.dll) these would be different code paths. Also note: ECMAscript uses UTF-32 internally, so I'd expect UTF-16 to be no issue.",
      "time": null
    },
    {
      "user": "user123",
      "text": "From the documentation, it's not entirely clear to me how to get out. The documentation says that the fourth parameter is both input and output. I found an example on the Internet but it does not quite fit this case. Updated the question.",
      "time": null
    }
  ],
  "answers_data": []
}