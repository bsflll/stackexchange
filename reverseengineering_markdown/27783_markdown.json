{
  "title": "Is this native code possible for further static analysis?",
  "link": "https://reverseengineering.stackexchange.com/questions/27783/is-this-native-code-possible-for-further-static-analysis",
  "content": "I was trying to reverse engineer a native lib code in an android app. the .so contains many functions. But the function sUQWWyTBEs() was referred in the Java code. I was curious how this function works, the code of the function sUQWWyTBEs() decompiled with Ghidra:\n\n```\n*************************************************************\n                             *                           FUNCTION                          \n                             *************************************************************\n                             undefined  __cdecl  Myapp_sUQWWyTBEs()\n             undefined         w0:1           <RETURN>\n             longlong *        x0:8           param_1\n                             Myapp_sUQWWyTBEs XREF[2]:     Entry Point (*) , 00101350   \n        00100e44 08  00  40  f9    ldr        x8, [param_1 ]\n        00100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000           ; = \"c7a584936712f32773d3d0a\"\n        00100e4c 21  60  08  91    add        x1, x1, #0x218\n        00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]\n        00100e54 40  00  1f  d6    br         x2\n\n```\nin my understanding, I have made the static analysis as like following:\n\n00100e44 08  00  40  f9    ldr        x8, [param_1 ]\n\nload the value at memory address param_1 into register x8.\n\n0100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000  \n\nsets register x1 to 0x101000.\n\n00100e4c 21  60  08  91    add        x1, x1, #0x218\n\nadds 0x218 to x1, so it sets x1 to 0x101218.\n\n00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]\n\nloads the value at x8 + 0x538 into x2.\n\n00100e54 40  00  1f  d6    br         x2\n\nand finally branches to the  address stored in x2.\n\nwith that being said, Here I don't know the memory at address at x2, obviously it initially  depends on the value param_1 holds. is there way or how can I refer where param_1 was initialized? I don't know very much about usage of Ghidra or other reverse engineering tools. any one might help would be appreciated.\n\nEdit: This function returns a string like this 47fjlkj843h9asjklj94kljfsad93j4l2715943hasd... but what I wanted is that how this value was generated or returned.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "128",
  "tags": [
    "ida",
    "android",
    "ghidra",
    "java",
    "apk"
  ],
  "user": "hanan",
  "time": "Jun 3, 2021 at 13:54",
  "comments": [
    {
      "user": "Robert",
      "text": "If this is a function called from Java the first step is to look at the Java declaration of the method what parameters it has. On native side the first parameter of a JNI function should be the pointer to the JNI environment providing a lot of methods for Java native conversions.",
      "time": null
    },
    {
      "user": "hanan",
      "text": "@Robert at the at entry this code appears:    00100ca0 00  00  00  d0    adrp      param_1, 0x102000 00100ca4 00  20  37  91    add        param_1=>PTR_LOOP_00102dc8 , param_1, #0xdc8  the param_1 was done like this. but value it is holding btw?",
      "time": null
    },
    {
      "user": "hanan",
      "text": "so param_1 appears to be holding jni env and being used as a frame pointer.",
      "time": null
    },
    {
      "user": "Robert",
      "text": "My guess would be that #538 is the offset to function newStringUTF. For offsets in 32bit see docs.google.com/spreadsheets/d/â€¦. I would assume that your binary is 64bit, thus the references are double the value of this spread sheet.",
      "time": null
    },
    {
      "user": "hanan",
      "text": "@Robert I have loaded the code into JEB decompiler and it outputs as link. JEB comments each instruction's output but I wanted how the output was generated?",
      "time": null
    }
  ],
  "answers_data": []
}