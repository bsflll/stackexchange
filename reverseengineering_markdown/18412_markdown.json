{
  "title": "Basic hello world stack manipulation troubles",
  "link": "https://reverseengineering.stackexchange.com/questions/18412/basic-hello-world-stack-manipulation-troubles",
  "content": "I'm a beginner in reverse engineering, and as a beginner I started to read \"Reverse Engineering for beginers\".\nHere is the hello world program from the book (taken from chapter 3, page 12) :\n\n```\nmain proc near\n\nvar_10 = dword ptr -10h\n\n     push ebp\n     mov ebp, esp\n     and esp, 0FFFFFFF0h\n     sub esp, 10h\n     mov eax, offset aHelloWorld ; \"hello, world  \n\"\n     mov [esp+10h+var_10], eax\n     call _printf\n     mov eax, 0\n     leave\n     retn\nmain endp\n\n```\nThere are two lines I don't understand at all : \n\nFrom what I understood from the book, we add 0FFFFFFF0h (equals -16) value to ESP in order to align the stack to a 16byte boundary for optimisation.\n\nMy question is : why do we add -16 and then substract 16 to the stack? It seems pointless to me, can't we substract directly 32?\nSecond, if I'm understanding well:\n\nWhy do we need to modify the value of EBP? PUSH instruction is supposed to change the value of ESP, not EBP, so why would there be any problem not modifying EBP value at the function prolog?\n\n\nSo now we have EBP = ESP, and both are fristEBP (EBP when the program started) - 8. So now we are adding -16 to the stack, so ESP becomes ESP - 16 (ESP - 24 if we consider that we've been adding -8 to the stack). \nWhat is -24 have to do with a 16byte boundary?\nWhy do we substract 16 again from the stack with sub esp, 10h?\n\n\nNotes : I'm sorry for the english, and sorry if I'm asking dumb questions, the book isn't clear enought and I failed to find explainations on the net.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "340",
  "tags": [
    "c",
    "static-analysis",
    "stack",
    "gcc",
    "intel"
  ],
  "user": "Nark",
  "time": "May 31, 2018 at 9:27",
  "comments": [
    {
      "user": "blabb",
      "text": "and not add aligns the stack to 16 byte boundary   ie 123456a1 & fffffff0 will result in 123456a0",
      "time": null
    },
    {
      "user": "Nark",
      "text": "Isn't there a risk of loosing data?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's not add in the first opcode. It's and. So it will clear the lower nibble for the last byte in the address. This is how the alignment is done and not by adding anything. Only later you sub 16 to have room for the local variables.\n\nWe use EBP to store the initial ESP value. EBP is pointing to the current stack frame. This is the place for local variables created withing the function. Before we modify EBP it is stored on the stack so that we can restore it before we leave the function.\n\n",
      "votes": "2",
      "user": "Paweł Łukasik",
      "time": "May 31, 2018 at 9:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nark",
          "text": "Okay I get it, but why add 0FFFFFFF0h and not 0FFFFFFF0F if we want to clear the lower nibble?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "lower nibble are the bits 3-0 so why we would want to put 0 on bits 7-4 to do that?",
          "time": null
        },
        {
          "user": "Nark",
          "text": "I missread, sorry",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "ok, no worries!",
          "time": null
        }
      ]
    }
  ]
}