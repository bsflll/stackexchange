{
  "title": "Visual studio memory allocation reverse engineering",
  "link": "https://reverseengineering.stackexchange.com/questions/9099/visual-studio-memory-allocation-reverse-engineering",
  "content": "I compile this code with Visual studio 2010 compiler:\n\n```\n#include \"stdafx.h\"\n#include <iostream>\nint main() {\n   int *p;\n   p = new int(255);\n   delete []p;\n}\n\n```\nThe disassembly of it, is different from Dev C++. It seems it first checks if there is enough memory and then start the allocation. am I right?\n\nThis is the disassembly : \n\n\n\nIn the Orange node:\n\nWhy esi and edi pushed to the stack?\nI've seen mov eax,0CCCCCCCCh before in books, What does this instruction do?\nWhat does the highlighted part of the orange node do? Is it a check to see if there is enough available memory?\n\nIn the blue node:\n\nFFh is equal to 255, Can you explain how the memory is getting allocated?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "631",
  "tags": [
    "disassembly",
    "binary-analysis",
    "c++",
    "static-analysis",
    "compilers"
  ],
  "user": "Vlad",
  "time": "Jun 9, 2015 at 7:32",
  "comments": [],
  "answers_data": [
    {
      "content": "You may want to read up on assembly before attempting to reverse engineer.\n\n",
      "votes": "7",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vlad",
          "text": "I already know assembly. The question is why it saves the previous eax into the local variable and check its value.....",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "That's explained in my last point #3. It is the original line p = new int(255);.",
          "time": null
        },
        {
          "user": "Vlad",
          "text": "What do you mean  after attempting to allocate, not before. ?",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "The usual procedure is to ask the OS for some memory, and the return value is NULL when it could not give you the requested amount. Read Wikipedia on malloc for details. This is preferred over first asking how much memory is free, because although \"free\", this may mean \"in total, but not in one contiguous block\". And if you are going to ask if a block of a certain size is available before (actually) requesting it, it may already be taken by another process.",
          "time": null
        }
      ]
    }
  ]
}