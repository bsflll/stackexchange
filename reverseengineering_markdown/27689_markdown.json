{
  "title": "Getting value of local variable in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/27689/getting-value-of-local-variable-in-ghidra",
  "content": "I've been trying to solve a crackme challenge by examining it's decompiled version by Ghidra.\nSo I figured the code where the strcmp is done as shown in the figure below. Now I need to to patch the program to make it print the password if strcmp fails.\n\nBut I don't know how to patch the instruction to print out the value at local_40\n\nInstead of MOV dword ptr [ESP],0x4b1050 what variable in this instruction should be edited? If my understanding is correct then the above instruction is loading the ESP register with the value at 0x4b1050\nso how will I get the address of local_40?\n\n\n\n",
  "votes": "3",
  "answers": 0,
  "views": "3k",
  "tags": [
    "disassembly",
    "ghidra"
  ],
  "user": "Nimrod",
  "time": "May 22, 2021 at 16:39",
  "comments": [
    {
      "user": "Dvd848",
      "text": "Are you sure you want to patch the program in order to discover the password? It would probably be easier to use a debugger or ltrace for this matter.",
      "time": null
    },
    {
      "user": "Nimrod",
      "text": "I'll resort to that if this didn't work, but just to learn this stuff, some help is appreciated",
      "time": null
    },
    {
      "user": "Dvd848",
      "text": "I'm guessing that you can try something like LEA EAX, [EBP - 0x3c]; MOV dword ptr [ESP], EAX (notice that local_40 is actually EBP - 0x3c). You'll need to override some instructions before 0x40151a as well, and therefore to point the JNZ accordingly.",
      "time": null
    }
  ],
  "answers_data": []
}