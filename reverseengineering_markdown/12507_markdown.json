{
  "title": "How to obfuscate x86 assembly code?",
  "link": "https://reverseengineering.stackexchange.com/questions/12507/how-to-obfuscate-x86-assembly-code",
  "content": "For my project, I am performing a kind of checksum operation on a portion of code to protect it and therefore do not want its template to be easily visible and therefore need obfuscation.\n\nI have searched a lot on the net and read papers describing obfuscation definitions, types, etc. But there seems to be no tutorial on obfuscating x86 assembly code. Can anybody suggest a simple algorithm/tool for the same?\n\nI have read about inserting dummy code, changing the order of the instructions and other techniques but they appear to be totally random i.e. there is no end to how much dummy code to insert, etc.\n\nCan somebody at least guide me to the correct approach? \n\n",
  "votes": "1",
  "answers": 3,
  "views": "8k",
  "tags": [
    "assembly",
    "x86",
    "obfuscation",
    "security"
  ],
  "user": "rkabhishek",
  "time": "Apr 22, 2016 at 15:09",
  "comments": [],
  "answers_data": [
    {
      "content": "You should not confuse \"code protection\" and \"code obfuscation\". \"Code protection\" techniques target in recognizing code modifications (you mention a checksum) and take suitable means like crashing or delivering wrong results when tampering with the code has been recognized. Anti-Debug measures also belong into this category.\n\n\"Code obfuscation\" in a binary targets in blinding the investigator (and the disassembler) with awkward and often useless code, ranging from simple jmp chains to more complicated constructs. Most code obfuscation techniques result in some code bloat, and the tradeoff between the obfuscation and the performance must be considered. Here are two obfuscation examples being found \"in the wild\".\n\n\n    mov si, si\n    mov esp, ebp\n    jnz loc_abcd\n    xchg edi, esi\n    mov cl, cl\n    xchg esi, edi\n    mov di, di\n    jz loc_dcba ; followed by a jmp to loc_abcd\n    cpuid\n    ret\n\nIn the example, the only \"real\" statement is the mov esp, ebp.\n\nMany more, and much more complicated examples can be found. If you want to dive into this matter, you need practice, as in all SW reversing. Get a protected and/or obfuscated binary like a game or a dongle protector and train. In the literature (e.g. the excellent IdaPro book by Chris Eagle) you may find some obfuscation constructs as well.\n\nHave fun!\n\n",
      "votes": "5",
      "user": "josh",
      "time": "Apr 23, 2016 at 0:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "rkabhishek",
          "text": "Hey Thanx a lot. Sorry for replying so late!",
          "time": null
        },
        {
          "user": "rkabhishek",
          "text": "Your answer was one of the best on suggesting approaches to obfuscation. But how do I know what dummy code to insert, is there any proper algo to obfuscate - add dummy code, then complicate instructions, etc. Because this appears to be random.",
          "time": null
        },
        {
          "user": "josh",
          "text": "There is no general rule about applying code obfuscation. The more \"spaghetti\", the better (from THAT point of view). If you want to get a comprehensive overview from a practical as well as from a theoretical point of view, have a look at the book by Bruce Dang et al \"Practical Reverse Engineering\". They have a complete chapter about obfuscation. Recommendable reading. Downloadable online (IIRC).",
          "time": null
        }
      ]
    },
    {
      "content": "As mentioned in the comments, check out chapter 5 of the PDF Practical Reverse Engineering for some ideas.\n\nJunk code insertion:\n\n```\njmp label\n<junk> \nlabel:\n<real code>\n\n```\nOperating Systemâ€“Based Control Indirection:\n\n```\npush addr_seh_handler\npush fs:[0]\nmov fs:[0], esp\nxor eax, eax\nmov [eax], 1234h\n<junk code>\naddr_seh_handler:\n<continue execution here>\npop fs:[0]\nadd esp, 4\n\n```\nProcessor-Based Control Indirection:\n\n```\ncall target_addr\n<junk code>\ntarget_addr:\nadd esp, 4\n\n```\nArithmetic Substitution via Identities:\n\n```\n-x = ~x + 1 (by definition of two's complement) \nrotate left(x,y) = (x << y) | (x >> (bits(x)-y))\nrotate right(x,y) = (x >> y) | (x << (bits(x)-y))\nx-1 = ~-x\nx+1 = - x\n\n```\nPattern-Based Obfuscation:\n\n```\npush reg32\n\n```\nbecomes\n\n```\npush imm32\nmov dword ptr [esp], reg32\n\n```\nMore pattern based examples here.\n\nNop code insertion\n\n",
      "votes": "0",
      "user": "BullyWiiPlaza",
      "time": "Sep 5, 2019 at 11:35",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you don't want to obfuscate the code manually, here's the 'mature' approach:\n\nWhere:\n\nManipulating IR code is much easier, than manipulating the native code. Yet learning how llvm works and how to use its classes to make changes is not trivial.\n\n",
      "votes": "0",
      "user": "Anton Kukoba",
      "time": "Sep 5, 2019 at 15:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}