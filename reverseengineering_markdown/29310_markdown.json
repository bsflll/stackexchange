{
  "title": "When patching static software, is there a preferred patching strategy?",
  "link": "https://reverseengineering.stackexchange.com/questions/29310/when-patching-static-software-is-there-a-preferred-patching-strategy",
  "content": "Suppose you have something like this (in x86-like asm)\n\n```\n10 | mov ebx 1 // good response from function \"check\" below\n20 | call check() // modifies eax\n30 | test eax ebx\n40 | jeq good\n50 | bad:   call lose()\n60 | jmp finish\n70 | good:  call win()\n80 | finish:    push/pop stuff from stack\n90 | retn 0\n\n```\nSuppose I want to modify the logic so that it always executes some win(). From what we have, there are multiple ways to accomplish this. Here are strategies I can see:\n\nI wonder if there is a standard strategy recommended for patching like this.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "88",
  "tags": [
    "binary",
    "assembly"
  ],
  "user": "TAbdiukov",
  "time": "Sep 20, 2021 at 5:27",
  "comments": [
    {
      "user": "blabb",
      "text": "mov ebx,0 ; jq good maybe ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The better solution (on my opinion) is\n\nBy my experience the less painful way is to switch conditional jump (je) to unconditional jmp, as opcodes are always the same length (74 0a vs eb 0a):\n\n```\n;addr  opcode                  instruction\n0:     bb 01 00 00 00          mov    ebx,0x1\n5:     e8 00 00 00 00          call   sub_check\na:     85 d8                   test   eax,ebx\nc:     74 0a                   je     18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00          call   sub_lose\n13:    e9 00 00 00 00          jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00          call   sub_win\n\n```\nand\n\n```\n;addr  opcode               instruction\n0:     bb 01 00 00 00       mov    ebx,0x1\n5:     e8 00 00 00 00       call   sub_check\na:     85 d8                test   eax,ebx\nc:     eb 0a                jmp    18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00       call   sub_lose\n13:    e9 00 00 00 00       jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00       call   sub_win\n\n```\n",
      "votes": "1",
      "user": "Ornstein89",
      "time": "Sep 29, 2021 at 17:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}