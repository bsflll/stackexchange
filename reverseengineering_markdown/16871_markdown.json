{
  "title": "How can I load C header file with IDAPython in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/16871/how-can-i-load-c-header-file-with-idapython-in-ida-pro",
  "content": "How can I load C header file with IDAPython in IDA Pro?\n\nI'm trying automatically load C header file with IDAPython, such as Load(\"filename.h\").\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "idapython"
  ],
  "user": "user3881835",
  "time": "Nov 30, 2017 at 15:39",
  "comments": [],
  "answers_data": [
    {
      "content": "Well, w s's answer actually points out what you should do. Here I give a more detailed answer:\n\nIn short, create file 1.h under your E: drive, fill with some struct definitions and try this in your IDA's Output Window:\n\n```\nidaapi.idc_parse_types(\"E:\\\\1.h\", idc.PT_FILE)\n\n```\nThis function will return number of errors it encounters when parsing your .h file. If you get 0, it means there is nothing wrong in your header file.\n\nNOTE1: IDA Python keeps changing. The above code works for me (I use IDA Pro 6.8). Some changes may be needed if you use a different version. Try IDA Python Reference.\n\nNOTE2: You should find the new types appear in your Local Types window (Press Shift+F1 to open it), which displays the types in TIL. If you actually need structures (which belongs to IDB), try idaapi.til2idb or idaapi.import_type to import them.\n\n",
      "votes": "3",
      "user": "kbridge4096",
      "time": "Jan 2, 2018 at 18:55",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "See below the quote from idc.py \n\n```\ndef parse_decls(inputtype, flags = 0):\n    \"\"\"\n    Parse type declarations\n    @param inputtype: file name or C declarations (depending on the flags)\n    @param flags: combination of PT_... constants or 0\n    @return: number of parsing errors (0 no errors)\n    \"\"\"\n    return ida_typeinf.idc_parse_types(inputtype, flags)\n\n\nPT_FILE =   0x0001  # input if a file name (otherwise contains type declarations)\nPT_SILENT = 0x0002  # silent mode\nPT_PAKDEF = 0x0000  # default pack value\nPT_PAK1 =   0x0010  # #pragma pack(1)\nPT_PAK2 =   0x0020  # #pragma pack(2)\nPT_PAK4 =   0x0030  # #pragma pack(4)\nPT_PAK8 =   0x0040  # #pragma pack(8)\nPT_PAK16 =  0x0050  # #pragma pack(16)\nPT_HIGH  =  0x0080  # assume high level prototypes\n                    # (with hidden args, etc)\nPT_LOWER =  0x0100  # lower the function prototypes\n\n```\n",
      "votes": "2",
      "user": "w s",
      "time": "Nov 30, 2017 at 20:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}