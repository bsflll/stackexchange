{
  "title": "Detecting protected processes and critical processes from windows driver",
  "link": "https://reverseengineering.stackexchange.com/questions/20932/detecting-protected-processes-and-critical-processes-from-windows-driver",
  "content": "I've got a driver that tamper user-space processes by sending APC calls upon process start using the call PsSetCreateProcessNotifyRoutine.\n\nI wish to avoid tampering with any process that is critical for the OS stability, since my APC also eventually decides to kill the process. \n\nSo far I've used PsIsProtectedProcess and PsIsProtectedProcessLight in order to detect protected processes. \n\nHowever, it appears that there are some processes such as smss.exe and crss.exe and wininit.exe that are defined as critical processes and I also wish to avoid them. \n\nPerhaps anybody knows that difference between protected and critical process, and how can I detect critical process programmatically  from kernel-mode (maybe it has ad-hoc field in EPROCESS ? ) \n\nthanks,\n\n",
  "votes": "8",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "windbg",
    "process"
  ],
  "user": "Irad K",
  "time": "Mar 20, 2019 at 14:59",
  "comments": [],
  "answers_data": [
    {
      "content": "It seems the correct term is Critical System Service. There are API from userland but I can't find anything for the kernel. So I took a quick look into the RstrtMgr.dll and it seems the list is actually hardcoded...\n\nFor the processes:\n\nFor the services (specific case for svchost.exe):\n\nThere is probably another way to achieve that. After all, Windows BSOD if one of these processes is killed.\n\nEdit: It seems nt!EPROCESS::BreakOnTermination is what you're looking for.\nThe real field is nt!EPROCESS::Flags and the mask 0x2000.\nIf this bit is set, PspExitThread will BSOD with CRITICAL_PROCESS_DIED.\n\n",
      "votes": "6",
      "user": "wisk",
      "time": "Mar 20, 2019 at 18:30",
      "is_accepted": true,
      "comments": []
    }
  ]
}