{
  "title": "Insert a function call in an ELF executable",
  "link": "https://reverseengineering.stackexchange.com/questions/10928/insert-a-function-call-in-an-elf-executable",
  "content": "I want to patch an ELF executable to insert a function call (the function s2e_rawmon_loadmodule and its dependencies are to be linked statically, preferably) at the beginning. \n\nThis answer seems to have a nice set of pointers. If I have understood correctly, dynamic instrumentation using PIN/Valgrind/DynamoRIO alters the address space. The addresses of the subsequent instructions get changed which I don't want. \n\nFor static instrumentation, ERESI project could have been useful. But, it looks like the project has been abandoned for long. I am not being able to build the tool on Ubuntu 14.04 due to compilation issues.\n\nCan anybody help me out with some workaround?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "elf",
    "patching",
    "instrumentation"
  ],
  "user": "sherlock",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "user2823000",
      "text": "I don't understand if the function you want to call is already in the binary or not, and/or if you want to modify just one binary or to design a generic way to do it. I'd say you could just create a new section manually, drop your code in it (and the first few instructions of OEP), and put a JMP at the OEP.",
      "time": null
    },
    {
      "user": "w s",
      "text": "would you post the link to your compilation issues ?",
      "time": null
    },
    {
      "user": "w s",
      "text": "OK, I built it on ubuntu 14.04. The only issue I encountered was usage of word __unbounded in entry.c which ( word __unbounded) can be freely removed without any problem.",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "@ws Yes, it works fine with __unbounded deleted. But, does that affect the functionality anyway?",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "@Dillinur No, the code does not reside in the binary.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It seems that you're trying to run some code in the context of the binary before anything meaningful happens.\n\nYou should read some resources about ELF infection, for example on vxheavens or here.\n\nBut since you're trying to inject/execute s2e_rawmon_loadmodule from s2e, maybe you should just use a debugger instead, because I'm quite sure that this is not how it's supposed to be used.\n\n",
      "votes": "1",
      "user": "jvoisin",
      "time": "Sep 22, 2015 at 23:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "How come a debugger help me in injecting a function while the target binary is running on a Debian guest inside s2e framework? Of course, s2e_rawmon_loadmodule is supposed to be used while source is available. In my case, source is missing, only binary is assumed to be present.",
          "time": null
        },
        {
          "user": "jvoisin",
          "text": "Because you didn't mentioned that the software was running on a host inside the s2e framework ;)",
          "time": null
        }
      ]
    }
  ]
}