{
  "title": "cdecl calling convention",
  "link": "https://reverseengineering.stackexchange.com/questions/26467/cdecl-calling-convention",
  "content": "\n\nHello best people, my question is this example is telling me about cdecl calling convention. I have confusion that when analyzing the code in disassembly how would I recognize that this is the cdecl call plus\n\nthey are saying that the highlighted line in the picture showing that the stack is cleaned by the caller as the function is complete, my question is how it is cleaning the stack, I'm according to my knowledge seeing that the value 12 is added in esp, HOW IT IS CLEANING? please explain.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "665",
  "tags": [
    "ida",
    "malware"
  ],
  "user": "Ramesses II",
  "time": "Dec 7, 2020 at 12:27",
  "comments": [],
  "answers_data": [
    {
      "content": "esp register is the stack pointer and it points to the head of the stack, which is the lowest address in the binary.\n\n#1 Initial stack frame:\n\n```\n|local var 1| <- esp (lowest address)\n|local var 2|\n|-----------|\n|-----------| \n|-----------|\n|local var n| <- ebp\n\n```\nAfter the push instructions the stack will look at:\n\n#2 Stack frame just before the call:\n\n```\n|a| <- esp\n|b| \n|c| \n|local var 1| \n|local var 2|\n|-----------|\n|-----------| \n|-----------|\n|local var n| <- ebp\n\n```\nSo now 3 extra values were added to the stack frame of the current function, in order to pass arguments to the test function. 3 arguments * 4 bytes size of an argument = 12 bytes.\n\nAfter test returns we need to get back to our #1 stack frame from #2 - we want esp to point back to the local var 1. in order to do that, we need to add 12 to the esp - remember that the stack grows from highest address to lowest and that the size of our 3 arguments is 12 bytes. This is the add esp, 12 instruction, and it's called cleanup the stack.\n\nIn cdecl call, the caller, which is the current function, is the one that responsible for cleanup the stack. In other calling conventions, like stdcall the callee is responsible for cleaning the stack - restore the state of the stack pointers to prior the call.\n\n",
      "votes": "5",
      "user": "macro_controller",
      "time": "Dec 7, 2020 at 14:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ramesses II",
          "text": "nicely explained! Thank You.",
          "time": null
        }
      ]
    },
    {
      "content": "Just to add to the previous answer, “cleaning” here is not used in the literal sense but to indicate the the code returns the stack pointer (esp) to the value it had before the call. Unfortunately this term is quite entrenched so will probably continue to confuse new learners in future as well.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 9, 2020 at 16:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ramesses II",
          "text": "Thank you so much sir! It really helped me & evaded my confusion! 🔥",
          "time": null
        }
      ]
    }
  ]
}