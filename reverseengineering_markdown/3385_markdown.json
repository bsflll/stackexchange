{
  "title": "_DEVOBJ_EXTENSION structure information",
  "link": "https://reverseengineering.stackexchange.com/questions/3385/devobj-extension-structure-information",
  "content": "I'm looking for information on the _DEVICE_OBJECT->_DEVOBJ_EXTENSION structure.\n\nI'd like to know a bit more about this structure in genernal, like what it's actually used for. But specifically, I'd like to know about the _DEVICE_OBJECT* AttachedTo member and the difference between that and the _DEVICE_OBJECT* AttachedDevice member in the _DEVICE_OBJECT structure.\n\nGoogle is proving fruitless, and I can't find any reference to it in the Windows Internals book. Any resources or information would be greatly appreciated.\n\nEDIT:\nOk... After a bit of staring at WinDbg I found that the AttachedTo field seems to point to the device object at the top of the device tree. Can anyone confirm this?\n\n",
  "votes": "3",
  "answers": 3,
  "views": "1k",
  "tags": [
    "windows",
    "kernel-mode"
  ],
  "user": "ben_re",
  "time": "Jan 7, 2014 at 11:04",
  "comments": [],
  "answers_data": [
    {
      "content": "According to this diagram from http://www.mouseos.com/windows/kernel/DeviceStack.html, AttachedDevice points to the next device and DeviceExtension->AttachedTo points to the previous device:\n\n\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Jan 7, 2014 at 13:53",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "use !devobj <address> command\nit will tell you what AttachedDevice (upper ) and what AttachedTo device is (lower)\n\n```\n.foreach (place { .shell -ci \"!object \\\\Device;\" sed s/\"     \"..\"  \"//g | sed s/\" .*\"//g } ) { !grep -i -c \"!devobj place\" -e \"Attached\"}\n\n```\nnote:\n\n```\n!grep is from domdbg windbg extension sed is from gnuwin32 \n\n```\noutput\n\n```\nAttachedTo (Lower) 86fb1630 \\Driver\\PnpManager\nAttachedTo (Lower) 86d22420 \\Driver\\aswTdi\nAttachedDevice (Upper) 862f59d8 \\Driver\\wdmaud\nAttachedDevice (Upper) 86e11130 \\Driver\\ROOTMODEM\nAttachedDevice (Upper) 86de7528 \\Driver\\Kbdclass\nAttachedTo (Lower) 86fac190 \\Driver\\PnpManager\nAttachedDevice (Upper) 86e02560 \\Driver\\Rasl2tp\nAttachedDevice (Upper) 862e9c90 \\Driver\\sysaudio\nAttachedTo (Lower) 86f5ece8 \\Driver\\ACPI\nAttachedTo (Lower) 86e15020 \\Driver\\i8042prt\n\n```\nor parse the structures yourself for all devices to find patterns\n\n```\n .foreach (place { .shell -ci \"!object \\\\Device;\" sed s/\"     \"..\"  \"//g | sed s/\" .*\"//g } ) {dt nt!_DEVICE_OBJECT -y Dri->Drivern* place ;dt nt!_DEVICE_OBJECT -yr DeviceOb->Att->Dri->Drivern* place ;dt nt!_DEVICE_OBJECT -yr Atta->Dri->Drivern* place ; .echo ==========}\n\n```\nwhen a deviceobject has both AttachedDevice and AttachedTo device it should show you an output like this\n\n```\n   +0x008 DriverObject : \n      +0x01c DriverName   : _UNICODE_STRING \"\\Driver\\TermDD\"\n   +0x0b0 DeviceObjectExtension       : \n      +0x018 AttachedTo                  : \n         +0x008 DriverObject                : \n            +0x01c DriverName                  : _UNICODE_STRING \"\\Driver\\PnpManager\"\n   +0x010 AttachedDevice     : \n      +0x008 DriverObject       : \n         +0x01c DriverName         : _UNICODE_STRING \"\\Driver\\Kbdclass\"\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Jan 7, 2014 at 20:11",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The structure is fully documented by Microsoft on their MSDN site. I also created a blog post a while ago, regarding this data structure which can be found here - http://bsodtutorials.blogspot.co.uk/2013/11/devobj-and-deviceobject.html\n\n",
      "votes": "3",
      "user": "0xFFFF",
      "time": "Jan 8, 2014 at 13:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "asheeshr",
          "text": "Welcome to Reverse Engineering! We prefer answers to have more than just a link so that even if the link were to go down the content would allow an individual to solve the problem at hand or at least search for the relevant solution.",
          "time": null
        }
      ]
    }
  ]
}