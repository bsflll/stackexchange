{
  "title": "What is a more efficient way to locate disasm patterns in IDAPython?",
  "link": "https://reverseengineering.stackexchange.com/questions/16843/what-is-a-more-efficient-way-to-locate-disasm-patterns-in-idapython",
  "content": "This is my first \"serious\" IDAPython script. As I sorta suspected, it's performing waaaayyyyy too slow so I wanted to ask for some pointers on this:\n\n```\nfp = MinEA()\nend = MaxEA()\n\nwhile fp < end:\n    prev_inst = idc.prev_head(fp,MinEA())\n    prev_prev = idc.prev_head(prev_inst,MinEA())\n    next_inst = idc.next_head(fp,MaxEA())\n    if idc.SegName(fp) == '.text' or idc.SegName(fp) == '.code':\n        if idc.GetMnem(fp) == 'call':\n            if (idc.GetOpnd(fp,0) == 'ds:GetProcAddress') or (idc.GetOpnd(fp,1) == 'ds:GetProcAddress'):\n                if(idc.GetMnem(prev_inst) == 'push'):\n                    if(idc.GetMnem(next_inst) == 'mov' and idc.GetMnem(prev_prev) == 'mov'):\n                        print \"GetProcAddress Found at %02X\" % hex(fp)\n\n```\nThis code is looking for this type of behavior (dynamic API loads):\n\n\n",
  "votes": "1",
  "answers": 2,
  "views": "645",
  "tags": [
    "ida",
    "idapython",
    "python"
  ],
  "user": "the_endian",
  "time": "Nov 26, 2017 at 5:52",
  "comments": [],
  "answers_data": [
    {
      "content": "I typicall solve this by just walking over code references to the import.\n\nSomething like\n\n```\nfor ref in CodeRefsTo(LocByName('GetTickCount'),True):\n    print \"%08x\" % ref\n\n```\nThis is quite powerful because unless I'm mistaken this also references snippets like this properly: \n\n```\nmov     esi, ds:LoadLibraryW\npush    edi             ; lpLibFileName\ncall    esi ; LoadLibraryW\n\n```\nwhere the code reference is properly returned as the last line, not the first.\n\nThen I typically walk the code backwards with PrevHead and GetMnem until I find the matching arguments.\n\n",
      "votes": "3",
      "user": "Johann Aydinbas",
      "time": "Feb 12, 2018 at 20:32",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This is a comment esque answer, but I want to give this my best shot.\n\nAlso, I'd like you to understand I'm not the best with programming, and reversing itself, so this answer is probably nowhere near the best.\n\nThere is something very odd about this assembly that any reverse engineer would probably instantly notice, and I'm very glad you've noticed it to, thats 1 step down. You'll notice there is also at the end of each opcode byte, a pattern of bytes ... 37 12 is what I mainly am talking about, this means you can possibly check if the end of the opcode bytes are the same. This is a way to locate disasm patterns. Also, by the way, there are a few find signature libraries lying around for python. Here is one, https://pypi.python.org/pypi/libsigscan-python/20170124 (I'm not sure they work with IDAPyton, who knows, by the way, maybe IDAPython has an opcode byte finding function)\n\nHope this helped! Good luck :)\n\nReferences:\n\nhttp://ask-leo.com/what_is_signature_scanning.html\n\n",
      "votes": "0",
      "user": "Graham Best",
      "time": "Dec 14, 2017 at 15:28",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Uhm, other than that this should really be a comment (as you point out yourself), what's so odd about 37 12? The whole instruction looks like an ordinary call with ds selector and an address. Now that the address is 0x1237.... seems logical looking at the line prefixes shown by IDA and another way to represent that call would be call DWORD PTR ds:0x1237A1AC ...",
          "time": null
        },
        {
          "user": "Graham Best",
          "text": "Sorry, I meant to put more of the bytecode pattern in, but you'll notice it forms a pattern.",
          "time": null
        }
      ]
    }
  ]
}