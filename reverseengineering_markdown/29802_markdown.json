{
  "title": "How can I tell radare2 to show me a constant's value in disassembly",
  "link": "https://reverseengineering.stackexchange.com/questions/29802/how-can-i-tell-radare2-to-show-me-a-constants-value-in-disassembly",
  "content": "In radare2, I can disassemble like:\n\n```\n0x004006f0]> pd 3\n...\n0x004006f0      ff2532092000   jmp qword [reloc.callme_three] ; [0x601028:8]=0x4006f6\n0x004006f6      6802000000     push 2                      ;\n0x004006fb      e9c0ffffff     jmp sym..plt\n\n```\nHowever, I want to see what those constants (reloc.callme_three, sym.plt) really hide.  pid does half of this, but still doesn't show me the sym.plt constant:\n\n```\n[0x004006f0]> pid 3\n0x004006f0   sym.imp.callme_three:\n0x004006f0         ff2532092000  jmp qword [rip + 0x200932]\n0x004006f6           6802000000  push 2\n0x004006fb           e9c0ffffff  jmp sym..plt\n\n```\nHow can I disassemble with all constants opened?\nHow can I find out what sym..plt is defined as?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "330",
  "tags": [
    "disassembly",
    "radare2"
  ],
  "user": "SRobertJames",
  "time": "Dec 31, 2021 at 3:45",
  "comments": [],
  "answers_data": [
    {
      "content": "```\n0x004006f0      ff2532092000   jmp qword [reloc.callme_three] ; [0x601028:8]=0x4006f6 \n\n```\nit already shows in the comment what the symbol means  it is 0x4006f6\naddress the next instruction\n\nfor example on an arbitrary disassembly as below\n\n```\n0x140012e7f      ff15db110000   call qword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter];    \n[0x140014060:8]=0x18d4e reloc.KERNEL32.dll_SetUnhandledExceptionFilter ; \"N\\x8d\\x01\"\n\n```\nyou can dump the qword with px{num} @ symbol syntax\n\n```\n[0x140012e60]> px8 @ sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter\n- offset -    0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x140014060  4e8d 0100 0000 0000                      N.......\n[0x140012e60]>  \n\n```\nthere are several ways\n\nuse seek\n\n```\n[0x00401120]> s sym..plt\n[0x00400f70]>  \n\n```\nprint using expression\n\n```\n[0x00401120]> ?v sym..plt\n0x400f70\n[0x00401120]>   \n\n```\nsearch for section named plt (notice the space  in pattern)\n\n```\n[0x00401120]> iS~ .plt\n13  0x00000f70  0x1b0 0x00400f70  0x1b0 -r-x .plt\n[0x00401120]>  \n\n```\ninfer from the jump Const 0xffffffe0 to the opcode e9 wrt eip\n\n```\n[0x00401120]> pid  3 @ sym.imp.SHA256_Final\n0x00400f80   sym.imp.SHA256_Final:\n0x00400f80         ff2592102000  jmp qword [rip + 0x201092]\n0x00400f86           6800000000  push 0\n0x00400f8b           e9e0ffffff  jmp sym..plt\n[0x00401120]> ?v 0x400f8b+5+0xffffffe0\n0x100400f70\n[0x00401120]>    \n\n\n\n\n \n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jan 1, 2022 at 8:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "SRobertJames",
          "text": "Please see the original question \"[this still doesn't show me the sym.plt constant\", which is what I'd like.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "read the docs and experiment  it will get you there faster to get what you like added some ways in answer",
          "time": null
        }
      ]
    },
    {
      "content": "Use e asm:\n\n```\ne?asm\n\n asm.hint.call: Show call hints [numbers] in disasm\nasm.hint.call.indirect: Hints for indirect call intructions go to the call destination\n       asm.hint.cdiv: Show CDIV hints optimization hint\n        asm.hint.emu: Show asm.emu hints [numbers] in disasm\n        asm.hint.imm: Show immediate hints [numbers] in disasm\n        asm.hint.jmp: Show jump hints [numbers] in disasm\n        asm.hint.lea: Show LEA hints [numbers] in disasm\n\n```\n",
      "votes": "0",
      "user": "SRobertJames",
      "time": "Jan 12, 2022 at 1:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}