{
  "title": "Intel PIN and nm unable to capture binary symbols",
  "link": "https://reverseengineering.stackexchange.com/questions/13639/intel-pin-and-nm-unable-to-capture-binary-symbols",
  "content": "I'm trying to generate a log of all identified symbols in a binary file. The application i'm trying to inspect is busybox. I've created a Pin Tool that successfully captures symbols (no demangling) and place them underneath the module they belong to, and worked just fine for many binaries except busybox. For example this command:\n\n```\npin -t <pin-tool-shared-object> busybox -ls\n\n```\nWas able to generate only the following output:\n\n```\nMODULE busybox:\n.init\n.plt\n.text\n\n# eof\n\n```\nNot finding any of the desired symbols. Unsure of where the problem was, I tried many variations of the nm command. The output was always the same:\n\n```\n$ nm -an /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n$ nm -an -D /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n$ nm -D /bin/busybox | c++filt\nnm: /bin/busybox: no symbol\n\n```\nWhat is happening here and how can I get a trace of the called symbols in this case (or at least a static nm-like output of these symbols).\n\nThe full Pin tool code is found here, as it might be the problem too.\n\nEDIT\n\nRunning the tool in verbose mode -v, that generates the sequential call graph, gives me traces like these when in busybox basic blocks:\n\n```\n0x404970 | CALL .plt\n0x42d41f | RET\n0x404970 | CALL .plt\n0x42d41f | RET\n0x43bcd1 | CALL .text\n0x4053fb | CALL .text\n0x4040d0 | CALL .plt\n0x405416 | RET\n0x43bcf6 | RET\n0x404740 | CALL .plt\n\n```\nWhich is nowhere near helpful. Apparently there are no exported symbols in this module.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "160",
  "tags": [
    "linux",
    "symbols",
    "intel"
  ],
  "user": "Gabriel Vasconcelos",
  "time": "Oct 3, 2016 at 18:03",
  "comments": [],
  "answers_data": [
    {
      "content": "Sounds like the binary has ben stripped (had its symbol table removed). Since busybox is usually compiled statically to not have any external dependencies and be entirely self-contained, it does not need even dynamic symbols to function. You'll just have to figure out how to achieve your goal without symbols.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Oct 3, 2016 at 18:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "Gabriel Vasconcelos",
          "text": "The symbols are just what I'm looking for. I'm seeing if I can compile it without stripping it. It's open source, which might help.",
          "time": null
        },
        {
          "user": "Gabriel Vasconcelos",
          "text": "Correct. I was able to make an unstripped version. There's a make option specifically and clearly for that purpose make busybox_unstripped.",
          "time": null
        }
      ]
    }
  ]
}