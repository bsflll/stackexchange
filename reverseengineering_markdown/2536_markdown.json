{
  "title": "How to force the loading of a DLL in Windows XP at a particular address",
  "link": "https://reverseengineering.stackexchange.com/questions/2536/how-to-force-the-loading-of-a-dll-in-windows-xp-at-a-particular-address",
  "content": "I need to run a debugger on an application and analyze its startup, however the main DLL gets loaded at different addresses every time, which makes my job much harder. How can I disable ASLR completely, or at least force one DLL to be loaded at a particular, always constant address?\n\n",
  "votes": "8",
  "answers": 3,
  "views": "2k",
  "tags": [
    "windows",
    "dll"
  ],
  "user": "f428329",
  "time": "Jul 26, 2013 at 14:38",
  "comments": [
    {
      "user": "0xdabbad00",
      "text": "Duplicate post of stackoverflow.com/questions/9560993/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I believe on XP if you strip the relocation table from the DLL (Or null out the relocation tables RVA and size in the data directory), then the Windows loader will try to load the DLL at its preferred base address (The ImageBase in the Optional Header) as it can no longer be relocated.\n\nSo long as the memory at the preferred base address is available this should work. Later versions of Windows may prevent this depending on loader options AFAIK.\n\nA handy tool to edit PE files is the freely available CFF Explorer.\n\n",
      "votes": "5",
      "user": "QAZ",
      "time": "Jul 26, 2013 at 14:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ditmar Wendt",
          "text": "CFF Explorer is the best, agreed.",
          "time": null
        },
        {
          "user": "cubuspl42",
          "text": "You say \"if you strip the relocation table [...] then the Windows loader will try to load the DLL at its preferred base address\". So where does it try to load it otherwise? Isn't it the point, that Windows loads a DLL at its preferred base address, unless its taken? I'm talking about non-ASLR case.",
          "time": null
        }
      ]
    },
    {
      "content": "To actually force a DLL to load at a particular address without making structural changes to it first, you need to allocate all of the rest of available memory first, and of course, ensure that the target location isn't in use already.\nTo disable ASLR for any given file, you have to set the IMAGE_FILE_RELOCS_STRIPPED flag in the Characteristics field of the COFF header.  Removing the relocation table won't do it, if the file opted into ASLR.  Windows will still move it around, it just won't relocate any of the data.\nAs far as I know, you can't turn off ASLR globally.\n\n",
      "votes": "5",
      "user": "peter ferrie",
      "time": "Jul 26, 2013 at 21:52",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "What the other posters are talking about are general methods for making a DLL always load at a particular address.\n\nFor what you want to do -- which is ensure that the absolute addresses are always relevant, vs module + offset -- is straightforward to do.\n\nIf you can load the binary on a Windows XP system, it is completely unaware of ASLR.\n\nAlternately, you can completely disable ASLR, which will ensure that modules will always be loaded at their preferred address.  This setting is controlled via HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\MoveImages.\n\nHowever, if the preferred address is unavailable, Windows will load it somewhere else.  If you run into this issue, I recommend modifying the preferred base address manually.  A good hex editor will allow you to do this.\n\n",
      "votes": "3",
      "user": "perror",
      "time": "Apr 22, 2014 at 12:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}