{
  "title": "I'm having trouble understanding this specific notation in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/27904/im-having-trouble-understanding-this-specific-notation-in-ghidra",
  "content": "I'm reversing a code construct I created to learn Ghidra, and it looks different to what it is in GDB. I was wondering if anyone could clarify what the highlighted LEA instruction means: [I don't know how it should be read]\n\n\n\nThanks, R.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "x86",
    "ghidra"
  ],
  "user": "Constructive",
  "time": "Jun 27, 2021 at 14:03",
  "comments": [],
  "answers_data": [
    {
      "content": "LEA means \"Load Effective Address\", i.e. instead of loading into the EAX register the content at the address ESP+8, it loads directly the address, i.e. the content of the register ESP increased by 8.\n\nFor illustration, if in the ESP register (Extended Stack Pointer) is the value 1000, the situation may be as this:\n\n\n\nThen your instruction LEA EAX, [ESP+8] loads into the EAX register the number 1008 â€” the address of the 3rd value in the stack.\n\nIn other words, the EAX will contain the address (a pointer) to the value 531.\n\nCompare:\n\nIf you replace the LEA instruction with the MOV one:\n\n```\nLEA EAX, [ESP+8]    ; original (LEA): EAX = 1008\nMOV EAX, [ESP+8]    ; replaced (MOV): EAX =  531\n\n```\nthen the EAX register will be loaded with the value in the stack, i.e. 531.\n\nNotes:\n\n",
      "votes": "3",
      "user": "MarianD",
      "time": "Jun 29, 2021 at 0:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "Constructive",
          "text": "Do you mean that the address of [ESP + local_18] is loaded into EAX, and ESP is increased by 8? [I'm rephrasing what you said for clarification]",
          "time": null
        },
        {
          "user": "MarianD",
          "text": "No, ESP itself is not increased. For example, if in the ESP is the number 100, then after performing the highlighted instruction in the EAX registry will be 108 and in the ESP still 100. local_18 has nothing with this instruction, it's only the Ghidra's hint (meaning that the result (108) will be saved in the variable local_18).",
          "time": null
        },
        {
          "user": "Constructive",
          "text": "This is what I'm seeing: LEA EAX=>local_18, [ESP + 0x8] I don't understand where the [ESP + 0x8] comes from and I don't understand what the \"EAX => local_18\" shows",
          "time": null
        },
        {
          "user": "MarianD",
          "text": "I  extended my answer with an illustration and the description.",
          "time": null
        }
      ]
    }
  ]
}