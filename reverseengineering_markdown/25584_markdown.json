{
  "title": "What image format is this?",
  "link": "https://reverseengineering.stackexchange.com/questions/25584/what-image-format-is-this",
  "content": "I am trying to reverse engineer an image file generated by my microscope. It is supposed to be an HDR image. The file has very distinct pattern in HEX editor but I am unable to recognise it:\n\n\nFirst 16 bytes are some sort of a header and then every 4th byte is 0x3C, and sometimes it is 0x3D instead. The file continues with the same pattern until the end and ends with 0x3C as well.\nIs this something very proprietary or do any of you guys recognise it?\n\nEdit: The entire file is available here.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "230",
  "tags": [
    "file-format"
  ],
  "user": "hlex",
  "time": "Nov 5, 2020 at 13:56",
  "comments": [
    {
      "user": "morsisko",
      "text": "Do you have any software that is able to open this file?",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "Those are 4-byte floating point numbers -- small ones, I guess. Is that something you could expect? Post a link to a complete file, so we can take a look.",
      "time": null
    },
    {
      "user": "Ian Cook",
      "text": "Is the image resolution 2048x1536 by any chance ?",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "is there a viewer for the images?",
      "time": null
    },
    {
      "user": "w s",
      "text": "I'd try to interpret is as a raw image by pixels and assume that there is no compression   or image transformation here. The header should include width and height. What is then size of the whole file ? Can you upload an example ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Without more information, as suggesting by the various comments, it's hard to be completely sure but, based on the information available, the format seems to be a very simple uncompressed vendor-specific 'raw' format with no specific identification or 'magic' numbers or tagged structure.\n\nWhat follows is my best guess as to the format.  Having a full file and a picture of the image it is thought to contain would confirm specific details either way.\n\nThe header appears to have the following format -\n\n```\n00000000: 00000800    // width of image (W) = 2048 pixels\n00000004: 00000600    // height of image (H) = 1536 pixels\n00000008: 0000000C    // number of bytes per pixel (B) = 12 bytes\n0000000C: 00006000    // number of bytes per row (T) = W * B, probably rounded up to multiple of 8 or 16 \n\n```\nThe suggested size of 2048x1536 does appear consistent with specifications from several digitail/usb microscopes that are available online.\n\nThe pixel data then follows for each row, with each pixel appearing to be stored as 3x 32-bit IEEE floating-point value (i.e. B = 12 bytes.) These three values being, presumably, R, G & B components in some order.\n\n```\n// 1st row\n00000010: 3C8B50D4 3C8F6AF0 3C8974E5    // 1st pixel = 0.017006, 0.017507, 0.016779\n0000001C: ....\n\n```\nSubsequent rows will appear T bytes beyond the previous row.\n\n```\n// 2nd row (at 0x00000010 + 0x00006000)\n00006010: ....\n\n// 3rd row (at 0x00000010 + 0x00006000 x 2)\n0000C010: ....\n\n// 4th row (at 0x00000010 + 0x00006000 x 3)\n00012010: ....\n\netc...\n\n```\nIf correct, this would suggest your original file is relatively large at around 36MB.\n\n",
      "votes": "7",
      "user": "Ian Cook",
      "time": "Nov 6, 2020 at 21:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "hlex",
          "text": "Absolutely on point! The resolution is exactly correct, and also tie file size. I do have a viewer application to confirm that, but the application is not freely available unfortunately. I will try to write some code now to convert the file to some regular image format in order to figure out the order of R, G and B components. I will edit my question now and include the link to the whole file, in case someone else wants to play with it as well.",
          "time": null
        },
        {
          "user": "Ian Cook",
          "text": "The raw data is is 96 bits per pixel, so unless you use a format that supports this (e.g. Floating-point TIFF) you are going to have to decide how to convert the pixel values to something more widely supported like 24 bits per-pixel.",
          "time": null
        }
      ]
    }
  ]
}