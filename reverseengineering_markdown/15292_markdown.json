{
  "title": "SHL with 0 operand",
  "link": "https://reverseengineering.stackexchange.com/questions/15292/shl-with-0-operand",
  "content": "in the snippet below of x86 assembly code that was produced by Visual Studio 2017, I see the instruction\n\n```\nshl         eax,0\n\n```\nWhat is the purpose of this instruction, as It should act as NOP as I understand it.\n\n```\nint main(int argc, char ** argv){\n011C1340  push        ebp  \n011C1341  mov         ebp,esp  \n011C1343  push        ecx  \n    int a;\n    a = atoi(argv[1]);\n011C1344  mov         eax,4  \n011C1349  shl         eax,0  \n011C134C  mov         ecx,dword ptr [argv]  \n011C134F  mov         edx,dword ptr [ecx+eax]\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "Mellowcandle",
  "time": "May 5, 2017 at 7:34",
  "comments": [],
  "answers_data": [
    {
      "content": "It seems to be an unoptimized version of the array access calculation. When optimization is not enabled, you may see all kinds of redundant/useless calculations which are eliminated with optimization. The compiler probably did something like this:\n\n```\ndelta = elemsize*index\nelemsize = 4, index=1\ndelta = 4*1 -> 4*(1 shl 0) -> 4 shl 0\n\n```\nwhich was then faithfully reproduced by codegen in assembly.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "May 5, 2017 at 8:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}