{
  "title": "\"Debugged application has modified the debugging registers\" with ollydbg 2.01",
  "link": "https://reverseengineering.stackexchange.com/questions/8614/debugged-application-has-modified-the-debugging-registers-with-ollydbg-2-01",
  "content": "I have the following problem. When I open a sample with ollydbg v2.01, then I get that message here:\n\n```\nDebugged application has modified the debugging registers. \nMaybe it called ZwContinue() or SetDebugContext(). \nThe modifications are saved to the log.\n\n```\nWhat does that mean? How can I fix it? I did not change any options such that I use the default configurations. \n\nedit: \nAs I try to describe it in the comments, I can open the same sample in ollydbg v1.10, but not in ollydbg v2.01. I mean, I can open it in v2.01, but it starts at a RETN instruction & process terminated. Now, I have read at http://www.ollydbg.de/version2.html that olly replaces ZwContinue() with the INT3 instruction. I compare the opened sample in v1.10 with the sample in v2.01 and yes, in v1.10 it has a lot of INT3 instructions, but in v2.01 there is INT3.\nAs I also said below, I need v2.01 because of the Debug child process option. \n\nbest regards, \n\n",
  "votes": "7",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ollydbg",
    "debugging",
    "debuggers",
    "anti-debugging"
  ],
  "user": "user3097712",
  "time": "Sep 16, 2016 at 19:40",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "It means your sample is trying to implement some kind of anti-debugging mechanism by changing the processor registers that deal with debugging. To do this in Windows, it could have used the ZwContinue or the SetDebugContext API calls. You might try setting breakpoints on these API functions and check if one of them gets called.",
      "time": null
    },
    {
      "user": "user3097712",
      "text": "Ok, when I close the message, the program starts at a RETN instruction and the process is terminated. To search & set a BP, I click on the disassembler window -> Search for -> All intermodular calls .... it gives a list of intermodular calls in ntdll with only two functions: kernel32.BaseQueryModuleDate and another undefined function (kernel32.7C687074).",
      "time": null
    },
    {
      "user": "user3097712",
      "text": "I also use Search for -> Commands...type \"CALL ZwContinue\". It finds a call to NtContinue, I set a BP at this point/instruction, restart th debug session...but the message appers again. Using that method, ollydbg cannot fintd SetDebugContext.",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "If you don't absolutely need to debug the program from the beginning of its execution, you may want to try to run the program outside of the debugger and then once it's running, attach to its process with OllyDbg. This will allow you to bypass any early anti-debug tricks.",
      "time": null
    },
    {
      "user": "user3097712",
      "text": "No, I wanted to debug it from the beginning...but as I can see, I have no other options. I'll try to attach it. The funny thing is: I can open the same sample in ollydbg v1.10 without getting a such annoying message. But with Ollydbg v2.01, the described problem above appears. I do not know, why. I checked out the options of both and try to figure out if there is a difference between the default settings. I can say that these are nearly the same, except the missing options in ollydbg v1.10, of course. The reason why I try to use ollydbg v2.01 is that I need the debug child process option.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What are the debug registers\n\nThe technical meaning of this warning is simply that Olly noticed the program you're debugging changed the CPU's debug registers. These registers are available to facilitate CPU-enabled debugging. The original use case is speeding up debugging efforts by using these CPU specific features.\n\nThere are some broad advantages for using the debug registers by debuggers in general and for anti-analysis executables in particular.\n\nbullets 2 and 3 might seem the same, but although achieving a similar goal the cause is completely different.\n\nDifference between Ollydbg1 and 2\n\nOlly v2 started using debug registers by default for it's own debugging efforts.\nThis wasn't too common for anti-analysis specific debuggers such as olly previously, which proved quite helpful at the begining and was a decent idea.\nIt's important to note olly1 exposed debug register usage, but it had less of a focus and wasn't the default behavior.\n\nThis can be turned off by un-checking this checkbox:\n\n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Aug 17, 2016 at 8:33",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I have encountered this issue too. In my opinion, it may mean the debuggee applies some anti-debugging measures, BUT it must NOT mean that.\nFor evidence, I've tested it with some PEs that cannot contain any anti debugging measures. I used Olly v2, and in settings I made Olly to stop on System breakpoint when starting/attaching applications. If you know the book Practical Malware Analysis (PMA), I've loaded Labs 20-01, 7-2 (just randomly) and set hardware breakpoints on entry point and some other locations. And I had the same issues - the breakpoints have been modified to zero.\n\n",
      "votes": "1",
      "user": "0xDEADC0DE",
      "time": "Sep 4, 2015 at 16:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "blabb",
          "text": "Data break points are cleared before system break you shiuld look up windbg apply dbp command ro get a n understanding",
          "time": null
        }
      ]
    }
  ]
}