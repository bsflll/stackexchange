{
  "title": "AMD64 compiler optimizations with register manipulations",
  "link": "https://reverseengineering.stackexchange.com/questions/108/amd64-compiler-optimizations-with-register-manipulations",
  "content": "AMD64 (aka x86-64 or x64) registers can be accessed 8, 16, 32 or 64 bits at a time. When reading a disassembly listing, what register operations are not straightforward?\n\nFor example, when an instruction accesses part of a register, how does it affect other parts?\n\nWhat typical instructions or sequences of instructions used by optimizers might encode something that isn't obvious (e.g. xoring a register with itself to set it to zero)?\n\n",
  "votes": "9",
  "answers": 1,
  "views": "185",
  "tags": [
    "disassembly",
    "amd64"
  ],
  "user": "Modoc",
  "time": "Mar 22, 2013 at 21:39",
  "comments": [
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "This question is far too broad. It will lead to a list of anecdotes rather than full answers. It should be far more focused, at the very least restricted to a particular topic and preferably to a particular compiler or platform (e.g. stack manipulations in Visual C++). Because there has already been one answer, I've proposed an edit that focuses on that answer's topic: register manipulations.",
      "time": null
    },
    {
      "user": "Modoc",
      "text": "Thanks for the edit @Gilles. I knew the question was too broad when I asked it but I couldn't rephrase it in a way that still communicated what I wanted.",
      "time": null
    },
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "I hope the question still approaches what you're interested it. I do encourage you to ask a separate question about stack manipulations with VC++, I'd have edited this question to focus on that but I thought it would me more useful to accommodate the existing answer.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Not really an optimization, but one gotcha that you must be aware of when coming from x86 is this:\n\nFor example, the following:\n\n```\nmov eax, 3\n\n```\nIs actually equivalent to:\n\n```\nmov rax, 3\n\n```\nThis also applies to the new registers r8-r15, e.g.:\n\n```\ninc r8d\n\n```\nalso zeroes out the top half of r8.\n\nHowever, the 8-bit and 16-bit portions of registers do not work like that, i.e. operations on them modify only that part of the register.\n\n",
      "votes": "11",
      "user": "Igor Skochinsky",
      "time": "Mar 21, 2013 at 3:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}