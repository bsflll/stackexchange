{
  "title": "Does COT_HELPER have arguments/operands?",
  "link": "https://reverseengineering.stackexchange.com/questions/29386/does-cot-helper-have-arguments-operands",
  "content": "I am trying to learn the hexrays ctree api. I am using the python bindings.\n\nThe task I am trying to automate is tracing the arguments to wrmsr instructions.\n\nI notice that hexrays represents them like this:\n\n```\n__writemsr(*(_DWORD *)SYSTEM_BUFFER, *((_QWORD *)SYSTEM_BUFFER + 1));\n\n```\nUsing Hexrayscodexplorer I figured out that this is a \"helper\" expression:\n\n```\nhelper __writemsr\nea->FFFFFFFFFFFFFFFF\nvoid (__fastcall *)(unsigned int, unsigned __int64)\n\n```\nBy the looks of the decompilation output, I expect I should be able to access the arguments to the \"helper\" (*(_DWORD *)SYSTEM_BUFFER, *((_QWORD *)SYSTEM_BUFFER + 1) in this case) - however the spots where I would look for operands or function arguments for a function call (cot_call) aren't populated.\n\nIs this possible to do?\n\nI have so far tried to look for arguments in:\n\n```\ncexpr_t.x\n\ncexpr_t.y\n\ncexpr_t.a\n\n```\nI'm sure I just don't understand how these helper expressions work in IDA. Unfortunately the function I'm trying to analyze is nested very deeply in a huge function, so it's kind of hard to see how all of the trees work together in the ctrees graph view provided by Hexrayscodexplorer.\n\nAre the arguments held in some other cexpr object? How do I get to them?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "119",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "MrSynAckSter",
  "time": "Oct 9, 2021 at 8:10",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "FYI, the excellent HRDevHelper plugin shows a visual representation of the ctree, which makes it easy to answer questions like these, and more generally to understand Hex-Rays' internal representations of its decompilation listings. I highly recommend installing it and using it often: github.com/patois/HRDevHelper",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The helpers do have arguments just like other function calls, and you get to them the same way.\n\nYou are looking one level too low in the tree. If you look one level up, you'll see the cot_call that ties everything together. At a high level:\n\n```\ncot_call\n   .x: cot_helper\n         .helper: \"__writemsr\"\n         .type: type of the helper (args and their types, return type)\n   .a: carglist_t\n    .a[0]: cexpr_t of arg0\n    .a[1]: cexpr_t of arg1\n\n```\nand in code:\n\n```\nif expr.op == cot_call and expr.x.op == cot_helper and expr.x.helper == \"__writemsr\":\n    # We have a helper \"__writemsr\" call!\n    print(\"helper type: {}\".format(expr.x.type))\n    print(\"arg count: {}\".format(len(expr.a)))\n    print(\"args: {}\".format(\", \".join(arg.opname for arg in expr.a)))\n    \n\n```\n",
      "votes": "1",
      "user": "vmallet",
      "time": "Mar 25, 2022 at 21:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}