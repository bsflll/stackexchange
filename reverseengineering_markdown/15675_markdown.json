{
  "title": "Help reverse engineering Linksys E1200 router firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/15675/help-reverse-engineering-linksys-e1200-router-firmware",
  "content": "I was able to download Linksys E1200 router firmware, which I would like to reverse engineer. I believe it is running some sort of Linux/Unix based firmware and may be running on an ARM CPU. I have run binwalk against it but I'm not sure what to do next.\n\nThis is the output I get:\n\n```\n32            0x20            TRX firmware header, little endian, image size: 7684096 bytes, CRC32: 0xB533F216, flags: 0x0, version: 1, header size: 28 bytes, loader offset: 0x1C, linux kernel offset: 0x14FF20, rootfs offset: 0x0\n60            0x3C            gzip compressed data, maximum compression, has original file name: \"piggy\", from Unix, last modified: 2016-07-13 03:17:53\n1376064       0x14FF40        Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 6307458 bytes, 1721 inodes, blocksize: 65536 bytes, created: 2016-07-13 03:23:19\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "firmware"
  ],
  "user": "John Doe",
  "time": "Jun 26, 2017 at 19:22",
  "comments": [
    {
      "user": "NirIzr",
      "text": "You should be able to dump all data out of the squashfs part of the firmware and then analyze the output as you'd like.",
      "time": null
    },
    {
      "user": "julian",
      "text": "devttys0.com/category/tutorials",
      "time": null
    },
    {
      "user": "Peter Teoh",
      "text": "not sure if it helped, but Linksys router have provided the source code for how the firmware is built.   For your E1200 router the GPL source is available here:   linksys.com/us/support-article?articleNum=114663.   And oh yes, it is definitely linux based, as most router are also built based on Linux, and similarly most router provide source code as part of GPL license requirement.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The next step is extraction of the kernel and squashfs filesystem using the -e option when using binwalk. These extracted files can then be further analyzed. Running binwalk with the -A option on the bootloader and kernel files will provide clues about the instruction set architecture of the firmware. Performing an entropy scan with -E can be done to gain insight into the structure of the extracted files and is useful for identifying compressed or encrypted regions. \n\nA variety of tools exist for the purpose of squashfs filesystem extraction, such as squashfs-tools and sasquatch\n. \n\nA good example of the methodology employed in firmware analysis can be found here: Reverse Engineering Firmware: Linksys WAG120N\n\nUpdate after firmware download link was made available:\n\nTo ensure that binwalk can properly extract SquashFS filesystem images, follow these steps:\n\nAlso check the version of binwalk installed locally:\n\n```\n$ binwalk\n\nBinwalk v2.1.2b\nCraig Heffner, http://www.binwalk.org\n\n```\nCompute md5sum of firmware binary:\n\n```\n$ md5sum FW_E1200v2.0.7.005_US_20160713_code.bin \neb3752a5b72ccb0c9a92079fab88663e  FW_E1200v2.0.7.005_US_20160713_code.bin\n\n```\nRun binwalk signature scan to confirm output:\n\n```\n$ binwalk FW_E1200v2.0.7.005_US_20160713_code.bin \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n32            0x20            TRX firmware header, little endian, image size: 7684096 bytes, CRC32: 0xB533F216, flags: 0x0, version: 1, header size: 28 bytes, loader offset: 0x1C, linux kernel offset: 0x14FF20, rootfs offset: 0x0\n60            0x3C            gzip compressed data, maximum compression, has original file name: \"piggy\", from Unix, last modified: 2016-07-13 03:17:53\n1376064       0x14FF40        Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 6307458 bytes, 1721 inodes, blocksize: 65536 bytes, created: 2016-07-13 03:23:19\n\n```\nOutput appears to match output in the original post.\n\nExtraction:\n\n```\n$ binwalk -e FW_E1200v2.0.7.005_US_20160713_code.bin \n\n```\nFiles are extracted to directory _FW_E1200v2.0.7.005_US_20160713_code.bin.extracted/:\n\n```\n$ file *\n14FF40.squashfs: data\npiggy:           FoxPro FPT, blocks size 0, next free block index 15993608\nsquashfs-root:   directory \n\n```\nInside squashfs-root is the extracted filesystem:\n\n```\n$ ll squashfs-root/\ntotal 88\ndrwxrwxrwx 13 user01 user01  4096 Jul 12  2016 ./\ndrwxr-xr-x  3 user01 user01  4096 Jun 26 15:16 ../\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 bin/\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 dev/\ndrwxrwxrwx  4 user01 user01  4096 Jul 12  2016 etc/\ndrwxr-xr-x  3 user01 user01  4096 Jul 12  2016 lib/\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 mnt/\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 proc/\ndrwxr-xr-x  2 user01 user01 12288 Jul 12  2016 sbin/\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 sys/\ndrwxr-xr-x  2 user01 user01  4096 Jul 12  2016 tmp/\ndrwxrwxrwx  6 user01 user01  4096 Jul 12  2016 usr/\nlrwxrwxrwx  1 user01 user01     7 Jun 26 15:16 var -> tmp/var\ndrwxr-xr-x 32 user01 user01 28672 Jul 12  2016 www/\n\n```\nRunning file against piggy produces a false positive:\n\n```\npiggy:           FoxPro FPT, blocks size 0, next free block index 15993608\n\n```\nRunning binwalk against piggy suggests that it contains Linux kernel code:\n\n```\n$ binwalk piggy \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n2617344       0x27F000        Linux kernel version \"2.6.22 (zhang@sw3) (gcc version 4.2.3) #5 Tue Jun 7 18:33:13 HKT 2016\"\n2641040       0x284C90        CRC32 polynomial table, little endian\n2656556       0x28892C        CRC32 polynomial table, little endian\n2852300       0x2B85CC        Unix path: /usr/gnemul/riscos/\n2854956       0x2B902C        Unix path: /usr/lib/libc.so.1\n2927975       0x2CAD67        Neighborly text, \"NeighborSolicitsts\"\n2927999       0x2CAD7F        Neighborly text, \"NeighborAdvertisementsmp6OutDestUnreachs\"\n2928200       0x2CAE48        Neighborly text, \"NeighborSolicitsirects\"\n2928228       0x2CAE64        Neighborly text, \"NeighborAdvertisementssponses\"\n2930275       0x2CB663        Neighborly text, \"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)\"\n\n```\nAn entropy plot produced by binwalk -EJ piggy reveals a large contiguous area with an entropy of roughly .68: \n\n\n\nThis level of entropy is consistent with what is expected of regions containing object code.\n\nWe can make an educated guess about what the instruction set architecture of the binary is by running binwalk with the -A argument:\n\n```\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n1788          0x6FC           MIPSEL instructions, function epilogue\n2636          0xA4C           MIPSEL instructions, function epilogue\n4540          0x11BC          MIPSEL instructions, function epilogue\n4932          0x1344          MIPSEL instructions, function epilogue\n6092          0x17CC          MIPSEL instructions, function epilogue\n6476          0x194C          MIPSEL instructions, function epilogue\n6952          0x1B28          MIPSEL instructions, function epilogue\n7040          0x1B80          MIPSEL instructions, function epilogue\n8024          0x1F58          MIPSEL instructions, function epilogue\n8392          0x20C8          MIPSEL instructions, function epilogue\n9532          0x253C          MIPSEL instructions, function epilogue\n9840          0x2670          MIPSEL instructions, function epilogue\n12552         0x3108          MIPSEL instructions, function epilogue\n12682         0x318A          MIPS instructions, function epilogue\n12836         0x3224          MIPSEL instructions, function epilogue\n13364         0x3434          MIPSEL instructions, function epilogue\n\n```\nThe ISA is likely MIPS little-endian.\n\n",
      "votes": "1",
      "user": "julian",
      "time": "Jun 26, 2017 at 20:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "John Doe",
          "text": "I ran binwalk -e (with sasquatch installed) and it created a directory. I entered into the directory and got two two files called 14FF40.squashfs and piggy. What should I do from here? I opened the 14FF40.squashfs file in nano and it started with shsq ^F^@^@^@^@^@^@^@^@^@^@^@^@^@^E^@^@^@^@^@^@^@^@^C^@^@^@].",
          "time": null
        },
        {
          "user": "John Doe",
          "text": "I edited the 14FF30.squashfs file to start with sqsh instead of shsq and I got this output when I ran file against it. 14FF40.squashfs: Squashfs filesystem, big endian, version 768.0, -5438845162455356928 bytes, -1190789120 inodes, blocksize: 0 bytes, created: Wed Dec 31 19:00:00 1969",
          "time": null
        },
        {
          "user": "julian",
          "text": "@JohnDoe try running sasquatch against it. This should extract the filesystem into a directory called squashfs-root",
          "time": null
        },
        {
          "user": "John Doe",
          "text": "Should I change the s14FF40.squashfs file beck to shsq or should I leave it with the change?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@JohnDoe I doubt it matters. You should try both just to see what happens. If you have further issues, share the firmware file and take a look at this: Extracting Non-Standard SquashFS Images and Mucking About With SquashFS",
          "time": null
        }
      ]
    }
  ]
}