{
  "title": "Help to understand some assembly code",
  "link": "https://reverseengineering.stackexchange.com/questions/14635/help-to-understand-some-assembly-code",
  "content": "I am currently working on a old 90's video game to try to correct/modify unrealistic behaviors. \n\nI managed to almost complete my list, but it remains my main objective...\n\nIt is a management game, and if you are a poor manager, your boss simply fire you, sometimes for debatable reasons. I found where the \"You are fired\" pannel is launched, but I have some difficulties to understand the mecanism. Could someone help me to understand the below code?\n\nNote that according to IDA it is a 16 bits application.\n\n```\n    mov     eax, dword_5F94E0  // copy the content of dword in eax\n    mov     ecx, eax // copy eax in ecx\n    lea     edx, [eax+eax*4] // ??\n    lea     eax, [edx+edx*8] // ??\n    shl     eax, 8 // ??\n    add     eax, ecx // add ecx to eax\n    lea     edx, [eax+eax*2] // ??\n    mov     eax, dword_9FB922[ecx+edx*2] // ??\n    lea     ecx, dword_9ECB20[ecx+edx*2] // ??\n    sub     eax, 2C5h // remove 709 from eax\n    cmp     eax, 0Dh // compare eax to 13\n    ja      short loc_42D480 // jump if eax > 13 (not fired) else fired\n\n```\nI know there is the easy way to change the behavior of the last line.But it seems it is more complicated: doing so only prevent the \"You are fired\" panel to be displayed, but you are still sacked.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "666",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "enrico69",
  "time": "Feb 12, 2017 at 14:18",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "\"Note that it seems it is a 16 bits application.\" and uses 32-bit registers?",
      "time": null
    },
    {
      "user": "enrico69",
      "text": "Yes. I said \"it seems\" because IDA Pro said that. On the other hand, when I looked at the assembly documentation, I saw it refers to 32 bits registers. I don't have the skills to understand. May be it simply comes from IDA.",
      "time": null
    },
    {
      "user": "Willem Hengeveld",
      "text": "instructions like \"lea edx, [eax+eax*4\"   are often used to do multiplications:   edx := eax * 5",
      "time": null
    },
    {
      "user": "Willem Hengeveld",
      "text": "if i calculate it correctly,  the \"mov eax, dword_9FB922[ecx+edx*2]\"  becomes:  eax := dword_9FB922[69127 * dword_5F94E0] ... which as aGGeRReS remarks, a bit odd, since there is no factor of '4' in the index.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Without taking into account 16/32bit problem you already mentioned I'll try to explain what the code does (if this is what you exactly asked for):\n\nI recommend to review the data in all that dword_* variables. Hope this helped you.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Feb 13, 2017 at 12:17",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "```\nmov     eax, dword_5F94E0  // copy the content of dword in eax\nmov     ecx, eax // copy eax in ecx\nlea     edx, [eax+eax*4] // ??\n\n```\nedx=eax*5\n\n```\nlea     eax, [edx+edx*8] // ??\n\n```\neax=edx*9, i.e. the dword_5F94E0*5*9\n\n```\nshl     eax, 8 // ??\n\n```\neax=eax*256, i.e. the dword_5F94E0*5*9*256\n\n```\nadd     eax, ecx // add ecx to eax\n\n```\neax=new eax+dword_5F94E0, i.e. the dword_5F94E0*5*9*256+dword_5F94E0\n\ni.e. dword_5F94E0*11521\n\n```\nlea     edx, [eax+eax*2] // ??\n\n```\nedx=eax*3, i.e. dword_5F94E0*11521*3\n\n```\nmov     eax, dword_9FB922[ecx+edx*2] // ??\n\n```\neax=value from array[dword_5F94E0+dword_5F94E0*11521*3*2]\n\ni.e. eax=value from array[dword_5F94E0*69127]\n\n```\nlea     ecx, dword_9ECB20[ecx+edx*2] // ??\n\n```\nirrelevant for this purpose\n\n```\nsub     eax, 2C5h // remove 709 from eax\ncmp     eax, 0Dh // compare eax to 13\nja      short loc_42D480 // jump if eax > 13 (not fired) else fired\n\n```\nSo that's a really large array that is being queried to fetch a small value.\n\nHowever, the most interesting part would be to look in that array to see which indices match the value of 0x2C5+0x0D, since they trigger the \"fired\" code path.\n\nGiven those, you can work out what value in dword_5F94E0 would access each of those indices, by dividing the index by 69127.\n\nFrom there, you can search the rest of the code for writes to dword_5F94E0 with those values.  Then you will have the events that are interesting.\n\nAt that point, you can presumably change the event value to something that won't trigger the \"fired\" code path.\n\n",
      "votes": "1",
      "user": "peter ferrie",
      "time": "Feb 18, 2017 at 6:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}