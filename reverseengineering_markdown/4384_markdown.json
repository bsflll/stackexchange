{
  "title": "Windbg 'as' command in log breakpoint",
  "link": "https://reverseengineering.stackexchange.com/questions/4384/windbg-as-command-in-log-breakpoint",
  "content": "I want to break the debugee as it opens a known file, using windbg. As $scmp doesn't accept direct address, I have to use as (windbg alias command). So, I put a conditional breakpoint at CreateFileA:\n\n```\nbu Kernel32!CreateFileA \"as /ma ${/v:fName} poi(esp+4);.echo ${fName};...;g\"\n\n```\nIt always prints the same (first) file name. I also tried script files\n\n```\nbu ... \"$>< bpCmd\"\nbu ... \"$$>< bpCmd\"\n\n```\nbpCmd content:\n\n```\nas /ma ${/v:fName} poi(esp+4);\n.echo ${fName};\n...\ng;\n\n```\nIt didn't work as well.\n\nSo, why as doesn't work in log breakpoints?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "954",
  "tags": [
    "windbg"
  ],
  "user": "sealed...",
  "time": "May 20, 2014 at 13:37",
  "comments": [],
  "answers_data": [
    {
      "content": "The alias needs to be evaluated everytime the break point is hit\nelse it will print the old alias only\nto force alias evaluation` enclose the  .echo and other commands inside a .block{} \n\n```\ncrefil:\\>dir /b\nCreateFile.cpp    \ncrefil:\\>type CreateFile.cpp\n#include <stdio.h>\n#include <windows.h>\nint main (void)\n{\n    PWIN32_FIND_DATA lpFindFileData = \n            (PWIN32_FIND_DATA) calloc(1 , sizeof( WIN32_FIND_DATA));\n    FILE *fp;\n    errno_t err;\n    if (lpFindFileData)\n    {\n        HANDLE hFind = FindFirstFile(\"*.*\",lpFindFileData);\n        if ( hFind != INVALID_HANDLE_VALUE )\n        {\n            do\n            {\n                printf(\"%s  \n\",lpFindFileData->cFileName);\n                if ( (err = fopen_s(&fp,lpFindFileData->cFileName,\"rb\") ) == 0 )\n\n                    if (fp)\n                        fclose(fp);\n            }while( ( FindNextFile(hFind,lpFindFileData) ) != FALSE );\n            FindClose(hFind);\n            free(lpFindFileData);\n        }\n    }\n    return 0;\n}\n\n```\nas in windbg conditional breakpoint    \n\ncrefil:>cdb -c \"bp kernel32!CreateFileA \\\"as /ma ${/v:fname} poi(@esp+4);.block\n { .echo fname };gc\\\";g;q\" CreateFile.exe\n\n```\n0:000> cdb: Reading initial command 'bp kernel32!CreateFileA \"as /ma ${/v:fname}\n poi(@esp+4);.block { .echo fname };gc\";g;q'\n.\n..\nCreateFile.cpp\nCreateFile.exe\nCreateFile.obj\nCreateFile.pdb\n vc100.pdb\nquit:\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "May 20, 2014 at 19:57",
      "is_accepted": true,
      "comments": []
    }
  ]
}