{
  "title": "Is it possible to access the higher part of the 32-bit and 64-bit registers? If so, which ones?",
  "link": "https://reverseengineering.stackexchange.com/questions/18735/is-it-possible-to-access-the-higher-part-of-the-32-bit-and-64-bit-registers-if",
  "content": "I don't know whether this is a silly question, but I couldn't find any answer.\n\nWith the evolution of CPU architecture, register size was extended, from 8, to 16, 32, and eventually 64-bit. I was wondering whether there was any way to access the higher part of the registers.\n\nHere's an example regarding the rax 64-bit register and its subsequent divisions:\n\n```\n6                              3               1 \n4                              2               6       8       1\n+------------------------------+---------------+-------+-------+\n|                             rax                              |\n+------------------------------+---------------+-------+-------+\n            (???)              |              eax              |\n                               +---------------+-------+-------+\n                                     (???)     |       ax      |\n                                               +-------+-------+\n                                               |  ah   |   al  |\n                                               +-------+-------+\n\n```\nOne can easily access the higher and lower part of ax by referencing to ah and al respectively. But I couldn't find any reference for the rax and eax higher parts. (Denoted with (???))\n\nNote: I am talking about direct access to these bytes, I am not asking for a sequence of instructions that could retrieve them.\n\n",
  "votes": "19",
  "answers": 3,
  "views": "16k",
  "tags": [
    "assembly",
    "x86",
    "register",
    "x86-64"
  ],
  "user": "Yuriko",
  "time": "Sep 28, 2018 at 19:42",
  "comments": [
    {
      "user": "phuclv",
      "text": "cross-site duplicate: Why is there not a register that contains the higher bytes of EAX?, Why didn't Intel made the high order part of their CPUs' registers available?, Why aren't the higher 16-bits in EAX accessible by name (like AX, AH and AL)?",
      "time": null
    },
    {
      "user": "Chris Stratton",
      "text": "This is blatantly off topic, since it's a fundamentally question about an architecture, rather than something having anything do do with reverse engineering.",
      "time": null
    },
    {
      "user": "Yuriko",
      "text": "@ChrisStratton : Thank you for your input; I understand your point. Feel free to raise the matter on meta as it is a valid concern on your part. Personally, I believe Reverse Engineering (RE) encompasses (and applies to) several fields. No doubt this question could have had more ground on another SE site, in the same way Assembly-related questions could be redirected to StackOverflow, software-related questions could be redirected to SuperUser, etc. Understanding how softwares, languages, and architectures work is arguably part of the RE learning process.",
      "time": null
    },
    {
      "user": "Peter Cordes",
      "text": "This question could (should) be migrated to SO and closed as a duplicate.  There's lots of stuff you have to learn as a foundation for learning reverse engineering, but that doesn't mean all of it is reverse engineering or belongs on this site.  I don't think it's a good idea to split up the asm / cpu-architecture questions across multiple sites except for ones that specifically are only about reverse engineering; it makes it harder to find related questions, not easier, when generic ISA-design questions are split between here and SO.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is impossible to access the higher parts of the EAX and RAX registers, or of any other 32 and 64-bit registers, directly. You'll have to use indirect instruction sequences if you're interested in doing that. This is because there are no encodings to access those parts in any instruction.\n\nAs noted by @nordwald in the comments below, it is simply defined so in the manuals. To get a more detailed official answer, we would need to ask members of the specification definition. We can safely assume the core reason is that the cost of providing access to all available register fractions exceeds the benefit.\n\nI will try listing a few possible reasons for why the cost exceeds the benefit now but didn't in the past:\n\nObviously, some reasons can carry more weight than others, some may be unrelated to the original decision, some original reasons may be missing here, etc. Those are merely educated guesses and YMMV\n\n",
      "votes": "19",
      "user": "NirIzr",
      "time": "Jul 10, 2018 at 6:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nordwald",
          "text": "As for the first part, it is simply specified in the Intel Instruction Manual, section 3.4.1 \"General Purpose Registers\". I think points 1 and 2 sum up the problem quiet well.",
          "time": null
        },
        {
          "user": "Yuriko",
          "text": "Thank you. I believe your answer, along with Nordwald's comment, hits the nail on the head. I will wait one or two days before accepting an answer, in case anyone has another explanation.",
          "time": null
        },
        {
          "user": "Chris Stratton",
          "text": "Even given the OP's goals, it's still somewhat misleading to claim that it is impossible \"access\" these.  Of course it is possible; just use a bit shift instruction.  What there isn't is a pseudo-register which specifically codes for the higher part as a unique operand.",
          "time": null
        },
        {
          "user": "Peter Cordes",
          "text": "Not all x86 CPUs rename partial registers separately from the full registers.  Only Intel P6-family and Sandybridge-family do so, not AMD, not Intel P4, not Silvermont / Knight's Landing.  See Why doesn't GCC use partial registers? for a rundown on what different uarches do.  (Haswell and later don't even rename AL or AX separately from RAX, only AH/BH/CH/DH).  When a reg isn't renamed separately, writing it is a read-modify-write of the full register.  (Potentially creating false dependencies rather than later merging costs.)",
          "time": null
        },
        {
          "user": "Yuriko",
          "text": "I accepted this answer as it seemed to make more sense to me, even though MSalters' answer is interesting and have more upvotes at the moment.",
          "time": null
        }
      ]
    },
    {
      "content": "It's the wrong question, really. AH is the exception. \n\nNow the real question is, why is AH such an exception? It's an old register, from the 8086 era. It exists to facilitate moving over code from the 8080. \n\nThe 8080 has different registers from the 8086, so you can't move over code directly. In particular, it didn't have an AL,AH or AX register. It did have an 8 bits A accumulator and an 8 bits F flag register, which combined to form a 16 bits AF register. \n\nThe 8086 kept a 16 bits accumulator, but moved the flags to its own register. However, there is still a vestigial remnant. LAHF loads AH from the lower 8 bits of F, leaving the lower 8 bits in AL untouched. This instruction simplifies the porting of 8080 code to the 8086. And yes, that support for the 8080 is still present in a Core i9 in 2018.\n\n",
      "votes": "20",
      "user": "MSalters",
      "time": "Jul 9, 2018 at 13:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "Yuriko",
          "text": "Thank you for your answer. I figured out the answer was probably no, and that ah was the exception for historical reason. Your answer states it clearly, and gives sense to what seemed to have been an odd decision.",
          "time": null
        }
      ]
    },
    {
      "content": "Update: Thanks to Nirlzr, I see I missed the emphasized point at the bottom of the post. This answer, though not what OP is looking for, may serve useful for anyone down the road who is looking for a way to access those bits. Apologies for missing OPs full intention!\n\nI actually wrote an in-depth article on this topic a couple of years ago: Accessing and Modifying Upper Bits in x86 and x64 Registers\n\nSo while there aren't any direct instructions to specifically access the upper half of a 32- or 64-bit register, you can get to that data by using shift and rotate instructions (of which your choice of use mostly depends on if you care about maintaining the integrity of the bits in the lower-half of the registers).\n\nI would piecemeal the post here for a more fleshed-out-looking answer, but it's best to just read the post as is, which has a very intentional flow that includes copious examples.\n\n",
      "votes": "6",
      "user": "dsasmblr",
      "time": "Jul 9, 2018 at 14:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "A nice and thorough article, thanks! but note OP specifically mentioned that is not what he's looking for at the bottom of the question.",
          "time": null
        },
        {
          "user": "dsasmblr",
          "text": "Oops. You're right. I totally glossed over that for some reason, lol. Well, for anyone who might later find this thread looking for how to access those bits, perhaps this will find purpose. =)",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Yep, no harm done if you ask me :)",
          "time": null
        },
        {
          "user": "Yuriko",
          "text": "@dsasmblr: indeed, I wanted a focus on direct accessing. However, your answer still complements others. I will read your article later. Thank you for your input!",
          "time": null
        },
        {
          "user": "Serge",
          "text": "shrd insn allows access without modifying the source register. btw, the link in your answer is broken",
          "time": null
        }
      ]
    }
  ]
}