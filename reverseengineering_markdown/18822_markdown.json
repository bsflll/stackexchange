{
  "title": "Could someone explain how this ARM instructions works compared to the actual Objective-C code?",
  "link": "https://reverseengineering.stackexchange.com/questions/18822/could-someone-explain-how-this-arm-instructions-works-compared-to-the-actual-obj",
  "content": "I'm trying to understands how it works by decompiling my own Objective-C code. Here's the decompiled instruction:\n\n```\nvar_8= -8\nvar_4= -4\n\nSUB             SP, SP, #8\nMOVS            R2, #1\nSTR             R0, [SP,#8+var_4]\nSTR             R1, [SP,#8+var_8]\nMOV             R0, R2\nADD             SP, SP, #8\nBX              LR\n\n```\nFrom my understanding (correct me if I'm wrong), by line:\n\n```\nSP=SP-8\nMove 1 to R2\nStore R0 into SP+8+var_4\nStore R1 into SP+8+var_8\nMove R2 into R0\nSP=SP+8\nNext Function\n\n```\nAnd the actual code:\n\n```\n%hook SomeClass\n- (int)somemethod {\nreturn 1;\n}\n%end\n\n```\nNow I don't understand why it needs STR R0, [SP,#8+var_4] and STR R1, [SP,#8+var_8] for, as I can't see it purposes. And if I were to return 0, a simple change to of MOVS R2, #1 to MOVS R2, #0 would do, wouldn't it? But that didn't works.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "221",
  "tags": [
    "disassembly",
    "arm"
  ],
  "user": "Gregor Isack",
  "time": "Jul 17, 2018 at 12:06",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "possible dupe: reverseengineering.stackexchange.com/questions/4532/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Objective C methods are not called directly, but via a piece of trampoline code in the ObjC's runtime \"objc_msgSend\" function, which in turn calls a regular C function implementing the ObjC method.\n\nIn addition to the method parameters, the C function is passed two additional parameters in the first two parameter slows, which are R0 and R1 on ARM (see this description):\n\nInside an instance method, self refers to the receiver (object) of the message that invoked the method, while in a class method self will indicate which class is calling.\n\nThis points to the selector being sent, in your case this should point to a string \"somemethod\" (or a struct containing this string, not sure about the current ARM implementation).\n\n",
      "votes": "2",
      "user": null,
      "time": "Jul 17, 2018 at 17:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "Gregor Isack",
          "text": "Thanks for the answer. But which line of the offset should I modify to make it return 0? Modifying MOVS R2, #1 to MOVS R2, #0 still return 1 for me.",
          "time": null
        },
        {
          "user": "mailwl",
          "text": "Probably you patch wrong binary. iOS usually has fat binaries (e.g. one 32-bit ARMv7 and another for 64 bit ARMv8). New devices has 64-bit processors, so if you has this, you need patch 64-bit ARMv8 binary (in the example code for 32-bit)",
          "time": null
        },
        {
          "user": "Gregor Isack",
          "text": "@mailwl I'm patching a .dylib though, there's only one file.",
          "time": null
        },
        {
          "user": "Gregor Isack",
          "text": "@mailwl you're right. I patched the wrong binary. A simple file myfile.dylib revealed it has two archs. Now it seems to working fine. Thanks for the head-ups :)",
          "time": null
        }
      ]
    }
  ]
}