{
  "title": "How to call to function while debug",
  "link": "https://reverseengineering.stackexchange.com/questions/25393/how-to-call-to-function-while-debug",
  "content": "When I debugging remote process with gdb-server and Ida, and put breakpoint in the code, when the process stopped at this breakpoint how can  I call to function and after that return to my code ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "548",
  "tags": [
    "ida",
    "gdb"
  ],
  "user": "Gdb",
  "time": "Jun 25, 2020 at 18:07",
  "comments": [],
  "answers_data": [
    {
      "content": "In IDA, you can use the Appcall feature\n\nIn GDB, you can use print or call commands: https://sourceware.org/gdb/onlinedocs/gdb/Calling.html\n\n(this works only when using the actual gdb program)\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Jun 26, 2020 at 8:11",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In Assembly there are no real self-contained functions (as in programming languages like c++) anymore. Especially the concept of local variables and parameters is not really there. Instead, everything is stored in registers or on the stack. Now assuming that there is a way to call a function (I'll get to it later on how that would be possible) you would risk overwriting registers that are used by something else. Doing so will cause data corruption and you risk that the program produces unexpected results. Also arguments are stored in a specific register or on the stack, so you might need to modify those.\n\nNow when you identified the function and pre-loaded all the registers and prepared the stack all you need to do is change the instruction pointer to the function you want to run, execute it and set the instruction pointer back when you're done with it.\n\n",
      "votes": "0",
      "user": "Richi",
      "time": "Jun 26, 2020 at 1:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}