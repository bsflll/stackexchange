{
  "title": "IDA 7.0 - combine sequence of assembly instructions to a macro",
  "link": "https://reverseengineering.stackexchange.com/questions/19831/ida-7-0-combine-sequence-of-assembly-instructions-to-a-macro",
  "content": "I'm solving this CTF with IDA Pro 7.0.\n\nAt some point there is an offset calculation by index, it simply multiply an index by 48 and write/read some data to it.\n\nThe main problems are:\n\nSo my question is: is there a way in IDA to combine these sequence of instructions to a single macro?\n\n\n\nThanks!\n\n",
  "votes": "3",
  "answers": 1,
  "views": "751",
  "tags": [
    "ida",
    "idapython",
    "x86-64",
    "ida-plugin"
  ],
  "user": "reida",
  "time": "Nov 7, 2018 at 20:58",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "IDA can hide code (View menu) and this can be done via IDC and consequently also via IDAPython. So what you could do is to list all instructions referencing your secret_list, check that it's a lea and that the subsequent instructions match your expectation and simply hide the address range and provide a meaningful alternative string on that hidden area (I typically use the ; comment style for these things as it's most explicit). In the past I have, for example, postprocessed some binaries which had lots of assertions with debug output to compress these to one line.",
      "time": null
    },
    {
      "user": "joxeankoret",
      "text": "No, there is no way. I wish. I had asked myself for the same (but for the decompiler) various times.",
      "time": null
    },
    {
      "user": "reida",
      "text": "@0xC0000022L - Thanks, after some research, the function add_hidden_range(0x10AF, 0x10C9, \"calc_offset\" ,0 , -1) did the trick. now it's just a matter of coding an IDAPython script to automatically search for all sequence of bytes of a specific macro, and replace them all ;)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Okay, to formalize this (and since I have some time now to type up an actual answer).\n\nThe add_hidden_range() IDC function and the SDK function of the same name (bytes.hpp) can be used for the purpose. (However, I am almost sure there was another function I used at the time.)\n\nupdate_hidden_range() may also be of interest (see link above).\n\nWhen I used this some years ago to write an IDC script (IDAPython didn't ship with IDA at the time), I used this to hide the code for some repetitive debug print and assertion functionality in some (checked) Windows binaries I was looking at. For this I used gray color and replaced the whole hidden range with an assembly-style comment (; prefix). The comment would then contain pseudocode of the debug print or assertion it was hiding. This helped a lot in making the disassembly a lot cleaner for reading.\n\nThe biggest challenge other than finding the functionality and the IDC function exposing it initially, was to look for the opcodes surrounding the xref locations of the known functions calls and make sure I wasn't hiding some interspersed opcodes. So essentially I made sure that the script would verbosely output whenever it hit an instance where unexpected opcodes where interspersed with the expected opcodes, showing the EA, and could then double click on that in the log pane to review those (in my case rare) instances manually.\n\nOther instances where this technique proved useful were well-known inlined functions (think memmove, memcpy and friends). The patterns repeat and by hiding the opcodes and replacing them with meaningful pseudocode you can speed up reading your disassembly considerably (even without a decompiler plugin).\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Nov 7, 2018 at 21:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "Can you add/provide any pre-written script as example?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@Biswapriyo tough, the one I mentioned in my answer I don't have the rights to (did that for work) and besides I'd need the binary (anything else is like programming in thin air). I'll try to think of something that resembles what is needed.",
          "time": null
        }
      ]
    }
  ]
}