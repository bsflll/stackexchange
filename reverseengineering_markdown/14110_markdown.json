{
  "title": "IDA Pro addresses of arguments",
  "link": "https://reverseengineering.stackexchange.com/questions/14110/ida-pro-addresses-of-arguments",
  "content": "I am a newbie in reverse engineering and I was trying to understand this blog post:\n\nhttp://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html\n\nAt one point, the author says the following when looking at the arguments of a function he wants to run using symbolic execution:\n\nLet's zoom into and find out more about the function sub_401084. It takes three arguments, namely (1) address to a buffer of bytes at 0x4010E4, which is presumbly the reference key for verification, (2) address to a user input buffer at 0x402159, and (3) the length of the user password supplied to the program. \n\nMy question is, how does he figure out the addresses of the 3 arguments? In IDA pro you just have the stack view with the offsets with respect to EBP. I have tried to do this calculation but I don't get his values. Can anyone tell me how I should reason? Thank you!\n\n",
  "votes": "3",
  "answers": 1,
  "views": "609",
  "tags": [
    "ida",
    "disassemblers"
  ],
  "user": "Simus",
  "time": "Dec 4, 2016 at 12:55",
  "comments": [],
  "answers_data": [
    {
      "content": "He probably didn't : the executable is packed, ASLR is disabled and relocations are stripped. Which means the two address arguments 0x4010E4 and 0x402159 are fixed.\n\n\n\nThere are major consequences since :\n\n\n\nIn the general case (ASLR + reloc), it's much more complicated. There is a great SO/RE question about extractin functions args in Idapython which then must be glued with angr Memory states in order to work properly.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}