{
  "title": "Function Prologue, add esp directive",
  "link": "https://reverseengineering.stackexchange.com/questions/23481/function-prologue-add-esp-directive",
  "content": "I need to see how a DLL was written and I am using a x32dbg to do it at run-time. I am a newbie to this reversing stuff, so I am confused with this piece of code:\n\n```\npush    ebp                          ; DllMain entry point\nmov     ebp, esp\nadd     esp, FFFFFFBC\nxor     eax, eax\nmov     dword ptr ss:[ebp-44], eax\nmov     eax, module.8BC3980\ncall    module.8BB8D54\nxor     eax, eax\n\n```\nWikipedia says the following about function prologues:\n\nBut I have encountered an add esp, N directive which adds a huge number to esp register. It seems something is wrong here, what should I understand from the code exactly?\n\nAnd the second question is about mov dword ptr ss:[ebp-44], eax directive. Why it is 44 that is subtracted from ebp address (11 ints!) and what does the ss item here?\n\nPS I suspect that the DLL is written in Delphi, but not 100% sure.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "292",
  "tags": [
    "dll",
    "x64dbg",
    "delphi"
  ],
  "user": "StaticZero",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "adding FFFFFFBC is equal to subtracting 68 as the value will wrap around. FFFFFFBC + 0x44 = 0 when we are dealing with dwords.",
      "time": null
    },
    {
      "user": "StaticZero",
      "text": "So stack was enlarged to contain 11 dwords (ints), then eax = 0, then this zero is written to the top of the stack entirely as dword, right?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The large integer that is added to ESP is negative and is used to move the stack pointer to a an address that allows 0x44 bytes on the stack for the current function.\n\nAt this point, ESP=EBP-0x44. So, EBP-0x44 is essentially, [ESP].\nIt is equivalent to PUSH EAX, as a parameter for the CALL that comes next.\n\nThe ss: is a selector which indicates that the \"base\" of the mentioned address is on the stack.\nIn a linear memory system it has no practical meaning.\n\n",
      "votes": "4",
      "user": "Yotamz",
      "time": "Mar 21, 2020 at 17:26",
      "is_accepted": true,
      "comments": [
        {
          "user": "StaticZero",
          "text": "So eax=0 is pushed onto the stack, then 8BC3980 is loaded into eax and finally the call?",
          "time": null
        },
        {
          "user": "Yotamz",
          "text": "Yes. Different compilers sometimes produce different or unusual calling conventions. EAX cannot be expected to stay the same after a call but your function does put a value in EAX before the call, therefore we can assume that EAX is one argument and the value on the stack is another one. Delphi may very well generate this unusual convention.",
          "time": null
        }
      ]
    },
    {
      "content": "you should normally take a pencil and paper and try solving it \n\nill use python here\n\n```\n>>> ebp = 0x1000\n>>> esp = ebp\n>>> esp = ( esp + 0xffffffbc )& 0xffffffff\n>>> print(hex(esp),hex(ebp-0x44))\n0xfbc 0xfbc\n>>>\n\n```\nIt will write 0 to the Address 0xfbc if ebp were 0x1000 to start with \n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Mar 21, 2020 at 9:43",
      "is_accepted": false,
      "comments": []
    }
  ]
}