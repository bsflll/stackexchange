{
  "title": "Can a Data Type Span Multiple Virtual Pages? (Windows)",
  "link": "https://reverseengineering.stackexchange.com/questions/16804/can-a-data-type-span-multiple-virtual-pages-windows",
  "content": "Can a multi-byte primitive data type (ie int, double, float, etc) span multiple virtual pages on Windows?\n\nex) The first 4-bytes of a double on a virtual page, and the next 4-bytes of a double on the next virtual page. Is this possible*?\n\nWhat about structs? Arrays?\n\n*I presume it is technically possible to just cast the address of the last 4-bytes of arbitrary memory in a virtual page to a double pointer, as long as there is another virtual page that follows -- but I'm more curious if this can happen naturally in a compiled/interpreted program.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "113",
  "tags": [
    "windows",
    "compilers",
    "virtual-memory"
  ],
  "user": "Zachary Canann",
  "time": "Nov 21, 2017 at 0:44",
  "comments": [
    {
      "user": "yaspr",
      "text": "The remarks section: msdn.microsoft.com/fr-fr/library/windows/desktop/â€¦",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "It's not hard to imagine a single struct spanning more than a single memory page, and even more so for arrays. So I'd say the answer is \"well yes why not\".",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I don't see why not.\n\nFor instance, if I'm mapping a binary file into memory, I may configure its structure as such:\n\n```\n//Visual Studio code\n\n#pragma pack(push,1)\nstruct STRUCT1{\n    char dummy[0x1000 - 4];\n    double fDouble;\n};\n#pragma pack(pop)\n\nstruct STRUCT2{\n    STRUCT1 __declspec(align(0x1000)) s1;\n};\n\n\nint main()\n{\n    STRUCT2 s2 = {0};\n    s2.s1.fDouble = -123.124;\n\n    //This construct is just to give you the direct pointer\n    double* pD = (double*)((BYTE*)&s2 + offsetof(STRUCT2, s1.fDouble));\n    double fDVal = *pD;\n\n}\n\n```\nThen if we break with a debugger on the last line and check the value of pD (that is in the RAX register in this screenshot):\n\n\n\n\n\nYou will see that the double variable is straddling the page boundary (marked in red):\n\n\n\nThis is far from ideal from the efficiency standpoint (due to those SSE2 instructions not \"liking\" being unaligned) but it is quite possible.\n\n",
      "votes": "1",
      "user": "c00000fd",
      "time": "Apr 25, 2019 at 1:45",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "While it can happen as a result of hand-coded code, it is unlikely in practice to occur as a result of compiled code.  Compilers generally align data appropriately such that a 4-bytes value will begin on a 4-bytes-aligned address, 8-bytes at 8-bytes, etc, to avoid alignment exceptions.\n\n",
      "votes": "1",
      "user": "peter ferrie",
      "time": "Nov 24, 2017 at 23:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}