{
  "title": "Reverse Engineering Linux Core Dump",
  "link": "https://reverseengineering.stackexchange.com/questions/19918/reverse-engineering-linux-core-dump",
  "content": "I have a Linux Core Dump file for a binary (which apparently crashed during execution)\n\nfile command on the core dump:\n\n```\ncore.123: ELF 64-bit LSB  core file x86-64, version 1 (SYSV), SVR4-style, from '/home/user/a.out'\n\n```\nI have the binary, a.out, as well.\n\nHow can I analyse the crash in more details with this information?\n\nI loaded the core using GDB using the command:\n\n```\ngdb -c core\n\n```\nI can look at the backtrace of the stack using the bt command. And I can see that the program crashed due to: SIGTRAP\n\n```\nCore was generated by `/home/user/a.out'.\nProgram terminated with signal SIGTRAP, Trace/breakpoint trap.\n#0  0x0000000000400566 in ?? ()\n(gdb) bt\n#0  0x0000000000400566 in ?? ()\n#1  0x00007ffff7a3b1bb in ?? ()\n#2  0x0000000000000000 in ?? ()\n(gdb) x/i 0x0000000000400566\n=> 0x400566:    retq   \n\n```\nHowever, I'd like to get more detailed information about the root cause of the crash.\n\nDoes IDA Pro support analysis of core dump files? If I have the original binary, can I do something to debug it in details?\n\nI would prefer IDA Pro with remote debugging support in this case. However, if there's a way to do using GDB efficiently here, that's okay as well.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "3k",
  "tags": [
    "ida",
    "linux",
    "gdb"
  ],
  "user": "Neon Flash",
  "time": "Nov 19, 2018 at 8:31",
  "comments": [
    {
      "user": "user202729",
      "text": "Do you have the source code?",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "@user202729: of a core dump!? Of the code that led to the core dump? Of the code that writes out a core dump?",
      "time": null
    },
    {
      "user": "user202729",
      "text": "@usr2564301 I mean, that compiles to the a.out file.",
      "time": null
    }
  ],
  "answers_data": []
}