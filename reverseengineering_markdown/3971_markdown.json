{
  "title": "Understanding x86 C main function preamble created by Visual C++",
  "link": "https://reverseengineering.stackexchange.com/questions/3971/understanding-x86-c-main-function-preamble-created-by-visual-c",
  "content": "I was debugging a simple x86-64 program in Visual Studio 2010 and I noticed that the main function preamble is different from the GNU GCC compiled version of the same C program.\n\nTo illustrate what I mean here is the C code for the main function:\n\n```\nint main() {\n  int a,b,c;\n  a=1;\n  b=2;\n  c=proc(a,b);\n  return c;\n}\n\n```\nThe Visual Studio 2010 disassembly of the main function preamble for the  VC++ version is:\n\n```\n01211410  push        ebp  \n01211411  mov         ebp,esp  \n01211413  sub         esp,0E4h  \n01211419  push        ebx  \n0121141A  push        esi  \n0121141B  push        edi  \n0121141C  lea         edi,[ebp-0E4h]  \n01211422  mov         ecx,39h  \n01211427  mov         eax,0CCCCCCCCh  \n0121142C  rep stos    dword ptr es:[edi]\n\n```\nThe rest of the function code of the VC++ version is:\n\n```\n0081141E  mov         dword ptr [a],1  \n00811425  mov         dword ptr [b],2  \n0081142C  mov         eax,dword ptr [b]  \n0081142F  push        eax  \n00811430  mov         ecx,dword ptr [a]  \n00811433  push        ecx  \n00811434  call        proc (81114Fh)  \n00811439  add         esp,8  \n0081143C  mov         dword ptr [c],eax  \n0081143F  mov         eax,dword ptr [c]  \n00811442  pop         edi  \n00811443  pop         esi  \n00811444  pop         ebx  \n00811445  add         esp,0E4h  \n0081144B  cmp         ebp,esp  \n0081144D  call        @ILT+300(__RTC_CheckEsp) (811131h)  \n00811452  mov         esp,ebp  \n00811454  pop         ebp  \n00811455  ret \n\n```\nThe disassembly of the main function preamble for the GCC compiled version is:\n\n```\n00400502  push   rbp\n00400503  mov    rbp,rsp\n00400506  sub    rsp,0x10\n\n```\nThe rest of the main function code of the GCC version is:\n\n```\n004004e8  mov    DWORD PTR [rbp-0xc],0x1\n004004ef  mov    DWORD PTR [rbp-0x8],0x2\n004004f6  mov    edx,DWORD PTR [rbp-0x8]\n004004f9  mov    eax,DWORD PTR [rbp-0xc]\n004004fc  mov    esi,edx\n004004fe  mov    edi,eax\n00400500  call   0x4004cc <proc>\n00400505  mov    DWORD PTR [rbp-0x4],eax\n00400508  mov    eax,DWORD PTR [rbp-0x4]\n0040050b  leave\n0040050c  ret\n\n```\nThe same disassembly is given by objdump version 2.22.90.20120924.\n\nI realize that the first 3 instructions for both preambles do the following:\n\nQuestion 1: What is the purpose of 4th instruction in the VC++ version? I see its saving EBX, but why? It never uses it afterwards.\n\nFor the remaining instructions of the VC++ version preamble, I relized that it initializes  39h dwords with the value 0CCCCCCCCh. Which makes sense because 39h * 4h = 0E4h.\n\nQuestion 2: Why is this space initialized with the value 0CCCCCCCCh? Is this value better than 00000000h in some way?\n\nQuestion 3: Why does the VC++ version allocate 0E4h bytes for 3 local variables? Is this number random? If not, how is it computed?\n\nQuestion 4: Is this space used for something else beside local variables? If yes, for what?\n\n",
  "votes": "6",
  "answers": 2,
  "views": "2k",
  "tags": [
    "windows",
    "decompilation",
    "x86",
    "c"
  ],
  "user": "Benny",
  "time": "Mar 27, 2014 at 7:45",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "I suggest you post separate questions, one for each of your subquestions above. And for each question, post the function's source code and the function's full disassembly. This will make it easier to respond with confidence instead of guessing.",
      "time": null
    },
    {
      "user": "Benny",
      "text": "@JasonGeffner I posted the C source of the function. It is extremely simple. I think the 4 sub-questions are quite related. I don't see the point in posting 4 different questions with the same initial description and also very similar title.",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "There's definitely some interesting \"optimization\" going on there... for example, notice that the disassembled VC++ code will always return 0, not the value of c...",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "MSVC initializes uninitialized memories with 0xCC in debug mode. This helps debugging some problem much easier",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "You should change the MSVC project to x64. Compare MSVC 32-bit code and GCC 64-bit code is pointless",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The extra space on the stack is there to support the Edit and Continue functionality and can be eliminated by changing /Zl to /Zi. The saved ebx and initialization of the stack to 0xcc is done by the /RTC Runtime Checking Option.\n\nThere was a similar question asked on SO.\n\nThe windows example, by the way, is clearly a 32 bit binary. x64 windows calling convention uses RCX, RDX, R8, and R9 as the first 4 integer/pointer arguments (instead of the stack).\n\n",
      "votes": "6",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "phuclv",
          "text": "Yes. In x86_64 there's no way to push ebp. The OP should change the project to x86_64 and see",
          "time": null
        }
      ]
    },
    {
      "content": "",
      "votes": "2",
      "user": "fileoffset",
      "time": "Mar 27, 2014 at 0:18",
      "is_accepted": false,
      "comments": []
    }
  ]
}