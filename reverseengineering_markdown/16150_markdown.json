{
  "title": "How can I modify binary image resource data?",
  "link": "https://reverseengineering.stackexchange.com/questions/16150/how-can-i-modify-binary-image-resource-data",
  "content": "I've been hacking and modding software for years, and have learned a lot, but there are still a few things that vex me - this is one such case.\n\nI have noticed that some PEs contain an RCData section that can house a large variety of different kinds of data and information. In my experience the data is usually binary files or dialog classes. In this case, I am trying to figure out how an image is being stored in what I can only describe as binary raw format for a dialog (thanks to @Megabeets for refreshing my memory). In my more inexperienced days, I thought the image data in these files was stored directly as plain text or hexadecimal values. When I compared the data in the resource data to the image in question (stored in a different tree as a different format), they did not match. In some cases, this data is its own image with no comparable alternative. Below is an screenshot of the data in question:\n\n\n\nI know this data is for an icon, as removing it also removes the image in the application. For some programs, this data can be a dialog GUI asset, or bitmap. How do I \"convert\" this data into an image or vise versa for modification or replacement?\n\nAs a potential alternative solution, could I modify the script to directly reference the main application icon instead?\n\nSide-note: The image is an icon group containing four icons, and acts as the title bar icon.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "3k",
  "tags": [
    "windows",
    "executable",
    "binary-editing"
  ],
  "user": "Mr. Mendelli",
  "time": "Oct 6, 2022 at 23:27",
  "comments": [],
  "answers_data": [
    {
      "content": "Firstly, we need to understand what is RCDATA resource. This is how it described in MSDN:\n\nIn your example we see the configuration of TfrmMain which is the main form that is derived from TForm and is used as user interface for the program.  \n\nWith that in mind, we can understand that Icon.Data stores an icon for the application in what seems like an hexadecimal representation of it.\nAnd indeed, if we will take a look at the ICO registration information for at IANA we can see that the Magic Number (the first four octets in the file in hexadecimal) of ICO files is same as in your example:  \n\nWhen you compare the Icon.Data with another image, which you said has different file format, you won't see a match because each image format has different structure and specification and therefore, even though the files might look the same, the binary data is different.  \n\nYou can convert hex string into an image and an image to hex string easily using python:  \n\n```\nimport binascii\n\n# open ico file and read its binary content\nwith open('example.ico', 'rb') as f:\n    content = f.read()\n\n# convert the binary content to hexadecimal string\nhexstr = binascii.hexlify(content)\n\n# write this hexadecimal string to output.ico as binary\nwith open('output.ico','wb') as f:\n    f.write(binascii.unhexlify(hexstr))\n\n```\nYou can copy and paste the Icon.Data to a plain text and then read it with python using:  \n\n```\nwith open('hexadecimal.txt', 'r') as f:\n    content = f.read()\n\n```\nAnd then write the content to a file in binary format using the example above.  \n\nWith Resource Hacker you then can remove, add, edit and compile resources in your binary.  \n\n",
      "votes": "6",
      "user": "Megabeets",
      "time": "Aug 21, 2017 at 8:20",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mr. Mendelli",
          "text": "I must say, your answer is truly amazing and well-done. Unfortunately I don't know how to program or use languages like Python to perform tasks. It may seem strange (or ironic) that I have a vast understanding of how software works despite this. Even still, I am eager to research this, and once I can utilize your answer I will accept and upvote it. Thank you for your response.",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "You're welcome! It's a pretty trivial script, you can easily adapt it to most high-level languages you know. We can give a hand if you want to :)",
          "time": null
        },
        {
          "user": "Mr. Mendelli",
          "text": "That would be great, but the extent of my programming skills is limited to basic batch scripting...",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "it won't be easy to do it using Batch. How about Powershell, Bash, external programs? You can even do it online: hexed.it",
          "time": null
        },
        {
          "user": "Mr. Mendelli",
          "text": "I'll give PowerShell a shot. Don't get me wrong, I believe that your Python method will work, I just have to learn how to use it first. So, how should I approach this with PowerShell?",
          "time": null
        }
      ]
    }
  ]
}