{
  "title": "Analyse a statically linked binary and extract syscall from it using angr",
  "link": "https://reverseengineering.stackexchange.com/questions/32526/analyse-a-statically-linked-binary-and-extract-syscall-from-it-using-angr",
  "content": "How to extract all syscalls from analysing a statically linked binary.\nI have a script written using angr(Latest - v9.2.78) but when I start my script I get few syscalls and the analysis is like hung up or like going to recursion and it runs until memory is exhausted and eventually it is killed by OS(Ubuntu 22 LTS).\nMy project is very similar to this thread\n\nAny help will be beneficial :)\n\nThanks in advance\n\nEdit ->\nHere is the script i'm using\n\n```\nimport angr\nimport logging\n\nlogging.getLogger('angr').setLevel('INFO')\n\ndef syscall_action_builder(fd):\n    def syscall_action_func(state):\n        simproc = state.inspect.simprocedure\n        fd.write(\"{}  \n\".format(simproc.display_name))\n    return syscall_action_func\n\nif __name__ == '__main__':\n    FILE_NAME = 'path/to/binary'\n\n    trace_fd = open('syscall.log', 'w')\n\n    proj = angr.Project(FILE_NAME, load_options={'auto_load_libs': True, 'except_missing_libs': True},\n                        use_sim_procedures=False)\n\n    start_state = proj.factory.full_init_state()\n    start_state.inspect.b('syscall', when=angr.BP_AFTER, action = syscall_action_builder(trace_fd))\n\n    simgr = proj.factory.simgr(start_state)\n    simgr.run()\n\n```\nOutput of above script\n\n```\ngeteuid\ngetuid\ngetegid\ngetgid\narch_prctl\nbrk\nbrk\narch_prctl\nset_tid_address\nset_robust_list\nsys_334\nuname\nuname\nprlimit64\nprlimit64\nreadlink\nreadlink\nreadlink\nreadlink\nreadlink\nreadlink\ngetrandom\ngetrandom\nclock_gettime\nclock_gettime\ngetrandom\ngetrandom\nclock_gettime\nclock_gettime\n\n```\nlogging of 'clock_gettime', 'getrandom' continues until memory is exhausted or killed by OS or me.\n\nScript used is from this angr's github issue thread\n\n",
  "votes": "1",
  "answers": 0,
  "views": "176",
  "tags": [
    "binary-analysis",
    "x86",
    "static-analysis",
    "x86-64",
    "angr"
  ],
  "user": "0x4E4F4F42",
  "time": "Nov 30, 2023 at 0:23",
  "comments": [],
  "answers_data": []
}