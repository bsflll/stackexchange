{
  "title": "Ghidra Headless Analyzer - Create Functions",
  "link": "https://reverseengineering.stackexchange.com/questions/22880/ghidra-headless-analyzer-create-functions",
  "content": "I'm interested in open a binary file (.bin, without arch info), and analyze it with analyzeHeadless.bat (Ghidra version without GUI). \n\nI know what is the architecture of the file, so I pass it as a flag to the analyzer.\n\nMy command line is:\nanalyzeHeadless.bat  <project_location>  <project_name> -import <my_file> -processor <my_known_processor> -postscript <my_script.py> -scriptPath <path>\n\nmy_script.py is:\n\n```\nfor block in getMemoryBlocks():\n    current = block.getStart().getOffset()\n    end = block.getEnd().getOffset()\n    addr = currentProgram.getAddressFactory().getAddress(hex(current).replace('L', ''))\n    disassemble(addr)\n    current +=1\n\nfunc = getFirstFunction()\nprint(\"First func is:    \" + str(func))\n\n```\nI try to disassemble every address (looks like Ghigra doesn't do it itself), and after that I want to print the first function.\n\nThe problem is:\nfunc appears to be None.\n\nBut if after the headless execution I open the project in the GUI Ghidra, and execute:\n\n```\nfunc = getFirstFunction()\nprint(\"First func is:    \" + str(func))\n\n```\nIt works and gets me the function.\n\nAny ideas what am I doing wrong? I guess there is some analysis that runs in the background and created the functions. How can I run it in my python script? \n\n",
  "votes": "4",
  "answers": 1,
  "views": "1k",
  "tags": [
    "python",
    "ghidra"
  ],
  "user": "macro_controller",
  "time": "Dec 31, 2019 at 13:28",
  "comments": [],
  "answers_data": [
    {
      "content": "The solution that I found is:\n\nanalyze(currentProgram)\n\nJust after the disassembly. \n\n",
      "votes": "3",
      "user": "macro_controller",
      "time": "Jan 1, 2020 at 15:27",
      "is_accepted": true,
      "comments": []
    }
  ]
}