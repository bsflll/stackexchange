{
  "title": "Code Coverage - Fuzzing",
  "link": "https://reverseengineering.stackexchange.com/questions/4678/code-coverage-fuzzing",
  "content": "I have been fuzzing Adobe Reader lately.\n\nOne of the issues that I face is Code coverage. How do I determine that I have covered all the basic blocks in Adobe Reader and it's libraries.\n\nIs there any script or tool to find basic blocks of all selected EXE and DLL statically? I mean, I want to get all the Basic Blocks in the corresponding EXE's and libraries.\n\nCurrently, I'm using PIN to do so. But, it does not show how many basic blocks I have covered.\n\nMy aim is to create a script that will scan the given directory and write all the basic blocks in a file so that I can create a graph and so.\n\n",
  "votes": "16",
  "answers": 3,
  "views": "5k",
  "tags": [
    "binary-analysis",
    "static-analysis",
    "fuzzing"
  ],
  "user": "john4tech",
  "time": "May 29, 2020 at 19:44",
  "comments": [],
  "answers_data": [
    {
      "content": "Correct disassembly of an executable is known to be undecidable in the general case (this problem can obviously be related to the famous halting problem of a Turing machine).\n\nSo, extracting all the basic blocks of a binary program is a very difficult problem.\n\nYet, there are several techniques to try to approach a best effort coverage of the instructions. One of the most efficient technique is to use, both, concrete and symbolic exploration of the program. This is what is implemented in the Microsoft Research SAGE tool. See Patrice Godefroid's homepage.\n\nUnfortunately, the SAGE tool is only for Microsoft Research internal use. But, in fact, Patrice Godefroid's first idea is at the origin of many other tools such as:\n\nAnyway, there is still plenty of room to implement new tools with better handling of the binary program and with better support. So, feel free to start ! ;-)\n\nHope this helped.\n\n",
      "votes": "20",
      "user": "perror",
      "time": "May 27, 2020 at 11:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "Dear perror: you may forget FuzzWin that is presented recently at SSTIC 2014 (here is the link to the source code github.com/piscou/FuzzWin). I personally have implemented a very similar tool, but with simpler approach. I read the paper of Godefroid, but at this time I have not found any reliable IR for x86-64 instructions so I just omit it, and implement a application-layer reverse execution based on Pin.",
          "time": null
        },
        {
          "user": "perror",
          "text": "You are absolutely right, I forgot FuzzWin which was presented at SSTIC'14. I will add it to the list. Concerning the IR, several tools propose their own, but unfortunately nobody seems to agree on one unique format (it seems that IR is something that you redo each time). Yet, all of them are extremely similar to each others, I do believe that translators between these formats are possible.",
          "time": null
        },
        {
          "user": "john4tech",
          "text": "Thank you perror. But I'm looking for a solution which can find the basic blocks of a binary program(without source) without dynamically running it.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Then, the disassemblers of metasm, miasm, or the cfgrecovery tool from the Insight framework might do the job. All of them are using static techniques to disassemble the binary. I would also advise you to look at BAP (though it is not totally available). Finally, this list of tools and projects might be helpful as well.",
          "time": null
        },
        {
          "user": "john4tech",
          "text": "I found this I'm looking similar tools. One of the promising tool is Pyew. Thanks perror",
          "time": null
        }
      ]
    },
    {
      "content": "You can write an IDA script or create an IDA plugin to gather all basic blocks in a program. Sample plugin code to gather all basic blocks can be found in http://www.hexblog.com/ida_pro/files/coverit.zip -\n\n```\n...\n// Find all basic blocks in the specified area\nstatic bool gather_basic_blocks(ea_t ea1, ea_t ea2)\n{\n  show_wait_box(\"Finding basic blocks\");\n  ea_t start = BADADDR;\n  bool ok = true;\n  int cnt = 0;\n  while ( true )\n  {\n    if ( wasBreak() )\n    {\n      ok = false;\n      break;\n    }\n    if ( ++cnt == 1000 )\n    {\n      showAddr(ea1);\n      cnt = 0;\n    }\n    if ( start == BADADDR )\n    {\n      ea1 = nextthat(ea1, ea2, f_isCode, NULL);\n      if ( ea1 >= ea2 )\n        break;\n      start = ea1;\n    }\n    while ( ea1 < ea2 )\n    {\n      if ( !ua_ana0(ea1) )\n        break;\n      ea1 = get_item_end(ea1);\n      if ( is_basic_block_end(true) )\n        break;\n    }\n    if ( ea1 != start )\n      bbs[start] = ea1 - start; // remember the bb start and size\n    if ( !isCode(get_flags_novalue(ea1)) )\n      start = BADADDR;\n    else\n      start = ea1;\n  }\n  hide_wait_box();\n  return ok;\n}\n...\n\n```\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Jun 23, 2014 at 22:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "john4tech",
          "text": "Yeah, we can use IDA Pro to do this. But I do not want to depend on IDA for this. That's why I'm trying to write a script that can find the basic blocks of the application without using IDA pro. Basically, my aim is to create a program that can find basic blocks without running it(If it's possible).",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "To find basic blocks, you'll need a disassembler. IDA is a disassembler, and any alternative solution you find will still be based on a disassembler or a disassembler library.",
          "time": null
        }
      ]
    },
    {
      "content": "Binary-level code coverage analysis can be done either statically or dynamically. Static instrumentation can, among other things, offer drastic performance improvements over dynamic tools like Pin. However, it is considered, somewhat traditionally, to be brittle, i.e., it breaks binaries. For example, see the last note on static rewriting in afl-qemu. Hence, dynamic coverage analysis tools like DynamoRIO's drcov are more popular.\n\nThat said, this paper (disclosure: first author here), describes bcov, a tool which was able of leveraging static instrumentation while achieving at the same time better transparency in comparison to the popular DBI tools Pin and DynamoRIO. However, this work required an orchestrated effort which combined:\n\nThe tool bcov supports x86-64 ELF binaries. It can dump a single coverage file at process shutdown. This file contains a static array of booleans indicating the coverage of individual basic blocks. This means that merging (or diffing) coverage data of multiple tests can be done using simple boolean operations on the files themselves without the need to first post-process the data files. This feature  improves the efficiency of the fuzzing workflow.\n\nUpdate\n\nThe source code of bcov is now available.\n\n",
      "votes": "2",
      "user": "Codoka",
      "time": "Jun 4, 2020 at 10:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}