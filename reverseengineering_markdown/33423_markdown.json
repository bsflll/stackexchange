{
  "title": "Reverse Engineering - JFFS2 extraction failed from Ubiquiti firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/33423/reverse-engineering-jffs2-extraction-failed-from-ubiquiti-firmware",
  "content": "I’m analyzing a firmware image dumped from a Ubiquiti device with UART, and I’m running into issues trying to extract user-modified configuration files from what appears to be a JFFS2 partition.\n\nGoal:\nAccess the writable partition (JFFS2) to extract actual user data (credentials, configs). I’ve already extracted the squashfs successfully, but that only contains factory defaults.\n\nWhat I’ve done so far:\n\nThings I’ve tried:\n\nQuestions:\n\nAny insight would be really appreciated.\n\nThanks in advance!\n\n",
  "votes": "0",
  "answers": 0,
  "views": "48",
  "tags": [
    "binwalk"
  ],
  "user": "Viciu Dicard",
  "time": "Apr 4 at 6:47",
  "comments": [
    {
      "user": "hold-me",
      "text": "Did you identify the presence of a JFFS2 file system only based on 2 bytes? Can a tool such as binwalk not identify that? Are you sure it not a random sequence of bytes you see as an fs?",
      "time": null
    },
    {
      "user": "Viciu Dicard",
      "text": "Hi, thanks for your reply!  You’re right — I spotted JFFS2 by the 0x85 0x19 signature, and yes, it could be a coincidence. But first I also ran binwalk on the full image, and it detected a JFFS2 filesystem.  However, running binwalk -e firmware.bin just gives me an empty folder, same as Jefferson.  Any idea what I should try next? Could this be a Ubiquiti-specific layout issue?  Thanks again!",
      "time": null
    }
  ],
  "answers_data": []
}