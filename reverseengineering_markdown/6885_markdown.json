{
  "title": "Interpreting bluetooth string Pebble watch",
  "link": "https://reverseengineering.stackexchange.com/questions/6885/interpreting-bluetooth-string-pebble-watch",
  "content": "I am trying to determine the bluetooth string that is sent when programmatically unloading an app from the Pebble watch. I have unloaded an app (in slot 2) 5 times, and got 5 similar but slightly different strings:\n\n```\nFirst Payload:  0b ef 2b 00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07 9a\nSecond Payload: 0b ff 2b 01 00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07 86\nThird Payload:  0b ff 2b 02 00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07 86\nFourth Payload: 0b ff 2b 02 00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07 86\nFifth Payload:  0b ff 2b 02 00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07 86\n\n```\nInterestingly, the last 3 payloads were identical, but the first 2 differ from this. The first string much more different (perhaps anomalous, I'm not sure), but the others only have differences in the 4th octet. \n\nWhat would the best way to proceed with analysing this type of data? I've never done any reverse engineering like this before, but unfortunately Pebble does not provide an API for programmatically unloading apps. \n\nIt would appear that the first 3 octets specify the action to be taken (in this case unloading an app), but 3 octets would be a strange size for an instruction (not a power of 2), and so I'm suspicious that this is not correct.\n\nMy use case for this is I wish to devise a polymorphic app which maximises use of the memory capacity of the pebble (in this case I can fill the 100K slot completely).\n\n",
  "votes": "3",
  "answers": 2,
  "views": "259",
  "tags": [
    "embedded",
    "sniffing",
    "packet"
  ],
  "user": "Thomas Russell",
  "time": "Feb 25, 2015 at 15:46",
  "comments": [],
  "answers_data": [
    {
      "content": "Because you have 3 of 5 messages absolutely identical, and because the other two differ very little, it seems probable that the first two messages were simply captured incorrectly.  \n\nThe way to try to detect that would be to do the same thing several more times to see if that pattern holds.  \n\nMore generally, reverse engineering a protocol like this often starts by gathering as much data as you can.  This includes:\n\nAll of these can and often do lead to useful information.  In addition, studying other similar protocols may give you insight into the types of data that is likely to be in these packets and sometimes particular details of individual fields such as details of a CRC or checksum calculation.\n\n",
      "votes": "1",
      "user": "Edward",
      "time": "Dec 27, 2014 at 2:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You have captured the bluetooth RFCOMM frames. These include various control fields which are handled by the bluetooth stack and are transparent to the overlying application layer. (Think serial port like communication with start/stop/parity bits being added but just over bluetooth instead.)\n\nIn your frames:\n\nAccordingly, the payload data starts at the 4th or 5th byte and finishes with the penultimate byte.\n\nIn your case, all 5 frames have the same 21 byte payload data which is what the application transmitted and the other end will receive.\n\n```\n00 11 17 70 02 24 b0 a1 e5 f0 b1 44 0d 8e 53 8f 26 68 8a 3f 07\n\n```\nSpeculating now, every Pebble app has a unique 16 byte UUID hat I would expect to be part of an uninstall command. If we assume the UUID is the last 16 bytes of the packet we then have data as follows-\n\n```\n00 11 17 70 02 [uuid]\n\n```\nThe 00 11 occurring at the start could plausibly be some form of (big-endian) length field (17 bytes).  In which case, I'd guess the uuid combines with the preceding 02 to make up the 17 bytes.  This would result in the following payload structure:\n\n```\n[length] 17 70 { 02, [uuid] }\n\n```\nIf my speculation is correct this leaves only the combination of 17 70 and 02 to mean uninstall.\n\nWith more captures (uninstall of a different app or an app install) it should be possible to prove (or disprove!) this.\n\n",
      "votes": "1",
      "user": "Ian Cook",
      "time": "Feb 25, 2015 at 11:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}