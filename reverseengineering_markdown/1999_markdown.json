{
  "title": "What are the tools to analyze Python (obfuscated) bytecode?",
  "link": "https://reverseengineering.stackexchange.com/questions/1999/what-are-the-tools-to-analyze-python-obfuscated-bytecode",
  "content": "Recently on Reddit ReverseEngineering I stumbled on a self-modifying code in Python. Looking at the Github repository was quite instructive and I found picture of the Python bytecode program exposed in CFG form:\n\n\n\nI am wondering if there are tools to perform static analysis on Python bytecode program with some nice features (such as generating the CFG or allowing to manipulate the code, ...) ?\n\n",
  "votes": "24",
  "answers": 5,
  "views": "13k",
  "tags": [
    "tools",
    "python"
  ],
  "user": "perror",
  "time": "Dec 7, 2013 at 12:48",
  "comments": [
    {
      "user": "Antimony",
      "text": "If not, it shouldn't be too hard to write one. The hard part is creating a friendly and intuitive GUI.",
      "time": null
    },
    {
      "user": "heinrich5991",
      "text": "Could one write a tool that makes the files readable for IDA?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@heinrich5991: yep, better yet it could probably be implemented in Python itself :)",
      "time": null
    },
    {
      "user": "mikeazo",
      "text": "@0xC0000022L, yes but could it be made self-modifying?",
      "time": null
    },
    {
      "user": "mikeazo",
      "text": "@0xC0000022L, yeah, I was making a joke.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are several tools dedicated to Python's bytecode reversing:\n\n",
      "votes": "9",
      "user": "perror",
      "time": "Aug 16, 2017 at 8:37",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Maynard is a (dis)assembler for Python byte code written by a member of Python core and the release manager for Python 3.4. Reading material here and here. I'm not aware of a public tool (besides the one you linked) that can do CFG visualization like that, but you certainly could build one on top of Maynard.\n\n",
      "votes": "10",
      "user": "94c3",
      "time": "May 9, 2013 at 12:22",
      "is_accepted": false,
      "comments": [
        {
          "user": "NlightNFotis",
          "text": "AFAIK, pypy has a control flow graph viewer and a jitviewer.",
          "time": null
        },
        {
          "user": "94c3",
          "text": "Looks like this? If so, that's only for RPython, which is a strict subset of Python. I think the distinction is important, as the whole point of RPython is that it is more amenable to static analysis than Python. That said, still could be useful.",
          "time": null
        }
      ]
    },
    {
      "content": "pyREtic from Immunity Sec can also provide some help in looking into original source code and perform modifications as well. \n\nYou may be interested in review the capabilities of the tool in this document:\n\"pyREtic, In memory reverse engineering for obfuscated Python bytecode\" by Rich Smith [PDF]\n\n",
      "votes": "6",
      "user": "mcgyver5",
      "time": "Dec 7, 2013 at 22:07",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "A challenge in writing a tool to extract the control flow of python bytecode is that there are so many Python bytecodes versions to choose from, about 25 or so by now (if you include pypy variants).\n\nThe bytecode in the example graph with its JUMP_IF_FALSE followed by some POP_TOPs and PRINT_NEWLINE instruction, reflect Python before 2.7. \n\nHowever the example in one of the comments from the Flare_bytecode_graph with its POP_TOP_IF_FALSE is 2.7. Python 3 drops the PRINT_ITEM instruction.\n\nAnyone writing such a tool will have to come to grips with that; or be happy with living in a single version of Python, for which 2.7 is probably the most popular choice. Or you could ensure that the version of Python you are running matches the bytecode you want to analyze and use the current dis and opcode modules that Python provides. But even here those modules change over time, not in the least being the particular bytecode instructions.\n\nI wrote a python package called xdis for those who want to work across all versions of Python bytecode, and don't want to be tied with using the same version of Python that the bytecode requires.\n\nThe next thing that you'll probably want to do in this endeavor is to classify instructions into categories like those which can branch and those that can't and if the branch is conditional or not. \n\nPython has some lists that cover some of this, (\"hasjrel\", \"hasjabs\") but alas it doesn't have the categories that are most useful. And for possibly historical reasons the categories are lists rather than sets. But again xdis to the rescue here; it fills this information in with sets \"CONDITION_OPS\", \"JUMP_UNCONDITIONAL\" and \"JUMP_OPS\". \n\nUsing this I've written https://github.com/rocky/python-control-flow which uses xdis and has some rudimentary code that will create a control flow graph and dominator tree for most Python bytecodes. There is some code to create dot files and I use graphviz to display that. I notice that Python, can create a lot of dead code.\n\nThe intended use of that package is to reconstruct high-level Python control structures. There is some rudimentary control structure detection, although this needs a lot more work. Python control structures are pretty rich when you include the try/while/for \"else\" clauses, and the \"finally\" clauses. Even as is, the annotated control flow of the basic blocks very helpful in manually reconstructing structured control flow.\n\nWhen this is finished, I can replace a lot of the hacky code for doing that in uncompyle6. \n\nAnd this leads me to the list of decompilers mentioned in the accepted answer...\n\nAs stated, those particular versions of uncompyle and uncompyle2 handle only Python 2.7. As suggested, there are older versions that handle multiple Python versions 1.5 to 2.3 or 2.4 or so. That is if you have a Python 2.3 or 2.4 interpreter to run this on.\n\nBut none of these projects are actively maintained. In uncompyle, there are currently 25 or so issues with the code, many that I have fixed in uncompyle6. And this is for a version of Python that no longer changes! (To be fair though there are some bugs in uncompyle6 that don't exist in uncompyle2. And to address those, I'd really need to put in place that better control flow analysis) \n\nA number of the bugs in uncompyle could easily be fixed by just doing the same thing that uncompyle6 does, and I think some of that I've noted in the issues. At this point uncompyle2 is much better than uncompyle, and if you are only interested in Python 2.7, that is the most accurate.\n\nAs for pycdc, while it is pretty good for its relatively small size (compared to uncompyle6), it too isn't maintained to the level that it would need to keep up with Python changes. So it is weak around Python 3.4 or so and gets progressively weaker for later versions. Uncompyle6 is like that too, but currently less so. pycdc has over 60 issues logged against it and I doubt those will be addressed anytime soon. Some of them aren't that difficult to fix. My own (possibly slanted) comparison of those two decompilers is https://github.com/rocky/python-uncompyle6/wiki/pycdc-compared-with-uncompyle6\n\n",
      "votes": "5",
      "user": "rocky",
      "time": "Nov 12, 2018 at 14:37",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The Flare-bytecode graph project can help with graphical bytecode CFG representation. Taken from the project README:\n\n",
      "votes": "3",
      "user": "perror",
      "time": "Aug 16, 2017 at 9:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "please try to put some description of the link into your answer.",
          "time": null
        }
      ]
    }
  ]
}