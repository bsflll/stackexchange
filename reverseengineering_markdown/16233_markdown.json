{
  "title": "IDA Pro: Define local variables from non-standard powerpc stack register",
  "link": "https://reverseengineering.stackexchange.com/questions/16233/ida-pro-define-local-variables-from-non-standard-powerpc-stack-register",
  "content": "I am using IDA pro 6.95 (paid version) to RE some PowerPC code. The PowerPC normally uses r1 as the stack pointer, so IDA builds the stack frame and local variables from r1. Parameters are passed in r3, r4, r5, etc. The problem I am having that I see this:\n\n```\n.text: foo:\n.text:.set back_chain, -0x30                     // Stack frame\n.text: .set var_4, -4\n.text: .set sender_lr,  4\n<<<function preamble snipped>>>\n.text:               mr        r31, r1        // Copy stack pointer to r31\n.text:               stw       r3, 8(r31)     // All local variables are relative\n.text:               stw       r4, 0xC(r31)   //  to r31, instead of r1, so IDA\n                                              //  doesn't recognize them.\n\n```\nAnd I want to see this:\n\n```\n.text: foo:\n.text:.set back_chain, -0x30                     // Stack frame\n.text: .set var_C, -C\n.text: .set var_8, -8\n.text: .set var_4, -4\n.text: .set sender_lr,  4\n<<<function preamble snipped>>>\n.text:                  mr        r31, r1        // Copy stack pointer to r31\n.text:                  stw       r3, var_8(r31) // All local variables are\n.text:                  stw       r4, var_C(r31) //  recognized and nameable.\n\n```\nWhat I want is to convert all, e.g. 8(r31) local variable references in the function to normal var_8(r31) syntax. I do not want to have to change each reference manually.  Is there a way to:\n\n",
  "votes": "4",
  "answers": 2,
  "views": "948",
  "tags": [
    "ida",
    "disassembly",
    "powerpc"
  ],
  "user": "bangaboo",
  "time": "Sep 1, 2017 at 15:20",
  "comments": [
    {
      "user": "user22967",
      "text": "The old PPC ELF spec (refspecs.linuxbase.org/elf/elfspec_ppc.pdf) defines r31 as 'Used for local variables or \"environment pointers\"', so maybe this is what you are seeing in this code. So it might help to specify which platform the code you are analyzing is supposed to run on.",
      "time": null
    },
    {
      "user": "LÃ©o Lam",
      "text": "@MichaelEngel Not OP, but I'm also seeing this in the main() function of an executable that was compiled using CodeWarrior. It does the same thing as OP's function: the SP is copied to r31, and r31 is used as the SP in the rest of the function.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Disclaimer: I'm not going to create a working code example here, and I did not test this on PowerPC for your specific purpose. YMMV\n\nI could think of two ways of doing that. First will be the manual approach by using some IDAPython magicry to manually force all offsets based on r31 to the stack frame structure. Second (which is the one likely used) is using a designated API just for that.\n\nYou'll need to:\n\nThe second approach would be using one of two APIs designed for the purpose. the two APIs are called idc.define_local_var and ida_frame.add_regvar.\n\ndefine_local_var is defined as follows:\n\n```\ndef define_local_var(start, end, location, name):\n    \"\"\"\n    Create a local variable\n    @param start: start of address range for the local variable\n    @param end: end of address range for the local variable\n    @param location: the variable location in the \"[bp+xx]\" form where xx is\n                     a number. The location can also be specified as a\n                     register name.\n    @param name: name of the local variable\n    @return: 1-ok, 0-failure\n    @note: For the stack variables the end address is ignored.\n           If there is no function at 'start' then this function.\n           will fail.\n    \"\"\"\n\n```\nAnd will do all the work of locating the stack structure and defining new members if needed. This is probably the first thing you want to play with, however you'll still need to iterate over all the instructions and identify r31 offsets manually.\n\nThe add_regvar function is called by define_local_var and is responsible to applying the variable created by define_local_var to instructions. You can read more about it here\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Jan 27, 2018 at 20:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I was faced with similar issue and found the following workaround: \n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Jul 2, 2018 at 11:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}