{
  "title": "Firmware reverse engineering",
  "link": "https://reverseengineering.stackexchange.com/questions/20563/firmware-reverse-engineering",
  "content": "this question is a follow-up from this previous post: Flash dump binwalk blank, low entropy \n\nI need to reverse engineer a firmware from a very secure device. I was able to reverse engineer the PCB and create a JTAG connector, which I used to read the EPROM memory. I tried to binwalk and all other software techniques but they all failed to provide any lead to what is in the firmware.\n\nI then tried to open the file in IDA, and I could translate all memory blocks into Assembly instructions. Is it possible that the firmware does not reside in any operating system, but instead is only a set of Assembly instructions?\n\nIf indeed is just a set of instructions, would binwalk point anything confirming that?\n\nFile has 256Kb.\n\nThis is the processor: STM32L 152CCT6\n\n",
  "votes": "1",
  "answers": 3,
  "views": "908",
  "tags": [
    "arm"
  ],
  "user": "Fabio Lanza",
  "time": "Feb 6, 2019 at 23:29",
  "comments": [
    {
      "user": "the_endian",
      "text": "How could I view that previous post which now has a 404?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yep it could be just \"bare metal\" code without any OS or standard data structures which binwalk can carve.\n\n",
      "votes": "1",
      "user": "Anton Kukoba",
      "time": "Feb 6, 2019 at 10:35",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Sounds Like the device you are messing does not have a traditional operating system you are used to dealing with. Since its a STM32 it will be in ARM architecture and I am guessing you are using IDA freeware. Try Ghidra it supports ARM I don't think the free version of IDA does. You still aren't going to find a file system though if that's what you are looking for. More details on the device could be helpful.\n\n",
      "votes": "1",
      "user": "Matt",
      "time": "Dec 27, 2019 at 22:16",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "STM32 is a family of Cortex-M based microcontrollers with pretty limited resources, so they rarely use a rich OS like Linux but usually either a monolithic single-binary firmware based on a classic processing loop, or a compact RTOS (Real-time Operating System) such as FreeRTOS, ThreadX or many other options. You might find some basic file system or individual resources but it might as well be just all code with maybe some string constants or data tables. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 28, 2019 at 0:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}