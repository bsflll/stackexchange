{
  "title": "What does __return_ptr do in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/18433/what-does-return-ptr-do-in-ida",
  "content": "Let's say I have this program:\n\n```\nstruct A {\n    int x;\n};\n\nstruct A func1(int z) {\n    struct A result;\n    result.x = z+1;\n    return result;\n}\n\nint main() {\n    return func1(1).x;\n}\n\n```\nWhen compiling this on linux with gcc -m32 -fno-stack-protector the result of func1 will be returned as a stack pointer. Can I somehow set the type of func1 using __return_ptr so IDA understands this calling convention? I thought that would be the purpose of __return_ptr, if not what does it do?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "391",
  "tags": [
    "ida",
    "x86",
    "gcc",
    "calling-conventions"
  ],
  "user": "Stefan Friesel",
  "time": "Jun 4, 2018 at 10:03",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "question body seems to be different from title",
      "time": null
    },
    {
      "user": "Stefan Friesel",
      "text": "rephrased question body",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "you're still asking two different things: \"what is __return_ptr?\", and  \"how to represent this calling convention in IDA?\". But okay, I'll try to describe both parts.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The \"problem\" with your example is that the structure is too small (four bytes), so it fits in a register and is not actually passed on the stack. From the Itanium C++ ABI (used by most GCC implementations):\n\n(emphasis mine).\n\nSince your struct is trivial and fits completely into the return register (eax), it is not passed on the stack but returned directly in eax. So there is no need for anything special here. However, if you make it a little bigger, e.g.:\n\n```\nstruct A {\n    int x;\n    int y;\n    int z;\n};\n\n```\nThen it no longer fits and has to be passed on the stack. \nIf you add the struct to Local Types and specify the C++ prototype for the function (struct A func1(int z)), then IDA performs type lowering and converts it to a C-style prototype with explicit argument locations:\n\nstruct A *__cdecl func1(struct A *__return_ptr __struct_ptr retstr, int z) \n\nIt seems currently __return_ptr is not used by IDA or decompiler and is just an annotation for the user, but in theory it could be used to make the decompiled code closer to the original C++ syntax.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Jun 3, 2018 at 17:32",
      "is_accepted": true,
      "comments": [
        {
          "user": "Stefan Friesel",
          "text": "At least on my machine gcc does pass the result on the stack even with the 4-byte struct (gcc (Ubuntu 7.3.0-16ubuntu3) 7.3.0). But the last sentence answers my question",
          "time": null
        }
      ]
    }
  ]
}