{
  "title": "Exploitability of Stack-based Buffer Overflows on functions ending with fclose()",
  "link": "https://reverseengineering.stackexchange.com/questions/11609/exploitability-of-stack-based-buffer-overflows-on-functions-ending-with-fclose",
  "content": "I have been discussing the effectiveness of GNU libc's fclose() function to thwart successful exploitation of trivial vulnerabilities due to segmentation fault when called without a valid pointer to a FILE data structure (implementations of libc on other operating systems fail silently). For instance, given a simple vulnerable function using strcpy() such as:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid\nfoo(const char *str)\n{\n  char buffer[256];\n  int ret = 123456;\n\n  FILE *fp = tmpfile();\n  strcpy(buffer, str);\n  if (ret != 500)\n    fclose(fp);\n}\n\nint \nmain(int argc, const char **argv)\n{\n  foo(argv[1]);\n  return 0;\n}\n\n```\nEven when compiled with most memory-protection mechanisms disabled:\n\n```\ncc -m32 -ggdb -fno-stack-protector -z execstack -z norelro main.c\n\n```\nThe function, regardless of being overwritten up to EIP would never return since:\n\n```\n(gdb) r $(python -c \"print 'A' * 286\")\nProgram received signal SIGSEGV, Segmentation fault.\n0xf7e3e307 in fclose@@GLIBC_2.1 () from /lib/libc.so.6\n(gdb) ba\n#0  0xf7e3e307 in fclose@@GLIBC_2.1 () from /lib/libc.so.6\n#1  0x080484bc in foo (str=0x41414141 <error: Cannot access memory...\n#2  0x41414141 in ?? ()\n#3  0x41414141 in ?? ()\n\n```\nCould there be a way to achieve code execution for such trivial function?. Since the ret variable can be overwritten, can it be set to 500 so that the if condition which determines if fclose() is called or not could be bypassed?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "365",
  "tags": [
    "static-analysis",
    "exploit",
    "libc"
  ],
  "user": "Steven McDown",
  "time": "Dec 21, 2015 at 20:34",
  "comments": [
    {
      "user": "perror",
      "text": "The only last problem you may encounter (outside the gdb prompt) is the ASLR. But, there is no problem exploiting this small program with this bug. What did you already tried and what was the problem ? Note that the fclose() is not really a problem.",
      "time": null
    },
    {
      "user": "Steven McDown",
      "text": "yeah, since ret and fp are overwritten it's possible to write fp with its address before the overflow and it'd work on non-ASLR systems, but the in-stack address would differ from system to system. As far as I know, ret cannot be overwritten to 500 again.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If the attacker can overwrite the ret variable on the stack with an arbitrary value, then yes.\n\nAnd even if the attacker can't overwrite ret, they still might be able to overwrite fp with a value that is acceptable to fclose().\n\nFurthermore, your approach relies on several implementation-specific details. For example:\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Dec 21, 2015 at 20:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "Steven McDown",
          "text": "The ret variable can be overwritten, but i don't think it can be changed to a value such as 500 in order to avoid calling fclose() because of the null byte in '\\x00\\x00\\xf4\\x01'. The assumption of the ordering was on purpose, the overflow should rewrite fp address. Regarding fclose() always throwing an exception when invalid pointers are given, I couldn't bruteforce a single address that did not ended on SIGSEGV, but sometimes advances up to FILE->_IO_file_close.",
          "time": null
        },
        {
          "user": "Steven McDown",
          "text": "In addition, there is an old challenge that suggests GOT overwritting, could it be possible to achieve code execution with the code I posted using such technique?. What I'm proposing is that functions that contain trivial overflows that overwrite a FILE pointer cannot be reliably exploited.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "\"because of the null byte in '\\x00\\x00\\xf4\\x01'.\" -- Right, which is why I said that the attacker would need to be able to overwrite the ret variable with an arbitrary value, which isn't possible here.",
          "time": null
        }
      ]
    }
  ]
}