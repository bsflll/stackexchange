{
  "title": "How to bypass anti debugger? IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/31749/how-to-bypass-anti-debugger-ida-pro",
  "content": "Im new to reverse engineering and doing a crackme that requires me to make a keygen, yes i know making a keygen isn't a beginner task however im stuborn, i am trying to debug the program to understand what it does to check for a valid key but i continue to get hit with the \"A debugger is present on your computer\" text the program prints out, I am aware of where it is checking for the debugger (i think), i just don't know how to avoid it, i can't patch the file so ive got to avoid it without tampering with the original code, anybody know how to get past this or? Thanks i'd really appreciate it.\n\n\n\n",
  "votes": "4",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "assembly",
    "c++",
    "c"
  ],
  "user": "alias",
  "time": "Apr 4, 2023 at 10:59",
  "comments": [
    {
      "user": "Robert",
      "text": "See reverseengineering.stackexchange.com/questions/10888/â€¦ for a possible solution. If the bugger test functions return properly (and don't kill the process) you could just overwrite the result in eax or patch the whole call to the debugger test methods..",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'll try to \"teach you to fish\" and provide a good general process to bypass these checks while debugging (without patching the binary)\n\nNote: it is helpful to actually understand how the function works. e.g., if a debugger is present this function will return XX, otherwise it will return YY. That way you're not arbitrarily modifying values... you can do so with intention.\n\nHope this helps!\n\n",
      "votes": "4",
      "user": "Kayla0x41",
      "time": "Apr 4, 2023 at 15:16",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Use an \"anti-anti-debugger\" plugin (like ScyllaHide), which simply injects code into IsDebuggerPresent, yes that's possible, since each executable loads API separetly into RAM, which's one of reasons why newer Chrome versions eat RAM (each tab is a process).\n\n",
      "votes": "0",
      "user": "Top-Master",
      "time": "Jan 26, 2024 at 12:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}