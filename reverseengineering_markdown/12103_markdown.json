{
  "title": "What is the \"standard\" approach to find loop in binary code?",
  "link": "https://reverseengineering.stackexchange.com/questions/12103/what-is-the-standard-approach-to-find-loop-in-binary-code",
  "content": "I am working on some x86 (32/64 bits) ELF binary code. These binaries are compiled from C and C++ program code and I am trying to detect loops inside the binaries. \n\nI am newbie to this area, and I am wondering, what is the standard way to identify a loop in binary code? \n\nI prefer to use some static methods to detect the loop instances, as I am not able to generate well-performing dynamic test cases.\n\n",
  "votes": "6",
  "answers": 5,
  "views": "3k",
  "tags": [
    "binary-analysis",
    "binary"
  ],
  "user": "lllllllllllll",
  "time": "Nov 30, 2016 at 22:48",
  "comments": [
    {
      "user": "deviantfan",
      "text": "Why do you think there's a standard way? Optimizations can make quite a mess...",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@deviantfan, thank you. I agree with that. I am just wondering when people want to detect loop, what they will do? any references?",
      "time": null
    },
    {
      "user": "ubnix",
      "text": "If you can get your hands on the book Practical Malware Analysis, I suggest you to read \"Chapter 6. Recognizing C code constructs in assembly\". There you have explained all the major code constructs of C language and how to identify them while reversing.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "I am little bit surprise about unconstructive comments here. Optimizations can make mess, obviously, but they cannot hide structures of loops as well as recursive calls.",
      "time": null
    },
    {
      "user": "Joshua Taylor",
      "text": "@TaThanhDinh If an optimization unrolls a loop so that it doesn't exist at all, there's no more loop to detect.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The classic, compiler theoretic answer to this question is to build a control flow graph and then do a graph analysis to identify natural loops. I believe algorithms for this can be found in the Dragon Book, and a summary is given in these slides:\n\nhttp://www.cs.cmu.edu/afs/cs/academic/class/15745-s03/public/lectures/L7_handouts.pdf\n\nYou can also see how LLVM implements its loop detection:\n\nhttp://llvm.org/docs/doxygen/html/LoopInfo_8h_source.html\n\nThe search terms you want to find more information are things like \"natural loop\" and \"back edge\".\n\n",
      "votes": "8",
      "user": "Brendan Dolan-Gavitt",
      "time": "Feb 26, 2016 at 13:39",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "You might find this question about finding recursive function helpful, there are very nice answers for it. Under the binary code level, IMHO, there is only little difference about detecting loop (i.e. some jmp to the same target) and recursive call (i.e. some call to the same target).\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I don't think there's a standard way, but one approach might be to use something like Johnson's algorithm to detect cycles in the function's directed graph.\n\nYou can find an implementation of this in libraries like NetworkX simple_cycles.\n\n",
      "votes": "2",
      "user": "broadway",
      "time": "Feb 26, 2016 at 12:04",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Detecting loops from binary code isn't easily done. There are many algorithms based on multiple graph data structures (CFG, SSA form, DDG, ...).\nI have provided a set of additional helpful documents link1, link2, link3.\nYou can check MAQAO's implementation of an SSA based loop detector. Also, I would recommend you checking DynInst's code and documentation link4.\n\nNow, you can implement an assembly code analyzer that can detect basic blocks/loops by following branches.\n\nIf it all checks out, you got yourself a basic block which has a high probability of being a loop.  \n\nIf you need more hairy details, I'll be glad to provide more ;)\n\n",
      "votes": "1",
      "user": "yaspr",
      "time": "Nov 30, 2016 at 10:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Thank you yaspr. I really appreciate your detailed information!",
          "time": null
        },
        {
          "user": "yaspr",
          "text": "It's my pleasure.",
          "time": null
        }
      ]
    },
    {
      "content": "You can use this algo: https://en.wikipedia.org/wiki/Kosaraju's_algorithm\n\nYou need to divide the assembler code into graphs (basic blocks) and find strongly connected graphs.\nhttps://habr.com/ru/articles/331904/\n\nhttps://habr.com/ru/articles/537290/\n\n",
      "votes": "0",
      "user": "Barbosso",
      "time": "Sep 20, 2023 at 16:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}