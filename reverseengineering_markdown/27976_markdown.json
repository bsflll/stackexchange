{
  "title": "How to capture control flow pins on emulated serial port?",
  "link": "https://reverseengineering.stackexchange.com/questions/27976/how-to-capture-control-flow-pins-on-emulated-serial-port",
  "content": "I am reverse engineering how a CPS software package communicates to a radio device. I have the basics down, and want to trick the software into thinking COM1 is the radio, when in reality I want to capture the control flow pin state changes (CTR and RST).\n\nI am running Windows XP in Qemu and/or Virtual Box with Linux as the base OS. Is there a way for Linux to emulate a software-defined serial port that captures all pin state changes?\n\nI have tried using socat, specifically with something like this socat -d -d pty,raw,echo=0,b9600 pty,raw,echo=0,b9600, but attempts to change the control flow pins on the resulting /dev/pts/X will result in an ioctl error. Also, simple cat /dev/pts/X only shows content sent over the device, not control flow changes.\n\nHow would I do this? And, how would I pass the resulting device to a Windows VM to make it think it is communicating with COM1?\n\nThanks!\n\n",
  "votes": "1",
  "answers": 1,
  "views": "94",
  "tags": [
    "linux",
    "serial-communication",
    "virtual-machines"
  ],
  "user": "Farhan Yusufzai",
  "time": "Jul 10, 2021 at 4:45",
  "comments": [],
  "answers_data": [
    {
      "content": "To answer my own question, you can use the Linux kernel module tty0tty to capture the control pins and data flow.\n\n",
      "votes": "1",
      "user": "Farhan Yusufzai",
      "time": "Jul 12, 2021 at 14:22",
      "is_accepted": true,
      "comments": []
    }
  ]
}