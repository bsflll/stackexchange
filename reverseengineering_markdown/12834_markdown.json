{
  "title": "Randomly picking up a x86 register for an instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/12834/randomly-picking-up-a-x86-register-for-an-instruction",
  "content": "I came around a piece of malware which i am analyzing and have found that it uses some kind of math to randomly selecting a register for a specific instruction\n\nWhich i don't understand how this operation is calculated depend on what?\n\nHere is an example of what i mean\n\nlet's say that i wanted to randomly pick up a register for the instruction\n\n```\nADD DWORD PTR DS:[0],EAX\n\n```\nWe know the opcode for this instruction is 01 05 00 00 00 00\n\nThe bold number represents the register for this instruction\n\n05 == EAX\n0D == ECX\n\nTo better explain this here is the instruction with all the registers\n\n```\n0041580B    0105 00000000   ADD DWORD PTR DS:[0],EAX\n00415811    010D 00000000   ADD DWORD PTR DS:[0],ECX\n00415817    0115 00000000   ADD DWORD PTR DS:[0],EDX\n0041581D    011D 00000000   ADD DWORD PTR DS:[0],EBX\n00415823    0125 00000000   ADD DWORD PTR DS:[0],ESP\n00415829    012D 00000000   ADD DWORD PTR DS:[0],EBP\n0041582F    0135 00000000   ADD DWORD PTR DS:[0],ESI\n00415835    013D 00000000   ADD DWORD PTR DS:[0],EDI\n\n```\nThe malware uses a register index starting from 0 (EAX) till 7 (EDI)\n\nThe number is get SHLed first with the number 3 then it is ORed with 5 to get the right register opcode. So my question is how the author came to the conclusion of that?\n\nI would say that SHL REG,3 equals REG*8 that is the number of max registers? but why do we need to OR it with 05? is it because the starting opcode of this instruction is 05?\n\nDoes anybody have a better explanation for this? or any hint words for a better comprehend?\n\n",
  "votes": "11",
  "answers": 1,
  "views": "890",
  "tags": [
    "assembly",
    "x86",
    "malware",
    "register"
  ],
  "user": "RCECoder",
  "time": "Dec 30, 2016 at 20:01",
  "comments": [],
  "answers_data": [
    {
      "content": "To better understand this, you need to study instruction encoding formats i.e. x86 for this question.\n\nAn x86 instruction looks like this\n\n```\n+----------------------+--------+--------+-----+--------------+-----------+\n| Instruction prefixes | Opcode | ModR/M | SIB | Displacement | Immediate |\n+----------------------+--------+--------+-----+--------------+-----------+\n|          0-4         |   1-3  |   0-1  | 0-1 |      0-4     |    0-4    |\n+----------------------+--------+--------+-----+--------------+-----------+\n\n```\nThe numbers on the second row indicates the length in bytes of the corresponding part.\n\nFor the instruction,\n\n```\n010D 00000000   ADD DWORD PTR DS:[0],ECX\n\n```\nthere is no instruction prefix.\nThe opcode for ADD is 01 (Check here)\n\nThe second byte of the instruction i.e ModR/Mis 0D.\nThe ModR/M byte provides addressing information about the instruction. It specifies whether an operand is in a register or in memory; if it is in memory, then fields within the byte specify the addressing mode to be used.\n\nThe ModR/M byte can be broken down into\n\n```\n+-----+------------+-----+\n| Mod | Reg/Opcode | R/M |\n+-----+------------+-----+\n|  2  |      3     |  3  |\n+-----+------------+-----+\n\n```\nHere the numbers on the second row indicates the length in bits of the corresponding parts.\n\nThe Mod field (2 bits) combines with the R/M field (3 bits) to form 32 possible values 8 registers and 24 addressing modes.\n\nThe Reg/Opcode field (3 bits) specifies either a register number or three more bits of opcode information; the r/m field (3 bits) can specify a register as the location of an operand, or it can form part of the addressing-mode encoding in combination with the Mod field.\n\nNow, convert the ModR/M i.e 0D to binary. You would get.\n\n```\n+-----+------------+-----+\n| Mod | Reg/Opcode | R/M |\n+-----+------------+-----+\n|  00 |     001    | 101 |\n+-----+------------+-----+\n\n```\nThe Mod and R/M fields are 00 and 101 respectively. This indicates displacement only addressing mode. See the table below.\n\n \n\nFor all the instructions this mode of addressing is used, hence the reason for  ORing with 5 (in binary 101) to set that particular bit pattern.\n\nComing to the Reg/Opcode field, this indicates a register. \n001 is the register index for ECX. \n\nFor the first instruction i.e\n0105 00000000   ADD DWORD PTR DS:[0],EAX\nthis field is 000 standing for EAX. You can check by converting 05 to binary.\n\nSee more in the table below taken from here.\n\n\n\nSo basically the register value was SHLed with 3 to move it to the correct position. The Reg/Opcode field is 3 bits from the right.\n\nFinally the last 4 bytes are 00000000. This represents the displacement which is zero in this example.\n\n",
      "votes": "18",
      "user": "0xec",
      "time": "Jun 12, 2016 at 18:49",
      "is_accepted": true,
      "comments": []
    }
  ]
}