{
  "title": "What does the code do?",
  "link": "https://reverseengineering.stackexchange.com/questions/30439/what-does-the-code-do",
  "content": "Challenge #64\n\nWhat does this code do?\n\nAn array of array[x][y] form is accessed here. Try to determine the dimensions of the array, at least partially, by finding y.\n\n```\n_array$ = 8\n_x$ = 12\n_y$ = 16\n_f  PROC\n    mov eax, DWORD PTR _x$[esp-4]\n    mov edx, DWORD PTR _y$[esp-4]\n    mov ecx, eax\n    shl ecx, 4\n    sub ecx, eax\n    lea eax, DWORD PTR [edx+ecx*8]\n    mov ecx, DWORD PTR _array$[esp-4]\n    fld QWORD PTR [ecx+eax*8]\n    ret 0\n_f  ENDP\n\n```\nAt first I think there is a mistake in the question. Because I only see three variables here, one for array address, the one x and one y, so I assume it's actually a 2d array of double, not a 3d as in \"An array of array[x][y]\".\n\nThen I was stuck because eventually the program loads array[8y+192x], and x and y can be anything.\n\nSo I figured this must be a 3d array of double, with the third dimension given. I still couldn't figure it out so I tried to write my own program and use Godbolt to give me assembly. After a few trials I got something pretty close to the original program:\n\nSomething close\n\nHowever I'm still having difficulty to match my program with the original question. I think I'm pretty close but how do I proceed from here? I have a hunch that y is also 24 in the original question, but not 100% sure.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "169",
  "tags": [
    "disassembly",
    "x86"
  ],
  "user": "Nicholas Humphrey",
  "time": "Jun 6, 2022 at 19:00",
  "comments": [],
  "answers_data": [
    {
      "content": "This is somewhat of a symbolic simplification. If you execute code from start of the procedure, then just before ret these are the relevant changes to the state of the program - ignoring registers\n\n```\nfloat_st0          = @64[array + (y + x * 0x78) * 0x8]\nfloat_stack_ptr    = float_stack_ptr + 0x1\n\n```\nwhere st0 has been loaded with a 64bit value from a location.\n\n```\narray + (y + x * 0x78) * 0x8\n\n```\nIn a 1D array the way you access any index is\n\n```\narray + index * sizeof(member)\n\n```\nThe size of the array member is 8 sizeof(double) here so the index is\n\n```\ny + x * 0x78\n\n```\n2D arrays are laid out linearly in memory. Accessing second dimension requires the size of first dimension to be known -\n\n\n\nIn the above example to access array[1][2] we need to access it like\n\n```\narray + sizeof(int) * (2 + 1 * 3)\n\n```\nIn the op x is getting multiplied by 0x78 - so the size of the y dimension is 0x78 members.\n\nAdditionally I could replicate the problem code to an extent here\n\nWith this code and x86 MSVC v19.0, optimization flag /Ox\n\n```\ndouble load(double array[][0x78], int x, int y) {\n    return array[x][y];\n}\n\n```\nwe get\n\n```\n_array$ = 8                                   ; size = 4\n_x$ = 12                                                ; size = 4\n_y$ = 16                                                ; size = 4\n_load   PROC\n        mov     ecx, DWORD PTR _x$[esp-4]\n        mov     eax, DWORD PTR _y$[esp-4]\n        shl     ecx, 4\n        sub     ecx, DWORD PTR _x$[esp-4]\n        lea     ecx, DWORD PTR [eax+ecx*8]\n        mov     eax, DWORD PTR _array$[esp-4]\n        fld     QWORD PTR [eax+ecx*8]\n        ret     0\n_load   ENDP\n\n```\nPS : I ran this through a miasm based simplification - code here\n\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "May 26, 2022 at 7:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nicholas Humphrey",
          "text": "Thanks a lot! I'll read through and take notes. BTW also thanks for introducing the miasm tool, I had no idea it exists.",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "@NicholasHumphrey If this solves the question you asked, you can accept it. See What should I do when someone answers my question?",
          "time": null
        },
        {
          "user": "Nicholas Humphrey",
          "text": "Done! Thanks man",
          "time": null
        }
      ]
    }
  ]
}