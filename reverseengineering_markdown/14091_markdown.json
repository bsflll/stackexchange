{
  "title": "Hacking Lua - Introduce new functions into built Lua",
  "link": "https://reverseengineering.stackexchange.com/questions/14091/hacking-lua-introduce-new-functions-into-built-lua",
  "content": "I am trying to hack a game (not for cheating though) by introducing new built-in methods and functions in order to communicate with the game using sockets. Here is a small \"pseudo code\" example of what I want to accomplish:\n\nInside the Lua code I am calling my_hack() and pass the current game state:\n\n```\nGameState = {}\n\n-- Game state object to be passed on\nfunction GameState:new()\n  -- Data\nend\n\nlocal gameState = GameState:new()\n-- Collect game state data and pass it to 'my_hack' ..\nmy_hack(gameState)\n\n```\nand inside my_hack the object is getting sent away:\n\n```\nint my_hack(lua_State * l)\n{\n   void* gameState= lua_topointer(l, 1);\n\n   // Send the game state:\n   socket->send_data(gameState);\n\n   return 0;\n}\n\n```\nNow, the big question is how to introduce my_hack() to the game?\n\nI assume, that all built in functions must be kept in some sort of lookup table. Since all Lua code is getting interpreted, functions like import etc. will have to be statically available, right? If that is correct, then it should be \"enough\" to find out where this code is residing in order to smuggle my code into the game that would allow me to call my_hack() in a Lua script.\n\nThere should be two options: The first is that the Lua built is embedded inside the executable and is completely static and the second is that all Lua code gets loaded dynamically from a DLL. \n\nThis question goes out to anybody who has a slightest clue about where and how I should keep looking for the built in functions. I've tried a few things with Cheat Engine but I wasn't too successful. I was able to cheat a bit ^^ but that's not what I'm looking out for.\n\nThis is what my current \"progress\" looks like:\n\nI found some hints I'm trying to go after in the data section of the executable. For example IDA is giving me\n\n```\n.rdata:00D44210                 dd offset aLoadfile     ; \"loadfile\"\n.rdata:00D44214                 dd offset sub_90ECE0\n.rdata:00D44218                 dd offset aDofile       ; \"dofile\"\n.rdata:00D4421C                 dd offset sub_90ED20\n.rdata:00D44220                 dd offset aLoadstring   ; \"loadstring\"\n.rdata:00D44224                 dd offset sub_90EC80\n\n```\nNow, I know that these strings here (loadfile, dofile, etc.) are actually the names of built-in functions that modders can use in Lua - a script language in order to change stuff in the game.\n\nI am trying to find out at which point this address is being accessed for reading. For that I am using Cheat Engine and at this point I would like to stress that I am not trying to cheat here but to introduce new built-in functions in order to have more flexibility when it comes to modding. \n\nHowever, the addresses which I see in IDA do not seem to be the actual virtual addresses. If I look at this address with Cheat Engine, which is just reading out the memory, I'm getting nothing. \n\nSo the question is if I will be able to find the correct virtual address of e.g. dofile in order to read that out from my RAM.\n\nWhat I hope to see in the end is from where these methods are getting accessed and in a much later step maybe find out where the actual code of dofile resides. At the end I want to smuggle my code into the right place and introduce a new function my_hack in order to get control of the program.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "4k",
  "tags": [
    "ida",
    "dll-injection",
    "injection"
  ],
  "user": "Stefan Falk",
  "time": "Dec 3, 2016 at 11:53",
  "comments": [],
  "answers_data": [
    {
      "content": "One way of doing this :\n\n```\nlua_State * hLua = NULL;\n\nint __cdecl lua_gettop_hook (lua_State *self) {\n    int (__cdecl *hooked) (lua_State *) =\n        (typeof(hooked)) get_original_function (lua_gettop_hook);\n    hLua = self;\n    return hooked (self);\n}\n\n```\n```\nHMODULE lua51 = LoadLibrary(str_dup_printf(\"%s/luajit/lua51.dll\", luaPath));\n\n```\n```\nLOADFILEFN _luaL_loadfile = (typeof(_luaL_loadfile)) GetProcAddress (lua51, \"luaL_loadfile\"); \n\n// Load custom script \"script.lua\"\nif (_luaL_loadfile (hLua, str_dup_printf(\"%s/script.lua\", scriptPath))) {\n    MessageBox (NULL, \"Cannot load script.lua\", \"ERROR\", 0);\n}\n\n```\nBy doing so, you'll be able to inject your own Lua code using the current Lua context of the game.\n\n",
      "votes": "3",
      "user": "Spl3en",
      "time": "Dec 5, 2016 at 10:32",
      "is_accepted": false,
      "comments": [
        {
          "user": "Stefan Falk",
          "text": "That sounds reasonable and in fact it's not so far away from what I'm currently trying to do. I downloaded the Lua code and found that there is a list base_funcs which has name/address pairs e.g. {\"loadfile\", luaB_loadfile} etc. It seems these are the built-in functions of Lua. I found that this array is getting passed to luaL_openlib() which is getting called in base_open() in file lbaselib.c. To me it looks like as if luaL_openlib() does register these functions. So if I am not mistaken I should be able to do something like this:",
          "time": null
        },
        {
          "user": "Stefan Falk",
          "text": "Locate base_open() in the executable and inject a jmp to a location wher I inject code that loads my-lua-extension.dll and further calls something like initialize_my_lua_extension(lua_State *L). Since I have the starting address of luaL_openlib I simply could call this function within my dll and therefore register new methods/functions. I would not have to replace the whole Lua implementations or replace them but would only register additional methods. The question I'd have here whether calling luaL_openlib is enough and if the interpreter will then be able to parse my new methods.",
          "time": null
        }
      ]
    }
  ]
}