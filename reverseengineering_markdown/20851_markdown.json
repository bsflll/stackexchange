{
  "title": "exit() syscall within shellcode not working",
  "link": "https://reverseengineering.stackexchange.com/questions/20851/exit-syscall-within-shellcode-not-working",
  "content": "```\nint main()\n{\n    char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";\n\n    int *ret;\n    ret = (int *)&ret + 2;\n    (*ret) = (int)shellcode;\n}\n\n```\nI tried to run the above shellcode but got a segmentation fault.\nThen, I tried putting the shellcode inside the main and it worked, why? \n\nAlso, when I do strace to the binary to check the syscall, it shows that exit_group() syscall is called but the shell code is for exit() syscall. \n\n\n\n",
  "votes": "0",
  "answers": 2,
  "views": "685",
  "tags": [
    "assembly",
    "shellcode"
  ],
  "user": "Mukesh",
  "time": "Mar 12, 2019 at 19:08",
  "comments": [],
  "answers_data": [
    {
      "content": "First of all, the opcodes that you are pointing are not responsible for the syscall. If you disassemble your shellcode, you get:\n\n```\n0000000000004028 <shellcode>:\n    4028:   bb 00 00 00 00          mov    $0x0,%ebx\n    402d:   b8 01 00 00 00          mov    $0x1,%eax\n    4032:   cd 80                   int    $0x80\n\n```\nA first mov to set ebx to zero (the return code), then a second mov to set eax to the id of the exit syscall, and finally it trigger the system call.\n\nSecond, this shellcode is obviously designed for a 32-bit architecture. And, you have to know that the syscall numbers are different between i386 and amd64.\n\nSo, my recommendation would be that you compile your program with the option -m32 to ensure that you have a full 32-bit program (and not a mix between 64-bit and 32-bit).\n\nThird, you need to be sure that you compile with -zexecstack in order to be able to execute the code in case it is stored on the stack.\n\nFinally, there is no evidence that getting ret + 2 will set your pointer in front of the saved eip. You'd better write:\n\n```\nint main()\n{\n    char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";\n\n    (*(void(*)()) shellcode)();\n    return 0;\n}\n\n```\n",
      "votes": "0",
      "user": "perror",
      "time": "Mar 12, 2019 at 19:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mukesh",
          "text": "I am using i386 machine. I believe the 0x1 which is being set to eax is responsible for exit syscall. Please correct me if I am wrong.",
          "time": null
        },
        {
          "user": "Mukesh",
          "text": "I tried again compiling the program with -m32 option and got exactly the same disassemble as you have mentioned. But, the issue still remains the same. I am using now char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";",
          "time": null
        },
        {
          "user": "perror",
          "text": "Ah, in fact, the exit() syscall call the exit_group() function to kill all threads. So, it might be okay from the beginning. Look at man exit_group",
          "time": null
        },
        {
          "user": "Mukesh",
          "text": "I think the program is crashing because whatever the opcode number instead of 0x1 I pass, I am getting the same result and hence the exit_group() is called rather than exit()",
          "time": null
        },
        {
          "user": "perror",
          "text": "Are you compiling with -zexecstack ?",
          "time": null
        }
      ]
    },
    {
      "content": "```\ndiv eax\nint 0x80\njmp short 0x0\n\n```\nIt's different ways exit() syscall \n\n",
      "votes": "1",
      "user": "J. Daisy",
      "time": "Oct 5, 2019 at 9:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}