{
  "title": "How .reloc Section is used in PE file?",
  "link": "https://reverseengineering.stackexchange.com/questions/15080/how-reloc-section-is-used-in-pe-file",
  "content": "I have read document pecoff_v83 of Microsoft. In The .reloc section part, I have read: \n\nAnd, I knew that each block contain: Page RVA and Block Size. Each Block size contain: Type and offset.\n\nI used peview:\n\n\n\nI have a few questions:\n\n",
  "votes": "10",
  "answers": 1,
  "views": "16k",
  "tags": [
    "pe",
    "dynamic-linking"
  ],
  "user": "QChí Nguyễn",
  "time": "Aug 2, 2017 at 8:19",
  "comments": [],
  "answers_data": [
    {
      "content": "It means even if you have space after your block finished, you must use next 32-bit aligned address for your RVA. In my opinion, it is mostly because of page optimization. You can read this document for further understanding.\n\nIMAGE_BASE_RELOCATION is a data structure which can be expressed as:\n\n```\ntypedef struct _IMAGE_BASE_RELOCATION {\n    DWORD   VirtualAddress;\n    DWORD   SizeOfBlock;\n} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION;\n\n```\nPE files don't use IMAGE_BASE_RELOCATION structure to work, PE loader (dynamic linker) use it for constructing relocation table. You can read this topic if you want to learn more about relocation table.\n\nSince you use .reloc in your title question, I will explain you relocation information in the .reloc section. This section holds information for base relocations which mean if required files cannot be loaded their preferred addresses (because already something mapped to it) instructions or variables relocated with that information.\n\nLoader uses virtual addresses, offset and loaded address to resolve and relocate which is another way to say adjusting addresses.\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}