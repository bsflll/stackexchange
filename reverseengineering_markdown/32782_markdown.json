{
  "title": "IDA - Decoding this \"XORed\"? string automatically in psuedocode",
  "link": "https://reverseengineering.stackexchange.com/questions/32782/ida-decoding-this-xored-string-automatically-in-psuedocode",
  "content": "```\n__m128i ModuleName;\n__m128i ProcName;\n\nModuleName.m128i_i64[0] = 0x3E4D19089E7D5EDi64;\nModuleName.m128i_i64[1] = 0xD8855EB576AF36A0ui64;\nProcName.m128i_i64[0] = 0x6F80FFFCE583A183i64;\nProcName.m128i_i64[1] = 0xD8855EB576AF36CCui64;\n\nModuleName = _mm_xor_si128(_mm_load_si128(&ModuleName), ProcName);\n\n```\nAbove is a snippet of code from a decompiled program that encodes(?) their strings.\n\nModuleName.m128i_i8 yields the string that is created in the code.\n\nIs there any method (possibly with IDAPython or just tool already built-in) that can be used to simplify that code snippet into just ModuleName = \"ntdll.dll\"? (I had to compile a program to simplify it to that string)\n\nIf assembly is needed, I'll provide it.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "151",
  "tags": [
    "ida",
    "disassembly",
    "idapython"
  ],
  "user": "lightersmash",
  "time": "Mar 2, 2024 at 18:36",
  "comments": [
    {
      "user": "Robert",
      "text": "Do you know the platform, CPU architecture, and used programming language?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I am not sure if i understand your query\n\nhave you tried simply evaluating the xor in idc prompt\n\n```\nIDC>0x3E4D19089E7D5ED^0x6F80FFFCE583A183\n\n```\nshould spit out dec,hex,oct,bin,and ascii outputs as below\n\n```\n7810418696977151086. \n6C642E6C6C64746Eh \n661441346615431072156o 0110110001100100001011100110110001101100011001000111010001101110b \n'ntdll.dl' \n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Mar 5, 2024 at 18:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}