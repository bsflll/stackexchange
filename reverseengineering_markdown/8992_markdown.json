{
  "title": "Floating point registers on ARM",
  "link": "https://reverseengineering.stackexchange.com/questions/8992/floating-point-registers-on-arm",
  "content": "When I disassemble ARM code that deals with floating point values, how can I print out the registers? (I'm using Gdb).\n\n```\n   0x000083d8 <+12>:    ldr r3, [pc, #56]   ; 0x8418 <main+76>\n   0x000083dc <+16>:    str r3, [r11, #-8]\n   0x000083e0 <+20>:    vldr    s14, [r11, #-8]\n   0x000083e4 <+24>:    vldr    s15, [pc, #40]  ; 0x8414 <main+72>\n\n```\nHow could I print out the s14 register in this case?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "arm"
  ],
  "user": null,
  "time": "May 26, 2015 at 14:30",
  "comments": [],
  "answers_data": [
    {
      "content": "To print the value of s14 from gdb:\n\ninfo registers s14\n\n",
      "votes": "0",
      "user": "Jason Geffner",
      "time": "May 26, 2015 at 14:33",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "p $reg\n\nIn QEMU v3.0.0 built from source user mode + GDB 8.2 Ubuntu 16.04, if you do: info registers and info vector it does not show the floating point values but rather rounds them down to integers, I think there is a bug. \n\nThe following does work however. First I load:\n\n```\n1.5, 2.5, 3.5, 4.5\n\n```\ninto v0 / q0.\n\nARMv8\n\n```\n(gdb) p $v0\n$2 = {\n  d = {\n    f = {[0] = 8.0000018998980522, [1] = 1024.0002455711365}, \n    u = {[0] = 4620693218751676416, [1] = 4652218416153755648}, \n    s = {[0] = 4620693218751676416, [1] = 4652218416153755648}\n  }, \n  s = {\n    f = {[0] = 1.5, [1] = 2.5, [2] = 3.5, [3] = 4.5}, \n    u = {[0] = 1069547520, [1] = 1075838976, [2] = 1080033280, [3] = 1083179008}, \n    s = {[0] = 1069547520, [1] = 1075838976, [2] = 1080033280, [3] = 1083179008}\n  }, \n  h = {\n    u = {[0] = 0, [1] = 16320, [2] = 0, [3] = 16416, [4] = 0, [5] = 16480, [6] = 0, [7] = 16528}, \n    s = {[0] = 0, [1] = 16320, [2] = 0, [3] = 16416, [4] = 0, [5] = 16480, [6] = 0, [7] = 16528}\n  }, \n  b = {\n    u = {[0] = 0, [1] = 0, [2] = 192, [3] = 63, [4] = 0, [5] = 0, [6] = 32, [7] = 64, [8] = 0, [9] = 0, [10] = 96, [11] = 64, [12] = 0, [13] = 0, [14] = 144, [15] = 64}, \n    s = {[0] = 0, [1] = 0, [2] = -64, [3] = 63, [4] = 0, [5] = 0, [6] = 32, [7] = 64, [8] = 0, [9] = 0, [10] = 96, [11] = 64, [12] = 0, [13] = 0, [14] = -112, [15] = 64}\n  }, \n  q = {\n    u = {[0] = 85818282497786728556221825347259203584}, \n    s = {[0] = 85818282497786728556221825347259203584}\n  }\n}\n\n```\nand:\n\n```\n(gdb) p $v0.s\n$3 = {\n  f = {[0] = 1.5, [1] = 2.5, [2] = 3.5, [3] = 4.5}, \n  u = {[0] = 1069547520, [1] = 1075838976, [2] = 1080033280, [3] = 1083179008}, \n  s = {[0] = 1069547520, [1] = 1075838976, [2] = 1080033280, [3] = 1083179008}\n}\n\n```\nand:\n\n```\n(gdb) p $v0.s.f\n$3 = {[0] = 1.5, [1] = 2.5, [2] = 3.5, [3] = 4.5}\n\n```\nTest setup.\n\nARMv7\n\n```\n(gdb) p $q0\n$3 = {\n  u8 = {[0] = 0, [1] = 0, [2] = 192, [3] = 63, [4] = 0, [5] = 0, [6] = 32, [7] = 64, [8] = 0, [9] = 0, [10] = 96, [11] = 64, [12] = 0, [13] = 0, [14] = 144, [15] = 64}, \n  u16 = {[0] = 0, [1] = 16320, [2] = 0, [3] = 16416, [4] = 0, [5] = 16480, [6] = 0, [7] = 16528}, \n  u32 = {[0] = 1069547520, [1] = 1075838976, [2] = 1080033280, [3] = 1083179008}, \n  u64 = {[0] = 4620693218751676416, [1] = 4652218416153755648}, \n  f32 = {[0] = 1.5, [1] = 2.5, [2] = 3.5, [3] = 4.5}, \n  f64 = {[0] = 8.0000018998980522, [1] = 1024.0002455711365}\n}\n\n```\nand:\n\n```\n(gdb) p $q0.f32\n$5 = {[0] = 1.5, [1] = 2.5, [2] = 3.5, [3] = 4.5}\n\n```\nTest setup.\n\nBug\n\nThe bug I mentioned earlier, leads in ARMv8 to:\n\n```\n(gdb) i r v0\nv0             {\n  d = {\n    f = {[0x0] = 0x8, [0x1] = 0x400}, \n    u = {[0x0] = 0x402000003fc00000, [0x1] = 0x4090000040600000}, \n    s = {[0x0] = 0x402000003fc00000, [0x1] = 0x4090000040600000}\n  }, \n  s = {\n    f = {[0x0] = 0x1, [0x1] = 0x2, [0x2] = 0x3, [0x3] = 0x4}, \n    u = {[0x0] = 0x3fc00000, [0x1] = 0x40200000, [0x2] = 0x40600000, [0x3] = 0x40900000}, \n    s = {[0x0] = 0x3fc00000, [0x1] = 0x40200000, [0x2] = 0x40600000, [0x3] = 0x40900000}\n  }, \n  h = {\n    u = {[0x0] = 0x0, [0x1] = 0x3fc0, [0x2] = 0x0, [0x3] = 0x4020, [0x4] = 0x0, [0x5] = 0x4060, [0x6] = 0x0, [0x7] = 0x4090}, \n    s = {[0x0] = 0x0, [0x1] = 0x3fc0, [0x2] = 0x0, [0x3] = 0x4020, [0x4] = 0x0, [0x5] = 0x4060, [0x6] = 0x0, [0x7] = 0x4090}\n  }, \n  b = {\n    u = {[0x0] = 0x0, [0x1] = 0x0, [0x2] = 0xc0, [0x3] = 0x3f, [0x4] = 0x0, [0x5] = 0x0, [0x6] = 0x20, [0x7] = 0x40, [0x8] = 0x0, [0x9] = 0x0, [0xa] = 0x60, [0xb] = 0x40, [0xc] = 0x0, [0xd] = 0x0, [0xe] = 0x90, [0xf] = 0x40}, \n    s = {[0x0] = 0x0, [0x1] = 0x0, [0x2] = 0xc0, [0x3] = 0x3f, [0x4] = 0x0, [0x5] = 0x0, [0x6] = 0x20, [0x7] = 0x40, [0x8] = 0x0, [0x9] = 0x0, [0xa] = 0x60, [0xb] = 0x40, [0xc] = 0x0, [0xd] = 0x0, [0xe] = 0x90, [0xf] = 0x40}\n  }, \n  q = {\n    u = {[0x0] = 0x4090000040600000402000003fc00000}, \n    s = {[0x0] = 0x4090000040600000402000003fc00000}\n  }\n}\n\n```\nSo note how the v0.s.f line has rounded down integers instead of floats:\n\n```\n  s = {\n    f = {[0x0] = 0x1, [0x1] = 0x2, [0x2] = 0x3, [0x3] = 0x4},\n\n```\nSVE\n\nNot yet implemented on QEMU, see: https://stackoverflow.com/questions/52888916/how-to-assemble-arm-sve-instructions-with-gnu-gas-or-llvm-and-run-it-on-qemu/52888917#52888917\n\n",
      "votes": "0",
      "user": "Ciro Santilli",
      "time": "Feb 15, 2019 at 14:18",
      "is_accepted": false,
      "comments": []
    }
  ]
}