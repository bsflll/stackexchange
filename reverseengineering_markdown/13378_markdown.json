{
  "title": "OllyDBG translate ASM to C",
  "link": "https://reverseengineering.stackexchange.com/questions/13378/ollydbg-translate-asm-to-c",
  "content": "I'm trying to reverse engineer an library function back to C/C++ code. \nBut the function that I reverse is almust done, i just need a little bit help for making it compleet.\n\nHere is the assembly code: \n\n```\n        0002BB46 | 8B 45 F4                 | mov eax,dword ptr ss:[ebp-C]                                            |\n    0002BB49 | 8B 88 EC 00 00 00        | mov ecx,dword ptr ds:[eax+EC]                                           |\n    0002BB4F | 89 4D EC                 | mov dword ptr ss:[ebp-14],ecx                                           |\n    0002BB52 | 8B 55 F4                 | mov edx,dword ptr ss:[ebp-C]                                            |\n    0002BB55 | 8B 82 F0 00 00 00        | mov eax,dword ptr ds:[edx+F0]                                           |\n    0002BB5B | 89 45 F0                 | mov dword ptr ss:[ebp-10],eax                                           |\n    0002BB5E | 83 7D EC 00              | cmp dword ptr ss:[ebp-14],0                                             |\n    0002BB62 | 0F 8E BA 00 00 00        | jle TestDLL.2BC22                                                   |\n    0002BB68 | C7 45 E8 00 00 00 00     | mov dword ptr ss:[ebp-18],0                                             |\n    0002BB6F | EB 09                    | jmp TestDLL.2BB7A                                                   |\n    0002BB71 | 8B 4D E8                 | mov ecx,dword ptr ss:[ebp-18]                                           |\n    0002BB74 | 83 C1 01                 | add ecx,1                                                               |\n    0002BB77 | 89 4D E8                 | mov dword ptr ss:[ebp-18],ecx                                           |\n    0002BB7A | 8B 55 E8                 | mov edx,dword ptr ss:[ebp-18]                                           |\n    0002BB7D | 3B 55 EC                 | cmp edx,dword ptr ss:[ebp-14]                                           |\n    0002BB80 | 0F 8D 9C 00 00 00        | jge TestDLL.2BC22                                                   |\n    0002BB86 | 8B 45 FC                 | mov eax,dword ptr ss:[ebp-4]                                            |\n    0002BB89 | 50                       | push eax                                                                |\n    0002BB8A | 6A 01                    | push 1                                                                  |\n    0002BB8C | 6A 04                    | push 4                                                                  |\n    0002BB8E | 8B 4D E8                 | mov ecx,dword ptr ss:[ebp-18]                                           |\n    0002BB91 | 6B C9 14                 | imul ecx,ecx,14                                                         |\n    0002BB94 | 03 4D F0                 | add ecx,dword ptr ss:[ebp-10]                                           |\n    0002BB97 | 51                       | push ecx                                                                |\n    0002BB98 | FF 15 38 E1 02 00        | call dword ptr ds:[<&fwrite>]                                           |\n0002BB9E | 83 C4 10                 | add esp,10                                                              |\n0002BBA1 | 8B 55 FC                 | mov edx,dword ptr ss:[ebp-4]                                            |\n0002BBA4 | 52                       | push edx                                                                |\n0002BBA5 | 6A 01                    | push 1                                                                  |\n0002BBA7 | 6A 04                    | push 4                                                                  |\n0002BBA9 | 8B 45 E8                 | mov eax,dword ptr ss:[ebp-18]                                           |\n0002BBAC | 6B C0 14                 | imul eax,eax,14                                                         |\n0002BBAF | 8B 4D F0                 | mov ecx,dword ptr ss:[ebp-10]                                           |\n0002BBB2 | 8D 54 01 04              | lea edx,dword ptr ds:[ecx+eax+4]                                        |\n0002BBB6 | 52                       | push edx                                                                |\n0002BBB7 | FF 15 38 E1 02 00        | call dword ptr ds:[<&fwrite>]                                           |\n\n```\nan little explination: \n- You see on line 0002BB46 the assembly code:  mov eax,dword ptr ss:[ebp-C]\nThe [ebp - C] means that this is an structure. \n\nand the part of 0002BB86, you see:  mov eax,dword ptr ss:[ebp-4] \nThe [ebp - 4] means that this is an FILE* \n\nBut this is all that i know, I just need a little example for what this part do.\nASM 1: \n\n```\n 0002BB46 | 8B 45 F4                 | mov eax,dword ptr ss:[ebp-C]                                            |\n0002BB49 | 8B 88 EC 00 00 00        | mov ecx,dword ptr ds:[eax+EC]                                           |\n0002BB4F | 89 4D EC                 | mov dword ptr ss:[ebp-14],ecx                                           |\n0002BB52 | 8B 55 F4                 | mov edx,dword ptr ss:[ebp-C]                                            |\n0002BB55 | 8B 82 F0 00 00 00        | mov eax,dword ptr ds:[edx+F0]                                           |\n0002BB5B | 89 45 F0                 | mov dword ptr ss:[ebp-10],eax \n\n```\nAnd the second one: \n\n```\n0002BB8E | 8B 4D E8                 | mov ecx,dword ptr ss:[ebp-18]                                           |\n0002BB91 | 6B C9 14                 | imul ecx,ecx,14                                                         |\n0002BB94 | 03 4D F0                 | add ecx,dword ptr ss:[ebp-10]                                           |\n0002BB97 | 51                       | push ecx           \n\n```\ni know it takes the variabele ebp18 and multiply it with 0x14. \nAnd add it to ebp10. But i dont know what ebp10 is. i whas thinking it is an struct or something.\n\nI hope someone can help me, for explaining to me. \n\nManny thanks. \n\nHere is the source code that I've from the assembly. \n\n```\ntypedef struct _EDX  \n{\n\n    DWORD offset0;         // edx 0x0 -> needs tp be checked          \n    DWORD offset4;        // edx 0x4                                  \n    char offset64[0x64];  // edx 0x64                                 \n    char offsetC8[0x20];  // -> new added                             \n    DWORD offsetE8;       //                                          \n    DWORD offsetEC;       // edx 0xEC                                 \n    char* offsetF0;       // edx 0xF0                                \n\n    char first[0x64];\n} EDX, *PEDX;\n\nbool _cdecl WriteAdptInfo(char* filName, PEDX ebpc) \n{\n    if(ebpc != NULL)\n    {\n        FILE* file = fopen(filName, \"wb\");\n        if(file != NULL)\n        {\n            size_t size1 = fwrite(&ebpc->offset4 , sizeof(DWORD), 0x01 ,file); \n            DWORD var8 = 0; \n            for(var8; var8 <= ebpc->offset4; var8++) \n            {\n                DWORD a = var8 * 0xF4;\n                PEDX ebpC = ebpc;\n                ebpC->offset0 += a;\n                size_t size2 = fwrite(ebpC->first, sizeof(char), sizeof(ebpC->first), file);\n                size_t size3 = fwrite(ebpC->offset64, sizeof(char), sizeof(ebpC->offset64), file);\n                size_t size4 = fwrite(ebpC->offsetC8, sizeof(char), sizeof(ebpC->offsetC8), file);\n                size_t size5 = fwrite(&ebpC->offsetE8, sizeof(DWORD), 0x1, file);\n                size_t size6 = fwrite(&ebpC->offsetEC, sizeof(DWORD), 0x1, file);\n\n                DWORD var14 = ebpC->offsetEC;\n                char* var10 = ebpC->offsetF0;\n\n                if(var14 >= 0)\n                {\n                    DWORD var18 = 0;\n                    for(var18; var18 <= var14; var18++)\n                    {\n                        DWORD counter = (var18 * 0x14);\n                        //     ptr , size, count, file\n                        size_t size7 = fwrite((counter + var10), sizeof(char*), 0x1, file);\n                        size_t size8 = fwrite(var10 +counter + 0x4, sizeof(char*), 0x1, file);\n                        size_t size9 = fwrite(var10 + counter + 0x8, sizeof(char*), 0x1, file);\n                        size_t sizeA = fwrite(var10 + counter + 0xC, sizeof(char*), 0x1, file);\n                        size_t sizeB = fwrite(var10 + counter + 0x10, sizeof(char*), 0x1, file);\n                    }\n                }\n            } \n        }\n        fclose(file);\n        return true;\n    }\n    return false;\n}\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "disassembly",
    "ollydbg"
  ],
  "user": "Avo18",
  "time": "Aug 29, 2016 at 16:12",
  "comments": [
    {
      "user": "blabb",
      "text": "0002BB55 | 8B 82 F0 00 00 00        | mov eax,dword ptr ds:[edx+F0]                                           |     0002BB5B | 89 45 F0                 | mov dword ptr ss:[ebp-10],eax   your ebp-10 is filled up here it was whatever was there in the [edx+f0]  first define the structure  and its members and then re read the assembly to correlate",
      "time": null
    },
    {
      "user": "Avo18",
      "text": "So if i understand, it well, the F0 is the offset of the structure? Its simular to this assembly:   MOV EDX, DWORD PTR SS:[EBP - 10]    ADD EDX, F0",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "What do you have, in C or C++? (These are 2 different languages.)",
      "time": null
    },
    {
      "user": "blabb",
      "text": "@Avo18 no that is not correct i added an answer take a look )",
      "time": null
    },
    {
      "user": "Avo18",
      "text": "@Rad Lexus below you can find my C++ code",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "the assembly in question has some structure defined and manipulates some members of the structure  \n\nthe code in c/c++ could look something similar to whats shown in source window and the disassembly that you are working with is highlighted in blue \nin the screen shot below\n\n\n\n",
      "votes": "3",
      "user": "blabb",
      "time": "Aug 27, 2016 at 19:20",
      "is_accepted": true,
      "comments": [
        {
          "user": "Abr001am",
          "text": "which tool is this",
          "time": null
        },
        {
          "user": "blabb",
          "text": "Windbg ,,,,,,,,,,",
          "time": null
        }
      ]
    }
  ]
}