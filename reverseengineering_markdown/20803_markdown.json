{
  "title": "How to use windbg to view assembly code of kernel function?",
  "link": "https://reverseengineering.stackexchange.com/questions/20803/how-to-use-windbg-to-view-assembly-code-of-kernel-function",
  "content": "I am using windbg for local kernel debugging. I want to view the disassembly of a kernel function (eg. AuxKlibQueryModuleInformation). I am not familiar with kernel debugging. Please help me do this.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "windbg",
    "kernel"
  ],
  "user": "Kyi Soe Thin",
  "time": "Mar 8, 2019 at 14:10",
  "comments": [],
  "answers_data": [
    {
      "content": "1) you should be aware local kernel debugging is not actual kernel debugging\n2) i hope you have enabled /debug on switch in bcdecdit prior to using local kernel debugging feature\n3) i hope you are aware a third party app is available which does not require setting /debug on switch    \n\nsysinternals livekd \n\ni hope you have properly set the symbol path for downloading symbols using one of the recommended methods like setting an environment variable _NT_SYMBOL_PATH\n\nusage is simple just run windbg ->file->kernel debugging-> local\n\nor from a command line  windbg -kl\n\nissue .reload /f so that windbg downloads the required symbol files aka pdbs to the directory you have already set up in _NT_SYMBOL_PATH\n\nnow you can examine symbols which you need using x command\n\n```\nx *!*aux*     \n\n```\nhere x is the command\nthe * before ! (called bang in windbg )  is a wildcard for module name\nthe * after  ! (called bang in windbg ) is wildcard for partial symbol name    matches\n\nand windbg will show you all the matches for that partially looked up symbols as below \n\n```\nkd> x *!*auxklib*\n81f35962          hidusb!AuxKlibGetBugCheckData (<no parameter info>)\n81f38dfe          hidusb!AuxKlibQueryModuleInformation (<no parameter info>)\n81f38dac          hidusb!AuxKlibInitialize (<no parameter info>)\n81f45bc0          HIDCLASS!AuxKlibGetBugCheckData (<no parameter info>)\n81f4ace6          HIDCLASS!AuxKlibQueryModuleInformation (<no parameter info>)    <<<<<<<<<<<<<\n81f4ac94          HIDCLASS!AuxKlibInitialize (<no parameter info>)\n81f5a696          kbdhid!AuxKlibGetBugCheckData (<no parameter info>)\n81f5dfcc          kbdhid!AuxKlibQueryModuleInformation (<no parameter info>)  <<<<<<<<<<<<<\n81f5df7a          kbdhid!AuxKlibInitialize (<no parameter info>)\n81f66612          mouhid!AuxKlibGetBugCheckData (<no parameter info>)\n81f69e52          mouhid!AuxKlibQueryModuleInformation (<no parameter info>)  <<<<<<<<<<<<<<<<<\n81f69e00          mouhid!AuxKlibInitialize (<no parameter info>)\n88c66ff6          Wdf01000!AuxKlibGetBugCheckData (<no parameter info>)\n88c79686          Wdf01000!AuxKlibQueryModuleInformation (<no parameter info>)  <<<<<<<<<<<<<<<<<<\n88c79634          Wdf01000!AuxKlibInitialize (<no parameter info>)\n88c8b418          WDFLDR!AuxKlibQueryModuleInformation (<no parameter info>)  <<<<<<<<<<<<<\n88c8b3c6          WDFLDR!AuxKlibInitialize (<no parameter info>)\n8957e926          cdrom!AuxKlibGetBugCheckData (<no parameter info>)\n8958949c          cdrom!AuxKlibQueryModuleInformation (<no parameter info>)\n<<<<<\n8958944b          cdrom!AuxKlibInitialize (<no parameter info>)\n8f5af972          i8042prt!AuxKlibGetBugCheckData (<no parameter info>)\n8f5b51ae          i8042prt!AuxKlibQueryModuleInformation (<no parameter info>)\n8f5b515d          i8042prt!AuxKlibInitialize (<no parameter info>)\n8f5c291c          kbdclass!AuxKlibGetBugCheckData (<no parameter info>)\n8f5c701a          kbdclass!AuxKlibQueryModuleInformation (<no parameter info>)\n8f5c6fc8          kbdclass!AuxKlibInitialize (<no parameter info>)\n8f5d46b0          mouclass!AuxKlibGetBugCheckData (<no parameter info>)\n8f5d8da4          mouclass!AuxKlibQueryModuleInformation (<no parameter info>)\n8f5d8d52          mouclass!AuxKlibInitialize (<no parameter info>)\n903f4420          igdkmd32!AuxKlibGetImageExportDirectory (<no parameter info>)\n903f43ca          igdkmd32!AuxKlibGetBugCheckData (<no parameter info>)\n907169cc          igdkmd32!AuxKlibQueryModuleInformation (<no parameter info>)\n90716980          igdkmd32!AuxKlibInitialize (<no parameter info>)\n9aafd0df          srv2!AuxKlibQueryModuleInformation (<no parameter info>)           \n9aafd08e          srv2!AuxKlibInitialize (<no parameter info>)\nkd>\n\n```\nsince AuxKlibQueryModuleInformation is implemented in many modules then it must be some sort of wrapper to some function which needs to be ascertained by disassembling each function possibly a system call \n\nthe uf /c command can disassemble a complete function and shows which child functions are called \n\nif you are using a recent windbg then you can write a javascript to disassemble each function and grep for a common call in all the functions \n\nhere is a sample javascript that you can improvise \n\n```\nfunction exec ( cmdstr ) {\n    return host.namespace.Debugger.Utility.Control.ExecuteCommand( cmdstr );\n}\nfunction log( instr ){\n    host.diagnostics.debugLog( instr + \"  \n\" );\n}\nfunction auximpl() {\n    var auxkqmi = exec( \"x /0 *!*auxklibquerymod*\" )\n    for ( var line of auxkqmi ) {\n        disfun = exec( \"uf /c \" + line )\n        curline = \"\"\n        for ( var a of disfun ) {\n            if( ! ( a.includes( \"Zw\" ) ) ) { \n                curline = a \n            }\n            else {\n                log( a + \"\\t@\\t\" + curline  ) \n                var pstart = (curline.lastIndexOf(\"(\") + 1 )\n                var pend = pstart + 8\n                var prevstr = \"ub \" + curline.substring( pstart,pend  ) + \" l1\"\n                var nextstr = \"u  \" + curline.substring( pstart,pend  ) + \" l1\" \n                var previnst = exec ( prevstr )\n                var nextinst = exec ( nextstr )\n                for ( var [b,c] of [previnst , nextinst] ) {\n                    log ( b )\n                    log ( c )\n                }\n            }\n        }        \n    } \n}\n\n```\nresults will be as follows\n\n```\nkd> dx @$scriptContents.auximpl()\n    call to nt!ZwQuerySystemInformation (8286623c)  @     Wdf01000!AuxKlibQueryModuleInformation+0x8c (87218712):\nWdf01000!AuxKlibQueryModuleInformation+0x8a:\n87218710 6a0b            push    0Bh\nWdf01000!AuxKlibQueryModuleInformation+0x8c:\n87218712 ff15b8722087    call    dword ptr [Wdf01000!_imp__ZwQuerySystemInformation (872072b8)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     WDFLDR!AuxKlibQueryModuleInformation+0x8c (8722a4a4):\nWDFLDR!AuxKlibQueryModuleInformation+0x8a:\n8722a4a2 6a0b            push    0Bh\nWDFLDR!AuxKlibQueryModuleInformation+0x8c:\n8722a4a4 ff157c802287    call    dword ptr [WDFLDR!_imp__ZwQuerySystemInformation (8722807c)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     cdrom!AuxKlibQueryModuleInformation+0x8c (87ad1528):\ncdrom!AuxKlibQueryModuleInformation+0x8a:\n87ad1526 6a0b            push    0Bh\ncdrom!AuxKlibQueryModuleInformation+0x8c:\n87ad1528 ff150871ac87    call    dword ptr [cdrom!_imp__ZwQuerySystemInformation (87ac7108)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     i8042prt!AuxKlibQueryModuleInformation+0x8c (8d4d323a):\ni8042prt!AuxKlibQueryModuleInformation+0x8a:\n8d4d3238 6a0b            push    0Bh\ni8042prt!AuxKlibQueryModuleInformation+0x8c:\n8d4d323a ff1574e14c8d    call    dword ptr [i8042prt!_imp__ZwQuerySystemInformation (8d4ce174)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     kbdclass!AuxKlibQueryModuleInformation+0x8c (8d4e50a6):\nkbdclass!AuxKlibQueryModuleInformation+0x8a:\n8d4e50a4 6a0b            push    0Bh\nkbdclass!AuxKlibQueryModuleInformation+0x8c:\n8d4e50a6 ff152c114e8d    call    dword ptr [kbdclass!_imp__ZwQuerySystemInformation (8d4e112c)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     mouclass!AuxKlibQueryModuleInformation+0x8c (8d4f1e30):\nmouclass!AuxKlibQueryModuleInformation+0x8a:\n8d4f1e2e 6a0b            push    0Bh\nmouclass!AuxKlibQueryModuleInformation+0x8c:\n8d4f1e30 ff1524e14e8d    call    dword ptr [mouclass!_imp__ZwQuerySystemInformation (8d4ee124)]\n    call to nt!ZwQuerySystemInformation (8286623c)  @     srv2!AuxKlibQueryModuleInformation+0x8c (90d1c16b):\nsrv2!AuxKlibQueryModuleInformation+0x8a:\n90d1c169 6a0b            push    0Bh\nsrv2!AuxKlibQueryModuleInformation+0x8c:\n90d1c16b ff150c63d190    call    dword ptr [srv2!_imp__ZwQuerySystemInformation (90d1630c)]\n@$scriptContents.auximpl()\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Mar 7, 2019 at 17:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "May you explain the #1 about \"live\" kernel debugging vs memory dump.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "debugging a physical machine needs a two computer setup or a physical machine and a vm  (two machine ) with live kernel debugging you can step through , set break points , edit memory , etc with local kernel debugging you are inspecting a state of a local machine it does not require two machines the data may be stale if you have a session that you started 5 hours ago and you have created ten other process in the local machine in the mean while local kernel debugging wont show the processes that were created after you started local kernel debugging etc etc etc",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Would not call livekd a third-party app, considering that Winternals (the company) was bought by Microsoft in 2006 and Mark Russinovich is a technical fellow at Microsoft.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "well subsidiary , sister / daughter concern , ancillary , whatever  the point is it is still delivered as sysinternals product and not  © microsoft ® corporation",
          "time": null
        }
      ]
    }
  ]
}