{
  "title": "IDA decompiler macro",
  "link": "https://reverseengineering.stackexchange.com/questions/11621/ida-decompiler-macro",
  "content": "What is the purpose of COERCE_FLOAT and COERCE_UNSIGNED_INT macros in the Hex Rays decompiled code below?\n\n```\ndouble __cdecl sub_401580(float a1)\n{\n  unsigned int v1; // eax@1\n  double v2; // st7@1\n  float v4; // [sp+10h] [bp+4h]@1\n  float v5; // [sp+10h] [bp+4h]@1\n\n  v1 = LODWORD(a1) & 0x80000000;\n  v4 = 1.273239493370056 * a1 - a1 * 0.4052847325801849 * COERCE_FLOAT(LODWORD(a1) & 0x7FFFFFFF);\n  v2 = v4;\n  v5 = v4 * v4;\n  return (float)(v5\n               * ((v5 * COERCE_FLOAT(v1 ^ COERCE_UNSIGNED_INT(-0.0032225901))\n                 + COERCE_FLOAT(v1 | COERCE_UNSIGNED_INT(0.015124941)))\n                * v5\n                + COERCE_FLOAT(v1 | COERCE_UNSIGNED_INT(0.20363937)))\n               + v2 * 0.7844448685646057);\n}\n\n```\n",
  "votes": "2",
  "answers": 3,
  "views": "3k",
  "tags": [
    "ida",
    "hexrays",
    "decompiler",
    "float"
  ],
  "user": "Arun",
  "time": "Dec 30, 2015 at 19:15",
  "comments": [
    {
      "user": "tmr232",
      "text": "What is the question?",
      "time": null
    },
    {
      "user": "blabb",
      "text": "that is the question :P",
      "time": null
    },
    {
      "user": "Arun",
      "text": "macro doing ? COERCE_FLOAT and COERCE_UNSIGNED_INT",
      "time": null
    },
    {
      "user": "Arun",
      "text": "please help me to simply the code",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "COERCE_TYPE(x) is the same thing as *(TYPE *)&x. Hex-Rays uses COERCE_... macros when &x is illegal. For example:\n\n```\nCOERCE_DOUBLE(__PAIR__(i1,i2))\n\n```\nIs the same as *(double *)&__PAIR__(i1, i2), but since & can not be applied to calls, we end up seeing COERCE.\n\nIts name correctly conveys its meaning.\n\n",
      "votes": "6",
      "user": "perror",
      "time": "Jan 17, 2019 at 16:15",
      "is_accepted": false,
      "comments": [
        {
          "user": "blabb",
          "text": "Are You The Ilfak Guilfanov ?  Welcome to RESE",
          "time": null
        }
      ]
    },
    {
      "content": "I'd read this (and probably it is a mistake) as treating binary content of the variable as a variable of another type, something like this:\n\nAs far as I remember 32 bit platforms treating unsigned int and float as a values of 4 bytes length.\n\n",
      "votes": "1",
      "user": "w s",
      "time": "Jan 18, 2016 at 14:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "Arun",
          "text": "Thanx for Your Answer, where all these macro defined in ida decompiler, is there any header file",
          "time": null
        },
        {
          "user": "w s",
          "text": "I don;t know anything about header file where ii is defined. It is only suggestion.",
          "time": null
        },
        {
          "user": "bravosierra99",
          "text": "I'm with @Arun, I would love to know where these macros are defined so I can go look them up.",
          "time": null
        }
      ]
    },
    {
      "content": "coerce_* functions are generally a little more coercive that a simple casting, I would assume their meaning as follows:\n\n```\n   #define VALUE_SIZE (sizeof(int))\n\nstruct VALUE_TYPE {\n    char contents[VALUE_SIZE];\n};\n\nstruct VALUE_TYPE COERCE_FLOAT(float arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n\nstruct VALUE_TYPE COERCE_INT(int arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n\nstruct VALUE_TYPE COERCE_UNSIGNED_INT(unsigned int arg) {\n    struct VALUE_TYPE rv;\n    memcpy(&arg, rv.contents, sizeof arg);\n    return rv;\n}\n\n```\nsource: https://stackoverflow.com/a/37198532/912236\n\nThe reason for their use may relate to how the ABI passes floats vs how it passes integers.  There is no difference in Windows 32-bit code (either stdcall or cdecl), but in x64 float's and integers are passed in different registers.\n\nIt's possible that those macro may make no difference to compilation of a 32-bit target, and are just there to ensure (or inform the reader/compiler) of the expected type, but that's pure conjecture on my part.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}