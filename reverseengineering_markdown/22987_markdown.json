{
  "title": "Memory modified at jump far",
  "link": "https://reverseengineering.stackexchange.com/questions/22987/memory-modified-at-jump-far",
  "content": "Observing a trace of Wow64 switching on Windows 7, the following situation makes me confused\n\n```\n...\n0x77491dbe  64 ff 15 c0 00 00 00  call fs:[0xc0]          ; syswow64  \ntdll.dll\n0x74632320  ea 1e 27 63 74 33 00  jmp far 0x33:0x7463271e ; system32\\wow64cpu.dll\n0x7463271e  67 44 8b 04 24        mov r8d, [esp]          ; system32\\wow64cpu.dll\n...\n\n```\nThe first instruction is something similar with X86SwitchTo64BitMode, the second one is a switch back to 64-bit mode. So wow64cpu.dll has been actually mapped into two different code segments: cs = 23 for compat mode (second instruction) and cs = 33 for 64-bit mode (third instruction). \n\nHowever I cannot find the second instruction (jmp far...) in the corresponding dll. There are ea 1e 27 b6 78... at 0x74632320, not ea 1e 27 64... as being observed in the trace.\n\nWas wow64cpu.dll modified when being mapped into the memory?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "138",
  "tags": [
    "windows",
    "x86",
    "x86-64",
    "tracing"
  ],
  "user": "Ta Thanh Dinh",
  "time": "Jan 13, 2020 at 16:10",
  "comments": [],
  "answers_data": []
}