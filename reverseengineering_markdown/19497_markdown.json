{
  "title": "gdb don't break when I use exec-wrapper script to exec my target binary",
  "link": "https://reverseengineering.stackexchange.com/questions/19497/gdb-dont-break-when-i-use-exec-wrapper-script-to-exec-my-target-binary",
  "content": "Why gdb doesn't break when I use exec-wrapper script to exec my target binary.\n\nHere my little test.\n\nI use a binary with no pie option to use predictable address.\n\n```\n$ gcc -no-pie main.c\n\n```\nI have this litle gdb exec wrapper script.\n\n```\n$ cat wrapper.sh \n#!/bin/bash\n\nenv -i ./a.out\n\n```\nThen I debug my program like this, by setting the exec-wrapper variable and a debug breakpoint at *main, the breakpoint doesn't work:\n\n```\n$ gdb -q ./a.out \nReading symbols from ./a.out...(no debugging symbols found)...done.\n(gdb) b *main\nBreakpoint 1 at 0x401126\n(gdb) set exec-wrapper ./wrapper.sh\n(gdb) r\nStarting program: /home/snake/gdb-test/a.out \nboum !\nDuring startup program exited normally.\n(gdb)\n\n```\nHere the same example without exec-wrapper variable set and a debug breakpoint at *main, the breakpoint works:\n\n```\n$ gdb -q ./a.out \nReading symbols from ./a.out...(no debugging symbols found)...done.\n(gdb) b *main\nBreakpoint 1 at 0x401126\n(gdb) r\nStarting program: /home/snake/gdb-test/a.out \n\nBreakpoint 1, 0x0000000000401126 in main ()\n(gdb) \n\n```\nWhy in the first case the breakpoint not work?\n\nMaybe gdb is not attached to the process run by my exec wrapper script.\n\nThank's for your help.\n\nThank's @ws, your reminder and point of view is interesting.\n\nI use env -i in order to start the program in an empty environment in order to have a predictable stack in a non randomized address space, in/out of gdb and in any path. But GDB lack of options to configure the binary name with a relative path to pass to argv[0] and other variables pushed on the stack will cause a stack offset according the directory location the execution context.\n\nSo I have build this little wrapper to overcome the problem. Maybe dirty, but work well.\n\n```\n#include <unistd.h>\n\nint main()\n{\n  int e;\n  char *envp[] = { NULL };\n  char *argv[] = { \"./a.out\", NULL };\n\n  e = execve(\"./a.out\", argv, envp);\n}\n\n```\nthen \n\n```\n$ gcc exec_wrapper.c -o exec_wrapper\n\n```\nand finaly\n\n```\n$ gdb -q ./a.out \nReading symbols from ./a.out...(no debugging symbols found)...done.\n(gdb) set exec-wrapper ./exec_wrapper\n(gdb) b *main\nBreakpoint 1 at 0x1149\n(gdb) r\nStarting program: /home/snake/gdb-test/a.out \n\nBreakpoint 1, 0x0000555555555149 in main ()\n(gdb)\n\n```\nSo I don't understand your answer very well @ws, my executable name is directly encoded in the binary, and it works well. If I understand the behavior of gdb, normally GDB monitors for the first process trap execve() start by the shell to follow it. In the case of exec-wrapper is configure, it follow the second execve(). (thank's to a friend for show me this behavior).\n\ngdb/nat/fork-inferior.h\n\n```\n/* Number of traps that happen between exec'ing the shell to run an\n   inferior and when we finally get to the inferior code, not counting\n   the exec for the shell.  This is 1 on all supported\n   implementations.  */\n#define START_INFERIOR_TRAPS_EXPECTED 1\n\n```\ngdb/nat/fork-inferior.c\n\n```\n  /* The process was started by the fork that created it, but it will\n     have stopped one instruction after execing the shell.  Here we\n     must get it up to actual execution of the real program.  */\n  if (get_exec_wrapper () != NULL)\n       pending_execs++;\n\n```\nMaybe I doesn't understand your answer @ws. sorry. you meant to say that gdb performs string comparison of the binary name with full path with the argv[0] of the execve() call?  \n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "gdb"
  ],
  "user": null,
  "time": "Oct 3, 2018 at 9:41",
  "comments": [
    {
      "user": "w s",
      "text": "Why not \"set exec-wrapper env -i \" ? It looks like that with a wrapper bash script your wrapper appears to be bash (because of shebang) - and it doesn't load the executable directly, which doesn't fit to the definition of gdb execution wrapper and may lead to the specified behavior.",
      "time": null
    },
    {
      "user": "user23611",
      "text": "Yes, with \"set exec-wrapper env -i \" it works well, nice. Maybe my use of exec-wrapper is not good. thank's. This  behaviour is fixed for me. But I realize, is not the good answer for what I search. I will close this thread and open an other. by",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@ws it might still be interesting to explain the difference in the behavior here. Can you add an answer with the explanation? (maybe also mention what ‘env -i’ does)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In short, it is bad exec-wrapper.\nExec-wrapper is defined (for example, here) as \n\nAs far as I can tell, your shell script doesn't fit \n\nand therefore will not work.\n\nSome explanations:\n\nFor the start, some definitions.\n\nIf gdb intercepts the execve system call of the debugged process with ptrace (as far as I understand it should do it this way), it can not find your executable name in the system call parameters (because it is directly encoded into your script) and therefore not performs setting the breakpoint.\n\n",
      "votes": "4",
      "user": "w s",
      "time": "Oct 3, 2018 at 6:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}