{
  "title": "Forcing a call to an object instance method",
  "link": "https://reverseengineering.stackexchange.com/questions/3688/forcing-a-call-to-an-object-instance-method",
  "content": "I've instrumented an application using Frida.RE. I can hook the constructor of a C++ class of my interest, let's call this MyClass::MyClass(). \n\nI want to call the non-static MyClass::SomeMethod() on an object instance. To do this I need to have the address of the object instance so I can pass it to the method as the implicit 'this' argument. \n\nIs there a way to monitor the addresses of the created instances of MyClass?\n\nOr is there some other way to call the SomeMethod() method of an already instantiated object?\n\nUpdate:\n\nI tried to simply record the 0th argument passed to the constructor with Frida (args[0]), but I couldn't access the this pointer, only the first \"real\" argument (passed explicitly by the caller). \n\nI can think of two things: \n\n",
  "votes": "3",
  "answers": 2,
  "views": "2k",
  "tags": [
    "c++",
    "instrumentation"
  ],
  "user": "buherator",
  "time": "Feb 20, 2014 at 13:40",
  "comments": [
    {
      "user": "buherator",
      "text": "@DCoder correct",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "First parameter of the constructor is the memory allocated for the object.\n(Usually stored at r0 for ARM and thumb).\nSo the way to monitor it is simple: instrument all constructors of the class and watch the first constructor parameter.\n\n",
      "votes": "2",
      "user": "w s",
      "time": "Feb 17, 2014 at 12:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "buherator",
          "text": "Thank you for your answer. Unfortunately it doesn't fit my problem, I'm updating my question with the details about why.",
          "time": null
        }
      ]
    },
    {
      "content": "I was also struggling with this, until I realized that if the function uses a custom calling convention. args[n] assumes the default calling convention. For custom calling conventions, in this case __thiscall scheme, the pointer to this is on ecx register (accessible through this.context.ecx).\n\nHope this helps anyone!\n\n",
      "votes": "1",
      "user": "Jossec101",
      "time": "May 7, 2020 at 22:22",
      "is_accepted": false,
      "comments": []
    }
  ]
}