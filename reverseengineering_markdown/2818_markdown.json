{
  "title": "Is the output of the gcc compilers the same for all ARM platforms?",
  "link": "https://reverseengineering.stackexchange.com/questions/2818/is-the-output-of-the-gcc-compilers-the-same-for-all-arm-platforms",
  "content": "Trying to understand how the code is converted in ARM platform from code to binary. Are the gcc compilers used in the different ARM platforms (iOS, Android, Blackberry) the same compiler, except that the header and library files are different? Or are they totally different compilers?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "521",
  "tags": [
    "arm"
  ],
  "user": "tuckmeng",
  "time": "Sep 21, 2013 at 0:32",
  "comments": [
    {
      "user": "ixje",
      "text": "iOS used to be mainly GCC, nowadays its LLVM+Clang.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "While the \"GCC compiler\" may be the same software (generally speaking), the specific instances used for compiling code here and there can produce quite different output.\n\nSo, in short: no, the output is almost never the same. \n\n",
      "votes": "10",
      "user": "Igor Skochinsky",
      "time": "Sep 21, 2013 at 13:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There are several different calling conventions around on ARM platforms. They vary both according to the processor features (for example, on processors with floating point registers (VFP), it's more efficient to pass floats around in them, but you lose compatibility with processors without VFP) and according to the operating system.\n\nA given installation of an operating system defines one calling convention that all programs must use: the calling convention used by the standard library. Occasionally there may be more than one calling convention on a given system; this requires copies of all libraries for each calling convention.\n\nThe Android NDK comes with a toolchain including a C compiler (a version of GCC). This version of GCC is set up for Android's calling convention. There is a separate toolchain for the kernels (the kernel doesn't need to use the same conventions since there are no direct function calls between userland programs and the kernel).\n\niOS has several calling conventions for different processor versions. They are described in the iOS ABI function call guide.\n\n",
      "votes": "6",
      "user": "Gilles 'SO- stop being evil'",
      "time": "Sep 21, 2013 at 1:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}