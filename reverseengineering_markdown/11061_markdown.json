{
  "title": "IDA Pro user-defined offsets (again)",
  "link": "https://reverseengineering.stackexchange.com/questions/11061/ida-pro-user-defined-offsets-again",
  "content": "I'm disassembling a simple Z80 program and can't for the life of me work out how to - successfully - specify a user-defined offset.\n\nI have a line of code as:\n\n```\nld de, #0x6058\n\n```\nand FTR, this address lies outside the address range of defined segments, however my 'suspiciousness' range is set to $0000-$FFFF.\n\nNow I want to display this as the offset from an address label, ie.\n\n```\nld de, #screen2-15424\n\n```\nwhere, FWIW, screen2 is the named address 0x9C98.\n\nSo I try to change the operand to a user-defined offset, TYPE=OFF16, BASE=screen2 and DELTA=0 (target automatically calculated). However the result is the same (original) line but with 0x6058 in RED.\n\nNothing I try seems to produce what I want, other than a MANUAL operand type which works but is prone to human error because there is no automatic check. What am I missing here? I would think that this is basic functionality that most people would want? The only examples I can find are complex C-code decompilations on Intel/ARM architecture.\n\nTIA\n\n",
  "votes": "2",
  "answers": 0,
  "views": "1k",
  "tags": [
    "ida",
    "disassembly",
    "binary-analysis"
  ],
  "user": "Mark McDougall",
  "time": "Oct 8, 2015 at 13:59",
  "comments": [
    {
      "user": "w s",
      "text": "You can add a segment for this, so it will not be red and it will be xref-able. Look also here reverseengineering.stackexchange.com/questions/6651/â€¦",
      "time": null
    },
    {
      "user": "Mark McDougall",
      "text": "Doesn't help. In fact I've got similar examples that do resolve to addresses within defined segments. Same issue, I can't get it to display 'screen2+/-offset'.",
      "time": null
    }
  ],
  "answers_data": []
}