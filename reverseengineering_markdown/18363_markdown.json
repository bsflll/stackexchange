{
  "title": "What does _PAIR_ macro do with standard handles?",
  "link": "https://reverseengineering.stackexchange.com/questions/18363/what-does-pair-macro-do-with-standard-handles",
  "content": "I've seen this question which says __PAIR__ macro does some conditional computation. But I can not relate that with standard I/O handles. Here is the pseudocode in IDA:\n\n```\nif ( (char *)hConout - 1 <= (char *)0xFFFFFFFFFFFFFFFDi64 ) {\nConfigureStdHandles((PHANDLE)handle);\nv175 = __PAIR__(1, (unsigned int)handle[0]);\nv176 = __PAIR__(2, (unsigned int)handle[1]);\nv177 = __PAIR__(2, (unsigned int)handle[2]);\n\n```\nHere is the corresponding Assembly:\n\n```\nloc_1400088CA:                          ; CODE XREF: wmain+FBF↑j\nmov     [rsp+418h+handle+18h], rsi\nlea     rax, [rsi-1]\ncmp     rax, 0FFFFFFFFFFFFFFFDh\nsetbe   al\nmov     rcx, [rsp+418h]\ntest    al, al\njz      loc_140008BAD\nlea     rcx, [rsp+418h+handle] ; hIn\ncall    _ConfigureStdHandles\nmov     esi, 1\nmov     dword ptr [rsp+418h+var_268+4], esi\nmov     eax, dword ptr [rsp+418h+handle]\nmov     dword ptr [rsp+418h+var_268], eax\nmov     dword ptr [rsp+418h+var_260+4], 2\nmov     eax, dword ptr [rsp+418h+handle+8]\nmov     dword ptr [rsp+418h+var_260], eax\nmov     dword ptr [rsp+418h+var_258+4], 2\nmov     eax, dword ptr [rsp+418h+handle+10h]\nmov     dword ptr [rsp+418h+var_258], eax\ncmp     [rsp+418h+var_230], r15b\njz      short loc_140008958\nmov     [rsp+418h+var_268], r15\nloc_140008958:  \n\n```\nThe handles are for standard input, output and error respectively. Can you explain what does the __PAIR__ macro do with those handles?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "165",
  "tags": [
    "disassembly"
  ],
  "user": "Biswapriyo",
  "time": "May 25, 2018 at 18:27",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "show the corresponding asm",
      "time": null
    },
    {
      "user": "blabb",
      "text": "it appears like highpart(qword( x) = var; lowpart(qword(x) - another var;",
      "time": null
    },
    {
      "user": "blabb",
      "text": "nothing   take a look at _LARGE_INTEGER structure  and see  the low part and high part and also as a qword",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "__PAIR__ represents a 64-bit value constructed from two 32-bit values. Because you have 64-bit variables (var_260 etc) being initialized by halves, decompiler detected a 64-bit move pattern and represented the right-hand side it as __PAIR__ helper. If you think it's wrong, you can fix it by:\n\nEDIT I suspect that those stack variables are not 64-bit integers but actually small structs of two members, e.g.\n\n```\nstruct handle_desc {\n  int handle;\n  int index;\n}\n\n```\nmaybe look at how they’re used later in the code.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "May 25, 2018 at 20:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "After splitting v175 = __PAIR__(1, (unsigned int)handle[0]); becomes HIDWORD(v175) = 1; LODWORD(v175) = handle[0];.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "yes, because the stkvar is still a 64-bit integer but high and low parts of it are being accessed separately.",
          "time": null
        },
        {
          "user": "Biswapriyo",
          "text": "How did you guess handle will be first member then index?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "because handles are assigned to the low part of the variable. but you could try both and see which one works better.",
          "time": null
        }
      ]
    }
  ]
}