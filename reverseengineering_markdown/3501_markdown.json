{
  "title": "Can a process disable UAC via WinAPI without prompting the user? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/3501/can-a-process-disable-uac-via-winapi-without-prompting-the-user",
  "content": "Is it possible for a running process to turn off User Account Control (UAC) via a Windows API call? If so, which API calls are needed?  \n\nI found this interesting question/answer on stackoverflow, however, I'm interested if there is some other way to do it.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "827",
  "tags": [
    "windows",
    "winapi"
  ],
  "user": "Benny",
  "time": "11 years ago",
  "comments": [
    {
      "user": "Polynomial",
      "text": "It seems what they're talking about is indeed voodoo, as installing a SYSTEM-level service requires UAC elevation anyway.",
      "time": null
    },
    {
      "user": "Stolas",
      "text": "Offtopic-should be on Security EX",
      "time": null
    },
    {
      "user": "Benny",
      "text": "@Stolas true the question is security related, however, I saw it more as reverse engineering the sequence of system events and calls that are involved in switching UAC off. For instance, this sequence could involve UI events and actions using the MS Windows UI Automation accessibility framework. I was also interested in an answer along the lines of using a zero-day like you pointed out. Thanks",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This seems like a security ex question instead of one about reverse engineering. Therefore I'd keep my answer short.\n\nThis should not be possible. Simply as malware would abuse this, what you could do if you want this is find a 0day in kernel space and get SYSTEM privileges. Back in 2010 there was someone from China who has posted a method on the code project(if I recall correctly). It's now hosted on the exploit-db..\n\nhttp://www.exploit-db.com/bypassing-uac-with-user-privilege-under-windows-vista7-mirror/\n\nGoodluck on your research.\n\n",
      "votes": "3",
      "user": "Stolas",
      "time": "Jan 21, 2014 at 7:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Remember, Microsoft has since the announcement, but before the introduction of UAC, stepped down from the claim that UAC is a security feature. And it really isn't, as has been proven over the years.",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "@0xC0000022L I never knew Microsoft made this statement. Interesting fact.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@Stolas: basically, from what I gathered back then, it must have been Russinovich who made it clear to their marketing department. Example report: news.techworld.com/security/8031/… and the origins (I think): blogs.technet.com/b/markrussinovich/archive/2007/02/12/… and technet.microsoft.com/en-us/magazine/2007.06.uac.aspx",
          "time": null
        }
      ]
    }
  ]
}