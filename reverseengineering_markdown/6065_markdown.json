{
  "title": "Semantics of the RRX shift instruction in ARM and Carry flag updates?",
  "link": "https://reverseengineering.stackexchange.com/questions/6065/semantics-of-the-rrx-shift-instruction-in-arm-and-carry-flag-updates",
  "content": "Still looking at ARM assembler semantics (and, I try hard to read the specification, I ensure you!!!). I have some doubts about the ARM bit-shift instructions in general and RRX in particular.\n\nLets start with RRX. \n\nFrom Davespace, Introduction to ARM, section Barrel Shifter, we see that RRX correspond to:\n\n\n\nI suppose the C to be the carry flag found in the CPSR, is it correct ?\n\nSecond question, in the case of the following instruction:\n\n```\nands   r9, r0, r0, ror #3\n\n```\nI read that the carry flag (C) is set to the value of the last bit shifted out by the shifter operand (here ROR). \n\nMy problem is that the ands is also supposed to update the CPSR because of its flag s. So, who is winning at the end ? And, what is left in the final carry flag ? The value resulting of AND or the value resulting of ROR ?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "3k",
  "tags": [
    "assembly",
    "arm"
  ],
  "user": "perror",
  "time": "Aug 13, 2014 at 13:30",
  "comments": [
    {
      "user": "perror",
      "text": "I know that I should try, but I have no easy ARM platform with a debugger at hand reach by now... (though an ARM QEmu could do it as well...).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Pseudocode of the AND (register) instruction from the ARM ARM:\n\n```\nif ConditionPassed() then\n    EncodingSpecificOperations();\n    (shifted, carry) = Shift_C(R[m], shift_t, shift_n, APSR.C);\n    result = R[n] AND shifted;\n    if d == 15 then // Can only occur for ARM encoding\n        ALUWritePC(result); // setflags is always FALSE here\n    else\n        R[d] = result;\n        if setflags then\n            APSR.N = result<31>;\n            APSR.Z = IsZeroBit(result);\n            APSR.C = carry;\n            // APSR.V unchanged\n\n```\nAs you can see, APSR.C is set to the result of the shift operation, not the AND operation.\n\nNow, AND is pretty straightforward but in case of e.g. ADD you may have carry affected by both the shift and the add. So what happens? Again, ARM ARM to the rescue:\n\n```\nif ConditionPassed() then\n    EncodingSpecificOperations();\n    shift_n = UInt(R[s]<7:0>);\n    shifted = Shift(R[m], shift_t, shift_n, APSR.C);\n    (result, carry, overflow) = AddWithCarry(R[n], shifted, APSR.C);\n    R[d] = result;\n    if setflags then\n        APSR.N = result<31>;\n        APSR.Z = IsZeroBit(result);\n        APSR.C = carry;\n        APSR.V = overflow;\n\n```\nThe answer: the add \"wins\" and the carry of the shift operation is discarded.\n\nBTW, a good page to check what happens for each concrete instruction is here. For example:\n\n```\nands r9, r0, r0, ror #3\nmachine code: E01091E0\n...\ncpsr.N  ←   (r0 AND r0 ROR 3)<31>\ncpsr.Z  ←   r0 AND r0 ROR 3 = 0\ncpsr.C  ←   #CARRY (ROR_C (r0,3))\nr9  ←   r0 AND r0 ROR 3\nr15 ←   r15 + 4\n\n\nadds r9, r0, r0, ror #3\nmachine code: E09091E0\n...\ncpsr.N  ←   (r0 + r0 ROR 3)<31>\ncpsr.Z  ←   r0 + r0 ROR 3 = 0\ncpsr.C  ←   #CARRY (AddWithCarry (r0,r0 ROR 3,False))\ncpsr.V  ←   #OVERFLOW (AddWithCarry (r0,r0 ROR 3,False))\nr9  ←   r0 + r0 ROR 3\nr15 ←   r15 + 4\n\n```\n",
      "votes": "3",
      "user": "perror",
      "time": "Aug 13, 2014 at 14:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "Igor, if I meet you in real life at some point, remember me to offer you a drink (what ever you want!). :-)",
          "time": null
        }
      ]
    }
  ]
}