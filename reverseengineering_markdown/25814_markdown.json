{
  "title": "Structure of operand bytes in .NET call and data access IL instructions?",
  "link": "https://reverseengineering.stackexchange.com/questions/25814/structure-of-operand-bytes-in-net-call-and-data-access-il-instructions",
  "content": "I tried googling but couldn't find any good source that explains the structure of memory access instructions like ldstr and call instructions\n\nfor example based on experience, the last byte of API/library call instructions is always 0x0A (let me know if I'm wrong), but why? what are the structure of the 4 bytes of call operands? what about operands of ldstr instructions?\n\nbecause they are different from native apps, they are not raw offsets, they seem to be offsets into a table but i cannot find any post that explains this in detail?\n\nthe best thing i found is this :\n\nhttps://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\n\nbut it still doesn't explain many things\n\n",
  "votes": "2",
  "answers": 1,
  "views": "126",
  "tags": [
    "ida",
    "windows",
    "malware",
    ".net"
  ],
  "user": "OneAndOnly",
  "time": "Sep 4, 2020 at 14:47",
  "comments": [],
  "answers_data": [
    {
      "content": "It's because calls needs to have method (ref) as a parameter and methods are defined in the table that has an id of 0x0A.\n\nHaving bytes of the call like this 280600000A let's go one by one.\n\nBut why 0x0A is at the end? It should be read as a little-endian so the value should be 0x0A000006. But what are the bytes?\n\nFrom Wikipedia:\n\nSo the first value is the table id - and as I've mentioned the id of member's ref table is value 0x0A. And the rest is an index in the table (in our case 0x6).\n\nMore about the tables? Those are basically part of .NET metadata information, that can be seen when you open one in i.e. dnSpy\n\n\n\nAs one can see 0x0A is assigned to the MemberRef (containing both methods and fields references)\n\nIn this instance, the instruction has the following structure 72XXXX0070 and 0x70 indicates different stream - namely User defined strings or #US. The rest (again interpreted as a little-ending 32-bit val) is the offset (in bytes) in #US table.\n\nGenerally dnSpy is a great tool to verifying those values as one can metadata tables.\n\nThe linked article (and the whole series is a great resource)  it does explain (I think) the structure but maybe indirectly - just find the information about metadata token.\n\nWe can induce from it the whole structure of a metadata token.\n\n",
      "votes": "4",
      "user": "Paweł Łukasik",
      "time": "Sep 6, 2020 at 6:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "OneAndOnly",
          "text": "Thanks for the great explanation, do you happen to know any other good reference or even a book that explains everything about structure of .NET files/IL instructions in a very detailed manner?  what is the most detailed reference?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "Not sure if I can provide one reference. It is something I acquired by reading & exploring multiple sources.",
          "time": null
        },
        {
          "user": "OneAndOnly",
          "text": "Multiple sources are fine too, would appreciate if you can share them.",
          "time": null
        }
      ]
    }
  ]
}