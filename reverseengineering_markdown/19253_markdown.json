{
  "title": "What is _bittest macro?",
  "link": "https://reverseengineering.stackexchange.com/questions/19253/what-is-bittest-macro",
  "content": "Here is an example of the bt instruction in a X64 Windows binary:\n\n```\nbt      eax, 18h\njnb     short loc_a\nlea     rcx, String\ncall    cs:__imp_wprintf\nmov     eax, [rbx+40h]\n\n```\nIn pseudocode:\n\n```\nif ( _bittest(&Mode, 0x18u) )\n{\n  wprintf(L\"String\");\n  Mode = Properties->Mode;\n}\n\n```\nWhat is the _bittest macro used in a IF statement? Is it similar with if(a & b == b) or something? The code if(a & b == b) is used for checking if a flag is present in an OR-ed flag. And from debugging, I found the above assembly code is doing something like that. \n\n",
  "votes": "2",
  "answers": 3,
  "views": "1k",
  "tags": [
    "disassembly"
  ],
  "user": "Biswapriyo",
  "time": "Sep 4, 2018 at 16:00",
  "comments": [],
  "answers_data": [
    {
      "content": "It tests if the nth bit is set, returns true if set, false if not set.\n\nIt's basically the same as if(a & (1 << num_bit)) as the argument is the number of the bit to test rather than the bit (or flag if you will) itself.\n\n",
      "votes": "3",
      "user": "Johann Aydinbas",
      "time": "Sep 4, 2018 at 16:44",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "_bittest is a compiler intrinsic which maps to the bt instruction:\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Sep 5, 2018 at 12:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "bt is an x86 instruction to check if a bit is set in a number/value. It sets CF flag as the value of that bit and you can use jb/jnb/jc/jnc to check if its 1/0.\n\n```\nbt      eax, 18h\n\n```\nAs already mentioned in @Johann's answer, its equivalent to python \n\n```\nCF = (eax & (1 << 0x18)) >> 0x18\n\n```\nI have added some code for you to play with it here.\n\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Sep 5, 2018 at 8:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}