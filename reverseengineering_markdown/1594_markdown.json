{
  "title": "What are the possibilities for reverse engineering an IPA file to its source?",
  "link": "https://reverseengineering.stackexchange.com/questions/1594/what-are-the-possibilities-for-reverse-engineering-an-ipa-file-to-its-source",
  "content": "I browsed a lot, but can't find any resources for reverse engineering an IPA file (iPhone application). Is there any method to reverse engineer an IPA file to its source? I've tried to rename it to zip and open it via Winrar/Winzip to view its source, but it doesn't seem helpful.\n\nWhat are the possibilities to decompile/reverse engineer an IPA file to its source code?\n\n",
  "votes": "72",
  "answers": 7,
  "views": "144k",
  "tags": [
    "decompilation",
    "ios"
  ],
  "user": "BlueBerry - Vignesh4303",
  "time": "Nov 7, 2021 at 10:02",
  "comments": [
    {
      "user": "NoPurposeInLife",
      "text": "Requires a jailbroken iphone 1. In cydia -> Sources -> edit-> Add -> cydia.iphonecake.com 2. In cydia -> Download CrackerXI+ & Install CrackerXI+ 3. In CrackerXI -> Settings -> Enable CrackerXI Hook 4. In Apps -> click the App 5. SSH to Iphone (ssh root@<IP_Address>) -> Download the IPA",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If the IPA file is straight from iTunes/iPhone (without any modification), the code section in the binary (as indicated by the Info.plist) is encrypted with FairPlay (Apple's proprietary DRM). If you are unsure, you can check whether the cryptid bit is set with otool (see this page).\n\n```\notool -arch armv7 -l thebinary | grep crypt\n\n```\n(where thebinary is the executable binary - see the app's Info.plist, CFBundleExecutable key)\n\nPre Decryption:\n\nif cryptid is 0, you can proceed on to the Post Decryption section. Otherwise, you will need to decrypt the app. The typical method in brief (with a jailbroken iOS device) is to\n\nThere are many tools of dubious purposes (piracy) which automates the process, however the above is the gist of how the process is done.\n\nPost Decryption:\n\nYou can begin reverse engineering the code when you have access to an unencrypted copy of the binary.\n\nOne possible tool is IDA Pro (Free version does not support ARM).\nIt may still be quite messy since much of iOS's code works with objc_sendMsg(). This IDA plugin may help: https://github.com/zynamics/objc-helper-plugin-ida\n\nWhen you are patching functions, an easier way to work (if you know Objective-C) is to use MobileSubstrate to hook the relevant functions. See Dustin Howett's theos if you would like to try this method.\n\nUseful Links:\n\nMore about the decryption process: http://iphonedevwiki.net/index.php/Crack_prevention\n\nGetting otool: https://apple.stackexchange.com/questions/21256/i-cant-find-otool-on-my-jailbroken-ipod\n\nSigning with ldid (since the original signature is made invalid after editing) http://www.saurik.com/id/8\n\nFor newer devices\n\nSome of the tools (gdb in my base) are not working reliably on the iPhone 5S / iOS7. Currently a method that works is to use a popular open-source cracking software \"Clutch\". The actual cracking process can be found here:\nhttps://github.com/KJCracks/Clutch/blob/master/Clutch/Binary.m\n\niOS 11\n\nBishop Fox's bfdecrypt, used together with their bfinject should work for iOS 11.\n\n",
      "votes": "70",
      "user": "Michal Šrůtek",
      "time": "Jun 20, 2021 at 10:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mick",
          "text": "I use Stefan Esser's \"dumpdecrypted\" dylib to decrypt a binary. I find it's much simpler to use than GDB - github.com/stefanesser/dumpdecrypted",
          "time": null
        }
      ]
    },
    {
      "content": "After decrypting an IPA file on a jailbroken iDevice, you can use a much more affordable alternative to IDA Pro called Hopper - the multi-platform disassembler for < $100.\n\nhttps://www.hopperapp.com/\n\nIt has support for analyzing iOS executables (among others) and even comes with the ability to convert ARM assembly to pseudo-C.\n\n\n\n",
      "votes": "22",
      "user": "jkmartindale",
      "time": "Dec 10, 2021 at 21:31",
      "is_accepted": false,
      "comments": [
        {
          "user": "albfan",
          "text": "to use on ubuntu, after add the repo, you need to install libgvc5, add to ldconfig and execute as sudo",
          "time": null
        },
        {
          "user": "adib",
          "text": "But the current version (3) doesn't support 64 bit ARM – too bad, really.",
          "time": null
        }
      ]
    },
    {
      "content": "Other users have done a good job with the elements of this question that are specific to the IPA format.  As for obtaining the source code to a binary object, please see this answer as for why this may be more difficult than you expect (as compared to, say, bytecode language decompilation).\n\n",
      "votes": "11",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you have a jailbroken iDevice, AppSec Labs' iNalyzer can automate some of this process for you as well as provide you with a great way to review an iOS application.adding the appropriate repo\n\nYou can install iNalyzer from Cydia after adding the appropriate repo.\n\nIn my experience, it's easiest to work with the iNalyzer created project files (that you will copy from your iDevice after running iNalyzer) from a Linux machine because the tool will require doxygen and Graphviz Dot to be installed to create it's HTML report.\n\n",
      "votes": "10",
      "user": "Mick",
      "time": "Apr 5, 2013 at 13:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I would recommend checking out Frida. It's an open source instrumentation toolkit for iOS, Android, Windows, Mac and Linux.\n\nCheck out this tutorial to dive in by building your own debugger in 5 minutes using Frida and Qml. The last part shows how to inject code into the “Yo” app and plot its network connections on Google Maps.\n\n",
      "votes": "10",
      "user": "Ole André Vadla Ravnås",
      "time": "Jun 27, 2014 at 22:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "BlueBerry - Vignesh4303",
          "text": "nicely written app,would like to explore more in it,any video tutorial?",
          "time": null
        },
        {
          "user": "Ole André Vadla Ravnås",
          "text": "Not yet unfortunately, only the docs at frida.re, but I'm planning to do more blog posts and tutorials in the time to come. Feel free to drop by #Frida on irc.freenode.net if you have any questions, or shoot me an email to oleavr at gmail dot com.",
          "time": null
        }
      ]
    },
    {
      "content": "dumpdecrypted can automate the decryption of the iOS binary. Additionally, there is a tool called iRET that you can use that automates alot of the analysis and reversing for you. \n\n",
      "votes": "5",
      "user": "perror",
      "time": "Jul 8, 2014 at 20:27",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Rasticrac can also automate the decryption (FairPlay DRM) of the iOS binary and is very easy to use!\n\n",
      "votes": "1",
      "user": "ixje",
      "time": "Dec 30, 2014 at 6:40",
      "is_accepted": false,
      "comments": [
        {
          "user": "Guntram Blohm",
          "text": "While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes.",
          "time": null
        },
        {
          "user": "David L-R",
          "text": "What?! I don't think this is a link ? (;",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Would you mind adding some more content, like how it can do that?",
          "time": null
        },
        {
          "user": "David L-R",
          "text": "You can have a look at this blog, there is a detailed description:  reverseengineeringapps.blogspot.de",
          "time": null
        }
      ]
    }
  ]
}