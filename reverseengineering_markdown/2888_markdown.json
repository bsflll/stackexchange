{
  "title": "How exploit writers find bugs in Java Machine?",
  "link": "https://reverseengineering.stackexchange.com/questions/2888/how-exploit-writers-find-bugs-in-java-machine",
  "content": "My question is about Java exploits, for example this one: https://www.us-cert.gov/ncas/alerts/TA13-010A (exploit avaiable here http://www.securityfocus.com/bid/57246/)\n\nThe victimn should visit the site and accept to run the applet in your computer. Then if the JVM is vulnerable the cracker can execute arbitrary commands.\n\nSo my question is: How did the security researcher find this vulnerability? I mean, not specific this one, but how (what tools, method, etc) did he/she use to find these vulnerabilities? Does he/she reverse engineer javaw.exe? What's the methods?\n\n",
  "votes": "15",
  "answers": 3,
  "views": "2k",
  "tags": [
    "java",
    "exploit",
    "vulnerability-analysis"
  ],
  "user": "jyz",
  "time": "Sep 29, 2014 at 14:24",
  "comments": [
    {
      "user": "Vitaly Osipov",
      "text": "You could read the sources of openjdk.java.net",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It largely depends on what kind of vulnerability. \nThis particular one you mentione is in SecurityManager, and you could have found it relatively easily by analyzing the Java source code. \n\nTo get some idea of how that process is done, take a look at this and this articles by Esteban Guillardoy of Immunity. \n\nJduck has also published some research on memory corruption vulns in JRE.\nYou can get the better picture about how to find a vulnerability by studying the previously published ones.\n\nI remember that LSD-PL folks have done some awesome stuff in this area long time ago, that you can find here. It's a little bit outdated, but still relevant.\n\n",
      "votes": "12",
      "user": "jvoisin",
      "time": "Nov 29, 2013 at 5:13",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Well I myself am an exploit developer. The methods of attack/research are:\n\nAnother method I commonly use is to reverse points of interests (eg SingleSignOne modules, other login methods, database connections (hardcoded passwords etc).\n\nBut this should be on Security Exchange not on reverse engineering.\n\n",
      "votes": "8",
      "user": "Stolas",
      "time": "Oct 5, 2013 at 20:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xea",
          "text": "I don't think security exchange would give a better answer than RE.",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "Agree, as the Security Exchange is not really the technical Security research (exploit development, reversing malware etc) but more the ITIL based, network and common sense security. But still it is not a RCE Question but a security question. I myself still think there should be an exploit development stack exchange.",
          "time": null
        },
        {
          "user": "jyz",
          "text": "Ok but how do you \"Reverse the input values\" ? Did you reverse iexplorer.exe and then the applet?",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "@jyzus windbg break these kernelbase!ReadFile kinds of Symbols and just run the tool. Reverse the flow your input variables go.",
          "time": null
        }
      ]
    },
    {
      "content": "Lots of Java exploits revolve around bypassing the Java sandbox, the Security Manager in Java parlance. Sami Koivu published a lot of interesting work around Java security and exploits, notably his 3 parts introduction to Java security. \n\nhttp://slightlyrandombrokenthoughts.blogspot.ca/2009/02/java-se-security-part-i_25.html\nhttp://slightlyrandombrokenthoughts.blogspot.ca/2009/07/java-se-security-part-ii-immutability.html\nhttp://slightlyrandombrokenthoughts.blogspot.ca/2010/02/java-se-security-part-iii-keys.html\n\n",
      "votes": "4",
      "user": "ekse",
      "time": "Sep 26, 2014 at 16:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}