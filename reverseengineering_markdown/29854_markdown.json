{
  "title": "please explain the difference between the two types of follow",
  "link": "https://reverseengineering.stackexchange.com/questions/29854/please-explain-the-difference-between-the-two-types-of-follow",
  "content": "in file i find\n\n```\nmov rcx,qword ptr ds:[404320]\n\n```\nwhen I wanted to see what is at the address 404320\ni press \"follow in dump\" and i got a choice between \"constant: file.0000000000404320\"\nand \"value: [0000000000404320]\"\nand if i press constant, i see:\n\n```\n0000000000404320  30 2D 40 00 00 00 00 00 00 00 00 00 00 00 00 00  0-@.............  \n\n```\n\"30 2D 40 00 00 00 00 00\" highlighted\n\nif i press value, i see:\n\n```\n0000000000402D30  FF FF FF FF FF FF FF FF D2 15 40 00 00 00 00 00  ÿÿÿÿÿÿÿÿÒ.@.....  \n0000000000402D40  20 2D 40 00 00 00 00 00 00 00 00 00 00 00 00 00   -@.............  \n\n```\n\"D2 15 40 00 00 00 00 00 20 2D 40 00 00 00 00 00\" highlighted\n\nplease can you explain the difference between a value and a constant?\nI am new to this topic. just in case, i know assembler. and if not enough information has been provided tell me.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "336",
  "tags": [
    "x64dbg"
  ],
  "user": "iko",
  "time": "Jan 11, 2022 at 20:41",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "The first one, shows the memory contents at the address of the constant. The latter, first take the value at the memory address pointed by the constant and shows the memory at that location.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "\"Constant\" in this case does not refer to the common programming term \"a value that should not be altered by the program during normal execution\"\n\nIn this scenario \"constant\" means the memory address is directly holding the value of the variable.\n\nThe \"value\" term means the memory address is pointing to another memory address, and that 2nd memory address is pointing to the value.\n\nYou can see this as the memory address for the \"value\" follow is 00 40 2D 30 which is the value shown in the \"constant\" follow 30 2D 40 00\nThe order of numbers is reversed due numbers being stored in little endian format.\n\nTo fully understand whether this is a \"constant\" or a \"value\" data type would need to see the complete function and how the rcx value gets used.\n\nFor a simple example let's take this C code:\n\n```\nint main()\n{\n    int v = 128;\n    int i = v;\n    int *j = &i;\n    \n    i=i+2;\n    *j = i+4;\n    return 0;\n}\n\n```\nHere we can think of \"i\" as being the \"constant\" which is when the memory address representing \"i\" contains the actual value.\n\nHowever, the memory address representing \"j\" is type \"value\" pointing to another memory address that contains the actual value. In real programs these \"value\" types will often point to complicated structures, which can require a detailed analysis of how it is used to work out the original data types.\n\nIn this simplistic example the assembly is something like this:\n\n```\nsub     rsp, 24\nmov     DWORD PTR v$[rsp], 128                    ; 00000080H\nmov     eax, DWORD PTR v$[rsp]\nmov     DWORD PTR i$[rsp], eax\nlea     rax, QWORD PTR i$[rsp]\nmov     QWORD PTR j$[rsp], rax\nmov     eax, DWORD PTR i$[rsp]\nadd     eax, 2\nmov     DWORD PTR i$[rsp], eax\nmov     eax, DWORD PTR i$[rsp]\nadd     eax, 4\nmov     rcx, QWORD PTR j$[rsp]\nmov     DWORD PTR [rcx], eax\nxor     eax, eax\nadd     rsp, 24\nret     0\n\n```\nHere we see the example of the \"constant\"\n\n```\nmov     eax, DWORD PTR i$[rsp]\nadd     eax, 2\nmov     DWORD PTR i$[rsp], eax\n\n```\nWe can see the value at memory address $i[rsp] is loaded into eax, 2 is added to it, then the value is directly stored back in the memory address via\n\n```\nmov DWORD PTR $i[rsp], eax\n\n```\nIn this case we would use the \"constant\" follow on DWORD PTR $i[rsp] to find the value.\n\nHowever, with j we are instead getting a memory address held at $j[rsp] which points to the memory location of i. Instead of updating DWORD PTR $j[rsp] this time we are instead setting the value at the memory location held there.\n\n```\nmov     eax, DWORD PTR i$[rsp]\nadd     eax, 4\nmov     rcx, QWORD PTR j$[rsp]\nmov     DWORD PTR [rcx], eax\n\n```\nIn this scenario we would use the \"value\" follow on $j[RSP] to find the value.\n\n",
      "votes": "0",
      "user": "chentiangemalc",
      "time": "Jan 12, 2022 at 1:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "iko",
          "text": "Thank you so much!",
          "time": null
        }
      ]
    }
  ]
}