{
  "title": "Load a *.dylib or *.so object into the Javascript V8 runtime?",
  "link": "https://reverseengineering.stackexchange.com/questions/25184/load-a-dylib-or-so-object-into-the-javascript-v8-runtime",
  "content": "I was reading this Frida release page and noticed it made the following reference:\n\nThe CModule feature is fantastic for Frida-centric actions, but it would be nice to load generic shared-objects into the target process. CModule appears to be written for performance optimization within Stalker and related code. Any attempt to do something \"extra\" results in something like this will result in compile-time (at runtime, by the embedded TinyCC) errors such as:\n\n```\nCompilation failed: In file included from module.c:3:  \nmodule.c:3: error: include file 'dlfcn.h' not found\"\n\n```\n^ Attempt at writing a CModule stub that dlopen'd a shared object from disk. \n\nBut the comment by Ole in the link above alludes to this being possible, though I can't find any references other than the NodeJS C++ Addons features that are, of course, specific to NodeJS.\n\ntl;dr\nHow does one load a generic object such that all of its exported functions are callable from Javascript? Is this possible?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "173",
  "tags": [
    "javascript",
    "shared-object",
    "frida"
  ],
  "user": "sherrellbc",
  "time": "Jun 1, 2020 at 13:22",
  "comments": [],
  "answers_data": [
    {
      "content": "I was misinterpreting the context of the comment in the original link, it seems. I was under the impression that Module.load was a v8-ism, while it in fact appears to be a Frida-API.\n\nhttps://frida.re/docs/javascript-api/#module\n\n",
      "votes": "2",
      "user": "sherrellbc",
      "time": "Jun 1, 2020 at 13:50",
      "is_accepted": true,
      "comments": []
    }
  ]
}