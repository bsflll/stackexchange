{
  "title": "Anti-debug clearing hardware breakpoints",
  "link": "https://reverseengineering.stackexchange.com/questions/23372/anti-debug-clearing-hardware-breakpoints",
  "content": "An application I am debugging somehow manages to clear my hardware breakpoints. I am using TitanHide and x64dbg. \n\nI am observing the following behaviour:\n\nI am not sure what causes this obscure behaviour, but what I do know is that my hardware breakpoints are not getting hit, so I researched what could possibly clear them. I have come up with:\n\nHowever all 3 methods should be caught by TitanHide, and exceptions should show up in the log of x64dbg (which they don't). Are there any further methods to clear hardware breakpoints?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "790",
  "tags": [
    "windows",
    "anti-debugging",
    "breakpoint"
  ],
  "user": "Whosdatdev",
  "time": "Mar 2, 2020 at 9:12",
  "comments": [
    {
      "user": "Yotamz",
      "text": "Are you sure that the instruction on which you set the HW breakpoint is actually being executed? The program may detect a HW breakpoint (using GetThreadContext and reading debug registers). The program may then behave differently.",
      "time": null
    },
    {
      "user": "Whosdatdev",
      "text": "@Yotamz possible, I'll check",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This turned out to be a mixture of hardware breakpoint related bugs in x64dbg (which are fixed by now), and a driver denying access to some threads of the target application (meaning the hardware breakpoint could not be set on those). If you encounter this, I suggest updating and checking OpenThread permissions, as x64dbg fails silently here :/\n\n",
      "votes": "0",
      "user": "Whosdatdev",
      "time": "Jun 3, 2020 at 14:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}