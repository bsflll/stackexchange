{
  "title": "How to create an executable that keeps the same virtual address on different runs",
  "link": "https://reverseengineering.stackexchange.com/questions/22889/how-to-create-an-executable-that-keeps-the-same-virtual-address-on-different-run",
  "content": "I want to create an executable that keeps the same virtual address during different execution runs. \n\nThis is definitely possible because I've seen these files in CTFs(Capture the flag) where the player has to use a buffer overflow, to rewrite the return address in order to execute a \"secret\" function.\n\nSo, is there a way to tell GCC to generate an executable that \"doesn't\" allow memory randomization on execution?\n\nOr maybe I'm thinking it all wrong. Any info you can share to point me on the right direction will be appreciated.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "206",
  "tags": [
    "c",
    "dynamic-analysis",
    "executable"
  ],
  "user": "rderik",
  "time": "Jan 2, 2020 at 10:47",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "won't disabling ASLR be enough?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As part of ASLR, operating systems use code relocation tables embedded in an executable to change the location where an executable image is located.\n\nIf you remove the relocation tables (or generate an executable without it to begin with) the operating system will not be able to relocate the executable image, however other images also loaded to the same process's memory address will still be relocated.\n\nAdditionally, an OS may implement/support ASLR related executable file flag to opt-in or out of ASLR and again depending on the OS and user configuration, executables that don't support ASLR may still be randomized.\n\nVisual studio have two related flags, /FIXED and /DYNAMICBASE, for including relocation tables and opting-in for ASLR.\n\nOn GCC, -fPIE is used to enable relocation tables (position independent executable).\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Jan 2, 2020 at 11:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "rderik",
          "text": "Thanks! this helped. Sometimes not knowing the terms to search for is a stopper. I didn't want to ask the people that will try the code to make their system insecure by disabling ASLR on the whole OS. The answer is using -no-pie on GCC. That will generate an executable without a GOT(Global Offsets Table).  Thanks for your help!",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Glad I could help :)",
          "time": null
        }
      ]
    }
  ]
}