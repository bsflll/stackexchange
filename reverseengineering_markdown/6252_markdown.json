{
  "title": "Assembly variable meaning",
  "link": "https://reverseengineering.stackexchange.com/questions/6252/assembly-variable-meaning",
  "content": "Im newbie at reverse engineering and I was wondering what is the meaning of declaration var_18 = byte ptr -18 and the others like it in the picture.\n\n\n\nI know that byte ptr means it is a pointer to a byte variable, but why does it have negative value. And also why do all of them have the same address?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "newbie",
  "time": "Sep 17, 2014 at 12:47",
  "comments": [
    {
      "user": "Jongware",
      "text": "They are not variables, but assembler directives. Ida PRO displays them as 'belonging' to the first line of the function they are part of. (This is specifically Ida PRO's notation, not a general \"reverse engineering\" thing.)",
      "time": null
    },
    {
      "user": "user4520",
      "text": "You can think of those values as being added to ESP - the stack pointer (adding negative values = subtracting, refer to your accepted answer).",
      "time": null
    },
    {
      "user": "evlncrn8",
      "text": "generally, positive = passed as parameters, negative is 'local' storage (on the stack.. should not be accessed by anything after the function returns)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The dis-assembler display all the variables as having the same address, which is the function's first command (004014CE push ebp in this case).\n\nvariable with a positive offset is a parameter to the function, where a variable with a negative offset is usually a local variable. This is of course not always the case but you can take it as a general rule of thumb.\n\n",
      "votes": "6",
      "user": "Omer",
      "time": "Sep 17, 2014 at 13:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jongware",
          "text": "\"not always the case\" -- are you sure? It's how standard stack frames work, and the OP must be getting these variables because he told Ida PRO to treat this function as such. (Which is either a default setting, or flagged to do so for this particular function.)",
          "time": null
        },
        {
          "user": "Milind R",
          "text": "It's a default.",
          "time": null
        },
        {
          "user": "Omer",
          "text": "It is true when you are reversing standard compiler output. But in case someone tampered with the assembly, or if the code is self modifying, or you extracted image from memory after modifications (such as patching), IDA might not interpret variables properly.",
          "time": null
        }
      ]
    }
  ]
}