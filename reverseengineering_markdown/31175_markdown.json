{
  "title": "How to interpret this __ctype_b based predicate?",
  "link": "https://reverseengineering.stackexchange.com/questions/31175/how-to-interpret-this-ctype-b-based-predicate",
  "content": "I am getting this simplified function from the decomplication results of Ghidra, and I am having a hard time interpreting what the predicate would evaluate to since I do not have access to __ctype_b structure, in other words, what is this predicate indicating (eg. no blank spaces, digits only, ect...) ?\n\n```\nint myFunc(char myChar) {\n\n    if ((*(unsigned short*)((char)myChar * 2 + __ctype_b) >> 6 & 1) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "118",
  "tags": [
    "disassembly",
    "decompilation",
    "c",
    "ghidra"
  ],
  "user": "Anis LOUNIS aka AnixPasBesoin",
  "time": "Nov 25, 2022 at 14:04",
  "comments": [],
  "answers_data": [
    {
      "content": "_ctype is a common name for an array with flags used for implementing the is... family of C runtime function-like macros from ctype.h (isupper, islower, isalpha, isdigit and so on). For example, see this file from early glibc:\n\n```\nCONST unsigned short int __ctype_b_C[] =\n  {\n    0,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl|_ISspace|_ISblank,\n\n```\nIf we assume that __ctype_b is an array of shorts, the function seems to be equivalent to:\n\n```\nreturn (__ctype_b[myChar]>>6 & 1)==0;\n\n```\nor\n\n```\nreturn (__ctype_b[myChar]& (1<<6))==0;\n\n```\nIf the bits in the table use standard values, 1<<6 corresponds to the _ISpunct flag, so the function seems to return  !ispunct(myChar);\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Nov 25, 2022 at 21:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}