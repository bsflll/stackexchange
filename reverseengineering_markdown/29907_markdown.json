{
  "title": "Easiest way to move everything, including custom structs, from an IDA Pro IDB to another?",
  "link": "https://reverseengineering.stackexchange.com/questions/29907/easiest-way-to-move-everything-including-custom-structs-from-an-ida-pro-idb-to",
  "content": "I have analyzed a 32 bit version of an executable, defined many structs, renamed many things and so on.\n\nNow i want to move everything, including the structs that i defined, to the IDB of the 64 bit version of the same application. Because i know that at least many of the structs and functions are the same so at least i need to move these structs there.\n\nHow to do this in IDA pro? (using 7.6)\n\n",
  "votes": "2",
  "answers": 1,
  "views": "112",
  "tags": [
    "ida"
  ],
  "user": "OneAndOnly",
  "time": "Jan 22, 2022 at 6:39",
  "comments": [],
  "answers_data": [
    {
      "content": "The minsc plugin at https://github.com/arizvisa/ida-minsc supports structure/union decoding, arithmetic, layouting, and serialization. This can be used with pickle to export a structure from a database or import it into another database if using IDA 6.95 through 8.4.\n\nDisclaimer: I'm the maintainer of the minsc plugin.\n\nIf you don't want to use the \"Dump typeinfo to IDC file\" to produce an IDC file that can be imported within other databases (as per https://docs.hex-rays.com/user-guide/user-interface/menu-bar/file/produce-output-files), you can use the minsc plugin with pickle.dump to serialize them as a binary stream.\n\n```\nPython>import pickle\nPython>struc.list(like=\"*stuff*to*care*about*\")\n...\nPython>st=struc.by('mystruc')\nPython>with open(db.path('filename.relative.to.database.pickle'), 'wb') as out:\nPython>    pickle.dump(st, outfile)\nPython>\n\n```\nTo then import it into another database, you can use pickle.load as with most python objects that implement the pickle protocol.\n\n```\nPython>newstruc = pickle.load(open(db.path('filename.relative.to.idb.pickle')), 'rb')\nPython>newstruc\n...\nPython>\n\n```\nTo serialize multiple structures, the structure.iterate function can be used with a number of filters to select them into a list that is to be pickled.\n\n```\nPython>forpickling = [st for st in structure.iterate(greater=0x100, library=False)]\nPython>pickle.dump(forpickling, open('/path/to/file', 'wb))\n\n```\nTo serialize all of the structures/unions that you've tagged with a specific comment, you can do something like the following to save a list.\n\n```\nPython>forsaving = []\nPython>for st, tags in struc.select('selected'):\nPython>    if tags['selected']:\nPython>        forsaving.append(st)\nPython>    continue\nPython>\nPython>pickle.dump(forsaving, open('/path/to/file', 'wb))\n\n```\nIt is important to note, that if a structure/union exists with the same name in the database, it will be updated with the contents of the matching deserialized structure/union when loaded. This includes names, flags, types, and comments/tags.\n\n```\nPython>pickle.load(open('/path/to/file','rb'))\n\n```\nIf you use struc.select without any filters, it will only select the structures that you've added manually. This can be used to avoid updating structures that have been imported by IDA and not explicitly created by you.\n\n```\nPython>saved = [st for st, _ in struc.select()]\nPython>pickle.dump(saved, open('/path/to/whatev', 'wb'))\n\n```\n",
      "votes": "1",
      "user": "Ali Rizvi-Santiago",
      "time": "Nov 12, 2024 at 18:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}