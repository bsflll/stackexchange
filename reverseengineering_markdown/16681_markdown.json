{
  "title": "HexRays: Variadic methods like printf",
  "link": "https://reverseengineering.stackexchange.com/questions/16681/hexrays-variadic-methods-like-printf",
  "content": "I have identified a routine that behaves exactly like printf in an ARM64 binary.  Arguments are passed in the standard fashion (e.g. X0, X1, X2 ...) and I have given the function the signature (Y) of:\n\n```\nint printf(char* fmt, ...)\n\n```\nThis does the \"right thing\" some of the time, but not very frequently.  Usually it'll miss any arguments after the second one.\n\nIs there any way to tell HexRays more about this routine, so that it \"does the right thing\" and displays the data correctly?  As an example, one of the lines is effectively:\n\n```\nprintf(\"%s: %s: foo: 0x%llx, bar: 0x%llx, baz: %u  \n\", \"function_name\");\n\n```\nWhen it should have several more arguments, as indicated by the format string (and which are actually loaded into registers immediately before the call).\n\n",
  "votes": "4",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "arm",
    "hexrays"
  ],
  "user": "Zach Riggle",
  "time": "Oct 31, 2017 at 22:16",
  "comments": [],
  "answers_data": [
    {
      "content": "If the decompiler detects wrong number of arguments for a variadic function call, you can adjust it using the context menu comands or Numpad +/- hotkeys.\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Nov 1, 2017 at 17:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Zach Riggle",
          "text": "It'd be a great feature to add to Hex-Rays to automatically pick up format arguments and infer type information (string vs. int vs. pointer) from that.  I thought the limitation was that it wasn't sure about the ABI (e.g. stack spill for GCC vs. MSVC) in my particular binary.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "There is already some limited heuristic in the decompiler but the format string does not always correspond to the actually passed arguments and the format specifiers may change meaning depending on implementation, that's why the manual override is there. If you get misidentified number of arguments often, you should send in reports with sample binaries/IDBs.",
          "time": null
        }
      ]
    },
    {
      "content": "Right click on a function invocation in decompiler window, you'll see add and delete variadic argument. Checked in Ida 6.95 on x86, function should be defined with variadic prototype.\n\n",
      "votes": "1",
      "user": "w s",
      "time": "Nov 1, 2017 at 15:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}