{
  "title": "Get radare2 to only display assembly code without other info",
  "link": "https://reverseengineering.stackexchange.com/questions/30933/get-radare2-to-only-display-assembly-code-without-other-info",
  "content": "I'm using radare2 in a loop that looks similar to this:\n\n```\nfor item in `r2 -c \"aaaa\" -c \"afl\" -qq 67b79382375cc5169d869dccca033be3786aa06a71b9bc1245cd4b935a603dc2.bin | grep -Eo \"fcn.*\"`; do r2 -c \"e scr.color=0\" -c \"aaaa\" -c \"s $item\" -c \"pdf\" -qq 67b79382375cc5169d869dccca033be3786aa06a71b9bc1245cd4b935a603dc2.bin >> results.asm; done\n\n```\nWhat I need to do is get the output from this:\n\n```\n┌ 8: fcn.00401000 (int32_t arg_8h);\n│           ; arg int32_t arg_8h @ ebp+0x8\n│           0x00401000      55             push ebp                    ; [00] -r-x section size 4096 named .text\n│           0x00401001      8bec           mov ebp, esp\n│           0x00401003      ff5508         call dword [arg_8h]         ; 8\n│           0x00401006      5d             pop ebp\n└           0x00401007      c3             ret\n\n```\nTo just look like this:\n\n```\n; 8: fcn.00401000 (int32_t arg_8h);\n; arg int32_t arg_8h @ ebp+0x8\npush ebp                    ; [00] -r-x section size 4096 named .text\nmov ebp, esp\ncall dword [arg_8h]         ; 8\npop ebp\nret\n\n```\nIS this possible?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "79",
  "tags": [
    "radare2"
  ],
  "user": "user42071",
  "time": "Sep 29, 2022 at 16:11",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use pif:\n\nOutput for main() using pif:\n\n```\n[0x00001060]> pif @ main\nendbr64\npush rbp\nmov rbp, rsp\nlea rdi, str.hello\ncall sym.imp.puts\nmov eax, 0\npop rbp\nret\n\n```\nOutput for main() using pdf:\n\n```\n[0x00001060]> pdf @ main\n            ; DATA XREF from entry0 @ 0x1081(r)\n┌ 27: int main (int argc, char **argv, char **envp);\n│           0x00001149      f30f1efa       endbr64\n│           0x0000114d      55             push rbp\n│           0x0000114e      4889e5         mov rbp, rsp\n│           0x00001151      488d3dac0e00.  lea rdi, str.hello          ; 0x2004 ; \"hello\" ; const char *s\n│           0x00001158      e8f3feffff     call sym.imp.puts           ; int puts(const char *s)\n│           0x0000115d      b800000000     mov eax, 0\n│           0x00001162      5d             pop rbp\n└           0x00001163      c3             ret\n\n```\n",
      "votes": "1",
      "user": "julian",
      "time": "Oct 4, 2022 at 13:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}