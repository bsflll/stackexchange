{
  "title": "Understand the CPU cycles of x86 instruction bsr/bsf",
  "link": "https://reverseengineering.stackexchange.com/questions/20545/understand-the-cpu-cycles-of-x86-instruction-bsr-bsf",
  "content": "I am on the hook to analysis some \"timing channels\" of some x86 binary code. I am posting one question to comprehend bsf/bsr opcode.\n\nSo high-levelly, these two opcodes can be modeled as a \"loop\", which counts the leading and trailing zeros of a given operand. The x86 manual has a good formalization of these opcodes, something like the following:\n\n```\nIF SRC = 0\n  THEN\n    ZF ← 1;\n    DEST is undefined;\n  ELSE\n    ZF ← 0;\n    temp ← OperandSize – 1;\n    WHILE Bit(SRC, temp) = 0\n    DO\n      temp ← temp - 1;\n    OD;\n    DEST ← temp;\nFI;\n\n```\nBut to my suprise, bsf/bsr instructions seem to have fixed cpu cycles. According to some documents I found here: https://gmplib.org/~tege/x86-timing.pdf, seems that they always take 8 CPU cycles to finish. \n\nSo here are my questions:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "x86",
    "intel"
  ],
  "user": "lllllllllllll",
  "time": "Feb 4, 2019 at 2:47",
  "comments": [],
  "answers_data": [
    {
      "content": "I've found a site which seems to indicate this was implemented as a loop when the instructions were introduced:\n\n```\nBSF scans forward across bit pattern (0-n) while BSR scans in reverse (n-0).\n\n                             Clocks                 Size\n    Operands         808x  286   386   486          Bytes\n\n    reg,reg           -     -   10+3n  6-42           3\n    reg,mem           -     -   10+3n  7-43          3-7\n    reg32,reg32       -     -   10+3n  6-42          3-7\n    reg32,mem32       -     -   10+3n  7-43          3-7\n\n```\nThankfully, they seem to optimized it starting with 486 (1989). As you already noticed, they seem to have improved the run time even further. Indeed, the current Intel Optimization Manual lists it with pretty low fixed clock cycles (3+1).\n\nThere is a much more in detail answer on stackexchange\n\n",
      "votes": "3",
      "user": "Nordwald",
      "time": "Feb 4, 2019 at 6:13",
      "is_accepted": true,
      "comments": [
        {
          "user": "blabb",
          "text": "the link points to a question by op it appears he cross posted",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "@blabb yes, but a close vote based on duplicate/cross posting is not applicable :(",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "@blabb Thank you for pointing this out.. Yes. But still, we received fantastic answers from different aspects and angles.",
          "time": null
        }
      ]
    }
  ]
}