{
  "title": "x86 ASM question about hexadecimal numbers and how to transfer them",
  "link": "https://reverseengineering.stackexchange.com/questions/16592/x86-asm-question-about-hexadecimal-numbers-and-how-to-transfer-them",
  "content": "So I am wondering why I cannot do this \n\n```\nmov eax, ffffffffh\n\n```\nbut I can do this:\n\n```\nmov eax, 0ffffffffh\n\n```\nCould anybody explain please? In this case, I am using the Flat Assembler but I think this is not assembler-specific. \n\n",
  "votes": "5",
  "answers": 1,
  "views": "5k",
  "tags": [
    "assembly",
    "hexadecimal"
  ],
  "user": "BoSsYyY",
  "time": "Oct 21, 2017 at 10:36",
  "comments": [],
  "answers_data": [
    {
      "content": "Most assemblers require numeric constants to begin with a digit, this is so they can distinguish between them and labels.  \n\nYou can see it in FASM Fundamental syntax rules:\n\nand in MASM Manual as well:\n\nLooking at 0ffffffffh you can see 8 significant hex digits, exactly as you'd expect. This is not unique to 0ffffffffh, another numeric literals should be written with a leading zero as well --  0d1h, 0aah, 0b0h.  \n\nThese days it is common for assemblers to support the 0xffffffff syntax. If yours is not (FLAT supports it), make sure to pay attention to the leading zero, otherwise the hexadecimal value would be interpreted as a label or another symbol name.\n\n",
      "votes": "4",
      "user": "Megabeets",
      "time": "Oct 21, 2017 at 12:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}