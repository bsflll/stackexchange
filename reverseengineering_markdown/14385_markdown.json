{
  "title": "What are @PAGE and @PAGEOFF symbols in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/14385/what-are-page-and-pageoff-symbols-in-ida",
  "content": "\n\nThe above is the disassembly of a 64 bit ARM firmware image. Does anybody know what those @PAGE and @PAGEOFF symbols mean?\n\n",
  "votes": "11",
  "answers": 1,
  "views": "4k",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "sherlock",
  "time": "Jan 12, 2017 at 23:16",
  "comments": [
    {
      "user": "Olsonist",
      "text": "These are assembler directives to calculate the offset at link time stackoverflow.com/q/38711058/4603507",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "the image is not showing; reupload it or, even better, just paste the text as a code block.",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "I can see the image: i.sstatic.net/ngBHx.png",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "hm yeah, it appeared now. but it's still better to use text instead of screenshots",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "I know that text would be searchable, but rendering could get destroyed.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "in AArch64, all instructions are 32-bit long. Obviously, this is not enough to encode 64-bit addresses which AArch64 may need to process. So there's two options:\n\nThe ADRP instruction loads the address of the 4KB page anywhere in the +/-4GB (33 bits) range of the current instruction (which takes 21 high bits of the offset). this is denoted by the @PAGE operator. \nthen, we can either use LDR or STR to read or write any address inside that page or ADD to to calculate the final address using the remaining 12 bits of the offset (denoted by@PAGEOFF). \n\nSo basically you can consider those instruction pairs as if the last one directly accesses the final address of the location before the @ and you can ignore the suffixes if you don't plan to reassemble the file. \n\nSee also https://stackoverflow.com/questions/34003338/llvm-arm64-assembly-getting-a-symbol-label-address\n\n",
      "votes": "17",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}