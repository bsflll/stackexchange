{
  "title": "Disassembling MS DOS code",
  "link": "https://reverseengineering.stackexchange.com/questions/31584/disassembling-ms-dos-code",
  "content": "```\ncseg01:0001F4D8                 mov     Disk_Letter, 43h ; 'C'\ncseg01:0001F4DF\ncseg01:0001F4DF loc_1F4DF:                              ; CODE XREF: sub_1F4C8+60j\ncseg01:0001F4DF                 xor     eax, eax\ncseg01:0001F4E1                 mov     al, Disk_Letter\ncseg01:0001F4E6                 push    eax\ncseg01:0001F4E7                 push    offset aCDataTitle_phd ; \"%c:\\\\data\\\\title.phd\"\ncseg01:0001F4EC                 lea     eax, [esp+2Ch+var_24]\ncseg01:0001F4F0                 push    eax\ncseg01:0001F4F1                 call    sprintf_\ncseg01:0001F4F6                 add     esp, 0Ch\ncseg01:0001F4F9                 mov     edx, offset aRb_4 ; \"rb\"\ncseg01:0001F4FE                 mov     eax, esp\ncseg01:0001F500                 call    fopen_\ncseg01:0001F505                 test    eax, eax\ncseg01:0001F507                 jz      short loc_1F517\ncseg01:0001F509                 call    fclose_\ncseg01:0001F50E                 call    sub_1F544\ncseg01:0001F513                 test    eax, eax\ncseg01:0001F515                 jnz     short loc_1F53E\ncseg01:0001F517\ncseg01:0001F517 loc_1F517:                              ; CODE XREF: sub_1F4C8+3Fj\ncseg01:0001F517                 mov     dl, Disk_Letter\ncseg01:0001F51D                 inc     dl\ncseg01:0001F51F                 mov     Disk_Letter, dl\ncseg01:0001F525                 cmp     dl, 5Ah ; 'Z'\ncseg01:0001F528                 jbe     short loc_1F4DF\n\n\n```\n```\ncseg01:0001F544 sub_1F544       proc near               ; CODE XREF: sub_1F4C8+46p\ncseg01:0001F544\ncseg01:0001F544 var_19          = byte ptr -19h\ncseg01:0001F544 var_10          = byte ptr -10h\ncseg01:0001F544\ncseg01:0001F544                 push    ebx\ncseg01:0001F545                 push    edx\ncseg01:0001F546                 sub     esp, 10h\ncseg01:0001F549                 xor     ebx, ebx\ncseg01:0001F54B\ncseg01:0001F54B loc_1F54B:                              ; CODE XREF: sub_1F544+26j\ncseg01:0001F54B                 call    GetRandomControl\ncseg01:0001F550                 imul    edx, eax, 1Ah\ncseg01:0001F553                 mov     eax, edx\ncseg01:0001F555                 sar     edx, 1Fh\ncseg01:0001F558                 shl     edx, 0Fh\ncseg01:0001F55B                 sbb     eax, edx\ncseg01:0001F55D                 sar     eax, 0Fh\ncseg01:0001F560                 inc     ebx\ncseg01:0001F561                 add     al, 41h ; 'A'\ncseg01:0001F563                 mov     [esp+ebx+18h+var_19], al\ncseg01:0001F567                 cmp     ebx, 8\ncseg01:0001F56A                 jl      short loc_1F54B\ncseg01:0001F56C                 xor     ah, ah\ncseg01:0001F56E                 mov     [esp+18h+var_10], ah\ncseg01:0001F572                 mov     eax, esp\ncseg01:0001F574                 mov     edx, offset aWb ; \"wb\"\ncseg01:0001F579                 call    sub_1F4A4\ncseg01:0001F57E                 mov     ebx, eax\ncseg01:0001F580                 call    fopen_\ncseg01:0001F585                 test    eax, eax\ncseg01:0001F587                 jz      short loc_1F599\ncseg01:0001F589                 call    fclose_\ncseg01:0001F58E                 mov     eax, ebx\ncseg01:0001F590                 call    j_unlink_\ncseg01:0001F595                 xor     eax, eax\ncseg01:0001F597                 jmp     short loc_1F59E\ncseg01:0001F599 ; ---------------------------------------------------------------------------\ncseg01:0001F599\ncseg01:0001F599 loc_1F599:                              ; CODE XREF: sub_1F544+43j\ncseg01:0001F599                 mov     eax, 1\ncseg01:0001F59E\ncseg01:0001F59E loc_1F59E:                              ; CODE XREF: sub_1F544+53j\ncseg01:0001F59E                 add     esp, 10h\ncseg01:0001F5A1                 pop     edx\ncseg01:0001F5A2                 pop     ebx\ncseg01:0001F5A3                 retn\ncseg01:0001F5A3 sub_1F544       endp\n\n\n```\n```\ncseg01:0002043C GetRandomControl proc near              ; CODE XREF: sub_1BB1C+3Cp\ncseg01:0002043C                                         ; sub_1D754+40p ...\ncseg01:0002043C                 imul    eax, rand_2, 41C64E6Dh\ncseg01:00020446                 add     eax, 3039h\ncseg01:0002044B                 mov     rand_2, eax\ncseg01:00020450                 sar     eax, 0Ah\ncseg01:00020453                 and     eax, 7FFFh\ncseg01:00020458                 retn\ncseg01:00020458 GetRandomControl endp\n\n\n```\n```\ncseg01:0001F4A4 sub_1F4A4       proc near               ; CODE XREF: sub_10ED0+6Bp\ncseg01:0001F4A4                                         ; sub_1E2EC+Cp ...\ncseg01:0001F4A4                 push    eax\ncseg01:0001F4A5                 xor     eax, eax\ncseg01:0001F4A7                 mov     al, Disk_Letter\ncseg01:0001F4AC                 push    eax\ncseg01:0001F4AD                 push    offset aCS      ; \"%c:\\\\%s\"\ncseg01:0001F4B2                 push    offset unk_CE5FC\ncseg01:0001F4B7                 call    sprintf_\ncseg01:0001F4BC                 mov     eax, offset unk_CE5FC\ncseg01:0001F4C1                 add     esp, 10h\ncseg01:0001F4C4                 retn\ncseg01:0001F4C4 sub_1F4A4       endp\n\n\n```\nDisassembling MS DOS game (C++ WATCOM compiler 32 bit). I not understand what give to us calling GetRandomControl and how arranged CD ROM device check in function sub_1F544?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "266",
  "tags": [
    "ida",
    "msdos"
  ],
  "user": "black4joss",
  "time": "Feb 24, 2023 at 19:32",
  "comments": [
    {
      "user": "llm",
      "text": "we have no idea what your goals are - \"what give to us calling GetRandomControl\" - do you want to know what the function returns? \"and how to arrange CD ROM device check\"  - do you want to disable a CD check? please write at least some sentences, what game, what goals, do you just want to analyse the game, reverse it, patch it - its not clear",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This code below produce 8 random letters for file name. A very interesting division algorithm with a remainder of 26 - 1Ah (the number of letters in the alphabet). Function GetRandomControl returns random number (based on time() and localtime()).\n\n```\ncseg01:0001F54B loc_1F54B:                              ; CODE XREF: sub_1F544+26j\ncseg01:0001F54B                 call    GetRandomControl\ncseg01:0001F550                 imul    edx, eax, 1Ah\ncseg01:0001F553                 mov     eax, edx\ncseg01:0001F555                 sar     edx, 1Fh\ncseg01:0001F558                 shl     edx, 0Fh\ncseg01:0001F55B                 sbb     eax, edx\ncseg01:0001F55D                 sar     eax, 0Fh\ncseg01:0001F560                 inc     ebx\ncseg01:0001F561                 add     al, 41h ; 'A'\ncseg01:0001F563                 mov     [esp+ebx+18h+var_19], al\ncseg01:0001F567                 cmp     ebx, 8\ncseg01:0001F56A                 jl      short loc_1F54B\n\n```\nThis code below trying this filename to write on the current disk. If write operation is failed - this is CD. unlink function delete file if write operation succes (this is not CD).\n\n```\ncseg01:0001F56C                 xor     ah, ah\ncseg01:0001F56E                 mov     [esp+18h+var_10], ah\ncseg01:0001F572                 mov     eax, esp\ncseg01:0001F574                 mov     edx, offset aWb ; \"wb\"\ncseg01:0001F579                 call    sub_1F4A4\ncseg01:0001F57E                 mov     ebx, eax\ncseg01:0001F580                 call    fopen_\ncseg01:0001F585                 test    eax, eax\ncseg01:0001F587                 jz      short loc_1F599\ncseg01:0001F589                 call    fclose_\ncseg01:0001F58E                 mov     eax, ebx\ncseg01:0001F590                 call    j_unlink_\n\n```\nBy analogy algorithm to produce 8 random letters on C++.\n\n```\n#include <iostream>\nusing namespace std;\n\n#include <time.h>\n\nint rand_2;\n\nint GetRandomDraw( void )\n{\n    rand_2 = rand_2 * 0x41c64e6d + 0x3039;\n    return( ( rand_2 >> 10 )&0x7fff );\n}\n\nint main(void)\n{\n    struct tm   *tptr;\n    time_t      lt;\n\n    lt = time(NULL);\n    tptr = localtime(&lt);\n    rand_2 = tptr->tm_sec+(tptr->tm_min*43)+(tptr->tm_hour*3477);\n\n    for ( int i = 0; i < 8; i++ )\n    {\n\n        int val = GetRandomDraw();\n\n        val = val % 26;\n\n        char ch_my = (unsigned char) val + 0x41;\n\n        printf(\"%c\", ch_my);\n\n    }\n\n    printf(\"  \n\");\n\n    return 0;\n}\n\n```\n",
      "votes": "2",
      "user": "black4joss",
      "time": "Feb 25, 2023 at 10:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "llm",
          "text": "is there still a question?",
          "time": null
        },
        {
          "user": "black4joss",
          "text": "I figured it out, thanks.",
          "time": null
        }
      ]
    }
  ]
}