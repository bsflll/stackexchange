{
  "title": "Why is j_free function and free_ptr pointer needed in glibc?",
  "link": "https://reverseengineering.stackexchange.com/questions/15234/why-is-j-free-function-and-free-ptr-pointer-needed-in-glibc",
  "content": "I am disassembling libc-2.23.so, there exists a thunk method called j_free which jumps at the location pointed to by free_ptr pointer in glibc. Why do those even exist while free() itself is exported?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "289",
  "tags": [
    "libc"
  ],
  "user": "sherlock",
  "time": "Apr 27, 2017 at 22:56",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "what exactly are you disassembling?",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "I am disassembling libc-2.23.so, seems that j_free is a thunk method",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In ELF, all symbols are global. it means that a symbol in another module (e.g. main executable) can override the glibc's free. that's why all calls to it go through a GOT pointer. On the first call, the dynamic linker will go through all symbols in all modules and pick up the first one offering free. If no other modules export it, the libc one will be used. \n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Apr 28, 2017 at 5:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "Does it make sense to have calls internal to libc to be routed through plt instead of a relative call?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "yes, because it needs to be prepared for possibility that they're overridden by an external module.",
          "time": null
        }
      ]
    }
  ]
}