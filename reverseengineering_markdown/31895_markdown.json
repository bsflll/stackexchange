{
  "title": "Is there a way to find all constant pointers in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/31895/is-there-a-way-to-find-all-constant-pointers-in-ida-pro",
  "content": "I would like to know all the constants used for memory access except for non-pointer constants (e.g. argument) in IDA Pro.\n\nIs there such a way?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "212",
  "tags": [
    "ida",
    "pointer"
  ],
  "user": "user212942",
  "time": "May 23, 2023 at 14:38",
  "comments": [],
  "answers_data": [
    {
      "content": "Using Sark's lines for brevity, this should return all the cross-referenced data addresses (with duplicates):\n\n```\nimport idautils, sark\n\nfor line in sark.lines():\n    for ref in idautils.DataRefsFrom(line.ea):\n        print(hex(ref))\n\n```\nThis includes imports and their jump functions from .text section as those apparently are marked as data too.\n\n",
      "votes": "1",
      "user": "mimak",
      "time": "May 23, 2023 at 17:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "user212942",
          "text": "In my case, I need to find access to physical memory address. In this case, isn't it possible to find all of them with just Xref?",
          "time": null
        },
        {
          "user": "mimak",
          "text": "You cannot get a physical address with static analysis, you need to debug it. Physical addresses depend on the process, they are not static values",
          "time": null
        },
        {
          "user": "user212942",
          "text": "I'm analyzing the firmware. This includes (int)0x32000000 = 0x12345678; It contains code like this. I want to get a constant like this.",
          "time": null
        },
        {
          "user": "mimak",
          "text": "If your firmware uses static address translation, all you need to find is the base physical offset, you can calculate everything else",
          "time": null
        }
      ]
    }
  ]
}