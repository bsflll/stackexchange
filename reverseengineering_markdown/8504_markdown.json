{
  "title": "Problem finding return address for shellcode",
  "link": "https://reverseengineering.stackexchange.com/questions/8504/problem-finding-return-address-for-shellcode",
  "content": "Howdy guys and ghouls,\n\nI've got a classic b0f, in fact it's the protostar stack5 exercise\n\nlink to stack5 code\n\nNow I have the buffer + shellcode running up to overwriting EIP and I need to provide the address to overflow EIP. What's the right way of deducing the return address? I've tried ESP - len(shellcode) but this doesn't seem to work.\n\nHow do you go about calculating the right return address (the more precise the better)?\n\nGDB related examples appreciated.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "15k",
  "tags": [
    "gdb",
    "buffer-overflow"
  ],
  "user": "LordGiveMeEIP",
  "time": "Mar 19, 2015 at 23:35",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "This question might be better asked at security.stackexchange.com",
      "time": null
    },
    {
      "user": "user2823000",
      "text": "overflow EIP? you're sure you're not mixing register names?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Nothing easier than that. gdb the executable, set a breakpoint at main, have gdb print your buffer.\n\n```\n$ gdb /opt/protostar/bin/stack5\n(gdb) break main\nBreakpoint 1 at 0x80483cd: file stack5/stack5.c, line 10.\n(gdb) run\nStarting program: /tmp/stack5 \n\nBreakpoint 1, main (argc=1, argv=0xffffd674) at stack5/stack5.c:10\n10  stack5/stack5.c: No such file or directory.\n(gdb) print &buffer\n$1 = (char (*)[64]) 0xbffff838\n(gdb) \n\n```\nSo, if your shellcode starts at byte 0 of the buffer, you want to overwrite the saved EIP on the stack with 0xbffff838.\n\nIn fact, to make your exploit independent from small changes in the program (one more local variable, or one less ...) i'd fill the buffer with 32 nops (0x90) and put my shellcode behind those nops. This still leaves you with 32 bytes for the shellcode, which should be plenty. Then, jump to 0xbffff848 which is 16 bytes into the nops, and shifting them around by a few bytes won't hurt you anymore.\n\nAt the end, instead of calculating how many bytes between the end of the buffer and the saved EIP, i'd just repeat the buffer address a few times, so you can be sure EIP gets overwritten; you don't really care about whatever else is there.\n\nSo to sum it up, your input should be\n\n```\n0x90 (32 times)\nyour shellcode\nas many 0x90's as you need to fill the buffer to 64 bytes\n0x48 0xf8 0xff 0xbf  repeated about 10 times.\n\n```\nRemember to swap the EIP bytes because we're on a little endian machine.\n\n",
      "votes": "6",
      "user": "Guntram Blohm",
      "time": "Mar 20, 2015 at 18:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "Aaron Esau",
          "text": "(gdb) print &buffer returns No symbol \"buffer\" in current context.",
          "time": null
        },
        {
          "user": "Micha≈Ç Szkudlarek",
          "text": "@Guntram Blohm How to make sure that each time you run program, you have the same return address? Does it change with each execution of program?",
          "time": null
        }
      ]
    }
  ]
}