{
  "title": "How can DLL injection be detected?",
  "link": "https://reverseengineering.stackexchange.com/questions/2262/how-can-dll-injection-be-detected",
  "content": "In this question on DLL injection multiple answers mention that DLL injection can be used to modify games, perhaps for the purposes of writing a bot. It seems desirable to be able to detect DLL injection to prevent this from happening. Is this possible?\n\n",
  "votes": "24",
  "answers": 4,
  "views": "52k",
  "tags": [
    "dll",
    "dll-injection"
  ],
  "user": "user2142",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "Henry Heikkinen",
      "text": "There are many methods to detect injected DLLs and even more to avoid getting detected. In the simple case you can iterate over all the modules in the process and look for anything that shouldn't be there. Sometimes you might want to hook LoadLibrary in case the injected DLL removes itself from the module list. However, simply detecting injected DLLs is very bad way to detect cheating or botting. Many harmless programs such as the popular video capture software Fraps injects a DLL to programs. Unfortunately I don't know much more about actually detecting DLLs. I just inject them. :)",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "Game cheating should be detected server-side. Client-side detection can most always be circumvented.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are multiple ways that you can use which might work (and see below for the reasons why they might not).  Here are two:\n\nOther than that, you can periodically enumerate the DLL name list, but all of these techniques can be defeated by a determined attacker (debugging can be stopped temporarily; thread notification can be switched off; the injected DLL might not remain loaded long enough because it might use dynamically-allocated memory to host itself and then unload the file, etc).\n\n",
      "votes": "19",
      "user": "peter ferrie",
      "time": "Jun 17, 2013 at 17:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "gandolf",
          "text": "Quick question, in the past I used a very old technique called dll load order hijacking. Even recently this technique cannot be successfully defeated by most game anti cheats. Do you know of any method that could possibly circumvent this? I used the winsock dll as the proxy dll, which the game loads, and then my dll passed the necessary functions to the real winsock dll. In the words of pokemon. \"It was very effective!\"",
          "time": null
        }
      ]
    },
    {
      "content": "What you're trying to do is very hard if the attacker is an experienced game hacker and the specifics of the cheat is unknown.\n\nIn general if you want to inject a DLL which is harder to detect and won't show up on the module list of the process you use something called manual mapping. What this does is that it emulates the behavior of LoadLibrary without putting the DLL into the process module list. Personally I'm a fan of MemoryModule. Study that if you want to understand a very common hiding technique. Even if your hack is never made public it's advisable to make sure your DLL never shows up in a crash report or something similar. \n\nThe problem is that once the fact that you're injecting into the process becomes known, your code will be reachable by the module you're trying to attack. A properly implemented client side anti cheat will enumerate all mapped memory regions and send a hash set of various offsets of all mapped memory segments to a server. The server then stores these hash sets so that if your cheat is ever made public you'll be banned retroactively.\n\nIf you want to avoid the process being able to detect your code you'll have to either wrap everything in a virtual machine and then interact with the process from outside of the virtual machine. The other weaker options are to write a driver and try to hide in ring 0, to simply create a debugger which interacts with the process or to use breakpoints and a sort of in process debugger to process hardware breakpoint events in order to avoid detection of your hooks.\n\nA properly implemented game will not care if the client is compromised since as soon as you trust your players you have an issue. Ideally the game client would only render the state, react to the output of the server and send input to the server with all the logic server side. This is unfortunately not always possible due to latency and performance reasons. For every decision the client takes, ask yourself what the worst possible outcome of the client having that responsibility is. Because it will happen.\n\n",
      "votes": "16",
      "user": "Peter Andersson",
      "time": "Jun 16, 2013 at 17:27",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Patching game's executable + using loading order trick\n\nProcess Injection - it does not have to be dll but some arbitrary code\n\n",
      "votes": "6",
      "user": "PhoeniX",
      "time": "Jun 16, 2013 at 20:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Yes, it is possible. There are a couple of generic approaches you can take for detecting injected processes (not just dlls). The first is to enumerate DLLs that are injected by the OS via registry key. The two known key/value are AppCertDLL & AppInitDLLs. The second is to search for all memory that is marked as RWX and then parse out the memory for clues of an executable file or injected code. The third is to search for private memory that contains an executable or injected code. Another approach is to search for inline hooks of APIs. Parse out the handler address and then query the memory address of the handler. The handler will likely be an injected process.\n\nI have been doing research in this area for the past couple of weeks. My main focus is detecting injected malware. Here is a tool called injdmp that I released this week for detecting injected processes.  \n\n",
      "votes": "3",
      "user": "alexanderh",
      "time": "Jun 16, 2013 at 17:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}