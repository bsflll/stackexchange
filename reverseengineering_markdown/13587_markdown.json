{
  "title": "Getting Access Violation when patching a program",
  "link": "https://reverseengineering.stackexchange.com/questions/13587/getting-access-violation-when-patching-a-program",
  "content": "I'm very very newbie in assembly / ollydbg / reverse engineering. I'm totally lost with this error.\n\nI have created a simple program in Delphi, just to explore in ollydbg. Here is the program's code:\n\n```\nprocedure TForm1.SpeedButton1Click(Sender: TObject);\nvar somevalue : string;\nbegin\n    somevalue := 'this is a value';\n    showmessage(somevalue);\nend;\n\n```\nSo I attached it in olly and searched for the string \"this is a value\" and reached this point:\n\n```\nMOV EDX, 0045212C\n\n```\nthe address 0x45212C contains my string, so I decide to put another value in an empty address (I choose 00400400).\n\nThe problem is that when I change the code to\n\n```\nMOV EDX, 400400\n\n```\nI get the following error:\n\nWhich contains the following assembly line:\n\n```\nLOCK INC DWORD PTR DS:[EDX-8]\n\n```\nWhat does this error mean and how can I fix it?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "ollydbg",
    "x86",
    "patching"
  ],
  "user": "Jo√£o Telles",
  "time": "Oct 1, 2016 at 21:05",
  "comments": [],
  "answers_data": [
    {
      "content": "This error means that the processor tried to access the address at 0x004003F8 and failed. The access type was write.\nThis can happen because that address's page is protected and cannot be written to, or because the address is unallocated.\n\nI'ts crusial to note that the address, 0x004003F8 is eight bytes before your chosen address (0x00400400). I guess the access violation happened because that address is unallocated.\n\nThe best guess given the information you provided is that although the textual string starts at that specific address, it is only part of the bigger in-memory structure that begins before the actual text.\n\nThis is actually quite common, and correct for all managed/object oriented programming languages. and is indeed the cause for Delphi's string objects, as described here including memory representation specifics.\n\nThe line in which you get an access viloation is also of some interesting capacity and could be unclear to the uneducated reverser.\n\nLOCK INC DWORD PTR DS:[EDX-8]\n\nAnd here's the instruction's parts described one by one:\n\n",
      "votes": "5",
      "user": "NirIzr",
      "time": "Sep 30, 2016 at 23:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "Guntram Blohm",
          "text": "And note that the [edx-8] accesses the field that, in the description, is called reference count. As lock is used to make an instruction multithreading-safe, this makes sense as the string reference count is incremented whenever a new reference to the string gets created. To answer your question about how to fix it: copy your string to 4000040C, and copy the 12 bytes in front of the original string to 40000400. Don't forget to adjust the string length at 40000008.",
          "time": null
        }
      ]
    }
  ]
}