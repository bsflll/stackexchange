{
  "title": "Find function in a stripped dynamic ELF library",
  "link": "https://reverseengineering.stackexchange.com/questions/20220/find-function-in-a-stripped-dynamic-elf-library",
  "content": "Im currently reverse engineering an android app and this app calls a function named \"getUserInfo\" in an ARM 32bit ELF library called \"libcms.so\" (from TikTok) via the Java Native Interface.\n\nMy Problem is: The function cant be found with readelf --syms libcms.so or readelf --dyn-syms libcms.so because libcms.so is stripped and the funtion is not contained in the symbol table.\n\nThe app can call this function, so i know the function is there. How can i find the hex location of the function?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "2k",
  "tags": [
    "android",
    "arm",
    "elf",
    "java",
    "symbols"
  ],
  "user": "SinOfficial",
  "time": "Dec 2, 2019 at 15:12",
  "comments": [],
  "answers_data": [
    {
      "content": "There're two broad ways in which you can declare JNI functions. \n\nThe first is the more obvious way in which the JNI function has to follow a specific naming convention like JNIEXPORT void JNICALL Java_com_app_foo_bar. You can easily identify such functions using readelf.\n\nThe other not so obvious way is to use RegisterNatives. Here your functions can have any signature and further they not need be exported from the shared library. Typically, you would call RegisterNatives from JNI_OnLoad to register the native functions to the Java Run-time.\n\nFor your binary libcms.so, it uses the second method.\n\nRegisterNatives has the following prototype\n\n```\njint RegisterNatives(JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint Methods);\n\n```\nIf you analyze the code of JNI_OnLoad you will come across RegisterNatives call like below.\n\n\n\nThe third argument points to an array of JNINativeMethod structures which is declared as\n\n```\ntypedef struct {\n    char *name; \n    char *signature;\n    void *fnPtr;\n} JNINativeMethod;\n\n```\nThe first member is a pointer to a null terminated string denoting the function name. However, in your case all the names and signatures are encrypted.\n\n\n\n\nThese are decrypted at run-time by the .datadiv_decodeXXXXXXXX family of functions. The .init_array section contain pointers to these decryptor functions which implies they will be called at startup.\n\n\n\nHowever, that is not all. The binary also employs Control Flow Flattening Obfuscation throughout, hence the execution path may not be easily discernible as shown below.\n\n\n\nTo analyze the binary you're better off resorting to dynamic analysis techniques using a tool such as Frida.\n\nFurther Read:\n\n",
      "votes": "9",
      "user": "0xec",
      "time": "Dec 29, 2018 at 22:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "Gin May",
          "text": "I don't understand, can dynamically load it get the function or anyway? or am I missing the point?",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@GinMay To decrypt the function names you can run/emulate the .datadiv_decode series of functions.",
          "time": null
        }
      ]
    }
  ]
}