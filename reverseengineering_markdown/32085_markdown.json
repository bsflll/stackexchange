{
  "title": "windbg command to search all functions that take in certain arguments",
  "link": "https://reverseengineering.stackexchange.com/questions/32085/windbg-command-to-search-all-functions-that-take-in-certain-arguments",
  "content": "I want to use the x command to search for functions that take _NET_BUFFER_LIST as an argument(maybe they will take more than one argument). Its symbol is ndis!_NET_BUFFER_LIST.\nThe command I use\n\n```\n0:000> x /s module!module+0x1000 L?0xffffffff \"ndis!_NET_BUFFER_LIST\"\nCouldn't resolve error at 'tcpip!tcpip+0x1000 L?0xffffffff \"ndis!_NET_BUFFER_LIST\"'\n\n0:000> x /s module!module+0x1000 L?0xffffffff ndis!_NET_BUFFER_LIST\nCouldn't resolve error at 'tcpip!tcpip+0x1000 L?0xffffffff ndis!_NET_BUFFER_LIST'\n\n```\nHow should I change my command to achieve my goal?\n\nI have tried commands in various forms. Some of them may not qualify the syntax. I thought add 'L?0xffffffff' could make sure dbg only walk through one module. But like blabb said, I should use another method instead and x doesn't support offset.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "252",
  "tags": [
    "windbg"
  ],
  "user": "anonymous bear",
  "time": "Jul 23, 2023 at 14:49",
  "comments": [],
  "answers_data": [
    {
      "content": "why using switch s ? switch s takes a size parameter and you do not give it ?\n\nyou are looking for a symbol from ndis on a module named tcpip ?\n\nwhat is the L?0xffffxxxx doing there ?\n\nare you sure symbol name takes the form of string with enclosed double quotes ?\n\nHave you referred the documentation ?\n\nx examines symbols and it takes a symbol name not a string\nx does not use module start len format it either takes a complete symbol name or a wild card with partial symbol name\n\narguments are available only if the pdb has full type information\n\nmost of the public pdbs availabe in ms symbol store  are stripped of type information\nso there is no way you can find the function arguments\n\nin your case ndis has type information but tcpip does not\n\nif there is type information you can use .shell command\n\nredirect the output to be parsed with external utility like grep sed awk find findstr etc\n\n```\n0: kd> .shell -ci \"x ndis!*\" grep  _NET_BUFFER_LIST\nfffff805`79a45d64 ndis!ndisPendWorkOnSetBusyAsyncLocked (void __cdecl ndisPendWorkOnSetBusyAsyncLocked(struct _NDIS_SELECTIVE_SUSPEND *,enum _NDIS_SS_BUSY_REASON,void *,unsigned long,struct _NET_BUFFER_LIST * *,struct _LIST_ENTRY *,unsigned char *))\nfffff805`79a4bed0 ndis!ndisVerifierNdisFSendNetBufferListsComplete (void __cdecl ndisVerifierNdisFSendNetBufferListsComplete(void *,struct _NET_BUFFER_LIST *,unsigned long))\nfffff805`79a46374 ndis!ndisReplaySendNbls (void __cdecl ndisReplaySendNbls(struct _NDIS_MINIPORT_BLOCK *,struct _NET_BUFFER_LIST *,unsigned char))\nfffff805`79a5c250 ndis!ndisMCoSendNetBufferListsCompleteToNetBufferLists (void __cdecl ndisMCoSendNetBufferListsCompleteToNetBufferLists(void *,struct _NET_BUFFER_LIST *,unsigned long))\nfffff805`79a461f8 ndis!ndisRemoveFromNblQueueByCancelId (struct _NET_BUFFER_LIST * __cdecl ndisRemoveFromNblQueueByCancelId(struct _NBL_QUEUE *,void *))\n\n```\ntcpip does not have type information\n\n```\n0: kd> .shell -ci \"x tcpip!en*\" grep -i no.*type.*inf.*\nfffff805`79df45e0 tcpip!EndpointSessionState = <no type information>\nfffff805`79dfbb58 tcpip!endpointPPLookasideList = <no type information>\nfffff805`79df55f0 tcpip!engineData = <no type information>\nfffff805`79dfbd88 tcpip!endpointLruLookasideList = <no type information>\nfffff805`79dfbc80 tcpip!endpointHandleTable = <no type information>\nfffff805`79df5820 tcpip!endpointCleanupWorkQueue = <no type information>\n.shell: Process exited\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jul 23, 2023 at 8:22",
      "is_accepted": true,
      "comments": []
    }
  ]
}