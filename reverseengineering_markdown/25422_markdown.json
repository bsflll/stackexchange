{
  "title": "How to import a file system image with Ghidra Headless Analyzer?",
  "link": "https://reverseengineering.stackexchange.com/questions/25422/how-to-import-a-file-system-image-with-ghidra-headless-analyzer",
  "content": "I am currently debugging the EXT4 loader, and using the GUI and selecting the file every time is fairly annoying. The simpler solution would be to have a Headless Analyzer invocation that imports the file system image and parses it.\n\nThe naive way of simply calling the Headless Analyzer with the arguments for the project location, name and -import image.ext4 results in the following errors:\n\n```\nINFO  No load spec found for import file: <redacted>.ext4   (AutoImporter.java:215) \nERROR The AutoImporter could not successfully load <redacted>.ext4 with the provided import parameters. Please ensure that any specified processor/cspec arguments are compatible with the loader that is used during import and try again.   (HeadlessAnalyzer.java:1651) \nERROR REPORT: Import failed for file: <redacted>.ext4   (HeadlessAnalyzer.java:1688) \n\n```\nThe documentation only covers handling specific binaries, so this doesn't seem like it is supported currently.\n\nA workaround that does not work for my specific use case, but might suffice for others is to mount the image and then use the -recursive argument for the Headless Analyzer.\n\nA solution could be a script, which would call whatever is called after selecting a file via the Open File System menu option. There doesn't seem to be one like this shipped with Ghidra yet, but maybe there is one written by the community somewhere.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "firmware",
    "ghidra"
  ],
  "user": "Florian Magin",
  "time": "Jun 29, 2020 at 16:56",
  "comments": [],
  "answers_data": [
    {
      "content": "The solution that I found that suffices for my current issue of debugging the EXT4 parser is is the following Ghidra Script, saved as ImportFS.java:\n\n```\nimport ghidra.app.script.GhidraScript;\nimport ghidra.formats.gfilesystem.FSRL;\nimport ghidra.formats.gfilesystem.FileSystemRef;\nimport ghidra.formats.gfilesystem.FileSystemService;\n\nimport java.io.File;\n\npublic class ImportFS extends GhidraScript{\n\n        @Override\n        protected void run()throws Exception{\n                File filesystemImage = askFile(\"Choose Filesystem Container\", \"Select\");\n                FSRL fsrl = FSRL.fromString(\"file://\" + filesystemImage.getAbsolutePath());\n                FileSystemService fileSystemService = FileSystemService.getInstance();\n                FileSystemRef ref = fileSystemService.probeFileForFilesystem(fsrl, monitor, null);\n        }\n}\n\n```\nAnd invoking the Headless Analyzer with\n\n```\nanalyzeHeadless /tmp temp_project -scriptPath /path/to/script/folder -readOnly -preScript ImportFS.java /path/to/file.img\n\n```\naskFile will not prompt for the file via a GUI when running in headless mode, so either /path/to/file.img has to be provided via the argument or a property file.\n\nFurther code would be needed for actually importing the file system tree after parsing, but this should be doable.\n\n",
      "votes": "1",
      "user": "Florian Magin",
      "time": "Jun 30, 2020 at 6:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}