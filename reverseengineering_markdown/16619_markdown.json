{
  "title": "iOS entitlements for enable calling to private API",
  "link": "https://reverseengineering.stackexchange.com/questions/16619/ios-entitlements-for-enable-calling-to-private-api",
  "content": "I'd like to analyze iOS private framework that broke commonly used GitHub project called AppLister. Here's some info about the API:\n\n```\nFramework : MobileCoreServices.framework.\nClass: LSApplicationWorkspace.\nMethod: allApplication.\n\n```\nStarting from iOS11, this call returns empty list unless the following entitlement is added to the application :  com.apple.appstored.xpc.request\n\nIt seems like this API was closed in iOS11 and you need the following entitlement in order to allow it. \n\nPrior to reversing, I wish to understand the flow of entitlement verification in general and maybe get into some details.. \n\nFrom what I've found out so far, it looks like the App use XPC for remote daemon that perform the actual verification. \n\nbut I still have some black holes in this explanation. \n\n```\n1. Does the policy checker daemon also perform the method itself, or just return allow/block verdict.\n2. Does the flow involve kernel verification or just user-space processes. \n3. Is there a way to bypass this flow if I can only control the local process (not the checker or course) by skipping the policy check phase and call the API directly ? \n\n```\nI'd be happy to here some more about how this is working, and if I've missed something. \n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ios"
  ],
  "user": "Zohar81",
  "time": "Oct 25, 2017 at 7:51",
  "comments": [
    {
      "user": "newenglander",
      "text": "Were you able to get AppLister running on iOS 11 with that entitlement?",
      "time": null
    },
    {
      "user": "Zohar81",
      "text": "No, I actually found an alternative method which doesn't require this entitlement .. The entitlements needed for the specified method are only for apple native apps. if you find out otherwise, please let me know.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Apparently the kernel extension called AppleMobileFileIntegrity (AFMI) is responsible for enforcing the entitlements. Here's a presentation which has some detail of the implementation:\n\nThe Apple Sandbox -five years later by Jonathan Levin.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 25, 2017 at 8:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}