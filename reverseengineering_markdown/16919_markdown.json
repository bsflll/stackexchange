{
  "title": "What compiler uses a calling convention that uses EAX as the first argument, then pushes onto the stack?",
  "link": "https://reverseengineering.stackexchange.com/questions/16919/what-compiler-uses-a-calling-convention-that-uses-eax-as-the-first-argument-the",
  "content": "I recently asked to question: How can an IA-32 program seemingly compiled with MSVC send its sole argument via EAX? After posting the question, I found that another function passed the first argument in EAX and then pushed its remaining argument. The caller then cleans up the stack.\n\nThe calling code:\n\n```\n.text:00402465                 lea     eax, [ebp+var_4]\n    ...\n.text:00402469                 push    eax\n.text:0040246A                 mov     eax, [ebp+hWnd]\n.text:0040246D                 call    openFileDialog\n.text:00402472                 add     esp, 4\n\n```\nAnd the function itself:\n\n```\n.text:00411730 openFileDialog  proc near\n.text:00411730\n    ...\n.text:00411730 arg_0           = dword ptr  8\n.text:00411730\n.text:00411730                 push    ebp\n.text:00411731                 mov     ebp, esp\n.text:00411733                 sub     esp, 18h\n.text:00411736                 cmp     byte_42AE1D, FALSE\n.text:0041173D                 push    ebx\n.text:0041173E                 push    esi\n.text:0041173F                 push    edi\n.text:00411740                 mov     esi, eax\n    ...\n.text:00411789                 mov     eax, [ebp+arg_0]\n.text:0041178C                 push    eax\n.text:0041178D                 push    esi\n.text:0041178E                 call    openFileDialog_Compat\n.text:00411793                 add     esp, 8\n\n```\nAs you can see, in the function, the value of EAX is saved before anything can affect it, so it is definitely being used as a parameter. Later, the pushed argument is passed to a normal __cdecl function.\n\nThe program is linked to use msvcr100.dll and uses MSVC style throughout (Such as __security_cookie, MSVC name mangling, etc.), so it would appear to have been compiled with Visual C++, but this unusual calling convention makes me question that.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "880",
  "tags": [
    "c++",
    "calling-conventions"
  ],
  "user": "Ben Jaguar Marshall",
  "time": "Dec 5, 2017 at 23:50",
  "comments": [
    {
      "user": "newgre",
      "text": "When using \"Whole Program Optimization\", the compiler may use whatever calling convention fits for functions with internal linkage.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is probably a program compiled with \"Whole Program Optimization\" or \"Link-time code generation\". From MSDN:\n\n",
      "votes": "7",
      "user": "Igor Skochinsky",
      "time": "Dec 6, 2017 at 19:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ben Jaguar Marshall",
          "text": "Thank you. This is something I have not encountered before. I've only ever thought from the compiler point of view and the described standards.",
          "time": null
        }
      ]
    },
    {
      "content": "check Calling Conventions that msvc support yet.\nas for the function name openFileDialog, it's a c# func? combining C# and C++\nvia CLR?? strange things may happen. MS dose not need to expose these details\nto public.\n\n",
      "votes": "0",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}