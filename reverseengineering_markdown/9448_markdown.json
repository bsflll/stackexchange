{
  "title": "Globally allocated arrays optimization",
  "link": "https://reverseengineering.stackexchange.com/questions/9448/globally-allocated-arrays-optimization",
  "content": "I compile C code snippet with VS2010 by two ways:\n\n```\nint g_arra[3];\n\nint main() {\n  int idx = 2;\n  g_arra[0] = 10;\n  g_arra[1] = 20;\n  g_arra[2] = 30;\n  g_arra[idx] = 40;\n  return 0;\n}\n\n```\nAbout /O2 optimization:\n\nWhen tried to reverse it:\n\nCode compiled without /O2 given me clear explanation about global array, i can compute the size of it(4 byte each [eax*4]) and how many elements it has.\n\nMy question is, how to deal with the first case? Where is compiler hide other instructions? How to detect, function has a global allocated array or a stack allocated array?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "196",
  "tags": [
    "disassembly",
    "x86",
    "c"
  ],
  "user": "Roman Kiselenko",
  "time": "Jul 27, 2015 at 9:51",
  "comments": [],
  "answers_data": [
    {
      "content": "In general case there is no difference between array and sequentially placed variables of the same type. The information about arrays and more complicated data types is lost during compilation.\n\nHowever there are several ways to restore this information from the context (and none of them will work in your specific case because it is too much simple and thus very much optimize-able).\n\nRegarding \"hidden instructions\":\n\nThey are not needed in optimized code. Both of your variants are functionally equivalent. Compiler just computed the needed index during the compilation, \nso nobody hides anything here.\n\n",
      "votes": "5",
      "user": "w s",
      "time": "Jul 26, 2015 at 11:00",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "On x86 the ESP and EBP registers are used to access data on the stack. If you see code like  \n\n```\nmov [ebp - 4], 1\n\n```\nit access the stack. w s's answer tells you how to differentiate between access to single variables or an array.\nNo sane compiler or coder will ever use esp/ebp for anything but the stack, however if you want to be really sure (during runtime) you can get the stack boundaries from the TEB (windows only).  \n\nAn access to a global variable will always be an access to a fixed memory location.  \n\n```\nmov     dword_403390, 0Ah\n\n```\nIn this example 403390 is the fixed memory location (whether it is actually fixed or changed due to ASLR/relocations isn't important as this invisible in the disassembly).\nFor further verifiaction you can check wheter that adress lies in the boundaries of the loaded executable or DLL/shared module.\n\n",
      "votes": "3",
      "user": "user45891",
      "time": "Jul 26, 2015 at 23:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}