{
  "title": "Make Ghidra recognize thread-local variables",
  "link": "https://reverseengineering.stackexchange.com/questions/30065/make-ghidra-recognize-thread-local-variables",
  "content": "I am trying to reverse an ELF binary that makes use of thread-local variables. I can't figure out how to make Ghidra display them in a friendlier way (something like declaring a struct or similar).\n\nFor example, this is how a call to scanf with a FILE* stored in TLS looks like:\n\n```\nscanf(*(FILE **)(in_FS_OFFSET + 0xfffffff0),\"%d\",&num);\n\n```\nIdeally, I would like this to look something like:\n\n```\nscanf(tls->outfile, \"%d\", &num);\n\n```\nIs it possible to make it more user-friendly? I looked around but I haven't seen anyone complaining about this.\n\nHere's an example code:\n\n```\n#include <threads.h>\n#include <stdio.h>\n#include <assert.h>\n\nthread_local int foo = 0;\n\nint main(void) {\n    assert(scanf(\"%d\", &foo) == 1);\n    printf(\"foo is: %d  \n\", foo);\n    return 0;\n}\n\n```\ntls.c compile with CFLAGS=\"-std=c11 -Wall -Wextra -O0 -ggdb -Werror\" make tls\n\nAnd here's the decompiled code:\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "569",
  "tags": [
    "ghidra",
    "thread"
  ],
  "user": "Marco",
  "time": "Feb 22, 2022 at 23:19",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Okay, so it does indeed handle it differently at -O0 (and even at -O3 for that matter) to static or a mere global variable. However, what's shown as in_FS_OFFSET presumably is fs:0 and this answers how and why -4 is needed here. Given your answer, I think however, you're conflating things a bit.",
      "time": null
    },
    {
      "user": "Marco",
      "text": "In my answer, they propose a way to support having pointers to the middle of a struct, enabling having negative offsets. If that were supported, you could retype in_FS_OFFSET as a pointer to the end of your struct, and then it would automatically recognize your thread_local fields.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "yes you could do that. However, just like when you see access to the TEB or PEB via one of the selectors on Windows, this is a particular \"well-known construct\" particular to Linux that should be handled (and is, evidently handled, given the name it is assigned) accordingly. That doesn't make this a struct, however. I really don't see it as of yet.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It seems like this feature is not yet implemented in Ghidra.\n\n",
      "votes": "-1",
      "user": "Marco",
      "time": "Feb 22, 2022 at 23:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "What does this have to do with thread-local variables? All I can see in the defect report is that there is no way to properly access structs from a linked list, where the linked list members have an LIST_ENTRY as their member. This is a common scheme in NT and support for CONTAINING_RECORD therefore a sensible request. But where is the connection to thread-local variables?",
          "time": null
        },
        {
          "user": "Marco",
          "text": "The question is about supporting pointers to the middle of a struct, it has nothing to do with lists. In this case, if you define a struct that would be \"thread_local_vars\", and get your pointer to the end of it, you should be able to get Ghidra to recognize it, right?",
          "time": null
        }
      ]
    }
  ]
}