{
  "title": "What's the fastest way to set a breakpoint when a value I know gets written in memory, if the memory address is different each time due to ASLR?",
  "link": "https://reverseengineering.stackexchange.com/questions/19819/whats-the-fastest-way-to-set-a-breakpoint-when-a-value-i-know-gets-written-in-m",
  "content": "I have a 64bit exe I'm debugging with x64dbg.\n\nI'm searching for a specfic string value myvalue that sits encrypted somewhere in the exe (so, searching for myvalue at the beginning returns nothing).\n\nWhen the value gets decrypted, I can search for it and get current memory address. I could place a breakpoint when that specific address gets written/read but that would serve no purpose as it gets decrypted and loaded only once.\n\nDue to ASLR policy, this memory address is different every time I close and open the program.\n\nMy objective is to produce a patch for the exe so that myvalue become anothervalue, either right after myvalue gets written or by identifying the piece of code that writes that value.\n\nDisabling ASLR with link /edit /dynamicbase:NO filename.exe did nothing: memory address is different everytime anyway. Disabling ASLR os-wide seems a bit overkill and dangerous.\n\nI can't put breakpoints before it gets written because I don't know the address.\n\nIdeally, there should be a menu on the \"memory\" page that says \"who wrote here\" and point me to the diassembler line that did so.\n\nHow can I do this?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "856",
  "tags": [
    "memory",
    "x64dbg"
  ],
  "user": "Saturnix",
  "time": "Nov 5, 2018 at 2:57",
  "comments": [
    {
      "user": "user202729",
      "text": "reverseengineering.stackexchange.com/questions/6647/â€¦ ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can disable ASLR on the executable using a PE editor and disabling IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE in the Dll Characteristics field.\n\nIf the value is contained within the executable image, you can calculate its relative address and add it to the executable's base address, assuming this relative address is the same every time.\n\nIf it's outside the executable, then it's in a memory page allocated with VirtualAlloc. I don't think page allocations are related to ASLR so disabling it won't help the random address. Maybe you can log calls to VirtualAlloc and find the one that allocates the page you're interested in. Then you can put a breakpoint inside the page at the relative address your value is going to be at.\n\nAnother approach - find values you know are written in the same page before your value is written and calculate the target address based on them.\n\n",
      "votes": "3",
      "user": "Anonymous",
      "time": "Nov 6, 2018 at 20:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}