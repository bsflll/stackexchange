{
  "title": "Handling INT 2D anti-debugger technique in IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/6268/handling-int-2d-anti-debugger-technique-in-ida-pro",
  "content": "I'm analyzing a PE file using IDA Pro that is using int 2Dh technique as anti debugging:  \n\n```\nCODE:00455050 push    ebp\nCODE:00455051 mov     ebp, esp\nCODE:00455053 push    ecx\nCODE:00455054 push    ebx\nCODE:00455055 push    esi\nCODE:00455056 push    edi\nCODE:00455057 xor     eax, eax\nCODE:00455059 push    ebp\nCODE:0045505A push    offset loc_455076\nCODE:0045505F push    dword ptr fs:[eax]\nCODE:00455062 mov     fs:[eax], esp\nCODE:00455065 int     2Dh             ; Windows NT - debugging services: eax = type\nCODE:00455067 inc     eax\nCODE:00455068 mov     [ebp+var_1], 1\nCODE:0045506C xor     eax, eax\nCODE:0045506E pop     edx\nCODE:0045506F pop     ecx\nCODE:00455070 pop     ecx\nCODE:00455071 mov     fs:[eax], edx\nCODE:00455074 jmp     short loc_455084\n\n```\nHow should I config IDA Pro to handle this interrupt/exception in dynamic analyzing?\nI'm Using the local win32 debugger\n\n",
  "votes": "6",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "debugging",
    "anti-debugging"
  ],
  "user": "Ariyan",
  "time": "Sep 20, 2014 at 19:53",
  "comments": [
    {
      "user": "evlncrn8",
      "text": "CODE:0045505A push    offset loc_455076  well thats setting up an seh, so i'd set a bpx there as it most likely trips the seh, and within the seh eip is set to a new address to continue from... its been a while since i played with int2d so i cant remember its entirety but the code after it looks pretty bogus",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The code is expecting an exception to occur, which will happen in the absence of a debugger.  If a debugger is present, the breakpoint exception will usually be suppressed by the debugger, and execution will continue at either 0x455067 or 0x455068, depending on the debugger.\n\nYou have two simple choices: one choice is that you could just let execution reach 0x455084 and then change var_1 back to zero (or whatever value that it had originally).  What you don't want is for it to have the value of \"1\".\n\nThe other choice is to change the byte at 0x455065 from 0xCD to 0xFF (for example) and then let that execute.  This sequence will cause an exception to occur, which is really what you want to happen (note that the exception code won't be correct, so you'll need to watch if the code checks for a 0x80000003, and take that code path).  The execution will be transferred to the handler at 0x455076, at which point you can change the byte at 0x455065 back to 0xCD (in case the code is self-checking), and then resume debugging.\n\n",
      "votes": "5",
      "user": "peter ferrie",
      "time": "Sep 20, 2014 at 23:35",
      "is_accepted": true,
      "comments": []
    }
  ]
}