{
  "title": "What is stored in the virtual function table? (Android NDK, GNU C++)",
  "link": "https://reverseengineering.stackexchange.com/questions/4314/what-is-stored-in-the-virtual-function-table-android-ndk-gnu-c",
  "content": "I see that the virtual method table (VMT, a.k.a. VFT) contains some odd values, e.g.:\n\n```\nobj:0x123c1a8 [704] vmt:0x611f77f8\ndata: 0123c1a8 f8 77 1f 61 00 96 23 01 00 00 00 00 c4 e0 b4 5c 00 00 00 00 00 00 00 00 00 00 00 00 30 f2 76 5e 78 a2 23 01 78 e0 b4 5c 00 00 00 00 14 b1 75 5e 00 00 00 00 f8 7c 1f 61 f0 a2 23 01 00 00 00 00 `w`a``#````````\\````````````0`v^x`#`x``\\``````u^`````|`a``#`````\nvmt:  611f77f8 09 63 98 60 25 63 98 60 95 67 98 60 e5 67 98 60 9d 68 98 60 e1 2f 9f 5c 51 07 9f 5c 45 07 9f 5c 49 07 9f 5c 4d 07 9f 5c 99 a3 69 5e a1 a3 69 5e 31 dd 68 5e a1 dd 68 5e d1 dd 68 5e c1 dd 68 5e `c``%c```g```g```h```/`\\Q``\\E``\\I``\\M``\\``i^``i^1`h^``h^``h^``h^\n\n```\n(You see these odd 0x60986309 and 60986325 in the beginning of the virtual function table.)\n\nWhat is stored in the virtual function table?\n\nThe compiler is GCC, more precisely, G++ (GNU C++) for ARM from the Android NDK.\n\nEDIT: I see that the VMT contains entries that are not pointers to functions.\n\nHere's the disassembled code for the Qt class QSystemLocale, you see pairs of lines, these are the IDA output lines followed by the same lines processed by c++filt:\n\n```\n _ZTV13QSystemLocale      DCD 0, _ZTI13QSystemLocale, _ZN13QSystemLocaleD2Ev+1, _ZN13QSystemLocaleD0Ev+1\n vtable for QSystemLocale DCD 0, typeinfo for QSystemLocale, QSystemLocale::~QSystemLocale()+1, QSystemLocale::~QSystemLocale()+1\n\n             DCD _ZNK13QSystemLocale5queryENS_9QueryTypeE8QVariant+1\n             DCD QSystemLocale::query(QSystemLocale::QueryType, QVariant) const+1\n\n             DCD _ZNK13QSystemLocale14fallbackLocaleEv+1\n             DCD QSystemLocale::fallbackLocale() const+1\n\n```\nHere we see that:\n\nThe typeinfo is:\n\n```\n             EXPORT _ZTI13QSystemLocale\n             EXPORT typeinfo for QSystemLocale\n\n _ZTI13QSystemLocale DCD _ZTVN10__cxxabiv117__class_type_infoE+8, _ZTS13QSystemLocale\n typeinfo for QSystemLocale DCD vtable for __cxxabiv1::__class_type_info+8, typeinfo name for QSystemLocale\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "629",
  "tags": [
    "c++",
    "android",
    "arm",
    "virtual-functions"
  ],
  "user": "18446744073709551615",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Why do you think these values are \"odd\"? Odd in the sense of \"strange\", or \"not divisible by 2\"?\n\nThe values in the vmt are pointers to the functions (or methods, thus vmt vs. vft) of the class object. These seem quite ok, because the vmt's address 0x611f77f8 is slightly above the methods 60986309, 60986325. As the compiler compiles all class methods first, then creates the vmt, a vmt at a memory address a bit higher than the methods seems quite normal.\n\nNow, instructions on an ARM are 4-byte-aligned, and in THUMB mode, they're 2-byte-aligned, but the addresses your function pointers point to aren't. This is because, when executing an indirect branch, the ARM processor uses the lowest bit to switch between THUMB and ARM mode. So, an address of 0x60986309 actually means \"switch the processor to THUMB mode, then begin executing at 0x60986308. When calling one of the vmt functions, the compiler generates an instruction to put the vmt reference into a register, then does a BLX on that register, so the lowest bit will have its meaning to switch the instruction type.\n\nFrom this ARM reference:\n\n```\nRm is a register containing an address to branch to.\n....\nThe BX and BLX instructions can change the processor state from ARM to Thumb, or from Thumb to ARM.\nBLX label always changes the state.\nBX Rm and BLX Rm derive the target state from bit[0] of Rm:\n    if bit[0] of Rm is 0, the processor changes to, or remains in, ARM state\n    if bit[0] of Rm is 1, the processor changes to, or remains in, Thumb state.\n\n```\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "May 12, 2014 at 14:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "18446744073709551615",
          "text": "I edited the question and mentioned things like VMT items that are not pointers to functions.",
          "time": null
        }
      ]
    },
    {
      "content": "As to the 0 in the beginning of VFT, it must be the offset to top as described in http://mentorembedded.github.io/cxx-abi/abi.html#vtable-components . The value is used when a class is derived from several base classes.\n\nThis 0 is vmt[-2] when you obtain the vmt address at run-time, but in the IDA disassembly it is the very first element of vtable.\n\n```\n; DerivedStuff::DerivedStuff(int, int)\n            EXPORT _ZN12DerivedStuffC2Eii\n_ZN12DerivedStuffC2Eii\n            PUSH            {R4,LR}\n            MOV             R4, R0\n            BL              _ZN9BaseStuffC2Eii ; BaseStuff::BaseStuff(int,int)\n            LDR             R3, =(_ZTV12DerivedStuff_ptr - 0x1AF4)\n            MOV             R0, R4\n            ADD             R3, PC ; _ZTV12DerivedStuff_ptr\n            LDR             R3, [R3] ; `vtable for'DerivedStuff\n            ADDS            R3, #8 ; <===== this is where 8 is added to the vmt address!!!\n            STR             R3, [R4]\n            POP             {R4,PC}\n; End of function DerivedStuff::DerivedStuff(int,int)\n\n```\n",
      "votes": "1",
      "user": "18446744073709551615",
      "time": "May 14, 2014 at 7:47",
      "is_accepted": false,
      "comments": []
    }
  ]
}