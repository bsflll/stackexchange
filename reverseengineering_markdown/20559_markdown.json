{
  "title": "What is this assembly code, fld qword ptr code here doing? Also, how do I store my own value?",
  "link": "https://reverseengineering.stackexchange.com/questions/20559/what-is-this-assembly-code-fld-qword-ptr-code-here-doing-also-how-do-i-store",
  "content": "I was reverse engineering a game using cheat engine and trying to trace where my health gets reduced.\n\nBasically the health gets stored in the stack and then pops out for displaying on the screen. After it pops out I tried to modify the memory address but that didn't work. Which means we need to modify it before it gets placed into the stack. After lots of diligent scrolling back, I came across the following code.\n\n```\nfld qword ptr[ebp-38]\n\n```\nThis code basically pushes my health onto the stack. However, there are a whole bunch of really odd things in this code:\n\n(If screenshot doesn't show big then right-click and \"open in new tab\" for a bigger size).\n\n\n\n\nSo my question is:\n\n1) What does this instruction do exactly?\n\n2) To change this value to a custom value, can I change the source address? (wherever that is?). Assuming that that is [EBP-38] If yes, then can I use a simple move instruction for this?\n\nSomething like mov [ebp-38], (hex value for 99 float)?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "assembly",
    "cheat-engine"
  ],
  "user": "Mugen",
  "time": "Feb 5, 2019 at 12:14",
  "comments": [],
  "answers_data": [
    {
      "content": "Qword is 8 bytes not 4 bytes so what you show in your first screen shot as 32 bit value is not correct representation\n\nebp-38 is an address \nit can point to x y z where x,y,z can be char , int , float  , double , \"your fancy new secret type\"\n\nQword qualifies the address with the type here it says it is a 64 bit numeric \n\nfloat operations opearate on float (32) / double (64) / and ? long double ?? 80 \n\n```\ncdb -c \".formats 4051eccc`c0000000;q\" cdb | grep -iE \"Double|Float\"\n  Float:   low -2 high 3.28008\n  Double:  71.7\n\n```\nyou can see how float operations work on botb 32 bit as well as 64 bit based on bit size type qualifiers assembling some instructions in-place \n\n```\n0:000> a .\n771f05a6 push 4051eccc\n771f05ab push 0xc0000000\n771f05b0 fld qword ptr [esp]\n771f05b3 fld dword ptr [esp]\n\n```\ndisassembling to confirm \n\n```\n771f05b6\n0:000> u . l4\nntdll!LdrpDoDebuggerBreak+0x2c:\n771f05a6 68ccec5140      push    4051ECCCh\n771f05ab 68000000c0      push    0C0000000h\n771f05b0 dd0424          fld     qword ptr [esp]\n771f05b3 d90424          fld     dword ptr [esp]\n\n```\nstepping through to see the results\n\n```\n0:000> \n771f05a6 68ccec5140      push    4051ECCCh\n0:000> t\n771f05ab 68000000c0      push    0C0000000h\n0:000> t\n771f05b0 dd0424          fld     qword ptr [esp] ss:0023:000af874=4051ecccc0000000\n0:000> t\n771f05b3 d90424          fld     dword ptr [esp]      ss:0023:000af874=c0000000\n\n```\nquerying registers\n\n```\n0:000> r st0\nst0=-2.0000000000000e+0000 (1:4000:8000000000000000)\n0:000> r st1\nst1= 7.16999969482421875000000000000e+0001 (0:4005:8f66660000000000)\n0:000> dd esp l2\n000af874  c0000000 4051eccc\n\n0:000> ?? *(float *) @@masm(@esp)\nfloat -2\n\n0:000> ?? *(double *) @@masm(@esp)\ndouble 71.6999969482421875\n\n```\nyou should better read this to learn how fpu works why the top slot is copied etc At Simply FPU by Raymond Filiatreault  read chapter 1 internals where he explains how st registers are loaded and copied and trashed an unloaded\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Feb 5, 2019 at 13:20",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mugen",
          "text": "I've tried to read this answer multiple times but it goes over my head. Each time I quit somewhere in the middle. I guess I'll have to catch someone to put this in simple words. Thanks for replying.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "it is simple qword (quad word) is 64bit number   fld uses Qword in that instruction you posted so it means it is operating on DOUBLE  (8 bytes ) not  32 Bit Float (4 bytes)",
          "time": null
        },
        {
          "user": "Mugen",
          "text": "Could you please explain what is \"0:000> a .\" just before the code? I don't think I've seen that anywhere.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "open windbg and try that  . is alias for current instruction pointer (eip / rip) a is assemble command  it assembles in place  a . is assemble at eip  u . is disassemble at eip",
          "time": null
        }
      ]
    },
    {
      "content": "I think fld instruction is something like you load floating value into FPU registers. Example st0 to st7\n\nNote: f means floating\n\nHow do I store my own value?\n\nIf you interested, this is just example to load your own value :\n\n```\nglobal _start\n\nsection .data\nvalue: dq 3.0\n\nsection .text\n\n_start:\n\nfld qword [value] ; store 3 into st0 \n\n```\n",
      "votes": "0",
      "user": "Febriyanto Nugroho",
      "time": "Dec 16, 2019 at 11:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}