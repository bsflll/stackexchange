{
  "title": "How to identify HTML5 geolocation protocol of a browser? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/5993/how-to-identify-html5-geolocation-protocol-of-a-browser",
  "content": "I've been trying to figure how a html5 browser like chrome or firefox performs geolocation under the hood but I'm running into some difficulties.\n\nTo be more precise, I want to know what happens when a piece of javascript calls navigator.geolocation.getCurrentPosition (success_func) but before success_func actually gets called back. I want to know how the browser goes about obtaining the latitude and longitude coordinates. What's the protocol it uses? What servers does it query to obtain this information? etc.\n\nHere's what I have determined and tried:\n\nIf you guys were trying to determine and reverse the protocol a given browser uses to implement geolocation how would you guys proceed?\n\nHere are some things I've already looked at that I found helpful:\n\nThe problem is some of the info mentioned there is out-of-date and no longer accurate. My aim now is to figure out exactly what changed and how an external custom application can use this protocol itself for geolocation.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "807",
  "tags": [
    "tools",
    "protocol"
  ],
  "user": "greatwolf",
  "time": "10 years ago",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "Off-topic since both Chromium and Firefox are open-source, and thus this question is about software development.",
      "time": null
    },
    {
      "user": "Brilliand",
      "text": "@JasonGeffner It seems to fit within the definition in the help center; this question is not about debugging, but rather about converting source code to plain English (in the least charitable interpretation).  Questions about reading source code (especially large, unfamiliar codebases) don't seem to be ruled out by the help center's definition.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "It takes about 5 seconds to enter googleapis.com geolocation from mac address into google to find the reference at developers.google.com/maps/documentation/business/geolocation/â€¦. This includes a \"WiFi access point objects\" section. Jason is right, you don't need any reverse engineering.",
      "time": null
    },
    {
      "user": "greatwolf",
      "text": "@GuntramBlohm There's only one issue with that: it requires enabling billing which requires inputting credit card and personal info. This is the first thing I've tried. How is chrome and firefox able to use the api in this case? Do they have a special api-key they use or something?",
      "time": null
    },
    {
      "user": "greatwolf",
      "text": "When I first posted this, the question felt like it was in the spirit of RE. However, if SO is a better fit, feel free to migrate it there.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For Firefox (i.e. Gecko) and Chrome (i.e. Blink) you can just look in the source code:\n\nSearching the Firefox codebase for getCurrentPosition yields the source file nsGeolocation.cpp. As you see in the linked source line, it creates an instance of a geolocation provider. Assuming Firefox for Desktop, there is only the NetworkGeolocationProvider (FirefoxOS may also use GPS).\n\nIn essence, Gecko opens an XMLHttpRequest to the URL specified in about:config as geo.wifi.uri. Per default this is https://www.googleapis.com/geolocation/v1/geolocate?key=%GOOGLE_API_KEY%.\n\nBlink performs its http request in network_location_request.cc, with the same API endpoint defined as in Firefox (cf. location_arbitrator_impl.cc).\n\n(NB: I looked at Gecko HG revision a4f779bd7cc2 and Blink SVN revision 287303)\n\n",
      "votes": "2",
      "user": "freddyb",
      "time": "Aug 4, 2014 at 8:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}