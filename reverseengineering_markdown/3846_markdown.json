{
  "title": "Decoding the wire protocol (over RS232) for custom hardware <-> windows application?",
  "link": "https://reverseengineering.stackexchange.com/questions/3846/decoding-the-wire-protocol-over-rs232-for-custom-hardware-windows-applicat",
  "content": "I have a hardware device with an RS232 port, and a Windows (XP) application that it talks to. No OS-level drivers beyond basic serial, so all the decoding is done in the app.\n\nI have the ability to capture bidirectional wire traffic and generally snoop on the serial port (good ol' Sysinternals Portmon to logfile, with some perl post-processing (parsing out IRP_MJ_(READ|WRITE) events) to get raw byte dumps).\n\nFrom this I've gotten the basic wire protocol details (baud rate, settings, etc)\n\nMessages appear to be in the format { $body }  \n, where sent commands are usually a single byte or 2 in the body, responses are much more complex.\n\nThey span several messages, and appear to have additional structure, something like:\n\nActual example follows:\n\n```\n> {C}\\x0D\n< {IDCOMPLIANCE\\x20\\x20\\x20\\x20\\x20\\x20D245}\n{SA001FD8BL0001C061BC}\n{DL20I000000V80050300DE076A0012000400AF002400FF030300DE0700000000010003000000B883}\n{DL20I000020VFF140200DE070900010001000D000100FF0C0200DE076E006E000300A5075904C953}\n{DL20I000040VFF0B0200DE07120111010700DE11E406FF0A0200DE070401030105008D12640B3B0C}\n{DL20I000060VFF090200DE07F400F400050046112F0AFF080200DE076C016C0107003419950D7181}\n{DL20I000080VFF070200DE0753015101060063172A0CFF060200DE07D400D3000A00BE0DF504877D}\n{DL20I0000A0VFF050200DE07F200F200040047117309FF040200DE071601150107000414F10C292B}\n{DL20I0000C0VFF030200DE07D400D4000500260FC108FF020200DE07B900B90006004C0D26083825}\n{DL20I0000E0VFF010200DE07B601B60107001E21F718FF1F0100DE0710010C010900B913150DE89C}\n{DL20I000100VFF1E0100DE0785017F010900531A2F0EFF1D0100DE071B01180108001C146D0CE542}\n{DL20I000120VFF1C0100DE077E007B0005009C092107FF090100DE0754000100020008000100A748}\n{DL20I000140V0000000000000000000000000000000000000000000000000000000000000000D71C}\n{DL20I000160V0000000000000000000000000000000000000000000000000000000000000000725F}\n{DL20I000180V000000000000000000000000000000000000000000000000000000000000000010A5}\n{DL20I0001A0V00000000000000000000000000000000000000000000000000000000000000004CC1}\n{TE5186}\n\n```\nI also have access to the controlling application which I can get to log certain data (which may or may not be quite what it's talking over the wire) to friendly formats like CSV etc.\n\nGiven my progress so far is mostly matching up CSV outputs with wire dumps, is there any value in trying to investigate the actual application more...invasively?\n\nI have very little experience with asm, windows binaries, and windows debugging, but it seems like it might be possible to poke around in the binary either statically or while it's running, and look for where the decoding happens.\n\nIf I can find that, I can hopefully scrabble up enough asm to understand how it's being generated/parsed, and map that to what I see it actually sending.\n\nThe problem is actually finding those [de]coding routines with my limited knowledge.\n\nTwo approaches suggest themselves to me:\n\n[Note that I'm doing this in a VMWare VM on a Mac, in case that matters for anything]\n\nI've currently been playing around with OllyDbg for windows, and the demo version of Hopper Decompiler, which is affordable if it'll be of use.\n\nIDA or Hex-Rays would be nice, but is a bit out of my budget unless there's something there (like, a 'Decode Mystery Protocol' button) that would justify it.\n\nSo,\n\nI suspect it breaks down something like:\n\nEach entry contains a date (dd/mm/yy, probably in a weird format like 'fractional number of fortnights since first summer solstice following the Fall of Rome'), and a bunch of integer and fractional (fixed point rather than float, probably)\n\nSome fields are I think 16 bit, and little-endian (Entry#2 last 4 bytes is 0x0459 which matches observed data)\n\n[Apologies for the broken links, need more rep to add >2 apparently]\n\n",
  "votes": "5",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ollydbg",
    "encodings",
    "serial-communication",
    "hopper"
  ],
  "user": "Shabble",
  "time": "Mar 11, 2014 at 1:38",
  "comments": [],
  "answers_data": [
    {
      "content": "My guess:\n\n```\nDL20I000000V80050300DE076A0012000400AF002400FF030300DE0700000000010003000000B883\n^^  ^      ^                                                                ^^^^\n||  Addr   Data                                                            CRC16\n|` Length\n` Data tag\n\n```\nIt looks vaguely like a flash file format for programming PROMs or microcontrollers.  IHEX doesn't have letters.  SREC is similar to what you have.\n\n",
      "votes": "6",
      "user": "Ben Jackson",
      "time": "Mar 11, 2014 at 7:30",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Netzob is a tool expressly built for this purpose.  I have nothing to do with the creation of the tool, and it does still have bugs in my experience, but it's very useful for this kind of reverse engineering of protocols.\n\n",
      "votes": "1",
      "user": "masterX244",
      "time": "Aug 2, 2022 at 15:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}