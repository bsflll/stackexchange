{
  "title": "Understanding __PAIR__ macro from IDA PRO Pseudo Decompiler to look better",
  "link": "https://reverseengineering.stackexchange.com/questions/4269/understanding-pair-macro-from-ida-pro-pseudo-decompiler-to-look-better",
  "content": "When I decompile using IDA PRO I get code which could look like both of these\n\nUnderstanding the __PAIR__ macro.\n\nMacro itself.\n\n```\n// The following definition is not quite correct because it always returns\n// uint64. The above C++ functions are good, though.\n#define __PAIR__(high, low) (((unsigned long)(high)<<sizeof(high)*8) | low)\n\n```\n\nif ( (__PAIR__(a4, a3) & 0x8000000000000000ui64) == 0i64 ) {\n  //condition code.\n}\n\nI also have code that looks like this\n  if ( (__PAIR__(v17, v12) & 0x8000000000000000ui64) != 0i64 ) {\n    //condition code.\n  }\n\nI actually found some guy who helped me repair this bad looking code and as far I could tell by the pattern they could simply be replaced like so.\n   if( (__PAIR__(a4, a3) & 0x8000000000000000ui64) == 0i64 )\n\nbecomes\n   if(a4 >= 0 && a3 >= 0)\n\nNow I found a very similar pattern that looks like above but instead of == 0i64 it has != 0i64\nSo I figured if my pattern is correct then the following code below\n  if ( (__PAIR__(v17, v12) & 0x8000000000000000ui64) != 0i64 ) {\n\nshould look like this\n  if( v17 < 0 || v12 < 0 ) {\n\nThen again that's just a guess I wonder if that's correct.\nI can't post the assembly for the != 0i64 example as I couldn't find it the assembly code is very big.. but the one with == 0i64 looks like this\n.text:004049F0                 mov     edx, [esp+a3]\n.text:004049F4                 test    edx, edx\n.text:004049F6                 jl      short locret_404A3E\n.text:004049F8                 mov     eax, [esp+a4]\n.text:004049FC                 test    eax, eax\n.text:004049FE                 jl      short locret_404A3E\n\n\n\n",
  "votes": "8",
  "answers": 1,
  "views": "5k",
  "tags": [
    "ida",
    "decompilation",
    "decompiler"
  ],
  "user": "user3435580",
  "time": "May 5, 2014 at 10:37",
  "comments": [],
  "answers_data": [
    {
      "content": "No, that's not correct. The correct simplification is:\n\n```\nif ((int)a4 >= 0)\n\n```\nNope, it should look like this:\n\n```\nif ((int)v17 < 0) {\n\n```\nYou may want to read up on how the most significant bit (MSB) is used as the sign bit in two's complement notation.\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "May 5, 2014 at 16:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "user3435580",
          "text": "But it seems to be a PAIR of 2 variables why only one is used there? I understand the variables could be created out of thin-air due to the way assembly works. But I do believe this should still check both at once am I wrong? also since it checks for a 64 bit mask i'm guessing thats 32 bit per variable? this is made for x86 exe not 64bit exe.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "It appears in the disassembly as two variables because the original code used a 64-bit variable, which gets broken up into two 32-bit variables in the disassembly. Since only the MSB of the 64-bit value is checked (since the code is checking the value's sign), the lower DWORD portion of the 64-bit value is irrelevant, which is why my simplified code above ignores a3 and v12.",
          "time": null
        },
        {
          "user": "user3435580",
          "text": "So as far as I understand IDA PRO did a bad analyze on the assembly to think it's 64bit when it's really 2 variables DWORDS. Why does the assembly above I posted have a3 and a4 I think the asm is interpreted the same in ollydebugger as well that assembly is for the == 0i64",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "\"IDA PRO did a bad analyze on the assembly to think it's 64bit when it's really 2 variables DWORDS\" -- no, it really is a 64 bit value; IDA didn't make a mistake here as far as I can see.",
          "time": null
        }
      ]
    }
  ]
}