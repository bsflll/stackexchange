{
  "title": "Modifying (adding new logic) decompiled apk to log different kind of data causing problems (crash/bluetooth connection)",
  "link": "https://reverseengineering.stackexchange.com/questions/25088/modifying-adding-new-logic-decompiled-apk-to-log-different-kind-of-data-causin",
  "content": "I have separately decompiled apk to smali/dalvik and to java classes. As apk is not obfuscated java code is pretty good to read and I can pretty easily see corresponding smali code. \nSo far I was able to do successfully:\n\nWhat I was trying to add next was to add logging for byte array. Why? Because this apk connects to Bluetooth device from which it receives the data. I wanted to know what data it receives. As I didn't know how to do that this is what I did:\n\nI've made simple Android app with static function which gets byte array and returns string (copied some snipped). It was using BigInteger. Then I compiled it and decompiled using apktool.\n\n```\n    .method public static ByteArrayToString([B)Ljava/lang/String;\n    .locals 2\n    .param p0, \"data\"    # [B\n\n    .line 16\n    new-instance v0, Ljava/math/BigInteger;\n\n    const/4 v1, 0x1\n\n    invoke-direct {v0, v1, p0}, Ljava/math/BigInteger;-><init>(I[B)V\n\n    const/16 v1, 0x10\n\n    invoke-virtual {v0, v1}, Ljava/math/BigInteger;->toString(I)Ljava/lang/String;\n\n    move-result-object v0\n\n    .line 17\n    .local v0, \"hexaString\":Ljava/lang/String;\n    return-object v0\n    .end method\n\n```\nI copied that whole function to my decompiled apk (the same class from which I wanted to call it/log data) and called that function.\n\n```\n    invoke-static {v0}, Lxx/xxxx/xxxxx/xx/xxxx/xxxxxx;->ByteArrayToString([B)Ljava/lang/String;\n    const-string v5, \":: MY RAW DATA: \"\n    invoke-static {v5}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n    move-result-object v4\n    invoke-static {v4}, Lorg/apache/log4j/helpers/LogLog;->debug(Ljava/lang/String;)V\n\n```\nUnfortunately it didn't work. Application compiled succesfully, it installed and lunched without a crash. However it didn't connect to my bluetooth device (bluetooth communication is essential). \n\nSo here are some questions (edited):\n\nEDIT:\n\nI've solved my initial problem, now I'm trying to figure out the rest. \nAnswers are:\n\n```\ninvoke-static {v0}, Ljava/util/Arrays;->toString([B)Ljava/lang/String;\n\n```\n```\nBluetoothUtils: packagename is xx.xxxxx.xxxx ,and its permission is false\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "560",
  "tags": [
    "android",
    "apk",
    "dalvik"
  ],
  "user": "matt",
  "time": "May 22, 2020 at 21:15",
  "comments": [],
  "answers_data": [
    {
      "content": "I think your approach is generally correct. You probably can't connect to the Bluetooth because your additional code throws an exception somewhere. The best idea would be to check it during dynamic analysis. You can do it using for example Android Studio and smalidea plugin.\n\nAs far as I see you don't store the result of your ByteArrayToString function call. You also pass only one parameter to the android.util.Log.d function (in your case v5) but it actually requires two parameters.\n\nYou can hook and intercept functions in android applications using for example dynamic instrumentation. Good tool for this purpose is named frida. Thanks to this tool you can hook various functions and change the behavior during runtime (for example add logging feature) without repacking the application. You don't need to mess with smali code, instead you can just use their easy JavaScript API. \n\nIf you are interested in the Bluetooth data logging there is even better way. You can use bulit-in Android function called Bluetooth HCI snoop log. You can enable it in developer options on your phone. After you enable the option all the bluetooth communication made between those devices will be recorded and saved onto internal storage. You can later copy the btsnoop_hci.log and possibly all files with the .cfa extension to further examination. Those files can be loaded into for example popular program named WireShark and inspected similar  to PCAP files.\n\n",
      "votes": "2",
      "user": "morsisko",
      "time": "May 22, 2020 at 15:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "matt",
          "text": "Thanks you for your input. I mixed up two functions, one accepts 1 parameter and the other one 2. Also - strangely my problem with bluetooth fixed itself when I enabled GPS. However I'm not 100% sure if that's the case. In logs I there's this: \"BluetoothUtils: packagename is xx.xxxxx.xxxx ,and its permission is false\". I found also my old code (I've been trying to solve this problem of mine few years back) and I used \"invoke-static {v0}, Ljava/util/Arrays;->toString([B)Ljava/lang/String;\" and it should work also.",
          "time": null
        },
        {
          "user": "morsisko",
          "text": "Well, the new log looks strange, but according to the GPS, since some time Android may require the \"Get location\" permission if the app uses Bluetooth. Maybe you denied the permission in the repacked app, so the bluetooth didn't work, and now after turning GPS on the app displayed some sort of monit and obtained necessary permissions. It is just theory. Also if you need the logging feature only to capture bluetooth patckets, I highly recommend to use the Bluetooth HCI snoop log without modifying smali code. Wireshark and static analyse of the .apk may be enough to understand the logic.",
          "time": null
        }
      ]
    }
  ]
}