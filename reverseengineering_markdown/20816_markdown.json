{
  "title": "Is it possible to change a signed byte to an int in compiled assembly code?",
  "link": "https://reverseengineering.stackexchange.com/questions/20816/is-it-possible-to-change-a-signed-byte-to-an-int-in-compiled-assembly-code",
  "content": "I'm trying to mess around with an old game and I want to reposition a UI element. \n\nI found the address of where the x and y position get set (It's set to an X position of 90 and a Y position of 358) but it appears that because the 90 value is less than 128, the compiler optimized the assembly and changed the assembly from a push int (68 ? ? ? ?) to a push signed byte (6a ?).\n\nThis means that I'm unable to extend the X position beyond 128.\n\nIs there any way for me to set the X position to something like 1000? I would need to somehow be able to change the assembly code to do a push int instead, correct? Will asm help me achieve that? Or what other methods could I use?\n\nHere's what I'm talking:\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "83",
  "tags": [
    "assembly",
    "patching"
  ],
  "user": "Nikita Buyevich",
  "time": "Mar 7, 2019 at 21:18",
  "comments": [],
  "answers_data": [
    {
      "content": "As you mentioned, 0x6a is the instruction push Ib, in this case, the operand is encoded in only one byte and it's signed (i.e. 0x6a 0xff â†’ push -1). You need to promote to the instruction 0x68 push Iz which means expand the instruction. Your choice is rather limited. I suggest you try to find some code cave and jump on it to setup the stack as you want.\n\nTo do so:\n\n",
      "votes": "2",
      "user": "wisk",
      "time": "Mar 7, 2019 at 23:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}