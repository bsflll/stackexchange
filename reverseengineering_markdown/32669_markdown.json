{
  "title": "Question about anti-debug methods and anti-anti-debug methods",
  "link": "https://reverseengineering.stackexchange.com/questions/32669/question-about-anti-debug-methods-and-anti-anti-debug-methods",
  "content": "I've come across several binaries that have simple anti-debug methods in place, like checking IsDebuggerPresent(), NtQueryInformationProcess(), etc. But I recently came across a binary that looked totally new to me. It was completely filled with add byte ptr ds:[eax], al instructions. The IDA tree graph was so large that it wouldn't even load, and after IDA took 20 minutes to process the instructions to load it, the file was 500mb+ on disk (the binary is 30mb). I've attached a screenshot of what some of it looks like here:\n\n\n\nAny time during debugging when it hits one of these it basically crashes immediately.\n\nI was able to execute the binary via rundll32.exe and then attach to it really quickly, putting some hardware breakpoints on some stack strings that looked interesting, but then I would see this:\n\n\n\nWhere it appears any time I tried to attach to the running process with the debugger, this stack string saying \"noway\" would always get loaded, I'd tried to step through some instructions, and then it eventually would crash.\n\nWhen looking at the binary through DIE, the import table only has one import: MSVBM60.dll, however, when I run the binary through rundll32.exe and then quickly attach to the running process, it starts to load dozens of other Windows DLL's.\n\nMy questions are this:\n\nIf anyone is interested in looking at this binary you can get it her, but WARNING!!! IT IS MALICIOUS: https://mega.nz/file/ssBBGI4C#YcOYWDmENZkfpdPKwV6h0Iw9wDgJWsced5oXcy7R8bc\n\nPassword to it is infected\n\n",
  "votes": "0",
  "answers": 0,
  "views": "113",
  "tags": [
    "x64dbg",
    "anti-debugging"
  ],
  "user": "Joshua Terrill",
  "time": "Jan 26, 2024 at 3:35",
  "comments": [
    {
      "user": "jsotola",
      "text": "filled with add byte ptr ds:[eax], al instructions ... look at the bytes  ... they are not instructions",
      "time": null
    },
    {
      "user": "Joshua Terrill",
      "text": "Every time it gets past one of those lines, it throws an exception though, so I'm not sure what is causing that to happen.",
      "time": null
    },
    {
      "user": "ynwarcs",
      "text": "the program does run in the same manner whether it's being debugged or not, unless the debugger intervenes. what this means is that the program you're debugging is detecting that you've attached the debugger and forcefully doing something unexpected to deter you from debugging. there's a very comprehensive list of anti-debug techniques here that will hopefully help you get to the bottom of it.",
      "time": null
    }
  ],
  "answers_data": []
}