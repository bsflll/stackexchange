{
  "title": "strange arm construct in objective-c application",
  "link": "https://reverseengineering.stackexchange.com/questions/30620/strange-arm-construct-in-objective-c-application",
  "content": "I was reversing the objective-c application and stumbled upon an assembler construction that I don't understand:\n\nThis is call of some function with SP register (+ 0x18 offset) as parameter. (Picture1).\n\n\n\nThis is part of that(sub_10015B4C8) function. X0 register is using for some calculations(which using for next jump) (Picture2).\n\n\nPicture3 shows the pseudo code generated by ida. As I said above there is jumpout that is calculated dinamycally. v0 shown by ida as x22 which as you can see in the last picture gets the value from the x0 register.\n\n\n\nThe question is the following:\n\nThere are two options either x0 register is equal to SP + 0x18 or __chkstk_darwin changed the x0 register value (But I did not find any documentation for this function). With the first option it's hard for me to understand how the jump is calculated if x0 depends by the SP register?\n\nPicture4 is end of function(with jump).\n\n\n",
  "votes": "2",
  "answers": 1,
  "views": "152",
  "tags": [
    "ios",
    "arm64"
  ],
  "user": "CABAL",
  "time": "Jul 12, 2022 at 15:08",
  "comments": [],
  "answers_data": [
    {
      "content": "The problem is the call to _chkstk_darwin. It is an internal compiler helper which probes the stack to make sure there’s enough space for local variables and does not modify X0, however IDA currently does not know that and assumes that X0 is the return value as for any normal function.\n\nIf you modify the prototype of _chkstk_darwin to specify void return type and an empty spoiled registers list (__spoiled<>), then X0 should be properly preserved across the call.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jul 15, 2022 at 9:45",
      "is_accepted": false,
      "comments": [
        {
          "user": "CABAL",
          "text": "Then the X0 register depends by the SP register which is even weirder",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "That’s not weird. Looks like it’s used to take an address of a local variable.",
          "time": null
        },
        {
          "user": "CABAL",
          "text": "Yes, but v2 using v1 which using v0(X0) by value so is jump dependent by localvar address?",
          "time": null
        }
      ]
    }
  ]
}