{
  "title": "Tools to hook browser's Javascript function implementations",
  "link": "https://reverseengineering.stackexchange.com/questions/32358/tools-to-hook-browsers-javascript-function-implementations",
  "content": "I'm wondering if there is a way to hook or inject code into Javascript's  implementation of a native function. For example, print the calling parameters whenever an encrypt() function is called. I not looking for a solution that works from inside the browser e.g. some kind of extension because it may break the behavior of my program or may get detected. I'm looking a way to patch a Javascript's implementation of a method something probably faster than patching the V8 (or whatever engine is used).\n\nThanks you for your time.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "248",
  "tags": [
    "javascript",
    "websites"
  ],
  "user": "tur11ng",
  "time": "Oct 4, 2023 at 16:17",
  "comments": [],
  "answers_data": [
    {
      "content": "If you have access to the DevTools console and you're able to make the call to encrypt happen whenever you want after the page loads, then you could just redefine the encrypt method to log what's being passed to it:\n\n```\nlet encryptCopy = crypto.subtle.encrypt;\n\ncrypto.subtle.encrypt = function() {\n    console.log(arguments);\n    encryptCopy.apply(this, arguments);\n};\n\n```\nIf you need to redefine before the document fully loads, then you could do the following:\n\nI know you said no extensions, but instead of doing that stuff above, if you can use Tampermonkey, then you could create a userscript to run at document-start, then place the code above inside of a MutationObserver so that your version of encrypt is used when the page loads.\n\nExample:\n\n```\n// ==UserScript==\n// @name         Sniff encrypt()\n// @namespace    http://tampermonkey.net/\n// @version      0.1\n// @description  Redefine encrypt to view its params.\n// @author       dsasmblr\n// @match        https://*.PutYourSiteHere.com/*\n// @grant        none\n// @run-at       document-start\n// ==/UserScript==\n\n(function() {\n    'use strict';\n\n    const t = document.body;\n    const c = { childList: true, subtree: true };\n\n    const cb = (mutList, obs) => {\n        if (mutList) {\n            let encryptCopy = crypto.subtle.encrypt;\n\n            crypto.subtle.encrypt = function() {\n                console.log(arguments);\n                encryptCopy.apply(this, arguments);\n            };\n        };\n\n        obs.disconnect();\n    };\n\n    const obs = new MutationObserver(cb);\n\n    obs.observe(t, c);\n})();\n\n```\n(Make sure you change the @match line to contain your domain name of interest. Keeping the asterisks where they are means the script will run on every page of the domain, so change that to be the specific page you want it to run on if need be.)\n\nIf you have problems with trap debugger statements to catch DevTools, then click the Deactivate breakpoints button in the Sources tab (its to the far-right of the pause/play execution button). If there are window dimension checks that seem to be happening when opening DevTools, undock DevTools from the window (via the hamburger menu options where you can choose where you want to dock DevTools).\n\nShort of that, you could try compiling your own build of Chromium with a console.log() added in the definition of encrypt (which I gather you don't quite want to do if you can avoid it).\n\nMy final initial suggestion is that you could try utilizing instrumentation like FridaJS to hook your browser and intercept the data.\n\n",
      "votes": "2",
      "user": "dsasmblr",
      "time": "Oct 6, 2023 at 21:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}