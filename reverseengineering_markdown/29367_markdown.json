{
  "title": "How do I reverse-engineer .so files found in Android APKs?",
  "link": "https://reverseengineering.stackexchange.com/questions/29367/how-to-reverse-android-native-libraries-best-resources",
  "content": "I know how to reverse-engineer normal Android APKs using tools like apktool and dex2jar, but I don't know how to work with obfuscation.\n\nWhen I extract everything from APK, I get some Smali files (I tried JD-GUI, but the strings contained random names. Probably obfuscated using ProGuard.), some resource files, and a \".so\" files in the /lib directory.\n\nI know this largely constitutes learning by myself, but I really don't know what to look or where to look. Some examples would be really helpful. Thanks!\n\n",
  "votes": "95",
  "answers": 9,
  "views": "322k",
  "tags": [
    "disassembly",
    "binary-analysis",
    "obfuscation",
    "android",
    "deobfuscation"
  ],
  "user": "Commodus",
  "time": "Oct 26, 2023 at 9:45",
  "comments": [],
  "answers_data": [
    {
      "content": "The .so file is a compiled library, in most cases from C or C++ source code. .so stands for Shared Object, it doesn't have anything to do with obfuscation, it just means someone wrote parts of the app in C.\n\nIn some cases, there is existing C code and it's just easier for the programmer to build a JNI interface to call the library from Java; in other cases, the programmer wants the speed advantage that compiled C has over Java. And of course, if I want to hide how some part of my application works, writing that in C and compiling it to a .so makes it much harder to reverse.\n\nIf you want to reverse an Android .so, these are the options you have:\n\nBeware, though, in all of these cases, you need a thorough understanding of the ARM processor architecture, assembler language, JNI conventions, and compiler ABI to make any sense of the disassembly. Prepare for many long nights if you're inexperienced.\n\n",
      "votes": "106",
      "user": "Andrew T.",
      "time": "Oct 10, 2023 at 5:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "phuclv",
          "text": "Android has x86 version so I think the OP can grab the same .so file from x86 image and decompile it",
          "time": null
        },
        {
          "user": "Dr.jacky",
          "text": "Unfortunately onlinedisassembler.com has limitation. Maximum upload size is 256KB.",
          "time": null
        },
        {
          "user": "dcow",
          "text": "Bokken supports ARM too, right?",
          "time": null
        },
        {
          "user": "IgorGanapolsky",
          "text": "~\"Then, have fun with that text file.\"  What do you mean?  What is the best way to inspect this text file sensibly.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "In fact, the demo version of IDA does support ARM (freeware doesn't).",
          "time": null
        }
      ]
    },
    {
      "content": "Besides Guntram's suggestions, check out the retargetable decompiler aka retdec. It can decompile the binary to Python or C code. At least for me, it reads easier than pure assembly (and it works for ARM binaries).\n\nIt works very well for sketching you the rough workings of the shared object.\n\nA plugin for select IDA versions exists, but the main limitation is that it doesn't support 64-bit code.\n\n",
      "votes": "26",
      "user": "0xC0000022L",
      "time": "Aug 10, 2018 at 20:23",
      "is_accepted": false,
      "comments": [
        {
          "user": "Krypton",
          "text": "it's not really good. Hexrays decompiler for the win.",
          "time": null
        },
        {
          "user": "IgorGanapolsky",
          "text": "@Krypton Why is it ~\"not really good\"?",
          "time": null
        },
        {
          "user": "Krypton",
          "text": "Hexrays decompiler works with IDA Pro. And IDA is the best reversing tool out there. This combo means much more than just a decompiler.",
          "time": null
        }
      ]
    },
    {
      "content": "You can also try a dynamic approach by hooking APIs and observing arguments and return values. This will allow you to look at data going into crypto APIs, which may help a lot when dealing with network protocols. Check out the Frida instrumentation toolkit for an open source cross-platform solution (Android, iOS, Windows, Mac and Linux). There's a tutorial showing how to build an interactive instrumentation tool in a few minutes, which injects code into the “Yo” app on iOS and plots network connections using Google Maps.\n\n",
      "votes": "14",
      "user": "Ole André Vadla Ravnås",
      "time": "Jun 27, 2014 at 23:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "IgorGanapolsky",
          "text": "Frida would disassemble .so files?",
          "time": null
        },
        {
          "user": "Sam",
          "text": "Frida intercepts calls to native libraries so you can have a look at what goes in and what comes out.",
          "time": null
        }
      ]
    },
    {
      "content": "Use android-ndk, https://developer.android.com/ndk/downloads/index.html.\n\nYou can use the toolchains inside the ndk to perform the type of disassembling you want to. For e.g. if I decompile an apk and get a .so library out of it, I will do :\n\n./android-ndk-r15b/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-objdump -T \"SAMPLE.so | less\n\nTo get an objdump. \n\n",
      "votes": "12",
      "user": "Shailesh Mota",
      "time": "Jul 20, 2017 at 15:00",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can also reverse-engineer APK files directly on an android device.\n\n(Disclaimer: I 'm the developer)\n\nDisassemble ANY files including android shared libraries (aka .so files) (NDK, JNI), windows PE files(EXE, DLLs, SYSs, etc..), linux executables, object files, ANY files you want like pictures, audios, etc(for fun) entirely on Android. Capstone-based disassembler application on android.\n\nThis app used\n - Capstone \n - Storage-Chooser\n - Colorpickerview\n - Java-binutils\n - PECOFF4J.\n\nhttps://reverseengineering.stackexchange.com/a/20124/23870\n\nhttps://reverseengineering.stackexchange.com/a/18203/23870\n\nRelated link(RE thread)\n\n",
      "votes": "6",
      "user": "Hyeonseo Yang",
      "time": "Jan 2, 2019 at 1:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sam",
          "text": "Why would I want to do this on an Android device?",
          "time": null
        },
        {
          "user": "Hyeonseo Yang",
          "text": "@Sam hmm, why not? You can even develop apps on android! (I do) :) (One possible advantage, it doesn't require copying files to PC)",
          "time": null
        }
      ]
    },
    {
      "content": "You can also try the Snowman tool: https://derevenets.com/.\n\nNB: the original author appears to have \"pulled\" it. Several forks exist, e.g. this one not connected to original) or these.\n\nIt supports ARM, x86, and x86-64 architectures as specified on their website.\n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Oct 10, 2023 at 11:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Why not give the author a chance and notify him/her of the issues? Software defects are not god-given, so they can be fixed. But users need to report them so this can happen.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "I think this commit (probably a PR) prompted the author to scrap his repo?! Last good commit is 6fed71ccb650ebd1db1141676e1af8166835819e.",
          "time": null
        }
      ]
    },
    {
      "content": "You can try Ghidra.\n\n",
      "votes": "2",
      "user": "Andrew T.",
      "time": "Oct 26, 2023 at 9:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "IgorGanapolsky",
          "text": "How to open .so file in Ghidra?",
          "time": null
        },
        {
          "user": "sjas",
          "text": "drag and drop ..",
          "time": null
        }
      ]
    },
    {
      "content": "There is already an answer by the creator of frida, but I just wanted to add that, specifically, we can use the convenience tool frida-trace with a .so file, e.g.\n\n```\nfrida-trace -Ui 'nameOfYourLib.so!*' -p <PID>\n\n```\nto dynamically see what's getting called (entry and exit moments) in that .so file during runtime as you run the app normally (it will filter out to trace only functions within nameOfYourLib.so). This could, for example, be used in conjunction with a static disassembler to find interesting functions to explore deeper.\n\n",
      "votes": "1",
      "user": "auspicious99",
      "time": "Nov 23, 2021 at 18:39",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "According to this blog post, GikDbg seems like an Ollydbg mod to debug native Android libraries.\n\nUnfortunatly, the website of GikDbg doesn't exist anymore. \n\n",
      "votes": "0",
      "user": "Sam",
      "time": "Jan 1, 2019 at 23:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}