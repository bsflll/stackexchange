{
  "title": "Is it possible to restart over a program by calling an entry point function?",
  "link": "https://reverseengineering.stackexchange.com/questions/15339/is-it-possible-to-restart-over-a-program-by-calling-an-entry-point-function",
  "content": "I was wondering if it was possible to restart a program (ignoring previously mapped files) with different argument by either calling main() or a glibc entry point function.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "153",
  "tags": [
    "linux",
    "exploit",
    "x86-64",
    "amd64"
  ],
  "user": "user2284570",
  "time": "May 13, 2017 at 17:41",
  "comments": [
    {
      "user": "user2284570",
      "text": "I think the problem is about initializing what is already initialized (like the stack or the heap) isnâ€™t it?",
      "time": null
    },
    {
      "user": "PhoeniX",
      "text": "It depends on what stage are you restarting. There would be issues with the program's internal constants, command parameters, all the threads that have been already spawn, all the allocated memory and etc... but technically you can do it, yes.",
      "time": null
    },
    {
      "user": "user2284570",
      "text": "@ph0sec my program doesn't spawn threads, however, it manage it's heap without glibc so that calling malloc can corrupt the heap. That's why I was thinking at restarting at an earlier entry point than point in order to allocate a new heap area.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "are you planning to do fuzzing this way by any chance?",
      "time": null
    },
    {
      "user": "user2284570",
      "text": "@IgorSkochinsky fuzz what?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Well, while it's definitely possible to jump to the entrypoint of the program to try restarting it, there may be various consequences preventing correct execution, e.g.:\n\nSo what you can do is to cause the program to simulate termination without actually exiting and then jump to the entry point. Microsoft CRT provides functions _c_exit and _cexit for such cpurpose, but it seems glibc does not have anything similar. So you may have to simulate calling of the atexit handlers manually to perform cleanup.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "May 16, 2017 at 9:58",
      "is_accepted": false,
      "comments": [
        {
          "user": "user2284570",
          "text": "except in my case  I can only call one function.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "well, you can always just try and see if it works. If not, you'll need to figure out how to chain execution of multiple functions.",
          "time": null
        }
      ]
    }
  ]
}