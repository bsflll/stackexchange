{
  "title": "Find the kernel structure that contains device name",
  "link": "https://reverseengineering.stackexchange.com/questions/3233/find-the-kernel-structure-that-contains-device-name",
  "content": "I'm using WinDbg to try enumerate drivers and their associated devices. Getting the driver name is very easy. It is found in the _DRIVER_OBJECT structure. Unfortunately, the _DEVICE_OBJECT does not contain the name of the device. \n\nUsing the !devobj command I can see the name of the device, but I would like to find the table/structure that contains the name.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "3k",
  "tags": [
    "windows",
    "windbg",
    "kernel-mode"
  ],
  "user": "ben_re",
  "time": "Dec 20, 2013 at 16:36",
  "comments": [],
  "answers_data": [
    {
      "content": "So assuming like you said, you have the linear address of your device object, use the windbg extension !object 0xlinearaddress. Based on your windows build, it will display the linear address of the object header. Which in memory exists right below the object.\n\nUse windbg to parse the OBJECT_HEADER structure for you. Starting with Windows 7 you are going to have a member called InfoMask, earlier versions have NameInfoOffset. \n\nIf you have an earlier build, NameInfoOffset is subtracted from the linear base of the object header, to get you the base of an OBJECT_HEADER_NAME_INFO structure for that object.\n\nIf you have a Windows 7 build or later, InfoMask is a bitmask describing other creator structures that exist before the beginning of the header. It is computed using the ObInfoMaskToOffsetTable which contains the offset to the OBJECT_HEADER_NAME_INFO structure for the object. It is always at a constant location but the InfoMask should be used to determine if the object is named, because not all objects are required to be named.\n\nSo a quick example for you, let's say you have a device object at fffffa8001234560. Let's also presume you are using Windows 7 x64.\n\nYour name info would be:\n\n```\ndt nt!_object_header_name_info fffffa8001234560-0x30-0x20\n\n```\n-0x30 to base of header\n-0x20 because in this case InfoMask used in the table has an index value of 0x20.\n\nThis structure contains the name relative to it's object directory. \n\nAlso have a look at the exported kernel routine ObQueryNameInfo.\n\n",
      "votes": "8",
      "user": "everdox",
      "time": "Dec 20, 2013 at 18:34",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "From what I remember, both XP and Win7 always had this format:\n\nobject_directory_followed by object_header whose _QUAD part (opaque do not use this field) points to the OBJECT\n\nIf you did dt nt!_Object_header_name_info <address of object> - 0x28:\n\n```\nkd> !devobj \\Device\\Beep;dt nt!_OBJECT_HEADER_NAME_INFO 86884db8-28\nDevice object (86884db8) is for:\n Beep \\Driver\\Beep DriverObject 86e703b8\nCurrent Irp 00000000 RefCount 0 Type 00000001 Flags 00000044\nDacl e1020c34 DevExt 86884e70 DevObjExt 86884ec8 \nExtensionFlags (0000000000)  \nDevice queue is not busy.\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"Beep\"\n   +0x00c QueryReferences  : 1\nkd> !devobj \\Device\\00000013\nDevice object (86fe7cd0) is for:\n 00000013 \\Driver\\PnpManager DriverObject 86fe9328\nCurrent Irp 00000000 RefCount 0 Type 00000004 Flags 00001040\nDacl e1020c34 DevExt 86fe7d88 DevObjExt 86fe7d90 DevNode 86fe7b88 \nExtensionFlags (0x00000010)  DOE_START_PENDING\nDevice queue is not busy.\nkd> dt nt!_OBJECT_HEADER_NAME_INFO 86fe7cd0-28\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"00000013\"\n   +0x00c QueryReferences  : 1\n\n```\n",
      "votes": "2",
      "user": "Ange",
      "time": "Dec 23, 2013 at 16:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}