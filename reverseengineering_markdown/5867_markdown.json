{
  "title": "Can someone compile a program for me with gcc-mips? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/5867/can-someone-compile-a-program-for-me-with-gcc-mips",
  "content": "I am close to having root on my DVR device running busybox. I figured out one of the user login/passwords and am able to telnet in, but that's it. I have a drive that is attached which automatically mounts, which I can plug into my PC to add/subtract files.  I made a copy of the bash and busybox binaries (including a few others), and gave them u+s, hoping setuid root would give me some root privileges.  Unfortunately that did not work.  Running bash (-rwsr-xr-x), id still shows up as just user.  For some reason it doesn't seem to honor the setuid bit for bash or busybox (or a few others) to give me root privs.\n\nSo, I had an idea, which brings me to my question: maybe I could compile a small C program, such as:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main()\n{\n   setuid( 0 );\n   system( \"/tmp/rootscript.sh\" );\n\n   return 0;\n}\n\n```\nWhich, maybe, would allow me to run a script as root.  Unfortunately, after a few days of trying to compile various versions of gcc-mips on various systems, I've not been able to do so.  Which leads me to ask if someone who already has the tools built would mind compiling the above code for me. I realize it's an odd request, but I guess it's come to this.\n\nSome potentially helpful info:\n\n```\nbash-3.00$ cat cpuinfo \nsystem type             : Viper\nprocessor               : 0\ncpu model               : MIPS 74Kc V4.12  FPU V0.0\nBogoMIPS                : 324.40\nwait instruction        : yes\nmicrosecond timers      : yes\ntlb_entries             : 32\nextra interrupt vector  : yes\nhardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0000, 0x0000, 0x0000]\nASEs implemented        : mips16 dsp\nshadow register sets    : 2\ncore                    : 0\nVCED exceptions         : not available\nVCEI exceptions         : not available\n\n```\nand\n\n```\nfile /tmp/bash \n/tmp/bash: setuid ELF 32-bit LSB  executable, MIPS, MIPS32 rel2 version 1, dynamically linked (uses shared libs), for GNU/Linux 2.6.12, not stripped\n\n```\nAny thoughts or advice from anyone?  Hopefully this counts enough as a \"reverse engineering\" post!\n\n",
  "votes": "1",
  "answers": 2,
  "views": "638",
  "tags": [
    "compilers",
    "mips"
  ],
  "user": "justin",
  "time": "10 years ago",
  "comments": [
    {
      "user": "perror",
      "text": "Why don't you install a cross-compiler on your own ? And, no, installing a cross-compiler isn't enough to justify a question here...",
      "time": null
    },
    {
      "user": "Gabriel Ratener",
      "text": "Jesus! Just chill!",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm afraid your post won't count as reverse engineering :-( \n\nAnyway, don't expect this to work; your setuid(0) won't work unless the uid is 0 in the first place, in which case you had root access without the extra setuid(). \n\nCheck the mount options on your drive - is the nosuid option set? \n\nCan you change that setting (hint: mount -o remount)?\n\nYou did format the drive with an ext[234] filesystem, didn't you? If it's a [V]fat fs, there's no support for unix attributes.\n\nWhat exactly does id say? Anything about an euid? Like in\n\n```\n# cp /usr/bin/id /usr/bin/suid\n# chmod u+s /usr/bin/suid\n# ls -l /usr/bin/suid\n-rwsr-xr-x 1 root root 25152 Jul 16 08:42 /usr/bin/suid\n\n$ /usr/bin/id\nuid=1000(gbl) gid=100(users) groups=100(users)\n$ /usr/bin/suid\nuid=1000(gbl) gid=100(users) euid=0(root) groups=100(users)\n\n```\nYou see, the special suid-version of id sets your effective uid, not the real one; but if they are different, id should report about it. If it doesn't, the problem is probably your mount options; if it does, chances are your C program would actually work, but in that case, it shouldn't even be neccesary.\n\nIf you want a compiler that creates mips binaries, you might also find the Mips-Toolchains page helpful.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jul 16, 2014 at 6:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Thanks for the thoughts guys. Here's what I came up with in case anyone needs this in the future.  I didn't end up compiling my own program (as above), but I got close. I downloaded a large virtual machine file which already had the tools compiled (but it had errors with my program calling setuid). So I went another route: I grabbed the pre-compiled mips binary from https://packages.debian.org/sid/super and copied the binary file setuid onto the box with u+s set, root as owner. \n\n```\n$ id\nuid=1001(ftpuser) gid=1001(ftpuser) groups=1001(ftpuser)\n$ ./setuid 0 id\nuid=0(root) gid=1001(ftpuser) groups=1001(ftpuser)\n$ ./setuid 0 bash\nbash-3.00# id\nuid=0(root) gid=1001(ftpuser) groups=1001(ftpuser)\n\n```\nAs they say on TV.. Bingo, bango, bongo.\n\n",
      "votes": "0",
      "user": "justin",
      "time": "Jul 17, 2014 at 0:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}