{
  "title": "Puzzling 16bit checksum/CRC reverse engineering problem",
  "link": "https://reverseengineering.stackexchange.com/questions/11314/puzzling-16bit-checksum-crc-reverse-engineering-problem",
  "content": "We're having a hard time figuring out how the checksum/CRC is calculated for this serial communication protocol we're required to reverse engineer. This is a communication protocol used back in the 1990 (at least). It is used by embedded code for communication between display units. So far, we have noticed some things, but nothing of any relevance to understanding the CRC. Here are a couple of message we collected:\n\nSome messages are quite short. We think it is some sort of acknowledgement. 2 versions exists:\n\nThese are some timing messages, as far as we can tell. Notice how byte number 27 changes by an increment of 5:\n\nSome of these messages change by only one bit (except for the checksum at the end):\n\nSo, what we managed to figure out:\n\nWe are at lost. Any help in solving this riddle would be greatly appreciated. \n\nThanks.\n\nEDIT 1\n\nI tried a lot of different CRC variations, with lots of different parts of the messages. Nothing came up interesting. Except this...\n\nIf you look at the 2 very short messages, you can see that after removing the start message bytes and the end message bytes, we are left with a message of only 3 bytes + 2 checksum bytes. Only one of the message bytes changes, the last one. The difference between the 2 messages (0x78 becomes a 0x79 on last position) results in only the last bit of the message changing. This results in a change in the 2 checksum bytes (0x21 becomes 0x31 and 0x44 becomes 0x65). Translating this information in bit, 01111000 becomes 01111001 (a change of only the last bit -> 00000001) which results in 00100001 becoming 00110001 for the first checksum byte (a change of 00010000) and 01000100 becoming 01100101 for the first checksum byte (a change of 00100001). (By a change, I mean a XOR operation)\n\nNow, the interesting part, if I apply variations of the CRC16-CCITT (XModem, Kermit, 0xFFFF, etc.), the result (the XOR operation I have to apply to the checksum bytes to go from the 0x78 terminated message to the 0x79 terminated message) is the same!! The result is not (the checksum bytes are not what is expected) but the impact changing the single last byte has on the checksum is indeed the same. This points me in the direction of the CCITT CRC, only with a starting value different than the obvious. I did try all the possibilities of the message (only the last byte, then the last 2, etc.). There is a very limited amount of possibilities with only 3 bytes!\n\nAll this might only be a (very intreging) coincidence, but I think there is a much more simple/elegent (aka mathematical) explanation. I just lack the mathematical skills to see the obvious...\n\nEDIT 2\n\nThe \"No byte is higher than 7F\" part is of course very easy to explain: there is only 7 bits of data for this protocol over serial communication. Dah! But it implies that if the check is a crc, it will yield larger than 7F checksum, which will then have to be \"mod 7F\" to be transmitted over the serial communication.\n\nTrying not to \"left any stone unturned\".\n\n",
  "votes": "2",
  "answers": 0,
  "views": "288",
  "tags": [
    "embedded",
    "serial-communication",
    "crc"
  ],
  "user": "Philippe Richer",
  "time": "Nov 12, 2015 at 15:54",
  "comments": [
    {
      "user": "user2823000",
      "text": "If I understand correctly your first edit, you're saying that it's basically a CRC16-CCITT with only a constant value added to it?",
      "time": null
    },
    {
      "user": "Philippe Richer",
      "text": "Hum... I'm not stating anything, I just noticed this interresting fact. I still can't prouve that it's any type of crc. I think it might have to do with the XOR operations done during the crc. If the mathematical operations were very different, would they yield an identical transformation? Maybe it's just that the message is so small...",
      "time": null
    },
    {
      "user": "user2823000",
      "text": "Either I get something wrong, or \"this interesting fact\" allows you to solve your problem. Identical transformation means that you just have a constant offset between the two values, it would basically never happens randomly, especially considered the properties of the CRC. If this offset is the same for all messages, that's it you can compute the checksum.",
      "time": null
    },
    {
      "user": "Ian Cook",
      "text": "It might just be an XOR of a constant applied to the final CRC value.  (You can test this by first XORing the message crc value with the one you calculated then trying to this value on the calculation from other packets.)",
      "time": null
    }
  ],
  "answers_data": []
}