{
  "title": "ADC in ARM : What is the corresponding C?",
  "link": "https://reverseengineering.stackexchange.com/questions/9085/adc-in-arm-what-is-the-corresponding-c",
  "content": "I have the following 2 ARM instructions in a basic block which is part of a function that I'm trying to convert to C.\n\n```\nADDS r4, r2, r7\nADC  r5, r3, r7, ASR#31\n\n```\nFrom my understanding, the first instruction does a r4 = r2+r7 and sets the flags. The next instruction does r5 = r3 + (r7>>31) + <carryflag>. How would the instructions look in C?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "668",
  "tags": [
    "arm",
    "decompile"
  ],
  "user": null,
  "time": "Jun 7, 2015 at 20:45",
  "comments": [],
  "answers_data": [
    {
      "content": "There is no single C instruction that matches the assembly code directly. What's happening is the 32 bit value in r7 gets added to the 64 bit value in r2/r3, with the result written to r4/r5. \n\nYou can verify this in a few different cases:\n\nSo the original C code probably looked like this:\n\n```\n__int64__ r23;\n__int32__ r7;\n__int64__ r45;\nr45=r23+r7;\n\n```\nAs i said, the asm code doesn't really match the C code, since C doesn't have any syntax for type extension. (You could use casts in your C, but that wouldn't really make anything clearer).\n\nThis is one of the reasons why there is more to reverse engineering that just creating C from assembly; you have to have an understanding on assembly, registers, processor quirks, and compiler shortcuts, to understand what's going on in these cases.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Jun 7, 2015 at 21:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "user1743",
          "text": "Thanks! Is this a common pattern that can be noticed when doing 64 bit addition on 32 bit systems?",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "yes, that's what the carry flag and adc is for - add the low part first, then add the high part and a possible carry bit. This was much more common on 16 bit processors, when dealing with 32 bit values. What's special here is how extension from 32 to 64 bits and adding with carry can be done in one single instruction on ARM.",
          "time": null
        }
      ]
    }
  ]
}