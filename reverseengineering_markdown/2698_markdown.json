{
  "title": "Find out whether additional keys are being used when encrypting data",
  "link": "https://reverseengineering.stackexchange.com/questions/2698/find-out-whether-additional-keys-are-being-used-when-encrypting-data",
  "content": "Assume I use a software to encrypt data. How would I go about to find out with IDA or other RCE tools as to whether there is more than one key used during the encryption?\n\nI am talking asymmetric encryption here, and it is possible that the software in question hides one or more master keys (or makes use of some already elsewhere on the system) and I want to find that out. How can I approach that task?\n\nNB: you may assume I have determined the various algorithms in use.\n\n",
  "votes": "5",
  "answers": 2,
  "views": "216",
  "tags": [
    "disassembly",
    "encryption"
  ],
  "user": "0xC0000022L",
  "time": "Aug 27, 2013 at 12:45",
  "comments": [],
  "answers_data": [
    {
      "content": "Assuming the you are speaking about strong encryption, most of the algorithms are supposed to be indistinguishable even if you provided either the key or the clear text. So, it should not be possible to know that a given key is used  just by looking at the result. \n\nOne example of this is the field of Kleptography where:\n\nAs you may have noticed, the Kleptography is safe only on black-box implementations, so there indeed room for detection in white-box attacks.\n\nBut, I have not enough experience in this topic to give you general advices about it. Except the fact that you should start to look at real World implementation of cryptographic backdoors before trying to detect it. You may want to explore some of these links:\n\nAnd so on...\n\n",
      "votes": "5",
      "user": "perror",
      "time": "Aug 29, 2013 at 14:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "I realize the issue about ciphertexts, but I'm talking about finding out in the program whether it encrypts it against more than the key I am giving it ;)",
          "time": null
        },
        {
          "user": "perror",
          "text": "If I understand well (tell me if I am wrong), you want to check it there is no backdooring process within the program in order to create a master key to access the clear text in addition to your own private key.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "that's correct.",
          "time": null
        },
        {
          "user": "perror",
          "text": "But, I am sure that you might get better answer in the Crypto Stack-Exchange website ! Just try to use the correct vocabulary and they will try to answer. :)",
          "time": null
        }
      ]
    },
    {
      "content": "Statically, use IDA to find all cross-references to the \"various algorithms in use\" to determine how they find the keys they use.\n\nDynamically, use a debugger to set breakpoints on the \"various algorithms in use\", thereby allowing you to examine the callstacks and determine how they find the keys they use.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Aug 27, 2013 at 15:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Well, dynamically is probably not a good idea, because I could overlook some mechanism whereby the program behaves different under debugger from when run normally (as some malware does).",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Some code might compute the addresses of the algorithm functions dynamically, so IDA might miss their cross-references. Unless you have the time to do a full static-analysis of the entire program, it's usually best to do your analysis both statically and dynamically to try to cover your bases.",
          "time": null
        }
      ]
    }
  ]
}