{
  "title": "Mutable parts of PE files in memory",
  "link": "https://reverseengineering.stackexchange.com/questions/12783/mutable-parts-of-pe-files-in-memory",
  "content": "I currently try to figure out, what actually happens to a PE File in memory. To reword it: How could PE files differ, when they run on different computers and what are the mutable parts of a PE file, when they are loaded into memory? \n\nMy overall goal is to understand, what a normalization process of memory dumps of specific processes could look like (as mentioned here for example).\n\nMy understanding so far:\n\nDid I miss anything?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "144",
  "tags": [
    "pe",
    "memory-dump"
  ],
  "user": "knx",
  "time": "Jun 2, 2016 at 15:28",
  "comments": [
    {
      "user": "blabb",
      "text": "i think it talks about code that has equivalent operations what you mention are standard changes i think with normalization in that article it could mean  add eax , 1 = inc eax  is normalised?? as  plus()  or a plus() label is assigned when all equivalent instructions are met in a sequence well cant stand the legalese so just glanced around",
      "time": null
    },
    {
      "user": "Vitaly Osipov",
      "text": "I believe PE file format and how it works is excessively documented  google.com.au/search?q=pe+file+in+memory",
      "time": null
    },
    {
      "user": "knx",
      "text": "As @blabb already mentioned, i try to figure out, how the normalization process is performed. Perhaps the \"basic\" normalization of PE loader based changes lead to confusion. Sorry!",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "the TLS section will have its index assigned",
      "time": null
    }
  ],
  "answers_data": []
}