{
  "title": "Use dtrace, lldb or gdb to find which file or line of code was responsible for a line of output in stdout or stderr?",
  "link": "https://reverseengineering.stackexchange.com/questions/25632/use-dtrace-lldb-or-gdb-to-find-which-file-or-line-of-code-was-responsible-for-a",
  "content": "I see a string being output to my Terminal, when I ran an executable. I have the source code (in C) of the executable, but it was not written by me. I compiled it with -g flag. Is there any way to know which line in which file resulted in the output, with dtrace, lldb, gdb, or any other means?\n\nI am using macOS 10.13. When I ran gdb and the following:\ncatch syscall write\n\nI got this error:\nThe feature 'catch syscall' is not supported on this architecture yet.\n\nIs there any way that can achieve my goal?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "248",
  "tags": [
    "gdb",
    "lldb"
  ],
  "user": "forgodsakehold",
  "time": "Aug 9, 2020 at 12:04",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use strace:\n\n```\nstrace --instruction-pointer --stack-traces -e write ./your-app\n\n```\nThis will show the place in the binary, for instance:\n\n```\n[00007fe942df6537] write(1, \"c\", 1c)     = 1\n > /usr/lib64/libc-2.31.so(write+0x17) [0xf2537]\n > /usr/lib64/libc-2.31.so(_IO_file_write@@GLIBC_2.2.5+0x2c) [0x8285c]\n > /usr/lib64/libc-2.31.so(new_do_write+0x65) [0x81b95]\n > /usr/lib64/libc-2.31.so(_IO_do_write@@GLIBC_2.2.5+0x18) [0x83948]\n > /usr/lib64/libc-2.31.so(_IO_file_sync@@GLIBC_2.2.5+0xa7) [0x819b7]\n > /usr/lib64/libc-2.31.so(_IO_fflush+0x85) [0x76595]\n > /tmp/a.out(main+0x62) [0x4011a8]\n > /usr/lib64/libc-2.31.so(__libc_start_main+0xf1) [0x27041]\n > /tmp/a.out(_start+0x2d) [0x40108d]\n\n```\nThis means that 0x4011a8 (main+0x62). You can use your favourite disassembler to tell what place in code that is.\n\nEdit: oh damn, I didn't realize there's no strace for macOS. I think I'll leave the answer though.\n\n",
      "votes": "2",
      "user": "enedil",
      "time": "Aug 10, 2020 at 13:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}