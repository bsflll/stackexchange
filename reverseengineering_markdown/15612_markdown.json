{
  "title": "Why do simple x86 instructions confuses IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/15612/why-do-simple-x86-instructions-confuses-ida-pro",
  "content": "Can you explain why IDA-Pro is confused with the following simple x86 instruction?\n\n```\n...\n.text:0000000000001885   jnz     loc_1AD0\n.text:000000000000188B loc_188B:\n.text:000000000000188B   mov     byte ptr [var+9], 1\n.text:000000000000188B some_func endp ; sp-analysis failed\n.text:000000000000188B\n.text:000000000000188B ; ---------------------------------------------------\n.text:0000000000001890                 db 4Ch\n.text:0000000000001891 ; ---------------------------------------------------\n.text:0000000000001891\n.text:0000000000001891 _debug_info_seg_0:\n.text:0000000000001891   mov     eax, esp\n.text:0000000000001893   cmp     rbx, 20h\n...\n\n```\nThis confusion forces me to manually redefine the incorrect data as code, and \nthen to redefine the subroutine in order to fix the miscalculated endp position.\n\n```\n...\n.text:0000000000001885   jnz     loc_1AD0\n.text:000000000000188B loc_188B: \n.text:000000000000188B   mov     byte ptr [r14+9], 1\n.text:0000000000001890   mov     rax, r12              <<<FIXED!>>>\n.text:0000000000001893   cmp     rbx, 20h\n.text:0000000000001897   jb      loc_1A80e\n...\n\n```\nThe issue happens several times with other simple x86-x64 instructions.\nAny idea why? and how to automatically correct those? \n\n",
  "votes": "3",
  "answers": 2,
  "views": "582",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "Tal",
  "time": "Jun 21, 2017 at 8:26",
  "comments": [],
  "answers_data": [
    {
      "content": "IDA's autoanalyzer considers user-defined names to be strong indicators of code or data item starts. Since you have the _debug_info_seg_0 symbol in the middle of the would-be instruction, IDA stopped disassembly instead of removing the symbol. You could write a script to remove such hindering symbols and recreate the instructions.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jun 20, 2017 at 16:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "Tal",
          "text": "I do have symbols for my binary. _debug_info_seg_0 is not a real symbol. IDA incorrectly create this fake symbol.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "file a bug report then? I doubt IDA pulled the symbol out of thin air.",
          "time": null
        },
        {
          "user": "Tal",
          "text": "Thanks Igor. you were right. There is a .debug_info segment with those  labels. This section is not listed inside IDA sections tab (why?). when I remove this section from the binary (objcopy --remove-section) IDA is no longer confused.",
          "time": null
        }
      ]
    },
    {
      "content": "In short, distinguish code from data is a undecidable problem. Concretely, your question is a special case of this question where you can find answers with detail explanation.\n\n",
      "votes": "0",
      "user": "Ta Thanh Dinh",
      "time": "Jun 20, 2017 at 15:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "Tal",
          "text": "I understand some patterns might be undecidable. But not in this simple case. We have here an invalid opcode \"db 4Ch\" vs. \"mov rax, r12\", in a middle of a block of code.",
          "time": null
        },
        {
          "user": "Ta Thanh Dinh",
          "text": "Ahh, I feel ashamed. But I can learn from your question and the answer of Igor.",
          "time": null
        }
      ]
    }
  ]
}