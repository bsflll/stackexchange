{
  "title": "How can I dynamically debug a malicious DLL? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/16446/how-can-i-dynamically-debug-a-malicious-dll",
  "content": "English isn't my first language, So I will do my best )\n\nI am trying to analyze some malware NotPetya and I can run the malware by running :\n\nrundll32.exe notpetya.dll #1 \n\nI am using Olly and trying to use the LoadDLL feature. I see where the DLL calls some of it's functions, however I am not able to follow and watch it work. I want to be able to debug this DLL and see what is happening as it's working.\n\nAs far as I can tell, there doesn't appear to be anything to obfuscate me from doing this.\n\nI hope I have made this clear enough for people to understand. I don't require the answer to use OllyDBG , but I would like to be able to follow this DLL.\n\nThank you\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ollydbg",
    "debugging",
    "malware",
    "dll",
    "dynamic-analysis"
  ],
  "user": "LUser",
  "time": "7 years ago",
  "comments": [
    {
      "user": "Mick",
      "text": "Have a look at this existing answer: reverseengineering.stackexchange.com/a/15796/161",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Perhaps the simplest thing would be to find the entrypoint in the DLL, make a note of the byte at that location, and then replace it with an \"int 3\" (0xcc) instruction.  Then you can use a debugger to run the command-line that will cause the DLL to be loaded, and the debugger will regain control.  At that point, you can restore the replaced byte with the original value, and single-step or run to breakpoints that you set.\n\n",
      "votes": "0",
      "user": "peter ferrie",
      "time": "Sep 29, 2017 at 20:47",
      "is_accepted": true,
      "comments": [
        {
          "user": "LUser",
          "text": "The answer.was similar. I realized that the dll had two entry points and the first entry just closes the application. Anyway, I just made some assembly that loaded the dll and pulled the exports from.jt and jmped to it. The int 3 helps stop on secondary entry.",
          "time": null
        }
      ]
    }
  ]
}