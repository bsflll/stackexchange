{
  "title": "Radare2 Debugging: How do I pipe a program's output to another's input?",
  "link": "https://reverseengineering.stackexchange.com/questions/23359/radare2-debugging-how-do-i-pipe-a-programs-output-to-anothers-input",
  "content": "I wrote a C program that constructs a ROP payload and sends it to stdout. Using Radare2's debug mode, how would I pipe this output to a binary I am trying to exploit that accepts input on stdin?\n\nFor example, if my compiled C program is exp and the binary I am exploiting is vuln, I want to execute ./exp | ./vuln in Radare2's debug mode so I can see how my payload corrupts memory.\n\nI saw this post but, correct me if I am wrong, it doesn't seem to answer my question and just describes how to use a second terminal for input/output. \n\nEdit: I have found a workaround for the time being, but it is rather annoying to do repeatedly when I make changes. I first redirect the output to a new a file: ./exp > exp.output and then make a rarun2 script as follows:\n\n```\n#!/usr/bin/rarun2\nstdin=./exp.output\n\n```\nAnd then I run things via r2 -e dbg.profile=dbg.rr2 -d vuln.\n\n",
  "votes": "6",
  "answers": 2,
  "views": "4k",
  "tags": [
    "radare2"
  ],
  "user": "peachykeen",
  "time": "Feb 29, 2020 at 4:44",
  "comments": [],
  "answers_data": [
    {
      "content": "This is a great question, and lucky you - radare2 provides several ways to achieve this. Let's go over the more basic and straightforward options.\n\nFirst things first, make sure to have the latest radare2 running. At the time of writing, this is v4.3.1. The radare community recommends building radare2 from the source. On Linux systems, it's as simple as cloning the repository and executing the following commands:\n\n```\n$ cd radare2\n$ ./sys/install.sh\n\n```\nNote: By installing radare2 from package-repositories you may miss crucial features due to old versions.\n\nNow that this part is behind us, we can continue to the solutions.\n\nFor the following examples, I wrote two programs to demonstrate how the data I dynamically pass from one program to the other program is reflected in its output.\n\nrepeater is a program that receives user input and prints it to the console.\nSource: repeater.c\n\n```\n#include <stdio.h>\n\nint main() {\n\n        char user_input[100];\n        fgets (user_input, 100, stdin);\n        printf (\"[+] Received from STDIN: %s  \n\", user_input);\n\n        return 0;\n}\n\n```\nexp is a program that prints string to the console.\nSource: exp.c\n\n\n```\n#include <stdio.h>\n\nint main() {\n        // print string, hex values, and the current UNIX time\n        printf (\"Hello, \\x41\\x42\\xaf\\xd7, %u\", (unsigned)time(NULL));\n        return 0;\n}\n\n```\nTo demonstrate the required behavior, we can use these programs like this:\n\n```\n$ ./exp | ./repeater \n[+] Received from STDIN: Hello, AB��, 1583565405\n\n$ ./exp | ./repeater \n[+] Received from STDIN: Hello, AB��, 1583565418\n\n```\nIn radare2, when it gets to interact with a debuggee, rarun2 is your go-to tool.\n\nWhile very complex and rich with features, we will focus on one of the basic features, interacting with STDIO.\n\nFrom your question, it is clear that you are familiar with the concept of rarun2 profiles. When I use rarun2 to pass the output of an exploit to the debuggee, I use a profile that looks somewhat like this:\n\n```\n$ cat profile.rr2 \n#!/usr/bin/rarun2\nstdin=!./exp\n\n```\nThis rarun2 profile will execute the ./exp program and set the output of the program to the stdin of the debuggee.\n\nThen, we can quickly execute the program in radare2 again and again without leaving the radare2 shell.\n\nFirst, create a rarun profile as shown above. Then, open the debuggee in radare2 and load this profile using the -r flag:\n\nLoad the program in debug mode and use dc to execute it:\n\n```\n$ r2 -r profile.rr2 -d repeater \nProcess with PID 86588 started...\n= attach 86588 86588\n[0x7f89ba9b8100]> dc\n[+] Received from STDIN: Hello, AB��, 1583567900\n\n```\nAs you can see, you entered debug mode and the program was executed successfully with the output of the exp program. You can keep executing the program as many times as you want by using doo (as well asood`) that will \"Reopen in debug mode with args\".\n\n```\n[0x7f316b76c100]> doo\nProcess with PID 86657 started...\n= attach 86657 86657\n\n[0x7f2aecada100]> dc\n[+] Received from STDIN: Hello, AB��, 1583568042\n\n[0x7f2aec99ace6]> doo\nProcess with PID 86660 started...\n= attach 86660 86660\n\n[0x7ff100166100]> dc\n[+] Received from STDIN: Hello, AB��, 1583568056\n\n\n[0x7f0efc9e4ce6]> doo\nProcess with PID 86673 started...\n= attach 86673 86673\n\n[0x7f676d6b2100]> # Define Breakpoint at main\n[0x7f676d6b2100]> db main\n\n[0x7f676d6b2100]> dc\nhit breakpoint at: 5652649de159\n\n[0x5652649de159]> dc\n[+] Received from STDIN: Hello, AB��, 1583568059\n\n```\nLuckily, you can skip the creation of rarun2 file and just tell radare2 from where it should grab the stdin. This can be done easily by using the -R flag followed by rarun key and value.\n\n```\n$ r2 -R stdin=\\!./exp -d repeater\nProcess with PID 87508 started...\n= attach 87508 87508\n\n[0x7f87588c0100]> dc\n[+] Received from STDIN: Hello, AB��, 1583568818\n\n\n```\nThis is a one-time shot, and using doo again from within the radare2 session would not use the same stdin again. But, you can take advantage of the dor command and do some trick ;)\n\n```\n[0x7f8758780ce6]> dor?\n| dor [rarun2]  Comma separated list of k=v rarun2 profile options (e dbg.profile)\n\n[0x7f8758780ce6]> dor stdin=!./exp\n[0x7f8758780ce6]> doo\nProcess with PID 87594 started...\n= attach 87594 87594\n\n[0x7f8758780ce6]> dc\n[+] Received from STDIN: Hello, AB��, 1583568991\n\n\n[0x7fdb45f3ece6]> # And this of course can be done with a single line\n[0x7fdb45f3ece6]> dor stdin=!./exp; doo; dc\nProcess with PID 87627 started...\n= attach 87627 87627\n[+] Received from STDIN: Hello, AB��, 1583569028\n\n\n```\nThere are other ways you can perform such set-up. Since it will be too long, I will quickly note them down. Here are some ideas:\n\n",
      "votes": "8",
      "user": "Megabeets",
      "time": "Mar 7, 2020 at 9:02",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "As a temporary workaround, until someone gives you the right answer, you can use a bash script like this to execute what you want in one line:\n\n```\n#!/bin/bash \ngcc -o exp exp.c   #add another compiler options if you need\n./exp > exp.output \nr2 -e dbg.profile=dbg.rr2 -d vuln\n\n```\nSo you just run ./nameOfScript.sh to compile and debug your program.\n\nAccording to comments on this issue, it seems the feature you want is not yet implemented in radare2, but I may be wrong...\n\n",
      "votes": "2",
      "user": "bart1e",
      "time": "Mar 4, 2020 at 20:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}