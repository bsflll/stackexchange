{
  "title": "How can I change the default input radix to hexadecimal in Radare2?",
  "link": "https://reverseengineering.stackexchange.com/questions/25148/how-can-i-change-the-default-input-radix-to-hexadecimal-in-radare2",
  "content": "Frequently when I use Radare2 I work mostly in hexadecimal. This means I'm constantly having to remember to type 0x in front of addresses, which is different from the machine-language monitors I'm used to using. (I'm generally working with binaries for 8-bit systems, where decimal is rarely used when working in machine language.)\n\nIs there any way to set the default input radix to hexadecimal? I'd like to be able to type s ff00 instead of s 0xff00 at the command line, and gff00 instead of g0xff00 in visual mode.\n\nAnd if I can do this, how does one enter decimal numbers, should that be necessary, in this mode?\n\nLinks to documentation are appreciated.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "160",
  "tags": [
    "radare2"
  ],
  "user": "cjs",
  "time": "May 29, 2020 at 10:40",
  "comments": [],
  "answers_data": [
    {
      "content": "I suppose there is no such option currently in radare2 (though more experienced radare2 contributors would tell it for sure). \n\nHowever, if you are really annoyed by having to type 0x's in front every single time, you can perform a temporary (very hacky) solution. To do so, you can modify the libr/core/cmd_seek.c file (which is responsible for handling seek command) as follows:\n\n\nAnd then use make to compile the project. After this, you will get the feature you want (will also work with g in Visual Mode):\n\n\n\nYou can find the patch code below:\n\n```\nut64 addr;\nif ((input[1] >= '1' && input[1] <= '9') || (input[1] >= 'a' && input[1] <= 'f'))\n{\n    char inputHex[strlen(input) + 1];\n    inputHex[0] = '0';\n    inputHex[1] = 'x';\n    int i = 2;\n    for (; i < strlen(input) + 1; i++)\n        inputHex[i] = input[i - 1];\n    addr = r_num_math (core->num, inputHex);\n} \nelse\n     addr = r_num_math (core->num, input + 1);\n\n```\n",
      "votes": "1",
      "user": "bart1e",
      "time": "May 29, 2020 at 19:57",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "i cant say how much helpful this is but you can set e asm.tailsub=true and use .. instead of 0x\n(this is not actually replacing the 0x it is tail substitution)    \n\nthat is it will seek to +0x10 if you do s .. 10 from current seek \nor seek 0x100 if you do s ..100 or seek 0x1000 if you do s ..1000    \n\nit only substitutes the tail we are abusing this by substituting the whole body see the edit just so if you were wondering how are why \n\nlike\n\n```\nradare2 c:\\Windows\\System32\\calc.exe\n -- Enable asm.trace to see the tracing information inside the disassembly\n[0x140001820]> e asm.tailsub\nfalse\n[0x140001820]> s 1400018f0\nCannot seek to unknown address '1400018f0'\n[0x140001820]> e asm.tailsub = true\n[0x140001820]> s ..1400018f0\n[0x1400018f0]>   \n\n```\nedit as explanation for what is .. or tailsub\n\n[0x100000000]\n\n```\n> s entry0\n[0x140001820]> s ..1337\n[0x140001337]> s ..99999\n[0x140099999]>  \n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "May 29, 2020 at 20:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "cjs",
          "text": "Would you be able to provide a link to the documentation on asm.tailsub? I'm not entirely clear on exactly how it works, and a search of the Radare2 book provides no results for \"tailsub.\" It does look like it might be useful beyond just allowing me to default to hex radix.",
          "time": null
        },
        {
          "user": "cjs",
          "text": "asm.tailsub doesn't seem strictly related to the .. syntax. I've conformed with e asm.tailsub that it's false and yet I can use commands such as s ..c000 (which seeks to 0xc000 on  a freshly opened file) and omb. ..c000 (which sets the offset to 0x0c000, sometimes).",
          "time": null
        },
        {
          "user": "blabb",
          "text": "ok ive seen it acting weird  try s someaddr+..f0 it willseek to  double the current seek but such is the nature of features that arent production tested",
          "time": null
        }
      ]
    }
  ]
}