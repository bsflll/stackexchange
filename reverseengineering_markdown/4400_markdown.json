{
  "title": "What does _acmdln_dll?",
  "link": "https://reverseengineering.stackexchange.com/questions/4400/what-does-acmdln-dll",
  "content": "Does somebody knows what _acmdln_dll is ? I could not find any useful documentation about that. \n\nI am asking because I have the following line in the assembly which I try to analyze:\n\n```\n MOV EAX, DWORD PTR DS : [_acmdln_dll]\n\n```\nAfter that line I have in register EAX the path of the current process. So my assumption is now the _acmdln_dll stores somehow the path as string sequence.\nIs that true ? \n\nCan someone confirm that or does someone know more informations about _acmdln_dll ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "683",
  "tags": [
    "disassembly",
    "windows",
    "x86"
  ],
  "user": "user3097712",
  "time": "May 22, 2014 at 10:40",
  "comments": [],
  "answers_data": [
    {
      "content": "These are global variables provided by the Microsoft run time library. Here is an excerpt of MSDN on-line documentation speaking about the _acmdln variable:\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "well after rereading the original question it appears both my answer\nand the answer i followed up do not give an answer to the original question\noriginal question asks about acmdln_dll which is nowhere to be found in vs crt\ni leave the answer as it is assuming the suffix __dll to be in code that is not native ms like from reactos here\n\nhttp://code.google.com/p/reactos-mirror/source/browse/trunk/reactos/lib/crtdll/misc/GetArgs.c?spec=svn271&r=271\n\nthe answer below is pertinent to _acmdln without the suffix _dll see edit 3 also \n\nthe complete source code is available to you for acmdln if you have installed even the express version of visual studio.\n\ncompile a simple hello world with debug info /Zi  and view the source code as to what it is\n\nsource file in crt directory of visual studio\n\n```\nDS:[00408018]=7C812FBD (kernel32.GetCommandLineA)\nJump from __tmainCRTStartup+9B\ncrt0.c:252.  _tcmdln = (_TSCHAR *)GetCommandLineT();\n\n```\nhere is a relevent disassembly\nnotice the result of GetCommandline being moved to acmdln a global \n\n```\n/*\n * command line, environment, and a few other globals\n */\n\n    #ifdef WPRFLAG\n    wchar_t *_wcmdln;           /* points to wide command line */\n    #else  /* WPRFLAG */\n    char *_acmdln;              /* points to command line */\n    #endif  /* WPRFLAG */\n\n    char *_aenvptr = NULL;      /* points to environment block */\n    wchar_t *_wenvptr = NULL;   /* points to wide environment block */\n\n```\ndisassembly \n\n```\n004014D9           CALL    newheapt._amsg_exit\n004014DE           POP     ECX\n004014DF           CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]      ; _tcmdln = (_TSCHAR *)GetCommandLineT();\n004014E5           MOV     DWORD PTR DS:[_acmdln], EAX\n004014EA           CALL    newheapt.__crtGetEnvironmentStringsA                 ; _tenvptr = (_TSCHAR *)GetEnvironmentStringsT();\n004014EF           MOV     DWORD PTR DS:[_aenvptr], EAX\n004014F4           CALL    newheapt._setargv                                    ; if ( _tsetargv() < 0 )\n004014F9           TEST    EAX, EAX\n004014FB           JNS     SHORT newheapt.00401505\n004014FD           PUSH    8                                                    ; _amsg_exit(_RT_SPACEARG);\n004014FF           CALL    newheapt._amsg_exit\n00401504           POP     ECX\n00401505           CALL    newheapt._setenvp                                    ; if ( _tsetenvp() < 0 )\n0040150A           TEST    EAX, EAX\n0040150C           JNS     SHORT newheapt.00401516\n0040150E           PUSH    9                                                    ; _amsg_exit(_RT_SPACEENV);\n\n```\nedit 3 \n\nfrom a general search it seems that this is defined in crtdll.dll \n\n```\nC:\\WINDOWS\\system32>grep -rs _acmdln_dll *\nBinary file crtdll.dll matches\nBinary file dllcache/crtdll.dll matches\n^C\nC:\\WINDOWS\\system32>\n\n```\nloading the dll in ollydbg _acmdln_dll is exactly same as _acmdln\n\n```\n73D91D02                   |> \\FF15 4410>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]      ; [GetCommandLineA\n73D91D08                   |.  A3 CC3EDB>MOV     DWORD PTR DS:[_acmdln_dll], EAX\n73D91D0D                   |.  FF15 4010>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetEnvironmentStrings>>; [GetEnvironmentStrings\n73D91D13                   |.  A3 D03EDB>MOV     DWORD PTR DS:[73DB3ED0], EAX\n73D91D18                   |.  FF15 0411>CALL    NEAR DWORD PTR DS:[<&KERNEL32.GetVersion>]           ;  kernel32.GetVersion\n\n```\nand this crtdll.dll seems to be from an older windows sdk a brief google yields one page which alludes crtdll.lib belonging to windows sdk 3.5 era\n\nhttp://support.microsoft.com/kb/94248\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "May 22, 2014 at 11:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}