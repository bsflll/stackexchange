{
  "title": "Ghidra analyzing hardcoded indirect jumps",
  "link": "https://reverseengineering.stackexchange.com/questions/22985/ghidra-analyzing-hardcoded-indirect-jumps",
  "content": "I'm currently analyzing a function that has a lot of indirect jumps looking like the following.\n\nLEA R10,[0x142000000]\n\n(some instructions that dont change R10)\n\nJMP R10\n\nThe Ghidra decompiler just treats the indirect jump as a call and doesnt give any meaningful output. How do I go ahead and analyze a function like that? I guess ideally I would just like to change the JMP R10 instruction to JMP 0x142000000 in this example, however if I cant just do that since the opcode is larger and other jumps would no longer align.\n\n",
  "votes": "1",
  "answers": 3,
  "views": "4k",
  "tags": [
    "decompilation",
    "ghidra"
  ],
  "user": "legendff",
  "time": "Jan 13, 2020 at 15:20",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "\"and doesn't give any meaningful output\" can you show what it actually produces in such case?",
      "time": null
    },
    {
      "user": "legendff",
      "text": "@PawełŁukasik For the example it looks something like this void function(void) {                     /* WARNING: Treating indirect jump as call */   (*(code *)0x142000000)();   return; } if I go to the address it jumps it also only shows the same thing in the decompiler, so I think it realizes that its all 1 function",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can potentially change this to what you're looking for by using the \"Modify Instruction Flow...\" menu item when right clicking the jump instruction.\n\nIn ghidra, press F1 and search for \"Modify Instruction Flow\" for a full description\n\n",
      "votes": "0",
      "user": "mumbel",
      "time": "Jan 18, 2020 at 20:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "legendff",
          "text": "Thank you, I'm only getting the option to modify instruction flow on the jump instructions, but it does seem todo what Im looking for.",
          "time": null
        }
      ]
    },
    {
      "content": "It looks like your program reads a function pointer from a global memory location, and then executing it. I can guess that the jump target isn't known at compile-time, but only on runtime. \n\n*(code *)0x142000000)();\n\nMeans go to address 0x142000000, and treat its value as a function pointer, and call it. \nYou can try to look for write references to 0x142000000 in your binary, trying to find which function pointer is written to that memory location.\n\n",
      "votes": "2",
      "user": "macro_controller",
      "time": "Jan 14, 2020 at 11:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Its been a couple months since this was asked, but there is also another option. If you can manually calculate the jumps then its possible to specify these into Ghidra to override its default behaviour.\n\nThere is a script called SwitchOverride, which can be found in the script manager window. Below is the documentation from the script:\n\n",
      "votes": "2",
      "user": "kazza",
      "time": "Jun 4, 2020 at 19:29",
      "is_accepted": false,
      "comments": []
    }
  ]
}