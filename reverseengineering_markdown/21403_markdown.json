{
  "title": "Mysterious chunk of code in IOLI crackme0x06 challenge",
  "link": "https://reverseengineering.stackexchange.com/questions/21403/mysterious-chunk-of-code-in-ioli-crackme0x06-challenge",
  "content": "I've been struggling to understand a very strange piece of x86 assembly code from the IOLI crackme0x06 challenge.\n\nBut first of all, here is the context : I've successfully cracked the challenge, which by the way simply needs : \n\nNow, for completeness purposes, I'm trying to grasp the purpose of every single instruction of this crackme, but so far, I'm struggling to understand how the following code (from ##loop beginning to ##loop end) from the sym.parell function is actually useful in anyway to the program :\n\n```\n\n    0804851a <parell>:    \n     804851a:       push   ebp\n     804851b:       mov    ebp,esp\n     804851d:       sub    esp,0x18\n     8048520:       lea    eax,[ebp-0x4]\n     8048523:       mov    DWORD PTR [esp+0x8],eax\n     8048527:       mov    DWORD PTR [esp+0x4],0x804873d\n     804852f:       mov    eax,DWORD PTR [ebp+0x8]\n     8048532:       mov    DWORD PTR [esp],eax\n     8048535:       call   80483c8 <sscanf@plt>\n     804853a:       mov    eax,DWORD PTR [ebp+0xc]\n     804853d:       mov    DWORD PTR [esp+0x4],eax\n     8048541:       mov    eax,DWORD PTR [ebp-0x4]\n     8048544:       mov    DWORD PTR [esp],eax\n     8048547:       call   80484b4 <dummy>\n     804854c:       test   eax,eax\n     804854e:       je     8048586 <parell+0x6c>\n     8048550:       mov    DWORD PTR [ebp-0x8],0x0   # Initialization of i (see pseudo-code below)\n     8048557:       cmp    DWORD PTR [ebp-0x8],0x9   ## loop beginning\n     804855b:       jg     8048586 \n     804855d:       mov    eax,DWORD PTR [ebp-0x4]   # Handling password's parity check\n     8048560:       and    eax,0x1\n     8048563:       test   eax,eax\n     8048565:       jne    804857f <parell+0x65>\n     8048567:       mov    DWORD PTR [esp],0x8048740\n     804856e:       call   80483b8 <printf@plt>\n     8048573:       mov    DWORD PTR [esp],0x0\n     804857a:       call   80483e8 <exit@plt>\n     804857f:       lea    eax,[ebp-0x8]\n     8048582:       inc    DWORD PTR [eax]\n     8048584:       jmp    8048557 <parell+0x3d>     ## loop end\n     8048586:       leave\n     8048587:       ret\n\n```\nIt seems to be equivalent to the following pseudo-code :\n\n```\n    for (int i = 0; i <= 9; ++i)\n            if LSB (password) is 0    // ie if password is an even number\n                printf(\"Password OK!  \n\");\n                exit(0);\n\n```\nBut the thing is, looping from 0 to 9 won't do anything relevant for the parity check of the number ...\nAnd as far as the password testing is concerned, the computation taking place in the sym.parell function is never impacted by such a loop !\n\nI've been scratching my head over that for hours, but I really couldn't figure out its exact purpose.  \n\nHad this challenge not been for beginners (by the way it's the first hands-on lab of the RPISEC academic course), I would have thought that this is just some silly obfuscation/junk code technique meant to deflect the attention of the attacker, which is obviously not the case.\nThis series of challenges is only aiming at helping newbies build strong basics in the field.\n\nAm I wrong ?\nSo, seriously, what is the aforementioned code's purpose in this program ?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "267",
  "tags": [
    "disassembly",
    "x86",
    "c",
    "obfuscation",
    "crackme"
  ],
  "user": "programmersn",
  "time": "Jun 9, 2019 at 10:44",
  "comments": [
    {
      "user": "bart1e",
      "text": "There is no loop in the disassembly you posted. Could you paste the complete loop code here?",
      "time": null
    },
    {
      "user": "programmersn",
      "text": "@bart1e My bad. Please see the edit now, I've added the whole function with appropriate comments,  plus I got rid of the superfluous opcodes listing in disassembly.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "yes, it looks like a bug that's supposed to iterate over all characters of the password, but the index is never updated, so it's checking the first byte repeatedly for an odd value.",
      "time": null
    },
    {
      "user": "programmersn",
      "text": "Why would it need to iterate over the password's bytes ?  It makes no sense knowing the validity requirements of the password, which I pointed out in the context section.  No need for any other check, whatsoever. That's what is puzzling me.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "If every character in the password is required to be an even number then it needs to iterate over them all to ensure that.",
      "time": null
    }
  ],
  "answers_data": []
}