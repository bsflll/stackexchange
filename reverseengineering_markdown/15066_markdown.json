{
  "title": "Why is there a difference in offset between ida and gdb?",
  "link": "https://reverseengineering.stackexchange.com/questions/15066/why-is-there-a-difference-in-offset-between-ida-and-gdb",
  "content": "A PIE binary, when loaded in IDA shows an offset (0x202010) different from gdb (0x2013a1) for instruction located at 0x555555554c68 in (gdb) and 0xc68 (in IDA). How can I explain this discrepancy?\n\n\n\n\n",
  "votes": "3",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "gdb"
  ],
  "user": "sherlock",
  "time": "Apr 2, 2017 at 0:49",
  "comments": [],
  "answers_data": [
    {
      "content": "For \"Position Independent Executable\" binaries, the loader is free to relocate the binary using some base address. In the case of GDB, the binary is mapped already into memory, the offset 0x2013a1 in the memory operand is calculated relatively with the current RIP (which is the address of the next instruction). The current instruction size is 0x6f - 0x68 = 0x7 bytes, so in considering with the address of the current instruction, we have an offset: \n\n```\n0x2013a1 + 0x7 = 0x2013a8\n\n```\nIn the case of IDA, you see the \"static\" virtual address, the offset 0x202010 in the memory operand is calculated relatively with the base address of the code segment, so in considering with the address of the current instruction, we have an offset: \n\n```\n0x202010 - 0xc68 = 0x2013a8\n\n```\nThese values are coherent for both cases.\n\n",
      "votes": "5",
      "user": "Ta Thanh Dinh",
      "time": "Apr 2, 2017 at 18:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "sherlock",
          "text": "The offset, which is rip relative, should be the same irrespective of the base address.",
          "time": null
        },
        {
          "user": "Ta Thanh Dinh",
          "text": "In the case of IDA, the offset 0x20210 of the memory operand and the offset 0xc68 of the instruction are counted from the same base address of the code segment. This is different from the case of DBG, the number 0x2013a1 is relative with the current RIP. I give more detail in the answer.",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "This makes perfect sense now. I didn't understand that IDA calculates the offset relative to the base address of the code segment.",
          "time": null
        }
      ]
    },
    {
      "content": "IDA shows a simplified operand, with the rip+<delta> value resolved, so you don't have to calculate it yourself. If you prefer, you can view the original form of rip-relative instructions by enabling \"explicit RIP addressing\" in processor-specific options.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Apr 2, 2017 at 19:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "IDA shows a simplified operand, with the rip+<delta> value resolved - and this value is relative to the base of the code segment. Right?",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "And thanks for explicit RIP addressing, I didn't know about that.",
          "time": null
        }
      ]
    }
  ]
}