{
  "title": "How to add Instructions (OpCodes) after a If Statement in C#?",
  "link": "https://reverseengineering.stackexchange.com/questions/27647/how-to-add-instructions-opcodes-after-a-if-statement-in-c",
  "content": "I hope someone can help me out with my problem. Currently I'm working with C# and use the library Mono.Cecil to add Instruction Code before a method exits. There is this one case, when a if statement is at the end of a method and I want to add TraceUtil.TraceMethodExit(b); at the end, it ends up in the if statement, but it should be outside at the end. I use exactly the same Instructions which the compiler? produces, when I would manualy would put the TraceUtil.TraceMethodExit(b); at the end. But still mine ends up in the if statement body.\n\n\n\nbut it should look like this:\n\n\n\nHere are what the compiler? produces:\n\n```\nIL_0000: nop\nIL_0001: ldarg.1\nIL_0002: stloc.0\nIL_0003: ldloc.0\nIL_0004: brfalse.s IL_0013\nIL_0006: nop\nIL_0007: ldstr \"TEST\"\nIL_000c: call System.Void UnityEngine.Debug::Log(System.Object)\nIL_0011: nop\nIL_0012: nop\nIL_0013: ldnull\nIL_0014: call System.Void SEE.Utils.TraceUtil::TraceMethodExit(System.Object[])\nIL_0019: nop\nIL_001a: ret\n\n```\nHere are what will be the output when I add the instructions:\n\n```\nIL_0000: nop\nIL_0001: ldarg.1\nIL_0002: stloc.0\nIL_0003: ldloc.0\nIL_0004: brfalse.s IL_001a\nIL_0006: nop\nIL_0007: ldstr \"TEST\"\nIL_000c: call System.Void UnityEngine.Debug::Log(System.Object)\nIL_0011: nop\nIL_0012: nop\nIL_0013: ldnull\nIL_0014: call System.Void SEE.Utils.TraceUtil::TraceMethodExit(System.Object[])\nIL_0019: nop\nIL_001a: ret\n\n```\nHere is the Code/Method to add the additional instructions:\n\n```\nprivate static void TraceZeroParameterMethodExit(ILProcessor iLProc, Instruction instr, MethodReference mRef)\n        {\n            MethodBodyRocks.SimplifyMacros(iLProc.Body);\n            iLProc.InsertBefore(instr, Instruction.Create(OpCodes.Ldnull));\n            iLProc.InsertBefore(instr, Instruction.Create(OpCodes.Call, mRef));\n            iLProc.InsertBefore(instr, Instruction.Create(OpCodes.Nop));\n            MethodBodyRocks.OptimizeMacros(iLProc.Body);\n        }\n\n```\nDoes anyone have a idea how this could be solved? Maybe it has to do with the Offset? Thanks for any help!\n\n",
  "votes": "1",
  "answers": 0,
  "views": "414",
  "tags": [
    "disassembly",
    "decompile",
    "c#",
    "compilers",
    "instrumentation"
  ],
  "user": "programming_is_bae",
  "time": "May 9, 2021 at 20:58",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "It's not much reversing but show the Mono.Cecil code. It looks like your brfalse.s is not updated and points out incorrectly.",
      "time": null
    },
    {
      "user": "programming_is_bae",
      "text": "I've added the method which I use to add the instructions. This works well in all cases, where the method doesn't end with a if statement. @PawełŁukasik",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "It probably only works for some simple flows. It might fail also for like try-catch. Just rewrite all those br/br.s opcodes to point to your new opcode. I have a video on my channel where I'm showing how something similar can be done.",
      "time": null
    },
    {
      "user": "programming_is_bae",
      "text": "So I played around a little bit and now the above problem is solved (by letting the br* point at my first instruction) for if statement, but as you stated , not for try-catch. The funny thing is also, that the instructions what the compiler? produces and the instructions after I modified are exactly the same (same instructions, same labels and even the branches are right), but my method call ends up in the catch block and I get a error. Any idea how this could be solved?",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "I think you need to fix also the ExceptionHandlers - check what's inside ilProcessor.Body.ExceptionHandlers",
      "time": null
    }
  ],
  "answers_data": []
}