{
  "title": "Extracting Archive-Like file format analysis that does not seem to match known formats",
  "link": "https://reverseengineering.stackexchange.com/questions/22572/extracting-archive-like-file-format-analysis-that-does-not-seem-to-match-known-f",
  "content": "Good afternoon, \n\nI am looking to try me skills at extracting some data from a proprietary format. I have made some progress but I wanted to contact the experts to see if I could gain some insights. The format in question is the '.clip' format created by the software 'clip studio paint'. Specifically this is a raster graphics editor (Photoshop-like) which I would like to get the image data from. There should, in the most basic usage, be a bunch of layers, each being an image. (For raster graphics, not vector) \n\nThe format seems to be not encrypted or compressed, but rather split up in some kind of archive format. All regular archive tools I have tried can't make any sense of it (zip, tar, etc). It might be an archive format more common to windows which I am not as familiar with. \n\nManually parsing the file with python I was able to find a raw sequence near the end which is in sqlite3 format. I was able to extract this and read the tables which contain the majority of the metadata. Unfortunately this does not shed much light on a way to extract the image data. I was able to split on a few delimiters I found in the file but still I would not find any image algorithm which was able to make sense of the delimited parts. \n\nOuter delimiters in the file seem to look like:\n\nb'CHNKHead'\n b'CHNKFoot'\n b'CHNKExta'\n b'CHNKSQL'\n\nAnd there are also many inner delimiters in some of these chunks like:\n\nb'B\\x00l\\x00o\\x00c\\x00k\\x00D\\x00a\\x00t\\x00a\\x00B\\x00e\\x00g\\x00i\\x00n\\x00C\\x00h\\x00u\\x00n\\x00k'\nb'B\\x00l\\x00o\\x00c\\x00k\\x00D\\x00a\\x00t\\x00a\\x00E\\x00n\\x00d\\x00C\\x00h\\x00u\\x00n\\x00k'\n\n(I am guessing the special null byte separation to reduce the chance that this sequence matches other binary data?) \n\nAnyway I am attaching my little python split and save script and the sample CSP file I am trying to read, incase anyone was interested in taking a look. http://s000.tinyupload.com/index.php?file_id=04264848249049623399\n\n",
  "votes": "3",
  "answers": 0,
  "views": "147",
  "tags": [
    "file-format"
  ],
  "user": "Rboreal_Frippery",
  "time": "Nov 18, 2019 at 17:37",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "The extra null bytes look like simple Unicode text",
      "time": null
    },
    {
      "user": "Rboreal_Frippery",
      "text": "Yeah, I had started to see the null byte separated strings in a lot of formats over the past few days, so I see it has no special meaning, we should just treat all found raw strings as two bytes per character? I am still learning. =P",
      "time": null
    },
    {
      "user": "Botje",
      "text": "These null bytes are indicative of UCS-2 or UTF-16",
      "time": null
    },
    {
      "user": "Botje",
      "text": "One note about the structure: 0x50 contains \"CHUNKEXTa\", and 0x5c contains \"00004edf4\". This looks to be the size of the chunk payload, as the next CHNKExta starts at 0x4ee54, or 0x60+0x4edf4. (0x60 is the address right after the size)",
      "time": null
    }
  ],
  "answers_data": []
}