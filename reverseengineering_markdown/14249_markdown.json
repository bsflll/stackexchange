{
  "title": "Loading a .sys file into Immunity Debugger",
  "link": "https://reverseengineering.stackexchange.com/questions/14249/loading-a-sys-file-into-immunity-debugger",
  "content": "Can somebody tell me how to load a .sys file into Immunity Debugger correctly ?\nBecause when I load a driver into Imm. Debugger then I get the message that HAL.dll could not be found and that Imm. Debugger could not find the entry point.\n\nI tried the solutins at Loading a Driver in Immunity but that does not help.\n\nI do not know what to do.\n\nBest regards, \n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "immunity-debugger",
    "driver"
  ],
  "user": "user18558",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "rebel87",
      "text": "You got to use windbg ,install the driver/sys on a machine/vm and debug remotely...immunity/olly are ring 3 debuggers ,you need ring 0 debugger i.e. windbg...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": ".sys extension is usually used for drivers. While they are the same PE executables, they run in kernel mode and thus use kernel-mode APIs exposed by the kernel executive itself (ntoskrnl.exe) or kernel-mode DLLs such as hal.dll. \nAFAIR someone made fake DLLs to simulate enough kernel APIs to achieve unpacking of drivers in user-mode debuggers like Olly but I don't have a link handy. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 26, 2016 at 11:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}