{
  "title": "What does %reg:value mean in ATT assembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/1990/what-does-regvalue-mean-in-att-assembly",
  "content": "When I disassemble a function, I encounter from time to time an expression of the form %reg:value. Typically, I encounter this syntax when I activate the canaries in GCC (-fstack-protector), as in the following example:\n\n```\n(gdb) disas\nDump of assembler code for function foo:\n   0x000000000040057c <+0>: push   %rbp\n   0x000000000040057d <+1>: mov    %rsp,%rbp\n   0x0000000000400580 <+4>: sub    $0x20,%rsp\n   0x0000000000400584 <+8>: mov    %edi,-0x14(%rbp)\n=> 0x0000000000400587 <+11>:    mov    %fs:0x28,%rax\n   0x0000000000400590 <+20>:    mov    %rax,-0x8(%rbp)\n   0x0000000000400594 <+24>:    xor    %eax,%eax\n   0x0000000000400596 <+26>:    mov    $0x4006ac,%edi\n   0x000000000040059b <+31>:    callq  0x400440 <puts@plt>\n   0x00000000004005a0 <+36>:    mov    -0x8(%rbp),%rax\n   0x00000000004005a4 <+40>:    xor    %fs:0x28,%rax\n   0x00000000004005ad <+49>:    je     0x4005b4 <foo+56>\n   0x00000000004005af <+51>:    callq  0x400450 <__stack_chk_fail@plt>\n   0x00000000004005b4 <+56>:    leaveq \n   0x00000000004005b5 <+57>:    retq   \n\n```\nWhat is the meaning of this kind of syntax?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "4k",
  "tags": [
    "disassembly",
    "x86",
    "assembly"
  ],
  "user": "perror",
  "time": "May 3, 2013 at 20:29",
  "comments": [],
  "answers_data": [
    {
      "content": "%fs:028h is actually using the form segment:offset, which means it is reaching the memory address at offset 28h in the segment selected by the Far Segment FS.\n\nAny memory reference has an implicit segment (most of the time, CS for execution, DS for data read/write), which can be overriden by a segment prefix.\n\n",
      "votes": "6",
      "user": "Ange",
      "time": "May 3, 2013 at 8:43",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "This is Linux, not Windows.",
          "time": null
        },
        {
          "user": "perror",
          "text": "So, we could have write it: 0x28(%fs), why another syntax for the same thing ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@perror: please reread Ange's answer. FS is a segment register, so this syntax means an offset inside the segment pointed to by FS. There's no syntax for extracting bits from a register (x86 ISA does not support operands like that). 0x28(%fs) would mean value of FS plus 0x28 which is a different thing.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Okay, it means that the memory space addressed here is on the physical memory space and not the virtual one. Is it correct ?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@perror: nope. The values may differ between KM and UM. In UM you never get to see physical memory directly, unless it's a gaping security hole. fs and friends are usually referred to as selectors in flat address mode, since they don't quite have the same meaning as they used to in real mode.",
          "time": null
        }
      ]
    }
  ]
}