{
  "title": "Dynamically v. Statically linked",
  "link": "https://reverseengineering.stackexchange.com/questions/11512/dynamically-v-statically-linked",
  "content": "I understand the difference between static and dynamic linking, but is it possible by using IDA Pro, Ollydbg, or any other reversing tools to determine if an executable was dynamically or statically linked?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "969",
  "tags": [
    "dynamic-linking"
  ],
  "user": "ButtahNBred",
  "time": "Dec 14, 2015 at 9:27",
  "comments": [],
  "answers_data": [
    {
      "content": "There is no sharp difference between dynamically linked and statically linked, since it's always possible to link some libraries dynamically, and others statically, in the same binary.\n\nFor example, an application i hacked reversed parts of recently (android, in this case, but only a thin java wrapper to a large binary) had over 20 open source libraries compiled into the binary, but still dynamically linked libc and a few other standard libs. \n\nSo a better question would be \"(How) can i determine if an application uses dynamic libraries at all, and if so, which ones?\"\n\nOn Linux, the ldd programm tells you about this:\n\n```\n$ ldd /bin/ls\n    linux-vdso.so.1 =>  (0x00007ffd14798000)\n    libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f40fd591000)\n    libacl.so.1 => /lib/x86_64-linux-gnu/libacl.so.1 (0x00007f40fd389000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f40fcfc4000)\n    libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f40fcd86000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f40fcb82000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f40fd7b4000)\n    libattr.so.1 => /lib/x86_64-linux-gnu/libattr.so.1 (0x00007f40fc97d000\n\n```\nOn Windows, use Dependency Walker:\n\n\n\n",
      "votes": "6",
      "user": "Guntram Blohm",
      "time": "Dec 12, 2015 at 6:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}