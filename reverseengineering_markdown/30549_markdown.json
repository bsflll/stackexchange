{
  "title": "Why is JMP ESP required in buffer overflow?",
  "link": "https://reverseengineering.stackexchange.com/questions/30549/why-is-jmp-esp-required-in-buffer-overflow",
  "content": "I was reading this article by Hackers Grimoire on Windows buffer overflow attacks.\n\nThe article made sense, except for the part where the author searched for a DLL (.dll) file which contained a JMP ESP instruction. I understood the other requirements, such as ensuring the DLL was not protected with DEP, ASLR etc...\n\nWhy was it necessary to find a DLL file with JMP ESP and note its memory address?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "windows",
    "assembly",
    "buffer-overflow",
    "esp"
  ],
  "user": "securityauditor",
  "time": "Jun 23, 2022 at 21:23",
  "comments": [],
  "answers_data": [
    {
      "content": "The problem is that the instruction pointer will always follow the program flow, unless you can alter it. They key time to alter it is on the return from a function, when the saved instruction pointer is popped off the stack into eip. If you can overwrite the saved instruction pointer you can redirect program execution.\n\nFinding a jmp esp at a semi-predictable place in memory allows you to redirect execution to the top of the stack reliably.\n\nSo the process would be something like:\n\n",
      "votes": "1",
      "user": "Mega Tonnage",
      "time": "Jun 23, 2022 at 23:49",
      "is_accepted": true,
      "comments": []
    }
  ]
}