{
  "title": "What does this assembly instruction do?",
  "link": "https://reverseengineering.stackexchange.com/questions/16943/what-does-this-assembly-instruction-do",
  "content": "```\npush   %rbp\nmov    %rsp,%rbp\nmov    %rdi,-0x18(%rbp)\nmov    %rsi,-0x20(%rbp)\nmov    -0x18(%rbp),%rax\nmov    (%rax),%eax\nmov    %eax,-0x4(%rbp)\nmov    -0x20(%rbp),%rax\nmov    (%rax),%edx\nmov    -0x18(%rbp),%rax\nmov    %edx,(%rax)\nmov    -0x20(%rbp),%rax\nmov    -0x4(%rbp),%edx\nmov    %edx,(%rax)\nmov    -0x18(%rbp),%rax\nmov    (%rax),%edx\nmov    -0x20(%rbp),%rax\nmov    (%rax),%eax\nadd    %edx,%eax\npop    %rbp\nretq  \n\n```\nI am just looking for someone to confirm my thinking, what I am seeing happen is that parameter 1 is taken and put 18 below rbp and parameter two is taken and put 20 below rbp and then it seems to me that the parameters are set to each other as in x=y and y=x however at the very end the second parameter is set to rax and then added to edx which i believe is the first parameter and then returned. Is this correct or am i way off?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "GoldenWest",
  "time": "Dec 9, 2017 at 7:02",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, that seems correct. The equivalent C code would look something like:\n\n```\nint func(int *arg1, int *arg2)\n{\n    int temp = *arg1;\n    *arg1 = *arg2;\n    *arg2 = temp;\n    return *arg1 + *arg2;\n}\n\n```\nThe use of stack-based storage indexed off of rbp is what we called local storage. We can give each use a name to make it easier to see what is going on. Let's call the value at rbp-0x18 local_arg1, rbp-0x20 local_arg2 and rbp-0x4 local_temp. By calling convention, rdi is the first argument to the function and rsi is the second.\n\nAdding comments where pointer dereferencing is occurring, the disassembly is then\n\n```\npush   %rbp\nmov    %rsp,%rbp         \nmov    %rdi,local_arg1\nmov    %rsi,local_arg2\nmov    local_arg1,%rax\nmov    (%rax),%eax        ; dereference the pointer i.e. eax = *arg1\nmov    %eax,local_temp\nmov    local_arg2,%rax\nmov    (%rax),%edx        ; edx = *arg2\nmov    local_arg1,%rax\nmov    %edx,(%rax)        ; *arg1 = edx\nmov    local_arg2,%rax\nmov    local_temp,%edx\nmov    %edx,(%rax)        ; *arg2 = edx\nmov    local_arg1,%rax\nmov    (%rax),%edx        ; edx = *arg1\nmov    local_arg2,%rax\nmov    (%rax),%eax        ; eax = *arg2\nadd    %edx,%eax\npop    %rbp\nretq  \n\n```\n",
      "votes": "2",
      "user": "cimarron",
      "time": "Dec 9, 2017 at 15:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "GoldenWest",
          "text": "awesome how do you know they are pointers and not just ints?",
          "time": null
        },
        {
          "user": "GoldenWest",
          "text": "is it because of the (%rbp) vs %rbp stating value of ?",
          "time": null
        },
        {
          "user": "cimarron",
          "text": "I updated the answer to better explain that.",
          "time": null
        },
        {
          "user": "Omkar Nath Singh",
          "text": "How did you decompiled your c code to assembly and vise-versa?",
          "time": null
        },
        {
          "user": "cimarron",
          "text": "No tool, I just created the C code from my experience of what compilers generate and the disassembly is very straightforward so it's pretty easy to what is going on. Any good decompiler tool should generate something similar to what I put down though.",
          "time": null
        }
      ]
    }
  ]
}