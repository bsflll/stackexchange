{
  "title": "Reversing AND / shift instructions used in succession",
  "link": "https://reverseengineering.stackexchange.com/questions/21626/reversing-and-shift-instructions-used-in-succession",
  "content": "I'm working on reversing some assembly code, and have worked it up into some pseudo code to start off with a reverse attempt. The function performs a kind of encryption on the data passed in, and I'm trying to decrypt it. However, I'm not quite sure where to begin with the reversal itself. Below is the algorithm I'm trying to reverse.\n\nQuestion: Since the encoded string is stored in rev3, wouldn't the string data stored there be obliterated when the AND instruction runs? I'm very new at this, but it seems like that wouldn't be reversible. The AND combined with shifts has me really confused. I would be grateful for an approach to reversing this.\n\n```\nstring = [102, 111, 111] // the string \"foo\"\ncoded[3];\nfor (i = 0; i < len(string); i++){\n\n  rev1 = rev2 = rev3 = string[i]\n\n  rev3 = rev3 & 0x30 // obliterate here?\n  rev1 = rev1 >> 4\n\n  rev3 = rev3 ^ rev1\n  rev1 = rev2\n\n  rev1 = rev1 & 1\n  rev2 = rev2 << 1\n\n  rev1 = rev1 ^ rev2\n  rev3 = rev3 >> 2\n\n  rev1 = rev1 << 2\n  rev3 = rev3 ^ rev1\n  rev3 = rev3 & 0xff\n\n  coded[i] = rev3\n\n}\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "179",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "TyManning",
  "time": "Jul 7, 2019 at 15:12",
  "comments": [],
  "answers_data": [
    {
      "content": "Since the function you provided operates on characters, there are only 256 possible inputs, so you may run a simple program to check return values for all chars from 0 to 255 to get :\n\n```\n#include <stdio.h>\n\nint main()\n{\n    int rev1, rev2, rev3;\n    for (int i = 0; i < 256; i++)\n    {\n        rev1 = rev2 = rev3 = i;\n        rev3 &= 0x30;\n        rev1 >>= 4;\n        rev3 ^= rev1;\n        rev1 = rev2;\n        rev1 &= 1;\n        rev2 <<= 1;\n        rev1 ^= rev2;\n        rev3 >>= 2;\n        rev1 <<= 2;\n        rev3 ^= rev1;\n        rev3 &= 0xff;\n        printf(\"%d: %d  \n\", i, rev3);\n    }\n}\n\n```\nYou will get all possible values along with arguments, so you may just invert the output of the program above and you will get decrypting function.\n\n",
      "votes": "0",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "TyManning",
          "text": "Thank you for the help. I wrote one line incorrectly.  rev3 &= rev1 should be rev3 = rev3 ^ rev1  I am testing it out now with this replacement.",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "Well, that changes a lot. :) Give me some time - I will edit my answer.",
          "time": null
        },
        {
          "user": "TyManning",
          "text": "Thank you very much. I feel silly to not have seen such a simple solution. :)",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "You are welcome. Sometimes the simplest solution is hardest to see. And, by the way, ANDs and SHIFTS are invertible here because the information about argument is stored in rev1 and rev2 as well. If you only had rev3 and perform one of these operations, it wouldn't be invertible.",
          "time": null
        }
      ]
    }
  ]
}