{
  "title": "how can I diff two x86 binaries at assembly code level?",
  "link": "https://reverseengineering.stackexchange.com/questions/1879/how-can-i-diff-two-x86-binaries-at-assembly-code-level",
  "content": "I'm looking for a tool like Beyond Compare, meld, kdiff, etc. which can be used to compare two disassembled binaries. I know that there's binary (hex) comparison, which shows difference by hex values, but I'm looking for something that shows op-codes and arguments.\n\nAnyone knows something that can help ?\n\n",
  "votes": "62",
  "answers": 8,
  "views": "39k",
  "tags": [
    "tools",
    "binary-analysis",
    "bin-diffing"
  ],
  "user": "Mellowcandle",
  "time": "Apr 21, 2013 at 23:15",
  "comments": [
    {
      "user": "Denis Laskov",
      "text": "well, You always can get listing of op-codes\\arguments from disassembler and compare them as two text lists? Or even build python script for Immunity Debugger :)",
      "time": null
    },
    {
      "user": "Gilles 'SO- stop being evil'",
      "text": "Why is diff/meld/kdiff/â€¦ on the disassembly not satisfactory?",
      "time": null
    },
    {
      "user": "alexanderh",
      "text": "@Mellowcandle +1 for mentioning kdiff. It's a great tool for doing a quick diff.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@Gilles: see my Q&A here.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Unless I'm mistaken, it sounds like you are looking for a binary diffing tool. Some good options are below. These all require IDA Pro.\n\n",
      "votes": "34",
      "user": "phuclv",
      "time": "Apr 29, 2017 at 19:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mellowcandle",
          "text": "Great. Exactly what I've been looking for",
          "time": null
        },
        {
          "user": "Mellowcandle",
          "text": "eEye Binary Diffing Suite is open source, and part of it is DarunGrim, according to the link you provided",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "might be worth mentioning that they all work on top of IDA, not stand-alone.",
          "time": null
        },
        {
          "user": "newgre",
          "text": "Also kind of relevant: how BinDiff works",
          "time": null
        },
        {
          "user": "Tey'",
          "text": "BinDiff is now free (but still closed source) and the company has been bought by Google.",
          "time": null
        }
      ]
    },
    {
      "content": "You can also try radiff2 (Which doesn't require IDA ;)), which is a tool from the radare toolsuite. It supports delta diffing (-d), graphdiff (-g), and lots of related goodies.\n\n",
      "votes": "21",
      "user": "jvoisin",
      "time": "Oct 25, 2013 at 13:06",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There are various great alternatives here. However, all of them seem to be unmaintained. The tool I recommend you is Diaphora https://github.com/joxeankoret/diaphora (Disclaimer: I'm the author). Is a pure Python plugin for IDA Pro for doing program diffing, is the only one that can import/export structures, enumerations, etc..., the only one that makes use of the Hex-Rays decompiler and, which is more interesting, it's maintained: the last time I committed a change was last week.\n\nSome screenshots: \n\nDiffing MS015-034:\n\n\nDiffing pseudo-code (MS015-050):\n\n\nDiffing MS015-050:\n\n\n",
      "votes": "17",
      "user": "joxeankoret",
      "time": "Jun 4, 2015 at 6:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "Best alternative of BinDiff and works in IDA7+.",
          "time": null
        },
        {
          "user": "c00000fd",
          "text": "Sounds like a great tool, but why tying it up to that IDA pro? How about at least IDA Free or Ghidra? Not everyone can afford to fork over a bunch of money that they want for it.",
          "time": null
        },
        {
          "user": "joxeankoret",
          "text": "Because IDA is the de-facto tool for reverse engineering, IDA Free lacks a lot of features, Ghidra doesn't support Python 3.x and also because by the time I wrote Diaphora there wasn't any public version. I have some plans to port to Ghidra, but it's a huge amount of work. Feel free to try yourself.",
          "time": null
        }
      ]
    },
    {
      "content": "Also, there is Turbodiff, it's an IDA pro plugin.\nHaven't used it yet, though so I can't say anything about the quality of the tool.\n\n",
      "votes": "10",
      "user": "Mellowcandle",
      "time": "Apr 21, 2013 at 18:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Mick",
          "text": "Do you know if this works with IDA 6.x? They only list IDA 4.9 and 5.x support.",
          "time": null
        },
        {
          "user": "Anton Kochkov",
          "text": "Turbodiff is abandoned and doesn't work with latest IDA.",
          "time": null
        },
        {
          "user": "asheeshr",
          "text": "Please add a short description about the plugin. Link-only answers are not considered answers.",
          "time": null
        },
        {
          "user": "newgre",
          "text": "It's a binary diffing plugin for IDA Pro. I don't think anything of relevance is missing from this answer, no?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@newgre: is that ultimately the same as PatchDiff2?",
          "time": null
        }
      ]
    },
    {
      "content": "I'd recommend PatchDiff2 too, if you're using IDA Pro.\n\nHere is a description:\n\nPatchDiff2 is a plugin for the IDA dissassembler that can analyze two IDB files and find the differences between both. PatchDiff2 is free and fully integrates with the latest version of IDA (6.1) on Windows and Linux. The plugin can perform the following tasks :\n\nThe main purpose of this plugin is to be fast and give accurate results when working on a security patch or a hotfix. Therefore this tool is not made to find similar functions between two different programs. Patchdiff2 supports all processors that IDA can handle and is available in two versions: 32 bit and a 64 bit.\n\nTo use all you need to do is:\n\nUnzip the two patch2diff zip and in it will be two folders holding two files for Linux and Windows just copy the patchdiff2.p64 and patchdiff2.plw to your plugins directory located in C:\\Program Files\\IDA Pro Directory\\plugins\\ \n\nWarning this takes a while and IDA will become unresponsive. In the end you'll have a few tabs, Matched functions, Unmatched Functions, Identical Functions.\n\n",
      "votes": "9",
      "user": "LUser",
      "time": "Nov 28, 2014 at 0:04",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I'm a big fan of the kdiff route because it's quick and clean . Note: I use diffing for writing signatures on malware. Most of the time I need a simple visual of the different instructions. If you need to dig deeper go the BinDiff or DarunGrim route as mentioned by Mick.\n\nIn order to use kdiff to diff the binaries you will need the disassembly output generate by IDA. The following script can be used to create the assembly output for all executables in the working directory. \n\n```\nimport os \nimport subprocess\nimport glob\npaths = glob.glob(\"*.exe\")\nida_path = os.path.join(os.environ['PROGRAMFILES'], \"IDA\", \"idaw.exe\")\n\nfor file_path in paths:\n    subprocess.call([ida_path, \"-B\", file_path])\n\n```\nExecute the script. \n\n```\nC:\\Documents and Settings\\Administrator\\Desktop\\diff\\python make-asm.py\n\nThank you for using IDA. Have a nice day!\n\nC:\\Documents and Settings\\Administrator\\Desktop\\diff>dir\n Directory of C:\\Documents and Settings\\Administrator\\Desktop\\diff\n\n10/25/2013  11:16 AM    <DIR>          .\n10/25/2013  11:16 AM    <DIR>          ..\n10/25/2013  11:16 AM            40,604 a.asm\n10/24/2013  08:35 AM             9,938 a.exe\n10/25/2013  11:16 AM           368,957 a.idb\n10/25/2013  11:16 AM            40,657 b.asm\n10/24/2013  08:35 AM             9,969 b.exe\n10/25/2013  11:16 AM           368,957 b.idb\n10/25/2013  11:15 AM               218 make-asm.py\n\n```\nSelect the two .asm files, right click, Kdiff, Compare. Nice and simple output. \n\n\n\n",
      "votes": "6",
      "user": "alexanderh",
      "time": "Oct 25, 2013 at 15:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Another option you could try is Relyze (Commercial, Standalone Windows desktop application) which supports binary diffing. It matches functions between two Windows binaries and gives you a list of all equal, modified, removed and added functions, along with a percentage difference value so you can see how heavily modified any two matched functions are.\n\nThe GUI displays the matched functions via interactive graphs so you can navigate them and see the changes. The two graphs can be synced as you navigate so clicking on an instruction in one graph will select the matched instruction, if any, in the other graph.\n\n\n\n",
      "votes": "3",
      "user": "QAZ",
      "time": "Jun 18, 2015 at 10:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "mirh",
          "text": "That's only available with a professional license (which somehow I cannot even find purchasable on their website).",
          "time": null
        }
      ]
    },
    {
      "content": "As an open source alternative there's elf_diff which compares elf-files and generates html or pdf reports. It's available as a Python package.\n\n",
      "votes": "2",
      "user": "noseglasses",
      "time": "Oct 10, 2021 at 8:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "mimo31",
          "text": "It looks nice, but I didn't get it to work presumably because of this issue.",
          "time": null
        }
      ]
    }
  ]
}