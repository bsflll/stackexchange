{
  "title": "Significance of link address 2000 8000 7C00;",
  "link": "https://reverseengineering.stackexchange.com/questions/20525/significance-of-link-address-2000-8000-7c00",
  "content": "Can you explain to me the significance of link address 2000 8000 7C00? It's  in a MACRO from the GRUB configure script, which checks whether OBJCOPY works for absolute addresses.\n\nHere's the snippet of the code:\n\n```\nAC_DEFUN([grub_PROG_OBJCOPY_ABSOLUTE],\n[AC_MSG_CHECKING([whether ${OBJCOPY} works for absolute addresses])\nAC_CACHE_VAL(grub_cv_prog_objcopy_absolute,\n[cat > conftest.c <<\\EOF\nvoid\ncmain (void)\n{\n   *((int *) 0x1000) = 2;\n}\nEOF\n\nif AC_TRY_EVAL(ac_compile) && test -s conftest.o; then :\nelse\n  AC_MSG_ERROR([${CC-cc} cannot compile C source code])\nfi\ngrub_cv_prog_objcopy_absolute=yes\nfor link_addr in 2000 8000 7C00; do\n  if AC_TRY_COMMAND([${CC-cc} ${CFLAGS} -nostdlib -Wl,-N -Wl,-Ttext -Wl,$link_addr conftest.o -o conftest.exec]); then :\n  else\n    AC_MSG_ERROR([${CC-cc} cannot link at address $link_addr])\n  fi\n  if AC_TRY_COMMAND([${OBJCOPY-objcopy} -O binary conftest.exec conftest]); then :\n  else\n    AC_MSG_ERROR([${OBJCOPY-objcopy} cannot create binary files])\n  fi\n  if test ! -f conftest.old || AC_TRY_COMMAND([cmp -s conftest.old conftest]); then\n    mv -f conftest conftest.old\n  else\n    grub_cv_prog_objcopy_absolute=no\n    break\n  fi\ndone\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "135",
  "tags": [
    "linux"
  ],
  "user": "supmethods",
  "time": "Jan 31, 2019 at 21:54",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "I can't help you with 2000 and 8000, but 0x7C00 is the address where the BIOS loads the Master Boot Record to. Google \"7C00 mbr\" will produce more reading and better explanations. I couldn't find anything for 0x2000 and 0x8000 right away.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Taken from gnu.org - Hacking GRUB\n\n0x7C00 Stage 1 is loaded here by BIOS or another boot loader\n\n0x2000 The optional Stage 1.5 is loaded here / Command-line buffer for Multiboot kernels and modules\n\n0x8000 Stage2 is loaded here\n\n",
      "votes": "3",
      "user": "Nordwald",
      "time": "Feb 1, 2019 at 8:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}