{
  "title": "Click-thru a virtual function in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/25334/click-thru-a-virtual-function-in-ida",
  "content": "I'm reversing some stuff that has RTTI, so finding vftables is easy.\n\nI have an instance of some class some_object, there is a method being called through its __vftable. The method_4 has a type of data_struct *(__thiscall *method_4)(void *not_sure, data_struct *data_struct, int a3). It looks like this:\n\n\n\nIs there a way to actually click on method_4 here and go to the pointer in the vftable/the underlaying sub_<something>? I seem to be stuck just having to go back to the vftable manually when I want to see what that function does.\n\nIt feels like I need to somehow link the instance of some_object or rather its _vftable to the actual vftable memory location but not sure if that's a thing? Do I want too much? :)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "232",
  "tags": [
    "ida"
  ],
  "user": "lukash",
  "time": "Jun 18, 2020 at 4:10",
  "comments": [],
  "answers_data": [
    {
      "content": "I don't know if it makes it clickable, but you can use add_cref to link a location to another code location.\n\nI typically use this if I have a call site like call eax and I know that eax always points to the same location (as in your case with vtables).\n\nThat way, IDA treats the call eax connected to the target location and you get all the benefits like argument propagation, xrefs on the target etc., maybe it makes it clickable but I don't use the decompiler.\n\nUse it like:\n\n```\nadd_cref(addr_from, addr_to, fl_CN | XREF_USER)\n\n```\nif you forget the XREF_USER the code ref is sometimes lost by the auto-analysis if I remember correctly.\n\n",
      "votes": "1",
      "user": "Johann Aydinbas",
      "time": "Jun 18, 2020 at 18:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}