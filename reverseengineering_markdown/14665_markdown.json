{
  "title": "What type of disassembler is distorm?",
  "link": "https://reverseengineering.stackexchange.com/questions/14665/what-type-of-disassembler-is-distorm",
  "content": "In Alam you can find the classical differentiation between disassemblers. The author explains in general the two well known types of disassemblers:\n\nAfterwards, the author introduces distorm and he makes the following statement:\n\nAfter reading the docs of distorm, I'm not able to confirm this last statement. In my opinion, distorm seems to work like a classic Linear-Sweep version, and also will struggle with fake instructions and obfuscation (see 1). It calls itself \"stream disassembler\", where I was not able to fully clarify this expression.\n\nWith these facts, I have two questions:\n\n0 Page 47 in Alam, Shahid, et al. \"A framework for metamorphic malware analysis and real-time detection.\" computers & security 48 (2015): 212-233.\n\n1 https://github.com/gdabah/distorm/wiki/StreamDisassembler\n\n",
  "votes": "5",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassemblers"
  ],
  "user": "knx",
  "time": "Feb 16, 2017 at 17:27",
  "comments": [],
  "answers_data": [
    {
      "content": "DiStorm does not implement recursive traversal, however you can use distorm (or others, e.g. capstone) to implement your own recursive traversal algortihm.\n\nThere are a range of tools available doing something like this for you: IDA, BinaryNinja, JakStab (claims 'Iterative Disassembly') etc.\n\nSince retrieving the ControlFlowGraph is a hard problem, people tend to separate between the translation from machine code to assembler and the useage of those frameworks to retrieve the actual control flow.\n\nCite from diStorms Github:\n\nDisassemblers try to help by indicating which instructions may change the control flow and supplying direct targets, but implementing control flow recovery is non-trivial due to indriect jumps and anti-disassembler techniques.\n\nRegarding the second part of the question: It disassembles a given stream of bytes (buffer object). That doesn't seem any different from any disassembler out there.\n\n",
      "votes": "7",
      "user": "Nordwald",
      "time": "Feb 16, 2017 at 7:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "knx",
          "text": "Okay, that totally confirmed my understandings. Danke f√ºr die schnelle Antwort!",
          "time": null
        }
      ]
    }
  ]
}