{
  "title": "Is this equivalent to overflow check",
  "link": "https://reverseengineering.stackexchange.com/questions/6815/is-this-equivalent-to-overflow-check",
  "content": "IDA generates the following disassembly from a software :\n\n```\n.text:004D594E add     eax, ebx\n.text:004D5950 mov     [esi], eax\n.text:004D5952 cmp     ebx, eax\n.text:004D5954 jbe     short loc_\n\n```\nSo we add ebx to eax, then we check if ebx is lower or equal to eax.\n\nThis is either a check to see if ebx is negative or to see if the addition resulted in a value higher than 0xFFFFFFFF.\n\nAny hint on how I should interpret this?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "106",
  "tags": [
    "disassembly"
  ],
  "user": "Eric",
  "time": "Dec 13, 2014 at 4:50",
  "comments": [],
  "answers_data": [
    {
      "content": "No, cmp ebx, eax; jbe ... checks to see if ebx <= eax, not the other way around.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Dec 13, 2014 at 4:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "Eric",
          "text": "ugg, edited the question",
          "time": null
        },
        {
          "user": "Eric",
          "text": "The question here is really how can adding ebx to eax make eax lower than ebx",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "en.wikipedia.org/wiki/Integer_overflow",
          "time": null
        },
        {
          "user": "Eric",
          "text": "So this is an overflow check, is there any other way to interpret those operations?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "The question here is really how can adding ebx to eax make eax lower than ebx  only when eax wraps around and becomes zero that is when eax = 0xffffffff and ebx = 1 adding ebx t o eax turns eax to 0 which is then below ebx assemble this inplace and execute and you can observe esi = 0xffffffff when ebfe is reached MOV     EAX, 0 MOV     EBX, 1MOV  ESI, EAX ADD     EAX, EBX CMP     EBX, EAX JBE     SHORT 063FB2 JMP     SHORT 1063FB0 JMP     SHORT 01063FA8",
          "time": null
        }
      ]
    }
  ]
}