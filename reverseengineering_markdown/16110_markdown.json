{
  "title": "Does IMAGE_FILE_SYSTEM actually means System file",
  "link": "https://reverseengineering.stackexchange.com/questions/16110/does-image-file-system-actually-means-system-file",
  "content": "I have some concerns related to Characteristics flag IMAGE_FILE_SYSTEM of IMAGE_FILE_HEADER structure.\n\nAccording to all specs it says that file having this set is System file. However it doesn't clarify meaning of System file, also I have checked bunch of files from System32 and none of those had it set.\n\nDoes anyone knows actual meaning of this flag (and if it is not deprecated) and has any real life sample with this flag set.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "362",
  "tags": [
    "windows",
    "pe"
  ],
  "user": "ST3",
  "time": "Aug 16, 2017 at 13:24",
  "comments": [],
  "answers_data": [
    {
      "content": "According to PeLib project:\n\nI combined a quick Powershell script to check whether a file has the IMAGE_FILE_SYSTEM attribute: \n\n```\nfunction isSystemFile([string] $filename)\n{\n    # Get the content of the file, as an array of bytes \n    $fileBytes = Get-Content $filename -ReadCount 0 -Encoding byte\n\n    $IMAGE_FILE_SYSTEM = 0x1000 \n\n    # The offset of the signature in the file is stored at location 0x3c. \n    $offsetOfSignature = $fileBytes[0x3c]\n\n    $coffHeader = $offsetOfSignature + 4\n\n    # The characteristics data are 18 bytes into the COFF header. The BitConverter ## class manages the conversion of the 4 bytes into an integer. \n    $characteristicsData = [BitConverter]::ToInt32($fileBytes, $coffHeader + 18)\n\n    # Check if the data from the file has IMAGE_FILE_SYSTEM flag set\n\n    if(($characteristicsData -band $IMAGE_FILE_SYSTEM) -eq $IMAGE_FILE_SYSTEM) \n    {\n        Write-Host \"File has IMAGE_FILE_SYSTEM attribute\" \n    } \n    else\n    {\n        Write-Host \"Nope :-(\"\n    }\n}\n\n```\nThe script might not be accurate, it was written really quick\n\nMore information about System Files can be found here.\n\nEdit: I removed the part about attrib which is a system-level flag. Thanks @Igor for pointing this out.\n\n",
      "votes": "3",
      "user": "Megabeets",
      "time": "Aug 16, 2017 at 17:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "mrexodia",
          "text": "I believe it is actually used for the csrss.exe file.",
          "time": null
        }
      ]
    },
    {
      "content": "I guess it was intended for system files in early NT versions but is unused nowadays. Apparently you can set this flag by using the /dll:system switch of LINK.EXE but I don't know of any file actually using it; however apparently such files won't be loaded in user mode (see comment).\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Aug 18, 2017 at 21:32",
      "is_accepted": false,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "the kernel cares to the degree that such a file can't be loaded in user-mode.  The reverse (the flag is not set, yet the file is a driver) is not true (the kernel will load it in kernel-mode without question).",
          "time": null
        }
      ]
    }
  ]
}