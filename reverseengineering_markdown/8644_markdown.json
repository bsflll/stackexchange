{
  "title": "Windows debugger with ltrace functionality",
  "link": "https://reverseengineering.stackexchange.com/questions/8644/windows-debugger-with-ltrace-functionality",
  "content": "I recently found the program: ltrace. And was wondering if it's possible to achieve the same using one of the gui debuggers for windows: ida, immunity,  etc. The only thing I've found is a port of the cmdline util. Which is perfectly fine, but it would be convenient if I could do the same using, say ida.\n\nTldr; Trace library calls using a windows debugger/disassembler.\n\nThanks for the quick response and the examples. Got everything I needed.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "windows",
    "debuggers",
    "immunity-debugger"
  ],
  "user": "hust921",
  "time": "Apr 6, 2015 at 15:45",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Not a debugger (just like ltrace isn't a debugger either), but does a lot of what you might want: Api Monitor",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "ollydbg -> search for all intermodular calls -> in the new window -> set log break point radio button pause to never , log function argument to always ok \n\nyou should see all the lib functions breakpointed in pink \n\nf9 to run the application \n\non exit look at log window for all the calls that were made to other modules from executab;e\n\n```\nLog data\nMessage\nProgram entry point\nCALL to GetSystemTimeAsFileTime\n  pFileTime = 0013FFB4\nCALL to GetCurrentProcessId\nCALL to GetCurrentThreadId\nCALL to GetTickCount\nCALL to QueryPerformanceCounter\n  pPerformanceCount = 0013FFAC\nCALL to HeapCreate\n  Flags = 0\n  InitialSize = 1000 (4096.)\n  MaximumSize = 0\nCALL to GetModuleHandleW\n  pModule = \"KERNEL32.DLL\"\nCALL to GetProcAddress\n  hModule = 7C800000 (kernel32)\n  ProcNameOrOrdinal = \"FlsAlloc\"\nCALL to GetProcAddress\n  hModule = 7C800000 (kernel32)\n  ProcNameOrOrdinal = \"FlsGetValue\"\nCALL to GetProcAddress\n  hModule = 7C800000 (kernel32)\n  ProcNameOrOrdinal = \"FlsSetValue\"\nCALL to GetProcAddress\n  hModule = 7C800000 (kernel32)\n  ProcNameOrOrdinal = \"FlsFree\"\nCALL to TlsAlloc\nCALL to TlsSetValue\n  TlsIndex = 1\n  pValue = kernel32.TlsGetValue\nCALL to TlsAlloc\nCALL to HeapAlloc\n  hHeap = 00350000\n  Flags = HEAP_ZERO_MEMORY\n\n```\nwindbg \n\ncdb -c \"!logexts.loge;!logm i *;!loge;!logo e d;g;q\" msgboxw.exe > trace.txt & grep MessageBoxW trace.txt\n\n```\nThrd 3c4 00401017 MessageBoxW( NULL \"cannot find \"hello\"\" \"test\"MB_OK) -> IDOK\nThrd 3c4 0040102B MessageBoxW( NULL \"cannot find \"iello\"\" \"test\"MB_OK) -> IDOK\nThrd 3c4 0040103F MessageBoxW( NULL \"cannot find \"jello\"\" \"test\"MB_OK) -> IDOK\nThrd 3c4 00401053 MessageBoxW( NULL \"cannot find \"fello\"\" \"test\"MB_OK) -> IDOK\nThrd 3c4 00401067 MessageBoxW( NULL \"cannot find \"kello\"\" \"test\"MB_OK) -> IDOK\nThrd 3c4 0040107B MessageBoxW( NULL \"saying \"hello\" baby\" \"test\"MB_OK) -> IDOK\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Apr 6, 2015 at 12:01",
      "is_accepted": true,
      "comments": []
    }
  ]
}