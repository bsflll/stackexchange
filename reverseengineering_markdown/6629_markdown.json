{
  "title": "possible to rebase an ELF file?",
  "link": "https://reverseengineering.stackexchange.com/questions/6629/possible-to-rebase-an-elf-file",
  "content": "Is there any way to rebase an ELF file? \n(i want to load an elf binary at 0x40000000, not at 0x08040000 which is typical base)\n\nI found this tool(prelink, http://en.wikipedia.org/wiki/Prelink), but it's only used for .so libraries.\n\nI tried to modify the addr field of .text section header, but it didn't work.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "635",
  "tags": [
    "linux",
    "elf"
  ],
  "user": "user10007",
  "time": "Nov 13, 2014 at 15:00",
  "comments": [],
  "answers_data": [
    {
      "content": "The short answer is no, you can't.\n\nThe medium answer is : it wouldn't be easy. The general case is undecidable.\n\nIf your program has not been compiled to be position-independant, there are probably some references to constant memory addresses. Especially as soon as you make a call to a function defined in an external library, the PLT/GOT mechanism uses known addresses. But if you can disassemble and analyze the program, you may fix them. But deciding whether an 32 bits word will be used as an address or as an integer is undecidable. It may work in simple programs, but don't expect to make it work on obfuscated programs without a lot of work.\n\nAnd I'm not aware of a tool doing that.\n\n",
      "votes": "5",
      "user": "Celelibi",
      "time": "Dec 11, 2014 at 15:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}