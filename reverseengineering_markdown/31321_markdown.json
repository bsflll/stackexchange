{
  "title": "What tricks can I use to manually decompile a set of instructions",
  "link": "https://reverseengineering.stackexchange.com/questions/31321/what-tricks-can-i-use-to-manually-decompile-a-set-of-instructions",
  "content": "ELF Binary takes user input and stores it in loc.buffer address 0x4020e8.  Further, the registers going into the instruction set are\n\n```\n;-- __:\n0x0040108a      678a5901       mov bl, byte [ecx + 1]\n0x0040108e      01da           add edx, ebx\n0x00401090      ffc1           inc ecx\n0x00401092      ffc8           dec eax\n0x00401094      75f4           jne loc.__\n0x00401096      01d2           add edx, edx\n0x00401098      89d0           mov eax, edx\n0x0040109a      31d2           xor edx, edx\n0x0040109c      b911000000     mov ecx, 0x11               ; 17\n0x004010a1      f7f1           div ecx\n0x004010a3      80c230         add dl, 0x30                ; 48\n0x004010a6      678a06         mov al, byte [esi]\n0x004010a9      28c2           sub dl, al\n0x004010ab      84d2           test dl, dl\n0x004010ad      7405           je loc.go_on\n\n```\nThe instruction set is basically adding the ord value of each character to the decimal 1337 then doubling it and mod dividing it by 17.  That's not exactly correct but it's a close enough synopsis for what I'm trying to say.\n\nI can script out a solution for it in python easily enough.\n\n```\ntest = 100\n\nwhile True:\n    pin = str(test)\n    var = 1337\n    var += sum([ord(c) for c in pin[1:]]) + 10\n    var *= 2\n    var %= 17\n    var += 48\n    if var == ord(pin[0]):\n        print(test)\n        break\n    test += 1\n\n```\nLooking at the python, you can see the little distinctions between my synopsis and the actual algorithm.\n\nWhat I am hoping to find out is how to actually turn the instruction set into a best approximation of the original source code.  If I were using IDA pro (just for example) it would de-compile those instructions into an actual formula.  How can I reproduce that effort manually?\n\nI'm a self learner so books or other resources on tips and tricks for decompilation would be most helpful.\n\nEDIT 1-1-2023\nThe answers I've gotten thus far make me think that I am not explaining my question well.  I apologize for that.\n\nI'm trying to go from the low level assembly to the highest level, completely human-readable format of the formula.\n\nAfter some thought, I came to realize that the original formula must have been very similar to\ny - 48 = ((1337 + x + 10) * 2) mod 17\nwhere y=ordinal value of first string character\nand x=the sum of the ordinal values of the remaining string charaters.\n\nThat high level formula is what I am trying to get to.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "204",
  "tags": [
    "assembly",
    "decompilation",
    "x86-64"
  ],
  "user": "Mr. Kelsey",
  "time": "Jan 1, 2023 at 21:27",
  "comments": [
    {
      "user": "blabb",
      "text": "edited in another version in my answer take a look",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "you could start with something like below and then optimize it\n\nthe flow below is not tested but should provide a starting point\n\nthe code below is trying to mimic the flow of  assembly and does not correspond to the original code that was disassembled\n\n```\nimport sys\nif(len(sys.argv) <2):\n    print(\"usage thisfile.py argument  \n\");\nelse:\n    print(sys.argv[1])\n    input = sys.argv[1]\n    eax = len(sys.argv[1])\n    print (eax)\n    counter = 0\n    edx = 1337\n    while (eax > counter):\n        print(input[counter])\n        ebx = input[counter]\n        edx = edx +ord(ebx)\n        counter = counter + 1\n        print(edx)\n    edx = edx + edx\n    print(edx)\n    eax = edx\n    ecx = 0x11\n    rem = eax % ecx    \n    print (rem)\n    rem = rem + 0x30\n    print(rem)\n    print(\"%c  \n\" % rem)\n    secret = input[0]\n    rem = rem - ord(secret)\n    if (rem == 0):\n        print(\"input is correct %c  \n\" % rem)\n    else:\n        print(\"wrong input\")\n\n```\nexecution and result below\n\n```\n:\\>mandec.py 1009\n1009  arg given\n4     length of arg  \n1     arg[0]\n1386  arg[0]+1337\n0     arg[1]\n1434  arg[1]+arg[0]+1337\n0\n1482\n9\n1539\n3078   doubled\n1      mod = 3078-(int(3078/17)*17)\n49     mod + 0x30\n1      chr(49) == '1' \n\ninput is correct\n\n```\nthis is an optimised version but it may still not be the original code\n\n```\nimport sys\nif(len(sys.argv) <2):\n    sys.exit(\"usage thisfile.py argument  \n\");    \ninput = sys.argv[1]\nj=1337\nfor i in input:\n    j = j+ord(i)\nif((str(j*2%17)) == input[0]):\n    print(\"ok\")\nelse:\n    print(\"wrong\")\n\n```\nor may be\n\n```\ninput = [\"1009\",\"1018\",\"1036\",\"1045\",\"1054\",\"1899\"]\nk=0\nwhile(k<len(input)):\n    j=1337\n    for i in input[k]:\n        j = j+ord(i)\n    print((str(j*2%17)) == input[k][0])\n    k=k+1\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jan 2, 2023 at 19:35",
      "is_accepted": false,
      "comments": []
    }
  ]
}