{
  "title": "Why lldb seems to not stop at breakpoints?",
  "link": "https://reverseengineering.stackexchange.com/questions/16463/why-lldb-seems-to-not-stop-at-breakpoints",
  "content": "While reverse engineering an iPhone app remotely, I set up breakpoints to some function's adresses.\n\nThese adresses comes from the disassembled binary analysed with Hopper, and it seems like they must be called by the app. Like user_click_on_blue_buton, or equivalent.\n\nI checked that the breakpoint are set up correctly:\n\nBut then, when I click on the blue button, lldb does not stop at breakpoint. The process continues like there was no breakpoints. To be exact, some are working, but just a few, not all of them.\n\nIs it possible that lldb misses the breakpoint ? Or is it because the app is tricking me and these functions are not called ?\n\nObviously the app is a released iOS app from the app store. So definitely not compiled to be debugged. Is it the reason ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "715",
  "tags": [
    "breakpoint",
    "lldb"
  ],
  "user": "ValerianLoomer",
  "time": "Oct 1, 2017 at 22:05",
  "comments": [],
  "answers_data": [
    {
      "content": "Because the functions were never called.\n\nThe app indeed tricked me. It's not because a function is named user_click_on_blue_button that it will be called when the user click on the blue button. Another function, with a less obvious name, was used instead.\n\nCan't find my previous account, so using a new one.\n\n",
      "votes": "1",
      "user": "ValerianLoomer_again",
      "time": "Oct 16, 2017 at 0:44",
      "is_accepted": false,
      "comments": []
    }
  ]
}