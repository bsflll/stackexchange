{
  "title": "Decompiling windows photo viewer",
  "link": "https://reverseengineering.stackexchange.com/questions/4792/decompiling-windows-photo-viewer",
  "content": "I'm trying to decompile the windows photo viewer DLL files to try to tweak them, such as editing speed etc. Since this wasn't possible in the registry.\n\nWhen opening the files in a program such as ILSpy or dotPeek, I get a message that looks like this: \n\nI'm rather new to reverse engineering things so could anyone tell me what I'm doing wrong here since the programs say it's a .NET Framework 4.5 application.\n\n",
  "votes": "3",
  "answers": 3,
  "views": "8k",
  "tags": [
    "dll",
    ".net"
  ],
  "user": "Paradoxis",
  "time": "Jul 6, 2014 at 14:20",
  "comments": [
    {
      "user": "0xec",
      "text": "It means the dll was not made with .net",
      "time": null
    },
    {
      "user": "Paradoxis",
      "text": "@ExtremeCoders is there any way to figure out what it was made with?",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Scan it with a pe detection tool like PeiD, ExeInfo Pe, Detect It Easy etc.",
      "time": null
    },
    {
      "user": "Thomas Weller",
      "text": "What is the file name you're trying to decompile?",
      "time": null
    },
    {
      "user": "Paradoxis",
      "text": "@ThomasW. \"PhotoViewer.dll\" It is located under C:\\Program files\\Windows Photo Viewer\\ on a normal windows 7 OS",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The problem you face is quite common. A .NET application still loads many native DLLs. Most surprising for many people is that the .NET framework itself is native.\n\nYou can identify .NET DLLs in WinDbg using the lm v command. In case of a managed DLL it says:\n\n```\n0:008> lmv m MyApp\nstart    end        module name\n10310000 10574000   MyApp(deferred)             \n    Image path: C:\\...\\MyApp.exe\n    Image name: MyApp.exe\n    Has CLR image header, track-debug-data flag not set\n    Timestamp:        Wed May 21 16:34:02 2014 (537CB95A)\n...\n\n```\nNote the line Has CLR image header in the output. The .NET framework is also loaded in that process, but it is native and does not have such a line:\n\n```\n0:008> lmv m mscorwks\nstart    end        module name\n79470000 79a1e000   mscorwks   (pdb symbols)          d:\\...\\mscorwks.pdb\n    Loaded symbol image file: C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\mscorwks.dll\n    Image path: C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\mscorwks.dll\n    Image name: mscorwks.dll\n    Timestamp:        Tue Oct 22 03:06:42 2013 (5265CFA2)\n...\n\n```\nThere are good reasons to use native DLLs by a managed application:\n\nPhotoViewer.dll is a native DLL, even if dotPeek says \"Platform: .Net Framework 4.5\". This seems to be a bug, because it also reports .NET for kernel32.dll.\n\nThe properties Assembly platform and Module Runtime seem to be a bit inconsistent anyway. Here are some combinations I tried that caused results which at least would need some explanation:\n\nAnother way of detecting .NET is Dependency Walker. A pure .NET assembly typically has only one dependency on mscoree.dll while native DLLs depend on different things.\n\n",
      "votes": "5",
      "user": "Thomas Weller",
      "time": "Jul 11, 2014 at 6:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "kajacx",
          "text": "how do get the lmv command to work? I have downloaded the windows debugging tools, but no success.",
          "time": null
        },
        {
          "user": "Thomas Weller",
          "text": "@kajacx: maybe you have .NET 4, Silverlight or .NET Core? Try lmv m clr and lmv m coreclr. If nothing works, try lmv on its own. If that does not work either, let me know more details about your environment. Are you doing live debugging or do you have a crash dump file?",
          "time": null
        },
        {
          "user": "kajacx",
          "text": "@TomasWeller I don't know what half of these questions mean, I just wanted to decompile a .exe file to C# code, but now I have solved the problem in another way. Just out of curiosity, where do you even put the lmv commad? 0:008> lmv m MyApp doesn't look like standard command line.",
          "time": null
        },
        {
          "user": "Thomas Weller",
          "text": "@kajacx: it seems you're quite unfamiliar with the topic. 0:008> is a WinDbg prompt. You can't decompile all programs to C# code. It must be written in .NET to do that.",
          "time": null
        },
        {
          "user": "not2qubit",
          "text": "Ok, so what to do when you get the message in OP?",
          "time": null
        }
      ]
    },
    {
      "content": "It's probably a native dll. You can probably decompile the main photo viewer binary (which presumably is managed code, based on your statement) to get some information about the native dll to assist in your disassembly based reverse engineering of the dll.\n\n",
      "votes": "3",
      "user": "broadway",
      "time": "Jul 6, 2014 at 16:26",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If your dll is native, and is less than 10 MegaBytes in size, then try to use this Retargetable decompiler.\n\n",
      "votes": "1",
      "user": "Codingale",
      "time": "May 26, 2015 at 17:22",
      "is_accepted": false,
      "comments": []
    }
  ]
}