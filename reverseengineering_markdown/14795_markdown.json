{
  "title": "How to add standard symbolic constants with bitwise operators (like ORs)",
  "link": "https://reverseengineering.stackexchange.com/questions/14795/how-to-add-standard-symbolic-constants-with-bitwise-operators-like-ors",
  "content": "I am working with IDA and I have the OpenProcess function receiving dwDesireAccess of 0x410:   \n\n\n\nAccording to MSDN we can see that 0x410 is the result of OR between two access rights:  \n\n```\nPROCESS_QUERY_INFORMATION (0x0400)\nPROCESS_VM_READ (0x0010)\n\n```\nHow can I set a standard symbolic constant such as\nPROCESS_QUERY_INFORMATION | PROCESS_VM_READ ?    \n\nI must do it manually (with \"Manual...\")?  \n\nThis is only what I have:\n\n\n",
  "votes": "4",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "debugging-symbols"
  ],
  "user": "E235",
  "time": "Mar 2, 2017 at 18:52",
  "comments": [],
  "answers_data": [
    {
      "content": "You could create a bitfield enum. Since the enum containing PROCESS_VM_READ already exists in the MSSDK type library, we are going to copy that and modify it to become a bitfield.\n\nNow the MACRO_PROCESS bitfield should appear when you hit M on 410h, and should appear as something like\n\n```\nmov     eax, PROCESS_VM_READ or PROCESS_QUERY_INFORMATION\n\n```\n",
      "votes": "6",
      "user": "kennytm",
      "time": "Mar 3, 2017 at 6:51",
      "is_accepted": true,
      "comments": [
        {
          "user": "E235",
          "text": "great answer ! Why you delete PROCESS_ALL_ACCESS ?",
          "time": null
        },
        {
          "user": "kennytm",
          "text": "@E235: See step 7's description.",
          "time": null
        },
        {
          "user": "E235",
          "text": "Any idea why it will fail ?  I want to understand because maybe I will have a case when I will need also this last parameter.",
          "time": null
        },
        {
          "user": "Eran Zimmerman Gonen",
          "text": "I think the problem is the intersecting masks (which I think default to the values themselves). If in the code you ever have the value 1F0FFFh, it will be replaced by a bitwise OR of all other constants. You could also define it as a standalone constant (e.g. an enum containing only that, might be a better way). Unless there are some hidden options here, this bitfields feature feels a bit unfinished (unless you don't have any duplicates or intersections).",
          "time": null
        }
      ]
    }
  ]
}