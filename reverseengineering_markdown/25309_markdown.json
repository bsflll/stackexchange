{
  "title": "Is Ghidra's decompilation of ARMv7 strb.w instruction broken?",
  "link": "https://reverseengineering.stackexchange.com/questions/25309/is-ghidras-decompilation-of-armv7-strb-w-instruction-broken",
  "content": "I'm currently disassembling some firmware, when I stumbled across the following code snippet produced by Ghidra (the names are already my own ones):\n\n```\nvoid memset(byte *addr,byte value,int count)\n                            assume LRset = 0x0\n                            assume TMode = 0x1\n  undefined         r0:1           <RETURN>                                \n  byte *            r0:4           addr                                    \n  byte              r1:1           value\n  int               r2:4           count\n  undefined4        r0:4           iPtr                                    \n\n22 b1           cbz        count,LAB_FIN\n02 44           add        count,addr\n                      LAB_LOOP\n00 f8 01 1b     strb.w     value,[iPtr],#0x1\n90 42           cmp        iPtr,count\nfb d1           bne        LAB_LOOP\n                      LAB_FIN  \n70 47           bx         lr\n00              ??         00h\nbf              ??         BFh\n\n```\nGhidra's decompiler produces the following output (after setting some types):\n\n```\nvoid memset(byte *addr,byte value,int count)\n{\n  byte *iPtr;\n\n  if (count != 0) {\n    iPtr = addr;\n    do {\n      iPtr = iPtr + 1;\n      *iPtr = value;                // write to iPtr AFTER the pointer was increased\n      iPtr = iPtr;\n    } while (iPtr != addr + count);\n  }\n  return;\n}\n\n```\nNow, I have two questions:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "520",
  "tags": [
    "decompilation",
    "c",
    "arm",
    "ghidra"
  ],
  "user": "Delors",
  "time": "Jun 16, 2020 at 9:33",
  "comments": [],
  "answers_data": [
    {
      "content": "Indeed, it seems to be incorrect. The syntax [R0],#1 is called  post-indexed: first the store (or load) is performed, and then the base address is incremented (or decremented) by the value specified. So the assignment and increment should be swapped.\n\nAs for 00 BF, it is the opcode for the NOP instruction, probably inserted to align next function on a 4-byte boundary.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Jun 17, 2020 at 15:10",
      "is_accepted": true,
      "comments": []
    }
  ]
}