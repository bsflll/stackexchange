{
  "title": "Unknown game data compression method (Gamecube)",
  "link": "https://reverseengineering.stackexchange.com/questions/6527/unknown-game-data-compression-method-gamecube",
  "content": "I got some game compression data which I couldn't find any clue.\nAll compressed file signature start with: [SK_ASC] and unknown compression method.\n\nI got some information from RAM/Executive file but still didn't work.\nI think the compression is the lossless format (But it's not a LZO nor ZLIB).\nCan anyone help me figure out the compression, and how to decompress?\n\n=== 10.25.14 ADDED ===\n\nThe list below compression method that I tested, but doesn't match:\n\n=== 10.26.14 ADDED ===\n\nToday I analysis something via memory dump.\n\nFirst of all, compressed EMnMenu.cmp file could be loaded when I enter the main menu by guessing it's file name. and there are very similar files which is unused. (EKisokMenu.cmp, EE3Menu.cmp)\n\nSo I try to check memory dump by replacing file each other. and I got dump_menu.ram, dump_e3menu.ram, dump_kioskmenu.ram. By comparing three different ram dump data, I found out only specific offset data is changed.\n\nBy using this method, I finally got a decompression data dumped via offset: 0x80CA6980. Decompressed data is well known texture which was first 4 byte signature  start with 0x00 0x20 0xAF 0x30. (check texture format here: http://goo.gl/UqLz3m)\n\nI try to find compression algorithm by compressing the decompression data and compare with original data. but non of algorithm that I test above doesn't match.\n\nAnyway, I uploaded several decompressed data via ram dump and compressed data so you can check here: goo.gl/JJQfl4\n\nADDED Didn't work with regular deflate/zlib all compress level.\n\n== 11.09.14 ==\n\nI posted several forum to help, but no clue for weeks :(\n\n== 11.15.14 ==\n\nOther forum user said to me there are Gamecube DOL (executive file) plugin for IDA.\nSo I use them and now I've found decompression main/algorithm subroutine.\nWould anyone help me find out describe how it works?\n\n(I'm not well in dis-assembly, So I'm learning now)\n\nhttp://goo.gl/2bQNfj\n\nPower PC based Dis-Assembly skill Required\n\n",
  "votes": "2",
  "answers": 0,
  "views": "1k",
  "tags": [
    "file-format",
    "decompress"
  ],
  "user": "NGC_KOR",
  "time": "Oct 6, 2015 at 4:53",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "You should run signsrch on the binary doing decompression, not the compressed data. Though it's quite likely the algorithm is completely custom and you'll just have to reverse it.",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "According to webcache.googleusercontent.com/â€¦, SK_ASC is used for at least one game developed by Silicon Knights. The SK suggests that this is using an algorithm that's proprietary to Silicon Knights, as @IgorSkochinsky suggested.",
      "time": null
    },
    {
      "user": "NGC_KOR",
      "text": "@IgorSkochinsky, I used 'signsrch' on Executive/Memory file, not a compressed data. Anyway, algorithm is quite mess and still no clue.",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "Are you sure you uploaded the correct files? At a glance, they look very similar, and neither starts with SK_ASC.",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "What I mean is it seems you uploaded the memory dump twice. I don't see the signature in either.",
      "time": null
    }
  ],
  "answers_data": []
}