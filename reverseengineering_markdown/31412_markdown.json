{
  "title": "armv7 disassemble thumb instructions from raw binary snippet",
  "link": "https://reverseengineering.stackexchange.com/questions/31412/armv7-disassemble-thumb-instructions-from-raw-binary-snippet",
  "content": "I have a portion of a raw binary file that contains ARM instructions, specifically in Thumb mode (and I've manually disassembled a few instructions using the Architecture Manual, and they seemed reasonable).\n\nI'm now trying to disassemble using objdump, but it always returns an ARM mode interpretation:\n\n```\narm-none-eabi-objdump -marmv7 -Mno-force-thumb -b -D binFileSnippet.bin\n\n    00000000 <.data>:\n   0:   4b10b508        blmi    0x42d428\n   4:   0711681a                        ; <UNDEFINED> instruction: 0x0711681a\n   8:   2109d501        tstcs   r9, r1, lsl #10\n   c:   06d26019                        ; <UNDEFINED> instruction: 0x06d26019\n\n```\nWhat's the best way to get thumb interpreted disassembled instructions?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "508",
  "tags": [
    "disassembly",
    "arm"
  ],
  "user": "Sittin Hawk",
  "time": "Jan 15, 2023 at 15:15",
  "comments": [],
  "answers_data": [
    {
      "content": "use capstone with your favorite binding\ndemo code use python (pip install capstone)\n\n```\nimport binascii\nfrom capstone import *\nCODE = binascii.unhexlify(\"4b10b5080711681a2109d50106d26019\")\nmd = Cs(CS_ARCH_ARM, CS_MODE_THUMB)\nfor i in md.disasm(CODE, 0x1000):\n    print(\"0x%x\" % i.address,end =\"\\t\")\n    print(binascii.hexlify(i.bytes),end = \"\\t\")\n    print(\"%s\\t%s\" %(i.mnemonic, i.op_str),end =\"  \n\")\nprint(\"  \n========thumb mode ends arm mode starts ==============  \n\")    \nmd = Cs(CS_ARCH_ARM, CS_MODE_ARM)\nfor i in md.disasm(CODE, 0x1000):\n    print(\"0x%x\" % i.address,end =\"\\t\")\n    print(binascii.hexlify(i.bytes),end = \"\\t\")\n    print(\"%s\\t%s\" %(i.mnemonic, i.op_str),end =\"  \n\")\n\n```\nresult\n\n```\nD:\\>python disarmthumb.py\n0x1000  b'4b10' asrs    r3, r1, #1\n0x1002  b'b508' lsrs    r5, r6, #2\n0x1004  b'0711' asrs    r7, r0, #4\n0x1006  b'681a' subs    r0, r5, r1\n0x1008  b'2109' lsrs    r1, r4, #4\n0x100a  b'd501' lsls    r5, r2, #7\n0x100c  b'06d2' bhs     #0x101c\n0x100e  b'6019' adds    r0, r4, r5\n\n========thumb mode ends arm mode starts ==============\n\n0x1000  b'4b10b508'     ldmeq   r5!, {r0, r1, r3, r6, ip}\n0x1004  b'0711681a'     bne     #0x1a05428\n0x1008  b'2109d501'     bicseq  r0, r5, r1, lsr #18\n0x100c  b'06d26019'     stmdbne r0!, {r1, r2, sb, ip, lr, pc}\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jan 15, 2023 at 18:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}