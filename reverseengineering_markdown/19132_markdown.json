{
  "title": "Batch rename functions knowing their prototypes in IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/19132/batch-rename-functions-knowing-their-prototypes-in-ida-pro",
  "content": "I have a long list of mappings from IDA function names (sub_??????) to known function prototypes. The prototype is complete, I mean it contains the return type, the name as in the code and the argument types and names. \n\nMy question is, how can I batch rename and overwrite all the data about the functions with this prototype information using an IDAPython script?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "idapython",
    "functions"
  ],
  "user": "JavierG",
  "time": "Aug 22, 2018 at 19:35",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Sometimes IDA can't detect function parameters from stack (like __fastcall). So you have to determine the numbers of prameters.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IDA has the idc.SetType method that would accept a function start offset and a function prototype string and will set that function's prototype, although it will not set the function's name.\n\nThe idc.SetType function is actually a convenience function around ida_typeinf.idc_parse_decl and ida_typeinf.apply_type, through a couple of other methods defined in the idc module. If you wanna set both function name and prototype, you could use idc.parse_decl to parse the prototype and then call idc.apply_type and idc.set_name to set the prototype and name.\n\nReading the code I linked to around idc.SetType really makes the API clear. \n\nAn example code could look something like this:\n\n```\nprototype_details = idc.parse_decl(PROTOTYPE, idc.PT_SILENT)\nif prototype_details:\n    idc.set_name(FUNCTION_ADDRESS, prototype_details[0])\n    idc.apply_type(FUNCTION_ADDRESS, prototype_details)\n\n```\nNaturally, you'll need to replace PROTOTYPE and FUNCTION_ADDRESS with the function's prototype and address, as well as implement this inside a loop. I'll leave this an an exercise for the reader.\n\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Aug 22, 2018 at 19:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "w s",
          "text": "This is probably not enough. All types used in function prototypes (structure pointers, for example) should be imported too, either with import header file or by creating corresponding structures, otherwise setting prototype will fail.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Yes. Of course. I didn't address auxiliary structures because OP didn't mention any but you're obviously right.",
          "time": null
        }
      ]
    },
    {
      "content": "use idc.SetType to change type\n\n```\nimport idc\n\nfuncAddr = 0x1024D0000\nprint(\"funcAddr=0x%X\" % funcAddr)\noldFuncType = idc.get_type(funcAddr)\nprint(\"oldFuncType=%s\" % oldFuncType)\n\nnewFuncType = \"id objc_msgSend_arrayByAddingObjectsFromArray__1024D0000(id curObj, const char * arrayByAddingObjectsFromArray_, id someArray)\"\nprint(\"newFuncType=%s\" % newFuncType)\nsetTypeRet = idc.SetType(funcAddr, newFuncType)\nprint(\"setTypeRet=%s\" % setTypeRet)\nif setTypeRet == 1:\n  print(\"SetType OK [0x%X] %s -> %s\" % (funcAddr, oldFuncType, newFuncType))\nelse:\n  print(\"! SetType failed [0x%X] %s -> %s\" % (funcAddr, oldFuncType, newFuncType))\n\n```\noutput:\n\n```\noldFuncType=id(void *, const char *, ...)\n\nsetTypeRet=True\nSetType OK [0x1024D0000] id(void *, const char *, ...) -> id objc_msgSend_arrayByAddingObjectsFromArray__1024D0000(id curObj, const char * arrayByAddingObjectsFromArray_, id someArray)\n\n```\n",
      "votes": "0",
      "user": "crifan",
      "time": "Jan 2, 2024 at 3:43",
      "is_accepted": false,
      "comments": []
    }
  ]
}