{
  "title": "Methods for preventing IDA decompiler",
  "link": "https://reverseengineering.stackexchange.com/questions/22833/methods-for-preventing-ida-decompiler",
  "content": "I want to write a C function, such that hex-rays decompiler will fail on it. I want to do it for study purposes, and not for an actual anti-reversing method. Do you have any recommendations/approaches how can I write such a function, that will compile with gcc or similar compiler, but won't be decompilable by hex-rays?\n\nEDIT: \nMy goal is to make the code disassemblable, but not decompilable. I'm not looking for obfuscators that will hide the code completely, but a way to make IDA not to be able to decompile. for example, by somehow messing with the stack pointer. \n\n",
  "votes": "1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "c",
    "hexrays",
    "decompile"
  ],
  "user": "macro_controller",
  "time": "Dec 26, 2019 at 15:04",
  "comments": [
    {
      "user": "NirIzr",
      "text": "There's a concept called obfuscation. That's what you're looking for. Try giving the tag by the name name a peek: reverseengineering.stackexchange.com/questions/tagged/…",
      "time": null
    },
    {
      "user": "macro_controller",
      "text": "Thanks, my question wasn't very clear, but I edited it now. Anyways I will go through your link and maybe find something relevant.",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "why are you be interested specifically in preventing decompilation and not disassembly? for the record, though, obfuscated code is disassembleable, just not to anything too intelligible.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "Does the example in my question count? Or you want another example? I observe that IDA does not care much in detecting function types.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "@NirIzr I think much effort have focused on anti-disassembly. While it's correct that anti-disassembly will help anti-decompilation, they are not the same.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can check \"graceful failures\" for some common problems that can prevent decompilation and try to induce them deliberately. However, most of them can be worked around with a bit of effort so don’t expect them to stop a motivated person. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 27, 2019 at 10:28",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "The answer of @igor says about algorithm failures of IDA. Beside, I think you can use a function which is not type-able in the type system of the decompilation target language of IDA (I believe it's a subset of C), e.g.\n\n```\nint foo(void *f, int i) {\n    return ((int (*)(void*, int))(f))(foo, i);\n}\n\nclang -c test.c\n\n```\nthen IDA decompilers gives something likes\n\n```\n__int64 __fastcall foo(__int64 (__fastcall *a1)(__int64 (__fastcall *)(), _QWORD), unsigned int a2)\n{\n  return a1(foo, a2);\n}\n\n```\nwhich is obviously not correct: foo is recognized simultaneously as a function of two params and one param.\n\n",
      "votes": "0",
      "user": "Ta Thanh Dinh",
      "time": "Dec 28, 2019 at 10:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}