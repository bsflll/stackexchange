{
  "title": "Is there any way to get a list of function arguments used with IDC?",
  "link": "https://reverseengineering.stackexchange.com/questions/6960/is-there-any-way-to-get-a-list-of-function-arguments-used-with-idc",
  "content": "I'm using IDA Pro 6.5, and I got the offset of a function and its arguments.\nIt looks like this:\n\n```\n.text:0000C0DE        int __cdecl func(char* a1, int a2, int a3, int a4, int a5, int a6, char* a7)\n\n```\nHowever, it has tons of xrefs (more than 200!)\n\nIs there any way of dumping a1 and a7 arguments of every call to a list?\nI cannot hook and dump the arguments at runtime.\n\nI know I can walk the xref list with IDC, but once I'm on the call func instruction, I don't know how to get arguments from the stack.\n\n",
  "votes": "5",
  "answers": 3,
  "views": "7k",
  "tags": [
    "ida",
    "ida-plugin"
  ],
  "user": "rev",
  "time": "Jan 5, 2015 at 11:15",
  "comments": [],
  "answers_data": [
    {
      "content": "If you have the Hex-Rays Decompiler, I'd recommend decompiling the entire binary and then grep'ing the resulting decompilation for func(.\n\nThis should provide you with more useful results than whatever IDC script one could develop.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Jan 5, 2015 at 17:03",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Manual approach: you can write relevant parameter values (and other pertinent info) as a comment after each call. That way the info shows up in the crossrefs listing.\n\nThis can also be scripted but that involves walking the instructions before each call and emulating the instructions in a limited fashion. Once you reach the call instruction you can access your simulated mini stack and emulated registers to see if they have constant (known) values or not, and generate above-mentioned comment accordingly.\n\n",
      "votes": "1",
      "user": "DarthGizka",
      "time": "Jan 5, 2015 at 11:29",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The problem is that those arguments may, and will in most cases, be calculated, not constants, so you don't really have one single instruction that gives you the parameter. Consider this test program:\n\n```\n#include <stdio.h>\n\nint a, b, c, d, e, f, g, h, i, j;\n\nvoid func(int a1, int a2, int a3, int a4, int a5) {\n        printf(\"%d %d %d %d %d  \n\", a1, a2, a3, a4, a5);\n}\n\nint main(void) {\n        int x, y;\n\n        x=g+c;\n        y=d*e+i;\n\n        func(1, a, b+c, 7, j);\n        printf(\"blarfl  \n\");\n        func(e, j*c, 3, x, y);\n}\n\n```\nAfter compiling it (with -O0 and without symbols) and loading it in IDA, the main functions looks like this:\n\n```\npush    rbp\nmov     rbp, rsp\nsub     rsp, 10h\nmov     edx, cs:g\nmov     eax, cs:c\nadd     eax, edx\nmov     [rbp+var_8], eax\nmov     edx, cs:d\nmov     eax, cs:e\nimul    edx, eax\nmov     eax, cs:i\nadd     eax, edx\nmov     [rbp+var_4], eax\nmov     ecx, cs:j\nmov     edx, cs:b\nmov     eax, cs:c\nadd     edx, eax\nmov     eax, cs:a\nmov     r8d, ecx\nmov     ecx, 7\nmov     esi, eax\nmov     edi, 1\ncall    func\nmov     edi, offset s   ; \"blarfl\"\ncall    _puts\nmov     edx, cs:j\nmov     eax, cs:c\nmov     esi, edx\nimul    esi, eax\nmov     eax, cs:e\nmov     ecx, [rbp+var_4]\nmov     edx, [rbp+var_8]\nmov     r8d, ecx\nmov     ecx, edx\nmov     edx, 3\nmov     edi, eax\ncall    func\nleave\n\n```\nOnce you define your function\n\n```\n; __int64 __cdecl func(int XYZ1, int XYZ2, int XYZ3, int XYZ4, int XYZ5)\n\n```\nthe disassembly of main turns into\n\n```\npush    rbp\nmov     rbp, rsp\nsub     rsp, 10h\nmov     edx, cs:g\nmov     eax, cs:c\nadd     eax, edx\nmov     [rbp+XYZ4], eax\nmov     edx, cs:d\nmov     eax, cs:e\nimul    edx, eax\nmov     eax, cs:i\nadd     eax, edx\nmov     [rbp+XYZ5], eax\nmov     ecx, cs:j\nmov     edx, cs:b\nmov     eax, cs:c\nadd     edx, eax        ; XYZ3\nmov     eax, cs:a\nmov     r8d, ecx        ; XYZ5\nmov     ecx, 7          ; XYZ4\nmov     esi, eax        ; XYZ2\nmov     edi, 1          ; XYZ1\ncall    func\nmov     edi, offset s   ; \"blarfl\"\ncall    _puts\nmov     edx, cs:j\nmov     eax, cs:c\nmov     esi, edx\nimul    esi, eax        ; XYZ2\nmov     eax, cs:e\nmov     ecx, [rbp+XYZ5]\nmov     edx, [rbp+XYZ4]\nmov     r8d, ecx        ; XYZ5\nmov     ecx, edx        ; XYZ4\nmov     edx, 3          ; XYZ3\nmov     edi, eax        ; XYZ1\ncall    func\nleave\nretn\n\n```\nso you see ida auto-generates comments where the parameters are assigned. You can probably scan backwards 10 or 20 instructions from each xref using PrevNotTail, and check the comments for your parameter strings. If you make your parameter names sufficiently unique, this should identify the instructions quite well (that's why i used XYZ1 instead of a1).\n\nOf course, \n\n```\nimul    esi, eax        ; XYZ2\n\n```\nwon't really help you that much. But your results may be better if most parameters to your func are constants.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jan 5, 2015 at 12:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "DarthGizka",
          "text": "The problem with PrevNotTail() - and PrevHead(), for that matter - is that they are oblivious to branching; they go blindly backwards in a linear fashion. For a quick overview they work well enough but accurate, dependable results require analysing the whole web of basic blocks for a function.",
          "time": null
        },
        {
          "user": "RoraÎ–",
          "text": "Isn't this answer specific to 64-bit?  Most 32-bit programs get compiled using __stdcall and __cdecl calling conventions, and the parameters would most likely be pushed to the stack.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "@raz: Yes, but Ida will comment-mark the parameters in the same way. Of course, you'll mainly see push <reg> instructions if you look for the comments, so those instructions are even more unusable than the above examples.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "@DarthGizka Doing it always correctly is probably impossible / equivalent to the halting problem. Something like func(1, (a<b ? 2 : 3), 4) will probably compile to a push 4, two branches that push 2 or 3 respectively, and a push 1. But how do you want to display this in your list of parameter-annotated xrefs anyway, unless you're trying to re-implement the Hex Rays Decompiler? Spending the time to process the 5% edge cases manually is probably much more efficient than trying to get everything handled in your helper program, especially if that program is intended for one specific task.",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "'Accurate' doesn't have to mean 'perfect'; 'no can do' is an answer that is accurate enough in many cases. A backwards scan should at least be augmented with checking xrefs to recognise when a basic block boundary has been crossed, in which case the result should be marked as questionable (needing manual inspection). The premise is that a wrong answer can be worse than no answer at all sometimes. Also, there is a very wide range between limited simulation of a handful of instructions (in a special IDA script for one special purpose) and a full general-purpose decompiler...",
          "time": null
        }
      ]
    }
  ]
}