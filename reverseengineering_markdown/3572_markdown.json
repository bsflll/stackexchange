{
  "title": "IDA plugin/script for generating signature statistics (for all sigs) for a target?",
  "link": "https://reverseengineering.stackexchange.com/questions/3572/ida-plugin-script-for-generating-signature-statistics-for-all-sigs-for-a-targe",
  "content": "I have more than 40 different IDA signature files (besides the built-in ones) and sometimes I don't want to go through the hassle of examining what signatures may be relevant for a given target. Instead I just want to apply all signatures, one at a time, and have IDA tell me which ones had the most matches in the target. Doing this manually is very tedious because\n\nI imagine the plugin/script would do something like this: apply sig A to the target database, count matches, then remove the application of sig A and apply B, count matches, then remove the application and apply C and so on.\n\nHas nobody else ever had this idea? I have been unable to find a plugin or script that does this, and I would rather not write my own if one already exists.\n\n",
  "votes": "12",
  "answers": 3,
  "views": "2k",
  "tags": [
    "ida",
    "ida-plugin",
    "flirt-signatures"
  ],
  "user": "johnrl",
  "time": "Jan 28, 2014 at 13:03",
  "comments": [],
  "answers_data": [
    {
      "content": "If you are talking about IDA FLIRT signatures, unfortunately sooner or later you will probably hit their limitations, and, or, get frustrated with the results if you want high accuracy.\n\nFirst you can read about IDA's system in detail here:\nhttps://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml\n\nAs you can see it only matches the first 32 bytes of functions.\nAnd then it uses CRC16 so there is fair chance of collisions.\n\nThe biggest problem with FLIRT is that it's pretty ambiguous.\nIt's prone for false matches. And, or, if the first 32 bytes of a matched function haven't changed but then the rest has it will still match.  This is often a good thing, but then the behavior is unpredictable.\nAlso the system within IDA lacks anything more then a minimal UI. \nIt would be nice for example if IDA tracked and showed you a list of both what matched and what doesn't match if you wanted it.\nAlthough supposedly in 6.4 they overhauled and updated the setup so it might have been improved.\n\nNow it's not terrible; It's better then nothing and is pretty useful over all.\nBut because of these problems, you'll probably want to make your own.\n\nI made my own signature system that walks over each function of the source signature target and copies all the non-relative bytes (I.E. it skips the offset bytes from JMP, MOV, CALL instructions, etc.) and makes a 64bit hash of the whole thing.\nI only save unique user named functions and skip small ones (below a byte count cut-off point).  There is no point in saving redundant signatures. \n\nThis way I know that later on if I have a match it more then likely a good and unique match.\nIt's much more accurate and has little chance of false and redundant matches.\nAlso it's done from a plug-in that is about as fast if not faster then IDA's own sig system. It also allows me to add UI lists of matches, non-matches, stats, etc., what ever I want.\n\n",
      "votes": "3",
      "user": "Sirmabus",
      "time": "Feb 3, 2014 at 5:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "johnrl",
          "text": "Excellent! Is that released? I'm using several of your plugins, but i don't believe I recall such one.",
          "time": null
        }
      ]
    },
    {
      "content": "You may be able to make use of snapshots to make this happen from a plugin. I don't think the database snapshot functions are exposed in IDC or IDAPython.\n\nGeneral algorithm on a freshly opened database would be something along the lines of\n\n```\nlibs_before = iterate over all functions to determine initial count of library functions\nsnapshot_t ss;\n::qstrncpy(ss.filename, \"tempsnap\", 9);\nqstring errmsg;\ntake_database_snapshot(&ss, &errmsg);\n//use platform directory iterator on IDA sigs directory\nfor i in list_of_sig_files\n   int signum = plan_to_apply_idasgn(i);\n   while (i--) {\n      apply_idasgn(1);  //may need to play around with this\n   }\n   libs_after = iterate over all functions to determine count of library functions after sigs applied\n   msg(\"%d signatures matched from %s  \n\", libs_after - libs_before, i);\n   restore_database_snapshot(&ss), mycb, NULL);\n\n```\nwhere a minimal mycb is:\n\n```\nvoid idaapi mycb(const char *errmsg, void *ud) {}\n\n```\nobviously there is some code for you to fill in, but the idea to get an initial count of library functions in the binary and take a snapshot. Next iterate over the names of all sig files and apply each one in turn. Following the application of each signature file, generate a new count of the library functions in the database. The difference between the new count and the original count is the number of signature matches. Finally restore to the snapshot you took to roll back the changes made when applying the sigs.\n\nYou can count library functions by iterating over all functions (see get_next_func) and for each returned func_t *f,  check (f->flags & FUNC_LIB) != 0.\n\nHopefully that puts you on the right track \n\n",
      "votes": "2",
      "user": "Chris Eagle",
      "time": "Feb 1, 2014 at 1:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There is a plugin called BinDiff\n\nIf you have renamed Sub_Routines in one IDA DB, you are able to run BinDiff between your current one and a new DB that hasn't been refactored yet. The only down side is it's a little time consuming for binaries that are 30mb+ in size.\n\nhttps://i.sstatic.net/qhA6k.png\n\n",
      "votes": "1",
      "user": "user3161161",
      "time": "Jan 29, 2014 at 20:43",
      "is_accepted": false,
      "comments": [
        {
          "user": "johnrl",
          "text": "BinDiff is a general diffing engine. It does nothing similar to what I describe above. You still need to diff and apply signatures manually on eac/pair of db which is what I want to avoid.",
          "time": null
        }
      ]
    }
  ]
}