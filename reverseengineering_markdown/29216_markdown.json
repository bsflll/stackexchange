{
  "title": "How to calculate the value needed to branch two points in IDA pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/29216/how-to-calculate-the-value-needed-to-branch-two-points-in-ida-pro",
  "content": "I need to find how to get the value to make a branch between two points in IDA Pro, but I can’t figure it out. For more context: the instructions I’m following says “Calculate the value needed to do a branch from 176E4 to 1768C, which will be D2 E7”. How do they get D2 E7 from 176E4 and 1768C? Is there a math formula or is there somewhere in IDA where they find this? It's arm little endian.\nThank you\n\n",
  "votes": "0",
  "answers": 2,
  "views": "171",
  "tags": [
    "ida",
    "arm",
    "patching",
    "ios",
    "hex"
  ],
  "user": "t0astym4rsh",
  "time": "Aug 27, 2021 at 18:50",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "who's \"they\"? also, which ARM?",
      "time": null
    },
    {
      "user": "t0astym4rsh",
      "text": "“They” is whoever wrote the guide I referenced, and it’s arm little endian.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "got a link to the guide?",
      "time": null
    },
    {
      "user": "t0astym4rsh",
      "text": "theiphonewiki.com/wiki/Tutorial:Odysseus_Bundles#ASR_Patch  Yes. The part I’m referencing is under asr patch",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is an unconditional branch (thumb)\n\nIt is encoded as 11100|signed 11-bit immediate offset\n\n```\nE    7    D    2  \n1110 0111 1101 0010\n\n```\nso your 11-bit offset is 0b11111010010.  This is sign extended to -46\n\nThe operation is:\nPC = PC + (SignExtend(signed_immed_11) << 1)\nwhere the first PC contains the address of the branch plus 4.\n\n0x176E4 + 4 + (-46 * 2) == 0x1768C\n\n",
      "votes": "1",
      "user": "mumbel",
      "time": "Aug 27, 2021 at 22:35",
      "is_accepted": false,
      "comments": [
        {
          "user": "t0astym4rsh",
          "text": "How do I get D2 E7 if I’m starting with 0x176E4 and 0x1768C?",
          "time": null
        },
        {
          "user": "mumbel",
          "text": "this is basic algebra at this point SRC + 4 + (X * 2) == DEST solve for X.  (0x1768C - 0x176E4 - 4) / 2 is a signed 11-bit number prepended by 11100",
          "time": null
        }
      ]
    },
    {
      "content": "PC = current Instruction pointer + instruction length\nPC = IP + 4\nPC = 0x176E4 + 4  == 176E8\n\ndestination = 0x1768C\n\noffset is encoded as a signed number of ((destination - PC)>>1)\n\n```\n:\\>python -c \"print(hex((0x1768c-0x176e8)>>1))\n-0x2e\n\n```\nunconditional jump B can be encoded from E0 00 to E7 FF\n==> E + (0x0 to 0x7ff ) == 0b1110 + (0b00000000000 .. 0b11111111111\n\nE0 00 to E3 FF ARE FORWARD JUMPS FROM PC\nE4 00 TO E7 FF ARE BACKWARD JUMPS FROM PC\n-0X2E IS A BACKWARD JUMP\nSO SUBTRACT 0X2E FROM 0X800 TO GET 0X7D2\n\nusing capstone and python\n\n```\nimport capstone\ncs = capstone.Cs(capstone.CS_ARCH_ARM , capstone.CS_MODE_THUMB)\ncs.Detail = True\ninp = [b'\\x00\\xe0',b'\\x01\\xe0',b'\\x02\\xe0',b'\\xff\\xe3',b'\\x00\\xe4',b'\\xff\\xe7',b'\\xd2\\xe7']\nfor j in range(0,len(inp),1):\n    dis = cs.disasm( inp[j],  0x176e4)\n    for i in dis:\n        print(i.bytes ,(\"0x%x:\\t\" % i.address),(\"%s %s\" %(i.mnemonic, i.op_str)))\n\n```\nexecuted\n\n```\n:\\>python arm.py\nbytearray(b'\\x00\\xe0') 0x176e4:  b #0x176e8\nbytearray(b'\\x01\\xe0') 0x176e4:  b #0x176ea\nbytearray(b'\\x02\\xe0') 0x176e4:  b #0x176ec\nbytearray(b'\\xff\\xe3') 0x176e4:  b #0x17ee6\nbytearray(b'\\x00\\xe4') 0x176e4:  b #0x16ee8\nbytearray(b'\\xff\\xe7') 0x176e4:  b #0x176e6\nbytearray(b'\\xd2\\xe7') 0x176e4:  b #0x1768c <<<<<<<<<<\n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Aug 28, 2021 at 21:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}