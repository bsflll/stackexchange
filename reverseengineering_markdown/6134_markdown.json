{
  "title": "ImpRec invalid thunks seem valid",
  "link": "https://reverseengineering.stackexchange.com/questions/6134/imprec-invalid-thunks-seem-valid",
  "content": "I have been rebuilding the IAT for an executable and have used ImpRec though some of the thunks are showing up as invalid even though on the apparent they show the rva, mod, ord and name fields just like the valid thunks. \n\nShould I just delete the thunks which are highlighted as invalid or do further analysis and if so how ?\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "debugging",
    "iat"
  ],
  "user": "user28130",
  "time": "Aug 29, 2014 at 6:44",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "It could be because Import REConstructor detected thunks for 2 different DLLs without a 0x00000000 separator entry between the thunks. Could you please post a screenshot?",
      "time": null
    },
    {
      "user": "user28130",
      "text": "No it's not that I checked in OllyDbg",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "Yes, it's exactly that. Your screenshot confirms it :) See my answer below @ reverseengineering.stackexchange.com/a/6135/1562",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Import REConstructor detected thunks for 2 different DLLs (combase.dll and ole32.dll) without a 0x00000000 separator entry between the thunks. This is because one of these DLLs (ole32.dll) exports functions that are forwarded to the other DLL (combase.dll).\n\nImport REConstructor needs all adjacent thunks (without a 0x00000000 in between them) to be from the same DLL, so to fix this problem, you'll need to double-click on each of those combase.dll thunks and specify the forwarding function from ole32.dll.\n\nFor example, double-click on the combase.dll!CLSIDFromString entry and tell Import REConstructor that its Import Table entry should actually be ole32.dll!CLSIDFromString, then double-click on the combase.dll!CLSIDFromProgID entry and tell Import REConstructor that its Import Table entry should actually be ole32.dll!CLSIDFromProgID, then the same for CoTaskMemFree, CreateStreamOnHGlobal, etc. Note that you'll need to do this for all combase.dll thunks in this block, not just the ones that are currently highlighted as invalid.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Aug 29, 2014 at 2:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "user28130",
          "text": "It works though what should I do in the case of user32.dll which has one function forwarded to another dll, it would be tedious to manually change the 162 other functions in user32.dll, is there no other way around this?",
          "time": null
        },
        {
          "user": "the_endian",
          "text": "@user28130  what was your solution for this problem?",
          "time": null
        }
      ]
    }
  ]
}