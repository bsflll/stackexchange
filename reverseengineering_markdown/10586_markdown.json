{
  "title": "How to run automatically executable from CLI using lldb?",
  "link": "https://reverseengineering.stackexchange.com/questions/10586/how-to-run-automatically-executable-from-cli-using-lldb",
  "content": "In gdb, I can run automatically the binary as (as per this post):\n\n```\ngdb -ex run /bin/true\n\n```\nWhat's the equivalent parameter for lldb?\n\nThis works:\n\n```\necho run | lldb /bin/true\n\n```\nbut I'd like to back to debugger console instead.\n\n",
  "votes": "6",
  "answers": 1,
  "views": "6k",
  "tags": [
    "lldb",
    "command-line"
  ],
  "user": "kenorb",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "LLDB >= 3.4 has the -o / --one-line command line option that can be used to launch your program automatically:\n\nlldb -o run /bin/true\n\nFor reference here are two relevant snippets from lldb-3.6 --help:\n\n```\n...\n   -o \n   --one-line \n        Tells the debugger to execute this one-line lldb command\n        after any file provided on the command line has been loaded.\n...\n  Notes:\n\n       Multiple \"-s\" and \"-o\" options can be provided.  They will be\n       processed from left to right in order, with the source files \n       and commands interleaved. \n...\n\n```\nAnd for reviewing command line options in a web browser -- here's a link to the lldb-3.4 man page.\n\nNote that with LLDB < 3.4 (and also newer versions) you can use the -s / --source option to bootstrap commands like run -- for example:\n\n```\n$ echo run > autorun\n$ lldb -s autorun -- /bin/echo arg1 arg2\n\n```\n",
      "votes": "13",
      "user": "humbletim",
      "time": "Dec 24, 2015 at 23:06",
      "is_accepted": true,
      "comments": [
        {
          "user": "fluidsonic",
          "text": "When running using -o run instead of manually entering run in LLDB console it is not possible to interrupt the process using Ctrl-C. Is there any way to fix that?",
          "time": null
        }
      ]
    }
  ]
}