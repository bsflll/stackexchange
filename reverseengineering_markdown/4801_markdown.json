{
  "title": "compiled binary - what do disassembled instructions correspond to in C/C++ source (Linux GCC)",
  "link": "https://reverseengineering.stackexchange.com/questions/4801/compiled-binary-what-do-disassembled-instructions-correspond-to-in-c-c-sourc",
  "content": "sorry about the messy title! Basically here's what I want to know. \n\nThis might sound a bit silly but, if you have a disassembled instruction say:\n\n```\njz 0x8048e1a\n\n```\nand you also have the source code, how do you go about figuring out what this instruction relates to in the source code? \n\nI should probably mention that I am using Intel's PIN as the application that spits out these disassembled instructions, so I know which function/routine these instructions belong to, I just want to be a bit more precise. \n\nThanks for any help/hints. \n\n",
  "votes": "4",
  "answers": 3,
  "views": "2k",
  "tags": [
    "c++",
    "c",
    "disassembly"
  ],
  "user": "Faheem",
  "time": "Jul 2, 2014 at 14:57",
  "comments": [
    {
      "user": "ajp15243",
      "text": "Do you want to know where jz or some other specific assembly instruction comes from (a specific question), or do you want to know general methodologies on how to go about reverse-engineering assembly code to match against source code (a general question, probably too broad for SO/SE)?",
      "time": null
    },
    {
      "user": "Faheem",
      "text": "Well, basically I have an application that spits out a dissembled instruction and now I have to go find what it corresponds to in the source code. The disassembled instruction that is spat out, is usually a jump instruction.",
      "time": null
    },
    {
      "user": "PlasmaHH",
      "text": "@Achilles: impossible. there is no 1 on 1 mapping. multiple source code lines can end up in one asm insruction, as well as the other way round or mixed.",
      "time": null
    },
    {
      "user": "Faheem",
      "text": "@PlasmaHH : Is there any possibility to at least figure out the Basic block that the instruction comes from?",
      "time": null
    },
    {
      "user": "Hans Passant",
      "text": "You cannot reasonable go from machine code back to source code.  Particularly the optimizer makes a big olde mess of it.  The other way around is feasible, ask your compiler to generate an assembly listing.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you have the source code (and the means to compile it), you shouldn't be using a decompiler. The compiler is already producing a mapping between the original source code and the assembly instructions; that's what debugging information is.\n\nThe easiest way to see it in action is to start the program in the debugger, set a breakpoint, and when that breakpoint hits, switch to the disassembly view. That'll show you the instructions, as well as the source lines which led to them. (If the compiler had optimizations enabled there won't always be a good correspondence between the two, but you can at least see the rudiments.)\n\nYou can also tell your compiler to stop after the code generation phase, and output an assembly file instead of object code. Depending on the compiler, you may also be able to get it to annotate the assembly with the source lines; this'll produce similar information to what you can see in the debugger's disassembly view.\n\nThe details of how you do all that depend entirely on your IDE. Read its documentation.\n\n",
      "votes": "3",
      "user": null,
      "time": "Jul 2, 2014 at 15:32",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you're using the GCC toolchain, you can use objdump to disassemble and mix with source code:\n\n```\nobjdump -S executable > disasm.txt\n\n```\nSee the objdump man pages for more options and information.\n\nIf you're using a different toolchain, see the docs for that toolchain.\n\n",
      "votes": "3",
      "user": null,
      "time": "Jul 2, 2014 at 15:44",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "```\njz 0x8048e1a\n\n```\n",
      "votes": "3",
      "user": "Useless",
      "time": "Jul 2, 2014 at 16:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}