{
  "title": "Why IDA Pro generate define-lack code like this?",
  "link": "https://reverseengineering.stackexchange.com/questions/3716/why-ida-pro-generate-define-lack-code-like-this",
  "content": "Basically I us IDA Pro 6.1 on Windows 32 bit, dealing with binaries from SPEC 2006.\n\nI use IDA Pro to generate asm code from the binaries, and in the .data section, I see data define like this:\n\n```\nGS_ExceptionRecord _EXCEPTION_RECORD  <?>\nGS_ContextRecord _CONTEXT  <?>\nlclcritsects    _RTL_CRITICAL_SECTION 0Eh dup(<?>)\n .....\nDoubleFormat    FpFormatDescriptor <400h, 0FFFFFC01h, 35h, 0Bh, 40h, 3FFh>\nFloatFormat     FpFormatDescriptor <80h, 0FFFFFF81h, 18h, 8, 20h, 7Fh>  \n\n```\nBasically I can not find the definition of _EXCEPTION_RECORD ,_CONTEXT ,_RTL_CRITICAL_SECTION, FpFormatDescriptor in the generated asm code.\n\nAnd in the code, they will be used like:\n\n```\nmov     edi, DoubleFormat.precision\nmov     eax, DoubleFormat.min_exp\nsub     ecx, DoubleFormat.precision\n\nmov     edi, FloatFormat.precision\n\nmov     edi, offset lclcritsects\n\nmov     GS_ContextRecord._Eax, eax\nmov     word ptr GS_ContextRecord.SegSs, ss\npop     GS_ContextRecord.EFlags\n\n```\nSo basically my questions are:\n\nAnd what's more, it seems that I can not find the definition in Structures window even if I expand them....\n\n\n\n",
  "votes": "3",
  "answers": 3,
  "views": "943",
  "tags": [
    "ida",
    "disassembly",
    "winapi",
    "nasm"
  ],
  "user": "lllllllllllll",
  "time": "Feb 18, 2014 at 21:47",
  "comments": [],
  "answers_data": [
    {
      "content": "As far as I know IDA doesn't dump structure layouts as part of generated assembly listings. It does however know about all the structures that you mention. Go to the structures window, press \"Insert\" and name the new structure CONTEXT, EXCEPTION_RECORD or RTL_CRITICAL_SECTION and IDA will show the layout in the structures window.\n\nYou can then open the \"Local Types\" windows and dump all of the structure layouts as a C header file (right click \"Export to header file\". It still doesn't get you the assembly syntax you want, but it is about as close as I know how to make IDA get to what you want.\n\n",
      "votes": "5",
      "user": "Chris Eagle",
      "time": "Feb 19, 2014 at 12:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Hi, Chris, Thank you a lot for your answer and I find the definition of CONTEXT EXCEPTION_RECORD and ** RTL_CRITICAL_SECTION**, but I still can not find FpFormatDescriptor.. Do you know where it is..?",
          "time": null
        },
        {
          "user": "Chris Eagle",
          "text": "I'm not sure where IDA is picking up the definition of FpFormatDescriptor. It does not seem to be listed in any of the til files that ship with my IDA install.",
          "time": null
        }
      ]
    },
    {
      "content": "_EXCEPTION_RECORD, _CONTEXT, and _RTL_CRITICAL_SECTION are all well-defined structures. Their documentation can be found on MSDN (http://msdn.microsoft.com/en-us/library/windows/desktop/aa363082(v=vs.85).aspx, etc.) and their layouts can also be found in IDA's Structures window.\n\nYour other questions aren't clear. Please rephrase them.\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Feb 18, 2014 at 21:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Hi Jason, thank you and I modified my questions, could you please give me a hand...?",
          "time": null
        }
      ]
    },
    {
      "content": "seems to be a struct from some internal microsoft  floating point conversion code possibly from windbg source tree   \n\nseems to be defined like\n\n```\ntypedef struct { \nint max_exp; // maximum base 2 exponent (reserved for special values) \nint min_exp; // minimum base 2 exponent (reserved for denormals) \nint precision; // bits of precision carried in the mantissa \nint exp_width; // number of bits for exponent\nint format_width; // format width in bits \nint bias;  // exponent bias \n} FpFormatDescriptor; \n\n```\nDouble \n\n```\nstatic FpFormatDescriptor \nDoubleFormat = { \n0x7ff - 0x3ff, //  1024, maximum base 2 exponent (reserved for special values)\n0x0 - 0x3ff, // -1023, minimum base 2 exponent (reserved for denormals) \n53, // bits of precision carried in the mantissa \n11, // number of bits for exponent \n64, // format width in bits \n0x3ff,  // exponent bias \n}; \n\n```\nFloat\n\n```\nstatic FpFormatDescriptor \nFloatFormat = { \n0xff - 0x7f, //  128, maximum base 2 exponent(reserved for special values) \n0x0 - 0x7f, // -127, minimum base 2 exponent (reserved for denormals) \n24, // bits of precision carried in the mantissa \n8,   // number of bits for exponent \n32, // format width in bits \n0x7f,  // exponent bias \n}; \n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Feb 20, 2014 at 4:38",
      "is_accepted": false,
      "comments": []
    }
  ]
}