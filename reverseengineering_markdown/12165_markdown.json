{
  "title": "Basic help for reverse engineering for a newbie",
  "link": "https://reverseengineering.stackexchange.com/questions/12165/basic-help-for-reverse-engineering-for-a-newbie",
  "content": "I am a newbie to reverse engineering software.\n\nI am familiar x86 asm language, Linux internals, and c language.\n\nAfter going through lots of tutorials, I didn't absorb much knowledge.\nSo, I have started writing my own programs then reversing them again from their binaries.\n\nIs this approach good?\n\nAlso if I want to get more knowledge, a better grip on assembly and c, should I use ollydbg or IDA pro for starting?\nPlease recommend some links or books that would be good. :- )\n\n",
  "votes": "2",
  "answers": 4,
  "views": "8k",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "sourav punoriyar",
  "time": "May 5, 2020 at 4:12",
  "comments": [],
  "answers_data": [
    {
      "content": "When I started with reversing about 3 years ago I used the following books:\n\nBoth of these books have some really good newbie related content like recognizing C/C++ code constructs in assembly and introduction materials to various tools (both Ollydbg and Ida Pro). If you are more interested in Ida pro, I would suggest reading The Ida Pro Book. Also the book Practical Reverse Engineering has some really nice reviews but I didn't have a chance reading it.\n\nFor getting more familiar with Ollydbg I did most of the tutorials from the Legend Of Random page. I liked those tutorials because they don't just focus on reversing C/C++ binaries but also give you a brief look at tools and techniques with reversing Delphi and Visual Basic applications. \n\nWhen you get a little bit more familiar with the following, I suggest you to try some crackmes from Crackmes.de. There are some great newbie related crackmes there like the Artur Dents series.\n\n",
      "votes": "5",
      "user": "ubnix",
      "time": "Mar 7, 2016 at 8:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Hackndo",
          "text": "I could copy/paste this answer. Exactly the same steps, same books, same websites. Great advice.",
          "time": null
        }
      ]
    },
    {
      "content": "Download and read Reverse Engineering for Beginners. It is excellent and free to download. It contains lots of theory and examples you can easily understand. Plus, it refers to all major architectures, x86, x86-64bit, ARM and MIPS. And one more thing. Yes, your approach is good, you just have to gradually start reversing more difficult programs, like self-made keygens and stuff.\n\n",
      "votes": "3",
      "user": "Chris Tsiakoulas",
      "time": "Mar 7, 2016 at 18:05",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you're looking for more challenges like @ubnix suggested, try looking on the Tuts 4 You website. In the downloads section there are a lot of reverse-engineering resources, including crackmes, tutorials, tools, and references. One of the resources I used in learning was Lena's Reverse Engineering for Newbies.\n\n",
      "votes": "1",
      "user": "dingo_kinznerhook",
      "time": "Mar 7, 2016 at 21:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "ra170",
          "text": "The password is in the pop-up :)",
          "time": null
        }
      ]
    },
    {
      "content": "I'd suggest: http://crackmes.de/ as a source of problems.  Their problems are graduated from fairly easy to extremely difficult.  In addition to problems, they do maintain a list of solutions (not for all problems though) if you get stuck.\n\n",
      "votes": "0",
      "user": "thurizas",
      "time": "Mar 9, 2016 at 13:41",
      "is_accepted": false,
      "comments": []
    }
  ]
}