{
  "title": "A PE packer: issues with the packed image base address",
  "link": "https://reverseengineering.stackexchange.com/questions/2708/a-pe-packer-issues-with-the-packed-image-base-address",
  "content": "I am toying with writing a basic PE packer, whose job is simply to execute the attached target PE in memory. I have spent a couple of days getting intimate with the format, and I think that I have grasped it well enough for the purpose. These are the methods I use:\n\nThe loader, of course, has an exotic image base, as to not conflict with the standard 0x00400000 base. My problems lies somewhere along there. Almost every .exe has its relocations table stripped, so there's no way to do a base relocation if the desired base address is unavailable. The loader having a non-standard image base solves the problem to an extent. The target's desired base is only available in about 50% of runs. I've tried to find out what might occupy the memory in the other 50%, and have found out that it's almost always a section view. Of what, or whose, I don't know. I've tried to use both NtUnmapViewOfSection and NtFreeVirtualMemory, but they don't solve the problem. The first seems to introduce memory corruption and the second does nothing. Is there any way of claiming that memory? Here's a screenshot from ProcessHacker:\n.\n\nAll ideas are welcome.\n\n",
  "votes": "6",
  "answers": 2,
  "views": "955",
  "tags": [
    "pe",
    "packers"
  ],
  "user": "hauzer",
  "time": "Aug 29, 2013 at 0:05",
  "comments": [],
  "answers_data": [
    {
      "content": "You might want to:\n\n",
      "votes": "3",
      "user": "Ange",
      "time": "Aug 29, 2013 at 7:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "hauzer",
          "text": "That's the exact same thing I thought of in between asking the question and coming here to check for answers! Yes, I think that'll do it.",
          "time": null
        }
      ]
    },
    {
      "content": "Try getting code inspiration from process hollowing.\n\nHere's one that remotely runs it on a new space:\nhttps://github.com/hasherezade/libpeconv/tree/master/run_pe\nhttps://github.com/m0n0ph1/Process-Hollowing\n\nTry:\n\nI haven't dug deep about resource loading yet. But if the new PE image uses LoadResource, it might read the loader's instead.  Not sure about this.\n\nYou can get more ideas from debugging a UPX packed sample.\n\n",
      "votes": "0",
      "user": "exp101t",
      "time": "Apr 16, 2020 at 6:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}