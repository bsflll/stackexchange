{
  "title": "Windows - syscalls being called in a strange way?",
  "link": "https://reverseengineering.stackexchange.com/questions/24758/windows-syscalls-being-called-in-a-strange-way",
  "content": "I've been reading about the way syscalls are called in windows.\nThe general theme in all the articles I read is:\n64bit- called inside ntdll\n32bit- from ntdll jumping to KiFastSystemcall\nbut when I opened IDA with ntdlls from both 64 and 32 bit to verify these articles this is what I saw:\n(32bit)\n\n```\nNtCreateFile proc near\nmov     eax, 55h        ; syscall num\nmov     edx, offset j_Wow64Transition\ncall    edx ; weird stub is called instead of KiFastSystemcall.\n            ; I couldn't find anything about it.perhaps a wrapper around KiFastSystemcall?\n\nretn    2Ch\nNtCreateFile endp\n\n```\n(64bit)\n\n```\nNtCreateFile proc near\nmov     r10, rcx        ; NtCreateFile\nmov     eax, 55h\ntest    byte ptr ds:7FFE0308h, 1 ; some test to decide wether to use int 0x2E or syscall?\n                                 ; I don't know why int 0x2E be used. I thought it causes overhead?\njnz     short loc_18009CB15\nsyscall                 \nretn\nloc_18009CB15:          \nint     2Eh             \nretn\nNtCreateFile endp\n\n```\nif anyone knows why the system calls are called like this I would love to know.\nto summarize:\n(32 bit) why is j_Wow64Transition there instead of KiFastSystemcall?\n(64 bit) what is being compared and why?\nthanks.               \n\n",
  "votes": "3",
  "answers": 2,
  "views": "931",
  "tags": [
    "ida",
    "windows",
    "kernel-mode",
    "kernel",
    "system-call"
  ],
  "user": "Alal Benben",
  "time": "Apr 19, 2020 at 10:03",
  "comments": [],
  "answers_data": [
    {
      "content": "Following cites, answering your first question come from Windows Internals Sixth Edition Part 1, page 225:\n\nSo, when you run some 32 bit x86 program on 64 bit Windows, such transitions may occur to enable this application to make a native system call.\n\nAnswer to your second question is already here.\n\n",
      "votes": "5",
      "user": "bart1e",
      "time": "Apr 19, 2020 at 13:57",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I would add information to the first answer. \n\nThe switch of the mode from Wow64 to 64bit, aka \"Heaven's Gate\", is in wow64cpu.dll. offset j_Wow64Transition is a part of wow64cpu.dll.\n\nThese slides helps you to understand the procedure of executing 64bit syscall from Wow64 process with assembly codes as a example.\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Apr 20, 2020 at 21:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "I was also missing the term \"Heaven's Gate\" in the first answer. Presumably because it's not Microsoft's terminology, but the book is published by Microsoft Press.",
          "time": null
        }
      ]
    }
  ]
}