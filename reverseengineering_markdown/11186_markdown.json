{
  "title": "javap is not displaying an expected method",
  "link": "https://reverseengineering.stackexchange.com/questions/11186/javap-is-not-displaying-an-expected-method",
  "content": "I'm trying to write a custom signature for a java tool called \"findbugs.\"  The specific example I'm looking to detect are instances where a static, non-concurrent hashmap is instantiated.  In a multi-threaded environment this causes bad thingsâ„¢ to happen.  \n\nHere is my java source:\n\n```\nimport java.util.HashMap;\nimport java.util.Map;\n\n\npublic class StaticInitializationOfHashMap {\n    private static Map<String,String> hashMap;\n\n    private static void init() throws Exception {\n        hashMap = new HashMap<String,String>();\n        for(int x = 0; x < 1000; x++) {\n            hashMap.put(\"Key_\" + x, \"Value_\" + x);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        init();\n        for(int i = 0; i < hashMap.size(); ++i) {\n            System.out.println(hashMap.get(\"Key_\" + i));\n        }\n    }\n}\n\n```\nHere is my javap -c -v output:\n\n```\nClassfile /c:/gitRepos/findbugs/findbugsTestCases/build/classes/StaticInitializationOfHashMap.class\n  Last modified Oct 27, 2015; size 1478 bytes\n  MD5 checksum d1b1e57f69d1b13f658ee996fc2bbd24\n  Compiled from \"StaticInitializationOfHashMap.java\"\npublic class StaticInitializationOfHashMap\n  SourceFile: \"StaticInitializationOfHashMap.java\"\n  minor version: 0\n  major version: 51\n  flags: ACC_PUBLIC, ACC_SUPER\n\nConstant pool:\n   #1 = Methodref          #20.#45        //  java/lang/Object.\"<init>\":()V\n   #2 = Class              #46            //  java/util/HashMap\n   #3 = Methodref          #2.#45         //  java/util/HashMap.\"<init>\":()V\n   #4 = Fieldref           #19.#47        //  StaticInitializationOfHashMap.hashMap:Ljava/util/Map;\n   #5 = Class              #48            //  java/lang/StringBuilder\n   #6 = Methodref          #5.#45         //  java/lang/StringBuilder.\"<init>\":()V\n   #7 = String             #49            //  Key_\n   #8 = Methodref          #5.#50         //  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n   #9 = Methodref          #5.#51         //  java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n  #10 = Methodref          #5.#52         //  java/lang/StringBuilder.toString:()Ljava/lang/String;\n  #11 = String             #53            //  Value_\n  #12 = InterfaceMethodref #54.#55        //  java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n  #13 = Methodref          #19.#56        //  StaticInitializationOfHashMap.init:()V\n  #14 = InterfaceMethodref #54.#57        //  java/util/Map.size:()I\n  #15 = Fieldref           #58.#59        //  java/lang/System.out:Ljava/io/PrintStream;\n  #16 = InterfaceMethodref #54.#60        //  java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n  #17 = Class              #61            //  java/lang/String\n  #18 = Methodref          #62.#63        //  java/io/PrintStream.println:(Ljava/lang/String;)V\n  #19 = Class              #64            //  StaticInitializationOfHashMap\n  #20 = Class              #65            //  java/lang/Object\n  #21 = Utf8               hashMap\n  #22 = Utf8               Ljava/util/Map;\n  #23 = Utf8               Signature\n  #24 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n  #25 = Utf8               <init>\n  #26 = Utf8               ()V\n  #27 = Utf8               Code\n  #28 = Utf8               LineNumberTable\n  #29 = Utf8               LocalVariableTable\n  #30 = Utf8               this\n  #31 = Utf8               LStaticInitializationOfHashMap;\n  #32 = Utf8               init\n  #33 = Utf8               x\n  #34 = Utf8               I\n  #35 = Utf8               StackMapTable\n  #36 = Utf8               Exceptions\n  #37 = Class              #66            //  java/lang/Exception\n  #38 = Utf8               main\n  #39 = Utf8               ([Ljava/lang/String;)V\n  #40 = Utf8               i\n  #41 = Utf8               args\n  #42 = Utf8               [Ljava/lang/String;\n  #43 = Utf8               SourceFile\n  #44 = Utf8               StaticInitializationOfHashMap.java\n  #45 = NameAndType        #25:#26        //  \"<init>\":()V\n  #46 = Utf8               java/util/HashMap\n  #47 = NameAndType        #21:#22        //  hashMap:Ljava/util/Map;\n  #48 = Utf8               java/lang/StringBuilder\n  #49 = Utf8               Key_\n  #50 = NameAndType        #67:#68        //  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n  #51 = NameAndType        #67:#69        //  append:(I)Ljava/lang/StringBuilder;\n  #52 = NameAndType        #70:#71        //  toString:()Ljava/lang/String;\n  #53 = Utf8               Value_\n  #54 = Class              #72            //  java/util/Map\n  #55 = NameAndType        #73:#74        //  put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n  #56 = NameAndType        #32:#26        //  init:()V\n  #57 = NameAndType        #75:#76        //  size:()I\n  #58 = Class              #77            //  java/lang/System\n  #59 = NameAndType        #78:#79        //  out:Ljava/io/PrintStream;\n  #60 = NameAndType        #80:#81        //  get:(Ljava/lang/Object;)Ljava/lang/Object;\n  #61 = Utf8               java/lang/String\n  #62 = Class              #82            //  java/io/PrintStream\n  #63 = NameAndType        #83:#84        //  println:(Ljava/lang/String;)V\n  #64 = Utf8               StaticInitializationOfHashMap\n  #65 = Utf8               java/lang/Object\n  #66 = Utf8               java/lang/Exception\n  #67 = Utf8               append\n  #68 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n  #69 = Utf8               (I)Ljava/lang/StringBuilder;\n  #70 = Utf8               toString\n  #71 = Utf8               ()Ljava/lang/String;\n  #72 = Utf8               java/util/Map\n  #73 = Utf8               put\n  #74 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n  #75 = Utf8               size\n  #76 = Utf8               ()I\n  #77 = Utf8               java/lang/System\n  #78 = Utf8               out\n  #79 = Utf8               Ljava/io/PrintStream;\n  #80 = Utf8               get\n  #81 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n  #82 = Utf8               java/io/PrintStream\n  #83 = Utf8               println\n  #84 = Utf8               (Ljava/lang/String;)V\n{\n  public StaticInitializationOfHashMap();\n    flags: ACC_PUBLIC\n\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0       \n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return        \n      LineNumberTable:\n        line 5: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       5     0  this   LStaticInitializationOfHashMap;\n\n  public static void main(java.lang.String[]) throws java.lang.Exception;\n    flags: ACC_PUBLIC, ACC_STATIC\n\n    Code:\n      stack=4, locals=2, args_size=1\n         0: invokestatic  #13                 // Method init:()V\n         3: iconst_0      \n         4: istore_1      \n         5: iload_1       \n         6: getstatic     #4                  // Field hashMap:Ljava/util/Map;\n         9: invokeinterface #14,  1           // InterfaceMethod java/util/Map.size:()I\n        14: if_icmpge     59\n        17: getstatic     #15                 // Field java/lang/System.out:Ljava/io/PrintStream;\n        20: getstatic     #4                  // Field hashMap:Ljava/util/Map;\n        23: new           #5                  // class java/lang/StringBuilder\n        26: dup           \n        27: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n        30: ldc           #7                  // String Key_\n        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        35: iload_1       \n        36: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n        39: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n        42: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n        47: checkcast     #17                 // class java/lang/String\n        50: invokevirtual #18                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        53: iinc          1, 1\n        56: goto          5\n        59: return        \n      LineNumberTable:\n        line 16: 0\n        line 17: 3\n        line 18: 17\n        line 17: 53\n        line 20: 59\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               5      54     1     i   I\n               0      60     0  args   [Ljava/lang/String;\n      StackMapTable: number_of_entries = 2\n           frame_type = 252 /* append */\n             offset_delta = 5\n        locals = [ int ]\n           frame_type = 250 /* chop */\n          offset_delta = 53\n\n    Exceptions:\n      throws java.lang.Exception\n}\n\n```\nAt 0: invokestatic  #13 it appears that we're calling the init() method, however in my disassembly, I'm not seeing a reference to a decompiled method called init.  \n\nWhat am I doing wrong?  It appears that the init method was optimized directly into my main method, but I thought that when using Oracle products, that all optimizations were deferred to the JIT and not at compile time?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "605",
  "tags": [
    "disassembly",
    "java"
  ],
  "user": "avgvstvs",
  "time": "Oct 27, 2015 at 16:30",
  "comments": [],
  "answers_data": [
    {
      "content": "Turns out that the problem was me:\n\nYou need to run the command javap -c -private <className> or else javap defaults to not showing disassembly of private methods.  \n\n",
      "votes": "1",
      "user": "avgvstvs",
      "time": "Oct 27, 2015 at 16:30",
      "is_accepted": true,
      "comments": []
    }
  ]
}