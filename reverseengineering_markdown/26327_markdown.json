{
  "title": "Finding Ropper/ROPgadget offsets in Ghidra disassembly",
  "link": "https://reverseengineering.stackexchange.com/questions/26327/finding-ropper-ropgadget-offsets-in-ghidra-disassembly",
  "content": "How is the offsets returned from ROP gadget finders related to the files they come from? For example, if the ROP gadget finder says that a certain gadget is at offset 0x0002ae74 in libuClibc.0.9.3.so where should I go to look for the gadget in libuClibc.0.9.3.so?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "ghidra",
    "exploit"
  ],
  "user": "joshu",
  "time": "Nov 18, 2020 at 2:44",
  "comments": [],
  "answers_data": [
    {
      "content": "ropper bases the binary at address 0. This can be changed using the -I flag. This value of the base can be picked up from Ghidra to reflect in ropper's output\n\nIn Ghidra go to Window > Memory Map.\n\n\nIn this case libc is loaded at base address 0x100000. From ropper\n\n```\n$ ropper -I 0x100000 --nocolor --file ./libc.so.6\n\n```\nNow the output can be directly used with G to go to that address.\n\n```\n0x0000000000197853: pop r13; pop r14; jmp rax;\n\n```\nAdditionally if you can't run ropper again for some reason you can try this with your old output.\n\n```\n0x0000000000097853: pop r13; pop r14; jmp rax; \n\n```\nAdd base to this address\n\n```\nhex(0x100000+0x0000000000097853)\n0x197853\n\n```\nPress G and paste the above address\n\n```\n        00197848 48 83 c4 10     ADD        RSP,0x10\n        0019784c 4c 89 ee        MOV        RSI,R13\n        0019784f 5b              POP        RBX\n        00197850 5d              POP        RBP\n        00197851 41 5c           POP        R12\n        00197853 41 5d           POP        R13\n        00197855 41 5e           POP        R14\n        00197857 ff e0           JMP        RAX\n\n```\nOne thing to notice is that ropper can produce rop gadgets from addresses which are not known to ghidra as instruction boundaries. For example\n\n```\n018258c30000 add dword ptr[edx+0xc358], eax\n\n```\ncan be used by ropper as\n\n```\n58c3 pop eax; ret\n\n```\nbecause 58c3 is still a valid pair of instructions\n\n",
      "votes": "3",
      "user": "sudhackar",
      "time": "Nov 18, 2020 at 6:11",
      "is_accepted": true,
      "comments": [
        {
          "user": "joshu",
          "text": "Awesome answer! Thanks!",
          "time": null
        }
      ]
    }
  ]
}