{
  "title": "Why does the \"MOV DWORD PTR ds:0xdeadbeef\" instruction dereference the 0xdeadbeef address?",
  "link": "https://reverseengineering.stackexchange.com/questions/29768/why-does-the-mov-dword-ptr-ds0xdeadbeef-instruction-dereference-the-0xdeadbee",
  "content": "I'm reverse engineering a binary and I'm confused, because my theoretical knowledge is currently clashing with what's actually happening.\n\nI thought that this instruction writes the value 0xdeadbeef into edx:\n\n```\nmov edx, DWORD PTR ds:0xdeadbeef\n\n```\nAnd I thought that this instruction dereferences that address 0xdeadbeef and writes whatever DWORD value is stored at that address into edx:\n\n```\nmov edx, DWORD PTR ds:[0xdeadbeef]\n\n```\nHowever, in reality, running this instruction:\n\n```\nmov edx, DWORD PTR ds:0x804bdf4\n\n```\nResults in the value of edx being:\n\n```\nedx = 0xb73fc115\n\n```\n0xb73fc115 is the value that's stored at the address 0x804bdf4:\n\n```\nx 0x804bdf4\n0x804bdf4 <gContents>: 0xb73fc115\n\n```\nSo that means that the address was dereferenced, even though the assembly didn't contain any square brackets. I thought thatsquare brackets signified a dereferencing operation. What have I misunderstood?\n\nI'm using GDB\n\nUpdate: I just tested it on radare2, and it shows the instruction in the format that I would expect\n\n```\nmov edx, dword [obj.gContents]\n\n```\nI also tested it with objdump, and the result was the same as with GDB. I assume it's some sort of syntax I don't currently understand?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "Nopslide__",
  "time": "Dec 23, 2021 at 14:22",
  "comments": [
    {
      "user": "blabb",
      "text": "dword ptr: = sq bkts. [. ]  ptr means pointer it dereferences what is in the address 0xdeadbeef and moves it to register. it will mov reg , const for direct write not mov (extend) reg, size ptr addr",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The default assembler syntax used by IDA (MASM based) does not use square brackets when the dereference is unambiguous. In your case the second operand is obviously a memory address from which the value is read, and DWORD PTR is another hint that a dereference is taking place. If you prefer to always see square brackets, you can switch to the TASM assembler in Options > General..., Analysis.\n\n\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Dec 24, 2021 at 15:02",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nopslide__",
          "text": "But what about this one: mov eax,DWORD PTR [rax]. Why are the brackets not omitted in that example as well? Assuming DWORD PTR tells you a dereference is taking place, it should be unambiguous as well?",
          "time": null
        },
        {
          "user": "Nopslide__",
          "text": "Or is it the ds: part that makes it unambiguous?",
          "time": null
        }
      ]
    },
    {
      "content": "if the operand has square brackets it is dereference\nif the operator is preceded by Size PTR segment: then it is dereference\nif the size of source operand is not the same as destination then the moves will need a specific extension\neither Zero Extend or Sign Extend\n\nin some cases (IDA mostly) will display\n\n```\n.text:00404EB1                 movzx   eax, ds:byte_40523D[eax] \n\n```\nwhich is equivalent to\n\n```\n0F B6 80 3D 52 40 00    movzx eax, byte ptr [eax + 0x40523d]\n\n```\nin this case eax will hold a switch case and the constant is a jumptable\n\nfor direct writes the operation it will be\n\n```\nmov reg , const \n\n```\nlike\n\n```\nmov edx,0xdeadbeef with no other decorations added\n\n```\nyou may go to this site for assembling and disassembling tests of the following snippet\n\n```\nmov edx, dword ptr ds:[0xdeadbeef]\nmovzx edx, word ptr ds:[0xdeadbeef]\nmovzx edx, byte ptr ds:[0xdeadbeef]\nmovsx edx, word ptr ds:[0xdeadbeef]\nmovsx edx, byte ptr ds:[0xdeadbeef]\n\nnop\nnop\n\nmov edx, dword ptr ds:0xdeadbeef\nmovzx edx, word ptr ds:0xdeadbeef\nmovzx edx, byte ptr ds:0xdeadbeef\nmovsx edx, word ptr ds:0xdeadbeef\nmovsx edx, byte ptr ds:0xdeadbeef\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Dec 23, 2021 at 17:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}