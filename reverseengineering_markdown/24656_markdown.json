{
  "title": "increment a register which has maximal value?",
  "link": "https://reverseengineering.stackexchange.com/questions/24656/increment-a-register-which-has-maximal-value",
  "content": "I am looking at some assembly code and can't get my head around it. The code below is shown in IDA. My question revolves on what happens in the loop.\n\nLet me explain what I exactly don't understand in the loop: Above the little loop eax is set to be FFFFFFFFh, which is basically \"1\" in all the 32 bits in eax(?). In the little loop eax is incremented. But eax is at max value? What happens when I increment eax? Will it go back to 0?\n\n\n\n",
  "votes": "1",
  "answers": 2,
  "views": "277",
  "tags": [
    "ida",
    "assembly"
  ],
  "user": "Mr Krisey",
  "time": "Apr 11, 2020 at 12:12",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "\"Will it go back to 0?\" Yes",
      "time": null
    },
    {
      "user": "Mr Krisey",
      "text": "That answered my question. Thx.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As commented, incrementing a maximum value indeed wraps back to 0. \nHowever, I’d like to explain a little about why the code looks like this. \nThe original source probably looked similar to:\n\n```\nint pos = 0;\nwhile (buf[pos]==0) pos++;\n\n```\nNow, a naive/literal translation to assembly would have the check and conditional jump out of the loop at the start and an unconditional jump backwards at the end. However, by converting it into a do-while loop you can get rid of the unconditional jump and have only the conditional one at the end:\n\n```\nint pos = -1;\ndo\n{\n  pos++;\n} while (buf[pos]==0);\n\n```\nWhile a minor optimization, it can improve branch prediction and over a bug binary result in substantial performance improvements. \nThis is most likely why you see the initial value of -1 which is represented as 0FFFFFFFFh. \n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Apr 10, 2020 at 16:29",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "inc does not set carry flag (I mis commented earlier as overflow flag)\n\nadd eax, 1 will set the carry flag too\n\n\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Apr 8, 2020 at 17:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}