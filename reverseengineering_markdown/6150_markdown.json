{
  "title": "Finding where to breakpoint?",
  "link": "https://reverseengineering.stackexchange.com/questions/6150/finding-where-to-breakpoint",
  "content": "I have a program written in VB6 with a label that is updated every time I push a button:\n\n\n\nWhen I push the \"Hourglass\" button, the 72 label goes up by 10. How can I find the part of the program that handles this so I can set a breakpoint and examine the assembly?\n\nAlso, if the answer involves searching for strings, how would I do it without (in case I have a future program that encrypts strings or something)?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "222",
  "tags": [
    "binary-analysis"
  ],
  "user": "Nate",
  "time": "Mar 10, 2017 at 9:42",
  "comments": [],
  "answers_data": [
    {
      "content": "A VB6 program might be compiled to P-Code and come with a P-Code-Interpreter packed into the .exe, or it might be compiled to assembly. How to proceed is very dependent on which of these executables you have:\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As pointed out by @guntram-blohm, you first need to determine if your VB6 target is compiled as P-Code or as native. If it's P-Code, I cannot help. If it's native, what you need to do is known as differential debugging. You can do it without using plugins or external tools directly from IDA.\n\nIf by any chance you're running an old version of IDA that lacks that support, you can use MyNav, a tool I wrote for doing differential debugging as a replacement for BinNavi, a tool that you might be able to use if your target is a 32 bits one.\n\nYou might also want to take a look to this question: Trace assisted code identification?.\n\n",
      "votes": "0",
      "user": "joxeankoret",
      "time": "Nov 17, 2018 at 12:29",
      "is_accepted": false,
      "comments": []
    }
  ]
}