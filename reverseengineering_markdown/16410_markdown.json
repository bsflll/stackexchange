{
  "title": "What does __CFSHL__ do?",
  "link": "https://reverseengineering.stackexchange.com/questions/16410/what-does-cfshl-do",
  "content": "```\n  unsigned __int8 v2; // cf@1\nv2 = __CFSHL__(v3, 28);\n\n```\nWhat does the CFSHL function mean? I can't seem to find any documentation on it.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "861",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "user1698144",
  "time": "Sep 25, 2017 at 16:41",
  "comments": [],
  "answers_data": [
    {
      "content": "This function usually generate a 'Carry Flag for SHift Left' operators (CFSHL).\n\n```\n__CFSHL__(x, y) // Generate a carry flag for (x<<y)\n\n```\nIn fact, when decompiling we, sometimes, loose the origin of the very-low level operations such as manipulation of carry flags. Originally, this operation must have been linked to some arithmetic operation which might have been missed by the decompiler (or optimized out). But, the manipulation of the carry bit on the eflags is still here, so to keep the semantic equivalence of the decompiled program, Hexrays' decompiler is sometimes forced to use such tricks (which appears to come from outer space even if they probably have a perfectly natural cause).\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Sep 25, 2017 at 17:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "user1698144",
          "text": "Thanks for the answer. Im a bit new to reverse engineering, and ida. So what does the operation actually do to the variables, x and y?",
          "time": null
        },
        {
          "user": "perror",
          "text": "In fact, it does not touch x and y. It simply computes if the carry bit of the %eflags must be touched if an operation x << y would have been performed (but without performing it). Sorry, I should have been clearer... I wrote my answer a bit too quickly. Shame on me. :-/",
          "time": null
        },
        {
          "user": "perror",
          "text": "@user1698144: You still didn't get it, right ? If so, it really means that you lack a lot of background in assembly. You should learn a bit more about it.",
          "time": null
        }
      ]
    }
  ]
}