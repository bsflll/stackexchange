{
  "title": "Running ELF file built for ARM arhitecture",
  "link": "https://reverseengineering.stackexchange.com/questions/29238/running-elf-file-built-for-arm-arhitecture",
  "content": "My goal is to run and debug ELF file (c444) which is compiled for the ARM architecture. I have some experience with x32 and x64 Intel architectures. However, I down know how to proceed with ARM-based architecture.\n\nFile general information is extracted below from tools file and readelf. It looks that the file is compiled for ARM architecture: ARMV5TE and ARM core: arm1022e.\n\n```\nc444: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /system/bin/linker, stripped\n\n\n```\nArchitecture specific information\n\n```\nkali@kali:~/Downloads/samolan$ readelf -A c444 \nAttribute Section: aeabi\nFile Attributes\n  Tag_CPU_name: \"arm1022e\"\n  Tag_CPU_arch: v5TE\n  Tag_ARM_ISA_use: Yes\n  Tag_THUMB_ISA_use: Thumb-1\n  Tag_FP_arch: VFPv2\n  Tag_ABI_PCS_GOT_use: GOT-indirect\n  Tag_ABI_PCS_wchar_t: 4\n  Tag_ABI_FP_denormal: Needed\n  Tag_ABI_FP_exceptions: Needed\n  Tag_ABI_FP_number_model: IEEE 754\n  Tag_ABI_align_needed: 8-byte\n  Tag_ABI_enum_size: int\n  Tag_ABI_optimization_goals: Aggressive Speed\n  Tag_ABI_FP_16bit_format: IEEE 754\n\n```\nHeaders\n\n```\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           ARM\n  Version:                           0x1\n  Entry point address:               0x470\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          4480 (bytes into file)\n  Flags:                             0x5000200, Version5 EABI, soft-float ABI\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         8\n  Size of section headers:           40 (bytes)\n  Number of section headers:         24\n  Section header string table index: 23\n\n\n\n```\nFrom Wiki I can see that there are many different variations of ARM architectures and one of them is ARMV5TE. I found that QEMU can emulate different AMR architectures. Hence I have tried to create a virtual ARM machine following this tutorial (tutorial).\n\nBasically, I downloaded 3 files from here and run the command in the directory with downloaded files.\n\n```\nqemu-system-arm -M versatilepb -kernel vmlinuz-2.6.32-5-versatile -initrd initrd.img-2.6.32-5-versatile -hda debian_squeeze_armel_standard.qcow2 -append \"root=/dev/sda1\" -redir tcp:2222::22\n\n```\nIn the created virtual machine I have run uname -a and got information that architecture can be something write (armv5tejl):\n\n```\nroot@debian-armel:~# uname -a\nLinux debian-armel 2.6.32-5-versatile #1 Wed Sep 25 00:01:55 UTC 2013 armv5tejl GNU/Linux\n\n\n```\nWhen VM started I connected to it with ssh and copied c444 file to the machine, changed the permissions chmod 777 ./c444, and run the command ./c444 but got an error.\n\n```\nroot@debian-armel:/home/user# ./c444 \n-bash: ./c444: No such file or directory\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "linux",
    "arm",
    "elf",
    "qemu"
  ],
  "user": "Austris",
  "time": "Sep 4, 2021 at 13:45",
  "comments": [
    {
      "user": "phuclv",
      "text": "I don't think this has anything to do with reverse engineering, just running a virtual machine",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "“No such file or directory” is often printed by the shell when the dynamic interpreter of the executable is not found. You can find out which one it expects by using readelf-l.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Sep 1, 2021 at 21:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}