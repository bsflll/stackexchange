{
  "title": "Problem with IDA pro 6.8 disassemble galaxy s6 sboot",
  "link": "https://reverseengineering.stackexchange.com/questions/10995/problem-with-ida-pro-6-8-disassemble-galaxy-s6-sboot",
  "content": "I have some problem with Galaxy S6 boot loader (sboot.bin).\n\nFrom 0x3F000 of that file, I think that there exists the real boot loader.\n\nSo I tried to disassemble it with ida 6.8 pro (64bit)\n\nBut It does not disassemble it clearly. (in both thumb mode and arm mode)\n\nIDA pro 6.8 can support the Galaxy S6 boot loader (sboot.bin)?\n\nIs there anyone who succeed in disassembling the Galaxy S6 boot loader (sboot.bin)? (aka armv8, aarch64 architecture)\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "android",
    "arm"
  ],
  "user": "J.Cho",
  "time": "Oct 29, 2021 at 7:31",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Why not use the latest IDA version? Maintenance ran out?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Fernand Lone Sang from Quarkslab has had success disassembling the S6 bootloader (ARMv8, AArch64):\n\nSBOOT's base address is identified to be 0x02102000 by executing this python script:\n\n```\nimport sys\nimport string\nimport struct\n\nRT_SVC_DESC_FORMAT  = \"BBB5xQQQ\"\nRT_SVC_DESC_SIZE    = struct.calcsize(RT_SVC_DESC_FORMAT)\nRT_SVC_DESC_OFFSET  = 0xcb50\nRT_SVC_DESC_ENTRIES = (0xcc10 - 0xcb50) / RT_SVC_DESC_SIZE\n\nif len(sys.argv) != 2:\n    print(\"usage: %s <sboot.bin>\" % sys.argv[0])\n    sys.exit(1)\n\nsboot_file = open(sys.argv[1], \"rb\")\nsboot_data = sboot_file.read()\n\nrt_svc_desc = []\nfor idx in range(RT_SVC_DESC_ENTRIES):\n    start = RT_SVC_DESC_OFFSET + (idx << 5)\n    desc = struct.unpack(RT_SVC_DESC_FORMAT,\n                         sboot_data[start:start+RT_SVC_DESC_SIZE])\n    rt_svc_desc.append(desc)\n\nstrlen = lambda x: 1 + strlen(x[1:]) if x and x[0] in string.printable else 0\n\nfor base_addr in range(0x2100000, 0x21fffff, 0x1000):\n    names = []\n    print(\"[+] testing base address %08x\" % base_addr)\n    for desc in rt_svc_desc:\n        offset = desc[3] - base_addr\n        if offset < 0:\n            sys.exit(0)\n        name_len = strlen(sboot_data[offset:])\n        if not name_len:\n            break\n        names.append(sboot_data[offset:offset+name_len])\n    if len(names) == RT_SVC_DESC_ENTRIES:\n        print(\"[!] w00t!!! base address is %08x\" % base_addr)\n        print(\"    found names: %s\" % \", \".join(names))\n\n```\n",
      "votes": "2",
      "user": "pevik",
      "time": "Jul 27, 2021 at 23:39",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "it's an ARM64 binary. If we're looking at the same sboot.bin, it's actually starting at offset 10:\n\n```\n0x00000000      0x00000010      DCD 0x10        ; ^P\n0x00000004      0xe99c208a      DCD 0xe99c208a  ; <8A> <9C><E9>\n0x00000008      0x00000000      DCD 0x0 ; \n0x0000000c      0x00000000      DCD 0x0 ; \n0x00000010      0x14000002      B 0x18\n        -------------------------------\n0x00000014      0x14000000      B 0x14\n        -------------------------------\n0x00000018      0x58000a80      LDR X0, #336            ; 0x168\n0x0000001c      0xb9400000      LDR W0, [X0, #0]\n0x00000020      0xd2b00001      MOVZ X1, 0x8000, LSL #16\n\n```\nTry using disarm (http://newosxbook.com/tools/disarm.html) since IDA somehow has trouble with this file. (There are also apparently ARM32 bits towards its end)\n\n",
      "votes": "0",
      "user": "Just helping",
      "time": "May 27, 2016 at 19:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "Willem Hengeveld",
          "text": "Since ida6.9 there is ARM64 support. Use Alt-S to set your segment bitness to 64 to be able to use it.",
          "time": null
        }
      ]
    }
  ]
}