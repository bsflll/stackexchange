{
  "title": "Get hardcoded char array from compiled C++ source",
  "link": "https://reverseengineering.stackexchange.com/questions/32351/get-hardcoded-char-array-from-compiled-c-source",
  "content": "It is well known that literal strings can be retrieved from C++ compilates. For example, the output of\n\n```\ng++ a.cpp\n\n```\non\n\n```\nint main(void)\n{\n    const char * secret0 = \"abcdefghijklmnopqrstuvwxyz\";\n    const char secret1[] = {\n        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    };\n    return 0;\n}\n\n```\ncan be inspected with strings. The output contains the strings:\n\n```\nstrings a.out | grep -i xyz\n\n```\n```\nabcdefghijklmnopqrstuvwxyz\n\n```\nIs something like that possible for the hardcoded char array {0x01, 0x02, 0x03, 0x04, ...} as well?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "188",
  "tags": [
    "c++"
  ],
  "user": "Nico Schl√∂mer",
  "time": "Oct 4, 2023 at 8:26",
  "comments": [
    {
      "user": "blabb",
      "text": "Strings will output that if the charecters are within printable ascii range and size is greater than threshhold levels. If the chars are not in printable range then it is guess game. And heuristics For example a continuous 0x90 in text section might be nop whereas the same might be prefilled buffer in a read only section",
      "time": null
    },
    {
      "user": "blabb",
      "text": "If your query was as answered by mimak then you dont need anything more than grep -obUaP  escaped_hex",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "ASCII symbols below 0x20 are called control characters and they are not considered printable. So you cannot interpret them as strings. They are just numbers and to inspect them you need to inspect memory using hex-editor, debugger, disassembler or other tools.\n\n",
      "votes": "1",
      "user": "JacobTheKind",
      "time": "Nov 19, 2024 at 19:05",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Constants are usually saved in the .data segment (assuming ELF format), including arrays. You should be able to find it with any hex editor with a search function, for instance Ghidra's Search Memory.\n\n",
      "votes": "0",
      "user": "mimak",
      "time": "Oct 4, 2023 at 8:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "the busybee",
          "text": "In the case shown in the question it is not .data but .rodata. The data type does not have any effect of the segment, it depends on being writable or not.",
          "time": null
        },
        {
          "user": "mimak",
          "text": "@thebusybee Well ive just compiled it with gcc out of curiosity and we're both wrong, the array was inlined into subsequent mov rax, 706050403020100h and mov rdx, 0F0E0D0C0B0A0908h instructions thus making it .text segment; the string ended up in .rdata",
          "time": null
        },
        {
          "user": "mimak",
          "text": "i assume it depends on the comp target (x64 pe in this case) and the compiler itself",
          "time": null
        }
      ]
    }
  ]
}