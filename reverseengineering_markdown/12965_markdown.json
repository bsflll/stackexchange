{
  "title": "Reversal of unknown obfuscation or encryption with known plaintext",
  "link": "https://reverseengineering.stackexchange.com/questions/12965/reversal-of-unknown-obfuscation-or-encryption-with-known-plaintext",
  "content": "For academical reasons I am reversing a firmware for an embedded device. I have already created a perl script which is able to parse the firmware structure and extract files from it (its some custom VXWORX/RTOS system with custom firmware header and obfuscation.\n\nI have no access to the Device itself, i.e. I can not debug the firmware update process.\n\nThere are two types of files in the firmware, easy XOR obfuscated files. I was able to detetect the single byte XOR key by quick analysis in hex editor.\nThe second type is a bit more obfuscated. This is used for more sensitive data.  But fortunately I have some of the files as clear text, downloaded directly from the Device via the Web interface.\n\nThese second, strong obfuscated and/or compressed type have following characteristics:\n\nFirst comes the original file, then the encoded as found in the firmware.\n\nBinary versions of original and encoded files are provided.\n\nexamples.zip\n\nexamples2.zip\n\nUpdate1: Second example uploaded with encrypted binary files. They all have in clear text a MX header like this.\n\n```\n    hexdump -C extsd_new.exe\n    00000000  4d 58 07 00 0f 00 01 00  03 00 26 00 ff ff 2e 00  |MX........&.....|\n    00000010  00 03 00 00 00 00 00 00  2c 00 00 00 3c 14 be 54  |........,...<..T|\n    00000020  00 00 00 00 00 00 00 00  00 00 00 00 ce 00 1b 00  |................|\n    00000030  b9 68 0d be ce 1a 89 f7  1e a9 b5 80 8c c8 05 01  |.h..............|\n    00000040  00 8e d8 05 13 00 8e c0  fd f3 a5 fc 2e 80 6c 12  |..............l.|\n    00000050  01 73 e7 92 af ad 0e 0e  0e 06 1f 07 16 bd 31 00  |.s............1.|\n    00000060  bb 0f 80 55 cb 55 50 58  21 0b 13 03 08 8d 43 8c  |...U.UPX!.....C.|\n    00000070  ba 30 ad 68 62 5a 2b 00  30 1a 00 20 2d 00 00 1b  |.0.hbZ+.0.. -...|\n    00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n    *\n    00000130  ff ba 24 00 2e 89 16 40  02 ff b4 30 cd 21 8b 2e  |.!..|\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "865",
  "tags": [
    "firmware",
    "encryption",
    "deobfuscation",
    "decompress"
  ],
  "user": "SeWe",
  "time": "Jun 30, 2016 at 20:05",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "A bit odd. If you check extsd_new.exe.enc, you see multiple lines of just FF FF FF FF. That's an odd sight when you assume this file to be compressed or encrypted. Can you compare the file size of extsd_new (encoded vs. plain) - is this maybe an uncompressed file?",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "there's also this clear UPX! that would suggest UPX exe packer? Also this MX could be a hidden form of MZ from an DOS executable?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I recommend trying using binwalk again. binwalk has it's own extraction utility which decompresses/deflates files of many different file types.\n\nUse it like so...\n\nI hope this helps!\n\n",
      "votes": "-1",
      "user": "0siris",
      "time": "May 14, 2018 at 18:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Thanks for your time, but this is more of a comment/remark than an answer.",
          "time": null
        }
      ]
    }
  ]
}