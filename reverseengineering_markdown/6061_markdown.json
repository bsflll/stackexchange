{
  "title": "What is the meaning of '!' in ldm arm assembler instruction?",
  "link": "https://reverseengineering.stackexchange.com/questions/6061/what-is-the-meaning-of-in-ldm-arm-assembler-instruction",
  "content": "I am quite new to ARM assembly, I already saw that the bang (!) is used to really update a register after a computation in the addressing mode syntax, but I can't figure out what is the difference of semantics between (this output is from objdump so it uses gas syntax):\n\n```\nldm r4!, {r0, r1, r2, r3}\n\n```\nAnd:\n\n```\nldm r4, {r0, r1, r2, r3}\n\n```\nAny idea ?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "8k",
  "tags": [
    "assembly",
    "arm",
    "gas"
  ],
  "user": "perror",
  "time": "Aug 12, 2014 at 16:38",
  "comments": [
    {
      "user": "JamalS",
      "text": "By the way, you can use Intel syntax with objdump, just specify objdump -M intel",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@JamalS: there's no Intel syntax for ARM",
      "time": null
    },
    {
      "user": "perror",
      "text": "@JamalS: You should have noticed that register list is not something common in x86 operands. :-)",
      "time": null
    },
    {
      "user": "JamalS",
      "text": "@perror: Yes, I forgot x86 starts at r8 instead of r0 :)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The ! denotes writeback of the base register. Base register is the register used to address the memory to be read or written - in your case it's R4. Writeback means that the base register will be updated with the delta equal to the size of transferred data.\n\nSo, the instruction \n\n```\nldm r4!, {r0, r1, r2, r3}\n\n```\ncan be represented by the following pseudocode:\n\n```\nr0 = *(int)(r4) \nr1 = *(int)(r4+4) \nr2 = *(int)(r4+8) \nr3 = *(int)(r4+12) \nr4 = r4 + 16 // writeback (16 bytes transferred)\n\n```\nIn the variant without ! the writeback doesn't happen so R4 retains the original value.\n\nIn the LDR and STR instructions you may also encounter pre-indexed and post-indexed notation:\n\n```\nLDR R0, [R4, #4]  ; simple offset: R0 = *(int*)(R4+4); R4 unchanged\nLDR R0, [R4, #4]! ; pre-indexed:   R0 = *(int*)(R4+4); R4 = R4+4\nLDR R0, [R4], #4  ; post-indexed:  R0 = *(int*)(R4+0); R4 = R4+4\n\n```\nFor more information see the ARM Assembler Guide.\n\n",
      "votes": "8",
      "user": "Igor Skochinsky",
      "time": "Aug 12, 2014 at 17:03",
      "is_accepted": true,
      "comments": []
    }
  ]
}