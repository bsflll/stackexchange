{
  "title": "Is it possible to \"jump\" to another address when script detects jmp?",
  "link": "https://reverseengineering.stackexchange.com/questions/27310/is-it-possible-to-jump-to-another-address-when-script-detects-jmp",
  "content": "here is the original C++ source code of the executable that I've created to do simple RE\n\n```\n#include <iostream>\n\nvoid myFunction() {\n\n    printf(\"Hello!\");\n}\n\nint main()\n{\n    myFunction();\n    return 0;\n}\n\n```\nWhen I disassembled my executable in IDA, this is the first block that I see\n\n\nWith the address being 0x4112c1\n\n\nI've created a simple IDAPython script to find out what is the next address after the jump _main_0\n\n```\nfrom idautils import *\nfrom idaapi import *\nfrom idc import *\n\ncursor = 0\nstart_addr = 0\nend_addr = 0\nprint(\"----------Starting python script----------  \n\")\nfor func in Functions():\n    name = get_func_name(func)\n    if \"_main\" == name:\n        start_addr = get_func_attr(func, FUNCATTR_START)\n        end_addr = get_func_attr(func, FUNCATTR_END)\n        print(\"Start: 0x%x, End: 0x%x\" %(start_addr, end_addr))\n\ncursor = start_addr\nprint('0x%x %s' % (cursor, generate_disasm_line(cursor, 0)))\ncur_addr = next_head(cursor, end_addr)\nprint(\"Next Head: 0x%x\" %cur_addr)\nprint(\"---------Exiting Python script------\")\n\n```\nAnd this is the following output:\n\n```\n----------Starting python script----------\n\nStart: 0x4112c1, End: 0x4112c6\n0x4112c1 jmp     _main_0\nNext Head: 0xffffffff\n---------Exiting Python script------\n\n```\nI have 2 questions I would like to ask:\n\n**Disclaimer: I'm kinda new to RE and IDAPython so do bear with me if I ask too much\n\n",
  "votes": "1",
  "answers": 2,
  "views": "320",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "festivezine",
  "time": "Mar 25, 2021 at 8:15",
  "comments": [],
  "answers_data": [
    {
      "content": "From IDAPython docs:\n\nThat will give you the next defined item after the address passed in ea no matter what instruction is at ea.\n\nOf course it is possible. One way to do that is to call ida_xref.get_first_cref_from and extract that address from its output. Probably there are some better ways to do that, but this one should work.\n\n",
      "votes": "0",
      "user": "bart1e",
      "time": "Mar 25, 2021 at 17:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "festivezine",
          "text": "Hi! Thank you so much for your suggestion! That function works for me and it's good for me (for now :) )",
          "time": null
        }
      ]
    },
    {
      "content": "This is untested, and is just a slightly expanded version of an old function GetTarget I have.  It's very low-tech (simple API usage only), and (probably) will only work correctly for the x86/64 platform where all conditional jump mnemonics start with j and no mnemonic starts with j that isn't a jump of some type.\n\nThe alternative (which I also have) using NN_* code is harder to grasp for a beginner.\n\n```\ndef GetTarget(ea):\n    mnem = GetMnem(ea)\n    if not mnem:\n        return BADADDR\n    \n    opType0 = GetOpType(ea, 0)\n    if mnem == \"jmp\" or mnem == \"call\" or mnem[0] == \"j\":\n        if opType0 != o_near and opType0 != o_mem:\n            print(\"Can't follow opType0 \" + opTypeAsName(opType0))\n            return BADADDR\n        else:\n            return GetOperandValue(ea, 0)\n\n    if NextHead(ea) == ea + ItemSize(ea) and isFlow(GetFlags(NextHead(ea))):\n        return NextHead(ea)\n\ndef opTypeAsName(n):\n    for item in [x for x in dir(idc) if x.startswith('o_')]:\n        if getattr(idc, item) == n: return item\n\n```\nSince the way I used to code is really a little embarrassing, here is the same code in correct pythonic idapython 7\n\n```\ndef GetTarget7(ea):\n    mnem = idc.print_insn_mnem(ea)\n    if not mnem:\n        return idc.BADADDR\n    \n    opType0 = idc.get_operand_type(ea, 0)\n    if mnem == \"jmp\" or mnem == \"call\" or mnem[0] == \"j\":\n        if opType0 != o_near and opType0 != o_mem:\n            print(\"Can't follow opType0 \" + opTypeAsName(opType0))\n            return idc.BADADDR\n        else:\n            return idc.get_operand_value(ea, 0)\n\n    if idc.next_head(ea) == ea + idc.get_item_size(ea) and \\\n            idc.is_flow(idc.get_full_flags(idc.next_head(ea))):\n        return idc.next_head(ea)\n\n```\nsee my github for vim ultisnips auto-expanding 6 to 7 idapython conversion, and idapython syntax file\n\n",
      "votes": "0",
      "user": "Orwellophile",
      "time": "Apr 2, 2021 at 15:47",
      "is_accepted": false,
      "comments": []
    }
  ]
}