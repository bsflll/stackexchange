{
  "title": "ROP chain: Buffer Overflow Return Pointer",
  "link": "https://reverseengineering.stackexchange.com/questions/20332/rop-chain-buffer-overflow-return-pointer",
  "content": "I am trying to get a ROP exploit to work on Ubuntu 18.04 LTS 64bit.\n\nI have a 64 bit binary (Nx enabled, ASLR disabled) with vuln function as follows:\n\n```\npublic vuln\nvuln proc near\n\nvar_100= byte ptr -100h\n\npush    rbp\nmov     rbp, rsp\nsub     rsp, 100h\nlea     rdi, s          ; \"Gimme some data!\"\ncall    _puts\nlea     rax, [rbp+var_100]\nmov     rdi, rax\nmov     eax, 0\ncall    _gets\nnop\nleave\nretn\nvuln endp\n\n```\nI need to overwrite the return pointer of vuln function with the libc base address where I will write parameters for execve call.\n\nThe buffer is 264 bytes long. So with 272 'A' I get the following position:\n\n```\n0x55555555471d <vuln+45>    ret    <0x4141414141414141>\n\n```\nStack:\n\n```\n00:0000│ rsp  0x7fffffffe2c8 ◂— 'AAAAAAAA'\n\n```\nBut when I try to overflow with the libc address(0x7ffff7a3a000) it is giving a SIGSEGV and it is behaving the following way:\n\n```\n0x55555555471d <vuln+45>    ret    <0x3061785c3030785c>\n\n```\nStack:\n\n```\n00:0000│ rsp r11-6  0x7fffffffe2c8 ◂— 0x3061785c3030785c ('\\\\x00\\\\xa0')\n01:0008│            0x7fffffffe2d0 ◂— 0xefbdbfef3361785c\n02:0010│            0x7fffffffe2d8 ◂— 0x3030785cbdbf\n\n```\nI dont know where am I going wrong!!!! I have put so many days in it but to no extent. I have done buffer overflow before but never encountered this problem.\n\nFollowing is my python script that is generating the payload (this is only to overflow the return address):\n\n```\n#! /usr/bin/env python2\n\nfrom pwn import *\n\npayload = 'A' * 264\npayload += p64(0x7ffff7a3a000)\n\nprint(payload)\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "459",
  "tags": [
    "binary-analysis",
    "gdb",
    "python",
    "buffer-overflow",
    "rop"
  ],
  "user": "Kainaat Singh",
  "time": "Jan 10, 2019 at 20:37",
  "comments": [
    {
      "user": "sudhackar",
      "text": "I think this is a problem with printing from python as there's \\\\x00\\\\xa0 at stack top instead of the actual \\x00 and \\xa0 bytes. How are you providing input if i may ask?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The zero in the address that you are passing is causing the string to be terminated and the following values to not be stored.  You won't be able to return directly to libc that way.  Instead, you'll need a different address that can either branch to libc directly (but contains no zeroes in the address), or which can push that value for you before performing a ret itself.\n\n",
      "votes": "1",
      "user": "peter ferrie",
      "time": "Jan 12, 2019 at 4:43",
      "is_accepted": false,
      "comments": [
        {
          "user": "Kainaat Singh",
          "text": "I showed this just as an example. Sorry for the confusion. But I have an entire ROP chain coded. In the ROP Chain payload the first statement is a move instruction.  The mov instruction is at the address  (0x7ffff7a3a000+0x2c42c). As you can see there are no zeroes here but still I get the same result. I have tried putting address from main function or any other function. But I get the same result.",
          "time": null
        }
      ]
    }
  ]
}