{
  "title": "How to disassemble a packed .NET executable?",
  "link": "https://reverseengineering.stackexchange.com/questions/19938/how-to-disassemble-a-packed-net-executable",
  "content": "I'm trying to reverse a Windows executable that shows as having been packed with ENIGMA(5.X):\n\n\n\nIf I later check the class name for one of its UI elements, when the process is unpacked and running, it shows as a .NET class WindowsForms10.BUTTON.app.0.378734a:\n\n\n\nBut if I then attach to that process with dnSpy, I can pause that .NET executable somewhere in System.Windows.Forms.dll in Application - UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop() function but there seems to be no info on the .NET assemblies from the target process itself:\n\n\n\nMy goal was to see the .NET code after the Start button click in that app. Any idea how should I proceed?\n\n",
  "votes": "4",
  "answers": 2,
  "views": "8k",
  "tags": [
    "disassembly",
    ".net",
    "packers"
  ],
  "user": "c00000fd",
  "time": "Nov 21, 2018 at 8:58",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Can you add the real packed binary?",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@Biswapriyo: I'm not sure what the policy is for posting this link here. (Moderator: I'll remove it if it's not allowed.) Here's it is, direct link to a 7-Zip file. The author put a password on it: kahusecurity -- A word of caution: once you unzip it, it will be reported as malware by your AV.",
      "time": null
    },
    {
      "user": "Uprooted",
      "text": "Sorry for offtop, what is the first program you use, the one that told you about ENIGMA(5.X)?",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@Uprooted: Detect It Easy",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "OK, I think I got it. The tool I needed was MegaDumper. (I couldn't find the executable on its Github, so I had to build it myself.)\n\nThen here's the steps how I used it:\n\n\n\nLastly, just want to say that, from a quick glance, the packed .NET executable in question does not appear to be malicious. The reports by multiple AVs were probably caused by the use of the Russian packer. So, this might be a clue to developers who decide to pack their legitimate software. (Just saying...)\n\n",
      "votes": "5",
      "user": "c00000fd",
      "time": "Mar 23, 2019 at 23:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "After you press 'Pause' you will end you in the message loop - that's ok. Go to the call-stack window and you should see your binary in on of the previous frames. Double click on one of them and dnSpy should load it and analyse. \n\nBut since the binary is packed (and probably obfuscated) I think you need to first unpack it and run this version in order to correctly map instructions to lines.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Nov 21, 2018 at 20:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "c00000fd",
          "text": "Yeah, the callstack has the reference to some location in the Main() function from the target .NET process but clicking it in dnSpy does nothing. TBH, I've never unpacked a .NET executable. What's the process for that? Is it just a manual process by dumping memory in the native debugger first.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "try de4dot",
          "time": null
        },
        {
          "user": "c00000fd",
          "text": "Can de4dot access files from memory though? I'm getting The file isn't a .NET PE file if I just run the original exe thru it.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "No, not really. It looks like the original exe is not a .net assembly and only after unpacking it becomes one.",
          "time": null
        }
      ]
    }
  ]
}