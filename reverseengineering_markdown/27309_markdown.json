{
  "title": "does mov DWORD PTR 32[rsp], 5 means mov DWORD PTR [rsp+32], 5?",
  "link": "https://reverseengineering.stackexchange.com/questions/27309/does-mov-dword-ptr-32rsp-5-means-mov-dword-ptr-rsp32-5",
  "content": "I am learning about windows x64 calling convention, where the first four arguments are passed to registers and left arguments are passed through the stack. To see it, I checked the assembly of the test file that I made. I understood the passing of first four arguments through the register, the left arguments were passed through the stack but I didn't understood the assembly of the instruction. It looked like this:\n\n```\nmov DWORD PTR 40[rsp], 6\nmov DWORD PTR 32[rsp], 5\n\n```\nI don't know what does 40[rsp] means, maybe rsp+40 .\nIf anyone knows, please explain to me\n\n",
  "votes": "1",
  "answers": 1,
  "views": "312",
  "tags": [
    "disassembly",
    "windows",
    "functions",
    "stack",
    "x86-64"
  ],
  "user": "Mr. rc",
  "time": "Mar 25, 2021 at 4:27",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "What assembler are you using?",
      "time": null
    },
    {
      "user": "Mr. rc",
      "text": "gcc with tag -S",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes, mov DWORD PTR 40[rsp], 6 is the same as mov DWORD PTR [rsp + 40], 6. The first syntax makes a lot more sense in cases where the constant is the base address of an array, and the register contains a byte offset into that array. That's the use case the syntax was designed for.\n\n",
      "votes": "2",
      "user": "Michael Karcher",
      "time": "Mar 26, 2021 at 8:25",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mr. rc",
          "text": "Thanks, now i understood!",
          "time": null
        }
      ]
    }
  ]
}