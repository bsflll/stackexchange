{
  "title": "Understanding the loop disassembly",
  "link": "https://reverseengineering.stackexchange.com/questions/9068/understanding-the-loop-disassembly",
  "content": "Here is the code of loop that I'm trying to understand the disassembly of it:\n\n```\n#include<stdio.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n   int i, arr[50], num;\n\n   printf(\"  \nEnter no of elements :\");\n   cin >> num;\n\n   //Reading values into Array\n   printf(\"  \nEnter the values :\");\n   for (i = 0; i < num; i++)\n    cin >> arr[i];\n\n   return 0;\n}\n\n```\nAnd this is the disassembly:\n\n\nCan you explain me the highlighted part? what is Var_D8 is used for? Why compiler shifted left the edx?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "858",
  "tags": [
    "disassembly",
    "binary-analysis"
  ],
  "user": "Vlad",
  "time": "Jun 5, 2015 at 7:59",
  "comments": [
    {
      "user": "Dominik Antal",
      "text": "SHL EDX,2 is basically multiplying EDX's value by 4.",
      "time": null
    },
    {
      "user": "Vlad",
      "text": "@DominikAntal for what purpose?",
      "time": null
    },
    {
      "user": "Dominik Antal",
      "text": "I am not sure. However I suspect that this might be some compiler optimization/alignment for the array. Can you tell us the compiler and it's parameters you used? Will the SHL instruction be present if you recompile this code with arr beeing a byte array? You could also attach a dynamic debugger (Ollydbg) and see what is happening exactly by stepping trough your code.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "The key to understanding this is the lea opcode - eax gets the address, not the content, of that stack variable. This is the start of your array. As an integer has 4 bytes on your machine, counter gets multiplied by 4, which is the same as left shifting it by 2 - but the left shift is faster on many processors, which is why it's chosen over the multiply.",
      "time": null
    },
    {
      "user": "Vlad",
      "text": "@DominikAntal dev c++",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "var_D8 is your int arr[50].\n\nYou can recognize it quickly solely by its name : 50 * sizeof(int) = 200 = 0xC8. The next variable on the stack is numb_of_elements which is positionned on -0x10 on the stack, thus we have some memory between -0xD8 and -0x10 that corresponds to the int array.\n\nHere are some explanations about the following instructions :\n\n```\nlea eax, [ebp+var_D8]  ; Get the address of the first element of the array.\nmov edx, [ebp+Counter] ; Get the current element index.\nshl edx, 2             ; Since the size of each element of the array is 4, multiply the index by 4\nadd eax, edx           ; &arr[i] = The address of the current element\nmov [esp], eax         ; Move it on the stack so it can be written by std::cin\n\n```\n",
      "votes": "8",
      "user": "Spl3en",
      "time": "Jun 5, 2015 at 14:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vlad",
          "text": "Great explanation, What is the additional 16 bits between 0x10 and 0xD8 used for?",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@Vlad: what 16 bits? A statement that possibly needs reminding you that not any value here is in \"bits\" â€“ but maybe you confused it with bytes. Still: how did you come to the conclusion that there is any additional space left between 0x10 and 0xD8? That space is exactly the amount needed for the 50 integers that your original code says there should be, nothing more and nothing less.",
          "time": null
        }
      ]
    },
    {
      "content": "The var_d8 is the base position of arr in the stack, the size of type int in your machine is 4, so the position of arr[i] in the stack is calculated by: \n\n",
      "votes": "5",
      "user": "Ta Thanh Dinh",
      "time": "Jun 5, 2015 at 9:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}