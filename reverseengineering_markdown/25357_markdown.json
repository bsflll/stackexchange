{
  "title": "Reverse engineering a aarch64 elf in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/25357/reverse-engineering-a-aarch64-elf-in-ghidra",
  "content": "I am trying to reverse engineer a aarch64 binary to find a password from it. I am able to modify certain functions in Ghidra but got stuck with the attached code snippet. The marked areas in the figure are giving me some trouble understanding the algorithm of the code.\n\n\n\n",
  "votes": "2",
  "answers": 0,
  "views": "888",
  "tags": [
    "ghidra",
    "aarch64"
  ],
  "user": "Sumana Bagchi",
  "time": "Jun 20, 2020 at 10:05",
  "comments": [
    {
      "user": "morsisko",
      "text": "Don't look only at the decompilated code created by Ghidra, it may be wrong and misleading, if you don't fully understand the decompilated function just follow it in assembly code.",
      "time": null
    },
    {
      "user": "Sumana Bagchi",
      "text": "Hi, actually i am not good with assembly language. That's why I am looking into the decompiled version.",
      "time": null
    },
    {
      "user": "morsisko",
      "text": "So this is good moment to get better at assembly. I think that by looking only at the decompilation output it is impossible to tell if it is correct or not.",
      "time": null
    },
    {
      "user": "macro_controller",
      "text": "For your first point: undefined is the variable type (like int, char...) It mostly means that Ghidra couldn't find the type, and not that the variable is undefined. Variable type is a property of C code and not of the assembly - in assembly and CPU there are only memory locations.",
      "time": null
    },
    {
      "user": "Security Beast",
      "text": "Hey I am also working at same code will you mind colab with me on mail or some other option.",
      "time": null
    }
  ],
  "answers_data": []
}