{
  "title": "Is there a perfect method for protecting executable files?",
  "link": "https://reverseengineering.stackexchange.com/questions/3049/is-there-a-perfect-method-for-protecting-executable-files",
  "content": "I tried UPX, ASPack and other protectors, but it seems that my application has a weak protection.\n\nWhat is the best method for protecting your program? Using packers or something else?\n\nAt least for a beginner; because I guess there is no perfect protection in the planet an expert can't reverse.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "1k",
  "tags": [
    "packers",
    "copy-protection"
  ],
  "user": "M. A.",
  "time": "Nov 19, 2013 at 8:46",
  "comments": [
    {
      "user": "perror",
      "text": "possible duplicate of Can I create an object file using gcc that cannot be reverse engineered?",
      "time": null
    },
    {
      "user": "perror",
      "text": "I might be wrong but, your question seems quite similar to this one: \"Can I create an object file using gcc that cannot be reverse engineered?\". Am I wrong ?",
      "time": null
    },
    {
      "user": "M. A.",
      "text": "I don't think they are similar questions; i do not use gcc and i am asking for packing exe; thanks for contribution  @perror I might be wrong but, your comment seems quite similar to the other one",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@perror: I disagree. But on the other hand it may be too broad. I'll not vote to close just yet. But it would be brilliant of the OP to re-read the help and then adjust the question ;)",
      "time": null
    },
    {
      "user": "Jonathon Reinhart",
      "text": "Remember: If the CPU can execute it, an attacker can read it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "No there is not. You can make it harder to reverse engineer, but there's nothing you can realistically do to make it impossible, if there's enough incentive to reverse engineer your application. Professional malware researchers routinely reverse engineer much tougher stuff then anything you'll find publicly.\n\nTheoretically, it may be possible using fully homomorphic encryption, but the practical difficulties make it impossible and undesirable in practice, even if it's theoretically possible.\n\nAs for the best method of protection, I'd say just remove the incentive to reverse engineer it in the first place. I'd be more specific but it's not clear what kind of attacker you're trying to protect against.\n\n",
      "votes": "8",
      "user": "Antimony",
      "time": "Nov 18, 2013 at 5:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "You are absolutely right. I just notice that the homomorphic encryption should not be classified as an obfuscation technique because the semantics of the obfuscated function (in the sense of homomorphic encryption) is not the same as the original function.",
          "time": null
        }
      ]
    },
    {
      "content": "The answer is a clear NO.  Whatever protection you do could still be improved if so desired.\n\nThe question is a little bit unclear, as there are many different protections possible.\n   - protect against reverse engineering\n   - protect against executing on the wrong computer\n   - protect against copying\n   - protect against modifications.\n   - ...\nwhatever method is best for one purpose may not be best for some other purpose.\nWhen you know what you are against, you are really in a better situation to make a good protection.\n\nYou could also say there is no perfect protection, as any protection can be broken.  But maybe that doesn't matter:  maybe the time to brake a particular protection with todays computer-speeds is similar to the age of the universe?  Maybe the protection is just good enough to protect your executable until the protection is no more needed.  Maybe it is just good enough so that an attacker gives up just before suceeding?  Maybe it makes it just hard enough so that an attacker chooses to work on an another program.  Maybe it is broken within minutes after a release...\n\nIn practice: Unless you are a seasoned protection engeneer or very good hacker and reverse engineer, your protection will be broken in surprisingly short time.  On the other side, if you understand what you are doing:  Know what compilers generate, know what is hard to reverse engineer, know the program to be protected, know the machine architecture, build the protection in from the beginning, or use some professional protection tools, understand the applications performance requirements, you can keep more or less everybody out.  There is some debate about that.  Before a protection finally is cracked, protectors err by thinking is too hard; reverse engineers err by thinking it is too easy.  Actually when you create high-end protections you might never know, as attackers for high-end stuff won't tell you if/when they succeeded.\n\nThere are plenty of tools to help making protections, the price range for such tools goes from free to astronomical. I don't know whether this discussion list allows me to name companies.  If you want to find out mine, or any other, google for tamper-proofing.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Dec 27, 2013 at 7:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}