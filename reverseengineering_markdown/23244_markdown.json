{
  "title": "Patched Application causes Acces Violation c0000005",
  "link": "https://reverseengineering.stackexchange.com/questions/23244/patched-application-causes-acces-violation-c0000005",
  "content": "I've been working with this application to remove it's trial limitations.\nBut every byte I change, it throws an acces violation.\n\nPiece of the code:\n\nOriginal:\n\n```\n003354C6 - 0F85 D3000000         - jne 0033559F\n00EA54CC - FF 87 54050000        - inc [edi+00000554]\n00EA54D2 - 83 BF 54050000 0A     - cmp dword ptr [edi+00000554],0A { 10 }\n003354D9 - 0F82 C0000000         - jb 0033559F\n003354DF - 6A 00                 - push 00 { 0 }\n\n```\nPatched\n\n```\n003354D2 - 83 BF 54050000 0F     - cmp dword ptr [edi+00000554],0F { 15 }\n\n```\nNothing else is changed.\nNow the program does run, but after ~4 seconds it crashes.\n\nWhen running through x64dbg it catches the exception, but I don't know what to do with it.\n\n\nAnd run just normally it gives this\n\n\nAny help, tips would be appreciated!\n\n",
  "votes": "1",
  "answers": 2,
  "views": "605",
  "tags": [
    "ollydbg",
    "x64dbg",
    "patching"
  ],
  "user": "Daan Rozebloem",
  "time": "Feb 13, 2020 at 23:12",
  "comments": [],
  "answers_data": [
    {
      "content": "Without more information it's hard to tell for sure.  However, I'd make 2 observations -\n\nThe combination makes me suspect that the increase in loop limit results in an out-of-bounds array access.  e.g. something like this -\n\n```\nstd::array<some_class*,10> widgets;         // or std::vector or C-array etc\n\n.. elsewhere ..\n\nfor( size_t i = 0; i < 10; ++i ) {          // the patch changes 10 to 15\n    widgets[i]->faulting_function( ... );\n}\n\n```\nTo confirm this hypothesis and resolve it you are going to have work backwards from the faulting function to see where ecx comes from and then increase the size of the container.  If however, this is static and in the data section of the exefile then it might not be trivial to do so.\n\n",
      "votes": "2",
      "user": "Ian Cook",
      "time": "Feb 14, 2020 at 23:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "Daan Rozebloem",
          "text": "Thanks for your response. I've looked further at it, and tries to patch some other areas. Still throws acces violation. So it's an anti-tamper measure. I'm new to x32dbg and I need to run a trace from entrypoint till execution with the original file and patched file. Do you know how?",
          "time": null
        }
      ]
    },
    {
      "content": "This is more of a comment-answer, but as I am below 50 reputation, I can only post answers.\n\nIt's something to do with the cmp instruction you are byte-patching.\n\nAn access violation is occuring with the EIP register, which tells the computer what instruction to execute next, and controls the flow of the program. The cmp you are patching is breaking, likely because the what it's returning isn't met for the jb instruction to occur, hence the EIP is throwing an access violation.\n\nHow is the cmp working exactly? Have you reversed that?\n\n",
      "votes": "0",
      "user": "Graham",
      "time": "Feb 14, 2020 at 16:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}