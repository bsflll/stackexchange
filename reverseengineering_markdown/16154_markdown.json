{
  "title": "ARM \"add\" instruction with shift",
  "link": "https://reverseengineering.stackexchange.com/questions/16154/arm-add-instruction-with-shift",
  "content": "I'm trying to understand how ARM add with shift is implemented e.g. \n\n```\nsym.imp.__libc_start_main :                                                                                                                                                           \n\n.plt:0x000082bc 00c68fe2 add ip, pc, 0, 12; after execution ip=0x82c4\n.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20; after execution ip=0x102c4\n.plt:0x000082c4 48fdbce5 ldr pc, [ip, 0xd48]!\n\n```\nI wonder about the line\n\n```\n.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20;\n\n```\nit will add #0x8000 to the ip register. My question is why #0x8000 ?\n\nI'd assume it will be:\n\n```\nip = ip + (8<<20)\n\n```\nso 0x800000 but it's more like\n\n```\nip = ip + (8<<(20-8))\n\n```\nWhy is that? do I always have to substract 8 from the shift ?\n\n",
  "votes": "4",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "assembly",
    "arm"
  ],
  "user": "krusty",
  "time": "Aug 21, 2017 at 9:46",
  "comments": [],
  "answers_data": [
    {
      "content": "It's a Circular Shift on a 32-bit system.\n\nFirst Line:\nThis is simply translated into add ip, pc because rotate operations on #0 is still 0.\nSo it's actually IP = PC  + (0 << 12) = PC + 0\n\nSecond Line:\nLet's take apart the opcodes and understand the problematic line:\nThe opcodes should be read like this because of endianness: e28cca08\n\nThe things is, that it's not 8<<20 but instead it is 8<<(32-12) because we are on a 32-bit system and it is a Circular Shift.\n\nHere's a C code that showing the Circular Shift based on the example from Wikipedia:\n\n```\n#include <stdint.h>  // for uint32_t, to get 32bit-wide rotates, regardless of the size of int.\n#include <limits.h>  // for CHAR_BIT\n\nuint32_t rotl32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &= mask;\n    return (value<<count) | (value>>( (-count) & mask ));\n}\n\nuint32_t rotr32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &= mask;\n    return (value>>count) | (value<<( (-count) & mask ));\n}\n\nint main()\n{\n    printf(\"Result: 0x%x  \n\",rotr32(8,20));\n    return 0;\n}\n\n```\nThe code will output:  \n\n```\nResult: 0x8000\n\n```\n",
      "votes": "4",
      "user": "Megabeets",
      "time": "Aug 21, 2017 at 16:12",
      "is_accepted": true,
      "comments": [
        {
          "user": "krusty",
          "text": "I see so its rotate right and not left, thanks! BTW. typo in the anwser on line \"that it's not 8<<20 but instead it is 8<<(32-12)\" should be 8>>(32-12)",
          "time": null
        }
      ]
    },
    {
      "content": "It is proposed in the official document of arm\n\n\nWhen s = 1 and RD = R15 (PC), this instruction is used to save the status register CPSR, not to do calculation\n\n\n",
      "votes": "1",
      "user": "Dragon",
      "time": "Dec 23, 2020 at 3:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}