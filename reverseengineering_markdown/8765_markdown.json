{
  "title": "Decompile ARM native binary - IDA Pro detects file as Shared Object",
  "link": "https://reverseengineering.stackexchange.com/questions/8765/decompile-arm-native-binary-ida-pro-detects-file-as-shared-object",
  "content": "I am trying to decompile a Android ARM native binary using Hex-Rays IDA Pro. IDA detects the possible formats as \n\nIf I choose ELF for ARM (Shared object), then it correctly decompiles and detect most of the standard functions like tan/sin/cos etc. But when I try to run the remote android debugger, I am getting the alert messages\n\nIf I select Binary file, then it is not decompiling correctly. Also remote android debugger option is not listed in debuggers list.\n\nI am able to execute the binary file directly on an Android ARM emulator.\n\nWhat am I doing wrong? How can I debug a ELF for ARM binary executable file with IDA pro?\n\nEdit: I have already tried with android_server running on an AVD and a physical device. When I try to connect [ELF for ARM (Shared object)], I can see the following output in android_server\n\n```\n=========================================================\n[7] Accepting connection from 127.0.0.1...\n[7] Closing connection from 127.0.0.1...\n\n```\nAre all ARM binary executables detected as shared object? Or is my executable file being misidentified as a .so file?\n\n",
  "votes": "4",
  "answers": 3,
  "views": "19k",
  "tags": [
    "ida",
    "android",
    "arm",
    "decompile"
  ],
  "user": "Joyce Babu",
  "time": "Apr 25, 2015 at 21:26",
  "comments": [
    {
      "user": "diff",
      "text": "If the file is loaded as a Shared Object, then it is a likely a '.so' file and is actually a shared library.  Are you positive that this application can be run independently from the command line (adb)?   If it is a shared library, you will need to attach to a process that can load and call the functionality that you want to step through in IDA.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You'll need to create an Android Virtual Device, copy your ELF program and <IDA directory>\\dbgsrv\\android_server to the virtual device, and run android_server on the virtual device. You can then use IDA to debug the ELF file.\n\nHere are two pages with detailed instructions on how to do this:\n\n\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "Apr 25, 2015 at 21:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "Joyce Babu",
          "text": "I have already tried it with an AVD and a physical device. When I run the remote android debugger, I can see the following output in android_server ========================================================= [7] Accepting connection from 127.0.0.1... [7] Closing connection from 127.0.0.1...",
          "time": null
        }
      ]
    },
    {
      "content": "As I've stated in my comment to your question, the file is loaded as a Shared Object, then it is a likely a '.so' file and is actually a shared library. Are you positive that this application can be run independently from the command line (adb)?\n\nIf it is a shared library, you will need to attach to a process that can load and call the functionality that you want to step through in IDA. You can do this using an \"shim\" application that I created and posted online;\n\nhttps://github.com/rednaga/native-shim\n\nIt include directions on how you would compile it, push it to the device and point IDA Pro at it. This allows you to pass the shared library as an argument and allow it to be \"run\" via IDA Pro. Hopefully this solves your issue.\n\n",
      "votes": "2",
      "user": "diff",
      "time": "Oct 9, 2015 at 22:23",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can check the tutorial on this link. It explains how to debug with both gdb and IDA Pro: http://www.aldeid.com/wiki/Category:Architecture/Android#tab=Android_Remote_debugging\n\n",
      "votes": "0",
      "user": "William Coen",
      "time": "Oct 6, 2015 at 17:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}