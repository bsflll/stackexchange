{
  "title": "Purpose of NOP immediately after CALL instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/8030/purpose-of-nop-immediately-after-call-instruction",
  "content": "There are a lot of\n\n```\n... code ...\ncall sub_...\nnop\n... code ...\n\n```\npatterns in an executable dump I am working on. They appear in the middle of subroutines and I believe don't serve alignment purposes. I am curious about the origins of this construct.\n\nThe program was packed, so I am not sure if call-nop pair was there initially or appeared after unpacking.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "2k",
  "tags": [
    "x86-64"
  ],
  "user": "uranix",
  "time": "Jan 16, 2015 at 13:34",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "It might be part of an anti-debugger scheme - the function could check what's at its return address. If it isn't a nop, it's probably a debugger breakpoint. This defeats debuggers that hide by using something else than the customary int 3 instruction for a breakpoint.",
      "time": null
    },
    {
      "user": "uranix",
      "text": "Interesting trick, but it doesn't seem to be used here - since I spoof the return address as a part of hooking technique and the program works flawlessly.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "Since you already accepted the other answer, i thought the anti-debugging trick probably doesn't apply to you. But i wanted to add it in case someone googles the question in a year or two.",
      "time": null
    },
    {
      "user": "Till Ulen",
      "text": "Here is a similar question on Stack Overflow.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The packer may have replaced an indirect call to an imported function with a direct (relative) call to another function. This would make the instruction shorter by one byte, necessitating the padding with one NOP:\n\n```\nFF 15 ?? ?? ?? ??  call cs:[__imp_foo] ; RIP-relative offs32 indirect\nE8 ?? ?? ?? ??     call foo            ; RIP-relative offs32\n\n```\n",
      "votes": "5",
      "user": "DarthGizka",
      "time": "Jan 16, 2015 at 14:05",
      "is_accepted": true,
      "comments": [
        {
          "user": "uranix",
          "text": "But the call is within the same module. Why use import for that?",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "Some packers ('protectors') stay resident and offer an API to the wrapped executable. The executable is built against a DLL exporting the wrapper API, hence the indirect calls emitted by the compiler, through the address slots in the IAT. But the wrapper may choose to resolve those imports to direct calls during the loading/unpacking process. That way the loaded process won't have a treacherous IAT telling tales. 'Minimal rebuild' debug builds tend to use strange thunking/reserve mechanisms as well, but debug builds are rarely wrapped and shipped...",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "In 32-bit mode all indirect calls to fixed targets can be converted to direct calls (again, to ditch the IAT) but in 64-bit mode that would require trampoline thunks for distances exceeding 2^31 bytes.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "likely just the linker, not packer. blogs.msdn.microsoft.com/russellk/2005/03/20/lnk4217",
          "time": null
        }
      ]
    },
    {
      "content": "It is likely that the first instruction after the NOP is the target of a different branch/jump somewhere else. Jumping to aligned targets is normally preferable both for better i-cache utilization and for better BTB predictions:\n\nhttp://agner.org/optimize/optimizing_assembly.pdf#page=86\n\nThis would make that NOP just a padding to align the following instructions. As pointed out elsewhere, adding padding for this must be done carefully because adding padding blindly is likely to lead to worse i-cache usage and therefore a decrease in performance. Always measure.\n\nnote: in other architectures (i.e. not x86/x86-64) NOPs after calls are sometimes required; since the question is about x86-64 this shouldn't apply.\n\n",
      "votes": "1",
      "user": "CAFxX",
      "time": "May 12, 2018 at 2:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}