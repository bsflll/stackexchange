{
  "title": "Trying to identify a Binary-Search-Tree structure",
  "link": "https://reverseengineering.stackexchange.com/questions/27692/trying-to-identify-a-binary-search-tree-structure",
  "content": "Let's say I make a std::map in C++, and ADDR is their address in memory. When I look at this place in memory I will find a pointer and in ADDR + 4 will be the amount of elements in the container. Now, when I go to [ADDR], I will find 3 more Pointers, the first points to the left most element of the Tree, the second to the Root of the Tree, and the third to the right most element of the Tree. Now here is my question:\n\nWhen I make a std::map<int, int>, and and I go to a Node ( let's take the Root for example ),I will have the it->first in the Node+0x10 and it->second in Node+0x14, but I found a Tree in a software which has the it->first in the Node+0xC and it->second in Node+0x10, and I just can't discover which structure this is. Someone here has any idea what this can be?\n\nExample if I make a std::map<std::string, int>:\n\n\nHere it is the struct I want to identify:\n\n\nPS: This software is developed in C++.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "222",
  "tags": [
    "c++"
  ],
  "user": "ozuromo",
  "time": "May 21, 2021 at 20:35",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "Might be a boost::fusion::map. Are there two bool values at +0x14 and +0x15?",
      "time": null
    },
    {
      "user": "ozuromo",
      "text": "I uploaded a image to the original post. I will try again and let you know.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In the comment to your original question, I mentioned that it might be a boost::fusion::map, and asked whether there were two bool values at +0x14 and +0x15. You then updated your post with an image showing bool-looking values at those locations.\n\nI think my original guess was correct. It seems to be a boost::fusion::container::map. For MSVC's STL implementation, the definition of _Tree_node<T> has been the same for decades:\n\n```\n// Simplified version of MSVC's xtree _Tree_node<T>\ntemplate <typename T>\nstruct _Tree_node {\n  _Tree_node *_Left;   // Pointers to neighbors\n  _Tree_node *_Parent;\n  _Tree_node *_Right;\n  bool _Color;         // Red-Black tree stuff\n  bool _Isnil;\n  T _Myval;            // Node value. For map<K,V>, this is a pair<K,V>. \n                       // For set<T>, this is just a T.\n};\n\n```\nThis is what I see 100% of the time when reverse engineering MSVC code with std::set or std::map, and you can see the real implementation for yourself on the Microsoft STL GitHub repository for xtree.\n\nWhen I reverse engineer boost programs, I notice that the data structure is virtually identical to the MSVC STL, except that the T data comes before the two bool values. It looks like this instead:\n\n```\n// Replica of boost tree nodes\ntemplate <typename T>\nstruct _Tree_node {\n  _Tree_node *_Left;   // Same as before\n  _Tree_node *_Parent;\n  _Tree_node *_Right;\n  T _Myval;            // Data. In MSVC, is after booleans.\n  bool _Color;         // Booleans. In MSVC, is before data.\n  bool _Isnil;\n};\n\n```\nI would link directly to the boost repository showing the comparable class definition, but I have actually never been able to locate it, despite having spent 30+ minutes trying to do so. (If you thought the MSVC STL code was hard to read, try reading boost.)\n\n",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "May 21, 2021 at 20:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "ozuromo",
          "text": "I don't know man, when I look at the memory layout of this boost map it looks really different.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "I don't know either; I'm just giving you my best guess based on my own experiences. I don't even know what program you're looking at.",
          "time": null
        }
      ]
    }
  ]
}