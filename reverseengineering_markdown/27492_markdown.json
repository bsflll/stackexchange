{
  "title": "Finding API in ROM dump (DOS debug)",
  "link": "https://reverseengineering.stackexchange.com/questions/27492/finding-api-in-rom-dump-dos-debug",
  "content": "Have dumped the ROM from a HP 200LX using these instructions:\n\n```\ndebug #Enters the debug mode\nr bx #Reads the bx register and prompts you to enter a new value\n30 #The new value for bx\nr cx #Reads the cx register and prompts you to enter a new value\n0000 #The new value for cx\nn 3M.bin #The name of the dump file\nw 0:0 #Write out the data, starting at offset 0:0\n\n```\nand see some interesting strings in the data, but would like to investigate in a more technically sophisticated manner.\n\nWhat would be the easiest way to find APIs, ie procedure entry points? Am particularly interested in the cc:Mail Vendor Independent Messaging API which I suspect hides there somewhere.\n\nThere is also at least one binary file on the disk which seems related, so ideally I would like a tool that reads both the ROM dump and this file together.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "127",
  "tags": [
    "x86",
    "dos",
    "rom"
  ],
  "user": "Tomas By",
  "time": "Apr 17, 2021 at 9:47",
  "comments": [
    {
      "user": "Hiro",
      "text": "Just remove the rom and put it on rom reader :).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In DOS programs, a common sequence to look for is a sequence of push instructions, interleaved with sub sp,<size-of-local-vars>. This is a typical entry to a function. Whether this is an API entry point is harder to determine without more information. You could use a disassembler tool that is capable of handling MS-DOS images (like Reko, https://github.com/uxmal/reko) to perform a heuristic scan of the binary and then look at procedures with 0 callers. This gives you a starting point.\n\n",
      "votes": "2",
      "user": "John Källén",
      "time": "Apr 17, 2021 at 13:58",
      "is_accepted": false,
      "comments": []
    }
  ]
}