{
  "title": "How does the ldr instruction work on ARM?",
  "link": "https://reverseengineering.stackexchange.com/questions/17666/how-does-the-ldr-instruction-work-on-arm",
  "content": "```\nldr r0, #0x28\n\n```\nWhat is the ldr instruction ? Does it load a string from some offset?\nHow can I find the string/value that is actually loaded ?\n\n",
  "votes": "10",
  "answers": 3,
  "views": "41k",
  "tags": [
    "assembly",
    "arm"
  ],
  "user": "ldr",
  "time": "Apr 9, 2021 at 23:44",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "are you sure it's #0x28 and not =#0x28?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "LDR loads a 32-bit constant (LDRH (halfword): 16 bit, LDRB (byte): 8 bit) from memory into the specified target register (r0 in your example).\n\nSince 32-bit constants cannot be encoded in 32-bit opcodes (or 16-bit for Thumb instructions), the assembler stores the constant in the text segment close to the referencing instruction and then references the value using (usually) PC-relative addressing, i.e. some offset from r15.\n\nThus, ldr is in fact a pseudo instruction. The following code\n\n```\n    .code 32\nmain:\n    ldr r0, =0x12345678\n    bx lr\n\n```\nis translated by the assembler into\n\n```\n00000000 <main>:\n       0:   e51f0000    ldr r0, [pc, #-0]   ; 8 <main+0x8>\n       4:   e12fff1e    bx  lr\n       8:   12345678    .word   0x12345678\n\n```\nAs you can see, the constant referenced in the original ldr instruction is in fact stored at address 0x8 instead of in the instruction itself. The ldr instruction at address 0 then references this value using PC-relative addressing. The offset to the PC is 0 (instead of 8), since the actual PC value is always the address of the current instruction + 8 - this is an effect of the early ARM processor pipeline which has to be preserved for compatibility. \n\n",
      "votes": "8",
      "user": null,
      "time": "Mar 16, 2018 at 0:03",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This can be simply translated into:\n\n```\nr0 = 0x28;\n\n```\nIn ARM assembly, the # marks the immediate values and the r0, r1, ... are registers. The ldr instruction can take the following syntactic forms (yours is the first line):\n\n```\nLDR{type}{cond} Rt, [Rn {, #offset}] ; immediate offset\nLDR{type}{cond} Rt, [Rn, #offset]! ; pre-indexed\nLDR{type}{cond} Rt, [Rn], #offset ; post-indexed\nLDRD{cond} Rt, Rt2, [Rn {, #offset}] ; immediate offset, doubleword\nLDRD{cond} Rt, Rt2, [Rn, #offset]! ; pre-indexed, doubleword\nLDRD{cond} Rt, Rt2, [Rn], #offset ; post-indexed, doubleword \n\n```\n",
      "votes": "5",
      "user": "perror",
      "time": "Mar 12, 2018 at 20:39",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "ldr without = does PC relative loads\n\nThis is true for both labels and numbers.\n\nBut you will of course rarely use numbers directly in your assembly. Maybe you have provided some disassembly without labels?\n\nBoth of the following work in GNU GAS ARMv8. With a label:\n\n```\n    ldr x0, pc_relative_ldr\n    b 1f\npc_relative_ldr:\n    .quad 0x123456789ABCDEF0\n1:\n    /* x0 == 0x123456789ABCDEF0 */\n\n```\nwith an offset:\n\n```\n    ldr x0, 0x8\n    b 1f\n    .quad 0x123456789ABCDEF0\n1:\n    /* x0 == 0x123456789ABCDEF0 */\n\n```\nBoth are equivalent. The assembler just happens to convert the label into the correct offset for you.\n\nGitHub upstream with assertions.\n\nSTR does not have PC-relative addressing like LDR in ARMv8, you just have to calculate the address into registers first: https://stackoverflow.com/questions/28638981/howto-write-pc-relative-adressing-on-arm-asm/54480999#54480999\n\n",
      "votes": "3",
      "user": "Ciro Santilli",
      "time": "Feb 8, 2019 at 9:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}