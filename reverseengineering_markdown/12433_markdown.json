{
  "title": "Collapsing a range into a hidden area, but excluding a possible label at the start of range",
  "link": "https://reverseengineering.stackexchange.com/questions/12433/collapsing-a-range-into-a-hidden-area-but-excluding-a-possible-label-at-the-sta",
  "content": "Suppose you have code like this (and you don't want to shell out the amount for the HexRays decompiler plugin):\n\n```\nloc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n                push    50505050h       ; Tag\n                push    1234h           ; NumberOfBytes\n                push    ebx             ; PoolType\n                call    ds:ExAllocatePoolWithTag\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n\n```\nNow for these cases I tend to write IDC scripts that collapse the push, push, push, call into a single hidden area.\n\nHowever, since the hidden areas in IDA seem to be based on the address and the first push is a \"named location\", the indication that this is a label gets lost when I \"name\" my hidden area with descriptive pseudo-code, like this:\n\n```\n; eax := ExAllocatePoolWithTag(ebx, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n\n```\nand if I can deduce the value of ebx, as would be possible here, I'd even convert that into:\n\n```\n; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n\n```\nIs there any way, short of starting my hidden area after the first push, that would allow me to hide the instructions and replace them with more descriptive pseudo-code, while at the same time retaining the label/name that coincides with the passing of the (last) argument?!\n\nThat is, my goal is to have it something like:\n\n```\nloc_4BEEEF:                             ; CODE XREF: DriverEntry+28j\n; eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP')\n                cmp     eax, ebx\n                jz      short loc_4BEEFF\n\n```\n(the comment behind the loc_4BEEEF label is not important to me, though)\n\nOf course allocation is but one of the cases where this applies and where the first pushed (i.e. last) argument ends up at a named location.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "170",
  "tags": [
    "ida"
  ],
  "user": "0xC0000022L",
  "time": "Apr 13, 2016 at 12:42",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, you can use manual instructions.\n\nFrom https://www.hex-rays.com/products/ida/support/idadoc/651.shtml:\n\nYou can test it through the UI via Edit → Other → Manual instruction... or by pressing Alt+F2.\n\nYou would set the manual instruction for address 0x4BEEEF to eax := ExAllocatePoolWithTag(NonpagedPool, 1234h, 'PPPP'). You could then put the remaining pushes and call into a hidden area, or alternatively, set manual instructions for those push and call instructions with  (blank space) as the manual instruction value.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Apr 16, 2016 at 0:48",
      "is_accepted": true,
      "comments": []
    }
  ]
}