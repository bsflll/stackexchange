{
  "title": "Right way to reverse a VM",
  "link": "https://reverseengineering.stackexchange.com/questions/26593/right-way-to-reverse-a-vm",
  "content": "I'm currently reversing a virtualized sample  that uses a custom VM bytecode. After defeating the anti-disassembly tricks I'm finally faced with the vm_dispatch function. I have to figure out the custom vm opcodes in order to determine what the program actually does. Unlike most other vms, there are no vftables which makes it very hard for me to reverse since there are more than 100 virtual handlers which are not defined as functions (All of the handlers are defined in loc_XXXX code blocks. Example image is below).\n\n\n\nTrying to decompile the vm_dispatch function leaves me with this:\n\n```\n  ...\n  a lot of local variable initialization\n  ...\n  assign vm handlers\n  ...\n  bytecode_array[53] = &loc_4041A3;\n  regs->VIP = 0x6000;  // virtual ip\n  memcpy(bytecode_array + regs->VIP, bytecode, bytecode_size);\n  regs->R5 = -1;\n  vm_code = *(bytecode_array + regs->VIP++);\n  __asm { jmp     [ebp+eax*4+vm_handler_array]; jump to the appropriate handler }// switch jmp\n}\n\n```\nI know it's not fully decompiled because there are more than 100 blocks, each executing a specific vm bytecode. None of that is reflected on the decompiler output.\n\nIt's really time-consuming to go through each loc_XXXX without being able to define VM specific structures like VM and REG and to read the low-level assembly. My question is, is there any:\n\n",
  "votes": "2",
  "answers": 0,
  "views": "602",
  "tags": [
    "ida",
    "disassembly",
    "decompile",
    "virtualizers",
    "vm"
  ],
  "user": "rustam Shirinov",
  "time": "Dec 20, 2020 at 12:20",
  "comments": [],
  "answers_data": []
}