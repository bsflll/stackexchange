{
  "title": "Win32 SEH address",
  "link": "https://reverseengineering.stackexchange.com/questions/18995/win32-seh-address",
  "content": "I have read this kind of code in some tutorials :\n\n```\npush handler ; Address of handler function\npush FS:[0] ; Address of previous handler\nmov FS:[0],ESP ; Install new Handler\n\n```\nI do not understand something: for me the 2 push are not in the good order. \nESP points on old handler ?\nBut all tutorials i have read works like this... so if can anyone explain me...\n\n",
  "votes": "3",
  "answers": 2,
  "views": "730",
  "tags": [
    "seh"
  ],
  "user": "Bob5421",
  "time": "Aug 6, 2018 at 12:40",
  "comments": [],
  "answers_data": [
    {
      "content": "Well the comment: \"Install new handler\" is a bit misleading. What you are installing is EXCEPTION_REGISTRATION_RECORD and if you would check how this structure looks like it would be more obvious that this is the way:\n\n```\ntypedef struct _EXCEPTION_REGISTRATION_RECORD\n{\n     PEXCEPTION_REGISTRATION_RECORD Next;\n     PEXCEPTION_DISPOSITION Handler;\n} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;\n\n```\nFS:[0] also doesn't point to the handler itself but the same EXCEPTION_REGISTRATION_RECORD structure. So the previous record that is at FS:[0] goes to the Next and the one that you are installing goes to the Handler. \n\nNaming is also a bit confusing as we call it the previous handler but it's being set to the Next field. \n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Aug 6, 2018 at 13:00",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "fs:[0] points to ETHREAD\nwhose first is member NtTib which again is a structure\nwhose first member is _EXCEPTION_REGISTRATION_RECORD  \n\n```\n0:000> dt ntdll!_TEB NtTib.* @$thread\n   +0x000 NtTib  : \n      +0x000 ExceptionList : 0x0010f76c _EXCEPTION_REGISTRATION_RECORD\n      +0x004 StackBase : 0x00110000 Void\n      +0x008 StackLimit : 0x0010d000 Void\n      +0x00c SubSystemTib : (null) \n      +0x010 FiberData : 0x00001e00 Void\n      +0x010 Version : 0x1e00\n      +0x014 ArbitraryUserPointer : (null) \n      +0x018 Self   : 0x7ffde000 _NT_TIB\n\n\n\n0:000> ? @$thread\nEvaluate expression: 2147344384 = 7ffde000\n\n```\nthe exception registration record contains the chain of exception handlers\n\n```\n0:000> dx -r2 ((ntdll!_EXCEPTION_REGISTRATION_RECORD *)0x10f76c)\n((ntdll!_EXCEPTION_REGISTRATION_RECORD *)0x10f76c)                 : 0x10f76c [Type: _EXCEPTION_REGISTRATION_RECORD *]\n    [+0x000] Next             : 0x10f91c [Type: _EXCEPTION_REGISTRATION_RECORD *]\n        [+0x000] Next             : 0xffffffff [Type: _EXCEPTION_REGISTRATION_RECORD *]\n        [+0x004] Handler          : 0x77ade115 [Type: _EXCEPTION_DISPOSITION (*)(_EXCEPTION_RECORD *,void *,_CONTEXT *,void *)]\n    [+0x004] Handler          : 0x77ade115 [Type: _EXCEPTION_DISPOSITION (*)(_EXCEPTION_RECORD *,void *,_CONTEXT *,void *)]\n        [Type: _EXCEPTION_DISPOSITION (_EXCEPTION_RECORD *,void *,_CONTEXT *,void *)]\n\n```\nlike this \n\n```\n0:000> !exchain\n0010f76c: ntdll!_except_handler4+0 (77ade115)\n  CRT scope  0, filter: ntdll!LdrpDoDebuggerBreak+32 (77b605ac)\n                func:   ntdll!LdrpDoDebuggerBreak+36 (77b605b0)\n0010f91c: ntdll!_except_handler4+0 (77ade115)\n  CRT scope  0, filter: ntdll!_LdrpInitialize+db (77b40ee4)\n                func:   ntdll!_LdrpInitialize+f0 (77b40ef9)\nInvalid exception stack at ffffffff\n\n```\nwhen you push handler \n\nesp will hold the handler \n\n```\nesp  0x12345678 _SEH_HANDLER\n\n```\nwhen you push fs:[0]  you push a pointer to     \n\n```\ndx -r2 ((ntdll!_EXCEPTION_REGISTRATION_RECORD *)0x10f76c)\n\n0:000> dd esp\n0010f750  779f8159 00000000 00000000 7ffdf000\n\n0:000> a \n77b605a6 push fs:[0]\npush fs:[0]\n77b605ad \n\n0:000> p\n\n0:000> dd esp\n0010f74c  **0010f76c** 779f8159 00000000 00000000\n0010f75c  7ffdf000 00000000 0010f750 77ade115\n\n```\nmov fs:[0] esp\n\nwith this you swap out the old EXCEPTION_REGISTRATION_RECORD WITH NEW ONE\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Aug 6, 2018 at 18:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "Bob5421",
          "text": "What is this interpreter prompt with 0.000> ?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "0:000> is windbg's     prompt",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "Windbg probably",
          "time": null
        }
      ]
    }
  ]
}