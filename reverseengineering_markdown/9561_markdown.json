{
  "title": "Difficulty of reverse engineering based on target",
  "link": "https://reverseengineering.stackexchange.com/questions/9561/difficulty-of-reverse-engineering-based-on-target",
  "content": "I'm not asking about the difficulty of reverse engineering in general, but rather the difficulty of reverse engineering a particular hypothetical target. We'll assume that having the source code requires no reverse engineering and is thus the easiest. How does reverse engineering from object code, bytecode, and machine code compare? How would obfuscation affect the difficulty for each of the four formats? I'm looking for answers that try to quantify these comparisons.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "1k",
  "tags": [
    "byte-code",
    "machine-code"
  ],
  "user": "E Lee",
  "time": "Aug 6, 2015 at 2:26",
  "comments": [
    {
      "user": "E Lee",
      "text": "I meant quantify in terms of time complexity (average and worst case if that is possible). I'm assuming execution time is a major bottleneck.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IMHO, in general, order of difficulty:\n\nMy reasoning is such: \n\nObject code is easiest because it will usually contain lots of symbol or debug information. Even when it doesn't you have a bit of extra knowledge, since you know that all the code in that file relates to one compile object. That's pretty useful to know, and aids analysis (unless it's a giant monolithic program).\n\nMachine code is next easiest because machine architectures are, in general, very well defined and very well documented. All you need is a disassembler and the code is at your mercy.\n\nByte code varies between easy and super hard because it can basically be anything. The byte code by itself is useless without knowledge of the virtual machine that it is written for. For instance, byte code for a JVM is easy, since we have a well defined spec for the JVM. Byte code generated for a Themida VM however, is difficult, because it's randomised and you have to analyze that particular VM before you can interpret the byte code in a meaningful (which itself is quite difficult).\n\nObfuscation almost always makes it harder to analyse the code underneath. But obviously it depends on the level of obfuscation. Some are trivial to bypass with a simple script, some can be bypassed by jumping over the obfuscated code (i.e junk), and others are highly complex and require complex emulators or step-by-step analysis.\n\nIt's pretty hard to quantify these differences without designing a specific multi-criteria analysis framework. \n\n",
      "votes": "3",
      "user": "fileoffset",
      "time": "Aug 6, 2015 at 3:33",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Just to add something from obfuscation perspective, I'd like to add to a good  answer by @fileoffset.\n\nEach code transformation (such as compilation, linking and obfuscation) on the way from the source code to production executable (probably obfuscated) looses some information and optionally adds some white noise . The simplest example of such information is comments in code. The simplest example of noise is indirect calls through PLT/GOT.\n\nThis information may be categorized as follows:\n\nReverse engineering is a process of recovering lost information from the code,\nfrom lowest level up to the highest if it possible at all. This process is based on recognition of standard patterns. This process gets harder if standard patterns are removed. The number or order of magnitude of removed/changed/corrupted/obscured/white-noised standard constructions may be used as an incomplete and bad measure of obfuscation strength. Unfortunately there are no other reasonable measures I know about.\n\nLet's try to re-categorize your formats from this perspective in order of obfuscation removing efforts needed. \n\nThe best (and funniest) heuristic to check and justify the order above is a cost of decompiler (which is automated reverse engineering tool) for corresponding platform, its existence and its quality.\n\nFor example some Java decompilers can do automatic partial deobfuscation and can almost always reconstruct the code on a class method level with cost of license $0\n\nNative code decompiles, in contrary, are either doesn't work well enough (none of them reaches quality of JAD, very old java decompiler) or cost a lot such as Hex Rays decompiler, the only stable working decompiler I know (and I tried a lot of others).\n\nBy the way, there are some articles that trying to measure obfuscation strength, such as this, for example (the article is almost useless for real life binaries, but the list of references is interesting). None of them that I know working with reasonable size of executable under test. Most of them working with not realistic assumptions and/or exploiting specific obfuscation algorithm flaws.\n\n",
      "votes": "2",
      "user": "w s",
      "time": "Aug 6, 2015 at 8:18",
      "is_accepted": false,
      "comments": []
    }
  ]
}