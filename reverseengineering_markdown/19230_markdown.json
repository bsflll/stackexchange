{
  "title": "Debug a windows service entry without windbg",
  "link": "https://reverseengineering.stackexchange.com/questions/19230/debug-a-windows-service-entry-without-windbg",
  "content": "An answer to a similar question here mentions that the entry of a windows service can be patched to allow attaching a debugger (in my case x64dbg). Google searches on the topic are all related to setting a breakpoint in the source.\n\nI'd like to know how exactly this is done when only a binary is available.\n\nI'm trying to port a windows service to Linux. I'm not very familiar with the windows OS. While I can step through normal routines, the service probes the hardware and sets up a few global values. For this reason I need to know exactly what is being sent/received during its initialization.\n\nI did try windbg but found it to be very difficult to use when no source code is present.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "3k",
  "tags": [
    "kernel-mode",
    "x64dbg",
    "windows-10"
  ],
  "user": "Twifty",
  "time": "Sep 2, 2018 at 17:25",
  "comments": [
    {
      "user": "Devender Singh Rana",
      "text": "Does x64dbg support kernel level debugging like windbg?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'll post my own answer here so I can find this again in the future.\n\nOther notes - x64dbg will not stop at the entry point of a running service. Use the command :EntryPoint to display its address and scroll into view.\n\n",
      "votes": "7",
      "user": "ProGM",
      "time": "Oct 9, 2018 at 15:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}