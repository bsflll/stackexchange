{
  "title": "Why have two symbols tables?",
  "link": "https://reverseengineering.stackexchange.com/questions/21619/why-have-two-symbols-tables",
  "content": "Why have two symbol tables if .symtab already contains everything that's in .dynsym ?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "5k",
  "tags": [
    "linux",
    "elf"
  ],
  "user": "fica",
  "time": "Jul 5, 2019 at 20:07",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "AFAIR one is for debug symbols the other for the dynamic linker, but I'd have to read up on it. Perhaps someone else will be faster to answer, though.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The short answer is that the .dynsym table is used by the dynamic linker (also referred to as the runtime loader or RTLD) at program load time to determine which DLLs to map into the address space of the program being loaded into memory. As a result, the .dynsym section is mapped to a loadable segment (specifically, the text segment) and therefore included in the runtime process image in virtual memory when the kernel loads the program segments. As a reflection of this, the Sys V ABI actually requires the dynamic linking array to contain a dynamic symbol hash table, a string table for symbols and library names, and the dynamic symbol table.\n\nOn the other hand, the .symtab section is not needed for process creation, is not mapped to a loadable segment and therefore is not loaded into memory when the program is executed, and so can be removed, along with section information.\n\nDynamic linking and its requirements are discussed in much greater detail in the following articles:\n\nFor more information, see chapter 5 of the Sys V ABI - \"Program Loading and Dynamic Linking\", as well as the LWN article How programs get run: ELF binaries\n. \n\n",
      "votes": "7",
      "user": "julian",
      "time": "Jul 6, 2019 at 4:24",
      "is_accepted": true,
      "comments": []
    }
  ]
}