{
  "title": "How to set breakpoints in GDB on remote target without an executable?",
  "link": "https://reverseengineering.stackexchange.com/questions/17571/how-to-set-breakpoints-in-gdb-on-remote-target-without-an-executable",
  "content": "I'm trying to use a gdb client running on my host machine to talk to a GDB server running on a debug probe.  I can connect using the \"target remote\" command, and I can single step, use monitor commands to restart, etc.  I can not set breakpoints though, because GDB insists there is nothing loaded at the address I specify because I have no executable and no symbol table.  It replies:\n\nI tried providing it the raw binary firmware image, but that didn't work, and besides, I'd like to set hardware breakpoints, and set them anywhere I darn well please, including RAM where things are loaded during initialization, and I'm not about to create an ELF file just to get GDB to get out of the way.\n\nIs there a way to make GDB ignore its symbol table and just set hardware breakpoints?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "gdb"
  ],
  "user": "user19009",
  "time": "Mar 1, 2018 at 19:07",
  "comments": [],
  "answers_data": [
    {
      "content": "facepalm\nYou need to use a * to specify an address to breakpoint at.  I guess gdb was taking my string 0x1010b190 and treating it like a symbol.  \n\nThat's when I get :\n\nBut if I do\n\nit works.\n\n",
      "votes": "3",
      "user": "julian",
      "time": "Mar 1, 2018 at 21:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}