{
  "title": "Dynamically linked shared objects",
  "link": "https://reverseengineering.stackexchange.com/questions/29819/dynamically-linked-shared-objects",
  "content": "From some time I struggle with the dynamically loaded object into process memory. How it exactly works? I found a lot of materials telling that shared objects shares the same code  and has only on copy in the memory. What makes me confused is that processes loads the same\nlibrary under different addresses what is visible with ldd.\n\nldd /bin/ls\n\n...\n\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7d71000)\n\n...\n\nldd /bin/cat\n...\n\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7db5000)\n\n...\n\nOn above, it is visible that the same library is loaded under different process addresses.\n\nFor that moment I do not understand if functions from external shared libraries are loaded to the particular process memory or just make a call to the shared memory?\nWhat I recall is that GOT tables contains addresses to the shared memory which are fulfilled during dynamic linking process, but what is the purpose of loading shared library under specified memory region visible in relocation tables?\n\nI guess that I lack something important but do not know what\n\n",
  "votes": "2",
  "answers": 1,
  "views": "305",
  "tags": [
    "dynamic-linking",
    "shared-object",
    "relocations"
  ],
  "user": "Mateusz Lewandowski",
  "time": "Jan 3, 2022 at 20:59",
  "comments": [],
  "answers_data": [
    {
      "content": "There are two things at work here that might be making it look a bit tricky:\n\nWhen a library is to be loaded (for a new process or dynamically say via dlopen()), the dynamic linker/loader (ld-linux.so) decides where to place it (so that it can update the information from GOT with the actual values). One part of that process is finding out where to put the library text in the context of all other memory regions (application text, data, other requested libraries, stack, ...) and the other is making the addresses at least a little bit unpredictable (ASLR).\n\nThat is, why for different binaries the addresses differ (memory layouts are different), and why they might also differ for consecutive invocations (ASLR).\n\nAs for sharing the library text among several applications, that is where virtual memory comes into play - the library is loaded only once in physical memory, yet it is mapped to virtual address spaces of several processes (at different addresses).\n\nAs a closing remark, this mode of operation is not necessarily the only one - there are various strategies of handling shared libraries.\n\n",
      "votes": "2",
      "user": "peterph",
      "time": "Jan 3, 2022 at 22:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}