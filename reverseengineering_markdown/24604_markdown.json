{
  "title": "Hex Rays Mapping To Wrong Variable",
  "link": "https://reverseengineering.stackexchange.com/questions/24604/hex-rays-mapping-to-wrong-variable",
  "content": "The assembly file has multiple variables which both use the rax register. The decompiler did recognize that at least somewhat, since it did create two variables which use the rax register. However, it did not split up the use of each one properly. Here is the assembly and decompilation, along with a couple comments on what would be a more accurate decompilation.\n\n```\n.text:000000014052DDA0 String__moveTextBackwards proc near\n.text:000000014052DDA0                                         ; CODE XREF: sub_14003E380+86↑p\n.text:000000014052DDA0                                         ; sub_1403CC850+19D2↑p ...\n.text:000000014052DDA0                 mov     rax, [rcx+18h]\n.text:000000014052DDA4                 movsxd  r10, r8d\n.text:000000014052DDA7                 mov     r9, rcx\n.text:000000014052DDAA                 lea     r8, [r10+rdx]\n.text:000000014052DDAE                 cmp     r8, rax\n.text:000000014052DDB1                 jnz     short loc_14052DDBA\n.text:000000014052DDB3                 mov     rax, [rcx]\n.text:000000014052DDB6                 jmp     qword ptr [rax+20h]\n.text:000000014052DDBA ; ---------------------------------------------------------------------------\n.text:000000014052DDBA\n.text:000000014052DDBA loc_14052DDBA:                          ; CODE XREF: String__moveTextBackwards+11↑j\n.text:000000014052DDBA                 ja      short loc_14052DDDF\n.text:000000014052DDBC                 mov     rdx, r10\n.text:000000014052DDBF                 neg     rdx\n.text:000000014052DDC2\n.text:000000014052DDC2 loc_14052DDC2:                          ; CODE XREF: String__moveTextBackwards+3D↓j\n.text:000000014052DDC2                 mov     rax, [r9+8]\n.text:000000014052DDC6                 inc     r8\n.text:000000014052DDC9                 lea     rcx, [rax+rdx*2]\n.text:000000014052DDCD                 movzx   eax, word ptr [rax+r8*2-2]\n.text:000000014052DDD3                 mov     [rcx+r8*2-2], ax\n.text:000000014052DDD9                 cmp     r8, [r9+18h]\n.text:000000014052DDDD                 jbe     short loc_14052DDC2\n.text:000000014052DDDF\n.text:000000014052DDDF loc_14052DDDF:                          ; CODE XREF: String__moveTextBackwards:loc_14052DDBA↑j\n.text:000000014052DDDF                 sub     [r9+18h], r10\n.text:000000014052DDE3                 retn\n.text:000000014052DDE3 String__moveTextBackwards endp\n\n```\nThis gets decompiled to\n\n```\n{\n  wchar_t *stringLength; // rax\n  __int64 numBytesCopy; // r10\n  String *thisCopy; // r9\n  unsigned __int64 v6; // r8\n  wchar_t *pText; // rax\n  wchar_t *pMovedText; // rcx\n\n  stringLength = (wchar_t *)this->stringLength; // This should really be an __int64, but since the compiler assumed this was the same variable that gets returned, it is forced to a wchar_t*\n  numBytesCopy = numBytes;\n  thisCopy = this;\n  v6 = numBytes + a2;\n  if ( (wchar_t *)v6 == stringLength )\n    return (wchar_t *)((__int64 (__fastcall *)(String *, __int64, unsigned __int64, String *))this->vftbl_0_0000000140B4F448->sub_14052DB70)(\n                        this,\n                        a2,\n                        v6,\n                        this);\n  if ( v6 <= (unsigned __int64)stringLength )\n  {\n    do\n    {\n      pText = thisCopy->pString;\n      ++v6;\n      pMovedText = &pText[-numBytesCopy];\n      stringLength = (wchar_t *)pText[v6 - 1];  // From here until the end, the instances where stringLength is used would better be described as pText. But since both pText and stringLength use rax, it decided to use the wrong one here.\n      pMovedText[v6 - 1] = (unsigned __int16)stringLength;\n    }\n    while ( v6 <= thisCopy->stringLength );\n  }\n  thisCopy->stringLength -= numBytesCopy;\n  return stringLength;\n}\n\n```\nIs there a way to change which variable Hex Rays uses in the instances where it chose to use the wrong variable? It has made mistakes similar to this one in other parts of this string class, too.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "172",
  "tags": [
    "ida",
    "hexrays"
  ],
  "user": "sasschary",
  "time": "Apr 4, 2020 at 5:37",
  "comments": [],
  "answers_data": [
    {
      "content": "Not currently, no. There is a command called \"Force new variable\" that can allow you to create distinct variables at the same stack location at different points throughout the function's lifetime, but it does not apply to register variables.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Jan 18, 2021 at 6:21",
      "is_accepted": false,
      "comments": []
    }
  ]
}