{
  "title": "Ida- how to find connection between 2 functions",
  "link": "https://reverseengineering.stackexchange.com/questions/17659/ida-how-to-find-connection-between-2-functions",
  "content": "I have 2 function that I want to find a connection between them.\n\nFor ex.  maybe there is function 5level up that called to those function, or another complicate connection.\n\nHow can I find it with ida or another tool.\n\nLooks on graphes not help me ,I have more than 1000 functions\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida"
  ],
  "user": "Disi1234",
  "time": "Mar 11, 2018 at 17:16",
  "comments": [
    {
      "user": "julian",
      "text": "binary.ninja/2017/10/01/automated-opaque-predicate-removal.html",
      "time": null
    },
    {
      "user": "julian",
      "text": "msreverseengineering.com/blog/2014/6/23/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Take the following \"Hello World!\" program as an example.\n\n```\nvoid Log(char* var) {\nprintf(var);\n}\n\nint main() {\nLog(\"Hello World!  \n\");\n}\n\n```\nAfter compiling with gcc, open that executable in IDA. First choose the function from where you want to start (e.g. main). Go to the main function, right click on the disassembly window (IDA view) and choose Proximity browser. Alternatively press Num -  to open proximity browser or Num + to open graph view. The window will be like this:\n\n\n\nRight click on the main rectangle, select Collapse children and then select Collapse parents. Now right click on the blank area, select Add node by name, choose your second function to which you want to connect main(). Here for example I choose printf(). \n\n\n\nNow right click in the main rectangle, select Find path, choose printf from the find path window. You can see the connection between main and printf and also the intermediate Log function.\n\n\n\n",
      "votes": "7",
      "user": "Biswapriyo",
      "time": "Mar 12, 2018 at 15:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}