{
  "title": "How to perform full MIPS system emulation with QEMU, using the squashfs image and uBoot kernel image?",
  "link": "https://reverseengineering.stackexchange.com/questions/27398/how-to-perform-full-mips-system-emulation-with-qemu-using-the-squashfs-image-an",
  "content": "TL;DR:\n\nNeed tips on emulation of MIPS-BE system using QEMU with the help of squashfs image file and uBoot Kernel image file extracted from the firmware file.\n\nLong Version:\n\n- What I have:\n\n- What I want:\n\nThe router runs an ancient webserver called Boa and this has several publicly available vulnerabilties. But, I have tested each and every one against the target router ; but none of it worked. The firmware is  released on this year; so, I'm almost sure that the vendor has patched them.\nHowever, I have already found an vulnerability, which I've disclosed to the vendor. But, I don't want to stop there, as I am pretty sure that this webserver contains tons of other vulnerabilities.\nMy research found out that vendor has precompiled the webserver binaries as a stripped file and all of the server side processing functions are compiled as a stripped custom library file.\nWhat I want is to dynamically analyze the library file and catch the function calls from the webserver to the library file using gdb.\nTo do that, I have tried the following steps:\n\nAs far as my research went, the only option for me to dynamically analyze the web server is to make the web server run in QEMU with the kernel image and rootfs image I extracted from the firmware.\nSo, what are my next steps? How can I perform a  full system emulation with QEMU, using the squashfs image and uBoot kernel image?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "1k",
  "tags": [
    "firmware",
    "gdb",
    "mips",
    "qemu",
    "router"
  ],
  "user": "secnigma",
  "time": "Apr 4, 2021 at 20:59",
  "comments": [
    {
      "user": "Abdullah Mohamed",
      "text": "The webserver is open source, can't you statically analyze it for vulnerabilities, and check whether they are exploitable using fuzzing? Not exactly what you want, but maybe that's a temp solution until you figure out how to dynamically analyze the executable.",
      "time": null
    },
    {
      "user": "secnigma",
      "text": "Not exactly. The vendor has all the server side scripting compiled as a custom library and Boa server uses that library. So, that means Analyzing the source code of Boa server is not worth it ( Also, I have already done it) .",
      "time": null
    },
    {
      "user": "Abdullah Mohamed",
      "text": "Ah I see, makes sense.",
      "time": null
    }
  ],
  "answers_data": []
}