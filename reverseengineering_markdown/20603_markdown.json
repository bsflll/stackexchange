{
  "title": "Argument types not identified when parsing declarations",
  "link": "https://reverseengineering.stackexchange.com/questions/20603/argument-types-not-identified-when-parsing-declarations",
  "content": "I'm trying to add a dynamic import segment in the IDA database which contains functions names, and I'm applying type information to it, so that I can obtain argument locations by using apply_callee_tinfo when I found a call to this dynamic imported function.\n\nWhile I'm testing I found that for some of the declarations, the argument or return type is not able to identify. The IDA is giving a numeric type.\n\n\n\nThe code used is\n\n```\ndef add_from_declaration(declarations):\n    dyn_imp_seg_loc = 0x10000\n    dyn_imp_seg_loc_end = 0x10000 + len(declarations.keys()) * 4\n    idaapi.add_segm(0, dyn_imp_seg_loc, dyn_imp_seg_loc_end, \"DYN_IMP\", \"XTRN\")\n    t_loc = dyn_imp_seg_loc\n    not_applied = []\n    for proc_name in declarations:\n        decl = str(declarations[proc_name])\n        print(decl)\n        try:\n            name, types, fields = idc.ParseType(decl, 0)\n            success = idc.MakeName(t_loc, str(proc_name))\n            t = idaapi.tinfo_t()\n            til = idaapi.til_t()\n            t.deserialize(til, types, fields)\n            if success:\n                idc.MakeDword(t_loc)\n                success = idaapi.apply_tinfo(t_loc, t, 1)\n                if not success:\n                    not_applied.append(proc_name)\n        except Exception:\n            continue\n        finally:\n            t_loc = t_loc + 4\n    return not_applied\n\n```\ndeclarations is a dict with key as the function name and value as the declaration.\nWhat am I doing wrong in this?\n\nEdit: My approach is based on the answers provided in this thread, In IDA, is there a way to add a reference to a dynamically imported function into the Imports tab?. My problem is not with adding import segment or creating cross references. But I'm unable to add type information to a name.\n\nAs you can see from the image, I'm trying to apply declaration BOOL __stdcall ReleaseMutex(HANDLE a0); at location 0x10000 which is named ReleaseMutex, but IDA is not able to identify BOOL and HANDLE structures even after parsing the declaration successfully.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "200",
  "tags": [
    "ida",
    "binary-analysis",
    "idapython",
    "idapro-sdk",
    "ida-plugin"
  ],
  "user": "naveen namani",
  "time": "Feb 13, 2019 at 5:23",
  "comments": [],
  "answers_data": []
}