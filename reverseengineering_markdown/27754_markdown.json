{
  "title": "Breaking on string access from StringTable (resource)",
  "link": "https://reverseengineering.stackexchange.com/questions/27754/breaking-on-string-access-from-stringtable-resource",
  "content": "If I have a resource like this:\n\n```\nSTRINGTABLE\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\n{\n100,    \"OK\"\n101,    \"Warning\"\n102,    \"Error\"\n103,    \"Name\"\n104,    \"Size\"\n}\n\n```\n1- How can I place a BP (conditional) to break when the string 102 is accessed (x64. I do not know which function is used to load the string)?\n\n2- How could I detect this code in a disassembler such as Ghidra/IDA?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "ghidra",
    "x64dbg",
    "pe-resources"
  ],
  "user": "user1156544",
  "time": "May 31, 2021 at 0:16",
  "comments": [],
  "answers_data": [
    {
      "content": "So if I were you I'd look at the import table first. Check if either LoadStringA or LoadStringW exists and check all instances. The ID parameter for the resource ID should be pretty obvious.\n\nFailing that I'd look for GetProcAddress and friends and whether that is used to get the function LoadString and call it.\n\nFailing that I'd look for the other functions I mentioned above.\n\nFailing that I'd investigate which internal functions inside ntdll.dll are used to implement resource handling and break on those, then investigate the call stack.\n\nIf all of the above fails I'd set a hardware breakpoint on the resource string itself in an attempt to catch the program accessing the string.\n\nNB: in multilingual applications the resource ID would still matter and typically be identical across languages, but there's a chance the string you're after is in another (resource-only) DLL altogether. Such DLLs have no entry point or code and are purely mapped as data. This could be relevant if you come up empty-handed in all but the last approach ... because for the last approach you'll have to set the breakpoint on the right data.\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Jun 1, 2021 at 7:26",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "First, it is necessary to find the right method used to load the string. The standard one is LoadString but, as @0xC0000022L mentioned, there are other options. Check the imports from the PE file and determine which one can be.\n\nIn my case, I found out it was LoadStringW, from user32.dll.\n\nIn x86, you will normally place a BP with a condition on some stack value. In x64 this normally works differently (x64 calling convention):\n\nAccording to the documentation LoadStringW function:\n\n```\nint LoadStringW(\n  HINSTANCE hInstance,\n  UINT      uID,           // --> The identifier of the string to be loaded.\n  LPWSTR    lpBuffer,\n  int       cchBufferMax\n);\n\n```\nTherefore, uID will be loaded in EDX. The right breakpoint for x64dbg is:\n\n```\nbp user32:LoadStringW;bpcnd user32:LoadStringW,EDX==66\n\n```\nNote: 102 is 66h\n\nIn Ghidra this is automatically managed. By looking into the Defined Strings you can find the strings in the resources:\n\n```\n                     pu_Error_140312196                              XREF[12]:\nFUN_1400... (*) ,FUN_140...\n   140312196 05004500...      p_unicode  u\"Error\"    Rsrc String ID 102\n\n```\nFrom here it is trivial to go to the references.\n\n",
      "votes": "0",
      "user": "user1156544",
      "time": "Jun 1, 2021 at 13:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}