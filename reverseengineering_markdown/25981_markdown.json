{
  "title": "How to extract port number from shellcode",
  "link": "https://reverseengineering.stackexchange.com/questions/25981/how-to-extract-port-number-from-shellcode",
  "content": "I saw this shellcode and when they use the connect function they pass the port number 4444:\n\n```\nset_address:\n  push byte 0x05         ; retry counter\n  push 0x0100007F        ; host 127.0.0.1\n  push 0x5C110002        ; family AF_INET and port 4444\n  mov esi, esp           ; save pointer to sockaddr struct\n\n```\nOr in other website like that:\n\n```\n0000001A      push dword 0x5c110002   ; [0x5c110002, 0x81caa8c0, 0x1, 0x0] // sin_port and sin_family (4444, 0x0002)\n\n```\nBut they push 0x5C110002, how they extract 4444 from 0x5C110002?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "261",
  "tags": [
    "assembly",
    "shellcode"
  ],
  "user": "E235",
  "time": "Sep 27, 2020 at 9:17",
  "comments": [],
  "answers_data": [
    {
      "content": "The connect syscall takes a sockaddr structure as an argument, which looks something like this:\n\n```\nstruct sockaddr_in {\n        short   sin_family;\n        u_short sin_port;\n        struct  in_addr sin_addr;\n        char    sin_zero[8];\n};\n\n```\nThey aren't extracting 4444, it's simply passed on the stack as a two-byte short. You are passing to connect, in little-endian order:\n\n",
      "votes": "2",
      "user": "Shane Reilly",
      "time": "Sep 28, 2020 at 0:30",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I found here how to convert it with python.\n\n```\nimport socket\nport = 4444\nhex(socket.htons(port))\nResult : 0x5c11 \n\n```\nThe opposite is like that:\n\n```\nsocket.htons(0x5c11)\n\n```\n",
      "votes": "0",
      "user": "E235",
      "time": "Sep 27, 2020 at 9:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}