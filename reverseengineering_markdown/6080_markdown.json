{
  "title": "How to detect thumb mode in ARM disassembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/6080/how-to-detect-thumb-mode-in-arm-disassembly",
  "content": "I try to build a small disassembler for ARM, and I would like to know how do objdump manage to sort out the normal mode instructions (32-bits instruction wide) from the thumb mode instructions (16-bits instruction wide) without having to look at the t flag in the CPSR.\n\nBut first, let us build a small example and make some experiments on it. \n\nI wrote this small piece of ARM assembly (gas syntax) as basis example:\n\n```\n.arm\n    mov fp, #0\n    moveq   r1, r0\n.thumb\n    mov r0, #0\n    mov fp, r0\n\n```\nThen, I cross-compiled it like this:\n\n```\n$> arm-none-eabi-gcc -Wall -Wextra -mlittle-endian -c -o arm_sample arm_sample.s\n\n```\nAnd, here is the output of objdump on the ARM object file:\n\n```\n$> objdump -d ./arm32_mov\n\n./arm32_mov:     file format elf32-littlearm\n\nDisassembly of section .text:\n00000000 <.text>:\n   0:   e3a0b000    mov fp, #0\n   4:   01a01000    moveq   r1, r0\n   8:   2000        movs    r0, #0\n   a:   4683        mov fp, r0\n\n```\nBut, when I run my tool, I get:\n\n```\n warning: decoder says at (0x8,0):'strmi r2, [r3], r0' : Unknown mnemonic\n   0:   00 b0 a0 e3                 mov fp, #0\n   4:   00 10 a0 01                 moveq   r1, r0\n   8:   ...\n\n```\nMy tool is based on libopcodes (exactly like objdump), so the third instruction is just interpreted as still in 32-bits mode and the two thumb mode instructions are just interpreted as one 32-bits instruction which gives strmi r2, [r3], r0.\n\nMy question is that I don't understand how objdump knows that there is a switch between normal mode to thumb mode. Before discovering this, I thought that this information was only available at execution time though the value of the t flag in the CPSR status register.\n\nI tried to look at the code of objdump but, I didn't see any architecture dependent cases to treat the case of the ARM thumb mode. So, this is still a mystery to me... \n\nAny suggestion is welcome !\n\nEDIT\n\nIn fact, I worked on an object file (compiled with -c option), so there is not so much symbols. But, here is a more detailed output obtained through objdump:\n\n```\n$> objdump -x ./arm32_mov\n\n./arm32_mov:     file format elf32-littlearm\n./arm32_mov\narchitecture: armv4t, flags 0x00000010:\nHAS_SYMS\nstart address 0x00000000\nprivate flags = 5000000: [Version5 EABI]\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000000c  00000000  00000000  00000034  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .data         00000000  00000000  00000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, DATA\n  2 .bss          00000000  00000000  00000000  00000040  2**0\n                  ALLOC\n  3 .ARM.attributes 00000016  00000000  00000000  00000040  2**0\n                  CONTENTS, READONLY\nSYMBOL TABLE:\n00000000 l    d  .text  00000000 .text\n00000000 l    d  .data  00000000 .data\n00000000 l    d  .bss   00000000 .bss\n00000000 l    d  .ARM.attributes    00000000 .ARM.attributes\n\n```\nAnd, here is the output of readelf:\n\n```\n$> readelf -a ./arm32_mov\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              REL (Relocatable file)\n  Machine:                           ARM\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          0 (bytes into file)\n  Start of section headers:          148 (bytes into file)\n  Flags:                             0x5000000, Version5 EABI\n  Size of this header:               52 (bytes)\n  Size of program headers:           0 (bytes)\n  Number of program headers:         0\n  Size of section headers:           40 (bytes)\n  Number of section headers:         8\n  Section header string table index: 5\n\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .text             PROGBITS        00000000 000034 00000c 00  AX  0   0  4\n  [ 2] .data             PROGBITS        00000000 000040 000000 00  WA  0   0  1\n  [ 3] .bss              NOBITS          00000000 000040 000000 00  WA  0   0  1\n  [ 4] .ARM.attributes   ARM_ATTRIBUTES  00000000 000040 000016 00      0   0  1\n  [ 5] .shstrtab         STRTAB          00000000 000056 00003c 00      0   0  1\n  [ 6] .symtab           SYMTAB          00000000 0001d4 000070 10      7   7  4\n  [ 7] .strtab           STRTAB          00000000 000244 000007 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n\nThere are no section groups in this file.\nThere are no program headers in this file.\nThere are no relocations in this file.\nThere are no unwind sections in this file.\n\nSymbol table '.symtab' contains 7 entries:\n   Num:    Value  Size Type    Bind   Vis      Ndx Name\n     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 00000000     0 SECTION LOCAL  DEFAULT    1 \n     2: 00000000     0 SECTION LOCAL  DEFAULT    2 \n     3: 00000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 00000000     0 NOTYPE  LOCAL  DEFAULT    1 $a\n     5: 00000008     0 NOTYPE  LOCAL  DEFAULT    1 $t\n     6: 00000000     0 SECTION LOCAL  DEFAULT    4 \n\nNo version information found in this file.\nAttribute Section: aeabi\nFile Attributes\n  Tag_CPU_arch: v4T\n  Tag_ARM_ISA_use: Yes\n  Tag_THUMB_ISA_use: Thumb-1\n\n```\nSOLUTION (Ian Cook)\n\n```\n$ objdump --syms --special-syms ./arm32_mov\n\n./arm32_mov:     file format elf32-littlearm\n\nSYMBOL TABLE:\n00000000 l    d  .text  00000000 .text\n00000000 l    d  .data  00000000 .data\n00000000 l    d  .bss   00000000 .bss\n00000000 l       .text  00000000 $a   <-- ARM code\n00000008 l       .text  00000000 $t   <-- Thumb code\n00000000 l    d  .ARM.attributes    00000000 .ARM.attributes\n\n```\nJust to be sure, I interleaved arm code, thumb code and arm code again. Here is the dump:\n\n```\n$> objdump --syms --special-syms ./arm32_mov\n\n./arm32_mov:     file format elf32-littlearm\n\nSYMBOL TABLE:\n00000000 l    d  .text  00000000 .text\n00000000 l    d  .data  00000000 .data\n00000000 l    d  .bss   00000000 .bss\n00000000 l       .text  00000000 $a\n00000008 l       .text  00000000 $t\n0000000c l       .text  00000000 $a\n00000000 l    d  .ARM.attributes    00000000 .ARM.attributes\n\n```\nYou can see that the ARM symbol is present twice at 0x0 and 0xc and are surrounding the thumb symbol.\n\n",
  "votes": "12",
  "answers": 3,
  "views": "15k",
  "tags": [
    "disassembly",
    "assembly",
    "arm"
  ],
  "user": "perror",
  "time": "Aug 16, 2014 at 9:23",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "dump the symbol table",
      "time": null
    },
    {
      "user": "perror",
      "text": "In fact, I don't have a lot of symbols because I just wrote directly in assembly and did not linked the final object file (I also did it, but with the exact same result. But, I took the shortest working example).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "An ARM object file should contain symbols identifying the regions that are arm code ($a), thumb code ($t) and literal data ($d).\n\nYou can see these as symbols #4 and #5 in your read-elf output.\ni.e. offset 0 is arm, offset 8 is thumb\n\nobj-dump will output these symbols too if you use the--special-symsoption.\n\nReading the ARM ELF ABI will help you understand what's going on.\n\nIf you are planning to try to disassemble ARM code in an Apple (Mach-O) executable or in a firmware blob then you'll have to use another technique as these symbols won't be present.\n\n",
      "votes": "11",
      "user": "perror",
      "time": "Aug 16, 2014 at 9:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "Excellent. I, indeed, found the symbols you are talking about in my example file. Thanks !",
          "time": null
        },
        {
          "user": "perror",
          "text": "Just to know about the other executable formats, you said Mach-O doesn't have such a symbol, but what about Microsoft Windows PE format ? Does it store such information in the symbols as well ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@perror: IMAGE_FILE_MACHINE_ARMNT assumes Thumb-2. The older ones (for WinCE) use the bit 0, I think.",
          "time": null
        }
      ]
    },
    {
      "content": "This problem is solved in the case when code mapping symbols ($a, $t, $d) are available. However, it's still possible to get (almost) perfect disassembly for Thumb-2 even when symbols are not available.\n\nA promising technique is speculative disassembly which has been discussed in this paper. The tool, Spedi, is open sourced here. It outperforms IDA Pro at least on the limited set of benchmarks used. Spedi can also be instructed to use ARM code mapping symbols, if available, to get the ground truth.\n\nThis tool can be enhanced with the ideas discussed in this paper to address your case of mixed mode disassembly even when symbols are not available.\n\n",
      "votes": "4",
      "user": "Codoka",
      "time": "May 22, 2017 at 9:20",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "When compiling C/C++ code, you can also detect the ARM/thumb status for a function by looking at the symbol table. The lowest bit of the address is set to 1 for Thumb and 0 for ARM instructions. To see this, you can use readelf --symWhen usingobjdump -tandreadelf`, though.\n\n```\n$ readelf --syms foo.elf |grep strlen$\n  4460: 08000195    16 FUNC    GLOBAL DEFAULT    2 strlen\n$ objdump -t foo.elf |grep strlen$\n  08000194 g     F .text  00000010 strlen\n\n```\nNote that the actual address is 8000194 (32-bit aligned), but the symbol table entry (as shown by readelf) says 9000195 (with the LSB set to indicate thumb).\n\nThis approach will only tell you the ARM/thumb status at the start of a function, to see any transitions inside a function you will still need to look at the $t and $a symbols as documented in other answers.\n\nThe meaning of this LSB is defined in the ARM ELF ABI:\n\n",
      "votes": "0",
      "user": "Matthijs Kooijman",
      "time": "Dec 20, 2019 at 10:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}