{
  "title": "Extracting Info from Ghidra Listing Window",
  "link": "https://reverseengineering.stackexchange.com/questions/25322/extracting-info-from-ghidra-listing-window",
  "content": "I have written a script which extracts all the assembly code from a PE using this code in ghidra\n\n```\ninstructionList = []\nfor instr in currentProgram.getListing().getInstructions(True):\n    instructionList.append(instr)\n\n```\nbut the issue is that, is changes all the .DLL calls in the assembly code.\nFor example, if the listing window shows\n\n```\nCALL        dword ptr [->MSVCRT.DLL::signal] \n\n```\nThe output I get is\n\n```\nCALL dword ptr [EBP + -0x14]\n\n```\nIs there a way to get the assembly code exactly as it is in the listing window\n\n",
  "votes": "3",
  "answers": 2,
  "views": "383",
  "tags": [
    "disassembly",
    "ghidra"
  ],
  "user": "Sajjad Zulphekari",
  "time": "Jun 17, 2020 at 11:41",
  "comments": [],
  "answers_data": [
    {
      "content": "So, the answer was provided in the OP's ticket #1994, just transferring it here for the future seekers:\n\n```\nfrom ghidra.program.model.listing import CodeUnitFormat, CodeUnitFormatOptions\ncodeUnitFormat = CodeUnitFormat(CodeUnitFormatOptions(CodeUnitFormatOptions.ShowBlockName.ALWAYS,CodeUnitFormatOptions.ShowNamespace.ALWAYS,\"\",True,True,True,True,True,True,True))\n\ninstructionList = []\nfor instr in currentProgram.getListing().getInstructions(True):\n    instructionList.append(codeUnitFormat.getRepresentationString(inst))\n\n```\n",
      "votes": "4",
      "user": "Paweł Łukasik",
      "time": "Jun 18, 2020 at 12:49",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I came up with this after I read the post but couldn't find a way to make it neat and clean\n\njust recording the thought process as pawel created an answer that is nice\n\n```\n>>> inst = currentProgram.listing.getCodeUnitAt(currentAddress)\n>>> print (inst,inst.getReferencesFrom()[1])\n(CALL qword ptr [0x1c0007050], ->NTOSKRNL.EXE::EtwRegister)\n\n```\nedit a regex substitute hack is what I was thinking of before abandoning it like below\n\n```\n>>> re.sub(\"\\[.*\\]\",'['+inst.getReferencesFrom()[1].toString()+']',inst.toString())\n    u'CALL qword ptr [->NTOSKRNL.EXE::EtwRegister]'\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jun 18, 2020 at 17:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}