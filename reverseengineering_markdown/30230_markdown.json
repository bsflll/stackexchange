{
  "title": "Where can I find the encryption algorithm in source code?",
  "link": "https://reverseengineering.stackexchange.com/questions/30230/where-can-i-find-the-encryption-algorithm-in-source-code",
  "content": "When I submit a Customer Reference ID in an Android Application it POSTs an encrypted string to an API endpoint.\n\nFor example, if I enter the following CR ID :\n\n\"SR-54585482\"\n\nit POSTs the following Encrypted Data:\n\n```\nsplainText : \"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\"\n\n     Count : 31\n\n```\nHow do I find the encryption algorithm in the source code of the APK?\n\nIn which file can I find about this encryption?\n\nDex2Jar File here : https://www.mediafire.com/file/hs0qyirhuk4ygo8/test-dex2jar.jar/file\n\nAPK from here :\nhttps://play.google.com/store/apps/details?id=com.sundirect.sundth\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "encryption",
    "android",
    "java"
  ],
  "user": "Cruzer Blade",
  "time": "Apr 10, 2022 at 17:03",
  "comments": [
    {
      "user": "Robert",
      "text": "First the encrypted text is obviously base64 encoded which hides too much information, better look at it in raw or at least he's encoding. Second, why do you think this is an information security question(there is a stack exchange site dedicated to reverse engineering which would suite much better)? And third have you at least tried to most obvious search for Cipher.getInstance in Jadx when you are searching for a cipher?",
      "time": null
    },
    {
      "user": "schroeder",
      "text": "If you just want to know how to analyse the source code to locate the encryption algorithm, then all of the details about what the algorithm does to specific strings is irrelevant.",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "The screenshot just contains some numbers which are not relevant to any crypto but the way assets and resources are handled. Better option is to share the apk. Also I see references to mono and xamarin in the screenshot so maybe the app is not built in java but .NET.",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "I won't be able to help you privately. You can share the apk here if possible.",
      "time": null
    },
    {
      "user": "sudhackar",
      "text": "The screenshots offer no additional use - only waste space. Please use text to share code in any post.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Based on your screenshots (as already mentioned in comments) - references to mono and xamarin help us understand that the apk is probably built with .NET. In this method the code is probably written as C# and then compiled to DLLs depending on what classes you use in the code.\n\nSee : https://github.com/xamarin/xamarin-android for more details on this.\n\nA simple unzip will confirm that too.\n\n```\n$ unzip ../Sun.apk -d .\n...\nassemblies/xxx.dll\n...\n\n```\nNow most of the static analysis can be based on decompiling .NET dlls which can be done using something like ILSpy.\n\nLooking at the type of dlls\n\n```\n$ file assemblies/xxx.dll\nassemblies/xxx.dll : data\n\n```\nThe dlls are actually compressed with lz4 based on this PR and then can be uncompressed using a script\n\n```\n$ find . -type f -name \"*.dll\" -exec mv {} {}.lz4 \\;\n$ find . -type f -name \"*.lz4\" -exec python Xamarin_XALZ_decompress.py {} {}.dll \\;\n\n```\nNow ILSpy can load and decompile these DLLs.\nBased on the ciphertext you provide it looks like a block cipher such as AES. Look around for that in the decompiled code in Sundirect.dll\nWe find this snippet in Sundirect.Services\n\n```\nusing System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic static string Encrypt(string inputText, string encryptionKey)\n{\n    UTF8Encoding uTF8Encoding = new UTF8Encoding();\n    RijndaelManaged rijndaelManaged = new RijndaelManaged();\n    rijndaelManaged.Mode = CipherMode.CBC;\n    rijndaelManaged.Padding = PaddingMode.PKCS7;\n    rijndaelManaged.KeySize = 128;\n    rijndaelManaged.BlockSize = 128;\n    byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n    byte[] array = new byte[16];\n    int num = bytes.Length;\n    if (num > array.Length)\n    {\n        num = array.Length;\n    }\n    Array.Copy(bytes, array, num);\n    rijndaelManaged.Key = array;\n    rijndaelManaged.IV = array;\n    string result = Convert.ToBase64String(rijndaelManaged.CreateEncryptor().TransformFinalBlock(uTF8Encoding.GetBytes(inputText), 0, uTF8Encoding.GetBytes(inputText).Length));\n    rijndaelManaged.Dispose();\n    return result;\n}\n\n```\nRight Click -> Analyze to see what code uses this function and we see that is is used to encrypt post data\n\n```\n...\nSundirect.Services.LoginAPIServices.LoginAync(string, string) : Task<LoginDetailsOutputDto>\nSundirect.Services.LoginAPIServices.GetUserPasswordAsync(string) : Task<UserPasswordDto>\n...\n\n```\nClick and browse to that location and you see that the key to encrypt is hardcoded\n\n```\n...\nstring value2 = BaseServices.Encrypt(input, \"419201ddtuz3082249879134d06093b95991g6f70d\");\n...\n\n```\nThis can help us write a simple decryptor like this\n\n```\nusing System.Diagnostics;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class Test\n{\n    public static string Encrypt(string inputText, string encryptionKey)\n    {\n        UTF8Encoding uTF8Encoding = new UTF8Encoding();\n        Aes? rijndaelManaged = Aes.Create(\"AesManaged\");\n        rijndaelManaged.Mode = CipherMode.CBC;\n        rijndaelManaged.Padding = PaddingMode.PKCS7;\n        rijndaelManaged.KeySize = 128;\n        rijndaelManaged.BlockSize = 128;\n        byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n        byte[] array = new byte[16];\n        int num = bytes.Length;\n        if (num > array.Length)\n        {\n            num = array.Length;\n        }\n        Array.Copy (bytes, array, num);\n        rijndaelManaged.Key = array;\n        rijndaelManaged.IV = array;\n        string result =\n            Convert\n                .ToBase64String(rijndaelManaged\n                    .CreateEncryptor()\n                    .TransformFinalBlock(uTF8Encoding.GetBytes(inputText),\n                    0,\n                    uTF8Encoding.GetBytes(inputText).Length));\n        rijndaelManaged.Dispose();\n        return result;\n    }\n\n    public static string Decrypt(string inputText, string encryptionKey)\n    {\n        UTF8Encoding uTF8Encoding = new UTF8Encoding();\n        Aes? rijndaelManaged = Aes.Create(\"AesManaged\");\n        rijndaelManaged.Mode = CipherMode.CBC;\n        rijndaelManaged.Padding = PaddingMode.PKCS7;\n        rijndaelManaged.KeySize = 128;\n        rijndaelManaged.BlockSize = 128;\n        byte[] bytes = Encoding.UTF8.GetBytes(encryptionKey);\n        byte[] array = new byte[16];\n        int num = bytes.Length;\n        if (num > array.Length)\n        {\n            num = array.Length;\n        }\n        Array.Copy (bytes, array, num);\n        rijndaelManaged.Key = array;\n        rijndaelManaged.IV = array;\n        byte[] b64 = Convert.FromBase64String(inputText);\n        string result =\n            System.Text.Encoding.UTF8.GetString(rijndaelManaged\n                    .CreateDecryptor()\n                    .TransformFinalBlock(b64,\n                    0,\n                    b64.Length));\n        rijndaelManaged.Dispose();\n        return result;\n    }\n\n    public static void Main()\n    {\n        string key = \"419201ddtuz3082249879134d06093b95991g6f70d\";\n        string e = Decrypt(Encrypt(\"input\", key), key);\n        Debug.Assert(e==\"input\");\n        Console.WriteLine(Decrypt(\"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\", key));\n    }\n}\n\n```\nwhich on running decrypts\n\n```\n\"vpEz/Vm8Yi9v5/fzNE+MDoMIQGZ0vNvjPuX8UNAi26c=\"\n\n```\nto\n\n```\nCR-13261150|03|2022-04-04 22:40\n\n```\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Apr 11, 2022 at 6:48",
      "is_accepted": true,
      "comments": []
    }
  ]
}