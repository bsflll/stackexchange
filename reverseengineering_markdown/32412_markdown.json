{
  "title": "Anyone here capable of removing a launch condition from an old Win32 file having a \"Sony InstallLock\"?",
  "link": "https://reverseengineering.stackexchange.com/questions/32412/anyone-here-capable-of-removing-a-launch-condition-from-an-old-win32-file-having",
  "content": "I would like to extract the BIOS ROM file it contains, but it refuses to run. Even on the model it is intended for since I lack one or more SONY-custom DLLs on my installation. Since Sony decided to delete all old drivers from their website, I am unable to identify what Sony 3rd party thing are missing.\n\n7zip, UniExtract, WinRAR, ResourceHacker...no luck. I could save a binary aside with ResourceHacker but it was only a WRAPPER.EXE file which is of no use. The actual ROM file is not to be found in WRAPPER.EXE.\n\nFile: http://dose.0wnz.at/ftp.vaio-link.com/PUB/VAIO/BIOS/R0232U2.EXE\n(look like Borland Delphi 5/6)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "77",
  "tags": [
    "delphi"
  ],
  "user": "freakedenough",
  "time": "Oct 21, 2023 at 13:05",
  "comments": [],
  "answers_data": [
    {
      "content": "I spend a few minutes looking at this and I can give some hints to help you:\n\nIf you want to patch the binary to always think a debugger is attached you can make the following changes:\n\n```\nfc /b R0232U2.EXE R0232U2-p.EXE\nComparing files R0232U2.EXE and R0232U2-P.EXE\n0004B368: FF 89\n0004B369: 25 C0\n0004B36A: C8 40\n0004B36B: 67 90\n0004B36C: 46 90\n0004B36D: 00 90\n0004B36E: 8B 90\n0004B36F: C0 90\n\n```\nHere's a PowerShell script to make above patch, it assumes the original file is in the same folder as the script. It saves it as R0232U2-patched.EXE in the script folder.\n\n```\nfunction Apply-HexDiff {\n    [CmdletBinding()]\n    param (\n        [string]$OriginalFile,\n        [string]$ModifiedFile,\n        [string[]]$HexDiff\n    )\n    \n    # Read the original file into a byte array\n    $originalData = [System.IO.File]::ReadAllBytes($OriginalFile)\n\n    # Apply changes\n    foreach ($line in $HexDiff) {\n        $tokens = $line -split ':| '\n        $address = [Convert]::ToInt32($tokens[0], 16)\n        $originalByte = [Convert]::ToByte($tokens[2], 16)\n        $modifiedByte = [Convert]::ToByte($tokens[3], 16)\n\n        # Check if original byte matches before applying change\n        if ($originalData[$address] -eq $originalByte) {\n            $originalData[$address] = $modifiedByte\n            Write-Host (\"Patched {0:X2} to {1:X2} at offset {2:X}\" -f $originalByte, $modifiedByte, $address)\n        }\n        else {\n            Write-Host \"Byte at address $($address.ToString('X')) does not match original byte $($originalByte.ToString('X2'))\"\n        }\n    }\n\n    # Write the modified data back into the file\n    [System.IO.File]::WriteAllBytes($ModifiedFile, $originalData)\n}\n\n# Example usage:\n$hexDiff = @(\n    \"0004B368: FF 89\",\n    \"0004B369: 25 C0\",\n    \"0004B36A: C8 40\",\n    \"0004B36B: 67 90\",\n    \"0004B36C: 46 90\",\n    \"0004B36D: 00 90\",\n    \"0004B36E: 8B 90\",\n    \"0004B36F: C0 90\"\n)\n\n$originalFile = Join-Path $PSScriptRoot \"R0232U2.EXE\"\n$patchedFile = Join-Path $PSScriptRoot \"R0232U2-patched.EXE\"\nApply-HexDiff -OriginalFile $originalFile -ModifiedFile $patchedFile -HexDiff $hexDiff\n\n```\n",
      "votes": "1",
      "user": "Remko",
      "time": "Oct 24, 2023 at 10:38",
      "is_accepted": false,
      "comments": []
    }
  ]
}