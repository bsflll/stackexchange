{
  "title": "Use After Free - Example",
  "link": "https://reverseengineering.stackexchange.com/questions/4748/use-after-free-example",
  "content": "Use After Free bugs a getting more severe these days.\n\nI'm planning to demonstrate Use After Free bug exploitation using VTable overwrite. So, I'm trying to create a ATL ActiveX Control which is vulnerable to Use After Free bug using Internet Explorer 9 or 10.\n\nI'm having trouble to come up with a Use After Free vulnerable code that works. Does anyone has experience with this kind of bug and can anyone try to help me.\n\nI'm trying too. If I'm able to get it working, I'll share it here:\n\n```\nclass User\n{\n  public:\n    virtual void SetUsername() { }\n};\n\nclass NewUser:public User\n{\n  char username[20];\n  public:\n    virtual void SetUserName(char* strUsername) { strcpy(username, strUsername); }\n    virtual char* GetUserName() { return username; }\n};\n\nSTDMETHODIMP CATLActivexControl::CreateUser(BSTR sUserName, DOUBLE* retVal)\n{\n  USES_CONVERSION;\n  char *tmp = W2A(sUserName);\n  NewUser *nuser = new NewUser;\n  nuser->SetUserName(tmp);\n\n  free(nuser);\n\n  char *xyz = nuser->GetUserNameW();\n  return S_OK;\n}\n\n```\nI worked on the above example and I have come up with a nicer solution which really triggers Use After Free.\n\nC++ code\n\n```\n#include \"stdafx.h\"\n#include \"ATLStudentActiveXControl.h\"\n\n// Virtual Function defination\nclass User\n{\npublic:\n    virtual void Add(char* uName) = 0;\n    virtual char* GetName() = 0;\n};\n\nclass Student : public User\n{\nprivate:\n    char s_name[30];\n\npublic:\n    virtual void Add(char* uName) { strncpy(s_name, uName, sizeof(s_name)); }\n    virtual char* GetName() { return s_name; }\n\n};\n\nStudent *pStudent = new Student;\n\nSTDMETHODIMP CATLStudentActiveXControl::Add(BSTR sName)\n{\n    USES_CONVERSION;\n    char *tStudent = W2A(sName);\n    pStudent->Add(tStudent);\n    return S_OK;\n}\n\nSTDMETHODIMP CATLStudentActiveXControl::Delete()\n{\n    free(pStudent);\n    return S_OK;\n}\n\nSTDMETHODIMP CATLStudentActiveXControl::GetName(BSTR* sName)\n{\n    char *tStudent = pStudent->GetName();\n    *sName = A2WBSTR(tStudent);\n    return S_OK;\n}\n\n```\nHTML Code\n\n```\n<HTML>\n<HEAD>\n<TITLE>Use After Free - Test Page</TITLE>\n<script language=\"javascript\" type=\"text/javascript\">\n    function UAF() {\n        alert('Start');\n\n        // Assign _studentActiveX variable to ATLStudentActiveXControl\n        var _studentActiveX = document.getElementById(\"ATLStudentActiveXControl\");\n\n        // Add a student\n        _studentActiveX.Add(\"StudentName\");\n\n        // Uncomment the below line to trigger Use After Free vulnerability\n        // _studentActiveX.Delete();\n\n        // Get the name of the added student\n        var _studentName = _studentActiveX.GetName();\n        alert(_studentName);\n\n        // Delete the student\n        _studentActiveX.Delete()\n\n        alert('Done');\n    }\n</script>\n</HEAD>\n<BODY>\n<OBJECT ID=\"ATLStudentActiveXControl\" CLASSID=\"CLSID:9EACDFCF-1A2E-462E-9DF6-53E03936DB22\"></OBJECT>\n<div>\n    <p>Demonstrating <b>Use After Free</b> vulnerability.</p>\n    <input type=\"button\" onclick=\"UAF();\" value=\"Use After Free\" />\n</div>\n</BODY>\n</HTML>\n\n```\nPlease share your views. Thanks.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "debugging",
    "exploit",
    "vulnerability-analysis"
  ],
  "user": "john4tech",
  "time": "Jul 4, 2014 at 5:02",
  "comments": [
    {
      "user": "Dominik Antal",
      "text": "You might have already found link, but here is it, in case you haven't.",
      "time": null
    },
    {
      "user": "john4tech",
      "text": "Yeah, I saw that link. That link is for normal console program, but I'm trying to implement UAF in ATL ActiveX control.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The first thing that comes to my mind is for you to create a class with a few virtual methods, which will be used as the test subject. Then from your ActiveX control you'd expose methods that manipulate the variable, say:\n\nThen whip up a basic script exercising the given methods: allocate, call the methods to make sure it works as designed, free the instance, allocate something else, call virtual methods again and crash the IE instance. ;-) Should do the trick.\n\n",
      "votes": "3",
      "user": "Dmitry Janushkevich",
      "time": "Jul 2, 2014 at 7:11",
      "is_accepted": true,
      "comments": [
        {
          "user": "john4tech",
          "text": "That is what I'm trying to achieve. But I'm planning to implement in such a way that it's easy for exploitation. Here is a small example, that I have created. But still wondering if that wold do the trick.",
          "time": null
        },
        {
          "user": "john4tech",
          "text": "This is what I have created. Use After Free - Rubbish Example",
          "time": null
        },
        {
          "user": "perror",
          "text": "You should have included this code in your question... It would have been way easier to answer from this.",
          "time": null
        },
        {
          "user": "Dmitry Janushkevich",
          "text": "The main point is, the attacker has to get some control between the object being freed (the free(nuser); part in your example) and the dereference of the dangling pointer (I assume, the nuser->GetUserNameW(); call is supposed to be the \"use\" part). In your example, there is no chance for that. It would be better to expose an ActiveX method to solely do the nuser->GetUserNameW(); call, thus splitting the CATLActivexControl::CreateUser method in two. This way, you actually get a chance to overwrite freed memory.",
          "time": null
        },
        {
          "user": "Dmitry Janushkevich",
          "text": "I've edited the answer to reflect that those have to be separate methods.",
          "time": null
        }
      ]
    }
  ]
}