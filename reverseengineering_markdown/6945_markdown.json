{
  "title": "Identify a decryption scheme",
  "link": "https://reverseengineering.stackexchange.com/questions/6945/identify-a-decryption-scheme",
  "content": "I'm trying to identify a decryption scheme used by some licencing mechanism. It took me some time to realize that this was encryption and this is some kind of follow up to this other question of mine : Create key generator algorithm from validation algo\n\nI did some homework and it seems to me that the key characteristics of this decryption are the following:\n\n1-The input is base64 decoded first (with some non standard key tables, but the algo is quite identical)\n2-It is decrypted with a key of the same length as the input. This might be a one time pad or simply a very long key for very short data (both are 512 bits)\n3-Most importantly and what baffles me is that the decryption algo uses NO xor. Every cipher I've seen use XOR at some point in the decryption but there simply is none here.  \n\nPoint 3 is what I really don't understand here. I fail to see how to generate data that can be decrypted without XOR. Using bitshifting and AND/OR masking seems to lose a lot of information during the process.\n\nAre there any known ciphers which match those characteristics?\n\nEdit :\n\nOk here is some deeper description of the algo :\n\nThere is one function that is called multiple times. It first creates 2 tables with the data and the decryption key. The second one is based on the first one.\n\nThis function first creates a table with the data and then processes that data with the decryption key in another table.\n\nThe table created from the data is made by manipulating each 32 bits blocks (master block) from the data with the entire data with additions so that it yields a single unsigned int for each of the 16 32 bit blocks. The call for this looks like this \n\n```\nhash_block(&result1, &result2, current_master_block, data_array[i]);\n\n```\nhash_block looks like this : \n\n```\nvoid hash_block(int *result1, int *result2, unsigned int pMaster_block, unsigned int pCurrent_block)\n{\n    int current_block;\n    unsigned int current_high_short;\n    int master_high_times_master; \n    unsigned int master_high_master_short;\n    int master_high_times_current;\n    unsigned int sum_of_mixes;\n\n    current_block = (unsigned __int16)pCurrent_block;\n\n    current_high_short = pCurrent_block >> 16;\n    master_high_times_master = HIWORD(pCurrent_block) * (unsigned __int16)pMaster_block;\n    master_high_master_short = pMaster_block >> 16;\n    *(_DWORD *)result1 = current_block * (unsigned __int16)pMaster_block;\n    master_high_times_current = current_block * HIWORD(pMaster_block);\n    sum_of_mixes = master_high_times_current + master_high_times_master;\n    *(_DWORD *)(result2) = (unsigned __int16)current_high_short * (unsigned __int16)master_high_master_short;\n    if ( master_high_times_current > sum_of_mixes )\n        *(_DWORD *)(result2) += 65536;\n    *(_DWORD *)result1 += sum_of_mixes << 16;\n    if ( sum_of_mixes << 16 > *(_DWORD *)result1 )\n        ++*(_DWORD *)(result2);\n    *(_DWORD *)(result2) += sum_of_mixes >> 16;\n}\n\n```\nI'm currently cleaning up the code a bit, I'll follow up with more information on how the second part of the algo works\n\nEDIT 2 :\n\nThere is also a very complex function that I can't make sense of which is run 248 times in this function :\n\n```\nvoid __fastcall sub_4D5AC0(int* result, int* serial_copy, unsigned int last_keyitem)\n{\n  unsigned int v3; // edi@1\n  unsigned int v4; // edi@2\n  int v5; // eax@4\n  int v6; // eax@7\n  unsigned int v7; // eax@11\n  //int return_value; // ecx@25\n  int* v10; // [sp+0h] [bp-24h]@1\n  unsigned int v11; // [sp+4h] [bp-20h]@4\n  int v12; // [sp+4h] [bp-20h]@16\n  unsigned __int64 v13; // [sp+4h] [bp-20h]@18\n  int v14; // [sp+8h] [bp-1Ch]@1\n  unsigned int v15; // [sp+8h] [bp-1Ch]@6\n  unsigned int v16; // [sp+10h] [bp-14h]@16\n\n  v3 = *(serial_copy + 1);\n  v14 = *(serial_copy + 1);\n  if ( HIWORD(last_keyitem) == -1 )\n    v4 = v3 >> 16;\n  else\n    v4 = v3 / ((unsigned int)HIWORD(last_keyitem) + 1);\n  v5 = (unsigned __int16)last_keyitem * (unsigned __int16)v4 << 16;\n  v11 = *serial_copy - v5;\n  //if ( -1 - v5 < v11 )\n  if ( ~v5 < v11 )\n    --v14;\n  v15 = v14 - ((unsigned __int16)last_keyitem * (unsigned int)(unsigned __int16)v4 >> 16) - HIWORD(last_keyitem) * (unsigned __int16)v4;\n  while ( 1 )\n  {\n    if ( HIWORD(last_keyitem) >= v15 )\n    {\n      v7 = HIWORD(last_keyitem);\n      if ( HIWORD(last_keyitem) != v15 )\n        break;\n      v7 = (unsigned __int16)last_keyitem << 16;\n      if ( v7 > v11 )\n        break;\n    }\n    v6 = (unsigned __int16)last_keyitem << 16;\n    v11 -= v6;\n    if ( -1 - v6 < v11 )\n      --v15;\n    v15 -= HIWORD(last_keyitem);\n    ++v4;\n  }\n  if ( HIWORD(last_keyitem) == -1 ){\n    //LOWORD(v7) = v15;\n    v7 &= 0xFFFF0000;\n    v7 |= v15 & 0xFFFF;\n  }else{\n    v7 = ((v11 >> 16) + (v15 << 16)) / ((unsigned int)HIWORD(last_keyitem) + 1);\n  }\n  v16 = HIWORD(last_keyitem) * (unsigned __int16)v7;\n  v12 = v11 - (unsigned __int16)last_keyitem * (unsigned __int16)v7;\n  if ( v12 > -1 - (unsigned __int16)last_keyitem * (unsigned int)(unsigned __int16)v7 )\n    --v15;\n  //LODWORD(v13) = v12 - (v16 << 16);\n  v13 &= 0xFFFFFFFF00000000;\n  v13 |= (v12 - (v16 << 16)) & 0xFFFFFFFF;\n  if ( -1 - (v16 << 16) < (unsigned int)v13 )\n    --v15;\n  // HIDWORD\n  v13 &= 0x00000000FFFFFFFF;\n  v13 |= (v15 - (v16 >> 16)) & 0xFFFFFFFF00000000;\n  while ( last_keyitem <= v13 )\n  {\n      v13 &= 0xFFFF0000;\n      v13 |= (v13 - last_keyitem) & 0xFFFF;\n    //LODWORD(v13) = v13 - a3;\n    v13 = (v13 - last_keyitem) & 0xFFFF;\n    if ( (unsigned int)v13 > -1 - last_keyitem ){\n      //--HIDWORD(v13);\n        unsigned __int64 high_word = v13 & 0xFFFFFFFF00000000;\n        high_word++;\n        v13 &= 0x00000000FFFFFFFF;\n        v13 |= high_word;\n    }\n    ++v7;\n  }\n  *result = (unsigned __int16)v7 + ((unsigned __int16)v4 << 16);\n}\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "652",
  "tags": [
    "disassembly",
    "encryption"
  ],
  "user": "Eric",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "DarthGizka",
      "text": "RSA would be one such cipher from the realm of cryptographic algorithms, as opposed to home-brewed ones. However, you haven't given us a lot to go on. What about a bit of code, by way of example? As regards the presumed loss of information: XOR is bijective and its own inverse, but any pair of bijective functions will do, starting with ADD and SUB. And permutation ciphers don't perform any arithmetic ops on the input elements at all, they just shuffle them around. Some home-brewed algos simply shift bits around or rotate them, even across byte/word boundaries.",
      "time": null
    },
    {
      "user": "DarthGizka",
      "text": "Very nice, thank you! Would it be possible to post the disassembly for the two functions on pastebin? Some things are easier to see in the disassembly (less misleading). Some of the bits seem akin to home-brewed big integer math...",
      "time": null
    },
    {
      "user": "Eric",
      "text": "pastebin.com/4yZN2huw",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The first function (the one at .text:004D5A40) computes the 64-bit product of two 32-bit unsigned operands and stores the result through EAX. It is probably some half-assed 16-bit code recompiled with a half-assed 32-bit compiler...\n\nFor a quick test you can paste the disassembly into an __asm block to make it recompilable. Then you can make a call stub to aid experimentation:\n\n```\n__declspec(naked)\nvoid sub_4D5A40 ()\n{\n   __asm\n   {\n/*4D5A40*/                 push    ebx\n... BIG SNIP ...\n/*4D5ABE*/                 pop     ebx\n/*4D5ABF*/                 retn\n   }\n}\n\n__declspec(noinline)\nuint64_t halfassed_mul (uint32_t multiplicand, uint32_t multiplier)\n{\n   uint64_t result;\n\n   __asm\n   {\n      mov   ecx, multiplicand\n      mov   edx, multiplier\n      lea   eax, result\n\n      call sub_4D5A40\n   }\n\n   return result;\n}\n\n```\nThat way you can easily compare/verify the result against the 64-bit product of the parameters.\n\nNote: the listing won't compile unless you change the stack variable references to word ptr [esp]. If you forget the word qualifier then the compiler will assume byte-sized access, and this will b0rken things.\n\nThe compiler used for your target is so poor that Hex-Rays obviously cannot make much sense of the code... You may have more success if you recompile the decompiler output for selected functions with a decent compiler and full optimisation, in order to remove as much redundancy as possible (don't forget __declspec(noinline)). If you decompile that then things should be a lot clearer.\n\nBrowse a couple of the bigint-related topics on Stack Overflow and Code Review to refresh your memory on what bigint code looks like where the rubber meets the road,  especially the contest-related topics where people have to reinvent the wheel instead of just calling some bigint library. For example the topic Sum of digits in a^b. That should make it much easier to recognise related patterns in the code.\n\nUpdate:  I tackled sub_4D5AC0 because I wanted to know what mysterious calculation it performs, but trying to understand the code made my head swim, even after I removed a lot of redundant instructions. So I decided to give it the black box treatment, on the assumption that it performs some basic arithmetic computation. The elementary operations of the code indicated division, in a rather convoluted way. Combined with the signature (64-bit op 32-bit, with 32-bit result), the only op that fitted was MOD. So I pasted the code into an .asm, which compiled without a hitch (kudos to IDA!), made a call stub and fed some inputs into the black box. It turns out that the function divides a 64-bit integer at *EDX by ECX and stores the lower 32 bits of the quotient through EAX.\n\nWhen I wrote a test to verify the function output for some random inputs I typed 1000000000 for the loop count as usual. Biiig mistake, since 1000 calls take about a second already...\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "Eric",
          "text": "The compiler is some older version of Borland C++. Seriously, hat off to you sir. I'll accept your answer for now since it gets me unstuck. I doesn't really answer the question but I can make sense of all of this. Thanks",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "Thanks for posing such an interesting and intriguing question (fingers doing boring stuff at work at this time of the month, brain often idle). If you find more cryptic code and want a couple more eyes on it, it'll be our pleasure to chip in again. bcc32 had a lot of qualities but its code generator/optimiser was only servicable at best and unable to optimise away the effects of substellar coding; this explains the shape of the object code and also the odd register calling convention.",
          "time": null
        },
        {
          "user": "Eric",
          "text": "Wow, that is incredibly insightful of you! I'm also interested in how you proceeded to recompile the asm. Is this a feature from IDA? I tried pasting it to visual studio and enclose it in an __asm {} instruction, but this lead to a lot of pain. Also VS does not like when we play with ebp which borland seems not to care about. I was trying to recompile the disassembly from IDA with like -O3 in VS, then redisassemble it again. Is this something that usually works? You seemed to suggest it does. Finally, it is Borland Delphi and not C++, which leads to more uglyness =)",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "dcc32 and bcc32 supposedly share the same backend, a fact which was much stressed advertising... And bcc32 allowed it to combine C++ with the VCL (true two-way RAD), when MS-based programmers still had to battle with MFC or buy third-party UI kits. Not to mention things like closures which pure C++ still doesn't have. But I digress. The question of reassembling/recompiling IDA output for a bit of hands-on testing deserves a topic in its own right, which I'm sure will elicit interesting answers. Why don't you post a question for it, using this topic's listing as example? I'll definitely respond",
          "time": null
        },
        {
          "user": "rev",
          "text": "Just a note: you can use IDA's appcall to call application functions.",
          "time": null
        }
      ]
    }
  ]
}