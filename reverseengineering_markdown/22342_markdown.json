{
  "title": "IDA Pro, replace exit() with continue;",
  "link": "https://reverseengineering.stackexchange.com/questions/22342/ida-pro-replace-exit-with-continue",
  "content": "This is the function:\n\n```\nloc_BA060:              ; status\nxor     edi, edi\ncall    _exit\n\n```\nHow can one replace exit with continue?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "701",
  "tags": [
    "ida",
    "assembly",
    "x86"
  ],
  "user": "bestupload",
  "time": "Nov 25, 2019 at 13:26",
  "comments": [
    {
      "user": "w s",
      "text": "Can you post the whole function ?",
      "time": null
    },
    {
      "user": "bestupload",
      "text": "This is the whole function.",
      "time": null
    },
    {
      "user": "Rup",
      "text": "Continue where to? The caller - just return (‘ret’), paying attention to the calling convention and whether you need to clear arguments off the stack. Somewhere else? Jump there instead. To the code that follows? Either replace with a jump or nop these instructions out.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "continue statement only works in a loop. Where’s your loop?",
      "time": null
    },
    {
      "user": "Biswapriyo",
      "text": "How about replacing call with nop?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As stated in the comments by others, this depends what you mean exactly by \"continue\". I see this having 2 possible meanings:\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Oct 26, 2019 at 7:12",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If this is the entire function, it seems you would want to nullify it. Make it just not call exit().\n\nYou could do that by simply replacing the call _exit instruction with multiple nop opcodes. In IDA, you'll need to use the patch program feature Under the edit-> patch bytes sub-menu (Notice that in older versions of IDA you had to manually turn it on before it was available, this is no longer the case, though). \n\nYou could either nop the call instruction, the entire function (both call and xor) or even completely remove the call loc_BA060 that leads to the function at 0xBA060.\n\nyour mileage may vary, however, depending on the surrounding code. It may be the case the prior to the call (and the following exit()), eax contained a meaningful value that is used further down the code execution line. If that's the case and you leave the xor eax, eax instruction intact, you'll only avoid the exit() to hit a crash. It's therefore important to review the code surrounding the instruction you wish to remove.\n\nAdditionally, in this specific case, exit() is a no-return-function. This means the compiler is not required to make sure code following the exit() call will function properly because it is never expected to execute and _exit is not expected to return. You may wish to make sure you modify the code in a way that handles that well, although that behavior depends on the compiler and optimizations used.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Nov 25, 2019 at 13:25",
      "is_accepted": false,
      "comments": []
    }
  ]
}