{
  "title": "EIP not in known module, under WOW64",
  "link": "https://reverseengineering.stackexchange.com/questions/11898/eip-not-in-known-module-under-wow64",
  "content": "I'm using WinDbg to debug a program under WOW64 (OS is x64, app is 32-bit).\n\nI came across some indirect call inside the process module (module created by the app and not Windows), and started following it.\n\nStepping into this call gets me to an (*) address which doesn't match any loaded module:\nTried to search manually with lm, didn't see a match.\nUsed !address command with that address, and it says the page is committed but the protection is PAGE_NOACCESS.\nAlso the stack trace gives me a warning \"frame ip not in any known module\".\n\nStepping one more, I get again an indirect call to fs[0c0h] which is a stub for WOW32Reserved (after some more single stepping I get into ntdll.dll. So it's obviously some WOW64 code).\n\nThe question is, where did the code in (*) came from? Who's responsible for it? Why isn't it mapped to any module?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "182",
  "tags": [
    "windows",
    "windbg",
    "amd64"
  ],
  "user": "user5188701",
  "time": "May 31, 2016 at 8:18",
  "comments": [],
  "answers_data": [
    {
      "content": "This sounds like the process has allocated a page for itself, in which it has placed code to run.  It might be a form of obfuscation, or if the file was packed, then the unpacker code might be in that page.  If you're able to step into the code, then it can't be PAGE_NOACCESS, so perhaps the debugger is confused.  The call through fs[0c0h] is the interface for 32-bit code to call kernel code in a 64-bit environment.  Depending on the version of Windows, there is either a far jump at that location (pre-Win10), or some stack manipulation followed by a retf (Win10).\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "May 31, 2016 at 8:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "user5188701",
          "text": "Well.. I hardly believe the debugger is confused, since it's WinDbg.",
          "time": null
        }
      ]
    }
  ]
}