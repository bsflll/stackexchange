{
  "title": "Dumpout Process Memory Layout During Loading Time",
  "link": "https://reverseengineering.stackexchange.com/questions/15971/dumpout-process-memory-layout-during-loading-time",
  "content": "I am working on a project where I need to use LD_PRELOAD to load some libraries into the memory space.\n\nIt's like:\n\n```\n LD_PRELOAD=\"./libapp.so\" ./my_app\n\n```\nDue to certain reasons (I am actually working on some binary hacking), I must know the memory address (not a symbol) of certain functions (let's say, foo) in libapp.so and instrument the binary code of my_app before execution.\n\nHowever, due to ASLR (Address Space Layout Randomization), each time libapp.so would be loaded into different memory address, and I am unable to know the memory address of foo before execution.\n\nI am thinking to somehow intercept the loading time, readout the memory address of libapp.so, perform some instrumentation on my_app with the memory address of foo, and then load my_app into the memory space.\n\nSo here is my question: how to intercept the loading process and acquire the memory address of libapp.so?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "140",
  "tags": [
    "instrumentation",
    "binary-editing"
  ],
  "user": "lllllllllllll",
  "time": "Aug 1, 2017 at 2:22",
  "comments": [
    {
      "user": "blabb",
      "text": "gdb does have pending bps , solib events break etc does none of them work. bp xxx pending on , set solibevents x,y etc  or do you mean you want to do it standalone  if you are using ptrace apis u should be able to intercept loading events too ala gdb",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think that one option could be to use ptrace, for example you can use _dl_open() instead of LD_PRELOAD. Look at this example:\n\nAnother option could be to use gdb for do that, for example you have the possibility to set a pending breakpoint to foo and then run the program.\n\nAnother option could be turn off the ASLR, you can do it using the /proc/sys/kernel/randomize_va_space\n\nTo disable it you can run:\n\n```\necho 0 | sudo tee /proc/sys/kernel/randomize_va_space\n\n```\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "May 28, 2018 at 14:25",
      "is_accepted": true,
      "comments": []
    }
  ]
}