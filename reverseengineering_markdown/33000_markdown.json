{
  "title": "C disassembly - bitwise operations with 0x7FFFFFFFFFFFFFFF and 0x8000000000000000",
  "link": "https://reverseengineering.stackexchange.com/questions/33000/c-disassembly-bitwise-operations-with-0x7fffffffffffffff-and-0x800000000000000",
  "content": "I am using IDA to reverse engineer x86_64 binary file written in C. And pretty often I meet the following in IDA's pseudocode:\n\nWhile researching I figured out that:\n\nBut I can't wrap my head around how to translate these bitwise operations with MIN and MAX into \"normal\" C coding pattern.\n\nCan anybody please explain ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "149",
  "tags": [
    "ida",
    "disassembly",
    "c"
  ],
  "user": "day_that_i_die",
  "time": "Nov 4, 2024 at 9:36",
  "comments": [
    {
      "user": "jsotola",
      "text": "the two functions set and clear the sign bit ... there is no reason to translate the two values to decimal",
      "time": null
    },
    {
      "user": "jsotola",
      "text": "what do you mean by \"normal\" C coding pattern?",
      "time": null
    },
    {
      "user": "day_that_i_die",
      "text": "Could you please explain how these functions set and clear sign bit ?",
      "time": null
    },
    {
      "user": "jsotola",
      "text": "research C bitwise operators",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "When you see such masks - remember these key rules for bitwise arithmetic\nAssume X is unknown, & is bitwise AND, | is bitwise OR\n\nNow look at the mask and its operation. In this case\n\nv7 | 0x8000000000000000LL\n\nThe mask\n\n```\nIn [1]: 0x8000000000000000 == 1 << 63\nOut[1]: True\n\n```\nSo in this case a 64 bit number - with the most significant bit (MSB) set and all other 0s\n\n```\nindex - 63 62 61 ... 2 1 0\nbits  - 1  0  0  ... 0 0 0\n\n```\nThe operation here is | - the bitwise OR\nWe don't know v7 - we can assume it to be X. For individual bits X_i for i index\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n\n```\nWhen bitwise OR is done -\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\n\n```\nWith the rules mentioned above - we can operate X | 1 = 1\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1 \n\n```\nfor the rest unknown bits X | 0 = X\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1    X_62 X_61 ... X_2 X_1 X_0 \n\n```\nWe can see that all of the bits of result is the same as v7 except the MSB which is now 1.\nTherefore, v7 | 0x8000000000000000LL sets the MSB of v7\n\nSimilarly for v7 & 0x7FFFFFFFFFFFFFFFLL\n\nThe mask is 0x7FFFFFFFFFFFFFFFLL, which has all bits set to 1 except for the most significant bit (MSB), which is 0.\n\n```\nindex - 63   62   61   ... 2   1   0\nbits  - 0    1    1    ... 1   1   1\n\n```\nWe want to perform the bitwise AND operation between v7 and the mask.\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n\n```\nWhen we perform the bitwise AND operation:\n\nFor each bit position, we apply the rule X & 1 = X and X & 0 = 0\n\n```\nindex - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 0    1    1    ... 1   1   1\nresult- 0    X_62 X_61 ... X_2 X_1 X_0\n\n```\nThe result retains all bits of v7 except the MSB, which is now 0. Therefore, v7 & 0x7FFFFFFFFFFFFFFFLL clears the MSB of v7\n\nIn signed values the MSB dictates the sign of the number - a set MSB means -ve and unset means a +ve number.\n\nNow if v7 is a signed value - we can see the change in values with this python snippet\n\n```\nIn [9]: x = 0xabcdef1234567890\n\nIn [10]: ctypes.c_uint64(x & 0x7FFFFFFFFFFFFFFF)\nOut[10]: c_ulong(3156441775323117712)\n\nIn [11]: (ctypes.c_int64(x & 0x7FFFFFFFFFFFFFFF).value)\nOut[11]: 3156441775323117712\n\nIn [12]: ctypes.c_int64(x).value\nOut[12]: -6066930261531658096\n\n```\nWith the MSB cleared the signed and unsigned values of the result is same.\n\n```\nIn [13]: (ctypes.c_int64(x | 0x8000000000000000).value)\nOut[13]: -6066930261531658096\n\nIn [14]: (ctypes.c_uint64(x | 0x8000000000000000).value)\nOut[14]: 12379813812177893520\n\nIn [15]: x\nOut[15]: 12379813812177893520\n\n```\nWith the MSB set - the number stays as is if it was a signed negative earlier.\n\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Jun 4, 2024 at 8:12",
      "is_accepted": false,
      "comments": []
    }
  ]
}