{
  "title": "Why Ida pseudo-code translate test as AND?",
  "link": "https://reverseengineering.stackexchange.com/questions/20769/why-ida-pseudo-code-translate-test-as-and",
  "content": "In IDA when disassembling a x86 EXE file there is a line\n\n```\ntest byte ptr [ebp+XXX], cl\n\n```\nBefore this line cl has a value of 0x11\n\nThe Hex-Rays decompiler plugin translates it as if (v10 &0x11).\n\nWhy is test decompiled like and?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "174",
  "tags": [
    "ida",
    "assembly",
    "x86",
    "hexrays"
  ],
  "user": "psudoCode",
  "time": "Mar 5, 2019 at 21:08",
  "comments": [
    {
      "user": "David",
      "text": "It seems likely you are referring to the Hex-Rays decompiler. This integrates very well with IDA and is by the same company. However, they are separate products and you can use IDA without a decompiler. It might be worth updating your question.",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "did  you ever read the test instruction's manual, or at least google for x86 test instruction?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "test is basically an and instruction except it doesn't update the left operand.\nIn the other hand, cmp is the equivalent of sub instruction except it doesn't update the left operand.\n\nTo sum up:\n\n```\nif (v & n)\n\n```\nIs compiled as test instruction.\n\n```\nif (v == n)\n\n```\nIs compiled as cmp instruction (or test reg, reg is n is 0x0)\n\n```\nv = a & n\n\n```\nIs compiled as and instruction.\n\n",
      "votes": "6",
      "user": "wisk",
      "time": "Mar 4, 2019 at 14:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}