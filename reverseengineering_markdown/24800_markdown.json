{
  "title": "NULL character (same code) different locations",
  "link": "https://reverseengineering.stackexchange.com/questions/24800/null-character-same-code-different-locations",
  "content": "I'd like to know why NASM generates different opcodes for the same code, when it's in the begin or end of the program?\nThis question is important because I found NULL characters when I compile the jumper label in the begin of the program, but when I write the same code in the end, it changes and there's no NULL character there. Could anyone give me a hint about it? I have here the NASM code, and the output of objdump.\n\nNASM code (jumper label in the begin of code):\n\n```\nglobal _start\n\nsection .text\n\njumper:\n        call shellcode\n        msg: db \"Hello World\",0xA\n\n_start:\n        jmp short jumper\n\nshellcode:\n        xor edx, edx\n        mov dl, 0xc\n\n        pop ecx\n\n        xor ebx, ebx\n        inc bl\n        xor eax, eax\n        times 0x04 inc al\n        int 0x80 \n\n        xor ebx, ebx\n        xor eax, eax\n        inc eax\n        int 0x80\n\n```\nIt has NULL characters as we can see...\n(objdump results) Generate with above code:\n\n```\nhello-shellcode:     file format elf32-i386\n\n\nDisassembly of section .text:\n\n08049000 <jumper>:\n 8049000:       e8 0e 00 00 00          call   8049013 <shellcode>\n\n08049005 <msg>:\n 8049005:       48                      dec    eax\n 8049006:       65 6c                   gs ins BYTE PTR es:[edi],dx\n 8049008:       6c                      ins    BYTE PTR es:[edi],dx\n 8049009:       6f                      outs   dx,DWORD PTR ds:[esi]\n 804900a:       20 57 6f                and    BYTE PTR [edi+0x6f],dl\n 804900d:       72 6c                   jb     804907b <shellcode+0x68>\n 804900f:       64                      fs\n 8049010:       0a                      .byte 0xa\n\n08049011 <_start>:\n 8049011:       eb ed                   jmp    8049000 <jumper>\n\n08049013 <shellcode>:\n 8049013:       31 d2                   xor    edx,edx\n 8049015:       b2 0c                   mov    dl,0xc\n 8049017:       59                      pop    ecx\n 8049018:       31 db                   xor    ebx,ebx\n 804901a:       fe c3                   inc    bl\n 804901c:       31 c0                   xor    eax,eax\n 804901e:       fe c0                   inc    al\n 8049020:       fe c0                   inc    al\n 8049022:       fe c0                   inc    al\n 8049024:       fe c0                   inc    al\n 8049026:       cd 80                   int    0x80\n 8049028:       31 db                   xor    ebx,ebx\n 804902a:       31 c0                   xor    eax,eax\n 804902c:       40                      inc    eax\n 804902d:       cd 80                   int    0x80\n\n```\nNow I'll change the jumper label to the end:\n\n```\nglobal _start\n\nsection .text\n\n_start:\n        jmp short jumper\n\nshellcode:\n        xor edx, edx\n        mov dl, 0xc\n\n        pop ecx\n\n        xor ebx, ebx\n        inc bl\n        xor eax, eax\n        times 0x04 inc al\n        int 0x80 \n\n        xor ebx, ebx\n        xor eax, eax\n        inc eax\n        int 0x80\n\njumper:\n        call shellcode\n        msg: db \"Hello World\",0xA\n\n```\n(objdump generate with above code) It hasn`t NULL character:\n\n```\nobjdump -d hello-shellcode -M intel\n\nhello-shellcode:     file format elf32-i386\n\n\nDisassembly of section .text:\n\n08049000 <_start>:\n 8049000:       eb 1c                   jmp    804901e <jumper>\n\n08049002 <shellcode>:\n 8049002:       31 d2                   xor    edx,edx\n 8049004:       b2 0c                   mov    dl,0xc\n 8049006:       59                      pop    ecx\n 8049007:       31 db                   xor    ebx,ebx\n 8049009:       fe c3                   inc    bl\n 804900b:       31 c0                   xor    eax,eax\n 804900d:       fe c0                   inc    al\n 804900f:       fe c0                   inc    al\n 8049011:       fe c0                   inc    al\n 8049013:       fe c0                   inc    al\n 8049015:       cd 80                   int    0x80\n 8049017:       31 db                   xor    ebx,ebx\n 8049019:       31 c0                   xor    eax,eax\n 804901b:       40                      inc    eax\n 804901c:       cd 80                   int    0x80\n\n0804901e <jumper>:\n 804901e:       e8 df ff ff ff          call   8049002 <shellcode>\n\n08049023 <msg>:\n 8049023:       48                      dec    eax\n 8049024:       65 6c                   gs ins BYTE PTR es:[edi],dx\n 8049026:       6c                      ins    BYTE PTR es:[edi],dx\n 8049027:       6f                      outs   dx,DWORD PTR ds:[esi]\n 8049028:       20 57 6f                and    BYTE PTR [edi+0x6f],dl\n 804902b:       72 6c                   jb     8049099 <msg+0x76>\n 804902d:       64                      fs\n 804902e:       0a                      .byte 0xa\n\n```\nFirst shellcode:\n\"\\xe8\\x0e\\x00\\x00\\x00\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x0a\\xeb\\xed\\x31\\xd2\\xb2\\x0c\\x59\\x31\\xdb\\xfe\\xc3\\x31\\xc0\\xfe\\xc0\\xfe\\xc0\\xfe\\xc0\\xfe\\xc0\\xcd\\x80\\x31\\xdb\\x31\\xc0\\x40\\xcd\\x80\"\n\nSecond shellcode:\n\"\\xeb\\x1c\\x31\\xd2\\xb2\\x0c\\x59\\x31\\xdb\\xfe\\xc3\\x31\\xc0\\xfe\\xc0\\xfe\\xc0\\xfe\\xc0\\xfe\\xc0\\xcd\\x80\\x31\\xdb\\x31\\xc0\\x40\\xcd\\x80\\xe8\\xdf\\xff\\xff\\xff\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x0a\"\n\n",
  "votes": "0",
  "answers": 1,
  "views": "72",
  "tags": [
    "shellcode",
    "nasm"
  ],
  "user": "bugsam",
  "time": "Apr 23, 2020 at 0:14",
  "comments": [],
  "answers_data": [
    {
      "content": "CALLs and JMP (Jxx) are relative.\n\nIn your first code block the \"jumper\" code jumps forward 0e bytes, which is \"0e 00 00 00\" in little endian.\n\nIn your second code, \"jumper\" appears after \"shellcode\", so the CALL backwards is a negative int, and results in your case in \"df ff ff ff\".\n\n",
      "votes": "0",
      "user": "Yotamz",
      "time": "Apr 23, 2020 at 8:27",
      "is_accepted": true,
      "comments": []
    }
  ]
}