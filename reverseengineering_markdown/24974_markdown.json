{
  "title": "How to improve Ghidra decompilation of SSE instructions?",
  "link": "https://reverseengineering.stackexchange.com/questions/24974/how-to-improve-ghidra-decompilation-of-sse-instructions",
  "content": "In practicing Ghidra on a few standard library functions in some executable, I have generally had trouble getting good decompilation output where SSE registers are used as an optimization. I've tried searching for a variety of keyword combinations both here and on the rest of the internet but could not find anything relevant.\n\nThe below examples are from x64 code without debug symbols, so function/struct/variable names are my doing. The type choices did not change/improve the demonstrated issues - but maybe I'm just doing it wrong. I also tried to keep enough context for readability, but I couldn't locate any guidelines this site has in that regard.\n\nHow can I make the decompiled code more readable in these cases (or avoid the clutter in the first place)?\n\nI'd tag this question with SSE if it already existed as a tag, but I'm reluctant to create it since I don't know this community well enough yet. And of course: Improvement suggestions welcome!\n\n",
  "votes": "5",
  "answers": 1,
  "views": "3k",
  "tags": [
    "decompilation",
    "ghidra"
  ],
  "user": "NurTuring",
  "time": "May 11, 2020 at 0:10",
  "comments": [],
  "answers_data": [
    {
      "content": "One approach to deal with this would be Function Identification feature to automatically detect those functions and just rename them to memcpy accordingly. The issue is that, unlike IDA, Ghidra doesn't ship with a rich library of signatures, though unlike IDA it at least seems feasible to generate your own[0]\n\nYou could look into https://blog.threatrack.de/2019/09/20/ghidra-fid-generator and the related github repos with the code that generate the signatures and the already generated signatures and see if those work for your case.\n\n[0] At least I personally never managed to figure out how this works with IDA\n\n",
      "votes": "1",
      "user": "Florian Magin",
      "time": "May 11, 2020 at 14:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "NurTuring",
          "text": "I appreciate the suggestion for improving my workflow - indeed, I was wondering how many times I'll have to reverse standard library functions in the future. I'm much more curious how to improve the actual decompilation results though. E.g. the string moving noise is really distracting when trying to figure out what some larger function does, is there something to be done about that?",
          "time": null
        },
        {
          "user": "Florian Magin",
          "text": "Do you mean cases of an explicit memcpy being inlined or C++ initialization shenanigans? For the former there is some feature to declare part of a function as another function that has been inlined (can't quite remember how, might be worth a separate question). For the latter you might need separate scripts or plugins. In that case, could you edit your question with an example of the decompiled code vs the code you would imagine as an ideal result (optionally vs the actual source) ?",
          "time": null
        }
      ]
    }
  ]
}