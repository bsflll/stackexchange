{
  "title": "How can i recognize the length of this array based on the assembly instruction?",
  "link": "https://reverseengineering.stackexchange.com/questions/26858/how-can-i-recognize-the-length-of-this-array-based-on-the-assembly-instruction",
  "content": "\n\nIn the sourcecode i can clearly see that the Array called \"buf\" is 32 byte long since 1 char = 1 byte\nI assume that the array starts at the address [rbp-0x30] and the argv[ ] is stored in the register rsi and moved onto the stack in line 22.\nHere are the questions:\n\n",
  "votes": "2",
  "answers": 2,
  "views": "492",
  "tags": [
    "gdb",
    "buffer-overflow"
  ],
  "user": "Fluctuation23",
  "time": "Jan 24, 2021 at 2:22",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Could you replace the screenshot by text? You can use code formatting so itâ€™s displayed nicely.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think it's possible to estimate the length of the local variable(s) using the instruction at main+0x04 which is sub rsp, 0x30, that's the space the function allocates  on the stack for local variables. In your case it's (0x30) 48 bytes, so we now know that the local variables are all 48 bytes or less.\nargc was provided to the main() function through the edi register as we can see on main+0x08, which is moved into the allocated stack space at offset -0x24.\n\nWe know that argc is 4 bytes in length due to the mov instruction at main+0x08, so I imagine the stack is now aligned as follows:\n\n\n\n\n",
      "votes": "1",
      "user": "Abdullah Mohamed",
      "time": "Feb 23, 2021 at 10:55",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "",
      "votes": "0",
      "user": "R4444",
      "time": "Jan 24, 2021 at 3:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}