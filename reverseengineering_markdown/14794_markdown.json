{
  "title": "Is it possible to debug an ELF file with a Windows-based disassembler?",
  "link": "https://reverseengineering.stackexchange.com/questions/14794/is-it-possible-to-debug-an-elf-file-with-a-windows-based-disassembler",
  "content": "Problem : How can I debug an ELF file in MS Windows? is it possible?\n\nScenario :\n\nI have an ELF file compiled to work on hardware with VXWorks 5.5 OS and SH4 CPU. IDA68 is able to disassemble the file and correctly detects SH4 instructions although looks like IDA is unable to debug it with its debugger(the debugger icon is grey), and without the ability to debug the assembly it is almost impossible to understand.\n\nAm I missing something here?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "15k",
  "tags": [
    "ida",
    "windows",
    "debugging",
    "elf"
  ],
  "user": "Iman Rosstin",
  "time": "Mar 3, 2017 at 13:24",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "what do you mean by \"trace the assembly\"? debug?",
      "time": null
    },
    {
      "user": "Iman Rosstin",
      "text": "@IgorSkochinsky I mean IDA debugger is disabled while working with ELF files, It can not trace the assembly code that is just created out of elf file. (Edited the question to make it clear)",
      "time": null
    },
    {
      "user": "Iman Rosstin",
      "text": "@IgorSkochinsky yes Igor, I meant debug.",
      "time": null
    },
    {
      "user": "julian",
      "text": "@Zich IDA allows for cross-platform debugging by using remote debugging servers. You will not be able to load an ELF binary into memory on your local Windows machine since it does not conform to the PE format",
      "time": null
    },
    {
      "user": "julian",
      "text": "@Zich Debian Sid sh4 image for QEMU",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You cannot run ELF files on Windows because the system offers a completely different architecture and API for programs to use. For example, the system calls in windows are different from the system calls in Linux (those which your elf will try to call). Also, if Windows could understand and try to load the ELF, your file will try to link to system libraries which do not exist under windows (.so files instead of windows dlls).\n\nAnother reason that the files will not run under windows is that the binary format is different and Windows will not be able to understand how to run the ELF file.\n\nThere are ways in which you can run Linux software under windows but they require emulation (Virtual machines, Bash on Ubuntu on Windows etc.)\n\n",
      "votes": "2",
      "user": "lightnet",
      "time": "Mar 2, 2017 at 21:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "Iman Rosstin",
          "text": "I already know that I can not run ELF files under Windows. I am looking forward to trace/debug it using IDA and since the vxworks is an open system which is used in embeded systems, it is far from mind if it has something other than POSIX compatible that windows can not resolve, I expect IDA  to interpret the interupts and other exceptions to windows however a register watch is enough I believe!",
          "time": null
        },
        {
          "user": "lightnet",
          "text": "The only way to trace or debug the program is to run it. The options suggested above may be what you're looking for (using remote connection to a debug server).",
          "time": null
        },
        {
          "user": "Iman Rosstin",
          "text": "I am writing down registers on a paper and update each manually by running instructions one by one in my mind. Do I have a vxworks in my mind? Ofcourse not! I just need a register watch which is what tracing mean in embeded systems I guess.",
          "time": null
        },
        {
          "user": "Kerim Can Kalıpcıoğlu",
          "text": "I think Bash on Windows run real Linux executables with Windows Subsystem for Linux. Another way can be decompiling with IDA and compiling with Subsystem for UNIX-based Applications (only server-class) in Windows again. It seem impossible, it is not widely used BSD or Linux executable.",
          "time": null
        }
      ]
    },
    {
      "content": "ELF files can be debugged using IDA debugger if you have the same CPU and OS that were used to build them, installed locally or have them in a remote machine.\n\nIn case you don't, you're still able to debug the file but only if the compiler have debugging data in  DWARF standard included in the file.\n\nAnother option that SVS suggest me, is to set up an emulator with OS and Arctitecture you need trace the file over there which is a good practical way I believe.\n\nNot all ELF files have DWARF debugging data. Particularly, those that are not suppose to be reverse engineered.\n\n",
      "votes": "2",
      "user": "Iman Rosstin",
      "time": "Mar 15, 2017 at 13:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "\"if the debugger is grey it means the ELF file which is being disassembled does not contain debugging data in DWARF format\" <- wrong",
          "time": null
        },
        {
          "user": "julian",
          "text": "how debuggers work",
          "time": null
        },
        {
          "user": "Iman Rosstin",
          "text": "@IgorSkochinsky edited, but I still think grey means no DWARF in my case. do you know any other reason that makes it grey(please just in my case)? Cause I need to debug the file very bad!",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "The button is grey if there is no debugger module available for the specific file format/processor combination. Lack of DWARF info does not prevent debugging in IDA.",
          "time": null
        }
      ]
    }
  ]
}