{
  "title": "IDA SDK - can't understand the output of displacement query functions?",
  "link": "https://reverseengineering.stackexchange.com/questions/27142/ida-sdk-cant-understand-the-output-of-displacement-query-functions",
  "content": "OK so I want to parse x86 instructions with IDA SDK. However I can't understand the output, I have this code (that is executed after decode_insn at each operand that is present (type not 0)):\n\n```\n//op is an operand op_t of some insn_t\n//ea1 is current address\n                if(has_displ(op)) {\n                    \n                    msg(\"%x  \n\", ea1);\n\n                    msg(\"%d  \n\", x86_base_reg(instr, op));\n\n                    msg(\"%d  \n\", x86_index_reg(instr, op));\n\n                    msg(\"%d  \n\", x86_scale(op));\n\n                    msg(\"%d  \n\", op.addr);\n                }\n\n```\nAnd this dissasembly:\n\n```\n.text:0040AE64                 lea     edx, ds:0[eax*4]\n.text:0040AE6B                 lea     edi, [eax+eax*2]\n\n```\nAnd the output I get for each of the above instruction is:\n\n```\n40AE64\n-1\n0\n2\n0\n\n```\nFor the second one it doesn't even get into the if. My question is why? And also why 2 in the output is not 4?\n\nAdditionally I would greatly appreciate if you could point me to some open source project that utilizes the API for fully parsing an x86 instruction, for reference.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "122",
  "tags": [
    "ida",
    "c++",
    "idapro-sdk"
  ],
  "user": "rec",
  "time": "Mar 2, 2021 at 22:30",
  "comments": [],
  "answers_data": [
    {
      "content": "Instruction encoding and decoding is one of the least user-friendly parts of the SDK. Since they have to support so many processor architectures with the same set of data types, they basically have to get creative with how they store information about the operands. It does not always make logical sense, but it really doesn't have to -- there are few requirements that really need to be satisfied beyond that the data can be stored and retrieved, and that the processor module knows what to do with it.\n\nThat said, you can gain familiarity with how things work on a given architecture by writing a plugin/IDAPython script to dump the operand information. I wrote such a script, which you can find linked in the second-to-last paragraph here.\n\nTo your specific questions:\n\n",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "Mar 4, 2021 at 2:55",
      "is_accepted": false,
      "comments": [
        {
          "user": "rec",
          "text": "Don't want to jinx it as I haven't had the most great experience with the SDK about anything so far but the Hex Rays microcode looks promising ( I mean I'm looking into that direction not like a replay to this answer - which is great on its own). Thanks for the explanation.",
          "time": null
        }
      ]
    }
  ]
}