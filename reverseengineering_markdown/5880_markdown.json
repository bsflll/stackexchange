{
  "title": "How to understand the \"lpStartAddress\"-Parameter of the function CreateThread",
  "link": "https://reverseengineering.stackexchange.com/questions/5880/how-to-understand-the-lpstartaddress-parameter-of-the-function-createthread",
  "content": "I have the following assembly code :\n\n```\n.....\nlea eax, [ebp+ThreadID]\npush eax              ; lpThreadID\npush 0                ; dwCreationFlags\npush 0                ; lpParameter\npush offset StartAddress  ; lpStartAddress\npush 0                ; dwStackSize\ncall CreateThread\n....\n\n```\nSo, I try to translate it in a C-like pseudocode:\n\n```\nDWORD* LPWORD eax_lpThreadID = NULL;\nDWORD dwCreationFlags;\nvoid *LPVOID lpParameter;\nSIZE_T dwStackSize;\nLPSECURITY ATTRIBUTES lpThreadAttributes;\n\nHANDLE handle_to_new_Thread = CreateThread(lpThreadAttributes, dwStackSize, ..., lpParameter, dwCreationFlags, eax_lpThreadID );\n\n```\nAs you can see, I do not include the 3rd parameter, namely the parameter LPTHREAD_START_ROUTINE lpStartAddress, because I have problems understanding it.\nIn this SO thread i have read that a LPTHREAD_START_ROUTINE is a function pointer defined as:\n\n```\ntypedef DWORD (__stdcall *LPTHREAD_START_ROUTINE) (\n  [in] LPVOID lpThreadParameter\n);\n\n```\nThat would mean that the 4th parameter lpThreadParameter is a parameter of this. \nBut how can I integrate that information into my pseudo C code program ?\nI am little bit confused about that. Can someone explain it to me? The other attributes/parameters are clear.... \n\n",
  "votes": "-1",
  "answers": 3,
  "views": "2k",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "user3097712",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "In C pseudocode let's say you have a function called doJob. You want to create a thread to executes it.\n\n```\nDWORD WINAPI doJob(LPVOID lpParameter){\n    // Do some work. You can only pass one parameter.\n    // If you need more parameters, define a structure\n    // and send it though it's pointer.\n    return statuscode;\n}\n\nHandle hThread = \n   CreateThread(&attributes,dwStackSize,&doJob,&paramstruct,flags,&newThreadIdBuffer);\n\n```\nOr in asm (nasm syntax, if I still remember it):\n\n```\nlea eax, newThreadIdBuffer\npush eax\npush 0 ; or 4 or 0x00010000 or 0x00010004\nlea eax, paramstruct\npush eax\nlea eax, doJob\npush eax\npush dwStackSize ; 0 will use default\nlea eax, attributes\npush eax\ncall CreateThread\n\n```\nThis can be done cleaner, but I believe it demonstrates the concept.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Jul 18, 2014 at 19:58",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "From MSDN\n\nBasically lpStartAddress is the entry point of the thread. This is a callback function. It will be called when the thread is created and executed.\n\nMore on this,\n\nSee this page, for an example on creating threads.\n\n",
      "votes": "2",
      "user": "0xec",
      "time": "Jul 17, 2014 at 4:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "```\nlea eax, [ebp+ThreadID]\npush eax              ; lpThreadID\npush 0                ; dwCreationFlags\npush 0                ; lpParameter\npush offset StartAddress  ; lpStartAddress\npush 0                ; dwStackSize\ncall CreateThread\n\n```\nthe first argument is pushed last so you have got it all reversed up also it seems during copy paste you missed one argument lpSecurtiyAttributes \n\ncpp \n\n```\nHandle hThread = CreateThread(&lpThreadId,NULL,NULL,&lpStartAddress,NULL,NULL); \n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jul 17, 2014 at 6:29",
      "is_accepted": false,
      "comments": []
    }
  ]
}