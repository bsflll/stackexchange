{
  "title": "Can I trap SIGSEGV (on a Linux) and what are are the conditions to make it works? (for a crackme)",
  "link": "https://reverseengineering.stackexchange.com/questions/21597/can-i-trap-sigsegv-on-a-linux-and-what-are-are-the-conditions-to-make-it-works",
  "content": "I'm writing some crackmes.one challenge and I want to write a challenge where the solution appears on a segmentation fault. (And you have to disassemble the code to find a way to segfault. It should be fun, right?)\n\nI found some hard-to-understand theoretical answer here and there but I can't find a practical solution. Because most of the question are \"how to recover from a sigsegv\" and most of the answer are \"you can't, make your code right so it doesn't segfault\".\n\nWhat would be the most \"trap-able\" segfault? a call to a null function pointer? a double-free? ...?\n\nWhat can I do in my signal handler? It seems there are some harsh condition (reentrancy, async-signal-safe function, etc...).\n\nIf someone can give me some safe pointer (pun intended) to some kind of documentation, blog, ... or an explanation a bit more useful than \"just read the POSIX bible\". It would be greatly appreciated.\n\nMy code doesn't need to be portable. If it works on a moderately standard Linux (Debian, Redhat, Ubuntu, CentOS) it will be fine.\n\n",
  "votes": "6",
  "answers": 2,
  "views": "8k",
  "tags": [
    "linux",
    "crackme"
  ],
  "user": "ker2x",
  "time": "Oct 16, 2020 at 8:19",
  "comments": [],
  "answers_data": [
    {
      "content": "A solution working in Windows was given in my question - this way, you can cause program to continue after it receives SIGSEGV.\n\nYou can do similar thing on linux (though I would recommend using sigaction instead of signal which is deprecated (see link)). That is, register signal handler for this signal and cause it whichever way you prefer to - execution will be passed to the handler, where you can continue.\n\nAn example code is given below:\n\n```\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nvoid handler(int sig)\n{\n    write(1, \"success\", strlen(\"success\")); // printf is not recommended here, but should work as well\n    exit(0);\n}\n\nint main()\n{\n    struct sigaction sa;\n    memset (&sa, '\\0', sizeof(sa));\n    sa.sa_sigaction = &handler;\n    sa.sa_flags = SA_SIGINFO;\n    sigaction(SIGSEGV, &sa, NULL); // register handler for SIGSEGV\n    int *a; // a will contain some garbage value\n    int b = *a; // trigger segmentation fault; transfer control to handler\n}\n\n```\nOf course, you can use the same trick as in my example on Windows and continue the execution outside handler.\n\n",
      "votes": "5",
      "user": "bart1e",
      "time": "Jul 1, 2019 at 17:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "ker2x",
          "text": "Thank you ! i bookmarked the post you linked and will read it too. I don't have enough reputation to upvote you but your answer is greatly appreciated.",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "You can accept it if you feel it answered your question. And if not, let me know about any doubts, so I can improve it.",
          "time": null
        }
      ]
    },
    {
      "content": "An excellent reference (probably the best one) that can be consulted for this type of problem is The Linux Programming Interface, which includes 3 full chapters on the topic of signals:\n\nThese chapters include example code as well as diagrams and clear explanations.\n(A free pdf of the book can easily be found online.)\n\nSee also: Binary Obfuscation Using Signals\n\nTo your questions:\n\nA signal handler, should it exist, will be called by the kernel on the basis of the signal (specifically, its number as defined in <signal.h>), rather than the specific event that triggered the signal. This means that you are free to decide what kind of invalid memory reference to make in order to trigger a segmentation fault. Dereferencing a null pointer is probably the most reliable, since it guarantees program behavior will be deterministic, as a segmentation fault will always occur irrespective of stack contents or the layout of the process in memory.\n\nYou have several options. But first, a bit about non-reentrant library functions:\n\nThe important part is the last sentence. Implementing an exception handler for SIGSEGV may result in unintended signal handler behavior if non-reentrant library functions are called within the exception handler, since it may be possible to trigger a segmentation fault outside of the specific conditions you anticipate. For example, when user input is read into a buffer via scanf, unless bounds checking is properly implemented, a buffer overflow due to 1000 'A's being entered can result in SIGSEGV being sent to the process, which will then trigger the exception handler during the execution of an stdio function. If the signal handler also calls an stdio function, undefined behavior may occur.\n\nSupplementary info:\n\n\n\nReference: The Linux Programming Interface, chapters 20 and 21\n\n",
      "votes": "2",
      "user": "julian",
      "time": "Jul 4, 2019 at 15:33",
      "is_accepted": false,
      "comments": [
        {
          "user": "ker2x",
          "text": "Thank you <3 I just finished my latest crackme (guild hall adventure) and will implement this trick in chapter 4 ! :)",
          "time": null
        },
        {
          "user": "julian",
          "text": "@ker2x youâ€™re welcome and I look forward to trying to solve your new crackme programs :)",
          "time": null
        }
      ]
    }
  ]
}