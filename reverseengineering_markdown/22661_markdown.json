{
  "title": "How to to decompile a pyinstaller exe, back to source code?",
  "link": "https://reverseengineering.stackexchange.com/questions/22661/how-to-to-decompile-a-pyinstaller-exe-back-to-source-code",
  "content": "Python versions, this method has been tried on: 3.7.5, 3.6.0, 3.5.0, 2.7.17? (I know, I'm just too desperate to get my source back.)\n\nI have problem with decompiling an exe. I kind of deleted the wrong folder and now I'm left with the .exe, made by pyinstaller and nothing else. So basically I googled how to decompile pyinstaller exes and I found that first I use this: https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py to dissasemble to .pyc files and then uncompyle6 to get the source. The problem is that pyinstxtractor doesn't return the source code in .pyc format so I basically had to convert it myself and then add the \"magic numbers\" to it so that uncompyle6 sees it as .pyc. If you are wondering how I got the magic numbers, well I just used a hex editor to see the magic numbers of another .pyc, that pyinstxtractor spat out and then I just pasted them in the main file. So after that, I write\n\n```\nuncompyle63 name_of_pyc.pyc\n\n```\nand I get this error: \n\n```\nTraceback (most recent call last):\n  File \"c:\\python\\lib\\site-packages\\xdis\\load.py\", line 208, in load_module_from_file_object\n    co = marshal.loads(bytecode)\nValueError: bad marshal data (unknown type code)\nTraceback (most recent call last):\n  File \"c:\\python\\lib\\site-packages\\xdis\\load.py\", line 208, in load_module_from_file_object\n    co = marshal.loads(bytecode)\nValueError: bad marshal data (unknown type code)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\python\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\python\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Python\\Scripts\\uncompyle6.exe\\__main__.py\", line 9, in <module>\n  File \"c:\\python\\lib\\site-packages\\uncompyle6\\bin\\uncompile.py\", line 194, in main_bin\n    **options)\n  File \"c:\\python\\lib\\site-packages\\uncompyle6\\main.py\", line 261, in main\n    source_encoding, linemap_stream, do_fragments)\n  File \"c:\\python\\lib\\site-packages\\uncompyle6\\main.py\", line 161, in decompile_file\n    source_size) = load_module(filename, code_objects)\n  File \"c:\\python\\lib\\site-packages\\xdis\\load.py\", line 116, in load_module\n    get_code=get_code,\n  File \"c:\\python\\lib\\site-packages\\xdis\\load.py\", line 222, in load_module_from_file_object\n    \"Ill-formed bytecode file %s  \n%s; %s\" % (filename, kind, msg)\nImportError: Ill-formed bytecode file Bot.pyc\n<class 'ValueError'>; bad marshal data (unknown type code)\n\n```\nWhat are some other ways to decompile pyinstaller executables (If this one is useless)?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "13k",
  "tags": [
    "python",
    "disassemblers"
  ],
  "user": "DjArDjAr",
  "time": "Dec 17, 2019 at 23:04",
  "comments": [
    {
      "user": "blabb",
      "text": "before attempting to go the hard way  have you looked around and tried  some of the recovery software like undelete  etc  basically file deletion just erases  the file details not the file contents and many software exist which can recover the deleted files",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "I'd guess it's to late once you started tinkering ... at the point such a mistake is made and you want to use an undelete tool you basically need to \"pull the plug\". Each additional write diminishes your chances to recover some of the deleted data.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As you said, .pyc files begin with a magic (per python version)+timestamp.\nThe tools sometimes fail reading these files despite them being correctly structured.\nAnyhow, this metadata is not required for decompiling.\n\nIf you can get to the beginning of the marshal'd code, usually at offset 8 from the beginning of the .pyc file, you can use python's built-in dis and marshal libraries:\n\n```\nimport dis\nimport marshal\nf = open(\"file.pyc\",\"rb\")\nf.seek(8) #assuming there are magic numbers at the beginning\ncode = marshal.load(f)\ndis.dis(code)\n\n```\nInconveniently, it prints the code to stdout instead of returning it as text to the caller.\n\nMake sure you run the code from the python version that the .pyc is originally compiled for.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Dec 17, 2019 at 23:06",
      "is_accepted": false,
      "comments": []
    }
  ]
}