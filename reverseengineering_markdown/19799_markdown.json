{
  "title": "Understanding ESIL",
  "link": "https://reverseengineering.stackexchange.com/questions/19799/understanding-esil",
  "content": "I cross-compiled a simple program with the aarch-linux-gnu-gcc compiler for ARM. So the machine is \"ARM aarch64\". I want to understand a single instruction and it's realization in ESIL. The opcode of the instruction is: \nmovk x4, 0x40, lsl 16\n\nThe ESIL-string is: -4294901761,x4,&,4194304,|,x4,=\n\nHas anybody an idea, why it looks like that? Shouldn't it be a << to \"shift left\"? \n\nThe R2 commands I run are:\n\n```\naa\ne asm.syntax = att\ne asm.emu = true\npdfj\n\n```\n(But i did this in R2pipe)\n\nI am curious about the solution and thank you in advance! :)\n\n",
  "votes": "2",
  "answers": 0,
  "views": "178",
  "tags": [
    "arm",
    "radare2"
  ],
  "user": "AndiYo",
  "time": "Nov 2, 2018 at 21:33",
  "comments": [
    {
      "user": "sudhackar",
      "text": "I think the constant has been calculated for the shift as both shift and value are constants. 0x40<<16 = 4194304",
      "time": null
    },
    {
      "user": "AndiYo",
      "text": "@sudhackar dammit, you are right. Thank you for your help. Should have seen that. ^^  But why would a compiler do something like this? Is the parallel loading to a register and shifting faster than parallel loading by itself?",
      "time": null
    }
  ],
  "answers_data": []
}