{
  "title": "Convert Mach-O VM Address To File Offset",
  "link": "https://reverseengineering.stackexchange.com/questions/8177/convert-mach-o-vm-address-to-file-offset",
  "content": "this maybe total no brainer but i'm really new to this and i'd really appreciate some help!\n\nBasically i'm trying to patch(out aka nop) a obj-c function inside an iOS Application. I've successfully decrypted it and i'm able to disassemble it with otool. Needless to say the original application was stripped so no structure in the disassembly. \n\nI then heard about class-dump-z which is modified version of class dump with the ability to give you the VM Address of a given Function Implementation.\n\nOutput of class-dump-z -A:\n\n```\n#import <XXUnknownSuperclass.h> // Unknown library\n#import \"SomeHeader.h\"\n\n@class NSString;\n\n__attribute__((visibility(\"hidden\")))\n@interface CensoredClassName : XXUnknownSuperclass <SomeDelegate> {\n}\n@property(readonly, copy) NSString* debugDescription;\n@property(readonly, copy) NSString* description;\n@property(readonly, assign) Class superclass;\n@property(readonly, assign) unsigned hash;\n-(void)showJailbreakAlert;  // 0x1498d <--Patch this Method\n@end\n\n```\nMy Question: How to translate the given Implementation VM Address to binary File Offset which I can patch?\nOr even better how can i find the Method in the TEXT Disassembly? Simply Searching for the offset inside the disassembly generated with the otool -tV command does not return any result.\n\nThank you very much in Advance\n\nMalte\n\nP.S. Link to Class-Dump-Z Google code Page:here\n\n",
  "votes": "3",
  "answers": 2,
  "views": "822",
  "tags": [
    "disassembly",
    "ios",
    "patching"
  ],
  "user": "Malte",
  "time": "Feb 7, 2015 at 18:17",
  "comments": [],
  "answers_data": [
    {
      "content": "you need to find the segment (LC_SEGMENT) load command which covers the address, then do something like this:\n\n```\nfle_off = (address-seg.address)+ seg.offset\n\n```\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Feb 8, 2015 at 20:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Malte",
          "text": "That was indeed the answer. Took me a while to figure out the function was stored in the _TEXT segment though. Thank you very much!",
          "time": null
        }
      ]
    },
    {
      "content": "If does not contain Fat headers then fat_arch.offset = 0\n\nCheck if fat: otool -fh or lipo -detailed_info\n\n```\nArchitectures in the fat file: MyBinary are: x86_64 arm64\n\nFat headers\nfat_magic 0xcafebabe\nnfat_arch 2\narchitecture 0\n    ...\n    offset 16384    <== fat_arch.offset for x86_64\n    size 58720\narchitecture 1\n    ...\n    offset 81920    <== fat_arch.offset for arm64\n    size 73072\n\n```\nAssume we need x86_64 offset for 0000000100001921\n\n```\n$ otool -tVj -arch x86_64 -function_offsets MyBinary | head -3\n   +0 0000000100001920  55                  pushq   %rbp\n=> +1 0000000100001921  4889e5              movq    %rsp, %rbp\n   +4 0000000100001924  53                  pushq   %rbx\n\n```\nthen\n\n```\n$ otool -l -arch x86_64 MyBinary | grep __text -A 5\nsectname __text\n segname __TEXT\n   addr 0x0000000100001920    <== segment.address\n   size 0x000000000000160a\n offset 6432                  <== segment.offset\n  align 2^4 (16) \n\n```\n0x5921\n\n```\n$ xxd -s 0x5921  -l 32 -c 16 MyBinary\n=> 00005921: 4889 e553 5048 8b3d 5b2d 0000 e8ca 1600  H..SPH.=[-......\n   00005931: 0048 8b35 ff2c 0000 4889 c7e8 6116 0000  .H.5.,..H...a...\n\n```\n",
      "votes": "1",
      "user": "Andrii Tishchenko",
      "time": "Dec 16, 2022 at 22:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}