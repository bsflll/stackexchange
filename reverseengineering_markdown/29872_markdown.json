{
  "title": "Program doesn't load a custom .dll from main directory. How can i inject a .dll BEFORE the executable starts?",
  "link": "https://reverseengineering.stackexchange.com/questions/29872/program-doesnt-load-a-custom-dll-from-main-directory-how-can-i-inject-a-dll",
  "content": "I want to use DXVK in GTA 5 on Windows 11.\nUsing the needed .dlls (d3d11.dll and dxgi.dll) and launching the game comes with this error\n\n\n\nUsing Process Explorer (while the error message is displayed) you can see that only dxgi.dll from the Windows directory is loaded, the one that i copied from DXVK is never loaded\n\n\nUsing an injector does not work since loaders/injectors relay/defer the \"injection\" part until their DlllMain() has completed execution.\n\nSo how can i inject the custom dxgi.dll before the executable starts?\n\n",
  "votes": "3",
  "answers": 3,
  "views": "1k",
  "tags": [
    "executable"
  ],
  "user": "Οδυσσέας Πουμπουρίδης",
  "time": "Jan 13, 2022 at 18:56",
  "comments": [],
  "answers_data": [
    {
      "content": "Sometimes creating a file file.exe.local next to file.exe is enough to make it load DLLs\nfrom the same directory\nbut it may not work if the program applied DLL sideloading mitigations or loads the DLL manually from the system directory using absolute path.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Jan 13, 2022 at 23:30",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Two aspects weren't mentioned, so I wanted to add them. Igor's approach would be the least invasive, if it works.\n\nSuppose you have written a launcher, it may still not work, simply on account of the DLLs getting imported statically. The notion of a static import means that the statically imported DLLs get resolved and the imported functions resolved before your application entry point executes. This means you cannot do anything but manipulate the application or attempt a DLL placement attack in such a scenario. The launcher won't work (although it could provide ways to manipulate the running process early on and hook into the facilities used to load the DLL).\n\nThe message box you showed, however, suggests that your import happens at runtime (this is not the usual message box you would get to see when the image loader fails). This could suggest that inside your program someone/something sets the DLL search order. But it could just as well be a hardcoded full DLL path passed to LoadLibrary() et. al. One way of diagnosing this other than with a debugger would be ProcMon from Sysinternals/Microsoft. It has the ability to capture process events such as attempting to load a DLL.\n\nEdit: There is one other option I am aware of that requires some agent running in the TCB, e.g. a service, and a kernel driver watching out for events like image loading and thread/process creation. The driver then subscribes to some notification scheme implemented between driver and service and performs the necessary steps from user mode early on before the process or most of its statically imported DLLs get to run any code.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Jul 22, 2022 at 9:58",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Hook loadlibrary and see what it gets called with, this will pick up ntdll loading as well as anything done manually by the app. If you're using x64dbg you can make the breakpoint log out each call and then just look at the logs after it crashes out\n\n",
      "votes": "0",
      "user": "Sam Russell",
      "time": "Jan 22, 2022 at 13:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "If you're actually hooking LoadLibrary it won't pick up anything in ntdll.dll. Just saying.",
          "time": null
        }
      ]
    }
  ]
}