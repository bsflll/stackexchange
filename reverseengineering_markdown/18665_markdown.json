{
  "title": "How to move one step back in a debugger",
  "link": "https://reverseengineering.stackexchange.com/questions/18665/how-to-move-one-step-back-in-a-debugger",
  "content": "When I debug a .exe file on Windows with IDA, I do it step by step.\n\nCan I move one step back and reset all the registers and stack to what they were one instruction ago?\n\nBy the way, when I'm looking at a specific address on the stack and move one step I'm loosing my view of the specific address, the stack view change to current sp.\n\nHow can I always look at a specific stack address without the view changing?\n\nThanks\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "windows",
    "debugging",
    "x86"
  ],
  "user": "Keystone",
  "time": "Jul 2, 2018 at 16:09",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "if you are interested in other debuggers apart from IDA that support reverse debugging(time travel debugging) check this answer: reverseengineering.stackexchange.com/a/17776/18014 or a short video I've recorded on the topic: youtube.com/watch?v=ubBHoc2qiAs",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Although those are too completely unrelated questions and should be asked separately, I'll answer both.\n\nNo. You cannot. In order to move a step backwards IDA (or any other debugger for that matter) needs to store all previous register values, memory values and CPU state. This is not part of debugging functionality provided by most debuggers. There are a few instrumentation tools that allow for that, but they're overhead is rarely worth the effort / limitations for most debugging sessions. I often use Virtual Machines and save snapshots for that purpose instead.\n\nThe stack view window follows the stack pointer by definition. However, it seems you're using the stack view for purposes that would better utilize the memory view/memory dump. The memory dump view (located just below the instructions/disassembly view in IDA by default) will show you a range of memory addresses and is freely browsable. You can create multiple memory views within IDA to view multiple address areas at any given time. The memory view will not show other addresses unless you've specifically changed the address using the UI.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}