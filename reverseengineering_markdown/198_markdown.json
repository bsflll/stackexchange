{
  "title": "What different UPX formats exist and how do they differ?",
  "link": "https://reverseengineering.stackexchange.com/questions/198/what-different-upx-formats-exist-and-how-do-they-differ",
  "content": "Recently I asked a  question about detecting UPX compression. 0xC0000022L wanted to know if it was plain UPX. However until that point I only was aware of plain UPX. So my question is:\n\n",
  "votes": "15",
  "answers": 3,
  "views": "2k",
  "tags": [
    "upx"
  ],
  "user": "qbi",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "I will ignore that there's multiple compression algorithms in UPX and that there's been multiple versions of UPX. \n\nGenerally when people ask if it's plain or vanilla UPX it's because malware and other software likes to take UPX and modify it slightly so that it can't be unpacked with the standard UPX executable and so that anti viruses will have a harder time unpacking it. It's not very effective at counteracting reverse engineering.\n\n",
      "votes": "12",
      "user": "Peter Andersson",
      "time": "Mar 23, 2013 at 20:29",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Spot on. You can't read minds, can you? ;)",
          "time": null
        },
        {
          "user": "Lizz",
          "text": "Can you include any example(s)/site(s) of how it's modified? Such info might further build a strong answer. :)",
          "time": null
        },
        {
          "user": "dyasta",
          "text": "And if a derivation of UPX is used as a protection mechanism, you can bet that it will yield false positives until you are blue in the face. UPX has been effectively classified as a malware tool by most security companies, a fate common to open source libraries and executable tools.",
          "time": null
        }
      ]
    },
    {
      "content": "First, let's see UPX structure.\n\nFor more details, here is a commented IDA (free version) IDB of a UPX-ed PE.\n\nSimple parts like prologue/epilogue are easy to modify, and are consequently often modified:\n\nComplex parts like decompression, calls restoration, imports loading are usually kept unmodified, so usually, custom code is inserted between them:\n\nAs the prologue doesn't do much, it's also trivial to copy it to the EntryPoint of a non UPX-packed PE, to fool identifiers and fake UPX packing.\n\n",
      "votes": "16",
      "user": "0xC0000022L",
      "time": "Apr 17, 2013 at 4:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Some tools also rely on the default section names, in case of PE files.",
          "time": null
        }
      ]
    },
    {
      "content": "I'm not sure if this is what you're asking, but UPX has multiple ways of compressing a given format. For example, an ELF \n - can be decompressed directly into memory\n - can be decompressed into /tmp and executed from there\n\nBy default the first option is preferred, but I don't think it's mandatory. See the UPX Manual for details.\n\n",
      "votes": "5",
      "user": "EfForEffort",
      "time": "Mar 24, 2013 at 0:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}