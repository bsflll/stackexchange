{
  "title": "How to get same compare result of Eax value in all window OS [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/9283/how-to-get-same-compare-result-of-eax-value-in-all-window-os",
  "content": "I just started learning assembly. This is how it look in Ollydbg over Windows XpSp3 32Bit:\n\n```\nMOV EAX,ESP\nADD EAX,0x20\nCMP EAX,0xFFFFF\nJLE SHORT 008A3E51\nCMP EAX,0x12A5B0\nJLE SHORT 008A3E38\nJMP SHORT 008A3E26\n\n```\nIn above at CMP EAX, 0x12A5B01, 0x12A5B0 is Eax value in Register.\n\nIf it is the same then jump or not.\n\nNow, my problem is that this Eax value differ as per change in different OS.\n\nWhich result in a fail.\n\nSo, what is the correct and Generic way to get the same compare value in all Window OS ?\n\n",
  "votes": "-2",
  "answers": 1,
  "views": "128",
  "tags": [
    "assembly",
    "ollydbg"
  ],
  "user": "Base 64",
  "time": "9 years ago",
  "comments": [
    {
      "user": "Jongware",
      "text": "Are you sure the value in eax is not some sort of address? Constants in executable code remain constant, totally and entirely independent of what OS it is running in.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "@Jongware: He's basically comparing the stack pointer with a specific address, which doesn't make sense. I assume he has a function that he wants to patch - do something special if called from a specific point during execution, do \"the normal thing\" everywhere else. \"How can i patch a function in an existing binary so it behaves differently under very specific circumstances\" is probably the question the OP should have asked, but i'm peeking into a crystal ball here.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There is no correct and generic way. Your eax register is initialized from the stack pointer, which may be different dependent on OS, OS Version, ASLR, loaded DLLs+DLL Versions,  localization, and probably a bunch of extra stuff that doesn't come to mind right now. \n\nYou just shouldn't assign any meaning to any specific stack pointer value. You can assume it gets initialized to a value that can hold a certain amount of stack space you can push stuff to, and you can compare the value before and after some push or pop operations, but the absolute value just has no meaning whatsoever. So your question 'how can i get the same value in all Windows OS' doesn't really make sense.\n\nOf course, you can replace your mov eax, esp with mov eax, 123456h or xor eax, eax, and you'll have the same value guaranteed on all versions of Windows. But while this is technically an answer to your question, it's quite probably quite useless as well.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jul 3, 2015 at 22:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "Base 64",
          "text": "Yes I want to patch particular function..  As u say if I replace  mov eax, esp with mov eax, 123456h or xor eax, eax..  Then what should be my revised code in above situation..  PS- Sorry I m noob so it's kind of Spoon feeding.. :)",
          "time": null
        }
      ]
    }
  ]
}