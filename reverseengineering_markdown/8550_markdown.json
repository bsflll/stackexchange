{
  "title": "Finding memory breakpoints from debugged executable",
  "link": "https://reverseengineering.stackexchange.com/questions/8550/finding-memory-breakpoints-from-debugged-executable",
  "content": "Is it possible to find Memory Breakpoints from within the debugged executable? (as an anti debugging technique?). And no, i do not mean Hardware Breakpoints from the Dr0 - Dr7 registers NOR INT3 \\ code breakpoints.. Breakpoints like in OllyDBG when you right click a memory address and put a breakpoint on access.\n\nWhat ways exist to find such breakpoints?\nHow can i avoid detection?\n\n",
  "votes": "1",
  "answers": 3,
  "views": "597",
  "tags": [
    "windows",
    "ollydbg",
    "anti-debugging",
    "protection"
  ],
  "user": "0xAK",
  "time": "Mar 25, 2015 at 10:12",
  "comments": [],
  "answers_data": [
    {
      "content": "You could query the page level attributes of the section you're trying to verify. If the attributes contain unexpected values (e.g. PAGE_NOACCESS), chances are that someone messed with your pages (possibly a debugger setting a memory breakpoint).\n\n",
      "votes": "2",
      "user": "newgre",
      "time": "Mar 25, 2015 at 10:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xAK",
          "text": "Can u give me real life examples of how its done? Are there any alternatives to VirtualProtectEx and VirtualQueryEx?",
          "time": null
        },
        {
          "user": "newgre",
          "text": "The only alternative I can think of would be NtQueryVirtualMemory.",
          "time": null
        }
      ]
    },
    {
      "content": "This is covered in-depth in this blog post: http://waleedassar.blogspot.com/2012/11/defeating-memory-breakpoints.html\n\nAs for your other question -- \"How can i avoid detection?\" -- that is answered here: https://reverseengineering.stackexchange.com/a/8510/1562\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "AFAIK this is possible, just read your own memory and look for 0xCC bytes. However this poses a problem since several compilers insert 0xCC bytes between functions (as kind of a trap in case of memory overwrite, I guess)\n\n\n\nSo, you would have to do is to know how many of those \"innocent\" INT3 was there before and check for anomalies. Sounds like prone to failure, IMHO :)\n\nSPOILER: IIRC, this was one of the anti-RE mechanisms in the last Flare Challenge.\n\n",
      "votes": "-2",
      "user": "Carlos Garcia",
      "time": "Mar 25, 2015 at 9:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xAK",
          "text": "I did not mean Code breakpoints (INT3) i meant Memory breakpoints.. Like changing the Page Protection attributes with VirtualProtect or other api.. to PAGE_GUARD etc",
          "time": null
        }
      ]
    }
  ]
}