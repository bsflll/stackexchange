{
  "title": "Setting a breakpoint on a shared library's decompiled exported function, and making Ghidra actually stop on that function when debugging a client code",
  "link": "https://reverseengineering.stackexchange.com/questions/31308/setting-a-breakpoint-on-a-shared-librarys-decompiled-exported-function-and-mak",
  "content": "I am very new to Ghidra, so please accept my apologies if my question sounds too simple. Despite the poor quality of the Internet in my country, I tried my best to find an answer online before asking but I could not find much.\n\nImagine we have a Linux shared object named CustLib.so, that exports one single function named Func.\n\nFurthermore, imagine a program (let's call it ClientProg) imports Func from CustLib.so and calls it from its main.\n\nWhat I have been trying to do with Ghidra is:\n\nTo my surprise, the last step above never happens. ClientProg runs from start to completion (in GDB IN-VM mode), without ever breaking on Func.\n\nCould I ask whether I am actually missing something? Or am I expecting an unsupported functionality? Many thanks.\n\n",
  "votes": "3",
  "answers": 0,
  "views": "345",
  "tags": [
    "ghidra",
    "linux"
  ],
  "user": "ElenaKarimi",
  "time": "Dec 25, 2022 at 14:09",
  "comments": [
    {
      "user": "raspiduino",
      "text": "I don't think it will work like that. If you put a run ClientProg in Ghidra, only breakpoints in ClientProg will hit, not CustLib.so. Instead, you should do something like start debugging the .so but with the application path (not the file path) pointing to ClientProg, so ClientProg can be started and CustLib.so will be debugged. I don't know how to do this in Ghidra (due to my lack experiences with Ghidra), but that is how I would do in IDA",
      "time": null
    },
    {
      "user": "ElenaKarimi",
      "text": "Thanks a lot! @raspiduino",
      "time": null
    }
  ],
  "answers_data": []
}