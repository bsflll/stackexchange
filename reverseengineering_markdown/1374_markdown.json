{
  "title": "How do I identify and use JTAG?",
  "link": "https://reverseengineering.stackexchange.com/questions/1374/how-do-i-identify-and-use-jtag",
  "content": "I'm a software guy through and through.  But periodically when I'm taking apart hardware I know to look for JTAG ports and RS232 ports.  So far I've always been lucky and have been able to solder on pins to the RS232 port and get a serial connection.\n\nFor the times in the future that I am unlucky, can someone explain to me what JTAG is (i.e. is there only one type of JTAG and I can expect to hook it up to a single type of port, like a DB-9 for serial?) and how I would go about using it to dump firmware off an embedded system or is it all manufacturer specific?\n\n",
  "votes": "33",
  "answers": 4,
  "views": "34k",
  "tags": [
    "hardware",
    "jtag"
  ],
  "user": "mrduclaw",
  "time": "Jun 19, 2013 at 14:05",
  "comments": [],
  "answers_data": [
    {
      "content": "There are a few JTAG connectors available, so it's hard to tell which one, and how the pins are positioned.\n\nI suggest you take a magnifying glass and read the microcontroller model.  With the model you will be able to find the datasheet on the Internet.\nTake a look at the PIN out of the microcontroller, and see how many JTAG outputs it has. Some newer chips have trace outputs, some don't. This can really narrow down your options.\n\nYou might want to take a look here, for a a quick look on various JTAG connectors.\n\nAnother thing worth mentioning, various microcontroller, have a specific bit, that when it set, the JTAG connectors are disabled. This is done on release, to make sure that no one tries to steal the firmware or to debug the system.\nThe only way to enable the JTAG again is to hard reset the microcontroller. This will cause complete reset of the internal flash, so all the firmware will be lost...\n\n",
      "votes": "24",
      "user": "Bill B",
      "time": "Mar 31, 2022 at 8:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "ixje",
          "text": "I would just like to add that in my experience (high-end devices) more often than not hard resetting doesn't work for enabling the JTAG. These interfaces are often permanently locked by blowing a fuse. In the other cases they're password protected by 64-bit keys with significant delays (milliseconds up to a second) between possible unlock attempts. Just to make sure you don't even want to think about brute-forcing them with a farm of devices. And to fool you a bit they also sometimes like to give you 1 unlock attempt and then silently ignore the reset until a cold reset.",
          "time": null
        }
      ]
    },
    {
      "content": "JTAG was initially created to test/verify hardware devices. The process is called boundary scanning and JTAG was named after the working group: Joint Test Action Group, some time in the 1980s.\n\nThe idea was to define an interface that could be used to test hardware (micro controllers and connected peripherals after manufacturing). I.e. after development of the hardware and subsequent production of it.\n\nThe devices used to do the boundary scan according to JTAG are called JTAG probes. They used to be connected to the parallel port of your machine, but these days are more often connected via USB and based on one of the FTDI chips.\n\nOn a PCB the chip(s) and peripherals form a \"daisy chain\" connected to the TAP (test access port). So you can test the various components through one port. The instruction BYPASS is used to tell a device earlier on the chain to ignore your commands and pass them on. IDCODE is used to identify the device and a few basic characteristics.\n\nA neat overview of some technical details can be found here: JTAG - A technical overview, but the Wikipedia article and its reference list also provide valuable information. Keep in mind that this was established before the WWW came to be and that a lot of information regarding it has been banned onto dead trees.\n\nThe term boundary scan is still used to describe the process and makes up part of the acronym BSDL (boundary scan description language), which you would normally get in touch with if you were to boundary scan a device/chip and the vendor expected you to do that. Otherwise they tend to be pretty secretive about it. The reason for the secrecy being that they essentially give away a part of their hardware design, which most of these hardware vendors consider a trade secet. I've had the luck to get access to the BSDL file, under NDA, even though it wasn't for the exact silicon revision I was debugging. But I was assured that the BSDL file would work just fine with the silicon revision of the chip I had. But unless you can afford to destroy your hardware, you have to make sure that your BSDL data matches the hardware you connect to.\n\nThese days JTAG isn't just used for testing only, though. Of course hardware-debugging is a subset of testing, so this is not what I mean. What I mean is that JTAG probes also allow you to flash firmware on otherwise defunct hardware. And that is essential in debricking bricked hardware.\n\nThere are several problems in using JTAG which you have to overcome aside from identifying the connectors. And I'll ignore the bit Mellowcandle mentioned in his answer.\n\nYou have to be confident that you got things right, because otherwise you can fry your hardware instead of, for example, debricking it.\n\nOften you'll find TMS, TCK, TDI and so on inscribed on your PCB, so you know you're dealing with a device that supports JTAG. Magnifying glasses may be of help ;)\n\nBut this isn't really an arcane art - it gets more difficult when the pins aren't labeled and you need to rely on third-party documentation.\n\nOf course it is also possible that your board has a JTAG header instead of mere pins/contacts.\n\nYes, indeed you need to identify the kind of chip you have before you and find out what voltage it expects, because otherwise you can fry your chip or your JTAG probe or both.\n\nIf you happen to be lucky, you have a JTAG header on your device which helps you find out what it is and implicitly what voltage it expects and so on. There are quasi-standards for ARM and MIPS to my knowledge. Refer to Mellowcandle's answer for the former and to this and this for the latter.\n\nUse any and all available documentation you can find to verify any assumptions you make. DSL routers often have MIPS CPUs in them, but ARM are also common and possibly others, too. Projects such as OpenWRT have a wealth of information available about hardware, even hardware not supported directly by them.\n\nUsually the hardware vendors will claim that they support the McCraigor Wiggler or some other hideously expensive JTAG probe. What this means is that you are on your own if you don't use an \"unsupported\" (by the vendor) JTAG probe! It doesn't mean it won't work, but it means you have to be damn sure about what you are doing (voltage, JTAG commands you send and such).\n\nGDB (gdb) can be used in conjunction with these in some scenarios (e.g. OpenOCD).\n\nNote: sometimes you will hear the terms debugger or emulator for the JTAG probes themselves.\n\n",
      "votes": "21",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "For figuring out JTAG pinout, there are many hits on google for \"JTAG Finder\". I also have my own implementation:\n\nhttp://mbed.org/users/igorsk/code/JTAG_Search/\n\nIt's for mbed but I tried to make it easily portable (original version was for a Stellaris board).\n\nHere's a quote from the comment which describes the basic approach:\n\n```\n The overall idea:\n 1) choose any 2 pins as TMS and TCK\n 2) using them, reset TAP and then shift DR, while observing the state of all other pins\n 3) for every pin that received anything like a TAP ID (i.e. bit 0 is 1):\n 4)   using the pin as TDI, feed in a known pattern into the TAP\n 5)   keep shifting and monitor the rest of the pins\n 6)   if any of the remaining pins received the pattern, it is TDO\n\n```\n",
      "votes": "8",
      "user": "Igor Skochinsky",
      "time": "Jun 19, 2013 at 16:35",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I created a video how I identified a possible JTAG connection with a multimeter. Here is a picture showing which pins are connected and it matches with a standard JTAG pinout for VCC and GND. This is an indication that it could be JTAG, though it doesn't have to be.\n\n\n\n",
      "votes": "7",
      "user": "samuirai",
      "time": "Jun 19, 2013 at 17:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}