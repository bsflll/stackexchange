{
  "title": "Windbg Break Points",
  "link": "https://reverseengineering.stackexchange.com/questions/19752/windbg-break-points",
  "content": "I need to set a break point when a specific module address space is being overwritten? I need to specify this by module name not address space\n\n",
  "votes": "1",
  "answers": 1,
  "views": "103",
  "tags": [
    "windbg",
    "hooking"
  ],
  "user": "user26171",
  "time": "Oct 29, 2018 at 14:33",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. By writing address space you mean a vast range of addresses? Given you have a limited number of debug registers, this may be hard to accomplish outside of some kind of binary instrumentation or even emulation framework.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "i cant understand what your usecase is \nassuming you have some  code like this running and you want to break when some thing is written to some space  you can use ba (hardware assisted breakpoint ) \n\ncode for demo it writes randomly the @ sign in a space of 0x2000 bytes \n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nchar randritebuff[0x2000];\nint main (void) {\n    srand( (unsigned int)time(nullptr));\n    for(;;) {\n    int writeaddr = ((rand() % 0x1fff)+1);\n    randritebuff[writeaddr] = 0x40;\n    }\n}\n\n```\nassuming you are interested in seeing only when it writes at the 1337th\nbyte from the start of buffer \n\nyou can employ a breakpoint with module names as well as symbols for the buffer if they are available in windbg like this \n\n```\n00eb102e c682d198ef0040  mov byte ptr randrite!randritebuff+0x1 (00ef98d1)[edx],40h ds:0023:00efacd9=00\n\n0:000> ba w1 randrite!randritebuff+0x1337  <<<<<<<<<<<<<<<<<<<<<< \n0:000> bl\n     0 e Disable Clear  00efac07 w 1 0001 (0001)  0:**** randrite!randritebuff+0x1337\n\n0:000> ? randrite!randritebuff\nEvaluate expression: 15702224 = 00ef98d0\n\n0:000> ? 00ef98d0+1337\nEvaluate expression: 15707143 = 00efac07\n\n0:000> g\nBreakpoint 0 hit\neax=00000003 ebx=7ffdf000 ecx=00007333 edx=00001336 << \na hardware breakpoint break with eip @ + 1  (00eb102e + sizeof(c682d198ef0040))\n\n00eb1035 << ebef            jmp     randrite!main+0x16 (00eb1026)\n\n```\na screenshot below \n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Oct 29, 2018 at 18:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}