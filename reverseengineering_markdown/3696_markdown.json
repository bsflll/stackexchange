{
  "title": "Reversing simple hello world in C++ [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/3696/reversing-simple-hello-world-in-c",
  "content": "Can someone explain me why a simple C++ application - \n\n```\n#include <iostream>\nint main()\n{\n    std::cout << \"Hello world!\";\n    return 0;\n}\n\n```\ncompiled with MSVC 2012 looks very weird in IDA / Olly? Why I see hundreds of lines of ASM code instead of the few I expected? Can someone explain to me where all that code comes from? Thanks.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "assembly",
    "c++"
  ],
  "user": "user1505497",
  "time": "11 years ago",
  "comments": [
    {
      "user": "Jongware",
      "text": "1. standard entry/exit code, 2. libraries, 3. 1 line of C++ is only very rarely translated to 1 line of assembly. How \"few\" did you actually expect?",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "If you don't make any C++ library function calls (for example, if you only use Windows API functions) then you can configure the MSVC 2012 linker to use main() as the entry point. This will remove all extraneous ASM code from the linked executable.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "One piece of code you use is #include  this includes:\nhttp://www.opensource.apple.com/source/gcc/gcc-937.2/libio/iostream.h\n\nYou might spot the Class. This generates a lot of code, also you need to think about libs, default compiler generated code etc etc.\n\nIf you assemble a basic application with NASM you will also spot more Assembly than you wrote.\n\n",
      "votes": "5",
      "user": "Stolas",
      "time": "Feb 17, 2014 at 10:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There are several reasons for that:\n\nI hope that you understand, that to add all the above, compiler needs to add some code and this is even before your code is there. Of course, you can disable all of the above by playing with the parameters.\n\nReducing Executable Size is a pretty good list of useful info which can help you to understand what is going on under the hood.\n\nMy suggestion is to write the following code\n\n```\nint main()\n{\n   return 0;\n}\n\n```\nremove all optimizations and start your study from there by adding/removing compiler options one in a time.\n\nHave Fun!\n\n",
      "votes": "4",
      "user": "PhoeniX",
      "time": "Feb 20, 2014 at 9:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}