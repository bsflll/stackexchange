{
  "title": "IDA Pro/Hex-Rays FLIRT Signatures and Standard library function detection",
  "link": "https://reverseengineering.stackexchange.com/questions/6649/ida-pro-hex-rays-flirt-signatures-and-standard-library-function-detection",
  "content": "I'm having some problems performing a standard decompilation of a Windows EXE file using IDA Pro/Hex-Rays and its built-in FLIRT signatures.\n\nA lot of standard C++ functions are not being recognized as such, i.e.: rand, memset, etc.. The binary I'm trying to decompile is automatically detected to having being compiled using Visual C++.\n\nI get the following on the output window when trying to open the .EXE:\n\n```\nPlan  FLIRT signature: Microsoft VisualC 2-11/net runtime\nautoload.cfg: vc32rtf.sig autoloads mssdk.til\n\nType library 'mssdk' loaded. Applying types...\nTypes applied to 302 names.\n\nType library 'vc6win' loaded. Applying types...\nTypes applied to 1 names.\n\nUsing FLIRT signature: Microsoft VisualC 2-11/net runtime\n\n```\nBut then when I go to the List of applied library modules (View > Open subviews > Signatures) I see that the vc32rtf signature had 1061 functions matched, but my it looks like either these were not mapped/renamed appropriately on the disassembled or something else is affecting its ability to identify the functions.\n\nTried to change signatures and add Type libraries as described here but nothing seems to change.\n\nIf it's any useful, the binary I'm looking at is for Reflector 1.5.0 for Windows and a few of the functions I can see unidentified are: \n\nrand:\n\n```\nint sub_64B6F3()\n{\n  int v0; // eax@1\n  unsigned int v1; // ecx@1\n\n  v0 = _getptd();\n  v1 = 214013 * *(_DWORD *)(v0 + 20) + 2531011;\n  *(_DWORD *)(v0 + 20) = v1;\n  return (v1 >> 16) & 0x7FFF;\n}\n\n```\nmemset:\n\n```\nchar *__cdecl sub_5AD770(unsigned __int64 a1, int a2, int a3)\n{\n  unsigned int v3; // ecx@1\n  int v4; // esi@1\n  __int64 v5; // rax@2\n\n  v4 = HIDWORD(a1);\n  v3 = a1;\n  if ( a1 >= 0x311000 )\n  {\n    *(_BYTE *)a3 = 30;\n    if ( v4 || v3 >= 0xCC000000 )\n    {\n      if ( v4 )\n      {\nLABEL_10:\n        if ( !v4 && v3 < dword_821FBC - 805306368 )\n        {\n          v5 = (__int64)(__int64 *)((char *)&qword_93C180 + v3 - 3489660928i64);\n          return (char *)v5;\n        }\nLABEL_13:\n        sub_64B413(\"ERROR - address was outside of heap/stack space! (%08lx))  \n\", v3);\n        _mm_storel_pd((double *)&a1, 0i64);\n        LODWORD(v5) = a1;\n        return (char *)v5;\n      }\n      if ( v3 < dword_821FC0 - 872415232 )\n      {\n        v5 = (__int64)(__int128 *)((char *)&xmmword_83C160 + v3 - 3422552064i64);\n        return (char *)v5;\n      }\n    }\n    if ( !v4 && v3 < 0xD0000000 )\n      goto LABEL_13;\n    goto LABEL_10;\n  }\n  LODWORD(v5) = sub_5ADAA0(a1, HIDWORD(a1));\n  *(_BYTE *)a3 = -77;\n  return (char *)v5;\n}\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "11k",
  "tags": [
    "ida",
    "hexrays",
    "flirt-signatures"
  ],
  "user": "Roberto Andrade",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "Read this here:\nhttps://www.hex-rays.com/products/ida/tech/flirt/index.shtml\n\nI think they overhauled the FLIRT system in a recent version of IDA.\nOverall it works pretty well, but there is a lot of room for improvement.\nIt's kind of like \"finding a needle in a haystack\".\n\nIt's annoying when the FLIRT names so many false positives.\nIt assumes a match on just a partial signature match from the first so many bytes of \na function.  Note depending on the build options library functions can be static, using a DLL, or inlined, plus the generated code can depend on optimization settings (thus signitures not matching).\nThere is probably a lot of room for improvement that uses a more exacting system other then FLIRT.\n\nAlso related that might be interesting is \"GraphSlick\" that can find  inlined functions:\n\n\"This plugin automates detection of inlined functions. It highlights similar groups of nodes and allows you to group them, simplifying complex functions. The authors provide an accompanying presentation which explains the algorithms behind the plugin and shows sample use cases.\"\n\nhttps://github.com/nihilus/graphslick\n\n",
      "votes": "2",
      "user": "Sirmabus",
      "time": "Dec 6, 2014 at 22:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}