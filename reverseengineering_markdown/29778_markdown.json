{
  "title": "How to restore struct fields",
  "link": "https://reverseengineering.stackexchange.com/questions/29778/how-to-restore-struct-fields",
  "content": "I have an object named ComputeService::RPC that is being used as input in a function inside a binary file:\n\n```\n__int64 __fastcall ComputeService::Rpc::GetClientProcessId(ComputeService::Rpc *this)  \npc *this)\n{\n  unsigned int v1; // ebx\n  int RpcCallAttributes[32]; // [rsp+20h] [rbp-98h] BYREF\n\n  v1 = -1;\n  memset_0(RpcCallAttributes, 0, 0x78ui64);\n  RpcCallAttributes[1] = 16;\n  RpcCallAttributes[0] = 3;\n  if ( !RpcServerInqCallAttributesW(0i64, RpcCallAttributes) )\n    return (unsigned int)RpcCallAttributes[16];\n  return v1;\n}\n\n```\n* I used the Pseudocode in IDA to extract this information.\n\nI went to the window of the \"Local Types\" and it shows that it is a struct but that's it.\n\n\nIs there a way to check what are the fields inside this struct?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "619",
  "tags": [
    "ida",
    "c++",
    "decompile",
    "struct"
  ],
  "user": "E235",
  "time": "Dec 26, 2021 at 12:52",
  "comments": [],
  "answers_data": [
    {
      "content": "IDA knew that there was a struct named ComputeService::RPC due to a mangled name containing a reference to it -- for example, a mangled name for the function shown in your question. However, IDA did not have a struct declaration for it, so it created an empty struct -- you can tell this because the Description field for that entry simply says struct. If IDA had had access to a struct declaration, you would see it in your second screenshot.\n\nSo the short answer is: no, it does not appear that you have access to the struct declaration (e.g. from a PDB file with full type information), otherwise IDA would have already created it. You're going to have to reconstruct it yourself. However, you might also want to see Ghidra 10.0's new features for exactly this type of situation:\n\n",
      "votes": "3",
      "user": "Rolf Rolles",
      "time": "Dec 26, 2021 at 22:01",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The old fashion way. Follow that pointer around through the assembly and see what offsets are used and how. If you can find where it's created, you can know it's total size. If you can debug the program live you can set watch points and see what data actually gets put into each offset. The size of the 'objects' manipulated at each offset and how they're used can clue you in to what they are. If you're really lucky some will get passed to system calls, OS APIs, or other well documented functions so you can just look up the expected arguments.\n\nIf you're going to do that, you'll need to refresh structure padding/packing. You might be able to locate the RTTI if its a virtual class or ever used as part of an exception which would give you more hints.\n\n",
      "votes": "2",
      "user": "Thomas Mouton",
      "time": "Dec 29, 2021 at 11:24",
      "is_accepted": false,
      "comments": []
    }
  ]
}