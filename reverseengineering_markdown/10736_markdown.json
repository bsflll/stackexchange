{
  "title": "How to reverse a dll and call its functions?",
  "link": "https://reverseengineering.stackexchange.com/questions/10736/how-to-reverse-a-dll-and-call-its-functions",
  "content": "I have got a custom.dll which is utilized in a larger application. The application executable imports this dll to use its functionality. But this functionality is not used through out the life cycle of the application but only when a specific event occurs. for instance when I input something in the application console a new thread would be created and some of the functionality of the given dll would be used. Now the problem is I am unable to find out what is exactly going on in the dll without having that application executable. I only have the dll file. I want to reverse it. Just like debugging an exe file and go through the registers step by step to find out what is what and why something happens, simply perform a dynamic analysis on the dll instead of the static one.\n\nTo be more specific, the dll file creates a specific string, I want to know how that string is created and where it is stored for console usage.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "13k",
  "tags": [
    "disassembly",
    "debuggers",
    "dll",
    "patch-reversing"
  ],
  "user": "FreeMind",
  "time": "Aug 28, 2015 at 20:17",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use OllyDbg's loaddll.exe to load a DLL and call (and debug) its functions:\n\n\n\n",
      "votes": "6",
      "user": "Jason Geffner",
      "time": "Aug 28, 2015 at 21:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "FreeMind",
          "text": "How should I know functions arguments without even having them reversed?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "You'd probably want to reverse engineer them with IDA Pro to find out how many arguments they take, what the argument types are, etc.",
          "time": null
        }
      ]
    }
  ]
}