{
  "title": "Windows XP kernel debugging",
  "link": "https://reverseengineering.stackexchange.com/questions/13805/windows-xp-kernel-debugging",
  "content": "I'm trying to debug Windows XP's kernel with KD but every time I start the debugger,it seem to crash.\n\nSetup\n\nWindows 10 (host machine,running kd)\n\nWindows XP x86 SP3 VM (being debugged)\n\nWhen I try to connect to my VM I use:\nkd -y srv*c:\\symbols*https://msdl.microsoft.com/download/symbols -k com:port=\\\\.\\pipe\\com_1,pipe\n\nAfter which I get this output:\n\n```\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nOpened \\\\.\\pipe\\com_1\nKernel Debug Target Status: [no_debuggee]; Retries: [0] times in last [7] seconds.\nWaiting to reconnect...\nUnable to read head of debugger data list, Win32 error 0n56\nConnected to Windows XP 2600 x86 compatible target at (Mon Oct 24 20:21:44.286 2016 (UTC + 2:00)), ptr64 FALSE\nKernel Debugger connection established.\n\n************* Symbol Path validation summary **************\nResponse                         Time (ms)     Location\nDeferred                                       srv*c:\\symbols*https://msdl.microsoft.com/download/symbols\nDeferred                                       srv*c:symbols*http://msdl.microsoft.com/download/symbols\nSymbol search path is: srv*c:\\symbols*https://msdl.microsoft.com/download/symbols;srv*c:symbols*http://msdl.microsoft.com/download/symbols\nExecutable search path is:\nWindows XP Kernel Version 2600 UP Free x86 compatible\nBuilt by: 2600.xpsp_sp3_qfe.130704-0421\nMachine Name:\nKernel base = 0x804d7000 PsLoadedModuleList = 0x805541c0\nSystem Uptime: not available\nxReadDWORDFromTheRegistry/ZwQueryValueKey: NtStatus = c0000034\nERROR: DavReadRegistryValues/RegQueryValueExW(4). WStatus = 127\nERROR: DavReadRegistryValues/RegQueryValueExW(5). WStatus = 127\nERROR: DavReadRegistryValues/RegQueryValueExW(6). WStatus = 127\nwatchdog!WdUpdateRecoveryState: Recovery enabled.\nBreak instruction exception - code 80000003 (first chance)\n*******************************************************************************\n*                                                                             *\n*   You are seeing this message because you pressed either                    *\n*       CTRL+C (if you run console kernel debugger) or,                       *\n*       CTRL+BREAK (if you run GUI kernel debugger),                          *\n*   on your debugger machine's keyboard.                                      *\n*                                                                             *\n*                   THIS IS NOT A BUG OR A SYSTEM CRASH                       *\n*                                                                             *\n* If you did not intend to break into the debugger, press the \"g\" key, then   *\n* press the \"Enter\" key now.  This message might immediately reappear.  If it *\n* does, press \"g\" and \"Enter\" again.                                          *\n*                                                                             *\n*******************************************************************************\nnt+0x50d2c:\n80527d2c cc              int     3\nkd>\n\n```\nProblems\n\nEDIT 1: whatever I had with 'g' is gone,and I can run the XP VM.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "debugging",
    "kernel"
  ],
  "user": "shxdow",
  "time": "Oct 25, 2016 at 19:06",
  "comments": [
    {
      "user": "Martin",
      "text": "Trying to use the following variable types in KD doesn't work - how are you using it? What are you trying to do? Apart from that - have you considered using other debuggers, such as WinDbg? It has a GUI and is much more friendly to beginners.",
      "time": null
    },
    {
      "user": "shxdow",
      "text": "I.E: kd > dt PKKERNEL_ROUTINE",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "and\n\nExactly. It's not crashing, it's only putting a breakpoint at system level:\n\n```\n*******************************************************************************\n*                                                                             *\n*   You are seeing this message because you pressed either                    *\n*       CTRL+C (if you run console kernel debugger) or,                       *\n*       CTRL+BREAK (if you run GUI kernel debugger),                          *\n*   on your debugger machine's keyboard.                                      *\n*                                                                             *\n*                   THIS IS NOT A BUG OR A SYSTEM CRASH                       *\n*                                                                             *\n* If you did not intend to break into the debugger, press the \"g\" key, then   *\n* press the \"Enter\" key now.  This message might immediately reappear.  If it *\n* does, press \"g\" and \"Enter\" again.                                          *\n*                                                                             *\n*******************************************************************************\n\n```\nSimply press g then Enter. Do it again if it doesn't work, and it should run properly. Press Ctrl+C (for kd) or Ctrl+Break (for windbg) to break (i.e. \"pause\" the system) again.\n\nYou need to load the symbols for the module you're going to debug. To do so, you have a few handy commands:\n\nTo find KeInitializeApc, you would need to use the x command, like this:\n\n```\n0: kd> x *!KeInitializeAPC\n82aebdf3          nt!KeInitializeApc (<no parameter info>)\n\n```\nAs you can see, the command shows us the offset of the function (you'll use it later with u), its module (nt), and its full, correct name (nt!KeInitializeApc).\n\nThe x command looks like:\n\n```\nx module!symbol\n\n```\nYou can use wildcards like in my example above, specify options, etc. More info about the command in MSDN.\n\nTL;DR\n\nTo find KeInitializeApc, you'd do:\n\n```\nkd> .symfix # make the debugger download symbols it needs\nkd> .reload # reload symbols NOW\nkd> x *!KeInitializeAPC # find desired function\n82aebdf3          nt!KeInitializeApc (<no parameter info>)\nkd> u 82aebdf3 # unassemble (disassemble)\nnt!KeInitializeApc:\n82aebdf3 8bff            mov     edi,edi\n82aebdf5 55              push    ebp\n82aebdf6 8bec            mov     ebp,esp\n82aebdf8 8b4508          mov     eax,dword ptr [ebp+8]\n82aebdfb 8b5510          mov     edx,dword ptr [ebp+10h]\n82aebdfe 8b4d0c          mov     ecx,dword ptr [ebp+0Ch]\n82aebe01 c60012          mov     byte ptr [eax],12h\n82aebe04 c6400230        mov     byte ptr [eax+2],30h\n\n```\nFrom there, the decompilation is up to you. You now have the disassembly. I used the u command, which means unassemble. You can also use uf (unassemble function) to get a more function-friendly output, like this:\n\n```\nkd> uf 82aebdf3 # unassemble function\nnt!KeInitializeApc:\n82aebdf3 8bff            mov     edi,edi\n82aebdf5 55              push    ebp\n82aebdf6 8bec            mov     ebp,esp\n82aebdf8 8b4508          mov     eax,dword ptr [ebp+8]\n82aebdfb 8b5510          mov     edx,dword ptr [ebp+10h]\n82aebdfe 8b4d0c          mov     ecx,dword ptr [ebp+0Ch]\n82aebe01 c60012          mov     byte ptr [eax],12h\n82aebe04 c6400230        mov     byte ptr [eax+2],30h\n82aebe08 83fa02          cmp     edx,2\n82aebe0b 7506            jne     nt!KeInitializeApc+0x20 (82aebe13)  Branch\n\nnt!KeInitializeApc+0x1a:\n82aebe0d 8a9134010000    mov     dl,byte ptr [ecx+134h]\n\nnt!KeInitializeApc+0x20:\n82aebe13 894808          mov     dword ptr [eax+8],ecx\n...\n\n```\nEdit\n\nI dumped the PDBs and found no parameter info, so I'd guess that Microsoft simply didn't release it.\n\nHere's what I did:\n\n(you can find symchk.exe in the same folder as windbg.exe)\n\nAdditionally, I downloaded checked symbols (they supposedly have more information in them) and repeated the process for those, but couldn't find anything either.\n\nWhen you press g, you're basically telling the debugger to run the OS. Whenever it is running, the debugger can't do anything but wait until it breaks. Since the OS is running normally, it will not stop until you manually break. Therefore, you have to break before inputting any command.\n\nApparently, there aren't any Ke* symbols:\n\n```\nkd> dt nt*!Ke*                             # nothing here\nkd> dt nt!LIST_ENTRY*                     # Symbols are working properly,\n          ntkrpamp!LIST_ENTRY64           # because this works\n          ntkrpamp!LIST_ENTRY32\nkd> dt nt!LIST_ENTRY64                    # dt works properly. Therefore,\n   +0x000 Flink            : Uint8B       # Ke* doesn't have any symbols\n   +0x008 Blink            : Uint8B\n\n```\nYou'll have to reverse the code yourself and name the params, or find them somewhere in the internet, because apparently they aren't in the PDBs.\n\n",
      "votes": "1",
      "user": "Martin",
      "time": "Oct 25, 2016 at 20:33",
      "is_accepted": true,
      "comments": [
        {
          "user": "shxdow",
          "text": "82aebdf3          nt!KeInitializeApc (<no parameter info>). The part regarding parameters is exactly what I'm looking for. And after pressing \"g\" nothing happens,for a while, to the point that I decide to break again. Is it supposed to take long ?",
          "time": null
        },
        {
          "user": "shxdow",
          "text": "UPDATE: what ever I had with 'g' is now gone,and I can successfully run the debugged OS.",
          "time": null
        },
        {
          "user": "Martin",
          "text": "@shxdow I made an edit, please see if that answers your question.",
          "time": null
        }
      ]
    }
  ]
}