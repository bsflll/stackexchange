{
  "title": "Reversing network protocol",
  "link": "https://reverseengineering.stackexchange.com/questions/2474/reversing-network-protocol",
  "content": "I have a DVR that sends video over Ethernet using its own propriety TCP protocol. I want to write a VLC module to view the video, rather than the supplied DxClient.exe. I have captured traffic in wireshark and attempted to reverse engineer the client with IDA Pro, from what I can tell the client does some kind of handshake authentication, the DVR then sends 2 network packets (always 1514 bytes long), the client sends a TCP ACK and 2 more packets are transmitted, etc.etc... forever. From what I can tell the client uses Microsoft's AVIFIL32 library to decompress the packets to what essentially become AVI file frames.\n\nThe problem is I don't understand how these frames are encoded or if they even are AVI frames. Can anyone help me, here is the data payload from 2 packets:\n\nhttp://pastebin.com/2VDu2Tc2\n\nhttp://pastebin.com/L3Zi3VqU\n\n",
  "votes": "12",
  "answers": 3,
  "views": "9k",
  "tags": [
    "file-format",
    "sniffing",
    "wireshark"
  ],
  "user": "Jamie",
  "time": "Jul 15, 2013 at 16:35",
  "comments": [
    {
      "user": "PSS",
      "text": "Would you be able to provide small pcap capture file, which includes handshake?",
      "time": null
    },
    {
      "user": "Jamie",
      "text": "dropbox.com/s/dbtj3jy7d4s4z6p/cctv%201.pcapng dropbox.com/s/1zf1ssoyo7ur4sk/DxClient2.7.1-ENG.exe and the DxClient executable. The protocol seems quite poorly designed (in my opinion) using TCP instead of UDP for streaming media seems like a poor decision. I think wireshark just picks it up as HTTP traffic because I am using port 8080",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can try Netzob tool. This is a tool dedicated to reverse engineering protocols.\n\nYou can also take a look at CANAPE : http://www.contextis.com/research/tools/canape/\n\n",
      "votes": "13",
      "user": "Steeve",
      "time": "Oct 7, 2013 at 18:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "PirateApp",
          "text": "most links are broken",
          "time": null
        }
      ]
    },
    {
      "content": "I can't give you a specific solution, though I can tell you a tool to make reverse engineering a protocol easier.\n\nScapy is a python packet manipulation tool. One of the problems you have is, that wireshark doesn't know those packets. With Scapy its very easy to build and dissect strange/own packets. This will definetly help when you start to reverse engineer with IDA how a packet is build. \n\nHere is an example of a UDP Layer definition:\n\n```\nclass UDP(Packet):\n    name = \"UDP\"\n    fields_desc = [ ShortEnumField(\"sport\", 53, UDP_SERVICES),\n                    ShortEnumField(\"dport\", 53, UDP_SERVICES),\n                    ShortField(\"len\", None),\n                    XShortField(\"chksum\", None), ]\n\n```\nYou can create your own layer now and try to make sense of the packet data by reverse engineering the packet build process with IDA and rebuild the protocol with scapy.\n\n",
      "votes": "9",
      "user": "samuirai",
      "time": "Jul 15, 2013 at 14:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "PirateApp",
          "text": "could you elaborate more on this? your build and dissect link is broken.",
          "time": null
        }
      ]
    },
    {
      "content": "From what I have recently gathered DxClient is designed as a client for DVR Netview technology. Just by looking at functionality of the DxClient, it is clear that it is more then just binary transfer of AVI formatted stream. I think, it is safe to assume, that rather proprietary transfer and control protocol is used. 2 frames that you provided is just not enough to get you some help on it. I think you should try to to focus on reversing the client.  With enough time spent, you should be able to drill down to how each frame is constructed. \n\nI would recommend you getting familiar with general principals of network protocol reverse engineering. An article blog An Overview of Protocol Reverse-Engineering is a great place to start.\n\n",
      "votes": "7",
      "user": "PSS",
      "time": "Jul 15, 2013 at 16:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jamie",
          "text": "I am rather inexperienced at this, and its only because the executable imports functions like AVIFileInit, AVIFileOpenA, AVIMakeCompressedStream etc that I believe its using AVI file. Given what you say though the protocol may be a bit more advanced as it does allow things such as Pan Tilt Zoom, and changing camera views.",
          "time": null
        },
        {
          "user": "PSS",
          "text": "Exactly. The protocol most likely will included multiple streams, and all sorts of controls. As far as I could tell, functionality of the client is pretty broad. The best thing is to set breakpoints on send() and recv() and see what it does with the message data: how it puts it together and takes it apart. That way you will be able to identify key components of the custom frame.",
          "time": null
        }
      ]
    }
  ]
}