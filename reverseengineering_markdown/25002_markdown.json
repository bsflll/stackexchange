{
  "title": "Guidelines for dealing with obfuscated code",
  "link": "https://reverseengineering.stackexchange.com/questions/25002/guidelines-for-dealing-with-obfuscated-code",
  "content": "I have taken a deep dive into reversing software with IDA, I used Ghidra before. I have already solved a couple of basic crackmes now I have targeted another one which's code is obfuscated, also has anti-debugging features and as far as I can understand it modifies its code during the the tls callbacks (at least thats what IDA indicated when stepping through the tls callbacks, there are 3 of them). I suspect the tls callbacks check for debuggers and also it unpacks the executable.\n\nI would like to ask a couple of questions in connection with this.\n\nI am looking for any general or specific guidelines you guys can throw me, in order to defeat their obfuscation.\n\nThank you\n\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "obfuscation",
    "anti-debugging",
    "deobfuscation"
  ],
  "user": "geo10",
  "time": "May 13, 2020 at 11:43",
  "comments": [],
  "answers_data": [
    {
      "content": "You can press Ctrl+E to select the TLS entry point.\nsee here:\nhttps://hex-rays.com/blog/tls-callbacks/\n\n",
      "votes": "2",
      "user": "user1438233",
      "time": "May 1, 2022 at 7:10",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There are multiple ways an application could use to detect the debugger presence using NtQueryInformationProcess() since it retrieves information from a process for example most common use:\n\nProcessDebugPort, which receives a DWORD value equal to 0xFFFFFFFF (decimal -1) if the process is being debugged.\n\n```\n lea eax, [dwReturned]\n push eax ; ReturnLength\n push 4   ; ProcessInformationLength\n lea ecx, [dwProcessDebugPort]\n push ecx ; ProcessInformation\n push 7   ; ProcessInformationClass\n push -1  ; ProcessHandle\n call NtQueryInformationProcess\n inc dword ptr [dwProcessDebugPort]\n jz being_debugged  \nbeing_debugged:\n push -1\n call ExitProces\n\n```\nA simple solution is to set a breakpoint where NtQueryInformationProcess() returns and when the breakpoint is hit patch with DWORD value 0.\n\nFor Obfuscation, there is no direct path to deal with it but I usually try to classify and read the ASM code carefully to identify any known obfuscation techniques first such as:\n\nand then simplify it in order to identify the logic or any anti debugging trick.\n\n",
      "votes": "2",
      "user": "CPUKiller",
      "time": "Feb 6, 2023 at 3:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}