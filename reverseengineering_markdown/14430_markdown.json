{
  "title": "How is IDAPython API structured?",
  "link": "https://reverseengineering.stackexchange.com/questions/14430/how-is-idapython-api-structured",
  "content": "In IDA's documentation, there are references to modules named ida_*, as well as idc, idaapi and idautils. The former modules seem to be the lower level ones. Almost always it says that IDA Plugin SDK API wrapper: <some_module>. \n\nI have a few specific questions about the documentation and IDAPython:\n\n",
  "votes": "8",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "idapython",
    "idapro-sdk"
  ],
  "user": "sherlock",
  "time": "Jan 17, 2017 at 22:35",
  "comments": [],
  "answers_data": [
    {
      "content": "A bit of history: (aka an aging guy blabbering about) \n\nIn the old days, we didn't have python in IDA and when an individual wanted to develop an IDA plugin he had to implement it in C and use the SDK available from hex-ray's download center using credentials received when you purchase an IDA license. We did have, however, IDC. IDC is IDA's old, proprietary and somewhat deprecated scripting language, this is not related to C however there is evident effort using a C-like syntax. It was commonly used in the past but IDAPython nearly replaced it completely. The only reason to see IDC now is for old code, that precedes IDAPython.\n\nSince then, IDAPython was developed (originally as a plugin using the aforementioned SDK, and then adopted by hex-rays and made part of IDA). Up until the recent IDA 6.95, we only had a single module exposing all of IDA's C SDK in python. That module was idaapi. idc is implementing higher level functions that were migrated from IDC into IDAPython. idautils implements some more high level functions, that weren't there before. those are rough divisions, and not entirely accurate. The important point here is that there was a single (long) python file exposing all SDK functions (that are exposed to python using SWIG).\n\nIn IDA 6.95 we still have that, but it was also the first version to include multiple ida_* modules where are to replace the broad idaapi. idaapi is only included in 6.95 for backwards compatibility and should be expected to be dropped in IDA 7. Generally, the names of the modules (what follows the ida_ prefix) are the names of the header files in which those functions are defined. For example, ida_lines will expose functions defined in lines.h.\n\nActual answers:\n\nDeveloping for IDA:\n\nA person interested in developing for IDA has three options:\n\n",
      "votes": "11",
      "user": "NirIzr",
      "time": "Feb 11, 2019 at 14:52",
      "is_accepted": true,
      "comments": [
        {
          "user": "sherlock",
          "text": "\"idc is implementing higher level functions that were migrated from IDC into IDAPython\" - what is IDC in (CAPITAL) here? Can you please edit your original answer to make it clearer?",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "Can plugins be written in both C and Python?",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "(Edited) See 2nd half of first paragraph for what's IDC. Yes, you can develop IDA plugins in C. Plugin developers seem to prefer python over C however.",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "Is IDC different from IDA's C-based SDK? I'm asking because the documentation says IDC to be 'C-like' (which is different from the language being 'C' itself). Could IDC be used for writing plugins? In that case, one can theoretically write a plugin in either of the three languages: IDC, IDA C-based SDK, IDAPython.  Please update your answer above. It's already so precise, clean and to-the-point that I just want it to be better for future readers.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "See additional edit.",
          "time": null
        }
      ]
    }
  ]
}