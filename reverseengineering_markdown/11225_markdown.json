{
  "title": "using GDB and dealing with breakpoint detection",
  "link": "https://reverseengineering.stackexchange.com/questions/11225/using-gdb-and-dealing-with-breakpoint-detection",
  "content": "I am trying to solve a reverse engineering challenge using using gdb. I can run the program inside it but when I set a breakpoint at main then I get\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n\n```\nSetting it at something even earlier like _init (there are two BTW) also was not very fruitful, could it be that the program might be corrupting itself at some point that I didn't catch? Have a look at the backtrace for that matter:\n\n```\n#0  0x47048474 in ?? ()\n#1  0x0804864a in __handle_global_ctors ()\n#2  0x080488c5 in __do_global_ctors_aux ()\n#3  0x08048349 in _init ()\n\n```\nNow I tried to statically decompile it using a simple recursive traversal disassembler (not IDA) but I couldn't find any traces of CC (INT 3) so I guess another layer of obfuscation has been added.\n\nI also tried record with no success:\n\n```\nBreakpoint 5, 0x0804833a in _init ()\n(gdb) record\n(gdb) c\nContinuing.\n(null)Process record: failed to record execution log.\n\n```\nOh and I couldn't find the hex string \"47048474\" either.\n\nAny more ideas what can help in such a situation? Maybe detecting the self-modification?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "linux",
    "gdb",
    "anti-debugging"
  ],
  "user": "phk",
  "time": "Nov 1, 2015 at 21:16",
  "comments": [
    {
      "user": "w s",
      "text": "Did you try to use hardware breakpoints (hbreak gdb command) ?",
      "time": null
    },
    {
      "user": "phk",
      "text": "Good idea! But sadly it says: \"No hardware breakpoint support in the target.\" :/ (x86 executable on x86_64, file says ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.4.1, not stripped)",
      "time": null
    },
    {
      "user": "phk",
      "text": "Oops, as mentioned at reverseengineering.stackexchange.com/questions/11225/â€¦ the prog simply has to be started first for hbreak to work. Finally I can continue.",
      "time": null
    },
    {
      "user": "savram",
      "text": "What challenge is it? Can you link it?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "So, just to clarify what is already present in the comments:\n\ngdb's break will place an ordinary breakpoint, which works by taking the in-memory image of the process and swapping its original instruction for a specific interrupt instruction. If I understand correctly, hbreak tells the OS to monitor every instruction an compare the address of current instruction to the address of breakpoint (i.e. no modification of the in-memory image). However, the number of hardware breakpoints available at a time is limited.\n\nTo place a hardware breakpoint with hbreak, your program must be already running with gdb's run. To achieve that, you should place an ordinary breakpoint somewhere at the very beginning (let's say, _start function), successfully break there, place a hardware breakpoint and then remove the original ordinary breakpoint.\n\n",
      "votes": "1",
      "user": "alisianoi",
      "time": "Oct 30, 2017 at 9:27",
      "is_accepted": true,
      "comments": [
        {
          "user": "phk",
          "text": "Is the OS really the one doing the monitoring? I thought this is where the hardware assistance comes into play.",
          "time": null
        }
      ]
    }
  ]
}