{
  "title": "Unable to figure out how to map segments in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/20414/unable-to-figure-out-how-to-map-segments-in-ida",
  "content": "I have a 2 MB executable that I'm attempting to reverse engineer. It's executed on a 16-bit 8086 CPU.\n\nThe segments go from 4000 (0x140000) to F000 (0x1F0000).\n\nI'm attempting to map the segments in the Program Segmentation window, but when doing so, addresses for call / jump operations fail to resolve when converting the entrypoint to code.\n\nTaking the final segment as an example, I set the Start Address to 0x1F0000, and the End Address to 0x200000. I set the base to 0xF000, as this is how it's referred to in the machine code.\n\nI do the same with the other segments, including the problem segment (0xD000 -> 0x1D0000).\n\nWhen converting to code, the resulting line is resolved as follows:\n\n```\njmp far ptr 0D000h:1Ah\n\n```\nThis is as expected, jumping to segment 0xD000, with an offset of 0x1A, however IDA is not happy with this, complaining about it with the NONAME and BOUNDS errors.\n\nI have no idea how to properly map this in IDA. Can someone point me in the right direction?\n\n[edit]\n\nFor reference, I already have the full list of segments I want to map along with their binary addresses:\n\n2000:0x1F0000\n\n3000:0x1F0000\n\n4000:0x140000\n\n5000:0x150000\n\n6000:0x160000\n\n7000:0x170000\n\n8000:0x180000\n\n9000:0x190000\n\nA000:0x1A0000\n\nB000:0x1B0000\n\nC000:0x1C0000\n\nD000:0x1D0000\n\nE000:0x1E0000\n\nF000:0x1F0000\n\n",
  "votes": "2",
  "answers": 0,
  "views": "505",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "lyptt",
  "time": "Jan 19, 2019 at 11:35",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "How did you get 0x140000 from 4000?",
      "time": null
    },
    {
      "user": "lyptt",
      "text": "@IgorSkochinsky 140000 is the file offset, 4000 is the base segment offset.",
      "time": null
    },
    {
      "user": "lyptt",
      "text": "For this architecture, segments are mapped from the end of the file - 64kb (F000, 0x1F0000) backwards, in 64kb chunks.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "On a normal 8086, segment 4000 would be mapped to 40000. You also have dupes in your list. I think youâ€™re not explaining everything.",
      "time": null
    },
    {
      "user": "lyptt",
      "text": "@IgorSkochinsky It's not a normal 8086, it's an 8086 compatible clone. On this architecture the first two segments are mapped to the same offset as the last one.",
      "time": null
    }
  ],
  "answers_data": []
}