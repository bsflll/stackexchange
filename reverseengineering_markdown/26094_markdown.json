{
  "title": "idapython: how to apply hexrays types to disassembly interface",
  "link": "https://reverseengineering.stackexchange.com/questions/26094/idapython-how-to-apply-hexrays-types-to-disassembly-interface",
  "content": "I am using idapro 7.5 to get variable information from binaries.\n\nConsider following simple code:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  int i, N, array[10];\n\n  N = atoi(argv[10]);\n\n  array[N] = N;\n  array[12] = N;\n  array[0] = 8;\n\n  for(i=0 ; i<N ; i++)\n    array[i] = N;\n\n  printf(\"%d %d  \n\", array[12], array[5]);\n  return 0;\n}\n\n```\nUsing idapython, I can get function information like stack variables, their sizes, types, etc. using something like -\n\n```\nfor ea in idautils.Functions():\n    for mem in ida_struct.get_struc(idc.get_frame_id(ea)).members:\n        name = ida_struct.get_member_name(mem.id)\n        size = ida_struct.get_member_size(mem)\n        offset = mem.get_soff()\n\n```\nSimilarly, I can get global variable information like their name and addresses.\n\nNow, this works fine (particularly in above binary) and I can get array with a size of 12 on correct offset (this makes sense, as I have compiled binary using -g).\n\nBut, when I strip the binary, I can't get array size correctly with the above code (this is expected). When I use hex rays -\n\n\n\nHere, ida decompiler was able to recover correct array bounds using decompiler algorithms. And I can also synchronize this with disassembly interface using Synchronize with option in Gui (I assume synchronize function is used to apply predicted types or other information to disassembly interface - I maybe wrong here, please forgive my ignorance).\n\nI would like to know if there is any way I can do that using idapython (I can see some endpoints like sync_sources in ida_kernwin), so that I can use the above code to get variable properties predicted using hex rays. I am familiar with ghidra and you can apply ghidra decompiler predictions to the listing analysis (just like synchronization in ida) using:\n\n```\nHighFunctionDBUtil.commitLocalsToDatabase(high_func, SourceType.ANALYSIS)\n\n```\nThus variables get updated in the analysis.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "421",
  "tags": [
    "ida",
    "idapython",
    "hexrays"
  ],
  "user": "R4444",
  "time": "Oct 10, 2020 at 3:42",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "You're going to have to be more specific about what you want. Generally speaking, it's not always possible to take the type information from Hex-Rays' stack variables and apply it to the disassembly stack frame. There are two main reasons for this, off the top of my head: mapped variables eliminating Hex-Rays stack variables, and forced variables creating more than one variable at a single stack location.",
      "time": null
    },
    {
      "user": "R4444",
      "text": "Rolf, Thanks for your reply, in short I want to use type (mostly array bounds) information predicted by hexrays, in case of stripped binaries. I am aware of the reasons you mentioned. but, I am doing this to check what results i could get on certain benchmarks. Also, as there is an option for sync in gui, I am interested in checking it's capability.",
      "time": null
    },
    {
      "user": "R4444",
      "text": "Also, please note that I assumed \"synchronization\" means applying hexrays predicted information to disassembly interface, if this is not true then forgive my ignorance",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "“Synchronize with” only syncs the cursor location in both views.",
      "time": null
    },
    {
      "user": "R4444",
      "text": "ahh, thanks Igor, in that case, \"synchronize with\" is not what I want to do. I'd like to \"apply\" decompiler predictions to the disassembly interface. Is this automatically possible at all?",
      "time": null
    }
  ],
  "answers_data": []
}