{
  "title": "How does this local var get assigned?",
  "link": "https://reverseengineering.stackexchange.com/questions/14814/how-does-this-local-var-get-assigned",
  "content": "I'm using IDA PRO to disassemble a function, which produces a control flow that looks like this:\n\n```\nstart_IE proc near\n\nBuffer= dword ptr -230h\nvar_22C= byte ptr -22Ch\nhFile= dword ptr -30h\nhInternet= dword ptr -2Ch\nszAgent= byte ptr -28h\ndwNumberOfBytesRead= dword ptr -8\nvar_4= dword ptr -4\narg_0= dword ptr  8\n\n;Do stuff that has nothing to do with ebp+var22C\n\nmov     al, [ebp+var_22C]\njmp     short return\n\nreturn:\nmov     esp, ebp\npop     ebp\nretn\nstart_IE endp\n\n```\nI've cut out a lot of irrelevant code, but the only 2 times that var_22C appears in this procedure has been shown above.\n\nI'm having a difficult time finding out what value the data pointed to by var_22C will be since it's given no obvious assignment here.\n\nCode before/after the function call in the caller:\n\n```\nmov     ecx, [ebp+var_C]\npush    ecx             ; command char\ncall    start_IE\nadd     esp, 4\nmov     [ebp+var_8], al\nmovsx   edx, [ebp+var_8]\ntest    edx, edx\njnz     short success\n\n```\nIt only has 1 argument passed to it, which should be arg_0... We see that the return value from Var_22C is placed into [ebp+var_8] back in the caller afterwards.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "stack-variables",
    "local-variables"
  ],
  "user": "the_endian",
  "time": "Mar 3, 2017 at 18:48",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "show the code referencing Buffer.",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "Is it possible that there's a return value variable and it's simply uninitialized? What you're describing is producible from valid C code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "probably the Buffer variable is accessed indirectly by one of the called functions and var_22C is actually part of the buffer.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Mar 6, 2017 at 20:18",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As far as I can see this mov     al, [ebp+var_22C] command works with 8 bit data (according to name al), and there is a possibility that this var_22C variable is assigned as a part of bigger entity, for example as dword, which will require different offset.\n\nI'd suggest to watch to stack accesses around this offset, specifically ,as @Igor Skochinsky says in comment, in a code related to Buffer. \n\n",
      "votes": "1",
      "user": "w s",
      "time": "Mar 6, 2017 at 9:43",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "Usually when thats the case, IDA will identify the byte is also accessed as a dword and will make all references to a dword.",
          "time": null
        }
      ]
    }
  ]
}