{
  "title": "Runtime memory reading with injection",
  "link": "https://reverseengineering.stackexchange.com/questions/3623/runtime-memory-reading-with-injection",
  "content": "I'm reversing an application written in C. I have a certain function that I want to log runtime, without pausing/stopping the application. \n\nMy desired values of that function are: \n\nThen I want to read the buffer and write it into a file.\n\nFirst thing I was told to use is Immunity's LogBpHook, which worked great, but it stops the application and it becomes really slow due to this, because it's a frequently called function. \n\nThen I tried to setup FastLogHook which sounds more like what I'm after. It injects a log stub and stores encountered values, but as far as I know it can not perform further memory readings like the one I described above anyway (if it can please tell me). Also it constantly crashed my application so it's out of the question.\n\nSo I left with the idea of injecting a customized code stub that would take care of further readings and logging of the values into a file. Is there any tool that could do this, or I have to manually write+inject this assembly?\n\nHow can I log function parameters runtime, without stopping the application?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "1k",
  "tags": [
    "assembly",
    "memory",
    "immunity-debugger",
    "functions",
    "callstack"
  ],
  "user": "Dominik Antal",
  "time": "Apr 8, 2015 at 17:08",
  "comments": [],
  "answers_data": [
    {
      "content": "",
      "votes": "4",
      "user": "PhoeniX",
      "time": "Feb 5, 2014 at 14:08",
      "is_accepted": true,
      "comments": [
        {
          "user": "jbh",
          "text": "Frida is another Process Instrumentation possibility that is easy to set up. It injects Googles V8 (javascript) engine into the running process and then you can interact with the process using python bindings. They have an example of how to dump arguments of functions. Best of luck",
          "time": null
        }
      ]
    }
  ]
}