{
  "title": "Can I insert a variable right before the stack canary",
  "link": "https://reverseengineering.stackexchange.com/questions/32078/can-i-insert-a-variable-right-before-the-stack-canary",
  "content": "Can i insert a variable in c source code\nThat will be right before the stack canary, and after all local variables.\nLike I want to try to implement my own stack canary in source code, is it possible?\n\nThanks\n\nUpdate\n\nCan you please explain to me what is this code in linux source code?\n\n```\n#define STACK_CHK_GUARD \\\n  ({ uintptr_t x;                       \\\n     asm (\"mov %%fs:%c1, %0\" : \"=r\" (x)             \\\n      : \"i\" (offsetof (tcbhead_t, stack_guard))); x; })\n\n```\nIf it's in the compiler what exactly is this implantation?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "94",
  "tags": [
    "stack-protector"
  ],
  "user": "Moshe D",
  "time": "Jul 20, 2023 at 7:50",
  "comments": [
    {
      "user": "mimak",
      "text": "The macro copies the value of offsetof (tcbhead_t, stack_guard) into x and returns it",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can't control where the compiler will put a local variable on the stack. It could put it anywhere on the stack, or even eliminate it entirely (for example, hold it in a register). There's a reason that mitigations like these are implemented inside of the compiler itself and not as source-level transformations.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Jul 19, 2023 at 18:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "mimak",
          "text": "Manual stack management is possible with inline assembly, unsafe and inconvenient as it is",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "That's a horrible idea, though. You have no contract with the compiler regarding any modifications you might want to make to the size and contents of the stack frame. If you were to attempt something like that, you can expect it to break constantly. Examples would include stack-based parameter passing on x64 and unwind funclets referencing parameters via the wrong stack base address. The proper way to do this is via modifications to the compiler.",
          "time": null
        },
        {
          "user": "Moshe D",
          "text": "@RolfRolles Can you please see my update?",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "Those are platform-specific macros for retrieving the value of the stack/pointer guard canaries from thread-local storage. Meanwhile, here's the code inside of the compiler that installs said guards: github.com/gcc-mirror/gcc/blob/… And the x86 \"GCC machine description\" responsible for implementing the \"stack_protect_set\" instruction that that function generates: github.com/gcc-mirror/gcc/blob/…",
          "time": null
        }
      ]
    }
  ]
}