{
  "title": "IDA PRO does miss calls when tracing",
  "link": "https://reverseengineering.stackexchange.com/questions/19039/ida-pro-does-miss-calls-when-tracing",
  "content": "I am following this tutorial: \nenter link description here\n\nThough it uses Olly I am following with IDA.\n\nBasically i am tying to catch where a popup decision is taking place in the program.\nI though i placed a BP on the right spot.\nWhat I don't understand is this:\nWhen I placed only one BP on this location:\n\nand I run the debugger, it stops on this BP. I press F8 and it continues to \"push esi\", F8 and I get the pop up message I was looking for.\n\nHowever, when I place another BP on this location - this one was deducted from the tutorial which uses Olly.\n\nAnd i follow the same debugging procedure; I press F8 and it continues to \"push esi\", F8 and It stoops on the new BP @0043F812 and only after pressing F8 again i get the popup after it calls \"DialogBoxParamA\".\n\nSo my question is why do I not get to DialogBoxParamA @43F818 when i obly place 1 BP? How can i jump from \"DispatchMessageA\" which is an external all to @43F818 ?\n\nI'll try to visualize this:\n\n\n\nShould not I be able to follow the same trace regardless on the number of BPs? \n\nBelow are the 2 trace logs.\n1 - trace log with only 1 BP, this one is very \n\n```\nThread  Address Instruction Result\n00002378    .text:sub_442C44+2D4    Memory layout changed: 505 segments Memory layout changed: 505 segments\n00002378            ST0=FFFFFFFFFFFFFFFF ST1=FFFFFFFFFFFFFFFF ST2=FFFFFFFFFFFFFFFF ST3=FFFFFFFFFFFFFFFF ST4=FFFFFFFFFFFFFFFF ST5=FFFFFFFFFFFFFFFF ST6=FFFFFFFFFFFFFFFF ST7=FFFFFFFFFFFFFFFF CTRL=FFFF CS=0023 DS=002B ES=002B FS=0053 GS=002B SS=002B EAX=00000000 EBX=00000000 ECX=741B2E09 EDX=00000000 ESI=0018E6C0 EDI=00000000 EBP=00000000 ESP=0018E6BC EFL=00200246 XMM0= XMM1= XMM2= XMM3= XMM4= XMM5= XMM6= XMM7= MXCSR=FFFFFFFF MM0= MM1= MM2= MM3= \n00002378    .text:sub_442C44+2D4    call    TranslateMessage; Call Procedure    ECX=0018E6C0 EDX=0000000F ESP=0018E6C0 EFL=00200244 \n00002378    .text:sub_442C44+2D9    Memory layout changed: 522 segments Memory layout changed: 522 segments\n00002378    .text:sub_442C44+2D9    push    esi; lpMsg  ESP=0018E6BC EFL=00200246 \n\n```\n************* 2nd TRACE with 2 BP ****************\n\n```\nThread  Address Instruction Result\n00002280    .text:sub_442C44+2D4    Memory layout changed: 505 segments Memory layout changed: 505 segments\n00002280            ST0=FFFFFFFFFFFFFFFF ST1=FFFFFFFFFFFFFFFF ST2=FFFFFFFFFFFFFFFF ST3=FFFFFFFFFFFFFFFF ST4=FFFFFFFFFFFFFFFF ST5=FFFFFFFFFFFFFFFF ST6=FFFFFFFFFFFFFFFF ST7=FFFFFFFFFFFFFFFF CTRL=FFFF CS=0023 DS=002B ES=002B FS=0053 GS=002B SS=002B EAX=00000000 EBX=00000000 ECX=741B2E09 EDX=00000000 ESI=0018E6C0 EDI=00000000 EBP=00000000 ESP=0018E6BC EFL=00200246 XMM0= XMM1= XMM2= XMM3= XMM4= XMM5= XMM6= XMM7= MXCSR=FFFFFFFF MM0= MM1= MM2= MM3= \n00002280    .text:sub_442C44+2D4    call    TranslateMessage; Call Procedure    ECX=0018E6C0 EDX=0000000F ESP=0018E6C0 EFL=00200244 \n00002280    .text:sub_442C44+2D9    push    esi; lpMsg  ESP=0018E6BC EFL=00200246 \n00002280    .text:sub_442C44+2DA    call    DispatchMessageA; Call Procedure    ESP=0018E6B8 \n00002280    .text:DispatchMessageA  jmp     ds:__imp_DispatchMessageA; Indirect Near Jump   \n00002280    75FC7BBB        \n00002280    75FC7BBD    Memory layout changed: 522 segments Memory layout changed: 522 segments\n00002280    75FC7BBD        ESP=0018E6B4 \n00002280    75FC7BBE        EBP=0018E6B4 \n00002280    75FC7BC0        ESP=0018E6B0 \n00002280    75FC7BC2        ESP=0018E6AC \n00002280    75FC7BC5        ESP=0018E6A8 \n00002280    75FC76D7        ESP=0018E6A4 \n00002280    75FC76D9        ESP=0018E6A0 \n00002280    75FC76DE        EAX=0018E694 EBP=0018E6A4 ESP=0018E66C EFL=00200280 PF=0 ZF=0 SF=1 \n00002280    75FC76E3        EFL=00200246 PF=1 ZF=1 SF=0 \n00002280    75FC76E5        \n00002280    75FC76E8        \n00002280    75FC76EB        \n00002280    75FC76F2        \n00002280    75FC76F8        ECX=00B123FC \n00002280    75FC76FA        ZF=0 \n00002280    75FC76FC        \n00002280    75FC7702        EAX=00BB6A10 ECX=C0540000 EDX=00000000 EFL=00200200 PF=0 \n00002280    75FC7707        EBX=00BB6A10 EFL=00200202 \n00002280    75FC7709        \n00002280    75FC770B        \n00002280    75FC770D        \n00002280    75FC7713        EAX=00B123FC \n00002280    75FC7715        \n00002280    75FC7717        EAX=00000113 \n00002280    75FC771A    Memory layout changed: 527 segments Memory layout changed: 527 segments\n00002280    75FC771A        CF=1 SF=1 \n00002280    75FC771F        \n00002280    75FC788E        CF=0 PF=1 ZF=1 SF=0 \n00002280    75FC7895        \n00002280    75FC789B        CF=1 AF=1 ZF=0 SF=1 \n00002280    75FC78A0        \n00002280    75FC78A6        PF=0 \n00002280    75FC78AB        \n00002280    75FC7725        EDX=00000113 \n00002280    75FC7728        CF=0 PF=1 AF=0 ZF=1 SF=0 \n00002280    75FC772E        \n00002280    75FC792D        EAX=00000000 \n00002280    75FC7930        \n00002280    75FC7932        \n00002280    75FC7740        EAX=00BB6A10 \n00002280    75FC7742        PF=0 ZF=0 \n00002280    75FC7744        \n00002280    75FC774A        EDI=0018E6C8 \n00002280    75FC774D        ECX=0000000A \n00002280    75FC774F        \n00002280    75FC7752        EAX=0043F070 \n00002280    75FC7758    Memory layout changed: 527 segments Memory layout changed: 527 segments\n00002280    75FC7758        \n00002280    75FC775B        PF=1 ZF=1 \n00002280    75FC775F        \n00002280    75FC7765        PF=0 AF=1 ZF=0 \n00002280    75FC7768        \n00002280    75FC776E        EAX=FFFFFED3 \n00002280    75FC7774        SF=1 \n00002280    75FC7777        \n00002280    75FC777D        EAX=00000119 \n00002280    75FC7782        CF=1 PF=1 \n00002280    75FC7784        \n00002280    75FC778A        EAX=0000000A \n00002280    75FC778E        EAX=00000001 CF=0 PF=0 AF=0 SF=0 \n00002280    75FC7791        EAX=FFFFFFFE \n00002280    75FC7793        EAX=00000000 PF=1 ZF=1 \n00002280    75FC7796        ECX=00000000 \n00002280    75FC7798        PF=0 ZF=0 \n00002280    75FC779B        \n00002280    75FC779E        PF=1 ZF=1 \n00002280    75FC77A0        \n00002280    75FC77A6        ESP=0018E668 \n00002280    75FC77A8        EAX=00BB6A38 \n00002280    75FC77AB        ESP=0018E664 \n00002280    75FC77AC        ESP=0018E660 \n00002280    75FC77AF        ESP=0018E65C \n00002280    75FC77B1        ESP=0018E658 \n00002280    75FC77B4        ESP=0018E654 \n00002280    75FC77B6        ESP=0018E650 \n00002280    75FC77B9        ESP=0018E64C \n00002280    75FC77BF        EAX=000B3E35 EBX=00000113 ECX=EED71FD0 EDX=00000072 ESI=00B123FC EDI=00000000 EBP=0018E5A0 ESP=0018C1C4 PF=0 AF=1 ZF=0 \n00002280    .text:sub_43F070+7A8    call    **DialogBoxParamA**; Call Procedure EAX=0018BA94 ECX=00000000 EDX=00000001 EBP=0018BFF0 ESP=00189C28 EFL=00200200 AF=0 \n00002280    .text:sub_43F070:loc_43F81D Memory layout changed: 532 segments Memory layout changed: 532 segments\n00002280    .text:sub_43F070:loc_43F81D cmp     byte_4A6894, 0; Compare Two Operands\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "505",
  "tags": [
    "ida",
    "debugging",
    "debuggers",
    "patch-reversing"
  ],
  "user": "dandan",
  "time": "Aug 11, 2018 at 19:04",
  "comments": [
    {
      "user": "dandan",
      "text": "on the tutorial website it says: ...One note, if you are running these tutorials under 64-bit windows 7 (like I am), Olly 1.10, even my version, the call stack trick will not work....",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "TranslateMessage & DispatchgMessage are the standard windows functions when you are dealing with WinAPI and messages loops. \n\nWhen a DispatchMessage is called, the message stored in esi is processed by Windows and then  the message handler in the application is called and this is where you see your DialogBoxParamA.\n\nThe windows handler is registered in one of the fields of the WNDCLASS structure, namely lpfnWndProc. When reversing WinAPI application the most obvious place to look for interesting code is to locate the message handler code.\n\nSo in summary, when you have your 2nd breakpoint in the windows handler code, when this messages is processed you end before DialogBoxParamA. If you don';t have it there , messages is processed, Popup displayed, and you continue where you were before.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Aug 11, 2018 at 19:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "dandan",
          "text": "thank you.  is there a way to catch it by tracing with IDA? I mean to get to \"DialogBoxParamA\", if yes how?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "it's a bit strange that it's not detected but I have almost 0 knowledge about IDA's tracing. It might be that in the first scenario IDA thinks it's a windows code and does not trace that. I guess tracing is limited to the user code and not the whole system.",
          "time": null
        },
        {
          "user": "dandan",
          "text": "Thanks, Which free debugger would you recommend that you think WOULD detect it? I would use it to get to the suspected area and carry on with IDA from there.",
          "time": null
        },
        {
          "user": "dandan",
          "text": "Well, even if the debugger is not free i'd lie to know which one.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "I don;t think the problem is with the debugger - more like this tracing option. But for the windows debuggers there are numerous: Olly, x64dbg, WinDbg, radare2",
          "time": null
        }
      ]
    }
  ]
}