{
  "title": "What is patched by LX 16:32 fixup record",
  "link": "https://reverseengineering.stackexchange.com/questions/31917/what-is-patched-by-lx-1632-fixup-record",
  "content": "In LX format description in section\n3.13 Fixup Record Table, when describing SRC = DB Source type field there is such an option:\n\n06h = 16:32 Pointer fixup (48-bits).\n\n1. How many bytes does this fixup change and how? I found a particular example of such fixup, it points to 2nd byte of a certain jump instruction:\n\n66EA665544332211  jmp dword 0x1122:0x33445566\n\nI assume it at least changes 4-byte offset (33445566), but does it also change 16 bit selector (1122)?\n\n2. Where can I find more in-depth description of different fixup kinds? IBM doc seems to assume it to be common knowledge.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "79",
  "tags": [
    "x86"
  ],
  "user": "Uprooted",
  "time": "May 30, 2023 at 8:08",
  "comments": [
    {
      "user": "fpmurphy",
      "text": "For more information about LX (16-bit Linear Executable) fixup types, see textfiles.com/programming/FORMATS/lxexe.txt in the section entitled \"Fixup Record Table\"",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For such fixup both selector and offset parts are patched so that they point to the actual location of the fixup's target.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jun 4, 2023 at 21:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "Uprooted",
          "text": "I suppose you're right, yet it's unclear where selector comes from, fixup record contains only 'target' field for 32 bit offset part. I should ask another question with concrete fixup data.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "selector comes from wherever the target segment was actually loaded in the memory",
          "time": null
        }
      ]
    }
  ]
}