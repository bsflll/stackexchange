{
  "title": "Red Alert 2 Windows 8 DirectDraw compatibility",
  "link": "https://reverseengineering.stackexchange.com/questions/6260/red-alert-2-windows-8-directdraw-compatibility",
  "content": "The game Red Alert 2 runs on Windows 8, but as soon as I inject a DLL (via ddraw.dll or an extra DLL) it stops drawing buttons on the main menu. With the DLL it still work fine in windowed mode and it still works fine on Windows 7. \nThe DLL is basically just\n\n```\ntypedef HRESULT(WINAPI* LPDIRECTDRAWCREATE)(GUID*, LPDIRECTDRAW*, IUnknown*);\nHMODULE dd_dll = LoadLibrary(\"system32/ddraw.dll\");\nLPDIRECTDRAWCREATE dd_create = reinterpret_cast<LPDIRECTDRAWCREATE>(GetProcAddress(dd_dll, \"DirectDrawCreate\"));\nreturn dd_create(lpGUID, lplpDD, pUnkOuter);\n\n```\nI'm guessing some kind of automatic compatibility mode is activated for the original game that gets disabled by the DLL, but how do I find out what's causing this?\nIt's important as the DLL provides improvements for gamers that should also be available on Windows 8 (and beyond).\n\n",
  "votes": "9",
  "answers": 1,
  "views": "1k",
  "tags": [
    "windows",
    "c++",
    "dll-injection",
    "windows-8"
  ],
  "user": "XTF",
  "time": "Sep 19, 2014 at 14:06",
  "comments": [
    {
      "user": "DCoder",
      "text": "Do you always inject the same DLL? Does the same thing happen if you inject a completely different DLL?",
      "time": null
    },
    {
      "user": "SSpoke",
      "text": "Possibly system32/ddraw.dll is different location on windows 8? it might be the way you inject the dll that causes this problem.",
      "time": null
    },
    {
      "user": "SSpoke",
      "text": "It also might be the way you inject the dll that causes this problem. I found when injecting dll files its always best to set debug privileges with AdjustTokenPrivileges before using OpenProcess. Also sometimes allocating the dll into heap of target doesn't work at all because WriteProcessMemory is protected but then again just allocating path of the dll works just fine. Also in the end try using CreateRemoteThread method. Check to see if your hooked kernel32.dll LoadLibraryA actually works right when it Loads your dll file.",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "Perhaps use another method to inject your DLL that does not require DLL Hijacking? Also, executing the direct draw code in your DLL's main function could also cause troubles. perhaps create a thread and do that there?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "If a shim is used for the game to work properly, it stands to reason that some other version of said DLL from SxS is picked or that some patching happens unbeknownst to you. There are tools to investigate the shims applied and this should give you a clue where to look ...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "",
      "votes": "1",
      "user": "chentiangemalc",
      "time": "Nov 29, 2020 at 23:13",
      "is_accepted": false,
      "comments": []
    }
  ]
}