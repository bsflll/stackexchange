{
  "title": "Is there a way to exploit 4-byte integer overflows to -1? [memcpy(dest, source, -1)]",
  "link": "https://reverseengineering.stackexchange.com/questions/8309/is-there-a-way-to-exploit-4-byte-integer-overflows-to-1-memcpydest-source",
  "content": "I was debugging a program, and discovered a line of code like so:\n\n```\nmemcpy(stack_variable, attacker_supplied, read_length_from_packet(pPacket));\n\n```\nThe read_length_from_packet returns -1 if the length is bigger than 0x1FF, but seems they forgot to actually check for -1.\n\nAnd since memcpy takes a size_t (unsigned), the -1 gets converted to 0xFFFFFFFF, and I can massively override the stack, so much it writes on memory it shouldn't, raises an exception, and crashes.\n\nIs there a way to make an exploit out of this, or it'll just stay in a crash?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "235",
  "tags": [
    "exploit"
  ],
  "user": "rev",
  "time": "Feb 22, 2015 at 0:26",
  "comments": [
    {
      "user": "joxeankoret",
      "text": "Unix or Windows? In Windows, maybe, see the answer of @0x41414141. In Unix, no, there is nothing like SEH handlers, it will stay as a crash.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Well, it's a simple buffer overflow, so probably yes, depending on what mitigations are available on the software/system you are targeting.\n\nWhat you need to do is to overwrite something useful like:\n\n",
      "votes": "1",
      "user": "Smi",
      "time": "Feb 22, 2015 at 16:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "rev",
          "text": "so if I put my handler's address in the payload, memcpy copies it, and then raises an exception, I can catch it?",
          "time": null
        }
      ]
    }
  ]
}