{
  "title": "Calling functions of a shared object (.so) extracted from an APK",
  "link": "https://reverseengineering.stackexchange.com/questions/21653/calling-functions-of-a-shared-object-so-extracted-from-an-apk",
  "content": "Decompiling a regular Android application I noticed that its code uses some native functions. So, unpacking the (.apk) file I found the usual \"lib\" folder and under that a series of folders for different architectures (arm64-v8a, armeabi-v7a, x86, x86_64). Each folder contains the same (.so) file.\n\nI decompiled one of them (the one under the x86 folder) using IDA Pro and I found all the functions used natively from the Java code. Since I'm still not so good with assembly code, I would like to reverse the behavior of those functions calling them with different arguments from my own code, maybe linking the (.so) library in some way. I've never done something like this.\n\nSo, do you know a proper way to do this in Windows/Linux? (Preferably Java on Windows?) That could help me a lot to follow the instructions in IDA.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "582",
  "tags": [
    "decompilation",
    "java",
    "apk",
    "libraries",
    "shared-object"
  ],
  "user": "Dadex",
  "time": "Jul 12, 2019 at 10:29",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Did you mean GetProcAddress() or dlopen() like functions?",
      "time": null
    },
    {
      "user": "Dadex",
      "text": "No, I mean the functions called by the application's business methods, say for increasing performance or for hiding that particolar part of code.",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Check out frida.re",
      "time": null
    }
  ],
  "answers_data": []
}