{
  "title": "How to extract D-Link DCS-4603 camera firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/14861/how-to-extract-d-link-dcs-4603-camera-firmware",
  "content": "I tried extract the firmware image from the binary file available at the D-Link DCS-4603 Vigilance Full HD PoE Dome Network Camera technical support page  it by using binwalk but failed. Is there another way to extract the firmware? Or is there another tool that I can use? Or you can guide my extraction efforts?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "binary-analysis",
    "firmware",
    "decompress"
  ],
  "user": "QChí Nguyễn",
  "time": "Mar 10, 2017 at 9:41",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "how did you \"try and failed\"? Did you get any output at all? post any details in the question.",
      "time": null
    },
    {
      "user": "QChí Nguyễn",
      "text": "It just print infomations such as: md5 file, ... but not print DECIMAL, HEXADECIMAL ,DESCRIPTION. I tried with other firmware and it work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Recommendation: since the firmware is obfuscated, recover the bootloader\n\nThe firmware may be encoded, compressed, encrypted, or some combination of these. In order for the firmware image to be loaded into memory and execute, it must be deobfuscated. Since the bootloader is responsible for this, it is likely that deobfuscation of the binary file containing the firmware image is performed by a routine or set of routines within the bootloader. Locating the code handling deobfuscation will enable you to deobfuscate the binary file containing the firmware image yourself.\n\nRecovering the bootloader requires access to the hardware. Several resources exist that will guide you in your efforts to dump the bootloader from the hardware as well as locate the deobfuscation code:\n\nReverse Engineering Serial Ports\n\nReversing the WRT120N’s Firmware Obfuscation\n\nTurning a Webcam Into a Backdoor\n\nBelkin F9K1111 V1.04.10 Firmware Analysis\n\nHow do I extract a copy of an unknown firmware from a hardware device?\n\nThere are 2 firmware versions available for download at the page in the link provided: \n\nBoth were analyzed. \n\nThe binary files are named DCS-4603_A1_FW_V1.00.00.bin (version 1.00) and DCS-4603_A1_FW_V1.01.00.bin (version 1.01) when the packages containing them are unzipped. \n\nBoth files are approximately 15MB each, with version 1.01 being slightly larger than version 1.00:\n\n```\n15521100 DCS-4603_A1_FW_V1.00.00.bin\n15848708 DCS-4603_A1_FW_V1.01.00.bin\n\n```\n1. strings and hexdump\n\nPreliminary analysis using strings -n and hexdump -C did not reveal beyond the absence of ASCII strings in either ~15MB file as well as no discernible file header.\n\n2. Entropy Analysis\n\nEntropy was consistently high throughout both files:\n\nDCS-4603_A1_FW_V1.00.00.bin:\n\n\nDCS-4603_A1_FW_V1.01.00.bin:\n\n\nA smooth entropy line and consistent entropy level throughout tends to indicate encryption. Reference: Differentiate Encryption From Compression Using Math. \n\nAs can be seen in the plots above, there was a perturbation in the entropy level in both files at offset ~0x002EB870. This was investigated further in when both files were diffed.\n\nThese plots also show that there are no areas of very low entropy in between areas of higher entropy. Such low entropy areas can indicate padding between different types of data in the binary file.\n\n3. Diffing the Binary Files\n\nThere are at least 2 interesting regions of commonality between the 2 binary files: the region between offset 0x00000000 and 0x000068F0 and the site of the perturbation revealed in the entropy plots above, the region between offsets 0x002EB870 and 0x002ED320.\n\nDiff of region between offsets 0x00000000 and 0x000068F0 (length of 26864 bytes):\n\n\n\nThe first four bytes, 73 00 2E 30, may be a signature of some kind.\n\nDiff of region between offsets 0x002EB870 and 0x002ED320 (length of 6832 bytes):\n\n\n\nTo my (very) inexperienced eye, these relatively large regions of commonality suggest compression or encoding rather than encryption of similar underlying data. \n\nFinal observation: D-Link's documentation for the camera explicitly discusses encoding capability (emphasis mine):\n\nHowever, this my not play any role in how the binary file containing the firmware image is obfuscated.\n\nThe fastest way to decode the binary file in order to extract the firmware image seems to be dumping the bootloader and analyzing it to pinpoint the obfuscation routine(s). \n\nfirmware mod kit\n\nSignsrch (Windows exe)\n\ndeezee\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": []
    }
  ]
}