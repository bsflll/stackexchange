{
  "title": "Decoding Hex Data",
  "link": "https://reverseengineering.stackexchange.com/questions/26401/decoding-hex-data",
  "content": "I'm trying to decode .PLW data acquired by a temperature logger (PicoLog PT-104).\n\nIf you convert the .PLW file to a .txt file through the official software you get something like this:\n\n\n\nwhere each row has single temperature measurements across the 20 channels available to the device. I would like to extract the data directly from the .PLW, file without having to convert it to .txt first.\n\nBy opening the .PLW file in a hex editor, I have managed to isolate with a bit of tweaking the section which seems to contain the raw data measurements:\n\n\n\nThe first 4 hexes contain the row index. And should be read in the reversed column order 03 02 01 00.\n\nThere are then the 20 groups of 4 columns, one for each channel. Assuming all groups should be read right to left (given that was the case for the index columns), they all seem to begin with 0x41 which might maybe be some kind of encoding for the tab character (or similar).\n\nThe next hex in each chunk (so the one just before the 0x41) seems to be mapping at least to some approximate way the temperature read in that channel:\n\nAnd the order of the channels also seems to match the order of the columns in the .txt file: for example channel 8 in the .txt file has an outlier temperature at 13 --> which is also present in the 8th data column in the .PLW file, where the temperature hex is set to 0x50\n\nWould anyone be able to crack the mapping between the hex values in each chunk to the final temperature measurement displayed in the .txt file?\n\nOr does anyone know of an encoding where 0x41 would correspond to a tab-like character? Thanks!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "642",
  "tags": [
    "decryption",
    "hex"
  ],
  "user": "Alvise",
  "time": "Dec 1, 2020 at 12:00",
  "comments": [],
  "answers_data": [
    {
      "content": "The data are floating point encoded on 32 bits Little_endian\nbyte 0 to 3: 00 00 00 00 = 0 channel number\nbyte 4 to 7: 1f 85 a3 41 = 0x41a3851f = 20.4400005341\netc ..\nhttps://www.h-schmidt.net/FloatConverter/IEEE754.html\n\n",
      "votes": "4",
      "user": "Gordon Freeman",
      "time": "Dec 1, 2020 at 14:17",
      "is_accepted": true,
      "comments": [
        {
          "user": "Alvise",
          "text": "Thank you very much!   Just for the record, bytes 0 to 3 are the measurement index number. The following 20 * 4-byte encoded values are the temperature values from each channel.  Thanks again Gordon!",
          "time": null
        },
        {
          "user": "pythonpython",
          "text": "I would be very interested to get my hands on a couple of these .PLW files. Could you post a couple or point to a good resource?",
          "time": null
        }
      ]
    }
  ]
}