{
  "title": "How to decompile /usr/bin/ls",
  "link": "https://reverseengineering.stackexchange.com/questions/25030/how-to-decompile-usr-bin-ls",
  "content": "How to decompile the following assembly instructions ?\n\nNote: this could be reproduced using /usr/bin/ls binary inside ghidra\n\n\n\n",
  "votes": "1",
  "answers": 2,
  "views": "474",
  "tags": [
    "disassembly",
    "decompilation",
    "ghidra",
    "decompile",
    "decompiler"
  ],
  "user": "kevin",
  "time": "May 16, 2020 at 6:44",
  "comments": [],
  "answers_data": [
    {
      "content": "From the decompiler view it cleary states there's no function. Decompiler works when you have one - it shows code of a function. \n\nSo, if that's the beginning of a function (it might be) just create it by pressing F (or right click, Create Function) while your cursor is on the line that is the beginning of this function. After that the decompiler view should populate with code.\n\n",
      "votes": "3",
      "user": "Paweł Łukasik",
      "time": "May 16, 2020 at 10:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "kevin",
          "text": "Thanks, now I have this other issue",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "It's difficult to understand just from the picture what the issue is. If it's related to this one - update your question. If not - create a new one.",
          "time": null
        },
        {
          "user": "kevin",
          "text": "it is unrelated, but the question remains the same on how to decompile /usr/bin/ls",
          "time": null
        },
        {
          "user": "multithr3at3d",
          "text": "@kevin like, how did you get to that specific address? In your second image, it doesn't look like you're in a section with actual instructions.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@kevin: the PLT is a table. What do you exactly expect to get from 'decompiling' it?",
          "time": null
        }
      ]
    },
    {
      "content": "Kevin,\n\nls comes in coreutils. The best way to experiment with these programs is to download and manually build the binaries (in this way you can give your favorite options like -g, -O3 during compilation).\n\nAnyways, coming back to your question, assuming you want to decompile /usr/bin/ls (that's what I get from your comments on Pawel's answer), then open ghidra gui, analyse the binary, click on file -> export program -> and export as a C/C++ file.\n\n",
      "votes": "3",
      "user": "R4444",
      "time": "May 17, 2020 at 2:55",
      "is_accepted": false,
      "comments": [
        {
          "user": "multithr3at3d",
          "text": "Why export it when you can view the decompilation within Ghidra?",
          "time": null
        },
        {
          "user": "R4444",
          "text": "yes you can do that. But, it is much easier for a beginner to examine the exported code, as you can get globally defined structures, variables, even type information (ghidra constructs typedefs for custome types like undefined4 -> int), in a single unit. Thus you don't have to jump around and click through the references to check the information.",
          "time": null
        }
      ]
    }
  ]
}