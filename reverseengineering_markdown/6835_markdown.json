{
  "title": "Setting a breakpoint at system call",
  "link": "https://reverseengineering.stackexchange.com/questions/6835/setting-a-breakpoint-at-system-call",
  "content": "I want to modify my teamspeak server (linux), I'm particulary interested in the connection with clients (UDP), so I figured I need to set a breakpoint at the linux socket function to start reversing. How can I achieve this?\n\nThanks!\n\n",
  "votes": "12",
  "answers": 1,
  "views": "20k",
  "tags": [
    "linux",
    "operating-systems"
  ],
  "user": "Hugo Kiiski",
  "time": "Dec 16, 2014 at 20:18",
  "comments": [
    {
      "user": "Ciro Santilli OurBigBook.com",
      "text": "For write: stackoverflow.com/questions/8235436/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In gdb you can set a syscall breakpoint with catch syscall.\n\nIf this is in 32-bit x86 (IA-32), check the syscall number in your_linux_source_dir/usr/include/asm/unistd_32.h. There is no syscall called socket in 32-bit x86, do you mean socketcall? Its number is 102.\n\nIf this is in x86-64 (AMD64), check the syscall number in your_linux_kernel_source_dir/usr/include/asm/unistd_64.h. The syscall called socket is 41.\n\nThen run the executable in gdb:\n\n```\n$ gdb myexecutable\n\n```\nAnd set the syscall breakpoint (41 is the socket syscall number in x86-64, change to appropriate syscall number for you):\n\n```\n(gdb) catch syscall 41\n\n```\nAnd then run the program:\n\n```\n(gdb) r\n\n```\nUsing the name of syscall (such as socket) instead of the number (eg. 41) may also work, depending on your configuration.\n\n",
      "votes": "15",
      "user": "nrz",
      "time": "Jan 16, 2015 at 18:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "Celelibi",
          "text": "I have no idea when this was added. But now you can use the syscall name instead of its number. So, just catch syscall socket.",
          "time": null
        }
      ]
    }
  ]
}