{
  "title": "How to find a fuction hash when manually resolving in shellcode?",
  "link": "https://reverseengineering.stackexchange.com/questions/17289/how-to-find-a-fuction-hash-when-manually-resolving-in-shellcode",
  "content": "I'm disassembling a shellcode and I found that it resolves adress of some function manually using the hash to find function in kernel32.dll.\nexample  :\n\n```\ncall findKernel32Base\n....\npush 0EC0E4E8Eh\ncall findSymbolByHash\nmov [ebp-4], eax\n\n```\nFor this example the function resolved is LoadLibraryA, I found it by searching the hash on google but what if I don't find it on google  ? \nHow can I find the function related to the hash value without debugging the shellcode ( some manually resolve failed when I debug it so it crash ) ?\n\nThank you !\n\n",
  "votes": "1",
  "answers": 1,
  "views": "443",
  "tags": [
    "shellcode"
  ],
  "user": "Neolex",
  "time": "Jan 25, 2018 at 16:43",
  "comments": [],
  "answers_data": [
    {
      "content": "iirc you cant go from a constant hash to name \nbut hash an exported name compare the generated hash with the constant \n\nyou can see a discussion and an implementation here\n\na ripped python implementation using the discussion as follows\n\n```\n:\\>cat foo.py\ndef rol32(val, amt):\n        return ( (val << amt) & 0xffffffff ) | ( ( val >> (32 - amt) ) & 0xffffffff )\n\ndef ror32(val, amt):\n        return ( (val >> amt) & 0xffffffff ) | ( ( val << (32 - amt) ) & 0xffffffff )\n\ndef add32(val, amt):\n        return (val + amt) & 0xffffffff\n\ndef hash_export(name):\n    result = 0\n    index = 0\n    while(index < len(name)):\n        result  = add32(ror32(result, 13), ord(name[index]) & 0xff)\n        index += 1\n    return result\n\nprint hex(hash_export(\"LoadLibraryA\"))\n:\\>python foo.py\n0xec0e4e8eL\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jan 25, 2018 at 18:03",
      "is_accepted": true,
      "comments": []
    }
  ]
}