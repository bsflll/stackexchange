{
  "title": "How to unload a type library (.til) programmatically (preferably using IDC, but IDAPython is fine, too)?",
  "link": "https://reverseengineering.stackexchange.com/questions/30299/how-to-unload-a-type-library-til-programmatically-preferably-using-idc-but",
  "content": "TL;DR: I want to do this programmatically using either IDC or IDAPython and failed to find an option that works for me (also scoured idc.idc).\n\n\n\nIn order to explicitly load a type library I can use add_default_til() (formerly LoadTil()). However, there doesn't appear to be any counterpart to this function to unload a previously loaded type library. And that's what I am looking for.\n\nMy issue is that although %ProgramFiles%\\IDA Pro 7.7\\sig\\pc\\autoload.cfg does not list the ntddk64_win7 and ntapi64_win7 type libraries, they seem to get loaded implicitly somehow. Chances are (but I haven't found documentation to corroborate this; the only connection seems to be autoload.cfg) that this has to do with the following log lines:\n\n```\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nPropagating type information...\nFunction argument information has been propagated\nThe initial autoanalysis has been finished.\n\n```\nNow, I'd like to unload those two and instead load ntddk64_win10 and ntapi64_win10 respectively (possibly re-running auto-analysis).\n\nAlas, I haven't found a way to script this.\n\nBonus question: is there something that ties the FLIRT signatures to type libraries (.til) aside from autoload.cfg?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "507",
  "tags": [
    "ida",
    "idapython",
    "idc"
  ],
  "user": "0xC0000022L",
  "time": "Jan 11, 2023 at 16:37",
  "comments": [],
  "answers_data": [
    {
      "content": "To unload a type library you can use del_til function from typeinf.hpp.\n\nUsage with IDAPython:\n\n```\nimport ida_typeinf\n\nida_typeinf.add_til(\"ntapi64_win7\", ida_typeinf.ADDTIL_DEFAULT) # load a til file\nida_typeinf.del_til(\"ntapi64_win7\") # unload a til file\n\n```\n",
      "votes": "2",
      "user": "y_v",
      "time": "Apr 21, 2022 at 16:35",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Guess I won't get around using IDAPython after all üòÅ ... thanks and welcome to RE.SE.",
          "time": null
        },
        {
          "user": "y_v",
          "text": "Thanks. I don't know why you are using IDC in this case, but I want to remind you that there is an exec_python function in idc.idc, maybe that will help :)",
          "time": null
        },
        {
          "user": "y_v",
          "text": "so something like exec_python(\"import ida_typeinf;ida_typeinf.del_til('ntapi64_win7');ida_typeinf.add_til('ntapi64_win10', ida_typeinf.ADDTIL_DEFAULT)\") would work (but it looks terrible)",
          "time": null
        }
      ]
    }
  ]
}