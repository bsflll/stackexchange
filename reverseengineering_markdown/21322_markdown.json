{
  "title": "Renaming shadowed variables in Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/21322/renaming-shadowed-variables-in-ghidra",
  "content": "I'm working on a function in the Ghidra decompiler with a bunch of variables that are re-used across different scopes. I don't see any way to rename this variable on a per-line basis. Is it possible?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ghidra"
  ],
  "user": "Griffin Byatt",
  "time": "May 16, 2019 at 16:00",
  "comments": [],
  "answers_data": [
    {
      "content": "Yaldi already mentioned the important first step of Commit Locals for finer variable scoping.\n\nIf your Ghidra version has at least the commit https://github.com/NationalSecurityAgency/ghidra/commit/885402bbc3618b895c4b9b8f09300d3120a9abe8 which will probably be in the 9.2 release you can explicitly split a variable after Commit Locals, by right clicking the variable in the decompiler view and selecting Split out as New Variable.\n\n",
      "votes": "2",
      "user": "Florian Magin",
      "time": "Mar 26, 2020 at 9:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "Yadli",
          "text": "Thanks @Florian Magin! 9.2 would be pretty exciting then. :)",
          "time": null
        }
      ]
    },
    {
      "content": "This workaround is suggested by GitHub user ubitux, here: https://github.com/NationalSecurityAgency/ghidra/issues/1510, and I can confirm it works around the problem to some degrees.\n\nWhen you \"Commit Locals\" for the function, some variable types and the names will be fixed, and the variable scopes will become smaller, so that one variable will be automatically split across multiple scopes. You can then iteratively annotate variable types, rename variables, commit, and the scopes will shrink further.\n\n",
      "votes": "1",
      "user": "Yadli",
      "time": "Mar 9, 2020 at 6:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}