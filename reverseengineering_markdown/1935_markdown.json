{
  "title": "How to handle stripped binaries with GDB? No source, no symbols and GDB only shows addresses?",
  "link": "https://reverseengineering.stackexchange.com/questions/1935/how-to-handle-stripped-binaries-with-gdb-no-source-no-symbols-and-gdb-only-sho",
  "content": "I have GDB but the binary I want to reverse engineer dynamically has no symbols. That is, when I run the file utility it shows me stripped:\n\n```\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped\n\n```\nWhat options do I have if the environment in which this runs doesn't allow a remote IDA Pro instance to connect to gdbserver? In short: the environment you have is limited in what it allows you to do, but you do have trusty old gdb and a binary to reverse engineer.\n\n",
  "votes": "123",
  "answers": 2,
  "views": "101k",
  "tags": [
    "tools",
    "dynamic-analysis",
    "linux",
    "debuggers",
    "gdb"
  ],
  "user": "0xC0000022L",
  "time": "May 4, 2023 at 11:56",
  "comments": [
    {
      "user": "Mellowcandle",
      "text": "unstrip is a tool that can try to restore lost symbol names of known library calls.",
      "time": null
    },
    {
      "user": "Jichao",
      "text": "b __libc_start_main",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@Jichao doesn't that make the assumption that 1.) a specific implementation of a C runtime is being used and b.) that the binary isn't statically linked? Perhaps I am missing something here. But if I recall correctly no symbols are required for an ELF to find its entry point at load time.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I am trimming the output of GDB for brevity since it usually shows the copyright and other information at the beginning of every session (use -q to suppress). When I reproduce the output I'll start at the first (gdb) prompt line, or in case or auto-executed commands from the first genuine output line.\n\nIn order to distinguish commands entered at the GDB prompt, these will have a leading (gdb)  just like in the real world. For shell command this will either be no prefix at all or $  as it appears to be the convention on most unixoid systems.\n\nWhen I use a particular command, such as vim as my editor, you are free to use your own favorite editor of course. Be it emacs or nano, I won't judge ya ;)\n\nThis section is about setting up your gdb environment and starting the process. I'll also include a few tidbits for the complete newcomers.\n\nGDB has a nice prompt at which your cursor will stop after the program breaks or whenever you are stepping or some such.\n\nSince we want to dynamically analyze the binary, we need to start it first.\n\nWe can do that straight from the command line by passing not only the path to the binary, but also the arguments we want to start it with. The whole process then looks like this:\n\n```\n$ gdb --args ./exe argument1 argument2\n\n```\nEasy enough. From the (gdb) prompt you can then issue the run command (shorthand r) to run ./exe with the parameters given on the command line. I prefer this method, but your mileage may vary.\n\n\n\nFire up GDB and at the (gdb) prompt use the file command to load the binary and then use the run command to start it with the arguments you want to pass:\n\n```\n$ gdb\n(gdb) file exe\n(gdb) run argument1 argument2\n\n```\nan alternative to the above would be the use of set args like this:\n\n```\n$ gdb\n(gdb) file exe\n(gdb) set args argument1 argument2\n(gdb) run\n\n```\n\n\nYou can also see in any case which arguments run would pass to the started process by issuing a:\n\n```\n(gdb) show args\n\n```\nbtw: if you were wondering about environment variables, use GDB's built-in help command as help set and help show. Pointers: set environment VARNAME=VALUE and show environment [VARNAME] and unset environment VARNAME.\n\nWell, we don't know yet, but it looks like this little beasty wants the proper treatment. Since we practice defensive computing, we don't want to run anything we don't know much about, right? So let's start over. If this would have been malware we'd have to flush the machine and reinstall or restore a snapshot if it's a VM guest.\n\nFirst we'll want to run the info command as follows:\n\n```\n(gdb) info file\n\n```\nObserve:\n\n\n\nThere are two important pieces of information, the most relevant for us being the line stating:\n\n```\nEntry point: 0x400710\n\n```\nalright, so we can set a break point on that one and then run the process with the arguments we fancy.\n\nBut wait, this is getting tedious already. No easy method to automate these steps in some way? As a matter of fact there is. A file named .gdbinit can be used to issue commands to GDB upon startup. You can also pass a file with GDB commands using the -x argument on the (shell) command line. If I have a number of projects, usually they are in subfolders with a .gdbinit file each.\n\nSide-note: -nx prevents the .gdbinit contents from being executed upon startup.\n\nSo we know which arguments we want to pass and we know the address of the break point, this translates to the following .gdbinit file:\n\n```\nfile exe\nbreak *0x400710\nrun argument1 argument2\n\n```\nThe output I get when I start gdb without any other arguments is:\n\n```\nBreakpoint 1 at 0x400710\n\nBreakpoint 1, 0x0000000000400710 in ?? ()\n(gdb) \n\n```\nNice! But this looks different ...\n\nSo you're used to see the next line you're going to execute and then your trusty old (gdb) prompt. But no such thing. We have no source for this binary and furthermore symbols. Doh! So we contemplate the blinking caret at the (gdb) prompt and wonder what to do. Don't fret, GDB can also handle assembly code. Only problem, it defaults to the - in my opinion - inconvenient AT&T assembly syntax. I prefer the Intel flavor and the following command tells GDB to do just that:\n\n```\n(gdb) set disassembly-flavor intel\n\n```\nAnd how is it going to show us the assembly code? Well, similar to the TUI mode (check the tag wiki for gdb) by using the following command:\n\n```\n(gdb) layout asm\n\n```\nand if you are so inclined, also:\n\n```\n(gdb) layout regs\n\n```\nwhich will also show you the contents of the registers in an overview.\n\nSo we end up with the following .gdbinit for our purposes:\n\n```\nfile exe\nbreak *0x400710\nset disassembly-flavor intel\nlayout asm\nlayout regs\nrun argument1 argument2\n\n```\nAnd when we start gdb without arguments we end up with this:\n\n\n\nSweet. So we can see the disassembly while we step through the code. We could conclude this here, but of course there are more tricks to be learned, so why not go a little further.\n\nNOTE: the registers with white/gray background show that a value has changed. Not too meaningful when we just started the program, but mighty useful when stepping through code later on.\n\n... and have it less visual, starting with GDB 7.0 you can use:\n\n```\nset disassemble-next-line on\n\n```\non GDB versions before that you can emulate the behavior by settings an automatic display:\n\n```\ndisplay/i $pc\n\n```\nor shorter disp/i $pc where /i is the format, you can remember it best by thinking \"instruction\" and $pc being the instruction pointer, also known as program counter - hence pc.\n\nSometimes when stepping through assembly the regs and asm views will get borked. Simply execute the respective layout commands again to restore them to their old glory:\n\n```\n(gdb) layout asm\n(gdb) layout regs\n\n```\nTurns out when you are in assembly mode some of the commands you are used to from source-level debugging simply won't work. That makes sense, because a single source line means usually a dozen instructions or more. The next and step commands, however, have instruction-level counterparts:\n\nFrom our disassembly above we know:\n\n```\n0x40072d        mov    rdi,0x40f961\n\n```\nand for all practical purposes this is the main function. Of course if you were to reverse engineer malware you should be more careful, but in this case it is. So let's add a breakpoint to this address (0x40f961) instead of the entry point:\n\n```\nbreak *0x40f961\n\n```\nIf we examine (shorthand x) the code at which we are currently, we can see:\n\n```\n(gdb) x/5i $pc\nx/5i $pc\n=> 0x40f961:    push   rbp\n   0x40f962:    mov    rbp,rsp\n   0x40f965:    mov    eax,0x0\n   0x40f96a:    call   0x40911f\n   0x40f96f:    pop    rbp\n\n```\nOkay, the call is what we want to follow, so let's step inside of it using si. We get to see another call immediately at the instruction pointer when entering the function:\n\n```\n(gdb) x/5i $pc\nx/5i $pc\n=> 0x40911f:    call   0x400b8c\n   0x409124:    push   rbp\n   0x409125:    mov    rbp,rsp\n   0x409128:    push   r10\n   0x40912a:    push   r11\n\n```\nThe call leads us to a function which calls ptrace(PTRACE_TRACEME, ...), now why would it do that?\n\n```\n0x400bab        call   0x4006b8 <ptrace@plt>\n\n```\nWell, it's an old anti-debugger trick which Mellowcandle has described in another Q&A here:\n\nBut how do we get around it? We'd have to overwrite the call to the function which calls ptrace() with nop or something along those lines.\n\nThis is where GDB becomes a little unwieldy. But we can use set so do the magic for us. Let's first inspect the instruction bytes:\n\n```\n(gdb) x/10b $pc\nx/10b $pc\n0x40911f:       0xe8    0x68    0x7a    0xff    0xff    0x55    0x48    0x89\n0x409127:       0xe5    0x41\n\n```\nThe 0xe8 is a call instruction and we know now that it is 5 bytes long. So let's nop this out. (x/10b $pc means examine 10 bytes at program counter - default format is hex already).\n\nSo we do while stopped at 0x40911f:\n\n```\n(gdb) set write\n(gdb) set {unsigned int}$pc = 0x90909090\n(gdb) set {unsigned char}($pc+4) = 0x90\n(gdb) set write off\n\n```\nand verify the patched location:\n\n```\n(gdb) x/10i $pc\nx/10i $pc\n=> 0x40911f:    nop\n   0x409120:    nop\n   0x409121:    nop\n   0x409122:    nop\n   0x409123:    nop\n   0x409124:    push   rbp\n   0x409125:    mov    rbp,rsp\n   0x409128:    push   r10\n   0x40912a:    push   r11\n   0x40912c:    push   rbx\n\n```\nExcellent. We can now execute it.\n\nThere are alternative (and way superior) methods like this one by Tavis Ormandy. I'm reproducing the assemble macro below (in case it goes offline from the other place):\n\n```\ndefine assemble\n # dont enter routine again if user hits enter\n dont-repeat\n if ($argc)\n  if (*$arg0 = *$arg0)\n    # check if we have a valid address by dereferencing it,\n    # if we havnt, this will cause the routine to exit.\n  end\n  printf \"Instructions will be written to %#x.  \n\", $arg0\n else\n  printf \"Instructions will be written to stdout.  \n\"\n end\n printf \"Type instructions, one per line.  \n\"\n printf \"End with a line saying just \\\"end\\\".  \n\"\n if ($argc)\n  # argument specified, assemble instructions into memory\n  # at address specified.\n  shell nasm -f bin -o /dev/stdout /dev/stdin \\\n    <<< \"$( echo \"BITS 32\"; while read -ep '>' r && test \"$r\" != end; \\\n                do echo -E \"$r\"; done )\" | hexdump -ve \\\n        '1/1 \"set *((unsigned char *) $arg0 + %#2_ax) = %#02x  \n\"' \\\n            > ~/.gdbassemble\n  # load the file containing set instructions\n  source ~/.gdbassemble\n  # all done.\n  shell rm -f ~/.gdbassemble\n else\n  # no argument, assemble instructions to stdout\n  shell nasm -f bin -o /dev/stdout /dev/stdin \\\n    <<< \"$( echo \"BITS 32\"; while read -ep '>' r && test \"$r\" != end; \\\n                do echo -E \"$r\"; done )\" | ndisasm -i -b32 /dev/stdin\n end\nend\ndocument assemble\nAssemble instructions using nasm.\nType a line containing \"end\" to indicate the end.\nIf an address is specified, insert instructions at that address.\nIf no address is specified, assembled instructions are printed to stdout.\nUse the pseudo instruction \"org ADDR\" to set the base address.\nend\n\n```\nAgain the above script snippet wasn't written by me, but by Tavis Ormandy - see the link above.\n\nThis concludes this little Q&A.\n\n",
      "votes": "197",
      "user": "0xC0000022L",
      "time": "Jan 29, 2023 at 20:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xea",
          "text": "great writeup! just one note: -q as a cmd arg gets rid of the copyright stuff",
          "time": null
        },
        {
          "user": "perror",
          "text": "I though I knew gdb pretty well, but I learned a lot. Thanks !",
          "time": null
        },
        {
          "user": "Hackndo",
          "text": "This AWESOME answer saved my life more than once. Thank you, and thanks again.",
          "time": null
        },
        {
          "user": "RichieHH",
          "text": "Best gdb intro I have seen.. Excellent.",
          "time": null
        },
        {
          "user": "ramrunner",
          "text": "Oh, what sad times are these when passing ruffians can say ni at will to old debuggers...(seriously great answer though! XD)",
          "time": null
        }
      ]
    },
    {
      "content": "I used to use https://github.com/gdbinit/Gdbinit for tuning GDB but it's getting a bit dated, so I'd recommend https://github.com/hugsy/gef now as a modern alternative.\n\n",
      "votes": "2",
      "user": "Mega Tonnage",
      "time": "Jan 30, 2023 at 9:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}