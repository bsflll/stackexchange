{
  "title": "Three threads in Windows",
  "link": "https://reverseengineering.stackexchange.com/questions/3195/three-threads-in-windows",
  "content": "I wrote a little program which just shows a dialog. Basically an ASM Hello World. When the dialog is displayed and I break in WinDBG, I can see three threads even though the application doesn't use any threads at all.\n\nI was not aware that there is something like default threads applied to a process, or is this because of WinDBG?\n\nThe Process/Thread window shows\n\n```\n 000:13d4:MyApp.exe\n    000:d14\n    001:11bc\n    002:50c\n\n```\nIf I put a memory access breakpoint and the process would have multiple threads, do I have to specify in which thread this should be triggered. I think this shouldn't matter right? So if an address is accessed by any thread, the breakpoint should trigger regardless.\n\nudate\n\nSo I took now a closer look (the handle numbers have changed, but the IDs are relevant anyway). I'm Running Windows 7-32bit-x86 if that helps.\n\n000: refers to my original process, but this was already known.\n\n001: Stacktrace when I break looks like this (some thread snychronization required by WinDBG?):\n\n```\nntdll!KiFastSystemCallRet\nkernel32!WaitForMultipleObjectsEx+0x8e\nkernel32!WaitForMultipleObjects+0x18\nmsiltcfg!RestartMsi+0x32e\nkernel32!BaseThreadInitThunk+0x12\nntdll!RtlInitializeExceptionChain+0xef\nntdll!RtlInitializeExceptionChain+0xc2\n\n```\nIt seems that this thread belongs to some msiltcfg.dll which would be a Windows 7 DLL, but why does it cread threads in my process?\n\n002: So this would probably be the WinDBG thread which Akira32 refers to in his answer, right? (why does WinDBG need a thread of his own?).\n\n```\nntdll!DbgBreakPoint\nkernel32!BaseThreadInitThunk+0x12\nntdll!RtlInitializeExceptionChain+0xef\nntdll!RtlInitializeExceptionChain+0xc2\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "3k",
  "tags": [
    "windbg",
    "thread"
  ],
  "user": "Devolus",
  "time": "Dec 16, 2013 at 8:47",
  "comments": [
    {
      "user": "adversarial",
      "text": "Remember that user32 may be creating threads for callbacks on the dialog box.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "By your description:\n\nYes, your program should have only one thread running, without debuger. You can check this on task manager.\nHowever when you attach to windbg it will create a thread on break. \nThe third thread that you mention, i really dont have a clue. Maybe a injected dll running code... \n\nBut you can try to find out by opening the windows \"call stack\" on winbgd. (and selecting each thread, on thread window)\n\nYou are right. You just need to set a breakpoint any thread will trigger on acess :).\n\nLets us know what you find out :).\n\nHope I have helped!\n\nUPDATE\n\n```\n002:\n\n```\nThe windbg creates that thread every time you pause the attached process execution. It makes sense because the windbg needs a breakpoint to stop the execution, since he dont know where to patch a normal breakpoint on the code, to break immediately. He creates a thread to call dbgbreakpoint and break.\n\nIf you continue the execution, the windbg's thread will terminate. This is a normal behavior of the debuggers, not only windbg.\n\n```\n001:\n\n```\nThe msiltcfg.dll has functions to handle MSI installers. \"Windows Installer Configuration API Stub\"\nIts strange,for me, that the process has this dll loaded. By the stack call you show, its waiting for something. A thread, mutex event, etc... This thread has nothing to do with windbg. Something has loaded that dll on your process and created the thread. Almost for sure it is a operating system process.\n\nOne thing you can do is check if other processes (calc.exe or notpad.exe, simple ones) got the same thread or the same dll loaded. Some programs/OS can load dll's on abritary processes or even all and run code (using the WIN32 API function CreateRemoteThread). This is a normal behavior done by malware too :). \n\nOne thing you have for sure is that your program has only created one thread. And in a normal situation it should not have more than one.\n\nI tested a program like your to be sure, and just got a thread.\n\n",
      "votes": "3",
      "user": "Akira32",
      "time": "Dec 16, 2013 at 13:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "Devolus",
          "text": "I updated my question with additional info about the threads in question.",
          "time": null
        }
      ]
    }
  ]
}