{
  "title": "IDAPython - Find the start of an undefined code blob",
  "link": "https://reverseengineering.stackexchange.com/questions/21828/idapython-find-the-start-of-an-undefined-code-blob",
  "content": "I'm currently working on an IDAPython script that aims to remove various rogue-byte from the malware that I'm reversing. \n\nI'm in a case where some portions of my code contain this type of anti-disassembly trick:\n\n\nThe fact is that without patching the rogue byte, I can't define this undefined blob as a proper function (P shortcut).\n\nSo the script is basically doing this:\n\nAs all the function having this rogue-bytes in it are undefined, I now need to define them as proper function.\n\nBut I don't know how to go back to the address of the beginning of the undefined function. For instance, that's the result after executing my IDAPython script:\n\n\nThe rogue-byte is indeed patch, but now I just need to find the address of \"loc_410687\".\n\nHow can I get this address within my IDAPython script? \n\n(I specify that not all of the function that contains the rogue-byte start by those 3 xors, that's a coincidence. So I can't look for them in order to get the start of the function.)\n\nAny idea?\n\nThanks!\n\n",
  "votes": "1",
  "answers": 0,
  "views": "682",
  "tags": [
    "ida",
    "malware",
    "idapython"
  ],
  "user": "Guillaume",
  "time": "Aug 3, 2019 at 2:01",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "That's the PonyLoader btw. for which the source got leaked: github.com/nyx0/Pony/blob/master/source/PonySrc/Pony.asm Search for \"AntiDisasmTrick\" - at least in the sourcecode those 3 xors are fixed.",
      "time": null
    },
    {
      "user": "Guillaume",
      "text": "Yeah, that's indeed a pony sample! That's amazing how you recognize it with only 20 instructions :) Thanks for the source code, it's really helping me",
      "time": null
    },
    {
      "user": "w s",
      "text": "Did you try to reanalyze program after all patching is done ?",
      "time": null
    },
    {
      "user": "Guillaume",
      "text": "Yes, I started the analysis even before the rogue-byte things, I'm just trying to make the code cleaner and more pleasant to look at ^^ It even work perfectly in a debugger, the rogue-byte are not affecting anything !",
      "time": null
    }
  ],
  "answers_data": []
}