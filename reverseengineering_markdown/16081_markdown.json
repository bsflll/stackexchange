{
  "title": "How to generate the call graph of a binary file?",
  "link": "https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary-file",
  "content": "I have a non-stripped ELF binary for which I want to create a call graph as a dot file. Is there such a tool which generates the call graph?\n\nEDIT: Is there away in addition to the conventional call graph to find a call graph between libraries based on the executable. For example showing the call graph only of from libc to pthread.\n\n",
  "votes": "18",
  "answers": 4,
  "views": "16k",
  "tags": [
    "binary-analysis",
    "elf",
    "call-graph"
  ],
  "user": "0x90",
  "time": "Aug 6, 2018 at 15:05",
  "comments": [
    {
      "user": "0x90",
      "text": "Another option would be: rizin.re",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can use radare2 or one of the alternatives below to generate a full call-graph in dot format.  \n\nFirst of all, install radare2 from git repository:\n\n```\n$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n\n```\nAfter you've downloaded and installed radare2, open your binary and perform analysis on it using the aaa command:\n\n```\n$ r2 /bin/ls\n[0x004049a0]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n\n```\nThe ag command and subcommands can help you to output the visual graph into Graphviz format.\n\n```\n[0x00000000]> ag?\nUsage: ag<graphtype><format> [addr]\nGraph commands:\n| aga[format]             Data references graph\n| agA[format]             Global data references graph\n| agc[format]             Function callgraph\n| agC[format]             Global callgraph\n| agd[format] [fcn addr]  Diff graph\n| agf[format]             Basic blocks function graph\n| agi[format]             Imports graph\n| agr[format]             References graph\n| agR[format]             Global references graph\n| agx[format]             Cross references graph\n| agg[format]             Custom graph\n| ag-                     Clear the custom graph\n| agn[?] title body       Add a node to the custom graph\n| age[?] title1 title2    Add an edge to the custom graph\n\nOutput formats:\n| <blank>                 Ascii art\n| *                       r2 commands\n| d                       Graphviz dot\n... <truncated> ...\n| w [path]                Write to path or display graph image (see graph.gv.format and graph.web)\n\n```\nYou're searching for the agCd command. The C specifies to output a full (\"global\") call-graph of the program. The d specifies to output in Graphviz dot format.\n\n```\n[0x004049a0]> agCd > output.dot\n\n```\nThe dot utility is part of the Graphviz software which can be installed using sudo apt-get install graphviz.\nYou can view your output in any offline dot viewer, paste the output into an online Graphviz viewer and even convert the dot file to PNG:  \n\n```\n$ r2 /bin/ls\n[0x004049a0]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x004049a0]> agCd > output.dot\n[0x004049a0]> !!dot -Tpng -o callgraph.png output.dot\n\n```\nTo read more about radare2 it is recommended to read radare2 book.\n\nThe free version of IDA is also capable of generate GDL of call graph but it is only available as exe, use wine on Linux to run it\n\n",
      "votes": "21",
      "user": "devtty1er",
      "time": "Sep 24, 2018 at 8:39",
      "is_accepted": true,
      "comments": [
        {
          "user": "0x90",
          "text": "Is there away to get a call graph between libraries or files rather call graph between functions?",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "You can use il to get libraries used by the binary or rabin2 -l /bin/ls which is the same",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "I don't know of a command to generate a call graph of only libraries, sorry",
          "time": null
        }
      ]
    },
    {
      "content": "You might want to give angr a try.\n\nYou can limit the range of CFG generation by passing the regions argument to CFG().\n\n",
      "votes": "8",
      "user": "Fish",
      "time": "Aug 16, 2017 at 23:07",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can use angr-utils in order to generate the graph from angr : https://github.com/axt/angr-utils\n\nFor more information please see:\n\nhttps://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md\n\n\n\n",
      "votes": "3",
      "user": "Peter Teoh",
      "time": "Dec 26, 2021 at 0:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "perror",
          "text": "You should elaborate a bit...",
          "time": null
        }
      ]
    },
    {
      "content": "Check out Callgrind or KCachegrind. Much simpler than any other alternative.\n\n",
      "votes": "2",
      "user": "yaspr",
      "time": "Jan 4, 2020 at 9:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "rfabbri",
          "text": "but are these static analyzers? or only report what is called in some typical run?",
          "time": null
        },
        {
          "user": "yaspr",
          "text": "Callgrind is based on Valgrind, a serializing dynamic analysis framework.",
          "time": null
        }
      ]
    }
  ]
}