{
  "title": "Division on ARM [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/8994/division-on-arm",
  "content": "When performing division on ARM, this is the code snippet that I encountered.\n\n```\n   0x83d8 <main+12>:    mov r3, #10\n   0x83dc <main+16>:    str r3, [r11, #-8]\n   0x83e0 <main+20>:    ldr r3, [r11, #-8]\n=> 0x83e4 <main+24>:    ldr r2, [pc, #40]   ;; 0x8414 <main+72>\n   0x83e8 <main+28>:    smull   r1, r2, r2, r3\n   0x83ec <main+32>:    asr r3, r3, #31\n   0x83f0 <main+36>:    rsb r3, r3, r2\n   0x83f4 <main+40>:    str r3, [r11, #-8]\n\n```\nIn the original program, I store the value 10 to a variable, divide it by 3 and store it in the same variable.\n\n[r11, #-8] in the above example has the value 0xa. After 0x83e4, r2 is loaded up as 0x55555556. My doubts are as follows :-\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "arm"
  ],
  "user": null,
  "time": "6 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "Optimizing compilers will typically use the method above for compiling division by a constant.\n\nYou can read more about it at the following links:\n\n",
      "votes": "2",
      "user": "Glorfindel",
      "time": "Apr 7, 2021 at 19:33",
      "is_accepted": true,
      "comments": []
    }
  ]
}