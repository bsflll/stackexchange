{
  "title": "Set lldb breakpoint relative to ASLR slide",
  "link": "https://reverseengineering.stackexchange.com/questions/27883/set-lldb-breakpoint-relative-to-aslr-slide",
  "content": "I want to set a breakpoint at an offset within a file.\n\nI can do this fine if I launch the app, check where it is loaded with image list testapp and then add the offset of where in the binary I want the breakpoint e.g.:\n\n```\nbreakpoint set -a 0x10100cff4\n\n```\nIs there a way whereby I can set the breakpoint in one go without first checking the offset it is loaded at so that I can automate a task more easily. e.g. something similar to:\n\n```\nbreakpoint set -a ((image list -o testapp)+0x100168ff4)\n\n```\nI suspect I could do it with Python however that is not working for me at the moment on Ubuntu so would prefer a way it can be done with lldb commands.\n\nAlternatively, I can add a breakpoint with:\n\n```\nbreakpoint set --name function_name\n\n```\nbut it is only one instruction I want to break on so still need to add an offset to that address as I then have a command that is performed when it is reached and then resumes.\n\nThanks\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "breakpoint",
    "lldb",
    "offset"
  ],
  "user": "Jon",
  "time": "Jun 23, 2021 at 14:49",
  "comments": [],
  "answers_data": [
    {
      "content": "This is possible with a command like:\n\n```\nbreakpoint set -a 0x100168ff4 -s testapp\n\n```\nas from lldb's help breakpoint add, when you specify a module with -s then the address or expression passed with -a:\n\nWith many thanks to Scott Knight for the pointer on this.\n\n",
      "votes": "1",
      "user": "Jon",
      "time": "Jun 24, 2021 at 15:40",
      "is_accepted": true,
      "comments": [
        {
          "user": "Kamil.S",
          "text": "Shorter syntax b -a 0x100168ff4 -s testapp",
          "time": null
        },
        {
          "user": "Jon",
          "text": "Thanks, I still have a lot to learn :)",
          "time": null
        }
      ]
    }
  ]
}