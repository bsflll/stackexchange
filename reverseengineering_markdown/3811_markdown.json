{
  "title": "What C construct could generate this assembly sequence?",
  "link": "https://reverseengineering.stackexchange.com/questions/3811/what-c-construct-could-generate-this-assembly-sequence",
  "content": "I have the following disassembly:\n\n```\nmov BL, [EAX]\ninc EAX\nmov [EDX], BL\ninc EDX\n\n```\nI could see this being the result of:\n\n```\nuint8_t foo = bar;\n++bar;\nuint8_t tmp = foo;\n++foo;\n\n```\nBut this assumes C99. Is there some other C construct that could produce the code above?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "391",
  "tags": [
    "disassembly",
    "x86",
    "static-analysis",
    "c"
  ],
  "user": "avgvstvs",
  "time": "Mar 6, 2014 at 19:07",
  "comments": [
    {
      "user": "DCoder",
      "text": "The infamous strcpy loop, *dst++ = *src++ ?",
      "time": null
    },
    {
      "user": "avgvstvs",
      "text": "What's tripping me up is that I had thought that the MOV instruction was limited so that the operands had to have the same size?  This looks like I'm asking \"Move a 32b value into the lower 8b of the EBX register.\"",
      "time": null
    },
    {
      "user": "DCoder",
      "text": "[EDX] does not stand for \"the EDX register\". It stands for \"the address pointed to by the EDX register\". The constrained you mentioned is valid, and in this case the instruction mov [EDX], BL is interpreted as \"move the lowest byte of the EBX register to the byte at the address pointed to by (the value of) the EDX register.\"",
      "time": null
    },
    {
      "user": "avgvstvs",
      "text": "DCoder, would you care to post your comment as an answer so I can give due credit?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you just want the answer without the explanation, scroll to the bottom of this post.\n\nThe [register] notation stands for \"take the value stored in register and interpret it as an address\". If the addressed entity size is ambiguous, it can be clarified using DWORD PTR [register] for DWORD-sized pointers (and similarly for other pointer sizes).\n\nThis line treats the value in the EAX register as a pointer to a single byte (the size of BL), reads a byte from that address and stores it in BL. \n\nThis line increments the value of EAX, effectively advancing to the next byte.\n\nThis line treats the value in the EDX register as a pointer to a single byte (again, the size of the other operand tells us this), and writes a byte that is stored in BL to that address.\n\nThis line increments the value of EDX, advancing to the next byte.\n\nWith all this information, we can see that this sequence basically copies a byte from one address to another. Most likely it is used in a loop such as string copy or memory copy. If there's a line similar to test BL, BL afterwards to determine if the copied byte was NULL, it's most likely a string copy; if there's a length/address check instead - it's probably a memory/buffer copy that works on a specified amount of bytes.\n\nIn C parlance, this can be represented as:\n\n```\nchar t; // BL\nchar *src; // EAX\nchar *dst; // EDX\n\n// initialize src and dst here\n\nt = *src;\n++src;\n*dst = t;\n++dst;\n\n```\nOr, as K&R put it ever so tersely:\n\n```\n*dst++ = *src++;\n\n```\n",
      "votes": "6",
      "user": "DCoder",
      "time": "Mar 10, 2014 at 17:35",
      "is_accepted": true,
      "comments": []
    }
  ]
}