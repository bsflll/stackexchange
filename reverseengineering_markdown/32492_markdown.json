{
  "title": "ARM64 Stack Layout - Why 100x'A' Doesn't Crash?",
  "link": "https://reverseengineering.stackexchange.com/questions/32492/arm64-stack-layout-why-100xa-doesnt-crash",
  "content": "I'm trying to exploit a buffer overflow vulnerability in an ARM64 program from this blog.\nWhen I give as input 100*'A', and I compile the program for ARM 32 bit (without canaries), the program crashes (as the return address is overwritten).\nBut, when I give as input 100*'A', and I compile the program for ARM 64 bit (without canaries), the program does not crash.\nWhy does it happen?\nCan someone explain?\n\nHere are some screenshots of the stack before and after the call for strcpy:\n\n32 bit:\n\n64 bit:\n\n\nBTW I'm using QEMU to run the code on an Ubuntu VM 64 bit on an Intel CPU (also tried with Kali Linux 64 bit).\n\nThanks.\n\nThe code is:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \nvoid vulnerable(char* ip) {\n    char buffer[20];\n    strcpy(buffer, ip);\n}\n \nvoid win(){\n    printf(\"You successfully exploited the buffer overflow  \n\");\n    system(\"/bin/sh\");\n}\n\nint main(int argc, char** argv) {\n    if (argc != 2) {\n        printf(\"Argument <input>  \n\");\n        exit(1);\n    }\n    vulnerable(argv[1]);\n    exit(0);\n}\n\n```\nCompiled with:\n\n```\naarch64-linux-gnu-gcc -O0 -fno-stack-protector -z execstack -o vuln64 ./vuln.c\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "204",
  "tags": [
    "disassembly",
    "c",
    "exploit",
    "buffer-overflow",
    "arm64"
  ],
  "user": "alond22",
  "time": "Dec 7, 2023 at 20:38",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "what happens if you enter 200 characters?",
      "time": null
    },
    {
      "user": "alond22",
      "text": "Same, no crash, for larger inputs as well",
      "time": null
    },
    {
      "user": "not2qubit",
      "text": "It seem that the buffer overflow is meant for the ARM64 and not for Intel, so why do you expect this to work on your Intel?",
      "time": null
    },
    {
      "user": "not2qubit",
      "text": "Also try compile with: -fPIE -pie.",
      "time": null
    },
    {
      "user": "alond22",
      "text": "Thank you for the response. (1) Why wouldn't it work? The emulated (ARM) process also has a stack, the stack keeps the return address, and if you overflow the buffer and overrun the return address - the process will jump to that modified address address (2) It worked for a 32-bit ARM binary with QEMU emulation on an Intel CPU (3) -fPIE -pie did not help",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The return address has been placed below the buffer on the stack. I presume it's the 0x55000008e0 entry in your second screenshot. This means that you won't be able to overwrite the return address via the buffer overflow.\n\nSee https://stackoverflow.com/questions/68774522/arm64-buffer-overflow-cannot-overwrite-pc for a more detailed explanation.\n\n",
      "votes": "1",
      "user": "ynwarcs",
      "time": "Dec 11, 2023 at 11:09",
      "is_accepted": true,
      "comments": []
    }
  ]
}