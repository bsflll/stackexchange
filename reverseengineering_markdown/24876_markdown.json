{
  "title": "How does an application identify a DLL file",
  "link": "https://reverseengineering.stackexchange.com/questions/24876/how-does-an-application-identify-a-dll-file",
  "content": "Sorry if this is a basic question, as I'm very new at this.\n\nI'm trying to get an .exe to load a dummy .dll. I've created an example .dll project in VC++ 2019, added the functions listed in the .exe's import table, made sure to declare extern \"C\" __declspec(dllexport), using a hex editor changed the ordinals in the import table to match the new .dll and made sure the filename matches. Still, when I run the .exe with this .dll in its folder, I get this kind of error message:\n\nI've rechecked that I haven't missed any of the function names in the import table, and that none of the function names in the .dll got mangled. Are the offsets for functions entry points in the .dll file hardcoded in the PE format? What am I missing that could cause the application to reject the .dll?\n\nEdit: The program doesn't import LoadLibrary, CreateProcess, ShellExecute nor any other functions I know which handle processes and libraries.\n\n",
  "votes": "2",
  "answers": 3,
  "views": "477",
  "tags": [
    "windows",
    "pe",
    "dll"
  ],
  "user": "Liz",
  "time": "May 3, 2020 at 19:43",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Why are you changing ordinals ? It seems the import is being done by name and not ordinal.",
      "time": null
    },
    {
      "user": "Liz",
      "text": "@IgorSkochinsky yeah I think so too, but I tried to get everything to match in case that would make it work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is possible that the program is employing mittigations against DLL sideloading and won't load the DLL  from current directory. Check Secure loading of libraries to prevent DLL preloading attacks.\n\nYou can check what paths the program is actually trying to use with Process Monitor (see Using Process Monitor to dynamically detect nonsecure loads in the linked article).\n\nP.S. to force program.exe to check for DLLs in the current directory, create an empty file named program.exe.local. However, this may not be enough if it's calling LoadLibrary explicitly.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "May 1, 2020 at 17:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "Liz",
          "text": "I've ran ProcessMonitor, it seems the program is loading it immediately (or almost immediately) directly from the current directory, which I expected (not a Windows DLL). It seems all the DLLs (including the dummy DLL) are opened and loaded into memory and then as the program is about to start, it dies with this message. The program doesn't import LoadLibrary, CreateProcess etc.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Liz: can you add the (trimmed) output of dumpbin /exports MyDll.dll and dumpbin /imports program.exe to the question?",
          "time": null
        }
      ]
    },
    {
      "content": "there is a way more easy solutuion: \n\nuse Microsoft Detours: https://github.com/microsoft/Detours\n\nvery well developed, works out of the box, easy compileable on VStudio shell with nmake (just follow the build instructions), many small examples\n\ncan detours some (or all) of the Dll-Functions to your own code without replacing the original Dll or patching the executable, even possible to intercept any function/method you know the adress of\n\nthe setdll and withdll are very helpfull\n\n",
      "votes": "1",
      "user": "llm",
      "time": "May 5, 2020 at 8:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I know this is not a direct answer, but I cant comment with my amount of rep here. \n\nMaybe the loading application is checking the DLL name, that is stored inside of the loaded DLL. There is a field somewhere in the header, that contains the name of the dll at compile time iirc.\n\nIt could be possible, that the dll is lazy loaded and the error message is just misleading, as the error was thrown during dll loading and not during retrieving of the named function.\n\nIts the first field on the section table header\n\nSection Table header PE File\n\n",
      "votes": "0",
      "user": "Burgesstorm",
      "time": "May 1, 2020 at 7:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}