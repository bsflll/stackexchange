{
  "title": "x64 hook Fails on Messagebox",
  "link": "https://reverseengineering.stackexchange.com/questions/21482/x64-hook-fails-on-messagebox",
  "content": "Quite new to the intels so i might not know much , I just need some form of direction here.\nI am trying to do a simple 64 bit hook detour for function hooking\n\nI do it like so :\n\nThe detour hook Engine :\n\n```\nBOOL JHook::SetHook(LPCSTR dll, LPCSTR name, LPVOID proxy, LPVOID original, PDWORD length)\n{\n    LPVOID FunctionAddress;\n    DWORD TrampolineLength = 0, OriginalProtection;\n    hde64s disam;\n    BYTE Jump[13] = { 0x49, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xE3 };\n\n    FunctionAddress = GetProcAddress(GetModuleHandleA(dll), name);\n    if (!FunctionAddress)\n        return FALSE;\n\n    //disassemble length of each instruction, until we have 5 or more bytes worth\n    while (TrampolineLength < 5)\n    {\n        LPVOID InstPointer = (LPVOID)((DWORD)FunctionAddress + TrampolineLength);\n        TrampolineLength += hde64_disasm(InstPointer, &disam);\n    }\n\n    //Build the trampoline buffer\n    memcpy(original, FunctionAddress, TrampolineLength);\n    *(DWORD*)(Jump + 1) = ((DWORD)FunctionAddress + TrampolineLength) - ((DWORD)original + TrampolineLength + 5);\n    memcpy((LPVOID)((DWORD)original + TrampolineLength), Jump, 5);\n\n    //Make sure the function is writable\n    if (!VirtualProtect(FunctionAddress, TrampolineLength, PAGE_EXECUTE_READWRITE, &OriginalProtection))\n        return FALSE;\n\n    //Build and atomically write the hook\n    *(DWORD*)(Jump + 1) = (DWORD)proxy - (DWORD)FunctionAddress - 5;\n    //SafeMemcpyPadded(FunctionAddress, Jump, 5);\n\n    //Restore the original page protection\n    VirtualProtect(FunctionAddress, TrampolineLength, OriginalProtection, &OriginalProtection);\n\n    //Clear CPU instruction cache\n    FlushInstructionCache(GetCurrentProcess(), FunctionAddress, TrampolineLength);\n\n    *length = TrampolineLength;\n    return TRUE;\n}\n\n```\nThe header file.\n\n```\n#pragma once\n\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <Windows.h>\n    #include \"hde64.h\"\n\n    class SHook\n    {\n    private :\n        LPVOID FunctionAddress;\n        DWORD TrampolineLength = 0, OriginalProtection;\n        hde64s disam;\n        BYTE Jump[13] = { 0x49, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFF, 0xE3 };\n    public:\n        BOOL SetHook(LPCSTR dll, LPCSTR name, LPVOID proxy, LPVOID original, PDWORD length);\n    };\n\n```\nNow the implementation\n\n```\n#include <stdio.h>\n#include <Windows.h>\n#include <intrin.h>\n#include <string>\n#include \"JHook.h\"\n\ntypedef int (WINAPI* TdefOldMessageBoxA)(HWND hWnd, LPCSTR lpText, LPCTSTR lpCaption, UINT uType);\nTdefOldMessageBoxA myOldMessageBoxA;\n\nJHook Jhook;\nint WINAPI HookMessageBoxA(HWND hWnd, LPCSTR lpText, LPCTSTR lpCaption, UINT uType) \n{\n    MessageBoxA(NULL, \"Hooked\", \"Hooked\", MB_OK);\n    return myOldMessageBoxA(hWnd, lpText, lpCaption, uType);\n}\n\nvoid EstablishHook()\n{\n        Jhook.SetHook(\"user32.dll\",\"MessageBoxA\", (LPVOID)&HookMessageBoxA, myOldMessageBoxA,0);\n}\n\nint main() \n{\n    EstablishHook();\n}\n\n```\nNow i was expecting to see something like a Messagebox saying its hooked, and i just see a cmd nothing else, where am i getting it wrong?\n\nEdit\n\nOpening inside a Debugger i have this \n\n```\n00007FF663D143F4 | 55                       | push rbp                                |\n00007FF663D143F5 | 57                       | push rdi                                |\n00007FF663D143F6 | 48:81EC E8000000         | sub rsp,E8                              |\n00007FF663D143FD | 48:8D6C24 20             | lea rbp,qword ptr ss:[rsp+20]           |\n00007FF663D14402 | 48:8BFC                  | mov rdi,rsp                             |\n00007FF663D14405 | B9 3A000000              | mov ecx,3A                              | 3A:':'\n00007FF663D1440A | B8 CCCCCCCC              | mov eax,CCCCCCCC                        |\n00007FF663D1440F | F3:AB                    | rep stosd                               |\n00007FF663D14411 | 48:8B8C24 08010000       | mov rcx,qword ptr ss:[rsp+108]          |\n00007FF663D14419 | 48:8D0D 15FC0000         | lea rcx,qword ptr ds:[7FF663D24035]     | MessageBoxTest.cpp:15732480\n00007FF663D14420 | E8 5DCCFFFF              | call shook.7FF663D11082                 |\n00007FF663D14425 | 45:33C9                  | xor r9d,r9d                             | MessageBoxTest.cpp:13\n00007FF663D14428 | 4C:8D05 95880000         | lea r8,qword ptr ds:[7FF663D1CCC4]      | 00007FF663D1CCC4:\"Hooked\"\n00007FF663D1442F | 48:8D15 8E880000         | lea rdx,qword ptr ds:[7FF663D1CCC4]     | 00007FF663D1CCC4:\"Hooked\"\n00007FF663D14436 | 33C9                     | xor ecx,ecx                             |\n00007FF663D14438 | FF15 2AED0000            | call qword ptr ds:[<&MessageBoxA>]      |\n00007FF663D1443E | 44:8B8D F8000000         | mov r9d,dword ptr ss:[rbp+F8]           | MessageBoxTest.cpp:14\n00007FF663D14445 | 4C:8B85 F0000000         | mov r8,qword ptr ss:[rbp+F0]            |\n00007FF663D1444C | 48:8B95 E8000000         | mov rdx,qword ptr ss:[rbp+E8]           |\n00007FF663D14453 | 48:8B8D E0000000         | mov rcx,qword ptr ss:[rbp+E0]           |\n00007FF663D1445A | FF15 90AF0000            | call qword ptr ds:[<int (__cdecl* __ptr |\n00007FF663D14460 | 48:8DA5 C8000000         | lea rsp,qword ptr ss:[rbp+C8]           | MessageBoxTest.cpp:15\n00007FF663D14467 | 5F                       | pop rdi                                 |\n00007FF663D14468 | 5D                       | pop rbp                                 |\n00007FF663D14469 | C3                       | ret                                     |\n\n```\nWhich shows the MessageBox Now i am a bit lost as to what to do next. Worked on detour Function, pls see above.\n\nEdit\n\nNOW i fixed the Sethook Engine now and it looks like this somehow \n\n```\n#include \"SHook.h\"\n\nBOOL SHook::SetHook(LPCSTR dll, LPCSTR name, LPVOID proxy, LPVOID original, PDWORD length)\n{\n    LPVOID FunctionAddress;\n    DWORD TrampolineLength = 0, OriginalProtection;\n    hde64s disam;\n    BYTE Jump[14] = { 0xFF, 0x25, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n    FunctionAddress = GetProcAddress(GetModuleHandleA(dll), name);\n    if (!FunctionAddress)\n        return FALSE;\n\n    //disassemble length of each instruction, until we have 5 or more bytes worth\n    while (TrampolineLength < 5)\n    {\n        LPVOID InstPointer = (LPVOID)((DWORD64)FunctionAddress + TrampolineLength);\n        TrampolineLength += hde64_disasm(InstPointer, &disam);\n    }\n\n    //Build the trampoline buffer\n    memcpy(original, FunctionAddress, TrampolineLength);\n    *(DWORD64*)(Jump + 1) = ((DWORD64)FunctionAddress + TrampolineLength) - ((DWORD64)original + TrampolineLength + 5); // <-- error falls here\n    memcpy((LPVOID)((DWORD64)original + TrampolineLength), Jump, 5);\n\n    //Make sure the function is writable\n    if (!VirtualProtect(FunctionAddress, TrampolineLength, PAGE_EXECUTE_READWRITE, &OriginalProtection))\n        return FALSE;\n\n    //Build and atomically write the hook\n    *(DWORD64*)(Jump + 1) = (DWORD64)proxy - (DWORD64)FunctionAddress - 5;\n    //SafeMemcpyPadded(FunctionAddress, Jump, 5);\n\n    //Restore the original page protection\n    VirtualProtect(FunctionAddress, TrampolineLength, OriginalProtection, &OriginalProtection);\n\n    //Clear CPU instruction cache\n    FlushInstructionCache(GetCurrentProcess(), FunctionAddress, TrampolineLength);\n\n    *length = TrampolineLength;\n    return TRUE;\n}\n\n```\nOther things remain the same. do not have an idea why it fails still , especially on this line :\n\n```\n*(DWORD64*)(Jump + 1) = ((DWORD64)FunctionAddress + TrampolineLength) - ((DWORD64)original + TrampolineLength + 5);\n\n```\n",
  "votes": "0",
  "answers": 0,
  "views": "360",
  "tags": [
    "c++",
    "function-hooking"
  ],
  "user": "Daniel",
  "time": "Jun 14, 2019 at 15:04",
  "comments": [
    {
      "user": "0xec",
      "text": "You don't seem to be calling MessageBoxA in order to trigger the hook.",
      "time": null
    },
    {
      "user": "Daniel",
      "text": "How u mean sir? @0xec",
      "time": null
    },
    {
      "user": "0xec",
      "text": "I meant in the code you posted there's no call to MessageBoxA after setting the hook in order to check if it works or not.",
      "time": null
    },
    {
      "user": "Daniel",
      "text": "@0xec now i get this as error : Exception thrown: read access violation. p was 0x82042490.",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Now you need to use a debugger (x64dbg) and trace through the code particularly where you are calling MessageBoxA",
      "time": null
    }
  ],
  "answers_data": []
}