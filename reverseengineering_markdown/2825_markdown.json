{
  "title": "How do I determine the length of a routine on ARMv7?",
  "link": "https://reverseengineering.stackexchange.com/questions/2825/how-do-i-determine-the-length-of-a-routine-on-armv7",
  "content": "I am disassembling and reverse engineering the logic of an assembly routine written in ARMv7 (hope I'm using the right terminology, as I'm a newbie for this particular processor).\n\nIn doing so, I came across this site: Introduction to ARM. In order to determine how much code I need to disassemble, first, I need to determine the length of the code. It is my understanding that I only need to look for [Bxx][2] (branch) instructions and instructions that alter the PC (program counter), for example, \n\nCan someone please advise if I have missed out any instructions that I need to look out for? Thank you.\n\n",
  "votes": "8",
  "answers": 2,
  "views": "276",
  "tags": [
    "disassembly",
    "arm"
  ],
  "user": "chuacw",
  "time": "May 27, 2014 at 20:45",
  "comments": [],
  "answers_data": [
    {
      "content": "Here's what IDA considers a return in ARM:\n\n",
      "votes": "7",
      "user": "Igor Skochinsky",
      "time": "Sep 23, 2013 at 10:57",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "In fact, there may be something like:\n\n```\n.text:00192CB6                 POP             {R4}\n.text:00192CB8                 B.W             sub_268508\n.text:00192CB8 ; End of function XXX::YYY::zZz(void)\n\n```\nIIRC I also have seen conditional branches leading outside of what I would expect to be function boundaries, but I cannot find any example now.\n\n",
      "votes": "2",
      "user": "18446744073709551615",
      "time": "May 22, 2014 at 7:44",
      "is_accepted": false,
      "comments": []
    }
  ]
}