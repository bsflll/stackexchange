{
  "title": "idapython: variable instruction references (def-use) for data flow analysis",
  "link": "https://reverseengineering.stackexchange.com/questions/31818/idapython-variable-instruction-references-def-use-for-data-flow-analysis",
  "content": "Let's consider a code snippet:\n\n\n\nI can get disassembler variables-\n\n```\ndef get_function_vars(function) -> list:\n    frameId = idc.get_frame_id(function)\n    if frameId:\n        varStruct = ida_struct.get_struc(frameId)\n        if varStruct:\n            return [mem for mem in varStruct.members]\n    return []\n\n```\nAnd instruction references-\n\n```\ndef get_variable_refs(function, mem) -> ida_frame.xreflist_t():\n    xrefs = ida_frame.xreflist_t()\n    ida_frame.build_stkvar_xrefs(xrefs, function, mem)\n    return [xref.ea for xref in xrefs]\n\n```\nThis gives me instructions referred by say - \"var_38\" -> 2017BB and 2017E6.\n\nI found that I can get hex rays variables by doing something like-\n\n```\ndef get_hexrays_vars(ea) -> dict:\n    hexrays_types = {}\n    try:\n        decompiled = ida_hexrays.decompile(ea)\n    except ida_hexrays.DecompilationFailure:\n        return {}\n    if not decompiled:\n        return {}\n    for var in decompiled.get_lvars():\n        print(var.name)\n\n```\nThis prints -\n\n```\na1\na2\na3\nv3\nv4\nv5\nv6\n\n```\nWhich aligns well with the decompiler view -\n\n\n\nNow I want to get the instructions referred by these variables for e.g. one instruction reference for variable \"V3\" could be 2017D0 as \"V3\" is the register allocated variable in the register ebp.\n\nOne way to do this in binary ninja is for e.g.\n\n```\nfor var in ins.vars_read:\n    depd = [(func.mlil[i].address, ins.address) \n            for i in func.mlil.get_var_definitions(var) \n            if func.mlil[i].address != ins.address]\nfor var in ins.vars_written:\n    depd += [(ins.address, func.mlil[i].address)\n            for i in func.mlil.get_var_uses(var)\n            if func.mlil[i].address != ins.address]\n\n```\nMy end goal is to do some data flow analysis. And I thought this might be possible as decompiler is doing this anyways.\n\n",
  "votes": "4",
  "answers": 0,
  "views": "312",
  "tags": [
    "ida",
    "idapython",
    "hexrays"
  ],
  "user": "R4444",
  "time": "Apr 28, 2023 at 22:47",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "I highly recommend taking a look at gaasedelen's lucid plugin to visualize how the def-use chains (chain_t) are stored/used for the later decompilation passes before it gets converted to ctree. they're organized by mblock_t (as opposed to address), a micro-instruction (minsn_t) can be moved around or transformed depending on the operations done within a pass, and low-level information about the locations being affected by an operation are stored as intervals that either reference the parts of a register or memory location.",
      "time": null
    },
    {
      "user": "R4444",
      "text": "@AliRizvi-Santiago Thanks so much for the lead. I remember seeing this tool before. But, for sure, I will give it a try! thanks!",
      "time": null
    }
  ],
  "answers_data": []
}