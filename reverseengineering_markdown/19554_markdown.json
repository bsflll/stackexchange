{
  "title": "What does this assembly language program output?",
  "link": "https://reverseengineering.stackexchange.com/questions/19554/what-does-this-assembly-language-program-output",
  "content": "I have been struggling with this for a long time. I have the following assembly language code:\n\n```\n.intel_syntax noprefix\n.bits 32\n\n.global asm0\n\nasm0:\n    push    ebp\n    mov ebp,esp\n    mov eax,DWORD PTR [ebp+0x8]\n    mov ebx,DWORD PTR [ebp+0xc]\n    mov eax,ebx\n    mov esp,ebp\n    pop ebp \n    ret\n\n```\nand I want to figure out what asm(0xb6, 0xc6) returns. I've been looking for ASM->C decompilers etc, and I cannot find anything for free. Could someone please help me decipher this? I've been trying for a really long time. I am familiar with C++ and Java programming, so even some sort of tool to convert it would be helpful.\n\nI'm currently reading from this: http://www.godevtool.com/GoasmHelp/newass.htm\n\n",
  "votes": "2",
  "answers": 1,
  "views": "5k",
  "tags": [
    "assembly",
    "decompilation",
    "c"
  ],
  "user": "Joey",
  "time": "Oct 6, 2018 at 1:05",
  "comments": [],
  "answers_data": [
    {
      "content": "This is such a small program so this could be followed without converting it back to C. Let's break it down what happens when it's being called with asm(0xb6, 0xc6).\n\n```\npush    ebp\nmov     ebp, esp\n\n```\nThose two lines are what's is called the function prologue. We first save the calling function stack frame (ebp is tracking that) and in the second one, we set our function stack frame to be equal to the current stack location.\n\n```\nmov eax, DWORD PTR [ebp+0x8]\nmov ebx, DWORD PTR [ebp+0xc]\n\n```\nThe above lines are loading our passed arguments to eax and ebx. Since in cdecl arguments are passed via stack in reverse order, so after those lines in eax we will have 0xb6 and ebx will be equal to 0xc6.\n\n```\nmov eax, ebx\n\n```\nThe value from ebx is stored in eax, thus we drop the need of the first line from the previous fragment. Also since this is the last use of eax in this code it can be interpreted as a return value as this is also a convention in cdecl. So the return value, in this case, would be 0xc6.\n\n```\nmov esp,ebp\npop ebp\n\n```\nThis is just bringing back the stack as it was when we enter the function - also called function epilogue.\n\n```\nret\n\n```\nAnd return back to the caller.\n\nHaving analyzed that it's just obvious that this function returns the second argument that's being passed to it.\n\n```\nint second(int a, int b)\n{\n    return b;\n}\n\n```\nYou could compile this code to a library and use it from C code:\n\n```\n#include <stdio.h>\n\nextern unsigned int _test (unsigned int, unsigned int);\n\nint main(void)\n{\n    printf(\"%x  \n\", _test(0xb6, 0xc6));\n    return 0;\n}\n\n```\nand compile it with gcc -m32 -o run asm.o call.o. \n\nYou could verify that it's the case without running it by for example using godbolt but since the code that assigns the first value to eax and then replaces it with the second is actually not needed - it could just use the second argument from the beginning - it won't be generated even w/o any optimizations. \n\n",
      "votes": "8",
      "user": "Paweł Łukasik",
      "time": "Oct 6, 2018 at 2:31",
      "is_accepted": true,
      "comments": []
    }
  ]
}