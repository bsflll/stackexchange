{
  "title": "How to do Global DLL injection",
  "link": "https://reverseengineering.stackexchange.com/questions/16319/how-to-do-global-dll-injection",
  "content": "How can one go about injection of a DLL into every process? Can SetwindowsHookEx() do the trick? Does AppInit_DLLs work as it used to?\n\n",
  "votes": "4",
  "answers": 2,
  "views": "4k",
  "tags": [
    "windows",
    "dll"
  ],
  "user": "Todd",
  "time": "Jun 5, 2018 at 13:47",
  "comments": [],
  "answers_data": [
    {
      "content": "TLDR: No, no and no.\n\nYou have several questions hiding there in your post:\n\nThe answer to the first question is \"no\".\nThe answer to both parts of the second question is \"no, even if the answer to the first question had been yes\".\n\nLet's start from the second question. Both methods only apply to processes that load user32.dll. So that's already not \"every process\" which is what you asked.\n\nOn top of that is everything I mentioned in the comments to NirIzr's answer:\n\nProcess that have ProcessExtensionPointDisablePolicy set include most Chrome processes (renderer, gpu, ppapi) and a few system processes (like RuntimeBroker.exe), for example.\n\nI don't think that this is merely a caveat. The question is can you inject into all processes, and the answer is no.\n\nBut there are other ways to do DLL injection. What about them?\nThis brings us back to the first question.\n\nSince Windows Vista, some processes are \"protected processes\" for DRM reasons. See:\n\nTo load into these process you must be signed with a special certificate, which you probably don't have.\n\nSince then Microsoft has expanded the protected process infrastructure more and more to include more processes and to allow third-party processes to be protected. See Protecting Anti-Malware Services.\n\nThere are different levels of protection, but to load into some of these processes you also have to be signed with a special certificate that you also don't have, and to load into the rest of them you need a certificate that you can't have (since Microsoft doesn't supply it to any third party).\n\nProcesses protected in that way are smss.exe, csrss.exe, services.exe, some instances of svchost.exe as well the processes for any AV that respects itself. You can't inject into those either, regardless of method (SetWindowsHookEx, AppInit_Dlls, or something more robust that doesn't depend on user32.dll).\n\nAdditionally, another mitigation policy, ProcessSignaturePolicy, available starting with Windows 10 can prevent loading of DLLs not signed by Microsoft, WHQL or the Windows Store. And unlike being a protected process which requires a certificate from Microsoft, any process can opt-in to ProcessSignaturePolicy.\n\nProcess that have this mitigation enabled include WinStore.App.exe (the Windows Store app itself, obviously), MicrosoftEdgeCP.exe (Store only), csrss.exe (Microsoft only), wininit.exe (Microsoft only) and services.exe (Microsoft only).\n\nIn summary: You can't load arbitrary DLLs into many processes, including by calling LoadLibrary from the program's own legitimate code. You can't inject DLLs into these processes, regardless of the method you use.\n\nIf you find a way to do this it would be a major subversion of the Windows 10 security mechanisms and such novelty is more likely to be presented in a professional conference rather than on the SE network.\n\nMore links on Windows 8.1 Protected Processes, from Alex Ionescu's blog:\n\n",
      "votes": "7",
      "user": "Paul",
      "time": "Apr 8, 2022 at 17:56",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "DLL injections is a big subject, but to answer your two specific questions:\n\nEDIT:\n\nBoth of these techniques are being phased out (or completely blocked) by multiple counter-measure features in Windows versions. They're not recommended (actually they are often discouraged by Microsoft itself) for legitimate software (or malware). Users are piling up caveats and restrictions in the comments, but for the sake of clarity and simplicity (and because there're numerous caveats here) I chose to only include a few. \n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Jun 5, 2018 at 13:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "BTW, AppInit_DLLs only works if the process loads user32.dll.",
          "time": null
        },
        {
          "user": "conio",
          "text": "The PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON mitigation policy disables both AppInit_Dlls and global hooks.",
          "time": null
        },
        {
          "user": "conio",
          "text": "Also, starting with Windows 8, AppInit_Dlls are disabled by default, regardless of signing, when secure boot is enabled. See AppInit DLLs and Secure Boot. You probably don't see this on VMs (unless you use Hyper-V), but real machines have Secure Boot enabled by default.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Thanks, Added a paragraph to note there are many caveats, that those techniques are discouraged and refer to the comments for additional forewarnings.",
          "time": null
        }
      ]
    }
  ]
}