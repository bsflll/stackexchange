{
  "title": "How do I decode this JavaScript code? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/18744/how-do-i-decode-this-javascript-code",
  "content": "Each file starts with the same function:\n\n```\n(function(_0x128f83, _0x1ae5b9) {\n    var _0x1b5471 = function(_0x339be5) {\n        while (--_0x339be5) {\n            _0x128f83['push'](_0x128f83['shift']());\n        }\n    };\n    _0x1b5471(++_0x1ae5b9);\n}(_0xf75e, 0xc2));\nvar _0x4e13 = function(_0x24c6e1, _0x3b52a9) {\n    _0x24c6e1 = _0x24c6e1 - 0x0;\n    var _0xc16529 = _0xf75e[_0x24c6e1];\n    return _0xc16529;\n};\n'use strict';\nObject[_0x4e13('0x0')](exports, '__esModule', {\n    'value': !![]\n});\n\n```\nI did some research and have come to the conclusion that the code was obfuscated with a library similar to obfuscator.io. My question is how do i decode the hexadecimal values, as many of the variables in the file are reliant on them (e.g. const electron_1 = require(_0x4e13('0x1'));). Any feedback would be much appreciated.\n\n",
  "votes": "-2",
  "answers": 1,
  "views": "19k",
  "tags": [
    "decryption",
    "obfuscation",
    "deobfuscation",
    "javascript",
    "hexadecimal"
  ],
  "user": "solo",
  "time": "6 years ago",
  "comments": [
    {
      "user": "MCCCS",
      "text": "stackoverflow.com/questions/30194953/…",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can use this tool to partial deobfuscate that code: http://jsnice.org/\n\nIn that case I get this:\n\n```\n'use strict';\n(function(data, i) {\n  /**\n   * @param {number} isLE\n   * @return {undefined}\n   */\n  var write = function(isLE) {\n    for (; --isLE;) {\n      data[\"push\"](data[\"shift\"]());\n    }\n  };\n  write(++i);\n})(_0xf75e, 194);\n/**\n * @param {string} level\n * @param {?} ai_test\n * @return {?}\n */\nvar _0x4e13 = function(level, ai_test) {\n  /** @type {number} */\n  level = level - 0;\n  var rowsOfColumns = _0xf75e[level];\n  return rowsOfColumns;\n};\n\"use strict\";\nObject[_0x4e13(\"0x0\")](exports, \"__esModule\", {\n  \"value\" : !![]\n});\n\n```\n",
      "votes": "2",
      "user": "Álvaro Romero",
      "time": "Jul 10, 2018 at 11:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "solo",
          "text": "Got it. How do I go about decoding the _0x4e13-like values, though?",
          "time": null
        },
        {
          "user": "Álvaro Romero",
          "text": "I don't have idea, I tried to complete it with zeros until it had 6 characters, but it doesn't work.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@solo: why do you want to? Clearly it's just a random object name (or hashed beyond recall), and there is nothing to decode to.",
          "time": null
        },
        {
          "user": "solo",
          "text": "I need to read the rest of the source code and it's hard to read when most of the variables are in that format.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@solo: then rename them to whatever you find easier to read.",
          "time": null
        }
      ]
    }
  ]
}