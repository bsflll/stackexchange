{
  "title": "How does ECC work with nandwrite/nanddump in mtd-utils?",
  "link": "https://reverseengineering.stackexchange.com/questions/10975/how-does-ecc-work-with-nandwrite-nanddump-in-mtd-utils",
  "content": "I am working on a device which has a NAND flash chip in TSOP48, a SK Hynix H27U1G8F2BTR (1Gbit/128Mbyte, 2048byte (+ 64byte spare) pages, 128K blocks).\n\nI have desoldered the chip and dumped the contents to a file. This file contains the OOB (out-of-band) data as well, resulting in a 138412032byte file.\n\nI create a new simulated NAND MTD device using:\n\n```\nmodprobe nandsim first_id_byte=0xad second_id_byte=0xf1 third_id_byte=0x00 fourth_id_byte=0x1d\n\n```\nWhich results in a device with the correct parameters:\n\n```\n$mtdinfo /dev/mtd0\nmtd0\nName:                           NAND simulator partition 0\nType:                           nand\nEraseblock size:                131072 bytes, 128.0 KiB\nAmount of eraseblocks:          1024 (134217728 bytes, 128.0 MiB)\nMinimum input/output unit size: 2048 bytes\nSub-page size:                  512 bytes\nOOB size:                       64 bytes\nCharacter device major/minor:   90:0\nBad blocks are allowed:         true\nDevice is writable:             true\n\n```\nI can now write my image to mtd using nandwrite, with the -o option to indicate that the dump contains OOB information:\n\n```\nnandwrite -o /dev/mtd0 with_oob.bin\n\n```\nThen I can dump the image using nanddump:\n\n```\nnanddump /dev/mtd0 -f without_oob.bin\n\n```\nThis results in a 134217728byte file without OOB data. This file is sensible (as in, contains file systems I can mount).\n\nA few times, when playing around, I have seen ECC errors when running nanddump. \n\nHow does this combination of nandsim, nandwrite and nandddump decide which ECC scheme to use? The flash is from a TI AM335 system, and as far as I know, the ECC scheme is decided by a combination of the processor and OS. How do these utilities know what to do?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "12k",
  "tags": [
    "flash"
  ],
  "user": "Cybergibbons",
  "time": "Sep 27, 2015 at 5:33",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "You might have better luck asking on electronics.stackexchange.com instead of here.",
      "time": null
    },
    {
      "user": "Cybergibbons",
      "text": "I think I will try to move it over if I get nothing here. I've tried a few other places and the answers have been don't know or \"read the code\" (which is great, but I still can't work out how it works).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "First of all the ECC scheme used does not necessaryly have to be the for all the flash erase blocks. There are ususally 3 different types of flash partitions used and for every type the method to specify the used ECC code differs:\n\nIn general the use of a specific ECC method is limited by the OOB size of the flash. The AM335x_U-Boot_User's_Guide (cannot post link here because of reputation) explains it in sections BCH Flash OOB Layout and the example matches to the flash chip you are using. The 64 bytes per 2k page effectively limit the usable ECC algorithms to BCH8, BCH4 or HAMMING codes.\n\nThe AM335x processor's ROM bootcode decides which ECC scheme to use for NAND flash depending on the mechanism expalined in the AM335x technical reference manual chapter 26.1.7.4 NAND\n\nOther ways to control the ECC behavior are ONFI or and I2C EEPROM but the H27U1G8F2BTR datasheet does not mention ONFI so I guess it is not supported by the flash chip.\n\nSo basically BCH8 or BCH16 or no ECC mechanism is used for the first 128K the ROM bootloader reads from NAND flash.\n\nThe bootloader decides this on his own. For example for U-boot this information is compiled into u-boot and the first level bootloader (SPL/MLO) as well. The information is controlled by U-Boot configuration settings set at compile time. Recent versions of U-boot can switch the ecc at runtime using the nandecc command.\n\nThe selection is completely OS specific. For Linux embedded systems using AM335x processors I know that this information is passed into the kernel using the device tree.\n\nThere is a parameter called bch which can be passed to the nandsim module\nto select an ecc code. From the code I guess It is initialized to zero so it won't use any ECC code. So it seems that nandsim can use BCH8 and BCH16 but only one for the whole flash that is simulated.\n\nmodprobe nandsim bch=8 first_id_byte=0xad second_id_byte=0xf1 third_id_byte=0x00 fourth_id_byte=0x1d\n\n\nAgain, this depends on the OS/Linux you used to dump the flash. Similar to the nandsim module real mtd drivers have ways to specify the used ECC scheme (kernel parameters, device tree). But you can instruct nanddump to ignore the ECC information, too.\n\n",
      "votes": "6",
      "user": "bshm",
      "time": "Jun 18, 2016 at 10:09",
      "is_accepted": false,
      "comments": []
    }
  ]
}