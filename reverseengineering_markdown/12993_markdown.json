{
  "title": "How to quickly distinguish PE/DLL/DOS-MZ files based on magic numbers?",
  "link": "https://reverseengineering.stackexchange.com/questions/12993/how-to-quickly-distinguish-pe-dll-dos-mz-files-based-on-magic-numbers",
  "content": "I know that the specifications of the Microsoft PE/DLL/DOS-MZ files states that the two first bytes of a PE/DLL/DOS-MZ file is MZ (0x4d,0x5a) orZM(0x5a,0x4d`).\n\nThe problem with such a small signature is that a lot of other files may match the same specification and a test based only on this two first bytes quickly tends to be inconclusive.\n\nSo, my question is simple, after testing that the two first bytes are MZ (or ZM), what other, more reliable, test can be performed to check that the file is a PE/DLL/DOS-MZ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "7k",
  "tags": [
    "pe",
    "dll",
    "file-format",
    "dos-exe"
  ],
  "user": "perror",
  "time": "Jul 5, 2016 at 15:56",
  "comments": [],
  "answers_data": [
    {
      "content": "That would be e_lfanew in the MZ header itself. For simple (16 bit) MSDOS software, this ought to be 0, and for any extended format it should point right to one of the specific LE, PE, or NE headers' identifiers (which all are exactly those two characters). As in all of these cases the header itself is a mere stub, e_cp (the total size of this executable in pages) should not be larger than the offset of e_lfanew. (Plus or minus that infernal e_cblp, the \"bytes on last page of file\" â€“ I always forget which one it is.)\n\nSee Peering inside the PE, an article that despite its age still is very useful.\n\n",
      "votes": "2",
      "user": "Jongware",
      "time": "Jul 5, 2016 at 14:56",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "This is exactly it, I need to clarify a bit about the e_cblp but I feel this is the way to go. Thanks!",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@perror: checking the rest of the header stub may be overkill. You could write a quick-and-dirty routine that checks all of your local EXE files, and list out the ones that pass the basic e_lfanew test, and then check if there are any false positives (falsely marked \"yes\"). I could be wrong but don't think there can be false negatives - a 32-bit executable that does not use that offset.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "Windows executables (both 32-bit and 64-bit) must use that offset, but DOS files can, too, for other purposes.  The check that you need is the secondary signature shown above, plus \"LX\" for OS/2 files.  Note that the \"PE\" signature is 4 bytes long, not 2 like the others.",
          "time": null
        }
      ]
    },
    {
      "content": "An old DOS EXE header is only 28 (0x1C) bytes long and is usually followed by the DOS relocation table if present.  The IMAGE_DOS_HEADER struct of the NT PE header is much larger at 64 (0x40) bytes as it has been extended for the various other Windows executable formats.\n\nTrying to interpret e_lfanew at offset 60 (0x3C) for a plain DOS executable as suggested by the recommended answer is incorrect as this pulls in whatever data happens to be at that offset, usually from the DOS relocation table but it can vary between valid DOS executables.  Using a handful of old DOS executables, the value at this position might not be zero, thus any logic that tries to use this as a distinguishing marker may crash or work incorrectly.\n\nWhen trying to distinguish a plain DOS EXE, you can't reliably look at any members past e_ovno (overlay number) of the IMAGE_DOS_HEADER struct because they are Windows and OS/2 extensions to the DOS EXE header and do not exist in plain DOS executables.\n\nAs far as distinguishing between a DOS executable and a PE executable, I have used the following logic with success:\n\n",
      "votes": "4",
      "user": "byteptr",
      "time": "Nov 28, 2016 at 8:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}