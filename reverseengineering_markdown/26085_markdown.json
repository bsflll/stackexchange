{
  "title": "How to watch a function's local variable in GDB?",
  "link": "https://reverseengineering.stackexchange.com/questions/26085/how-to-watch-a-functions-local-variable-in-gdb",
  "content": "I'm reversing a 64bit binary  with gdb & peda and I've identified a function of interest (probably encoding user input). I want to watch the function interesting's  local variable arg1.\n\nHow can I watch a local variable of a known function in gdb?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "3k",
  "tags": [
    "gdb",
    "local-variables"
  ],
  "user": "ChocolateOverflow",
  "time": "Oct 8, 2020 at 8:53",
  "comments": [
    {
      "user": "Dvd848",
      "text": "Something like this? stackoverflow.com/questions/53173854/…",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The simplest way to do it is to use a watchpoint. A watchpoint will stop execution when a certain memory address is read or written. According to the GDB Manual section on setting Watchpoints:\n\n```\nUsage: watch [-l|-location] expr [thread thread-id] [mask maskvalue]\n\n```\n```\n(gdb) watch foo\n\n```\nBreakpoint command lists are much what they sound like. They are lists of GDB commands that are run when a breakpoint is hit. A key feature here is that you can include the continue command in the command list, making GDB not stop like it normally would.\n\nThe GDB Manual section on Breakpoint Command Lists tells us the following:\n\n```\nUsage:\ncommands [list…]\n… command-list …\nend\n\n```\n```\nbreak foo if x>0\ncommands\nsilent\nprintf \"x is %d  \n\",x\ncont\nend\n\n```\n",
      "votes": "1",
      "user": "Gogeta70",
      "time": "Oct 21, 2020 at 7:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}