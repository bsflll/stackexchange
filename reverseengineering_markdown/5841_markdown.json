{
  "title": "Python library for assembling x86, x64 and ARM exploits",
  "link": "https://reverseengineering.stackexchange.com/questions/5841/python-library-for-assembling-x86-x64-and-arm-exploits",
  "content": "It would be very useful to have a pure Python library that could assemble x86, x64, and ARM instructions. Do you have a recommendation?\n\nI don't mind if they are not pure Python, but that'd be preferred.\n\n",
  "votes": "6",
  "answers": 3,
  "views": "12k",
  "tags": [
    "disassembly",
    "assembly",
    "python"
  ],
  "user": null,
  "time": "May 3, 2019 at 17:31",
  "comments": [],
  "answers_data": [
    {
      "content": "Take a look at Gallopsled's pwntools.  Does all the things you want it to, and has most of it built in already.\n\nhttps://github.com/Gallopsled/pwntools\n\nFor a few examples of it in use, I put up some writeups from Codegate 2013 and the pwnies do their own writeups as well.\n\nHere's a quick example of \"I want to dup file descriptor #4 (e.g. a connected TCP socket) to stdin/stdout/stderr, and pop a shell\".\n\n```\n#!/usr/bin/env python\nfrom pwn import *\ncontext.arch = 'amd64' # Default architecture is i386\n\nshellcode = shellcraft.dupio(4) + shellcraft.sh()\nprint shellcode\nprint '----'\nprint enhex(asm(shellcode))\nprint '----'\nprint hexdump(asm(shellcode))\n\n```\nPrints out\n\n```\ndup_1:\n    push 4\n    pop rbp\n\n    push 3\nloop_2:\n    pop rsi\n    dec rsi\n    js after_3\n    push rsi\n\n    /* call dup2('rbp', 'rsi') */\n    push SYS_dup2 /* 0x21 */\n    pop rax\n    mov rdi, rbp\n    syscall\n\n    jmp loop_2\nafter_3:\n    /* execve(path='/bin///sh', argv=['sh'], envp=0) */\n    /* push '/bin///sh\\x00' */\n    push 0x68\n    mov rax, 0x732f2f2f6e69622f\n    push rax\n    mov rdi, rsp\n    /* push argument array ['sh\\x00'] */\n    /* push 'sh\\x00' */\n    push 0x1010101 ^ 0x6873\n    xor dword ptr [rsp], 0x1010101\n    xor esi, esi /* 0 */\n    push rsi /* null terminate */\n    push 8\n    pop rsi\n    add rsi, rsp\n    push rsi /* 'sh\\x00' */\n    mov rsi, rsp\n    xor edx, edx /* 0 */\n    /* call execve() */\n    push SYS_execve /* 0x3b */\n    pop rax\n    syscall\n\n----\n6a045d6a035e48ffce780b566a21584889ef0f05ebef6a6848b82f62696e2f2f2f73504889e768726901018134240101010131f6566a085e4801e6564889e631d26a3b580f05\n----\n00000000  6a 04 5d 6a  03 5e 48 ff  ce 78 0b 56  6a 21 58 48  │j·]j│·^H·│·x·V│j!XH│\n00000010  89 ef 0f 05  eb ef 6a 68  48 b8 2f 62  69 6e 2f 2f  │····│··jh│H·/b│in//│\n00000020  2f 73 50 48  89 e7 68 72  69 01 01 81  34 24 01 01  │/sPH│··hr│i···│4$··│\n00000030  01 01 31 f6  56 6a 08 5e  48 01 e6 56  48 89 e6 31  │··1·│Vj·^│H··V│H··1│\n00000040  d2 6a 3b 58  0f 05                                  │·j;X│··│\n00000046\n0490a0e30280a0e30900a0e10810a0e13f0090ef018058e2faffff5a0c008fe20020a0e305002de90d10a0e10b0090ef2f62696e2f736800\n0000a0e31eff2fe1\n\n```\nThey've also got nifty command-line tools for testing shellcode.  For example:\n\n```\n$ pwn shellcraft i386.linux.echo \"Hello world\"\n6801010101813424736d6501686f20776f6848656c6c6a04586a015b89e16a0b5acd80\n\n```\nIf you pipe it to a file or another program, raw binary is sent.\n\n```\n$ pwn shellcraft i386.linux.echo \"Hello world\" | xxd\n00000000: 6801 0101 0181 3424 736d 6501 686f 2077  h.....4$sme.ho w\n00000010: 6f68 4865 6c6c 6a04 586a 015b 89e1 6a0b  ohHellj.Xj.[..j.\n00000020: 5acd 80                                  Z..\n\n```\nYou can print out the raw annotated assembly:\n\n```\n$ pwn shellcraft i386.linux.echo \"Hello world\" -f asm\n/* push 'Hello world' */\npush 0x1010101\nxor dword ptr [esp], 0x1656d73\npush 0x6f77206f\npush 0x6c6c6548\n/* call write('1', 'esp', 0xb) */\npush SYS_write /* 4 */\npop eax\npush (1) /* 1 */\npop ebx\nmov ecx, esp\npush 0xb\npop edx\nint 0x80\n\n```\nOr generate an ELF:\n\n```\n$ pwn shellcraft i386.linux.echo \"Hello world\" --format elf > hello\n$ file hello\nhello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped \n\n```\nAnd even automatically execute or debug it:\n\n```\n$ pwn shellcraft ... --run\n$ pwn shellcraft ... --debug\n\n```\nYou can also assemble your own shellcode on the command-line:\n\n```\n$ pwn asm nop\n90\n$ pwn asm nop | xxd\n00000000: 90                                       .\n\n```\n",
      "votes": "5",
      "user": "Zach Riggle",
      "time": "May 10, 2017 at 22:31",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Some Python assembler libraries:\n\n",
      "votes": "6",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Zach Riggle",
          "text": "None of these assemble x86/x64 and ARM.",
          "time": null
        }
      ]
    },
    {
      "content": "Today, several years after the original post and answers - There's another noteworthy package for generating machine code from assembly- Keystone.\n\nKeystone is written in C++ but has binding for many languages (Python included), and supports multiple architectures (including x86, amd64 and ARM) so it's a perfect fit!\n\nQuoting the website's highlighted features:\n\nKeystone is part of a more extensive set of tools together with Capstone (Disassembler) and Unicorn (Emulator).\n\nAdditionally, if you just want something quick and easy (and don't mind using an online service) - shell-storm's online dis/assembler is also based on Keystone and Capstone\n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Nov 11, 2020 at 10:12",
      "is_accepted": false,
      "comments": []
    }
  ]
}