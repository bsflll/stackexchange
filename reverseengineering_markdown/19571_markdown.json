{
  "title": "Is the value of EBP before the main function important?",
  "link": "https://reverseengineering.stackexchange.com/questions/19571/is-the-value-of-ebp-before-the-main-function-important",
  "content": "So before we come to the main function, it looks we are in a function with a name __libc_start_main\n\nand before we come to our main function we obviously push EBP value in the stack ( the value of EBP before main function, in the __libc_start_main function)\n\nso first off is this value important? after the execution of main function, will the __libc_start_main function need this value?\n\nis there any function that gets called before __libc_start_main therefore making this EBP value important? \n\ni tested it and even if i overwrite this value(in the stack) with overflowing, the program finishes with no problem but i don't get how and why? shouldn't it result in error or page fault? \n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "x86",
    "memory",
    "buffer-overflow",
    "stack",
    "register"
  ],
  "user": "John P",
  "time": "Oct 8, 2018 at 15:25",
  "comments": [
    {
      "user": "user464014",
      "text": "All general-purpose registers are zeroed by the Linux loader before the program starts executing, which gets passed to __libc_start_main I believe",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "__libc_start_main is called by the entry point code (usually in a file called crt0.S or similar) and that code usually sets up the initial EBP value (usually to 0, to denote end of the call stack for the debuggers). Here's a sample entry point code from a random ELF binary:\n\n```\n_start:\n     xor     ebp, ebp\n     pop     esi\n     mov     ecx, esp\n     and     esp, 0FFFFFFF0h\n     push    eax\n     push    esp             ; stack_end\n     push    edx             ; rtld_fini\n     push    offset __libc_csu_fini ; fini\n     push    offset __libc_csu_init ; init\n     push    ecx             ; ubp_av\n     push    esi             ; argc\n     push    offset main     ; main\n     call    ___libc_start_main\n     hlt\n\n```\nWhile __libc_start_main itself could initialize EBP to 0, this would make it appear as if it's the first code in the binary when looking at the call stack, which is not correct (the execution begins at _start, the entry point).\n\nBesides, __libc_start_main  can be (and often is) written in C instead of assembly, and it's easier for the compiler to generate the standard prolog code for it instead of making some kind of special case exception.\n\nAs for overwriting the value, you don't get a crash because:\n\nIn the unlikely event that ___libc_start_main does return (e.g. due to a bug in libc), the entry point code will execute the hlt instruction which is privileged so the process will be killed by the OS.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Oct 8, 2018 at 18:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "John P",
          "text": "One question, why in the wikipedia of crt0, in the code for x86_64 the entry code directly calls main instead of __libc_start_main? en.wikipedia.org/wiki/Crt0",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "It depends on the specific compiler/toolchain/libc used. __libc_start_main can perform additional tasks before or after calling main, but in some cases you donâ€™t really need them",
          "time": null
        },
        {
          "user": "John P",
          "text": "so overall if we have _libc_start_main, the order of execution is crt0 -> _libc_start_main -> main, correct?",
          "time": null
        }
      ]
    }
  ]
}