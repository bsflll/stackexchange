{
  "title": "How to retrieve the encryption key from a dll file?",
  "link": "https://reverseengineering.stackexchange.com/questions/27390/how-to-retrieve-the-encryption-key-from-a-dll-file",
  "content": "I have a dll file that makes an http post request to a webserver , request looks something like this :\n\n```\nUmdUsFrEB3wGMuuAz1Znywuedx6+ee9cHDyzqM3Gc0FW8TxKFitPfkoC23aJeW39rPhAIpkg7vyzYzRwsloEfUM3y1LnehrJVR5tQuoZ8EUa6uFgzFauuaiP1Ea9+lRg5OU\n\n```\ni am not much of an expert but to me it looks like Base64 , but when i try and decode it using online decoders , most of them just gives an error that its not base64 format ,  and other decoders gives out Chinese characters,\n\nand some gives results like this:\n\n```\nRgT°ZÄ|2ë€ÏVgËžw¾yï\\<³¨ÍÆsAVñ<J+O~JÛv‰ymý¬ø@\"™ îü³c4p²Z}C7ËRçzÉUmBêðEêá`ÌV®¹¨ÔF½úT`äå\n\n```\nI am assuming that its been encrypted and then encoded ?\nif so then is there a way to decrypt it ? i opened the dll file in JustDecompile and it does give me readable code , but i am not sure where to look for the encryption method or key in the code\n\ni did find out a certain part of decompiled code somewhat interesting though :\n\n```\n    private byte[] (byte[] u0002, byte[] u0003)\n    {\n        byte[] numArray;\n        byte[] numArray1 = new byte[89];\n        ((Array)u0003).CopyTo((Array)numArray1, 0);\n        ((Array)u0002).CopyTo((Array)numArray1, 16);\n        if (0 == 0)\n        {\n            ((Array)Encoding.ASCII.GetBytes(\"MTRandom\")).CopyTo(numArray1, 80);\n        }\n        do\n        {\n            numArray = (new MD5CryptoServiceProvider()).ComputeHash(numArray1);\n        }\n        while (3 == 0);\n        return numArray;\n    }\n\n    private new unsafe void (byte[] u0002)\n    {\n        void* length = (void*)stackalloc IntPtr[9];\n        this. = (ulong)0;\n        *(length + 4) = this. <= 1101;\n        if ((sbyte)(*(length + 4)) == 0)\n        {\n            . _u0001 = new .();\n            byte[] numArray = base.(8);\n            _u0001. = BitConverter.ToUInt16(numArray, 0);\n            _u0001. = BitConverter.ToUInt16(numArray, 2);\n            _u0001. = BitConverter.ToUInt16(numArray, 4);\n            _u0001. = BitConverter.ToUInt16(numArray, 6);\n            byte[] numArray1 = base.((int)_u0001.);\n            byte[] numArray2 = this.(numArray1, u0002, _u0001);\n            *length = null;\n            while (true)\n            {\n                if (((int)(*length) >= (int)numArray2.Length ? true : (int)numArray2.Length - (int)(*length) < 8))\n                {\n                    return;\n                }\n                byte[] numArray3 = new byte[8];\n                Array.Copy(numArray2, (int)(*length), numArray3, 0, 8);\n                *length = (int)(*length) + 8;\n                _u0001 = this.(numArray3, u0002);\n                *(length + 5) = (int)numArray2.Length - (int)(*length) < _u0001.;\n                if ((sbyte)(*(length + 5)) != 0)\n\n```\nis it possible that this part of the code is responsible for encryption or is it the case of barking at the wrong tree?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "348",
  "tags": [
    "decompilation",
    "dll",
    "decryption",
    "decompile",
    "encodings"
  ],
  "user": "Sanders",
  "time": "Apr 3, 2021 at 12:39",
  "comments": [
    {
      "user": "user7290573",
      "text": "Obvious question, but have you checked if there are any calls to base64-encoding functions?",
      "time": null
    },
    {
      "user": "Rakurai",
      "text": "The output from decoding base64 looks like it might be compressed.  Have you tried CyberChef?  It'll let you string together layers of manipulation easily.  Here's a recipe with decoding base64 and deflate on your input:  gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/…",
      "time": null
    }
  ],
  "answers_data": []
}