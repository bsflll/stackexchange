{
  "title": "Calling a function in a MIPS library",
  "link": "https://reverseengineering.stackexchange.com/questions/9089/calling-a-function-in-a-mips-library",
  "content": "I have disassembled a MIPS library in the online Retargetable Disassembler, but I don't really understand the code I got (I'm new to reverse engineering). Would it be possible for me to either recompile the code so I can call it, or use the library directly to call the code?\n\nI assume the latter would only be possible if I'm running on MIPS. How else could I proceed with reverse engineering this code?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "586",
  "tags": [
    "mips"
  ],
  "user": "Stavros Korokithakis",
  "time": "Jun 8, 2015 at 0:55",
  "comments": [],
  "answers_data": [
    {
      "content": "You will have to learn MIPS assembly, and some information about the processor and the registers it uses (for example, opcodes are 3-operand, and r0 is always zero).\n\nIf you want to add dynamic analysis to your efforts at static disassembly, you'll need the corresponding environment. For example, if your binary is a piece of old SGI IRIX software, a Linux MIPS system won't help you much, since calling conventions, file formats etc. are different. However, this doesn't neccesarily mean you need a MIPS processor, there are various emulators out there for MIPS devices.\n\nEspecially in the case of MIPS under Linux, many routers use MIPS processors, and there are several of them that allow you to telnet or ssh in. So, in addition to running an emulator, you could try getting one of those devices, copying your binary there, and running it, possibly under the control of a debugger like gdb or IDA Pro (you need the professional version, the free version and the entry-level version don't support MIPS).\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jun 8, 2015 at 10:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Stavros Korokithakis",
          "text": "I see, thank you. This is actually a binary from a router, so I can use the same router to do it, which makes sense. Thank you!",
          "time": null
        }
      ]
    },
    {
      "content": "Reverse-engineering a binary only code is done through tools (disassemblers, debuggers, decompilers...) and through a certain amount of knowledge of the assembly langage that you are looking at.\n\nThe only way to reverse-engineer a piece of binary code is to go through it and try to understand it. If you have no prior knowledge of MIPS assembler, then get some. If you know nothing about disassemblers, debbugers and decompilers, learn some about it.\n\n",
      "votes": "0",
      "user": "perror",
      "time": "Jun 8, 2015 at 8:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}