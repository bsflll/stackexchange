{
  "title": "Behringer CRC8 algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/23099/behringer-crc8-algorithm",
  "content": "The Behringer DEQ2496 audio device can have commands sent to it via MIDI, however they require a valid CRC code in order for the device to accept them.\n\nI have thus far been unable to work out how the CRC code is calculated.  The manual suggests it is CRC8 however I have not been able to configure a CRC8 algorithm to produce matching values.\n\nHere is some sample data, including valid CRC codes:\n\nThe DEQ2496 SysEx manual says of the layout of each of the above files:\n\nI have taken care of the 7/8 coding, so now I have a block of 3+256 bytes, consisting of:\n\nI've tried a couple of CRC algorithms (with and without a lookup table), written code to run through all possible 8-bit polynomials, initial and final XOR values, and yet I can't find any parameters that work for more than one block.\n\nAlthough the manual suggests the CRC byte itself is not included in the CRC calculation, I also tried leaving it in place and setting it to various values like 0x00 and 0xFF however this didn't yield any results either.\n\nIs there anyone with more CRC knowledge than me who is able to figure out what they mean here by \"crc8 checksum\"?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "217",
  "tags": [
    "crc"
  ],
  "user": "Malvineous",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Well thanks to @IgorSkochinsky who suggested in another question of mine to try a disassembler, I found a Docker image that contained a Blackfin toolchain which allowed me to use objdump to disassemble the code:\n\n```\nbfin-elf-objdump -D -b binary -mbfin bootloader.bin > bootloader.disasm\n\n```\nAfter hastily consulting a manual on Blackfin assembler and poking around a bit, I was able to get a vague idea of what was going on, and I was able to find the CRC function, which turned out not to be a CRC function at all, but a DIY checksum.\n\nUsing the disassembly as a reference, I was able to replicate the algorithm in my Javascript code:\n\n```\nfunction behringer_crc8(data) {\n    let crc = 0;\n    for (let b of data) {\n        for (let j = 0; j < 8; j++) {\n            if (!((b ^ crc) & 1)) crc ^= 0x19;\n            b >>= 1;\n            // Rotate (shift right, move lost LSB to new MSB)\n            crc = ((crc & 1) << 7) | (crc >> 1);\n        }\n    }\n    return crc ^ 0xbf;\n}\n\n```\nComparing this code against the distributed firmware update shows that it is able to reproduce the CRC bytes correctly!\n\nIt also turned out that despite the manual saying the two-byte block number prefix was included in the checksum, it turned out it wasn't, and only the 256-byte content is checksummed.\n\n",
      "votes": "3",
      "user": "Malvineous",
      "time": "Jan 26, 2020 at 9:57",
      "is_accepted": true,
      "comments": []
    }
  ]
}