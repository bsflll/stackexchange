{
  "title": "Fixing ghidra decompilation",
  "link": "https://reverseengineering.stackexchange.com/questions/24829/fixing-ghidra-decompilation",
  "content": " \ni am working a little bit with Ghidra.\nMy assembly code doesn't match with the decompiled code: \n\n```\n                             *                          FUNCTION                          *\n                             **************************************************************\n                             undefined __stdcall CalCrc8(undefined4 param_1, int para\n                               assume LRset = 0x0\n                               assume TMode = 0x1\n             undefined         r0:1           <RETURN>\n             undefined4        r0:4           param_1\n             int               r1:4           param_2\n             int               r2:4           param_3\n                             CalCrc8                                         XREF[2]:     Entry Point(*), \n                                                                                          Frame_Cap:0005a2b8(c)  \n        00059dd8 05 4b           ldr        r3,[DAT_00059df0]                                = 0005F314h\n        00059dda 10 b5           push       { r4, lr }\n        00059ddc 8a 18           add        param_3,param_2,param_3\n        00059dde 7b 44           add        r3,pc\n        00059de0 03 e0           b          LAB_00059dea\n                             LAB_00059de2                                    XREF[1]:     00059dec(j)  \n        00059de2 11 f8 01 4b     ldrb.w     r4,[param_2],#0x1\n        00059de6 60 40           eor        param_1,r4\n        00059de8 18 5c           ldrb       param_1,[r3,param_1]=>Crc8Table               = \n                             LAB_00059dea                                    XREF[1]:     00059de0(j)  \n        00059dea 91 42           cmp        param_2,param_3\n        00059dec f9 d1           bne        LAB_00059de2\n        00059dee 10 bd           pop        { r4, pc }\n                             DAT_00059df0                                    XREF[1]:     CalCrc8:00059dd8(R)  \n        00059df0 14 f3 05 00     undefined4 0005F314h                                        ?  ->  0005f314\n\n```\n```\nvoid CalCrc8(undefined4 param_1,int param_2,int param_3)\n\n{\n  param_3 = param_2 + param_3;\n  while (param_2 != param_3) {\n    param_2 = param_2 + 1;\n  }\n  return;\n}\n\n```\nThe XOR (address 00059de6) and fetching the value from the CRC8Table is missing. \nHow do i fix the decompiled code? \n\nThe architecture is ARM32v8.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "disassembly",
    "decompilation",
    "ghidra"
  ],
  "user": "AndiYo",
  "time": "Apr 26, 2020 at 1:05",
  "comments": [],
  "answers_data": [
    {
      "content": "The question was a while ago, but i think the trick was to change the return type of the function \"CalcCrc8\"\n\nEdit: Ghidra doesn't recognize the return type in this example. It thinks that it is void, in reality it was something else. It probably interprets a machine-instruction wrongly as a return?\nSo edit the return type of the function parameter to your needed return type (probably look at the assembler code). For my case, the rest of the function was then interpreted correctly by ghidra.\n\n",
      "votes": "-1",
      "user": "AndiYo",
      "time": "Feb 25, 2021 at 13:43",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Hi @AndiYo would you mind sharing how? E.g. a shortcut you used or a screenshot of the menu item(s) you used?!",
          "time": null
        }
      ]
    }
  ]
}