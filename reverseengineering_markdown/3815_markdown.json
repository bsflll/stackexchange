{
  "title": "Reversing ELF 64-bit LSB executable, x86-64 ,gdb",
  "link": "https://reverseengineering.stackexchange.com/questions/3815/reversing-elf-64-bit-lsb-executable-x86-64-gdb",
  "content": "I'm a newbie and just got into RE.\nI got a ELF 64-bit LSB executable, x86-64. I'm trying to reverse it.\nFirst I tried to set a break point on line 1 using\n\n```\ngdb ./filename\nbreak 1\n\n```\nThe gdb says\n\n```\nNo symbol table is loaded.  Use the \"file\" command.\n\n```\nOKie so gave out file command\n\n```\n(gdb) file filename\nReading symbols from /media/Disk/filename...(no debugging symbols found)...done.\n\n```\nHow could a set a break point to see the execution..?\n\n",
  "votes": "28",
  "answers": 1,
  "views": "113k",
  "tags": [
    "gdb",
    "elf",
    "x86-64"
  ],
  "user": "nkg",
  "time": "Mar 7, 2014 at 6:55",
  "comments": [],
  "answers_data": [
    {
      "content": "If you have no useful symbol, you first need to find the entrypoint of the executable. There are several ways to do it (depending on the tools you have or the tools you like the best):\n\nOnce the entrypoint is known, you can set a breakpoint on it and start looking for the main procedure. Because, you have to know that all the programs will start by a _start() procedure in charge of initializing the memory for the process and loading the dynamic libraries. In fact, this first procedure is a convention in the Unix World.\n\nWhat exactly does this initialization procedure is quite tedious to follow and, most of the time, of no interest at all to understand your program. The main() procedure will only start after all the memory is set-up and ready to go. \n\nLets see how to do that (I assume that the executable has been compile with gcc):\n\n```\n(gdb) break *0x40489c\nBreakpoint 1 at 0x40489c\n(gdb) run\nStarting program: /bin/ls \nwarning: Could not load shared library symbols for linux-vdso.so.1.\n\nBreakpoint 1, 0x000000000040489c in ?? ()\n\n```\nOkay, so we stopped at the very beginning of the executable. At this time, nothing is ready, everything need to be set-up. Let see what are the first steps of the executable:\n\n```\n(gdb) disas 0x40489c,+50\nDump of assembler code from 0x40489c to 0x4048ce:\n=> 0x000000000040489c:  xor    %ebp,%ebp\n   0x000000000040489e:  mov    %rdx,%r9\n   0x00000000004048a1:  pop    %rsi\n   0x00000000004048a2:  mov    %rsp,%rdx\n   0x00000000004048a5:  and    $0xfffffffffffffff0,%rsp\n   0x00000000004048a9:  push   %rax\n   0x00000000004048aa:  push   %rsp\n   0x00000000004048ab:  mov    $0x411ee0,%r8\n   0x00000000004048b2:  mov    $0x411e50,%rcx\n   0x00000000004048b9:  mov    $0x4028c0,%rdi\n   0x00000000004048c0:  callq  0x4024f0 <__libc_start_main@plt>\n   0x00000000004048c5:  hlt    \n   0x00000000004048c6:  nopw   %cs:0x0(%rax,%rax,1)\nEnd of assembler dump.\n\n```\nWhat follow the hlt is just rubbish obtained because of the linear sweep performed by gdb. So, just ignore it. What is relevant is the fact that we are calling __libc_start_main() (I won't comment on the @plt because it would drag us out of the scope of the question). \n\nIn fact, the procedure __libc_start_main() initialize the memory for a process running with the libc dynamic library. And, once done, jump to the procedure located in %rdi (which usually is the main() procedure). See the following picture to have a global view of what does the __libc_start_main() procedure [1]\n\n\n\nSo, indeed, the address of the main() procedure is at 0x4028c0. Let disassemble a few instructions at this address:\n\n```\n(gdb) x /10i 0x4028c0\n   0x4028c0:    push   %r15\n   0x4028c2:    push   %r14\n   0x4028c4:    push   %r13\n   0x4028c6:    push   %r12\n   0x4028c8:    push   %rbp\n   0x4028c9:    mov    %rsi,%rbp\n   0x4028cc:    push   %rbx\n   0x4028cd:    mov    %edi,%ebx\n   0x4028cf:    sub    $0x388,%rsp\n   0x4028d6:    mov    (%rsi),%rdi\n   ...\n\n```\nAnd, if you look at it, this is indeed the main() procedure. So, this where to really start the analysis.\n\nEven if this way of looking for the main() procedure will work in most the cases. You have to know that we strongly rely on the following hypothesis:\n\nAnyway, you should now be able to track down a program with no symbol at all if you read this answer carefully.\n\nFinally, you can find an excellent summary about the starting of an executable by reading \"Linux x86 Program Start Up or - How the heck do we get to main()?\" by Patrick Horgan.\n\n",
      "votes": "60",
      "user": "perror",
      "time": "Jun 27, 2018 at 9:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "Revolucion for Monica",
          "text": "Thanks for your answer, Monsieur. I followed your steps but when running I always have a zsh:1: permission denied. It seems similar to launch gdb over non compiled .o files. Do I need to compile it first?",
          "time": null
        }
      ]
    }
  ]
}