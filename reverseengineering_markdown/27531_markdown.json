{
  "title": "Reverse Engineering Classes in ARM",
  "link": "https://reverseengineering.stackexchange.com/questions/27531/reverse-engineering-classes-in-arm",
  "content": "I came across this part in the book Reverse Engineering For Beginners book by Denis Yurichev. It writes about reverse engineering Classes in C++, but it doesn't provide any examples in ARM.\n\nPage 546\n\n```\n_this$ = -4\n; size = 4\n??0c@@QAE@XZ PROC ; c::c, COMDAT\n; _this$ = ecx\npush ebp\nmov ebp, esp\npush ecx\nmov DWORD PTR _this$[ebp], ecx\nmov eax, DWORD PTR _this$[ebp]\nmov DWORD PTR [eax], 667\nmov ecx, DWORD PTR _this$[ebp]\nmov DWORD PTR [ecx+4], 999\nmov eax, DWORD PTR _this$[ebp]\nmov esp, ebp\npop ebp\nret 0\n??0c@@QAE@XZ ENDP ; c::c\n_this$ = -4 ; size = 4\n_a$ = 8\n; size = 4\n_b$ = 12\n; size = 4\n??0c@@QAE@HH@Z PROC ; c::c, COMDAT\n; _this$ = ecx\npush ebp\nmov ebp, esp\npush ecx\nmov DWORD PTR _this$[ebp], ecx\nmov eax, DWORD PTR _this$[ebp]\nmov ecx, DWORD PTR _a$[ebp]\nmov DWORD PTR [eax], ecx\nmov edx, DWORD PTR _this$[ebp]\nmov eax, DWORD PTR _b$[ebp]\nmov DWORD PTR [edx+4], eax\nmov eax, DWORD PTR _this$[ebp]\nmov esp, ebp\npop ebp\nret 8\n??0c@@QAE@HH@Z ENDP ; c::c\n\n```\nAs you can see ECX is used to hold the pointer of this for accessing the members of the class. How is this done in ARM assembly?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "147",
  "tags": [
    "arm",
    "class-reconstruction"
  ],
  "user": "LUser",
  "time": "Apr 22, 2021 at 17:09",
  "comments": [
    {
      "user": "multithr3at3d",
      "text": "One way would be to write a simple program and compile for both architectures, and compare them. I believe this behavior may also depend on the compiler and options used.",
      "time": null
    },
    {
      "user": "LUser",
      "text": "This is what was done in the end. See answer below.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Because it is compiler specific , it is not required to be internally the same always. It seems though that CLANG and GCC use R0 to store this.\n\nC++\n\n```\nclass MyClass {\n  int field_;\n public:\n  void set_field() { this->field_ = 42; }\n};\n\nvoid test() {\n  MyClass x;\n  x.set_field();\n}\n\n```\nARM:\n\n```\ntest():\n        push    {r11, lr}\n        mov     r11, sp\n        sub     sp, sp, #8\n        add     r0, sp, #4\n        bl      MyClass::set_field()\n        mov     sp, r11\n        pop     {r11, lr}\n        bx      lr\nMyClass::set_field():\n        sub     sp, sp, #4\n        str     r0, [sp]\n        ldr     r1, [sp]\n        mov     r0, #42\n        str     r0, [r1]\n        add     sp, sp, #4\n        bx      lr\n\n```\nIntel :\n\n```\nMyClass::set_field():\n        push    rbp\n        mov     rbp, rsp\n        mov     QWORD PTR [rbp-8], rdi\n        mov     rax, QWORD PTR [rbp-8]\n        mov     DWORD PTR [rax], 42\n        nop\n        pop     rbp\n        ret\ntest():\n        push    rbp\n        mov     rbp, rsp\n        sub     rsp, 16\n        lea     rax, [rbp-4]\n        mov     rdi, rax\n        call    MyClass::set_field()\n        nop\n        leave\n        ret\n\n```\n",
      "votes": "0",
      "user": "LUser",
      "time": "Apr 24, 2021 at 17:07",
      "is_accepted": true,
      "comments": []
    }
  ]
}