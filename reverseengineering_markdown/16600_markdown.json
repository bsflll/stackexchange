{
  "title": "Reversing Self-Modifying Malware",
  "link": "https://reverseengineering.stackexchange.com/questions/16600/reversing-self-modifying-malware",
  "content": "recently i got my hands on one sample that self-modifies its .text section. So, I placed a breakpoint on .text section on write operation and then continued. I found out that it zeroes out the .text section and then writes the decrypted code to that section and then makes a call to the decrypted OEP. I used Scylla to correct the OEP and dump the .exe file.\n\n\n\nWhen i get the imports it shows that the program only imports kernel32.dll.\n\n\n\nThis is the assembly of the dumped .exe file in the PEBear.\n\n\n\nThis is what I get when i try to open the dumped file in ImmunityDbg.\n\nThe imports i get are also very different from what Scylla gave me + The dumped program does not run it crashes right away. What am i doing wrong?\n\nThanks.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "1k",
  "tags": [
    "disassembly",
    "ollydbg",
    "malware",
    "unpacking",
    "immunity-debugger"
  ],
  "user": "rustam Shirinov",
  "time": "Oct 22, 2017 at 20:19",
  "comments": [
    {
      "user": "ubnix",
      "text": "could you give the sha256 hash of the file?",
      "time": null
    },
    {
      "user": "rustam Shirinov",
      "text": "9ed85a6de31604eb431cdd7632cad0e5be54af10a16cc6ca0b886d1f92bb91b8",
      "time": null
    },
    {
      "user": "Megabeets",
      "text": "ImmunityDbg is a fork of OllyDbg, both sometimes have difficult to recognize the code of the unpacked part. In Olly you can right click on these unrecognized code and click Analysis > Analyze Code. I'll suggest you to follow the steps Igor mentioned in this answer. You'll often have a hard time making an unpacked file executable, keep this in mind.",
      "time": null
    },
    {
      "user": "rustam Shirinov",
      "text": "Thanks for the advice, btw I forgot to mention everytime i go through the same procedure I get different hashes even though I m doing the same thing.",
      "time": null
    },
    {
      "user": "Kerim Can Kalıpcıoğlu",
      "text": "Is it possible malware using anti-debugging methods?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Start by placing a breakpoint on the entrypoint itself, which is probably not in the .text section at all, but in another section entirely.  You will see that the program resolves its own imports dynamically, probably by searching within kernel32.dll for LoadLibrary and GetProcAddress.\n\nBy tracing through the top layer, you will also find when the decryption is complete and the transfer of control occurs to the decrypted code.  If you dump the file at that moment, and then disassemble the result, you might be able to see the cause of the crash - it is likely to be anti-debugging mechanisms, of which there are too many possibilities to list here (but see http://pferrie.host22.com/papers/antidebug.pdf for a selection of commonly-used ones).\n\n",
      "votes": "5",
      "user": "peter ferrie",
      "time": "Oct 27, 2017 at 15:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "rustam Shirinov",
          "text": "Thanks. Even though my problem was IAT I will upvote for detailed answer.",
          "time": null
        }
      ]
    },
    {
      "content": "Thanks everyone who responded. The IAT was the problem. The OEP I found was the real OEP pointing to the unpacked code. But the dumped executable was not runnable because IAT was corrupt. After Fixing IAT in Scylla. It is now runnable.\n\n",
      "votes": "2",
      "user": "rustam Shirinov",
      "time": "Oct 27, 2017 at 19:16",
      "is_accepted": true,
      "comments": []
    }
  ]
}