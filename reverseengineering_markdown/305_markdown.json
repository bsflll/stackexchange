{
  "title": "What are the qualitative differences in reverse engineering x64/Win64 code versus x32/Win32 code?",
  "link": "https://reverseengineering.stackexchange.com/questions/305/what-are-the-qualitative-differences-in-reverse-engineering-x64-win64-code-versu",
  "content": "Many professional reverse engineers spend their days looking at 32-bit code compiled for Windows, and familiarity breeds proficiency. What are the high-level differences between reverse engineering 64-bit Windows programs versus 32-bit ones?\n\nI am talking about things that will be staring me in the face all the time, as opposed to, say, slightly differing behavior of APIs. For instance, \n\n",
  "votes": "22",
  "answers": 3,
  "views": "2k",
  "tags": [
    "x86-64"
  ],
  "user": "Rolf Rolles",
  "time": "Mar 27, 2013 at 6:50",
  "comments": [],
  "answers_data": [
    {
      "content": "One of the biggest differences between x86 and x86_64 is the introduction of RIP-relative addressing.  Similar to 32-bit ARM, data can now be (easily) referenced at an offset from the current RIP value.\n\nFor example, here are the first few instructions of __libc_csu_init() in a x86 program:\n\n```\n08048420 <__libc_csu_init>:\n 8048420:       55                      push   %ebp\n 8048421:       57                      push   %edi\n 8048422:       31 ff                   xor    %edi,%edi\n 8048424:       56                      push   %esi\n 8048425:       53                      push   %ebx\n 8048426:       e8 f9 fe ff ff          call   8048324 <__x86.get_pc_thunk.bx>\n 804842b:       81 c3 79 12 00 00       add    $0x1279,%ebx\n 8048431:       83 ec 1c                sub    $0x1c,%esp\n 8048434:       8b 6c 24 30             mov    0x30(%esp),%ebp\n 8048438:       8d b3 0c ff ff ff       lea    -0xf4(%ebx),%esi\n\n```\nAnd here it is on x86_64 (note 0x40050a and 0x400511):\n\n```\n0000000000400500 <__libc_csu_init>:\n  400500:       48 89 6c 24 d8          mov    %rbp,-0x28(%rsp)\n  400505:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)\n  40050a:       48 8d 2d 97 01 20 00    lea    0x200197(%rip),%rbp        # 6006a8 <__init_array_end>\n  400511:       4c 8d 25 88 01 20 00    lea    0x200188(%rip),%r12        # 6006a0 <__frame_dummy_init_array_entry>\n  400518:       48 89 5c 24 d0          mov    %rbx,-0x30(%rsp)\n  40051d:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)\n  400522:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)\n  400527:       4c 89 7c 24 f8          mov    %r15,-0x8(%rsp)\n\n```\nYou can find more information about this convention here: http://www.codegurus.be/codegurus/programming/riprelativeaddressing_en.htm\n\n",
      "votes": "12",
      "user": "mncoppola",
      "time": "Mar 29, 2013 at 4:22",
      "is_accepted": false,
      "comments": [
        {
          "user": "BlueRaja - Danny Pflughoeft",
          "text": "Link is dead~~~",
          "time": null
        }
      ]
    },
    {
      "content": "One of the big things that will be different is the calling convention - on 64-bit some parameters are passed in registers; see http://en.wikipedia.org/wiki/X86_calling_conventions and the references\n\nOther obvious things include the larger registers, more SSE registers, and 64-bit arithmetic (mov QWORD / movq et al.).  Beyond what you would expect, things are actually fairly similar.  See http://en.wikipedia.org/wiki/X86-64#Architectural_features for an overview of the large differences - most of the other new features are of more importance to kernelspace code rather than userspace code.  Beyond logical extensions of 32-bit instructions to 64-bit instructions, the instruction set remains fairly static.\n\n",
      "votes": "10",
      "user": "Robert Mason",
      "time": "Mar 27, 2013 at 3:18",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Regarding tool support, Ollydbg (and Immunity Debugger) does not support x64. Windbg is probably the best free alternative.\n\n",
      "votes": "1",
      "user": "ekse",
      "time": "Aug 15, 2013 at 19:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}