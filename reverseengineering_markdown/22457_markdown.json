{
  "title": "How to determine when/where pointers in .ctors get mapped?",
  "link": "https://reverseengineering.stackexchange.com/questions/22457/how-to-determine-when-where-pointers-in-ctors-get-mapped",
  "content": "So I am learning about ELF, and am looking through a binary in Ghidra as I do. I've made sense of the ELF header, and now I am looking through the program header table.\n\nMy binary has a bunch of entries in the program header table, but I am hung up on one in particular...\n\nFrom referencing...\n\nhttp://www.sco.com/developers/gabi/latest/ch5.pheader.html#p_flags\n\n...I can see what the different flags mean. Of relevance:\n\n```\np_offset = 0xABCDEF\np_vaddr = 0x1BCDEF\np_filesz = <number>\np_memsz = <bigger number>\n\n```\nI am able to go to the p_vaddr value in the binary, and it brings me to the .ctors section. Where I do see what appears to be a list of pointers, but currently those pointers do not represent valid virtual addresses (by currently I mean they are not virtual addresses that I can \"go\" to in Ghidra). When I run the program dynamically in gdb though, I can run x addr_of_interest and it succeeds and says it is pointing to something in a library blah blah.\n\nI found a relevant link from GCC too, but it did not answer my question as far as I could tell...\n\nhttps://gcc.gnu.org/onlinedocs/gccint/Initialization.html\n\nMy question therefore is this: When/how are these pointers mapped to valid memory, and where in the ELF file is the information that would tell me how this happens?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "240",
  "tags": [
    "c++",
    "elf",
    "ghidra",
    "x86-64"
  ],
  "user": "pooley1994",
  "time": "Nov 5, 2019 at 11:36",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Are you 100% sure you are looking at .ctors and not, for example, .got?",
      "time": null
    },
    {
      "user": "pooley1994",
      "text": "@igor thanks for clarifying, but yes, I'm sure. There is a (symbol I believe?) In Ghidra displayed as __CTOR_LIST__ and once you jump there an auto generated comment that says .ctors",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Duh. Stupid.\n\nImportantly, the binary I am looking at is not a PIE (Position Independent Executable). I had Ghidra's image base set to 0x0, rather than 0x400000 (which is the p_vaddr of the loadable segment containing all of the code, and notably, the canonical value used here for x86_64 binaries). This is the only reason the function pointers listed in .ctors were not addresses Ghidra could go to. As soon as I set the image base to 0x400000 they were legitimate. \n\n:facepalm:\n\n",
      "votes": "1",
      "user": "pooley1994",
      "time": "Nov 5, 2019 at 14:24",
      "is_accepted": true,
      "comments": []
    }
  ]
}