{
  "title": "Real-time changes of executable on IDE/Assembler",
  "link": "https://reverseengineering.stackexchange.com/questions/15961/real-time-changes-of-executable-on-ide-assembler",
  "content": "I'm new on this, sorry for bad usage of terms or overextending an explanation. I'm learning code languages and the way I found to bring it to my world so I can learn it better was coding for/with games i play.\n\nWhen a window close on the game a function needs to be called, when the character move or you pick an item, everything has a command, function, process or some value of an address change and etc... What i wanted to know is if there something that shows me on real time every call, every value change, address value change, etc...\n\nNowadays i have to reach some value address by CheatEngine, changing the value till i find the correct address. With this kind of thing i would have a list off things that is happening right now, and a \"log\" of the past things, then i go to the exact time that i did something, so i would have to look on that peace of the list and discover what did my \"something\"\n\nI have seen it somewhere, thats why i'm asking here, if i'm totally wrong and this doesn't exist, i'm sorry, i will delete this post.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "198",
  "tags": [
    "disassembly",
    "assembly",
    "ollydbg",
    "executable",
    "disassemblers"
  ],
  "user": "Bruno Cerk",
  "time": "Aug 4, 2017 at 1:26",
  "comments": [
    {
      "user": "blabb",
      "text": "this is quiet broad scope. start with message loop and dig further about SendMessage. each normal gui application  has a loop which checks periodically for messages . each message generated globally (key press ,mouse movement) etc has a hwnd it is meant for each message is parsed and either acted upon or discarded it is like a post office all the letters are collected sorted and dispatched to the address if no reciever it is sent back or lies in some dump to get discarded",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If cheatengine is insufficient, and debugging feels like too much, a middle ground could be using API monitoring tools.\nAPI monitoring tools will, in one way or another, hook all (or most) APIs being called by a process and record most of the input and output of every call. This obviously slows down the process considerably but if that is acceptable will provide a lot of data in a readable and useful way.\n\nI often use rohitab's API Monitor as it's very flexible and manages to provide a lot of information per API.\n\n",
      "votes": "0",
      "user": "NirIzr",
      "time": "Aug 4, 2017 at 1:48",
      "is_accepted": true,
      "comments": [
        {
          "user": "Bruno Cerk",
          "text": "I would be able to see a address changing its value for exemple ? or a address adding a value at another address and things like that ?",
          "time": null
        },
        {
          "user": "Bruno Cerk",
          "text": "And thanks for the information, didn't knew nothing about that API Monitor, i will definitely search more about it",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "You won't be able to monitor arbitrary memory regions using an API monitor, you'll be able to see which API functions are called, identify windows message processing loops and see what APIs are called by that click of a button.",
          "time": null
        },
        {
          "user": "Bruno Cerk",
          "text": "Understood, thanks very much. Do you know any \"learning material\" for that kind of tool related to games process ? if not, i'm already digging into API Monitor and what it does anyway, but if i could find something more related to the \"area\" that i want to apply it, would be nicer",
          "time": null
        }
      ]
    },
    {
      "content": "sounds like you need something that implements differential debugging to quickly pinpoint the code which was executed in one case (e.g. clicking the button) but not others (not clicking). An early tool implementing this approach was PaiMei by Pedram Amini. Unfortunately it's been abandoned and probably won't work with recent software. IDA has a trace recording/diffing feature which may be used for this purpose. You can also write your own tool based on some debugging framework or a DBI engine like PIN.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Aug 6, 2017 at 15:22",
      "is_accepted": false,
      "comments": []
    }
  ]
}