{
  "title": "Keygenme - Key location",
  "link": "https://reverseengineering.stackexchange.com/questions/18918/keygenme-key-location",
  "content": "So I was messing with an interesting keygenme, written in C++, which derives the key based on the values of the OSINFO structure. Now, when checking for a valid key it uses the following instruction:\n\nCMP EAX, DWORD PTR DS:[key]\n\nMy question is: why isn't the key stored in a local variable or something like:[EBP-X]?\n\nHow would I translate it back into C++ so that it stores the key in DS:[key] rather than in the stack?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "121",
  "tags": [
    "ida",
    "x86",
    "crackme"
  ],
  "user": "Trey",
  "time": "Jul 29, 2018 at 5:03",
  "comments": [],
  "answers_data": [
    {
      "content": "Use a global or static variable.\n\nExplanation:\n\nEBP (base pointer) typically holds the address of the current stack frame, in that case it's used to get the address to local variable. (reference) Global or static variables don't need such pointer, as their address is fixed on program load.\n\nBy the way: I didn't test compiling a simple program on a 32-bit compiler. 64-bit mode doesn't use segment registers.\n\n",
      "votes": "3",
      "user": "user202729",
      "time": "Jul 30, 2018 at 4:38",
      "is_accepted": true,
      "comments": []
    }
  ]
}