{
  "title": "Is it possible to call external functions?",
  "link": "https://reverseengineering.stackexchange.com/questions/21179/is-it-possible-to-call-external-functions",
  "content": "I was wondering, assuming I wrote a dll in C++ and could access another application's memory, is it possible to call outside functions if I had the address?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "c++",
    "functions"
  ],
  "user": "XxMulti GamerxX",
  "time": "Apr 18, 2019 at 15:56",
  "comments": [
    {
      "user": "s3c",
      "text": "Do you want to run your DLL in the same context as the application? With DLL injection or the like? Or do you want the DLL to run in one process, and call functions from another process?",
      "time": null
    },
    {
      "user": "XxMulti GamerxX",
      "text": "I'd like it to call functions from the process that it's injected into.",
      "time": null
    },
    {
      "user": "julian",
      "text": "Once injected into a process, a DLL resides within the same address space in virtual memory presented to that process by the operating system. Interacting with a different process would require some form of inter-process communication. Please refer to the following discussion of the utility of DLL injection in the context of reverse engineering: What is DLL Injection and how is it used for reversing?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "K, I'll take a stab at an answer. If you create a DLL that gets loaded by a process, of which there are numerous different methods, you can execute your code in the context of the remote process, not strictly what the question is about, but some groundwork. The common techniques are:\n\nSo now that we have code running in the remote process. We can do anything we want in that process ONLY, with some caveats: \n\nSo, yes, it's possible to interact with code in another process. Depending on the scenario it might not be reliable, and likely won't be portable across versions.\n\n",
      "votes": "1",
      "user": "s3c",
      "time": "Apr 26, 2019 at 8:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "AntonioCS",
          "text": "Would it be possible to use CreateRemoteThread (or something else) that would execute a function in process of which we have the process id? Just call a function of that exe, not inject a dll, just a bit of code that calls function at address X. Thanks",
          "time": null
        },
        {
          "user": "s3c",
          "text": "Yeah, trivially, assuming you can find the address of the function after relocation. To pass parameters that need a block of data you specify you'll need to allocate memory in the remote process with VirtualAllocEx and call WriteProcessMemory to populate it. And if you need access to the result, use ReadProcessMemory if it's stored in a buffer, or some sort of IPC if it's more complex. Alternatively, you can create exports for the specific piece of code and use it like a DLL (possible with EXEs as well). I did a talk on this a while back: youtube.com/watch?v=fe49ZOaTh6Y",
          "time": null
        },
        {
          "user": "AntonioCS",
          "text": "Wow, thanks for the quick reply. I'll go and watch the talk. Thanks again",
          "time": null
        }
      ]
    }
  ]
}