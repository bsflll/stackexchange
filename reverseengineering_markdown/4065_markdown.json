{
  "title": "Are there ANY supported Fermi Disassemblers out there?",
  "link": "https://reverseengineering.stackexchange.com/questions/4065/are-there-any-supported-fermi-disassemblers-out-there",
  "content": "I've recently started exploring the world of GPU-based malware.  Academia doesn't have a ton of papers here, but there's some powerful ones.  I'm looking at trying to improve the communities tools in terms of NVIDIA's fermi ISA, (since AMD published theirs!)  \n\nTo date, I've not found any fermi disassemblers, but one ONE fermi assembler:\n\nasfermi\n\nAre their any plugins/disassemblers that this community is aware of, that my google searches have apparently turned up zilch?  NVIDIA's supplied tools don't work for binaries compiled with vs2010.  \n\n=============[Updated Context]===================\n\nAppears that to a certain extent, my assumptions were wrong.  NVIDIA's disassembly tools (nvobjdump, nvdisasm) are designed only to work with their *.cubin (maybe *.ptx) intermediate assemblies.  Which is bad, from a malware analysis perspective.  \n\nAfter searching extensively I found a dead project called decuda.  (I say dead because it hasn't had a commit in years.)  AND it doesn't seem to be able to handle disassembling *.cubin binaries from the latest releases, 5.5 and 6.0.  \n\n",
  "votes": "3",
  "answers": 1,
  "views": "681",
  "tags": [
    "disassembly",
    "windows",
    "linux",
    "nvidia"
  ],
  "user": "avgvstvs",
  "time": "Apr 17, 2014 at 23:09",
  "comments": [],
  "answers_data": [
    {
      "content": "Well, after spending lots of time in NVIDIA's documentation, and the recent update to 6.0, they added the ability for their program cuobjdump to extract *.cubin files from any given target executable.  So you can extract *.cubin files from PE or ELF files like this:\n\n```\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v6.0\\Bin\\win32\\Debug>cuobjdump -xelf all simpleAtomicIntrinsics.exe\n\n```\nThen use nvdisasm on your target *.cubin file:\n\n```\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v6.0\\Bin\\win32\\Debug>nvdisasm NVIDIA-CUDA-simpleAtomicIntrinsics.sm_50.cubin\n\n```\nOh, by the way, nvdisasm does actually use control-flow disassembly.  cuobjdump uses linear.  \n\nBy playing with the provided tools you can extract opcodes, but unfortunately there's snakey instructions like S2R which according to NVIDIA's documentation does this:  \n\nS2R    Special Register to Register\n\nWith no documentation I've seen yet as to what the special registers even ARE on this architecture.  The best documentation on this so far is here.\n\n",
      "votes": "2",
      "user": "avgvstvs",
      "time": "May 1, 2014 at 21:47",
      "is_accepted": true,
      "comments": []
    }
  ]
}