{
  "title": "Where ES/GS/FS are pointing to?",
  "link": "https://reverseengineering.stackexchange.com/questions/16336/where-es-gs-fs-are-pointing-to",
  "content": "As far as I know those segments are extra or general. But at which part of program memory they are actually pointing? If I undestand it correctly DS is poining at entry point of Dump, SS stands for Stack, what is happening with those leftovers from Intel conception.\n\n\nThose are my registers using Ollydbg, how can I predict what will be moved into EAX?\n\n```\nMOV EAX, DWORD PTR FS:[0]\n\n```\n",
  "votes": "9",
  "answers": 1,
  "views": "6k",
  "tags": [
    "windows",
    "assembly",
    "ollydbg",
    "x86"
  ],
  "user": "erexo",
  "time": "Sep 13, 2017 at 20:39",
  "comments": [],
  "answers_data": [
    {
      "content": "On x86 32bit windows the FS segment register points to a structure called the Thread Information Block or the TIB for short. This structure is created by the kernel on thread creation and is used to support OS related functionalities, services and APIs.\n\nExamples of data TIB usage are:\n\nAnd many other...\n\nTo predict the actual value of a dereference into the FS register, you'll need to consult a mapping of that (only partially documented) structure for the specific OS version you're working with. For example, the TIB wikipedia page I mentioned earlier describes a 32bit windows TIB layout.\n\nOn linux the GS register is used for a similar purpose regardless of register size, and 64bit intel windows uses both the FS and GS registers.\n\nThe information stored in the TIB should not be used directly by programs, how ever specific members of the structure often are used for unintended purposes such as detecting debuggers in more prevalent ways.\n\nAs you can see, other segment registers are rarely used.\n\nAlthough the segment registers are used for OS-related functionality, that was not the intended goal segment registers were made for. In the past, when CPU register sized varied between 8 and 16 bit, addressing was highly limited and only 64KB of address space was available. Since original CPUs were only running in Real Mode (and not Protected Mode), that address space had to be shared with all running services, processes, connected peripherals, etc...\n\nTo bypass that limitation, the Memory Segmentation was brought into use in two forms. One was Protected Mode VS Real Mode, and the other was the segment registers - which were used as an offset for the actual registers being used for addressing. This allowed a greatly increased addressing range and was considered a valid solution. In the days of 32bit protected mode processors, where 4GB of Virtual Addressable Space is available to each process, and certainly with 64 bit CPUs, the segment registers are rarely used for their original goal (except for highly low level components such as Real Mode boot loaders, which might still need the extra addressing).\n\nP.S.\n\nDS stands for Data Selector.\n\n",
      "votes": "11",
      "user": "NirIzr",
      "time": "Feb 27, 2023 at 14:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "erexo",
          "text": "Thanks for explaining it, now the concept of segments it's much clearer to me.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "There's an additional side to segment selectors, which I didn't want to dwell into because your question was essentially about the FS register. Nowadays segment registers are still used for permissions and memory management. This is pretty important to the understanding of memory managemnt on the Intel architecture family but not really related to your question, you can read about it here: en.wikipedia.org/wiki/Global_Descriptor_Table",
          "time": null
        },
        {
          "user": "Et7f3XIV",
          "text": "typo rage -> range. I can't edit because it is less than 6 chars",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "@Et7f3XIV Thanks!",
          "time": null
        }
      ]
    }
  ]
}