{
  "title": "ARM assembly: Strange instruction pattern (endless loop?)",
  "link": "https://reverseengineering.stackexchange.com/questions/13718/arm-assembly-strange-instruction-pattern-endless-loop",
  "content": "I noticed a strange instruction pattern. First the value of PC is moved into LR and then a register value is moved into PC.\n\nHere some examples:\n\n```\n.text:00001488                 MOV             LR, PC\n.text:0000148C                 MOV             PC, R2\n ...\n.text:000304E8                 MOVNE           LR, PC\n.text:000304EC                 MOVNE           PC, R3\n\n```\nIf this pattern corresponds to a call instruction, wouldn't this result in an endless loop? If this does not correspond to a call, what is this ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "arm"
  ],
  "user": "langlauf.io",
  "time": "Oct 14, 2016 at 10:50",
  "comments": [],
  "answers_data": [
    {
      "content": "I'm not pretty sure if it is a call pattern, but this code is OK because of pipeline and will not create the endless loop. As people quoting here from here\n\n",
      "votes": "3",
      "user": "w s",
      "time": "Oct 14, 2016 at 11:37",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "This was actually the correct way to perform indirect calls in ARM before the introduction of the BLX instruction (ARMv5 IIRC). ARM(32-bit version) is special in that the value of PC is pointing two instructions ahead when you read it (so +8 in ARM mode and +4 in Thumb mode). So, taking your example:\n\n```\n.text:00001488                 MOV             LR, PC\n\n```\nhere, the PC value will be 1488+8 = 1490, so LR=0x1490\n\n```\n.text:0000148C                 MOV             PC, R2\n\n```\nhere, the PC will be set to the value in R2 and the processor will start fetching instructions from that address. Most likely it will be a function which ends with a return instruction - MOV PC, LR (IDA shows it as RET), so the execution will resume at the value of LRï¼ˆ0x1490) which happens to be just after the original MOV PC, R2 instruction (0148C+4=0x1490), so in effect that sequence of instruction is equivalent to BLX R2 in the newer processors.\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Oct 14, 2016 at 17:58",
      "is_accepted": false,
      "comments": []
    }
  ]
}