{
  "title": "How to find ELF symbol table reference?",
  "link": "https://reverseengineering.stackexchange.com/questions/17487/how-to-find-elf-symbol-table-reference",
  "content": "In a huge ELF binary, I find some functions which use some kind of (string) constant. The constant itself seems to be stored inside the binary itself but I can't figure out, how to resolve IDA's disassembly result:\n\n```\n.text:096B3D58 lea     eax, (stru_8199A2C.st_shndx+1 - 96B3D47h)[ebx]\n.text:096B3D5E push    eax             ; char *\n.text:096B3D5F push    edx             ; this\n.text:096B3D60 call    _ZN11NameDB7resolveEPKc ; NameDB::resolve(char const*)\n\n```\nMy problem is to understand the source of the LEA instruction. For me it reads like \"the symbol at 0x96B3D47 bytes prior to the symbol table index\". Strangely enough, the position 096B3D47 is just a few lines above the above excerpt...\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "elf",
    "symbols"
  ],
  "user": "oxident",
  "time": "Feb 17, 2018 at 19:07",
  "comments": [],
  "answers_data": [
    {
      "content": "... and the instruction before that address is a call instruction. Right?\n\nThis kind of instructions is used for position-independend code: The code can be loaded into another address and it will work the same way without modifications. Typically it works like this:\n\n```\n    call some_address                         ; 1\nsome_address:\n    pop ebx                                   ; 2\n    lea eax, (some_text - some_address)[ebx]  ; 3\n    ...\nsome_text:\n    ...\n\n```\nThe distance some_text - some_address is always the same when the executable file is loaded into different memory addresses. Therefore the lea instruction will work independently on the location (address) where the program is executed.\n\nThe same is true for the call instruction because the argument of the call instruction is stored PC-relative.\n\nThe argument of the instruction lea eax, [some_text] however would be an absolute (not a PC-relative) address so you would have to exchange it when executing the program at another address.\n\nIf there is a relocation table entry for the lea instruction the disassembler could take the information from the relocation table.\n\nIn your case this seems to be different:\n\nYour disassembler seems also to be intelligent enough to see that ebx contains the address 096B3D47 at this point. Therefore it will know that the  instruction lea eax, XYZ[ebx] will result in a value of 096B3D47+XYZ in the eax register.\n\nTherefore it will disassemble the instruction as lea eax, ((XYZ+096B3D47)-096B3D47)[ebx] and tries to find out what symbol the address XYZ+096B3D47 is.\n\nMany disassemblers I know however only guess here; they assume that the address belongs to the last symbol before that address. And in your case the symbol stru_8199A2C.st_shndx seems to be that symbol.\n\nObviously your disassembler does not only evaluate symbols but also debugging information such as \"Dwarf\" debugging data (which contains information used by debuggers).\n\n",
      "votes": "2",
      "user": "Martin Rosenau",
      "time": "Feb 18, 2018 at 13:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "oxident",
          "text": "Quite easy to understand. Thanks. But then, I don't have the opportunity to find the location of \"some_text\" without starting a debug session, do I?",
          "time": null
        }
      ]
    }
  ]
}