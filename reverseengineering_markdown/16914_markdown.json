{
  "title": "Simple Debugger and Hardware BreakPoints in x64 Windows 10",
  "link": "https://reverseengineering.stackexchange.com/questions/16914/simple-debugger-and-hardware-breakpoints-in-x64-windows-10",
  "content": "I have coded a very simple Debugger for x64, I am using currently Win10.\n\nI am trying to set some Hardware Breakpoints to be trapped by my Debugger Loop as follows:\n\n```\ninline void SETBITS(DWORD64 *dw, int lowBit, int bits, int newValue) {\n\n     int mask = (1 << bits) - 1;\n     *dw = (*dw & ~(mask << lowBit)) | (newValue << lowBit);\n\n}\n\nBOOL SetHardwareBP(HANDLE hThread, __int64 Address, DWORD Length, int Condition)\n{\n\n    CONTEXT context = { CONTEXT_DEBUG_REGISTERS };\n    int i;\n    if (!GetThreadContext(hThread, &context)) return -1;\n\n    // find available hardware register\n\n    for (i = 0; i < 4; i++)\n    {\n    if ((context.Dr7 & (1 << (i * 2))) == 0)\n    {\n        *(&context.Dr0 + i) = Address;\n\n        SETBITS(&context.Dr7, 16 + i * 4, 2, Condition);\n        SETBITS(&context.Dr7, 18 + i * 4, 2, Length);\n        SETBITS(&context.Dr7, i * 2, 1, 1);\n\n        if (!SetThreadContext(hThread, &context))\n            return -1;\n\n        return i;\n    }\n  }\n\n   return -1;\n}\n\nint SetDebugPrivileges(void) {\n\n      TOKEN_PRIVILEGES priv = { 0 };\n      HANDLE hToken = NULL;\n\n      if (OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {\n        priv.PrivilegeCount = 1;\n        priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n        if (LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &priv.Privileges[0].Luid)) {\n        if (AdjustTokenPrivileges(hToken, FALSE, &priv, 0, NULL, NULL) == 0) {\n            printf(\"AdjustTokenPrivilege Error! [%u]  \n\", GetLastError());\n        }\n    }\n\n       CloseHandle(hToken);\n  }\n       return GetLastError();\n}\n\n\nvoid ThreadsLoop(DWORD mPID) {\n\n   HANDLE         hProcessSnap = NULL;\n\n   SetDebugPrivileges();\n   hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\n   if (hProcessSnap == INVALID_HANDLE_VALUE) return;\n\n    else\n    {\n    THREADENTRY32 the;\n    the.dwSize = sizeof(THREADENTRY32);\n\n    BOOL bret = Thread32First(hProcessSnap, &the);\n    while (bret)\n    {\n\n\n        if (the.th32OwnerProcessID == mPID)\n        {\n\n            HANDLE hthread = OpenThread(THREAD_ALL_ACCESS, false, the.th32ThreadID);\n            SuspendThread(hthread);\n\n                           //call with length and condition set to 0 for a Code Execution type\n            int hr = SetHardwareBP(hthread, addr, 0, 0);\n            ResumeThread(hthread);\n\n            CloseHandle(hthread);\n        }\n        bret = Thread32Next(hProcessSnap, &the);\n    }\n    CloseHandle(hProcessSnap);\n}\n}\n\n```\nI am calling\nThreadsLoop(pi.dwProcessId); where pi is the the PROCESS_INFORMATION structure returned from my initial call:\n\n```\nCreateProcess(pname, NULL, NULL, NULL, false, DEBUG_ONLY_THIS_PROCESS, NULL,NULL, &si, &pi);\n\n```\nNone of the Hardware Breakpoints is Hit. I did several attempts changing the DR0-DR7 (and condition and length variables above) setup without luck. All calls to SetThreadContext returned successfully.\n\nI did the same test with a Software Breakpoint via the following code and works perfect:\n\n```\nBYTE p[] = { 0xcc }; \nSIZE_T d = 0;\nWriteProcessMemory(pi.hProcess, (void*)addr, p, sizeof(p), &d);\n\n```\nWhat could be wrong in this code/approach?\n\nThanks\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "debuggers",
    "breakpoint"
  ],
  "user": "fred26",
  "time": "Dec 5, 2017 at 21:03",
  "comments": [
    {
      "user": "EWD-0-",
      "text": "Has \"SETBITS\" function implemented in a way that changes the DR7 value and then you set it by calling SetThreadContext?...",
      "time": null
    },
    {
      "user": "EWD-0-",
      "text": "To make it more clear you send some inputs to the functions, and receiving NO output and just setting the context which has the same DR7 :) I think you now understand what's wrong...",
      "time": null
    },
    {
      "user": "fred26",
      "text": "Thanks for pointing out this. I fixed the code. Still the breakpoints not working.",
      "time": null
    },
    {
      "user": "EWD-0-",
      "text": "Now again you have a problem... Look again. You're changing the pointer itself not the value which the pointer points to.",
      "time": null
    },
    {
      "user": "fred26",
      "text": "Thanks, I fixed it. It was a typo. The code, is still not BP.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are some issues you have to fix\n\n",
      "votes": "1",
      "user": "EWD-0-",
      "time": "Dec 12, 2017 at 14:56",
      "is_accepted": true,
      "comments": [
        {
          "user": "RbMm",
          "text": "your 2. is wrong. not need call DebugActiveProcess if we create process with DEBUG_ONLY_THIS_PROCESS or DEBUG_PROCESS flags. also need handle not only  EXCEPTION_SINGLE_STEP but also STATUS_WX86_SINGLE_STEP - this will be if we debug wow64 process",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "Last one first, during the questions I've asked it was mentioned that the target is x64. If not, there are other APIs which has to be added to make it compatible not only STATUS_WX86_SINGLE_STEP. Other thing which I didn't mention here but in the chat is that though the values might be the same it's better to use EXCEPTION_BREAKPOINT instead of STATUS...",
          "time": null
        },
        {
          "user": "RbMm",
          "text": "the STATUS_WX86_SINGLE_STEP (and STATUS_WX86_BREAKPOINT on breakpoint) come when exception was in wow64 code. and debugger is 64bit process. if we debug x64 process we of course never get this exception codes. however always better handle it too, for not restrict self for x64 apps only. there are other APIs which has to be added to make it compatible dont know what you mean, but x64 debugger perfect can debug both 32 and 64 processes with single code base without any special api calls",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "As Igor also mentioned in chat, consider Wow64Get/SetThreadContext as an example. I think the best way is to add your points as another answer... Better than in the comments.",
          "time": null
        },
        {
          "user": "EWD-0-",
          "text": "And about starting with DEBUG_ONLY_THIS_PROCESS/DEBUG_PROCESS you're right, this is ALSO another way to receive dbg events. The \"2\" is not wrong it's one of the ways and the one you've mentioned another way.",
          "time": null
        }
      ]
    }
  ]
}