{
  "title": "Capstone: What's the purpose of the 'address' argument in cs_disasm()?",
  "link": "https://reverseengineering.stackexchange.com/questions/17946/capstone-whats-the-purpose-of-the-address-argument-in-cs-disasm",
  "content": "I'm trying to play around with the Capstone Disassembler in C.\n\nIn the documentation they show the following use of the cs_disasm() function:\nfrom here\n\n```\ncount = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &insn)\n\n```\nThe thing that bugs me is that 0x1000. In the documentation (source code actually) it says:\n\nI can't really understand what does that really mean, because from what I understand the insn array is being dynamically allocated and filled, and that's where the instructions will reside (or are they?)\n\nWhy is it a fixed value like 0x1000? is that actually address in the memory of the program? (isn't that an illegal address space for a C program to use?)\n\nThanks in advance\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "c",
    "disassemblers",
    "capstone"
  ],
  "user": "shaqed",
  "time": "Apr 10, 2018 at 10:34",
  "comments": [],
  "answers_data": [
    {
      "content": "that address is the virtual address you want to disassemble \n\nfor example you have a relative jump  \n\nthe opcodes will be say 0x74 {imm } where {imm} is relative to the current address \neither in positive direction or in negative direction \n\nso if the  current address is 0x1000  a relative jump with {5} imm  from 0x1000 in positive direction  should land you in in 0x1005  \n\nif the address was 0x2000 it should land you in 0x2005 \n\nthat is the disassembly on the current line should state \n\njmp 0x1005 or jmp 0x2005 etc etc  \n\nif you do not give the address the disassembly will just say jmp 5 \n\nhere is a piece of similar python code \n\n```\nPython 2.7 (32-bit) interactive window [PTVS 15.6.18072.2-15.0]\n\n>>> from capstone import *\n>>> CODE = b\"\\x74\\xd9\"\n>>> md = Cs(CS_ARCH_X86,CS_MODE_32)\n>>> for i in md.disasm(CODE , 0x1000):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x1000: je  0xfdb  <<<< (0x1000 - 0x25)\n\n>>> for i in md.disasm(CODE , 0x25):\n...     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n... \n0x25:   je  0    <<<< (0x25 - 0x25) \n\n```\n",
      "votes": "4",
      "user": "blabb",
      "time": "Apr 10, 2018 at 11:48",
      "is_accepted": true,
      "comments": []
    }
  ]
}