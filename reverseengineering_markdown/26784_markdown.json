{
  "title": "Reverse engineering mode X VGA function(s)",
  "link": "https://reverseengineering.stackexchange.com/questions/26784/reverse-engineering-mode-x-vga-functions",
  "content": "I'm trying to reverse engineer an old DOS game. At the moment I'm stuck at a function that implements some functionality of VGA running in mode X. My issue is that any of the available sample codes on how to use mode X are often very similar to the one of interest, but never identical. That's why I'm having trouble putting all the pieces together and understanding the context of the function.\nReading about all the different registers/ports gave me a basic understanding, but still I can not figure out the actual intention of the function as a whole. Maybe someone with more experience on that topic could help me figure it out, even if it's just some hints on where to get the right pieces of information.\n\nThanks a lot in advance! Here is the function in question:\n\n```\nvoid __cdecl mode12_init_maybe(int width, int height)\n{\n  unsigned __int8 v2; // al\n  char *v3; // esi\n  unsigned __int16 v4; // ax\n  signed int v5; // ecx\n  unsigned __int8 v6; // al\n  unsigned __int8 inbyteData; // al\n  unsigned __int8 v8; // al\n\n  if ( width == 320 )\n  {\n    if ( height == 200 )                      \n    {\n      __outbyte(0x3C4u, 4u);                    // set memory mode\n      inbyteData = __inbyte(0x3C5u);\n      __outbyte(0x3C5u, inbyteData & 0xF7);\n      __outword(0x3C4u, 0xF02u);                // set map mask to all 4 planes\n      memset((void *)0xA0000, 0, 0xFFFCu);\n      __outbyte(0x3D4u, 0x11u);                 // Vertical Retrace End\n      v8 = __inbyte(0x3D5u);\n      __outbyte(0x3D5u, v8 & 0x7F);\n      __outword(0x3D4u, 0xC317u);               // turn on byte mode\n      __outword(0x3D4u, 0x14u);                 // Underline Location; turn off long mode\n    }\n  }\n  else if ( width == 360 && height == 240 )\n  {\n    __outbyte(0x3D4u, 0x11u);\n    v2 = __inbyte(0x3D5u);\n    __outbyte(0x3D5u, v2 & 0x7F);\n    __outbyte(0x3C4u, 4u);\n    __outbyte(0x3C5u, 6u);\n    _disable();\n    __outbyte(0x3C4u, 0);\n    __outbyte(0x3C5u, 1u);\n    __outbyte(0x3C2u, 0xE7u);\n    __outbyte(0x3C4u, 0);\n    __outbyte(0x3C5u, 3u);\n    _enable();\n    __outword(0x3C4u, 0xF02u);\n    memset((void *)0xA0000, 0, 65532u);\n    v3 = &byte_318EF;\n    LOBYTE(v4) = 0;\n    v5 = 24;\n    do\n    {\n      if ( *v3 != -1 )\n      {\n        HIBYTE(v4) = *v3;\n        __outword(0x3D4u, v4);\n      }\n      ++v3;\n      LOBYTE(v4) = v4 + 1;\n      --v5;\n    }\n    while ( v5 );\n    __outbyte(0x3D4u, 0x11u);\n    v6 = __inbyte(0x3D5u);\n    __outbyte(0x3D5u, v6 | 0x80);\n  }\n}\n\n```\nThe content of byte_318EF is as follows:\n\n```\ncseg02:000318EF     byte_318EF      db 6Bh, 59h, 5Ah, 8Eh, 5Eh, 8Ah, 0Dh, 3Eh, 0FFh, 0C0h\ncseg02:000318EF                     db 6 dup(0FFh), 0EAh, 0ACh, 0DFh, 2Dh, 0, 0E7h, 6, 0E3h\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "78",
  "tags": [
    "decompilation",
    "c",
    "functions",
    "dos"
  ],
  "user": "Mentulatus",
  "time": "Jan 15, 2021 at 18:46",
  "comments": [],
  "answers_data": [
    {
      "content": "It seems itâ€™s simply performing initialization of the VGA registers and clearing the screen buffer. The array at 318EF contains the values of the CRT controller indexed registers (ports 3D4/3D5).\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jan 16, 2021 at 14:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}