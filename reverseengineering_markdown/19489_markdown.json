{
  "title": ".NET assembly IDA PRO, using LDSTR IL op code, how to patch a string?",
  "link": "https://reverseengineering.stackexchange.com/questions/19489/net-assembly-ida-pro-using-ldstr-il-op-code-how-to-patch-a-string",
  "content": "I'm trying to patch a string. So right now I'm trying to replace instruction LDSTR with LDSTR \"mystring\"; however, I have been unsuccessful. After assembling the LDSTR op code, I don't quite understand what comes after: a pointer address to the string or raw string bytes?\n\n```\nldstr \"Test\";\nstloc.0\nldloc.0\nret\n\n```\nThis is what I'm trying to achieve. Thanks! \n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "hexrays",
    ".net"
  ],
  "user": "Alex Maher",
  "time": "Oct 2, 2018 at 1:06",
  "comments": [],
  "answers_data": [
    {
      "content": "The opcode contains a number that is called mdToken. User-defined strings are located in Storage Stream that is called #US. You can find those while inspecting the file sections.\n\n\n\nThere's a great series of article on .NET assembly by Simon Coop - Anatomy of a .NET Assembly that should explain more of the internals of .NET assemblies.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Sep 30, 2018 at 21:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I'd like to add a couple of comments on top of Pawel's great an concise answer.\n\nFirst of all, IDA doesn't easily enable editing executables, so you should find another, more appropriate tool, for that task. In the case of replacing constant strings any decent hex editor will do the trick.\n\nSecondly, please let me go over the different instructions, one by one:\n\nThe ldstr instruction loads the string object in the first argument to the top of the stack.\n\nThe stloc instruction pops a single item from the stack and stores it in a register, according to it's index. In this case, register index 0.\n\nSimilarly, ldloc stores a value from a register according to supplied index at the top of the stack. In this case, again, register indexed 0 is used.\n\nThis instruction returns to the current function's caller.\n\nAs a stack based instruction-set (opposed to a register-based instruction set, for which examples are x86, arm, powerpc, etc...) the stack is frequently used of passing data around in instances where a register-based instruction set will enable register use. This is not to say you cannot use registers or stack for most functionalities in one or the other, but just that the instruction set makes it more native and natural to use either the stack of the registers.\n\nThe last paragraph is important for us to understand the nature of the provided function, which simply returns the provided string. As a stack-based instruction set, CIL's calling convention dictates that variables are returned on the stack (and not a designated register). Interestingly, this therefore implies the stloc.0 and ldloc.0 can simply be optimized out.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Sep 30, 2018 at 23:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}