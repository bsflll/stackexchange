{
  "title": "How to reuse symbol/data defined in .bss section?",
  "link": "https://reverseengineering.stackexchange.com/questions/4306/how-to-reuse-symbol-data-defined-in-bss-section",
  "content": "So basically I am trying to re-use some assembly code/data dumped by objdump from 32 bit ELF binary on Linux.\n\nSo basically, in the disassembled binary, I found some symbol referring to .bss section like this:\n\n```\n 80486b7:   mov    0x804b264,%eax   <- 0x804b264 is an addr in .bss\n 80486bc:   movl   $0x0,0x4(%esp)\n 80486c3:\n 80486c4:   mov    %eax,(%esp)\n 80486c7:   call   804876c <sum>\n\n```\nBy digging into the original source code, I find out that 0x804b264 is used for stdin in .bss section.\n\nIMHO, there are basically two situations on .bss section's data:\n\nSo when trying to re-use .bss section's data, I have tried this way:\n\n```\n.section .bss\nS_0x804B260 : .byte 0x00\n           .byte 0x00\n           .byte 0x00\n          .byte 0x00\nS_0x804B264 : .byte 0x00          <- I lift addr into symbol!\n          .byte 0x00\n         .byte 0x00\n         .byte 0x00\n         .byte 0x00\n\n```\nand in the .text section, I will also lift corresponding addr into symbol.\n\nsame situation works fine for .rodata and .data section\n\nBut the problem is that, there are some global variables (such as stdin stdout), locating in .bss section, while are not initialized by user defined code, which means that in my re-used asm code, this symbol variable will always be zero!\n\nI tried to manually substitute symbols corresponding to stdin, and it seems that it works fine.\n\nBut the problem is that:\n\nAm I clear? Could anyone give me some help?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "824",
  "tags": [
    "disassembly",
    "assembly",
    "elf",
    "reassembly"
  ],
  "user": "lllllllllllll",
  "time": "May 10, 2014 at 16:24",
  "comments": [],
  "answers_data": [
    {
      "content": "I'm afraid you're not too clear when you talk about \"reusing\" some part of a program. What exactly do you want to do? Load the original program into a debugger, then call just one single function of it? Extract a ranged of addresses and turn that into a new program? Or extract one function from the original program, possibly together with everything the function depends on, then embed that function into a larger program?\n\nYou're wrong in one thing: the .bss section is NOT initialized at all at program start (at least not to anything but a load of \\0 bytes). The initialization of stuff like stdout is done in runtime before main() starts. Stuff that gets initialized with constant data goes into the .data segment.\n\n(On a side note: One of the reasons why the stdout FILE structure isn't put into .data and initialized as constants is most runtimes on unix-like systems will check if their file descriptor goes to a terminal or something else, and turn on/off buffering depending on that check).\n\nWhen you extract a part of the code, you'll have to check each reference to .data AND .bss (and to .text - the code - as well if the extracted part depends on any libraries etc.). For each of those references, you'll have to decide what to do with them - share them with the new program, keep them for the functions you extracted, whatever.\n\nIf you're lucky, and have an unstripped executable, you can use nm to find out which symbol is where; if you're not that lucky, you'll have to disassemble/decompile everything, understand it, rewrite it into new source, and compile it together with whatever you want to embed it in.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "May 10, 2014 at 18:18",
      "is_accepted": true,
      "comments": []
    }
  ]
}