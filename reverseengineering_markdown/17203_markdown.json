{
  "title": "How can I define a struct in x64/x32Dbg?",
  "link": "https://reverseengineering.stackexchange.com/questions/17203/how-can-i-define-a-struct-in-x64-x32dbg",
  "content": "See the image how there is ecx, ecx+4, ecx+8, ecx+24, etc... What if this is a struct and I want to define it... Can I do this in x64Dbg and if so, how? I do see a Struct tab in the hex dump area, but if I right-click, there is no option to define a struct.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "4k",
  "tags": [
    "struct",
    "x64dbg"
  ],
  "user": "the_endian",
  "time": "Jan 15, 2018 at 19:50",
  "comments": [
    {
      "user": "Abr001am",
      "text": "What do you mean to define a struct ? you mean a C/C++ struct ? I see it stowed in Data Segment.",
      "time": null
    },
    {
      "user": "the_endian",
      "text": "Yes a c style struct. Are you familiar with IDA Pro how you can press a key and define a c style struct and then apply it to offsets like that so that they are properly labeled",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Right now it is not possible to label instructions in the disassembly as structure members. It is however possible to define structs and visit them in memory (similar to 010 editor). The main sources of information about this are here and here.\n\nAs an example if you have the following code:\n\n```\n#pragma pack(1)\nstruct MyStruct\n{\n    int a;\n    bool b;\n    const char* c;\n};\n\nvoid test(MyStruct* p)\n{\n    MyStruct* s = p;\n    s->a = 0x1234;\n    s->b = true;\n    s->c = \"Hello world\";\n}\n\nint main()\n{\n    MyStruct s;\n    test(&s);\n    return s.a;\n}\n\n```\nYou use the Parse header option in the Struct tab to parse the following header:\n\n```\nstruct MyStruct\n{\n    int a;\n    bool b;\n    const char* c;\n};\n\n```\nThis will load the structure (use the command EnumTypes to see a list of types). Now when you're paused at the disassembly of the test function you can use the Visit type option from the Struct tab to show the contents of the memory at ecx in a structural way:\n\n\n\nThe addresses of the structure members will also be added as temporary labels so you can see what an instruction refers to in the info box:\n\n\n\nThis feature has not been further developed because there was a lack of interest from the community.\n\n",
      "votes": "3",
      "user": "mrexodia",
      "time": "Jan 16, 2018 at 19:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sirmabus",
          "text": "Excellent work again. Thanks for making this the go to Windows debugger.",
          "time": null
        }
      ]
    }
  ]
}