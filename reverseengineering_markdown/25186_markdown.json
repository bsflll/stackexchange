{
  "title": "Two copies to store values",
  "link": "https://reverseengineering.stackexchange.com/questions/25186/two-copies-to-store-values",
  "content": "I have this a piece of code, disassembled DX:\n\n```\n.text:004386D3                 push    ecx\n.text:004386D4                 fld1\n.text:004386D6                 fstp    [esp+26Ch+var_26C] ;load 1.0 value texture coords\n.text:004386D9                 push    ecx\n.text:004386DA                 fld1\n.text:004386DC                 fstp    [esp+270h+var_270] ;load 1.0 value texture coords\n.text:004386DF                 push    ecx\n.text:004386E0                 fld     ds:__real@c1700000\n.text:004386E6                 fstp    [esp+274h+var_274] ;load -15.0 value x vertex\n.text:004386E9                 push    ecx\n.text:004386EA                 fld     ds:__real@c1700000\n.text:004386F0                 fstp    [esp+278h+var_278] ;load -15.0 value y vertex\n.text:004386F3                 push    ecx\n.text:004386F4                 fld     ds:__real@c1700000\n.text:004386FA                 fstp    [esp+27Ch+var_27C] ;load -15.0 value z vertex\n.text:004386FD                 lea     ecx, [ebp+var_22C] ;this pointer\n.text:00438703                 call    j_D3DVERTEX__D3DVERTEX ;fills structure with values\n.text:00438708                 mov     ecx, [ebp+var_8] ;var_8 pointer returned by Lock() buffer func\n.text:0043870B                 mov     edx, [eax]\n.text:0043870D                 mov     [ecx], edx\n.text:0043870F                 mov     edx, [eax+4]\n.text:00438712                 mov     [ecx+4], edx\n.text:00438715                 mov     edx, [eax+8]\n.text:00438718                 mov     [ecx+8], edx\n.text:0043871B                 mov     edx, [eax+0Ch]\n.text:0043871E                 mov     [ecx+0Ch], edx\n.text:00438721                 mov     eax, [eax+10h]\n.text:00438724                 mov     [ecx+10h], eax\n\n```\nThis code fills one vertex structure with values:\n\n```\n-15.000000,-15.000000,-15.000000, 1.0,1.0\n\n```\nIt seems values is stored into two copies. First copy of this values stored relatively ebp+var_22C and into ecx passed this pointer:\n\n```\n.text:004386FD                 lea     ecx, [ebp+var_22C] ; ecx has pointer this to store values\n.text:00438703                 call    j_D3DVERTEX__D3DVERTEX ;fills structure with values\n\n```\nAnd second copy this values stored relatively ebp+var_8 after calling j_D3DVERTEX__D3DVERTEX:\n\n```\n.text:00438708                 mov     ecx, [ebp+var_8] ;var_8 pointer returned by Lock() buffer func\n\n```\nI.e. completely it's looks like:\n\n```\n.text:004386FD                 lea     ecx, [ebp+var_22C] ; ecx has pointer this to store values\n.text:00438703                 call    j_D3DVERTEX__D3DVERTEX ;store values into structure\n.text:00438708                 mov     ecx, [ebp+var_8] ;var_8 pointer returned by Lock() buffer func\n\n```\nIf I right understood- why need two copy of this vertex values? Maybe it is important the vertex buffer created with D3DPOOL_MANAGED and D3DUSAGE_WRITEONLY parameters.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "49",
  "tags": [
    "ida",
    "disassemblers"
  ],
  "user": "black4joss",
  "time": "Jun 1, 2020 at 15:26",
  "comments": [],
  "answers_data": [
    {
      "content": "Inside D3DVERTEX__D3DVERTEX [ebp+var_334] i.e. ecx passed to variable [ebp+var_4] and in end of function [ebp+var_4] passed to eax as return:\n\n```\n.text:00439440 D3DVERTEX__D3DVERTEX proc near          ; CODE XREF: j_D3DVERTEX__D3DVERTEXj\n.text:00439440\n.text:00439440 var_5C          = dword ptr -5Ch\n.text:00439440 var_58          = dword ptr -58h\n.text:00439440 var_54          = dword ptr -54h\n.text:00439440 var_4           = dword ptr -4\n.text:00439440 arg_0           = dword ptr  8\n.text:00439440 arg_4           = dword ptr  0Ch\n.text:00439440 arg_8           = dword ptr  10h\n.text:00439440 arg_C           = dword ptr  14h\n.text:00439440 arg_10          = dword ptr  18h\n.text:00439440\n.text:00439440                 push    ebp\n.text:00439441                 mov     ebp, esp\n.text:00439443                 sub     esp, 44h\n.text:00439446                 push    ebx\n.text:00439447                 push    esi\n.text:00439448                 push    edi\n.text:00439449                 mov     [ebp+var_4], ecx\n\n...........\n.text:0043947B                 mov     eax, [ebp+var_4]\n.text:0043947E                 pop     edi\n.text:0043947F                 pop     esi\n.text:00439480                 pop     ebx\n.text:00439481                 mov     esp, ebp\n.text:00439483                 pop     ebp\n.text:00439484                 retn    14h\n.text:00439484 D3DVERTEX__D3DVERTEX endp\n\n```\nand after D3DVERTEX__D3DVERTEX this eax used as base bointer to fill memory of vertex buffer with values:\n\n```\n.text:00438703                 call    j_D3DVERTEX__D3DVERTEX\n.text:00438708                 mov     ecx, [ebp+var_8] ;pointer to vertex buffer\n.text:0043870B                 mov     edx, [eax] ;eax returned by j_D3DVERTEX__D3DVERTEX\n\n\n```\nMaybe j_D3DVERTEX__D3DVERTEX used to arrange and prepare vertex values to fill vertex memory after calling j_D3DVERTEX__D3DVERTEX?\n\n",
      "votes": "-1",
      "user": "black4joss",
      "time": "Jun 2, 2020 at 7:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "This does not seem to be an answer; may be best to add this info to the question.",
          "time": null
        }
      ]
    }
  ]
}