{
  "title": "Anti-debug techniques on Unix platforms?",
  "link": "https://reverseengineering.stackexchange.com/questions/43/anti-debug-techniques-on-unix-platforms",
  "content": "I am trying to scan all possible techniques to disrupt the usage of a debugger on a Unix platform (ie POSIX and a bit more).\n\nI am thinking about techniques such as the PTRACE test at the beginning of a program (or at various points of its execution), the insertion of fake breakpoints (eg int3/0xcc x86 opcode) or time checks. But, also global strategies defined on the program to slow down the analysis of the program.\n\nFor now, all the techniques I found on Internet were easily worked around as soon as the anti-debug technique has been understood. So, I wonder if there are stronger ones.\n\n",
  "votes": "22",
  "answers": 3,
  "views": "6k",
  "tags": [
    "assembly",
    "obfuscation",
    "anti-debugging"
  ],
  "user": "perror",
  "time": "Jun 5, 2014 at 13:04",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "\"all the techniques I found on Internet were easily worked around as soon as the anti-debug technique has been understood\" <- this is the case with most of them but not a reason to discount them just because of that.",
      "time": null
    },
    {
      "user": "jvoisin",
      "text": "You may want to check [this][1] topic.        [1]: reverseengineering.stackexchange.com/questions/1930/…",
      "time": null
    },
    {
      "user": "12431234123412341234123",
      "text": "You can't. It is impossible for any software to detect if it runs on a real machine or a perfect emulation which can be analyzed from the outside. Don't try to do something mathematically impossible.",
      "time": null
    },
    {
      "user": "Thorbjørn Ravn Andersen",
      "text": "@12431234123412341234123 Modern CPU's are perfect emulations of the abstract instruction set.  That said, perfection is very hard to achieve.",
      "time": null
    },
    {
      "user": "12431234123412341234123",
      "text": "@ThorbjørnRavnAndersen The possible instructions a CPU can make is limited, so it isn't THAT hard. However, doing it fast, efficient and at the same time without exploitable side effect is very hard.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here's some I've seen or heard about:\n\n",
      "votes": "22",
      "user": "4 revs, 4 users 74%Igor Skochinsky",
      "time": "Jan 2, 2014 at 22:06",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "Ok, this seems a reasonable list of techniques but nothing surprising til now. And, you are missing the breakpoints tricks (insertion of fake breakpoints to confuse the debugger when PTRACEd and checking the hash of the next code block to see if new software breakpoints have been inserted or not). But, would you know a paper describing all these techniques for Unix (I know some papers for MS-Windows but none for Unix systems).",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Emmanuel: feel free to edit it and add more, that's why I made it a wiki. I'm not aware of any papers, but possibly you can find some more tricks in something like Phrack.",
          "time": null
        },
        {
          "user": "nneonneo",
          "text": "My IDA died while trying to load an ARM binary that had its section headers stripped. So #1 may still be a useful trick (though I ultimately wrote a script to reconstitute the headers).",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@nneonneo: if that happens with the current version, please send a bug report. thanks.",
          "time": null
        },
        {
          "user": "Joshua",
          "text": "The real fun is fork and use ptrace() on yourself as a form of IPC.",
          "time": null
        }
      ]
    },
    {
      "content": "My understanding of anti-debugging technology is that it is a game of cat and mouse (or cat and also cat). A technique works until it is understood by the opposing side and then it doesn't work any more. I think that ultimately the advantage is on the side of the debugger. Consider dynamic binary instrumentation or virtual machine systems. You can detect the presence of DBI or emulation by looking for cracks or faults in the emulation of the platform, but those are just errors in the emulation/translation software. If you had a \"perfect\" emulation system, then a debugged application could not know that it was being traced? \n\nSo I think the best you can do is little things that are easily worked around. The Shiva system still I think represents \"okay\" protection from debugging on Unix platforms, since it decrypts small portions of itself to run on demand and then re-encryptes them, as I recall. \n\n",
      "votes": "12",
      "user": "Andrew",
      "time": "Mar 20, 2013 at 14:31",
      "is_accepted": false,
      "comments": [
        {
          "user": "perror",
          "text": "I would tag the Shiva system as an advanced packer but not really an anti-debug technique (even if its main effect is to render the usage of a debugger extremely tedious because your window in memory where you can effectively set breakpoints is extremely small compared to a \"normal\" program).",
          "time": null
        }
      ]
    },
    {
      "content": "They aren't any, do not try to do the mathematically impossible.\n\nYes, because there is no way of detecting a debugger that can not be faked.\nSoftware can not detect if it runs in a perfect emulation or in the real world. And a emulator can be stopped, the software can be analyzed, variables can be changed, basically everything can be done that can be done in a debugger.\n\nLet's say you want to detect if the parent process is a debugger. So you make a system call to get the parent PID? The debugger can intercept the system call and return any PID which does not have to be the real PID. You want to intercept every SIGTRAP so the debugger can't use it anymore? Well the debugger can just stop in this case and send the SIGTRAP also to your process. You want to measure the time when you send SIGTRAP to know if the process stops for a short time by the debugger for sending SIGTRAP so you know when there is a debugger? The debugger can replace your calls to get the time and return a fake time. Let's say you run on a Processor that has a instruction that returns the time, so no function call is needed to get the time. Now you can know that the time you are getting is real? No, the debugger can replace this instruction with a SIGTRAP instruction and return any time he wants or in case such a instruction does not exist, run the Software in a emulator that can be programmed in any way. Everything you can come up with to detect a debugger or emulator can be faked by the environment and you have 0 change to detect it.\n\nThe only way to stop debugging is by not giving the software to the customers but keep it in your hands. Make a cloud service and run the software on your server. In this case the customer can not debug your program since he does not run it and has no control over it. Except the customer can access the server or the data somehow, but that is a different story.\n\n",
      "votes": "3",
      "user": "Rohit Gupta",
      "time": "May 12, 2023 at 13:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}