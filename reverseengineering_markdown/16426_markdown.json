{
  "title": "In a native debugger, what must be done in order to resolve ntdll/other API symbols manually?",
  "link": "https://reverseengineering.stackexchange.com/questions/16426/in-a-native-debugger-what-must-be-done-in-order-to-resolve-ntdll-other-api-symb",
  "content": "I'm reversing a Windows binary using x32Dbg and I have the following instruction: call ntdll.776C695A.\nWhat steps should I take in order to find out which function this is and/or what it does? The debugger seems to provide some symbols but not all.\n\nThank you.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "373",
  "tags": [
    "debugging",
    "x64dbg"
  ],
  "user": "the_endian",
  "time": "Sep 28, 2017 at 16:33",
  "comments": [
    {
      "user": "Megabeets",
      "text": "Hey @the_endian, just a reminder -- if you find the answer below helpful, please accept it so the community will be able to focus on other unanswered questions and for users coming from search engines.",
      "time": null
    },
    {
      "user": "the_endian",
      "text": "@Megabeets Holy cow I have no idea how I didn't see this earlier. I've accepted the answer.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Simply execute downloadsym ntdll in the command field at the bottom of x32dbg.\n\nAs you can see in the documentation:\n\nThis should retrieve the Debugging Symbols from the Microsoft public symbol server and update the assembly accordingly.\n\n",
      "votes": "3",
      "user": "Megabeets",
      "time": "Sep 28, 2017 at 16:46",
      "is_accepted": true,
      "comments": []
    }
  ]
}