{
  "title": "finding rest api urls after decompiling apk",
  "link": "https://reverseengineering.stackexchange.com/questions/27057/finding-rest-api-urls-after-decompiling-apk",
  "content": "i have two apk files , when i decompile them using apktool i can take a look at decompile code , so here is what really confuse me , in the first apk if i searched the hole files for strings witch begin with \"https\" or \"http\" i can get all the api urls for that app , but the second apk doesn't work the same way it give me nothing just some google api urls witch belong to google that i dont need , so my question is , why my searching method work in the first apk but not in the second apk , maybe in the second app the urls string are encrypted ,but why the developer would do something like this seems pointless to me because even if the urls are encrypted i can capture them using Wireshark or others capturing tools (i don't want to use the capturing tools just decompiling tools if you could just help on that it would be great)\n\n",
  "votes": "2",
  "answers": 1,
  "views": "4k",
  "tags": [
    "android",
    "apk",
    "api",
    "https-protocol"
  ],
  "user": "Hothifa Farh",
  "time": "Feb 20, 2021 at 15:05",
  "comments": [],
  "answers_data": [
    {
      "content": "They might be stored encoded/encrypted and decoded/decrypted in runtime, you can validate this if you can capture any API calls in runtime (Not sure if you tried this, but maybe give it a try, in that case you may deal with SSL Certificate Pinning).\nAnother possibility is that they might be split, I faced that case couple of times where only the base address of the APIs were stored at the resources string XML files, while the rest of the URIs are declared when used only. You may validate this by looking for some common substrings found in APIs like \"/api\", \"/v\", \"/send\", \"/user\", etc...\n\n",
      "votes": "2",
      "user": "Abdullah Mohamed",
      "time": "Feb 21, 2021 at 8:00",
      "is_accepted": true,
      "comments": []
    }
  ]
}