{
  "title": "how to calculate max possible stack size utilization",
  "link": "https://reverseengineering.stackexchange.com/questions/18727/how-to-calculate-max-possible-stack-size-utilization",
  "content": "Is there any elegant way to calculate the maximum possible stack depth utilization of a program, using IDAPython?\n\ncurrently my best approach is iterating through all functions and counting stack-increasing instructions.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "391",
  "tags": [
    "ida",
    "idapython",
    "stack"
  ],
  "user": "Yoav Danieli",
  "time": "Jul 8, 2018 at 14:05",
  "comments": [
    {
      "user": "NirIzr",
      "text": "Are you looking for the max depth available to the program or the max depth actually utilized by the program? Also, what OS are you focused on?",
      "time": null
    },
    {
      "user": "Yoav Danieli",
      "text": "looking for max depth utilized by the program and it isn't OS dependent (lets say linux)",
      "time": null
    },
    {
      "user": "julian",
      "text": "@YoavDanieli maximum depth actually utilized by a program is not the same as maximum possible stack depth utilization, as @NirIzr has pointed out. Please clarify what you are asking. Resource limits such as maximum stack size available to a process are OS dependent. See getrlimit(2) for more on this.",
      "time": null
    },
    {
      "user": "Yoav Danieli",
      "text": "Yes, thanks, i think @NirIzr clarified this form me :)",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "What's worse is, they're context-dependent even on a single OS. Taking Windows, the limits vary vastly between what's allowed for a thread in user mode, in kernel mode without using user32 facilities and in kernel mode with using said facilities. The only thing that works, by my experience, is guesstimation.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IDAPython-function get_frame_size(ea) gives size of stack in bytes.\nSo you can get max stack through all available functions:\n\n```\n\"0x%04X\" % max(get_frame_size(f) for f in Functions(0, BADADDR))\n\n```\n",
      "votes": "1",
      "user": "prusanov",
      "time": "Apr 6, 2020 at 13:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "David",
          "text": "Nite that it would be worth calculating the worst possible call depth (using cross references, likely as a directed graph). Special attention should be paid to recursive functions. You should also factor in a worst case for API calls.",
          "time": null
        }
      ]
    }
  ]
}