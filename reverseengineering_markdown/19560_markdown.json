{
  "title": "Analyze raw assembly using IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/19560/analyze-raw-assembly-using-ida-pro",
  "content": "I have a raw assembly dump i.e.\n\n```\n.intel_syntax noprefix\n.bits 32\n.global main    \n\nmain:\n    push   ebp\n...\n\n```\nAnd I know it's Intel x86 and the original function was most likely written in C. Now the question is whether I could use IDA to reverse this and get the original function?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "assembly"
  ],
  "user": "S. L.",
  "time": "Oct 6, 2018 at 15:15",
  "comments": [
    {
      "user": "Jongware",
      "text": "IDA disassembles binaries. (It's what \"IDA\" stands for.) What you have here is disassembled code, as plain text. What do you hope IDA will do with it?",
      "time": null
    },
    {
      "user": "S. L.",
      "text": "Ideally spit out some nice pseudocode?",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "From a text file? No. It needs a binary.",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "If you assemble the file you can load it in ida",
      "time": null
    },
    {
      "user": "S. L.",
      "text": "@mrexodia that could work. can I just use gcc?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IDA does not accept assembly input, so you need to convert it to some binary format first. This is generally done with an assembler, such as GNU Assembler or gas (part of GNU Binutils and usually installed with gcc), or different alternative assemblers such as nasm, yasm, fasm and so on. If you need help assembling a specific file, you can ask on Stack Overflow, providing as much info as possible.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 15, 2018 at 19:40",
      "is_accepted": true,
      "comments": [
        {
          "user": "S. L.",
          "text": "This worked like a charm: I compiled the original snippet and got into a good old executable and then was able to analyze that with IDA and dump some useable pseudocode. Not exactly reverse engineer of the year over here but it works!",
          "time": null
        }
      ]
    }
  ]
}