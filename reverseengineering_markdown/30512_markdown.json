{
  "title": "Examining memory without attaching to the process by using /proc/$PID/mem?",
  "link": "https://reverseengineering.stackexchange.com/questions/30512/examining-memory-without-attaching-to-the-process-by-using-proc-pid-mem",
  "content": "I have a gap in my understanding and tooling. Now I would prefer to use Radare2, but will consider any answer. Let's use this program as an example.\n\n```\n#include <stdio.h>\n#include <unistd.h>\n\nstatic char world[] = \"world\";\n\nint main () {\n  pid_t pid = getpid();\n  printf(\"Hello %s!  \n\\tMy memory is at /proc/%d/mem  \n\", world, pid);\n  sleep(60*60); // 1hr \n  return 1;\n}\n\n```\nWhen that programs runs, I expect its layout be copied into memory. But in this case, there must be some computation in preparing the strings in printf to get get displayed in the terminal such that when that program is run before it sleeps I should be able to find this string in memory,\n\n```\nHello world!\n    My memory is at /proc/1923288/mem\n\n```\nNormally, I could find that pretty easily by attaching a debugger to a process. But this question isn't about that. Is it possible to find that string without debugging by assembling the contents in time from memory at /proc/1923288/mem, without the need to ever attach to the process, or pause execution (even if it's not atomic)?\n\nIn case my example above is not clear, imagine an IRC client that stores the chat log in memory. How can I retrieve that log, or examine the memory of that process without attaching a debugger to it?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "358",
  "tags": [
    "debugging",
    "radare2",
    "linux",
    "memory"
  ],
  "user": "Evan Carroll",
  "time": "Jun 13, 2022 at 16:07",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "what does it mean \"by assembling the contents in time\"?",
      "time": null
    },
    {
      "user": "Evan Carroll",
      "text": "@PawełŁukasik as in, I know without stopping the process you'll have a live view of the memory and not a snapshot. So YMMV.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You no longer need to ptrace() a process to read its memory, as long as you own the target process.\n\nHowever, there is no computation to prepare the strings for printf(), the arguments are just pointers to somewhere in memory. When searching you'll find world[] is stored in a different segment than Hello %s....\n\n```\n00402000-00403000 r--p 00002000 fd:03 15505885\nHello %s!\n    My memory is at /proc/%d/mem\n\n00404000-00405000 rw-p 00003000 fd:03 15505885\nworld\n\n```\nUsing readelf to map segments to sections, these look like .rodata and .dynamic on my system when compiled with gcc, but may vary given a different system or compiler.\n\nSo in summary, yes you can search the memory of your own processes, but beware that the arguments to printf() may not be in the same segments.\n\n",
      "votes": "1",
      "user": "Mega Tonnage",
      "time": "Jun 21, 2022 at 11:16",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "r2 can read/write memory to any process using /proc/pid/mem, it's actually the default way because it's much faster than using ptrace. But it does other attempts too in case that fails.\n\nYou can see the procpid io plugin listed in r2 -L vailable and you can do:\n\nr2 procpid://$YOURFAVOURITEPID\n\n",
      "votes": "1",
      "user": "pancake",
      "time": "Jul 1, 2022 at 13:41",
      "is_accepted": false,
      "comments": []
    }
  ]
}