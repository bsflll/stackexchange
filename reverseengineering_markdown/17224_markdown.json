{
  "title": "re-construction of c code: movsx with test instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/17224/re-construction-of-c-code-movsx-with-test-instruction",
  "content": "I just started learning about reconstructing C code from assembler instructions.\n\nI have the following piece of assembler code:\n\n```\nmov eax dword ptr [ebp+8]\nadd eax, dword ptr[ebp-4]\nmovsx ecx, byte ptr [eax]\ntest ecx, ecx\njne XXXXX\ncomp dword ptr [ebp-4], ffh\njle XXXX\n\n```\nI want to reconstruct the condition of these lines but I have some problems or things I am not sure about:\nI re-constructed the following:\n\nLet,ebp+8= param1 and ebp-4 = i\n\n```\nif(param1[i]!=’\\0’ || i<=0xff){\n…\n}\n\n```\nBut I am wondering about this line:\n\n```\nmovsx ecx, byte ptr [eax]\n\n```\nAs I understand movsx it moves a signed value into a register and sign-extends it with 1. Thus, ecx shouble look something like 0xFFFFFF<eax>. Because only the lower bytes (byte ptr eax) of eax are moved and ecx is 1 extended. Where am I wrong?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "678",
  "tags": [
    "x86",
    "c",
    "static-analysis"
  ],
  "user": "alive-and-well",
  "time": "Jan 17, 2018 at 14:41",
  "comments": [
    {
      "user": "malikcjm",
      "text": "Its loading one byte from memory address pointed by value stored inne eax. Ecx = (char)*eax",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "and it will become 0xFFFFFFxx only if the bit 7 of [eax] is set, otherwise it will be 0x000000xx.  The point being that the array being read has been defined as a signed char *",
      "time": null
    },
    {
      "user": "alive-and-well",
      "text": "I have one more question: Is the reconstruction to \"||\" correct?, or should it be a \"&&\"?",
      "time": null
    },
    {
      "user": "cimarron",
      "text": "There is not enough context in the disassembly you gave to say definitively (i.e. where are the jumps going to and what code is being executed for each condition). In general for a null-terminated string/array, it would be if (array[i] != 0 && i < MAXCOUNT) -- AND instead of OR",
      "time": null
    },
    {
      "user": "alive-and-well",
      "text": "@cimarron the jne jumps right after the jle. The jle jumps to the function prolog. I know that usually it would be if (array[i] != 0 && i < MAXCOUNT)  but to me it looks differently.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You may want to familiarize yourself with two's complement notation. It will only extend the sign bit (msb) into the larger register. So, the msb will be extended into all the additional bits -- sxxxxxxx -> sssssssssssssssssssssssssxxxxxxx\n\nFor example, if the byte value pointed to by eax was 1 (0b00000001), ecx would be 1 (0b00000000000000000000000000000001). Similarly, if it was the most positive number possible in a two's complement byte, 127 (0b01111111), ecx would be 127 as well (0b00000000000000000000000001111111). \n\nWhere the sign extension is needed is to maintain the value for negative numbers. If the value were -1 (0b11111111), then if you just simply zero-extended into a 32-bit value you would get 255 (0b00000000000000000000000011111111) in ecx instead of -1 (0b11111111111111111111111111111111).\n\n",
      "votes": "3",
      "user": "cimarron",
      "time": "Jan 17, 2018 at 16:50",
      "is_accepted": true,
      "comments": []
    }
  ]
}