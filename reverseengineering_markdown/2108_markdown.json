{
  "title": "Decode date and time in a sequence of binary data",
  "link": "https://reverseengineering.stackexchange.com/questions/2108/decode-date-and-time-in-a-sequence-of-binary-data",
  "content": "INTRO\n\nI'm trying to reverse engineer a binary data file containing sms messagges.\nThe file is named ems.idx4 and was created with a software named LG PhoneManager around 5 years ago as a backup archive of sms messagges for a LG mobile.\nI don't know which language was used to write LG PhoneManager, but in the binary file I read strings like \"CObTree\", \"CFolder\", \"CMessage\": maybe this clue means nothing, maybe it suggests that Cobol/.net/whatever language was used.\n\nPROBLEM\n\nI decoded the entire structure of the binary file, which is quite plain tho.\nThe only part I couldn't decode is date and time of single messagges.\nI identified the binary part where date and time are encoded and I got a few decoded examples (thanks to the content of the message).\nBinary data in hex:\n\n```\n[0x10] D0 74 C4 FE 3F 42 E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2007/12/25 some time after 23:58 GMT+1\n[0x10] 2B 25 CA 19 2F 43 E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2008/01/02 some time after 10:48 GMT+1\n[0x10] AA C0 2C 6E 35 43 E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2008/01/02 some time after 16:03 GMT+1\n[0x10] EE 04 71 F2 B6 43 E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2008/01/06 some time after 14:31 GMT+1\n[0x10] 60 2C F9 45 4E 4F E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2008/04/08 some time after 10:32 GMT+1\n[0x10] 5D 84 01 14 74 64 E3 40 F1 64 [0x7] 2 [0x13] 1 [0x6] 6C [0x2] is 2008/11/11 some time after 14:53 GMT+1\n\n```\nwhere [0xN] means a sequence of N zeros.\n\nAny idea?\n\nUPDATE\n\nUsing this tool: http://www.digital-detective.co.uk/freetools/decode.asp\nI realized it is Windows 64 bit OLE date / time format.\nAccording to that tool:\n\n```\nD0 74 C4 FE 3F 42 E3 40 means exactly 26/12/2007 00:59\n\n```\nAny idea what the math behind this Windows 64 bit OLE date / time format?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "5k",
  "tags": [
    "file-format"
  ],
  "user": "nimiq",
  "time": "May 26, 2013 at 16:55",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "FYI, the \"C\" prefix is usually used in MFC programs.",
      "time": null
    },
    {
      "user": "Osmium USA",
      "text": "I'm trying to do this exact same thing with Samsung PCStudio 3. Did you get anywhere with the format of the file because it looks to be quite similar.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Apparently, OLE datetime is based on double values, where whole part is number of days since epoch, and fraction part is fraction of the day. Found some info in Time Format Conversion Made Easy in the , aptly named, section The Particular Nastiness of OLE Dates .\n\nI didn't know this, thanks for a bit of lulz :)\n\n",
      "votes": "5",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "nimiq",
          "text": "Yeah, thanks! I think I found my way, will post the solution once done. Btw, OLE dates are such a mess!",
          "time": null
        }
      ]
    },
    {
      "content": "Ok, I found my way!\nThe first 8 bytes after [0x10] are a OLE date in little endian hex.\nI converted them to a regular datetime in python with:\n\n```\nimport datetime\nimport math\nfrom struct import unpack\n\n\ndef ole_date_bin_to_datetime(ole_date_bin):\n    \"\"\"\n        Converts a OLE date from a binary 8 bytes little endian hex form to a datetime\n    \"\"\"\n    #Conversion to OLE date float, where:\n    # - integer part: days from epoch (1899/12/30 00:00) \n    # - decimal part: percentage of the day, where 0,5 is midday\n    date_float = unpack('<d', ole_date_bin)[0]\n    date_decimal, date_integer = math.modf(date_float)\n    date_decimal = abs(date_decimal) \n    date_integer = int(date_integer)\n\n    #Calculate the result\n    res = datetime.datetime(1899, 12, 30) + datetime.timedelta(days=date_integer) #adding days to epoch\n    res = res + datetime.timedelta(seconds = 86400*date_decimal) #adding percentage of the day\n    return res\n\n\nif __name__ == \"__main__\":\n    print ole_date_bin_to_datetime('\\xd0\\x74\\xc4\\xfe\\x3f\\x42\\xe3\\x40')\n\n```\n",
      "votes": "3",
      "user": "nimiq",
      "time": "May 26, 2013 at 21:28",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xea",
          "text": "are you sure about adding the percentage? it should be ok for positive values, but not sure about negative (given that remark negative values i mentioned in my answer). Tho in your case you probably won't have to deal with SMS messages older than 1899 :D",
          "time": null
        },
        {
          "user": "nimiq",
          "text": "You are absolutely right. Just edited adding: date_decimal = abs(date_decimal)",
          "time": null
        }
      ]
    }
  ]
}