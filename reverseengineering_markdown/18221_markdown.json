{
  "title": "Question about gdb and memory addresses",
  "link": "https://reverseengineering.stackexchange.com/questions/18221/question-about-gdb-and-memory-addresses",
  "content": "i am trying to use gdb to analyse a c program but i am a little confused.\n\nin the above picture you can see  i am trying to analyse the stack . On the left we have memory addresses.Since i am using a 64 bit machine ,shouldn't ever memory address have 64 bits?but in the picture every memory location has 32 bits . Also the stack starts at 0x28fed0 and the second address is 0x28fee0 ,where are the address between these.I mean where is 0x28fed1?\nI studied architecture many years ago and i seem to be missing something basic.\nCan any one help me out?\n\nthanks\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "gdb"
  ],
  "user": "shujaat",
  "time": "May 9, 2018 at 16:45",
  "comments": [],
  "answers_data": [
    {
      "content": "The stack is not intrinsically 64-bit, it's just a memory area which can contains anything.\n\nYou specifically asked gdb to dump the memory in 32-bit quantities:\n\nx/32xw \n\n32 is the count (you can see that you've got 8 lines of 4 columns), x is output format (hexadecimal), and w is the item size (\"word\" - a 32-bit integer).\n\nIf you want to view memory as an array of 64-bit items, replace w by g (\"giant word\" or a 64-bit integer). To see individual bytes, use b.\n\nAs for addressing, each 32-bit item occupies four 8-bit bytes, so a row of four of them adds up to 4*4=16, or 0x10 bytes, that's why the next line starts at 0x28fee0. The byte at address 0x28fed1 is present inside the 32-bit word at 0x28fed0. Try dumping memory in different formats to get the feel for the data layout. Read up on little endian.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "May 9, 2018 at 18:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "shujaat",
          "text": "Amazing answer ,i know about Endianness but got a little confused.just one more thing you said \"The stack is not intrinsically 64-bit, it's just a memory area which can contains anything.\"so how much bits or bytes can be stored on a single memory location i.e single memory address",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@shujaat on x86/x64 - one byte (8 bits) per address location",
          "time": null
        }
      ]
    }
  ]
}