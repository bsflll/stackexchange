{
  "title": "How to identify digital signature and sign executables with it?",
  "link": "https://reverseengineering.stackexchange.com/questions/32418/how-to-identify-digital-signature-and-sign-executables-with-it",
  "content": "There is an embedded platform which requires signing binary executable file for them to be loadable onto CPU from flash. Signed executable consists from signature (first 40 bytes) and unsigned executable concatenated together. Unsigned executable can be created from an ELF file.\n\nSignature format is not fully known, but appears to be the following:\nFirst 4 bytes seems to almost always be 0xAA 0xAA 0x01 0x00 (with the only exception of 0xAA 0xAA 0x04 0xFF in a separate signature file, which is the only such file provided)\nNext 16 bytes are different from file to file and are probably the signature itself\nNext 16 bytes are always zeros\nNext 4 bytes are the size of unsigned binary in little-endian.\n\nHere's an example of such file:\n\n```\n00000000: aaaa 0100 389e d563 f9d2 853b fb63 a2d3  ....8..c...;.c..\n00000010: 9be7 1482 0000 0000 0000 0000 0000 0000  ................\n00000020: 0000 0000 dc02 0000 0050 3914 0000 0001  .........P9.....\n00000030: 0000 000a 0001 40df 0000 0147 0c00 002f  .../\n00000040: 0001 0000 0004 0000 0003 0000 312e 705f  ............1.p_\n00000050: 0000 0000 0000 0000 0000 0000 0000 0052  ...............R\n00000060: 0000 0000 0000 0064 0000 0000 0000 0000  .......d........\n00000070: 0000 0000 0000 40df 0001 0000 0000 0146  \n00000080: 0000 0000 8420 0000 4000 0060 0000 0000  ..... ..@..`....\n00000090: 0016 0060 4000 0004 0000 0060 0016 0900  ...`@......`....\n000000a0: 00a4 1ef6 0913 fdff f004 e727 0016 f301  ...........'....\n000000b0: 880f de41 fdff f033 ec2b 0912 88f1 fa1f  ...A...3.+......\n000000c0: c207 88b1 d842 f21f c208 f155 f002 4000  .....B.....U..@.\n000000d0: 003c 0843 fdff f008 e525 f000 f009 4371  .<.C.....%....Cq\n000000e0: fdff f033 ea3f f001 f742 4c80 085c 084b  ...3.?...BL..\\.K\n000000f0: fdff f033 ea35 8e72 f06a 8e03 d841 8eb1  ...3.5.r.j...A..\n00000100: fdff f2dd ea27 de4a 52ba de52 c6b9 de59  .....'.JR..R...Y\n00000110: f878 c8d2 de62 f781 1fff de69 1245 2104  .x...b.....i.E!.\n00000120: f003 4070 085a fdff f004 e72d 4af6 4cd8  .\n00000130: 1cf3 0910 002f fdff f004 e237 0016 f155  ...../.....7...U\n00000140: f002 4030 fdff f008 e02f 2041 f301 8e14  ..@0...../ A....\n00000150: f301 880f 8eb1 fdff f033 e729 8ef2 003b  .........3.)...;\n00000160: 0842 fdff f003 ec31 0410 6203 0002 6e11  .B.....1..b...n.\n00000170: f000 f007 4371 fdff f033 e629 f001 f742  ....Cq...3.)...B\n00000180: 4c80 0844 003b fdff f033 e53f 8e72 2042  L..D.;...3.?.r B\n00000190: 48f3 4cd8 1cf3 0016 0928 fdff f003 ef33  H.L......(.....3\n000001a0: 0017 f155 f002 4045 fdff f007 ed2b f300  ...U..@E.....+..\n000001b0: 8e14 213f fdff f274 e425 e83a 6007 0004  ..!?...t.%.:`...\n000001c0: 0003 fdff f034 e037 ee38 fdff f274 e42b  .....4.7.8...t.+\n000001d0: 0843 0032 fdff f003 e823 48f3 4cd8 f000  .C.2.....#H.L...\n000001e0: f002 4000 f000 5a4c 0000 0a00 0016 0028  .......(\n000001f0: 0000 0001 40df 0000 0000 0000 0001 0000  ....@...........\n00000200: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000210: 0000 0000 0000 0000 0010 0a00 0016 0028  ...............(\n00000220: 0000 0001 0371 0000 0371 0000 0731 0000  .....q...q...1..\n00000230: 073d 0000 0725 0000 07c9 0000 07d5 0000  .=...%..........\n00000240: 0769 0000 0815 0000 07e1 0a00 0006 0010  .i..............\n00000250: 0000 0001 1000 0000 085f 0a00 0005 0004  ........._......\n00000260: 0000 0001 312e 705f 0500 0000 0600 0000  ....1.p_........\n00000270: 0b00 0010 0000 0000 8000 001c 8000 0000  ................\n00000280: 0000 8000 0067 8000 0000 0001 8000 009e  .....g..........\n00000290: 0000 0000 0b00 000b 0001 0002 0000 0014  ................\n000002a0: 0000 0000 0003 0000 0018 0000 0000 0b00  ................\n000002b0: 000b 0002 0000 0000 0000 8000 0047 0000  .............G..\n000002c0: 0000 0004 8000 0079 0000 0000 0000 0000  .......y........\n000002d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n000002e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n000002f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000300: 0000 0000                                ....\n\n```\nAnd separate signature:\n\n```\n00000000: aaaa 04ff e7dc 26eb e3d3 fd0e bae5 3d38  ......&.......=8\n00000010: 9105 8a2f 0000 0000 0000 0000 0000 0000  .../............\n00000020: 0000 0000 d8b7 0000                      ........\n\n```\nHow to find out which digital signature is used and sign my own files with it?\n\nUPD:\nThe following program tries to decode it as ASN.1\n\n```\nimport asn1\n\nencoded_bytes = bytes.fromhex('aaaa0100389ed563f9d2853bfb63a2d39be7148200000000000000000000000000000000dc02000000503914000000010000000a000140df000001470c00002f000100000004000000030000312e705f000000000000000000000000000000520000000000000064000000000000000000000000000040df0001000000000146000000008420000040000060000000000016006040000004000000600016090000a41ef60913fdfff004e7270016f301880fde41fdfff033ec2b091288f1fa1fc20788b1d842f21fc208f155f0024000003c0843fdfff008e525f000f0094371fdfff033ea3ff001f7424c80085c084bfdfff033ea358e72f06a8e03d8418eb1fdfff2ddea27de4a52bade52c6b9de59f878c8d2de62f7811fffde6912452104f0034070085afdfff004e72d4af64cd81cf30910002ffdfff004e2370016f155f0024030fdfff008e02f2041f3018e14f301880f8eb1fdfff033e7298ef2003b0842fdfff003ec310410620300026e11f000f0074371fdfff033e629f001f7424c800844003bfdfff033e53f8e72204248f34cd81cf300160928fdfff003ef330017f155f0024045fdfff007ed2bf3008e14213ffdfff274e425e83a600700040003fdfff034e037ee38fdfff274e42b08430032fdfff003e82348f34cd8f000f0024000f0005a4c00000a00001600280000000140df0000000000000001000000000000000000000000000000000000000000000000000000100a000016002800000001037100000371000007310000073d00000725000007c9000007d50000076900000815000007e10a00000600100000000110000000085f0a000005000400000001312e705f05000000060000000b000010000000008000001c800000000000800000678000000000018000009e000000000b00000b000100020000001400000000000300000018000000000b00000b00020000000000008000004700000000000480000079000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')\n\nfor offset in range(32):\n    try:\n        decoder = asn1.Decoder()\n        decoder.start(encoded_bytes[offset:])\n        tag, value = decoder.read()\n        print(f'{offset}: {tag} ({len(value)}) {value}')\n    except Exception as e:\n        print(f'{offset}: Cannot decode:', e)\n\n```\nIt prints:\n\n```\n0: Cannot decode: Premature end of input.\n1: Tag(nr=10, typ=32, cls=128) (1) b'\\x00'\n2: Cannot decode: ASN1 syntax error\n3: Tag(nr=0, typ=0, cls=0) (56) b'\\x9e\\xd5c\\xf9\\xd2\\x85;\\xfbc\\xa2\\xd3\\x9b\\xe7\\x14\\x82\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xdc\\x02\\x00\\x00\\x00P9\\x14\\x00\\x00\\x00\\x01\\x00\\x00\\x00  \n\\x00\\x01@\\xdf\\x00\\x00\\x01G\\x0c'\n4: Cannot decode: Premature end of input.\n5: Cannot decode: Premature end of input.\n6: Tag(nr=21, typ=0, cls=192) (99) b'\\xf9\\xd2\\x85;\\xfbc\\xa2\\xd3\\x9b\\xe7\\x14\\x82\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xdc\\x02\\x00\\x00\\x00P9\\x14\\x00\\x00\\x00\\x01\\x00\\x00\\x00  \n\\x00\\x01@\\xdf\\x00\\x00\\x01G\\x0c\\x00\\x00/\\x00\\x01\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x03\\x00\\x001.p_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00R\\x00\\x00\\x00\\x00\\x00\\x00\\x00d\\x00\\x00\\x00'\n7: Cannot decode: Premature end of input.\n8: Cannot decode: Premature end of input.\n9: Cannot decode: Premature end of input.\n10: Tag(nr=5, typ=0, cls=128) (59) b'\\xfbc\\xa2\\xd3\\x9b\\xe7\\x14\\x82\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xdc\\x02\\x00\\x00\\x00P9\\x14\\x00\\x00\\x00\\x01\\x00\\x00\\x00  \n\\x00\\x01@\\xdf\\x00\\x00\\x01G\\x0c\\x00\\x00/\\x00\\x01\\x00\\x00\\x00\\x04\\x00'\n11: Cannot decode: Premature end of input.\n12: Tag(nr=27, typ=32, cls=192) (99) b'\\xa2\\xd3\\x9b\\xe7\\x14\\x82\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xdc\\x02\\x00\\x00\\x00P9\\x14\\x00\\x00\\x00\\x01\\x00\\x00\\x00  \n\\x00\\x01@\\xdf\\x00\\x00\\x01G\\x0c\\x00\\x00/\\x00\\x01\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x03\\x00\\x001.p_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00R\\x00\\x00\\x00\\x00\\x00\\x00\\x00d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n13: Cannot decode: Premature end of input.\n14: Cannot decode: Premature end of input.\n15: Cannot decode: Premature end of input.\n16: Cannot decode: Premature end of input.\n17: Tag(nr=7, typ=32, cls=192) (20) b'\\x82\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xdc\\x02\\x00'\n18: Tag(nr=20, typ=0, cls=0) (0) b''\n19: Tag(nr=2, typ=0, cls=128) (0) b''\n20: Tag(nr=0, typ=0, cls=0) (0) b''\n21: Tag(nr=0, typ=0, cls=0) (0) b''\n22: Tag(nr=0, typ=0, cls=0) (0) b''\n23: Tag(nr=0, typ=0, cls=0) (0) b''\n24: Tag(nr=0, typ=0, cls=0) (0) b''\n25: Tag(nr=0, typ=0, cls=0) (0) b''\n26: Tag(nr=0, typ=0, cls=0) (0) b''\n27: Tag(nr=0, typ=0, cls=0) (0) b''\n28: Tag(nr=0, typ=0, cls=0) (0) b''\n29: Tag(nr=0, typ=0, cls=0) (0) b''\n30: Tag(nr=0, typ=0, cls=0) (0) b''\n31: Tag(nr=0, typ=0, cls=0) (0) b''\n\n```\n",
  "votes": "1",
  "answers": 0,
  "views": "94",
  "tags": [
    "encryption"
  ],
  "user": "AAA BBB",
  "time": "Oct 23, 2023 at 9:44",
  "comments": [
    {
      "user": "Robert",
      "text": "What CPU are you talking about and how old is it? Common crypto data such as signatures is often stored ASN.1 DER encoded. You can try to decode the data as ASN.1. Try it for every byte as first byte and see if something useful comes out. The only thing you know for sure is that RSA is not used, because the signature size is too small.",
      "time": null
    },
    {
      "user": "AAA BBB",
      "text": "This is CSR Kalimba, this exact model is from 2020. I've added test program to decode it as ASN.1 and it doesn't seem to produce meaningful results.",
      "time": null
    }
  ],
  "answers_data": []
}