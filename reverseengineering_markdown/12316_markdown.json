{
  "title": "Fixing corrupt ELF header field \"e_shnum\" for use in GDB",
  "link": "https://reverseengineering.stackexchange.com/questions/12316/fixing-corrupt-elf-header-field-e-shnum-for-use-in-gdb",
  "content": "If the ELF header which usually can be read using readelf has been manually manipulated, let's say by increasing the value for the \"Size of section headers\" the binary still can be executed and works well.\n\nHowever, this manipulation seems to trip up reverse engineering tools like GDC and GDB gives me the error: not in executable format: File format not recognized.\n\nIs there a way to fix the ELF header without knowing the original value of \"Size of section headers\" in order to be able again to analyze the file using standard tools?\n\nGDB is failing to run the binary because it says the file is not in executable format : File format not recognized but it works outside the GDB. The same things happen with the libbfd parser, it can't parse because file format is not recognized. The fact is I only change the number of section headers.\n\n```\n#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello World!  \n\");\n    return 0;\n}\n\n```\nBuild by invoking make hello or on a 64-bit system make CFLAGS=-m32 hello.\n\n```\n$ readelf -h hello\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x8048320\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          4472 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         30 <-- notice me!\n  Section header string table index: 27\n\n```\n```\n$ readelf -h hello\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x8048320\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          4472 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         52 <-- already changed!\n  Section header string table index: 27\n\n```\nGDB will output,\n\nBut if I run it outside of GDB,\n\n```\n$ ./hello output:\nHello World!\n\n```\nSo is there either a method to fix the value for e_shnum without knowing the correct value, or a workaround so I can debug this file in GDB?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "14k",
  "tags": [
    "gdb",
    "elf",
    "crackme"
  ],
  "user": "Fakhri Zulkifli",
  "time": "Nov 21, 2018 at 1:01",
  "comments": [],
  "answers_data": [
    {
      "content": "In this particular case, repairing the header can be automated. Since the section header string table is present, the original value of e_shnum can be found by counting the number of strings in the table.\n\nOriginal:\n\n```\n$ readelf -h hello\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x3e0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          6056 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         29  <-----------------\n  Section header string table index: 28\n\n```\nCorrupted:\n\n```\n$ readelf -h hello\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x3e0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          6056 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         52  <------------------\n  Section header string table index: 28\nreadelf: Error: Reading 2080 bytes extends past end of file for section headers\nreadelf: Error: Reading 7216 bytes extends past end of file for dynamic string table\n\n```\nReading the section header string table:\n\nWhen run against the binary with the corrupted header, the output is as follows:\n\n```\n$ python3 recover_e_shnum.py \noriginal e_shnum:   29\n\n```\nThis script will repair the header automatically:\n\n",
      "votes": "3",
      "user": "julian",
      "time": "Jan 1, 2020 at 2:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I recreated your binary and then used Radare to corrupt the header exactly as you did, changing the number of section headers to 52.\n\n```\nr2 -w a.out -1c's 0; pfo elf64; .pf.elf_header.shnum=52'\n\n```\nThis only generated a warning with subsequent invocations of readelf.\n\n```\n$ readelf -h a.out \nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x1050\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          14624 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         11\n  Size of section headers:           64 (bytes)\n  Number of section headers:         52\n  Section header string table index: 28\nreadelf: Error: Reading 3328 bytes extends past end of file for section headers\n\n```\nBut I got the similar error from GDB,\n\nAnd, if I try to debug that file, I get\n\nI could go back to the original easily with\n\n```\nr2 -w a.out -c's 0; pfo elf64; .pf.elf_header.shnum=52'\n\n```\nHowever to answer your question about tooling,\n\n",
      "votes": "2",
      "user": "Evan Carroll",
      "time": "Nov 20, 2018 at 22:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}