{
  "title": "Recovering variable name in debugger",
  "link": "https://reverseengineering.stackexchange.com/questions/11995/recovering-variable-name-in-debugger",
  "content": "This question somehow relates to my previous question, but now I have a binary which is not stripped.\n\nLet's say I have the following code snippet\n\n```\nQString my_variable(\"almafa\");\nqDebug() << my_variable;\n\n```\nBefore calling the << operator I expect that either rsi or rdi to contain the address of my_variable. Correct me if I am wrong.\n\n```\n   0x0000000000400aca <+100>:    lea    -0x60(%rbp),%rdx\n   0x0000000000400ace <+104>:    lea    -0x50(%rbp),%rax\n   0x0000000000400ad2 <+108>:    mov    %rdx,%rsi\n   0x0000000000400ad5 <+111>:    mov    %rax,%rdi\n   0x0000000000400ad8 <+114>:    callq  0x400d40 <QDebug::operator<<(QString const&)>\n\n```\nstrings a.out | grep my_variable returns my_variable, so it is present in the executable. Is it somehow possible to ask gdb (or any other linux debugger) what is the variable name which belongs to a given address?\nmy_variable is recognized by gdb since command print my_variable is working.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "gdb"
  ],
  "user": "robert",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "I was trying amritanshu's answer using the following code:\n\n```\nint z;\nint main() \n{\n    int x;\n    x = 5;\n    z = 6;\n    return 0; \n}\n\n```\nPlease note that z is a global variable and x is a local variable.  I ran the program in gdb, paused execution of the program at the line x = 5. When I used the command\n\n```\ninfo address z\n\n```\nI got the following response:\n\n```\nSymbol \"z\" is static storage at address 0x601030.\n\n```\nAnd when I typed:\n\n```\ninfo symbol 0x601030\n\n```\nGDB displayed:\n\n```\nz in section .bss\n\n```\nSo, the info symbol address command worked for me when examining a global variable.  But, I wasn't able to do the same thing for the local variable x.  I determined the address of x using the following command:\n\n```\nprint &x\n\n```\nWhen I used the address that was displayed in the info symbol command, GDB displayed\n\n```\nNo symbol matches ...\n\n```\nSo, it may depend on whether the address your examining is used for a global or local variable.  As a workaround, you can try using the command info locals, and then use the print &variable command on each local variable that is displayed.     \n\nGDB documentation on the info commands related to examining the symbol table can be found at Examining the Symbol Table.\n\n",
      "votes": "1",
      "user": "ashleydc",
      "time": "Mar 17, 2016 at 15:28",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "To identify the nearest symbol for a given address you can try \"info\" command:\n\ninfo symbol address\n\n",
      "votes": "0",
      "user": "amritanshu",
      "time": "Feb 11, 2016 at 17:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}