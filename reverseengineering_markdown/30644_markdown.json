{
  "title": "Displacement size (disp_size) of x86 instructions",
  "link": "https://reverseengineering.stackexchange.com/questions/30644/displacement-size-disp-size-of-x86-instructions",
  "content": "Given the opcode 80 3d 1d b0 09 00 00.\n\nThe corresponding capstone instruction is\n\n```\n<CsInsn 0x66a4 [803d1db0090000]: cmp byte ptr [rip + 0x9b01d], 0>\n\n```\nand has the following properties (c_i being the name of the instruction object)\n\n```\nc_i.disp: 0x9b01d\nc_i.disp_offset: 0x2\nc_i.disp_size 0x4\n\n```\nA different instruction\n\n<CsInsn 0xd3de [66c705714309000000]: mov word ptr [rip + 0x94371], 0>\nhas:\n\n```\nc_i.disp:         0x94371\nc_i.disp_offset:  0x3\nc_i.disp_size:    0x2\n\n```\nThe first two properties make sense to me. But why is the disp_size 0x2 and not 0x4?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "85",
  "tags": [
    "disassembly",
    "assembly",
    "x86",
    "x86-64",
    "capstone"
  ],
  "user": "langlauf.io",
  "time": "Jul 15, 2022 at 19:14",
  "comments": [
    {
      "user": "mumbel",
      "text": "I don't really know the answer, this might be it, but just pointing out the first is operating on byte and the second is word (2 byte)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This seems like a bug, there is an open issue in the Capstone repo that seems to fit: https://github.com/capstone-engine/capstone/issues/1640\n\n",
      "votes": "2",
      "user": "Mega Tonnage",
      "time": "Jul 18, 2022 at 20:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "sudhackar",
          "text": "This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post. - From Review",
          "time": null
        },
        {
          "user": "Mega Tonnage",
          "text": "Sorry, I've edited to make it clear that I thought this was a bug.",
          "time": null
        }
      ]
    }
  ]
}