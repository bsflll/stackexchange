{
  "title": "How to patch instruction with a call to a thunk function?",
  "link": "https://reverseengineering.stackexchange.com/questions/31729/how-to-patch-instruction-with-a-call-to-a-thunk-function",
  "content": "I started to use ghidra to begin doing some crackmes, and I need to change an instruction to a call to a thunk function. However, when I export the program back, I get a segfault.\n\nInspecting it with gdb, it looks like the jump address points an area with null bytes (there is one quite near the jump location)\n\n```\nsegfault : 0x555556c700b8  add    BYTE PTR [rax],al\n\n```\nAlso, as I was typing the new instruction in ghidra, it proposed me several opcodes, with no label to differentiate them, and for example, some of them would display another function afterward if I click on them (with the same function name, different namespace since the program was c++). Also, there was opcodes with 5 bytes, and other with 6...\n\nHow to know which one is the right one ?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "488",
  "tags": [
    "ghidra",
    "patching",
    "call"
  ],
  "user": "hl037_",
  "time": "Mar 31, 2023 at 14:29",
  "comments": [
    {
      "user": "Florian Magin",
      "text": "That instruction isn't an intentional trap, that's just what null bytes disassemble to in x86.",
      "time": null
    }
  ],
  "answers_data": []
}