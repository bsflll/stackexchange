{
  "title": "statically placing hooks on PE file's IAT",
  "link": "https://reverseengineering.stackexchange.com/questions/31233/statically-placing-hooks-on-pe-files-iat",
  "content": "recently I started writing my own PE library for C++, and wanted to implement static IAT/EAT hooking, (basically hooking by patching the file instead of hooking at runtime), I managed to successfully iterate all the thunk data and retrieve FTs/Names etc.\n\nSo where's the issue?\nWell...\n\n\n\nAs you can see in this scheme, the PE Loader replaces the IMAGE_THUNK_DATA with the actual dynamic address at runtime, so, statically, you would have an offset, say 0x28010, and at runtime the PE Loader overwrites it with module_base + 0x28010, where module_base would be the dynamically obtained base address of (always as an example) USER32.dll.\n\nIf you still don't understand where I want to get; to statically hook the function I would have to do the following steps, taking as an example MessageBoxA function in USER32.dll\n\nbut then here's the problem, replacing the FTs with the detour, the PE Loader would calculate the FTs like USER32.dll + detourOffset, where it should instead calculate mainModuleBase + detourOffset.\n\none way to \"fix\" this would be replacing the FTs with the \"\"ready\"\" address, so base + detour, but we're talking about STATICALLY hooking IATs, so we dont have a base address.\n\nOther than having to patch something that hooks the IAT at runtime, any idea how I could achieve this?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "169",
  "tags": [
    "c++",
    "pe",
    "function-hooking",
    "iat"
  ],
  "user": "VEIL",
  "time": "Dec 5, 2022 at 13:55",
  "comments": [],
  "answers_data": []
}