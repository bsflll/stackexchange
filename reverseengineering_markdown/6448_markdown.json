{
  "title": "Find sigtrap function",
  "link": "https://reverseengineering.stackexchange.com/questions/6448/find-sigtrap-function",
  "content": "I'm reversing a program that uses a lot of BREAK/int 3 (Linux). I guess that the code contains something like:\n\n```\nvoid sigtrap_func(int sig) { (some stuff..) }\n\nint main()\n{\n  signal(SIGTRAP, sigtrap_func);\n  (some stuff)\n  asm(\"int 3\");\n  (and so on)\n  asm(\"int 3\");\n\netc..\n\n```\nI replaced all SIGTRAP by NOPs and the program behave differently than with them. So, I'm sure that something is done inside the sigtrap function.\n\nHow can I find this function just with the assembler ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "970",
  "tags": [
    "linux",
    "anti-debugging"
  ],
  "user": "reverse",
  "time": "Oct 14, 2014 at 20:14",
  "comments": [],
  "answers_data": [
    {
      "content": "That's where strace comes in handy. If i make your program compilable and compile it:\n\n```\n$cat trap.c\n#include <signal.h>\nvoid sigtrap_func(int sig) { puts(\"trap\"); }\n\nint main()\n{\n  signal(SIGTRAP, sigtrap_func);\n}\n$ cc -o trap trap.c\n\n```\nand then run it with strace, i'll get a list of all system calls the program executes:\n\n```\n$strace -i ./trap \n[      31076ad057] execve(\"./trap\", [\"./trap\"], [/* 32 vars */]) = 0\n... stuff omitted that loads dynamic libraries\n[      3107632abe] rt_sigaction(SIGTRAP, {0x400504, [TRAP], SA_RESTORER|SA_RESTART, 0x31076329a0}, {SIG_DFL, [], 0}, 8) = 0\n[      31076ad038] exit_group(0)        = ?\n\n```\nYou see that rt_sigaction (the system call that implements signal()) gets called at 0x3107632abe, and sets the handler function to 0x31076329a0. Now is the time to start gdb, and set breakpoints there (beware of ASLR though!).\n\n",
      "votes": "6",
      "user": "Guntram Blohm",
      "time": "Oct 14, 2014 at 15:12",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Just like in your sample program, the signal handlers are installed using a signal (or sigaction) function. So you just need to find the call to that function and see what argument is passed to it. That argument will be the address of the signal handler.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 15, 2014 at 2:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}