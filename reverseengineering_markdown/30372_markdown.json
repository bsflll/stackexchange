{
  "title": "How does `bne` know which bit field in the condition register to branch on? (PowerPC Gekko)",
  "link": "https://reverseengineering.stackexchange.com/questions/30372/how-does-bne-know-which-bit-field-in-the-condition-register-to-branch-on-pow",
  "content": "I'm currently reversing a PowerPC Gekko program and saw a bne instruction that branched on the condition register after a rlwinm function. Perfect. That makes sense. bne is checking the third bit of the CR0 bit field in the condition register. I assumed checking CR0 was default and that made sense.\n\nIn the next few lines, there was another bne instruction that followed a cmplwi instruction. Cool, I can probably guess that we're branching after the cmplwi (I'm pretty sure this is a loop, probably a for loop). However, my documentation seems to say that cmplwi modifies the CR3 bit field in the condition register.\n\nBoth instances of bne did not have a CRx argument as I saw in my documentation, so I'm lost as to which bit field it's checking.\n\nWhich bit field in the condition register does bne check when the condition register is unspecified?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "83",
  "tags": [
    "powerpc"
  ],
  "user": "Wadwamille",
  "time": "May 6, 2022 at 20:12",
  "comments": [
    {
      "user": "Robert",
      "text": "You should better include the two assembler sections about the different bne usage in your question.",
      "time": null
    },
    {
      "user": "Wadwamille",
      "text": "@Robert I'm confused by what your comment means.",
      "time": null
    },
    {
      "user": "Robert",
      "text": "I was talking aboutthe assembler instructions you are looking ate in IDA or whatever decompiler you have used. It would be easier to understand if you would copy the code sections you are talking about into your question.",
      "time": null
    }
  ],
  "answers_data": []
}