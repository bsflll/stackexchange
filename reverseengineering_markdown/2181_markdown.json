{
  "title": "How can I figure out the device memory map for an embedded system?",
  "link": "https://reverseengineering.stackexchange.com/questions/2181/how-can-i-figure-out-the-device-memory-map-for-an-embedded-system",
  "content": "On many embedded systems, a great deal of communication with devices is done by reading and writing to memory-mapped I/O (MMIO) addresses in software. Supposing that I have access to the physical device, and a copy of the firmware that I can load in IDA, how can I figure out which devices are at which addresses?\n\nSo far I've just been making guesses by looking at the code, string references (e.g., if a function prints out \"Initializing timer interrupt\" I can guess that maybe some of the addresses are for configuring a timer). But surely something must know where all the devices live in memory, because something is responsible for routing memory reads/writes to the correct device.\n\nSo, is there a more systematic way to derive this information?\n\n",
  "votes": "7",
  "answers": 1,
  "views": "2k",
  "tags": [
    "hardware",
    "embedded"
  ],
  "user": "Brendan Dolan-Gavitt",
  "time": "Jun 3, 2013 at 17:09",
  "comments": [],
  "answers_data": [
    {
      "content": "In embedded devices there's nothing like PCI (well, it may be present but it's just one of the many HW blocks). So you can't just scan all possibilities to discover the existing devices. The code must know where everything is.\n\nThat said, there are some sources of information you may try to find.\n\nEDIT: sometimes, the hardware external to chip may be connected via an external bus interface (or external memory interface, or many other names). This is usually present in the bigger chips with at least a hundred pins. This interface can be programmable, and you can set up which address ranges go to which set of pins. Often there are also so-called chip select (CS) lines involved, which allow multiplexing the same set of pins for accessing several devices, so that one range of addresses will assert CS1, the other CS2 and so on. If you have such a set up, you need to find out the code which initializes the external interface, or dump its configuration at runtime. If you can't do that, you can try looking for memory accesses which correspond to the register layout of the external chip (such as an Ethernet controller), modulo some base address in the CPU's address space.\n\n",
      "votes": "9",
      "user": "Igor Skochinsky",
      "time": "Jun 3, 2013 at 17:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "Brendan Dolan-Gavitt",
          "text": "Right, but again â€“ knowledge has to be somehow embedded in the hardware as well. E.g. the software reads at physical address 0xdeadbeef. The hardware has to know that this means \"read from register 0xf of the Broadcom Gigabit Ethernet controller\". Shouldn't there be some way to enumerate those mappings (not necessarily in software, but e.g. by looking for connectivity on the board or dumping the configuration of some hypothetical address-mapping chip)?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@BrendanDolan-Gavitt: added some text about what I think you meant",
          "time": null
        },
        {
          "user": "Brendan Dolan-Gavitt",
          "text": "Ok, I think I understand. Unfortunately the SoC I'm looking at right now was manufactured by PMC for this specific company (HP) and there is no datasheet or source code available; the most I know is that it's based around a Cortex A8, but this doesn't tell me anything about the memory map. So, back to staring at the binary I guess...",
          "time": null
        }
      ]
    }
  ]
}