{
  "title": "reversing stripped & statically linked binary with radare2",
  "link": "https://reverseengineering.stackexchange.com/questions/16355/reversing-stripped-statically-linked-binary-with-radare2",
  "content": "As the question says I need to reverse a stripped elf binary with radare2. This binary is also statically linked. I already reversed it in IDA by identifying statically linked libraries using lscan and importing the .sig files provided by lscan into IDA in order to resolve function names.  \n\nI don't know how to import these files to radare2. Also I don't know if the same solution applies to radare2.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "4k",
  "tags": [
    "binary-analysis",
    "elf",
    "radare2"
  ],
  "user": "rustam Shirinov",
  "time": "Sep 17, 2017 at 8:33",
  "comments": [],
  "answers_data": [
    {
      "content": "Seems like lscan is written to work with IDA. However, lscan is based on FLIRT signature files which can be also read by radare2 (See the Zignatures section of this answer). There are several things you can do with radare2 to achieve similar results:\n\nYou can easily import IDC and IDB files from IDA to radare2 using a simple scripts which exists in radare2ida repository.\n\nExport from IDA \n\nTo export IDA database to IDC file click on File >> Produce file >> Dump databse to IDC file...\n\nTo save the current databse as an IDB file click File >> Take database snapshot... or use the shortcut Ctrl+Shift+W\n\nImport to Radare2\n\nTo import the IDC metadata to radare2 use idc2r.py which shipped with radare2ida:   \n\n```\nidc2r.py file.idc > file.r2\n\n```\nThe command reads an IDC file exported from an IDA Pro database and produces an r2 script containing the same comments, names of functions etc. You can import the resulting file.r2 by using the dot . command of radare:  \n\n```\n[0x00000000]> . file.r2\n\n```\nThe . command is used to interpret radare commands from external sources, including files and program output. For example, to omit generation of an intermediate file and import the script directly you can use this combination:\n\n```\n[0x00000000]> .!idc2r.py < file.idc\n\n```\nradare2 has its own format of the signatures called Zignatures, allowing to both load/apply and create signatures on the fly. They are available under the z command namespace:\n\n```\n[0x00000000]> z?\n|Usage: z[*j-aof/cs] [args] # Manage zignatures\n| z            show zignatures\n| z*           show zignatures in radare format\n| zj           show zignatures in json format\n| z-zignature  delete zignature\n| z-*          delete all zignatures\n| za[?]        add zignature\n| zo[?]        manage zignature files\n| zf[?]        manage FLIRT signatures\n| z/[?]        search zignatures\n| zc           check zignatures at address\n| zs[?]        manage zignspaces\n\n```\nThe zf subcommands can be handy whenever you deal with FLIRT signatures. Therefore you can import FLIRT signatures from a file:\n\n```\n[0x00000000]> zf?\n|Usage: zf[dsz] filename # Manage FLIRT signatures\n| zfd filename  open FLIRT file and dump\n| zfs filename  open FLIRT file and scan\n| zfz filename  open FLIRT file and get sig commands (zfz flirt_file > zignatures.sig)\n\n```\nRegardless of FLIRT, you can also use zos [filename] from radare2 to dump signatures to a sdb file and zo [filename] to load it.\n\nAs similar to list command of dgb, radare allows you to print lines from a source code file. Here's an example:\n\n```\n$ gcc -m32 -g megabeets.c -o megabeets.bin\n$ r2 megabeets.bin\n[0x08048420]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x08048420]> s main\n[0x080486cd]> CL\nfile .//megabeets.c\nline 36\n  022\n  023  int main(int argc, char *argv[])\n> 024  {\n  025      char *input;\n  026      puts(\"Megabeets  \n\");\n\n```\nTo know more I recommend you to read:\n\n",
      "votes": "7",
      "user": "Megabeets",
      "time": "Sep 17, 2017 at 8:41",
      "is_accepted": true,
      "comments": []
    }
  ]
}