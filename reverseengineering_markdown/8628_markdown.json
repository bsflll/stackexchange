{
  "title": "How to get the recovered memory references in IDA-Pro? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/8628/how-to-get-the-recovered-memory-references-in-ida-pro",
  "content": "I want to collect all the IDA recovered symbol information in data sections (this information could be function name, or it could be an entry of jump table, or it could be a reference to other data sections).\n\nHere is an example of data sections from a IDA disassembled binary. \n\n\n\nBasically there are three recovered symbols in data section, and I want to collect these information in a format like this:\n\n```\n0x804a018 : sub_804847b\n0x804a01dc : _strchr\n0x804a020 : sub_80484AE\n\n```\nI am thinking to traverse all the memory address of a binary's data sections, and check the content of each address, to see whether it is a recovered symbol.  \n\nBut basically how to read a suspicious symbol when iterating addresses? I read the idc interface, but I just cannot find any the correct api to do so. Could anyone help me on this issue? I appreciate that.\n\n------------------------ explain ------------------------\n\nI didn't get an answer in that post, in addition, I think what I explained in that post is somehow misleading.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "idapython",
    "symbols"
  ],
  "user": "lllllllllllll",
  "time": "10 years ago",
  "comments": [
    {
      "user": "Jongware",
      "text": "It can also be a random sequence of binary numbers instead of an address. The only numbers that should be converted to an actual address are those listed in the relocation table.",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@JasonGeffner, hi Jason, firstly, my question is still not be answered in that post. Secondly, I am worried that post contains much more stuff that can mislead other people. Anyway, any though on this issue? :)",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@Jongware, thank you and I know it could be. So you mean the symbolized memory references are already listed in relocation table, does IDA-Pro collects this information?",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "If they are present in the executable, then it should be aware: my free-demo version shows a comment such as OFF32 SEGDEF [CODE,524A0612] for undefined bytes that are relocated, but it does not complain if I define them otherwise. I'm not sure if one can interrogate the relocation table through IDA.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As far as I understood your question, you will need the following IDAPython apis:\n\nAll the mentioned IDAPython apis has the similar things in idc \n\nSo, for your specific example you'll get the desired output as follows (IDAPython):\n\n```\nimport idc\naddresses = [0x804a018, 0x804a01dc ,0x804a020 ]\n\nfor a in addresses:\n    print hex(a),\" : \", idc.Name(idc.Dword(a))\n\n```\nFiltering the data in the .data section is completely different story.\n\nFor example you can do the following (it is not 100% correct):\n\n```\nimport idc\n\nsegstart = your_code_segment_start\nsegend = your_code_segment_end\nptrstep = your_system_pointer_size_in_bytes\n\nfor a in range(segstart, segend, ptrstep):\n    data = idc.Dword(a) #replace with qword if working with 64 bit)\n    if a < segstart or a >= segend:\n        continue\n    if not idc.Name(data) is None:\n        print hex(a), \" --> \", idc.Name(data)\n\n```\n",
      "votes": "1",
      "user": "w s",
      "time": "Apr 5, 2015 at 6:40",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Thank you! I also updated some code here.",
          "time": null
        }
      ]
    }
  ]
}