{
  "title": "Why does IDA add \"db\" statements between disassembled code",
  "link": "https://reverseengineering.stackexchange.com/questions/16178/why-does-ida-add-db-statements-between-disassembled-code",
  "content": "I'm trying to analyze a MS-DOS COM file that I wrote a few years ago with IDA Free 5.0, I've since renamed the segment to code_and_data and named constants and set data types correctly. However, when looking at the disassembly, I get db pseudo-instructions in the listing, like this:\n\n```\n\ncode_and_data:0106 replacement_irq_handler:                ; DATA XREF: start+81o\ncode_and_data:0106                 cli\ncode_and_data:0107                 push    bx\ncode_and_data:0108                 db      3Eh\ncode_and_data:0108                 cmp     byte ptr ds:3BEh, 'C'\ncode_and_data:010E                 jnz     short call_original_dos_interrupt_handler\ncode_and_data:0110                 db      3Eh\ncode_and_data:0110                 cmp     byte ptr ds:3C0h, 'A'\ncode_and_data:0116                 jnz     short call_original_dos_interrupt_handler\ncode_and_data:0118                 db      3Eh\ncode_and_data:0118                 cmp     byte ptr ds:3C2h, 'K'\ncode_and_data:011E                 jnz     short call_original_dos_interrupt_handler\ncode_and_data:0120                 db      3Eh\ncode_and_data:0120                 cmp     byte ptr ds:3C4h, 'O'\ncode_and_data:0126                 jnz     short call_original_dos_interrupt_handler\ncode_and_data:0128                 db      3Eh\ncode_and_data:0128                 cmp     byte ptr ds:3C6h, 'N'\ncode_and_data:012E                 jnz     short call_original_dos_interrupt_handler\ncode_and_data:0130                 push    StartOfIndexTable\ncode_and_data:0133                 pop     bx\n\n```\nI understand that there are no additional bytes there, since the db and the cmp instruction after it start at the same address (see left column). Why does IDA show/add those db pseudo-instructions?\n\nIs there any way to tell it to not show those, or is there a reason why it might be useful (I could only guess that since the same segment is both used for code and data, it tries to be \"helpful\" and show the code as data as well)?\n\nBut if so, why does it only show the first byte of the instruction (if you look at the addresses on the left again, these instructions are longer than 1 byte).\n\n",
  "votes": "10",
  "answers": 2,
  "views": "6k",
  "tags": [
    "ida",
    "disassembly",
    "x86",
    "dos-com"
  ],
  "user": "Thomas Perl",
  "time": "Aug 25, 2017 at 12:13",
  "comments": [
    {
      "user": "rackandboneman",
      "text": "Isn't a db statement a decompiler's way to say \"I can't make sense of it, can you?\"",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The byte 3Eh is the encoding of the segment override DS:. You observe it in an instruction like\n\n```\ncmp     byte ptr ds:3BEh, 'C'\n\n```\nThe hex encoding of this instruction is (I did this manually, some bit might be wrong)\n\n```\n3E    - segement override prefix\n80    - 8 bit ALU instruction\n3E    - mod/rm byte (reg = 7 -> instruction is CMP, mod = 0/rm = 6 -> immediate address)\nBE 03 - offset of data to compare\n43    - immediate data byte\n\n```\nThe sequence 3E 80 3E BE 03 53 is 6 bytes long, which matches the actual instruction length of 6 bytes (010Eh - 0108h). If you assemble the assembler source code as given by IDA using a standard x86 assembler (like MASM), the DS: prefix will be ommitted, because the addressing mode \"immediate address\" is relative to the data segment by default. IDA shows the extra DB instruction to tell you (or an assembler that tries to re-assemble the listing) that the redundant, superflous segment prefix is actually encoded in the binary. If you want to hide that information, check Options -> General -> Analysis -> \"Processor specific analysis options\" -> \"Don't display redundant instruction prefixes\".\n\n",
      "votes": "12",
      "user": "Michael Karcher",
      "time": "Aug 25, 2017 at 18:14",
      "is_accepted": true,
      "comments": [
        {
          "user": "Thomas Perl",
          "text": "Thanks, that is really detailed. The instruction's hex encoding you specified is the same as in my input file. And the option was what I was looking for, enabling it does hide the db pseudo-instructions in the listing. Cool!",
          "time": null
        }
      ]
    },
    {
      "content": "Edit: Thanks Michael for the clarification, these are not Branch hints, but Segment Prefixes. Keeping the answer for a reference and for people coming from search engines. \n\nThese are \"Branch Hints\" which aim to give the processor a \"hint\" as to whether or not a branch is likely to occur.  \n\nBranch Prediction \n\nIt used for optimization that is called Branch Prediction â€” an attempt that is done by the processor to predict which branch the code would take. The CPU is able to keep processing by making an assumptions about the direction of a branch before a condition is resolved. Otherwise, it was \"sitting\" and waiting for the condition the branch is dependent on to be resolved. \n\nFrom Wikipedia:\n\nBranch Hints \n\nYou can hint the CPU about the likelihood that a branch would be taken by using hint bytes that are inserted before a conditional jump instruction.\nThis is done by using branch-hint-bytes which are inserted immediately before the conditional jump instruction.  \n\nThe bytes are 3Eh and 2Eh and respectively they mean as follows:\n\nMore Information: \n\nYou can read more about branch hints and optimisation here (recommended) and here.\nIf you want to read more about Branch Prediction I recommend this article about Dynamic Branch Prediction.\n\n",
      "votes": "6",
      "user": "Megabeets",
      "time": "Aug 26, 2017 at 8:15",
      "is_accepted": false,
      "comments": [
        {
          "user": "Thomas Perl",
          "text": "Makes sense, thank you -- I know the concept of avoiding branch mispredictions from GLib's G_LIKELY() / G_UNLIKELY() macros, interesting to see that branch hints have been around for so long. So is that a shortcoming of IDA to not generate pseudo-assembly for those?",
          "time": null
        },
        {
          "user": "Michael Karcher",
          "text": "downvoted because this answer is misses the question. 2Eh and 3Eh only work as branch hints if they prefix a jump instruction. In this case, they prefix a memory instruction and work in the original way - that is as segment prefixes.",
          "time": null
        }
      ]
    }
  ]
}