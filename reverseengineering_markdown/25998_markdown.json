{
  "title": "debugging an older version of libc",
  "link": "https://reverseengineering.stackexchange.com/questions/25998/debugging-an-older-version-of-libc",
  "content": "I'm trying to understand heap exploitation better. Therefore, I compiled the following file:\nhttps://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c\n\nI have the newest libc. How can I debug the following file with an older version? I know I can try to compile it an older one, but it seems to me like a very daunting task. I tried to load an older libc by downloading one from libc.blukat.me with pwntools, but it doesn't see it.\n\nedit: the target cpu arch is x86 64bit.\nThank you!\n\n",
  "votes": "2",
  "answers": 2,
  "views": "684",
  "tags": [
    "elf",
    "libc"
  ],
  "user": "anon",
  "time": "Sep 28, 2020 at 20:29",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Well, this is a tough one and you don't even mention the target CPU. Suppose you can find the original media for Fedora 26, that might work. A chroot and building glibc yourself could also be an option, but you seem reluctant to do that. If you are ready to tinker this could be worth a shot.",
      "time": null
    },
    {
      "user": "anon",
      "text": "Hi @0xC0000022L, I added the info, thanks. I'm quite surprised that it's so complicated. How do researchers inspect older versions?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Researchers will usually not be afraid to build it from scratch. See, the issue is that even though you may be able to get a version that formally carries the version number 2.25, it stands to reason that - unless you happen to get the earliest available package for that distro - you will get something that is patched somehow. So building stuff from scratch is typically the easiest with your requirements. Projects like LFS, Yocto and Buildroot make it almost trivial to build complete systems (suitable for chroot) tailored to your needs.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "libc versions are tied to the corresponding ld.so (dynamic linker) versions. You have a few options:\n\nNote that if you use a libc without using the corresponding ld.so (for example, if you do LD_LIBRARY_PATH=. ./binary and the libc in the directory does not match your system ld.so), you will probably get segfaults or unexpected behaviour, as libc and ld.so use shared data structures that change between versions.\n\n",
      "votes": "1",
      "user": "nneonneo",
      "time": "Oct 25, 2021 at 20:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You probably want to set LD_LIBRARY_PATH to point to where you have the other libc version.\n\nYou may also need to rename it to be e.g. 'libc.so.6'.  You can see the exact name that your binary loads with ldd.\n\n```\n$ ldd /bin/sh\n    linux-vdso.so.1 =>  (0x00007fff107d8000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fde26974000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007fde26f66000)\n\n```\nYou can verify that your environment variable worked in the same way.  For example, if you copy libc to /home/pwntools, you might see this:\n\n```\n$ LD_LIBRARY_PATH=\"$PWD\" ldd /bin/sh\n    linux-vdso.so.1 =>  (0x00007ffda30f5000)\n    libc.so.6 => /home/pwntools/libc.so.6 (0x00007f7b26225000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f7b26817000)\n\n```\n",
      "votes": "-1",
      "user": "Zach Riggle",
      "time": "Sep 28, 2020 at 21:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "anon",
          "text": "Hi! thanks. I downloaded the ld of that version (2.44 9) and put it into the directory as well. When executing LD_LIBRARY_PATH=\"$PWD\" ldd foo I receive a seg fault. Both of the files have necessary permissions. Do you have any idea why?",
          "time": null
        }
      ]
    }
  ]
}