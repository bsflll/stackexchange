{
  "title": "Associating Symbol Names with .PLT Entries",
  "link": "https://reverseengineering.stackexchange.com/questions/6213/associating-symbol-names-with-plt-entries",
  "content": "Doing some messing around with ELF (of both the x86 and ARM varieties).\n\nAssociating symbol names with entries in the .got section is straightforward.  Find the .got section, find the relocation section .rel.plt/.rela.plt whose .sh_info contains the index of the .got, and find the symbol section .dynsym that contains the symbol names.\n\nEverything lines up nicely between these sections, and I can accurately assign symbol names to entries in the .got.  \n\nHowever, I also want names for the stubs in the .plt section.  A rough percentage of the time, symbols for the .plt can be inferred based on the ordering of .got symbols, and an offset from the base of the .plt section.  For whatever reason, occasionally this is not the case.\n\nBinutils objdump can accurately generate them for x86, and IDA can accurately generate them for x86 and ARM (both without -g debugging symbols).  How are these generated?\n\nIn the case of IDA, I could reasonably assume there's some advanced logic going on based on interpretation of the instructions in the .plt, but I know that must not be the case for objdump.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "elf",
    "got",
    "plt"
  ],
  "user": "Zach Riggle",
  "time": "Oct 14, 2014 at 3:54",
  "comments": [],
  "answers_data": [
    {
      "content": "See this thread. Basically, they rely on the fact that the order of PLT relocations matches the order of the stubs in .plt section, and the stubs are all of the same size.\n\nOn some platforms you can also use st_value of the symbol entry in the dynamic symbol table.\n\nIDA indeed usually does not rely on the order of symbols/relocations but checks the actual instructions in the stub.\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Sep 10, 2014 at 5:05",
      "is_accepted": true,
      "comments": []
    }
  ]
}