{
  "title": "How does QPST work and how can I make an app like it?",
  "link": "https://reverseengineering.stackexchange.com/questions/17892/how-does-qpst-work-and-how-can-i-make-an-app-like-it",
  "content": "How does Qualcomm's QPST work? Or what protocol/commands does QPST use? As I wanted to develop an app like it, I searched for AT commands. But I can't find out any AT commands that allows me access(read/write) my old phone's internal file system(firmware). Any helps like the name of the commands/protocols that QPST uses are appreciated.\n\nOr if my question is off-topic, where should I ask? \n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "firmware",
    "embedded",
    "kernel"
  ],
  "user": "Hyeonseo Yang",
  "time": "Apr 7, 2018 at 6:16",
  "comments": [
    {
      "user": "Willem Hengeveld",
      "text": "I think your question is fine, but maybe split it in one about qpst, and another about extracting firmware.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There is an open source project: openpst, which reimplements most functionality of the qpst tool.\n\nSome of the protocols used are:\n\nFlashing usually works like this:\n\nNote that some manufacturers lock the bootrom, by fusing a specific certificate into the processor's One-time-programmable fuses. When this is the case, the bootrom will accept only specific binaries.\n\nA collection of suitable binaries can be found here\n\n",
      "votes": "5",
      "user": "Willem Hengeveld",
      "time": "May 31, 2019 at 7:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Hyeonseo Yang",
          "text": "Oops, I didn't know that there were an open source project! Thanks. Then I may start from that.",
          "time": null
        },
        {
          "user": "Zibri",
          "text": "is it possible to dump all the flash using NPRG ENPRG?",
          "time": null
        },
        {
          "user": "Willem Hengeveld",
          "text": "I know it is possible with the firehose variants of NPRG or ENPRG",
          "time": null
        }
      ]
    },
    {
      "content": "Use the sniffer for the communication channel it uses (most likely USB) to see which data is sent to your device. Try to search for the constants you see in the sniffer to find which binary may be responsible for generating the data sent to the device. Disassemble the binary, find the exact code piece responsible for protocol processing, decompile it manually. After having this knowledge, write your own code.\n\n",
      "votes": "3",
      "user": "Anton Kukoba",
      "time": "Apr 4, 2018 at 12:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}