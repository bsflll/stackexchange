{
  "title": "Patch .net executable via hex editor",
  "link": "https://reverseengineering.stackexchange.com/questions/29605/patch-net-executable-via-hex-editor",
  "content": "What I am trying to do:\n\nI have an .exe written in C#. Ilspy shows the code. Inside it has a class DoWork with static field SomeValue:\n\n```\n// Program.DoWork\npublic static int SomeValue => 15;\n\n```\nIn code, however, it's not a field but a getter function:\n\n```\n// return 15;\nIL_0000: ldc.i4.s 15\nIL_0002: ret\n\n```\nand I want to modify this function to return 127 instead. I've found the location of the function inside .exe binary dump:\n\n```\n0x123456  1f 0f 2a\n\n```\nI've modified .exe in HxD editor so new binary dump has this:\n\n```\n0x123456  1f 7f 2a\n\n```\nWhen I open modified .exe with Ilspy it shows:\n\n```\n// Program.DoWork\npublic static int SomeValue => 127;\n\n```\nSo all seems well, but it doesn't work. The modified .exe still runs as if SomeValue is 15.\n\nQuestions:\n\n",
  "votes": "2",
  "answers": 1,
  "views": "781",
  "tags": [
    ".net",
    "decompiler"
  ],
  "user": "Uprooted",
  "time": "Nov 24, 2021 at 15:15",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "yes, this should work, for the missing part hard to say, w/o looking into the binary",
      "time": null
    },
    {
      "user": "Uprooted",
      "text": "@PawełŁukasik is IL translated every time exe is run, can it be that x86 representation is cached somewhere?",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "unless it's ngen-ed it is compiled every time you run it",
      "time": null
    },
    {
      "user": "Uprooted",
      "text": "It probably is, how do I check this?",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "ngen display will list all of the ngen'ed assemblies installed on the system",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Turned out the executable is a ReadyToRun executable, so it contains both IL and prebuilt x86-64 image. Modifying IL wasn't working because only x86 image was used at runtime. Modifying x86 image worked for me. ILSpy is capable of showing ReadyToRun image alongside C# and IL.\n\n",
      "votes": "2",
      "user": "Uprooted",
      "time": "Nov 26, 2021 at 17:52",
      "is_accepted": true,
      "comments": []
    }
  ]
}