{
  "title": "Identifying C/C++ Library Functions",
  "link": "https://reverseengineering.stackexchange.com/questions/32226/identifying-c-c-library-functions",
  "content": "I am attempting to reverse-engineer an old DOS executable, which seems to have been compiled around 1992 using Microsoft's C compiler at the time.\n\nWhen opening the executable in Ghidra no imports are listed, so I assume that any library functions that were utilised have been statically linked. Certain strings exist such as %s%s, so I can assume that printf has been utilised, for example.\n\nHowever, when looking through the code, nothing stands out as obviously being library code. Is there a way to identify library functions just from looking at the assembly/decompiled output?\n\nThanks,\nJames\n\n",
  "votes": "1",
  "answers": 1,
  "views": "880",
  "tags": [
    "c++",
    "ghidra",
    "c",
    "dos",
    "dos-exe"
  ],
  "user": "jttri777",
  "time": "Aug 27, 2023 at 22:25",
  "comments": [],
  "answers_data": [
    {
      "content": "You could make use of FLIRT signatures.\n\nThere's a Python script porting IDA FLIRT for Ghidra. You can use existing signature sets, for instance github.com/Maktm/FLIRTDB (or make and apply your own signatures if needed).\n\nIf you need a tutorial on Ghidra setup here's a decent one.\n\n",
      "votes": "2",
      "user": "mimak",
      "time": "Aug 27, 2023 at 22:52",
      "is_accepted": true,
      "comments": [
        {
          "user": "jttri777",
          "text": "Thanks for that. I'll look into FLIRT signatures. I've added the script to Ghidra, I just need to locate some 16-bit signature sets now. THanks.",
          "time": null
        }
      ]
    }
  ]
}