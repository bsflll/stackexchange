{
  "title": "Which interrupt was called",
  "link": "https://reverseengineering.stackexchange.com/questions/32911/which-interrupt-was-called",
  "content": "```\ncseg01:00046E80     sub_46E80       proc near               ; CODE XREF: sub_46ED8+81p\ncseg01:00046E80                                             ; sub_47164+6Dp\ncseg01:00046E80 000                 push    ebx\ncseg01:00046E81 004                 push    ecx\ncseg01:00046E82 008                 push    edx\ncseg01:00046E83 00C                 mov     edx, 300h\ncseg01:00046E88 00C                 mov     ebx, 2Fh ; '/'\ncseg01:00046E8D 00C                 mov     eax, offset unk_12F9F0\ncseg01:00046E92 00C                 xor     ecx, ecx\ncseg01:00046E94 00C                 mov     word_12F694, dx\ncseg01:00046E9B 00C                 mov     word_12F698, bx\ncseg01:00046EA2 00C                 mov     word_12F69C, cx\ncseg01:00046EA9 00C                 mov     ecx, offset word_12F844\ncseg01:00046EAE 00C                 mov     edx, ds\ncseg01:00046EB0 00C                 mov     ebx, offset word_12F694\ncseg01:00046EB5 00C                 mov     word_12F844, dx\ncseg01:00046EBC 00C                 mov     edx, offset unk_12F9F0\ncseg01:00046EC1 00C                 mov     eax, dword_C6690\ncseg01:00046EC6 00C                 mov     dword_12F6A8, edx\ncseg01:00046ECC 00C                 mov     edx, ebx\ncseg01:00046ECE 00C                 call    int386x_\ncseg01:00046ED3 00C                 pop     edx\ncseg01:00046ED4 008                 pop     ecx\ncseg01:00046ED5 004                 pop     ebx\ncseg01:00046ED6 000                 retn\ncseg01:00046ED6     sub_46E80       endp\n\n\n```\nSomeone can tell me which interrupt was called in this code?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "61",
  "tags": [
    "ida",
    "c++"
  ],
  "user": "black4joss",
  "time": "Apr 20, 2024 at 13:17",
  "comments": [],
  "answers_data": [
    {
      "content": "Watcom's int386x function has the following signature:\n\n```\nint int386x( int intno, union REGS *inregs, union REGS *outregs, struct SREGS *segregs );\n\n```\nWatcom's fastcall convention uses registers eax ebx ecx edx for the first arguments, so intno should be in eax. The last instruction writing to it is:\n\n```\nmov eax, dword_C6690\n\n```\nSo you'll need to figure out what value is stored in dword_C6690 at that time.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "May 5, 2024 at 11:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}