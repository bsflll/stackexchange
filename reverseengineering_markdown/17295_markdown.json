{
  "title": "Running just one function from an compiled executable or shared object?",
  "link": "https://reverseengineering.stackexchange.com/questions/17295/running-just-one-function-from-an-compiled-executable-or-shared-object",
  "content": "Radare lets me view the assembly and pseudo-C code of a function. Can I run those instructions though outside of the process? Perhaps setting the register myself?\n\nIf so, how would I go about doing this? Is there a guide or tutorial on this?\n\nI'm new what I'm thinking is that there must be some kind of easy to set the entry point, the registers the function is using, run code until a ret and then see what happened?\n\n",
  "votes": "3",
  "answers": 3,
  "views": "502",
  "tags": [
    "decompilation",
    "radare2",
    "instrumentation"
  ],
  "user": "Evan Carroll",
  "time": "Oct 18, 2018 at 23:20",
  "comments": [
    {
      "user": "Avery3R",
      "text": "You could try playing around with the file's header to make it a dynamic library, load it into your program, then call the function with a function pointer.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think you are looking for ESIL which allow you to emulate code\n\nSpecifically aei to initialize the VM and aeip to set the pc to curseek. You can list registers using aer and set them with aer eax=1\n\nYou can find more info here and here\n\n```\n[0x00000000]> ae?\n|Usage: ae[idesr?] [arg]ESIL code emulation\n| ae [expr]                  evaluate ESIL expression\n| ae?                        show this help\n| ae??                       show ESIL help\n| ae[aA][f] [count]          analyse esil accesses (regs, mem..)\n| aec[?]                     continue until ^C\n| aecs [sn]                  continue until syscall number\n| aecu [addr]                continue until address\n| aecue [esil]               continue until esil expression match\n| aef [addr]                 emulate function\n| aei                        initialize ESIL VM state (aei- to deinitialize)\n| aeim [addr] [size] [name]  initialize ESIL VM stack (aeim- remove)\n| aeip                       initialize ESIL program counter to curseek\n| aek [query]                perform sdb query on ESIL.info\n| aek-                       resets the ESIL.info sdb instance\n| aep[?] [addr]              manage esil pin hooks\n| aepc [addr]                change esil PC to this address\n| aer [..]                   handle ESIL registers like 'ar' or 'dr' does\n| aets[?]                    ESIL Trace session\n| aes                        perform emulated debugger step\n| aesp [X] [N]               evaluate N instr from offset X\n| aesb                       step back\n| aeso                       step over\n| aesu [addr]                step until given address\n| aesue [esil]               step until esil expression match\n| aetr[esil]                 Convert an ESIL Expression to REIL\n| aex [hex]                  evaluate opcode expression\n\n```\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Oct 18, 2018 at 21:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As you correctly mentioned, this is a pseudo C code which output a C-like code. This code can't be compiled since it's not a valid C code. This output can be shown using the pdc command.\n\nradare2 contains plugins for decompilers like Snowman and retdec. You can read more about it and my answer here. With these decompilers you have high chances to success with compiling the generated code. In general, it is not recommended to rely on decompilation to achieve 1:1 result compared to the original source code. Decompilation is very complex and has high probability to fail and miss some information.\n\nRegarding to make changes to registers -- although it is not \"outside of the process\" you can do it internally from radare by using the dr command.\n\nFor example, to change EAX to 0x20 you can simply execute:\n\n```\ndr eax=0x20\n\n```\nAnd in case you ask in general whether you can change registers by yourself, the answer is yes. Just insert ASM code to you C program:\n\n```\n__asm {\n  mov eax, 5\n  add eax, 3\n}\n\n```\n",
      "votes": "2",
      "user": "Megabeets",
      "time": "Jan 25, 2018 at 21:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "Evan Carroll",
          "text": "Well, what I'm wondering is if there is something like a hotkey that brings up the ability for me to edit registers and then sets rip to the function and runs it until it returns. Or some kind of functionality like that? This must come up often and I'm new, how do people that do this for a living execute single functions in executables or shared objects?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "use dynamic instrumentstion like intels pin etc or use emulato4s like unicorn etc",
          "time": null
        }
      ]
    },
    {
      "content": "A few of other approaches could be:\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Oct 18, 2018 at 23:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}