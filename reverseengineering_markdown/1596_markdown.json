{
  "title": "Are reverse engineering and decompilation the same?",
  "link": "https://reverseengineering.stackexchange.com/questions/1596/are-reverse-engineering-and-decompilation-the-same",
  "content": "Is reverse engineering an application the same as decompiling it?\n\nWhat is the core difference between reverse engineering an application and decompiling an application.\n\n",
  "votes": "5",
  "answers": 3,
  "views": "6k",
  "tags": [
    "decompilation"
  ],
  "user": "BlueBerry - Vignesh4303",
  "time": "Apr 5, 2013 at 14:23",
  "comments": [],
  "answers_data": [
    {
      "content": "Decompilation is just one method of reverse engineering.\n\nFrom the decompilation description:\n\nFrom Wikipedia's article on reverse engineering:\n\nSoftware can be reverse engineered and decompiled. A lot of other things (such as hardware, door locks) can be reverse engineered but not decompiled, because their software/firmware is written in low level languages without a higher-level representation, or, more radically, they don't have any firmware in the first place.\n\n",
      "votes": "11",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Reverse engineer is more general: you want to understand, in your own terms, what a binary does. E.g. this could lead to a description of what it does, maybe with a simulation of what (part of it) does. Decompile is to produce source code that (when compiled) gives you back the \"same\" binary, which is a much harder task in general.  \n\n",
      "votes": "3",
      "user": "Henno Brandsma",
      "time": "Apr 5, 2013 at 11:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Reverse Engineering is a broader term, of which, decompilation is simply one--albeit powerful--tool.  Decompilation is a form of static analysis which is investigating a program by not running it.  Don't forget that reverse engineering can also mean taking apart the device that's running a program.  Some of my favorite exploits have dealt with using the property of some kinds of memories to continue holding values after the machine has been shut off. \n\nA small, non-exhaustive list of techniques for reverse engineering:\n\nStatic Analysis Techniques\n\nString analysis -->  Using a program like \"strings\" to discover any readable text in the binary.  On non-packed files, this can often tip you off as to what platform the binary was compiled in.  If the binary was compiled with symbols, you can even get access to variable names that the author had used, which can help in subsequent analysis.  \n\nDecompilation  -->  Cruder techniques might include unix tools like objdump, cracking open the binary in a hex editor, etc.  \n\nDynamic Analysis\n\nFuzz Testing -->  Throwing multiple kinds of (possibly) invalid data to see how the application responds\n\nDebugging  -->  Coupled with Fuzz testing above will let you see how the application is actually working on the level of registers && assembly.  (If using GDB or ollydbg.)  \n\n\"Eavesdropping\" on circuits or radiation emitted by a device-->  It's exotic, but it's real.\n\nSummary\nSo decompilation is just one tool in the much broader kit of \"reverse engineering.\"  \n\n",
      "votes": "3",
      "user": "avgvstvs",
      "time": "Mar 10, 2014 at 13:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}