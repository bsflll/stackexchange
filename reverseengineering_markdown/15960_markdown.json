{
  "title": "Is there any tool to visually see program stack in linux while debugging?",
  "link": "https://reverseengineering.stackexchange.com/questions/15960/is-there-any-tool-to-visually-see-program-stack-in-linux-while-debugging",
  "content": "By stack I mean the location where local variable, return address etc are stored. Which is pointed to by the esp and ebp.\n\n",
  "votes": "8",
  "answers": 3,
  "views": "8k",
  "tags": [
    "debugging",
    "x86",
    "debuggers",
    "stack"
  ],
  "user": "pizzaEatingGuy",
  "time": "Jul 30, 2017 at 23:28",
  "comments": [
    {
      "user": "julian",
      "text": "github.com/eteran/edb-debugger/wiki/Stack-View",
      "time": null
    },
    {
      "user": "blabb",
      "text": "look for gdbinit by various authors like mammon they usually decipher and print the stack contents or simply write a script with x/x *(long *) esp , esp+4 and run it on every step,",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can easily view it using Visual Panels in radare2. Here's a teaser:\n\n\n\nFirst of all, install radare2 from git repository:\n\n```\n$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n\n```\nTo debug a program with radare2 call it with the debug flag -d:\n$ r2 -d /bin/ls\n\nNow the program is opened in debug mode.\nUse v! to show the Visual Panel modes. Now you can see the assembly at the left and the stack panel at the right. You can step into and step over using s or S accordingly. Use ? to list more commands in the Visual Panels mode.\n\nTo read more about debugging with radare2 it is recommended to read radare2 book and especially the Basic Debugger Session chapter.\n\n",
      "votes": "12",
      "user": "jonny",
      "time": "Nov 21, 2021 at 3:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ollie",
          "text": "The links at the end of your answer 404, BTW.",
          "time": null
        }
      ]
    },
    {
      "content": "You can use gdb, for example let see this simple program\n\n```\n#include <stdio.h>\n\nint main(){\n  printf(\"hello world  \n\");\n  return 0;\n}\n\n```\nCompile it\n\n```\ngcc -o simple simple.c -g\n\n```\nRun with gdb\n\n```\ngdb ./simple\n\n```\nSet a breakpoint in the main function and run\n\n```\n(gdb) b main\n(gdb) r\n\n```\nAnd now we can look at the registers contents\n\n```\n(gdb) i r \nrax            0x400526 0x400526\nrbx            0x0  0x0\nrcx            0x0  0x0\nrdx            0x7fffffffe518   0x7fffffffe518\nrsi            0x7fffffffe508   0x7fffffffe508\nrdi            0x1  0x1\nrbp            0x7fffffffe420   0x7fffffffe420\nrsp            0x7fffffffe420   0x7fffffffe420\nr8             0x4005b0 0x4005b0\nr9             0x7ffff7de78e0   0x7ffff7de78e0\nr10            0x846    0x846\nr11            0x7ffff7a2e740   0x7ffff7a2e740\nr12            0x400430 0x400430\nr13            0x7fffffffe500   0x7fffffffe500\nr14            0x0  0x0\nr15            0x0  0x0\nrip            0x40052a 0x40052a <main+4>\neflags         0x246    [ PF ZF IF ]\ncs             0x33 0x33\nss             0x2b 0x2b\nds             0x0  0x0\nes             0x0  0x0\nfs             0x0  0x0\ngs             0x0  0x0\n\n```\nDump the stack\n\n```\n    (gdb) x/20x $sp\n    0x7fffffffe420: 0x00400540  0x00000000  0xf7a2e830  0x00007fff\n    0x7fffffffe430: 0x00000000  0x00000000  0xffffe508  0x00007fff\n    0x7fffffffe440: 0xf7ffcca0  0x00000001  0x00400526  0x00000000\n    0x7fffffffe450: 0x00000000  0x00000000  0xbbbdddd1  0xdfdea768\n    0x7fffffffe460: 0x00400430  0x00000000  0xffffe500  0x00007fff\n\n```\nShow the instructions\n\n```\n(gdb)  list\n1   #include <stdio.h>\n2   \n3   int main(){\n4     printf(\"hello world  \n\");\n5     return 0;\n6   }\n7   \n8   \n\n(gdb) x/4i $pc\n    => 0x40052a <main+4>:   mov    edi,0x4005c4\n       0x40052f <main+9>:   call   0x400400 <puts@plt>\n       0x400534 <main+14>:  mov    eax,0x0\n       0x400539 <main+19>:  pop    rbp\n\n```\nAnd so on ...\n\n",
      "votes": "4",
      "user": "invictus85",
      "time": "Jul 31, 2017 at 12:13",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "please have a look to gef it is incredibly useful and continuously improved. Here some notes from the main github page:\n\n```\nwget -q -O- https://github.com/hugsy/gef/raw/master/gef.sh | sh\n\n```\n",
      "votes": "4",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Polynomial",
          "text": "Link only answers are not ideal, please expand your answer to include relevant details such as what features are offered.",
          "time": null
        }
      ]
    }
  ]
}