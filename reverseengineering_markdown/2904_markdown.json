{
  "title": "Are those code snippets and file paths in a C++ binary some sort of standard debug information?",
  "link": "https://reverseengineering.stackexchange.com/questions/2904/are-those-code-snippets-and-file-paths-in-a-c-binary-some-sort-of-standard-deb",
  "content": "This C++ binary has code snippets and paths to sourcecode files everywhere, which is probably some sort of debug info. \n\n\n\n",
  "votes": "12",
  "answers": 1,
  "views": "656",
  "tags": [
    "ida",
    "c++",
    "debugging-symbols"
  ],
  "user": "samuirai",
  "time": "Oct 9, 2013 at 19:39",
  "comments": [],
  "answers_data": [
    {
      "content": "It has the fingerprint of an assert:\n\nassert is a standard function in most (if not outright all!) standard libraries, and so if your decompiler could recognize which compiler was used, it would have assigned a standard label to sub_6E0D40. Since it didn't, you could trace that address and see if (a) it jumps immediately to an external routine such as Windows' native Assert, or (b) does what an assert does: outputting the error and immediately exiting.\n\nAddition: using the stack plus registers ecx and edx seem to indicate this sub is declared \"Microsoft __fastcall\" (wikipedia).\n\n",
      "votes": "15",
      "user": "Jongware",
      "time": "Oct 9, 2013 at 23:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jason Geffner",
          "text": "sub_6E0D40 is __fastcall, not __stdcall. See en.wikipedia.org/wiki/â€¦",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "@JasonGeffner: you're right, my (wrong) ref said ecx and edx are \"designated for use within the function\", which is quite the opposite. Edited.",
          "time": null
        }
      ]
    }
  ]
}