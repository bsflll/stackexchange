{
  "title": "How to check if an ELF file is UPX packed?",
  "link": "https://reverseengineering.stackexchange.com/questions/168/how-to-check-if-an-elf-file-is-upx-packed",
  "content": "I have an ELF file and want to know if it is UPX packed. How can I detect UPX compression in GNU/Linux?\n\n",
  "votes": "8",
  "answers": 4,
  "views": "16k",
  "tags": [
    "linux",
    "upx"
  ],
  "user": "qbi",
  "time": "Mar 22, 2013 at 23:31",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Vanilla UPX or any possible modification of UPX?",
      "time": null
    },
    {
      "user": "qbi",
      "text": "I think it is a vanilla UPX-",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Okay, assuming vanilla UPX you should be fine by detecting the strings UPX! or UPX0. As far as I remember this would also work on Windows.\n\nSo it's a shell one-liner such as:\n\n```\ngrep UPX\\! <filename>\n\n```\nor\n\n```\ngrep UPX0 <filename>\n\n```\n... assuming the GNU version of grep here.\n\nAnother method, but using the same principle:\n\n```\n$ hexdump -C <filename> |grep -C 1 UPX\n000000a0  00 00 00 00 00 00 00 00  00 00 20 00 00 00 00 00  |.......... .....|\n000000b0  c3 af e9 18 55 50 58 21  20 08 0d 16 00 00 00 00  |....UPX! .......|\n000000c0  a0 fd 16 00 a0 fd 16 00  38 02 00 00 c6 00 00 00  |........8.......|\n--\n0000cf60  fe 61 03 83 78 b5 54 03  67 8b 85 2d ca a8 12 3c  |.a..x.T.g..-...<|\n0000cf70  44 ad bc 12 ab 7e 86 55  50 58 30 0e 01 ee 7c 64  |D....~.UPX0...|d|\n0000cf80  00 f7 d1 80 4a 11 03 58  6e ac 0d 01 ff 92 83 e8  |....J..Xn.......|\n--\n000544e0  73 20 66 69 6c 65 20 69  73 20 70 61 63 6b 65 64  |s file is packed|\n000544f0  20 77 69 74 68 20 74 68  65 20 55 50 58 20 65 78  | with the UPX ex|\n00054500  65 63 75 74 61 62 6c 65  20 70 61 63 6b 65 72 20  |ecutable packer |\n00054510  68 74 74 70 3a 2f 2f 75  70 78 2e 73 66 2e 6e 65  |http://upx.sf.ne|\n00054520  74 20 24 0a 00 24 49 64  3a 20 55 50 58 20 33 2e  |t $..$Id: UPX 3.|\n00054530  30 38 20 43 6f 70 79 72  69 67 68 74 20 28 43 29  |08 Copyright (C)|\n--\n00054e40  7d 24 24 92 b7 0c 7f 12  01 a8 24 49 92 ff 00 00  |}$$.......$I....|\n00054e50  00 00 55 50 58 21 00 00  00 00 00 00 55 50 58 21  |..UPX!......UPX!|\n00054e60  0d 16 08 07 80 44 b5 80  b9 9a 8a d9 a0 08 00 00  |.....D..........|\n\n```\n",
      "votes": "11",
      "user": "0xC0000022L",
      "time": "Mar 23, 2013 at 0:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "You can also just try running upx -l on it.",
          "time": null
        }
      ]
    },
    {
      "content": "I do not recommend you to rely on the strings or section names you may find. Normally, it will indicate that the file is packed with UPX but, specially if you're analyzing malware, it may be done in order to fool you. My recommendation is to look to the entry point and find a pattern similar to this one:\n\n```\n0x00023b60 ; FUNCTION start\n0x00023b60 (01) 60                     PUSHA \n0x00023b61 (05) be00904300             MOV ESI, 0xHARDCODED_VIRTUAL_ADDRESS\n0x00023b66 (06) 8dbe0080fcff           LEA EDI, [ESI-0x38000] \n0x00023b6c (01) 57                     PUSH EDI \n0x00023b6d (02) eb0b                   JMP 0x00023b7a   ; 1 \n\n```\nBasically, find for PUSHA, MOV ESI, VIRTUAL_ADDRESS, LEA and JMP.\n\n",
      "votes": "7",
      "user": "joxeankoret",
      "time": "Mar 24, 2013 at 14:24",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In Linux/Unix variants, strings command has helped me identify some of the packers such as UPX, Aspack, NSPack, NTKrnl, PeCompact, Themida, etc., All these packers tend to leave embedded strings in the packed executable which helps identify the type of packer. Granted, the author of the elf file could introduce the very same strings intentionally to throw your analysis off-track. I would just use this as a starting point in my analysis.\n\nHere are some of the identification strings that helped me identify the packer type.\nUPX - UPX0, UPX1, UPX2\nAspack - aspack, adata\nNSPack - NSP0, NSP1, NSP2\nNTKrnl - NTKrnl Security Suite\nPECompact - PEC2, PECompact2\nThemida - Themida, aPa2Wa\n\nAlso, the file command identifies some common packer formats too.\n\nIf you suspect that the file is definitely packed with UPX, then I would recommend the suggestion from 0xC0000022L.\n\n",
      "votes": "5",
      "user": "rev",
      "time": "Mar 24, 2013 at 12:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "",
      "votes": "5",
      "user": "Ange",
      "time": "Mar 26, 2013 at 16:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "That is actually an excellent point, but it makes it pretty tedious, because even the vanilla UPX has so many versions. Still +1",
          "time": null
        },
        {
          "user": "Ange",
          "text": "you're right but it's still manageable: vanilla UPX has a lot of versions, but they have little variation in their flow, so they're not byte-identical, but the structure is really similar. typically, a decent UPX hack has some extra code between major parts, like decompression and import loading. I re-uploaded an old commented UPX IDB of mine, maybe it will help.",
          "time": null
        }
      ]
    }
  ]
}