{
  "title": "Reverse engineering Windows Defender's signature for Metasploit Framework's metsrv.dll",
  "link": "https://reverseengineering.stackexchange.com/questions/19712/reverse-engineering-windows-defenders-signature-for-metasploit-frameworks-mets",
  "content": "As a pentester for a consulting agency, it is part of our job to \"evade\" antivirus after gaining code execution on information systems. It is indeed necessary to prove exploitation of vulnerabilities, as opposed to simply reporting them. If an AV detects the tools we use, clients often will disregard the vulnerability because they are not convinced by the risk it causes.\n\nWe noticed that Windows Defender detects the metsrv.dll from Metasploit Framework in memory and kills our shell. The detection is done by mpengine.dll and is either done by some kind of criteria on the emulated binary or is a pattern of bytes in the DLL.\n\nNow that the context of the question is clear, here is the actual question: how could I proceed to pin point exactly what the signature for this file is ?\n\nBefore your answer, here are the conclusions I have already come to:\n\n\n./mpclient metsrv.x64.dll\nmain(): Scanning metsrv.x64.dll...\nEngineScanCallback(): Scanning input\nEngineScanCallback(): Threat HackTool:Win64/Meterpreter.A!dll identified.\n\n\nAs you can see, I have spent numeral hours on this. The goal is to find the exact signature, not to evade it by applying some kind of transformation on metsrv.dll. I think it is a fun reverse engineering challenge but I am stuck for now. \n\nWhat are the steps that I need to take in order to accomplish my goal?\n\nEdit: In order to clarify what I'm trying to do, here is a self-published paper from Tavis Ormandy: Sophail: A Critical Analysis of Sophos Antivirus\n\nAt page 3, he shows the signature for the file \"Attention 629\". I am trying to achieve the same result. Of course I can attack the 3k functions and work from here, but I suppose Tavis had a more intelligent approach, and that is the type of answers I'm looking for.\n\n",
  "votes": "7",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "debugging",
    "binary-analysis",
    "gdb",
    "disassemblers"
  ],
  "user": "plowsec",
  "time": "Oct 26, 2018 at 7:11",
  "comments": [
    {
      "user": "user22970",
      "text": "Wlcome to SE RE. what part of the binary are those 13K? code? data? header data?",
      "time": null
    },
    {
      "user": "plowsec",
      "text": "You're right, I forgot to mention that those 13K are the PE header and a part of the .text section.",
      "time": null
    },
    {
      "user": "julian",
      "text": "Have you looked at Alexei Bulazel's Windows Defender research?  mpengine.dll has already been analyzed to some extent. You don't have to start from scratch. His tools are here: github.com/0xAlexei/WindowsDefenderTools",
      "time": null
    },
    {
      "user": "plowsec",
      "text": "Yes I have. However Alexei only released a small part of his research, like most BlackHat talkers do. If you dig his repo, you will find that he kept the essential code and tooling as \"exercices for the reader\". Furthermore, he benefited from mpengine.dll's debugging symbols, which I couldn't get my hands on. Also, I don't want to evade the emulator, but to find the static signature / detection pattern.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "I think you’re asking a wrong question. Sure, you can spend half a year reversing the detection like Alex did. But then you’ll be back to the original problem: how to evade the detection. And in fact you can probably achieve the second without knowing the exact answer to the first (even though it could give you some hints), so I personally would start on the evasion directly.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "One approach you might consider involves compiling different versions of metsrv.dll from source and then observing which ones are detected and which ones are not. For instance:\n\nYou might also consider different compiler or build options (e.g. compile with debug symbols or different optimization level) with the original code to see if that makes the detection go away. If so, comparing the two binaries with fc or some other tool might point to the cause of detection. \n\n",
      "votes": "5",
      "user": "Lisbeth",
      "time": "Oct 25, 2018 at 9:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "julian",
          "text": "@UnitedCoconut Your objections to this answer are made on irrelevant grounds. Scalability and access to source code are clearly not an issue in this case because we are dealing with a single open-source binary. Furthermore, your concerns here were not mentioned in your question. Please refrain from being rude. Regardless, I am not sure what you are expecting. There are no magic tricks or secret techniques here - there is no way around reversing mpengine.dll.",
          "time": null
        },
        {
          "user": "Samantha",
          "text": "@United Coconut If you're not even willing to fiddle around with a few lines of source code to find an answer when source is available, what hope do you have of finding an answer when it isn't?",
          "time": null
        },
        {
          "user": "plowsec",
          "text": "@SYS_V Apologies if I sounded rude, rest assured it wasn't my intention. Scability is an issue because I would prefer having lasting results due to the amount of time required to get these results, and my insctinct tells me mpengine.dll found several signatures in metsrv.dll. Samantha: I am willing to fiddle around with the code, but in a way that renders my work reusable and long-term resilient. I will clarify my answer based on your remarks.",
          "time": null
        }
      ]
    },
    {
      "content": "I found all the signatures by performing an Out-of-Band attack on the engine and with the help of a huge set of mutated files. Lots of reverse-engineering as well. I had to triage a lot of false positives and it required manual work, so this is still not the ideal approach, but clearly more scalable than the other suggested ones.\n\nI have shared some of the findings with the rapid7 team as you can see here: https://github.com/rapid7/metasploit-framework/issues/10815\n\nBelow is copy-paste for compliance with this forum's rules:\n\nLet's say you have a FUD stager and that you encode the STAGES. Windows Defender can still detect your meterpreter session because it has a kernel-land callback to detect when images are loaded into memory (like every competitive AV). This is done with PsSetLoadImageNotifyRoutine &co.\n\nUpon these events, Windows Defender performs a scan on the memory region where the image is loaded and search for STATIC signatures (far from machine learning and behavioural analysis...)\n\nCommon detected artifacts are:\n\nSome strings have a very low score but still matter in the verdict. If you have any of the elements above you will get flagged for sure, and removing the low scores ones won't have any impact. An example of such string is \"scheduler_insert_waitable\".\n\nAll in all, \"hide yo wife hide your strings\"...\n\n",
      "votes": "3",
      "user": "plowsec",
      "time": "Dec 13, 2018 at 21:43",
      "is_accepted": true,
      "comments": []
    }
  ]
}