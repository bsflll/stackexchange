{
  "title": "Question of analysing function of DLL and write program to call it [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/12510/question-of-analysing-function-of-dll-and-write-program-to-call-it",
  "content": "I have a customized DLL in a large software. The DLL compress/decompress image files. I need to use the DLL separately to get my important images back to decompressed version. \nI can see its function in IDA pro, but I am not sure whether my finding is correct. And I don't know how to call the function properly in C#.\nThe attached pictures is my IDA pro result and my test C# program(of course the program doesn't work).\nPlease help me. \n\n\n\n\n\n",
  "votes": "2",
  "answers": 1,
  "views": "447",
  "tags": [
    "ida",
    "dll",
    "c#"
  ],
  "user": "xken629",
  "time": "9 years ago",
  "comments": [
    {
      "user": "svick",
      "text": "Why are you trying to return byte[]? The disassembled code seems to return FILE*.",
      "time": null
    },
    {
      "user": "tmr232",
      "text": "Did you try debugging the original DLL to see what are the real parameters? Also, I'd recommend first interfacing using C, to be sure the interfaces are ok before dealing with the possible marshaling issues.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "First of all, follow the advice of the two commentors and investigate on the semantics of the ArcCompress method. In case it is really returning a C file pointer, what would you do with it in C# ?? Not much, I assume. You wouldn't probably be able to close the file there.\n\nBut anyway, here are two possibilities to call your ArcCompress method from C#. As a small test, first a fictive simple ArcCompress C dll function, as a test facility to see whether the pointers are marshalled correctly. The function must be declared as extern \"C\" to avoid name mangling.\n\n```\n//Next line is from the header file\n//#define PINVOKE_DLL_API __declspec(dllexport)\nPINVOKE_DLL_API FILE* __cdecl ArcCompress(char* a1, char* a2, int a3)\n{\n    a1[2] = 0xfe;\n    FILE* f = fopen(\"D:\\\\testfile.bin\", \"wb+\");\n    fwrite(a1, a3, 1, f);\n    return f;\n}\n\n```\nThis simple function accepts your byte arrays, modifies one byte and writes it into a file, returning the file pointer of the open file.\nAnd here come two possibilities to call this function from C# (In my example, the dll is named \"pinvoke_dll.dll\" instead of \"Arc.dll\"):\n\n\n    public unsafe partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        [DllImport(\"pinvoke_dll.dll\", CallingConvention = CallingConvention.Cdecl)]\n        public static extern IntPtr ArcCompress(byte* p1, byte* p2, Int32 c);\n        byte[] a = new byte[10]{1,2,3,4,5,6,7,8,9,0};\n        byte[] b = new byte[10]{0,9,8,7,6,5,4,3,2,1};\n        private void button1_Click(object sender, EventArgs e)\n        {\n            fixed (byte* p1 = &a[0], p2 = &b[0])\n            {\n                IntPtr f = ArcCompress(p1, p2, a.Length);\n            }\n        }\n    }\n\nBTW, in this way you may apply pointer arithmetics in C# just like in C. You must have in mind that you are in an unsafe context, just like in C or C++.\n\nHave fun!\n\n",
      "votes": "2",
      "user": "josh",
      "time": "Apr 24, 2016 at 13:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "xken629",
          "text": "Thank you for your answer. My problem is solved. The function actually takes two file name strings and returns an int  The correct function call is in c# is   [DllImport(\"Arc.dll\", CallingConvention = CallingConvention.Cdecl, EntryPoint = \"ArcCompress\")]         public static extern int ArcCompress(byte[] infile, byte[] outfile, ref int method);",
          "time": null
        }
      ]
    }
  ]
}