{
  "title": "How to print eax value with Radare2?",
  "link": "https://reverseengineering.stackexchange.com/questions/20762/how-to-print-eax-value-with-radare2",
  "content": "I am solving a crack me challenge but I am stuck. The challenge executes several jne tests. The first test is the simpliest but I don't arrive to print the eax value to know the content of cmp instruction. According to this block of code :\n\n```\n|    ; DATA XREF from sym.main (0x804848e)\n|    0x08048497      b88a55ea8b     mov eax, 0x8bea558a\n|    0x0804849c      45             inc ebp\n|    0x0804849d      f4             hlt\n|    0x0804849e      83c004         add eax, 4\n|    0x080484a1      8a00           mov al, byte [eax]\n|    0x080484a3      38c2           cmp dl, al\n|,=< 0x080484a5      753d           jne 0x80484e4\n\n```\nHow can I print the eax value to understand what are compared in the instruction ?\n\n0x080484a1      8a00           mov al, byte [eax]\n\nAccording to this question, I tried the 0x080484a1 but when I enter the command pxr 1 @ eax+0x4, nothing appears. If I enter the command pxr @ eax+0x4, this code appears :\n\n```\n0x080c288c  0x6f6c6165  ealo ascii\n0x080c2890  0x00796768  hgy. ascii\n\n```\nThe ascii printed is linked with the string compared ksuiealohgy.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "debugging",
    "radare2",
    "debuggers"
  ],
  "user": "Anonymous",
  "time": "Mar 3, 2019 at 20:01",
  "comments": [
    {
      "user": "blabb",
      "text": "does the execution reach that place ? there is a hlt instruction before i dont think your execution will reach this point if the flow was linear en.wikipedia.org/wiki/HLT_(x86_instruction)",
      "time": null
    },
    {
      "user": "Anonymous",
      "text": "Yes it reach that place.The problem is solved, thanks for your contribution.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Not sure why you used pxr as you could get the output with px 1 @ eax+0x4. But another options would be that you could run this opcode and then read the register value of al to get that. But in order to do that you need to use debugger commands instead (of course you need to be in debugging mode):\n\n```\n[0x7f5953803e90]> dr?\nUsage: dr   Registers commands\n| dr                     Show 'gpr' registers\n<snip>\n\n```\nSo to get the value of al execute during debugging session:\n\n```\n[0x7f5953803e90]> dr al\n0x00000090\n\n```\n",
      "votes": "3",
      "user": "Paweł Łukasik",
      "time": "Mar 3, 2019 at 21:05",
      "is_accepted": true,
      "comments": []
    }
  ]
}