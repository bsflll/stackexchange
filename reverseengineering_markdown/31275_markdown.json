{
  "title": "How can I quickly tell which ARM Thumb version a particular piece of code is using?",
  "link": "https://reverseengineering.stackexchange.com/questions/31275/how-can-i-quickly-tell-which-arm-thumb-version-a-particular-piece-of-code-is-usi",
  "content": "I'm working with an ARM processor: an STM32F407VGT6 board, which IIUC powers a 32-bit Arm® Cortex®-M4. I need to inspect the binary weight of some instruction, so I used objdump like this:\n\n```\narm-none-eabi-objdump -b binary --adjust-vma=0x08000000 --start-address=0x08000002 \\\n  -marm --disassembler-options=force-thumb -D binary_program.bin > /tmp/binary_program-bin.s\n\n```\nFirst, I tested a loop of instructions like this:\n\n```\nadds    r0, r0, #255\n\n```\nand I got in the .s file\n\n```\n 80002e4:   30ff        adds    r0, #255    ; 0xff\n\n```\nAfter a long search in the ARM manual (and I hope I found the correct one), I could map that binary as:\n\n```\ninstruction: 001_10_000_11111111\nbit mask:    111_11_198_76543210\n             543_21_0\n\n```\nwhere\n\nThis, IIUC, is Thumb-2. So far so good, but the problem is that other instructions, which are not representable with Thumb-2, get mapped to Thumb-3, like\n\n```\nadds    r0, r0, #256\n\n```\nwhich becomes\n\n```\n 80002e4:   f510 7080   adds.w  r0, r0, #256    ; 0x100\n\n```\nObviously this is no more T2, and the bit encoding should be something like\n\n```\n      i 0 op1  S Rn   0 imm3 Rd   imm8\n11110_1_0_1000_1_0000_0_111__0000_10000000\n33222_2_2_2222_2_1111_1_111__1198_76543210\n10987_6_5_4321_0_9876_5_432__10\n\n```\nas reported at \"Data-processing (modified immediate)\", pages F3-7310 and F3-7311. This lead me to pages F5-7452 to 55, \"ADD, ADDS (immediate)\".\nSearching a lot, I found it should be T3: the mnemonic matches (adds.w). This would mean the processor expands the bits 11:0 like this:\n\nThe point is, since I'm using the same compiler for both the codes, and they end up to use different ISAs to translate the instructions, how can I tell which one is which, without dwelling the depths of the ARM manual every time?\n\nThanks!\n\n",
  "votes": "3",
  "answers": 0,
  "views": "81",
  "tags": [
    "disassembly",
    "binary-analysis",
    "arm",
    "binary-format",
    "thumb2"
  ],
  "user": "Alessandro Bertulli",
  "time": "Dec 14, 2022 at 16:19",
  "comments": [],
  "answers_data": []
}