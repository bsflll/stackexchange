{
  "title": "What do these 2 Ghidra warnings mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/25917/what-do-these-2-ghidra-warnings-mean",
  "content": "When disassembling ARM binaries in Ghidra, I often see these warnings:\n\n```\n                /* WARNING: Could not recover jumptable at 0x0747c198. Too many branches */\n                /* WARNING: Treating indirect jump as call */\n\n```\nWhat do they mean? What's the underlying architectural concept I should learn about to understand the cause of these issues?\n\nHere's an example from a real program, seen in Ghidra's disassembly:\n\n```\n    if (param_2 == 0x78) {\n                /* WARNING: Could not recover jumptable at 0x0747c198. Too many branches */\n                /* WARNING: Treating indirect jump as call */\n      uVar3 = (*DAT_0747c19c)();\n      return uVar3;\n    }\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "7k",
  "tags": [
    "ida",
    "disassembly",
    "arm",
    "ghidra",
    "exploit"
  ],
  "user": "adg",
  "time": "Sep 17, 2020 at 9:27",
  "comments": [],
  "answers_data": [
    {
      "content": "From Ghidra.re:\n\nFor your example, this is saying there may a jump table (which is really just an array of pointers), but the decompiler can't figure out what the different possibilities for param2 are.\n\nGhidra recommends:\n\n",
      "votes": "7",
      "user": "Shane Reilly",
      "time": "Sep 17, 2020 at 12:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Phil Strenski",
          "text": "I tried that but makes no difference. In my case, the template for at least some switches is (segmented Intel code): switch_table: array of (16b value, 16b code offset) switch_code: MOV SI,(#cases-1)*4 next_case: CMP AX, word ptr CS:[SI+switch_table] JNZ no_match JMP word ptr CS:[SI+switch_table+2] no_match: SUB SI,4 JNS next_case I selected the JMP instruction in disassembler, added the switch addresses manually with RE, ran the SwitchOverride.java code, recompiled the function. No difference. Well one difference, I do see the switch addresses in the function graph, so it does seem to have pi",
          "time": null
        }
      ]
    }
  ]
}