{
  "title": "Why darwin kernel crashes on function call via lldb while debugging the process?",
  "link": "https://reverseengineering.stackexchange.com/questions/9560/why-darwin-kernel-crashes-on-function-call-via-lldb-while-debugging-the-process",
  "content": "I wanted to debug the hanging ruby process, but instead my kernel crashes each time when I'm doing the following steps:\n\nThis happened already twice.\n\nWhat was the reason for a kernel crash? Is it a lldb/kernel bug, or expected behaviour by doing something wrong? If so, what should be the correct safer approach of calling rb_backtrace() on different threads (without crashing the kernel)?\n\nFor clarification, ruby script (vagrant) was run without sudo, the same as lldb.\n\nI'm using lldb-320.4.160.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "591",
  "tags": [
    "debugging",
    "osx",
    "kernel-mode",
    "callstack",
    "lldb"
  ],
  "user": "kenorb",
  "time": "Aug 5, 2015 at 22:41",
  "comments": [
    {
      "user": "Div",
      "text": "If you are running kdumpd on your main machine, then you can catch the panic dumps that way if you are but you also need to set the nvram properly as well. So on the remote machine you need to have setup ahead of time in the nvram: boot-args=-v debug=0xd44 _panicd_ip=127.55.56.29 replace 127.55.56.59 with your IP address. See Apple document describing how to do it here. Is there a reason why you can't just run lldb directly on your debug machine? If you could you could just do a bt directly on the other thread. If",
      "time": null
    }
  ],
  "answers_data": []
}