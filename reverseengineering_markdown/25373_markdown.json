{
  "title": "WinHex : There's a data that does not belong to any module",
  "link": "https://reverseengineering.stackexchange.com/questions/25373/winhex-theres-a-data-that-does-not-belong-to-any-module",
  "content": "I read my process memory with WinHex in order to remove some sensitive text which may running my app into crack/hack.(license data).\n\nNow , when i open the process Entire memory with in WinHex , i can easily search and find those sensitive data , but when i open each sub-module memory one by one , i can not find them !!\n\nHow this is possible ?\n\nIs there any floating memory in each process which does not belong to process itself and it's sub-modules ?\n\nUpdate :\nThe strange thing is each time this data appear on a completely different offset !\n\nI appreciate for your answer.\nThank you.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "62",
  "tags": [
    "memory",
    "dumping",
    "memory-dump",
    "process"
  ],
  "user": "Shayan Firoozi",
  "time": "Jun 23, 2020 at 5:48",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "What do you mean by submodules? The loaded DLLs? Yes, there is indeed memory that isn't typically part of modules. It's called heap and stack. And even inside the address range of modules you'll find cavities which can be (ab)used to store data. A technique that was at some point in fashion for VXers/malware authors.",
      "time": null
    },
    {
      "user": "Shayan Firoozi",
      "text": "@0xC0000022L :  Thank you for your answer , so it seems there's no way to have a fixed offset of that data in order to remove it , am i right ?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Generally correct. But that wasn't even part of your original question ...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can use VMMap by SysInternals to inspect the memory layout of the process and determine what exactly the mysterious memory is.\n\nIf it is heap memory, most likely there is a pointer to it somewhere in the process' data section, so you may be able to track it from there. Note that there can be multiple levels of indirections for a specific memory block. You may be able to use Cheat Engine to discover a pointer chain to the area of interest.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Jun 24, 2020 at 7:44",
      "is_accepted": true,
      "comments": []
    }
  ]
}