{
  "title": "Reversing apps with statically linked libraries",
  "link": "https://reverseengineering.stackexchange.com/questions/11268/reversing-apps-with-statically-linked-libraries",
  "content": "another newbie question from me. \n\nAssuming I know that the application I'm reversing uses certain third party libraries that are publicly available, but it links them statically, is there any easy way to make the debugger recognize the respective function calls in the app? What I want to avoid is to waste a lot of time on analyzing library functions which I know from the start I'm not interested in (such as MFC libraries). \n\nIf this is possible, an instruction how to do it in Ollydbg would be great though I'm grateful for any tips. \n\n",
  "votes": "1",
  "answers": 0,
  "views": "293",
  "tags": [
    "disassembly",
    "ollydbg",
    "debugging"
  ],
  "user": "vic",
  "time": "Apr 28, 2017 at 12:45",
  "comments": [
    {
      "user": "0xec",
      "text": "You can export a MAP file from IDA and load it in OllyDbg.",
      "time": null
    },
    {
      "user": "vic",
      "text": "If you or someone else has the time and patience, I'd really appreciate if you could (as an answer) explain how to do this - like I said, I'm new with all this. So, I have access to source header and lib files, and also the dlls of the component. How do I go from here (i.e. how do I create the MAP file, then load it into and use it in OllyDbg)?",
      "time": null
    },
    {
      "user": "Nightforce2",
      "text": "Try using MapConv plugin to import the map files. You can get it here: MapConv 1.40",
      "time": null
    }
  ],
  "answers_data": []
}