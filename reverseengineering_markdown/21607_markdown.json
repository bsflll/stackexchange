{
  "title": "Determining the hash algorithm used [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/21607/determining-the-hash-algorithm-used",
  "content": "I have some test data:\n\n```\nText: pass1234\nSalt: 33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\nHash: 61477724c136fb285918114792685a4d\n\n```\n```\nText: test1234\nSalt: 33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\nHash: 00281231e8928af48c34ca03e09eebe5\n\n```\n```\nText: simple123\nSalt: b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\nHash: 0c9e564acfe36f51b54b5050741f351c\n\n```\n```\nTest: pass1234\nSalt: b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\nHash: 0fc692cc78a51a9650c896c735a1b577\n\n```\nThey look like MD5 hashes but I could not reproduce them. Does anyone have any idea how to get the algorithm to reproduce these hashes? \n\n",
  "votes": "-1",
  "answers": 1,
  "views": "729",
  "tags": [
    "decryption",
    "encryption",
    "cryptography",
    "cryptanalysis"
  ],
  "user": "user11703733",
  "time": "5 years ago",
  "comments": [
    {
      "user": "perror",
      "text": "Have you access to the asm that produce it ? If not, this is almost impossible to guess what is the hash function.",
      "time": null
    },
    {
      "user": "camp0",
      "text": "you can try sha-256, sha-1, blake, etc...you can do a python script that do that easly",
      "time": null
    },
    {
      "user": "julian",
      "text": "as 0xC0000022L's post below indicates, with the details currently provided, this is less reverse engineering and more an exercise in brute-forcing. Please explain where you got this data from. There isn't anything here that has to do with reverse engineering per-se. Hash cracking and cryptanalysis with insufficient data are not on topic.",
      "time": null
    },
    {
      "user": "user11703733",
      "text": "@perror [link] (stackoverflow.com/questions/56880235/…) is what I'm trying to do. I do have access to the binary but I'm not so convenient with asm nor OllyDbg (or IDA Pro)",
      "time": null
    },
    {
      "user": "user11703733",
      "text": "Thanks @0xC0000022L for the the answer with a nice script. It really helps me brute force these hashes",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Lots of possibilities, for all we know there's a chance that some \"other\" salt is used or that either the password or the salt or both are preprocessed in some way. Additionally there could be multiple rounds of hashing one of the combinations ...\n\nSo this question literally requires looking at the code and therefore reverse code engineering to give you more than some wild guess.\n\nI tried the most obvious cases and there was no match (tested with DSA, DSA-SHA, MD4, MD5, RIPEMD160, SHA, SHA1, SHA224, SHA256, SHA384, SHA512, dsaEncryption, dsaWithSHA, ecdsa-with-SHA1, md4, md5, ripemd160, sha, sha1, sha224, sha256, sha384, sha512, whirlpool):\n\n```\n#!/usr/bin/env python3\nfrom hashlib import new as hashnew, algorithms_available\n\n# Several possibilities\n# - assuming the password is ASCII and the calculated hash is the hex\n#   representation of the digest (or parts thereof)\n#   1. the salt could be used as ASCII string\n#   2. as array of bytes of 32 bytes size\n#   3. some other nondescript way\n# - Salt could be appended or prepended\n# - Output could be part of the hex digest of some hash algo that yields\n#   larger digests than MD5\nDATA = [\n    (\"pass1234\", \"33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\", \"61477724c136fb285918114792685a4d\"),\n    (\"test1234\", \"33b9d87b83c097ce3ea6e6f84a298f839aafc6d7aa23d909a43ac94bdee35ddf\", \"00281231e8928af48c34ca03e09eebe5\"),\n    (\"simple123\", \"b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\", \"0c9e564acfe36f51b54b5050741f351c\"),\n    (\"pass1234\", \"b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3\", \"0fc692cc78a51a9650c896c735a1b577\"),\n    ]\n\nresults = {}\nprint(\"Testing\", \", \".join(sorted(algorithms_available)))\n# Go through supported hash algos\nfor algo in sorted(algorithms_available):\n    print(algo)\n    for password, salt, expected in DATA:\n        cases = []\n        # password + salt\n        cases.append(password.encode('ascii') + salt.encode('ascii'))\n        # salt + password\n        cases.append(salt.encode('ascii') + password.encode('ascii'))\n        # password + bytes(salt)\n        cases.append(password.encode('ascii') + bytes.fromhex(salt))\n        # bytes(salt) + password\n        cases.append(bytes.fromhex(salt) + password.encode('ascii'))\n        reslist = []\n        for case in cases:\n            h = hashnew(algo, case)\n            hexd = h.hexdigest()\n            if expected.lower() in hexd.lower():\n                highlight = hexd.lower().replace(expected.lower(), \"[%s]\" % (expected.lower()))\n                print(\"Match for algorithm %s: %s\" % (algo, highlight))\n\n```\nAdmittedly a naïve approach, but as you can see just from this, there's a multitude of possibilities in which the password and salt can be represented and combined and there are a multitude of hash algorithms to test.\n\nGiven the above did not include BLAKE2, I'd strongly recommend testing that one as well.\n\nAdditionally I'd like to draw your attention to key derivation algorithms like those supported in hashlib: pbkdf2_hmac and scrypt.\n\nAnyway, short of brute-forcing (my above attempt and variations on that) you won't get around looking at the actual code. For starters you may be able to figure out the algorithm used by certain signatures. But moreover you may find out ways by which the password, the salt or both are mutated prior to the hashing.\n\nAnd considering key derivation algorithms the fact that you can run them an arbitrary number of iterations provides for another \"dimension\" in the permutations possible ...\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Jul 4, 2019 at 16:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}