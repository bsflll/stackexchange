{
  "title": "Binary encryption",
  "link": "https://reverseengineering.stackexchange.com/questions/17530/binary-encryption",
  "content": "I'd like to ask your help to understand the algorithm used to encrypt these hex/bin firmware (for an ARM-Cortex M4 microcontroller).\n\nIn the tar file above you can find different firmware versions. \nIn particular, the V16 version has been released encrypted, plain and also an encrypted TE version (I don't know what does TE mean).\n\nIt has been a while since I started to analyze these files (I also asked another question here in the past) but, so far, I didn't find the solution.\nI tried to invert the bytes, swap the nibbles, xor but no luck.\n\nAs you can see, the encrypted version is 276 bytes longer than the plain. I expect that in those bytes are defined the header/footer and the key sections used by the bootloader to decrypt the binary before flashing.\n\nPersonally I think that a simple algorithm has been used (something like Salsa20 or ChaCha), nothing complicated (SHA, etc.).\nThank you.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "arm",
    "encryption",
    "binary"
  ],
  "user": "Avok78",
  "time": "Feb 24, 2018 at 12:00",
  "comments": [
    {
      "user": "hola",
      "text": "Do you have any progress in your research that you can share with us?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In fact, I doubt that they use Salsa20 on this firmware file... Let me just first explain what is my method to investigate such cases. For the rest, I will mainly use the binwalk tool.\n\nNow, lets go back to you firmware. I took ZPK0J020_V16_20161206_AP-D7D1.hex  and ZPK0J020_V17_20170310_AP-1E6A.hex. And, I applied the method I described previously. \n\nFirst, the difference between the two versions of the firmware is not against the assumption of Salsa20, but the entropy is way too low to be a strong encryption as Salsa20.\n\n\n\nMy conclusion is that the encryption of these firmware files is probably something weak. I would go for a xor-encryption or something similar. But, I did not investigate further as I think I disqualified Salsa20 and answered to your question. It is up to you to dig a bit now!\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Feb 24, 2018 at 21:38",
      "is_accepted": true,
      "comments": [
        {
          "user": "Avok78",
          "text": "Hi, thank you very much for your response and help. I really appreciate it. I imagined that a weak (probably \"custom made\") algorithm was used, but it has been almost 3 months that I'm struggling with it and no results so far :-( I also noticed that few 0x00 and 0xFF bytes are repeated so, do you think that a \"pure\" xor-encryption has been used? I keep continuing with my research :-) Thanks a lot.",
          "time": null
        },
        {
          "user": "perror",
          "text": "I guess that the next step is to perform a frequency analysis on bytes (according to the differences between two versions, block size is most likely a byte). And, if this is a simple xor-encryption, a Kasiski examination could help to discover the length of the Xor mask. But, if you want to know more about cryptanalysis of xor encryption, this should be another question. Also, don’t forget to mark this question as “answered” if you think it is solved.",
          "time": null
        },
        {
          "user": "Avok78",
          "text": "Hi perror, I marked the question as \"answered\", however my question was a request for help to understand the algorithm used.  Anyway I will proceed with my research and I will try with the kasiski examination and the index of coincidence techniques. Thanks.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Well, I feel like I gave you an answer to what kind of \"encryption\" is used here. This cannot be a strong one, and the xor-cipher is the most usual one in these cases. If you want a complete cryptanalysis of the files, it will require more work and I think this is out of the scope of this question. As a hint for more investigation, you may refer to this question.",
          "time": null
        },
        {
          "user": "Avok78",
          "text": "Hi Perror, yes you gave me an answer and I really appreciated that. If you have time to help me more for this task I will appreciate it. It has been a while (almost 3 months) that I'm trying to understand the algorithm that has been used, but no luck so far.  If you are interested on this project, [here] (219.84.35.58/brookhex) you can find more firmware released by the same company.  I'm pretty sure that they use the same algorithm for each product.  Anyway, thank you very much for your help and time. Regards.",
          "time": null
        }
      ]
    }
  ]
}