{
  "title": "Elf x86_64 adding function",
  "link": "https://reverseengineering.stackexchange.com/questions/21910/elf-x86-64-adding-function",
  "content": "I'm trying to see if I can append function code in the .text section of an ELF  while still maintaining the execution flow of the original ELF. Ideally, I want to call the new function but that's it's own mountain to climb. I'm more concerned with just adding the code. Is this realistic? Or am I way over my head? I've been able to add the code by simply overwriting bytes. However, I would like to extend the .text section and insert it. If there's a better method of inserting new functionality into an ELF I'm all ears. But any guidance is helpful.\n\n",
  "votes": "7",
  "answers": 3,
  "views": "3k",
  "tags": [
    "c",
    "elf",
    "x86-64"
  ],
  "user": "stayge",
  "time": "Aug 19, 2019 at 23:02",
  "comments": [
    {
      "user": "julian",
      "text": "There are well-known techniques that can be used to add code to an ELF binary. What is your goal? Is the binary statically linked? Is the section header table present in the binary?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. Adding to what @julian wrote: what has python to do with it?",
      "time": null
    },
    {
      "user": "stayge",
      "text": "it does have the standard dynamically linked libraries but I want to add a user defined function to the ELF. The section header table is present",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is possible to do what you want. There are some difficulties you may encounter though. I'll show you a short instruction how it can be done in several different cases.\n\n",
      "votes": "7",
      "user": "bart1e",
      "time": "Aug 17, 2019 at 9:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "stayge",
          "text": "Thank you! I've recently tried the obj copy - I now see that I have .rodata references in the .text section which explains quite a bit. Now going through and updating those will definitely be the next challenge. I appreciate it!",
          "time": null
        }
      ]
    },
    {
      "content": "Techniques for adding arbitrary code to ELF files were pioneered by Linux virus writers beginning all the way back in the 1990s. In comparison with the methods they developed, as well as with more modern techniques, taking the objcopy route seems rather crude. There is no need to re-invent the wheel.\n\nMore modern approaches to manipulating ELF binary runtime behavior have emerged since then, including a variety of injection techniques and instrumentation frameworks. \n\nFor the purposes of this question we can divide approaches to modifying binary functionality into 2 approaches: \n\nText Segment Padding Infection\n\nThe classic ELF text segment (not section) padding infection method seems to be the most closely related to what you are currently attempting.\n\nThe algorithm to accomplish this is as follows:\n\nIn addition to an explanation of the technique as well as the source code for a virus that implements this technique included with the 1998 article [1], there is a 2016 (it still works, after all these years) tutorial on ELF segment padding infection available at 0x00sec called ELFun File Injector.\n\nBesides the text segment infection approach, there is also data segment infection, which is quite similar. One can also add an additional segment if they so choose.\n\nPLT/GOT Infection\n\nFirst detailed in a Phrack article back in 2000 2, this method involves patching the PLT/GOT to point to code inside the binary, which has been inserted via an infection method rather than pointing at code in a shared library dynamically linked to the binary:\n\nThe easiest way to implement this method seems to be using the LIEF instrumentation framework. A tutorial for doing this is provided in the LIEF documentation under the title Infecting the plt/got. Note that in the tutorial the GOT is patched instead of the PLT, and code is added to the file by creating a new segment (one of the aforementioned infection techniques). \n\nThere are additional techiniques besides this for modifying the file directly, but segment padding infection and PLT/GOT infection seem to be the most straightforward.\n\nSince DLL injection and runtime process manipulation are less directly related to your current task, I won't go into much detail.\n\nSome methods are more obscure, such as the DT_NEEDED infection detailed in The Cerberus ELF Interface and \"subversive dynamic linking\" described in Cheating the ELF\n\n",
      "votes": "3",
      "user": "julian",
      "time": "Aug 22, 2019 at 6:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "stayge",
          "text": "While I was thinking about that route - I don't want my code to be executed first. I want to modify an original function call in main to call my code. While I change the entry point to my code would that not execute my code immediately?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@stayge You have been presented with many routes. I want to modify an original function call in main to call my code. <- Is a shared library function being called? Is patching the CALL address to jump to your inserted code sufficient? Why are you operating under this constraint? Please clearly describe the problem.",
          "time": null
        },
        {
          "user": "stayge",
          "text": "A user-defined function is being called. I have tried putting my code into a .so and using LD_PRELOAD but it only overrides library functions. I would like to patch the call  so it can jump to my function and then return back to main and continue executing. It's just a matter of where to put the code without having to rework the whole ELF",
          "time": null
        },
        {
          "user": "julian",
          "text": "@stayge Yes, this approach to using DLL injection will not work, since you want to interpose code resident within the binary itself rather than code in a DLL. As far as I know, you can use the text segment infection method without patching the entry point; the CALL address of the function can be patched instead to point to your code in the text segment. If you are calling a function via this kind of detour (same with the objcopy route), stack alignment may be an issue.",
          "time": null
        }
      ]
    },
    {
      "content": "I wrote a small utility back in high school to do something similar:\nhttps://github.com/jdefrancesco/elfy\n\nYou inject the .note section with the payload and it will modify the ELF entry pointing to the .note section. Afterwards it will jump back to the original entry point.\n\n",
      "votes": "0",
      "user": "in70x",
      "time": "May 5, 2020 at 12:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}