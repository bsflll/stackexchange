{
  "title": "How to find the first function that sets the value currently stored in a given register?",
  "link": "https://reverseengineering.stackexchange.com/questions/30403/how-to-find-the-first-function-that-sets-the-value-currently-stored-in-a-given-r",
  "content": "I'm interested in a general approach to the following problem:\nThe function F_Init allocates a byte buffer called Buffer with a size called BufSize. The Buffer is allocated with each frame/iteration resulting in different values for Buffer and BufSize.\n\nThere are approximately 50 different functions that pass both values as parameters in an arbitrary order, eg. assuming this is a x64 calling convention (left to right -> rcx, rdx, r8, r9), while  Buffer is stored in r8 register, sometimes other functions pass it in rdx register.\n\nLet's say I stopped the execution of the program inside 35th function that processes the Buffer how can I quickly figure out where is F_Init function? So far I've been manually tracing back the values by looking at the mov instructions, eg. currently Buffer pointer value is in rdx, but there was a mov rdx, r9, so the buffer was previously in r9 register and so on. Doing it manually although a great fun, it takes a lot of time so I'd like to know how to automate this process.\n\nSecond question, if the allocation and manipulation happens in a one giant function, how to quickly locate the call from which those values originate? The question also applies to other data types like integers, eg. some function calculated the number of files in a directory and returning 5.\nAt some point in a different place in the code I see the value 5 in register r8 and I would like to know where is the first function that created the value 5?\n\nHow to do it in x64dbg?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "185",
  "tags": [
    "x64dbg",
    "dynamic-analysis"
  ],
  "user": "01101111",
  "time": "May 27, 2022 at 13:13",
  "comments": [],
  "answers_data": [
    {
      "content": "I don't know if you are using window or linux but the general solution i can think of is this.\n\nEvery new allocate buffer must call through function such as VirtualAlloc or NtAllocateVirtualMemory (low level) or malloc for linux.\n\nHook the allocate function (for window it is VirtualAlloc, malloc for linux) and get the following info:\n\nAnd store to a struct and avl tree (you can check the first 10 min of this video for how the structure look like: https://www.youtube.com/watch?v=icJ8HV22cbc&ab_channel=BlackHat) or you can just log it.\n\nSo now you can find the f_init by searching through the log manually.\n\nIf you want to automate the process then you must build a balance tree like the video i provided above and search in it.\n\nFor you second question it is very hard and i don't think x64dbg can do it, because it require backward slicing. You should ask a new question for that but the answer may not deal with x64dbg.\n\n",
      "votes": "1",
      "user": "KishouYusa",
      "time": "May 15, 2022 at 10:42",
      "is_accepted": true,
      "comments": []
    }
  ]
}