{
  "title": "Logging lpRect and uFormat from DrawTextA",
  "link": "https://reverseengineering.stackexchange.com/questions/2668/logging-lprect-and-uformat-from-drawtexta",
  "content": "Using APIMonitor from Rohitab I found that DrawTextA has some additional arguments I would like to log using Python and Pydbg (I'm currently logging lpchText, se below).\n\n\n\nMy current hooking code looks something like this:\n\n```\ndef DrawTextHook(dbg, args):\n   # Log lpchText\n   text = dbg.get_ascii_string(incremental_read(dbg, args[1], 255))\n\n```\nThe argument I would like to log is lpRect and uFormat. How do I extend my currrent code to log these two arguments?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "228",
  "tags": [
    "python"
  ],
  "user": "Jonas Lejon",
  "time": "Aug 21, 2013 at 19:50",
  "comments": [],
  "answers_data": [
    {
      "content": "if you really ask me i will say dump pydbg and start using logged ollydbg conditional break points it will give you the function's arguments cleanly formatted into its components or even windbg\n\nyou asked pydbg here is how you can do it in pydbg\n\n```\nfrom pydbg import *\nfrom pydbg.defines import *\n\ndef handler_breakpoint (pydbg):   \n   if pydbg.first_breakpoint:\n    return DBG_CONTINUE\n\n   arg1 =   dbg.get_arg(1,dbg.context)\n   arg2 =   dbg.get_arg(2,dbg.context)\n   arg3 =   dbg.get_arg(3,dbg.context)\n   arg4 =   dbg.get_arg(4,dbg.context)\n   arg5 =   dbg.get_arg(5,dbg.context)\n   text =   dbg.read_process_memory(arg2,0x20)\n   lprect = dbg.read_process_memory(arg4,0x10)\n\n   print \"hDc = %08x  \nText = %08x %s  \nCount = %08x  \nlpRect = %08x %s  \nuFormat = %08x  \n\" % (arg1,arg2,pydbg.get_unicode_string(text),arg3,arg4,lprect,arg5)\n   return DBG_CONTINUE\n\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.attach(2708)\nDrawTextW = dbg.func_resolve(\"user32\", \"DrawTextW\")\ndbg.bp_set(DrawTextW)\npydbg.debug_event_loop(dbg)\n\n```\nand an output for calc.exe (uses DrawTextW not A)\n\nC:\\Python27\\Lib\\site-packages>python calc.py\n\n```\nhDc = 48010f0d\nText = 000b85fe Sta\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 4b010f0d\nText = 000b85fe Sta\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 6c010ea9\nText = 000b8668 tan\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 79010ea9\nText = 000b8668 tan\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 7c010f0d\nText = 000b8688 x^2\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = 8e010f0d\nText = 000b8688 x^2\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = ab010ea9\nText = 000b869e 1/x\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\nhDc = bf010ea9\nText = 000b869e 1/x\nCount = ffffffff\nlpRect = 0007fa7c         $   ↔\nuFormat = 00000025\n\n```\nif you want to change to ollydbg \n\nc:> ollydbg.exe calc.exe\n\n```\nalt+e -> select calc.exe -> ctrl+N ->Start typing Draw->select and rightclick ->follow import in disassembler ->shift + f4-> enable radio log function arguments to always \nleave all else to default and hit ok and f9 to run the exe\n\n```\nollydbg will log all the arguments (you can selectively log only args you want also)\nlike  log only if hDc = XXX and Text == X^2 and Uformat != y \n\na sample output from ollydbg running calc.ex and loggging function arguments to DrawTextW\n\n```\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = DA011041\n             Text = \"Sta\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = DB010B34\n             Text = \"Ave\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n             hDC = A0010D69\n             Text = \"Sum\"\n             Count = FFFFFFFF (-1.)\n             pRect = 0007FA28 {0.,0.,36.,29.}\n             Flags = DT_CENTER|DT_VCENTER|DT_SINGLELINE\n7E42D7E2   CALL to DrawTextW from calc.010061F1\n\n```\nWith windbg do this \n\n```\nbp USER32!DrawTextW \".printf \\\"Text=%mu\\  \nRect.L=%x\\  \nRect.R=%x\\  \n\\\",poi(esp+8),poi(poi(esp+10)+8),poi(poi(esp+10)+c);gc\"\n\n```\nwindbg conditinal bp output\n\n```\n0:001> g\nText=F-E\nRect.L=24\nRect.R=1d\nText=dms\nRect.L=24\nRect.R=1d\nText=sin\nRect.L=24\nRect.R=1d\nText=cos\nRect.L=24\nRect.R=1d\nText=tan\nRect.L=24\nRect.R=1d\nText=(\nRect.L=24\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Aug 22, 2013 at 8:08",
      "is_accepted": true,
      "comments": []
    }
  ]
}