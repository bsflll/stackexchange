{
  "title": "Find MFC class memory layout automatically in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/19406/find-mfc-class-memory-layout-automatically-in-ida",
  "content": "I was using IDA to reverse engineer an DLL which uses MFC100.\n\nI was reading Reversing an MFC application: How to find class memory layouts? and https://stackoverflow.com/questions/13126694/idapro-loading-c-header-files-into-idapro-for-structures , where two answers suggest going to the correct header file and copy&paste the struct defintion (which is hard, because C++ has templates and vftable. Also, nested classes...), and one answer suggests making a test program and use IDA to decompile it to get the struct declaration, which is not possible because programs don't (appear to) store struct declaration. (see below)\n\nConsider a small example. (with CStdioFile and some MFC thing)\n\n```\n#include <afxwin.h>\n\nclass HelloApplication : public CWinApp\n{\npublic:\n    virtual BOOL InitInstance();\n};\n\nHelloApplication HelloApp;\n\nclass HelloWindow : public CFrameWnd\n{       \n    CButton* m_pHelloButton;\npublic: \n    HelloWindow();\n};\n\n\nBOOL HelloApplication::InitInstance()\n{       \n    m_pMainWnd = new HelloWindow(); \n    m_pMainWnd->ShowWindow(m_nCmdShow); \n    m_pMainWnd->UpdateWindow(); \n    return TRUE;\n}\n\n\nHelloWindow::HelloWindow()\n{       \n    Create(NULL,            \n        \"Hello World!\",         \n        WS_OVERLAPPEDWINDOW|WS_HSCROLL,             \n        CRect(0,0,140,80));     \n    m_pHelloButton = new CButton();\n    m_pHelloButton->Create(\"Hello World!\",WS_CHILD|WS_VISIBLE,CRect(20,20,120,40),this,1);\n\n    // some code for file reading\n    CStdioFile Inputfile, Outputfile;\n    CFileException FileExc;\n    UINT nOpenFlags;\n    CString s;\n    nOpenFlags = CFile::modeRead;\n    if (!Inputfile.Open(\"Console.txt\", nOpenFlags, &FileExc)) {\n        FileExc.ReportError();\n        return;\n    }\n    nOpenFlags = CFile::modeWrite | CFile::modeCreate;\n    if (!Outputfile.Open(\"Output.txt\", nOpenFlags, &FileExc)) {\n        FileExc.ReportError();\n        return;\n    }\n    while (Inputfile.ReadString(s))\n        Outputfile.WriteString(s+'  \n');\n    Inputfile.Close();\n    Outputfile.Close();\n\n}\n\n```\nCommand line used (assuming the file above is named a.cpp):\n\n```\ncl.exe a.cpp /EHsc /link /debug /subsystem:windows\n\n```\nHere, I intentionally use /debug to make reverse engineering easier.\n\nWhen IDA ask me if I want to load the PDB file, I chose \"Yes\".\n\nHowever:\n\nWhen loading the executable with IDA, neither the \"Local Types\" window nor the \"Structures\" window shows anything about CFile. Therefore, the functions which use them, use offsets to refer to the members.\n\n\n\nIn this particular case I use CFile, but I assume it's similar for other classes.\n\nI know I can go to the header file in atlmfc\\ to read the class definition and work out the member names, but that's too tedious and IDA may have it built-in already. So:\n\nIs there any way to quickly give IDA the definition of CFile?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "mfc"
  ],
  "user": "user202729",
  "time": "Sep 20, 2018 at 12:45",
  "comments": [
    {
      "user": "w s",
      "text": "If you compile your windows program with debug information and importing the resulting debug info .pdb file with the corresponding menu command ( hex-rays.com/products/ida/support/idadoc/430.shtml ) you'll probably be able to see the CFIle definition.",
      "time": null
    },
    {
      "user": "user202729",
      "text": "@ws Won't loading the file import the PDB automatically?",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "IDA will usually ask if you want to load the PDB.",
      "time": null
    },
    {
      "user": "user202729",
      "text": "It still doesn't work. (post updated...)",
      "time": null
    },
    {
      "user": "w s",
      "text": "Is it IDA free by any chance ? Is it possible that you are running IDA on Linux ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The main problem is: /Zi is required. Including just /debug is not enough. That's because the type information is stored in the compiler .pdb file. See also Compiler PDB file and the Linker PDB file - Stack Overflow.\n\nThe command line can looks like this:\n\n```\ncl.exe /Zi a.cpp /EHsc /link /subsystem:windows\n```\nNote that /Zi implies /debug (therefore it's not necessary to specify /debug when /Zi is included)\n\nHint: It's not necessary to build the executable. Just compile the file itself is enough (using /c).\n\nThere are some other problems that one may get while doing that:\n\nBy the way, it is possible to import any C++ type into IDA using this method, not just specifically MFC.\n\n",
      "votes": "1",
      "user": "user202729",
      "time": "Sep 25, 2018 at 15:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}