{
  "title": "[ARM]How does this checksum code works and how to revert it in C?",
  "link": "https://reverseengineering.stackexchange.com/questions/12927/armhow-does-this-checksum-code-works-and-how-to-revert-it-in-c",
  "content": "I am trying to reverse a simple code that gets a string and calculates it's checksum. I've been trying to understand every instruction, but they look different from what is said in arm documentation. \nHere's the full code(Using no$gba debugger)\n\n\nI've reached the code knowing that once the checksum has been calculated it is stored in the r0 register. Docs specify that EOR receives 2 args, while here is taking 4.\neor  r3,r3,r0,asr 8h I've figured out that this will be something like  r3 = (r3^r0)>>8  but I'm not really sure. In addition, C/C++ doesn't specify if the >> operator performs arithmetical or logical shifts (asr)\n\nSame confusion is created with the mov's instructions. The sub inst. would be reversed in something like r2--; or r2=r2-1;\n\nThanks for your time.\n\nEDIT: The checksum is 2 bytes long, and I am giving some examples:\n\nString: AAAAAAB  -- Checksum: 0xB649 (While debugging, write in little endian)\n\nString: AAAAAAA  -- Checksum: 0x68BC \n(NOTE: Checksum can't be worked out by performing operations with different checksum samples)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "928",
  "tags": [
    "assembly",
    "debuggers",
    "arm"
  ],
  "user": "78dtat78da",
  "time": "Jun 24, 2016 at 10:20",
  "comments": [
    {
      "user": "Jongware",
      "text": "How exactly do these instructions look different from the ones in your documentation? \"They are all lowercase\"?",
      "time": null
    },
    {
      "user": "78dtat78da",
      "text": "@RadLexus ... \" Docs specify that EOR receives 2 args, while here is taking 4. eor r3,r3,r0,asr 8h \"  From the ARM documentation: Syntax eor Rd, Rm   Rd->destination  Rm->Second operand",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "You are looking at the Thumb documentation, but this code is in the regular mode (you can see that because the opcodes are 4 bytes long)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "A disassembler and decompiler like Ghidra can be used to obtain a C equivalent code.\n\nAlso, as specified by @RadLexus, the ARM documentation can be found here: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABGIEBE.html\n\n",
      "votes": "0",
      "user": "78dtat78da",
      "time": "Jan 30, 2021 at 18:20",
      "is_accepted": true,
      "comments": []
    }
  ]
}