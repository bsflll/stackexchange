{
  "title": "What does `jz $+2` do? (jump if zero to dollar plus two)",
  "link": "https://reverseengineering.stackexchange.com/questions/2590/what-does-jz-2-do-jump-if-zero-to-dollar-plus-two",
  "content": "What does the dollar symbol mean in\n\n```\njz $+2\n\n```\n(This is IDA output.)\n\n",
  "votes": "4",
  "answers": 2,
  "views": "4k",
  "tags": [
    "disassembly",
    "ida",
    "assembly"
  ],
  "user": "heinrich5991",
  "time": "Aug 5, 2013 at 21:38",
  "comments": [],
  "answers_data": [
    {
      "content": "The dollar symbol in this instance means \"current position.\" This is the position this instruction begins at, and then plus two bytes. This instruction is two bytes, so it jumps to the next instruction past this one. It's effectively garbage.\n\n",
      "votes": "12",
      "user": "Ditmar Wendt",
      "time": "Aug 5, 2013 at 15:39",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "it can also be a sign of conditionally-compiled code that is not present in that configuration (maybe in debug mode, there is a message printed in some circumstances, and the branch would skip it).",
          "time": null
        },
        {
          "user": "Simeon Pilgrim",
          "text": "It's also present in a lot in non-optimized code (like 1990 16bit x86 game code) in switch statements where the last item also \"jumps to the end\" even though it is at the end already.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Especially in older MS-DOS programs, statements like this were often used betwen inb/outb instructions, to give some time to external hardware that was slower than the processor.",
          "time": null
        },
        {
          "user": "supercat",
          "text": "On some assemblers for the 6502, the symbol * is used to refer to the starting address of the current instruction, and $ is used to refer to the address of the following instruction.  So BNE *-3 or BNE $-5 would loop to an instruction that starts 3 bytes before the BNE, while BEQ *+2 or BEQ $ would execute the same next instruction whether the condition was true or not, but take an extra cycle if the Z flag is set (note that page crossings are measured based upon the address of the instruction after the branch, so BEQ $ would never take an extra cycle for a page crossing.)",
          "time": null
        }
      ]
    },
    {
      "content": "Jump two bytes forward from current position when zero flag == NULL \nOpcode for this 74 00 which is two bytes \n\n```\nseg000:00000000 74 00                    jz      short $+2\nseg000:00000002 74 00                    jz      short $+2\n\n```\nso effectively it will jump to next instruction whether the condition is met or not \ngarbage mostly used in obfuscation \n\n",
      "votes": "4",
      "user": "blabb",
      "time": "Aug 5, 2013 at 19:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}