{
  "title": "Remote Debugging Linux Binaries - Stack Address Changes?",
  "link": "https://reverseengineering.stackexchange.com/questions/19724/remote-debugging-linux-binaries-stack-address-changes",
  "content": "Do stack addresses change every time we remotely debug a Linux binary using linux_server and IDA Pro?\n\nI am using IDA Pro and remote debug a linux binary which is running on a Linux machine and I am using linux_server as the dbgsrv.\n\nI noticed that when I enter a subroutine, the stack address is different every time. Is it expected? Is it because I am debugging remotely?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "288",
  "tags": [
    "ida",
    "linux",
    "stack"
  ],
  "user": "Neon Flash",
  "time": "Oct 25, 2018 at 23:08",
  "comments": [],
  "answers_data": [
    {
      "content": "On modern Linux machines ASLR is enabled by default. As a result, when the process image for the binary is created in virtual memory, the base address of the stack is located at a random offset:\n\n```\n/*\n * These are the functions used to load ELF style executables and shared\n * libraries.  There is no binary dependent code anywhere else.\n */\n\n#ifndef STACK_RND_MASK\n#define STACK_RND_MASK (0x7ff >> (PAGE_SHIFT - 12)) /* 8MB of VA */\n#endif\n\nstatic unsigned long randomize_stack_top(unsigned long stack_top)\n{\n    unsigned long random_variable = 0;\n\n    if (current->flags & PF_RANDOMIZE) {\n        random_variable = get_random_long();\n        random_variable &= STACK_RND_MASK;\n        random_variable <<= PAGE_SHIFT;\n    }\n#ifdef CONFIG_STACK_GROWSUP\n    return PAGE_ALIGN(stack_top) + random_variable;\n#else\n    return PAGE_ALIGN(stack_top) - random_variable;\n#endif\n}\n\n```\nWe can test this with a simple program that prints the memory address of a local variable in function main():\n\n```\n#include <stdio.h>\n\nint main(void){\n\n        int i = 3;\n\n        printf(\"%p  \n\", &i);\n\n        return 0;\n}\n\n```\ncompile and execute:\n\n```\n$ gcc -m32 -o print_stack_address print_stack_address.c \n$ ./print_stack_address \n0xff9dc78c\n$ ./print_stack_address \n0xff832d3c\n$ ./print_stack_address \n0xff844c1c\n$ ./print_stack_address \n0xff999e0c\n$ ./print_stack_address \n0xffd1117c\n\n```\n",
      "votes": "5",
      "user": "julian",
      "time": "Oct 25, 2018 at 21:52",
      "is_accepted": true,
      "comments": [
        {
          "user": "Neon Flash",
          "text": "Thanks, I resolved this issue by manually disabling ASLR on the machine.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@NeonFlash you are welcome",
          "time": null
        }
      ]
    },
    {
      "content": "Most modern operating systems never guaranteed the stack's location will be the same for different process creations to begin with, and this was mostly a byproduct of deterministic execution of those allocations during the operating system's process creation flow.\n\nMoreover, that fact was then used quite frequently to use constant values for stack addresses during exploitation, which is what ASLR prevents. for a while now stacks are being ASLRed to mitigate exploitation, and are actually guaranteed to be randomized. \n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Oct 25, 2018 at 22:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}