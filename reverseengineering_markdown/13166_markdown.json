{
  "title": "Why 0xc(%ebp) becomes dword [ebp+arg_3]?",
  "link": "https://reverseengineering.stackexchange.com/questions/13166/why-0xcebp-becomes-dword-ebparg-3",
  "content": "I'm reversing an x86 binary and I have an instruction that using the at&t syntax is\n\n```\nmovl 0xc(%ebp), %eax\n\n```\nwhile using the intel syntax is\n\n```\nmov eax, dword [ebp+arg_3]\n\n```\nI'm using radare2, and at the start of the function it prints\n\n```\n; arg int arg_0_1      @ ebp+0x1\n; arg int arg_3        @ ebp+0xc\n\n```\nWhy [ebp+arg_3] instead of a simple substitution like [arg_3]?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "482",
  "tags": [
    "radare2"
  ],
  "user": "Giuseppe Crinò",
  "time": "Jul 29, 2016 at 15:39",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "your question has a typo - the '-' should be '+'.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The reference to ebp makes explicit which register is being used to access the variable, and also the fact that the reference is relative, not absolute.  A compiler might have produced an instruction using esp instead, if no stack frame exists, or any other register if the code were written by hand. \n\nFurther, to show only [arg_3] implies that the access is equivalent to another memory location such as [401000h], but with a name instead of a number.\n\n",
      "votes": "3",
      "user": "jvoisin",
      "time": "Oct 23, 2016 at 21:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Giuseppe Crinò",
          "text": "Could you add a generic expression using the syntax used in the OP?",
          "time": null
        },
        {
          "user": "Vitaly Osipov",
          "text": "@giuscri it's simply a convention chosen by authors of a disassembler you're using. They seem to simply equate arg3 to 0xc and not bother with details :) If your question is about \"; arg int arg_3        @ ebp+0xc\" - then yeah I agree it's a bit illogical but hey, ask them to fix it :)",
          "time": null
        },
        {
          "user": "u185619",
          "text": "hi I am one of the authors, the reason why we made it like this is that many of the arguments/variables manipulating commands requires prior knowledge of that base register you will use, so think of the [ebp+arg_3] as if I was trying to say arg_3 is offsetted  with respect to ebp instead of regular + operator",
          "time": null
        }
      ]
    }
  ]
}