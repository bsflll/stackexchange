{
  "title": "Intercept zip decryption key or files from an application",
  "link": "https://reverseengineering.stackexchange.com/questions/21535/intercept-zip-decryption-key-or-files-from-an-application",
  "content": "If an application is reading from a password protected zip file, is there a way to intercept the key being sent to decrypt the zip file. Or, is there a way to dump the files being read themselves?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "790",
  "tags": [
    "debugging",
    "decryption",
    "hooking"
  ],
  "user": "thisisnice05",
  "time": "Jun 24, 2019 at 7:27",
  "comments": [
    {
      "user": "Remko",
      "text": "In what language has the binary been written? If it's a .NET binary (and not obfuscated) it can be debugged and/or reversed fairly easily. Perhaps also try to determine if a popular zip library is being used.",
      "time": null
    },
    {
      "user": "thisisnice05",
      "text": "I don't believe it is using .Net. The Zip is version 2.0 using AES 128 bit encryption 'I think Winzip'   Inside an xml file which has a list of the encrypted files it has a 'partial encryption key' which I have no idea what it does with",
      "time": null
    },
    {
      "user": "Remko",
      "text": "Can you share the file(s)?",
      "time": null
    },
    {
      "user": "Johann Aydinbas",
      "text": "Are you sure this is all legal? You provided an .iso for what appears to be commercial software.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@JohannAydinbas please read this ;)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm writing this answer under the assumption the OP is within his legal rights to share the binaries.\n\nFirst of, I read up on password protected zip files. Apparently that is not part of the ZIP specification itself but an invention of WinZip. They have documented their format modifications and all details on this page:\n\nhttps://www.winzip.com/win/en/aes_info.html\n\nImportant to notice here is how key derivation works. It feeds the given password through PKBDF2 with an iteration count of 1000 to derive the real key used in AES.\n\nUsing PEiD I checked for crypto signatures and found 4 references to AES (via their sbox). I then checked the surrounding code where these AES functions are used and stumbled upon a function call that got 1000 as an argument.\n\nSo then I just ran the binary with an attached debugger, breaking on that call. Then I inspected passed arguments and the first argument appeared to be the key.\n\nI successfully decompressed the female zip file with the key to confirm.\n\nNote that the algorithm used by the program seems to be a bit more complex. If you check the zip files, not all files in there are encrypted.\n\nTwo XML files are unencrypted and contain an XML property named encryption key, which looks similar to the real one above, but different bytes.\n\nThe application probably uses this property to deduce the above key which is eventually fed to AES to decrypt the encrypted files in the same archive. I do not know how this internal derivation works. You would have to find the code, probably by following the XML parser if you want to write a generic tool to decompress these encrypted files.\n\n",
      "votes": "4",
      "user": "peter ferrie",
      "time": "Jul 12, 2019 at 17:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "thisisnice05",
          "text": "May I ask what debugging software you use?",
          "time": null
        },
        {
          "user": "Johann Aydinbas",
          "text": "I used x64dbg (or rather x32dbg for this target) and the actual code reading I've done in IDA",
          "time": null
        }
      ]
    }
  ]
}