{
  "title": "How can i start the RE process in radare2?(make changes to the registers) [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/17412/how-can-i-start-the-re-process-in-radare2make-changes-to-the-registers",
  "content": "I'm an absolute newbie to reverse engineering. I have a 32bit lsb arm binary which I would like to reverse engineer using radare2. How should I begin ?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "arm",
    "radare2",
    "binary"
  ],
  "user": "user7083361",
  "time": "7 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "It's not clear exactly what are you asking for, so I'll start from the basic.\n\nIf you don't have previous experience with assembly or reverse engineering I'd suggest you to start from there since you need to know the techniques before you should get to know the tools.\n\nYou can start learning from any source you find suitable for you. \n\nThe recommended source to start learning about radare is the radare2 book\n\nYou can also check my Series of tutorials about radare2 which go through all the information you need to to to start reversing with radare2. You can check as well the radre2 wiki.\n\nI highly encourage you to begin from these sources. You'll find them helpful, I'm sure!\n\nNow, into a more specific answer. How to use it for reverse engineering? Here are the basic steps:\n\nRadare2’s development is pretty quick – the project evolves every day, therefore it’s recommended to use the current git version over the stable one. Sometimes the stable version is less stable than the current git version!\n\n```\n$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n\n```\nTo open a basic static session (i.e without debugging) you should simply pass your program name to radare2:\n\n```\n$ r2 ./program_name\n — Thank you for using radare2. Have a nice night!\n[0x08048370]> \n\n```\nTo debug using radare2 pass -d:\n\n```\n$ r2 -d /program_name\nProcess with PID 6972 started...\n= attach 6972 6972\nbin.baddr 0x00400000\nUsing 0x400000\nasm.bits 64\n -- Execute a command on the visual prompt with cmd.vprompt\n[0x7fc6b4200c30]>\n\n```\nSince you specifically mentioned this question, you can modify the registers using the dr command and subcommands. Just execute dr? to get help about the command and its subcommands. If you want, for example, to change RAX, simply execute:\n\n```\n[0x00400697]> dr rax\n0x00400697\n[0x00400697]> dr rax=0x41414141\n0x00400697 ->0x41414141\n[0x00400697]> dr rax\n0x41414141\n\n```\n",
      "votes": "4",
      "user": "Megabeets",
      "time": "Feb 8, 2018 at 6:44",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "A workflow I typically use:\n\n```\n$> radare2 -d /path/to/my/bin\n[some addr]> aaa\n[some addr]> afll\n[some addr]> db sym.main\n[some addr]> dc\n[main addr]> v!\n\n```\nFrom here, you'll be dropped into visual mode and you can step through the binary via s and step over lines via S.\n\nWhat this sequence of commands does is:\n\nOf course, this is just a particular workflow I happen to use. There are other commands that are useful for other things, for example:\n\nThis is not a complete tutorial, but I certainly hope it helps you. Some resources I found extremely useful:\n\nFull disclaimer: this following link is one of my own\n\n",
      "votes": "1",
      "user": "jmcph4",
      "time": "Jun 24, 2020 at 2:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "xate",
          "text": "iM lists the address of the program's main function, ie is the entry point.",
          "time": null
        }
      ]
    }
  ]
}