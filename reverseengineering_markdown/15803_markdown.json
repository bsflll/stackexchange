{
  "title": "68k: Adding 0x100 to 9-bit register and doing BEQ.s - how does it make sense?",
  "link": "https://reverseengineering.stackexchange.com/questions/15803/68k-adding-0x100-to-9-bit-register-and-doing-beq-s-how-does-it-make-sense",
  "content": "During my current project I found such code:\n\n```\nmove.w  (0xFFFC0C).l, d0 | read SCSR\nandi.w  #0x100, d0       | add 256 to d0\nbeq.s   location         | branch if LSB = 0x00\n\n```\nI cannot get the idea of this fragment. I guess author tried to check the status of the UART, but how does andi.w and beq.s serves the purpose, when SCSR may contain maximum of 9 bits?\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "141",
  "tags": [
    "disassembly",
    "assembly",
    "motorola"
  ],
  "user": "kiler129",
  "time": "Jul 11, 2017 at 12:48",
  "comments": [
    {
      "user": "w s",
      "text": "It's not adding. It is binary AND operation, exactly as single & in C language.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's not adding. It is binary and operation, and in translation to C the code looks as follows:\n\n```\nd0 = readSCSR(); // move.w  (0xFFFC0C).l, d0 | read SCSR\nif (d0 & 0x100) \n//andi.w  #0x100, d0       | not add, but AND 256 to d0\n//beq.s   location         | branch if LSB = 0x00\n{\n    // do whatever needed\n}\nlocation: // else branch to location\n\n```\n",
      "votes": "4",
      "user": "w s",
      "time": "Jul 11, 2017 at 14:12",
      "is_accepted": true,
      "comments": []
    }
  ]
}