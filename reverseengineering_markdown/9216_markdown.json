{
  "title": "How do I found out what register used for stack pointer on RISC architectures?",
  "link": "https://reverseengineering.stackexchange.com/questions/9216/how-do-i-found-out-what-register-used-for-stack-pointer-on-risc-architectures",
  "content": "On some RISC architectures there's no notion of stack pointer register -  there's some register, used to hold a stack pointer and address of the stack frame, but nowhere told explicitly what.\n\nSo, how do I found out what register being used for storing a stack pointer on RISC architectures?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "170",
  "tags": [
    "disassembly",
    "stack",
    "risc"
  ],
  "user": "PaulD",
  "time": "Jun 24, 2015 at 14:12",
  "comments": [],
  "answers_data": [
    {
      "content": "In most cases, even if there's no register that has any hardware/instruction support for being a stack pointer, either the processor manufacturer or the operating system designer defines an ABI (application binary interface) which, among others, contains a convention for calling subroutines. Compiler vendors normally conform to this ABI to make their code interchangable with that of other vendors, or standard libraries.\n\nThe wikipedia page about calling conventions has information about the standard conventions of most of the common processors. as well as links to some of the manufacturer documents.\n\nHowever, noone forces you to use that exact convention. You could, for example, write a JVM that has the Java stack in one register, and the C/native stack in a different one. Or, you could use one register for the call/return stack, a different one for function parameters, and a third one for local variables. The hardware doesn't care, so you can do this if you feel it's advantageous to your application; however, in most cases, not using the standard ABI causes you trouble (as you can't use standard libraries anymore) without gaining you anything.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Jun 24, 2015 at 14:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}