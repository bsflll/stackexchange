{
  "title": "Why does this ARM subroutine put a parameter into the stack frame and take it straight back out?",
  "link": "https://reverseengineering.stackexchange.com/questions/6361/why-does-this-arm-subroutine-put-a-parameter-into-the-stack-frame-and-take-it-st",
  "content": "I have this small subroutine (from Hopper, but IDA is similar):\n\n```\n             sub_stringbegin:\n000127b8         push       {r11, lr}                                          \n000127bc         add        r11, sp, #0x4\n000127c0         sub        sp, sp, #0x8\n000127c4         str        r0, [r11, #-0x8]\n000127c8         ldr        r0, [r11, #-0x8]\n000127cc         bl         _ZNSs5beginEv@PLT                                   \n000127d0         mov        r3, r0\n000127d4         mov        r0, r3\n000127d8         sub        sp, r11, #0x4\n000127dc         pop        {r11, pc}\n                        ; endp\n\n```\nThe parameter is passed to this in r0.\n\nWhy is this stored into the stack frame then immediately read out? It seems wasteful.\n\nI understand that r0-r3 aren't preserved in the ARM calling convention, but in that instance it would be sufficient to either just store it in the stack frame or pop it onto the stack.\n\nSimilarly, moving r0 into r3 and back again seems wasteful after the branch.\n\nThis is a ELF executable from a Busybox system. \n\n",
  "votes": "2",
  "answers": 2,
  "views": "359",
  "tags": [
    "disassembly",
    "arm"
  ],
  "user": "Cybergibbons",
  "time": "Oct 1, 2014 at 21:52",
  "comments": [
    {
      "user": "perror",
      "text": "Do you know with what level of optimization (and with which compiler) it has been compiled ?",
      "time": null
    },
    {
      "user": "Cybergibbons",
      "text": "It was built with Yocto and is a \"poky\" distribution. I suspect it is \"arm-poky-linux-gnueabi-gcc\" but the specific parameters I don't know.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is most likely just non-optimized code. When optimization is disabled, the compiler may do the silliest things.\n\nI hear that many old-time embedded engineers do not enable optimizations in principle because they got burned by optimization bugs in old compilers.\n\n",
      "votes": "4",
      "user": "yaspr",
      "time": "Apr 28, 2015 at 8:52",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "This is a straightforward translation of \n\n```\nx = foo;\ndoSomething(x);\n\n```\nAn optimization pass would have realized that x was still in r0 here. Presumably optimizations were turned off.\n\nBy the way, it's not that wasteful, as the memory location in question will still be in L1 cache.\n\n",
      "votes": "0",
      "user": "Brennan Vincent",
      "time": "Oct 16, 2016 at 7:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}