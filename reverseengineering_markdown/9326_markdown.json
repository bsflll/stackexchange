{
  "title": "Passing arrays to a function call (Buffer Overflow)",
  "link": "https://reverseengineering.stackexchange.com/questions/9326/passing-arrays-to-a-function-call-buffer-overflow",
  "content": "I need to execute a call to cat on a target file using a buffer overflow in a challenge app (can't execute on the stack, but can use libc). For reference, in C this is valid code for what I'm trying to do:\n\n```\nint main(void) {\n        char * const argv[] = {\"cat\", \"/etc/target/file\"};\n        char * const envp[] = {NULL};;\n        execve(\"/bin/cat\", argv, envp);\n}\n\n```\nI can load some null-terminated strings up on the target and I've also determined the address of execve. Here's the info I have:\n\n```\n\"/bin/cat\" @ 0xbfffffb9:\n\"cat\" @ 0xbfffffbe\n\"/etc/target/file\" @ 0xbffff96f\n\nexecve @ 0x804831c\n\n```\nI can overwrite the EIP and following bytes with a string like:\n\n```\n\"AAAA....AAA\" + EIP + [RETURN ADDR] + ARG1 + ARG2 ....\n\n```\nIn the string above I can replace EIP with the address of execve and jump to the function, but that's where things go sour for me. I've never set up a stack for arrays and couldn't find a google example of using arrays in a classic buffer overflow.\n\nHow can I set up the stack with array parameters for my function call? What does my stack need to look like in this case?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "225",
  "tags": [
    "disassembly",
    "buffer-overflow",
    "stack-variables"
  ],
  "user": "Juicy",
  "time": "Jul 10, 2015 at 22:55",
  "comments": [],
  "answers_data": [
    {
      "content": "What you're actually doing there is passing pointers to the array, not the array itself. If you look at the declarations:\n\n```\n    char * const argv[] = {\"cat\", \"/etc/target/file\"};\n    char * const envp[] = {NULL};\n    execve(\"/bin/cat\", argv, envp);\n\n```\n'argv' and 'envp' are pointers to the array.\n\nTypically, it's easiest to just ROP to execve('command', NULL, NULL) to avoid fancy setup. Why not execve('/bin/bash', NULL, NULL) then cat the file from the spawned shell? \n\nOtherwise you can finagle some pointers to make it work - pass it pointers to  NULL-pointer terminated arrays of strings that contain your args.\n\n",
      "votes": "2",
      "user": "Tom Cornelius",
      "time": "Jul 12, 2015 at 6:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}