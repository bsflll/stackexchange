{
  "title": "GUARD_PAGE memory breakpoints with gdb?",
  "link": "https://reverseengineering.stackexchange.com/questions/21004/guard-page-memory-breakpoints-with-gdb",
  "content": "I came across a question the other day on reddit: How can we use PAGE_GUARD-based memory breakpoints in GDB (not hardware breakpoints)?\n\nOllydbg, x64dbg and IDA PRO all support these types of breakpoints, but I couldnt find a way in GDB.\n\nIf this is not available, is it possible to set the PAGE_GUARD bit manually in GDB?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "565",
  "tags": [
    "ida",
    "gdb",
    "memory",
    "breakpoint"
  ],
  "user": "bernd feinman",
  "time": "Mar 31, 2019 at 0:33",
  "comments": [],
  "answers_data": [
    {
      "content": "According to man mmap\n\nPROT_NONE will act like a guard page by hitting a SIGSEGV when accessed.\n\nThe page with PROT_NONE looks like this in the map during runtime\n\n```\n    0x7ffff7ff7000     0x7ffff7ff8000 ---p     1000 0\n\n```\ngdb allows you to call arbitrary functions in the process space. A simple solution would be to run this under gdb \n\n```\nprint mprotect($address,0x1000,0)\n\n```\nThis would set PROT_NONE = 0 permissions on the page and it will act as a guard page.\nIf after hitting SIGSEGV you want to remap the page as rw (PROT_READ|PROT_WRITE)\n\n```\nprint mprotect($address,0x1000,3)\n\n```\nIf you want to add an extra page mapped as guard page like the page heaps in windows, you can call mmap.\n\n```\nprint /a mmap($address+0x1000,0x1000,0,0x22,-1,0)\n\n```\nHere 0x22 is MAP_PRIVATE|MAP_ANONYMOUS\n\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Apr 4, 2019 at 6:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "bernd feinman",
          "text": "Thanks! I am surprised though gdb doesnt offer it directly.",
          "time": null
        },
        {
          "user": "bernd feinman",
          "text": "Hm, another thing: is there really no way to get the current protection of the page? Otherwise it  would be hard to undo the memory-breakpoint and expose me to anti-debugging actions.",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "There's no way to read the protections from any api/syscall. Worst case you can parse /proc/<pid>/maps. Some gdb extensions like pwndbg give a vmmap command which does this.",
          "time": null
        }
      ]
    }
  ]
}