{
  "title": "ARM64 syscalls table",
  "link": "https://reverseengineering.stackexchange.com/questions/16917/arm64-syscalls-table",
  "content": "I wonder if there some syscall table for Linux ARM64 architecture?\nI found syscall table for Linux ARM32 and many other architectures, but the problem still exists.\n\nDoes anyone know where can I find a syscall table exactly for ARM64?\n\n",
  "votes": "10",
  "answers": 2,
  "views": "21k",
  "tags": [
    "assembly",
    "linux",
    "arm",
    "system-call"
  ],
  "user": "merrychap",
  "time": "May 23, 2018 at 13:53",
  "comments": [],
  "answers_data": [
    {
      "content": "arm64 syscall numbers are defined at: https://github.com/torvalds/linux/blob/v4.17/include/uapi/asm-generic/unistd.h\n\nThis is a bit confusing since it is quite different from x86 and x86_64 and arm 32-bit which define syscall numbers under arch/, e.g. arch/arm/tools/syscall.tbl for arm 32-bit, but the arm64 file has a comment saying:\n\nso I'm guessing that it is just because aarch64 is new and used a newer more arch agnostic mechanism, while the old ones can never break userland compatibility and thus cannot be updated to the new mechanism.\n\nThis is corroborated by the following minimal runnable aarch64 assembly Linux call example that works on QEMU and uses 64 for write and 93 for exit:\n\nmain.S\n\n```\n.text\n.global _start\n_start:\n    /* write */\n    mov x0, #1\n    ldr x1, =msg\n    ldr x2, =len\n    mov x8, #64\n    svc #0\n\n    /* exit */\n    mov x0, #0\n    mov x8, #93\n    svc #0\nmsg:\n    .ascii \"hello world  \n\"\nlen = . - msg\n\n```\nGitHub upstream.\n\nAssemble and run:\n\n```\naarch64-linux-gnu-as -o main.o main.S\naarch64-linux-gnu-ld -o main.out main.o\nqemu-aarch64 main.out\n\n```\nTested in Ubuntu 16.04 amd64.\n\nstrace source code\n\nThis is a good place to easily cheat to check the syscall numbers, see: https://unix.stackexchange.com/questions/421750/where-do-you-find-the-syscall-table-for-linux/499016#499016\n\nIt also confirms what I said about newer archs seeming to have unified call numbers.\n\n",
      "votes": "13",
      "user": "Ciro Santilli OurBigBook.com",
      "time": "Sep 17, 2020 at 16:29",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Update: See this answer for up-to-date information on where ARM64 syscall definitions are found. Note that the information below may just be for backwards-compatibility.\n\nSee arch/arm64/include/asm/unistd32.h:\n\n```\n ...\n #define __NR_restart_syscall 0\n __SYSCALL(__NR_restart_syscall, sys_restart_syscall)\n #define __NR_exit 1\n __SYSCALL(__NR_exit, sys_exit)\n #define __NR_fork 2\n __SYSCALL(__NR_fork, sys_fork)\n #define __NR_read 3\n __SYSCALL(__NR_read, sys_read)\n #define __NR_write 4\n __SYSCALL(__NR_write, sys_write)\n #define __NR_open 5\n __SYSCALL(__NR_open, compat_sys_open)\n #define __NR_close 6\n __SYSCALL(__NR_close, sys_close)\n            /* 7 was sys_waitpid */\n __SYSCALL(7, sys_ni_syscall)\n #define __NR_creat 8\n __SYSCALL(__NR_creat, sys_creat)\n ...\n\n```\nYou'll also find a few AArch64-specific syscalls in arch/arm64/include/asm/unistd.h.\n\n",
      "votes": "9",
      "user": "tonysdg",
      "time": "Jul 18, 2018 at 15:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ciro Santilli OurBigBook.com",
          "text": "I think the truly interesting file for arm64 is include/uapi/asm-generic/unistd.h: reverseengineering.stackexchange.com/a/18834/12321",
          "time": null
        },
        {
          "user": "tonysdg",
          "text": "@CiroSantilli新疆改造中心六四事件法轮功: Huh -- I wonder what the files I linked are used for now? Perhaps the glibc version has something to do with it... anyways, based on your experimental results, the asm-generic file is likely correct.",
          "time": null
        }
      ]
    }
  ]
}