{
  "title": "How can I walk up along the AST using IDAPython decompiler API?",
  "link": "https://reverseengineering.stackexchange.com/questions/14464/how-can-i-walk-up-along-the-ast-using-idapython-decompiler-api",
  "content": "I am using IDAPython for my analysis. In IDA v6.95, the header file plugins/hexrays_sdk/include/hexrays.hpp defines the following:\n\n```\ntypedef ctree_items_t parents_t;\n\nparents_t parents;      ///< Vector of parents of the current item\n\n/// Get parent of the current item as an expression\ncexpr_t *parent_expr(void) { return (cexpr_t *)parents.back(); }\n\n// Get parent of the current item as a statement\ncinsn_t *parent_insn(void) { return (cinsn_t *)parents.back(); }\n\n```\nFor my analysis, I am trying to walk up along the parents from a given cexpr_t node. parent_expr() and parent_insn() API gives me back the immediate parent, not the entire chain from the child to root of the AST.\n\nAs an alternative, I tried to traverse the parents vector once I visit the given cexpr_t node.\n\n```\nfor parent in reversed(self.parents):\n  print \"|==> %s [%d]\" % (hex(parent.ea), parent.op)\n\n```\nThe problem is, the parent item thus returned is of type citem_t. If I cast those to cexpr_t as follows:\n\n```\nparent.__class__ = cexpr_t\nprint parent.x\n\n```\nand access any of its fields (e.g. x) in the example above, it throws error.\n\nHow can I traverse the AST nodes bottom-up yet retaining the correct types (cexpr_t or cinsn_t) of respective nodes? Is it possible to look into the code of parent_expr() or parent_insn() to see if how do those return correctly typed nodes from an ctree_items_t type vector (i.e. parents)? The code inside python/ida_hexrays.py seems to be mere SWIG stub, the actual implementation seems to lie somewhere else.\n\n```\ndef parent_expr(self, *args):\n    \"\"\"\n    parent_expr(self) -> cexpr_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_expr(self, *args)\n\ndef parent_insn(self, *args):\n    \"\"\"\n    parent_insn(self) -> cinsn_t\n    \"\"\"\n    return _ida_hexrays.ctree_visitor_t_parent_insn(self, *args)\n\n```\nThe actual code seems to be distributed as a shared library located at python/lib/python2.7/lib-dynload/[ida32|ida64]/_ida_hexrays.so\n\n",
  "votes": "1",
  "answers": 1,
  "views": "639",
  "tags": [
    "ida",
    "idapython",
    "hexrays"
  ],
  "user": "sherlock",
  "time": "Jan 20, 2017 at 20:03",
  "comments": [],
  "answers_data": [
    {
      "content": "I can solve part of your problem.  Use the 'to_specific_type' attribute to convert a citem to a cexpr:\n\n```\nif citem.is_expr():\n    cexpr = citem.to_specific_type\n\n```\n",
      "votes": "1",
      "user": "Andy Van Pelt",
      "time": "Oct 12, 2018 at 22:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}