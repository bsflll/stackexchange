{
  "title": "Reversed APK crashes after install",
  "link": "https://reverseengineering.stackexchange.com/questions/13198/reversed-apk-crashes-after-install",
  "content": "I'm trying to reverse an apk, overload some function and rebuild/sign it.\n\nI should have done everything in the correct way; the only thing I edited is a function that check if the device is rooted.\nThe function is isRooted and it calls other 3 functions:\n\n```\n  public static boolean isRooted()\n  {\n    return (checkRootMethod1()) || (checkRootMethod2()) || (checkRootMethod3());\n  }\n\n```\nI tried to change the \"smali-version\" of this function in that way:\n\n```\n.method public static isRooted()Z\n    .locals 1\n\n    .prologue\n    .line 15\n    invoke-static {}, Lcom/name1/name2/CtrlDevice;->checkRootMethod1()Z\n\n    move-result v0\n\n    if-nez v0, :cond_0\n\n    invoke-static {}, Lcom/name1/name2/CtrlDevice;->checkRootMethod2()Z\n\n    move-result v0\n\n    if-nez v0, :cond_0\n\n    invoke-static {}, Lcom/name1/name2/CtrlDevice;->checkRootMethod3()Z\n\n    move-result v0\n\n    if-nez v0, :cond_0\n\n    const/4 v0, 0x0\n\n    :goto_0\n    return v0\n\n    :cond_0\n    const/4 v0, 0x0\n\n    goto :goto_0\n.end method\n\n```\nThe only difference from the original version is that the cond_0 was\n\n```\n:cond_0\nconst/4 v0, 0x1\n\n```\nAfter that I built an APK with apktool and I signed it with jarsigner and everything seems to be ok, but when I install the app on my device and I run it, after the splash it crashes.\n\nI know that the question is really generic and I don't want a direct solution to this problem but I would like to know if is possible to implement something like a check that prevent to run the app after something has changed. Is possible something like that? How can I skip this check?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "android",
    "java",
    "apk"
  ],
  "user": "Giacomo Torricelli",
  "time": "Aug 3, 2016 at 7:46",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "This doesn't even have to be a tamper check. Imagine a global variable that gets set to 1, 2 or 3 respectively by the first checkRootMethod that succeeds. Later, your program runs one of various runAsRootMethods depending on that variable, and since the variable never got initialized, the program crashes.",
      "time": null
    },
    {
      "user": "Vitaly Osipov",
      "text": "An obvious suggestion - check logs for the cause of this crash.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes it is possible to have anti-tampering checks, and I have seen apps with them. That being said, you should eliminate the simplest causes first.\n\nDid you check logcat? Most likely you accidentally screwed up the smali or otherwise messed up the apk. You should be able to see why the app crashed by checking logcat.\n\nAnother thing you should check is whether the app works if you simply resign it with no code changes. \n\nAnyway, if it turns out that the app actually does have anti-tampering checks, you just have to reverse engineer it and disable the checks. There obviously isn't any one size fits all advice here, since anything you do is specific to the particular checks implemented.\n\n",
      "votes": "1",
      "user": "Antimony",
      "time": "Aug 3, 2016 at 11:19",
      "is_accepted": true,
      "comments": []
    }
  ]
}