{
  "title": "Changing running kernel thread code from another LKM (ARM linux 4.19.130)",
  "link": "https://reverseengineering.stackexchange.com/questions/33065/changing-running-kernel-thread-code-from-another-lkm-arm-linux-4-19-130",
  "content": "I am security testing an embedded ARM linux 4.19.130 IoT device - without kernel source code or ability to change the kernel due to signing.\n\nI have managed to get a root shell.\n\nHowever, by the time this happens, there is a guardian.ko LKM which has an active kernel thread, restricting what I can do.\n\nvermagic=4.19.130 SMP mod_unload ARMv7 p2v8\n\n/dev/mem is available and I have a user space program to read/write to it, and can patch the running thread code.\n\nHowever, probably due to caching and such technicalities, it doesn't affect the running kernel thread.\n\nThere is about 20 seconds for me to patch this thread before guardian.ko decides it is not happy with my presence and reboots.  Disabling reboot isn't an option here due to other factors.\n\nMemory protections seem to prevent me from changing things like kallsyms and the like from my own LKM (though I can insmod one) in traditional hooking fashion.  The only way I've found is to write to /dev/mem - and this does test ok on another LKM which just prints some output when I cat a /proc device.  If I change that printing code to invalid instructions it will crash when I cat the /proc file - so I know I am changing it's code.\n\nI did try changing memory, and inserting my own LKM that has:\n\n```\nsmp_mb();\n\nflush_cache_all();\n\nisb();\n\n```\nmake memory changes with userspace program and then insert this module in the hopes it would affect the running kernel thread - but it continues as though I made no changes.\n\nkrpobes etc not available.\n\nIf it matters, the guardian.ko thread was crated with kthread_create_on_node(guardian_watcher_kthread, 0, -1, \"Guardian watcher\")\n\nI am able to test my patches on my own guardian.ko and they work so not worried about if the changes I am making are valid.  Memory changes to precompiled and also loaded modules is tricky due to the way they are loaded with resolved local anchors and such, but that isn't the problem here.  Even if I write nonsense to it it doesn't affect how it runs.\n\nAny suggestions?  It may well be ARM specific, and somewhat obvious what approach to use to those more well versed in such things.\n\nI am considering trying to terminate the thread from my own LKM, though not sure if that will work - and making it happen is problematic and the task_struct differs a lot from stock kernel so will take ages to figure it out.\n\nI could ask the vendor for the kernel source and config under GPL, but they don't have a history of honoring that :(\n\n",
  "votes": "0",
  "answers": 0,
  "views": "34",
  "tags": [
    "linux",
    "arm",
    "embedded"
  ],
  "user": "user46754",
  "time": "Jul 4, 2024 at 15:33",
  "comments": [
    {
      "user": "w s",
      "text": "Did you try to overwrite with nops the main guardian kernel thread loop?",
      "time": null
    },
    {
      "user": "user46754",
      "text": "I know what instructions to patch the guardian kernel thread loop with.  Problem is finding a way to actually make the writes to the running kernel thread haven't been successful.  So NOPs, other instructions or even just invalid 0xFFFFFFFFs have no effect.",
      "time": null
    }
  ],
  "answers_data": []
}