{
  "title": "What are nullsub_ functions in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/2420/what-are-nullsub-functions-in-ida",
  "content": "In nearly every dis-assembly created by IDA, there are several functions that are marked nullsub_ which according to IDA, return null nothing (just ret instruction). \n\nSo, what are those and why are they in the database?\n\n",
  "votes": "18",
  "answers": 3,
  "views": "5k",
  "tags": [
    "disassembly",
    "ida"
  ],
  "user": "PhoeniX",
  "time": "Aug 31, 2013 at 5:11",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "I think that you mean \"according to IDA, they return nothing\" (i.e. a bare \"ret\" instruction).  This is not the same as null.  It can happen when a procedure is a placeholder, for example.",
      "time": null
    },
    {
      "user": "PhoeniX",
      "text": "@peterferrie, you are right. Thanks for the correction.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm answering from a C++ viewpoint, other languages have different reasons.\n\nThere are legitimate uses for these functions, even if they are nothing more than\n\n```\nvoid func(/* any args */) {}\n\n```\nOne example that comes to mind is a virtual function that does nothing in a base class but is overridden in a derived class. A similar example would be a template function whose general case is empty but specializations are not.\n\nOne more case is static variables. A static variable destructor has to be called at the end of the program, which usually uses atexit to register the destructor callback when the variable is accessed for the first time. As I recall, the C++ standard says that a destructor with no observable behaviour might not be invoked, but I have seen MSVC 6.0 register nullsubs as destructors anyway.\n\nGlobal variables follow rules similar to static ones.\n\nAnother possibility is a function that simply has no effect, according to the compiler. The function has to exist in case something (e.g. another compilation unit that doesn't know the implementation is empty) tries to call it, but its body is empty. \nMind that \"according to the compiler\" is not always equal to the coder's understanding. I myself once wrote a cleanup function that did a lot of work, but by mistake it took the argument by value instead of by reference. The compiler optimized the entire function body to a {} without any warning. Oops.\n\n",
      "votes": "24",
      "user": "DCoder",
      "time": "Jul 6, 2013 at 11:20",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "DCoders answer is great, but other reasons include:\n\nThe function might have the body #ifdef'ed out in release verse debug, but the function call is left to avoid changing the flow of the code.\n\nOne example is debug print functions\n\nAnother reason is to allow for patching. This one is pretty weak.\n\n",
      "votes": "9",
      "user": "Simeon Pilgrim",
      "time": "Oct 10, 2013 at 3:36",
      "is_accepted": false,
      "comments": [
        {
          "user": "PhoeniX",
          "text": "So compiler might deliberately left it, although optimization flags were on?",
          "time": null
        },
        {
          "user": "Simeon Pilgrim",
          "text": "Well not all optimizations are equal, nor are all compilers equal. The examples I'm thinking of were from non-ARM/x86 CPU's or code from the 80s/90s.",
          "time": null
        }
      ]
    },
    {
      "content": "compiler may insert dumb null_sub randomly between directions, in order to confuse IDA decompiler. So that IDA may generate meaningless variable names, increase reverse engineer's effort to understand the workflow, to connect to dots...\n\n",
      "votes": "1",
      "user": "vagase",
      "time": "Mar 11, 2020 at 3:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "Rolf Rolles",
          "text": "Compilers -- with the exception of deliberately obfuscating compilers -- do not undertake any code generation actions specifically for the purpose of confusing disassemblers and decompilers.",
          "time": null
        }
      ]
    }
  ]
}