{
  "title": "Lifting exported function instructions in PE files",
  "link": "https://reverseengineering.stackexchange.com/questions/26761/lifting-exported-function-instructions-in-pe-files",
  "content": "I am trying to automate analysis of instructions within exported functions for a .DLL and need to be able to lift the first few instructions for the entry point of each exported function statically from disk without using a debugger.\n\nI retrieve the correct RVA for each exported function (verified by objdump's results):\n\n```\n     $objdump -p examples/MathLibrary.dll\n     ...\n     Export Table:\n     DLL name: MathLibrary.dll\n     Ordinal base: 1\n     Ordinal      RVA  Name\n          1  0x11212  fibonacci_current\n          2  0x1118b  fibonacci_index\n          3  0x1104b  fibonacci_init\n          4  0x11307  fibonacci_next\n\n```\nThen calculate what seems like the correct file offset using:\n\n```\n   fo = exports.address - section.VirtualAddress + section.PointerToRawData\n\n```\nSection refers to .text. Which gives me:\n\n```\n    1 RVA 0x11212 'fibonacci_current' file offset:  1554\n    Seeking to offset: 1554 to read 48 bytes.\n    Read 14 bytes 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0\n    2 0x1118b 'fibonacci_index' file offset:  1419\n    Seeking to offset: 1419 to read 48 bytes.\n    Read 5 bytes 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0\n    3 0x1104b 'fibonacci_init' file offset:  1099\n    Seeking to offset: 1099 to read 48 bytes.\n    Read 37 bytes 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0\n    4 0x11307 'fibonacci_next' file offset:  1799\n    Seeking to offset: 1799 to read 48 bytes.\n    Read 9 bytes 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0\n\n```\nI'm getting what looks like valid offsets that are located within the .text section however, the bytes there are all 00. This is verified by objdump.\n\n```\n    0001420      0000    0000    0000    0000    0000    0000    0040    4000\n    0001440      722e    6c65    636f    0000    05bb    0000    f000    0001\n    0001460      0600    0000    9200    0000    0000    0000    0000    0000\n    0001500      0000    0000    0040    4200    0000    0000    0000    0000\n    0001520      0000    0000    0000    0000    0000    0000    0000    0000\n    *\n    0002000      cccc    cccc    e9cc    4173    0000    71e9    002e    e900\n\n```\nWhat am I doing wrong? Is this not where the code is actually located? They aren't being forwarded, so the code is there somewhere. Thanks for your help.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "233",
  "tags": [
    "pe",
    "static-analysis"
  ],
  "user": "oso",
  "time": "Jan 13, 2021 at 16:42",
  "comments": [],
  "answers_data": [
    {
      "content": "An RVA is a relative virtual address, itâ€™s not a file offset.\n\nYou need to parse the section table to determine how file offsets map to RVAs and use that mapping to find your bytes on disk.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jan 15, 2021 at 1:37",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "if using win32 apis are an option you can try something along this line\n\nthe first example command uses cdb to gets rva and bytes for counter checking (something like you do with objdump)\n\nthe second is a python script which you can use as refernce to adapt in your language of choice\n\nthe third is actual execution and bytes fetched from  address\n\n```\n:\\>cdb -c \"? ntdll!ZwYieldExecution-ntdll;db ntdll!ZwYieldExecution l10;q\" cdb | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command '? ntdll!ZwYieldExecution-ntdll;db ntdll!ZwYieldExecution l10;q'\nEvaluate expression: 289512 = 00046ae8\n77366ae8  b8 90 01 00 00 ba 00 03-fe 7f ff 12 c3 90 90 90  ................\nquit:\n\n:\\>cat expbyte.py\nimport ctypes\nimport sys\nif(len(sys.argv) == 3):\n    ntstart = ctypes.windll.kernel32.LoadLibraryExW(sys.argv[1],0,2)\n    rva = int(sys.argv[2],16)\n    buff =[]\n    for i in range(0,16,1):\n        buff.append(ctypes.c_ubyte.from_address((ntstart+rva+i)).value)\n    for i in buff:\n        print(\"%02x \" % i, end =\"\")\nelse:\n    print(\"usage this script path rva\")\n\n\n:\\>expbyte.py c:\\Windows\\System32  \ntdll.dll 46ae8\nb8 90 01 00 00 ba 00 03 fe 7f ff 12 c3 90 90 90\n:\\>\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jan 15, 2021 at 10:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}