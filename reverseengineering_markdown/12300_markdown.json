{
  "title": "Question about LEA instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/12300/question-about-lea-instruction",
  "content": "i'm learning to reverse engineer. So i'm coding some programs and try to understand their assembly.\nI stumbled upon a curious case and i think i can't solve it alone.\n\nHere's the c code:\n\n```\n #include <stdio.h>\n\nint main(){\n\nchar *texto = \"O numero e %d  \n\";\nint i = 10;\n\nwhile(i){\n    printf(texto, i--);\n}\n\nreturn 0;\n}\n\n```\nThe assembly produced by IDA is the following:\n\n```\nmov     eax, [esp+28]\nlea     edx, [eax-1] ; The part i don't understand\nmov     [esp+28], edx\nmov     [esp+4], eax\nmov     eax, [esp+18h]\nmov     [esp], eax      ; char *\ncall    _printf\n\n```\nWhat i could understand is that it stores the old value in eax and pushes to stack(I purposedly didn't turn on optimizations) and then it pushes the format.\nWhile that happens in the middle it does the i--, but i can't understand how it's working. So it get's the address of eax-1 and stores in edx and then stores it in i, but eaxdoesn't hold an address but a value.\n\nThanks in advance.\n\n",
  "votes": "6",
  "answers": 2,
  "views": "7k",
  "tags": [
    "ida",
    "disassembly",
    "x86",
    "c"
  ],
  "user": "krystalgamer",
  "time": "Mar 29, 2016 at 11:22",
  "comments": [
    {
      "user": "Vitaly Osipov",
      "text": "lea edx, [blah-1] is essentially mov edx, blah-1 (the latter is obviously not a valid command)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What you're seeing is an efficiency trick that compilers like to use.\n\nInternally, the CPU doesn't make a difference between numbers and addresses - 32 bit integers and pointers are the same thing. (Or 64 bit, if you're using newer architecture, but as your register names start with e, you're using 32 bit).\n\nThe lea instruction loads the address of its operand, instead of the operand itself. In C terms, you could look at [eax-1] as *(eax-1), and lea adds a & operator to that, so lea edx, [eax-1] is like edx = &(*(eax-1)). Which is the same as eax-1 of course.\n\nThe compiler could have done exactly the same using the instruction sequence mov edx, eax; sub edx, 1 or mov edx, eax; dec edx. So, why did it use the lea instruction?\n\nThe answer is that, historically, resolving addresses in lea was done using dedicated address bus hardware and bypassed the ALU. Also, pipelining had its issues when the same register was used twice in subsequent operations. Which means, on older processors, using lea was a few cycles faster than the alternatives, and it's not hard to implement in the compiler, so this is what compilers traditionally did.\n\nOn new processors, the distinction \"lea uses separate hardware\" isn't (neccesarily) made any more, and pipelining is a lot more intelligent than it used to be, so i doubt it's make any difference these days. But it's still in the compilers, and won't get removed from them because there's just no good reason to.\n\n",
      "votes": "11",
      "user": "Guntram Blohm",
      "time": "Mar 29, 2016 at 12:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "krystalgamer",
          "text": "Understanding the &(*(eax-1)) eas the problem. Thanks for the complete and in-depth answer!",
          "time": null
        },
        {
          "user": "John Dvorak",
          "text": "Even today it reduces the code size. Is that not a win?",
          "time": null
        },
        {
          "user": "supercat",
          "text": "@JanDvorak: Wouldn't storing EAX to [ESP+4], and then using \"dec eax\" and storing EAX to [ESP+28] save even more code?  I know modern CPUs are slower on \"inc\" and \"dec\" than \"add\", but I think those are still single-byte instructions are they not?",
          "time": null
        },
        {
          "user": "DarthGizka",
          "text": "@Jan: Modern compilers  tend inline aggressively at the slightest provocation, so a minuscule savings here and there will go unnoticed among the hyper-bloat. Also, CPUs have so many ALUs nowadays that hardly anyone will notice that lea doesn't use any.  However, lea leaves the flags alone, it can reduce register pressure (always an issue in x86 mode!), and it can shorten dependency chains. What's not to like? ;-)",
          "time": null
        },
        {
          "user": "Joshua",
          "text": "Actually, it makes a lot of difference still. In this case the generation is silly because the constant is 1, but in most cases it is better than the mov / add pair or even move / add / add triplet that would otherwise be used.",
          "time": null
        }
      ]
    },
    {
      "content": "According to Intel the LEA instruction is:\n\nSo, the lea edx, [eax-1] computes the address of [eax-1], which is eax-1, because [] means that the operand should be handled as an address. After it the address will be stored in edx.\n\n",
      "votes": "1",
      "user": "ebux",
      "time": "Mar 29, 2016 at 11:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "krystalgamer",
          "text": "Im always messing up thinking registers have addresses.. Now i understand it subtracts 1. Thanks!",
          "time": null
        }
      ]
    }
  ]
}