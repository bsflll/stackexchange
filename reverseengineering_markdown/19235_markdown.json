{
  "title": "Purpose of test eax,eax after a strcmp",
  "link": "https://reverseengineering.stackexchange.com/questions/19235/purpose-of-test-eax-eax-after-a-strcmp",
  "content": "This is my first program i am trying to reverse and my intro to this field.\n\nThe C program will test if two strings match, and it will printf() a message for each occasion.\n\nThis is what the reversed code snippet looks like:\n\n```\ncall strcmp //compares the strings\ntest eax,eax\njne 1706\n\n```\nI know that jne will jump, if ZF=0.\n\nWhat i do not understand is what's up with this line:\n\n```\ntest eax,eax\n\n```\nWhat caused this line?\nHow does it relate with strcmp?\n\nI know that if the result of test is not zero, ZF=0, so jne will jump.\nBut what does it compare exactly, and how does it relate to strcmp?\n\n",
  "votes": "16",
  "answers": 5,
  "views": "36k",
  "tags": [
    "disassembly",
    "assembly",
    "c"
  ],
  "user": "user1584421",
  "time": "Sep 3, 2018 at 10:40",
  "comments": [
    {
      "user": "fpmurphy",
      "text": "EAX is the register used by IA32 calling conventions to either return an interger value or a memory address to the calling routine.  By design, strcpy can return either -1,0 or 1 in EAX with 0 indicating  both strings match.  TEST EAX,EAX tests whether EAX is zero or not and sets or unsets the ZF bit.",
      "time": null
    },
    {
      "user": "Peter Cordes",
      "text": "strcpy returns an integer in EAX, not in FLAGS.   See `testl` eax against eax? for how this instruction sets flags according to EAX.",
      "time": null
    },
    {
      "user": "Peter Cordes",
      "text": "It's equivalent to cmp eax,0 : Test whether a register is zero with CMP reg,0 vs OR reg,reg? and `testl` eax against eax?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Register eax will contain the return code from strcmp, after the call. The test eax, eax is the same as and eax, eax (bitwise and) except that it doesn't store the result in eax. So eax isn't affected by the test, but the zero-flag is, for example.\n\nThe test eax, eax is necessary to make the jne work in the first place. And jne is the same as jnz, just as je is the same as jz. Both act based on the ZF (zero-flag) value.\n\nThe jne branch will be taken if ZF=0 and therefore whenever strcmp returns a non-zero value (i.e. strings not equal). Conversely if eax contains zero upon return from strcmp, the jump via jne will not happen.\n\n",
      "votes": "23",
      "user": "0xC0000022L",
      "time": "Sep 3, 2018 at 12:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "josh",
          "text": "strcmp compares the strings and sets eax to zero if the strings are equal",
          "time": null
        },
        {
          "user": "user1584421",
          "text": "I mean, it does a logical AND. But what exactly does it checks? How will the jne, not fire? What would have to be the value of eax for jne to not jump?",
          "time": null
        },
        {
          "user": "user1584421",
          "text": "What are the conditions for jne jumping and not jumping? What does eax have to be in order to jump/not jump? And how does this relates to strcmp?",
          "time": null
        },
        {
          "user": "hobbs",
          "text": "@user1584421 think for a second and put together what you already know. eax contains the return value of strcmp. test is like bitwise and except it only sets the flags. Anding a value with itself gives the same value, so test eax, eax sets the flags based on whatever eax contains. ZF is set when the result of an operation is zero. jne jumps when ZF is not set. So the jump will be taken when strcmp returns nonzero, meaning the strings are unequal.",
          "time": null
        }
      ]
    },
    {
      "content": "You might be missing the fact that call strcmp will not set ZF for you - it returns the result in the EAX register. But JNE instruction tests ZF, and that test eax, eax serves to set ZF according to EAX. (actually, the opposite way, EAX=1 -> ZF=0).\n\nI recommend reading some easy book on x86 assembly, it will help you a lot.\n\n",
      "votes": "12",
      "user": "Edheldil",
      "time": "Sep 3, 2018 at 15:36",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "prototype of strcmp() \n\n```\nint strcmp(\n   const char *string1,\n   const char *string2 \n);\n\n```\nthe function returns an int whose interpretation is as follows\nso i think that answers your question of when it jumps and when not\nit jumps if eax is either > or < 0\nit does not jump if eax == 0     \n\n```\nReturn Value\nThe return value for each of these functions indicates   \nthe lexicographic relation of string1 to string2.\n\n< 0   string1 less than string2\n\n  0   string1 identical to string2\n\n> 0   string1 greater than string2\n\n```\ntest eax,eax does a binary and of both inputs\nand for it to jump eax needs to be 0 \nif eax is 0 test eax,eax will set the ZF to 1\nelse it will set the ZF to 0\nnormally test eax will be used if the program in higher languages test\nthe result like this    \n\n```\nif(!strcmp( a, b ) ) { do something } \n\n```\nsee a sample program and disassembly below\n\n```\n>>> eax = -1\n>>> print eax & eax\n-1\n>>> eax = 0\n>>> print eax & eax\n0\n>>> eax = 1\n>>> print eax & eax\n1\n>>>\n\n```\nsample program\n\n```\n#include <stdio.h>\n#include <string.h>\n\nint main (void) {\n    char *first=\"same\";char *secon=\"same\";char *third=\"diff\";char *forth=\"tiff\";\n    int fis = strcmp(first,secon);\n    int sec = strcmp(first,third);\n    int tid = strcmp(first,forth);\n    printf(\"%8x %8x %8x  \n\",fis,sec,tid);\n    if(!strcmp(first,secon)){\n        printf(\"trings are same   \n\");\n    }\n    if( strcmp(first,third) == 1 ) {\n        printf(\"second string has a chareceter that is greater than first string  \n\");\n    }\n        if( strcmp(first,forth) == -1 ) {\n        printf(\"second string has a chareceter that is lesser than first string  \n\");\n    }\n\n}\n\n```\ndisassembly of main \n\n\n",
      "votes": "8",
      "user": "blabb",
      "time": "Sep 3, 2018 at 21:06",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Basically, the original C code associated with this assembly code would be:\n\n```\nif (strcmp (str1, str2)) // call strcmp and do the 'test eax, eax'\n  goto error; // str1 != str2 --> jne 1706\n\n// str1 == str2\n// Do legitimate code\n\nerror:\n  // Do what you need to handle the error\n\n```\nIf you want a way to remember what does test eax, eax it can be translated like this in C:\n\n```\nbool test = (eax == 0)\n\n```\nNote that eax is used to store the return code of a function, the test test eax, eax is very often used to check this return code after a call (usually, this is the converse and eax == 0 means that an error occurred).\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Sep 3, 2018 at 17:21",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The test in assembly is similar to and instruction but the only difference is, it just updates ZF in the EFLAGS or RFLAGS register based on whether you're using x86 or x64 architecture and not store the result in destination operand, unlike and instruction.\n\nIn c the strcmp is the string library function ,which compares the passed destination and source string arguments untill it found mismatch or it founds a NULL terminator in any of the strings.\n\nThis is one way  implementing strcmp function in c:-\n\n```\nint strCmp(const char* s1, const char* s2)\n{\n    while(*s1 && (*s1 == *s2))\n    {\n        s1++;\n        s2++;\n    }\n    return *(const unsigned char*)s1 - *(const unsigned char*)s2;\n}\n\n```\nThis function performs lexicographical analysis on both given strings.\n\nReturn Value:\n\nThe strcmp() function returns three different values after the comparison of the two strings which are as follows:\n\nZero (0): It returns zero when all of the characters at given indexes in both strings are the same.\n\nGreater than Zero ( > 0 ): Returns a value greater than zero is returned when the first not-matching character in s1 has a greater ASCII value than the corresponding character in s2.\n\nLesser than Zero ( < 0 ): Returns a value less than zero is returned when the first not-matching character in s1 has a lesser ASCII value than the corresponding character in s2.\n\nSo why test eax,eax instruction is used there, in x86 calling convention eax is the register used to return from the function.\n\nIf the return value zero, performing and operation on two zero values always result in zero.\n\nIf the return value is non zero, performing and operation on two non-zero values always result in that non-zero value\n\nSo based on this, by performing and operation using test instruction we ensure that the return value from strcmp is zero , which means both strings are equal without modifying the value stored in eax,by just checking ZF is set or not.\n\nNote: test instruction set the ZF flag based on the and operation result of two opernads.\n\n",
      "votes": "0",
      "user": "Nalan PandiKumar",
      "time": "Feb 3 at 7:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}