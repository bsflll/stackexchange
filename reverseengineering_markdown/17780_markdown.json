{
  "title": "De-obfuscation - Emulation-oriented vs Script-oriented",
  "link": "https://reverseengineering.stackexchange.com/questions/17780/de-obfuscation-emulation-oriented-vs-script-oriented",
  "content": "What are the advantages of each method when employing de-obsfucation of potentially malicious code?\n\nI've been told to always use emulators like x86emu since it doesn't actually run the code when performing the de-obsfucation but  I wonder if there are any reasons to use IDA scripts to perform this kind of task. \n\n",
  "votes": "1",
  "answers": 1,
  "views": "325",
  "tags": [
    "ida",
    "malware",
    "ida-plugin",
    "deobfuscation"
  ],
  "user": "Trey",
  "time": "Mar 23, 2018 at 20:31",
  "comments": [],
  "answers_data": [
    {
      "content": "The approaches you mentioned:\n\nScripting static analysis with IDA: \nGreat for removing automatically inserted bloat like PUSH EBX; add EBX, ECX; pop EBX, great for automatically finding and extracting relevant values. Sometimes a good way for decryption (if the malware just XORs stuff with 0x17 having your script do that is easier than running the decryption code in emulator).\n\nUsing emulators (scripted or not)\nGreat for following hyper-obfuscated code that jumps into the middle of instructions and confuses static analysis. Has limited environment model, so it will fail once the malware uses exception handling or calls APIs.\n\nUsing debugger (scripted or not): \nYes, you can do that if you are careful. Good for following the code, good for bypassing self-decryption, good for dumping. Security measures I recommend:\n\n",
      "votes": "1",
      "user": "manduca",
      "time": "Mar 25, 2018 at 9:03",
      "is_accepted": true,
      "comments": []
    }
  ]
}