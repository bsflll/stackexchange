{
  "title": "conflict function name using objdump to disassemble",
  "link": "https://reverseengineering.stackexchange.com/questions/4336/conflict-function-name-using-objdump-to-disassemble",
  "content": "So basically when I am using objdump and readelf to disassemble some GNU Coreutils, I find a very weird situation like this: \n\n```\nreadelf -s pr | grep bkm_scale\n\n....\n176: 08050620   118 FUNC    LOCAL  DEFAULT   13 bkm_scale\n177: 080506a0    39 FUNC    LOCAL  DEFAULT   13 bkm_scale_by_power\n181: 08050a60   173 FUNC    LOCAL  DEFAULT   13 bkm_scale\n182: 08050b10    50 FUNC    LOCAL  DEFAULT   13 bkm_scale_by_power\n\n```\nand when I disassemble pr using objdump, I do see two definition of function bkm_scale and bkm_scale_by_power, and their disassembled asm code are different.\n\nSo does it indicate some disassemble error? If not, then why there are two FUNC symbols have the same name?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "889",
  "tags": [
    "disassembly",
    "objdump",
    "reassembly"
  ],
  "user": "lllllllllllll",
  "time": "May 15, 2014 at 3:23",
  "comments": [],
  "answers_data": [
    {
      "content": "Looks like those are LOCAL definitions, perhaps defined in two places to allow slightly different versions to be used.   They're not global functions, which would be constrained to only appear (or be defined) once.\n\nPerhaps defined in several files, statically, so they're only used (or scoped to) in that particular file.\n\nI don't see those functions in the output of readelf -s, or objdump on my system's installed 'pr'.  I imagine you've compiled the coreutils yourself?\n\nSince you're playing with the source code of 'pr', you could grep for bkm_scale and bkm_scale_by_power to see where they're used and defined.\n\nKeep exploring!  Keep learning!\n\n",
      "votes": "4",
      "user": "lornix",
      "time": "May 15, 2014 at 7:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}