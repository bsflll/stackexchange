{
  "title": "ldd doesn't show dynamic libraries",
  "link": "https://reverseengineering.stackexchange.com/questions/8512/ldd-doesnt-show-dynamic-libraries",
  "content": "I'm trying understand how some parts of a closed source program distributed as a stripped binary implemented. When I run ldd on the program, it prints only 4-5 most basic C libraries as dynamic dependencies. (e.g. libc, glib, gobject etc.) However, when I run it in gdb or attach gdb to it and run info sharedlibrary, it prints a huge list of libraries. Indeed, that program clearly uses GTK for GUI, for example, but gtk libraries are missing in ldd output and shown in info sharedlibrary output.\n\nI was wondering does it work and how did they achieve this. Any ideas?\n\nThanks.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "gdb",
    "libraries",
    "dynamic-linking"
  ],
  "user": "osa1",
  "time": "Mar 22, 2015 at 2:13",
  "comments": [],
  "answers_data": [
    {
      "content": "They can load their dynamic libraries dynamically by using dlopen and dlsym functions.\nHere is the man page of dlsym and usage example\n\n",
      "votes": "1",
      "user": "w s",
      "time": "Mar 22, 2015 at 7:33",
      "is_accepted": true,
      "comments": [
        {
          "user": "osa1",
          "text": "You're definitely correct, I set breakpoints on dlopen and dlsym, and it stopped at dlopen. When I print (char*) $rdi it printed \"libcairo.so\". Now, my question is, why would they do that? Those libraries export huge number of symbols, are they manually linking all of them? Any ideas why would I want this?",
          "time": null
        },
        {
          "user": "w s",
          "text": "They probably do it for cross-platform compatibility reasons.",
          "time": null
        }
      ]
    }
  ]
}