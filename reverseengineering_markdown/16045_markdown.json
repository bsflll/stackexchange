{
  "title": "Need help understanding \"garbage\" data in https request",
  "link": "https://reverseengineering.stackexchange.com/questions/16045/need-help-understanding-garbage-data-in-https-request",
  "content": "I managed to overcome certificate pinning in an android application and I am now able to view all the HTTPS request in plain text. However, I came across this request that I still do not understand:\n\n\n\nWe can see that it is a POST request with some 'junk' data at the bottom. At first, I thought this 'junk' is some form of encrypted data. However, after looking at the decompiled source code, it does not seem to use any form of encryption as shown below.\n\n```\n@Override\npublic List<byte[]> sendBatch(String serializable, List<byte[]> list) throws AmazonClientException {\n    void var2_7;\n    void var1_3;\n    if (var2_7 == null || var2_7.isEmpty()) {\n        List list2 = Collections.emptyList();\n        return var1_3;\n    } else {\n        PutRecordBatchRequest putRecordBatchRequest = new PutRecordBatchRequest();\n        putRecordBatchRequest.setDeliveryStreamName((String)((Object)serializable));\n        ArrayList<Record> arrayList = new ArrayList<Record>(var2_7.size());\n        for (byte[] arrby : var2_7) {\n            Record record = new Record();\n            record.setData(ByteBuffer.wrap(arrby));\n            arrayList.add(record);\n        }\n        putRecordBatchRequest.setRecords(arrayList);\n        putRecordBatchRequest.getRequestClientOptions().appendUserAgent(this.userAgent);\n        PutRecordBatchResult putRecordBatchResult = this.client.putRecordBatch(putRecordBatchRequest);\n        int n2 = putRecordBatchResult.getRequestResponses().size();\n        ArrayList arrayList2 = new ArrayList(putRecordBatchResult.getFailedPutCount());\n        int n3 = 0;\n        do {\n            ArrayList arrayList3 = arrayList2;\n            if (n3 >= n2) return var1_3;\n            if (putRecordBatchResult.getRequestResponses().get(n3).getErrorCode() != null) {\n                arrayList2.add(var2_7.get(n3));\n            }\n            ++n3;\n        } while (true);\n    }\n}\n\n```\nI searched for the method putRecordBatch and came across the docs: http://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html\nand realise that the syntax is of the form:\n\n```\n{\n   \"DeliveryStreamName\": \"string\",\n   \"Records\": [ \n      { \n         \"Data\": blob\n      }\n   ]\n}\n\n```\nwhere I believe the 'junk' data is simply just another form of the json object above. Is there any way I can convert this junk data to a more readable form?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "136",
  "tags": [
    "android",
    "java",
    "apk",
    "byte-code",
    "https-protocol"
  ],
  "user": "Lew Wei Hao",
  "time": "Aug 9, 2017 at 15:31",
  "comments": [
    {
      "user": "JesusFreke",
      "text": "The problem is that your https request is full of squiggly red lines :)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The content is encoded with gzip per the Content-encoding header. You can use the decoder in Burp proxy (if that is what you are currently using) to decode the data or by using for intance gunzip in the Linux command line.\n\n",
      "votes": "2",
      "user": "Sherman123",
      "time": "Aug 9, 2017 at 16:09",
      "is_accepted": true,
      "comments": [
        {
          "user": "Lew Wei Hao",
          "text": "Hi I tried Decoding as gzip using Burp decoder but the output still doesn't make sense. Maybe I'm supposed to copy the output to a file? Is there any way I can copy the hex values from burp decoder? When I try to copy the values raw and paste it in any editor, the whole output gets shrunk to just 2 bytes",
          "time": null
        },
        {
          "user": "Lew Wei Hao",
          "text": "ah nevermind i got it to decode properly using smart decode instead of gzip decode",
          "time": null
        }
      ]
    }
  ]
}