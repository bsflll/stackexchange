{
  "title": "Obfuscation indirect address",
  "link": "https://reverseengineering.stackexchange.com/questions/31550/obfuscation-indirect-address",
  "content": "I'm studying a reverse engineering course and here is an example about obfuscation indirect addresses:\n\n\n\nThe course says:\n\nI don't understand points 3 and 4.\nWill the last byte at the L1 line be incremented by 2?\nWhat really happens?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "92",
  "tags": [
    "obfuscation"
  ],
  "user": "nerios",
  "time": "May 6, 2023 at 20:40",
  "comments": [],
  "answers_data": [
    {
      "content": "Point 3 describes the self-modification of the \"MOV DL,BL\" instruction, that will become \"MOV BL,DL\".  However, the \"Therefore\" part is wrong.  DL is not defined, it might not hold 72 afterwards.  The \"LEA\" line should say \"L1+1\", otherwise the wrong part of the instruction is modified.\n\nPoint 4 is wrong because point 3 is wrong.  It's trying to describe which register will be used after the self-modification.  The intention is that CH is no longer being moved, and CL would be used instead, but the faulty obfuscation does not involve CL, so the point is lost.\n\n",
      "votes": "2",
      "user": "peter ferrie",
      "time": "Feb 18, 2023 at 6:58",
      "is_accepted": false,
      "comments": [
        {
          "user": "nerios",
          "text": "Thanks Peter, I think I understand the principle Too bad the example is wrong",
          "time": null
        }
      ]
    }
  ]
}