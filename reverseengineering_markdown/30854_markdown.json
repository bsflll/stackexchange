{
  "title": "Auto-loaded type information and relationship between .til and .sig: how to find links and how to change them (config)?",
  "link": "https://reverseengineering.stackexchange.com/questions/30854/auto-loaded-type-information-and-relationship-between-til-and-sig-how-to-find",
  "content": "NB: most of my targets are PE files for pc, so I'll stick with that for the question. But I suppose the principle holds also for the related directories, like $IDADIR/sig/arm.\n\nLet's say I load a PE file, which happens to be a 64-bit Windows driver. I may then see in the Output pane (redacted for brevity):\n\n```\nIDA is analysing the input file...\nYou may start to explore the input file right now.\n...\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nPropagating type information...\n\n```\nNow \"Windows Driver Kit 7/10 64bit\" corresponds to $IDADIR/sig/pc/ms64wdk.sig (found with dumpsig). Fair enough. I also know that $IDADIR/sig/pc/autoload.cfg governs what type information library (.til) file gets loaded based on the loading of a signature.\n\nAlas, there is no entry that maps the aforementioned $IDADIR/sig/pc/ms64wdk.sig to ntddk64_win7 and ntapi64_win7. Yet, when I use Produce file -> Dump database to IDC file... the resulting .idc file has the following calls among its first actions (again redacted for brevity):\n\n```\n#define UNLOADED_FILE   1\n#include <idc.idc>\n\nstatic main(void) {\n    // ...\n    GenInfo();            // various settings\n    // ...\n}\n\nstatic GenInfo(void) {\n\n    // ...\n    add_default_til(\"ntddk64_win7\");\n    add_default_til(\"ntapi64_win7\");\n}\n\n```\nPS: Pointers to official documentation very much welcome.\n\n",
  "votes": "2",
  "answers": 0,
  "views": "206",
  "tags": [
    "ida"
  ],
  "user": "0xC0000022L",
  "time": "Sep 5, 2022 at 15:34",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Meanwhile I noticed, that a bunch of those names are hardcoded in some of the loaders, processors and plugins that come with IDA, as well as the ida.dll and ida64.dll. So there's clearly more than autoload.cfg at work here.",
      "time": null
    }
  ],
  "answers_data": []
}