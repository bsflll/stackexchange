{
  "title": "Is all debug information of VS-compiled PE files contained in an external PDB file?",
  "link": "https://reverseengineering.stackexchange.com/questions/17288/is-all-debug-information-of-vs-compiled-pe-files-contained-in-an-external-pdb-fi",
  "content": "I read here that some PE files have debug information baked into the PE file. Is this only the case for older PE files?\n\nIs it safe to assume that all Visual Studio compiled PE files have all debug information (if any) in an external PDB file, i.e. do not contain debug information other than the path to a PDB file?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "371",
  "tags": [
    "pe",
    "compilers",
    "debugging-symbols",
    "pdb"
  ],
  "user": "langlauf.io",
  "time": "Jan 25, 2018 at 13:13",
  "comments": [],
  "answers_data": [
    {
      "content": "Old versions of link.exe supported the /debugtype argument that used these options:\n\n```\n/debugtype:coff    \n   use COFF format\n/debugtype:cv\n   use CodeView or Program Database format (depends on /pdb option) \n/debugtype:both   \n   use both COFF and CodeView/Program Database formats\n\n```\nAccording to the MSDN docs for Visual Studio 2008's linker, that option was no longer available; and the information for the /debug switch states that \"it is not possible to create an .exe or .dll that contains debug information. Debug information is always placed in a .pdb file.\"\n\nSo anything built with Microsoft tools from the last decade won't have embedded symbol information.\n\n",
      "votes": "3",
      "user": "josh poley",
      "time": "Jan 25, 2018 at 17:18",
      "is_accepted": true,
      "comments": []
    }
  ]
}