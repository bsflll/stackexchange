{
  "title": "Get return address from syscall",
  "link": "https://reverseengineering.stackexchange.com/questions/24932/get-return-address-from-syscall",
  "content": "I'm debugging some 32-bit process using windbg kernel debugger. This process calls some syscalls, so I set few breakpoints at kernel functions like nt!NtQuerySystemInformation. So after breakpoint hit, what's the easiest way to trace back from kernel function to place where syscall was called in user-mode process? It's wow64 so call stack doesn't help, this is how it looks like:\n\n```\n[0x0]   nt!NtQuerySystemInformation   \n[0x1]   nt!KiSystemServiceExitPico + 0x25e   \n[0x2]   ntdll!NtQuerySystemInformation + 0x14   \n[0x3]   wow64!whNT32QuerySystemInformation + 0x34   \n[0x4]   wow64!whNtQuerySystemInformation + 0xb4   \n[0x5]   wow64!Wow64SystemServiceEx + 0x15a   \n[0x6]   wow64cpu!ServiceNoTurbo + 0xb   \n[0x7]   wow64cpu!BTCpuSimulate + 0x9   \n[0x8]   wow64!RunCpuSimulation + 0xd   \n[0x9]   wow64!Wow64LdrpInitialize + 0x12d   \n[0xa]   ntdll!LdrpInitializeProcess + 0x193e   \n[0xb]   ntdll!_LdrpInitialize + 0x4cd95   \n[0xc]   ntdll!LdrpInitialize + 0x3b   \n[0xd]   ntdll!LdrInitializeThunk + 0xe   \n\n```\nI don't want to set breakpoints at usermode modules, have to trace it back from kernel. I've found out that jmp fword ptr [r14] at the end of wow64cpu!RunSimulatedCode is used to jump back to usermode. However RunSimulatedCode isn't always called, some functions use something else. Moreover, after jumping back to usermode windbg cannot retrieve user mode call stack.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "590",
  "tags": [
    "windows",
    "debugging",
    "windbg",
    "kernel"
  ],
  "user": "kozera2137",
  "time": "May 6, 2020 at 11:29",
  "comments": [],
  "answers_data": [
    {
      "content": "The syscall instruction is always invoked in long mode, by the 64-bit ntdll (there are two ntdll in a wow64 process), so the return to user mode should be there. The jmp fword ptr [r14] instruction jumps back to x86 code from x64. \n\nWhen dealing with mixed mode stacks in WinDbg, the wow64ext extension is useful, e.g.:\n\n```\n!load wow64ext\n!wow64exts.info\n!wow64exts.k\n\n```\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "May 6, 2020 at 12:33",
      "is_accepted": true,
      "comments": []
    }
  ]
}