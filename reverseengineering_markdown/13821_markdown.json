{
  "title": "Identify and/or reverse compression algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/13821/identify-and-or-reverse-compression-algorithm",
  "content": "I have a program that read some proprietary files that are compressed. I managed to debug the program and extract the algorithm that decompress the data and use it on my software without any issue. Now I need to implement the compression algorithm but I am wondering if it would be worth the work to reverse the following ASM code as it could be a well known compression algorithm but I am not sure. I already made some tests with zlib an lz77 but it seems that is not the algorithm.\n\nDecompression algorithm:\n\n```\nConvertShellcode 3.0\n***********************************************************************\nCopyright (C) 2009-2015 Alain Rioux (le-tools.com). All rights reserved.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n***********************************************************************\n\nAssembly language source code :\n***************************************\n00000000  sub esp,0x18\n00000003  push ebp\n00000004  push edi\n00000005  mov edi,dword[ss:esp+0x24]\n00000009  xor eax,eax\n0000000b  xor ecx,ecx\n0000000d  mov edx,0xc\n00000012  mov ah,byte[edi+0xa]\n00000015  mov cl,byte[edi+0x8]\n00000018  mov al,byte[edi+0x9]\n0000001b  shl eax,0x8\n0000001e  or eax,ecx\n00000020  mov dword[ss:esp+0x1c],eax\n00000024  mov eax,0x0\n00000029  mov byte[ss:esp+0xb],al\n0000002d  mov byte[ss:esp+0xa],al\n00000031  mov ebp,eax\n00000033  jbe 0x1ab\n00000039  push ebx\n0000003a  mov ebx,dword[ss:esp+0x2c]\n0000003e  push esi\n0000003f  mov al,byte[ss:esp+0x12]\n00000043  test al,al\n00000045  jne 0x54\n00000047  mov al,byte[edx+edi*1]\n0000004a  mov byte[ss:esp+0x12],0x8\n0000004f  mov byte[ss:esp+0x13],al\n00000053  inc edx\n00000054  test byte[ss:esp+0x13],0x1\n00000059  jne 0x68\n0000005b  mov cl,byte[edx+edi*1]\n0000005e  inc edx\n0000005f  mov byte[ebx+ebp*1],cl\n00000062  inc ebp\n00000063  jmp 0x181\n00000068  mov al,byte[edx+edi*1]\n0000006b  mov cl,byte[edx+edi*1+0x1]\n0000006f  mov byte[ss:esp+0x18],al\n00000073  add edx,0x2\n00000076  and al,0xf\n00000078  mov byte[ss:esp+0x14],cl\n0000007c  mov byte[ss:esp+0x20],al\n00000080  jne 0xbc\n00000082  mov esi,dword[ss:esp+0x14]\n00000086  mov eax,dword[ss:esp+0x18]\n0000008a  and esi,0xff\n00000090  and eax,0xff\n00000095  shl esi,0x4\n00000098  shr eax,0x4\n0000009b  add esi,eax\n0000009d  xor eax,eax\n0000009f  mov al,byte[edx+edi*1]\n000000a2  add eax,0x10\n000000a5  je 0xb6\n000000a7  mov ecx,ebp\n000000a9  sub ecx,esi\n000000ab  inc ebp\n000000ac  dec eax\n000000ad  mov cl,byte[ecx+ebx*1]\n000000b0  mov byte[ebx+ebp*1+0xffffffff],cl\n000000b4  jne 0xa7\n000000b6  inc edx\n000000b7  jmp 0x181\n000000bc  cmp al,0x1\n000000be  jne 0x108\n000000c0  mov eax,dword[ss:esp+0x14]\n000000c4  mov ecx,dword[ss:esp+0x18]\n000000c8  and eax,0xff\n000000cd  and ecx,0xff\n000000d3  lea edi,[ebx+ebp*1]\n000000d6  mov bl,al\n000000d8  shr ecx,0x4\n000000db  mov bh,bl\n000000dd  add ecx,0x3\n000000e0  mov eax,ebx\n000000e2  mov dword[ss:esp+0x1c],ecx\n000000e6  mov esi,ecx\n000000e8  shl eax,0x10\n000000eb  mov ax,bx\n000000ee  mov ebx,dword[ss:esp+0x30]\n000000f2  shr ecx,0x2\n000000f5  rep stos dword[es:edi]\n000000f7  mov ecx,esi\n000000f9  and ecx,0x3\n000000fc  rep stos byte[es:edi]\n000000fe  mov edi,dword[ss:esp+0x2c]\n00000102  mov eax,esi\n00000104  add ebp,eax\n00000106  jmp 0x181\n00000108  cmp al,0x2\n0000010a  jne 0x14b\n0000010c  mov eax,dword[ss:esp+0x14]\n00000110  mov ecx,dword[ss:esp+0x18]\n00000114  and eax,0xff\n00000119  and ecx,0xff\n0000011f  shl eax,0x4\n00000122  shr ecx,0x4\n00000125  lea esi,[edx+edi*1]\n00000128  lea edi,[ebx+ebp*1]\n0000012b  lea ecx,[eax+ecx*1+0x12]\n0000012f  mov dword[ss:esp+0x1c],ecx\n00000133  mov eax,ecx\n00000135  shr ecx,0x2\n00000138  rep movs dword[es:edi],dword[esi]\n0000013a  mov ecx,eax\n0000013c  add edx,eax\n0000013e  and ecx,0x3\n00000141  add ebp,eax\n00000143  rep movs byte[es:edi],byte[esi]\n00000145  mov edi,dword[ss:esp+0x2c]\n00000149  jmp 0x181\n0000014b  mov esi,dword[ss:esp+0x14]\n0000014f  mov ecx,dword[ss:esp+0x18]\n00000153  mov eax,dword[ss:esp+0x20]\n00000157  and esi,0xff\n0000015d  and ecx,0xff\n00000163  shl esi,0x4\n00000166  shr ecx,0x4\n00000169  add esi,ecx\n0000016b  and eax,0xff\n00000170  jbe 0x181\n00000172  mov ecx,ebp\n00000174  sub ecx,esi\n00000176  inc ebp\n00000177  dec eax\n00000178  mov cl,byte[ecx+ebx*1]\n0000017b  mov byte[ebx+ebp*1+0xffffffff],cl\n0000017f  jne 0x172\n00000181  mov al,byte[ss:esp+0x12]\n00000185  mov cl,byte[ss:esp+0x13]\n00000189  dec al\n0000018b  mov byte[ss:esp+0x12],al\n0000018f  mov eax,dword[ss:esp+0x24]\n00000193  shr cl,0x1\n00000195  cmp ebp,eax\n00000197  mov byte[ss:esp+0x13],cl\n0000019b  jb 0x3f\n000001a1  pop esi\n000001a2  pop ebx\n000001a3  mov eax,ebp\n000001a5  pop edi\n000001a6  pop ebp\n000001a7  add esp,0x18\n000001aa  ret\n000001ab  mov eax,ebp\n000001ad  pop edi\n000001ae  pop ebp\n000001af  add esp,0x18\n000001b2  ret\n\n```\nAnd this is the output of signsrch.exe:\n\n```\noffset   num  description [bits.endian.size]\n  --------------------------------------------\n  00013888 641  CRC-32-IEEE 802.3 [crc32.0x04c11db7 le rev int_min.1024]\n  00013888 648  CRC-32-IEEE 802.3 [crc32.0xedb88320 lenorev 1.1024]\n  00013c8c 2294 zinflate_lengthExtraBits [32.le.116]\n  00013cfd 2304 zinflate_distanceExtraBits [32.be.120]\n  00013d00 2303 zinflate_distanceExtraBits [32.le.120]\n  000142d0 1086 Zlib dist_code [..512]\n  000144d0 1087 Zlib length_code [..256]\n  000145d0 1089 Zlib base_length [32.le.116]\n  00014644 1091 Zlib base_dist [32.le.120]\n  00014738 2291 zinflate_lengthStarts [32.le.116]\n  000147b1 2295 zinflate_lengthExtraBits [32.be.116]\n  00014830 2298 zinflate_distanceStarts [32.le.120]\n  00016dd0 871  ACSS reverse sbox [..256]\n  00016dd0 1963 FFT and FHT routines rv_tbl [..128]\n  00018ea8 3038 unlzx table_three [32.le.64]\n\n```\nDoes anyone knows if this is a known compression algorithm? If no, is there any advice on how to reverse it quickly?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "assembly",
    "decompress"
  ],
  "user": "Miguel Febres",
  "time": "Oct 26, 2016 at 20:48",
  "comments": [
    {
      "user": "NirIzr",
      "text": "It could've been nice if the addresses in the signsrch and disassembly outputs were aligned...",
      "time": null
    },
    {
      "user": "w s",
      "text": "I'd suggest to try also lzo, lzx and lzw - they are different and as far as I know not compatible.",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "You could have saved some time by looking at what this code does. It does not use a dictionary, so it's not an Huffmann type of compression. It strongly smells like an optimized run length encoding, but it could also be something like the original LZ.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "QuickBMS has a script (comtype_scan) which tries to bruteforce multiple decompression algorthms.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 27, 2016 at 7:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}