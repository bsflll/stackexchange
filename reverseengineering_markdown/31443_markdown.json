{
  "title": "What does the function code do",
  "link": "https://reverseengineering.stackexchange.com/questions/31443/what-does-the-function-code-do",
  "content": "What does this code do?\n\n```\n.text:0048EBCD                 mov     ecx, dword_4CEAC8\n.text:0048EBD3                 mov     edx, dword_4CEACC\n.text:0048EBD9                 mov     [ebp+var_4], eax\n.text:0048EBDC                 mov     eax, dword_4CEAD0\n.text:0048EBE1                 mov     [ebp+var_28], ecx\n.text:0048EBE4                 mov     cl, byte_4CEAD4\n.text:0048EBEA                 mov     [ebp+var_24], edx\n.text:0048EBED                 mov     [ebp+var_20], eax\n.text:0048EBF0                 mov     [ebp+var_1C], cl\n.text:0048EBF3                 pusha\n.text:0048EBF4                 mov     [ebp+var_18], 4\n.text:0048EBFB                 pushf\n.text:0048EBFC                 pop     eax\n.text:0048EBFD                 mov     ecx, eax\n.text:0048EBFF                 xor     eax, 200000h\n.text:0048EC04                 push    eax\n.text:0048EC05                 popf\n.text:0048EC06                 pushf\n.text:0048EC07                 pop     eax\n.text:0048EC08                 xor     eax, ecx\n.text:0048EC0A                 jz      short loc_48EC5C\n.text:0048EC0C                 mov     [ebp+var_14], 0\n.text:0048EC13                 mov     eax, 0\n.text:0048EC18                 cpuid\n.text:0048EC1A                 mov     [ebp+var_14], eax\n.text:0048EC1D                 mov     [ebp+var_28], ebx\n.text:0048EC20                 mov     [ebp+var_24], edx\n.text:0048EC23                 mov     [ebp+var_20], ecx\n\n```\nWhat do this numbers mean?\n\n```\n.data:004CEAC8 dword_4CEAC8    dd 6E6F6E41h            ; DATA XREF: DX_Enumerate+1Dr\n.data:004CEAC8                                         ; sub_497290+24r\n.data:004CEACC dword_4CEACC    dd 756F6D79h            ; DATA XREF: DX_Enumerate+23r\n.data:004CEACC                                         ; sub_497290+6r\n.data:004CEAD0 dword_4CEAD0    dd 55504373h            ; DATA XREF: DX_Enumerate+2Cr\n.data:004CEAD0                                         ; sub_497290+Cr\n.data:004CEAD4 byte_4CEAD4     db 0                    ; DATA XREF: DX_Enumerate+34r\n.data:004CEAD4                                         ; sub_497290+2Cr\n\n```\nWhy is it done xor?\n\n```\n.text:0048EBFF                 xor     eax, 200000h\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "238",
  "tags": [
    "ida"
  ],
  "user": "black4joss",
  "time": "Jan 20, 2023 at 9:47",
  "comments": [],
  "answers_data": [
    {
      "content": "the string is \"anonymousCPU\"\n\nby pushing the EFLAGS and Xorring with 200000 it is checking if CPUID is usable or not\n\n21     0x0020Â 0000     ID  Able to use CPUID instruction (Pentium+)    System\n\nand  proceeds ahead based on result\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jan 20, 2023 at 12:46",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This is not a function code because a function code is a few lines of code at the beginning of a function, which prepare the stack and registers for use within the function.\n\nI split the assembly code in two parts.\n\nThe first part:\n\n```\nmov     ecx, 6E6F6E41h\nmov     edx, 756F6D79h\n...\njz      short loc_48EC5C\n\n```\nBefore I will explain what this part does, you can see that I changed dword_4CEAC8 to 0x6E6F6E41 because dword_4CEAC8 is a memory location that holds a 4 byte (double word or 32 bit) value, the address dword_4CEAC8 is a memory location and it is a variable which holds a is points to a different location, the above does some stuff till the JZ instruction and if ZF(Zero Flag) is set the EIP(instruction pointer) jumps to loc_48EC5C address.\n\nAfterwards, the second part:\n\n```\nmov     [ebp+var_14], 0\nmov     eax, 0\ncpuid\nmov     [ebp+var_14], eax\nmov     [ebp+var_28], ebx\nmov     [ebp+var_24], edx\nmov     [ebp+var_20], ecx\n\n```\nGet the CPU Vendor ID using the cpuid instruction which stores the vendor ID string in EBX, EDX and ECX registers.\n\nWe can say in general, this assembly code appears to be moving specific hexadecimal values into registers, and then storing those registers into memory at specific locations.\nThe values being moved into registers are: 0x6E6F6E41 into ECX, 0x756F6D79 into EDX, 0x55504373 into EAX, and 0 into CL register.\nIt then appears to be saving the current state of the processor flags on the stack, performing a bitwise XOR operation, and executing the CPUID instruction.\n\nThe idea of the CPUID instruction is that you can call it with different values in EAX, and it will return different information about the processor.\nFinally, it is moving the contents of the registers back into memory at different locations.\n\nJust a note, I took the explanations about CPUID from osdev website , and advise with chatGPT about the code.\n\n",
      "votes": "1",
      "user": "BadSugar",
      "time": "Jan 20, 2023 at 14:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "black4joss",
          "text": "Thank you very much, very useful answers. How this code transfers to C++?",
          "time": null
        }
      ]
    }
  ]
}