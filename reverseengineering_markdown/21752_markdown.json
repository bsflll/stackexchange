{
  "title": "Predicting Memory locations of arguments within a function",
  "link": "https://reverseengineering.stackexchange.com/questions/21752/predicting-memory-locations-of-arguments-within-a-function",
  "content": "I'm trying to write a script that would help display the memory contents of the arguments passed within a function. For example, in the function below, the first argument starts at the EAX register. Printing the contents of EAX gives us the value of the first argument. How can we print all the following arguments?\n\nThanks!\n\n",
  "votes": "0",
  "answers": 2,
  "views": "94",
  "tags": [
    "debugging",
    "windbg"
  ],
  "user": "Chuck Nurit",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [
    {
      "user": "Chuck Nurit",
      "text": "let's say its x64.",
      "time": null
    },
    {
      "user": "Chuck Nurit",
      "text": "Get off your high horse buddy. Go ahead delete your comments.",
      "time": null
    },
    {
      "user": "Chuck Nurit",
      "text": "Dont think you know the answer anyway.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "According to Microsoft Docs, the ABI for x64 Windows looks like this:\n\nYou will also find more comprehensive description and examples at that website.\n\nTo see how it works in practice, we can write simple program using the FtpCommandA function and calling it like this:\n\nFtpCommandA(NULL, false, 1, \"command\", 2, NULL);\n\nAfter disassembling this simple program, you will see:\n\n\nYou can notice that indeed, first four arguments are passed using rcx, rdx, r8 and r9 registers while the last two are passed using the stack.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Chuck Nurit",
          "text": "Thanks for explaining everything so clearly!",
          "time": null
        }
      ]
    },
    {
      "content": "Another way this could be achieved is by using the Stacktrace function and then printing the arguments' locations - something like this:\n\n```\ndprintf( \"%08p %08p %08p %08p %08p %s\",\n             stk[i].FramePointer,\n             stk[i].ReturnAddress,\n             stk[i].Args[0],\n             stk[i].Args[1],\n             stk[i].Args[2],\n             Buffer\n             );\n\n```\n",
      "votes": "1",
      "user": "Chuck Nurit",
      "time": "Jul 30, 2019 at 21:45",
      "is_accepted": true,
      "comments": [
        {
          "user": "Chuck Nurit",
          "text": "Ok - here's another way I came up with it which can be used to print the actual arguments: use the 'kb' command to output the frames and then use a .foreach to pic the ones that you're after. This one works well as you can craft a command that can then be used in a breakpoint with the 'go' option at the end, if you wanted to automate the process.",
          "time": null
        }
      ]
    }
  ]
}