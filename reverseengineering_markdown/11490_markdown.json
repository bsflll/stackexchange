{
  "title": "Unpacking and the ESP trick",
  "link": "https://reverseengineering.stackexchange.com/questions/11490/unpacking-and-the-esp-trick",
  "content": "I recently heard about the esp trick: some packers push all registers on the stack, and when unpacking is done, they are restored. Placing a hardware breakpoint on esp we can stop there and get the original entry point.\n\nWhy is it necessary to use a hardware breakpoint? This site argues that because software breakpoints modify the code. But why is that a problem here?\n\nEvery example I met uses Ollydbg. How can I set such a breakpoint in gdb?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "855",
  "tags": [
    "gdb",
    "unpacking"
  ],
  "user": "robert",
  "time": "Dec 9, 2015 at 15:49",
  "comments": [],
  "answers_data": [
    {
      "content": "The value of ESP is an address on the stack. The data at that memory address may get read or written, but won't get executed¹ since it's not code. Software breakpoints are only useful on code that gets executed, and since the data at that memory address won't get executed, a software breakpoint won't be helpful.\n\n¹ There are exceptions to this, but it's out of context for your question.\n\nIn gdb, you can set a hardware breakpoint on the memory address pointed to by ESP by setting a watchpoint, which is documented here.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Dec 9, 2015 at 16:33",
      "is_accepted": true,
      "comments": []
    }
  ]
}