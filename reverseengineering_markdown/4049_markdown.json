{
  "title": "Are all the code sequences ended with \"ret\" potential \"gadgets\" for ROP attack?",
  "link": "https://reverseengineering.stackexchange.com/questions/4049/are-all-the-code-sequences-ended-with-ret-potential-gadgets-for-rop-attack",
  "content": "So by reading this rop paper from Dr. Shacham, I know that it is not very hard to find gadgets set that has Turning-complete computation ability.\n\nSo I am thinking that, in theoretical, are all the asm code sequences ended with ret can be used as gadgets in ROP attack?\n\nIs it wrong? Could anyone give me some counteract example?\n\n",
  "votes": "3",
  "answers": 3,
  "views": "1k",
  "tags": [
    "assembly",
    "memory",
    "exploit"
  ],
  "user": "lllllllllllll",
  "time": "Apr 9, 2014 at 17:53",
  "comments": [
    {
      "user": "nrz",
      "text": "in x86 assembly: push dword 0, ret.",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@nrz Yes! That's one acceptable example! Thx:)",
      "time": null
    },
    {
      "user": "jbh",
      "text": "ROP gadgets don't always have to end in a return, one could end with a call to a register or function.",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@jbh Can they? Could you give me some more detailed examples or materials..?  thank you!",
      "time": null
    },
    {
      "user": "jbh",
      "text": "@user3215 responded in answer due to length",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is a continuation of non-return based gadgets.\n\nA ROP-gadget in itself is a segment of code that you can use to manipulate data, and get some desired effect, while maintaining control of execution. Here is a paper about Jump Oriented Programming. Also, Return Oriented Programming without Returns. They went through libc-2.7 (/lib/i686/cmov/libc-2.7.so of Debian Linux 5.0.4) and found alternative gadgets. These included gadgets ending in jump,call,jump+call,ret. Logically there will be more ret rop gadgets however there are still some extremely useful non-return gadgets such as the one below.\n\n```\npopa ; Load all registers\ncmc ; No practical effect\njmp far dword [ecx] ; Back to dispatcher via ecx\n\n```\nAlso seeing a call to a register is not uncommon especially when dealing with C++ binaries that leverage vtables for objects.\n\nWhen ROP-ing on ARM its almost mandatory to use less traditional gadgets. Which includes branches into registers,e.g. BX LR (the most traditional return) or BLX R3, or straight loads into the program counter, e.g. LDMFD SP!,{R3,PC}\n\nAs for are there non-useful rop gadgets, of course. There are many gadgets that will lose you control of execution. Depending on the amount of gadgets you have, you wont always have control of all registers so if you cant control say edx, any rop gadget that ends with a call [edx] is now not useful.\n\nEDIT: Added details about ARM Gadgets and link to Return Oriented Programming without Returns for more complete references.\n\n",
      "votes": "5",
      "user": "jbh",
      "time": "Apr 10, 2014 at 19:58",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Yes, all the opcodes ending by a ret can be considered as a gadget. But, consider also the fact that not only legal instructions can be considered as gadget, also 'starting in the middle of an instruction' or 'using the static arguments of an instruction' can be considered as a potential gadget.\n\nIn fact, the only limitation (apart from the fact that it must end by a ret or something similar) is that the gadget must lay in a memory area that is declared as executable.\n\nI highly recommend to read the following paper which explain very well all these (probably better than the one you read): The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86) by Hovav Shacham. \n\n",
      "votes": "4",
      "user": "perror",
      "time": "Apr 9, 2014 at 20:16",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "It so happens that for my \"Intro to IA class\" I wrote what ended up being a decently thorough summary of ROP.  No, this was never published, but we were told we had to follow the academic format for the paper.  \n\nWhat your question references is actually a summary of three previous papers, which means you're missing some valuable detail on Schacham's excellent work. And of course, a long list of hacker's going back at minimum to phrack 49's Aleph One piece.  There's a graphic here  that details the long history that has culminated in the creation of ROP.  It was essentially a roadmap for my own research.  \n\nThe paper that will explicitly answer your question is \"The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86)\"  as perror has already suggested.  In it is provided pseudocode that tells you we're looking for \"non-boring sequences\" which is defined fully in section 2 with pseudocode.  Later papers demonstrated that ROP was cross-architecture in nature and we can use certain jmp sequences that jbh discussed. \n\nA link to my non-peer reviewed unpublished summary is here.  Included is a list of references, which I will just drop here:\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}