{
  "title": "Why does MSVC x64 Compiler load addresses like this?",
  "link": "https://reverseengineering.stackexchange.com/questions/13270/why-does-msvc-x64-compiler-load-addresses-like-this",
  "content": "Normally, in x86, to load a pointer to a null-terminated string you would use\n\n```\nMOV EDX, OFFSET ds:mystring\n\n```\nIn x64, however, I noticed that the compiler does it like this\n\n```\nlea rdx, OFFSET FLAT:$mystring ; 'it is ten'\n\n```\nWhy is that?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "261",
  "tags": [
    "x86",
    "x86-64",
    "pointer",
    "msvc"
  ],
  "user": "Cyrex Cyrex",
  "time": "Aug 12, 2016 at 11:17",
  "comments": [],
  "answers_data": [
    {
      "content": "If you disassemble the instructions for\n\n```\nmov edx, offset ds:mystring\n\n```\nvs\n\n```\nlea rdx, offset ds:mystring\n\n```\nYou'll notice the LEA instruction length (in bytes) was smaller. Its a compiler optimization! \n\nOr, it could be the compilers way of addressing pointer arithmetic in an easier manner.\n\nCheck out this for more info on both.\n\n",
      "votes": "1",
      "user": "grepNstepN",
      "time": "Aug 12, 2016 at 21:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "phuclv",
          "text": "it's incorrect. mov edx, offset is 5 bytes long, whereas lea rax, offset is 7 bytes long. The 64-bit version is longer partly due to the REX prefix",
          "time": null
        },
        {
          "user": "grepNstepN",
          "text": "check the source i cited; its a known compiler trick that also relies on whether or not $RDX is treated as a pointer in his example. Generally the compiler will do this because its usually a shorter series of bytes (if $RDX is used as a pointer, of which most C++ functions do for string operations).",
          "time": null
        },
        {
          "user": "phuclv",
          "text": "Your link doesn't even work. Checked the archive and I don't see it says LEA is shorter anywhere. Probably I copied the wrong Godbolt link in the comment above. Here's another one. One can clearly see that the compiler outputs a longer LEA. In fact there are many mov reg, imm forms from 5 to 10 bytes. mov reg, [mem] will be longer if you need an SIB byte or REX prefix. Same to LEA",
          "time": null
        },
        {
          "user": "phuclv",
          "text": "You need to read the instruction encoding from Intel's manual, not from a blog. Or check it from the real assembler output. You can also paste mystring: mov edx, offset ds:mystring; lea rdx, [ds:mystring]  into the only assembler and see the output. The LEA version is always longer because the immediate must be encoded as the memory displacement. There's no lea reg, imm version like mov reg, imm",
          "time": null
        },
        {
          "user": "grepNstepN",
          "text": "the link works.",
          "time": null
        }
      ]
    }
  ]
}