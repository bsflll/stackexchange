{
  "title": "What does the author mean in these reverse engineering notes?",
  "link": "https://reverseengineering.stackexchange.com/questions/13945/what-does-the-author-mean-in-these-reverse-engineering-notes",
  "content": "I am trying to write a decoder for an old video format used in a DOS game, the Psygnosis SMV video format, but I'm having a hard time understanding the image decoding process, specifically this section:\n\n```\nMacroblocks drawing\n\nMacroblocks are stored in the following format:\n\n u8 pixels[16 * num_mblocks]\n u4 nibbles[num_mblocks]\n\nSize of pixels[] is equal to ST chunk's nibbles.\nFor each macroblock draw it by indexing its pixels by nibbles.\nFirst nibble stored in top 4 bits of byte.\n\n```\nHere are the properties of the frame I am trying to decode:\n\nSo according these, I computed the following values:\n\n```\nnum_mblocks = nibbles / 16 = 3840 / 16 = 240 macroblocks\n\nfurther checking:\n(image width / macroblock width) * (image height / macroblock height)\n= (320 / 16) * (192 / 16)\n= 20 * 12\n= 240 macroblocks\n\n```\n1st problem:\n\nThe size of u8 pixels[16 * num_mblocks] is indeed 3840 bytes, but what is the size of u4 nibbles[num_mblocks] supposed to be ? 240 bytes or half that amount since the type is u4 ?\n\n2nd problem:\n\nWhen I divide the frame size in bytes by the number of macroblocks I end up with only 144 bytes per macroblock (34560 / 240 = 144), but to me this is very far from what it's supposed to be, I guess I'm wrong somewhere.\n\n3rd problem:\n\nThe author wrote:\n\nFor each macroblock draw it by indexing its pixels by nibbles.\n\nBut what does that mean exactly ?\n\nQuestion\n\nCan you explain/shed some light on how one is supposed to decode a frame ?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "176",
  "tags": [
    "file-format"
  ],
  "user": "aybe",
  "time": "Nov 16, 2016 at 13:46",
  "comments": [],
  "answers_data": [
    {
      "content": "NB: This is an assumption which may or may not be true; I haven't tested that against any real file.\n\nIt seems like the creators of the file format have been trying to save some space. They want to encode 256 colors (\"to encode 8-bit palettized video\"), so they'd need one byte per pixel. However, a certain smaller area of the screen ise likely to contain the same color pixels repeatedly. So, I'd say that each macroblock can contain only 16 different colors, representable in 4 bits/one nibble.\n\nFrom u8 pixels[16 * num_mblocks] it seems like each macroblock has 16 pixel definitions, which are indexes into the general palette table, and need 1 byte each. What follows is one nibble per pixel which is an index into pixels.\n\nSo, for example, the pixels for one macro block would have 16 bytes which are indexes into the palette; which may look like this: (Sorry for some of the color names; i ran out of names that fit in 5 characters ...)\n\n```\n+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----\n+  1  +  2  +  3  +  4  +  5  +  6  +  7  +  8  +  9  +  A  +  B  +  C  +  D  +  E  +  F  +\n+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----\n| red |green|blue |yellw|magnt|cyan |grey |black|orang|gold |aqua |azure|ivory|plum |wheat|\n+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----\n\n```\nNext, you need one nibble per pixel which is an index into that table. So the bytes CA 53 2D would represent 6 pixels being azure, gold, magenta, blue, green, and ivory.\n\nSo for a macroblock of 256 pixels you need 16 bytes for the pixel table, and 256/2=128 bytes for the pixels. Which sums up to the 144 that you calculated. The u4 nibbles[num_mblocks] is probably wrong and should be u4 nibbles[num_mblocks*pixels_per_mblock]\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Nov 16, 2016 at 18:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "aybe",
          "text": "Thank you, I've been digging using your answer, however, I have an incorrect picture ... I started to suspect my implementation of that LZ77-like decompression and decided to attack the simplest thing in the format : decompress packed music chunks; while the algo produces the exact number of bytes, the content is wrong ... I'm actually struggling with this part !",
          "time": null
        }
      ]
    }
  ]
}