{
  "title": "Decrypting authorization PHP script",
  "link": "https://reverseengineering.stackexchange.com/questions/18331/decrypting-authorization-php-script",
  "content": "I asked for help on freelancing, for the finalization of the project in PHP. All this worked well until I needed to edit the authorization mechanism. Having opened the file, I found that it was encrypted. Tried to contact him, but unsuccessfully. Help me find the decoder, the files are flooded with pastest.\n\nHappyness day!\n\n",
  "votes": "-1",
  "answers": 4,
  "views": "1k",
  "tags": [
    "decryption",
    "deobfuscation",
    "php"
  ],
  "user": "Mikhail Desu",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [
    {
      "user": "Mikhail Desu",
      "text": "I unfortunelly can't edit my post, maybe can i automatized decoding and deobf this code?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here's your deobfuscated file, note that I do not give guarantees, there was some manual work done and I may have removed important lines, more on that below:\n\n```\n<?\n\nif (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n\n$message = '';\nif (isset($_GET['data']) && isset($_GET['a'])) {\n    $id  = check($_GET['a'], \"int\");\n    $STH = $pdo->prepare(\"SELECT `id`, `login`, `email` FROM `users` WHERE `id`=:id LIMIT 1\");\n    $STH->setFetchMode(PDO::FETCH_OBJ);\n    $STH->execute(array(\n        ':id' => $id\n    ));\n    $row = $STH->fetch();\n    if (empty($row->id)) {\n        show_error_page();\n    }\n    if ($_GET['data'] != md5($row->id . $conf->code . $row->email . date(\"Y-m-d\"))) {\n        $message = '<p class=\\'text-danger\\'>' . $messages['Link_not_active'] . '</p>';\n    } else {\n        $password  = crate_pass(7, 1);\n        $password2 = convert_password($password, $conf->salt);\n        $STH = $pdo->prepare(\"UPDATE `users` SET `password`=:password WHERE `id`=:id LIMIT 1\");\n        if ($STH->execute(array(\n            ':password' => $password2,\n            ':id' => $id\n        )) == '1') {\n            include_once \"inc/notifications.php\";\n            $letter = recovery_letter($conf->name, $row->login, $password);\n            sendmail($row->email, $letter['subject'], $letter['message'], $pdo);\n            $message = '<p class=\\'text-success\\'>' . $messages['Recovery_pass1'] . $row->email . $messages['Recovery_pass2'] . '</p>';\n            write_log(\"User reinstated pass #\" . $row->email);\n        } else {\n            $message        = '<p class=\\'text-danger\\'>' . $messages['Error_page'] . '</p>';\n        }\n    }\n}\n\n$tpl->load_template('elements/title.tpl');\n$tpl->set(\"{title}\", $page->title);\n$tpl->set(\"{name}\", $conf->name);\n$tpl->compile('title');\n$tpl->clear();\n$tpl->load_template('head.tpl');\n$tpl->set(\"{title}\", $tpl->result['title']);\n$tpl->set(\"{site_name}\", $conf->name);\n$tpl->set(\"{image}\", $page->image);\n$tpl->set(\"{robots}\", $page->robots);\n$tpl->set(\"{type}\", $page->kind);\n$tpl->set(\"{description}\", $page->description);\n$tpl->set(\"{keywords}\", $page->keywords);\n$tpl->set(\"{url}\", $page->full_url);\n$tpl->set(\"{other}\", '');\n$tpl->set(\"{token}\", $token);\n$tpl->set(\"{cache}\", $conf->cache);\n$tpl->set(\"{template}\", $conf->template);\n$tpl->set(\"{site_host}\", $site_host);\n$tpl->compile('content');\n$tpl->clear();\n\n$menu = $tpl->get_menu($pdo);\n$nav                 = array(\n    $PI->to_nav('main', 0, 0),\n    $PI->to_nav('recovery', 1, 0)\n);\n\n$nav                 = $tpl->get_nav($nav, 'elements/nav_li.tpl');\ninclude_once \"inc/not_authorized.php\";\n$tpl->load_template('/index/recovery.tpl');\n$tpl->set(\"{site_host}\", $site_host);\n$tpl->set(\"{template}\", $conf->template);\n$tpl->set(\"{message}\", $message);\n$tpl->compile('content');\n$tpl->clear();\n\n```\nI wrote a small Python script to get rid of the annoying round() calls. It simply uses a regex to find all non-nested round(...) calls, dumps a small PHP script, runs PHP on it and retrieves the output because I didn't trust Python's round to be perfectly equal in corner cases.\n\nThe script:\n\n```\n#!/usr/bin/python\n\nimport subprocess\nimport re\nimport sys\n\ndef php_eval(code):\n    code = \"<?php echo(\" + code + \"); ?>\"\n    open(\"/tmp/eval\",\"w\").write(code)\n    return subprocess.check_output([\"php\",\"/tmp/eval\"]).decode(\"ascii\")\n\ndef deob(fname):\n    obf = open(fname,\"r\").read()\n\n#    while True:\n#        m = re.search(r'\\[round.+?\\]',obf)\n#        if m:\n#            s = m.group(0)\n#            print(\"Matched %s\" % s)\n#            repl = php_eval(s[1:-1])\n#            print(\"Replacing %s with %s\" % (s,repl))\n#            obf = obf.replace(s,\"[\"+repl+\"]\")\n#        else:\n#            break\n\n#    while True:\n#        m = re.search(r'\\$GLOBALS\\[\\'_174350175_\\'\\]\\[\\d+?\\]',obf)\n#        if m:\n#            s = m.group(0)\n#            obf = obf.replace(s,\"round\")\n#        else:\n#            break\n\n    while True:\n        m = re.search(r'round\\([^\\(]+?\\)',obf)\n        if m:\n            s = m.group(0)\n            repl = php_eval(s)\n            print(\"Replacing %s with %s\" % (s,repl))\n            obf = obf.replace(s,repl)\n        else:\n            break\n\n\n    return obf\n\nplain = deob(sys.argv[1])\nopen(sys.argv[2],\"w\").write(plain)\n\n```\nThen I threw the code into a PHP beautifier: http://www.phpformatter.com/\n\nThen the manual part.\n\nThere are some patterns the obfuscator creates:\n\n```\nwhile (3171 - 3171)\n    bin2hex($seneiuhtrbbit, $likgfowocfbgko, $_SESSION);\n\n```\nwhile loops that never execute.\n\n```\nif ((3165 ^ 3165) && preg_split($seneiuhtrbbit))\n    fgetss($pdo, $nav);\n\n```\nif clauses that never execute because the 1st part evaluates to false already.\n\n```\n(3253 - 3253 + 3158 - 3158) ? strnatcmp($pdo, $letter, $password) : mt_rand(806, 3253);\n\n```\nternary operator usage that effectively is a nop (condition evaluates to false, making it call mt_rand)\n\nAnd some others. I removed those manually, which gives the above script.\n\nIf you want to deobfuscate the route.php, you may want to uncomment the blocks in above script, as it adds another layer of rounds but I didn't continue. You would also need to text-replace the function calls back in from the 2nd GLOBAL array.\n\n",
      "votes": "1",
      "user": "Johann Aydinbas",
      "time": "May 23, 2018 at 19:26",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mikhail Desu",
          "text": "You is genious, f*cking great!!! Can i use this script on Windows system?",
          "time": null
        },
        {
          "user": "Johann Aydinbas",
          "text": "Yes, a basic Python 3.x installation will run the script but you need to adjust some things. The php_eval function also expects PHP to be installed and callable as just php somefile.php from the command line. It also uses a Linux path /tmp/eval for its temporary file which you would need to adjust, just point it somewhere it may write.",
          "time": null
        }
      ]
    },
    {
      "content": "use a script like this to get a beautified php code \n\nedit \ndo not use jsbeautier  install pear and use PHP_Beautifier instead \nthere are lot of white space differences between PHP_Beautifier and jsbeautifier\nsome of them are fatal like below or better use one of the online services like unphp\n\n```\n$tpl - > $pdo  instead of $tpl->$pdo (notice the space between - > which   \nwould not let php compile the script \n\n```\ncommented out the jsbeautifier part in the script below\n\n```\nimport sys\nimport base64\nimport zlib\nimport jsbeautifier\n\nf1 = open(sys.argv[1],\"rb\")\nf2 = open(sys.argv[2],\"wb\")\nf3 = open(sys.argv[3],\"wb\")\n#f4 = open(sys.argv[4],\"wb\")\nbase64.decode(f1,f2)\nf1.close()\nf2.close()\nf2 = open(sys.argv[2],\"rb\")\ndat = f2.read()\nf2.close()\ndecom = zlib.decompress(dat)\nf3.write(decom)\nf3.close()\n#f3 = open(sys.argv[3],\"rb\")\n#uglyjs=f3.read()\n#f3.close()\n\n#beaujs = jsbeautifier.beautify(uglyjs)\n#f4.write(beaujs)\n#f4.close()\n\n```\nusage copy the base64 encoded string to a file say b64.dat\n\n```\n:\\>xxd -l 10 b64.dat\n0000000: 6546 3746 572f 7554 3238                 eF7FW/uT28\n\n```\nand excute the script like \n\n```\n:\\>python decodebase64.py b64.dat B64.DEC B64.UJS B64.PHP\n\n\n:\\>HEAD B64.PHP -n 5\nif (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n$message = '';\n\n```\nyou can also setup an apache and run the file in phpdbg to evaluate things \n\nhope you have other template files in proper directories it tries to load some some template files like elements\\xxx.tpl\n\nfoodown.php is the content of first link in your query split into multiple lines\nlike $a = base64_xxx\n$b = gzunzip($a)\neval($b)  \n\n```\n:\\>phpdbg -p* foodown.php\nfunction name: (null)\nL1-5 {main}() C:\\Users\\XXX\\Desktop\\foodown.php - 0x1a7e000 + 10 ops\n L2    #0     INIT_FCALL<1>           64                   \"base64_decode\"\n L2    #1     SEND_VAL                \"eF7FW/uT28aR/lcYZ\"+ 1\n L2    #2     DO_ICALL                                                          @0\n L2    #3     ASSIGN                  $a                   @0\n L3    #4     INIT_FCALL<1>           64                   \"gzuncompress\"\n L3    #5     SEND_VAR                $a                   1\n L3    #6     DO_ICALL                                                          @2\n L3    #7     ASSIGN                  $b                   @2\n L4    #8     INCLUDE_OR_EVAL<1>      $b\n L5    #9     RETURN<-1>              1\n[Script ended normally]\n\n:\\>\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "May 24, 2018 at 17:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Mikhail Desu",
          "text": "Thank's u! It's unreal amazing! You is best php guy! Can i automatic this calculating, like round(round(0) + 1.75 + 1.75 + 1.75 + 1.75) and deobf this string to real code?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "use notepad++ hi ctrl+alt+b to select everything between braces  make it a variable like $deob1= (round(.......ro...ro...) and evaluate that and replace the original",
          "time": null
        }
      ]
    },
    {
      "content": "This is not that hard task as one can image, only a bit tedious. \n\nFirst, you should reformat those files to have some of the structure reconstructed\n\nhttps://gist.github.com/pawlos/bd3838d04cbbe094e534c5bd8b532b69\n\nWith only such small task you can see some SQL queries that go to the DB for user and password data. \n\nFrom that, you can start renaming the obfuscated variables or converting those round(round(0) + 1.75 + 1.75 + 1.75 + 1.75) to actual numerical values (7 in this case).\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "May 23, 2018 at 8:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "Mikhail Desu",
          "text": "Thank`s! Can i make automatic this process?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "I guess you could try to automate this somehow but probably it would require more time than calculating it once and then find&replace",
          "time": null
        }
      ]
    },
    {
      "content": "adding another answer because this contains substantially more info and might mess up the earlier answer\n\ncontents of directory pre experiment\n32xxxx.*php.txt is from unphp.net\netE.*txt is content of original posts first link\nb64.dat is the base64 string without quotes from the etE.*txt file   \n\nthe other 2 are python scripts    \n\n```\n:\\>ls\n317ca73f142f83e85c24c22cb66c59c7_php.txt  decodebase64.py  findround.py\nb64.dat                                   etEWDu2S.txt\n\n```\ncontents of python script that recursively replaces round() functions\nuses subprocess module and evaluates the round() using  PHP -r \n\n```\n:\\>cat findround.py\nimport sys\nimport subprocess\n\nif( len(sys.argv) != 2):\n    print(\"usage \"+ sys.argv[0] + \" \\\"path to infile\\\"\")\n    sys.exit();\n\nprint \"opening \" + sys.argv[1]\ninfile = open(sys.argv[1] , \"r\")\nprint \"reading all the lines\"\ndata = infile.readlines();\nprint \"closing the input file\"\ninfile.close();\nprint \"total number of lines read = %d\" % len(data)\n\nfor i in range(0,len(data),1):\n    pos = data[i].rfind(\"round(\")\n    if(pos == -1):\n        continue\n    else:\n        substrobrace= data[i][pos:]\n        cbpos = substrobrace.find(\")\")\n        #print substrobrace[:cbpos+1]\n        commandline = \"php -r \" +\"\\\"print \" + substrobrace[:cbpos+1] +  \";\\\"\"\n        repl = subprocess.check_output( commandline )\n        data[i] = data[i].replace(substrobrace[:cbpos+1] , repl)\n        #print data[i]\n        while (pos != -1):\n            pos = data[i].rfind(\"round(\")\n            if(pos == -1):\n                break\n            else:\n                substrobrace= data[i][pos:]\n                cbpos = substrobrace.find(\")\")\n                #print substrobrace[:cbpos+1]\n                commandline = \"php -r \" +\"\\\"print \" + substrobrace[:cbpos+1] +  \";\\\"\"\n                repl = subprocess.check_output( commandline )\n                data[i] = data[i].replace(substrobrace[:cbpos+1] , repl)\n                #print data[i]\noutfilename = sys.argv[1] +\".deob\"\noutfile = open(outfilename,\"w\")\noutfile.writelines(data)\noutfile.close()\n\n```\ncontents of python scripts that de-obfuscates the etE.*.txt file\nagain uses supprocess to beautify the single line eval();\n\n```\n:\\>cat decodebase64.py\nimport sys\nimport base64\nimport zlib\nimport time\nimport subprocess\n\nf1 = open(sys.argv[1],\"rb\")\nf2 = open(sys.argv[2],\"wb\")\nf3 = open(sys.argv[3],\"wb\")\nbase64.decode(f1,f2)\nf1.close()\nf2.close()\nf2 = open(sys.argv[2],\"rb\")\ndat = f2.read()\nf2.close()\ndecom = zlib.decompress(dat)\ntagdecom = \"<?php \" + decom + \"?>\"\nf3.write(tagdecom)\nf3.close()\ntime.sleep(5)\ncommandline = \"c:\\\\php\\\\php_beautifier.bat \" + sys.argv[3] + \" \"+ sys.argv[3] +\".php\"\nres = subprocess.check_output( commandline )\ndeobcmdline = \"python findround.py \" + sys.argv[3] +\".php\"\nres = subprocess.check_output( deobcmdline )\n\n```\nexecuting the decodebase64.py with arguments\n(this file calls the other script after some timeout so you get a deobfuscated     file in one go with all the round() replaced) also diffed with output from   unphp.net for sanity check\n(js beautifier module in earlier my answer messes ugly php with white space error)     \n\n```\n:\\>decodebase64.py b64.dat b64.dec b64.ugly\n\n:\\>diff b64.ugly.php 317ca73f142f83e85c24c22cb66c59c7_php.txt\n0a1,2\n> /* Decoded by unphp.net */\n>\n\n```\nchecking if the deobfuscated php file is compilable or not\n\n```\n:\\>phpdbg b64.ugly.php.deob\n[Welcome to phpdbg, the interactive PHP debugger, v0.5.0]\nTo get help using phpdbg type \"help\" and press enter\n[Please report bugs to <http://bugs.php.net/report.php>]\n[Successful compilation of C:\\b64.ugly.php.deob]\nprompt> q\n\n```\ncontents of the deobfuscated file with round() replaced with actual values\n\n```\n:\\>head b64.ugly.php.deob\n<?php if (isset($_SESSION['id'])) {\n    header('Location: ../');\n    exit();\n}\n$message = '';\nif ((3165 ^ 3165) && preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\n(3253 - 3253 + 3158 - 3158) ? strnatcmp($pdo, $letter, $password) : mt_rand(806, 3253);\nif (isset($_GET['data']) && isset($_GET['a'])) {\n    $id = check($_GET['a'], \"int\");\n    $STH = $pdo->prepare(\"SELECT `id`, `login`, `email` FROM `users` WHERE `id`=:id LIMIT 1\");\n\n:\\>\n\n```\nas you can see and as john posted in his answer this now contains\nfake if() / while() / ternary operators / which will never execute \nnotice if((3165 ^ 3165) && where the first condition evaluates to 0 so will never execute the fgetss =()\ntry php -a to open an interactive php shell and try evaluating the lines one by one\nnotice i modified the if condition to show the execution of second condition \nwhich has a wrong numbers of argument\nprototype of  preg_split is preg_split(regex,string,flag);\n\n```\n:\\>php -a\nInteractive shell\n\nphp > if ((3165 ^ 3165) && preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\nphp > if ((3165 ^ 3164) && preg_split($seneiuhtrbbit)) fgetss($pdo, $nav);\n\nWarning: preg_split() expects at least 2 parameters, 1 given in php shell code on line 1\nphp >    \n\n```\nso you need to pluck them out manually \n\n",
      "votes": "0",
      "user": "blabb",
      "time": "May 25, 2018 at 8:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}