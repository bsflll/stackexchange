{
  "title": "Is IDA resolving ELF relocations correctly?",
  "link": "https://reverseengineering.stackexchange.com/questions/18475/is-ida-resolving-elf-relocations-correctly",
  "content": "While working on this kernel module, I noticed IDA somehow resolves some ELF relocations statically. Consider the symbol sys_renameat, which, according to IDA, resides at 0x8000720 in .bss segment.\n\n\n\nThe raw hex bytes corresponding to the mov instruction at 0x800328 are A3 20 07 00 08\n\nHowever, looking at bytes at that specific offset with a hex-editor reveals A3 00 00 00 00. Clearly, there is a relocation which IDA is resolving somehow. \n\n\n\nreadelf -r rootkit confirms this.\n\n```\nRelocation section '.rel.init.text' at offset 0x119c contains 26 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n.\n00000059  00001701 R_386_32          00000000   sys_renameat\n.\n\n```\nThe symbol information as returned by readelf -s rootkit\n\n```\nSymbol table '.symtab' contains 44 entries:\nNum:    Value  Size Type    Bind   Vis      Ndx Name\n.\n23: 00000000     4 OBJECT  GLOBAL DEFAULT   15 sys_renameat\n.\n\n```\nHowever, if I strip the binary, suddenly IDA fails to resolve (mov instruction at 0x800328) the relocations any more.\n\n\n\nMy understanding is, resolving dynamic relocations never depends on symbol information which strip removes. I tried to compute how IDA was computing R_386_32 type relocation for sys_renameat according to ELF specification, but couldn't figure out what's going on.\n\nIs IDA resolving relocation correctly in this case/ If so, can someone please explain this behavior?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "elf"
  ],
  "user": "sherlock",
  "time": "Jun 7, 2018 at 15:05",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi. Two things. Could you please - either in addition or as replacement -copy&paste the actual textual contents of the disassembly instead of the screenshots. And then, what was the output for the various places that ELF has to store symbols after you stripped the binary?",
      "time": null
    },
    {
      "user": "sherlock",
      "text": "I don't know if IDA allows us to copy raw disassembly. I have linked the original binary in my post though.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "yep, IDA can easily do that. The point behind this request is that this makes your question easier to index for search engines. They won't recognize keywords from the screenshots.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Linux kernel modules are not shared objects and don't use dynamic relocations, although they may look a little similar.\n\nfile:\n\nreadelf -h:\n\nSo it's a relocatable object, and by stripping it you remove information necessary for its functioning.\n\nFrom the Linux Loadable Kernel Module HOWTO:\n\nAbout relocation resolution by IDA:\n\nSince the real address of the symbols is not known until runtime but the user expects to see nice names in the disassembly, IDA's ELF loader creates a fake segment (\"extern\") and fills it with placeholders for the external symbols. The relocatable bytes are then patched to point to those fake symbols.\n\n",
      "votes": "4",
      "user": "Igor Skochinsky",
      "time": "Jun 7, 2018 at 20:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "sherlock",
          "text": "Does it essentially mean that the address 0x080000720 (as the destination of mov instruction at 0x08000328) I am seeing in the first disassembly is plain wrong, and no way the real one?",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "Also the symbol sys_renameat lands in .bss, not in .extern",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "well, local symbols are obviously resolved locally.  as for the addresses, “wrong” depends on your point of view. they probably don’t match the real addresses at runtime but the logical connections should be the same.",
          "time": null
        }
      ]
    }
  ]
}