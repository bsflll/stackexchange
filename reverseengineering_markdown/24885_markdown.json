{
  "title": "How to detect which shared libraries a binary is actually using?",
  "link": "https://reverseengineering.stackexchange.com/questions/24885/how-to-detect-which-shared-libraries-a-binary-is-actually-using",
  "content": "I have a stripped-down Linux-based embedded system where a closed-source program(32-bit ELF binary for MIPS) depends on several shared libraries. Two of those libraries are actually the same libcurl library, but compiled differently. I need to know which one the program is actually using.\n\nI can't install anything on that embedded system and the file system is read-only. Fortunately, there is a gdb available. When I execute the program and attach to it with gdb and print the loaded shared libraries with info sharedlibrary, then both libraries seem to be loaded:\n\n```\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n/* output removed for brevity */\n0x28c6a8b0  0x28caf770  Yes         /usr/lib//libcurl-jke.so.1\n0x28d81150  0x28d86260  Yes         /usr/lib//libcurl-kkw.so.3\n/* output removed for brevity */\n\n```\nAlso, when I check the functions or variables with info functions or info variables, then I see items from libcurl under Non-debugging symbols. However, I don't know if those are from libcurl-jke.so.1 or from libcurl-kkw.so.3.\n\nWhen I step through the program the debugger never shows that those libraries are used, but I know that they are because I see a HTTP GET request from this embedded system. What might cause this? Is there a way to see all the functions the program executes and files where those functions originate from using gdb?\n\nAlso, I could download this program and analyze it with radare2 if this helps.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "radare2",
    "gdb"
  ],
  "user": "Martin",
  "time": "May 2, 2020 at 0:12",
  "comments": [],
  "answers_data": [
    {
      "content": "ELF model doesn’t bind symbols to a specific library, so the first module providing a specific symbol is used. You can try to check into which address range the symbol’s value falls. \n\nNote, however, that at the beginning most symbols point into the executable’s PLT (program linkage table) so you might need to wait until they’re actually called to get the resolved addresses. Another option is to put a breakpoint on a symbol and then step into it to see what library you end up in. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "May 2, 2020 at 12:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "Martin",
          "text": "Thanks! Did you mean if the curl related functions addresses(seen in the first column of the info functions command) fall into range of 0x28c6a8b0  - 0x28caf770 then they are from libcurl-jke.so.1 library or if they fall into range of 0x28d81150 - 0x28d86260, then they are from libcurl-kkw.so.3?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Martin yes, unless the address is in the main binary (PLT), then you’ll have to step through it  to get to the actual library.",
          "time": null
        }
      ]
    }
  ]
}