{
  "title": "Normal artifact or something else?",
  "link": "https://reverseengineering.stackexchange.com/questions/30259/normal-artifact-or-something-else",
  "content": "I'm working on a Linux ELF challenge.\n\nI have found this bit of code in the .text disassembly using objdump -d -M intel program\n\n```\n 922:   83 c4 10                add    esp,0x10\n 925:   c7 45 f4 00 00 00 00    mov    DWORD PTR [ebp-0xc],0x0\n 92c:   83 7d f4 00             cmp    DWORD PTR [ebp-0xc],0x0\n 930:   74 29                   je     95b <main@@Base+0x26b>   \n \n 932:   83 ec 08                sub    esp,0x8\n 935:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 938:   8d 83 e4 ea ff ff       lea    eax,[ebx-0x151c]\n 93e:   50                      push   eax\n 93f:   e8 ac fb ff ff          call   4f0 <printf@plt>\n 944:   83 c4 10                add    esp,0x10\n 947:   8b 45 0c                mov    eax,DWORD PTR [ebp+0xc]\n 94a:   0f af 45 f4             imul   eax,DWORD PTR [ebp-0xc]\n 94e:   89 45 f0                mov    DWORD PTR [ebp-0x10],eax\n 951:   8b 55 08                mov    edx,DWORD PTR [ebp+0x8]\n 954:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 957:   01 d0                   add    eax,edx\n 959:   ff d0                   call   eax\n\n```\nThere are no references to address 932 in the code so it is either an indirect call like we see at the last address 959 or it is intentionally left out and I have to patch to get to this section.  I suspect it is the latter as there is a piece of code elsewhere that points to a deadc0de address.  However, When I patch to this section, the only string given is \"Unexpected error condition. Control char is %d  \n\" which makes me wonder if this is some sort of normal compiler artifact.\n\nMy questions are\n\n27-04-2022 EDIT:\nreadelf -x .rodata <program> returns the \"Unexpected error condition ...\" string as part of the rodata section.  This very much leads me to believe that this is not a compiler artifact and is instead, part of the challenge\n\n",
  "votes": "1",
  "answers": 0,
  "views": "84",
  "tags": [
    "disassembly",
    "x86",
    "elf",
    "intel"
  ],
  "user": "Mr. Kelsey",
  "time": "Apr 28, 2022 at 9:06",
  "comments": [
    {
      "user": "sudhackar",
      "text": "Why do you think 932 be called? I see that 92c could be part of a loop. The stack operation is only at 932  to make the printf call. Can you share the original binary?",
      "time": null
    },
    {
      "user": "Mr. Kelsey",
      "text": "@sudhackar  I cannot share the binary.  It is not an open crackme but rather a challenge as part of a CTF that prohibits placing challenge information into public space.  That is why I have shared so little of the code here.  92c is not part of a loop.  '922' - 930 marks the end of a conditional branch that gets taken if the program is supplied a proper password.  The line above [not shown here] is a call to print the \"correct password\" string.",
      "time": null
    }
  ],
  "answers_data": []
}