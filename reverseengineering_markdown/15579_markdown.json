{
  "title": "What is the need of the Rotation Operation?",
  "link": "https://reverseengineering.stackexchange.com/questions/15579/what-is-the-need-of-the-rotation-operation",
  "content": "I know that shl instruction is like the mul operation and the shr instruction is like the div operation and it's used for optimization.\n\nFor example, shl eax, n is a more efficient way to implement eax = (eax)*(2^n) without any multiplication instructions.\n\nNow I am reading about rol and ror assembly instructions and I got how it works, but I don't know what is the point of the rotation operation in general and when to use it?\n\n",
  "votes": "3",
  "answers": 4,
  "views": "373",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "Ahmad Kouraiem",
  "time": "Jul 12, 2018 at 10:52",
  "comments": [
    {
      "user": "yaspr",
      "text": "Optimization is a secondary use of these instructions. They are mainly there to reproduce boolean algebra constructs necessary for implementing certain concepts in a more natural way. Generally, these instructions are VERY usefull when doing signal processing, cryptography, ... They are the +, *, /, - you usually use in arithmetics but used on a a binary set {0, 1} rather than an infinite set. en.wikipedia.org/wiki/Binary_operation en.wikipedia.org/wiki/Bitwise_operation",
      "time": null
    },
    {
      "user": "julian",
      "text": "@yaspr are you able to turn this comment into an answer?",
      "time": null
    },
    {
      "user": "yaspr",
      "text": "Sure, I'll set it up with better explanations. @SYS_V",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "What's the purpose of the rotate instructions (ROL, RCL on x86)?. On microcontrollers rotate through carry is commonly used to do a multiword shift",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is somewhat of an incorrect statement. Those operations are bitwise operations. These operations are the basis of Boolean Algebra and  they're used whenever bit level manipulation is required. Applications may include bitfield/flag manipulation, working with hardware devices, network protocols, decoding/encoding, compression and many other uses. \n\nAdditionally, logical shifts have the interesting property of being efficient ways to perform multiplication or division of unsigned integers by powers of two. This is a side-effect and not the purpose of those operations. This property is also true for arithmetic shift operations and signed integers.\n\nSimilarly, rotation bitwise operations have their own applications such as in cryptographic models (encryption, hashing), for example.\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Jul 12, 2018 at 10:40",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Rotations of bitfield or 'circular shifts' are very often used in cryptography as an non-linear operator to achieve what they call 'confusion' (trying to break all the statistical links between the clear-text and the cipher-text).\n\nThe classical graphical representation of the rotation-left is quite self explanatory:\n\n\n\nBut, it also has a meaning in pure arithmetic. It can be seen as a multiplication and an addition like that (n is the size of the bitfield):\n\n```\nrotate-left (a, 0) = a\nrotate-left (a, 1) = 2^(1).a + 2^(-n).a\nrotate-left (a, 2) = 2^(2).a + 2^(1-n).a\n...\nrotate-left (a, n-1) = 2^(n-1).a + 2^(-1).a\nrotate-left (a, n) = a\n\n```\nIn C language you might interpret this with only bitwise operators as follow (see the Wikipedia article about circular shift):\n\n```\nuint32_t rotl32 (uint32_t value, unsigned int count) \n{\n  return ((value << count) | (value >> (32 - count)));\n}\n\n```\nAnyway, the rotations are often neglected in most of the programming languages. You cannot find it easily in C for example. But, this is mainly because:\n\nYet, all the assembler languages propose rotations operators because they can be source of a lot of optimizations at low-level.\n\n",
      "votes": "4",
      "user": "perror",
      "time": "Jul 12, 2018 at 14:14",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Data lossy shifts: shl eax,n : eax = ( eax*(2^n) ) %(2^32) and shr eax,n : eax = floor( eax/(2^n) )\n\nGenerally found in fast unchecked or logic bound integer arithmetic optimizations on a single data value e.g. address offsets for repeated size records.\n\nData lossless rotate: rol eax,n : eax = shl eax,n or shr eax,32-n\n\nGenerally used in cryptography, checked arithmetic optimizations or arithmetic on a string of data values (search long multiplication) or shifting graphical bit masks e.g. rol eax,8 gives: and eax,0xFFFFFF00 eax *2^8 for this data value and and eax,0x000000FF carry or overflow to next more significant data value.\n\n",
      "votes": "3",
      "user": "Paweł Łukasik",
      "time": "Jul 12, 2018 at 9:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The other proposed answers are clearly the primary applications of rotate instructions; however, I (perhaps somewhat uniquely) use them as a means to non-destructively access data in the upper half of 32-bit and 64-bit registers (primarily when dealing with packed data while reversing video game coordinate data).\n\nSince there are no instructions that specifically do that task, it's necessary to shift (destructive) or rotate (non-destructive) that data to the lower half of registers so it can be accessed/modified accordingly.\n\n",
      "votes": "1",
      "user": "dsasmblr",
      "time": "Jul 12, 2018 at 21:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}