{
  "title": "Extracting instruction and operand information in IDA Python",
  "link": "https://reverseengineering.stackexchange.com/questions/22265/extracting-instruction-and-operand-information-in-ida-python",
  "content": "I am writing an IDA python plugin to identify the operands that are defined and used by every instruction. For now, I am using the canonical feature for an instruction to identify if an operand to the instruction is being used or defined. \n\nWhile it works for the most part, I'm not sure how to extract information for the following cases\n\nI could write \"if\" conditions to handle these cases but I'm wondering if there is a better way to extract information.\n\nThanks\n\n",
  "votes": "2",
  "answers": 1,
  "views": "958",
  "tags": [
    "ida",
    "idapython",
    "idapro-sdk",
    "ida-plugin"
  ],
  "user": "Ranganatha Rao",
  "time": "Oct 8, 2019 at 0:08",
  "comments": [
    {
      "user": "Avery3R",
      "text": "For #1 are you just trying to figure out how much it changes the stack pointer by?",
      "time": null
    },
    {
      "user": "Vitalii",
      "text": "I think the only way is if. Personally me have some private IDA plugins for catching execution events (including memory or register modifications),and IDA doesn't have powerful enough command parser for that. IDA has not to have it actually. Capstone will unlikely help much here. if is your friend for this very specific tasks (i. e. detection of command that modifies anything as \"side effect\" not obvious from operands and opcode).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I also had this question. The only solution I've found involves using the Capstone Python bindings in conjunction with IDA. The method call is regs_access https://www.capstone-engine.org/op_access.html\n\n",
      "votes": "2",
      "user": "Trey Keown",
      "time": "Oct 24, 2019 at 21:13",
      "is_accepted": false,
      "comments": []
    }
  ]
}