{
  "title": "How to detect whether stack or alternative memory access type in LDM/STM instruction?",
  "link": "https://reverseengineering.stackexchange.com/questions/9212/how-to-detect-whether-stack-or-alternative-memory-access-type-in-ldm-stm-instruc",
  "content": "I am attempting to disassemble some ARM machine code.\nThe ARM Instruction Set defines the Block Data Transfer instructions (LDM and STM) as below, used for loading and storing to multiple registers at once.\n\nThere are two types of addressing modes: for stacks or for other purposes. Maybe I'm not understanding something correctly, but I dont see a way to determine which type an instruction is using from looking at the machine code.\n\nDoes it even matter on the CPU level, and is just a feature to make the assembly programmer's life easier? Since for example LDMFD and LDMIA are equivalent operations (I think?).\n\n\n\n\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "486",
  "tags": [
    "disassembly",
    "assembly",
    "arm"
  ],
  "user": "Magg Gray",
  "time": "Jun 24, 2015 at 11:53",
  "comments": [
    {
      "user": "j.p.",
      "text": "ldmfd stands for \"load multiple full decreasing\" (this is the stack-viewpoint: the register Rn contains a pointer to a stack, \"decreasing\" means that stack is growing to lower addresses, and \"full\" means that the element Rn points to is on the stack (the \"top\" of the stack)), and ldmfd takes a set of values off the stack. ldmia stands for \"load multiple increase afterwards\" and loads several registers from the address in Rn increasing Rn after (each) load. Both are the same, just different points of view.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "From the ARM manual:\n\nSo yes, these are synonyms, confirmed by the manufacturer.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Guntram Blohm",
          "text": "I didn't realize j.p. had already submitted his comment, which says essentially the same, when i posted my answer.",
          "time": null
        }
      ]
    }
  ]
}