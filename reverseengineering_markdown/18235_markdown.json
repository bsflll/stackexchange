{
  "title": "JAVA Decryption - Reverse engineering an Android application",
  "link": "https://reverseengineering.stackexchange.com/questions/18235/java-decryption-reverse-engineering-an-android-application",
  "content": "I am trying to decrypt an encrypted string, but I am stuck in Ciper.doFinal() where the decryption throws a BadPaddingException.\nThe string in question is 3qBogw/PIqpErH/DyEHLTQ==. One thing I know is that the string when decrypted contains a number (It is used in Integer.valueOf())\n\nFirst, the following method is called;\n\n```\npublic static String getRandom() {\n    String str1 = UUID.randomUUID().toString();\n    String str2 = dCpw^jDyaip^Hfy]XgdRbp_imwbheJCFxTF^ligkteDEdrbtsu\\yIV[;\n    StringBuilder localStringBuilder = new StringBuilder();\n    localStringBuilder.append(str1);\n    localStringBuilder.append(str2);\n    return StringUtils.replaceEachRepeatedly(localStringBuilder.toString(), new String[] { \"dCp\" }, new String[] { \"gPs\" });\n}\n\n```\nNothing too fancy here just creates a UUID and concats it with a constant string and also uses Apache StringUtils to replace all occurances of dCp to gPs - (not sure why that is required)\n\n```\npublic static String decrypt(String str) {\n   try {\n      String random = getRandom();\n      byte[] decode = Base64.decode(str, 0);\n      byte[] array = convertToArray(random);\n      return new String(ciperDecrypt(decode, array, array), \"UTF-8\");\n   } catch (Exception e) {\n      e.printStackTrace();\n      return \"\";\n   }\n}\n\n```\nHere in the decrypt method, the generated random value is passed to a method in order to convert it to a byte array. \nFollowing is that method,\n\n```\nprivate static byte[] convertToArray(String str) throws UnsupportedEncodingException {\n    byte[] obj = new byte[16];\n    byte[] bytes = str.getBytes(\"UTF-8\");\n    int length = str.length();\n    System.arraycopy(bytes, 0, obj, 0, Math.min(bytes.length, obj.length));\n    return obj;\n}\n\n```\nThere is nothing fancy here too, just returns a byte array obtained from String.getBytes() methods. But what is interesting is that only first 16 bytes are used. This is what worries me, if you look at this carefully, in the getRandom() method they concat a UUID string and another constant string. But once the same string is passed to this method, the rest of the string is ignored.\n\nAnd then finally ciperDecrypt method uses a Ciper to decrypt the string. \n\n```\npublic static byte[] ciperDecrypt(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {\n    try {\n        Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        SecretKeySpec secret = new SecretKeySpec(paramArrayOfByte2, \"AES\");\n        IvParameterSpec param = new IvParameterSpec(paramArrayOfByte3);\n        localCipher.init(2, secret, param);\n        return localCipher.doFinal(paramArrayOfByte1);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n```\nThis procedure looks fine, but when I try to execute it, I get a BadPaddingException when the doFinal() line is executed. What I suspect is in the creation of the byte[] where there is some data loss. \n\nIt would be really helpful if anyone can identify where I have gone wrong. \nI would really appreciate it, \nThanks!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "480",
  "tags": [
    "android",
    "java"
  ],
  "user": "Sudara",
  "time": "May 11, 2018 at 22:50",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "Adding to my answer - I guess the key really seems to be wrong because it makes no sense. It decrypts a fixed string with a random key (first 16 bytes of the UUID), I don't see how this would ever work without sheer luck.",
      "time": null
    },
    {
      "user": "Madushan",
      "text": "Instead of trying to reverse engineer the encryption algorithm, you can try hooking the original decryption function using frida (frida.re/docs/android)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think your decryption is wrong, possibly because you use a wrong key.\n\nIf I remember correctly, PKCS5 allows you to kind of detect faulty decrypts. The reason is that PKCS5 expects decrypted data to be in a special padding format. If your decryption fails, the padding format isn't adhered to and thus it complains about bad padding.\n\nWithout having looked it up, an example:\n\nSay I use PKCS5 padding for my input (length 10 bytes) for a block size of 16 bytes. Properly padded it would look like this:\n\n```\nData      xx xx xx xx xx xx xx xx xx xx 06 06 06 06 06 06\n\n```\nThe 06 bytes at the end are padding and their value must be how many padding bytes there are.\n\nSo if you decrypt something and the last n bytes (n = byte value of last byte) aren't n, PKCS5 will complain about bad padding.\n\nIn my experience that happens with faulty decryptions due to wrong key.\n\n",
      "votes": "1",
      "user": "Johann Aydinbas",
      "time": "May 15, 2018 at 3:26",
      "is_accepted": false,
      "comments": []
    }
  ]
}