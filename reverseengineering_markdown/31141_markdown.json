{
  "title": "IDA api: get function argument definition",
  "link": "https://reverseengineering.stackexchange.com/questions/31141/ida-api-get-function-argument-definition",
  "content": "So let's say we have the following code:\n\n```\n0: lea rax, [rbp+8]\n1: mov rcx, rax\n2: mov rdx, 5\n3: call my_fun\n\n```\ni want to get the actual argument of the my_fun call, which would be the [rbp+8] local var in this case.\n\nI tried getting the addresses of the arguments with:\n\n```\naddrs = idaapi.get_arg_addrs(3)\n\n```\nbut that returns the address of mov rcx, rax. From that i would need something like the use-definition chain on rax, which i couldn't find if supported by ida.\n\nmy ultimate goal is to cast all the arguments to my_fun calls to a specific type.\nso here, i want to change the type of the local var [ebp+8] to another type\n\n",
  "votes": "2",
  "answers": 0,
  "views": "325",
  "tags": [
    "ida",
    "idapython",
    "ida-plugin"
  ],
  "user": "xar3",
  "time": "Nov 16, 2022 at 12:53",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "Do you want to use the Hex-Rays decompiler, or do you want to use IDA? The options are different for those two cases. Hex-Rays offers more options.",
      "time": null
    },
    {
      "user": "xar3",
      "text": "i have access to the hex-rays decompiler, i presume that would be the easier/more complete solution? Interested to also see a high level overview of how you would approach this with just ida, would that involve scripting something like a dataflow analysis module?",
      "time": null
    }
  ],
  "answers_data": []
}