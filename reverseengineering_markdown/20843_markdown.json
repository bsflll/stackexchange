{
  "title": "What is this assembly doing?",
  "link": "https://reverseengineering.stackexchange.com/questions/20843/what-is-this-assembly-doing",
  "content": "I wrote a very basic crackme to learn how assembly works.\n\nEven though I wrote it myself, I am having some trouble understanding a few pieces of the assembly:\n\n\n\nWhat I know up to now is: [rbp+rax+input_buffer] is basically input_buffer[rax], xor'ing two of the same registers resets them and that's about it (apart from the very basic stuff like add, mov, inc).\n\nI specifically don't understand what movsx .. and add ecx, 0FFF.. is doing.\n\nThe input_buffer is filled with _fgets. I'm intentionally not saying a working input to see if you can figure it out (it shouldn't be hard anyways).\n\nA proper input would be 0123456789  \n, note that I discard the newline via strcspn.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "155",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "G. Ramistella",
  "time": "Mar 10, 2019 at 20:57",
  "comments": [],
  "answers_data": [
    {
      "content": "I guess the original code is something like:\n\n```\nchar input_buffer[...];\n// ...\nint c = input_buffer[i];\n\n```\nSince the variable c is a int and input_buffer is a char[], your compiler has to promote the read char as a int. That's why you have the movsx instruction. It will read the current character and sign extend it, so it'll fit to a int.\n\nAbout the add, it's common for a compiler to encode a sub dst, imm as add dst, -imm, if you negate 0xffffffd0 (SHIFT - in IDA), you'll obtain -0x30. This is how you convert the ASCII digit into a integer.\n\n",
      "votes": "3",
      "user": "wisk",
      "time": "Mar 10, 2019 at 22:01",
      "is_accepted": true,
      "comments": []
    }
  ]
}