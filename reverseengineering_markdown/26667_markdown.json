{
  "title": "Rebuild IAT after manually unpacking DLL",
  "link": "https://reverseengineering.stackexchange.com/questions/26667/rebuild-iat-after-manually-unpacking-dll",
  "content": "I've been trying to unpack this dll and I'm pretty sure that 0x7c3ea902 or 0x1007A9D2 (ASLR disabled) or simply 0x7A9D2 is OEP.\n\n\n\nBut after dumping with OllyDumpEx and trying to fix IAT with ImpREC it just doesn't work.\n\n\n\nHere are the results from ImpREC\n\n\n\nMy question is, why are there invalid imports detected when the OEP is most likely correct?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "dll",
    "unpacking",
    "dumping",
    "import-reconstruction"
  ],
  "user": "majidarif",
  "time": "Jan 8, 2021 at 10:16",
  "comments": [
    {
      "user": "bart1e",
      "text": "Can you share the dll (packed version)?",
      "time": null
    },
    {
      "user": "majidarif",
      "text": "@bart1e I can but not sure if it's safe to do so.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I solved this by manually fixing each missing import API.\n\nFirst I did a text dump of the unpacked dll using BinText where I found a list of imported API's.\n\n\n\nI then compared it to the list of API detected by ImpRec and I noticed that the calls are in the same order on the text dump.\n\n\n\nSo I just double clicked the line of the invalid import on ImpRec and manually input the correct API (based on the order shown on the text dump) as seen here:\n\n\n\nI repeated this for every invalid API and fixed the dump and this time it all worked.\n\nTo sum it all up from the original question. The OEP was correct. The detected API's were correct. It just needed a little intervention to fix the invalid imports detected.\n\nThank you!\n\n",
      "votes": "2",
      "user": "majidarif",
      "time": "Jan 7, 2021 at 23:29",
      "is_accepted": true,
      "comments": []
    }
  ]
}