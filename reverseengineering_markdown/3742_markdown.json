{
  "title": "Change calling convention from IDAPython?",
  "link": "https://reverseengineering.stackexchange.com/questions/3742/change-calling-convention-from-idapython",
  "content": "I have a 64-bit Mach-O sample that uses the System V AMD64 ABI calling convention (rdi, rsi, rdx, rcx,...); but IDA thinks all the functions are using cdecl. I'm new to IDA scripting but didn't find any information in the docs. My goal is to convert all the function types to:\n\n```\ntype __usercall function<rax>(type name0<rdi>, type name1<rsi>, ...)\n\n```\nRelated: is there a way to read the arguments and/or number of arguments from the function definition?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "idapython",
    "calling-conventions"
  ],
  "user": "xmm0",
  "time": "Feb 22, 2014 at 19:42",
  "comments": [],
  "answers_data": [
    {
      "content": "Use idc.SetType (see documentation here  )\nIt works exactly the same as pressing y on function and defining the type, but you have to add semicolon to the end of the type definition.\n\n",
      "votes": "3",
      "user": "w s",
      "time": "Feb 23, 2014 at 8:16",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There is no need to do anything. For x64 Mach-O and ELF files, cdecl is the same as fastcall and means SysV AMD64 ABI.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Feb 24, 2014 at 20:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}