{
  "title": "ARM multiply compiler optimization",
  "link": "https://reverseengineering.stackexchange.com/questions/25589/arm-multiply-compiler-optimization",
  "content": "I need help interpreting this compiler optimization:\n\n```\n   ;R12 = 0x88888889;\n    UMULL           LR, R2, R12, R3 ; R3 * 0x88888889;\n    MOV             R2, R2,LSR#3 ; ((R3 * 0x88888889 << 32) >> 3)\n    RSB             R2, R2, R2,LSL#4 ; (R3 * 0x88888889 >> 32 >> 3) << 16\n    RSB             R2, R2, R3,LSL#1 ; (R3 << 1) - ((R3 * 0x88888889 >> 32 >> 3) << 16);\n\n```\ncurrently i interpreted this like so (not sure it is correct):\n\n```\n(R3 * 2) - ((R3 * 0x88888889 * 120) / 0xFFFFFFFF);\n\n```\nI found that it maybe integer division, I hope someone can help me understand this optimization better\n\nThanks.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "184",
  "tags": [
    "arm",
    "compiler-optimization"
  ],
  "user": "Koi",
  "time": "Aug 1, 2020 at 23:07",
  "comments": [
    {
      "user": "mumbel",
      "text": "only pattern i see is converting it to the next highest (available) even number, repeat 15 times, then switch to odd numbers, repeat 15 times, even numbers... (multiples of 15 are themselves) no clue what that is though, sorry",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You are on the right lines with integer division.\n\nThe first 3 instructions are reasonably clear -\n\nAt this point R2 = 15 * int( R3 / 15 ).\n\nThe last RSB then gives the final result R2 = R3 * 2 - 15 * int( R3 / 15 ).\n\nEdit: in fact, this can be simplified to R2 = R3 + (R3 % 15) (where % is the modulo operator.)\n\nYou can see example compilations of both of these formulae here.\n\n",
      "votes": "1",
      "user": "Ian Cook",
      "time": "Aug 3, 2020 at 9:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}