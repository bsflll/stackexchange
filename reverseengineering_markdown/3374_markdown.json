{
  "title": "Cannot call function (properly) in ollydbg",
  "link": "https://reverseengineering.stackexchange.com/questions/3374/cannot-call-function-properly-in-ollydbg",
  "content": "I need some help regarding calls in assembly with Ollydbg.\nI'm messing around with a simple application.\nSo far, so good, I created a codecave for myself to add some code.\n\nBut whenever I try to create a call to a function outside my debugged executable module to, for example, a kernel32 or msvcrt function, it messes everything up.\n\nLet's look at some random call in the application:\n\n```\n0041D654     FF15 DC714200  CALL DWORD PTR DS:[<&KERNEL32.GetCommandLineA>]\n\n```\nWhen I double click it, it shows me CALL DWORD PTR DS:[4271DC]\nSo, 4271DC seems to point to 76FB496D, which is, indeed:\n\n```\n76FB496D >-FF25 60070177    JMP DWORD PTR DS:[<&api-ms-win-core-processenvironment-l1-2-0.Get> ;KERNELBA.GetCommandLineA\n\n```\nWell, I just stole that from the application itself.\nNow I want to create a call to kernel32 myself.\nI assemble a line and enter CALL DWORD PTR DS:[Kernel32.GetCommandLineA]\nNow it's saying:\n\n```\n0041D654     FF15 6D49FB76  CALL DWORD PTR DS:[KERNEL32.GetCommandLineA]\n\n```\nLooking good!\n\nAssemble the line CALL DWORD PTR DS:[76FB496D]. Giving this a run works fine ofcourse, but whenever I run it like this on another pc, all hell breaks loose.\n\nMy question is: How can I make such an pointer CALL DWORD PTR DS:[4271DC], so the code runs on all pc's?\n\nI can of course use CALL DWORD PTR DS:[4271DC] in the application to call the function getcomandlineA whenever I want, but I don't know the (dynamic?) pointer to, let's say, kernel32.lstrcpy.\n\n",
  "votes": "4",
  "answers": 3,
  "views": "2k",
  "tags": [
    "ollydbg"
  ],
  "user": "Dennis van den Berg",
  "time": "Jan 7, 2014 at 9:05",
  "comments": [
    {
      "user": "0xec",
      "text": "You can disable ASLR by editing in a PE editor such as CFF Explorer. Then it will work on all machines.",
      "time": null
    },
    {
      "user": "Stolas",
      "text": "When ASLR is enable you can do something like this to find the LoadLibrary function: code.google.com/p/w32-dl-loadlib-shellcode/source/browse/trunk/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The address at 004271DC is resolved at the application start via the executable Imports. Those addresses are different for every executable. The address where the module and functions are loaded (here 76FB496D) is also not guaranteed to always stay the same so you shouldn't hardcode them.  \n\nA generic method to call a function in any executable is to dynamically import it with LoadLibrary and GetProcAddress as described here : https://stackoverflow.com/questions/8696653/dynamically-load-a-function-from-a-dll\n\n",
      "votes": "4",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "If you just want to use a single CALL, you need to make sure that your target API function is statically imported. You can use a tool like IIDKing to add your target API function to your PE file's static imports.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Jan 7, 2014 at 2:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Call to hard-coded addresses will not work for different reasons, the most obvious is ASLR, which randomizes the base address of every DLL, which means that the function address will be different at every boot.\n\nSolving this issue is far from simple as the use of LoadLibrary and GetProcAddress, classically used by developers to dynamically import DLL will also have a dynamic address, so you can't use them to determine the address of your sought function.\n\nTo solve this issue you have to use shellcode techniques; in other words you will have to include assembly code that parse the PEB structure to determine the base address of Kernel32 address, search for your function in export table and finally use the it.\n\nAnother more advanced techniques for more complex usage is the use of reflective DLL injection, but it is a bit far from what you are looking for.\n\n",
      "votes": "2",
      "user": "3asm_",
      "time": "Jan 7, 2014 at 14:24",
      "is_accepted": false,
      "comments": []
    }
  ]
}