{
  "title": "How to get cross-references to a struct type in IDA by IDAPython and add comments to variables of the struct type",
  "link": "https://reverseengineering.stackexchange.com/questions/12791/how-to-get-cross-references-to-a-struct-type-in-ida-by-idapython-and-add-comment",
  "content": "I'm writing an IDA plugin using idapython in order to add comments (located in database) to variables of struct types. In order to do this, firstly, i need to get the list of cross-references to a given structure type (e.g. struct BITMAPINFO) which can be found in \"Structure\" subview in IDA. \n\nI know IDA provides this function from version 6.2 by right-button mouse clicking on the structure name and selecting \"List cross references to\". A window like the following will be popped-up:\n\n\n\nEach item of the list in above picture is either an address where a global variable of type %structure name% (here is BITMAPINFO) is declared or a position where a local variable of type \"structure name\" is defined. The former is like\n\n\n(here is type GUID, not BITMAPINFO).\n\nThe latter is like\n\nThis is the position where IDA declare local variables based on its identified type.\n\nI wonder if there is a way to get these data by IDAPython.\n\nNOTE: This is different from cross-references to a(ll) member(s) of a struct type, which can be got by right-button mouse clicking on the structure member name, shown as the following\n\n\n\nBefore asking here, i do it like:\n\n```\n#CODE 1\nea = idc.LocByName(%structure name%)  \n\nfrm = [x.frm for x in idautils.XrefsTo(ea)]\n\n```\nI think i have got the whole list of cross-references to %structure name% using my above code. However, i found many EAs in the list seem like ineffective such as '0xff0052c9' (MaxEA is 0x108f800). However, i guess my code has got the desired result because the length of returned list is equal to the number of items in the list shown as the 1st picture. But i can't explain the result especially the (seemingly) ineffective ones. Also, when i add comments to the addresses in the list using the following code\n\n```\n#CODE 2\nfor ea in xrefs_list:\n    # each cross-reference to the given struc type\n\n    if repeatable:\n        # add repeatable comment 'cmt' at address 'ea'\n        idc.MakeRptCmt(ea, cmt)\n\n    else:\n        # add comment  'cmt' at address 'ea'\n        idc.MakeComm(ea, cmt)\n\n```\ni found i only added comments to the effective addresses which are between idc.MinEA() and idc.MaxEA(), and these addresses are places where global instances of the queried struct type are declared, as shown in the 2nd picture.\n\nMy questions are:\n\n",
  "votes": "9",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "Bingchang",
  "time": "Jun 8, 2016 at 2:47",
  "comments": [
    {
      "user": "tmr232",
      "text": "Seems like those references are stack variable references. I updated my answer to match.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The xrefs you are showing are xrefs from stack variables. As you mentioned, when trying to get the xrefs to the struct, you get two types of results:\n\nIn IDA the stack variables for a function are represented internally as a struct, with each stack variable a member of that struct.\n\nDocs link\n\nKnowing that, we can infer that the weird xrefs are member-ids (which they are). To get the names of the containing structs we use fullname = idaapi.get_member_fullname(mid) and get something like $ F4014B0.var_14.\n$ F4014B0 is the netnode name of the stack-frame struct for the function at 0xF4014B0.\n\n```\nimport idc\nimport idaapi\nimport idautils\n\nsid = idc.GetStrucIdByName('my-struct-name')\nfor xref in idautils.XrefsTo(sid):\n    if 0xFF000000 > xref.frm:\n        # The struct is used as data\n        print 'Data xref from 0x{:X}'.format(xref.frm)\n    else:\n        # The struct is used as a stack variable.\n        mid = xref.frm\n        fullname = idaapi.get_member_fullname(mid)\n        function_ea = int(fullname[2:].split('.')[0], 0x10)\n        print 'Stack xref from 0x{:X}'.format(function_ea)\n\n```\n(This is here because it was my initial answer, and it contains valuable information.)\n\nYou were really close to the solution. Your code gives you the sid, so you only get references to the struct itself. What you need, is references to the different members, and this can be done using the mid. You can get it using fully-qualified member names. However, since there are many members to every struct, enumerating them is usually a better choice.\n\n```\nimport idc\nimport idautils\n\ndef get_member_ids(sid):\n    offset = 0\n    while offset != 0xFFFFFFFF:\n        mid = idc.GetMemberId(sid, offset)\n        if mid != -1:\n            yield mid\n        offset = idc.GetStrucNextOff(sid, offset)\n\n\ndef get_member_xrefs(struc_name):\n    sid = idc.GetStrucIdByName(struc_name)\n    for mid in get_member_ids(sid):\n        for xref in idautils.XrefsTo(mid):\n            yield xref.frm\n\n\n# And the usage:\nfor xref in get_member_xrefs('my-struct-name'):\n    print '0x{:X}'.format(xref)\n\n```\nedit to answer question in comment\n\nThis next bit is about IDA internals, so I might be off mark here. I am basic the information on SDK docs see here\n\nAs visible in my code, many APIs that are documented for use on effective addresses (eas) also work on other IDA primitives - struct ids, member ids - without any difference.\n\nInternally, objects in IDA are mapped to netnodes. Lines in IDA are mapped linearly to netnode numbers, While other objects are mapped to numbers starting at 0xFF000000. \nWhile addresses and struct ids might have a different semantic meaning, they are both netnode numbers. In IDA's APIs, this means that they are treated the same way.\n\nI hope this makes things clearer.\n\n",
      "votes": "7",
      "user": "tmr232",
      "time": "Jun 5, 2016 at 19:35",
      "is_accepted": true,
      "comments": [
        {
          "user": "Bingchang",
          "text": "Thanks for your answer. What your code return is the union list of cross-references to each structure member, which can also be got by right-button mouse clicking on name of  a structure member. This is different from the list of cross-references to %structure name% and isn't my desired result. I added new information to my question. Besides, I start to know SID and MID can be used as EA. Can you tell me how to explain this?",
          "time": null
        },
        {
          "user": "tmr232",
          "text": "@Bingchang, I edited the reply to address your question about the MID and SID. I don't have an answer to the main question yet. I get the misunderstanding.",
          "time": null
        },
        {
          "user": "Bingchang",
          "text": "Your answer is really cool.  Just as you answered, those (seemingly) ineffective addresses are references to stack variables and and each stack variable is a member of a struct which internally represents the stack frame of a function. I have solved my question and updated my question to include my solution. Besides, you open the  door to internals of IDA.",
          "time": null
        },
        {
          "user": "tmr232",
          "text": "@Bingchang I am happy to help. Just notice that your question does no longer match the title. You might want to split it into 2 separate questions for clarity, and so that people can look it up more easily in the future.",
          "time": null
        },
        {
          "user": "Bingchang",
          "text": "as you advised, i reedited my question and split it into 2 questions. However, i am not sure if it is suitable or if i need to open a new question.",
          "time": null
        }
      ]
    },
    {
      "content": "In order to make the question and answer separate to make things clearer, I added my own solution mainly according to @tmr232's answer.\n\nFor the 1st question, just as @tmr232 answered, those (seemingly) ineffective addresses are references to stack variables. In IDA's internals, each stack variable is treated as a member of a struct which represents the stack frame of a function. CODE 1 in the question can return all cross-references to a struct type, including cross-references to global instances and local stack instances.\n\nFor the 2nd question, comments to be added to references to local stack instances can be added by treating these references as members of a struct.\n\nThe code is:\n\n```\ndef add_struct_cmt (struct_name, cmt, repeatable):\n\n    # locate ea by structure name, here, ea is identical to sid\n    sid = idc.LocByName(%structure name%)\n\n    if sid == idaapi.BADADDR:\n        return \n\n    # get all cross-references to 'sid' including references to global \n    # struct instances and references to local stack variables\n    frm = [x.frm for x in idautils.XrefsTo(sid)]\n\n    for ea in frm:\n\n        if ea > idc.MaxEA():\n            # references to stack variables\n\n            # IDA 6.8 and above: getting 'member_t' using 'ea' as mid\n            mptr = idaapi.get_member_by_id(ea)\n\n            # IDA 6.8: setting member comment using 'mptr' as index\n            idaapi.set_member_cmt(mptr, cmt, repeatable)\n\n            # IDA 6.9: 'mptr' is type of list\n            #idaapi.set_member_cmt(mptr[0], cmt, repeatable)\n\n        else:\n            # references to global struct instances\n\n            if repeatableï¼š\n                # add repeatable comment\n                idc.MakeRptCmt(ea, cmt)\n\n            else:\n                # add non-repeatable comment\n                idc.MakeCmt(ea, cmt)     \n\n```\n",
      "votes": "1",
      "user": "Nightforce2",
      "time": "Jul 9, 2018 at 18:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "Bingchang",
          "text": "NOTE: 1. API get_member_by_id doesn't exist in IDA 6.6, however, this can be bypassed by other APIs, like sid = idaapi.get_member_struc(idaapi.get_member_fullname(mid)) and then enumerating its members",
          "time": null
        },
        {
          "user": "Bingchang",
          "text": "NOTE: in IDA 6.8, idaapi.get_member_by_id returns a proxy of type 'member_t *', however, in IDA 6.9, what it returns is a list and the proxy of type 'member_t *' is the 1st element.",
          "time": null
        }
      ]
    }
  ]
}