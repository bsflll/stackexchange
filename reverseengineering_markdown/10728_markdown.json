{
  "title": "What does lea rdx,qword ptr ss:[rbp+50] mean?",
  "link": "https://reverseengineering.stackexchange.com/questions/10728/what-does-lea-rdx-qword-ptr-ssrbp50-mean",
  "content": "What does the code below exactly mean?\n\n```\nlea rdx,qword ptr ss:[rbp+50]\n\n```\nI have difficulty in rbp+50. Is rbp the base pointer in the 64 bit CPU architecture? What is the base pointer refering to? how can I find out the value at rbp+50? what does ss mean? what does qword mean? I totally confused with these terms.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "7k",
  "tags": [
    "disassembly",
    "x86-64",
    "assembly"
  ],
  "user": "FreeMind",
  "time": "Aug 27, 2015 at 17:45",
  "comments": [
    {
      "user": "phuclv",
      "text": "How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?, How to interpret segment register accesses on x86-64?, Meaning of CS and SS registers on x86-64 Linux in userland?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The code means rdx = rbp + 50.\n\nFor the explanation, we'll go bottom up...\n\nqword is 8-bytes (64 bits). It stands for quad-word, same as dword stands for double-word. It is the size of every rXX register. The qword ptr means that we are accessing a qword sized memory block (as oppised to a byte, word or dword).\n\nss stands for stack-segment. However, in non 16-bit systems all segments are usually mapped to 0. It is probably shown in the code as an artifact of the dis-assembly as the rbp register is used to point into the stack.\n\nThe lea commands mean load-effective-address. It does not take the value at the given address, but rather the address itself. So in pseudo code we can rewrite the entire thing as rdx = rbp + 50.\n\n",
      "votes": "10",
      "user": "tmr232",
      "time": "Aug 27, 2015 at 20:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}