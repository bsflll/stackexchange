{
  "title": "Android packageInfo signature",
  "link": "https://reverseengineering.stackexchange.com/questions/24994/android-packageinfo-signature",
  "content": "Are there anyways I can learn what packageInfo.signatures[0] is so I can use it to apply the same algorithm in Python.\n\nTo further explain:\n\n```\n    private static SecretKeySpec a(Context context) {\n        try {\n            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 64);\n            if (!(packageInfo == null || packageInfo.signatures == null || packageInfo.signatures.length <= 0)) {\n                return new SecretKeySpec(Arrays.copyOf(packageInfo.signatures[0].toByteArray(), 16), \"AES\");\n            }\n        } catch (NameNotFoundException e2) {\n            ThrowableExtension.a(e2);\n        }\n        return null;\n    }\n\n```\nThis android app is sending some sort of a key that is changing based on timestamp with every request it is sending. And it is using the above code for creating a SecretKeySpec which then gets used in below.\n\n```\n    @NonNull\n    private synchronized String d(String str) {\n        byte[] digest;\n        try {\n            byte[] bytes = str.getBytes(\"UTF-8\");\n>>>>>>>     this.r.init(2, this.l);\n            byte[] doFinal = this.r.doFinal(this.k);\n            byte[] a2 = Bytes.a(doFinal, this.j, bytes, doFinal, this.n.a().getBytes(\"UTF-8\"));\n            digest = this.q.digest(a2);\n            Arrays.fill(a2, 0);\n            Arrays.fill(doFinal, 0);\n        } catch (Exception e2) {\n            throw new RuntimeException(e2);\n        }\n        return jl.a(digest);\n    }\n\n```\nSo, I know that the function argument str is for some reason currentTimeMillis * 1151 which gets used in byte[] a2 = ... line then gets hashed with sha1 there comes the time based changing part. What I can't find is what signatures[0] is in this context and how can I achieve it, in the construction of the class, this.l is assigned with SecretKeySpec ( signature[0] ). this.r is an AES Cipher. From the readings I made, I think the \"2\" in init(2, this.l) means decode mode.\n\nAnd Can you please explain to me what is the effect of filling a2 and doFinal variables with 0(zeroes) in this context as it doesn't get used anywhere else.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "825",
  "tags": [
    "android",
    "encryption",
    "apk"
  ],
  "user": "Shubidubapp",
  "time": "May 12, 2020 at 21:00",
  "comments": [
    {
      "user": "Robert",
      "text": "AFAIK the Signature.toByteArray() contains the X.509 DER encoded signature certificate that was used for signing the app. See also stackoverflow.com/a/61403954/150978. See also this code that reads the signature data to an X509 certificate: github.com/linchaolong/ApkToolPlus/blob/master/lib.JiaGu/src/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In this instance, packageInfo.signatures is the first signature that you find in the APK. Meaning, this is the first signature file that the Android system has read from the META-INF/ folder inside the APK.\n\nBasically, what you'll need to do is unzip the APK, look inside the META-INF/ and grab whatever file has the extension .RSA (unlikely, but it could be .DSA). This essentially what the packageInfo.signatures[0] is returning, with the .toByteArray() making a ByteArray object of the data.\n\nIf you have any doubts, or are having issues further, I'd sugged using Frida to hook this function call and watch what is actually returned.\n\n",
      "votes": "0",
      "user": "diff",
      "time": "May 18, 2020 at 3:36",
      "is_accepted": true,
      "comments": []
    }
  ]
}