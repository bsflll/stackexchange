{
  "title": "The callstack does not show the message handler",
  "link": "https://reverseengineering.stackexchange.com/questions/20401/the-callstack-does-not-show-the-message-handler",
  "content": "After clicking a button or doing anything which might generate a message to be translated and dispatched, why is that the callstack might not show the message handler? \n\nSay I am reversing an application, I hit the Ok button and then it generates a window. Pausing the application after that window is generated should show the message handler in the call stack right? I see a callstack with one of the last entries being the message loop itself (get translate and dispatch) but I don't see the callback function. Should I just try and go through dispatchmessage to get the message handler? Is there some resource which tells me where exactly the messagehandler is in dispatchmessage? \n\n",
  "votes": "0",
  "answers": 1,
  "views": "212",
  "tags": [
    "windows",
    "x64dbg"
  ],
  "user": "Xymistic",
  "time": "Jan 19, 2019 at 11:26",
  "comments": [],
  "answers_data": [
    {
      "content": "prototype of DispatchMessage() is\n\n```\nLRESULT DispatchMessage(\n  const MSG *lpMsg\n);\n\n```\nit takes only a pointer to struct MSG  which has a hwnd as its first \n\n```\ntypedef struct tagMSG {\n  HWND   hwnd;\n  UINT   message;\n  WPARAM wParam;\n  LPARAM lParam;\n  DWORD  time;\n  POINT  pt;\n  DWORD  lPrivate;\n} MSG, *PMSG, *NPMSG, *LPMSG;\n\n```\nthis hwnd is validated and the appropriate callback is called by internal functions of \nuser32.dll and comctl32.dll \n\nyou can get the window proc in the handles window in x64dbg \n\nhere is a screenshot of windows calc.exe paused at a breakpoint in user32.DispatchMessageW() \n\n\n\nyou can get the hwnd parameter by looking at the stack \nwith log {x:[[esp+4]]} \nand following it up in handles window  the screenshot shows the hwnd in status bar\ncommand in command window and the window proc in handles window\n\n\n\nsetting a breakpoint on the proc and hitting f9 will land us in the windowproc\n\n```\nAddress   To        From      Size      Comment        \n0012EFB4  770C5F9F  00631EDE  78        calc.00631EDE\n0012F02C  770C4F0E  770C5F9F  5C        user32._GetRealWindowOwner@4+54\n0012F088  770C4F7D  770C4F0E  28        user32._DispatchClientMessage@20+4B\n0012F0B0  777B702E  770C4F7D  74        user32.___fnDWORD@4+24\n0012F124  770CCC70  777B702E  10        ntdll.777B702E \n0012F134  00631CAC  770CCC70  D70       user32._DispatchMessageW@4+F\n0012FEA4  0064219A  00631CAC  90        calc.00631CAC \n0012FF34  7748ED6C  0064219A  C         calc.0064219A\n0012FF40  777D37EB  7748ED6C  40        kernel32.7748ED6C \n0012FF80  777D37BE  777D37EB  18        ntdll.777D37EB\n0012FF98  00000000  777D37BE            ntdll.777D37BE \n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Jan 17, 2019 at 20:45",
      "is_accepted": true,
      "comments": []
    }
  ]
}