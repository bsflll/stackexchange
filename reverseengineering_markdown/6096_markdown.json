{
  "title": "Rearrange instructions in an ida database?",
  "link": "https://reverseengineering.stackexchange.com/questions/6096/rearrange-instructions-in-an-ida-database",
  "content": "I'm disassembling an old (1996) game, that has been compiled with the Watcom 386 compiler. This compiler seems to aggressively reorder instructions to make better use of the processor pipeline, as seen in this chunk of assembly:\n\n\n\nThe instructions marked with a red dot set up the parameters for the next call; the instructions with a blue dot finish the initialization of the object returned from the previous call. Rearranging them makes the assembly much easier to read:\n\n```\n...\ncall    ClassAlloc13680_0FAh\nmov     edx, [eax]\nmov     [edx+Class180F4.WidgetInputHandler], offset gblHandleTransportDestinationAndCheckForPassengersSpace\nmov     edx, [eax]\nmov     [edx+Class13680.Paint???], offset ClassVehicleManager__PaintForSomeWidget\nmov     dword_A4D88, eax\nmov     eax, [eax]\nmov     [eax+Class10B8C.MouseInputHandler], offset ClassVehicleManager__MouseInputHandler\n\npush    0\npush    2\npush    0\npush    4Eh\npush    5Bh\nmov     ebx, 5Ch\nmov     ecx, 21h\nmov     edx, ebp\nmov     eax, ebp\ncall    ClassAlloc13680_0FAh\npush    0\npush    2\n...\n\n```\n(Note that i moved the mov reg, xxh instructions even further down, because the compiler's calling convention is ax-dx-cx-bx-stack, so i can see the order of arguments here as well)\n\nIs there a way to accomplish this in IDA? I'm not asking for an algorithm to automatically determine which instructions should be \"red\" and which should be \"blue\", and i don't want to patch the original binary file, i'd just like to manually re-arrange instructions in the ida database.\n\nOr is there another way to improve readability of this kind of code in IDA?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "502",
  "tags": [
    "ida",
    "assembly"
  ],
  "user": "Guntram Blohm",
  "time": "Aug 19, 2014 at 12:01",
  "comments": [
    {
      "user": "DCoder",
      "text": "You can write an IDC/IDAPython script to move the selected instructions around, e.g.: you select a sequence of instructions, invoke script, enter the number of bytes to move these instructions down/up, script reorders them using PatchByte or some similar command.",
      "time": null
    },
    {
      "user": "Willem Hengeveld",
      "text": "I wrote an idc script some time ago to do this for arm code: swapinsn.idc. It will rotate a sequence of insns up or down, and fix any relative jumps in that range",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "@WillemHengeveld: Could you make this an answer? It's 90% of what i need, and i'd like to award the rep points to you.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Several years ago i wrote swapinsn.idc to do this for ARM code.  It will rotate a sequence of insns up or down, and fix any relative jumps in that range.\n\nNote that contrary to the comments in the script, i never actually added x86 support.\n\nFor convenience i added hotkey functions HK_ExchangeDown and HK_ExchangeUp as defined in hotkeys.idc.\nSo in can select a range of instructions, type shift-x to move the last selected insn up, and the rest down.\n\n",
      "votes": "5",
      "user": "Willem Hengeveld",
      "time": "Aug 25, 2014 at 9:40",
      "is_accepted": true,
      "comments": [
        {
          "user": "Willem Hengeveld",
          "text": "Btw, i don't have my laptop with me right now, next week i could probably add the x86 support",
          "time": null
        }
      ]
    }
  ]
}