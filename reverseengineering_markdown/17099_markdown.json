{
  "title": "Entry point for STM32 firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/17099/entry-point-for-stm32-firmware",
  "content": "I'm trying to disassemble a firmware for a DIY project, open hardware but closed firmware.\nMy question is how to initialize the disassembler properly (Hopper Disassembler).\n\nThe values I try to figure out are the ones shown here:\n\n\n\nFrom what I know, the processor is a STM32F100C8, ARM Cortex-M3, 64Kbytes Flash, 8Kbytes RAM. The BOOT0 pin is tied low, so I know it's booting from main flash memory:\n\nThe startup sequence is as follows:\n\nI converted the .hex file to a .bin file using arm-none-eabi-objcopy and found:\n\n```\n0x0000 0000  |  10050020 (Stack pointer) \n0x0000 0004  |  05A90008 (ResetHandler)\n\n```\nWhat I don't understand are the memory addresses. \n\nThe stack pointer is too large to be a relative offset (only 8K RAM) and too small to point into SRAM (starting at 0x2000 0000).\n\nThe reset handler is also too large to be a relative offset (only 64k flash) and too small to point to main flash memory (starting at 0x800 0000).\n\nHow do I figure out the proper base address and entry point?\n\nPS: The schematics and firmware for the DIY project can be found here\n\n",
  "votes": "2",
  "answers": 1,
  "views": "5k",
  "tags": [
    "firmware",
    "arm",
    "hopper",
    "entry-point"
  ],
  "user": "sled",
  "time": "Jan 2, 2018 at 14:13",
  "comments": [],
  "answers_data": [
    {
      "content": "The values are in little-endian I believe so the stack pointer is at 0x20000510 and the reset vector is 0x0800a905.\n\n",
      "votes": "4",
      "user": "cimarron",
      "time": "Jan 2, 2018 at 17:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "sled",
          "text": "doh! how could I miss that!",
          "time": null
        }
      ]
    }
  ]
}