{
  "title": "Understanding pseudocode containing a math operation in a variable assignment [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/8655/understanding-pseudocode-containing-a-math-operation-in-a-variable-assignment",
  "content": "So I'm trying to reverse engineer a LFSR encryption scheme using IDA, and am (hopefully) pretty close to cracking it. \n\nThe code in particular iterates through every byte of the encrypted file, decrypts it and stores it in memory (var v22). What stumps me however, is the way the pseudocode seems to do some operations on the variable before declaring it â€“ which I have no idea how to \"translate\" into something a bit less cryptic.\n\nI've included the code below:\n\n```\nfile = fopen((const char *)&bin_filename, \"rb\");\nfseek(file, 0, 0);\n\nmemset(&v22, 0, 0x80000u);\ni = 0;\nwhile ( feof(file) == 0 ){\n    fread(&byte, 1u, 1u, file);\n\n    if ( i % 4 ){\n        decryptedByte = DecryptByte(byte);\n\n        // What happens here on the left hand side of the bitwise OR assignment?\n        *(&v22 + i / 4) |= decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30)) & 0x1C));\n    }\n    else {\n        decryptedByte = DecryptByte(byte);\n        *(&v22 + i / 4) = decryptedByte;\n    }\n\n    ++i;\n}\n\n```\nAs indicated by my comment above, what I don't understand is the meaning of *(&v22 + i / 4) = in the context of a variable assignment. \n\nHow does decryptedByte get assigned to a math equation?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "113",
  "tags": [
    "decompilation",
    "deobfuscation",
    "decryption"
  ],
  "user": "Bjarke",
  "time": "10 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "v22 is the first byte of an 0x80000-byte buffer.\n\n&v22 is a pointer to that buffer.\n\n&v22 + i / 4 is a pointer to the i/4'th byte in that buffer.\n\n*(&v22 + i / 4) |= ... ORs the i/4'th byte in that buffer with decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30)).\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Apr 8, 2015 at 0:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Bjarke",
          "text": "That makes sense! But since i is an integer, won't i/4 mean only 25% of the file will get decrypted?",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Note that your *(&v22 + i / 4) would be better written as v22[i/4]. You're omitting the declaration of v22, but it seems to me that v22 was declared int * where it should better have been declared char * so every array index is multiplied by 4 implicitly (thus divided by 4 explicitly by the decompiler). Also, how much of the file gets decrypted is based on feof and doesn't have anything to do with the buffer size at all. (And the code makes the common mistake of using feof  instead of checking the return value of fread).",
          "time": null
        }
      ]
    }
  ]
}