{
  "title": "How to call and what means: _DWORD *__thiscall",
  "link": "https://reverseengineering.stackexchange.com/questions/30418/how-to-call-and-what-means-dword-thiscall",
  "content": "I have one question maybe you can help, I always find this functions in IDA:\n\n```\nvoid __thiscall sub_79340(_BYTE *this, int a2, int a3, int a4)\n\n```\nAnd I use them like this:\n\n```\n// talkChannel\ntypedef DWORD(__thiscall* _talkChannel)(DWORD localplayer, uintptr_t mode, uintptr_t channelId, const std::string& message);\n_talkChannel talkChannel;\ntalkChannel = (_talkChannel)(moduleBase + 0x79340);\n\ntalkChannel(LocalPlayerPointer, 1, 0, \"hello world\");\n\n```\nBut this time I find this in IDA:\n\n```\n_DWORD *__thiscall sub_142860(_DWORD **this, _DWORD *a2, int a3)\n\n```\nI understand the first definition (return void, calling convention thiscall, address of function X, pointer to this as it's a thiscall, parameters)... but I can't understand the second one :(\n\nI don't know how to call this... Anyone could help me explaining what it means and how to use it? I would like to understand the difference between both\n\nThanks for your time <3\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "928",
  "tags": [
    "ida",
    "c++",
    "game-hacking",
    "calling-conventions"
  ],
  "user": "kuhi",
  "time": "May 18, 2022 at 15:47",
  "comments": [],
  "answers_data": [
    {
      "content": "Basically I've checked with Ghidra to compare and I've found that the signature is different:\n\n```\nvoid __thiscall FUN_00142860(int param_1_00,undefined4 *param_1,int param_2)\n\n```\nSo, basically I just declared the function this way:\n\n```\n// get tiles\ntypedef void(__thiscall* _getTiles)(DWORD map, TileList* buffer, uintptr_t floor);\n_getTiles getTiles;\ngetTiles = (_getTiles)(moduleBase + 0x142860);\n\n```\nSo, double check with other tools and don't rely only in IDA output.\n\n",
      "votes": "1",
      "user": "kuhi",
      "time": "May 19, 2022 at 1:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}