{
  "title": "How do I add functionality to an existing binary executable?",
  "link": "https://reverseengineering.stackexchange.com/questions/185/how-do-i-add-functionality-to-an-existing-binary-executable",
  "content": "I want to add some functionality to an existing binary file. The binary file was created using gcc. \n\n",
  "votes": "48",
  "answers": 8,
  "views": "34k",
  "tags": [
    "linux",
    "c",
    "executable",
    "hll-mapping"
  ],
  "user": "asheeshr",
  "time": "Apr 5, 2013 at 13:25",
  "comments": [
    {
      "user": "Remko",
      "text": "for what platform eg windows, linux?",
      "time": null
    },
    {
      "user": "sw.",
      "text": "What is the functionality that you want to add? because depending on that there are different approaches. For example for automating a GUI you use a different technique that for example changing a database engine.",
      "time": null
    },
    {
      "user": "Ciro Santilli OurBigBook.com",
      "text": "stackoverflow.com/questions/4309771/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are several broad ways in which you could do this.\n\n",
      "votes": "39",
      "user": "Ed McMan",
      "time": "Mar 23, 2013 at 15:47",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Very often, you can change the behavior of a program by carefully hooking into it. Whether you can add the functionality you want this way depends on how the program is constructed. It helps if the program comes in the form of one main executable plus several libraries.\n\nYou can hook into any call that the program makes to shared libraries by linking your own library in first, with LD_PRELOAD. Write a library that defines a function foo, and set the environment variable LD_PRELOAD to the path to your compiled (.so) library when you start the program: then the program will call your foo instead of the one it intends. You can call the original foo function from your replacement by obtaining a pointer to it with dlsym().\n\nHere are a few examples and tutorials:\n\nSome examples of programs that use LD_PRELOAD:\n\nThe limitation of LD_PRELOAD is that you can only intercept function calls that are resolved at runtime (dynamic linking). If you want to intercept an internal call, you'll have to resort to heavier-weight techniques (modifying the executable on-disk, or in-memory with ptrace).\n\n",
      "votes": "18",
      "user": "Gilles 'SO- stop being evil'",
      "time": "Mar 23, 2013 at 14:53",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "So in general these four bigger Questions apply to modifying an Executeable:\n\nThe first basic Question posed: \nIs the Program wary of Code Modifications (Self-Checking, Anti-Debug-Tricks, Copy protection, ...)?\n\nIf so: \n\nThe second Question is:\nCan you find out, which Compiler/Language was used to produce the executeable?\n\nMore Details are better, but most basic constructs (if and other control-structures) should map quite similarly over a variety of compilers.\n\nThis is related to a previous Question on the RE-Stackexchange.\n\nThe third Question is:\nHow is the user interface implemented (CLI, Win32-Window Controls, Custom, ...)?\n\nIf this is known:\nCan you figure out the mapping of common HLL-Constructs (Menues, Dropdown-Menues, Checkboxes, ...) in conjunction with the used Compiler/Language that you want to modify?\n\nThe fourth and biggest Question is:\nHow can you create the desired functionality in the Program?\n\nIn essence this can require quite a bit of reverse engineering, to find out how to best hook into the program without upsetting it.\n\nCentral Point: How can you utilize existing internal API's to reach your Goal, without breaking Stuff (like CRTL+Z, Versioning, Recovery features)?existing Datastructures (and how are they related?)\nexisting Functions (Parameters, Parameter-Format, ...)\nWhat does it do?What else can it do?What does it REALLY do?...\nexisting Processes (= How the program goes about internally, stepwise to implement similar features) What functions are called, in which order?Which Data-Structures are utilized?\nWhere is the Meat of the feature/program (the data, e.g. the main painting area, and how does it relate internally?)\nStuff to look out for (if it concerns the desired feature):JournalingRecovery FeaturesVersioning\nHow is Metadata handled (e.g. Shutter speed, f-Stops, ...), that is related to the desired Feature.\n\nExample projects:\n\nRegarding wrapped Code & Decompilers:\nI will not talk about wrapped Code in other Languages that is packaged with a VM / an Interpreter (Py2Exe, Java 2 Exe, ...), or uses an installed one (JVM, C#). There are pretty good Decompilers for some of those cases. After a successful decompilation it pretty much boils down to defeating the Code Obfuscation (if there is one).\n\nRegarding C/C++-Decompilers:\nI cannot talk about C/C++-Decompilers, though it would boil down to best-effort HLL-Remapping (for stuff the Decompiler did not get) and Code-Deobfuscation (if it was compiled without Symbols) provided there is no further Protection in the Executeable.\n\nReccommendation regarding HLL-mapping:\nIn essence a big part of this Question concerns \"HLL mapping\" (High level language mapping (in machine code)) of and the modification of these constructs in the corresponding machine code. \n\nI found an excellent downloadable starting course, that uses \"IDA Free\", on this Topic here (binary-auditing.com).\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "(Slightly outdated, but as that wasn't mentioned previously in this thread)\n\nLong ago, I spend months extending a software with only the binary.\n\nA bit old-school now - I'd probably inject a DLL these days - but it certainly worked.\n\nAnd at least, it gives you full control via ASM, while keeping maintainability via automated patching.\n\n",
      "votes": "7",
      "user": "Ange",
      "time": "Mar 26, 2013 at 10:45",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You do not need to decompile the binary. If you understand what changes you want to make, and those changes can be made by only modifying the binary file or its dependencies, then you can just make those modifications on disk or in memory. \n\nYou have a few choices on how to effect the modification itself. \n\nYou could use LD_PRELOAD to have the linker load a shared object before the binary runs. Then you don't need to modify the binary on disk at all. This is kind of what valgrind does, it loads as a shared object but then begins dynamic binary instrumentation. \n\nYou could use valgrind. Valgrind would allow you to dynamically re-write the program and modify its behavior arbitrarily. Valgrind is a dynamic binary instrumentation program that allows its tools to edit the program while it executes. If you just want to change program behavior this might work, but valgrind also incurs a global slowdown and if you wanted to patch and redistribute a program, it probably is not ideal. \n\nYou could also use tools like elfsh/eresi to insert new code into the program. Those tools should take care of the act of injecting your code with relation to stuff like the ELF program header. There is a concept of \"ELF infector\" that you could google for, where your injected code becomes the new program entry point, does something, then jumps to the old program entry point. \n\n",
      "votes": "6",
      "user": "Lizz",
      "time": "Apr 6, 2013 at 17:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Although this question focuses on Linux, where personally I would go with the easy LD_PRELOAD method as outlined in other answers, Windows knows a similar mechanism that in fact has been abused in the more recent past (also see alternative approaches below). I used that method to \"crack\" one dongle system.\n\nEnter ...\n\nThe name has been given to the method fairly recently when it turned out that placing DLLs on remote shares and then navigating to shares in, say a media player, would result in the media player loading the remote DLL instead of a local version. This is by design. Changing it now would break hundreds if not thousands of applications.\n\nThis has been addressed by Microsoft in certain ways, although the only real solution is proper implementation on the application side. But then, many developers haven't even grasped NT security even though we have to deal with it ever since Windows 2000 became the first consumer OS based on the NT platform.\n\nAdding functionality doesn't necessarily imply that you patch the executable on-disk. You can also do it in memory.\n\nWhenever an application uses a DLL, and you can tell the load order with Dependency Walker or under a debugger, you can pick one of the DLLs it imports and replace that (in its current location) or placing another DLL in a path that precedes the existing DLL in the load order.\n\nAn alternative method is to change the name of the imported DLLs. In rare cases (well known DLLs, for example) this is the only viable method to load an alternative DLL and may still fail for certain special cases.\n\nIf the used DLL exists in the first location in the DLL search order, you'll literally have to replace the file on disk, unless you rename the import as briefly mentioned above.\n\nA manual approach can be used for DLLs with only few exported symbols. The easiest would be to create a module definition file from the the DLL and from that create a DLL with only function forwarders. This way your placed DLL would get loaded already and would simply pass through the calls.\n\nHowever, this approach will fail with exported variables (as opposed to functions).\n\nHere's a simple Python script based on pefile which I wrote for another answer over at StackOverflow:\n\n```\nimport os\nimport sys\nimport re\n\ndef main(pename):\n    from pefile import PE\n    print \"Parsing %s\" % pename\n    pe = PE(pename)\n    modname = os.path.basename(pename)\n    libname = re.sub(r\"(?i)^.*?([^\\\\/]+)\\.(?:dll|exe|sys|ocx)$\", r\"\\1.lib\", modname)\n    defname = libname.replace(\".lib\", \".def\")\n    print \"Writing module definition file %s for %s\" % (defname, modname)\n    f = open(defname, \"w\") # want it to throw, no sophisticated error handling here\n    f.write(\"LIBRARY %s  \n  \n\" % modname)\n    f.write(\"EXPORTS  \n\")\n    numexp = 0\n    for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:\n        if exp.name:\n            numexp += 1\n            f.write(\"\\t%s  \n\" % exp.name)\n    print \"Wrote %s with %d exports\" % (defname, numexp)\n    print \"  \n  \nUse this to create the export lib:  \n\\tlib /def:%s /out:%s\" % (defname, libname)\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        sys.stderr.write(\"ERROR:  \n\\tSyntax: fakelib <dllfile>  \n\")\n        sys.exit(1)\n    sys.exit(main(sys.argv[1]))\n\n```\nYou could adjust it to create function forwarders instead of a simple module definition with exported names.\n\nSo this way you can shuttle your code into the target application and go from there.\n\nInstrumentation and hooking have been mentioned already. Detours is an often mentioned example of hooking with an inconvenient EULA for most practical purposes. Refer to the existing answers for this kind of approach.\n\nYou can also use the AppInit_DLL registry value to inject a DLL early on. Or you could write a little launcher with a debugger loop and use Image File Execution Options to have your target launch your debugger first. A debugger can also influence the DLL loading or simply intercept - conveniently - calls at the boundary between executable and DLLs.\n\nTrivia: this (Image File Execution Options) is how Process Explorer replaces Task Manager when you choose the option inside Process Explorer.\n\nYou'll notice how you can sort these approaches into the categories Ed McMan mentioned in his answer already. However, I'll leave that as an exercise to the reader :)\n\n",
      "votes": "6",
      "user": "Glorfindel",
      "time": "Jul 20, 2022 at 8:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I did this with Notepad.exe on Windows. I wanted to add one top-menu item to open calc.exe just for fun (I know your question is tagged Linux and gcc compiler, but the idea is probably the same).\n\nSo I used Resource Hacker tool to add Calc menu and opened notepad.exe on Immunity Debugger looking for some space in the code where I could put my WinExec shellcode. Initially I didn't change the executable, I had to look at the program in memory to find some space where I could paste my assembly instructions without crashing notepad.\n\nOnce I found enough space (changing original code by eliminating some not required assembly instructions or even optimizing them) I opened notepad.exe on XVI Hex Editor and searched for the opcodes that was running on Immunity. I mean, the debugger was running some opcodes right? I just searched for a sequence of opcodes to be sure I was at the right piece of the software that I wanted to change and pacthed it with my shellcode (now this is not assembly code but the \"compiled\" assembly - machine code)\n\nAgain: I know your question is tagged Linux and gcc compiler, but maybe someone could point out some tools in Linux to achieve the same I did on Windows. The idea is probably the same.\n\n",
      "votes": "3",
      "user": "jyz",
      "time": "Mar 23, 2013 at 15:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "\"ptrace()\" was casually mentioned by Giles.   But I think it deserved a whole section by itself.   \"ptrace()\" is a system call API provided by OS (Linux and all UNIX have it, and so do Windows) to exert debug control over another process.   When you used PTRACE_ATTACH (as part of ptrace()) to attach to another process, the kernel will pause the CPU running that process completely, allowing you to make changes to ANY part of the process: CPU, any registers, any part of that process memory etc.   That is how dynamic inline hooking work.    (ptrace() attach, modify binary in-memory, and then ptrace() unattached).   As far as I know, all dynamic modification of another process has to use ptrace() - as that is the only mechanism provided by kernel to guarantee integrity via system call at this point.\n\nBut recently similar API like utrace() is popping up, and so\ninline hooking is also theoretically possible:\n\nhttp://landley.net/kdocs/ols/2007/ols2007v1-pages-215-224.pdf\n\nFor kernel hooking, there are many methods:   syscall, interrupt, and inline hooking.   This is for interrupt hooking:\n\nhttp://mammon.github.io/Text/linux_hooker.txt\n\nWhen the CPU is in STOP mode, basically you can do anything you like to the CPU/memory space/register - just make sure you restore back to its original state before returning to the original address where it stopped.\n\nAnd if you use library inject technique, you can implement any functionalities - calling remote libraries, remote shell etc:\n\nhttps://attack.mitre.org/techniques/T1055/001/\n\nhttps://stackoverflow.com/questions/24355344/inject-shared-library-into-a-process\n\nhttps://backtrace.io/blog/backtrace/elf-shared-library-injection-forensics/\n\n",
      "votes": "2",
      "user": "Peter Teoh",
      "time": "Dec 12, 2020 at 6:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}