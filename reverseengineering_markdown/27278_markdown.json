{
  "title": "What kind of random algorithm is used in this game?",
  "link": "https://reverseengineering.stackexchange.com/questions/27278/what-kind-of-random-algorithm-is-used-in-this-game",
  "content": "I am playing a game for iOS that uses a deck of 48 cards and I would like to reverse engineer the kind of algorithm that is used to generate the random deck of cards such that I can predict which card will show up next. This is what I know about the game.\n\nIs there someone with experience in random number generators, especially ones commonly used for iOS apps coded in Unity, who has an idea of what kind of algorithm could be used to generate the decks? Could some sort of shuffle algorithm be used?\n\nEdit: I have attempted to shuffle an array using the .NET System.Random class according to this answer where the random object was initiated using a seed of 0.\nhttps://stackoverflow.com/a/108836\n\nBut the problem is that the array is shuffled pseudo-randomly, unlike the game where the ”array” is ordered. That is why I think that a type of ”Random.next()” call doesn’t seem to be used. Could there be some multiplication involved? It would explain why a zero seed leaves the deck unchanged.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "112",
  "tags": [
    "ios"
  ],
  "user": "Mechakhan",
  "time": "Mar 20, 2021 at 12:52",
  "comments": [
    {
      "user": "Paul Uszak",
      "text": "stackoverflow.com/q/4989689",
      "time": null
    },
    {
      "user": "Paul Uszak",
      "text": "docs.microsoft.com/en-us/dotnet/api/system.random?view=net-5.0",
      "time": null
    },
    {
      "user": "Mechakhan",
      "text": "Thank you for taking the time to respond. I forgot to mention that I did some experimentation in C#. I updated my question with what I tried.",
      "time": null
    },
    {
      "user": "morsisko",
      "text": "If you have iOS device you could dump the assembly code of the binary, or in case of Unity maybe even the raw C# and then reverse the algorithm without guessing",
      "time": null
    },
    {
      "user": "pythonpython",
      "text": "Why? It sounds like you're trying to manipulate the score of the game. Use a proxy to ensure the api always returns a known seed.0,0,0,0 for example. You will then know the order of the cards and can play appropriately.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "So I finally got around to dig through the Android version of the game's APK file, and while I have not managed to obtain the game assembly code due to the crazy amounts of obfuscation in libil2cpp.so, global-metadata.dat is not obfuscated at all. After looking through it, I can now pretty confidently say that the random algorithm used is Xorshift since I found the string new_Xorshift close to a bunch of other strings related to the minigame. It probably uses 128-bits since there are four 32-bit seeds.\n\nFrom here on I can either try to deobfuscate the assembly code or try to brute force how exactly Xorshift is used to \"shuffle\" the deck, but either way, I think this answers my question.\n\n",
      "votes": "0",
      "user": "Mechakhan",
      "time": "May 9, 2022 at 14:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}