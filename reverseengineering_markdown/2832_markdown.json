{
  "title": "Reversing a Mac OS X binary that appears to be non encrypted, backtrace just shows mach_msg_trap ()",
  "link": "https://reverseengineering.stackexchange.com/questions/2832/reversing-a-mac-os-x-binary-that-appears-to-be-non-encrypted-backtrace-just-sho",
  "content": "Currently I have a binary that I am investigating.  The application is GUI / event driven, so that makes it difficult to set a break point.  I would like to set a break point on a certain button click, so I thought I would click the button, and then run a backtrace in GDB to see what functions were called when I clicked the button, but the output of the bt is just showing mach_msg_trap(), and a few other \"functions\" I suppose.  Does anyone know why I'm in the mach_msg_trap()  I am assuming it's some security feature implemented by Apple to prevent people from reversing their software, I just thought I would ask, as my googlefu didn't really return any tangible results.\n\n\n\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "gdb",
    "osx",
    "mach-o"
  ],
  "user": "ipatch",
  "time": "Sep 25, 2013 at 10:25",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "If you do a backtrace at any arbitrary point in time, you'll just see the message pump. In order for a backtrace to be useful, you would need to do a backtrace while the program is handling your button click in the active thread (in other words, set a breakpoint in the button click handling code).",
      "time": null
    },
    {
      "user": "Till",
      "text": "What @JasonGeffner is entirely correct. Just as an addendum; mach_msg_trap is not a security feature, it is the message dispatcher. It receives messages and attempts to forward them to objects that registered for handling them.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Google site:developer.apple.com mach_msg_trap :) ... it's just a signal handler.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Well, my Mac fu isn't too strong, but I have terminal access to a Mac and will give it a wild shot, hoping to provide you with the insight required to proceed.\n\ninfo sharedlibrary on the GDB prompt will tell you details about the ranges of the shared libraries inside of which those functions reside. But we know that already from the function names.\n\nNSApplication comes from: Cocoa.\n\nSo my suggestion would be to start by starting the application\n\n```\ngdb --args /path/to/binary optional arguments for program\n\n```\nand then set a breakpoint:\n\n```\nb NSApplicationMain\n\n```\n(can be done inside .gdbinit obviously)\n\nThen let the application continue. Break into it using Ctrl+C. Most likely the backtrace will be similar to what you saw before, but probably not up to mach_msg_trap().\n\nThen you go to one frame that uses a function which has a reference to the NSApplication instance. You can find the frame numbers with bt, obviously. So say:\n\n```\nf 9\n\n```\nthere you should be able to use GDB's call. Now, my Objective-C/C++ fu is even weaker than my Mac fu, but you can use\n\n```\nset language\n\n```\nto list the available languages (which influences the syntax for call). So you should probably switch to one of the Objective-C/C++ alternatives as appropriate. On my Mac I have the following language options:\n\n```\n(gdb) set language\nThe currently understood settings are:\n\nlocal or auto    Automatic setting based on source file\nada              Use the Ada language\nc                Use the C language\nc++              Use the C++ language\nasm              Use the Asm language\nminimal          Use the Minimal language\nfortran          Use the Fortran language\nobjective-c      Use the Objective-c language\nobjective-c++    Use the Objective-c++ language\njava             Use the Java language\nmodula-2         Use the Modula-2 language\npascal           Use the Pascal language\nscheme           Use the Scheme language\n\n```\ncall lets you call functions inside the context of the running program (and GDB has command line completion for symbols it knows of). So calling mainWindow of the NSApplication instance would appear as a good idea and then drilling down from there.\n\nFrom there you should be able to figure out where your button comes into play and set the breakpoint, no?\n\nBasically if you know a certain parameter of a certain call in the framework references your button (we'll assume it has a pointer somehow) you can use the\n\n```\nbreak location if condition\n\n```\nsyntax to make sure the breakpoint will only trigger for the button press. An alternative is the ignore command which will ignore X hits of a breakpoint and only trigger after that.\n\n",
      "votes": "6",
      "user": "0xC0000022L",
      "time": "Sep 25, 2013 at 11:32",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Do you have md5 for the application?\n\nIt seems like a GUI/Cocoa application. The code seems to be stuck in msgloop.\nThis loop generally occurs in applications, which require user interaction or when application is interacting with messages.\n\nThe image shows the breakpoint has been hit inside __CFRunLoopRun. It means app was running and processing system messages until it met a breakpoint (which is Command+C, in this case) it need some kind of user interaction or is waiting for some message, may be a click or key press or message from some system process.\n\nIf you have the sample md5 or SHA, I can have a look at it\n\n",
      "votes": "0",
      "user": "perror",
      "time": "Aug 25, 2014 at 12:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}