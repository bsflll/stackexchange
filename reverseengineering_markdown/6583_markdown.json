{
  "title": "Dictionary attack implementation [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/6583/dictionary-attack-implementation",
  "content": "I've found a function which takes as input an ASCII type string and return a value (as string). Doing some strings on the DLL I was able to find a couple of keys, however I would like to discover other possibilities.\n\nThe function is:\n\n```\nlong    GetValue(LPCSTR in_key, LPSTR out_value, long in_buflen);\n\n```\nto test the key is valid:\n\n```\nchar buf[512];\nlong ret;\nconst char ref[] = \"ABC\";\nret = GetValue(ref, b, 512);\nif( ret )\n  {\n  printf( \"Ok: [%s -> %s]  \n\", ref, b );\n  }\n\n```\nDoing exhaustive search is too slow. What tools can I use (I am on linux+wine) to setup a dictionary based attack on this function ?\n\nSo far all keys I've found are upper Camel Case (no space).\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "174",
  "tags": [
    "c"
  ],
  "user": "tibar",
  "time": "10 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "Dictionary attacks are not good for this. It is not uncommon for the key to be generated during execution, preventing you from finding the correct key (as it is not written in the binary).\n\nI think that the best way to do that is follow the binary's execution stepping over at first sight (to get a better idea of that piece of code) and only then go stepping into the calls.\n\nIf you're lucky (and the developer was lazy), you will find a point where the key is strcmp'ed (or something like that) with the input string, relieving you from the task of digging deep into the key generation algorithm.\n\n",
      "votes": "2",
      "user": "DarkLighting",
      "time": "Nov 4, 2014 at 17:14",
      "is_accepted": false,
      "comments": []
    }
  ]
}