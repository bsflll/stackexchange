{
  "title": "PE: Strange entry in debug directory (Type: 0xc)",
  "link": "https://reverseengineering.stackexchange.com/questions/17427/pe-strange-entry-in-debug-directory-type-0xc",
  "content": "Microsoft describes the IMAGE_DEBUG_DIRECTORY structure here.\n\nI learned here that for recent VisualStudio-compiled binaries, the type is IMAGE_DEBUG_TYPE_CODEVIEW, i.e. the value is 0x2.\n\nNow I have a vanilla VS-2015 compiled binary and I am using the Python module pefile to iterate over the IMAGAE_DEBUG_DIRECTORY objects:\n\n```\nfor debug_data_object in pe.DIRECTORY_ENTRY_DEBUG:\n    ...\n\n```\nThe first entry is as expected:\n\n```\n0x6500     0x0   Characteristics:               0x0       \n0x6504     0x4   TimeDateStamp:                 0x59088504 [Tue May 02 13:09:24 2017 UTC]\n0x6508     0x8   MajorVersion:                  0x0       \n0x650A     0xA   MinorVersion:                  0x0       \n0x650C     0xC   Type:                          0x2       \n0x6510     0x10  SizeOfData:                    0x88      \n0x6514     0x14  AddressOfRawData:              0x176DC   \n0x6518     0x18  PointerToRawData:              0x66DC\n\n```\nBut there is a second one. Its type is 0xC :\n\n```\n0x651C     0x0   Characteristics:               0x0       \n0x6520     0x4   TimeDateStamp:                 0x59088504 [Tue May 02 13:09:24 2017 UTC]\n0x6524     0x8   MajorVersion:                  0x0       \n0x6526     0xA   MinorVersion:                  0x0       \n0x6528     0xC   Type:                          0xC       \n0x652C     0x10  SizeOfData:                    0x14      \n0x6530     0x14  AddressOfRawData:              0x17764   \n0x6534     0x18  PointerToRawData:              0x6764 \n\n```\nWhat is this second entry about? Why is it there? What does type 0xc correspond to?\n\n\n\nUPDATE\n\nIn addition to the answer below, this SO post contains additional detailed info.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "1k",
  "tags": [
    "pe",
    "binary-format",
    "debugging-symbols"
  ],
  "user": "langlauf.io",
  "time": "Feb 10, 2018 at 17:30",
  "comments": [],
  "answers_data": [
    {
      "content": "If you check winnt.h from the latest Windows 10 SDK you can find rest of the values there:\n\n```\n#define IMAGE_DEBUG_TYPE_UNKNOWN          0\n#define IMAGE_DEBUG_TYPE_COFF             1\n#define IMAGE_DEBUG_TYPE_CODEVIEW         2\n#define IMAGE_DEBUG_TYPE_FPO              3\n#define IMAGE_DEBUG_TYPE_MISC             4\n#define IMAGE_DEBUG_TYPE_EXCEPTION        5\n#define IMAGE_DEBUG_TYPE_FIXUP            6\n#define IMAGE_DEBUG_TYPE_OMAP_TO_SRC      7\n#define IMAGE_DEBUG_TYPE_OMAP_FROM_SRC    8\n#define IMAGE_DEBUG_TYPE_BORLAND          9\n#define IMAGE_DEBUG_TYPE_RESERVED10       10\n#define IMAGE_DEBUG_TYPE_CLSID            11\n#define IMAGE_DEBUG_TYPE_VC_FEATURE       12\n#define IMAGE_DEBUG_TYPE_POGO             13\n#define IMAGE_DEBUG_TYPE_ILTCG            14\n#define IMAGE_DEBUG_TYPE_MPX              15\n#define IMAGE_DEBUG_TYPE_REPRO            16\n\n```\nSo 0xC is IMAGE_DEBUG_TYPE_VC_FEATURE. It looks like there's not much info on what it is stored there but you can do some searches to get some idea.\n\n",
      "votes": "3",
      "user": "Paweł Łukasik",
      "time": "Feb 10, 2018 at 16:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "langlauf.io",
          "text": "Not much info about IMAGE_DEBUG_TYPE_VC_FEATURE, indeed. I will post a new question at stackoverflow, maybe somebody knows more about IMAGE_DEBUG_TYPE_VC_FEATURE.",
          "time": null
        }
      ]
    }
  ]
}