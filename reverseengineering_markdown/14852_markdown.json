{
  "title": "PE file format: How can I find the heap memory space in a running WinNT program?",
  "link": "https://reverseengineering.stackexchange.com/questions/14852/pe-file-format-how-can-i-find-the-heap-memory-space-in-a-running-winnt-program",
  "content": "I've been researching the Portable Executable format and one great work I've been reading is \"ARTeam PE file format Tutorial\" which is a collection of research from Michael J'OLeary, Randy Kath, Matt Pietrek, and many more.\n\nHowever, one thing that I've noticed is absent is how and where the heap gets allocated for a program. Is it in one of the 9 standard sections such as .bss or .data or is it attached to the end of all sections at run-time by the loader?\n\nI assume, since it's the heap which is dynamic memory, that it is not specified anywhere in the actual PE, but if I want to scan the heap for data, how would I get the memory address space?\n\nSpecifically, I would like answers to the following questions:\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "memory",
    "pe",
    "heap"
  ],
  "user": "the_endian",
  "time": "Mar 8, 2017 at 12:59",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "the heap size is defined by fields in the PE header, but the placement in memory is assigned randomly by the OS.  You can query the heap start by calling the GetProcessHeap() function, or by reading the PEB directly.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Short answer: The heap, stack and other PE loader related tasks are not part of the PE standard or definition.\n\nGeneral Information\n\nthe PE file does not describe the entire memory space of an executable. It only contains the data required to execute a program, and the OS keeps the right to add additional regions without the user's awareness. Things such as the heap, the stack and other internal memory regions required for a process to function and operate are not the responsibility of a PE file (or any executable file for that matter).\n\nA PE doesn't define a heap, it requests a heap to be allocated for it from the OS (AllocateHeap is a Windows API that does that). There's no need to actually eat up space for a heap \"placeholder\" in the PE file. The same goes for the stack, the PEB, and other memory objects a process has.\n\nAdditionally, a user(i.e. programmer) does not usually need to even call AllocateHeap for it's process to have a heap. OSes usually allocate a default heap for the process when loading it (either by the loader itself or by startup code the OS runs before control is given to the PE's Entry Point). Other times the compiler prefixes the code with code that allocates a heap.\n\nSimilarly, the stack is allocated as part of the process creation, and is not part of the PE or defined by it. This is mandatory, for a process cannot exist without a stack (although the PE can set the size of the allocated stack).\n\nIf you're interested in learning about the NT Loader (and the PE file format), I suggest you take a look at the following articles and resources:\n\nYou might have already read some of the, but I included most of them for future reference.\n\nA lot of information about the heap and other types of memory are part of the (relatively big) topic of Memory Management in windows and you may want to also dive into that, here are are few articles about the heap and memory management:\n\nTechnical questions\n\nHeaps are memory pages reserved and committed upon creation (of the heap). The OS assigns designated pages and those are on the actual RAM and/or Page File.\n\nAs I mentioned before, a process can have multiple heaps (but always has at least one, default, heap). Additional heaps are allocated and freed by the process at run-time, and a process can have a different amount of heaps depending to run-time logic.\n\nSee above for a short description of how the default heap (or, more precisely the first heap, as a process may change it's default heap to a heap later allocated) is created.\n\nThis slightly depends on the purpose and specific reasons and type of data you want to scan for. If you want to scan for data anywhere in the process's memory, you should use VirtualQuery or VirtualQueryEx for all committed memory pages. This won't only let you scan all available heaps, but will also let you scan the stack, the PE sections, and other memory used by the program (for example, pages allocated directly with VirtualAlloc).\n\nIf you want to get the address range of a specific (or several heaps), you'll need to use some Heap memory functions, msdn such as GetProcessHeap GetProcessHeaps\n\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Mar 8, 2017 at 11:53",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "what?  SizeOfStackReserve, SizeOfStackCommit, SizeOfHeapReserve, SizeOfHeapCommit are fields in the PE header and they are most definitely used for exactly that purpose.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "I'm not sure what you think I wrote contradicts your statement. I even mentioned stack size is set by the PE (\"although the PE can set the size of the allocated stack\")",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "Your short answer says that neither stack nor heap are part of the standard.  That is highly misleading, and your longer description does not help much to clarify.  The sizes are defined explicitly by the PE file. Only the location in memory is up to the OS.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "OP's original question was \"where in the PE file are the stack and heap\", so  I think I did a decent job clarifying the stack and heap are not in the PE, and that the OS allocates those (based on a PE provided sizes, yes, as both you and I mentioned).",
          "time": null
        }
      ]
    }
  ]
}