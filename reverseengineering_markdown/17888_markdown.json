{
  "title": "How to obtain memory address of string literal?",
  "link": "https://reverseengineering.stackexchange.com/questions/17888/how-to-obtain-memory-address-of-string-literal",
  "content": "I am trying to find where a specific string literal is used in a compiled program. I have already found the location of this string literal within the executable; I want to somehow deduce what the memory address of this string will be at runtime, so I can search the binary file for this address to find the instruction that references the string. How should I proceed?\n\nI am using a Windows x64 AMD architecture. The executable in question is also 64-bit.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "1k",
  "tags": [
    "windows",
    "binary-analysis",
    "amd64"
  ],
  "user": "Anonymous1847",
  "time": "Apr 5, 2018 at 21:43",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "You may try this Strings tool from sysinternals: docs.microsoft.com/en-us/sysinternals/downloads/strings",
      "time": null
    },
    {
      "user": "Anonymous1847",
      "text": "Thanks, but I have already found the location of the string within the executable file; I'm asking for a way to find the runtime memory address, since I think that is different from the byte offset in the actual file.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can use the OllyDbg software (http://www.ollydbg.de/). This software is for debug and dissasembler binary programs.\n\nOne of feature is search all referenced string, you can see this image:\n\n\n\nSo, in the next window, you can see all strings with an address. Like this:\n\n\n\n",
      "votes": "1",
      "user": "incode",
      "time": "Apr 4, 2018 at 23:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "Anonymous1847",
          "text": "Apparently this only works with 32-bit executables, while the executable in question is 64-bit. (I tried loading it, it didn't work.) Probably should edit my question to clarify that. Is there an equivalent piece of software that works for 64-bit executables?",
          "time": null
        },
        {
          "user": "LUser",
          "text": "There is x64dbg thwt works on windowsx64. Olydbg does have a x64 version , but Oleh isn't really active in it's development , so It's sort of in a dead state.",
          "time": null
        }
      ]
    },
    {
      "content": "Search for all string references and you should be able to find your string and go to the instruction referencing it from there.\n\n",
      "votes": "0",
      "user": "sebastien finor",
      "time": "Apr 4, 2018 at 12:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "Anonymous1847",
          "text": "....but how exactly do I search for all string references? Do I need to install some specific software?",
          "time": null
        },
        {
          "user": "sebastien finor",
          "text": "Yes, ollydbg, like incode said can do the job. You have a lot of disassemblers, the best is probably IDA (free and premium version).",
          "time": null
        }
      ]
    }
  ]
}