{
  "title": "Understanding ARM64 Obj-C Prolog",
  "link": "https://reverseengineering.stackexchange.com/questions/16393/understanding-arm64-obj-c-prolog",
  "content": "I'm trying to understand the differences between the following function prologs of a number of obj-c function decompilations.\n\nI know they store variables for the caller to use when the function returns. But why the differences?\n\nSample 1\n\n```\nvoid * -[Issue ideal](void * self, void * _cmd)\nsub        sp, sp, #0x40\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\nadd        x29, sp, #0x30\nmov        x19, x0\n\n```\nSample 2\n\n```\nvoid * -[Issue path](void * self, void * _cmd)\nstp        x26, x25, [sp, #-0x50]!\nstp        x24, x23, [sp, #0x10]\nstp        x22, x21, [sp, #0x20]\nstp        x20, x19, [sp, #0x30]\nstp        x29, x30, [sp, #0x40]\nadd        x29, sp, #0x40\nmov        x19, x0\n\n```\nSample 3\n\n```\nvoid -[ContentView showPageThumb:page:data:guid:](void * self, void * _cmd, void * arg2, long long arg3, void * arg4, void * arg5)\nstp        x24, x23, [sp, #-0x40]!\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\nadd        x29, sp, #0x30\nmov        x20, x5\nmov        x21, x4\nmov        x22, x3\nmov        x19, x0\nmov        x0, x2\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "649",
  "tags": [
    "disassembly",
    "assembly",
    "arm"
  ],
  "user": "d123",
  "time": "Sep 24, 2017 at 18:02",
  "comments": [],
  "answers_data": [
    {
      "content": "I haven't touched this stuff for a while, but I'd say compiler is simply saving opcodes or following a complicated template, perhaps to do with optimisation. Notice that\n\n```\nstp        x24, x23, [sp, #-0x40]!\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\n\n```\ndoes the same job as \n\n```\nsub        sp, sp, #0x40\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\n\n```\nplus stores one additional register x24 . This because the first example uses writeback addressing in [sp, #-0x40]!\n\nhttp://www.davespace.co.uk/arm/introduction-to-arm/addressing.html (a random google result on addressing modes in ARM). \n\nSame with your second example - it still allocates x50 bytes on the stack. The difference is rather superficial, they all do the same job. add,movs are not part of prologue IIRC.\n\n",
      "votes": "1",
      "user": "Vitaly Osipov",
      "time": "Sep 24, 2017 at 11:04",
      "is_accepted": true,
      "comments": []
    }
  ]
}