{
  "title": "Is there a way to find the implementation of methods with MethodImplOptions.InternalCall attribute?",
  "link": "https://reverseengineering.stackexchange.com/questions/29393/is-there-a-way-to-find-the-implementation-of-methods-with-methodimploptions-inte",
  "content": "Background:\nThe Unity engine provides a number of PlayerPrefs.SetXxx functions that can be used to save user data. However, it will automatically append a hash to the name of what you saved. For example, a call of\nPlayerPrefs.SetString(\"justTesting\", \"TEST!\"); \nwill add a registry value of\njustTesting_h3837386411\non Windows platform.\nProblem:\nI know it's actually djb2-xor, but I am still curious about how the hash function is implemented. By using dnSpy I found PlayerPrefs.SetString, which is implemented in UnityEngine.CoreModule.dll, finally calls a native method declared as\n\n```\n[NativeMethod(\"SetString\")]\n[MethodImpl(MethodImplOptions.InternalCall)]\nprivate static extern bool TrySetSetString(string key, string value);\n\n```\nAnd I'm stuck here. There's indeed a string UnityEngine.PlayerPrefs::TrySetSetString in .rdata section of UnityPlayer.dll, but I don't know where to find the actual code for it. What should I do next?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "decompilation",
    "c#",
    "game-hacking"
  ],
  "user": "user239216",
  "time": "Oct 11, 2021 at 3:12",
  "comments": [],
  "answers_data": [
    {
      "content": "OK after some bold attempts I finally found it quite simple, at least on this Unity version.\nFirst, find the method name string and where it's referenced:\n\n\nIt is referenced at 11376594. But what's at this address? Here we go:\n\n\nIt's a string table. The next thing to do is to find out the table's start address, and then what references to this address. This guided me here:\n\nAnd here:\n\nThis is a loop, which binds each function name to items in another table at 11371C40. This new table is a function table so I renamed it:\n\nNow it's reasonable to suspect this function table contains how each native method is implemented. By adding the string offset to the function table address, I got the bool TrySetSetString(string key, string value) address. Diving deeper and here is the hash algorithm:\n\n\n",
      "votes": "0",
      "user": "user239216",
      "time": "Oct 13, 2021 at 7:52",
      "is_accepted": true,
      "comments": []
    }
  ]
}