{
  "title": "Help Tracking Win Messages",
  "link": "https://reverseengineering.stackexchange.com/questions/8071/help-tracking-win-messages",
  "content": "I'm new to reverse engineering, have been using olly and x64_dbg. I've ,to a degree, successfully reverse engineered and understood functions and parts of code of a couple applications. I cannot READ Asm or spot data structures quite yet. I recently tried peeking at a disassembled code of a new PE and it's obfuscated. So it's far over my head at this point but I continued to dig in. I came across a popup dialog created/initiated by the User32.CreateWindowExA  function. Due to anti debugging code I cannot place any breakpoints in the actual executable.... well certain memory locations of the exe and dlls can have breakpoints. Anyway I narrowed things down to a DispatchMessageA function being called then the CreateWindowExA function. I can't find out what happens between the two or find the GetMessage funct. I believe I know the message being sent but my question is, how do I find the receiving message function for the appropriate message sent out. Let's say 3 different messages can be sent out how do I find out who collects them?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "352",
  "tags": [
    "disassembly"
  ],
  "user": "TurtleMan",
  "time": "Jan 21, 2015 at 4:56",
  "comments": [],
  "answers_data": [
    {
      "content": "As it stands the query is too broad \n\nto capture all the messages that are sent Via GetMessageX to a certain process A conditional log  breakpoint similar to this can be employed\n\nOS xpsp3 using windbg and Ken Johnsons sdbgext windbg extension\n\nDemo Result  \n\nfinding index of GetMessage\n\n```\n0:000> uf USER32!NtUserGetMessage\nUSER32!NtUserGetMessage:\n7e4191b2 b8a5110000      mov     eax,11A5h\n7e4191b7 ba0003fe7f      mov     edx,offset SharedUserData!SystemCallStub (7ffe0300)\n7e4191bc ff12            call    dword ptr [edx]\n7e4191be c21000          ret     10h\n\n```\nto know how many step over is required \n\n```\n0:000> uf ntdll!KiFastSystemCall\nntdll!KiFastSystemCall:\n7c90e510 8bd4            mov     edx,esp\n7c90e512 0f34            sysenter\n7c90e514 c3              ret\n\n```\nsetting a conditional log breakpoint using index and number of step overs \n\n```\n0:000> bp ntdll!KiFastSystemCall \".if(@eax == 11a5) {r $t0 = poi(@esp+8);p 2 \\\"!usermsg @$t0;g\\\";} .else {gc}\"\n\n```\nconfirming the breakpoint\n\n```\n0:000> .bpcmds\nbp0 0x7c90e510  \".if(@eax == 11a5) {r $t0 = poi(@esp+8);p 2 \\\"!usermsg @$t0;g\\\";} .else {gc}\";\n\n```\nexecuting \n\n```\n0:000> g\n\n```\n**log the voluminous spew to be  parsed later **\n\n```\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    000a01d6\nName      C\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        00000088\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd026\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    00080186\nName      /\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        0000005a\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd14f\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\nhwnd:\nWindow    000a0160\nName      *\nClass     Button\nWndProc   00000000\nStyle     WS_OVERLAPPED \nExStyle   WS_EX_NOPARENTNOTIFY WS_EX_LEFT WS_EX_LTRREADING WS_EX_RIGHTSCROLLBAR \nHInstance 01000000\nParentWnd 001200e0\nId        0000005b\nUserData  00000000\nUnicode   TRUE\nThreadId  00000be8\nProcessId 00000be0\nMessage: WM_PAINT\nwParam: 0\nlParam: 0\nTime: 5bd249\npt: (1021, 413)\neax=000011a5 ebx=00000000 ecx=00000000 edx=0007fde0 esi=0007fee8 edi=01014018\neip=7c90e512 esp=0007fde0 ebp=0007fdfc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCall+0x2:\n7c90e512 0f34            sysenter\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jan 21, 2015 at 7:45",
      "is_accepted": false,
      "comments": [
        {
          "user": "TurtleMan",
          "text": "Wow thanks. It appears I have a lot to learn but not being able to see how deep the rabbit hole gets only makes me more excited. X64_dbg does not have conditional breakpoints yet. Their hardware breakpoints don't reliably work yet. It's a great program I look forward to its future but I'll give windgb a look at and hopefully things go well. Thanks for the advice. I plan to start reading.       practical reverse engineering.      this weekend. Hopefully that'll help with the obfuscation.",
          "time": null
        },
        {
          "user": "perror",
          "text": "@TurtleMan: Please, don't forget to tick the answer as correct ! And possibly vote for it if you think it deserve it. The principle of Stack-Exchange websites is based on the hypothesis that every should follow these simples rules. If nobody do it, it won't be possible to distinguish good answers from gibberish.",
          "time": null
        }
      ]
    }
  ]
}