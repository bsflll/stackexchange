{
  "title": "What does the `TEST` instruction do",
  "link": "https://reverseengineering.stackexchange.com/questions/15184/what-does-the-test-instruction-do",
  "content": "I'm having trouble understanding the TEST instruction and its use. I'm looking at the following code at the end of a loop\n\n```\n0040A3D1   A9 00010181           TEST EAX,81010100\n0040A3D6   74 E8                 JE SHORT JinKu_ke.0040A3C0\n\n```\nI understand how it works TEST AL,AL or TEXT EAX,EAX,but I do not know how it works with numbers Because the JE instruction does not jump when I use 0x810100FE and also even when we use 0x81010102, but when I use 0x60E0FEFC and below JE instruction jump. \n\n",
  "votes": "14",
  "answers": 1,
  "views": "60k",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "Marek",
  "time": "Apr 18, 2017 at 21:12",
  "comments": [],
  "answers_data": [
    {
      "content": "According to the x86 Instruction Set Reference entry for TEST found at http://x86.renejeschke.de/,\n\n\n\nMore succinctly:\n\nEven more succinctly:\n\nSo for\n\nthe value in EAX and 81010100 are ANDed together.\n\nIf the value in EAX is 0x810100FE, the operation looks like this:\n\n```\nEAX:                    10000001000000010000000011111110\n0x81010100:         AND 10000001000000010000000100000000\n                    ------------------------------------\n0x81010000:             10000001000000010000000000000000\n\n```\nThe result, 81010000, is not 0, so the zero flag is not set.\n\nIf the value in EAX is 0x60E0FEFC the operation looks like this:\n\n```\nEAX:                    01100000111000001111111011111100\n0x81010100:         AND 10000001000000010000000100000000\n                    ------------------------------------\n                        00000000000000000000000000000000\n\n```\nHere the result is 0, so the zero flag (ZF) is set to 1.\n\nAccording to the  x86 Instruction Set Reference entry for JE found at http://x86.renejeschke.de/,\n\n\n\nIn the case of 'JE' specifically,\n\nFor the operation\n\n",
      "votes": "22",
      "user": "julian",
      "time": "Aug 16, 2024 at 16:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "user47208",
          "text": "EIP?? Now there's one register that I have never heard of. Nor is it anything that can \"jump\", as far as I know.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@user47208 Thanks for the comment, I've edited the post. EIP does not jump, as you've pointed out. For more on EIP and JMP, feel free to take a look at felixcloutier.com/x86/jmp, or use your search engine of choice.",
          "time": null
        }
      ]
    }
  ]
}