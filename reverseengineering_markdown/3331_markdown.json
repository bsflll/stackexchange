{
  "title": "IDA PRO Structures Defining negative offset -4 -8 offset repair asm Hex-Rays",
  "link": "https://reverseengineering.stackexchange.com/questions/3331/ida-pro-structures-defining-negative-offset-4-8-offset-repair-asm-hex-rays",
  "content": "How do I fix structures in IDA PRO so they show up properly in Hex-Rays plugin (C decompiler).\n\nSimilar question to: (But the solution doesn't work for me) Struct with negative offset in IDA possible\n\nPretty much what happened is I compiled a very good program and it works right, after that I did many changes to it and now it works worse then the older version, I'm trying to figure out what I did wrong (since I lost the source code now) to revert back to the old version. (I also added below the original piece of the code written in C++, which didn't change between both versions).\n\nStructure's addresses somehow optimized in IDA PRO\nSuch as that\n\n```\n*(_BYTE *)(shipsStruct + 279) = 1; //Ships[i].used = true;\n\n```\nshould really be [10x4]=40+255= 295\n\n```\n*(_BYTE *)(shipsStruct + 295) = 1;  //Ships[i].used = true;\n\n```\nYou can tell the structure size right here (shipsStruct += 296;)\n\nI'm guessing somehow the un-used structure members are stripped out (but why is the structure size valid?).\nSeems the assembly somehow is offset wrongly (how do I add the proper offset deltas to the struct to fix this)?\n\nWhen I try this tip http://www.hexblog.com/?p=63 \nMy whole IDA PRO freezes up when I select the line mov edi, offset dword_10004C38 and press T (IDA PRO 6.1)\n\n\n\nSeems I made my struct incorrectly?\n\nHere is how the code decompiled code looks like (without applying structure)\n\n```\n  if ( playerListBaseAddress && !IsBadReadPtr(playerListBaseAddress, 4u) )\n  {\n    shipsStruct = (int)dword_10004C38;\n    while ( 1 )\n    {\n      playerPointer = (struct_v3 *)*((_DWORD *)playerListBaseAddress + maxPlayers);\n      if ( !playerPointer )\n        break;\n      if ( IsBadReadPtr(playerPointer, 4u) )\n        break;\n      *(_DWORD *)(shipsStruct - 4) = playerPointer->ssXCoord;\n      *(_DWORD *)shipsStruct = playerPointer->ssYCoord;\n      *(_DWORD *)(shipsStruct + 4) = playerPointer->ssXSpeed;\n      *(_DWORD *)(shipsStruct + 8) = playerPointer->ssYSpeed;\n      *(_DWORD *)(shipsStruct - 8) = playerPointer->ssFreq;\n      *(_DWORD *)(shipsStruct + 20) = playerPointer->ssShipNum;\n      if ( playerPointer->ssPlayerName )\n        strcpy_s((char *)(shipsStruct + 24), 0xFFu, &playerPointer->ssPlayerName);\n      *(_BYTE *)(shipsStruct + 279) = 1;\n      if ( v37 == playerPointer )\n        break;\n      shipsStruct += 296;\n      ++maxPlayers;\n      v37 = playerPointer;\n      if ( shipsStruct >= (signed int)&unk_10017310 )\n        goto finish;\n    }\n    v34 = maxPlayers;\n    if ( maxPlayers < 255 )\n    {\n      v4 = (int)((char *)&unk_10004D4F + 296 * maxPlayers);\n      do\n      {\n        *(_BYTE *)v4 = 0;\n        v4 += 296;\n      }\n      while ( v4 < (signed int)&unk_10017427 );\n    }\n\n```\nHere is the orginal code (not decompiled written in C++)\n\n```\ndouble currentTimer = GetTimer();\ndouble timeElapsed = currentTimer - lastTimer;\n\nint maxPlayers = 0;\nDWORD lastPlayerPtr = 0;\nif (playerListBaseAddress != NULL && !IsBadReadPtr((void *) playerListBaseAddress, sizeof(ULONG_PTR))) {\n    for (int i = 0; i < 255; i++) { //populate player ship list.\n    DWORD playerPtr = *(DWORD *) (playerListBaseAddress + (i * 4));\n\n    if (playerPtr != NULL && !IsBadReadPtr((void *) playerPtr, sizeof(ULONG_PTR))) {\n        Ships[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);\n        Ships[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);\n        Ships[i].XSpeed = *(signed long *) (playerPtr + 0x10);\n        Ships[i].YSpeed = *(signed long *) (playerPtr + 0x14);\n        Ships[i].Freq = *(DWORD *) (playerPtr + 0x58);\n        Ships[i].ShipNum = *(BYTE *) (playerPtr + 0x5C)\n        //memcpy(&(Ships[i].Name), (void*)((DWORD)playerPtr+0x6D), 19);\n        if (!*(BYTE *) (playerPtr + 0x6D) == NULL)\n        strcpy_s(Ships[i].Name, (char *) ((DWORD) playerPtr + 0x6D));\n        Ships[i].used = true;\n\n        if (lastPlayerPtr == playerPtr)\n        goto finishList;\n        lastPlayerPtr = playerPtr;\n    } else {\n      finishList:\n        maxPlayers = i;\n        for (int j = i; j < 255; j++)\n        Ships[j].used = false;\n        break;\n    }\n}\n\n```\nHere is before and after (applying my custom struct)\nI did the custom struct by doing a bunch of Arrays (* key), then setting proper sizes. (Guessing this isn't the proper way to make a structure in IDA PRO?)\n\nBefore:\n\nAfter:\n\nASM:\n\nEdit Function\n\nDouble clicked local variable\n\n\n",
  "votes": "5",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida",
    "struct"
  ],
  "user": "SSpoke",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "From above...\n\nDecompiled:\n\n```\n*(_DWORD *)(shipsStruct - 4) = playerPointer->ssXCoord;\n*(_DWORD *)shipsStruct = playerPointer->ssYCoord;\n...\n\n```\nOriginal:\n\n```\nShips[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);\nShips[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);\n...\n\n```\nBased on these snippets, it looks like the structure in your stack variables is 8 bytes off. Can you share with us the stack variable list for that function? (Double-click on one of the local variables in the decompilation to open the stack view.)\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "Dec 31, 2013 at 2:39",
      "is_accepted": true,
      "comments": [
        {
          "user": "SSpoke",
          "text": "Talking about this? i.sstatic.net/2rANk.png here: i.sstatic.net/9vKkW.png",
          "time": null
        },
        {
          "user": "SSpoke",
          "text": "Should I risk deleting those db ? ;undefined above? and how did IDA analysis mess on this. Seems 12 bytes off (All functions decompile without errors btw)",
          "time": null
        },
        {
          "user": "SSpoke",
          "text": "Okay I changed from 0x68 to 0x5C now all undefined are gone begins from var_5C still generates same C code and everything seems the same, except for when clicking the stack variables no more undefined variables there.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Is shipsStruct a local variable or a global variable?",
          "time": null
        },
        {
          "user": "SSpoke",
          "text": "Well shipsStruct is declared locally from (int)dword_10004C38 which seems to be a global location in memory that location in memory I guess somehow should represent the offsetted structure. shipsStruct is the name I gave it it's really suppose to be casted to ShipStruct. Becomes like this when I convert it to struct* shipsStruct = (ShipStruct *)dword_10004C38;",
          "time": null
        }
      ]
    },
    {
      "content": "This feature is supported since Hex-Rays 1.6:\n\nhttp://www.hexblog.com/?p=544\n\n(see section 3. CONTAINING_RECORD macro)\n\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "Jan 3, 2014 at 13:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}