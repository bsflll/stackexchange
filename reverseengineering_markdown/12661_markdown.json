{
  "title": "Obtaining the Pseudocode of a function via a script",
  "link": "https://reverseengineering.stackexchange.com/questions/12661/obtaining-the-pseudocode-of-a-function-via-a-script",
  "content": "I am looking for a way to obtain the pseudocode of a function via a script. I am using IDAPro 6.9 on OS X 10.11.4 (El Capitan).\n\nI did locate this documentation on using the decompiler in batch mode:\n\nhttps://www.hex-rays.com/products/decompiler/manual/batch.shtml\n\nIf I am interpreting the documentation correctly, it would seem to indicate that I can execute:\n\nidal -Ohexx86:decompiled_output:function_name -A myidapro.idb\n\nand it will produce the pseudocode for function_name and write the result to decompiled_output. Is this correct?\n\nWhen I try this, it just launches the text interface and no output file is created. I can, of course, launch the GUI and view the pseudocode of function_name.\n\nAdditionally, if there is a way to obtain the pseudocode of a function via a python script running within idapro, that would be the preferred option, but it is unclear to me whether that is possible.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "decompilation",
    "ida-plugin",
    "script"
  ],
  "user": "ericg",
  "time": "May 16, 2016 at 18:14",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use the following function:\n\n```\ndef decompile_func(ea):\n  if not init_hexrays_plugin():\n    return False\n\n  f = get_func(ea)\n  if f is None:\n    return False\n\n  cfunc = decompile(f);\n  if cfunc is None:\n    # Failed to decompile\n    return False\n\n  lines = []\n  sv = cfunc.get_pseudocode();\n  for sline in sv:\n    line = tag_remove(sline.line);\n    lines.append(line)\n  return \"  \n\".join(lines)\n\nprint decompile_func(here())\n\n```\nThis is a modification of the example vds1.py script.\n\n",
      "votes": "3",
      "user": "joxeankoret",
      "time": "May 16, 2016 at 18:26",
      "is_accepted": true,
      "comments": []
    }
  ]
}