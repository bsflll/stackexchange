{
  "title": "Problem to understand execution of payload (shellcode)",
  "link": "https://reverseengineering.stackexchange.com/questions/11029/problem-to-understand-execution-of-payload-shellcode",
  "content": "I know that there are lot of (good) tutorials regarding this topic, but after reading them, I really cant follow their thoughts (e.g.: Smashing The Stack For Fun And Profit):\n\nGiven the following \"crackme\" (this example is used as demo, you can skip it and read the question below):\n\n```\n#include <stdio.h>\n#include <string.h>\n\nvoid funktion(char *args) {\n    char buffer[250];\n    strcpy(buff, args);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc > 1)\n        funktion(argv[1]);\n    else\n        printf(\"Kein Argument!  \n\");\n\n    return 0;\n}\n\n```\nTarget: I want to execute a very basic shellcode within that process.\n\nVulnerability: Classical potential Stack-Bufferoverflow, due to misuse of strcpy(...). \n\nRequired Information:\n\n```\n(gdb) info frame 0\nStack frame at 0xffffd300:\n eip = 0x8048449 in funktion (stack_bof2.c:7); saved eip = 0x8048474\n called by frame at 0xffffd330\n source language c.\n Arglist at 0xffffd2f8, args: args=0xffffd575 \"A\"\n Locals at 0xffffd2f8, Previous frame's sp is 0xffffd300\n Saved registers:\n  ebp at 0xffffd2f8, eip at 0xffffd2fc\n(gdb) print/x &buffer\n$1 = 0xffffd1f6\n\n```\nMethodical Approach:\n\nQuestion: I don't know why all sources state we don't know where in the memory space of the program we are trying to exploit the code. I mean, I know it. It's obviously the buffer, where the shellcode is placed in. So the RIP has to point to it. No JMP, CALL and relative addressing...\n\nDownloadlink of the crackme.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "639",
  "tags": [
    "c++",
    "c",
    "exploit",
    "gcc"
  ],
  "user": "JDoens",
  "time": "Oct 5, 2015 at 17:25",
  "comments": [],
  "answers_data": [
    {
      "content": "The reason that we don't know the address, is that with ASLR the program can be loaded at a different address each time the program is run.  Thus, if you reboot your os, the program may get loaded at a different Virtual Address.  \n\n",
      "votes": "-2",
      "user": "Milhous",
      "time": "Oct 5, 2015 at 18:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jason Geffner",
          "text": "No, that's not the reason in the 1996 article Smashing The Stack For Fun And Profit. The reason we don't know \"the exact address of where in memory we want to jump to\" is because the shellcode will be on the stack or heap, whose address is often not predictable.",
          "time": null
        },
        {
          "user": "JDoens",
          "text": "@JasonGeffner \"The shellcode will be on the stack or heap, whose address is often not predictable.\" What do you mean with this, why is it not predictable  (by disabled ASLR)? [In this ](reverseengineering.stackexchange.com/questions/11020/â€¦) former question, the exploit worked by overwriting the RIP, and in my book the RIPs address is used, too. So with disabled ASLR the stack should look exactly the same each time I execute the program, or?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "\"So with disabled ASLR the stack should look exactly the same each time I execute the program, or?\" - No, the stack's base may be located at a different address on each execution, even with ASLR disabled.",
          "time": null
        },
        {
          "user": "Milhous",
          "text": "If you read the article about ASLR, there are several bits of entropy.  This includes both the address of the stack AND the base address of the executable.  IF ASLR is enabled, then the OS will randomize both the stack and the base address.  Some OS's (Linux and Windows) re-use the same memory on subsequent runs of the program.  But from the outside you don't know what where the stack, the heap or the program is loaded at.",
          "time": null
        }
      ]
    }
  ]
}