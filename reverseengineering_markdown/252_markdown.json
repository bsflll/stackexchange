{
  "title": "How should I go about trying to figure out the programming language that was used?",
  "link": "https://reverseengineering.stackexchange.com/questions/252/how-should-i-go-about-trying-to-figure-out-the-programming-language-that-was-use",
  "content": "I have an executable file and I would like to figure out which programming language was the source code written in. The first step would be to use a disassembler. \n\nWhat should be done after that ?\n\nAlso, I read that determining which libraries are used during runtime would be a good indicator of the programming language being used. How should I determine which libraries are used ?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "352",
  "tags": [
    "linux",
    "executable"
  ],
  "user": "asheeshr",
  "time": "Mar 25, 2013 at 14:41",
  "comments": [
    {
      "user": "Remko",
      "text": "Possibly related: What hints in machine code can point me to the compiler which was used to generate it? and What is a FLIRT signature?",
      "time": null
    },
    {
      "user": "perror",
      "text": "What is the targeted OS ? Things might change drastically from one OS to another (and tools too).",
      "time": null
    },
    {
      "user": "asheeshr",
      "text": "@Emmanuel Ubuntu",
      "time": null
    },
    {
      "user": "Minh-Triet Pham Tran",
      "text": "You could use some other compiler identifier tools: Category:Compiler Identifiers - Collaborative RCE Tool Library woodmann.com/collaborative/tools/index.php/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Actually I would suggest that you view the executeable with a hex viewer/editor. That way you can see straight away if the compiler embedded any strings as hints. You should also consider that some languages use C as an intermediate language. An example of that would be f2c a Fortran 77 to C compliler. It appears that f2c also links a support library so you would look for that.\n\nAs far as determinining which libraries are used on linux you can use the ldd command for dynamic binaries and nm for static ones to dump the symbols. Also there is a related question on SO.\n\nHere is an intersting blog from a fellow RE member about how the binary you have might not even come from a compiler and how to recognise that. \n\n",
      "votes": "10",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "Good answer, you'd be surprised how often this low-tech approach works! That aside, even in the f2c case you can probably see spot patterns used by the converter to represent Fortran concepts or convert from Fortran to C conventions.",
          "time": null
        }
      ]
    },
    {
      "content": "There are several tools that I have used:\n\nIt's also worth mentioning that if you submit a file to Virus Total, they will run TRiD against your binary.\n\nThese tools are not always definitive, but they can generally give you the correct compiler (and therefore language) that was used.\n\n",
      "votes": "9",
      "user": "Mick",
      "time": "Mar 25, 2013 at 16:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}