{
  "title": "Figure out whether a function has return value of not?",
  "link": "https://reverseengineering.stackexchange.com/questions/12496/figure-out-whether-a-function-has-return-value-of-not",
  "content": "I am doing binary analysis on x86-64bit ELF binaries. All the binaries are compiled from C language. Basically, for a given function, I would like to figure out whether this function has a return value or not. That is, in its corresponding C code, whether a meaningful return exists. \n\nAs I am essentially facing the assembly code, it is not feasible to figure out through some type information. However, as for normal x86-64bit assembly program, the calling convention only allows register rax to hold the return value, so I am thinking to check the usage of rax after a typical function call and decide whether the target function returns a value.\n\nHere is an example in AT&T syntax:\n\n```\nfoo:\n   ...\n   call bar\n   mov 0, %rax  <--- bar should not have a return value\n\nbar:\n   ...\n\n```\nIn the above example, as rax is immediately reset, it is unlikely for function bar to return a value.\n\nAnother example:\n\n```\nfoo:\n   ...\n   call bar\n   jmp *%rax  <----- It is very likely that bar has a return value\n\n```\nFor the above case, I suppose without some aggressive inter-procedure optimization, we can say it for sure that bar returns a value (a pointer).\n\nI think this is yet another (ad-hoc) reverse engineering task, but I guess there may be a more \"formal\" way to solve it, any idea on that?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "560",
  "tags": [
    "binary-analysis",
    "static-analysis",
    "elf",
    "functions",
    "x86-64"
  ],
  "user": "lllllllllllll",
  "time": "Apr 21, 2016 at 15:34",
  "comments": [],
  "answers_data": [
    {
      "content": "I see several problems with that approach:\n\nIn the generic case, i think there's no foolproof way. For example, in a function ending in\n\n```\nfor (i=0; i<somevar; i++)\n    somearray[i]=0;\nreturn i;\n\n```\nthe compiler may just decide to use eax for the loop counter; which means there's no reason to do another mov after the loop. If the caller ignores the value of eax, you have no way to determine, from the assembly alone, if that return statement was present or not. (Of course, in this particular case, any self respecting compiler will generate a variant of rep stosw or sse instructions, but you get the point).\n\nSo when the caller does read eax, you can be quite certain that the function has a return value; but a caller that ignores eax basically means nothing. \n\nAnd even if the caller reads eax, you could construct pathological cases of a function written in assembler, that preserves eax, and a caller that knows about this and makes use of eax even over the function call. But you'll probably not encounter this in software that isn't deliberately obfuscated\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Apr 21, 2016 at 18:32",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Thank you Guntram. This is a fantastic answer. I learned a lot from it! I guess I will start from checking the usage of eax. Although when considering potential control flow transfer following the call instruction, tracing the usage of eax is by no means as easy as it looks...",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "As I want to implement it like a dataflow analysis task.",
          "time": null
        }
      ]
    },
    {
      "content": "The return value is defined by the calling convention used by your compiler, and it usually just means \"the value of eax/rax\". \n\nIn your first example, rax is not reset, it's just set to the value 0, hence the functions most likely ends with a return 0;.\n\nIn your second example, you should check what is the last write on rax in the bar function.\n\nYou could try to check whether the next operation on rax after your function is a write or a read, basically if it's a read the return value is used, if it's a write the return value is discarded.\n\n",
      "votes": "0",
      "user": "frogatto",
      "time": "Jun 14, 2016 at 17:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "Guntram Blohm",
          "text": "\"You could try to check whether the next operation on rax after your function is a write or a read\" - that's what he's doing. The first example has a write to rax after the call to bar, the second example reads rax.",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "@GuntramBlohm. Hi, thank you for your reply. Yes, that's basically what I am thinking to do right now ;)",
          "time": null
        }
      ]
    }
  ]
}