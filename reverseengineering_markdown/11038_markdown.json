{
  "title": "Return by Value/Call by Value internals",
  "link": "https://reverseengineering.stackexchange.com/questions/11038/return-by-value-call-by-value-internals",
  "content": "Good evening, fellow experts.\n\nI'm fiddling around with something and right now I'm stuck.\n\nI want to modify the behaviour of an application (Windows 7, 64bit).\nTherefore, I inject a DLL into the running process to spawn a new thread and then dynamically figure out the address of a certain function I intend to call.\n\nTo call it, I've got a function pointer typedef for comfort reasons. It looks like this:\n\n```\ntypedef ReturnType (*certain_function)(void* this);\n\n```\nReturnType is a class which I don't know.\nI need to pass the returned value of type ReturnType to another function. \n\n```\ntypedef void (*another_function) (ReturnType);\n\n```\nReturnType neither is a primitive type nor a pointer, it's a class I don't got the definition for.\n\nI don't need to work with the class, hence I dont really need to know what it looks like.\n\nMy question is:\nObviously, I've got to make my own defintion of ReturnType, like:\n\n```\nclass ReturnType {\n    public:\n        uint8_t padding[?];\n};\n\n```\nBut how precise does it have to be? Can I just use a insanely large value for ? that definitly would offer enough memory for the class object, or does the size have to be exact? How is Return-by-Value/Call-by-Value done on ASM level? Complete object on the stack?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "152",
  "tags": [
    "c++",
    "dll-injection"
  ],
  "user": "hidden_c0de",
  "time": "Oct 6, 2015 at 11:00",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "do you mean that you have to construct a ReturnType in your injected function?  In that case, you must fill it correctly, or call the original function to do it for you, and then just pass the returned pointer to another_function.",
      "time": null
    },
    {
      "user": "hidden_c0de",
      "text": "No, I dont have to construct it. I'm calling a function that returns the value. The problem is that it's a class object and I don't know how it looks like or how big it is.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "it doesn't matter how it looks or how big it is.  You are receiving a pointer to it, you just pass that pointer to the next function.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The caller passes a pointer on its own stack variable to be filled out.\nhttps://stackoverflow.com/questions/2155730/how-do-c-compilers-implement-functions-that-return-large-structures\n\n",
      "votes": "1",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}