{
  "title": "Difference between objdump -r and -R switches",
  "link": "https://reverseengineering.stackexchange.com/questions/14202/difference-between-objdump-r-and-r-switches",
  "content": "objdump man page says,\n\n```\n-r\n--reloc\n      Print the relocation entries of the file.  If used with -d or -D,\n      the relocations are printed interspersed with the disassembly.\n\n-R\n--dynamic-reloc\n      Print the dynamic relocation entries of the file. This is only\n      meaningful for dynamic objects, such as certain types of shared\n      libraries. As for -r, if used with -d or -D, the relocations are\n      printed interspersed with the disassembly.\n\n```\nCan anybody please explain how do these two options differ? What's the difference between relocation and dynamic relocation entries?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "4k",
  "tags": [
    "binary-analysis",
    "objdump"
  ],
  "user": "sherlock",
  "time": "Dec 20, 2016 at 9:16",
  "comments": [],
  "answers_data": [
    {
      "content": "As the notes say, the -R is only meaningful for dynamic objects.  For ordinary .o files from simple programs, the -r will show the relocation entries.  As an example, this simple program:\n\n```\n#include <stdio.h>\nint main() {\n    puts(\"Hello, world!\\\");\n}\n\n```\nWe can produce an object file with this:\n\n```\ncc -Wall -Wextra -pedantic -std=c11   -c -o sample.o sample.c\n\n```\nProduces this output when we run the command objdump -r sample.o:\n\n```\nsample.o:     file format elf64-x86-64\n\nRELOCATION RECORDS FOR [.text]:\nOFFSET           TYPE              VALUE \n0000000000000005 R_X86_64_32       .rodata\n000000000000000a R_X86_64_PC32     puts-0x0000000000000004\n\n\nRELOCATION RECORDS FOR [.eh_frame]:\nOFFSET           TYPE              VALUE \n0000000000000020 R_X86_64_PC32     .text\n\n```\n(This is an x86_64 Linux box.)\n\nWith objdump -R sample.o we get this:\n\n```\nobjdump: sample.o: not a dynamic object\nobjdump: sample.o: Invalid operation\n\n```\nThis is expected since this is not a shared library.\n\nBy contrast, we can use this code:\n\n```\n#include <stdio.h>\nint hello() {\n    return puts(\"Hello, world!  \n\");\n}\n\n```\nAnd create a library with this:\n\n```\ngcc -Wall -Wextra -pedantic -std=c11 -fPIC -shared -o libsample.so sample.c\n\n```\nNow the -R makes sense:\n\n```\nobjdump -R libsample.so \n\n```\nOutput:\n\n```\nlibsample.so:     file format elf64-x86-64\n\nDYNAMIC RELOCATION RECORDS\nOFFSET           TYPE              VALUE \n0000000000200df8 R_X86_64_RELATIVE  *ABS*+0x0000000000000660\n0000000000200e00 R_X86_64_RELATIVE  *ABS*+0x0000000000000620\n0000000000200e10 R_X86_64_RELATIVE  *ABS*+0x0000000000200e10\n0000000000200fd8 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable\n0000000000200fe0 R_X86_64_GLOB_DAT  __gmon_start__\n0000000000200fe8 R_X86_64_GLOB_DAT  _Jv_RegisterClasses\n0000000000200ff0 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable\n0000000000200ff8 R_X86_64_GLOB_DAT  __cxa_finalize@GLIBC_2.2.5\n0000000000201018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5\n\n```\nThere are two other utilities: readelf and elfedit that allows us to look at and modify the binary in more detail.  If we create a shared object as shown above, but on a 32-bit Linux machine and then run readelf -a libsample.so the output is long, but starts with this:\n\n```\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x3f0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          5884 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         7\n  Size of section headers:           40 (bytes)\n  Number of section headers:         29\n  Section header string table index: 26\n\n```\nWe can then play games such as changing the file to a EXEC type instead of a DYN type:\n\n```\nelfedit --output-type=EXEC test.so\n\n```\nNow if we rerun readelf, everything is the same except for that tag:\n\n```\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x3f0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          5884 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         7\n  Size of section headers:           40 (bytes)\n  Number of section headers:         29\n  Section header string table index: 26\n\n```\nAlthough the type has changed, it will still function as a shared library.\n\n",
      "votes": "3",
      "user": "Edward",
      "time": "Dec 20, 2016 at 18:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "On this binary (not a shared object), -r doesn't work while -R works. How can you explain that?",
          "time": null
        },
        {
          "user": "Edward",
          "text": "I've added to my answer to show exactly how that's done.",
          "time": null
        }
      ]
    },
    {
      "content": "Dynamic relocations are relocations applied by the dynamic linker (usually ld.so or equivalent), as opposed to the link editor (e.g. ld) for the object files' relocations. They are pointed to by the dynamic section  entries such as DT_REL, DT_RELA and DT_JMPREL. The dynamic linker often supports only a limited set of relocations.\nNot only shared objects but also dynamic (non-static) executables may have dynamic relocations. Unstripped binaries may also have remaining non-dynamic relocations but those are not used by the dynamic linker.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Dec 20, 2016 at 18:09",
      "is_accepted": false,
      "comments": []
    }
  ]
}