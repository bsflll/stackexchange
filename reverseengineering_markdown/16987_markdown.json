{
  "title": "Working backwards from a popup",
  "link": "https://reverseengineering.stackexchange.com/questions/16987/working-backwards-from-a-popup",
  "content": "I'm currently trying to reverse engineer a game,but there's and anti-debug, so far the only leads I've tried to follow are:\nI found an IsDebuggerPresent API, I tried to change the value of EAX by putting in  a hardware breakpoint (write) at the address of the API, then running the debugger and opening general registers and changing EAX it to 0x00000000, but that didn't accomplish anything.\n\nSo I want to know how I can find the origin of this popup in IDA\n\nthat way I can start working backwards from the origin and find out where it comes from.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "anti-debugging"
  ],
  "user": "Ayazasker",
  "time": "Dec 16, 2017 at 12:02",
  "comments": [],
  "answers_data": [
    {
      "content": "The error you've received was probably thrown by either Themida or WinLicense, a well known protectors. I'd say here that fully bypass of both Themida and WinLicense are goals that are hard to reach for an inexperienced reverse engineer.  \n\nBecause it's the 3rd question you ask about this subject, and it seems like you are truly struggle with it, I'll show you a quick step-by-step tutorial of how to bypass IsDebuggerPresent on runtime, from inside IDA and avoid the pop-up message.  \n\nFirst, let's create a small program which all it does will be to check whether it was executed inside a debugger or not:\n\n```\n#include <windows.h>\n#include <stdio.h>\n\nint main(){\n    if (IsDebuggerPresent()) {\n        printf(\"Debugger found  \n\");\n    } else {\n        printf(\"Debugger not found  \n\");\n    }\n\n    return 0;\n}\n\n```\nAs you can see, the program only contains a main() function which will print \"Debugger found\" or \"Debugger not found\", depends on the result of IsDebuggerPresent().\n\nLet's compile the program. I used TinyCC because it is less noisy than some of the other compilers. Basically you can use whatever C compiler for windows you wish.\n\n```\n./tcc.exe check_for_debugger.c\n\n```\nNow that we have an executable .exe file, let's execute it:\n\n```\n./check_for_debugger.exe\nDebugger not found\n\n```\nAs expected, we ended up with \"Debugger not found\" printed to the console. Let's open the executable in IDA Pro. As you can see, the main function looks something like this (click on it to enlarge):\n\n\n\nLet's execute it. You may want to put a breakpoint before the program exits but not before the message is printed.\n\nWe can see that \"Debugger found\" was printed to the console.\n\nNow let's modify the result of IsDebuggerPresent() by changing the value of eax just after the function was called. For this, we'll create a breakpoint in offset 0x0040100F (in my program) which is where the result of IsDebuggerPresent() is checked by test eax, eax.\n\nExecute the program inside IDA. The program has stopped at our breakpoint on test eax, eax and we can see in the registers panel that eax has non-zero value (in my case eax==1). \n\n\n\nLet's right click on eax and choose \"Zero value\", and immediately the value of eax will changed to zero.\n\n\n\nNow let's continue the execution (don't forget the breakpoint before exit() in case you removed it for some reason). And as we wanted, the message \"Debugger not found\" is printed in the console.\n\nHope you understood how to bypass IsDebuggerPresent by modifying the value of eax, now you can continue your reverse-engineering process.\n\n",
      "votes": "5",
      "user": "Megabeets",
      "time": "Dec 16, 2017 at 14:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ayazasker",
          "text": "Thanks , I did exactly the same things the last time I posted. I thought it would be simple , well I guess there are more anti-debugging techniques",
          "time": null
        },
        {
          "user": "Ayazasker",
          "text": "So I did the right thing , but I thought I was doing something wrong. Which means there are more anti-debugging techniques.",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "That's true, software protectors are reach in anti-debug tricks and as I said, this is not going to be easy at all to completely bypass them. Anyway, this is how you bypass IsDebuggerPresent and if you'll check you can see that probably other anti-analysis trick is catching you.",
          "time": null
        }
      ]
    }
  ]
}