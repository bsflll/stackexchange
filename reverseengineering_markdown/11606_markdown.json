{
  "title": "How Can I Debug A Bios Better",
  "link": "https://reverseengineering.stackexchange.com/questions/11606/how-can-i-debug-a-bios-better",
  "content": "I am trying to reverse engineer a firmkit in a bios, but in general I would like to know how can I debug a bios better.\n\nI found a way to attach IDA to a vmware instance usign a GDB session GDB Debugging With VMware, but it seems like I am always racing to against the bios and boot up of the VM. I am wanting to have it stop in a place that I can follow and make sense of.\n\nIn general, What are some better practices when debugging a bios? Is IDA a decent debugger for this task? Is there something more meant for this task? Any other ideas are welcome also, I am really wanting to focus on reversing malware that is written to the bios.\n\nThanks!\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "debugging",
    "gdb",
    "bios"
  ],
  "user": "LUser",
  "time": "Dec 21, 2015 at 2:27",
  "comments": [
    {
      "user": "fpmurphy",
      "text": "UEFI firmware is relatively easy to reverse engineer as most of the protocols are well documented and most implementations are based on the Tianocore reference implementation.   A traditional BIOS is harder to reverse engineer as documentation is not readily available",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can try running your BIOS in QEMU. QEMU's -S option will pause boot until a debugger (gdb) is attached. IDA's debugger apparently works fine with QEMU, according to this article: https://www.hex-rays.com/products/ida/support/tutorials/debugging_gdb_qemu.pdf\n\n",
      "votes": "2",
      "user": "Brendan Dolan-Gavitt",
      "time": "Dec 21, 2015 at 3:45",
      "is_accepted": true,
      "comments": [
        {
          "user": "LUser",
          "text": "Same idea, I managed to use VMware 7 and it worked fine.",
          "time": null
        }
      ]
    }
  ]
}