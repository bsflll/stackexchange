{
  "title": "Mickey Mouse toy bin file analysis",
  "link": "https://reverseengineering.stackexchange.com/questions/31662/mickey-mouse-toy-bin-file-analysis",
  "content": "I am trying to reverse engineer a Mickey Mouse toy just for fun but I am stuck.\nThe toy has several buttons that play various phrases and songs.\nMy aim was to see if I can read those songs from the eeprom as the other chip is encased in resin.\nI was able to read the 2mb bin file and I have tried various softwares for reverse engineering but I didn't find very useful information.\n\nbinwalk -A mickey.bin:\n\n```\n    DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n1581594       0x18221A        ARMEB instructions, function prologue\n\n```\nIn imHex I was only able to identify this at the start of the file:\n\n```\nDate: 2009-11-09Version:     V06Author:    A\\xAAUi\\x96/\\x00\\xD0\\xFF8#\n\n```\nIn Ghidra I was only able to find this:\n\n```\n                             //\n                         // ram \n                         // ram:00000000-ram:001fffff\n                         //\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined Reset()\n         undefined         r0:1           <RETURN>\n                         Reset                                           XREF[1]:     Entry Point(*)  \n    00000000 44 61 74 65     ldrbvs     r6,[r4,#-0x144]!\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined UndefinedInstruction()\n         undefined         r0:1           <RETURN>\n                         UndefinedInstruction                            XREF[1]:     Entry Point(*)  \n    00000004 3a 20 32 30     eorccs     r2,r2,r10, lsr r0\n                         SupervisorCall                                  XREF[1]:     Entry Point(*)  \n    00000008 30              ??         30h    0\n    00000009 39              ??         39h    9\n    0000000a 2d              ??         2Dh    -\n    0000000b 31              ??         31h    1\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined PrefetchAbort()\n         undefined         r0:1           <RETURN>\n                         PrefetchAbort                                   XREF[1]:     Entry Point(*)  \n    0000000c 31 2d 30 39     ldmdbcc    r0!,{r0,r4,r5,r8,r10,r11,sp}\n                         DataAbort                                       XREF[1]:     Entry Point(*)  \n    00000010 56              ??         56h    V\n    00000011 65              ??         65h    e\n    00000012 72              ??         72h    r\n    00000013 73              ??         73h    s\n    00000014 69              ??         69h    i\n    00000015 6f              ??         6Fh    o\n    00000016 6e              ??         6Eh    n\n    00000017 3a              ??         3Ah    :\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined IRQ()\n         undefined         r0:1           <RETURN>\n                         IRQ                                             XREF[1]:     Entry Point(*)  \n    00000018 20 20 20 20     eorcs      r2,r0,r0, lsr #32\n                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined FIQ()\n         undefined         r0:1           <RETURN>\n                         FIQ                                             XREF[1]:     Entry Point(*)  \n    0000001c 20 56 30 36     ldrtcc     r5,[r0],-r0,lsr #0xc\n    00000020 41 75 74 68     ldmdavs    r4!,{r0,r6,r8,r10,r12,sp,lr}^\n    00000024 6f 72 3a 20     eorcss     r7,r10,pc, ror #0x4\n    00000028 20              ??         20h     \n\n```\nSince I am a beginer I might have not used the reverse engineering software properly.\n\nHere is the bin file:\nhttps://easyupload.io/3yyq4x\n\n",
  "votes": "4",
  "answers": 1,
  "views": "193",
  "tags": [
    "binary-analysis",
    "ghidra",
    "radare2",
    "binwalk"
  ],
  "user": "George Farcas",
  "time": "Mar 12, 2023 at 17:28",
  "comments": [
    {
      "user": "secfren",
      "text": "What is the toy? What are the other chips on the toy? (If there is another chip for storage how do you know the EEPROM contains the songs?)",
      "time": null
    },
    {
      "user": "mumbel",
      "text": "You're trying to disassemble ASCII, look at the values, that's the version string.  look for other bytes",
      "time": null
    },
    {
      "user": "George Farcas",
      "text": "@secfren The toy looks something similar to this link Apart from the eeprom there are just some passive componets and a a chip enclosed in a black blob. I was assuming the songs are in the eeprom since they are in Romanian, that implies that the toys were built in multiple languages. I supposed that the manufacturer used the eeprom for the songs but I'm not sure",
      "time": null
    },
    {
      "user": "secfren",
      "text": "Inside? PCB? Model? What about the other chips?",
      "time": null
    },
    {
      "user": "masterX244",
      "text": "Looks like data for me. there are sections with  00 6d db b6 and some more pattern between more varying sections. Assuming that each one of those varying sections is a audio clip. thats what i was able to spot from a quick check on the file.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Got the file disassembled into the audio segments. Format is pretty simple.\n\n(for further analysis the separated files: https://nplusc.de/mickey.bin-splitted.zip )\n\nFile has a index list at 0x6c of 0x29 uint32 offsets, at each offset there is a length field (uint32) and then the raw file.\n\nFile format as a 010editor binary template:\n\n```\nbyte randomgarbage[0x6b];\nlocal uint64 returnoffset = FTell();\nuint32 sizes[0x29];\n\nstruct FILE{\n    uint32 file_size;\n    byte content[file_size];\n};\n\nFSeek(returnoffset);\nlocal uint i = 0;\nfor(i = 0; i<0x29;i++)\n{\n    FSeek(sizes[i]);\n    FILE file;\n}\n\n```\nUsed this java program to split the file:\n\n```\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\n\npublic class MickeyBinSplitter {\n    public static void main(String[] args) {\n        try (RandomAccessFile file = new RandomAccessFile(args[0],\"r\")) {\n            File out = new File(args[0]+\"out\");\n            out.mkdirs();\n            file.seek(0x6b);\n                            //guessed from file reading\n            for(int i=0; i < 0x29;i++)\n            {\n                byte[] swapMe = new byte[4];\n                file.read(swapMe);\n                ByteBuffer wrapped = ByteBuffer.wrap(new byte[]{swapMe[3],swapMe[2],swapMe[1],swapMe[0]}); // big-endian by default\n                int offsetFile = wrapped.getInt();\n                System.out.println(offsetFile);\n                long retval = file.getFilePointer();\n\n                file.seek(offsetFile);\n\n                file.read(swapMe);\n                wrapped = ByteBuffer.wrap(new byte[]{swapMe[3],swapMe[2],swapMe[1],swapMe[0]}); // big-endian by default\n                int lenFile = wrapped.getInt();\n                System.out.println(lenFile);\n                byte[] innerFile = new byte[lenFile];\n                file.read(innerFile);\n                file.seek(retval);\n                try (RandomAccessFile outRandom = new RandomAccessFile(new File(out, i + \".bin\"), \"rw\")) {\n                    outRandom.write(innerFile);\n                }\n            }\n\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n}\n\n\n```\n",
      "votes": "3",
      "user": "masterX244",
      "time": "Mar 14, 2023 at 13:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "George Farcas",
          "text": "Excelent find! I am trying to do the same in imHex for learning purposes. What was your thought process on doing this? What was the first thing you searched?",
          "time": null
        },
        {
          "user": "masterX244",
          "text": "scrolling over the file. i got a slightly different wired brain and scrolling over a file often shows me patterns. knowing that it looked like a data flash and not a code flash (and a few similar formats that i twiddled apart) got me to look for stuff that looks like a index/offset table (those often show as a series of increasing values). rest was cross-referencing and guessworks. java program was quickly cobbled together after i had the binary template done (those are useful for quick verify if a guess fits). Nasty traps are when the tables are not really aligned. was off by one byte",
          "time": null
        },
        {
          "user": "masterX244",
          "text": "first and that caused me to look at wrong values. the zero bytes in the table pointed me to the offset then",
          "time": null
        }
      ]
    }
  ]
}