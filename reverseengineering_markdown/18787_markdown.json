{
  "title": "How to stop debugging while a specific value is on the stack?",
  "link": "https://reverseengineering.stackexchange.com/questions/18787/how-to-stop-debugging-while-a-specific-value-is-on-the-stack",
  "content": "I'm debugging an .exe file with IDA , and always I see specific value in my stack , for ex. AABBCCDDEEFF .\n\nThat value interests me, I want to know where this value comes from, how it gets pushed onto the stack.\n\nHow can I put some condition so that when my stack includes this value, the debugger breaks, so that I can see which function pushes/pushed it to stack?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "700",
  "tags": [
    "ida",
    "windows",
    "debugging"
  ],
  "user": "ffdebugger",
  "time": "Jul 13, 2018 at 11:04",
  "comments": [
    {
      "user": "blabb",
      "text": "it is not feasible  as you phrase it   that stack pointer is dynamic and can change on each instruction executed  so unless you single step evaluate re single step  you cant catch it   if you know or have a boundary then you can use trace functions with evaluations and continuations  but it would be horrendously slow generically",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "Possible duplicate of OllyDbg: How to set a conditional breakpoint for a value anywhere in the stack?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@mrexodia question is about IDA, though. Although principles may be applicable.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This has already been answered here : OllyDbg: How to set a conditional breakpoint for a value anywhere in the stack? \n\nThere is a specific plugin for the x64dbg debugger by mrexodia that can do exactly what you have asked for : https://github.com/mrexodia/StackContains\n\nTaken from here :\n\n\n\nThis will break when the value 00E60000 appears on the stack like this :\n\n\n\nAs I'd already mentioned, the pics are taken from the thread that I'd linked to above.\n\nI suggest that you read the full thread to gain a full understanding of the process.\n\nI do realize that you'd mentioned IDA in your question but using the plugin in the x64dbg debugger that I linked to above, makes your job a whole lot easier.\n\nGood luck :) \n\n",
      "votes": "2",
      "user": "TechLord",
      "time": "Jul 13, 2018 at 12:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "ffdebugger",
          "text": "Can I move all to stuff I wrote in ida to x64dbg debugger ?  I never use that before... is that free tool?  It's hard to work with 2 tools, is there more adventage in x64dbg debugger  compare to IDA?",
          "time": null
        },
        {
          "user": "TechLord",
          "text": "@ffdebugger : Yes, both x64dbg and the plugin are available along with their source code on Github and are therefore free. IDA and x64dbg each have their advantages and disadvantages. You need to see which to use depending on your primary purpose - decompliation or debugging. It is possible to achieve the same with IDA with scripting. x64dbg has a ready (and free) plugin that does exactly what you'd asked for... If you can script well then you can do it in IDA itself.",
          "time": null
        },
        {
          "user": "TechLord",
          "text": "@Biswapriyo The plugin checks and compares the values pushed on to the stack to what you'd entered and breaks if the values match. The screenshot in my answer above pretty much sum up and show what the plugin can do.",
          "time": null
        },
        {
          "user": "TechLord",
          "text": "@Biswapriyo : You would need to give us a lot more details with screenshots if possible, showing what exactly did and where it failed. With the info that you have presently provided, it's impossible to answer your question.",
          "time": null
        },
        {
          "user": "ffdebugger",
          "text": "what is please csp and what is max trace count",
          "time": null
        }
      ]
    },
    {
      "content": "You need a tracer for such things. See the tools like Ponce https://github.com/illera88/Ponce\n\n",
      "votes": "1",
      "user": "Anton Kukoba",
      "time": "Jul 13, 2018 at 12:36",
      "is_accepted": false,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "I place the DLL in plugins folder but IDA 7.0 shows LoadLibrary(E:\\IDA70\\plugins\\Ponce64.dll) error: The specified module could not be found. E:\\IDA70\\plugins\\Ponce64.dll: can't load file.",
          "time": null
        },
        {
          "user": "Anton Kukoba",
          "text": "sorry, I've used it only in IDA 6.8, and it worked fine then.",
          "time": null
        }
      ]
    }
  ]
}