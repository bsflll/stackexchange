{
  "title": "Linux Embedded board - Kernel Panic problems",
  "link": "https://reverseengineering.stackexchange.com/questions/25132/linux-embedded-board-kernel-panic-problems",
  "content": "I need to duplicate an old embedded board based on a Yocto-based Linux.\n\nI have bought a new board with the same part number and now I need to put the old software in the new board (the new board has only u-boot installed).\n\nThe original board has u-boot with few command list, so I had to dumped the memory by serial terminal.\n\nI got some file in .txt with the internal memory data and I convert them in .bin with Linux xxd -r command and i put the data in my new board.\n\nWhen I turn on my new board, the Linux kernel starts but it can't find the partition and stops to work and says:\n\n```\nKernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)\n\n```\n```\nU-Boot 2009.01 (May 28 2011 - 03:25:24)\n\nCPU:   Freescale i.MX25 at 398 MHz\nBoard: GEA_M6425 \nI2C:   ready\nDRAM:  64 MB\nNAND:  Bad block table found at page 131008, version 0x01\nBad block table found at page 130944, version 0x01\n256 MiB\nNAND read: device 0 offset 0xc0000, size 0x40000\n    262144 bytes read: OK\nIn:    serial\nOut:   serial\nErr:   serial\ni2c_addr:chip address cycle fail(a1)\nNet:   miiphy_register: non unique device name 'FEC0'\nFEC0, FEC0\nVersion: \nNote:    \nAuto-update from TFTP: trying update file 'prog.scr'\nFEC: enable RMII gasket\nUsing FEC0 device\nTFTP from server 192.168.140.12; our IP address is 192.168.140.30\nFilename 'prog.scr'.\nLoad address: 0x81000000\nLoading: *T T T T T T T T T T T T T T T T T T T T \nRetry count exceeded; starting again\nCan't load update file, aborting auto-update\nAuto-update from NAND:\nNAND read: device 0 offset 0x1000000, size 0x20\n    32 bytes read: OK\nNo image found.\nHit any key to stop autoboot:  3  2  1  0 \nNAND read: device 0 offset 0x100000, size 0x300000\n    3145728 bytes read: OK\n## Booting kernel from Legacy Image at 81000000 ...\n    Image Name:   Linux-2.6.31-rc9\n    Image Type:   ARM Linux Kernel Image (uncompressed)\n    Data Size:    2318824 Bytes =  2.2 MB\n    Load Address: 80008000\n    Entry Point:  80008000\n    Verifying Checksum ... OK\n    Loading Kernel Image ... OK\nOK\nStarting kernel ...\nUncompressing Linux....................................................................................................................................................... done, booting the kernel.\nLinux version 2.6.31-rc9 (user@evelin) (gcc version 4.1.2) #1 PREEMPT Tue Sep 27 21:35:47 CEST 2011\nCPU: ARM926EJ-S [41069264] revision 4 (ARMv5TEJ), cr=00053177\nCPU: VIVT data cache, VIVT instruction cache\nMachine: Freescale MX25 3-Stack Board\nIgnoring unrecognised tag 0x54410008\nMemory policy: ECC disabled, Data cache writeback\nBuilt 1 zonelists in Zone order, mobility grouping on.  Total pages: 16256\nKernel command line: console=ttymxc0,115200 root=/dev/mtdblock2 rootfstype=jffs2 video=mxcfb:320x240,16bpp,Var-QVGA\nPID hash table entries: 256 (order: 8, 1024 bytes)\nDentry cache hash table entries: 8192 (order: 3, 32768 bytes)\nInode-cache hash table entries: 4096 (order: 2, 16384 bytes)\nMemory: 64MB = 64MB total\nMemory: 59916KB available (4264K code, 484K data, 124K init, 0K highmem)\nNR_IRQS:272\nMXC IRQ initialized\nClock input source is 24000000\nConsole: colour dummy device 80x30\nCalibrating delay loop... 199.06 BogoMIPS (lpj=995328)\nMount-cache hash table entries: 512\nCPU: Testing write buffer coherency: ok\nregulator: core version 0.5\nNET: Registered protocol family 16\nAIPS1 VA base: 0xfc000000\nCPU is i.MX25 Revision 1.0\nMXC GPIO hardware\nrate 22166666\nUsing SDMA I.API\nMXC DMA API initialized\nbio: create slab <bio-0> at 0\nSCSI subsystem initialized\nusbcore: registered new interface driver usbfs\nusbcore: registered new interface driver hub\nusbcore: registered new device driver usb\nMXC I2C driver\ni2c-adapter i2c-0: ACK not received \nNET: Registered protocol family 2\nIP route cache hash table entries: 1024 (order: 0, 4096 bytes)\nTCP established hash table entries: 2048 (order: 2, 16384 bytes)\nTCP bind hash table entries: 2048 (order: 1, 8192 bytes)\nTCP: Hash tables configured (established 2048 bind 2048)\nTCP reno registered\nNET: Registered protocol family 1\nBus freq driver module loaded\nusb: Host 2 host (serial) registered\nusb: DR host (utmi) registered\nJFFS2 version 2.2. (NAND) (SUMMARY)  Â© 2001-2006 Red Hat, Inc.\nSGI XFS with security attributes, large block/inode numbers, no debug enabled\nmsgmni has been set to 117\nalg: No test for stdrng (krng)\nio scheduler noop registered\nio scheduler anticipatory registered\nio scheduler deadline registered\nio scheduler cfq registered (default)\nMXC Backlight Device mxc_lcdc_bl.0 Initialized.\nConsole: switching to colour frame buffer device 40x30\nmxc_sdc_fb mxc_sdc_fb.0: fb0: DISP0 BG fb device registered successfully.\nmxc_sdc_fb mxc_sdc_fb.0: fb1: DISP0 FG fb device registered successfully.\nSerial: MXC Internal UART driver\nmxcintuart.0: ttymxc0 at MMIO 0x43f90000 (irq = 45) is a Freescale i.MX\nconsole [ttymxc0] enabled\nmxcintuart.1: ttymxc1 at MMIO 0x43f94000 (irq = 32) is a Freescale i.MX\nmxcintuart.2: ttymxc2 at MMIO 0x5000c000 (irq = 18) is a Freescale i.MX\nbrd: module loaded\nloop: module loaded\nFreescale FlexCAN Driver \nFEC Ethernet Driver\nfec_enet_mii_bus: probed\nIEEE1588: ptp-timer is unavailable\nconsole [netcon0] enabled\nnetconsole: network logging started\nMXC MTD nand Driver 2.5\nNAND device: Manufacturer ID: 0x20, Chip ID: 0xaa (ST Micro NAND 256MiB 1,8V 8-bit)\nSearching for RedBoot partition table in NAND 256MiB 1,8V 8-bit at offset 0xff60000\nNo RedBoot partition table detected in NAND 256MiB 1,8V 8-bit\nCreating 5 MTD partitions on \"NAND 256MiB 1,8V 8-bit\":\n0x000000000000-0x000000100000 : \"nand.bootloader\"\n0x000000100000-0x000000400000 : \"nand.kernel\"\n0x000000400000-0x00000fc00000 : \"nand.rootfs\"\n0x00000fc00000-0x00000fd00000 : \"nand.configure\"\n0x00000fd00000-0x000010000000 : \"nand.userfs\"\nehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver\nfsl-ehci fsl-ehci.0: Freescale On-Chip EHCI Host Controller\nfsl-ehci fsl-ehci.0: new USB bus registered, assigned bus number 1\nfsl-ehci fsl-ehci.0: irq 35, io base 0x53ff4400\nfsl-ehci fsl-ehci.0: USB 2.0 started, EHCI 1.00\nusb usb1: configuration #1 chosen from 1 choice\nhub 1-0:1.0: USB hub found\nhub 1-0:1.0: 1 port detected\nfsl-ehci fsl-ehci.1: Freescale On-Chip EHCI Host Controller\nfsl-ehci fsl-ehci.1: new USB bus registered, assigned bus number 2\nfsl-ehci fsl-ehci.1: irq 37, io base 0x53ff4000\nfsl-ehci fsl-ehci.1: USB 2.0 started, EHCI 1.00\nusb usb2: configuration #1 chosen from 1 choice\nhub 2-0:1.0: USB hub found\nhub 2-0:1.0: 1 port detected\nInitializing USB Mass Storage driver...\nusbcore: registered new interface driver usb-storage\nUSB Mass Storage support registered.\nmice: PS/2 mouse device common for all mice\ni.MX ADC at 0x50030000 irq 46\nsdhci: Secure Digital Host Controller Interface driver\nsdhci: Copyright(c) Pierre Ossman\nmxsdhci: MXC Secure Digital Host Controller Interface driver\nmxsdhci: MXC SDHCI Controller Driver. \nmmc0: SDHCI detect irq 161 irq 9 INTERNAL DMA\nAdvanced Linux Sound Architecture Driver Version 1.0.20.\nregulator: Unable to get requested regulator: VDDIO\nregulator: Unable to get requested regulator: VDDA\nregulator: Unable to get requested regulator: VDDD\nsgtl5000-i2c 0-000a: SGTL5000 revision 17\nNo device for DAI imx-ssi-1-0\nNo device for DAI imx-ssi-1-1\nNo device for DAI imx-ssi-2-0\nNo device for DAI imx-ssi-2-1\nDMA Sound Buffers Allocated:UseIram=0 buf->addr=83ab0000 buf->area=fde56000 size=65536\nDMA Sound Buffers Allocated:UseIram=0 buf->addr=83ac0000 buf->area=fde66000 size=65536\nasoc: SGTL5000 <-> imx-ssi-1-0 mapping ok\nALSA device list:\n    #0: imx-3stack (SGTL5000)\noprofile: using timer interrupt.\nTCP cubic registered\nNET: Registered protocol family 17\ncan: controller area network core (rev 20090105 abi 8)\nNET: Registered protocol family 29\ncan: raw protocol (rev 20090105)\nRPC: Registered udp transport module.\nRPC: Registered tcp transport module.\nStatic Power Management for Freescale i.MX25\non-off key pressed\ninput: imx_adc_ts as /class/input/input0\ni.MX ADC input touchscreen loaded.\nJFFS2 doesn't use OOB.\nVFS: Mounted root (jffs2 filesystem) on device 31:2.\nFreeing init memory: 124K\n\ninit started: BusyBox v1.15.3 (2011-09-27 21:22:33 CEST)\nstarting pid 898, tty '': '/etc/init.d/rcS'\nInitializing mdev dynamic device directory ... done\neth0: Freescale FEC PHY driver [Generic PHY] (mii_bus:phy_addr=0:00, irq=-1)\n\ncan0 bitrate: 175000\ndropbear already configured\nStarting Dropbear SSH server: dropbear.\nts already configured\n\nstarting pid 939, tty '/dev/ttymxc0': '-/bin/sh'\n\nBusyBox v1.15.3 (2011-09-27 21:22:33 CEST) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n/ # \n\n```\n```\nU-Boot 2009.01-dirty (Nov 15 2013 - 17:55:59)\nCPU:   Freescale i.MX25 at 398 MHz\nBoard: GEA_M6425 \nI2C:   ready\nDRAM:  64 MB\nNAND:  Bad block table not found for chip 0\nBad block table not found for chip 0\nBad block table written to 0x0ffe0000, version 0x01\nBad block table written to 0x0ffc0000, version 0x01\n256 MiB\nUse default panel_info values\nIn:    serial\nOut:   serial\nErr:   serial\ni2c_addr:chip address cycle fail(a1)\nNet:   FEC0\nVersion: \nNote:    \nHit any key to stop autoboot:  3  2  1  0 \nNAND read: device 0 offset 0x100000, size 0x300000\n    3145728 bytes read: OK\n## Booting kernel from Legacy Image at 81000000 ...\n    Image Name:   Linux-2.6.31-rc9\n    Image Type:   ARM Linux Kernel Image (uncompressed)\n    Data Size:    2318824 Bytes =  2.2 MB\n    Load Address: 80008000\n    Entry Point:  80008000\n    Verifying Checksum ... OK\n    Loading Kernel Image ... OK\nOK\nStarting kernel ...\nUncompressing Linux....................................................................................................................................................... done, booting the kernel.\nLinux version 2.6.31-rc9 (user@evelin) (gcc version 4.1.2) #1 PREEMPT Tue Sep 27 21:35:47 CEST 2011\nCPU: ARM926EJ-S [41069264] revision 4 (ARMv5TEJ), cr=00053177\nCPU: VIVT data cache, VIVT instruction cache\nMachine: Freescale MX25 3-Stack Board\nIgnoring unrecognised tag 0x54410008\nMemory policy: ECC disabled, Data cache writeback\nBuilt 1 zonelists in Zone order, mobility grouping on.  Total pages: 16256\nKernel command line: console=ttymxc0,115200 root=/dev/mtdblock2 rootfstype=jffs2 video=mxcfb:800x480,16bpp,Amp-WD\nPID hash table entries: 256 (order: 8, 1024 bytes)\nDentry cache hash table entries: 8192 (order: 3, 32768 bytes)\nInode-cache hash table entries: 4096 (order: 2, 16384 bytes)\nMemory: 64MB = 64MB total\nMemory: 59916KB available (4264K code, 484K data, 124K init, 0K highmem)\nNR_IRQS:272\nMXC IRQ initialized\nClock input source is 24000000\nConsole: colour dummy device 80x30\nCalibrating delay loop... 199.06 BogoMIPS (lpj=995328)\nMount-cache hash table entries: 512\nCPU: Testing write buffer coherency: ok\nregulator: core version 0.5\nNET: Registered protocol family 16\nAIPS1 VA base: 0xfc000000\nCPU is i.MX25 Revision 1.0\nMXC GPIO hardware\nrate 22166666\nUsing SDMA I.API\nMXC DMA API initialized\nbio: create slab <bio-0> at 0\nSCSI subsystem initialized\nusbcore: registered new interface driver usbfs\nusbcore: registered new interface driver hub\nusbcore: registered new device driver usb\nMXC I2C driver\ni2c-adapter i2c-0: ACK not received \nNET: Registered protocol family 2\nIP route cache hash table entries: 1024 (order: 0, 4096 bytes)\nTCP established hash table entries: 2048 (order: 2, 16384 bytes)\nTCP bind hash table entries: 2048 (order: 1, 8192 bytes)\nTCP: Hash tables configured (established 2048 bind 2048)\nTCP reno registered\nNET: Registered protocol family 1\nBus freq driver module loaded\nusb: Host 2 host (serial) registered\nusb: DR host (utmi) registered\nJFFS2 version 2.2. (NAND) (SUMMARY)  Â© 2001-2006 Red Hat, Inc.\nSGI XFS with security attributes, large block/inode numbers, no debug enabled\nmsgmni has been set to 117\nalg: No test for stdrng (krng)\nio scheduler noop registered\nio scheduler anticipatory registered\nio scheduler deadline registered\nio scheduler cfq registered (default)\nMXC Backlight Device mxc_lcdc_bl.0 Initialized.\nConsole: switching to colour frame buffer device 100x30\nmxc_sdc_fb mxc_sdc_fb.0: fb0: DISP0 BG fb device registered successfully.\nmxc_sdc_fb mxc_sdc_fb.0: fb1: DISP0 FG fb device registered successfully.\nSerial: MXC Internal UART driver\nmxcintuart.0: ttymxc0 at MMIO 0x43f90000 (irq = 45) is a Freescale i.MX\nconsole [ttymxc0] enabled\nmxcintuart.1: ttymxc1 at MMIO 0x43f94000 (irq = 32) is a Freescale i.MX\nmxcintuart.2: ttymxc2 at MMIO 0x5000c000 (irq = 18) is a Freescale i.MX\nbrd: module loaded\nloop: module loaded\nFreescale FlexCAN Driver \nFEC Ethernet Driver\nfec_enet_mii_bus: probed\nIEEE1588: ptp-timer is unavailable\nconsole [netcon0] enabled\nnetconsole: network logging started\nMXC MTD nand Driver 2.5\nNAND device: Manufacturer ID: 0x2c, Chip ID: 0xaa (Micron NAND 256MiB 1,8V 8-bit)\nUnrecognized NAND Flash device.\nehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver\nfsl-ehci fsl-ehci.0: Freescale On-Chip EHCI Host Controller\nfsl-ehci fsl-ehci.0: new USB bus registered, assigned bus number 1\nfsl-ehci fsl-ehci.0: irq 35, io base 0x53ff4400\nfsl-ehci fsl-ehci.0: USB 2.0 started, EHCI 1.00\nusb usb1: configuration #1 chosen from 1 choice\nhub 1-0:1.0: USB hub found\nhub 1-0:1.0: 1 port detected\nfsl-ehci fsl-ehci.1: Freescale On-Chip EHCI Host Controller\nfsl-ehci fsl-ehci.1: new USB bus registered, assigned bus number 2\nfsl-ehci fsl-ehci.1: irq 37, io base 0x53ff4000\nfsl-ehci fsl-ehci.1: USB 2.0 started, EHCI 1.00\nusb usb2: configuration #1 chosen from 1 choice\nhub 2-0:1.0: USB hub found\nhub 2-0:1.0: 1 port detected\nInitializing USB Mass Storage driver...\nusbcore: registered new interface driver usb-storage\nUSB Mass Storage support registered.\nmice: PS/2 mouse device common for all mice\ni.MX ADC at 0x50030000 irq 46\nsdhci: Secure Digital Host Controller Interface driver\nsdhci: Copyright(c) Pierre Ossman\nmxsdhci: MXC Secure Digital Host Controller Interface driver\nmxsdhci: MXC SDHCI Controller Driver. \nmmc0: SDHCI detect irq 161 irq 9 INTERNAL DMA\nAdvanced Linux Sound Architecture Driver Version 1.0.20.\nregulator: Unable to get requested regulator: VDDIO\nregulator: Unable to get requested regulator: VDDA\nregulator: Unable to get requested regulator: VDDD\nsgtl5000-i2c 0-000a: SGTL5000 revision 17\nNo device for DAI imx-ssi-1-0\nNo device for DAI imx-ssi-1-1\nNo device for DAI imx-ssi-2-0\nNo device for DAI imx-ssi-2-1\nDMA Sound Buffers Allocated:UseIram=0 buf->addr=83a90000 buf->area=fdf82000 size=65536\nDMA Sound Buffers Allocated:UseIram=0 buf->addr=83aa0000 buf->area=fdf92000 size=65536\nasoc: SGTL5000 <-> imx-ssi-1-0 mapping ok\nALSA device list:\n    #0: imx-3stack (SGTL5000)\noprofile: using timer interrupt.\nTCP cubic registered\nNET: Registered protocol family 17\ncan: controller area network core (rev 20090105 abi 8)\nNET: Registered protocol family 29\ncan: raw protocol (rev 20090105)\nRPC: Registered udp transport module.\nRPC: Registered tcp transport module.\nStatic Power Management for Freescale i.MX25\non-off key pressed\ninput: imx_adc_ts as /class/input/input0\ni.MX ADC input touchscreen loaded.\nRoot-NFS: No NFS server available, giving up.\nVFS: Unable to mount root fs via NFS, trying floppy.\nList of all partitions:\nNo filesystem could mount root, tried:  jffs2\nKernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)\n\n```\nCan you help me to understand the problem?\n\nThese are the output of file command:\n\n```\nnand_bootloader_0x0000000-0x00FFFFF.bin: FoxPro FPT, blocks size 0, next free block index 1778450666\n\nnand_kernel_0x0100000-0x03FFFFF.bin: u-boot legacy uImage, Linux-2.6.31-rc9, Linux/ARM, OS Kernel Image (Not compressed), 2318824 bytes, Tue Sep 27 21:36:01 2011, Load Address: 0x80008000, Entry Point: 0x80008000, Header CRC: 0x230C882F, Data CRC: 0xCD73A8A7\n\nnand_rootfs_1_0x0400000-0x06FFFFF.bin: AIX core file fulldump 32-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377 64-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\n\n\nnand_rootfs_2_0x0700000-0x09FFFFF.bin: Linux jffs2 filesystem data little endian\n\nnand_rootfs_3_0x0A00000-0x0EFFFFF.bin: AIX core file fulldump 32-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377 64-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\n\nnand_rootfs_4_0x0F00000-0x13FFFFF.bin: AIX core file fulldump 32-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377 64-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\n\nnand_rootfs_5_0x1400000-0x18FFFFF.bin: AIX core file fulldump 32-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377 64-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\n\nnand_rootfs_6_0x1900000-0x1DFFFFF.bin: AIX core file fulldump 32-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377 64-bit, \\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\n\n\nnand_rootfs_7_0x1E00000-0x22FFFFF.bin: Linux jffs2 filesystem data little endia\n\nnand_configure_0xFC00000-0xFCFFFFF.bin: u-boot legacy uImage, Linux-2.6.31-rc9-gec38174-dirty, Linux/ARM, OS Kernel Image (Not compressed), 2321092 bytes, Fri Oct  8 23:26:48 2010, Load Address: 0x80008000, Entry Point: 0x80008000, Header CRC: 0xE1994975, Data CRC: 0x55F17506\n\nnand_userfs_0xFD00000-0xFFFFFFF.bin: data\n\n```\n(rootfs is split into 7 files).\n\nUPDATES:\n\nHi, I made a contiguous file with your command. Now I set the NFS server on my linux PC (in /etc/exports file I put the string /srv myip/my mask(rw,sync,no_subtree_check,no_root_squash) and save. I put the nand_rootfs.bin file in folder /srv and after i tried to setup UBOOT in my board. This is the printenv command of my Uboot:\n\n```\nbootdelay=3\nbaudrate=115200\nloadaddr=0x81000000\nnetdev=eth0\nethprime=fec\nbootargs_nand=console=ttymxc0,115200 root=/dev/mtdblock2 rootfstype=jffs2 video=\nmxcfb:320x240,16bpp,Var-QVGA\nbootcmd_nand=nand read 81000000 100000 300000; bootm 81000000\nbootcmd_tftp=tftp uImage; bootm\nmirror_update=enable\ntftp_timeout=6000\ntftp_retry=20\nchecksum_control=false\nethact=FEC0\nfilesize=27B84\nfileaddr=80800000\noffset=80000\nGEA_SN=A54673\nfec_addr=9C:53:CD:05:5E:C2\nfecaddr=9C:53:CD:05:5E:C2\nethaddr=9C:53:CD:05:5E:C2\nsplashload=nand read 80800000 c0000 40000\nsplashimage=80800000\nlcd_name=Var-QVGA\nsplashpos=0,0\nbootcmd=run bootcmd_nand\nbootargs=console=ttymxc0,115200 root=/dev/mtdblock2 rw rootfstype=jff2 video=mxcfb:320x240,16bpp,Var-QVGA mtdparts=nand:1M(nand.bootloader),3M(nand.kernel),-(rootfs)\nipaddr=192.168.11.60\nserverip=192.168.11.64\nbootargs_nfs=console=ttymxc0,115200 root=/dev/nfs rw ip=$(ipaddr) nfsroot=$(serverip):/srv/nand_rootfs.bin rootfstype=jff2 video=mxcfb:320x240,16bpp,Var-QVGA\n\nEnvironment size: 991/262140 bytes\n\n```\nWhen I run the command:\n\n```\nrun bootargs_nfs\n\n```\nI get:\n\n```\nUnknown command 'console=ttymxc0,115200' - try 'help'\n\n```\nIs this procedure correct ? I modify the bootargs_nfs with command:\n\n```\nsetenv 'bootargs_nfs console=ttymxc0,115200 root=/dev/nfs rw ip=$(ipaddr) nfsroot=$(serverip):/srv/nand_rootfs.bin rootfstype=jff2 video=mxcfb:320x240,16bpp,Var-QVGA'\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "320",
  "tags": [
    "firmware",
    "linux",
    "embedded"
  ],
  "user": "Roberto",
  "time": "Jun 26, 2020 at 9:55",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Okay, cool. I think the rootfs files can probably be joined into a single file. From what I saw the addresses are adjacent. In theory something along the lines of cat nand_rootfs_{1..7}_*.bin > nand_rootfs.bin should work and give you one contiguous nand_rootfs.bin file. After that it should be possible to mount it on a system with jffs2 support. If we'd manage that, that'd be the first step toward making it available via NFS. With the command I am assuming there are only those *.bin files ...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Well, I am not (yet) an expert, but since I work in embedded software now I'd guess that this is your problem:\n\n```\nMXC MTD nand Driver 2.5\nNAND device: Manufacturer ID: 0x20, Chip ID: 0xaa (ST Micro NAND 256MiB 1,8V 8-bit)\nSearching for RedBoot partition table in NAND 256MiB 1,8V 8-bit at offset 0xff60000\nNo RedBoot partition table detected in NAND 256MiB 1,8V 8-bit\nCreating 5 MTD partitions on \"NAND 256MiB 1,8V 8-bit\":\n0x000000000000-0x000000100000 : \"nand.bootloader\"\n0x000000100000-0x000000400000 : \"nand.kernel\"\n0x000000400000-0x00000fc00000 : \"nand.rootfs\"\n0x00000fc00000-0x00000fd00000 : \"nand.configure\"\n0x00000fd00000-0x000010000000 : \"nand.userfs\"\n\n```\n```\nMXC MTD nand Driver 2.5\nNAND device: Manufacturer ID: 0x2c, Chip ID: 0xaa (Micron NAND 256MiB 1,8V 8-bit)\nUnrecognized NAND Flash device.\n\n```\nLong story short, you'll need something that your kernel will recognize. The NAND components are from different vendors, so while the boards may be the same to the manufacturer, they differ in details that matter to your older kernel.\n\nAlso, your kernel command line (typically taken from the U-Boot environment) differs between the two boots.\n\nHowever, I would reckon there's at least a way to get this to boot as follows:\n\nWhile this doesn't solve the problem of modifying your existing kernel to fully boot off the NAND on the new board, it will allow you to tinker further with the new boot which the kernel panic currently prevents you from doing.\n\nIt's also possible that modifying something in the U-Boot environment will get you further, but this is what I'd do at this point.\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "May 29, 2020 at 20:23",
      "is_accepted": false,
      "comments": [
        {
          "user": "Roberto",
          "text": "Thank you for your answer and sorry if i reply you only now but i had personal problems last weeks :(. I would like try your solution by NFS but i don't have the imagine files but only .bin. I read data from the old device and save it in .bin file (i used nand read command from U-boot). I have these files now: 0x000000000000-0x000000100000 : bootloader.bin 0x000000100000-0x000000400000 : kernel.bin 0x000000400000-0x00000fc00000 : rootfs.bin 0x00000fc00000-0x00000fd00000 : configure.bin 0x00000fd00000-0x000010000000 : userfs.bin I need to start an application that was in my old board, i have on",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@Robert It should be possible to use these files, yes. In particular you should be able to mount the rootfs some way. But it would be helpful if you gave us the output of file run on all of these files. Not yet sure if this information will suffice, but it will definitely get us further.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "I'm counting five files you mentioned in your previous comment. Which one is ELF. What are the others? You can always also edit your question.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Could you please edit the information I asked into your question (file output for the five files above) ... for the ELF file we already know it's an ELF file, but you can also run file on it.",
          "time": null
        },
        {
          "user": "Roberto",
          "text": "you have a lot of patience with me :)",
          "time": null
        }
      ]
    }
  ]
}