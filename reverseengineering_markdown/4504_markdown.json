{
  "title": "how can the processor instruction set be identified solely by examining a binary image? [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/4504/how-can-the-processor-instruction-set-be-identified-solely-by-examining-a-binary",
  "content": "I am doing reverse engineering of a binary firmware image of unknown provenance, which operates on a device that is not physically accessible to me.  That is, I can't take apart the device, don't have even block diagrams for its function, and have no ability to identify the microprocessor by visual inspection or by asking the creator of the object.  Literally the only thing available is the binary image.\n\nMy question is: given those constraints what tools or theoretical approaches could be employed to identify the processor's instruction set by examining the binary?\n\nI have, of course, attempted to use disassemblers for various popular ISAs such as ARM, x86 and MIPS.  I have also done a literature search for research papers but haven't turned up anything at all.\n\nIdeally, what I'd like is a tool that would examine the binary and then report something like \"75% probability that this is code for a Renesas M16C.\"\n\n",
  "votes": "5",
  "answers": 2,
  "views": "3k",
  "tags": [
    "disassembly",
    "machine-code"
  ],
  "user": "Edward",
  "time": "10 years ago",
  "comments": [
    {
      "user": "gandolf",
      "text": "Those are tough constraints. When you mention \"which operates on a device that is not physically accessible\", does that imply that you know what device it 'can' run on? Is this some embedded device? Could you possibly go with that angle as to what underlying architecture is supported by that device that runs the firmware?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is extremely hard to perform. Given no initial information, you'll have to go through it heuristically using pattern matching & probabilistic approximations.\n\nI've been working for two years on such a tool (I have written tons of helpful tools destined to be used by myself for work & which I plan to share someday, not soon though). It works, but it's not mature enough to be thrown in the jungle. My approach is as follows : detect binary format data structures if possible, disassemble a chunk of binary code by using multiple instruction set encoding (ARM, x86, MIPS, ...) and then heuristically assess (using bads & some other stuff :]) which is closer ...    \n\nBut interestingly, your question has been asked here before and an interesting approach was given and considered an answer. It uses a similar approach as in biology to identify the phylogenetic distance. \n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Edward",
          "text": "The link to the other question was most interesting.  I don't know why my searches failed to find it.  Thanks!",
          "time": null
        },
        {
          "user": "yaspr",
          "text": "You're welcome. If you want any insight on the question I'm still available. Though I can't share my tools, I'd be glad to help you work on an approach :D",
          "time": null
        }
      ]
    },
    {
      "content": "This presentation offers one approach.\n\nTitle: Reverse engineering of binary programs for custom virtual machines\n\nAuthors: Alexander Chernov and Katerina Troshina\n\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "Jun 2, 2014 at 14:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}