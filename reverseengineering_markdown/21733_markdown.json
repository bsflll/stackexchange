{
  "title": "Change instruction test eax, eax to text eax, 1",
  "link": "https://reverseengineering.stackexchange.com/questions/21733/change-instruction-test-eax-eax-to-text-eax-1",
  "content": "I'm trying to change an instruction in assembly. Try with test eax, eax to test eax, 1. I try modify the opcodes. \nFor example opcode of test eax, eax: 85c0\n\n\nTry to understand why is 85c0 with this table:\n\n\n85 comes from 'test', ok. But c0 from EB lb? I'm a little confused how to create that opcode and how to modify and get test eax, 1.\n\nThanks, appreciate any help!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "radare2",
    "patch-reversing"
  ],
  "user": "felix89",
  "time": "Jul 22, 2019 at 6:56",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "This table shows only the first byte. There has to be more on that page that allows to  say what are the next bytes.",
      "time": null
    },
    {
      "user": "felix89",
      "text": "Thanks for the answer. Great explanation @bart1e algo the page, it helps a lot!:)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The opcode you are interested in is a9 01 00 00 00 standing for test eax, 1.\n\nThe easiest way to get the opcode of assembly instruction is just to compile  it and disassemble the result (for example using nasm and then objdump or simply this site) - this way you don't have to remember anything about the opcodes which are sometimes weird.\n\nHowever, you want to patch 2 bytes instruction and the opcode I gave is 5 bytes. As a workaround, you can do test al, 1 (a8 01), which will do the same (will do test only on the least significant byte of eax).\n\n",
      "votes": "5",
      "user": "bart1e",
      "time": "Jul 22, 2019 at 6:03",
      "is_accepted": true,
      "comments": []
    }
  ]
}