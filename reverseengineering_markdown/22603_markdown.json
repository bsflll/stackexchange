{
  "title": "Arrangement of variables on the stack - out of order?",
  "link": "https://reverseengineering.stackexchange.com/questions/22603/arrangement-of-variables-on-the-stack-out-of-order",
  "content": "I was practicing some reverse engineering crack-mes as part of our university curriculum, and I have a question around the arrangement of variables on the stack. \n\nI have a very basic C++ code, like so:\n\n```\nvoid foo(int x){\n    int a=0;\n    int b=x;\n    int c=3;\n    int z=a+b+c;\n    return;\n}\n\nint main(){\n     foo(5);\n     return 0;\n}\n\n```\nI compile the program, like so:\n\n```\ng++ program.cpp -o program -ggdb \n\n```\nI run gdb with \n\n```\ngdb -q program\n\n```\nAnd inside gdb\n\n```\nset disassembly-flavor intel\ndisass foo\n\n```\nI expect the stack frame layout of foo to have the variable a on top of b, followed by c and then z. But that does not seem to be the case. \n\nI have stumbled across this answer in which the explanation shows a similar layout of how variables are arranged. I'd expect that x would be at the highest address in the frame, right below ebp. But the answer clearly shows z being the closest to ebp, given that it is at ebp - 4 but x is at ebp - 12, which seems counter intuitive to me.\n\nI have read a bunch of books, and have seen a couple of online videos on buffer overflows where it is said that the first variable the compiler encounters is the first to be placed on the stack; and order of variable declaration can effect what variables are overwritten in case there is a buffer next to them that's overflown. Is this still a valid statement to make?\n\nWhy do I see variables arranged in such an order? Kindly help me out, I'm not sure if my facts are outdated or am I missing something fundamental.\n\nPS: I am using Ubuntu 16.04 Desktop, with the latest version of GCC/G++\n\nEdit 1: Adding disassembly of function foo\n\n```\nubuntu@Ubuntu:~$ gdb -q program \nReading symbols from program... \n(gdb) set disassembly intel \n(gdb) disass foo \nDump of assembler code for function foo(int): \n    0x0000000000001125 <+0>:    push rbp    \n    0x0000000000001126 <+1>:    mov rbp,rsp \n    0x0000000000001129 <+4>:    mov DWORD PTR [rbp-0x14],edi \n    0x000000000000112c <+7>:    mov DWORD PTR [rbp-0x10],0x0 \n    0x0000000000001133 <+14>:   mov eax,DWORD PTR [rbp-0x14]\n    0x0000000000001136 <+17>:   mov DWORD PTR [rbp-0xc],eax\n    0x0000000000001139 <+20>:   mov DWORD PTR [rbp-0x8],0x3\n    0x0000000000001140 <+27>:   mov edx,DWORD PTR [rbp-0x10]\n    0x0000000000001143 <+30>:   mov eax,DWORD PTR [rbp-0xc]\n    0x0000000000001146 <+33>:   add edx,eax \n    0x0000000000001148 <+35>:   mov eax,DWORD PTR [rbp-0x8]\n    0x000000000000114b <+38>:   add eax,edx \n    0x000000000000114d <+40>:   mov DWORD PTR [rbp-0x4],eax  \n    0x0000000000001150 <+43>:   nop \n    0x0000000000001151 <+44>:   pop rbp \n    0x0000000000001152 <+45>:   ret \nEnd of assembler dump. \n(gdb) b *foo+43 \nBreakpoint 1 at 0x1150: file program.cpp, line 6. \n(gdb) r Starting program: /home/ubuntu/program Breakpoint 1, foo (x=5) at program.cpp:6 \n6    return; \n(gdb) p &a \n$1 = (int *) 0x7fffffffdfb0 \n(gdb) p $rbp-0x10 \n$2 = (void *) 0x7fffffffdfb0 \n\n(gdb) p &b \n$3 = (int *) 0x7fffffffdfb4 \n(gdb) p $rbp-0xc \n$4 = (void *) 0x7fffffffdfb4 \n\n(gdb) p &c \n$5 = (int *) 0x7fffffffdfb8 \n(gdb) p $rbp-0x8 \n$6 = (void *) 0x7fffffffdfb8 \n\n(gdb) p &z \n$7 = (int *) 0x7fffffffdfbc \n(gdb) p $rbp-0x4 \n$8 = (void *) 0x7fffffffdfbc \n(gdb)\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "357",
  "tags": [
    "c++",
    "gdb",
    "gcc"
  ],
  "user": "user148898",
  "time": "Nov 22, 2019 at 16:43",
  "comments": [
    {
      "user": "julian",
      "text": "Please include the disassembly of the foo function",
      "time": null
    },
    {
      "user": "user148898",
      "text": "Added the disassembly. I use x64 machine, btw. I'd expect to see variable a to have the highest address and closest to RBP, but that is not the case apparently.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Keep in mind Your program as is when compiled with -O will become just \n\n```\nmov eax,0\nreturn\n\n```\n\n\nevery thing out there in your Source is Dead Code and Will be eliminated \n\nsince you are compiling this in debug mode without  any optimizations the compiler provides you all those variables \n\ni am not sure what you mean by nearer to ebp \n\nin debugmode compiler as far as possible allocates the variables in the same order \nas it encounters  them \n\nhere is a colour coded nonoptimzed output for the same code\n\nas you can see compiler first instruction in white color is your int a=0;  which is at rbp-4\n\n\n\nbut the std iirc does not specify any standard for allocation of variable addresses \n\nquoting from standard linked in that thread\n\n",
      "votes": "1",
      "user": "blabb",
      "time": "Nov 22, 2019 at 20:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}