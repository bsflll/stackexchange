{
  "title": "How to detect a virtualized environment?",
  "link": "https://reverseengineering.stackexchange.com/questions/1686/how-to-detect-a-virtualized-environment",
  "content": "What are the different ways for a program to detect that it executes inside a virtualized environment ? And, would it be possible to detect what kind of virtualization is used ?\n\n",
  "votes": "19",
  "answers": 8,
  "views": "28k",
  "tags": [
    "anti-debugging",
    "virtual-machines"
  ],
  "user": "perror",
  "time": "Apr 10, 2013 at 7:45",
  "comments": [
    {
      "user": "amccormack",
      "text": "Are you trying to fool the program that is trying to detect that it is running in a virtual environment into thinking that it is not?",
      "time": null
    },
    {
      "user": "perror",
      "text": "I think that the spectrum of my question is a bit too wide. I will edit it to focus only on the detection of a virtualized environment (the counter-measures can come after).",
      "time": null
    },
    {
      "user": "perror",
      "text": "Note that some tools (imvirt) or there exist some other similar simple techniques. But, these techniques are based on the fact that the virtualizer is not trying to hide itself.",
      "time": null
    },
    {
      "user": "Grijesh Chauhan",
      "text": "I post some links [Thwarting Virtual Machine Detection A](handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf) ..[This not detection](Can Operating Systems tell if they're running in a Virtual Machine?) ..VMD Initially written by research purpose RED-Pill and Blue-Pil , Two new viruses for attack purpose are MyDoom and stuXmet both couldn't be disassembled properly yet!",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "the list could be endless, so I'll keep it short:\n\n(check the anti-debug tag wiki for more)\n\n",
      "votes": "15",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "There are a multitude of ways to detect virtual machines/emulators, mostly following the pattern of identifying an imperfection in the simulation and then testing for it.\n\nAt the simplest end, common virtualization toolkits plaster their name over all kinds of system drivers and devices.  Simply looking at the name of network connections or their MAC address might be sufficient to identify VMware if not specifically configured to mask that.  Likewise, the VM's memory may have plenty of strings that make the virtualization software's presence obvious. \n\nSome other VM artifacts come from the necessity for both host and guest to have a data structure accessible to the processor that can't overlap, such as the SIDT assembly instruction to return the interrupt descriptor table register.  (IDT)  Virtual machines typically store the IDT at a higher register than a physical host.\n\nMeasuring the time of certain functions or instructions that would normally require interaction with the virtualization system is a way to indirectly infer you're executing in a VM.\n\nTwo approaches come to mind as anti-anti-VM methods:  First, one can modify the virtual environment to remove all traces possible of virtualization, which can work well against simple checks for 'vmware' or similar strings, causing an arms race of sorts between known techniques and crafty vm configuration. \n\nThe second approach is to rely heavily on static analysis to identify VM detection techniques and patch them to neutralize their effect after doing so to yield a non-VM-aware executable that can then be dynamically analyzed.  \n\nA couple sources with good information, if a couple years old:\n\n",
      "votes": "15",
      "user": "0xC0000022L",
      "time": "Apr 17, 2013 at 4:53",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Here are some tricks for detecting VM's:\n\nEven though, I tried to make the code self explanatory, you can also refer to the corresponding blog posts for more detailed info.\n\n",
      "votes": "12",
      "user": "perror",
      "time": "Jun 22, 2014 at 21:26",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I wrote a test program a while go (in Delphi).\n\nThe following two functions detect VMware and HyperV\n\n```\n// VMware detection as described by Elias Bachaalany\nfunction IsInsideVMware: Boolean;\nbegin\n  Result := True;\n\n  try\n    asm\n      push edx;\n      push ecx;\n      push ebx;\n\n      mov eax, 'VMXh';\n      mov ebx, 0;\n      mov ecx, 10;\n      mov edx, 'VX';\n\n      in eax, dx;\n\n      cmp ebx, 'VMXh';\n      setz [Result];\n\n      pop ebx;\n      pop ecx;\n      pop edx;\n    end;\n  except\n    Result := False;\n  end;\nend;\n\nfunction IsHyperV: Boolean;\nasm\n  cpuid;\n  test ecx, ecx;\n  sets [Result];\nend;\n\n```\nThe following function checks for Hyper-V via the Vendor Branding string (on VMware this returns \"VMwareVMware\":\n\n```\nfunction IsRunningUnderHyperV: BOOL; stdcall;\nvar\n  VMBranding: array[0..12] of AnsiChar;\nbegin\n  asm\n    mov eax, $40000000;\n    cpuid;\n        mov dword ptr [VMBranding+0], ebx;  // Get the VM branding string\n        mov dword ptr [VMBranding+4], ecx;\n        mov dword ptr [VMBranding+8], edx;\n  end;\n  VMBranding[12] := #0;\n\n  Result := CompareText(String(VMBranding), 'Microsoft Hv') = 0;\nend;\n\n```\nRelevant links:\n\n",
      "votes": "5",
      "user": "0xC0000022L",
      "time": "Apr 17, 2013 at 4:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In addons on the answers post before, cuckoosandbox implements few yara rules for vm detection:\n\nhttps://github.com/cuckoobox/cuckoo/blob/1884b5579ff8e053b3d4a8523a5da576eee43552/data/yara/binaries/vmdetect.yar\n\n",
      "votes": "4",
      "user": "Tuan Ha",
      "time": "Oct 24, 2015 at 15:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "asheeshr",
          "text": "Please add a short description about the link and/or the relevant matter. Link-only answers are not considered answers.",
          "time": null
        }
      ]
    },
    {
      "content": "You can find common tricks in cuckoo sandbox repository.\n\n",
      "votes": "4",
      "user": "Tuan Ha",
      "time": "Oct 24, 2015 at 15:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "asheeshr",
          "text": "Please add a short description about the link and/or the relevant matter. Link-only answers are not considered answers.",
          "time": null
        }
      ]
    },
    {
      "content": "Just as a kind of related note, but side-stepping the actual question a bit. There was a presentation at the VB conference last year (2013) in Berlin, about a KVM-based modified hypervisor. It is called CXPInspector and the presentation they gave (the first one in the tech stream) can be found here.\n\nHere's the corresponding thesis/dissertation (237 pages) and here's a related somewhat shorter paper (though not about CXPInspector directly).\n\nThe method makes use of newer processor features. The presentation gives a nice overview. Basically the only conceivable attack - aside from those based on flaws in the CPU and the hypervisor implementation - would be a timing attack. And even though many machines these days are fast, that's not exactly a very reliable method. It used to be, but these days it's gambling, at best.\n\n",
      "votes": "3",
      "user": "0xC0000022L",
      "time": "Jan 31, 2014 at 4:18",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Here is a collection of anti-sandbox/vm/debugger techniques implemented in a open source program which will give you a clear idea how to detect virtualization: https://github.com/LordNoteworthy/al-khaser.\n\nHere are the list of supported techniques:\n\n",
      "votes": "3",
      "user": "Noteworthy",
      "time": "Mar 6, 2017 at 22:11",
      "is_accepted": false,
      "comments": []
    }
  ]
}