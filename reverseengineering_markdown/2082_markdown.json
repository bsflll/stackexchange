{
  "title": "Debugger hiding plugin for WinDbg?",
  "link": "https://reverseengineering.stackexchange.com/questions/2082/debugger-hiding-plugin-for-windbg",
  "content": "Are there any good WinDbg hiding plugins like OllyDbg's? Or a plugin that's open source and still in development for this purpose?\n\n",
  "votes": "14",
  "answers": 4,
  "views": "7k",
  "tags": [
    "debuggers",
    "anti-debugging",
    "windbg"
  ],
  "user": "shebaw",
  "time": "May 23, 2013 at 12:41",
  "comments": [],
  "answers_data": [
    {
      "content": "I don't think such a plugin currently exists. However, if you're willing to implement a minimal windbg backend, you could extend uberstealth, which unfortunately I've never come to finish as a project (actually I think anti-debugging is a dead anyway, but that's another story ;-)).\nIt's essentially IDAStealth, but with all debugger specific functionality factored out (there's a backend for IDA and Olly2). All you'd have to do is write a backend for Windbg (and fix the remaining bugs, I could help you with that though), all other code is debugger independent.\nShould be less than a few dozen lines of code.\n\n",
      "votes": "4",
      "user": "newgre",
      "time": "May 23, 2013 at 11:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "mrexodia",
          "text": "Such a plugin indeed does not exist, but you don't need one either. See my answer (posting this comment in case the accepted answer doesn't change).",
          "time": null
        }
      ]
    },
    {
      "content": "I am not sure if plugins exist but you can write simple scripts like below to hide WinDbg on case to case basis.\n\n",
      "votes": "6",
      "user": "0xC0000022L",
      "time": "May 30, 2013 at 13:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "ah, but anti-debugging is fraught with special cases - you can't arbitrarily zero the DebugPort, for example, without first checking the PID, in case the process is being debugged intentionally.  Anyway, see my \"Ultimate\" Anti-Debugging Reference (pferrie.host22.com/papers/unp2011.htm) for a long list of tricks that you'd need to support (and some that you can't because they are direct kernel-returned data).",
          "time": null
        },
        {
          "user": "Till",
          "text": "@peterferrie awesome reference, thanks for sharing!",
          "time": null
        },
        {
          "user": "blabb",
          "text": "@peterferrie thanks for the comment i wrote case to case basis just because i understand that there are lot of special cases anyway i have read your paper earlier quiet nice collection of antidebug tricks",
          "time": null
        }
      ]
    },
    {
      "content": "You can use ScyllaHide. There are plugins for many debuggers, but it is also possible to use InjectorCLI.exe to inject ScyllaHide into any process. Here are the steps (for a 32 bit process, if you want a 64 bit process, replace every x86 with x64):\n\nWithout using ScyllaHide:\n\n\n\nWhen using ScyllaHide:\n\n\n\nThis process works for any debugger, if you feel like it you can even make an actual plugin for WinDbg. It should be quite easy.\n\nI just added an option to inject to a process by process id. You can do this with:\n\n```\nInjectorCLIx86.exe pid:1234 HookLibraryx86.dll\n\n```\n",
      "votes": "6",
      "user": "mrexodia",
      "time": "May 31, 2017 at 14:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Kevin",
          "text": "While this does seem to work for usermode applications, I have to test the associated TitanHide (github.com/mrexodia/TitanHide/blob/master/README.md) for Kernel mode. ScyllaTest reports NtQuerySystemInformation_KernelDebugger: DETECTED",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "Yes, ScyllaHide (and TitanHide for that matter) only work on usermode applications.",
          "time": null
        }
      ]
    },
    {
      "content": "Here you can download QEMU virtual machine with embedded WinDbg stub:\nhttps://github.com/ispras/qemu/releases\nhttps://github.com/ispras/qemu/tree/windbg\n\nThis stub allows debugging with WinDbg without enabling Windows debugging mode.\n\n",
      "votes": "2",
      "user": "Pavel Dovgalyuk",
      "time": "May 31, 2017 at 13:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}