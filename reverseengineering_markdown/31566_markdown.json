{
  "title": "Linux Kernel for embedded platform - Available Sources but no configuration",
  "link": "https://reverseengineering.stackexchange.com/questions/31566/linux-kernel-for-embedded-platform-available-sources-but-no-configuration",
  "content": "I am trying to recompile the kernel for the Redmi Note 4 (MTK). I have successfully obtained a copy of the stock, pre-compiled kernel, and a variant of sources that seems to coincide quite well with the device's functionality. The kernel sources come from another device for which MediaTek has released the configuration (or rather, a configuration), but despite compiling the default provided configuration (which is presumably incompatible with my device), it will not boot with the newly compiled kernel. From the behavior, it seems that it raises a kernel panic and reboots.\n\nUnfortunately, I do not have a UART connection to the device, so I'm trying to do this blind. My question is, what would be the best approach to attempting to reverse engineer the configuration used for my device?\n\nThe steps I've considered include:\n\nWhile I am familiar with C and Linux, it is my first adventure of this kind.\n\nEDIT: The stock kernel seems to be monolithic, as the OS is Android 6.0, and according to this link, it is not a requirement to support modules pre-Android 8.0. I could also not find any evidence of modules in the storage of the device.\n\nEDIT: Among the experiments I've done,\n\n",
  "votes": "3",
  "answers": 1,
  "views": "149",
  "tags": [
    "decompilation",
    "c",
    "kernel-mode"
  ],
  "user": "KiralyCraft",
  "time": "May 6, 2023 at 20:37",
  "comments": [
    {
      "user": "Mega Tonnage",
      "text": "Maybe the variant of the sources is not close enough, a panic is likely a missing driver, possibly for storage. Is the compiled kernel modular or monolithic? .. in any case, trying to determine which drivers it includes would be my first stop.",
      "time": null
    },
    {
      "user": "KiralyCraft",
      "text": "That might be a possibility, indeed. It looks like the pre-compiled kernel is monolithic, as I couldn't find any evidence of modules, and that the stock OS runs a pre-Android 8.0 OS (Android 6 to be exact), which is not mandatory to support modules, according to source.android.com/docs/core/architecture/kernel/â€¦  The kernel I compiled is monolithic as well. I just remembered some details about the experiments I've done, I'll edit the question;",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You could try to compare the symbol tables for the custom kernel and the official kernel either by looking at the system.map file or get it from the running system via /proc/kallsyms (might need to disable some restrictions for reading that file as root).\n\nThis won't give you a config file directly, but you could maybe indirectly figure out the required config options. But as mentioned in the comments there could even be a difference beyond that, since e.g. source code for drivers will simply be different between those devices. So maybe you'll never get a working kernel without the correct source.\n\nIf the kernel was compiled with a specific option (seems to be the case at least for some Android devices) you could extract the config file with this script:\n\nhttps://github.com/torvalds/linux/blob/master/scripts/extract-ikconfig\n\n",
      "votes": "2",
      "user": "tripleee",
      "time": "Mar 10, 2023 at 15:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "KiralyCraft",
          "text": "This is definitely a good approach; Unfortunately, the kernel doesn't have ikconfig enabled, but comparing the symbols is brilliant - I will give this a try in the upcoming days and report back.",
          "time": null
        }
      ]
    }
  ]
}