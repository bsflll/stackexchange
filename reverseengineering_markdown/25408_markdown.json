{
  "title": "Bypassing IsDebuggerPresent [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/25408/bypassing-isdebuggerpresent",
  "content": "I am currently trying to attach a debugger to a program with a callback for IsDebuggerPresent. Normally, i would patch the program to pass over this check, but patching the program is not an option. How would I go about getting a debugger attached so dynamic analysis is possible?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "370",
  "tags": [
    "debugging"
  ],
  "user": "nathan",
  "time": "4 years ago",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE! For starters, what debugger is this? Your question is unclear. Mentioning IsDebuggerPresent indicates that this is on Windows, but even that may be a fallacy on my part. So what debugger, what OS? If this is IsDebuggerPresent on Windows, it's implemented by checking for some value in the PEB, IIRC. So presumably you could attempt to set a hardware breakpoint there and be notified whenever some code access this particular piece of data.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Why is \"patching the program is not an option.\"? can you use breakpoints after attaching?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "as I understand your question, if your binary doesn't have a packer / protector, and you can't use any way to hook the original source, try using a kernel hooke like TitanHide, and observe the behavior, now if not having anything so complicated check the sides of your debugger look for flags and find the \"zero flag\", and change your return, this is something simple, but if you specify better I can give you another answer, good luck.\n\n",
      "votes": "1",
      "user": "Happy",
      "time": "Jul 3, 2020 at 17:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}