{
  "title": "Reverse getline(cin, text)",
  "link": "https://reverseengineering.stackexchange.com/questions/22122/reverse-getlinecin-text",
  "content": "I'm trying to solve a crackme that was made in C++, and I was able to\n\"recreate\" a function call, through the library calls the program made. Here's the piece of code that I'm trying to reverse:\n\n```\nstring text;\ngetline(cin, text);\n\n```\nAnd here's the asm equivalent (getline only):\n\n```\nlea    rax,[rbp-0x1c0]\nmov    rsi,rax\nmov    edi,0x6020c0\ncall   0x400d10 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>\n\n```\nWhat is happening with the variable text (Meaning: I can't seem to print the place in memory in which the raw characters are stored)?\nI'm using print *(char **)<register/memory> to try to find it. Where are the raw characters of this string stored after this operation? How to I find it and how to I print them?\n\nI'm using gdb.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "949",
  "tags": [
    "linux",
    "c++",
    "gdb",
    "crackme",
    "assembly"
  ],
  "user": "unc4nny",
  "time": "Nov 23, 2019 at 10:18",
  "comments": [],
  "answers_data": [
    {
      "content": "use print &text\nor use info locals   \n\n```\n:\\>dir /b & type cin.cpp & g++ -g cin.cpp  & echo ========= & gdb -q a.exe\ncin.cpp\n#include <iostream>\n#include <string>\nusing namespace std;    \nint main (void) {\n    string text;\n    getline(cin,text);\n}=========\nReading symbols from a.exe...done.\n(gdb) break main\nBreakpoint 1 at 0x4015cf: file cin.cpp, line 6.\n(gdb) r\nBreakpoint 1, main () at cin.cpp:6\n6           string text;\n(gdb) print &text\n$1 = (std::__cxx11::string *) 0x22fec8  <<<<<<\n(gdb) print text\n$2 = \"\"ÿ\\\"\\000lí|w\", '\\000' <repeats 12 times>,<repeats 11 times>...\n(gdb) ni till getline is es=xecuted\n0x004015e9      7           getline(cin,text);\n(gdb)\nhello cin where are you hiding\n6           string text;\n(gdb) print text\n$3 = \"hello cin where are you hiding\"\n(gdb) x/s $1\n0x22fec8:       \"ès2\"\n(gdb) x/s *(int *)$1\n0x329ae8:       \"hello cin where are you hiding\"\n(gdb) x/s *(int *)&text\n0x329ae8:       \"hello cin where are you hiding\"\n(gdb) info locals\ntext = \"hello cin where are you hiding\"\n\n```\n64 bit mingw64 on windows 10 (first four arguments are passed in ecx,edx,r8,r9. rest in stack)\n\nsource compiled without -g\n\n```\ncat.exe gppcpp.cpp\n#include <iostream>\n#include <string>\nusing namespace std;\nint main(void) {\n        string text;\n        getline(cin, text);\n}\n\n```\ncompiled without debug info\n\n```\ng++ gppcpp.cpp\n\na.exe\n555\n\n```\ndisassembling function main using a file command.txt which contains the following commands\n\n```\ncat.exe commands.txt\nset disassembly-flavor intel\nset print asm-demangle on\nbreak main\nr\ndisassemble $pc\nq\n\n```\ndisassembly of main\n\n```\n:\\>gdb -batch -x commands.txt a.exe\n\nBreakpoint 1 at 0x401563\n[New Thread 8964.0x2c38]\n\nBreakpoint 1, 0x0000000000401563 in main ()\nDump of assembler code for function main:\n   0x0000000000401550 <+0>:     push   rbp\n   0x0000000000401551 <+1>:     push   rbx\n   0x0000000000401552 <+2>:     sub    rsp,0x48\n   0x0000000000401556 <+6>:     lea    rbp,[rsp+0x80]\n   0x000000000040155e <+14>:    call   0x401710 <__main>\n=> 0x0000000000401563 <+19>:    lea    rax,[rbp-0x60]\n   0x0000000000401567 <+23>:    mov    rcx,rax\n   0x000000000040156a <+26>:    call   0x401658 <std::__cxx11::basic_stringxxxxxxxxxxxx\n   0x000000000040156f <+31>:    lea    rax,[rbp-0x60]\n   0x0000000000401573 <+35>:    mov    rdx,rax\n   0x0000000000401576 <+38>:    mov    rcx,QWORD PTR [rip+0x2d93]\n   0x000000000040157d <+45>:    call   0x401638 <std::basic_istream<char, std::cxxxxxxxxxxxx\n   0x0000000000401582 <+50>:    lea    rax,[rbp-0x60]\n   0x0000000000401586 <+54>:    mov    rcx,rax\n   0x0000000000401589 <+57>:    call   0x401650 <std::__cxx11::basic_string<char,xxxxxxx\n   0x000000000040158e <+62>:    mov    eax,0x0\n   0x0000000000401593 <+67>:    jmp    0x4015af <main+95>\n   0x0000000000401595 <+69>:    mov    rbx,rax\n   0x0000000000401598 <+72>:    lea    rax,[rbp-0x60]\n   0x000000000040159c <+76>:    mov    rcx,rax\n   0x000000000040159f <+79>:    call   0x401650 <std::__cxx11::basic_string<char,xxxxxxxxxxxx\n   0x00000000004015a4 <+84>:    mov    rax,rbx\n   0x00000000004015a7 <+87>:    mov    rcx,rax\n   0x00000000004015aa <+90>:    call   0x402ae0 <_Unwind_Resume>\n   0x00000000004015af <+95>:    add    rsp,0x48\n   0x00000000004015b3 <+99>:    pop    rbx\n   0x00000000004015b4 <+100>:   pop    rbp\n   0x00000000004015b5 <+101>:   ret\nEnd of assembler dump.\nA debugging session is active.\n\n        Inferior 1 [process 8964] will be killed.\n\nQuit anyway? (y or n) [answered Y; input not from terminal\n\n```\nthe second argument is @rdx\nlets debug step few times until $rdx is initialized\nsave it and execute the getline and retrieve the cin from saved variable  \n\n```\n:\\>gdb -q a.exe\nReading symbols from a.exe...done.\n\n(gdb) break main\nBreakpoint 1 at 0x401563\n\n(gdb) r\nStarting program: F:\\src\\gppcpp\\a.exe\n[New Thread 6832.0x13c4]\nBreakpoint 1, 0x0000000000401563 in main ()\n\n(gdb) ni 6\n0x000000000040157d in main ()\n\n(gdb) set print  asm-demangle on\n\n(gdb) x/i $pc\n=> 0x40157d <main+45>:\n    callq  0x401638 <std::basic_istream<char, xxxxxxxxxx\n\n(gdb) print $rdx\n$1 = 6422000\n\n(gdb) ni\nhello uncanny the cin is at saved variable $1\n\n0x0000000000401582 in main ()\n\n(gdb) x/s *(char **)$1\n0x143a60:       \"hello uncanny the cin is at saved variable $1\"\n(gdb)\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Sep 15, 2019 at 20:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "unc4nny",
          "text": "Hey man, I'm new to reverse engineering so I'm kinda lost in your answer. The crackme I'm trying to solve is not compiled with the -g flag, so I don't have access to variable names and whatnot. The C++ code is what I found to be the representation of the asm code, through the library's calls, so how would I do that in that situation? Another thing is that your answer, IMHO, is really confusing for someone who's new, like me. :( Could you explain what is happening here? Thx a lot!",
          "time": null
        },
        {
          "user": "user202729",
          "text": "This answer relies on the internal structure of std::string. GDB should have built in pretty printing of STL structure, that should be used instead.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "removed comments and added content to answer",
          "time": null
        }
      ]
    }
  ]
}