{
  "title": "How to decompile this assembly code? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/11326/how-to-decompile-this-assembly-code",
  "content": "How can I convert the following IDA Pro generated disassembly (assembly language) into a higher level language?\n\n```\n...\nmov edx, Var1\nmov ecx, Var2\nmov eax, edx\nimul ecx\nmov edx, eax\nimul edx, eax\nmov Var3, ecx\n...\n\n```\nI am trying to write a detailed pseudo code describing the function of the provided assembly snippet.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "8k",
  "tags": [
    "ida",
    "assembly",
    "decompilation"
  ],
  "user": "Rochelle",
  "time": "9 years ago",
  "comments": [
    {
      "user": "w s",
      "text": "Possible duplicate of Translate ASSEMBLY to C",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Please note that there is no general 1:1 relation between assembly code and a higher level language, especially if the assembly was crafted manually. And even for compiled code there may be no good translation if the code was heavily optimized.\n\nAlso, note that reverse engineering is not about translating assembly to higher level language, it's about figuring out what's going on. For example, a year ago, someone asked this series of questions [1] [2] [3]. That guy meticuously translated a lot of assembly to C and wasn't any wiser; in the end, he could have saved himself 2 months if he had been able to recognize the RSA algorithm from the code.\n\nOf course, a high level language implementation of something might be easier to read than assembly, so translating to high level might be a part of the work, but it's not the biggest part in most cases.\n\nThat said, as you have only 2 opcodes, one of which is mov which is the equivalent to an assignment:\n\n```\nmov edx, Var1           ; edx=Var1\nmov ecx, Var2           ; ecx=Var2\nmov eax, edx            ; eax=edx (=Var1)\nimul ecx                ; eax=eax*ecx (=Var1*Var2)\nmov edx, eax            ; edx=eax (=Var1*Var2)\nimul edx, eax           ; edx=edx*eax (=(Var1*Var2)^2)\nmov Var3, ecx           ; var3=ecx (=Var2)\n\n```\nSo, your code calculates (Var1*Var2)^2, but then assigns Var2 to Var3, not the calculated result. \n\nIf this was a homework question, i'd assume your teacher wanted to see if you're paying attention to detail. Also, it shows that there's no good translation to a high level language, because you don't generally calculate anything in them without using the result. Although, in C, you could have written\n\n```\n(Var1*Var2)*(Var1*Var2);    // note the expression without an assignment\nVar3=Var2;\n\n```\nbut your compiler would normally throw away the first line of this.\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "This is very true \"... reverse engineering is not about translating assembly to higher level language, it's about figuring out what's going on\".",
          "time": null
        },
        {
          "user": "Rochelle",
          "text": "That makes a lot of sense, could you also help me write a C language snippet for reverseengineering.stackexchange.com/questions/11331/â€¦",
          "time": null
        }
      ]
    },
    {
      "content": "I believe what you need is a decompiler.\n\nSnowman is an example of a free decompiler which integrates easily (can be installed as a plugin) with IDA.\n\n",
      "votes": "1",
      "user": "iam",
      "time": "Nov 14, 2015 at 21:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "w s",
          "text": "And if you don't have IDA, there is retdec.com/decompilation which supports formats ELF, PE and  COFF and Intel x86, ARM, ARM+Thumb, MIPS, PIC32 and  PowerPC  architectures. Note that actual decompilation process is not on your computer but on theirs, and if you are dealing with somewhat secret code you shouldn't use it.",
          "time": null
        }
      ]
    }
  ]
}