{
  "title": "Bypassing av signature with Hex editing",
  "link": "https://reverseengineering.stackexchange.com/questions/16955/bypassing-av-signature-with-hex-editing",
  "content": "I recently started studying on bypassing AV by finding an AV signature on nc.exe (NetCat) and changing it to see how it works. I have already found the place of signature with splitting method. Then, I should open nc.exe with a hex editor and change the Sig. \n\nBut, here is what it look like:\n\n\n\nAnd the file will get corrupted by editing it (adding or removing bytes).\n\nMy question is: What should I do for editing in this situations? What should I know for a successful binary editing?\n\nIf I get this whole wrong tell me what should I be looking for.\n\nNote: the signature is in .bss and .text section of file\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "pe",
    "hex",
    "binary-editing"
  ],
  "user": "0_o",
  "time": "Dec 12, 2017 at 6:54",
  "comments": [
    {
      "user": "xvk3",
      "text": "This would be more on topic at Software Recommendations SE.",
      "time": null
    },
    {
      "user": "0_o",
      "text": "@Will i think software doesn't matter here, just the concept and the way you do it",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'd recommend using something such as OllyDbg or IDA PRO rather than just plain HexEditor since just using HexEditor you've got no idea what section of the PE you are editing. For example, you could be editing the .text PE section and editing an essential part of the program rather than .idata or .data section which just store variable data.\n\nSo, few methods an AV could use for detection of malware are:\n\nBypassing Method 1:\n\nBy randomly HexEditting you would manage to avoid AV detection method 1 (see above) but method 2 and 3 would detect the malware still. If you didn't overwrite anything essential for your program to execute.\n\nBypassing Method 2:\n\nRewrite a simple instruction or make a JMP to code-cave and put overwritten code there and JMP back to next instruction. So, you would be executing exact same code but different flow and .text section checksum would be different.\n\nBypassing Method 3:\n\nTo be able to bypass method 3 - You would need to add junk code between each call or add a JMP to a code cave and have the instruction set there. So, the code would still be the same but byte signature would be completely different.\n\nYour best to learn about assembly language and learn how to use IDA PRO or OllyDbg and learn about patching programs before you move onto something more complex like bypassing AV.\n\n",
      "votes": "3",
      "user": "Paul",
      "time": "Dec 11, 2017 at 14:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}