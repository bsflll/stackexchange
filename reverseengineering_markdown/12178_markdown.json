{
  "title": "Virtual Method that returns <this>?",
  "link": "https://reverseengineering.stackexchange.com/questions/12178/virtual-method-that-returns-this",
  "content": "In my vtable i found a method that simply returns ecx.\nNow im confused as to what this tries to accomplish ? \nIs this a known useful sequence ?\n\n",
  "votes": "2",
  "answers": 3,
  "views": "178",
  "tags": [
    "ida",
    "c++"
  ],
  "user": "Blob31",
  "time": "Mar 8, 2016 at 17:37",
  "comments": [],
  "answers_data": [
    {
      "content": "The C++ compiler of Visual Studio uses ecx as the default register for this pointer, a virtual method which returns ecx then actually returns this or *this. For example, you can test the following code:\n\n```\nclass A\n{\npublic:\n  virtual A getmyself() { return *this; }\n  virtual A* getmyselfpointer() { return this; }\n}\n\n```\nThe generated assembly code for getmyself (the same for getmyselfpointer) is\n\n```\ngetmyself:\n  mov     eax, ecx\n  retn\n\n```\nThis detail is not true for clang or gcc since they do not use ecx as default register for this.\n\n",
      "votes": "1",
      "user": "Ta Thanh Dinh",
      "time": "Mar 9, 2016 at 16:30",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "It could be a method that at a high-level is intended to return a covariant object pointer.\n\n",
      "votes": "0",
      "user": "Jason Geffner",
      "time": "Mar 8, 2016 at 17:59",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If it would be ARM I'd say that it is constructor or destructor (see this answer for more details). As a part of more general pattern I had seen such a things in a multi-platform applications where the main code of the function was #ifdef'ed out and only return value was left for compatibility with other platforms/build configurations.\n\nDid you see calls to this function?\n\n",
      "votes": "0",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}