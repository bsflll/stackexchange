{
  "title": "Mips disassembler",
  "link": "https://reverseengineering.stackexchange.com/questions/13656/mips-disassembler",
  "content": "So, I am looking for disassembler code for MIPS commands, for example: if the program gets word of command like 3c1d8010, I want to get the name of the command and the registers, which it uses: lui sp,0x8010\n\nexamples: \n25080268       addiu t0,t0,616\n40806800       mtc0  zero,$13\n\nI know, that it is possible to write by myself, but maybe somebody has done it already. \n\nMany thanks in advance!\n\n",
  "votes": "1",
  "answers": 3,
  "views": "4k",
  "tags": [
    "disassemblers",
    "mips"
  ],
  "user": "Yury Gelman",
  "time": "Oct 6, 2016 at 20:30",
  "comments": [
    {
      "user": "Jongware",
      "text": "I typed your title into Google, and while the first hit was a commercial product, the second one has the description \"mips-dasm is a mips disassembler written in C. It accepts lines of 32-bit numbers that it decodes into their MIPS32 instruction equivalent, through stdin or input file.\". On github, so free & with source.",
      "time": null
    },
    {
      "user": "user202729",
      "text": "There's also an option of using objdump, see linux - How do I disassemble raw MIPS code? - Stack Overflow",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Try capstone.\nThey have a good documentation with samples like the following:\n\n```\n # test1.py\n from capstone import *\n\n CODE = b\"\\x55\\x48\\x8b\\x05\\xb8\\x13\\x00\\x00\"\n\n md = Cs(CS_ARCH_X86, CS_MODE_64)\n for i in md.disasm(CODE, 0x1000):\n     print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n\n```\nOutput sample:\n\n```\n$ python test1.py\n\n0x1000: push    rbp\n0x1001: mov rax, qword ptr [rip + 0x13b8]\n\n```\nAccording to the docs they support MIPS and of course they have code on GitHub.\n\n",
      "votes": "3",
      "user": "w s",
      "time": "Oct 7, 2016 at 4:10",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you want to have quick access without installing anything, try The online disassembler.\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Oct 7, 2016 at 19:02",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "you can try radare2    \n\n```\nE:\\R2>rasm2.exe -a mips -e -d -\n25080268\naddiu t0, t0, 0x268\n40806800\nmtc0 zero, t5, 0\n\n```\nuse mips.gnu to get the output you queried\n\n```\nE:\\R2>rasm2.exe -a mips.gnu -e -d -\n25080268\naddiu t0, t0, 616\n40806800\nmtc0 zero, $13\n\n```\nrasm2 -h should show the switches \n\n```\n-a = arch (use -L to list the numerous architectures it supports)\n-e = to tell that the input is Big-Endian\n-d = Disassemble \n-  = to provide input from Stdin\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Oct 7, 2016 at 8:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}