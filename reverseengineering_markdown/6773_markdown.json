{
  "title": "Unpacking a backdoor program for studying",
  "link": "https://reverseengineering.stackexchange.com/questions/6773/unpacking-a-backdoor-program-for-studying",
  "content": "I wanted to learn something about unpacking malware manuelly and found the following link:\n\n```\n  writequit.org/blog/?p=165.\n\n```\nAs you can see, the malware in that example begins with the PUSHAD instruction. (I thought it would be a good link because 2 days ago I started to analyze a malware which begins with the same PUSHAD instruction. It was also packed with UPX like the malware in that example of the given link)\n\nSo, I downloaded the malware of the example for testing purpose.\n\nWhat I did:\n\nWhen I step into PUSHAD instruction(pressing F7), double-clicking ESP in combination with \"Following in Dump\", then I choose the first 4 bytes of the first row (ESP address) in the hex window. Then I go to Breakpoint -> Hardware, on access -> Dword. Then F9. \n(I hope I could explain it right but you can be sure that I did exactly the same things as in the example of the link)\n\nMy problem:\n\nThe first thing: \n\nAfter I click ESP -> \"Follow in Dump\" , the 4 bytes of the first row looks like this: 00 00 00 00.\n(So, only zeros. Not the same like in the example which was 08 02 91 7c as you can see)\n\nThe second thing:\n\nWhen I choose the 00 00 00 00 -> Breakpoint -> Hardware, on access -> Dword, then I let it run (F9) but the malware does not run to a location where I can find POPAD or JMP .... as in the example. \nIn my case, after all that it runs to a location (especially, running ends in a LEAVE instruction) with the following:\n\n```\n   ...\n   ...\n   LEA EAX, DWORD PTR SS:[EBP-3C]\n   PUSH EAX\n   CALL DWORD PTR DS: [<&ntdll.RtlRaiseException>]\n   LEAVE                                             <----- here, it ends\n   RETN 10\n   MOV DWORD PTR SS: [EBP-40], EAX\n   ...\n   ...\n\n```\nSo, even if I scroll hundreds of lines upwards or downwards, I could not find a POPAD instruction. \n\nMy question:\n\nWhy it is so? Do I need to configure something in the ollydbg settings ? \n\nI hope someone can help me in that case, because although I do the same steps as in the example, I have different results.\n\nbest regards, \n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "malware",
    "unpacking"
  ],
  "user": "user3097712",
  "time": "Dec 6, 2014 at 21:41",
  "comments": [
    {
      "user": "PhoeniX",
      "text": "0. What OS do you have on research machine? 1. Restart the Olly session and you should break on 0x424231. 2. Note the EDI register, before execution pushed. 3. Do you see, that EDI has 7c910208? 4. In addition, scroll down from 0x424231 and you should find popad at 0x424386.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Your mistake is that you put the breakpoint while being on the PUSHAD instruction (meaning it wasn't executed yet).\n\nI just unpacked the file, and this is how you do it:\n\nSimply do what you did before, and end up here:\n\n\n\nNow, you got everything pushed, and the decompression can start.\n\n\n\nNow, you've arrived to the point where the stack looks like:\n\n```\n## original ESP\n## some register's value\n## some register's value\n## some register's value\n## ...\n## you are here\n\n```\nNow, on the you are here point, the decompressor uses the stack, and it grows downwards (to lower addresses).\nWhen it is done using it, it clears the stack, and reaches again your original ESP point, where the popad instruction writes, and which is what causes the breakpoint to hit.\n\nPretty much self-explanatory.\nYou'll end up here after running:\n\n\n\nDone, you found the OEP!\n\n\n\nNow you can dump. I used OllyDumpEx:\n\n\nSimply click Get EIP as OEP while being on the PUSH EBP instruction, and then dump: (also write down the EIP1)\n\n\n\nNow, you want to fix the IAT to properly see the used APIs!\nDo not close Olly and don't step, just dump and leave it as is.\n\nOpen ImportREC, pick the process, and press IAT AutoSearch, then Get Imports.\n\n\n\nSometimes it may not find the OEP automatically, so just take the OEP you found before1, put it there, and click IAT AutoSearch and then Get Imports again, and then dump.\n\nNow you can analyze the file.\n\nThis is how it looks like when manually unpacked:\n\n\n\nAnd this is how the UPX unpacked (upx -d) version looks like:\n\n\n\n",
      "votes": "6",
      "user": "rev",
      "time": "Feb 14, 2015 at 18:11",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As you mentioned, UPX was used and it can be unpacked by UPX itself see this example.\nTo address scrolling to find the entry point, its because you are in a different module loaded by the binary. You're probably getting into ntdll.dll module disassembly.\n\n",
      "votes": "0",
      "user": "RoraÎ–",
      "time": "Dec 12, 2014 at 22:04",
      "is_accepted": false,
      "comments": [
        {
          "user": "PhoeniX",
          "text": "the question clearly stated that the user wanted to unpack manually so the tool for unpacking is not really relevant.",
          "time": null
        }
      ]
    }
  ]
}