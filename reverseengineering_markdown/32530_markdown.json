{
  "title": "How to make a plugin python function available to IDA's console?",
  "link": "https://reverseengineering.stackexchange.com/questions/32530/how-to-make-a-plugin-python-function-available-to-idas-console",
  "content": "I want to have utility functions shared between all databases, for example:\n\n```\nfrom idautils import *\nfrom idaapi import *\nfrom idc import *\nfrom ida_name import *\n\ndef FindFunctionImpl(FunctionNameToFind):\n    for SegmentAddress in Segments():\n        for FunctionAddress in Functions(SegmentAddress, get_segm_end(SegmentAddress)):\n            FunctionName = get_func_name(FunctionAddress)\n            DemangledName = get_long_name(FunctionAddress)\n            if DemangledName.find(FunctionNameToFind) != -1:\n                print(f\"0x{FunctionAddress:x}:{DemangledName}\")\n\nclass ExamplePlugin(idaapi.plugin_t):\n    flags = idaapi.PLUGIN_DRAW\n    comment = \"\"\n    help = \"\"\n    wanted_name = \"Example\"\n\n    def init(self):\n        print(\"ExamplePlugin initialized\")\n        global FindFunction = FindFunctionImpl\n        return idaapi.PLUGIN_KEEP # On garde le plugin chargé en mémoire\n\n    def run(self, arg):\n        return\n\n    def term(self):\n        pass\n\ndef PLUGIN_ENTRY():\n    return ExamplePlugin()\n\n```\nBut it doesn't want to let me use neither FindFunction nor FindFunctionImpl from the console. Says \"name isn't defined\" in the console. It prints in the console that the plugin is initialized.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "202",
  "tags": [
    "idapython",
    "ida-plugin"
  ],
  "user": "KulaGGin",
  "time": "Nov 28, 2023 at 14:55",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "Put your function definitions inside the idapythonrc.py file that IDAPython executes on startup. This is one of the installation methods of the minsc plugin that I maintain which is a library that provides something similar to what you're starting to do (arizvisa.github.io/ida-minsc/…). The idapythonrc.py method for initiailzing the Python interpreter is also documented at the Hex-Rays blog (hex-rays.com/blog/…).",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@AliRizvi-Santiago please add this as an answer",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "Nov 28, 2023 at 16:46",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can add a path to your plugin script in one of the plugins.list files, this will tell IDA to load the plugin everytime you open an IDB. You can run plugins from Edit/Plugins menu.\n\nIt's a shame HexRays haven't put up any docs on that to this day, but you can find a decent explanation in Sark's reference.\n\n",
      "votes": "1",
      "user": "mimak",
      "time": "Nov 28, 2023 at 15:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "plugins.list is not used by IDA but seems to be a Sark feature.",
          "time": null
        }
      ]
    }
  ]
}