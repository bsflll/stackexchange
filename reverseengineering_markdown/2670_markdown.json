{
  "title": "ea_t datatype in IDA API",
  "link": "https://reverseengineering.stackexchange.com/questions/2670/ea-t-datatype-in-ida-api",
  "content": "In IDAPython, what is the ea_t data type? It is used in the set_debug_name() function as follows:\n\n```\nbool set_debug_name(ea, name)\n\n```\nIf I have a 64-bits address, can it be represented by the ea_t data type ?\n\nFor example, in this Python script:\n\n```\nline = \"ffffffff81000000 T startup_64\"\naddr = int(line[:16],16)\nname = line[19:]\nidaapi.set_debug_name(addr,name)\n\n```\nI receive this error while executing the IDA Python script:\n\n```\nTypeError: Expected an ea_t type\n\n```\nfrom IDA Pro:\n\n```\nPython> from idaapi import *\nPython> line=\"ffffffff81000000 T startup_64\"\nPython> addr=int(line[:16],16)\nPython> name=line[19:]\nPython> print \"addr: %x\" %(addr)\naddr: ffffffff81000000\nPython> print name\nstartup_64\nPython> set_debug_name(addr,name)\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"X\\IDA Pro\\IDA61\\python\\idaapi.py\", line 23612, in set_debug_name\n    return _idaapi.set_debug_name(*args)\nTypeError: Expected an ea_t type\n\n```\nAre the idaapi.py files different for 32-bits and 64-bits IDA Pro versions?\n\nI am using a 32-bits version of IDAPro.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida",
    "ida-plugin"
  ],
  "user": "Neon Flash",
  "time": "Aug 22, 2013 at 12:36",
  "comments": [],
  "answers_data": [
    {
      "content": "From pro.h:\n\n```\n#ifdef __EA64__\n  typedef uint64 ea_t;      // effective address\n\n```\nYes also in python it can represent a 64-bit address\n\n32-bit and 64-bit files are the same (they're is only 1 file)\n\nThe following very basic script works fine for me on notepad.exe using 64-bit IDA;\n\n```\nPython>from idaapi import *\nPython>ea = 0x0000000100003590L\nPython>hex(get_byte(ea))\n0x48\n\n```\n-edit-\n\nUpdated to show your script working in 32-bit IDA:\n\n```\nPython>print sys.version\n2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)]\nPython>line=\"ffffffff81000000 T startup_64\"\nPython>addr=int(line[:16],16)\nPython>type(addr)\n<type 'long'>\nPython>set_debug_name(addr,\"bla\")\nTrue\nPython>name=line[19:]\nPython>set_debug_name(addr,name)\nTrue\n\n```\nDid you try updating your idapython with a 'newer' version from Google code? http://code.google.com/p/idapython/\n\n",
      "votes": "3",
      "user": "ixje",
      "time": "Aug 22, 2013 at 14:31",
      "is_accepted": false,
      "comments": [
        {
          "user": "Neon Flash",
          "text": "Thanks. I have updated my question with the Python script and the error message that I receive. addr stores a 64 bit address.",
          "time": null
        },
        {
          "user": "Neon Flash",
          "text": "Please note that I am using 32 bit version of IDA, will it still work?",
          "time": null
        },
        {
          "user": "ixje",
          "text": "See my updated answer. For me your script also works in a 32-bit IDA instance",
          "time": null
        }
      ]
    },
    {
      "content": "Another way to force an integer to fit into an ea_t is to use the ea_pointer proxy class that was added in 6.8 (iirc). Similarly, you can do the same for things that are adiff_t or sval_t using the sval_pointer proxy class. (That ida_pro.py module from IDAPython contains a number of array and pointer types that you can use to clamp values to a certain range dictated by the database).\n\n```\nPython>meh = idaapi.ea_pointer()\nPython>meh.assign(-1)\nPython>meh.value()\n0xffffffff\n\n```\nAlthough, you're eating the (performance) cost of instantiating an object when you can just ensure that your integer always fits (signed or unsigned) within the database bit size.\n\n",
      "votes": "0",
      "user": "Ali Rizvi-Santiago",
      "time": "Jul 22, 2024 at 0:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}