{
  "title": "Custom UI buttons",
  "link": "https://reverseengineering.stackexchange.com/questions/4724/custom-ui-buttons",
  "content": "I just started using IDA and OllyDbg, although I am experienced developer but before this I was reverse engineering only Java and .Net code which is much more easy task comparing of what I need to do now.\n\nI have an application which has some buttons that are not accessible by Spy++ and WinInspector and all other tools that I tried. Spy++ sees only the selectorclass which is the whole panel where buttons are placed. I've managed to find where the WndProc of this selector is and even the method wich takes hwnd of SelectorControl from GetPropA method, but I have trouble identifying the click itself, so i don't know where the actual button is clicked and where there the app knows what exact button is clicked and what handler to use. \n\nI would like to ask for some tips which are maybe useful to know but are not known by newbies like me. What are strategies that can be used here?\n\nMaybe there are some ways to identify what framework was used, so I can play with that framework to know what to look for.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "ollydbg",
    "c++"
  ],
  "user": "Andriy Kizym",
  "time": "Jun 27, 2014 at 14:02",
  "comments": [
    {
      "user": "0xec",
      "text": "Your question covers a wide range of topics. As a starter examine the file through a PE identification tool like PEiD, Detect It Easy, RDG Packer Detector, exeinfope etc. That will give you some hints about the compiler & framework used.",
      "time": null
    },
    {
      "user": "Andriy Kizym",
      "text": "but i have ida pro and ollydbg, isn't it possible to do that with them?",
      "time": null
    },
    {
      "user": "Andriy Kizym",
      "text": "Detect it easy said Microsoft C/C++(2005)",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Run strings on it. Study the application behaviour.",
      "time": null
    },
    {
      "user": "nrz",
      "text": "In any decent debugger, hook OS API calls triggered by buttons and do backtrace when you're inside the OS API. See my answer to reverseengineering.stackexchange.com/questions/2717/â€¦ Learn assembly. Trace the code with single-stepping and/or breakpoints. Learn how assembly is related to C++. Modify the executable. Profit ;)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If the surrounding window seems to be a genuine window, but the individual buttons are not, I'd assume that\n\nSo, what we want to do is, start the program in a debugger, and use a breakpoint that is triggered when the mouse click occurs. The problem is, the window procedure gets called a lot of times, with all kind of messages, while you want to break on some of them (for example, WM_LBUTTONDOWN), but not on most of the others (for example, WM_PAINT).\n\nAfter placing a suitable breakpoint, run your application in the debugger, click the mouse, and hope the debugger actually hits the breakpoint. If it doesn't, check which mistake you've made.\n\nSingle-Step your code. It will probably fetch parameter 4 from the stack, which encodes the X and Y coordinates of the mouse, and compare these parameters to something - chances are, there's an array of structures that defines rectangles and jump addresses, and a loop that checks against each entry.\n\nOnce you've found that, you're finished.\n\nSounds too easy? It probably is, because, depending on your framework, the actual comparisons might be buried deeply in stuff that was a bunch of C++ classes in the original source, and there might be various calls, some of them indirect (in the case of C++ class methods) until you get to the \"interesting\" position.\n\n",
      "votes": "4",
      "user": "perror",
      "time": "Jun 27, 2014 at 19:57",
      "is_accepted": true,
      "comments": []
    }
  ]
}