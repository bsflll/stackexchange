{
  "title": "Patching an exe with NOPs [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/16526/patching-an-exe-with-nops",
  "content": "I'm new to reverse engineering. I started off here and I was working on the first file \"Muadib1.zip\". I replaced E842000000 with 909090909090 in a hex editor, but it seems like it broke the exe. Any ideas why it's not working?\n\nI also tried replacing the sequence with just 5 NOP's instead of 6 but the result was the same.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "qt"
  ],
  "user": "user1232138",
  "time": "7 years ago",
  "comments": [
    {
      "user": "Nordwald",
      "text": "an E8 call without prefixes should be 5 bytes on x86",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "is it ok if we revert the previous version of this post? It's a pity that we will close with such good answer from @Norwald",
      "time": null
    },
    {
      "user": "user1232138",
      "text": "Die.234567767654454443344444433445555555555555455544",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The problem is: you are smashing the stack.\n\nLets look at the function you want to patch:\n\n\n\nAs you can see, it pushes four parameters to the stack and calls USER32!MessageBoxA. A quick look at its documentation shows us, it expects four parameters and utilizes the standard WINAPI calling convention (also known as __stdcall). One thing in its description is crucial to this case:\n\n(You can also see the function does no cleanup itself, otherwise we could expect something like add esp, 16)\n\nThat means if we NOP-out the call, we have to NOP-out the function setup as well:\n\n\n\nKind regards\n\n",
      "votes": "8",
      "user": "Nordwald",
      "time": "Oct 11, 2017 at 5:25",
      "is_accepted": false,
      "comments": []
    }
  ]
}