{
  "title": "How to break on instruction that hasn't been traced yet?",
  "link": "https://reverseengineering.stackexchange.com/questions/3568/how-to-break-on-instruction-that-hasnt-been-traced-yet",
  "content": "I have some questions regarding IDA and Ollydbg.\n\nFirst, is there a way to create a record with traced instructions and let the debugger automatically break, when it hits an instruction that hasn't been traced in the record ?\n\nMy second question is refering to IDA tracing options. \nI wrote a simple Win32 GUI application in C++ which mainly consists of a message pump (GetMessage, TranslateMessage and DispatchMessage) and a WindowProcedure. I tried the following: \n\nWhat IDA traced are only the instructions from the message pump not the ones from the WindowProcedure, though it should at least have traced the DefaultWindowProc instruction. \n\nCan anyone tell me whats the reason for that?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "621",
  "tags": [
    "ida",
    "debugging"
  ],
  "user": "user3773",
  "time": "Feb 5, 2014 at 16:00",
  "comments": [],
  "answers_data": [
    {
      "content": "",
      "votes": "1",
      "user": "Albert Myers",
      "time": "Jan 29, 2014 at 16:10",
      "is_accepted": false,
      "comments": [
        {
          "user": "Anton Kochkov",
          "text": "IDA can connect to the remote WinDbg instance.",
          "time": null
        }
      ]
    },
    {
      "content": "STEGANOGRAPHED IMAGE :) COPY HEXEDIT AND RIP\n\nThis answer is related to hittrace feature of ollydbg\nAttached is a odbg110 plugin hitaid.dll\nthe dll has been 7zipped and hexedited to be uploaded here as jpg\ndownload hexedit and delete first 10 bytes and save as hitaid.7z\nuse 7zip to extract hitaid.dll from the archieve  \n\nollydbg has a feature called Hittrace \nthis plugin leverages that feature to achieve what is queried \n\nput the dll in odbg110 plugin path\nopen calc.exe in odbg\nanalyse the main module viz calc.exe\nright click in disasm window select hittrace in context menu\nselect add all recognized procedures submenu\nall recognized procedures will be marked with grey marker\nrun the exe with f9\nall instruction that were hit would be colored red\nhitting ctrl+L from start of disasm window will cycle through all hits\nuse plugin to remove all the hits\nif the required feature say button 7 is clicked now\nthe new code path that pertains to button 7 would be colored red\nnew hits can be reached by selecting disasm window start and pressing ctrl+L\nplugin can be used repeatedly to remove hits \nthe app need not be paused for the interaction \nyou can set f2 breakpoints as required in the new code path and reenable hittrace via disasm context menu\n\nsrc below\n\n```\n#include <windows.h>\n#include \"plugin.h\"\n#pragma warning(disable:4100)\nBOOL WINAPI DllEntryPoint(HINSTANCE hi,DWORD reason,LPVOID reserved) \n{\n    return 1;\n};\nextc int _export cdecl ODBG_Plugindata(char shortname[32]) \n{\n    strcpy(shortname,\"HitAid\");\n    return PLUGIN_VERSION;\n};\nextc int _export cdecl ODBG_Plugininit( int ollydbgversion,HWND hw,ulong *features) \n{\n    Addtolist(0,0,\"Hit Trace Aid Plugin by blabb\"); \n    return 0;\n};\nextc int _export cdecl ODBG_Pluginmenu(int origin,char data[4096],void *item) \n{\n    switch (origin)    \n    {\n    case PM_MAIN:\n        strcpy(data,\"0 &HitAid\");\n        return 1;\n    default: break;\n    };\n    return 0;\n};\nextc void _export cdecl ODBG_Pluginaction(int origin,int action,void *item) \n{\n    uchar *buff , *retu;\n    unsigned long psize, i , addr;\n    t_module * mod = Findmodule( Plugingetvalue(VAL_MAINBASE) );    \n    addr = mod->codebase;\n    if (origin==PM_MAIN)    \n    {\n        switch (action) \n        {\n        case 0:\n            retu = Findhittrace ( addr, &buff,&psize);\n            for (i=0;i < psize;i++ )    {\n                if ( retu[i] != ( TR_TRACE | TR_HIT )  ) \n                {\n                    continue;\n                }\n                Modifyhittrace((addr+i) , (addr+i+1),ATR_REMOVE);\n            }\n            break;\n        default:\n            break;\n        };\n    };\n};\n\n```\ncompiled with vs 2010 express and modified pdk by alex downloadable from www.ollydbg.de\n\n```\ncl /nologo /W4 /O1 /J /analyze /LD /WX /D\"_CRT_SECURE_NO_WARNINGS\" hitaid.cpp    \n/link /subsystem:windows /dll /ENTRY:DllEntryPoint/MERGE:.rdata=.text .\\ollydbgvc7.lib\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jan 31, 2014 at 6:19",
      "is_accepted": false,
      "comments": []
    }
  ]
}