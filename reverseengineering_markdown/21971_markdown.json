{
  "title": "What types are read from byte array?",
  "link": "https://reverseengineering.stackexchange.com/questions/21971/what-types-are-read-from-byte-array",
  "content": "I try to understand what data types are read from a byte array. These methods seem to follow a common pattern:\n\n```\npublic class Reader {\n\n    static short readA(byte[] bytes, int i) {\n        int s = ((((short) bytes[i]) & 255) << 8)\n                | (((short) bytes[i + 1]) & 255);\n        return (short) s;\n    }\n\n    static int readB(byte[] bytes, int i) {\n        return ((bytes[i] & 255) << 8)\n                | (bytes[i + 1] & 255);\n    }\n\n    static int readC(byte[] bytes, int i) {\n        return ((bytes[i] & 255) << 24)\n                | ((bytes[i + 1] & 255) << 16)\n                | ((bytes[i + 2] & 255) << 8)\n                | (bytes[i + 3] & 255);\n    }\n\n}\n\n```\nDoes readC read a signed integer? Does readB read a signed short? What does readA read?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "83",
  "tags": [
    "java"
  ],
  "user": "maiermic",
  "time": "Aug 25, 2019 at 10:06",
  "comments": [
    {
      "user": "bart1e",
      "text": "I think that your question isn't related to reverse engineering. Nonetheless, readA returns short created as concatenation of bytes[i] and bytes[i+1] (i.e. if bytes[i]=00000010 and bytes[i+1]=10000011, it will return 10100000011). readB returns the same except that will be of type int, while readC returns an int representing concatenation of bytes[i], bytes[i+1], bytes[i+2] and bytes[i+3].",
      "time": null
    },
    {
      "user": "blabb",
      "text": "assume i = 0   bytes = [1,2,3,4]   so bytes[0] is the first byte in array  it is left shifted by 8 so 1 << 8 == 256 | 2   ==  258 the & 255  is there to take only the byte from input ie instead of [1,2,3,4]  the input can be [0x8097abef,....]  the & 255 will strip the 8097ab an will take only ef for left shifting  ie ef << 8 ie the result will be 0xef00 | yy",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@bart1e  please put answers in the answer box, not in comments. Thanks",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@blabb as well.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "understanding code is also reverse engineering, this question is not necessarily offtopic here",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Lets Break the algo into pieces before trying to understand \n\nthe algo is broken into pieces using bodmas (bracket open ,divide ,multiply ,add, subtract )  \n\nand/or Operator precedence \n\nlets take the uncasted readB first \n\n```\nstatic int readB(byte[] bytes, int i) {\n    return ((bytes[i] & 255) << 8)\n            | (bytes[i + 1] & 255);\n}\n\n```\nprototype of function says it takes an array of bytes and an integer does some thing and returns an int back \n\n```\nstatic int readB(byte[] bytes, int i)\n\n```\nbody of the function (where it does the aforementioned something \n\n```\nreturn ((bytes[i] & 255) << 8) | (bytes[i + 1] & 255);\n\n```\nthere are two bracketed expression one of which has a child  \n\n```\n1. ((bytes[i] & 255) << 8)    \n          I. (bytes[i] & 255)\n 3. (bytes[i + 1] & 255)  \n\n```\nbreaking the child expression apart it has three components  a constant 255 and two variables\nwhich are arguments or inputs provided to the function\nthe byte array bytes[] and\nthe integer i\nsince i is an int the array can range from 0 to 2^31 -1  \n\n( think what will happen if you provide a null array or\n an array with just 1 value or \nan array with 2^31-1 values\nor int >= array size\n(bounds checking\nthis link has the following code check the results and see the thrown exception\n\n```\n{  \n    static byte foo[] = {1,2,3,4,5,6,7,8 };\n    static int readB(byte[] bytes, int i)\n    {\n        return ((bytes[i] & 255) << 8) | (bytes[i + 1] & 255);\n    }\n    public static void main(String args[])\n    {\n        for(int i = 0; i < foo.length ; i++ ) \n        {\n            System.out.printf(\"bounds check %d %d %d  \n\" , i , foo[i] , readB(foo,i));\n        }\n    }\n}\n\n```\nresult of running the code \n\n```\nCompilation time: 1.05 sec, absolute running time: 0.22 sec,  \ncpu time: 0.15 sec, memory peak: 18 Mb, absolute service time: 1,27 sec\n\nError(s), warning(s):\n\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 8\n    at Rextester.readB(source.java:12)\n    at Rextester.main(source.java:18)\n\nbounds check 0 1 258\nbounds check 1 2 515\nbounds check 2 3 772\nbounds check 3 4 1029\nbounds check 4 5 1286\nbounds check 5 6 1543\nbounds check 6 7 1800\n\n```\n) \n\n```\nbytes[i] & 255\n\n```\nthis actually is superfluous operation  \n\nthe bytes[i] array is already of BYTE type so the values can never exceed 255 and there is no point stripping the rest \nthis would only make sense if the type is > BYTE like WORD foo[] which can hold anything from 0x0000 to 0xffff or int foo[] which can hold anything from 0x00000000 to 0xffffffff so stripping the hibyte and highwords may make sense .\n\nin this specific code we can safely ignore this \n\nso basically  it takes two bytes from the given position  and folds them into a bigger type\nso readA returns a SHORT and readB returns and INT type\n\nie readA takes two bytes from a give position and folds it into anything between \n0x0000 and 0xffff\nreadB takes two bytes from a given position and folds into anything between \n0x00000000 and 0xffffffff (actually  it is same as  0x00000 and 0xffff if not for size of type calculation or pointer arithmetic's )  \n\nthe third readC now should be clear enough for you  ittakes 4 bytes and folds it into anything between 0x00000000 and 0xffffffff (this function utilizes the whole range not unlike the readA() / readB() \n\nsee the shifts 24,16,8  which puts\nbyte[ position 1] at 0xAA-??????\nbyte[ position 2] at 0xAA-BB-????\nbyte [position 3] at 0xAA-BB-CC-?? and\nbyte [position 4] at 0xAA-BB-CC-DD\nand returns back 0xAABBCCDD \n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Aug 25, 2019 at 17:58",
      "is_accepted": true,
      "comments": []
    }
  ]
}