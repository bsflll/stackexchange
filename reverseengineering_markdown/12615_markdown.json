{
  "title": "how to calculate this distance?",
  "link": "https://reverseengineering.stackexchange.com/questions/12615/how-to-calculate-this-distance",
  "content": "I dont know how to calculate the jump distances :\n\n```\n[Address | Binary value| ollydbg(jmp, call...)]\n\n004014B6   $- FF25 30114000 JMP DWORD PTR DS:[<&MSVBVM60.#100>]      ;  MSVBVM60.ThunRTMain\n004014C1   .  E8 **F0FFFFFF**   CALL [JMP.&MSVBVM60.#100]\n\n```\nother examples: random jmps to 004014C1\n\n```\n0040752A    ^\\E9 **929FFFFF**   JMP stub2.004014C1\n00407561    ^\\E9 **5B9FFFFF**   JMP stub2.004014C1\n00407582    ^\\E9 **3A9FFFFF**   JMP stub2.004014C1\n\n```\nas you can see the bold number changes, I can see its a distance but I don't know how to calculate it.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "ollydbg"
  ],
  "user": "Charles",
  "time": "May 10, 2016 at 10:04",
  "comments": [],
  "answers_data": [
    {
      "content": "First, you should read about little endianness. In a nutshell, the x86/x64 processors store the least significant byte first, so F0FFFFFF is really the value FFFFFFF0, and 3A9FFFFF is the value FFFF9F3A.\n\nSecond, read about integer representations of negative values, and how overflow works when adding/subtracting numbers. In short, FFFFFFF0 can either mean 4294967280 or -16, but when you add hex numbers, you don't really care; you just add them and ignore overflow.\n\nThird, remember that jump offsets are calculated from the byte after the jmp/call instruction.\n\nSo, in your first example:\n\nand the first of your random examples:\n\nYour other examples work in the same way, you should be able to figure them out now.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "May 10, 2016 at 10:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}