{
  "title": "ida decompiler output",
  "link": "https://reverseengineering.stackexchange.com/questions/11593/ida-decompiler-output",
  "content": "```\ndouble __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  LODWORD(v2) = 0x5F3759DF - (SLODWORD(a1) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n\n```\nabove function do some calculation using float number\ni am not able to understand LODWORD line \n\nRegards\n\n",
  "votes": "0",
  "answers": 3,
  "views": "3k",
  "tags": [
    "ida",
    "decompile",
    "magic-number"
  ],
  "user": "Arun",
  "time": "Dec 20, 2015 at 14:17",
  "comments": [
    {
      "user": "SSpoke",
      "text": "LODWORD is the first 2 bytes of the DWORD and HIDWORD is the second 2 bytes of DWORD.. see those commands as just putting 2 pieces of a pizza pie together and then you read the whole pizza pie as a new number, and cast it to whatever datatype is suitable for it. I would just declare those macros in a new project and do some expirements with them both to understand their operation completely output a few printf(\"%x  \n\", DWORDAnswer); afterwards. (SLODWORD is signed version of LODWORD). Also you could replace all macro's with equivalent code to the macro to make it easier on the eye.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The 0x5F3759DF constant seems familiar...\n\nIt is the fast inverse square root algorithm: http://en.wikipedia.org/wiki/Fast_inverse_square_root \n\ncomparing against that code SLODWORD and LODWORD would be a bit-preserving conversion to an integral type.\n\nThe last line does a1*invsqrt(a1) which is equal to sqrt(a1) * (sqrt(a1)/sqrt(a1)) so it ends up calculating the square root of the input parameter.\n\n",
      "votes": "5",
      "user": "ratchet freak",
      "time": "Dec 24, 2015 at 12:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "Arun",
          "text": "unable to under stand Floating point calculation",
          "time": null
        },
        {
          "user": "ratchet freak",
          "text": "did you read the wiki article? In particular the section that explains why it works?",
          "time": null
        }
      ]
    },
    {
      "content": "I use this line as reference to understand the hidden macros'\n\nhttp://www.wekk.net/files/defcon/defs.h\n\n```\ndouble __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  LODWORD(v2) = 0x5F3759DF - (SLODWORD(a1) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n\n```\ncould be simplified easier on the eyes like this\n\n```\ndouble __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  *((_DWORD*)&(v2)) = 0x5F3759DF - (*((long*)&(a1)) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n\n```\nor how I would do it..\n\n```\ndouble __cdecl sub_401660(float a1)\n{\n  double v1; // st7@1\n  float v2; // ST00_4@1\n  float v4; // [sp+8h] [bp+4h]@1\n  float v5; // [sp+8h] [bp+4h]@1\n\n  v1 = a1;\n  *((unsigned int *)&(v2)) = 0x5F3759DF - (*((long*)&(a1)) >> 1);\n  v4 = 0.5 * a1;\n  v5 = (1.5 - v4 * v2 * v2) * v2;\n  return (float)(v1 * v5);\n}\n\n```\nBut this is how you do it if you are a hacker. Google.com search > 0x5F3759DF\n\nFind this link http://gostash.it/en/stashes/184\n\n```\nfloat Q_rsqrt( float number )\n{\n   long i;\n   float x2, y;\n   const float threehalfs = 1.5F;\n\n   x2 = number * 0.5F;\n   y = number;\n   i = * ( long * ) &y; // evil floating point bit level hacking\n   i = 0x5f3759df - ( i >> 1 ); // what the fuck?\n   y = * ( float * ) &i;\n   y = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration\n   // y = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this can be removed\n\n   return y;\n} \n\n```\n",
      "votes": "1",
      "user": "SSpoke",
      "time": "Dec 24, 2015 at 19:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Zirui Wang",
          "text": "The link to wekk.net is broken. Your macro for LODWORD works perfectly for me. I wonder if you have another macro for HIDWORD, and other similar macros.",
          "time": null
        }
      ]
    },
    {
      "content": "SLODWORD(a1) returns the hex representation of a input read the wiki-link by ratchet freak and take a look at the poc below\n\n```\n#include <stdio.h>\n#include <stdlib.h>\nlong dodance(float number){\n  float y  = number;\n    long i  = * ( long * ) &y;\n  return i;\n}\nvoid main (void) {  \n  long a = dodance((float)3.2865);\n  printf(\"%08X  \n%f  \n\",a,*(float *)&a);\n}\n\n```\ncompile without optimization the above code using say \n\n```\ncl /Zi /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE\n\n```\nand execute the resulting binary\n\n```\nmagicnum.exe\n40525604\n3.286500\n\n```\nCompiling the enhanced code below you can see the maximum precision attainable by the 32 bit float is exhausted when the third term is evaluated in the series\n\n```\n#include <stdio.h>\n#include <stdlib.h>\nlong dodance(float number)\n{\n  float y  = number;\n    long i  = * ( long * ) &y;\n  return i;\n}\nint main (int argc , char *argv[]) \n{\n  if(argc != 3){printf (\"usage %s <float> <int>  \n\",argv[0]);return 0;}\n  float input = (float) atof(argv[1]);\n  int term = atoi(argv[2]);\n  long a = dodance(input);\n  printf(\"%-10s= %08X  \n%-10s= %f  \n\",\"hex\",a,\"float\",*(float *)&a);\n  long b = (0x5f3759df - (a >> 1));\n  float c = *(float *)&b ;\n  printf(\"%-10s= %08X  \n%-10s= %f  \n\",\"hex\",b,\"~1stfloat\",c);\n  for(int i=0; i< term;i++) \n  {\n    c = (float)(c * ( 1.5 - ( (input * 0.5) * c * c )) );\n    printf(\"%-10s= %f  \n\",\"~nxtfloat\",c);\n  }\n  return 1;\n}\n\n```\nresult \n\n```\nmagicnum.exe\nusage magicnum.exe <float> <int>\n\nmagicnum.exe 3.2 1\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n\nmagicnum.exe 3.2 2\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n~nxtfloat = 0.559017\n\nmagicnum.exe 3.2 3\nhex       = 404CCCCD\nfloat     = 3.200000\nhex       = 3F10F379\n~1stfloat = 0.566215\n~nxtfloat = 0.558877\n~nxtfloat = 0.559017\n~nxtfloat = 0.559017 <-- no improvement over the previous result\n\n```\nsome theory\n\n```\nNewtons method is a proof and extension of binomial expansion theoram \nfor fractions and negative numbers \nsimplified binomial exapnsion for (1+x)^n = 1 + (n*x) + ((n*(n-1)/2)*x^2) + .......\nwe can derive an approximation of the  squareroot\nsqrt(3.2)   = (4 - 0.8)^ 1/2  \n        = 2 * ( 1 - 1/5) ^ 1/2\n        = 2 * ( 1 + 1/2*(-1/5)  + (-1/8) * (1/25) + .....)\n        = 2 * ( 1 - 1/10 - 1/200)\n        = 2 * ( 200/200 - 20/200 - 1/200)\n        = 2 * (179/200)\n        = 2 * (0.895)\n                = 1.79\n1 / sqrt(3.2)   = 1 / 1.79\n        = 0.55865921787709497206703910614525\nusing calc.exe \n3.2^-0.5    = 0.55901699437494742410229341718282 \n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Dec 24, 2015 at 18:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}