{
  "title": "how to set flag in windbg",
  "link": "https://reverseengineering.stackexchange.com/questions/32486/how-to-set-flag-in-windbg",
  "content": "Let's say we have 2 functions funcA and funcB, funcA is the upstream of funcB. I want to view certain values and call stack in funcB only if funcA satisfies certain conditions. I can't achieve this through conditional breakpoint in funcB since I don't know how to access the value I want with registers in funcB. The approach I think of it's add conditional break point both in funcA and funcB. In funcA, I set the flag when certain conditions satisfy. In funcB, I check the flag, print certain values if it's set, and reset the flag. But I don't know how to do this in Windbg. Can I define some variables to hold the flag?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "53",
  "tags": [
    "windbg"
  ],
  "user": "anonymous bear",
  "time": "Nov 10, 2023 at 0:00",
  "comments": [
    {
      "user": "blabb",
      "text": "Set a double conditional like .if (funca.x<=>z) {bu funcb} .else{ bc funcb}",
      "time": null
    },
    {
      "user": "Ali Rizvi-Santiago",
      "text": "You can use the pseudo-registers ($t0 through $t19) to store how you're accessing things. Their state can be saved with the .push /r and .pop /r commands if you need to nest for some reason. If you want to use full names or even store a whole expression to evaluate, you can also use aliases which get pasted into your expressions using ${ } such as ${youraliasname}. To assign an integer to an alias, you'll need to assign it with as /x or you can expand it by assigning to a temporary register. Also, you can use ${/d:youraliasname} in your expression to see if it has been defined.",
      "time": null
    }
  ],
  "answers_data": []
}