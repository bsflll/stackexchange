{
  "title": "How do I resolve addresses relative to a register in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/17653/how-do-i-resolve-addresses-relative-to-a-register-in-ida",
  "content": "I am reversing an x86 ELF shared object library. Perhaps because of position independence, all functions begin with loading a constant offset into a register:\n\n```\n[... function prologue ...]\ncall    $+5\npop     eax             ; eax = eip = 0x4E2B\nadd     eax, 1009Dh     ; eax = 0x14EC8 = start of .got.plt section\nmov     byte ptr [eax+194h], 0ACh\nmov     dword ptr [eax+190h], 968CC5DEh\n[...]\n\n```\nThe first two instructions set eax to the current instruction's address. Then a constant offset is added, this offset is probably calculated during linking. \nFrom there on, all addresses are referenced relative eax (in this case, they point into the .bss segment).\n\nI can manually calculate all addresses since the value of eax is fixed. Is there an automated way to resolve these fixed-register-offsets in IDA, such that IDA can properly resolve X-refs, etc?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "498",
  "tags": [
    "ida",
    "pie"
  ],
  "user": "jojonas",
  "time": "Mar 11, 2018 at 0:24",
  "comments": [
    {
      "user": "w s",
      "text": "AFAIR One of my colleagues used manticore (github.com/trailofbits/manticore) for something like this. Any working symbolic execution engine should also fit.",
      "time": null
    }
  ],
  "answers_data": []
}