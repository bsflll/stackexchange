{
  "title": "Nested Structures in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/20069/nested-structures-in-ida",
  "content": "I'm trying to figure out how to explore structs in IDA, and getting stuck on the basics. I wrote a very basic test app;\n\n```\nint main() {\n    const int kBits = 1024;\n    const int kExp = 3;\n\n    RSA *rsa = RSA_generate_key(kBits, kExp, 0, 0);\n    RSA_print_fp(stdout, rsa, 0);\n\n    RSA_free(rsa);\n    return 0;\n}\n\n```\nThen I imported the OpenSSL headers, so IDA now understands what RSA* and BIGNUM* are. BIGNUM is actually pointing to bignum_st which is referenced from RSA, which is rsa_st.\n\nThen, dropped a breakpoint in the pseudocode view;\n\n\nNow, if I hover over v3, I see it's parsing the struct. So I want to do something like grab the value of rsa->d->dmax, but there doesn't seem to be a way to do this? I can't seem to find a way to access v3 by name in IDAPython, nor can I seem to 'walk' the structure to get to the int that lives at dmax. Is there some way to do this?\n\n",
  "votes": "5",
  "answers": 3,
  "views": "1k",
  "tags": [
    "ida",
    "debugging",
    "idapython",
    "linux",
    "hexrays"
  ],
  "user": "XeroxDucati",
  "time": "Jan 18, 2023 at 8:13",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Your code works as usual but it raises exception code in IDA+windbg. Can you share the compiled Windows binary?",
      "time": null
    },
    {
      "user": "Pororo",
      "text": "Can I assume what you want to do is to dump the value of v3->d->dmax upon reaching this breakpoint?",
      "time": null
    },
    {
      "user": "XeroxDucati",
      "text": "@Pororo yes, exactly!",
      "time": null
    },
    {
      "user": "XeroxDucati",
      "text": "@Biswapriyo I can't imagine it would work in windows.. I'm doing this under Linux (CentOS 7 if it matters)",
      "time": null
    },
    {
      "user": "Jane",
      "text": "for some reason I thought this was the writing stack exchange, anyway -  +1 good question! will follow this.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "My knowledge of the IDAPython API isn't the most complete, but what I would do is\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Jan 18, 2023 at 10:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Here are the steps:\n\n\n\n\n\n\n\nNow you can see all the struct members value.\n\n",
      "votes": "0",
      "user": "Biswapriyo",
      "time": "Dec 8, 2018 at 5:05",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "\"Setting a breakpoint\" suggests that you are doing dynamic analysis. Assuming that and assuming this happens on a real system, may I suggest an alternative route for Linux, based on my other assumption that you are linking OpenSSL dynamically?\n\nWhen on Linux (and a number of other unixoid systems) you can guide the dynamic linker/loader to override a function. If you know Windows and DLLs it could probably be compared a little to DLL placement attacks, but it is more flexible and requires less effort.\n\nNB: Obviously this approach doesn't teach you how about dealing with structs in IDA, but I think it is a very powerful technique to keep in mind. Because it is an alternative approach that doesn't satisfy your constraint of wanting to learn more about dealing with structs in IDA, I am making this a CW.\n\nThere are some components for this approach:\n\nld.so will take care -- when resolving symbols -- that the preloaded ones take precedence. This is how one of the modes of operation for eFence is implemented (look for LD_PRELOAD, the man page also lists the exported symbols).\n\nSo now your only remaining task would be to turn up the correct prototype for RSA_generate_key from the libcrypto.so that your binary uses (try ldd ./your_binary to list dependencies) and write the wrapper .so, using dlopen() and dlsym() to locate the original RSA_generate_key symbols from the actual libcrypto.so\n\nThis is approximately the program you created and are analyzing.\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <openssl/rsa.h>\n\nint main(int argc, char const ** argv, char const** envp)\n{\n    int const kBits = 1024;\n    int const kExp = 3;\n\n    RSA *rsa = RSA_generate_key(kBits, kExp, 0, 0);\n    RSA_print_fp(stdout, rsa, 0);\n\n    RSA_free(rsa);\n    return EXIT_SUCCESS;\n}\n\n```\nThis is the wrapper shared object, which we'll load with LD_PRELOAD.\n\n```\n#include <dlfcn.h>\n#include <openssl/rsa.h>\n\ntypedef RSA* (*RSA_generate_key_t)(int, unsigned long, void (*)(int, int, void *), void *);\nstatic RSA_generate_key_t real_RSA_generate_key = 0;\nstatic void* libcrypto = 0;\n\nstatic void init() __attribute__((constructor));\nstatic void fini() __attribute__((destructor));\n\nvoid init()\n{\n    if (!libcrypto)\n    {\n        libcrypto = dlopen(\"libcrypto.so.3\", RTLD_NOW);\n        if (!libcrypto)\n        {\n            libcrypto = dlopen(\"libcrypto.so\", RTLD_NOW);\n        }\n        fprintf(stderr, \"Loaded libcrypto: %p  \n\", libcrypto);\n        if (libcrypto)\n        {\n            real_RSA_generate_key = (RSA_generate_key_t)dlsym(libcrypto, \"RSA_generate_key\");\n        }\n        fprintf(stderr, \"\\tRSA_generate_key == %p  \n\", (void*)real_RSA_generate_key);\n    }\n}\n\nvoid fini()\n{\n    if (libcrypto)\n    {\n        dlclose(libcrypto);\n        libcrypto = 0;\n        real_RSA_generate_key = 0;\n    }\n}\n\nRSA* RSA_generate_key(int bits, unsigned long e, void (*callback)(int, int, void *), void *cb_arg)\n{\n    if (!real_RSA_generate_key)\n    {\n        fprintf(stderr, \"FATAL: Have no function pointer for original RSA_generate_key()  \n\");\n        return 0;\n    }\n    fprintf(stderr, \"Calling real_RSA_generate_key(%i, %lu, %p, %p)  \n\", bits, e, callback, cb_arg);\n    RSA* ret = real_RSA_generate_key(bits, e, callback, cb_arg);\n    /* do something with ret here */\n    if (ret)\n    {\n        fprintf(stderr, \"Returned RSA key: %p ... I can do what I want with it ... MUHAHAHA!  \n\", ret);\n    }\n    return ret;\n}\n\n```\nExplanation:\n\nThe GNU make recipes to build our stuff.\n\n```\nCC:=gcc\nCFLAGS:=$(strip -Wno-deprecated-declarations $(CFLAGS))\nall: bin so\nbin: your_binary\nso: mock_openssl_rsagenkey.so\n\nbin: LDLIBS=-lcrypto\n\nyour_binary: main.c\n        $(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@\n\nso: CFLAGS=-shared -fPIC\nso: LDFLAGS=-Wl,-soname,libcrypto.so\nso: LDLIBS=-ldl\n\nmock_openssl_rsagenkey.so: mock_openssl.c\n        $(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@\n\n.PHONY: all so bin\n\n```\n```\n$ LD_PRELOAD=./mock_openssl_rsagenkey.so ./your_binary\nLoaded libcrypto: 0x7f9ad86e3700\n        RSA_generate_key == 0x7f9ad8478b50\nCalling real_RSA_generate_key(1024, 3, (nil), (nil))\nReturned RSA key: 0x55d1bfc40c10 ... I can do what I want with it ... MUHAHAHA!\nRSA Private-Key: (1024 bit, 2 primes)\nmodulus:\n    00:d2:85:86:68:fb:1f:b0:92:c7:dd:09:08:7a:39:\n    21:7e:74:27:36:08:23:0d:1f:6c:7a:ec:47:5d:fc:\n    27:c9:95:c2:a4:e1:9f:99:1b:3f:d9:f8:88:65:30:\n    93:c6:7d:2b:31:9b:b1:cb:5c:5a:b8:7a:20:c0:4b:\n    63:25:c4:3a:30:c3:81:16:56:28:ac:f7:74:93:6b:\n    93:64:db:c9:d5:0f:64:f8:15:b4:0d:18:1d:86:c1:\n    60:4b:5a:2f:2f:b7:fb:90:03:13:d5:be:1e:05:05:\n    0e:91:54:79:5b:58:2f:02:de:0a:1f:ef:06:a4:0a:\n    28:e4:55:3f:31:9d:a9:26:53\npublicExponent: 3 (0x3)\nprivateExponent:\n...\n\n```\nExplanation:\n\nThe above as Base64-encoded .tar.xz file for convenience:\n\n```\n/Td6WFoAAATm1rRGAgAhARwAAAAQz1jM4Cf/BCJdACOThvK+tJ2QH6+woi2u3zkiEOlUoV1cX9AZ\n+FC3A1WH7iUCMxAdurFVdxDDlniCFn58+KgLrhSGdLxvJiWTMjuOBhIYwKHirauzr5++28b5NTbw\n5OiW8LJArEPs+IWgu/EuT61aIKGLFonGy9apeCHMMEzdN9wUILkS5CNSFe5L1gKJCeVZ2PTWGqzA\nyu0nBvlpA0e7H81rA/msgoO1us3mbbQkkYuZ0lOkt5t5qn8H7c7oZe/gip3oyXmFlfJsscG2OmjK\nKmKWZbFLgb3EQuM0929MRGATHYCl5McORvugai2AeHPJRTLVTKrZC2rYj9buuEY5PH6ufW1b8NT1\nklXJkPU0gfOhGsEVcYQUMmp56aXGqzp6kq6xhAcIH+U+oEbbZBAC9QSSyFMH40nmRrPUOfIHnwhn\no/QclEtbierPsRwJMLjXS5uuz7IP1zxdOtshXJUDfmkXhj7/AIOCoLJ1PTWOIW4wq54yFSokdBUA\nlbzUk/VluIqyIx0D81HMRU2qJuptH2c28ij92+c7nHcH7M+WncwXoUPSZL2M31SUvS7DsFQkgqbM\nbeWSW2XgnV9vSKGomuCUY5vT671UD7hYddEuoR+vtJdEnEXENHfIu6rmK/3Zg9UwzYrHIMvkxm9B\nl1rxP+4C3x3Sy4qBzBup44Q7p62bVMG3CiSD2ZCkktQgeQFyPklGJLw3KriMexMoLc4eSA0EwfhU\nrr33b6n5uW3JN3pJ8IfwRW+KXS+DI0wnroLCGHdwzfXDhFPSMTaeFL4oICzQoX6gyPjLWRPciwZR\ng/2fZp9xA25j/6YP1M8i8eUcckB3Z2ispYtTsDa+D2osEcK4JAtHaDCJ/6gH3wSIJh3Dx5upaHz1\n0wQDQkS4T4O3Igf7B4wigAHWSHIih8Cl9bN8L36S5ZC58o3VeMgsLpLUkcRhf0bl6dhD113rJkqO\nG5GTlyp13YB7U2pynt9EY4TfVqCj7NvEAXHpt67MmNSqwl4c6Eslm/XplS0gTzKbP1tZo70AvkYO\noks0eYGhmE6HmcwwolqNJ3UQWkmPeUrBA5WHILHDvS3fhZkuoRgSJ+swyez8oKtOo5Y6sxGH1yDH\n0Bt5SeDmk6wErTqUb+YTDKQw1wMzY3DdeUSOny6PJumC/D9HBwmIehhDB7YxMVaQ2jcW02//bngq\nJ+zcjmBbjvKhMSOcCBVAPD7EAYyB6uerSAg4DrpsUkyYAw8+49lYe6STGKpy8OOt4OXah6WnG8/E\nGsbYlHm1RfJuMIgfYRU0+O+//xipV/q5EF/FzaQoDYuV2mPsx6TvYAganEUh78E4P9+GXBC8FsPE\nZjUrahpKmyLFm9zVmN0l3BYa20EpXmujuePO/51T3TZlxgcf5fjV87vF7BBmj8vcaVe+U02IcB1M\nZ6OAl1cAAAAAtSETkCuEMZwAAb4IgFAAAJJ1AFKxxGf7AgAAAAAEWVo=\n\n```\nBash and some other shells will be contend to do it with:\n\n```\nLD_PRELOAD=/path/to/your/mock_openssl_rsagenkey.so ./your_binary\n\n```\nbut the more portable way is:\n\n```\nenv LD_PRELOAD=/path/to/your/mock_openssl_rsagenkey.so ./your_binary\n\n```\nwhich uses /usr/bin/env -- instead of relying on a shell-builtin facility 00 to set the environment variable for a single invocation.\n\nObviously you could also at the prompt ($  signifies it!) to:\n\n```\n$ export LD_PRELOAD=/path/to/your/mock_openssl_rsagenkey.so\n$ ./your_binary\n\n```\nor on some less comfortable (or older) shells:\n\n```\n$ LD_PRELOAD=/path/to/your/mock_openssl_rsagenkey.so\n$ export LD_PRELOAD\n$ ./your_binary\n\n```\nLast, but not least, you could create a little wrapper script, which we'll name your_binary.sh based on your_binary:\n\n```\n#!/usr/bin/env bash\nexport LD_PRELOAD=/path/to/your/mock_openssl_rsagenkey.so\nexec \"${0%.sh}\" \"$@\"\n\n```\n",
      "votes": "0",
      "user": "2 revs0xC0000022L",
      "time": "Jan 18, 2023 at 10:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}