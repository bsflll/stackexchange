{
  "title": "Recognize a decryption algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/22100/recognize-a-decryption-algorithm",
  "content": "I'm trying to reverse a malware that builds its IAT at runtime. Due to my inexperience, I'm having trouble to understand this function that accepts into EAX a dword (maybe some sort of hash) and into EDX the base address of kernel32.dll. Could you point me how can I work it out? I can't use the decompiler right now.\n\n\n\n",
  "votes": "2",
  "answers": 1,
  "views": "218",
  "tags": [
    "disassembly",
    "malware",
    "decryption"
  ],
  "user": "Kartone",
  "time": "Sep 11, 2019 at 10:40",
  "comments": [],
  "answers_data": [
    {
      "content": "The function parses the PE header to locate the IMAGE_EXPORT_DIRECTORY which has the structure\n\n\n\nNumberOfNames contains the number of symbols exported by this PE and is located at an offset of 0x18.\n\nAddressOfNames is a pointer to an array of null-separated list of exported function names. This is located at offset 0x20.\n\nUsing the NumberOfNames value it iterates over the list of exported function names and calculates a hash value for each.\n\nThe algorithm to calculate hash is something like.\n\n```\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    // The name to hash\n    char name[] = \"GetModuleFileNameA\";\n\n    unsigned int hash = 0;\n    unsigned char ch, cl;\n\n    for (int i=0; i<strlen(name); i++)\n    {\n        ch = ((hash >> 8) & 0xFF) ^ name[i];\n        hash = (hash & 0xffff00ff) | (ch << 8);\n        hash = _rotl(hash, 8);        \n        cl =  (hash & 0xFF) ^ ((hash >> 8) & 0xFF);\n        hash = (hash & 0xFFFFFF00) | cl;\n    }\n    printf(\"%08X\", hash);\n}\n\n```\nIf the calculated hash matches, it returns the corresponding address of the API.\n\nThe above code calculates the hash of GetModuleFileNameA which comes out to 416F346F. The code can thus be assumed to be correct.\n\nCheck here: https://rextester.com/NIBW6473\n\n",
      "votes": "3",
      "user": "0xec",
      "time": "Sep 11, 2019 at 19:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Kartone",
          "text": "This 0x416F346F could be the hash for GetModuleFileNameA. Or this 0x0A7E6B43 could be the hash for VirtualAlloc and this 0x65233F5A could be for Sleep.",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@Kartone The code works for the given hashes.",
          "time": null
        },
        {
          "user": "Kartone",
          "text": "Great answer! Thanks for your help. Last question, do you know if symbol _IMAGE_EXPORT_DIRECTORY is working into Win7 and over? Actually I'm following your hints but, different from other structures, WinDBG complain there is no symbol associated. Thanks again!",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@Kartone Yes, _IMAGE_EXPORT_DIRECTORY is defined in the PE specification and would work across all Windows OS. Probably you don't have the proper pdb symbols loaded in windbg.",
          "time": null
        },
        {
          "user": "Kartone",
          "text": "I will dig into the issue, then. Thanks.",
          "time": null
        }
      ]
    }
  ]
}