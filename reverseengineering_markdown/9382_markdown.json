{
  "title": "Code-Cave Assembly Patching Issue in x64_dbg",
  "link": "https://reverseengineering.stackexchange.com/questions/9382/code-cave-assembly-patching-issue-in-x64-dbg",
  "content": "I'm trying a code-cave approach to this query that was asked about on this forum earlier.\n\nI'm using x64_dbg to perform this task. My issue here is that after I have written the extra lines of assembly within the code-cave, using Right-Click > Patches does not apply them.\n\nDoes x64_dbg require an additional add-on to perform this kind of patching?\nHowever, the code changes inside the address space of the function patches just fine.\n\nAssembly code (Code-Cave)\n\n\n\nFailed dialog box\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "disassembly",
    "x86-64",
    "patching",
    "machine-code"
  ],
  "user": "Pramod Mohandas",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Where did you place the code cave? If you put it at the end of the other code, it might be beyond the end of the segment, which would explain why windbg can't write it back.",
      "time": null
    },
    {
      "user": "Pramod Mohandas",
      "text": "I scrolled all the way to the bottom of the window and wrote it there.",
      "time": null
    },
    {
      "user": "Migs",
      "text": "Unfortunately this did not work me. I tried patching the virtual sizes of all the section headers and it didn't make any difference...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "x64_dbg uses TitanEngine's ConvertVAtoFileOffsetEx() function to apply the patches. That function validates that the virtual addresses of the bytes to be patched are within a section's memory space at run-time (based on the section's virtual address and the section's virtual size). Since the bytes you're patching are after the end of the section's virtual size, ConvertVAtoFileOffsetEx() returns 0 and the patches are never applied.\n\nAs a workaround, I'd recommend patching the virtual size of the section to which you're appending those new bytes. Whatever the current virtual size is, make it 14 bytes bigger in the PE section's header.\n\nYou can use a tool like Explorer Suite to make this change by navigating to the file's Section Headers and increasing the value in the target section's Virtual Size field:\n\n\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Jul 17, 2015 at 15:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "Pramod Mohandas",
          "text": "Could you kindly also reference a few links on a how-to for patching the virtual size of the section header in your answer ?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "I've updated my answer above with a link and instructions.",
          "time": null
        }
      ]
    }
  ]
}