{
  "title": "Why cl.exe change the extern function name used in my code?",
  "link": "https://reverseengineering.stackexchange.com/questions/3733/why-cl-exe-change-the-extern-function-name-used-in-my-code",
  "content": "So basically I my nasm syntax asm code, I use some extern functions like this:\n\n```\nextern _printf\nextern __imp__Sleep@4\n....\ncall _printf\ncall    [__imp__Sleep@4]\n\n```\nThen I use nasm to assemble it into obj:\n\n```\nnasm -f win32 test.asm\n\n```\nThen I use IDA Pro to disassemble test.obj, I can see code like this:\n\n \n\nSee, extern function name like _printf has been kept.\n\nBut when I link this obj file:\n\n```\ncl /MT z:\\\\windows\\\\test.obj /link kernel32.lib libcmt.lib /SUBSYSTEM:CONSOLE\n\n```\nThen I use IDA Pro to disassemble test.exe, I can see code like this:\n\n\n\nSee, the function name of _printf has been changed.\n\nI know basically after static link, the code of _printf has been put into the test.exe, in the subroutine of sub_409C9B\n\nBut basically I have to make the name of extern declared functions unchangeable, because I need to reverse engineering the test.exe and do some modify/remove towards those functions, and once PE exe lost the name info, I can not locate those targeting functions.\n\nSo my question is:\n\nWhy cl.exe will change the name of those functions, and is there any way to stop the change(I mean keep the function name unchangeable during the link time)?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "458",
  "tags": [
    "ida",
    "winapi",
    "nasm"
  ],
  "user": "lllllllllllll",
  "time": "Feb 20, 2014 at 18:01",
  "comments": [
    {
      "user": "0xec",
      "text": "That is why there exists signatures for IDA (Flirt) to detect such standard library functions. Apply them and see.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You've got some kind of XY-problem.\n\nThe truth is: it's IDA who so to say \"changes\" the name of (something she thinks is) a function from absolutely nothing to sub_{address}. Why on earth would PE-file have non-exported symbols stored in it? Some kind of masochism? To give a candy to reversers?\n\nThus, you have at least three ways of dealing with your problem:\n\n",
      "votes": "6",
      "user": "Community",
      "time": "Apr 23, 2014 at 13:27",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "When printf() is called as an external function, the Windows loader needs to look up the address of the printf() function by-name at run-time so that the caller can find the printf() code.\n\nWhen printf() is called as an embedded library function, the compiler already knows the address of the printf() function at compile-time, and thus doesn't need to embed the function's name in the executable.\n\nIf you want the printf() name to automatically show in your disassembly, either export debug symbols or stick with using external DLLs. Alternatively, you may be able to use IDA's FLIRT libraries to identify the printf() function in the embedded library code.\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "Feb 20, 2014 at 18:13",
      "is_accepted": false,
      "comments": []
    }
  ]
}