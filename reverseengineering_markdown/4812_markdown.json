{
  "title": "Suspicious breakpoint message in ollydbg",
  "link": "https://reverseengineering.stackexchange.com/questions/4812/suspicious-breakpoint-message-in-ollydbg",
  "content": "I want to set a breakpoint and suddenly the following message appears:\n\nWithout knowing what that is, I would guess that is not allowed to set the breakpoint.\nSo my question would be:\n\nHow can I bypass the annoying message? Or better: what must I do to not see this?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ollydbg"
  ],
  "user": "user3097712",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "PE files have several sections like .code , .data, .bss etc. Each of the sections have a special purpose, such as the .code section usually contains the programs code i.e. the instructions, the .data sections houses the initialized variables etc.\n\nThe above rule is merely a convention followed by compilers. In a packed/obfuscated program, the convention may not always hold true. You can have instructions in data segment and vice-versa. This is done for various reasons like thwarting analysis ,disassembly etc.\n\nWhen in Ollydbg you try to set a INT3 breakpoint on an instruction that happens to be in a section marked for data, Ollydbg would complain and that is the message you see. \n\nThe reason for this is suppose that the instruction you set a breakpoint on is actually data. In this case, when the program reads in the value at the address it would read 0xCC (INT3 -> 0xCC) instead of the actual value. That can crash the program. Further since this is a read operation, the breakpoint will never be hit.\n\nIf you want, you may disable the message in Ollydbg options, however doing that is not always recommended. Instead if you are sure that it is an instruction, you may ignore the warning and set the breakpoint.\n\nThe other way is instead of using a INT3 breakpoint, set a Hardware breakpoint (HWBP) on execution at the aforesaid address. This way the program would not crash, even if the hwbp was set on data. HWBP's are enforced my the CPU and does not modify the program in any way unlike INT3 breakpoints\n\n",
      "votes": "6",
      "user": "0xec",
      "time": "Jul 9, 2014 at 3:30",
      "is_accepted": true,
      "comments": [
        {
          "user": "user3097712",
          "text": "thank you for your great answer. I have read about Hardware Breakpoints, so then I will try it. Again, thx.",
          "time": null
        },
        {
          "user": "user3097712",
          "text": "EDIT: Hardware Breakpoint did not work because suddenly the process is terminated before the breakpoint comes. So, I try again a software breakpoint, ignore the message let run ollydbg and it helps",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@user3097712 It is possible to detect hardware breakpoints as an anti-debugging feature. See this",
          "time": null
        }
      ]
    }
  ]
}