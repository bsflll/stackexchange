{
  "title": "How do people typically RE large binaries with lots of threads and imports? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/15584/how-do-people-typically-re-large-binaries-with-lots-of-threads-and-imports",
  "content": "If you have a 40MB PE that has a lot of dynamic third-party imports and threads how do you typically see what it's doing without manually documenting every routine and then tracking thread creation? Using IDA Pro or OllyDbg.\n\nI've seen people RE such binaries inside a five-hour sitting even where it had some custom obfuscation..\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "559",
  "tags": [
    "thread"
  ],
  "user": "user1276423",
  "time": "7 years ago",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "there's no magic solution. just work through it. practice with small binaries first to gain experience.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "One method I tend to use (with IDA):\n\nYou might need to find and rebuild IAT (Import Address Table). For this purpose, the IDC script \"renimp.idc\" comes handy.\n\nAfter doing the previous steps, hopefully, you will have a database without the initial compression/obfuscation layers with most/all function calls resolved.\n\nMy 2 cents.\n\n",
      "votes": "1",
      "user": "joxeankoret",
      "time": "Jun 19, 2017 at 8:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "user1276423",
          "text": "It was more of a question of actually reversing the binary to see what it does with all the threads and imports without documenting every routine. I currently document routines statically then do dynamic and break on thread creation.  I see other people navigate large binaries in a third of the time to do things like figure out file formats and crypto keys across dozens of threads.",
          "time": null
        },
        {
          "user": "joxeankoret",
          "text": "You can run a tool like SysInternal's Process Monitor or use a sandbox like Cuckoo Sandbox to see what is it doing, etc... However, there is no magic way to determine what a huge binary does without actually digging into it and documenting what it does. There are scripts and plugins for IDA for detecting usual encryption methods, you can find some known APIs to try determine what is it doing, etc... But is not enough, usually.",
          "time": null
        },
        {
          "user": "user1276423",
          "text": "I seen a person once do a larger windows PE than I described from Linux using IDA and a VM, and they made tools for the custom file formats and encryption inside a couple days. It seems there are more efficient methods than static documenting then doing runtime and referencing notes on thread and buffer BP  I'm not a fan of the sandbox logging method a lot of malware researchers use.. It's worthless for learning file formats or static encryption..",
          "time": null
        },
        {
          "user": "Vitaly Osipov",
          "text": "@user1276423 perhaps ask that superman person then.",
          "time": null
        }
      ]
    }
  ]
}