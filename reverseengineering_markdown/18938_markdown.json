{
  "title": "Reversing video protocol for chinese drone so i can view the stream outside of the app",
  "link": "https://reverseengineering.stackexchange.com/questions/18938/reversing-video-protocol-for-chinese-drone-so-i-can-view-the-stream-outside-of-t",
  "content": "I am trying to view the video stream of the vento protocol air drone on my computer.  The final goal is to get the video stream into python or c++ for opencv; however, if i can just view it in a window that would work too.  This is my first reverse engineering project ever. \n\nThe drone communicates with the phone over wifi, It creates a hotspot which the phone connects to. Then through the app you can view the video and also control the drone.  The first thing i did was port scan it and found out it had udp port 67 (for dhcp I think) and 49153. I also captured the wireless traffic between my phone when I was streaming the video, but not controlling, in an attempt to identify what protocol it was using and implement it on the pc.  In the capture it has a bunch of udp packets of length 1516 coming from the drone to the phone and a few smaller packets.  I think the bigger packets are the video. There are also a bunch of 802.11 packets being exchanged between the drone and the phone, even after the initial connection. I tried decoder the larger udp packets for a few different video streaming protocols but they all just made junk.  Here is a tar of the capture.\n\nI also looked into decompiling the app.  I couldn't manage to get anything id consider usable out of it.  Every class was the exact same with a single call to another method and passed a bunch of numbers. But I couldn't decompile that class.\n\nAlso looking inside of the drone the wifi seems to be controlled with a marvell 88w8801-nmde.\n\nWhile it would be great if someone just told me the protocol, i would appreciate just as much someone pointing me in the right direction as this is a good learning opportunity I think.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "840",
  "tags": [
    "disassembly",
    "android",
    "java"
  ],
  "user": "beezow doo zoppity bop bop bop",
  "time": "Jul 31, 2018 at 3:03",
  "comments": [
    {
      "user": "Rocky Raccoon",
      "text": "I am trying to accomplish a similar goal, working with an Android app that contains a set of C++ shared objects that apparently handle the connection that I am trying to emulate. I just posted a related question on Stackoverflow - stackoverflow.com/questions/56281339/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Dowload the apk and open it in jadx or any such decompiler tool. The app is not obfuscated. package com.lewei.lib looks promising with classes like VideoPlayer, FlyCtrl, H264Frame etc. On looking closely it can be seen that the app is trying to load multiple native libraries using System.loadLibrary. These .so files can be found in lib directory once the apk is unzipped. You'll need a good disassembler/decompiler(like IDA) to analyze these native libraries. Also you can try to find sources for liblewei over the internet.\n\n",
      "votes": "3",
      "user": "sudhackar",
      "time": "Jul 31, 2018 at 9:21",
      "is_accepted": false,
      "comments": []
    }
  ]
}