{
  "title": "Decoding the Apple vendor tag in the 802.11 beacon",
  "link": "https://reverseengineering.stackexchange.com/questions/31710/decoding-the-apple-vendor-tag-in-the-802-11-beacon",
  "content": "Looking to answer Is there a way to detect if you're connected via a shared WiFi Hotspot? on apple.stackexchange.com lead me to How does iOS and OS X detect when a Wi-Fi network is a personal hotspot?.\n\nI did some research into both questions, and determined that personal hotspot was communicated as part of the vendor tag / information element in the beacon.\n\nI want to see if we can decode the Apple vendor tag in the 802.11 beacon to see exactly which elements are what, including what defines if it is a personal hotspot. If we do perhaps we can include it in the Wireshark decoding.\n\nDoing a trace of my iPhone with Wireshark I see:\n\n```\n  Tag: Vendor Specific: Apple, Inc.\n    Tag Number: Vendor Specific (221)\n    Tag length: 10\n    OUI: 00:17:f2 (Apple, Inc.)\n    Vendor Specific OUI Type: 6\n    Vendor Specific Data: 06010103030000\n\nHex:  dd 0a 00 17 f2 06 01 01 03 03 00 00\n\n```\nA guide about making OpenWRT appear as a personal hotspot they used  vendor_elements=DD0A0017F206010103010000'  and it worked (ref yichya.dev).\n\nSome additional info that can help. If you run airport -s --xml on MacOS you can see both the IE and what appears to be some parsing of the element:\n\n```\n      <key>IE</key>\n      <data>\n      AA9hcF9taXNoYXJlX2NmNjABCIwSmCSwSGBsIAEAOwUAU1R9gTAUAQAAD6wE\n      AQAAD6wEAQAAD6wCDAAtGu8AE///AAAAAAAAAAAAAAAAAAAAAAAAAAEAPRaV\n      BREAAAAAAAAAAAAAAAAAAAAAAAAA3RgAUPICAQGBAAIyAAAiMgAAQjJeAGIy\n      LwC/DLIAgDP6/2ID+v9iA8AFAZsA+v9/CAUACAAAAABA/xYjAAAAAAAAAAAA\n      AAAAAAAAAADw//D//wok9H8AD/z/AZsA3QoAF/IGAQEDAQAA\n      </data>\n      <key>IOS_IE</key>\n      <dict>\n         <key>IOS_IE_FEATURES</key>\n         <data>AQAA</data>\n         <key>IOS_IE_FEATURE_VERSION</key>\n         <integer>1</integer>\n         <key>IOS_IE_FEATURE_WOW_DISALLOWED</key>\n         <true />\n      </dict>\n\n```\nUser @hewigovens found a private method determine if it is a personal hotspot based on the IOS_IE (ref):\n\n```\nchar -[CWNetwork(Private) isPersonalHotspot](void * self, void * _cmd) {\n    eax = [*(self + 0x4) objectForKey:@\"IOS_IE\"];\n    eax = LOBYTE(eax != 0x0 ? 0x1 : 0x0) & 0xff;\n    return eax;\n}\n\n```\nAt minimum I think this should be enough for us to determine which bit(s) encode if it is hotspot.\n\nWhat do IOS_IE_FEATURES / IOS_IE_FEATURE_VERSION / IOS_IE_FEATURE_WOW_DISALLOWED represent? How do they map to the vendor tag?\n\nI had a different vendor tag then yichya.dev 06 01 01 03 03 00 00 vs. 06 01 01 03 01 00 00 but the decoded XML elements were the same.\n\nIOS_IE_FEATURE_WOW_DISALLOWED might represent Woke on Wireless, but not sure if that is configurable to test.\n\nAlso can we get more insight from the CoreWLAN implementation?\n\nThis same vendor tag might be used for CarPlay networks, what does it look like in a trace?\n\nWas this tag used with AirPort routers? Do we have examples?\n\nFor iPhone and personal hotspot are there any settings I can change to see if results in any changes?\n\nThe first octet is probably the length: 06\n\nEdit: The first octet is the Vendor Specific OUI Type. In this case 06. For the same OUI (00:17:f2) iOS devices also uses OUI Type 10 in the Probe Request and Associate Request (ref)\n\nDecoding IOS_IE_FEATURES value AQAA from base64 gives us 01 00 00 which doesn't directly map the vendor tag for either example, but it might just be the first octet that matters.\n\nOne of the octets is probably IOS_IE_FEATURE_VERSION: 01\n\nThe next octet matches for both, but unsure the meaning: 03\n\nThe final octet is 01 for them and 03 for me.\n\n",
  "votes": "4",
  "answers": 0,
  "views": "769",
  "tags": [
    "debugging",
    "ios",
    "protocol",
    "osx",
    "networking"
  ],
  "user": "thewade",
  "time": "Mar 25, 2023 at 22:44",
  "comments": [
    {
      "user": "thewade",
      "text": "Microsoft introduced a standard to communicate tethered / metered connection information part of the beacon: learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nct/â€¦",
      "time": null
    }
  ],
  "answers_data": []
}