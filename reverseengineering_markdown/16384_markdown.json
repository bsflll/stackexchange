{
  "title": "What kind of assembly language construct is this?",
  "link": "https://reverseengineering.stackexchange.com/questions/16384/what-kind-of-assembly-language-construct-is-this",
  "content": "I am reversing an ELF64 executable created on AMD X86-64. I encountered this line near the end of the file and am puzzled to its meaning:\n\n```\nnop    WORD PTR cs:[rax+rax*1+0x0]\n\n```\nIn this case rax contains 0x2329.  However, nop means 'do nothing', so I am puzzled as to why there are arguments included on the line.  The code is loaded with libc function calls so I am assuming the source code is C/C++ and not GAS.\n\nThis post has good content but perror's explanation is more apropos and contains more \"why\" than a mere recital of the Intel docs.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "539",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "Not a machine",
  "time": "Sep 22, 2017 at 14:27",
  "comments": [
    {
      "user": "TkTech",
      "text": "Possible duplicate of nop with argument in x86_64",
      "time": null
    },
    {
      "user": "Not a machine",
      "text": "Thank you.  I missed that posting somehow.    It is similar however I believe the response \"The one-byte NOP instruction is an alias mnemonic for the XCHG (E)AX, (E)AX instruction\" is not valid on IA-32 and 64 processors.  At least according to the Intel documents.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are mainly two usage of the nop instructions:\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Not a machine",
          "text": "Thank you.  Looking at the surrounding code the delay slot answer makes complete sense.  It very much resembles the   NOP DWORD ptr [EAX + EAX *1 +  0x0   8 byte eample in the Intel docs.",
          "time": null
        }
      ]
    }
  ]
}