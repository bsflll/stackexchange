{
  "title": "How can I obtain the data of how many memory references are symbolized by IDA-Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/8590/how-can-i-obtain-the-data-of-how-many-memory-references-are-symbolized-by-ida-pr",
  "content": "We all know that in typical programs, there exist some references. \n\n\n\nWhen compiling, linker will translate all the memory references into concrete memory addresses during the symbol relocation step. And by doing some quick experiments (IDA-Pro 6.4), I notice that IDA-Pro can help to lift these memory addresses back into symbols. \n\nHowever, I found that the symbolization functionality of IDA-Pro can be mislead by some cases. So what I am interested is to calculate how many references have been recovered by IDA-Pro. I am asking that is there anyway to obtain the information of \"how many memory references are recovered by IDA-Pro?\"\n\nThanks @Jason a lot for his answer, but what I am trying to do is not collect all the labels. Here is an example:\n\n\n\nPlease pay attention to the symbol sub_80484AE in address 0x804a020. Note that the 4 byte data 0x08, 0x04, 0x84, 0xae in porocessed binary are considered as a symbol, as it is equal to the beginning address of function sub_80484AE. This is true. However, as no instruction refers to the address 0x804A020, so there is no name in address 0x804a020. \n\nWhat I want to collect is all the symbols with its corresponding address, for example, in the above case, I need to collect this \n\n```\n0x804a018 : sub_804847b\n0x804a01dc : _strchr\n0x804a020 : sub_80484AE\n\n```\nAm I clear enough? I really appreciate if anyone can give me some help! Thank you a lot!!\n\n----------------------------------------------- update ---------------------------------------\n\nAm I still not clear enough? \n\nLet me put it in this way. Can I obtain all the symbol information which used to be resolved by linker? Say, in the picture I updated, during compiling linker resolved three symbols, at memory address 0x804a018, 0x804a01dc, 0x804a020. IDA-Pro recovers some of these information. So I want to collect all the IDA recovered symbol information (this information could be function name, or it could be an entry of jump table, or it could be a jump destination, as I draw in the picture). \n\nNote that I want to recover the information in a format that each resolved symbol together with the memory address. For example in the picture, it should be:\n\n```\n0x804a018 : sub_804847b\n0x804a01dc : _strchr\n0x804a020 : sub_80484AE\n\n```\nI am thinking to traverse all the memory address of a binary, and check each the oprend of instruction (or content if it is in the data section), to see whether it is a recovered symbol or not. If so, I will store this symbol together with this instruction (or data)'s memory address.\n\nBut basically how to check whether a oprend in a instruction is a symbol? \n\n",
  "votes": "2",
  "answers": 1,
  "views": "735",
  "tags": [
    "ida",
    "symbols"
  ],
  "user": "lllllllllllll",
  "time": "Apr 7, 2015 at 0:19",
  "comments": [
    {
      "user": "Dominik Antal",
      "text": "Sorry for the off topic, may I ask what did you use to create the function graph?",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@DominikAntal, I use tiKz.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If I understand your question correctly, you're asking how many addresses have names.\n\nFor example, in the following snippet, two of the addresses in the snippet have names (loc_4385E4 and dword_4385F8), since both are cross-referenced from other addresses:\n\n```\n.text:004385E4 loc_4385E4:                             ; CODE XREF: sub_4254E0+1C0j\n.text:004385E4                                         ; CODE XREF: sub_4254E0+1E6j\n.text:004385E4                 push    ecx\n.text:004385E5                 push    ecx\n.text:004385E6                 push    0Eh\n.text:004385E8                 pop     edx\n.text:004385E9                 mov     ecx, offset dword_438618\n.text:004385EE                 call    sub_4421A7\n.text:004385F3                 jmp     loc_4256A6\n.text:004385F3 ; END OF FUNCTION CHUNK FOR sub_4254E0\n.text:004385F3 ; ---------------------------------------------------------------------------\n.text:004385F8 dword_4385F8    dd 1000000Ah, 80204h, 10000h, 80010000h\n.text:004385F8                                         ; DATA XREF: sub_4254E0+13092o\n\n```\nYou can use the IDC script below to count all named addresses in your disassembly:\n\n```\nauto ea;\nauto names = 0;\n\nfor (ea = BeginEA(); ea != BADADDR; ea = NextNotTail(ea))\n{\n    if (Name(ea) != \"\")\n    {\n        names++;\n    }\n}\n\nMessage(\"%d named addresses found.  \n\", names);\n\n```\n​\n\nEdit\n\nThe change you made to your original question now makes it sounds like you want to capture all function names. To do this, open the Functions window (in the menubar: View → Open subviews → Functions), right-click in the Functions window, and choose Copy all. You can now paste the list of function names into a text editor or spreadsheet.\n\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Apr 2, 2015 at 18:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Hello Jason, thank you for your answer. I haven't tested yet, but in the above case, what if dword_4385F8 is a function pointer array? I want to calculate, say, in the array, how many entries (memory addresses) have been symbolized by IDA-Pro.",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "Sum up the labels could be a subset of all the symbolized references, as there could be multiple references, say, data to code references, that points to the same function.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "\"how many entries (memory addresses) have been symbolized by IDA-Pro.\" -- If an entry is directly cross-referenced then IDA will give it a name and the script above will include it in the count.",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "Hello Jason, I updated my question. Would you mind to take a look? :-) Am I clear now?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Answer updated.",
          "time": null
        }
      ]
    }
  ]
}