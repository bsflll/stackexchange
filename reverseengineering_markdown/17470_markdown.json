{
  "title": "explain java bytecode",
  "link": "https://reverseengineering.stackexchange.com/questions/17470/explain-java-bytecode",
  "content": "I saw java bytecode that need to compare to var,\nif they equal return true, else .....\n\n```\nif(var1==var2)\n   return true;\nelse\n{ ...}\n\n```\non bytecode\n\n```\naload 1\naload 2\nif_acmpne 6\niconst 1\nireturn\n\n```\nI understand iconst1 and ireturn to return true. and understand aload1 and aload2 to load 2 var to stack.\n\nBut how if_acmpne 6 works? what is 6?\nthank\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "java",
    "byte-code"
  ],
  "user": "cdcsccd",
  "time": "Feb 14, 2018 at 21:17",
  "comments": [
    {
      "user": "dsasmblr",
      "text": "6 is a label/branchoffset. If the comparison shows that the two values are not equal, then execution jumps to the instruction at location 6 (in your example, that is). Good resources here (cs.au.dk/~mis/dOvs/jvmspec/ref--24.html) and here (en.wikipedia.org/wiki/Java_bytecode_instruction_listings).",
      "time": null
    },
    {
      "user": "cdcsccd",
      "text": "@dsasmblr in this case 6  is that mean  instruction  no..6  from the beginning of my function? is that depend on my os or on somthing else? or 6 is always  instruction  no. 6?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The if_acmpne instruction pops two objects off the stack and compares them. If they are not equal, then it jumps to the provided offset, which in this case is 6 bytes from the start of the method code.\n\nIn general, you can learn about all of the bytecode instructions by reading the JVM specification here: https://docs.oracle.com/javase/specs/\n\n",
      "votes": "1",
      "user": "Antimony",
      "time": "Feb 14, 2018 at 22:23",
      "is_accepted": false,
      "comments": [
        {
          "user": "cdcsccd",
          "text": "in this case 6  is that mean  instruction  no..6  from the beginning of my function? is that depend on my os or on somthing else? or 6 is always  instruction  no. 6?",
          "time": null
        },
        {
          "user": "Antimony",
          "text": "Instruction sizes are defined by the bytecode format and are OS independent. Most instructions are one byte long (hence the term bytecode), but some are longer. if_acmpne itself is 3 bytes for instance. Again, you really need to read the JVM spec.",
          "time": null
        },
        {
          "user": "cdcsccd",
          "text": "I read the JVM spec, but when i open this class with Krakatau that show that the number that come after if_acmpne define lable name",
          "time": null
        },
        {
          "user": "Antimony",
          "text": "@cdcsccd That's the assembler being helpful. Working with the raw bytes directly is a huge pain, so assemblers define a human readable format which can be mapped to and from the underlying binary classfile. If you want to see the raw classfile, use a hex editor.",
          "time": null
        }
      ]
    }
  ]
}