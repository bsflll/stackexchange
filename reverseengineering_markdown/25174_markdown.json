{
  "title": "Register edx and CreateDevice function DX",
  "link": "https://reverseengineering.stackexchange.com/questions/25174/register-edx-and-createdevice-function-dx",
  "content": "I disassemble CreateDevice function from my DirectX code and commented each paratemer:\n\n```\n.text:0043F485                 mov     eax, [ebp+lpParam]\n.text:0043F488                 add     eax, 730h\n.text:0043F48D                 push    eax  ;LPDIRECT3DDEVICE9\n.text:0043F48E                 mov     ecx, [ebp+lpParam]\n.text:0043F491                 add     ecx, 0B88h\n.text:0043F497                 push    ecx  ;D3DPRESENT_PARAMETERS\n.text:0043F498                 mov     edx, [ebp+var_170]\n.text:0043F49E                 push    edx  ;vertex processing type\n.text:0043F49F                 mov     eax, [ebp+lpParam]\n.text:0043F4A2                 mov     ecx, [eax+728h]\n.text:0043F4A8                 push    ecx  ;hWnd\n.text:0043F4A9                 push    1    ;D3DDEVTYPE_HAL\n.text:0043F4AB                 push    0    ;D3DADAPTER_DEFAULT\n.text:0043F4AD                 mov     edx, [ebp+lpParam]\n.text:0043F4B0                 mov     eax, [edx+734h]\n.text:0043F4B6                 mov     ecx, [ebp+lpParam]\n.text:0043F4B9                 mov     edx, [ecx+734h]\n.text:0043F4BF                 mov     eax, [eax]\n.text:0043F4C1                 push    edx  ;??????????????\n.text:0043F4C2                 mov     ecx, [eax+40h]   ;this pointer\n.text:0043F4C5                 call    ecx  ;call CreateDevice\n.text:0043F4C7                 mov     eax, [ebp+lpParam]\n.text:0043F4CA                 mov     ecx, [eax+730h];LPDIRECT3DDEVICE9 in return\n\n\n```\nUsing experimental way I figured out LPDIRECT3DDEVICE9 variable presents in:\n\n```\n.text:0043F48D                 push    eax  ;LPDIRECT3DDEVICE9\n\n```\nAlso, using debugger I figured out edx register:\n\n```\n.text:0043F4C1                 push    edx  ;??????????????\n\n```\nhas value d3d9.dll:6521F191 db 0B8h what in expand view is:\n\n```\nd3d9.dll:6521F191 db 0B8h ; ¬\nd3d9.dll:6521F192 db  48h ; H\nd3d9.dll:6521F193 db  77h ; w\nd3d9.dll:6521F194 db  23h ; #\n\n```\nMy question, why before CreateDevice function calling is there \"push edx\" line of code? In my example I used OOP and ecx is this pointer:\n\n```\n.text:0043F4C2                 mov     ecx, [eax+40h]   ;this pointer\n\n```\nBut what purpose is this line of code:\n\n```\n.text:0043F4C1                 push    edx  ;d3d9.dll:6521F191 db 0B8h ; ¬\n\n```\nIs it like this pointer for DirectX COM interface or what?\n\nThanks in advance!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "72",
  "tags": [
    "ida",
    "disassembly",
    "c++"
  ],
  "user": "black4joss",
  "time": "May 31, 2020 at 16:36",
  "comments": [],
  "answers_data": [
    {
      "content": "DirectX  interfaces like  IDirect3D9/IDirect3DDevice9 are COM interfaces and not C++ classes.\n\nCOM (OLE2) predates the wide use of C++ and uses a C-compatible calling convention, __stdcall, instead of the C++specific __thiscall. The use of ecx is a red herring; here it's used to load the function pointer (IDirect3D9::CreateDevice) and jump to it, not as the this pointer. The first argument to the call (push edx) is the This pointer (the interface itself). \n\nIn C syntax, the call would look like this:\n\n```\nIDirect3D9 *d3d = Direct3DCreate9(D3D_SDK_VERSION);\nIDirect3DDevice9 *pDevice;\nd3d->lpVtbl->CreateDevice(d3d, adapter, D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, BehaviorFlags, &presentationParameters, &pDevice);\n\n```\nAll arguments to CreateDevice are pushed on the stack according to the __stdcall convention.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "May 31, 2020 at 17:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}