{
  "title": "Understanding assembly code: \"mov dword\" and \"mov qword\" in main.c",
  "link": "https://reverseengineering.stackexchange.com/questions/20363/understanding-assembly-code-mov-dword-and-mov-qword-in-main-c",
  "content": "I have just converted this piece of code in assembly:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char** argv) {\n    return (1);\n}\n\n```\nHere are my questions:\n\nBelow is the assembly code generated from my c program:\n\n```\nSECTION .text   align=1 execute                         ; section number 1, code\n\nmain:   ; Function begin\npush    rbp                                     ; 0000 _ 55\nmov     rbp, rsp                                ; 0001 _ 48: 89. E5\nmov     dword [rbp-4H], edi                     ; 0004 _ 89. 7D, FC\nmov     qword [rbp-10H], rsi                    ; 0007 _ 48: 89. 75, F0\nmov     eax, 1                                  ; 000B _ B8, 00000001\npop     rbp                                     ; 0010 _ 5D\nret                                             ; 0011 _ C3\n; main End of function\n\n\nSECTION .data   align=1 noexecute                       ; section number 2, data\n\nSECTION .bss    align=1 noexecute                       ; section number 3, bss\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "8k",
  "tags": [
    "assembly"
  ],
  "user": "supmethods",
  "time": "Jan 14, 2019 at 0:34",
  "comments": [],
  "answers_data": [
    {
      "content": "Variables are aligned to some extent to help faster access to them. The alignment value is usually an implementation detail, but compilers usually follow Intel's recommendations to align/place variables next to each other.\n\nAccording to Intel® 64 and IA-32 Architectures Optimization Reference Manual, section 3.6.7 Stack Alignment*:\n\nIn your case on x64 the registers are 8 bytes wide and argc being an int is 4 bytes wide. Following the guideline above the variables are aligned to 8-byte boundary.\n\n```\n ► 0x5555555545fe <main+4>                   mov    dword ptr [rbp - 4], edi\n   0x555555554601 <main+7>                   mov    qword ptr [rbp - 0x10], rsi\n   0x555555554605 <main+11>                  mov    eax, 0x2a\n   0x55555555460a <main+16>                  pop    rbp\n   0x55555555460b <main+17>                  ret    \n\n```\nedi stores argc a 32 bit value - packed in a 64 bit boundary with the upper 32 bits of no use for you.\n\n```\npwndbg> tele rbp-0x10\n00:0000│          0x7fffffffdf10 —▸ 0x7fffffffe000 ◂— 0x1\n01:0008│          0x7fffffffdf18 ◂— 0x0\n02:0010│ rbp rsp  0x7fffffffdf20 —▸ 0x555555554610 (__libc_csu_init) ◂— push   r15\n\n```\nSo the argv starts 8 bytes above argv\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}