{
  "title": "Attaching into an x86 process in windbg",
  "link": "https://reverseengineering.stackexchange.com/questions/33174/attaching-into-an-x86-process-in-windbg",
  "content": "How can I attach into an x86 process from windbg?\n\ncurrently I am waiting for the process to load then I am breaking into wow64cpu!KiFastSystemCall to switch into x86 context and only then put bp to the instruction of interest, the problem is by the time I am doing it the instruction has already been executed.\nOther approached like sxe just doesn't work, is it because its x86 process or am I doing something wrong?\nI would appreciate a detailed answer about how to do it.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "110",
  "tags": [
    "debugging",
    "x86",
    "windbg",
    "breakpoint"
  ],
  "user": "Michael",
  "time": "Aug 21, 2024 at 18:53",
  "comments": [
    {
      "user": "blabb",
      "text": "use x86 version of windbg for x86 applications then you don't have to deal with wow also attaching means you are dealing with a running process so initialisation code would have been executed  try creating the process like windbg foo.exe to debug from beginning if that is what you mean in your query",
      "time": null
    },
    {
      "user": "rotem.salinas",
      "text": "Are you debugging the process from a kernel debugger? or just in a regular user-mode context?",
      "time": null
    },
    {
      "user": "Michael",
      "text": "kernel debugger",
      "time": null
    },
    {
      "user": "blabb",
      "text": "If you are able to run ntsd in the target you can use ntsd -d to redirect your app to the kernel debugger. Search ntsd -d  in stack overflow under my nick like user:xxxcc ntsd -d you should hit several posts explaining how to do it",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Try this, the code is in here.\n\nIt basically puts a breakpoint on nt!NtCreateUserProcess and parses the args to check if the process name is the wanted target process.\n\nAnd in case of the finding the target process it switches to the process context by using .process /i <eprocess_address> and then continuing the execution with g to break in the target process context.\n\nCredits to my co-worker Shaked Reiner :)\n\n",
      "votes": "0",
      "user": "rotem.salinas",
      "time": "Sep 1, 2024 at 22:17",
      "is_accepted": true,
      "comments": []
    }
  ]
}