{
  "title": "Convert string to byte array in frida js script",
  "link": "https://reverseengineering.stackexchange.com/questions/32790/convert-string-to-byte-array-in-frida-js-script",
  "content": "I am having an issue with a JavaScript script to be executed in Frida. In this case, I am intercepting an input from a function where I receive an array of bytes. I need to convert this array to a string, modify it, and then convert it back to an array of bytes before returning the value.\n\nI managed to make the first step work correctly, which is converting the array of bytes into a string and modifying the string. However, the problem arises when I try to convert the string back into an array of bytes; it throws an error. I tried using the Java native function getBytes(), but it gives the error below:\n\n```\nTypeError: not a function\n\n```\nMy code is:\n\n```\n//result is byte[]\nlet StringJava = Java.use(\"java.lang.String\");\nvar json = StringJava.$new(result);\ntry {\n  let arg1 = StringJava.$new(\": 0,\");\n  let arg2 = StringJava.$new(\": 1000,\");\n  json = json.replace(arg1,arg2);\n  let newByte = json.getBytes(); //error in line\n  return newByte;\n} catch (error) {\n  console.log(\"error:\", error);\n}\n\n```\nIs there a simple way for me to convert this string back into an array of bytes?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "453",
  "tags": [
    "java",
    "javascript",
    "frida"
  ],
  "user": "VinixF",
  "time": "Dec 7, 2024 at 14:35",
  "comments": [],
  "answers_data": [
    {
      "content": "The only problem of your code seems to that frida wants to help you too much:\n\nBefore you call json = json.replace(arg1,arg2); json is an instance of the Java type java.lang.String.\n\nWhen you assign the return value of the replace method to json,  frida seems to automatically convert the Java String to a JavaScript string (I assume for convenience).\n\nIf you then try to call getBytes() on the JavaScript string it fails because JavaScript strings don't have this method. As workaround you could change the line to json = StringJava.$new(json).getBytes(), however that would require a lot of unnecessary conversions.\n\nIn the end I would recommend to do the whole string replacement with JavaScript code and only for calling getBytes() make it a Java string.\n\nMy complete and working test script is this:\n\n```\nJava.perform(() => {\n\n    function test(result) {\n        let StringJava = Java.use(\"java.lang.String\");\n        var json = String(result); // may be unnecessary, just to make sure json is a JavaScript string\n        try {\n            let arg1 = \": 0,\";\n            let arg2 = \": 1000,\";\n            json = json.replace(arg1, arg2);\n            return StringJava.$new(json).getBytes();\n        } catch (error) {\n            console.log(\"error:\", error);\n        }\n    }\n\n    var bytes = test('{ \"a\": 0, \"b\": 1 }');\n    // do something with bytes\n\n});\n\n```\n",
      "votes": "0",
      "user": "Robert",
      "time": "Mar 8, 2024 at 16:28",
      "is_accepted": false,
      "comments": []
    }
  ]
}