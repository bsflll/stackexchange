{
  "title": "Firmware disassembler for c-sky processor (ck803s)",
  "link": "https://reverseengineering.stackexchange.com/questions/32676/firmware-disassembler-for-c-sky-processor-ck803s",
  "content": "can you tell me why objdump does not correctly disassemble the firmware for the C-SKY (ck803s) processor? what is .long: between the lines, unknown instructions? or am I setting the parameters for objdump incorrectly? here are mine: ./objdump -D -b binary -m csky:cs803 -EL firmware.bin\n\n\n\nfrom off. sources use CK803S processor\n\n\n\nthis is how the bootloader works\n\n\n\nThe firmware is launched from the specified address at offset 0x04, look at the dump merged from the flash drive\n\n\n\nobjdump output\n\n\n\n",
  "votes": "0",
  "answers": 2,
  "views": "203",
  "tags": [
    "firmware-analysis"
  ],
  "user": "Andynvkz",
  "time": "Jan 29, 2024 at 13:32",
  "comments": [
    {
      "user": "Rup",
      "text": "Are you sure that’s a code segment? I haven’t used objdump for ages, but it does say data at the top not code. Do you know what the entry point for the loaded firmware is?",
      "time": null
    },
    {
      "user": "Andynvkz",
      "text": "There is no 32-bit instruction from the entire dump",
      "time": null
    },
    {
      "user": "Andynvkz",
      "text": "I had an idea to write my own disassembler, but then the first instruction is 0xC001112C, according to the description this is a 32-bit instruction, this is indicated by bits 30 and 31, but I did not find such an instruction in the documentation",
      "time": null
    },
    {
      "user": "Andynvkz",
      "text": "Is it possible to tell objdump that the data and instructions are 32 bit? it even selects the data as 16-bit little-endian",
      "time": null
    },
    {
      "user": "jsotola",
      "text": "please do not post pictures of text ... post the text instead ... idownvotedbecau.se/imageofcode",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You've asked multiple questions. I don't know that version of objdump enough to comment on whether its a bug or missing option.\n\nHowever, I can explain how the 32-bit instructions work.\n\nThe c-sky instruction stream is a series of 16-bit words.  If bits 15 and 14 of the instruction word are NOT both 1s then it's a 16-bit instruction.\nHowever, if bits 15 and 14 of the instruction word are both 1s then it's a 32-bit instruction with the low 16-bits of the instruction in the following word.\n\nConsider a hypothetical instruction with hex coding C1234567.\n\nThis will be stored as two 16-bit words C123 and 4567 in that order\n\nIn a big-endian environment, this will be stored as the following bytes -\n\n```\nC1 23 45 67\n\n```\nIn a little-endian environment, this will be stored as the following bytes -\n\n```\n23 C1 67 45\n\n```\nIn your firmware above the instruction at 3001000 is correct but the following instruction at 3001002 is actually C0016420\n\n```\n03001000: 112c      lrw     r1, 0x80000100\n03001002: c0016420  mtcr    r1, cr<0,0>\n\n```\nWriting to control registers is very plausible in boot/init code.\n\nThe later 32-bit instruction with .long in the objdump output also seem to make sense.\n\n",
      "votes": "1",
      "user": "Ian Cook",
      "time": "Feb 10, 2024 at 16:39",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The whole problem is that all versions of objdump and even llvm-objdump incorrectly disassemble 32-bit instructions of C-SKY processors, I managed to find a working objdump version 2.27 on the website https://www.xrvm.cn/ there is also an Eclipse-based IDE\n\n\n\n",
      "votes": "1",
      "user": "Andynvkz",
      "time": "Feb 24, 2024 at 4:19",
      "is_accepted": true,
      "comments": []
    }
  ]
}