{
  "title": "Help understanding ARM Assembly example code - loops, set flags and code mnemonics",
  "link": "https://reverseengineering.stackexchange.com/questions/20410/help-understanding-arm-assembly-example-code-loops-set-flags-and-code-mnemoni",
  "content": "This is the example code:\n\n```\n_start:\nLDR r0, =n\nLDR r0, [r0]\nLDR r1, =array1\nMOV r2, #0\nLDR r4, =array2\nloop:\nLDR r3, [r1], #4\nCMP r3, #58\nBGT a_point\nCMP r3, #47\nBLT a_point\nSUB r3, r3, #0x30\nSTR r3, [r4], #4\n\na_point:\n    subs r0, r0, #1\n    BGT loop\n\nstop:\n    b stop\n\n.Data\nn: .word 6\narray1: .word 0x30, 0xFFFFFFF5, 0x37, 0x4b, 0x18, 0x40\narray2: .word 0x01, 0x0, 0x0, 0x0, 0x0, 0x0\n\n```\nI'm having trouble understanding how the loop works, what it does and specifically how the branch instruction work on pair with the -lt and -gt suffixes. What is the purpose of this simple program? Thanks in advance for your help.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "135",
  "tags": [
    "assembly",
    "arm"
  ],
  "user": "m4mmt",
  "time": "Jan 18, 2019 at 10:59",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "could you re-check this code? It's kind of strange that r0 is decremented as a counter and not used within the loop.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "r0 = counter used to check  n  members unconditionally of array   a = array1[1]  if (a >58 || a < 47)  goto dec  n else a = a-30  array1[1] = a & dec n;",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "@PawełŁukasik LDR increments the array pointer so there is no need to use the counter for indexing",
      "time": null
    },
    {
      "user": "m4mmt",
      "text": "I got the code from my course. I double checked and it's correct, even if it's quite weird. I was hoping that someone that knows a bit more than me on assembly for arm could describe to me what's the purpose of the program.",
      "time": null
    }
  ],
  "answers_data": []
}