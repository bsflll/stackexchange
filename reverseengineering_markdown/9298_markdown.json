{
  "title": "Illegal Instruction on sample Buffer Overflow exploit",
  "link": "https://reverseengineering.stackexchange.com/questions/9298/illegal-instruction-on-sample-buffer-overflow-exploit",
  "content": "I have followed the example here.\n\nHere is my sample program, \"oldskool.c\":\n\n```\n#include <string.h>\nvoid go(char *data) {\n    char name[64];\n\n    strcpy(name, data);\n}\n\nint main (int argc, char **argv) {\n    go(argv[1]);\n}\n\n```\nI have compiled this program using:\n\n```\ngcc oldskool.c -o oldskool -zexecstack -fno-stack-protector -g\n\n```\nI have also switched ASLR off.\n\nUsing gdb's x/gx $rsp, I verified that passing in an argument of perl -e 'print \"A\"x80' will overwrite the SIP exactly. Here is the output of p &name\n\n```\n$1 = (char (*)[64]) 0x7fffffffddc0\n\n```\nI then took the example shellcode, and adding the padding and the SIP, came up with this:\n\n```\n./oldskool `perl -e 'print \"\\xeb\\x22\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xd2\\x48\\xff\\xc0\\x48\\xff\\xc7\\x5e\\x48\\x83\\xc2\\x04\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xd9\\xff\\xff\\xff\\x48\\x61\\x78\\x21\" . \"A\"x27 . \"\\xc0\\xdd\\xff\\xff\\xff\\x7f\"'`\n\n```\nWhen I run this, however, I get an \"Illegal Instruction\" error. Here's what gdb will tell me:\n\n```\nStarting program: /path/to/oldskool `perl -e 'print \"\\xeb\\x22\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xd2\\x48\\xff\\xc0\\x48\\xff\\xc7\\x5e\\x48\\x83\\xc2\\x04\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\\xc0\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xd9\\xff\\xff\\xff\\x48\\x61\\x78\\x21\" . \"A\"x27 . \"\\xc0\\xdd\\xff\\xff\\xff\\x7f\"'`\n\nProgram received signal SIGILL, Illegal instruction.\n0x00007fffffffddc0 in ?? ()\n\n(gdb) x/10i 0x7fffffffddc0\n=> 0x7fffffffddc0:  (bad)  \n   0x7fffffffddc1:  (bad)  \n   0x7fffffffddc2:  (bad)  \n   0x7fffffffddc3:  incl   (%rax)\n   0x7fffffffddc5:  add    %al,(%rax)\n   0x7fffffffddc7:  add    %ah,-0x1e(%rcx)\n   0x7fffffffddcd:  jg     0x7fffffffddcf\n   0x7fffffffddcf:  add    %ch,%bl\n   0x7fffffffddd1:  and    0x31(%rax),%cl\n   0x7fffffffddd4:  rorb   $0xff,0x31(%rax)\n\n```\nDoes anyone have any clue as to what is causing this error? \n\n",
  "votes": "4",
  "answers": 1,
  "views": "4k",
  "tags": [
    "linux",
    "exploit",
    "shellcode"
  ],
  "user": "Adam Denoon",
  "time": "Jul 6, 2015 at 20:16",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "It would help to examine the values at the disassembled locations.  That way, you'll know if your shellcode is anywhere nearby.  The solution might then be obvious.",
      "time": null
    },
    {
      "user": "RoraΖ",
      "text": "Is your shellcode stack aligned?  You might be corrupting your stack.  Is everything the right endianness?  Backwards instructions would be bad.",
      "time": null
    },
    {
      "user": "Adam Denoon",
      "text": "@peter, Which locations, specifically, would you recommend providing disassembly information for?",
      "time": null
    },
    {
      "user": "Adam Denoon",
      "text": "@raz, everything is the right endianness, but I'm not sure what you mean by stack-aligned.",
      "time": null
    },
    {
      "user": "RoraΖ",
      "text": "If your shellcode happens to not land on the 4 byte boundary then you'd be corrupting the stack in a way that would yield an illegal instruction",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Your shellcode is invalid. Change it to \\x90\\x90\\x90\\x90\\x90\\x90\\xcc to check and detect the correct. \n\n",
      "votes": "1",
      "user": "Stolas",
      "time": "Sep 18, 2015 at 11:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "Adam Denoon",
          "text": "Are you saying to replace the example shellcode with yours, add padding and address to it, and run it?",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "Well replace the c0ddffffff7f with 9090909090cc",
          "time": null
        }
      ]
    }
  ]
}