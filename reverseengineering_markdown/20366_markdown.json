{
  "title": "Z80 Absolute Jump to offset in middle of instruction",
  "link": "https://reverseengineering.stackexchange.com/questions/20366/z80-absolute-jump-to-offset-in-middle-of-instruction",
  "content": "I'm working on reverse engineering an embedded system which uses a Z80 processor. I'm using IDA as the disassembler. I ran upon an absolute jump (JP) that seems to jump to the middle of another instruction. I undefined and redefined the target location as code, and it disassembled into valid instructions, but they don't appear to do anything. I was wondering if I could get some help making sense of this or if I'm overlooking something.\n\nEdit: \nThis jump is an exit point for a loop. \n\nSource + Bin + IDB file can be found here\n\nJump code:\n\n\n\nJump target with IDA auto disassembly:\n\n\n\nJump target after undefining and redefining 121 as code:\n\n\n\n",
  "votes": "4",
  "answers": 2,
  "views": "516",
  "tags": [
    "ida",
    "embedded"
  ],
  "user": "Zman37",
  "time": "Jan 14, 2019 at 22:00",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. Please post the relevant code as actual text. This will ensure that it can be searched. Images are hard to search for keywords. Thanks.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "without any context we can only guess...\n\nHowever jp (hl) was commonly used for:\n\nNow getting back to jumping into middle of instruction\n\nThis might be or might not be true. If you use disassembler then it does not know where the ORG statement of each code segment is. So it instead translates from start of the file. When you are tracing then it takes the PC as the starting position and translates from it relatively so if you scroll the listing you might got wrongly disassembled other parts of code. However after few continuous single byte instructions the code is aligned again so most of the code would be translated correctly.\n\nBut there are also cases when we deliberately jump to middle of instruction. Sometimes time sensitive code needs exact number of [T] tacts to spend on some routine and jumping in the middle of some instruction can resolve missing [T] states after some conditional behavior.\n\n",
      "votes": "1",
      "user": "Spektre",
      "time": "Jan 14, 2019 at 8:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "Zman37",
          "text": "In this case it is a #2 scenario, the jump is within a subroutine with no return instruction. I should have explained better in the original post, but 28e6 contains a memory address, which contains another memory address, which resolves to 0121h. 0121h is the jump target and is in the middle of another instruction. I attached the code and IDB file above for context.",
          "time": null
        },
        {
          "user": "Spektre",
          "text": "@Zman37 I do not have Z80 disassembler other than my own emulator and too lazy to convert it to one. Anyway by context I mean what is the device for, what is the architecture, what memory location is ROM and RAM? As I mentioned its high likely the code should start at 121h  instead of 11Fh which could be just cause of the linear translation from known start so the last listing is valid. Anyway you might also overlook self modification if the 28E6 and or 28D3 is in RAM and your listing is not tracing self modification changes (I do not know IDA) so the jump address might be different",
          "time": null
        },
        {
          "user": "Spektre",
          "text": "@Zman37 the wrong start of code is usually caused by data sections between routines (disassembler can not distinct which BYTES are data and which instructions unless executed at least once) sometimes ORG directive is used so the routines and or data is at specific location and or align either to enable simpler math or due to HW relation ...",
          "time": null
        }
      ]
    },
    {
      "content": "Actually, JP (HL) is a misnomer; it doesn't jump to (HL) but it jumps to HL.\nThe code jumps to 28D3, which contains a 21 (LD HL, imm), which makes complete sense.\n\n",
      "votes": "1",
      "user": "Jurjen Bos",
      "time": "Dec 3, 2021 at 12:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}