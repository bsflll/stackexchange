{
  "title": "How to calculate checksum from known data? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/19359/how-to-calculate-checksum-from-known-data",
  "content": "I'm trying to create the algoritm to produce the actual checksum byte (D0) in a vehicle 11-bit CAN bus message, where all values are known by scanning the current bus (which I'm trying to replicate with other values, but I cant find the mathematical relation between data and checksum byte).\n\nhere are the sample data (in hex): \nD0    D1  D2  D3  D4  D5  D6  D7 \n9F  70  FC  70  FC  0D  0F  00 \nA9  7A  FC  70  FC  0D  0F  00 \nAA  7B  FC  70  FC  0D  0F  00 \nAB  7C  FC  70  FC  0D  0F  00 \nAB  7C  FC  70  FC  0D  0F  00 \n0D  7D  FC  70  FC  0D  0F  60 \n0E  7E  FC  70  FC  0D  0F  60 \n09  79  FC  70  FC  0D  0F  60 \n0A  7A  FC  70  FC  0D  0F  60 \n0B  7B  FC  70  FC  0D  0F  60 \nSome more data with the same checksum(0xFF) at D0:\nD0    D1  D2  D3  D4  D5  D6  D7 \nFF  70  FC  70  FC  0D  0F  60 \nFF  74  F9  70  F9  0D  0F  62 \nFF  17  01  20  01  0D  0F  02 \nFF  AE  0D  70  0D  0D  0F  02 \nFF  13  13  0   13  0D  0F  02 \nFF  B8  10  60  10  0D  0F  02 \nFF  56  11  C0  11  0D  0F  02 \nFF  0D  2D  D0  2E  0D  0F  02 \nSome more with another known and same checksum (0x16):\nD0    D1  D2  D3  D4  D5  D6  D7 \n16  7E  FF  70  FF  0D  0F  62 \n16  7E  FF  70  FF  0D  0F  62 \n16  F0  03  50  0B  0D  0F  02 \n16  78  13  B0  13  0D  0F  02 \n16  F9  2E  00  27  0D  0F  02 \n16  EE  FF  60  FF  0D  0F  02   \n\nD0 = checksum \nD1,D2,D3,D4 = torque values (critical) \nD5 = Engine coolant temp \nD6,D7 = No important engine data  \n\nAnyone?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "497",
  "tags": [
    "crc"
  ],
  "user": "N.C",
  "time": "6 years ago",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "Having so many messages with the same checksum strikes me as odd. I tried typical bytewise addition and it gets you close, but it's always off by a bit. For example for the 0x16 messages I can calculate 0x6A and 0x6C. If they were the same you could just assume a hidden constant and fix it but it's odd. Xor seems to perform worse. I don't think it's a complex algorithm but I can't figure it out.",
      "time": null
    },
    {
      "user": "Twifty",
      "text": "It's obviously not a checksum if the following bytes are different for the same initial value. It looks more like a control/message/id byte to me.",
      "time": null
    },
    {
      "user": "N.C",
      "text": "I think it is: ((D1+D2+D3+D4+D5+D6+D7)-85)&0xFF, I will verify it today, but sometimes it does not match, like +/-1 what it should be, very strange.",
      "time": null
    },
    {
      "user": "N.C",
      "text": "((D1+D2+D3+D4+D5+D6+D7)-85)&0xFF, getting close, but it is not the correct method.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "OP was getting close with D0=((D1+D2+D3+D4+D5+D6+D7)-85)&0xFF. That's not the correct method (sometimes it's off by 1), but consider the values of (D1+D2+D3+D4+D5+D6+D7)-D0: for the given data, it has the values ['-0xa8', '0x57', '0x156', '0x255', '0x354'].\n\nWhat's the common property? Yes, they're all divisible by 0xFF when subtracted by 0x57.\n\nTherefore, the checksum byte is the sum of all bytes, subtract 0x57, modulo 0xFF, then if the result is 0 then replace it with 0xFF. (alternatively this can be written as (sum - 0x58) % 0xFF + 1)\n\nIt is impossible for the checksum byte to be 0.\n\n",
      "votes": "1",
      "user": "user202729",
      "time": "Oct 26, 2018 at 13:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}