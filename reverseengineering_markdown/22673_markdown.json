{
  "title": "Ghidra loading Linux kernel function signatures",
  "link": "https://reverseengineering.stackexchange.com/questions/22673/ghidra-loading-linux-kernel-function-signatures",
  "content": "I want to load Linux kernel headers vs. 4.19 to Ghidra so that it recognizes kernel structures and function signatures.\n\nI'm trying to reverse engineer a Linux kernel module (kernel version 4.19).\nGhidra does recognize correctly all function names such as: open, misc_register, etc., but it cannot determine their exact signatures.\n\nLet's take as an example the copy_from_user() function with the signature:\n\n```\nunsigned long copy_from_user (void *to, const void __user *from, unsigned long n);\n\n```\nand here's how Ghidra sees it:\n\n```\nundefined _copy_from_user (void)\n\n```\nI believe that it won't be the last kernel module for me to reverse engineer, and so I would like to learn how to load all missing kernel structures to the program.\n\nMoreover, I am aware that I can edit the function signature by hand, but I would then need to add plenty of structures by hand as well (such as struct file) and this would be very ineffective.\n\n(I'm super new to Ghidra and if you know a better way to load Linux kernel headers, please just share.)\n\nI've downloaded headers from Debian repository:\n\n```\n$ wget linux-headers-4.19.0-6-common_4.19.67-2+deb10u2_all.deb .\n$ ls\nlinux-headers-4.19.0-6-common_4.19.67-2+deb10u2_all.deb  usr\n$ ls /usr/src/\nlinux-headers-4.19.0-6-common\n\n```\nI extracted and copied the whole content of all files into all_headers.h (Ghidra didn't want to accept the directory itself. I couldn't find any information about loading files form Makefile as well)\n\n```\n$ cat `find . | grep .h` > all_headers.h\n$ cat all_headers.h | wc -c\n29824650\n\n```\nAnd I've provided all_headers.h to get parsed, but Ghidra has only added around 20 defines and no function signatures.\n\n\n\n\n\n",
  "votes": "10",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ghidra"
  ],
  "user": "Rob D",
  "time": "Jul 2, 2021 at 19:10",
  "comments": [],
  "answers_data": [
    {
      "content": "if you have successfully loaded all the function definitions into types, Ghidra allows you to apply those definitions to existing symbol names.\nFor that in the Data Types window, you may select an archive, folder or definition and right-click and then apply function data types.\n\n\n\nFor this to work, there should be function definitions in your archive or folder and those should have the same name as the symbol in the program.\n\n",
      "votes": "0",
      "user": "Antonio VÃ¡zquez Blanco",
      "time": "Apr 12 at 15:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}