{
  "title": "How is thumb branch calculated",
  "link": "https://reverseengineering.stackexchange.com/questions/20882/how-is-thumb-branch-calculated",
  "content": "I have the instruction which is:\n\n```\n 5ff1aed4         bl         sub_5ff171d0  \n\n```\nwhich assembles to:\n\n```\nFCF77CF9\n\n```\nThis appears to mean that the program is branching backwards, However I can't seem to find the offset it is adding onto the PC when I try to dissassemble the instruction:\n\n```\nOP   H  Offset\n1111 1 00101111100 // Low - 17C \n1111 0 11111111100 // High - 7FC \n\n```\nThis is clearly incorrect because it increases the size of the program counter instead of decreasing it. Can anyone explain where I'm going wrong?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "118",
  "tags": [
    "arm"
  ],
  "user": "Douglas Inglis",
  "time": "Mar 14, 2019 at 23:20",
  "comments": [],
  "answers_data": [
    {
      "content": "When you assembled it, you ended up with the bytes:\n\n```\nFC F7 7C F9\n\n```\nThis is two 16-bit little endian thumb instructions: \n\n```\nfc f7 = 0xf7fc = 111 10 11111111100 = BL, H=10, offset_hi=0x7fc\n7c f9 = 0xf97c = 111 11 00101111100 = BL, H=11, offset_lo=0x17c\n\n```\nFor the purposes of calculating the BL's destination address, the pc is:\n\n```\npc = address of first BL instruction + 4 = 0x5ff1aed8 \n\n```\nFor the calculation of the destination:\n\n```\ndest = pc + (sign_extend(offset_hi)<<12) + (offset_lo<<1)\n     = pc + (0xfffffffc<<12) + (0x17c<<1)\n     = 0x5ff1aed8 + 0xffffc000 + 0x2f8 \n     = 0x5ff171d0 (result is only 32bits wide)\n\n```\n",
      "votes": "1",
      "user": "booto",
      "time": "Mar 15, 2019 at 6:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}