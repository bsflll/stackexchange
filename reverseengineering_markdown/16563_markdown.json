{
  "title": "Why do debuggers sometimes not show entire call stack?",
  "link": "https://reverseengineering.stackexchange.com/questions/16563/why-do-debuggers-sometimes-not-show-entire-call-stack",
  "content": "There is something I am not understanding. Why do debuggers sometimes show only part of the call stack? The ones I tried are WinDbg and OllyDbg.\n\nLet me explain what I mean. Consider this example:\n\nI launched an application, and when a dialog box showed up, I attached OllyDbg to the application and paused to look at the call stack. However, I see this:\n\n\n\nAs you can see, this is the call stack of the main thread of the application. Unfortunately, the presented call stack seems to stop at ntdll and does not continue to show the functions in the executable. Because this is the main thread, main() has definitely not returned as otherwise the process would have terminated.\n\nWhen I try using WinDbg, a similar thing happens for me as shown here.\n\nWhy does this happen, and how do I find the full call stack?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "865",
  "tags": [
    "windows",
    "ollydbg",
    "callstack"
  ],
  "user": "MathuSum Mut",
  "time": "Oct 16, 2017 at 10:00",
  "comments": [
    {
      "user": "blabb",
      "text": "if you follow the stack for the last ntdll call and ifits retrurn address is 0 then that means ollydbg has deciphered the full call stack and the ntdll call is rtluserthreadstart btw your call stack doent show a msgbox it seems to be an editbox if you are doing this in olly v2 you can fetch symbol from ms symbol server for ntdll  mfc doesnt have a main in generic terms it is afxxxxxx wrapper so you probsbly cant see a main in call stack",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Olly and WinDbg generate the 'call stack' by parsing the actual stack utilizing function signatures and calling convention. When the disassembler doesn't have the signature (e.g. when the developer didn't disclose the function signatures) it can only take educated guesses based on push- and pop-instructions (thin ice).\n\nThe problem is, you actually need this information to calculate the size of the stack frames properly. Without this information, you can not tell if there is data on the stack or if its the return address of the next function.\n\nYou can overcome these issues by keeping track of calls yourself without relying on the actual stack, maintaining a call stack yourself. In cases like this, implementation often limits the depth of the tracking list.\n\nSadly, I can not tell you how its exactly implemented in OllyDbg. If you consider utilizing a more modern debugger, you may reach active developers capable of helping you with this.\n\nFor example, this is the current state of the call stack in x64dbg:\n\n",
      "votes": "3",
      "user": "Nordwald",
      "time": "Oct 16, 2017 at 10:35",
      "is_accepted": true,
      "comments": []
    }
  ]
}