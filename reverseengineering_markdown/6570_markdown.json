{
  "title": "Using GDB to look at stack",
  "link": "https://reverseengineering.stackexchange.com/questions/6570/using-gdb-to-look-at-stack",
  "content": "I'm not experienced with GDB, and trying to examine an executable. I want to find the value of %eax at certain times, and whether it's ever called or jumped.\n\nI was only given the executable, and it doesn't have any breakpoints.\n\nIf I enter run, the program runs and then finishes, and no commands workâ€”I get \"No symbol table is loaded\" and \"No registers.\"\n\nDissembling the executable (objdump -d) doesn't help, the result is 130,000 lines long.\n\nHow can I do this analysis?\n\nUpdate: I used PEDA successfully; I set breakpoints at the functions and stepped through the program using next.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "5k",
  "tags": [
    "exploit",
    "assembly"
  ],
  "user": "LonelyWebCrawler",
  "time": "Nov 5, 2014 at 3:41",
  "comments": [],
  "answers_data": [
    {
      "content": "First, you really need to set a breakpoint somewhere if you want gdb to stop before the program end.\n\nThen, you should really try to use peda, a set of configuration and Python scripts for gdb designed for reverse-engineering software.\n\nTake a look at:\n\n\n\n",
      "votes": "3",
      "user": "perror",
      "time": "Nov 3, 2014 at 11:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "LonelyWebCrawler",
          "text": "Thanks, I'll try it. But does it help with my problem?",
          "time": null
        },
        {
          "user": "perror",
          "text": "In fact, yes. Because the stack of the current process is displayed by peda (look at the stack section of the display). And, in fact, each time you hit the nexti or stepi function, the new stack is displayed. So, I guess this is exactly you are looking for.",
          "time": null
        },
        {
          "user": "perror",
          "text": "I re-read your question, and it seems that you did not set a breakpoint at all. You have to understand that setting a first breakpoint should be prior to the run command. Because, if you don't, you will never be given the opportunity to interact with gdb and your program.",
          "time": null
        },
        {
          "user": "LonelyWebCrawler",
          "text": "Unfortunately I can't add any break points. Do you think it's feasible to dissemble the program and then execute the assembly line by line? Is that possible?",
          "time": null
        },
        {
          "user": "perror",
          "text": "What do you mean by \"I can't add any breakpoint?\"... If you can start a PTRACE, you should be able to do so... Try to get the entrypoint through info files, then set a breakpoint on it.",
          "time": null
        }
      ]
    }
  ]
}