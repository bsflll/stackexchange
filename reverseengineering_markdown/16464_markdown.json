{
  "title": "Bypass DLL by returning correct values? Or alternative technique",
  "link": "https://reverseengineering.stackexchange.com/questions/16464/bypass-dll-by-returning-correct-values-or-alternative-technique",
  "content": "If this is the wrong spot for this, or is a duplicate, let me know.\n\nI'm a computer professional getting started with decompiling and reverse engineering just for fun and resume building. I have a decent grasp of assembly, but I'm still learning. If this is a dumb question, let me know why it's dumb.\n\nI'm looking to bypass a problematic DLL in an win32 application. I tried letting the DLL run, then setting all the jumps in the main app via debugging, but memory access errors are being thrown. I'm pretty sure it's doing more than just returning values in AX.\n\nQuestions:\n\nIf I did this, I would have a success case. I could then re-code the DLL with op code to do what it needs to do and replace the rest with no-ops. Haven't had much luck with this on Google.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "246",
  "tags": [
    "disassembly",
    "dll"
  ],
  "user": "user21814",
  "time": "Oct 2, 2017 at 20:13",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "how does the dll gets loaded is it dynamically loaded during runtime?",
      "time": null
    },
    {
      "user": "user21814",
      "text": "Yes, it's loaded dynamically.",
      "time": null
    },
    {
      "user": "user21814",
      "text": "Can I ask the community what I could've done to better word this question? I had thought other beginners could benefit from an answer to this. I did quite a lot of research and couldn't find a answer on my own.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think you should look into API hooking. This page will go into detail about API hooking. In your case I would create a DLL library and inject it to the target process (either when the target loads or whenever it is already loaded). Your library should then detour the calls to the original function to your proxy method.\n\n",
      "votes": "3",
      "user": "Jevgeni Geurtsen",
      "time": "Oct 2, 2017 at 6:08",
      "is_accepted": false,
      "comments": [
        {
          "user": "user21814",
          "text": "Very concise article, thank you.  Do you think my errors would be solved by removing the original DLL and replacing it with a hook?",
          "time": null
        },
        {
          "user": "Jevgeni Geurtsen",
          "text": "Yes, from what I understood of your main post this is exactly what you need. Also, you are not going to remove the original DLL; you are letting it load and intercept the calls to the original DLL and proxy them to your custom DLL.",
          "time": null
        },
        {
          "user": "user21814",
          "text": "The thing is, I'm pretty sure this DLL allocates memory in some of its functions. Simply returning the correct value won't help me.  How can I determine how to replicate what it does in my hook?",
          "time": null
        },
        {
          "user": "Jevgeni Geurtsen",
          "text": "What do you mean by allocating memory? Does it store some variables or does it inject code on runtime (probably not, but I think u get the idea). Did u read about detours? You can set the detour at any given moment in the function, so you could first let the original code (partly) run and then call your own proxy.",
          "time": null
        },
        {
          "user": "user21814",
          "text": "It looks like it might be doing some string comparison. Also, there's quite a bit of moving things into and from memory.  I just want to get a high level understanding of how to solve the problem :) Detours is something I'm going to check out soon.",
          "time": null
        }
      ]
    }
  ]
}