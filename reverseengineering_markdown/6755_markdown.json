{
  "title": "Getting started with dynamic reverse engineering",
  "link": "https://reverseengineering.stackexchange.com/questions/6755/getting-started-with-dynamic-reverse-engineering",
  "content": "I have been doing a lot of reading into how to find vulnerabilities in closed source applications. And the term that comes up a lot is \"fuzzing\". \n\nI want to get started with fuzzing and I looking for any tips and hints on where and how to start. What tools to use, etc .\n\n",
  "votes": "2",
  "answers": 2,
  "views": "449",
  "tags": [
    "fuzzing"
  ],
  "user": "Sreyan",
  "time": "Dec 3, 2014 at 7:51",
  "comments": [
    {
      "user": "Cybergibbons",
      "text": "Fuzzing is very much a dynamic analysis technique.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Just find points of interest and reverse the flow back to find if there is something in the environment you can manipulate to your will alter the poi.\n\nEg, if you find a memcpy(a, b, c); check where b and c are coming from, are they from user generated input or system generated input, maybe they are statics.\nIf it they are generated from user input you can manipulate the flow of the program as you can copy arbitrary data into the memory. This might allow you to alter the stack and thus alter the flow of the program. \n\nLeading into a security vulnerability.\n\n",
      "votes": "1",
      "user": "Stolas",
      "time": "Dec 3, 2014 at 7:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sreyan",
          "text": "Are there any such tutorials describing techniques like what you have described. Your answer is okay but only describes one technique and not in very much detail.",
          "time": null
        },
        {
          "user": "Stolas",
          "text": "Sreyan, Vulnerability Research has many shapes. This is a common technique. Another one is to write a fuzzer and do fault injection, hoping the program will crash after which you try to find a way to use this crash to gain code execution.  Fuzzing however is done so much that it yields way worse results than hand analysis. For training materials have a look at binary-auditing.com",
          "time": null
        }
      ]
    },
    {
      "content": "A small list of tools often used to dynamic RE:\n\nWhere to learn:\nI learned a lot from LiveOverflow and Gynvael Coldwind videos on YouTube and participants in CTF-s and read write-ups.\nYou can practice at: HackTheBox, Crackmes, CTF-s competitions, applications that allow you to do RE without breaking their ToS/license.\n\n",
      "votes": "0",
      "user": "Filip Poplewski",
      "time": "Sep 14, 2021 at 21:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}