{
  "title": "Password evaluated from the sum of ASCII letters",
  "link": "https://reverseengineering.stackexchange.com/questions/25882/password-evaluated-from-the-sum-of-ascii-letters",
  "content": "After analyzing the code, I have been able to understand and recreate the algorithm used to check if the password the binary takes is correct, but don't know how to solve it (or at least can't think of any approach that would be performant enough to finish within feasible time).\n\nThe first three letters of the expected password can be easily seen in the disassembly, as well as the length of the password being 16 letters.\n\nThen it gets a little tricky, as the program enters a loop summing up the ASCII values of different letters of the password into 4 variables, which are afterwards checked against a value each after being taken modulo 100, which have to be met for the password to be regarded as \"correct\"\n\nTo be more exact, the letters are summed up as follows (indices in the password starting from 1:\nVar1: 1, 3, 4, 6, 7, 11, 12, 14, 15\nVar2: 1, 3, 5, 7, 9, 11, 13, 15\nVar3: 2, 5, 8, 11, 14\nVar4: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n\nThis also tells me, that given I didn't understand the code completely wrong, the last letter of the password is not relevant as well.\n\nAnyways, my question would be, if with the information present this problem is even solvable, and if yes, what approach would make sense, as brute-forcing obviously doesn't.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "82",
  "tags": [
    "static-analysis",
    "encodings",
    "crackme"
  ],
  "user": "M4l1s",
  "time": "Sep 14, 2020 at 12:42",
  "comments": [
    {
      "user": "David",
      "text": "This would be a perfect problem for a SMT solver. See en.m.wikipedia.org/wiki/Satisfiability_modulo_theories",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You may be able to set up a system of equations and try and narrow this down with linear algebra. Because you have more unknowns than knowns, you will not be able to know the original password, but you can still get one the passes the validation routine. You already know some of the letters due to seeing them in the disassembly.\n\nAs a smaller example, say we know the first letter of a password is G and the that there are 6 letters. The program then sums up the letters into three variables as follows:\n\n```\nvar1 = password[0] + password[1] + password[5]\nvar2 = password[0] + password[4]\nvar3 = password[0] + password[1] + password[2] + password[3] + password[4]\n\n```\nThen later we see that it checks:\n\n```\nvar1 == 225\nvar2 == 160\nvar3 == 392\n\n```\nWe can set up a matrix for this:\n\n```\n[1 1 0 0 0 1 | 225]\n[1 0 0 0 1 0 | 160]\n[1 1 1 1 1 0 | 392]\n\n```\nUsing SymPy or something similar, we can reduce this matrix down:\n\n```\nfrom sypy import *\nA = Matrix([[1,1,0,0,0,1,225],[1,0,0,0,1,0,160],[1,1,1,1,1,0,392]])\nA.rref()\n\n(Matrix([\n[1, 0, 0, 0,  1,  0, 160],\n[0, 1, 0, 0, -1,  1,  65],\n[0, 0, 1, 1,  1, -1, 167]]), (0, 1, 2))\n\n```\nOur pivots are password[0], password[1] and password[2]. We already know password[0] == 71, we will select whatever we want for password[1] & password[2] and will try to get everything else in terms of these.\n\nSince we know that the first letter is 'G' and has a value of 71, the first equation is 72 + password[4] = 160. We now know password[4] is 89 or Y.\n\nKnowing this, we can look at our next equation. password[1] - 89 + password[5] = 65. Rewriting: password[5] = 154 - password[1].\n\nWe can now look at the last equation:\npassword[2] + password[3] + 89 - password[5] = 167\nRewriting: password[3] = password[5] - password[2] + 78\n\nPutting it all together:\n\n```\npassword[0] = 'G'\npassword[1] = pivot\npassword[2] = pivot\npassword[3] = password[5] - password[2] + 78\npassword[4] = 'Y'\npassword[5] = 154 - password[1]\n\n```\nNow we just assign whatever we want for password[1] and password[2] and we will get a valid password.\n\n```\npassword[1] = 'A'\npassword[2] = 'A'\n\n```\n```\n# Find password[5]\nchr(154 - ord('A'))\n'Y'\n\n# Find password[3]\nchr(ord('Y') - ord('A') + 78)\n'f'\n\n# Validate password\npassword = \"GAAfYY\"\nvar1 = ord(password[0]) + ord(password[1]) + ord(password[5])\nvar2 = ord(password[0]) + ord(password[4])\nvar3 = ord(password[0]) + ord(password[1]) + ord(password[2]) + + ord(password[3]) + ord(password[4])\n\n(var1 == 225) and (var2 == 160) and (var3 == 392)\nTrue\n\n```\nIt will be harder for your specific one because you the numbers are being taken % 100, but you know how many characters there are and what value range ASCII falls in so it shouldn't be too hard to set a limited range for the possible values.\n\n",
      "votes": "0",
      "user": "Shane Reilly",
      "time": "Sep 14, 2020 at 15:09",
      "is_accepted": true,
      "comments": []
    }
  ]
}