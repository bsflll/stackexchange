{
  "title": "Not Understanding the FU540 Boot Process",
  "link": "https://reverseengineering.stackexchange.com/questions/29323/not-understanding-the-fu540-boot-process",
  "content": "I'm reading the manual for the SiFive FU540-C000 trying to understand the boot process, and I'm not making sense of the initial steps after power on.\n\nI'm using MSEL = 1111 based on the recommendation for the software I'm booting from SD card.\n\nThis is how I've decoded the instructions.\n\nThe problem is that, according to the manual, MSEL = 0b1111 should jump to 0x0001_0000, doesn't mention anything about what's at 0x1178\n\nDid I interpret something wrong, or is there something else going on in this boot sequence that I'm not getting?\n\n--EDIT 1--\n\nIn my original math I shifted the hex values left instead of binary. Going to attribute that to brain tired. It still isn't any more clear what's happening after the jump instruction.\n\n--EDIT 2--\n\nIt was pointed out that I was using LW incorrectly, loading the value in the register instead of the value in memory indicated by the address in register. Updated the math and still no more clear.\n\n--EDIT 3--\n\nThanks to mumbel for pointing out my incorrect use of the MSEL value. I treated as 0x1111 instead 0f 0b1111 = 0xF. I swear I know hex and binary.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "107",
  "tags": [
    "assembly",
    "firmware",
    "memory",
    "static-analysis",
    "risc-v"
  ],
  "user": "Jonathon Anderson",
  "time": "Sep 24, 2021 at 22:22",
  "comments": [
    {
      "user": "mumbel",
      "text": "I would use the tag risc-v not risc for this question",
      "time": null
    },
    {
      "user": "Jonathon Anderson",
      "text": "@mumbel oddly, I don't see a risc-v tag",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "MSEL is 4 pins, as in 4 bits.  This means 1111 is not 0x1111, but 0b1111 or 0xf.  So your math is correct everywhere but the 0x8888 would be 0x78 instead.\n\n```\nauipc t0, 0       <- t0 = pc + 0 => 0x1004\nlw t1, -4(t0)     <- t1 = -4(0x1004) => 0xf\nslli t1, t1, 0x3  <- t1 = 0xf << 3 == 0xf * 8 => 0x78\nadd t0, t0, t1    <- t0 = 0x1004 + 0x78 => 0x107c\nlw t0, 252(t0)    <- t0 = 252(0x107c) == 0(0x1178) => ???\njr t0             <- goto ???\n\n```\n",
      "votes": "0",
      "user": "mumbel",
      "time": "Sep 24, 2021 at 3:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jonathon Anderson",
          "text": "Well that leaves me equally as confused ðŸ˜‚",
          "time": null
        },
        {
          "user": "mumbel",
          "text": "Heh, at least 0x1178 is mapped.  Which part is confusing or just no clue what's in memory at 0x1178?",
          "time": null
        },
        {
          "user": "Jonathon Anderson",
          "text": "@mumble no clue what's at that address, and the pin select guide suggests 0b1111 should jump to 0x0001_0000 for ZSBL",
          "time": null
        }
      ]
    },
    {
      "content": "I can't find the full memory map, but I've been told that this table can be interpreted similarly. Basically, whatever address is calculated using MSEL will have the value in the \"Reset address\" field. So, it's not an address to value mapping, but since it's the only variable in the algorithm, it alone determines what address will be jumped to in the final instruction, so the mapping is still valid.\n\nAnother way to look at it is that MSEL is an index into a jump table, and the base is calculated in the rest of the algorithm.\n\n",
      "votes": "0",
      "user": "Jonathon Anderson",
      "time": "Sep 25, 2021 at 17:56",
      "is_accepted": true,
      "comments": []
    }
  ]
}