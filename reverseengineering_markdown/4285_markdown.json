{
  "title": "How to deal with this \"error\" instructions generated by objdump?",
  "link": "https://reverseengineering.stackexchange.com/questions/4285/how-to-deal-with-this-error-instructions-generated-by-objdump",
  "content": "So basically I am using objdump to disassemble a binary from GNU Coreutils, on 32-bit Linux x86.\n\nIn the disassembled code, I found one \"broken\" instruction like this:\n\n```\n 804b4db:       ff 24 85 e4 09 05 08    jmp    *0x80509e4(,%eax,4)\n\n```\nIt seems like a disassemble error?\n\nAnd, by digging into the section info, I figure out that 0x80509e4 inside the .rodata section.\n\nSo does it mean that 0x80509e4 is a jump table?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "644",
  "tags": [
    "disassembly",
    "elf",
    "objdump"
  ],
  "user": "lllllllllllll",
  "time": "Apr 28, 2017 at 12:55",
  "comments": [
    {
      "user": "perror",
      "text": "What are the opcodes of this instruction ?",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@perror Hello, I update my question",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@perror Basically I think it should be a typical jump table instruction, am I right?",
      "time": null
    },
    {
      "user": "perror",
      "text": "So, Igor answered, but the instruction is not broken at all. It just follow a strange syntax. When left empty, the argument is assumed to be 1 in memory addressing. And, yes, this is most likely a jump table.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is just the ugly AT&T syntax. In Intel syntax it's:\n\n```\njmp dword ptr [eax*4+0x80509e4]\n\n```\nAnd yes, it's most likely a jump table.\n\nYou can switch objdump to Intel syntax by adding -M intel to the command line.\n\n",
      "votes": "7",
      "user": "Igor Skochinsky",
      "time": "May 8, 2014 at 10:00",
      "is_accepted": true,
      "comments": []
    }
  ]
}