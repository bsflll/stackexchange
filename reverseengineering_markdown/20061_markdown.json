{
  "title": "How to convert assembly to pseudo code? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/20061/how-to-convert-assembly-to-pseudo-code",
  "content": "I have the following assembly. I don't know how to follow assembly. I was wondering if there is a way to convert assembly to a human readable pseudo code or better yet C code:\n\n```\ninit:\n mov    eax, [ebp+8]    # pointer to key\n push   eax\n mov    eax, [ebp+c]    # pointer to ciphertext\n push   eax\n mov    eax, [ebp+10]   # ciphertext length\n push   eax\n mov    eax, [ebp+1c]   # pointer to plaintext\n push   eax\n xor    ecx, ecx    # loop counter\n\nloop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n\n mov    eax, [esp+c]\n add    eax, edx\n mov    al, byte ptr [eax]\n sub    al, 0x41\n\n mov    ebx, [esp+8]\n add    ebx, ecx\n mov    bl, byte ptr [ebx]\n sub    bl, 0x41\n\n sub    bl, al\n jns    tail\n add    bl, 0x1a\n\ntail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    [eax+ecx], bl\n\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n\n```\n",
  "votes": "-1",
  "answers": 1,
  "views": "4k",
  "tags": [
    "assembly",
    "x86",
    "c"
  ],
  "user": "sukhvir",
  "time": "6 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "Although rewriting assembly to pseudo C is not technically reverse engineering, I'll try to help \n\n```\ninit:\n mov    eax, [ebp+8]\n push   eax\n mov    eax, [ebp+0xc]\n push   eax\n mov    eax, [ebp+0x10]\n push   eax\n mov    eax, [ebp+0x1c]\n puse   eax\n xor    ecx, ecx\n\n```\nThis block just basically sets up parameters, as already mentioned ecx is a counter.\n\n```\nloop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n\n```\nHere edx is zeroed out, counter is moved to eax and unsigned division by 6 is performed. div stores the quotient in eax and remainder in edx.\n\n```\nmov    eax, [esp+0xc]\nadd    eax, edx\nmov    al, [eax]\nsub    al, 0x41\n\n```\nHere pointer from the key is accessed at offset edx and 0x41 is subtracted.\n\n```\nchar a = key[counter % 6] - 0x41;\n\n```\nOn to the next block\n\n```\nmov    ebx, [esp+8]\nadd    ebx, ecx\nmov    bl, [ebx]\nsub    bl, 0x41\n\n```\nHere pointer from the ciphertext is accessed at offset counter and 0x41 is subtracted.\n\n```\nchar b = ciphertext[counter] - 0x41;\n\n```\nNext\n\n```\nsub    bl, al\njns    tail\nadd    bl, 0x1a\n\n```\nHere a and b are subtracted and if difference is less than zero 0x1a is added to b;\n\n```\nb = b - a;\nif(b < 0) b += 0x1a;\n\n```\nNext:\n\n```\ntail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    byte ptr [eax+ecx], bl\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n\n```\nHere 0x41 is added back to b and its written to plaintext at offset counter.\n\n```\nplaintext[counter] = b+0x41;\ncounter++;\n\n```\nThis was done in a loop with length as the limit.\n\n```\nwhile(counter < length)\n\n```\nEquivalent complete code.\n\n```\nvoid decode(char *key, char *ciphertext, size_t length, char *plaintext){\n    size_t counter = 0; \n    do{\n        char diff = ciphertext[counter] - key[counter % 6];\n        plaintext[counter++] = 0x41 + diff + (diff < 0 ? 0x1a : 0);\n    }\n    while(counter < length);\n}\n\n```\n",
      "votes": "7",
      "user": "sudhackar",
      "time": "Dec 12, 2018 at 3:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "user2347953",
          "text": "Probably not much sense commenting on a closed question, but the subtraction is the wrong way aroundâ€”key is supposed to be subtracted from cipher text. Also it's the Vigenere cipher.",
          "time": null
        }
      ]
    }
  ]
}