{
  "title": "Call to variable address",
  "link": "https://reverseengineering.stackexchange.com/questions/2326/call-to-variable-address",
  "content": "I have come across the following instructions:\n\n```\nmov ecx, [ebp + var_4]\nimul ecx, 4\ncall dword_1423d4[ecx]\n\n```\nCan someone explain to me what it possibly means or point me in the right direction? Why is the call made to a variable?\n\n",
  "votes": "6",
  "answers": 2,
  "views": "226",
  "tags": [
    "disassembly"
  ],
  "user": "Cream Cracker",
  "time": "Jun 25, 2013 at 16:56",
  "comments": [
    {
      "user": "PSS",
      "text": "Calls function by reference out of an array of pointers?",
      "time": null
    },
    {
      "user": "Cream Cracker",
      "text": "@PSS what it means?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "dword_1423d4 is a pointer to a global array of 32-bit function pointers.\n\nvar_4 is an index into this array.\n\nThe call instruction calls the function at index var_4 in the dword_1423d4 function array.\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Jun 25, 2013 at 16:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "it's a common representation of a \"switch()\" statement when the values are linear.  The var_4 is the parameter to the switch(), the dword_1423d4 is the table of case handlers.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "@peterferrie - From my experience, switch statements are typically compiled to use jmp, not call, but I suppose a compiler might choose the latter in some circumstances.",
          "time": null
        },
        {
          "user": "QAZ",
          "text": "I agree with Jason, it is unlikely (although not guaranteed) to be a switch statement due to the call and no jmp. Possibly a custom function dispatcher or something.",
          "time": null
        },
        {
          "user": "Jonathon Reinhart",
          "text": "Also agree with @JasonGeffner. I've never seen a switch statement (or anything aside from a real function call, for that matter) on x86 implemented with a call instruction.",
          "time": null
        },
        {
          "user": "Jonathon Reinhart",
          "text": "By the way @JasonGeffner, I thought your name sounded familiar from BlackHat a couple years back.",
          "time": null
        }
      ]
    },
    {
      "content": "What immediately comes to mind is some type of virtualization layer accessing an IAT or IVT.  I absolutely agree with the previous answer that this is a call to a function vector in an array of function pointers.  I also agree that it does not look like a switch statement.  That's what takes me down the interrupt vector table/address table.\n\n",
      "votes": "1",
      "user": "David Hoelzer",
      "time": "Jul 13, 2013 at 22:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "asheeshr",
          "text": "Would you please add more details into your answer? How is it different from the answer above? At the moment, it reads like a kudos to Jason's answer. If that is what you intended, you can show your agreement with another answer by clicking on the upvote button next to it. Posting a separate answer is not needed.",
          "time": null
        },
        {
          "user": "David Hoelzer",
          "text": "I must have missed a reference to an interrupt vector or address table in his answer.",
          "time": null
        }
      ]
    }
  ]
}