{
  "title": "Bypassing Enigma loader",
  "link": "https://reverseengineering.stackexchange.com/questions/8236/bypassing-enigma-loader",
  "content": "Currently I'm trying to get past Enigma's loader, which asks you for a name & key, as an excercise.\n\nI have very little progress, as I haven't worked too much with packers.\n\nWhat I did was breakpoint on CreateWindowExA, and then I put random data at key / name, and then click Register, which effectively breaks at CreateWindowExA.\n\nFrom there, I'm able to check the stack and go back a few calls, but I'm really lost as there's a lot of bloat code (short functions with x87 instructions), and I don't know where to continue.\n\nI also know that the routine that checks the serial is virtualized, so I should patch the places which check the return of the function that checks the serial instead of the function itself, but then again, I get lost when looking at the stack.\n\nHere's my progress so far:\n\nThe breakpoint on CreateWindowExA, which gets called when you input an invalid serial\n\n\nThe function that calls it:\nhttp://screenshotuploader.com/i/1502/t_q0c.png\n\nAnd that function, before and after calling CreateWindowExA, calls these two weird x87 functions:\n\n\n\nthe function that is marked in the previous screenshot\n\n\n\nthis one gets called a few instructions after CreateWindowExA\n\nAfter going one more function back, I see:\n\n\n\nThe problem with that function is that it's using some tricks to change the return address (I guess), like this:\n\n\n\nWhich then leads to weird code which expects a function pointer in edx returned by a funtion that is dereferencing a pointer to a word (2 bytes)!\n\nHere's the code that calls the function that returns a pointer to a function:\n\n\nAnd here's the function that returns a pointer in edx:\n\n\nIt is really weird, as it 1) derefs a word (2 bytes, not enough for a function pointer!), and 2) FLDCW loads a x87 FPU control word... what's happening here?!\n\nAlso, that's the last return I can see in the stack, as the rest of the values are zeroed, and there's no branch which checks the serial at this depth, so I don't know where to continue looking at.\n\nAnd if not enough, the program closes each time I input an invalid serial, which makes it harder, because the next time the offsets are totally different and I can't find the code so I breakpoint a bit before, so I'm really lost!\n\nDumping the executable at runtime does absolutely nothing, as it's still packed as it was before, it just makes it 4x bigger (50MB -> 200MB), and doesn't help at all.\n\nAny help would be great, even a simple idea, like a hint on what to do next, where to breakpoint, where to look at, or whatever you can think of, would help a lot.\n\n",
  "votes": "4",
  "answers": 0,
  "views": "2k",
  "tags": [
    "debugging",
    "unpacking",
    "crackme"
  ],
  "user": "rev",
  "time": "Feb 13, 2015 at 19:05",
  "comments": [
    {
      "user": "qnet Ug",
      "text": "I also have a problem with my files, if you were able to figure out please help me too. workupload.com/file/TQ9LCnExkdj thats the link to my files",
      "time": null
    },
    {
      "user": "Yotamz",
      "text": "This does not really answer the question. If you have a different question, you can ask it by clicking Ask Question. To get notified when this question gets new answers, you can follow this question. Once you have enough reputation, you can also add a bounty to draw more attention to this question. - From Review",
      "time": null
    }
  ],
  "answers_data": []
}