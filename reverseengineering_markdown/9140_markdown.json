{
  "title": "How can I extend a memory of an analysed executable in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/9140/how-can-i-extend-a-memory-of-an-analysed-executable-in-ida-pro",
  "content": "I'm analysing some malware executable with ImmDBG and IDA Pro.\n\nThe executable calls the kernel32.VirtualAlloc() at runtime with an argument lpAddress=NULL what means that an operating system decides itself where the memory has to be allocated. The VirtualAlloc() returns an address 0x003F0000. After that the executable writes some function to this memory, which is quite big, and I would like to analyse this function in IDA Pro.\n\nThe problem is, that my executable is loaded to the 0x004010000 in IDA Pro\nand I don't know how could I extend the memory of the executable in IDA Pro in order to create this function manually(with help of PatchBytes).\n\nAlso maybe it's possible somehow to build a function from a sequence of opcodes in IDA Pro?\n\nThank you in advance!\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "disassembly",
    "malware",
    "anti-debugging",
    "immunity-debugger"
  ],
  "user": "0xDEADC0DE",
  "time": "Jun 15, 2015 at 13:09",
  "comments": [
    {
      "user": "tmr232",
      "text": "Did you try running it using the IDA debugger? It allows you to take snapshots of the memory and keep them inside the IDB.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The most reliable solution I've found is to add a new section to the PE file and force the process to write the unpacked code into that new section in memory.\n\nI wrote up a blog post a few years ago with a full walk-through of this approach: http://blog.crowdstrike.com/unpacking-dynamically-allocated-code/\n\n\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Jun 15, 2015 at 13:11",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I solved this issue by creating a new section in IDA Pro (File -> Segments -> Create segment). After that I dumped new section in OllyDBG (binary copy) and transferred it to the new created section in IDA Pro (with a Python script). After that I could analyse the code and write comments in IDA to make better analysis and documentation.\n\n",
      "votes": "0",
      "user": "0xDEADC0DE",
      "time": "Sep 14, 2015 at 11:13",
      "is_accepted": true,
      "comments": []
    }
  ]
}