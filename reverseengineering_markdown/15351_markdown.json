{
  "title": "How to decompile a C# .exe on macOS?",
  "link": "https://reverseengineering.stackexchange.com/questions/15351/how-to-decompile-a-c-exe-on-macos",
  "content": "It this even possible? Are there any free tools?\n\n",
  "votes": "11",
  "answers": 4,
  "views": "20k",
  "tags": [
    "decompilation",
    "c#"
  ],
  "user": "ttt",
  "time": "May 15, 2017 at 15:26",
  "comments": [
    {
      "user": "PhoeniX",
      "text": "Did you try those github.com/aerror2/ILSpy-For-MacOSX or tirania.org/blog/archive/2011/Feb-04.html.",
      "time": null
    },
    {
      "user": "ttt",
      "text": "I did, but after i build the project and run the .exe with mono, i get an error. I get this: Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object. I may debug the project in the future to find the issue if no easier solution will arise till then. :)",
      "time": null
    },
    {
      "user": "PhoeniX",
      "text": "It depends on the complexity of the original executable, but in general debugger is the way to solve the problem.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Visual Studio for Mac can do the job. Just hit File / Open and then choose the executable or library you want. It'll open the Assembly Browser window.\n\nIf you need more detailed code change the Visibility to All members and the Language to C#.\n\n\n\n\n\n\n\n",
      "votes": "13",
      "user": "gandarez",
      "time": "Feb 14, 2019 at 22:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "Paweł Łukasik",
          "text": "but this way doesn't give you the code. Only the signatures of the methods.",
          "time": null
        },
        {
          "user": "gandarez",
          "text": "@PawełŁukasik yes you can do, just take a look at my updated post.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "Yup. My mistake.",
          "time": null
        }
      ]
    },
    {
      "content": "Best free tool for the job is ILSpy, but it runs on Windows. This gives you a limited list of options:\n\nBeing an IT guy myself, I would go for the first solution. Check them all out briefly and go for one!\n\n",
      "votes": "5",
      "user": "Chris Tsiakoulas",
      "time": "May 21, 2017 at 8:22",
      "is_accepted": false,
      "comments": [
        {
          "user": "Paweł Łukasik",
          "text": "for point 3, there's no tool called ildasm. The tools that are included VS for Mac are called ikdasm or monodis",
          "time": null
        },
        {
          "user": "Chris Tsiakoulas",
          "text": "Thnks for the notice! I corected it.",
          "time": null
        }
      ]
    },
    {
      "content": "You can use Jetbrains' Rider. It has a 30 day free trial period.\n\n\n\n\n\nThe disadvantage is that we have to repeat step 4 for each class we want to decompile.\n\n",
      "votes": "2",
      "user": "jbarrameda",
      "time": "Mar 15, 2018 at 12:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "Paweł Łukasik",
          "text": "it looks like you were too fast. Point 4 is incomplete and 5 is missing.",
          "time": null
        }
      ]
    },
    {
      "content": "Generally yes, with a couple of exceptions:\n\nHint: in that scenario one should decompile the .dll with the same name. That's the file that contains the compiled C# code.\n\nYes, there are. One such tool is CodemerxDecompile - the spiritual successor of the popular JustDecompile. While JustDecompile is Windows only, CodemerxDecompile is a multi-platform decompiler that runs on Windows, Linux and MacOS.\n\nDisclosure: I'm part of the team behind CodemerxDecompile.\n\n",
      "votes": "0",
      "user": "Alexander Dimitrov",
      "time": "Mar 22, 2024 at 14:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}