{
  "title": "Changing parameter of function call in ELF executable",
  "link": "https://reverseengineering.stackexchange.com/questions/2574/changing-parameter-of-function-call-in-elf-executable",
  "content": "I want to alter a ELF executable function call and replace one of it's parameters.\nThe executable calls dlopen() function and passes RTLD_NOW as the flag parameter.\nI want to change it to RTLD_LAZY.\n\nWhat's the easiest way to detect the exact place where this call is done, and replacing the parameter.\n\nI have to do it on production environment, so I only have GNU toolchain, gcc, gdb, etc.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "878",
  "tags": [
    "linux",
    "elf"
  ],
  "user": "Mellowcandle",
  "time": "Aug 3, 2013 at 7:29",
  "comments": [
    {
      "user": "PSS",
      "text": "Are you talking about permanently patching the executable or modifying at run time?",
      "time": null
    },
    {
      "user": "Mellowcandle",
      "text": "Both. At runtime to test it. And then persist it.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Theoretically LD_PRELOAD would be your friend, but given that dlopen is implemented within the loader, it's possible that this approach would fail.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The easiest way to do this is with gdb. Put a breakpoint on the dlopen function, and change the parameters (likely passed on the stack). RTLD_NOW is defined as 2. Simply change it by 1 (RTLD_LAZY).\n\nTo sum up, in gdb\n\n```\nbreakpoint dlopen\nrun\nset stack_memory_address = 1\ncontinue\n\n```\nWhere stack_memory_address is the address of your mode parameter.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Aug 4, 2013 at 19:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "Mellowcandle",
          "text": "How do I save it, is it possible from gdb ?",
          "time": null
        },
        {
          "user": "jvoisin",
          "text": "You can use an hex-editor, seek to the offset that you broke on in GDB, and change the 2 in a 1.",
          "time": null
        }
      ]
    }
  ]
}