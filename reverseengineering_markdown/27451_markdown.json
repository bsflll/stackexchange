{
  "title": "How do I find missing/undefined vtable functions in IDA64?",
  "link": "https://reverseengineering.stackexchange.com/questions/27451/how-do-i-find-missing-undefined-vtable-functions-in-ida64",
  "content": "I'm reverse engineering a game and came across some function calls like the ones shown below, how do I find where these functions are located / decompile them?\n\n(*(BaseClient->int640 + 304))(BaseClient)\n\n(*(BaseClient->int640 + 224))(BaseClient, *&v32->gap2[262], &v116, *&v32->gap2[342], v34, v33, v146, *&v32->gap2[246], &Mem, 0)\n\n\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "208",
  "tags": [
    "ida",
    "c++",
    "c",
    "game-hacking"
  ],
  "user": "Z1Meme",
  "time": "Apr 17, 2021 at 7:50",
  "comments": [
    {
      "user": "Orwellophile",
      "text": "Sometimes it helps to dump the game in the middle of it being fully active, as the full content of the resource segment may not be in memory otherwise.  You can also find a reference to free (often called indirectly by a function in the game itself) and look at the xrefs to the xrefs (to the xrefs) searching for functions that are called by something in the resource segment -- usually the destructor which is the first vtable entry.  There is also the Class Informer plugin, though that can certainly miss some of the vtables.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "By finding the constructor for the structure type that you're looking at, making note of the VTable address, and adding the indicated offsets to obtain the concrete function pointers for the calls in question.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Apr 17, 2021 at 17:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}