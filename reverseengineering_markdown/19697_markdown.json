{
  "title": "Calling undocumented kernel functions directly (xxxSendInput and xxxMouseEventDirect)",
  "link": "https://reverseengineering.stackexchange.com/questions/19697/calling-undocumented-kernel-functions-directly-xxxsendinput-and-xxxmouseeventdi",
  "content": "In the core my question is about how to reverse engineer undocumented functions.\nI want to call the function \"xxxMouseEventDirect\" (located in win32kfull.sys). I have already been able to collect some information for this, but now I am a bit stuck.\n\nThe call hierarchy is as follows:\nNtUserSendInput -> xxxSendInput -> xxxMouseEventDirect.\n\nThe function looks like this:\n\n```\nNTSTATUS __fastcall* xxxMouseEventDirect (ULONG dx, ULONG dy, ULONG mouseData, ULONG dwFlags, ULONGLONG time, ULONGLONG extraInfo, ULONGLONG, ULONG);\n\n```\nI am relatively sure that I call the function parameters correctly, but there is still a blue screen when I call the function.\n\nThe bluescreen occurs like this:\n\n```\nmov rax, qword ptr [win32kfull!_imp_gptiCurrent (fffffbe9`4c720ec0)]\nmov r14, qword ptr [rax]\ncmp qword ptr [r14+1B0h], rcx ; <--- Bluescreen because r14 == 0\n\n```\nWhen I call NtUserSendInput, rax points to a pointer which is then used via [r14+1B0h].\nWhen I call xxxMouseEventDirect directly, rax points to 0, causing [r14+1B0h] to cause a blue screen.\nI now wonder what is stored in win32kfull!_imp_gptiCurrent and why it is not there when I call xxxMouseEventDirect directly.\n\nI am relatively new in the field of reverse engineering and would like to know how to deal with such a problem in general. Concrete tips are of course also very welcome.\n\nThank you \n\n",
  "votes": "1",
  "answers": 0,
  "views": "759",
  "tags": [
    "windows",
    "kernel-mode",
    "winapi",
    "kernel"
  ],
  "user": "moccajoghurt",
  "time": "Oct 22, 2018 at 23:04",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "mmLoadSystemImage may help.",
      "time": null
    }
  ],
  "answers_data": []
}