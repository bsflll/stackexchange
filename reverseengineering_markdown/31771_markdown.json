{
  "title": "Understanding the logic behind decompiled code",
  "link": "https://reverseengineering.stackexchange.com/questions/31771/understanding-the-logic-behind-decompiled-code",
  "content": "Hi I was learning reverse engineering by doing some crackme(s) found online using IDA and x64dbg.\n\nI'm quite confused on the below decompiled code.\n\n```\nbool Logic()\n{\n    char CODE[] = \"RAND_STRING\", *lpString1, *v13, v14;\n    char CONST_STRING1[] = \"XZULKBBXOK\";\n    char CONST_STRING3[] = \"ZXHYGKLQ9867WEPRCDSANMJBVFTU5342\";\n    int* v10 = CONST_STRING1;\n    int* a2 = CONST_STRING1;\n    int* v2 = a2;\n    int* a1 = CODE;\n    int v3;\n    char v4, v6;\n    char v7;\n    int v8;\n    char v9;\n    char v10;\n    char v11;\n    v3 = lstrlenA(CONST_STRING3);\n    if ( *a2 )\n    {\n        v4 = CONST_STRING3[0];\n        do\n        {\n            v6 = *a1;\n            if ( !*a1 )\n                break;\n            if ( v6 < 48 || v6 > 122 )\n            {\n                ++a1;\n            }\n            else\n            {\n                v7 = TO_UPPER(*a1);\n                v8 = 0;\n                if ( v4 )\n                {\n                    v9 = v4;\n                    do\n                    {\n                        if ( v9 == v7 )\n                        break;\n                        v9 = CONST_STRING3[++v8];\n                    }\n                    while ( v9 );\n                }\n                v10 = TO_UPPER(*v2);\n                if ( v10 % v3 != v8 )\n                return 0;\n                ++a1;\n                ++v2;\n            }\n        }\n        while ( *v2 );\n    }\n    return *v2 == 0;\n}\n\n```\nBasically it checks whether the initial character of CODE falls inside CONST_STRING3, what puzzles me is the next condition following it\n\n```\nif ( v10 % v3 != v8 )\nreturn 0;\n\n```\nWhat does this code snippet mean? Why is modulus operation done between the ASCII value of first string in CONST_STRING1 and strlen(CONST_STRING3) and then compared with the index upon the loop break?\n\nSome help to understand this is much appreciated.\n\nEDIT ---- Added TO_UPPER decompiled - code\n\n```\nint __cdecl TO_UPPER(unsigned __int8 a1)\n{\n  int result; // eax\n\n  result = a1;\n  if ( (char)a1 >= 97 && (char)a1 <= 122 )\n    result = a1 - 32;\n  return result;\n}\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "147",
  "tags": [
    "ida",
    "x64dbg"
  ],
  "user": "Nimrod",
  "time": "Apr 13, 2023 at 12:25",
  "comments": [
    {
      "user": "blabb",
      "text": "is rand_string the pass_phrase  it appears to be checking if rand_string == result of this >>> for i in \"XZULKBBXOK\": ...     print(\"ZXHYGKLQ9867WEPRCDSANMJBVFTU5342\"[(ord(i)%0x20)-1])",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Are you sure TO_UPPER's purpose is uppercasing? The strings are all in uppercase anyway and it seems like it returns an index from an iterator rather than a modified character.\n\nIf you take a look at v3, it's CONST_STRING3's length:\n\n```\nv3 = lstrlenA(CONST_STRING3);\n\n```\nConditions of type index % length are a common pattern in decompiled code, they prevent index overflow in arrays - for instance if CONST_STRING1 was longer than CONST_STRING3.\n\nv8 is some index in CONST_STRING3 while v10 looks like the currently processed index of CONST_STRING1. The condition below could be interpreted as:\n\n```\nif ( v10 % v3 != v8 )\nreturn 0;\n\n```\nIf we're at different indexes of CONST_STRING1 and CONST_STRING3, return false (likely to indicate processing failure).\n\nNote that the processing is not linear and the value of v8 depends on CODE.\n\n",
      "votes": "2",
      "user": "mimak",
      "time": "Apr 13, 2023 at 9:55",
      "is_accepted": false,
      "comments": [
        {
          "user": "Nimrod",
          "text": "Thanks @mimak for the answer, I've added in the decompiled code I found for  TO_UPPER, can you verify whether it returns the index or the modified character?",
          "time": null
        },
        {
          "user": "mimak",
          "text": "Well it definitely does just that. I'm unsure about this function's purpose, however if you want to make it return true the easiest way to do that is to set CONST_STRING1 to an empty string.",
          "time": null
        }
      ]
    }
  ]
}