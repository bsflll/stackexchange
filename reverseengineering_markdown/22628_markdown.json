{
  "title": "Why can I inherit handles from WSASocketA and not from socket?",
  "link": "https://reverseengineering.stackexchange.com/questions/22628/why-can-i-inherit-handles-from-wsasocketa-and-not-from-socket",
  "content": "I'm trying to write some custom shellcode to obtain a shell from a program.\nLooking at the program intermodular calls, I found a call to socket(), and my initial plan was to use that to create a new socket, connect back and spawn a shell.\n\nI am able to to get a connection back, but unfortunately when I call CreateProcessA, I don't get any shell.\n\nAfter the call to socket() I have the socket descriptor in EAX:\n\n\n\nAnd then, after connect() (which works, I get the connection back on my netcat listener), I call CreateProcessA() and this are the parameters:\n\n\n\nInheritHandles is correctly set to TRUE. On the left panel I have dumped the StartUpInfo structure and as you can see the file descriptor is correctly added for all handles (first 3 bytes of the structure are all set to 200). Also the flag STARTF_USESTDHANDLES is correctly set.\n\nUnfortunately, this doesn't work. What surprises me is that if instead of using the address of the intermodular call to socket(), I use the address of WSASocketA (found using arwin), and without changing anything else (apart from adding the extra null arguments required for WSASocketA), I can get my shell.\n\nI don't understand why this is not happening with socket(), in fact, according to the documentation for the flag WSA_FLAG_NO_HANDLE_INHERIT of the WSASocketA:\n\nSo I assumed that by default it should work with both functions.\n\nI don't know if this is relevant, but I'm testing it against a Windows 7 machine.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "393",
  "tags": [
    "windows",
    "shellcode"
  ],
  "user": "Zagorax",
  "time": "Nov 27, 2019 at 10:39",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "This isn't really a reverse engineering question. My guess would be that - given you compare WinSock with the socket implementation inherited from BSD - that's your answer right there ...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Windows socket() creates a socket with WSA_FLAG_OVERLAPPED flag set and inheritable by default.\n\nWindows WSASocket() allows you to specify WSA_FLAG_OVERLAPPED and WSA_FLAG_NO_HANDLE_INHERIT.  If you omit both flags to WSASocket(), then the resulting socket will be inheritable and will not have WSA_FLAG_OVERLAPPED flag set.\n\nUnlike on Unix, Windows SOCKET is different from file descriptors or pipes.  If you pass a socket to Windows CreateProcess using STARTF_USESTDHANDLES, the socket must not have WSA_FLAG_OVERLAPPED flag set.\n\nYou managed to (accidentally) use WSASocket() without flags, so created an inheritable socket without WSA_FLAG_OVERLAPPED, so it worked for you!\n\n",
      "votes": "2",
      "user": "gstrauss",
      "time": "Feb 24, 2023 at 11:33",
      "is_accepted": true,
      "comments": []
    }
  ]
}