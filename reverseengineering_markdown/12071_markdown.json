{
  "title": "Why does Olly 2.01 fail to break at the module EP?",
  "link": "https://reverseengineering.stackexchange.com/questions/12071/why-program-opened-with-ollydbg-2-isnt-paused-at-start",
  "content": "I was playing around with tutorials/white papers concerning unpacking, specifically UPX. As Olly 2.01 is my debugger of choice, I attempted to unpack an UPX-packed exe with it and to my surprise, it looks as though it fails to break where it should. \n\nWith Olly 1.10, the execution will stop twice:\n\n1) First in ntdll\n\n\n2) Then the well known PUSHAD instruction in the actual module:\n\n\nThe JMP visible above will jump to the unpacked code:\n\n\n\nThis is the kind of behavior I'd expect. However, Olly 2.01 with the same settings (break at \"Entry point of main module\") will stop at this jump instead:\n\n\nWhich, if followed, will immediately bring us to the unpacked code:\n\n\nAdditionally, the bytes preceding the JMP  in both cases seem to differ, as do the addresses, suggesting this is actually a different piece of code. \n\n\nWhat is happening? Is Olly 2.01 actually \"smarter\", recognizing the packer and stopping at the unpacked OEP? Also, why are the JMPs to unpacked code different (as stated above, different instructions before them and different addresses)?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ollydbg",
    "upx",
    "entry-point"
  ],
  "user": "Alex",
  "time": "Feb 19, 2015 at 16:22",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes! You can disable it in OllyDbg's options though by going to Debugging â†’ SFX and unchecking Unpack SFX modules automatically:\n\n\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Feb 19, 2015 at 16:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "user4520",
          "text": "Wouldn't have guessed :) Goes to show how amazing this free tool is.",
          "time": null
        }
      ]
    }
  ]
}