{
  "title": "What does this function do? Why is one of the variables unresolved?",
  "link": "https://reverseengineering.stackexchange.com/questions/33351/what-does-this-function-do-why-is-one-of-the-variables-unresolved",
  "content": "This function decrypts an array of bytes to the string \"crackmeYG\":\n\n```\n+0x1610  int64_t sub_7ff7c8a11610(int64_t arg1, int128_t* arg2)\n\n+0x1610  {\n+0x1634      void var_1c8;\n+0x1634      int64_t rax_1 = (__security_cookie ^ &var_1c8);\n⚠️+0x1649      int128_t var_1a8;\n+0x1649      __builtin_memcpy(&var_1a8, \"\\xc4\\xff\\xff\\xff\\x98\\xff\\xff\\xff\\xc2\\xff\\xff\\xff\\x95\\xff\\xff\\xff\\xcc\\xff\\xff\\xff\\x99\\xff\\xff\\xff\\xc6\\xff\\xff\\xff\\x82\\xff\\xff\\xff\\xf8\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x32\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x2c\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x34\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x23\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x25\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x2c\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x2e\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\xaf\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x30\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x39\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x30\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x33\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\xaf\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x23\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x33\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x2d\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x30\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x31\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x23\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x26\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x33\\xff\\xff\\xff\\xb1\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x22\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x31\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\xaf\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x33\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x32\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x2b\\xff\\xff\\xff\\x61\\xff\\xff\\xff\\x29\\xff\\xff\\xff\", 0x174);\n+0x1782      int32_t var_34 = 0;\n+0x1789      int64_t rdi = 0;\n+0x178f      *(uint128_t*)arg2 = {0};\n+0x1792      arg2[1] = 0;\n+0x1796      *(uint64_t*)((char*)arg2 + 0x18) = 0xf;\n+0x179e      *(uint8_t*)arg2 = 0;\n+0x179e      \n+0x1803      for (int64_t i = 0; i < 9; )\n+0x1803      {\n+0x17b5          int128_t var_188;\n+0x17b5          char deobfuscated_character = (((int8_t)*(uint32_t*)(&var_1a8 + (i << 2))) - ((int8_t)*(uint32_t*)(&*(uint128_t*)((char*)var_188)[8] + (rdi << 2))));\n+0x17ba          int64_t rcx = arg2[1];\n+0x17be          int64_t rdx = *(uint64_t*)((char*)arg2 + 0x18);\n+0x17be          \n+0x17c5          if (rcx >= rdx)\n+0x17e9              int64_t r8 = sub_7ff7c8a11f60(arg2, rdx, r8, deobfuscated_character);\n+0x17c5          else\n+0x17c5          {\n+0x17cb              arg2[1] = (rcx + 1);\n+0x17cf              int128_t* rax_3 = arg2;\n+0x17cf              \n+0x17d6              if (rdx > 0xf)\n+0x17d8                  rax_3 = *(uint64_t*)arg2;\n+0x17d8              \n+0x17db              *(uint8_t*)((char*)rax_3 + rcx) = deobfuscated_character;\n+0x17df              *(uint8_t*)(((char*)rax_3 + rcx) + 1) = 0;\n+0x17c5          }\n+0x17c5          \n+0x17ee          i += 1;\n+0x17f1          int64_t rax_4 = rdi;\n+0x17f4          rdi += 1;\n+0x17f4          \n+0x17fb          if (rax_4 >= 0x53)\n+0x17fb              rdi = 0;\n+0x1803      }\n+0x1803      \n+0x182e      return sub_7ff7c8a124e0((rax_1 ^ &var_1c8));\n+0x1610  }\n\n```\nI figured out the password by setting a breakpoint through each iteration of the for loop (9 is the length of crackmeYG) and just grabbing the password from a register. However, if I wanted to write a decryptor, how would I do that?\n\nI know that var_1a8 is the encrypted array of bytes. And I know that 9 is the length of the output string. However, I don't understand HOW the loop is deobfuscating the character. I know it's subtracting two characters, but var_188 (the second character) is not defined, and binary ninja nor ida can find it. If you would like to look at the crackme, the link is here: https://crackmes.one/crackme/6757532360fa67152406b66e\n\nThank you for your time.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "127",
  "tags": [
    "decompilation",
    "c",
    "encryption",
    "crackme"
  ],
  "user": "Removed Name",
  "time": "Dec 20, 2024 at 16:34",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "can you show the stack frame layout?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Assuming var_1a8 and var_188 are 32(0xa8-0x88=0x20) bytes apart - we can judge that ((char * ) var_188)[8] additionally adds 8 to the base of the array needed for the second character. This tells that the code is subtracting 2 uint32 read from arrays which are 40 bytes apart\n\n```\nb = b\"...\" # the buffer var_1a8 from above\n\nimport struct\n\nfor i in range(9):\n    a = struct.unpack(\"<I\", b[4 * i : 4 * (i + 1)])[0]\n    c = struct.unpack(\"<I\", b[40 + 4 * i : 40 + 4 * (i + 1)])[0]\n    print(chr(a - c), end=\"\")\n\n```\nwill print\n\n```\ncrackmeYG\n\n```\nEDIT\nAfter downloading the crackme - its one of those times where the disassembly is just simpler\n\n```\n$ r2 -s 0x1400017B0 -c pd2 -q -A cracksme.exe\n.....\n│           ;-- rip:\n│           ; CODE XREF from fcn.140001610 @ 0x140001803(x)\n│           0x1400017b0      448b4cb420     mov r9d, dword [rsp + rsi*4 + 0x20]\n│           0x1400017b5      442b4cbc48     sub r9d, dword [rsp + rdi*4 + 0x48]\n\n```\n0x48-0x20 = 0x28 = 40\n\n",
      "votes": "0",
      "user": "hold-me",
      "time": "Feb 10 at 7:47",
      "is_accepted": false,
      "comments": []
    }
  ]
}