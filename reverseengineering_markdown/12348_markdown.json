{
  "title": "Dynamic instrumentation tools which support reverse execution",
  "link": "https://reverseengineering.stackexchange.com/questions/12348/dynamic-instrumentation-tools-which-support-reverse-execution",
  "content": "I am trying to analyze some execution crash information, and to better identify the root cause of memory access error, I would like to reverse execute the program from the crash point. \n\nFor example, to identify the root cause of memory access error below, I would like to reversely execute from the third line, and by leveraging some data flow analysis techniques, I should be able to identify the root cause at the first line.\n\n```\nmov    -0x18(%rbp),%rax       <---- root cause is at memory -0x18(%rbp)\nadd    %rdx,%rax\nmov    (%rax),%eax            <--- crash when reading (%rax)\n\n```\nSo here is my question, is there any dynamic analysis tool/debugger that can support reverse execution? I prefer Pin, but I am not aware that Pin can do this.. \n\n",
  "votes": "2",
  "answers": 3,
  "views": "274",
  "tags": [
    "binary-analysis",
    "dynamic-analysis"
  ],
  "user": "lllllllllllll",
  "time": "Apr 5, 2016 at 12:47",
  "comments": [
    {
      "user": "Ta Thanh Dinh",
      "text": "In previous versions of Pin, there was API for checkpoint/reexecution; but they are not supported in recent versions. They are instead moved to a more complete framework, called PinPlay.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Have a Look at http://rr-project.org The website says it supports reverse execution. Yet, I am not a 100% sure if this is exactly the same you are talking about. \n\nSee also the gdb record and replay feature here\n\n",
      "votes": "3",
      "user": "langlauf.io",
      "time": "Apr 5, 2016 at 13:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "rr should be definitely tried, I am indeed excited by this implementation. I wish its API more clear to use.",
          "time": null
        }
      ]
    },
    {
      "content": "In previous versions of Pin, there was APIs for checkpoint/re-execution; but they are not supported in recent versions. They are instead moved to a more complete framework, called PinPlay.\n\nYou can also implement an ad-hoc reverse execution using existing API(s) (e.g. Pin_ExecuteAt, Pin_SaveContext, etc). The naive idea is to track the memory writing and store the original value. I have implemented actually such an engine (sorry for the self-advertisement).\n\n",
      "votes": "1",
      "user": "Ta Thanh Dinh",
      "time": "Apr 5, 2016 at 13:10",
      "is_accepted": false,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Many thanks for your information. Could you elaborate more on how to use your engine? Thank you!",
          "time": null
        }
      ]
    },
    {
      "content": "If you have access to IDA, you can use the trace replayer. It doesn't exactly support reverse execution, but I wrote it with the idea to help in the problem you have: check why a crash happened by replaying recorded executions traces. The program is not executing but rather replaying the execution trace, however, in most cases, that is more than enough.\n\n",
      "votes": "0",
      "user": "joxeankoret",
      "time": "Apr 11, 2016 at 9:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}