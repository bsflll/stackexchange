{
  "title": "Branching in arm assembly",
  "link": "https://reverseengineering.stackexchange.com/questions/29379/branching-in-arm-assembly",
  "content": "This is an example assembly code:\n\n```\n     function0()\n 0x0.mov r0, #1\n 0x8.mov r1, #20\n0x10.mov r2, #6\n0x18.cmp r1, #16\n0x20.b function1\n\n     function1()\n0x28.cmp r0, #1\n0x30.b functionX\n\n     functionX()\n0x38.bx lr\n\n```\nAs far as I know, function0 moved those values into the first 3 registers. In function1 no values were moved into registers.\n\nWhat I don't understand is:\n\n",
  "votes": "0",
  "answers": 1,
  "views": "115",
  "tags": [
    "assembly",
    "arm",
    "functions",
    "register"
  ],
  "user": "Silent",
  "time": "Oct 7, 2021 at 14:06",
  "comments": [],
  "answers_data": [
    {
      "content": "It looks like you confuse between functions and blocks. It looks like what you call function0, function1 and functionX are in fact parts of the same function, and just different basic blocks within the function.\n\nTo your specific questions:\n\n",
      "votes": "0",
      "user": "macro_controller",
      "time": "Oct 7, 2021 at 14:05",
      "is_accepted": true,
      "comments": [
        {
          "user": "Silent",
          "text": "Since you mentioned functions an blocks, would there be a difference if those functions were actually 3 different functions and not blocks from the same function?",
          "time": null
        },
        {
          "user": "macro_controller",
          "text": "About the first question - there will be no difference. About the second - the lr will change on each call (assuming call instruction is used, instead of b)",
          "time": null
        }
      ]
    }
  ]
}