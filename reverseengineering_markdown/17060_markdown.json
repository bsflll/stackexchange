{
  "title": "Linux x64 Disassembly: single movzwl operand question",
  "link": "https://reverseengineering.stackexchange.com/questions/17060/linux-x64-disassembly-single-movzwl-operand-question",
  "content": "A quick question regarding a movzwl instruction which do not behave as I expected. \n\nhere is the disassembled code:\n\n```\nmovzwl (%rax),%eax\n\n```\nBefore the instruction, rax is 0x7fffffffe410 and point to 0x5\nAfter the instruction, I would expect eax to be 0x5 (which is the case), but I would not expect that the upper bits of rax be cleared too... However, when debugging, rax values 0x5...\n\nI thought that movzwl would only clear the upper bits of eax, but not the rax ones. Could you explain? \n\nThank you very very much for your help!\n\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "linux",
    "x86-64"
  ],
  "user": "David Labay",
  "time": "Dec 28, 2017 at 11:12",
  "comments": [
    {
      "user": "Jongware",
      "text": "\"I thought that ..\": Did you check the official Intel documentation?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is a somewhat tricky part of the x64 instruction set and is not mentioned in descriptions of individual instructions but only as a sidenote in the general introduction section. Here's a good answer on it:\n\nhttps://stackoverflow.com/questions/11177137/why-do-x64-instructions-zero-the-upper-part-of-a-32-bit-register\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Dec 28, 2017 at 23:13",
      "is_accepted": false,
      "comments": []
    }
  ]
}