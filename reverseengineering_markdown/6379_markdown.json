{
  "title": "Accessing debug log on Java application",
  "link": "https://reverseengineering.stackexchange.com/questions/6379/accessing-debug-log-on-java-application",
  "content": "I'm currently reverse engineering a JSP applet running through JBoss. Decompiling the code it looks like there are a bunch of Logger.debug() calls in the code that aren't guarded. A quick read through the API and I didn't see where this output actually goes or if it's even accessible, but since I'm pretty new at REing Java stuff I figured being able to see the log messages being printed as the application is running would go a long way to figuring out code flow.\n\nIs there an easy way to read debug output from the running application? I saw JavaSnoop referenced in another Stack Exchange post and I'm probably going to explore that but I didn't know if there was an easier way. All I want to do for now is try to get a handle on how to interact with the parts of the application.\n\nOr if there's a better way to go about it that would be appreciated as well. What I'm looking at is a Java SE binary so tracing that to the servlets is the end goal.\n\nThanks.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "103",
  "tags": [
    "java"
  ],
  "user": "Fewmitz",
  "time": "Oct 4, 2014 at 21:02",
  "comments": [
    {
      "user": "Antimony",
      "text": "Have you tried just replacing them with calls to Systme.out.println?",
      "time": null
    },
    {
      "user": "Fewmitz",
      "text": "I don't have access to source. And even if I did that would go to the console, which also isn't displayed by the application",
      "time": null
    },
    {
      "user": "Antimony",
      "text": "You can patch the method calls directly, assuming they're not using reflection to obfuscate everything.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "An easier way could be to find out which logging framework is being used (your class names could tell you that) and find out how it's configured. For example, if the once-popular log4j is being used, creating an XML file might be all that's neccesary. (logging.apache.org/log4j/2.x/manual/configuration.html). Tracing JBoss with ProcMon (on Windows) or strace -efile (on Linux) or truss (on Solaris) might even give you the name of a logger configuration file it's trying to access when starting.",
      "time": null
    }
  ],
  "answers_data": []
}