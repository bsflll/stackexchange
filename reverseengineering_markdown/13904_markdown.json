{
  "title": "move with sign extension in c code",
  "link": "https://reverseengineering.stackexchange.com/questions/13904/move-with-sign-extension-in-c-code",
  "content": "I'm quite confused with the \n\nI'm trying to convert assembly code to C. \nbut stuck with movsx part. \n\n\n\nthis is the code I got so far. \n\n```\n#include <stdio.h>\n#include <windows.h>\n\nint main(){\n    char str[24] = \"Aegisone security\";//17+1\n\n    char *a;\n    a = &str[24]-24;\n    char a2 = -*(a+6);\n\n\n    //str[32] = *(a+6);\n\n    //char str2[4]=a;\n    MessageBox(0,\"Hello\",\"reversing\",0);\n    return 0;\n}\n\n```\ncan you help show me some example to usage of movsx thing in c code?\nthe part I troubled is\n\n```\nMOVSX EDX , BYTE PTR DS:[ECX+6]\nMOV DWORD PTR SS: [EBP-20],EDX'\n\n```\nI need some more detail explanation about this part\nmy C-code above showing little bit different \n\n```\nMOVESX EDX,BYTE PTR DS:[ECX+6]\nNEG EDX\nMOV BYTE PTR SS:[EBP-20],DL\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "702",
  "tags": [
    "disassembly",
    "assembly",
    "decompilation",
    "c"
  ],
  "user": "Mike Kim",
  "time": "Nov 12, 2016 at 16:12",
  "comments": [
    {
      "user": "Mike Kim",
      "text": "guys, always it is I found answer myself after 30 minutes I asked a question. change char a2 = -*(a+6) to   int a2 = *(a+6)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The C compiler handles sign extension automatically for signed variables when they're converted into bigger/wider signed variables. However, you defined that variable as a char which the standard does not enforce sign-ness for, so the compiler is not obligated to sign-extend that variable assignment.\n\nBut the most important part is that only when you replaced the char with an int you created a variable 4 bytes long that could actually be sign extended.\n\nLast but not least, removing the minus mark obviously removed the NEG EDX instruction.\n\nIf you didn't, looks like you still need to change the assignment line (str[32] = *(a+6);) to treat the destination as a dword sized array, because you're interested in assigning the entire dword. Your code will still have MOV BYTE PTR SS:[EBP-20],DL instead of MOV DWORD PTR SS: [EBP-20],EDX unless you have something like (int*)str[8] = *(a+6);\n\nI replaced the 32 with an 8 because we're indexing 4-byte long array instead of a single byte long array.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Nov 12, 2016 at 16:29",
      "is_accepted": false,
      "comments": []
    }
  ]
}