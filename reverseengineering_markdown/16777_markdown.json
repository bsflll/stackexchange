{
  "title": "Unicorn emulator: find out if register is undefined",
  "link": "https://reverseengineering.stackexchange.com/questions/16777/unicorn-emulator-find-out-if-register-is-undefined",
  "content": "Maybe I am stupid, but I really dont see anything in their documentation. \nSay I emulate this code\n\n```\nmov eax, 1\nmov ecx, 2\n\n```\nThen I can get the result  like so:\n\n```\nint rr;\nuc_reg_read(uc, UC_X86_REG_ECX, &rr);\n\n```\nNow I have to wonder - what happens when I read from an undefined register, say ESI?\n\n```\nuc_reg_read(uc, UC_X86_REG_ESI, &rr);\n\n```\nAnswer is rr == 0. But how can I detect that this register is undefined, rather than '0'?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "470",
  "tags": [
    "x86",
    "emulation"
  ],
  "user": "bernd feinman",
  "time": "Nov 18, 2017 at 0:52",
  "comments": [],
  "answers_data": [
    {
      "content": "an emulator requires your input to emulate if you didn't define something you would obviously get what it was initialized with  \n\napparently unicorn starts initialized with 0 for all registers it seems \n\nsrc to read all registers using the given api\n\n```\n:\\>cat testumu.cpp\n#include \"unicorn.h\"\n#pragma comment(lib,\"unicorn.lib\")\n#define REG_NUMS 9\nvoid main (void) {\n    uc_engine *uc;\n    int regs[REG_NUMS]  = {\n        UC_X86_REG_EAX,UC_X86_REG_EBX,UC_X86_REG_ECX,\n        UC_X86_REG_EDX,UC_X86_REG_EBP,UC_X86_REG_ESP,\n        UC_X86_REG_ESI,UC_X86_REG_EDI,UC_X86_REG_EIP\n    };\n    int bugs[REG_NUMS] = {1,2,3,4,5,6,7,8,9};\n    void *vals[REG_NUMS];\n    for(int i =0; i<REG_NUMS;i++) {\n        vals[i] = &bugs[i];\n    }\n    printf(\"values before reading  \n  \n\");\n    for(int i =0 ; i< REG_NUMS; i++) {\n        printf(\"%x\\t%x  \n\" , regs[i],*(int *)vals[i]);\n    }\n    if((uc_open(UC_ARCH_X86, UC_MODE_32, &uc)) == UC_ERR_OK) {\n        uc_reg_read_batch(uc,regs,vals,9);\n    }\n    printf(\"values after reading  \n  \n\");\n    for(int i =0 ; i< REG_NUMS; i++) {\n        printf(\"%x\\t%x  \n\" , regs[i],*(int *)vals[i]);\n    }\n}\n\n```\ncompiled and linked with vc2017 community cmd prompt for x86\n\n```\n:\\>cl /nologo /Zi /W4 /analyze /Ox testumu.cpp /link /release\ntestumu.cpp\n\n:\\>\n\n```\nresults of compiled executable \n\n```\n:\\>testumu.exe\nvalues before reading\n\n13      1\n15      2\n16      3\n18      4\n14      5\n1e      6\n1d      7\n17      8\n1a      9\nvalues after reading\n\n13      0\n15      0\n16      0\n18      0\n14      0\n1e      0\n1d      0\n17      0\n1a      0\n\n:\\> \n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Nov 18, 2017 at 11:45",
      "is_accepted": false,
      "comments": [
        {
          "user": "bernd feinman",
          "text": "what i want to find out is essentially if a given emulated asm snipped modified/set a register. For that I could set all the register to some magic value and then check after emulation which ones differ. I am wondering if there is a better method.",
          "time": null
        }
      ]
    },
    {
      "content": "Unicorn only supports concrete values in registers. \nYou could cheat your way around this by doing two runs with two sets of magic values.\n\nBut what you really want is a symbolic execution framework like angr. There registers can be undefined after execution or even contain expression trees like old_ebx*2+1. \n\n",
      "votes": "1",
      "user": "manduca",
      "time": "Mar 18, 2018 at 14:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}