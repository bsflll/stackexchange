{
  "title": "What is Hardware Breakpoint and when we need to use it?",
  "link": "https://reverseengineering.stackexchange.com/questions/28045/what-is-hardware-breakpoint-and-when-we-need-to-use-it",
  "content": "In part 5 of the lena151 RE tutorial I saw the Hardware BP.\nThe explanation he gave was very difficult for me to understand.\n\nCan anyone explain what is a hardware breakpoint and when we need to use it?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "breakpoint"
  ],
  "user": "Jason",
  "time": "Jul 26, 2021 at 7:39",
  "comments": [],
  "answers_data": [
    {
      "content": "The short answer:\n\nFrom the user point of view, software breakpoints are only for instructions, and you may set them as many as you want, while hardware breakpoints are universal, but you may use only a few of them (typically 4) at the same time.\n\nTL,DR;\n\nThe hardware breakpoints are implemented by a special logic circuit integrated directly in the CPU, connected to\n\n\n\nTo set a hardware breakpoint, you fill the debug registers (generally indirectly by your debugger) with this information:\n\nYou may do it only for small number of addresses, it's hardware dependent, the common number is 2 to 6 (e.g. for x86 you may set 4 hardware breakpoints: addresses are written to the debug registers DB0 to DB3, while other info — for all addresses individually as appropriate bit flags — to the DB7 register).\n\nThe circuit watches every access to the memory (RAM or ROM) and compares address, length, and access mode with values in the debug registers. If they correspond, the circuit sends the Halt signal and the debugger interrupts the execution of the debugged program.\n\nSo the differences between hardware breakpoints (HB) and software ones (SB) are:\n\nFor example, if you know the address of some string in memory and you are interested when it will be read, SB doesn't help you, but HW does.\n\nSome references:\n\n",
      "votes": "4",
      "user": "MarianD",
      "time": "Jul 26, 2021 at 10:12",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jeremy",
          "text": "In actual practice of applying dynamic analysis on code with a debugger, the difference that really is significant is that software breakpoints can be overwritten (and modify contents of program memory). This is especially important if you are dealing with self -modifying code or code that writes to the executable sections of memory (ie unpackers) For example if you know OEP is at address X and you want to run till you hit that address from EP, you need to use a hw breakpoint because the unpacking stub will overwrite your int3 breakpoint at oep. Other more complex nuances as well.",
          "time": null
        }
      ]
    }
  ]
}