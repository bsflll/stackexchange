{
  "title": "What is the state of the stack in the entry function?",
  "link": "https://reverseengineering.stackexchange.com/questions/26020/what-is-the-state-of-the-stack-in-the-entry-function",
  "content": "I have an ELF binary and in the entry function the first two instructions are:\n\n```\nXOR EBP, EBP\nPOP ESI\n\n```\nI'm curious what the state of the stack is at the start of the entry function in ELF and PE binaries (and others if possible).\nI had thought it was empty but presumably there is something there to be poped.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "423",
  "tags": [
    "elf",
    "stack",
    "entry-point"
  ],
  "user": "TableMagnet",
  "time": "Oct 1, 2020 at 8:34",
  "comments": [],
  "answers_data": [
    {
      "content": "In the _start function, argc, argv and envp are contained on the stack.\n\nA good read on this is the Linux x86 Program Start Up or - How the heck do we get to main()?\n\n",
      "votes": "1",
      "user": "Shane Reilly",
      "time": "Oct 1, 2020 at 12:55",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "The stack layout at the entry point for 32-bit Linux executables is described in the System V Intel386 Architecture ABI Supplement.\n\nIt looks like following:\n\n\n\nSo pop edi copies the argc value into  edi and the following code probably builds the argv array for the main function.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Oct 1, 2020 at 22:23",
      "is_accepted": false,
      "comments": []
    }
  ]
}