{
  "title": "How to merge or manage builtin data types in Ghidra with GDTs?",
  "link": "https://reverseengineering.stackexchange.com/questions/33314/how-to-merge-or-manage-builtin-data-types-in-ghidra-with-gdts",
  "content": "I'm trying to understand how Ghidra's GDTs are supposed to be used, particularly the case of builtin data types.\n\nWhen I create a data type library in Data Type Manager (-> Create File Archive) and import function prototypes to it from a binary with debug information—testing with libm.so.6—that library gets copies of the builtin data types like bool, float, int16 etc. in addition to the ones specific to the binary:\n\n```\n├── BuiltinTypes\n│   ├── double\n│   ├── float\n├── test_library\n│   ├── _CAPTURED_FROM_libm.so.6\n│   │   ├── __acosf: float __stdcall __acosf(float __x)\n│   │   ├── ...\n│   ├── double\n│   ├── float\n\n```\nWhen I use these libraries to import signatures into programs without full debug symbols, the function definitions often end up containing types like float.conflict. I assume this happens because of the multiple copies of float.\n\nNow, I think I can be fairly sure that all my floats are the same float, which makes me think I would want to make all floats always refer to BuiltinTypes::float.\n\nHere my first attempt was to right click test_library::float, select Replace... and replace it with the float in BuiltinTypes. Unfortunately, doing that changes the __acosf prototype from\n\nfloat __stdcall __acosf(float __x)\n\nto\n\nundefined __stdcall __acosf(undefined __x)\n\n, which obviously defeats the purpose.\n\nQuestions:\n\n",
  "votes": "2",
  "answers": 0,
  "views": "43",
  "tags": [
    "ghidra",
    "symbols"
  ],
  "user": "Sami Liedes",
  "time": "Nov 21, 2024 at 17:28",
  "comments": [],
  "answers_data": []
}