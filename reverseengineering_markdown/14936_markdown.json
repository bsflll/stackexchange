{
  "title": "How can I change the values in esp?",
  "link": "https://reverseengineering.stackexchange.com/questions/14936/how-can-i-change-the-values-in-esp",
  "content": "```\n   0x08048785 <+344>:   movl   $0x0,0xc(%esp)\n   0x0804878d <+352>:   movl   $0x804896c,0x8(%esp)\n   0x08048795 <+360>:   movl   $0x8048973,0x4(%esp)\n   0x0804879d <+368>:   movl   $0x8048973,(%esp)\n=> 0x080487a4 <+375>:   call   0x8048470 <execlp@plt>\n\n```\nI am wondering is it possible to alter the argument that is going to the function execlp() in order to execute a shell? and if it is possible how can I change those values like 0x8(%esp)?\n\nThanks a lot.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "968",
  "tags": [
    "disassembly",
    "debugging",
    "binary-analysis",
    "gdb"
  ],
  "user": "mylifeisdark",
  "time": "Mar 18, 2017 at 5:30",
  "comments": [
    {
      "user": "NirIzr",
      "text": "It's not quite clear if you're interested in manually changing that assembly code by patching or are you're asking about exploitation.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes, this is possible. The strings located at the memory addresses written to the stack prior to calling execlp can be patched such that /bin/sh is executed instead. If there is not enough space for the pathname of the program to execute and/or its arguments between the current memory references, the memory addresses being written to the stack will have to be patched as well to reflect the lengths of the new strings they reference.\n\nThe memory addresses being written to the stack prior to calling execlp are pointers to strings in the .rodata section of the binary, where  the string pointed to by the first argument (0x8048973 in the snippet of disassembled code above) is the pathname of the program to execute (we can think of execlp as \"exec load path\"). If this string is changed, execlp will load the program located at the new pathname.\n\nFor reference, here is the prototype for execlp and its description from the man page:\n\nHere is a good explanation of how execlp works:\nI do not understand how execlp() works in Linux\n\nNote also that since the ISA is x86 and the compiler is GCC, the arguments to a function are written to the stack in the reverse order of their corresponding parameters in the function prototype. This means that the last argument written to the stack corresponds to the first parameter in the function prototype. In the case of execlp, the last argument written to the stack prior to calling execlp will be the pointer to the pathname of the program to load.\n\nPatching strings in the .rodata section and patching instructions and memory addresses in the .text section can be accomplished using a hex editor like xxd or hexedit, or by using radare2.\n\nResources\n\nFor using GDB to patch the binary, see these:\n\nUsing GDB to modify an executable\n\nUse gdb to Modify Binary\n\nDebugging with GDB: Patching\n\nELF binary modification:\n\nFixing/Making Holes in ELF Binaries/Programs - Black Hat\n\nHow do I add functionality to an existing binary executable?\n\nThe ELF shell\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}