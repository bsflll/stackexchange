{
  "title": "Are there existing automated approaches to reverse engineering the data types in a binary data stream?",
  "link": "https://reverseengineering.stackexchange.com/questions/22658/are-there-existing-automated-approaches-to-reverse-engineering-the-data-types-in",
  "content": "Consider a stream of data packets of a known and consistent size, i.e., N bytes per packet.\nAre there existing tools that automatically detect (or estimate) the various data types present and their arrangement in the packet?\nMy goal is to convert the data stream into a handful of time-series data signals by\n\nFor example, the packet might consist of:\n\n```\n[double double int32 single int8 int8 int8 int8]\n\n```\nbut all I know is that the packet is 28 bytes long.\nLet's assume that the only possible data types in the stream are: double, single, int32, int16, or uint8.\n(I don't particularly care if I can disambiguate between char, int8, or uint8.)\nLet's also assume everything is stored in bytes (no single bit flags or anything).\n\nBasically what I've tried so far is to exhaustively try every possible combination and arrangement of data types and then apply some heuristics to eliminate possibilities.\nFor example, I'll cast each set of 8 bytes as a double, shifting over 1 byte at a time, and then compute the variance of the resulting signal.\nIf the variance of the signal is >1e100, then we can probably safely say we've misidentified the type.\nThe problems that this approach runs into are that:\n\nI'm also aware of these two related questions: How to analyze binary file? and Tools to help reverse engineer binary file formats,\nbut these answers seem to only give manual tools that require the user to then play around with the data and make some guesses about its configuration.\nSo, my question is particularly interested in automatic approaches or tools for this job.\n\nThis seems related to this question and its answer, but the methods mentioned there seem to be aimed at a more general task of inferring the communication protocol, and not necessarily(?) the datatypes of the packet's payload, so I'm not sure how suitable these programs are to the task I've described.\n\n",
  "votes": "6",
  "answers": 1,
  "views": "466",
  "tags": [
    "binary-analysis",
    "file-format"
  ],
  "user": "J. Tylka",
  "time": "Dec 3, 2019 at 4:17",
  "comments": [
    {
      "user": "pythonpython",
      "text": "I'm working on this. Please post more specifics. If you have a capture of the packets that would be helpful (the more the better).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IMO there is not much to add to the linked answer (even though it's focused on network protocols, your task sounds pretty similar).\n\nOne more thing you can try is to look at papers citing the mentioned tools to find more/related approaches or tools.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Dec 2, 2019 at 21:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}