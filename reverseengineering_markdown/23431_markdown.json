{
  "title": "Tons of error bookmark on Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/23431/tons-of-error-bookmark-on-ghidra",
  "content": "I'm new to Ghidra so go easy on me. Running it on Windows.\n\nAfter successfully extracting a Bluetooth door lock's firmware from a nRF51, I proceeded to decompile it using Ghidra. My aim is to able to read some of its original source code, even though I understand it won't be as clean as the original.\n\nBut, after analyzing the bin file, I get tons of error. Architecture used/tried to solve this issue was both the ARM Cortex LE 32 bit and the ARM v6 LE 32 bit. Looked for solutions on the internet and I did not find anyone with the same issue. All of the errors are Bad Instruction.\n\nHere's pictures of two different analyze:\n\nWithout ARM Aggressive Instruction Finder (Prototype)\n\n\nWith ARM Aggressive Instruction Finder (Prototype)\n\n\nThe reason I posted two pictures of my code browser because those two different analysis gave me different amount of bookmark. I know it's because of the Instruction Finder but who knows this might help you to help me.\n\nI have also tried adding a line into my ia.sinc file as suggested by a user named nsadeveloper789 on a GitHub issue but it did not solve my issue. I have also tried the No Return method from a PDF lesson (page 11) and no luck as well.\n\nDid used SVD-Loader as well but still doesn't solve the issue as the SVD-Loader's script itself might have an issue and I've commented on this issue on GitHub (currently no specific solution). You can have a look at this issue here. \n\nDoes anyone knows how to solve this issue? I've been trying for a week or two now and even asked this in the unofficial Ghidra's Discord group but no answer yet.\n\nLooking forward for your answers. Thanks in advance.\n\nHere's a link to download the bin file:\nhttps://filebin.net/5abhimciwdfr5gfi\n\n",
  "votes": "2",
  "answers": 1,
  "views": "955",
  "tags": [
    "firmware",
    "ghidra"
  ],
  "user": "Calvin9",
  "time": "Mar 13, 2020 at 4:34",
  "comments": [
    {
      "user": "Robert",
      "text": "According to some spec I found the CPU is an16MHz Cortex M0 which according to Wikipedia an ARMv7 CPU. Hence it may be the case that the illegal instructions are ARM thumb instructions. See also this question.",
      "time": null
    },
    {
      "user": "mumbel",
      "text": "Why are you editing ia.sinc, the Intel x86/64 SLEIGH file, for ARM issues?  One reason you are getting errors is the binary is not PIC and it not located at 0x0, find the correct loading address and move it there",
      "time": null
    },
    {
      "user": "Calvin9",
      "text": "Robert, thanks but that't not the case because I've tried that as well (sorry, I forgot to mention). 0xec's answer helped me so no worries.  Mumbel, thanks for letting me know that! I thought that method was to fix any issue regarding error bookmark. Thanks once again",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The firmware is incorrectly dumped. In your file all occurrences of the byte 0A have been replaced with 0D 0A. Looks like a line ending issue. May be the tool which you have used to dump the firmware have prepended a 0D to each 0A.\n\nAfter replacing all instances of 0D 0A with 0A, it has an exact size of 256 KiB (262144 bytes) as it should be. Previously it had a size of 263788 bytes ~ 257.6 KiB.\n\nFor reference, I've uploaded the fixed firmware here\n\n```\n$ ./sfk196-linux-64.exe replace dump.bin  -binary /0d0a/0a/ -yes\n[total hits/matching patterns/non-matching patterns]\n[1644/1/0] dump.bin   -1644 bytes\n1 files checked, 1 changed.\n\n$ du -b dump.bin\n262144  dump.bin\n\n```\nFurther you can use nrf5x-tools on the fixed firmware to verify.\n\n```\n$ python3 ./nrfident.py bin ../dump.bin 2>/dev/null\n############################ nRF5-tool ############################\n#####                                                         #####\n#####                Identifying nRF5x firmwares              #####\n#####                                                         #####\n###################################################################\n\n\nBinary file provided ../dump.bin\n\nComputing signature from binary\nSignature:  26d6240e598f89b8aeabcecb96f3c5595b07bfc315b969a13aca34b2e61a7dc0\nSearching for signature in nRF.db\n=========================\nSDK version:  8.1.0\nSoftDevice version: s110\nNRF: nrf51822\n=========================\nSDK version:  9.0.0\nSoftDevice version: s110\nNRF: nrf51822\n=========================\nSDK version:  10.0.0\nSoftDevice version: s110\nNRF: nrf51822\n=========================\nSDK version:  8.0.0\nSoftDevice version: s110\nNRF: nrf51822\n                               ==================\nnRF5x signature written to file nRF_ver in current directory\nnRF_ver path must be provided when running nrfreverse.py from IDA\n\n                                     *****\n                                  Binary mapping\n                                     *****\n\nSoftDevice  :  s110\nCard version :  xxaa\n           *****\nRAM address  :  0x20002000\nRAM length   :  0x2000\nROM address  :  0x18000\nROM length   :  0x28000\n\n                                     *****\n                                  Binary mapping\n                                     *****\n\nSoftDevice  :  s110\nCard version :  xxab\n           *****\nRAM address  :  0x20002000\nRAM length   :  0x2000\nROM address  :  0x18000\nROM length   :  0x8000\n\n                                     *****\n                                  Binary mapping\n                                     *****\n\nSoftDevice  :  s110\nCard version :  xxac\n           *****\nRAM address  :  0x20002000\nRAM length   :  0x6000\nROM address  :  0x18000\nROM length   :  0x28000\n\n```\nLoading the binary in Ghidra using the language ARM-Cortex-32-little, the code is readable.\n\n\n\nThere are still some errors but those are because I have not created the memory segments. For more information look into the nRF51 Series Reference Manual, Section - 5.\n\n\n\n",
      "votes": "6",
      "user": "0xec",
      "time": "Mar 15, 2020 at 9:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "Calvin9",
          "text": "Thank you so much! Btw, I used SVD-Loader for memory segment but all it did was reducing the amount of errors and no warnings. On my console, it does show that my SVD- Loader \"\"failed to generate peripheral ....\". Do I have to add it manually?",
          "time": null
        },
        {
          "user": "0xec",
          "text": "@Calvin9 Most likely the reason for the error is because multiple peripherals have the same address. So the script fails. See 5.2 Instantiation in the reference manual.",
          "time": null
        }
      ]
    }
  ]
}