{
  "title": "Buffer overflow challenge - shell not opening",
  "link": "https://reverseengineering.stackexchange.com/questions/18340/buffer-overflow-challenge-shell-not-opening",
  "content": "I'm working on a buffer overflow CTF challenge. The binary for this challenge includes a give_shell function (they cover shellcode in the next challenge)\n\nI can successfully overwrite the saved EIP on the stack to redirect execution to the 'give_shell' function:\n\n```\n080484cb  push    ebp\n080484cc  mov     ebp, esp\n080484ce  sub     esp, 0x8\n080484d1  sub     esp, 0xc\n080484d4  push    0x80485f0 {var_1c}  {\"/bin/sh\"}\n080484d9  call    system\n080484de  add     esp, 0x10\n080484e1  nop     \n080484e2  leave    {__saved_ebp}\n080484e3  retn\n\n```\nHowever, even though I can confirm in GDB that the program is stepping through the give_shell function - no shell launches, either in GDB, locally or using Netcat to the actual CTF server.\n\nI'm unsure what I am missing here. Is this a case where I need to bind or reverse the shell in order to be able to use it interactively? I've seen that discussed in shellcode examples, but not sure how to do it in this case. \n\nThank you!\n\n",
  "votes": "3",
  "answers": 1,
  "views": "942",
  "tags": [
    "gdb",
    "buffer-overflow"
  ],
  "user": "BronzeOtter",
  "time": "May 23, 2018 at 16:28",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "If you step into the call system, does it actually end up in the correct place?",
      "time": null
    },
    {
      "user": "Elian Kamal",
      "text": "If you're on a Linux system with a custom shell (e.g bash). could you try statically patching the \"/bin/sh\" string by changing it to \"/bin/bash\" for example (hopefully, the length wouldn't be an issue or would only shorten a consecutive string). And have you tried running the program/gdb as root? Also, may I ask which CTF series it is from?",
      "time": null
    },
    {
      "user": "BronzeOtter",
      "text": "@igor-skochinsky Thanks for your comment. Your question is a great one and I'm not sure I have a full answer. I CAN stepi into system@plt - however, once I'm in system@plt I can nexti through it, however GDB will not allow me to disass system@plt - when I try it responds No symbol \"plt\" in current context. - not sure if that's because there is something special about system@plt or it is because something is wrong. I can attach a screen cap if needed. Thank you!",
      "time": null
    },
    {
      "user": "BronzeOtter",
      "text": "@elian-kamal Thank you for your comment! Running gdb as root gets the same non-result. No shell is launched. This is a challenge from the Recruit CTF series, which is a fantastic (but fairly tricky) intro series.",
      "time": null
    },
    {
      "user": "perror",
      "text": "You can read this answer. Everything should be in it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Calling system@plt implies that you are calling system through the procedure linkage table, instead of directly. I would suggest pointing EIP at the address of the system function instead of at the plt version, as that tends to work reliably.\n\n",
      "votes": "1",
      "user": "DeepS1X",
      "time": "May 26, 2018 at 8:32",
      "is_accepted": false,
      "comments": [
        {
          "user": "BronzeOtter",
          "text": "Was thinking about this as well. Problem is that the challenge in this case is to point execution to a give_shell function that calls system and supplies the correct argument to open a shell. Calling the system function directly would leave it without the correct argument, correct? Thank you!",
          "time": null
        },
        {
          "user": "DeepS1X",
          "text": "When doing a ret2libc exploit, if you provide the the stack looking like this, you will be able to get a shell:",
          "time": null
        },
        {
          "user": "DeepS1X",
          "text": "--buffer--address of system--fake return address--address of /bin/sh",
          "time": null
        }
      ]
    }
  ]
}