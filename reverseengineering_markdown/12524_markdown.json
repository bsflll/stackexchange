{
  "title": "How to get the runtime memory region information when instrumenting using Pin?",
  "link": "https://reverseengineering.stackexchange.com/questions/12524/how-to-get-the-runtime-memory-region-information-when-instrumenting-using-pin",
  "content": "I am using Pin for some execution monitoring tasks towards x64 ELF binary code.\n\nDuring the monitoring, for any memory write/read operation of the original code, I would like to record it as long as it refers the heap. However, given a memory address, I have no idea whether it refers the heap memory region or not.\n\nOne possible solution I can come up with is that, before every memory operation, I acquire the runtime memory region information of the target process, and check whether the current memory address is within the heap region. This can be done by following the steps below inside the Pintool.\n\nHowever, this is tedious and my test shows that this is extremely slow, as the size of memory heap can change during the runtime which means I need to go through the above steps everytime before memory operation. \n\nSo I am wondering, does Pin has APIs to provide the heap memory region information? Or is there any solution more efficient that the above one? \n\n===================== update ===============================\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "dynamic-analysis",
    "pintool"
  ],
  "user": "lllllllllllll",
  "time": "Apr 25, 2016 at 16:41",
  "comments": [
    {
      "user": "user26860",
      "text": "I want to know how to solve this problem .Could you give me some advice?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "As you're saying you're using ELF code, i assume you're running under Linux, or another unix-y system. And proc/self/maps (you don't have to getpid() and use /proc/XXX/maps, really) hints at Linux as well.\n\nOne problem i see is the definition of heap - what about memory mapped regions, do they count as \"heap\" or not? Linux malloc uses mmap in some cases instead of expanding the heap, which is typically done by brk (which may itself be just a wrapper around mmap/mremap depending on your libc).\n\nIf you want to trace everything that's in malloced memory, i'd just compare the address to the end of the code segment (but beware of dynamic libraries; or omit that comparison completely as code typically isn't read and can't be written anyway) and the current value of the stack pointer. If the address is below the stack pointer, assume heap.\n\nIf you want to trace what's in the original, brk-managed heap only, read your memory map just once at the start, getting the heap start address, and monitor brk calls, adjusting the end address after each brk.\n\nOn x64, \"below the stack pointer\" must be taken with a grain of salt. On 16- and 32-bit x86 processors, anything below the stack pointer can be clobbered by hardware interrupts at any time, so sp/esp are a barrier to what software can use. On 64 bit processors, however, the ABI guarantees that 128 bytes below the stack pointer aren't changed by interrupts, so the compiler is free to use them (and will do so in leaf functions). Which means, you really need to compare your address to esp-0x80 if you're dealing with x64 code.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Apr 25, 2016 at 17:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Very smart idea! I will check whether the address is within code section and stack pointer rsp. Thank you for saving my ass ;)",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "Hi Guntram, recall rsp does not always refer to the top of the stack.. For example, at the beginning of one function, it can be something like this: mov esp, ebp;  mov eax, [ebp-16]...",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Are you certain about this? Every function i've encountered makes sure to not access any memory below [er]sp, and function prologues typically push the old [er]bp, move sp into bp (the other way round than you describe), and subtract something from sp. Whatever is a few bytes below sp is subject to change without visible reason, because a hardware interrupt will cause the processor to push flags, cs and ip on the stack, and software can't predict when they arrive.",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "Hi Guntram, I uploaded a screen shot",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Found something: eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64 - going to include the essentials of that in my answer. Seems like on x64 only 128 bytes below the stack are \"reserved\", i.e. won't be clobbered by interrupts.",
          "time": null
        }
      ]
    }
  ]
}