{
  "title": "Restoring the file structure from a cocos2d-x JS Android APK, post decryption?",
  "link": "https://reverseengineering.stackexchange.com/questions/33245/restoring-the-file-structure-from-a-cocos2d-x-js-android-apk-post-decryption",
  "content": "I am currently learning how to reverse engineer an APK and have made significant progress. Here’s what I've accomplished so far:\n\nHowever, I’m stuck on figuring out the correct folder structure for certain assets within the \"Main\" folder.\n\nHere’s what I know about the asset packs in the \"Main\" folder:\n\nI’ve included some relevant code snippets and file structure details to illustrate what I’m working with:\n\n```\n{\n    \"paths\": {},\n    \"types\": [],\n    \"uuids\": [\n        \"05mU7WsllFO4elu4Re6/pm\",\n        \"fcTsdoxZlLpKd3It99/+h6\"\n    ],\n    \"scenes\": {\n        \"db://assets/main.fire\": 127,\n        \"db://assets/start.fire\": 120\n    },\n    \"redirect\": [1, 0, 2, 0, 4, ... 0, 146, 0],\n    \"deps\": [\"resources\", \"internal\"],\n    \"packs\": {},\n    \"name\": \"main\",\n    \"importBase\": \"import\",\n    \"nativeBase\": \"native\",\n    \"debug\": false,\n    \"isZip\": false,\n    \"encrypted\": true\n}\n\n```\n(but you can see the bottom section provides a filestructure / names for the bundles, which is how I reverse engineered and unbundled it)\n\n```\n{\n    1: [function(e, t, i) {\n        \"use strict\";\n        const n = i;\n        n.bignum = e(\"bn.js\");\n        n.define = e(\"./asn1/api\").define;\n        n.base = e(\"./asn1/base\");\n        n.constants = e(\"./asn1/constants\");\n        n.decoders = e(\"./asn1/decoders\");\n        n.encoders = e(\"./asn1/encoders\");\n    }, {\n        \"./asn1/api\": 2,\n        \"./asn1/base\": 4,\n        \"./asn1/constants\": 8,\n        \"./asn1/decoders\": 10,\n        \"./asn1/encoders\": 13,\n        \"bn.js\": 15\n    }],\n\n```\nHere’s a partial view of the file structure I’m working with:\n\n```\nDirectory: T:\\assets\n  Subdirectory: ad-viewer\n  Subdirectory: assets\n  Subdirectory: dexopt\n  Subdirectory: jsb-adapter\n  Subdirectory: src\n  File: audience_network.dex\n  File: cid\n  File: main.js\n  File: project.json\n  File: tt_mime_type.pro\n\nDirectory: T:\\assets\\assets\n  Subdirectory: internal\n  Subdirectory: localizeData\n  Subdirectory: main\n  Subdirectory: manifest\n  Subdirectory: resources\n  Subdirectory: Script\n\nDirectory: T:\\assets\\assets\\internal\n  Subdirectory: import\n  Subdirectory: native\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\internal\\import\n  Subdirectory: 09\n\nDirectory: T:\\assets\\assets\\internal\\import\\09\n  File: 0967b326a.json\n\nDirectory: T:\\assets\\assets\\internal  \native\n  Subdirectory: 02\n\nDirectory: T:\\assets\\assets\\internal  \native\\02\n  File: 0275e94c-56a7-410f-bd1a-fc7483f7d14a.png\n\nDirectory: T:\\assets\\assets\\localizeData\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\main\n  Subdirectory: import\n  Subdirectory: native\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\main\\import\n  Subdirectory: 05\n  Subdirectory: 06\n  Subdirectory: 08\n  Subdirectory: 12\n.....\nDirectory: T:\\assets\\assets\\manifest\n  Subdirectory: import\n  Subdirectory: native\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\manifest\\import\n  Subdirectory: 83\n\nDirectory: T:\\assets\\assets\\manifest\\import\\83\n  File: 83f57686-53e5-4bc7-bdf0-33bcd506f93b.json\n\nDirectory: T:\\assets\\assets\\manifest  \native\n  Subdirectory: 83\n\nDirectory: T:\\assets\\assets\\manifest  \native\\83\n  File: 83f57686-53e5-4bc7-bdf0-33bcd506f93b.manifest\n\nDirectory: T:\\assets\\assets\\resources\n  Subdirectory: import\n  Subdirectory: native\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\resources\\import\n  Subdirectory: 00\n  Subdirectory: 01\n  Subdirectory: 02\n....\nDirectory: T:\\assets\\assets\\Script\n  Subdirectory: import\n  File: config.json\n  File: index.js\n\nDirectory: T:\\assets\\assets\\Script\\import\n  Subdirectory: c8\n\nDirectory: T:\\assets\\assets\\Script\\import\\c8\n  File: c85c3dbd-5a7d-424c-8e07-965706736336.json\n\nDirectory: T:\\assets\\dexopt\n  File: baseline.prof\n  File: baseline.profm\n\nDirectory: T:\\assets\\jsb-adapter\n  File: jsb-builtin.js\n  File: jsb-engine.js\n\nDirectory: T:\\assets\\src\n  Subdirectory: assets\n  File: cocos2d-jsb.js\n  File: settings.js\n\nDirectory: T:\\assets\\src\\assets\n  Subdirectory: libs\n\nDirectory: T:\\assets\\src\\assets\\libs\n  File: thinkingdata.mg.cocoscreator.min.js\n\n```\n```\n[\n    1,\n    0,\n    0,\n    [\n        \"cc.Texture2D\"\n    ],\n    0,\n    [\n        \"0,9729,9729,33071,33071,0,0,0\",\n        -1\n    ],\n    [\n        0\n    ],\n    0,\n    [],\n    [],\n    []\n]\n\n```\nI search for that string (1e58fbfa7) in all files and find a matching JSON for each of the assets on that image, here is an example of one:\n(I do understand what these are - they are stating where the asset that relates to that file / UUID is on the pack)\n\n```\n[\n    1,\n    [\n        \"1e58fbfa7\"\n    ],\n    [\n        \"_textureSetter\"\n    ],\n    [\n        \"cc.SpriteFrame\"\n    ],\n    0,\n    [\n        {\n            \"name\": \"UI_Bt_world\",\n            \"rect\": [\n                342,\n                446,\n                127,\n                115\n            ],\n            \"offset\": [\n                0,\n                0.5\n            ],\n            \"originalSize\": [\n                129,\n                116\n            ],\n            \"capInsets\": [\n                0,\n                0,\n                0,\n                0\n            ]\n        }\n    ],\n    [\n        0\n    ],\n    0,\n    [\n        0\n    ],\n    [\n        0\n    ],\n    [\n        0\n    ]\n]\n\n```\nThat JSON is \\assets\\assets\\main\\import\\3a\\3aa50555-73a6-416d-b35a-cfab79466fa7.json\n\nIf I convert that to a UUID (3apQVVc6ZBbbNaz6t5Rm+n) I will find it in two locations, config.json (snippet provided above) and another location (\\assets\\assets\\main\\import\\9f\\9fde386a-2232-446d-9554-549e101dde19.json) which is somewhat similar to the config.json, but not quite... snippet:\n\n```\n[\n    1,\n    [\n        \"ecpdLyjvZBwrvm+cedCcQy\",\n...\n    [\n        \"node\",\n        \"_spriteFrame\",\n        \"_N$file\",\n...\n   [\n        [\n            \"cc.Node\",\n            [\n                \"_name\",\n...\n               \"_children\"\n            ],\n            -2,\n            4,\n...\n                ]\n            ],\n            [\n                0,\n                \"58H6b2PPdJip4dKNTXDv0T\",\n                1,\n                0\n            ],\n            [\n                4,\n                4278190080\n            ],\n            [\n                5,\n                1242,\n                2688\n            ]\n        ]\n    ],\n    0,\n    [\n        0,\n        12,\n...\n        96,\n        97,\n        1\n    ]\n]\n\n```\nI convert that file name into a UUID (9f3jhqIjJEbZVUVJ4QHd4Z) and find it in yet another file (\\assets\\assets\\main\\import\\d7\\d726ed83-41aa-4389-bd34-dd1e963ba515.json)...\n\n```\n[\n    1,\n    [\n        \"9f3jhqIjJEbZVUVJ4QHd4Z\"\n    ],\n    [\n        \"mainNode\",\n        \"node\",\n        \"scene\"\n    ],\n    [\n        [\n            \"cc.SceneAsset\",\n            [\n                \"_name\",\n                \"asyncLoadAssets\"\n            ],\n            1\n        ],\n        [\n            \"cc.Scene\",\n            [\n                \"_name\",\n...\n    [\n        0,\n        -1,\n        2,\n        0,\n        1,\n        2,\n        0,\n        2,\n        1,\n        2\n    ],\n    [\n        0\n    ],\n    [\n        0\n    ],\n    [\n        0\n    ]\n]\n\n```\nI went even deeper, converted that file name to a UUID (d7Ju2DQapDib003R6WO6UV) and looked and found it in one location.... the original config file. So now I'm back to the beginning!\n\n",
  "votes": "0",
  "answers": 1,
  "views": "80",
  "tags": [
    "android",
    "unpacking",
    "deobfuscation",
    "apk",
    "javascript"
  ],
  "user": "Lucy Taylor",
  "time": "Oct 4, 2024 at 2:12",
  "comments": [],
  "answers_data": [
    {
      "content": "It sounds like you’re making impressive progress with your reverse engineering efforts. You’re stuck at reconstructing the folder structure of the assets, and this can indeed be tricky. However, based on the patterns you’ve discovered, we can attempt to create a strategy to reverse the structure:\n\nStrategy for Determining the Folder Structure\n\nTools & Techniques to Help\n\nAdditional Steps to Consider\n\nWith these strategies, you should be able to progress further in reconstructing the original asset structure from the obfuscated files.\n\n",
      "votes": "0",
      "user": "Maximiliano López",
      "time": "Oct 8, 2024 at 2:15",
      "is_accepted": false,
      "comments": [
        {
          "user": "sudhackar",
          "text": "This reads like its written by chatgpt",
          "time": null
        }
      ]
    }
  ]
}