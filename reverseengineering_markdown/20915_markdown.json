{
  "title": "Startdard singleton class implementation generate access to TLS memory",
  "link": "https://reverseengineering.stackexchange.com/questions/20915/startdard-singleton-class-implementation-generate-access-to-tls-memory",
  "content": "I'v examine the assembly output in Windows of basic singleton implementation of using static variable to be initialized with new class instance from static function. \n\nto my surprise, although the class has process-wide scope, the inner implementation uses access to TLS.\n\n```\nmyClass::getInstance()\n{\n    static v = new myClass();\n    return v; \n}\n\n```\nand the assembly output (the first relevant lines) : \n\n```\npush    rdi\nsub     rsp, 40h\nmov     rdi, rsp\nmov     ecx, 10h\nmov     eax, 0CCCCCCCCh\nrep stosd\nmov     [rsp+48h+var_18], 0FFFFFFFFFFFFFFFEh\nmov     eax, 4\nmov     eax, eax\nmov     ecx, cs:_tls_index\nmov     rdx, gs:58h\nmov     rcx, [rdx+rcx*8]\n\n```\nPerhaps anybody can provide some insights about why this is needed (maybe performance) ? \n\nthanks \n\n",
  "votes": "1",
  "answers": 1,
  "views": "95",
  "tags": [
    "windows",
    "c++"
  ],
  "user": "Zohar81",
  "time": "Mar 19, 2019 at 8:33",
  "comments": [],
  "answers_data": [
    {
      "content": "It's generated by the thread-safe local static initialization feature.\n\nSee here for the original proposal.\n\n",
      "votes": "1",
      "user": "booto",
      "time": "Mar 19, 2019 at 10:39",
      "is_accepted": true,
      "comments": []
    }
  ]
}