{
  "title": "Techniques for reverse engineering an unknown or protected file format",
  "link": "https://reverseengineering.stackexchange.com/questions/9555/techniques-for-reverse-engineering-an-unknown-or-protected-file-format",
  "content": "I'm working on converting a game originally developed to run on Windows for the web. I have a bunch of artwork for the game received from the artist in .tga image files which open fine in Photoshop. However I don't have the complete set of artwork and it cannot be found. \n\nI also have a distribution of the Windows game which consists of .dlls, .lua files and a lot of .tga files. The .tga (Targa) files in the game distribution are named the same as the .tga files in the artwork I have received so I think it's safe to assume they are the same images. Even the images that I'm missing from the supplied artwork are present in the game distribution. Bingo! Well actually no…\n\nThe .tga files from the game won't open in Photoshop or Preview (mac) or Pixelmator (mac). So I think something has been done to the game .tga files to protect them and I want to reverse engineer them back to normal .tga files.\n\nFirst I need to discover what the new files are and how they've been modified. Here's what I've tried so far:\n\nUsing linux file command:\n\nInspecting using hex viewer and diff\n\nThe two files are exactly the same byte length. The last ~15% of bytes are identical in each file and the first ~85% are completely different.\n\nBinwalk didn't tell me anything for either file.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "3k",
  "tags": [
    "windows",
    "file-format",
    ".net",
    "encodings"
  ],
  "user": "Matt Harrison",
  "time": "Aug 4, 2015 at 22:24",
  "comments": [
    {
      "user": "Jongware",
      "text": "Working out a totally unknown file format is hard, but you got a huge advantage in that you also have unencrypted (possibly) versions of the files. Can you post one or more original/encrypted pairs of files on a public server? There are lots of approaches – in this case, since the file sizes are the same, I'd probably start with a few variations of binary differencing and see what it tells me.",
      "time": null
    },
    {
      "user": "Jongware",
      "text": ".. that said, those percentages are not telling anything useful. The final 26 bytes are a fixed footer (wikipedia) and so it would only be relevant if the entire file is 173 bytes long, which could indicate the image data is encrypted but the metadata is not.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you can, you should post links to 2-3 of your real targa images, and the corresponding game targa images (beware of license issues though). Sometimes, looking at the files rings a bell, and i could have checked much of what i'm going to say if it works for your files or not.\n\nThat said:\n\nIf all of this fails, you'll have to reverse engineer the game code, learn how the executable code loads the tga files, and implement the algorithm yourself.\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "Hackndo",
          "text": "That's a good answer. If I had to guess, I'd say that this encryption has somehow reversed the file. As you said, If this is a simple way of encryption, then the first few bytes (the header of the tga file) should be the same for all of the encrypted files. Since @Matt Harrison said that The two files are exactly the same byte length. The last ~15% of bytes are identical in each file and the first ~85% are completely different., I would assume that this 15% are the file header, and that the whole file has been reversed. But that's only a guess, nothing more...",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Seems we disagree about  \"The last ~15% of bytes are identical in each file\" - does this mean \"all encrypted files are equal\" or \"every encrypted file has the same bytes as the original file\". Which is why posting examples is a good idea, it clarifies these inconsistencies quickly.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Oh, and welcome to the site Hackndo, I've seen some good answers from you already.",
          "time": null
        },
        {
          "user": "Hackndo",
          "text": "I'd say that \"15%\" is not really accurate, and maybe it was a fixed number of bytes N. Assuming this is what it is, then maybe tga files have N common bytes at the beginning. But that's a lot of if. You're right, examples would be great. (And thank you for this welcome !)",
          "time": null
        },
        {
          "user": "Matt Harrison",
          "text": "Thanks so much for your information. I'll try all your suggestions out today and post back later. Unfortunately I don't think I'll be able to share the images, which is no fun!",
          "time": null
        }
      ]
    },
    {
      "content": "Don't be fooled by the .tga extention.  Some developers add an extention to their files to throw people like us off. \n\nYour files could easily be either, a different image type, an archive (zlib as an example) or an encrypted data.\n(In your case they just might be actual tga files.)\n\nOne method you could use to get the images that you are looking for is to go around the encryption. If theses files are indeed enceypted, then you could use its original engine to open the files as usual (boot the game). Then you could open the applications memory using a memory editor (such as CE). If you can locate the game data in memory, (at which point it would be decrypted) then you could ripp it out and rebuild it as the correct file type.  You may have to do research on the tga file structure first.\n\nMoreover,  you could try poking around in the dll files (look for plain text in the header),  and try to research their origin  or functions,  for all you know, those dlls could actually be compression or encryption libraries.\n\nLastly,  I recomend a debugger like ProcessExplorer, pay attention to the offsets when the .tgas are loaded. That way you can determine it's structure.\n\nYou might wanna explore ollydbg, that way you could see the steps the application goes through before decryption. \n\nHope this helps.\n\n",
      "votes": "1",
      "user": "user3288107",
      "time": "Aug 5, 2016 at 12:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}