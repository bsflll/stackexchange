{
  "title": "Newbie here: hidden values in assembly? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/17686/newbie-here-hidden-values-in-assembly",
  "content": "So i'm new to the whole reverse engineering thing with only experience in C#. So I wanted to try and change the framerate of applications (eg. this unity game) at an assembly level on iOS ( I have an 120hz iPad pro so I find it really important.) Therefore to learn how this was done I decrypted the binary of my very own app on the app store and then compared it with the C++ code that is created when unity exports to Xcode.\n\n\nNote the highlighted area and the value of 120 (the framerate). This is in C++.\n\nBut now in assembly note how the value is simply \"System.Int32\"\nSoo what happened to it? Maybe it's something to do with the /hidden argument/ in the C++ code? but for other apps I obviously won't have access to that. I'm still new to this and i've been trying to learn the basics of assembly. I'm just baffled as to what I should do and how the value can be changed? If someone could explain how to do so that would be great. If not a helpful pointer as to what I should learn and do next to solve this problem, maybe links to articles would be also helpful. Thanks in advance.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "356",
  "tags": [
    "arm",
    "ios",
    "binary"
  ],
  "user": "Arke12917",
  "time": "7 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "Unity is written in C# and in C#, there are things that are called properties. Behind the scene there are two methods (called getter, and setter) but in the source code it looks like there is no function calls. This is how TargetFrameRate looks like:\n\n```\npublic int TargetFrameRate { get; set;} // getter & setter omitted for brevity\n\n```\nWhat you see in your assembly is in fact calling the setter (thus set_targetFrameRate). And as those are not method, there can only be one value that is passed to them (or assigned as in C# code they look like normal assignment operation i.e. TargetFrameRate = 120). \n\nOf course Obj-C/Swift and C++ are different and does not support those so that have to be mitigated and for some reason they were coded like that (method & more than one value).\n\nSo there is no issue that you see only one argument that set_TargetFrameRate takes.\n\nWhat more you can do is to open Unity3d in .net decompiler like dnSpy and verify that this is in fact how TargetFrameRate looks like:\n\n\n\nSince it has an InternalCall & extern you would need to dig a bit deeper to get to the actual implementation.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Jul 31, 2018 at 4:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "Arke12917",
          "text": "ok thanks for the response but what do you mean by dig deeper? Is the code I'm looking for still in the app binary or elsewhere?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "it's in one of the unity dll's - but why do you need the code for that? Shouldn't you just set a value to whatever targetFrameRate you want?",
          "time": null
        },
        {
          "user": "Arke12917",
          "text": "ah it's ok I understood what you meant. Found the value, changed it, didn't do much. That was expected though, Thanks for your help.",
          "time": null
        }
      ]
    }
  ]
}