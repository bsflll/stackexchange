{
  "title": "Weird binwalk output on GoPro Firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/6569/weird-binwalk-output-on-gopro-firmware",
  "content": "I'm trying to extract GoPro hero 3+ camera firmware but I'm getting a weird output from binwalk.\n\nThis is the binwalk output (Uploaded to pastebin): \n\nhttp://pastebin.com/raw.php?i=yVZFGZT6\n\nAs you can see there are a lot of lines including mcrypt, RSA and other lines but the firmware is not encrypted. Also checking the hexadecimal of the file I can see the following:\n\n```\n000006f0  55 55 55 55 66 66 66 66  77 77 77 77 88 88 88 88  |UUUUffffwwww....|\n\n```\nAs far as I know this is related to UBoot. And this other two lines showing some squashfs headers:\n\n```\n0151d040  45 3d cd 28 88 4f 39 80  68 73 71 73 bc 4f 39 80  |E=.(.O9.hsqs.O9.|\n02557250  8a f3 0d 00 68 73 71 73  90 f3 0d 00 72 65 65 62  |....hsqs....reeb|\n\n```\nAlso, I can see some other lines related to CPIO but I can't figure out how to separate this file into extractable pieces.\n\nThe firmware image can be downloaded here: http://software.gopro.com/Firmware/HD2/HD2-firmware.bin\n\n",
  "votes": "3",
  "answers": 2,
  "views": "3k",
  "tags": [
    "firmware",
    "embedded",
    "hexadecimal"
  ],
  "user": "Nucklear",
  "time": "Nov 3, 2014 at 11:53",
  "comments": [],
  "answers_data": [
    {
      "content": "Strings suggests this is using the UbiFS file system:\n\n```\n$ strings HD2-firmware.bin | grep -i ubifs\nconsole=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\nLNX_VIF=\"../../../src/linuxinfo/ubifs.info\"\nCONFIG_BOSS_SECONDARY_CMDLINE=\"console=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\"\nconsole=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs\n\n```\nThere are only two places where I see the UbiFS super magic bytes (0x24051905, see http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/fs/ubifs/ubifs.h):\n\n```\n$ binwalk -m ubifs.sig HD2-firmware.bin \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n23734456      0x16A28B8       UbiFS, little endian\n23741868      0x16A45AC       UbiFS, little endian\n\n```\nFor reference, the contents of ubifs.sig are:\n\n```\n0   lelong  0x24051905      UbiFS, little endian\n0   belong  0x24051905      UbiFS, big endian\n\n```\nEDIT:\n\nThe above seems to be a false positive. After creating a UbiFS image of my own, here's what it looks like in hex:\n\n```\n00000000  31 18 10 06 dc 6a 3b 2d  4e 00 00 00 00 00 00 00  |1....j;-N.......|\n00000010  00 10 00 00 06 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000020  00 02 00 00 00 00 02 00  0d 00 00 00 64 00 00 00  |............d...|\n00000030  00 00 16 00 00 00 00 00  04 00 00 00 02 00 00 00  |................|\n00000040  01 00 00 00 01 00 00 00  08 00 00 00 00 01 00 00  |................|\n00000050  04 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000060  00 00 00 00 00 00 00 00  00 ca 9a 3b fb 7e 13 36  |...........;.~.6|\n00000070  91 29 47 3b 8b dd 46 95  27 cc 8a 30 00 00 00 00  |.)G;..F.'..0....|\n00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00001000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n*\n00020000  31 18 10 06 4a 3d 6b 5a  4f 00 00 00 00 00 00 00  |1...J=kZO.......|\n00020010  00 02 00 00 07 00 00 00  45 00 00 00 00 00 00 00  |........E.......|\n00020020  00 00 00 00 00 00 00 00  02 00 00 00 03 00 00 00  |................|\n00020030  0c 00 00 00 d8 05 00 00  bc 00 00 00 0b 00 00 00  |................|\n00020040  0c 00 00 00 00 08 00 00  98 06 00 00 00 00 00 00  |................|\n00020050  00 26 05 00 00 00 00 00  38 03 00 00 00 00 00 00  |.&......8.......|\n00020060  30 d0 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |0...............|\n00020070  00 24 00 00 00 00 00 00  07 00 00 00 2a 00 00 00  |.$..........*...|\n00020080  07 00 00 00 00 02 00 00  07 00 00 00 36 00 00 00  |............6...|\n00020090  00 00 00 00 00 00 00 00  0a 00 00 00 01 00 00 00  |................|\n000200a0  01 00 00 00 0d 00 00 00  00 00 00 00 00 00 00 00  |................|\n000200b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00020200  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n\n```\nNote the little endian magic number at the beginning of each node: 0x06101831. \n\nThis pattern appears in the GoPro firmware, and it looks like the UbiFS image may start at 0x22C6100; however, I was unable to mount either my UbiFS image (created with mkfs.ubifs) or the image from the GoPro firmware, so I cannot verify that this is true.\n\n",
      "votes": "2",
      "user": "devttys0",
      "time": "Nov 3, 2014 at 14:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nucklear",
          "text": "Awesome answer. I can identify 2 times \"31 18 10 06\" on the original gopro firmware but I don't see those references on 0x22C6100. Also after extracting the UbiFS images from the firmware I tried to mout it following this instructions elinux.org/UBIFS#Mounting_UBI_Image_on_PC_using_nandsim with no success.",
          "time": null
        }
      ]
    },
    {
      "content": "There will always be false positives with binwalk, especially for lzma and the likes. What you can do is use the -M option to try and binwalk multiple layers deep and also use -r option to remove files that didn't decompress well. \n\n",
      "votes": "2",
      "user": "0xea",
      "time": "Nov 3, 2014 at 11:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "Nucklear",
          "text": "I already tried it but it gives me unidentified files except two folders /root (empty) and /dev . I also found this script gist.github.com/nezza/2394361 that splits the firmware in multiple images that I'm not able to uncompress either. According to some strings GoPro Hero3+ uses this technology and it's processor is ARM ambarella.com/uploads/docs/A7LS-Brief-121713.pdf",
          "time": null
        }
      ]
    }
  ]
}