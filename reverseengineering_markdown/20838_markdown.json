{
  "title": "How the CMP instruction uses condition flags?",
  "link": "https://reverseengineering.stackexchange.com/questions/20838/how-the-cmp-instruction-uses-condition-flags",
  "content": "I am trying to figure out the behavior of conditional jumps (JE/JNE, JZ/JNZ) in the x86 instruction set familly. \n\nWhich condition flags CMP instruction sets and how, if the result is equal and if it is not? For example:\n\n",
  "votes": "7",
  "answers": 2,
  "views": "22k",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "PaHa",
  "time": "Mar 10, 2019 at 9:47",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "You could get that information from the first results from DuckDuckGo (or Google (or Bing)). Did you tried that?",
      "time": null
    },
    {
      "user": "PaHa",
      "text": "Yes I did. (Google). Found a lot, what jumps read, but not exactly what CMP sets.",
      "time": null
    },
    {
      "user": "Paweł Łukasik",
      "text": "CMP sets all the flags based on the intermediate results of SUB that it performs. read here: godevtool.com/GoasmHelp/usflags.htm",
      "time": null
    },
    {
      "user": "PaHa",
      "text": "(CMP EAX,EDX;set zero flag if eax=edx.) So only the zero flag and if true 1 and false 0. Tanks.",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "read cmp documentation first: The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in the same manner as the SUB instruction.. But that's not a good way to check whether a register is zero or not",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Furthermore, with the CMP instruction, the destination operand doesn't change. Just the flags. \n\nLet me illustrate. Let's say EAX = 00000005 and EBX = 00000005. If we do this arithmetic operation:\n\nCMP EAX, EBX\n\nWhat's happening, is in effect this:\n\nEAX - EBX ---->\n00000005 - 00000005\n\nSince the result would be 0, but we don't change the destination operand in a CMP instruction, the zero flag is set to 1 (since it's true).\n\nSo, as we saw, depending on the result of the previous arithmetic operation, flags can be set accordingly:\n\n\n\n",
      "votes": "10",
      "user": "she_roar",
      "time": "Mar 23, 2019 at 18:42",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jim Driscoll",
          "text": "Presumably, where values are signed and of opposite signs (because the CPU doesn't have a way to distinguish signed from unsigned) that use of the C flag isn't true  - so 0xff > 0x01 makes it also look like -1 > 1. I expect in that case you'd check the S flag which is true if the result would be negative.",
          "time": null
        }
      ]
    },
    {
      "content": "The CMP instruction does internally a SUB and sets the flags accordingly.\n\nSo all flags that are set by a SUB are also set by CMP.\n\nNamely the flags SF, ZF, AF, PF, and CF are set.\n\nThis information is taken from the Intel manual for the processors (https://software.intel.com/en-us/articles/intel-sdm).\n\n",
      "votes": "5",
      "user": "Uwe Plonus",
      "time": "Mar 10, 2019 at 9:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}