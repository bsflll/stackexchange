{
  "title": "Hash algorithm written in C decompiled with IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/8866/hash-algorithm-written-in-c-decompiled-with-ida",
  "content": "I have been working on rewriting a program, although it uses a hash to fingerprint the file, I have used IDA to find the function doing the hash and what it is doing to the file before it sends it to the hash function.\n\nI just have a couple questions about what is going on, I know I can simply invoke it as it is in a DLL, but I want to understand what is going on as well.\n\n```\nunsigned int __cdecl newhash(int a1, unsigned int a2, int zero)\n{\n  int content; // ebx@1\n  int v4; // ecx@1\n  int v5; // edx@1\n  int i; // eax@1\n  int v7; // ecx@2\n  unsigned int v8; // eax@2\n  int v9; // edx@2\n  int v10; // ecx@2\n  int v11; // eax@2\n  int v12; // edx@2\n  int v13; // ecx@2\n  int v14; // eax@2\n  unsigned int v15; // eax@3\n  int v16; // edx@15\n  int v17; // ecx@15\n  int v18; // eax@15\n  int v19; // edx@15\n  int v20; // ecx@15\n  int v21; // eax@15\n  int v22; // edx@15\n  unsigned int contentLength; // [sp+Ch] [bp-4h]@1\n\n  content = a1;\n  contentLength = a2;\n  v4 = -1640531527;\n  v5 = -1640531527;\n  for ( i = zero; contentLength >= 12; contentLength -= 12 )\n  {\n    v7 = (*(_BYTE *)(content + 7) << 24)\n       + (*(_BYTE *)(content + 6) << 16)\n       + (*(_BYTE *)(content + 5) << 8)\n       + *(_BYTE *)(content + 4)\n       + v4;\n    v8 = (*(_BYTE *)(content + 11) << 24)\n       + (*(_BYTE *)(content + 10) << 16)\n       + (*(_BYTE *)(content + 9) << 8)\n       + *(_BYTE *)(content + 8)\n       + i;\n    v9 = (v8 >> 13) ^ ((*(_BYTE *)(content + 3) << 24)\n                     + (*(_BYTE *)(content + 2) << 16)\n                     + (*(_BYTE *)(content + 1) << 8)\n                     + *(_BYTE *)content\n                     + v5\n                     - v7\n                     - v8);\n    v10 = (v9 << 8) ^ (v7 - v8 - v9);\n    v11 = ((unsigned int)v10 >> 13) ^ (v8 - v9 - v10);\n    v12 = ((unsigned int)v11 >> 12) ^ (v9 - v10 - v11);\n    v13 = (v12 << 16) ^ (v10 - v11 - v12);\n    v14 = ((unsigned int)v13 >> 5) ^ (v11 - v12 - v13);\n    v5 = ((unsigned int)v14 >> 3) ^ (v12 - v13 - v14);\n    v4 = (v5 << 10) ^ (v13 - v14 - v5);\n    i = ((unsigned int)v4 >> 15) ^ (v14 - v5 - v4);\n    content += 12;\n  }\n  v15 = a2 + i;\n  switch ( contentLength )\n  {\n    case 0xBu:\n      v15 += *(_BYTE *)(content + 10) << 24;\n      goto LABEL_5;\n    case 0xAu:\nLABEL_5:\n      v15 += *(_BYTE *)(content + 9) << 16;\n      goto LABEL_6;\n    case 9u:\nLABEL_6:\n      v15 += *(_BYTE *)(content + 8) << 8;\n      goto LABEL_7;\n    case 8u:\nLABEL_7:\n      v4 += *(_BYTE *)(content + 7) << 24;\n      goto LABEL_8;\n    case 7u:\nLABEL_8:\n      v4 += *(_BYTE *)(content + 6) << 16;\n      goto LABEL_9;\n    case 6u:\nLABEL_9:\n      v4 += *(_BYTE *)(content + 5) << 8;\n      goto LABEL_10;\n    case 5u:\nLABEL_10:\n      v4 += *(_BYTE *)(content + 4);\n      goto LABEL_11;\n    case 4u:\nLABEL_11:\n      v5 += *(_BYTE *)(content + 3) << 24;\n      goto LABEL_12;\n    case 3u:\nLABEL_12:\n      v5 += *(_BYTE *)(content + 2) << 16;\n      goto LABEL_13;\n    case 2u:\nLABEL_13:\n      v5 += *(_BYTE *)(content + 1) << 8;\n      goto LABEL_14;\n    case 1u:\nLABEL_14:\n      v5 += *(_BYTE *)content;\n      break;\n    default:\n      break;\n  }\n  v16 = (v15 >> 13) ^ (v5 - v4 - v15);\n  v17 = (v16 << 8) ^ (v4 - v15 - v16);\n  v18 = ((unsigned int)v17 >> 13) ^ (v15 - v16 - v17);\n  v19 = ((unsigned int)v18 >> 12) ^ (v16 - v17 - v18);\n  v20 = (v19 << 16) ^ (v17 - v18 - v19);\n  v21 = ((unsigned int)v20 >> 5) ^ (v18 - v19 - v20);\n  v22 = ((unsigned int)v21 >> 3) ^ (v19 - v20 - v21);\n\n  return (((v22 << 10) ^ \n           (unsigned int)(v20 - v21 - v22)) >> 15) ^ \n           (v21 - v22 - ((v22 << 10) ^ (v20 - v21 - v22)));\n}\n\n```\na1 is an address location\na2 is the length of the file to hash\nzero I renamed as it always sends zero for whatever reason.\n\nNow for the questions:\n\nThose are most of my questions, I understand it is going through all the bytes and getting a total to figure out the \"hash\" for the file, I understand that the switch case is taking care of the situation of the file not being exactly divisible by 12. I think once I understand the logic behind the bitwise operations then it will be more clear.\n\n",
  "votes": "5",
  "answers": 3,
  "views": "1k",
  "tags": [
    "ida",
    "c++",
    "decompiler",
    "hash-functions",
    "crc"
  ],
  "user": "Krum110487",
  "time": "May 11, 2015 at 7:22",
  "comments": [],
  "answers_data": [
    {
      "content": "-1640531527 is hexadecimal '0x9e3779b9'.\nThis number is used in boost hash function.\nThe code here in function ub4 hash( k, length, initval) looks similar to yours, at least in the last part.\nI think that it is a good point to start googling from.\n\nAs far as I can say it is probably intermediate variant(lookup2) of Jenkins Hash\n\n",
      "votes": "7",
      "user": "w s",
      "time": "May 11, 2015 at 6:56",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Some more low-level details:\n\nIn C, shifts implicitly promote the operand to at least an int/unsigned int, so the _BYTE value gets promoted to an unsigned int. This is probably because most processors support shifts on a single word size and not bytes. \n\nThere's another problem, where the result is assigned to an int instead of an unsigned int, which brings you to the next question...\n\nThe assembler for signed left shift and unsigned left shift are the same, as bits shifted outside the register just disappear. This means the decompiler can't tell if a left shift was unsigned, so it uses a safe guess of int.\n\nSigned right shift and unsigned right shift are different, because the sign bit has to be filled correctly. This allows the decompiler to guess unsigned correctly only for right shifts.\n\nIn general, a decompiler cannot detect if a variable is unsigned because so many operations are the same as on a signed variable.\n\n",
      "votes": "6",
      "user": "Sen",
      "time": "May 12, 2015 at 10:38",
      "is_accepted": false,
      "comments": [
        {
          "user": "Krum110487",
          "text": "I would love to up-vote you and give you the correct answer too!!! but I can't up-vote, so if anyone sees this, please up-vote for me :)",
          "time": null
        },
        {
          "user": "phuclv",
          "text": "no, it's always promoted to int regardless of signness, unless sizeof(_BYTE) >= sizeof(int)",
          "time": null
        }
      ]
    },
    {
      "content": "Just a small addition to the previous answers.\nThe following shift construct, asked in 3, is a widely used way to convert a byte stream into a 32-bit integer.\n   (*(_BYTE *)(content + 7) << 24)\n + (*(_BYTE *)(content + 6) << 16)\n + (*(_BYTE *)(content + 5) << 8)\n + *(_BYTE *)(content + 4)\n\n31    24    23    16    15     8    7      0\nAAAAAAAA    BBBBBBBB    CCCCCCCC    DDDDDDDD\n  ^^^         ^^^         ^^^         ^^^\ncontent[7]  content[6]  content[5]  content[4]\n\nIf content is the address of a byte array, you can simply write \n*(_BYTE *)(content+7)\n\nas\ncontent[7]\n\nBut of course, you should declare content in a different way as the decompiler did, but the decompiler see only a pointer and don't know that it is a byte array really.\n\n\n",
      "votes": "4",
      "user": "ebux",
      "time": "May 13, 2015 at 11:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "Krum110487",
          "text": "I figured it was getting the different bytes, I just didn't understand that the bitshift was on an int and not a 8 bit byte, and since the conversion from byte to int will always put it on the right, they shift it. So it seems they are being inverted in the int, Right? 7 is on the left instead of on the right?",
          "time": null
        },
        {
          "user": "ebux",
          "text": "The inverting is depend on the endianness of the current architecture. Since the example is seems to be x86, it is little-endian, so the result of the byte shifts will not invert the int finally. So, the int could be extracted in an easier way also ((int*)content)[1], but this is the platform independent way of doing this.",
          "time": null
        }
      ]
    }
  ]
}