{
  "title": "Adding automatically standard structs or enums",
  "link": "https://reverseengineering.stackexchange.com/questions/11057/adding-automatically-standard-structs-or-enums",
  "content": "Is there any kind of IDAPython/IDC function, i.e. a programmatic method, that allows you to simulate this?\n\nStructures -> Insert -> Add standard structure\n\n",
  "votes": "1",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "Shaddy",
  "time": "Apr 20, 2022 at 9:13",
  "comments": [],
  "answers_data": [
    {
      "content": "For enums you can use the AddEnum(idx, name, flag) function to create an enum inside an IDC script or Python script. This returns an enum_id which you can then use to create symbolic constant using AddConstEx(enum_id, name, value, bmask).\n\nAfter this you can then get the constant for the enum using the same enum_id GetConstEx(enum_id, value, serial, bmask). This will return a const_id which can be used to set a repeatable comment for that value in the enum using SetConstCmt(const_id, cmt, repeatable).\n\nA short example of using this all together can be seen in this script I use;\n\n```\ndef create_enum(enum_name, member_infos, offset, increment):\n   return_id = AddEnum(-1, enum_name, 0x1100000);\n\n    if return_id == BADADDR:\n        error('Unable to create enum : %s' % enum_name)\n        return return_id\n\n    for member_info in member_infos:\n        debug(\"Attempting to create enum member and comment : %s.%s -> %s\" % (enum_name, member_info[0], member_info[1]))\n\n        if AddConstEx(return_id, member_info[0], offset, -1) == 0:\n            const_id = GetConstEx(return_id, offset, 0, -1)\n\n            if const_id == -1:\n                debug('Unable to get constant id for : %s.%s' % (enum_name, member_info[0]))\n\n            else:\n                if SetConstCmt(const_id, member_info[1], 1):\n                    debug('Enum value created : %s.%s' % (enum_name, member_info[0]))\n\n                else:\n                    error('Enum value failed to have comment set : %s.%s' % (enum_name, member_info[0]))\n\n                offset += increment\n        else:\n            error('Unable to create enum member : %s.%s' % (enum_name, member_info[0]))\n            return -1\n\n    info('Finished creating enum : %s' % enum_name)\n    return return_id\n\n```\nThis would be used as follows;\n\n```\nenum_to_create = [\n    ('enum_1', 'enum1 comment'),\n    ('enum_2', 'enum2 comment'),\n    ('enum_3', 'enum3 comment'),\n    ('enum_4', 'enum4 comment'),\n    ('enum_5', 'enum5 comment')\n]\n\ncreate_enum('enum propername', enum_to_create, -0x8, 0x4)\n\n```\nAs for the structures, it would appear you would go a similar route though using the structure commands like AddStructEx(index, name, is_union) and SetStrucName(sid, name), etc.\n\n",
      "votes": "2",
      "user": "diff",
      "time": "Oct 9, 2015 at 22:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "Shaddy",
          "text": "Thanks for your post. The goal was to get a struct from a type library, meaning that we don't require to add the fields of a struct since we loaded it. Anyway, it would be useful for sure to anyone who wants to work with structs/enums :)!",
          "time": null
        },
        {
          "user": "diff",
          "text": "Fair enough. Didn't realize you had the library available - I almost never do :)",
          "time": null
        }
      ]
    },
    {
      "content": "The modern counterparts of the functions from the original answer below are called:\n\nI found the solution using Til2Idb\n\n```\nLoadTil(\"type_library_name\") #example: mssdk\nTil2Idb(-1, \"YOUR_STRUCT_NAME_HERE\") # example: IMAGE_OPTIONAL_HEADER\n\n```\nThe first parameter is used if you want it in a specific position of your structures list. \"-1\" means the end of the list.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Apr 20, 2022 at 14:41",
      "is_accepted": true,
      "comments": []
    }
  ]
}