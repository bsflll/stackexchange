{
  "title": "gdb setting fs register on Linux",
  "link": "https://reverseengineering.stackexchange.com/questions/4076/gdb-setting-fs-register-on-linux",
  "content": "I'm debugging an ELF 64-bit binary using gdb and I notice that the %fs register is set to 0x63. For some testing that I'd like to perform I'd like to set the %fs register to 0x00.\n\nI tried doing a set $fs=0x0 but the value wouldn't change. In some cases I got a:\n\n```\nCouldn't write registers: Input/output error.\n\n```\nIs there any way I could set the value for the %fs register? I'm also open to modifying the binary, adding inline assembly to the source, etc.\n\nEDIT : Currently, I'm trying this out by attaching to a process rather than running it from within gdb.\n\nA screenshot to illustrate the problem :\n\n\n",
  "votes": "3",
  "answers": 1,
  "views": "3k",
  "tags": [
    "linux",
    "gdb",
    "x86-64"
  ],
  "user": null,
  "time": "Apr 15, 2014 at 19:15",
  "comments": [],
  "answers_data": [
    {
      "content": "Low 2 bits have to be set or you will get an EIO error. Only the low 16 bits manage to get set anyways.\n\nSnippet from arch/x86_64/kernel/ptrace.c:\n\n```\ncase offsetof(struct user_regs_struct,fs):\n    if (value && (value & 3) != 3)\n        return -EIO;\n    child->thread.fsindex = value & 0xffff; \n    return 0;\n\n```\nThat said, setting to 0x00 shouldn't be problematic per the code and per my testing.\n\n```\n(gdb) set $fs=3\n(gdb) info register fs\nfs             0x3      3\n(gdb) set $fs=1\nCouldn't write registers: Input/output error.\n(gdb) set $fs=0\n(gdb) info register fs\nfs             0x0      0\n(gdb) set $fs=0xffffffff\n(gdb) info register fs\nfs             0xffff   65535\n\n```\n",
      "votes": "2",
      "user": "perror",
      "time": "Apr 15, 2014 at 19:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "user1743",
          "text": "would this behavior vary if a process were being traced?",
          "time": null
        }
      ]
    }
  ]
}