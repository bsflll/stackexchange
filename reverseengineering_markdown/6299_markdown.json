{
  "title": "Why does the PowerPC Compiler emit a clclr instruction before calling a function?",
  "link": "https://reverseengineering.stackexchange.com/questions/6299/why-does-the-powerpc-compiler-emit-a-clclr-instruction-before-calling-a-function",
  "content": "I disassemble my own written code in C to PowerPC assembly, and I can't understand why crclr occurrs before the call to the printf function.\n\nC code\n\n```\nint main()\n{\n     int a, b, c;\n     a = 10;\n     b = 2;\n     c = a * b;\n     printf(\"%d\", c);\n     return 0;\n}\n\n```\nPowerPC assembly code\n\n```\nstwu r1, -0x10(r1)\nmflr r0\nstw r0, 0x14(r1)\nlis r3, unk_38@h\naddi r3, r3, unk_38@l\nli r4, 0x14\ncrclr 4*cr1+eq\nbl printf\nli r3, 0\nlwz r0, 0x14(r1)\nmtlr r0\naddi r1, r1, 0x10\nblr\n\nunk_38:\n   .byte 0x25 # %\n   .byte 0x64 # d\n\n```\nCould anyone please tell me why? \n\nThanks in advance :)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "692",
  "tags": [
    "disassembly",
    "powerpc"
  ],
  "user": "Hossein Mobasher",
  "time": "Sep 24, 2014 at 9:14",
  "comments": [],
  "answers_data": [
    {
      "content": "This might be an artifact of compiler optimization. Note the li r4,0x14 instruction - the compiler optimizes your 2*10 calculation and loads the result, 20, into r4 directly. However, doing the calculation would modify some status bits, which the li doesn't, so the compiler tries to do the same modification using crclr, and the optimizer isn't smart enough to realize that this isn't really neccesary when it precedes a function call.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Sep 24, 2014 at 9:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}