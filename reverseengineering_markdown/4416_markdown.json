{
  "title": "Transforming an assembly line into C",
  "link": "https://reverseengineering.stackexchange.com/questions/4416/transforming-an-assembly-line-into-c",
  "content": "When I see the assembly line:\n\n```\n MOV ESI, DWORD PTR DS:[EBP+0x8]\n\n```\nAnd, when Ollydbg shows me that [EBP+0x8] = 00000000, then can I write it in C like this:\n\n```\n int *esi = NULL;\n\n```\nOr, should I use the stack address EBP + 0x8 which is 0x0012FF43 and write something like:\n\n```\n int *esi = &0012FF43\n\n```\nI would say that the first is the right answer, but I am very confused about that.\n\n",
  "votes": "4",
  "answers": 5,
  "views": "569",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "user3097712",
  "time": "May 31, 2014 at 11:09",
  "comments": [],
  "answers_data": [
    {
      "content": "Brackets mean 'contents of'... so it would be more like:\n\n```\nint esi = 0;\n\n```\n-or-\n\n```\nint esi = *(ebp+8); /* assuming ebp is correct */\n\n```\n-or-\n\n```\nint esi = (int)*(ebp+8); /* assuming ebp is (void*) or (char*)\n                            we need to pull 4 bytes to get value */\n\n```\nI would hope that (EBP+0x8) would not be 0x12FF43, as the stack pointer is supposed to be aligned to 4 or 8 byte addresses (4 for 32bit cpu's, 8 for 64bit, generally 16 byte aligned in 64bit though).\n\nOdd to see a DS: modifier for the EBP register, as it's usually SS:, only works well if DS=SS, or both are 0.  Nitpicky, but you have to be when playing that close to the metal.\n\n",
      "votes": "3",
      "user": "lornix",
      "time": "May 23, 2014 at 4:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "lornix",
          "text": "Yes, can use EBP with DS:, just odd to see it used in a non-stack setting.  It's so very often used to set up a stack frame in functions, sometimes forget it's a regular full register.",
          "time": null
        },
        {
          "user": "Peter Andersson",
          "text": "It's pretty common to not have a frame pointer and use EBP as a general purpose register. After all, ia32 is extremely register starved. Btw pointer arithmetic on void pointers is illegal so the (void *) case up there would not work and the (char *) case would simply read a char and cast to int so it would be incorrect. You need to cast to (int *) before reading the value but add to a (char *). It might also be interesting to note that if the second translation of the assembly to C was correct you'd be very likely to see a LEA instruction instead of a MOV.",
          "time": null
        }
      ]
    },
    {
      "content": "[EBX+8] is the second dword variable of this stack frame. If it's being put in esi it's probably a pointer operation so maybe memcpy(dest,src,0x100) would include that line if src was set to NULL after being declared \nchar *src = argument;.\n\nThat's the most realistic as you don't generally access esi directly from C.\n\nOf course in my example, memcpy would segfault when NULL was dereferenced.\n\n",
      "votes": "2",
      "user": "perror",
      "time": "May 31, 2014 at 11:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "offbyseveral",
          "text": "stackoverflow.com/questions/1856320/â€¦",
          "time": null
        }
      ]
    },
    {
      "content": "I think there is a misunderstand here. ESI is a register not a variable, so:\n\n```\nint *esi = NULL;\n\n```\nIf you want to assign value to esi in C, you should use the inline assembly brackets asm {}.\n\nAlso, usually in OllyDbg MOV ESI, DWORD PTR DS:[EBP+0x8] line appears at the beginning of functions like that:\n\n```\npush ebp\nmov ebp, esp\npush esi\nmov esi, [ebp +8]\n...\n\n```\nThat means esi will get the pointer of first argument of function. So, to write your line in C language, you should write a function with at least one parameter. The first parameters you pass to this functions will be value of esi.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Jun 3, 2014 at 14:56",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "MOV ESI, DWORD PTR DS:[EBP+0x8]\n\nLoad 4 bytes from EBP+0x8 into ESI.\n\nESI does not become a pointer unless [EBP+0x8] holds an address, so without knowing that, you cant really know if you should set ESI to NULL.\n\nIts helpful while reading assembly to translate each line into C but sometimes you need to understand what types are used in the rest of the code to convert it correctly.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Jun 3, 2014 at 14:57",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "let's say for example:\nEBP = 00100000\n\nthen:\nEBP+8 = 00100008\n\nthen the code become:\nMOV ESI, DWORD PTR DS:[00100008]\n\nthis means copy to the register ESI the dword that located in the address 00100008\n\nso you could write MOV ESI, DWORD PTR DS:[00100008] in c as:\n\nint esi = *0x00100008;\n\n",
      "votes": "0",
      "user": "dieSdiesneB",
      "time": "Aug 22, 2016 at 16:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}