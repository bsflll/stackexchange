{
  "title": "How to step into kernel code from a user-mode code using IDA Pro and WinDbg as a debugger?",
  "link": "https://reverseengineering.stackexchange.com/questions/16796/how-to-step-into-kernel-code-from-a-user-mode-code-using-ida-pro-and-windbg-as-a",
  "content": "I'm using IDA Pro and WinDbg as a debugger to step through a WinAPI from a user-mode code. I can do all this, except that when the assembly code encounters the syscall instruction (that enters ring-0 code) I cannot step into it:\n\n\n\nCan someone show if it's possible to step into a kernel code?\n\nPS. I'm running IDA Pro in a VM from my host Windows system.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "windows",
    "windbg",
    "kernel-mode"
  ],
  "user": "c00000fd",
  "time": "Nov 20, 2017 at 18:22",
  "comments": [
    {
      "user": "blabb",
      "text": "you cannot step into kernel mode from usermode seamlessly if you have a pair (physc/vm , vm/vm , physc/physc ) set a breakpoint on the Actual System Call in kernel mode and step in to break  the one in ntdll is just a stub that transfers the execution to kmode",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "a kernel debugger may work I think @blabb",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "stackoverflow.com/questions/42776503/… has some ideas and actually mentions IDA, and an answer from blabb :)",
      "time": null
    },
    {
      "user": "blabb",
      "text": "@igor yes a kernel debugger connection needs a pair iiur op expects  to do  it in a single machine",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "oh indeed, it won’t work on the same box.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In order to step into syscall you must debug your machine from kernel mode debugger. https://www.hex-rays.com/products/ida/support/tutorials/debugging_windbg.pdf see Debugging the kernel with VMWare section. \nBut be aware, that in kernel mode debugger you won't be able to debug your single process as it was in user mode. Kernel mode debugging is about debugging all the processes in the system. So you'll have to attach to the target process before you can do anything, and you'll need to learn how to set breakpoints, which will trigger only in your target process.\n\n",
      "votes": "3",
      "user": "Anton Kukoba",
      "time": "Nov 23, 2017 at 9:05",
      "is_accepted": true,
      "comments": []
    }
  ]
}