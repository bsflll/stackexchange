{
  "title": "Setting Breakpoints on Thumb Instructions in GDB",
  "link": "https://reverseengineering.stackexchange.com/questions/25806/setting-breakpoints-on-thumb-instructions-in-gdb",
  "content": "I'm practicing reversing a stripped arm binary, and found that when I set a breakpoint at say 0x010451, and run the program, gdb spins forever until I hit ctrl+c.  When I do, the current pc is at the address, but I can't continue the program.\n\nWhen I set the breakpoint to 0x010450, gdb hits the breakpoint fine, but the instructions are being decoded as non-thumb instructions.\n\nIs this expected?  A bug?  I will try to upload examples later today.\n\nVersion info (under qemu usermode emulation):\n\n```\ndebian@debian-arm:~/lab$ gdb --version\nGNU gdb (Debian 8.2.1-2+b3) 8.2.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\ndebian@debian-arm:~/lab$ uname -a\nLinux debian-arm 4.19.0-10-armmp-lpae #1 SMP Debian 4.19.132-1 (2020-07-24) armv7l GNU/Linux\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "607",
  "tags": [
    "arm",
    "gdb",
    "thumb2"
  ],
  "user": "Caustic",
  "time": "Sep 3, 2020 at 14:22",
  "comments": [
    {
      "user": "Caustic",
      "text": "Strangely, setting set arm fallback-mode thumb worked when set arm fallback-mode auto didn't.  It now stops on the proper thumb instruction when setting the breakpoint to the odd address instead of spinning until I hit ctrl+c",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's critical to first understand that there is actually no such valid address for an instruction.\n\nOn an ARM processor, instructions are always aligned to their width - 16 bit thumb instructions are aligned to 16 bits, 32 bit ARM instructions are aligned to 32 bits, etc.\n\nRather, such values that are not actually addresses sneak into code disassemblies you may be reading because when a branch is performed, the LSB of the target operand indicates the mode in which the processor should start executing the instruction at the target address - but the target address always has its LSB masked to zero by the hardware!\n\nSo trying to set a breakpoint at 0x010451 is formally invalid.\n\nSome tools may as a convenience interpret that to mean \"set a thumb-mode breakpoint at 0x010450\" - but that's playing a bit fast and loose with the rules.\n\nWhat is actually correct is to specify the aligned address of the instruction, and the processor operating mode of the breakpoint to be set; eg, if the breakpoint is implemented by actually replacing an instruction in RAM (rather than using a hardware breakpoint) then the replacement instruction will have to be of the ARM type or the Thumb type.\n\n",
      "votes": "1",
      "user": "Chris Stratton",
      "time": "Sep 10, 2020 at 20:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}