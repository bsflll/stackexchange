{
  "title": "How to make a program to read Unicode control characters",
  "link": "https://reverseengineering.stackexchange.com/questions/22279/how-to-make-a-program-to-read-unicode-control-characters",
  "content": "I'm learning on how to cause a buffer overflow. My victim program has to read input from a file encoded with UTF-16, 2-bytes by 2-bytes, and I want to overrun the EBP with an address like 0x0012F468.\nThe 0xF468 part is read successfully but the program just ignores the 0x0012.\n\nAs I researched, I found out that not only 0x0012 but also the characters from 0x0000 to 0x001F, which are \"control characters\" are ignored as well.\n\nMy question is: How can I inject those characters as a input from a text file to my victim program?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "73",
  "tags": [
    "x86",
    "buffer-overflow"
  ],
  "user": "Thành Vũ",
  "time": "Oct 11, 2019 at 10:16",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. You are aware that UTF-16 includes code points that are bigger than 2 bytes, right? It would also be interesting what OS this is and by which means your target program reads the input. Perhaps it's already prepared to take input from stdin by passing - as file name (a convention of many programs on unixoid platforms). In general you are not giving enough information to help you with a meaningful answer beyond guessing.",
      "time": null
    },
    {
      "user": "Thành Vũ",
      "text": "I am testing on Windows XP SP3. My victim program reads input from a HTML file encoded using UTF-16 BE standard.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Unfortunately I'm still new around here and don't have enough reputation yet to comment so this will need to be an answer, hopefully it qualifies.\n\nHow are you reading and writing the file? Did you confirm that the file has the control characters embedded properly in a hex editor? You said earlier that your victim reads input from an HTML file, I assume by that you mean it actually reads the HTML file itself? Without knowing exactly how you're reading / writing it I can't be sure, but my guess would be that you're using a stream that filters out control characters appropriately. Something like the code below should work fine for your purposes.\n\n```\nvoid WriteTarget(const char* FilePath, uintptr_t TargetAddr)\n{\n    std::ofstream ofs(FilePath, std::ios::trunc | std::ios::binary);\n    ofs.write(reinterpret_cast<const char*>(&TargetAddr), sizeof(uintptr_t));\n    ofs.close();\n}\n\nvoid ReadTarget(const char* FilePath)\n{\n    std::ifstream ifs(FilePath, std::ios::in | std::ios::binary);\n\n    ifs.seekg(0, std::ios::end);\n    auto file_len = ifs.tellg();\n    ifs.seekg(0, std::ios::beg);\n\n    uint8_t* file_data = new uint8_t[file_len];\n    memset(file_data, 0, file_len);\n\n    ifs.read(reinterpret_cast<char*>(file_data), file_len);\n    ifs.close();\n\n    std::cout << \"File Contents\" << std::endl;\n\n    for (auto i = 0; i < file_len; ++i)\n        std::cout << \"0x\" << std::hex << std::uppercase << static_cast<uint32_t>(file_data[i]) << std::endl;\n\n    delete[] file_data;\n}\n\n```\n",
      "votes": "0",
      "user": "Pickle Rick",
      "time": "Oct 13, 2019 at 0:25",
      "is_accepted": true,
      "comments": []
    }
  ]
}