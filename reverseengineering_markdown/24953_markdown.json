{
  "title": "Weird function names in disassembly (crackmes)",
  "link": "https://reverseengineering.stackexchange.com/questions/24953/weird-function-names-in-disassembly-crackmes",
  "content": "I'm doing a really easy crackmes exercise (https://crackmes.one/crackme/5e4ec05c33c5d4439bb2dbea) and I can't figure out what the binary is doing because functions have extremely weird names. \n\nHere's a small fragment of the main function disassembly code.\n\n```\n...\n0x000000000040102b <+25>:   cmpl   $0x1,-0x84(%rbp)\n   0x0000000000401032 <+32>:    jle    0x40107b <main+105>\n   0x0000000000401034 <+34>:    mov    $0x401750,%esi\n   0x0000000000401039 <+39>:    mov    $0x602200,%edi\n   0x000000000040103e <+44>:    callq  0x400e30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n   0x0000000000401043 <+49>:    mov    $0x400ec0,%esi\n   0x0000000000401048 <+54>:    mov    %rax,%rdi\n   0x000000000040104b <+57>:    callq  0x400ea0 <_ZNSolsEPFRSoS_E@plt>\n   0x0000000000401050 <+62>:    mov    $0x401780,%esi\n   0x0000000000401055 <+67>:    mov    $0x602200,%edi\n   0x000000000040105a <+72>:    callq  0x400e30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n...\n\n```\nHow should I approach this code?\n\n",
  "votes": "-1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "crackme"
  ],
  "user": "sbluff",
  "time": "May 9, 2020 at 16:42",
  "comments": [],
  "answers_data": [
    {
      "content": "Those are C++ mangled names. Some tools like Ghidra will automatically demangle them for you. If you want to see what the function should be named try:\n\n```\nc++filt _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n\n```\nin your shell to see the demangled name.\n\n",
      "votes": "5",
      "user": "multithr3at3d",
      "time": "May 9, 2020 at 18:08",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Though objdump is a good utility I would recommend using some better utilities to disassemble, like radare2, ghidra or idafree70. \n\nBut if you would prefer objdump, pass it the -C command to demangle those names.\n\n```\nE:\\5e4ec05c33c5d4439bb2dbea>f:\\msys64\\usr\\bin\\objdump.exe --start-address=0x401012 --stop-address=0x401043 -M intel -d -C Sh4ll10.1.bin\n\nSh4ll10.1.bin:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000401012 <main>:\n  401012:       55                      push   rbp\n  401013:       48 89 e5                mov    rbp,rsp\n  401016:       53                      push   rbx\n  401017:       48 81 ec 88 00 00 00    sub    rsp,0x88\n  40101e:       89 bd 7c ff ff ff       mov    DWORD PTR [rbp-0x84],edi\n  401024:       48 89 b5 70 ff ff ff    mov    QWORD PTR [rbp-0x90],rsi\n  40102b:       83 bd 7c ff ff ff 01    cmp    DWORD PTR [rbp-0x84],0x1\n  401032:       7e 47                   jle    40107b <main+0x69>\n  401034:       be 50 17 40 00          mov    esi,0x401750 \n  401039:       bf 00 22 60 00          mov    edi,0x602200\n  40103e:       e8 ed fd ff ff          call   400e30 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>\n\n```\n",
      "votes": "1",
      "user": "auspicious99",
      "time": "May 9, 2020 at 19:43",
      "is_accepted": false,
      "comments": []
    }
  ]
}