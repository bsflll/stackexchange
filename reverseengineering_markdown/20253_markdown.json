{
  "title": "How to determine number and/or boundaries of linked object files in a PE generated by Visual Studio 6?",
  "link": "https://reverseengineering.stackexchange.com/questions/20253/how-to-determine-number-and-or-boundaries-of-linked-object-files-in-a-pe-generat",
  "content": "In this analysis of a Portable Executable linked using Microsoft Linker (6.0), down in the Imported Objects section, the website makes some very specific claims:\n\n```\n3 .OBJ Files (COFF) linked with LINK.EXE 5.12 (Visual Studio 5 SP2) (build: 9049)\n4 .OBJ Files (COFF) linked with LINK.EXE 6.00 (Visual Studio 6) (build: 8168)\n178 .C Files compiled with CL.EXE 12.00 (Visual Studio 6) (build: 8168)\n26 .CPP Files compiled with CL.EXE 12.00 (Visual Studio 6) (build: 8168)\n41 .ASM Files assembled with MASM 6.13 (Visual Studio 6 SP1) (build: 7299)\n12 .OBJ Files linked with ALIASOBJ.EXE 6.00 (Internal OLDNAMES.LIB Tool) (build: 7291)\n\n```\nAs far as I know, all debug information is stripped from the executable, and there certainly aren't 178 embedded ascii strings ending in \".C\".\n\nThe sections in the PE are the usual .text, .rdata, .data, .rsrc.\n\nWhat type of additional information or metadata in the EXE could be used to make guesses about the original object files?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "140",
  "tags": [
    "binary-analysis",
    "pe"
  ],
  "user": "minexew",
  "time": "Jan 1, 2019 at 20:21",
  "comments": [],
  "answers_data": [
    {
      "content": "My guess is that the website is parsing the Rich Signature (see https://www.ntcore.com/files/richsign.htm for analysis and details).  There is a shorter description here.  Basically, Microsoft's linkers add some info that can be used to infer that information.\n\n",
      "votes": "2",
      "user": "knowmalware",
      "time": "Jan 2, 2019 at 3:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "minexew",
          "text": "Fascinating! This also answers the question of whether boundaries or ordering of the linked objects can be inferred: they can not.",
          "time": null
        },
        {
          "user": "knowmalware",
          "text": "Do you have IDA Pro?  I recently found an object boundary detection project from JHU APL called CodeCut.  It is an IDA Python script. I have not tried it myself, so not sure how well it works, otherwise I would have added it to my answer.",
          "time": null
        }
      ]
    }
  ]
}