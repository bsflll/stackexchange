{
  "title": "What to do when IDA cannot provide a function name?",
  "link": "https://reverseengineering.stackexchange.com/questions/2149/how-to-add-xrefs-to-indirect-call-targets-in-ida",
  "content": "For learning (and fun) I have been analyzing a text editor application using IDA Pro. While looking at the disassembly, I notice many function calls are made by explicitly calling the name of the function. For example, I notice IDA translates most function calls into the following two formats.\n\n```\ncall cs:CoCreateInstance\n\n```\nOr\n\n```\ncall WinSqmAddToStream\n\n```\nBut sometimes the format does not use a function name. The following example includes the code leading up to the line in question. The third line of code seem to be \"missing\" the function name. (The comments are my own.)\n\n```\nmov rcx, [rsp+128h+var_D8]    // reg CX gets the address at stack pointer+128h+var_D8 bytes \nmov r8, [rcx]                 // the address at reg CX is stored to reg r8\ncall qword ptr [r8 + 18h]     // at address rax+18h, call function defined by qword bytes \n\n```\nMy questions are as follows:\n\n",
  "votes": "11",
  "answers": 2,
  "views": "5k",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "shebaw",
  "time": "May 28, 2013 at 16:16",
  "comments": [
    {
      "user": "Trass3r",
      "text": "These indirect calls are used to implement virtual functions (by using a vtable) in C++ for example.",
      "time": null
    },
    {
      "user": "Trass3r",
      "text": "Also there are plugins like github.com/0xgalz/Virtuailor to automate these tasks.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To connect an indirect call to its target (if you know it) you can do the following:\n\nAs for why the explicit call is not present in the binary there can be many explanations. The snippet you're showing looks like a virtual function call, and they are usually done only in this manner to account for possibility of the method being overridden in a derived class.\n\n",
      "votes": "12",
      "user": "MarianD",
      "time": "Jun 17, 2021 at 15:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "clark",
          "text": "Thanks for the answer. This will be very helpful once I know the target function. I still don't know how to determine the function that is being called. I'm going to edit the question to indicate that I'm more interested in that part of it.",
          "time": null
        },
        {
          "user": "Martin",
          "text": "@clark Try putting a breakpoint on the instruction, running, and then stepping into / manually calculating the offset from the available registers? Or it has to be statically?",
          "time": null
        }
      ]
    },
    {
      "content": "The trick is to find the object's constructor. Let's suppose the code looks like this:\n\n```\na = new CFoo();\na->bar();\n\n```\nThe compiler (I assume MSVC, 32bits) might produce something like this:\n\n```\npush 12h ; size_t\ncall ??2@YXYXY@Z  ; operator new(uint)\nmov [ebp+var_8], eax\nmov esi, eax\ntest esi, esi\njz loc_1\n  mov ecx, esi\n  call ??0CFoo@@AAAA@AA ; CFoo::CFoo(void)\n  mov [ebp+var_8], eax\n  jmp loc_2\nloc_1:\n  mov [ebp+var_8], 0\nloc_2:\n...\n...\n...\nmov eax, [ebp+var_8]\nmov ecx, [eax]\nmov ebx, ecx\nmov ecx, [ebp+var_8]\ncall dword ptr [ebx+08h]\n\n```\nLooking at ??0CFoo@@AAAA@AA, a.k.a. CFoo::CFoo():\n\n```\n...\nmov esi, ecx\nmov dword ptr [esi], unk_12345\n...\n\n```\nunk_12345 is CFoo's virtual table offset:\n\n```\nunk_12345:\n  dd offset sub_23456\n  dd offset sub_34567\n  dd offset sub_45678\n  ...\n\n```\nAnd that sub_45678 at unk_12345+08h (which would be 3rd entry, in this case) is what gets called, i.e. CFoo::bar().\n\n",
      "votes": "3",
      "user": "perror",
      "time": "Feb 20, 2015 at 7:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}