{
  "title": "Reverse Engineering (very) old DOS calculation program",
  "link": "https://reverseengineering.stackexchange.com/questions/21529/reverse-engineering-very-old-dos-calculation-program",
  "content": "I have recently joined a company that is specialized in air ducts & ventilation systems and I was quite surprised when I noticed that they are still using a DOS program to calculate the pressure loss of a specific duct system. You see, when air travels through the ductwork it encounters a lot of resistance (bends, ...) and this program calculates the amount of resistance once you enter all the different components of the system.\n\nThe program still works today but has to be run on a virtual server running Windows XP, plus the layout is quite ... outdated. I am wondering whether it is possible to reverse engineer this program and put in into a \"modern\" jacket, + enable easy data instruction. \n\nFor instance, today you have to manually enter each component from the system, but it would be a lot easier/faster to run the program on a list of components (extracted from our drawing software). (this is an extra)\n\nI am not a programmer but I saw this thread, which is a quite similar problem and which eventually found a solution. \n\nThe program dates back from 1990 and if I open the files in Notepad I can see that it is written in TURBO BASIC. I have .DAT and .EXE files, and also .KAN files (I think those last files are specifically created by the program, which is called LUWKAN). Development of this program has stopped years ago, and even the company does not have the software anymore.\n\nAny help or direction would be much appreciated? I would assume that the source code can be easily examined and copied but I might be too naive. \n\n",
  "votes": "6",
  "answers": 3,
  "views": "3k",
  "tags": [
    "dos"
  ],
  "user": "user28805",
  "time": "Jun 23, 2019 at 11:43",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "What tools are you already acquainted with? There are modifications of DOSBox (not to mention you could modify it yourself) to debug a DOS program. Additionally there used to be a rather good IDA plugin interfacing with a (debug-enabled) DOSBox. Generally any circumstantial information can be valuable in RCEing a target. Also, in DOS times people used a lot more tricks to deal with limitations of resources. So probably worthwhile grabbing a book like \"Programming Pearls\" and read up on those tricks.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes, it is possible, but not for a non programmer. To do so, one should examine how the calculations are performed and exact formulas used. Then, after obtaining such a knowledge, one could write an application working for modern processors incorporating the techniques used in the original program.\n\nIt should be easy to examine, especially if the application isn't very complex (which I assume is true since it's an old DOS application). However there are several nuances here:\n\nBut it wouldn't be a big problem to analyse and rewrite it (+ add some other features), I think, especially if the computations performed there aren't too complex. I cannot say much more, because you didn't upload the executable.\n\nWhat I can say however, is that a non programmer just will not do that; you would need some assistance, since it requires both programming and RE knowledge, but it seems being doable.\n\nThe tools I could recommend and that I used for reversing DOS programs are:\n\nBut as I stated above, to take advantage of them, you will need some assistance.\n\n",
      "votes": "5",
      "user": "bart1e",
      "time": "Jun 22, 2019 at 17:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "i've done several small to large reverse engineering projects before - so i known what im talking about :)\n\n!!! 9 questions/statments given => 9 answers/feedbacks required !!!\n\n",
      "votes": "2",
      "user": "llm",
      "time": "Jul 3, 2019 at 7:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Hi and welcome to RE.SE. While these questions are legit, it's not really appropriate to post them as answer. However, seeing that you have no reputation as of yet, I can see the conundrum you find yourself in. It would be good for the original inquirer to incorporate these questions in the OP and answer them inline.",
          "time": null
        },
        {
          "user": "llm",
          "text": "thanks for the info will do better next time, ... no response from him since question, maybe he don't get the updates as a non-registered-user :(",
          "time": null
        }
      ]
    },
    {
      "content": "It sounds like it's still possible to communicate with the company. Excellent: ask them what their opinions are with\n\nEssentially you're kind of asking to slightly rearrange your original license agreement :). I look at this a bit like a warranty: your software has completely exceeded all original definitions of maintenance, along with what might be contemporarily regarded as reasonable aftermarket maintenance. The vendor's perspective may differ here.\n\nIn the interests of cooperation you might offer to send the vendor any algorithms you recover from any reverse engineering efforts you make. (What is sent may or may not include any modernization/interfaces you add on top, since that is unique effort you are making independently.) Of course such an offer would only be of value to the vendor if they do not offer a modern supercessor to LUKWAN themselves.\n\nIn any case, once you have some clear answers, you'll have a concrete legal foundation to built on instead of the current sea of gray you're in right now.\n\nIf you can publicly dump the binary on the internet, that will simplify matters greatly; go find a few reverse engineering forums, share the program, and you'll likely receive extremely accurate quotes (and ETAs) in a matter of days. You may end up hiring a team of two or so.\n\nIf you can share the program privately without NDA, you can reach a 90%+-as-good situation, especially if you can share images/videos of the program in action. The quote process will just require interested parties to ping you first, and will go somewhat slower as the initial analysis won't be asynchronous.\n\nI'm not sure what sort of rates you'd be looking at, as I have no experience in this field myself. Video and descriptions will likely get a good rough initial estimate.\n\nI took a look at https://en.wikipedia.org/wiki/PowerBASIC, which is what Turbo BASIC got turned into.\n\nUnfortunately for you, one of this particular environment's headline features (back when it was still Turbo BASIC) was that it built native binaries that did not require a bundled runtime.\n\nThis generally means you will have to go down the \"hard mode\" road of full assembly-language reverse engineering... but on the flip side of the coin, while there are eg a huge number of tools out there to eg reverse \"compiled\" Java or obfuscated JavaScript, by now (2019), any tools to reverse eg the QuickBASIC \"compiled program\" format (which used bytecode and a runtime interpreter) would probably have either fallen off the edge of the earth or be hiding behind a massive price tag. So that's kind of a nice thing, FWIW.\n\nClearly noting the program is written in Turbo BASIC when you look for RE assistance will be particularly useful. There are probably people out there very experienced with the peculiarities of the TB compiler.\n\nYes. I can think of two different approaches. Both are complex, and it's hard to say which will work out easier without a good stare at the exact circumstances.\n\nWhat format is this list of components generated in?\n\nThis may be anything from trivial to mildly complex. The cost to add this capability will be significantly less than the initial RE effort.\n\nI am very interested to hear how this project goes! If you take this question to other forums it would be very cool if you could put links out to the relevant threads. :)\n\n",
      "votes": "1",
      "user": "i336_",
      "time": "Jul 1, 2019 at 14:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}