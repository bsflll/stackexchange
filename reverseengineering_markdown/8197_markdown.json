{
  "title": "Adding Types to GDB via Python",
  "link": "https://reverseengineering.stackexchange.com/questions/8197/adding-types-to-gdb-via-python",
  "content": "GDB has a reasonably robust API which is exposed to Python at runtime.  It allows for inspecting various types, but does not appear to allow creation of types.\n\nHowever, types can be manually added by loading an object file at runtime (https://stackoverflow.com/q/7272558).\n\nIs there any way to add or create a new gdb.Type object at runtime?\n\nThe intent is to then allow inspection of memory via gdb.Value.cast to the type.pointer() and then .dereference()d.  This would be much better/easier than manually deserializing data field-by-field.\n\nAlternatively, I thought that I could just load an object file programmatically.  It looks like GDB is perfectly happy to load cross-architecture object files for symbol/type purposes.  In order to not kill any real/useful symbols, or create misleading ones, a non-existent address should be used.  However, loading a .o at an unmapped address requires the user to verify (type y), so when done from gdb.execute(...) it fails outright.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "628",
  "tags": [
    "gdb",
    "python"
  ],
  "user": "Zach Riggle",
  "time": "May 23, 2017 at 12:37",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "You could probably use libdwarf to create an object file that has no symbols, just type information, in it. Then, loading that object file to an existing address probably won't kill any symbols, since it has no mappable sections inside.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "So it turns out you can do this in the following way, from within GDB Python.  The trick is from_tty=False.\n\n```\nfoo = open('foo.cc','w+')\nfoo.write('struct foobar { int x; }; foobar foo;')\nfoo.close()\n\nsubprocess.check_output('g++ -w -c -g foo.cc -o foo.o', shell=True)\n\ngdb.execute('add-symbol-file foo.o 0', from_tty=False, to_string=True)\n\n```\nYou should now be able to view the type in gdb:\n\n```\ngdb $ ptype foobar\ntype = struct foobar {\n    int x;\n}\n\n```\n",
      "votes": "1",
      "user": "Zach Riggle",
      "time": "Apr 9, 2015 at 19:32",
      "is_accepted": true,
      "comments": []
    }
  ]
}