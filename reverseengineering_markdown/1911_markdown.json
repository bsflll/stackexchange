{
  "title": "What's 'fs:[0]' doing and how can I execute it step by step?",
  "link": "https://reverseengineering.stackexchange.com/questions/1911/whats-fs0-doing-and-how-can-i-execute-it-step-by-step",
  "content": "In a 32 bits Windows binary, I see this code:\n\n```\n    push next\n    push fs:[0]\n    mov fs:[0], esp\n    int3\n    ...\nnext:\n\n```\nI see that something happens on the int3 (an error), but I don't understand why, and how to follow execution while keeping control.\n\n",
  "votes": "24",
  "answers": 1,
  "views": "13k",
  "tags": [
    "windows",
    "x86",
    "seh"
  ],
  "user": "Ange",
  "time": "Apr 23, 2013 at 12:31",
  "comments": [
    {
      "user": "Ange",
      "text": "SEH PoCs",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "this trick is (ab)using Structured Exception Handling, a mechanism to define exception handlers, typically by compilers when try/catch blocks are used.\n\nIn 32bits versions of Windows, they can be set on the fly, without any pre-requirement (unless the binary is compiled with /SafeSEH).\n\nThe first element of the exception handlers' chain is pointed by the first member of the Thread Information Block (TIB), in turn a member of the Thread Environment Block (TEB), which is pointed to by fs:0 (which is also reachable 'directly' - via something like ds:7efdd00, depending on the OS version etc)\n\nSo here is what happens:\n\n\n\nThis is done here under OllyDbg 1.10. YMMV.\n\nAs we want to go through exceptions ourselves, we have to ask OllyDbg not to handle them:\n\nAnd when an exception is triggered, we have to enforce that execution is done via exceptions (see below).\n\nHere are 3 methods of increasing level to follow the exception handling execution safely:\n\nAs the handler has just been set on the stack, you can manually set a breakpoint then run.\n\nKiUserExceptionDispatcher is the Windows API handling all user-mode exceptions. Setting a breakpoint there guarantees that you keep full control - but then, you're in the middle of a Windows API ;) \n\nIn this case, you can ask OllyDbg to skip exceptions, as you will still break execution manually in any cases. You might also want to combine that with a script.\n\nOf course, some advanced code might check that you set a breakpoint on it before triggering an exception.\n\n",
      "votes": "38",
      "user": "Gehock",
      "time": "Apr 26, 2020 at 18:00",
      "is_accepted": true,
      "comments": [
        {
          "user": "newgre",
          "text": "\"In 32bits versions of Windows, they can be set on the fly, without any pre-requirement.\" That's not quite correct, it depends on how the executable was compiled, e.g., if compiled with SafeSEH ntdll!RtlDispatchException (IIRC) will terminate your process if you registered an SEH handler on the fly.",
          "time": null
        },
        {
          "user": "newgre",
          "text": "Also, a pretty common obfuscation technique is to modify the instruction pointer of the CPU context that is passed to the SEH handler. So it's usually a good idea to place a breakpoint before the call to NtContinue inside KiUserExceptionDispatcher. IDAStealth can do this for you automatically btw.",
          "time": null
        },
        {
          "user": "newgre",
          "text": "Execution does resume at next and since the OS doesn't force you to return from the exception handler, that statement is technically correct. In fact, that's exactly how C++ exceptions are implemented in the CRT.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "don't forget that any Vectored Exception Handler which was registered already will receive control first.  The SEH might never execute at all.",
          "time": null
        },
        {
          "user": "mrduclaw",
          "text": "This is a really great write-up, I'd love to see SEHOP added to this sometime for the sake of completeness.  Also, just to be extremely nit-picky: when int3 fires, an interrupt does occur and an interrupt handler invoked, right?  I understand that stepping through the kernel call would be impossible in ImmunityDebugger (and while kernel debugging with Windbg, IIRC), but I just wanted to clarify for my own understanding.",
          "time": null
        }
      ]
    }
  ]
}