{
  "title": "Getting past a whole lot of anti-debug measures for a windows exe",
  "link": "https://reverseengineering.stackexchange.com/questions/13577/getting-past-a-whole-lot-of-anti-debug-measures-for-a-windows-exe",
  "content": "I'm trying to debug a windows exe that is really full of anti-debug measures. It has pretty much everything you can think of DBGuiremotebreakin, Ntsetinformationthread, NtQueryInformationProcess, the works. The only problem is that I really need to get into it. The anti-debug stuff is mixed in all throughout the code with important computations that are used for the stuff I want to see. How could I start trying to spoof the measures so I can observe register usage unfoiled?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "6k",
  "tags": [
    "debuggers",
    "anti-debugging",
    "disassemblers"
  ],
  "user": "codechao",
  "time": "Sep 24, 2016 at 16:47",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use something like Scylla Hide\n\nhttps://github.com/nihilus/ScyllaHide\n\nIt has plugins for most popular debuggers. It has lots of hiding options and presets for advanced packers like Themida.\n\nYou can also try Titan Hide.\n\nhttps://github.com/mrexodia/TitanHide\n\n",
      "votes": "5",
      "user": "Ghassan Idriss",
      "time": "Jun 16, 2017 at 18:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "Denis Laskov",
          "text": "My +1 vote  for this one. I am not Olly fan, but this one obviously did the work for topicstarter. Well done :)",
          "time": null
        },
        {
          "user": "codechao",
          "text": "sorry, took a little break to recoup after that effort. This is flagged as best answer. Thank you!",
          "time": null
        },
        {
          "user": "Thomas Weller",
          "text": "The second link seems broken in the way that the repository was deleted",
          "time": null
        },
        {
          "user": "Ghassan Idriss",
          "text": "Updated link to new repo",
          "time": null
        }
      ]
    },
    {
      "content": "I think, in such cases strategy is very depend on type of anti-debug mechanisms used, sort of computations that you are looking for, and amount of time you ready to spent on this task.\n\nIMO you should follow this plan:\n\nHope it helps :) \n\n",
      "votes": "1",
      "user": "Denis Laskov",
      "time": "Sep 24, 2016 at 18:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ghassan Idriss",
          "text": "Maybe Sylla hide or Titan hide may be of assistance here as well. Plugins for most debuggers are available.",
          "time": null
        },
        {
          "user": "codechao",
          "text": "thanks this does help. I will try to start with that. Basically a string is created through modifications to the .data of the exe. I want to know the string that it generates. It might be possible to selectively nop all the anti-debug features, but there's a lot and they're prolific, and usually around critical code.",
          "time": null
        },
        {
          "user": "codechao",
          "text": "I wish I could upvote you 1000 times @GhassanIdriss but I can't even once, because it was just a comment. Those two in conjunction worked where others didn't! I was able to get the string generated fine using ODBG.",
          "time": null
        },
        {
          "user": "Ghassan Idriss",
          "text": "I made an answer for it",
          "time": null
        }
      ]
    }
  ]
}