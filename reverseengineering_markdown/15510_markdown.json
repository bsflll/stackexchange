{
  "title": "Detect a process for being injected with a dll [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/15510/detect-a-process-for-being-injected-with-a-dll",
  "content": "I'm trying to figure out how can I detect a process for being injected with a dll.\nI found this thread but I couldn't figure out a simple way out of it.\n\nI want to clarify my intention: given a pid - I want to return an answer if that process was injected with a dll or not.\n\nI thought of dumping all the dependencies of a process and then compare it to the running process - the problem is that the dependencies load their own dlls...\n\nI heard that Anti viruses compares check sums or something like that - but couldn't understand how exactly.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "dll",
    "injection"
  ],
  "user": "Shan Pop",
  "time": "7 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "You can recursively follow dependencies to figure out which DLLs were loaded directly by the Windows loader. You may create an imported modules list. Fill imported module list with every module you find in the main PE's import table. Then recursively parse the import tables of all DLLs you found that way. You'll have a list with all DLLs imported. Then, just compare it to the list of loaded modules.\n\nDiscrepancies you find might be either injected DLLs or dynamically loaded DLLs.\n\nIdentifying dynamically loaded DLLs might be a bit more challenging, but one way to identify those is to disassemble the executable and search for calls to LoadLibrary, LoadLibraryEx etc.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Jun 9, 2017 at 17:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "user2823000",
          "text": "That wouldn't detect DLLs that have been either removed from the list of loaded modules or even loaded manually though.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Kinda felt like both are out of scope tbh",
          "time": null
        },
        {
          "user": "dyasta",
          "text": "Add a compare to the path too, and you will be fine. You know what your app uses. So, you can detect injected DLLs, through one way or another. If for third-party apps, it is much more difficult, but also possible.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "any DLL can be renamed and replaced at any point, so as I wrote in the original thread, there are things that you can try, but they might not work.  The short answer is that you really can't be certain that you don't have an active injection.",
          "time": null
        }
      ]
    }
  ]
}