{
  "title": "How to bypass anti-debugging protection with Segmentation falt?",
  "link": "https://reverseengineering.stackexchange.com/questions/33165/how-to-bypass-anti-debugging-protection-with-segmentation-falt",
  "content": "I am trying to solve crackme. But I have no experience with obfuscation and anti-debugging protection. Crackme just asks for flag and prompts it is incorrect. In debbuger it always crashes with segmentation fault:\n\n```\n [+] SIGNAL 11 errno=0 addr=0x00000000 code=1 si_pid=0 ret=0\n\n```\nOr in gdb:\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x08049094 in ?? ()\n(gdb) x/i $pc\n=> 0x8049094:   mov    (%eax),%eax\n(gdb) Quit\n(gdb) \n\n```\nCode has only one function entry0 and most of the code looks like a lot of actions with random address.\n\n```\n0x080483a0    1      6 sym.imp.sigaction\n0x08048340    1      6 sym.imp.read\n0x08048360    1      6 sym.imp.puts\n0x08048380    1      6 sym.imp.strlen\n0x08048390    1      6 sym.imp.setvbuf\n0x08048350    1      6 sym.imp.printf\n0x08048370    1      6 sym.imp.exit\n0x080483bc    1  78628 entry0\n\n```\nAnd it uses unusual sigaction function.\nHow to bypass such anti-debugging protection? And what to read about it?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "81",
  "tags": [
    "anti-debugging",
    "protection"
  ],
  "user": "JustOneMan",
  "time": "Nov 4, 2024 at 12:06",
  "comments": [
    {
      "user": "wisk",
      "text": "sigaction is used to register an action when a signal is triggered, the crackme probably register a handler for SIGSEGV, the instruction at 0x8049094 might causes a SIGSEGV on purpose to trigger this handler. You need to find where's this handler. It should be the field sa_sigaction, and it will probably update the ucontext parameter. man7.org/linux/man-pages/man2/sigaction.2.html Can you share a link to the crackme?",
      "time": null
    },
    {
      "user": "Kerim Can Kalıpcıoğlu",
      "text": "If you could share the main function or binary, we’d have a chance to examine it as well. What makes you think the segmentation fault is being used as an anti-debugging technique? It’s also possible that the segmentation fault was caused by poor programming, especially since you mentioned not entering any input. It would’ve been great if you had at least shared the disassembler output of the entry0 function. What difference would it make if there were no segmentation fault? You’re not finding the flag in this situation anyway.",
      "time": null
    }
  ],
  "answers_data": []
}