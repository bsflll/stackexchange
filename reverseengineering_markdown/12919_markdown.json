{
  "title": "Using x86dbg valid opcodes produce '??? invalid instruction' output",
  "link": "https://reverseengineering.stackexchange.com/questions/12919/using-x86dbg-valid-opcodes-produce-invalid-instruction-output",
  "content": "Using the most recent ( as of today ) version of x86dbg I have a problem that follow every executable I have tried.\n\nThe disassembler in the CPU window, look at the 5th line from the top:\n\n\n\nAny ideas why this is happening and or suggestions to correct it?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "337",
  "tags": [
    "disassembly",
    "x86",
    "tools"
  ],
  "user": "FirmwareGuy",
  "time": "Dec 30, 2018 at 21:43",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "Looks like a bug in their disassembler engine. I'd recommend notifying them.",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "Never mind... I see you just did :)",
      "time": null
    },
    {
      "user": "yaspr",
      "text": "I'm voting to close this question as off-topic because it is related to a software bug or a software malfunction. Nothing to do with RE.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This turned out to be an actual bug.\nThe x86dbg team  has found and already fixed it. The fix should be in tonight's snapshot (Jun 23 2016).\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Oct 25, 2016 at 14:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "Sigtran",
          "text": "rep probably doesnt allow for commenting just yet :)",
          "time": null
        }
      ]
    }
  ]
}