{
  "title": "how to print non printable address using python",
  "link": "https://reverseengineering.stackexchange.com/questions/32807/how-to-print-non-printable-address-using-python",
  "content": "i have been doin ctf challenge and came across a problem when i have to push the address of a function into eip{instruction pointer} by overflowing the buffer but the main problem here is that the address of the function is 0x401199 and in other to push the address i have to push it in reverse order like \\x99\\x11\\x40\\x00 and i have been using python to do so , but the main problem here is that some the these value like \\x99 and \\x11 are associated with non printable character and i cannot guess any other method to do so please some one with time can clear my request\n\ni hope i explained my query briefly\n\n",
  "votes": "0",
  "answers": 1,
  "views": "64",
  "tags": [
    "ida",
    "linux"
  ],
  "user": "Zishan Ansari",
  "time": "Mar 14, 2024 at 20:50",
  "comments": [],
  "answers_data": [
    {
      "content": "You're describing encoding a Python int into bytes. In this case, the int is a 32-bit unsigned integer.\n\nUse struct.pack for this:\n\n```\n>>> struct.pack(\"<I\", 0x401199)\nb'\\x99\\x11@\\x00'\n\n```\nFor the reasons you've describing, these bytes cannot generally be converted into a string: b'\\x99\\x11@\\x00' is not a valid utf-8 encoding.\n\nFor converting bytes into strings, use the binascii module (+.encode to convert bytes into a Python string)\n\nFor example:\n\n```\n>> binascii.b2a_hex(b'\\x99\\x11@\\x00').decode()\n'99114000'\n\n```\n",
      "votes": "1",
      "user": "maarten",
      "time": "Mar 15, 2024 at 17:04",
      "is_accepted": false,
      "comments": [
        {
          "user": "Zishan Ansari",
          "text": "thanks for the help but didnot work! i added struck.pack but now python return bytes not str when use struct,pack but cannot concatenate with the padding  i am trying to",
          "time": null
        },
        {
          "user": "maarten",
          "text": "The python str type is for readable text, byte is for binary data. Your payload needs to meet certain specifications such as having a specific byte length, having some data at specific offset.",
          "time": null
        },
        {
          "user": "maarten",
          "text": "That said, you can convert a byte string to text, and ignore errors by doing: b\"\\x99\\x11@\\x00\".decode(errors=\"ignore\")",
          "time": null
        }
      ]
    }
  ]
}