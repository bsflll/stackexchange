{
  "title": "Name and Ordinal table pointers in export directory are NULL although DLL exports functions",
  "link": "https://reverseengineering.stackexchange.com/questions/6652/name-and-ordinal-table-pointers-in-export-directory-are-null-although-dll-export",
  "content": "I'm trying to explore the functions exported by profapi.dll and I came across a behavior that I can't explain. \n\nReading about the PE binary format I gather that the export table has 3 tables (arrays): one array containing function pointers of exported functions, another containing names (strings) of exported functions, and a third array containing the integer ordinal numbers of the exported functions. The linker needs the information in the name and/or the ordinal table to patch calls to exported functions in other DLLs. The name table pointer can be NULL if the DLL exports its functions using only ordinal numbers. \n\nHowever, for profapi.dll, I see that both the name table and the ordinal table pointers are NULL; yet the DLL exports 6 functions (verified using IDAPro). In fact, shell32.dll calls one of the functions in profapi.dll using its ordinal number and the linker somehow resolves the address. I'm not sure how the linker is able to resolve the call in shell32.dll. Moreover, pefile, the Python library I am using to parse the DLL reports that profapi.dll does not export any functions since both the name and ordinal table pointers are NULL. What am I missing?\n\nI'm using profapi.dll version 6.1.7600.16385 and shell32.dll version 6.1.7601.2278 on Windows 7. I'm using pefile version 1.2.10-139.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "dll",
    "pe"
  ],
  "user": "redraga",
  "time": "Nov 18, 2014 at 0:47",
  "comments": [],
  "answers_data": [
    {
      "content": "The \"ordinal table\" (also known as the Export Ordinal Table or AddressOfNameOrdinals) is used in conjunction with the \"name table\" (also known as the Export Name Pointer Table or AddressOfNames) if-and-only-if functions are exported by name.\n\nFrom the official PE-COFF documentation:\n\nBut if there are no functions exported by name, then there is no Export Name Pointer Table, and if there's no Export Name Pointer Table then there's on need for the Export Ordinal Table either, which is why both fields are NULL in the Export Directory Table.\n\nThe build-time linker (part of the compiler toolkit) doesn't resolve the address; the run-time loader (part of Windows) resolves the address. The loader see that shell32.dll imports a profapi.dll function by a given ordinal number (let's say 105, for example), so it subtracts profapi.dll's Ordinal Base (let's say 101, for example) from the ordinal number and uses the result (4 in this example) as an index into the Export Address Table to find the RVA of the imported function. Neither the Export Ordinal Table nor the Export Name Pointer Table are needed.\n\nAs discussed here, the pefile Python library is broken, or at least older versions of it are known to be broken with respect to ordinal handling.\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jason Geffner",
          "text": "In addition to the official PE-COFF documentation linked above, I've always found Iczelion's Export Table tutorial to be very helpful with understanding how this all works.",
          "time": null
        }
      ]
    }
  ]
}