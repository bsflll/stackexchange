{
  "title": "Deciphering the format of an unknown file",
  "link": "https://reverseengineering.stackexchange.com/questions/29810/deciphering-the-format-of-an-unknown-file",
  "content": "I am attempting to discover the exact format/encoding of a file. These files stem from closed-source analysis software we use on a daily basis. I would like to obtain the format in order to create an open source viewer for these kind of files and analysis. I am by no means a deciphering expert but I've did some research concerning the file. Currently I am not sure however to pursue any further, so I would be very grateful for any help.\n\nI've ran several tools in order to profile the file. The extension of the file is .SMP.\n\n1. TrID\nTrID is an utility designed to identify file types from their binary signatures.\n\n\nI was positively surprised when I saw this result because it suggested that it would be a known file format. However, when using the described tools (e.g. packARC and packPNM) it appears that these cannot be read by that format. Terminal below:\n\n```\nC:\\Users\\wptmdoorn\\Documents\\programming\\sysmexviewer\\data>packarc x f1.smp\n\n--> packARC Frontend v0.7RC17 (11/21/2014) by Matthias Stirner / Se <--\n--> packARC library v0.7RC17 (11/21/2014) by Matthias Stirner / Se <--\n--> contains: packJPG v2.5j, packMP3 v1.0f, packPNM v1.6c, packARI v0.6e <--\nCopyright 2006-2014 HTW Aalen University & Matthias Stirner\nAll rights reserved\n\n*could not open archive \"f1.smp\" (file is not a PJA archive)!*\n\n```\n2. Binvis and Binwalk\nBinwalk does not return any meaningful information (in this case I used -e to extract potential files if there are).\n\n```\nC:\\Users\\wptmdoorn\\Documents\\programming\\sysmexviewer\\data>binwalk --signature f1.smp -e\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n\n```\nBinvis.io does return some patterns however.\n\nScan (left) and cluster (right)\n\n\nEntropy; scan (left) and cluster (right)\n\n\n3. Hex editor\nAt last I tried to look at the files in a hex editor. Underlying figures show the file opened at the beginning and somewhere in the middle.\n\n\n\n\nConclusion\nMy gut feelings says that it's some kind of archive of several files with some kind of header, although I am not completely sure. Nonetheless I would be very grateful if anybody would be able to look at these preliminary results and give some hints on routes I should consider :-)\n\nThanks a lot in advance.\nBest, William\n\n",
  "votes": "4",
  "answers": 1,
  "views": "1k",
  "tags": [
    "file-format",
    "hex",
    "binwalk"
  ],
  "user": "wptmdoorn",
  "time": "Jan 1, 2022 at 19:07",
  "comments": [
    {
      "user": "Raleigh L.",
      "text": "Is it one of the file types described here? filetypeadvisor.com/extension/smp",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is only a partial answer but the data at offset 0x100 looks very much like that produced by Microsoft's C++ MFC serialization.\n\nSpecifically, the FFFF is a 'new class tag' followed by -\n\nDecent information on MFC Serialization is pretty scarce but there is a good write-up here.\n\n",
      "votes": "6",
      "user": "Ian Cook",
      "time": "Jan 1, 2022 at 22:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "wptmdoorn",
          "text": "That's a very nice finding, thank you. It's indeed a pretty high chance that this originates from MFC serialization. You don't have to answer, but any advice on deserializing a MFC file from whose original class structure/format I do not have access to? If you read and think about it, it seems almost impossible to do. At this point I might even try to disassembly the original software to see if I can find some of these classes there.",
          "time": null
        },
        {
          "user": "Ian Cook",
          "text": "It's been years since I really looked at anything MFC based, but if you know what info you expect the file to contain it will help considerably; especially if you can create files and control what's in them using the device itself.    If you try to look at the original software, I'd expect it to contain MFC Runtime Class Information.  This should help identify where in the code to look. You'll be even luckier if MSVC C++ RTTI is enabled too.",
          "time": null
        }
      ]
    }
  ]
}