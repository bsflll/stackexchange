{
  "title": "How would one go about finding the key to this crackme (polynomial - childhood crackme)?",
  "link": "https://reverseengineering.stackexchange.com/questions/31910/how-would-one-go-about-finding-the-key-to-this-crackme-polynomial-childhood-c",
  "content": "I'm trying to solve a crackme that contains a key check like so:\n\n```\n    lVar4 = vulnerability1(passwd);\n    if (lVar4 == 0x260a4c7d7af23fc0) {\n      solve_check(1,0xffffffff);\n      free(passwd);\n      uVar3 = 1;\n    }\n\n```\nwith childhood vulnerability being\n\n```\nlong vulnerability1(char *param_1)\n\n{\n  char *local_20;\n  long local_10;\n\n  local_10 = 0x7364626d;\n  local_20 = param_1;\n  while( true ) {\n    if (*local_20 == 0) break;\n    local_10 = local_10 * 0x1003f + (long)(int)*local_20;\n    local_20 = local_20 + 1;\n  }\n  return local_10;\n\n```\n}\n\nBasically, vulnerability1 cycles through each letter of param1 and applies some transformations. It returns this transformation and it must be the value 0x260a4c7d7af23fc0\n\nMy question is: Is there an more \"correct\" way of finding the correct string besides brute force? How would a veteran RE person do this?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "165",
  "tags": [
    "crackme"
  ],
  "user": "efel",
  "time": "May 27, 2023 at 4:11",
  "comments": [
    {
      "user": "blabb",
      "text": "looking at decompilation alone without accompanying disassembly is not a good practice from the looks of it a longlong needs to be returned by a long multiplied with  a const doesn't look  feasible the overflow will get lost.",
      "time": null
    },
    {
      "user": "efel",
      "text": "Apologies, should of mentioned the architecture and os. This is 64 bit Intel, Linux. So long would be 8 bytes.",
      "time": null
    }
  ],
  "answers_data": []
}