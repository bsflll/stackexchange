{
  "title": "Reverse engineering parameter value on subroutine call",
  "link": "https://reverseengineering.stackexchange.com/questions/11657/reverse-engineering-parameter-value-on-subroutine-call",
  "content": "I'm trying to find out what value a certain parameter has when it's called (I know \"parameters\" are gone after compiled, but you get the idea). The pseudo-C and assembly code are:\n\n```\nsub_171F4A0(ctx, aes_mode, KEY, &IV); // EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)\n\n.text:000000000040CEE6 ; 252:   sub_171F4A0(v110, v125, ptr, &v130);\n.text:000000000040CEE6\n.text:000000000040CEE6 loc_40CEE6:                             ; CODE XREF: sub_40CAD0+363j\n.text:000000000040CEE6                 mov     rdi, [rsp+400h+var_400]\n.text:000000000040CEEA                 lea     rcx, [rsp+400h+var_1C0]\n.text:000000000040CEF2                 mov     rsi, [rcx-28h]\n.text:000000000040CEF6                 mov     rdx, [rsp+400h+ptr]\n.text:000000000040CEFE                 call    sub_171F4A0\n\n```\nI have already figured out IV value, but now I need KEY, which is 16 bytes.\n\nThen I ran gdb ./executable (Linux 64-bit ELF binary) and set a breakpoint at 0x40CEF6 and examined all the registers mentioned above (I have no idea which one holds the third parameter).\n\n```\n(gdb) break *0x40CEF6\nBreakpoint 1 at 0x40cef6\n(gdb) run\nStarting program: /path/to/executable\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, 0x000000000040cef6 in ?? ()\n(gdb) x/4x $rdi\n0x29d72f0:  0x00000000  0x00000000  0x00000000  0x00000000\n(gdb) x/4x $rcx\n0x7fffffffe340: 0x00000000  0x00000000  0x00000000  0x00000000\n(gdb) x/4x $rsi\n0x1c11620:  0x000001a3  0x00000010  0x00000010  0x00000010\n(gdb) x/4x $rdx\n0x2a09690:  0x724a5bac  0xa90b86f0  0xff9d8546  0x9910582b\n\n```\nNone of those values is the actual key, but $rdx seems to be the best candidate to hold the key value.\n\nHowever, since it's a pointer, I thought I should examine 0x724a5baca90b86f0, just in case, which didn't work:\n\n```\n(gdb) x/4x 0x724a5baca90b86f0\n0x724a5baca90b86f0: Cannot access memory at address 0x724a5baca90b86f0\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "137",
  "tags": [
    "gdb",
    "encryption"
  ],
  "user": "Nacib Neme",
  "time": "Dec 30, 2015 at 18:19",
  "comments": [
    {
      "user": "Vitaly Osipov",
      "text": ">\"I have no idea which one holds the third parameter\"For the future: en.wikipedia.org/wiki/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Set your breakpoint on address 0x0040CEFE and examine the memory pointed to by rdx at that point.\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Dec 30, 2015 at 18:32",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nacib Neme",
          "text": "(gdb) x/4x $rdx 0x2a09690:\t0x724a5bac\t0xa90b86f0\t0xff9d8546\t0x9910582b (exactly as stated in the question)",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "So the value of rdx didn't change between addresses 0x0040CEF6 and 0x0040CEFE?",
          "time": null
        },
        {
          "user": "Nacib Neme",
          "text": "No, it doesn't: pastebin.com/k2c2X1mL",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Thanks. It looks like AC 5B 4A 72 F0 86 0B A9 46 85 9D FF 2B 58 10 99 is the key.",
          "time": null
        }
      ]
    }
  ]
}