{
  "title": "CMP ecx with DAT_",
  "link": "https://reverseengineering.stackexchange.com/questions/22769/cmp-ecx-with-dat",
  "content": "So I encountered this bit of assembly code:\n\n```\ncmp dword ptr [ECX + 0x24c], DAT_007c6bc0\n\n```\nIt's comparing ECX + 0x24c with DAT_007c6bc0. If they are not equal, it will just return from the function.\n\nI have compared the output of Ghirda and IDA (free) and in IDA it looks like this:\n\n```\ncmp dword ptr [ecx + 24Ch], offset unk_7C6BC0\n\n```\nNow, what exactly is DAT_007c6bc0? I couldn't really find any information on it, and how does it compare to ECX + 0x24c since it just checks if the address is the same, right? \n\n",
  "votes": "2",
  "answers": 1,
  "views": "203",
  "tags": [
    "assembly",
    "debugging"
  ],
  "user": "zwaffel",
  "time": "Dec 17, 2019 at 22:39",
  "comments": [],
  "answers_data": [
    {
      "content": "In this example, DAT_007c6bc0 (or offset unk_7C6BC0) is just an address in program's (virtual) address space.\n\nNow, comparing it with [ECX + 0x24c], is comparing this address with the data located at ECX + 0x24c in program's virtual address space, not with ECX + 0x24c. It's just a pointer comparison (dword ptr means that we treat these numbers as dwords - 4bytes each); in pseudo code it could look like this:\n\n```\nif (*(ECX + 0x24c) != DAT_007c6bc0)\n    return;\n\n```\nIn other words, if d is the data located at DAT_007c6bc0 in memory (d = *DAT_007c6bc0), then the code will check whether data at ECX + 0x24c is a pointer to d.\n\n",
      "votes": "1",
      "user": "bart1e",
      "time": "Dec 17, 2019 at 14:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}