{
  "title": "Erase the data from the NVRAM",
  "link": "https://reverseengineering.stackexchange.com/questions/5933/erase-the-data-from-the-nvram",
  "content": "Cable modem SPI Flash memory have the following structure:\n\n```\n7 cmdlinepart partitions found on MTD device spansion\npartitions[0] = {.name = U-Boot, .offset = 0x00000000,.size = 0x00020000 (128K) }\npartitions[1] = {.name = env1, .offset = 0x00020000,.size = 0x00010000 (64K) }\npartitions[2] = {.name = env2, .offset = 0x00030000,.size = 0x00010000 (64K) }\npartitions[3] = {.name = firmware_101222c, .offset = 0x004a0000,.size = 0x002d0000 (2880K) }\npartitions[4] = {.name = nvram, .offset = 0x007b0000,.size = 0x00050000 (320K) }\npartitions[5] = {.name = UBFI1, .offset = 0x00040000,.size = 0x003b0000 (3776K) }\npartitions[6] = {.name = UBFI2, .offset = 0x003f0000,.size = 0x003b0000 (3776K) }\nCreating 7 MTD partitions on \"spansion\":\n0x00000000-0x00020000 : \"U-Boot\"\n0x00020000-0x00030000 : \"env1\"\n0x00030000-0x00040000 : \"env2\"\n0x004a0000-0x00770000 : \"firmware_101222c\"\n0x007b0000-0x00800000 : \"nvram\"\n0x00040000-0x003f0000 : \"UBFI1\"\n0x003f0000-0x007a0000 : \"UBFI2\"\n\n```\nBootloader is working, I can connect to modem via serial interface, control boot process and upload firmware. I can't connect admin interface via ip 192.168.100.1, possibly due to wrong configuration stored in nvram. Can I erase Nvram only, without touching other partitions?\n\n```\n?       - alias for 'help'\nautoscr - run script from memory\nbase    - print or set address offset\nbdinfo  - print Board Info structure\nboot    - boot default, i.e., run 'bootcmd'\nbootd   - boot default, i.e., run 'bootcmd'\nbootm   - boot application image from memory\nbootp   - boot image via network using BootP/TFTP protocol\ncmp     - memory compare\nconinfo - print console devices and information\ncp      - memory copy\ncrc32   - checksum calculation\necho    - echo args to console\nerase   - erase FLASH memory\neval    - return addition/subraction\nexit    - exit script\nflinfo  - print FLASH memory information\ngo      - start application at address 'addr'\nhelp    - print online help\niminfo  - print header information for application image\nimls    - list all images found in flash\nitest   - return true/false on integer compare\nloadb   - load binary file over serial line (kermit mode)\nloads   - load S-Record file over serial line\nloady   - load binary file over serial line (ymodem mode)\nloop    - infinite loop on address range\nmd      - memory display\nmm      - memory modify (auto-incrementing)\nmtest   - simple RAM test\nmw      - memory write (fill)\nnm      - memory modify (constant address)\nprintenv- print environment variables\nprotect - enable or disable FLASH write protection\nrarpboot- boot image via network using RARP/TFTP protocol\nreset   - Perform RESET of the CPU\nrun     - run commands in an environment variable\nsaveenv - save environment variables to persistent storage\nsetenv  - set environment variables\nsleep   - delay execution for some time\ntest    - minimal test like /bin/sh\ntftpboot- boot image via network using TFTP protocol\nversion - print monitor version\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "linux",
    "firmware",
    "memory",
    "serial-communication",
    "spi"
  ],
  "user": "Lexx Luxx",
  "time": "Jul 27, 2014 at 10:46",
  "comments": [],
  "answers_data": [
    {
      "content": "You could probably use erase with some arguments to erase only the nvram partition, but I'm not sure if U-Boot can then reinitialize nvram storage. And since nvram usually contains the boot commands, erasing everything could make your unit unbootable. Therefore I would recommend erasing only specific variables.\n\nYou can use setenv for that:\n\nMake sure to save the modifications with saveenv.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Jul 24, 2014 at 19:07",
      "is_accepted": false,
      "comments": [
        {
          "user": "Lexx Luxx",
          "text": "But how I can find a specific variables in nvram which are wrong and cause the web daemon to crash or not start? I don't know which from configuration settings stored in nvram cause problem.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "How do you even know nvram vars are the problem? U-Boot nvram is mostly used for boot-time config, not OS-level settings.",
          "time": null
        },
        {
          "user": "Lexx Luxx",
          "text": "Firmware boots ok, but I can't connect to modem admin interface via 192.168.100.1, can't SSH to it either. Pinging an IP says it unreachable. This happened after I make a change to some settings and rebooted. I just guess this might be due some wrong settings stored in nvram. Since a network connection is not available - can I use U-Boot load files via the serial port? How to do this? I am on Windows. Which protocols to use, kermit or y-modem?  Should I rename backup to 'nvram' first? loadb [load address] [baud rate]",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "It's highly unlikely the modem settings are stored in U-Boot's nvram. Try printenv to see the variables you have.",
          "time": null
        },
        {
          "user": "Lexx Luxx",
          "text": "Printenv here. There is few superfluous entries (bold text), that were left when I configured firmware upgrade via console port. I'm not sure if this can cause a problem. How to remove them? Normally, the variables should be like this sample.",
          "time": null
        }
      ]
    }
  ]
}