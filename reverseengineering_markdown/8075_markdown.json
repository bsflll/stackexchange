{
  "title": "Work out if a firmware is dumpable/writeable through USB?",
  "link": "https://reverseengineering.stackexchange.com/questions/8075/work-out-if-a-firmware-is-dumpable-writeable-through-usb",
  "content": "I'm looking to find out if a firmware of a device is readable and potentially writeable. The device has a USB port and other devices by this manufacturer have had firmware updates (through USB) so it's within the realm of possibilities this is doable.\n\nHow will it be possible to find out if the firmware is accessible through the USB port? If it helps the device is a Cloupor Mini\n\n",
  "votes": "6",
  "answers": 1,
  "views": "993",
  "tags": [
    "firmware",
    "usb"
  ],
  "user": "jblz",
  "time": "Jan 21, 2015 at 20:40",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Does the device make any use of the USB port, other than charging the battery? Does windows device manager find a new device when you plug in the USB? What happens if you use the firmware flash tool for a different device by this manufacturer, does it output any error messages like 'no device found' or 'incompatible device'? The first would suggest the USB has no other meaning than charging the battery, the second could mean the device responds to the flash tool in some way.",
      "time": null
    },
    {
      "user": "Krista K",
      "text": "The best way to tell is to take it (& other models) apart and look for a UART. Then do an update on the other model and sniff the USB port, etc.",
      "time": null
    },
    {
      "user": "ixje",
      "text": "To complement @GuntramBlohm 's suggestion; have a look at the bNumConfiguration field in the USB Device descriptor (see USB specs).  It indicates the number of configurations available at the current operating speed. I assume this field can also give away the availability of a DFU or SW upgrade mode or not.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Standard USB protocol for firmware upgrade is DFU. Linux has 2 tools to work with DFU devices:\n\ndfu-util is more advanced and for example allows to list connected DFU-capable devices, e.g. when run on my laptop:\n\n```\n# dfu-util -l\ndfu-util 0.5\n\n[...]\nFound Runtime: [0a5c:21e6] devnum=0, cfg=1, intf=3, alt=0, name=\"UNDEFINED\"\n\n```\nBoth of the tools may be useful though when working with different devices and their peculiarities.\n\nNote though:\n\nIf you want to upgrade and modify firmware, consider buying only open devices (use community resources to discover them), and avoid, ignore, and warn other users of non-open ones.\n\n",
      "votes": "3",
      "user": "pfalcon",
      "time": "Apr 18, 2015 at 19:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "rev",
          "text": "While open-source is nice and all, hacking into a closed source device and modding it to your needs is very satisfying, and quite a \"reverse engineering\" experience.",
          "time": null
        }
      ]
    }
  ]
}