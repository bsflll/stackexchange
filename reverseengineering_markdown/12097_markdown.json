{
  "title": "Any good deobfuscators for java?",
  "link": "https://reverseengineering.stackexchange.com/questions/12097/java-source-code-deobfuscator",
  "content": "So I've built an obfuscator for java source code, would anyone know if there is any good deobfuscators which i could test how well my obfuscator is?\nI know there are many deobfuscators out there, however a lot of them just decompile java byte code back to source code, but don't actual target a lot obfuscation techniques such as opaque predicates, control flow obfuscation and other obfuscation techniques.\nSo im wondering if anyone could recommend any deobfuscators which may target techniques such as the ones I have mentioned above?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "obfuscation",
    "java",
    "deobfuscation"
  ],
  "user": "Alan Liang",
  "time": "Mar 6, 2016 at 11:31",
  "comments": [
    {
      "user": "Antimony",
      "text": "Most deobfuscators of the kind you're looking for are targeted at specific obfuscators. So I guess the answer would be not yet, but there will be if your obfuscator becomes popular. Anyway, if you provide your obfuscator or an obfuscated sample, I can take a look and tell you how good I think it is.",
      "time": null
    },
    {
      "user": "Alan Liang",
      "text": "@Antimony  i haven't fully implemented my obfuscator right now, i have copy and pasted some obfuscated code with the original of two of the techniques i have implemented, if you could give me your view on it, i would be very happy",
      "time": null
    },
    {
      "user": "Alan Liang",
      "text": "@Antimony chopapp.com/#bvwgh7fn here is the link, the first half is the original the second is the obfuscated",
      "time": null
    },
    {
      "user": "Alan Liang",
      "text": "@Antimony also ill like to say some of the variables in the file are not obfuscated such as the method names, as I didn't pass it through the part of my obfuscator which scrambles names, the variables which have been obfuscated are new generated variables, which are made when doing the control flow obfuscation",
      "time": null
    },
    {
      "user": "Antimony",
      "text": "Doesn't look too bad. I'd probably tackle it by converting the fields into local variables, writing a pass to simplify the algebraic identities, and then let normal constant propagation do the rest. I don't think any generic deobfuscators would handle this, but it's easy for a human to write a tool which undoes this. Maybe when you're done you should post an obfuscated sample as a challenge and I can try to deobfuscate it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Proguard's \"optimisation\" stage results in deobfuscating junk as I wrote up here - http://www.surrendercontrol.com/2016/03/using-proguard-to-deobfuscate-code.html. \n\nAlso, Caleb Fention's Simplify engine has a bunch of very nice ideas and implements them for Dalvik code, if not straight for JVM -  https://github.com/CalebFenton/simplify\n\n",
      "votes": "4",
      "user": "Vitaly Osipov",
      "time": "Mar 6, 2016 at 20:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}