{
  "title": "Type inference inconsistency",
  "link": "https://reverseengineering.stackexchange.com/questions/22827/type-inference-inconsistency",
  "content": "I'm testing several decompilers against the following C code\n\n```\n\nstatic int bar(int i) {\n    return ++i;\n}\n\nstatic int apply(int (*fun)(int), int i) {\n    return i % fun(i);\n}\n\nstatic int foo(int (*app)(int (*fun)(int), int), int i)  {\n    return i / app(bar, i);\n}\n\nint main() {\n    return foo(apply, 7);\n}\n\n```\nwhich is compiled by just clang test.c.\n\n```\n; main\n0x0         push rbp\n0x1         mov rbp, rsp\n0x4         sub rsp, 0x10\n0x8         mov dword ptr [rbp-0x4], 0x0\n0xf         mov rdi, @apply\n0x19        mov esi, 0x7\n0x1e        call foo\n0x23        add rsp, 0x10\n0x27        pop rbp\n0x28        ret\n\n; foo\n0x30        push rbp\n0x31        mov rbp, rsp\n0x34        sub rsp, 0x20\n0x38        mov [rbp-0x8], rdi\n0x3c        mov [rbp-0xc], esi\n0x3f        mov eax, [rbp-0xc]\n0x42        mov rcx, [rbp-0x8]\n0x46        mov esi, [rbp-0xc]\n0x49        mov rdi, @bar\n0x53        mov [rbp-0x10], eax\n0x56        call rcx\n0x58        mov edx, [rbp-0x10]\n0x5b        mov [rbp-0x14], eax\n0x5e        mov eax, edx\n0x60        cdq\n0x61        mov esi, [rbp-0x14]\n0x64        idiv esi\n0x66        add rsp, 0x20\n0x6a        pop rbp\n0x6b        ret\n\n\n```\nI was aware of some limits in argument/parameter detection (from the response to another question). But each decompiler seems, in one way or another, have inconsistency in the type system of its decompiled language (I think they all try to decompile to C or pseudo-C).\n\nIDA v.7.4.191122 (evaluation version) gives:\n\n```\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  return foo(apply, 7LL, envp);\n}\n\n__int64 __fastcall foo(int (__fastcall *a1)(__int64 (__fastcall *)(), _QWORD), unsigned int a2)\n{\n  return (unsigned int)((int)a2 / a1(bar, a2));\n}\n\n```\nI don't show results of bar and apply because there was already an inconsistency here: IDA detects that foo is called with 3 arguments in main, but then it concludes that foo has actually 2 parameters.\n\nNext, Ghidra v9.1.build.2019-oct-23:\n\n```\nvoid main(void)\n{\n  foo(apply,7);\n  return;\n}\n\nulong foo(code *param_1,uint param_2,undefined8 param_3)\n{\n  int iVar1;\n\n  iVar1 = (*param_1)(bar,(ulong)param_2,param_3,param_1);\n  return (long)(int)param_2 / (long)iVar1 & 0xffffffff;\n}\n\n```\nwhich has an opposite opinion: foo is called in main with 2 arguments, but in its definition foo has 3 parameters.\n\nJEB v.3.8.0.201912242244 (evaluation version):\n\n```\nunsigned long main() {\n  return foo(&apply, 7L);\n}\n\nunsigned long foo(unsigned long param0) {\n  unsigned int v0 = v1;\n  param0();\n  return (unsigned long)(v0 / ((unsigned int)v2));\n}\n\n```\nwhich gives a perfect result for main, but it then claims that foo is a function of just 1 parameters (and while it shows param0(), it keeps param0 as unsigned long).\n\nActually, the decompilation results are not correct (which is somehow understandable), but they are even inconsistent. Do I miss some configuration?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "184",
  "tags": [
    "ida",
    "decompilation",
    "ghidra",
    "jeb"
  ],
  "user": "Ta Thanh Dinh",
  "time": "Dec 26, 2019 at 10:50",
  "comments": [
    {
      "user": "macro_controller",
      "text": "IDA results look pretty good. I believe that the signature of main comes from any kind of FLIRT or other function recognitions - It detects that the function is main, and therefore gives it the default main signature. it looks like foo disassembled well. You can configure yourself the signature by pressing y on the function call. You must understand that the whole process is very heuristic, and this info does not appear anywhere in the binary.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "Thank you. I understand that the decompilation currently bases on heuristics so it gives sometimes unattended results, but I supposed that it should be consistent.",
      "time": null
    },
    {
      "user": "macro_controller",
      "text": "I saw it several times in IDA, that it creates a good signature for a function but sometimes calls it with extra/missing parameters. I believe it's a bug, rather than something configurable.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "Thank again. Could you please pick your comments as response so I can accept it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "IDA results look pretty good. I believe that the signature of main comes from any kind of FLIRT or other function recognitions - It detects that the function is main, and therefore gives it the default main signature. it looks like foo disassembled well. You can configure yourself the signature by pressing y on the function call. You must understand that the whole process is very heuristic, and this info does not appear anywhere in the binary.\n\nI saw it several times in IDA, that it creates a good signature for a function but sometimes calls it with extra/missing parameters. I believe it's a bug, rather than something configurable.\n\n",
      "votes": "1",
      "user": "macro_controller",
      "time": "Dec 26, 2019 at 11:34",
      "is_accepted": true,
      "comments": []
    }
  ]
}