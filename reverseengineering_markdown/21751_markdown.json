{
  "title": "Finding out what calls win32u.dll functions",
  "link": "https://reverseengineering.stackexchange.com/questions/21751/finding-out-what-calls-win32u-dll-functions",
  "content": "There's a button which, when clicked, writes some data to the clipboard. \nI'm trying to call the function this button executes using DLL Injection.\nI managed to find the function in win32u.dll which accesses the clipboard, and I was able to set a breakpoint there which gets triggered. Obviously, I don't want to call this function directly, but the function that calls it (from the origin program). How do I figure this address out?\n\nI can't use the buttons handle since the button doesn't show up in any UI spy tools and as it is a part of a context menu, it disappears as soon as the focus is lost.\n\nI'm using x64dbg as a debugger, but if you know a solution in OllyDbg, that will be fine since I know how to use both.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "windows",
    "ollydbg",
    "x64dbg"
  ],
  "user": "Kevin Mueller",
  "time": "Jul 23, 2019 at 20:56",
  "comments": [],
  "answers_data": [
    {
      "content": "You can do it at least in two different ways. The first involves Call stack view (View->Call stack) that you can use when the breakpoint you set in that function from win32u.dll is triggered. The first one coming from your application's module will be the desired one.\n\nSecond approach is more static and takes advantage of Intermodular calls. Go to your application's module, right click -> \"Search for\" -> \"All intermodular calls\". You will get all external functions that your program calls and the places where they are called from. So, just search for that API function and you will get all places that it is called from in that module.\n\nYou can see answer for more details.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}