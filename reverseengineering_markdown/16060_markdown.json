{
  "title": "How tools like PEiD find out the compiler and its version.",
  "link": "https://reverseengineering.stackexchange.com/questions/16060/how-tools-like-peid-find-out-the-compiler-and-its-version",
  "content": "How tools like PEiD and CFF explorer find out the compiler and its version. \n\nI am analyzing a executable file. Which shows: Borland Delphi 3.0 \n\n\nBut the section names .text .rsrc. Which is usually not get generated by Borland Delphi compiler.\n\n\nI guess the file version info is modified. \n\nBut how these tools find out the compiler version ??\n\n",
  "votes": "8",
  "answers": 1,
  "views": "5k",
  "tags": [
    "windows",
    "malware",
    "pe",
    "executable"
  ],
  "user": "Dinesh D",
  "time": "Aug 11, 2017 at 5:33",
  "comments": [],
  "answers_data": [
    {
      "content": "The signature database of many Compiler and Packer detectors, and sometimes even their source-code, is freely available and you can actually read the signatures in clear-text.  \n\nGenrally, the detector performs very naive checks to detect the compiler/linker/protector/etc which based on a preset mask of bytes. The mask is combined from a sequence of bytes and wildcards that usually represents a magic number, a piece of code or a string that gives information about the file.\n\nTo understand it better let's look at different detections to Borland 3.0 by different detectors.\n\nPEiD:\n\n```\n[Borland Delphi v3.0]\nsignature = 50 6A ?? E8 ?? ?? FF FF BA ?? ?? ?? ?? 52 89 05 ?? ?? ?? ?? 89 42 04 E8 ?? ?? ?? ?? 5A 58 E8 ?? ?? ?? ?? C3 55 8B EC 33 C0\nep_only = true\n\n```\nIn order to detect Borland Delphi v3.0, PEiD is searching for this sequence of bytes in the entry point of the binary. The '??' are wildcards used to ignore the bytes in these locations because they might not be the same in different binaries.\n\nCFF Explorer:\n\n```\n<ENTRY>\n    <NAME>Borland Delphi v3.0</NAME>\n    <COMMENTS />\n    <ENTRYPOINT>506A??E8????FFFFBA????????528905????????894204E8????????5A58E8????????C3558BEC33C0</ENTRYPOINT>\n    <ENTIREPE />\n</ENTRY>\n\n```\nAlthough the format of the signature might look different then PEiD's, it is actually the same mask as in the previous example.  \n\nDetect It Easy: \n\nDetect It Easy is more complex, rich and accurate detector (in my opinion) which uses \"scripts\" to detect the type of the program. The detection algorithm of DIE is more complex then the others and doesn't use only byte-mask to detect the Compiler/Linker/Packer/etc.\nYou can see how DIE detects Borland Delphi in the following signature.  \n\nThe signature of Borland Delphi is too long so I'll show here another example of a signature, the signature of NTKrnl Protector:  \n\n```\n// DIE's signature file\n\ninit(\"protector\",\"NTkrnl Protector\");\n\nfunction detect(bShowType,bShowVersion,bShowOptions)\n{\n    if(PE.compareEP(\"68........e8\")&&(PE.nLastSection>=1))\n    {\n        if(PE.getNumberOfImports()==1)\n        {\n            if(PE.getNumberOfImportThunks(0)==2)\n            {\n                if((PE.getImportFunctionName(0,0)==\"LoadLibraryA\")&&(PE.getImportFunctionName(0,1)==\"GetProcAddress\"))\n                {\n                    if(PE.isSignatureInSectionPresent(1,\"'http://www.ntcore.com  '\"))\n                    {\n                        sVersion=\"0.1\";\n                        bDetected=1;\n                    }\n                    else if(PE.isSignatureInSectionPresent(1,\"'http://www.ntkrnl.com'\"))\n                    {\n                        sVersion=\"0.15\";\n                        bDetected=1;\n                    }\n                    /* if(bDetected)\n                    {\n                        var nFind=PE.findString(PE.section[1].FileOffset,PE.section[1].FileSize,\"Version \");\n                        if(nFind!=-1)\n                        {\n                            sVersion=PE.getString(nFind,20);\n                            var aVersion=sVersion.match(/Version ?(.*?) /);\n                            sVersion=aVersion[1];\n                        }\n                    } */\n                }\n\n            }\n        }\n    }\n    /*if(PE.compareEP(\"68........e8........c3\")&&(PE.compareEP(\"68########60e8$$$$$$$$5d4555c3\")))\n    {\n        bDetected=1;\n    } */\n\n    return result(bShowType,bShowVersion,bShowOptions);\n}\n\n```\nRemember that most of the times the bytes in the binary which represent the type of the file can be replaced without harming the functionality of the program. There are even many programs like GcPH, PseudoSigner and DotFix FakeSigner that try to fool Packer Detectors like the mentioned above. Some of the detectors might actually detect some of these anti-detectors in what seems like cat and mouse game.  \n\nHere's an example of how PEiD detects PseudoSigner for Delphi 3.0:  \n\n```\n[PseudoSigner 0.1 [Borland Delphi 3.0]\nsignature = 55 8B EC 83 C4 90 90 90 90 68 ?? ?? ?? ?? 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\nep_only = true\n\n```\n",
      "votes": "10",
      "user": "Megabeets",
      "time": "Aug 11, 2017 at 8:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "blabb",
          "text": "nice answer there  ust an addition msvc compiler version can be detected by the RICH signature embedded in the header one may  look for daniel pistellis article about this",
          "time": null
        }
      ]
    }
  ]
}