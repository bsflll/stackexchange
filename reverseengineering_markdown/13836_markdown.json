{
  "title": "Reversing Flash Files that use .loadBytes()",
  "link": "https://reverseengineering.stackexchange.com/questions/13836/reversing-flash-files-that-use-loadbytes",
  "content": "I've always been more knowledgeable about binary reversing -- x86/x64 type stuff -- so lately I decided I wanted to try reversing some flash.  \n\nUsed SoThink to get the .AS from a SWF, but the SWF is pulling data from a server. It's then de-obfuscating that data and .loadBytes'ing it.  \n\nI've made a file of the de-obfuscated data (via FileReference.save()), but it isn't a valid, stand-alone flash file.  \n\nHow do I go about decompiling this dynamically-loaded flash byte array, or at least transforming it into something I can work with?\n\nEDIT for clarity:  \n\n```\n\nvar foo = new Loader(); // Is later addChild'ed  \nvar bar:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);\n\nfoo.contentLoaderInfo.parameters.parent = this;\nfoo.contentLoaderInfo.addEventListener(Event.COMPLETE, fooFunc);\nfoo.contentLoaderInfo.addEventListener(\"securityError\", this.onSecurityError);\nfoo.loadBytes(someByteArray, bar); // 'someByteArray' is the deobfuscated stuff from server\n\n```\nIn the above situation, the 'fooFunc' is never called, but based on the comments/feedback provided, it appears as though the file has already been fully loaded once 'fooFunc' happens.  \n\nThis leads me to believe that 'someByteArray' is binary data that is loaded dynamically into the swf, but the 'someByteArray' data is not valid SWF, if that makes sense.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "547",
  "tags": [
    "actionscript",
    "flash"
  ],
  "user": "Values",
  "time": "Oct 29, 2016 at 21:45",
  "comments": [
    {
      "user": "NirIzr",
      "text": "How are those loaded bytes used after they're loaded? All loadBytes does is provide you with a binary array containing the specified data, we still need to know how that data is used afterwards.",
      "time": null
    },
    {
      "user": "Values",
      "text": "I clarified in my OP about the situation -- the loadBytes is being called as a member function of a Loader()",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "This might be a dumb question but are you sure the file loaded is intended to be a SWF file? Loader can also load a few image formats. Additionally, reading the LoaderInfo attribute might be useful. Sorry for not having anything better to work with",
      "time": null
    },
    {
      "user": "0xec",
      "text": "You can try to get the swf from memory after it is loaded. This way you wouldn't need to bother about de-obfuscation.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Turns out this was a problem on my end.  \n\nFor those curious: it turns out that the file I wanted to load was a pure .SWF file. I don't have enough experience with Flash to have immediately known a Loader().loadBytes() with a data type of \"data.BINARY\" was necessarily going to be a Flash file (as opposed to some form of assembly).  \n\nThe file was obfuscated with an encryption scheme. The key was hardcoded. Turns out I typoed the key when I went to de-obfuscate the file. 9 hours of racking my brain later, I start over from scratch, mark the correct key, and voila: my de-obfuscated file was a standard .SWF. I decompiled it normally.  \n\nThanks for those who tried to help. Unfortunate that it turned out to be a false lead.\n\n",
      "votes": "1",
      "user": "Values",
      "time": "Oct 31, 2016 at 18:58",
      "is_accepted": true,
      "comments": []
    }
  ]
}