{
  "title": "anti-debugger techniques for shared library",
  "link": "https://reverseengineering.stackexchange.com/questions/21633/anti-debugger-techniques-for-shared-library",
  "content": "I'm adding copyright protection to a demo version of a shared library.  I've seem some recommendations to add timing around license violation detection codes -- which would be debugger + patch targets -- for example RDTSC, GetTickCount(), etc.  Unfortunately this shared library doesn't have timing related codes, so adding would stand out and make them relatively easy to find (I see that IDAPro can find all all occurrences of a single instruction such as RDTSC, so I assume OllyDbg can also).  Another suggestion is to strip section headers, but that seems applicable only for an exe, not a shared library.\n\nCurrently, what is the leading edge way to either prevent a debugger from handling a shared library, or detect inside the lib that's it being debugged ?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "anti-debugging",
    "shared-object"
  ],
  "user": "Jeff Brower",
  "time": "Jul 8, 2019 at 23:37",
  "comments": [
    {
      "user": "bart1e",
      "text": "Do you have the source code of this library (so you can modify it) or only compiled version? Which operating systems is it created to run on?",
      "time": null
    },
    {
      "user": "Jeff Brower",
      "text": "@bart1e, yes I have source (mostly C, a couple of C++ files).  Linux",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I don't know whether the advice I'll give you is the \"leading edge way\", but I will describe some steps that you can perform in order to protect your software.\n\nNo, and it's important to know that and keep in mind that what you really want to do is to keep it as hard to crack as possible and dishearten potential violator from doing that. So, you want to make it so complex and obfuscated that it would require a lot of work to change anything both statically and during the runtime.\n\n```\n  bool isBeingDebugged\n  {\n    if (controlSum(address) & rand() == requiredValue)\n      return true;\n    return false;\n  }\n\n```\nAbove function not only checks for code integrity, but also modifies the global state of a program. For instance, if you use later on some string decoding function relying on rand() results, the application will likely behave differently if that function is simply replaced by NOPs.\n\nAdditional information\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jeff Brower",
          "text": "excellent, comprehensive answer.  How do I mark it as the accepted answer ?  Can you clarify one thing:  in your \"bool isBeingDebugged ... \" example, I don't understand the use of rand().  Are you saying (a) rand() is the C lib rand() and would return a sequence of values the same for every Linux and could thus be used as part of a license violation detection code, and (b) it would be difficult for someone to nop out just part of that code, because then the expected rand() value sequence would change ?  Thanks.",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "To accept an answer, you can click \"tick\" symbol next to (under?) upvote panel.",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "a) That was just an example, you can use some other function instead. Yes, I mean just rand() function that will return pseudorandom values, thus the same among program executions (for the same starting seed).",
          "time": null
        },
        {
          "user": "bart1e",
          "text": "b) No, but it can be surprising first of all, because usually debugger detecting functions will not affect the global state - just check for debugger. And potential hacker will have to be very careful not to nop some important part of code, so he has to fully understand it, which may be very time consuming and difficult.",
          "time": null
        }
      ]
    }
  ]
}