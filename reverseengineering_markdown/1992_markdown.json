{
  "title": "What is PLT/GOT?",
  "link": "https://reverseengineering.stackexchange.com/questions/1992/what-is-plt-got",
  "content": "From time to time, when disassembling x86 binaries, I stumble on\nreference to PLT and GOT, especially when calling procedures from a\ndynamic library.\n\nFor example, when running a program in gdb:\n\n```\n(gdb) info file\nSymbols from \"/home/user/hello\".\nLocal exec file: `/home/user/hello', file type elf64-x86-64.\nEntry point: 0x400400\n    0x0000000000400200 - 0x000000000040021c is .interp\n    0x000000000040021c - 0x000000000040023c is .note.ABI-tag\n    0x000000000040023c - 0x0000000000400260 is .note.gnu.build-id\n    0x0000000000400260 - 0x0000000000400284 is .hash\n    0x0000000000400288 - 0x00000000004002a4 is .gnu.hash\n    0x00000000004002a8 - 0x0000000000400308 is .dynsym\n    0x0000000000400308 - 0x0000000000400345 is .dynstr\n    0x0000000000400346 - 0x000000000040034e is .gnu.version\n    0x0000000000400350 - 0x0000000000400370 is .gnu.version_r\n    0x0000000000400370 - 0x0000000000400388 is .rela.dyn\n    0x0000000000400388 - 0x00000000004003b8 is .rela.plt\n    0x00000000004003b8 - 0x00000000004003c6 is .init\n => 0x00000000004003d0 - 0x0000000000400400 is .plt\n    0x0000000000400400 - 0x00000000004005dc is .text\n    0x00000000004005dc - 0x00000000004005e5 is .fini\n    0x00000000004005e8 - 0x00000000004005fa is .rodata\n    0x00000000004005fc - 0x0000000000400630 is .eh_frame_hdr\n    0x0000000000400630 - 0x00000000004006f4 is .eh_frame\n    0x00000000006006f8 - 0x0000000000600700 is .init_array\n    0x0000000000600700 - 0x0000000000600708 is .fini_array\n    0x0000000000600708 - 0x0000000000600710 is .jcr\n    0x0000000000600710 - 0x00000000006008f0 is .dynamic\n => 0x00000000006008f0 - 0x00000000006008f8 is .got\n => 0x00000000006008f8 - 0x0000000000600920 is .got.plt\n    0x0000000000600920 - 0x0000000000600930 is .data\n    0x0000000000600930 - 0x0000000000600938 is .bss\n\n```\nAnd, then when disassembling (puts@plt):\n\n```\n(gdb) disas foo\nDump of assembler code for function foo:\n   0x000000000040050c <+0>: push   %rbp\n   0x000000000040050d <+1>: mov    %rsp,%rbp\n   0x0000000000400510 <+4>: sub    $0x10,%rsp\n   0x0000000000400514 <+8>: mov    %edi,-0x4(%rbp)\n   0x0000000000400517 <+11>:    mov    $0x4005ec,%edi\n=> 0x000000000040051c <+16>:    callq  0x4003e0 <puts@plt>\n   0x0000000000400521 <+21>:    leaveq\n   0x0000000000400522 <+22>:    retq\nEnd of assembler dump.\n\n```\nSo, what are these GOT/PLT ?\n\n",
  "votes": "143",
  "answers": 2,
  "views": "133k",
  "tags": [
    "x86",
    "binary-analysis",
    "elf",
    "amd64"
  ],
  "user": "perror",
  "time": "May 3, 2013 at 9:07",
  "comments": [
    {
      "user": "Mellowcandle",
      "text": "I suggest reading the book Linkers and Loaders, excellent book about the subject. the manuscripts are freely available here: iecc.com/linker",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "PLT stands for Procedure Linkage Table which is, put simply, used to call external procedures/functions whose address isn't known in the time of linking, and is left to be resolved by the dynamic linker at run time.\n\nGOT stands for Global Offsets Table and is similarly used to resolve addresses. Both PLT and GOT and other relocation information is explained in greater length in this article.\n\nAlso, Ian Lance Taylor, the author of GOLD has put up an article series on his blog which is totally worth reading (twenty parts!):\n\n",
      "votes": "144",
      "user": "0xC0000022L",
      "time": "Feb 1, 2023 at 15:04",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Let me summarize the links given at https://reverseengineering.stackexchange.com/a/1993/12321 without going into serious disasembly analysis for now. \n\nWhen the Linux kernel + dynamic linker is going to run a binary with exec, it traditionally just dumped the ELF section into a known memory location specified by the linker during link time.\n\nSo, whenever your coded:\n\nthe compiler + linker could just hardcode the address into the assembly and everything would work.\n\nHowever, how can we do it when dealing with shared libraries, which must necessarily get loaded at potentially different addresses every time to avoid conflicts between two shared libraries?\n\nThe naive solution would be to keep relocation metadata on the final executable, much like the actual linker does and whenever the program is loaded, have the dynamic linker go over every single access and patch it up with the right address.\n\nHowever, this would be too time consuming, since there could be a lot of references to patch on a program, and then that program would take a long time to start running.\n\nThe solution, as usual, is to add another level of indirection: the GOT and PLT, which are two extra chunks of memory setup by the compilation system + dynamic linker.\n\nAfter the program is launched, the dynamic linker checks the address of shared libraries, and hacks up the GOT and PLT so that it will point correctly to the required shared library symbols:  \n\nNowadays, position independent executables (PIE) are the default on distros such as Ubuntu 18.04.\n\nMuch like shared libraries, these executables are compiled so that they can be placed at a random position in memory whenever they are executed, in order to make certain vulnerabilities harder to exploit.\n\nTherefore, it is not possible to hardcode absolute function and variable addresses anymore in that case. Executables must either:\n\n",
      "votes": "39",
      "user": "leocrimson",
      "time": "May 20, 2020 at 7:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}