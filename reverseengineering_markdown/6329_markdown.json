{
  "title": "Determining the number of instructions executed by a driver",
  "link": "https://reverseengineering.stackexchange.com/questions/6329/determining-the-number-of-instructions-executed-by-a-driver",
  "content": "How can I measure the number of instructions a Windows (or Linux or XNU) kernel driver/module executed after, say, an IOCTL or a SYSCALL? My only ideas are the following:\n\nAny idea or option in any of the mentioned kernels to determine the number of instructions and, preferably, the number of different instructions executed?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "454",
  "tags": [
    "kernel-mode",
    "instrumentation"
  ],
  "user": "joxeankoret",
  "time": "Sep 27, 2014 at 16:27",
  "comments": [
    {
      "user": "blabb",
      "text": "if you haven't yet done give wt (watch and trace ) command a spin in windbg it does this counting stuff in the statistics it provides at the end of tracing a complete function may be you can leverage it with a custom windbg extension",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'd recommend using Bochs. It'll allow you to write code to count the number of instructions (and/or number of different instructions) executed between a SYSCALL/SYSRET, SYSENTER/SYSEXIT, etc.\n\n",
      "votes": "4",
      "user": "Jason Geffner",
      "time": "Sep 27, 2014 at 16:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "joxeankoret",
          "text": "Yes, I think it's the best one can one as of today. Slow as hell, but probed to work. Thanks!",
          "time": null
        }
      ]
    },
    {
      "content": "You can also give a try to pin. There is even an example in the documentation explaining exactly what you want to do.\n\n",
      "votes": "-2",
      "user": "jvoisin",
      "time": "Oct 4, 2014 at 11:25",
      "is_accepted": false,
      "comments": [
        {
          "user": "joxeankoret",
          "text": "Sure, tell me how to use Intel PIN, which is a completely user-land toolkit, in Kernel.",
          "time": null
        }
      ]
    }
  ]
}