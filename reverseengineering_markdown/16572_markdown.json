{
  "title": "Why function names are visible in a decompiled iOS app?",
  "link": "https://reverseengineering.stackexchange.com/questions/16572/why-function-names-are-visible-in-a-decompiled-ios-app",
  "content": "While decompiling an iOS app, all function names and object names are visible. Why ?\n\nMy guess is that during the build, function names are kept by the compilator to allow the linker to do its job. But then once the linker has finished, why not removing the function names ?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "443",
  "tags": [
    "decompilation",
    "ios",
    "functions"
  ],
  "user": "NoonanRosenblum",
  "time": "Oct 17, 2017 at 10:10",
  "comments": [],
  "answers_data": [
    {
      "content": "Short answer: noone bothered to implement something like this. /bin/strip was developed when memory was a precious resource and it increased the challenge of debugging.\n\nMy best guess why:\nIn ObjectiveC (and swift) functions are called by objects sending messages to each other in a kind of dynamic dispatch.\n\nThat means when you call a method on an object, you send identifiers of the object you want to call the method on and the method itself to the dispatch function (e.g. objc_msgsend). My best guess is that stripping symbols complicates that process.\n\nReferences: https://blog.zynamics.com/2010/04/27/objective-c-reversing-i/\n\n",
      "votes": "1",
      "user": "Nordwald",
      "time": "Oct 19, 2017 at 9:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}