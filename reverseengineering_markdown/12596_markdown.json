{
  "title": "How to convert this hex into an instruction?",
  "link": "https://reverseengineering.stackexchange.com/questions/12596/how-to-convert-this-hex-into-an-instruction",
  "content": "I have this little-endian thumb hex code: 44 79 (79 44) and I want to convert it into an instruction. How do I go about doing so? Compiling a program then decompiling it to get the instruction, is that possible?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "478",
  "tags": [
    "ida"
  ],
  "user": "Anthony",
  "time": "May 4, 2016 at 22:54",
  "comments": [],
  "answers_data": [
    {
      "content": "The Online Disassembler works well for small sequences of instructions.\n\n44 79\n\n```\n.data:00000000  7944    ldrb    r4, [r0, #5]\n\n```\n79 44\n\n```\n.data:00000000  4479    add     r1, pc\n\n```\n",
      "votes": "3",
      "user": "josh poley",
      "time": "May 4, 2016 at 23:38",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I'd probably use capstone. An example is below:\n\n```\n#!/usr/bin/env python\nfrom capstone import *\n\nCODE = b\"\\x44\\x79\"\n\nmd = Cs(CS_ARCH_ARM, CS_MODE_THUMB|CS_MODE_LITTLE_ENDIAN)\nfor (address, size, mnemonic, op_str) in md.disasm_lite(CODE, 0x1000):\n    print(\"0x%x:\\t%s\\t%s\" %(address, mnemonic, op_str))\n\n```\n0x1000: ldrb    r4, [r0, #5]\n\n",
      "votes": "1",
      "user": "broadway",
      "time": "May 4, 2016 at 23:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "Anthony",
          "text": "will is cause a problem if I change 0x1000 to 0x0000?",
          "time": null
        }
      ]
    }
  ]
}