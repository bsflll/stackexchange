{
  "title": "Moving xmm0 onto the stack results in a access violation exception",
  "link": "https://reverseengineering.stackexchange.com/questions/13750/moving-xmm0-onto-the-stack-results-in-a-access-violation-exception",
  "content": "Reversing an application that crashes at the last line of the following instructions:\n\n```\nsub rsp,68\nmov qword ptr ss:[rsp+B0],rcx\nmov qword ptr ss:[rsp+B8],rdx\nmov qword ptr ss:[rsp+C0],r8\nmov qword ptr ss:[rsp+C8],r9\nmovdqa xmmword ptr ss:[rsp+20],xmm0\n\n```\nI'm new to reverse engineering and trying to figure out how it is possible that this is crashing. \n\nThe memory protection of rsp+20 should be the same as rsp+B0 for example ...\n\nX64DBG: EXCEPTION_ACCESS_VIOLATION\n\nEdit: all numbers in the instructions are in hex! (68, 20, ...)\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "stack",
    "exception"
  ],
  "user": "Whosdatdev",
  "time": "Oct 18, 2016 at 12:13",
  "comments": [],
  "answers_data": [
    {
      "content": "According to definition of the assembly command movdqathe memory operand should be aligned by 16 (see Intel SDM at Vol. 2B 4-63):\n\nIf 20 is not hexadecimal here, it would probably be the cause.\nIn addition if 20 here is hexadecimal, rsp still may not be aligned as needed.\n\n",
      "votes": "3",
      "user": "w s",
      "time": "Oct 18, 2016 at 13:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "Whosdatdev",
          "text": "Thanks, that is correct. The 20 is hexdecimal though, which makes it aligned ...",
          "time": null
        },
        {
          "user": "w s",
          "text": "The question is what was the initial value of rsp. 0x20 is aligned by 16, but (rsp + 0x20) may be not aligned.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "Logically if +b0,b8 etc doesnt raise alignment issues then 0x20 shouldn't too imho",
          "time": null
        },
        {
          "user": "w s",
          "text": "Logically b0 and b8 should be aligned by 8 and not by 16",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "it's the sub rsp,68 that is causing a stack misalignment.  If you must have an aligned stack and can't predict its value beforehand, you'll need to store rsp somewhere other than on the stack itself, and then \"and rsp,-0x10\" as the next instruction, before any other register stores.",
          "time": null
        }
      ]
    }
  ]
}