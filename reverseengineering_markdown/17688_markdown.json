{
  "title": "How to patch a binary file and save it? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/17688/how-to-patch-a-binary-file-and-save-it",
  "content": "I have an ARM executable binary file and I want to patch it at precise virtual addresses. Is there any safe (and automated) way to perform this task ?\n\nAny scripts or tools are welcome!\n\n",
  "votes": "0",
  "answers": 1,
  "views": "4k",
  "tags": [
    "disassembly",
    "patching",
    "binary-editing"
  ],
  "user": "ida",
  "time": "7 years ago",
  "comments": [
    {
      "user": "user23611",
      "text": "You need to know information about the .text because the executable code is classicaly store in this section if the binary is not obsucated or custom compiled. I think you need to learn about what is a binary file and how it is loaded in memory.",
      "time": null
    },
    {
      "user": "ida",
      "text": "I talking about embedded my binary not run on linux/windows",
      "time": null
    },
    {
      "user": "user23611",
      "text": "But there is no OS in your  embedded system? Expose the system entirely? Maybe you are working with a firmware, if it document, learn about what is the file format of the binary and how it is loaded in memory, the basic !! If there is not doc, it's more hard and time consuming, full reverse",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you are on Linux a simple group of commands as readelf, printf() and dd can do the job.\n\nFor example, if you have the binary MyBin in ELF format and you want to patch the following condition located at 0x418966 in memory :\n\n```\njnz     loc_418706 ; 0x418966: 0f 85 9a fd ff ff\n\n```\nFirstly you must to find information about the .text section of the binary file:\n\n```\n$ readelf --wide -S MyBin | grep '.text\\|Name\\|Off'\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [13] .text             PROGBITS        0000000000414670 014670 0dfa82 00  AX  0   0 16\n\n```\nHere:\n\nThen you must compute the instruction offset in the binary file relative to the .text section:\n\n```\n0x418966 - 0x414670 = 0x0042f6\n0x014670 + 0x0042f6 = 0x018966\n\n```\nOr with a shell one-liner:\n\n```\n$ text_addr=0000000000414670; inst_addr=418966; text_off=014670; \\\n  python -c 'print(0x'$inst_addr' - 0x'$text_addr' + 0x'$text_off')'\n100710\n\n```\nHere the instruction to patch is located at 0x18966 in the binary file.\n\nFinally, I patch the binary with a nop and a near jump (jmp e9 [cd]).\n\n```\nprintf '\\x90\\xe9' | dd of=MyBin bs=1 seek=100710 count=3 conv=notrunc\n\n```\n",
      "votes": "3",
      "user": "perror",
      "time": "Feb 18, 2020 at 8:39",
      "is_accepted": false,
      "comments": [
        {
          "user": "ida",
          "text": "why do I need the  .text section?  do you know tool for windows?",
          "time": null
        }
      ]
    }
  ]
}