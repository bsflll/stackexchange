{
  "title": "How to find the index of static ilbrary functions in the PLT of the binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/21163/how-to-find-the-index-of-static-ilbrary-functions-in-the-plt-of-the-binary",
  "content": "So right now I'm trying to resolve function calls and their names in my reversing tool\n\nthe problem I'm having is that library functions such as printf and fwrite and such do not have a corresponding address in symbol table unlike functions inside the actual program which do contain a virtual address in the symbol table and therefore i can resolve their name when they are called statically\n\nbasically i want to resolve the name of functions even static library functions like printf just like how readelf does (i tried readelf and indeed it does resolve the name of printf even tho it says the address value of printf inside symbol table is 0 unlike other functions so not sure how does it realize the offset of printf inside plt)\n\nso i have these questions :\n\n",
  "votes": "4",
  "answers": 1,
  "views": "372",
  "tags": [
    "binary-analysis",
    "x86",
    "c",
    "elf",
    "binary"
  ],
  "user": "Max",
  "time": "Apr 16, 2019 at 10:55",
  "comments": [],
  "answers_data": [
    {
      "content": "When a function is present in PLT (Procedure Linkage Table) section, that means its address isn't known at compilation time and has to be resolved by dynamic linker at the runtime. However, just to know that a certain function is called at some point in the program you may use a tool like objdump, which will show you the function name followed by @plt like so:\n\n```\ncall   720 <printf@plt>\n\n```\nBecause they are not statically linked (see first sentence of the answer for the first question). They don't have fixed addresses, since these will be resolved during the runtime.\n\nIt would be the waste of space if every executable contained copy of the same library. The .h files are included and they often contain just the declarations. So you don't include compiled definitions of functions declared in .h - just the prototypes. The linker is responsible for linking the program with the libraries used in it. They still may be linked either statically or dynamically and since dynamic linking avoids copying entire libraries' code into every single executable, it's often used instead of static one.\n\nSee this question for further reference.\n\n",
      "votes": "1",
      "user": "bart1e",
      "time": "Jun 8, 2019 at 15:13",
      "is_accepted": true,
      "comments": []
    }
  ]
}