{
  "title": "How to read NSCR1000 data files?",
  "link": "https://reverseengineering.stackexchange.com/questions/9426/how-to-read-nscr1000-data-files",
  "content": "Terminal app on OSX stores the information about its windows and content in its state files in Library/Saved Application State/com.apple.Terminal.savedState.\n\nI did the backup of the file before the crash to be able to restore my data, but I don't know how to read it now (as Terminal refuses to use it). It starts with: NSCR1000 as below:\n\n```\n$ hexdump -Cn8 ~/Library/Saved\\ Application\\ State/com.apple.Terminal.savedState/data.data\n00000000  4e 53 43 52 31 30 30 30                           |NSCR1000|\n\n```\nIt's used by windows.plist file which can be decoded by:\n\n```\nplutil -convert xml1 -o windows.plist windows.plist\n\n```\nWhat kind of method I can use to read that .data file? Or where do I start?\n\n```\n$ strings data.data | head -10\nNSCR1000\np+5v\n0>[t\nkJX6X\n@NSCR1000\n\n```\nThis file is automatically generated by Terminal app when you start and start typing something, so the terminal data is stored there.\n\n",
  "votes": "14",
  "answers": 1,
  "views": "5k",
  "tags": [
    "file-format",
    "osx",
    "binary-format"
  ],
  "user": "kenorb",
  "time": "Jul 23, 2015 at 15:51",
  "comments": [
    {
      "user": "N3rdB0mber",
      "text": "Can anyone elaborate on exact steps to take? I believe i've stored/copied the needed files, but can't make sense of this seemingly easy statement: \"Quit Terminal, copy the contents of this folder from your backup, then open Terminal.\" from this SO: apple.stackexchange.com/questions/326108/â€¦ Files are copied, where do i put em? I'm using Zsh via terminal app..",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is encrypted with AES so you will need the keys from windows.plist to decode.\n\nThe format is (all stored in big-endian):\n\n```\noffset  value\n0-3     magic ('NSCR' for PersistentUIRecord)\n4-7     version (either '1000' or '0006')\n8-11    NSWindowID (used to lookup 128-bit AES key stored in windows.plist)\n12-15   record length (including from 0 to xxx)\n16-xxx  encrypted binary plist data\n\n```\nThere may be multiple records stored in a file consecutively.\n\nSimilar approach AppKit framework is using to decipher the data.data file. The most relevant code base to look at is the +[NSPersistentUIRecord parseOneRecordFromReadBlock:withDecryptionKeys:] block which parses each record in the data.data file.\n\n",
      "votes": "12",
      "user": "kenorb",
      "time": "Feb 16, 2016 at 12:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Stanislav Pankevich",
          "text": "Thanks for the answer! One question I have: how did you learn those details?",
          "time": null
        },
        {
          "user": "cimarron",
          "text": "I just poked around the AppKit framework reversing how it deciphered the data.data file. The most relevant code base to look at is the                                              +[NSPersistentUIRecord parseOneRecordFromReadBlock:withDecryptionKeys:] block which parses  each record in the data.data file.",
          "time": null
        },
        {
          "user": "Stanislav Pankevich",
          "text": "That sounds great like it was so easy thing to do! Awesome inspiration to learn more about RE. Thanks again for answer.",
          "time": null
        },
        {
          "user": "Stanislav Pankevich",
          "text": "I am not sure how kind you are to be asked but that would be truly great if you could share your mastery in a blog post. I highly encourage you to do that as it would be very interesting reading for everyone especially if you could explain your technique of finding the right answer in a simple way. So many developers could benefit from your experience, please do!",
          "time": null
        }
      ]
    }
  ]
}