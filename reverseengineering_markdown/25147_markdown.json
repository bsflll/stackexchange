{
  "title": "dereferencing structure members",
  "link": "https://reverseengineering.stackexchange.com/questions/25147/dereferencing-structure-members",
  "content": "I am reading a book on reversing and I am curious about one of the assembly snippet i have read in it.\n\nThere is a simple disassembly of the function RtlNumberGenericTableElements and it looks like this:\n\n```\npush ebp\nmov ebp, esp\nmov eax, dword ptr [ebp+8]\nmov eax, dword ptr [eax+14]\npop ebp\nret 4\n\n```\nAnd it occured to me, say there is a member of a structure that is a pointer to some other structure. How would I go about dereferencing that member?\n\n```\nstruct example {\n  int member1;\n  *object member2;\n};\n\n```\nWould I be dereferencing member 2 like so (pointer to struct comes as first param):\n\n```\nmov eax, [ebp+8]\nmov eax, dword ptr [eax]\nmov eax, [eax+8] ; this would get me the pointer to member2???\n\n```\nany input appreciated\n\nEDIT:\n\nI see, your explanation was understandable, thank you, I appreciate it.\n\nI have one more question that popped up from my mind. Say in your example, member 2 is a pointer to an int, then \n\n```\nmov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2 (this is a pointer to an int)\n\n```\nSay i would like to get the value of member to into ecx i would carry on like this:\n\n```\nmov eax, [eax]\nmov ecx, [eax]\n\n```\nSo the whole thing would read like so:\n\n```\nmov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2 (this is a pointer to an int)\nmov eax, [eax]     ; dereferenfce the pointer that is pointing to member2\nmov ecx, [eax]     ; dereference member2 itself that is a pointer to an int\n\n```\nIs this correct?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "217",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "geo10",
  "time": "May 29, 2020 at 13:30",
  "comments": [],
  "answers_data": [
    {
      "content": "After compilation, a pointer to a C struct will be pointing to its first element. In your example, [ebp + 8] is a pointer to member1 and you can access a pointer to member2 like this: \n\n```\nmov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2\n\n```\nWhen in any doubt, you can always write a simple program, compile it and check the resulting assembler code. In your case, you could write something like this:\n\n```\n#include <stdio.h>\n\nstruct example\n{\n    int member1;\n    void* member2;\n};\n\n\nvoid initialiseStruct(struct example* e)\n{\n    e->member1 = 1;\n    e->member2 = NULL;\n}\n\nint main()\n{\n    struct example e;\n    initialiseStruct(&e);\n    return 0;\n}\n\n```\nAnd then compile it and run objdump -dM intel FILENAME to get a snippet like the following one:\n\n```\n0000054d <initialiseStruct>:\n 54d:   55                      push   ebp\n 54e:   89 e5                   mov    ebp,esp\n 550:   e8 6b 00 00 00          call   5c0 <__x86.get_pc_thunk.ax>\n 555:   05 83 1a 00 00          add    eax,0x1a83\n 55a:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 55d:   c7 00 01 00 00 00       mov    DWORD PTR [eax],0x1 ; e->member1 = 1\n 563:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 566:   c7 40 04 00 00 00 00    mov    DWORD PTR [eax+0x4],0x0 ; e->member2 = NULL\n 56d:   90                      nop\n 56e:   5d                      pop    ebp\n 56f:   c3                      ret  \n\n```\nRegarding your second question: you should view [] in assembly like * in C in case of mov. \n\nIf member2 points to int, you can access this integer this way (I've added C equivalents next to each assembly instruction):\n\n```\nmov eax, [ebp + 8] ; eax = e - remember, in my example e is a pointer\nmov eax, [eax + 4] ; eax = *(e + 4) = e->member2, so now eax contains the memory address at e->member2\nmov ecx, [eax] ; ecx = *(e->member2) - ecx contains the integer value\n\n```\n",
      "votes": "0",
      "user": "bart1e",
      "time": "May 29, 2020 at 13:16",
      "is_accepted": true,
      "comments": []
    }
  ]
}