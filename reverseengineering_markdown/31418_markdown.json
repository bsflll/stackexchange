{
  "title": "How to get the address of a glibc private symbol at runtime programmatically?",
  "link": "https://reverseengineering.stackexchange.com/questions/31418/how-to-get-the-address-of-a-glibc-private-symbol-at-runtime-programmatically",
  "content": "I am trying to get the address of a private function in GLIBC.\nFor instance - the function __run_prefork_handlers().\n\nI have done it with gdb, using info symbol __run_prefork_handlers and info address __run_prefork_handlers\nAnd I get the relevant information (relevant so) and address of the function.\n\nI tried to get the address of this function programmatically using dlsym.\n\nSince glibc is loaded by runtime loader at startup I call dlsym(RTLD_GLOBAL, \"__run_prefork_handlers\") without first calling dlopen.\n\nI get a NULL pointer and perror returns:\n\nRunning the same code for symbol of an exported function such as fork works well.\n\nWhich steps should I take to get this information within a program?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "234",
  "tags": [
    "gdb",
    "symbols",
    "libc"
  ],
  "user": "joepol",
  "time": "Jan 16, 2023 at 20:51",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Do nm, objdump and/or readelf show that symbol in one of the symbol tables? If not, the debugger has probably used debug symbols to get that address. In theory, though, that's something you could also do: parse the debug data.",
      "time": null
    }
  ],
  "answers_data": []
}