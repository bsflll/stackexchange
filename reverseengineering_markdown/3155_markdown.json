{
  "title": "Extracting files from .data and .toc files",
  "link": "https://reverseengineering.stackexchange.com/questions/3155/extracting-files-from-data-and-toc-files",
  "content": "the .toc is a table of contents files that always starts with the header 1rrs.\nIt also contains directory and file paths at offsets that will relate to the data file.\n\nWhere should I start trying to use the .toc to extract from the .data file?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "file-format"
  ],
  "user": "Impossibear",
  "time": "Dec 11, 2013 at 15:39",
  "comments": [
    {
      "user": "Ange",
      "text": "Please add more details: don't just provide files with little details and expect us to do your work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Full Disclosure is always appreciated. This seems to be a (\"the\"?) data file for FASA Studio's \"Shadowrun\". Anyway, the data file contains enough recognizable items to get a good start (PNGs, Unicode text). Data seems to be aligned on 16 bytes, padded with what seems to be random trash.\n\nPNG images are a good start; you can extract them 'manually' (I used 0xED) and see if they are well-formed. The few I tried were, and the all-but-one last data block should be a PNG image, according to the toc file. I located it at 0x82A72D0, with a length of 0x2E231 bytes.\n\n\n\nThen I checked the data around the last PNG file name in core.toc for these bytes. Bingo - not a huge challenge.\n\nThe initial part of the toc file is unknown but may be a fast look-up table. I didn't cross-reference this any further with what follows. After that, the following data can be found per each file:\n\n```\n4 bytes   length (little endian)\n4 bytes   offset\n8 bytes   unknown (perhaps checksum, perhaps file data/time, who knows?)\n3 bytes   name length -- possibly only the first 2 though, 3 bytes is rare #\nx bytes   name\n\n```\nRight after the block of file names more stuff appears, I couldn't think of a use for it. You could extract all file names, count them, and see if this is relevant. It seems it isn't as the file name block contains everything you were looking for.\n\n# Ah-- for the first file, this name length is 0x0E 0x00 0x01. Seems the third byte indicates something else, then. I found 2 so far with a 0x01, both are 'pathless' files.\n\n",
      "votes": "5",
      "user": "Jongware",
      "time": "Dec 11, 2013 at 18:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "\"0xED\" is the name of the hex editor, not a hex constant :) Stupid me... :)",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "No worries mate. Thanks for the grammah-editing!",
          "time": null
        }
      ]
    }
  ]
}