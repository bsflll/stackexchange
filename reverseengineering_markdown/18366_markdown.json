{
  "title": "Why would MSVC pass a constant \"2\" for an unused this parameter?",
  "link": "https://reverseengineering.stackexchange.com/questions/18366/why-would-msvc-pass-a-constant-2-for-an-unused-this-parameter",
  "content": "Hex-Rays decompiled (with the assistance of pdb symbols) a piece of code as such: XPerfAddIn::CFramesInfoSource::MatchEventDescriptor( (XPerfAddIn::CFramesInfoSource *)2\n\nAnd by my following of the assembly, it is correct:\n\n```\nxor     r15d, r15d\ntest    rax, rax\njz      loc_1800224C7\nlea     r13, [rax+20h]\ncmp     [r13+0], r15\njz      loc_1800224C7\nlea     r12, [r14+28h]\nmov     rax, [rsp+260h+a3]\nmov     rcx, [rax]\ncmp     rcx, cs:qword_180044990\njnz     loc_1800224C7\nmov     rax, [rax+8]\ncmp     rax, cs:qword_180044998\njnz     loc_1800224C7\nlea     ecx, [r15+2]\nmov     r9d, ecx        ; a4\nlea     r8, MSHTML_CDOC_ONPAINT_START_V1 ; a3\nmov     rdx, r12        ; a2\ncall    ?MatchEventDescriptor@CFramesInfoSource@XPerfAddIn\n\n```\nMatchEventDescriptor does not use the 'this' parameter in rcx, so it doesn't really matter what gets passed in. So why would the compiler emit an extra lea instruction to pass in a constant 2 instead of just leaving it 0... or passing in the actual, correct this value?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "135",
  "tags": [
    "ida",
    "disassembly",
    "msvc"
  ],
  "user": "Zhentar",
  "time": "May 26, 2018 at 15:52",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "add the call to the disassembly",
      "time": null
    },
    {
      "user": "Zhentar",
      "text": "@IgorSkochinsky edited it in",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Apparently ecx is just used as a temporary for calculating the value 2 which is copied to r9d and is probably used later in the function. \n\nWhen  the decompiler does not have reliable information about function prototype, it has to resort to heuristics, or guessing.  Since the demangled function name looks like a C++ method, it assumes that it’s a method of a class XPerfAddIn::CFramesInfoSource and since it’s not marked static, it probably takes in the class instance in rcx as common for the thiscall calling convention, thus the value in rcx (ecx) is assumed to be the this pointer. \n\nIf you analyzed the function and deduced that it does not actually use rcx/ecx, you can edit the function prototype, remove the this argument and __thiscall calling convention to get “proper” decompilation. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "May 26, 2018 at 16:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "Zhentar",
          "text": "This is x86-64, so it's it's expecting the first argument to be in rcx whether or not it's this. I tried manually defining the registers ( bool __fastcall XPerfAddIn__CFramesInfoSource__MatchEventDescriptor(_EVENT_DESCRIPTOR *a2<rdx>, _EVENT_DESCRIPTOR *a3<r8>, EDVersionCheckType a4<r9>)) , but that just gave me the error \"Argument location rdx is not allowed here\"",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "explicit argument locations only work for __usercall",
          "time": null
        }
      ]
    }
  ]
}