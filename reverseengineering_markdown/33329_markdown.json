{
  "title": "Find all calls of a given function with Ghidra",
  "link": "https://reverseengineering.stackexchange.com/questions/33329/find-all-calls-of-a-given-function-with-ghidra",
  "content": "I would like to know how to find all the explicit calls to a given function with Ghidra.\n\nFor example, I am looking at the assembly of a function and I would like to list all the calls referring to it in the current binary. Is there a way to do this ?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "124",
  "tags": [
    "binary-analysis",
    "ghidra"
  ],
  "user": "perror",
  "time": "Dec 6, 2024 at 12:30",
  "comments": [],
  "answers_data": [
    {
      "content": "When you are already in the disassembly view (CodeBrowser with the listing), it is quite simple:\n\n```\n                             **************************************************************\n                             *                          FUNCTION                          *\n                             **************************************************************\n                             void __stdcall uartSend(char data)\n             void              <VOID>         <RETURN>\n             char              r0:1           data\n             uint32_t          HASH:13fc2bc   lsr\n                             uartSend                                        XREF[4]:     uartSendLine:1fff14c0(c), \n                                                                                          uartSendLine:1fff14ec(c), \n                                                                                          uartSendLine:1fff14f2(c), \n                                                                                          uartReceiveLine:1fff155a(c)  \n        1fff147e 3d 49           ldr        r1,[->Peripherals::UART]                         = 40008000\n                             wait for U0THR is empty\n                             LAB_1fff1480                                    XREF[1]:     1fff1484(j)  \n        1fff1480 4a 69           ldr        r2,[r1,#offset UART.LSR]\n        1fff1482 92 06           lsls       r2,r2,#26\n        1fff1484 fc d5           bpl        LAB_1fff1480\n        1fff1486 08 60           str        data,[r1,#0x0]=>Peripherals::UART\n        1fff1488 70 47           bx         lr\n\n```\nBeginning in the line of the function's label you have the list of cross-references on the right. No need to click or navigate a menu at all.\n\nYou can double-click such a reference to jump to the location. BTW, Alt-Left and Alt-Right are handy keyboard shortcuts to jump back and forth through visited locations.\n\nFor a even simpler navigation double-click on XREF[4] to open a window that lists all references. By (single-)clicking on an entry of this list, the CodeBrowser will jump to that location.\n\n",
      "votes": "1",
      "user": "the busybee",
      "time": "Dec 10, 2024 at 15:48",
      "is_accepted": true,
      "comments": [
        {
          "user": "perror",
          "text": "It was in front of me since the beginning and I did not realized. Thanks for the tip !",
          "time": null
        }
      ]
    },
    {
      "content": "Found it... it was quite simple in fact.\n\nOn the decompiler view (or the assembly view), right click on the name of the function. Then choose \"References\" and \"Find References to ...\".\n\nA window will pop up and display all the occurrences found in the binary.\n\n\n\n",
      "votes": "0",
      "user": "perror",
      "time": "Dec 6, 2024 at 12:35",
      "is_accepted": false,
      "comments": []
    }
  ]
}