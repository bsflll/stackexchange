{
  "title": "Run ltrace to avoid detection (on a different PID?)",
  "link": "https://reverseengineering.stackexchange.com/questions/27229/run-ltrace-to-avoid-detection-on-a-different-pid",
  "content": "I am trying to run ltrace on this file:\n\nWhen I pop it open in ghidra, and view the decompiled c, I can see that it changes the program flow to somewhere I don't want to be when ltrace is running.\n\n```\n  attached_to_ptrace = ptrace(PTRACE_TRACEME,0,1,0);\n  if (attached_to_ptrace == -1) {\n    puts(\"I am not your property!\");\n    exit_code = 1;\n  }\n  else {\n    // execute main loop\n  }\n\n```\nLooking at the man page for ptrace, I see:\n\n```\nlong ptrace(enum __ptrace_request request, pid_t pid,\n                   void *addr, void *data);\n\n```\nMeaning that if the program? or ltrace? were to run with a different PID, I would be able to successfully run my program using ltrace.\n\nThis is the current output I get when running the program with ltrace:\n\n```\n~/ctf/cyberstart/level13/04 [master|…1] $ ltrace ./launcher\n__libc_start_main(0x565a86f0, 1, 0xff837be4, 0x565a8970 <unfinished ...>\nptrace(0, 0, 1, 0)                                                     = 0xffffffff\nputs(\"I am not your property!\"I am not your property!\n)                                        = 24\n+++ exited (status 1) +++\n\n```\nWithout ltrace:\n\n```\n~/ctf/cyberstart/level13/04 [master|…1] $ ./launcher\n\nEnter the password:\npassword\nAway now, you anklebiter!\n\n[1]+  Stopped                 ./launcher\n\n```\n(This is my second buffer overflow CTF challenge, where the main goal is to mess with this block of code:)\n\n```\n  int iVar1;\n  char local_1e [10];\n  int local_14;\n  int local_10;\n  \n  local_10 = 0;\n  puts(\"  \nEnter the password: \");\n  gets(local_1e);\n  iVar1 = strcmp(local_1e,\"PAssw0rd\");\n  if (iVar1 == 0) {\n    puts(\"Well done! Unfortunately, you have to try harder.\");\n    local_10 = 0;\n  }\n  else {\n    puts(\"Away now, you anklebiter!\");\n  }\n  if (local_10 != 0) {\n    printf(\"Unexpected error condition. Control char is %d  \n\",local_10);\n    local_14 = param_2 * local_10;\n    (*(code *)(local_14 + param_1))();\n  }\n\n```\nHow can I run ltrace in a way such that it isn't detected?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "476",
  "tags": [
    "debugging",
    "buffer-overflow"
  ],
  "user": "Peter Stenger",
  "time": "Mar 13, 2021 at 1:45",
  "comments": [],
  "answers_data": [
    {
      "content": "You can modify the binary via Ghidra in the following way:\n\nIf you have problems with the exported binary, try this script: https://github.com/schlafwandler/ghidra_SavePatch\n\n```\nlong ptrace(int request, int pid, void *addr, void *data) {\n    return 0;\n}\n\n```\nAnother option is to use Qiling framework and hook the function/syscall and always return any other value than \"-1\", but that seems a bit overkill.\n\n",
      "votes": "2",
      "user": "zi0Black",
      "time": "Nov 13, 2021 at 8:09",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "You can patch the CALL to ptrace with NOPs or use LD_PRELOAD to inject your own fake ptrace code which does nothing but return a value other than -1.\n\n",
      "votes": "1",
      "user": "julian",
      "time": "Nov 12, 2021 at 19:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}