{
  "title": "at the rpcrt4!NdrClientCall2 function - how does it know which pipe to use in order to transfer data to another process?",
  "link": "https://reverseengineering.stackexchange.com/questions/8116/at-the-rpcrt4ndrclientcall2-function-how-does-it-know-which-pipe-to-use-in-or",
  "content": "Hey i have a very time consuming problem, and i thought i might find someone here with better experience than mine that could help me out.\n\nI am reverse-engineering an application which at some point uses the NdrClientCall2 api to use a remote procedure of some other service (which i dont know which one that is)\n\nNow before i hear comments about not trying anything my self\nThere are some really good applications to accomplish what i want like NtTrace, Strace and roughly oSpy can achieve the same result aswell eventually.\nBut my application has some really hard anti-debugging techniques which force me to do everything manually.\n\nWhat eventually i want to achieve is know what procedure is being called and on what service \\ process.\n\nHere is the NdrClientCall2 Decleration by MSDN\n\n```\nCLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall2(\n  __in          PMIDL_STUB_DESC pStubDescriptor,\n  __in          PFORMAT_STRING pFormat,\n  __in_out       ...\n);\n\n```\nso it uses the PMIDL_STUB_DESC struct which its definition is as the following:\n\n```\ntypedef struct _MIDL_STUB_DESC {\n  void                                 *RpcInterfaceInformation;\n  void*                                (__RPC_API *pfnAllocate)(size_t);\n  void                                 (__RPC_API *pfnFree)(void*);\n  union {\n    handle_t              *pAutoHandle;\n    handle_t              *pPrimitiveHandle;\n    PGENERIC_BINDING_INFO pGenericBindingInfo;\n  } IMPLICIT_HANDLE_INFO;\n  const NDR_RUNDOWN                    *apfnNdrRundownRoutines;\n  const GENERIC_BINDING_ROUTINE_PAIR   *aGenericBindingRoutinePairs;\n  const EXPR_EVAL                      *apfnExprEval;\n  const XMIT_ROUTINE_QUINTUPLE         *aXmitQuintuple;\n  const unsigned char                  *pFormatTypes;\n  int                                  fCheckBounds;\n  unsigned long                        Version;\n  MALLOC_FREE_STRUCT                   *pMallocFreeStruct;\n  long                                 MIDLVersion;\n  const COMM_FAULT_OFFSETS             *CommFaultOffsets;\n  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;\n  const NDR_NOTIFY_ROUTINE             *NotifyRoutineTable;\n  ULONG_PTR                            mFlags;\n  const NDR_CS_ROUTINES                *CsRoutineTables;\n  void                                 *Reserved4;\n  ULONG_PTR                            Reserved5;\n} MIDL_STUB_DESC, *PMIDL_STUB_DESC;\n\n```\nAnd here is how it looks like in windbg, when i put a breakpoint in the NdrClientCall2 function\n\n```\n0:006> .echo \"Arguments:\"; dds esp+4 L5\nArguments:\n06d9ece4  74cc2158 SspiCli!sspirpc_StubDesc\n06d9ece8  74cc2322 SspiCli!sspirpc__MIDL_ProcFormatString+0x17a\n06d9ecec  06d9ed00\n06d9ecf0  91640000\n06d9ecf4  91640000\n0:006> .echo \"PMIDL_STUB_DESC:\"; dds poi(esp+4) L20\nPMIDL_STUB_DESC:\n74cc2158  74cc2690 SspiCli!sspirpc_ServerInfo+0x24\n74cc215c  74cca1cd SspiCli!MIDL_user_allocate\n74cc2160  74cca1e6 SspiCli!MIDL_user_free\n74cc2164  74ce0590 SspiCli!SecpCheckSignatureRoutineRefCount+0x4\n74cc2168  00000000\n74cc216c  00000000\n74cc2170  00000000\n74cc2174  00000000\n74cc2178  74cc1c52 SspiCli!sspirpc__MIDL_TypeFormatString+0x2\n74cc217c  00000001\n74cc2180  00060001\n74cc2184  00000000\n74cc2188  0700022b\n74cc218c  00000000\n74cc2190  00000000\n74cc2194  00000000\n74cc2198  00000001\n74cc219c  00000000\n74cc21a0  00000000\n74cc21a4  00000000\n74cc21a8  48000000\n74cc21ac  00000000\n74cc21b0  001c0000\n74cc21b4  00000032\n74cc21b8  00780008\n74cc21bc  41080646\n74cc21c0  00000000\n74cc21c4  000b0000\n74cc21c8  00020004\n74cc21cc  00080048\n74cc21d0  21500008\n74cc21d4  0008000c\n0:006> .echo \"PFORMAT_STRING:\"; db poi(esp+8)\nPFORMAT_STRING:\n74cc2322  00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00  .H......L.0@....\n74cc2332  ec 00 bc 00 47 13 08 47-01 00 01 00 00 00 08 00  ....G..G........\n74cc2342  00 00 14 01 0a 01 04 00-6e 00 58 01 08 00 08 00  ........n.X.....\n74cc2352  0b 00 0c 00 20 01 0a 01-10 00 f6 00 0a 01 14 00  .... ...........\n74cc2362  f6 00 48 00 18 00 08 00-48 00 1c 00 08 00 0b 00  ..H.....H.......\n74cc2372  20 00 2c 01 0b 01 24 00-a2 01 0b 00 28 00 b8 01   .,...$.....(...\n74cc2382  13 41 2c 00 a2 01 13 20-30 00 f8 01 13 41 34 00  .A,.... 0....A4.\n74cc2392  60 01 12 41 38 00 f6 00-50 21 3c 00 08 00 12 21  `..A8...P!<....!\n\n```\nSo how exactly do i figure out what is the remote process it is going to communicate with, or what pipe it is using to communicate?\n\nAs far as i understand from the MSDN, it is supposed to call a remote procedure. if i understand that right, it means it should call a remote function as if its an exported dll function. How can i set a breakpoint there?\n\nP.S:\n\nThe main reason im posing this function is because the NdrClientCall2 seems to be pretty huge.\n\n",
  "votes": "7",
  "answers": 1,
  "views": "4k",
  "tags": [
    "windbg",
    "anti-debugging"
  ],
  "user": "0xAK",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "The first step is to find the RPC client interface. This can be found via the first argument to NdrClientCall2(), named pStubDescriptor. In your question, pStubDescriptor points to SspiCli!sspirpc_StubDesc:\n\nSspiCli!sspirpc_StubDesc is a MIDL_STUB_DESC, and on my computer, here are its associated values (via IDA Pro):\n\n```\nstruct _MIDL_STUB_DESC const sspirpc_StubDesc MIDL_STUB_DESC\n<\n    offset dword_22229B8,\n    offset SecClientAllocate(x),\n    offset MIDL_user_free(x),\n    <offset unk_22383F4>,\n    0,\n    0,\n    0,\n    0,\n    offset word_22224B2,\n    1,\n    60001h,\n    0,\n    700022Bh,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0\n>\n\n```\nAs documented on MSDN, the first field in the structure above \"points to an RPC client interface structure\". Thus, we can parse the data at that address as an RPC_CLIENT_INTERFACE struct:\n\n```\nstru_22229B8    dd 44h                  ; Length\n                dd 4F32ADC8h            ; InterfaceId.SyntaxGUID.Data1\n                dw 6052h                ; InterfaceId.SyntaxGUID.Data2\n                dw 4A04h                ; InterfaceId.SyntaxGUID.Data3\n                db 87h, 1, 29h, 3Ch, 0CFh, 20h, 96h, 0F0h; InterfaceId.SyntaxGUID.Data4\n                dw 1                    ; InterfaceId.SyntaxVersion.MajorVersion\n                dw 0                    ; InterfaceId.SyntaxVersion.MinorVersion\n                dd 8A885D04h            ; TransferSyntax.SyntaxGUID.Data1\n                dw 1CEBh                ; TransferSyntax.SyntaxGUID.Data2\n                dw 11C9h                ; TransferSyntax.SyntaxGUID.Data3\n                db 9Fh, 0E8h, 8, 0, 2Bh, 10h, 48h, 60h; TransferSyntax.SyntaxGUID.Data4\n                dw 2                    ; TransferSyntax.SyntaxVersion.MajorVersion\n                dw 0                    ; TransferSyntax.SyntaxVersion.MinorVersion\n                dd offset RPC_DISPATCH_TABLE const sspirpc_DispatchTable; DispatchTable\n                dd 0                    ; RpcProtseqEndpointCount\n                dd 0                    ; RpcProtseqEndpoint\n                dd 0                    ; Reserved\n                dd offset _MIDL_SERVER_INFO_ const sspirpc_ServerInfo; InterpreterInfo\n                dd 4000000h             ; Flags\n\n```\nFrom the RPC_CLIENT_INTERFACE struct above, we can extract the InterfaceId GUID: 4F32ADC8-6052-4A04-8701-293CCF2096F0\n\nWe can now look up that interface GUID with RpcView to find the associated DLL, running process, and endpoints:\n\n\n\n\n\nTo find out which specific endpoint is being used by the SSPI RPC server in the LSASS process, we can reverse engineer sspisrv.dll. In the exported function SspiSrvInitialize(), we see the following call:\n\n```\nRpcServerUseProtseqEpW(L\"ncalrpc\", 0xAu, L\"lsasspirpc\", 0);\n\n```\nTo figure out which specific function is being called in sspisrv.dll, we need to look at the pFormat data passed to NdrClientCall2. In your example code above, the pFormat data is:\n\n```\n00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00 ...\n\n```\nIf we parse the pFormat data as an NDR_PROC_HEADER_RPC structure, we get:\n\n```\nhandle_type = 0x00\nOi_flags    = 0x48\nrpc_flags   = 0x00000000\nproc_num    = 0x0006\nstack_size  = 0x004C\n\n```\nFrom proc_num, we can see that this RPC call is calling the 6th RPC function in sspisrv.dll. We can use RpcView again to get the address for the 6th RPC function:\n\n\n\nAnd with IDA Pro, we can see the function in sspisrv.dll at address 0x7573159D:\n\n```\n.text:7573159D __stdcall SspirProcessSecurityContext(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) proc near\n\n```\nRpcView also shows us a decompilation of that function's prototype:\n\n\n\n(Note that on your computer, the 6th function might not be at virtual address 0x7573159D, and furthermore, the 6th function might not be SspirProcessSecurityContext(), but this is the approach you would use nonetheless.)\n\nAs such, we can now say the following:\n\n",
      "votes": "10",
      "user": "Jason Geffner",
      "time": "Jan 31, 2015 at 1:05",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xAK",
          "text": "Alright, this thought me a lot! thanks for that. But for the second part of my question, Is there a way to know what is the -final- called procedure?  What you eventually found was the exported Initialization function which calls RpcServerUseProtseqEpW(), this is not the real function which is called. or am i missing something?",
          "time": null
        },
        {
          "user": "0xAK",
          "text": "Or better yet, where is the place i should place a BreakPoint at?",
          "time": null
        },
        {
          "user": "0xAK",
          "text": "Yes this was exactly what i was looking for. Just for future reference.. how did you figure out the Struct parameters type?  How did you know that  MIDL_STUB_DESC.RpcInterfaceInformation is of type   The msdn just says it points to a ** RPC client interface structure ** and i couldnt see anywhere on the msdn the \"RPC_CLIENT_INTERFACE\". Where did you find that?  And by the way thanks for the awesome answer",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "With regard to RPC_CLIENT_INTERFACE, I actually relied on previous research I had done (see page 27 in Exporting Non-Exportable RSA Keys). When I did the initial research, I think I determined this by either by looking at the documented RPC structures and noticing the name RPC_CLIENT_INTERFACE, or by finding this in ReactOS's code.",
          "time": null
        },
        {
          "user": "0xAK",
          "text": "i guess there is noting compared to real experience. Thanks a ton",
          "time": null
        }
      ]
    }
  ]
}