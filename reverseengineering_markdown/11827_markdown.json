{
  "title": "Breaking on specific API",
  "link": "https://reverseengineering.stackexchange.com/questions/11827/breaking-on-specific-api",
  "content": "I wish to set a breakpoint on a call to a specific windows API function, e.g.-\nRegQueryValueExA()\n\nIt is resolved at runtime in unknown stage of malware execution, and I wish to initiate manual debugging after this API is called.\n\nIs there an easy way other from detecting the moment it is resolved?\nI have some other lazy-ass solutions but I guess that there's  a proper approach to this issue.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "648",
  "tags": [
    "debugging",
    "winapi",
    "breakpoint"
  ],
  "user": "GalB1t",
  "time": "Jan 23, 2016 at 12:09",
  "comments": [
    {
      "user": "farmdve",
      "text": "There are a few ways for an application to fetch this API. One is obviously in the import table, and Windows does the job for you. The other is with GetProcAddress in which case you need to know the number of arguments and types beforehand and finally, this is the most interesting of them all.  Using fs:[0x30] to get the address of the PEB and accessing it's Ldr member which is structure of type PEB_LDR_DATA which contains lists to all loaded modules, and then you can manually parse the module in question and checking the exports by name and fetching the address of the function.",
      "time": null
    },
    {
      "user": "farmdve",
      "text": "It might also be possible to read the registry using syscalls in which case you need the lower level functions.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It sounds like you're asking two questions here:\n\nFor #1, you can just set a breakpoint on the first instruction of advapi32!RegQueryValueExA. Consult your debugger's documentation for how to set breakpoints.\n\nFor #2, you'd need to do the following:\n\n",
      "votes": "0",
      "user": "Jason Geffner",
      "time": "Jan 23, 2016 at 15:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "for #2, for which the malware is loading advapi32.dll dynamically, he'll have to break on the return from LoadLibrary first, in order to get the base address.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "@peterferrie: Correct. Or he could configure his debugger to break on new DLLs getting loaded.",
          "time": null
        }
      ]
    }
  ]
}