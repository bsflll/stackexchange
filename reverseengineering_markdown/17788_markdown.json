{
  "title": "Windasm32 cant allocate enough memory to display 151680 lines",
  "link": "https://reverseengineering.stackexchange.com/questions/17788/windasm32-cant-allocate-enough-memory-to-display-151680-lines",
  "content": "Hey I was using Windasm32 today and I loaded a .dll file and it told me this \n\n \n\nI tried to increase my virtual memory on windows 10 to 12000 and the max to 12000 and restarted the computer and ran the windasm32 in admin and it still gave me this error. So, how can I fix this?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "windows",
    "disassemblers"
  ],
  "user": "John Nay",
  "time": "Apr 5, 2018 at 13:38",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "do you really need to use the tool that is still mentioning Win 3.1? Why W32dasm and not some new one?",
      "time": null
    },
    {
      "user": "John Nay",
      "text": "Because it has a more better way to show all string data references  so I can find the text strings easier others like olydbg does not have this option it seems that I can find string references on windasm32 better than I can find them on ollydbg , ollydbg does not show some strings like windasm32 so yeah are you going to help me out on this issue of mine or ?",
      "time": null
    },
    {
      "user": "John Nay",
      "text": "I am running Windows 10 not windows 3.1",
      "time": null
    },
    {
      "user": "blabb",
      "text": "omg this stopped working correctly since windows 2000  that's almost a quarter century back  please get yourself familiarized with new tools most the new rookies on the block weren't even born then and wouldn't even know what this dinosaur is or was",
      "time": null
    },
    {
      "user": "John Nay",
      "text": "Well how do I find string data references in IDA Pro",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Windasm32 is a very old 32-bit program and is probably running out of the 2GB virtual memory space allocated for it by Windows (you should be able to confirm it using a tool such as VMMap).  One possible workaround could be to set the IMAGE_FILE_LARGE_ADDRESS_AWARE flag in the PE Header which would give it an additional 1GB of address space, e.g using editbin:\n\n```\neditbin /LARGEADDRESSAWARE  windasm32.exe\n\n```\nHowever this may lead to bugs and/or crashes if the program is not prepared to handle addresses above 0x80000000. And it may still not be enough for the program you're trying to disassemble.\n\nI would strongly suggest using another, more modern disassembler instead that can handle big files. If you can't find the functionality you need, ask a new question about it.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Apr 5, 2018 at 9:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Try this. In the menu, click:\n\nDisassembler -> Disassembler Options -> Enable extended memory\n\nSource (first post, translated to English)\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}