{
  "title": "how can 覺 debug encrypted dll with x32dbg and look getregistery request",
  "link": "https://reverseengineering.stackexchange.com/questions/26481/how-can-%c4%b1-debug-encrypted-dll-with-x32dbg-and-look-getregistery-request",
  "content": "I have an executable with 2 .dll calls 1 of this dll is guard.dll others name is guardlib.dll both of them is encrypted c++ library file and they are called before executable entry point.\n\nI can bypass anti-debug with x32dbg and now 覺 want to extract decrypted dll with debugger is that possible\n\nAlso this dlls are creating HWID with ap覺 calls and registery keys (I think) Is there a way to have a look at what registry keys are looking for?\n\nIf anyone wants to help me please contact me :)\n\n",
  "votes": "1",
  "answers": 1,
  "views": "989",
  "tags": [
    "debugging",
    "c++",
    "dll",
    "x64dbg"
  ],
  "user": "eray erkol",
  "time": "Dec 8, 2020 at 15:22",
  "comments": [],
  "answers_data": [
    {
      "content": "Instead of trying to dump the encrypted executable, it may be better to just monitor the API calls at runtime using something like Rohitab API Monitor. This is usually the easiest approach in cases where you can get the executable to run the code of interest. It also gives you the address of the calling code and call stack information, which you can then look at in your debugger in order to get a better idea of what's happening around the call site.\n\nIf you do need to dump the decrypted binary from memory, take a look at Process Dump. You can target the running process after the DLL decryption process has been completed and it'll produce a reconstructed PE file. It's also pretty good at recovering PEs that have been mangled in memory by anti-debug and anti-dumping tricks.\n\n",
      "votes": "1",
      "user": "Polynomial",
      "time": "Dec 8, 2020 at 19:02",
      "is_accepted": true,
      "comments": [
        {
          "user": "eray erkol",
          "text": "Thank you so much dude 覺 will try this suggestions .",
          "time": null
        }
      ]
    }
  ]
}