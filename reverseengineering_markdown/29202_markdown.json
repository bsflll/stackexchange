{
  "title": "What C++ construct could emit such Watcom C++ 10.5 assembler listing?",
  "link": "https://reverseengineering.stackexchange.com/questions/29202/what-c-construct-could-emit-such-watcom-c-10-5-assembler-listing",
  "content": "Based on the assembler listings, a C++ object is locally allocated on the stack without constructing the object in the caller routine and the callee takes the address to the allocated stack space and invokes the constructor. How is this possible using C++? The compiler used is Watcom C/C++ 10.5 from 1995, from way before ISO C++98's arrival. The compiler uses Watcom's register calling convention so first argument is passed in EAX, second in EDX and return value is passed back in EAX. EBP is used as stack frame pointer.\n\nThe caller function is a class A method which reserves space for a class B locally allocated object on the stack frame. Even though the class B object resides on a dword only it is a complex object that internally allocates lots of stuff to the heap when the constructor is called. It is similar to a smart pointer to a smart object. Any ways what I wanted to highlight is that class B is far from a simple struct. ObjectA on the stack frame is class A's this pointer passed to the Caller method in EAX. The caller sets up the arguments to callee. Callee's second argument is an address to the ObjectB stack space.\n\nCaller function:\n\n```\nMethodCaller_ proc near\n\nObjectB = dword ptr -8\nObjectA = dword ptr -4\n\n                push    32\n                call    __CHK\n                push    ebx\n                push    ecx\n                push    esi\n                push    edi\n                push    ebp\n                mov     ebp, esp\n                sub     esp, 8\n                mov     [ebp+ObjectA], eax\n                lea     edx, [ebp+ObjectB]\n                mov     eax, [ebp+ObjectA]\n                call    MethodCallee_\n                ...\n\n\n```\nThe callee function is also a class A method so first argument is the this pointer. The second argument is the address to a memory space which is passed to the constructor of class B. The construction is not based on assignment and copy constructor, it is a call to the default (implicit?) constructor of class B without allocating memory for the object being constructed.\n\nCallee function:\n\n```\nMethodCallee_ proc near\n\nObjectA = dword ptr -8\nObjectB = dword ptr -4\n\n                push    32\n                call    __CHK\n                push    ebx\n                push    ecx\n                push    esi\n                push    edi\n                push    ebp\n                mov     ebp, esp\n                sub     esp, 8\n                mov     [ebp+ObjectA], eax\n                mov     [ebp+ObjectB], edx\n                mov     eax, [ebp+ObjectB]\n                call    ObjectB_Ctor_\n                mov     eax, [ebp+ObjectB]\n                mov     esp, ebp\n                pop     ebp\n                pop     edi\n                pop     esi\n                pop     ecx\n                pop     ebx\n                retn\nMethodCallee_ endp\n\n\n```\nThe assembly listings are generated by IDA Freeware 7.0.\n\nThe following statements can be made:\n\nThe construct is used in a lot of places within the original program, redesigning the code base would be very difficult.\n\nAny new ideas would be highly welcome, thanks in advance for any help.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "110",
  "tags": [
    "assembly",
    "c++"
  ],
  "user": "nad",
  "time": "Aug 25, 2021 at 21:04",
  "comments": [],
  "answers_data": [
    {
      "content": "The pattern you describe sounds like the standard pattern for returning objects by value. So you are looking for\n\n```\nclass A {\n    B callee()\n    {\n        return B();\n    }\n    void caller()\n    {\n        B b = callee();\n    }\n}\n\n```\n",
      "votes": "1",
      "user": "Michael Karcher",
      "time": "Aug 27, 2021 at 8:43",
      "is_accepted": true,
      "comments": [
        {
          "user": "nad",
          "text": "This is it! Thanks a lot. Interestingly the compiler passes the address of b to callee() as a hidden argument. This argument is the first, unless callee is a class method in which case this pointer goes to first argument and second becomes the address of b.",
          "time": null
        }
      ]
    }
  ]
}