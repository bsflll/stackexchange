{
  "title": "How can I set breakpoint and get value of a register with IDApython",
  "link": "https://reverseengineering.stackexchange.com/questions/13383/how-can-i-set-breakpoint-and-get-value-of-a-register-with-idapython",
  "content": "How can I set a breakpoint and get the value of the EAX register with IDApython?\n\nI want to set a breakpoint, for example at address 00b27223, and at each break before execution of that specific address I want to get the value of the EAX register as text.\n\n\n\n",
  "votes": "7",
  "answers": 1,
  "views": "12k",
  "tags": [
    "ida",
    "debugging",
    "idapython",
    "debuggers",
    "ida-plugin"
  ],
  "user": "user121314",
  "time": "Sep 3, 2016 at 7:15",
  "comments": [],
  "answers_data": [
    {
      "content": "I can think of two methods to achieve this:\n\nThis is nearly trivial to do, but does not give the same amount of control as the second approach. It might be better for quick and dirty type of solutions, if that's what you're after.\n\nCalling idc.RunTo(ea) will execute the process until an ea is reached, allowing you to then call idc.GetRegValue(name) to get the value of EAX.\n\nCertain conditions (like an exception thrown or a different breakpoint being hit) will cause RutTo to return before the provided ea is reached. You could then call idc.GetDebuggerEvent to figure out what happened, but if you're gonna do that I suggest switching to the second approach.\n\nNote RunTo will also start up a process if there's no running process.\n\nThis is the safer and would be my recommended approach, while being harder to implement it allows properly handling other breakpoints and more control.\n\nFor this, you'll have to do three things:\n\nThe most basic method of achieving this is by calling the idc.AddBpt(ea), which sets a software on execution breakpoint at that address.\n\nAdditional methods you could use include:\n\nRead the documentation for the exact details.\n\nFor that, you'll need to install a Debugger Hooking class (any class that inherits idaapi.DBG_Hooks), which implements the dbg_bpt(tid, ea) method, which describe the thread id and linear address in which the breakpoint triggered. Returning 0 from dbg_bpt should prevent IDA from notifying the user it was triggered (assuming you'll handle it internally).\n\nYou'll have to instantiate your class and call the instance's Hook and Unhook methods for it to actually function. Please note it's better practice to install the hooks before creating the breakpoint.\n\nWhile the debugger is running, you can call idc.GetRegValue(name) providing the register name to receive it's immediate value at that time.\n\n",
      "votes": "8",
      "user": "NirIzr",
      "time": "Sep 3, 2016 at 21:51",
      "is_accepted": true,
      "comments": []
    }
  ]
}