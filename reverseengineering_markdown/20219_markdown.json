{
  "title": "How do I interpret the mangled functions name?",
  "link": "https://reverseengineering.stackexchange.com/questions/20219/how-do-i-interpret-the-mangled-functions-name",
  "content": "I am going to start by saying that this is my fourth attempt at reverse engineering a crackme and I'm starting to understand how assembly works, which is cool. I am sorry if this question is wrong or if I used the wrong terminology.\n\nI am reversing a mach-0 binary with IDA. When I examine it, I find that there are hundreds of functions with weird names, like this\n\n```\nj___ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_\n\n```\nNow, this doesn't look like pure junk. From it I can 'extract' the following: char_traits, allocator, basic_string.\n\nApparently it does something with strings, as before there are the following instructions:\n\n```\nlea rsi, goodWork ; \"Good work!\"\nlea rdx, _cido ; _cido in IDA is shown to do -> and [rax], eax ; I have no idea what that means\nlea rdi, [rbp+var] ; the only occurrence of var before is at the start -> var = qword ptr - 1C0H ; as always, no idea of what is this\ncall to_the_function_I_wrote_before\njmp $+5\n\n```\nIs there a technique/way of knowing whatever this function does?\n\nEDIT:\n\nThis has been flagged as a duplicate. It's not. The question you've linked only demangles the function name, which is a thing that IDA automatically does.\n\nI need to understand whatever the hell this function does. The demangled function name is to me as helpful as the mangled one. I don't get it. I need a bit of guidance with that.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "binary-analysis"
  ],
  "user": "G. Ramistella",
  "time": "Dec 29, 2018 at 14:47",
  "comments": [
    {
      "user": "Jongware",
      "text": "Possible duplicate of Wierd names in import table",
      "time": null
    },
    {
      "user": "Jongware",
      "text": ".. Using the online demangler on your name results in the slightly bewildering j__std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) – originally, probably some typedefs or classes or summink like that.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Re your edit, it may be useful to post the demangled name to StackOverflow since it’s more of a programming question than RE per se",
      "time": null
    },
    {
      "user": "anx199",
      "text": "The _cido pointer equals to address of and [rax], eax, because IDA shows you data section as code section. It may however be a pointer to char, a table of ints, a pointer to pointer to pointer. That is, a pointer to almost anything.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is actually quite a straightforward C++ string function. It's just that, behind the scenes, the C++ std::string class is actually a typedef of a template.\n\n```\ntypedef basic_string<char> string;\n\n```\nbasic_string itself is declared as -\n\n```\ntemplate< class CharT, \n          class Traits = std::char_traits<CharT>, \n          class Allocator = std::allocator<CharT>\n        > class basic_string;\n\n```\nIn other words, a std::string is really a -\n\n```\nstd::basic_string< char, std::char_traits<char>, std::allocator<char> >\n\n```\nApplying this in reverse to your mangled name and (and removing the __1's - see below) your function is simply the standard library string function - \n\n```\nstd::string operator+( char const* lhs, std::string const& rhs )\n\n```\nThis concatenates a C style string and a std::string, returning the result as a new std::string.\n\nThis function is called from x86-64 assembly language as follows -\n\nDetails on calling convention can be found here AMD64 ABI\n\nIn the above, I've ignored the __1 parts of the symbol. For details on where these come from see the following questions:\n\n",
      "votes": "7",
      "user": "Ian Cook",
      "time": "Dec 30, 2018 at 11:14",
      "is_accepted": true,
      "comments": [
        {
          "user": "G. Ramistella",
          "text": "This is brilliant. Thanks. One thing though, I still don't get how you managed to figure out that the function concatenates a C string and an std::string. I guess that basic_string is the C++ string, but where is the C string? and where is the concatenator part?",
          "time": null
        },
        {
          "user": "anx199",
          "text": "@A.Dandelion In std::basic_string<char, std::char_traits<char>, std::allocator<char>> std::operator+<char, std::char_traits<char>, std::allocator<char>> (char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) replace all the std::basic_string<char, std::char_traits<char>, std::allocator<char>> with std::string (std::string is just a typedef for that). It gives you: std::string std::operator+<char, std::char_traits<char>, std::allocator<char>> (char const*, std::string const&).",
          "time": null
        },
        {
          "user": "anx199",
          "text": "@A.Dandelion Now, std::operator+<char, std::char_traits<char>, std::allocator<char>> means that this operator belongs to class <char, std::char_traits<char>, std::allocator<char>, which is std::string. Therefore, it can be shortened to: std::string std::string::operator+(char const*, std::string const&).",
          "time": null
        },
        {
          "user": "G. Ramistella",
          "text": "@anx199 Thanks. I think I am starting to get it. Isn't there a tool that does this for me though?",
          "time": null
        }
      ]
    }
  ]
}