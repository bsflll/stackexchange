{
  "title": "Removing/bypassing a BIOS whitelist",
  "link": "https://reverseengineering.stackexchange.com/questions/25152/removing-bypassing-a-bios-whitelist",
  "content": "I am trying to bypass or erase the BIOS whitelist on my Thinkpad T440p. So far I've\n\nBelow, I'll post the function containing the string first, and then the entry function. Also, I'll put a link there to the extracted body.\n\n```\nvoid FUN_00010ec4(undefined8 param_1,undefined *param_2,undefined8 param_3,undefined8 param_4)\n\n{\n   if (param_2 == (undefined *)0x0) {\n     param_2 = &DAT_00010ec0;\n  }\n  (**(code **)(DAT_00011040 + 0x170))(0x200,param_1,param_2,param_3,&DAT_000104d0,param_4);\n  return;\n}\n\n```\nThe above function gets called from here: \n\n```\nlonglong entry(undefined8 param_1,longlong param_2)\n\n{\n  longlong lVar1;\n  undefined8 local_res18;\n  undefined8 *local_res20;\n  undefined local_18 [24];\n\n  FUN_00010f08(param_1,param_2);\n  lVar1 = (**(code **)(DAT_00011040 + 0x140))(&LAB_00010480,0,&DAT_00011058);\n  if (-1 < lVar1) {\n    lVar1 = (**(code **)(DAT_00011040 + 0x140))(&LAB_00010410,0,&DAT_00011070);\n    if (-1 < lVar1) {\n      lVar1 = (**(code **)(DAT_00011040 + 0x140))(&DAT_000103f0,0,&DAT_00011078);\n      if (-1 < lVar1) {\n        lVar1 = (**(code **)(DAT_00011040 + 0x140))(&LAB_00010460,0);\n        if (-1 < lVar1) {\n          DAT_00011060 = *local_res20;\n          local_res18 = 0;\n          _DAT_00011068 = &LAB_00010b54;\n          (**(code **)(DAT_00011040 + 0x80))(&local_res18,&DAT_000103d0,0,&DAT_00011068);\n          DAT_00011028 = local_res18;\n          FUN_00010ec4(0x10,FUN_00010cf8,0,local_18);\n          lVar1 = 0;\n        }\n      }\n    }\n  }\n  return lVar1;\n}\n\n```\nThe body, as well as the dumped .img can be found here. \n\nNow I don't know what to do with this. Could I just remove the line FUN_00010ec4(0x10,FUN_00010cf8,0,local_18); and the function would never get called, thus freeing me from the whitelist? What other possibilities do you see to get around it?\n\nThis is the first time I deal with BIOS-modding, and I really don't want to brick my laptop. Also I'm sorry, if I use the wrong tags. I'm open for suggestions for better fitting ones.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "506",
  "tags": [
    "decompilation",
    "static-analysis",
    "ghidra",
    "functions",
    "bios"
  ],
  "user": "BraveSentry",
  "time": "May 29, 2020 at 13:04",
  "comments": [
    {
      "user": "Robert",
      "text": "When modifying binaries usually you can't just \"delete a line\" because you are just looking at the decompiled code. Changing something in decompiled code does not change the binary. If you want to remove a certain function call you have to overwrite it in the binary with different commands that don't do anything like NOP or an add command on an unused register.",
      "time": null
    },
    {
      "user": "BraveSentry",
      "text": "I see. I've managed to find the hex code corresponding to the line in question, replaced that with FF FF FF FF FF, and fed it to Ghidra again. Now at that line it says /* WARNING: Bad instruction - Truncating control flow here */ instead. I imagine this is not the thing I want. Any idea what I could use that would not give me a warning?",
      "time": null
    },
    {
      "user": "Johann Aydinbas",
      "text": "You can't just put FF FF FF FF there, it has to be valid opcodes. 90 is the opcode for nop (no operation - does nothing) for example which is typically used to overwrite code to skip it. You're playing with fire though and don't seem to know what you are doing so be careful.",
      "time": null
    }
  ],
  "answers_data": []
}