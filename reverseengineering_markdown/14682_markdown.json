{
  "title": "3 questions on Assembly - meaning of code, Decompilation in Linux, Higher level perspective,",
  "link": "https://reverseengineering.stackexchange.com/questions/14682/3-questions-on-assembly-meaning-of-code-decompilation-in-linux-higher-level",
  "content": "Following the question here (3 questions on assembly - syntax, meaning, and equivalent in high level code (eg C++)), I would like to know for the same x86 code in AT&T syntax:\n\n```\nxor $0x20, (%eax) \nand $0x20, %ah \nor $0x20, %dh \ndec (%edi) \ndec %si \ndec %sp \ndec %bp\n\n```\nThis is not a homework question - I am new to assembly. Example code is not from actual code - it's to help me get a better understanding & illustrate my questions. \n\n",
  "votes": "1",
  "answers": 1,
  "views": "171",
  "tags": [
    "assembly",
    "decompilation",
    "linux",
    "binary"
  ],
  "user": "unseen_rider",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "You should post real examples, not something you made up, otherwise the answers would be useless.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "\"I'm learning English, so can you explain what 'gut what excite' means? I just made it up because I know some of these words but please translate it\" - this is what your questions look like.",
      "time": null
    },
    {
      "user": "unseen_rider",
      "text": "Ok point made. I will post another question with actual code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are none. You can see this for yourself if you look at the functionality provided by tools in the GNU binutils collection. \n\nOn System V i386 systems %esp and %ebp are used by the compiler to manage stack frames on the runtime stack (it is the compiler that transforms source code into assembly). Stack frames are created on the runtime stack when functions are called. \n\nFrom the System V Application Binary Interface Intel386 Architecture Processor Supplement, chapter 3 \"Low-Level System Information\" section 9 \"Function Calling Sequence\" (page 37):\n\nHere is a picture of a standard stack frame (from the System V Application Binary Interface Intel386 Architecture Processor Supplement, page 36):\n\n\nAnd here is a different diagram of a portion of a process runtime stack (from CSAPP chapter 3 \"Machine-Level Representation of Programs\":\n\n\nThe runtime stack is a region high in a process's virtual memory. For reference, here is a diagram of virtual memory (from TLPI, chapter 6 \"Processes\"):\n\n\nNow to your question:\n\nThe code that you have provided is not from a called function, so no stack frame would be created for this code. In other words, no function calls means no stack frame creation. This code would be mapped from an executable ELF binary's .text section to the text segment in virtual memory when executed and its process image is created.  This means that in the context of the code you have provided, the statements dec %sp and dec %bp are of no consequence since there are no function calls and no stack frames to be managed.\n\nThere is not much going on here. xor $0x20, (%eax) is an example of indirect addressing, where the value in %eax is treated as a memory address and whatever is at that address is xor'ed with the integer value 32. dec (%edi) results in the value in %edi being treated as a memory address, and whatever is at that address has 1 subtracted from it. The other statements are just arithmetic performed on values in CPU registers. I am not sure how this sequence of computations would be represented in a high level language.\n\nThe best thing you could do for yourself is learn how to create some basic functional assembly code and step through the code with a debugger like gdb using the stepi and info registers commands. This will allow you to see for yourself what happens as a result of each statement. It will also speed up the learning process and deepen your understanding of assembly and virtual memory. \n\n",
      "votes": "2",
      "user": "julian",
      "time": "Feb 18, 2017 at 3:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}