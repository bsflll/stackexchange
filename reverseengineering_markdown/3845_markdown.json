{
  "title": "GCC Loop optimization",
  "link": "https://reverseengineering.stackexchange.com/questions/3845/gcc-loop-optimization",
  "content": "I have been looking at some simple C code and the different output from GCC using different optimization levels.\n\nC code\n\n```\n#include <stdio.h>\n\nint main() {\n    int i = 0;\n\n    while(i<10) {\n            printf(\"Hello  \n\");\n            i++;\n    }\n\n    i = 0;\n\n    while(i<10) {\n            printf(\"i: %d  \n\", i);\n            i++;\n    }\n\n```\n}\n\nWhen I compile the code using -Os or -O2 the first loop works a bit differently. It it decrements instead of incrementing, and it is in two different ways. I am wondering why it decrements instead of incrementing like in the code, and the the small difference between -Os and -O2.\n\n-Os compiled\n\n```\n0x400486 <main+6>       mov     edi,0x40068c\n0x40048b <main+11>      call    0x400450 <puts@plt>\n0x400490 <main+16>      dec     ebx\n0x400492 <main+18>      jne     0x400486 <main+6>\n\n```\n-O2 compiled\n\n```\n0x400490 <main+16>      mov    edi,0x40069c\n0x400495 <main+21>      call   0x400450 <puts@plt>\n0x40049a <main+26>      sub    ebx,0x1\n0x40049d <main+29>      jne    0x400490 <main+16> \n\n```\n",
  "votes": "5",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly"
  ],
  "user": "Sindre Smistad",
  "time": "Mar 11, 2014 at 6:04",
  "comments": [],
  "answers_data": [
    {
      "content": "By decrementing, compiler can make use of jne (jump if not equal/zero) which does the comparison (to zero) and jump in a single instruction. In case of incrementing, it would have to do a cmp/test (with 10) and then a conditional jump like jnz/jne. I believe it is a part of optimization.\n\n-Os flag optimizes to bring down the code size. The code generated using -Os uses dec ebx instead of sub ebx, 0x1, since dec ebx is a 2-byte instruction while sub ebx, 0x1 is a 3-byte instruction (Note the address at which the next instruction begins). That explains the small difference.\n\n",
      "votes": "7",
      "user": "pank4j",
      "time": "Mar 11, 2014 at 7:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "PlasmaHH",
          "text": "This does explain the difference in one direction, but not the other; it seems that there must be an advantage of sub over dec otherwise O2 would not have chosen it.",
          "time": null
        },
        {
          "user": "Sindre Smistad",
          "text": "With a little research I think I found the reason why O2 uses sub instead of dec. IntelÂ® 64 and IA-32 Architectures Optimization Reference Manual In table C-19 in appendix C add/sub has a lower latency.",
          "time": null
        }
      ]
    },
    {
      "content": "Because I can't comment, I'll try to fix some inaccuracies in pnak4j's answer.\n\ndec ebx is really a 1-byte instruction (I don't know why it appears to be 2-bytes). DEC sets the ZF flag accordingly to the result of (ebx-1) when: zero or not zero. Then, JNE does the jump if not zero (JNE/JNZ are the same). JMP is not a conditional jump, therefore it would not make much sense after CMP/TEST. \n\n",
      "votes": "5",
      "user": "perror",
      "time": "Mar 11, 2014 at 7:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "pank4j",
          "text": "By jmp, I meant a conditional jump. An unconditional jump doesn't make much sense after a compare. It has been edited. Thanks.",
          "time": null
        },
        {
          "user": "PlasmaHH",
          "text": "dec ebx is 0xff 0xcb",
          "time": null
        }
      ]
    }
  ]
}