{
  "title": "RAM and Registers Analysis EMS3150 ECU TriCore TC1767",
  "link": "https://reverseengineering.stackexchange.com/questions/33175/ram-and-registers-analysis-ems3150-ecu-tricore-tc1767",
  "content": "I extracted the firmware of an EMS3150 ECU, TC1767 chip.\nI analysed the binary with the help of a hex editor and the TC1767 manual.\nI managed to successfully load the binary in IDA Pro, with correct memory mapping, and began the disassemble process.\nI identified code and data parts, and I'm now analysing functions and routines with x-refs to get a clue of how things works.\n\nThe goal is to inject some custom code to implement features like 2-step, ignition map switching, etc.\n\nMy primary target is the Dwell time map, which I want to load from a free space of PFlash I rewrited.\n\nHowever, i'm facing an issue which make the process really slow and hard for the brain : I don't know how to \"run\" the firmware to debug it in real time. For example, I would love to see RAM addressing, step by step, to understand how things are handled. Same for registers : I would love to follow an execution of the routines with some defined values to see how functions and routines are handling the data.\n\nI don't have access to RAM mapping for this firmware.\n\nQuestion is : how can I \"emulate\" the firmware or parts of the firmware to debug it and see how data is handled by the program ?\n\nThanks\n\n",
  "votes": "0",
  "answers": 1,
  "views": "48",
  "tags": [
    "disassembly",
    "binary-analysis",
    "firmware-analysis",
    "ecu"
  ],
  "user": "kcdq",
  "time": "Aug 22, 2024 at 11:25",
  "comments": [],
  "answers_data": [
    {
      "content": "You might be able to use the Trace32 simulator:\n\nhttps://gist.github.com/patois/4d32ac437f32682b49f3480569ae0ec6\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Aug 31, 2024 at 20:15",
      "is_accepted": true,
      "comments": []
    }
  ]
}