{
  "title": "What is the relationship between the Windows API and the C run time library? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/13150/what-is-the-relationship-between-the-windows-api-and-the-c-run-time-library",
  "content": "I have two reports of static and dynamic malware analysis. There are some APIs of MSVCRT's dll in my static report, which are missing in the dynamic report. (such as _p_commode, _setusermatherr, etc.)\n\n",
  "votes": "0",
  "answers": 1,
  "views": "323",
  "tags": [
    "malware",
    "static-analysis",
    "dynamic-analysis",
    "api"
  ],
  "user": "Shirin",
  "time": "8 years ago",
  "comments": [
    {
      "user": "Dr. Koutheir Attouchi",
      "text": "The Visual C/C++ runtime is implemented mostly based on the Windows API. You need to ask your dynamic and static reporting programs to know why symbols are missing.",
      "time": null
    },
    {
      "user": "Shirin",
      "text": "Dear blabb, Static analysis considers all paths in code,and dynamic analysis should execute at least one of them",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "_p_commode is a variable, not an \"API\". presumably your dynamic report only includes functions. In any case, this question is almost impossible to answer without seeing the reports and knowing how they were produced.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "To answer the main question, some C functions call WinAPI functions. Some don't.\n\nThere are things that you have to call WinAPI function for. (e.g. exit()) There are things that you have convenient WinAPI for, but can implement as pure C, so it depends on the library.\n\n",
      "votes": "3",
      "user": "Shmuel Fomberg",
      "time": "Jul 28, 2016 at 8:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}