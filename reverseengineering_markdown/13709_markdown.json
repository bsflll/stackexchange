{
  "title": "Is this anti-tamper solution fool-proof?",
  "link": "https://reverseengineering.stackexchange.com/questions/13709/is-this-anti-tamper-solution-fool-proof",
  "content": "https://libreboot.org/faq/#intelme\n\nThe Intel Management Engine has access to the CPU's RAM. However, the CPU does not have access to the RAM reserved by the Intel Management Engine.\n\nThe idea is simple: the software developer distributes the software encrypted. When the user launches an application, the IME takes over. It loads the encrypted program into the IME's RAM (the CPU does not have access to this). Then, it fetches a public key from a server and decrypts the program in memory. The IME then executes the application.\n\nAlternatively, the public key could be hard-coded in the IME.\n\nI'm just wondering if this method is theoretically uncrackable.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "358",
  "tags": [
    "memory",
    "encryption",
    "anti-debugging"
  ],
  "user": "Michael",
  "time": "Oct 13, 2016 at 6:03",
  "comments": [],
  "answers_data": [
    {
      "content": "This method (if I understand correctly how exactly IME works) is not theoretically uncrackable, it is practically impossible.\n\nThe devil, as usual, is in details - this method relies on 2 capabilities that AFAIK IME simply doesn't have - ability to run the application on the main CPU from IME (it requires interaction with the OS, and according to the method definition the decrypted program remains in the memory which is not accessible for main CPU)  and ability to secretly and reliably distribute the code that should run on it (to distribute the public key with the code that should run on IME).\n\nIn addition the IME runs on very weak processor (especially in comparison with man CPU itself).\n\nAs far as I know IME code is distributed as so-called \"DAL applets\". This is actually something like JAVA ME code, packed in JEFF/DALP format - and @Igor Skochinsky wrote a set of utilities to unpack it - which means that the public key can be easily found.  \n\nGenerally speaking, the main discrepancy here is as follows:\n\n",
      "votes": "0",
      "user": "w s",
      "time": "Oct 13, 2016 at 7:12",
      "is_accepted": true,
      "comments": [
        {
          "user": "Michael",
          "text": "Thank you for the clarification. I admit it is not currently possible to run the application on the main CPU from IME. But I suspect it is possible to define some sort of interface between the CPU and IME that allows the application to run on the IME and for the CPU to interact with it. If the user is running GNU/Linux for example, then maybe the application runs on the IME and simply streams the GUI data using the X11 protocol to a X11 server running on the main CPU.",
          "time": null
        },
        {
          "user": "Michael",
          "text": "As for the distribution of the public key, by being hard-coded in the IME, I mean that the key is physically stored in the hardware itself where it's hard to extract from the CPU similar to how Apple does iOS encryption.",
          "time": null
        }
      ]
    }
  ]
}