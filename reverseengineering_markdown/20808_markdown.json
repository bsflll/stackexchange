{
  "title": "Fork and Waitpid calls in a CTF linux binary",
  "link": "https://reverseengineering.stackexchange.com/questions/20808/fork-and-waitpid-calls-in-a-ctf-linux-binary",
  "content": "I'm doing one of my first linux crackmes.\n\nIn the first blocks of code, it goes inside some anti-debug routine and inside one of those it forks and after it calls a waitpid routine. I can verify it and understand purely the code but I can't get why the creators put this code and how it can be an anti-debug technique. These are the interesting blocks.\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "814",
  "tags": [
    "linux",
    "anti-debugging"
  ],
  "user": "Kartone",
  "time": "Mar 7, 2019 at 16:37",
  "comments": [
    {
      "user": "wisk",
      "text": "This is impossible to tell if you don't show the rest of the code. There are lot of ways to implement an anti-debugger with a sub-process.",
      "time": null
    },
    {
      "user": "Kartone",
      "text": "Since it will be no-readable to screenshot other blocks of code, this is the executable I'm trying to analyze: dropbox.com/s/7oagp3scl54btob/reverse_me?dl=0",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Basically, the process calls fork, on the child side it'll try to attach a debugger to the parent process:\n\n```\nptrace(PTRACE_ATTACH, getppid(), 0, 0);\n\n```\nIf this syscall failed, it probably means a debugger is already attached to the parent process, this is your anti-debugger. To notify the parent process, the developer relies on the exit code. It's 1 if a debugger is attached, 0 otherwise.\n\nOn the parent side, it retrieves the exit code with the macro WEXITSTATUS. In C this is defined as:\n\n```\n#define WEXITSTATUS(x)  (_W_INT(x) >> 8)\n\n```\nWhich gives in assembly:\n\n```\nsar     eax, 8\nmovzx   eax, al\ntest    eax, eax\njz      short no_debugger\n\n```\nThis is another way to do a PTRACE_TRACEME. :)\n\n",
      "votes": "1",
      "user": "wisk",
      "time": "Mar 8, 2019 at 0:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "Kartone",
          "text": "Thanks, this is a great explanation. May I continue to ask your help in some other parts of this executable that are behind my actual comprehension? Do I need to open other threads?",
          "time": null
        },
        {
          "user": "wisk",
          "text": "Sure and it's up to you about creating another threads",
          "time": null
        },
        {
          "user": "Kartone",
          "text": "I was thinking, why you said that on the child side it'll try to attach a debugger to the parent process? After the fork(), if the JNZ instruction is false I would be into the child process, and the getpid() call would return the PID of the child, why the PID of the parent process? What am I missing?",
          "time": null
        },
        {
          "user": "wisk",
          "text": "The exectuable uses getppid(note the extra 'p') not getpid.  The first function returns the PID of the parent process where the latter returns the current PID.",
          "time": null
        },
        {
          "user": "Kartone",
          "text": "OMG, how I missed it...sorry for the dumb question. -_-",
          "time": null
        }
      ]
    }
  ]
}