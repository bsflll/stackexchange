{
  "title": "identifying function prototype from dll",
  "link": "https://reverseengineering.stackexchange.com/questions/18070/identifying-function-prototype-from-dll",
  "content": "I have an exe file and a dll file. This exe file uses the dll to decode input file. This exe file is gui based and does not support command line execution. \n\nSo my requirement is to create a program which loads this dll and use the funciton to decode an input file so that I can use this program in some scripts.\n\nThe exe expects two inputs. Source file name and destination file name.\n\n\n\nWhen I disassembled the exe, only 1 parameter is being passed to the dll function call, which is the source file name. I couldn't find how the destination file name is passed to the function.\n\n\n\nDisassembly of dll function shows 2 exported functions.\n\n\n\nassembly code for dll function from IDA is as follows\n\n\n\nWhile calling the dll function from exe, the stack is as follows\n\n\n\nFrom this I understood that the a pointer to the source file name is passed as the argument. The pointer points to the following memory location.\n\n\n\n\nFrom this much information, is it possible to identify the function prototype of the dll function.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "823",
  "tags": [
    "ida",
    "disassembly",
    "windows",
    "dll",
    "x64dbg"
  ],
  "user": "John",
  "time": "Apr 27, 2018 at 8:48",
  "comments": [],
  "answers_data": [
    {
      "content": "Itâ€™s hard to say for sure without full binary or all called functions but going by the debugger screens it looks like the argument is pointer to a structure with  layout similar to the following:\n\n```\nstruct PARAMS {\n  char *inputfname;\n  int flag1;\n  char *outfname;\n  int flag2;\n};\n\n```\nThere maybe other fields not obvious from the posted info, but you could try to start with this.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Apr 23, 2018 at 20:50",
      "is_accepted": true,
      "comments": [
        {
          "user": "John",
          "text": "I created the program using LoadLibrary and GetProcAddress. I passed this struct as the argument, but the program was crashing.  I used the following post as reference to create the program. MSDN: Using Run-time Dynamic Linking  @igor",
          "time": null
        },
        {
          "user": "John",
          "text": "I can share more details of the program and the dll, if required",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "add the source of how exactly you call it",
          "time": null
        },
        {
          "user": "John",
          "text": "added the source code. added the exe, dll and input files also.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "you should pass the struct by pointer. struct PARAMS1*.",
          "time": null
        }
      ]
    }
  ]
}