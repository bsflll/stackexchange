{
  "title": "A newbies question about CFF explorer screen",
  "link": "https://reverseengineering.stackexchange.com/questions/18155/a-newbies-question-about-cff-explorer-screen",
  "content": "I am a bit confused about the CFF explorer quick disassembler options shown in my screen , \nCan somebody explain what those hex values are underneath the Opcode part ?\n\n\n\n\n\nupdated the question part , there is no confusion in the first two pictures , Its just the last pic with the show opcode part that is confusing me .\n\nHow do I know the bytes corresponding to an instruction in Hex view in IDA?\n\n\n\nWhy would i want to know about the \"number of opcode bytes\" ?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "881",
  "tags": [
    "disassembly"
  ],
  "user": "KpaK",
  "time": "May 4, 2018 at 0:17",
  "comments": [
    {
      "user": "blabb",
      "text": "the english form is for us humans  computers can understand only 83 ec 1c  and cannot understand sub esp,1c  the hex is for computers and teh sub esp,1c is the meaning of that hex bytes  and it was interpreted by the disassembler from the hex bytes   when you open any file in hex editor you can only see hex   you cannot see the mnemonics anywhere",
      "time": null
    },
    {
      "user": "KpaK",
      "text": "updated the question a bit , maybe now this question makes more sense .",
      "time": null
    },
    {
      "user": "Cyb3r",
      "text": "When you assemble an instruction the linker translate it to an opcode for the machine to understand (hex bytes). When disassembling we already have the assembled file as an opcodes so what the disassembler do is reverse it to a readable form e.g 83EC1C => sub esp, 0x1c, the disassembler doesn't actually change anything in the file it just shows you the translation which is the assembly language instructions.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "your original query and the edited one differs a lot in scope  first you asked what is the hex bytes now you are asking about the number of hexbytes both are very different  the setting possibly exists to show only a limited amount of bytes   x86 instruction set is a variable length instruction set  it varies from 1 hexbyte to 15 hexbyte max  with that setting at 6 if an instruction has more than 6 hexbytes they would be truncated from display (only in display )",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "x86 (ISA) Instruction Set Architecture is a variable length primarily CISC design   \n\n```\nCISC is complex instruction set computing   \nRISC is Reduced instruction set computing   \n\n```\nthe x86 ISA can encode operations between 1 byte to 15 bytes max \n\nthe human readable form of encoding is called mnemonic\nexample for mnemonics are nop, int 3 , push eax etc \n\nthe machine readable form is binary (0,1)\nusually encoded as a BYTE (8 bit) between 0x00 and 0xFF\n(00000000 to 11111111)  or between 20 -1 and 28 -1\nthese bytes are termed opcodes (the hex bytes you see in display) \n\nmnem      |enco        |\n         nop |       0x90 |\n        int 3 |       0xcc |\npush eax |       0x50 | \n\nmnem            |enco        |\nmov ebp,esp |  0x8BEC |\n\nA 12 byte Encoded Operation\n\n```\n>>> for i in range( len(ks.asm(CODE)[0])):\n...     print (hex(ks.asm(CODE)[0][i])),\n...\n0xf0 0x81 0x84 0x4e 0x67 0x45 0x23 0x1 0xef 0xcd 0xab 0x89\n>>> print CODE\nLOCK ADD DWORD PTR DS:[ESI+ECX*2+0x1234567], 0x89ABCDEF\n\n```\nthe setting 6 you have circled in you screen shot limits the number of displayed opcodes to a maximum of 6 bytes only \nso in the last instruction above  you will only see a display of \n\n0xf0 0x81 0x84 0x4e 0x67 0x45  and not all of the 12 bytes \n\n",
      "votes": "0",
      "user": "blabb",
      "time": "May 4, 2018 at 13:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}