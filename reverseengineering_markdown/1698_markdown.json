{
  "title": "Bypassing copy protection in microcontrollers using glitching",
  "link": "https://reverseengineering.stackexchange.com/questions/1698/bypassing-copy-protection-in-microcontrollers-using-glitching",
  "content": "The ATmega microcontrollers generally have two lock bits, LB1 and LB2. One prevents further programming, and the other prevents the flash being read back. If both are set, the chip needs to be erased before it can be programmed again. This prevents the flash memory being read out and reverse engineered. Similar mechanisms can be found on many other microcontroller families.\n\nCertain other processors have widely documented bypasses e.g. PIC 18F452, where an individual block can be erased and firmware be written to read out other blocks (documented in \"Heart of Darkness - exploring the uncharted backwaters of HID iCLASSTM security\").\n\nFrom time to time, forum posts are made by companies offering their services to read out protected ATmega chips. There are also sites, generally .ru, that offer these services. Price tends to be around $500-$1500 with a turnaround time of a few weeks.\n\nI suspect at these costs, they are not decapsulating the chip and using a laser probe to reset the fuse bits. I have queried if they return the chip undamaged, but did not get a response.\n\nIn this research (\"Copy Protection in Modern Microcontrollers\"), it is mentioned in the section \"Non-Invasive Attacks on Microcontrollers\" that many microcontrollers can have copy protection bypassed using clock, power or data glitching. However, I have not seen any practical examples or further research in this area. \n\nSeveral years ago, glitching was very popular to bypass protection on the smart cards used in satellite TV receivers, but again, I have not found much information here outside of some circuit diagrams of the glitchers.\n\nDoes anyone have any further information on using glitching to bypass copy protection?\n\n",
  "votes": "52",
  "answers": 5,
  "views": "33k",
  "tags": [
    "hardware",
    "copy-protection"
  ],
  "user": "Cybergibbons",
  "time": "Apr 10, 2013 at 10:57",
  "comments": [
    {
      "user": "zetavolt",
      "text": "I hate making these congratulatory, unproductive statements, but AWESOME question.",
      "time": null
    },
    {
      "user": "user3508",
      "text": "The RussianSemiResearch company can read many MCUs with protection.",
      "time": null
    },
    {
      "user": "user12494",
      "text": "Well, if locking is implemented properly, you cannot play around with boot loader to change lock bits and back read code. But at same time people have written to get avr unlocked for 500$, How do they achieve this? any idea?",
      "time": null
    },
    {
      "user": "Kerim Can Kalıpcıoğlu",
      "text": "In this YouTube channel she do lots of practical examples about glitching and explaining every step, it may help you: youtube.com/channel/UCaEgw3321ct_PE4PJvdhXEQ.",
      "time": null
    },
    {
      "user": "Sparkette",
      "text": "If anyone knows a method for the Intel 87C54 microcontroller, I'd love to hear it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What kind of further information are you looking for? I assume your goal is to read out the flash contents of an ATmega microcontroller. You found information on how the glitchers work, now I guess you want a confirmation that this is generally possible before committing to building one? In that case yes it's possible. I can't provide you any papers because it's based on practical experience (not necessarily on an ATmega mcu).\n\nSince there is generally no way to provide the core clock to an embedded board yourself (unlike with smartcards) you'll have to do either power,laser or electromagnetic glitching. Assuming you'll do power you basically have to replace the core power source of the target by one provided by you. In this you can inject your power glitches (negative or positive).\n\nThere are many reasons why the copy protection might be bypassed all depending on the implementation of the protection mechanism. Some moments in time you can try are:\n\n",
      "votes": "16",
      "user": "ixje",
      "time": "Apr 11, 2013 at 7:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "Cybergibbons",
          "text": "Thanks for the answer. I wasn't specifically wanting to bypass an ATmega, it was just an example of a microncontroller where there is no commonly known method. I was really looking for a practical hardware and software example of this - everything seems very wordy.",
          "time": null
        }
      ]
    },
    {
      "content": "It's not directly targeted at bypassing copy protection, but there is substantial research in glitching embedded systems via fault injection by Jasper van Woudenberg.  Applications of his research include manipulating branch decisions and leaking instructions and crypto keys, so there are likely avenues to apply it to your target as well.\n\nSlides from his talk in 2012 may be found here: http://www.riscure.com/news-events/fault-injection-attacks-on-embedded-chips (more publications by the company may be found here)\n\nHe very recently gave a talk at Infiltrate 2013 that touched heavily in this area, so keep a look out for for slides and video from that.\n\nAdditionally, it may be worthwhile to learn about the Xbox 360 glitch hack and the process involved there. \n\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "Jun 29, 2016 at 13:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "Mellowcandle",
          "text": "Xbox glitch hack link is dead",
          "time": null
        }
      ]
    },
    {
      "content": "In order to read out the flash contents for an Atmel AVR ATmega MCU，you can break the master chip. It doesn't return the chip undamaged, but provides the code and program.\n\n",
      "votes": "1",
      "user": "Gilles 'SO- stop being evil'",
      "time": "Aug 15, 2013 at 12:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Cybergibbons",
          "text": "Do you been decapping the chip and read the flash visually or using a laser? This is possible, but not the question I am asking.",
          "time": null
        }
      ]
    },
    {
      "content": "This isn't really an answer to your question, but a different approach I've been thinking of for few hours.\n\nFrom my experience, the locking of the JTAG port is done by software, by setting a specific register to a specific value. this information can easily be obtained from the manual of the microcontroller.\n\nMy idea is to attack from the software side, not the hardware.\n\nAssumptions:\n\nMy idea, is to alter the firmware file, and inject the specific opcode that clears the locking register.\n\nThis is only an idea, I never tried it before, but I guess it's possible....\n\n",
      "votes": "0",
      "user": "Mellowcandle",
      "time": "Apr 11, 2013 at 11:28",
      "is_accepted": false,
      "comments": [
        {
          "user": "nneonneo",
          "text": "If the locking is implemented correctly, it should be impossible to change the firmware without a reset.",
          "time": null
        },
        {
          "user": "Mellowcandle",
          "text": "I can't speak for all microcontrollers, But in Atmel's SAM3 (Arm Cortex M3) it's a bit which can be changed back and forth.",
          "time": null
        },
        {
          "user": "nneonneo",
          "text": "That's not much of a lock then, is it? I don't believe that's the case for their AVR controllers.",
          "time": null
        },
        {
          "user": "Mellowcandle",
          "text": "you're right regarding AVR's, as stated here: electronics.stackexchange.com/questions/53282/…",
          "time": null
        },
        {
          "user": "Cybergibbons",
          "text": "As this isn't about glitching, I don't think this should be an answer here.",
          "time": null
        }
      ]
    },
    {
      "content": "I have seen one of this companies in China, I have seen a lot of microscopes, so I assume the decapsulating the chip and do some modifications on the chip. \n\n",
      "votes": "-1",
      "user": "WalterH",
      "time": "Oct 5, 2015 at 19:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}