{
  "title": "Why does vtable function pointers have +1?",
  "link": "https://reverseengineering.stackexchange.com/questions/14054/why-does-vtable-function-pointers-have-1",
  "content": "So here is a byte sequence 45 A6 F7 in the vtable.\nIt points to a subroutine which is located at F7A644.\nIDA expresses it as \"function_symbol +1\"\nWhy does it plus one?\nWhy is it 45 A6 F7 rather than 44 A6 F7?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "470",
  "tags": [
    "ida",
    "disassembly",
    "arm",
    "vtables"
  ],
  "user": "ManDongI",
  "time": "Jan 23, 2017 at 10:09",
  "comments": [
    {
      "user": "Jongware",
      "text": "Please edit your question and add what architecture (and, if important, what OS) this code is for. At least with the correct tags, and preferably also in the main text.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If it is ARM architecture that may use THUMB encoding it can be result of the following issue:\n\nIf I remember correctly, calls to the virtual functions can be executed with assembly command similar to BLX as indirect jump, which allows switching between ARM and THUMB encoding. In this case this + 1 means that the target of the jump is encoded in THUMB.\n\nSee here for more information about this mechanism.\n\n",
      "votes": "9",
      "user": "w s",
      "time": "Nov 27, 2016 at 10:25",
      "is_accepted": true,
      "comments": []
    }
  ]
}