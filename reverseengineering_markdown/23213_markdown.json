{
  "title": "QEMU Translation block",
  "link": "https://reverseengineering.stackexchange.com/questions/23213/qemu-translation-block",
  "content": "I'm studying how QEMU translates native basic blocks and runs them. As far as I understand, it reads native basic blocks then retranslates them, but I wonder how it can deal with exceptions inside, so I run the following program:\n\n```\n// pgfault.c\nint main() {\n    __asm__(\n        \"xor rax, rax  \n\\t\"\n        \"mov rbx, [rax]  \n\\t\"\n        \"xor rcx, rbx  \n\\t\"\n        \"add rax, rcx  \n\\t\"\n        );\n}\n\n// compile\nx86_64-w64-mingw32-gcc pgfault.c -masm=intel -o pgfault.exe\n\n// and run in PANDA/QEMU\n\n```\nIndeed, I get the trace:\n\n```\n// first translation block\n0x401510           xor rax, rax    ; first instruction of main\n; second instruction generates a page fault\n\n// second translation block (KiPageFault in ntoskrnl.exe)\n0xfffff80026e4600  push rbx\n0xfffff80026e4601  sub rbp, 0x158\n\n```\nThe second instructions generates a page fault, then the translation block contains only the first instruction. How can QEMU/PANDA knows that ahead of time (i.e. at translation step)?\n\n",
  "votes": "4",
  "answers": 0,
  "views": "175",
  "tags": [
    "qemu",
    "emulation"
  ],
  "user": "Ta Thanh Dinh",
  "time": "Feb 8, 2020 at 2:02",
  "comments": [],
  "answers_data": []
}