{
  "title": "Is this a good way to get past anti-debugging measures?",
  "link": "https://reverseengineering.stackexchange.com/questions/19876/is-this-a-good-way-to-get-past-anti-debugging-measures",
  "content": "This program I am analyzing is full of anti-debugging.  It won't even run if most debuggers are loaded before I start the app.\n\nI tried using IDA to static analyze it, but it was written in a OOP language, and has many calls to pointers inside registers; so I keep getting stuck digging in.\n\nSo, I'm wondering if it's possible to patch the .exe with code above the calls to record the register values, and maybe the line of the instruction. and then I can see what functions/methods are being called.\n\nI added a bunch of zero bytes to the end of the .exe, and it ran, so it doesn't seem to have any checksum verification.\n\nWill this be possible?\n\n",
  "votes": "3",
  "answers": 3,
  "views": "2k",
  "tags": [
    "assembly",
    "static-analysis"
  ],
  "user": "DeyMac",
  "time": "Nov 13, 2018 at 8:45",
  "comments": [
    {
      "user": "defragger",
      "text": "You could try something like ScyllaHide for x64dbg. A lot of anti debugging tricks are covered by this plugin already. There's also a good text by Peter Ferrie \"The Ultimate Anti-Debugging Reference\".",
      "time": null
    },
    {
      "user": "DeyMac",
      "text": "i'm using that; I still can't get passed putting in break points, whenever I set a break point on a button, the software alerts me, and stopps executing..when I remove it, it works fine...",
      "time": null
    },
    {
      "user": "defragger",
      "text": "Right at the moment the  breakpoint is hit or directly after setting it?",
      "time": null
    },
    {
      "user": "DeyMac",
      "text": "I set the break point at the beginning of a button click event, and the APP alerts me after I click the button, but it doesn't crash the app...I can remove the break point and the app continues as normal",
      "time": null
    },
    {
      "user": "DeyMac",
      "text": "it does the same for memory and hardware break points",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For example I used this command to show the time travel position for all text written to a file I could then click the hyperlink generated to go to exact register/thread/memory state when that text was written to file \n\nbp kernel32!WriteFile \"!position;.printf \\\"%mu\\\",@rdx;g\"\n\nTo go forwards use g command, to go backwards g-, to step single instruction forward t and step instruction backwards t-\n\n",
      "votes": "1",
      "user": "Yennefer",
      "time": "Jan 8, 2020 at 9:55",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "It depends on what you are trying to achieve:\n\nFor the first case, I normally try to use a non invasive debugger attached after suspending the process. If this does not work, I dump the whole process with SysInternals Process Explorer or WinDbg after suspending the process. The I use Ghidra do analyze the whole dump. I noted that IDA has issues in analyzing those dumps (sometimes peculiar parts are not detected) but you can combine them. This would give you the ability to analyze the code. If the code is self modifying you should use the second approach.\n\nFor the second case (and as last resort) I use a specially modified VM to remotely debug the application in non invasive mode. The VM is crafted with a custom rootkit that hides the processes you want (in particular, debuggers), this way you can debug the whole system in kernel mode without being detected.\n\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "May 28, 2022 at 20:58",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I think CRC routine is inside code, maybe more than one for different part  of code. It's not necessary checksum at the end of whole of file. For  example its possible count sum of bytes and  compare it with a value  inside a register. Do you are debugging win32/64 or android file?\n\n",
      "votes": "0",
      "user": "Silvius",
      "time": "Nov 12, 2018 at 18:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "DeyMac",
          "text": "what do you mean? I didn't ask about that, I asked if it would work in theory, if I were to patch the exe to add code to get register values at certain places",
          "time": null
        }
      ]
    }
  ]
}