{
  "title": "PE Self Injection Not Working",
  "link": "https://reverseengineering.stackexchange.com/questions/27120/pe-self-injection-not-working",
  "content": "I'm working on different PE Injection technique. I want to inject PE file into virtual memory of the current executable. After that, I want to execute the injected PE file, I wrote an injection code, but my method is not working.\n\nDOS header and NT header parse correctly, I write correctly sections and create new thread on the entrypoint of the .text section, but the thread is not working. What is the problem here?\n\n```\n#include <iostream>\n#include <windows.h>\n\nint main()\n{\n    DWORD* ImageBase;\n    void* pImageBase;\n    IMAGE_NT_HEADERS* NTHeader;\n    IMAGE_DOS_HEADER* DOSHeader;\n    IMAGE_NT_HEADERS* mem_NTHeader;\n    IMAGE_DOS_HEADER* mem_DOSHeader;\n    IMAGE_SECTION_HEADER* SecHeader;\n    unsigned char memory_pe[] = { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, ........} // This is binary of PE file.\n    DOSHeader = PIMAGE_DOS_HEADER(memory_pe);\n    NTHeader = PIMAGE_NT_HEADERS(DWORD(memory_pe) + DOSHeader->e_lfanew);\n    pImageBase = VirtualAlloc(NULL, NTHeader->OptionalHeader.SizeOfImage, 0x3000, PAGE_EXECUTE_READWRITE);\n    memcpy(pImageBase, memory_pe, NTHeader->OptionalHeader.SizeOfHeaders);\n    for (int i = 0; i < NTHeader->FileHeader.NumberOfSections; i++) {\n        SecHeader = (PIMAGE_SECTION_HEADER)(DWORD(memory_pe) + DOSHeader->e_lfanew + 248 + (i * 40));\n        memcpy(LPVOID(DWORD(pImageBase) + SecHeader->VirtualAddress), LPVOID(DWORD(memory_pe) + SecHeader->PointerToRawData), SecHeader->SizeOfRawData);\n    }\n    mem_DOSHeader = PIMAGE_DOS_HEADER(pImageBase);\n    mem_NTHeader = PIMAGE_NT_HEADERS(DWORD(pImageBase) + mem_DOSHeader->e_lfanew);\n    CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)(DWORD(pImageBase) + mem_NTHeader->OptionalHeader.BaseOfCode), NULL, 0, NULL);\n    return 0;\n}\n\n```\n",
  "votes": "-1",
  "answers": 1,
  "views": "175",
  "tags": [
    "windows",
    "pe",
    "injection"
  ],
  "user": "Crazy Programmer",
  "time": "Aug 10, 2021 at 17:44",
  "comments": [
    {
      "user": "peter ferrie",
      "text": "is BaseOfCode set correctly?  It's an optional field and might not contain any meaningful value.  The proper starting point is the AddressOfEntryPoint field.",
      "time": null
    },
    {
      "user": "Crazy Programmer",
      "text": "I tried put AddressOfEntryPoint instead BaseOfCode but, issue still continues.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Loading and successfully running code associated with an arbitrary PE may require some additional steps e.g. relocation. Consider converting the EXE into a DLL like this or this so that you can use Windows APIs to load the code for you.\n\n",
      "votes": "1",
      "user": "P. Private",
      "time": "Feb 28, 2021 at 22:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "Crazy Programmer",
          "text": "Thank you for supply valuable sources to me. I will try and reply to you.",
          "time": null
        },
        {
          "user": "Crazy Programmer",
          "text": "I reviewed the sources you posted but I don't mean I want translate exe to DLL.",
          "time": null
        },
        {
          "user": "P. Private",
          "text": "In that case you may need to debug the code to see where it is not working appropriately. Without the compiled EXE, I can only guess what is happening.",
          "time": null
        }
      ]
    }
  ]
}