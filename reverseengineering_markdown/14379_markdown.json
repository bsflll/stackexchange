{
  "title": "How to distinguish different compiler codes in ASM?",
  "link": "https://reverseengineering.stackexchange.com/questions/14379/how-to-distinguish-different-compiler-codes-in-asm",
  "content": "While reversing an executable with olly, theres compiler code and user code. So how do i recognise the compiler codes ? Lets say if the executable is visual basic, it has a jmp and a call in the first 2 instructions and the winmain comes later.\n\n",
  "votes": "6",
  "answers": 1,
  "views": "239",
  "tags": [
    "ollydbg"
  ],
  "user": "Lian",
  "time": "Jan 12, 2017 at 14:47",
  "comments": [],
  "answers_data": [
    {
      "content": "You just need to identify the main function. Everything called from main is user code. If you want to check if a function is part of user code, recursively check the xref starting from that function and see if it ends up in main. As for how to identify main, it depends on the OS that the executable is compiled for and possibly the specific compiler too. But for ELF files compiled by gcc for Linux, main is the last value pushed before calling __libc_start_main in start.\n\n",
      "votes": "1",
      "user": "yellowbyte",
      "time": "Jan 13, 2017 at 10:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "user18767",
          "text": "yea, i think tat would apply in ida, tracing back with xref. any idea of how to do it manually??",
          "time": null
        },
        {
          "user": "yellowbyte",
          "text": "Sure. Find all functions called from main. Each time you find a function, add it to a list and then find all functions called from that function. So if a function exists in that list, that means that it's part of user code.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "\"Everything called from main is user code\"? That is a bold statement. Not only can you put user calls into main (even if only a lowly printf (\"Please supply an argument to this command  \n\");), but there may also be template calls inside main to initialize global data, call system maintenance routines, or prologues and epilogues, etc.",
          "time": null
        },
        {
          "user": "yellowbyte",
          "text": "Sorry, I'm confused as to what you are saying. When you say template calls, you mean function template? Function template can be declared and defined by users. Global data are part of user code. They are placed in .data or .bss section but referenced in user code. System maintenance routines are called before main right? In the start function? And when you say prologues/epilogues, you mean function prologues and function epilogues? That just defines how function set and clean up itself. User don't explicitly write the prologues and epilogues, but it's just what functions are compiled down to.",
          "time": null
        },
        {
          "user": "yellowbyte",
          "text": "I apologize if I misunderstood your reply @Rad_Lexus.",
          "time": null
        }
      ]
    }
  ]
}