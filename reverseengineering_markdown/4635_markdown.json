{
  "title": "What's the difference between a disassembler, debugger and decompiler?",
  "link": "https://reverseengineering.stackexchange.com/questions/4635/whats-the-difference-between-a-disassembler-debugger-and-decompiler",
  "content": "I have heard of disassemblers like IDA and debuggers like OllyDbg but honestly, when you give both of them a binary file it gives me the assembly code. I know that the decompiler gives the source code if you provide it a binary. However, I don't know how they differ in terms of mode of operationand I ask myself questions like \"Why can a android/python code be decompiled but a C code be only disassembled?\"\n\nCan anyone give a precise difference between these 3 kinds of tools?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "23k",
  "tags": [
    "disassembly",
    "decompilation",
    "binary-analysis",
    "debuggers"
  ],
  "user": "Pervy Sage",
  "time": "Jun 18, 2014 at 19:06",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "related: reverseengineering.stackexchange.com/questions/311",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "These terms are currently defined on this site as follows:\n\nDisassembler:\n\nDebugger:\n\nDecompiler:\n\n",
      "votes": "15",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Pervy Sage",
          "text": "Ok. I at least understand a decompiler but I still don't understand difference between disassembler and debugger. I was seeing some of the tutorials on REing  and find the guys stepping through the assembly code (in a disassembler). In that case, isn't the code code running? So how does this differ from a debugger?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "A debugger contains a disassembler so that you can see the disassembled code through which you're stepping. However, not all disassembler tools contain live-debugging functionality.",
          "time": null
        }
      ]
    },
    {
      "content": "I would like to add the following definition to avoid any doubts:\n\nExcerpted from official hex-rays doc\n\nConclusion, the decompilers alleviate both problems compared to disassemblers: their output is shorter and less repetitive.\n\n",
      "votes": "1",
      "user": "js1984",
      "time": "Dec 12, 2016 at 13:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "A major difference, as yet unmentioned, between disassembling and decompiling is that disassembly is deterministic. Every machine code instruction disassembles to precisely one assembler instruction (I'll not mention the data/code dichotomy here, which is a kind of a Halting Problem). When decompiling, on the other hand, a single instruction may be translated into a number of expressions, and conversely, any number of instructions may be gathered into one high level expression â€“ all at the discretion of the decompiler. Different decompilers may yield different results.",
          "time": null
        },
        {
          "user": "Soufiane Tahiri",
          "text": "If you are looking for a simple/simplistic answer: a  Disassembler is a tool that transforms a binary to a low level language / mnemonic / assembly while a decompiler transforms the binary to (theoretically, or not...) its primary high level language used to code this binary. Meaning that not every binary could be decompiled but every binary could be disassembled. .NET assemblies and JAVA files for exemple once decompiled could be transformed to their original C#/Java code.",
          "time": null
        }
      ]
    }
  ]
}