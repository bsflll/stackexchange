{
  "title": "Is it possible to intercept syscalls with a custom code from inside the program?",
  "link": "https://reverseengineering.stackexchange.com/questions/27169/is-it-possible-to-intercept-syscalls-with-a-custom-code-from-inside-the-program",
  "content": "I have a binary calling syscall with a code not present on the Linux kernel.\n\nIs it possible that the binary catches the syscall by itself and handles it on-the-fly?\n\nFurthermore, what happens if I call syscall with an invalid code? e.g. syscall(666, args...)\n\nI've searched the internet for answers and didn't find anything.\nI am aware that syscalls are defined when the kernel boots, so getting an \"exotic\" syscall to works seems weird at least.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "836",
  "tags": [
    "linux",
    "syscall"
  ],
  "user": "jmgd",
  "time": "Mar 6, 2021 at 23:28",
  "comments": [],
  "answers_data": [
    {
      "content": "I think intercepting system calls can be done in at least 3 ways:\n\nFrom Emulating Windows system calls in Linux:\n\nMore info:\n\n",
      "votes": "1",
      "user": "julian",
      "time": "Mar 7, 2021 at 20:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}