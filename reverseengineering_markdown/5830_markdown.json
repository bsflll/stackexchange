{
  "title": "How to identify functions in a stripped binary on x86 32bit?",
  "link": "https://reverseengineering.stackexchange.com/questions/5830/how-to-identify-functions-in-a-stripped-binary-on-x86-32bit",
  "content": "I am trying to generate a coarse-grained Call Graph based on some assembly code disassembled from binary on x86 32 bit platform.\n\nIt is very hard to generate a precise Call Graph based on asm code, thinking of various indirect control flow transfer, so right now I only consider direct control flow transfer.\n\nSo firstly I am trying to identify functions (begin and end addresses) in the disassembled assembly code \nfrom a stripped binary on x86, 32bit.\n\nRight now, my plan is somehow like this:\n\nAs for the begin addresses, I might conservatively consider any assembly code looks like this\n\n```\n    push %ebp\n\n```\nindicates the beginning address of a function.\n\nand also, I might scan the whole problem, identifying all the call instruction with the destination, the consider these function call's destinations as all the function begin address\n\nThe problems are:\n\nAs for the end address, things become more tricky because multiple ret could exist in one single function...\n\nSo I am thinking that I might conservatively consider the range between any nearest function begin addresses, as one function..\n\nAm I right? Is there any better solution..?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "4k",
  "tags": [
    "disassembly",
    "assembly",
    "binary-analysis",
    "static-analysis"
  ],
  "user": "lllllllllllll",
  "time": "Jul 11, 2014 at 18:30",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "The easiest way would probably be to get IDA 5.0 (the free version) and let it do the work.",
      "time": null
    },
    {
      "user": "perror",
      "text": "You may also consider using radare2. See, the question: Recursive traversal disassembling with Radare2?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Reversing the call graph or the control flow graph of a binary isn't for the faint of heart, and is still a hot topic for researchers.\n\nYour approach looks promising; but, unfortunately for you, you'll stumble upon lots of barriers.\n\nOne, following call instructions is most likely to give great results, if analyzing statically the binary file. The only problem is that, sometimes, you'll have indirect calls/jumps. Meaning, the operand will be a register containing the target address. This will occur very often if the target binary file original source code was written in C++ (virtual functions) for example. One way to obtain the target address in this case is to emulate or run the chunk of code that computes it. Another is to assess its value heuristically (heuristics are hell). \n\nTwo, you can run your binary file with multiple input data sets and dynamically extract the call graphs (this can be performed through instrumentation). You can then cross reference all the obtained call graphs ...\n\nThree, I would recommend a basic-block centric approach rather than a functional one. Mainly, because a function is a basic-block in itself and you'll have more luck finding functions this way than trying to match patterns which can change from one compiler to another, or from one version of a compiler to another. \n\nThe following publications are extremely interesting : [1], [2], [3], and also I would encourage you to check DynInst and callgrind if you want to learn more about the subject.    \n\n",
      "votes": "8",
      "user": "yaspr",
      "time": "Jul 11, 2014 at 8:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jongware",
          "text": "I've had some success in following calls and doing (minimal!) emulation for register jumps. See a sample output snippet here. Recommended on-line reading: Decompiler Design -- esp. the Basic Block approach.",
          "time": null
        }
      ]
    },
    {
      "content": "Generally, the solutions to this problem can be classified to:\n\nI've recently revisited the problem of function identification in this blog post where I provide more details.\n\n",
      "votes": "1",
      "user": "Codoka",
      "time": "May 27, 2020 at 7:19",
      "is_accepted": false,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "Cool. Thank you for summarizing the problem in a nice way. It's 2020 now and go solo to publish research papers on \"identifying function boundaries\" might not be as promising as when I posted this question five years ago. But yes, it's always nice to see binary hacking folks constantly explore and publish papers in this field.",
          "time": null
        }
      ]
    }
  ]
}