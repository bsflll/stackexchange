{
  "title": "winmain reversing the assembly to c code",
  "link": "https://reverseengineering.stackexchange.com/questions/13972/winmain-reversing-the-assembly-to-c-code",
  "content": "\n\nthis is I got so far \n\n```\n#include <windows.h>\n\nint WinMain(HINSTANCE hlnst,HINSTANCE hPrev, LPSTR lpCmd,int nShow){\n\n    int k =0; \n    int j= 0 ;  \n    MessageBox(0,\"crackname\",\"\",0);\n\n    int i;\n    for (i=0; *(lpCmd+i)  ; i++) {\n    }\n    while (i < j) {\n        j = *(lpCmd + i);//j = ECX *lpCmd = EDX\n        *(lpCmd) = i + *(lpCmd);\n    }\n    MessageBox(0,\"success\",\"\",0);\n    return 0;\n}\n\n```\nI'm stuck with \n\n```\n  LEA ECX,DWORD PTR DS:[EAX+EDX-2F] \n\n```\nanyone give me some hint to solve this question?\nis this represent the pointer?\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "597",
  "tags": [
    "disassembly",
    "c",
    "disassemblers"
  ],
  "user": "kingyum",
  "time": "Nov 18, 2016 at 11:32",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "At least include addresses in your disassembly output, insert matching comments into the C code, and post all of the function if you want to give us any chance to read your code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Although the complete picture of your assembly cannot be reconstructed, as there is something missing at the bottom, it can be said that your C re-coding is correct in the first (and simpler) loop, but wrong in the second loop.\n\nFirst loop: This is simply a strlen of the command line parameter,        being stored in the local variable i.\n\nSecond loop: Calculation of k    from each character of the command line (presumably, because the rest    of the loop is missing), taking    into account the old k value. Probably that algo is part of your crackme.\n\nAlso, your \"while\" comparison of the 2nd loop is wrong. \n\nThe re-compiled code as I see it could look like follows (probably correct until the last statement of the second loop, the rest remained your secret):\n\n```\n int WinMain(_In_ HINSTANCE hInstance, \n    HINSTANCE hPrevInstance,\n    LPTSTR    lpCmd,            //ebp+10h\n    int       nCmdShow)\n{\n    int j = 0;      //ebp-4\n    int i = 0;      //ebp-8\n    MessageBox(0, \"crackname\", \"\", 0);\n    int k = 0;      //ebp-c\n\n    //you got this correct\n    //i contains the string length at lpCmd, i.e. the command line parameter length\n    for (i = 0; *(lpCmd + i); i++) {\n    }\n\n    //iterate through all elements of the parameter and calculate sth.\n    //the algo calculates k and probably j is incremented. \n    //However, the rest of the loop is missing in your assembler code\n    while (j < i) {\n        k = *(lpCmd + j)+k-0x2f; //this contains the lea statement\n        //from here, your code is missing\n        j++;\n    }\n    //MessageBox(0, \"success\", \"\", 0);\n    //return 0;\n}\n\n```\n",
      "votes": "0",
      "user": "josh",
      "time": "Nov 19, 2016 at 16:17",
      "is_accepted": false,
      "comments": []
    }
  ]
}