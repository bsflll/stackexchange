{
  "title": "is there any way to get type information using IDA Demo",
  "link": "https://reverseengineering.stackexchange.com/questions/23478/is-there-any-way-to-get-type-information-using-ida-demo",
  "content": "I am using IDA Demo (evaluation version >7). I have a binary:\n\n```\n#include <stdbool.h>\nint do_decode(){}\nint main()\n{\n  bool decode = false;\n  char opt = getopt();\n  switch (opt)\n  {\n    case 'd':\n      decode =true;\n      break;\n    default:\n      break;\n  }\n  if (decode) do_decode();\n}\n\n```\nIs there any way to get variable information using IDA?\n\nI couldn't get variable type information in either case. For e.g. what I get from radare2:\n\n```\n[0x004004b9]> afv\nvar int64_t var_2h @ rbp-0x2\nvar uint32_t var_1h @ rbp-0x1\n\n```\nThis is far from perfect, but at least something.\n\nHere is my IDA textview:\n\n```\n; =============== S U B R O U T I N E =======================================\n.text:00000000004004B9\n.text:00000000004004B9 ; Attributes: bp-based frame\n.text:00000000004004B9\n.text:00000000004004B9 ; int __fastcall main(int, char **, char **)\n.text:00000000004004B9 main            proc near               ; DATA XREF: start+1Dâ†‘o\n.text:00000000004004B9\n.text:00000000004004B9 var_2           = byte ptr -2\n.text:00000000004004B9 var_1           = byte ptr -1\n.text:00000000004004B9\n.text:00000000004004B9                 push    rbp\n.text:00000000004004BA                 mov     rbp, rsp\n.text:00000000004004BD                 sub     rsp, 10h\n.text:00000000004004C1                 mov     [rbp+var_1], 0\n.text:00000000004004C5                 mov     eax, 0\n.text:00000000004004CA                 call    _getopt\n.text:00000000004004CF                 mov     [rbp+var_2], al\n.text:00000000004004D2                 movsx   eax, [rbp+var_2]\n.text:00000000004004D6                 cmp     eax, 64h ; 'd'\n.text:00000000004004D9                 jnz     short loc_4004E1\n.text:00000000004004DB                 mov     [rbp+var_1], 1\n.text:00000000004004DF                 jmp     short loc_4004E2\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "143",
  "tags": [
    "ida",
    "type-reconstruction"
  ],
  "user": "R4444",
  "time": "Mar 21, 2020 at 16:04",
  "comments": [],
  "answers_data": [
    {
      "content": "```\n.text:00000000004004B9 opt             = byte ptr -2\n.text:00000000004004B9 decode          = byte ptr -1\n\n```\n^ Isn't that part what you're looking for?\n\n```\nvar int64_t var_2h @ rbp-0x2\nvar uint32_t var_1h @ rbp-0x1\n\n```\nAdditionally, IDA correctly detected that those local variables only occupy one byte each, whereas radare2 thought there are 64 and 32-bit integers (even though their offset on the stack differs by only one byte).\n\nYou could also get this information programatically, but unfortunately IDAPython is not available in the evaluation version.\n\n",
      "votes": "1",
      "user": "neat",
      "time": "Mar 21, 2020 at 9:41",
      "is_accepted": false,
      "comments": [
        {
          "user": "R4444",
          "text": "thanks for your reply. In case of radare, it gives you a specific type - int64_t. I want similar type information from IDA.",
          "time": null
        },
        {
          "user": "neat",
          "text": "The name doesn't really matter. In the section I highlighted, you get the size of the type (byte/word/dword/qword). The only thing missing is the signedness. Plus the type information from radare is wrong, since your decode variable is a bool and opt a char.",
          "time": null
        },
        {
          "user": "R4444",
          "text": "I think it does matter in case we want to distinguish between say - type bool and char - I believe both of size byte. You are right that the types radare gives are wrong. I just wanted to check if IDA distinguishes between such small types and give me better results. In short, if IDA is capable of giving me better type inference.",
          "time": null
        },
        {
          "user": "neat",
          "text": "I'm afraid you can't get more information that what is shown here or in the Stack Variables view (that is shown when double-clicking a local variable), without needing the Hex-Rays decompiler.",
          "time": null
        },
        {
          "user": "R4444",
          "text": "Thanks so much for your reply! that helps a lot.",
          "time": null
        }
      ]
    }
  ]
}