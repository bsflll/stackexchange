{
  "title": "How calls work in x86",
  "link": "https://reverseengineering.stackexchange.com/questions/15644/how-calls-work-in-x86",
  "content": "I am studying some X86 code and I often see calls:\n\n```\ncall sym.imp.printf\ncall sym.imp.scanf\ncall sym.imp.strcmp\ncall sym.imp.__stack_chk_fail\n\n```\nThose examples are the most common calls.\nBut how do they actually work?\nI mean, I know they are system calls, also printf along with scanf, strcmp are C functions. But my question is where do they get the parameters from?\n\nsym.imp.strcmp: where is it getting strings from to compare?\n\nWhere is the value of scanf saved?\n\nAnd also, what does the call sym.imp.__stack_chk_fail does?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "9k",
  "tags": [
    "assembly",
    "x86",
    "system-call"
  ],
  "user": "Florin",
  "time": "Jun 23, 2017 at 17:09",
  "comments": [],
  "answers_data": [
    {
      "content": "System calls vs. function calls\n\nMany C library functions are wrappers around system calls. printf and scanf are are examples of this. However, it should not be assumed that all C library functions execute system calls, as none of the string.h library functions, including strcmp,  execute any system calls.\n\nThe mechanism by which system calls are made is quite different than by that which function calls are made:\n\nHere is a visual depiction of the C library function execve being executed, in which execve makes a system call:\n\n\n\nx86 calling conventions\n\nWhen a function is called, flow of control branches to a different location in memory via the call instruction:\n\nHere is some simple example code:\n\n```\n0804841d <main>:\n 804841d:       55                      push   %ebp\n 804841e:       89 e5                   mov    %esp,%ebp\n 8048420:       83 e4 f0                and    $0xfffffff0,%esp\n 8048423:       83 ec 20                sub    $0x20,%esp\n 8048426:       c7 44 24 18 f0 84 04    movl   $0x80484f0,0x18(%esp)\n 804842d:       08 \n 804842e:       c7 44 24 1c 04 00 00    movl   $0x4,0x1c(%esp)\n 8048435:       00 \n 8048436:       8b 44 24 18             mov    0x18(%esp),%eax\n 804843a:       89 44 24 08             mov    %eax,0x8(%esp)         <--- argument 3\n 804843e:       8b 44 24 1c             mov    0x1c(%esp),%eax\n 8048442:       89 44 24 04             mov    %eax,0x4(%esp)         <--- argument 2\n 8048446:       c7 04 24 0a 85 04 08    movl   $0x804850a,(%esp)      <--- argument 1\n 804844d:       e8 9e fe ff ff          call   80482f0 <printf@plt>   <--- function call\n 8048452:       b8 00 00 00 00          mov    $0x0,%eax\n 8048457:       c9                      leave  \n 8048458:       c3                      ret\n\n```\nHere, the memory address that execution branches to when printf is called via call is 0x80482f0.\n\nArguments are pushed onto the stack in reverse order of their corresponding parameters in the function definition prior to the function call. The return value is saved in %eax. This is in accordance with x86 calling convention, referred to as cdecl:\n\nFor a more in-depth discussion of x86 calling conventions, refer to the x86 ABI documentation found in the System V Application Binary Interface Intel386 Architecture Processor Supplment, Fourth Edition.\n\n__stack_chk_fail and stack guards\n\n__stack_chk_fail is called when the stack canary has been overwritten due to a buffer overflow:\n\nHere is some example annotated code:\n\n```\n000000000040055d <test>:\n  40055d:   55                      push   %rbp\n  40055e:   48 89 e5                mov    %rsp,%rbp\n  400561:   48 83 ec 20             sub    $0x20,%rsp\n  400565:   89 7d ec                mov    %edi,-0x14(%rbp)\n  400568:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax     <- get guard variable value\n  40056f:   00 00 \n  400571:   48 89 45 f8             mov    %rax,-0x8(%rbp)   <- save guard variable on stack\n  400575:   31 c0                   xor    %eax,%eax\n  400577:   8b 45 ec                mov    -0x14(%rbp),%eax\n  40057a:   48 8b 55 f8             mov    -0x8(%rbp),%rdx   <- move it to register\n  40057e:   64 48 33 14 25 28 00    xor    %fs:0x28,%rdx     <- check it against original\n  400585:   00 00 \n  400587:   74 05                   je     40058e <test+0x31>\n  400589:   e8 b2 fe ff ff          callq  400440 <__stack_chk_fail@plt> \n  40058e:   c9                      leaveq \n  40058f:   c3                      retq   \n\n```\n1. The Linux Programming Interface, Chapter 3 \"System Programming Concepts\"\n\n2. x86 Instruction Set Reference - CALL - c9x.me\n\n3. x86 Assembly Guide - University of Virginia Computer Science\n\n4. \"Strong\" stack protection for GCC - LWN.net\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "Florin",
          "text": "Thank you for the answer! Now I understand how things works.  Is there any way to get in touch with you for more informations?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@FineasSilaghi I'm on twitter so you can message me there if you like. What kind of additional information are you interested in?",
          "time": null
        },
        {
          "user": "Florin",
          "text": "I can't find SYS_V via Twitter",
          "time": null
        },
        {
          "user": "julian",
          "text": "@FineasSilaghi twitter.com/_SYS_V",
          "time": null
        }
      ]
    }
  ]
}