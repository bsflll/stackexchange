{
  "title": "OllyDbg Break when memory equals value",
  "link": "https://reverseengineering.stackexchange.com/questions/4345/ollydbg-break-when-memory-equals-value",
  "content": "I'm wanting to have olly run a program and break when a particular memory location equals a given value. For instance, if I could have it run until the value at address 0xFB2D0024 == 0xE9, and then break immediately when that assignment occurs. Please let me know if this is possible!\n\nThe \"conditional\" breaks I found in here did not work, or rather when I right clicked -> breakpoint -> Conditional, and then entered a condition, the program simply broke at the instruction where I right-clicked, regardless of the condition, and not when the condition occurred.\n\nThe closest I can get is right clicking on a particular memory value (in the memory dump) -> breakpoint -> Memory, on write, but this breaks every time a change is made, and not when a specific value is set. Any help would be great! Thanks!\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ollydbg"
  ],
  "user": "zz3star90",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "You can write script for ODbgScript plugin,\n\nIt might look like this: \n\n```\nVAR pDest\nVAR Val\n\nmov pDest, FB2D0024 // dest address\nmov Val, E9 // val to look for\n\nbpwm pDest, 4 // set bp on writing DWORD (4bytes) value.\n__lbl_loop:\nerun\ncmp [pDest], Val\njne __lbl_loop\nbpmc\nLOG \"Catched ^(._.^)\"\n\n```\n",
      "votes": "1",
      "user": "helloworld",
      "time": "May 16, 2014 at 15:21",
      "is_accepted": true,
      "comments": [
        {
          "user": "zz3star90",
          "text": "Thank you. This does what I'm looking for, unfortunately I've now realized that setting a breakpoint on write, and then checking the value it writes is a bit too slow (the memory value is written to hundreds of times a second). Time to move on to a workaround (not involving this memory value).",
          "time": null
        }
      ]
    }
  ]
}