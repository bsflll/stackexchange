{
  "title": "Mnemonic suffixes for x86-64 assembly for AT&T syntax",
  "link": "https://reverseengineering.stackexchange.com/questions/32479/mnemonic-suffixes-for-x86-64-assembly-for-att-syntax",
  "content": "I'm trying to understand suffixes used for the AT&T syntax for the x64 assembly used for instruction mnemonics.\n\nFor regular cases:\n\n```\n'b',     // 8_bit\n'w',     // 16_bit\n'l',     // 32_bit\n'q',     // 64_bit\n't',     // 80_bit\n\n```\nExamples: Intel vs AT&T:\n\n```\ninc word ptr [rbx]        incw   (%rbx)\ninc dword ptr [rbx]       incl   (%rbx)\ninc qword ptr [rbx]       incq   (%rbx)\n\n```\nBut then for floating-point instructions, it's different:\n\n```\nL'b',     // 8_bit\nL'w',     // 16_bit\nL's',     // 32_bit\nL'l',     // 64_bit\nL't',     // 80_bit\n\n```\nIf so, then why does the GCC compiler give me this:\n\n```\nfiadd word ptr [rcx]           fiadds (%rcx)\nfiadd dword ptr [rcx]          fiaddl (%rcx)\n\n```\nCan some confirm if I'm right, or correct me?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "152",
  "tags": [
    "assembly",
    "x86-64",
    "intel"
  ],
  "user": "c00000fd",
  "time": "Nov 7, 2023 at 11:25",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, you are right: Operation suffixes on wikibooks.\n\n",
      "votes": "1",
      "user": "Ruslan Garipov",
      "time": "Nov 8, 2023 at 5:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}