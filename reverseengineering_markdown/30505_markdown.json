{
  "title": "What is the outcome of mov on non bracket memory locations?",
  "link": "https://reverseengineering.stackexchange.com/questions/30505/what-is-the-outcome-of-mov-on-non-bracket-memory-locations",
  "content": "I am having problems distinguishing whether the address is loaded or the content from the address. Please help me clarify.\n\n```\n1. mov     [rsp+78h+arg_0], rsi\n2. mov     rsi, cs:qword_1F39B60\n3. mov     [rsp+78h+arg_38], rsi\n\n```\nLast but not the least this isn't directly connected to my main question but is rsp+78h a fancy way of saying rbp by the disassembler?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "125",
  "tags": [
    "assembly",
    "x86-64",
    "intel"
  ],
  "user": "Sawb",
  "time": "Jun 12, 2022 at 8:49",
  "comments": [],
  "answers_data": [
    {
      "content": "```\npush rbp              ; save the current frame pointer\nmov rbp, rsp          ; create a new frame\nsub rsp, rax          ; allocate space on the stack\n\n```\nHowever, it looks like this program is optimised (omit frame pointers) and is using rsp for all references, so rbp may be used for anything in this case but not its usual job.\n\n",
      "votes": "0",
      "user": "Mega Tonnage",
      "time": "Jun 22, 2022 at 3:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}