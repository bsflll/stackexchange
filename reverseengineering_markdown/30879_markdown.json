{
  "title": "Reversing encrypted file with unknown extension",
  "link": "https://reverseengineering.stackexchange.com/questions/30879/reversing-encrypted-file-with-unknown-extension",
  "content": "Hello to everyone in RE section!\n\nI have a binary file with questionable extension(meaning idk if its exe/dll).\nMultiple variations of this file can be acquired throught connection to remote CDN via program launcher and then saved to disk.\n\nAt first glance (for my limited knowledge view atleast), it appears to be that they are encrypted is some way.\n\nThe program itself unpacks atleast 2 files with .sys and .dll extensions from said file.\nAs I said before multiple variations of this file are nearly identical in supposed PE signature region.\n\nFirst 112 bytes nearly identical, and supposed extension signature always the same (first 3-4 bytes).\n\nFirst file:\n\n\n\nSecond file:\n\n\n\nAlso it appears to me that sequence of chars cfilorux repeats itself multiple times. Am I correct to assume that its XOR encryption?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "198",
  "tags": [
    "binary-analysis",
    "encryption"
  ],
  "user": "Roman Avdeenko",
  "time": "Sep 14, 2022 at 7:27",
  "comments": [
    {
      "user": "Rup",
      "text": "That seems likely, yes, since you’ve got two identical / virtually identical headers. Your best bet as always would be to find the code that does the decryption to work out what the sequence it’s xored with is, but you could also try xoring those fragments against the start of a similar PE file to see if there’s any obvious sequence in the xor stream. If it looks random then it may be a stream cipher you can’t crack and you’ll have to find the decrypt code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Forgot to answer my own question after the hint by Rup.\n\nSo essentially I found decryption function in .text section of program launcher with IDA.\n\n```\n{\n  unsigned int v2; // eax\n  if (imageSize >= 2) {\n    image[imageSize - 1] += 3 - 3 * imageSize;\n    v2 = imageSize - 2;\n    if (imageSize != 2) {\n      do {\n        image[v2] += -3 * v2 - image[v2 + 1];\n        --v2;\n      }\n      while (v2);\n    }\n    *image -= image[1];\n  }\n}\n\n```\n",
      "votes": "1",
      "user": "Roman Avdeenko",
      "time": "Sep 18, 2022 at 2:20",
      "is_accepted": true,
      "comments": []
    }
  ]
}