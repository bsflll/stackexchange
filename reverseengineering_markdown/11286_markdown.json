{
  "title": "Is this code equation solvable?",
  "link": "https://reverseengineering.stackexchange.com/questions/11286/is-this-code-equation-solvable",
  "content": "Assuming the following lines of code:\n\n```\n MOV DWORD PTR FS:[0],EAX\n CALL someRoutine\n MOV EAX,DWORD PTR DS:[EAX+4]\n CMP DWORD PTR DS:[EAX+1204],0\n JE placeInCode\n XOR EAX,EAX\n\n```\nMy goal is to change [someRoutine] in such a way that the JE is always taken - I specifically don't want to tamper with the code outside [someRoutine]. So just think of [someRoutine] as a set of instructions that you can freely change and adapt. \n\nI can't seem to understand how to solve this equation. If there was no MOV instruction after the call, I guess I could just go to the address [EAX+1204] and fill it with 0. But like this, there seem to be too many unknown dependencies. \n\nAny advice?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "287",
  "tags": [
    "disassembly"
  ],
  "user": "vic",
  "time": "Nov 9, 2015 at 13:25",
  "comments": [],
  "answers_data": [
    {
      "content": "Have someRoutine perform the following actions (in C below for example purposes) --\n\n```\nDWORD* p = (DWORD*)malloc(8);\np[0] = 0;\np[1] = (SIZE_T)p - 1204;\nreturn p;\n\n```\nObviously this is a memory-leak since the allocated memory never gets free()'d, so you wouldn't want to use this approach if someRoutine gets called often. However it's not feasible to offer a better recommendation without us knowing the memory layout of the actual program.\n\nEdit: Updated based on @tathanhdinh's suggestion.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Nov 9, 2015 at 17:44",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ta Thanh Dinh",
          "text": "Maybe I am wrong, since the degrees of freedom of this equation is 2 (they are value of EAX and the memory); we may need just a 8 bytes malloc, for example:  dword* p = malloc(4 * 2); p[0] = 0; p[1] = (dword)p - 1204; return p;",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "@tathanhdinh: Nice thinking! I've updated my answer above. Thanks!",
          "time": null
        },
        {
          "user": "Ta Thanh Dinh",
          "text": "Thanks a lots @JasonGeffner. I think we can just change malloc by a stack allocation, then we may not have memory leak, for example: dword a; dword b = 0; a = (dword)&b - 1204; return &b;",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "@tathanhdinh: That assumes that the returned data is evaluated immediately after someRoutine is called. If @vic wants to make this work for each call of someRoutine throughout the program, I don't know that it's safe to assume that the stack values will never get overwritten between the someRoutine call and the check.",
          "time": null
        },
        {
          "user": "Ta Thanh Dinh",
          "text": "Ahhh, you are absolutely right @JasonGeffner. I did not take into account the situation that you described.",
          "time": null
        }
      ]
    }
  ]
}