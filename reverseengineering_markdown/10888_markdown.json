{
  "title": "Modify memory without patching the database",
  "link": "https://reverseengineering.stackexchange.com/questions/10888/modify-memory-without-patching-the-database",
  "content": "Is there a way to modify one or more bytes in memory without making any changes in the database? I know about idc.PatchByte() in idapython, but it will print the message that states that 'This database has been patched' on the next run.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "vdudouyt",
  "time": "Sep 17, 2015 at 14:19",
  "comments": [
    {
      "user": "0xDEADC0DE",
      "text": "You may also try Edit -> Patch program -> Change byte/word in IDA Pro.  PS: Consider to save the state of your IDA Database before changing bytes with Database snapshot manager(Ctrl+Shift+T). It will help you to avoid troubles if something will go wrong.  If you want to patch the binary that you dissect, there are a plenty of ways to do that. You may use Edit -> Patch program -> Apply patches to input file in IDA Pro. Alternatively you may modify a binary in a debugger or with some hex editor. What would you like to modify?",
      "time": null
    },
    {
      "user": "vdudouyt",
      "text": "This is not suitable for me for exactly the same reason why idc.PatchByte() is not suitable for me. I estimated that the first answer will be like that - sorry that I hadn't mentioned this in op post.",
      "time": null
    },
    {
      "user": "орион орионВи",
      "text": "Probably PatchDbgByte(ea,value) from IDA Pro command line or in script will help. As descibed in idc.py this function meant to \"Change a byte in the debugged process memory only\".",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can do it even in free IDA.\nSetup a breakpoint and use its condition property in  Edit BreakPoint.\nThis way you can change registers, memory, and even perform more complex actions.\nFor example:\n\n```\npatch_dbg_byte(rcx+2,0),0\n\n```\nByte at address rcx+2 is cleared when the breakpoint is hit.\n\n",
      "votes": "1",
      "user": "Viktor",
      "time": "Jan 20, 2023 at 0:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Finally I'm answering my own question:\n\n```\nDbgWrite(ea, data)\n    Write to debugger memory.\n    \n    @param ea: linear address\n    @param data: string to write\n    @return: number of written bytes (-1 - network/debugger error)\n    \n    Thread-safe function (may be called only from the main thread and debthread)\n\n```\n",
      "votes": "0",
      "user": "vdudouyt",
      "time": "Nov 14, 2021 at 11:26",
      "is_accepted": false,
      "comments": []
    }
  ]
}