{
  "title": "DOS Executable Segments",
  "link": "https://reverseengineering.stackexchange.com/questions/15331/dos-executable-segments",
  "content": "In a DOS EXE file, if I have sub1, sub2, and sub3, split between two code segments, how do I know which sub is in which segment? There seem to be no physical markers in the exe code.\n\nI know the EXE header gives a couple of these items, but looking at the relocation table for a random large EXE, all the segment addresses there were 0, yet there are actually 20 different segments in the program when I look at it in IDA.\n\nDo programs like IDA just guess at segment sizes and offsets based on code analysis? Or have I missed something important in the DOS EXE file structure?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "634",
  "tags": [
    "dos",
    "segmentation"
  ],
  "user": "RobinHood70",
  "time": "May 12, 2017 at 3:47",
  "comments": [],
  "answers_data": [
    {
      "content": "Theoretically, you can't, since most addresses can belong to at least 16 different segments, but in practice there are some heuristics. For example, for targets of far calls and jumps you know their selector (segment value) and offset in that segment, so if you gather that info over the whole executable, you can figure out (at least roughly) what part belongs to which segment. See here for a specific example\n\nAs for loading EXE files, you can check how IDA does it in the source of the DOS EXE loader in the SDK (ldr/dos). Here's the relevant part (function doRelocs):\n\n```\nuint16 curval = get_word(xEA);\nuint16 base = curval + delta;\nput_word(xEA, base);\nfd.sel = base;\nset_fixup(xEA, &fd);\nif ( dosegs )\n  add_segm_by_selector(base, NULL);\n\n```\nSo basically, a segment is added for each unique relocated selector value. Of course, this may be not enough for some complicated executables, so manual tuning of segment boundaries may be necessary.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "May 17, 2021 at 14:31",
      "is_accepted": true,
      "comments": [
        {
          "user": "RobinHood70",
          "text": "I was already starting to come to this conclusion on further study, but your answer is much more detailed and informative than what I'd figured out so far. Thanks!",
          "time": null
        },
        {
          "user": "ecm",
          "text": "\"any address can belong to 16 different segments\" Not accurate. Addresses between 64 KiB and 1024 KiB can belong to 4096 different segments each. Addresses below 64 KiB have less possible aliases if the A20 line is enabled (addresses beyond 1024 KiB point into the HMA).",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@ecm thanks, updated",
          "time": null
        },
        {
          "user": "ecm",
          "text": "Your update is still incorrect. With A20 enabled the addresses 0 to 0Fh can only belong to segment 0. Each 16 bytes until the 64 KiB boundary, one possible alias adds up, up to 4096 possible aliases.",
          "time": null
        }
      ]
    }
  ]
}