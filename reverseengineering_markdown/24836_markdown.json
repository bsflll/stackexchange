{
  "title": "advapi32.dll changes name of function during forwarding of exports",
  "link": "https://reverseengineering.stackexchange.com/questions/24836/advapi32-dll-changes-name-of-function-during-forwarding-of-exports",
  "content": "I'm trying myself at writing a manual mapper, for injection of DLLs into other processes.\n\nI've come to the point, where I've written a simple \"Hello World\" .dll, that I'm trying to inject into another process.\n\nI have run into the problem, that my sample Hello world DLL relies on functions from the user32.dll, which means that I have to map that one too. The user32.dll relies in itself on other .dll, which are among others imported via the API Set schema.\n\n\n\nTake a note of the exact naming of the imported function, that I marked: EventActivityIdControl\n\nAs it turned out, the functions for this particular API are found in the advapi32.dll.\n\nIf I look at that DLL in CFF explorer, lo and behold there are the correct exports:\n\n\n\nHowever, when I manually parse, the advapi32.dll and look at the exports, I get forwarded exports from ntdll.dll, with the prefix Etw, which messes up my string comparisons.\n\n\nThis prefix seems to be omitted by CFF explorer and other similar software.\n\nI cannot find any information about this behaviour/schema. Can anyone explain, why this is or where I can find out more about this?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "301",
  "tags": [
    "windows",
    "pe",
    "file-format",
    "dll-injection",
    "api"
  ],
  "user": "Burgesstorm",
  "time": "Nov 4, 2023 at 20:47",
  "comments": [
    {
      "user": "blabb",
      "text": "use vs dumpbin cff explorer  migh tbe old I don't know  C:\\>dumpbin /exports c:\\Windows\\System32\\advapi32.dll | grep -i acti        1288  11E          EventActivityIdControl (forwarded to ntdll.EtwEventActivityIdControl)  C:\\>",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Shortly after posting the question I took a closer look at my code for parsing the exports and came to the realization, that I made an incorrect assumption.\n\nIn the export directory entries, if a function entry point to the export section, you can find a string there, which depicts the forwarder export name. An example of that is visible in the last screenshot of my original question.\n\nI was under the impression, that the name after the dot is also the name of the function as it is exported by the forwarding DLL itself.\n\nThis is wrong. There is still a valid export name entry in the Export Names Table (EAT), that must be read to accomplish correct import to export name mapping.\n\nI hope this explanation helps some other poor soul, that wastes hour on the same wrong assumption.\n\nHere is a picture of the mapping from the forwarded function name to the name, that is used to export that forwarded function in the advapi32.dll.\n\n\n\nAs you can seen the export in the ntdll.dll has the Etw prefix, that I was talking about and the named export in the advapi32 dll does not have this Prefix, which led me to my initial assumption, that CFF explorer was omitting the prefix.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Nov 4, 2023 at 20:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Who said the name when attaching .DEF file must be same?\nFor example:\n\n```\nLIBRARY \"A.DLL\"\n\nEXPORTS\n    AABBCC = ANOTHER.ABCABC\n\n```\nIn the advapi32.dll, it might be this (for example, only EqualSID and EventActivityIdControl is included):\n\n```\nLIBRARY \"ADVAPI32.DLL\"\n\nEXPORTS\n    EqualSID\n    EventActivityIdControl = ntdll.EtwEventActivityIdControl\n\n```\n",
      "votes": "-1",
      "user": "winapiadmin",
      "time": "Nov 4, 2023 at 13:59",
      "is_accepted": false,
      "comments": []
    }
  ]
}