{
  "title": "Arm custom u-boot reversing",
  "link": "https://reverseengineering.stackexchange.com/questions/29478/arm-custom-u-boot-reversing",
  "content": "I'm trying to reverse a custom u-boot that implements cryptography for the Kernel at runtime (the Kernel at rest is encrypted also in a flash). I can probably ask the IoT vendor to provide the modified code of u-boot, but I want to learn something from this experience.\n\nSome info I gathered:\n\nSteps I'm doing to load the binary in IDA:\n\n\nIDA asked me for the disassembly memory organizations; I tried a couple of things without success. I think this is the part where I messed up something, and later I can find proper addresses when I try to rebuild the Interrupt Vector Table to start defining functions later.\n\n\n\nWhich address I should choose in this case based on the information I have?\n\nAn example, if I chose to use 0x8000_0000 as a loading address and redefine some variables to double word (any Interrupt vector table entry is a double word), this is what I get:\n\n\n\nI get something unusable (I can't jump at those addresses); I need to understand how to set up IDA in the early stages.\n\nAny help, especially with some theory, is appreciated :)\n\n",
  "votes": "2",
  "answers": 1,
  "views": "982",
  "tags": [
    "ida",
    "disassembly",
    "firmware",
    "arm"
  ],
  "user": "zi0Black",
  "time": "Oct 30, 2021 at 12:48",
  "comments": [],
  "answers_data": [
    {
      "content": "The reset vector location is the address right after 0xDEADBEEF (not shown in your snippet).\n\nIt is the function that the first instruction's relative branch is branching to.\n\nTell IDA to load the segment at that address (0x8080xxxx).\n\n",
      "votes": "2",
      "user": "MarianD",
      "time": "Nov 13, 2021 at 4:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "zi0Black",
          "text": "I didn't update the post, but I found that 0x8080_0000 (looking at DATA ref after an auto analysis). I found a forum where someone analyzed the code, of the custom u-boot, under a developing point of view and 0x8080_0000 is referenced as the loading address, so I guess it's confirmed. A user on Reddit (blessthe28) suggested turning all the 0xEXXX into code since those are unconditional ARM codes, and effectively I got some LD to PC register in the order suggested by the user.  actual IDA status",
          "time": null
        }
      ]
    }
  ]
}