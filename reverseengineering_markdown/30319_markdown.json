{
  "title": "C instruction causing an address shift",
  "link": "https://reverseengineering.stackexchange.com/questions/30319/c-instruction-causing-an-address-shift",
  "content": "I am trying to recreate a segment of assembly back into the C code.  Below is the progress I've made so far, but I'm getting stumped on a specific section.\n\n```\n00000000000010049 <mysteryFunc>:\n    10049:  f3 0f 1e fa             endbr64 \n    1004d:  55                      push   rbp\n    1004e:  48 89 e5                mov    rbp,rsp\n    10051:  48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi     ; This is the function call with a unsigned char ptr as input s\n    \n    10055:  66 c7 45 e8 00 00       mov    WORD PTR [rbp-0x18],0x0      ; Declaring h -- unsigned short h = 0;\n    \n    1005b:  c7 45 ec 00 00 00 00    mov    DWORD PTR [rbp-0x14],0x0     ; Declaring length -- unsigned long length = 0;\n    10062:  48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]     ; Declaring a temp char pointer -- unsigned char *temp = s;\n    10066:  48 89 45 f0             mov    QWORD PTR [rbp-0x10],rax\n    1006a:  eb 5f                   jmp    100cb <mysteryFunc+0x82>     ; This seems to be a goto call to the end of a do-while loop\n\n    1006c:  48 8b 45 f0             mov    rax,QWORD PTR [rbp-0x10]     \n    10070:  48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax\n\n    10074:  8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]     ; if(!(length & 1)) {\n    10077:  83 e0 01                and    eax,0x1\n    1007a:  85 c0                   test   eax,eax\n    1007c:  75 22                   jne    100a0 <mysteryFunc+0x57>\n\n```\nI don't know what instructions in C would cause this kind of repositioning.\n\n```\n1006c:  48 8b 45 f0             mov    rax,QWORD PTR [rbp-0x10]     ; What's happening here?\n10070:  48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax\n\n```\nThe function does some processing of a string and checks for null within a do-while loop.  I get the feeling it's shifting to a next character, but a lot of the ways I can think to do something like that in C don't produce an assembly instruction like that.\n\nThe function does some things in less than conventional ways, like a goto call to the end of a do-while loop to check if the input string is null, instead of just using a regular while loop.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "142",
  "tags": [
    "assembly",
    "x86",
    "c"
  ],
  "user": "enkrypted87",
  "time": "Apr 26, 2022 at 4:41",
  "comments": [
    {
      "user": "MarianD",
      "text": "Welcome to Reverse Engineering! After you ask a question here, if you get an acceptable answer, you should “accept” the answer by clicking the check mark next to it. This scores points for you and for the person who answered your question. You can find out more about accepting answers here: How do I accept an answer?, Why should we accept answers?, What should I do if someone answers my question?.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "```\n1006c:  48 8b 45 f0             mov    rax,QWORD PTR [rbp-0x10]\n\n```\ncopies the value in rbp-0x10(local variable) to rax(register).\n\n```\n10070:  48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax\n\n```\ncopies rax to another local variable rbp-0x8. Its just creating a copy of a local variable which was a copy of the first argument to mysteryFunc.\n\nThe C-code could look something like this\n\n```\nint doSomething(char * s){\n    char * start = s, * end = s;\n\n```\nsample here\n\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Apr 25, 2022 at 6:13",
      "is_accepted": true,
      "comments": [
        {
          "user": "enkrypted87",
          "text": "Thanks, that was it.  Was a second char pointer declared in the same line as temp and assigned in the do-while loop.",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "@enkrypted87 If this is what you wanted, you can accept this answer.",
          "time": null
        }
      ]
    }
  ]
}