{
  "title": "Saving program execution state for fuzzing",
  "link": "https://reverseengineering.stackexchange.com/questions/8943/saving-program-execution-state-for-fuzzing",
  "content": "Suppose I have a program that has two functions, functionA and functionB called sequentially.  \n\nfunctionA requires a significant amount of processing in order to execute, and in the course of the execution sets up and maintains many global variables referenced by functionB. \n\nI want to fuzz input to functionB, but having to run functionA first forces me to wait about 10 seconds before I can see the results of a particular test.\n\nHow can I save the program state after executing functionA and resume at functionB when I want to run a set of tests? \n\nAdditionally, what mechanisms are there to alter the program variables to reflect the new fuzzing values?\n\n",
  "votes": "9",
  "answers": 1,
  "views": "466",
  "tags": [
    "dynamic-analysis",
    "fuzzing",
    "instrumentation"
  ],
  "user": "amccormack",
  "time": "Aug 31, 2018 at 1:24",
  "comments": [
    {
      "user": "0xec",
      "text": "Intel PIN tool has an API to replay execution by saving/restoring the processor states, memory changes need to be tracked manually. Also have a look at this pdf. However do note that the API has changed than what is mentioned in the pdf, but you will get the general idea.",
      "time": null
    },
    {
      "user": "Carlos Garcia",
      "text": "As mentioned above, memory accesses can be tricky to follow, as well as things like open file descriptors, etc. If you are doing some in-memory fuzzing and those functions don't have a lot of side effects it is doable. Otherwise it gets really cumbersome very quickly.",
      "time": null
    },
    {
      "user": "Ta Thanh Dinh",
      "text": "Similar with the suggestions above, if the functionA does not have side effects (e.g. open/read/write into files, call system calls), then you can use Context Manipulation API of Intel Pin to write your fuzzer. I have implemented such a \"reverse execution\" mechanism for my personal project, you can see in (github.com/tathanhdinh/PathExplorer/blob/windows_version/…). I am sorry for the self-advertisement.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "CreateToolhelp32Snapshot() would help for creating a snapshot of program state, especially fuzzing a la this paper\n\nAlso, Peter Van Eeckhoutte covered what you're attempting to do in (in-memory fuzzing) in this blogpost\n\nBoth are outlined step by step\n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "Aug 31, 2018 at 1:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "First paper doesn't even mention CreateToolhelp32Snapshot. Additionally, CreateToolhelp32Snapshot cannot be used to create a process snapshot that is easily useable for the purposes of execution control.",
          "time": null
        },
        {
          "user": "grepNstepN",
          "text": "I said it would help, as in supplemental also its not for execution control its to restore state: docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/… \"th32ProcessID: The process identifier of the process to be included in the snapshot. This parameter can be zero to indicate the current process. This parameter is used when the TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPMODULE32, or TH32CS_SNAPALL value is specified. Otherwise, it is ignored and all processes are included in the snapshot.\"",
          "time": null
        },
        {
          "user": "grepNstepN",
          "text": "one can use the Context struct for the values returned in this manner along with CreateThread, GetThreadContext and SetThreadContext last, i mentioned an easier, already writ way via Corelan",
          "time": null
        }
      ]
    }
  ]
}