{
  "title": "3 questions on assembly - syntax, meaning, and equivalent in high level code (eg C++)",
  "link": "https://reverseengineering.stackexchange.com/questions/14650/3-questions-on-assembly-syntax-meaning-and-equivalent-in-high-level-code-eg",
  "content": "For the following example, using x86 code in AT&T format:\n\n```\nxor $0x20, (%eax) \nand $0x20, %ah \nor $0x20, %dh \ndec (%edi) \ndec %si\ndec %sp\ndec %bp\n\n```\nMy understanding:\n\n```\nLine 1: takes value in %eax and does an XOR operation with 0x20\n\nLine 2: takes value in %ah and dies an AND operation with 0x20\n\nLine 3:  takes value in %dh and does an OR operation with 0x20.\n\nLine 4: decrements value in %edi by 1\n\nLine 5: decrements value in %si by 1\n\nLine 6: decrements value in %sp by 1\n\nLine 7: decrements value in %bp by 1\n\n```\nQuestions: \n\nThis is not a homework question - I am new to assembly.\nExample code is not from actual code - it's to help me get a better understanding & illustrate my questions. \n\n",
  "votes": "1",
  "answers": 2,
  "views": "467",
  "tags": [
    "assembly",
    "decompilation",
    "binary"
  ],
  "user": "unseen_rider",
  "time": "Feb 18, 2017 at 1:20",
  "comments": [
    {
      "user": "julian",
      "text": "something does not seem quite right about those offsets",
      "time": null
    },
    {
      "user": "ysap",
      "text": "Where are the arguments?",
      "time": null
    },
    {
      "user": "julian",
      "text": "@unseen_rider This article may help you with some of the terminology: Instructions, Operands, and Addressing. Are you interested in any particular instruction set? x86 for example",
      "time": null
    },
    {
      "user": "ysap",
      "text": "As the article @SYS_V links to suggests, you should rename these to \"operands\" rather than \"arguments\". By \"arguments\" one usually means the input given to a function, and since you're asking about C++, your intention is unclear.",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "If you're trying to double-check your understanding of provided code, perhaps share your thoughts and let us correct you instead of providing you with the answers?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Note: this answer corresponds to the original question.\n\nI am new to assembly as well so I can see where you are coming from. With that being said, there seem to be quite a few issues with the contrived code that you have posted. \n\nThere are two different styles of human-readable mnemonics used to represent CPU instruction codes: AT&T and Intel. While the order the operands are shown in is different between Intel and AT&T syntax, the order of instruction code bytes in memory is constant.\n\nIntel syntax:\n\n```\n08048074 <main>:\n 8048074:       55                      push   ebp\n 8048075:       89 e5                   mov    ebp,esp\n 8048077:       b8 00 00 00 00          mov    eax,0x0\n 804807c:       5d                      pop    ebp\n 804807d:       c3                      ret    \n\n```\nAT&T syntax:\n\n```\n08048074 <main>:\n 8048074:       55                      push   %ebp\n 8048075:       89 e5                   mov    %esp,%ebp\n 8048077:       b8 00 00 00 00          mov    $0x0,%eax\n 804807c:       5d                      pop    %ebp\n 804807d:       c3                      ret  \n\n```\nThe (little-endian) byte sequence 89 e5 is represented as mov ebp,esp in Intel syntax and as mov %esp,%ebp in AT&T syntax. Though the mnemonic representations of the operands are opposite of each other, they represent the same byte sequence. The order of the opcode mnemonics matters in that it is determined by the syntax used to represent the instruction codes.\n\nEvery line of the code posted in the question except the last contains at least one illegal operand so only that line could feasibly run.\n\nAT&T syntax is assumed.\n\n0x2000: cs cs cs\n\n0x2001: xor x20,(eax)\n\n0x2002: and x20,%ah\n\n0x2003: or x20, %dh\n\n0x2004: dec (ebi)\n\n0x2005: dec %si\n\nFixed up, the code would look like this:\n\n```\nxor $0x20, (%eax)\nand $0x20, %ah\nor  $0x20, %dh\ndec (%edi)\ndec %si\n\n```\nAssuming that the corrected code is actually correct, someone with sufficient understanding could simply look at this snippet and create a roughly equivalent statement or sequence of statements in a high level language. For mere mortals, there are tools called decompilers.\n\nProgramming from the Ground Up by Jonathan Bartlett and\n\"Professional Assembly Language\" by Richard Blum are pretty good IMO. A more technical resource is the System V Application Binary Interface Intel386 Architecture Processor Supplement, which sheds light on some of the mysteries of the processor and virtual memory. SO's x86 wiki has a list of many resources. Of course, there are also the Intel manuals.\n\n",
      "votes": "3",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "unseen_rider",
          "text": "thanks for your answer. Very useful and helpful. I have updated my questions earlier following this, and have two more assembly lines of code at the bottom. - Do they decrement the base pointer and stack pointer values? What are the implications of this? What does the code do from a high level perspective?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@unseen_rider the question is now so different from the original that the answer does not really reflect what is being asked. In a case like this my advise is to make a new question. Also, if you like a particular answer you should  accept it",
          "time": null
        },
        {
          "user": "unseen_rider",
          "text": "Ok thank you. Have done. reverseengineering.stackexchange.com/questions/14682/â€¦",
          "time": null
        }
      ]
    },
    {
      "content": "To answer your third question, from a computer science aspect c++ or any other highlevel language that isn't one to one mnemonic map of machine opcodes; soul purpose is to mitigate complexity. That being said c++ we can infer isn't or shouldn't be a 1 to 1 map to assembly. Some c syntax can't be exactly mapped. \n\nFor example a jump statement progresses the code to any other byte. So a jump can act like a conditional branch or a function call, etc. All very different statements in c++ yet they use the key part, jump instruction. \n\nI think a better approach would be to ask how a c++ basic statements compile to assembly. If you understand and know thoughs it then is a simple thing to find those blocks in assembly.\n\nnote In modern setting most high level languages don't compile to x86 assembly but byte code or some operating specific format, often not far from assembly, however different enough that it requires the operating system to run. This is to abstract the underlying hardware so software doesn't have to get recompiled.\n\n",
      "votes": "1",
      "user": "marshal craft",
      "time": "Feb 16, 2017 at 7:10",
      "is_accepted": false,
      "comments": []
    }
  ]
}