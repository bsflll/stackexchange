{
  "title": "How can I use ptr to ptr in idapython?",
  "link": "https://reverseengineering.stackexchange.com/questions/32824/how-can-i-use-ptr-to-ptr-in-idapython",
  "content": "in hey-rays api there's a method:\n\n```\ndef find_def(self, *args) -> \"minsn_t *\":\n    r\"\"\"\n    find_def(self, op, p_i1, i2, fdflags) -> minsn_t\n    @param op: mop_t const &\n    @param p_i1: minsn_t **\n    @param i2: minsn_t const *\n    @param fdflags: int\n    \"\"\"\n    return _ida_hexrays.mblock_t_find_def(self, *args)\n\n```\nwhich will need a ptr to ptr to a instruction.\n\nbut I didn't find any method can create a minsn_t **. is there any way to do that?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "22",
  "tags": [
    "ida",
    "idapython",
    "hexrays"
  ],
  "user": "Ethan Xie",
  "time": "Mar 21, 2024 at 13:34",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "Not a real answer, but if you can usually pass null (None) to those. If you're trying to get the parent minstruction, though, because your result resides in an moperand, you might be able to combine build_def_list to get an mlist_t, and then mblock_t.for_all_uses if you only need it for a single mblock. In my (limited) experience, mlist_t and the for_all_* methods are more reliable for doing searches, especially because you're not limited to just an mblock.",
      "time": null
    },
    {
      "user": "Ethan Xie",
      "text": "Thanks, I ended up doing it myself too.",
      "time": null
    }
  ],
  "answers_data": []
}