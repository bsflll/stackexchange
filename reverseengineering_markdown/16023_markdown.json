{
  "title": "Exports that redirects to other library",
  "link": "https://reverseengineering.stackexchange.com/questions/16023/exports-that-redirects-to-other-library",
  "content": "I'm writing an analog of GetProcAddress function. When looking inside the export table I see the exports like this in advapi32.dll for example:\n\n```\n.text:4C362BAA aEventregister  db 'EventRegister',0    ; DATA XREF: .text:off_4C35FE10o\n.text:4C362BB8                                         ; Exported entry 1290. EventRegister\n.text:4C362BB8                 public EventRegister\n.text:4C362BB8 EventRegister   db 'ntdll.EtwEventRegister', 0\n\n```\nSo it is like a redirect to ntdll function. How to process these entries and how to detect if they lead to another library call?\n\nCurrently I just find the function ordinal by name and get its address, but for exports like this addresses are invalid (inside the address there is junk code).\n\nDo I need to just read the string ntdll.EtwEventRegister at the ordinal address, split it by dot and get dll/function names?\n\nIf this is the case, how do I detect that the export address is just a string with this dll/function name? I need to somehow check if there is a valid string there, there should be other way, like some flag etc.\n\n",
  "votes": "3",
  "answers": 3,
  "views": "2k",
  "tags": [
    "disassembly",
    "c",
    "pe",
    "executable"
  ],
  "user": "CrispyCrunchyStuff",
  "time": "Aug 7, 2017 at 13:37",
  "comments": [],
  "answers_data": [
    {
      "content": "This is called export forwarding and you can explore it here with nice explanation:\n\nThe PE file format\n\n",
      "votes": "4",
      "user": "PhoeniX",
      "time": "Aug 6, 2017 at 22:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "user2347953",
          "text": "This solution doesn't work with all DLLs. See my answer for the proper way of identifying forwarded exports.",
          "time": null
        }
      ]
    },
    {
      "content": "The other two answers are wrong.\nI reversed link.exe and the way it works is that if the “function” points into the export directory\n\n```\n(NTHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress <= func_ptr < NTHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress + NTHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size)\n\n```\nit is a forwarded export (i.e. you will find a string there).\n\nThe method from the other two answers used to work because the linker used to put the export directory as well as the forward strings into the .data section, but that is no longer the case. Newer linkers put the export directory and the forward strings into the .text section (where all the “actual” functions reside as well), so checking whether the “function” is in the same section as the export directory will no longer work.\n\n",
      "votes": "2",
      "user": "winapiadmin",
      "time": "Nov 8, 2023 at 23:15",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Short answer: No, you don't have to guess it's a string. There's a 'trick'.\n\nBut first, some background: export forwarding is a legitimate and useful functionality piece. There are a handful of documentation describing how imports are loaded by the PE loader unfortunately export forwarding documentation is a little harder to  come by and most of articles only mention export forwarding.\n\nThe key to identifying if you're processing an export forward is, a described here:\n\nIf the RVA in the AddressOfFunctions array points to the exports section, that function is forwarded and can't be located in the DLL being loaded. Instead, the value pointed should be interpreted as a null-terminated string, another module should be loaded and the loading process should be repeated.\n\nIn case the dot is followed by the hash sign, the forward entry points to an export by ordinal, not name, and the digits following the hash sign are the ordinal number of target function.\n\nPlease note an API may be forwarded multiple times before being reached.\n\nAdditionally, if you're handling bound imports you should make sure to treat ForwarderChain properly, see the following from the same article:\n\nFor additional reading about the PE format and imports in particular, I recommend this resource.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Aug 6, 2017 at 22:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}