{
  "title": "Why address space is different for Ghidra, IDA and xDebug runtime and which one to use?",
  "link": "https://reverseengineering.stackexchange.com/questions/29332/why-address-space-is-different-for-ghidra-ida-and-xdebug-runtime-and-which-one",
  "content": "I have opened an executable with Ghidra, IDA and x64dbg (runtime).\n\nIt seems that the address space in IDA and x64dbg is the same, but it is different from the one I see in Ghidra.\n\nWhen hooking through proxy dll, which one should be used?\n\nHere are the address snapshots.\n\nGhidra\n\n\n\nIDA\n\n\n\nx64dbg\n\n\n\n",
  "votes": "3",
  "answers": 1,
  "views": "3k",
  "tags": [
    "ida",
    "ghidra",
    "dll-injection",
    "address"
  ],
  "user": "Irbis77",
  "time": "Sep 24, 2021 at 9:38",
  "comments": [
    {
      "user": "blabb",
      "text": "you should find the base address and use relative offsets  not just ghidra ida and x64dbg each invocation of your executable will have different base due to aslr.",
      "time": null
    },
    {
      "user": "Irbis77",
      "text": "I can see that the base address is 140000000, which corresponds to that I get in Ghidra. In IDA all addresses are based on that as well with static analysis, but as soon as I run the application in IDA under debugger, it changes the memory allocation and it changes the way it names the subroutines as well, which is a bit confusing...",
      "time": null
    },
    {
      "user": "ismael_akez",
      "text": "The Ghidra might using the Relative Virtual Address instead of the adding the image base of the binary file.",
      "time": null
    },
    {
      "user": "blabb",
      "text": "when disaasembling every tool out there will use the prdefined base address in header ,0x400000  x86 win, 0xyz,x64 0x8048xxx linux x86 etc. and most tools also will provide a convenience function to rebase from default base address , while  debugging the base address is defined by the system loader and will definitely be not the same as in header base address. read about aslr , relocation ,header formats of executables etc to get a grip",
      "time": null
    },
    {
      "user": "Irbis77",
      "text": "What was confusing for me that:  IDA starts static analysis with address references in base address space (i.e. all of them in the above example will be 140.... ), but then changes the address space AND the names of the subroutines if run with debugger and then keeps it that way, never returning to the original.  Also, it seems in many examples I came across, people never bothered with setting hooks with the offsets. Usually it seems they were happy with the addresses from the static analysis.  Will check the stuff you've mentioned. Thank you.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Fixed with the combined solution from this and this posts.\n\n",
      "votes": "-1",
      "user": "Irbis77",
      "time": "Oct 11, 2021 at 18:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "Irbis77",
          "text": "The problem with most of the above is that it is not clear of how to get to the point, when the solution is working right. It is unlikely that even my improved understanding after studying the documentation will allow me to see clearly of why the exception is thrown with the current implementation. Because there might be reasons other than incorrect address, which cause it.",
          "time": null
        },
        {
          "user": "Irbis77",
          "text": "For example, currently the above code works in a way that the proxy dll loads. I even get some of the breakpoints hit, but not for the hooked function. This is when I am using the base address definition from the code above. But if I hardcode the address to runtime address space, then it gets hit, but with access violation exception. So now, how do I debug it to confirm, whether the exception is due to the wrong address specified or it is due to some error in the code?",
          "time": null
        }
      ]
    }
  ]
}