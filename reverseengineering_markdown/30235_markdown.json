{
  "title": "IDA pro and compiler-optimized 1-based array accesses in structure",
  "link": "https://reverseengineering.stackexchange.com/questions/30235/ida-pro-and-compiler-optimized-1-based-array-accesses-in-structure",
  "content": "I know title isn't very clear so here is an example of a code I'm trying to disassemble:\n\n```\nstruct Inner {\n  int field1;\n  int field2;\n};\nstruct Outer {\n  int some_data[16];\n  struct Inner the_array[16];\n};\n\nint x(struct Outer* s, int id) {\n  return s->the_array[id - 1].field2;\n}\n\n```\nA compiler fuses all the offsets (positive offset of Inner within Outer, negative offset of -1 index and positive offset of field2 in Inner) into single offset. The complete function code follows:\n\n```\nmovsxd  rax, esi\nmov     eax, [rdi+rax*8+3Ch]\nretn\n\n```\nIDA and Hex-rays obviously think it is an offset into Outer::some_data and not into Outer::the_array. Corresponding pseudocode is:\n\n```\n__int64 __fastcall x(Outer *s, int id)\n{\n  return (unsigned int)s->some_data[2 * id + 15];\n}\n\n```\nIs there any way to manually select which nested structure member is being accessed?\n\nIf someone wants to reproduce this example to play with it themselves, that code sample is a complete TU and Linux x86-64 clang 10 or newer produces the assembly code I shown (-O1 is enough for this optimization). Same source file can be then loaded into IDA as a C header to get the structures.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "185",
  "tags": [
    "ida"
  ],
  "user": "Andrey Turkin",
  "time": "Apr 10, 2022 at 11:29",
  "comments": [],
  "answers_data": [
    {
      "content": "In the Pseudocode view, try to play with shifted pointers to account for the 8-byte offset (sizeof(*Inner))\n\nIf you declare s like this:\n\n```\nOuter *__shifted(Outer,8) s\n\n```\nYou might get something looking like that:\n\n```\nreturn ADJ(s)->the_array[id].field2;\n\n```\n",
      "votes": "1",
      "user": "vmallet",
      "time": "Apr 10, 2022 at 21:36",
      "is_accepted": false,
      "comments": [
        {
          "user": "Andrey Turkin",
          "text": "It kinda works for this example; -1 gets lost but I could live with that, and I'll be sure to use this. It's only a partial solution though: a) smaller issue - __shifted cast will be plastered all over all the callsites, if lucky; if unlucky, same __shifted type will be propagated upstream and will require manual overrides; b) this one is much worse - it doesn't work if the function happens to touch not only the_array but also some other fields of Outer.",
          "time": null
        }
      ]
    }
  ]
}