{
  "title": "RE4B challenge 65: how to determine the first dimension of the array?",
  "link": "https://reverseengineering.stackexchange.com/questions/19667/re4b-challenge-65-how-to-determine-the-first-dimension-of-the-array",
  "content": "Challenge 65: Try to determine the dimensions of the array, at least partially. \n\n```\n_array$ = 8 \n_x$ = 12    \n_y$ = 16    \n_z$ = 20    \n_f  PROC\n    mov eax, DWORD PTR _x$[esp-4]\n    mov edx, DWORD PTR _y$[esp-4]\n    mov ecx, eax\n    shl ecx, 4\n    sub ecx, eax\n    lea eax, DWORD PTR [edx+ecx*4]\n    mov ecx, DWORD PTR _array$[esp-4]\n    lea eax, DWORD PTR [eax+eax*4]\n    shl eax, 4\n    add eax, DWORD PTR _z$[esp-4]\n    mov eax, DWORD PTR [ecx+eax*4]\n    ret 0\n_f  ENDP\n\n```\nIn this challenge, I can only determine the last two dimensions as 60 and 80, so how to determine the first dimension?\n\nI determined: \n\n```\narray[?][60][80]\n\n```\nProgress to determine last two dimensions:\n\n```\nreturn: array + 5*16*(4*(16*X-X)+Y)+Z \n                     ↓\nreturn: array + 80*(60*X+Y)+Z \n                     ↓\nThe second dimension is 60 and the third dimension is 80.\n\n```\n.\n\nAnswers from Chinese-published version of RE4B, ISBN:9787115434456, Page 944\n\n\n",
  "votes": "0",
  "answers": 1,
  "views": "179",
  "tags": [
    "array"
  ],
  "user": "A.J",
  "time": "Oct 22, 2018 at 8:15",
  "comments": [
    {
      "user": "NirIzr",
      "text": "Would you consider providing more details and any previous attempt you've made?",
      "time": null
    },
    {
      "user": "A.J",
      "text": "@Nirlzr I updated my questions",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "According to the given code here, I don't think its possible to recover the third dimension.\n\n```\n_array$ = 8 \n_x$ = 12    \n_y$ = 16    \n_z$ = 20    \n_f  PROC\n    mov eax, DWORD PTR _x$[esp-4]\n    mov edx, DWORD PTR _y$[esp-4]\n    mov ecx, eax\n    shl ecx, 4   ; ecx = x*16\n    sub ecx, eax ; ecx = x*16 - x\n    lea eax, DWORD PTR [edx+ecx*4] ; eax = y+(15*x)*4\n    mov ecx, DWORD PTR _array$[esp-4]\n    lea eax, DWORD PTR [eax+eax*4] ; eax = (y+(15*x)*4)*5\n    shl eax, 4                     ; eax = (y+(15*x)*4)*5*16\n    add eax, DWORD PTR _z$[esp-4]  ; eax = z+80*(y+(15*x)*4)\n    mov eax, DWORD PTR [ecx+eax*4] ; return array+4*(z+80*(y+(15*x)*4))\n    ret 0\n_f  ENDP\n\n```\nFinal expressions are\n\n```\narray+4*(z+80*(y+(15*x)*4))\narray + 4*z + 320*y + 19200*x\narray + 80*60*4*x + 80*4*y + 4*z\n\n```\nIn z you have 80 elements of size 4, in y you have 60 z elements. Thats all the information we can get from here. \n\nI also tried writing and compiling a similar function.\n\n```\n#include <stdio.h>\n\nint arr[50][60][80];\n\nint f(int a[50][60][80], int x, int y, int z) { return a[x][y][z]; }\n\nint main(int argc, char **argv) {\n    f(arr, 5, 5, 5);\n    return 0;\n}\n\n```\nCompiling with gcc -no-pie -fno-pic -m32 x.c -o x and then analyzing with r2.\n\n```\n$ r2 x                              \n -- Change the registers of the child process in this way: 'dr eax=0x333'\n[0x080482e0]> aaa\n...\n[0x080482e0]> s sym.f\n[0x080483f6]> afvn arr arg_8h \n[0x080483f6]> afvn x arg_ch \n[0x080483f6]> afvn y arg_10h \n[0x080483f6]> afvn z arg_14h \n[0x080483f6]> pdf\n┌ (fcn) sym.f 41\n│   sym.f (int arr, int x, int y, int z);\n│           ; arg int arr @ ebp+0x8\n│           ; arg int x @ ebp+0xc\n│           ; arg int y @ ebp+0x10\n│           ; arg int z @ ebp+0x14\n│           ; CALL XREF from sym.main (0x804842d)\n│           0x080483f6      55             push ebp\n│           0x080483f7      89e5           mov ebp, esp\n│           0x080483f9      8b450c         mov eax, dword [x]          ; [0xc:4]=-1 ; 12\n│           0x080483fc      69d0004b0000   imul edx, eax, 0x4b00\n│           0x08048402      8b4508         mov eax, dword [arr]        ; [0x8:4]=-1 ; 8\n│           0x08048405      8d0c02         lea ecx, [edx + eax]\n│           0x08048408      8b5510         mov edx, dword [y]          ; [0x10:4]=-1 ; 16\n│           0x0804840b      89d0           mov eax, edx\n│           0x0804840d      c1e002         shl eax, 2\n│           0x08048410      01d0           add eax, edx\n│           0x08048412      c1e004         shl eax, 4\n│           0x08048415      8b5514         mov edx, dword [z]          ; [0x14:4]=-1 ; 20\n│           0x08048418      01d0           add eax, edx\n│           0x0804841a      8b0481         mov eax, dword [ecx + eax*4]\n│           0x0804841d      5d             pop ebp\n└           0x0804841e      c3             ret\n\n```\nHere 0x4b00 = 80*60*4. There's no information on the upper bound of x as is the case with simple 1-d arrays. SO you can't recover any more information from your snippet.\n\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Oct 21, 2018 at 4:47",
      "is_accepted": true,
      "comments": [
        {
          "user": "A.J",
          "text": "I have seen more than one place to set the first (or the third) dimension as 50. How do you know if it is 50?",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "From the code that I compiled there's no way to recover 50 as the third dimension. It was just an example in my code. Where do you see it as 50?",
          "time": null
        },
        {
          "user": "A.J",
          "text": "In the Chinese version, it contains the answer to this question.",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "I just checked this for multidimensional arrays. Seems similar to what I wrote. Can you link/paste your version?",
          "time": null
        },
        {
          "user": "A.J",
          "text": "I updated my question to post the answer from the Chinese-published book.",
          "time": null
        }
      ]
    }
  ]
}