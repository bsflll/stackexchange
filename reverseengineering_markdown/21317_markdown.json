{
  "title": "Explanation of heap shaping technique and how it is different from heap spraying",
  "link": "https://reverseengineering.stackexchange.com/questions/21317/explanation-of-heap-shaping-technique-and-how-it-is-different-from-heap-spraying",
  "content": "Recent RDP vulnerability and exploits have mentioned the use of heap shaping technique. \nCan anyone please explain in details what is actually involved in using this tactic. \n\nThanks\n\n",
  "votes": "2",
  "answers": 1,
  "views": "2k",
  "tags": [
    "exploit",
    "heap"
  ],
  "user": "GelosSnake",
  "time": "May 15, 2019 at 16:10",
  "comments": [],
  "answers_data": [
    {
      "content": "Heap shaping (also called heap grooming, for a more passive approach) is the slightly more intelligent sibling of heap spraying while developing exploits. Therefore, to properly explain heap shaping one must first be familiar with heap spraying.\n\nHeap spraying is the act of intentionally filling (spraying) a target process's heap space with recurring/sequential data, using an external attack primitive.\n\nSay for example, you've found a uninitialized-variable bug, where a variable is not initialized when it should, and is then used in a manner that could be dangerous depending on it's the actual value.\n\nAn example might make it clearer:\n\n```\ntypedef struct __struct_cmd {\n    int type;\n    char shell_cmd[1024];\n} struct_cmd;\n\nvoid safe_cmd(struct_cmd* cmd)\n{\n    switch (cmd->type)\n    {\n    case CMD_1:\n        strcpy(cmd->shell_cmd, SAFE_CMD1);\n        break;\n    case CMD_2:\n        strcpy(cmd->shell_cmd, SAFE_CMD2);\n        break;\n    }\n    system(cmd->shell_cmd);\n}\n\n```\nIn the above example, it's easy to notice that if a user provides any value other than CMD_1 or CMD_2 for cmd.type, shell_cmd will not be uninitialized and an unknown value will be passed on to the lucrative system call.\n\nBeing able to set cmd->shell_cmd to a specific value that is a valid (and malicious) shell command will potentially give us code execution on the target. Simply put, heap spraying is the act of getting a lot of heap memory space filled with the specific shell command we'd like to execute.\n\nNow that was a relatively trivial case, and quite frequently heap spraying/shaping are used to exploit memory corruption bugs but that's irrelevant. Usually, you'd be addressing many more constraints to successfully exploit a memory corruption, and \"filling the heap with data\" simply won't be enough. \n\nDouble-free and use-after-free bugs will require specific objects/structs be allocated at the same space  a different object previously reside in. You'd then need to make sure the heap has a specific shape, in a way, so that a different object will \"fit\" into a coalescing heap (or high fragmentation heap, as opposed to low fragmentation heap). You may need to make sure a specific instance you control through a primitive is allocated in the right spot. Getting the heap to be in that specific way is what's called \"heap shaping\"\n\n",
      "votes": "2",
      "user": "NirIzr",
      "time": "May 15, 2019 at 16:43",
      "is_accepted": true,
      "comments": []
    }
  ]
}