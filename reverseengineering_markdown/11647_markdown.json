{
  "title": "Debugging forked child in an anti-debug protected crackme",
  "link": "https://reverseengineering.stackexchange.com/questions/11647/debugging-forked-child-in-an-anti-debug-protected-crackme",
  "content": "I am interested in the anti-debugging method implemented in the crackme called trace-p. A child process is forked, which communicates with the parent using int3 instructions. I would like to debug the child. gdb has set follow-fork-mode, however gdb does not recognize the file as executable (probably because of deleted sections related information). With radare2 I can disassemble and even debug, but I do not know how to follow the child after the fork takes place. I want to do this because the child contains instructions like:\n\n```\n0x0804898a    jmp dword [edx*4 + 0x8049334]\n\n```\nI want to stop there and examining edx, in order to see where the jump takes.\n\nI am interested in any tool or method which is able to debug the child process.\n\n",
  "votes": "7",
  "answers": 3,
  "views": "4k",
  "tags": [
    "linux",
    "anti-debugging",
    "radare2",
    "crackme"
  ],
  "user": "robert",
  "time": "Jan 7, 2016 at 19:53",
  "comments": [],
  "answers_data": [
    {
      "content": "Use dbg.forks=true to stop the debugger when a fork happens. and then just use dp to list and select the pid you want to follow.\n\n",
      "votes": "6",
      "user": "pancake",
      "time": "Dec 30, 2015 at 17:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The first thing with radare2 is to make sure that you're running the latest git version.\n\nTo get help about commands in radare2, you can use the ? character. For help about configuration variables, you can use e?? (since e? would give you help about how to use them, not list them). Since there are many variables, you can filter them with the internal grep command : ~.\n\n```\n\n[0x00000000]> e??dbg\n          dbg.args: Set the args of the program to debug\n       dbg.backend: Select the debugger backend\n           dbg.bep: break on entrypoint (loader, entry, constructor, main)\n      dbg.bpinmaps: Force breakpoints to be inside a valid map\n        dbg.bpsize: Size of software breakpoints\n        dbg.btalgo: Select backtrace algorithm\n       dbg.btdepth: Depth of backtrace\n         dbg.clone: Stop execution if new thread is created\n         dbg.execs: Stop execution if new thread is created\n        dbg.follow: Follow program counter when pc > core->offset + dbg.follow\n         dbg.forks: Stop execution if fork() is done (see dbg.threads)\n          dbg.libs: If set stop when loading matching libname\n       dbg.profile: Path to RRunProfile file\n dbg.shallow_trace: While tracing, avoid following calls outside specified range\n          dbg.slow: Show stack and regs in visual mode in a slow but verbose mode\n        dbg.status: Set cmd.prompt to '.dr*' or '.dr*;drd;sr PC;pi 1;s-'\n        dbg.swstep: Force use of software steps (code analysis+breakpoint)\n       dbg.threads: Stop all threads when debugger breaks (see dbg.forks)\n         dbg.trace: Trace program execution (see asm.trace)\n     dbg.trace.tag: Trace tag\n        dbg.unlibs: If set stop when unloading matching libname\n[0x00000000]>\n\n```\nYou could aslo have use e dbg.<tab>, since there is autocompletion.\n\nObviously, the variale you're looking for is dbg.fork, to set it to true: this will stop the process when it encounters a fork(). You can the change the pid with a d-command:\n\n```\n\n[0x00000000]> d?~process\n| dH [handler]            Transplant process to a new handler\n| do                      Open process (reload, alias for 'oo')\n| dp[?]                   List, attach to process or thread id\n| dx[?]                   Inject and run code on target process (See gs)\n\n[0x00000000]> dp?\n|Usage: dp # Process commands\n| dp                  List current pid and childrens\n| dp             List children of pid\n| dp*                 List all attachable pids\n| dp=            Select pid\n| dp-            Dettach select pid\n| dpa            Attach and select pid\n| dpe                 Show path to executable\n| dpf                 Attach to pid like file fd // HACK\n| dpk    Send signal to process\n| dpn                 Create new process (fork)\n| dpnt                Create new thread (clone)\n| dpt                 List threads of current pid\n| dpt            List threads of process\n| dpt=        Attach to thread\n\n[0x00000000]\n\n```\n",
      "votes": "4",
      "user": "jvoisin",
      "time": "Dec 30, 2015 at 17:45",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Radare2 has a configuration variable dbg.follow.child which is equivalent to set follow-fork-mod.\n\n```\n e??~fork\n    dbg.follow.child: Continue tracing the child process on fork. By default the parent process is traced\n\n```\nSet it to debug the child process with the command\n\n```\ne dbg.follow.child = true\n\n```\nor when launching radare with -e : \n\n```\nr2 -e dbg.follow.child=true -d ./my_binary\n\n```\n",
      "votes": "0",
      "user": "Olivier Lasne",
      "time": "Nov 15, 2019 at 14:43",
      "is_accepted": false,
      "comments": []
    }
  ]
}