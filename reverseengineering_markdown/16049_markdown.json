{
  "title": "ESP out of range of \"Stack View\" in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/16049/esp-out-of-range-of-stack-view-in-ida",
  "content": "A very similar (or exact) question was asked here, though it was not answered properly. \n\n\n\nI am debugging a process in IDA and am unable to view the dynamic contents of the stack because its value points beyond the address shown in IDA's Stack view. My ESP is shown as pointing to 0xFFFFD95C upon entry at main, while the largest address shown by IDA is 0xFEFFFFFC.\n\nIs there a way to expand this memory range to the end of memory (i.e. 0xFFFFFFFF)? \n\nFor those interested, the binary under test is the ELF Crack Me 1 - Time to learn x86 ASM & gdb challenge over at ringzer0team.com.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "debugging",
    "stack"
  ],
  "user": "sherrellbc",
  "time": "Aug 10, 2017 at 4:40",
  "comments": [],
  "answers_data": [
    {
      "content": "It seems you're using the GDB debugger backend. It does not provide enough information to IDA about available memory ranges, about which you usually get  a warning on startup:\n\n```\n---------------------------\nInformation\n---------------------------\nThe current debugger backend (gdb) does not provide memory information to IDA.\nTherefore the memory contents may be invisible by default.\nPlease use the Debugger/Manual memory regions menu item to configure the memory layout.\nIt is possible to define just one big region for the whole memory\n(IDA will display question marks for missing memory regions in this case).\n---------------------------\nOK   \n---------------------------\n\n```\nSo IDA defaults to 0-0xFF000000 (addresses above 0xFF000000 are used by IDA for internal netnode IDs and may lead to issues if used in actual program). So there are two solutions:\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Aug 10, 2017 at 9:12",
      "is_accepted": true,
      "comments": [
        {
          "user": "sherrellbc",
          "text": "This is using GDB as shown. Specifically, I was debugging a remote program by running a GDB server elsewhere. Can the Linux debugger still be used in this case? Otherwise, great solution.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "yes, you can use linux remote debug server.",
          "time": null
        },
        {
          "user": "sherrellbc",
          "text": "Must the Remote Linux debugger be used on a Linux host? I have IDA for Windows, but was remotely debugging a Linux process. Can the remote debugger still be used in this case?",
          "time": null
        },
        {
          "user": "sherrellbc",
          "text": "Indeed it can. I found this solution suggesting to copy linux_server[x64] to the remote Linux host: reverseengineering.stackexchange.com/questions/11516/â€¦",
          "time": null
        }
      ]
    }
  ]
}