{
  "title": "Writing a DLL in C# vs C++? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/22293/writing-a-dll-in-c-vs-c",
  "content": "I am trying to make a client-sided anticheat which would work similar to BattlEye or GameGuard. In order to do this, I want to create a DLL which would do the cheat verification, which then I would inject to the executable of the game.\n\nWhat language should I use for the DLL? I was planning to use C#, but I've noticed that people prefer C++ for these kinds of projects. Why that? What's the downsides of using C# for a DLL?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "243",
  "tags": [
    "c++",
    "c#",
    "dll-injection"
  ],
  "user": "Radu",
  "time": "5 years ago",
  "comments": [
    {
      "user": "Paradigm",
      "text": "Typically C++ can access lower level windows functions therefore detect any tampering from a cheat client at a lower level.",
      "time": null
    },
    {
      "user": "Gin May",
      "text": "you can decompile a C# or vb.net easily. Because it is using .net framework, of course you want to do it in C++",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@GinMay While this is probably at the core of why C++ is better suited than C# for the task, the answer is rather ... terse. Besides, any such usermode solution would simply be blind to KM-side tampering (e.g. via the driver included with CheatEngine).",
      "time": null
    },
    {
      "user": "Michael Pittino",
      "text": "Besides from the fact that you can't inject a managed DLL into an unmanaged process.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The downsides really lie in C# being a managed language, you lose a lot of control. For example all of your code will get compiled into RWE memory at runtime which complicates self validation. The compiled code itself also relies strongly on the CLR module which provides even further opportunities to reroute your execution. Further, because of its high level, it's trivial to decompile, making RE much simpler. Finally, as an AC, you're going to eventually need more low level code such as custom assembly blocks for manual syscalls or hooking a custom prototype. None of these downsides are completely 'unfixable' (you can use a worker native module for what's needed, virtualize important code blocks, etc.) but it makes your job that much harder. In the end it depends on what your goals are, but for most purposes you're far better off native for this type of job.\n\n",
      "votes": "0",
      "user": "Pickle Rick",
      "time": "Oct 11, 2019 at 17:09",
      "is_accepted": true,
      "comments": []
    }
  ]
}