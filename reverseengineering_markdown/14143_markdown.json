{
  "title": "what is COERCE_FLOAT in ida Hex-Rays' C++ pseudocode?",
  "link": "https://reverseengineering.stackexchange.com/questions/14143/what-is-coerce-float-in-ida-hex-rays-c-pseudocode",
  "content": "I was reversing and then i've found a definition as COERCE_FLOAT:\n\n\n\n```\nfloat v28;\nfloat v29;\n\nv29 = COERCE_FLOAT(&v30);\nv28 = COERCE_FLOAT(&v31); // what is this?\n\n```\nI've searched and\nfound  that it was a simple casting method, but really like it would be in C++?\n\nthe value of v30 pass to v29 without the pointer? i don't understand.\n\n",
  "votes": "4",
  "answers": 2,
  "views": "3k",
  "tags": [
    "ida",
    "c++",
    "float"
  ],
  "user": "MindLerp",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "The installation folder should have some header file with macro, type and constant declarations.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I assume it's just a simple cast.\n\nv29 = *reinterpret_cast< float* >( &v30 );\n\nIt would be easier if you'd share the generated assembly instead of the pseudo code.\n\n",
      "votes": "4",
      "user": "WasserEsser",
      "time": "Dec 11, 2016 at 13:10",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "It's probably just a simple cast like WasserEsser said. I encountered this same type of cast while trying to decompile the q_rsqrt function. You could probably recreate the same type of behaviour by using an cast, like WasserEsser suggested, but you could probably also use an union, like in this code :\n\n```\nfloat Q_rsqrt( float number )\n{\n    union {\n        float f;\n        uint32_t i;\n    } conv;\n\n    float x2;\n    const float threehalfs = 1.5F;\n\n    x2 = number * 0.5F;\n    conv.f  = number;\n    conv.i  = 0x5f3759df - ( conv.i >> 1 );\n    conv.f  = conv.f * ( threehalfs - ( x2 * conv.f * conv.f ) );\n    return conv.f;\n}\n\n```\nWhich then decompiles to this :\n\n```\nfloat __stdcall Q_rsqrt(float a1)\n{\n  return (flt1Point5\n        - a1\n        * flt0Point5\n        * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1))\n        * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1)))\n       * COERCE_FLOAT(0x5F3759DF - (SLODWORD(a1) >> 1));\n}\n\n```\n",
      "votes": "0",
      "user": "Gabriel Ravier",
      "time": "Jun 22, 2018 at 14:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}