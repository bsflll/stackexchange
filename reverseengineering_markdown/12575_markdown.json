{
  "title": "wsasend(disassemblied) function get parameters",
  "link": "https://reverseengineering.stackexchange.com/questions/12575/wsasenddisassemblied-function-get-parameters",
  "content": "Good Evening,\n\ncurrently, I am struggling around with a problem of getting the parameters of the wsasend function. The only parameter where found out something is this one:\n\nmov qword ptr ss:[rsp+60],rsi\n\nThis should be the something with count because it's between ~60 - ~3000 (pausing application ~60, !pausing application ~3000) Not after the functioned was called so this couldn't be the \"bytes send\" parameter.\n\n```\nmov rsi,qword ptr ss:[rsp+80]\nmov qword ptr ss:[rsp+28],rsi\n\n```\nThese 2 lines are one parameter ? I guess because rsi gets a value which is than used one instruction later.\n\nMaybe someone can give me a hint on how to find the correct parameters.\n\nBefore I have found this function I thought parameters are only passed to a function via push but after some research, I have found out that this is compiler dependend and I find it difficult to find the parameters.\n\n\n\n```\nint WSASend(\n  __in   SOCKET s,\n  __in   LPWSABUF lpBuffers,\n  __in   DWORD dwBufferCount,\n  __out  LPDWORD lpNumberOfBytesSent,\n  __in   DWORD dwFlags,\n  __in   LPWSAOVERLAPPED lpOverlapped,\n  __in   LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine\n);\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "281",
  "tags": [
    "disassembly",
    "functions"
  ],
  "user": "Sens4",
  "time": "May 1, 2016 at 18:07",
  "comments": [],
  "answers_data": [
    {
      "content": "See https://msdn.microsoft.com/en-us/library/ms235286.aspx:\n\nSo, the socket is in rcx, Buffers in rdx (copied from r11), BufferCount in r8 copied from r10, and NumberOfBytesSent in r9 (and stored to rsp+50). The rest of the arguments are pushed on the stack.\n\nThis is not compiler dependent, every compiler that produces calls to windows functions has to adhere to this convention. (It is OS dependent though, the convention for Linux is different)\n\nIf you want to learn more, google for x64 ABI (ABI is for Application Binary Interface).\n\n",
      "votes": "0",
      "user": "Guntram Blohm",
      "time": "May 1, 2016 at 18:43",
      "is_accepted": true,
      "comments": [
        {
          "user": "Sens4",
          "text": "That definitely cleared things up in my mind! A link from your posted reference was also very helpful: Parameter Passing. I also didn't now about different convention between x32 and x64. Thanks !",
          "time": null
        }
      ]
    }
  ]
}