{
  "title": "Sniffing TCP packets using Wireshark",
  "link": "https://reverseengineering.stackexchange.com/questions/21321/sniffing-tcp-packets-using-wireshark",
  "content": "I am trying to reverse engineer a decoder. The decoder contains a web server that makes sending/receiving information through the Internet possible.\nTo do so I need to sniff the packets that the decoder receives from an Android application installed on my phone, this application is what controls the decoder.\n\nI tried using Wireshark at first, but it turned out that the packets are sent over SSL, so they are all encrypted. I then tried to sniff my TCP packets using mitmproxy, which didn't work since it doesn't sniff TCP packets, it only logs packets sent over HTTP.\n\nAfter reading the answers to the following question How can I capture all traffic network by mitmproxy?. I decided to give Wireshark a second try.\n\nHowever, I need the private key which is stored on the decoder. This will enable me the decrypt the SSL packets. \n\nIs there any way I can get this private key from the decoder? would openssl solve this problem? I am on Linux, Ubuntu.\n\nI would appreciate some help with this!\n\n",
  "votes": "1",
  "answers": 1,
  "views": "789",
  "tags": [
    "linux",
    "decryption",
    "security",
    "sniffing",
    "wireshark"
  ],
  "user": "yosra",
  "time": "May 16, 2019 at 11:26",
  "comments": [],
  "answers_data": [
    {
      "content": "You can instead try injecting code into the process to dump the raw data before it is encrypted/after it is decrypted.\n\nYou can use Google's ssl_logger for that.\n\nYou need to run python ssl_logger.py -pcap log.pcap 123 with 123 being the process ID. Add -verbose to see live output.\n\n(Note that it needs Python2 and not Python3.)\n\nOnce you are done, quit with Ctrl+C and analyze the log.pcap file in Wireshark, it will now contain unencrypted data.\n\n",
      "votes": "2",
      "user": "CherryDT",
      "time": "Mar 8, 2020 at 20:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}