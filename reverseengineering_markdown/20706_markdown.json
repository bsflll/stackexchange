{
  "title": "why saved rip changed by pushï¼Ÿ",
  "link": "https://reverseengineering.stackexchange.com/questions/20706/why-saved-rip-changed-by-push",
  "content": "I am doing a reverse homework. see the following pictures:\n\n\n\nas can be seen from this picture, before call push touch3, \"saved rip\" is at 0x5561dca8, which is equal to the current rsp(0x5561dca8).\n\nonce called push touch3, the \"saved rip\" is at 0x5561dca0, which is also equal to new rsp(0x5561dca0).\n\nMy question is, why push instruction changed the \"saved rip\" address.\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "linux",
    "gdb",
    "x86-64"
  ],
  "user": "JinLing",
  "time": "Mar 5, 2019 at 21:06",
  "comments": [
    {
      "user": "Biswapriyo",
      "text": "Can you please share the assembly code pointing your query in your question?",
      "time": null
    },
    {
      "user": "JinLing",
      "text": "actually, this is a lab (attack lab) from the book csapp, which can be found in cmu csapp official website. this is code for phase-3, if you are interested in this problem, you can download it and have a try.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Mainly, this is because the program did enough pop previously to get rsp just in front the saved rip. Then, a simple push will overwrite the saved rip.\n\nAs you can notice on the first picture, your saved rip is at 0x5561dca8 and, your rsp as well. Therefore, a push operation will store the address of the touch3 function as return address of the stack-frame.\n\nNothing really difficult here.\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Feb 25, 2019 at 9:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Thanks to your answer I now think I have understood the question. Didn't manage by reading the question alone.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Ah ah, I mainly guessed my way out for this one. So, do not feel guilty, I have just been lucky to get it right this time! ;-)",
          "time": null
        }
      ]
    }
  ]
}