{
  "title": "What factors affect the base address of a shared object?",
  "link": "https://reverseengineering.stackexchange.com/questions/32014/what-factors-affect-the-base-address-of-a-shared-object",
  "content": "I'm looking at a CVE for an old thrift shop router that amounts to a stack based buffer overflow with no NULL characters allowed. I can control the instruction pointer register as well as a few less useful registers. My goal is to perform a stack pivot to something I control. The router runs on MIPS big endian architecture so I can't leave the last 8 bits of a payload empty to get a leading NULL in an address. e.g. 0x00XXXXXX. I'm left to look for gadgets in shared objects (or the stack if cache flushed). I find that shared objects are generally loaded at higher addresses that make use of all 32 bits of the address. I cannot use gadgets from the vulnerable process because it was not compiled with -fpie and it loads at the same address with a leading NULL every time.\n\nIf I consistently want to be able to use gadgets in a shared object, it will need to be loaded with the same base address most of the time. Assuming no ASLR (not enabled on my router), what determines where a shared object will be loaded?\n\nIf I run ldd on the target binary, I get this:\n\n```\n$ mips-linux-ldd squashfs-root/sbin/my_binary\n    /lib/ld-uClibc.so.0 => /lib/ld-uClibc.so.0 (0x00000000)\n\n```\nNot super useful. I know that ld-uClibc.so.0 doesn't get loaded at 0x00000000 and that there are several other libraries that get loaded for this process (not dlopen'ed) which are not listed. Perhaps the non-useful output is a toolchain thing or due to the fact that I'm not running on the target architecture.\n\nUnder the hood, I'd think we're looking at mmap logic.\n\nI found this in an article from Oracle:\n\nTo me it seems like these things would never change when working with a specific firmware version where the binaries can always be expected to be the same.\n\nMy questions are:\n\n",
  "votes": "1",
  "answers": 0,
  "views": "67",
  "tags": [
    "linux",
    "exploit",
    "mips",
    "libraries"
  ],
  "user": "Matthew Tingum",
  "time": "Jul 1, 2023 at 1:57",
  "comments": [],
  "answers_data": []
}