{
  "title": "How do Android reverse engineering tools extract packages/ package hierarchy present in Android apps?",
  "link": "https://reverseengineering.stackexchange.com/questions/4315/how-do-android-reverse-engineering-tools-extract-packages-package-hierarchy-pre",
  "content": "I have been involved in disassembling Android apps using baksmali and dexpler. Whenever I disassemble an app, I find the packages and package hierarchy (that would have been available in development scenario) intact. For instance, when I disassemble a task manager app (MD5: 3377f8527479ab4e72bf9fa5eec62abe), I get the package hierarchy as shown in the figure below.. \n\nIn this context, I have the following questions,\n\n",
  "votes": "6",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "decompilation",
    "static-analysis",
    "android"
  ],
  "user": "Annamalai N",
  "time": "May 12, 2014 at 14:28",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, the package hierarchy is preserved in the dex file. To be more precise, if a class was named foo.bar.baz.foo.Myclass in the sourcecode, it's name will be foo.bar.baz.foo.Myclass in the .dex as well. Any \"package hierarchy\" will be derived from those class names.\n\nIf you want to know more about the .dex file format, the Dalvik Executable Format Reference should contain everything you need.\n\n",
      "votes": "4",
      "user": "Guntram Blohm",
      "time": "May 12, 2014 at 14:32",
      "is_accepted": true,
      "comments": [
        {
          "user": "Annamalai N",
          "text": "Thanks for the link and answer. In the dex documentation, I happen to see that \"A FullClassName is a fully-qualified class name, including an optional package specifier followed by a required name\". It seems like including the name of the package is NOT mandatory?",
          "time": null
        },
        {
          "user": "Annamalai N",
          "text": "Also, it is mentioned in that document that the fully qualified class name is proceeded by the character 'L'. Is it correct to assume that's why we see 'Landroid/support/v4/widget' in the .smali file when the actual classes referred is android/support/v4/widget ?",
          "time": null
        }
      ]
    },
    {
      "content": "The fast answer is that in Java, the fully qualified name of the class is the actual name of the class concatenated with its package.  To the classloader, com.foo.Annamalai is the name it will load at runtime.  This is also, subsequently why you can't have two classes of the same name in the same package. \n\nThis will be a (semi) contrived instance, but lets pretend your app has two different logging frameworks, and you need to support both.  \n\n```\nimport java.util.logging.Logger;\nimport org.apache.log4j.Logger;\n\n```\nIf you try this, your compiler should barf, complaining that you have two classes with the same name.  Well, this version will work:\n\n```\norg.apache.log4j.Logger logger4j = org.apache.log4j.Logger.getLogger(DeleteMe.class);\njava.util.logging.Logger loggingLogger = java.util.logging.Logger.getLogger(DeleteMe.class.getName());\n\n```\nBecause of this package/class naming convention, it is trivial to extract the file structure of the application for reverse-engineering purposes, because in java the package name is specified to correlate to a file structure.  \n\nIn a comment you asked about NOT using a package, well, if you did that then you would NEVER be able to use two classes of the same name--the compiler would never allow it.  \n\nThe above example would turn into this:\n\n```\nLogger logger4j = Logger.getLogger(DeleteMe.class.getName());\nLogger loggingLogger = Logger.getLogger(DeleteMe.class.getName());\n\n```\nWhich Logger is the compiler going to pick if you have two on the classpath without package names?  \n\n",
      "votes": "3",
      "user": "avgvstvs",
      "time": "May 12, 2014 at 16:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "Annamalai N",
          "text": "Thanks for the explanation. I get the perspective clearly now.  it is trivial to extract the file structure of the application for reverse-engineering purposes, because in java the package name is specified to correlate to a file structure - The same applies when reversing Android apps (even when they contain native code)? Correct me if I am wrong.",
          "time": null
        },
        {
          "user": "avgvstvs",
          "text": "Yeah, Google still has to follow the JLS or Oracle will sue them.",
          "time": null
        },
        {
          "user": "avgvstvs",
          "text": "One more thing which I didn't note, the biggest reason not to put everything in the \"default\" package (which means NO package name) is that it makes it possible to accidentally write a class that has the same name as another class in library code.  Meaning you'd get weird Exceptions and without reversing every library, may not figure out why, so package names buy you quite a bit of utility.",
          "time": null
        }
      ]
    }
  ]
}