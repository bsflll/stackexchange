{
  "title": "How much time would it take to reverse engineer 100,000 lines of disassembly?",
  "link": "https://reverseengineering.stackexchange.com/questions/10803/how-much-time-would-it-take-to-reverse-engineer-100-000-lines-of-disassembly",
  "content": "I'm trying to get a sense of the amount of time it takes to RE something, but I'm going to try to make this question as least subjective as possible.\n\nImagine a very simple application that has only 100,000 lines of disassembly. Maybe it's a game like flappy bird, draws things to screen, a little physics, gets input, game mechanics, etc. Now imagine this in x86 disassembly with with highest optimization used, no debug symbols. \n\nFor a reverse engineer who is moderately skilled, what is an estimate on the time it might take such an engineer to go through the assembly and understand how the app works.\n\nedit: To add more constraint, what I mean by \"understand how the app works\", I mean, know it well enough to create a near replica of the application using mostly the same implementation details. Flappy bird is a bad example because you can play it and you already have an idea of what it does. Pretend you don't know how it works.\n\n",
  "votes": "-3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "disassembly",
    "x86"
  ],
  "user": "Thomas",
  "time": "Sep 4, 2015 at 20:58",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "\"understand how the app works\" -- That's very subjective. One could claim to understand how it works from just playing the game, whereas someone else could claim to not understand how it works even if given the full source code.",
      "time": null
    },
    {
      "user": "Thomas",
      "text": "@JasonGeffner good point. I'll try clarify. For example, does the bird drop in height every frame, or every .1 seconds, how does it know if game is at menu or not, etc. Just a general understanding of the implementation. Such an understanding that is sufficient to recreate a near-replica of the application if the engineer wanted to",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "None of the items in your list require disassembling. \"Pretend you don't know how it works.\": understanding even what a moderate amount of code does without, uh, knowing what it does is extremely hard. In reverse, if I disassemble a program that I know well, I can go through it at speed and focus on the things I (a) recognize and (b) am interested in.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "You can't \"Pretend you don't know how it works\". No serious reverser will reverse any program without at least an idea of what the program does. Even malware analysts run their malware (on carefully isolated machines or VMs).",
      "time": null
    },
    {
      "user": "Thomas",
      "text": "@GuntramBlohm there's a very clear distinction between knowing what it does and knowing how it works. I'm uncertain which point you were trying to make. I think it's very reasonable to know what it does and not how it works.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The amount of time needed to understand assembly code does not grow linear. For example: You can understand a simple function with 10 lines of assembly relatively quickly (lets say 4-5 minutes). As the code grows the more complex it is to understand the code: You need to catch how different functions work together, so the equation does not result in 8-10 minutes.\n\nAs L. Resnik made clear the amount of time vastly depends on the complexity of the code, but this is roughly the same for every standard application I would say. \n\nUnderstanding 100,000 lines of C code takes several weeks (Guess! I did never try to understand 100,000 lines of C code before), depending on the time you're actually working. With this basis I guess it takes several months with smart analysis. Of course \"several\" is wide-ranged, but I do not think you could answer anything more precise.\n\nFeel free to add something, as these are just my first thoughts.\n\n",
      "votes": "4",
      "user": "qwertz",
      "time": "Sep 5, 2015 at 14:09",
      "is_accepted": true,
      "comments": [
        {
          "user": "skooog",
          "text": "So for example, is spending a full work week on reversing and analyzing an unknown executable within the limits of \"normal\", \"typical\", \"expected\"?",
          "time": null
        }
      ]
    }
  ]
}