{
  "title": "How can I interpret mov ds:dword_4870058 , offset loc_4048E0?",
  "link": "https://reverseengineering.stackexchange.com/questions/6224/how-can-i-interpret-mov-dsdword-4870058-offset-loc-4048e0",
  "content": "I have the following assembly line and I have my problems to understand it, because until now I have always seen lines like this: mov eax, 0 and so on. \nBut now, I have the following (I use IDA PRO):\n\n```\n mov ds:dword_4870058 , offset loc_4048E0\n\n```\nWhen I click on offset loc_4048E0, I see: \n\n```\n loc_4048E0:\n mov al, 10h\n jmp sub_402774\n\n```\nwhen I interpret dword_4870058 as a global variable, can I assume that dword_4870058 gets the value 10h (if I regard al as a return value register) . This is the only thing that I can imagine. \n\nIs it a right or wrong assumption ?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "3k",
  "tags": [
    "assembly"
  ],
  "user": "user3097712",
  "time": "Sep 12, 2014 at 5:49",
  "comments": [
    {
      "user": "user45891",
      "text": "No. loc_4048E0 SEEMS to be a function. if so dword_4870058 is a function pointer (and a global variable as you already found out), if not it is a pointer to data that for some reason IDA seems to think of as a function (No idea how likely IDA mislabels that)",
      "time": null
    },
    {
      "user": "user3097712",
      "text": "I thought that the mov-instruction is for storing data/content. Is it different when it is a function pointer, or ? I mean, is there a reason why the compiler pick mov instead of lea ?",
      "time": null
    },
    {
      "user": "evlncrn8",
      "text": "lea / mov difference is covered pretty well here..  stackoverflow.com/questions/1658294/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The cleaner version would be: \n\n```\nmov [dword_4870058] , offset loc_4048E0\n\n```\nThen, a variant:\n\n```\nmov [address], value\n\n```\nWhere, the [ ] signifies its a memory address contained within the []\nand the value put in it for this case is another memory address (in the code section).\n\nTo move it to a register it would be:\n\n```\nmov register, value ; eg : mov eax, 12345678h\n\n```\nThe value portion can be a value, a pointer, a constant... They're all the same ... just numbers.\n\nLittle thing to pay in mind, in x86 you cant do memory to memory moves. So, the \"can I assume that dword_4870058 gets the value 10h\" is completely wrong, the function at that address has NOT been called has it ? So, it cant get the value 10h...\n\nIts simply storing one value (the address of a function) into another memory block.\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Sep 12, 2014 at 12:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "And presumably, the OP would find something like call ds:[dword_4870058] somewhere else in the code. Whether or not that will call this particular function needs a full flow trace to find out if it's a constant (once written, never modified), or only can be determined during run-time.",
          "time": null
        }
      ]
    }
  ]
}