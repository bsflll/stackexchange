{
  "title": "PE ImageBase presence in PDB",
  "link": "https://reverseengineering.stackexchange.com/questions/31872/pe-imagebase-presence-in-pdb",
  "content": "Is ImageBase of a PE binary present in its PDB or can it only be retrieved from the binary?\n\nI have studied both Microsoft's PDB sources and LLVM docs without much luck finding it.\n\nIn the DBI stream there exist section headers with section RVAs, but I couldn't find any trace of their corresponding VAs or the base address itself.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "112",
  "tags": [
    "pe",
    "address",
    "pdb"
  ],
  "user": "mimak",
  "time": "May 15, 2023 at 13:21",
  "comments": [],
  "answers_data": [
    {
      "content": "I believe this information is not stored within the PDB files in any recent versions.\n\nMicrosoft's DIA SDK used for dumping information contained in PDB files does provide a method named get_virtualAddress (as opposed to get_relativeVirtualAddress) which should, in theory, return the real virtual address of a static symbol (segment, section, frame data etc.), however both of these methods currently return the same value (RVA) in all test cases I've tried. The implementations of two methods are different though, suggesting that there could be some use cases where the VAs are in fact stored within the data.\n\nKeep in mind that the PDB format dates back to 90s, so if I had to guess I'd say that the actual VA's were contained within PDB files back before ASLR was introduced. This is, of course, only speculation on my part.\n\n",
      "votes": "4",
      "user": "ynwarcs",
      "time": "May 16, 2023 at 11:02",
      "is_accepted": true,
      "comments": [
        {
          "user": "mimak",
          "text": "That's what I assumed too and instead extracted the imagebase directly from binary with IDAPython, thanks",
          "time": null
        }
      ]
    }
  ]
}