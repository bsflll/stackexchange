{
  "title": "How do I trace instructions in an Immunity Debugger PyCommand?",
  "link": "https://reverseengineering.stackexchange.com/questions/3450/how-do-i-trace-instructions-in-an-immunity-debugger-pycommand",
  "content": "This sounds like a very simple thing to accomplish but I can't seem to get it working.\n\nI'd like to run a part of a program in ImmDbg instruction by instruction and keep track of some actions that it performs (which jumps it takes, when registers are modified, etc...). This is of course a tedious process to do by hand and sometimes I need to automate it and add some custom behavior based on the target.\n\nI didn't find tracing facilities in the Python APIs, so I tried to step through the code. The sample code below should simply execute 10 instructions.\n\n```\nimport immlib\n\nimm = immlib.Debugger()\n\ndef main(args):\n    for i in range(10):\n        imm.stepIn()\n\n    return \"OK\"\n\n```\nHowever, it appears to be executing sometimes less than 10 instructions and each stepIn() call freezes the program for about a second, rendering the script way too slow to perform anything useful.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "python",
    "debugging",
    "immunity-debugger"
  ],
  "user": "Sigill",
  "time": "Jan 13, 2014 at 11:01",
  "comments": [
    {
      "user": "Peter Teoh",
      "text": "the answer is simple:   just look at mike.py inside the pycommand subdirectory.   it has the stepIn() loop.   the reason why your execution take too long is because when you encountered system DLL you are supposed to stepover it, as shown in \"mike.py\".",
      "time": null
    },
    {
      "user": "Peter Teoh",
      "text": "and additionally, remember to enable tracing (via calling stepIn() above) only when a particular breakpoint is reached (use LogBpHook).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you just want to trace instructions to create a control flow graph (CFG) and even a fairly-accurate data flow graph (DFG), pyCommand is admittedly clunky compared to the tools we have available:\n\nPLATFORM AGNOSTIC\n\nLINUX\n\nPlease note the python solutions with be slower (but easier to implement) than the C/C++ solutions.\n\n",
      "votes": "1",
      "user": "grepNstepN",
      "time": "May 20, 2016 at 16:15",
      "is_accepted": false,
      "comments": []
    }
  ]
}