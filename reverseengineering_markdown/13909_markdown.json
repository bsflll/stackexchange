{
  "title": "Interpret binary format of matrix files provided (*.mtx)",
  "link": "https://reverseengineering.stackexchange.com/questions/13909/interpret-binary-format-of-matrix-files-provided-mtx",
  "content": "I can't figure out exactly how these binary matrix files are formatted, other than the 2 little-endian 32-bit unsigned integers in the header. Supposedly the following is a 3x3 identity matrix:\n\n```\n0300 0000 0300 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f \n\n```\nAnd the following is a 3x2 matrix with arbitrary numbers whose value I'm not certain of:\n\n```\n0300 0000 0200 0000 0000 803f 0000 4040\n0000 a040 0000 0040 0000 8040 0000 c040\n\n```\nBasically, is there an encoding where 0000 803f can translate to a value of 1 while 0000 0000 translates to 0 for each of the matrix values?\n\n",
  "votes": "3",
  "answers": 2,
  "views": "512",
  "tags": [
    "file-format",
    "binary-diagnosis"
  ],
  "user": "Patrick Roberts",
  "time": "Nov 12, 2016 at 19:52",
  "comments": [],
  "answers_data": [
    {
      "content": "You've correctly identified the first four bytes as the header or matrix shape.\n\nIf you were to remove those shape bytes and realign the rest of the hex string, the identify matrix becomes very clear:\n\n```\n0000 803f 0000 0000 0000 0000\n0000 0000 0000 803f 0000 0000\n0000 0000 0000 0000 0000 803f \n\n```\nWe can easily see here that the text aligns to the shape of an identity matrix, a cell is four bytes, and the value of 0000 803f represents 1.\n\nThis just happens to be the IEEE 754 encoding of 1.0. This is either something you can recognise with some experience or have python show you:\n\n```\nIn [1]: import struct\n\nIn [3]: struct.unpack('f', \"0000803f\".decode('hex'))\nOut[3]: (1.0,)\n\n```\n",
      "votes": "4",
      "user": "NirIzr",
      "time": "Nov 12, 2016 at 20:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "Rhymoid",
          "text": "Note that this code implicitly depends on the endianness and size of float of the host system. To always decode little-endian binary32 floats, use the format string '<f' instead of 'f'.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "@Rhymoid +1 however I assumed the code that writes the file does the native as well, so @f is what you'd want.",
          "time": null
        }
      ]
    },
    {
      "content": "Oh, I just figured it out. I can interpret each of the following 4 byte values after the header as 32-bit signed floating point values in little-endian format. 0000 803f would be equivalent to 1.0f.\n\nI determined this in node.js using a DataView:\n\n```\nconst u = new Uint8Array(4);\nconst d = new DataView(u.buffer);\n\nu[0] = 0x00;\nu[1] = 0x00;\nu[2] = 0x80;\nu[3] = 0x3f;\n\n// interpret 4 bytes at offset of 0 bytes as little-endian 32-bit float\n// DataView.prototype.getFloat32(byteOffset[, littleEndian])\nconsole.log(d.getFloat32(0, true));\n// outputs 1\n\n```\n",
      "votes": "2",
      "user": "Patrick Roberts",
      "time": "Nov 12, 2016 at 20:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "NirIzr",
          "text": "Yes. I was just answering that :(",
          "time": null
        },
        {
          "user": "Patrick Roberts",
          "text": "@NirIzr sorry about that. These files were for a class assignment and my professor didn't bother explaining how the files were formatted. You may finish answering and I'll upvote you for the trouble.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Yes, I was going to answer anyway, just dropped the 010editor colorful images :P",
          "time": null
        }
      ]
    }
  ]
}