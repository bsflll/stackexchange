{
  "title": "Reversing a 2.4Ghz Quadcopter remote control",
  "link": "https://reverseengineering.stackexchange.com/questions/9331/reversing-a-2-4ghz-quadcopter-remote-control",
  "content": "TL;DR - I can't figure out why I'm failing to replicate the Quadcopter's remote control with, say, Arduino and NRF24L01 after eavesdropping the SPI commands on the remote control. \n\nSo I got this cheap quadcopter, actually 3 different models (this, this and this, and the principle is the same with all three)\nAll models use the BK2423 radio, which should be air-compatible with the NRF24l01 - which is what I have. \n\nSo since I have found (surprisingly) very little information on this matter online, I put some probes between the remote control's MPU and it's BK2423 and used Saleae Logic Analyzer to read the communication running on the SPI bus between the two. What I have find out is it has 3 main stages: Config, Search/Bind and Command, where in between there are some tweaks that the MCU performs, as I described below. \n\nOn the Config phase, some registers are being set, like the pipe number for Rx and the address, RF channel and more. Here is part of the config capture:\n\n\nSo the initial Tx (and Rx) address is 5 bytes: 0xCCCCCCCCCC.\nAnd the initial RF Channel is 0x2D. \nThe default address length for the two chips is 5 bytes and since the remote control does not change it, the length should stay 5 bytes.\n\nThen comes the search phase. In that phase, the remote sends basically the same data over and over, and only changes the RF channel. Here is the last search packet:\n\n\n\nSo after many transmissions with different RF channels, something weird happens. The remote hits the correct RF channel for the quadcopter, but I can't figure out how he understands that, since the Status register (on the MISO channel) stays the same on the last search packets. Here is where the remote control MCU tells the BK2423 to change the RF Channel, with no evidence to anything else around:\n\n\n\nThen the MCU tells the BK2423 to change the address and RF channel to the right ones. It must be the right ones since the quadcopter reacts properly:\n\n\n\nFrom this point and on, the remote control sends command packets and the quadcopter happily fly around. I couldn't manage to properly pass the search phase.\n\nI used some code from this project (taken from this page) and changed HCD.cpp to match what I sniffed. Here are only the two methods I changed (rest of the code within that file stays the same):\n\n```\nvoid HCD::bind(unsigned char *ID)\n{\n  for(unsigned char i=0;i<4;i++)\n    noteID[i]=ID[i];\n\n  state=HS_CONNECT;\n  radio.offline();\n    radio.txbuf[0] = 0x3F;\n    radio.txbuf[1] = 0x4C;\n    radio.txbuf[2] = 0x84;\n    radio.txbuf[3] = 0x6F;\n    radio.txbuf[4] = 0x9C;\n    radio.txbuf[5] = 0x20;\n    radio.sendBuffer(6); \n    radio.txbuf[0] = 0x3E;\n    radio.txbuf[1] = 0xC9;\n    radio.txbuf[2] = 0x9A;\n    radio.txbuf[3] = 0xB0;\n    radio.txbuf[4] = 0x61;\n    radio.txbuf[5] = 0xBB;\n    radio.txbuf[6] = 0xAB;\n    radio.txbuf[7] = 0x9C;\n    radio.sendBuffer(8); \n    radio.txbuf[0] = 0x39;\n    radio.txbuf[1] = 0x0B;\n    radio.txbuf[2] = 0xDF;\n    radio.txbuf[3] = 0xC4;\n    radio.txbuf[4] = 0xA7;\n    radio.txbuf[5] = 0x03;\n    radio.sendBuffer(6); \n\n    radio.txbuf[0] = 0x30;\n    radio.txbuf[1] = 0xCC;\n    radio.txbuf[2] = 0xCC;\n    radio.txbuf[3] = 0xCC;\n    radio.txbuf[4] = 0xCC;\n    radio.txbuf[5] = 0xCC;\n    radio.sendBuffer(6);\n\n    radio.txbuf[0] = 0x2A;\n    radio.txbuf[1] = 0xCC;\n    radio.txbuf[2] = 0xCC;\n    radio.txbuf[3] = 0xCC;\n    radio.txbuf[4] = 0xCC;\n    radio.txbuf[5] = 0xCC;\n    radio.sendBuffer(6);\n\n    radio.txbuf[0] = 0xE1;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0xE2;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x27;\n    radio.txbuf[1] = 0x70;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x21;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x22;\n    radio.txbuf[1] = 0x01;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x23;\n    radio.txbuf[1] = 0x03;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x25;\n    radio.txbuf[1] = 0x2D;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x24;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x31;\n    radio.txbuf[1] = 0x09;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x26;\n    radio.txbuf[1] = 0x07;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x50;\n    radio.txbuf[1] = 0x73;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x3C;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x3D;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x31;\n    radio.txbuf[1] = 0x09;\n    radio.sendBuffer(2);\n\n    radio.txbuf[0] = 0x1D;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2);\n\n\n}\n\n\nvoid HCD::update(unsigned char *payload)\n{\nSerial.print(\"Sending, state: \");\nSerial.print(state);\nSerial.print(\"  Channel: \");\nSerial.println(channel);\n  unsigned char c=0;\n\n  switch(state)\n  {\n  case HS_CONNECT:\n\n    radio.offline();\n    radio.txbuf[0] = 0x27;\n    radio.txbuf[1] = 0x70;\n    radio.sendBuffer(2); \n    radio.txbuf[0] = 0xE1;\n    radio.txbuf[1] = 0x00;\n    radio.sendBuffer(2); \n    radio.txbuf[0]=0x25;\n    radio.txbuf[1]= channel; //0x2A;\n    radio.sendBuffer(2);      //-Chan\n\n    //radio.block(baseAddress);\n    //radio.block(flushTX);\n\n    radio.txbuf[0]=0xA0;\n    radio.txbuf[1]=0x20;\n    radio.txbuf[2]=0x14;\n    radio.txbuf[3]=0x03;\n    radio.txbuf[4]=0x25;\n    radio.txbuf[5]=0x1F; //noteID[0];\n    radio.txbuf[6]=0xC3; //noteID[1];\n    radio.txbuf[7]=0x00; //noteID[2];\n    radio.txbuf[8]=0xE2; //noteID[3];\n    radio.txbuf[8]=0xAA; //noteID[3];\n    radio.sendBuffer(9);      //-tx data\n    //radio.block(PTX);\n    radio.online();\n\n    while(!c)\n      c=radio.getStatus();\n    radio.clrStatus();\n     Serial.print(\"Status: \" );\n     Serial.println(c);\n    if(c&0x10)  //MRT\n    {\n      state=HS_UNINITIALIZED;\n      Serial.println(\"Uninitializing :( Connecting\");\n    }\n\n    if(c&0x20)  //ACK\n    {\n      Serial.println(\"ACK Connecting\");\n      state=HS_CONNECTED;\n    }\n    break;\n\n  case HS_CONNECTED:\n\n    radio.offline();\n\n    radio.txbuf[0]=0x25;\n    radio.txbuf[1]=channel;\n    radio.sendBuffer(2);      //-Chan\n\n\n    radio.txbuf[0]=0x2a;\n    radio.txbuf[1]=noteID[0];\n    radio.txbuf[2]=noteID[1];\n    radio.txbuf[3]=noteID[2];\n    radio.txbuf[4]=noteID[3];\n    radio.txbuf[5]=0xCC;\n    radio.sendBuffer(6);      //-tx data\n\n    radio.txbuf[0]=0x30;\n    radio.txbuf[1]=noteID[0];\n    radio.txbuf[2]=noteID[1];\n    radio.txbuf[3]=noteID[2];\n    radio.txbuf[4]=noteID[3];\n    radio.txbuf[5]=0xAA;\n    radio.sendBuffer(6);      //-tx data\n\n    radio.online();\n\n    radio.block(flushTX);\n\n    radio.txbuf[0]=0xA0;\n    radio.txbuf[1]=payload[0];\n    radio.txbuf[2]=payload[1];\n    radio.txbuf[3]=payload[2];\n    radio.txbuf[4]=payload[3];\n    radio.txbuf[5]=payload[4];\n    radio.txbuf[6]=payload[5];\n    radio.txbuf[7]=payload[6];\n    radio.txbuf[8]=payload[7];\n    radio.sendBuffer(9);      //-tx data\n\n    radio.txbuf[0]=0x20;\n    radio.txbuf[1]=0x7A;  //-TX\n    radio.sendBuffer(2);\n\n    while(!c)\n      c=radio.getStatus();\n    radio.clrStatus();\n\n\n    if(c&0x10)  //MRT\n    {\n      Serial.println(\"MRT - connected\");\n    }\n\n    if(c&0x20)  //ACK\n    {\n      Serial.println(\"ACK - connected\");\n    }\n\n    break;\n\n  }\n}\n\n```\nAnd I'm using a fairly simple Arduino sketch to invoke these methods (which is a modified version of the INO file form the project mentioned above):\n\n```\n#include <HCD.h>\nHCD drone0;\n\nunsigned char ID0[]={\n  0x1F, 0xC3, 0x00, 0xCC};\nunsigned char payload0[]={  0x0, 0x20, 0x14, 0x03, 0x25, 0x1F, 0xC3, 0x00 };\nunsigned char payload1[]={\n  0x00,0x70,0x70,0x1E,0x1E,0x00,0x10,0x7E};\n\nvoid setup()\n{\n  Serial.begin(19200);\n  Serial.println(\"ON\");\n  Serial.println(\"Connecting a\");\n  drone0.bind(ID0);\n  drone0.setChannel(0x25);\n}\n\nunsigned long timer=0;\n\nunsigned char chs[] = { 0x2A, 0x20, 0x34, 0x16, 0x3E, 0x0C, 0x48};\nvoid loop()\n{\n  for (int i=0; i<128; i++)\n  {\n     drone0.setChannel(i);\n     drone0.update(payload0);\n     delay(10);\n  }\n  delay(2000);  \n  drone0.setChannel(0x2); \n  drone0.update(payload1);\n  delay(2000);\n}\n\n```\nYet the Quadcopter seems to gently ignore this code and many variations of it. \n\nIf anyone got to this line in my question, I would appreciate any help he/she can provide. \n\n",
  "votes": "8",
  "answers": 1,
  "views": "2k",
  "tags": [
    "spi",
    "arduino",
    "remote"
  ],
  "user": "Omer",
  "time": "Jul 12, 2015 at 12:56",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "I'm afraid i don't have the knowledge to help you, but i wish more questions on RE.SE were as well researched and written. Upvoted.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There are some items I do not understand in your code:\n\nOtherwise, I do not know anything about quadcopters (only that Amazon wants to use them...)\n\n",
      "votes": "1",
      "user": "josh",
      "time": "Jul 12, 2015 at 12:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "Omer",
          "text": "Thanks for the remarks! 1. True - I just replicated what the logic analyzer caught. 2. True again. And the second [8] is a bug. 3. This is the same as the original code, basically it can come at this stage as well, there are no restriction on where in the flow this register can be configured so I guess it should be OK.",
          "time": null
        },
        {
          "user": "josh",
          "text": "But shouldn't you send a total of 10 bytes, as the payload size has been setup to be 9? You also catch 10 bytes in your logic analyzer, when including the command.",
          "time": null
        },
        {
          "user": "Omer",
          "text": "Right. default payload is 8 bytes and they didn't change it. But after everything else failed, I decided to replicate exactly what was captured. I know it doesn't make sense, the same as the non-existing registers 1F and 1E, but that's what I sniffed, several times. Any experience with such discrepancies?",
          "time": null
        },
        {
          "user": "josh",
          "text": "Sorry, but I do not understand.  In your \"bind\" routine, you set the payload length to 9 bytes (command 0x31), but then you send only 8 bytes payload. Why? But maybe I got you completely wrong, and we are talking about different items. I have only limited experience with microcontrollers.",
          "time": null
        },
        {
          "user": "Omer",
          "text": "I think you got it right again. I missed that. At some stage I just copied the bytes, and indeed 0x31 followed by 0x9 means the payload is set to 9 bytes. Fixing the bug of the double \"txbuf[8]\" should reflect that as well (meaning 10 bytes total including the command). I should perform this fix and update the question (who knows, perhaps this was the issue?!...)",
          "time": null
        }
      ]
    }
  ]
}