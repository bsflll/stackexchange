{
  "title": "create pem from ecc signature bytes",
  "link": "https://reverseengineering.stackexchange.com/questions/12352/create-pem-from-ecc-signature-bytes",
  "content": "I am researching an QNX ARM based car navigation and it seems this system has a backdoor that enables telnet access without password to the system if a challenge/response succeeds. \n\nWhen a file called challenge is placed on a USB key and inserted in the system it will write some bytes in it. Here are a few examples:\neaxj2ABs4BeMQqQJamOH?smOCVEC\nKKUcw5m:vvJXmCIK3SBDDqv9p:Or\nodlwY@ed6B?8OKCmaqIDdFz7YSnv\nBBqGoWKocmAuvSDacMAkZ:83:QVq\n\nI found the ELF file that handles the challenge/response in the firmware (can share this upon request) and it reads a public key file:\nhChallengePub = sub_1030A0((int)\"/ifs/challenge.pub\", &v11, &v13)\n\nchallenge.pub contains the following bytes:\n\n```\n30 29 03 02 07 00 02 01 0E 02 0F 00 9C 9C A4 5A\nFA 1E 2D 32 2A 93 9D 37 41 93 02 0F 00 95 AB 6B\nDB 94 29 4D C3 C6 07 3B B7 31 40\n\n```\nDebug text in the ELF points to source file src/pk/ecc/ecc_import.c which leds me to believe it's an ECC public key but it seems to be incomplete (eg no ASN.1 header).\n\nI want to be able to convert this key into pem format so I can run some tests with openssl so I am looking for pointers how to do this.\n\nUltimately I'd like to see if I can create proper response and get access but maybe this is impossible if it requires private key (which it should if it's any good).\n\n",
  "votes": "2",
  "answers": 1,
  "views": "372",
  "tags": [
    "encryption",
    "qnx"
  ],
  "user": "Remko",
  "time": "Apr 5, 2016 at 16:26",
  "comments": [],
  "answers_data": [
    {
      "content": "src/pk/ecc/ecc_import.c strongly suggests that it's using LibTomCrypt: https://github.com/libtom/libtomcrypt/blob/develop/src/pk/ecc/ecc_import.c\n\nThe content of challenge.pub appears to be DER-encoded. It can be decoded as follows:\n\n```\nSEQUENCE(4 elem)\n    BIT STRING (1 bit) 0\n    INTEGER            14\n    INTEGER (112 bit)  3176466357047968568460177262985619\n    INTEGER (112 bit)  3035660427084515633934604600553792\n\n```\nAs can be seen in the ecc_import.c code referenced above, this translates to:\n\n",
      "votes": "2",
      "user": "Jason Geffner",
      "time": "Apr 5, 2016 at 16:51",
      "is_accepted": true,
      "comments": [
        {
          "user": "Remko",
          "text": "How to verify it with openssl ? openssl ec -noout -text -inform DER -in challenge.pub -pubin fails: read EC key unable to load Key 24340:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1198: 24340:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:tasn_dec.c:372:Type=X509_ALGOR 24340:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:694:Field=algor, Type=X509_PUBKEY  Missing ASN1 ?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "LibTomCrypt uses a different format than openssl expects. See superuser.com/questions/900918/â€¦ for openssl's expected format.",
          "time": null
        },
        {
          "user": "Remko",
          "text": "Accepting this answer as it's very helpful (would still like to convert to OpenSSL compatible PEM format but I will research that)",
          "time": null
        }
      ]
    }
  ]
}