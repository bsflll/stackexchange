{
  "title": "Thread Injection on OSX",
  "link": "https://reverseengineering.stackexchange.com/questions/1414/thread-injection-on-osx",
  "content": "Much reverse engineering has been done on Windows over the years leading to great undocumented functionality, such as using NtCreateThreadEx to inject threads across sessions.  \n\nOn OSX the topic of thread injection seems relatively uncharted.  With the operating system being so incredibly large, where can I begin looking in order to uncover the functionality I desire?\n\nFor example, if someone were to ask me this about Windows, I would expect an answer telling me to begin reverse engineering CreateRemoteThread or to start looking at how the kernel creates user threads and point them into ntoskrnl.exe.\n\n",
  "votes": "13",
  "answers": 3,
  "views": "3k",
  "tags": [
    "osx"
  ],
  "user": "mrduclaw",
  "time": "Mar 31, 2013 at 3:00",
  "comments": [
    {
      "user": "asheeshr",
      "text": "The software is redundant as the majority of questions here involve software.",
      "time": null
    },
    {
      "user": "mrduclaw",
      "text": "Seems that there are a significant number of hardware related questions as well.  If a hardware RE wanted to use this site, wouldn't it be nice if he/she could just put \"software\" on their ignored tags and be free from questions like mine?",
      "time": null
    },
    {
      "user": "asheeshr",
      "text": "A hardware RE could also add the hardware to his favorite tags. It would have a similar effect. Do post you opinion here -> meta.reverseengineering.stackexchange.com/questions/3/â€¦",
      "time": null
    },
    {
      "user": "mrduclaw",
      "text": "@AshRj Fair point. I'll fix it in the future.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Admittedly, I don't know much about OSX, or even Linux.  But I would suggest looking at the GDB source code.  GDB somehow is able to attach to running processes in order to debug them.  I would imagine this would, at least, provide similar functionality that you're looking for and prove a decent place to start.\n\nIf you're looking for a system call, it appears that ptrace is how GDB might do it.  Also, here's a nice overview of how debuggers work.\n\nUpdate: \n\nActually it seems that Uninformed wrote an article that covers this topic somewhat.  In the article they discuss:\n\nAlso from that article, it looks like thread_create_running might be the function you're looking for.  Link to the man page.\n\n",
      "votes": "12",
      "user": "omghai2u",
      "time": "Mar 31, 2013 at 2:18",
      "is_accepted": true,
      "comments": [
        {
          "user": "mrduclaw",
          "text": "The Uninformed article is really great and I think right what I needed to get me started in the right direction.  Thanks!",
          "time": null
        }
      ]
    },
    {
      "content": "For OS X injection, I would look at the mach_star projects (mach_override and mach_inject)\n\nhttps://github.com/rentzsch/mach_star\n\nAlso, Pin now has os x support\n\nhttp://software.intel.com/en-us/articles/pin-a-binary-instrumentation-tool-downloads\n\n",
      "votes": "4",
      "user": "broadway",
      "time": "Apr 3, 2013 at 7:52",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You might find this useful -- I ended up writing a tutorial about this recently, since, as you note, documentation for this stuff is always so sketchy and often out of date.\n\nhttp://soundly.me/osx-injection-override-tutorial-hello-world/\n\n",
      "votes": "0",
      "user": "jar",
      "time": "May 7, 2014 at 19:16",
      "is_accepted": false,
      "comments": []
    }
  ]
}