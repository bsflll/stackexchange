{
  "title": "Obtaining memory locations of local variables",
  "link": "https://reverseengineering.stackexchange.com/questions/11436/obtaining-memory-locations-of-local-variables",
  "content": "For ELF binaries on Linux, if the executable is not stripped, it is possible to recover memory locations of location variables in the form of relative addresses to stack/frame pointer? As an example, if a C program contains an integer variable var in function main, is there any means to associate its address on stack, say [rbp-0x18] to the source variable itself?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "binary-analysis",
    "stack-variables",
    "local-variables"
  ],
  "user": "sherlock",
  "time": "Nov 30, 2015 at 8:17",
  "comments": [],
  "answers_data": [
    {
      "content": "Let's start first with finding local variables. Binary files contain multiple sections used for a plethora of purposes. The section of interest in your case is the .bss. In this sections, you're supposed to find a reference to the local variables used by your program.\n\nNow, regarding the variable name, the only way to associate it to a relative address is through the compiler's debug information (DWARF2/DWARF3 format for ELF binaries), if you use GCC with the -g3 option. You can use GDB to extract the information, it parses the dwarf information to associate assembly code lines with source code lines, and memory locations to variable.\n\nYou have to know that a variable name is only an abstraction of a memory location which is only known to the compiler at compile time, and after optimizations. Keep in mind that if you push the compiler to optimize (-Ox with GCC, x = [1, 2, 3, s, fast]), it'll minimize its stack references and use registers instead. Therefore, all references to your local variables will vanish into a temporary use of registers (the registers will be released and used elsewhere). \n\nNote : If you analyze an optimized code using GDB you'll notice that some function parameters or variables are shown as \"optimized out\". \n\nLet me know if you need more details.\n\n",
      "votes": "1",
      "user": "yaspr",
      "time": "Nov 30, 2016 at 10:31",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As far as I know it is possible only if the executable is compiled with debug information (DWARF).\nIn other cases this information is removed.\nHere you can see an example of how it looks like. \n\n",
      "votes": "0",
      "user": "w s",
      "time": "Nov 30, 2015 at 10:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}