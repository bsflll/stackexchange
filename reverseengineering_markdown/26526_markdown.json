{
  "title": "Find assembly in binary with ida python",
  "link": "https://reverseengineering.stackexchange.com/questions/26526/find-assembly-in-binary-with-ida-python",
  "content": "I want to find 2 consecutive instructions with Ida python\n\nmove r2,r3 ; move r2 r4\n\nWhat is the easy way to find the addresses of that with Ida python?\n\nI can Iterate on all Functions and for each function get dissasembly by idc.GetDisasm and then looking for the value but it's take lot of time.\n\nIs there any smart and faser way?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "paramikoooo",
  "time": "Dec 13, 2020 at 10:50",
  "comments": [],
  "answers_data": [
    {
      "content": "You can use module ida_search and function find_binary.\nIf I understand this correctly, the arguments are\n\nFirst you should find binary representing desired instructions (you can do it by text search in your executable or assemble it for your architecture), then just use it as an argument.\n\nYou can find plenty of examples of this function usage for reference at github.\n\n",
      "votes": "1",
      "user": "w s",
      "time": "Dec 13, 2020 at 12:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "paramikoooo",
          "text": "but how can I convert move r2,r3 to binary code ?",
          "time": null
        },
        {
          "user": "w s",
          "text": "which CPU/architecture are you working with ?",
          "time": null
        },
        {
          "user": "paramikoooo",
          "text": "ARM  arch . convert it with python",
          "time": null
        },
        {
          "user": "w s",
          "text": "I don't remember movE instruction in arm architecture (there is mov{condition}, which may be eq, for example, but not E). Did you mean mov ?",
          "time": null
        }
      ]
    },
    {
      "content": "You can use find_text in the ida_search module if you want to do a textual search. It's probably better to use a more intelligent search method, though. What I personally would do would be to use ida_ua::decode_insn to produce an insn_t object, compare its itype member against the platform-specific constant for the move instruction, and then inspect the register numbers to make sure they match what I want. Something like this:\n\n```\n# Decode instruction at ea\nins = ida_ua.insn_t()\nif ida_ua.decode_insn(ins,ea) == 0:\n    print(\"%#x: could not disassemble?\" % ea)\n    return False\n\n# Check to see if it's the \"movl\" instruction\nif ins.itype != ida_allins.ARM_movl:\n    return False\n\n# Is the first operand a register, internal register number 2?\nif ins.op[0].type != ida_ua.o_reg:\n    return False\n# Or whatever the register number for r2 is, might not be 2\nif ins.op[0].reg != 2:\n    return False\n\n# Is the first operand a register, internal register number 3?\nif ins.op[1].type != ida_ua.o_reg:\n    return False\n# Or whatever the register number for r3 is, might not be 3\nif ins.op[1].reg != 3:\n    return False\n\nprint(\"%#x: found movl r2, r3\" % ea)\n\n```\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Jan 13, 2021 at 17:22",
      "is_accepted": false,
      "comments": []
    }
  ]
}