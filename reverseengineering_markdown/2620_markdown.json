{
  "title": "Understanding assembly loop",
  "link": "https://reverseengineering.stackexchange.com/questions/2620/understanding-assembly-loop",
  "content": "I am having trouble understanding how this code knows when to stop looping. I am supposed to figure out what values are put into %edi. But I can't figure out how many times it loops.\n\n```\n0x40106e      movl   $0x2b,0xffffffdc(%ebp)\n0x401075      movl   $0x31,0xffffffe4(%ebp)\n0x40107c      movl   $0x74,0xffffffec(%ebp)\n0x401083      movl   $0x19,0xffffffe8(%ebp)\n0x40108a      movl   $0x7,0xffffffd8(%ebp)\n0x401091      movl   $0x14,0xffffffe0(%ebp)\n0x401098      mov    $0xdead,%edi\n0x40109d      mov    $0x2,%ecx\n0x4010a2      mov    %ecx,%esi\n0x4010a4      mov    $0x3,%ecx\n0x4010a9      mov    $0x2,%ebx\n0x4010ae      sub    %esi,%ebx\n0x4010b0      imul   $0xc,%ebx,%ebx\n0x4010b3      mov    $0x3,%edx\n0x4010b8      sub    %ecx,%edx\n0x4010ba      lea    0xffffffd8(%ebp),%eax\n0x4010bd      lea    (%ebx,%edx,4),%ebx\n0x4010c0      add    %ebx,%eax\n0x4010c2      mov    (%eax),%edi\n0x4010c4      loop   0x4010a9\n0x4010c6      mov    %esi,%ecx\n0x4010c8      loop   0x4010a2\n0x4010ca      mov    $0xbeef,%edi\n\n```\nEdit: I now understand the looping logic. However I am having a hard time following all the values getting moved around. I am stuck here lea    0xffffffd8(%ebp),%eax \nHow do I know what %ebp is?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly"
  ],
  "user": "duder",
  "time": "Aug 11, 2013 at 21:22",
  "comments": [
    {
      "user": "user15298",
      "text": "I suggest you write new question regarding yr edit",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "\"lea 0xffffffd8(%ebp),%eax\" -> eax=ebp+0xffffffd8, or \"eax=ebp-0x28\".  ebp will have been set earlier in the function.  It often looks like \"mov %esp,%ebp / sub $<stack reserve>,%esp\", so ebp points to the return address for the caller, and below ebp is space for local variables.  It's physical value can be determined only by a debugger at runtime.  It's relative value can be determined by looking earlier in the disassembly.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "there are 2 loops in the code:\n\nIn addition here is information about LOOP opcode  \n\nThis mean that %eax got the address from calculating  %ebp+0xffffffd8  \n\nThis one is where %ebx = %ebx + %edx * 4\n\nHere %ebx is added to %eax\n\nFinally %edi gets the data that %eax points to.\n\nA small asm reference. \n\n",
      "votes": "3",
      "user": "PhoeniX",
      "time": "Aug 11, 2013 at 21:22",
      "is_accepted": true,
      "comments": [
        {
          "user": "duder",
          "text": "Thanks that is a good start for me! But I am now having trouble figuring out what values are put into %edi. Can you explain what happens here: lea    0xffffffd8(%ebp),%eax",
          "time": null
        }
      ]
    }
  ]
}