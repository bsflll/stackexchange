{
  "title": "Why code subtracts 60 from esp when the length of the variable is 64",
  "link": "https://reverseengineering.stackexchange.com/questions/19005/why-code-subtracts-60-from-esp-when-the-length-of-the-variable-is-64",
  "content": "I was following a tutorial that introduced stack overflows. Here is the c Code.\n\n```\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdio.h>\n\nint main(int argc, char **argv)\n{\n  volatile int modified;\n  char buffer[64];\n\n  modified = 0;\n  gets(buffer);\n\n  if(modified != 0) {\n      printf(\"you have changed the 'modified' variable  \n\");\n  } else {\n      printf(\"Try again?  \n\");\n  }\n}\n\n```\nand heres the disassembled main function\n\n```\n0x080483f4 <main+0>:    push   ebp\n0x080483f5 <main+1>:    mov    ebp,esp\n0x080483f7 <main+3>:    and    esp,0xfffffff0\n0x080483fa <main+6>:    sub    esp,0x60\n0x080483fd <main+9>:    mov    DWORD PTR [esp+0x5c],0x0\n0x08048405 <main+17>:   lea    eax,[esp+0x1c]\n0x08048409 <main+21>:   mov    DWORD PTR [esp],eax\n0x0804840c <main+24>:   call   0x804830c <gets@plt>\n0x08048411 <main+29>:   mov    eax,DWORD PTR [esp+0x5c]\n0x08048415 <main+33>:   test   eax,eax\n0x08048417 <main+35>:   je     0x8048427 <main+51>\n0x08048419 <main+37>:   mov    DWORD PTR [esp],0x8048500\n0x08048420 <main+44>:   call   0x804832c <puts@plt>\n0x08048425 <main+49>:   jmp    0x8048433 <main+63>\n0x08048427 <main+51>:   mov    DWORD PTR [esp],0x8048529\n0x0804842e <main+58>:   call   0x804832c <puts@plt>\n0x08048433 <main+63>:   leave\n0x08048434 <main+64>:   ret\n\n```\nI understand that when it says sub esp,60 it's making a stack frame for the Main function. So why does it initialize the modified variable(mov  DWORD PTR [esp+0x5c],0x0) at 5c in the stack frame and not at the bottom? Also, why does it only make room for 60 items(sub esp,60) when it knows there will be set length of 64?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "420",
  "tags": [
    "stack",
    "buffer-overflow"
  ],
  "user": "sajdnv",
  "time": "Aug 7, 2018 at 13:25",
  "comments": [],
  "answers_data": [
    {
      "content": "Because it's 0x60 i.e. 96 in decimal. So it actually allocates 64 bytes for the buffer, then 4 bytes for modified. And the rest is 0x1ะก, which compiler added as a spare in the debug build.\n\n",
      "votes": "1",
      "user": "Anton Kukoba",
      "time": "Aug 7, 2018 at 14:45",
      "is_accepted": true,
      "comments": []
    }
  ]
}