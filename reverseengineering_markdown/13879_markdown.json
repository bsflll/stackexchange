{
  "title": "Trying to decompile hex firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/13879/trying-to-decompile-hex-firmware",
  "content": "I managed to get the firmware for my IoT device but the firmware is in HEX. What is the best way to convert it to a binary so I can use binwalk?\nSo far I've tried converting it with srec_cat hex.file -Intel -Output binary.file -Binary. I have tried to analyze the converted file with binwalk but the only results I get are:\n\n```\nSHA256 hash constants, little endian\nCertificate in DER format (x509 v3), header length: 4, sequence length: 678\n\n```\nAm I doing something wrong?\n\nEdit: after using binwalk -Ive binary.file I managed to extract some files. The files are not detected correctly but when I look at the files I see bits of text used on my device.\n\nEdit 2: I don't think the firmware is compressed. But I'm not sure if it's encrypted. What's the best way to check this?\n\n```\n$ file binary.file\nbinary.file: data\n\n```\nUsing strings -n 10 binary.file I get a seemingly valid list of strings.\n\n",
  "votes": "7",
  "answers": 2,
  "views": "9k",
  "tags": [
    "disassembly",
    "firmware"
  ],
  "user": "Driale",
  "time": "Nov 8, 2016 at 12:25",
  "comments": [
    {
      "user": "Vladislav Ivanov",
      "text": "Are you sure the firmware is not compressed/encrypted?",
      "time": null
    },
    {
      "user": "julian",
      "text": "Can you provide either the binary or a hexdump of the first few hundred bytes of the binary, plus some of the human-readable strings returned by strings? Information about the device itself, such as device name, manufacturer, processor, etc would also be helpful",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Converting your hex file to binary\n\nUse xxd -p -r. For example:\n\n```\necho -n \"deadbeef\" | xxd -p -r | od -tx1\n\n```\nSo, in your case, xxd -p -r hex.file > binary.file should do the trick.\n\nEncrypted or not\n\nIf you see unencrypted strings with messages typical to your device, your firmware is (most probably) not encrypted because it is unlikely only parts would encrypted and others not.\n\nIf the unencrypted strings are typical strings from glibc or other libraries, then, it is uncertain.\n\nThe fact your firmware includes a certificate does not mean it is encrypted. The certificate can be used to secure communications between the IoT and a remote server for instance.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Aug 11, 2017 at 16:37",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As first step you should check the datasheet in order to get the endianness and the loading address. Then you can try to load your firmware with your favorite disassembler, for example with radare2 yuo can use  a syntax similar to this\n\n```\nr2 -a your_arch -b bytes_num -m loading_address\n\n```\nLook at this for more details.\n\nWith IDA you should set the processor type/options and after the RAM and ROM addresses that you can get from the datasheet.\n\nLook at this example.\n\n",
      "votes": "1",
      "user": "invictus85",
      "time": "Jan 8, 2018 at 21:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "Anton Kukoba",
          "text": "If it's HEX file it already contains the ROM addresses.",
          "time": null
        }
      ]
    }
  ]
}