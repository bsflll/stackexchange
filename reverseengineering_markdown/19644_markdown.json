{
  "title": "new process id generated during gdb debug",
  "link": "https://reverseengineering.stackexchange.com/questions/19644/new-process-id-generated-during-gdb-debug",
  "content": "I debug a ELF32 executable in Ubntu 14, I set gdb breakpoint in main, after i click run, the program generate a new process 13050 and exited, I can't use info register to display value and continue debugging.\n\nhow to deal with such situation, thanks\n\nThanks for the reply, let me give more details, program abc is  ELF32 file, it is currently running as process 10220, when i use gdb abc, break main, run, it kills itself ( process 10220) and generate a new process 13050, and this new pid is with another file name xyz.  when i display info register or disassembly, whenever i set set follow-fork-mode  to parent or child, it says program not exist in gdb. any advice? \n\nin short, abc becomes xyz and abc is deleted by program, any solution?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "760",
  "tags": [
    "gdb"
  ],
  "user": "Jolin Wong",
  "time": "Oct 18, 2018 at 1:22",
  "comments": [
    {
      "user": "user22970",
      "text": "Can you supply the executable? i'd like to try it locally and see the errors that pop",
      "time": null
    },
    {
      "user": "Jolin Wong",
      "text": "how to supply attachment? in this forum, we can only enter plain text, no photo and attachment",
      "time": null
    },
    {
      "user": "user22970",
      "text": "just upload it to a file sharing site and put the link in the question. something like filedropper.com",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The common way to create a new process in linux (and the only one i know of) is using fork and exec.\nWhen you fork the process, you create a copy of the current process with a new pid, which is passed to the parent (fork caller) - that's how you know how the parent and who the child process are.\n\nTo debug child process you can follow the fork.\nNote that you can choose to keep either the parent or the child suspended while under the control of gdb but you can only debug one of them with the same instance of gdb.\n\nThe usage of it will be (as seen on the link):\n\n```\nset follow-fork-mode [parent/child]\n\n```\nparent = default; you will keep debugging the parent\nchild = you will start debugging the child\n\n```\nset detach-on-fork [on/off]\n\n```\non = detach the process you don't debug\noff = keep the non-debugee process suspended under the control of the same instance of gdb\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "There should be a small window between the new process start and the first break point  hit. So the trick is to collect the new pid with a shell script, feed that pid to a gdb command file and then rapidly repeat the command file during the window.\n\nFor example, you can use pidof to get the pid of your program:\n\n```\necho \"attach $(pidof <program>)\" > attach_pid\n\n```\nNote that the pidof would pick up a defunct'ed process if there is one.\n\nUnder the Unix shell, create an executable file containing the above Unix command. Name it attach.sh.\n\nNext, defined a gdb user defined command:\n\n```\ndefine a\nshell . ./attach.sh\nsource attach_pid\nend\n\n```\nDefine a long command name will just slow you down.\n\nWhen everything is ready, trigger the program, and quickly during the window for re-attach, just hit a and press Enter down until gdb attaches to the process.  Note that a return will repeat the previous command and hold on the Enter key will soon generate a rapidly repeated key stroke.  Also note that when the new pid is not created yet, the attach_pid just contains \"attach \" and gives error messages.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Mar 13, 2020 at 12:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "Remin Lin",
          "text": "Correction. The pid collection script should be \"echo \"attach $(pidof  program_name)\" > attach_pid",
          "time": null
        }
      ]
    }
  ]
}