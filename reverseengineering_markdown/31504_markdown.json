{
  "title": "Is it possible to tap into IDAPython from within a (C) plugin? ... or at least use that Python instance?",
  "link": "https://reverseengineering.stackexchange.com/questions/31504/is-it-possible-to-tap-into-idapython-from-within-a-c-plugin-or-at-least-u",
  "content": "I'm wondering whether it is possible to write a plugin for IDA and/or Hex-Rays which would  use Python callbacks to perform certain tasks.\n\nIn particular I am wondering if there is an official way to reuse the loaded Python version and IDAPython in light of the Python GIL (global interpreter lock), because obviously attempting anything like that outside of the trodden path could easily to hard-to-debug deadlock situations.\n\nSo the question is: how would I go about to write a C/C++-based plugin for IDA, which is able to (re)use the Python interpreter used by IDA for IDAPython -- and if possible even tap into IDAPython?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "100",
  "tags": [
    "ida-plugin",
    "idapro-sdk"
  ],
  "user": "0xC0000022L",
  "time": "Feb 2, 2023 at 20:37",
  "comments": [],
  "answers_data": [
    {
      "content": "You can register IDC functions from IDAPython plugins. See the %IDADIR%\\python\\examples\\core\\extend_idc.py for the following snippet:\n\n```\nfrom __future__ import print_function\n\nimport ida_expr\n\nif ida_expr.add_idc_func(\n        \"pow\",\n        lambda n, e: n ** e,\n        (ida_expr.VT_LONG, ida_expr.VT_LONG)):\n    print(\"The pow() function is now available in IDC\")\nelse:\n    print(\"Failed to register pow() IDC function\")\n\n```\nNext, your C/C++ plugin code can invoke IDC functions. See %IDASDK%\\plugins\\ex_debidc\\ex_debidc.cpp for an example of how to use expr.hpp::exec_idc_script, whose prototype is as follows:\n\n```\n/// Compile and execute IDC function(s) from file.\n/// \\param result       ptr to idc_value_t to hold result of the function.\n///                     If execution fails, this variable will contain\n///                     the exception information.\n///                     You may pass nullptr if you are not interested in the returned\n///                     value.\n/// \\param path         text file containing text of IDC functions\n/// \\param func         function name to execute\n/// \\param args         array of parameters\n/// \\param argsnum      number of parameters to pass to 'fname'\n///                     This number should be equal to number of parameters\n///                     the function expects.\n/// \\param[out] errbuf  buffer for the error message\n/// \\retval true   ok\n/// \\retval false  error, see errbuf\n\nTHREAD_SAFE inline bool exec_idc_script(\n        idc_value_t *result,\n        const char *path,\n        const char *func,\n        const idc_value_t args[],\n        size_t argsnum,\n        qstring *errbuf=nullptr)\n\n```\n",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "Feb 4, 2023 at 6:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Oh, so do I understand you correctly, that your suggestion is to use IDC as a sort of mediator between the C/C++ plugin and IDAPython? Thanks, this sounds like it could be doable. Not quite what I had in mind, but it may get me closer.",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "Yes, your description is accurate. What I suggested above was to expose IDAPython functionality through IDC and then call it from C++. There's a variety of ways to think about and approach your question; this is just one of them. I have a feeling that expr.hpp probably holds a more direct solution to your problem; you can probably run an IDAPython script directly somehow, but I couldn't tell you exactly how.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Well, thanks for your insights. This was exactly what I was looking for at this point.",
          "time": null
        }
      ]
    }
  ]
}