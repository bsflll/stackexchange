{
  "title": "Whats going on in this Class Constructor?",
  "link": "https://reverseengineering.stackexchange.com/questions/12609/whats-going-on-in-this-class-constructor",
  "content": "meanwhile, I am learning more and more how to reverse engineer. Ive figured out tons of stuff already, but I came to the point, where I just need some little explanation whats going on in the constructor of a specific class.\n\nI know, that this specific class (Class A) inherits 3 other Classes (lets say: class B, class C, class D).\nClass A calls the constructors of B,C,D. Everything up to here is clear for me. \n\nBut:\n\nClass D has a method \"addListener\" which points to an attribute (this + 0x34).\n\n(this + 0x34) is assigned in the constructor to a address..\n\n```\nint A::A(void *someObject) {\n    B::B();\n    C::C();\n\n    *this = 0x1f18e8;\n    *(this + 0x28) = 0x1f190c;         // whats going here?\n    *(this + 0x34) = 0x1f193c;         // and here?\n\n    // Ive seen, that those addressees are inside of the vtable of Class A\n    // \n    //     __ZTV12A:        // vtable for A\n    // ...\n    // 001f18e8         db  0xc6\n    // 001f193c         db  0xb0\n    // 001f190c         db  0xba\n    // ...\n\n    D::D();\n\n    // Some other attributes, but these are clear for me (just \n    // have to name them right, by figuring out where these attributes are used):\n\n    *(this + 0x38) = someObject;\n    *(this + 0x3c) = 0x0;\n    *(this + 0x50) = 0x0;\n    *(this + 0x54) = 0x0;\n    *(this + 0x40) = 0xffffffff;\n    *(this + 0x44) = 0xffffffff;\n    *(this + 0x48) = 0xffffffff;\n    *(this + 0x4c) = 0x0;\n\n    D::addListener(this + 0x34);\n}\n\n```\nAm I right with my conclusion, that D::addListener() adds the class it self to the listener?\n\nIn fact I just want to figure out what kind of object is added to the \"listener\":\n\n```\n    D::addListener(this + 0x34);\n\n```\nI hope my question is clear enough :)\n\n",
  "votes": "0",
  "answers": 1,
  "views": "302",
  "tags": [
    "disassembly",
    "x86",
    "c++",
    "address",
    "pointer"
  ],
  "user": "Vertices",
  "time": "May 9, 2016 at 5:51",
  "comments": [
    {
      "user": "w s",
      "text": "Is is the whole constructor ? If not, can you post it ?",
      "time": null
    },
    {
      "user": "w s",
      "text": "This may be an artifact of multiple inheritance. I found an article which may be useful for understanding this phpcompiler.org/articles/virtualinheritance.html",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Your question is a bit unclear as you first say \"Class C has a method \"addListerner\" which points to an attribute (this + 0x34).\", then D::addListener(this + 0x34);. Typo?\n\nAlso, you should read about (typical) implementations of multiple inheritance. Assume your classes B, C, D have methods b, c, d respectively. A will inherit all of them. Now, if A does not override these methods, and anything calls them, they have to be delegated to the correct superclass - the original methods. But these original methods will expect a class layout that corresponds to the original classes. Which means, A needs to \"embed\" all 3 classes into itself.\n\nWhich means A will be laid out like this:\n\n```\n+-----+-------------------+\n|  00 | vtable of A       |\n+-----+-------------------+\n|  04 | member 1 of A     |\n|  08 | member 2 of A     |\n|     | ...               |\n+-----+-------------------+\n|  28 | vtable of B       |\n+-----+-------------------+\n|  2c | member 1 of B     |\n|  30 | member 2 of B     |\n|     | ...               |\n+-----+-------------------+\n|  34 | vtable of C       |\n+-----+-------------------+\n|  38 | member 1 of C     |\n|  3c | member 2 of C     |\n|     | ...               |\n+-----+-------------------+\n|  ?? | vtable of D       |\n+-----+-------------------+\n|  ?? | member 1 of D     |\n|  ?? | member 2 of D     |\n|     | ...               |\n+-----+-------------------+\n\n```\nSo, yes, your conclusion is correct: D::addListener() adds the class itself to the listener. But because D::addListener() expects a D, not an A, the thing that's passed isn't the complete A, it's just the part of A that makes D. To make this look exactly like a D, it needs its own vtable that looks like a D vtable.\n\nBut of course, parts of these vtables can be shared. A needs all methods in its vtable, so the vtable pointers of the partial classes B, C and D can point to the appropriate part of the As vtable, they don't need their complete own copies.\n\nAs to your \"what's going on here\" questions - these initialize the vtables of the partial classes. (In your assembly listing, you should treat those addresses as arrays of words, not bytes). What i wonder is why there's only 3 of them, there should be 4 for A, B, C and D. Something seems to be confused or omitted here, just like you said \"Class C has\" first, then used D::addListener.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "May 9, 2016 at 5:53",
      "is_accepted": true,
      "comments": [
        {
          "user": "Vertices",
          "text": "Ive edited my post, of course it should be D::addListener() instead of C::addListener()",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "Something's still wrong as there should be 4 vtables, not 3. Unless one of your classes is really a struct, not a class, that has no methods, not even a constructor. So maybe the offsets, or class names, in my example do not match yours, but the principle still applies.",
          "time": null
        },
        {
          "user": "Vertices",
          "text": "What makes me so confused is, I see that addListener accepts an argument of type *Listener... But I can´t see any of the classes inherits *Listener... I am asking where it comes from.  D::addListener(*Listener);  I am expecting that A inherits *Listener.... But Ive checked the *Listener class, which don´t have a constructor, only a destructor.",
          "time": null
        },
        {
          "user": "Vertices",
          "text": "I see, B, C, D has constructors.       *(arg_0 + 0x34) = 0x1f193c;  seems to be an object of type *Listener, which don´t have a constructor. Makes the things more confusing for me.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "A doesn't have to (explicitly) inherit from Listener if A inherits from D, and D inherits from Listener. And of course, D may have a constructor even if Listener doesn't. And this would explain why the D part of A is the argument, not A itself.",
          "time": null
        }
      ]
    }
  ]
}