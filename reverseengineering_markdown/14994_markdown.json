{
  "title": "Why to dump precisely at OEP while manual unpacking?",
  "link": "https://reverseengineering.stackexchange.com/questions/14994/why-to-dump-precisely-at-oep-while-manual-unpacking",
  "content": "What is the exact reason for dumping a process when the Program Counter is at OEP? I haven't found a decent answer.\n\nThis Link says: \n\nThis leaves me with the following questions:\n\n",
  "votes": "5",
  "answers": 2,
  "views": "3k",
  "tags": [
    "unpacking",
    "dumping",
    "import-reconstruction",
    "oep"
  ],
  "user": "greenpiece",
  "time": "Mar 23, 2017 at 13:56",
  "comments": [],
  "answers_data": [
    {
      "content": "OEP does not relate to the IAT, but is used by import reconstruction tools to find the location of IAT-like structures created by the packer.\n\nThis is exactly why import reconstruction is needed. Because the malware intentionally ruins the IAT in some way or another, only keeping a small set of mandatory functions in it, leaving the work of resolving most of the APIs as part of the unpacking code. Therefore import reconstruction will require we find the IAT by other means (because the PE defined IAT is incomplete/fake).\n\nWhen dumping, it is import to have executed all code related to descrambling the packed code. Otherwise, OEP might not be valid executable code. Other than that (and import reconstruction related issues) it is perfectly fine to dump and just adjust the PE's Entry Point to the OEP. Most dumping tools will allow that.\n\nAside from answering your specific questions, here are the types of packers with regard to their IAT manipulation and what's needed to get a functional IAT in a dumped PE:\n\n",
      "votes": "6",
      "user": "NirIzr",
      "time": "Mar 23, 2017 at 14:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nordwald",
          "text": "Following up on this, methods 3 and 4 are pretty common. The most advanced technqiues don't use any API functions, but try to find the libraries in memory to parse their export table. Typically a hash function is used to obfuscate the names it is looking for",
          "time": null
        },
        {
          "user": "greenpiece",
          "text": "@NirIzr Wow, thanks a lot! You've really sorted things out (in addition to Nordwald's excellent answer).",
          "time": null
        }
      ]
    },
    {
      "content": "I think there is something mixed up here.\n\nIt does not (for benign software). However, the article you linked analyzes a packed executable. Often, malware tries to hide its imports my not using the official IAT, but by creating their own at runtime. The Tools should help you to reconstruction somewhat of a 'normal' IAT.\n\nWhy should the unpacked payload have its own PE header? I've seen a lot of malware and this is very seldomly the case.\n\nTo make sure you got the normal payload. Often analysts try to recrate a PE file for it (by reconstructing the IAT, establishing a header, ..) to make analysis more comfy.\n\nIn this article, they try to 'fix' the binary\n\n",
      "votes": "4",
      "user": "Nordwald",
      "time": "Mar 23, 2017 at 13:22",
      "is_accepted": false,
      "comments": [
        {
          "user": "greenpiece",
          "text": "Thank you! Your answer clarifies a lot of things. I missed the fact that IAT of the packed executable is different from the original IAT of the unpacked application. And that code may be modified right after its first instruction in general case (if I got your idea right). It's a pity I can accept only one answer.",
          "time": null
        }
      ]
    }
  ]
}