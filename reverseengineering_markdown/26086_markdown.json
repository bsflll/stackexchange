{
  "title": "Decode bitmaps from Director .dxr files",
  "link": "https://reverseengineering.stackexchange.com/questions/26086/decode-bitmaps-from-director-dxr-files",
  "content": "I'm trying to extract bitmaps from an old Macromedia Director protected .dxr file. I was able to find some information about the file structure from here (it turns out to be a XFIR container, the little endian variant of RIFX), which allowed me to find the specific chunk (called BITD chunk) in which the bitmap is stored, there is also an ALFA chunck which stores (I guess the transpareny of each bitmap pixel). The bitmap is supposed to be losslessly compressed with RLE and to only store raw color data (no size, bit depth, pallette,...)\n\nI have generated a few simple bitmaps with the ancient macromedia and this is what I found out:\n\nThe string \"d6ff d6cc d666 d666\" is repeated 20 times.\n\nThe string \"edff edcc ed66 ed66\" is repeated 20 times.\n\nThe string \"ff00 ffff\" is repated 5 times followed by the string \"ff00 0000\" repeated 5 times.\n\nThe string \"0000 0000\" is repeated 9 times, followed by \"ff00 0000\" one last times.\n\nThe string \"f800 01ff fff6 66f6 99f6 9900\" is displayed just once.\n\nFor here on, I'm unable to recognize any pattern. Any of you recognize this particular format as a part of an standard one that can be opened with some usual program? Any general advise or hint?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "510",
  "tags": [
    "file-format",
    "encodings"
  ],
  "user": "√Ålvaro G. Tenorio",
  "time": "Oct 8, 2020 at 11:54",
  "comments": [
    {
      "user": "Ian Cook",
      "text": "It might help if you could show the contents of the relevant owning cast chunk as these contain data on the format of the owned BITD chunk.",
      "time": null
    },
    {
      "user": "Spektre",
      "text": "you should share some images ... both preview and dxr ... maybe even along with your decoding code ...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The encoding is a run-length encoding. There is decoding code written in the Shockky project\n\n",
      "votes": "0",
      "user": "Nothing to see here",
      "time": "Mar 26, 2024 at 19:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}