{
  "title": "How to debug a crash in wow64.dll in 32bit process",
  "link": "https://reverseengineering.stackexchange.com/questions/19109/how-to-debug-a-crash-in-wow64-dll-in-32bit-process",
  "content": "I have a 32bit application and a few wrapper tools that I use one after another to inject code, hook system dll functions (using the patch-first-bytes-of-the-function-with-jump approach). Also I have a tool that injects code into the application process and starts new thread. \nMy problem is that sometimes I'm getting an exception. The application is 32bit so I'm using 32bit debugger. From what I can see the exception comes from memory region that is supposed to be wow64.dll. Wow64.dll has some 64bit code. Due to this I have problems debugging the reason for this exception. My questions are:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "458",
  "tags": [
    "debugging",
    "x86",
    "x86-64",
    "exception"
  ],
  "user": "Marcin K.",
  "time": "Aug 20, 2018 at 15:39",
  "comments": [],
  "answers_data": [
    {
      "content": "Your problem is so strange.\nAs I knew, 64bit exe loads only 64bit dlls and 32bit exe loads only 32bit dlls.\nI don't know well about wow64.dll, but if your exe is for 32bit, os will automatically lead your exe to load 32 bit dll.\nTherefore, system drive includes system32 and syswow64 directories under the Windows directory.\n\nAnd furthermore, 32bit dll can't contain 64bit assembly code.\nIf it still needs, 32bit executables can contain 64bit assembly code as data.\n\nI hope my answer helps you to understand your problem.\n\n",
      "votes": "-1",
      "user": "Luis Bergmann",
      "time": "Aug 20, 2018 at 16:45",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "wow64 is a special beast and does contain both 32-bit and 64-bit code in a single DLL.",
          "time": null
        }
      ]
    }
  ]
}