{
  "title": "Trouble analyzing a ransomware",
  "link": "https://reverseengineering.stackexchange.com/questions/3770/trouble-analyzing-a-ransomware",
  "content": "I got this fake-av sample , and I want to reverse it . But the problem is that it exits after few commands . Here are the steps :\n\nWhen loaded in Ollydbg it pauses at:\n\n```\n00401000 > $  8D9404 7713210>LEA EDX,DWORD PTR SS:[ESP+EAX+0x211377]\n00401007   . /E9 CF020000    JMP setup.004012DB \n\n```\nthen : \n\n```\n004012DB   > \\BA 0C000000    MOV EDX,0xC\n004012E0   .  8B4C24 1C      MOV ECX,DWORD PTR SS:[ESP+0x1C]\n004012E4   .  41             INC ECX\n004012E5   .  09C9           OR ECX,ECX\n004012E7   .  75 0C          JNZ SHORT setup.004012F5\n004012E9   .  0F2ECF         UCOMISS XMM1,XMM7\n004012EC   .  74 13          JE SHORT setup.00401301\n\n```\nand :\n\n```\n00401301   >  89E5           MOV EBP,ESP\n00401303   .  C3             RETN\n\n```\nthen it exits :\n\n```\n7C81776F    50               PUSH EAX\n7C817770    E8 8349FFFF      CALL kernel32.ExitThread\n\n```\nWhat exactly happens here , I guess it has to do with the line UCOMISS XMM1,XMM7 but I have no clue what it does ?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "451",
  "tags": [
    "disassembly",
    "malware",
    "binary-analysis"
  ],
  "user": "MicroGame",
  "time": "Mar 2, 2014 at 12:10",
  "comments": [
    {
      "user": "DCoder",
      "text": "According to the Intel assembly manual, that instruction is UCOMISS -- Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS. A better question would be what values are in XMM registers at that point and why.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "the jnz at 4012e7' should be taken  if 401000 is PeHeader->EntryPoint\n\nyour post indicates that it has not been taken invesitage who messed up with SEH CHAIN\n\nesp+1c normally holds EndOfSehChain (0xffffffff)  when broken on EntryPoint see SehProlog() in Kernel32!BaseProcessStart() \n\n```\ncdb -c \"bp calc+@@c++(( (ntdll!_IMAGE_NT_HEADERS *)  @@masm(calc+by(calc+3c)))->OptionalHeader.AddressOfEntryPoint);g;!exchain;dd @esp+1c l2;q\" calc\n\n```\noutput\n\n```\nBreakpoint 0 hit\n0007ffe0: kernel32!_except_handler3+0 (7c839ad8)\n  CRT scope  0, filter: kernel32!BaseProcessStart+29 (7c8438ea)\n                func:   kernel32!BaseProcessStart+3a (7c843900)\nInvalid exception stack at ffffffff\n0007ffe0  ffffffff 7c839ad8\nquit:\n\n```\ndebugger does not mess with this value\n\nsample code to check (esp+1c) at EP\n\n```\nucomisstest>type ucomisstest.cpp\n#include <stdio.h>\nchar strin[] = { \"hello baby  \n\" };\nchar strun[] = { \"hello babie  \n\" };\nchar stron[] = { \"hello barbie  \n\" };\nint main (void)    {\n    __asm {    mov ecx, dword ptr ds:[esp+1ch]\n               inc ecx    or ecx,ecx\n            jnz noseh\n            ucomiss xmm1,xmm7\n            je exit\n            lea eax, strun\n            push eax\n            call printf\n            pop eax\nexit:\n        lea eax, strin\n            push eax\n            call printf\n            pop eax\nnoseh:\n        lea eax, stron\n            push eax\n            call printf\n            pop eax\n    } return 0;    }    \n\\ucomisstest>cl /nologo ucomisstest.cpp\nucomisstest.cpp    \n\\ucomisstest>ucomisstest.exe\nhello barbie \n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Mar 4, 2014 at 19:56",
      "is_accepted": false,
      "comments": []
    }
  ]
}