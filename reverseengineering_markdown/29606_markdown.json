{
  "title": "Debug shared library in Android application",
  "link": "https://reverseengineering.stackexchange.com/questions/29606/debug-shared-library-in-android-application",
  "content": "There is an Android application that has a shared library (.so) file in split_config.arm64_v8a.apk that I want to debug .\n\nWhen I look at /proc/PID/maps I don't see that library (I do see the split_config.arm64_v8a.apk file), but I'm sure the library is loaded because I see logs that only that library prints. Additionally, the application calls System.loadLibrary(\"libMyLib.so\"); to load that library.\n\nHow can I debug this shared library?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "3k",
  "tags": [
    "debugging",
    "android",
    "gdb",
    "frida"
  ],
  "user": "Polo123",
  "time": "Nov 30, 2021 at 8:18",
  "comments": [
    {
      "user": "Robert",
      "text": "From what I remember .so files are (unless explicitly stated in AndroidManifest.xml)  extracted upon installation. I would assume that this is still valid even for apps that comprise of multiple APK files (split APK). So you should better search for libMyLib.so in file-system and when loaded in list of loaded modules. On a rooted device my recommendation would be to use frida.re",
      "time": null
    },
    {
      "user": "Polo123",
      "text": "@Robert 1) There are 2 AndroidManifest.xml in base in in split_config.arm64_v8a , what should I search there ? 2) The app is installed on a rooted device 3) I use Frida and hook dlopen  from libc to print the library that load with dlopen to application , and I didn't see this lib that lodded",
      "time": null
    },
    {
      "user": "Robert",
      "text": "If you see an attribute like extractNativeLibs=\"false\" in the <application tag, the native libraries are directly loaded from within the APK (need to be stored without compression in the APK).",
      "time": null
    },
    {
      "user": "Polo123",
      "text": "@Robert Yes , I see android:extractNativeLibs=\"false\"",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Then you got your answer. You see split_config.arm64_v8a.apk which is the library loaded without unpacking.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What you see is possible if the APK files uses the mode extractNativeLibs=\"false\". If that attribute is set in the <application tag in AndroidManifest.xml then Android loads the .so files directly from within the APK file without extracting them first.\n\nThis works because the .so files are stored without compression and aligned to 4KiB page boundary so that they can be directly mapped into memory via mmap (see also zipalign comments on that topic https://developer.android.com/studio/command-line/zipalign).\n\n",
      "votes": "1",
      "user": "Robert",
      "time": "Nov 24, 2021 at 17:08",
      "is_accepted": true,
      "comments": [
        {
          "user": "Polo123",
          "text": "So how can I debug this so please?",
          "time": null
        },
        {
          "user": "Robert",
          "text": "@Polo123 As evrey Andorid app that uses native libraries you can not debug it using Android Studio if you don't have the source code. You can attach gdb to it or much easier use frida.re to hook Java and/or native methods or trace executions (frida-trace).",
          "time": null
        },
        {
          "user": "Polo123",
          "text": "I have tried frida-trace -D XXXXXXX -f com.MyApp -a \"libMyLib.so\" and I got an error  unable to find module 'libMyLib.so'",
          "time": null
        },
        {
          "user": "Robert",
          "text": "@Polo123 Use Frida to list all loaded modules, e.g. as shown here: github.com/poxyran/misc/blob/master/â€¦ For the rest check the extensive Frida API: frida.re/docs/javascript-api There are also a lot tutorials online about Android and native libraries.",
          "time": null
        },
        {
          "user": "Polo123",
          "text": "Thank you about your help , I run Process.enumerateModules({onMatch: function(module){\tif(module.name==\"libMyLib.so\")\t\t\t\t{console.log('Module name: ' + module.name + \" - \" + \"Base Address: \" + module.base.toString());}\t\t\t}, \t\t\tonComplete: function(){}\t\t});  and find out that this lib was loaded after I press some click into the application , and it load to split_config.arm64_v8a.apk memory (in /proc/PID/maps)",
          "time": null
        }
      ]
    }
  ]
}