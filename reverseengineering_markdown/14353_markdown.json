{
  "title": "IDAPython can't ignore library functions",
  "link": "https://reverseengineering.stackexchange.com/questions/14353/idapython-cant-ignore-library-functions",
  "content": "I wrote a simple IDAPython script that only prints out local functions and ignores library functions. But somehow, it prints every single function. Here is the script: \n\n```\nimport idc, idautils\nfor func in idautils.Functions():\n    flags = idc.GetFunctionFlags(func)\n    # Ignore library functons\n    if flags & FUNC_LIB:\n        continue\n    print idc.GetFunctionName(func)\n\n```\nI based my script from the second code snippet in this tutorial (http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/). \n\n",
  "votes": "2",
  "answers": 1,
  "views": "842",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "yellowbyte",
  "time": "Jan 9, 2017 at 21:16",
  "comments": [
    {
      "user": "Nordwald",
      "text": "Try checking the segment: idc.SegName(start) != 'extern'",
      "time": null
    },
    {
      "user": "yellowbyte",
      "text": "Thank you, your method works. Just to elaborate for anyone else interested. Aside from 'extern,' I also need to make sure that segment name is not \".plt,\" \".init,\" or \".fini.\" So to simplify the code, I just check if segment name equals \".text\" or not.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is a confusion of terminology.  In IDA-speak, \"library function\" means \"a function from a (compiler) standard library\", i.e. a function recognised by a FLIRT signature (usually colored in cyan). These are encountered in practice mostly in statically-linked Windows executables. On Linux and OS X the standard functions usually come from shared libraries so you will need another way to distinguish them - e.g. what what was suggested in the comments.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Jan 11, 2017 at 13:01",
      "is_accepted": true,
      "comments": []
    }
  ]
}