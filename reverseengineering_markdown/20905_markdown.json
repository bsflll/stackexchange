{
  "title": "Ghidra Control Flow Graph",
  "link": "https://reverseengineering.stackexchange.com/questions/20905/ghidra-control-flow-graph",
  "content": "Lately I'm using Ghidra and I don't find the API to get the control flow graph of a given function. Can someone help me?\n\nThank you in advance.\n\nEDIT: it is different from the other question (link) because I'm asking for the API.\n\n",
  "votes": "7",
  "answers": 1,
  "views": "11k",
  "tags": [
    "api",
    "control-flow-graph",
    "ghidra"
  ],
  "user": "Benny",
  "time": "Mar 18, 2019 at 9:46",
  "comments": [
    {
      "user": "perror",
      "text": "Possible duplicate of How to display the CFG of a function in Ghidra?",
      "time": null
    },
    {
      "user": "Benny",
      "text": "I edited. I'm asking for the API, so it is not a duplicate.",
      "time": null
    },
    {
      "user": "Nordwald",
      "text": "Hi and welcome to RE.SE! Could you be more specific on what you want to do with the flow graphs? Layout? Create your own? The api is pretty vast ghidra.re/ghidra_docs/api/index-all.html",
      "time": null
    },
    {
      "user": "Benny",
      "text": "Hi! Given a function, I need to extract its CFG so as to count its edges and nodes for computing the cyclomatic complexity and other metrics. I already browsed through Ghidra's documentation, but I didn't find what I need.",
      "time": null
    },
    {
      "user": "Benny",
      "text": "I used calculateCyclomaticComplexity​ function to compute the cyclomatic complexity, but I found no API to explicitly generate a control flow graph from which I can extract nodes and edges.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I'm looking for the same thing and for now I found the class PcodeSyntaxTree having a method called getBasicBlocks(), which returns an array of PcodeBlockBasic elements. This second class has methods like getIn and getOut which retrieve incoming and outgoing nodes (basic blocks), respectively. So I think using this methods should be the interface for interacting with the CFG programmatically. But sadly I didn't figure out yet how to get this PcodeSyntaxTree object, but will continue investigating.\n\nI hope this can help you a bit!\n\nlinks:\nhttp://ghidra.re/ghidra_docs/api/ghidra/program/model/pcode/PcodeSyntaxTree.html\nhttp://ghidra.re/ghidra_docs/api/ghidra/program/model/pcode/PcodeBlockBasic.html\n\nPS.: Other thing you can do is to study the code of calculateCyclomaticComplexity​ method, which uses this BasickBlock models, I think I will probably do that.\n\nEDIT:\ngood news I think. I found the DecompleResults class, having the method getHighFunction() which returns a HighFunction object. HighFunction class extends to PcodeSyntaxTree, so it has also the getBasicBlocks method. From that point you can go on.\n\nDecompileResults class is contained in ghidra.app.decompiler, as well as DecompInterface, which has the decompileFunction() method that returns a DecompileResults object.\n\nFrom https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompInterface.java :\n\n```\n// Make calls to the decompiler: \n// *   DecompileResults res = ifc.decompileFunction(func,0,taskmonitor);\n\n```\nlinks:\nhttps://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompInterface.java\n\nhttps://ghidra.re/ghidra_docs/api/ghidra/app/decompiler/DecompileResults.html\nhttps://ghidra.re/ghidra_docs/api/ghidra/program/model/pcode/HighFunction.html\n\nEDIT 2:\n\nI can imagine something like this (in python api):\n\n```\nimport ghidra.app.decompiler as decomp\n\ninterface = decomp.DecompInterface()\n\n# decompileFunction(function, timeout, monitor)\n# according to documentation, function is a Function object, timeout is int,\n# and monitor is an OPTIONAL ARGUMENT of TaskMonitor type. \n# However, it doesn't say anything about a default value for this argument \n# and omitting the arg in the call falls in an error.\n\nresults = interface.decompileFunction(func, 0, taskMonitor)\nhf = results.getHighFunction()\n\nbbList = hf.getBasicBlocks()\n\n# ...\n# ...\n# ...\n\n\n```\n",
      "votes": "6",
      "user": "Mauricio Sanfilippo",
      "time": "May 16, 2019 at 20:38",
      "is_accepted": true,
      "comments": [
        {
          "user": "Benny",
          "text": "Great, you helped me a lot, thank you so much!",
          "time": null
        },
        {
          "user": "Mauricio Sanfilippo",
          "text": "You're welcome! btw, I've found another useful information, check this answer in a reported issue: github.com/NationalSecurityAgency/ghidra/issues/…  I'm using that Block Model due I couldn't figure out yet how to properly create and configure an instance of the DecompInterface class",
          "time": null
        },
        {
          "user": "hEShaN",
          "text": "@MauricioSanfilippo did the code above work for you. I used TaskMonitor.DUMMY as for the third parameter and passed a Function objrct but nothing get disassembled for me. Did you find a solution?",
          "time": null
        },
        {
          "user": "Mauricio Sanfilippo",
          "text": "@hEShaN Nope, I couldn't figure out how to use the DecompInterface. But I went with the SimpleBlockModel approach, which worked fine for me and it seems to be even simpler. You can read github.com/NationalSecurityAgency/ghidra/issues/…  I created some scripts to get and traverse the graph, I can share them with you if you want. It's mostly ad-hoc but it worked, maybe you can improve them if they don't work for you as they currently are",
          "time": null
        },
        {
          "user": "hEShaN",
          "text": "thank you very much. Do u have a link to those scripts. Thanks again!",
          "time": null
        }
      ]
    }
  ]
}