{
  "title": "Can I traverse the entire WORD array of 4 elements with QWORD PTR?",
  "link": "https://reverseengineering.stackexchange.com/questions/25130/can-i-traverse-the-entire-word-array-of-4-elements-with-qword-ptr",
  "content": "I want to change values of all WORD array of 4 elements by one step using QWORD PTR\n\n```\nmov ebx, OFFSET arr ; arr is WORD of 1,2,3,4 \nxor qword ptr [ebx], 8000800080008000h ; I get error of constant value too large\n\n```\n",
  "votes": "-1",
  "answers": 1,
  "views": "127",
  "tags": [
    "assembly"
  ],
  "user": "RedHat",
  "time": "May 27, 2020 at 13:37",
  "comments": [],
  "answers_data": [
    {
      "content": "In the xor specification, that you can see here, there is no version of xor with imm64 - an immediate value of 64 bits. \n\nYou can do something like this:\n\n```\nmov rcx, 0x8000800080008000\nxor qword ptr [rbx], rcx\n\n```\nNote that the register in the xor command must be r64 type (rax, rbx, ...) and not the r32 type (eax, ebx, ...)\n\n",
      "votes": "1",
      "user": "macro_controller",
      "time": "May 27, 2020 at 8:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "RedHat",
          "text": "Thanks for your informative reply. Unfortunately, I am required to reverse a specific bit on each element with ONE instruction step. The first thing that came in my mind is to use qword ptr to address the entire array 4 elements ( 8 bytes) then using XOR which is the only instruction can reverse bit at once as I know as a basic student of Assembly.",
          "time": null
        },
        {
          "user": "RedHat",
          "text": "I believe it could be only 2 elements be changed at a time and I tried it and it worked if I use XOR DWORD PTR [EBX], 80008000h and if I need to change the other 2 elements I should adjust the address [EBX+ or- 4].",
          "time": null
        }
      ]
    }
  ]
}