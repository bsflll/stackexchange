{
  "title": "How to find V-Table in IDA? (Using class informer)",
  "link": "https://reverseengineering.stackexchange.com/questions/19125/how-to-find-v-table-in-ida-using-class-informer",
  "content": "I've been trying for a while now to get my head around V-Tables, V-Table patching, etc, i understand what V-Tables are and why they are used (At least i think i do).\n\nBut how do i find them in IDA? I'm using IDA Pro 7.0, and i created a test program with two classes.\n\n```\nclass ClassA\n{\npublic:\n    ClassA();\n    ~ClassA();\n    virtual void Test();\n};\n\n```\nAnd..\n\n```\nclass ClassB : public ClassA\n{\npublic:\n    ClassB();\n    ~ClassB();\n    void Test() override;\n};\n\n```\nThe definition for the Test function in both cases is a simple cout to the console.\n\nAnd in main.cpp\n\n```\nint main()\n{\n    ClassB* BClass = new ClassB();\n    while (1)\n    {\n        BClass->Test();\n        Sleep(1000);\n    }\n    delete BClass;\n    return 0;\n}\n\n```\nI was trying to follow this explanation, but it seems as if the data isn't structured the same way in his version of IDA.\n\nAfter clicking on the class in the Class Informer window, i'm taken to IDA View-A, and this is what i see.\n\n\n\nAt this point i'm a bit lost, as i'm not really sure how to find or follow pointers in IDA.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "7k",
  "tags": [
    "ida",
    "ida-plugin",
    "pointer",
    "vtables"
  ],
  "user": "Michael Strobel",
  "time": "Aug 22, 2018 at 2:48",
  "comments": [
    {
      "user": "Michael Strobel",
      "text": "I really need to figure out how to navigate the pointers, from class instance through the V-Table pointers, to the target function.   It's not something i was taught in programming courses, and difficult to find straight forward information.",
      "time": null
    },
    {
      "user": "Biswapriyo",
      "text": "This tutorial from @IgorSkochinsky may help: youtu.be/efkLG8-G3J0",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What you're looking it is actually a VTable. As you know, a VTable is a table of function pointers and as you can see, at address 0x19B64 you actually see a single function address (this looks like dd offset sub_XXXX). That is actually a virtual function table of a size of one. Since you only have one virtual function in your demo class. That offset points to one implementation of Test. Double-clicking the function name (which defaults to the function's address prefixed with sub_ to indicate it is a subroutine) will set the cursor it it's address (and make it visible).\n\nSomewhat below that, at address 0x19B8C, you can see the second class's vtable, as you have two classes with differing functions. That offset is the second implementation of Test\n\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Aug 22, 2018 at 21:57",
      "is_accepted": true,
      "comments": [
        {
          "user": "Michael Strobel",
          "text": "So if there is more than one virtual function in the class, i would find them here also?",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Yes. You can compile a more elaborate example and see for yourself :) You'll simply see two (or more) lines of dd offset sub_???? one following the other, at sequential addresses.",
          "time": null
        }
      ]
    }
  ]
}