{
  "title": "Addition Function Parameter Location in Assembly Stack Memory",
  "link": "https://reverseengineering.stackexchange.com/questions/18800/addition-function-parameter-location-in-assembly-stack-memory",
  "content": "So my C program looks like:\n\n```\nint main()\n{\n    int a = 5;\n    int b = 1;\n    int c = add(a, b);\n    printf(\"%d\", c);\n    return 0;\n}\n\nint add(int a, int b){\n    return a + b;\n}\n\n```\nAnd I am trying to understand the behaviour of how parameters are passed into the stack. In order to do the same, I reversed the code to disassembly:\n\n\n\n\n\nNow esp is being copied into ebp in the add function, then why add 8 and 12 to access the values 5 and 1 in the next lines - shouldn't it be [ebp] and [ebp + 4h]? I am really confused here.\n\nThanks.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "472",
  "tags": [
    "disassembly"
  ],
  "user": "Jishan",
  "time": "Jul 15, 2018 at 12:29",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "\"I am not posting it in the Reverse Engineering Stack Exchange site.\" and then you proceed doing just that :)",
      "time": null
    },
    {
      "user": "realtebo",
      "text": "Probably a stackexchange-nazi-purist closed its question... In these days every question get downvoted..",
      "time": null
    },
    {
      "user": "Jishan",
      "text": "@IgorSkochinsky Opps, I just thought I was gonna post it at SO and realized it will get way too many negative votes. The artefact remained - cleaned it now~",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "On x86, the stack is used not only for passing the arguments. It can store other things as well, for example the return address of the function or the registers which need to be saved temporarily, as well as for local variables. In your example, the push ebp adjusts esp by 4 bytes, so after esp is copied to ebp in the next instruction, the stack frame looks like this:\n\n```\n [ebp+0] old ebp value (pushed by \"push ebp\")\n [ebp+4] return address from the call (originally at [esp+0])\n [ebp+8] first argument (a)\n [ebp+C] second argument (b)\n\n```\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Jul 15, 2018 at 10:15",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jishan",
          "text": "+1 for a clear and easy to grasp answer!",
          "time": null
        }
      ]
    },
    {
      "content": "ebp is an address     likewise esp ia an address like  0x12345678  \n\nesp is not copied \n\nit is assigned so after mov ebp,esp\nboth will be same address  \n\nin high level language it would be like  ebp = esp\n\nnow since ebp is an address it can hold a value\n\nthat is  ebp can hold 0x12345678  ( ebp ,xxx is a pointer to the underlying data )\n\nso ebp = 0x12345678  a pointer points to data 0x12345678 a data variable  ( like your 5 and 1 )\n\nebp          12345678  holds 1\nebp +4     1234567c holds  x\nevp+8      12345680 holds y\n\nsince ebp and esp are same  esp+8 will also be holding y \n\nthis part is called prologue   in the function construct \nand creates a frame  in the stack \n\nthe square brackets denotes  access to the underlying data\n\nso if you want to access ebp +c     you may need \n\nmov somereg  ebp \nadd samereg   0xc\nnow this register will hold 0x12345680\n\nwhat if you want to access  y \n\nthe you need the square bracket around  ox12345680\n\nlike  get me what is dereferenced by  [0x12345680]\n\nthat is  mov somereg  [ebp + c]\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jul 15, 2018 at 5:28",
      "is_accepted": false,
      "comments": []
    }
  ]
}