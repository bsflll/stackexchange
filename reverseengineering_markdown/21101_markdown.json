{
  "title": "What's the effect of adding a REP(N(E)) prefix to a JMP instruction?",
  "link": "https://reverseengineering.stackexchange.com/questions/21101/whats-the-effect-of-adding-a-repne-prefix-to-a-jmp-instruction",
  "content": "I'm attempting to reverse engineer an executable packer, and I'm a little stumped on this x86 instruction:\n\n```\nF2 EB F5    repne jmp short near ptr unk_88801B\n\n```\nAccording to the Intel manual a repeat prefix is not supported on a 'jmp' instruction. Yet IDA, Ollydbg and Capstone decode this instruction as the above.\n\nThis instruction appears in a section of code that is overlapped to obfuscate it, so I'm pretty certain the unsupported prefix is simply there to support the overlap.\n\nMy question is how does the processor handle this instruction? Does it just ignore the prefix, throw an illegal instruction, or ignore the instruction entirely?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "x86"
  ],
  "user": "PeterBelm",
  "time": "Apr 9, 2019 at 22:08",
  "comments": [],
  "answers_data": [
    {
      "content": "This is a hard questions to answer since I have to explain how intel MTX works and I don't know how it works 100% but here I am going to try :)\n\nAt the beginning I though that IDA was giving you wrong disassemble code (that's not true I'll explain that later). \nSince you give me extra info (opcodes) I assemble it with rasm2 and I got this:\n\n$ rasm2 -a x86 -d \"F2 EB F5\" \nbnd jmp 0xfffffff8\n\nBND! that is not a illegal instruction, actually it is call an Intel MPX (Memory Protection Extensions) It was first announced in 2013 and introduced in 2015. \n\nIntel MPX provides four new registers named bnd0-bnd3 that are use to set bounds to avoid memory attack. I recommend you to read this, this, and this.\n\nGetting back to your question. I think is going to work as a normal jmp because the bound registers are not initialized. How I know that? Your opcode is EB and if you read the articles you will read this.\n\nReading that I also understand why IDA was not giving you wrong code.\n\n",
      "votes": "2",
      "user": "Ricardo",
      "time": "Apr 10, 2019 at 3:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "PeterBelm",
          "text": "I did actually read a little about MPX but discounted it due to an apparent requirement on a kernel level call to initialize a register to enable it. I should have read that paragraph you quoted a little more closely!",
          "time": null
        }
      ]
    }
  ]
}