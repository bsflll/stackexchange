{
  "title": "How to speed up finding a function from pseudocode in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/30638/how-to-speed-up-finding-a-function-from-pseudocode-in-ida",
  "content": "I have a function with the pseudocode of\n\n```\n__int64 __fastcall sub_7FF7067A01F0(__int64 a1, __int64 a2, unsigned int a3)\n{\n  if ( qword_7FF709F91498 )\n    return (*(__int64 (__fastcall **)(ID2D1Geometry *, __int64, __int64, _QWORD))(*(_QWORD *)qword_7FF709F91498 + 24i64))(\n             qword_7FF709F91498,\n             a1,\n             a2,\n             a3);\n  else\n    return sub_7FF7067A0450(a1);\n}\n\n```\nConsidering there don't appear to be any strings I could easily search for , would there been any other possible way to speed up the process of finding this in IDA without going through lots of functions (for example , anything IDA could search for or anything that could be quickly identified?\n\nAny assistance would be greatly appreciated. Thank you.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "305",
  "tags": [
    "ida",
    "c++",
    "functions"
  ],
  "user": "CoolNite",
  "time": "Jul 14, 2022 at 20:41",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "What do you mean by “finding”? The function name is right there, what is there to find?",
      "time": null
    },
    {
      "user": "CoolNite",
      "text": "@IgorSkochinsky i'm trying to find this function in a later version of the software i originally found it in",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There's little in that function that could serve as a signature. The function itself consists of a single if-else statement with a direct and indirect call. The direct call could possibly be inlined in different compilations, as could the function itself (unless it's only ever called via function pointer).\n\nThe most distinguishing characteristic of this function is that it checks a global QWORD against NULL, and invokes its virtual function at +0x18 (passing through arguments #0-#2 as arguments #1-3 to the indirect call). That's a reasonable pattern, but also not so easy to find using IDA's standard search interfaces (though perhaps easier to find with a Hex-Rays plugin), and moreover, is likely to have false positives if the program uses a similar pattern to implement other functionality.\n\nI'd say the best things to look at would be:\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Jul 15, 2022 at 19:10",
      "is_accepted": true,
      "comments": []
    }
  ]
}