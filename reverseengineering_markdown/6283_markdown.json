{
  "title": "Most efficient way to extend a program using a DLL [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/6283/most-efficient-way-to-extend-a-program-using-a-dll",
  "content": "I have wrote a program in C++ and I built it as a DLL. I want to utilize functions that are in this DLL in another program to overwrite other functions. Unfortunately, they're not any exports and cannot be added to the imports table. Not only that I have functions that I would like to be able to jmp to and utilize and then return. \n\nDid I perhaps build this incorrectly ?\n\nI have the source so I can make changes in VSC++ although, I can would preferable like to do this in ASM.\n\nI have thought about calling LoadLibrary() but that I believe will put the DLL in a random location and making patches to this will be a bit difficult, if I am not mistaken.\n\nLet me know your ideas on how I can solve this.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "498",
  "tags": [
    "disassembly",
    "ollydbg",
    "x86",
    "dll"
  ],
  "user": "LUser",
  "time": "10 years ago",
  "comments": [
    {
      "user": "evlncrn8",
      "text": "why can't you make them exports? and you could just use loadlibrary -> patch at base returned + displacment.. ie:base address may vary, but the relative address to the base shouldnt",
      "time": null
    },
    {
      "user": "SSpoke",
      "text": "LoadLibrary returns address as handle to the dll's location and you just do math everytime before doing patchs. There is a work around if you can't edit the imports of the program you can hijack one of the dll's the program loads normally and proxy every call to the original dll file (There's tools for this too :P) The functions you won't use you can use those for your program's special functions, remember a DLL file will always load first if it's next to the program then it will start loading from windows/system32 whatever. Which makes making proxy dll's pretty clean alternative.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The most efficient and easiest way is to export the functionality using dllexport in C++.\n\nAny other way is rewriting the functionality of windows APIs which defeats point of writing an 'efficient' way to extend the functionality.\n\nYou thought about doing what with LoadLibrary? You know that LoadLibrary returns the base address of where it's loaded? Or you could even use GetModuleHandle to get the base. So, it's easy enough to do Base + Offset\n\nIf this doesn't answer your question then you can elaborate why you can't use dllexport?\n\nEdit:\nInside your dll add the code:\n\n```\n__declspec(dllexport) void __stdcall ShowMessageBox( )\n{\n    MessageBoxA( 0, \"HelloWorld from exported function!\", \"\", MB_OK );\n}\n\n```\nInside your exe add the code:\n\n```\n#pragma comment(lib, \"TheFullPathToYourOutputDirOrUseRelaltive\\\\Bla.lib\")\n\n__declspec(dllimport) void __stdcall ShowMessageBox( );\n\n```\nThe lib file will be generated in the output directory of your dll. This is only required for build and isn't required for distribution to your end-users.\n\nFinally call our function ShowMessageBox( );. \n\n",
      "votes": "1",
      "user": "Paul",
      "time": "Sep 23, 2014 at 22:07",
      "is_accepted": true,
      "comments": [
        {
          "user": "LUser",
          "text": "I am currently using the Base + Offset for my fix. Can you provide an example of using dllexport in c++ . I am fairly new to C++ and mainly use ASM.",
          "time": null
        }
      ]
    }
  ]
}