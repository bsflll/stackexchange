{
  "title": "Multiple vendors Misfortune Cookie Router Authentication Bypass Exploit",
  "link": "https://reverseengineering.stackexchange.com/questions/12590/multiple-vendors-misfortune-cookie-router-authentication-bypass-exploit",
  "content": "I am working on an exploit over a month now I have a problem and cannot go further.\n\nhere is the link of the exploit:\n\nhttps://gist.github.com/doorbash/f454c698f192a0e5d1bf4da9c6869b67\n\nhttps://www.exploit-db.com/exploits/39739\n\nMisfortune Cookie is a critical vulnerability that allows an intruder to remotely take over an Internet router and use it to attack home and business networks.With a few magic cookies added to your request you bypass any authentication and browse the configuration interface as admin, from any open port.\n\nâ€ŒBy sending Cxxx=yyy cookie to the router web interface yyy will be saved at memory address xxx * 0x28 + Offset.If we find Authentication Enable/Disable boolean address and offset we can add data for this firmware to the exploit's target list and bypass the authentication by sending the right cookie.\n\nThe firmware I analyzed at first is TP-Link 8901G V3 3.0.1 Build 100901 Rel.23594. download it here and run binwalk -e V3 3.0.1 Build 100901 Rel.23594 then open the largest file in extracted directory using IDA by selecting mipsb as the cpu architecture and 0x80020000 for base address.\n\nIf you search for Do not need string using Alt+T keys you will find a sb XXXX($gp)\nat the very first lines of the code you realize the li $gp,YYYYY instruction. the authentication address will be located by adding XXXX and YYYYY which in this case will be 0x803E1829\n\nNow we must discover how Cookie: CNNNN=MMM; alter memory contents:\nif you search for \"soapaction\" using Alt+T you will find this:\n\n\n\nGo to the sub process highlighted by red color.\n\n\n\nNow consider the number 0x6b28 as A = 0x6B28\n\nNow back and toward up:\n\n\n\nNow go to the top sub process:\n\n\n\nyou will find this:\n\n\n\nnow B = 0xA44, C = 0x1887C and D = 0x8041877C.\n\nand MAGIC_NUMBER = 0x16B88 (I don't have any idea why but it works)\n\nNow OFFSET = A - B + C + D - MAGIC_NUMBER = 0x80420554\n\nnow call info(calc(0x8041877C,0x1887c,0xa44,0x6B28,0x16b88),0x803E1829) or info(0x80420554,0x803E1829) in util.py I attached the output is ,107367749,13 which is the data we need for this firmware in the exploit.\n\nthe process is very similar (and different and also easier in the TP-Link W8961ND V3 120830 download it here\n\n\n\n```\nAuthenticationAddress = 0x803605B4\nA = 0x6B28\nB = 0x0 (move    $a0, $s1)\nC = 0x17E38\nD = 0x804234C8\nMAGIC_NUMBER = 0x16B88\nOFFSET = A-B+C+D-MAGIC_NUMBER = 0x8042B2A0\n\n```\nWe call info(0x8042B2A0,0x803605B4) in util.py and output is ,107353414,36 which is tested on real device and works.\n\nfor TD_W961ND_V3_140305 download it here the firmware has \"Do not need\" and \"soapacation\" texts but IDA cannot find the pointing addresses to these strings.I could not find out why.\n\nThe modifications and bug fixes for this according to here is :\n\nI am not sure if the security mechanism (#1) is what is making this issue or not.\n\nI also tried to compare 100901, 120830 and 140305 using binwalk entropy:\n\n\n\n\n\n\n\nI know somethings wrong with 140305 (unusual wave forms at left) but could not come across any findings.\n\nHere is how memory address 0x800D53BC looks like in my IDA:\n\n\n\nAny idea or tip about how to fix this mess?\n\n\n\n",
  "votes": "4",
  "answers": 1,
  "views": "737",
  "tags": [
    "ida",
    "disassembly",
    "firmware"
  ],
  "user": "doorbash",
  "time": "Feb 25, 2018 at 9:34",
  "comments": [],
  "answers_data": [
    {
      "content": "According to TP-LINK the misfortune cookie was fixed only in firmware version TD-W8961ND_V3_150707. So, the TD_W961ND_V3_140305 is also vulnerable.\n\nSince it is a binary file you may not analyse the code part dealing with the soapaction string, but here is what I found for firmware 140305:\n\n\n\nUPDATE!\n\nYou can find the \"Do not need\" string at 0x801a015a. For some reasons it is mips16 code and was referenced only from the command table as the pswauthen command handler. So, you have to change the code representation to mips16 with alt+g at the start of the handler and then press c.\n\n\n\n",
      "votes": "2",
      "user": "ebux",
      "time": "May 5, 2016 at 8:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "doorbash",
          "text": "Please see Update 1 in the question. thanks.",
          "time": null
        },
        {
          "user": "ebux",
          "text": "I don't know why IDA could not found ASCII in your case, but you can use 'a' (create ASCII) to create strings or you may create a simple script, which does this job.",
          "time": null
        },
        {
          "user": "doorbash",
          "text": "Thanks, what about \"Do not need\" string? any idea why there is no pointing address to it?",
          "time": null
        },
        {
          "user": "ebux",
          "text": "See the update in my answer.",
          "time": null
        },
        {
          "user": "doorbash",
          "text": "I saw it unfortunately I could not do what you did in update. IDA 6.8 still shows garbage, but well done I will set it as best answer when I worked on it again and managed to do it, thanks for your time. What version of IDA you got?",
          "time": null
        }
      ]
    }
  ]
}