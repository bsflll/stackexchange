{
  "title": "How to make Ghidra recognize bit fields?",
  "link": "https://reverseengineering.stackexchange.com/questions/25775/how-to-make-ghidra-recognize-bit-fields",
  "content": "Suppose we have the following C source:\n\n```\ntypedef struct {\n  int bit0 : 1;\n  int bit1 : 1;\n  int bit2 : 1;\n  int bit3 : 1;\n} bit_struct;\n\nbit_struct a;\n\nvoid setBit3()\n{\n  a.bit3 = 1;\n}\n\n```\nWhen we compile it and open the result in Ghidra, the decompilation window shows\n\n```\nvoid setBit3(void)\n{\n  a = a | 8;\n  return;\n}\n\n```\nIf we give Ghidra the declaration of bit_struct (using File -> Parse C Source), and then go to the location of a and set its data type to bit_struct, the decompilation changes to\n\n```\na = (bit_struct)((byte)a | 8);\n\n```\nwhich still doesn't access bit3 by declared name.\n\nHow can we make Ghidra properly decompile it?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "decompilation",
    "ghidra"
  ],
  "user": "Maxim",
  "time": "Aug 29, 2020 at 12:24",
  "comments": [],
  "answers_data": [
    {
      "content": "Looks like full bitfield support for the decompiler is slated for a future release according to a comment on Ghidra's github issues: Bitfields don't seem to decompile very well #1059\n\n",
      "votes": "0",
      "user": "nopnopgoose",
      "time": "Aug 30, 2020 at 21:36",
      "is_accepted": true,
      "comments": []
    }
  ]
}