{
  "title": "Why does the function pointer get overwritten even though is declared before the vulnerable buffer?",
  "link": "https://reverseengineering.stackexchange.com/questions/2209/why-does-the-function-pointer-get-overwritten-even-though-is-declared-before-the",
  "content": "I am working on io-wargames for fun right now, level3:\n\nI do understand why there is a stack-overflow in this code (strlen(argv[1])), but what I don't understand is why it overflows the function pointer functionpointer. \n\nfunctionpointer is declared before char buffer[50]; on the stack so How comes it overwrites it ??? \n\nHere is the main vulnerable code: \n\n```\nint main(int argc, char **argv, char **envp)\n{\n        void (*functionpointer)(void) = bad;\n        char buffer[50];\n\n        if(argc != 2 || strlen(argv[1]) < 4)\n                return 0;\n\n        memcpy(buffer, argv[1], strlen(argv[1]));\n        memset(buffer, 0, strlen(argv[1]) - 4);\n\n        printf(\"This is exciting we're going to %p  \n\", functionpointer);\n        functionpointer();\n\n        return 0;\n}\n\n```\nHere is the shell exploits the stackoverflow:\n\n```\nlevel3@io:~$ /levels/level03 11111111\nThis is exciting we're going to 0x80484a4\nI'm so sorry, you're at 0x80484a4 and you want to be at 0x8048474\nlevel3@io:~$ /levels/level03 111111111111111111111111111111111111111111111111111111111111111111111111111111111\nThis is exciting we're going to 0x31313100\nSegmentation fault\n\n```\nHere is the objump -d of the executable:\n\n```\n080484c8 <main>:\n 80484c8:       55                      push   %ebp\n 80484c9:       89 e5                   mov    %esp,%ebp\n 80484cb:       83 ec 78                sub    $0x78,%esp\n 80484ce:       83 e4 f0                and    $0xfffffff0,%esp\n 80484d1:       b8 00 00 00 00          mov    $0x0,%eax\n 80484d6:       29 c4                   sub    %eax,%esp\n 80484d8:       c7 45 f4 a4 84 04 08    movl   $0x80484a4,-0xc(%ebp)\n 80484df:       83 7d 08 02             cmpl   $0x2,0x8(%ebp)\n 80484e3:       75 17                   jne    80484fc <main+0x34>\n 80484e5:       8b 45 0c                mov    0xc(%ebp),%eax\n 80484e8:       83 c0 04                add    $0x4,%eax\n 80484eb:       8b 00                   mov    (%eax),%eax\n 80484ed:       89 04 24                mov    %eax,(%esp)\n 80484f0:       e8 a7 fe ff ff          call   804839c <strlen@plt>\n 80484f5:       83 f8 03                cmp    $0x3,%eax\n 80484f8:       76 02                   jbe    80484fc <main+0x34>\n 80484fa:       eb 09                   jmp    8048505 <main+0x3d>\n 80484fc:       c7 45 a4 00 00 00 00    movl   $0x0,-0x5c(%ebp)\n 8048503:       eb 74                   jmp    8048579 <main+0xb1>\n 8048505:       8b 45 0c                mov    0xc(%ebp),%eax\n 8048508:       83 c0 04                add    $0x4,%eax\n 804850b:       8b 00                   mov    (%eax),%eax\n 804850d:       89 04 24                mov    %eax,(%esp)\n 8048510:       e8 87 fe ff ff          call   804839c <strlen@plt>\n 8048515:       89 44 24 08             mov    %eax,0x8(%esp)\n 8048519:       8b 45 0c                mov    0xc(%ebp),%eax\n 804851c:       83 c0 04                add    $0x4,%eax\n 804851f:       8b 00                   mov    (%eax),%eax\n 8048521:       89 44 24 04             mov    %eax,0x4(%esp)\n 8048525:       8d 45 a8                lea    -0x58(%ebp),%eax\n 8048528:       89 04 24                mov    %eax,(%esp)\n 804852b:       e8 5c fe ff ff          call   804838c <memcpy@plt>\n 8048530:       8b 45 0c                mov    0xc(%ebp),%eax\n 8048533:       83 c0 04                add    $0x4,%eax\n 8048536:       8b 00                   mov    (%eax),%eax\n 8048538:       89 04 24                mov    %eax,(%esp)\n 804853b:       e8 5c fe ff ff          call   804839c <strlen@plt>\n 8048540:       83 e8 04                sub    $0x4,%eax\n 8048543:       89 44 24 08             mov    %eax,0x8(%esp)\n 8048547:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)\n 804854e:       00 \n 804854f:       8d 45 a8                lea    -0x58(%ebp),%eax\n 8048552:       89 04 24                mov    %eax,(%esp)\n 8048555:       e8 02 fe ff ff          call   804835c <memset@plt>\n 804855a:       8b 45 f4                mov    -0xc(%ebp),%eax\n 804855d:       89 44 24 04             mov    %eax,0x4(%esp)\n 8048561:       c7 04 24 c0 86 04 08    movl   $0x80486c0,(%esp)\n 8048568:       e8 3f fe ff ff          call   80483ac <printf@plt>\n 804856d:       8b 45 f4                mov    -0xc(%ebp),%eax\n 8048570:       ff d0                   call   *%eax\n 8048572:       c7 45 a4 00 00 00 00    movl   $0x0,-0x5c(%ebp)\n 8048579:       8b 45 a4                mov    -0x5c(%ebp),%eax\n 804857c:       c9                      leave  \n 804857d:       c3                      ret    \n 804857e:       90                      nop\n 804857f:       90                      nop\n\n```\nI see that the complier reserved in the main's prolog function frame 0x78 bytes for the local main function variables. \n\n",
  "votes": "10",
  "answers": 3,
  "views": "5k",
  "tags": [
    "c",
    "linux",
    "assembly",
    "x86"
  ],
  "user": "0x90",
  "time": "Jun 9, 2013 at 21:32",
  "comments": [
    {
      "user": "0xea",
      "text": "this is a major spoiler for people playing the game, could you consider removing the actual exploit and adding spoiler tags where appropriate ?",
      "time": null
    },
    {
      "user": "0x90",
      "text": "@0xea I removed the explicit exploit. thanks",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The compiler did put the function pointer after the buffer.\n\nIn the disassembly, check the memcpy call:\n\n```\n8048525:  lea    -0x58(%ebp),%eax\n8048528:  mov    %eax,(%esp)\n804852b:  call   804838c <memcpy@plt>\n\n```\nThe first argument to memcpy (the buffer's address) is at [esp+0] and you can see that the value of ebp-0x58 is being put there.\n\nNext is the function call at the end of the function:\n\n```\n804856d:  mov    -0xc(%ebp),%eax\n8048570:  call   *%eax\n\n```\nYou can see that the address being jumped to is loaded from [ebp-0xc] which is 0x4c (76) bytes after the beginning of the character buffer.\n\nHere's a stack layout from IDA which will hopefully make things clearer:\n\n```\n-00000058 buffer          db 76 dup(?)\n-0000000C functionpointer dd ?\n-00000008 var_8           dd ?\n-00000004 var_4           dd ?\n+00000000  s              db 4 dup(?)\n+00000004  r              db 4 dup(?)\n+00000008 argc            dd ?\n+0000000C argv            dd ?\n\n```\nOffsets in the leftmost column are ebp-relative. Memory addresses increase downwards, so it's obvious that writing too much data into buffer will overwrite the function pointer (and then the return address).\n\nMSVC actually uses a mitigation against such attack - it reorders character buffers to be placed after all other variables:\n\n\n\n",
      "votes": "8",
      "user": "Igor Skochinsky",
      "time": "Jun 8, 2013 at 21:58",
      "is_accepted": true,
      "comments": [
        {
          "user": "0x90",
          "text": "How IDA came with the functionpointer and buffer in its output ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@0x90: I renamed them, obviously :) Though it might happen automatically if DWARF info is present (since 6.4).",
          "time": null
        }
      ]
    },
    {
      "content": "The order of objects in the stack is implementation defined. C does not mention any stack and the direction of the stack growing is also implementation-defined (usually it grows downwards but in some systems it grows upwards).\n\nIn your case functionpointer is probably put first and then buffer. As in your system the stack grows downards, this allow you to overwrite functionpointer when overflowing buffer.\n\n",
      "votes": "11",
      "user": "ouah",
      "time": "Jun 8, 2013 at 16:47",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In the vulnerable code the order of declaration is:\n\n```\nvoid (*functionpointer)(void) = bad;  \nchar buffer[50];\n\n```\nThe assembly code shows us that the function pointer variable is located at ebp-0xc and the buffer at ebp-0x58.  \n\nThis proves that the stack is growing downwards(to lower addresses) in this system as the buffer is placed at a lower address than the function pointer variable.  \n\nAnother proof that the stack is growing downwards in this system is the below instruction which allocates the required space by substracting esp:\n\n```\n80484cb:       83 ec 78                sub    $0x78,%esp\n\n```\n\nNow memcpy copies num bytes starting from the byte located at ebp-0x58 and then it continues by incrementing.\n\nAdding 1 to ebp-0x58 makes it ebp-0x57, so if num is long enough, memcpy will overwrite the function pointer located at ebp-0xc.\n\nebp holds an address, lets say 0x00400000, so ebp-0x58 is the address 0x003FFFA8 incrementing from that address you will eventually reach ebp-0xc(0x003FFFF4).\n\n```\n0x003FFFA8     buffer\n...\n0x003FFFF4     function pointer\n0x003FFFF8     \n0x003FFFFC    \n0x00400000     saved ebp\n0x00400004     saved return address\n\n```\n",
      "votes": "4",
      "user": "nomilk",
      "time": "Jun 10, 2013 at 11:48",
      "is_accepted": false,
      "comments": []
    }
  ]
}