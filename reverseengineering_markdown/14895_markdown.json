{
  "title": "Why are symbols with local binding present in the symbol table of my ELF files?",
  "link": "https://reverseengineering.stackexchange.com/questions/14895/why-are-symbols-with-local-binding-present-in-the-symbol-table-of-my-elf-files",
  "content": "I found out that there are symbols with binding=LOCAL and visibility=HIDDEN in the symbol table (.symtab) of ELF executables/libraries. What are they needed for? They are not involved in the relocation process nor can be invoked externally. Are they included in the symbol table for exception handling?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "5k",
  "tags": [
    "linux",
    "elf"
  ],
  "user": "user19496",
  "time": "Mar 14, 2017 at 21:15",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "This is not exactly an RE question...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There must be a way for the link editor (ld) to determine the scope of a symbol during link-time. In other words, symbol binding allows the link editor to differentiate between symbols visible only within a particular file being linked (local scope) vs. symbols that can be referenced from within functions located in other files (global scope).\n\nSymbol visibility attributes (default, protected, hidden or internal) have special meaning for the runtime- (dynamic) linker (ld-linux.so.*), telling it which symbols in the symbol table are used by the executable internally vs. which symbols may be used by other executables dynamically linked to it at program runtime.\n\nFrom Why symbol visibility is good:\n\nThis is false.\n\nFrom the System V ABI Edition 4.1 (generic), Chapter 4: Object Files, Relocation:\n\nFrom the Oracle Linker and Libraries Guide, Part I: Using the Link-Editor and Runtime Linker, Section 2: Link Editor Symbol Processing:\n\nSymbols are never invoked during program runtime. During runtime the instruction pointer in the CPU jumps to the memory addresses in virtual memory of instructions located at offsets calculated by the link-editor (relocation). If symbols were relevant during runtime the symbol table could not be removed (stripped) from executable binaries.\n\n",
      "votes": "9",
      "user": "julian",
      "time": "Mar 14, 2017 at 21:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}