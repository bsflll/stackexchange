{
  "title": "Hex-Rays: JUMPOUT statements inserted due to incorrect autodetected function boundaries",
  "link": "https://reverseengineering.stackexchange.com/questions/10906/hex-rays-jumpout-statements-inserted-due-to-incorrect-autodetected-function-bou",
  "content": "I'm trying to RE a Windows executable compiled with VS 2008. After the initial autoanalysis most functions are detected correctly; however, some have wrong end address — for some reason IDA places the end of the function earlier, leaving a chunk of code not associated with any function. The undetected function gets noreturn attribute and often has sp-based autoanalysis failed message. I have fixed most of these problems by hand. The problem is that Hex-Rays seems to use autodetected function boundaries and therefore the decompilation fails after a jump inside the function, which looks like a jump outside to Hex-Rays.\n\nExample hex-rays output:\n\n```\nvoid __thiscall sub_403CE0(void *this, unsigned int a2, int a3)\n{\n    sub_407F30(this, a2, a3);\n    JUMPOUT(locret_403CFD);\n}\n\n```\nAs you can see, there is a JUMPOUT statement at the end of the function. This was correct before the function boundaries were adjusted, but now locret_403CFD belongs to the function itself and is not a jump “out”. Is there a way to tell hex-rays the function doesn't end here and pass a correct function start/end addresses to it?\n\n",
  "votes": "6",
  "answers": 3,
  "views": "12k",
  "tags": [
    "ida",
    "hexrays"
  ],
  "user": "Vladislav Ivanov",
  "time": "Sep 19, 2015 at 10:06",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes there is. HexRays takes function boundaries from IDA disassembly, so as far as you can change the function boundaries in disassembly view,  you can manage function boundaries as follows (the solution is for you specific case, solving this problem in common may be more complicated):\n\n",
      "votes": "3",
      "user": "w s",
      "time": "Sep 20, 2015 at 6:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Vladislav Ivanov",
          "text": "This is almost exactly what I did (didn't know about the E though — thank you for that — so I undefined the function and defined it again). Unfortunately, the function boundaries are correct and JUMPOUT doesn't disappear. This looks like a problem with this particular database because it doesn't reproduce on a copy of the same binary, but I would prefer not  to start it over — several hours of work would be wasted.",
          "time": null
        },
        {
          "user": "w s",
          "text": "Sorry for dumb question - did you press F5  in decompiler window after function redefinition to refresh the view ? If it doesn't help, try the following: 1 - Close decompiler window and delete the function (Edit-->Functions-->Delete function, you shlould stay in disassembly window in the function boundaries) 2 -   redefine the function again (select all its instructions, press P) 3 - press F5 again. Good luck anyway.",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "Yes, I did. I have also tried deleting the function. Now I'm trying to write a plugin that calls mark_cfunc_dirty function.",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "Unfortunately, even calling clear_cached_cfuncs doesn't help. I'll try something else, but my best guess is that I'll have to start over with a clean database.",
          "time": null
        }
      ]
    },
    {
      "content": "After some work with the database I figured out the reason of the strange behavior of IDA. The binary I'm trying to decompile is a GUI application that uses MFC; I have imported a number of MFC types from a PDB file obtained from Microsoft Symbol store. It's either an IDA bug or corrupted PDB — if I don't import types, all functions are detected correctly and decompilation works as expected, if I do — many function boundaries go wrong, decompilation fails, function attributes are ignored by Hex-Rays and so on.\n\nOne of possible workarounds is to export the database as IDC file and then run the resulting script on a clean database. This way, function prototypes and type information are kept intact. Hex-Rays decompiled results will differ, though (variable mapping information is lost, and so are local variable names). \n\n",
      "votes": "1",
      "user": "Vladislav Ivanov",
      "time": "Sep 21, 2015 at 16:23",
      "is_accepted": true,
      "comments": [
        {
          "user": "SamB",
          "text": "Perhaps IDA is trying to apply the function boundaries of the MFC DLL to your EXE?",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "@RayKoopa did you import any types? Are you sure the actual code wasn't written in that way?",
          "time": null
        },
        {
          "user": "Ray",
          "text": "It is actually the main function of a packed program, nothing done, a fresh database. There's a CALL to a location just skipping over the CC debugger trap following it. The location however is part of the main function calling it.",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "Decompiling a packed program is unlikely to produce any meaningful results. The unpacker code was likely written in assembly and/or purposefully mangled.",
          "time": null
        }
      ]
    },
    {
      "content": "",
      "votes": "1",
      "user": "BgBgBgBsBsBs",
      "time": "Dec 26, 2019 at 3:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}