{
  "title": "Determining if a file is managed code or not",
  "link": "https://reverseengineering.stackexchange.com/questions/1614/determining-if-a-file-is-managed-code-or-not",
  "content": "How can I quickly tell if a EXE or DLL I have is managed code or not?\n\nI spent some time recently trying to disassemble a file and then later learned through some traces in the code that I could have skipped all that work and just used ILspy. How can I avoid repeating that experience in the future?\n\n",
  "votes": "20",
  "answers": 10,
  "views": "8k",
  "tags": [
    "windows",
    "tools",
    "dll",
    "pe"
  ],
  "user": "Jannu",
  "time": "Apr 5, 2013 at 23:52",
  "comments": [],
  "answers_data": [
    {
      "content": "Quoted from here.\n\nOther useful MSDN links:\n\n",
      "votes": "14",
      "user": "Glorfindel",
      "time": "Apr 22, 2021 at 11:52",
      "is_accepted": true,
      "comments": [
        {
          "user": "dyasta",
          "text": "See answers from broadway and peter ferrie. Checking for an mscoree.dll dependency is somewhat reliable, but not 100%.",
          "time": null
        },
        {
          "user": "Ange",
          "text": "To confirm, I made PoCs that imports mscoree.dll and even have fake .NET-looking EntryPoint, but no .COM directory.",
          "time": null
        },
        {
          "user": "Ange",
          "text": "That's not a very constructive comment. I'm just trying to prove that COM directory is a more reliable indicator than imports or EntryPoint for this question.",
          "time": null
        }
      ]
    },
    {
      "content": "Check the dword at offset 0xE8 (32-bit) or 0xF8 (64-bit) in the PE header.  If it's non-zero, it's the pointer to the CLR header.  That's a managed file (you can't put random data there because direct .NET parsing support is built into XP and later, so the file won't load if the data aren't valid).  The presence of mscoree.dll is not enough in itself, because the application might be doing things with managed files but not be managed itself.\n\n",
      "votes": "27",
      "user": "peter ferrie",
      "time": "May 14, 2014 at 15:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "avgvstvs",
          "text": "This answer deserves top billing.  Allows you to get the answer with NO extra tools besides your brain and a knowledge of the PE header.",
          "time": null
        },
        {
          "user": "Karsten Hahn",
          "text": "The offset can be different depending whether it is a PE32 or PE32+.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "@Veitch, I finally edited my answer to include that.",
          "time": null
        },
        {
          "user": "pts",
          "text": "FYI This is equivalent to @broadway's answer and Karsten Hahn's answer: offset 0xe8 or 0xf8 is of the VirtualAddress of IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "@pts there is a significant difference: using the #define means a 32-bit program will recognise only a 32-bit program, 64-bit will only recognise 64-bit.  This is why I suggested using the hard-coded values.",
          "time": null
        }
      ]
    },
    {
      "content": "Checking DataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR].VirtualAddress in the data directory portion of the PE header for a nonzero value is probably the fastest way.\n\n#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   // COM Runtime descriptor\n\nReferences:\n\n",
      "votes": "13",
      "user": "broadway",
      "time": "Apr 7, 2013 at 1:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "dyasta",
          "text": "This is the method I use. The 14th member of the Data Directory array is IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR , since it isn't listed in the post. We should discourage absolute references like that.",
          "time": null
        },
        {
          "user": "peter ferrie",
          "text": "a hexeditor has no concept of data directories, though, hence the absolute offset.",
          "time": null
        },
        {
          "user": "broadway",
          "text": "depends on the hex editor, really. 010 has PE templates.",
          "time": null
        }
      ]
    },
    {
      "content": "Manually, i prefer to observe the following signs in the PE header:\n\n1- Presence of mscoree!_CorExeMain in the import table.\n\n2- VirtualAddress and Size of the CLR Header/*Com Descriptor* data directory are set. Size set to 0x48.\n\n3- Size of the Base Relocation data directory set to 0x0C i.e. Only one fixup.\n\nAlso, one minor sign is:\n\n4- SectionAlignment set to 0x2000.\n\n",
      "votes": "7",
      "user": "waliedassar",
      "time": "Jun 28, 2013 at 8:22",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Try opening it in ILSpy first. It should tell you if the assembly isn't managed.\n\n",
      "votes": "6",
      "user": "Peter Andersson",
      "time": "Apr 5, 2013 at 18:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "Ange",
          "text": "This implies that ILSpy is able to open it, which is not always the case.",
          "time": null
        },
        {
          "user": "Peter Andersson",
          "text": "ILSpy has a specific message if the assembly isn't managed. If it fails to load for another reason I'm sure there's a different message :) Could you show me a managed assembly which ILSpy says isn't managed?",
          "time": null
        },
        {
          "user": "Ange",
          "text": "If it fails to load the PE (with managed code or not), it gives some Mono.Cecil.PE.ImageReader error. TinyNet is using the common malware trick of having a small NumOfRVA to hide its COM directory - which fails ILSpy - even though it's using managed code.",
          "time": null
        }
      ]
    },
    {
      "content": "In addition to peter ferries answer, some python code to check for the same:\n\n\n```\nimport sys\n\ndef unpack(byte):\n    return sum([\n        ord(b) << (8 * i) for i, b in enumerate(byte)\n    ])\n\nif len(sys.argv) == 1:\n    print >> sys.stderr, \"No input file given!\"\nelse:\n    myfile = sys.argv[1]\n\n    with open(myfile, \"r\") as f:\n        f.seek(0x3c)\n        peoffset = unpack(f.read(2))\n        optoffset = peoffset + 24\n        f.seek(optoffset)\n        magic = f.read(2)\n        offset = -1\n        if magic == '\\x0b\\x01':\n            offset = 208 + optoffset\n        else:\n            offset = 224 + optoffset\n        f.seek(offset)\n        clr_address = unpack(f.read(4))\n        if clr_address == 0:\n            print \"no managed executable\"\n        else:\n            print \"managed executable\"\n\n```\n",
      "votes": "5",
      "user": "Karsten Hahn",
      "time": "May 27, 2014 at 11:33",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The fastest heuristic method I found so far was to check whether it imports mscoree.dll.\n\nIn the version resource of mscoree.dll Microsoft calls it: Microsoft .NET Runtime Execution Engine.\n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Apr 5, 2013 at 17:59",
      "is_accepted": false,
      "comments": [
        {
          "user": "Abel",
          "text": "No, this won't work, as many other executables also import from mscoree.dll that are not managed assemblies.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@Abel examples please.",
          "time": null
        },
        {
          "user": "Abel",
          "text": "it's 8 years ago :D, but let's try: mscoree.dll could be linked by any compiler (just create a C++ prj) without it becoming a CLR binary.The inverse is also true, some .NET binaries do not have a link to mscoree.dll. And apparently, it may be mscoreei.dll in some cases. I'm not sure about reference assemblies. I'd rely on PE headers, which will give you the .NET version info and CLR.",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Thanks @Abel ... much appreciated. I am actually really interested (again) in this topic, that's why I asked.",
          "time": null
        },
        {
          "user": "Abel",
          "text": "I see :). That said, I just checked all loaded binaries that reference mscoree.dll in-memory. The exception on my machine seems to be procexp64.exe, which has a reference to mscoree.dll but is not a CLI assembly. Everything else follows the rule \"if it has mscoree.dll, then it is .NET\".",
          "time": null
        }
      ]
    },
    {
      "content": "CorFlags.exe is a utility that ships with the Windows SDK. Execute that passing in the name of the file in question and if it is a managed file it will tell you what version of the Dotnet framework it uses and whether the file is all managed code or mixed mode, whether it is signed, and a few other useful bits of info.\n\n",
      "votes": "4",
      "user": "Neutrino",
      "time": "Oct 24, 2013 at 20:39",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Use PEReader.HasMetadata:\n\n```\nusing System;\nusing System.Linq;\nusing System.IO;\nusing System.Reflection.PortableExecutable;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(Environment.OSVersion);\n        \n        var currentAssemblyIsManaged = IsManaged(typeof(Program).Assembly.Location) ?? false;\n        Console.WriteLine($\"The currently executing assembly is {(currentAssemblyIsManaged ? \"\" : \"not \")}managed\");\n        \n        Console.WriteLine(\"Here are some unmanaged assemblies:\");\n        var unmanagedAssemblies = ((string)AppContext.GetData(\"TRUSTED_PLATFORM_ASSEMBLIES\"))\n            .Split(OperatingSystem.IsWindows() ? ';' : ':')\n            .Select(path => Path.GetDirectoryName(path))\n            .Distinct()\n            .SelectMany(directory => Directory.GetFiles(directory))\n            .Where(file => IsManaged(file) == false);\n        foreach (var path in unmanagedAssemblies)\n        {\n            Console.Write('\\t');\n            Console.WriteLine(path);\n        }\n    }\n    \n    static bool? IsManaged(string path)\n    {\n        try\n        {\n            using var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);\n            using var peReader = new PEReader(stream);\n            return peReader.HasMetadata;\n        }\n        catch\n        {\n            // Probably not an assembly, but maybe the file is merely inaccessible at the moment?\n            return null;\n        }\n    }\n}\n\n```\n.NET Fiddle\n\nOutput from .NET Fiddle:\n\n```\nUnix 5.15.0.1024\nThe currently executing assembly is managed\nHere are some unmanaged assemblies:\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libmscordbi.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libcoreclrtraceptprovider.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libcoreclr.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libmscordaccore.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libSystem.IO.Compression.Native.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libclrgc.so\n    /usr/share/dotnet/shared/Microsoft.NETCore.App/7.0.5/libclrjit.so\n\n```\nOutput on a Windows machine:\n\n```\nMicrosoft Windows NT 10.0.22621.0\nThe currently executing assembly is managed\nHere are some unmanaged assemblies:\n        C:\\Users\\____\\bin\\Debug  \net7.0\\ConsoleApp22.exe\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\clretwrc.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\clrgc.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\clrjit.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\coreclr.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\createdump.exe\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\hostpolicy.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\Microsoft.DiaSymReader.Native.amd64.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\mscordaccore.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\mscordaccore_amd64_amd64_7.0.523.17405.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\mscordbi.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\mscorrc.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\msquic.dll\n        C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.5\\System.IO.Compression.Native.dll\n\n\n```\n",
      "votes": "1",
      "user": "Matt Thomas",
      "time": "May 19, 2023 at 16:05",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "When examining the VirtualAddress property of the IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR within the Data Directory of a running process, one may observe the manifestation of native code as .NET. This occurrence is attributed to the dynamic execution of .NET modules during runtime. However, it is imperative to consider.\n\n",
      "votes": "0",
      "user": "James Slater",
      "time": "Dec 31, 2023 at 8:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}