{
  "title": "IDA PRO Hex-Rays try-catch",
  "link": "https://reverseengineering.stackexchange.com/questions/29099/ida-pro-hex-rays-try-catch",
  "content": "I've been working in IDA Pro with a project but there is an issue. Try-Catch statements don't look nice.\n\nI've been searching and it seems like IDA does not support them so I was wondering if there is a way to either:\n\nThis is how the thing looks like at the moment:\n\n```\n  v3.SavedRegs = &savedregs;\n  v3.Handler = &loc_43B24C;\n  v3.Next = NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, &v3);\n  Controls::TControl::ReadState(Self, a2);\n  __writefsdword(0, v3.Next);\n\n```\nAnd I would like to end up with something like this:\n\n```\n  try {\n    Controls::TControl::ReadState(Self, a2);\n  } ... {}\n\n```\nOr if I can just hide those parts...\n\n```\n  //try {          <- Block comment (parts hidden)\n    Controls::TControl::ReadState(Self, a2);\n  //} ... {}       <- Block comment (parts hidden)\n\n```\nAnything is good as long as I can hide those lines because they are distracting AF. Thank you very much!\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "hexrays",
    "ida-plugin",
    "exception"
  ],
  "user": "Ricardo",
  "time": "Aug 5, 2021 at 13:09",
  "comments": [],
  "answers_data": [
    {
      "content": "I've considered doing this myself, but it's tricky for many reasons.\n\nFirst, exception internals are not standardized across languages, platforms, or implementations. 64-bit Windows programs use a data-driven exception model, i.e., the RUNTIME_FUNCTION (etc.) entries in the .rdata segment. In this paradigm, the binary pre-registers information about exception scopes and handlers with the operating system via standardized structures, which takes care of lookup and dispatch when an exception occurs. Your example shows 32-bit Delphi; 32-bit Windows programs use a code-driven exception model, where the code is responsible for adding and removing exception handlers on demand, using proprietary metadata formats. As a result, adding exception support would require a lot of platform and language-specific effort, and may involve reverse engineering undocumented exception implementations across multiple runtime versions for a given language. While there would be benefits to adding exception support, it would also require a lot of work to develop (and maintain as the runtime support evolves over time).\n\nSecondly, even if we were to decompile exception-related things into a simplified, language-independent representation, the most logical method of presentation would involve extending Hex-Rays to support things like try/catch/finally blocks as scoped constructs, and producing these things in the output. Unfortunately, extending the Hex-Rays ctree IR in this fashion is impossible for third-party developers. The valid ctree expression types are held in an enum called ctype_t. We'd need to add new entries like cit_try to this enum, we'd need to extend the union in cinsn_t to support an additional ctry_t * element, and we'd need to modify all of the existing ctree code in Hex-Rays to be aware of our modifications (for example, to print the try blocks in the decompilation listing). None of these things can be done by third-party plugins, as the existing, pre-compiled code will generate INTERRs upon encountering our cit_try instructions. Adding statement types to the ctree IR can only be accomplished via source-level modifications, not via plugins.\n\nFinally, even though Hex-Rays technically has an option not to eliminate exception-related code, I'm not completely sure how it works. Exception-related code often manifests itself as \"function chunks\" attached to a given function, which have no incoming control flow references. As a result, that code is eliminated by the optimizer very early into the decompilation process. You'd need to find a way to preserve it.\n\nIt's a daunting prospect for a third-party developer; I myself abandoned the idea. It's also daunting for the first-party developers. I don't expect to see it in any major decompiler any time soon.\n\n",
      "votes": "2",
      "user": "Rolf Rolles",
      "time": "Aug 14, 2021 at 2:01",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ricardo",
          "text": "Thank you very much for your answer. Seems like a real pain in the ass to do from what you said so maybe I should stick to just putting comments here an there... But either way I think that a feature to hide lines or group of instructions just like the disasm does would be useful in the software.",
          "time": null
        }
      ]
    },
    {
      "content": "In the end, it seems like there is no way to do this in IDA up to 7.5. It's a shame.\n\n",
      "votes": "1",
      "user": "Ricardo",
      "time": "Aug 12, 2021 at 22:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}