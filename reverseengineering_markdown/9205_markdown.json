{
  "title": "Need advice : Reverse engineering a pdf with shellcode",
  "link": "https://reverseengineering.stackexchange.com/questions/9205/need-advice-reverse-engineering-a-pdf-with-shellcode",
  "content": "Problem :\n\nI try to find the plaintext which was hidden at pdf inbuilt with shellcode \n\nWhat i tried :\n\nI received a pdf which contains javascript with it ,i dig the pdf as follows :\n\nExploring  JavaScript inside:\n\n```\nroot@kali:~# pdfid APT9001.pdf \nPDFiD 0.0.12 APT9001.pdf\n PDF Header: %PDF-1.5\n obj                   10\n endobj                 9\n stream                 3\n endstream              3\n xref                   2\n trailer                2\n startxref              2\n /Page                  3(2)\n /Encrypt               0\n /ObjStm                0\n /JS                    1(1)\n /JavaScript            1(1)\n /AA                    0\n /OpenAction            1(1)\n /AcroForm              0\n /JBIG2Decode           1(1)\n /RichMedia             0\n /Launch                0\n /EmbeddedFile          0\n /Colors > 2^24         0\n\n```\nwhile extracting  it:\n\n```\nroot@kali:~# pdf-parser -s javascript APT9001.pdf \nobj 5 0\n Type: /Action\n Referencing: 6 0 R\n\n  <<\n    /Type /Action\n    /S /JavaScript\n    /JS 6 0 R\n  >>\n\n\nroot@kali:~# pdf-parser -o 6 APT9001.pdf \nobj 6 0\n Type: \n Referencing: \n Contains stream\n\n  <<\n    /Length 6170\n    /Filter '[  \\r  \n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]'\n  >>\n\n\nroot@kali:~# pdf-parser -o 6 -d APT9001.js -f APT9001.pdf \nobj 6 0\n Type: \n Referencing: \n Contains stream\n\n  <<\n    /Length 6170\n    /Filter '[  \\r  \n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]'\n  >>\n\n```\nIf i open the JavaScript file, i can quickly find the shellcode:\n\nNow i am stucked with this part ,now how can i explore further :\n\nthe possible solutions which i might think were\n\nconvert these shellcode to exe and exporting it as txt \nonce the text was recovered exploring the stack of it{assumption]\n\nam i on right way?or any community ideas to reverse engineer these further?\n\n",
  "votes": "5",
  "answers": 2,
  "views": "2k",
  "tags": [
    "malware",
    "vulnerability-analysis",
    "callstack",
    "shellcode"
  ],
  "user": "BlueBerry - Vignesh4303",
  "time": "Jun 22, 2015 at 14:21",
  "comments": [
    {
      "user": "Abr001am",
      "text": "they look like a bunch of unicode characters !",
      "time": null
    },
    {
      "user": "Dominik Antal",
      "text": "resources.infosecinstitute.com/hacking-pdf-part-1",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The shellcode is unicode escaped. You can convert it to its hex representation using a simple python script.\n\n```\nfrom binascii import unhexlify as unhx\n\nencoded = open('encoded.txt').read() # The shellcode dump\nout = open('shellcode.bin', 'wb')\n\nfor s in encoded.split('%'):\n    if len(s) == 5:\n        HI_BYTE = s[3:]\n        LO_BYTE = s[1:3]\n        out.write(unhx(HI_BYTE))\n        out.write(unhx(LO_BYTE))\nout.close()\n\n```\nshellcode.bin contains the shellcode in its binary form. You can convert the shellcode to an executable using the following C template or using an online tool such as this\n\n```\n#include <stdio.h>\n\nunsigned char payload[] = \n{\n//Bytes of the shellcode\n};\n\nint main(int argc, char **argv) {\n    (*(void (*)()) payload)();\n    return(0);\n}\n\n```\nRunning the resultant executable produces this output.\n\n\n\n",
      "votes": "10",
      "user": "0xec",
      "time": "Jun 22, 2015 at 17:22",
      "is_accepted": true,
      "comments": [
        {
          "user": "Abr001am",
          "text": "owned by a pdf , hahaha good exploit",
          "time": null
        }
      ]
    },
    {
      "content": "The answer by extreme coders was wonderful,i wish to share my method too over here:\n\nI convert it to an executable with the tools in REMnux:\n\n```\nremnux@remnux:~$ unicode2hex-escaped < sc.txt > sc2.txt\nremnux@remnux:~$ shellcode2exe -s sc2.txt \n\n\nReading string shellcode from file sc2.txt\nGenerating executable file\nWriting file sc2.exe\nDone.\nremnux@remnux:~$ \n\n```\nThe shellcode puts something on the stack:\n\n\n\nIf i split it and observe carefully :\n\n\n\nSo my guessed answer would be [emailÂ protected]\n\n",
      "votes": "1",
      "user": "BlueBerry - Vignesh4303",
      "time": "Jun 24, 2015 at 3:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}