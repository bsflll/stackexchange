{
  "title": "IDAPython: How to get function argument values",
  "link": "https://reverseengineering.stackexchange.com/questions/17593/idapython-how-to-get-function-argument-values",
  "content": "I always write ad-hoc code to get the values passed to function calls, like finding the XRef to a function and then tracking back disassembly to find some specific MOV or PUSH instruction. For example, in the following example:\n\n```\n.text:080488B1                 push    [ebp+gid]\n.text:080488B4                 push    [ebp+gid]       ; gid\n.text:080488B7                 call    setregid\n\n```\nI would find the XRefs to setregid and then find \"push instructions\". Or, in the next example:\n\n```\nLOAD:FFFFFFFF824047A4                 mov     rdi, exec_map\nLOAD:FFFFFFFF824047AC                 mov     esi, 40400h\nLOAD:FFFFFFFF824047B1                 call    kmem_alloc_wait\n\n```\nI would find the XRef to kmem_alloc_wait and then find before that call the values set to the registers RDI, RSI, RDX, RCX... And for each new processor, I would have to re-write again my code to handle the specific calling convention(s) of that CPU or VM. However, I'm sure there must be some proper way of getting the argument values to function calls, from IDAPython, in a CPU agnostic way.\n\nSo, do you know any way of getting the values passed to a function call from IDAPython that doesn't rely on parsing disassembly?\n\n",
  "votes": "6",
  "answers": 1,
  "views": "11k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "joxeankoret",
  "time": "Mar 4, 2018 at 9:15",
  "comments": [
    {
      "user": "macro_controller",
      "text": "How about decompiling and then parsing the C generated file?",
      "time": null
    },
    {
      "user": "joxeankoret",
      "text": "I can walk the AST. Actually, this is an approach that I use sometimes. However: what can I do if I don't have a decompiler for that specific processor? What if it's a VM?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Answering my own question: I sent an email to Hex-Rays and got back the answer in like minutes. The answer is using idaapi.get_arg_addrs().\n\nFor example, given the following code:\n\n```\nLOAD:FFFFFFFF82491188                 mov     rdi, offset unk_FFFFFFFF832EF148 ; a1\nLOAD:FFFFFFFF8249118F                 mov     rsi, rbx        ; a2\nLOAD:FFFFFFFF82491192                 xor     edx, edx        ; a3\nLOAD:FFFFFFFF82491194                 xor     ecx, ecx\nLOAD:FFFFFFFF82491196                 xor     r8d, r8d\nLOAD:FFFFFFFF82491199                 call    _sx_xlock_hard\n\n```\nBy running idaapi.get_arg_address(0xFFFFFFFF82491199) it would return the address of the 3 arguments in the order they are given when the function is called:\n\n```\nPython>print map(hex, idaapi.get_arg_addrs(here()))\n['0xffffffff82491188L', '0xffffffff8249118fL', '0xffffffff82491192L']\n\n```\n",
      "votes": "8",
      "user": "joxeankoret",
      "time": "Mar 7, 2018 at 18:11",
      "is_accepted": true,
      "comments": []
    }
  ]
}