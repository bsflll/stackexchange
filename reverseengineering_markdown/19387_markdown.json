{
  "title": "Reverse engineer a ARM-v7a function",
  "link": "https://reverseengineering.stackexchange.com/questions/19387/reverse-engineer-a-arm-v7a-function",
  "content": "Currently I am trying to reverse engineer the following armeabi-v7a function:\n\n\n\nI already wrote the following Java code:\n\n```\n static double getFunc(double param0, double param1, double param2, double param3) {\n      double r3, s7, s8, d4, d5, d6, d7, s10, s12, s13, s14, s15;\n      s14 = 100.0;\n      r3 = param3 - 0xAA;\n      s13 = param0;\n      s15 = param2;\n      s8 = 4.0;\n      s7 = param3;\n      s10 = 7.0;\n      s13 = s13  /s14;\n\n      if (param1 == 1) {\n          s13 = s15 *s13;\n          s15 = s13 * s8;\n          d4 = 0.22;\n          s10 = s15 / s10;\n          d5 = s10;\n          d4 = d5 * d4;\n          d5 = 0.6;\n          s12 = s7 / s14;\n          d5 = d4 * d5;\n          s10 = d5;\n          s12 = s10 + s12;\n      } else {\n          s15 = s15 * s13;\n          d6 = 0.34;\n          s15 = s15 * s8;\n          s10 = s15 / s10;\n          d5 = s10;\n          d5 = d5 * d6;\n          d6 = 0.45;\n          d6 = d5 * d6;\n          s15 = d6;\n          s12 = s7 / s14;\n          s12 = s15 + s12;\n      }\n\n      s14 = 10.0;\n      s14 = s12 * s14;\n      d6 = 0.5;\n      d7 = s14;\n      d7 = d7 + d6;\n      s14 = d7;\n      d6 = 10.0;\n      d7 = s14;\n      d7 = d7 / d6;\n\n      return d7;\n  }\n\n```\nUnfortunately, I don't get the correct result. I am doing something wrong but I am a little bit stuck.\n\nIt might be that I don't understand the parameter handling on the armeabi-v7a assembly. Do I get it right in the code? Is R3 the third parameter? Are R# always integer values or could it be also double values?\nIs the VCVT.F32.F64 important for the Java implementation? If yes, how do I handle them correctly?\nR0 is the return register?\n\nIt would be awesome if somebody could review my code.\n\nedit: the dissassembly code as requested:\n\n```\ngetFunc       proc\n\n             VLDR    S14, gvar_1318 \n             SUBS    R3, #AAh\n             CMP     R1, #1h\n             VMOV    S13, R0\n             VMOV    S15, R2\n             VMOV.F32 S8, #4.000000E+00\n             VMOV    S7, R3\n             VMOV.F32 S10, #7.000000E+00\n             VDIV.F32 S13, S13, S14\n             BNE     loc 1294\n             VMUL.F32 S13, S15, S13\n             VMUL.F32 S15, S13, S8\n             VLDR    D4, gvar_12F8\n             VDIV.F32 S10, S15, S10\n             VCVT.F64.F32 D5, S10 \n             VCVT.F32.S32 S7, S7 \n             VMUL.F64 D4, D5, D4 \n             VLDR    D5, gvar_1300 \n             VDIV.F32 S12, S7, S14 \n             VMUL.F64 D5, D4, D5 \n             VCVT.F32.F64 S10, D5 \n             VADD.F32 S12, S10, S12\n             B        loc_12C4\nloc_1294:\n             VMUL.F32 S15, S15, S13 \n             VLDR    D6, gvar 1308 \n             VMUL.F32 S15, S15, S8 \n             VDIV.F32 S10, S15, S10 \n             VCVT.F64.F32 D5, S10\n             VMUL.F64 D5, D5, D6 \n             VLDR    D6, gvar_1310 \n             VMUL.F64 D6, D5, D6 \n             VCVT.F32.S32 S7, S7 \n             VCVT.F32.F64 S15, D6 \n             VDIV.F32 S12, S7, S14 \n             VADD.F32 S12, S15, S12\nloc_12C4:\n             VMOV.F32 S14, #1.000000E+01 \n             VMUL.F32 S14, S12, S14 \n             VMOV.F64 D6, #5.000000E-01 \n             VCVT.F64.F32 D7, S14 \n             VADD.F64 D7, D7, D6 \n             VCVT.S32.F64 S14, D7 \n             VMOV.F64 D6, #1.000000E+01 \n             VCVT.F64.S32 D7, S14 \n             VDIV.F64 D7, D7, D6 \n             VCVT.F32.F64 S15, D7\n             VMOV    R0, S15\n             BX      LR\n\ngetFunc        endp\n\n\nLOAD.text:000012F2           db 0, BFh, AFh, F3h, 0, 80h \nLOAD.text:000012F8 gvar_12F8 dq 3FCC28F5C28F5C29h\nLOAD.text:00001300 gvar_1300 dq 3FE3333340000000h \nLOAD.text:00001308 gvar_1308 dq 3FD5C28F5C28F5C3h \nLOAD.text:00001310 gvar_1310 dq 3FDCCCCCC0000000h \nLOAD.text:00001318 gvar_1318 dd 42C80000h\nLOAD.text:0000131C           db AFh, F3h, 0, 80h\n\n```\n",
  "votes": "1",
  "answers": 2,
  "views": "469",
  "tags": [
    "arm",
    "java"
  ],
  "user": "foobar12",
  "time": "Sep 19, 2018 at 7:29",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Can you please paste disassembly as text instead of a screenshot?",
      "time": null
    },
    {
      "user": "foobar12",
      "text": "I paste the disassembly in the original post.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Maybe the following line is wrong: \n\n```\nif (param == 1)\n\n```\nI think it should be\n\n```\nif (param != 1)\n\n```\nBNE branches if Z==0.\n\n",
      "votes": "1",
      "user": "josh",
      "time": "Sep 18, 2018 at 16:27",
      "is_accepted": false,
      "comments": [
        {
          "user": "foobar12",
          "text": "Thanks but unfortunately, that was not the problem. I tested it with both conditions.",
          "time": null
        },
        {
          "user": "josh",
          "text": "But you posted only the wrong one..",
          "time": null
        },
        {
          "user": "foobar12",
          "text": "Yes but I tested the function with param = 1 and param = 0 but still I get the wrong output.",
          "time": null
        },
        {
          "user": "josh",
          "text": "Don't worry. Couldn't you step-wise compare the values in the assembler with the ones in your \"assembly-like\" Java code?",
          "time": null
        }
      ]
    },
    {
      "content": "I guess I found the error.\n\nI incorrectly translated the assembly SUBS    R3, #AAh into r3 = param3 - 0xAA; but it should be param3 = param3 - 0xAA;\n\nCould an expert confirm my mistake?\n\n",
      "votes": "0",
      "user": "foobar12",
      "time": "Sep 20, 2018 at 17:32",
      "is_accepted": true,
      "comments": []
    }
  ]
}