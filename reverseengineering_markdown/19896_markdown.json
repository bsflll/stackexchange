{
  "title": "I want to decompile a exe and change the code to not need Admin to run",
  "link": "https://reverseengineering.stackexchange.com/questions/19896/i-want-to-decompile-a-exe-and-change-the-code-to-not-need-admin-to-run",
  "content": "I want to decompile an .exe and change the code to not need Admin to run. I know that it does something with:\n\n```\n<requestedPrivileges>\n  <requestedExecutionLevel\n  level=\"requireAdministrator\"\n  uiAccess=\"false\"\n/>\n</requestedPrivileges>\n\n```\nHowever I'm not sure what I need to change (I'm using Resource Hacker).\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "windows",
    "exe"
  ],
  "user": "Schreyer Karl",
  "time": "Nov 16, 2018 at 9:02",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Btw, another answer to the question I linked in my answer below suggests that creating an external manifest is viable.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Actually this has nothing to do with decompiling and little with reverse engineering.\n\nWhat you need to do is to change level=\"requireAdministrator\" into level=\"asInvoker\":\n\n```\n<requestedPrivileges>\n  <requestedExecutionLevel\n  level=\"asInvoker\"\n  uiAccess=\"false\"\n/>\n</requestedPrivileges>\n\n```\nUsing ResourceHacker you should be able to do just that. The canonical way, however, would be to use the Manifest Tool (mt.exe) which is - depending on the version - included with the SDKs, WDKs or Visual C++/Studio.\n\nAnother way would be to strip the resource and place a manifest next to the .exe with the same name, but .manifest appended. I.e. if your .exe is named foobar.exe then the manifest would be foobar.exe.manifest.\n\nAnd actually, thinking about it, this may even work without stripping the existing manifest resource (perhaps give it a try?). I.e. extract the existing manifest resource, place it next to the .exe as explained above and modify the (external) manifest. Then try to start the .exe ...\n\nHowever, be warned: if your .exe has been signed, your tampering will invalidate the signature. If the software has been prepared to do integrity checking or certain other circumstances apply (Software Restriction Policies, AppLocker) this may lead to the software being unable to run.\n\nIf you wanted to achieve this without tinkering with the manifest resource, you can have a look here. This answer details how to enable running a software without elevation by invoking it with a special environment variable set.\n\nApplying this registry file will create an entry named Run without admin rights (UAC) in the context menu, which allows you to make use of the feature:\n\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\*\\shell\\forcerunasinvoker]\n@=\"Run without admin rights (UAC)\"\n\n[HKEY_CLASSES_ROOT\\*\\shell\\forcerunasinvoker\\command]\n@=\"cmd /min /C \\\"set __COMPAT_LAYER=RUNASINVOKER && start \\\"\\\" \\\"%1\\\"\\\"\"\n\n```\n",
      "votes": "1",
      "user": "0xC0000022L",
      "time": "Nov 16, 2018 at 9:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "Schreyer Karl",
          "text": "I ran my program with this manifest:  <<requestedPrivileges>         <requestedExecutionLevel level='asInvoker' uiAccess='false' />       </requestedPrivileges>>  And got the message (not user-and-pass prompt) \"This application needs administraton permissions to run properly.\" I'm trying to run Speccy",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@SchreyerKarl how exactly did you try it? External manifest with embedded one stripped or still in place or manipulated the embedded manifest? Either way the problem can be that some program really requires admin privileges. With Speccy I would even expect this, since it will attempt to read stuff that a normal user doesn't necessarily have access to (without certain prerequisites in place at least). So it would make sense for Speccy to require those privileges. Similarly a software trying raw disk access would fall into this same category.",
          "time": null
        },
        {
          "user": "Schreyer Karl",
          "text": "I tried both ways, however, only the admin --> asInvoker --> recompile worked for me. I didn't get the manifest striping method. I tried copying the manifest file (for other exe) into the folder where it was stored and renaming the manifest but it still prompted me for admin. If it's not too much trouble could you explain why the manifest striping works? Thank you so much in advance you have already bee a huge help!",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@SchreyerKarl an external manifest should take precedence. But I am not sure if this would work without removing an already embedded manifest.",
          "time": null
        }
      ]
    }
  ]
}