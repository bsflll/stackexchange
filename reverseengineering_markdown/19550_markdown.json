{
  "title": "What's a decompiler that can be extended to new architecture, and how can I do it?",
  "link": "https://reverseengineering.stackexchange.com/questions/19550/whats-a-decompiler-that-can-be-extended-to-new-architecture-and-how-can-i-do-i",
  "content": "I was reverse engineering a binary file. Details does not matter. The important part is that it is written in an architecture that is very unpopular, and there is no existing disassembler or decompiler that supports the architecture.\n\nIt's possible to write a disassembler without too much difficulty. Also, assume that I have the full documentation on how the machine code is executed.\n\nHowever, writing a decompiler is much harder. So instead, I am thinking about using an existing decompiler and extend it to support my architecture.\n\nQuestion:\n\n",
  "votes": "4",
  "answers": 2,
  "views": "879",
  "tags": [
    "tools",
    "decompiler"
  ],
  "user": "user202729",
  "time": "Oct 5, 2018 at 14:01",
  "comments": [
    {
      "user": "Twifty",
      "text": "If you are looking for a decompiler with a GUI, try x64dbg. It's open source, available on github, so it should give you a nice starting point.",
      "time": null
    },
    {
      "user": "julian",
      "text": "@Twifty x64dbg itself is not a decompiler, though a decompiler called snowman may be used as a plugin",
      "time": null
    },
    {
      "user": "John Källén",
      "text": "Raise an issue on github.com/uxmal/reko/issues . We'll be more than happy to help you getting started.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You did not mention what the format of the binary is. If the decompiler you choose to extend does not support the format of the binary you want to decompile then you will need to either implement support for that format or find a work-around. \n\nThere are a number of open-source decompiler projects under active development that you can choose from. Of course, there are also plenty of dead compiler projects, but they will not be discussed. \n\nThe projects discussed here are\n\nThis is not meant to be an exhaustive list, of course. There are other options as well, such as radeco and snowman, but these do not seem to be very well documented.\n\nIf it is decided that decompilation is not required and disassembly will suffice, a nice guide to adding a new processor module to IDA is given in the following articles: \n\n",
      "votes": "2",
      "user": "julian",
      "time": "Oct 10, 2018 at 0:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can use Ghidra for this: https://ghidra-sre.org/\n\nCreating new CPU descriptions is possible. There's nothing obvious in the way of documentation, but there are plenty of examples in the Ghidra/Processors folder. I managed to muddle through and create a new one for the 6502, even though I didn't quite understand everything (and still don't): https://github.com/tom-seddon/ghidra_6502\n\nThe decompiler appears to be driven entirely by these CPU descriptions, so I think all you need to do is make a new description, and you'll get C code, of a sort, out of it. \n\nI'm not sure how feasible it is to turn a whole program into some code that you can recompile! - that's not something I need, so I haven't investigated that. But if you just need particular routines disentangling, it may suffice.\n\n",
      "votes": "1",
      "user": "Tom Seddon",
      "time": "Mar 7, 2019 at 18:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}