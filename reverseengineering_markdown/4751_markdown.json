{
  "title": "How to re-use some asm code when GOT/GOT.PLT references involved?",
  "link": "https://reverseengineering.stackexchange.com/questions/4751/how-to-re-use-some-asm-code-when-got-got-plt-references-involved",
  "content": "Basically I am trying to re-use some asm code disassembled from a binary on x86 32bit Linux.\n\nI am facing some trouble when references of GOT/GOT.PLT involved like these.\n\n```\n  ....\n  804c460:       53                      push   %ebx\n  804c461:       e8 ec ff ff ff          call   804c452 <__i686.get_pc_thunk.bx>\n  804c466:       81 c3 8e 2b 00 00       add    $0x2b8e,%ebx   // %ebx has the beginning address of GOT table\n  804c46c:       83 ec 18                sub    $0x18,%esp\n  ....\n\n```\nIf I want to re-use these asm code, I have to lift concrete address into symbols, and it seems that in the above code, I have to find a way to let ebx store the begin address of GOT table.\n\nWell... then do I have to modify the linker...? Because the begin address of GOT table can't be decided until link time..\n\nSo my questions are:\n\n",
  "votes": "2",
  "answers": 1,
  "views": "723",
  "tags": [
    "disassembly",
    "assembly",
    "reassembly",
    "dynamic-linking"
  ],
  "user": "lllllllllllll",
  "time": "Jul 1, 2014 at 18:57",
  "comments": [
    {
      "user": "drum",
      "text": "Are you trying to do ROP?",
      "time": null
    },
    {
      "user": "lllllllllllll",
      "text": "@drum , No, I am not. I am trapped in how to re-use this asm code..",
      "time": null
    },
    {
      "user": "nrz",
      "text": "Or maybe can you write a postprocessor that modifies the binary after linking, with disassembly and binary as input? The postprocessor could alternatively modify the assembly code or create 2nd/3rd generation assembly code to be assembled again, using binary and disassembly as source. Probably it could be done by modifying (or rewriting) the code of my answer to your SO question: stackoverflow.com/questions/20506524/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you're using GAS or a compatible assembler, you can use special modifiers to have it emit relocation info for GOT-based addressing.\n\nHere's the gcc -S output of a typical prolog of a function compiled with -fPIC:\n\n```\ncall    __i686.get_pc_thunk.bx\naddl    $_GLOBAL_OFFSET_TABLE_, %ebx\nleal    .LC0@GOTOFF(%ebx), %eax\nmovl    %eax, (%esp)\ncall    puts@PLT\n\n```\nAs you can see, you can replace the %ebx addendum with $_GLOBAL_OFFSET_TABLE_, and other GOT-relative offsets with symbol@GOTOFF. In some cases you may also need @GOTPLT or @GOTPCREL modifiers. See here for more info (mostly x64-specific, but still useful).\n\nIf your file is relocatable or a shared object, disassembling it with -dr (so you see relocation info) can be useful to see places where you may need to add back the symbol modifiers.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Jul 2, 2014 at 10:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "lllllllllllll",
          "text": "It works!! This is very helpful, thank you a lot Igor!",
          "time": null
        },
        {
          "user": "lllllllllllll",
          "text": "For one thing I think it is necessary to point out for future readers is that \" I wonder whether all incarnations of gcc compile GLOBAL_OFFSET_TABLE to be the same as the start-address of .got.plt\"  from that article",
          "time": null
        }
      ]
    }
  ]
}