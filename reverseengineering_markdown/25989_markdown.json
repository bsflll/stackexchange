{
  "title": "ghidra scripting: how to distinguish between function and global symbol",
  "link": "https://reverseengineering.stackexchange.com/questions/25989/ghidra-scripting-how-to-distinguish-between-function-and-global-symbol",
  "content": "I have a following program:\n\n```\nint b2[4];\nint foo()\n{\n  static int b2[10];\n  b2[5] = 4;\n}\nint main()\n{\n  static int b2[10];\n  int b[5];\n  b[0] = 1;\n  b2[9] = 4;\n  int *ptr = b;\n  int c = *(ptr + 10);\n  foo();\n  return 0;\n}\n\n```\nI want to distinguish between different b2 arrays defined in functions foo, main and globally. I can collect all the symbols using:\n\n```\nsymbols = set(currentProgram.getSymbolTable().getAllSymbols(True))\n    for s in symbols:\n        print(s.getName())\n\n```\nBut, there is no way to distinguish between static (in functional namespace) and global symbols.\n\nGhidra GUI shows me something like:\nb2.1913 <- main , b2.1917 <- foo, b2 <- global.\n\nThus I can easily distinguish between these symbols using GUI.\n\nThanks in advanced for your help.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ghidra"
  ],
  "user": "R4444",
  "time": "Sep 27, 2020 at 19:34",
  "comments": [],
  "answers_data": [
    {
      "content": "The Symbol object has a couple different ways you could go about this. Here are a few options.\n\n```\nsymbols = set(currentProgram.getSymbolTable().getAllSymbols(True))\nfor s in symbols:\n    if s.getName() == \"b2\":\n        print(s.getName(), s.getName(True), s.getParentSymbol().getName(), s.getParentNamespace())\n\n\n```\nOutput:\n\n```\nGetSymbolType.py> Running...\n(u'b2', u'b2', u'global', Global)\n(u'b2', u'foo()::b2', u'foo()', foo())\n(u'b2', u'main::b2', u'main', main)\n\n```\nExplanation:\n\nMore details in the API docs.\n\n",
      "votes": "3",
      "user": "hairlessbear",
      "time": "May 22, 2023 at 2:30",
      "is_accepted": true,
      "comments": []
    }
  ]
}