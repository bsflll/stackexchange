{
  "title": "Forcing a legacy Windows application to use an older version of ntdll.dll",
  "link": "https://reverseengineering.stackexchange.com/questions/31267/forcing-a-legacy-windows-application-to-use-an-older-version-of-ntdll-dll",
  "content": "There is this old Windows application I've been using for more than a decade now: DesktopEarth. It got its last update in 2015 and the author's website is offline now, but it's been running fine on Windows 10. Recently, I upgraded to Windows 11 and now it won't start anymore, it crashes instantly. Compatibility mode doesn't fix the issue. I really like this application, it shows you the face of the earth with the correct day/night cycle, seasons, clouds, city lights at night, etc. - I don't feel at home on my Desktop without this background. And I can't find an adequate replacement for this app. So I want to try and fix it.\n\nHere's what the Windows application log is saying (sorry, couldn't figure out how to change the language, it's in German):\n\n```\nName der fehlerhaften Anwendung: DesktopEarth.exe, Version: 3.2.42.0, Zeitstempel: 0x553f6b3b\nName des fehlerhaften Moduls: ntdll.dll, Version: 10.0.22621.755, Zeitstempel: 0x42b70e75\nAusnahmecode: 0xc0000005\nFehleroffset: 0x000653f5\nID des fehlerhaften Prozesses: 0x0x435C\nStartzeit der fehlerhaften Anwendung: 0x0x1D90E747D1A2A1D\nPfad der fehlerhaften Anwendung: C:\\Program Files (x86)\\DesktopEarth\\DesktopEarth.exe\nPfad des fehlerhaften Moduls: C:\\Windows\\SYSTEM32  \ntdll.dll\nBerichtskennung: 1b12aa9f-2912-4517-8b57-dfa6f8eeb950\nVollstÃ¤ndiger Name des fehlerhaften Pakets: \nAnwendungs-ID, die relativ zum fehlerhaften Paket ist: \n\n```\nLooks like it crashes in ntdll.dll... maybe if I revert that to an older version, it will work again? So I downloaded an older version of ntdll.dll from the internet (hopefully not some randomware), placed it next to DesktopEarth.exe and... same error. It's still using C:\\Windows\\SYSTEM32  \ntdll.dll. So I added C:\\Program Files (x86)\\DesktopEarth to my PATH, hoping that this would make DesktopEarth.exe prefer my custom ntdll.dll but still nothing. Is the path to the dll hardcoded in the exe? I was kinda getting my hopes up, because someone on the internet had a similar issue and placing an old version of ntdll.dll seemed to have helped. But I don't want to replace C:\\Windows\\SYSTEM32  \ntdll.dll, it will probably break some other stuff on my system...\n\nHow can I make DesktopEarth.exe use my custom ntdll.dll? I heard there's a thing called dll hijacking that may help here? Does anyone know how to do that?\n\n",
  "votes": "4",
  "answers": 2,
  "views": "793",
  "tags": [
    "windows",
    "dll-injection"
  ],
  "user": "klamann",
  "time": "May 6, 2023 at 20:43",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE. 1.) the message suggests ntdll.dll is the culprit, but you don't seem to be aware just how many times this has been wrong in general (further investigation such as with a memory dump will be required) 2.) ntdll.dll is a known DLL, which means the session manager preloads it and keeps it around as a section object unter \\KnownDlls  \ntdll.dll or \\KnownDlls32  \ntdll.dll respectively 3.) in general DLL hijacking is difficult with known DLLs, but with ntdll.dll it may be outright impossible. This DLL gets loaded into a process extremely early.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "... and last but not least, this isn't really on-topic, although I'll concede that you'd be likely to find plenty of people around here who are equipped to help out.",
      "time": null
    },
    {
      "user": "llm",
      "text": "tried to ask the author? maybe he releases the code or creates fresh build for you?",
      "time": null
    },
    {
      "user": "Remko",
      "text": "Could be a DEP Violation (cannot tell without parameter 0 of the crash), did you try disable DEP for that process? (In PowerShell: Set-ProcessMitigation DesktopEarth.exe -Disable DEP",
      "time": null
    },
    {
      "user": "Remko",
      "text": "@klamann 0xC0000022 means STATUS_ACCESS_DENIED -> did you run PowerShell as administrator (elevate it)? Once this setting is stored, try to launch the program as you normally would...",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "there is no need for this. A cursory analysis showed that this screensaver was written in MFC and OpenGL.\nAnd he takes the wallpaper from the NASA Blue Marble project.\n\nSo you can simply grab wallpapers and videos from the NASA media library\n\n\n\n",
      "votes": "5",
      "user": "0xC0000022L",
      "time": "May 1, 2023 at 20:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "klamann",
          "text": "what made DesktopEarth special is that it gave you a real-time view of the current day/night cycle, cloud cover and snow on the ground according to the current season. Also, it's not a screensaver, it updates your desktop background every few minutes. That's not what a static image can provide, but thanks for the link to the source images.",
          "time": null
        },
        {
          "user": "klamann",
          "text": "no need to be condescending like this. You can download the application from archive.org and install it (in a VM) on Windows 10 or lower and see for yourself. There is a separate alpha layer for clouds that is updated from a webservice. Yes, the ground textures are static (including the snow), and they are stretched over a sphere, but the sphere rotates in sync with earth and shows the correct day/night cycle. There's some more post processing going on to make it seem like the sphere has an atmosphere and so on. If it were that trivial to re-implement, I might give it a try myself.",
          "time": null
        }
      ]
    },
    {
      "content": "A tool like Enigma Virtual Box might help, since it can be used to pack DLL-dependencies into a single executable. I would use it on a system where everything works to pack the system's DLLs (including at least ntdll.dll) into a new DesktopEarth.exe, so they are virtually in the same directory (and DLLs are first loaded from the local directory).\n\nIf ntdll.dll is only loaded from DesktopEarth.exe and not indirectly, it would be possible to simply put a working version of the DLL into the directory of the executable. (But I highly doubt that's the case.)\n\nIt depends on the dependency tree and which of Win11's DLLs are incompatible with Win10's DLLs, on how many files you'd have to include. It would be trial and error.\n\nDependencies can for example be checked with shell scripts like\n\n```\nobjdump -p DesktopEarth.exe | grep \"DLL Name\"  \nfor FILE in *.dll; do objdump -p $FILE | grep \"DLL Name\"; done\n\n```\nor by using a PE viewer, such as PEExplorerV2.\nGood luck.\n\n",
      "votes": "4",
      "user": "xamid",
      "time": "Apr 28, 2023 at 13:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}