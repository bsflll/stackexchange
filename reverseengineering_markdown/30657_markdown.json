{
  "title": "How to debug an obfuscated self hashing program?",
  "link": "https://reverseengineering.stackexchange.com/questions/30657/how-to-debug-an-obfuscated-self-hashing-program",
  "content": "I need to understand what the following obfuscated application does:\n\n```\ninterpreter.py:\n    string = \"lambda x : obfuscated_code_to_interpret_variable_x\"\n    interpreter = eval(string)\n\n    instructions = read_instructions(argv[1])\n    interpreter(instructions)\n\ninstructions.txt:\n    04GFUHSDSLGHLDFIHGLDSHLFHGLSDGHFLFSHGLIFSHLGFLGFIIGFL...\n\n```\nYou run the application typing the command python3 interpreter.py instructions.txt\n\ninstructions.txt contains machine code (of some hypothetical machine). interpreter.py contains an interpreter that runs the machine code.\n\nI want to modify the interpreter by adding print(variable) statements inside the string,\nto see what the code does.\n\nThe problem is that somewhere in the instructions.txt file, a file interpreter.py is read as a string, hashed, and checked that the hash equals to a predefined value. Thus, any modification to the interpreter variable will invalidate the hash.\n\nI also have no idea what the numbers inside the instructions.txt file mean, because only the obfuscated interpreter understands the meaning of those numbers. So I can't remove the hash check from the instructions.txt file, because I don't know where it is.\n\nAny ideas, how to deobfuscate such application?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "109",
  "tags": [
    "obfuscation",
    "deobfuscation",
    "hash-functions"
  ],
  "user": "mercury0114",
  "time": "Jul 19, 2022 at 9:35",
  "comments": [
    {
      "user": "w s",
      "text": "Can you elaborate on how the obfuscated code obfuscated_code_to_interpret_variable_x looks like?",
      "time": null
    },
    {
      "user": "mercury0114",
      "text": "e.g. def x(y): return z(y+1) def z(x): return x if x ^ 234 < 10 else 0 ...  and so on, like 200 functions, with if/else statements, maths expressions, such as (x || y && z ^ 2), all of that to construct one big function F, which is then evaluated with an argument x, so string = \"lambda x : F(x)\"",
      "time": null
    },
    {
      "user": "mercury0114",
      "text": "@ws basically, the whole interpreter processing is hidden behind F(x). I would add print statements to print the variables of the inner functions of the implementation of F(x), if I see that some variable is a constant, then I can delete the code computing that variable to simplify the function, and keep iterating. This technique has worked for me before.  But now adding print statements changes the value of string, and thus the hash(string).",
      "time": null
    },
    {
      "user": "w s",
      "text": "Are you sure that the integrity checking relies on reading the actual file ? Do you see something like such a file reading and hashing inside the obfuscated code?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If your suggestion that \"the obfuscated code actually reads the file and checks the kind of checksum of it\" is correct you can do the following (or at least that's the order of the actions I'd perform):\n\nGood luck.\n\n",
      "votes": "2",
      "user": "w s",
      "time": "Jul 19, 2022 at 12:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}