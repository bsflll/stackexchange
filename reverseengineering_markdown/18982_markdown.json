{
  "title": "Generate this assembly from a c program",
  "link": "https://reverseengineering.stackexchange.com/questions/18982/generate-this-assembly-from-a-c-program",
  "content": "I want to generate this assembly code:\n\n```\nmov ecx, <absolute address of func1>\ncall ecx\n\n```\nHow can I write and compile C code which generates this code?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "92",
  "tags": [
    "assembly",
    "c"
  ],
  "user": "Bob5421",
  "time": "Aug 8, 2018 at 10:51",
  "comments": [
    {
      "user": "julian",
      "text": "Is this about reverse engineering or about software engineering?",
      "time": null
    },
    {
      "user": "Bob5421",
      "text": "In fact i have reversed a program which contains that and i am wondering if it is possible to do that in c",
      "time": null
    },
    {
      "user": "user202729",
      "text": "(1) This is not clear enough. It depends a lot on the compiler, optimization level, and whether you're willing to use __asm__. (2) It seems that you're having an XY problem. What are you trying to do?",
      "time": null
    },
    {
      "user": "perror",
      "text": "You want specifically ecx or any register that may do the job?",
      "time": null
    },
    {
      "user": "Bob5421",
      "text": "Sp√©cificaly ecx",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Usually the compiler will generate the call using the address of the function directly. But since in your case it uses a register, it reminds me of C++ vtables. \nSo in C, how about calling a pointer to a function? Something like this:\n\n```\nvoid (*fptr)(void);\nvoid foo(void) {\n   /* some code */\n}\nfptr = foo;\n(*fptr)();   /* <-- your indirect call generated here */\n\n```\n",
      "votes": "2",
      "user": "memo",
      "time": "Aug 8, 2018 at 8:56",
      "is_accepted": true,
      "comments": []
    }
  ]
}