{
  "title": "What is happening with this *param_1?",
  "link": "https://reverseengineering.stackexchange.com/questions/29552/what-is-happening-with-this-param-1",
  "content": "I am a bit of a starter, so bear with me as I can't find the answer through Google (a common thing in Ghidra work I noticed so far).\n\nI have a function that seems to read like it is a Constructor.\nBut I am having trouble what it is doing, mainly because I think I don't understand the C language that well.\n\nThe code I am confused about is this:\n\nThe code as C:\n\n\n\nThe code as ASM:\n\n\n\nSorry for using screenshots, I couldn't get the ASM to reasonably copy and paste into here.\n\n*param_1, is set to a specific address. What this * in front of the variable means, I can't really find besides people saying \"You shouldn't do that in C code!\"\n\nWhat it then starts doing is nulling out some variables in an array or struct that param_1 apparently is now (going by the ASM, param_1 == ECX and so probably _this_?) the rest seems irrelevant for now.\n\nWhat is at 0x497e68? It is an address, that then points towards another bit of code at 0x438170. And while this 0x497e68 address is references 4 times, all of them do so in a similar manner, and thus I never see a direct \"CALL\" to this indirect method. The method itself is simply calling _free on ECX. It's not special.\n\nSo what is going on here? Is there a reasonable explanation as to why this is happening? And what should I actually be reading here?\nAnd if so, is there then a way I can convince Ghidra to present this in a more sensible way?\n\n",
  "votes": "1",
  "answers": 0,
  "views": "851",
  "tags": [
    "x86",
    "c",
    "ghidra",
    "local-variables"
  ],
  "user": "Smileynator",
  "time": "Nov 14, 2021 at 8:06",
  "comments": [
    {
      "user": "blabb",
      "text": "it is like int bar = 5: . int* myintarr [4]={ &bar,null,null,null};",
      "time": null
    },
    {
      "user": "Ian Cook",
      "text": "You are probably looking at code that was originally C++ rather than C. 0x497e68 is the address of the virtual function table or vtable. This is an array of function pointers. *param_1 is the same as param_1[0] and is set of the address of the vtable.",
      "time": null
    }
  ],
  "answers_data": []
}