{
  "title": "Determining if a variable is local or an argument passed to a function",
  "link": "https://reverseengineering.stackexchange.com/questions/1722/determining-if-a-variable-is-local-or-an-argument-passed-to-a-function",
  "content": "How can you determine if a variable is a local variable of the function or an argument passed to the function?\n\n",
  "votes": "6",
  "answers": 3,
  "views": "2k",
  "tags": [
    "disassembly",
    "c",
    "c++"
  ],
  "user": "Jannu",
  "time": "Apr 11, 2013 at 15:48",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Needs more info: what are you analyzing, what do you mean by \"variable\" and what info do you have about it?",
      "time": null
    },
    {
      "user": "Denis Laskov",
      "text": "Also it would be useful to know, what tool You use to RE, to point You to correct output structure\\display options.",
      "time": null
    },
    {
      "user": "Jannu",
      "text": "I'm not using a tool, it's an assignment for class. I have a block of ASM and I am supposed to determine (If I understand the problem correctly) the calling convention and if variables (DWORDS in this case) are either local variables of the function or arguments passed into the function.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Not only does it depend on the platform but different functions have different calling conventions. The calling convention basically tells you how you know where the arguments are. It says nothing about the local function stack frame layout. \n\nIt's also extremely important to understand that when a function or method can be proven by the compiler or linker to not be accessed by code outside of what the compiler can see in the current translation unit or the linker in the current binary they are free to do whatever they want. This includes passing arguments in manners which do not correspond the the ABI. This is an even larger problem with the rising popularity of link time code generation.\n\nThe ABI is basically the interface which all binaries on platform promises to adhere to so that there can be a guarantee that binaries written in different languages can interact. However if your binary does not export a function it does not usually need to adhere to the ABI.\n\nVariables can really only be stored in three locations\n\nIn rough order of likelihood to run into.\n\nMore than 4 arguments and they get pushed on the stack.\n\n",
      "votes": "17",
      "user": "Lieven Keersmaekers",
      "time": "Apr 12, 2013 at 5:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Remko",
          "text": "+1 for a detailed answer! One remark: the described fastcall is the way ms implements it. Borland/Embarcadero implement fastcall differently: first 3 arguments are passed in EAX, EDX and ECX, remaining arguments go on stack (left to right)",
          "time": null
        }
      ]
    },
    {
      "content": "While this answer is certainly not true in all situations, the answer for which your teacher is probably looking:\n\n",
      "votes": "5",
      "user": "Jason Geffner",
      "time": "Apr 12, 2013 at 0:06",
      "is_accepted": false,
      "comments": [
        {
          "user": "Dougall",
          "text": "The simplest counterexample being anything compiled with \"gcc -fomit-frame-pointer\"",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Yes, arguments can be passed by register, or be referenced relative to ESP, or can be accessed via several other means. The \"answer\" above is the most common case and I assume is what Jannu's teacher was looking for.",
          "time": null
        }
      ]
    },
    {
      "content": "I'm not sure what you mean by variable, I'll just assume it's the value of a register or a stack address at some point, during the execution of the function body.\n\nIf it was passed by argument, its value was defined by the caller via stack or register (check here for the different calling conventions). If not, then it was defined by the function body itself.\n\n",
      "votes": "2",
      "user": "Ange",
      "time": "Apr 11, 2013 at 16:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}