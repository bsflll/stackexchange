{
  "title": "Hiding call to ptrace [duplicate]",
  "link": "https://reverseengineering.stackexchange.com/questions/11293/hiding-call-to-ptrace",
  "content": "I am trying to detect whether my executable is running in a debugger. Here is a solution using ptrace.\nMy problem is that even if my executable is stripped (strip a.out) I am able to find with gdb the following code snippet:\n\n```\n0x00000000004007e9: mov    $0x0,%ecx\n0x00000000004007ee: mov    $0x1,%edx\n0x00000000004007f3: mov    $0x0,%esi\n0x00000000004007f8: mov    $0x0,%edi\n0x00000000004007fd: mov    $0x0,%eax\n0x0000000000400802: callq  0x4006d0 <ptrace@plt>\n0x0000000000400807: cmp    $0xffffffffffffffff,%rax\n\n```\nI simply run (gdb)info files, and disassembled the memory location belonging to .text.\nIs there a way to get rid from <ptrace@plt>, or is there a better way to detect the debugger beside the methods based on software breakpoints or execution time measuring?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "1k",
  "tags": [
    "gdb",
    "anti-debugging"
  ],
  "user": "robert",
  "time": "9 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "You have 2 simple options:\n\nEDIT:\n\nThe number of other, more complicated options, is endless.\nFor example you can call this ptrace by function pointer, which is calculated dynamically. There are a lot of ways to obfuscate a function pointer value.\n\nPlease note that using obfuscation of any kind is \"security through obscurity\" and not too much effective without other, more effective measures such as encryption.\n\nGood luck. \n\n",
      "votes": "1",
      "user": "w s",
      "time": "Nov 10, 2015 at 14:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}