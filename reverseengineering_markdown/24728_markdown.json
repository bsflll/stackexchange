{
  "title": "Why does this x64 stack have other bytes and seems to be in reverse order?",
  "link": "https://reverseengineering.stackexchange.com/questions/24728/why-does-this-x64-stack-have-other-bytes-and-seems-to-be-in-reverse-order",
  "content": "I wrote the following small C program and you can also see the stack in the screenshot. My question is twofold:\n\n",
  "votes": "1",
  "answers": 1,
  "views": "120",
  "tags": [
    "c",
    "gdb",
    "stack"
  ],
  "user": "the_endian",
  "time": "Apr 17, 2020 at 7:27",
  "comments": [],
  "answers_data": [
    {
      "content": "First of all, in x64 Linux code, the stack should be aligned to 16 bytes before any function call, so you can expect that rsp will be aligned as such in compiler generated code.\n\nNow, it's just a compiler's decision how many bytes it will use for item allocation. In GCC, for instance, you can set the alignment of stack items to any power n of 2, using -mpreferred-stack-boundary=n option, according to accepted answer.\n\nAgain, it's a compiler's decision how it will organise local variables on the stack as long as it produces code compliant with C standard. I agree, that the natural way is to put the arguments in order of declarations on the stack, but as you see, you cannot assume this in general. If you want to force this order, you can put them in a struct, according to this answer.\n\n",
      "votes": "2",
      "user": "bart1e",
      "time": "Apr 17, 2020 at 14:34",
      "is_accepted": true,
      "comments": [
        {
          "user": "the_endian",
          "text": "That makes sense. I actually had a thought after I wrote this that likely the compiler has just reserved all of the stack space ahead of time using for example sub esp, 56 , and then moved the data in there rather than doing push instructions. Still a bit odd that it wouldnt follow normal order, but I forgot that it is welcome to do that.",
          "time": null
        }
      ]
    }
  ]
}