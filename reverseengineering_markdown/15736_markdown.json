{
  "title": "Reverse Engineering visual basics programs",
  "link": "https://reverseengineering.stackexchange.com/questions/15736/reverse-engineering-visual-basics-programs",
  "content": "I am a beginner and I am doing a few crackme stuff, I'm pretty okay when it comes to system calls such as user32.\n\nBut there is one crackme which uses msvbvm50.dll (Visual Basic)\nand it has weird calls, I just cannot find information about it.\nI tried API monitoring, but I cannot locate the field which is taking the input from the user.\n\nI tried to disassemble using a VB decompiler, I see similar assembly to which I saw in Immunity debugger.\n\nIn this crackme challenge, I need to find the function which is taking my input further in the memory.\n\nHow can I do that? Any ideas how I should proceed?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "4k",
  "tags": [
    "disassembly",
    "dll",
    "visual-basic"
  ],
  "user": "Atply",
  "time": "Jul 2, 2017 at 0:36",
  "comments": [
    {
      "user": "blabb",
      "text": "vb has its own set of apis look for __vbastrcmp , rtcInputox kinda functions",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Use a dedicated VB decompiler - you can find links to few of them on StackOverflow. \n\nVB programs has a special format that is quite easy to understand - http://reteam.org/papers/e46.pdf\n\n",
      "votes": "2",
      "user": "Paweł Łukasik",
      "time": "Jul 1, 2017 at 15:16",
      "is_accepted": false,
      "comments": [
        {
          "user": "Atply",
          "text": "Thanks a alot. Just one query here.  even immunity debugger can reverse VB, how is this gonna be better ?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "hard to tell as I don't know what crackme you want to RE, but specialized VB decompilers can show you the UI and with a simple double click navigate to the code that handles the button or the input",
          "time": null
        },
        {
          "user": "Atply",
          "text": "It's from a URL rogerfm.net/challenge/crackme.  I've cracked the first two. Actually also the third one.  So the challenge is to find the serial number , which when entered gives the password , but I got the password by changing the program flow . I still couldn't find the serial key.",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "@Atply I think that blabb already showed how to approch those apps",
          "time": null
        },
        {
          "user": "Atply",
          "text": "Thanks a lot for your assistance Pawel Lukasik . Really appreciate it.",
          "time": null
        }
      ]
    },
    {
      "content": "As i commmented vb has its own set of functions\nthe fuction you have to look for in the 3rd crackme are\nrtcMidCharVar()\nvbastrvarval() ,\nrtcAnsiValueBstr()\n_vbavarmul()    \n\nthe algo loops over the name characters\nadds a constant to each\nmultiplies the result with another variable\nand adds up all of them that is your serial\nif you give the right serial you get a msgbox with password axxxxxxo\n\na simple keygen in powershell  can look like \n\n```\n $b =0;$a = SOMECONSTANT;@('d','u','g','g') | % { $c= (([int][char]$_ + SOMEOTHERCONSTANT) * AVARIABLE);($b+=$c) };$b\n\n```\n\n\nedit ,\n\nvb does not use registers mostly   \n\nit uses a VARIANT structure for almost all functions and uses stack       \n\nif you use windbg you can take a look at the structure with    \n\ndt ole32!VARIANT \n\nbasically it is a ten byte long structure consisting of an union   \n\n```\n0:000> dt -v ole32!Variant\nstruct tagVARIANT, 50 elements, 0x10 bytes  \n\n```\nthe first member  vt (SHORT int2b) indicates the variant type\n(find Wtypes.h and look for  \n\n```\nenum VARENUM\n    {\n        VT_EMPTY    = 0,\n        VT_NULL = 1,\n        VT_I2   = 2,\n        VT_I4   = 3,\n\n```\nthe next 3 SHORTS are reserved\nthe value at 0x08 is to deciphered based on the value of vt member\nthe member at 0x0c is pRecInfo\nthe member at 0x10 is tagDec an array  \n\nnow that part is clear the function __vbaVarMul Takes three Arguments of type VARIANT \n\nthe first is the result \nthe second is multiplier \nthe third is multiplicand\n\nhere is a redacted windbg output for char 'd'\n\n```\n0:000> ? poi(@esp)\nEvaluate expression: 1241928 = 0012f348\n0:000> ? poi(@esp+4)\nEvaluate expression: 1241944 = 0012f358\n0:000> ? poi(@esp+8)\nEvaluate expression: 1241880 = 0012f318\n0:000> dt ole32!Variant vt poi(@esp)\n   +0x000 vt : 0  <---- vb NULL / v_EMPTY\n0:000> dt ole32!Variant vt poi(@esp+4)\n   +0x000 vt : 3 <-------vbLong \n0:000> dt ole32!Variant vt poi(@esp+8)\n   +0x000 vt : 2  <-----vbInt\n\n0:000> .enable_long_status 1\n\n0:000> dt ole32!Variant lVal poi(@esp)\n   +0x008 lVal : 0x12f3f0\n0:000> dt ole32!Variant lVal poi(@esp+4)\n   +0x008 lVal : 0xxx\n0:000> dt ole32!Variant lVal poi(@esp+8)\n   +0x008 lVal : 0xxxx\n0:000> ? 'd' + xxx\nEvaluate expression: xxxx = 00000xxx\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Jul 2, 2017 at 13:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "Atply",
          "text": "Wow. That's awesome. I remember seeing a function similar to this. Let see if I can remember it right as I don't have a pc next to me.   So there was a loop and there were two exit points. One was the overflow which was handled by the DLL itself. And the other was a jz after a test instructions. The place I was stuck was because a function called vbavarfornext  was changing the vales or eax, ebx and edx registers. And because of which this jz jump was being taken..  is there any document which tells me the details of which registers will be modified?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "edited my answer to add some infor about vb Arguments take a look",
          "time": null
        }
      ]
    }
  ]
}