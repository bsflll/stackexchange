{
  "title": "Execution failure of shellcode in stack without DEP",
  "link": "https://reverseengineering.stackexchange.com/questions/9397/execution-failure-of-shellcode-in-stack-without-dep",
  "content": "Here is the simplest example to show my problem. Everything is in WinXp sp3 with DEP disabled.\n\n```\nchar f() {\n    // shellcode starting with some NOPs,\n    char shellcode[400]= {\n            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, \n            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, \n            0x66, ... some basic shellcode here ...   0x30. \n            0xCC\n    };\n\n    // Overwriting Return address in stack to return to NOPs in shellcode above\n    b[404]=0xf0;\n    b[405]=0xfb;\n    b[406]=0x12;\n    b[407]=0x00;\n}\n\n```\nThis ended with failure:\n\n```\n(920.e7c): Illegal instruction - code c000001d (!!! second chance !!!)\neax=7c801d7b ebx=7c80262c ecx=7c801bfa edx=00060002 esi=00000000 edi=7c802654\neip=0012fc15 esp=0012ff08 ebp=7e410000 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\n0012fc15 d9907ca5e490    fst     dword ptr [eax-6F1B5A84h] ds:0023:0d64c2f7=????????\n\n```\nBut if I execute the shellcode directly, it works:\n\n```\nchar f() {\n    // shellcode starting with some NOPs,\n    char shellcode[400]= {\n            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,  \n            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,\n            0x66, ... some basic shellcode here ...   0x30. \n            0xCC\n    };\n\n    void *exec = shellcode;\n\n    ((void(*)())exec)();\n}\n\n```\nThis will work fine.\n\nI did trace the execution in the above two cases. And in both cases, EIP did successfully landed on the NOPs area and continue execution. But I don't know why the first case failed.\n\nOne of guess is that in the first case, when f() returns to 0x0012fbf0, the shellcode in the area outside of the stack frame(ie. at that point, the ESP is below the SHELLCODE area) .\n\nAnyone can give an idea why the first case failed?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "393",
  "tags": [
    "exploit"
  ],
  "user": "user15580",
  "time": "Jul 19, 2015 at 1:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Your \"ESP is below the SHELLCODE\" probably should have been \"ESP is above the SHELLCODE\" since, in x86, the stack grows down.\n\nAnyway, your shell code being in the area \"just beyond\" the stack pointer might be your problem. Whenever you call a function from your shell code, that function will allocate some space on the stack. When that function call another one, more space on the stack. The stuff that those functions put on the stack will start overwriting your shell code at one point or another. If they overwrite the name of the executable you're trying to start, your shellcode will try to start a  nonsense name, which will fail. If they overwrite the end of your shell code, then return to your shell code, something like you had in your first example will happen.\n\nYou might want to put a sub esp, 0x200 at the start of your shell code, to grow the allocated part of the stack beyond your shell code again. (Of course the number you need to subtract depends on the size of your shellcode). Or, make your array much larger, and start with a lot more 0x90 bytes, to increase the chance that your stack won't grow into the \"useful\" parts of your shellcode.\n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Jul 19, 2015 at 7:45",
      "is_accepted": false,
      "comments": []
    }
  ]
}