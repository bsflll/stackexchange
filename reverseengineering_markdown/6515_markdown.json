{
  "title": "Unpacking a program which seems to be not packed?",
  "link": "https://reverseengineering.stackexchange.com/questions/6515/unpacking-a-program-which-seems-to-be-not-packed",
  "content": "I have downloaded a sample of a malware to analyze it. First, I opened it with PEiD to look if it is packed. \nPEiD gives me the following information:\n\n```\n   Microsoft Visual Basic 5.0/6.0\n\n```\nSo, I assumed that it is not packed. \nWhen I opened it using ollydbg shows me the following lines:\n\n```\n   PUSH malware.00401F8C\n   CALL <JMP.&MSVBVM60.#100>\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   INC EAX\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   ADD BYTE PTR DS:[EAX],AL\n   DB 00\n   DB 1D\n   ....\n   ....\n\n```\nSo, normally it should start with a function prologue(the typical beginning line with PUSH EBP and so on) but although it is not packed, obviously the program tries to make the analyzing process harder (for me). \nWhen I step to the second line( CALL <...>), then the process begins to run and does not stop. In my previous cases, I have only unpacked malware samples that were packed with UPX. So, a piece of code like that above is completely new for me. So:\n\nHow should I solve this? Can someone give me an advice how I can handle that?\n\nbest regards, \n\n",
  "votes": "2",
  "answers": 1,
  "views": "5k",
  "tags": [
    "unpacking",
    "visual-basic"
  ],
  "user": "user3097712",
  "time": "Oct 21, 2014 at 21:47",
  "comments": [],
  "answers_data": [
    {
      "content": "Your program is not packed, but rather compiled as Visual Basic P-code or Visual Basic native code.\n\nIf it's VB native code, you can use your favorite debugger (OllyDbg, IDA, etc.) to debug it, and IDA to disassemble it.\n\nIf it's VB P-code, you can use VB Decompiler Pro to disassemble/decompile it:\n\n\n... and WKTVBDE to debug it:\n\n\nNote that VB Decompiler Pro is useful even for statically analyzing VB native code.\n\n",
      "votes": "9",
      "user": "Jason Geffner",
      "time": "Oct 22, 2014 at 0:09",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "Not necessarily P-Code. Native VB has the same kind of entrypoint.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "Thanks, @IgorSkochinsky, you're right. I've updated my answer above. I guess it shows how long ago I had to deal with VB targets :)",
          "time": null
        }
      ]
    }
  ]
}