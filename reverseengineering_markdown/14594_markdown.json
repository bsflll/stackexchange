{
  "title": "Modifying Windows DLLs",
  "link": "https://reverseengineering.stackexchange.com/questions/14594/modifying-windows-dlls",
  "content": "I find myself playing in strange territory lately, venturing far outside my comfort zone to test some theories. At present I want to return True every time a specific program calls IsDebuggerPresent, without actually debugging the program.\n\nSince I'm not a software developer, I'd really rather avoid writing code to do API hooking. My next thought was to use a modified kernel32.dll in the same directory as the program, counting on \"DLL Load Order Hijacking\". So... I modified a copy of the dll, essentially replacing the export for IsDebuggerPresent with mov eax, 1\n\nIf I open the DLL in IDA and examine the export, it shows exactly the code I patched in, but if I run the executable, when it makes the call to IsDebuggerPresent the same address I modified instead shows a JMP to the proper IsDebuggerPresent instructions.\n\nIs what I'm trying to do even feasible, or do I have to do API hooking to make it work? I'm Really looking for a simple POC, so again, I'd prefer not to have to figure out a metric buttload of C++ just to test a theory.\n\n",
  "votes": "3",
  "answers": 3,
  "views": "2k",
  "tags": [
    "c++",
    "dll",
    "function-hooking"
  ],
  "user": "BjÃ¸rn Ulfson",
  "time": "Feb 8, 2017 at 11:16",
  "comments": [],
  "answers_data": [
    {
      "content": "Windows has a concept of trusted libraries to hamper attacks like these:\n\nDynamic-Link Library Search Order\n\nCiting from the search order:\n\nSo for your case, I would suggest giving API hooking a try ;) It really isn't too hard (Windows to the rescue for all your shady needs).\n\nedit:\n\nYou may go ahead and use Windows Hooking API\n\nHowever, it is quiet straight forward to do yourself:\n\nside node: you may need to elevate the permissions of your process first (OpenProcessToken, ...).\n\nedit 2:\n\nI found some of my old code. You can find it here. Please note this code was written for a research project to avoid Sandbox detection and that I was a student at the time (i.e. the code may not be high quallity).\n\n",
      "votes": "5",
      "user": "Nordwald",
      "time": "Feb 8, 2017 at 8:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "BjÃ¸rn Ulfson",
          "text": "Fair enough.  Any chance you could point me in the direction of a decent tutorial?  When I say that I don't know C++, please understand that on the few occasions I've written anything in C++, I have to disassemble them to understand what they are doing, and if they'll do what I want.  High-level languages have never really made any sense to me.",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "See my second edit ;) Its clean C code.",
          "time": null
        }
      ]
    },
    {
      "content": "As mentioned above, just placing the DLL in the same directory won't be enough for certain windows DLLs, as windows searches for those in specific paths as documented about Dynamic-Link Library Search Order.\n\nHowever, there's some potential trickery with the knownDlls list you can manipulate to succeed in your DLL replacing attempts:\n\nAlthough this might not be advised as there's a risk of a malicious entity exploiting those changes to hijack DLLs on your machine, it's definitely an easy way to test your endeavors without writing any API hooking code, as requested :)\n\nAnother approach would be searching for some pre-made API hooking utilities (there, are, plenty) \n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Feb 8, 2017 at 11:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "peter ferrie",
          "text": "yes, but (1) and (2) are ugly hacks that have system-wide implications, like visiting someone's house and changing their carpet.  The changes should be limited to the current process.",
          "time": null
        },
        {
          "user": "NirIzr",
          "text": "Yes. I mentioned that in my original answer. These approaches answer OPs original request: a easy way that will not require hooking, and I would think is perfectly fine when done in a VM or as part of a one time limited test (as is implied by OPs POC remark).",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "Some of those DLLs seem to be hardcoded these days (I suppose into the smss binary or so). Point being that the registry isn't the sole source for the setting of what DLL is a known DLL.",
          "time": null
        }
      ]
    },
    {
      "content": "You could attempt the indirect route instead. IsDebuggerPresent() merely checks the respective field in the Process Environment Block (PEB) to find out whether a process is being debugged.\n\nSo instead of modifying a single function from a particular DLL to return the result, you could manipulate the source used by said function to retrieve its result (yes, there are other functions that consult this very data field).\n\nLooking at a recent version of kernelbase.dll (10.0.19041.804) we find via IDA:\n\n```\nIsDebuggerPresent proc near\n                mov     rax, gs:60h\n                movzx   eax, byte ptr [rax+2]\n                retn\nIsDebuggerPresent endp\n\n```\n... which in its annotated form would be something like:\n\n```\nIsDebuggerPresent proc near\n                mov     rax, gs:60h     ; address to PEB\n                movzx   eax, [rax+PEB.BeingDebugged]\n                retn\nIsDebuggerPresent endp\n\n```\n... and as pseudo-code:\n\n```\nBOOL __stdcall IsDebuggerPresent()\n{\n  return NtCurrentPeb()->BeingDebugged;\n}\n\n```\nSimply modifying the \"remote\" PEB would be one way of achieving what you want.\n\nIn order to retrieve the \"remote\" PEB you can use\n\nPROCESS_BASIC_INFORMATION::PebBaseAddress (enum member ProcessBasicInformation) via NtQueryInformationProcess() whose declarations you should also be able to glean from the winternl.h header which is part of modern Windows SDKs. Then the usual WriteProcessMemory() method should work to set this value in the remote process.\n\nYou could also try a typical DLL placement attack on some dependency of your target program (e.g. version.dll which isn't a known DLL) and have that loaded DLL do the manipulation of the PEB for you from within the remote process.\n\nAnd always keep in mind that in order to do effective reverse engineering, you should first have a firm grasp of forward engineering ðŸ˜‰\n\n",
      "votes": "0",
      "user": "0xC0000022L",
      "time": "Jun 13, 2022 at 7:42",
      "is_accepted": false,
      "comments": []
    }
  ]
}