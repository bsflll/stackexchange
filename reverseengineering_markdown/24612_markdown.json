{
  "title": "Ghidra error when edit main signature function",
  "link": "https://reverseengineering.stackexchange.com/questions/24612/ghidra-error-when-edit-main-signature-function",
  "content": "I'm new to ghidra.\nI download the easy_reverse from crackme.one and open the executable file in ghidra.\n\nWhen I'm trying to edit the main function signature I get an error: Can't parse name: argv[].\nI searched for this error but found nothing on Google/GitHub and I run out of ideas what to do next to solve it. I would appreciate any help!\n\nHere is a screenshot (I use mac):\n\n\n",
  "votes": "4",
  "answers": 1,
  "views": "3k",
  "tags": [
    "c",
    "ghidra",
    "functions"
  ],
  "user": "nirgn",
  "time": "Apr 4, 2020 at 17:20",
  "comments": [],
  "answers_data": [
    {
      "content": "I continued to mess with it some more and found a way.\nI correct the signature to have a pointer of argv:\n\n```\nint main(int argc, char **argv)\n\n```\nBut I don't really know why the pointer works and the standard C signature didn't. Hope for someone to clarify this.\n\n",
      "votes": "4",
      "user": "nirgn",
      "time": "Apr 4, 2020 at 17:41",
      "is_accepted": true,
      "comments": [
        {
          "user": "Florian Magin",
          "text": "char **argv and char *argv[] are the same thing, just as a different notation. The answers in stackoverflow.com/questions/14298957/â€¦ explain this fairly well.  Seems like Ghidra simply supports only of those, but will properly decompile accesses to argv as e.g. argv[0] even if the type is char **",
          "time": null
        }
      ]
    }
  ]
}