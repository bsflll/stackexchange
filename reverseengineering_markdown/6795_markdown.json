{
  "title": "Decrypting firmware: Is there a true \"format\" to it, and how does it differ from decryping other files?",
  "link": "https://reverseengineering.stackexchange.com/questions/6795/decrypting-firmware-is-there-a-true-format-to-it-and-how-does-it-differ-from",
  "content": "I have firmware for a system and I'm trying to decrypt some of it just for the sake of seeing what it all does; nothing illegal or anything like that, such as reproducing copies of it decrypted and such.\n\nBut it can seem tough for several reasons:\n\n1.May have no specific format or way to distinguish it from other binary files;\n\n2.May not know how it is encrypted;\n\n3.May not be \"normally\" encrypted and may be specially so.\n\nThe thing is, the file has some unencrypted code, but I'm not 100% sure what kind of opcode bytes it could represent since it\n\nThis is firmware for an all-ARM-powered device, but I'm not publicly saying it's name. Should that mean that the firmware for it will be some variant of ARM ISA/opcodes (because it's machine code for the ARM processor)? If so, where should I begin decrypting and should I continue to determine, if possible for me, what version of ARM, ISA (instruction-set=architecture), etc.?\n\nThe firmware has a magic number right at the beginning of the file (which just says the company's name), but afterwards it has unencrypted bytes, then more magic numbers, then encrypted bytes, then more magic numbers, then more unencrypted bytes, etc., etc. You can tell the encrypted parts apart because each byte has a completely inane ASCII character that no other part of the file has, and they're in followed segments. This says clearly that these are irregular, encrypted ranges of bytes.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "11k",
  "tags": [
    "binary-analysis",
    "firmware",
    "decryption"
  ],
  "user": "stack full of heaps",
  "time": "Dec 9, 2014 at 19:11",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "In general, people post the hardware they're working with, here, this might attract good answers from people who have done a similar thing. Look around, you'll see that many questions even provide links to the downloadable firmware. As it is right now, the only answer you can get is probably \"run binwalk and signsrch on it and see what happens\". If it's ARM, it's likely it runs some kind of linux, which in turn makes it likely that you're dealing with some kind of squashfs.",
      "time": null
    },
    {
      "user": "stack full of heaps",
      "text": "\"If it's ARM, it's likely it runs some kind of linux\" What runs some kind of Linux? The firmware here is firmware to start the rest of the computer up. SquashFS is a filesystem, and how is that supposed to help decrypt the firmware? If anything, decrypting the firmware is what'll allow the rest of the hardware to be reverse-engineered, so it's kind of like a gateway-hack in some ways.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Wow to identify firmware format\n\n[Notes]\n\nyou should post at least file extension and hex view of the start of the file\n\n[edit 1] response to commend + some additional info\n\nstarts the text exactly from start or not?\n\nSo it still can be:\n - bin memory dump\n - anything packed/encoded (even specific file system)\n\n",
      "votes": "5",
      "user": "Spektre",
      "time": "Aug 9, 2016 at 7:31",
      "is_accepted": false,
      "comments": [
        {
          "user": "stack full of heaps",
          "text": "The extension is just .bin. Hex view at the start is the company's name, which occupies 50+ bytes and is identifiable by ASCII, Unicode text.",
          "time": null
        },
        {
          "user": "Spektre",
          "text": "@stackfullofheaps added [edit1] to answer as response would be too much for comment",
          "time": null
        },
        {
          "user": "stack full of heaps",
          "text": "I never really bothered to think that firmware could be used as a filesystem/disk for that purpose.",
          "time": null
        },
        {
          "user": "Spektre",
          "text": "@stackfullofheaps some devices have no connections capabilities so an upgrade SD card is the only usable option. also some fileformats include FATs directly like Garmins map files ... so you should always consider that option too",
          "time": null
        },
        {
          "user": "stack full of heaps",
          "text": "The device I am trying to reverse engineer has a hard disk and full operating system, so I am going to rule-out a filesystem flash bridge, but maybe not entirely yet.",
          "time": null
        }
      ]
    }
  ]
}