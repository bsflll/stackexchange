{
  "title": "How does scanf interact with my code in assembly",
  "link": "https://reverseengineering.stackexchange.com/questions/10823/how-does-scanf-interact-with-my-code-in-assembly",
  "content": "I have recently started getting into assembly for the purpose of reverse engineering. I started small with understanding basic datatypes, but I want to move on to more complex datatypes and functions. I am trying to understand what is happening in both methods requestMaxPow and computePowers\n\nHere is the source that I use\n\n```\n#include <stdio.h>\n\nint requestMaxPow();\nint computerPowers(int);\nint main(){\n    int max = requestMaxPow();\n    computePowers(max);\n    return 0;\n}\n\nint requestMaxPow(){\n    int maxPow;\n\n    scanf (\"%d\", &maxPow);\n    return maxPow;\n}\n\nint computePowers(int MaxPow){\n    int currentVal = 0;\n    int currentPow = 0;\n\n    for(;currentPow < MaxPow; ++currentPow){\n        currentVal = currentPow * currentPow;\n    }\n}\nCompiled with GCC with the following arguments \"gcc -g -O0 morecomplex.c -o morecoplex\"\n\n```\nThe assembly below is for the requestMaxPow method, which is the hardest for me to understand. Specifically I don't understand what \"gs\" means at 0xc5, and I have no idea what is going on between lines 0xce - 0x50. could someone well versed explain line by line what is happening?\n\n```\n(gdb) disassemble \nDump of assembler code for function requestMaxPow:\n   0x080484bf <+0>: push   ebp\n   0x080484c0 <+1>: mov    ebp,esp\n   0x080484c2 <+3>: sub    esp,0x18\n=> 0x080484c5 <+6>: mov    eax,gs:0x14\n   0x080484cb <+12>:    mov    DWORD PTR [ebp-0xc],eax\n   0x080484ce <+15>:    xor    eax,eax\n   0x080484d0 <+17>:    sub    esp,0x8\n   0x080484d3 <+20>:    lea    eax,[ebp-0x10]\n   0x080484d6 <+23>:    push   eax\n   0x080484d7 <+24>:    push   0x80485b0\n   0x080484dc <+29>:    call   0x8048380 <__isoc99_scanf@plt>\n   0x080484e1 <+34>:    add    esp,0x10\n   0x080484e4 <+37>:    mov    eax,DWORD PTR [ebp-0x10]\n   0x080484e7 <+40>:    mov    edx,DWORD PTR [ebp-0xc]\n   0x080484ea <+43>:    xor    edx,DWORD PTR gs:0x14\n   0x080484f1 <+50>:    je     0x80484f8 <requestMaxPow+57>\n   0x080484f3 <+52>:    call   0x8048350 <__stack_chk_fail@plt>\n   0x080484f8 <+57>:    leave  \n   0x080484f9 <+58>:    ret    \nEnd of assembler dump.\n\n```\nThe assembly for the computePowers method is much easier to understand. I include it just in case it has relevance to my main question.\n\n```\n(gdb) disassemble \nDump of assembler code for function computePowers:\n   0x080484fa <+0>: push   ebp\n   0x080484fb <+1>: mov    ebp,esp\n   0x080484fd <+3>: sub    esp,0x10\n=> 0x08048500 <+6>: mov    DWORD PTR [ebp-0x4],0x0\n   0x08048507 <+13>:    mov    DWORD PTR [ebp-0x8],0x0\n   0x0804850e <+20>:    jmp    0x804851e <computePowers+36>\n   0x08048510 <+22>:    mov    eax,DWORD PTR [ebp-0x8]\n   0x08048513 <+25>:    imul   eax,DWORD PTR [ebp-0x8]\n   0x08048517 <+29>:    mov    DWORD PTR [ebp-0x4],eax\n   0x0804851a <+32>:    add    DWORD PTR [ebp-0x8],0x1\n   0x0804851e <+36>:    mov    eax,DWORD PTR [ebp-0x8]\n   0x08048521 <+39>:    cmp    eax,DWORD PTR [ebp+0x8]\n   0x08048524 <+42>:    jl     0x8048510 <computePowers+22>\n   0x08048526 <+44>:    leave  \n   0x08048527 <+45>:    ret    \nEnd of assembler dump.\n\n```\nEdit 1\nAfter looking at the code for a while longer I realized the xor is happening on eax to \"0\" it out, does that happen so that a return value can be stored into eax?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "12k",
  "tags": [
    "disassembly",
    "c",
    "xor",
    "program-analysis",
    "scanf"
  ],
  "user": "Loligans",
  "time": "Sep 9, 2015 at 10:56",
  "comments": [
    {
      "user": "Loligans",
      "text": "@GuntramBlohm Thank you for that! That makes complete sense. I looked up the Stack Canary on google and saw that it is a defense mechanism in Linux that helps make stack buffer overflows more difficult. At address 0xd7 why is a seemingly random address (0x80485b0) being pushed onto the stack?",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "That's not a random address, that's the address where the compiler put the \"%d\" string for scanf. I changed my comment to an answer to have space to explain more.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The code between 80484c5 and 80484ce sets up the stack canary, and 80484e7 to 80484f3 checks it. gcc omits the stack checking from your second function, since it can determine (uses no pointers, doesn't call subroutines) that there's no way to overwrite the stack here. Your xor eax, eax isn't neccesary per se (you don't need to zero registers before storing something into them), it's just that the compiler wants to make the canary value unknown as soon as possible.\n\nOmitting the stack checking results in:\n\n```\n0x080484d0 <+17>:    sub    esp,0x8            // adjust stack alignment \n0x080484d3 <+20>:    lea    eax,[ebp-0x10]     // move the address of maxRow into eax\n0x080484d6 <+23>:    push   eax                // and push it on the stack as the 2nd function argument\n0x080484d7 <+24>:    push   0x80485b0          // Push the address of your format string as first function argument\n0x080484dc <+29>:    call   0x8048380 <__isoc99_scanf@plt>  // call scanf\n0x080484e1 <+34>:    add    esp,0x10           // remove the added bytes from the stack\n0x080484e4 <+37>:    mov    eax,DWORD PTR [ebp-0x10]  // get the content of maxRow into eax to return it as function return value\n\n```\n3 things might need further explanation:\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "Loligans",
          "text": "Okay that makes soooo much sense! My last question is how did it know where to find the address of the format string (0x80485b0)? The only thing I can think of is that the format string is a static string.",
          "time": null
        }
      ]
    }
  ]
}