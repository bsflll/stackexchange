{
  "title": "SIM card firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/33219/sim-card-firmware",
  "content": "I'm trying to look into inner workings of smart cards. I'm familiar with APDUs, PC/SC and the ways of communicating with a smart card. I'm more interested in the firmware (bootloader/OS) that is running inside of a smart card. While I was searching for any binaries I could find, I found the firmware and bootloader for an eSIM on this website as a free download. After downloading I tried poking it in vain.\n\nI ran the linux file command on it and got \"data\" as the output. Then I ran binwalk entropy measurement and got the result in the picture attached.\n\n\n\nLooking at it makes me think that the file is encrypted (and I'm not sure why the entropy dips towards the end of the file). At this point I have 3 questions.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "43",
  "tags": [
    "binary-analysis",
    "encryption",
    "firmware-analysis",
    "smartcards",
    "entropy"
  ],
  "user": "rawberry",
  "time": "Sep 12, 2024 at 20:45",
  "comments": [
    {
      "user": "Robert",
      "text": "I would start with Osmocom. One starting point is e.g.  downloads.osmocom.org/docs/pysim/master/html AFAIK on some hacker events they run custom cellular networks with own SIM cards, I assume they use tools from Osmocom project.",
      "time": null
    }
  ],
  "answers_data": []
}