{
  "title": "Locating Linux Kernel Symbols on ARM",
  "link": "https://reverseengineering.stackexchange.com/questions/1922/locating-linux-kernel-symbols-on-arm",
  "content": "Igor posted a great answer previously on SO about the format of the Linux kernel image on ARM.\n\nAssuming I can't boot my kernel image, can someone give me pointers on finding this compressed symbol table in the binary?  \n\n",
  "votes": "13",
  "answers": 3,
  "views": "11k",
  "tags": [
    "linux",
    "arm"
  ],
  "user": "mrduclaw",
  "time": "May 23, 2017 at 12:37",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "on what basis do you assume there are symbols? It is possible they have been stripped, because they're only needed - for example - to load kernel modules. If everything is linked into the kernel there is no need to have symbols. ARM being used disproportionately on embedded devices, there could be good reasons to strip symbols out of concern for size. On a (similar) running kernel (or in an emulator like QEMU), have you tried Igor's suggestions to see whether symbols exist?",
      "time": null
    },
    {
      "user": "mrduclaw",
      "text": "@0xC0000022L I have a running copy of the kernel and can cat /proc/kallsyms but they don't have the addresses, just the names (addresses appear as 0).  I'm trying to understand (1) where these names are coming from -- I'm assuming it's from that compressed table, but I'm academically interested in seeing it; (2) how to resolve the addresses.",
      "time": null
    },
    {
      "user": "Mellowcandle",
      "text": "0xC0000022L keeping the symbol is an option you can choose on menu config. Without symbols kernel oops will be meaningless. I have strong reason to believe that the symbols weren't stripped.",
      "time": null
    },
    {
      "user": "mrduclaw",
      "text": "@Mellowcandle do you happen to know which menu config option removes the symbols?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@mrduclaw: fair enough, just trying to make sure we all aren't chasing a ghost ;) - Mellowcandle: if size is a main motivation then kernel OOPS are meaningless by themselves, because if the kernel doesn't fit on the device, it won't run anyway :)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "After decompressing and loading the kernel, you need to find a couple of tables that encode the compressed symbol table. These are (in the usual order they are placed in binary):\n\nThey're not hard to find with some experience. A good way to find the first one is to look for several 0xC0008000 values in a row, because a typical kernel symbol table starts like this:\n\n```\nC0008000 T __init_begin\nC0008000 T _sinittext\nC0008000 T _stext\nC0008000 T stext\n\n```\nAfter locating the tables the symbol recovery is trivial. I made a script for IDA that does it automatically, you can find it here (kallsyms.py in the tools zip).\n\nFor more the details of how it's implemented in the kernel, see kernel/kallsyms.c.\n\n",
      "votes": "13",
      "user": "Igor Skochinsky",
      "time": "Apr 25, 2013 at 4:48",
      "is_accepted": true,
      "comments": [
        {
          "user": "mrduclaw",
          "text": "Ah, this is exactly what I was looking for.  Thank you!  So far I was able to identify the kallsyms_addresses, kallsyms_num_syms, and kall_syms_names.  I thought I had located the other two, but your script failed to decode the names; I'm sure I did something wrong.  It seems difficult to know how large the kallsyms_names table will be.  Do you have any suggestions? Thank you again!",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "kallsyms_token_table should be pretty obvious - it will look similar to \"tcp_\",0,\"ca\",0,\"unc_\",0,... etc.",
          "time": null
        },
        {
          "user": "mrduclaw",
          "text": "Damn, I think that's the one I found.  I'll play with it some more.  I'm sure it's something incredibly silly on my part.  Thanks again!",
          "time": null
        }
      ]
    },
    {
      "content": "You mentioned that you do have a running kernel available.  It is possible to obtain symbol information from a running kernel by reading /proc/kallsyms.  On newer distributions, this information is disabled by default for security reasons (all symbols will be displayed as 0x0 addresses), but you can manually enable it by running the following command as root:\n\necho 0 > /proc/sys/kernel/kptr_restrict\n\nOnce you've obtained the list of kernel symbols/address pairs, it should be easy to convert to any format desired, e.g. an IDA .idc script for import.\n\n",
      "votes": "9",
      "user": "0xC0000022L",
      "time": "Apr 25, 2013 at 14:52",
      "is_accepted": false,
      "comments": [
        {
          "user": "mncoppola",
          "text": "@0xC0000022L He responded to you in the comments: \"I have a running copy of the kernel and can cat /proc/kallsyms but they don't have the addresses, just the names (addresses appear as 0).\"",
          "time": null
        }
      ]
    },
    {
      "content": "This is a bit tricky to answer without getting my hands on the file and verifying a few assumptions based on the question and the linked answer. However, let me try, perhaps we can extend it further if you elaborate more on some aspects of the file.\n\nWe know it's an ARM file and from your description this pretty much sounds like an ARM kernel image for U-Boot. Now the problem is that I cannot know whether that's true, but you could run the oft mentioned binwalk or firmware-mod-kit on the file to see what that gives you.\n\nIf this is an ARM kernel image for U-Boot, you can likely get to the gzip data by skipping the first 64 Bytes of the image (see this answer over at StackOverflow). The gist is:\n\n```\ndd if=<image> of=<recovered file> bs=64 skip=1\n\n```\nThis skips 1 block of 64 bytes and otherwise writes the data from <image> into <recovered file>. Essentially it reverses - in part - the effects of the mkimage tool, which is part of U-Boot.\n\nNow, assuming everything so far works - and that is a huge assumption - you should be able to decompress (gzip -d) the resulting file and end up with something you can hopefully grep. If I was you I'd then use file to check what kind of file it is and process it further if I happened to get anything meaningful out of it. If not, I would treat the file with binwalk again and failing that run strings on it.\n\nEdit x+1:\n\nOkay, tried the process myself. Downloaded this Debian package, unpacked it, got a zImage-2.6.28.10-power51 which I then looked at in 010 Editor and it's true, this is an ARM kernel image according to the marker (see reading section below):\n\n\n\nAfter that I tried to skip the first 64 Byte and then decompress the rest, to no avail. Investigating a bit more.\n\nIf you manage to get more information using this incomplete answer, please edit your question and I'll amend my answer once I notice your edit, to add more (hopefully useful) information.\n\nEdit x+2:\n\nOkay, for the zImage in question it turns out binwalk, mentioned in my original answer, can at least handle the file and outputs:\n\n```\n12900           0x3264          gzip compressed data, from Unix, last modified: Mon Jul 23 13:41:37 2012, max compression\n\n```\nLovely. Do let's run dd to extract the gzip stuff and then extract it:\n\n```\ndd if=zImage-2.6.28.10-power51 of=extract.gz bs=12900 skip=1 && gunzip extract.gz && ls -l extract\n\n```\nOnce I extracted it, I ran binwalk again after noticing that file didn't yield a result:\n\n```\nDECIMAL         HEX             DESCRIPTION\n-------------------------------------------------------------------------------------------------------\n135456          0x21120         gzip compressed data, from Unix, last modified: Mon Jul 23 13:38:47 2012, max compression\n973460          0xEDA94         ELF\n1070320         0x1054F0        CramFS filesystem, big endian size 2126262976 CRC 0xdc0a0e1, edition 4040895977, 78662882 blocks, 271618533 files\n\n```\nHowever, I don't want to  proceed now without further input from you. Just an example how it could be investigated. One more thing strings does produce a list of symbols, but since I presume you want symbols and their addresses, I reckon there is more to be investigated.\n\n",
      "votes": "5",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}