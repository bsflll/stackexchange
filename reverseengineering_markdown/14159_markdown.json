{
  "title": "Control a black box \"Traffic Light\" type device using USB",
  "link": "https://reverseengineering.stackexchange.com/questions/14159/control-a-black-box-traffic-light-type-device-using-usb",
  "content": "I have a black box device with three LED's that can be turned on and off, and an also black box application that has six buttons that turn each individual LED on and off. I don't know the source code for the application, not what input does the \"traffic light\" expect.\n\nI really want to find out that inputs are sent to the device so that I can control it on my own, preferably without disassembling the device in question :)\n\nI tried to install Wireshark with USBPcap, and managed to capture what happens when buttons are pressed, but the logs are confusing and overwhelming. Can someone please recommend a direction of attack? \n\n",
  "votes": "1",
  "answers": 1,
  "views": "232",
  "tags": [
    "usb"
  ],
  "user": "user1838817",
  "time": "Dec 13, 2016 at 15:43",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Learn about the USB protocol to separate control bytes from the payload; possibly write a wireshark dissector to dump/analyze the payload. Not an easy or fast route to go. Probably more rewarding: use a disassembler like IDA on the application, and check what happens between the button presses and sending stuff to USB. However, if you want to write a program to control the device yourself, you'll probably have to do some of the status stuff as well, so you really need to learn more about how USB works.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The way I see it, you have three options :\n\nIf you go for solution 2, you'll have to separate the signal in time. By that I mean :\n\nThis way you can have time-stamped data which can help you remove the redundant data and only keep the core values (the payload).\n\nHope this helps.\n\n",
      "votes": "1",
      "user": "yaspr",
      "time": "Dec 16, 2016 at 0:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}