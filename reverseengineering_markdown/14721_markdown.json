{
  "title": "Parseable Windows API documentation",
  "link": "https://reverseengineering.stackexchange.com/questions/14721/parseable-windows-api-documentation",
  "content": "For a project I'm in need of a parseable version of the Windows API (i.e. the functions described in msdn).\n\nI tried to crawl it myself, but there seem to be more than 5 formats for signatures and parameters used. The MsdnApiExtractor project does not seem to work anymore.\n\nI've seen some projects using help files, but I can't seem anything to parse .hlp files. Sadly, using the header files is no alternative, since it lacks argument names.\n\nI'm mainly interested in the High-Level API (e.g. ReadFile, CloseHandle etc.)\n\nedit:\n\nSeems I've been looking at the wrong header files\n\n",
  "votes": "0",
  "answers": 2,
  "views": "209",
  "tags": [
    "windows",
    "api",
    "documentation"
  ],
  "user": "Nordwald",
  "time": "Feb 24, 2017 at 8:55",
  "comments": [
    {
      "user": "josh poley",
      "text": "Do you just need signature information? Or did you want the documentation text as well?",
      "time": null
    },
    {
      "user": "blabb",
      "text": "Do you want to extract something like int stdcall foo.( float a, ......) From header files  what exactly does header files lack arg names mean",
      "time": null
    },
    {
      "user": "marshal craft",
      "text": "Why not use windows.h ?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "this should be a comment but the content is long for a comment so an answer \n\nyour statement /subsequent edit / that header files does not contain names \nis not correct \n\n```\n:\\>echo %cd%\nE:\\ewdk\\Program Files\\Windows Kits\\10\\Include\\10.0.10586.0\\um\n\n:\\>grep -irn -B 3 -A 3 GetLocalTime  *\nsysinfoapi.h-180-WINBASEAPI\nsysinfoapi.h-181-VOID\nsysinfoapi.h-182-WINAPI\nsysinfoapi.h:183:GetLocalTime(\nsysinfoapi.h-184-    _Out_ LPSYSTEMTIME lpSystemTime\nsysinfoapi.h-185-    );\nsysinfoapi.h-186-\n--\n\n```\nin fact i have around 49547 apis parsed from ewdk win10 headers\n\n```\n:\\>wc -l uniqtags.txt\n49547 uniqtags.txt \n\n```\nhere is what it spits out for your GetLocalTime\n\n```\n:\\>grep -n GetLocalTime uniqtags.txt\n9715:GetLocalTime       ( _Out_ LPSYSTEMTIME lpSystemTime )\n15926:InternetDebugGetLocalTime ( _Out_ SYSTEMTIME * pstLocalTime, _Out_opt_ DWORD * pdwReserved )\n\n```\nhere is what the possibly undocumented zwrecover functions with arguments \nparsed from headers look like\n\n```\n:\\>grep -n ZwRec uniqtags.txt\n33290:ZwRecoverEnlistment       ( _In_ HANDLE EnlistmentHandle, _In_opt_ PVOID EnlistmentKey )\n33291:ZwRecoverResourceManager  ( _In_ HANDLE ResourceManagerHandle )\n33292:ZwRecoverTransactionManager       ( _In_ HANDLE TransactionManagerHandle )\n\n```\njust to make it clear  if you want to print out all the Zw.Enlist. functions with thier arguments you could do some thing like this \n\n```\n:\\>for /f %I in ( 'awk \"{print $1}\" uniqtags.txt ^| grep -i Zw ^| grep  Enlist ')  do grep %I uniqta\ngs.txt\n\n:\\>grep ZwCommitEnlistment uniqtags.txt\nZwCommitEnlistment      ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\>grep ZwCreateEnlistment uniqtags.txt\nZwCreateEnlistment      ( _Out_ PHANDLE EnlistmentHandle, _In_ ACCESS_MASK DesiredAccess, _In_ HANDL\nE ResourceManagerHandle, _In_ HANDLE TransactionHandle, _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes\n, _In_opt_ ULONG CreateOptions, _In_ NOTIFICATION_MASK NotificationMask, _In_opt_ PVOID EnlistmentKe\ny )\n\n:\\>grep ZwOpenEnlistment uniqtags.txt\nZwOpenEnlistment        ( _Out_ PHANDLE EnlistmentHandle, _In_ ACCESS_MASK DesiredAccess, _In_ HANDL\nE RmHandle, _In_ LPGUID EnlistmentGuid, _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes )\n\n:\\>grep ZwPrePrepareEnlistment uniqtags.txt\nZwPrePrepareEnlistment  ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\>grep ZwPrepareEnlistment uniqtags.txt\nZwPrepareEnlistment     ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\>grep ZwQueryInformationEnlistment uniqtags.txt\nZwQueryInformationEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_ ENLISTMENT_INFORMATION_CLASS En\nlistmentInformationClass, _Out_writes_bytes_(EnlistmentInformationLength) PVOID EnlistmentInformatio\nn, _In_ ULONG EnlistmentInformationLength, _Out_opt_ PULONG ReturnLength )\n\n:\\>grep ZwReadOnlyEnlistment uniqtags.txt\nZwReadOnlyEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\>grep ZwRecoverEnlistment uniqtags.txt\nZwRecoverEnlistment     ( _In_ HANDLE EnlistmentHandle, _In_opt_ PVOID EnlistmentKey )\n\n:\\>grep ZwRollbackEnlistment uniqtags.txt\nZwRollbackEnlistment    ( _In_ HANDLE EnlistmentHandle, _In_opt_ PLARGE_INTEGER TmVirtualClock )\n\n:\\>grep ZwSetInformationEnlistment uniqtags.txt\nZwSetInformationEnlistment      ( _In_ HANDLE EnlistmentHandle, _In_ ENLISTMENT_INFORMATION_CLASS En\nlistmentInformationClass, _In_reads_bytes_(EnlistmentInformationLength) PVOID EnlistmentInformation,\n _In_ ULONG EnlistmentInformationLength )\n\n:\\>\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Feb 24, 2017 at 9:24",
      "is_accepted": true,
      "comments": [
        {
          "user": "Nordwald",
          "text": "I'm sorry, I confused the header files. Sadly it seems like I'll have to set up a vm and install the sdk to access the header files",
          "time": null
        }
      ]
    },
    {
      "content": "There is msdn-crawler, created by Zynamics and then amended by FireEye. I was not able to get it working but maybe you'll have more luck.\nAlternatively, you can find an old MSDN CD with CHM files, decompile them to HTML and parse that.\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Feb 23, 2017 at 10:24",
      "is_accepted": false,
      "comments": [
        {
          "user": "Nordwald",
          "text": "Thats a nice idea, must all I can find coping with .hlp and .chm files are old shareware programs. Also, I'm not eager to download the sdk and compile help files.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "hh.exe can decompile CHMs, you don't need any extra tools.",
          "time": null
        }
      ]
    }
  ]
}