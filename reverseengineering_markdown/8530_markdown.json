{
  "title": "Case study: Extracting a database from a Delphi software",
  "link": "https://reverseengineering.stackexchange.com/questions/8530/case-study-extracting-a-database-from-a-delphi-software",
  "content": "This is my first post here (&hopefully not the last one!)\n\nFirst of all, I gotta say I am no RE expert so I might sound a little confused.\n\nSo I have got a Delphi program consisting of two files (as far as you are concerned):\n\nprogram.bin is a database the extraction of which is my final objective. By extraction I mean to have an original db file or something that is tangible and does not lack any information.\n\nThe program is a GUI application that does nothing except loading the database and showing it in two columns (at least this is what I see).\n\nProject description\n\nWhat I did\n\nObservations\n\nSo my question is what can I do? how can I place myself between the components so that I can see what it does?\n\nP.S. I can put a link to the executable but I do not want to make it specific. I intend to acquire general techniques here.\n\nNOTE: This is purely for educational purposes only, as I already have this database. What I did was basically dump the memory where the program placed its database. (BTW, is there any small tool for dumping specific range of memory? I used Win7's original dumper in the Task Manager)\n\n",
  "votes": "3",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "decryption"
  ],
  "user": "Gio Eufshi",
  "time": "Mar 23, 2015 at 18:08",
  "comments": [
    {
      "user": "Dominik Antal",
      "text": "I have no experience with delphi applications but I'ld do it the following way: If you identified the function(s) that accesses/reads from the file, you should start the application, attach a debugger like Olly, and put a breakpoint on that function. Then try to trigger it and from then follow the execution flow until you understand how it's done. If you have the raw bytes that it read from the file, put a break point on those bytes and identify what happens to those bytes, which function does the encryption/interpretation of the data. At least that's how I'ld do it :)",
      "time": null
    },
    {
      "user": "Gio Eufshi",
      "text": "@DominikAntal, no I have not identified yet. Like I said DeDe does not load it fully. Speaking of breakpoints, yes memory breakpoints is one good thing I haven't tried yet. I'll try putting a breakpoint on the address, whence I dumped the db and see if it sheds light on anything.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Not really an answer, but too long for a comment.\n\nYour program might use LoadLibrary to load cryptbase.dll. Start Olly, place breakpoints on LoadLibraryA and LoadLibraryW and check what happens.\n\n64 bytes (256 bits) is the input block size to various encryption algorithms. Your program might use one of these, either through cryptbase.dll, or compiled into the program. Check signsrch to see if your program contains any constants used by various encryption algorithms.\n\nRemember Process Monitor can show you the stack to each API call it intercepts. If every read of 64 bytes originates from the same address in your .exe, but addresses further up the stack vary, the last common address is probably some read_and_decrypt() subroutine. This is a great place to place your breakpoints.\n\nSometimes, it's easier to let the original program do its job than to crack everything. Your program will probably use a function somewhere that adds one row to the table to be displayed. If you can find this function, you could create a detour that opens a file, appends the row data to it, and closes it. \n\n",
      "votes": "1",
      "user": "Guntram Blohm",
      "time": "Mar 23, 2015 at 17:44",
      "is_accepted": false,
      "comments": []
    }
  ]
}