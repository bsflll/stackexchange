{
  "title": "How to step into an invoked method from a DotNet DLL in dnSpy?",
  "link": "https://reverseengineering.stackexchange.com/questions/29394/how-to-step-into-an-invoked-method-from-a-dotnet-dll-in-dnspy",
  "content": "I've been analyzing a malware written in C# using dnSpy. It loaded a dotnet assembly DLL from its Resources:\n\n\nI tried stepping into InvokeMember function, but could not go further when hitting this call:\n\n\nI've dumped the DLL to file to analyze it statically, but the code is protected by SmartAssembly, so I cannot fully understand its behavior.\n\nMy question is: how can I step into the code of the method called by \"InvokeMethod\"? If I cannot do it directly, is there any workaround?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "assembly",
    "dll",
    ".net",
    "dnspy"
  ],
  "user": "gergeerew",
  "time": "Oct 12, 2021 at 2:18",
  "comments": [],
  "answers_data": [
    {
      "content": "I've figured out the solution. It's simple. We only need to set a breakpoint inside the DLL.\n\n",
      "votes": "0",
      "user": "gergeerew",
      "time": "Oct 13, 2021 at 7:41",
      "is_accepted": true,
      "comments": []
    }
  ]
}