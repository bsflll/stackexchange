{
  "title": "Windows 7 x86 reboot process",
  "link": "https://reverseengineering.stackexchange.com/questions/8394/windows-7-x86-reboot-process",
  "content": "I know that there are differently methods to do a reboot.\n\nI'm working on a simple hyper-visor and I have a little problem when I want to reboot a multi-processor aware x86 Windows 7 Guest. \nThe main steps the OS does seem to be: Task Switch - Task Switch - Triple Fault. This happens on all CPUs except one which does not initiate a Task Switch at all and hangs somewhere. The last exit I get from it is a CPUID with EAX = 1 so I really don't know (yet) where or why it does not get to do a Task Switch like all the others. I'm a bit stuck on understanding this - maybe some details about what should normally happen will help me. \n\nWhat is the actual method that is used for a reboot by a x86 Windows 7? \n\nEDIT I figured this out a few days ago, but I haven't got time to update the post. I'm not going to answer my own question because I don't think this is a full and definitive answer, but for someone who might have the same problem this will make things a bit easier.\n\nTurns out, that the missing CPU was halted. The flow is, more ore less, this: Task Switch, Triple Fault (for n-1 CPUs) and halt (for the n-th CPU). After this there should be an init on each one and then everything is reset. \n\n",
  "votes": "2",
  "answers": 1,
  "views": "332",
  "tags": [
    "windows",
    "x86"
  ],
  "user": "user3002428",
  "time": "Mar 11, 2015 at 13:32",
  "comments": [],
  "answers_data": [
    {
      "content": "See my findings below based on some quick analysis in IDA, but take it all with a grain of salt. There may be other scenarios that would cause Windows 7 to reboot through other mechanisms when performing a planned reboot. Perhaps others on this site can contribute with their expertise...\n\nâ€‹\n\nAt the lowest level, Windows calls hal!HalReturnToFirmware(), which calls hal!HalpReboot(), which is pretty well documented in ReactOS.\n\nIn both Windows 7 and ReactOS, the final instructions that actually cause the reboot are effectively:\n\n```\nmov al, 0xFE\nout 0x64, al\n\n```\nThis writes the system reset command to the keyboard controller's IO port.\n\n",
      "votes": "3",
      "user": "Jason Geffner",
      "time": "Mar 5, 2015 at 23:50",
      "is_accepted": false,
      "comments": [
        {
          "user": "user3002428",
          "text": "From what I've seen there's a difference even between single processor and multi processor version (no task switch on the single CPU version). I'm not getting to the part with the keyboard controller.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "FWIW, here's the reset via keyboard controller in ReactOS.",
          "time": null
        },
        {
          "user": "user3002428",
          "text": "I found it from following your links from the answer. From the source code alone it seems that only the BSP should execute that function. Is this right?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "To confirm or disconfirm that would likely take more time than I want to invest in this ;)",
          "time": null
        },
        {
          "user": "user3002428",
          "text": "The question is open if somebody knows the answer. I'll update it if I find it in the meantime.",
          "time": null
        }
      ]
    }
  ]
}