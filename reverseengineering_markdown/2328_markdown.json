{
  "title": "What is this obfuscation method called?",
  "link": "https://reverseengineering.stackexchange.com/questions/2328/what-is-this-obfuscation-method-called",
  "content": "I have recently seen the following code obfuscation method: \n\n```\n...\njump loc_1234\n;-------------------------\n         Bunch of junk\n;-------------------------\n\nloc_1234:\ncode continued...\n\n```\nThe logic behind the obfuscation mechanism looks pretty straight forward. Bunch of junk is inserted into code with jump instructions to jump over it. I guess, the purpose is to confuse linear sweep disassemblers and obfuscate file in general. I would like to learn more about it. Does anyone know what it is called? How effective is this method against modern day anti-virus software?\n\n",
  "votes": "7",
  "answers": 3,
  "views": "2k",
  "tags": [
    "disassembly",
    "malware",
    "obfuscation"
  ],
  "user": "PSS",
  "time": "Jun 25, 2013 at 17:01",
  "comments": [
    {
      "user": "Rolf Rolles",
      "text": "I call that \"destruction of sequential locality for temporally-related instructions\".",
      "time": null
    },
    {
      "user": "perror",
      "text": "I would call this \"dead code insertion\". For me, this is a technique to evade linear sweep and recursive traversal. But, once you follow the semantics of the instructions when disassembling, this obfuscation is totally useless.",
      "time": null
    },
    {
      "user": "cb88",
      "text": "@perror its not dead if it is executed from somewhere else.",
      "time": null
    },
    {
      "user": "perror",
      "text": "@cb88: I though it was a bunch of junk...",
      "time": null
    },
    {
      "user": "PSS",
      "text": "@perror I think it should not confuse recursive traversal, due to the fact that it follows binary trees and will just follow jumps. Am I correct?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This anti-disassembly technique is described as Jump Instruction with a Constant Condition in the Practical Malware Analysis book (Chapter 16, page 336 of the 1st edition). The idea, as you have described, is to have a condition such that the jump is always taken, and add code after the jump that will generate a wrong disassembly at the location of the jump. As the disassembler assumes that both branches are coherent, it will disassemble only one of them.\n\nRegarding effectiveness against antivirus software, most of them use emulators. As the condition is always taken, the emulator will continue there and see the right instructions. \n\n",
      "votes": "6",
      "user": "auspicious99",
      "time": "May 10, 2020 at 9:16",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "A variation on this is to use a \"branch function\".  The basic idea is as follows:\n\nThis basic scheme can be elaborated in various ways, e.g.:\n\nBut, as mentioned above, this is basically aimed at throwing off static disassembly; it doesn't do a whole lot against dynamic analysis.\n\n",
      "votes": "2",
      "user": "debray",
      "time": "Jun 26, 2013 at 13:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "An alternative answer is that you are looking at hand coded assembly and there is actually no effort to deceive the disassembler.\n\nWhen I hand code assembly, regardless of what good practice is, if it is a small bit of code I will very frequently set the Data Selector to match the Code Selector and simply embed my data right inside of the code segment.  I especially do this if I'm writing a real mode boot loader, for example, or some other short lived piece of code.\n\nAnother place I would do this and still not be trying to obfuscate things is in a piece of exploit code.  This allows me to have variables that I can reference reliably and still have a really tight piece of shell code.\n\n",
      "votes": "2",
      "user": "David Hoelzer",
      "time": "Jul 13, 2013 at 22:04",
      "is_accepted": false,
      "comments": []
    }
  ]
}