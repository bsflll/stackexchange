{
  "title": "When I write into a memory address in gdb, is it an absolute address or PC-relative address?",
  "link": "https://reverseengineering.stackexchange.com/questions/18954/when-i-write-into-a-memory-address-in-gdb-is-it-an-absolute-address-or-pc-relat",
  "content": "Recently I tried to use Hopper Disassembler to do the reverse engineering on a Mac application. After decompiling the executable file, I got a bunch of cstrings defined in the specific location. For example, on 0x105d4a804 there is a string \"SQLITECIPHER\".\n\nBut my problem is that: is 0x105d4a804 a relative address or an absolute one?\n\nI found that if I use gdb to run the executable file, I can use x/s to print that string correctly, exactly in that location.\n\nThis raises my concern. Is this string probably defined as a global variable? Why is the memory location in gdb as same as defined in the executable? Any explanation will be appreciated!\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "590",
  "tags": [
    "hopper",
    "mach-o"
  ],
  "user": "Patroclus",
  "time": "Jul 31, 2018 at 21:41",
  "comments": [],
  "answers_data": [
    {
      "content": "I don't know exactly about Mac applications, but .text, .rodata, .data etc are usually at static locations which stay the same while parsing the ELF in a disassembler and during runtime. There's a feature called Position Independent Executables(PIE) in which even these sections are subject to ASLR. In newer gcc versions PIE is enabled by default unless specifically opted out in the compiler flags.\n\nFrom here\n\nIn the application you're reversing PIE may have been disabled.\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}