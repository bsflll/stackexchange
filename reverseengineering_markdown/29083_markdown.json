{
  "title": "Proxy dll doesn't load the original dll",
  "link": "https://reverseengineering.stackexchange.com/questions/29083/proxy-dll-doesnt-load-the-original-dll",
  "content": "I have relatively simple code here for the proxy DllMain() function:\n\n```\nBOOL APIENTRY DllMain(HMODULE hDll, DWORD reason, LPVOID reserved)\n{\n\n\nif (reason != DLL_PROCESS_ATTACH) {\n    return TRUE;\n}\n\nlibrary = LoadLibrary(\"vcruntime140_.dll\");\nif (!library) {\n    MessageBox(NULL, \"Failed to load vcruntime140_.dll\", \"vcruntime140.dll proxy\", MB_OK);\n    return FALSE;\n}\n\nif (reason == DLL_PROCESS_DETACH) {\n    FreeLibrary(library);\n    return TRUE;\n}\n\nsetupVftableHooks();\nreturn setupHooks();\n}\n\n```\nFor some reason, it doesn't load the original DLL, i.e. vcruntime140_.dll. It loads the proxy one, aka vcruntime140.dll. It tries to load it several times, in fact:\n\n```\nLoaded   Binaries\\Windows-x86_64\\vcruntime140.dll'. Symbols loaded.\nLoaded   Binaries\\Windows-x86_64\\vcruntime140.dll'. Symbols loaded.\nUnloaded Binaries\\Windows-x86_64\\vcruntime140.dll'\nLoaded   Binaries\\Windows-x86_64\\vcruntime140.dll'. Symbols loaded.\nUnloaded Binaries\\Windows-x86_64\\vcruntime140.dll'\n\n```\nBut\n\nUpdate 06.08.21: Created a x86 version of the DLL. It loads and the program starts.\nThe difference with the above x64 version is that the program doesn't complain about Entry points for the functions. It loads the DLL from it's location within the game folder, but it also loads the equivalent dll from System32, i.e.:\n\n```\nBinaries\\Windows-x86_64\\vcruntime140.dll'.      \nBinaries\\Windows-x86_64\\vcruntime140.dll'       \nBinaries\\Windows-x86_64\\vcruntime140.dll'.      \nBinaries\\Windows-x86_64\\vcruntime140.dll'       \n(Win32): Loaded 'C:\\Windows\\System32\\vcruntime140.dll'\n(Win32): Loaded 'C:\\Windows\\System32\\vcruntime140.dll'\n(Win32): Unloaded 'C:\\Windows\\System32\\vcruntime140.dll'    \n\n```\nWhat is confusing about this is that it doesn't load the actual DLL from the game folder, i.e. vcruntime140_.dll. Will continue trying to debug, but since it doesn't stop at breakpoints in DllMain() function, I don't know what's the best way to do it.\n\nNote that the program runs in the mixed environment, as you can see from the name of the folder, from which it actually starts: Windows-x86_64\n\n",
  "votes": "0",
  "answers": 1,
  "views": "424",
  "tags": [
    "windows",
    "c++",
    "dll",
    "dll-injection",
    "proxy"
  ],
  "user": "Irbis77",
  "time": "Aug 6, 2021 at 10:01",
  "comments": [],
  "answers_data": [
    {
      "content": "Fixed this in several steps:\n\nIt had to be replaced with this in the .def file:\n\n```\n  swr_alloc=PROXY__swr_alloc @1\n\n```\nAnd change in the mainDLL():\n\n```\ncase DLL_PROCESS_ATTACH:\n{\n\n    hLThis = hInst;\n    hL = LoadLibrary(\".\\\\swresample-3_.dll\");\n    if (!hL) {\n        MessageBox(NULL, \"Failed to load swresample-3_.dll\", \"swresample-3.dll proxy\", MB_OK);\n        return FALSE;\n    }\n\n    p[0] = GetProcAddress(hL, \"swr_alloc\");\n    p[1] = GetProcAddress(hL, \"swr_alloc_set_opts\");   \n\n```\n.....\n\n```\nextern \"C\"\n{\nFARPROC PA = NULL;\nint RunASM();\n\nvoid PROXY__swr_alloc() {\n    PA = p[0];\n    RunASM();\n}\nvoid PROXY__swr_alloc_set_opts() {\n    PA = p[1];\n    RunASM();\n}\n\n```\nWith .asm file:\n\n```\n.data\nextern PA : qword\n.code\nRunASM proc\njmp qword ptr [PA]\nRunASM endp\nend\n\n```\nThis is a more \"standard\" approach to proxy dll creation. But I still don't understand why the original dll setup, i.e. the layout of the .def file didn't work. I saw that working on some other projects.\n\n",
      "votes": "0",
      "user": "Irbis77",
      "time": "Aug 8, 2021 at 8:56",
      "is_accepted": true,
      "comments": []
    }
  ]
}