{
  "title": "GDB Error \"Too many array elements\"",
  "link": "https://reverseengineering.stackexchange.com/questions/2215/gdb-error-too-many-array-elements",
  "content": "I'm trying to understand very basic stack-based buffer overflow\nI'm running Debian wheezy on a x86_64 Macbook Pro.\n\nI have the following unsafe program:\n\n```\n#include <stdlib.h>\n#include <stdio.h>\n\nCanNeverExecute()\n{\n        printf(\"I can never execute  \n\");\n        exit(0);\n}\n\nGetInput()\n{\n        char buffer[512];\n\n        gets(buffer);\n        puts(buffer);\n}\n\nmain()\n{\n        GetInput();\n\n        return 0;\n}\n\n```\nI compiled with -z execstack and -fno-stack-protector for my tests.\n\nI have been able to launch the program through gdb, get the address of CanNeverExecute function which is never called, and overflow the buffer to replace the return address by this address. I got printed \"I can never execute\", which is, so far, so good.\n\nNow I'm trying to exploit this buffer overflow by introducing shellcode in the stack. I'm currently trying directly into gdb: break in GetInputfunction, set buffer value through gdb and jump to buffer adress with jump command.\n\nBut I have a problem when setting the buffer:\nI have a breakpoint just after gets function, and I ran the programm with 512 a characters as input.\n\nIn gdb, I do:\n\n```\n(gdb) p buffer\n$1 = 'a' <repeats 512 times>\n\n```\nThe input was read without any problem, and my buffer is 512 a\nI then try to modify its value. If I do this:\n\n```\n(gdb) set var buffer=\"\"\n\n```\nand try to print buffer, its length is now 511! How come??\n\n```\n(gdb) p buffer\n$2 = '\\000' <repeats 511 times>et:\n\n```\nAnd when I try to set it back to, for instance, 512 a, I get:\n\n```\nToo many array elements\n\n```\nI can set it to 511 a though, it is really that las byte that doesn't work... How come, is there a simple explanation?\n\n",
  "votes": "7",
  "answers": 1,
  "views": "2k",
  "tags": [
    "gdb",
    "buffer-overflow"
  ],
  "user": "Noé Malzieu",
  "time": "Jun 9, 2013 at 1:47",
  "comments": [],
  "answers_data": [
    {
      "content": "GDB protects you to overflow your char array. \n\n```\n(gdb) p &buffer\n$25 = (char (*)[512]) 0x7fffffffdfe0\n\n```\nTo bypass this security you can either write directly the memory :\n\n```\n(gdb) set 0x7fffffffe1e0=0x41414141\n\n```\nOr cast the array as a bigger one and then set your stuff :\n\n```\nset {char [513]}buffer=\"512xA\"\n\n```\n",
      "votes": "8",
      "user": "dna",
      "time": "Jun 9, 2013 at 16:28",
      "is_accepted": true,
      "comments": [
        {
          "user": "Noé Malzieu",
          "text": "Thanks, but I wasn't trying to write in 513 A but only 512... Or is it that the last character has to be a \\x00 ?",
          "time": null
        },
        {
          "user": "dna",
          "text": "Oh sorry that was a typo. Yes of course the last character has to be a null byte, moreover GDB tried to append it for you. Given the array definition this is why writing 511 \"a\" worked but not 512.",
          "time": null
        },
        {
          "user": "Noé Malzieu",
          "text": "Ok thanks a lot! Last question: does that mean that in C, if I create char buffer[512];, I can only fill it with 511 chars as well?",
          "time": null
        },
        {
          "user": "dna",
          "text": "You are free to fill a 512 chars buffer with 512 chars. But in GDB  when using the command set buffer=\"A\" you are filling it with a string, thus with a final null byte terminator.",
          "time": null
        },
        {
          "user": "Noé Malzieu",
          "text": "That makes perfect sense",
          "time": null
        }
      ]
    }
  ]
}