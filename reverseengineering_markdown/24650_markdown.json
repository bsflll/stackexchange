{
  "title": "Ghidra Python - Get x-refs of a specific function",
  "link": "https://reverseengineering.stackexchange.com/questions/24650/ghidra-python-get-x-refs-of-a-specific-function",
  "content": "What is the best way to get calling x-refs for a specific function?\n\nI am aware of the following method: \n\n```\nfunc = getFirstFunction()\n\nwhile func is not None:\n    func_name = func.getName()\n    if func_name == <my_func>:\n        entry_point = func.getEntryPoint()\n        references = getReferencesTo(entry_point)\n\nfunc = getFunctionAfter(func)\n\n```\nIs there a way to do that without iterating through all the functions? \n\n",
  "votes": "1",
  "answers": 3,
  "views": "4k",
  "tags": [
    "python",
    "ghidra"
  ],
  "user": "macro_controller",
  "time": "Apr 8, 2020 at 8:04",
  "comments": [],
  "answers_data": [
    {
      "content": "getReferencesTo takes an address\n\ntoAddr() converts a string to Address you can combine both \n\nlike this\n\n```\n>>> getReferencesTo(toAddr(\"ZwCreateKey\"))\n\narray(ghidra.program.model.symbol.Reference, \n[\nFrom: 14095680c To: 1401b33c0 Type: DATA Op: 0 IMPORTED, \nFrom: 140a22fbd To: 1401b33c0 Type: DATA Op: 0 DEFAULT, \nFrom: Entry Point To: 1401b33c0 Type: EXTERNAL Op: -1 DEFAULT, \nFrom: 140628dc5 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407478dd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1406bdfcd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1408db10c To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1406f5dec To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407c7190 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1407d01da To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \nFrom: 1405a8745 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT, \n\n```\nthe function limits its display to max 4096 refs if  there are  more\nuse the recommended ReferenceManager\n\n```\n>>> refs = currentProgram.referenceManager.getReferencesTo(toAddr(\"ZwCreateKey\"))\n>>> for i in refs:\n...     print i\n... \nFrom: 14095680c To: 1401b33c0 Type: DATA Op: 0 IMPORTED\nFrom: 140a22fbd To: 1401b33c0 Type: DATA Op: 0 DEFAULT\nFrom: Entry Point To: 1401b33c0 Type: EXTERNAL Op: -1 DEFAULT\nFrom: 140628dc5 To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1407478dd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1406bdfcd To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\nFrom: 1408db10c To: 1401b33c0 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Apr 8, 2020 at 17:03",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I don't think there is a method that filters functions by name, but you can write the above a bit more concise with lambdas and a bit more functional approach.\n\n```\nfm = currentProgram.getFunctionManager()\nfuncs = fm.getFunctions(True)\nfiltered_funcs = filter(lambda f: f.getName() == '<your function name>', funcs)\nx_refs = map(lambda f: getReferencesTo(f.getEntryPoint()), filtered_funcs)\n\n```\nYou could even fold them more but (probably) hurting the readability.\n\n",
      "votes": "1",
      "user": "Paweł Łukasik",
      "time": "Apr 8, 2020 at 14:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This is possible via the Symbol Table:\n\n```\nsym = currentProgram.symbolTable.getSymbol(func_name)\n\nfunc = currentProgram.functionManager.getFunction(sym.key)\n# the following should be equivalent\nfunc = currentProgram.functionManager.getFunctionAt(sym.address)\n\nrefs = getReferencesTo(func.entryPoint)\n\n```\nSymbols in this case are the Ghidra Function symbols, not the kind of symbols which might be contained in binary, but could be stripped.\nIt works with names like FUN_100008628, entry, or any function you renamed.\n\n",
      "votes": "0",
      "user": "Florian Magin",
      "time": "Apr 8, 2020 at 19:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}