{
  "title": "Why does this command crash IDA Android native debugger?",
  "link": "https://reverseengineering.stackexchange.com/questions/22032/why-does-this-command-crash-ida-android-native-debugger",
  "content": "In Android shared library that heavily protected against debugging, I found following code:\n\n```\nCODE32\nldr pc, [pc, #-4]\n\n```\nFor me, this instruction looks like NOP; it just jumps to next instruction in ARM mode. The debugged process crashes on this command, however. I use IDA to debug the process.\n\nCan anyone explain why?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "268",
  "tags": [
    "ida",
    "android",
    "arm"
  ],
  "user": "Vitalii",
  "time": "Sep 3, 2019 at 14:59",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "\"crashes\" how, exactly?",
      "time": null
    },
    {
      "user": "Vitalii",
      "text": "Raises SIGSEGV.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "IDA itself or the process being debugged?",
      "time": null
    },
    {
      "user": "Vitalii",
      "text": "The debugged process.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This instruction is not a NOP. It reads memory and jumps to the address loaded. If the memory is inaccessible or the loaded address is invalid/non-executable, you will get an exception, so the debugger's behavior is correct.\n\na NOP-like instruction involving PC in ARM mode would be something like\n\n```\nADD PC, PC, #-4\n\n```\n(likely disassembled as sub pc, pc, #4 or maybe even ADR PC, next_addr )\n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Sep 3, 2019 at 15:06",
      "is_accepted": true,
      "comments": []
    }
  ]
}