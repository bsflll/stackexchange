{
  "title": "Z3 is unable to predict the operand",
  "link": "https://reverseengineering.stackexchange.com/questions/30303/z3-is-unable-to-predict-the-operand",
  "content": "When I try to solve this crackme chall (https://crackmes.one/crackme/61ffb07c33c5d46c8bcbfc1d) , there is a condition that I can't bypass and my z3 script can't predict the input string that will bypass the condition\n\n\n\nand this is my z3 script\n\n```\nfrom z3 import *\n\nv7 = [123,456,789,987,654,321]\nv6 = [92,29,380,2,497,296]\n\ns = [BitVec(f'a{i}', 8) for i in range(5)]\n\nsolver = Solver()\n\nv20 = 0x7FFFFFFF\nfor i in range(5):\n    solver.add(s[i]>32,s[i]<127)\n    v20 += i * s[i]\n    solver.add(v20 % v7[i] == v6[i])\n\nsolver.check()\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "115",
  "tags": [
    "ida",
    "crackme"
  ],
  "user": "IVs",
  "time": "Apr 22, 2022 at 11:16",
  "comments": [
    {
      "user": "sudhackar",
      "text": "The function has much more logic and you need to add that in the script too",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It is to note that the division in the binary is unsigned while according to doc\n\n% operator by default is an alias for SRem or signed modulo. You need to use URem. I have fixed your logic as well in this code\n\n```\nfrom z3 import *\n\nv7 = [123,456,789,987,654,321]\nv6 = [92,29,380,2,497,296]\narrl = 14\nargv1 = [BitVec(f'a{i}', 32) for i in range(arrl)]\n\nsolver = Solver()\nv18 = BitVecVal(0x7fffffff, 32)\n\nfor i in range(arrl):\n    solver.add(argv1[i] < 128)\n    solver.add(argv1[i] > 32)\n    v18 += i*argv1[i]\n\nfor i in range(6):\n    solver.add(URem(v18, v7[i]) == v6[i])\n\nprint(solver.check())\nprint(\"\".join(map(chr,[solver.model()[argv1[i]].as_long() for i in range(arrl)])))\n\n```\nPlease note that this won't solve the problem, It has additional checks.\n\n",
      "votes": "0",
      "user": "sudhackar",
      "time": "Apr 22, 2022 at 17:14",
      "is_accepted": true,
      "comments": [
        {
          "user": "IVs",
          "text": "Thanks! as you see there is if ( ((unsigned int (__fastcall *)(char *, size_t))v14)(a2[1], v5) ) in decompiled code, can you explain what this check do ? and what does this mean (unsigned int (__fastcall *)(char *, size_t)) ?",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "@IntVer You can open a new question for that. hint: its a function pointer",
          "time": null
        },
        {
          "user": "IVs",
          "text": "@sudhacker reverseengineering.stackexchange.com/questions/30308/â€¦",
          "time": null
        }
      ]
    }
  ]
}