{
  "title": "jmp to 4 byte address in shellcode",
  "link": "https://reverseengineering.stackexchange.com/questions/22568/jmp-to-4-byte-address-in-shellcode",
  "content": "I'm playing around with the PE header and the Import Address Table. I wrote a dummy program that calls MessageBoxA with some retard parameters. After successfully replacing the MessageBoxA function address with an address inside a cave with PAGE_EXECUTE_READWRITE access, I tried running the program. The shellcode is just messing with the pushed arguments and afterwards it's jumping to the original MessageBoxA function address.\n\nIf the address is 75FD0CD0 then the Little Endian representation would be D00CFD75, right?\n\nAfter running it and the program successfully calling the code inside the cave, it would crash. I opened Cheat Engine to compare the values. The instruction that was supposed to jump to the MessageBoxA function was showing a jump to a different function. After opening the edit option, the instruction was: jmp 76552F20 instead of jmp 75FD0CD0. I edited that and put the correct address inside and the bytes that were written were 80EAA475 which was somehow pointing to the MessageBoxA function.\n\nHow did Cheat Engine get 80EAA475 from 75FD0CD0?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "288",
  "tags": [
    "assembly",
    "pe32"
  ],
  "user": "LaurentiuS",
  "time": "Nov 18, 2019 at 4:17",
  "comments": [
    {
      "user": "sudhackar",
      "text": "Can you also show what were the exact opcodes of the instruction that you and cheat engine wrote? jmp is usually relative to current rip. e.g eb08 disassembles to jmp 0xa i.e. jump 10(8+2(size of instruction)) if the base address is 0.",
      "time": null
    },
    {
      "user": "LaurentiuS",
      "text": "@sudhackar You're right. The EIP is currently 0x008A224B and the address 0x75CB0CD0 => 0x75CB0CD0-0x008A224B-0x5 and it gives 0x7540ea80, which is exactly what CE formatted. Thanks",
      "time": null
    },
    {
      "user": "Anton Kukoba",
      "text": "Do you take into account ASLR? Do you generate your jump according to the USER32.DLL current address, or just hope that next time the process starts the offset will be the same?",
      "time": null
    },
    {
      "user": "LaurentiuS",
      "text": "@AntonKukoba Yes. I get the base from PEB, halt the process on entry with jmp -2 so that the loader can fill the LDR structure (where I get the base of modules), parse the IAT and get the absolute function address.",
      "time": null
    }
  ],
  "answers_data": []
}