{
  "title": "How can I get the byte size of an operand in IDA Pro?",
  "link": "https://reverseengineering.stackexchange.com/questions/19843/how-can-i-get-the-byte-size-of-an-operand-in-ida-pro",
  "content": "I am trying to get the byte size of all operands in a given instruction from IDA Pro. At first I tried using GetOperandValue(ea,n) to see how large the value was and calculate how many bytes were necessary to store that value, but it doesn't return leading zeros, which means that it doesn't work.\n\nNow I am trying to use OpHex(ea,n) to get the answer,  but it's just returning True (as do OpDecimal, OpBinary, and OpOctal).\n\nHow can I find the number of bytes used for operands of a particular instruction and why is OpHex returning true?\n\nEdit: My current solution works, but I would still like one that is more technically correct and bulletproof. Right now I am just using GetOperandValue(ea, op) to get both operands for all instructions (even if they have neither or only one) and then checking to make sure the operand value is greater than FF. If It's greater than FF I just assume it is an address, which in this case is four bytes. If both operands meet this condition, I assign the size to be eight bytes.\n\nThis works for the moment, but will encounter difficulties in eventual moves to other architectures (right now I'm just working with x86-64).\n\n",
  "votes": "4",
  "answers": 3,
  "views": "2k",
  "tags": [
    "ida",
    "idapython",
    "elf"
  ],
  "user": "theTheodidact",
  "time": "Nov 16, 2018 at 18:49",
  "comments": [
    {
      "user": "pudi",
      "text": "Do you mean a value in an opcode instruction like mov or the size of a data structure to which some pointer is pointing?",
      "time": null
    },
    {
      "user": "theTheodidact",
      "text": "The size of the operand(s) in an opcode instruction, not the size to which it is pointing. To recreate the relocation I need to know how many bytes to overwrite with addresses.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Module ida_ua now contains a function get_dtype_size, which seems to implement @WHsT's answer.\n\nAssuming you have an instruction i, you can use it e.g. like this:\n\nida_ua.get_dtype_size(i.Op1.dtype))\n\n",
      "votes": "1",
      "user": "langlauf.io",
      "time": "Jun 17, 2022 at 15:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "theTheodidact",
          "text": "I no longer have the ability to test this; marking as answered, unless someone tags me in the comments that this doesn't work. Thanks @langlauf.io",
          "time": null
        }
      ]
    },
    {
      "content": "There doesn't seem to be a straightforward way to achieve this. But you can take a look at this page of the IDA SDK documentation.\n\nAccording to the description of the previous page, we can write a little helper function:\n\n```\ndef size_of_operand(op):\n    tbyte = 8\n    dt_ldbl = 8\n    n_bytes = [ 1, 2, 4, 4, 8,\n            tbyte, -1, 8, 16, -1,\n            -1, 6, -1, 4, 4,\n            dt_ldbl, 32, 64 ]\n    return n_bytes[op.dtype]\n\n```\nNow we can use command like\n\n```\ninsn = idautils.DecodeInstruction(ScreenEA())\nindex_of_operand = 0\nsize_of_operand(insn.Operand[index_of_operand])\n\n```\nto get the size of an operand.\n\nFor example, for xor al, al, it returns 1. For pop ebp, it returns 4.\n\nNote: refer to Porting from IDAPython 6.x-7.3, to 7.4\n\n",
      "votes": "3",
      "user": "0xC0000022L",
      "time": "Jul 14, 2023 at 23:13",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Are You Loooking for some thing like\n\n```\nMessage(\"%s  \n\" , GetCurrentLine());\nMessage(\"%x  \n\" , ItemSize(ScreenEA()));\n\n```\nthis will give results as below\n\n```\n.text:010328BB 56                            push    esi\n1\n.text:010328BC BE 10 42 05 01                mov     esi, offset unk_1054210\n5\n.text:010328C1                               cmp     byte_1054309, bl\n6\n.text:010328C1 38 1D 09 43 05 01             cmp     byte_1054309, bl\n6\n\n```\nNote: refer to Porting from IDAPython 6.x-7.3, to 7.4\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Jul 14, 2023 at 23:13",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Seems the inquirer is only interested in the size of the operands, not the instructions overall. But this is close.",
          "time": null
        },
        {
          "user": "theTheodidact",
          "text": "Yes, @0xC0000022L is correct.",
          "time": null
        }
      ]
    }
  ]
}