{
  "title": "Identify strings shared between multiple files from the Linux command line",
  "link": "https://reverseengineering.stackexchange.com/questions/27262/identify-strings-shared-between-multiple-files-from-the-linux-command-line",
  "content": "Given a set of arbitrary files, what's the best way to identify the text strings shared between them (either in all files or a subset of them) from the Linux command line?\n\nThis would be useful for quickly identifying ways to write Yara rules for clusters of similar malicious files (for instance, malicious executables).\n\n",
  "votes": "1",
  "answers": 1,
  "views": "161",
  "tags": [
    "linux",
    "strings",
    "command-line"
  ],
  "user": "recvfrom",
  "time": "Mar 17, 2021 at 21:08",
  "comments": [],
  "answers_data": [
    {
      "content": "Here's one approach, for malicious files in a directory named malware:\n\n```\nfind malware/ -type f | xargs -n1 -P1 -I{} sh -c 'strings {} | sort | uniq' | sort | uniq -c | sort -n\n\n```\nThe output will look something like the following, where the first number on each line is the number of files containing the string:\n\n```\n      ...\n      1 Sleep\n      ...\n      2 JFIF\n      2 SetBkColor\n      ...\n      5 !This program cannot be run in DOS mode.\n      5 t@PW\n      5 @tVH\n      ...\n\n```\nOne useful variation of this when the input files are Windows executables is using strings -el instead of strings, which will cause UTF-16 little-endian strings (also known as wide character strings) to be shown.\n\nTo tie string sequences back to the corresponding files use strings -f malware/* | grep <string>.\n\n",
      "votes": "4",
      "user": "recvfrom",
      "time": "Apr 6, 2021 at 17:47",
      "is_accepted": true,
      "comments": []
    }
  ]
}