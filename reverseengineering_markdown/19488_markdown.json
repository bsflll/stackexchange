{
  "title": "Move twice, from and to the same location",
  "link": "https://reverseengineering.stackexchange.com/questions/19488/move-twice-from-and-to-the-same-location",
  "content": "I'm trying to reverse a function and I came across these lines inside the function:\n\n```\n1. call    ds:HeapAlloc\n2. mov     [ebp+var_4], eax\n3. mov     eax, [ebp+var_4]\n\n```\nWhy is line 3 needed? If I need to save the result, line 2 saved that and EAX already contains the result.\n\n",
  "votes": "3",
  "answers": 2,
  "views": "445",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "Moshe D",
  "time": "Sep 30, 2018 at 19:41",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "It might be that the binary is not optimized and the line 3 is part of the next instruction that uses the HeapAlloc’s result",
      "time": null
    },
    {
      "user": "Moshe D",
      "text": "@PawełŁukasik even if it's in used in the next instruction EAX already has the result/",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's not needed at all.\n\nHowever, some compilers may generate that assembly when compiled without optimization.\n\nFor example, gcc -O0 generates: (from godbolt)\n\n```\nf():\n  push rbp\n  mov rbp, rsp\n  sub rsp, 16\n  call fake_heapalloc()\n  mov DWORD PTR [rbp-4], eax\n  mov eax, DWORD PTR [rbp-4]\n  mov edi, eax\n  call g(int)\n  nop\n  leave\n  ret\n\n```\nfrom C++ source code\n\n```\nint fake_heapalloc();\nvoid g(int i);\nvoid f(){\n    int i;\n    i=fake_heapalloc();\n    g(i);\n}\n\n```\nBecause it's not optimized, the i is stored on the stack (instead of in a register) and the redundant move to/from stack code is generated.\n\nAlternatively, some programmer may manually insert the assembly instruction there to... I don't know, it's unlikely.\n\n",
      "votes": "3",
      "user": "user202729",
      "time": "Sep 30, 2018 at 15:49",
      "is_accepted": true,
      "comments": [
        {
          "user": "jpa",
          "text": "Third alternative is if the variable is marked volatile: volatile int i;. A bit rare to have volatile variables on stack though.",
          "time": null
        }
      ]
    },
    {
      "content": "This is to save the value on the stack and continue to work with that value in further instruction(s) as already mentioned in the comments. This happens if no optimization is done.\n\nYou have to look at it separately.\nConsider this in pseudocode.\n\n```\nvar_4 = HeapAlloc()\nfunc1(var_4)\n\n```\nThen the result would be similar to your assembler output namely:\n\n```\n1. call    ds:HeapAlloc\n2. mov     [ebp+var_4], eax\n3. mov     eax, [ebp+var_4]\n4. push    eax\n5. call    func1\n\n```\nAnd in that case you are right, the value is still in eax. \n\nBut now consider that:\n\n```\nvar_4 = HeapAlloc()\nbetween_func()\nfunc1(var_4)\n\n```\nThe assembler output would be similar to this\n\n```\n1. call    ds:HeapAlloc\n2. mov     [ebp+var_4], eax\n3. call    between_func\n4. mov     eax, [ebp+var_4]\n5. push    eax\n6. call    func1\n\n```\nYou can refer a pseudocode line to a section of the assembler code.\n\nCorresponds to:\n\n```\n1. call    ds:HeapAlloc\n2. mov     [ebp+var_4], eax\n\n```\nCorresponds to:\n\n```\n3. call    between_func\n\n```\nCorresponds to:\n\n```\n4. mov     eax, [ebp+var_4]\n5. push    eax\n6. call    func1\n\n```\nAnd if you omit the between_func() then you will get to the result you have. Concluded, the two instructions are compiled independently. \n\n",
      "votes": "3",
      "user": "pudi",
      "time": "Sep 30, 2018 at 16:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "Megabeets",
          "text": "Apparently, it is not the presented case. There is no call    between_func in OP's question. Unless I'm missing something, there's no reason for omitting the between_func().",
          "time": null
        },
        {
          "user": "pudi",
          "text": "Sorry for the vagueness, I maybe have to edit that. The between_func is inserted by me to illustrate the case where something is in between the two operations (that changes eax). It should clarify the separation and independence of the instructions in case of no optimization.",
          "time": null
        },
        {
          "user": "Megabeets",
          "text": "Which is not the case presented in the original question. I mean, while your answer is true and well structured (I really liked it tbh), it doesn't answers the asked question except the \"This happens if no optimization is done\" part.",
          "time": null
        }
      ]
    }
  ]
}