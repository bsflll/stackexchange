{
  "title": "Hex-Rays function signature does not match demangled name",
  "link": "https://reverseengineering.stackexchange.com/questions/17269/hex-rays-function-signature-does-not-match-demangled-name",
  "content": "From the demangled name, I know that a function takes an std::string const& as a parameter but when generating psuedo-c code with Hex-Rays' decompiler it autodetects the parameters as (int a1, int a2, int a3)\n\nHow can I fix the function signature Hex-Rays' is generating?\n\n\n\n```\nint __fastcall EncodeUtil::getDecryptStr(int a1, int a2, int a3)\n{\n  int v3; // r7\n  unsigned int i; // r5\n  char v5; // r6\n  int v7; // [sp+4h] [bp-1Ch]\n  int v8; // [sp+8h] [bp-18h]\n\n  v7 = a2;\n  v8 = a3;\n  v3 = a1;\n  HttpUtility::URLDecode(&v7);\n  for ( i = 0; i < *(_DWORD *)(v7 - 12); ++i )\n  {\n    sub_3B25D0(&v7);\n    v5 = byte_41A7DD[i & 7];\n    *(_BYTE *)(v7 + i) ^= v5;\n    sub_3B25D0(&v7);\n    if ( !*(_BYTE *)(v7 + i) )\n    {\n      sub_3B25D0(&v7);\n      *(_BYTE *)(v7 + i) ^= v5;\n    }\n  }\n  sub_3B2E20(v3, &v7);\n  sub_3B1CCC(&v7);\n  return v3;\n}\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "383",
  "tags": [
    "ida",
    "arm",
    "hexrays",
    "strings"
  ],
  "user": "armnotstrong",
  "time": "Jan 26, 2018 at 18:14",
  "comments": [
    {
      "user": "EWD-0-",
      "text": "It looks like they have different calling conventions.",
      "time": null
    },
    {
      "user": "perror",
      "text": "@armnostrong: You should have specified that you are dealing with ARM targets...",
      "time": null
    },
    {
      "user": "Avery3R",
      "text": "@armnotstrong: Do you know what compiler was used? The structure of an std::string is going to vary wildly based upon that",
      "time": null
    },
    {
      "user": "armnotstrong",
      "text": "@Avery3R all I know is that this was a project of cocos2dx compiled for android device",
      "time": null
    },
    {
      "user": "armnotstrong",
      "text": "@perror sorry for the inconvenience",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It looks like hex-rays mistakenly thought there were three parameters instead of two. If you look at the start of the function's disassembly R1 and R2 are not saved, only R0 is. You should be able to just change the function signature to int __fastcall EncodeUtil::getDecryptStr(void* pString). The default key to do so is Y. If you have a struct definition for std::string you can replace the void* in the signature with an std::string*\n\n",
      "votes": "1",
      "user": "Avery3R",
      "time": "Jan 25, 2018 at 2:35",
      "is_accepted": true,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "FYI PUSH {R0-R2} saves R0, R1 and R2.",
          "time": null
        },
        {
          "user": "Avery3R",
          "text": "Ah yeah, I meant saved in another register to be used within this function later, like it did with MOV R7, R0. R1 and R2 are definitely used somewhere in this function later, but I'm willing to bet they're assigned to first before they're read from.",
          "time": null
        }
      ]
    }
  ]
}