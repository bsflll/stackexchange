{
  "title": "Can a basic-block have more than 2 outgoing edges?",
  "link": "https://reverseengineering.stackexchange.com/questions/11222/can-a-basic-block-have-more-than-2-outgoing-edges",
  "content": "For the ease of analysis (i.e., static analysis), I am planning to convert a control-flow graph, of a function, into a spanning tree by removing the backward edges. I wonder whether this spanning tree can be considered as a binary tree? That is, is it possible for a basic-block to have more than 2 out-going edges?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "352",
  "tags": [
    "disassembly",
    "static-analysis",
    "control-flow-graph"
  ],
  "user": "Maggie",
  "time": "Nov 1, 2015 at 9:28",
  "comments": [],
  "answers_data": [
    {
      "content": "It depends on target's assembly language and compiler which your executable was compiled with.\nFor example C language switch/case clause may be implemented in a manner which allows your tree to be not binary.\n\n```\nswitch (a)\n{\ncase 1:\n    return 1;\nbreak;\ncase 2:\n    return 10;\nbreak;\ncase 3:\n    return 100;\nbreak;\ncase 4:\n    return 1000;\nbreak;\ncase 5:\n    return 10000;\nbreak;\ndefault:\n    return -1;\nbreak;\n}\n\n\n00000000004004ed <main>:\n  4004ed:   55                      push   %rbp\n  4004ee:   48 89 e5                mov    %rsp,%rbp\n  4004f1:   89 7d fc                mov    %edi,-0x4(%rbp)\n  4004f4:   48 89 75 f0             mov    %rsi,-0x10(%rbp)\n  4004f8:   83 7d fc 05             cmpl   $0x5,-0x4(%rbp)\n  4004fc:   77 47                   ja     400545 <main+0x58>\n  4004fe:   8b 45 fc                mov    -0x4(%rbp),%eax\n  400501:   48 8d 14 85 00 00 00    lea    0x0(,%rax,4),%rdx\n  400508:   00 \n  400509:   48 8d 05 c4 00 00 00    lea    0xc4(%rip),%rax        # 4005d4 <_IO_stdin_used+0x4>\n  400510:   8b 04 02                mov    (%rdx,%rax,1),%eax\n  400513:   48 63 d0                movslq %eax,%rdx\n  400516:   48 8d 05 b7 00 00 00    lea    0xb7(%rip),%rax        # 4005d4 <_IO_stdin_used+0x4>\n  40051d:   48 01 d0                add    %rdx,%rax\n  400520:   ff e0                   **jmpq   *%rax**\n  400522:   b8 01 00 00 00          mov    $0x1,%eax\n  400527:   eb 21                   jmp    40054a <main+0x5d>\n  400529:   b8 0a 00 00 00          mov    $0xa,%eax\n  40052e:   eb 1a                   jmp    40054a <main+0x5d>\n  400530:   b8 64 00 00 00          mov    $0x64,%eax\n  400535:   eb 13                   jmp    40054a <main+0x5d>\n  400537:   b8 e8 03 00 00          mov    $0x3e8,%eax\n  40053c:   eb 0c                   jmp    40054a <main+0x5d>\n  40053e:   b8 10 27 00 00          mov    $0x2710,%eax\n  400543:   eb 05                   jmp    40054a <main+0x5d>\n  400545:   b8 ff ff ff ff          mov    $0xffffffff,%eax\n  40054a:   5d                      pop    %rbp\n  40054b:   c3                      retq   \n\n```\nfor example \n\n```\n400520: ff e0                   **jmpq   *%rax**\n\n```\ninstruction implements switch.case jumps in this example. Obviously the basic block which ends with this jump will have 6 out-going edges. \n\nAny other indirect jump may also produce such a situation.\n\nThere are some good examples in this article.\nSo, the answer to your question is definitely yes, there are basic blocks with more than 2 out-going edges and your spanning tree can not be considered as binary.\n\n",
      "votes": "4",
      "user": "w s",
      "time": "Nov 1, 2015 at 12:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "Maggie",
          "text": "I agree with your answer. But, if its a indirect jmp, then is it even possible to determine the jmp targets without using any program analysis technique such as VSA (value set analysis). In such situation (i.e., unable to resolve the indirect jump staticly, which is common most of the cases). Is it safe to assume it jumps to only 1 target?",
          "time": null
        },
        {
          "user": "w s",
          "text": "If I understand your question correctly it is not safe. The simplest example that comes to mind is C++ code with calls to virtual functions.",
          "time": null
        },
        {
          "user": "Jongware",
          "text": "A switch can also be compiled as jmp [table+4*offset], and in that case you may have lots of branches.",
          "time": null
        },
        {
          "user": "Ian Cook",
          "text": "The ARM architecture has a couple of 32-bit Thumb instructions,TBB and TBH, for simple jump table calculations like this. infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/â€¦",
          "time": null
        }
      ]
    }
  ]
}