{
  "title": "Find out version of statically linked MFC from an exe",
  "link": "https://reverseengineering.stackexchange.com/questions/27421/find-out-version-of-statically-linked-mfc-from-an-exe",
  "content": "I have an exe with symbols stripped that I am trying to reverse engineer. I know the library is linked with MFC but I don't know which version. (Therefore, I can't use something like FLIRT signatures etc. to import known symbols and help reverse engineering).\n\nIs there a way to deduce the version of MFC statically linked into an exe from the exe itself?\n\nI have tried some trial and error approaches but really it caused a lot of trouble as some symbols matched and others don't. I'm looking for a tried and tested way - is something embedded in the metadata of an exe?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "151",
  "tags": [
    "windows",
    "dynamic-linking",
    "mfc"
  ],
  "user": "H Bellamy",
  "time": "Apr 8, 2021 at 13:03",
  "comments": [],
  "answers_data": [
    {
      "content": "All statically linked MFC binaries I've seen always include strings for some internal classes. The naming convention can be found in afximpl.h:\n\n```\n#define AFX_WNDCLASS(s) \\\n    _T(\"Afx\") _T(s) _T(_MFC_FILENAME_VER) _STATIC_SUFFIX _UNICODE_SUFFIX _DEBUG_SUFFIX\n\n#define AFX_WND             AFX_WNDCLASS(\"Wnd\")\n#define AFX_WNDCONTROLBAR   AFX_WNDCLASS(\"ControlBar\")\n#define AFX_WNDMDIFRAME     AFX_WNDCLASS(\"MDIFrame\")\n#define AFX_WNDFRAMEORVIEW  AFX_WNDCLASS(\"FrameOrView\")\n#define AFX_WNDOLECONTROL   AFX_WNDCLASS(\"OleControl\")\n\n```\nSo, for example, AfxWnd100s means that the program has been compiled with the static release MFC 10.0 library while AfxWnd140sd will be present in the static debug build of MFC 14.0 (VS2015). The string will be in Unicode (UTF-16) and with the u suffix for Unicode builds (e.g. AfxWnd140sud).\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Apr 8, 2021 at 20:22",
      "is_accepted": true,
      "comments": []
    }
  ]
}