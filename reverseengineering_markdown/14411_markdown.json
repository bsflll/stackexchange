{
  "title": "How ret know where eip is saved?",
  "link": "https://reverseengineering.stackexchange.com/questions/14411/how-ret-know-where-eip-is-saved",
  "content": "I'm learning assembly and I have one question.\nExample:\n\n```\nint main()\n{\n    foo(a);\n}\n\nint foo (x)\n{\n    return 0;\n}\n\n```\nwhen the foo function returns to main the ret instruction is executed. How does the ret instruction knows where the pushed EIP register is saved?\n\nI know that before the foo function is called the EIP is pushed to the stack, but when ret in foo is executed, what the ret really does? \n\nThanks for your help\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "ciccio",
  "time": "Jan 15, 2017 at 18:49",
  "comments": [
    {
      "user": "Jongware",
      "text": "That is all over the Intel manuals. Short answer (those manuals are quite long): there is only one place where such a value is stored, the stack.",
      "time": null
    },
    {
      "user": "phuclv",
      "text": "felixcloutier.com/x86/ret",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The ret instruction actually performs quite a simple task.\n\nIt is composed of two operations in the CPU:\n\nTherefore, the ret instruction never really \"knows\" or \"finds out\" where the previous eip value is stored. ret just assumes the topmost stack variable is the previous eip.\n\nIt is the responsibility for the developer (or, more commonly now - the compiler) to make sure that assumption is met whenever a ret instruction is executed by the CPU.\n\nMaking sure that assumption is valid is one of what some might say is the worst constraint enforced on the stack, and the reason why every function must make sure it leaves the stack in the same state it entered it.\n\nIt also makes some assembly tricks (such as hooking) a bit more complex, but I won't go into that here.\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Feb 23, 2020 at 9:02",
      "is_accepted": false,
      "comments": []
    }
  ]
}