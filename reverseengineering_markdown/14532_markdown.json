{
  "title": "Decompiling 64bit ARMv8 Android .so library",
  "link": "https://reverseengineering.stackexchange.com/questions/14532/decompiling-64bit-armv8-android-so-library",
  "content": "I know IDA Pro can disassemble them to assembly code, but are there tools to decompile 64bit ARMv8 Android .so shared libraries to C?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "8k",
  "tags": [
    "ida",
    "android",
    "decompile",
    "decompiler",
    "libraries"
  ],
  "user": "user1118764",
  "time": "Jan 31, 2017 at 7:14",
  "comments": [],
  "answers_data": [
    {
      "content": "The first tool is IDA decompiler (a plugin for IDA).\nAs far as I know for now IDA has decompilers for x86, x64, ARM32, ARM64, PPC, PPC64, and MIPS (see here for more details, each of them costs additional money and should be purchased separately).\n\nThe second is hopper which has much weaker decompiler and claims to be able to decompile arm64.\n\nThere is also a new open source tool called Ghidra from the NSA (Direct download link is unavailable from some countries, but VPN helps). It supports decompilation for a lot of platforms (because it uses the same intermediate representation for all processors) and as opposite to IDA its processor definitions are configurable and can be updated (see the sleigh language manual).\n\nThe code generated by Ghidra may be less polished and less accurate, but you have a possibility, for example, to add new instructions when you need them - see here an example (first I found, I'm sure there are more)\n\n",
      "votes": "4",
      "user": "w s",
      "time": "Aug 20, 2020 at 20:40",
      "is_accepted": false,
      "comments": [
        {
          "user": "Nordwald",
          "text": "Sorry, I misread - you're right. Sadly there is no snowman support for ARMv8",
          "time": null
        }
      ]
    }
  ]
}