{
  "title": "Compression format used for various data (images, text, etc.) in a 1997 video game",
  "link": "https://reverseengineering.stackexchange.com/questions/31185/compression-format-used-for-various-data-images-text-etc-in-a-1997-video-ga",
  "content": "I've been trying to reverse engineer the format of data files from the 1997 video game Helicops. I have experience reverse engineering binary files from games of this period but limited exposure to compression schemes.\n\nI've been able to figure out the header format (which I've documented here; it uses an XOR \"cipher\" with the key 0xAA), but the individual data blocks within each file use a form of compression I haven't been able to figure out.\n\nI'm certain the data are compressed: the header in each DAT file contains a table listing each data block's name, starting offset, and two values: one is the length of the data block in the DAT file and the other appears to be the data block's uncompressed length (notably, it's 768 for multiple data blocks that appear to be colour tables; 768 = 256 colours * 3 bytes/colour and these data blocks have names that end with \"ACT\", i.e., Adobe Color Table, and some include obvious grayscale ramps).\n\nMy full notes on the compression scheme are here, but I haven't been able to figure out much. Here's a summary:\n\nI've uploaded a sample DAT file, PIC.DAT, here. It contains substantial quantities of ASCII text that make identifying compression-related bytes fairly easy. A list of its data blocks (parsed from its header) is here.\n\nHere are some sample data from the data block starting at offset 184456 in PIC.DAT (PIC.DAT's header identifies this block as being associated with the third mission set, \"Data Space Demon\", and the first mission in that set, \"Tower Attack\"; note that these strings appear in the data below):\n\nThere are additional sample data here, including colour palettes (some of which appear to be minimally-compressed).\n\nI'd appreciate any suggestions regarding how this compression format might work! I'll credit any assistance in the file format documentation I'm writing.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "246",
  "tags": [
    "decompress"
  ],
  "user": "Reign of Error",
  "time": "Nov 27, 2022 at 0:40",
  "comments": [],
  "answers_data": [
    {
      "content": "It's a very similar compression method to that used in\nthis question.\n\nSpecifically, the compressed data begins with a flag byte. Each bit of this in turn (from bit 0 to bit 7) indicates that the next decompressed byte(s) are generated by -\n\nHence 0xFF is 8x 1s and represents 8 uncompressed bytes.\n\nYour example file begins with 2 of these, as you identified.\n\nThese are then followed by an FE = 0b11111110\nSo this is followed by -\n\nI think the length part of the compressed byte pair is likely given by 3 + the last nibble (in this case 3+4=7.)\nI haven't quite found an interpretation for the offset/location part of these 2 bytes that works consistently yet though.\n\n",
      "votes": "2",
      "user": "Ian Cook",
      "time": "Jan 5, 2023 at 15:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "Reign of Error",
          "text": "Thanks, this is very helpful! Knowing this I'm going to take another look at the color palettes (some of which are here); given the relative simplicity of their data, they should help to narrow down the meaning of the compressed byte pairs.",
          "time": null
        }
      ]
    },
    {
      "content": "The mix of readable text fragments and high byte values makes me suspect LZSS but it may also be some simple RLE-like algorithm. To be completely sure youâ€™d need to find the code which decompresses this data in the executable code.\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Dec 4, 2022 at 23:40",
      "is_accepted": false,
      "comments": []
    }
  ]
}