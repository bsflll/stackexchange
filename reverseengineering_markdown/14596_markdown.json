{
  "title": "C-sky CPU reverse-engineering",
  "link": "https://reverseengineering.stackexchange.com/questions/14596/c-sky-cpu-reverse-engineering",
  "content": "I am trying to RE a firmware for a TV STB, its based on a  GX3201 chip which is based on C-sky CPU (CK610M I think).\n\nI am stuck in the following points :\n\nDoes anyone have experience with these chips?\n\nUsing the toolchain of the CPU and disassembling the vectors.o found in the lib directory gave me this : \n\n```\n00000458 <__reset_vector>: \n458:    711b lrw        r1, 0xA2A25441 \n45a:    0f21 cmpne      r1, r2 \n45c:    e802 bf         0x462 \n45e:    1082 mfcr       r2, ss2 \n460:    1093 mfcr       r3, ss3 \n00000462 <skip_SS_ATAG>: \n462:    0f21 cmpne      r1, r2 \n464:    e003 bt         0x46c \n466:    7218 lrw        r2, 0x0 // from address pool at 0x4c8 \n468:    35f3 bseti      r3, r3, 31 \n46a:    9302 st r3, (r2, 0)\n\n```\n```\nelf32-csky-big\n (header big endian, data big endian)\n  csky\nelf32-csky-little\n (header little endian, data little endian)\n  csky\nelf32-little\n (header little endian, data little endian)\n  csky\nelf32-big\n (header big endian, data big endian)\n  csky\nsrec\n (header endianness unknown, data endianness unknown)\n  csky\nsymbolsrec\n (header endianness unknown, data endianness unknown)\n  csky\nverilog\n (header endianness unknown, data endianness unknown)\n  csky\ntekhex\n (header endianness unknown, data endianness unknown)\n  csky\nbinary\n (header endianness unknown, data endianness unknown)\n  csky\nihex\n (header endianness unknown, data endianness unknown)\n  csky\n\n elf32-csky-big elf32-csky-little elf32-little elf32-big srec \n csky elf32-csky-big elf32-csky-little elf32-little elf32-big srec   \n\n symbolsrec verilog tekhex binary ihex csky symbolsrec verilog tekhex binary ihex \n\n```\n",
  "votes": "9",
  "answers": 2,
  "views": "4k",
  "tags": [
    "ida",
    "disassembly",
    "embedded"
  ],
  "user": "Steavebba",
  "time": "Dec 17, 2018 at 10:25",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Too little info. What's the STB model/manufacturer? Firmware downloads? Do they provide GPL sources? binwalk output?",
      "time": null
    },
    {
      "user": "Steavebba",
      "text": "STB info : 6605-dvbs2 CHIp =GX3201 CPU family=CSLY the chip is manifactured by nationalchip.com/en",
      "time": null
    },
    {
      "user": "Steavebba",
      "text": "i have found the trace of source code for the same device at this link link   but the  ftp server is down at the moment.   the only thing that i have is cksy toolchain for ecos operating system i have found a header file ck_opcodes.h with mips like instruction set am trying to write radar2 plugin with the opcodes in this file.",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "I'm pretty sure r2 already supports MIPS, why are you writing a plugin?",
      "time": null
    },
    {
      "user": "Steavebba",
      "text": "When i run binwalk against the lib files of the csky-ecos toolchain i get this.          ELF, 32-bit LSB relocatable, Motorola RCE, version 1 (SYSV)   binwalk -A outputs nothing....!",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It seems very likely that this chip is indeed MIPS, so any MIPS disassembler should work. Remember to try both little-endian and big-endian variants. For finding the entrypoint, see here: Reverse Engineering MIPS Bootloader\n\nNote that it may be possible that the firmware is packed or encrypted (check binwalk's entropy analysis); in that case reading it directly from the flash chip may be necessary.\n\nEDIT: So, apparently the code is not MIPS after all. Going by the objdump output, the instruction set seems to be a derivative of the Motorola/Freescale MCORE (previously Motorola RCE), even if they call it \"csky\". You should be able to disassemble raw binary by specifying binary file format and architecture to objdump, e.g.:\n\n```\nobjdump -D -b binary -m csky file.bin\n\n```\nIn case you don't get good results, try adding -EB or -EL to force big-endian or little-endian disassembly. Note that sometimes you may get nonsense disassembly in case there is data intermixed with code (-D forces disassembly of the whole file).\n\nEDIT2:  C-sky support has been added to official binutils source tree. The commit message says:\n\nEDIT3: C-SKY and Motorola MCore architecture support was added in Radare2 reverse engineering framework. You can use it with -a mcore radare2 switch, also it should recognize the architecture in the ELF file directly.\n\n",
      "votes": "5",
      "user": "Anton Kochkov",
      "time": "Jul 10, 2020 at 15:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "Steavebba",
          "text": "thank you for the hints, the bootloader is not packed, i can see all the strings,  i found the complete toolchain with the cross compilers, how can this help me ?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "if the toolchain has objdump, try using it to disassemble the firmware.",
          "time": null
        },
        {
          "user": "Steavebba",
          "text": "I cant disassemble directly the firmware with objdump (unknown file format) but disassembling the vectors.o in the lib directory gave me this :  '00000458 <__reset_vector>:  458:\t711b      \tlrw\tr1, 0xA2A25441  45a:\t0f21      \tcmpne\tr1, r2  45c:\te802      \tbf\t0x462  45e:\t1082      \tmfcr\tr2, ss2  460:\t1093      \tmfcr\tr3, ss3  00000462 <skip_SS_ATAG>:  462:\t0f21      \tcmpne\tr1, r2  464:\te003      \tbt\t0x46c  466:\t7218      \tlrw\tr2, 0x0\t// from address pool at 0x4c8  468:\t35f3      \tbseti\tr3, r3, 31  46a:\t9302      \tst\tr3, (r2, 0)'",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Steavebba please add this info to the question, as well as output of \"objdump -i\"",
          "time": null
        },
        {
          "user": "Steavebba",
          "text": "dose the BF instruction  belong to the MIPS instruction set, i can find it in the M-CORE doc a branch instruction (BR, BT, BF) that has a backwards branch distance between 4 and 64 instructions must be detected. This short backwards branch instruction is called the sbb.",
          "time": null
        }
      ]
    },
    {
      "content": "To clarify this thread:\n\nC-Sky CPU's are a 16/32 bit variable length instruction set ISA in SoC & PoC packages, that appear to be MIPS-like, that can be switched to execute code in big or little endian. The CK610M is a v1 ISA, which has the MMU, so it is able to run Linux, which contains support as of v4.19.\n\nThere are currently (since October 2018) a $6US C-Sky Development SBC's supporting the CK610M in the gx6605s SoC package produced by NationalChip. QEMU supports boot C-SKY v1 & v2 ISA.\n\nhttps://c-sky.github.io/docs/gx6605s.html\n\n",
      "votes": "4",
      "user": "Paul Wratt",
      "time": "Mar 20, 2019 at 10:54",
      "is_accepted": false,
      "comments": []
    }
  ]
}