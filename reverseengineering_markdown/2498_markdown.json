{
  "title": "Modifying step value that affects xmm# float value",
  "link": "https://reverseengineering.stackexchange.com/questions/2498/modifying-step-value-that-affects-xmm-float-value",
  "content": "I don't have much experience with assembly and I am trying to change a step value that changes a final value, these are the opcodes that I am working with and this is how they are set:\n\n```\nmovss xmm0,[eax+30]  \naddss xmm0,[esi+00000094]\nmovss [eax+30],xmm0\nmovss xmm0,[esi+00000098]\naddss xmm0,[eax+34]    \nmovss [eax+34],xmm0\nmovss xmm0,[esi+0000009C]\naddss xmm0,[eax+38] \nmovss [eax+38],xmm0 \n\n```\nNow so far I think the addss lines are the ones responsible for increasing or decreasing the xmm0 float value in:\n\n```\nmovss [eax+30],xmm0\nmovss [eax+34],xmm0\nmovss [eax+38],xmm0\n\n```\nWhat I am trying to achieve is to multiply the step value that is being added to xmm0 in the addss lines:\n\n```\naddss xmm0,[esi+00000094]\naddss xmm0,[eax+34]\naddss xmm0,[eax+38]\n\n```\nWhich I assume to be the [esi+00000094] [eax+34] [eax+38].\n\nI tried multiplying them by (float)2.00 (and other multiplying factors such as 1.50 and 0.20) like this\n\n```\naddss xmm0,[esi+00000094]*(float)2.00\naddss xmm0,[eax+34]*(float)2.00\naddss xmm0,[eax+38]*(float)2.00\n\n```\nBut of course my ignorance proved that this isn't the way to do it and since I have practically 0 knowledge in this field I decided to ask for help.\n\nA better explanation of what I think is going on here and what I am trying to do goes like this:\n\n```\naddss xmm0,[esi+00000094] == addss 31.00,[0.43]      <- 31 being the current/old\n                                                        value and 0.43 being the\n                                                        increment value that \n                                                        will add to 31\n\nmovss [eax+30],xmm0       == movss [XXXXXXXXX],31.43 <- XXX being the address\n                                                        that holds the new value\n                                                        and xmm0 the one that\n                                                        will copy the new value\n                                                        to the target\n                                                        address/register\n\n\n---what I am trying to do if I am correct---\n\n\naddss 31.00,[0.43*n]    <- n being a float point set by me (2.00 or 1.50 or 0.03)\n\nmovss [XXXXXXXXX],31.86 <- final value is copied to the target address with the\n                           intended increment/decrement (in case of 0.### float\n                           values) effectively set by me\n\n```\nCan anyone tell me the correct way to to this? I don't even know if the addss lines are the correct ones where I can modify the step value (the one that increases or decreases the last xmm0 value in movss [eax+30],xmm0 | movss [eax+34],xmm0 | movss [eax+38],xmm0).\n\nI am using [CE's] auto assembler tool to achieve this, modifying memory values.\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "x86"
  ],
  "user": "Shadow",
  "time": "Jul 17, 2013 at 17:34",
  "comments": [
    {
      "user": "APerson",
      "text": "Seems to have been cross-posted on stackoverflow.com/questions/17691105/â€¦",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "one way of achieving the end result could be by performing a trampoline and modifying the sequence of instructions similar to the logic shown below and reverting back to the original flow\n\nget instruction set manual from intel \na ready made reference (first google hit)\nhttp://www.rz.uni-karlsruhe.de/rz/docs/VTune/reference/\n\n```\nCPU Disasm\nCommand                                  Comments\nMOVSS   XMM0, DWORD PTR DS:[EAX+30]      ; FLOAT 31.00000  orginal float \nMOVSS   XMM1, DWORD PTR DS:[ESI+94]      ; FLOAT 0.4300000 original flaot\nMOVSS   XMM2, DWORD PTR DS:[ESI+9C]      ; FLOAT 2.000000   mov multiplier from location you chose to spare register\nMULSS   XMM1, XMM2                       ; FLOAT 0.0, 0.0, 0.0, 2.000000 multiply original float by multiplier\nADDSS   XMM0, XMM1                       ; FLOAT 0.0, 0.0, 0.0, 0.8600000 add modified result to original float\nMOVSS   DWORD PTR DS:[EAX+30], XMM0      ; FLOAT 0.0, 0.0, 0.0, 31.86000 return to flow\n\n```\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jul 17, 2013 at 19:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Shadow",
          "text": "I don't get it, is this for auto assembler as I mentioned? So I just copy that and paste there?",
          "time": null
        },
        {
          "user": "blabb",
          "text": "a blunt answer could be sorry i dont know and i dont spoonfeed any cheat engine worth its salt will have a few templates to inject code read your cheat engines manual see how to inject code alloc memory if there is no memory ask your cheat engine template to provide trampolining boiler plate code add the logic you want to implement a sample of which i gave as an answer execute the modified instruction to achieve the result should be simple enough if you spare few minutes getting to know your tool else infinte amount of copy paste wont help you",
          "time": null
        }
      ]
    }
  ]
}