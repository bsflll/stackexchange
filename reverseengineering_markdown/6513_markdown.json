{
  "title": "OSX where does getconf read its value",
  "link": "https://reverseengineering.stackexchange.com/questions/6513/osx-where-does-getconf-read-its-value",
  "content": "I'm not experienced at reverse engineering at all. I hope this basic question is suitable for this site. Basically I want to know where the value DARWIN_USER_CACHE_DIR is read from. I'm trying to trace the system calls like this:\n\n```\nsudo bash dtruss /usr/bin/getconf DARWIN_USER_CACHE_DIR -h -f -a\n\n```\nSo, it would follow any forked processes too. But, I cannot see any calls that would indicate where it originates from.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "793",
  "tags": [
    "osx"
  ],
  "user": "Newbie",
  "time": "Oct 21, 2014 at 11:35",
  "comments": [],
  "answers_data": [
    {
      "content": "Note: I don't know much about OSX, and wouldn't have answered if there had been another answer after 24 hours.\n\nAccording to Apple, getconf uses sysconf and confstr to find these configuration values, with confstr handling DARWIN_USER_CACHE_DIR. The confstr library function might well hard-code these values - if you check the glibc source, you see the glibc version of confstr hardcodes CS_PATH as well.\n\nHowever, the confstr manual page also states it can return error code EIO if there is an \"I/O error communicating with opendirectoryd(8)\". Which means these values might be opendirectory attributes as well. Check your dtruss output if there are any socket calls; if there aren't, the attributes are probably hard-coded in libc; else, these paths are probably hidden in the opendirectory configuration somewhere.\n\n",
      "votes": "3",
      "user": "Guntram Blohm",
      "time": "Oct 22, 2014 at 15:39",
      "is_accepted": false,
      "comments": []
    }
  ]
}