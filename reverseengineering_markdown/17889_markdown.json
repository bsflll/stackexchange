{
  "title": "Remove a mutex on windows (with debugger/disassembler)",
  "link": "https://reverseengineering.stackexchange.com/questions/17889/remove-a-mutex-on-windows-with-debugger-disassembler",
  "content": "I'd like to patch an app to avoid it to use/create a specific mutex, because this one prevents the app from running in multiple instances. I'm already able to close the mutex's handle with a program called Process Explorer, but I'd like to not do it every time...\n\nHave you any idea to help me? I'm really new to mutex, semaphores, and stuff like this, and I have no idea how I can erase it from the app.\n\n",
  "votes": "1",
  "answers": 3,
  "views": "2k",
  "tags": [
    "windows",
    "patching"
  ],
  "user": "sebastien finor",
  "time": "Jul 3, 2020 at 7:59",
  "comments": [],
  "answers_data": [
    {
      "content": "There are 2 methods to do do this:\n\n",
      "votes": "2",
      "user": "Remko",
      "time": "Jun 3, 2018 at 19:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "sebastien finor",
          "text": "I tried your second method but the mutex is still there, it just have a brand new name :o. Anyway, I'm just gonna nop some stuff near the mutex call ans see how it goes. Thanks for your answer! :)",
          "time": null
        },
        {
          "user": "Remko",
          "text": "Did you start the original process and the modified one? For the same reason as the original mutex name, you cannot launch multiple instances with the original name nor multiple instances with the new name. You should however be able to open the original exe and the modified one at the same time...",
          "time": null
        },
        {
          "user": "sebastien finor",
          "text": "Oh ok I see what you mean now. I just tried to launch twice the modified process. I thought changing the name of the mutex would corrupt it.",
          "time": null
        }
      ]
    },
    {
      "content": "You need to find the code which creates the mutex. I.e. the call to CreateMutex/OpenMutex API function. And then patch it by overwriting the opcodes.\nSo you'll need to learn how to disassemble and how to patch the code of the executable. If it's new for you, you should try from some crackme tutorial, which will teach you to do this.\n\n",
      "votes": "1",
      "user": "Anton Kukoba",
      "time": "Apr 4, 2018 at 13:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "sebastien finor",
          "text": "Thanks. no problem with that, i know quite good how it works. I just didn't know at all of mutex before and wasn't sure of what to shearch for :).",
          "time": null
        }
      ]
    },
    {
      "content": "I did it. First I replaced the first instructions of the subroutine calling Windows API's CreateMutex by the \"ret\" of this function (it wasn't only \"ret\", but \"ret xxxh\", i don't know why). Then, I avoided the error call when handle is 0 (null) with a simple \"jz\" to \"jmp\" change.\n\nEdit: I could also have nopped the call and the 3 arguments before it, instead of replacing the first instruction of the call by ret.\n\n",
      "votes": "0",
      "user": "sebastien finor",
      "time": "Jun 6, 2018 at 22:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "user22970",
          "text": "When calling a function, some arguments are pushed fo the stack and someone need to pop them for the program to keep it's execution correctly. That some is \"decided\" by the calling convention, it can be the caller, it can be fhe callee. Winapi uses the stdcall which states that the callee clears the stack from the arguments. Insted of poping x number of times to get rid of the argument, a ret n is performed. It basically remove n \"variables\" from the stack before returning. Without it, the program will execute incorrectly",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "I would like to offer another potential alternative, depending on what exactly the namespace of the mutex is.  A mutex, just like drive letters can be global or local. So if you are trying to run multiple instances of said application in different sessions and the application uses a name of the form L\"Global\\\\MutexName123\" you could patch the name to L\"Local\\\\MutexName123\\0\" in your binary (the \\0 is a result of the length difference between Global and Local).  See: MSDN documentation on Object Names",
          "time": null
        },
        {
          "user": "sebastien finor",
          "text": "Thanks amirag :).  And your idea is cool 0xC0000022L. Do you think I could change the mutex name to \"Local\\[Restofmutexname]\"  even if it is not Global\\\\ before?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@sebastienfinor: I don't think so. I'm fairly certain that it defaults to local already. However, keep in mind that this suggests that you aren't trying to run your program in different sessions, so my suggestion isn't applicable to your case.",
          "time": null
        }
      ]
    }
  ]
}