{
  "title": "Help needed to extract u-boot kernel & rootfs - nxp lpc 3143 processor",
  "link": "https://reverseengineering.stackexchange.com/questions/21158/help-needed-to-extract-u-boot-kernel-rootfs-nxp-lpc-3143-processor",
  "content": "I have a board where in principle aim at emulating a DVD-ROM loading iso file from a drive.\n\nThis board is running a ARM CPU with 32MB of ram and has no vga output.\nThe firmware update comes with 2 files called uImage and rootfs that needs to copied into the SDCARD.\n\nI have tried:\n\n```\n$ mkimage -l uImage\nGP Header: Size 9411c123 LoadAddr 7f1c7cb5\n\n$ mkimage -l rootfs\nImage Type:   Freescale IMX Boot Image  \nImage Ver:    2 (i.MX53/6/7 compatible)  \nMode:         PLUGIN  \nPlugin Data Size:     302835498 Bytes = 295737.79 KiB = 288.81 MiB  \nPlugin Code Size:     0 Bytes = 0.00 KiB = 0.00 MiB  \nPlugin Load Address:  6c9053ca  \nPlugin Entry Point:   3533782f  \nU-Boot Data Size:     302835498 Bytes = 295737.79 KiB = 288.81 MiB  \nU-Boot Load Address:  6c9053ca  \nU-Boot Entry Point:   3533782f  \n\n```\nFrom dumpimage\n\n```\n$ dumpimage -l rootfs  \nImage Type:   Freescale IMX Boot Image  \nImage Ver:    2 (i.MX53/6/7 compatible)  \nMode:         PLUGIN  \nPlugin Data Size:     302835498 Bytes = 295737.79 KiB = 288.81 MiB  \nPlugin Code Size:     0 Bytes = 0.00 KiB = 0.00 MiB  \nPlugin Load Address:  6c9053ca  \nPlugin Entry Point:   3533782f  \nU-Boot Data Size:     302835498 Bytes = 295737.79 KiB = 288.81 MiB  \nU-Boot Load Address:  6c9053ca  \nU-Boot Entry Point:   3533782f  \n\n$ dumpimage -l uImage  \nGP Header: Size 9411c123 LoadAddr 7f1c7cb5  \n\n```\nData part is strange as the file is 40MB and not 300MB by the way as shown above.\nI have tried removing the 64bit header of both and re-run all the above with no luck so far.\n\nI have seen a post for this device with a screenshot of the boot sequence, so it might be encrypted but not sure.\n\n\nI just want to add an additional driver/module to get higher Ethernet performance.\n\nIf someone here as experience in u-boot with Freescale i.MX that would be great.\n\nThe picture of the board:\n\n\n",
  "votes": "5",
  "answers": 2,
  "views": "2k",
  "tags": [
    "linux",
    "embedded"
  ],
  "user": "Armandooooo",
  "time": "Jun 28, 2022 at 8:51",
  "comments": [
    {
      "user": "Armandooooo",
      "text": "I have added extra information.",
      "time": null
    },
    {
      "user": "wisk",
      "text": "Values from mkimage look bogus to me. Could you shared the image? Or give a try with dumpimage?",
      "time": null
    },
    {
      "user": "Armandooooo",
      "text": "I have added the result of dumpimage in the thread but it shows the same result. You can find the complete SDCard image which contains the boot in version v1.30 here: mediafire.com/file/5fqybr87uefiled/…",
      "time": null
    },
    {
      "user": "Armandooooo",
      "text": "You can also find in the link below the latest firmware in v2.01-4 which is not the complete SD card image but just the update of file uImage and rootfs that are to replace the one in the SD image. gbatemp.net/download/x360key-xk3y-firmware.32248/…",
      "time": null
    },
    {
      "user": "wisk",
      "text": "Thanks for sharing. With OSFMount and Ext2sd, I was able to mount your SD card image. Unfortunately both uImage and rootfs seem to be encrypted (or compressed with an unknown way). Are you sure this is a i.MX SoC behind? Did you disassemble your key to check the reference on the chip?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "LPC3143 supports secure boot so probably this device has been configured for it. From the datasheet:\n\nIf you can get runtime access to the device, you may be able to dump the decrypted data; I don't see a way to decrypt these images statically.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Apr 21, 2019 at 17:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Armandooooo",
          "text": "Dear Igor, thank you for your answer, what do you mean exactly by \"get runtime access to the device\"?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Armandooooo e.g. serial console (UART) or JTAG",
          "time": null
        },
        {
          "user": "Armandooooo",
          "text": "There is a way to get a serial connection to it, but I don't know if it is UART or JTAG or anything else. Do you think doing the following would help progressing: eurasia.nu/…",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Armandooooo: yes, that looks like a good start",
          "time": null
        },
        {
          "user": "Armandooooo",
          "text": "Hi Igor, apparently there is no prompt after boot as per the link above. What should i look for then? A way to dump the encryption key?",
          "time": null
        }
      ]
    },
    {
      "content": "Sorry, I have no chance to answer this by any other way...\n\n@Armandooooo:\n\nThe MCU on your target PCB is a LPC3143, which was pre-programmed with the \"AES-VALID\" bit set in OTP at factory.\n\nThis means, OTP also holds the bootloader AES key which is a AES-128-CBC crypto key as per the MCU manual. So the bootloader is encrypted. This also applies to the Kernel itself. The Kernel AES key is stored within the bootloader binary once you get the bootloader decrypted (which requires shifting the encrypted bytes as well as the AES key and the AES IV around).\n\nThis MCU supports locking the access to the OTP area once the bootloader has started. The developer just has to set the \"READ-PROT LOCK\" bit after bootup and any reads from that area will then return zeroes (0). This definitely applies to your target.\n\nI've been previously working on the LPC3143 on my own regarding the encryption and hacking open access to the locked OTP area (with success). The effort was big as it requires soldering at least 14 up to 16 wires to the target and some expensive extra hardware as well as Python scripts and an ARM memory dumper written and compiled in C.\n\nBut the AES key only won't be enough as LPC3143 encrypted binaries also require the AES IV which is hiding itself within this MCU's BOOTROM.\n\nRegarding your own target, I almost have the whole OTP area dumped as well as the BOOTROM and the bootloader AES key and AES IV extracted as I've been working on the XKEY as well. With UART connected to the PCB you basically only see debug output of the bootloader but not from within the Kernel itself. So how did you get terminal access there as it doesn't print out any messages after decryption and verification of the Kernel header and jumping into SDRAM where it resides?\n\n",
      "votes": "1",
      "user": "nitr8",
      "time": "Jun 28, 2022 at 6:00",
      "is_accepted": false,
      "comments": [
        {
          "user": "Armandooooo",
          "text": "Hi @nitr8, I m glad to see I am not the only only who would like to get this thing with additional features... I did not get past the bootloader screen either, but I managed to get a read access to specific files within the system. Once you upgrade the xkey to the latest firmware 2.04 then you will see there is another File System RWFS that is unencrypted. This stores data of how many times you run games. There is a http address that will display the content of the file, ad using symlink, it enabled me to display /etc/passwd content. It is still progress, but not as far I wanted to be.",
          "time": null
        },
        {
          "user": "Armandooooo",
          "text": "I am curious now on how you were able to hack it? Was it with the XKEY or with another use case of the LPC3143?",
          "time": null
        },
        {
          "user": "nitr8",
          "text": "You should check your reddit chat inbox.",
          "time": null
        },
        {
          "user": "Armandooooo",
          "text": "Hi @nitr8, now that I have the aes key and understand how to decrypt and encrypt would be able to help me how to mount so I can modify? Thank you",
          "time": null
        }
      ]
    }
  ]
}