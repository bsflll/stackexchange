{
  "title": "x64 Memory Pointer and Addressing modes [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/12690/x64-memory-pointer-and-addressing-modes",
  "content": "I'm working through example from a Windows disassembly training guide. In the exercise rax is set to a byte ptr, then rbx a word ptr. I notice the next byte of memory is skipped before rcx is to a dword ptr. Why did a byte of memory get skipped? Is there some alignment requirement?\n\n\n\n",
  "votes": "1",
  "answers": 1,
  "views": "259",
  "tags": [
    "disassembly",
    "debugging",
    "windbg"
  ],
  "user": "dcrearer",
  "time": "8 years ago",
  "comments": [],
  "answers_data": [
    {
      "content": "The main reason to align the data is for performance (some architectures will fault on misaligned data, but since you tagged this with windbg, we will assume amd/intel x64 + windows).\n\nQuoting from the AMD64 Architecture Programmerâ€™s Manual Volume 1:\n\nIdeally the word-sized data (pointed via rbx) would be 2-byte aligned, but as noted above, it is not required.\n\n",
      "votes": "3",
      "user": "josh poley",
      "time": "May 18, 2016 at 19:31",
      "is_accepted": true,
      "comments": []
    }
  ]
}