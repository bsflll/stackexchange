{
  "title": "Strange function in IDA Pro: Only one basic block ending with a jmp sub_xxxxxx (instead of a ret)",
  "link": "https://reverseengineering.stackexchange.com/questions/8517/strange-function-in-ida-pro-only-one-basic-block-ending-with-a-jmp-sub-xxxxxx",
  "content": "\n\nAnalyzing the ELF file /usr/bin/curl (Ubuntu 14.04, 64bit), I stumbled upon a strange function (see image). It is called regularly via call sub_403D90 but does not end with a ret. Instead, it jumps to a label / another function (sub_403C90).\nThis is strange because there seems to be no return to sub_403D90, as from sub_403C90 onwards in the control flow, there are no jumps but only rets.\n\nCan someone explain to me why this is? Does it makes sense?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "784",
  "tags": [
    "ida",
    "disassembly",
    "idapython",
    "compilers",
    "functions"
  ],
  "user": "langlauf.io",
  "time": "Mar 23, 2015 at 9:13",
  "comments": [],
  "answers_data": [
    {
      "content": "This is just a bit of optimization. A call xxxx followed by a ret can be optimized to a jmp xxxx.\n\n",
      "votes": "4",
      "user": "Guntram Blohm",
      "time": "Mar 22, 2015 at 12:22",
      "is_accepted": true,
      "comments": [
        {
          "user": "Ian Cook",
          "text": "Commonly known as \"Tail Call\" elimination / optimization.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "@IanCook: Thank you for the keyword. I only came up with \"tail recursion elimination\", which isn't the case here, so i decided to omit it.",
          "time": null
        }
      ]
    }
  ]
}