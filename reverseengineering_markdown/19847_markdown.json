{
  "title": "x64dbg how to watch all changes after one step",
  "link": "https://reverseengineering.stackexchange.com/questions/19847/x64dbg-how-to-watch-all-changes-after-one-step",
  "content": "We know that x64dbg will mark the changes as red color after we step an assembly instruction, so how can I get all changes without scroll monitor windows?\n\nx64dbg 32bit version trace:\n\n\nNEW UPDATE\n\nx32dbg only display one change for memory when calls a function which modify at least 16 bytes:\n\nSource code:\n\n\n\nx32dbg CPU monitor:\n\n\n\nx32dbg Trace monitor:\n\n\n\nThe function testmem.test should have 4 bytes changes, how to get those changes?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "5k",
  "tags": [
    "debuggers",
    "x64dbg"
  ],
  "user": "A.J",
  "time": "Nov 19, 2018 at 1:36",
  "comments": [
    {
      "user": "mrexodia",
      "text": "You can use the trace feature. Start a trace from the trace tab and then just step around. In the trace tab you can see the changes in the context menu.",
      "time": null
    },
    {
      "user": "A.J",
      "text": "@mrexodia Can I trace changes in memory? This is what I really want.",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "You can only see changes to memory if the instruction that changes the memory is in the trace.",
      "time": null
    },
    {
      "user": "A.J",
      "text": "@mrexodia As my upload picture shows, I only found changes to registers, how to see changes to memory?",
      "time": null
    },
    {
      "user": "mrexodia",
      "text": "The instruction you selected does not make any changes to memory. You can see the memory changes if you highlight an instruction that makes memory changes. Example: i.imgur.com/oOBXlnf.png",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Based on the code screenshot you posted it appears you are looking for differences between two memory snap shots. That is you want to know what all changed in the process address space after you step over the call to test.test().  \n\nI hope you understand anything can change anywhere when you step over a single unknown arbitrary function over the whole process memory.    \n\nFor example,\n\netc ..... etc ....  \n\nYou can't reliably look for what changed between one single step of a function.   \n\nx64dbg on the trace window provides you what changed on each execution,  you have to scroll and look what changed for each instruction.   \n\nOr, if you can limit your lookup to a certain memory range you can dump the memory to a file and diff them.   \n\nx64dbg provides you one command to save a block of memory  \n\n```\nsavedata :memdump: , 0x400000 , 0x1000  \n\n```\nor for that matter all debugger will provide you a mechanism to dump raw data at some address of some size to a file. \n\n```\nwindbg .writemem \nida makesnapshot\nollydbg binary -> backup  or dump in memory map gui\nx64dbg savedata (scriptcommand) or dumpmem in GUI memory map\n\n```\nYou can use a hexeditor like hxd to byte compare two dumps for looking at all changes to a certain region of memory.\n\nAs a real world example you can set a breakpoint as you have set in the specific code on the screenshot. Dump two snapshots one prior to step and one after step\n\nWhat was dumped \n\n```\nAddress=0024D000 \nSize=00003000 \nPage Information=Thread 3F8 Stack \nAllocation Type=PRV \nCurrent Protection=-RW-G \nAllocation Protection=-RW-- \n\n```\ndumped prior and renamed the dumpfile\n\n```\n0024D000[3000] written to \"xxx\\pre\" !\n\n```\nsingle stepped\n\n```\nINT3 breakpoint at test.01071076 (01071076)!\n\n```\ndumped post and renamed the dumpfile\n\n```\n0024D000[3000] written to \"xxx\\post\" !\n\n```\nnotice all the changes viz 1111,2222,3333\n\n```\n:\\>ls -lg\ntotal 24\n-rw-rw-rw-  1 0 12288 2018-11-21 03:02 post.bin\n-rw-rw-rw-  1 0 12288 2018-11-21 03:01 pre.bin\n\n:\\>fc /b pre.bin post.bin\nComparing files pre.bin and POST.BIN\n00002D68: 6A 76\n00002D70: 0B 00\n00002D71: E1 00\n00002D72: 08 00\n00002D73: 01 00\n00002D74: 00 11\n00002D75: 00 11\n00002D78: 00 22\n00002D79: 00 22\n00002D7C: 20 33\n00002D7D: E1 33\n00002D7E: 08 00\n00002D7F: 01 00\n\n\n:\\>xxd -g4 -s 0x2d68 -l 0x20 pre.bin\n0002d68: 6a100701 70fd2400 0be10801 00000000  j...p.$.........\n0002d78: 00000000 20e10801 04e08442 ccfd2400  .... ......B..$.\n\n:\\>xxd -g4 -s 0x2d68 -l 0x20 post.bin\n0002d68: 76100701 70fd2400 00000000 11110000  v...p.$.........\n0002d78: 22220000 33330000 04e08442 ccfd2400  \"\"..33.....B..$.\n\n```\n",
      "votes": "3",
      "user": "blabb",
      "time": "Jan 19, 2019 at 19:44",
      "is_accepted": true,
      "comments": []
    }
  ]
}