{
  "title": "Detecting and solutions of stack smash protection",
  "link": "https://reverseengineering.stackexchange.com/questions/22866/detecting-and-solutions-of-stack-smash-protection",
  "content": "This video https://youtube.com/watch?v=4HxUmbOcN6Y presents how modern compilers protect stack overflows with stack cookies and function __stack_chk_fail.\n\nBut if this function is compiled statically, how can I recognize it? Each function will end with if ... then abort else return or only functions that get buffer from user?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "676",
  "tags": [
    "c",
    "buffer-overflow",
    "gcc",
    "stack-protector"
  ],
  "user": "wfj96649BcaooCom",
  "time": "Jan 3, 2020 at 6:15",
  "comments": [],
  "answers_data": [
    {
      "content": "For example:\n\n```\nint main()\n{\n    char buf[2000];\n    gets(buf);\n}\n\n```\nIn this case, the stack protection will most likely be on the main function, because of the buf variable.\n\n",
      "votes": "1",
      "user": "macro_controller",
      "time": "Dec 29, 2019 at 12:35",
      "is_accepted": false,
      "comments": [
        {
          "user": "wfj96649BcaooCom",
          "text": "1.  __stack_chk_fail it's part of libssp so if I compile it statically I will not see __stack_chk_fail in code.    2. If stack smash protection used and the code check the magic before return address in stack, how can I over write it and jump to another function even I use gets",
          "time": null
        },
        {
          "user": "macro_controller",
          "text": "1. Compile statically means that the function resides within your compiled library, and not in an outside imported library. So it doesn't matter, you will still see a call to the function - once from within your file, and once as an import from outside. Don't be confused with inline",
          "time": null
        },
        {
          "user": "macro_controller",
          "text": "2. Yes, this is the purpose of the stack check - if it's enabled you won't be able to exploit the potential overflow caused by gets.",
          "time": null
        }
      ]
    },
    {
      "content": "```\n$ r2 -AAA -qq -c \"pdf @main~gs\" test\n│           0x00000591      658b0d140000.  mov ecx, dword gs:[0x14]\n│           0x000005b6      65331d140000.  xor ebx, dword gs:[0x14]\n\n```\n```\n$ r2 -AAA -qq -c \"pdf @main~fs\" test\n│           0x00400b5c      64488b042528.  mov rax, qword fs:[0x28]\n│           0x00400b85      644833142528.  xor rdx, qword fs:[0x28]\n\n```\nIn x64 cookie is loaded from fs:[0x28] and in x86 from gs:[0x14] in the function prolog. You can refer to the answer here\n\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Aug 5, 2020 at 11:57",
      "is_accepted": false,
      "comments": []
    }
  ]
}