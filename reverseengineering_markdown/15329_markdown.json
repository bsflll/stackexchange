{
  "title": "How can the problem posed for disassembly by the mixture of executable code and literal pools in ARM firmware be overcome?",
  "link": "https://reverseengineering.stackexchange.com/questions/15329/how-can-the-problem-posed-for-disassembly-by-the-mixture-of-executable-code-and",
  "content": "I looked at the ARM firmware in these two questions:\n\nand was baffled by the mixture of code with data, since I have looked at firmware for other architectures such as Ubicom, MIPSEL and MIPS and did not observe the same kind of intermingling of code and data as in the ARM firmware.\n\nHere are some visualizations of various binaries for context:\n\nMIPSEL eCos firmware from Analysing eCos image\n\n\n\n\n<------------------------ code -------------------------><---- images, ASCII---->\n\nUnknown instruction set, uC/OS firmware from lzma: File format not recognized [Details enclosed]\n\n\n\n\n<-------------------------- code??? ------------------------><-- ASCII -->\n\nUbicom32 SlingBox firmware from Need help extracting YAFFS from firmware .bin file\n\n\n\n\n<--------------------------- code ----------------------->     <- data ->< code >\n\nA pattern appears to emerge, no? The executable code in the firmware images presented here is not so difficult to differentiate from data because it largely resides in 1 or 2 large, contiguous blocks.\n\nHowever, things are not so straightforward with the ARM firmware:\n\n32-bit ARM firmware from Running a binary identified as an ARM excutable by binwalk --disasm\n\n\n\n\n\nWhere is the code? Where is the data? There is no easily discernible separation like in the other firmware binaries.\n\nThumb-2 (16-bit + 32-bit) ARM firmware from \n\n\n\n\n\nThe situation is similar here.\n\nWhen the visualizations are juxtaposed, the differences become very obvious:\n\n\n\n\n\n\n\nThe non-ARM firmware binaries in this sample have fairly clear code and data separation, which is helpful if we want to disassemble the code. However, identification of code and data looks to be quite  problematic in the case of the ARM firmware binaries.\n\nSo why do the ARM firmware binaries look so different from the others? Why is there no clearly discernible separation of code and data? The answer seems to involve ARM literal pools.\n\nI'm including information about ARM literal pools here because it seems relevant and because it took forever for me to find out about them on my own, so hopefully this saves others some time.\n\nAccording to Ian Cook (emphasis mine),\n\nThis is similar to the information I found in the article The trouble with literal pools:\n\nHowever, in the ARM documentation for literal pools, it is stated that\n\nI don't know jack about ARM, so this is confusing. I might make this a separate question. Anyway, the point is that literal pools appear to be the reason why code and data are mixed together in the ARM firmware visualized earlier. There is also something called scatterloading, but I don't know if this has anything to do with the problem described here.\n\nHow can the problem posed for disassembly by the admixture of executable code and literal pools in ARM firmware be overcome?\n\nAccording to Ian Cook (from the same answer as before) (emphasis mine),\n\nYes, how? I tried disassembling both the ARM 32-bit Panasonic picture frame firmware and the ARM Thumb-2 SMOK-X Cube contraption firmware with radare2 but it seemed like data was being disassembled along with code.\n\nSince the location of literal pools after functions seems to be a common feature of ARM binaries, are existing disassemblers able to differentiate between code in functions and the data in their adjoining literal pools even when there aren't any symbols in the binary? This isn't the case with Capstone as far as I know.\n\n",
  "votes": "4",
  "answers": 1,
  "views": "737",
  "tags": [
    "disassembly",
    "binary-analysis",
    "firmware",
    "arm",
    "disassemblers"
  ],
  "user": "julian",
  "time": "May 21, 2021 at 3:42",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "BTW one additional problem is switch tables used by instructions like TBB and TBH; these are also embedded in the code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This is indeed a problem for linear sweep disassemblers; recursive descent ones are mostly unaffected since they won't try to disassemble data if there are no code flows into it. However, there may be some heuristics/cheap tricks that might help even linear sweep disassemblers. Some that come to mind:\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "May 13, 2017 at 11:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "julian",
          "text": "Thank you. I found some good info on this site related to the statements in the first paragraph. For the second bullet point regarding nonsensical conditions, would a disassembler be able to make that kind of determination or does it typically require human interpretation of conditions?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "I imagine it should be possible to come up with some simple rules to detect most false positives.",
          "time": null
        }
      ]
    }
  ]
}