{
  "title": "Why IDA Pro generated a \"j_printf\" function call?",
  "link": "https://reverseengineering.stackexchange.com/questions/3435/why-ida-pro-generated-a-j-printf-function-call",
  "content": "Test platform is windows 32 bit.  IDA pro 64\n\nSo, basically I use IDA pro to disassemble a PE file, and do some transformation work on the asm code I get, to make it re-assemblable.\n\nIn the transformed code I generated, the system function call like printf will be written just as the usual way.\n\n```\nextern printf\n....\n....\ncall printf\n\n```\nI use this to reassemble the code I create:\n\n```\nnasm -fwin32 --prefix _ test.s\ncl test.obj /link msvcrt.lib\n\n```\nI got a PE executable file, and basically it works fine (Like a hello world program, a quick sort program and others).\n\nBut then, as I use IDA pro to re-disassemble the new PE executable file I create, strange things happened.\n\nIDA pro generates function call like this:\n\n\n\nand when I use:\n\n```\nidaq.exe -B test.exe \n\n```\nto generate new assembly code, in the printf function call part, it generate this:\n\n```\ncall j_printf\n\n```\nWithout the j_printf proc near function define...\n\nSo basically I am wondering if anyone know how do deal with this, to let IDA pro generate \n\n```\ncall printf\n\n```\nor \n\n```\ncall _printf\n\n```\nagain or any other solution?\n\n",
  "votes": "7",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "windows",
    "reassembly"
  ],
  "user": "lllllllllllll",
  "time": "Jan 11, 2014 at 6:20",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "possible duplicate of Why is JMP used with CALL?",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "@JasonGeffner: while I agree that it looks like a duplicate, the question is asked completely differently (which will aid future internauts when searching).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It's cl.exe that's inserting the jump thunk. It has some advantages, such as making it easier to redirect a function during runtime after load and makes it so that the loader only has to do a single relocation for that function. The other option would be to use an indirect call through an address. Neither is really optimal for performance due to the distance between the call and the jump or the address, which can hurt caching. You can disable the jump thunk by disabling incremental linking.\n\nThat said, what you're doing is probably a bad idea. IDA is not really made to produce code that can be reassembled. What's normally done is that you extend the last section or add a new section with the patched code then redirect the original code to the patch through a call or a jump.\n\n",
      "votes": "9",
      "user": "Peter Andersson",
      "time": "Jan 11, 2014 at 6:11",
      "is_accepted": true,
      "comments": []
    }
  ]
}