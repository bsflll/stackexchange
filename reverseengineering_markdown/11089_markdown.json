{
  "title": "Set Breakpoint at Entry point fails (GDB)",
  "link": "https://reverseengineering.stackexchange.com/questions/11089/set-breakpoint-at-entry-point-fails-gdb",
  "content": "I'm currently practicing some RE w/ GDB and am having issues simply stopping the run/start on the first/second instruction.  I am new to GDB/RE and have a limited knowledge of some of GDB's inner workings.  So far when I open the program I have done:\n\n```\n(gdb) set disassembly-flavor intel\n(gdb) file /path/to/binary\n(gdb) info file\nSymbols from \"/path/to/binary\".                                                                                                \nLocal exec file:                                                                                                          \n    `/path/to/binary', file type elf32-i386.                                                                               \n    Entry point: 0x8048450\n    .\n    .\n    .\n(gdb) b *0x8048450\n(gdb) start\nTemporary breakpoint 2 at 0x80485f7                                                                                       \nStarting program: /path/to/binary                                                                                              \nDuring startup program exited with code 1.\n\n```\nSo clearly setting the breakpoint at the entry point is not useful.  Below is the output of the command :\n\n```\n objdump /path/to/binary -M intel -D\n\n```\nAt the preceeding memory address.\n\n```\n08048450 <_start>:\n 8048450:       31 ed                   xor    ebp,ebp\n 8048452:       5e                      pop    esi                                                                        \n 8048453:       89 e1                   mov    ecx,esp                                                                    \n 8048455:       83 e4 f0                and    esp,0xfffffff0                                                             \n 8048458:       50                      push   eax                                                                        \n 8048459:       54                      push   esp                                                                        \n 804845a:       52                      push   edx                                                                        \n 804845b:       68 c0 86 04 08          push   0x80486c0                                                                  \n 8048460:       68 60 86 04 08          push   0x8048660                                                                  \n 8048465:       51                      push   ecx                                                                        \n 8048466:       56                      push   esi                                                                        \n 8048467:       68 e9 85 04 08          push   0x80485e9                                                                  \n 804846c:       e8 bf ff ff ff          call   8048430     <__libc_start_main@plt>                                            \n 8048471:       f4                      hlt                                                                               \n 8048472:       66 90                   xchg   ax,ax                                                                      \n 8048474:       66 90                   xchg   ax,ax                                                                      \n 8048476:       66 90                   xchg   ax,ax                                                                      \n 8048478:       66 90                   xchg   ax,ax                                                                      \n 804847a:       66 90                   xchg   ax,ax                                                                      \n 804847c:       66 90                   xchg   ax,ax                                                                      \n 804847e:       66 90                   xchg   ax,ax\n\n```\nMy overall goal is to jump to a specific function in the program using the b *Mem, jump *Mem technique and execute the code w/in that function.  In order to do this however I need to be able to stop the program while it is running I believe.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "x86",
    "gdb",
    "objdump",
    "breakpoint"
  ],
  "user": "user1234567878787",
  "time": "Oct 12, 2015 at 17:00",
  "comments": [],
  "answers_data": [
    {
      "content": "From http://www.delorie.com/gnu/docs/gdb/gdb_29.html:\n\nYou might just get bitten by this; when loading, gdb puts the instruction pointer at the first instruction, and it won't break on this when starting the program.\n\nAccording to this question and answer, this seems to be dependent on the version of gdb you're using, and disabling ASLR might help (i don't think that happens in your case though, since you checked the entry point after loading the specific instance of your program).\n\nBut i found this question that has a trick to break on the very first instruction that's getting executed; when i tested it, it even stopped within the dynaloader before passing execution to the entry point.\n\nStill, i fail to see why you absolutely need to have a breakpoint at the entry point. If you want to change anything before the program executes its first instruction, just do it before running your program. You could, for example, change the instructions at the entry point to jmp my_special_function, which will probably need a few more bytes than just one instruction at _start, and have your special function end in the 4 instruction before the push, then jmp to 8048458. You can do all this after loading the program and run it afterwards.\n\n",
      "votes": "5",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": [
        {
          "user": "user1234567878787",
          "text": "so there is some command that can manipulate the bytes in a binary file w/in gdb, therefore allowing me to make an unconditional jump to the address of my function?  That seems a little far-fetched, could you help my understanding some more?",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "You can use something like set {char} 0x8048450=0xeb to modify single bytes. This works for other data types as well. This won't change the file, it will change the loaded version of the binary.",
          "time": null
        },
        {
          "user": "Guntram Blohm",
          "text": "But see the link i just added to the answer (reverseengineering.stackexchange.com/questions/8724/â€¦), it has a trick that allows you to stop on the very first instruction executed even if gdb doesn't honor breakpoints there. When i tried it, it stopped within the dynaloader even before jumping to the entry point.",
          "time": null
        },
        {
          "user": "user1234567878787",
          "text": "Followed the link and attempted their solution w/ the same result as before, no luck.  I am curious do you know why gdb outputs 'During startup program exited with code 1.' ? Is that likely bc the return value of the program is 1?",
          "time": null
        },
        {
          "user": "Milhous",
          "text": "@user1234567878787 GDB will modify the bytes in RAM and not on disk.  One real annoyance is that when you set breakpoints, GDB does not deal well with self modifying code.",
          "time": null
        }
      ]
    }
  ]
}