{
  "title": "ZTE encrypted backup config file",
  "link": "https://reverseengineering.stackexchange.com/questions/11626/zte-encrypted-backup-config-file",
  "content": "I was poking around in ZTE Speedport Entry 2i (CPE used mostly in Germany, Slovakia etc, probably custom made for Deutsche Telekom). It's possible to download backup of config from UI. \n\nI found out it's different from other ZTE config backups. Usually it's zlib compressed XML. I suspect this one has a layer of some pseudo-encryption on it.\n\n```\n\n00000000  99 99 99 99 44 44 44 44  55 55 55 55 aa aa aa aa  |....DDDDUUUU....|\n00000010  00 00 00 00 00 00 00 00  00 00 00 04 00 00 00 00  |................|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 40  |...............@|\n00000040  00 02 00 00 00 00 00 80  00 00 57 c6 00 00 00 00  |..........W.....|\n00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000080  04 03 02 01 00 00 00 00  00 00 00 12 53 70 65 65  |............Spee|\n00000090  64 70 6f 72 74 20 45 6e  74 72 79 20 32 69 01 02  |dport Entry 2i..|\n000000a0  03 04 00 00 00 02 00 00  00 00 00 00 57 a8 00 01  |............W...|\n000000b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000000d0  00 00 00 00 00 00 00 00  00 00 00 00 57 60 00 00  |............W`..|\n000000e0  57 60 00 00 00 00 be d3  f7 b3 fe 9e 99 a4 35 75  |W`............5u|\n000000f0  ce db 7f c2 99 17 43 7f  1e e2 54 7a 63 72 6f c8  |......C...Tzcro.|\n00000100  b7 2d cc e8 cb 32 6c 3a  f0 fd 55 19 10 ac ea d5  |.-...2l:..U.....|\n00000110  e9 18 01 01 71 7c 20 68  ca 66 d0 d9 f9 12 03 3d  |....q| h.f.....=|\n00000120  ee bd ad 2a 00 e2 c1 96  73 12 bd 5a 94 3e 6d 1a  |...*....s..Z.>m.|\n00000130  a8 7f c8 a8 8b 3d b6 1e  d8 ae 9b 43 63 6a e3 ea  |.....=.....Ccj..|\n00000140  94 33 55 57 dc 81 b2 22  c5 e7 39 fd 75 b9 ba 5b  |.3UW...\"..9.u..[|\n00000150  00 ca a1 29 9b e2 9f bd  8e 1f 00 98 30 62 8b d7  |...)........0b..|\n00000160  c6 12 ae ef 27 55 30 2a  4c f8 de 7c e5 2a 33 b9  |....'U0*L..|.*3.|\n00000170  8b 32 4a d2 2c da 2a 18  ff 72 cf 1c 42 d8 41 6b  |.2J.,.*..r..B.Ak|\n\n```\nOther examples of this config can be found here: RE Compressed backup file,router linux based so is it compresed with zlib? \n\nIs there a way to figure out how to extract content of this config? Is there a way how to detect if some sort of simple XOR encryption is in place?\n\nI was unable to obtain firmware of the device, it's CPE so it's pretty locked down. The device itself looks to be using stripped down version similar to ZTE E5502 (same lua based web UI) E5502 firmware\n\nYou can download the config here. config.bin\n\nEdit:\n\nAfter reading something about difference between compression and entropy, I came to conclusion that the file is probably encrypted and not just obfuscated with something like XOR (because that doesn't change the entropy)\n\nI obtained config file from another ZTE device (one with zlib compression)\n\n```\n$ binwalk -E -N config_f660.bin\n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n1024          0x400           Rising entropy edge (0.973932)\n10240         0x2800          Rising entropy edge (0.958898)\n14336         0x3800          Rising entropy edge (0.966971)\n17408         0x4400          Rising entropy edge (0.968328)\n\n$ binwalk -E -N config_encrypted.bin\n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n1024          0x400           Rising entropy edge (0.974513)\n22528         0x5800          Falling entropy edge (0.737589)\n\n```\nAs far as I can interpret this data is that the first rising edge is unencrypted header in both configs. In the compressed config other rising edges should represent compressed zlib blocks. If you actually plot the graph with binwalk you can see that there are still some rising edges in entropy but much smaller the line is almost flat. (Cannot include graphs due to low reputation). I'm now confident that's caused by applying encryption over those compressed zlib blocks.\n\nAre my assumptions correct or am I missing something? Is there a method I could try to break or at least guess the encryption type without the firmware image? \n\n",
  "votes": "11",
  "answers": 3,
  "views": "25k",
  "tags": [
    "linux",
    "encryption"
  ],
  "user": "J91321",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [
    {
      "user": "lukas kiss",
      "text": "I am not answring you question, but maybe this can help you. I have the same problem and i think we have same ecryption algoritm but diferrent keys. This is my config.bin I also find out, that a number 0x57 is often there maybe it can decide the sections. In my config file is 0xb6. Maybe it can be helpful for you to solve it.",
      "time": null
    },
    {
      "user": "J91321",
      "text": "Thanks, I downloaded your config and the entropy looks very similar to mine that's true. Unfortunately I still haven't found any more info or ideas on how to solve this problem.",
      "time": null
    },
    {
      "user": "Juicy",
      "text": "Did you ever make any progress on this? I'm also looking at the config.bin from my new home router, from ZTE as well.",
      "time": null
    },
    {
      "user": "J91321",
      "text": "Not really, I would probably need to obtain a sample of firmware and reverse engineer it to find out what is happening with config.bin. But if you are willing to share your config.bin sample I'll take a look. Just remember to remove any confidential information before exporting it.",
      "time": null
    },
    {
      "user": "Vido",
      "text": "@danca can you give me your mac address, I thinks that key for config is md5 mac addres",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The obfuscated section of your config file is a series of ZLIB-compressed sections that have been encrypted with AES in ECB mode with a 16-byte key.\n\nThere is an application named cspd on the router that does lots of different things. One of those things is to encrypt/decrypt the configuration file.\n\nSome of the ZTE routers have the AES key hardcoded into the cspd binary; some of them don't. Unfortunately, yours is one that does not.\n\nThere is a function within cspd named PdtDBSetAESEncryKey (code courtesy of Ghidra) that is used to set the key:\n\n```\nundefined4 PdtDBSetAESEncryKey(char *param_1,int param_2)\n\n{\n  byte bVar1;\n  char cVar2;\n  undefined4 uVar3;\n  int iVar4;\n  size_t sVar5;\n  undefined4 *puVar6;\n  undefined4 *puVar7;\n  byte bVar8;\n  undefined4 local_48;\n  undefined4 local_44;\n  undefined4 local_40;\n  undefined4 local_3c;\n  undefined4 local_38;\n  undefined local_18;\n\n  local_48 = 0;\n  local_44 = 0;\n  local_40 = 0;\n  local_3c = 0;\n  memset(&local_38,0,0x21);\n  uVar3 = 0xffffffff;\n  if ((param_1 != (char *)0x0) && (param_2 != 0)) {\n    iVar4 = _getTagparamMD5(&local_48);\n    if (iVar4 != 0) {\n      ProcUserLog(\"dbc_mgr_pdt_encry.c\",0x9c,\"PdtDBSetAESEncryKey\",5,0,0,\n                  \"_getTagparamMD5 failed! Use default\");\n      sVar5 = strlen(\"Hello! world,\");\n      CspGetMD5(\"Hello! world,\",sVar5,&local_48);\n    }\n    puVar7 = &local_48;\n    puVar6 = &local_38;\n    do {\n      bVar1 = *(byte *)puVar7 >> 4;\n      if (bVar1 < 10) {\n        cVar2 = '0';\n      }\n      else {\n        cVar2 = 'W';\n      }\n      bVar8 = *(byte *)puVar7 & 0xf;\n      *(byte *)puVar6 = bVar1 + cVar2;\n      if (bVar8 < 10) {\n        bVar8 = bVar8 + 0x30;\n      }\n      else {\n        bVar8 = bVar8 + 0x57;\n      }\n      puVar7 = (undefined4 *)((int)puVar7 + 1);\n      *(byte *)((int)puVar6 + 1) = bVar8;\n      puVar6 = (undefined4 *)((int)puVar6 + 2);\n    } while (puVar7 != &local_38);\n    local_18 = 0;\n    strncpy(param_1,(char *)&local_38,param_2 - 1);\n    uVar3 = 0;\n  }\n  return uVar3;\n}\n\n```\nWhich:\n\nThis key is fed to the set key function, AES_set_decrypt_key, from libcrypto, with the 2nd parameter ('bits') set to 128 (i.e. 16 byte KEY_LENGTH).\n\nThe tagparam_m file is found in /var and is created when the router starts.\n\nI have seen two examples of this file. Each data entry is preceded by a mini header preamble comprising:\n\nExample 1:\n\n```\n0100 0006 0000                     // 0100: MAC 0, 0006: 6 bytes, 0000: padding\naabb ccdd eef2                     // MAC Address 0 (raw hex)\n0101 0006 0000                     // 0101: MAC 1, 0006: 6 bytes, 0000: padding\naabb ccdd eef3                     // MAC address 1 (raw hex)\n0102 0006 0000                     // .. etc\naabb ccdd eef4\n0103 0006 0000\naabb ccdd eef5\n0104 0006 0000\naabb ccdd eef6\n0105 0006 0000\naabb ccdd eef7\n0106 0006 0000\naabb ccdd eef8\n0107 0006 0000\naabb ccdd eef9\n0108 0006 0000 \naabb ccdd eefa\n0109 0006 0000\naabb ccdd eefb\n0200 000f 0000                     // 0200: Serial No, 000f: 15 bytes, 0000: padding\n4142434445464748494a4b4c4d4e4f     // Serial Number (ASCII)\n0400 000e 0000                     // 0400: BSSID, 000e: 14 bytes, 0000: padding\n4142434445464748494a4b4c4d4e       // BSSID (ASCII)\n0510 0010 0000                     // 0501: BSSID Password, 0010: 16 bytes, 0000: padding\n4142434445464748494a4b4c4d4e4f50   // BSSID Password (ASCII)\n0601 0005 0000                     // 0601: Admin Username, 0005: 5 bytes, 0000: padding\n4142434445                         // Username (ASCII)\n0701 0008 0000                     // 0701: Admin Password, 0008: 8 bytes, 0000: padding\n4142434445464748                   // Password (ASCII)\n0300 0006 0000                     // 0300: Manufacturer MAC, 0006: 6 bytes, 0000: padding\n414243444546                       // Manufacturer MAC (ASCII)\n0806 0006 0000                     // 0806: Hardware revision\n5631 2e30 2e30                     // Hardware revision (ASCII)\n0807 0001 0000                     // 0807: Trailer?\n30                                 // \"0\" ASCII\n\n```\nExample 2:\n\n```\n0100 0006 0000                     // 0100: MAC 0, 6 bytes\n5078 b3aa bbc0                     // 50:78:b3:aa:bb:c0\n0101 0006 0000                     // 0101: MAC 1, 6 bytes\n5078 b3aa bbc1                     // 50:78:b3:aa:bb:c1\n0102 0006 0000                     // 0102: MAC 2, 6 bytes\n5078 b3aa bbc2                     // 50:78:b3:aa:bb:c2\n0103 0006 0000                     // 0103: MAC 3, 6 bytes\n5078 b3aa bbc3                     // 50:78:b3:aa:bb:c3\n0200 000f 0000                     // 0200: Serial Number, 15 bytes\n323638454142434445464748494a4b     // 268EABCDEFGHIJK\n0400 000b 0000                     // 0400: BSSID, 11 bytes\n4142434445464748494a4b             // ABCDEFGHIJK\n0510 0010 0000                     // 0510: BSSID Password, 16 bytes\n4142434445464748494a4b4c4d4e4f50   // ABCDEFGHIJKLMNOP\n0701 0008 0000                     // 0701: Admin Password, 8 bytes\n4142434445464748                   // ABCDEFGH\n0300 0006 0000                     // 0300: Manufacturer MAC, 6 bytes\n353037384233                       // 5078B3\n0806 0006 0000                     // 0806: Hardware Revision, 6 bytes\n56312e302e31                       // V1.0.1\n0807 0001 0000                     // 0807: Trailer?\n30                                 // \"0\" ASCII\n\n```\nNote: I have used dummy values for MAC/BSSID/Password etc!\n\nIf you can locate this file and perform the MD5 of it (e.g. md5sum /var/tagparam_m), the first 16 chars of the hex digest are your key.\n\nFor a good key, the first 8 bytes of the decrypted block should look like 0x0102030400000000 which is the start of the header for the ZLIB section.\n\nFor a bit more info on this file format you can take a look at the zcu module I wrote.\n\nThe second tagparam_m file was byteswapped but the key was the MD5 after the file was byteswapped back and a trailing 00 was truncated.\n\nIf anyone wants to send me a copy of their tagparam_m file I will update this post!\n\n",
      "votes": "11",
      "user": "mkst",
      "time": "Sep 1, 2020 at 11:51",
      "is_accepted": false,
      "comments": [
        {
          "user": "J91321",
          "text": "Awesome, I'll take a look into it as soon as I have some time. cspd seems to be responsible for encrypting and decrypting configs on several ZTE devices like mentioned here for F660 reverseengineering.stackexchange.com/questions/13391/… But the method seems to differ between different type of devices. You can always try use quemu to run the code.",
          "time": null
        },
        {
          "user": "Vido",
          "text": "Im also trying to identify whats encryptions used on backup file, Im usint ZTE ZXV10 H201L V2 and my thred is located here reverseengineering.stackexchange.com/questions/14711/…",
          "time": null
        },
        {
          "user": "Vido",
          "text": "I have shell access and strace as well as gdbserver on Speedport Entry 2i. I indefined process which is called when backup button is pressed so what I can do further to investigate and get password for backup file ?",
          "time": null
        },
        {
          "user": "mkst",
          "text": "@Vido I have just updated the post based on information I received yesterday, if you can locate the tagparam_m file, the MD5 of this file ought to be your key.",
          "time": null
        },
        {
          "user": "Vido",
          "text": "That's great tnx @streetster",
          "time": null
        }
      ]
    },
    {
      "content": "came across these keys and sharing\n\nKnown AES keys:\n\n```\n  zxhn h118n ert5                      - 'MIK@0STzKpB%qJZe'\n  zxhn h118n V2.1.3_ROSCNT?            - 'MIK@0STzKpB%qJZf'\n  zxhn h168n v3                        - '402c38de39bed665'\n  zxhn h298n hv17_fv116_mts?t1         - 'Wj' (due to bug, orig. is 'Wj%2$CjM')\n  zxhn h298a hw1.1.20_fw1.1.20_ros_t1? - 'm8@96&ZG3Nm7N&Iz'\n  zxhn h108n hw1.2_fw2.5.4_eg1t8_ted,\n  zxhn h108n hv11_fv2_5_4_*            - 'GrWM2Hz&LTvz&f^5'\n  zxhn h168n hv10_fv310t3_belt         - 'GrWM3Hz&LTvz&f^9'\n  zxhn h208n hv10_fv1010_belt16t1      - 'Renjx%2$CjM'\n  zxhn h267n hv10_fv100t3_belt         - 'tHG@Ti&GVh@ql3XN'\n\n```\n",
      "votes": "3",
      "user": "user33502",
      "time": "Jun 9, 2020 at 18:43",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In order to get key you need to check CSPDBGetFileEncryKey function\n\n",
      "votes": "1",
      "user": "Vido",
      "time": "Mar 12, 2017 at 0:14",
      "is_accepted": false,
      "comments": []
    }
  ]
}