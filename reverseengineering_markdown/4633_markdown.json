{
  "title": "How to change PE signature? [closed]",
  "link": "https://reverseengineering.stackexchange.com/questions/4633/how-to-change-pe-signature",
  "content": "I'm looking for a way to recognize an executable file as a NullSoft installer. IÂ´m trying to prove that a malicious software is capable of changing the PE signature so we can not trust in some tool tell us a PE is a NullSoft Installer only because it have found the NullSoft signature. \n\nAny help will be appreciated, recommended tools, etc ...\n\nEDIT\n\nAfter reading the Stolas's answer I decided to edit the question and add more info.\n\nI already tried with to use an hex editor on an original NullSoft installer and I searched for the string NullSoft this yielded the following result:\n\n\n\nThe string was found in a XML:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"X86\" name=\"Nullsoft.NSIS.exehead\" type=\"win32\"/>\n    <description>\n        Nullsoft Install System v2.46\n    </description>\n    <dependency>\n        <dependentAssembly>\n            <assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"X86\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\" />\n        </dependentAssembly>\n    </dependency>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <security>\n            <requestedPrivileges>\n                <requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/>\n            </requestedPrivileges>\n        </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n        <application>\n            <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n            <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\"/>\n        </application>\n    </compatibility>\n</assembly>\n\n```\nThese seems to be what I want to insert in my \"malicious\" app. So, how can I add that into my app? \n\nMy app it's just a \"Hello world\" written in Visual C++.\n\nI'm aware that I have to write this at the same offset that in the original, but I just don't know how.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "malware",
    "binary-analysis",
    "pe"
  ],
  "user": "Raydel Miranda",
  "time": "10 years ago",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Could you clarify how this relates to FLIRT? You want to prove that IDA is vulnerable or something?",
      "time": null
    },
    {
      "user": "Jason Geffner",
      "text": "@0xC0000022L: I removed his flirt-signatures tag since there is no NullSoft installer FLIRT signature. Seems like he applied the wrong tag to his question.",
      "time": null
    },
    {
      "user": "Raydel Miranda",
      "text": "@JasonGeffner Yes the tag was wrong, I ment signature no flirt-signature.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "It is well known that the format can be faked, since just need the right data at the right location.  Why not reverse the order instead - create a NSIS file and then insert your non-NSIS data in place of the compressed content?  This has the equivalent effect.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "For this you'd first need to realize how programs are recognized to be specific types of software.\n\nThis can be specific imports, strings or binary strings within the code. When you realize how tools make these signatures try to be cunning and put the signature in your 'malicious' application. Check it with your 'signature' tooling and tweak if required.\n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Jun 18, 2014 at 20:39",
      "is_accepted": true,
      "comments": [
        {
          "user": "Sigtran",
          "text": "nice answer, just to add, here is an idea to check:  -- Add a new section \".ndata\" to a target exe  -- copy the appended data of a good nullsoft install package to a target exe.  -- check against the software that recognizes sigs.  Both can be done via a simple hex editor of your choice",
          "time": null
        }
      ]
    }
  ]
}