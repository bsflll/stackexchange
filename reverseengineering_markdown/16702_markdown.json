{
  "title": "Difference between INT 0X80 and SYSCALL",
  "link": "https://reverseengineering.stackexchange.com/questions/16702/difference-between-int-0x80-and-syscall",
  "content": "The SYSCALL instruction is said to be the 64-bit version of INT 0X80, however it's still possible to use the latter in 64-bit code (although strace decodes it wrong because of the 64-bit ABI I guess) which usually goes through a \"legacy entry\". But there's something I don't quite understand, why is the SYSCALL instruction faster? \n\n",
  "votes": "9",
  "answers": 1,
  "views": "18k",
  "tags": [
    "x86",
    "system-call"
  ],
  "user": "Trey",
  "time": "Nov 3, 2017 at 16:02",
  "comments": [],
  "answers_data": [
    {
      "content": "The short answer is that syscall has less overhead than int 0x80. \n\nFor more details on why this is the case, see the accepted answer to Intel x86 vs x64 system call, where a nearly identical question was asked: \n\nSee also:\n\n",
      "votes": "11",
      "user": "julian",
      "time": "Nov 3, 2017 at 18:50",
      "is_accepted": true,
      "comments": []
    }
  ]
}