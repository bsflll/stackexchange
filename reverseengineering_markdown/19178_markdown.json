{
  "title": "Automating bypassing anti-debug checks",
  "link": "https://reverseengineering.stackexchange.com/questions/19178/automating-bypassing-anti-debug-checks",
  "content": "I'm working on bypassing the anti-debug checks of an unpacker in x64dbg. My end goal is to bypass all of the checks so that I can run the (unmodified) process with a debugger attached without any problems. \n\nTo bypass the checks I've encountered so far, I have a process of ~15 actions of setting breakpoints, stepping over instructions, skipping syscalls under certain conditions, etc, and it takes at least a couple of minutes to get up to the point where I left off. \n\nSince doing this stuff manually is time-consuming and error-prone, I'd like to automate it.\n\nI was thinking of building a C++ application that will launch the executable, attach and bypass all of the checks I've solved so far, then suspend the program and detach, so that I can attach with x64dbg and resume my reversing... or perhaps it's a better idea to do this with an x64dbg plugin? What's the best way to do this?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "8k",
  "tags": [
    "unpacking",
    "x64dbg",
    "automation"
  ],
  "user": "P. Private",
  "time": "Aug 29, 2018 at 3:02",
  "comments": [
    {
      "user": "Johann Aydinbas",
      "text": "A very simple solution for targets like this is using a virtual machine, bypass all the checks manually then take a snapshot. Not trying to be snarky, I typically do that when simple binary patching won't do. That may lead to additional problems with VM detection, and if the target is a game this usually doesn't work at all, of course.",
      "time": null
    },
    {
      "user": "P. Private",
      "text": "@JohannAydinbas that's a great idea, I hadn't thought of that. Why wouldn't this work for a game though?",
      "time": null
    },
    {
      "user": "Johann Aydinbas",
      "text": "Performance and graphics. I know VirtualBox for example has experimental 3D support but I always assumed it's barely working for modern games. If it were any good everyone would just play their Windows games in a VM but that's not the case so I guess it's not working that good.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "What you could do:\n\nThe latter method is similar to your C++ idea, but more flexible as you can work completely in the debugger.\n\n",
      "votes": "5",
      "user": "josh",
      "time": "Aug 29, 2018 at 10:46",
      "is_accepted": true,
      "comments": [
        {
          "user": "P. Private",
          "text": "Thanks, I was able to automate everything I was doing manually in x64dbg. (as long as I stayed away from the buggy page guard breakpoints).",
          "time": null
        }
      ]
    },
    {
      "content": "You don't need any external plugin, this is already a builtin feature in x64dbg:\n\n\n\n",
      "votes": "2",
      "user": "BPL",
      "time": "Aug 29, 2018 at 14:15",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "this likely covers only a few simplest checks. I doubt it will work against more advanced detection.",
          "time": null
        },
        {
          "user": "BPL",
          "text": "Fair enough, i've posted it as it's worked good enough to me with some few dozens of protections. But you're right, they were probably using some basic anti-debugging techniques. Anyway, the author tagged the question with x64dbg, so... worth to mention it :)",
          "time": null
        },
        {
          "user": "P. Private",
          "text": "@BPL, thanks for your answer. Unfortunately the unpacker is way more advanced than that.",
          "time": null
        },
        {
          "user": "BPL",
          "text": "@P.Private Sure thing, what Igor said above is definitely true... in any case, this is one of the first methods I tend to use to bypass the first protection layers of the analized software.",
          "time": null
        }
      ]
    }
  ]
}