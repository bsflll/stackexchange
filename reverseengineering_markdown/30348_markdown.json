{
  "title": "idapython: how to reset pointer type for variables",
  "link": "https://reverseengineering.stackexchange.com/questions/30348/idapython-how-to-reset-pointer-type-for-variables",
  "content": "I am using IDA Pro 7.6 on win32 x86 binaries.\n\nI'm trying to use the ida_hexrays interface to decompile subroutines. I want all of the local variables and arguments of the subroutine to have integral types, no pointer types. I made this function to do all the processing for me\n\n```\nimport ida_hexrays\nimport ida_typeinf as ida_type\nimport ida_lines\n\ndef decompile_function( function_location ):\n    decompile_handle = ida_hexrays.decompile( function_location, flags = ida_hexrays.DECOMP_NO_CACHE )\n\n    for local_variable in decompile_handle.lvars:\n        type_info = local_variable.type()\n\n        try:    \n            if ida_type.is_type_ptr( type_info.get_decltype() ):\n                pointed_object = type_info.get_pointed_object()\n\n                if ida_type.is_type_integral( pointed_object.get_decltype() ):\n                    local_variable.set_lvar_type( type_info.get_pointed_object() )      \n        except:\n            pass\n\n    decompile_handle.refresh_func_ctext()\n\n    pseudo_code = decompile_handle.get_pseudocode()\n    decompile_result = \"\"\n\n    for code_line in pseudo_code:\n        decompile_result = decompile_result + ida_lines.tag_remove( code_line.line ) + \"  \n\";\n\n    return decompile_result\n\n```\nWhen I decompile, I can see in the variable list that all of the variables are integral types\n\n```\nunsigned __int8 v7; // al\nint v10; // eax\nunsigned int v11; // esi\nconst char v12; // cl\n_DWORD v13; // eax\n\nv13 = (_DWORD *)v11;\n\n```\nHowever, as you may notice above, v13 = (_DWORD *)v11 v13 is improperly being set as a pointer. As it turns out, none of the code except the variable declarations gets changed. This happens for every subroutine that I try to decompile with this.\n\nBut when I right-click and use reset pointer value, the code changes and it would look like v13 = v11;. What is the issue with my code, or is IDAPython/IDAHexrays to blame? How do I make it actually reset the pointer value and not just in the declaration list?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "515",
  "tags": [
    "ida",
    "idapython",
    "hexrays"
  ],
  "user": "coolthingsforme",
  "time": "Apr 30, 2022 at 14:54",
  "comments": [],
  "answers_data": [
    {
      "content": "That function, lvar_t::set_lvar_type, is accompanied by the following comment:\n\n```\n  /// Note: this function does not modify the idb, only the lvar instance\n  /// in the memory. For permanent changes see modify_user_lvars()\n\n```\nInstead of calling set_lvar_type, you're going to want something like this instead:\n\n```\ndef ChangeVariableType(func_ea, lvar, tif):\n    lsi = ida_hexrays.lvar_saved_info_t()\n    lsi.ll = lvar\n    lsi.type = ida_typeinf.tinfo_t(tif)\n    if not ida_hexrays.modify_user_lvar_info(func_ea, ida_hexrays.MLI_TYPE, lsi):\n        print(\"[E] Could not modify lvar type for %s\" % lvar.name)\n        return False\n    return True\n\n```\n",
      "votes": "0",
      "user": "Rolf Rolles",
      "time": "May 1, 2022 at 4:10",
      "is_accepted": true,
      "comments": [
        {
          "user": "coolthingsforme",
          "text": "I'm sorry, but when I use this code it doesn't seem to make any changes to the decompiled output at all?  Here is my new code https://pastebin.com/KqFfkpV1",
          "time": null
        },
        {
          "user": "Rolf Rolles",
          "text": "There are several ways to accomplish what you're trying to do. In short, you're going to need to decompile the function again. If you had a vdui_t object instead of a cfunc_t object, you could call vdui_t::refresh_view with the bool parameter set to True. Alternatively, you could invoke decompile again after the loop that modifies the variable types.",
          "time": null
        },
        {
          "user": "coolthingsforme",
          "text": "Thanks for the help. Now I end up doing something like this. But when I look at the output, still nothing at all has changed. All the types remain the exact same as they were before in the decompiled output. Here is a link to the new code https://pastebin.com/wYh8BQU6",
          "time": null
        },
        {
          "user": "coolthingsforme",
          "text": "Edit: I realized that _DWORD is an unacceptable integral type, and the decompiler just doesn't seem to agree with it. I changed the type to \"int\", and voila it worked and all the types persisted throughout the whole code.",
          "time": null
        }
      ]
    }
  ]
}