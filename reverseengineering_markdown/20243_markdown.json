{
  "title": "How to wrap dump process and execute it in another PC",
  "link": "https://reverseengineering.stackexchange.com/questions/20243/how-to-wrap-dump-process-and-execute-it-in-another-pc",
  "content": "I debug exe file in Ida , and put breakpoint in some address.\n\nI want to create a dump of this process that I can continue running it in another Pc (without Ida) from the point I pause it with breakPoint.\nRunning it simply from cmd or from c/cpp/c# code, not from Gui\n\nAnd if it passable I want :\n\nCreateRemoteThread not good for me of course.\n\nVM not help me , because I want to merge it with code without VM .\n\nHow can  I do it please? Thanks\n\n",
  "votes": "3",
  "answers": 1,
  "views": "389",
  "tags": [
    "ida",
    "windows",
    "dumping",
    "exe"
  ],
  "user": "g319909.nwytg.coM",
  "time": "Dec 30, 2018 at 21:08",
  "comments": [
    {
      "user": "0xec",
      "text": "How about using something like VirtualBox to take a full system snapshot which you can copy and resume elsewhere.",
      "time": null
    },
    {
      "user": "g319909.nwytg.coM",
      "text": "@0xec Because I want to merge it with c/cpp/c/#/java ode and not via VM",
      "time": null
    },
    {
      "user": "0xec",
      "text": "Every process has an associated context like file handles which you cannot simply  copy over to another PC and expect them to be valid. VM snapshots work as it copies the entire state of the OS and not individual processes.",
      "time": null
    },
    {
      "user": "g319909.nwytg.coM",
      "text": "@0xec I dont need the context file handles ,If I will copy the VM snapshot it will be hard to running it with code that exist out of VM (and the snapshot will takes some GB) I only need the register and stack values when I put the breakpoint",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you do not need all of the current program's state (for example the state of the stack, register values, or open handles), then you can try dumping to a new executable and setting the EntryPoint to the current EIP.  OllyDumpEx (https://low-priority.appspot.com/ollydumpex/) is commonly used for this purpose for malware analysis.  Despite its name, it is a plugin for both OllyDbg, IDA, x64dbg, and WinDbg.\n\nIf you do need some of the program state, you can add a custom EntryPoint function or set of instructions that set it up.\n\nIn theory, the following should work (for a single-threaded 32-bit process)...\n\nYou need to save the processor state, stack, and any sections allocated on the heap by user code (such as with calls to VirtualAlloc, HeapAlloc, or malloc).  You will also need to find a place to insert some setup instructions.\n\nFirst, when you start your process in the debugger, view the memory map/segments (in IDA, I believe it is in the menu View > Open Subview > Segments) and make note of them (or take a screenshot for reference).\n\nNext, run the program up to the point that you want to move it to your other system.  Now look at the memory segments again and note which ones under the Heap are new.  Also make note of the current address of the instruction pointer.\n\nNow to save the processor state, you can use the PUSHAD and PUSHFD instructions.  Find a code cave of at least 7 bytes in length.  Edit bytes and change them to 0x60 0x9c, then change the instruction pointer to point to the address of where you inserted those two bytes.  Now single-step twice.  That will execute the PUSHAD and PUSHFD that saves the general purpose registers (including the stack pointer) and the flags.  Now edit those same bytes to 0x9d 0x61 0xEA .  Finally, change the instruction pointer to point to the address of where you inserted those bytes.\n\nRun the OllyDumpEx plugin.  Under List section choose All memory, then click the ReScan memory button.  Now check the box next to Auto Adjust Image Base Address.  Then click on Get EIP as OEP button.\n\nNow, in the list of sections in the bottom of the dialog box, there should be several already selected.  Keep those selected.  Additionally select any that are related to the Stack and Heap.  Now click the Dump button. This may require a bit of trial and error.\n\nNOTE: If your process is multi-threaded then this won't work.  There will be thread-specific state that will also need to be saved, but I am uncertain how to do that.\n\n",
      "votes": "2",
      "user": "knowmalware",
      "time": "Jan 10, 2019 at 2:35",
      "is_accepted": false,
      "comments": [
        {
          "user": "g319909.nwytg.coM",
          "text": "thank you about your comment , I don't need open handles, but I need the register values and the stack values,  so how can I load all of this value and start the process again in another pc?",
          "time": null
        },
        {
          "user": "ismael_akez",
          "text": "You mean that let say once the process pause in the breakpoint, you will copy the register values and then use these to another process?",
          "time": null
        },
        {
          "user": "g319909.nwytg.coM",
          "text": "@ismael_akez yes, When I pause the process with breakPoint I want to continu it in another PC, so I need to copy all the registers and the stack, because some registers point on address in the stack , and stack contains some important values , shortly continue running process in another PC in the point it break with breakPoint",
          "time": null
        },
        {
          "user": "ismael_akez",
          "text": "I think you should consider the GetThreadContext, get the important values or registers, use SetThreadContext to set the values then ResumeThread by assigning the address to EIP.. Copying the stack might not work.",
          "time": null
        },
        {
          "user": "knowmalware",
          "text": "The stack is a memory segment, so could dump it into the new PE.  Depending on which dumping tool you use, might take a little work (OllyDumpEx) or be impossible (the original OllyDump).  If this is of interest, let me know and I'll add the details to my answer.",
          "time": null
        }
      ]
    }
  ]
}