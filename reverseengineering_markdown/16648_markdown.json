{
  "title": "Resolve Addresses To Function Names",
  "link": "https://reverseengineering.stackexchange.com/questions/16648/resolve-addresses-to-function-names",
  "content": "I have a malware sample that wraps LoadLibrary & GetProcAddress duo to dynamically resolve functions. After this wrapper is called the value stored in eax(which is the function name)immediately gets called. The strings are encrypted and it's too difficult for me to reverse the encryption algorithm. Instead I wrote a python script which sets breakpoints where a call eax instruction is mentioned. Everyting's fine, I get the addresses of the functions from eax that are dynamically imported. The problem is I need them to be readable. I know how to resolve the address to a function name in widbg by calling ln address. But I don't want to sit all day and copy all of the 649 imports one by one to the windbg console. I looked up the windbg's scripting capabilities but I could not write anything that would do the job.\n\nThanks\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "ida",
    "malware",
    "idapython",
    "windbg",
    "dynamic-linking"
  ],
  "user": "rustam Shirinov",
  "time": "Oct 28, 2017 at 17:24",
  "comments": [
    {
      "user": "adriÃ¡n",
      "text": "I looked up the windbg's scripting capabilities but I could not write anything that would do the job. you can use python with windbg through pykd",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "i dont know if i understood your query correctly but if you want to log the function names that are passed to getproc address you can log them like this in windbg \n\n```\nC:\\>cdb calc\n\nMicrosoft (R) Windows Debugger Version 10.0.15063.468 X86\n\nntdll!LdrpDoDebuggerBreak+0x2c:\n775605a6 cc              int     3\n\n0:000> bp KERNELBASE!GetProcAddress \".printf \\\"%ma\\  \n\\\",poi(@esp+8);gc\"\n\n0:000> bl\n 0 e 756c6c81     0001 (0001)  0:**** KERNELBASE!GetProcAddress \".printf \\\"%ma\\  \n\\\",poi(@esp+8);gc\"\n\n\n0:000> g\n\nImmWINNLSEnableIME\nImmWINNLSGetEnableStatus\nImmSendIMEMessageExW\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nCtfImmTIMActivate\nCtfImmRestoreToolbarWnd\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nLpkPSMTextOut\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nModLoad: 740c0000 740d3000   C:\\Windows\\system32\\dwmapi.dll\nDwmIsCompositionEnabled\nGetLayout\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nModLoad: 75590000 7559c000   C:\\Windows\\system32\\CRYPTBASE.dll\nSystemFunction036\nCLSIDFromOle1Class\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nModLoad: 73b70000 73bac000   C:\\Windows\\system32\\oleacc.dll\nEventWrite\nEventRegister\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nBufferedPaintStopAllAnimations\n\nntdll!DbgBreakPoint:\n774f4108 cc              int     3\n0:004> q\nquit:\n\nC:\\>\n\n```\nafaik windbg also resolves the address to its function Name \n\n```\n0:000> rM0\ncalc!WinMain+0x6b:\n001316a0 ffd7            call    edi {kernel32!GetModuleHandleWStub (7737ccac)}\n\n```\n",
      "votes": "4",
      "user": "blabb",
      "time": "Oct 29, 2017 at 3:47",
      "is_accepted": true,
      "comments": [
        {
          "user": "rustam Shirinov",
          "text": "Thanks, but I wanted to know specifically how to resolve the value eax holds to a function name. IDA does it for instance if there address like 0x77****** IDA shows what function that is.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "windbg as far as i know also resolves the address to function names see the edit",
          "time": null
        },
        {
          "user": "rustam Shirinov",
          "text": "I am aware of that. I want windbg to do that for all of the 649 addresses and I don't want to do that manually. Also I don't know if that's possible with idapython.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "your query is still unclear you have to set breakpoint on all call eax to do that you need to pattern match and collect the addresses for pattern matching you can use # call*eax  range then use .foreach on the results   there is no arbitrary way in any debugger to break on  call eax automatically you either need to step each instruction or preset bps based on some manual work if you know getproc address is called each time your best bet is to grab it there",
          "time": null
        },
        {
          "user": "rustam Shirinov",
          "text": "found out that windbg has .for loops and it did the job Thanks. Your answer was helpful.",
          "time": null
        }
      ]
    }
  ]
}