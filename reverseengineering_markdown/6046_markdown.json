{
  "title": "Anti-cheat Memory Scan",
  "link": "https://reverseengineering.stackexchange.com/questions/6046/anti-cheat-memory-scan",
  "content": "I'm attaching a game's process to view/edit my ammo. I've reversed a few games and understand x86 assembly; however, I'm new to the whole anti-debuggers and memory scanning bit. I have searched for resources on how to combat this issue, but still have found nothing. Whenever I attach to the game it still works, but as soon as I change a single instruction it's as if the application \"scans\" it and detects my change, thus causing a crash. Also, sometimes if I happen to \"bypass\" the detection, the anti-cheat always finds a way to kick me out.\n\nI've read about a few functions that some programs may use, but none of them have really seemed to help.\n\n",
  "votes": "1",
  "answers": 2,
  "views": "3k",
  "tags": [
    "x86",
    "anti-debugging"
  ],
  "user": "iScott",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [
    {
      "user": "Guntram Blohm",
      "text": "Possible duplicate of reverseengineering.stackexchange.com/questions/3658/â€¦ ?",
      "time": null
    },
    {
      "user": "Dominik Antal",
      "text": "Are you sure it's the anticheat thats crashing the app, instead of you messing at the wrong place in memory? Since you didn't mention which AC is this, I'ld recommend you googling for \"warden\" and \"punk buster\" and check game hacking sites for more info on them to get a basic understanding how they work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Regarding the questions:\n\nIn your case I'd try to protect the changed memory from reading (by calling VirtualProtect from injected dll for example) or create breakpoint on reading memory on changed area and check the area of code where changed memory reading will occur - this will be the place where the changed code is read. \nYou'll need either recalculate the checksum with your new changed code or nopify the code that is responsible for incorrect checksum reaction.\n\nPlease note that the checksuming code you'll need to change may be also protected in the same manner.\n\n",
      "votes": "2",
      "user": "w s",
      "time": "Aug 10, 2014 at 11:03",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "First, there's no perfect solution. An application running on a computer is subject to all kinds of manipulation. All you can do is take a few reasonable steps to prevent most cheating and manipulation of the client by people who aren't willing to spend enough resources to figure out how to circumvent your anti-cheating measures. \n\nA few steps you can take include:\n\n",
      "votes": "1",
      "user": "Jeff-Inventor ChromeOS",
      "time": "Aug 10, 2014 at 20:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}