{
  "title": "How to get address or symbol of the usage of a constant located in rodata?",
  "link": "https://reverseengineering.stackexchange.com/questions/25541/how-to-get-address-or-symbol-of-the-usage-of-a-constant-located-in-rodata",
  "content": "I have an elf executable. I found a string (awesome string) in my .rodata section:\n\n```\n$ mb-readelf -p 10 a.out\n\nString dump of section '.rodata':\n  [     0]  Hello world\n...\n  [  ab12]  awesome string\n...\n\n```\nHere are the sections:\n\n```\n$ readelf -S a.out\nThere are 27 section headers, starting at offset 0x10150:\n\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n...\n  [10] .rodata           PROGBITS        00004fc8 00a030 001394 00   A  0   0  4\n...\n\n```\nSo the address of awesome string is 00004fc8 + ab12 = 14ada\n\nI want to know which functions are using this awesome string. How can I know who references the address 14ada?\n\n",
  "votes": "0",
  "answers": 2,
  "views": "3k",
  "tags": [
    "objdump",
    "address",
    "section"
  ],
  "user": "betontalpfa",
  "time": "Jul 25, 2020 at 7:54",
  "comments": [
    {
      "user": "blabb",
      "text": "using what ? your code? / a decent disassembler /  how are you looking most decent disassembler will cross reference the string",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Some string (start) is not referenced in the whole text at all, even if you turned on all optimizations. Let's see the following example.\n\n```\n#define _FILE strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__\n\n```\n_FILE will point the filename instead of the full path, however, the compiled elf will contain the whole __FILE__ string (the whole path) (See more details here.)\n\nIn this case, .rodata will be seen like this:\n\n```\n$ readelf -p 10 a.out\n\nString dump of section '.rodata':\n  [     0]  Hello world\n...\n  [  ab12]  /your/build/folder/awesome.c\n...\n\n```\nWhile the text will not refer the 0xab12 anywhere, because _FILE  points to 0xab25 (the start of the awesome.c) and the text will refer to this 0xab25 adress.\n\nA workaround can be that checking all offsets of a given string.\n\nThe following solution works with MicroBlaze GCC, but the solution approach is general, so it can be applied to all architecture.\n\nFind a known string in rodata. (A string with known usage. For example print a Hello world message at the beginning of the main.) Check out the compiled assembly. MicroBlaze GCC uses the strings in printf as following:\n\n```\n00000100 <main>:\n...\n     1ec:       b0000000        imm     0\n     1f0:       30a09fc8        addik   r5, r0, -24632  // This is the HELLO WORLD\n     1f4:       31000004        addik   r8, r0, 4\n     1f8:       11330000        addk    r9, r19, r0\n     1fc:       b9f45a58        brlid   r15, 23128      // 6954 <printf>\n\n```\nSo this compiler refers the addresses as 16 bit signed values.\n\nTo get the referring code line, convert the 0xfada (the absolute address of the awesome string) to 16 bit signed integer -1318 and search (grep) for this value in the disassembled text.\n\n",
      "votes": "1",
      "user": "betontalpfa",
      "time": "Jul 25, 2020 at 7:52",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "As i commented a decent disassembler will already do this for you\n\nhere  is sample output for a random awesome string  in a random binary using radare2\n\n```\nradare2 on cdb.exe from windbg in win7 x86 \n\ngrepping  for some awesome string \n[0x00416870]> iz~deb\n006 0x00018280 0x00419080  12  26 (.data) utf16le debugger.chm  <<<< an awesome string \n\nprinting crossrefs\n\n[0x00416870]> axg @0x419080\n- 0x00419080\n  - 0x00413cfe fcn 0x00413c6c fcn.00413c6c\n  - 0x00413c6c fcn 0x00413c6c fcn.00413c6c\n    - 0x00416755 ???\n  - 0x00413d17 fcn 0x00413c6c fcn.00413c6c\n  - 0x00413d2b fcn 0x00413c6c fcn.00413c6c\n  - 0x00413d38 fcn 0x00413c6c fcn.00413c6c\n \n looking at the listed cross refs\n[0x00416870]> pd1@0x413cfe\n|           0x00413cfe      6880904100     push str.debugger.chm       ; 0x419080 ; u\"debugger.chm\"\n[0x00416870]> pd1@0x413d17\n|           0x00413d17      6880904100     push str.debugger.chm       ; 0x419080 ; u\"debugger.chm\"\n[0x00416870]> pd1@0x413d2b\n|           0x00413d2b      66a380904100   mov word str.debugger.chm, ax ; [0x419080:2]=100 ; u\"debugger.chm\"\n[0x00416870]> pd1@0x413d38\n|           0x00413d38      b980904100     mov ecx, str.debugger.chm   ; 0x419080 ; u\"debugger.chm\"\n[0x00416870]>\n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Jul 24, 2020 at 17:51",
      "is_accepted": false,
      "comments": []
    }
  ]
}