{
  "title": "How can you tell where an assembly function ends?",
  "link": "https://reverseengineering.stackexchange.com/questions/31868/how-can-you-tell-where-an-assembly-function-ends",
  "content": "Finding the start of a function is sometimes obvious - for example if some part of the code has a call foo then foo must be a function.\n\nBut what about finding the end of a function? I realize tools like Radare and Ghidra do this, but it seems like they must be using heuristics because some things that \"look like\" the end of a function aren't. For example (in pseudo-asm):\n\n```\nfoo:\n  sub r1,r2\n  jge something\n  ret\nsomething:\n  add r1,r2\n  ret\n\n```\nI would say this is one function that happens to have two different exit points, but how would a RE tool figure this out?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "268",
  "tags": [
    "assembly",
    "static-analysis"
  ],
  "user": "Alex Shroyer",
  "time": "May 14, 2023 at 21:23",
  "comments": [
    {
      "user": "mimak",
      "text": "Decompilers perform structural analysis usually by constructing control flow graph and then the program's AST. I can recommend No More Gotos paper which shows the steps a decompiler takes to recover structured code (and how you can apply optimizations to the process), DREAM's codebase is also open source",
      "time": null
    },
    {
      "user": "Alex Shroyer",
      "text": "Thanks for sharing that paper, I'm reading it now. The gist seems to match something I've been thinking about for a while - that if you can successfully decompile obfuscated code just enough to apply some optimizations, you should be able to generate something much less obfuscated.",
      "time": null
    },
    {
      "user": "R4444",
      "text": "check first 3 pages of this great resource - dl.acm.org/doi/pdf/10.1145/3033019.3033028",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There's no definitive way to tell what instructions correspond to a single function, i.e. what exactly represents a function when looking only at the set of instructions. Compilers are free to optimize the high level code in any way they like. For reference, you can see the answer provided here.\n\nLuckily, compilers usually output predictable patterns, so Ghidra, Radare and other disassemblers first locate what they believe is a function by pattern matching and analysis of other functions, then analyze the control flow of the instructions to establish the control flow graph of the function and determine which branches the function has, where it \"ends\" etc.\n\nThere is also some good information here:\nhttps://stackoverflow.com/questions/41622226/assembly-function-recognition\n\n",
      "votes": "2",
      "user": "ynwarcs",
      "time": "May 15, 2023 at 11:03",
      "is_accepted": true,
      "comments": []
    }
  ]
}