{
  "title": "OllyDBG's disassembled syntax and c-equivalent",
  "link": "https://reverseengineering.stackexchange.com/questions/2432/ollydbgs-disassembled-syntax-and-c-equivalent",
  "content": "This is probably a pretty simple question as I'm not too used to how the syntax looks for OllyDBG's disassembler. \n\nDoes this following assembler statement:\n\n```\nMOV EAX, DWORD PTR [ESI + 14]\n\n```\nBe roughly translated to this C code:\n\n```\neax = *(esi + 0x14);\n\n```\nHave I understood the syntax correctly or am I misunderstanding this? \n\n",
  "votes": "5",
  "answers": 2,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "x86",
    "ollydbg"
  ],
  "user": "lfxgroove",
  "time": "Jul 9, 2013 at 11:33",
  "comments": [
    {
      "user": "DCoder",
      "text": "You're probably looking for DWORD eax = *(DWORD *)((char *)esi + 0x14). (I am not sure, but Olly probably shows offsets in hex, not decimal, by default.)",
      "time": null
    },
    {
      "user": "lfxgroove",
      "text": "So eax will contain the value of what is pointed to by esi + 0x14?",
      "time": null
    },
    {
      "user": "DCoder",
      "text": "Yes, and DWORD PTR means it will take four bytes starting with that address.",
      "time": null
    },
    {
      "user": "lfxgroove",
      "text": "Ah, thanks! But this later on could be used as a pointer if that's what you'd like? Would you mind turning this into an answer so i have something to accept? :)",
      "time": null
    },
    {
      "user": "Avery3R",
      "text": "In your question, eax = &(esi + 0x14); should be eax = *(esi + 0x14);. It's dereferencing it, not referencing it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The DWORD PTR [expression] syntax means \"take the value of expression, interpret it as an address, and access 4 (size of a DWORD) bytes starting with that address\". But assembly data types are rather different from those of C, so many C types can be accessed this way.\n\nThe instruction you provided is basically equivalent to C code:\n\n```\ntypedef dword_t ...;\ndword_t eax = *(dword_t *)((char *)esi + 0x14);\n\n```\nThis instruction can be used to access 4 contiguous bytes no matter what the C type of those bytes is - in the line above, you could (on a 32 bit system) define dword_t as int, float, void * or another type of the appropriate size, and it would still work the same way, it's just bits and bytes travelling from one place to another. With a reasonably smart compiler, this can even be used to read entire structs or arrays in one step, as long as their length is small enough.\n\nAs I said, it is not possible to say what the original C type of those bytes is just from this context. You have to look at other places where this value is used and look for indicators of the specific type. If you see it used in [eax] or a similar expression - it's probably a pointer. If it's used in a more complex expression, like [eax + ecx], one of the two is a pointer and the other is an array index/byte displacement from that pointer, but there's no telling which is which just from that line, more context is needed.\n\n",
      "votes": "5",
      "user": "DCoder",
      "time": "Jul 8, 2013 at 19:54",
      "is_accepted": true,
      "comments": [
        {
          "user": "lfxgroove",
          "text": "Thanks for the answer! Could i just ask one small last thing: lets say something like this is apparent: mov eax, DWORD PTR [ecx + esi*4 + 0x18] would that indicate that we have an array of structs? Ecx could be the base adr, esi*4 the size of one element and 0x18 the offset inside the struct to the member we want to access? Not saying that it has to be so, but it could? Thanks in advance!",
          "time": null
        },
        {
          "user": "DCoder",
          "text": "@lfxgroove: you're welcome. Yes, that is the most likely interpretation for such a construct.",
          "time": null
        }
      ]
    },
    {
      "content": "@DCoder has certainly answered this, so here is only some notes, or, at least it started out as a short note, and ended up as a monster.\n\nOllyDbg uses MASM by default (with some extension). In other words:\n\n```\noperation target, source\n\n```\nOther syntaxes are available under (depending on version):\n\nE.g. IDEAL, HLA and AT&T.\n\nThere is also quite a few other options for how the disassembled code looks like. Click around. The changes are instantaneously so easy to find the right one.\n\nNumbers are always hex, but without any notation like 0x or h (for compactness sake I guess – and the look is cleaner (IMHO)). Elsewhere, like the instruction details below disassembly, one can see e.g. base 10 numbers – then denoted by a dot at end. E.g. 0x10 (16.)\n\n(And here I stride off …)\n\n(Talking Intel)\n\nFirst off tables like the ones at x86asm.net and the Sandpile are definitively valuable assets in the work with assembly code. However one should also have:\n\nFrom Intel® 64 and IA-32 Architectures Software Developer Manuals.\n\nThere is a lot of good sections and descriptions of how a system is stitched together and how operations affect the overall system as in registers, flags, stacks etc. Read e.g. 6.2 STACKS, 3.4 BASIC PROGRAM EXECUTION REGISTERS, CHAPTER 4 DATA TYPES from the \"Developers\" volume.\n\nAs mentioned x86amd and Sandpile are good resources, but when you wonder about an instruction the manual is a good choice as well; \"Instruction Set Reference A-Z\".\n\nYour whole line is probably something like:\n\n```\n00406ED6     8B46 14           MOV EAX,DWORD PTR DS:[ESI+14]\n; or\n00406ED6     8B46 14           MOV EAX,DWORD PTR [ESI+14]\n\n```\n(Depending on options and Always show default segment.)\n\nIn this case we can split the binary as:\n\n```\n8B46 14\n | |  |\n | |  +---> Displacement\n | +------> ModR/M\n +--------> Opcode\n\n```\nNote that there can be prefixes before opcode and other fields as well. For detail look at manual. E.g. \"CHAPTER 2 INSTRUCTION FORMAT\" in A-Z manual.\n\nFind the MOV operation and you will see:\n\n```\nOpcode   Instruction     Op/En   64-bit    Compat   Description\n…\n8B /r    MOV r32,r/m32   RM      Valid     Valid    Move r/m32 to r32.\n               |   |\n               |   +---> source\n               +-------> destination\n…\n\n```\nInstruction Operand Encoding\n\n```\nOp/En   Operand1         Operand2         Operand3         Operand4\nRM      ModRM:reg (w)    ModRM:r/m (r)    NA               NA\n\n```\nRead \"3.1 INTERPRETING THE INSTRUCTION REFERENCE PAGES\" for details on codes.\n\nIn short MOV – mov table say:\n\n```\n8B   : Opcode.\n/r   : ModR/M byte follows opcode that contains register and r/m operand.\nr32  : One of the doubleword general-purpose registers.\nr/m32: Doubleword general-purpose register or memory operand.\nRM   : Code for \"Instruction Operand Encoding\"-table.\n\n```\nThe Instruction Operand Encoding table say:\n\n```\nreg  : Operand 1 is defined by the reg bits in the ModR/M byte.\n(w)  : Value is written.\nr/m  : Operand 2 is Mod+R/M bits of ModR/M byte.\n(r)  : Value is read.\n\n```\nOK. Now I'm going to deep here, but can't stop myself. (Often find that knowing the building blocks help understand the process.)\n\nThe ModR/M byte is 0x46 which in binary form would be:\n\n```\n         7,6   5,4,3   2,1,0  (Bit number)\n0x46:    01     000     110\n          |      |       |\n          |      |       +---> R/M\n          |      +-----------> REG/OpExt\n          +------------------> Mod\n\n```\n(Ref. \"2.1.5 Addressing-Mode Encoding of ModR/M and SIB Bytes\" table 2-2, in A-Z ref.).\n\nPt. 2. tells us that a 8-bit value, 8-bit displacement byte, follows the ModR/M byte which should be added to the value of ESI. In comparison, if there was a 32-bit displacement or register opcode+ModR/M's would be:\n\n```\n32-bit displacement                 General-purpose register\n\n +-----> MOV r32,r/m32               +-----> MOV r32,r/m32\n |                                   |\n8Bh 86h                             8Bh C1h\n     |         +--> EAX                  |         +--> EAX\n     |         |                         |         |\n     +---> 10 000 110 b                  +---> 11 000 001 b\n            |       |                           |       |\n            +---+---+                           +---+---+\n                |                                   |\n                v                                   v\n               ESI + disp32                        ECX\n\n```\nAs we have a disp8 the next byte is a 1-byte value that should be added to the value of ESI. In this case 0x14.\n\nNote that this byte is signed so e.g. 0xfe would mean ESI - 0x02.\n\nESI is pointer to data in segment pointed to by DS.\n\nA segment selector is comprised of three values:\n\n```\n    15 - 3             2                   1 - 0              (Bits)\n|-------------|-----------------|---------------------------|\n|    Index    | Table Indicator | Requested Privilege Level |\n+-------------+-----------------+---------------------------+\n\n```\nSo say selector = 0x0023 we have:\n\n```\n0x23 0000000000100 0 11 b\n           |       |  |\n           |       |  +----> RPL  : 3   = User land, (0 is kernel)\n           |       +-------> TI   : 0   = GDT (GDT or LDT)\n           +---------------> Index: 4     Multiplied by 8 and added to TI\n\n```\nThe segment registers (CS, DS, SS, ES, FS and GS) are designed to hold selectors for code, stack or data. This is to lessen complexity and increase efficiency.\n\nEach of these registers also have a hidden part aka \"shadow register\" or \"descriptor cache\" which holds base address, segment limit and access control information. These values are automatically loaded by the processor when a segment selector is loaded into the visible part of the segment registers.\n\n```\n   | Segment Selector |      Shadow Register     |\n   +------------------+--------------------------+\n   |  Idx  | TI | RPL | BASE  | Seg Lim | Access | CS, SS, DS, ES, FS, GS\n   +------------------+--------------------------+\n\n```\nThe BASE address is a linear address. ES, DS and SS are not used in 64-bit mode.\n\nRead a 32-bit value from segment address ESI+disp8. Example:\n\n```\nESI = 0x005056A0\n\nDump of DS segment:\n           0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n005056A0  00 00 00 00 9C 8F 41 7E 4C 1F 42 00 C0 1E 42 00  ....œA~LB.ÀB.\n005056B0  E0 1F 42 00 70 20 42 00 48 21 42 00 4A A8 42 7E  àB.p B.H!B.J¨B~\n\nESI + 0x14 = 0x005056B4 => 70 20 42 00 …\n\nEAX = (DWORD)70 20 42 00 = 00 42 20 70 (4333680.)\n\n```\nOne problem with your example is that esi is an integer (strictly speaking). The value, however, can be that one of a segment address. Then you have to take into consideration that each segment has a base address, (offset), – as in:\n\n```\nseg = malloc(4096);\nseg[0] \n    |\n    +---> at base address, e.g. 0x505000\n\n       +----------------+\n       |                |\n       |                |\n        …\n505000 |                | seg[00 - 0f]\n505010 |                | seg[10 - 1f]\n505020 |                | seg[20 - 2f]\n        …\n\n```\nIn this case, as it is ESI, that segment would be the one pointed to by DS.\n\nTo simulate this in C you would need variables for the general-purpose registers, but you would also need to create segments (from where to read/write data.) Roughly such a code could be something like:\n\n```\nvoid dword_m2r(uint32_t *x, struct segment *seg, uint32_t offset)\n{\n    *x = *((uint32_t*)(seg->data + (offset - seg->base)));\n}\n\ndword_m2r(&eax, &ds, esi + 0x14);\n\n```\nWhere struct segment and ds are:\n\n```\nstruct segment {\n    u8 *data;\n    u32 base;\n    u32 size;\n    u32 eip;\n};\n\nstruct segment ds;\nds.base = 0x00505000;\nds.size = 0x3000;\nds.data = malloc(ds.size);\nds.eip  = 0x00;\n\n```\nTo further develop on this concept you could create another struct with registers, use defines or variables for registers, add default segments etc.\n\nFor Intel-based architecture that could be something in the direction of this (as a not to nice beginning):\n\n```\n#include <stdint.h>\n\n#define u64  uint64_t\n#define u32  uint32_t\n#define u16  uint16_t\n#define u8   uint8_t\n\nunion gen_reg {\n    u64 r64;\n    u32 r32;\n    u16 r16;\n    u8   l8;\n};\n\nstruct CPU {\n    union gen_reg accumulator;\n    u8 *ah;\n    union gen_reg counter;\n    u8 *ch;\n    …\n    struct segment s_stack;\n    struct segment s_code;\n    struct segment s_data;\n    …\n\n    u32 eflags;\n    u32 eip;\n    …\n};\n\n\n#define RAX   CPU.accumulator.rax\n#define EAX   CPU.accumulator.eax\n#define AX    CPU.accumulator.ax\n#define AH    *((u8*)&AX + 1)\n#define AL    CPU.accumulator.al\n…\n\n\n/* and then some variant of */\nESI = 0x00505123;\ndword_m2r(&EAX, &DS, ESI + 0x14);\n\n```\nFor a more compact way, ditching ptr to H register etc. have a look at e.g.\nthe code base of virtualbox. Note: require some form of pack directive for most compilers to prevent filling of bits in structs – so that e.g. AH and AL really align up with correct bytes of AX.\n\n",
      "votes": "9",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": [
        {
          "user": "lfxgroove",
          "text": "I think i've got something to read up on right now ;) Thanks a lot for the information!",
          "time": null
        },
        {
          "user": "Runium",
          "text": "@lfxgroove: Your welcome :) It is rather educational to emulate assembly in C, (if are used to C).",
          "time": null
        },
        {
          "user": "lfxgroove",
          "text": "I can imagine, haven't ever really thought of doing that in that way :)",
          "time": null
        },
        {
          "user": "Runium",
          "text": "Harf. I also see I have messed up the #defines in last code block. Should obviously be CPU.accumulator.r64 etc.",
          "time": null
        }
      ]
    }
  ]
}