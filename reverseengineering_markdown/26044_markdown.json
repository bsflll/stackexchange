{
  "title": "Modern tools for reversing binary network protocols",
  "link": "https://reverseengineering.stackexchange.com/questions/26044/modern-tools-for-reversing-binary-network-protocols",
  "content": "What are some modern tools or techniques for attempting to reverse a binary protocol sent over UDP?\n\nI've been trying to do research on this, and it seems like almost everything is obselete. Previous answers on this site and other resources mention a tool called Canape, which seems to no longer be maintained, or the tool netzob, which has not been updated for years. While I did manage to get it running, it doesn't seem to be terribly useful.\n\nAre there any more modern tools which might show with visual aids, repeating patterns and similar things which would aid in reversing an unknown protocol?\n\n",
  "votes": "5",
  "answers": 3,
  "views": "1k",
  "tags": [
    "protocol"
  ],
  "user": "Thiery Jacobson",
  "time": "Oct 4, 2020 at 10:08",
  "comments": [
    {
      "user": "pythonpython",
      "text": "I have some tools in the works which do much of what you're after. If you'd like to share some dumped messages (hex, 1 msg per line), I can give you a hand.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Check out Kaitai Struct.\n\nBasically you define a binary format in YAML, and it will generate code to deserialize the format.  There is a github repo with quite a few existing definitions, including one for UDP.\n\nIt also has a simple hex viewer that's nice for visualization - it will highlight the format sections/structures/fields as you move around.  Or you can use the generated code to write your own programs for viewing, analysis, testing, etc.\n\nOnce you get comfortable with the definition language, it lets you focus more on figuring out the protocol or file format, and less on how to parse it.\n\n",
      "votes": "3",
      "user": "Bill B",
      "time": "Oct 5, 2020 at 7:15",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Everyone would like a magic tool which makes it less tedious to reverse an unknown binary protocol. I hope we will see some things in the next 12 months which do this.\n\nDifficult Problem\n\nPrevious static inference tools (Discoverer, Netzob) try to straddle both text and binary protocols. Text (think JSON payload) based protocols are generally much easier to reverse since as a human you can examine the data and understand at least what the types of the pieces are and the boundaries between fields. Binary protocols are ambiguous for both of types and field boundaries. Are these 4 bytes a IEEE Float or 2 unsigned shorts or 4 ASCII Chars?\n\nAdditionally, if you have access to the program / executable, you will eventually be able to reverse engineer the format from using IDA/Ghidra/Whatever. It may be tedious and take time, but you or a team of engineers can get it done.\n\nSo if you don't have access to the program, and all you have is some network traces or pcaps of the traffic, the odds are stacked against you. I think the reason you don't see modern tools (yet) is because it's hard and for less effort you can get more payoff either sticking to text protocol formats such as JSON / anything ASCII, or by working on binary program instrumentation and analysis to determine the format from the program itself.\n\nSo what can you try?\n\nIf you don't have access to the binary then hopefully you have multiple messages. The following assume you have a number of messages and have grouped them into pure formats meaning that the field layout for each message is exactly the same and only the values differ.\n\nIn terms of tools, for checksums here's something you can try: https://github.com/laurenlabell/checksum_finder\n\nBackground: https://dl.acm.org/doi/10.1145/3411506.3417599\n\n",
      "votes": "2",
      "user": "pythonpython",
      "time": "Nov 29, 2020 at 20:02",
      "is_accepted": false,
      "comments": [
        {
          "user": "sudhackar",
          "text": "While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - From Review",
          "time": null
        },
        {
          "user": "pythonpython",
          "text": "I don't have enough points to make a comment. OP asked for specific modern tools, so a link is appropriate in this context.  I hope some of the techniques I added are helpful to people working in this space.",
          "time": null
        }
      ]
    },
    {
      "content": "It's may be worth checking out writing dissectors for Wireshark. This is a good tutorial using Lua.\n\n",
      "votes": "1",
      "user": "hairlessbear",
      "time": "Oct 7, 2020 at 0:33",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "However, keep in mind that Lua dissectors - all but the most simple ones - tend to slow down the whole capturing and display process. Been there, done that. But I like them for prototyping.",
          "time": null
        }
      ]
    }
  ]
}