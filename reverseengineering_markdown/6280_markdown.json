{
  "title": "How to programmatically identify binary calling convention?",
  "link": "https://reverseengineering.stackexchange.com/questions/6280/how-to-programmatically-identify-binary-calling-convention",
  "content": "I have a problem where I'm instrumenting stripped binaries; I don't know the start of main(). But there's always an init(), and init() calls libc_start_main(), which receives a pointer to main.\n\nIf I can instrument libc with analysis code to intercept the argument, then I can retrieve that address and place another pin callback there so that I can get it's arguments. The problem is, I don't know what the calling convention is; I was thinking, if I could boil this down to a matter of the calling convention, then I do this for any function. I did notice that gdb knows the calling convention of libc_start_main(), in fact it is so good, it knows the order of the arguments as well.\n\nI did read a short note on stackoverflow that stated that the name of the function would yield the calling convention: « How to find the calling convention of a third party dll? »\n\nIf it's not possible to know the calling convention programmatically, what is the opinion on creating a local build of libc in order to be able to force a particular calling convention onto __libc_start_main()... you see my chain of thought. Does anybody think that this is a better approach, rather than solving it in the general case ?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "c++",
    "calling-conventions"
  ],
  "user": "Adam Miller",
  "time": "May 23, 2017 at 12:37",
  "comments": [
    {
      "user": "perror",
      "text": "I am afraid that solving the general case would require to follow the whole initialization function and track the final jump to the main() function. Meaning that it is probably much more efficient to have a collection of standard initialization functions than trying to solve it in the general case.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Since you mention __libc_start_main it seems you need to worry only about Linux. In such case, the calling convention is known and fixed. In most cases it will be SystemV ABI or similar.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Sep 22, 2014 at 14:48",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I found that (at least on Linux) it was reliable to intercept _init and to read from a constant offset from the stack pointer was pretty reliable. I ended up producing a pintool that would do just that. \n\n",
      "votes": "0",
      "user": "Adam Miller",
      "time": "Sep 24, 2014 at 22:55",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "Well, your question was a classical XY problem: you needed to solve a specific, narrow case but you stated it in a very generic way.",
          "time": null
        },
        {
          "user": "Adam Miller",
          "text": "I agree that your response is a correct/sufficient solution to the problem posed.",
          "time": null
        }
      ]
    }
  ]
}