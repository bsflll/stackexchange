{
  "title": "How to help IDA to auto complete libc functions?",
  "link": "https://reverseengineering.stackexchange.com/questions/22180/how-to-help-ida-to-auto-complete-libc-functions",
  "content": "I have a x86_64 ELF binary which is statically compiled. With some digging,\nI have found the C library is musl. In IDA Pro 7.0, the decompiled pseudo code\nshows sycalls as inline assembly code. But in latest IDA Pro 7.3.x it is shown\nas an incomplete function. Take fork() as an example:\n\n```\nmov eax, 57\nsyscall\n\n```\n```\n__asm { syscall; LINUX - sys_fork }\n\n```\n```\nsys_fork()\n\n```\nSo, there is some improvement :)\n\nI want IDA to automatically resolve the function parameters and return values.\nIn Windows world, I did something similar by creating type libraries.\nIs there any way to import the whole C library (musl or glibc) in IDA without\nmanually editing every libc functions?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "decompilation",
    "hexrays",
    "libc"
  ],
  "user": "Biswapriyo",
  "time": "Sep 24, 2019 at 9:38",
  "comments": [],
  "answers_data": [
    {
      "content": "Inline syscalls are rarely used on their own even in minimal libraries like musl. Usually there are wrapper functions around the syscall which is what actually ends up in the binary. So what you can do is use the FLAIR toolkit to generate a FLIRT signature from the musl’s static library and then apply the signature to your binary. This way you should get all the wrapper functions recognized which, coupled with one of the standard type libraries, should give you names and arguments for the C library functions. \n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Sep 27, 2019 at 21:19",
      "is_accepted": true,
      "comments": [
        {
          "user": "Biswapriyo",
          "text": "Compiled musl from git repo. Ran ./pelf libc.a. Got this error (__init_tls.lo): Unknown relocation type 42 (offset in section=0x41). Though it generated libc.pat file, ./sigmake libc.pat libc.sig shows this error ./lib/libc.pat (1): FATAL: can't find eof marker (---).",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "IIRC you can handle unsupported relocations with -r switch",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "It’s a switch for pelf, not sigmake",
          "time": null
        },
        {
          "user": "Biswapriyo",
          "text": "I have to find the compiler. Now flirt works, IDA can shows 90% of the syscall/libc function names.",
          "time": null
        }
      ]
    },
    {
      "content": "Here are the required steps using Igor Skochinsky's answer:\n\n```\ngit clone --depth=1 git://git.musl-libc.org/musl\n\n```\n```\ncd musl; ./configure; make -s -j2\n\n```\n```\ncd ./lib\n~/flair/bin/linux/pelf libc.a\n\n```\nThe output will be something like below:\n\n```\nFatal [/mnt/c/MyFiles/libc.a] (__init_tls.lo): Unknown relocation type 42 (offset in section=0x3a).\n\n```\n```\n./flair/bin/linux/pelf -r42:58:0 libc.a musl.pat\n\n```\nThe -r option is specified as -rN:O:L where N is relocation type, mark as\nvariable L bytes at offset O from the relocation address. This creates a PAT file.\n\n```\n./flair/bin/linux/sigmake -n musl musl.pat musl.sig\n\n```\nIf the output does not show any warning then the SIG file is OK. But if there\nany collisions with the function signature the output will be something like below:\n\n```\nlibc.sig: modules/leaves: 1550/1775, COLLISIONS: 41\n\n```\nTo mitigate the error, remove comments from musl.exc collision file. Then run\nthe above sigmake command again. There will be a musl.sig file which can be\nimported in IDA Pro from File > Load File > FLIRT signature file.\n\nFLIRT signature depends on the C/C++ compiler. For my case it is clang. I found\nit in the exception handling function. There will be a static string like CLNGC++\\0.\nThe string can not be found in IDA's String Window. So, one has to find the\nexception handling function first. The trick is that the function is called whenever\na error value returns.\n\n",
      "votes": "3",
      "user": "Biswapriyo",
      "time": "Nov 19, 2019 at 15:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Much appreciated!",
          "time": null
        }
      ]
    }
  ]
}