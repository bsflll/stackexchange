{
  "title": "Unpacking and disassembling mach-o binary",
  "link": "https://reverseengineering.stackexchange.com/questions/4818/unpacking-and-disassembling-mach-o-binary",
  "content": "I am trying to reverse an OSX mach-o binary,\nDisassembling gives me a bullshit, seems its encrypted with some packer.\nI need to determine the encryption algorithm, and decrypt the binary.\n\nLoad Commands\nHere is otool -l calculator  output,\n(seems there is no any crypt information... but it's encrypted)\n\n```\n\nLoad command 0\n      cmd LC_SEGMENT_64\n  cmdsize 72\n  segname __PAGEZERO\n   vmaddr 0x0000000000000000\n   vmsize 0x0000000100000000\n  fileoff 0\n filesize 0\n  maxprot 0x00000000\n initprot 0x00000000\n   nsects 0\n    flags 0x0\nLoad command 1\n      cmd LC_SEGMENT_64\n  cmdsize 1032\n  segname __TEXT\n   vmaddr 0x0000000100000000\n   vmsize 0x000000000032f000\n  fileoff 0\n filesize 3338240\n  maxprot 0x00000007\n initprot 0x00000007\n   nsects 12\n    flags 0x0\nSection\n  sectname __text\n   segname __TEXT\n      addr 0x0000000100001760\n      size 0x000000000028f4bc\n    offset 5984\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x80000400\n reserved1 0\n reserved2 0\nSection\n  sectname __stubs\n   segname __TEXT\n      addr 0x0000000100290c1c\n      size 0x0000000000000762\n    offset 2690076\n     align 2^1 (2)\n    reloff 0\n    nreloc 0\n     flags 0x80000408\n reserved1 0 (index into indirect symbol table)\n reserved2 6 (size of stubs)\nSection\n  sectname __stub_helper\n   segname __TEXT\n      addr 0x0000000100291380\n      size 0x0000000000000c5e\n    offset 2691968\n     align 2^2 (4)\n    reloff 0\n    nreloc 0\n     flags 0x80000400\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_methname\n   segname __TEXT\n      addr 0x0000000100291fde\n      size 0x0000000000015697\n    offset 2695134\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n     flags 0x00000002\n reserved1 0\n reserved2 0\nSection\n  sectname __cstring\n   segname __TEXT\n      addr 0x00000001002a7680\n      size 0x0000000000023fdc\n    offset 2782848\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x00000002\n reserved1 0\n reserved2 0\nSection\n  sectname __const\n   segname __TEXT\n      addr 0x00000001002cb660\n      size 0x0000000000006b50\n    offset 2930272\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __ustring\n   segname __TEXT\n      addr 0x00000001002d21b0\n      size 0x00000000000007de\n    offset 2957744\n     align 2^1 (2)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_classname\n   segname __TEXT\n      addr 0x00000001002d298e\n      size 0x0000000000000b42\n    offset 2959758\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n     flags 0x00000002\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_methtype\n   segname __TEXT\n      addr 0x00000001002d34d0\n      size 0x00000000000069c4\n    offset 2962640\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n     flags 0x00000002\n reserved1 0\n reserved2 0\nSection\n  sectname __gcc_except_tab\n   segname __TEXT\n      addr 0x00000001002d9e94\n      size 0x0000000000007b48\n    offset 2989716\n     align 2^2 (4)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __unwind_info\n   segname __TEXT\n      addr 0x00000001002e19dc\n      size 0x0000000000002814\n    offset 3021276\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __eh_frame\n   segname __TEXT\n      addr 0x00000001002e41f0\n      size 0x000000000004ae08\n    offset 3031536\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nLoad command 2\n      cmd LC_SEGMENT_64\n  cmdsize 1832\n  segname __DATA\n   vmaddr 0x000000010032f000\n   vmsize 0x0000000000160000\n  fileoff 3338240\n filesize 1396736\n  maxprot 0x00000007\n initprot 0x00000003\n   nsects 22\n    flags 0x0\nSection\n  sectname __program_vars\n   segname __DATA\n      addr 0x000000010032f000\n      size 0x0000000000000028\n    offset 3338240\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __nl_symbol_ptr\n   segname __DATA\n      addr 0x000000010032f028\n      size 0x0000000000000010\n    offset 3338280\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000006\n reserved1 315 (index into indirect symbol table)\n reserved2 0\nSection\n  sectname __got\n   segname __DATA\n      addr 0x000000010032f038\n      size 0x0000000000000218\n    offset 3338296\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000006\n reserved1 317 (index into indirect symbol table)\n reserved2 0\nSection\n  sectname __la_symbol_ptr\n   segname __DATA\n      addr 0x000000010032f250\n      size 0x00000000000009d8\n    offset 3338832\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000007\n reserved1 384 (index into indirect symbol table)\n reserved2 0\nSection\n  sectname __pointers\n   segname __DATA\n      addr 0x000000010032fc28\n      size 0x0000000000000008\n    offset 3341352\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __const\n   segname __DATA\n      addr 0x000000010032fc30\n      size 0x00000000000051d0\n    offset 3341360\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_classlist\n   segname __DATA\n      addr 0x0000000100334e00\n      size 0x00000000000002f8\n    offset 3362304\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_nlclslist\n   segname __DATA\n      addr 0x00000001003350f8\n      size 0x0000000000000008\n    offset 3363064\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_catlist\n   segname __DATA\n      addr 0x0000000100335100\n      size 0x0000000000000048\n    offset 3363072\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_protolist\n   segname __DATA\n      addr 0x0000000100335148\n      size 0x0000000000000158\n    offset 3363144\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_imageinfo\n   segname __DATA\n      addr 0x00000001003352a0\n      size 0x0000000000000008\n    offset 3363488\n     align 2^2 (4)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_const\n   segname __DATA\n      addr 0x00000001003352a8\n      size 0x000000000002c718\n    offset 3363496\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_selrefs\n   segname __DATA\n      addr 0x00000001003619c0\n      size 0x0000000000004c70\n    offset 3545536\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000005\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_protorefs\n   segname __DATA\n      addr 0x0000000100366630\n      size 0x0000000000000028\n    offset 3565104\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_classrefs\n   segname __DATA\n      addr 0x0000000100366658\n      size 0x0000000000000530\n    offset 3565144\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_superrefs\n   segname __DATA\n      addr 0x0000000100366b88\n      size 0x0000000000000218\n    offset 3566472\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x10000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_data\n   segname __DATA\n      addr 0x0000000100366da0\n      size 0x0000000000001e00\n    offset 3567008\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __objc_ivar\n   segname __DATA\n      addr 0x0000000100368ba0\n      size 0x0000000000001888\n    offset 3574688\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __cfstring\n   segname __DATA\n      addr 0x000000010036a428\n      size 0x000000000000ff60\n    offset 3580968\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __data\n   segname __DATA\n      addr 0x000000010037a390\n      size 0x0000000000109c38\n    offset 3646352\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x00000000\n reserved1 0\n reserved2 0\nSection\n  sectname __bss\n   segname __DATA\n      addr 0x0000000100483fd0\n      size 0x000000000000a898\n    offset 0\n     align 2^4 (16)\n    reloff 0\n    nreloc 0\n     flags 0x00000001\n reserved1 0\n reserved2 0\nSection\n  sectname __common\n   segname __DATA\n      addr 0x000000010048e868\n      size 0x00000000000004a8\n    offset 0\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000001\n reserved1 0\n reserved2 0\nLoad command 3\n      cmd LC_SEGMENT_64\n  cmdsize 72\n  segname __LINKEDIT\n   vmaddr 0x000000010048f000\n   vmsize 0x000000000001b000\n  fileoff 4734976\n filesize 108304\n  maxprot 0x00000007\n initprot 0x00000001\n   nsects 0\n    flags 0x0\nLoad command 4\n            cmd LC_DYLD_INFO_ONLY\n        cmdsize 48\n     rebase_off 4734976\n    rebase_size 10256\n       bind_off 4745232\n      bind_size 6696\n  weak_bind_off 4751928\n weak_bind_size 40\n  lazy_bind_off 4751968\n lazy_bind_size 8056\n     export_off 4760024\n    export_size 28752\nLoad command 5\n     cmd LC_SYMTAB\n cmdsize 24\n  symoff 4788776\n   nsyms 492\n  stroff 4799444\n strsize 10680\nLoad command 6\n            cmd LC_DYSYMTAB\n        cmdsize 80\n      ilocalsym 0\n      nlocalsym 1\n     iextdefsym 1\n     nextdefsym 1\n      iundefsym 2\n      nundefsym 490\n         tocoff 0\n           ntoc 0\n      modtaboff 0\n        nmodtab 0\n   extrefsymoff 0\n    nextrefsyms 0\n indirectsymoff 4796648\n  nindirectsyms 699\n      extreloff 0\n        nextrel 0\n      locreloff 0\n        nlocrel 0\nLoad command 7\n          cmd LC_LOAD_DYLINKER\n      cmdsize 32\n         name /usr/lib/dyld (offset 12)\nLoad command 8\n     cmd LC_UUID\n cmdsize 24\n    uuid 1AF510C1-9C81-3DCA-9ADE-2B00ED53EF5F\nLoad command 9\n      cmd LC_VERSION_MIN_MACOSX\n  cmdsize 16\n  version 10.7\n      sdk 10.9\nLoad command 10\n        cmd LC_UNIXTHREAD\n    cmdsize 184\n     flavor x86_THREAD_STATE64\n      count x86_THREAD_STATE64_COUNT\n   rax  0x0000000000000000 rbx 0x0000000000000000 rcx  0x0000000000000000\n   rdx  0x0000000000000000 rdi 0x0000000000000000 rsi  0x0000000000000000\n   rbp  0x0000000000000000 rsp 0x0000000000000000 r8   0x0000000000000000\n    r9  0x0000000000000000 r10 0x0000000000000000 r11  0x0000000000000000\n   r12  0x0000000000000000 r13 0x0000000000000000 r14  0x0000000000000000\n   r15  0x0000000000000000 rip 0x0000000100001760\nrflags  0x0000000000000000 cs  0x0000000000000000 fs   0x0000000000000000\n    gs  0x0000000000000000\nLoad command 11\n          cmd LC_LOAD_DYLIB\n      cmdsize 88\n         name @loader_path/../Frameworks/Sparkle.framework/Versions/A/Sparkle (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1.5.0\ncompatibility version 1.5.0\nLoad command 12\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name @rpath/libLLVM-3.4.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 0.0.0\ncompatibility version 0.0.0\nLoad command 13\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name /usr/lib/libexpat.1.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 7.2.0\ncompatibility version 7.0.0\nLoad command 14\n          cmd LC_LOAD_DYLIB\n      cmdsize 88\n         name /System/Library/Frameworks/Python.framework/Versions/2.7/Python (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 2.7.5\ncompatibility version 2.7.0\nLoad command 15\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name /usr/lib/libncurses.5.4.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 5.4.0\ncompatibility version 5.4.0\nLoad command 16\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name /usr/lib/libSystem.B.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1197.1.1\ncompatibility version 1.0.0\nLoad command 17\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name /usr/lib/libcrypto.0.9.8.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 50.0.0\ncompatibility version 0.9.8\nLoad command 18\n          cmd LC_LOAD_DYLIB\n      cmdsize 48\n         name /usr/lib/libc++.1.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 120.0.0\ncompatibility version 1.0.0\nLoad command 19\n          cmd LC_LOAD_DYLIB\n      cmdsize 48\n         name /usr/lib/libz.1.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1.2.5\ncompatibility version 1.0.0\nLoad command 20\n          cmd LC_LOAD_DYLIB\n      cmdsize 96\n         name /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1.8.0\ncompatibility version 1.2.0\nLoad command 21\n          cmd LC_LOAD_DYLIB\n      cmdsize 88\n         name /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 275.0.0\ncompatibility version 1.0.0\nLoad command 22\n          cmd LC_LOAD_DYLIB\n      cmdsize 88\n         name /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 20.0.0\ncompatibility version 1.0.0\nLoad command 23\n          cmd LC_LOAD_DYLIB\n      cmdsize 96\n         name /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1056.13.0\ncompatibility version 300.0.0\nLoad command 24\n          cmd LC_LOAD_DYLIB\n      cmdsize 56\n         name /usr/lib/libobjc.A.dylib (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 228.0.0\ncompatibility version 1.0.0\nLoad command 25\n          cmd LC_LOAD_DYLIB\n      cmdsize 88\n         name /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 1265.19.0\ncompatibility version 45.0.0\nLoad command 26\n          cmd LC_LOAD_DYLIB\n      cmdsize 112\n         name /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 48.0.0\ncompatibility version 1.0.0\nLoad command 27\n          cmd LC_LOAD_DYLIB\n      cmdsize 104\n         name /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 59.0.0\ncompatibility version 1.0.0\nLoad command 28\n          cmd LC_LOAD_DYLIB\n      cmdsize 104\n         name /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (offset 24)\n   time stamp 2 Thu Jan  1 04:00:02 1970\n      current version 855.14.0\ncompatibility version 150.0.0\nLoad command 29\n          cmd LC_RPATH\n      cmdsize 48\n         path @executable_path/../Frameworks (offset 12)\nLoad command 30\n      cmd LC_DATA_IN_CODE\n  cmdsize 16\n  dataoff 4788776\n datasize 0\nLoad command 31\n      cmd LC_CODE_SIGNATURE\n  cmdsize 16\n  dataoff 4810128\n datasize 33152\n\n```\nDiassembling\nHere is otool -tvV calculator output chunk\n\n```\n\n0000000100001760    lahf\n0000000100001761    popq    %rcx\n0000000100001763    rolb    $0xe2,0xc3c024ac(%rax)\n000000010000176a    jne 0x1000016ef\n000000010000176c    .byte 0x06 #bad opcode\n000000010000176d    sbbb    %al,0x5b(%rsi)\n0000000100001770    jle 0x10000178f\n0000000100001772    xorl    %edi,0x30659afe(%rsi)\n0000000100001778    fldenvq 0xc9e9c0e1(%r14)\n000000010000177f    xorl    %esp,%esp\n0000000100001781    xchgl   %esp,%eax\n0000000100001782    xchgl   %esi,%eax\n0000000100001783    wait/jrcxz  0x1000017ed\n0000000100001786    stosl   %eax,(%edi)\n0000000100001787    xchgl   %edi,%eax\n0000000100001788    jbe 0x100001727\n000000010000178a    stc\n000000010000178b    jns 0x100001748\n000000010000178d    xorl    %ecx,0x13(%rbx,%rbx,8)\n0000000100001791    popq    %rax\n0000000100001793    sbbl    $0xe9507796,%eax\n0000000100001798    popq    %rbx\n0000000100001799    incb    (%rbx)\n000000010000179b    js  0x100001778\n000000010000179e    addb    %ch,%bh\n00000001000017a0    testl   0xe4(%rcx),%ebp\n00000001000017a3    imull   $0xfe,0xf6(%rcx),%esp\n00000001000017a7    clc\n00000001000017a8    imull   $0x85bb1b76,0x65(%rdx),%ebp\n00000001000017af    cld\n00000001000017b0    testb   0xc9(%rax),%cl\n00000001000017b3    loop    0x10000175d\n00000001000017b5    andb    %ah,0x4c79a1ae(%rax)\n00000001000017bb    orl 0x90da6a05(%rbp,%rdx),%esi\n00000001000017c2    sbbb    %ch,%ch\n00000001000017c4    jrcxz   0x100001780\n00000001000017c6    xorb    $0x6c,%al\n00000001000017c8    jne 0x1000017b9\n00000001000017ca    orb %cl,0x13(%rcx,%rsi)\n00000001000017ce    ficompl 0x7d4a8745(%rbp)\n00000001000017d4    .byte 0x07 #bad opcode\n00000001000017d5    mov %?6,(%rax)\n00000001000017d7    insl\n00000001000017d8    .byte 0xd4 #bad opcode\n00000001000017d9    movb    %dl,%al\n00000001000017db    .byte 0xdd, 0x2f #bad opcode\n00000001000017dd    lcall   $0x76f5,$0xedc7f289\n00000001000017e4    subb    $0xd3,%al\n00000001000017e6    mull    0xa4(%rsi)\n00000001000017e9    popf\n00000001000017ea    inl $0xf4,%eax\n00000001000017ec    adcl    $0x413fe92b,(%rdi)\n00000001000017f2    sarl    $0x12,0xf5(%rcx)\n00000001000017f6    addb    %dh,0xec(%rbx,%rcx)\n00000001000017fa    movabsb 0x63ea27230d2c31f2,%r8d\n0000000100001804    movl    $0x12d794f0,%ecx\n0000000100001809    subb    $0x20,%al\n000000010000180c    shll    %esi\n000000010000180e    repz/falc\n0000000100001810    movb    $0xd9,%dh\n0000000100001812    outl    %eax,%dx\n0000000100001813    loop    0x1000017ab\n0000000100001815    movl    $0x781ecd57,%edi\n000000010000181b    pushq   %rdi\n000000010000181c    addb    $0x7e,%ah\n000000010000181f    inl $0x40,%eax\n0000000100001821    adcl    $0xd480505a,%eax\n0000000100001826    cmpl    $0x28a6762d,%eax\n000000010000182b    ljmpl   *0x36(%rdx,%rbx)\n000000010000182f    .byte 0xce #bad opcode\n0000000100001830    xchgl   %edx,%eax\n0000000100001831    movabsl %eax,0x6d3cb9568b4b88a5\n000000010000183a    subl    0xa8d980d9(%rbx,%rdi,8),%eax\n0000000100001841    popq    %rdi\n0000000100001842    pushq   $0x4c\n0000000100001844    subb    $0x97,%al\n0000000100001846    .byte 0x43, 0x82, 0x25 #bad opcode\n0000000100001849    adcb    %ah,%ah\n000000010000184b    testb   0x3141d9d1(%rbx),%ah\n0000000100001851    sbbl    $0xc405e320,%eax\n0000000100001856    xchgl   %ecx,%eax\n0000000100001857    paddb   %mm2,%mm1\n000000010000185a    xorl    %edi,%edi\n000000010000185c    clc\n000000010000185d    jmp 0x100001885\n000000010000185f    xchgl   %esi,%eax\n0000000100001860    wait/jae    0x1000018a8\n0000000100001863    lret\n0000000100001864    jb  0x1000018ae\n0000000100001866    fisubrs (%rsi)\n0000000100001869    lodsb   (%esi),%al\n000000010000186a    pushq   %rsp\n000000010000186b    .byte 0x27 #bad opcode\n000000010000186c    lret\n000000010000186d    cmpl    %eax,(%rdx)\n000000010000186f    orb $0xa2,%al\n0000000100001871    movl    $0xb2bf2631,%ebp\n0000000100001876    sti\n0000000100001877    movl    0x87b0df80(%rsp,%rcx,8),%ecx\n000000010000187e    hlt\n000000010000187f    inb $0x42,%al\n0000000100001881    andl    %esi,%ebx\n0000000100001883    adcl    %eax,0xa587d6ff(%rsi)\n0000000100001889    movsll  %ch,%esp\n000000010000188b    clc\n000000010000188c    xchgl   %ecx,%eax\n000000010000188d    sbbb    $0x82,%al\n000000010000188f    cwtl\n0000000100001890    movl    $0x673e9a73,%ebx\n0000000100001895    movb    $0x18,%bl\n0000000100001899    leal    0x87(%rax),%edi\n000000010000189c    .byte 0x37 #bad opcode\n000000010000189d    jns 0x10000187a\n000000010000189f    .byte 0x06 #bad opcode\n00000001000018a0    rolb    $0x44,(%rsp,%rax,4)\n00000001000018a4    movsll  %cl,%edx\n00000001000018a6    fiaddl  0xf4061e00(%rip)\n00000001000018ac    jo  0x100001838\n00000001000018ae    stosl   %eax,(%edi)\n00000001000018af    adcb    0xac1ff7e3(%rcx),%dl\n00000001000018b5    testl   $0x51d2321e,%eax\n00000001000018ba    movl    $0x10cb41ba,%ebp\n00000001000018bf    shrb    0xa724e9d8(%rdx)\n00000001000018c5    fcompl  0x31(%rbp)\n00000001000018c8    xorb    (%rdi,%rdx,4),%ch\n00000001000018cb    leal    %eax,%eax\n00000001000018cd    addb    %dh,%ah\n00000001000018cf    movsl   (%esi),(%edi)\n00000001000018d0    addb    0x64cc6bfb(%rcx),%bh\n00000001000018d6    testl   0xb4f698f5(%r10),%esi\n00000001000018dd    mov %esp,%?6\n00000001000018df    pushf\n00000001000018e0    popq    %rsi\n00000001000018e1    jmp 0x83f231a4\n00000001000018e6    .byte 0xd3, 0xf3 #bad opcode\n00000001000018e8    orl %ebp,0xf1(%rdx)\n00000001000018eb    movl    $0xf2f3e10c,0x35(%rdi,%rbx)\n00000001000018f3    xchgl   %esi,%eax\n00000001000018f4    sbbb    %r11d,%esp\n00000001000018f7    movl    $0x30412d40,%eax\n00000001000018fc    insl\n00000001000018ff    popq    %rsi\n0000000100001900    sahf\n0000000100001901    popq    %rax\n0000000100001902    jrcxz   0x10000197c\n0000000100001904    andl    0x758d6d0d(%rsi),%ecx\n000000010000190a    movb    $0x89,%ch\n000000010000190c    fistpq  0xa5(%rsi)\n000000010000190f    .byte 0x62 #bad opcode\n0000000100001910    sahf\n0000000100001911    loop    0x10000193b\n0000000100001913    jg  0x100001908\n0000000100001915    cmpsl   (%esi),(%edi)\n0000000100001916    movsl   (%esi),(%edi)\n0000000100001917    iret\n0000000100001918    scasl   %eax,(%edi)\n0000000100001919    .byte 0x0e #bad opcode\n000000010000191a    xorb    %cl,(%rcx)\n000000010000191c    stosb   %al,(%edi)\n000000010000191d    andb    $0x9b,%al\n000000010000191f    cmpl    $0x72a850c7,0xbdced867(%rax,2)\n000000010000192a    jae 0x1000018c0\n000000010000192c    .byte 0xd3, 0xf6 #bad opcode\n000000010000192e    lcall   $0x608c,$0x851d69e3\n0000000100001935    .byte 0x62 #bad opcode\n0000000100001936    xchgl   %ecx,%eax\n0000000100001937    cmpb    %ah,%cs:%cl\n000000010000193a    movsb   (%esi),(%edi)\n000000010000193b    subb    $0xc7,%al\n000000010000193d    outl    %eax,$0x05\n000000010000193f    je  0x100001999\n0000000100001941    inl $%cs:0x7d,%eax\n0000000100001944    sbbl    %ebp,0x7c5ec982(%rdx)\n000000010000194a    movsl   (%esi),(%edi)\n000000010000194b    xchgl   %ecx,%eax\n000000010000194c    movl    $0x1393211e,%ecx\n0000000100001951    .byte 0x27 #bad opcode\n0000000100001952    cmpsl   (%esi),(%edi)\n0000000100001953    xchgl   %esp,%eax\n0000000100001954    .byte 0x1f #bad opcode\n0000000100001955    addl    $0x6ed2f22b,%eax\n000000010000195a    insb\n000000010000195b    .byte 0x67, 0xd5 #bad opcode\n000000010000195d    cmpl    (%rdi),%edi\n000000010000195f    popq    %rbp\n0000000100001960    ret\n0000000100001961    addl    $0x961d3d82,%eax\n0000000100001966    ret\n0000000100001967    jle 0x100001938\n0000000100001969    .byte 0x1e #bad opcode\n000000010000196a    loop    0x100001936\n000000010000196c    movsl   (%esi),(%edi)\n000000010000196d    andb    $0xfc,(%rax)\n0000000100001970    xchgl   %ecx,%eax\n0000000100001971    pushf\n0000000100001972    movb    $0xb0,%ah\n0000000100001974    popq    %rbp\n0000000100001975    lahf\n0000000100001976    sbbl    $0x9605ee9d,%eax\n000000010000197b    incb    %bh\n000000010000197d    cmpl    (%rcx),%ecx\n000000010000197f    testb   0x90(%rsp,%rsi,8),%ecx\n0000000100001985    repz/int    $0x3\n0000000100001987    .byte 0x4c, 0x2f #bad opcode\n0000000100001989    ljmp    $0x072a,$0x233e8063\n0000000100001990    leave\n0000000100001991    orb %al,(%rdx)\n0000000100001993    andl    (%rcx),%ebp\n0000000100001995    ljmpl   *(%rbx)\n0000000100001997    shlb    0x26(%rdi)\n000000010000199a    movl    $0x592a9d36,%esp\n\n```\nLLVM disassembler fails with output \n\n```\n\n(__TEXT,__text) section\nSegmentation fault: 11\n\n```\nInjecting via cycript \n\nI have tried cycript to dump image and patch it back via dd tool, but seems this trick doesn't work and binary gets corrupted.  \n\nDebuggers\n\ngdb/lldb can't attach/start the process, as it's uses pt_deny_atach/sysctl/kauth anti-debugging techniques.  \n\nI have also tried to patch osx kernel (as the assembly is not available and I can't nop out that calls) - to ignore anti-debugging calls, but after this process doesn't event start, just hangs up (But other application like Github, iTunes are starting without any problem, seems it has anti-anti-anti debugging protection :)).  \n\nCan you please advise some extra technique (or suggestion what I can try) to get the plain assembly?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "3k",
  "tags": [
    "disassembly",
    "osx",
    "encryption",
    "mach-o"
  ],
  "user": "l0gg3r",
  "time": "Jul 9, 2014 at 11:41",
  "comments": [
    {
      "user": "toasted_flakes",
      "text": "You might find onyx the black cat useful. It's a kernel extension that disable some features like PT_DENY_ATTACH",
      "time": null
    },
    {
      "user": "l0gg3r",
      "text": "@toasted_flakes I tried it, but when onyx is on, target hangs up, and doesn't even run(only hangs up)",
      "time": null
    },
    {
      "user": "fG-",
      "text": "Trying to crack Hopper? Eh eh eh eh eh You need to be a bit smarter, it requires extra work ;-)",
      "time": null
    },
    {
      "user": "l0gg3r",
      "text": "@fG- can you please advise me way, to continue working? or some technique to start learning.",
      "time": null
    },
    {
      "user": "ikaerom",
      "text": "@fG-: how did you figure the OP is trying to reverse engineer Hopper? Anyway, if is, in 2016 a quick search in google will reveal youtube.com/watch?v=pCITcLqgS9Q. Now, during the first 20mins, cigoL actually mentions a couple of techniques (MachOView, DyLD OpCode/Action view, lldb with br on sysctl, and so on) to tackle some of the difficulties raised by the OP, but as you mentioned, it requires extra work :).",
      "time": null
    }
  ],
  "answers_data": []
}