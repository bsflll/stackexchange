{
  "title": "is there a tool to decompile old exe to C?",
  "link": "https://reverseengineering.stackexchange.com/questions/29885/is-there-a-tool-to-decompile-old-exe-to-c",
  "content": "I follow the free software implementation of OpenRCT2 from the beggining (when it was in other repository).\n\nAnd the first commits are a bunch of C files, these files has a lot of asm blocks of code inline of C, and there were a lot of C functions with automatic names.\n\nI don't know the tool. I was trying with Ghidra and Cutter but it is not a \"correct\" C that it can not is compiled it.\n\nA example of code from first commits of OpenRCT2:\n\n```\n// rct2: 0x00683499\nvoid rct2_init_directories()\n{\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char), \"C:\\\\Program Files (x86)\\\\Infogrames\\\\RollerCoaster Tycoon 2\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH_SLASH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH_SLASH, char), \"\\\\\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_SAVED_GAMES_PATH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_SAVED_GAMES_PATH, char), \"\\\\Saved Games\\\\\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_SCENARIOS_PATH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_SCENARIOS_PATH, char), \"\\\\Scenarios\\\\*.SC6\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_LANDSCAPES_PATH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_LANDSCAPES_PATH, char), \"\\\\Landscapes\\\\*.SC6\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_OBJECT_DATA_PATH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_OBJECT_DATA_PATH, char), \"\\\\ObjData\\\\*.DAT\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_TRACKS_PATH, char), RCT2_ADDRESS(RCT2_ADDRESS_APP_PATH, char));\n    strcat(RCT2_ADDRESS(RCT2_ADDRESS_TRACKS_PATH, char), \"\\\\Tracks\\\\*.TD?\");\n\n    strcpy(RCT2_ADDRESS(RCT2_ADDRESS_SAVED_GAMES_PATH_2, char), RCT2_ADDRESS(RCT2_ADDRESS_SAVED_GAMES_PATH, char));\n}\n\n// rct2: 0x00674B42\nvoid rct2_startup_checks()\n{\n    // check if game is already running\n\n    RCT2_CALLPROC(0x00674C0B);\n}\n\nvoid rct2_update()\n{\n    __asm {\n        mov eax, 009DE564h\n            mov[eax], esp\n    }\n\n    if (!setjmp(_end_update_jump))\n        rct2_update_2();\n}\n\nvoid rct2_update_2()\n{\n    int tick, tick2;\n\n    tick = timeGetTime();\n\n    RCT2_GLOBAL(0x009DE588, sint16) = tick2 = tick - RCT2_GLOBAL(0x009DE580, sint32);\n    if (RCT2_GLOBAL(0x009DE588, sint16) > 500)\n        RCT2_GLOBAL(0x009DE588, sint16) = 500;\n\n    RCT2_GLOBAL(0x009DE580, sint32) = tick;\n    if (RCT2_GLOBAL(0x009DEA6E, uint8) == 0)\n        RCT2_GLOBAL(0x009DE584, sint32) += tick2;\n\n    if (RCT2_GLOBAL(0x009DEA6E, uint8) == 0)\n        RCT2_GLOBAL(0x009DE584, sint32) += tick2;\n\n    if (RCT2_GLOBAL(RCT2_ADDRESS_ON_TUTORIAL, uint8) != 0)\n        RCT2_GLOBAL(0x009DE588, sint16) = 31;\n\n    // TODO: screenshot countdown process\n\n    // Screens\n    if (RCT2_GLOBAL(RCT2_ADDRESS_RUN_INTRO_TICK_PART, uint8) != 0)\n        intro_update();\n    else if (RCT2_GLOBAL(RCT2_ADDRESS_SCREEN_FLAGS, uint8) & 1)\n        title_update();\n    else\n        game_update();\n}\n\n```\n",
  "votes": "1",
  "answers": 2,
  "views": "2k",
  "tags": [
    "assembly",
    "c",
    "disassemblers"
  ],
  "user": "tres.14159",
  "time": "Jan 18, 2022 at 9:32",
  "comments": [
    {
      "user": "tres.14159",
      "text": "I know that there are a lot of work to \"translate\" the automatic lines to human readable code. But I don't know the first step (get a bunch of C files).",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Reko maintainer here. You could give Reko a try (https://github.com/uxmal/reko). Like the other decompilers you've tried, it won't generate immediately compileable code, for a vast number of reasons.\n\nHowever, open source projects usually appreciate constructive user feedback. You could try running Reko (or any other decompiler) on your binary, and then looking at places where you think Reko could do better. Then you could file specific issues (here's a good example: https://github.com/uxmal/reko/issues/1129). This is more likely to result in improvements than the non-specific \"I ran  and the output is not what I want it to be.\"\n\n",
      "votes": "1",
      "user": "John Källén",
      "time": "Jan 18, 2022 at 16:35",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Many years ago, I wrote a lengthy answer explaining why it is generally impossible for decompilers to produce C code that compiles for arbitrary input binaries. There is a lot of manual work in your future.\n\n",
      "votes": "1",
      "user": "Rolf Rolles",
      "time": "Jan 18, 2022 at 23:43",
      "is_accepted": false,
      "comments": []
    }
  ]
}