{
  "title": "Help with a pointer",
  "link": "https://reverseengineering.stackexchange.com/questions/20228/help-with-a-pointer",
  "content": "Sorry for this stupid question. It's late here and I've been kinda stuck for a while over this so I hope someone here can answer this easily.\n\nIn CheatEngine, 028FA190+374 is pointing to 028F1788. When I type in 028FA190+374 in the calculator I get 28FA504. Can someone explain me why this is different?\n\n\n\n\n\n",
  "votes": "4",
  "answers": 1,
  "views": "178",
  "tags": [
    "hex",
    "hexadecimal",
    "cheat-engine"
  ],
  "user": "Christian Handest",
  "time": "Dec 29, 2018 at 22:34",
  "comments": [],
  "answers_data": [
    {
      "content": "It's different, because it isn't just 0x28FA190 + 0x374, but it's *(0x28FA190 + 0x374).\n\n0x28FA190 is a base address, probably of a structure, and 0x374 is an offset, when you sum these values and dereference the result, you get value of a field that's 0x374 bytes away from the beginning of this structure. This field seems to be a pointer, that's why it's value is also an address, but it could contain any value.\n\n```\nstruct A\n{\n  char padding[0x374]; // occupy the first 0x374 bytes, so that myPointer's address is address of this structure + 0x374 (i.e. (DWORD)this + 0x374)\n\n  int* myPointer;\n};\n\nA a;\n\nint valueOfMyPointer = **(int**)((DWORD)&a + 0x374); // valueOfMyPointer = *a.myPointer;\n\n```\nYou need to explicitly cast &a to DWORD (aka unsigned long), because of pointer arithmetic - if you would do &a + 0x374, the result would actually be (DWORD)&a + 0x374 * sizeof(a).\n\nYou can also write the entire expression from your screen as following:\n\nuint32_t result = *(DWORD*)(*(DWORD*)((DWORD)GetModuleHandle(\"ac_client.exe\") + 0x374) + 0x14);\n\n",
      "votes": "4",
      "user": "anx199",
      "time": "Dec 29, 2018 at 23:21",
      "is_accepted": false,
      "comments": []
    }
  ]
}