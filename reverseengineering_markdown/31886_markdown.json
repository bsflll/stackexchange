{
  "title": "Use 3rd-party DLL in my own application",
  "link": "https://reverseengineering.stackexchange.com/questions/31886/use-3rd-party-dll-in-my-own-application",
  "content": "Sorry if this is a bit long; I figured it might be helpful to provide some information on why I'm trying to do what I'm doing. If not, just skip to the \"My Problem\" section.\n\nI'm writing some software to automate water billing at some apartment buildings. The water meters communicate using a proprietary protocol to a receiver, which sends the data to the computer via RS232 or serial-over-Bluetooth. The data are then displayed in a .NET 4 application provided by the hardware manufacturer, where they can be exported to CSV. I have all of the hardware, and using their own software, everything works as they intended (requiring manual export to CSV). I want to write my own application that can get the meter ID, current meter reading, and a few other things, to automate this process -- basically, I can just drive by the buildings with an Internet-connected laptop, and the system will grab all the meter data and can instantly generate bills for the correct customers.\n\nThere was a 3rd-party private company doing this billing in the area, but they've since been bought by another company, and that new company refuses to add new accounts (even if the new customer is in the same building as an existing customer that they're already reading!) and has expressed interest in leaving the area entirely. There are also other issues, but they're beside the point.\n\nI figure the two most likely ways to make this happen are:\n\nI've already made progress on Option 1, and identified the important parts of the \"normal\" broadcasted packet, but I'd like to keep that as a \"Plan B,\" since it appears there is a library that can do all of this already, and they've already accounted for all the different kinds of packets that can be sent and received, and how to separate which data bytes are for which unit, especially when 25 units are broadcasting simultaneously with possibly different packet types with different structures and lengths.\n\nBased on the objects contained in d3g_tech_managed.dll, it appears they have a nicely-packaged library that handles everything from opening the serial port, to receiving and decoding the broadcasted beacons, to raising events to which the main application subscribes and receives the already-decoded data.\n\n\n\n\n\nThere's even a very helpful-sounding function in the library called \"ExtractValue\", which is called by the main program's equally-helpful-sounding \"FillMeterReadData\" function.\n\n\n\nI can add the DLL to a new C#.NET application in VS2022, and all of the objects, functions, etc. appear to be present.\n\n\n\nThis is my first time trying to do any kind of reverse-engineering or using a 3rd-party DLL in my own program, so sorry if this is an obvious problem.\n\nInitially, when I tried running the program, I got a:\n\n```\nSystem.BadImageFormatException: 'Could not load file or assembly 'd3g_tech_managed, Version=1.0.6422.19726, Culture=neutral, PublicKeyToken=null' or one of its dependencies. An attempt was made to load a program with an incorrect format.'\n\n```\nexception. Search results suggest that error is because I ran the application as 64-bit, but the DLL is 32-bit, which is true. Switched the application to x86, but then I get a FileNotFoundException:\n\n```\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'd3g_tech_managed.dll' or one of its dependencies. The specified module could not be found.'\n\n```\nHow can it not find the file at all in 32-bit mode, when in 64-bit mode it had to have found the file for it to know it was the wrong format?\n\nThe DLL file is in the application folder (source code and compiled bin folders).\n\n\nI found other suggestions about installing it into the GAC (Global Assembly Cache), but the command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.5.1 Tools\\gacutil.exe\" -i d3g_tech_managed.dll\n\n```\nresults in an error:\n\n```\nFailure adding assembly to the cache: Attempt to install an assembly without a strong name\n\n```\nThe suggestions for that error seem to involve recompiling the DLL from source code, which I don't have. And, besides, since an existing .NET 4 application is able the use that DLL, it should be possible for me to write one that uses it in the same way, right?\n\nSome other possibly-useful information from dnSpy: clicking on the root for d3g_tech_managed (1.0.6422.19726) shows:\n\n```\n// C:\\Program Files (x86)\\Arad Technologies\\3GTechnicianNET\\d3g_tech_managed.dll\n// d3g_tech_managed, Version=1.0.6422.19726, Culture=neutral, PublicKeyToken=null\n\n// Native Entry point: 0x000098AD\n// Timestamp: 5980427D (2017-08-01 04:57:33)\n\nusing System;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Runtime.Versioning;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: AssemblyVersion(\"1.0.6422.19726\")]\n[assembly: SecurityRules(SecurityRuleSet.Level1)]\n[assembly: TargetFramework(\".NETFramework,Version=v4.0\", FrameworkDisplayName = \".NET Framework 4\")]\n[assembly: AssemblyProduct(\"d3g_tech_managed\")]\n[assembly: CLSCompliant(true)]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCopyright(\"Copyright (c) Arad Technologies Ltd. 2007\")]\n[assembly: AssemblyTitle(\"d3g_tech_managed\")]\n[assembly: AssemblyCompany(\"Arad Technologies Ltd.\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: ComVisible(false)]\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n\n```\nAnd clicking on the item below that (d3g_tech_managed.dll) shows:\n\n```\n// C:\\Program Files (x86)\\Arad Technologies\\3GTechnicianNET\\d3g_tech_managed.dll\n// d3g_tech_managed.dll\n\n// Global type: <Module>\n// Native Entry point: 0x000098AD\n// Architecture: x86\n// This assembly contains unmanaged code.\n// Runtime: .NET Framework 4\n// Timestamp: 5980427D (2017-08-01 04:57:33)\n\nusing System;\n\n```\nI can't seem to find a solution for the above errors that would work when I don't have the source code to recompile the DLL.\n\nAny ideas?\n\nThanks!\n\nRE: the This assembly contains unmanaged code line; did they name a DLL \"...managed...\" even though it isn't?\n\nThe software that I'm writing is for internal use only, and will not be used by or distributed to anyone else (so there shouldn't be any issue with unlicensed distribution of copyrighted code).\n\nMeter Brochure:\nwww mastermeter com/wp-content/uploads/Interpreter-II-Register_v0710.20F.pdf\n\nReader Brochure:\nwww mastermeter com/wp-content/uploads/Dialog_3G_DMMR_Transceiver_v0514.20.pdf\n\n",
  "votes": "2",
  "answers": 1,
  "views": "523",
  "tags": [
    "dll",
    ".net",
    "c#",
    "error"
  ],
  "user": "Chris",
  "time": "May 20, 2023 at 13:22",
  "comments": [
    {
      "user": "ynwarcs",
      "text": "A stupid question perhaps, but did you copy the DLL to the x86 output folder after changing the compilation target? Your screenshot shows the output folder of the AnyCPU target, the x86 executable should be located in \"bin\\x86\\Debug\\\".",
      "time": null
    },
    {
      "user": "Chris",
      "text": "@ynwarcs Thanks for the question; I have updated the screenshot to show the x86 path. Originally, the path in the first screenshot was the only one in bin; it seems like both, x86 and x64, output to the same folder. I added a specific x86 build configuration, which outputted to its own bin\\x86\\debug folder, but still the same problem. The reference also has \"Copy Local\" set to True, so it was automatically copied to the output folder.",
      "time": null
    },
    {
      "user": "Chris",
      "text": "I.....think I just found the problem. I re-read the error message: Could not load file or assembly 'd3g_tech_managed.dll' **or one of its dependencies** and it listed the file name d3g_tech_managed.dll, which I figured meant it couldn't find that file. Ends up d3g_tech_managed.dll in turn depends on base.dll (whose name alone should have made me think), which I didn't copy. Once I did, my test program runs and correctly reports the library version on the form. So... ummm.... oops, completely my bad. But thanks @ynwarcs, your comment made me recheck the obvious!",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I guess I'll copy my comment as an answer, just to close out the question:\n\nI re-read the error message: Could not load file or assembly 'd3g_tech_managed.dll' **or one of its dependencies** and it listed the file name d3g_tech_managed.dll, which I figured meant it couldn't find that file. Ends up d3g_tech_managed.dll in turn depends on base.dll (whose name alone should have made me think), which I didn't copy. Once I did, my test program runs and correctly reports the library version on the form. So, completely my bad.\n\nThanks @ynwarcs, your comment made me recheck the obvious!\n\n",
      "votes": "1",
      "user": "Chris",
      "time": "May 20, 2023 at 17:56",
      "is_accepted": true,
      "comments": []
    }
  ]
}