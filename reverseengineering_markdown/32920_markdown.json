{
  "title": "Ida Pro: Get original type of typedef from local types with the IDA C++ API",
  "link": "https://reverseengineering.stackexchange.com/questions/32920/ida-pro-get-original-type-of-typedef-from-local-types-with-the-ida-c-api",
  "content": "I've been poking around with the IDA C++ SDK and I'm writing something to dump all local types into a json file. I have it all working but typedefs. Example typedef int BOOL\nI'm trying to get the original type of the typedef all methods I have tried so far only give me BOOL for the typedef name and the original type. I've tried the get_final_type_name function, get_realtype(true) which caused crashes and some others which gave the same result as get_final_type_name. Is there an easy way to do this?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "64",
  "tags": [
    "c++",
    "idapro-sdk"
  ],
  "user": "Duckos Mods",
  "time": "Apr 26, 2024 at 21:07",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "In Python, at least, you'll need to use get_numbered_type or get_named_type. That'll get you the fields that you can use with tinfo_t.deserialize. If you already have the \"typeref\" that you want as a tinfo_t, you'll need to distinguish whether it's a named-type or ordinal-type and then use get_type_name or get_ordinal (respectively). With that, you can then get_numbered_type or get_named_type. It's also probably worth noting that you can use replace_ordinal_typerefs to replace ordinals in your type with a named type (prolly affecting lookup performance).",
      "time": null
    }
  ],
  "answers_data": []
}