{
  "title": "Call function in remote (OpenOCD) target from gdb",
  "link": "https://reverseengineering.stackexchange.com/questions/11876/call-function-in-remote-openocd-target-from-gdb",
  "content": "Is there any way to call a function on a remote target that's attached via JTAG? Currently I have OpenOCD hooked up to a target and I'm attached with gdb, and I know the address of the function I want to call as well as its signature.\n\nWith a normal binary and gdb, the following (somewhat surprisingly) works. Supposing I have a function like:\n\n```\nstatic int f(int x) {\n    printf(\"The value of x is %d  \n\", x);\n    return x*2;\n}\n\n```\nI can run that function, even in a stripped binary, under gdb, as long as I know its address:\n\n```\ncosimo:~ moyix$ gdb -q --args ./hello \nReading symbols from ./hello...(no debugging symbols found)...done.\n(gdb) break *0x100000ee0\nBreakpoint 1 at 0x100000ee0\n(gdb) r\nStarting program: /Users/moyix/hello \n\nBreakpoint 1, 0x0000000100000ee0 in _mh_execute_header ()\n(gdb) call (0x100000f20)(10)\nThe value of x is 10\n$1 = 20\n\n```\nBut trying to do something similar with gdb hooked up to OpenOCD gives me:\n\n```\nmoyix@dev:~/git/openocd-code$ arm-none-eabi-gdb -q\n(gdb) target remote localhost:3333\nRemote debugging using localhost:3333\n0x8006b06c in ?? ()\n(gdb) call (0xC0066E08)(0x10000, 4, 0, 0, 0)\nEntry point address is not known.\n(gdb) \n\n```\nI gather from a bit of googling that it's because gdb wants somewhere to place its dummy stack frame, and since it has no symbol information or even an entry point for the binary it doesn't know where to put it. Is there any way to manually give it a location for its dummy frame (with the hope that it'll put things back the way they were once the function executes...)?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "896",
  "tags": [
    "gdb",
    "jtag"
  ],
  "user": "Brendan Dolan-Gavitt",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "This isn't the cleanest solution, and I still don't know how to make gdb do it properly. My solution was to simply manually \"call\" the function by:\n\nThis isn't perfect, since it requires a lot of manual effort at the beginning and end, but works well enough for occasional use.\n\n",
      "votes": "1",
      "user": "Brendan Dolan-Gavitt",
      "time": "Jan 31, 2016 at 18:16",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I have come across this question for the same issue on a different use case: debugging an ELF binary through qemu-arm, trying to call code from the attached process.\n\nI could give gdb the information it missed, designating the target binary file as a symbol file (using the symbol-file command).\n\nhttps://sourceware.org/gdb/onlinedocs/gdb/Files.html\n\nOf course, it might be more complicated in your case. Linking a binary file using the live in-device addresses might do the trick, although it may not be trivial.\n\n",
      "votes": "0",
      "user": "Fhtagn",
      "time": "Jul 15, 2016 at 16:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}