{
  "title": "Tracing all (or most of) function calls in a specific Android app",
  "link": "https://reverseengineering.stackexchange.com/questions/26656/tracing-all-or-most-of-function-calls-in-a-specific-android-app",
  "content": "I'm having a problem, where I'm trying to trace some function calls in an Android app, that uses JNI for about all of its work. More specifically, a function call, in JNI, that makes (IIRC Android itself \"calls\" it, not the app, the app just makes it) a specific Toast. And try to hook on that function that makes it, for example with Frida's Interceptor.\n\nThe problem is, that I haven't found a way to trace all function calls. I used some tips, like using frida-trace and tracing \"Java_*\" (where * is a wildcard) calls. But as this app probably has non-standard JNI calls (IIRC dynamically loading JNI libraries, where function names can have any name).\n\nThen I used a tool called jnitrace, which I found available open source on GitHub. This tool didn't report any functions at all. Until I opened a WebView in the app. Then it started printing out lots and lots of data referencing to the Chromium library, even after I stopped using the WebView.\n\nI found out about Frida's Stalker, but using some scripts that say \"to print all function calls\" just crash the app. Any app, so I think it's not the problem of the specific app I'm reverse engineering.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "2k",
  "tags": [
    "c++",
    "android",
    "java",
    "frida"
  ],
  "user": "Timotej Leginus",
  "time": "Dec 29, 2020 at 15:19",
  "comments": [
    {
      "user": "skep",
      "text": "I have a similar problem, wondering if you found a solution for this.",
      "time": null
    }
  ],
  "answers_data": []
}