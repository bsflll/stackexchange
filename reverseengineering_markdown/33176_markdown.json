{
  "title": "Help with FISTP and FILD interpretation",
  "link": "https://reverseengineering.stackexchange.com/questions/33176/help-with-fistp-and-fild-interpretation",
  "content": "I need some help with understanding what is being actualy done in those two assembly lines:\n\nfistp   qword ptr [esp+10h]\nss:0023:0013be80=0000000000001cf8\n\nfild    qword ptr [esp+10h]\nss:0023:0013be80=0000000000002c36\n\nWhat is the underlying operetion that changes 1cf8 to 2c36\n\nThanks in adv\n\n",
  "votes": "0",
  "answers": 1,
  "views": "62",
  "tags": [
    "disassembly",
    "assembly"
  ],
  "user": "Uddie",
  "time": "Aug 22, 2024 at 22:12",
  "comments": [
    {
      "user": "Ali Rizvi-Santiago",
      "text": "Intel's floating point instructions are based on a stack. fist stores a 16-32-64-bit floating point number (IEEE) to the operand address, whereas fild loads from an address into the stack. The p suffix, is the variation of fist that pops the first value, ST(0), from said stack. The values you're seeing are not the underlying operand changing the address, but rather that before fistp is run, the value is 0x1cf8. After executing fistp, however, ST(0) is popped and written to [esp+0x10] as 0x2c36. When execution gets to fild, the previous value of ST(0) was already written.",
      "time": null
    },
    {
      "user": "Ali Rizvi-Santiago",
      "text": "...that is assuming that there's no other instructions tampering with [esp+0x10] in between the two instructions you listed. (Related question: reverseengineering.stackexchange.com/questions/20559/…, link for answer is archived at web.archive.org/web/20071006182549/http://www.ray.masmcode.com/…)",
      "time": null
    },
    {
      "user": "Uddie",
      "text": "First of all, sorry for late reply. Yes, you are right, it all seems clear for me now. Thank you for explanation.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "download software developer manual volume 2 for intel \n\nvolume 2 is instruction set reference\n\nor as a second choice use online references\n\nsearch fistp or any other instruction and read for better understanding\n\n\n\nbasically FISTP takes what is in st[0]  converts it to a signed integer and stores it in destination and pops the st[0] (empties st[0])\n\nsuppose st[0] contains a valid float like 486.87 (using 32 bit ollydbg here)\n\n\nand your instruction pointer contains  fistp qword ptr [esp+10]\n\n\non executing this instruction\nesp+10 will hold 487  (486.87 rounded to 487 and positive signed)\nprior to execution\n\n\npost execution\n\n\nan the stack has been popped\n\n\n\nhope you will be able to follow this for FILD\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Aug 23, 2024 at 19:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "Uddie",
          "text": "So sorry for late reply. I've got the procedure. I can manage on my own now. Thanks a lot!",
          "time": null
        }
      ]
    }
  ]
}