{
  "title": "How to get pointer from byte code",
  "link": "https://reverseengineering.stackexchange.com/questions/14604/how-to-get-pointer-from-byte-code",
  "content": "I have been doing pointer scans on a game when new versions come out as the structure changes to update memory structure offsets. I decided to attempt to use signature scanning to attempt to make my offsets more durable to changes.\n\nWhen pointer scanning in the current game version 0x1034EF8 is the offset I am trying to get. I attached a debugger and funtions that read from this address and came up with a pattern that is unique. When I do the pattern scan this pattern is found and returned as expected. \n\nWhere I am stuck at is turning this assembly instruction memory address 461EE300 into this offset 0x1034EF8. Cheat engine is able to do such a thing so it must be possible, the following was copy and pasted from cheat engine and it is showing me game_x64.exe + 1034EF8 for the 461EE300 address.\n\nHow can I go about turning 461EE300 into game_x64.exe + 1034EF8 and extracting 1034EF8?\n\n```\n//90 - nop\n//48 83 43 50 F8 - add qword ptr[rbx + 50],-08\n//48 8B 0D 461EE300 - mov rcx,[game_x64.exe + 1034EF8]\n//4C 8B 05 471EE300 - mov r8,[game_x64.exe + 1034F00]\n//49 3B C8 - cmp rcx, r8\npublic static readonly Pattern MyPattern = new Pattern(new byte[]\n{\n0x90,\n0x48, 0x83, 0x43, 0x50, 0xF8,\n0x48, 0x8B, 0x0D, 0x00, 0x00, 0x00, 0x00,\n0x4C, 0x8B, 0x05, 0x00, 0x00, 0x00, 0x00,\n0x49, 0x3B, 0xC8\n}, \"xxxxxxxxx????xxx????xxx\");\n\n```\n",
  "votes": "1",
  "answers": 3,
  "views": "1k",
  "tags": [
    "disassembly",
    "assembly",
    "pointer"
  ],
  "user": "Greg Gacura",
  "time": "Feb 9, 2017 at 5:18",
  "comments": [
    {
      "user": "Nordwald",
      "text": "Please note [game_x64.exe + 1034F00] reffers to module base of the executable + 0x1034F00. Basically you can subtract this base from anything to get a relative offset.",
      "time": null
    },
    {
      "user": "Greg Gacura",
      "text": "Thank you so is 461EE300 equal to the base of the executible + 0x1034F00? I'm a little lost with this, although learning quickly :-)",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "lets have a look how Cheat Engine calculates its offsets:\n\n4C 8B 05 471EE300 translates to mov r8,QWORD PTR [rip+0xe31e47]\n\nAs you can see, the value depends on rip (the instruction pointer). You can see the actual bytes of the offset in the instructions bytes. Since Cheat Engine knows where this instruction actually is in memory, they use the image base as the relative offset instead.\n\nSo they might convert it in a way like this:\n\n```\n(instruction_address - image_base + offset) + image_base = instruction_address + offset\n\n```\nYes\n\n",
      "votes": "2",
      "user": "Nordwald",
      "time": "Feb 9, 2017 at 14:11",
      "is_accepted": false,
      "comments": [
        {
          "user": "Greg Gacura",
          "text": "That looks to be exactly what I was trying to figure out, I will check this tonight and mark it as answer if ends up working which it looks like it will... or if not I'm probably screwing something else up lol. Thank you very much!",
          "time": null
        }
      ]
    },
    {
      "content": "It's way simpler than you'd think.\n461EE300 is the relative offset to your variable. The relative offset needs to be added to the rip-register. And you already have the value of the rip-register. It's the address of the pattern you found.\n\nSo simply add the address of your pattern with 461EE300 and you have your variable.\n\n",
      "votes": "1",
      "user": "moccajoghurt",
      "time": "Mar 25, 2019 at 19:14",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "After some more digging and using a few new ideas from Nodwald, thank you here is the solution.\n\n```\n//Match the pattern finding its location relative to the module start address\nvar matches = MemoryTool.FindPatterns(MemoryTool.GetProcessId(), MemoryTool.Pattern);\nProcess proc = Process.GetProcessesByName(\"ProcessName\")[0];\nIntPtr startOffset = proc.MainModule.BaseAddress;\nvar processStart = startOffset.ToInt64(); ;\n//use the match plus the offset to the memory location to read the address I was trying to translate\nvar memoryValueOffset = matches[0] + 9;\n//Read the value of the memory address\nvar memoryValue = _poeInterface.Memory.ReadInt(processStart + memoryValueOffset);\n//Find the offset memory address of the next assembly function\nvar nextInstructionOffset = matches[0] + 13;\n//find the full address value of that address in memory\nvar nextAddressFull = nextInstructionOffset + processStart;\n//add the next address full value to the relative offset address value from earlier\nvar nextAddressPlusOffset = nextAddressFull + memoryValue;\n//Win... this is our offset in memory\nvar fullMemoryOffset = nextAddressPlusOffset;\n//This is the origional offset we were looking for - 0x1034EF8\nvar relativeOffset = fullMemoryOffset - processStart;\n\n```\n",
      "votes": "0",
      "user": "Greg Gacura",
      "time": "Feb 10, 2017 at 17:22",
      "is_accepted": true,
      "comments": []
    }
  ]
}