{
  "title": "How to compare two different executions of the same file?",
  "link": "https://reverseengineering.stackexchange.com/questions/22869/how-to-compare-two-different-executions-of-the-same-file",
  "content": "When i start the program by just double clicking the .exe, it has a certain behavior. This behavior differs when i start the program from running the launcher provided. I’d like to figure out how to get the same behavior from the program without using the launcher. I tried to trace in x64dbg but I just got nonsense where it was the same instruction over and over again. \n\nThanks.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "947",
  "tags": [
    "windows",
    "x64dbg",
    "tracing"
  ],
  "user": "whoami",
  "time": "Dec 29, 2019 at 19:41",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "I would first start with some high level overview of the executions using tools like Process Monitor to see if the traces are different and at what point.",
      "time": null
    },
    {
      "user": "MkInitCpIO",
      "text": "Consider using a tool like intel PIN",
      "time": null
    },
    {
      "user": "whoami",
      "text": "I did use process explorer. I mostly figured out how to use trace in x64dbg. Is there any way I can record information such as which jumps I took during a particular execution?",
      "time": null
    },
    {
      "user": "whoami",
      "text": "I’ll try intel pin. That seems promising.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It might be useful to check the command line that was used to start the program.\nOpen the Details tab of Task Manager and right click on any column (Name/PID/status). Then choose \"Select columns\" and in the new window scroll down and check the \"Command line\" box (below the I/O ones).\n\n",
      "votes": "1",
      "user": "Khiu",
      "time": "Dec 30, 2019 at 13:29",
      "is_accepted": false,
      "comments": [
        {
          "user": "Tobias",
          "text": "While this doesn't answer the question in the headline, it does solve the problem as it is stated in a much more efficient way than tracing the flow :)",
          "time": null
        },
        {
          "user": "whoami",
          "text": "There is no difference in the command line. The program detects whether the launcher is running and behaves differently if it is.",
          "time": null
        }
      ]
    },
    {
      "content": "Your program may be using certain tricks like using the exception handler vector in order to misguide the execution of your program when launched by a debugger.\n\nBe sure to use a non invasive debugger which also does not register itself as a debugger. I think that natively x64dbg requires a plugin for this job, but usually I resort to ollydbg.\n\nWhen you manage to defeat the debugging protection, you should be able to trace both the executions. \n\nBonus: it happened a few times that the victim program walked the process chain (the one you see in sysinternals process explorer) in order to guess who was calling whom, the other processes in execution and their PE attributes.\n\n",
      "votes": "0",
      "user": "Yennefer",
      "time": "Jan 5, 2020 at 22:44",
      "is_accepted": false,
      "comments": []
    }
  ]
}