{
  "title": "Analysing an executable with a 24bit segmented address space",
  "link": "https://reverseengineering.stackexchange.com/questions/33327/analysing-an-executable-with-a-24bit-segmented-address-space",
  "content": "I have an executable of a legacy embedded system that I want to analyze.\nThe system uses an 80186 assembler. The architecture of the system is similar to 16bit DOS but instead of a 20bit address space this device uses a 24bit address space where the segment is shifted by 8 bits rather than by 4.\n\nI tried opening the executable in ghidra but I get an error:\n\nHow can I analyze such an executable?\nPerhaps there is a way to configure ghidra to preform address mapping differently?\nIs there another reverse engineering tool that will allow me to configure address space segmentation differently?\nMaybe there is some pre-processing that I can do to make this executable load in one of the already available architectures?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "50",
  "tags": [
    "ghidra",
    "segmentation",
    "dos-exe"
  ],
  "user": "Arik Yavilevich",
  "time": "Dec 3, 2024 at 18:32",
  "comments": [
    {
      "user": "perror",
      "text": "Are you sure that Ghidra support the extended memory mode (24bits address-space) ? The error message seems to complains about an overflow on the address-space value, so it might be the problem. So, the segmentation process might be in the line. You may have a more accurate answer by submitting an issue report directly on Ghidra's Github page.",
      "time": null
    }
  ],
  "answers_data": []
}