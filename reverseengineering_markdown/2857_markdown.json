{
  "title": "Why is JMP used with CALL?",
  "link": "https://reverseengineering.stackexchange.com/questions/2857/why-is-jmp-used-with-call",
  "content": "I am trying to analyze an old malware sample in OllyDbg. It has instruction of the format CALL <JMP.&KERNEL32.SetUnhandledExceptionFilter>\n\nI am not an expert in Assembly. I know that CALL is used to call a sub-routine and JMP is used to jump to a particular address in the memory but what is the result of using CALL with JMP? Could anyone clarify on it? Even pointers to where I could find answers would be very helpful. Thanks.\n\n",
  "votes": "12",
  "answers": 3,
  "views": "2k",
  "tags": [
    "disassembly",
    "malware",
    "assembly"
  ],
  "user": "TheRookierLearner",
  "time": "Sep 29, 2013 at 15:53",
  "comments": [],
  "answers_data": [
    {
      "content": "Seeing a call in the form CALL <JMP.&KERNEL32.SetUnhandledExceptionFilter> suggests that the binary was compiled with Visual C++'s /INCREMENTAL option, hence the table of jump thunks.\n\n",
      "votes": "13",
      "user": "Jason Geffner",
      "time": "Sep 29, 2013 at 17:12",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "you're right, it could be called directly instead of being jumped after a call.\n\nHowever, it makes it easier if the address of the API is referenced only once, and this single reference should be a JMP (otherwise, it would alter the stack).\n\nSo, there is only one memory reference to the API, via a single JMP. Each time the API is used, this JMP is CALL-ed, so execution is transferred transparently, and at the end of the API, the original address of the caller being still on the stack, the caller will be transparently returned to.\n\n",
      "votes": "5",
      "user": "Ange",
      "time": "Sep 29, 2013 at 16:42",
      "is_accepted": false,
      "comments": [
        {
          "user": "TheRookierLearner",
          "text": "Is this what constitues the Jump table?",
          "time": null
        }
      ]
    },
    {
      "content": "The reason is for loading performance - the jumps are gathered into a single region that is made temporarily writable for the purpose of placing the API addresses, and is usually only a single page in size.  This avoids multiple calls to VirtualProtect() by the loader, in order to write all over the code space to every reference to any given API.\n\n",
      "votes": "5",
      "user": "peter ferrie",
      "time": "Sep 30, 2013 at 2:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}