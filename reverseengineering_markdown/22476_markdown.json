{
  "title": "Why doesn't alloca_probe follow x64 calling convention?",
  "link": "https://reverseengineering.stackexchange.com/questions/22476/why-doesnt-alloca-probe-follow-x64-calling-convention",
  "content": "I was practising reverse engineering on some Windows x64 applications when I came across this function:\n\n```\ncall alloca_probe\n\n```\nThis alloca_probe function has some strange implementation:\n\nAs I can recall, the x64 calling convention by Microsoft indicates:\n\nalloca_probe function clearly doesn't follow this convention...  \n\nMy question is:\n\nWhy doesn't this function follow the convention, and how does the compiler know how to use these type of functions (e.g using EAX as first argument)?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "455",
  "tags": [
    "ida",
    "assembly",
    "calling-conventions"
  ],
  "user": "YAYAdest",
  "time": "Nov 7, 2019 at 3:51",
  "comments": [],
  "answers_data": [
    {
      "content": "This is not a standard function but a compiler helper, used by the compiler to perform some necessary housekeeping (allocate extra stack space) so it doesn’t have to follow the ABI for “normal” functions. \n\nBecause it is called in the prolog of the parent function while the user code has not started executing yet, special care needs to be taken. \n\nEAX use likely comes from the x86 version which has similar constraints and could not use stack arguments. In theory any register could have been used but    mov eax, imm has a short encoding which saves space in the prolog. \nThe normally volatile registers need to be saved because they need to be preserved by the function’s prolog we’re executing and if they get trashed there may be all kinds of wrong results. \n\n",
      "votes": "1",
      "user": "Igor Skochinsky",
      "time": "Nov 7, 2019 at 7:55",
      "is_accepted": true,
      "comments": [
        {
          "user": "YAYAdest",
          "text": "Thanks! Is this compiler helper actually an intrinsic function? If so, aren't those functions suppose to be inlined?",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "Intrinsics are pseudo functions which map to processor instructions. This one is different as it’s inserted by the compiler and not by programmer.",
          "time": null
        }
      ]
    }
  ]
}