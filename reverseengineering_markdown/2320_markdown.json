{
  "title": "How do you optimise AST's or convert them to a real language",
  "link": "https://reverseengineering.stackexchange.com/questions/2320/how-do-you-optimise-asts-or-convert-them-to-a-real-language",
  "content": "I have been interested in automatic vulnerability assessment and decompilation of code for a while now. And as a result I have been building parsers in Python that reads a bin, disassembles it instruction by instruction while tracing the execution (the way IDA does it).\n\nI have been tracing the polluted registers (polluted as in user input) to check when such registers allow us to setup a call or a jump. \n\nThis research has grown to the point, where I want to transform it to a decompiler. I had a look at boomerang and other open source decompilers. I have also had a quick peek inside the dragon book (I don't own it). I would like to hear what you guys think about this idea. Below is my outline:\n\nI am having issues with the last 2 steps. How does someone parse AST to a real language or something that looks like it? How do you optimize ASTs? Are there build C or Python libraries to accomplish it?\n\n",
  "votes": "9",
  "answers": 1,
  "views": "1k",
  "tags": [
    "decompilation",
    "decompiler",
    "ast"
  ],
  "user": "Stolas",
  "time": "Jun 26, 2013 at 6:16",
  "comments": [
    {
      "user": "QAZ",
      "text": "You may be interested in reading the Python source code for the recently released ida-decompiler: github.com/EiNSTeiN-/ida-decompiler",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "",
      "votes": "10",
      "user": "Ray",
      "time": "2 days ago",
      "is_accepted": true,
      "comments": []
    }
  ]
}