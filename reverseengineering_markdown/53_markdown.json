{
  "title": "Obfuscating JavaScript with zero-width characters - pros and cons?",
  "link": "https://reverseengineering.stackexchange.com/questions/53/obfuscating-javascript-with-zero-width-characters-pros-and-cons",
  "content": "This comes from comments on a question on StackOverflow about JavaScript Variables: Why aren't ◎ܫ◎ and ☺ valid JavaScript variable names?\n\nJavaScript accepts zero-width characters as valid variable names, for example all three of these variables have different names but are visually identical:\n\n```\nvar ab, /* ab */\n    a‍b, /* a&zwj;b */\n    a‌b; /* a&zwnj;b */\n\n```\nHere's a JSFiddle example of the above three variables in use.\n\nWhat are the pros and cons of doing this as an obfuscation technique for JavaScript (and other supporting languages)?\n\n",
  "votes": "17",
  "answers": 4,
  "views": "2k",
  "tags": [
    "obfuscation",
    "javascript"
  ],
  "user": "James Donnelly",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "Well, in your own programs, it's probably fine.  But in a corporate setting its a maintenence nightmare without extremely good documentation and/or team continuity.  Neither of which seems all that common in my experience.  \n\nI think a more general question might be, \"are obfuscation techniques really all that useful?\"  I can understand minify for page loading purposes.  But hiding source doesn't seem to make sense.  You are either thinking you have some clever, never done before, algorithm.  If that's the case, maybe JS isn't the langauge for it since there's really no way to completely hide it.  Or you are trying to be trixsy and attempt some security through obscurity, generally a Bad Idea.\n\n",
      "votes": "15",
      "user": "WPrecht",
      "time": "Mar 20, 2013 at 12:19",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "A big con is posed in the following Questions:\n\nA simple normal Obfuscator should yield acceptibly obtuse code without breaking some JavaScript-Interpreters.\n\nIf one really wants to work with zero-width characters in variable names, it would be included in the Code-Obfuscation process (The resulting js-File should only be loaded after a Browser-Version-Check.). This way the developer does not have to deal with zero-width characters in the original source code.\n\n",
      "votes": "9",
      "user": "Michael Anderson",
      "time": "Mar 20, 2013 at 14:25",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Deobfuscating variable names with zero-width characters is as easy as renaming variables. That's something you'd do anyway as part of the deobfuscation process, as you infer the intent behind the variables and give them meaningful names. So this technique might at most prompt the reader to make an initial renaming pass. The additional deobfuscation cost is negligible. It's not worth it, there's no advantage to a, b, c, …\n\n",
      "votes": "8",
      "user": "Gilles 'SO- stop being evil'",
      "time": "Mar 20, 2013 at 19:10",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "This also breaks some beautifers (but not all). For example, running your code through JS Beautifier:\n\n```\n   var ab = \"Hello, world!\",\n       a‍ b = \"Completely different string!\",\n       a‌ b = \"Yet another completely different string!\";\n\ndocument.getElementById('result1').innerHTML = ab;\ndocument.getElementById('result2').innerHTML = a‍ b;\ndocument.getElementById('result3').innerHTML = a‌ b;\n\n```\n(Note the spaces in between \"a\" and \"b\".)\n\nYou could argue that this is a pro and a con. Depending on exactly how confusing you make the code, it may be even more confusing to see random spaces being injected. On the other hand, it also alerts the reader that something is definitely up.\n\n",
      "votes": "6",
      "user": "George V. Williams",
      "time": "Mar 20, 2013 at 21:36",
      "is_accepted": false,
      "comments": []
    }
  ]
}