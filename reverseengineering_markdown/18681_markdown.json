{
  "title": "Which ARM command is influencing the SP position?",
  "link": "https://reverseengineering.stackexchange.com/questions/18681/which-arm-command-is-influencing-the-sp-position",
  "content": "I do static analysis of ARM assembly code (I can't debug it).\n\nWhen I look on argument that in SP+0x<SomeOffset> I can find what I'm looking for, but if I look a few lines further down I see that this argument is not there.\n\nWhich ARM, command is influencing the stack pointer (SP) position?\n\nI don't see any add/sub to SP, the only commands that I see is ldr and str from SP and to SP +function BL that not touch on this argument.\n\nI think that even I call to function, when I finish it the SP need to be same,  and store to SP+offset or load from SP+offset don't need to change the SP.\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "721",
  "tags": [
    "arm",
    "stack",
    "pointer",
    "offset"
  ],
  "user": "pointers",
  "time": "Jul 4, 2018 at 13:50",
  "comments": [],
  "answers_data": [
    {
      "content": "There is no specific stack pointer register in ARM. By convention R13 is used as the stack pointer. There is no specific push and pop style stack pointer operands either. \n\nPushing and popping from the stack is carried out using the STM (store to memory) and LDM (load from memory) operands. These operands can be modified with the post fixes IA and DB. IA is increment after, and DB is decrement before.\n\nSo STMDB means store to memory, decrementing before the store. I.e. pushing on to a full descending stack. The inverse of this would be LDMIA which is popping from a full descending stack.\n\nAlternatively you can have STMIA and LDMDB which means pushing and popping on to and off of an empty ascending stack.\n\nFD is the synonym for full descending and EA is the synonym for empty ascending. So STMDB and STMFD are the same. LDMIA, LDMFD are the same. And so on...\n\nSo a full instruction would be for example...\n\n```\nSTMDB R13!, {R0 - R3}\n\n```\nWhich means push R0, then R1, then R2 and then R3 on to a full descending stack using R13 as the stack point. The address being written too is updated for each registered pushed. The ! means write back and means that R13 is updated with the final address so it can be used again.\n\nBL (branch with link) does NOT affect the stack or the stack pointer. It merely copies the current PC (R15) in to link (R14) before the jump. A simple...\n\n```\nMOV R14, R15\n\n```\n... will return you back to the original address. However many may pop link straight in to PC at the end of a subroutine. For example...\n\n```\n.my_sub_routine\nSTMFD R13!, {R0, R1, R14}\n// Do stuff\nLDMFD R13!, {R0, R1, R15} // pop link straight in to PC meaning return.\n\n```\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Jul 4, 2018 at 13:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "in fact the newer ARM architectures do standardize R13 as SP, and STMFD/ LDMFD  instructions using it as PUSH/POP.",
          "time": null
        },
        {
          "user": "cooperised",
          "text": "Moreover on most of the Cortex series cores, R13 (or SP) is an alias for one of two hardware-managed stack pointers, MSP or PSP, depending on mode and settings.  Things like interrupt requests cause automatic pushes to the active stack too.  R13 is very much a stack pointer on modern(ish) ARM architectures, and not just by convention.",
          "time": null
        }
      ]
    }
  ]
}