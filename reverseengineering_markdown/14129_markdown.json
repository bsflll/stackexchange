{
  "title": "Bindiff matching algorithm",
  "link": "https://reverseengineering.stackexchange.com/questions/14129/bindiff-matching-algorithm",
  "content": "I've started using bindiff recently and struggle to understand matching algorithm.\nI've read several articles like:\n\nT. Dullien and R. Rolles. Graph-based comparison of executable objects, \nBinSlayer, Accurate Comparison of Binary Executables,\nand also bindiff manual https://www.zynamics.com/bindiff/manual/#chapUnderstanding\nquestion about bindiff\n\nAnd all articles differs on explaining matching algorithm. \n\nThe thing that I can't understand is difference between functions signatures and functions attributes. \n\nFrom manual:\n\nThe signature consists of:\n\nOnce the two sets of signatures (for the two executables) have been generated, initial matches are created. A match is created if a signature occurs once (and only once) in both examined subsets of signatures.\n\nSo the signature of functions are used to construct initial match.\nBut after that article tells us about function attributes.\n\nAttributes:\n\nBinDiff has a list of function attributes (hash matching, name matching, etc.) suitable for generating matches. It starts on a global level, considering all functions of the binary and calculates the first attribute for every function. After the initial global matching step the parents (callers) and children (callees) of each new match are considered\n\nSo how the signatures differs from attributes? Both of them are used to construct initial matches. What strategy is first applied to construct initial match: signature matching or functions byte hash matching? \n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "tools",
    "tool-bindiff"
  ],
  "user": "Vahag Vardanyan",
  "time": "Apr 13, 2017 at 12:49",
  "comments": [],
  "answers_data": [
    {
      "content": "I think you are confusing at least 3 things:\n\nUsually, a function attribute is a thing like the number of edges, nodes, the in-degree, out-degree, number of loops, etc... of a given function. A function signature can be a set of such attributes like, for example, a tuple of attributes such as [nodes, edges, in-degree, out-degree]. It can also be a calculation of various attributes like the MD-Index (that is calculated based on the topology of the graph and the degrees of each basic block) or the \"functions byte hash\" you mention, which is another type of function's signature.\n\nFirst of all, remember that a \"functions byte hash\" is actually a function signature. Then, answering your question without knowing exactly how BinDiff works, I believe that they will use first the heuristics that cause the lesser number of false positives. A signature like \"functions byte hash\" for non trivial functions is likely going to generate near zero false positives so, instead of trying to initially match some attributes or use any false-positive prone signature, they most likely try that mentioned signature first.\n\nDISCLAIMER: I'm not any of the authors of BinDiff neither I have reverse engineered it to know how it actually works. However, I'm the author of an open source alternative called Diaphora, and I know a bit how such a tool works.\n\n",
      "votes": "3",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "The BinDiff algorithm is a matching algorithm that can be used to classify malware.It performs structural matching using a call graph or flow control chart. By default, three attributes are used for the matching function (number of edges between blocks in the functions, number of returns in the function and the number of basic blocks that make up the function). In other words, the signature is the characteristics (calculated attributes) of each function.\n\nPointing to the second question, the strategy that applies to build initial matches is basically finding unique blocks (signatures created by unique attributes).\n\n",
      "votes": "2",
      "user": "Abdallah Naser",
      "time": "May 28, 2018 at 2:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}