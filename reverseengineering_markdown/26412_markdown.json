{
  "title": "Remote Debugging an Aarch64 ELF File on Multiarch/Qemu-user-static (arm64v8/alpine) Docker Container",
  "link": "https://reverseengineering.stackexchange.com/questions/26412/remote-debugging-an-aarch64-elf-file-on-multiarch-qemu-user-static-arm64v8-alpi",
  "content": "My goal is stated in the title. However, I think there is a fundamental issue with gdbserver. In particular, I create an aarch64 alpine docker container on a x86_64 Ubuntu 16.04 host using\n\nsudo docker run --rm -it -p 12345:12345 -v /host_dir:/container_dir --privileged arm64v8/alpine /bin/ash\n\nI then proceed to install gdb in the container using apk add gdb. Subsequently I run ps aux just to get a list of the processes running in the container in order to test gdbserver --attach COMM...PID command in the container. Interestingly absolutely no output no matter how much time goes on. As a result, I switch to the host and simply do the same exercise on the Ubuntu machine, i.e., I attach to a random process with pid 23056. The output to gdbserver --attach :12344 23056 is Attached; pid = 23056 Listening on port 12344, which is what I expected to happen with gdbserver in the container. Any help as to why gdbserver in the container doesn't behave properly is appreciated!\n\nEDIT 1:\n\nI tried again and first ran sudo docker run --rm -it --privileged -p 7777:7777 -v home_dir:container_dir arm64v8/alpine and then ran gdbserver localhost:7777 ./binary and then as suggested in the comments I used netstat -l in the container and got tcp 0      0 0.0.0.0:7777            0.0.0.0:*   LISTEN. So it seems that clearly gdbserver is listening for a tcp connection. Then I use gdb-multiarch binary on the host machine and then (gdb) target remote localhost:7777 to get:\n\nRemote debugging using localhost:7777\n\nIgnoring packet error, continuing...\n\nwarning: unrecognized item \"timeout\" in \"qSupported\" response\n\nIgnoring packet error, continuing...\n\nRemote replied unexpectedly to 'vMustReplyEmpty': timeout\n\nAny idea?!\n\nEDIT 2:\n\nI ran the docker container without the --publish or -p attribute and clearly no matter what IP:PORT I use, gdb-multiarch says the Connection timed out.\n\n",
  "votes": "0",
  "answers": 0,
  "views": "967",
  "tags": [
    "debugging",
    "gdb",
    "remote",
    "aarch64"
  ],
  "user": "Newbie",
  "time": "Dec 3, 2020 at 2:45",
  "comments": [
    {
      "user": "multithr3at3d",
      "text": "Have you confirmed that it is indeed not listening on the port? I seem to recall not always having output. Have you tried debugging the debugger? Maybe try strace on gdbserver?",
      "time": null
    },
    {
      "user": "Newbie",
      "text": "@multithr3at3d Thank you for the comment. Did you also run gdbserver in a docker? As my name says, I'm a newbie and I haven't yet made sure that in fact it is listening or not. I'm thinking maybe I set the docker wrong or I'm just not passing the correct IP:PORT to the target remote command of gdb-multiarch to connect to gdbserver. Basically, I don't feel sure about the connection between the container and the host. Can you comment on that. Also, do you see anything wrong with the docker command?",
      "time": null
    },
    {
      "user": "multithr3at3d",
      "text": "Haven't used it in Docker, no. In the container, try ss or netstat with -l to see if it's listening on that port. What args are you passing to target remote?",
      "time": null
    },
    {
      "user": "Newbie",
      "text": "So this is what I just did inside the docker: gdbserver :7778 binary and in another terminal (still in container) I did netstat -l and I got Proto Recv-Q Send-Q Local Address           Foreign Address         State: tcp        0      0 0.0.0.0:7778            0.0.0.0:*               LISTEN. So I guess gdbserver is actually listening! On the host I have gdb-multiarch binary and then (gdb) target remote localhost:7778 and after a few seconds I get localhost:7778: Connection timed out. It seems that I have the connection between the host and the docker messed up! Right?",
      "time": null
    },
    {
      "user": "multithr3at3d",
      "text": "Well that's good news! Are there firewall rules that would block inbound connections to loopback? Alternatively, if you don't use --privileged, you could maybe specify the address of the container itself.",
      "time": null
    }
  ],
  "answers_data": []
}