{
  "title": "Extracting a NAND flash dump with OOB data",
  "link": "https://reverseengineering.stackexchange.com/questions/14982/extracting-a-nand-flash-dump-with-oob-data",
  "content": "I'm trying to extract a NAND flash dump of an old Walkman player. The dump was done by a friend and unfortunately cannot be redone because the chip was destroyed.\nThe dump was supposed to be just user data without OOB but it seems something went wrong and OOB is still there. \nI tried various ways of removing OOB and I can get some reasonably-looking data but many things are still off and I can't extract proper files.\n\nHere's what I tried.\n\nJust by looking visually into hex dump, there are a 16-byte lines beginning with \"01 00 00 00\" \nevery 0x200 bytes which look out of place. \n\nI made a short script to remove 16 bytes after every 0x200:\n\n```\nimport sys\ninf = open(sys.argv[1] ,\"rb\")\nof = open(sys.argv[2],\"wb\")\nclen = 0x200\nc = inf.read(clen)\noff = 0\nwhile c:\n  off = inf.tell()\n  oob = inf.read(0x10)\n  if oob[:4]!=\"\\x01\\x00\\x00\\x00\":\n   print \" bad OOB at %08X?\" % off, oob.encode('hex')\n   break\n  of.write(c)\n  if (off&0x1000) ==0:\n   print \"%08X\" % off\n  c = inf.read(clen)\n\n\ninf.close()\nof.close()\nprint \"done.\"\n\n```\nThe added sanity check triggers pretty quickly:\n\n```\n00000200\n00000410\n00000620\n00000830\n00000A40\n00000C50\n00000E60\n bad OOB at 00001070? 042080e4fbffffea10009fe530ff2fe1\ndone.\n\n```\nAnd indeed, the next line starting with 01 00 00 00 is at 1240, not 1070. I tried to account for it and restart, but \nI ran into similar issues later. So I wonder if I'm missing something. \nThe full file is 4GB which is a bit heavy so here are few cut out chunks:\n\nif you'd like to see the whole dump I've shared a link in our chat.\n\nHardware details:\nDevice is Sony Walkman NWZ-A829. \nThe flash chip is most likely TH58NVG6D1DTG20. \nThe CPU is a NEC MP201 (ARMv5le).\n\nGPL sources (U-Boot/Linux kernel) are available here: http://oss.sony.net/Products/Linux/Audio/NWZ-S715.html\n\nThe final goal is to figure out the firmware update encryption and produce custom firmware for the device.\n\n",
  "votes": "9",
  "answers": 3,
  "views": "11k",
  "tags": [
    "binary-analysis",
    "firmware",
    "arm",
    "flash",
    "dump"
  ],
  "user": "Igor Skochinsky",
  "time": "Mar 22, 2017 at 16:22",
  "comments": [],
  "answers_data": [
    {
      "content": "So, I have figured it out myself in the end. I'll try to describe the process.\n\nFirst, a bit of background on NAND: it is organized in pages which are grouped into blocks. You can read or write a single page at a time but erasing (which turns all bits to 1s (so bytes to FFs)) can be only done one block at a time (writing can only change bits from 1 to 0 but not the other way around, so to write new data the block usually has to be erased first). Usually the chip also has some extra storage per page to store ECC (error-correction code) and/or arbitrary \"spare\" data (also called OOB: out-of-band) which is not considered to be part of the useful storage of the chip but can still be read and written using low-level functions.\n\nWhile browsing the hex dump, I came across this region after a bunch of FFs:\n\nIt had the usual OOB-looking 16-byte chunks after each 0x200 bytes but then something different:\n\nWhat's this? Sounds like U-Boot. Let's check U-boot sources from Sony's website... and bingo!\n\n```\n /* for Loader Management */\n #define MNG_SIG_LOADER         0x64414F6C      /* \"lOAd\" */\n #define TBL_SIG_PART           0x74524170      /* \"pARt\" */\n #define TBL_SIG_UBOOT          0x74544275      /* \"uBTt\" */\n #define TBL_SIG_FUKRNL         0x744B5566      /* \"fUKt\" */\n #define TBL_SIG_FUINRD         0x74525566      /* \"fURt\" */\n #define TBL_SIG_BAD                0x74444162      /* \"bADt\" */\n\n #define    MNG_SIG_KRNL            0x6C4E526B      /* \"kRNl\" */\n #define TBL_SIG_KRNL           0x744C4E6B      /* \"kNLt\" */\n #define TBL_SIG_INRD           0x74445269      /* \"iRDt\" */\n\n```\n(from icx1087_nand.c)\nSo, apparently these blocks are related to \"Loader Management\"... looking at the references we come across this code chunk:\n\n```\n/* read management table */\nfor( rty = 0; rty < NAND_READ_RETRY; rty++ ) {\n    if( nand_search_tbl(NAND_BLK_LOADER_START, NAND_BLK_LOADER_LMT,\n                        MNG_SIG_LOADER, TBL_SIG_PART, (void *)&ptbl, 0) ) {\n            continue;\n    }\n    /* success to read Kernel information if reach here */\n    break;\n}\n\n```\nSo, it's looking for MNG_SIG_LOADER (lOAd) in the NAND block NAND_BLK_LOADER_START. And the value is...\n\n```\n#define NAND_BLK_LOADER_START   1\n\n```\nSo looks like 82000 is the start of NAND block 1. If we check the code further, we can see that it's looking for other signatures (e.g. TBL_SIG_PART or TBL_SIG_FUKRNL) in pages of this block. And let's see:\n\n83040-82000=1040  and 84080-83040=1040 too! So looks like the page size in the dump is 1040. and 1040*128 =82000 which means we have 128 pages per block. The actual data is probably 0x1000 bytes and 0x40 is the \"spare\" data. So, this explains why I had desynchronization after each four 0x200 sectors: there are 8 sectors per page but only 0x40 bytes of OOB data.\n\nI'm not sure why the dump ended up having such weird structure; I think it's because the software used for dumping (IIRC it was DumpFlash by Matt Oh) assumes 512-byte pages in many places and somehow the OOB data ended up being spread in chunks instead of being grouped at the end of each page. Possibly it's also related to this passage in the datasheet for a similar (but not same) Toshiba chip:\n\n(but no explanation on how it should be done)\n\nIn any case, once I figured out the magic numbers of 0x1040 for page size and 128 pages per block, it was not difficult to fix my script:\n\n```\nNAND_PAGE_SIZE  = 0x1000\nNAND_PAGE_BLK   = 128\nNAND_SECTOR_PER_PAGE = 8\nNAND_SECTOR_SIZE = NAND_PAGE_SIZE/NAND_SECTOR_PER_PAGE\nOOBLEN = 16\n\ndef page2off(pgno):\n  return pgno*0x1040 # (NAND_PAGE_SIZE + NAND_SECTOR_PER_PAGE*OOBLEN)\n\ndef read_page(inf, blkno, pgno):\n blklen = page2off(NAND_PAGE_BLK)\n fileoff = blklen*blkno + page2off(pgno)\n print \"reading block %d page %d: offset %08X\" % (blkno, pgno, fileoff)\n inf.seek(fileoff, 0)\n block = inf.read(blklen)\n s = \"\"\n soff =0\n for i  in range(NAND_SECTOR_PER_PAGE):\n  print \"sector %d offset %08X\" % (i, soff)\n  s+= block[soff:soff+NAND_SECTOR_SIZE]\n  soff += NAND_SECTOR_SIZE+OOBLEN\n return s\n\n```\nWith this I could dump parts of the flash with the kernel and ramdisk and extract the binaries.\n\n",
      "votes": "12",
      "user": "Igor Skochinsky",
      "time": "Apr 5, 2017 at 9:23",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I am a developer of the Rockbox open-source project. We figured out the encryption of the firmware upgrade a look time ago by essentially doing the same thing (dumping the chip).\n\nupgtool can extract the firmware from UPG tools, those can be extracted from the firmware upgrade installer using cabextract and looking at the file Data/Device/NW_WM_FW.UPG It requires an encryption key that can either be brute-forced (upgtool can do so if asked to [3]), or you can ask the device for the key using scsitool.\nWe have a port to a bunch of Sony devices, the NW-A820 will not be supported because it has a very old kernel but most of the information we reverse-engineered probably still applies.\n\n[3] upgtool has the key for the A820 in its database, it was found by brute force\n\n",
      "votes": "6",
      "user": "Amaury Pouly",
      "time": "Sep 19, 2017 at 13:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Skochinsky",
          "text": "yep, I found your stuff after posting this question. Good work, thanks!",
          "time": null
        }
      ]
    },
    {
      "content": "Just a fast answer as future tip for NAND issues.\n\nWhen make reading of NAND flashes (doesn't care if bga, tsop..), not all programmers make clear dump, normally it includes dummy blocks as you mentioned OOB data.\n\nAs NAND dumps should be multiple of 8, like 64, 128, 256MB...if the file you dump is larger than typical size, e.g. 132MB, then is mandatory to analyze the binary for remove dummy chunks and find out the pattern, then you could start playing with the binary.\n\n",
      "votes": "2",
      "user": "numind",
      "time": "Jan 10, 2018 at 5:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}