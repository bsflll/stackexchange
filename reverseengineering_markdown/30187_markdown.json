{
  "title": "Find DllMain using IDA Freeware",
  "link": "https://reverseengineering.stackexchange.com/questions/30187/find-dllmain-using-ida-freeware",
  "content": "I want to use the IDA Freeware Version 7.7 for finding the DllMain of a DLL file. The file is from the book Practical Malware Analysis. It is for Lab 05. Name of file is \"Lab05-01.dll\" and you can download that from here (use VM).\n\nSo as Practical Malware Analysis mentioned, when I load the DLL at IDA Freeware, then, the first line of instruction at the graph view should be the start of DllMain.\n\nBut when I load the DLL file at the IDA Freeware, the first line of graph view is NOT the DllMain. Because I checked from the solutions and my answer and book's answer were not the same.\n\nWhat should I do to find the DllMain?\n\nThank you in advance.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "856",
  "tags": [
    "ida",
    "dll"
  ],
  "user": "Hayeri",
  "time": "Mar 30, 2022 at 9:10",
  "comments": [],
  "answers_data": [
    {
      "content": "Hmm, so here's the rub. I installed IDA Freeware 7.7 in my Linux VM and tried in parallel in my named license IDA Pro 7.7.\n\nTurns out this seems to be a limitation of IDA Freeware, in all likelihood a conscious one. In particular I can see with the freeware version that DllEntryPoint was not deemed a library function (cyan color), but with the commercial license it was.\n\nFreeware: \n\nCommercial:\n\n\nIt appears that based on autoload.cfg my commercial IDA will load FLIRT signatures vc32rtf (Microsoft VisualC 2-14/net runtime), which the freeware version doesn't do on its own.\n\nIf you do that manually through File -> Load file -> FLIRT signature file your DllEntryPoint function should get collapsed and its color should indicate it's a library function (cyan). You can toggle collapsed/expanded mode with Ctrl+Num+ by default.\n\nNow, if you expand the function you will notice it has been recognized as a library function, but so have some of the callees called from this library function. What's more, if you use View -> Open subviews -> Function calls you can see the overview of calls from DllEntryPoint.\n\n\n\nAs you can now see, there are only two called \"entities\" which aren't themselves library functions (call eax ; dword_10092E58 and call sub_1000D02E). And after a cursory look under which conditions the function pointer stored in dword_10092E58 gets called, we can surmise that sub_1000D02E must be our DllMain.\n\nKnowing this, we can now jump to it and manually rename it to DllMain. Once done it should show up as:\n\n```\n.text:1000D02E ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)\n.text:1000D02E DllMain         proc near               ; CODE XREF: DllEntryPoint+4B↓p\n.text:1000D02E                                         ; DATA XREF: sub_100110FF+2D↓o\n\n```\n... in the \"IDA View-A\".\n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Mar 28, 2022 at 11:38",
      "is_accepted": true,
      "comments": []
    }
  ]
}