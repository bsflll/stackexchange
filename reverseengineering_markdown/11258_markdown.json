{
  "title": "Understand what it looks like standard lib functions not properly identified by IDA Pro",
  "link": "https://reverseengineering.stackexchange.com/questions/11258/understand-what-it-looks-like-standard-lib-functions-not-properly-identified-by",
  "content": "I'm reverse engineering a piece of code that has hundreds of calls to a couple of functions I'm not exactly sure what they are doing but looks like standard library functions that do some byte reading?\n\nThey are as I currently call them read8 and read16 and show in IDA Pro as pseudocode:\n\n```\nint __cdecl read8(int a1)\n{\n  return *(_DWORD *)(a1 + 8);\n}\n\nint __cdecl read16(int a1)\n{\n  return *(_DWORD *)(a1 + 16);\n}\n\n```\nSo given a pointer a1 do they read a single DWORD positioned as the 8th and 16th DWORD after the initial address of a1?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "97",
  "tags": [
    "ida",
    "disassembly",
    "functions"
  ],
  "user": "Roberto Andrade",
  "time": "Nov 6, 2015 at 15:02",
  "comments": [],
  "answers_data": [
    {
      "content": "No, they read a single DWORD positioned 8-bytes and 16-bytes (respectively) after the initial address of a1.\n\nIn C, this might look as follows:\n\n```\ntypedef struct _S\n{\n    DWORD a;\n    DWORD b;\n    DWORD c;\n    DWORD d;\n    DWORD e;\n} S;\n\nS x;\nDWORD c = read8(&x);\nDWORD e = read16(&x);\n\n```\n",
      "votes": "1",
      "user": "Jason Geffner",
      "time": "Nov 6, 2015 at 15:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "Roberto Andrade",
          "text": "I thought this was supposed to be pointer arithmetic where +8 means 8 memory allocation slots for a pointer instead of single byte positions?",
          "time": null
        },
        {
          "user": "Roberto Andrade",
          "text": "What about the * before the first set of parenthesys, is that not dereferencing the contents in position +4 as an actual memory address and looking at that address instead to return?",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "In your decompilation, a1 is an int, and adding to an int doesn't take value type sizes into account. Further questions about interpreting C code should probably be posted to stackoverflow.com instead of here.",
          "time": null
        }
      ]
    }
  ]
}