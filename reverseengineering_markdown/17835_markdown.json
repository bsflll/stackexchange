{
  "title": "print [B byte array in frida js script",
  "link": "https://reverseengineering.stackexchange.com/questions/17835/print-b-byte-array-in-frida-js-script",
  "content": "I'm learning frida and trying to hook a function that looks like:\n\n```\n`.method public final fn()[B`\n\n```\nIt returns a byte array. Here's my code:\n\n```\nJava.perform(function () {\n    var test = Java.use(\"com...\");\n    test.fn.overload().implementation = function () {\n        var ret = this.fn();\n        console.log(\"how to write here?\");\n        return ret;\n    };\n});\n\n```\nHow to print the ret variable returned by the function? It's a byte[]. I tried console.log but it only prints a [object], and hexdump complains 'expected a pointer'. How can I print the array?\n\n",
  "votes": "4",
  "answers": 6,
  "views": "25k",
  "tags": [
    "android",
    "function-hooking"
  ],
  "user": "aj3423",
  "time": "Mar 28, 2018 at 19:19",
  "comments": [
    {
      "user": "sudhackar",
      "text": "stackoverflow.com/a/957652/2967945 should work for you. It might have a length field.",
      "time": null
    },
    {
      "user": "Thorbjørn Ravn Andersen",
      "text": "If you know it is a string you can pass it to a String constructor.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "　\n\n```\nvar ret = this.fn();\nvar buffer = Java.array('byte', ret);\nconsole.log(buffer.length);\nvar result = \"\";\nfor(var i = 0; i < buffer.length; ++i){\n    result+= (String.fromCharCode(buffer[i]));\n}\nconsole.log(result);\n\n```\n",
      "votes": "10",
      "user": "perror",
      "time": "Mar 29, 2018 at 10:59",
      "is_accepted": true,
      "comments": [
        {
          "user": "Robert",
          "text": "But this only works for arrays with byte values that represent printable characters. Wouldn't it be better to just print the array in hex representation using something like result+= (buffer[i] & 0xff).toString(16);?",
          "time": null
        }
      ]
    },
    {
      "content": "Frida's java byte array element representation is signed number currently. Therefore, your byte array may contain negative number. We should edit accepted answer to reflect this:\n\n```\nvar buffer = Java.array('byte', ret);\nvar result = \"\";\nfor(var i = 0; i < buffer.length; ++i){\n    result += (String.fromCharCode(buffer[i] & 0xff)); // here!!\n}\nconsole.log(result);\n\n```\nRelated https://stackoverflow.com/a/9609447/9304999 and https://github.com/frida/frida/issues/289\n\n",
      "votes": "4",
      "user": "rosshjb",
      "time": "Oct 6, 2019 at 4:03",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "One liner\nconsole.log(Java.use(\"java.util.Arrays\").toString(ret));\n\n",
      "votes": "2",
      "user": "AMRTS",
      "time": "Feb 26, 2022 at 10:44",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If you are using Frida on Android there is an alternative, using the Android built-in Apache commons codec Hex encoder. As far as I know all Android versions should include the class org.apache.commons.codec.binary.Hex. Unfortunately the version available in Android does not directly output a String, hence you also have to use java.lang.String class:\n\n```\nfunction encodeHex(byteArray) {\n    const HexClass = Java.use('org.apache.commons.codec.binary.Hex');\n    const StringClass = Java.use('java.lang.String');\n    const hexChars = HexClass.encodeHex(byteArray);\n    return StringClass.$new(hexChars).toString();\n}\n\n```\n",
      "votes": "1",
      "user": "Robert",
      "time": "Feb 28, 2022 at 13:22",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Easy:\n\n```\nvar stringClass = Java.use(\"java.lang.String\");\nvar stringInstance = stringClass.$new(ret);\nconsole.log('look = ' + stringInstance.toString())\n\n```\n",
      "votes": "0",
      "user": "Mkurbanov",
      "time": "Dec 8, 2023 at 7:53",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "the up to date method to do this is as follows\n\n```\nlet barr = Java.cast(\"byte\", ret);\nconsole.log(barr);\n\n```\ncreate a javascript byte array binding then print it\n\n",
      "votes": "0",
      "user": "ahmed mani",
      "time": "Jan 8 at 0:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}