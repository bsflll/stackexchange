{
  "title": "Reverse engineering Android vendor system apps",
  "link": "https://reverseengineering.stackexchange.com/questions/12393/reverse-engineering-android-vendor-system-apps",
  "content": "I'm trying to reverse engineer certain Samsung system apps in the Galaxy S6 firmware system image, such as KnoxAttestationAgent.apk. I'm a noob when it comes to reverse engineering, and so far my attempts have been unsuccessful. Here's what I've done so far.\n\nIs there a way for these tools (or others) to work on system apps such as the Samsung Knox ones?\n\nThanks!\n\n",
  "votes": "5",
  "answers": 1,
  "views": "3k",
  "tags": [
    "android",
    "apk"
  ],
  "user": "user1118764",
  "time": "Apr 11, 2016 at 8:23",
  "comments": [
    {
      "user": "Antimony",
      "text": "A lot of system apps are also uploaded to Play. If it is, you can get an ordinary non-odexed apk that way.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "That's because these are odexed apps: when an app is odexed, the classes.dex is extracted from the apk.\n\nThat's right, because the .odex file is not an apk. An odex file is basically an optimized version of the classes.dex\n\nSo, in order to disassemble this app, you have to deodex it.\n\nHere is an HOW-TO guide (I haven't tested it personally): http://www.naldotech.com/how-to-deodex-applications-on-android-5-0-lollipop/\n\nEventually, if you follow all the steps correctly, you will have an apk ready to be reversed using APKTool. \nGood luck.\n\n",
      "votes": "3",
      "user": "diff",
      "time": "Apr 12, 2016 at 5:56",
      "is_accepted": true,
      "comments": [
        {
          "user": "user1118764",
          "text": "Thanks. I ended up just using oat2dex on the odex file, which generated a dex file, and then dex2jar on the generated dex file, which generated a jar file, and finally used JD-GUI on the jar file.",
          "time": null
        }
      ]
    }
  ]
}