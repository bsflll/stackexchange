{
  "title": "Prevent GCC compiler from constant folding",
  "link": "https://reverseengineering.stackexchange.com/questions/32618/prevent-gcc-compiler-from-constant-folding",
  "content": "I have simple C Code:\n\n```\nint main() {\n    int b = 3-1;\n    return 0;\n}\n\n```\nAnd when I objdump it after compiling with no optimization:\n\n```\n000000000000113d <main>:\n    113d:       f3 0f 1e fa             endbr64\n    1141:       55                      push   rbp\n    1142:       48 89 e5                mov    rbp,rsp\n    1145:       c7 45 fc 02 00 00 00    mov    DWORD PTR [rbp-0x4],0x2\n    114c:       b8 00 00 00 00          mov    eax,0x0\n    1151:       5d                      pop    rbp\n    1152:       c3                      ret\n    1153:       66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]\n    115a:       00 00 00\n    115d:       0f 1f 00                nop    DWORD PTR [rax]\n\n```\nWe can clearly tell the compiler has simplified the expression 3-1=2 by line 1145. My goal is figure out where this is happening and to prevent this from happening.\nI have read trough the options of https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html and figured out that by default we still have some optimization, but none of them are doing constant folding and -ftree-dominator-opts is disabled by default.\n\nSo where is this constant folding exactly happening?\nAnd how can I avoid this from happening without modifying the source code?\n\n",
  "votes": "0",
  "answers": 0,
  "views": "164",
  "tags": [
    "disassembly",
    "c",
    "gcc"
  ],
  "user": "killertoge",
  "time": "Jan 5, 2024 at 17:10",
  "comments": [
    {
      "user": "ynwarcs",
      "text": "AFAIK, without modifying the source code, there's no way to prevent constant folding in gcc or clang. Some reasoning (for clang) is given here. What are you trying to accomplish? If you want each constant to be stored onto the stack before it's used in the expression, you can use local variables.",
      "time": null
    },
    {
      "user": "killertoge",
      "text": "Working on a project, reverse engineering with AI, where the model learns the seq2seq translation. I try to keep C Code and Assembly literal representations consistent in HEX format, so the model does not need to learn approximate the translation for which we have explicit functions. I thought about translating all literals to HEX manually. Problem is the constant folding. I either try to get my C code in intermediate folded version, or I prevent folding was my thought. Your link looks useful.",
      "time": null
    },
    {
      "user": "ynwarcs",
      "text": "If the C input is going to be relatively simple, you could do the folding yourself via a script (or a compiler front-end pass) and replace the equations with the calculated values in the C file. It's hard to say without knowing more, but using IR instead of C may also suit you more well, since correspondence between IR and machine code will be much closer than C vs machine code. You could then lift the produced IR to C outside of your model.",
      "time": null
    }
  ],
  "answers_data": []
}