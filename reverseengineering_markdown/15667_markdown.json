{
  "title": "How to print all functions of a binary using radare2 c/c++ API",
  "link": "https://reverseengineering.stackexchange.com/questions/15667/how-to-print-all-functions-of-a-binary-using-radare2-c-c-api",
  "content": "I need to write a program (in c++), that among other things needs to know all functions of a given PE file. Basically, It's an equivalent of opening a binary with \"r2 -A binary_name\" and then entering afl command.\n\nIs there a way to do it using radare2 c\\c++ API(libr)? If yes, how?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "5k",
  "tags": [
    "c++",
    "radare2",
    "api"
  ],
  "user": "E. Fedorov",
  "time": "Jun 25, 2017 at 20:53",
  "comments": [
    {
      "user": "blabb",
      "text": "Fwiw the lib files always appear to be missing in the windows package there is a small test file here that shows how to use the api but i could never build it because the r2 package doesnt have any lrbr.so or libr.a files  github.com/radare/radare2-bindings/tree/master/c   if you paste the code in lnto a text file in  \"r2\\include\\libr\"  and use mingw gcc -I. foo.c  then mingw ld throws unreferenced r_bin_new() error because it cant find the lib file see if you can get them in in some nixy os",
      "time": null
    },
    {
      "user": "E. Fedorov",
      "text": "I've actually run into the same problem under linux. And I have all radare library files under /usr/lib. However they are symlinks, and files they link to don't exist.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The best programming interface to radare2 called r2pipe.\n\nTo quote from the project's Github page:\n\nr2pipe supports many programming languages including Python, NodeJS, Rust, C and others.\n\nTo use r2pipe you should first make sure you have radare2 installed. It is always recommended to use the latest version from git.\n\nInstall or update radare2 with the following steps:\n\n```\n$ git clone https://github.com/radare/radare2.git # clone radare2 if you didn't do it yet for some reason.\n$ cd radare2\n$ ./sys/install.sh\n\n```\nNow after radare2 is installed and updated let's move to write the C program to list all the functions of the binary. As you've mentioned in your question, it should be the equivalent for opening the binary with radare2, executing aaa to analyze the binary (which is actually r2 -A binary_name) and then execute afl to list all the functions.\n\nFirst we should define a function that accepts r2 instance and command. This function will execute the command, print the results and free the resulting string.\n\n```\n#include <r_socket.h>                           \n\nstatic void r2cmd(R2Pipe *r2, const char *cmd) {\n        char *msg = r2p_cmd (r2, cmd);          \n        if (msg) {                              \n                printf (\"%s  \n\", msg);           \n                free (msg);                     \n        }                                       \n}  \n\n```\nAfter that, writing the main() function should be intuitive:\n\n```\nint main() {                                           \n        R2Pipe *r2 = r2p_open (\"r2 -q0 /bin/echo\");\n        if (r2) {                                  \n                r2cmd (r2, \"aaa\");                 \n                r2cmd (r2, \"afl\");                 \n                r2p_close (r2);                    \n                return 0;                          \n        }                                          \n        return 1;                                  \n}   \n\n```\nWe define an instance of r2 with the program we want to examine, and then use the function we just created to execute commands through radare2's interface. First we analyze the program using aaa and then we print the functions using afl.\n\nTo compile the program using gcc we should execute the following command:\n\n```\ngcc list_functions.c -o list_functions $(pkg-config --cflags r_socket --libs r_socket)\n\n```\n",
      "votes": "3",
      "user": "Megabeets",
      "time": "Dec 9, 2017 at 16:25",
      "is_accepted": false,
      "comments": []
    }
  ]
}