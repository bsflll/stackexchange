{
  "title": "How to get instructions at her address?",
  "link": "https://reverseengineering.stackexchange.com/questions/30621/how-to-get-instructions-at-her-address",
  "content": "With the help of gidra, I found the function of interest.\n\n```\nvoid __fastcall FUN_gameWhile(int buf?)\n\n```\nfunction address in gidra - 00aad920\n\nI'm trying to get instructions at this address using frida\n\n```\nvar moduleData = Process.getModuleByName(\"main.exe\");\nvar Iprp = moduleData.base.add(\"0xd920\");\nconsole.log(Iprp);\nconsole.log(Instruction.parse(Iprp));\n\n```\nlooking forward to seeing the instructions : push ebp\n\nBut I see instructions : dec ebx and adress 0x53d920\n\nIf you go to this address in the debugger, there really is this instruction (dec ebx).\n\nI guess it has to do with __fastcall in front of the function name. Why is this happening and how can I get instructions at this address using Frida?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "1k",
  "tags": [
    "frida"
  ],
  "user": "user123",
  "time": "Jul 12, 2022 at 12:27",
  "comments": [
    {
      "user": "Robert",
      "text": "The function address is 0xaad920 but you add only 0xd920, so the base address configured in Ghidra is 0xAA0000? Get the configured base address here: menu Window -> Memory map -> house icon (Set Image Base). That is the base address you need to substract from the address shown in Ghidra. Afterwards add the base address you got by Frida at run-time e.g. Module.findBaseAddress(\"main.exe\");",
      "time": null
    },
    {
      "user": "user123",
      "text": "I did not know about such functionality of the hydra, so I went the other way. I calculated the difference in addresses and just add this difference to frida. Rather, I will now use your approach. Thank you.",
      "time": null
    }
  ],
  "answers_data": []
}