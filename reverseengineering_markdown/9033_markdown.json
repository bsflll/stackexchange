{
  "title": "How to recognize the function call in a dynamic lib?",
  "link": "https://reverseengineering.stackexchange.com/questions/9033/how-to-recognize-the-function-call-in-a-dynamic-lib",
  "content": "when I disassemble an OpenCV dynamic library file (libopencv_imgproc.so), I find that there are a lot of bl instructions which target address are in the .plt section. But, I could'n find its symbol info. \n\n```\n00110ee0 <cvResize>:\n  110ee0:   b5f0        push    {r4, r5, r6, r7, lr}\n  110ee2:   4603        mov r3, r0\n  110ee4:   b0bf        sub sp, #252    ; 0xfc\n  ...\n  110ef4:   4ca8        ldr r4, [pc, #672]  ; (111198 <cvResize+0x2b8>)\n  110ef6:   9500        str r5, [sp, #0]\n  110ef8:   f70e ebda   blx 1f6b0 <_init+0x2b4>\n  ...\n\n```\nI could not find the address 1f6b0 in the .text section. It actually is in the .plt section. However, I couldn't find it in the symbol table.\nHow can I get these missed symbol info?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "548",
  "tags": [
    "arm",
    "dynamic-linking"
  ],
  "user": "winter333",
  "time": "Jun 1, 2015 at 7:26",
  "comments": [],
  "answers_data": [
    {
      "content": "Doing it the hard way:\n\nDoing it the easy way:\n\nPlease note that objdump relies on the fact that the order of PLT stubs usually matches the order of relocations in the PLT reloc list. In theory, one can patch a PLT stub after linking so it uses another symbol's pointer.\n\n",
      "votes": "1",
      "user": "perror",
      "time": "Jun 1, 2015 at 7:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}