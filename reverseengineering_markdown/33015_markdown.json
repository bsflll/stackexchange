{
  "title": "Differences between Mach Services and XPC Services in macOS Sandbox Profiles",
  "link": "https://reverseengineering.stackexchange.com/questions/33015/differences-between-mach-services-and-xpc-services-in-macos-sandbox-profiles",
  "content": "I am trying to learn more about IPC implementations (mach/xpc) and how corresponding services are managed using sandbox profiles on macOS.\n\nAfter looking at many different profiles, I have learned that a service connection can be whitelisted with:\n\n```\n(allow mach-lookup (...))\n\n```\nI have noticed two different flavors of this syntax, fox example:\n\n```\n(allow mach-lookup\n    (global-name \"com.apple.tccd.system\"))\n\n```\nAnd the other variant:\n\n```\n(allow mach-lookup\n       (xpc-service-name \"com.apple.audio.toolbox.reporting.service\"))\n\n```\nAt first glance, this looks very straightforward: The first version whitelists connections to a mach service provided by com.apple.tccd.system whereas the second version whitelists connections to an xpc service provided by com.apple.audio.toolbox.reporting.service. However, after decompiling the service binaries I have noticed that both service only seem to utilize xpc API's and none of the low level mach API's.\n\nFor example com.apple.tccd.system (loading the service binary /System/Library/PrivateFrameworks/TCC.framework/Support/tccd) creates the following xpc service on startup:\n\n```\n...\nif ( byte_1000A4788 )\n    service_name = \"com.apple.tccd.system\";\n  else\n    service_name = \"com.apple.tccd\";\n  v19 = (void *)qword_1000A4790;\n  if ( os_log_type_enabled((os_log_t)qword_1000A4790, OS_LOG_TYPE_INFO) )\n  {\n    ...\n  }\n  v22 = objc_retainAutoreleasedReturnValue(+[TCCDEventPublisher sharedPublisher](&OBJC_CLASS___TCCDEventPublisher, \"sharedPublisher\"));\n  objc_msgSend((id)qword_1000A4A48, \"setEventPublisher:\", v22);\n  objc_release(v22);\n  mach_service = xpc_connection_create_mach_service(service_name, 0LL, 1uLL);\n...\n\n```\nWhat I don't understand is why all services (that I looked at) utilize the xpc_* API's. What is the difference between a global-name and a xpc-service-name in a sandbox profile, if every service uses the same API's anyway? Since there is a differentiation in the sandbox profiles, there must be a reason.\n\nI know that xpc is essentially built on mach. Is it theoretically possible, to completely ignore xpc and only use mach to talk to an xpc service?\n\nAny help and clarification is highly appreciated!\n\n",
  "votes": "2",
  "answers": 0,
  "views": "45",
  "tags": [
    "macos",
    "sandbox"
  ],
  "user": "n0ne",
  "time": "Jun 8, 2024 at 10:11",
  "comments": [],
  "answers_data": []
}