{
  "title": "Why some functions in IDA can't be searched",
  "link": "https://reverseengineering.stackexchange.com/questions/26167/why-some-functions-in-ida-cant-be-searched",
  "content": "I don't know why but I noticed, on some program I am reversing, that in a section named .bss, there functions and I can't find them through the regular search, why is that.\n\nFor example, I wanted to search for _mainScene but it found me only one functioned named newMainScene:\n\n\nEDIT:\nA friend show me that I can search with Shift+4 in IDA for the names in .bss.\n\n",
  "votes": "0",
  "answers": 1,
  "views": "299",
  "tags": [
    "ida",
    "functions"
  ],
  "user": "E235",
  "time": "Oct 25, 2020 at 9:04",
  "comments": [
    {
      "user": "blabb",
      "text": "dd? Is normally a pointer and not a function",
      "time": null
    },
    {
      "user": "E235",
      "text": "What is dd ? I know it only from WinDBG as a command. Or you meant ds, data segment? Is there a way to search in this?",
      "time": null
    },
    {
      "user": "blabb",
      "text": "dd? = uninitialized dword it is there in your screen shot see the address 0x44ddac and around they are all  a placeholder or a pointer  i dont under stand what you want to search",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You are not looking at functions that you can't reach, but at unassigned variables.\n\nAs you said, you are looking at the .bss section. From Wikipedia, the .bss section is\n\nIDA is showing you this with the dd opcode. As @blabb point out, this is an uninitialized dword, which mean a dword that was not assigned yet. Exactly what is supposed to be in the .bss section !\n\nTheses variables don't have any hardcoded default values, so they are placed in this section of the binary, waiting to be populated at runtime with dynamic values.\n\nWhat you can do is to write down the address of the variable that you want to find more about, open up a debugger, let it run a bit (or you can break on a specific function if you know where this variable is being populated), and check the content of this variable by looking at the previously written memory address.\n\nYou'll know what type of data is supposed to be inside this variable !\n\nDon't forget to deactivate the ASLR while running the binary (otherwise the address that you saw in IDA would not match naything), or if needed, to rebase your program in IDA.\n\n",
      "votes": "2",
      "user": "Guillaume",
      "time": "Oct 24, 2020 at 17:37",
      "is_accepted": true,
      "comments": []
    }
  ]
}