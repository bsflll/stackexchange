{
  "title": "Break anywhere when $r1 equals to string GDB",
  "link": "https://reverseengineering.stackexchange.com/questions/17834/break-anywhere-when-r1-equals-to-string-gdb",
  "content": "Is there anyway to break on gdb where $r1 equals to a certain string\nI know there is :\n\n```\nbreak [addr] if ((int)strcmp($r1, \"hello\")) == 0\n\n```\nBut what to set in addr when I just wanna break when the r1 is \"hello\" no matter the address?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "639",
  "tags": [
    "gdb"
  ],
  "user": "Neolex",
  "time": "Mar 29, 2018 at 7:48",
  "comments": [
    {
      "user": "julian",
      "text": "ask on Stackoverflow",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Python api in GDB is very convenient to script such solutions. Although the api is a little \"wild\", I refer to pwndbg on how to use the api. I wrote the following for x86_64 to break only when the first param matches \"pol\". Full code here\n\n```\nimport gdb\n\nclass MyBreakpoint (gdb.Breakpoint):\n    def stop (self):\n        rdi = int(gdb.parse_and_eval(\"$rdi\").cast(gdb.lookup_type('uint64_t')))\n        print(\"x(%x)\" % (rdi)), \n        result = gdb.selected_inferior().read_memory(rdi, 10)\n        if b'\\x00' in result:\n            result = bytearray(result).split(b'\\x00')[0]\n        if result == b'pol':\n            return True\n        return False\n\nMyBreakpoint(\"x\")\n\n```\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Mar 29, 2018 at 7:46",
      "is_accepted": false,
      "comments": [
        {
          "user": "Neolex",
          "text": "Thank you for your help, but what is the difference between your script and  break x if ((int)strcmp($rdi, \"pol\")) == 0\" ?   I would like to break anywhere not just X just break when r1 is equal to a string no matter in which function i am isnt that possible ?",
          "time": null
        },
        {
          "user": "sudhackar",
          "text": "iirc gdb has no such feature. However you can use Intel PIN and instrument on the instructions where r1 is changed. Your other option is just to fetch all the instructions which change r1 in a disassembler and set conditional breakpoints.",
          "time": null
        }
      ]
    }
  ]
}