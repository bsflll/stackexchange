{
  "title": "Decompile binary executable into c / asm code by emulation, is it possible?",
  "link": "https://reverseengineering.stackexchange.com/questions/10847/decompile-binary-executable-into-c-asm-code-by-emulation-is-it-possible",
  "content": "I am thinking on a decompilation method which uses the runtime behavior of the binary executable to extract usable compilation data. Analysing the runtime behavior (i.e. trapping after every cpu instruction and check what it does), we could get a lot of additional infos, like:\n\nOn my opinion, maybe even the holy grail, the recompilable source code wouldn't be so far away.\n\nIs it possible? Does any tool / software already exist which is capable to do this?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "1k",
  "tags": [
    "disassembly",
    "decompilation",
    "tracing"
  ],
  "user": "peterh",
  "time": "Sep 13, 2015 at 2:17",
  "comments": [
    {
      "user": "Jason Geffner",
      "text": "What you're saying sounds like a combination of funcap and Hex-Rays Decompiler.",
      "time": null
    },
    {
      "user": "peterh",
      "text": "@JasonGeffner Thanks! They sound quite interesting.",
      "time": null
    },
    {
      "user": "Stolas",
      "text": "In the university of Moscow there is an employee that cracked my heavily obfuscated crackme using a patched version of qemu to emulate the code and jump over anti debug code.",
      "time": null
    },
    {
      "user": "peterh",
      "text": "@Stolas I think at first would be even enough if normal binary (without intentionally setup anti-disasm traps) would be decompilable. For example, if an asm code could be even created, it would be already transformable to an equivalent C code, which would be compilable on other architectures, too.",
      "time": null
    },
    {
      "user": "Stolas",
      "text": "@peterh if you are looking to build something like this, I made a bare version once with libemu as base. I used this to emulate the code and run it as libemu.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "This problem is linked to the halting problem on a Turing machine (which is known to be undecidable). \n\nApproaching decompilation through emulation suppose that you have to run through all the branches of the software at least once, and reaching all possible program points cannot be guaranteed if you have to go through a (potentially) infinite loop.\n\nYet, this is a theoretical problem that you unlikely find in real life (except if it has been planted here intentionally to prevent the full exploration through emulation).\n\nBut, in a more practical perspective, exploring all paths can be done only if you can easily run through all the path at runtime, which is not the case when the user is required to solve a challenge (possibly on-line) such as giving a password whose hash is stored in the program or prove that he posses a private key by signing a message and returning it to the software.\n\n",
      "votes": "5",
      "user": "perror",
      "time": "Sep 8, 2016 at 8:03",
      "is_accepted": true,
      "comments": [
        {
          "user": "peterh",
          "text": "I think in case of conditional branches the direction of the condition could be negated to map the alternate direction, too. Of course it would cause likely a software fault, but it should be done only once on every conditional jump in the binary, which is not too many.",
          "time": null
        },
        {
          "user": "perror",
          "text": "Except if you actually need the result to process the rest of the software (let say that it generates a key from the user input and use it to decipher the assembly code of the rest of the program).",
          "time": null
        },
        {
          "user": "peterh",
          "text": "I am thinking on a 2-phase solution: 1) run the software unmodified, and collect as many data as it is possible 2) using the collected data, only the conditional branches need to be revisited which weren't mapped into both directions.",
          "time": null
        }
      ]
    }
  ]
}