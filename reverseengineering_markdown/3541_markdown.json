{
  "title": "ARM debugging interesting behavior",
  "link": "https://reverseengineering.stackexchange.com/questions/3541/arm-debugging-interesting-behavior",
  "content": "I was just disassembling and debugging an ARM binary for fun and I noticed something unusual. Consider the following set of instructions:-\n\n```\n   0x00008058 <+4>: mov r1, pc\n   0x0000805c <+8>: add r1, r1, #24\n   0x00008060 <+12>:    mov r0, #1\n\n```\nI tried setting a breakpoint at 0x0000805c and checked the value of the register r1. I was expecting to see 0x0000805c -- however, interestingly the value is 0x8060.\n\nWhy is this? Is this because of some sort of instruction pipelineing? \n\n",
  "votes": "6",
  "answers": 1,
  "views": "166",
  "tags": [
    "debugging",
    "arm"
  ],
  "user": null,
  "time": "Jan 24, 2014 at 16:27",
  "comments": [],
  "answers_data": [
    {
      "content": "Yes, it's because of pipelining.\n\nFrom http://winarm.scienceprog.com/arm-mcu-types/how-does-arm7-pipelining-works.html --\n\n",
      "votes": "9",
      "user": "Jason Geffner",
      "time": "Jan 24, 2014 at 14:13",
      "is_accepted": true,
      "comments": []
    }
  ]
}