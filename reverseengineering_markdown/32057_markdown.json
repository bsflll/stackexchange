{
  "title": "Determine Endianess of some ARM binary image?",
  "link": "https://reverseengineering.stackexchange.com/questions/32057/determine-endianess-of-some-arm-binary-image",
  "content": "I have been advised to analyze an ARM binary image from an Cortex M3 (STM32) for training. It has been directly extracted from flash beforehand and passed to me. However it's unknown whether this image is in big or little Endian byte order. Running a strings command on the bin, does not return any meaningful strings. Before proceeding with analyzing utilizing Ghidra, I wanted to learn how to verify that the Endianess is correct.\n\n```\nuser@XOP:~$ xxd -b binary.bin\n00000000: 00100000 00000000 00010001 01100000 00001000 00000000   ..`..\n00000006: 00111111 11001001 00001000 00000000 00111111 11100101  ?...?.\n..\n0000001e: 00000000 00000000 00000000 00000000 00000000 00000000  ......\n00000024: 00000000 00000000 00000000 00000000 00000000 00000000  ......\n..\n00000036: 00000000 00000000 00001000 00000000 01000000 00000001  ....@.\n0000003c: 00001000 00000000 01000000 00000101 00001000 00000000  ..@...\n00000042: 01000000 00001001 00001000 00000000 01000000 00001101  @...@.\n..\n0000005a: 01000000 00100001 00001000 00000000 01000000 00100101  @!..@%\n\nuser@XOP:~$ strings binary.bin\nxhph\n\"@A\\\n@CpC\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "138",
  "tags": [
    "binary-analysis",
    "arm"
  ],
  "user": "Tomblarom",
  "time": "Jul 14, 2023 at 23:07",
  "comments": [
    {
      "user": "mimak",
      "text": "You could employ AI analysis tools such as isadetect (there's also a research paper on it)",
      "time": null
    },
    {
      "user": "melsk",
      "text": "objdump -d <filename> should help with that. If it says bigarm, it is big endian arm.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Cortex M is always little endian. In my experience, big endian ARM is exceedingly rare, I think it was used mostly in some network processors (e.g. the old Intel IXP series).\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Jul 14, 2023 at 23:00",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "MCU usually have vector table starting at address 0 (STM32 certainly does, I am not 100% for others). This should help you a lot when combined with memory map to check if addresses in vector table are valid.\n\nEven easier method is to check datasheets for specific target in this case programming manual:\nhttps://www.st.com/resource/en/programming_manual/pm0056-stm32f10xxx20xxx21xxxl1xxxx-cortexm3-programming-manual-stmicroelectronics.pdf\n\nWhere it explicitly say it is little endian.\n\n",
      "votes": "1",
      "user": "Rok Tavƒçar",
      "time": "Jul 18, 2023 at 10:46",
      "is_accepted": false,
      "comments": []
    }
  ]
}