{
  "title": "Win7 ASLR bypass",
  "link": "https://reverseengineering.stackexchange.com/questions/4703/win7-aslr-bypass",
  "content": "The conditions: say one patched programm has hardcoded address of printf() from dynamically loaded msvcrt80.dll. It works just fine on XP, but Win7 randomizes address space (ASLR), so this trick become impossible and program crashes with call of my hardcoded printf() address.\n\nWhat should I do to retrieve IAT RVA of this printf() in win7 to make this work?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "862",
  "tags": [
    "windows",
    "exploit"
  ],
  "user": "see ya",
  "time": "Jul 26, 2014 at 2:43",
  "comments": [
    {
      "user": "Stolas",
      "text": "Are you looking for ASLR bypassing by finding User32.dll and load GetProcAddr + LoadLibrary or do you want to walk your import table to find the already imported printf function?",
      "time": null
    },
    {
      "user": "see ya",
      "text": "No, I dont need GetProcAdress. Both addresses considered known, but this dont help much. After call RVA(IAT+function) for some reason execution goes on, interpreting RVA(IAT+function)+4 as opcode and here is application crash.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "If you can patch the program's image, you don't actually need to hardcode the address. you can simply add another import entry to the already existing import tables and have it patched in automatically by the loader.\n\nSee Iczelion's tutorial on import tables to guide you further.\n\nOf course, if you're trying to do that from shellcode, you'll need to walk the loader data, locating the DLL image. The Ldr member in PEB should help you with that.\n\nIf you'd be so kind to provide more details on what exactly you are trying to do, I'll update the answer; there is no simple answer to the \"how to defeat ASLR\" question.\n\n",
      "votes": "5",
      "user": "Dmitry Janushkevich",
      "time": "Jun 27, 2014 at 7:02",
      "is_accepted": true,
      "comments": []
    }
  ]
}