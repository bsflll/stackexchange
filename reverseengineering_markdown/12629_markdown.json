{
  "title": "Decompiled Java classes span multiple files",
  "link": "https://reverseengineering.stackexchange.com/questions/12629/decompiled-java-classes-span-multiple-files",
  "content": "I've been playing around with decompiling Android apps from dex/jar files to java source code, with varying success. I've tried the usual suspects - JD-GUI, procyon, cfr, krakatau and jadx. I'm having a specific problem with all of them on a particular app in that it's obfuscated, and many classes seem to be split up into multiple files. AFAIK, this isn't allowed in Java.\n\nAlso, the classes seem to extends multiple base classes, e.g. class a extends Activity, and class a(or renamed to something else but I know is actually class a as it tries to access a's private member variables directly) extends BroadcastReceiver. AFAIK, this isn't allowed in Java either.\n\nAs a result, the decompiled code is full of errors and hard to follow. I'm not expecting a compileable code form the decompiled code, but I do wish to at least be able to perform meaningful static analysis, which is hard to do when the decompiled source doesn't follow java conventions.\n\nAny help on how to resolve this decompilation issue?\n\nThanks.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "decompilation",
    "java",
    "deobfuscation"
  ],
  "user": "user1118764",
  "time": "May 11, 2016 at 2:28",
  "comments": [],
  "answers_data": [
    {
      "content": "It is impossible for Krakatau to generate java files like that, and I imagine the same is true for other decompilers. However, I can think of some things that might lead to your confusion.\n\nFirst off, nested and inner classes in Java are considered independent classes and are compiled into seperate classfiles. This is true even for anonymous classes, such as every time you use the double brace initialization pattern. Depending on the decompiler and settings, the classes might be decompiled independently or merged back into one file. This is the only thing I can think of which could be described as a class \"split up into multiple files\".\n\nAs for a class extending multiple superclasses, this is obviously also impossible (though an interface can extend multiple superinterfaces). Most likely what happened is that you are confusing a class and its nested classes.\n\nFor example, you could have the main class A which subclasses Activity. Then A has an nested class, say A$1, which subclasses BroadcastReceiver. As a nested class, A$1 will of course have access to A's private members. (Note that this is technically not true at the bytecode level. The private members are accessed indirectly by compiler generated wrappers, which may or may not be shown, depending on the decompiler you use).\n\nAlternatively, you may be mixing up unrelated classes with the similar names, such as A and a.\n\nP.S. Krakatau is one of the decompilers that explicitly shows compiler generated accessors, so you definitely shouldn't be seeing direct access to private members of other classes. If you provide the app you are analyzing and the classes in question, I can try to figure out what's going on.\n\n",
      "votes": "1",
      "user": "Antimony",
      "time": "May 11, 2016 at 3:03",
      "is_accepted": false,
      "comments": [
        {
          "user": "Guntram Blohm",
          "text": "+1 - it would be interesting to see a specific example so we can try to figure out what's going on, and maybe work around it.",
          "time": null
        },
        {
          "user": "user1118764",
          "text": "OK I've uploaded the jar file to the following dropbox link - dl.dropboxusercontent.com/u/18288498/UniversalMDMClient.jar. There are many classes that exhibit the multiple file behavior, but specifically, look at the following: Under com.sec.enterprise.knox.cloudmdm.smdms.core, Core, g and h seem to be the same class. BulkEnrollmentManager, c, d, e and f seem to be the same class. Under com.sec.enterprise.knox.cloudmdm.smdms.agent, a and b seem to be the same class.",
          "time": null
        },
        {
          "user": "Antimony",
          "text": "@user1118764 I'll take a look this weekend",
          "time": null
        }
      ]
    }
  ]
}