{
  "title": "Why does IDA identify so many non-existent methods in this binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/15908/why-does-ida-identify-so-many-non-existent-methods-in-this-binary",
  "content": "The decompilation and auto-analysis of this binary is grossly inaccurate. I am providing the binary as well as the IDB. IDA v6.95, 32 bit was used for the analysis. Can anyone take a look and suggest how I can improve the accuracy of IDA's analysis in this case?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "428",
  "tags": [
    "ida",
    "hexrays"
  ],
  "user": "sherlock",
  "time": "Jul 25, 2017 at 7:16",
  "comments": [],
  "answers_data": [
    {
      "content": "Would you mind ellaborating which functions you are refering to? The ones I see (IDA 6.95, 32bit, linux) seem pretty normal to me. Here is the list:\n\n\n\nGenerally, IDA adds functions as soon as it finds any referal of control flow, so broken functions are often generated by opaque predicates and falsely parsed jump tables.\n\nedit:\nThe functions you are referring to (sub_6C8, sub_6D0, sub_6D8) are functions related to the global offset table (see segment name). These are basically trampoline functions redirecting the control flow.\n\n(PLT stands for procedure linkage table)\n\nI'm not completely certain why IDA treats them as functions, but the functionality is no mistery.\n\nYou may try commands like:\n\n```\nreadelf --relocs bug_manage_system\n\n```\nor\n\n```\nobjdump -T bug_manage_system\n\n```\nAlso, it may help to have a look at raw disassembler output of .plt.got using objdump or any other tool.\n\nReading an article about the linking procedure of elf files may certainly help:\nPLT and GOT - the key to code sharing and dynamic libraries\nGOT and PLT for pwning.\nWhat is PLT/GOT?\n\n",
      "votes": "1",
      "user": "Nordwald",
      "time": "Jul 27, 2017 at 5:38",
      "is_accepted": false,
      "comments": [
        {
          "user": "sherlock",
          "text": "There are many e.g. sub_6C8, sub_6D0, sub_6D8 etc. Also, I seem to be not able to find any cross reference to malloc",
          "time": null
        },
        {
          "user": "sherlock",
          "text": "Look at the decompiler's output of the functions above.",
          "time": null
        },
        {
          "user": "Nordwald",
          "text": "@Holmes.Sherlock any other functions? See my updated answer",
          "time": null
        }
      ]
    }
  ]
}