{
  "title": "How can I mark a global variable as an offset using IDAPython?",
  "link": "https://reverseengineering.stackexchange.com/questions/17798/how-can-i-mark-a-global-variable-as-an-offset-using-idapython",
  "content": "I have a four byte global variable that is a pointer to some other data. How can I mark this to be an offset (like pressing o) using IDAPython?\n\n```\n.text:00436FF3      dd 43702Ch\n\n```\nida_offset.op_offset_ex (ref) seems close to what I want, but is intended for marking instruction operand types, not global variables.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "idapython"
  ],
  "user": "Willi Ballenthin",
  "time": "Mar 25, 2018 at 13:56",
  "comments": [
    {
      "user": "w s",
      "text": "It should work with globals too. Just use operand number 0.",
      "time": null
    },
    {
      "user": "Willi Ballenthin",
      "text": "Thanks, @ws! I've updated the post with an answer below, but I'm afraid this steals your rep. If you repaste the same (or similar content), I'll remove my answer and accept yours. Thanks again!",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Glad to see you on this SE site. I admire your RCE and forensics related work.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Following the advice of @ws, you can use operand number 0 with ida_offset.op_offset(ea, n, type, target=BADADDR, base=0, tdelta=0).\n\nFor example:\n\n```\nida_offset.op_offset(0x436FF3, 0, idc.REF_OFF32)\n\n```\nNote: idc.OpOffset did not work consistently for me, while ida_offset.op_offset did. So, you may want to prefer the later routine.\n\n",
      "votes": "2",
      "user": "Willi Ballenthin",
      "time": "Mar 25, 2018 at 16:03",
      "is_accepted": false,
      "comments": []
    }
  ]
}