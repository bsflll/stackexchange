{
  "title": "Extract non-extractable private key from OS X Keychain",
  "link": "https://reverseengineering.stackexchange.com/questions/6043/extract-non-extractable-private-key-from-os-x-keychain",
  "content": "I'm trying to extract a non-extractable private key as a .p12 file from Keychain Access.app  or /usr/bin/security on Mac OS X 10.9.4.\n\nBasically, it appears that security import has a -x option to specify that private keys are non-extractable after being imported.\n\nAs per above, this is implemented by explicitly omitting CSSM_KEYATTR_EXTRACTABLE during the import.  Subsequently, when trying to export, the key without such an attribute cannot be exported.\n\nI could find at least two relevant mentions which appear to prevent such keys from being exported (hint: use fgrep -OR to avoid following the symbolic links when searching through Apple source code):\n\nI've tried keychain_access from github.com/torsten, but it didn't work.\n\nI've tried using lldb, lldb -- security export -t identities -f pkcs12 -o /tmp/mycerts.p12, to break on SecWrappedKeys.cpp::impExpWrappedKeyOpenSslExport(), but that doesn't seem to work, either, with break impExpWrappedKeyOpenSslExport giving out an error invalid command 'breakpoint impExpWrappedKeyOpenSslExport'.\n\nI've tried DTrace to trace Cisco AnyConnect, but I'm not familiar enough with DTrace for it to reveal the datastructures.\n\nI've tried re-compiling the Security and SecurityTool packages, but they all appear to require bootstrapping that does not appear to be in place.\n\nHow do I get the private key?\n\n",
  "votes": "12",
  "answers": 2,
  "views": "5k",
  "tags": [
    "binary-analysis",
    "debuggers",
    "file-format",
    "osx",
    "compilers"
  ],
  "user": "cnst",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "I've arrived at a solution by researching an answer for one of my Keychain subquestions.\n\nAccording to SecItem.h, this kSecAttrIsExtractable has been introduced with OS X 10.6.\n\nAs such, I've tried and succeeded in the following:\n\n",
      "votes": "6",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I found an easier way with chainbreaker fork. It works with MacOS 10.14 Mojave. See full instructions here.\n\nIn my case, I did the following: \n\n```\n$ pip2 install hexdump pycrypto pyopenssl\n$ git clone https://github.com/gremwell/chainbreaker.git && cd chainbreaker\n$ python2 chainbreaker.py -f ~/Library/Keychains/login.keychain-db -p <PASS>\n$ openssl x509 -inform DER -in exported/associated/1/*.crt -out secret.crt\n$ openssl rsa -inform DER -in exported/associated/1/*.key -out secret.key\n$ openssl pkcs12 -export -out secret.p12 -inkey secret.key -in secret.crt\n\n```\nThen secret.p12 is ready to be imported on another machine.\n\n",
      "votes": "4",
      "user": "julian",
      "time": "Dec 27, 2018 at 0:30",
      "is_accepted": false,
      "comments": [
        {
          "user": "Igor Leonovich",
          "text": "You saved my life, respect",
          "time": null
        }
      ]
    }
  ]
}