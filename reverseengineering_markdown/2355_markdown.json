{
  "title": "Tool for checking for in-memory code modifications of loaded DLLs",
  "link": "https://reverseengineering.stackexchange.com/questions/2355/tool-for-checking-for-in-memory-code-modifications-of-loaded-dlls",
  "content": "A common anti-debugging practice is to overwrite functions such as DbgUiRemoteBreakin within ntdll.dll. \n\nSince in-memory representation of common libraries is always the same on each platform, it should be possible for an external tool to connect to a process and compare in-memory library code with a reference in order to find any manipulations done by the process itself.\n\nDoes anybody know such a tool for Windows?\n\n",
  "votes": "6",
  "answers": 2,
  "views": "495",
  "tags": [
    "tools",
    "windows",
    "dll"
  ],
  "user": "Robert",
  "time": "Jun 28, 2013 at 2:36",
  "comments": [
    {
      "user": "PhoeniX",
      "text": "Try to look into this thread, I thinks it could at least partially answer your question Tool for checking if there is any patch in the loaded module",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "WinDbg can do this for Microsoft DLLs and executables (and generally for any code that can be obtained from the symbol server). Just attach the debugger to the process and do !chkimg <module>. It will download a clean copy of the module from the symbol server and compare it, reporting on differences.\n\nThis article has an example of the output you can expect to see when something has modified a binary.\n\n",
      "votes": "3",
      "user": "Brendan Dolan-Gavitt",
      "time": "Jun 27, 2013 at 15:36",
      "is_accepted": true,
      "comments": [
        {
          "user": "Robert",
          "text": "The described manipulation is usually used for terminating the process when an debugger is attached. Therefore only the variant by analyzing a process memory dump would be possible.",
          "time": null
        }
      ]
    },
    {
      "content": "You can attach to the process non invasive and use !chkimg !chkallimg !chksym commands.\n\nLook for non invasive check box in the attach to process dialog in windbg or use .attach -v \"pid\"\n\nAttaching in a non invasive way minimizes debugger interference and in most cases will not trigger the anti-debugging routines.\n\n",
      "votes": "3",
      "user": "asheeshr",
      "time": "Jun 28, 2013 at 2:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "asheeshr",
          "text": "I was looking at your answers and saw that some of them were missing punctuation. I made some edits but in the future, please try to incorporate these into your answers as it makes them much more easier to read. Thanks!",
          "time": null
        }
      ]
    }
  ]
}