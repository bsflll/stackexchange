{
  "title": "MacOS: Output to console in non-console app",
  "link": "https://reverseengineering.stackexchange.com/questions/13992/macos-output-to-console-in-non-console-app",
  "content": "I'm working with a program that I can't reasonably run from console; it is started by another program with complex calculated and network-gotten arguments, and that program is complicated as well.\n\nTo view output on Windows I can AllocConsole, but it seems there is no such equivalent for Mac. According to Ivan Vučica, \"A console is \"allocated\" by default. You cannot order the OS to open a console though.\" (link).\n\nHis answer gives some good information, but little useful in a reverse-engineering context as I don't have the project.\n\nSo, if I really, really, really want to get a console instead of outputting to a file or creating some GUI, what might I do? If project options allows for enabling / disabling console, presumably there is some flag in the .app. Is it editable? Are there other options?\n\n",
  "votes": "4",
  "answers": 1,
  "views": "4k",
  "tags": [
    "osx"
  ],
  "user": "Lupe",
  "time": "May 23, 2017 at 12:37",
  "comments": [],
  "answers_data": [
    {
      "content": "It really depends what the application you are trying to run is logging to.\n\nIf the application uses NSLog() and other associated Cocoa APIs, you're in luck.  The output should appear in the Apple system log and can be viewed and caputired using Console.app.\n\nIf the application is logging to stdout, things get a little more challenging.  From how to get stdout into Console.app on Stack Overflow:\n\nI'm not sure it would be possible to see these log messages, unless you were to redirect stdout or somehow hook into whatever function that application was using to log and ASL (now deprecated) or os_log.\n\nIf you're lucky, you can run the original OS X bundle application from the command line, and look for any useful logging from there.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "May 23, 2017 at 12:37",
      "is_accepted": true,
      "comments": [
        {
          "user": "Lupe",
          "text": "As a first step, do you know how to make the console appear in the first place? Running it from a console instance isn't an option.",
          "time": null
        },
        {
          "user": "JAL",
          "text": "@Lupe Console.app?  It's under Application -> Utilities -> Console.  And to run an OS X application from the command line you would just reference the path of the binary in the bundle: /Applications/Xcode.app/Contents/MacOS/Xcode.",
          "time": null
        },
        {
          "user": "Lupe",
          "text": "I may be misunderstanding, but while I know how to open Console.app, I can't run my target application from it because it has extremely complicated and network-dependent launch args. It's normally launched by a launcher app.",
          "time": null
        },
        {
          "user": "JAL",
          "text": "You don't run the application from Console.app.  Console.app is just a frontend to Apple System Logger.  Launch your app normally and then check Console.app for any logging info from the application.",
          "time": null
        },
        {
          "user": "Lupe",
          "text": "Ahh, sorry for my ignorance. I had no idea it existed. This is exactly what I wanted, thank you!",
          "time": null
        }
      ]
    }
  ]
}