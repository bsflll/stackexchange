{
  "title": "Using struct objects and constructors in hooked function",
  "link": "https://reverseengineering.stackexchange.com/questions/29429/using-struct-objects-and-constructors-in-hooked-function",
  "content": "Will try to reword the actual question so it is hopefully more descriptive and clear of what I am after:\n\nSo, there is a function main, which I have successfully hooked. The hooked version looks like this:\n\n```\n__int64 __fastcall gamemainHooked(gladius::Game* thisptr, int param_1, char** param_2, char** param_3)\n    {       \n\n        gladius::get().initialize(thisptr, param_1, param_2, param_3);\n\n        gladius::gui::get().guiRun(*(GUI**)(thisptr + 0x28));\n\n        gladius::get().quit(thisptr);\n\n        return gladius::get().gamemain(thisptr, param_1, param_2, param_3);\n    }\n\n```\nNow, see there is a Game* thisptr, which is passed in to that function.\n\nWhen the function is running it populates Game* thisptr instance with\n\n```\nthisptr->GameConstructor (0x0x00000271704c6ec0)\nthisptr->gamemain (0x00000271788a94f0)\nthisptr->initialize(0x000002716d523b90)\nthisptr->quit(0x000002716fdebdd0)\n\n```\nhe original main function and the hooked one have a function called guiRun, which takes thisptr + 0x28 offset and which from the code below is the 5th element of the constructor (Game).\n\n```\nGame * __thiscall gladius::Game::Game(Game *this)\n\n{\n  *(undefined8 *)this = 0;\n  *(undefined8 *)(this + 8) = 0;\n  *(undefined8 *)(this + 0x10) = 0;\n  *(undefined8 *)(this + 0x18) = 0;\n  *(undefined8 *)(this + 0x20) = 0;\n  *(undefined8 *)(this + 0x28) = 0;\n  *(undefined8 *)(this + 0x30) = 0;\n  *(undefined8 *)(this + 0x38) = 0;\n  *(undefined8 *)(this + 0x40) = 0;\n  *(undefined8 *)(this + 0x48) = 0;\n  *(undefined8 *)(this + 0x50) = 0;\n  return this;\n}\n\n```\nNow, what's the best way to reverse this, so that I can have a handle on that 5th element of the Game instance? How should the code look like so that calling guiRun with thisptr+0x28 succeeds.\n\nShould I reverse constructor completely with all of the pointers inside and then point to it?\n\nThe point is that calling guiRun (thisptr + 0x28) doesn't work as thisptr + 0x28 is not pointing to 5th element of the Game* instance...\n\nThe current reversed Game struct looks like this:\n\n```\n namespace gladius {\n        struct Game {\n            //virtual int __thiscall main(gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n    \n            using GameConstructor = Game * (__fastcall*) (Game* thisptr);\n            GameConstructor gameConstructor;\n    \n            using GameMain = __int64(__fastcall*) (gladius::Game* thisptr, int param_1, char** param_2, char** param_3);\n            GameMain gamemain;\n    \n            using Initialize = void(__fastcall*) (gladius::Game* thisptr, int a2, char** a3, char** a4);\n            Initialize initialize;\n    \n            using Quit = void(__fastcall*) (gladius::Game* thisptr);\n            Quit quit;\n        };\n    \n        Game& get();\n    \n    } /\n\n```\nP.S.\nIt seems that guiRun wants to accept *thisptr and not thisptr. But this will mean that the original signature of the function has to be changed. Not sure if that will lead to the hook not working.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "335",
  "tags": [
    "c++",
    "function-hooking",
    "proxy",
    "api-reversing"
  ],
  "user": "Irbis77",
  "time": "Oct 20, 2021 at 12:18",
  "comments": [],
  "answers_data": [
    {
      "content": "This is been resolved here: Link\n\nSo, the solution is to introduce the class structure functionally the same as the original one and then use the original constructor function to populate it.\n\nIf the objects of the other classes, i.e. GUI object as a 5th element of the above structure needs to be initialised, then GUI object has to have a proper class constructor as described in the link.\n\nYou might need a similar structure as described there to initialise any of the objects you want to populate.\n\n",
      "votes": "1",
      "user": "Irbis77",
      "time": "Nov 14, 2021 at 12:54",
      "is_accepted": true,
      "comments": []
    }
  ]
}