{
  "title": "Can Ghidra do backward symbolic execution?",
  "link": "https://reverseengineering.stackexchange.com/questions/21820/can-ghidra-do-backward-symbolic-execution",
  "content": "I am searching for a tool which can do backwards symbolic execution on x86 binaries. More specifically, I would like to give the tool a program state(PC value + registers + memory content) and have it give me a set of inputs to the program that would result in that state. Can Ghidra do this? Or does anyone know if there are any other tools which can?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "893",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "x86",
    "ghidra"
  ],
  "user": "Pythonpsycho1337",
  "time": "Aug 7, 2019 at 7:08",
  "comments": [
    {
      "user": "0xec",
      "text": "I think what you want is rather forward symbolic execution. Angr can do it. You would execute the program from starting state to the goal state while marking the inputs as symbolic. You can add the constraints to the goal state such as the value of this register must be equal to this value.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Looks like you also asked the question over on the Ghidra GitHub page and the answer there is the same. \n\nEssentially, no, Ghidra does not do that. But you should investigate Angr, Klee, Bitblaze, or others.\n\n",
      "votes": "2",
      "user": "Jordan",
      "time": "Aug 6, 2019 at 22:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}