{
  "title": "Decoding a time format",
  "link": "https://reverseengineering.stackexchange.com/questions/31737/decoding-a-time-format",
  "content": "I'm reverse engineering a hardware device which stores time a strange format:\n\nI believe the time is recorded in some internal high-frequency timer ticks, but I don't see any linear correspondence between the words and time values. Any tips?\n\nUPD. I found out that it's Texas Instruments's custom floating-point format for TMS320 DSPs. Described here.\n\n",
  "votes": "5",
  "answers": 1,
  "views": "92",
  "tags": [
    "binary-format"
  ],
  "user": "Canis Lupus",
  "time": "Apr 2, 2023 at 20:26",
  "comments": [],
  "answers_data": [
    {
      "content": "The values appear to be a floating point format similar to single-precision floating-point format.\n\nIf I interpret the first byte as an unbiased exponent and interpret the other bytes (excluding the highest bit) as a fraction, then the value (1 + fraction) × 2exponent appears to be the number of milliseconds:\n\n\n\nEquivalently, in the following textual table, the first byte e is the exponent, the other bytes n form the numerator of the fraction, and the denominator of the fraction is 223. The value (1 + n/223) × 2e is the number of milliseconds:\n\n",
      "votes": "4",
      "user": "Bavi_H",
      "time": "Apr 2, 2023 at 10:02",
      "is_accepted": true,
      "comments": []
    }
  ]
}