{
  "title": "GDB MI output vs. stdout",
  "link": "https://reverseengineering.stackexchange.com/questions/19652/gdb-mi-output-vs-stdout",
  "content": "I am using GDBs machine interface (mi) to write some simple tracers/loggers.\n\nNow I ran into the problem of telling apart GDB output from text the target-program itself wrote to stdout.\n\nIf I look into the documentation here: https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html\n\nit says\n\nThis is not what I observe, however. Consider this example session of running ls like so:\n\n```\ngdb -i mi ls\nstart\n\n```\nwhich gives this output:\n\n```\n...\n...\n~\"[Thread debugging using libthread_db enabled]  \n\"\nfile1.jpg  file2.jpg  file3.jpg  dir1  dir2   <---(!!!)\n~\"[Inferior 1 (process 22233) exited normally]  \n\"\n=thread-exited,id=\"1\",group-id=\"i1\"\n=thread-group-exited,id=\"i1\",exit-code=\"0\"\n*stopped,reason=\"exited-normally\"\n(gdb) \n\n```\nAs you can see, the output of the ls command was just randomly dumped into the console. Great.\n\nHow can I parse this?\n\nThanks! \n\ngdb version is 8.1\n\n",
  "votes": "0",
  "answers": 1,
  "views": "609",
  "tags": [
    "gdb",
    "debuggers"
  ],
  "user": "bernd feinman",
  "time": "Oct 17, 2018 at 15:56",
  "comments": [],
  "answers_data": [
    {
      "content": "According to this documentation page you can redirect your program stdout where-ever you want by using run>out_file_name . This will not solve the parsing problem, but should avoid it. Using other tty then gdb's is also described there.\n\nIn addition there is a simpler way to do it, with output redirection (see the first line of gdb output below). I checked it with simple program that prints to different strings to stderr and stdout :\n\n```\n#include <stdio.h>\n\nint main(int argc, char ** argv)\n{\n    printf (\"  \ntest  \n\");\n    fprintf (stderr, \"stderr  \n\");\n    return 0;\n}\n\n```\nand here is my small debugging session results:\n\n```\n(gdb) set args 1>/home/ubuntu/out.txt 2> /home/ubuntu/err.txt\n(gdb) b main\nBreakpoint 1 at 0x4005b5: file ./gt.c, line 5.\n(gdb) run\nStarting program: /home/ubuntu/unittest/gt 1>/home/ubuntu/out.txt 2> /home/ubuntu/err.txt\n\nBreakpoint 1, main (argc=1, argv=0x7fffffffe1f8) at ./gt.c:5\n5       printf (\"  \ntest  \n\");\n(gdb) c\nContinuing.\n[Inferior 1 (process 8659) exited normally]\n(gdb) shell cat /home/ubuntu/out.txt\n\ntest\n(gdb) shell cat /home/ubuntu/err.txt\nstderr\n(gdb)\n\n```\n",
      "votes": "1",
      "user": "w s",
      "time": "Oct 18, 2018 at 11:09",
      "is_accepted": false,
      "comments": []
    }
  ]
}