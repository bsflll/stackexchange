{
  "title": "API Hiding Issue",
  "link": "https://reverseengineering.stackexchange.com/questions/22639/api-hiding-issue",
  "content": "I'm trying to analyze a malware which is hiding API names. When I open it with CFF Explorer, except a few API like GetProcAddress, nothing appears. Basically, I know how API hiding works. I set a breakpoint on GetProcAddress() and I ran it. Then I saw decoded API names like OpenProcess, CreateMutex etc..\n\nBut I could not find its location in malware I'm analyzing. So, I cannot identify API parameters.\n\nHow can I do this?\n\n\n\n",
  "votes": "2",
  "answers": 0,
  "views": "102",
  "tags": [
    "debugging",
    "malware",
    "obfuscation"
  ],
  "user": "badbabo",
  "time": "Dec 6, 2019 at 9:17",
  "comments": [
    {
      "user": "Tobias",
      "text": "I'm not sure what \"its location in malware\" is refering to. Do you mean that you cannot find the IAT that gets constructed? Posting the disassembly in a code-tag, instead of a screenshot (parts are missing) would probably help too.",
      "time": null
    },
    {
      "user": "0xC0000022L",
      "text": "Hi and welcome to RE.SE! This is a rather unspecific question, really. Loads of techniques exist to obfuscate the use of APIs. Sometimes certain functions are simply kept in the import table to make sure the respective DLL gets loaded (I think some packers also do this) and then you could have function names being identified by some checksum (\"hash\") being compared to those computed from the export table of a loaded DLL. Similarly the name of the DLL might be disguised. Best would be to look at the site of the GetProcAddress call and check call stack and so on to identify the method ...",
      "time": null
    }
  ],
  "answers_data": []
}