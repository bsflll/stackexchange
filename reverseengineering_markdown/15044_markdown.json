{
  "title": "How does new operator internally work in C++?",
  "link": "https://reverseengineering.stackexchange.com/questions/15044/how-does-new-operator-internally-work-in-c",
  "content": "The articles explaining the internals of malloc and free in glibc are abundant in number. However, I'd like to know how dynamic memory management works in C++, specifically the nitty gritty of new and delete operators. My interest is in the internal data structure maintained as well as the allocation and de-allocation algorithms. What are a few good resources for the same?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "3k",
  "tags": [
    "c++",
    "memory"
  ],
  "user": "sherlock",
  "time": "Mar 29, 2017 at 8:29",
  "comments": [],
  "answers_data": [
    {
      "content": "This is somewhat compiler-specific but in most cases new and delete are basically thin wrappers around malloc and free (regarding the allocation of memory itself). Some additional C++ specifics regarding new expressions and the sequence of construction/destructions of classes and their members are described in the C++ standard (a nice summary is available at cppreference). I have described some of the details pertaining to the MSVC++ implementation here\n\nA few additional wrinkles:\n\n",
      "votes": "8",
      "user": "Igor Skochinsky",
      "time": "Mar 29, 2017 at 8:33",
      "is_accepted": false,
      "comments": []
    }
  ]
}