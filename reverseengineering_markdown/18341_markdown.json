{
  "title": "objdump: can't disassemble for architecture UNKNOWN!",
  "link": "https://reverseengineering.stackexchange.com/questions/18341/objdump-cant-disassemble-for-architecture-unknown",
  "content": "I am trying to use objdump -d fileName on a s-rec file and it returns unknown architecture, however it recognizes fileName: file format srec\n\nI looked at objdump --help and under supported targets srec and symbolsrec is listed. \n\nI have tried\n\nobjdump -d -M srec myFile\n\nobjdump -d -m srec myFile\n\nWhat is the best way to tackle this? Alternatives?\n\n",
  "votes": "6",
  "answers": 2,
  "views": "32k",
  "tags": [
    "disassembly"
  ],
  "user": "0siris",
  "time": "May 23, 2018 at 22:00",
  "comments": [],
  "answers_data": [
    {
      "content": "SREC (aka S-Record) format is similar to raw binary - it contains just the byte values but, unlike ELF, no metadata about the CPU or OS used.\n\nIf you know the CPU used, you can pass it to objdump with the -m switch, e.g.:\n\nobjdump -m arm -D file.srec\n\nNormally objdump should recognize the format automatically but you can also specify it explicitly with -b srec\n\nCommon CPUs used with these files include former Motorola series such as 6800/6812 (and derived Freescale's HC12), 68K/Coldfire but sometimes also others, e.g. 8051\n\nUse objdump -i to list the processors and file formats supported by your build . You may need to make a custom binutils build to support your target CPU.\n\n",
      "votes": "5",
      "user": "Igor Skochinsky",
      "time": "May 23, 2018 at 19:05",
      "is_accepted": true,
      "comments": [
        {
          "user": "0siris",
          "text": "Thank you very much for your time, as a matter of fact my target is the Motorola series. Using objdump -i I don't see it listed, so I might have to go the custom build path...",
          "time": null
        },
        {
          "user": "kuch3n",
          "text": "You're were using a .srec file not the binary file itself. Either use the binary or use suggested -b srec argument: Specify that the object-code format for the object files is bfdname. This option may not be necessary; objdump can automatically recognize many formats.   In other words, you specify the format of the binary not the targeted architecture. S-Record or srec format: de.wikipedia.org/wiki/S-Record",
          "time": null
        }
      ]
    },
    {
      "content": "In case this ends up being useful for anyone else, I had the same exact error, but it was in a cross-compilation project. My problem was that my CMake toolchain was erroneously setting CMAKE_OBJDUMP to /usr/bin/objdump instead of /usr/bin/arm-none-eabi-objdump. I fixed this by forcing my toolchain.cmake file to use /usr/bin/arm-none-eabi-objdump and /usr/bin/arm-none-eabi-objcopy, by adding these lines to my toolchain.cmake BEFORE any calls to find_program(...):\n\n```\nunset(CMAKE_OBJCOPY CACHE)\nunset(CMAKE_OBJDUMP CACHE)\n\n```\nMy CMake version is 3.16.3. I submitted a bug report for this here: https://gitlab.kitware.com/cmake/cmake/-/issues/20787\n\n",
      "votes": "1",
      "user": "Mark Betters",
      "time": "Jun 3, 2020 at 21:49",
      "is_accepted": false,
      "comments": []
    }
  ]
}