{
  "title": "Using multilevel pointers obtained via cheat engine in own application",
  "link": "https://reverseengineering.stackexchange.com/questions/11419/using-multilevel-pointers-obtained-via-cheat-engine-in-own-application",
  "content": "So I have finished step 8 of the Cheat Engine tutorial and obtained a static address with corresponding offsets to manipulate a value which should be changed to progress in the tutorial. The expression I obtained looks like this\n\n```\n[[[[[00645390]+C]+14]+0]+18]\n\n```\nI want to go a step further and write a simple (either C++ or C#) program which will access the value stored at this spot and both read from the memory and write to it. What I am not sure about yet is how to access this particularly. I guess it isn't as easy as directly accessing the address 00645390 in memory - do I have to add it to the base address of the application itself? If yes, how may I acquire the address to start working through all those pointers?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "715",
  "tags": [
    "windows",
    "debugging",
    "tools"
  ],
  "user": "Christian Ivicevic",
  "time": "Nov 27, 2015 at 19:35",
  "comments": [],
  "answers_data": [
    {
      "content": "you need OpenProcess()->ReadprocessMemory() and or QueryVirtualEx()\n\nyou can use lkd or livekd to achieve the result \n\n```\nlivekd.exe\nkd> !process 0 0\n................\nPROCESS 89d1d328  SessionId: 0  Cid: 0238    Peb: 7ffde000  ParentCid: 075c\n    DirBase: 14980320  ObjectTable: e14106f0  HandleCount:  23.\n    Image: Tutorial-i386.exe\n........................\nkd> .process /p /r 89d1d328\nImplicit process is now 89d1d328\nLoading User Symbols\n.................\nkd> ? poi(poi(poi(poi(poi(645390)+c)+14)+0)+18)\nEvaluate expression: 1666 = 00000682]\n\n```\n\n\nhere is a sample code that employs dbgeng functions from windbg sdk\nerror checks dbg prints removed for brevity\nassumes the module address space is not randomised / rebased  (so uses 645390 as it is )\nelse you may need to find the module base from Ce calculate RVA from address (645390 -modbase)\nin your code find the modbase and add the calculated rva to read the pointer\nif modbase in your code was 400000 and rva was 1390 use 401390 instead of 645390 \n\n```\n#include <stdio.h>\n#include <engextcpp.hpp>\nint __cdecl main( void  ){\n    IDebugClient*     g_Client      = NULL;\n    IDebugControl*    g_Control     = NULL;\n    IDebugSymbols*    g_Symbols     = NULL;\n    IDebugDataSpaces* g_Data        = NULL;\n    ULONG             Pid           = NULL;\n    ULONG             bytesread     = NULL;\n    ULONG             ptr           = NULL;\n    DebugCreate( __uuidof(IDebugClient), (void**)&g_Client );\n    g_Client->QueryInterface( __uuidof(IDebugControl), (void**)&g_Control );\n    g_Client->QueryInterface( __uuidof(IDebugSymbols), (void**)&g_Symbols );\n    g_Client->QueryInterface( __uuidof(IDebugDataSpaces), (void**)&g_Data );\n    g_Client->GetRunningProcessSystemIdByExecutableName(\n        0,\"Tutorial-i386.exe\",DEBUG_GET_PROC_ONLY_MATCH,&Pid);\n    g_Client->AttachProcess(0,Pid,DEBUG_ATTACH_NONINVASIVE);\n    g_Control->WaitForEvent( 0, INFINITE );\n    g_Data->ReadVirtualUncached(0x645390,&ptr,sizeof(ptr),&bytesread);\n    g_Data->ReadVirtualUncached((ptr+0xc),&ptr,sizeof(ptr),&bytesread);\n    g_Data->ReadVirtualUncached((ptr+0x14),&ptr,sizeof(ptr),&bytesread);\n    g_Data->ReadVirtualUncached((ptr+0x0),&ptr,sizeof(ptr),&bytesread);\n    g_Data->ReadVirtualUncached((ptr+0x18),&ptr,sizeof(ptr),&bytesread);\n    printf(\"%-15s%d  \n\",\"5th lvl ptr =\", ptr);\n    g_Client->DetachProcesses();\n    return 0;\n}\n\n```\n\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Nov 28, 2015 at 6:55",
      "is_accepted": true,
      "comments": []
    }
  ]
}