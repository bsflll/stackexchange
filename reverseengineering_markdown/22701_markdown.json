{
  "title": "indirect return value address",
  "link": "https://reverseengineering.stackexchange.com/questions/22701/indirect-return-value-address",
  "content": "I have usercall with calling convention I do not fully understand, it returns std::string but IDA recognize it as void.\n\nI've noticed that every calle reads from x8/w8 afterwards, from wikipedia;\n\nCan someone explain \"indirect return value address\" ? \n\nFrom\nhttps://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=vs-2019\n\nUpdate 2:\n\nFrom ARM docs\n\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "c++",
    "calling-conventions",
    "arm64"
  ],
  "user": "James W.",
  "time": "Dec 9, 2019 at 19:24",
  "comments": [],
  "answers_data": [
    {
      "content": "From https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md\n\nSo it seems x8 is used to pass an address at which the return value will land if it's too big, rather than the return value directly, hence indirect I suppose.\n\nI couldn't find official documentation as the ARM page was barely loading for me.\n\n",
      "votes": "2",
      "user": "Johann Aydinbas",
      "time": "Dec 9, 2019 at 15:27",
      "is_accepted": true,
      "comments": [
        {
          "user": "James W.",
          "text": "why not return a pointer in x0?",
          "time": null
        },
        {
          "user": "Johann Aydinbas",
          "text": "I have no idea, it's a convention after all. If I had to make up a reason, I'd say this allows some performance optimization. If you dedicate one register as a register that's likely going to contain an address, you could physically optimize the wiring so fetching data from memory pointed at by x8 is fast. You don't want to do that for all of them, so you pick one register with special treatment and make using it as a memory-pointing register a convention.",
          "time": null
        }
      ]
    }
  ]
}