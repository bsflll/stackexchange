{
  "title": "Record all calls to specific function? Olly/x64dbg",
  "link": "https://reverseengineering.stackexchange.com/questions/17271/record-all-calls-to-specific-function-olly-x64dbg",
  "content": "I need to find values of arguments that are passed to specific function.\n\nNormally I set INT3 breakpoint and check registers and the stack whenever it is reached. But there is too many calls to this specific function to do it manually, so I'm trying to find some automatic solution.\n\nAny suggestions?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "ollydbg",
    "x64dbg"
  ],
  "user": "Zax Ftw",
  "time": "Jan 24, 2018 at 11:13",
  "comments": [],
  "answers_data": [
    {
      "content": "ollydbg v 2.01 \n\nollydbg calc.exe -> ctrl+g ->address or symbol->follow ->shift+f4 ->pause never -> log arguments ->always -> f9 and see the log window\n\n\n\nif you are on windbg you simply do \n\n```\n0:003> bp USER32!TranslateMessage \"dt ole32!tagMSG poi(@esp+4);kb 2;.echo ========;gc\"\nbreakpoint 0 redefined\n0:003> g\n   +0x000 hwnd             : (null) \n   +0x004 message          : 0x113\n   +0x008 wParam           : 0x3341\n   +0x00c lParam           : 0n1954748594\n   +0x010 time             : 0x147656d\n   +0x014 pt               : tagPOINT\n # ChildEBP RetAddr  Args to Child              \n00 0017eee0 002b1c9f 0017efbc 00304a68 004f2b44 USER32!TranslateMessage\n01 0017fc50 002c219a 002b0000 00000000 004f2b44 calc!WinMain+0x85b\n========\n   +0x000 hwnd             : 0x000e0212 HWND__\n   +0x004 message          : 0xf\n   +0x008 wParam           : 0\n   +0x00c lParam           : 0n0\n   +0x010 time             : 0x1477998\n   +0x014 pt               : tagPOINT\n # ChildEBP RetAddr  Args to Child              \n00 0017eee0 002b1c9f 0017efbc 00304a68 004f2b44 USER32!TranslateMessage\n01 0017fc50 002c219a 002b0000 00000000 004f2b44 calc!WinMain+0x85b\n========\n   +0x000 hwnd             : 0x001d017e HWND__\n   +0x004 message          : 0xf\n   +0x008 wParam           : 0\n   +0x00c lParam           : 0n0\n   +0x010 time             : 0x14779a8\n   +0x014 pt               : tagPOINT\n # ChildEBP RetAddr  Args to Child              \n00 0017eee0 002b1c9f 0017efbc 00304a68 004f2b44 USER32!TranslateMessage\n01 0017fc50 002c219a 002b0000 00000000 004f2b44 calc!WinMain+0x85b\n========\n\n```\nedit \n\nx64 dbg also has an edit breakpoint when you toggle an f2 bp but i dont know how you can coax it to decode teh arguments \n\nwith x64 dbg you set an f2 breakpoint from the gui then rightclick edit breakpoint \n\nand set the condition to break as 0 (never break)\nand in the log text edit box input this formatted string \n\nand see the results in log window\n\nlike below\n\n```\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: 118\nmsg *:FEDB0;hwnd=:160252;msg =: F\nmsg *:FEDB0;hwnd=:3D0458;msg =: F\nmsg *:FEDB0;hwnd=:1908B8;msg =: F\nmsg *:FEDB0;hwnd=:8038E;msg =: F\n\n```\n\n\n",
      "votes": "2",
      "user": "blabb",
      "time": "Jan 24, 2018 at 12:22",
      "is_accepted": true,
      "comments": [
        {
          "user": "Zax Ftw",
          "text": "Thanks, thats exactly what I needed! I did it with OllyDbg, but had to change from arguments \"guessing\" to expressions because otherwise it wouldn't guess _thiscall and value of ECX.   Unfortunately x64dbg gives me BREAKPOINT_EXCEPTION after too many calls then I can't even resume with exception swallowing/ignoring option. Any idea why it happens?",
          "time": null
        },
        {
          "user": "mrexodia",
          "text": "It’s probably happening because of a race condition. A similar bug is present in all debuggers but it’s very possible you will never see it again :)",
          "time": null
        },
        {
          "user": "Zax Ftw",
          "text": "@mrexodia unfortunately it happened multiple times in row, had to restart the app and x96dbg because it wouldn't let me resume otherwise. There was like 15000 calls of this function in less than minute in OllyDbg log file.",
          "time": null
        }
      ]
    },
    {
      "content": "When there are too many calls to handle I normally use pykd to trace. As an example\n\n```\nclass ExceptionHandler(pykd.eventHandler):\n    def __init__(self):\n        pykd.eventHandler.__init__(self)\n\n    def onBreakpoint(self, id):\n        esp = pykd.reg(\"esp\")\n        eax = pykd.reg(\"eax\")\n        out = \"\"\n        if id == 0:\n            out += \"RtlAllocateHeap (\"\n            out += hex(pykd.ptrPtr(esp + 0x4)) + \" , \"\n            out += hex(pykd.ptrMWord(esp + 0x8)) + \" , \"\n            out += hex(pykd.ptrPtr(esp + 0xc)) + \") \"\n            out += \" = \"\n            out += hex(eax)\n        print out\n\npykd.initialize()\npykd.handler = ExceptionHandler()\npykd.startProcess(\"test.exe\")\nalloc_module = pykd.module(\"ntdll\")\nalloc_module.reload()\nb0 = pykd.setBp(alloc_module.offset('RtlAllocateHeap')+0xe6, callback)\npykd.go()\npykd.killAllProcesses()\n\n```\nThis will give you a neat trace of all the alloc calls made. A small script I wrote to manage this easily.\n\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Jan 24, 2018 at 11:53",
      "is_accepted": false,
      "comments": []
    }
  ]
}