{
  "title": "Why does an executable still run despite changes to checksum, or changes to data section without new checksum?",
  "link": "https://reverseengineering.stackexchange.com/questions/25266/why-does-an-executable-still-run-despite-changes-to-checksum-or-changes-to-data",
  "content": "I have a \"Hello World\" console app compiled with Flat Assembler. The size of the executable is 2048 bytes and the checksum is 0x3797.\n\nQuestions:\n\nDoes it matter if I make changes to the data section and minor change to code section of the executable while maintaining the same checksum?\n\nNot really changing the opcode, just inserting different input.Length (length of null-terminated text string in data section)\n\n```\n     push 0xfffffff5 // - 11\n     call DWORD PTR ds:0x40304c // .idata [GetStdHandle]\n     push 0x0\n     push 0x401014\n     push [input.Length]\n     push 0x401000 // .data\n     push eax\n     call DWORD PTR ds:0x403050 // .idata [WriteConsole]\n     push 0x0\n     call DWORD PTR ds:0x0403048 // .idata [ExitProcess]\n\n```\nWhy does it still run even though I use different checksum?\nFor example, it still run even if I change the checksum to 0x995A or 0x5A99.\n\nI use ImageHlp.dll to compute the checksum as summarized below:\n\n```\nint HeaderSum = 0;\nint CheckSum = 0;\nIntPtr ptrHeaderSum=Marshal.AllocHGlobal(sizeof(int));\nMarshal.WriteInt32(ptrHeaderSum, HeaderSum);\nIntPtr ptrCheckSum = Marshal.AllocHGlobal(sizeof(int));\nMarshal.WriteInt32(ptrCheckSum, CheckSum);\nUInt32 status= ImageHlp.MapFileAndCheckSumA(@\"D:\\19_02_21.exe\", ptrHeaderSum, ptrCheckSum);\n\nConsole.WriteLine(status);\nCheckSum = Marshal.ReadInt32(ptrCheckSum);\nConsole.WriteLine(CheckSum);\n\nMarshal.FreeHGlobal(ptrHeaderSum);\nMarshal.FreeHGlobal(ptrCheckSum);\nConsole.ReadLine();\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "253",
  "tags": [
    "windows",
    "pe",
    "c#",
    "reassembly"
  ],
  "user": null,
  "time": "Jun 10, 2020 at 14:42",
  "comments": [],
  "answers_data": [
    {
      "content": "The PE checksum is only checked for drivers by the kernel, for the user-mode binaries it's optional. As mentioned in the doc:\n\nThe linker option is /RELEASE:\n\n",
      "votes": "0",
      "user": "Igor Skochinsky",
      "time": "Jun 10, 2020 at 16:15",
      "is_accepted": true,
      "comments": []
    }
  ]
}