{
  "title": "How to debug binary which doesn't have executable flags?",
  "link": "https://reverseengineering.stackexchange.com/questions/9582/how-to-debug-binary-which-doesnt-have-executable-flags",
  "content": "I'm trying to debug the binary which is not executable.\n\nAs sample I'm using /bin/true with 644 permission:\n\n```\ninstall -m 644 /bin/true .\n\n```\nand I'm trying to run it as:\n\n```\n$ lldb true\n(lldb) target create \"true\"\nCurrent executable set to 'true' (x86_64).\n(lldb) process launch\n\n```\nBut I've got the following error:\n\nIs it something possible using lldb without giving the executable flag to the binary?\n\n",
  "votes": "1",
  "answers": 2,
  "views": "359",
  "tags": [
    "linux",
    "lldb"
  ],
  "user": "kenorb",
  "time": "Aug 8, 2015 at 17:53",
  "comments": [],
  "answers_data": [
    {
      "content": "No. lldb wants to run the program using a combination of fork and exec, then control the progam with ptrace. But the kernel will refuse to exec the program unless it has the correct x bit (your user/group ids define which one is the correct one) set. You can set the x bit for yourself, the owner, only (if you want to prevent others from executing the binary); or you can set the x bit, start the process, and remove the x bit again (if you want to prevent yourself from running it accidentially). But to start a process that runs the binary, you need the x bit.\n\nIf you really really want to execute the binary's code without setting it executable, you could probably write a program to read its header, mmap the sections you need, read the binary into those sections, possibly fix up relocations, and jump to the entry point. But you'll have a long, arduous way in front of you to get this right, and it probably won't be possible to get llvm recognize any symbols in the binary. So while doing this might be a theoretical possibility, there's really no point in trying.\n\n",
      "votes": "2",
      "user": "Guntram Blohm",
      "time": "Aug 8, 2015 at 14:23",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "As for workaround (per this post), on Linux the non-executable binary can be invoked by dynamic linker/loader as below:\n\n```\nlldb -- /lib64/ld-linux-x86-64.so.2 foo_binary\n\n```\nand for 32-bit version use ld-linux.so found in /lib instead.\n\n",
      "votes": "2",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:37",
      "is_accepted": false,
      "comments": []
    }
  ]
}