{
  "title": "Virtual functions call asm",
  "link": "https://reverseengineering.stackexchange.com/questions/26630/virtual-functions-call-asm",
  "content": "It seems to be a virtual function call. How would this code look in a high-level language like C ++?\n\n```\n.text:0053A745 loc_53A745:                             ; CODE XREF: sub_53A690+CEj\n.text:0053A745                 mov     ecx, [edi+esi*4]\n.text:0053A748                 test    ecx, ecx\n.text:0053A74A                 jz      short loc_53A751\n.text:0053A74C                 mov     edx, [ecx]\n.text:0053A74E                 call    dword ptr [edx+4]\n.text:0053A751\n.text:0053A751 loc_53A751:                             ; CODE XREF: sub_53A690+BAj\n.text:0053A751                 mov     eax, dword_83C020\n.text:0053A756                 test    eax, eax\n.text:0053A758                 jnz     short loc_53A78D\n.text:0053A75A                 inc     esi\n.text:0053A75B                 cmp     esi, 25h\n.text:0053A75E                 jl      short loc_53A745\n\n\n```\n",
  "votes": "0",
  "answers": 1,
  "views": "296",
  "tags": [
    "disassemblers"
  ],
  "user": "black4joss",
  "time": "Dec 27, 2020 at 9:06",
  "comments": [],
  "answers_data": [
    {
      "content": "This could be a loop over 37 objects with virtual functions, the simplified version could look similar to this (written in C++)\n\n```\n#include <iostream>\n\nclass Animal\n{\npublic:\n    virtual void makeSound() = 0;\n    virtual char* getColor() = 0;\n    virtual ~Animal() = 0;\n};\n\nclass Cat : public Animal\n{\npublic:\n    Cat();\n    void makeSound() { std::cout << \"meow\" << std::endl; }\n    char* getColor() { return \"red\"; };\n    ~Cat() {};\n};\n\nAnimal* animals[] = {new Cat(), new Cat(), new Cat()};\nint main()\n{\n    for (int i = 0; i < 3; i++)\n        if (animals[i])\n            std::cout << animals[i]->getColor();\n\n    for (int i = 0; i < 3; i++)\n        delete animals[i];\n    return 0;\n}\n\n```\nWith the core lines:\n\n```\nif (animals[i])\n  std::cout << animals[i]->getColor();\n\n```\nCompiled to this by clang 8.0.0:\n\n```\ncmp     dword ptr [animals + eax*4], 0\nje      .LBB2_4\nmov     eax, dword ptr [ebp - 8]\nmov     eax, dword ptr [animals + eax*4]\nmov     ecx, dword ptr [eax]\nmov     dword ptr [esp], eax\ncall    dword ptr [ecx + 4]\n\n```\nAdditionally your code seems to follow Microsoft __thiscall calling convention, as the this pointer is stored in ecx register.\n\n",
      "votes": "3",
      "user": "morsisko",
      "time": "Dec 27, 2020 at 17:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "Paweł Łukasik",
          "text": "There's 25h so 37 objects.",
          "time": null
        },
        {
          "user": "morsisko",
          "text": "Thanks, I've edited my post",
          "time": null
        }
      ]
    }
  ]
}