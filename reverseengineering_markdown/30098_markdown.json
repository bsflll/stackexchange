{
  "title": "ShellCode not running as expected - showing segmentation fault core dump",
  "link": "https://reverseengineering.stackexchange.com/questions/30098/shellcode-not-running-as-expected-showing-segmentation-fault-core-dump",
  "content": "I  have already run this command. But my shellcode is not working for me:\n\n```\ngcc -fno-stack-protector -z execstack test.c -o test\n./test\n\n```\nHere is my shellcode\n\n```\n#include <stdio.h>\n \nunsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n \nint main(int argc, char **argv) {   int foo_value = 0;\n \nint (*foo)() = (int(*)())code;   foo_value = foo();\n \nprintf(\"%d  \n\", foo_value); }\n\n```\nHere is my operating system:\n\n```\nuname -a\nLinux AAAA 5.13.0-30-generic #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n\n```\nI have already identified the location using the following command:\n\n```\ngcc -c -O3 ex.c\nobjdump ex.o -d\n\n```\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "shellcode"
  ],
  "user": "Alvin567",
  "time": "Mar 7, 2022 at 0:29",
  "comments": [
    {
      "user": "Michael Karcher",
      "text": "You have code as a global variable. Global data is not executable (by default). Your GCC parameter only disables the execution prevention of stack contents (local, non-static variables), but not of global variables.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The argument -z execstack only allows stack to execute code, but the code is a global variable, which is not on stack, so you can do some simple changes to make your code work.\n\nFor example,\n\n```\n#include <stdio.h>\n\nint main(int argc, char **argv) {\n    int foo_value = 0;\n    unsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n    int (*foo)() = (int(*)())code;\n    foo_value = foo();\n    printf(\"%d  \n\", foo_value);\n}\n\n```\n",
      "votes": "3",
      "user": "zeze",
      "time": "Mar 7, 2022 at 16:38",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "A simple HACK for gcc would be to make the char array as const That makes the bytes go in .rodata which is usally mapped within the same pages as .text and has the same rx permission.\n\nThis worked for me without any additional flag.\n\n```\n[/tmp] cat x.c\n#include <stdio.h>\n\nconst unsigned char code[] = \"\\xb8\\x0a\\x00\\x00\\x00\\xc3\";\n\nint main(int argc, char **argv) {\n  int foo_value = 0;\n\n  int(*foo)() = (int (*) ())&code;\n  foo_value = foo();\n\n  printf(\"%d  \n\", foo_value);\n}\n[/tmp] make x\ncc     x.c   -o x\n[/tmp] ./x\n10\n\n```\n",
      "votes": "2",
      "user": "sudhackar",
      "time": "Mar 4, 2022 at 8:14",
      "is_accepted": false,
      "comments": [
        {
          "user": "pmor",
          "text": "FYI: in my case it leads to Segmentation fault when using -fno-stack-protector -z execstack. GCC 9.4.0, Ubuntu 20.04.5 LTS. Any ideas? The code is in .rodata.",
          "time": null
        }
      ]
    }
  ]
}