{
  "title": "What are the sections of a x86 linux binary?",
  "link": "https://reverseengineering.stackexchange.com/questions/4149/what-are-the-sections-of-a-x86-linux-binary",
  "content": "I want to learn reverse engineering so I was starting to try compiling simple (to start with) C programs and then reading the disassembly.\n\nThe following file\n\n```\nint main(void) {\n  return 0;\n}\n\n```\ncompiled with gcc then disassembled with objdump -d ends up creating 172 lines of output. I don't understand why there is so much output.\n\nWhat is the meaning of the different sections:\n\n```\n0000000000400370 <_init>:\n0000000000400390 <__libc_start_main@plt-0x10>:\n00000000004003a0 <__libc_start_main@plt>:\n00000000004003b0 <__gmon_start__@plt>:\n00000000004003c0 <_start>:\n00000000004003f0 <deregister_tm_clones>:\n0000000000400420 <register_tm_clones>:\n0000000000400460 <__do_global_dtors_aux>:\n0000000000400480 <frame_dummy>:\n00000000004004ad <main>:\n00000000004004c0 <__libc_csu_init>:\n0000000000400530 <__libc_csu_fini>:\n0000000000400534 <_fini>:\n\n```\nOf course I have been reading about the calling convention and opcodes so I can see how the  section corresponds to the C code.\n\n",
  "votes": "5",
  "answers": 2,
  "views": "2k",
  "tags": [
    "assembly",
    "x86",
    "objdump"
  ],
  "user": "emberfang",
  "time": "Apr 26, 2014 at 0:21",
  "comments": [],
  "answers_data": [
    {
      "content": "I see you're mixing up sections with functions.\n\nWhat you have provided in your question are functions necessary to an ELF binary to execute. For example, the _start function is usually the entry point of a binary and it will probably call the main function at some point. You can get the address of the entry of a binary using readelf -h on the binary file you have.\n\nAbout the output, though your program is \"empty\" it was still compiled & linked successfully - for that it is not erroneous - into an executable ELF. This document provides everything you need to know about how an ELF binary is structured & how to manipulate it : ELF Format (PDF).\n\nNow if you want to retrieve section information in a binary file the readelf function can again help with that, you just have to call it with the -S and the target binary file (readelf -S prog).\n\nSince you're just starting to learn, I recommend you checking the binutils (readelf, objdump, ...) and their related documentation and start playing with simple programs before moving to crackmes and more advanced or obfuscated binary files.\n\n",
      "votes": "6",
      "user": "perror",
      "time": "Apr 26, 2014 at 11:39",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "Those are not sections, those are different functions in your binary. These are called in various times during process' lifetime.\n\nWhat you are interested in is function main. objdump -d disassembles the whole binary, but if you are trying to understand what's going on in main only, at this point , you don't have to look at the rest of those. \n\nWhen you use gcc to compile a binary into an executable, linker is called.\nIf you don't want the linker to be called, to generate an object file, use gcc -c. Here's the result of objdump -d test.o:\n\n```\n$ objdump -d test.o \n\ntest.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 <main>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   b8 00 00 00 00          mov    $0x0,%eax\n   9:   5d                      pop    %rbp\n   a:   c3                      retq \n\n```\nHere, since the code isn't linked , you only see your function. \n\n",
      "votes": "3",
      "user": "0xea",
      "time": "Apr 26, 2014 at 10:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}