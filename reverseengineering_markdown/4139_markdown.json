{
  "title": "C What kind of sorting algorithm is this?",
  "link": "https://reverseengineering.stackexchange.com/questions/4139/c-what-kind-of-sorting-algorithm-is-this",
  "content": "I decompiled a application and found what seems like some kind of sorting algorithm, I was told it's not even a sorting algorithm, but a binary search on stackoverflow\n\nI just don't know which one it is can someone let me know it's actual name?\n\nwhatever is passed into the strcmpi wrapper is in some area's divided by 2 who knows some crazy stuff.. I thought it was qsort (quicksort) since it's a standard library for C. But i'm not sure.\n\n```\nint __cdecl SomeKindOfSortAlgorithm(int a1, int a2, int a3, signed int a4, int (__cdecl *a5)(unsigned int, unsigned int), int a6)\n{\n  int v6; // esi@1\n  int result; // eax@1\n  int v8; // ebp@2\n  int v9; // edi@2\n\n  v6 = 0;\n  result = 0;\n  *(unsigned int *)a6 = 0;\n  if ( !a3 )\n    return result;\n  v8 = a2;\n  v9 = a2 + a4 * (a3 - 1);\n  if ( a2 > (unsigned int)v9 )\n  {\nLABEL_9:\n    if ( result > 0 )\n      v6 += a4;\n    return v6;\n  }\n  while ( 1 )\n  {\n    v6 = v8 + a4 * (v9 - v8) / a4 / 2;\n    result = a5(a1, v8 + a4 * (v9 - v8) / a4 / 2);\n    if ( result < 0 )\n    {\n      if ( v6 == a2 )\n        goto LABEL_9;\n      v9 = v6 - a4;\n      goto LABEL_8;\n    }\n    if ( result <= 0 )\n      break;\n    v8 = v6 + a4;\nLABEL_8:\n    if ( v8 > (unsigned int)v9 )\n      goto LABEL_9;\n  }\n  *(unsigned int *)a6 = 1;\n  if ( v6 == a2 )\n  {\nLABEL_15:\n    result = a2;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v6 -= a4;\n      if ( a5(a1, v6) )\n        break;\n      if ( v6 == a2 )\n        goto LABEL_15;\n    }\n    result = v6 + a4;\n  }\n  return result;\n}\n\n```\nHere is the compare function\n\n```\nint __cdecl StrCmpiWrapper(const char *Str1, const char **a2)\n{\n  return _strcmpi(Str1, *a2);\n}\n\n```\nHere is how you use it.\n\n```\n  int ChatMsgBuffer;\n  int v4; // eax@1\n  int v5; // eax@5\n  int v8; // [sp+10h] [bp-4h]@1\n\n  v4 = SomeKindOfSortAlgorithm(\n         ChatMsgBuffer,\n         textFile->Pointer,\n         textFile->TotalElements,\n         4,\n         (int (__cdecl *)(unsigned int, unsigned int))StrCmpiWrapper,\n         (int)&v8);\n\n  if ( !v8 && v4 )\n  {\n      //Allocate memory .. copy it and other stuff here.\n  }\n\n```\nHere is how a real qsort looks when decompiled\n\n```\nvoid __cdecl sub_4015D0(int a1, unsigned int a2, unsigned int a3, unsigned int a4, int (__cdecl *a5)(_DWORD, _DWORD, _DWORD), int a6)\n{\n  unsigned int v6; // esi@2\n  int v7; // edi@9\n  unsigned int v8; // esi@32\n  int v9; // esi@38\n  unsigned int k; // edi@41\n  unsigned int v11; // edi@43\n  void *v12; // edi@52\n  int j; // [sp+Ch] [bp-20h]@52\n  unsigned int v14; // [sp+10h] [bp-1Ch]@16\n  int v15; // [sp+14h] [bp-18h]@11\n  int v16; // [sp+14h] [bp-18h]@16\n  unsigned int v17; // [sp+18h] [bp-14h]@9\n  int v18; // [sp+1Ch] [bp-10h]@2\n  unsigned int v19; // [sp+28h] [bp-4h]@2\n  unsigned int i; // [sp+38h] [bp+Ch]@38\n\n  while ( a3 )\n  {\n    if ( a2 <= 0x20 )\n      goto LABEL_37;\n    v19 = a1 + a4 * a2;\n    v6 = a1 + a4 * (a2 >> 1);\n    v18 = a4 + v6;\n    sub_401420(a1, a1 + a4 * (a2 >> 1), a1 + a4 * a2 - a4, a4, a5, a6);\n    while ( a1 < v6 && !a5(v6 - a4, v6, a6) )\n      v6 -= a4;\n    while ( v18 < v19 && !a5(v18, v6, a6) )\n      v18 += a4;\n    v7 = v18;\n    v17 = v6;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        for ( ; v7 < v19; v7 += a4 )\n        {\n          v15 = a5(v6, v7, a6);\n          if ( v15 >= 0 )\n          {\n            if ( v15 > 0 )\n              break;\n            sub_401160(v18, v7, a4);\n            v18 += a4;\n          }\n        }\n        if ( a1 < v17 )\n        {\n          do\n          {\n            v14 = v17 - a4;\n            v16 = a5(v17 - a4, v6, a6);\n            if ( v16 >= 0 )\n            {\n              if ( v16 > 0 )\n                break;\n              v6 -= a4;\n              sub_401160(v6, v14, a4);\n            }\n            v17 -= a4;\n          }\n          while ( a1 < v14 );\n        }\n        if ( v17 == a1 )\n          break;\nLABEL_27:\n        if ( v7 == v19 )\n        {\n          v17 -= a4;\n          v18 -= a4;\n          v6 -= a4;\n          if ( v17 == v6 )\n            sub_401160(v6, v18, a4);\n          else\n            sub_401220(v17, v18, v6, a4);\n        }\n        else\n        {\n          v17 -= a4;\n          sub_401160(v7, v17, a4);\n          v7 += a4;\n        }\n      }\n      if ( v7 == v19 )\n        break;\n      if ( v17 != a1 )\n        goto LABEL_27;\n      if ( v18 == v7 )\n        sub_401160(v7, v6, a4);\n      else\n        sub_401220(v7, v6, v18, a4);\n      v7 += a4;\n      v6 += a4;\n      v18 += a4;\n    }\n    a3 = (a3 >> 2) + (a3 >> 1);\n    v8 = (v6 - a1) / a4;\n    a2 = (v19 - v18) / a4;\n    if ( v8 > a2 )\n    {\n      sub_4015D0(v18, a2, a3, a4, a5, a6);\n      a2 = v8;\n    }\n    else\n    {\n      sub_4015D0(a1, v8, a3, a4, a5, a6);\n      a1 = v18;\n    }\n  }\n  if ( a2 <= 0x20 )\n  {\nLABEL_37:\n    if ( a2 > 1 )\n    {\n      v9 = a1;\n      for ( i = a2 - 1; i; --i )\n      {\n        v9 += a4;\n        if ( a5(v9, a1, a6) >= 0 )\n        {\n          v12 = (void *)v9;\n          for ( j = v9; ; v12 = (void *)j )\n          {\n            j -= a4;\n            if ( a5(v9, j, a6) >= 0 )\n              break;\n          }\n          if ( v12 != (void *)v9 )\n            sub_401310(v12, v9, a4);\n        }\n        else\n        {\n          sub_401310((void *)a1, v9, a4);\n        }\n      }\n    }\n    return;\n  }\n  for ( k = a2 >> 1; k; sub_401500(a1, k, a2, a4, a5, a6) )\n    --k;\n  v11 = a1 + a4 * a2;\n  while ( a2 > 1 )\n  {\n    v11 -= a4;\n    sub_401160(a1, v11, a4);\n    --a2;\n    sub_401500(a1, 0, a2, a4, a5, a6);\n  }\n}\n\nint __cdecl sub_401420(int a1, int a2, int a3, unsigned int a4, int a5, int a6)\n{\n  unsigned int v6; // edi@2\n  int result; // eax@2\n\n  if ( 40 * a4 >= a3 - a1 )\n  {\n    result = sub_4013B0(a1, a2, a3, a4, a5, a6);\n  }\n  else\n  {\n    v6 = a4 * (((a3 - a1) / a4 >> 3) + 1);\n    sub_4013B0(a1, v6 + a1, a1 + 2 * v6, a4, a5, a6);\n    sub_4013B0(a2 - v6, a2, a2 + v6, a4, a5, a6);\n    sub_4013B0(a3 - 2 * v6, a3 - v6, a3, a4, a5, a6);\n    result = sub_4013B0(a1 + v6, a2, a3 - v6, a4, a5, a6);\n  }\n  return result;\n}\n\nint __cdecl sub_401500(int a1, unsigned int a2, unsigned int a3, int a4, int (__cdecl *a5)(_DWORD, _DWORD, _DWORD), int a6)\n{\n  int v6; // ebx@1\n  int v7; // esi@1\n  int i; // edi@1\n  int result; // eax@6\n  unsigned int v10; // ebx@7\n  unsigned int v11; // edi@7\n  int v12; // [sp+Ch] [bp-4h]@1\n\n  v12 = a2;\n  v6 = 2 * a2 + 2;\n  v7 = a1 + a4 * a2;\n  for ( i = a1 + a4 * (2 * a2 + 2); v6 <= a3; i = a1 + a4 * v6 )\n  {\n    if ( v6 == a3 || a5(i, i - a4, a6) < 0 )\n    {\n      --v6;\n      i -= a4;\n    }\n    sub_401160(v7, i, a4);\n    a2 = v6;\n    v7 = i;\n    v6 = 2 * v6 + 2;\n  }\n  result = v12;\n  if ( v12 < a2 )\n  {\n    do\n    {\n      v10 = (a2 - 1) >> 1;\n      v11 = a1 + a4 * ((a2 - 1) >> 1);\n      result = a5(v7, a1 + a4 * ((a2 - 1) >> 1), a6);\n      if ( result <= 0 )\n        break;\n      sub_401160(v11, v7, a4);\n      a2 = (a2 - 1) >> 1;\n      v7 = v11;\n      result = v12;\n    }\n    while ( v12 < v10 );\n  }\n  return result;\n}\n\n```\n",
  "votes": "2",
  "answers": 1,
  "views": "1k",
  "tags": [
    "ida",
    "decompilation",
    "c"
  ],
  "user": "user3435580",
  "time": "Apr 25, 2014 at 4:43",
  "comments": [],
  "answers_data": [
    {
      "content": "It's a binary search.  I've renamed several of the variables, and in one case, introduced a new variable, because one of the local variables was used for one thing in the first half of the function and something else in the second half of the function.\n\nThe only tricky part is that once it finds an occurrence of the string to find, it iterates to find the first occurrence.\n\n```\n#include <string.h>\n\ntypedef const char* MYTYPE;\ntypedef char* PTR_TYPE;\n\nPTR_TYPE __cdecl SomeKindOfSortAlgorithm(MYTYPE elementToFind, PTR_TYPE array, unsigned int numElts, unsigned int eltSize, int (__cdecl *compare)(MYTYPE, PTR_TYPE), bool* pFound)\n{\n  PTR_TYPE mid; // esi@1\n  int result; // eax@1\n  PTR_TYPE lower_bound; // ebp@2\n  PTR_TYPE upper_bound; // edi@2\n\n  mid = 0;\n  result = 0;\n  *pFound = false;\n  if ( !numElts )\n    return NULL;\n  lower_bound = array;\n  upper_bound = array + eltSize * (numElts - 1);\n  if ( array > upper_bound )\n  {\nNOT_FOUND:\n    if ( result > 0 )\n      mid += eltSize;\n    return mid;\n  }\n  while ( 1 )\n  {\n    mid = lower_bound + eltSize * (upper_bound - lower_bound) / eltSize / 2;\n    result = compare(elementToFind, mid);\n    if ( result < 0 ) // elementToFind should go before mid\n    {\n      if ( mid == array )\n        goto NOT_FOUND;\n      upper_bound = mid - eltSize;\n      goto CHECK_LOOP_END;\n    }\n    if ( result <= 0 ) // elementToFind equals the element at mid\n      break;\n    // elementToFind should go after mid\n    lower_bound = mid + eltSize;\nCHECK_LOOP_END:\n    if ( lower_bound > upper_bound )\n      goto NOT_FOUND;\n  }\n\n  PTR_TYPE pFirstOccurrance;\n  *pFound = true;\n  if ( mid == array )\n  {\nAT_FIRST_ELEMENT:\n    pFirstOccurrance = array;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      mid -= eltSize;\n      if ( compare(elementToFind, mid) ) // elementToFind != element at mid\n        break;\n      if ( mid == array )\n        goto AT_FIRST_ELEMENT;\n    }\n    pFirstOccurrance = mid + eltSize;\n  }\n  return pFirstOccurrance;\n}\n\nint __cdecl StrCmpiWrapper(MYTYPE element, PTR_TYPE arrayPointer)\n{\n  return _strcmpi(element, *(MYTYPE*)arrayPointer);\n}\n\n\nint main(int argc, char* argv[])\n{\n  MYTYPE lookFor = \"def\";\n  MYTYPE* pFirstOccurrance; // eax@1\n  bool found; // [sp+10h] [bp-4h]@1\n\n  MYTYPE data[3] = {\n      \"abc\",\n      \"def\",\n      \"ghi\"\n  };\n\n  pFirstOccurrance = (MYTYPE*)SomeKindOfSortAlgorithm(\n         lookFor,\n         (PTR_TYPE)data,\n         3,\n         sizeof(MYTYPE),\n         StrCmpiWrapper,\n         &found);\n\n  if ( !found && pFirstOccurrance )\n  {\n      //Allocate memory .. copy it and other stuff here.\n  }\n\n    return 0;\n}\n\n```\n",
      "votes": "8",
      "user": "Michael",
      "time": "Apr 25, 2014 at 6:25",
      "is_accepted": true,
      "comments": [
        {
          "user": "user3435580",
          "text": "Thanks for putting your time into it, I couldn't find any new variables you added just found you moved the double of mid equation into one. nevermind found it PTR_TYPE pFirstOccurrance;",
          "time": null
        }
      ]
    }
  ]
}