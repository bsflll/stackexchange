{
  "title": "Buffer overflow gets() weird parsing",
  "link": "https://reverseengineering.stackexchange.com/questions/31305/buffer-overflow-gets-weird-parsing",
  "content": "I'm attempting to do a buffer overflow with gets(). I've figured out how to write over the return address and I'm able to do so, however, I cannot write in the address I need because the 0x7F at the beginning of the address is being parsed weird. For example, overflowing with b\"\\x7f\" * 150 shows in the stack as as all 00. Further, it seems that values after these 0x7F bytes overwrite where the 00s are.\n\nIn the picture below you can see a test where I overflowed with bytes from 0x00 up to 0xFF. As you can see, 0x7F is non-existant because it has been written over by the values after it for some strange reason.\n\nI'm fairly confident this has something to do with gets() treating the 0x7F weird but I'm not sure how to work around this. Any help much appreciated!\n\n\n\nEdit: Okay, so I just realized that 0x7F corresponds to the del (delete) ascii character which would explain the odd behavior. So I guess my question is still how to work around this?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "71",
  "tags": [
    "debugging",
    "binary-analysis",
    "buffer-overflow",
    "vulnerability-analysis"
  ],
  "user": "user42774",
  "time": "Dec 24, 2022 at 22:49",
  "comments": [
    {
      "user": "user42774",
      "text": "I've edited the image to be more clear, please read the post to see what I'm talking about. I've written in the sequence in order so it should be like: 7a 7b 7c 7d 7e 7f 80. However, it seems like gets() is parsing it strangely as the order appears as 7a 7b 7c 7d 80. No need to be snarky, I've never asked here before. If this isn't the appropriate place to post this then where else could I ask?",
      "time": null
    }
  ],
  "answers_data": []
}