{
  "title": "What are the available libraries to statically modify ELF executables?",
  "link": "https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables",
  "content": "I would like to be able to rewrite or reorganize an ELF binary program directly from the executable format (not at compile-time). \n\nThe only library I know to do this is elfesteem (used in Miasm). But, there must be others. So, what are the libraries or frameworks that you use to statically modify ELF executables ?\n\n",
  "votes": "11",
  "answers": 3,
  "views": "7k",
  "tags": [
    "tools",
    "obfuscation",
    "deobfuscation",
    "elf"
  ],
  "user": "perror",
  "time": "Apr 18, 2013 at 10:06",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "good read ;)",
      "time": null
    },
    {
      "user": "Krypton",
      "text": "Maybe a bit too chatty, I saw perror and 0xC0000022L everywhere in this SE subsite. Anw is there any better tool (preferably python) atm? ERESI suggested in the accepted answer seems not to be actively maintained any more.",
      "time": null
    },
    {
      "user": "perror",
      "text": "Up to my actual knowledge, I do not know anymore libraries than the ones cited in this page... There might be other projects but they are less featured or more cryptic to use than the ones listed here. Anyway, I would be delighted if you prove me wrong !",
      "time": null
    },
    {
      "user": "Ciro Santilli OurBigBook.com",
      "text": "Is there a minimal tutorial of how to open an ELF and modify the assembly with Miasm  somewhere?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I just stumbled on this project ERESI. The project itself looks quite ambitious and supports mainly Intel and Sparc processors with some support for others. There are lots of tools as well that might come in handy. It does have one specific tool that sounds like if fits the bill exactly and quite a few others that are related: \n\nPatchelf might come in handy for modifying the linker or rpaths specified in an elf:\n\nAlso there is this presentation about injectso which seems relevate to the topic static and dynamic patching of elf binaries. Admittedly the coverage on static binaries is limited but that is to be expected as it is more complex that just being a library interposer.\n\nIf you are looking for libraries specifically then the ERESI project does use alot of libraries so you could probably take Evarista as a guide and write something more in line with your goals with thier libraries.\n\n",
      "votes": "7",
      "user": "0xC0000022L",
      "time": "Apr 18, 2013 at 22:08",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "I think your best bet will be to take a low level ELF library and write a small program to do what you want. I like the ELF Toolchain Project. I've found the tests and documentation that the team puts together to be pretty good. Regardless of what tool you end up using, you definitely want to read A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux which discusses how to modify an ELF executable to be as small as possible (your purpose may be different but there are a lot of general lessons to be had).\n\n",
      "votes": "6",
      "user": "Vehm Stark",
      "time": "Apr 18, 2013 at 18:09",
      "is_accepted": false,
      "comments": [
        {
          "user": "st01",
          "text": "+1 for the link to the brilliant \"teensy ELF\" tutorial. I saw this a few years ago and had forgotten about it... What a joy to re-read it.",
          "time": null
        }
      ]
    },
    {
      "content": "\n\nPaper: Binary Rewriting without Control Flow Recovery\n\n",
      "votes": "1",
      "user": "julian",
      "time": "Jul 27, 2021 at 1:55",
      "is_accepted": false,
      "comments": []
    }
  ]
}