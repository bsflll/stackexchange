{
  "title": "What are the best practice methods for documenting research into the reverse engineering of a file format?",
  "link": "https://reverseengineering.stackexchange.com/questions/1579/what-are-the-best-practice-methods-for-documenting-research-into-the-reverse-eng",
  "content": "I a conduct research requiring the reverse engineering file formats, and I am currently looking at ways of documenting that work. \n\nOn the web you will find resources that use box diagrams and free text. For example, this attempt to look at Microsoft Access: https://github.com/brianb/mdbtools/blob/master/HACKING\n\nThis is fairly consistent with the approach taken in ISO specs for formats.\n\nThis type of work is part of what I do professionally but I haven't come across anything to help me store my information in a consistent and useful manner for anyone else - months down the line it might not even be useful to me. \n\nIs there a 'community' best practice (methods, tools, authoring tools etc.) to help document research into a file format?\n\n",
  "votes": "13",
  "answers": 4,
  "views": "1k",
  "tags": [
    "tools",
    "file-format",
    "digital-archeology"
  ],
  "user": "Ross Spencer",
  "time": "Apr 5, 2013 at 0:28",
  "comments": [
    {
      "user": "dyasta",
      "text": "I haven't heard of anything along those lines; no standardized way to document file formats, and no specialized application to assist you.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Concur with V and only throwing out some thoughts.\n\nIn general would say that one, (of course), has to clearly denote holes\nas black or gray. As in \"no idea\" or \"several possibilities\".\n\nBeside file format specifications openly distributed I find the style\nused by RFC's to be one I adapt frequently. All depending on context\nusing such things as Augmented Backus–Naur Form as shown here.\n\nUse truth tables and logical expressions to assert unambiguity.\n\nElse there is e.g. 3GPP and the like which one also can learn from.\n\nIf you want to go for the good ASCII style use tools like\nasciiflow for flow diagrams etc. Have found myself that using ASCII\noften helps me writing more clear documents and split diagrams into\nlayers of more understandable form. Perhaps one can learn something from\nphrack as well.\n\nIf not plain text then LaTeX as it is very nice for organizing documents.\nSeparate out each section into own files that one include. Shuffling\naround sections become easy as do indexing etc. And the product looks\ngreat on paper. – This can of course also be done in some way with plain\ntext.\n\nAs with any approach (I) always use Git and commit very frequently with\nshort concise comments.\n\n",
      "votes": "7",
      "user": "Community",
      "time": "Oct 7, 2021 at 6:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "+1 for asciiflow, very useful, and Augmented BNF",
          "time": null
        },
        {
          "user": "hlovdal",
          "text": "An offline alternative to asciiflow is the editor JavE, jave.de (a standalone java application).",
          "time": null
        },
        {
          "user": "Runium",
          "text": "@hlovdal:Great. That one brings back memories :). Long live the King btw ;)",
          "time": null
        },
        {
          "user": "KulaGGin",
          "text": "Excuse me, what do you mean by \"Concur with V\"? There is no one named V and no one's name starts with V here.",
          "time": null
        }
      ]
    },
    {
      "content": "In the past my reverse engineering efforts of file formats were documented in source, i.e. 010 Editor binary templates. If you know C, this is pretty descriptive, but it has its limitations and at times it can get a bit convoluted when trying to express certain more exotic concepts. Another issue with the tool as such is the slowness with larger scripts on larger files and the lack of an extension mechanism beyond the scripts and binary templates (such as plugins).\n\nA widely used alternative, to mentioned Augmented BNF, is ASN.1 (permalink). I prefer the BER encoding (see previous link to Wikipedia article), but your mileage may vary.\n\nFor graphical representations I have used LaTeX (with bytefield, PDF) and Visio.\n\n",
      "votes": "4",
      "user": "0xC0000022L",
      "time": "Apr 5, 2013 at 3:00",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Like @0xC0000022L, I tend to document first in source, or in something that can immediately be re-used in a tool (unlike a pure text documentation).\n\nA generic approach is to use a hex editor that has some abilities to annotate or describe structures\n\n",
      "votes": "4",
      "user": "Ange",
      "time": "Apr 15, 2013 at 4:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "Neo looks promising.",
          "time": null
        },
        {
          "user": "Ross Spencer",
          "text": "Thanks for the info. IDA disassembler? hex-rays.com/products/ida/index.shtml",
          "time": null
        },
        {
          "user": "Ange",
          "text": "obviously - added the link",
          "time": null
        },
        {
          "user": "Ange",
          "text": "ok, maybe not so obvious then - I'm officially weird now ;)",
          "time": null
        }
      ]
    },
    {
      "content": "I can't think of anything more \"standard\" than block diagrams, a pseudo-code implementation, and possibly a reference implementation.  \n\nTake for example the FIPS standard here or the LUKS standard document.  They provide a basic narrative of functionality, pseudo-code, and in the case of OGG/OGV even a full reference implementation.  A standard you took apart, in my opinion, should be documented the same way a standard you designed is documented.  Some fields may be \"unknown\" or \"seems to be magic, just leave it\".  \n\nI don't think you'll find anything more standard than that is.  If you don't mind posting a document and a parser, github/bitbucket/etc are great.  Some of the other file format questions point to Wotsit.org (I look there), so submitting a link there could be a good thing as well.\n\n",
      "votes": "2",
      "user": "RobotHumans",
      "time": "Apr 5, 2013 at 0:48",
      "is_accepted": false,
      "comments": []
    }
  ]
}