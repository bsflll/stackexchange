{
  "title": "Comparing the static address of the vtable of a class, to the pointer to it held by the object",
  "link": "https://reverseengineering.stackexchange.com/questions/27485/comparing-the-static-address-of-the-vtable-of-a-class-to-the-pointer-to-it-held",
  "content": "I know this is compiler/ABI dependent, not necessarily standardized, etc. I've always assumed, from what I've read in several places (e.g. an answer here or the example in wikipedia), that a typical thing a compiler does is having a pointer to the vtable of Class at the start of an object of type Class.\n\nI'm now debugging and instrumenting a function that receives a Class* parameter. Class has virtual functions. I want to determine if it belongs to a class that I care about. I probably also want to do other things with it, so I'm trying to get a good understanding.\n\nI look at the disassembly in Ghidra, and I find this about the vtable of that class (paste is coming from an example I wrote, but it's equivalent in a real binary that I want to RE):\n\n```\n                             **************************************************************\n                             * vtable for DerivedClass                                    *\n                             **************************************************************\n                             _ZTV12DerivedClass                              XREF[3]:     Entry Point(*), \n                             DerivedClass::vtable                                         operator():001039d1(*), \n                                                                                          _elfSectionHeaders::00000650(*)  \n        00107c70 00 00 00        ptrdiff_\n                 00 00 00 \n                 00 00\n           00107c70 [0]                                  0h\n        00107c78 88 7c 10        addr       DerivedClass::typeinfo                           = \n                 00 00 00 \n                 00 00\n                             PTR_ARRAY_00107c80                              XREF[2]:     operator():001039d8(*), \n                                                                                          operator():001039dc(*)  \n        00107c80 94 42 10        addr[1]\n                 00 00 00 \n                 00 00\n           00107c80 94 42 10 00 00  addr      DerivedClass::someVirt  [0]                               XREF[2]:     operator():001039d8(*), \n                    00 00 00                                                                                         operator():001039dc(*)  \n\n\n```\nAnd here is where my surprise is:\n\nThis is not Earth-shattering in order to compare the pointers, of course. Just add 16. I've seen explanations of what those first two pointers should be. But I have some doubts:\n\n",
  "votes": "2",
  "answers": 1,
  "views": "428",
  "tags": [
    "linux",
    "gcc",
    "pointer",
    "vtables"
  ],
  "user": "Alejandro Exojo",
  "time": "Apr 16, 2021 at 21:14",
  "comments": [],
  "answers_data": [
    {
      "content": "The Itanium C++ ABI is sometimes not very clear about what exactly is “vtable”.\n\nIn practice, the symbol such as _ZTV12DerivedClass points to the complete vtable structure, which includes the two pointer-sized slots before it (RTTI pointer and offset to top).\n\nSo, to get the start of the virtual function pointers table (what is commonly understood as “the vtable”),  you have to add 16 (or 8 on 32-but platforms) to the symbol’s address.\n\n",
      "votes": "3",
      "user": "Igor Skochinsky",
      "time": "Apr 16, 2021 at 23:28",
      "is_accepted": true,
      "comments": []
    }
  ]
}