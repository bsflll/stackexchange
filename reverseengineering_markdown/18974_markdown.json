{
  "title": "How to interpret disassembled MIPS code?",
  "link": "https://reverseengineering.stackexchange.com/questions/18974/how-to-interpret-disassembled-mips-code",
  "content": "I have disassembled MIPS binary with raw opcodes. How to interpret, for example, these lines:\n\n```\nDisassembly of section .data:\n\n00000000 <.data>:\n    ... ...\n    f864:   30a5ffff    sd  ra,-23248(ra)\n    f868:   00804021    addi    zero,t2,-32768\n    f86c:   10a00017    bnez    t8,0xffff78b0\n    f870:   00004821    addi    t0,t2,0\n\n```\nand these 3 lines:\n\n```\n25b8:   8c670000    syscall 0x19e\n25bc:   8c680004    bltz    zero,0x1c7f0\n25c0:   8c690008    j   0x1a630\n\n```\nwhat mean data in each column?\n\nEdit: The files are contents of memory (in hex) of SPI Flash regions, converted to binary form (.bin) use xxd -r. The file command determines the file type of file.bin as data file type.\n\nI tried transform binary into ELF:\n\nmips-linux-gnu-objcopy -I binary -O elf32-little --rename-section .data=.text --change-address +0x80000000 file.bin file.elf\n\nthen to disassemble an ELF file:\n\nmips-linux-gnu-objdump -m mips  -D file.elf\n\n",
  "votes": "0",
  "answers": 2,
  "views": "2k",
  "tags": [
    "disassembly",
    "assembly",
    "linux",
    "embedded",
    "mips"
  ],
  "user": "minto",
  "time": "Aug 7, 2018 at 19:52",
  "comments": [
    {
      "user": "yaspr",
      "text": "This looks like objdump, it's a linear sweep so data will be interpreted as instructions but it's data. Look for .text seciton if you want code. This looks meaningless.",
      "time": null
    },
    {
      "user": "yaspr",
      "text": "resources.infosecinstitute.com/â€¦",
      "time": null
    },
    {
      "user": "minto",
      "text": "@yaspr Yes, it's from objdump, but there is no .text section produced in the output. I used command mips-linux-gnu-objdump -D -b binary -m mips file.bin",
      "time": null
    },
    {
      "user": "julian",
      "text": "Use -d rather than -D",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The .data section is mapped to the data segment which is not executable. This is because it does not contain executable code; rather, it contains data (hence the name). As a result, when this data is treated as code and disassembled, the results will not be meaningful. \n\n",
      "votes": "2",
      "user": "julian",
      "time": "Aug 4, 2018 at 14:05",
      "is_accepted": false,
      "comments": [
        {
          "user": "minto",
          "text": "The other files I disassembled also start from <.data> section, it's present in all files (bootloader, Image, Perm.nonvol, Dyn.nonvol)",
          "time": null
        },
        {
          "user": "julian",
          "text": "@minto are these ELF binaries? You need to determine their format and structure prior to disassembly",
          "time": null
        },
        {
          "user": "minto",
          "text": "These files are contents of memory (in hex) of SPI Flash regions, converted to binary form (.bin) use xxd -r. The file command determines the file type of file.bin as data file type.",
          "time": null
        },
        {
          "user": "julian",
          "text": "@minto this is important information that should have been included in the question. Please edit your question.",
          "time": null
        },
        {
          "user": "minto",
          "text": "I'm inclined to think that the memory addresses I used to extract memory areas are incorrect, most likely they just don't match the real location of memory regions.",
          "time": null
        }
      ]
    },
    {
      "content": "The columns are like follows:\n\n```\n  address| bytes     | disassembly\n---------|-----------|--------------------------\n    f864:|  30a5ffff |  sd  ra,-23248(ra)\n\n```\nAddress usually corresponds to the execution address for structured file formats (e.g. ELF), but for raw binary it matches the plain file offset (i.e. the file is assumed to be loaded at 0). If you want to pretend that your file is loaded at another address, you can pass the --adjust-vma=OFFSET flag to objdump.\n\nYou don't see .text in the output because the raw binary has no section headers to describe its structure, so objdump makes up a pseudo-section .data to represent the file's contents. Normally data sections are not disassembled, so you need to use -D instead of -d to force its disassembly. \n\nThe disassembly you quote looks quite nonsensical, so probably you either have data intermixed with code (a common situation in embedded firmwares), or the binary is not MIPS code but some other architecture.\n\n8c670000, 8c670004 and 8c670008 in the second snippet actually looks like a table of addresses to me, so probably it's data. You'll need to look through disassembly and sort out data from code.\n\n",
      "votes": "2",
      "user": "Igor Skochinsky",
      "time": "Aug 6, 2018 at 12:18",
      "is_accepted": false,
      "comments": [
        {
          "user": "minto",
          "text": "Thanks for pointing to this. Really, .bin and .hex files do not have sections; they just have addresses which are equal to the byte index. I have to convert binary file to ELF file format at MIPS32 boot address for disassemble.",
          "time": null
        },
        {
          "user": "minto",
          "text": "I updated topic and have added new details.",
          "time": null
        }
      ]
    }
  ]
}