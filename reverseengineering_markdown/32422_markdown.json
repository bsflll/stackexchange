{
  "title": "Inspect executable binary similarity",
  "link": "https://reverseengineering.stackexchange.com/questions/32422/inspect-executable-binary-similarity",
  "content": "I've found a company in China selling a software that is clearly a copy of my own work. For context, this is actually a physical product that comes with a Ubuntu computer and the software pre-installed on it.\n\nI've acquired this product and inspected some of the things. I see all the libraries are identical on their system as on my own. The auxiliary files used by the app are named identically as for my program. The format of these files are identical. And many other things that, in the end, for me, leave no doubt about the infringement.\n\nBut when I compared the executable binaries, theirs is double the size in MB. Plus, I don't see any similarities when comparing byte for byte. I try reverse compiling my executable with Ida Pro, and I can do it. All the function and variable names are obfuscated but I can see the assembler code.\nWhen I open my executable with Ida, a pop-up appears where I select that it's a \"ELF64 for x86-x64 (Executable)\".\n\nWhen I open their executable in IdaPro, I get the same popup, but it doesn't offer me the option of ELF64. Instead, it just offers the option \"Binary file\".\n\n\nWhen I press OK, I get this.\n\n\nI press Yes, I finally get this.\n\n\nI press OK, and then I see a hex view of the literal bytes in the executable. And I'm supposed to find the entry point?\n\nI'm not even mad, this is great job. I wish I knew how to protect my code in this way.\n\nEDIT: I'm sharing the first segment of my own app vs the copied app.\n\nMy app:\n\n```\n7F 45 4C 46 02 01 01 03 00 00 00 00 00 00 00 00\n02 00 3E 00 01 00 00 00 90 F7 42 00 00 00 00 00\n40 00 00 00 00 00 00 00 D0 14 52 00 00 00 00 00\n00 00 00 00 40 00 38 00 0A 00 40 00 21 00 20 00\n06 00 00 00 05 00 00 00 40 00 00 00 00 00 00 00\n40 00 40 00 00 00 00 00 40 00 40 00 00 00 00 00\n30 02 00 00 00 00 00 00 30 02 00 00 00 00 00 00\n08 00 00 00 00 00 00 00 03 00 00 00 04 00 00 00\n70 02 00 00 00 00 00 00 70 02 40 00 00 00 00 00\n70 02 40 00 00 00 00 00 1C 00 00 00 00 00 00 00\n1C 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00\n01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00\n00 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00\nA9 82 51 00 00 00 00 00 A9 82 51 00 00 00 00 00\n00 00 20 00 00 00 00 00 01 00 00 00 06 00 00 00\nB8 89 51 00 00 00 00 00 B8 89 B1 00 00 00 00 00\nB8 89 B1 00 00 00 00 00 B4 89 00 00 00 00 00 00\n78 6D 01 00 00 00 00 00 00 00 20 00 00 00 00 00\n02 00 00 00 06 00 00 00 78 F9 51 00 00 00 00 00\n78 F9 B1 00 00 00 00 00 78 F9 B1 00 00 00 00 00\n20 05 00 00 00 00 00 00 20 05 00 00 00 00 00 00\n08 00 00 00 00 00 00 00 04 00 00 00 04 00 00 00\n8C 02 00 00 00 00 00 00 8C 02 40 00 00 00 00 00\n8C 02 40 00 00 00 00 00 44 00 00 00 00 00 00 00\n44 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00\n07 00 00 00 04 00 00 00 B8 89 51 00 00 00 00 00\nB8 89 B1 00 00 00 00 00 B8 89 B1 00 00 00 00 00\n00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00\n08 00 00 00 00 00 00 00 50 E5 74 64 04 00 00 00\n30 A9 4C 00 00 00 00 00 30 A9 8C 00 00 00 00 00\n30 A9 8C 00 00 00 00 00 1C 77 00 00 00 00 00 00\n1C 77 00 00 00 00 00 00 04 00 00 00 00 00 00 00\n51 E5 74 64 06 00 00 00 00 00 00 00 00 00 00 00\n\n```\nInfringing app:\n\n```\n2a c5 e6 c6 57 fc ab fe 55 ff aa ff 55 ff aa ff \n57 fd 94 fd 54 fe aa fe 95 c9 e8 3f 55 ff aa ff \n15 bf aa bf 55 ff aa ff fd 83 fb 57 55 ff aa ff \n55 ff aa ff 15 bf 92 bf 5f f5 ea f5 75 df b5 df \n53 f9 aa f9 51 fb aa fb 15 bf aa bf 55 ff aa ff \n15 bf ea bf 55 ff aa ff 15 bf ea bf 55 ff aa ff \n65 cd aa cf 55 ff aa ff 65 cd aa cf 55 ff aa ff \n5d f7 aa f7 55 ff aa ff 56 fc aa fc 51 fb aa fb \n25 8d aa 8f 55 ff aa ff 25 8d ea 8f 55 ff aa ff \n25 8d ea 8f 55 ff aa ff 49 e3 aa e3 55 ff aa ff \n49 e3 aa e3 55 ff aa ff 54 fe aa fe 55 ff aa ff \n54 fe aa fe 50 fa aa fa 55 ff aa ff 55 ff aa ff \n55 ff ea ff 55 ff aa ff 55 ff ea ff 55 ff aa ff \n7c e4 fb d6 55 ff aa ff 7c e4 fb d6 55 ff aa ff \n55 ff 8a ff 55 ff aa ff 54 fe aa fe 53 f9 aa f9 \n8d 66 fb 27 55 ff aa ff 8d 66 1b 27 55 ff aa ff \n8d 66 1b 27 55 ff aa ff 29 12 aa 83 55 ff aa ff \n0d cd ab a7 55 ff aa ff 55 ff 8a ff 55 ff aa ff \n57 fd aa fd 53 f9 aa f9 35 24 fb 9f 55 ff aa ff \n35 24 1b 9f 55 ff aa ff 35 24 1b 9f 55 ff aa ff \na5 0d aa 0f 55 ff aa ff a5 0d aa 0f 55 ff aa ff \n5d f7 aa f7 55 ff aa ff 51 fb aa fb 51 fb aa fb \nd9 71 aa 73 55 ff aa ff d9 71 ea 73 55 ff aa ff \nd9 71 ea 73 55 ff aa ff 11 bb aa bb 55 ff aa ff \n11 bb aa bb 55 ff aa ff 51 fb aa fb 55 ff aa ff \n52 f8 aa f8 51 fb aa fb 8d 66 fb 27 55 ff aa ff \n8d 66 1b 27 55 ff aa ff 8d 66 1b 27 55 ff aa ff \n55 ff aa ff 55 ff aa ff 45 ef aa ef 55 ff aa ff \n5d f7 aa f7 55 ff aa ff 05 4a de cb 51 fb aa fb \nf5 c1 e6 5f 55 ff aa ff f5 c1 26 5f 55 ff aa ff \nf5 c1 26 5f 55 ff aa ff 69 b6 aa c3 55 ff aa ff \n69 b6 aa c3 55 ff aa ff 51 fb aa fb 55 ff aa ff \n04 4b de ca 53 f9 aa f9 55 ff aa ff 55 ff aa ff  \n\n```\nIt looks like it's xorred with some pattern but not quite. Also, they might have started with a slightly different version of my code. Depending on the exact build they used.\n\n",
  "votes": "3",
  "answers": 2,
  "views": "300",
  "tags": [
    "ida",
    "pe"
  ],
  "user": "AndroC",
  "time": "Oct 23, 2023 at 14:39",
  "comments": [
    {
      "user": "joxeankoret",
      "text": "It looks like the binary you have opened isn't the real binary.",
      "time": null
    },
    {
      "user": "mimak",
      "text": "@joxeankoret we can't know, it could be obfuscated",
      "time": null
    },
    {
      "user": "Robert",
      "text": "Dump the process memory at run-time and compare it's content with your binary . May be the executable is just a wrapper around your original binary.",
      "time": null
    },
    {
      "user": "AndroC",
      "text": "@Robert There. I've edited the question.",
      "time": null
    },
    {
      "user": "joxeankoret",
      "text": "If you could share the applications, perhaps someone could take a look to try to help here",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "The file you got is not a binary executable in a common format. IDA Pro can understand ELF and a lot more of executable formats. If its best detection is binary it means the file is not in any of those formats.\n\nThere is no point in analyzing this file with IDA until you understand what it is.\n\nBefore firing up IDA be sure to understand the format of the file and how it's used:\n\nOnce you know more about that file, if it contains code in a non-standard format you can still use IDA to inspect it.\n\nFinding out how to eventually deobfuscate the file should be easy, alternatively, you can dump its decoded version from memory. Keep in mind that ELFs on disk differ from ELFs on memory.\n\nThey couldn't recompile your executables since they did not have access to the source code (I suppose). They could have obfuscated them and and wrote a loader.\n\nOnce you recover the original executables, you can compare them with bindiff but I suspect that they are likely identical to yours to the point that even their hashes will be the same.\n\nBy collecting many pieces of evidence of similarity (same names, same code, same OS, and so on) you can easily mount a case for infringement. If their binaries differ from yours just by a fraction of non-relevant code, then they surely copied them.\n\nP.S. Beware that Linux can be augmented with new executable formats but I doubt this is the case.\n\n",
      "votes": "2",
      "user": "Margaret Bloom",
      "time": "Oct 23, 2023 at 14:20",
      "is_accepted": false,
      "comments": [
        {
          "user": "AndroC",
          "text": "Sorry I missed you by 20minutes. I've edited the question. I put snippets of raw bytes from my binary and the other one.",
          "time": null
        }
      ]
    },
    {
      "content": "I think you're on the right track about the XOR obfuscation: XORing each 4 byte block of the \"infringing app\" file with hex 55FFAAFF, and then XORing the second and fourth byte of each block with the first byte, yields something that appears to be a valid x86-64 Linux ELF file header and (coincidentally or not) looks very similar (but not identical) to your \"my app\" file.\n\nHowever, given the limited data you've provided, I can't rule out the possibility that the similarity between your app and the deobfuscated Chinese app might be simply due to coincidental similarity between any two ELF file headers of the same type.  To rule that possibility out, you'd have to either provide us with longer segments of the files, or deobfuscate the full Chinese app file yourself and then disassemble it and compare it with your app.\n\n",
      "votes": "2",
      "user": "Ilmari Karonen",
      "time": "Oct 23, 2023 at 21:52",
      "is_accepted": false,
      "comments": []
    }
  ]
}