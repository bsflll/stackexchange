{
  "title": "ELF binary corrupted after adding instruction in non-executable section",
  "link": "https://reverseengineering.stackexchange.com/questions/18712/elf-binary-corrupted-after-adding-instruction-in-non-executable-section",
  "content": "I've been messing around a little with Radare2 trying to master binary exploitation and patching.\nI added a couple of assembly instructions to an x86 elf binary in a non-executable section of the file, precisely the section LOAD1 I spotted after listing the available sections of the executable :\n\n```\n S=\n00* 0x08048000 |#################################-----------------------------------------------| 0x0804868c  1.6K mr-x  LOAD0\n01  0x08049f0c |---------------------------------------------------------------------------#####| 0x0804a028   280 mrw-  LOAD1\n=>  0x080483d0 |--------------------------------------------------------------------------------| 0x080483cf\n\n```\nThen when I tried to execute the binary I got the following error :\n\n```\nInconsistency detected by ld.so: dl-version.c: 205: _dl_check_map_versions: Assertion `needed != NULL' failed!\n\n```\nI think the instructions types I added are not relevant in this matter as the issue arises with mov instructions as well as with simple jmp.  \n\nFrom what I know, the linking step had been performed at the compilation/linking of the original source code, so how does it come that ld is involved here ?\n\nWhat exactly causes the linker inconsistency triggering the above error ?  \n\n",
  "votes": "1",
  "answers": 1,
  "views": "355",
  "tags": [
    "x86",
    "radare2",
    "patching",
    "binary-editing"
  ],
  "user": "programmersn",
  "time": "Jul 6, 2018 at 17:21",
  "comments": [
    {
      "user": "Megabeets",
      "text": "use iS and not S or S= to list the sections",
      "time": null
    },
    {
      "user": "programmersn",
      "text": "@Megabeets Why does iS list much more sections that S and S= commands do ?",
      "time": null
    },
    {
      "user": "programmersn",
      "text": "@Megabeets Moreover, r2 doc does not say a word about iS.",
      "time": null
    },
    {
      "user": "Megabeets",
      "text": "S is outdated and eventually will be replaced with iS",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Note that no section information is provided in your question. LOAD0 and LOAD1 refer to loadable segments. Refer to the SysV ABI for more details.\n\nThe link editor ld is not involved here; rather, the dynamic linker/loader ld.so is. \n\nRun LD_DEBUG=symbols,bindings or LD_DEBUG=all.\n\nSee https://stackoverflow.com/questions/22564780/debugging-ld-inconsistency-detected-by-ld-so\n\n",
      "votes": "1",
      "user": "julian",
      "time": "Jul 7, 2018 at 0:15",
      "is_accepted": false,
      "comments": [
        {
          "user": "programmersn",
          "text": "\"Run LD_DEBUG=symbols,bindings or LD_DEBUG=all\" How can I perform that while not having access to the source code ?",
          "time": null
        },
        {
          "user": "julian",
          "text": "@programmersn LD_DEBUG is used to examine the behavior or the dynamic linker. Only the executable is needed. See docs.oracle.com/cd/E19683-01/816-1386/chapter3-33/index.html",
          "time": null
        },
        {
          "user": "programmersn",
          "text": "Just tried out exporting LD_DEBUG=all as env variable as you advised, but it does not show anything when the faulty program is executed (apart from the inconsistency message already mentioned), although debugging symbols are listed when running any other program.",
          "time": null
        }
      ]
    }
  ]
}