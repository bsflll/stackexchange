{
  "title": "Reverse engineer the update-binary file in Android recovery update packages",
  "link": "https://reverseengineering.stackexchange.com/questions/15811/reverse-engineer-the-update-binary-file-in-android-recovery-update-packages",
  "content": "I am trying to understand how to disassemble or at least get a readable copy of the update-binary file located in /META-INF/com/google/android/. It is a modified version for a smartwatch, which contains the key used by the manufacturer to temporarily unlock the bootloader and let the system update properly. I searched on the net but I did not find anything related to this.\nHave you got any idea of how could I extract that key form the binary file? The architecture is MIPS.\n\nThank you in advance!!\n\n",
  "votes": "0",
  "answers": 1,
  "views": "1k",
  "tags": [
    "android",
    "mips",
    "decompile"
  ],
  "user": "sn0wst0rm",
  "time": "Jul 12, 2017 at 22:39",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "what is the name of the file? Does it have any discernible structure? does the dex code reference it in any way?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I think it's a MIPS ELF binary. Maybe you can use IDA Pro (Win/Linux) or Hopper (Mac/Linux) or JEB (Win/Mac/Linux) to poke around.  If you have a clue about the length or parts of the key, then you could try to search for relevant strings.  \n\nI've never tried it myself (MIPS), but maybe the approach helps you. ;)\nCheers!\n\n",
      "votes": "1",
      "user": "j04n",
      "time": "Sep 19, 2017 at 12:34",
      "is_accepted": false,
      "comments": []
    }
  ]
}