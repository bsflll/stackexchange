{
  "title": "Merging elf shared-objects",
  "link": "https://reverseengineering.stackexchange.com/questions/3287/merging-elf-shared-objects",
  "content": "Let say I have libA.so and libB.so, is there any way for me to combine them into a single shared library libC.so that contains all exported symbols of both libA.so and libB.so?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "3k",
  "tags": [
    "linux",
    "elf"
  ],
  "user": "Krypton",
  "time": "Dec 26, 2013 at 7:43",
  "comments": [
    {
      "user": "perror",
      "text": "I assume that you do not have the source code of these libraries (just to make things clear!). But, have you access to a static version (*.a) of it ?",
      "time": null
    },
    {
      "user": "Krypton",
      "text": "No, I have neither source code nor static version.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Quite frankly this is rather a development (i.e. StackOverflow) question than RCE, but let me give the level of advice I can give with the level of information you provided in your question.\n\nThe question is whether what you want to achieve is to have those symbols available through a single library by all means or whether you don't care how both sets of symbols are made available to your program(s).\n\nIf you insist on the library, you could simply write one shared library and export the symbols from it through shallow wrapper functions, but use the dynamic loader to find them from the originating shared objects (check out ldd and related man pages). It is not too difficult to find all symbol names with readelf --dyn-syms <elf-file>/readelf --syms --use-dynamic <elf-file> (the package on Ubuntu/Debian is elfutils). From the output of that you can write a version script to use in your linker (e.g. gcc -Wl,--version-script,script.map ...).\n\nHowever, assuming you use the default Linux facilities with no additional magic involved, you can also abuse the ld-linux/ld.so approach of locating the symbols. If you write a simple wrapper shell script that sets LD_PRELOAD, you can simply load both shared objects up front and they should - under normal circumstances - take precedence over other symbols. It's also commonly used as a debugging technique.\n\nI strongly suggest you read chapters 41 and 42 of Michael Kerrisks excellent book \"The Definitive Guide to Linux and Unix System Programming\", colloquially known as TLPI. The respective source samples may come in handy, too, in your case.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Dec 27, 2013 at 21:22",
      "is_accepted": false,
      "comments": []
    }
  ]
}