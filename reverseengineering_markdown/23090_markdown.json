{
  "title": "IDA shows MEMORY or unknown references on C std library calls (memset, memcpy, etc.)",
  "link": "https://reverseengineering.stackexchange.com/questions/23090/ida-shows-memory-or-unknown-references-on-c-std-library-calls-memset-memcpy-e",
  "content": "I'm currently reversing a Linux 32-bit executable (with a statically linked library included in it) but I'm having a little problem I can't find a solution for. \n\nBasically whenever I stumble across a glibc call (memset, memcpy, etc.) IDA, instead of showing the correct name of the function, it shows a reference to MEMORY as a function call.\n\nExample:\n\n```\nMEMORY[0xACFC3F9F](s, 0, 44);    // <----- memset\nMEMORY[0xACFC3FBD](dest, 0, 40); // <---- memset\n\n```\nThe interesting part is that when debugging the reference changes to an actual function call (still unknown, but whatever).\nWhile debugging the MEMORY part changes to:\n\n```\n((void (__cdecl *)(char *, _DWORD, signed int))unk_F769B4F0)(s, 0, 44);\n((void (__cdecl *)(char *, _DWORD, signed int))unk_F769B4F0)(dest, 0, 40);\n\n```\nIn Ghidra the same code looks like this:\n\n```\nmemset(s,0,0x2c);    // <--- correct function name\nmemset(dest,0,0x28); // <--- correct function name\n\n```\nIDA should automatically detect std library functions, what could be the reason why it isn't happening here?\n\nUpdate: I re-analyzed the executable from scratch (creating a new IDA database) and the references to the functions are here.\n\nUnfortunately, after attaching to the debugger all the function calls became \"MEMORY\" again.\n\nHere's the asm:\n\n```\n.text:566146D7                 mov     [esp], eax      ; s\n.text:566146DA                 call    near ptr memset+566146DBh ; <--- memset call\n.text:566146DF                 mov     dword ptr [esp+8], 28h ; '(' ; n\n.text:566146E7                 mov     dword ptr [esp+4], 0 ; c\n.text:566146EF                 lea     eax, [ebp+dest]\n.text:566146F5                 mov     [esp], eax      ; s\n.text:566146F8                 call    near ptr memset+566146F9h ; <--- memset call\n.text:566146FD                 movsx   eax, [ebp+var_14C]\n\n```\nThe memset calls are here but with a memory offset pointing to the next address of the executable.\n\n",
  "votes": "1",
  "answers": 0,
  "views": "316",
  "tags": [
    "ida",
    "x86",
    "linux",
    "memory",
    "libraries"
  ],
  "user": "Davide Maggioni",
  "time": "Jan 28, 2020 at 16:15",
  "comments": [],
  "answers_data": []
}