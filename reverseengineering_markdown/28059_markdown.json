{
  "title": "Where stack canary is located?",
  "link": "https://reverseengineering.stackexchange.com/questions/28059/where-stack-canary-is-located",
  "content": "Is stack canary located between the local variable in stack and the place that the function saved the registers in the beginning of function? push r5,lr\n\nso I can't change any registers (while the function pop them from stack) ? Or only protect on the place of PC register?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "2k",
  "tags": [
    "arm",
    "stack-protector"
  ],
  "user": "Arm",
  "time": "Jul 28, 2021 at 10:23",
  "comments": [],
  "answers_data": [
    {
      "content": "Stack canary have nothing to do with registers.\n\nAs it's name may suggest, it is located on the stack.\n\nI think you have misunderstood something, because \"between the local variable stack and registers\" don't mean anything.\n\nSome of your registers values may have been pushed on the stack, but the stack don't have a direct relation with the registers. Value are taken from the stack then placed in registers (pop instructions) or the opposite (push instruction) or modified through certain instructions.\n\nSo it should not prevent you from overwriting register's values, as long as you are not corrupting the stack cookie.\n\nThe goal of a stack cookie is to prevent stack-based buffer overflow.\n\nA value is pushed on the stack just before the return address of the function.\n\nThe layout of the stack would be something like that:\n\n```\n -------------\n|             |\n| local vars  |\n|             |\n -------------\n|   old FP    |\n -------------\n|   Canary    |\n -------------\n|     Ret     |\n -------------  \n\n```\nThe goal of a stack cookie is to prevent an attacker to overwrite the saved return address in order to manipulate the execution flow.\n\nIf the exploitation of the program leads to an overflow resulting in the following stack layout:\n\n```\n -------------\n|             |\n|  AAAAAAAAAA |\n| AAAAAAAAAAA | <- Overflow leading to corruption of the stack\n -------------\n| AAAAAAAAAAA | \n -------------\n| AAAAAAAAAAA | <- Canary overwritten\n -------------\n|  0xDEADBEEF | <- New arbitrary return address \n -------------  \n\n```\nThe program will not returns to 0xDEADBEEF because the stack cookie was lost in the process. The stack cookie is checked at the end of the function,  before returning the execution to the parent's function.\n\nIn this case, an exception is raised, and the execution is never changed.\n\nYou may understand through this that it have nothing to do with registers. It is only protecting the function's return value. If you find a way (in an exploitation process) to change a local value that is affecting a register, the stack cookie will never prevent you from doing that.\n\n",
      "votes": "1",
      "user": "Guillaume",
      "time": "Jul 28, 2021 at 7:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "Arm",
          "text": "Maybe I didn't get you. But the eet value is actually a PC register that push to stack in the beginning if function. So the canary will be between the local variable of the function to the saves registers?(including the pc)? That looks like push r5,lr and in the end of function pop r5,pc   so if I want to overflow and change the place only of r5, can I do that? Or stack canary protect only in the place in stack that belong to ret?",
          "time": null
        },
        {
          "user": "Guillaume",
          "text": "The saved value of the canary is stored somewhere on memory (not the stack nor registers). When a function is called, it takes this \"original\" canary value, and put it on the stack, just before the saved IP (used to return to the caller). When the function is using local arguments, it is pushed on the stack. So the stack cookie is between the local variables and the return address. Nothing related to registers in this process. Your canary may transit through a register in the process, but it is not store here (otherwise it would be too easy to break the canary).",
          "time": null
        },
        {
          "user": "mumbel",
          "text": "push r5,lr would imply that stack is: locals, canary, old r5, old lr (and there probably is no fp here; otherwise, it would also have been pushed).  @Arm  if you overflow that stack frame, it will overflow the canary, the old r5, and old lr on the stack.  When the canary is checked by reading off the stack it will not be correct and the pop never occurs (ie r5 and pc are not written to), but instead branches to __stack_chk_fail.  Your overflow must start after the canary or jump over it somehow leaving it intact to successfully write to pop a new r5 and new pc",
          "time": null
        },
        {
          "user": "R4444",
          "text": "\"The goal of a stack cookie is to prevent stack-based buffer overflow\" --> this statement is incorrect. the goal is not to prevent overflow, but to detect if frame overflowed to protect return address",
          "time": null
        },
        {
          "user": "multithr3at3d",
          "text": "@Guillaume your statement \"nothing related to registers\" is a bit imprecise. Sure, the canary itself has nothing to do with them, but it does precede (on the stack) and prevents modification of values that are going to be popped into various registers.",
          "time": null
        }
      ]
    }
  ]
}