{
  "title": "IDA: call a function with different arguments",
  "link": "https://reverseengineering.stackexchange.com/questions/17590/ida-call-a-function-with-different-arguments",
  "content": "I'm reversing some software and found the function which decrypts some stuff:\n\n\n\nAs you can see it has the password parameter for it which gets decrypted in this function.\n\nFunction disassembly:\n\n```\nsub_401350      proc near               ; CODE XREF: sub_4013F0+28Ep\n                                        ; sub_4013F0+2D2p\n\nvar_4           = dword ptr -4\narg_0           = dword ptr  8\narg_4           = dword ptr  0Ch\narg_8           = dword ptr  10h\narg_C           = dword ptr  14h\narg_10          = byte ptr  18h\n\n                push    ebp\n                mov     ebp, esp\n                push    ecx\n                mov     [ebp+var_4], 0\n                jmp     short loc_401366\nloc_40135D:                             ; CODE XREF: sub_401350+46j\n                mov     eax, [ebp+var_4]\n                add     eax, 1\n                mov     [ebp+var_4], eax\n\nloc_401366:                             ; CODE XREF: sub_401350+Bj\n                mov     ecx, [ebp+var_4]\n                cmp     ecx, [ebp+arg_4]\n                jnb     short loc_401398\n                mov     edx, [ebp+arg_0]\n                add     edx, [ebp+var_4]\n                movsx   ecx, byte ptr [edx]\n                mov     eax, [ebp+var_4]\n                xor     edx, edx\n                div     [ebp+arg_C]\n                mov     eax, [ebp+arg_8]\n                movsx   edx, byte ptr [eax+edx]\n                movzx   eax, [ebp+arg_10]\n                add     edx, eax\n                xor     ecx, edx\n                mov     edx, [ebp+arg_0]\n                add     edx, [ebp+var_4]\n                mov     [edx], cl\n                jmp     short loc_40135D\n.text:00401398\nloc_401398:                             ; CODE XREF: sub_401350+1Cj\n                mov     esp, ebp\n                pop     ebp\n                retn    14h\nsub_401350      endp\n\n```\nThis function is called in some other places too. My goal is to call this function with some other parameters to decrypt other stuff and see the content.\n\nHow can I achieve this? how can I call this function with some other parameters using python or any other way? thanks.\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "ida",
    "disassembly",
    "decryption",
    "python",
    "functions"
  ],
  "user": "Ojs",
  "time": "Mar 3, 2018 at 21:11",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "please inline the image, or even better just paste the code",
      "time": null
    },
    {
      "user": "Ojs",
      "text": "here is the code pastebin.com/yUt13qSL",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "I meant to put it in the body, see the edit. it's best to keep content on this site, as external links have a tendency to disappear.",
      "time": null
    },
    {
      "user": "Abr001am",
      "text": "in [ebp+x], x should be a hexadecimal offset where the pointer moves to beyond ebp, i don't know how come it's your password unless it's the whole (ebp+x) that contains it.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "A bit unorthodox, but I personally tend to use Cheat Engine for something \"quick 'n dirty\" like this.\n\nThe basic idea is you'd hook that call, jump to allocated memory which contains instructions you write to move the data you want into any registers/memory that should be passed to the callee, then trace the call to see the results. If the function is shared and is executing at times beyond your control, you could simply use a cmp instruction in your code injection to have your code run only when a certain condition is met.\n\nAn example of what your injection might look like is as follows:\n\n```\n//--Allocate memory page in address space of application\nalloc(newmem,2048,\"application.exe\"+40167E)\n\n//--Create labels for your code\nlabel(returnhere)\nlabel(originalcode)\nlabel(exit)\n\n//--This is where your custom code would go\nnewmem:\n//Maybe pop unwanted values off stack\n//Then push your custom values onto stack\n\n//--This is the CALL you hooked which will now run\noriginalcode:\ncall sub_401350\n\n//--Jump to exit code injection\nexit:\njmp returnhere\n\n//--This hooks the CALL and injects a jump to your allocated memory\n\"application.exe\"+40167E:\njmp newmem\n\n//--Exit label jumps here, returning you to normal execution\nreturnhere:\n\n```\nHere's a video that demonstrates roughly what it looks like to do this type of injection via Cheat Engine.\n\n",
      "votes": "1",
      "user": "dsasmblr",
      "time": "Mar 3, 2018 at 22:36",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "I think the classic way to go about it is to recreate the decoding algorithm after reversing it and then you can test it with any string that you want. A hacky way to do it is to break before the function call and manually change my_password to the string that you wanted to test with. A more automated solution is the Binary Ninja plugin ripr. From its github page: \n\n",
      "votes": "1",
      "user": "yellowbyte",
      "time": "Mar 4, 2018 at 9:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}