{
  "title": "Why struct allocation with new operator in local function makes additional space on stack?",
  "link": "https://reverseengineering.stackexchange.com/questions/29785/why-struct-allocation-with-new-operator-in-local-function-makes-additional-space",
  "content": "I decided to ask the question on this forum because I can not figure out why struct allocation makes the additional 16 bytes space on local function stack(third line at the second snippet).\n\nHere is the c++ simple code and its corresponding assembly version\n\n```\nstruct product {\n  int weight;\n} ;\n\nvoid test() {\nproduct* p;\n\np=new product();\np->weight=1;\n}\n\n```\n```\npush    rbp\nmov     rbp, rsp\nsub     rsp, 16\nmov     edi, 4\ncall    operator new(unsigned long)\nmov     DWORD PTR [rax], 0\nmov     QWORD PTR [rbp-8], rax\nmov     rax, QWORD PTR [rbp-8]\nmov     DWORD PTR [rax], 1\nnop\nleave\nret\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "37",
  "tags": [
    "stack",
    "assembly"
  ],
  "user": "Mateusz Lewandowski",
  "time": "Dec 29, 2021 at 15:55",
  "comments": [],
  "answers_data": [
    {
      "content": "In the future additional information like what architecture and OS is this for would help because the answer does make a difference. (e.g. a long in x86_64 Windows is 32bits, where as Linux it is 64bits).\n\nHowever lets assume this is x86_64 based on the registers used and turns out here the size of a long doesn't matter.\n\nThe short answer is that it's not the struct. It's the pointer to the struct. That 'p' has to go someplace.\n\nAdditionally things returned by new in MOST x86_64 operating systems are 16 byte aligned and so is the stack for performance reasons. So that's where the extra 8 bytes is likely coming from. Could also be space for a stack cookie that's being hidden from your debugger output depending on where you got that assembly output from.\n\n",
      "votes": "1",
      "user": "Thomas Mouton",
      "time": "Dec 29, 2021 at 10:01",
      "is_accepted": true,
      "comments": []
    }
  ]
}