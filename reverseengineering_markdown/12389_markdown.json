{
  "title": "Intel PIN: InsertPredicatedCall and INS_InsertCall",
  "link": "https://reverseengineering.stackexchange.com/questions/12389/intel-pin-insertpredicatedcall-and-ins-insertcall",
  "content": "The intel PIN manual (section Memory Reference Trace) says:\n\n_\n\nIf I want to analyze all instructions that are actually executed, which of the two shall I pick?\n\nI assume INS_InsertPredicatedCall but I am not sure because I have seen INS_InsertCall more often. But why would somebody use it, i.e., why would somebody want to analyze instructions \n\n? Maybe a minimal example of how the two functions lead to different results would be helpful here...\n\n",
  "votes": "4",
  "answers": 1,
  "views": "2k",
  "tags": [
    "assembly",
    "x86",
    "instrumentation",
    "pintool"
  ],
  "user": "langlauf.io",
  "time": "Apr 9, 2016 at 17:46",
  "comments": [],
  "answers_data": [
    {
      "content": "You are correct, we should use INS_InsertPredicatedCall instead of INS_InsertCall in your case. It is quite intuitive to distinguish one from the other, consider the following code\n\n```\ncond:\n  xor eax, eax\n  mov edx, 0x1\n  cmp word [esp + 0x4], 0x5\n  cmovz eax, edx\n  ret\n\n```\nwhose C code is something likes\n\n```\nint cond(int input)\n{\n  return input == 0x5 ? 1 : 0;\n}\n\n```\nIf you use INS_InsertCall to trace executed instructions of cond(input), then for any value of input, you observe always the trace:\n\n```\nxor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\ncmovz eax, edx\nret\n\n```\nBut if you use INS_InsertPredicateCall, then for input != 0x5, you will observe only:\n\n```\nxor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\nret\n\n```\nsince cmovz is a predicated instruction, it is executed only if ZF = 1.\n\n",
      "votes": "3",
      "user": "Ta Thanh Dinh",
      "time": "Apr 10, 2016 at 5:07",
      "is_accepted": true,
      "comments": []
    }
  ]
}