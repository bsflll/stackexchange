{
  "title": "Objective-C disassembling - I dont understand this code",
  "link": "https://reverseengineering.stackexchange.com/questions/17144/objective-c-disassembling-i-dont-understand-this-code",
  "content": "I assembled a simple objective-c file that prints hello to the screen. this is the code:\n\n```\n#import <Foundation/Foundation.h>\nint main() {\n    NSString* a = [NSString stringWithUTF8String: \"hi\"];\n    NSLog(a);\n    return 0;\n}\n\n```\nWhen I assembled it and converted it into Nasm syntax, this is the output:\n\n```\nsection .text\ndefault rel\nextern _OBJC_CLASS_$_NSString\nextern _NSLog\nextern _objc_msgSend   \nglobal _main \n_main:   \n    push rbp \n    mov rbp, rsp \n    sub rsp, 16 \n    lea rdx, [ L_.str] \n    mov dword [rbp - 4], 0\n    mov rax, qword [ L_OBJC_CLASSLIST_REFERENCES_$_] \n    mov rsi, qword [ L_OBJC_SELECTOR_REFERENCES_]\n    mov rdi, rax \n    call    _objc_msgSend \n    mov qword [rbp - 16], rax \n    mov rax, qword [rbp - 16] \n    mov rdi, rax ; rdi has rax\n    mov al, 0 \n    call    _NSLog \n    xor eax, eax \n    add rsp, 16 \n    pop rbp \n    ret \n\nsegment __DATA,__objc_classrefs\nL_OBJC_CLASSLIST_REFERENCES_$_: dq  _OBJC_CLASS_$_NSString\n\n    segment __TEXT,__cstring\nL_.str: db  \"hi\"\n\n    segment .__TEXT,.__objc_methname\nL_OBJC_METH_VAR_NAME_:   db \"stringWithUTF8String:\"\n\n    segment __DATA,__objc_selrefs\nL_OBJC_SELECTOR_REFERENCES_: dq L_OBJC_METH_VAR_NAME_\n\n    segment __DATA,__objc_imageinfo\nL_OBJC_IMAGE_INFO:\n    dd  0\n    dd  64\n\n```\nI understand most of it, like the different objc segments, but I dont understand things like mov   rax, qword [rbp - 16] or even mov al, 0. This is 64 bit assembly code so why is the register al referenced? and why is [rbp-16] stored into rax?\n\n",
  "votes": "2",
  "answers": 1,
  "views": "731",
  "tags": [
    "osx",
    "nasm"
  ],
  "user": "Camden",
  "time": "Jan 8, 2018 at 1:40",
  "comments": [],
  "answers_data": [
    {
      "content": "The instructions\n\n```\nmov qword [rbp - 16], rax \nmov rax, qword [rbp - 16] \n\n```\nare created by the compiler which is using stack based memory allocation to store the result from the NSString objc call. If you compile with optimizations, the compiler should eliminate the need to store the value in stack altogether.\n\nThe \n\n```\nmov al, 0\n\n```\nis set as an input to the NSLog function which is a variadic function so it needs a way to determine how many variables are stored in vector registers (xmm/ymm) vs general purpose ones (e.g. rdi, rsi, etc.) when processing the input arguments. Since the number of vector registers is far less than 256, it only needs to use 8-bits and will only look at al. This saves a bit of space in code utilization as the mov al, xx operation only takes 2 bytes.\n\n",
      "votes": "5",
      "user": "cimarron",
      "time": "Jan 8, 2018 at 5:16",
      "is_accepted": true,
      "comments": [
        {
          "user": "Camden",
          "text": "So mov qword [rbp - 16], rax moves the NSString into rax?",
          "time": null
        },
        {
          "user": "cimarron",
          "text": "It's the other way around. mov qword [rbp - 16], rax moves the value in rax into the stack memory. rax holds the value returned from the objc call which is a pointer to a NSString instance",
          "time": null
        },
        {
          "user": "Camden",
          "text": "so why is there a mov rax, qword [ rbp - 16 ]? wouldnt that be the opposite?",
          "time": null
        },
        {
          "user": "cimarron",
          "text": "Yes, first it saves the return value to memory and then loads it back up into rax. The compiler is just basically translating operations it has identified without trying to optimize anything which is why it is so inefficient.",
          "time": null
        }
      ]
    }
  ]
}