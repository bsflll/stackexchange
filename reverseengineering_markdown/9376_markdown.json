{
  "title": "Instrumenting syscall by static binary rewriting",
  "link": "https://reverseengineering.stackexchange.com/questions/9376/instrumenting-syscall-by-static-binary-rewriting",
  "content": "(The problem is updated... as the investigation goes deep)\n\nMy goal is to intercept all syscalls originated from a shared object file. The requirement is not to modify the kernel code (e.g. can not overwrite the syscall table). \n\nI am considering static binary rewriting technique (specifically, dyninst) to do the job. However, dyninst can only specify instrumentation points by function name. While it is possible to exhaust all syscall functions, can dyninst or one of other static binary rewriting tools allow user to instrument at instruction level. That is, use syscall instruction as instrumentation point.\n\n(I do prefer static instrumentation over the dynamic one, since I need to instrumen one specific shared object.)\n\n",
  "votes": "0",
  "answers": 1,
  "views": "464",
  "tags": [
    "instrumentation",
    "operating-systems",
    "function-hooking",
    "system-call"
  ],
  "user": "Richard",
  "time": "Jul 17, 2015 at 22:18",
  "comments": [],
  "answers_data": [
    {
      "content": "PIN_AddSyscallEntryFunction and PIN_AddSyscallExitFunction should do the trick. Link to the Documentation.\n\nSnippet using theses APIs : (credits to Jurriaan Bremer)\n\n```\n#include <stdio.h>\n#include \"pin.H\"\n\nvoid syscall_entry(THREADID thread_id, CONTEXT *ctx,\n    SYSCALL_STANDARD std, void *v)\n{\n    printf(\"system-call: %d, arguments:\",\n        PIN_GetSyscallNumber(ctx, std));\n    for (int i = 0; i < 4; i++) {\n        ADDRINT value = PIN_GetSyscallArgument(ctx, std, i);\n        printf(\"  %d 0x%08x\", value, value);\n    }\n}\n\nvoid syscall_exit(THREADID thread_id, CONTEXT *ctx,\n    SYSCALL_STANDARD std, void *v)\n{\n    ADDRINT return_value = PIN_GetSyscallReturn(ctx, std);\n    printf(\", return-value: %d 0x%08x  \n\", return_value,\n        return_value);\n}\n\nint main(int argc, char *argv[])\n{\n    if(PIN_Init(argc, argv)) {\n        printf(\"Usage: %s <binary> [arguments]  \n\");\n        return 0;\n    }\n\n    PIN_AddSyscallEntryFunction(&syscall_entry, NULL);\n    PIN_AddSyscallExitFunction(&syscall_exit, NULL);\n\n    PIN_StartProgram();\n    return 0;\n}\n\n```\n",
      "votes": "2",
      "user": "Spl3en",
      "time": "Jul 16, 2015 at 22:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}