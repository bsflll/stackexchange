{
  "title": "Can not continue debugging after SIGTRAP",
  "link": "https://reverseengineering.stackexchange.com/questions/3974/can-not-continue-debugging-after-sigtrap",
  "content": "I am trying to debug an iOS app with gdb and when I hit a breakpoint I get this error, and can not continue.\n\n```\nProgram received signal SIGTRAP, Trace/breakpoint trap.\n[Switching to process 190 thread 0x6fa7]\n0x000ae150 in dyld_stub_pthread_key_create ()\n\n```\nDoes anyone know how I can continue debugging without closing and opening back gdb?\n\n",
  "votes": "4",
  "answers": 3,
  "views": "8k",
  "tags": [
    "ida",
    "disassembly",
    "assembly",
    "gdb",
    "ios"
  ],
  "user": "Nikola C",
  "time": "Mar 27, 2014 at 1:36",
  "comments": [],
  "answers_data": [
    {
      "content": "This could happen if your breakpoint address is in the \"middle\" of the opcode, for example if your asm code looks like this:\n\n```\n0x000C: BLX   R3\n0x000E: LDR   R0, [R6]\n\n```\nand you put breakpoint on address 0x00D, in this case the process will get SIGTRAP on other address than 0x000D, but gdb only knows the 0x00D address from the user input so its just throw SIGTRAP and get stuck.\n\nAlso even when you write the right address to gdb, the arm fallback mode of gdb can cause this kind of problems. \n\n```\nset arm fallback-mode (arm|thumb|auto)\nGDB uses the symbol table, when available, to determine whether instructions are ARM or Thumb. This command controls GDB’s default behavior when the symbol table is not available. The default is ‘auto’, which causes GDB to use the current execution mode (from the T bit in the CPSR register).\n\n```\nSome times gdb cant get the arm mode of a function automatically, and it falling to the wrong mode. You can check this by disassemble piece of code in gdb and check if you see normal assembly or some bad one. if its bad one then your arm assembly mode is wrong, and you can get false SIGTRAP.\n\nAnother advice is not to use gdb in iOS, use lldb. gdb is depreciated, and the only gdb versions available to iOS are ports thats individual people wrote, those ports lack in features (for example some of them don't have the fallback feature at all), and are unreliable.  \n\n",
      "votes": "2",
      "user": "Yaron Shani",
      "time": "Oct 24, 2014 at 18:50",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "If the program is legitimately triggering SIGTRAP itself for some odd reason, and relies on that happening, then you can tell gdb to return to the program and execute the program's own SIGTRAP handling by executing:\n\nsignal SIGTRAP\n\nThis is just like c for continue, except that it continues at the SIGTRAP handler rather than wherever the exception/trap was raised.\n\n",
      "votes": "0",
      "user": "Stephen Warren",
      "time": "May 8, 2019 at 19:17",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "In case it is running into this error Received a SIGTRAP: Trace/breakpoint trap even though there are no breakpoints in the program, check the power of Hardware Debugger e.g. J-Link. \n\nIn my case, J-Link was powered on but the port wasn't delivering enough power. Changing the port to high-power one fixed this.\n\n",
      "votes": "0",
      "user": "hmxmghl",
      "time": "Jan 7, 2020 at 11:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}