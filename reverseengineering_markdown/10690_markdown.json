{
  "title": "How do I bypass this comparison?",
  "link": "https://reverseengineering.stackexchange.com/questions/10690/how-do-i-bypass-this-comparison",
  "content": "I am working on a crackme and I'm stuck on a particular comparison that I'd like your help in getting past(one of many). Here's what I know and the relevant code snippet will follow:\n\nCan you help me bypass the CMP on the last line ?\n\nEDIT: Not allowed to NOP any instructions, need to find the serial number.\n\nCODE:\nR9 is the user-inputted 19 digit string\nAdded entire function\n\n```\nvar_18          = byte ptr -18h\nvar_8           = qword ptr -8\n\nsub     rsp, 18h        ; Follow four lines check for 19-digit user entry\ncmp     edx, 19\nmov     r8, rcx         ; Now holds User inputted string\njz      short loc_140001013\n\nxor     eax, eax\nadd     rsp, 24\nretn\n\nloc_140001013:                          ; CODE XREF: sub_140001000+Aj\nxor     edx, edx\nlea     rax, [r8+4]\nmov     ecx, edx\nxchg    ax, ax\ndb      66h, 66h\nnop\nhyphen_Check:                           ; CODE XREF: sub_140001000+2Fj\ncmp     byte ptr [rax], 2Dh ; Use a FOR loop to ensure - is every 5th character, repeats 3 times\njnz     short loc_14000100C\nadd     ecx, 1\nadd     rax, 5\ncmp     ecx, 3\njb      short hyphen_Check\n\nloc_140001031:                          ; DATA XREF: .rdata:00000001400020C4o\n ; .rdata:00000001400020D8o ...\nmov     [rsp+18h+var_8], rbx\nmov     r10d, edx\nmov     r11d, edx\nlea     rbx, [rsp+18h+var_18]\nmov     r9, r8\nnop\ndb      66h, 66h\nxchg    ax, ax\ndb      66h, 66h\nxchg    ax, ax\ndb      66h, 66h\nxchg    ax, ax\nforLoopCheck:                           ; CODE XREF: sub_140001000+A2j\nmov     rcx, rdx\nnon_Numeric_Check:                     \nmovsx   eax, byte ptr [r9+rcx] ; Begin FOR loop to check all digits for non-numeric characters\nadd     eax, 0FFFFFFD0h\ncmp     eax, 9          ; Non-number entries are checked here, exits if letters are present\nja      ExitFUNC\nadd     rcx, 1\ncmp     rcx, 4\njl      short non_Numeric_Check ; END FOR LOOP\n\n```\nORIGINAL BLOCK:\n\n```\nmovsx   eax, byte ptr [r9+2] ; Get 3rd digit\n                             ; Likely begins set of first checks on actual digits\nmovsx   ecx, byte ptr [r9+3] ; Get 4th digit\nadd     r11d, 1         ; Loop counter, loops 4 times, for each set of digits\nadd     ecx, eax        ; Set ECX to 3rd digit + 4th digit\nmovsx   eax, byte ptr [r9+1] ; Set EAX to 2nd digit\nadd     rbx, 4\nadd     ecx, eax        ; Adds 2nd digit to total\nmovsx   eax, byte ptr [r9] ; Move first digit into EAX\nadd     r9, 5           ; Moves to 2nd set of digits\nadd     ecx, eax        ; Adds 1st digit to total\nadd     ecx, r11d       ; Adds 1, for a total of 10\nnop\nnop\nmov     [rbx-4], ecx    ; Added four digits stored here too\nadd     r10d, ecx       ; R10d becomes our added ECX value from above\ncmp     r11d, 4         ; Loop counter check\njb      short forLoopCheck\nshr     r10d, 2         ; shifts right r10d by 2, AKA divides by 4\nmov     ecx, edx\nlea     rax, [rsp+18h+var_18] ; var_18 = -18h\nxchg    ax, ax          ; A NO OP\ncmp     [rax], r10d     ; Compares right shifted 2 value to whatever is in RAX\njnz     short ExitFUNC  ; Compare above must be the same value\n\n```\nLAST CHECK:\n\n```\n.text:00000001400010C4 loc_1400010C4:                          ; CODE XREF: sub_140001000+ECj\n.text:00000001400010C4                 movzx   ecx, byte ptr [r8+rax+15] ; Move last set of 4 into ECX\n.text:00000001400010CA                 cmp     [r8+rax], cl    ; CL = 1st digit of last 4, R8 = 1st dig of 1 set\n.text:00000001400010CE                 jz      short ExitFUNC  ; Kicks you out\n.text:00000001400010D0                 movzx   r9d, byte ptr [rax+r8+5]\n.text:00000001400010D6                 cmp     cl, r9b         ; cmp 1st digit of last 4 with 1st digit of 2nd 4\n.text:00000001400010D9                 jz      short ExitFUNC\n.text:00000001400010DB                 cmp     r9b, [rax+r8+10] ; cmp 1st digit of 2nd set to 1st digit of 3rd set\n.text:00000001400010E0                 jz      short ExitFUNC\n.text:00000001400010E2                 add     edx, 1\n.text:00000001400010E5                 add     rax, 1\n.text:00000001400010E9                 cmp     edx, 4\n.text:00000001400010EC                 jb      short loc_1400010C4\n\n```\n",
  "votes": "1",
  "answers": 1,
  "views": "1k",
  "tags": [
    "x86",
    "x86-64"
  ],
  "user": "Asa Hunt",
  "time": "Aug 24, 2015 at 17:43",
  "comments": [
    {
      "user": "rev",
      "text": "nop the jnz and done?",
      "time": null
    },
    {
      "user": "Asa Hunt",
      "text": "I'm required to figure out a certain serial number, so NOPing the jumps is out of the question.",
      "time": null
    },
    {
      "user": "rev",
      "text": "well, you said 'bypass'... anyway, can you share the binary you're reversing, or it's private?",
      "time": null
    },
    {
      "user": "Asa Hunt",
      "text": "I wouldn't want to share it publicly, but I could send it to you in private. Not sure how that would work though.",
      "time": null
    },
    {
      "user": "Guntram Blohm",
      "text": "Please add the forLoopCheck label to your assembly, at the moment, i'll assume it's right at the top. If you don't want to nop out the cmp, you'll need to find out what it compares with; set a breakpoint and run if neccesary. From this code, it seems any 16 digits that sum up to the correct value should work, but since the individual sums are stored at the [rbx] array as well, be prepared that more checks are likely to be done with those values.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here's what your serial checking algorithm looks like:\n\n```\n// expects xxxx-xxxx-xxxx-xxxx\nbool check_serial(char inp[]){\n    int total = 0;\n    int checksum = 1 + (inp[0] + inp[1] + inp[2] + inp[3]);\n\n    for (int i = 1; i <= 4; i++) {\n        total += i + (inp[0] + inp[1] + inp[2] + inp[3]);\n        inp += 5;\n    }\n\n    total /= 4;\n\n    printf(\"chk is %d, total is %d  \n\", checksum, total);\n\n    return (checksum == total);\n}\n\n```\nI'll explain what the value at rsp is only, as you seem to understand the rest of the algorithm.\n\nFirst, you have this instruction:\n\n```\ncmp     [rax], r10d\n\n```\nCheck what rax is:\n\n```\nlea     rax, [rsp+18h+var_18]\n\n```\nSince var_18 is -0x18, we know that 0x18 + (-0x18) is 0, so the above is equivalent to:\n\n```\nlea     rax, [rsp]\n\n```\n(you can put the cursor over 18h and press K in IDA, it'll get rid of the variable name and just show [rsp])\n\nWhich is equivalent to:\n\n```\nmov     rax, rsp\n\n```\nWhich means that your cmp is doing:\n\n```\ncmp     [rsp], r10d\n\n```\nNow, you need to find out what's on the stack. For that, you check the function again, and search for any references to rsp. You can click over rsp so IDA highlights everywhere it's used.\n\nAfter a quick look, this seems interesting:\n\n```\nlea     rbx, [rsp+18h+var_18]\n\n```\nAs noted before, it can be simplified to:\n\n```\nlea     rbx, [rsp]\n\n```\nWhich is basically:\n\n```\nmov     rbx, rsp\n\n```\nNow we know that rbx is pointing to the top of the stack, and in the compare function, we see this:\n\n```\nadd     rbx, 4\n; ...\n; ...\n; ...\nmov     [rbx-4], ecx\n\n```\nThe first time that code is run, rbx points to the top of the stack; it's incremented once, but then the mov dereferences rbx - 4, which makes it be equivalent to:\n\n```\nmov     [rbx], ecx\nadd     rbx, 4\n\n```\nWhich is essentially setting the element and skipping to the next one.\n\nNow, since rbx points to the top of the stack, the first iteration will save the sum (i.e. ecx) to the top of the stack (which is the value you need to match), and increase the pointer to the next element (which you don't need here anymore).\n\nBingo, we've found out what's at rsp. It's just the value of ecx in the first iteration, which is basically the sum of the first group of characters plus one.\n\nNext, notice it's using the ASCII codes of each digit instead of the digits themselves:\n\n```\nmovsx eax, byte ptr [r9]\n\n```\nSince r9 points to a char array, the digit '1' is actually 49 (ASCII 49 = 1).\n\nTo understand it better:\n\n```\nchar serial[] = \"1111-2222-3333-4444\";\nint current_char = serial[0]; // puts the integer value 49, not 1\n\n```\n",
      "votes": "2",
      "user": "rev",
      "time": "Aug 23, 2015 at 18:03",
      "is_accepted": true,
      "comments": [
        {
          "user": "Asa Hunt",
          "text": "Awesome answer man, thanks a lot. Your number 1111-1111-1111-0000 does pass the check we've been talking about. I'm working on the next part of the puzzle. It's basically (add all 16 digits + 10) / 4. Compare this number to the sum of the first 4 PLUs 1, the second 4 PLUS 2, third 4 PLUS 3, and last four PLUS 4. I'll be sitting here fiddling with the numbers all night.",
          "time": null
        },
        {
          "user": "rev",
          "text": "@AsaHunt you need a full blown keygen, or a single valid serial?",
          "time": null
        },
        {
          "user": "rev",
          "text": "@AsaHunt I just made this serial from the top of my head, can you check if it passes all the checks? 1111-1110-1100-1000 -- if it does, I can help you make a keygen for it",
          "time": null
        },
        {
          "user": "Asa Hunt",
          "text": "I just figured out the remaining checks! This was just an exercise I had to do for a job interview. Basically, figure out the algorithm that checks for valid serial numbers. Here's a break down:   - 19 digits in the form xxxx-yyyy-zzzz-eeee  - All 16 digits summed up + 10 and divided by 4 must equal the first 4 digits summed plus 1, second 4 digits summed plus 2, third 4 digits summed plus 3, fourth 4 digits summed plus 4.  - The digits in the corresponding indices for 1st and 4th set can't be equal, and the same for the 2nd and 4th set. Lists don't work for me.",
          "time": null
        },
        {
          "user": "rev",
          "text": "I don't understand your last sentence; still, could you post the assembly of the code that does these checks? I think that's the best way of understanding it",
          "time": null
        }
      ]
    }
  ]
}