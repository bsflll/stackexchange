{
  "title": "Find the instruction matching an opcode",
  "link": "https://reverseengineering.stackexchange.com/questions/4522/find-the-instruction-matching-an-opcode",
  "content": "I have two bytes '\\x74\\x06' and I want a list of all instructions that start with this opcode.\n\nWhat tools would you use for this? I am trying to do it with Immunity Debugger but so far no luck. The only solution I found is based on Example 3 from corelancoder's cheatsheet. However this requires that there is a binary currently loaded in Immunity and that it contains an instruction starting with that opcode.\n\nHow can I quickly get a mapping (partial) opcode -> instruction?\n\n",
  "votes": "2",
  "answers": 3,
  "views": "2k",
  "tags": [
    "tools",
    "immunity-debugger"
  ],
  "user": "John Nemo",
  "time": "Jun 4, 2014 at 14:45",
  "comments": [
    {
      "user": "nrz",
      "text": "0x74 is always jz/je (they're synonymous). In Linux you can generate all byte sequences you're interested of, pipe them to some disassembler (I like udcli) and grep the output for valid instructions, like this (to get all 2-byte x86-64 instructions that begin with 0f): bytes='0f'; bytes_wo_spaces=$(echo $bytes | tr -d ' '); for i in {0..255}; do printf \"$bytes %x  \n\" $i | udcli -x -64; done | grep $bytes_wo_spaces | grep -v '\\<invalid\\>'. This can be extended to longer instructions too (to some limit). It can probably be done in Windows console too.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Here is a way to do this with radare2 program rasm2\n\n```\nrasm2 -a x86 -b 32 -d 7406\n\nje 0x8\n\n```\nThis has obviously already been established as je from the other answers.  \n\nBut for arguments sake, say you wanted to decode all instructions starting with 0x74 for one additional byte, you could then run the above in a loop and try and find all valid instructions.  This example is for Linux or a Unix shell of some kind, I presume you could achieve the similar with mingw or Powershell:\n\n```\nfor x in `seq 0 255`;do printf \"74%02x \" $x;rasm2 -a x86 -b 32 -d 74`printf \"%02x\" $x`;done\n\n```\nProduces:\n\n```\n7400 je 0x2\n7401 je 0x3\n7402 je 0x4\n7403 je 0x5\n\n```\n(etc...)\n\nAnother example:\n\n```\nfor x in `seq 0 255`;do printf \"33%02x \" $x;rasm2 -a x86 -b 32 -d 33`printf \"%02x\" $x`;done\n\n```\ngives\n\n```\n3300 xor eax, [eax]\n3301 xor eax, [ecx]\n3302 xor eax, [edx]\n3303 xor eax, [ebx]\n3304 disassemble error at offset 0\ninvalid\n3305 disassemble error at offset 0\ninvalid\n3306 xor eax, [esi]\n\n```\n(etc)\n\nYou could then write a script to grep out the errors and just show valid codes (or the opposite even if you wanted)\n\n",
      "votes": "2",
      "user": "perror",
      "time": "Jun 5, 2014 at 12:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "If it's x86, and I'm quite sure it is, you should check this link and this link. \n\n",
      "votes": "1",
      "user": "yaspr",
      "time": "Jun 4, 2014 at 13:48",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jason Geffner",
          "text": "Yes, as can be seen in yaspr's first link, only one x86 instruction starts with 0x74: JZ/JE - ref.x86asm.net/coder32.html#x74",
          "time": null
        },
        {
          "user": "John Nemo",
          "text": "Thank you yaspr. The links are indeed very helpful. However I would appreciate a tool-based solution to avoid the dependencie to websites that might go offline without notice",
          "time": null
        }
      ]
    },
    {
      "content": "windbg\n0:000> .for ( r $t0 = 0; @$t0 < 0x8 ;r  $t0 = @$t0 +1 ) {eb eip 74 @$t0; u @eip l1 ; !opcodemap } \n\n```\ncalc!WinMain+0x5:\n01001f56 7400            je      calc!WinMain+0x7 (01001f58)\n\nInstr   OpCode  Dest    Source\nje  7400        01001f58\ncalc!WinMain+0x5:\n01001f56 7401            je      calc!WinMain+0x8 (01001f59)\n\nInstr   OpCode  Dest    Source\nje  7401        01001f59\ncalc!WinMain+0x5:\n01001f56 7402            je      calc!WinMain+0x9 (01001f5a)\n\nInstr   OpCode  Dest    Source\nje  7402        01001f5a\ncalc!WinMain+0x5:\n01001f56 7403            je      calc!WinMain+0xa (01001f5b)\n\nInstr   OpCode  Dest    Source\nje  7403        01001f5b\ncalc!WinMain+0x5:\n01001f56 7404            je      calc!WinMain+0xb (01001f5c)\n\nInstr   OpCode  Dest    Source\nje  7404        01001f5c\ncalc!WinMain+0x5:\n01001f56 7405            je      calc!WinMain+0xc (01001f5d)\n\nInstr   OpCode  Dest    Source\nje  7405        01001f5d\ncalc!WinMain+0x5:\n01001f56 7406            je      calc!WinMain+0xd (01001f5e)\n\nInstr   OpCode  Dest    Source\nje  7406        01001f5e\ncalc!WinMain+0x5:\n01001f56 7407            je      calc!WinMain+0xe (01001f5f)\n\nInstr   OpCode  Dest    Source\nje  7407        01001f5f\n\n```\ntrying another variation notice how disassemble with one constant byte one variable byte automatically pulls other bytes as needed \n\n0:000> .for ( r $t0 = 0; @$t0 < 0x8 ;r  $t0 = @$t0 +1 ) {eb eip ff @$t0; u @eip l1 ; !opcodemap } \n\n```\ncalc!WinMain+0x5:\n01001f56 ff00            inc     dword ptr [eax]\n\nInstr   OpCode  Dest    Source\ninc ff00        dword ptr [eax]    \ncalc!WinMain+0x5:\n01001f56 ff01            inc     dword ptr [ecx]\n\nInstr   OpCode  Dest    Source\ninc ff01        dword ptr [ecx]    \ncalc!WinMain+0x5:\n01001f56 ff02            inc     dword ptr [edx]\n\nInstr   OpCode  Dest    Source\ninc ff02        dword ptr [edx]    \ncalc!WinMain+0x5:\n01001f56 ff03            inc     dword ptr [ebx]\n\nInstr   OpCode  Dest    Source\ninc ff03        dword ptr [ebx]    \ncalc!WinMain+0x5:\n01001f56 ff0406          inc     dword ptr [esi+eax]\n\nInstr   OpCode  Dest    Source\ninc ff0406      dword ptr [esi+eax]\ncalc!WinMain+0x5:\n01001f56 ff0506010081    inc     dword ptr ds:[81000106h]\n\nInstr   OpCode  Dest    Source\ninc ff0506010081        dword pt\ncalc!WinMain+0x5:\n01001f56 ff06            inc     dword ptr [esi]\n\nInstr   OpCode  Dest    Source\ninc ff06        dword ptr [esi]    \ncalc!WinMain+0x5:\n01001f56 ff07            inc     dword ptr [edi]\n\nInstr   OpCode  Dest    Source\ninc ff07        dword ptr [edi]  \n\n```\n",
      "votes": "0",
      "user": "blabb",
      "time": "Jun 4, 2014 at 19:20",
      "is_accepted": false,
      "comments": []
    }
  ]
}