{
  "title": "GUI for transforming Java Bytecode based on decompiled source?",
  "link": "https://reverseengineering.stackexchange.com/questions/5941/gui-for-transforming-java-bytecode-based-on-decompiled-source",
  "content": "Okay. So I've just come up with the most amazing program for java developers and reverse-engineerers and I was wondering if something like the following program already exists:\n\nWhat I'm thinking of is like a middle-ground between something like DirtyJOE and a Java Decompiler.\n\nI already know that:\n\nSo is there some sort of program that can show me a decompiled class and allow me to manipulate/inject into different parts of it individually?\n\nFor example, I would like replace one method with my own or change a field's access within a compiled class file.\n\nSo basically I'm looking for a frontend for ASM built with an interface based on decompiled source code.\n\nDoes this exist? If not, what's the closest thing I'm going to get to it?\n\n",
  "votes": "7",
  "answers": 2,
  "views": "6k",
  "tags": [
    "disassembly",
    "decompilation",
    "java",
    "byte-code",
    "jar"
  ],
  "user": "Taconut",
  "time": "Jul 26, 2014 at 18:15",
  "comments": [
    {
      "user": "Antimony",
      "text": "Have you tried IDA Pro?",
      "time": null
    },
    {
      "user": "Taconut",
      "text": "Can IDA actually edit stuff, though? I've never really used IDA that much.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "You can try using javasnoop (https://code.google.com/p/javasnoop/) to accomplish something similar.\n\nHere's a tutorial for using it -\n\nhttp://resources.infosecinstitute.com/hacking-java-applications-using-javasnoop/\n\n",
      "votes": "4",
      "user": "REnoob",
      "time": "Jul 27, 2014 at 13:27",
      "is_accepted": true,
      "comments": [
        {
          "user": "Taconut",
          "text": "After looking at a video showcasing JavaSnoop, I have now decided that it is by far the coolest program in existence. However, I can't seem to get the \"Attach to existing process\" working. Thinking it was my JRE, I tried 32xJRE7, 64xJRE7, 64xJDK7, and 64xJDK6 (all of which didn't let me attach onto any of the applets or programs I had running in the background). Currently, I'm using reJ (from Extreme Coders' answer), but this program seems like it would benefit me much more.",
          "time": null
        },
        {
          "user": "REnoob",
          "text": "Have you had a look in the Readme (javasnoop.googlecode.com/svn-history/r32/trunk/resources/â€¦) for Javasnoop ? It lists a number of steps required to setup Javasnoop correctly. Other than those steps, maybe you could try running it with Admin privileges ?",
          "time": null
        },
        {
          "user": "Taconut",
          "text": "I had to specifically run the bat file from an Administrator command prompt. I was trying to right-click on the bat file and select \"Run as Administrator.\" That didn't work.",
          "time": null
        }
      ]
    },
    {
      "content": "Some tools you can use. However note that none of them has the ability to recompile classes, i.e you cannot decompile a single class to source, modify it, and then recompile back. It may be possible using Reflection API but then you need to do a lot of modification on the decompiled source itself. Other ways may be to decompile the entire bunch of classes and then recompile all when done.\n\n\n\nJBE - Java Bytecode Editor\nJBE is a bytecode editor suitable for viewing and modifying java class\n  files. It is built on top of the open-source jclasslib bytecode viewer\n  by ej-technologies. For verification and exporting the class files,\n  JBE uses the the Bytecode Engineering Library by Apache's Jakarta\n  project.\n\n\n\nClass Construction Kit\nThe Class Construction Kit is a tool for the visual creation or\n  modification of Java class files. It is implemented using BCEL and\n  Swing.\n\n\n\nreJ \nThe reJ project aims to allow improved visibility into Java class files, whether they were created compiling from Java\n  sources, another language or by any other kind of tool. Basically\n  anything that will run in a Java Virtual Machine.\n  reJ is a library and a graphical tool for inspection (viewing,\n  searching and comparing) and manipulation (modification, obfuscation,\n  refactoring of methods, fields, attributes and code) of classfiles for\n  the Java platform.\n\n\n\nBcelEditor\nBcelEditor is a tool for the visual modification of Java class files.\n  It is implemented using BCEL. \n  Note: You need to register on the site to get access\n\n\n\nMethodBodyEditor for Java\nA Java class editor Note: You need to register on the site to\n  get access\n\nOther than this, some other generic java tools are available on tuts4you\n\n\n",
      "votes": "6",
      "user": "0xec",
      "time": "Jul 27, 2014 at 3:35",
      "is_accepted": false,
      "comments": [
        {
          "user": "Taconut",
          "text": "Man! ReJ is awesome! I guess this is the best it gets for editing jars. I might create a tool, but I'd need so much reflection... Anyway, thank you. I'll definitely use these tools for the foreseeable future.",
          "time": null
        }
      ]
    }
  ]
}