{
  "title": "How can I generate a call graph from an unstripped x86 Linux ELF?",
  "link": "https://reverseengineering.stackexchange.com/questions/9113/how-can-i-generate-a-call-graph-from-an-unstripped-x86-linux-elf",
  "content": "There's a piece of software, for which I only have the binary, not the source code. It's:\n\nI don't need the full call graph, just the call graph / control flow when given certain arguments. The only reverse engineering I've done has been relatively basic stuff with binutils + gdb + strace. Essentially, I just need a piece of software to match up 'call' and 'ret' pairs, and translate 'call' instruction destinations to their human-readable symbol names. Hopefully generate a readable 2D graph image to give me a feel for app execution.\n\nSo, something to map control flow. It is just a single binary (with some dynamic library dependencies), but it's large enough that manual traces would be prohibitively labor-intensive.\n\nEDIT: I don't want to have to pay for anything or run windows to do this. If at all possible, I'd like to be able to run something natively on Linux.\n\n",
  "votes": "11",
  "answers": 4,
  "views": "8k",
  "tags": [
    "x86",
    "linux",
    "elf",
    "visualization"
  ],
  "user": "Parthian Shot",
  "time": "Jun 10, 2015 at 21:55",
  "comments": [],
  "answers_data": [
    {
      "content": "Radare2 is also able to collect the callgraph of a program based on its binary only.\n\nSome time ago, I asked this question which is somehow related to yours and one of the author of Radare2 answered:\n\nYet, if you want a graphical representation of the callgraph here is the way to do:\n\n```\n$> radare2 /usr/bin/md5sum\n... start of radare2 ...\n[0x00402427]> aa\n[0x00402427]> afl\n[0x00402427]> ag > b.dot\n[0x00402427]> !xdot b.dot\n\n```\nThe aa command collect information about the analyzed binary. Then, the afl command collect information about all the function call sites (addr, size, bbs, name). Finally, the ag command output the graphviz representation of the collected data. Note that we dumped the data in the file b.dot, I used the xdot software from the Radare2 prompt but it can be done outside of the Radare2 shell (of course).\n\nI found this way of doing in a talk given at Auckland in 2015 by Andrew McDonnell (slides 26-27).\n\n",
      "votes": "9",
      "user": "Community",
      "time": "Apr 13, 2017 at 12:49",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "All (caller, callee)-tuples except for direct recursion and duplicates:\n\n```\nobjdump -d $BINARY_FILENAME \\\n| grep '<' \\\n| sed -e 's/^[^<]*//' \\\n| sed 's/<\\([^+]*\\)[^>]*>/\\1/' \\\n| awk 'BEGIN { FS = \":\" } \\\n       NF>1 { w=$1; } \\\n       NF==1 && w != $1 { print \"(\\\"\" w \"\\\", \\\"\" $0 \"\\\"),\" }' \\\n| sort -u\n\n```\n",
      "votes": "5",
      "user": "lambda",
      "time": "Mar 15, 2017 at 20:44",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "You can use IDA Pro to generate call graphs:\n\n\n(source: hex-rays.com)\n\n",
      "votes": "4",
      "user": "Glorfindel",
      "time": "Dec 29, 2020 at 7:34",
      "is_accepted": false,
      "comments": [
        {
          "user": "Parthian Shot",
          "text": "I'd always thought of IDA as Windows-specific. Learn something new every day... edit: I'll leave my upvote, because I didn't specify \"free\" but  the free version of IDA is an exe.",
          "time": null
        },
        {
          "user": "Jason Geffner",
          "text": "According to WineHQ, IDA's graph view works just fine in the free version of IDA 5.0 when run on Wine.",
          "time": null
        },
        {
          "user": "Parthian Shot",
          "text": "Good point. Testing it now. :)",
          "time": null
        }
      ]
    },
    {
      "content": "You can use Ghidra to generate call graphs for various binaries, including x86 Linux ELF binaries.\n\n",
      "votes": "1",
      "user": "auspicious99",
      "time": "Jan 6, 2021 at 14:27",
      "is_accepted": false,
      "comments": []
    }
  ]
}