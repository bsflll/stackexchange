{
  "title": "Are offsets within a loaded dll always the same relative to each other?",
  "link": "https://reverseengineering.stackexchange.com/questions/26221/are-offsets-within-a-loaded-dll-always-the-same-relative-to-each-other",
  "content": "If I load a dll in 2 different processes, will the offsets calculations within one process hold for the other process?\n\nI'm currently trying to patch the import table of a dll, once injected into a remote process. I was wondering if I could LoadLibrary and GetProcAddress in the injector process and simply math an expected location in the target process based on the address where the dll is loaded.\n\n",
  "votes": "2",
  "answers": 1,
  "views": "451",
  "tags": [
    "windows",
    "dll-injection"
  ],
  "user": "Eric",
  "time": "Nov 2, 2020 at 8:40",
  "comments": [
    {
      "user": "blabb",
      "text": "non relocatable address will be same in all loaded instances of your dll relocatable address will have differnt base based on where it is loaded",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Yes.\nExecutable relocations, whether performed for optimization or security, will only relocate the image (executable, shared object) as a whole.\n\nFor that reason, to bypass ASLR for example, any single address within a chosen shared object is sufficient. Given, of course, you know the precise version and build of the shared object. Knowing the specific build might be an issue by itself, however.\n\nThe reason relocations are done at the shared object level (and not, say, the function level) is because a shared object often has many internal relative references. Those are references that are addressed relatively (and not absolutely) within a single shared object.\n\nIn order to relocate at a lower level, many more relocation fixes will be required of the loader.\n\nMoreover, and this is more of a historic reason than a technological one, relocations were intended to solve a problem with sharing an address space between multiple shared objects. There was simply no need to do more than change the location of a module altogether. The same base properties were later used for enabling ASLR.\n\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Nov 6, 2020 at 4:40",
      "is_accepted": true,
      "comments": []
    }
  ]
}