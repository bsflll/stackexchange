{
  "title": "What exactly is binary disassembly and what it produces?",
  "link": "https://reverseengineering.stackexchange.com/questions/18276/what-exactly-is-binary-disassembly-and-what-it-produces",
  "content": "The first time I heard about binary disassembly I thought that it is something what can be called as perfect decompilation tool to assembly code and I still don't understand why it is not. I thought that assembly opcodes can be translated directly to binary sequences and directly back from binary sequences to opcodes but leater I heard about some things like possibility of mixing code and data and possibly some other things that make my thought about that I could dissasemble any binary and back assemble it to recreate the same binary impossible. Please don't downvote me immediately. I know practically nothing about reverse engineering and I'm thinking about starting my adventure with it. Can You please axplain me on some examples why things are like they are ?\n\n",
  "votes": "7",
  "answers": 3,
  "views": "11k",
  "tags": [
    "disassembly",
    "decompilation"
  ],
  "user": "Daro",
  "time": "May 15, 2018 at 18:51",
  "comments": [],
  "answers_data": [
    {
      "content": "First of all welcome to the world of reverse engineering, if there was really such a tool as a perfect disassembler this whole stack exchange forum wouldn't even exist.\n\nBefore tackling your question right away I'd like to start talking about what reversing really means and what it is all about as I see it as a more appropriate approach to your question.\n\nThe first question you ask given a binary file is \"What?\" I mean in both senses, a binary dump of what seems to be an infinetely large sequence of zeroes and ones and is in fact a your favorite video game or driver.\n\nHow do you interpret the data?\nHonestly, this sequence could be anything a text file, program, driver, image, music, video, some trojan etc.. and suppose you know it's one of the above, you still don't know how to interpret it, if it's some sort of media, what format is it (png, mp3, avi...)? \nIf it is a program for which platform is it (windows / Linux) or even worse what CPU architecture is it even for (x86, ARM, PowerPC, MSP430...), and what version of that CPU is it for?. Wait but what if it is encrypted? What encryption is it? I believe you get the point by now.\n\nThe last paragraph is meant to give a sense to the ridiculously large amount of possibilities that this said series of code could represent.\nNow your question is specifically about code disassembly. Disassembly is exactly the process of converting the different binary sequences into their original opcode, however when you get a program and supposing you know the platform / CPU / version etc..\n\nAnd, supposing the opcodes couldn't be mixed up. For example, Let 0101 (instruction a), 0011 (b) be opcodes, suppose there is also longer different opcodes 01010011 (c) and 00110101 (d). Given the sequence 0101001100110101\nHow do you know how to interpret the code (abba, cd, cab..)? (Spoiler: usually ISAs are designed in a way that such collisions wouldn't be made possible)\n\nGreat, we now supposedly have a perfect disassembler and now we want to get a step further, and get the original code. Here comes the problem\n\nTake for example the following code:\n\n```\n.loop:\n    xadd eax, edx\n    loop .loop\n\n```\nBasically what we see here is a command of addition and exchange (add edx to eax and then switch their content) now the trivial way to make out the original code would be something like:\n\n```\nfor (int i = n; i > 0; i--)\n{\n    a += b;\n    switch(a, b);\n}\n\n```\nHowever the smart reverse engineer could translate it as such:\n\n```\ngenrate_nth_fibonnacci(n);\n\n```\nwhen eax and edx start at 0 and 1\n\nSimilarly, a series of random commands in a malware may be translated into \"makeAntivirusNotNotice\" function or in an otherwise legit program be a very efficient algorithm for a special case.\n\nThus, programming also has intention when writing the code so when you are trying to reverse a program the same code or as mentioned earlier seemingly chaotic series of bytes could have different meanings depending on context, a lot of high level code alternatives and as of the time of writing there still isn't a tool which can also predict the original programmer's intention. The best decompilers and reversing tools such as Radare and IDA try to analyze better and imitate such functionality but right now it is the reverse engineer's task.\n\n",
      "votes": "5",
      "user": "Elian Kamal",
      "time": "May 15, 2018 at 21:39",
      "is_accepted": true,
      "comments": [
        {
          "user": "savram",
          "text": "Another great decompiler, free and easy to use, is retdec.com",
          "time": null
        }
      ]
    },
    {
      "content": "Consider reading chapters 1, 2 and 3 of Computer Systems: A Programmer's Perspective. It explains everything. Strive to gain an understanding of the fundamental concepts of computer architecture and programming languages before diving into reverse engineering.\n\nIt is important to understand what compilation is and what assembly is before attempting to understand decompilation and disassembly.\n\nWhen you say \"assembly opcodes\" what you mean is assembly language mnemonics corresponding to machine-language operation codes. While there is a strong relationship between assembly language and machine language, the relationship is not necessarily 1-to-1. Take a look at Why there are not any disassemblers that can generate re-assemblable asm code?.\n\n",
      "votes": "3",
      "user": "julian",
      "time": "May 15, 2018 at 20:47",
      "is_accepted": false,
      "comments": [
        {
          "user": "Daro",
          "text": "the question 'Why there are not any disassemblers that can generate re-assemblable asm code?.' is what I wanted to know. Thanks for pointing this out",
          "time": null
        }
      ]
    },
    {
      "content": "disassembly produces a human readable mnemonic form hexbytes  \n\nthe processor understands 0's and 1's  \n\nthe binary contains an encoded version of 0's and 1's  in the form of hex bytes \n\nif one needs to instruct the processor to mov 1 to register eax \n\nit needs to be encoded as 0b1011100000000001000000000000000000000000\n\nwhich when converted to hex (base 16 instead of base 2 as above )\nwill become  > 0xb801000000\n\ndisassembler takes this > 0xb801000000 interprets and dispalys this hex bytes\nas mov eax ,1 \n\nthe high level languages does not know about registers \nyou will write code like \n\nint a =1;   \n\nthis can be translated as mov eax,1 or mov ebx,1 or mov [addr] , 1\n\nso converting back one of several forms back to original is not possible always \n\n",
      "votes": "1",
      "user": "blabb",
      "time": "May 15, 2018 at 20:30",
      "is_accepted": false,
      "comments": []
    }
  ]
}