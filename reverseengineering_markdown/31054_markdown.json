{
  "title": "Why do the first bytes of this executable contain a path to busybox?",
  "link": "https://reverseengineering.stackexchange.com/questions/31054/why-do-the-first-bytes-of-this-executable-contain-a-path-to-busybox",
  "content": "I'm reverse engineering an old TP-Link TD-W9970v3 router for fun and wanted to examine one of the executables called webWarn. Ghidra was unable to recognise the format, which surprised me. I then tried to use the file command on it, and it too did not recognise it, simply reporting it as data. I then opened up the file in a hex editor and was surprised to see that the first bytes in the executable are a string containing a relative path to the location of the busybox executable on the system.\n\nComparing the hex of this executable with a normal ELF executable from the system shows that their headers seem to be the same size. It caught my attention that the presence of the string \"/lib/ld-uClibc.so.0\" in both files starts at the same offset.\n\n\n\nThere are many strings in the binary that seem to refer to C libraries and functions, so it does look like a regular compiled executable.\n\nI uploaded it to Decompiler Explorer (see result) and only BinaryNinja was able to recognise the file apparently, although trying to upload it to BinaryNinja's own cloud service didn't work\n\nWhat binary format is this?\n\n",
  "votes": "5",
  "answers": 1,
  "views": "98",
  "tags": [
    "binary-format"
  ],
  "user": "Amr Bekhit",
  "time": "Oct 30, 2022 at 19:35",
  "comments": [
    {
      "user": "multithr3at3d",
      "text": "You may be able to get further with Ghidra if you force opening it as a raw binary and selecting the correct architecture.",
      "time": null
    },
    {
      "user": "Amr Bekhit",
      "text": "Thanks, I gave that a go and tried to open it as raw binary using the same architecture that Ghidra detected for another ELF binary, but the result doesn't appear to be very meaningful, with e.g. warnings about invalid instructions.",
      "time": null
    },
    {
      "user": "secondperson",
      "text": "Are you sure this isn't a symbolic link to busybox that somehow got overlayed on top of the contents of its target (busybox)?   Try comparing it (other than the first 17 bytes) with the busybox executable.  Maybe whatever you're using to view the filesystem of the router has problems opening symlinks?",
      "time": null
    },
    {
      "user": "Amr Bekhit",
      "text": "@secondperson You're right - it looks like something went wrong with binwalk's extraction. I checked the file on the running device with hexdump and it's just a normal ELF executable. Good catch! I used binwalk to extract the JFFS2 image and it has handled other symlniks just fine. Perhaps it's errors in the extracted image data, or a bug in binwalk.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It looks like something went wrong with binwalk's extraction. I checked the file on the running device with hexdump and it's just a normal ELF executable. I used binwalk to extract the JFFS2 image and it has handled other symlniks just fine. Perhaps it's errors in the extracted image data, or a bug in binwalk.\n\nThanks to @secondperson.\n\n",
      "votes": "0",
      "user": "Amr Bekhit",
      "time": "May 30, 2023 at 15:26",
      "is_accepted": true,
      "comments": []
    }
  ]
}