{
  "title": "Which calling convention to use for EAX/EDX in IDA",
  "link": "https://reverseengineering.stackexchange.com/questions/2964/which-calling-convention-to-use-for-eax-edx-in-ida",
  "content": "I have some code (I assume Delphi) which uses only the EAX and EDX register for passing the arguments (and of course the stack if more are required). I looked which calling conventions would match, but I haven't found one which uses only EAX and EDX. \nAFAIK Borland fastcall/register is using EAX and EDX, but also ECX, which is not the case here.\n\nCan I tell IDA somehow about this calling convention? How would I do this?\n\n",
  "votes": "15",
  "answers": 3,
  "views": "11k",
  "tags": [
    "ida",
    "calling-conventions"
  ],
  "user": "Devolus",
  "time": "Oct 27, 2013 at 9:31",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "Can you paste some code which uses EAX, EDX and stack without ECX?",
      "time": null
    },
    {
      "user": "Devolus",
      "text": "After looking into this in more detail, it seems that ECX is indeed used, and that the code usually doesn't need more than two arguments. When I looked at functions with more arguments, I realized that it was the standard with EAX/EDX/ECX/PUSH...",
      "time": null
    },
    {
      "user": "Igor Skochinsky",
      "text": "Okay, so mystery solved then.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "you can add a function type by editing it (Key Y) and adding the name.\n\nI wrote a page to remind me about calling conventions at ASM level.\n\nthe original call is myfunc(0,1,2,3,4).\n\nNote: the stack looks vertically like the call order.\n\n```\npush    4\npush    3\npush    2\npush    1\npush    0\ncall    myfunc\nxor     eax,eax\nretn    10\n\n```\nThis is actually Microsoft's fastcall.\n\n```\npush    4\npush    3\npush    2\nmov     edx,1\nxor     ecx,ecx\ncall    myfunc\nxor     eax,eax\nretn    10\n\n```\n```\npush    4\npush    3\npush    2\npush    1\npush    0\ncall    myfunc\nadd     esp,014\nxor     eax,eax\nretn    10\n\n```\n```\npush    ebx\npush    0\npush    1\npush    2\npush    3\npush    4\ncall    myfunc\nxor     eax,eax\npop     ebx\nretn    10\n\n```\nApparently it's not so clear what the fortran calling convention is, and this one is even different from raymond's post's The __fortran calling convention isn't the calling convention used by FORTRAN.\n\n```\npush    ebx\npush    4\nmov     ecx,3\nmov     ebx,2\nmov     edx,1\nxor     eax,eax\ncall    myfunc\nxor     eax,eax\npop     ebx\nretn    10\n\n```\nUses eax, ecx, edx as first 3 arguments. Other arguments are pushed on stack in reverse order.\n\n```\npush    3\npush    4\nmov     ecx, 2\nmov     edx, 1\nxor     eax,eax\ncall    myfunc\nxor     eax,eax\nretn    10\n\n```\n",
      "votes": "24",
      "user": "David",
      "time": "Jan 20, 2017 at 8:14",
      "is_accepted": true,
      "comments": [
        {
          "user": "Jongware",
          "text": "The retn 10 line at the end of each example is a red herring and likely to confuse. Its value has nothing to do with the examples' calling of myfunc.",
          "time": null
        }
      ]
    },
    {
      "content": "If you run into a calling convention which is not covered by any of the standard calling conventions you can use the __usercall or __userpurge calling convention which allows you to specify which arguments are passed where. The syntax is \n\n```\n\nreturn_type __usercall function_name<registers>(arg0_type arg0<registers>, arg1_type arg1<registers>, ...)\n\n```\nWhere registers can be a grouping of registers separated by the ':' character if the argument occupies more than one register.\n\nIf you're in a really shitty spot calling convention wise you can use the full syntax as described here. Where you instead of simply typing the register name holding the argument you can describe arguments being passed in parts of registers or stack elements. The syntax is as above only with registers replaced by\n\n```\n\n<argoff:register^regoff.size>\n\n```\nor if the argument is passed on the stack\n\n```\n\n<argoff:^stkoff.size>\n\n```\n",
      "votes": "12",
      "user": "Igor Skochinsky",
      "time": "Nov 10, 2013 at 18:40",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Delphi and Borland C++ Builder use EAX, EDX and ECX for the first three arguments in their variant of the __fastcall calling convention. So if you choose \"Delphi\" or \"C++ Builder\" in Options-Compiler, you can just use __fastcall in the function prototype - no need to resort to __usercall.\n\n",
      "votes": "5",
      "user": "Ange",
      "time": "Oct 28, 2013 at 14:56",
      "is_accepted": false,
      "comments": [
        {
          "user": "Peter Andersson",
          "text": "The original poster said that the calling convention only uses EAX and EDX not ECX. It sounds odd to me.",
          "time": null
        }
      ]
    }
  ]
}