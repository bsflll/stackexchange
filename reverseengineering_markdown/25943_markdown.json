{
  "title": "Modify Strings in a ELF (Executable and Linking Format) that are stored in the .rodata",
  "link": "https://reverseengineering.stackexchange.com/questions/25943/modify-strings-in-a-elf-executable-and-linking-format-that-are-stored-in-the",
  "content": "I have 2 ELF files here, each containing strings in the \".rodata\" for an translation that I want to modify.\nThe first ELF \"(binary1)\" I have already successfully modified from Chinese to German.\nThe second ELF \"(binary2)\" has a slightly different structure.\nIn my first ELF file \"(binary1)\", which I successfully modified, the pointers for the respective strings were in the \".data.rel.ro\" part.\nSo with a short C# code I could output the strings.\n\n```\n    static int start_data_rel_ro = 0x1708; \n    static int end_data_rel_ro = 0x1A3CF; \n\n\n    static void binToConsole(string inputFile)\n    {\n        var data = getData(inputFile);\n        \n        for (int i = start_data_rel_ro; i < end_data_rel_ro;)\n        {\n                var line = \"\";\n\n                    var addr = BitConverter.ToInt32(new byte[] { data[i], data[i + 1], data[i + 2], data[i + 3],0,0,0,0 },0);\n                        i += 4;                        \n                    List<byte> textData = new List<byte>();\n                    do\n                    {\n                        textData.Add(data[addr] == 10 ? ((byte)0x7C) : data[addr]);\n                        addr++;\n                    } while (data[addr] != 0);\n                    line = System.Text.Encoding.UTF8.GetString(textData.ToArray());\n                Console.WriteLine(line);\n        }          \n    }\n  \n    static byte[] getData(string path)\n    {\n        byte[] data;\n\n        using (var file = File.OpenRead(path))\n        using (var ms = new MemoryStream())\n        {\n            file.CopyTo(ms);\n            data = ms.ToArray();                \n        }\n\n        return data;\n    }\n\n```\nFor the \"(binary1)\" I already have a finished program which stores the strings in a CSV and afterwards inserts the CSV back into the \"(binary1)\" and patches the pointers. So I can make a string longer if I make a string shorter somewhere else.\n\nHere is an excerpt of my previous file, which I have processed successfully\n\nThe .rodata contains all strings:\n\n\nThe .data.rel.ro contains all pointers to the strings:\n\n\nbut the new file \"(binary2)\" I want to edit now looks a bit different.\n\n.rodata\n\n\n.data.rel.ro\n\n\nMy C# code can't work in the second ELF, because it's a bit different. Unfortunately I don't know what to do. Maybe someone has an approach for me, so I can write a new little tool.\n\nHere is a download link to the \"(binary2)\": https://drive.google.com/file/d/12vr-zcTnC3TzCIuvZ9Yt19lbb6dkEFdl/view?usp=sharing\n\n",
  "votes": "0",
  "answers": 0,
  "views": "1k",
  "tags": [
    "binary-analysis",
    "elf",
    "binary",
    "c#",
    "binary-editing"
  ],
  "user": "Alonia",
  "time": "Sep 22, 2020 at 8:09",
  "comments": [
    {
      "user": "0xC0000022L",
      "text": "Are you limited to C#? Otherwise you could have a look at elfutils for writing a tool that understands ELF and can manipulate it. If you're tied to C#, however, you may have to generate a C# binding first.",
      "time": null
    },
    {
      "user": "Alonia",
      "text": "@0xC0000022L No, I‘m not limited to C#. It was relatively obvious to me in C# to modify the first ELF. Do you have some experience with this and could give me an approach so that I don‘t have to search many days?",
      "time": null
    },
    {
      "user": "hairlessbear",
      "text": "I can't personally vouch for either of these, but they may be useful. github.com/yalue/elf32_string_replace reverseengineering.stackexchange.com/questions/1843/…",
      "time": null
    }
  ],
  "answers_data": []
}