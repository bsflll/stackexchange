{
  "title": "Link decompiled C code to Assembly (retdec decompiled object into C code, but with many errors, i found the kill switch which i need to edit)",
  "link": "https://reverseengineering.stackexchange.com/questions/26642/link-decompiled-c-code-to-assembly-retdec-decompiled-object-into-c-code-but-wi",
  "content": "I am using retdec to decompile a piece of software. It has a \"kill switch\" to detect if it's being run in an untrusted environment, in the decompiled code it just a simple\n\n```\nif (env_untrusted() == 1)\n   abort()\n\n```\nso i'd like to remove that statement, thing is, the decompiled C code has many compilation errors. Is it possible to see what assembly corresponds to that function, and then change that assemlby to \"return 0\"?\n\nalso, using objdump i can generate assembly, but not in a usable format, is there a way how i can make it print in a usable format so that i can compile that assembly?\n\nso in summary:\ni have decompiled an executable file using retdec into a C file. in that C file i found a function that i'd like to edit, but i cant compile the C file, so i need to find that function in the assembly, how can i do that?\n\nand as a by producct: how can i make objdump only print out assembly\n\n",
  "votes": "0",
  "answers": 1,
  "views": "228",
  "tags": [
    "disassembly",
    "assembly",
    "c",
    "objdump"
  ],
  "user": "user35360",
  "time": "Dec 28, 2020 at 10:11",
  "comments": [
    {
      "user": "user35360",
      "text": "so, i found the answer: the objdump assembly always gives the nmemory location before the actual intruction. retdec gives the memory range per instruction. in the objdum p generated assembly just search for the memory range and done",
      "time": null
    },
    {
      "user": "multithr3at3d",
      "text": "Go ahead and answer your own question then, and mark as accepted.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Assuming, that executable is not packed, and if you got to the killswitch already, just select some asm commands and look for them in debugger. then you can change necessary bytes with NOP.  No recompilation would be necessary at all.\n\nRecompilation, even if successful, will make executable not exactly the same as original code.\n\n",
      "votes": "1",
      "user": "Zurab",
      "time": "Dec 28, 2020 at 15:10",
      "is_accepted": true,
      "comments": []
    }
  ]
}