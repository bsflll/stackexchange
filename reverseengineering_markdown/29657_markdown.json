{
  "title": "IntelPin, Ins_Insertcall?",
  "link": "https://reverseengineering.stackexchange.com/questions/29657/intelpin-ins-insertcall",
  "content": "please help me with Intel Pin:\nI print each instruction to the console and I want to insert +++++ after it using Ins_Insertcall:\n\n```\nVOID CpuidCalled(const CONTEXT* ctxt)\n{\nstd::cerr << \"+++++\" << std::endl;\n}\n\nstd::cerr << INS_Disassemble(ins) << std::endl;\nINS_InsertCall(\nins,\nIPOINT_BEFORE, (AFUNPTR)CpuidCalled,\nIARG_CONTEXT,\nIARG_END\n);\n\n```\nOutput:\n\n```\nmov esp, esi\npop ebx\npop edi\npop esi\npop ebp\nret 0x10\n+++++\n+++++\n+++++\n+++++\n+++++\n+++++\nmov byte ptr [ebp-0x19], al\nmov dword ptr [ebp-0x4], 0xfffffffe\nmov dword ptr [ebp-0x24], 0x0\ncall 0x779fdd6d\n+++++\n+++++\n+++++\n+++++\n\n```\nwhy so and how can it be fixed? Thank you\n\n",
  "votes": "1",
  "answers": 1,
  "views": "203",
  "tags": [
    "c++",
    "pintool"
  ],
  "user": "ALex",
  "time": "Dec 3, 2021 at 11:38",
  "comments": [],
  "answers_data": [
    {
      "content": "that's because you are printing disassembly in instrumentation routine and \"+++++\" in analysis routine.\n\nPIN has theoretically been divided into two routines:\n\nRefer following slides for quick overview:\n\nhttps://www.intel.com/content/dam/develop/external/us/en/documents/cgo2013-256675.pdf\n\nso, what you should do? - depends on your preference - either print both disassembly and \"+++++\" in analysis routine - i.e. inside function CpuidCalled (which makes more sense), or print both in instrumentation routine (which would not make much sense as you want to observe the executed instructions).\n\n",
      "votes": "1",
      "user": "R4444",
      "time": "Dec 3, 2021 at 18:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "ALex",
          "text": "thanks for the answer, but how to call CpuidCalled a function by analogy with INS_Disassemble(ins)? I need to output: mov esp, esi EAX= ... , IP=...",
          "time": null
        },
        {
          "user": "R4444",
          "text": "send it like new string(INS_Disassemble(ins)) as an argument in the instrumentation function",
          "time": null
        },
        {
          "user": "ALex",
          "text": "#include \"pin.H\" #include <iostream> #include <fstream> #include <string> VOID DisplayInstruction(ADDRINT instructionAddress,string assemblyCode){  cout<<std::hex<<instructionAddress<<\":\"<<std::dec<<assemblyCode<<\"  \n\";}  VOID Instruction(INS ins, VOID *v) {         INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)DisplayInstruction,     IARG_INST_PTR, IARG_REG_VALUE,new string(INS_Assemble(ins)), IARG_END); } error new string: type specifier required, may be new std:string?",
          "time": null
        },
        {
          "user": "R4444",
          "text": "IARG_PTR, new string(INS_Disassemble(ins)),",
          "time": null
        },
        {
          "user": "ALex",
          "text": "INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)DisplayInstruction,         IARG_INST_PTR, IARG_PTR, new string(INS_Disassemble(ins)), IARG_END);, but error again:type specifier required",
          "time": null
        }
      ]
    }
  ]
}