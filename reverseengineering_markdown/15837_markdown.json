{
  "title": "How to debug DLL injection in IDA?",
  "link": "https://reverseengineering.stackexchange.com/questions/15837/how-to-debug-dll-injection-in-ida",
  "content": "Recently, I've been cracking a crackme DLL, and I need to inject it into a process, to see if it worked.\n\nHowever, I've ran into a problem. I cannot seem to find how to debug DLL injection inside of ida. I've tried Debugger->Attach to Process, but that doesn't seem to work.\n\nAny ideas?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "debugging",
    "dll",
    "injection"
  ],
  "user": "Verideth",
  "time": "Jul 17, 2017 at 1:59",
  "comments": [],
  "answers_data": [
    {
      "content": "One possibility: Insert a \"code cave\" into your hosting process, and let it load the DLL. For how to do it in a \"generic\" way in x64, look here. An important step of this is how to get the address of the kernel32.dll:\n\n```\nget_OS_DllAddresses:\nmov rax, gs:[60h]               ; PEB\nmov rax, [rax + 18h]            ; PEB::Ldr\nmov rax, [rax + 20h]            ; PEB::Ldr.InMemoryOrderModuleList\nmov rax, [rax]                  ; 1st entry\nmov r15, [rax + 20h]            ; ntdll.dll base address!\nmov rax, [rax]                  ; 3nd entry\nmov rax, [rax + 20h]            ; kernel32.dll base address!\nret\n\n```\nPEB → PEB::Ldr → walk the InMemoryOrderModuleList linked list (LDR_DATA_TABLE_ENTRY).\n\nAfter running this snippet, you have in rax the address of kernel32.dll (correctly also in the case of ASLR), and in r15 the address of ntdll.dll.\n\nIf you study the example given in the above link, you learn how to extract the necessary LoadLibrary calls (for your DLL to be checked), and the GetProcAddress calls, in case your DLL exports API calls.\n\nA simple way to get the \"shellcode\" bytes is to make a little Assembler project e.g. in VisualStudio and let it create the binary code for you.\n\n",
      "votes": "2",
      "user": "0xC0000022L",
      "time": "Jan 27, 2023 at 8:44",
      "is_accepted": false,
      "comments": [
        {
          "user": "0xC0000022L",
          "text": "This seems a little odd. We start out with the InMemoryOrderModuleList, then seem to proceed with the InInitializationOrderLinks? Not that I'm saying that this can't be done, but isn't this relying a bit too much on empirical data? InLoadOrderModuleList always has your.exe -> ntdll.dll -> kernel32.dll -> kernelbase.dll, but the memory order technically depends on the base address.",
          "time": null
        }
      ]
    },
    {
      "content": "dynamic debugging for dll you should use x64dbg or ollydbg. both can load dll to execute and debug.\n\n",
      "votes": "-2",
      "user": "yufeng",
      "time": "Jul 19, 2017 at 3:01",
      "is_accepted": false,
      "comments": []
    }
  ]
}