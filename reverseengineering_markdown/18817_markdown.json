{
  "title": "Lea instruction on datasegment",
  "link": "https://reverseengineering.stackexchange.com/questions/18817/lea-instruction-on-datasegment",
  "content": "I wrote simple program(was built in release mode(x86)) to practise re skills but I can not understand one part of it. \n\nC++ program:\n\n```\nint doSub(int a, int b) \n{\n    int result = a + b;\n    result -= 2;\n    return result;\n}\n\nint doSum(int a, int b)\n{\n    int result = a + b;\n    result += 2;\n    return result;\n}\n\nint main(int argc, char** argv)\n{      \n    int wynik = 0;\n    int liczbaA = atoi(argv[1]);\n    int liczbaB = atoi(argv[2]);\n\n    if (liczbaA > 3)\n    {\n        wynik = doSum(liczbaA, liczbaB);\n    }\n    else\n    {\n        wynik = doSub(liczbaA, liczbaB);\n    }\n\n    std::cout << \"Result\" << wynik;\n    return 0;\n}\n\n```\n\n\nAnd my question is: what is happening here?\n\n```\nlea     ecx, ds:0FFFFFFFEh[ecx*4] ; ??\n\n```\nI supposed to see here two instructions like sub/add. Can someone explain me how it's handled here operation +2 and -2?\n\n@edit\n\n```\nloc_401052:\nmov     edi, [ebp+argv]\npush    dword ptr [edi+4] ; Str\ncall    ds:__imp__atoi\nadd     esp, 4\nmov     ebx, eax\npush    dword ptr [edi+8] ; Str\ncall    ds:__imp__atoi\nxor     ecx, ecx\nadd     esp, 4\nadd     eax, ebx\nmov     edx, offset aResult ; \"Result\"\ncmp     ebx, 3\nsetnle  cl\nlea     ecx, ds:0FFFFFFFEh[ecx*4]\nadd     eax, ecx\npush    eax\npush    ecx\nmov     ecx, ds:__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout\ncall    std__operator___std__char_traits_char___\nadd     esp, 4\nmov     ecx, eax\ncall    ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)\npop     edi\nxor     eax, eax\npop     ebx\nmov     esp, ebp\npop     ebp\nretn\nmain endp\n\n```\n",
  "votes": "1",
  "answers": 2,
  "views": "1k",
  "tags": [
    "ida",
    "disassembly"
  ],
  "user": "Mroczny Arturek",
  "time": "Jul 17, 2018 at 17:19",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "don't put assembly as an image. Please put some effort and use text. It's easier for everyone",
      "time": null
    },
    {
      "user": "Mroczny Arturek",
      "text": "sorry for that, when I will come back home, I will change it",
      "time": null
    },
    {
      "user": "Jongware",
      "text": "A suggestion for future explorations: submit your code at Godbolt.org where you can see what different compilers produce for the same code.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "0FFFFFFFEh is -2 in decimal format\n\necx= is 1 if liczbaA is more than 3 and 0 otherwise\n\ninstruction LEA (load effective address) can do special arithmetic operation: a + b*X + Y where a and b are registers, Y is constant and X is 1, 2, 4 or 8. \n\nIn your case you calculate:\n-2+4*ecx or -2+4*(liczbaA>3)\n\nif liczbaA is more than 3 then result is 2 if less then it is -2\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Jul 17, 2018 at 10:48",
      "is_accepted": true,
      "comments": [
        {
          "user": "Mroczny Arturek",
          "text": "It make sense. Two questions from my side: 1. \"-2 + 4*ecx\", is there always add operator(between number and register)? 2. Does \"ds:\" have special meaning here? or on (x86) can I ignore it?",
          "time": null
        }
      ]
    },
    {
      "content": "Release mode optimises. if you want to see simple unoptimised asm blow-by-blow - turn off all optimisations or compile your code in debug mode (not sure the latter will work tho).\n\nThe whole segment from \n\n```\ncmp ebx,3\n\n```\nto\n\n```\nadd eax, ecx\n\n```\nlooks like the equivalent of the original if with your two functions inlined and the condition flattened into a series of arithmetic operations.\n\n",
      "votes": "2",
      "user": "Paweł Łukasik",
      "time": "Jul 17, 2018 at 5:17",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "A minor note: even when not specifying full optimization, a lot of current compilers already optimize as much as possible in the initial compiling run. Gone are the days you could quite literally \"read\" the translation of one C instruction in a coherent series of ASM statements.",
          "time": null
        }
      ]
    }
  ]
}