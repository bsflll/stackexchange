{
  "title": "Renaming subroutines in IDA Pro for MIPS",
  "link": "https://reverseengineering.stackexchange.com/questions/10623/renaming-subroutines-in-ida-pro-for-mips",
  "content": "I am working on a mipsel binary in IDA Pro and I'm having some issues with renaming subroutines.\n\nI have the subroutine \"system\" at 0x739644. I renamed this using the N hotkey.\n\n\n\nNow if I hit X, some of the xrefs have been replaced:\n\n\n\nAll of the JALR instructions are fine.\n\nHowever, sometimes subroutines are called like so:\n\n\n\nIn this case, sometimes the reference has been renamed and sometimes it hasn't. They all show up in xrefs though:\n\n\n\nWhy is this? Can I rename them all?\n\n",
  "votes": "1",
  "answers": 1,
  "views": "656",
  "tags": [
    "ida",
    "mips"
  ],
  "user": "Cybergibbons",
  "time": "Aug 14, 2015 at 11:27",
  "comments": [
    {
      "user": "perror",
      "text": "Try to prefer text format to images... Most of the images that you posted here could be easily replaced by text without harm. Text consume less memory, is more readable and can be copied and pasted.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Probably it is because IDA treats the la arguments as integers. \nTry the following : go to one of the places,where system displayed as a number, locate your cursor on this number, press O and recheck if it is still referenced as a number.\n\nUpdate based on comments - this code illustrates general idea of how it can be fixed automatically. Note: this code is not tested, and provided only for illustrative purposes:\n\n```\n#I didn't check this code, \n#use carefully, \n#beware of errors !\n\nimport idc\nimport idautils\nimport idaapi\n\n\n#this function will pass over all assembly commands in correspondiong parameter\n#and will set as offsets all operands mentioned in second parameter\n#   @param list_of_ranges --> list of tuples of start and end of code ranges where it \n#            should be applied\n#   @list_of_commands_and_operands--> list of tuples of assembly commands as string \n#            and number of operands where it should be applied\n\ndef multi_convert_op_to_offset(list_of_ranges, list_of_commands_and_operands):\n    for (start, end) in list_of_ranges:\n        for h in idautils.Heads(start, end):\n            dis = idc.GetDisasm(h).split()\n            mnemonic = dis[0]\n            for mnem, op in list_of_commands_and_operands:\n                if mnem == mnemonic:\n                    idc.OpOff(h, op, 0)\n\n\n#Usage:\n\nstart = start_of_your_relevant_code\nend = end_of_your_relevant_code\n\nl_of_rng = []\n\nl_of_rng.append((start, end))\n\nl_of_cmds_and_ops = []\n\nl_of_cmds_and_ops.append((\"la\", 1))\n\nmulti_convert_op_to_offset(l_of_rng, l_of_cmds_and_ops)\n\n```\n",
      "votes": "2",
      "user": "w s",
      "time": "Aug 15, 2015 at 14:08",
      "is_accepted": true,
      "comments": [
        {
          "user": "Cybergibbons",
          "text": "Yes - changing it to an offset fixes the issue, but why is it identifying some of them correctly and some not? Is there an automated way of fixing this.",
          "time": null
        },
        {
          "user": "w s",
          "text": "It depends on IDA algorithm of auto-analysis. There is no exact reason why, sometimes it is impossible to distinct exactly between integers and pointers. If you want to automate the solution you'll need to write script in IDAPython which will pass over all relevant la commands and will  use hex-rays.com/products/ida/support/idapython_docs/â€¦ this function on each of them.",
          "time": null
        }
      ]
    }
  ]
}