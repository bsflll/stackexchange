{
  "title": "Accessing Call String of CALLOTHER Pcode Instruction via Java API?",
  "link": "https://reverseengineering.stackexchange.com/questions/26058/accessing-call-string-of-callother-pcode-instruction-via-java-api",
  "content": "Is there a way to access the call string of a CALLOTHER Pcode instruction when iterating over the Pcode in Java? The listing below shows an example of what I mean:\n\n```\n048\n                             LAB_0001b034                                    XREF[1]:     0001b024(j)  \n        0001b034 36 7f ff e6     rbit       r7,r6\n                                                      r7 = CALLOTHER \"ReverseBitOrder\", r6\n\n\n```\nIn this example, I'd like to get the string \"ReverseBitOrder\". \nUnfortunately, there is no hint in the instruction info except for this input object:\n\n```\nconst:0x3c\n\n```\nWhich does not translate into the given string and I also cannot click on the string to find a location in memory.\nI also looked through the API docs of Pcode, Instruction etc., but did not find anything useful.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "379",
  "tags": [
    "ghidra",
    "java",
    "api",
    "call"
  ],
  "user": "Melvin",
  "time": "Oct 12, 2020 at 7:52",
  "comments": [
    {
      "user": "Igor Skochinsky",
      "text": "If this is about Ghidra and not generic Java, say so and add proper tags.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "There is a ghidra_script that current does this, see https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Base/ghidra_scripts/MarkCallOtherPcode.java\n\nbasically:\n\n```\nop = getInstructionAt(toAddr(0x1b034)).getPcode()[0]\ncurrentProgram.getLanguage().getUserDefinedOpName(op.getInput(0).getOffset()))\n\n```\n",
      "votes": "1",
      "user": "mumbel",
      "time": "Oct 5, 2020 at 16:04",
      "is_accepted": true,
      "comments": [
        {
          "user": "Melvin",
          "text": "Thanks a lot! That's what I needed.",
          "time": null
        }
      ]
    }
  ]
}