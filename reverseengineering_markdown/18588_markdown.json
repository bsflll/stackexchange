{
  "title": "Can I set more than 4 memory access breakpoints in WinDbg?",
  "link": "https://reverseengineering.stackexchange.com/questions/18588/can-i-set-more-than-4-memory-access-breakpoints-in-windbg",
  "content": "I can set a DWORD memory read/write access breakpoint in WinDbg with the following command:\n\n```\nba r 4 0x0307F42C\n\n```\nBut is there a way to set more than 4 of those?\n\n",
  "votes": "2",
  "answers": 2,
  "views": "2k",
  "tags": [
    "debugging",
    "memory",
    "windbg",
    "breakpoint"
  ],
  "user": "c00000fd",
  "time": "Jun 23, 2018 at 8:16",
  "comments": [
    {
      "user": "Megabeets",
      "text": "ba is a processor breakpoint (hardware breakpoints). use bp instead. For more breakpoints in radare2, read here.",
      "time": null
    },
    {
      "user": "c00000fd",
      "text": "@Megabeets: I'm not sure if I'm using that bp correctly. Say, I have a DWORD in memory that I want to track. I call bp 03DBF450. I then do bl and receive 1 e 03dbf450     0001 (0001)  0:**** but then if I run the debuggee I get an exception from IDA pro: 779A2228: The instruction at 0x779A2228 referenced memory at 0x14. The memory could not be written -> 00000014 (exc.code c0000005, tid 5928) and the debuggee crashes. This doesn't happen if I don't use bp command.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Those are called hardware breakpoints and are related to debug registers in the CPU. There are usually 6 of them but only DR0-DR3 used to specify an address for hardware breakpoints. \n\n",
      "votes": "5",
      "user": "Paweł Łukasik",
      "time": "Jun 23, 2018 at 16:22",
      "is_accepted": true,
      "comments": [
        {
          "user": "c00000fd",
          "text": "OK. It makes sense. So what do I use instead to set the 5th breakpoint on memory access?",
          "time": null
        },
        {
          "user": "Paweł Łukasik",
          "text": "Nothing. You can have only 4 breakpoints on memory access.",
          "time": null
        },
        {
          "user": "c00000fd",
          "text": "Hmm. Thanks. Is it a limitation in WinDbg or is it pretty much how all debuggers operate?",
          "time": null
        },
        {
          "user": "0xC0000022L",
          "text": "@c00000fd: the limitation, to my knowledge, is a limitation of the ISA rather than the software.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "instruction set architecture    ( intel att x86 x64 itanium 32 bit 64 bit  mips sparc p4 p3 8086 80386  etc etc )",
          "time": null
        }
      ]
    },
    {
      "content": "Although windbg does not support memory breakpoints, memory breakpoints are another common approach to place breakpoints based on memory access instead of code execution.\n\nAlthough most debuggers implement that internally, memory breakpoints work by setting the PAGE_GUARD bit for all pages in the memory breakpoint address range, and then filtering any exceptions caught for the specific ranges within the pages, and then resetting the page guard.\n\nYou can do something similar by placing a page guard yourself using windbg, however that's a lot of effort.\n\nIt is important to note that memory breakpoints are detectable with little effort and may dramatically slow execution (even further down than debugging), when debugging a piece of software with anti-debugging protection make sure you pay attention.\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Jun 25, 2018 at 20:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}