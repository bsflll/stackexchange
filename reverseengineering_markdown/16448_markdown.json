{
  "title": "Pydbg List imported API",
  "link": "https://reverseengineering.stackexchange.com/questions/16448/pydbg-list-imported-api",
  "content": "I am currently writing a small utility leveraging pydbg. One of the features I am trying to implement is as follows: \n\nFor each DLL imported, I want to list the api functions that the module exports and loaded at run-time. As an example if a debuggee imports ws2_32.dll I would like to walk the list of the API's that ws2_32.dll exports. \n\nI know how to do this using PEfile when the executable is not running, by walking the import table. I am trying to do something similar when the executable is running as process. I know that you can use the enumerate_modules method from pydbg but that only returns the modules and base address. Is it possible to do what I am asking?\n\nThanks in advance,\n\nRyan\n\n",
  "votes": "1",
  "answers": 1,
  "views": "127",
  "tags": [
    "debugging"
  ],
  "user": "Ryan S",
  "time": "Sep 29, 2017 at 15:19",
  "comments": [
    {
      "user": "Ryan S",
      "text": "Ok so I think I have this partially figured out. Looks like I need to load the PEB_LDR_DATA structure and iterate (maybe) over the _LDR_DATA_ENTRY.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I figured out how to do this and hopefully this will help someone else. In retro spect the answer was in the original question. It just didn't click at the time of posting. This was implemented using pydbg and pefile. This was a good little exercise that forced me to get real familiar with the PE file format.\n\n```\n# Get module PE header base and size\nfor mods in dbg.iterate_modules():\n    if mod.lower() == str(mods.szModule.lower()):\n        print('Mod: {0} Base: {1}'.format(mods.szModule,\n                                          hex(mods.modBaseAddr)))\n        addr = mods.modBaseAddr\n        size = mods.modBaseSize\n        break\n\n# Read PE header in memory\npe = pefile.PE(data=dbg.read_process_memory(addr, size))\npe.parse_data_directories(directories=[\n                pefile.DIRECTORY_ENTRY[u'IMAGE_DIRECTORY_ENTRY_IMPORT'],\n                ])\n\n# Traverse IAT\nfor entry in pe.DIRECTORY_ENTRY_IMPORT:\n    print(entry.dll)\n    print('#'*20)\n    for imp in entry.imports:\n       print('Address:{0}    API:{1}'.format(hex(imp.address), imp.name))\n\n```\n",
      "votes": "1",
      "user": "Ryan S",
      "time": "Oct 11, 2017 at 0:00",
      "is_accepted": false,
      "comments": []
    }
  ]
}