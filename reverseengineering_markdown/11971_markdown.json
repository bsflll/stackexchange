{
  "title": "nop with argument in x86_64",
  "link": "https://reverseengineering.stackexchange.com/questions/11971/nop-with-argument-in-x86-64",
  "content": "A program I'm investigating has the following code (disassembled by IDA with some light censorship by me):\n\n```\n__text:....B9                 call    <redacted>\n__text:....BE                 nop\n__text:....BF                 nop     dword ptr [rax+00h]\n\n```\nI have two questions. First, why would the compiler have inserted these nops? They don't appear to be for any alignment purpose.\n\nSecond, what is that nop with a relative addressing argument? Its hex is 0F 1F 40 00. Looking at http://ref.x86asm.net/, this does appear to be an instruction called \"hintable NOP\", but I'm having trouble finding relevant information about it.\n\nBy the way, the next instruction starts at ....C3 and is a real/productive instruction (that is, not a nop or anything morally equivalent to a nop).\n\n",
  "votes": "11",
  "answers": 2,
  "views": "15k",
  "tags": [
    "x86"
  ],
  "user": "Brennan Vincent",
  "time": "Feb 8, 2016 at 20:25",
  "comments": [],
  "answers_data": [
    {
      "content": "These are multi byte nop instructions. \nFrom http://www.felixcloutier.com/x86/NOP.html\n\n",
      "votes": "11",
      "user": "0xec",
      "time": "Feb 9, 2016 at 8:01",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jongware",
          "text": "Nitpick: this same table appears in Intel's official reference (and unless my memory deceives me, the description is very similar). Perhaps it's better to point OP to that instead.",
          "time": null
        },
        {
          "user": "Igor Skochinsky",
          "text": "@Jongware: the linked site is generated from Intel docs",
          "time": null
        }
      ]
    },
    {
      "content": "Regarding your first question, NOPs are issued by the compiler when it's interested in aligning the code following it, usually because that code is target of a jump (such as in a loop) and it's beneficial for it to be aligned to a paragraph (16-byte boundary) or a cache line (32-byte boundary).\n\nIn other words, it does so to increase performance.\n\n",
      "votes": "5",
      "user": "Watcom",
      "time": "Dec 31, 2017 at 14:50",
      "is_accepted": false,
      "comments": []
    }
  ]
}