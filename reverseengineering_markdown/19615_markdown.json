{
  "title": "How to execute a specific shellcode with a non executable stack without using format string? (without ASLR and stack cookie)",
  "link": "https://reverseengineering.stackexchange.com/questions/19615/how-to-execute-a-specific-shellcode-with-a-non-executable-stack-without-using-fo",
  "content": "First off we don't have ASLR and stack cookie, and assume we can't create our own files on this system\n\nSo I'm trying to execute a shellcode in this code, this is what i have done so far:\n\ni have managed to overwrite the buffer and set the return address of function foo to function critical, but my problem is how to run a specific shellcode here? the execv will run the bin/sh but i can't replace the first argument with a shellcode and it won't work and I'm not sure if its even possible to run a shellcode with execv, and when i pass a shellcode to sh it doesn't work.\n\nalso i know the return to libc exploit but still don't know how to execute a shellcode with system()? is it even possible to pass a shellcode to it? or maybe i can use another function to just pass a shellcode to it? \n\nAnd i assume we can run our own shellcode if we created our own shellcode file and replaced the sh path, but we don't have access to create files, we have to do it with this code only.\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nint bar(char *arg, char *out)\n    {\n      strcpy(out, arg);\n      return 0;\n    }\n\n    int foo(char *arg)\n    {\n      char buffer1[100]=\"Test program.  \n\";\n      char buffer2[100];\n      bar(arg, buffer2);\n      printf(\"%s\",buffer1);\n      return 0;\n    }\n\n    void critical()\n    {\n      char *msg[]={\"/bin/sh\",NULL};\n      execv(msg[0],msg);\n    }\n\n    int main(int argc, char *argv[])\n    {\n      if (argc != 2)\n      {\n        fprintf(stderr, \"prog_vuln2: argc != 2  \n\");\n        exit(EXIT_FAILURE);\n      }\n      foo(argv[1]);\n      return 0;\n    }\n\n```\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "buffer-overflow",
    "stack",
    "shellcode"
  ],
  "user": "Richard Jones",
  "time": "Oct 13, 2018 at 17:36",
  "comments": [],
  "answers_data": [
    {
      "content": "First thing that comes to mind when you have non-executable stack is Return-oriented programming which, as the name implies, uses return to execute a code you want.\nWhen using ROP, you will want to use the program's executable and dlls (or .so files for linux) and rely as little as you can on system dlls as they change with the OS version.\nThe idea is that you find a bunch of sequences of instrucitons. each one called a gadget. A gadget can set a register value by poping a value from the stack, moving a value or adding/subtracting a register, followed by ret (which means you can usually find them at the end of functions), causing them to return to the next value on the stack (where the return address is expected to be), creating a ROP Chain.\n\nA simple example is when you want to execute a command using system.\nyou can (on a 64 bit OS) jump to a pop-return where the first value on the stack is your buffer address and the second value is the address of system, causing system to be called with your buffer as an argument in the correct register (rdi for linux, ecx for windows).\nOn a 32 bit os, the overflow is somewhat simpler. All you need is to oerride the return address to system and override the 4 bytes after it to be the address of you buffer. That will execute system with your buffer as the first parameter.\n\n",
      "votes": "4",
      "user": "Community",
      "time": "Jun 17, 2020 at 9:54",
      "is_accepted": true,
      "comments": []
    },
    {
      "content": "You are correct that you can't pass your shellcode to execv(), but that's not the idea.  What you require is to change the return address from the call to foo() to point to critical(), so that execv() receives the path \"/bin/sh\" as the parameter.  Normally, your shellcode would be the contents of critical() itself, and the return address would point to the buffer that holds the critical() function.\n\n",
      "votes": "1",
      "user": "peter ferrie",
      "time": "Oct 20, 2018 at 22:32",
      "is_accepted": false,
      "comments": []
    }
  ]
}