{
  "title": "How to find bugs in a modern desktop application with reverse enginnering?",
  "link": "https://reverseengineering.stackexchange.com/questions/28032/how-to-find-bugs-in-a-modern-desktop-application-with-reverse-enginnering",
  "content": "I would like to clarify the context for the question: I have studied different types of exploiting but all the studies I have carried out were with command line programs and with functions that I already knew beforehand. It is taking me a lot of effort to find on the internet how to analyze a normal application and look for vulnerabilities. If anyone knows any methodology, any video where it explains and shows or some information on how to perform a reverse engineering and analysis of a desktop application to find bugs, I would greatly appreciate it. Since all the examples I find are from binaries and I have also tried looking in exploit-db but there is like seeing the solution of the problem without seeing the analysis. I would like to learn how to perform a black box analysis on a modern desktop application today.\n\n",
  "votes": "-1",
  "answers": 1,
  "views": "140",
  "tags": [
    "ida",
    "windows",
    "assembly",
    "exploit",
    "executable"
  ],
  "user": "Jhon",
  "time": "Jul 22, 2021 at 22:42",
  "comments": [
    {
      "user": "Robert",
      "text": "What about fuzzing the loaded files or used network streams?",
      "time": null
    },
    {
      "user": "Jhon",
      "text": "Yes that is another question but infomation about fuzzing desktop apps... is something im really wanna know",
      "time": null
    },
    {
      "user": "Ali Rizvi-Santiago",
      "text": "A super simple and obv pattern to search for is to look for signed instructions that intersect with a function responsible for allocating or copying memory...and then verifying that you can influence it w/ user input. Obv, though, there are numerous patterns and they can vary depending on the target. Some people who disclose vulns publish the full-blown adv which is worth reading to see how it was found (even complete blog posts). In general, though, It always starts with identifying anchor points for exploring, figuring out what side effects you can influence as a user, and then verifying.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "I am not an expert, but have you hear about fuzzing??\n\n\"Fuzz testing or Fuzzing is a Black Box software testing technique, which basically consists in finding implementation bugs using malformed/semi-malformed data injection in an automated fashion.\" [link]:https://owasp.org/www-community/Fuzzing\n\n",
      "votes": "-2",
      "user": "user37591",
      "time": "Jul 23, 2021 at 8:55",
      "is_accepted": false,
      "comments": [
        {
          "user": "Jhon",
          "text": "Yeah i know about fuzzing , now if that is the right way, i must techniques about how to do fuzzing in desktop modern apps, I tried find information but I only found Application Verify from microsoft.",
          "time": null
        }
      ]
    }
  ]
}