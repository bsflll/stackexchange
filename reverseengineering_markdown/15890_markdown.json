{
  "title": "Is it possible to call function in dynamic link library(.so) generated by Android JNI project?",
  "link": "https://reverseengineering.stackexchange.com/questions/15890/is-it-possible-to-call-function-in-dynamic-link-library-so-generated-by-androi",
  "content": "I unzipped an apk file and got one libxx.so file. I find that there are some \"exported\"(but I guess the \"fun\" function is not exported by the original programer) functions in this library by IDA Pro, like this:\n\n\nNow I can call the \"stringFromJNI\" function by add this library to my Android project. But is it possible to call the \"fun\" function? Should I call it by JNI or dlopen(I have tried dlopen but got \"undefined symbol:JNI_OnLoad\" error)? And how?\n\n",
  "votes": "0",
  "answers": 3,
  "views": "3k",
  "tags": [
    "ida",
    "android",
    "dynamic-linking"
  ],
  "user": "wangzhe",
  "time": "Jun 17, 2020 at 9:54",
  "comments": [],
  "answers_data": [
    {
      "content": "Have a look at NativeFunction API of frida. It helps you call any native function. With a little bit of reversing, you'll have something like\n\n```\n var func = new NativeFunction(Module.findExportByName('libxx.so', 'fun'), 'uint32', []);\n\n```\n",
      "votes": "1",
      "user": "sudhackar",
      "time": "Aug 1, 2017 at 8:50",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "After some days struggle, I find out that dynamic analyse through IDA Pro is a good way to deal with this problem.\n\n",
      "votes": "0",
      "user": "wangzhe",
      "time": "Jul 27, 2017 at 2:55",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "if you want call it directly from java code, it won't work because jvm does not recognize it.\nBut you can write a proxy so file which would call the fun function. \n\n```\n void *handler= dlopen(\"libxxx.so\", RTLD_LAZY);//open the so\n void *(*fun)(); //the definition of the fun pointer you want to call\n fun = (void *(*)())dlsym(handler,\"fun\"); // get the dynsym\n fun(); //call it\n\n```\nnote:\nneed check : handler != NULL && fun != NULL\n\nyou can get the dynamic symbol use readelf tool in linux\n\n",
      "votes": "0",
      "user": "yufeng",
      "time": "Dec 9, 2017 at 9:57",
      "is_accepted": false,
      "comments": [
        {
          "user": "wangzhe",
          "text": "Thanks for your answer. But what should I do in the proxy so file? I try to use dlopen and I can load the so library, but when I want to get the fun function by dlsym, dlerror give me \"undefined symbol:JNI_OnLoad\" error.",
          "time": null
        },
        {
          "user": "yufeng",
          "text": "allmost the same in linux",
          "time": null
        }
      ]
    }
  ]
}