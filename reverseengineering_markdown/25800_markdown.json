{
  "title": "Turning an unknown audio data stream into wav or similar format",
  "link": "https://reverseengineering.stackexchange.com/questions/25800/turning-an-unknown-audio-data-stream-into-wav-or-similar-format",
  "content": "I am trying to get the commentary (casters voice) from a dota2 game file. I've managed to parse the game file and select what I believe is the voice data. This is in a weird format (CSVCMsg_VoiceData) which has the following struc:\n\n```\ntype CSVCMsg_VoiceData struct {\nClient                   *int32            `protobuf:\"varint,1,opt,name=client\" json:\"client,omitempty\"`\nProximity                *bool             `protobuf:\"varint,2,opt,name=proximity\" json:\"proximity,omitempty\"`\nXuid                     *uint64           `protobuf:\"fixed64,3,opt,name=xuid\" json:\"xuid,omitempty\"`\nAudibleMask              *int32            `protobuf:\"varint,4,opt,name=audible_mask\" json:\"audible_mask,omitempty\"`\nVoiceData                []byte            `protobuf:\"bytes,5,opt,name=voice_data\" json:\"voice_data,omitempty\"`\nCaster                   *bool             `protobuf:\"varint,6,opt,name=caster\" json:\"caster,omitempty\"`\nFormat                   *VoiceDataFormatT `protobuf:\"varint,7,opt,name=format,enum=VoiceDataFormatT,def=1\" json:\"format,omitempty\"`\nSequenceBytes            *int32            `protobuf:\"varint,8,opt,name=sequence_bytes\" json:\"sequence_bytes,omitempty\"`\nSectionNumber            *uint32           `protobuf:\"varint,9,opt,name=section_number\" json:\"section_number,omitempty\"`\nUncompressedSampleOffset *uint32           `protobuf:\"varint,10,opt,name=uncompressed_sample_offset\" json:\"uncompressed_sample_offset,omitempty\"`\nXXX_unrecognized         []byte            `json:\"-\"`\n\n```\n}\n\nThis seems to work when reading the data. Logically I'm probably looking for the VoiceData part of the struct when given this:\n\n\"format\":0,\"voice_data\":\"uz+ACgEAEAELgD4EQgEWAKV4mxnepfmhxKCQxAnKVNaHhKRXPIsmAH5RjXmJV0u+WTmrvgyCKxcraehjo/ZeKcFjksXQZEeOju4hLNv/MAB9KA7ww14Vc0ndYPB7dDXoXTexuxcW0Jg/diMgdH5ijWhe02Ch48KX86qJZYFyZV81AH76qCgh9AXliMdyWEgWTMbRD6xMX37WJALrXlSnxymIloSq2KGwXCcMXzQiSQIrcLVNfqdNJACCluFOIRKPmugUvsLZmnD04X0xhpAuNkwJECK4t51MBOWNWJlCAIDyZlJwWI45EPTjBB6yKyGOclu96qBV2MhFAh1d2J7WDZwe6YxOVu/BGkGcur9qTP85ZRfjANoiQxQrWvpoHFBFBy0AfX6k8XvbSwrk2nUAEP3P6kcmXORKUNKeu8HDnOUflQqtA5AkkTiun77fZrqnimIfWg==\",\"sequence_bytes\":23598094,\"section_number\":1,\"sample_rate\":16000\n\nI'm able to pull the voice data out like so:\nuz+ACgEAEAELgD4EQgEWAKV4mxnepfmhxKCQxAnKVNaHhKRXPIsmAH5RjXmJV0u+WTmrvgyCKxcraehjo/ZeKcFjksXQZEeOju4hLNv/MAB9KA7ww14Vc0ndYPB7dDXoXTexuxcW0Jg/diMgdH5ijWhe02Ch48KX86qJZYFyZV81AH76qCgh9AXliMdyWEgWTMbRD6xMX37WJALrXlSnxymIloSq2KGwXCcMXzQiSQIrcLVNfqdNJACCluFOIRKPmugUvsLZmnD04X0xhpAuNkwJECK4t51MBOWNWJlCAIDyZlJwWI45EPTjBB6yKyGOclu96qBV2MhFAh1d2J7WDZwe6YxOVu/BGkGcur9qTP85ZRfjANoiQxQrWvpoHFBFBy0AfX6k8XvbSwrk2nUAEP3P6kcmXORKUNKeu8HDnOUflQqtA5AkkTiun77fZrqnimIfWg==\n\nHowever this is where I'm hitting a bit of a wall. This data is in an unknown format. I've tried to do some research on what the format might be and I've found that steam started using SILK codec for voice data in 2011 - however when trying to write this data to file and open it with opus (which I believe supports SILK) the opus decoder tells me it can't open the file - so I'm not 100% convinced it is silk codec. Recognising audio data isn't something I have a great deal of experience with - so any advice would be great.\n\nI have noticed there's a VoiceDataFormatT part of the struct but the only definition I can find for it is this:\n\n```\ntype VoiceDataFormatT int32\n\n```\nWhich doesn't seem too helpful! :/\n\nEDIT 1:\nAs per advice from user Ian Cook I've decoded the data from base64 into the following (as hex dump):\n\nn\nI'm still at a loss as to what this information is - I've tried converting it to a wav file using ffmpeg (assuming is pcm) but it still comes out as white noise.\n\nEDIT 2:\nSo it's occurred to me that it might help if I include more samples of the data - the decoded hex of the data can be found here (each sample separated by a new line character):\n\npastebin\n\nI've noticed that each one seems to start with the following hex:\n\nBB 3F 80 0A 01 00 10 01 0B 80 3E 04\n\nWhich translates to:\n\n»?€\n�€>\n\nI'm still at a loss as to how to convert this to audio data.\n\nEDIT 3:\nI've uploaded some more datadumps to the following pastebin (More data), it's not a full dump as it's roughly 15mb and pastebin crashed when I was trying to paste!\n\nThe data file is a dota2 demo file (extension .dem) which is a collection of protobuf messages that I parse using GoLang and the Manta replay parse (found here). This allows me to pull out any type of message, and I select OnCSVCMsg_VoiceData, which returns m.Audio.VoiceData of the form: CSVCMsg_VoiceData (the struct I display above).\n\nEDIT 4\n\nHere's (finally) the link to the file with the concatenated voiceData messages.\n\nAnd here's the link to the original file of protobuff messages\n\n",
  "votes": "3",
  "answers": 2,
  "views": "1k",
  "tags": [
    "decryption"
  ],
  "user": "user6916458",
  "time": "Sep 26, 2020 at 20:09",
  "comments": [
    {
      "user": "Ian Cook",
      "text": "The (double) '=' at the end suggests the data is base64 encoded.  Try decodiing this and looking at the resulting binary data.",
      "time": null
    },
    {
      "user": "user6916458",
      "text": "@IanCook thanks for the info - I think what I'm most lacking here is that kind of intuition! I've edited my question with the base64 decoding",
      "time": null
    },
    {
      "user": "Ian Cook",
      "text": "Binary data is almost always best shown in the form of a hexdump.",
      "time": null
    },
    {
      "user": "user6916458",
      "text": "@IanCook sorry, I didn't realise this - I've change the info to a hex dump! Thanks",
      "time": null
    },
    {
      "user": "hairlessbear",
      "text": "Something else you could try is loading the audio blob into Audacity and seeing if it detects what it is, or gives you a hint in the right direction.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "TL;DR\n\nLong version\n\nUsing the sample data you posted, first thing I had to do was replace the final comma with a ] to make it valid JSON.\n\nI originally used shell scripts to to convert the structs from JSON to SILK, but in the interest of efficiency, I re-implemented the conversion in Python.\n\n```\nimport json\nimport base64\nimport sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python3\", sys.argv[0], \"<CSVCMsg_VoiceData json file>\")\n        exit(1)\n\n    with open(sys.argv[1], 'r') as infile:\n        json_data = json.load(infile)\n\n    # Create dictionary with section number as the key and list of\n    # that section's structs as the value\n    section_dict = {}\n    for obj in json_data:\n        sec_num = obj['section_number']\n        if sec_num not in section_dict:\n            section_dict[sec_num] = []\n        section_dict[sec_num].append(obj)\n\n    # Create SILK file for each section number stream\n    for section in section_dict.keys():\n        filename=f\"section_{section}.slk\"\n        print(f\"Generating SILK file {filename} for section {section}...\")\n        with open(filename, 'wb') as outfile:\n            # SILK header\n            outfile.write(b\"#!SILK_V3\")\n            # Sort frames in ascending order based on sequence_bytes value\n            for frame in sorted(section_dict[section], key=lambda x : x['sequence_bytes']):\n                decoded = base64.b64decode(frame['voice_data'])\n                # strip first 14 bytes and last 4 bytes before writing\n                outfile.write(decoded[14:-4])\n\nif __name__ == '__main__':\n    main()\n\n```\nTo decode SILK, I used the official SDK (that's what the decoder linked by Gordon Freeman is built on top of). The SDK can be downloaded from this link, which I found from this page.\n\nAfter I downloaded the SDK, I extracted it, went into the directory named SILK_SDK_SRC_FIX_v1.0.9, and ran make (I'm on Kali, but pretty much any Linux variant should be fine).\n\nOnce make completes, you're left with a couple executables; the only one we care about is decoder.\n\nSimply run decoder on the SILK payloads generated above, and you'll get a pcm file you can do whatever you want with. For example, ./decoder section_12.slk section_12.pcm. The output file is at 22050 Hz.\n\nHat tip to @Gordon Freeman for pointing out that the header isn't 18 bytes like I originally suspected and that the last 4 bytes aren't part of the SILK payload.\n\nFor posterity, here's how I converted the JSON to SILK files with shell scripts.\n\nI used the following script to extract the data, de-base64 it, and put each struct's data in its own file.\n\n```\n#!/bin/bash\n\n# Write each decoded VoiceData to a file with the naming convention\n# <sequence_bytes>_<section_number>\nwrite_data ()\n{\n    filename=`echo $1 | cut -d_ -f1,2`\n    data=`echo $1 | cut -d_ -f3`\n    echo -n \"$data\" | base64 -d > $filename\n}\nexport -f write_data\njq -r '.[] | \"\\(.sequence_bytes)_\\(.section_number)_\\(.voice_data)\"' dota2CasterParse.json | xargs -I '{}' bash -c \"write_data '{}'\"\n\n\n```\nI then used the following script to create a SILK file for each section:\n\n```\n#!/bin/bash\n\nsection_numbers=$(ls [0-9]*_[0-9]* | cut -d_ -f2 | sort -u)\n\nfor section in $section_numbers; do\n    output=\"section_${section}_voiceData.slk\"\n    echo -n '#!SILK_V3' > $output\n    for i in $(ls *_${section} | sort -n); do\n        dd bs=1 skip=14 count=$(($(stat -c \"%s\" $i)-18)) if=$i of=$output conv=notrunc oflag=append\n    done\ndone\n\n```\n",
      "votes": "2",
      "user": "hairlessbear",
      "time": "Mar 8, 2023 at 5:21",
      "is_accepted": false,
      "comments": [
        {
          "user": "user6916458",
          "text": "sorry for not getting back to you sooner, my internet has been terrible! I've not been able to upload the file (but will try again tomorrow when my internet should be fixed). I've done my best to implement your code on windows, but there is tow final issues I'm struggling with (1) the silk decoder crashes after some number of sample - I can get around this with simply sending one sample at a time and them ffmpeg concat - issue (2) is that when I combine all the data I end up with an audio file shorter than the duration of the game - it seems that sometime the caster isn't....",
          "time": null
        },
        {
          "user": "user6916458",
          "text": "... transmitting and thus no audio packets are sent - are any of the values (eg. sequence_bytes?) likely to be something like a timestamp? Thanks for all your help so far!",
          "time": null
        },
        {
          "user": "hairlessbear",
          "text": "My best guess is that sequence_bytes is for synchronizing the audio stream with itself, not in relation to the game. I know you extracted these structs from a larger file with many other messages, I wouldn't be surprised if the data of when to play the audio is buried in there somewhere; might be as simple as decoding each message in the exact order they were generated in, thus getting proper timing as a side effect. At the very least, I don't see anything in the struct or the decoded voice_data blob that looks like a timestamp.",
          "time": null
        },
        {
          "user": "hairlessbear",
          "text": "That said, since I've only seen a very small amount of the data, I can't say anything with certainty. If I had all the data, maybe it would make it clear that sequence_bytes is a timestamp.",
          "time": null
        },
        {
          "user": "user6916458",
          "text": "I've added links (to my google drive) to the json voicedata messages and the original file that this is all based on - if that's any help!",
          "time": null
        }
      ]
    },
    {
      "content": "There are 3 types of \"frame\", i guess 3 casters\nBB 3F 80 0A 01 00 10 01 0B 80 3E 04 42 01  (@ 0x0)\nD8 76 DD 02 01 00 10 01 0B 80 3E 04 FA 01  (@ 0x5f0)\n67 7D 11 05 01 00 10 01 0B 80 3E 04 7E 01  (@ 0x44ccf)\n\nExample for the first one:\nBB 3F 80 0A identifier of the caster\n01 channel number mono\n80 3E = 0x3e80 =16000 the rate\n42 01 = 0x142 the size of silk data\n\nAfter the size the following 0x142 bytes are the datas of silk file\njust add it silk header #!SILK_V3\n23 21 53 49 4C 4B 5F 56 33\n\nI use silk_v3_decoder.exe (? some python script can do it)\nsilk_v3_decoder.exe in.hex out.pcm -Fs_API 16000\nthen\nffmpeg  -f s16le -ar 16000 -ac 1 -i out.pcm out.wav\n\nA frame represents a short time, so all the data must be concatenated\n(as said hairlessbear)\n\nNota: at the end of the \"frame\" there is 4 bytes could be checksum\n\n",
      "votes": "1",
      "user": "Community",
      "time": "Sep 24, 2020 at 10:53",
      "is_accepted": false,
      "comments": [
        {
          "user": "user6916458",
          "text": "can you advise where you got the silk_v3_decoder.exe from? I found a version on github, but both chrome and AVG are telling me it's likely malicious!",
          "time": null
        },
        {
          "user": "Gordon Freeman",
          "text": "github.com/kn007/silk-v3-decoder/<br>  You're right but out of the 3 executables only one is malicious : silk2mp3.exe(no needed)<br> the other 2 silk_v3_decoder.exe and silk_v3_encoder.exe are virus free.<br> I downloaded the zip but I have extract with 7zip only silk_v3_decoder.exe<br>",
          "time": null
        },
        {
          "user": "user6916458",
          "text": "I hit an issue with that because it does work on 64bit! :/",
          "time": null
        },
        {
          "user": "Gordon Freeman",
          "text": "Strange, app is 32 bits works perfectly on my pc Win 10 64bits",
          "time": null
        },
        {
          "user": "hairlessbear",
          "text": "I can't speak to getting this to work on Windows, but I updated my answer with a full solution I got working on Linux.",
          "time": null
        }
      ]
    }
  ]
}