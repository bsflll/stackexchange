{
  "title": "Wapiflapi reverse engeneering exercices",
  "link": "https://reverseengineering.stackexchange.com/questions/13309/wapiflapi-reverse-engeneering-exercices",
  "content": "Right now I'm trying to solve r5 from here\n\nI've already tried to understand pseudo-code from Hooper\n\n```\nfunction check_password {\n    var_28 = arg0;\n    if (strlen(var_28) != strlen(\"this_is_not_even_interesting_its_garbage\")) {\n            rax = 0xffffffff;\n    }\n    else {\n            strcpy(\"this_is_not_even_interesting_its_garbage\", var_28);\n            var_18 = 0x1;\n            while (var_18 != 0x0) {\n                    var_18 = 0x0;\n                    for (var_14 = 0x0; var_14 <= 0x27; var_14 = var_14 + 0x1) {\n                            if ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff) != 0x0) {\n                                    rax = random();\n                                    rcx = *(int8_t *)(sign_extend_64(var_14) + 0x6010a0) & 0xff & 0xff;\n                                    temp_3 = rax % rcx;\n                                    *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) = (*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff) - temp_3 + 0x1;\n                                    var_18 = var_18 | *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff & 0xff;\n                                    *(int8_t *)(sign_extend_32(var_14) + \"this_is_not_even_interesting_its_garbage\") = (*(int8_t *)(sign_extend_32(var_14) + \"this_is_not_even_interesting_its_garbage\") & 0xff) - temp_3 + 0x1;\n                            }\n                    }\n            }\n            rax = *master;\n            rax = strcmp(rax, \"this_is_not_even_interesting_its_garbage\");\n    }\n    return rax;\n}\n\n```\nbut it's too complicated for me right now. So I know that the password length should be 40 but how does the other part of the code work?\n\nThe unclear parts are the unt8_t casts. I've used gdb to step through the code, and I saw the results of certain instructions but cannot understand why these are the results ?\n\n",
  "votes": "3",
  "answers": 1,
  "views": "2k",
  "tags": [
    "decompilation",
    "hopper"
  ],
  "user": "desu",
  "time": "Aug 19, 2016 at 8:14",
  "comments": [
    {
      "user": "NirIzr",
      "text": "The best way to start understanding these type of things it writing your own pseudo-code or simulator. That way you force yourself to actually read and comprehend the code in front of you. Have you tried doing that? What were the parts that were difficult?",
      "time": null
    },
    {
      "user": "desu",
      "text": "@Nirlzr first of all I tried to run this code in gdb with breakpoints. I can see two loops in asm code, but what happens next is some kind of magick for me. While running it with gdb I've figured out that the first value of rcx in loop was 3. But I'm not sure from where is that digit",
      "time": null
    },
    {
      "user": "NirIzr",
      "text": "So you'd say the line that you're having trouble with is rcx = *(int8_t *)(sign_extend_64(var_14) + 0x6010a0) & 0xff & 0xff;? Will you mind edit that in? Any other lines you're struggling with?",
      "time": null
    },
    {
      "user": "desu",
      "text": "@Nirlzr all that lines with cast to int8_t looks strange for me",
      "time": null
    },
    {
      "user": "desu",
      "text": "@NirIzr I think that (int8_t *) is casting (sign_extend + offset) to the signed 8 bit int After that it takes the value from that pointer and doing bitwise and. But I don't know what result will it give to me. Looks like int and 0xff will always return int",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Although OP clarified only the inner for is unreadable to him, I'll write an answer that thoroughly explains the first few lines and then abruptly stops at the most crucial part of the inner for loop. While believing examples are a great way to learn, I do that to make this as educational as possible, without interfering with the learning process of independently solving exercises. I am also unfamiliar with the specific set of exercises and would like to avoid providing full answers where those were not intended by the creator.\n\nI hope i hit that sweet spot of being educational enough yet not too much.\n\nGood luck with the exercise, here goes:\n\nvar_18 = 0x1;\n\nSet an internal state to 1.\n\nwhile (var_18 != 0x0) {\n\nWhile state is True, continue executing loop's content. The state is actually a boolean indicating processing is not finished yet.\n\nvar_18 = 0x0;\n\nSet internal state to zero at every outer loop iteration. This means every iteration must set the \"not finished yet\" flag.\n\nfor (var_14 = 0x0; var_14 <= 0x27; var_14 = var_14 + 0x1) {\n\nInner for iterates 0x28 times, 40 in decimal. Since we know this is the length of the entire string, we can assume the inner loop somehow iterates over all characters of the string. This might be a coincidence, but we should keep an eye for it.\n\nif ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff) != 0x0) {\n\nNow here it gets a little bit more complicated, so we'll split it to several parts:\n\nsign_extend_32(var_14)\n\nSince we know var_14 is a non negative integer between 0 and 39 (including), there's no meaning to sign-extending it. Sign-extending is basically the operation of converting a shorter length value to longer, taking the sign bit into account. See this for more info about sign-extension. This is either a compiler or decompiler artifact. A more advanced decompiler might have removed this.\n\n(int8_t *)(sign_extend_32(var_14) + 0x6010a0)\n\nAdd our var_14 to a relatively long hex offset. By the looks of it, it's probably an offset to table of 40 bytes. This is learnt from experience, taking a look at value at that address might clear it up. Adding var_14 and then casting to an int8 pointer further suggests that's the case, using var_14 as the index in that table.\n\n(*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff)\n\nIf we weren't convinced yet, by now it's pretty clear as we read a byte from the resulting offset. AND-ing it with 0xff is yet another decompiler artifact, caused by how a compiler will read a byte in 64bit intel processors.\n\nif ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff) != 0x0) {\n\nback to the full line, this is reading the byte from the table, and skipping the current iteraction of the inner loop.\n\nrax = random();\n\nSimple. Set a random value into rax.\n\nrcx = *(int8_t *)(sign_extend_64(var_14) + 0x6010a0) & 0xff & 0xff;\n\nThis is actually quite identical to the condition from before, only now the value of that index in the table is stored into rcx.\n\n```\n                                temp_3 = rax % rcx;\n                                *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) = (*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff) - temp_3 + 0x1;\n                                var_18 = var_18 | *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) & 0xff & 0xff;\n                                *(int8_t *)(sign_extend_32(var_14) + \"this_is_not_even_interesting_its_garbage\") = (*(int8_t *)(sign_extend_32(var_14) + \"this_is_not_even_interesting_its_garbage\") & 0xff) - temp_3 + 0x1;\n                        }\n                }\n        }\n        rax = *master;\n        rax = strcmp(rax, \"this_is_not_even_interesting_its_garbage\");\n}\nreturn rax;\n\n```\n",
      "votes": "3",
      "user": "NirIzr",
      "time": "Aug 18, 2016 at 22:30",
      "is_accepted": true,
      "comments": []
    }
  ]
}