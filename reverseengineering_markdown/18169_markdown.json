{
  "title": "Best Way to Identify Statically Linked Functions in Firmware",
  "link": "https://reverseengineering.stackexchange.com/questions/18169/best-way-to-identify-statically-linked-functions-in-firmware",
  "content": "I have a piece of firmware that I pulled off an NXP LPC17XX series chip. Through reviewing the processor manual, I was able to identify the entry point of the code and disassemble the code without any issue in IDA Pro. After a short bit of reversing I found a number of functions that are likely printf, sprintf, and their associated helper functions. \n\nI assume that there are of number of other POSIX functions as well as some core library functions for developing for this chip that are included in  the firmware that I am looking at. \n\nWhat is the best way to go about identifying those functions? I assume that there would be some way to develop a FLIRT signature for this, but I am unsure what would be the best way to approach developing a proper signature for this firmware. Any help or guidance would be really appreciated!\n\n",
  "votes": "7",
  "answers": 2,
  "views": "938",
  "tags": [
    "ida",
    "firmware",
    "arm",
    "flirt-signatures"
  ],
  "user": "Bit Twiddler",
  "time": "May 4, 2018 at 14:06",
  "comments": [],
  "answers_data": [
    {
      "content": "There is a project called Sibyl based on the symbolic execution framework miasm. They basically call each unknown function with test cases until it passes all test cases for a given hypothesis.\n\nE.g. if the unknown function is \"strlen\", one test case could be: It should, when you call it with the single parameter \"AAAAAAA\", not crash and return 7. \n\nSibyl also lets you generate and learn test cases from a known library and try to find matching functions in an unknown binary.\n\nI must admit that I have not really used it, I just stumbled upon it because I created something vaguely similar using angr and had a look at the source code. Sibyl supports ARM, so you might want to give it a try.\n\n",
      "votes": "2",
      "user": "manduca",
      "time": "May 14, 2018 at 4:41",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Using FLIRT for C code requires you to know the exact version of CRT and the exact flags of the compilation so that you could build it yourself and then, having all the binaries and debug symbols, create the signatures from .a or .obj or .lib.\nBut there are so many variations of CRT built with various versions of the compilers. And there's no way to determine the build flags, so it's very unlikely that you'll be able to use FLIRT in this case. \nSo the best thing you can do is static analysis. In the firmware there's usually enough assert messages and error logging which can help you to determine some basic stuff like alloc, free, fopen, fwrite, fread, fclose. sprintf is also quite easy to find. \nAlso use the fact that CRT functions are grouped together, i.e. if you find one, then the function above it and below it (I'm talking about the addresses) is library function too.\n\n",
      "votes": "2",
      "user": "Anton Kukoba",
      "time": "May 14, 2018 at 7:31",
      "is_accepted": false,
      "comments": []
    }
  ]
}