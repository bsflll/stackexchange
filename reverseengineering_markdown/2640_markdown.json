{
  "title": "Virtual Machine escape through page faults",
  "link": "https://reverseengineering.stackexchange.com/questions/2640/virtual-machine-escape-through-page-faults",
  "content": "The trapcc project on Github by Sergey Bratus and Julian Bangert claims that using the Turing complete capabilities of x86 MMU it is possible for a code to escape the virtual machine using a single instruction (Move, Branch if Zero, Decrement). It does so by page faults and double faults. I tried to read the paper but it seemed too puzzling. Is the idea feasible?\n\n",
  "votes": "12",
  "answers": 1,
  "views": "352",
  "tags": [
    "virtual-machines"
  ],
  "user": "viv",
  "time": "Jul 1, 2014 at 8:18",
  "comments": [
    {
      "user": "Antimony",
      "text": "I don't see any claims that this can be used to escape a VM. It's mostly just to demonstrate a neat trick, though it can potentially be used for obfuscation as well.",
      "time": null
    },
    {
      "user": "peter ferrie",
      "text": "and due to the fact that there is no mention of escape, I dislike the title, since it is highly misleading.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "In fact, they do not claim at all to evade from any virtual machine. But, by using the MMU fault handler mechanism to perform computation, they expect to render the encapsulation of their program unpractical. Indeed, the point is to find unexpected primitives to perform computation, doing so only a few virtual machine environments will be able handle such specific programs. And, even if they do, a virtual machine is managed by an hypervisor which will probably be overwhelmed by the handling of all the interrupt signals that such a program requires. \n\nSo, in fact, they propose a way of programming that is as powerful as C (Turing-complete) but that will be extremely tedious to run in a virtualized environment.\n\nOf course, the goal of this is to slow down the analysis of the program when run in a virtual machine (this is to be compared to the anti-debug techniques to avoid dynamic analysis).\n\n",
      "votes": "13",
      "user": "perror",
      "time": "Aug 14, 2013 at 15:20",
      "is_accepted": true,
      "comments": []
    }
  ]
}