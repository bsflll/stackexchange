{
  "title": "Dealing with exceptions in x64dbg",
  "link": "https://reverseengineering.stackexchange.com/questions/17074/dealing-with-exceptions-in-x64dbg",
  "content": "I'm debugging a game and I often come across an exception (EXCEPTION_PRIV_INSTRUCTION)\n\nThe debugger pauses on the address where it stops, now I want to step over one command at a time but when I step over it doesn't go one command at a time\n\n",
  "votes": "5",
  "answers": 1,
  "views": "9k",
  "tags": [
    "exception",
    "x64dbg"
  ],
  "user": "Ayazasker",
  "time": "Dec 29, 2017 at 17:53",
  "comments": [
    {
      "user": "mrexodia",
      "text": "You can try the “exhandlers” command to see possible exception handlers in x64dbg.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "Exceptions are complicated business. I will attempt to explain briefly how SEH (Structured Exception Handling) in Windows works to invoke the appropriate exception handler. Your game probably does not use SEH, however, since your question is too broad so will be my answer. I based it on SEH since it's the easiest to understand and you can work your way up.\n\nThere are hardware and software exceptions. Hardware exceptions are thrown by the CPU - for example on illegal memory access, division by 0...\n\nSoftware exceptions (which are caused by e.g. throw in C++ use the RaiseException call under Windows (refer MSDN).\n\nThe OS stores an exception-handler list - a list of routines that can deal with exceptions. These routines are usually the instructions in your catch block. Each routine determines, when it is called, whether on not it wants to handle the exception. If your routine decides not to handle the exceptions it tells the OS to keep looking.\n\nThe handler list is stored in the thread information block (TIB):\n\n```\n_NT_TIB:\n    +0x000 ExceptionList\n    +0x004 StackBase\n    +0x008 StackLimit\n    +0x00C SubSytemTib\n    +0x010 FiberData\n    +0x010 Version\n    +0x014 ArbitaryUserPointer\n    +0x018 Self\n\n```\nThe TIB is available atFS:[0].\n\nThe ExceptionList field is the head of the current thread's exception handler list. \n\nThe list is a chain of _EXCEPTION_REGISTRATION_RECORD structures:\n\n```\n_EXCEPTION_REGISTRATION_RECORD\n    +0x000 Next\n    +0x004 Handler\n\n```\nYou can see from above why your program jumps around and you cannot follow it line by line - when an exception occurs the processor itself calls the KiTrap0E - you cannot see that call. Then as the handlers are invoked there is also a lot of \"jumping around\" - the RtlDispatchException function iterates through all the registered exception handlers. You need to locate the appropriate handler and see what your game does with your exception.\n\n",
      "votes": "8",
      "user": "barnaby-b",
      "time": "Dec 30, 2017 at 20:05",
      "is_accepted": false,
      "comments": []
    }
  ]
}