{
  "title": "c++ version of MOV AL,BYTE PTR DS:[ESI]",
  "link": "https://reverseengineering.stackexchange.com/questions/15022/c-version-of-mov-al-byte-ptr-dsesi",
  "content": "I'm writing a keygen for a crack-me exercise.\n\nI have a problem with handling byte assignments the crack-me performs several times using instructions like MOV AL,BYTE PTR DS:[ESI] (move byte from location to AL) to change EAX for example from 000096BA to 00009662.\n\nThe crack-me overflows EAX value several times so to calculate the key I use an unsigned int in my C program.\n\nThe problem I have is that I do not know how I can replace a single byte value in unsigned int example from 0x38586d to 0x38498d, changing the second byte only.\n\n",
  "votes": "0",
  "answers": 2,
  "views": "1k",
  "tags": [
    "c++",
    "c",
    "crackme"
  ],
  "user": "Marek",
  "time": "Mar 27, 2017 at 16:11",
  "comments": [],
  "answers_data": [
    {
      "content": "```\nint eax;\nchar * esi;\n*((char *) &eax) = *esi;\n\n```\n",
      "votes": "1",
      "user": "Sergey Slepov",
      "time": "Mar 26, 2017 at 20:32",
      "is_accepted": true,
      "comments": [
        {
          "user": "NirIzr",
          "text": "It is better to provide a thorough explanation alongside the final answer",
          "time": null
        },
        {
          "user": "Sergey Slepov",
          "text": "&eax takes the address of eax and has the type int *  (char *) &eax casts the int * to a char *. *((char *) &eax) references the char (byte) pointed to by the char *. = assigns the char / byte pointed to by esi to the first byte of eax. HTH.",
          "time": null
        }
      ]
    },
    {
      "content": "First, most decent compilers will let you introduce assembly directly in your C code. This is not recommended but the option should be noted.\n\nNow, here's a sane solution; C was several bitwise operators to manipulate sets of bits inside an integer. \n\nThe bitwise operators we'll use here are:\n\nAnd here's how we could use them to set the lowest byte in dword a to that of char c, assuming a 32bit processor for simplicity's sake:\n\n```\nunsigned int a = 0xa5a5a505;\nunsigned char c = 0xa0;\n\n```\nFirst, we'll want to zero-out the lowest byte. We'll do that by ANDing the dword with a dword that has all of it's bits set except the 8 lowest bits (aka it's lowest byte).\n\n```\na = a & 0xffffff00\n\n```\nAlternatively, we can use the NOT binary operator to create 0xffffff00 in a slightly cleaner manner, as follows:\n\n```\na = a & ~0xff\n\n```\nAfter either of those lines, which perform exactly the same thing (and will look identical in assembly), a's value would be 0xa5a5a500.\n\nNow, we'll need to assign the value of c to that same byte. We'll use the OR bitwise operator in the following manner:\n\n```\na = a | c;\n\n```\nWhich will result in a having the value of 0xa5a5a5a0.\n\nNow, if we would like to do the same for the 2nd byte in the integer we'll shift the values by 8 bits before executing the same operators, like this:\n\n```\na = a & ~(0xff << 8)\n\n```\nIs equivalent to:\n\n```\na = a & ~(0xff00)\n\n```\nWhich is identical to:\n\n```\na = a & 0xffff00ff\n\n```\nWhich will result with:\n\n```\na = 0xa5a50005\n\n```\nAnd now, we'll add c at the 2nd byte's position:\n\n```\na = a | (c << 8)\n\n```\nWhich in our example is:\n\n```\na = a | 0xa000\n\n```\nWhich will result in 0xa5a5a005\n\n",
      "votes": "1",
      "user": "NirIzr",
      "time": "Mar 27, 2017 at 16:08",
      "is_accepted": false,
      "comments": []
    }
  ]
}