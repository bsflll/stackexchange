{
  "title": "Can I evaluate operand values of an instruction currently at breakpoint (while debugging) in IDA using IDAPython?",
  "link": "https://reverseengineering.stackexchange.com/questions/3274/can-i-evaluate-operand-values-of-an-instruction-currently-at-breakpoint-while-d",
  "content": "Let's say I have lots of breakpoints at some push instructions.\nI am trying to dereference the operand (if address) - get the actual relevant value for each one in a script, handling immediate, base + index, register, etc. Can I do this in any other way than:\n\nThis, if possible, I guess would imply a particular idaapi function.\n\n",
  "votes": "7",
  "answers": 1,
  "views": "803",
  "tags": [
    "ida",
    "idapython",
    "debugging"
  ],
  "user": "algotroll",
  "time": "Dec 24, 2013 at 0:36",
  "comments": [
    {
      "user": "tmr232",
      "text": "Does the push line have an xref to the data?",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "No, you must implement the base + index * scale yourself (if on i386).  On other architectures without this complexity (e.g. ARM) it is a bit easier.\n\nIf it helps any, I have already implemented this functionality in pwndbg for exactly the same purpose.\n\nYou can see the implementation here:\nhttps://github.com/zachriggle/pwndbg/blob/master/pwndbg/disasm/x86.py\n\nNote that I am not using IDA's API, but rather pwndbg's internal API which relies on GDB.  You will have to make some small changes to the way in which you fetch register and memory values from that code (e.g. pwndbg.regs.pc gives me the value of EIP or RIP as appropriate).\n\n",
      "votes": "1",
      "user": "Zach Riggle",
      "time": "Feb 3, 2016 at 16:54",
      "is_accepted": false,
      "comments": [
        {
          "user": "tmr232",
          "text": "Getting the base, index, scale and offset values in IDA can be a bit tricky. You can use Sark to handle it (for x86 and x64). It doesn't do the actual reading of debug values, though.",
          "time": null
        }
      ]
    }
  ]
}