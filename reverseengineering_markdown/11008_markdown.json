{
  "title": "Tools to find base64 strings in binary dumps",
  "link": "https://reverseengineering.stackexchange.com/questions/11008/tools-to-find-base64-strings-in-binary-dumps",
  "content": "When looking at raw binary dumps are there any tools to help identify and decode base64 strings contained within? Essentially \"strings\", but taking into account base64.\n\n",
  "votes": "1",
  "answers": 1,
  "views": "2k",
  "tags": [
    "tools"
  ],
  "user": "Cybergibbons",
  "time": "Oct 1, 2015 at 13:21",
  "comments": [
    {
      "user": "tmr232",
      "text": "A simple solution will be to run strings.exe, then try and decode each resulting string as base64.",
      "time": null
    },
    {
      "user": "Thomas Weller",
      "text": "@tmr232 do not only decode line by line. If a complete line cannot be decoded, all substrings need to be checked.",
      "time": null
    },
    {
      "user": "Thomas Weller",
      "text": "What content do you expect after decoding base64? Would that be a human readable string again or result in more or less hex data? What would you do with that hex data next?",
      "time": null
    },
    {
      "user": "Thomas Weller",
      "text": "I interpreted the \"raw binary dump\" as a .dmp file. Such a memory dump contains all sorts of strings, starting with MDMP but also words like Winlogon and a lot of REGISTRY related stuff containing SOFTWARE which is all valid base64 but it doesn't really make sense to decode that. If you could be a bit more specific, that would be great.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "using powershell\n\n```\nC:\\>type bana.txt\nbXkgZmlyc3Qgc3RyaW5nCm15IHNlY29uZCBzdHJpbmcKbXkgdGhpcmQgc3RyaW5nZ2cgb2sh\nCiJIZWxsbyBXb3JsZCI=\n\nC:\\>powershell -c \"gc .\\bana.txt | Select-String -Pattern \".*\" |% { [text.encodi\nng]::ASCII.GetString([convert]::FromBase64String($_)) }\"\nmy first string\nmy second string\nmy third stringgg ok!\n\n\"Hello World\"\n\n```\nchange the encoding to utf-8 if the file contains unicode encoded bas464 stringg\n\n```\nC:\\>cat unibana.txt\n ■b X k g Z m l y c 3 Q g c 3 R y a W 5 n C m 1 5 I H N l Y 2 9 u Z C B z d H J\n  b m c K b X k g d G h p c m Q g c 3 R y a W 5 n Z 2 c g b 2 s h\n C i J I Z W x s b y B X b 3 J s Z C I =\n\nC:\\>powershell -c \"gc .\\bana.txt | Select-String -Pattern \".*\" |% { [text.encodi\nng]::utf8.GetString([convert]::FromBase64String($_)) }\"\nmy first string\nmy second string\nmy third stringgg ok!\n\n\"Hello World\"\n\nC:\\>ls -l *ban*\n-rw-rw-rw-  1 Admin 0  96 2015-10-02 12:23 bana.txt\n-rw-rw-rw-  1 Admin 0 194 2015-10-02 12:27 unibana.txt\n\n```\nif the string is invalid bas64 string this will throw an invalid format exception and continue to decode the rest of file \n\n```\nC:\\>cat bana.txt\nbXkgZmlyc3Qgc3RyaW5nCm15IHNlY29uZCBzdHJpbmcKbXkgdGhpcmQgc3RyaW5nZ2cgb2sh\nCiJIZWxsbyBXb3JsZCI=\nyakku\nbakku\nbXkgZmlyc3Qgc3RyaW5nCm15IHNlY29uZCBzdHJpbmcKbXkgdGhpcmQgc3RyaW5nZ2cgb2sh\nCiJIZWxsbyBXb3JsZCI=    \n\nC:\\>powershell -c \"gc .\\bana.txt | Select-String -Pattern \".*\" |% { [text.encodi\nng]::ASCII.GetString([convert]::FromBase64String($_)) }\"\nmy first string\nmy second string\nmy third stringgg ok!\n\n\"Hello World\"\nException calling \"FromBase64String\" with \"1\" argument(s): \"Invalid length for\na Base-64 char array.\"\nAt line:1 char:108\n+ gc .\\bana.txt | Select-String -Pattern .* |% { [text.encoding]::ASCII.GetStri\nng([convert]::FromBase64String <<<< ($_)) }\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException\n\nException calling \"FromBase64String\" with \"1\" argument(s): \"Invalid length for\na Base-64 char array.\"\nAt line:1 char:108\n+ gc .\\bana.txt | Select-String -Pattern .* |% { [text.encoding]::ASCII.GetStri\nng([convert]::FromBase64String <<<< ($_)) }\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException    \nmy first string\nmy second string\nmy third stringgg ok!\n\n\"Hello World\"\n\n```\nedit is in reply to a comment by thomas weller\ndo you have a test suite for me to test against or abuse the testcase foo.txt below to break the assumptions made in the reply       \n\nIMHO a string is a bunch of characters interspersed with carriage return and or carriage return + line feed terminated with a null  a normal string if its length is in multiples of 4 and contains the same subset of characters used in base64 string cannot be differentiated  from one another\n\n```\nPS C:\\> xxd -g 1 .\\foo.txt\n0000000: 75 0d 62 58 6b 67 0d 62 58 6b 67 0d 0a 62 58 6b  u.bXkg.bXkg..bXk\n0000010: 67 75 0d 0a 62 58 6b 67 75 0d 62 58 6b 67 0d 62  gu..bXkgu.bXkg.b\n0000020: 58 6b 67 62 58 6b 67 0d 62 58 6b 67 62 58 6b 67  XkgbXkg.bXkgbXkg\nPS C:\\> cat .\\foo.txt\nu\nbXkg\nbXkg\nbXkgu\nbXkgu\nbXkg\nbXkgbXkg\nbXkgbXkg\nPS C:\\> strings.exe -q -n 1 .\\foo.txt\nu\nbXkg\nbXkg\nbXkgu\nbXkgu\nbXkg\nbXkgbXkg\nbXkgbXkg\nPS C:\\> cat .\\decodeb64strings.ps1\n$ErrorActionPreference=\"silentlycontinue\"\nselect-string -Path $args[0] -Pattern \".*\" |%{$out=[text.encoding]::Ascii.getst\nring([convert]::FromBase64String($_.Line));if($?){$out}else{$_}}\nPS C:\\>\nPS C:\\> .\\decodeb64strings.ps1 .\\foo.txt    \nfoo.txt:1:u\nmy\nmy\nfoo.txt:4:bXkgu\nfoo.txt:5:bXkgu\nmy\nmy my\nmy my\n\n```\n",
      "votes": "1",
      "user": "blabb",
      "time": "Oct 8, 2015 at 8:12",
      "is_accepted": false,
      "comments": [
        {
          "user": "Thomas Weller",
          "text": "I see that this works if a base64 string starts on a new line. I don't see how that works if the base64 part of the string starts e.g. on the second character of the line (which might be the case due to other ASCII output of strings right before the base64 data.",
          "time": null
        },
        {
          "user": "blabb",
          "text": "to accept indeficiency or to correct the implementation if it is feasible i would require a valid test case that one would see in a normal world a hypothetical wild guess indicating substrings in a bigger string is a definite recipe for chaos any string that could be stripped into multiples of 4 can be a valid base64 string so yuck can be both english word or a base64 encoded string yucky is invalid base64 string while it is a valid normal english string",
          "time": null
        },
        {
          "user": "Thomas Weller",
          "text": "That's a very valid point. So we should really clarify what OP needs. I interpreted the \"raw binary dump\" as a .dmp file. Such a memory dump contains all sorts of strings, starting with MDMP but also words like Winlogon and a lot of REGISTRY related stuff containing SOFTWARE which is all valid base64 but it doesn't really make sense to decode that.",
          "time": null
        }
      ]
    }
  ]
}