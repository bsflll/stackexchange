{
  "title": "How to analyse the communication between a WebApp loaded with awesomium and the native program?",
  "link": "https://reverseengineering.stackexchange.com/questions/3878/how-to-analyse-the-communication-between-a-webapp-loaded-with-awesomium-and-the",
  "content": "I have a Windows program that uses awesomium to display a WebApp. This WebApp communicates in some way with the client program through some native calls. I found references to window.externalHost and window.native in the JS source, but it's build with YUI and has tens of thousand lines of code and single character variables and I can't quite figure out what exactly they are doing (static analysis).\n\nI have injected Javascript into the WebApp to check those two objects:\n\n```\ntry {\n    document.write(JSON.stringify(window.externalHost, null, 4))\n} catch (err) {\n    document.write(err)\n}\n\n```\nBut window.externalHost is undefined and window.native is {}.\n\nSo my questions are:\n\nupdate 1: I am confident that it uses window.native. Because of this Object {}. It seems likely that the communication is not implemented as window.externalHost.postMessage() based on what I have read on the awesomium wiki.\n\nI now try to capture what methods are called on it. My idea was to overwrite window.onerror to capture all errors and set window.native = undefined; to capture exceptions like Cannot call aNativeCall() on undefined. Unfortunately it seems that windows.native can't be overwritten - it doesn't stay undefined.\n\nAny other ideas?\n\nupdate 2:\n\nI came up with this javascript code to check some interesting Objects like window.external, etc...\n\n```\nobj = ['external', 'externalHost', 'native', 'Y', ['Y','native'],['Y','Native'], ['Y','external'], ['Y','externalHost']];\nfor(i=0; i< obj.length; ++i) {\n    try {\n\n        if(obj[i] instanceof Array) {\n            var tmp = window[obj[i][0]];\n            for(j=1; j<obj[i].length; ++j) {\n                tmp = tmp[obj[i][j]]\n            }\n            document.write(obj[i]+\" | <b>\"+Object.getOwnPropertyNames(tmp)+\"</b><br>\");\n        } else {\n            document.write(obj[i]+\" | <b>\"+Object.getOwnPropertyNames(window[obj[i]])+\"</b><br>\");\n        }\n\n    } catch(err) {\n        document.write(obj[i]+\" | <i>Error: \"+err+\"</i><br>\");\n    }\n}\n\n```\nIt became slowly more clear that it has to be window.native. This object has the following properties: 'on','isNative','scale','Emitter','call','register','_ready'\n\nWhen I try to call window.native.call() the native program crashes. And the debug information shows that it crashed in a ProcessRequest function. So I found the right interface.\n\nI now need to find out how exactly this interface is used. Unfortunately I can't overwrite window.native.call = function() { ... } to log the calls.\n\nAnybody another idea?\n\n",
  "votes": "2",
  "answers": 0,
  "views": "929",
  "tags": [
    "javascript"
  ],
  "user": "samuirai",
  "time": "Mar 16, 2014 at 2:49",
  "comments": [],
  "answers_data": []
}