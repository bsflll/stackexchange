{
  "title": "Help reversing end-of-life'd Logitech Link. How to get Flash Contents",
  "link": "https://reverseengineering.stackexchange.com/questions/16465/help-reversing-end-of-lifed-logitech-link-how-to-get-flash-contents",
  "content": "See Update below.\n\nI got an email from Logitech that they are End of Lifing their Harmony Link product (see https://community.logitech.com/s/question/0D55A0000745EkCSAU/harmony-link-eos-or-eol).\n\nSo I took it upon myself to start taking it apart. Peeling back the sticky pads on the bottom revealed 4 solder points. Two of which happen to UART connections. \n\nHere is the info when booting:\n\n```\n++NAND: RCSR=54200900\nSearching for BBT table in the flash ...\n.\nFound version 1 Bbt0 at block 1023 (0x7fe0000)\nTotal bad blocks: 0\n.[Warning] FEC not connect right PHY: ID=fffffc\nFEC: [ FULL_DUPLEX ] [ connected ] [ 100M bps ]:\nEthernet mxc_fec: MAC address sn:ip:ped:fr:om:vu\nNo IP info for device!\nUnrecognized chip: 0xf8!!!\nhardware reset by POR\n\nClock input is 24 MHz\nRedBoot(tm) bootstrap and debug environment [ROMRAM]\nNon-certified release, version FSL 200904 - built 21:32:37, Jul  5 2011\n\nPlatform: Logitech Baby (i.MX25 )  PASS 1.0 [x32 DDR]\nSystem type 2070 revision 6\nCopyright (C) 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.\nCopyright (C) 2003, 2004, 2005, 2006 eCosCentric Limited\n\nRAM: 0x00000000-0x03f00000, [0x00095250-0x03ef1000] available\nFLASH: 0x00000000 - 0x8000000, 1024 blocks of 0x00020000 bytes each.\n== Executing boot script in 3.000 seconds - enter ^C to abort\nRedBoot> ubi attach -f 0x80000 -l 0x07EC0000 -w 0x800 -e 0x20000 -s 0x200\nscanning 1014 PEBs\n........................................................................................................................................d\nRedBoot> ubi load -b 0x100000 kernel%{os_backup}\nRedBoot> exec -c %{os_cmdline}entry=0x80008000, target=0x80008000\nUsing base address 0x00100000 and length 0x0013a6d4\nUncompressing Linux..................................................................................... done, booting the kernel.\n\n```\nSo it is running a booter called RedBoot. This seems to show the individual image files:\n\n```\nRedBoot> ubi info\nVolumes count:                           8\nLogical eraseblock size:                 129024\nTotal amount of logical eraseblocks:     1014 (130830336 bytes)\nAmount of available logical eraseblocks: 337 (43481088 bytes)\nMaximum count of volumes                 128\nCount of bad physical eraseblocks:       0\nCount of reserved physical eraseblocks:  10\nCurrent min/mean/max erase counter:      2/5/9\nMinimum input/output unit size:          2048 bytes\nVID header offset:                       512\n-----------------------------------\nVolume ID:   0\nType:        static\nAlignment:   1\nSize:        17 LEBs (2228224 bytes)\nUsed:        10 LEBs (1287892 bytes)\nState:       OK\nName:        kernel\n-----------------------------------\nVolume ID:   1\nType:        static\nAlignment:   1\nSize:        114 LEBs (14942208 bytes)\nUsed:        92 LEBs (11862016 bytes)\nState:       OK\nName:        cramfs\n-----------------------------------\nVolume ID:   4\nType:        dynamic\nAlignment:   1\nSize:        25 LEBs (3276800 bytes)\nState:       OK\nName:        mfgdata\n-----------------------------------\nVolume ID:   5\nType:        dynamic\nAlignment:   1\nSize:        261 LEBs (34209792 bytes)\nState:       OK\nName:        storage\n-----------------------------------\nVolume ID:   6\nType:        static\nAlignment:   1\nSize:        25 LEBs (3276800 bytes)\nUsed:        10 LEBs (1287892 bytes)\nState:       OK\nName:        kernel_sm\n-----------------------------------\nVolume ID:   7\nType:        static\nAlignment:   1\nSize:        114 LEBs (14942208 bytes)\nUsed:        102 LEBs (13033472 bytes)\nState:       OK\nName:        cramfs_sm\n-----------------------------------\nVolume ID:   8\nType:        dynamic\nAlignment:   1\nSize:        25 LEBs (3276800 bytes)\nState:       OK\nName:        usrconf\n-----------------------------------\nVolume ID:   9\nType:        dynamic\nAlignment:   1\nSize:        82 LEBs (10747904 bytes)\nState:       OK\nName:        logitech\n-----------------------------------\nVolume ID:   2147479551\nType:        dynamic\nAlignment:   0\nSize:        0 LEBs (0 bytes)\nState:       OK\nName:        \n\n```\nHere's the question: Can anyone help me make use of this info? How can I best get the info off the device via this UART cable?  I've toyed with the dump command to various levels of success but that is pretty cumbersome just showing typical hex text in the form of \n00139E70: F8 13 90 C7 98 3B 7B CF  04 9F 80 E1 9A FF 8B 68  |.....;{........h| \nwhich is hard to do anything with. So, any ideas as to how I should proceed? Many thanks. \n\nUpdate:\nI've managed to dump (I think) the entire memory, but haven't gotten much out of it with Binwalk.\nIn case anyone else wants to take a look, here it is.\nhttps://www.dropbox.com/s/pxpugqpptqc3ph9/data-complete.bin\n\n",
  "votes": "6",
  "answers": 3,
  "views": "6k",
  "tags": [
    "firmware",
    "linux",
    "embedded"
  ],
  "user": "justin",
  "time": "Oct 22, 2017 at 2:42",
  "comments": [],
  "answers_data": [
    {
      "content": "If you are able to get hex output of the partition data, you can store it in a text file and then convert to a binary. On Linux, the following commands may help:\n\n```\ncat data.txt | cut -d' ' -f2-18 | sed s/\\\\s//g | tr -d '  \n' | xxd -r -p > data.bin\n\n```\n",
      "votes": "2",
      "user": "Vladislav Ivanov",
      "time": "Oct 3, 2017 at 11:26",
      "is_accepted": false,
      "comments": [
        {
          "user": "justin",
          "text": "That's much easier than what I was doing but is there an easy way you know of to output that? That's the part I'm having a harder time with.",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "What do you mean? You said you have access to dump command; start any terminal client, save the output (example: stackoverflow.com/a/11420381/7303703), dump the whole partition to a text file, remove a few first lines and pass that file to a snippet I posted.",
          "time": null
        },
        {
          "user": "justin",
          "text": "I guess I was more trying to figure out if there's a better command than just spewing it on the screen, which takes a considerable amount of time, and if I should just start at 0x000000 and pick some arbitrary number, or if based on what I already pasted there's a way to specifically target i.e. Volume ID 4.",
          "time": null
        },
        {
          "user": "Vladislav Ivanov",
          "text": "Have you tried looking for dump command options, like offset and size? The whole storage size in this device can't be that big",
          "time": null
        },
        {
          "user": "justin",
          "text": "It took 18 hours to dump, but I think I got it all.. dropbox.com/s/pxpugqpptqc3ph9/data-complete.bin binwalk doesn't get much useful info tho, sadly.",
          "time": null
        }
      ]
    },
    {
      "content": "Have you been able to mount any portion of this dump as ubifs ?\n\n```\n$ strings data-complete.bin | grep -i ubi\n\"console=ttymxc1,115200 noinitrd init=/linuxrc ubi.mtd=1 root=/dev/mtdblock:cramfs%{os_backup} %{os_cmdargs}\"\nubi attach -f 0x80000 -l 0x07EC0000 -w 0x800 -e 0x20000 -s 0x200\nubi load -b 0x100000 kernel%{os_backup}\n\"console=ttymxc1,115200 noinitrd init=/linuxrc ubi.mtd=1 root=/dev/mtdblock:cramfs%{os_backup} %{os_cmdargs}\"\nubi attach -f 0x80000 -l 0x07EC0000 -w 0x800 -e 0x20000 -s 0x200\nubi load -b 0x100000 kernel%{os_backup}\n*** invalid 'ubi' command: %s\nubi \n*** UBI is not attached\n*** UBI is already attached\nUBI start address\nUBI length\nAttach Unsorted Block Image [UBI]\n[-f <ubi_addr> -l <ubi_length> -w <write_size> -e <erase_size> -s <subpage_size>]\nDetach Unsorted Block Image [UBI]\nDisplay contents of Unsorted Block Image [UBI]\nLoad image from Unsorted Block Image [UBI] into RAM\nErase an Unsorted Block Image [UBI]\nFormat using a UBI image\nManage UBI images\nnode with incompatible UBI version found: this UBI version is %d, image version is %d\nthis UBI version is %d, image version is %d\nbad UBI magic %08lx, should be %08x\nubi attach -f 0x80000 -l 0x07EC0000 -w 0x800 -e 0x20000 -s 0x200\nubi load -b 0x100000 kernel%{os_backup}\n\"console=ttymxc1,115200 noinitrd init=/linuxrc ubi.mtd=1 root=/dev/mtdblock:cramfs%{os_backup} %{os_cmdargs}\"\n\n```\nSee for reference:\n\n",
      "votes": "1",
      "user": "tibar",
      "time": "Nov 9, 2017 at 17:44",
      "is_accepted": false,
      "comments": []
    },
    {
      "content": "Until a better solution is found, Perhaps the 'EOL' process can be avoided by blocking this device from access to the outside internet (by blocking it at your router/gateway).\n\nI have done this for an internet-enabled device that I don't trust to access the internet (it still works usefully on my LAN)\n\n",
      "votes": "0",
      "user": "Eliot Blennerhassett",
      "time": "Nov 8, 2017 at 20:38",
      "is_accepted": false,
      "comments": []
    }
  ]
}