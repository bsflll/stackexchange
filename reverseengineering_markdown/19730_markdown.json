{
  "title": "XCHG RAX, RAX: 0x03, what does this code do and how does it work?",
  "link": "https://reverseengineering.stackexchange.com/questions/19730/xchg-rax-rax-0x03-what-does-this-code-do-and-how-does-it-work",
  "content": "\"XCHG RAX, RAX\" is a kind of riddle book that provides assembly code for you to reverse and undercover the meaning. Some of the examples calculate the Fibonacci sequence others bit-twiddle to toggle ASCII case. The snippet (riddle) on 0x03 is,\n\n```\nsub  rdx,rax\nsbb  rcx,rcx\nand  rcx,rdx\nadd  rax,rcx\n\n```\nHow does this code work, and what does it do?\n\n",
  "votes": "0",
  "answers": 1,
  "views": "468",
  "tags": [
    "x86",
    "x86-64"
  ],
  "user": "Evan Carroll",
  "time": "Oct 26, 2018 at 18:34",
  "comments": [],
  "answers_data": [
    {
      "content": "This code boils down to,\n\n```\nrax = min(rdx,rax)\nrdx = sub(rdx,rax) ; store the difference in rdx\n\n```\nThat is essentially,\n\nThe sbb and and here just move into rcx either\n\nWhat determines what gets moved into rcx? That's determined by the result of the sbb. The sbb is doing reg - reg - CF. So you're either ANDing against all 1s or all 0s.\n\nThis is how I reasoned about it\n\n```\n# CF=0; rdx > rax\nif ( rdx > rax ) {\n  rdx -= rax\n  rcx = 0     ; all bits off\n\n\n              ; AND 0 (rcx) with anything (in rdx) is nop here.\n              ; ADDing 0 (rcx) to rax is a nop\n}\n\n\n\n# CF=1; rax > rdx\nelse {\n  rdx -= rax\n  rcx = -1    ; all bits on\n\n\n  rcx = rdx   ; code is rcx &= rdx\n              ; remember -1 & x == x\n  rax += rcx\n\n}\n\n```\nNote regardless of the carry flag, this code will store the difference in rdx\n\n",
      "votes": "1",
      "user": "Evan Carroll",
      "time": "Oct 26, 2018 at 1:50",
      "is_accepted": true,
      "comments": []
    }
  ]
}