{
  "title": "ELF x86 - Why is return address pushed twice?",
  "link": "https://reverseengineering.stackexchange.com/questions/21414/elf-x86-why-is-return-address-pushed-twice",
  "content": "I reverse an ELF x86, and I would like to understand why the return address is pushed again on the stack? It should be already present there.\n\n```\nmain:\nlea    ecx, [esp+0x4 {argc}]\nand    esp, 0xfffffff0\npush   dword [ecx-0x4 {__return_addr}] {var_4}\npush   ebp, {var_8}\nmov    ebp, esp\npush   edi {var_c}\npush   ecx {argc} {var_10}\nsub    esp, 0xb0\nmov    eax, dword [ecx+0x4 {argv}]\nmov    dword [ebp-0x9c {var_a4}], eax\nmov    eax, dword [gs:0x14]\nmov    dword [ebp-0xc {var_14}], eax\nxor    eax, eax {0x0}\ncmp    dword [ecx {argc}], 0x2\nje     0x80485ae\n...\n\n```\n",
  "votes": "3",
  "answers": 1,
  "views": "457",
  "tags": [
    "disassembly",
    "x86",
    "elf",
    "stack"
  ],
  "user": "jukebox",
  "time": "Jun 4, 2019 at 15:14",
  "comments": [
    {
      "user": "Paweł Łukasik",
      "text": "In which lines is this happening?",
      "time": null
    },
    {
      "user": "perror",
      "text": "I guess this is on the push [ecx-0x4] var_4. As we are in x86-32 eip is not directly callable.",
      "time": null
    },
    {
      "user": "perror",
      "text": "What compiler is giving this code ? It looks like it is changing the return address of the function from the inside of the function. It is a breach in all the ABI that I know, so it must be either a very specific function (as __libc_start_main()) or an obfuscation technique to workaround recursive traversal disassembly technique.",
      "time": null
    }
  ],
  "answers_data": [
    {
      "content": "It was present on the stack before and esp, 0xfffffff0 instruction that aligns the stack to 16 bytes. This instruction doesn't erase the data that was previously at esp (so ecx-4 still points to the return address), but stack pointer points now to possibly different value than at the begining of the function. So there is a need to push the return value ([ecx-4]) on the stack so that esp points to the return address instead of some garbage data.\n\nFor instance, assume that previous esp value was 0x11111118. Then the function return address is located at esp (i.e. equals [esp]). But after the and operation, esp now equals 0x11111110, so the function return address is at esp+8 address, which is not on the stack (actually below it) and esp now points to some other data, which definitely isn't the function return address. But we know that ecx-4 points to that address (since ecx = 0x11111118+4=0x1111111C), so we push [ecx-4] on the stack, so that esp now points to it.\n\n",
      "votes": "8",
      "user": "bart1e",
      "time": "Jun 4, 2019 at 12:31",
      "is_accepted": true,
      "comments": []
    }
  ]
}