{
    "title": "Where can I find benign samples with a high potential to false positive?",
    "link": "https://reverseengineering.stackexchange.com/questions/13428/where-can-i-find-benign-samples-with-a-high-potential-to-false-positive",
    "content": "In the pursuit and development of malware detection algorithms, often a big sample set of both malicious and benign samples is required. Both machine learning or similar automated techniques, as well as manual or partially manual signature generation, often require a good and varied example set of benign samples that are commonly mistaken as malicious.\nThose samples are usually being automatically analyzed and then provided to a Reverse Engineer for further scrutiny, analysis and improvement of said malware detection algorithm.\nAlthough finding malicious samples is frequently discussed (see multiple questions), discussion about benign sample sources seems lacking.\nWhat are good benign sample repositories/feeds, preferably focused on potential/frequent false positive samples? Other sources or \"retrival methods\" (scraping) are also welcome!\n",
    "votes": "5",
    "answers": 3,
    "views": "4k",
    "tags": [
        "malware",
        "benign"
    ],
    "user": "NirIzr",
    "time": "Aug 26, 2018 at 3:26",
    "comments": [],
    "answers_data": [
        {
            "content": "You can find some of the samples from our work on deobfuscation at <pre><code>hxxp://www.cs.arizona.edu/projects/lynx-project/Samples/</code></pre> (s/x/t/).  The programs---a mix of Linux and Windows binaries---are all benign (you'll have to take my word for this :-), but use a variety of techniques commonly used by malware. These samples formed the basis for the results reported in the following papers:\n\nYadegari et al, \"A Generic Approach to Automatic Deobfuscation of Executable Code\", Proc. IEEE Symposium on Security and Privacy, May 2015.  These consist of programs obfuscated using tools such as VMProtect, ExeCryptor, and Themida; and several that use return-oriented programming.\nQiu et al, \"Identifying and Understanding Self-Checksumming Defenses in Software\", Proc. Fifth ACM Conference on Data and Application Security and Privacy (CODASPY), March 2015.  This is a collection of programs that use a variety of techniques, including self-modifying code, to implement self-checksumming-based anti-tampering.\n\nWe used to have a link to these samples on the project web page, but Google decided that we were distributing malware and put a big red warning next to their link (talk about false positives!), so we ended up removing the link. This is also the reason the link above has been disguised with \"hxxp\".\n",
            "votes": "5",
            "user": "NirIzr",
            "time": "Aug 25, 2018 at 19:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Thanks a lot! Would you be kind enough to explain the origin of the samples? Rough quantities would also be appriciated!</span>",
                    "time": null
                },
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">The obfuscated code consists of several small programs we wrote ourselves  (binary-search, bubble-sort, matrix-multiply, etc.); and some quasi-malware -- code whose source we got from VX Heavens and which we then obfuscated using Themida etc (I call them \"quasi-malware\" because they don't have the actual malicious payload).  The ROP code is a collection of a few small programs we wrote ourselves (bubble-sort, factorial, fibonacci, matrix-multiply).  The self-checksumming programs are all based on an open-source MD5 program.  Please see the publications mentioned for details.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Awesome, thanks! I'll upvote your answer in a few hours, but I'll wait some more before I accept any answer</span>",
                    "time": null
                },
                {
                    "user": "debray",
                    "text": "<span class=\"comment-copy\">@NirIzr: my student mentioned that he thought that some of the samples from VX Heavens might still have questionable content -- he thought he had some problems with some of them.  Just to be safe, I've removed all of those samples from that website, so what is left are just programs we wrote ourselves and are certain about.  Please discard what you took previously and grab them again.  Sorry about that.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Malicious samples\nMy favorite source for malicious samples is a database i assembled myself by regulary pulling the free examples provided by VirusSign. Please not these samples do require registration, but come with reports indicating the type.\nThere may be no better archive for malicious samples than VirusTotal. If you don't happen to gain (intelligence) access there, you can still try open alternatives like Open Malware.\nGenerally, a good list for places to find malicious samples is here:\nLENNY ZELTSER\nBenign Samples\nAs for benign samples, I propose extracting benign executables from a fresh OS installations. You can simply install the target in a virtual machine and get a script to extract them.\nAnother source is crawling sites like PortableFreeware. Please make sure you check if executables collected this way to work in your environment.\nPossible false positives\nMost malware archives label their samples based on the detection ratio and labels provided by different ant-malware products (like VirusTotal). Asssuming samples with very low detection ratio and generic labels to be false positives is probably the best way to go here. Also, data collected from HoneyPots may yield relatively higher false positive rates.\nI often used the executables included in the Sysinternals Suite as a kind of 'false positives'. They are benign binaries utilizing system-near features in order to expose system internal data.\nOn a sitenode, please take time evaluating your dataset and finding biases hidden within. A lot of current research suffers from biased sample sets and unreproducible results.\n",
            "votes": "5",
            "user": "Nordwald",
            "time": "Sep 5, 2016 at 6:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Thanks! For the record I was asking only for white samples</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Some of the techniques i've also came up with, for the sake of completeness (I won't accept my own answer):\ndownload from github\nSome Github repositories have multiple executables either as needed utilities or as build output. Scanning Github for those using a GithubDownloader proved being slow but effective, and I results are really likely to be benign.\ncollect all executables/hashes from accessible machines\nSince I'm doing this as part of my job, I'm able to ask the IT department to collect hashes and samples from the multiple machines we have at my office. This was a good way to collect many executables for multiple versions of OSes with ease. Collecting hashes and downloading the ones available from VT was also a possibility (perhaps after further scrutiny).\n",
            "votes": "0",
            "user": "NirIzr",
            "time": "Sep 7, 2016 at 22:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}