{
    "title": "ASLR in Linux Vs Windows",
    "link": "https://reverseengineering.stackexchange.com/questions/25677/aslr-in-linux-vs-windows",
    "content": "I am quite new in binary exploitation. I am doing a lot of beginners exercise here. I am confused about ASLR. I tried some binary exploitation thing in Linux. It was recommended that I should stop ASLR in Linux before analyzing the binary.\nit is the command for that --> <pre><code>echo 0 > /proc/sys/kernel/randomize_va_space</code></pre>\nAm I right here? am I turning off my ASLR (randomizing stack addresses)?\nBut When I did the Windows 10 binary exploitation(vulnserver). I had to put my payload into stack address. And I noticed that the stack address (<pre><code>jmp esp</code></pre>) was constant, not changing.\nIs ASLR works differently in various OS?\nI don't know If I am asking a write question. please tell me if you know.\n",
    "votes": "2",
    "answers": 2,
    "views": "392",
    "tags": [
        "disassembly",
        "windows",
        "linux",
        "stack"
    ],
    "user": "lucky thandel",
    "time": "Aug 15, 2020 at 10:49",
    "comments": [
        {
            "user": "ifexploit",
            "text": "Did you check if the binary has /DYNAMICBASE property set? If it is not set then it means that REBASE was opted out while compiling the program itself i.e. ASLR is not being used.\n",
            "time": null
        },
        {
            "user": "lucky thandel",
            "text": "how do I check it in windows?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "By using this tool from Didier Stevens you've been able to check/set/unset DEP/ASLR characteristics of your file.\nCheck the file like this:\n<pre><code>setdllcharacteristics.exe yourfile.exe\n</code></pre>\nIf the output said <pre><code>DYNAMIC_BASE    = 0</code></pre> then you can use <pre><code>+d</code></pre> option to enable <pre><code>DYNAMICBASE</code></pre> of your file:\n<pre><code>setdllcharacteristics.exe +d yourfile.exe\n</code></pre>\nAnd you can use <pre><code>-d</code></pre> to unset again.\n",
            "votes": "3",
            "user": "Sina",
            "time": "Aug 18, 2020 at 16:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Yes, the command <pre><code>echo 0 > /proc/sys/kernel/randomize_va_space</code></pre> disables ASLR. From here:\n\n\nThe value shown will be one of the following:\n0 = Disabled\n1 = Conservative Randomization\n2 = Full Randomization\n\n\nThere are several differences in the implementation of ASLR between Windows and Linux, you can search for them online, but to your question: In Windows, an EXE or a DLL can be compiled with or without ASLR (same goes for DEP - Data Execution Prevention).\nFor the purpose of exploitation, we search for code without protection (you can find it with WinDBG using mona modules or narly, for example), in order to try to jump to it and run a code of our choice.\nTherefore, what you have probably seen is a jump to such a code without ASLR, and it's fine that the address is fixed (no ASLR!). If you have control over the stack, the <pre><code>jmp esp</code></pre> command jumps to the stack, and there you can put whatever code you want.\n",
            "votes": "1",
            "user": "alond22",
            "time": "May 20, 2021 at 18:56",
            "is_accepted": false,
            "comments": []
        }
    ]
}