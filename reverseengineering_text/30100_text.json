{
    "title": "What arguments are passed into a CALL instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/30100/what-arguments-are-passed-into-a-call-instruction",
    "content": "While reverse enginnering a simple C program for training, I asked myself what was the point of those lines :\n<pre><code>                         LAB_001006b5                                    XREF[1]:     0010069d(j)  \n    001006b5 48 8b 45 e0     MOV        RAX,qword ptr [RBP + local_28]\n    001006b9 48 83 c0 08     ADD        RAX,0x8\n    001006bd 48 8b 00        MOV        RAX,qword ptr [RAX]\n    001006c0 48 89 c7        MOV        argc,RAX\n    001006c3 e8 98 fe        CALL       <EXTERNAL>::atoi                                 int atoi(char * __nptr)\n             ff ff\n</code></pre>\nI thought that the function atoi called from the CALL instruction just pop the param from the stack (so lines from 001006b5 to 001006c0 were pointless ?)\nAm I getting it right or not?\nLast question : what \"MOV argc,RAX\" means ?? I mean, argc is a constant ?\n",
    "votes": "1",
    "answers": 2,
    "views": "392",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "maito",
    "time": "Mar 2, 2022 at 15:26",
    "comments": [],
    "answers_data": [
        {
            "content": "argc is an argument to the function main()\nmain is normally prototyped as\n<pre><code>int __cdecl main (int argc , char *argv[] )</code></pre> when locale is not used\nargc is the number of arguments passed to main  if you pass 5 arguments like\n<pre><code>foo.exe 1 2 3 4 5</code></pre>\nthen argc will be 6 ( 5 arguments (space delimited ) + 1 program )\nargv is a buffer that holds those arguments\n<pre><code>argv[0]=\"foo.exe\",argv[1]=\"1\",argv[2]=\"2\",argv[3]=\"3\",argv[4]=\"4\",argv[5]=\"5\"\n</code></pre>\neach of these arguments are 8 byte long in a 64 bit program (size of pointer)\nmov [rbp+1c] , argc --> saves the numebr of arguments\ncmp [rbp+1c] , 3 --> checks if you passed 2 arguments (default progname + 2 args)\nif the jz jumps it reaches xxxxx6b5  to load the start of argv buffer\nskips the first member argv[0] by adding 8\ndereferences the second member argv1 via mov rax , [rax]\nthe next mov argc , rax is a misrepresentation by ghidra\n(you may need to split args and rename it )\nit is not argc it is rdi the default first argument that is passed by register in System V AMD64 ABI\nyou may check it by unlabelling or redefining the function prototype in Ghidra or\ndisassembling 48 89 c7 in an external disassembler like shell storm\nthe atoi() takes one parameter a char * and returns an integer\n",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 4, 2022 at 15:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>MOV   RAX,qword ptr [RBP + local_28]</code></pre>\n \nThe address of the array <pre><code>argv</code></pre> (i.e., the pointer to the <pre><code>argv[0]</code></pre> element) is loaded into the RAX register.\n \n \n\n<pre><code>ADD   RAX,0x8</code></pre>\n \nThe value in RAX register is incremented by 8 (= length of <pre><code>int</code></pre> in bytes), so now  in RAX is the pointer to the <pre><code>argv[1]</code></pre> element.\n \n \n\n<pre><code>MOV   RAX,qword ptr [RAX]</code></pre>\n \nNow, into the RAX register is loaded the quadruple-word (i.e., 8 bytes) from the address in RAX, i.e., the value of the <pre><code>argv[1]</code></pre> element.\n \n \n\n<pre><code>MOV   argc,RAX</code></pre>\n \nThe value in RAX, i.e., the value of <pre><code>argv[1]</code></pre>, is loaded into the <pre><code>argc</code></pre> variable.\n \n \n\n\nThe <pre><code>argc</code></pre> means “arguments count”, i.e., number of arguments.\nIn this particular case, in <pre><code>argv[0]</code></pre> is the only argument for the <pre><code>atoi()</code></pre> function, and <pre><code>argv[1]</code></pre> is not the (non-existing) second argument – it is in fact <pre><code>argc</code></pre> (1 in this case) immediately following <pre><code>argv[0]</code></pre>.\n",
            "votes": "1",
            "user": "MarianD",
            "time": "Mar 3, 2022 at 12:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}