{
    "title": "Reverse Engineer 16 Bit error checking byte calculation",
    "link": "https://reverseengineering.stackexchange.com/questions/31858/reverse-engineer-16-bit-error-checking-byte-calculation",
    "content": "Hello =) I am attempting to reverse engineer a communications protocol to some obsolete equipment. Communication happens on an RS485 line.\nI have captured several exchanges and seem to have figured out a bit the structure.\nWhat I am missing at the moment is to see how I would calculate the last 2 bytes which seem to be a CRC, Checksum, LRC,... some sort of Calculated bytes depending on the data.\nThis is a Master -> Slave Communication.\nM: <pre><code>Hex bytes sent by master</code></pre>\nSx: <pre><code>Hex Bytes replied by Slave x</code></pre>\nSerial Numbers of Slaves:\nS1: F376150801196\nS2: F306103101122\nS3: F306093001029\n\nBroadcasting message to Discover devices\n\nM: <pre><code>ff 00 00 04 00 00 00 00 00 13 00 02 00 00 18 01</code></pre>\n\nS1: <pre><code>fe 00 f3 04 00 00 00 00 00 00 00 00 ac 04 a5 02</code></pre>\n\nS2: <pre><code>fe 00 f3 04 00 00 00 00 00 00 00 00 62 04 5b 02</code></pre>\n\nS3: <pre><code>fe 00 f3 04 00 00 00 00 00 00 00 00 05 04 fe 01</code></pre>\n\n\nDevices getting enumerated :\n\nM:  <pre><code>ff 00 f3 02 ac 04 00 00 00 1b 00 00 00 00 bf 02</code></pre>\n\nS1: <pre><code>fe 00 f3 02 ac 04 38 30 35 31 36 37 ac 04 8e 04</code></pre>\n\nM:  <pre><code>ff 00 f3 03 ac 04 00 00 00 1b 00 00 00 00 c0 02</code></pre>\n\nS1: <pre><code>fe 00 f3 03 ac 04 38 30 35 31 36 37 ac 04 8f 04</code></pre>\n\nM:  <pre><code>ff 00 f3 16 ac 04 00 00 00 1b 00 00 ac 04 83 03</code></pre>\n\nS1: <pre><code>fe 00 f3 16 ac 04 38 30 35 31 36 37 ac 04 a2 04</code></pre>\n\nM:  <pre><code>ff 00 f3 02 62 04 00 00 00 1b 00 00 00 00 75 02</code></pre>\n\nS2: <pre><code>fe 00 f3 02 62 04 31 33 30 31 36 30 62 04 ea 03</code></pre>\n\nM:  <pre><code>ff 00 f3 03 62 04 00 00 00 1b 00 00 00 00 76 02</code></pre>\n\nS2: <pre><code>fe 00 f3 03 62 04 31 33 30 31 36 30 62 04 eb 03</code></pre>\n\nM:  <pre><code>ff 00 f3 16 62 04 00 00 00 1b 00 00 62 04 ef 02</code></pre>\n\nS2: <pre><code>fe 00 f3 16 62 04 31 33 30 31 36 30 62 04 fe 03</code></pre>\n\nM:  <pre><code>ff 00 f3 02 05 04 00 00 00 1b 00 00 00 00 18 02</code></pre>\n\nS3: <pre><code>fe 00 f3 02 05 04 30 33 39 30 36 30 05 04 37 03</code></pre>\n\nM:  <pre><code>ff 00 f3 03 05 04 00 00 00 1b 00 00 00 00 19 02</code></pre>\n\nS3: <pre><code>fe 00 f3 03 05 04 30 33 39 30 36 30 05 04 38 03</code></pre>\n\nM:  <pre><code>ff 00 f3 16 05 04 00 00 00 1b 00 00 05 04 35 02</code></pre>\n\nS3: <pre><code>fe 00 f3 16 05 04 30 33 39 30 36 30 05 04 4b 03</code></pre>\n\n\n\nAcknowledgement of recieved command from different slaves to the commands of move slave from Master\n\nS1: <pre><code>fe 00 f3 41 00 00 00 00 00 00 00 00 ac 04 e2 02</code></pre>\nS2: <pre><code>fe 00 f3 41 00 00 00 00 00 00 00 00 62 04 98 02</code></pre>\nS3: <pre><code>fe 00 f3 41 00 00 00 00 00 00 00 00 05 04 3b 02</code></pre>\n\nCommands, acknowledged by the acknowledge command of each respective Slave accordingly\n\nS1 Stop Movement:\n\nM: <pre><code>ff fb f3 41 00 00 90 01 c2 01 00 03 ac 04 35 05</code></pre>\n\nS2 Stop Movement:\n\nM: <pre><code>ff fb f3 41 ff 00 00 00 00 00 00 03 62 04 96 04</code></pre>\n\nS3 Stop Movement:\n\nM: <pre><code>ff fb f3 41 ff 00 00 00 00 00 00 03 05 04 39 04</code></pre>\n\nS3 Go Right <pre><code>ff fb f3 41 ff 01 00 00 00 00 00 03 05 04 3a 04</code></pre>\n\nS3 Go Left  <pre><code>ff fb f3 41 ff 02 00 00 00 00 00 03 05 04 3b 04</code></pre>\n\nS3 Go Down  <pre><code>ff fb f3 41 ff 03 00 00 00 00 00 03 05 04 3c 04</code></pre>\n\nS3 Go Up    <pre><code>ff fb f3 41 ff 04 00 00 00 00 00 03 05 04 3d 04</code></pre>\n\nS2 Go Right <pre><code>ff fb f3 41 ff 01 00 00 00 00 00 03 62 04 97 04</code></pre>\n\nS2 Go Left  <pre><code>ff fb f3 41 ff 02 00 00 00 00 00 03 62 04 98 04</code></pre>\n\nS2 Go Down  <pre><code>ff fb f3 41 ff 03 00 00 00 00 00 03 62 04 99 04</code></pre>\n\nS2 Go Up    <pre><code>ff fb f3 41 ff 04 00 00 00 00 00 03 62 04 9a 04</code></pre>\n\nS1 Go Right <pre><code>ff fb f3 41 ff 01 90 01 c2 01 00 03 ac 04 35 06</code></pre>\n\nS1 Go Left  <pre><code>ff fb f3 41 ff 02 90 01 c2 01 00 03 ac 04 36 06</code></pre>\n\nS1 Go Down  <pre><code>ff fb f3 41 ff 03 90 01 c2 01 00 03 ac 04 37 06</code></pre>\n\nS1 Go Up    <pre><code>ff fb f3 41 ff 04 90 01 c2 01 00 03 ac 04 38 06</code></pre>\n\n\nS3 Go to\n\n400 , 450 : <pre><code>ff fb f3 41 ff 05 90 01 c2 01 00 03 05 04 92 05</code></pre>\n401 , 450 : <pre><code>ff fb f3 41 ff 05 91 01 c2 01 00 03 05 04 93 05</code></pre>\n402 , 450 : <pre><code>ff fb f3 41 ff 05 92 01 c2 01 00 03 05 04 94 05</code></pre>\n403 , 450 : <pre><code>ff fb f3 41 ff 05 93 01 c2 01 00 03 05 04 95 05</code></pre>\n404 , 450 : <pre><code>ff fb f3 41 ff 05 94 01 c2 01 00 03 05 04 96 05</code></pre>\n405 , 450 : <pre><code>ff fb f3 41 ff 05 95 01 c2 01 00 03 05 04 97 05</code></pre>\n406 , 450 : <pre><code>ff fb f3 41 ff 05 96 01 c2 01 00 03 05 04 98 05</code></pre>\n407 , 450 : <pre><code>ff fb f3 41 ff 05 97 01 c2 01 00 03 05 04 99 05</code></pre>\n408 , 450 : <pre><code>ff fb f3 41 ff 05 98 01 c2 01 00 03 05 04 9a 05</code></pre>\n409 , 450 : <pre><code>ff fb f3 41 ff 05 99 01 c2 01 00 03 05 04 9b 05</code></pre>\n410 , 450 : <pre><code>ff fb f3 41 ff 05 9a 01 c2 01 00 03 05 04 9c 05</code></pre>\n\n\nFrom my observations the Structure I have the following identified:\n<pre><code>ff    fb    f3    41 ff 05 9a 01 c2 01 00 03 05     04     9c     05</code></pre>\nbyte1 byte2 byte3 --------------------------------- byte13 byte14 byte15 byte16\n\nbytes 13 and 14 are to identify the specific device which is in a multi-drop network for whom the command is for. It is the last 5 numbers of the serial number represented in Hexadecimal.\n\n0405 -> 01029 <- S3: F306093001029\n0462 -> 01122 <- S2: F306103101122\n04ac -> 01196 <- S1: F376150801196\n\n\nbytes 15 and 16 are the calculated ones, which I am trying to figure out how they get calculated.\n\n\n\nI have been manually attempting to calculate and compare several 16 bit CRCs and also tried running several frames through Reveng with out much luck, no models ever get found.\n\nAny help and insights would be greatly apreciated.\nThanks!\n",
    "votes": "3",
    "answers": 1,
    "views": "242",
    "tags": [
        "serial-communication",
        "crc",
        "checksum"
    ],
    "user": "Pau Coma Ramirez",
    "time": "May 12, 2023 at 0:11",
    "comments": [],
    "answers_data": [
        {
            "content": "So, after reviewing This following Stack Overflow Question\nI opened up an excel and made some tests and effectively\nSum of all bytes is the calculation\n\nHex  <pre><code>ff  00  00  04  00  00  00  00  00  13  00  02  00  00  18  01</code></pre>\nDec  <pre><code>255 0   0   4   0   0   0   0   0   19  0   2   0   0</code></pre>\n\nSum of all in Decimal = 280 --> Respresented in Hex <pre><code>0118</code></pre>\n\n\n\nSometimes we search for too complicated answers to simple things.\nThanks anyway for having a look.\n",
            "votes": "2",
            "user": "Pau Coma Ramirez",
            "time": "May 12, 2023 at 0:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}