{
    "title": "How was Playstation Portable hacked? How is custom firmware developed? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8212/how-was-playstation-portable-hacked-how-is-custom-firmware-developed",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nHow was PSP hacked?\nOn first hand, how do people rip the binary out of PSP? I am just curious how all those hardware reverse engineering works. \nP.S. Is there a PSP Custom firmware developer community around?\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "firmware",
        "hardware",
        "mips"
    ],
    "user": "Jin Suk Park",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "This blog seems to be by a group that hacked at least some consoles. Obviously, you need a lot of time, skill and resources to do this.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I don't know the whole story but AFAIK the initial release of PSP did not use encryption or code signing, so a skilled person was able to make custom code run based off a game. This was used to explore and document the system and develop a customSDK.  later firmware updates did implement encryption, but by this time hackers were able to debug code, so they could analyse the firmware update and extract the keys from it.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 12, 2015 at 21:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "To answer the question, how did reverse engineers hack the psp? \nLike this: \nhttp://hackaday.com/2011/03/13/reverse-engineering-the-psp/\nhttp://sec.pn.to/pw/?plugin=attach&pcmd=open&file=tapping.jpg&refer=Bases\nFirst the reverse engineer rips the machine apart, and checks all of its components. Then he finds points of interaction. Perhaps the machine has a debugger port, like a JTAG. From there, the engineer attempts to circumvent any security which prevents him from dumping the firmware image. For this stage, researching the exact functionality of each hardware component is critical. \nIn the link I gave above, the engineer figures out how the NAND chips communicate by guessing various pin configurations. He then uses that knowledge to overwrite parts of memory, and observe the boot up process. Once you understand how the device's operating system boots, it is often possible to overwrite security protections which are selected during boot. Essentially force the device to boot into developer mode, where it may allow you to view sensitive information. \nUsually the firmware image wont have source files. It will be a binary dump, which the reverse engineer may disassemble for further analysis. If you are lucky you will be able to dump a the entire file system, or the kernal the device is running. \nOnce the reverse engineer is possession of the firmware image, if it is the goal to recreate their own firmware, they may begin writing it based on the firmware image: \nlike this: \nhttps://github.com/uofw/uofw\nIf you are interested in reverse engineering sony products: \nSony's game consoles are kind of unique in terms of computers. They are usually not set up like a typical x86 computer. \n\nYou should learn Sony's proprietary architectures. PSP uses MIPS architecture, which is thankfully, very common. However sony is very fond of making up its own CPU architectures. the PS3 runs on the notoriously complex \"Cell\" architecture (6 core!) for instance. http://www.gamefaqs.com/boards/620272-playstation-vita/64995907 gives the basics. \nRead up on the various play station hacking sites: http://www.ps3hax.net/forum.php (beware, invasive ads) \nRead up on how famed hacker George Hotz hacked the PS3 http://rdist.root.org/2010/01/27/how-the-ps3-hypervisor-was-hacked/\ncheck out this paper on forensics on the device - http://link.springer.com/chapter/10.1007%2F978-3-642-04155-6_9 - forensic analysists often have to work at a very low level, so this paper could help you understand the software/operating system of the device.\n",
            "votes": "1",
            "user": "MrSynAckSter",
            "time": "Feb 12, 2015 at 23:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Cell was PS3; ps4 is practically off- the -shelf amd64 system with FreeBSD kernel. And even Cell was using PowerPC-based instruction set, which is not exactly obscure</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Fixed. Off by one error ;)</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Also, while the instruction set is not obscure, programmers have complained quite a bit about cell architecture being hard to use. It does introduce complexities that you have to understand.</span>",
                    "time": null
                }
            ]
        }
    ]
}