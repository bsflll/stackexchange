{
    "title": "Ways to detect Function hooking?",
    "link": "https://reverseengineering.stackexchange.com/questions/15325/ways-to-detect-function-hooking",
    "content": "I making a game and I'm trying to find a way to prevent against function hooking (IAT/VMT/etc), or at the least detect it, I understand how they work but dont see a very reliable way to detect or prevent them. Does anyone have any ideas on how to do this? it would be greatly appreciated.\n",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "function-hooking"
    ],
    "user": "Xiurt",
    "time": "May 10, 2017 at 23:43",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "it's a bit too broad asked like this but this and this should give you some hints.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Here are several possible solutions for the problem. Generally specking you will need a combination of watchdog and hidden traps. This will not be a bullet proof but will be good enough to make it hard on the attacker to hook your game.\nVary Basic:\n\nbuy commercial protector for the game\n\nBasic:\n\nDo not use IAT but resolve everything dynamically.\nCreate watchdog thread that will check all critical apis/functions for patches randomly - if the preamble is different from standard one (mov edi, edi or push ebp, mov ebp, esp)\n\nAdvanced Basic (in addition to Basic):\n\nCreate watchdog process to check and monitor main process for alternation.\nMain process also will check for the presence of the watchdog process\nAdd integrity calculation functions which will check checksums for the critical code blocks for alternation. This could be done from main process and watchdog process.\n\n\nDistribute traps that will check for code validity randomly in various parts of the game. If possible move the checks in the code on every execution of the game (your binary will always be rewritten after each execution)\nStore the on-disk binary in obfuscated state and unpack it during loading\n\n\nAdvanced (in addition to the above):\n\nImplement anti-injection techniques to prevent process alternation from outside.\nControl the loading of all the libraries that your need by implementing your own loader, previously validating that they are authentic (signature, checksums...)\nAlternatively check that all system libraries in your process are not local copies using the VAD trees. Most already loaded libraries will be mapped between processes with Copy-On-Write flag to save resources. If the patch was applied anywhere in the library address space, OS will create a local copy.\n\nMore Advanced:\n\nCreate kernel driver (right one) to assist on process alternation protection. It would better protect from code injection, memory alternation. It would provide loading protection and etc.\n\nThat's for now. I'll think about more options along the way.\n",
            "votes": "1",
            "user": "PhoeniX",
            "time": "May 14, 2017 at 5:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "This ties into the Turing-old problem of execution prevention. So, I'll try to answer a very general question in a very general way.\nPerhaps the most common method for function hooking is editing the IAT at runtime or during execution(Or the constant address table in .rdata for local functions). But detecting function hooks by checking the IAT is completely unreliable. It's like assuming a page that has been torn out of a book is still there because the index says it is. No runtime-filled tables (IAT, VMT, Windows Executable Header) containing references to instructions are guaranteed to provide any conclusive information as to what is actually being executed in memory. \nA common method for hooking that is invisible to a program's address tables is applied by placing a jump instruction into the assembly of the targeted function directly after the stack pointer is moved into the base pointer to be pushed and before the stack is expanded.\nSo, speaking in terms of reliable automatic prevention, we are led to the conclusion that we must derive the conditions upon which our \"Hook Detector\" detects function hooks from the predictability of our program's execution procedure.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "May 13, 2017 at 12:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">are you going to expand on this or that's your whole answer?</span>",
                    "time": null
                },
                {
                    "user": "Nash",
                    "text": "<span class=\"comment-copy\">Doing some research/analysis of patterns. Will expand when I have more insight. You're a Hex-Rays overlord so feel free to correct and edit.</span>",
                    "time": null
                }
            ]
        }
    ]
}