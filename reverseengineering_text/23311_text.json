{
    "title": "Dumping the GOT with gdb at run time",
    "link": "https://reverseengineering.stackexchange.com/questions/23311/dumping-the-got-with-gdb-at-run-time",
    "content": "I want to see how the plt stubs are being resolved at run time when lazy linking is used and how the GOT is changed along the way. How can I dump the GOT with gdb?\n",
    "votes": "5",
    "answers": 1,
    "views": "9k",
    "tags": [
        "binary-analysis",
        "gdb",
        "elf",
        "plt",
        "got"
    ],
    "user": "Trey",
    "time": "Feb 21, 2020 at 1:01",
    "comments": [],
    "answers_data": [
        {
            "content": "There are a couple of options for this.\n\nUse pwndbg or gef. They have a command called <pre><code>got</code></pre> which looks like this\n\n<pre><code>gef➤  got\n\nGOT protection: Partial RelRO | GOT functions: 4\n\n[0x555555755018] free@GLIBC_2.2.5  →  0x555555554606\n[0x555555755020] puts@GLIBC_2.2.5  →  0x555555554616\n[0x555555755028] malloc@GLIBC_2.2.5  →  0x555555554626\n[0x555555755030] sprintf@GLIBC_2.2.5  →  0x555555554636\n</code></pre>\n<pre><code>pwndbg> got\n\nGOT protection: Partial RELRO | GOT functions: 4\n\n[0x555555755018] free@GLIBC_2.2.5 -> 0x555555554606 (free@plt+6) ◂— push   0 /* 'h' */\n[0x555555755020] puts@GLIBC_2.2.5 -> 0x555555554616 (puts@plt+6) ◂— push   1\n[0x555555755028] malloc@GLIBC_2.2.5 -> 0x555555554626 (malloc@plt+6) ◂— push   2\n[0x555555755030] sprintf@GLIBC_2.2.5 -> 0x555555554636 (sprintf@plt+6) ◂— push   3\n</code></pre>\n\nAccording to their sources both use <pre><code>readelf</code></pre> as such to display this information\n\n<pre><code>$ readelf --relocs ll\nRelocation section '.rela.dyn' at offset 0x4a0 contains 9 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000200dd8  000000000008 R_X86_64_RELATIVE                    750\n000000200de0  000000000008 R_X86_64_RELATIVE                    710\n000000201040  000000000008 R_X86_64_RELATIVE                    201040\n000000200fd0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fd8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200fe0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200fe8  000700000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200ff0  000900000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n000000200ff8  000a00000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n\nRelocation section '.rela.plt' at offset 0x578 contains 4 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000201018  000100000007 R_X86_64_JUMP_SLO 0000000000000000 free@GLIBC_2.2.5 + 0\n000000201020  000300000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0\n000000201028  000600000007 R_X86_64_JUMP_SLO 0000000000000000 malloc@GLIBC_2.2.5 + 0\n000000201030  000800000007 R_X86_64_JUMP_SLO 0000000000000000 sprintf@GLIBC_2.2.5 + 0\n</code></pre>\nAnd then use this output to dump GOT while debugging.\n\nAnother method is to use <pre><code>plt</code></pre> symbols to resolve <pre><code>got</code></pre>\n\n<pre><code>pwndbg> disass 'puts@plt'\nDump of assembler code for function puts@plt:\n   0x0000555555554610 <+0>: jmp    QWORD PTR [rip+0x200a0a]        # 0x555555755020\n   0x0000555555554616 <+6>: push   0x1\n   0x000055555555461b <+11>:    jmp    0x5555555545f0\nEnd of assembler dump.\npwndbg> tele 0x555555755020\n00:0000│   0x555555755020 (_GLOBAL_OFFSET_TABLE_+32) —▸ 0x7ffff7aa2f90 (puts) ◂— push   r13\n01:0008│   0x555555755028 (_GLOBAL_OFFSET_TABLE_+40) —▸ 0x7ffff7ab4f10 (malloc) ◂— push   rbp\n02:0010│   0x555555755030 (_GLOBAL_OFFSET_TABLE_+48) —▸ 0x7ffff7a892d0 (sprintf) ◂— sub    rsp, 0xd8\n03:0018│   0x555555755038 (data_start) ◂— 0x0\n04:0020│   0x555555755040 (__dso_handle) ◂— 0x555555755040 /* '@PuUUU' */\n05:0028│   0x555555755048 (completed) ◂— 0x0\n... ↓\npwndbg> print puts\n$13 = {<text variable, no debug info>} 0x7ffff7aa2f90 <_IO_puts>\n</code></pre>\n",
            "votes": "7",
            "user": "sudhackar",
            "time": "Feb 21, 2020 at 7:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}