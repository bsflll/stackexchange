{
    "title": "Lots of mov instructions into ebp+offset - What is happening?",
    "link": "https://reverseengineering.stackexchange.com/questions/20278/lots-of-mov-instructions-into-ebpoffset-what-is-happening",
    "content": "While learning RE I have come across this large segment of instructions that contains a majority of <pre><code>mov [ebp+offset], value</code></pre> instructions. I believe that <pre><code>ebp + offset</code></pre> are local variables? I think? Could it really just be a lot of local variables? Or could it actually be a data structure and this is how IDA represents it? I have a theory of what this might be but if anyone knows what this could mean that would be sweet.\nHere's a screenshot:\n\nMy guess is this is actually a data structure. <pre><code>ebp</code></pre> is the base address of the structure. The <pre><code>mov</code></pre> instructions between the <pre><code>mov [...], offset value</code></pre> are padding bytes. I'm guessing they are just padding bytes since <pre><code>esi</code></pre> doesn't contain a value (it was <pre><code>xor</code></pre>-ed with itself at the top of the screenshot) and is <pre><code>mov</code></pre>'d <pre><code>epb + offset</code></pre> quite a lot in this block.\nAny ideas and advice on what is happening in this screenshot would be appreciated. Thanks.\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis",
        "x86"
    ],
    "user": "user3238415",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "w s",
            "text": "It may be local array of structures\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Data structures (<pre><code>struct</code></pre>s, <pre><code>union</code></pre>s, <pre><code>class</code></pre>es, etc) are higher level elements that completely disappear after the compilation step takes place. Meaning that the concepts themselves are completely invisible in the binary. Of course, certain code patterns may still suggest or imply that a data structure was present in the code, there are no assembly equivalent (nor one is needed) to the <pre><code>struct</code></pre>, <pre><code>union</code></pre> or <pre><code>class</code></pre> keywords.\nAfter providing the above context, I'll address the specific questions and statements you've made throughout the question:\n\nI believe that <pre><code>ebp + offset</code></pre> are local variables?\n\nYou accurately understand that <pre><code>ebp</code></pre> is used to reference the stack and that therefore any <pre><code>ebp</code></pre> based reference is probably a reference to a stack-based variable. \n\nCould it really just be tonnes of local variables?\n\nIt could. However as I've explained in the first paragraph it is impossible to know for sure whether the original source code had a lot of local variables or a single, a few, or maybe even nested structures. \nIt is however, unnecessary (unless your goal is to reach binary identical code reconstruction) to specifically use the same constructs used in the original code. If your goal is to gain a decent understanding of the code, you should feel free to implement those data structures as you see fit and will be the most intuitive representation for you. You should rely on IDA's structure definitions you make the assembly code as readable to you as possible, without putting too much thought as to how the original source code was written.\n\nOr could it actually be a data structure and this is how IDA is representing it?\n\nTherefore, this is not how \"IDA represents it\", but how any compiler will translate the code to assembly. IDA just helps with an interactive interface to the disassembled machine code.\n\n<pre><code>ebp</code></pre> is the base address of the structure\n\nAs the function starts with a rather standard <pre><code>mov ebp, esp / sub esp, IMM</code></pre> it is unlikely that <pre><code>ebp</code></pre> itself points to a structure. It points to the stack offset at where a new stack frame was created. This is a very common practice. It is very likely, however, that a structure begins at a certain offset on the stack, and <pre><code>ebp</code></pre> is used to reference it, using the offset from the start of the stack frame.  \n\nThe <pre><code>mov</code></pre> instructions between the <pre><code>mov [...], offset value</code></pre> are padding bytes\n\nAssuming you're talking about the <pre><code>mov, REG, IMM</code></pre> instructions, these are probably register initializations that are used further down the line. They are spread between the stack-based <pre><code>mov</code></pre> instructions for performance reasons. To oversimplify, pipeline optimizations allow modern processors to assign register values somewhat in parallel to slower RAM write operations, resulting in an overall faster execution.\n\nI'm guessing they are just padding bytes since <pre><code>esi</code></pre> doesn't contain a value (it was <pre><code>xor</code></pre> at the top of the screenshot) and is <pre><code>mov ebp + offset</code></pre> quite a lot in this block.\n\nThe <pre><code>esi</code></pre> register does contain a value, that value is simply zero. <pre><code>xor</code></pre>ing a register with itself is a common way to set it to zero, which is shorter than a <pre><code>mov REG, 0</code></pre> instruction to encode. Additionally, <pre><code>mov OFFSET, REG</code></pre> is shorter than <pre><code>mov OFFSET, 0</code></pre>, so overall the compiler saves us a few bytes of code.\n",
            "votes": "0",
            "user": "NirIzr",
            "time": "Feb 4, 2019 at 11:58",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The <pre><code>mov ebp, esp</code></pre> sets EBP at top of stack, <pre><code>sub esp, 0F34h</code></pre> allocates 0xF34 bytes on stack. EBP is used as a base for writing and reading the bytes. This is standard x86 stack frame you can see in many Windows executables.\nIt looks like the 0xF34 bytes allocates variables and various structures, perhaps also array of 20-bytes structures after reviewing it, this doesn't look right:\n<pre><code>DWORD pointer to name\nDWORD - no idea what\nDWORD pointer to - no idea what -, can be NULL\nDWORD - no idea what -\nDWORD pointer to DWORD - no idea what -\n</code></pre>\nESI has value of zero. The <pre><code>mov [...], esi</code></pre> is used instead of <pre><code>mov [...], 0</code></pre> because the latter one has longer opcode.\nDon't get confused by the addition in <pre><code>ebp+var</code></pre>. All the bytes are actually located at lower addresses, below EBP.\nYou can learn more about the stack frame for example here:\nhttps://en.wikibooks.org/wiki/X86_Disassembly/Functions_and_Stack_Frames\n",
            "votes": "0",
            "user": "MazeGen",
            "time": "Jan 4, 2019 at 14:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}