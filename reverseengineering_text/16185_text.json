{
    "title": "Reverse engineering the PluginKit MacOS framework",
    "link": "https://reverseengineering.stackexchange.com/questions/16185/reverse-engineering-the-pluginkit-macos-framework",
    "content": "I've been tasked with an assignment requiring a thorough reverse engineering effort on the PluginKit framework in modern Mac operating system, and I'm looking for information to start off, instead of starting from scratch.\nMore specifically, I need to get a decent understanding of the internal storage and configuration layout and format of PluginKit, as well as how it's being manipulated, updated and read.\nThe only resource I've managed to come up with is this medium short article from over a year ago, by a person called Aditya Vaidyam.\nI found no relevant information (according to table of contents) in Mac OSX Internals by Amit Singh or in MacOS and *OS Internals by Jonathan Levin, and didn't find anything else to look at.\nMy question therefore is two-fold:\n\nAre there any other resources available that describe in-detail the OSX frameworks and the PluginKit framework specifically?\nWhat other resources, pointers, tips and previous research would you suggest I read before going into the task?\n",
    "votes": "8",
    "answers": 1,
    "views": "1k",
    "tags": [
        "osx",
        "macos"
    ],
    "user": "NirIzr",
    "time": "Aug 30, 2017 at 11:43",
    "comments": [
        {
            "user": "Aditya Vaidyam",
            "text": "That post was indeed written by me. It covers from a high level into the internals of how <pre><code>NSExtension</code></pre> bootstraps and operates, less so on how to deal with <pre><code>PlugInKit</code></pre>. There are actually zero other resources AFAIK but grab yourself a disassembler (provided you know some assembly) and go to town on the binary (which is actually located at <pre><code>/System/Library/PrivateFrameworks/PlugInKit.framework/Contents/MacOS/PlugInKit</code></pre>)\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "Yes, of course I could reverse engineer the file, but before doing so myself I searched for existing material I could rely on.\n",
            "time": null
        },
        {
            "user": "Aditya Vaidyam",
            "text": "@Nirlzr Ah, understood!\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "My offers won't be specific for your task, so I will try to answer your second question. I hope these helps to you or anyone having a similar task. Since your task is on a quite specific subject, I will offer you searching for something similar, and solve the puzzle by combining these details.\nI don't know if you have previous MacOS/iOS reversing experience. So here is a good tutorial to start for understanding platform details (Binary format etc.)\nAnd you can start with basic understanding of Objective-C runtime details. This information will be quite helpful when you face some (dis)assembly \nFor exp; \n\nMethod calls via send message \nAutomatic Reference\nCounting (retain/release method calls)\n\nThis post (Introduction to LLDB and Hopper) can be quite helpful since it provides an example of decompilation of an Apple's UIKit framework. By using that approach I decompiled PluginKit, but didn't focus on internals.\nYou can also check interface of PluginKit via Runtime Browser and search methods to focus on, or check pre-generated intefaces which are available on github page\nGood luck\n",
            "votes": "3",
            "user": "qwerty",
            "time": "Sep 6, 2017 at 13:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Thanks. Upvoted. When you say \"I decompiled PluginKit\", could you elaborate on that? Is there something I can read about your experience?</span>",
                    "time": null
                },
                {
                    "user": "qwerty",
                    "text": "<span class=\"comment-copy\">Actually not that much, I just followed the guide and disassembled the iOS binary for PluginKit. (MacOS binary is placed at <code>/usr/bin/pluginkit</code> ) If you have an issue until that part of course I can help. Rest is depends on what you are looking for. I think u need a real use case for PluginKit to understand, what it does and how it works. Then you can focus on specific parts for details and we can exchange knowledge.</span>",
                    "time": null
                }
            ]
        }
    ]
}