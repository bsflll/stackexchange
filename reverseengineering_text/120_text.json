{
    "title": "How to manage/revert to specific OS versions for effective patch diffing?",
    "link": "https://reverseengineering.stackexchange.com/questions/120/how-to-manage-revert-to-specific-os-versions-for-effective-patch-diffing",
    "content": "For the purpose of learning about the complexities involved in writing PoC's (and gaining experience in) one could do patch diffing and have real world vulnerable examples to practice on. For now please disregard the idea of making your own vulnerable programs.\nFor patch diffing I see 3 states an OS can be in, let's take windows 7 as example:\n\nPlain state (no service packs, no patches)\nPartially patched (not updated to the latest released patches)\nFully patched\n\nScenario\n\nMy vmware/vbox system is in state 3 (fully patched).\nNext I go to the Microsoft Security Bulletin and pick a vulnerability (e.g. kernel).\nNow I want to revert to a useful state...\n\nAlthough it will likely work on the plain state(1), the diff results will be bigger/harder to spot the issue. Secondly, the bug to the latest vulnerability could have been introduced by a previous patch/service pack.\nTherefore, how does one go from OS state 3 to state 2, where state 2 is a system patched up to just before the new patch that resolves the issue? Or if more convenient, from state 1 to state 2.\nupdate\nI realize my question isn't as clear as I thought it was in my head, hopefully this clarifies a bit\nI'm aware of the snapshot features of vmware/vbox but that is not what I'm looking for. What I'm actually aiming for is\n\nHow to get the old versions of the changed binaries?\nHow to know to which version to revert? Is there some naming scheme in the files?\n\nExample:\n\nMy system is fully up to date.\nI find a KB-XXXXX at the Security bulletin, extract it and it gives me an updated .dll named abc_005.dll\nNow I want to put my system in a state that I get the previous (vulnerable) version of the dll (e.g. abc_004.dll). <- How would I do this part?\n",
    "votes": "9",
    "answers": 3,
    "views": "313",
    "tags": [
        "windows",
        "operating-systems"
    ],
    "user": "ixje",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Michael Anderson",
            "text": "If they are spreading Patches to unknown vulnerabilities over time, or bundle them up with other fixes, you will not catch them as easily.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I think there's a couple of approaches to get where you want.  Given your scenario where you have the KB patch on your fully updated system.  To get back to the previous version, uninstall that patch.\nThe Metasploit Unleashed class used (still does?) has this command for XP that uninstalls all the patches:\n<pre><code>C:\\>dir /a /b c:\\windows\\$ntuninstallkb* > kbs.txt && for /f %i in (kbs.txt) do cd c:\\windows\\%i\\spuninst && spuninst.exe /passive /norestart && ping -n 15 localhost > nul\n</code></pre>\nAnother approach that I think gets you to the same, if not better, state is to install a completely unpatched version of the operating system (e.g. from a MSDN install with no service packs).  From here, you can extract the base files.  For the patched versions, MSFT provides an ISO every month with the patches.  You can extract the patched executables from here.  For example, here's the ISO from this month of security updates.\n",
            "votes": "3",
            "user": "mrduclaw",
            "time": "Mar 23, 2013 at 9:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">The first approach is useable forwards in time, but the last one is the killer answer! I checked and I can get these ISO's back to at least late 2009 (release date of win7) which is more then enough for my purposes</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Sweet, I'm glad it helps.  :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "VMWare offers a very useful snapshot functionality which makes it extremely simple to switch beween different states of the same VM. You can automate the process with VIX.\nI assume other VM solutions have something similar as well.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Mar 21, 2013 at 14:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I'm not 100% sure I understand your question but I'll try to answer it. \nFirst I would prepare VMs for the Windows versions you want to target. Every day you could create a snapshot which means that you can go back to that point in time at any future date. Snapshotting is something most VMs support. Then I would run Windows update on the VMs. This means that you will build a large catalog of versions of Microsoft DLLs over time. You could also pull the binaries and their PDBs from Microsoft Symbol servers but this requires knowing their hashes as far as I know.\nNow you would follow the Microsoft Security Bulletins. Select the product you're interested in and select the most recent patches only. Study the security bulletin article. If a security bulletin is found to be interesting you'd go to the knowledge base article linked from the security bulletin. There you can study what files were patched. If it's still something you're interested in you'd download the patch from the security bulletin page.\nOnce you have the patch file need to extract using one of the following commands:\n.exe\n<pre><code>setup.exe /t:C:[dest_dir] /c</code></pre>\n.msu\n<pre><code>expand -F:* [update_filename.msu] C:[tmp_dest_dir]</code></pre>\n<pre><code>cd [tmp_dest_dir]</code></pre>\n<pre><code>expand -F:* [extracted_update_filename.cab] C:[final_dest_dir]</code></pre>\n.msp\n<pre><code>msix [update_filename.msp] /out C:[dest_dir]</code></pre>\n.msi\n<pre><code>msiexec /a [update_filename.msi] /qb TARGETDIR=C:[target_dir]</code></pre>\nIn the extracted folder you should find the files indicated in the knowledge base article. If you've been following the proper snapshot policy you should have an older version available in the snapshot created this morning. Pull that version out of the virtual machine and use BinDiff in order to explore the differences.\n",
            "votes": "3",
            "user": "Peter Andersson",
            "time": "Mar 21, 2013 at 14:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">I realize my question isn't as clear as I thought it was in my head.&lt;br&gt; I'm am aware of the snapshot features of vmware/vbox but that is not what I'm looking for.&lt;br&gt; What I'm actually aiming for is 1) How to get the old verions of the changed binaries 2) How to know to which version to revert.&lt;br&gt; Your approach of daily snapshots works only forward in time, because as far as I can recall the moment we run windows update on a unpatched windows installation it will get all the latest versions and not the intermediate updates. Any ideas how to approach this going backwards in time?</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">Ah so you want to find binaries from before you started collecting them? Microsoft hosts all of them (not just the current one) on their symbol servers I believe. The problem is you need the MD5 hash of the version you want if I remember correctly. Igor probably knows how it works in detail as he works on IDA which I believe has symbol integration.</span>",
                    "time": null
                },
                {
                    "user": "ixje",
                    "text": "<span class=\"comment-copy\">exactly! And then a way to revert back to those reliably (in case they have dependencies on other also older files)</span>",
                    "time": null
                }
            ]
        }
    ]
}