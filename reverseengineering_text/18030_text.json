{
    "title": "What are guidelines to find COM functions definition through a proxy DLL? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/18030/what-are-guidelines-to-find-com-functions-definition-through-a-proxy-dll",
    "content": "This question already has an answer here:\n                                \n                            \n\n\n\n\nCOM interface methods\n\n                                (1 answer)\n                            \n\nClosed 6 years ago.\n\n\n\nI've successfully reverse a DLL file which uses a COM interface and found the Class ID (CLSID) and Interface ID (IID). In Visual Studio debugging memory, it shows <pre><code>S_OK</code></pre> with <pre><code>CoCreateInstance()</code></pre> and all the function pointers of that COM interface. I saw this question but that uses IDA to reverse a DLL.\nI've followed an article which shows finding methods definition using Visual Studio debug mode. I've both CLSID and IID from which I get the interface pointer.\nSo, my question is how can I find the (undocumented) function definitions? Is there any easy general guidelines to follow? It will be easy if someone show an procedure with Visual Studio, reversing with IDA is bit more complex.\n\nUpdate: According to the answer I reverse the DLL in IDA but the assembly shows the\n<pre><code>off_180002230   dq offset off_1800023D0 ; DATA XREF: .rdata:off_180002480↓o\n                dq offset ILxssUserSession\n                dq offset IUnknown_QueryInterface_Proxy\n                dq offset IUnknown_AddRef_Proxy\n                dq offset IUnknown_Release_Proxy\n                dq offset ObjectStublessClient3\n                dq offset ObjectStublessClient4\n                dq offset ObjectStublessClient5\n                dq offset ObjectStublessClient6\n                dq offset ObjectStublessClient7\n                dq offset ObjectStublessClient8\n                dq offset ObjectStublessClient9\n                dq offset ObjectStublessClient10\n                dq offset ObjectStublessClient11\n                dq offset ObjectStublessClient12\n                dq offset ObjectStublessClient13\n                dq offset ObjectStublessClient14\nunk_1800022B8   db  22h ; \"             ; DATA XREF: .rdata:0000000180002DE0↓o\n</code></pre>\nHow can I relate those offset to a real function pointer? The current DLL is a proxy stub DLL and the real function is implemented/defined in another DLL. I've also seen this question which shows to follow function pointers.\n",
    "votes": "2",
    "answers": 1,
    "views": "582",
    "tags": [
        "debugging",
        "com"
    ],
    "user": "Biswapriyo",
    "time": "6 years ago",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "For those who want to disassemble a COM interface, load PDB file in IDA. This helps me to disassemble it. Also you may use simple structs within structs as a inherited class.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Well, in general you follow the code flow from DllGetClassObject and find the code which creates COM classes depending on clsid and iid. Due to COM methods are virtual methods of C++ class, you'll be able to find VTBL for each COM class, and from there determine how many methods it has. Then you reverse each method to understand how many arguments it has and which are the types of arguments.\n",
            "votes": "3",
            "user": "Anton Kukoba",
            "time": "Apr 19, 2018 at 7:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">the only way is through disassembling. IDA may recognize the arguments count automatically, but the types of the arguments are up to you to reverse engineer. Also pay attention to the fact that COM methods pass the pointer to <i>this</i> as stack argument, not via ECX. I.e. first argument in COM methods is always <i>this</i>.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">each pointer in vtable points to the function code, which you need to disasseble. One by one.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">It depends on the class hierarchy. Yes the first 3 methods in ppv are always QueryInterface, AddRef and Release due to all COM classes are derived from IUnknown. If the class is derived from IDispatch (which is derived from IUnknown), then there's going to be GetTypeInfoCount, GetTypeInfo, GetIDsOfNames and Invoke. And after those, there will be own methods of the COM class.</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Ia asked if the offsets are different in 32bit and 64bit.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">Yep, these ppv items are pointers, so in 32bit code the offsets will be a multiple of 4, in x64 - multiple of 8. Ex 0, 4, 8 vs 0, 8, 0x10 etc.</span>",
                    "time": null
                }
            ]
        }
    ]
}