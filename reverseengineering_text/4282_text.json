{
    "title": "Prevent Windbg Log Breakpoint Fail by Memory Check",
    "link": "https://reverseengineering.stackexchange.com/questions/4282/prevent-windbg-log-breakpoint-fail-by-memory-check",
    "content": "Following break point fails because of bad memory address in some situation and cause break in execution:\n<pre><code>bp 0x12345678 \".printf \\\"PID: %d, unkVar: %d\\\n\\\", ..., poi(poi(ecx+1c)+8)+c;g\"\n</code></pre>\nIs there any way to test memory address before dereferencing in Windbg?\n",
    "votes": "3",
    "answers": 1,
    "views": "436",
    "tags": [
        "windbg"
    ],
    "user": "sealed...",
    "time": "May 7, 2014 at 7:38",
    "comments": [],
    "answers_data": [
        {
            "content": "testing memory address can be done with with \n<pre><code>.if ( poi(@R32) operator CONST ) { commands }\n</code></pre>\nbut i think the intent the question is not to break on memory access failure \nif that is the case wrap your conditional command with a <pre><code>.catch {} ; command to execute on exception</code></pre>  this will let the execution flow without breaking\na sample code \n<pre><code>#include <stdio.h>\n\nint main (void)\n{\n    __asm\n    {\n        xor eax , eax\n            increase:\n            inc eax\n            cmp eax , 0ffffffffh\n            jne increase\n    }\n    printf(\"we reached here\n\");\n    __asm\n    {\nloopfever:\n        jmp loopfever\n    }\n    return 0;\n}\n</code></pre>\ndisassembly of main\n<pre><code>0:001> uf 401000\nimage00400000+0x1000:\n00401000 55              push    ebp\n00401001 8bec            mov     ebp,esp\n00401003 33c0            xor     eax,eax\n\nimage00400000+0x1005:\n00401005 40              inc     eax\n00401006 83f8ff          cmp     eax,0FFFFFFFFh\n00401009 75fa            jne     image00400000+0x1005 (00401005)\n\nimage00400000+0x100b:\n0040100b 6840814000      push    offset image00400000+0x8140 (00408140)\n00401010 e809000000      call    image00400000+0x101e (0040101e)\n00401015 83c404          add     esp,4\n\nimage00400000+0x1018:\n00401018 ebfe            jmp     image00400000+0x1018 (00401018)\n</code></pre>\na conditinal break point on 401006 dereferencing eax (will throw exception on almost 3 gb of address space ) wrapped in a \n<pre><code>.catch {} ; gc\n</code></pre>\nbp \n<pre><code>0:001> .bpcmds\nbp0 0x00401006  \" .catch { .printf \\\"%x\n\\\" , poi( @eax ) ; gc };  ? @eax ;gc \";\n</code></pre>\nhere is an output \n<pre><code>Memory access error at ') ; gc '\nEvaluate expression: 65529 = 0000fff9\nMemory access error at ') ; gc '\nEvaluate expression: 65530 = 0000fffa\nMemory access error at ') ; gc '\nEvaluate expression: 65531 = 0000fffb\nMemory access error at ') ; gc '\nEvaluate expression: 65532 = 0000fffc\nMemory access error at ') ; gc '\nEvaluate expression: 65533 = 0000fffd\nMemory access error at ') ; gc '\nEvaluate expression: 65534 = 0000fffe\nMemory access error at ') ; gc '\nEvaluate expression: 65535 = 0000ffff\n380039 44003800 440038 44004400 440044 4b004400 4b0044 3d004b00 3d004b 45003d00 45003d 3a004500 3a0045 5c003a00 5c003a 39005c00 39005c 38003900 380039 44003800 440038 44004400 \nEnvironment starts at 0x10000 compare  \n\n0:000> s -su 10000 10100\n00010000  \"98DDK=E:\\98DDK\"\n0001001e  \"=::=::\\\"\n0001002e  \"=C:=C:\\Documents and Settings\\Ad\"\n\n7c90120e cc              int     3\n0:001> ~0s\neax=000100c4 ebx=7ffdf000 ecx=00000001 edx=0040c5f0 esi=00000000 edi=009af6ee\neip=00401006 esp=0013ff78 ebp=0013ff78 iopl=0         nv up ei pl nz na po cy\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000303\nimage00400000+0x1006:\n00401006 83f8ff          cmp     eax,0FFFFFFFFh\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "May 7, 2014 at 22:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}