{
    "title": "How to strip more than symbols?",
    "link": "https://reverseengineering.stackexchange.com/questions/4668/how-to-strip-more-than-symbols",
    "content": "I've noticed that, even after stripping symbols from my executable, class names and their methods are still included at the end of the executable file.\nFor instance:\n<pre><code>#include <iostream>\n\nusing namespace std;\n\nclass Clingons\n{\npublic:\n    void clingForever()\n    {\n        cout << \"Qapla\" << endl;\n    }\n};\n\nint main(int argc, char *argv[])\n{\n    Clingons cling;\n\n    cling.clingForever();\n\n    return 0;\n}\n</code></pre>\nThen compile and link with:\n<pre><code>g++ cling.cpp -o cling\n</code></pre>\nNow, when I look at the bottom of the resulting \"cling\" file with a hex editor, I can see the \"Clingons\" class name along with it's methods. I can also see this information while debugging..\neven after I strip them:\n<pre><code>strip -x cling\n</code></pre>\nI can still see the same information.\nSo why wasn't this information stripped away when I used the command above? Is there a way to strip (or mangle) this information other than by hand?\nThe used version of GCC is <pre><code>i686-apple-darwin10-llvm-g++-4.2 (GCC) 4.2.1</code></pre>\nThis is just an example case. My real project involves the Qt framework.\n",
    "votes": "7",
    "answers": 3,
    "views": "6k",
    "tags": [
        "executable",
        "functions",
        "symbols"
    ],
    "user": null,
    "time": "Jun 24, 2014 at 2:40",
    "comments": [],
    "answers_data": [
        {
            "content": "It is possible that you are using RTTI.\nTry compiling your code with option <pre><code>-fno-rtti</code></pre>.\nUpdate: It is really RTTI. \nI don't know how exactly it works, but I succeeded to remove those strings as follows:\n<pre><code>$ g++ -Xlinker -unexported_symbol -Xlinker \"*\" -o executable file.cpp\n$ strip executable\n</code></pre>\n(This was found at https://stackoverflow.com/questions/1931626/how-to-really-strip-a-binary-in-macos )\n",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Keep in mind that there are edge cases where RTTI may indeed be <i>required</i> at runtime, though.</span>",
                    "time": null
                },
                {
                    "user": "user2005",
                    "text": "<span class=\"comment-copy\">I know about this one (I commented on the accepted answer) but it doesn't seem to remove everything from my current Qt project.</span>",
                    "time": null
                },
                {
                    "user": "user2005",
                    "text": "<span class=\"comment-copy\">@Access Denied: RTTI is disabled by default on Qt libraries so I don't think disabling it would cause an issue. I tried disabling it via -fno-rtti and it didn't do anything.</span>",
                    "time": null
                },
                {
                    "user": "user2005",
                    "text": "<span class=\"comment-copy\">Upon further inspection, I realize that this solution does work. It does keep references to classes and functions in external libraries but nothing from my own code.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Try compiling your program as a static assembly, and strip it using the compiler.  You won't find any 'cling' references in the resultant executable.\n<pre><code>$ g++ -static -s cling.cpp -o cling\n\n$ ls -l cling*\n-rwxr-x--- 1 lornix lornix 1,313,792 Jun 22 19:19 cling*\n-rw-r----- 1 lornix lornix       222 Jun 22 19:16 cling.cpp\n\n$ strings -a cling | grep -ic cling\n0\n</code></pre>\n",
            "votes": "2",
            "user": "lornix",
            "time": "Jun 23, 2014 at 2:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2005",
                    "text": "<span class=\"comment-copy\">I tried your suggestion but it wouldn't build: can't locate file for: -lcrt0.o ... Also, my real project is using the Qt framework so I can't build static unless I purchase a commercial license.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The toolbox ELFKicker has an utility called <pre><code>sstrip</code></pre> that strip an ELF executable down to the bones.\nBut, it seems that you are using Mach-O executable format. So, I would recommend to look at the source code of <pre><code>sstrip</code></pre> and build your own stripper.\nYou can also take a look at the source code of the <pre><code>strip</code></pre> command for Mach-O and get inspiration. And, also, this Python script <pre><code>strip_save_dsym</code></pre> might also give some hints.\nFinally, here are a few comparisons between ELF and Mach-O formats:\n\nDynamic Linking: ELF vs. Mach-O\nDynamic symbol table duel: ELF vs Mach-O, round 2\nCrafting a Tiny Mach-O Executable\n",
            "votes": "1",
            "user": "Glorfindel",
            "time": "Apr 25, 2022 at 16:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2005",
                    "text": "<span class=\"comment-copy\">Although your answer doesn't provide an instant solution, it's bold and I like it a lot. Studying sstrip looks like fun and maybe I'll end up creating my own special tool for the job.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Thanks, but I also totally agree with your choice of marking WS answer as the answer ! Mine is, at most, some complementary information about the topic.</span>",
                    "time": null
                }
            ]
        }
    ]
}