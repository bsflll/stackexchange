{
    "title": "What's the easiest way to determine the OS contained in a firmware binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/1804/whats-the-easiest-way-to-determine-the-os-contained-in-a-firmware-binary",
    "content": "I have pulled the Firmware binary from a PPC and have it loaded into IDA.  Now I'm trying to determine what operating system it contains but don't know where to start.\n",
    "votes": "10",
    "answers": 4,
    "views": "4k",
    "tags": [
        "file-format",
        "firmware"
    ],
    "user": "gigawatt",
    "time": "Apr 17, 2013 at 3:04",
    "comments": [],
    "answers_data": [
        {
            "content": "NB: Problem is that such an endeavor is very specific to the file one is looking at. So a lot of common sense and presumably experience is required to deviate from the path outlined here when necessary.\nOkay, you have numerous options, and all of us probably have kind of a recipe for this.\n\nI for one would start with <pre><code>file</code></pre> (Windows version here).\nAssuming that fails, I would search the web for the hex values of the first 8 to 16 bytes to see what comes up. In addition I would throw in search terms that fit my scenario.\nThat not yielding anything, I would proceed to see whether I can convince the tool <pre><code>strings</code></pre> to show me anything useful (there is a Windows version of strings at Sysinternals). This may be sufficient already.\nHowever, if the file contains compressed or encrypted blobs, I would now bring in firmware-mod-kit. It'll build straight from SVN (tested it only a few days ago), comes with <pre><code>binwalk</code></pre> included and allows to also unpack some <pre><code>initrd</code></pre>s which cannot be unpacked by the vanilla <pre><code>binwalk</code></pre>. Alternatively you can try <pre><code>find-firmware.pl</code></pre> (or in general the set of scripts of which it is part)\nFailing all that, I would open the file in a hex editor that supports some kind of binary templates (e.g. 010 Editor or freeware Neo).\n\n... from there I would look for patterns. And that's where it gets really hard to describe how I tick, it's a visual thing. Basically I would be looking for offsets, but the patterns of <pre><code>00</code></pre> and non-<pre><code>00</code></pre> would also tip me off in some cases. Additionally I might use the histogram functionality, provided the hex editor has one, to see whether a particular blob of data is likely to be encrypted or compressed (which both makes for a relatively even distribution of the byte values). Knowing that the platform (PPC) is Big Endian, I would assume that the offsets will also be Big Endian. So that setting would be switched on and then I'll see whether I can decode the meaning of something like a file header. If I can, then I'll check all of the blobs that I find and see whether I can discern some kind of information from them, such as a compression algorithm. For example <pre><code>gzip</code></pre> has specific lead bytes, whereas raw <pre><code>deflate</code></pre> doesn't unless the programmer chose to use them. Failing all of that, I would have to assume this is some other compression format for the time being and would use the LZMA SDK as a reference to come up with a working theory which one (usually the <pre><code>binwalk</code></pre> step from before is responsible to do exactly that). Looking for fingerprints of these I would hopefully be able to extract the blobs that are files in their own right and can be handled by external tools.\nIf all of those previous methods would fail, I would set out to find a piece of software that is supposed to know the file format to some extent, such as a firmware flasher program which takes the firmware file as input.\nNB: If your firmware blob comes from a driver, e.g. in Linux, you would of course start by looking into that driver for clues.\n\nOriginal answer (before it was clear that this is a firmware binary)\nI would start with the <pre><code>file</code></pre> command (Windows version here, thanks to amccormack - see his comment). It will usually tell you for the well-known executable formats for which OS (and kernel etc) it was built.\nExample:\n<pre><code># On an AIX 5.3 machine\n$ file python\npython: executable (RISC System/6000) or object module not stripped\n# Debian 6 on PPC64\n$ file python\npython: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, with unknown capability 0x41000000 = 0x13676e75, with unknown capability 0x10000 = 0xb0401, stripped\n# Ubuntu 10.04, x64\n$ file python\npython: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped\n# Windows\n>file C:\\Python27\\python.exe\nC:\\Python27\\python.exe; PE32 executable for MS Windows (console) Intel 80386 32-bit\n</code></pre>\n",
            "votes": "6",
            "user": "0xC0000022L",
            "time": "Apr 16, 2013 at 20:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "amccormack",
                    "text": "<span class=\"comment-copy\">See <a href=\"http://gnuwin32.sourceforge.net/packages/file.htm\" rel=\"nofollow noreferrer\">this site</a> if you want to run <code>file</code> from windows. It is installed natively on  most linux installations.</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">No luck finding it, this is assembly though so I'm not sure it would fall out that easy.  I have found dev/tty and dev/lp which seem to point to Unix</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">Sorry for the confusion.  I have the raw bits that gets loaded into the PowerPC.  This isn't a executable at all, just a memory grab from the attached flash.  I've put that into Ida Pro which has converted it back into assembly.  This is a far as I have made it.  I told you I was a Newb. :)</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">Yes, this is firmware.  Binwalk has been used with no luck and am not familiar with firmware-mod-kit at all.</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">Sorry, I see the confusion in my wording, hopefully the edit helped.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As 0xC0000022L already stated, strings is really the first step. Since this is a dump you obtained directly from the flash chip, there should be some readable strings (such as those from the bootloader for example), unless it is encrypted. \nYou mentioned it's a PPC based device, so you can also search for common PPC opcodes (binwalk can do this, specify the -A option); you should see at least some opcodes pop out. \nAnother thing to check is the entropy of the binary data (binwalk's -E option can do this, as can many other tools). It is typical for firmware to have certain sections (such as the kernel and file system) compressed, and this will show up as separate, very high entropy sections inside the firmware image. Strings and code have a medium-ish entropy. Encrypted data has very high entropy. \nThe hardware of the device can give you a bit of a clue as well. Devices with very little flash storage (say, 2MB or less) are unlikely to be running a large OS such as Linux for example; they are probably running a smaller RTOS of some kind. \nAnother thing to take into account is how you dumped the flash, what type of flash chip it is, and the flash chip's data bus. Parallel flash chips operating in 16-bit mode on little-endian systems for example have every two bytes flipped. So the string \"ABCD\" would be read out as \"BADC\" if you did a raw read of the chip in 16-bit mode. This would obviously mess up any signature-based analysis and cause strings to look oddly familiar yet simultaneously unreadable.\n",
            "votes": "4",
            "user": "devttys0",
            "time": "Apr 16, 2013 at 20:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">Yeah, I've dug around the strings (in the correct endianness) but haven't seen anything that screams the OS.  I'm not sure how the OPcodes will help but I have them all translated thanks to IdaPro.</span>",
                    "time": null
                },
                {
                    "user": "devttys0",
                    "text": "<span class=\"comment-copy\">Well if there are valid opcodes, at least part of it isn't compressed/encrypted. That code is probably a boot loader or decompressor stub, which may or may not have any information (or even knowledge) of the OS type. I'd look for strings/functionality that might indicate what else is in the firmware.</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">Sorry, I'm so new at this I don't know what strings would be of interest.  I've mentioned that I've found a /dev/tty and a /dev/lp along with stdin, stdout, and stderr.  I just don't know the significance of them.</span>",
                    "time": null
                },
                {
                    "user": "devttys0",
                    "text": "<span class=\"comment-copy\">As an example, if you see strings that read something like <code>Decompressing the main image</code> or <code>Decompressing kernel</code> would indicate that the code is at least responsible for decompressing other data in the firmware image. It might also reference the specific compression algorithm used, such as <code>LZMA</code> or <code>GZIP</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It isn't rocket science. IDA is not the tool to use for making this simple determination. Check the strings found in the firmware image. If you can't find any, it may be encrypted and/or compressed in its entirety. In either case, try Binwalk for additional assistance. The type of file system used in the firmware can also be a clue.\nAlso, there aren't but so many possible choices. Some are (most common in bold):\n\nLinux (various branches, uLinux, OpenWrt, ...)\nVxWorks\nBSD (various branches, iOS would be one)\nLynxOS\nQNE\nQNX\nWindows CE\nWindows NT embedded\n\nTo poster, since you say it may be VxWorks, here's one possible header data structure, as used in the WR54G(S)v5, as documented here.\n<pre><code>////////////////////////////////////////////////////////////////\n// Linksys VxWorks based firmware image format\n#pragma pack(1)\n\ntypedef struct _VxFileDescriptor\n{         \n  DWORD nFileId_BigEnd;     // file type (see below)\n  DWORD nFileSize_BigEnd;   \n} VxFileDescriptor, *pVxFileDescriptor;\n\ntypedef struct _VxLinksysHeader\n{\n  DWORD nCodePattern;                        \n  BYTE cUnknown_4[4];\n  BYTE cYear;       \n  BYTE cMonth;      \n  BYTE cDay;        \n  BYTE nProductVersion_0;   \n  BYTE nMinorVersion_0;   \n  BYTE cZUnknown_0D;\n  BYTE cImageFormatVersion[4];    \n  BYTE cZUnknown_12[238];  \n  //\n  // offset 0x100  -- begining of an secondary header?\n  //  \n  // After this point, all integers are stored big endian \n  // and should be read by endian neutral code \n  // (that is, read as big endian). \n  //\n  BYTE nProductVersion_1;   \n  BYTE nMinorVersion_1;     \n  WORD nMajorVersion_1;       \n  BYTE cZUnknown_104[2];  \n  WORD nHeaderSizeBigEnd;\n  DWORD nChecksumBigEnd; \n  BYTE cZUnknown_10B[2];  \n  WORD nUnknown_10D;     \n  BYTE cZUnknown_110[0x30]; \n  BYTE cModelName[0x20]; \n  BYTE cVendorName[0x20];\n  VxFileDescriptor TrailingFiles[8]; \n    // parts of file that follow primary file descriptors \n  VxFileDescriptor FileDescriptors[8]; \n    // primary file descriptors, immediately follow header  \n} VxLinksysHeader, *pVxLinksysHeader;\n</code></pre>\n",
            "votes": "3",
            "user": "dyasta",
            "time": "Apr 19, 2013 at 4:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Basically all of the BSDs are also possible choices, actually - probably most notably NetBSD. +1</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">True! Speaking of BSD derivatives, I was considering listing iOS, Android, and other mobile platforms, as they can be used for embedded systems, and a phone is almost classified as such anyway.</span>",
                    "time": null
                },
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">I'm starting to believe that this is VxWorks but don't know what I'm looking for to definitely say that this VxWorks.</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">You'd normally see a Wind River copyright somewhere. If you don't see any plaintext, then you gotta get that image to its plain state for analysis. When I worked on the VxWorks edition of the WRT54G(S), I reversed the VxWorks header format. Perhaps it will be the same or similar, who knows. I updated the answer. Link is here: <a href=\"http://bitsum.com/openwiking/owbase/WRT54G5_CFE/\" rel=\"nofollow noreferrer\">bitsum.com/openwiking/owbase/WRT54G5_CFE</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Most operating Systems have some kind of string in it that identifies the os and version. So by looking at the file with a hex editor you can often identify the os. Else you'll need to search for known signatures/footprints.\n",
            "votes": "1",
            "user": "Remko",
            "time": "Apr 16, 2013 at 15:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gigawatt",
                    "text": "<span class=\"comment-copy\">What do you mean by signatures/footprints?</span>",
                    "time": null
                },
                {
                    "user": "dyasta",
                    "text": "<span class=\"comment-copy\">He means a set of bytes, or marker, that are used to identify the image type, or identify data structures within the image. These are often the first field in a data structure definition, though don't have to be.</span>",
                    "time": null
                }
            ]
        }
    ]
}