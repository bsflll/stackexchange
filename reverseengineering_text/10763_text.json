{
    "title": "How do I call this function in inline ASM? (MSVC++)",
    "link": "https://reverseengineering.stackexchange.com/questions/10763/how-do-i-call-this-function-in-inline-asm-msvc",
    "content": "<pre><code>void __usercall sub_101A7850@<eax>(int a1@<edx>, int a2@<ecx>, int a3, int a4, int a5, int a6)\n</code></pre>\nMy first attempt (crashes):\n<pre><code>__declspec(naked) void __stdcall callit(const int& a1, const int& a2, unsigned int a3, const int *a4, int a5, int *a6)\n    {\n        // void __usercall sub_101A7850@<eax>(int a1@<edx>, int a2@<ecx>, int a3, int a4, int a5, int a6)\n        __asm\n        {\n            mov ecx, [esp + 4] // a1\n            mov edx, [esp + 8] // a2\n            push [esp + 12] // a3\n            push [esp + 16] // a4\n            push [esp + 20] // a5\n            push [esp + 24] // a6\n            call funcaddr\n            retn 24\n        }\n    }\n</code></pre>\nI have verified funcaddr is valid. Pretty sure its a __fastcall\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "c++"
    ],
    "user": "otc",
    "time": "Dec 16, 2015 at 17:13",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "it might help us if you give a little more context - in which function does the crash occur, with what register values, etc.\n",
            "time": null
        },
        {
            "user": "Viktor",
            "text": "Do you have some asm code where this function is called? Could you provide the assembly of the function? From the code snippet it looks like you're pushing the parameters in the wrong order.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Just use something like this:\n<pre><code>void call_sub_101A7850(int a1, int a2, int a3, int a4, int a5, int a6){\n    uintptr_t addr = 0x101A7850;\n    unsigned int result;\n    __asm {\n        mov edx, a1;\n        mov ecx, a2;\n        push a6;\n        push a5;\n        push a4;\n        push a3;\n        call addr;\n        add esp, 16;\n        mov result, eax;\n    }\n    return result;\n}\n</code></pre>\nIt seems to be <pre><code>__fastcall</code></pre>; however, in that calling convention, the first argument is stored in <pre><code>ecx</code></pre>, and the second one in <pre><code>edx</code></pre>, not like in your function's prototype, so you'll have to swap arguments order, like this:\n<pre><code>typedef int(__fastcall* tTheFunc)(int a1, int a2, int a3, int a4, int a5, int a6);\ntTheFunc func = (tTheFunc) 0x101A7850;\nfunc(a2, a1, a3, a4, a5, a6);\n//   ^swapped order, because a fastcall will always put the first arg in ecx and second in edx\n</code></pre>\nYou can also call it directly, like this:\n<pre><code>((int(__fastcall*)(int, int, int, int, int, int)) 0x101A7850)(a2, a1, a3, a4, a5, a6);\n</code></pre>\nHere's what's wrong with your function:\n\nDon't use naked functions to wrap assembly calls, you don't need it, and it just makes everything harder\nYou can directly do <pre><code>mov ecx, <argument-name></code></pre> instead of guessing where is the variable on the stack -- <pre><code>mov ecx, a1</code></pre> is much more intuitive, reliable and readable than <pre><code>mov ecx, [esp + 4]</code></pre>\nYou are doing a <pre><code>retn 24</code></pre> to clear your own function's pushed arguments, but you're not clearing what you've pushed for the called function, i.e. 16 more bytes (4 args * 4 bytes)\n",
            "votes": "3",
            "user": "rev",
            "time": "Aug 31, 2015 at 22:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}