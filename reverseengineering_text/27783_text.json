{
    "title": "Is this native code possible for further static analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/27783/is-this-native-code-possible-for-further-static-analysis",
    "content": "I was trying to reverse engineer a native lib code in an android app. the <pre><code>.so</code></pre> contains many functions. But the function <pre><code>sUQWWyTBEs()</code></pre> was referred in the Java code. I was curious how this function works, the code of the function <pre><code>sUQWWyTBEs()</code></pre> decompiled with <pre><code>Ghidra</code></pre>:\n<pre><code>*************************************************************\n                             *                           FUNCTION                          \n                             *************************************************************\n                             undefined  __cdecl  Myapp_sUQWWyTBEs()\n             undefined         w0:1           <RETURN>\n             longlong *        x0:8           param_1\n                             Myapp_sUQWWyTBEs XREF[2]:     Entry Point (*) , 00101350   \n        00100e44 08  00  40  f9    ldr        x8, [param_1 ]\n        00100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000           ; = \"c7a584936712f32773d3d0a\"\n        00100e4c 21  60  08  91    add        x1, x1, #0x218\n        00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]\n        00100e54 40  00  1f  d6    br         x2\n</code></pre>\nin my understanding, I have made the static analysis as like following:\n<pre><code>00100e44 08  00  40  f9    ldr        x8, [param_1 ]</code></pre>\nload the value at memory address param_1 into register x8.\n<pre><code>0100e48 01  00  00  b0    adrp       x1, s_c7a584936712f32773d3d0a_00101000  </code></pre>\nsets register x1 to 0x101000.\n<pre><code>00100e4c 21  60  08  91    add        x1, x1, #0x218</code></pre>\nadds 0x218 to x1, so it sets x1 to 0x101218.\n<pre><code>00100e50 02  9d  42  f9    ldr        x2, [x8, #0x538 ]</code></pre>\nloads the value at x8 + 0x538 into x2.\n<pre><code>00100e54 40  00  1f  d6    br         x2</code></pre>\nand finally branches to the  address stored in <pre><code>x2</code></pre>.\nwith that being said, Here I don't know the memory at address at <pre><code>x2</code></pre>, obviously it initially  depends on the value <pre><code>param_1</code></pre> holds. is there way or how can I refer where <pre><code>param_1</code></pre> was initialized? I don't know very much about usage of <pre><code>Ghidra</code></pre> or other reverse engineering tools. any one might help would be appreciated.\nEdit: This function returns a string like this <pre><code>47fjlkj843h9asjklj94kljfsad93j4l2715943hasd...</code></pre> but what I wanted is that how this value was generated or returned.\n",
    "votes": "1",
    "answers": 0,
    "views": "128",
    "tags": [
        "ida",
        "android",
        "ghidra",
        "java",
        "apk"
    ],
    "user": "hanan",
    "time": "Jun 3, 2021 at 13:54",
    "comments": [
        {
            "user": "Robert",
            "text": "If this is a function called from Java the first step is to look at the Java declaration of the method what parameters it has. On native side the first parameter of a JNI function should be the pointer to the JNI environment providing a lot of methods for Java native conversions.\n",
            "time": null
        },
        {
            "user": "hanan",
            "text": "@Robert at the at entry this code appears:    <pre><code>00100ca0 00  00  00  d0    adrp      param_1, 0x102000</code></pre> <pre><code>00100ca4 00  20  37  91    add        param_1=>PTR_LOOP_00102dc8 , param_1, #0xdc8</code></pre>  the param_1 was done like this. but value it is holding btw?\n",
            "time": null
        },
        {
            "user": "hanan",
            "text": "so param_1 appears to be holding jni env and being used as a frame pointer.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "My guess would be that <pre><code>#538</code></pre> is the offset to function <pre><code>newStringUTF</code></pre>. For offsets in 32bit see docs.google.com/spreadsheets/d/â€¦. I would assume that your binary is 64bit, thus the references are double the value of this spread sheet.\n",
            "time": null
        },
        {
            "user": "hanan",
            "text": "@Robert I have loaded the code into JEB decompiler and it outputs as link. JEB comments each instruction's output but I wanted how the output was generated?\n",
            "time": null
        }
    ],
    "answers_data": []
}