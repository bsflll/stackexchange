{
    "title": "Reverse engineering CRC and rolling code",
    "link": "https://reverseengineering.stackexchange.com/questions/21577/reverse-engineering-crc-and-rolling-code",
    "content": "Using an SDR I read out the transmitted message of a key fob for my old car. The car is a 98 Mercury Grand Marquis. It's quite old so I dought it's very sophisticated. \n<pre><code>55549d1748c2aa11d2044f\n55549d1748c2aa12b70132\n55549d1748c2aa139c081f\n55549d1748c2aa148102ff\n55549d1748c2aa156604e7\n55549d1748c2aa164b01ca\n55549d1748c2aa173008b7\n55549d1748c2aa18150297\n55549d1748c2aa19fa047f\n55549d1748c2aa1adf0162\n55549d1748c2aa1bc4084f\n55549d1748c2aa1ca9022f\n55549d1748c2aa1d8e0417\n55549d1748c2aa1e7301fa\n55549d1748c2aa1f5808e7\n55549d1748c2aa203d02c7\n55549d1748c2aa212204af\n55549d1748c2aa22070192\n55549d1748c2aa23ec087f\n55549d1748c2aa24d1025f\n55549d1748c2aa25b60447\n55549d1748c2aa269b012a\n55549d1748c2aa27800817\n55549d1748c2aa286502f7\n55549d1748c2aa294a04df\n</code></pre>\nHere is some of the data I've captured. What I have so far is as follows. \nBytes 1-6 never change. I assume they are like a signature or serial number or ID of some sorts. \nBytes 7 and 8 count up. I'm guessing this is the number only used once. When byte 8 rolls over, byte 7 increments. \nByte 9 seems random. It might be the rolling code. \nByte 10 is the button being pressed. The fob has 4 buttons and there are four numbers that show up here: 0x04, 0x08, 0x01, and 0x02. \nByte 11 also seems random. I assume this is the CRC just because it shows up at the end of the message. \nI've tried using reveng with no success. I fed it all of the listed data and more and it always comes back with \"no model found\". I'm not at all familiar with using reveng so just in case I'm an idiot here are the commands I've tried. each command was followed by the data through a batch file.  \n<pre><code>reveng -w 8 -s\nreveng -w 8 -l -s\nreveng -w 8 -F -s\nreveng -w 8 -l -F -s\n</code></pre>\nAny thoughts or ideas would be appreciated. \nEdit 1\nIt seems that I may have cracked the checksum. It is a simple sum of the message. The catch is that the first 2 bytes are not included. Also, the sum is truncated to just the least significant byte. I have not exhaustively checked the whole data set but spot checking seems to work 100% of the time. \n<pre><code>9d1748c2aa11d2044f  34f\n9d1748c2aa12b70132  332\n9d1748c2aa139c081f  31f\n9d1748c2aa164b01ca  2ca\n9d1748c2aa173008b7  2b7\n9d1748c2aa19fa047f  37f\n9d1748c2aa1adf0162  362\n9d1748c2aa1d8e0417  317\n9d1748c2aa1e7301fa  2fa\n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "crc"
    ],
    "user": "vini_i",
    "time": "Jun 29, 2019 at 15:21",
    "comments": [],
    "answers_data": [
        {
            "content": "Figured it out. It was not as complicated as I thought. Here is how it goes.\n<pre><code>9d1748c2aa11d2044f\n9d1748c2aa12b70132\n9d1748c2aa139c081f\n9d1748c2aa164b01ca\n9d1748c2aa173008b7\n9d1748c2aa19fa047f\n9d1748c2aa1adf0162\n9d1748c2aa1d8e0417\n9d1748c2aa1e7301fa\n</code></pre>\nThe 0x55 and 0x54 at the beginning of the message are the preamble and are not important. \nBytes 1-4 never change. I assume they are like a signature or serial number or ID of some sorts.\nBytes 5 and 6 count up. I'm guessing this is the number only used once. When byte 8 rolls over, byte 5 increments.\nByte 8 is the button being pressed. The fob has 4 buttons and there are four numbers that show up here: 0x04, 0x08, 0x01, and 0x02.\nByte 9 is the CRC. It is simply the sum of all the bytes and then gets truncated to the least significant byte. \nByte 7 might be the rolling code. If this is the rolling code then it's not super secure. Byte 7 is always 0x1b less than the last one. For instance, in the data set the first two entries are consecutive. 0xd2 - 0x1b = 0xb7 which is byte 7 of the following message. As long as you capture at least one message then any message can be reproduced using the counting number to see how many 0x1b to subtract. \nEdit\nJust came across someone with a 2004 Mercury Grand Marquis. The ID for their remote was different but the rolling code and CRC schemes were exactly the same. \nI reckon that every Ford remote that looks like this uses this same scheme.\n",
            "votes": "4",
            "user": "vini_i",
            "time": "Jul 2, 2019 at 13:09",
            "is_accepted": true,
            "comments": []
        }
    ]
}