{
    "title": "How to get the information of \"how many and which symbols are resolved by linker\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/8306/how-to-get-the-information-of-how-many-and-which-symbols-are-resolved-by-linker",
    "content": "The test is on 32-bit Linux, x86. With <pre><code>gcc</code></pre> 4.6.3 and GNU <pre><code>ld</code></pre> 2.22.\nSo I am trying to get the information of \"how many symbols are resolved by linker\" during link time? And how can I list the information of all the resolved symbols? say, the symbol name, memory address. \nI am thinking I should manipulate the linker to do so, but I have no idea how to do it. I have some experiences to fed linker with a link-script, but I didn't find anything related to resolved symbol information in the link-scripts..\nCould anyone give me some help? I really appreciate that! Thank you!\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c",
        "elf",
        "gcc"
    ],
    "user": "lllllllllllll",
    "time": "Feb 21, 2015 at 2:19",
    "comments": [
        {
            "user": "user3629249",
            "text": "you could start with the 'external symbols' table in each object file.  You could have the linker(gcc) output a map file.  This: '-Xlinker -Map=output.map' will cause a .map file to be output, named 'output.map'\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Information about symbols resolved at link time, including the symbol name and memory address, can be acquired by by executing <pre><code>ld</code></pre> with the <pre><code>-M</code></pre> option plus the name of the object file to be linked:\n<pre><code>$ ld -M <OBJECT FILE>\n</code></pre>\nThis will result in a link map being printed to STDOUT. Of course, this output can also be redirected to a file:\n<pre><code>$ ld -M <OBJECT FILE>  >  <OUTPUT FILE>\n</code></pre>\nThe following description of the <pre><code>-M</code></pre> option is given in the manual page for ld(1) as well as in section 2.1 \"Command Line Options\" in the sourceware.org documentation of ld: \n\n-M\n--print-map\nPrint a link map to the standard output. A link map provides information                      about the link, including the following:\n\nWhere object files are mapped into memory.\nHow common symbols are allocated.\nAll archive members included in the link, with a mention of the symbol which caused the archive member to be brought in.\nThe values assigned to symbols.\nNote - symbols whose values are computed by an expression which involves a reference to a previous value of the same symbol may not have correct result displayed in the link map. This is because the linker discards intermediate results and only retains the final value of an expression. Under such circumstances the linker will display the final value enclosed by square brackets. Thus for example a linker script containing:\n<pre><code>                 foo = 1\n                 foo = foo * 4\n                 foo = foo + 8\n</code></pre>\n\nwill produce the following output in the link map if the -M option is used:\n<pre><code>                     0x00000001                foo = 0x1\n                     [0x0000000c]                foo = (foo * 0x4)\n                     [0x0000000c]                foo = (foo + 0x8)\n</code></pre>\nSee Expressions for more information about expressions in linker scripts. \n\nHere is an example link map snippet for an i386 ELF32 object file:\n<pre><code><<= snip =>>\n\n.plt.got\n *(.plt.got)\n\n.text           0x0000000008048074        0xa\n *(.text.unlikely .text.*_unlikely .text.unlikely.*)\n *(.text.exit .text.exit.*)\n *(.text.startup .text.startup.*)\n *(.text.hot .text.hot.*)\n *(.text .stub .text.* .gnu.linkonce.t.*)\n .text          0x0000000008048074        0xa test.o\n                0x0000000008048074                main\n *(.gnu.warning)\n\n.fini\n *(SORT(.fini))\n                [!provide]                        PROVIDE (__etext, .)\n                [!provide]                        PROVIDE (_etext, .)\n                [!provide]                        PROVIDE (etext, .)    \n.rodata\n *(.rodata .rodata.* .gnu.linkonce.r.*)\n\n.rodata1\n *(.rodata1)\n\n.eh_frame_hdr\n *(.eh_frame_hdr)\n *(.eh_frame_entry .eh_frame_entry.*)\n\n.eh_frame       0x0000000008048080       0x38\n *(.eh_frame)\n .eh_frame      0x0000000008048080       0x38 test.o\n *(.eh_frame.*)\n\n<<= snip =>>\n</code></pre>\nIf this is insufficient for your purposes and would like to manipulate the linker with a custom script, section \"3: Linker Scripts\" at sourceware.org may be helpful. Some documentation of the Link Editor Command Language can also be found on page 524 in the AT&T UNIXâ„¢ PC Model 7300 Unix System V Programmers Guide.\nMore information can also be found in the ld.texinfo file which is part of the source for <pre><code>ld</code></pre>. There is also a document called The GNU Linker, which discusses linker scripts in 40 pages or so.\n",
            "votes": "2",
            "user": "julian",
            "time": "Feb 6, 2017 at 18:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}