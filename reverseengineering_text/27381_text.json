{
    "title": "I'm confused about parameter in Printf function",
    "link": "https://reverseengineering.stackexchange.com/questions/27381/im-confused-about-parameter-in-printf-function",
    "content": "I'm trying to understand call conventions and such. I created a function with the source code\n<pre><code>#include <stdio.h>\nint main() {\n  int x = 9;\n  printf(\"%d\n\", x);\n}\n</code></pre>\n\nThe above screenshot is its disassembly.\nI have two questions:\n\nWhere does the <pre><code>0x405044</code></pre> come from?\nWhy does it store the contents of <pre><code>0x405044</code></pre> in the memory address of esp?\n",
    "votes": "1",
    "answers": 2,
    "views": "362",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "Constructive",
    "time": "Apr 2, 2021 at 14:52",
    "comments": [],
    "answers_data": [
        {
            "content": "0x405044 is the address of your format string. You can print the string  with <pre><code>x/s 0x405044</code></pre> It stores this address at esp cause its your first argument.\n",
            "votes": "1",
            "user": "defragger",
            "time": "Apr 2, 2021 at 14:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Apart from what defragger said, there are few things to note (as you are learning about calling conventions). This is an example of 32 bit x86 calling convention (C).\n\nBefore a subroutine call, caller saves caller-saved registers on stack (registers eax, ecx, edx - \"if required\")\nThen it pushes subroutine parameters on stack in inverted order (in your case, 9 and address of \"%d\n\")\nThen calls the subroutine (return address is pushed on top of stack)\nAfter return (return value goes in eax), caller removes the parameters, restores the stack and also restores caller-saved registers.\n\nNow the I believe you got confused because of \"42a\" and \"42e\" instructions (mov). you must be familiar with \"push\" instruction - which is nearly equivalent to (sub esp, 4; mov [esp], reg32 - (this also affect flags unlike push))\n",
            "votes": "0",
            "user": "R4444",
            "time": "Apr 2, 2021 at 16:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}