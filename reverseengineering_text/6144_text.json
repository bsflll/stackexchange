{
    "title": "Tracing int 0x80 instructions using PIN",
    "link": "https://reverseengineering.stackexchange.com/questions/6144/tracing-int-0x80-instructions-using-pin",
    "content": "I wrote this small pintool that tries to record the number of <pre><code>int 0x80</code></pre> instructions executed. I did this roughly as follows :-\n<pre><code>xed_iclass_enum_t iclass = static_cast<xed_iclass_enum_t>(INS_Opcode(ins));</code></pre>\nI then compare iclass against XED_ICLASS_INT and print out the EIP if found. I'm doing this on a statically compiled test binary that :-\n<pre><code>1. Prints hello world\n2. Makes a call to mprotect\n</code></pre>\nHowever, the number of <pre><code>int 0x80</code></pre> instructions encountered is just one. Is there something obvious I'm doing wrong? I tried using XED_ICLASS_SYSCALL too but that did not help.\n",
    "votes": "2",
    "answers": 1,
    "views": "727",
    "tags": [
        "instrumentation"
    ],
    "user": null,
    "time": "Aug 31, 2014 at 15:36",
    "comments": [],
    "answers_data": [
        {
            "content": "PIN_AddSyscallEntryFunction\nWhy not just use <pre><code>PIN_AddSyscallEntryFunction</code></pre>?  This is an ABI-agnostic way of doing things, that lets you use <pre><code>PIN_GetSyscallArgument</code></pre> and related functions rather than manually inspecting the stack and register context.\nINS_IsInterrupt\nYou could also use <pre><code>INS_IsInterrupt</code></pre> at instrumentation time to gather the information at analysis time.  Note that this won't catch any systemm calls made via the <pre><code>syscall</code></pre> or <pre><code>sysenter</code></pre> instructions.\nExamples\nAs a simple example, if you look at the file <pre><code>inscount0.cpp</code></pre> that comes with Pin, if you add the following check, you'll only instrument syscalls.\nINS_IsInterrupt\nIn <pre><code>inscount0.cpp</code></pre>, change the routines as shown below.  The module will now count the number of <pre><code>int</code></pre> instructions executed, rather than the total number of instructions executed.\n<pre><code>VOID Instruction(INS ins, VOID *v)\n{\n    if(INS_IsSyscall(ins))\n    {\n        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);\n    }\n}\n</code></pre>\nNow all syscall instructions will be counted.  You can use the standard <pre><code>INS_InsertCall</code></pre> arguments to inspect the stack or register context.\nPIN_AddSyscallEntryFunction\nAdd this function before <pre><code>main</code></pre>\n<pre><code>void OnSyscall(THREADID threadIndex, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v)\n{\n    printf(\"Made syscall #%i\n\", PIN_GetSyscallNumber(ctxt, std));\n}\n</code></pre>\nand add this line to <pre><code>main</code></pre> before <pre><code>PIN_StartProgram</code></pre>.\n<pre><code>PIN_AddSyscallEntryFunction(OnSyscall, 0);\n</code></pre>\n",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Aug 31, 2014 at 17:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}