{
    "title": "Debugging Win32.Upatre - why does Ollydbg fail to analyze this?",
    "link": "https://reverseengineering.stackexchange.com/questions/9182/debugging-win32-upatre-why-does-ollydbg-fail-to-analyze-this",
    "content": "So I've been looking at this thread - Where can I, as an individual, get malware samples to analyze?\nAnd grabbed myself a binary sample of Win32.Upatre from Halvar Flake's blog.\nI started analyzing the file in my VM (Win XP SP 3) and loaded up the malware in Olly.\nWhat I noticed is that the code looks encrypted - I searched for all the calls in the code and got this:\n\nWhich doesn't seem quite normal.\nSo I went ahead and started stepping from the EP hopefully landing on some decryption procedure -\n\nI'll briefly explain what I concluded from debugging this code:\n1 - Gets the arguments passed to this executable - I'm pretty sure any code before this is irrelevant, but I might be wrong.\n2 - Calls GetStartupInfo - not quite sure why\n3 - Call 00401C80 passing the EP as a parameter\nSo I went ahead jumping to <pre><code>00401C80</code></pre> to check what this is all about and found this code which kinda looks like junk code to me -\n\nI suspect because there are some instructions that just don't seem logic to me like:\n<pre><code>MOV EAX, 64\nCMP EAX,3E8\n</code></pre>\nBut I might be wrong.\nThe problem is that after at the end of the function a value is copied into <pre><code>ECX</code></pre> and then <pre><code>CALL ECX</code></pre> is called which eventually ends in memory access violation:\n\nNo matter what I do or how I play with the flags inside this function I get an access violation or the code exits.\nSOOOOOOOOO, my first thought was that I'm dealing with some kinda anti-debugging technique, so I tried to run the malware inside the VM and intercept some data from it -\n\nAnd it seems like it's running alright and even created a UDP socket, no access violation or something like that.\nI tried looking online for reports about this virus but I couldn't found any resources about how to bypass this obstacle.\nAnyone got an idea how I should approach this? why is Olly failing? How does this code knows that it's being debugged? It doesn't seem like it uses some kind of API for that (like IsDebuggerPresent).\nThanks for everyone in advance.\n",
    "votes": "1",
    "answers": 2,
    "views": "774",
    "tags": [
        "ollydbg",
        "malware",
        "obfuscation",
        "anti-debugging",
        "deobfuscation"
    ],
    "user": "FigureItOut",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "user2823000",
            "text": "Did you look at the Marion Marschalek's report on the same blog? It's the winning entry, and IIRC she's doing a fine job of explaining it all\n",
            "time": null
        },
        {
            "user": "FigureItOut",
            "text": "@Dillinur, yes I did :) and she did a great job indeed, but she doesn't go into details of how she unpacked it.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "About the \"??3@YAXPAX\" calls, it is called Name Mangling, take a look at this thread for more explanation.\n\"YAXPAX\" calls are actually the <pre><code>delete</code></pre> C++ operator.\nAbout the <pre><code>__set_app_type</code></pre>, <pre><code>__getmainargs</code></pre>, <pre><code>GetStartupInfo</code></pre> etc, those calls are generated by the compiler and usally called before the <pre><code>main</code></pre> function. They aren't part of the source code of the program you are willing to analyze, so you shouldn't have to analyze them.\nYour main seems to be located at <pre><code>00401C80</code></pre>, as it is usually right before a call to <pre><code>exit</code></pre>. This is where you start analyzing things seriously.\nConcerning the anti-debug protection, there are few instructions that let me think there is something that catches the exception in the program :\n\n<pre><code>cmp [0], 0</code></pre> is supposed to crash, so maybe there is some custom exception handlers installed somewhere. I would say to check for TLS callback functions, but I may be wrong. You should be able to pass the exception by pressing Shift+F7, break on NtContinue, read the CONTEXT structure and continue the execution of the program.\nHere is a listing of the most frequent anti debug tricks you may find - including the Thread Local Storage trick.\n",
            "votes": "3",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>import base64\nimport zipfile\nimport os\nimport hashlib\ninfile = open(\"c:\\\\halvar\\\\halvfem.bin\",\"rb\")\noutfile = open(\"c:\\\\halvar\\\\halvfem.zip\",\"wb\")\nbase64.decode(infile,outfile)\ninfile.close()\noutfile.close()\nif (zipfile.is_zipfile(\"c:\\\\halvar\\\\halvfem.zip\")):\n    myzip = zipfile.ZipFile(\"c:\\\\halvar\\\\halvfem.zip\",'r')\n    myzip.extractall('c:\\\\halvar\\\\',myzip.namelist(),'infected')\n    os.rename(myzip.namelist()[0],\"halvar_challenge.exe\")\n    print hashlib.md5(open('c:\\\\halvar\\\\halvar_challenge.exe','rb').read()).hexdigest()\n</code></pre>\nis this the file you are talking about\n<pre><code>C:\\halvar>python decode.py\n172aed81c4fde1cf23f1615acedfad65\n\nC:\\halvar>f:\\odbg110\\OLLYDBG.EXE halvar_challenge.exe\n</code></pre>\nthe exe is setting up a Structured Exception Handler prior to call ecx \nyou should follow the Exception handler may be several times \nhint check this function in msvcrt\n<pre><code>77C2275C MSVCRT._JumpToContinuation    $  8BFF          MOV     EDI, EDI\n</code></pre>\nif you followed them you should be able to see  0x89 imports being resolved with LoadLibrary and GetProcAddress \ni followed till CreateEvent before posting this\n<pre><code>0013FD90   0040F520  /CALL to CreateEventA from halvar_c.0040F51D\n0013FD94   00000000  |pSecurity = NULL\n0013FD98   00000001  |ManualReset = TRUE\n0013FD9C   00000000  |InitiallySignaled = FALSE\n0013FDA0   0013FDCC  \\EventName = \"{AB8D393B-9177-440d-B3F8-1C1FE0CF9692}\"\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 20, 2015 at 10:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}