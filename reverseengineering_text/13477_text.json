{
    "title": "How to multiply an SSE float with a hardcoded value using MULSS?",
    "link": "https://reverseengineering.stackexchange.com/questions/13477/how-to-multiply-an-sse-float-with-a-hardcoded-value-using-mulss",
    "content": "I have the following line of code in a game:\n<pre><code>movss xmm0,[eax+000000F0]</code></pre>\nIt basically loads the float speed of the current speed category into the XMM0 register. I already made a jump to an empty code section to get some more space, because I now want to multiply this speed by a hardcoded value of 2 after it was loaded. Sadly, easy-thinking like this doesn't work:\n<pre><code>movss xmm0,[eax+000000F0]\nmulss xmm0,2\n</code></pre>\nI can't simply multiply an XMM register with an integer or float immediate. I read that I can only multiply with another XMM register. But then again I can't push and pop an existing XMM register to the stack to abuse it for that operation temporarily.\nHow would I create such a simple multiplication operation?\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "float"
    ],
    "user": "Ray",
    "time": "Jul 22, 2018 at 16:50",
    "comments": [
        {
            "user": "phuclv",
            "text": "You can load the float constant to eax then <pre><code>movd xmm0, eax</code></pre>. Otherwise you can use the generating constant technique in Agner Fog's optimizing guide section 13.8 Generating constants <pre><code>pcmpeqw xmm0, xmm0; pslld xmm0, 31; psrld xmm0, 1</code></pre> What are the best instruction sequences to generate vector constants on the fly?\n",
            "time": null
        },
        {
            "user": "Řrřola",
            "text": "You can multiply by 2 with <pre><code>addss xmm0,xmm0</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Although you indeed cannot use <pre><code>mulss</code></pre> with an immediate value like you've pointed out, you are allowed to pass an 32bit offset as <pre><code>mulss</code></pre>'s second operand:\n\nMultiplies the low single-precision floating-point value from the source operand (second operand) by the low single-precision floating-point value in the destination operand (first operand), and stores the single-precision floating-point result in the destination operand. The source operand can be an XMM register or a 32-bit memory location. The destination operand is an XMM register. The three high-order double-words of the destination operand remain unchanged. \n\nYou could then just point to any offset you control, if code is not relocated. If it is, you could simply use 'lea' if in 64bit mode or do the <pre><code>call $+5 / pop</code></pre> trick in x86.\nI'll assume x86 because it makes it a bit more complicated. The patch should look something like the following (this wasn't tested):\n<pre><code>    push edx\n    call next\nnext:\n    pop edx\n    movss xmm0,[eax+000000F0]\n    mulss xmm0,[edx+float-next]\n    pop edx\n    <return to previous location>\n\nfloat:\n    <float as 32bit data>\n</code></pre>\nThere might be better solutions, but nothing pops at me.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Sep 9, 2016 at 21:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ray",
                    "text": "<span class=\"comment-copy\">Ah, I must've skipped the detail I can just multiply it with memory! This is awesome. Thanks! Game running fine now ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}