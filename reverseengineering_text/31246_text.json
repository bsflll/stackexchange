{
    "title": "Overclock CPU in BIOS - ARM/C/C++/Py",
    "link": "https://reverseengineering.stackexchange.com/questions/31246/overclock-cpu-in-bios-arm-c-c-py",
    "content": "new guy here. Working on Bi0S script, adding as many features as possible. It is possible to change fan speeds, advanced security, manipulate voltages, etc. How do you overclock the microprocessor using Assembly?. No not the Avengers Assembly or the UN. .. (the moderators said i have to make a clear distinction because my last post wasn't \"specific enough\" ). Preferably in Assembly (Language) or C/C++\n",
    "votes": "2",
    "answers": 1,
    "views": "105",
    "tags": [
        "disassembly",
        "assembly",
        "hash-functions",
        "math"
    ],
    "user": "Calculus Lui YaleTessy",
    "time": "Dec 8, 2022 at 2:13",
    "comments": [],
    "answers_data": [
        {
            "content": "How to change the clock-speed of a microprocessor using inline assembly language\nGeneral procedures for utilizing assembly language to overclock a microprocessor are :\n\nAscertain the CPU and motherboard's maximum safe clock speed. It is crucial to adhere to this limit in order to protect the processor and motherboard. This will typically be stated in the documentation for your hardware.\n\nCreate code to read the relevant hardware registers' current clock speed. The correct registers to read from must be determined by consulting the processor's documentation.\n\nBased on the maximum safe clock speed and the desired level of overclocking, choose the new clock speed you wish to set.\n\nCreate code to update the hardware registers with the new clock speed. Again, to find out which registers to write to, refer to the manual for your CPU.\n\nTest the stability of the system using a program like LinX or Prime95 to run at the new clock speed. You can keep using the new clock speed if the system is stable. If the system is unstable, you might need to modify the BIOS or hardware settings, change the clock speed, or other factors.\n\n\nPlease keep in mind that the code i mentioned is just an example, and the specific registers and values that must be changed will depend on the microprocessor and motherboard you're using. To determine the correct values, consult the documentation for your hardware. when overclocking a microprocessor, as increasing the clock speed can also increase the power consumption and heat generation of the processor. You may need to make additional changes to the BIOS settings or hardware registers, such as increasing the voltage to the processor or adjusting the cooling settings, in order to ensure that the processor remains stable at the higher clock speed\n<pre><code>#include <stdio.h>\n#include <stdint.h>\n\n// ハードウェアレジスタを保存する構造体\nstruct HardwareRegisters {\n    uint32_t clockControl;  // クロックコントロールレジスタ\n    uint32_t voltageControl;  // 電圧コントロールレジスタ\n    uint32_t temperatureControl;  // 温度コントロールレジスタ\n};\n\n// ハードウェアレジスタを読み込む関数\nHardwareRegisters readHardwareRegisters() {\n    HardwareRegisters regs;\n\n// インラインアセンブリを使ってレジスタを読み込む\n__asm__ __volatile__ (\n    \"movl $0x0, %%eax\n\\t\"  // EAXレジスタに0を代入\n    \"rdmsr\n\\t\"  // MSRレジスタを読み込む\n    \"movl %%edx, %0\n\\t\"  // 読み込んだEDXレジスタをclockControlに保存\n    \"movl %%eax, %1\n\\t\"  // 読み込んだEAXレジスタをvoltageControlに保存\n    \"movl $0x1, %%eax\n\\t\"  // EAXレジスタに1を代入\n    \"rdmsr\n\\t\"  // MSRレジスタを読み込む\n    \"movl %%edx, %2\n\\t\"  // 読み込んだEDXレジスタをtemperatureControlに保存\n    : \"=m\"(regs.clockControl), \"=m\"(regs.voltageControl), \"=m\"(regs.temperatureControl)  // 出力\n    :  // 入力\n    : \"%eax\", \"%edx\"  // クリアするレジスタ\n);\n\nreturn regs;\n}\n\n// ハードウェアレジスタに書き込む関数\nvoid writeHardwareRegisters(HardwareRegisters regs) {\n    // インラインアセンブリを使ってレジスタに書き込む\n    __asm__ __volatile__ (\n        \"movl $0x0, %%eax\n\\t\"  // EAXレジスタに0を代入\n        \"movl %0, %%edx\n\\t\"  // clockControlをEDXレジスタに保存\n        \"movl %1, %%eax\n\\t\"  // voltageControlをEAXレジスタに保存\n                \"wrmsr\n\\t\"  // MSRレジスタに書き込む\n        \"movl $0x1, %%eax\n\\t\"  // EAXレジスタに1を代入\n        \"movl %2, %%edx\n\\t\"  // temperatureControlをEDXレジスタに保存\n        \"wrmsr\n\\t\"  // MSRレジスタに書き込む\n        :  // 出力\n        : \"m\"(regs.clockControl), \"m\"(regs.voltageControl), \"m\"(regs.temperatureControl)  // 入力\n        : \"%eax\", \"%edx\"  // クリアするレジスタ\n    );\n}\n\nint main() {\n    // 現在のハードウェアレジスタを読み込む\n    HardwareRegisters currentRegs = readHardwareRegisters();\n\n// 最大安全クロックスピードとオーバークロックのレベルに基づいて新しいクロックスピードを決定する\nuint32_t newClockSpeed = currentRegs.clockControl + 1000;  // クロックスピードを1000 MHz増やす\n\n// ハードウェアレジスタを新しいクロックスピードに更新する\ncurrentRegs.clockControl = newClockSpeed;\nwriteHardwareRegisters(currentRegs);\n\n// 新しいクロックスピードでシステムの安定性をテストする\n// LinXやPrime95などのプログラムを使って新しいクロックスピードで実行する\n\nreturn 0;\n}\n</code></pre>\n",
            "votes": "2",
            "user": "r0xdeadbeef",
            "time": "Dec 30, 2022 at 0:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}