{
    "title": "Reverse engineering Lingo scripts .DCR/.CCT files",
    "link": "https://reverseengineering.stackexchange.com/questions/14089/reverse-engineering-lingo-scripts-dcr-cct-files",
    "content": "I was wondering if I could get some tips on reverse engineering .dcr/.cct files to get Lingo scripts. I know with recover-cct/recover-dir you can get all the assets etc. but you can't get Lingo scripts. I was told the only way to get them is by reverse engineering.\nFor people who don't know:\nLingo is a verbose object-oriented (OO) scripting language developed by John H. Thompson for use in Adobe Director (formerly Macromedia Director). Lingo is used to develop desktop application software, interactive kiosks, CD-ROMs and Adobe Shockwave content.\nYou can see Lingo as the AS3 but for shockwave files.\nI heard something about gzip but I'm not 100% sure.\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "decompilation",
        "script"
    ],
    "user": "Joshua Bakker",
    "time": "Dec 2, 2016 at 16:03",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "maybe you should describe what is Lingo because I suspect most people here never heard  of it.\n",
            "time": null
        },
        {
            "user": "Joshua Bakker",
            "text": "@IgorSkochinsky It's hard to describe but I added a part from Wikipedia.\n",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "It would be cool to have access to a few simple script and compiled files uploaded somewhere.\n",
            "time": null
        },
        {
            "user": "Joshua Bakker",
            "text": "@joxeankoret deansdirectortutorials.com/3D/3Dlingo.htm it's hard to find something like you're asking for.\n",
            "time": null
        },
        {
            "user": "Joshua Bakker",
            "text": "@blabb Sorry I don't quite get what you mean.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I found  a project which has some rudimentary documentation on the file format and even some Python code to parse it:\nhttps://github.com/eriksoe/Schockabsorber\nIt hasn't been updated since 2013 but still may be useful.\nThere is also some (rather high level) information over at the Archive Team:\nhttp://fileformats.archiveteam.org/wiki/Shockwave_(Director)\nThere is no single solution to reversing undocumented file formats. There are basically two approaches you can try:\n1. Observation of the producer.\nIf you happen to have access to a producer of the files (such as a compiler), then you can compile some simple code, look at the output, make some changes, compile it again and compare with the previous output. If you're lucky the changes will be obvious and give at least some clues about the format structure.\n2. Observation of the consumer.\nIf you have a consumer of the file format (such as a player/viewer app), you can try to observe how it parses the file and what steps it performs. You can use dynamic RE, such as monitoring file accesses and memory accesses to the read data, or fully static RE, i.e. just disassemble the parsing code and deduce what it expects and how it deals with the parsed data. Dynamic approach may be easier in practice but it only covers the actually parsed data, not all the possible variations supported by the parser (so having a broad corpus of input files is essential). Static RE is in general more difficult but is the only sure way to find out the real range of supported features.\nBTW, both static and dynamic RE may be applied to the producer as well, although in that case you'd have to RE the binary format producing part (output file writer), plus some of the code which produces data for the writer (e.g. the compiler).\nP.S. Found an old tool called dirOpener (saved thanks to the Web Archive!) and the site says the following:\n\nThe director engine(that translates machine code into actions on your\n  screen) however does not understand any lingo. Every time you save\n  your movie, close your script window or press the recompile button,\n  your lingo code is compiled into machine code that can be executed by\n  the director engine.\nAfter your lingo code has been compiled director no longer needs it to\n  execute your file, it just needs the machine code it generated from\n  your lingo. For you to be able to make changes to your code however,\n  the lingo is left inside the file. That is, as long as it's\n  unprotected. The moment you protect your director files the lingo code\n  is stripped from the file. Also a certain flag is set so that the\n  director authoring environment can tell it's dealing with a protected\n  file and the extention is changed to .dxr.\n\nI'm not sure what they mean by \"machine code\" here. I suspect it may be some kind of bytecode, similar to the AS3 bytecode in Flash, so you may be able to come up with some kind of decompilation process, but don't get your hopes too up.\n",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Dec 7, 2016 at 19:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Joshua Bakker",
                    "text": "<span class=\"comment-copy\">Machine code or machine language is a set of instructions executed directly by a computer's central processing unit (CPU). Each instruction performs a very specific task, such as a load, a jump, or an ALU operation on a unit of data in a CPU register or memory.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@JoshuaBakker: I know what machine code is, I just doubt that Lingo is actually compiled into machine code as opposed to bytecode.</span>",
                    "time": null
                },
                {
                    "user": "Joshua Bakker",
                    "text": "<span class=\"comment-copy\">â™¦ Oh my apologize. Yeah  I think it's some kind of bytecode but I'm unsure.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There is now a Shockwave Decompiler called ProjectorRays which can decompile DCR files and provide all lingo scripts as if you were looking at the source code.\n",
            "votes": "0",
            "user": "user2936448",
            "time": "Jun 13, 2023 at 11:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}