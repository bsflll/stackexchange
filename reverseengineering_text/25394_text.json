{
    "title": "IDA exported header full of errors",
    "link": "https://reverseengineering.stackexchange.com/questions/25394/ida-exported-header-full-of-errors",
    "content": "Im a noob when it comes to using reverse engineering tooling.\nI am doing a reversing challenge (pwn adventure 3 CTF) and I am exporting the various types from IDA. The thing is, the header files are always full of errors when I add them to the project in visual studio. Using these headers would be much convenient since I have access to them, its just frustrating that i cannot get the syntax work. I have tried exporting the whole DLL I am debugging as a header (it includes a pdb so all these are supposed to be included). I have even tried including all of the std headers (I know its a bad practice, just wanted to try whether that fixes it.)\nIs there something I am missing that I am supposed to do in order to have the exported headers be syntactically correct so I can use them in my development project?\nMaybe the pros can guide me to the correct direction with this. Cheers in advance.\nAn example for the header exported by IDA for the ClientWorld looks the following,:\n<pre><code>/*\n   This file has been generated by IDA.\n   It contains local type definitions from\n   the type library 'GameLogic'\n*/\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer;\nstruct ILocalPlayer;\nstruct std::_Tree_node<std::pair<unsigned int const ,ActorRef<IActor> >,void *>;\nstruct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,void *>;\nstruct std::_Tree_node<ActorRef<IActor>,void *>;\nstruct std::_Tree_node<ActorRef<IPlayer>,void *>;\nstruct WorldVtbl;\n\n/* 155 */\nstruct __cppobj std::_Container_base0\n{\n};\n\n/* 545 */\nstruct __cppobj std::_Tree_val<std::_Tree_simple_types<ActorRef<IPlayer> > > : std::_Container_base0\n{\n  std::_Tree_node<ActorRef<IPlayer>,void *> *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 549 */\nstruct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<ActorRef<IPlayer>,std::allocator<ActorRef<IPlayer> > > > : std::_Tree_val<std::_Tree_simple_types<ActorRef<IPlayer> > >\n{\n};\n\n/* 550 */\nstruct __cppobj std::_Tree_buy<ActorRef<IPlayer>,std::allocator<ActorRef<IPlayer> > > : std::_Tree_alloc<0,std::_Tree_base_types<ActorRef<IPlayer>,std::allocator<ActorRef<IPlayer> > > >\n{\n};\n\n/* 551 */\nstruct __cppobj std::_Tree_comp<0,std::_Tset_traits<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> >,0> > : std::_Tree_buy<ActorRef<IPlayer>,std::allocator<ActorRef<IPlayer> > >\n{\n};\n\n/* 565 */\nstruct __cppobj std::_Tree<std::_Tset_traits<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> >,0> > : std::_Tree_comp<0,std::_Tset_traits<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> >,0> >\n{\n};\n\n/* 687 */\nstruct __cppobj std::set<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> > > : std::_Tree<std::_Tset_traits<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> >,0> >\n{\n};\n\n/* 322 */\nstruct __cppobj std::_Tree_val<std::_Tree_simple_types<ActorRef<IActor> > > : std::_Container_base0\n{\n  std::_Tree_node<ActorRef<IActor>,void *> *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 323 */\nstruct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<ActorRef<IActor>,std::allocator<ActorRef<IActor> > > > : std::_Tree_val<std::_Tree_simple_types<ActorRef<IActor> > >\n{\n};\n\n/* 328 */\nstruct __cppobj std::_Tree_buy<ActorRef<IActor>,std::allocator<ActorRef<IActor> > > : std::_Tree_alloc<0,std::_Tree_base_types<ActorRef<IActor>,std::allocator<ActorRef<IActor> > > >\n{\n};\n\n/* 542 */\nstruct __cppobj std::_Tree_comp<0,std::_Tset_traits<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> >,0> > : std::_Tree_buy<ActorRef<IActor>,std::allocator<ActorRef<IActor> > >\n{\n};\n\n/* 554 */\nstruct __cppobj std::_Tree<std::_Tset_traits<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> >,0> > : std::_Tree_comp<0,std::_Tset_traits<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> >,0> >\n{\n};\n\n/* 664 */\nstruct __cppobj std::set<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> > > : std::_Tree<std::_Tset_traits<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> >,0> >\n{\n};\n\n/* 304 */\nstruct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,ActorRef<IActor> > > > : std::_Container_base0\n{\n  std::_Tree_node<std::pair<unsigned int const ,ActorRef<IActor> >,void *> *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 305 */\nstruct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned int const ,ActorRef<IActor> >,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,ActorRef<IActor> > > >\n{\n};\n\n/* 330 */\nstruct __cppobj std::_Tree_buy<std::pair<unsigned int const ,ActorRef<IActor> >,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<unsigned int const ,ActorRef<IActor> >,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > > >\n{\n};\n\n/* 331 */\nstruct __cppobj std::_Tree_comp<0,std::_Tmap_traits<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > >,0> > : std::_Tree_buy<std::pair<unsigned int const ,ActorRef<IActor> >,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > >\n{\n};\n\n/* 334 */\nstruct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > >,0> > : std::_Tree_comp<0,std::_Tmap_traits<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > >,0> >\n{\n};\n\n/* 597 */\nstruct __cppobj std::map<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > > : std::_Tree<std::_Tmap_traits<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > >,0> >\n{\n};\n\n/* 285 */\nstruct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > : std::_Container_base0\n{\n  std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,void *> *_Myhead;\n  unsigned int _Mysize;\n};\n\n/* 286 */\nstruct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > >\n{\n};\n\n/* 393 */\nstruct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > >\n{\n};\n\n/* 490 */\nstruct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > >\n{\n};\n\n/* 513 */\nstruct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> >,0> >\n{\n};\n\n/* 564 */\nstruct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> >,0> >\n{\n};\n\n/* 706 */\nstruct World\n{\n  WorldVtbl *vfptr;\n  std::set<ActorRef<IPlayer>,std::less<ActorRef<IPlayer> >,std::allocator<ActorRef<IPlayer> > > m_players;\n  std::set<ActorRef<IActor>,std::less<ActorRef<IActor> >,std::allocator<ActorRef<IActor> > > m_actors;\n  std::map<unsigned int,ActorRef<IActor>,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ActorRef<IActor> > > > m_actorsById;\n  ILocalPlayer *m_localPlayer;\n  unsigned int m_nextId;\n  std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,AIZone *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,AIZone *> > > m_aiZones;\n};\n\n/* 259 */\nstruct ActorRef<IPlayer>\n{\n  IPlayer *m_object;\n};\n\n/* 1618 */\nstruct __cppobj ClientWorld : World\n{\n  ActorRef<IPlayer> m_activePlayer;\n  float m_timeUntilNextNetTick;\n};\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "448",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "geo10",
    "time": "Jun 25, 2020 at 18:49",
    "comments": [
        {
            "user": "Jongware",
            "text": "What errors are in that header?\n",
            "time": null
        },
        {
            "user": "geo10",
            "text": "First error is: specializing class \"std::_Treenode<std::pair<const unsigned int, <error-type>>, void*>\" requires 'template<>' syntax\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First, you need to include the std libs you need\n<pre><code>#include <xtree>\n#include <set>\n#include <map>\n#include <functional>\n</code></pre>\nSecond you need to remove \"struct\" before all the variable declarations that aren't structs\nand third you should delete everything from this header you don't need, it's 90% garbage\nremove all instances of \"__cppobj\"\nYou also need to define ActorRef, World & WorldVtbl.\nI was able to remove 99% of errors by doing these things:\n<pre><code>#include <xtree>\n#include <set>\n#include <map>\n#include <functional>\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer\n{\n\n};\n\nstruct ILocalPlayer\n{\n\n};\n\nstruct IActor\n{\n\n};\n\ntemplate <class T>\nclass ActorRef\n{\npublic:\n    IPlayer* m_object;\n};\n\nstruct AIZone\n{\n    \n};\n\nstruct WorldVtbl\n{\n\n};\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n\nstruct IPlayer;\nstruct ILocalPlayer;\n\nstruct std::_Tree_val<std::_Tree_simple_types<ActorRef<IPlayer> > > : std::_Container_base0\n{\n    std::_Tree_node<ActorRef<IPlayer>, void*>* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val<std::_Tree_simple_types<ActorRef<IActor> > > : std::_Container_base0\n{\n    std::_Tree_node<ActorRef<IActor>, void*>* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const, ActorRef<IActor> > > > : std::_Container_base0\n{\n    std::_Tree_node<std::pair<unsigned int const, ActorRef<IActor> >, void*>* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, AIZone*> > > : std::_Container_base0\n{\n    std::_Tree_node<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, AIZone*>, void*>* _Myhead;\n    unsigned int _Mysize;\n};\n\nstruct World\n{\n    WorldVtbl* vfptr;\n    std::set<ActorRef<IPlayer>, std::less<ActorRef<IPlayer> >, std::allocator<ActorRef<IPlayer> > > m_players;\n    std::set<ActorRef<IActor>, std::less<ActorRef<IActor> >, std::allocator<ActorRef<IActor> > > m_actors;\n    std::map<unsigned int, ActorRef<IActor>, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, ActorRef<IActor> > > > m_actorsById;\n    ILocalPlayer* m_localPlayer;\n    unsigned int m_nextId;\n    std::map<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, AIZone*, std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, AIZone*> > > m_aiZones;\n};\n\nstruct ClientWorld : World\n{\n    ActorRef<IPlayer> m_activePlayer;\n    float m_timeUntilNextNetTick;\n};\n</code></pre>\nMy opinion is using a tool like ReClass.NET is much easier for reversing structures and exporting header files, you should give it a try and see if it fits your needs.\n",
            "votes": "1",
            "user": "GuidedHacking",
            "time": "Jul 9, 2020 at 2:14",
            "is_accepted": true,
            "comments": []
        }
    ]
}