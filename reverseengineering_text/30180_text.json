{
    "title": "How to have arrays in IDA's IDC",
    "link": "https://reverseengineering.stackexchange.com/questions/30180/how-to-have-arrays-in-idas-idc",
    "content": "So to cut straight to the chase - I'm lazy, IDA is mysterious, I need to use IDA arrays in\nmy IDC code for convenience. Because IDC is like C(++) in its syntax I figured I could do:\n<pre><code>auto lala[4] = {0,1,2,3};\n</code></pre>\nBut that doesn't work. Neither do round or square brackets.\nTrying to do lala[0] produces this output:\n<pre><code>Cannot use [] operator on scalars\n</code></pre>\nWhat gives?\n",
    "votes": "1",
    "answers": 1,
    "views": "630",
    "tags": [
        "ida",
        "idc"
    ],
    "user": "swaggg",
    "time": "Mar 25, 2022 at 12:19",
    "comments": [],
    "answers_data": [
        {
            "content": "IDC is closer to C than C++ but both limited in some ways and more flexible in others than C. It supports several variable types but arrays is not one of them:\n\nA variable can contain:\n\nLONG: a 32-bit signed long integer (64-bit in 64-bit version of IDA)\nINT64: a 64-bit signed long integer\nSTR: a character string\nFLOAT: a floating point number (extra precision, up to 25 decimal digits)\nOBJECT: an object with attributes and methods\n(a concept very close to C++ class) more\nREF: a reference to another variable\nFUNC: a function reference\n\n\nHowever, you can use slice syntax with objects to simulate arrays:\n<pre><code>auto x = object();\nx[0] = value1;\nx[1] = \"value2\";\n</code></pre>\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 25, 2022 at 15:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">Thanks! I actually needed an easy way to initialise these arrays. Given a list of bytes, I wanted to be able to just put them inside braces et voila but I guess that isn't possible. I ended up using regex instead.</span>",
                    "time": null
                },
                {
                    "user": "swaggg",
                    "text": "<span class=\"comment-copy\">I looked up your profile. It's really cool you work for Hex Rays. Maybe you guys could implement arrays at some point too ;).</span>",
                    "time": null
                }
            ]
        }
    ]
}