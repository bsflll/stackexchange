{
    "title": "How to return a list of vtable methods?",
    "link": "https://reverseengineering.stackexchange.com/questions/21376/how-to-return-a-list-of-vtable-methods",
    "content": "I'm relatively new to scripting environments in disassemblers. What I am looking for is a way to dump all of the vtable methods from a C++ disassembly in such a way that I can access them later for further programmatic analysis. My intention is to pass them to another framework in order to do symbolic execution. \nBased on my naive understanding of the available options I am going to assume the easiest way to do this is IDA python. \nIn IDA Python how can I gather the addresses and bodies of all methods contained in vtables?\nExtra Credit: The same for Binary Ninja or any other disassembler platform.\n",
    "votes": "2",
    "answers": 0,
    "views": "307",
    "tags": [
        "ida",
        "c++",
        "vtables"
    ],
    "user": "MrSynAckSter",
    "time": "May 27, 2019 at 18:02",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "How that vtable is exported from the module? Is that a COM interface?\n",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "I'm asking about virtual method tables in C++, modules and Windows specific COM objects aren't necessarily involved.\n",
            "time": null
        }
    ],
    "answers_data": []
}