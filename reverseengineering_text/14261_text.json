{
    "title": "Reverse a BFLT file",
    "link": "https://reverseengineering.stackexchange.com/questions/14261/reverse-a-bflt-file",
    "content": "A couple of days ago I bought an air conditioner.\nThe system has a wireless module. By analyzing the ports, I could see that port 22 is open.\nI have obtained the file that is responsible for managing the connection with the outside and internally (the interface).\nThe file is of type BFLT executable - version 4 ram. Here is more detailed information. (extracted from radare)\n<pre><code>type    bFLT (Executable file)      class      bflt\nfile    backupServer                arch       arm\nfd          6                       bits        32\nsize     0x3d804                    machine   unknown\niorw t     true                     os         Linux\nblksz      0x0                      minopsz     4\nmode       -r--                     maxopsz     4\nblock     0x100                     pcalign     4\nformat    bflt                      subsys     Linux\nhavecode  true                      endian    little\npic       false                     stripped   false\ncanary    false                     static     true\nnx        false                     linenum    false\ncrypto    false                     lsyms      false\nva        false                     relocs     false\nbintype   bflt                      binsz     251908\n</code></pre>\nThis file I have been able to virtualize with qemu-arm.\nIn the BFLT files there is a section containing all the string and using IDA Pro with the bfltldr plugin to relocate the strings. For debugging I have used the architecture arm litte endian generic\nAnalyzing the application with IDA Pro, I was able to observe that it expects from the outside some commands with a format and some parameters.\nThe parameters I have but the arguments do not as it is complicated to debug without having any kind of information about the name of each function.\nThe operating system used by the application I think is GNU/Linux or a variant.\nMy goal is to analyze the arguments and parameters that are passed via socket to try to find some vulnerability (buffer overflow, ...) and inject a shell to open a backdoor. \nThe problem I have is that I find it costly to debug the application since in IDA Pro are the memory addresses in the functions and I would like to know if there is any change memory addresses, by the names of known functions of the GNU/Linux.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "arm",
        "qemu",
        "shellcode"
    ],
    "user": "Backglass",
    "time": "Dec 27, 2016 at 22:05",
    "comments": [],
    "answers_data": [
        {
            "content": "bFLT format is used in uCLinux systems and its executables use one of two approaches to make system calls:\n\nStatically linked libc (uClibc). In this case you should see explicit syscalls (SVC instructions) in the code. Depending on the age of the system the will be using either Old ABI (with syscall number encoded as the operand of the SVC instruction) or the new ABI(EABI) with syscall number in R7. You can look up syscall numbers e.g. here.\nLibc in a shared library. I have never seen it myself but it seems uCLinux does support shared libraries loaded at fixed addresses. So you may see calls to apparently unmapped addresses where the libc is supposed to be loaded. In this case you may need to disassemble the libc binary as well to label the functions using syscalls and then match against the calls in the binary. \n\nIn either case I would suggest you installing or building an uCLinux toolchain and compiling a few helloworld binaries with it. The nice thing about it is that the bFLT is produced from an ELF as the final step so you can compare the ELF with all symbols against the bFLT which should give you some clues how to handle your target.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 28, 2016 at 0:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}