{
    "title": "Import function symbols from a reflection system into IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/32509/import-function-symbols-from-a-reflection-system-into-ida",
    "content": "I'd like to import structs and functions from a reflection system into IDA.\nThe problem I have is with functions. So I have all the type information: namespace, class name, function name, calling convention, return type, argument types and names and the function address. But it's very tricky to import this information into IDA. Because even if I generate a name like <pre><code>public static __stdcall void MyClass1::Function1(MyClass2& Parameter1)</code></pre>, I can't just name the function, I need a mangled name.\nSo that's the question: how to import all the information about functions into IDA? Assume I have all the type information and function addresses from the reflection system in a database ready to be imported.\nI already wrote two scripts, first one creates a database of addresses and mangled function names from the reflection system in the form:\n<pre><code>0x402d2f0   ?FunctionName@ClassName@@QEAAXXZ\n0x402d3f0   ?FunctionName2@ClassName@@QEAAXXZ\n0x403d2f0   ?FunctionName@ClassName2@@QEAAXXZ\n</code></pre>\nThis is a mangled name for a void member function with the specified class name that I got by compiling a simple program at Godbolt compiler explorer.\nThen a second script in IDA goes over this database and just names the functions using names from the database. But the functions miss the return types and arguments, and also I believe all the overloaded functions are not getting named, because the name already exists.\nI feel like I need to find a name mangler that would create mangled names from the type information that I provide, and then just name the functions in IDA.\nI got recommended to try to use LLVM project, but I'm not sure how hard it would be to make LLVM give me mangled names. The MicrosoftCXXNameMangler and the type information classes it uses to create mangled names look like deep classes that would be hard to properly instantiate and use.\n",
    "votes": "0",
    "answers": 0,
    "views": "72",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin"
    ],
    "user": "KulaGGin",
    "time": "Nov 20, 2023 at 17:28",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "Do you have type definitions for the classes in question, or just their names (by virtue of them appearing in the reflection metadata)?\n",
            "time": null
        },
        {
            "user": "KulaGGin",
            "text": "@RolfRolles I do have class definitions, too: names, alignment, size, each field alignment, type, size.\n",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "Do the names contain a bunch of C++ template stuff, characters like <pre><code><</code></pre>, <pre><code>,</code></pre>, ` `, etc?\n",
            "time": null
        },
        {
            "user": "KulaGGin",
            "text": "@RolfRolles Sometimes the functions are specific instances for templated classes and functions. So they have <pre><code><></code></pre> and template arguments provided. But mostly no.\n",
            "time": null
        }
    ],
    "answers_data": []
}