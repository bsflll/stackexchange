{
    "title": "Unable to understand x86 instruction(s)",
    "link": "https://reverseengineering.stackexchange.com/questions/31143/unable-to-understand-x86-instructions",
    "content": "Recently I have been given a set of assembly instructions which I must learn to understand. I know an extremely basic level of x86 assembly but I'm starting to come across more nuances that are very difficult for me to 'just google'. So I have to ask you lovely people.\nBelow are the instructions\n<pre><code>mov     ecx, [esp+10h+arg_0]\n...\n...\nmov     [esp+10h+arg_8], eax\n...\n...\nand     al, 0E0h\n</code></pre>\nAre arg_0 and arg_8 arguments supplied to the program at runtime or arguments supplied to a function within the program? Also please help me understand what 0E0h is in the last instruction. Is that a function, memory address, or hex value? Thank you.\n",
    "votes": "1",
    "answers": 1,
    "views": "149",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "static-analysis"
    ],
    "user": "guest1",
    "time": "Nov 17, 2022 at 0:06",
    "comments": [],
    "answers_data": [
        {
            "content": "the first instruction is a read\nthe second instruction is a write\nthe third instruction is a compare\narg0 , arg_8 are arguments provided  to the function and is provided by the caller like\n<pre><code>call xyz(arg0,arg1....argn);\n</code></pre>\nnormally arguments provided to a function are not modified\nunless the argument is a pass by reference\nfor understanding opcodes operation you must understand\n\nhow an opcode works\nwhat are its operands ,\nhow many operands does it take\nwhat is result of the operation\nwhich flags are affected\nwhat exceptions are raised\nwhat is the mode in which this opcode can be used\nare there any bitwise exceptions\nare there modifiers to the opcode\nCompatibility etc\nthese are all described in intel / amd manuals\nor you can use any online reference like reference for and opcode \n\nif you go through the linked reference you will understand that the operand can be an immediate (constant value , [imm8 , imm16 , imm32 )\nor register (al...,r8 or ax...,r16 or eax...,r32)\nor memory (byte,m8 or word , m16 or dword , m32)\nbased on the description infer the type of your operand 0E0h\n",
            "votes": "0",
            "user": "blabb",
            "time": "Nov 17, 2022 at 3:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "guest1",
                    "text": "<span class=\"comment-copy\">Thanks for the response. One thing that is still unclear to me: I am used to seeing hex in pair I.E. 68 69. But 0E0 is 3 characters? I suppose 0E is one pair and 00 would be the other pair?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">0e0h is a single hex constant denoting 14 decimal  h denotes it is a hex and by convention a 0 is added by many tools to all of the 0a0h,0b0h,0c0h,0d0h,0e0h,0f0h also some tools (gas iirc needs a #0e0h ) (some discussion about leading zeros for reference)[<a href=\"https://stackoverflow.com/questions/58061348/leading-zeros-in-hex-values]\" title=\"leading zeros in hex values%5d\">stackoverflow.com/questions/58061348/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "user33885",
                    "text": "<span class=\"comment-copy\"><code>and</code> is not a comparison but a bitwise... and. 0e0h is not 14 but 224.</span>",
                    "time": null
                }
            ]
        }
    ]
}