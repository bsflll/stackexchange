{
    "title": "How to analyze a child process created by malware by process hollowing mechanism using immunity debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/13809/how-to-analyze-a-child-process-created-by-malware-by-process-hollowing-mechanism",
    "content": "When I analyzed this malware sample it was invoking api's related to creating additional processes. With the process explorer I saw the debugged process is creating a new process. Please suggest any method to analyze this child process using immunity debugger?\n",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg",
        "debugging",
        "malware",
        "immunity-debugger",
        "winapi"
    ],
    "user": "wolverinegptg",
    "time": "Oct 25, 2016 at 4:38",
    "comments": [],
    "answers_data": [
        {
            "content": "using ollgdbgv2's debug child processes feature\nInstead of using Immunity Debugger (which is a forked from OllyDbg1.10), you might want to consider using OllyDbg2.0.\nOne of the new features in ollydbg 2 is the Debug Child Processes feature shown here:\n\nWhen this checkbox is on when you start debugging a process, a new instance of ollydbg will automatically start whenever the debugged process creates a new process. This cannot be nested though, as a process started/debugged that way is not started by ollydbg.\nCatching the process creation\nAdditionally, you can search for all imported functions, go over them manually and add a breakpoint on each API used to create processes, there shouldn't be more than a few of those.\nThen, just let the process run until it hits one of those breakpoints and make the API call create the process in a suspended state (look up the specific API's documentation for the specifics).\nYou won't be able to attach to the process (because it's suspended) until it's resumed by calling <pre><code>ResumeThread</code></pre> on the process single thread. there's a common trick here that involves several steps:\n\nCreate the process as suspended (The process you're debugging did that for you after you changed the parameters to the process creation API call appropriately).\nFind the executable's entry point and take note of the two first bytes at that address.\nReplace those bytes with the 2 byte representation of <pre><code>jmp $</code></pre> (byte code is <pre><code>EB FE</code></pre>). This is an infinite loop as the instruction jumps to itself.\nResume the process.\nNow that the process is \"running\" you can attach to it, suspend it, restore the original two bytes and run it.\n\nKeep in mind that a process might be creating additional threads in the child process, and those might get past the suspension. Use at your own risk :)\nThere are ollydbg v1.1 plugins (which means immunity plugins) that will do that for you, but you'll have to find them because I can't recall the name. tuts4you.com is a good place to start.\n",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}