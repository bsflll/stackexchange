{
    "title": "Hex editing an IP address of a different length",
    "link": "https://reverseengineering.stackexchange.com/questions/30456/hex-editing-an-ip-address-of-a-different-length",
    "content": "I am performing some Windows malware research on a rogue AV software called SpySheriff (password: infected). I want to edit the IP address within the PE (.exe) file to change it to my honeypot IP address. I know it is easier to set-up IP Tables or use Fiddler to redirect the traffic, but I want to learn something new about reverse engineering.\nThe malware IPv4 address is <pre><code>52.90.24.115</code></pre> which I successfully replaced with a shorter address by adding a space (<pre><code>20</code></pre> in hex) at the end, and confirmed with netstat. I was expecting to terminate with <pre><code>0x00</code></pre> which I found strange.\nSince my honeypot IPv4 address is longer, how can I hex edit this into the malware without corrupting the PE? I have had this problem in the past, where I want to increase the length of text within an application, but if I surpass the original text's length is breaks!\nIf this is not possible with a hex editor (in my case Hex Editor NEO) then I am open minded to other approaches, such as reverse engineering with IDA or OlyDbg, where I can modify the executable file.\n",
    "votes": "0",
    "answers": 1,
    "views": "367",
    "tags": [
        "assembly",
        "debugging",
        "malware",
        "patching",
        "hex"
    ],
    "user": "securityauditor",
    "time": "May 30, 2022 at 22:44",
    "comments": [
        {
            "user": "securityauditor",
            "text": "Just had my question moved here.\n",
            "time": null
        },
        {
            "user": "fpmurphy",
            "text": "You can lengthen your IPv4 address by two numbers as you have 3 NULLs following the existing embedded IPV4 address string. This is sufficient space to embed any valid IPv4 address of the form NNN.NNN.NNN.NNN.\n",
            "time": null
        },
        {
            "user": "securityauditor",
            "text": "@fpmurphy If I give you the binary, and a fake IP address, could you try this and when it works (verify with netstat command) post an answer? I have tried using a longer IP in the manner you described, but in netstat it gives a completely different IP that is corrupted. It was also strange that I had to replace the first of the 3 NULLs with a space...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "IP addresses can also be represented as a decimal number, for example:\n52.90.24.115 == 878319731\nThis examples saves 3 bytes, maybe give this method a try and pad with 0x20.\nThere are many sites to convert IP to decimal for you.\n",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jun 22, 2022 at 4:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Viktor",
                    "text": "<span class=\"comment-copy\">But what if malware only understands/reads dotted decimal representation of ip address?</span>",
                    "time": null
                },
                {
                    "user": "Mega Tonnage",
                    "text": "<span class=\"comment-copy\">The screenshot shows it using HTTP so I thought it was a possibility that would usually (always?) take up fewer bytes than a dotted decimal address. However I don't have enough creds to comment on the question so had to offer it as an answer even though it's a suggestion to try.</span>",
                    "time": null
                },
                {
                    "user": "securityauditor",
                    "text": "<span class=\"comment-copy\">@MegaTonnage I appreciate the suggestion, however I was trying to learn whether there was some reverse engineering trick which did not require me to convert the IP address into decimal. I understand your suggestion and it will likely work, but that was not the answer I was looking for. Thank you!</span>",
                    "time": null
                },
                {
                    "user": "Mega Tonnage",
                    "text": "<span class=\"comment-copy\">Ah, I see. Generally you can't write more bytes than what you're trying to replace, or you'll overwrite/corrupt the item after it. It's worth a try, but it usually fails. When working with executable code, if you need more space than you have you would insert a jump to a \"code cave\" (an unused portion of memory), do what you need to do, then jump back.</span>",
                    "time": null
                }
            ]
        }
    ]
}