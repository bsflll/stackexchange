{
    "title": "Where are the .NET IL bytes stored in an .NET executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/27004/where-are-the-net-il-bytes-stored-in-an-net-executable",
    "content": "When i compile a c# code, it compiles into a .NET executable, that only imports _CorExeMain from mscoree.dll, now my questions are :\n\nIs _CorExeMain the interpreter that fetches ILs and executes their corresponding x86 code just like VMprotect, etc?\n\nWhere are the IL bytes actually stored? they seem to be stored in the .text section, but i couldn't find any tool that can find the location that they are stored. where are they stored?\n",
    "votes": "2",
    "answers": 1,
    "views": "285",
    "tags": [
        "windows",
        ".net",
        "c#"
    ],
    "user": "Notoriouss",
    "time": "Feb 14, 2021 at 5:41",
    "comments": [
        {
            "user": "morsisko",
            "text": "Press Ctrl+F in any hexeditor and search for these bytes\n",
            "time": null
        },
        {
            "user": "Notoriouss",
            "text": "@morsisko bruh.. I'm asking how can i find them so i can write a tool that finds them automatically.. not searching for bytes..\n",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "Sorry, my crystal ball didn't work this time. I think my answer still answers the question \"how can I find them\", as there are multiple programs that can display the IL bytes so you can search the desired position in executable...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For .NET assemblies there's a .NET MetaData Directory that can be found in the Data Directories. From that you can get access to <pre><code>MetaData Header</code></pre> and <pre><code>MetaData Streams</code></pre> that holds all the info for you to extract and located the code.\nA good start (or maybe even a complete guide) into this topic would be the \"Anatomy of a .NET Assembly\" by Simon Cooper.\nFor the first question - yes, the <pre><code>_CorExeMain</code></pre> is the entry point that does all the tricks to make your assembly to execute. For the explanations of all the things that happen during that call check The 68 things the CLR does before executing a single line of your code\n",
            "votes": "2",
            "user": "Paweł Łukasik",
            "time": "Feb 15, 2021 at 17:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}