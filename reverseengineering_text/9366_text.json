{
    "title": "Set QWORD with a constant value in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/9366/set-qword-with-a-constant-value-in-ida-pro",
    "content": "At line #3 of a function, I have a QWORD at address 7FE875F3FE0 which resolves to a value of 85857490416 for which the function returns true. If not, the value is set to 0.\nI would like to know how can I modify this QWORD to the said sequence of digits so that the function returns true. I have tried assembling this LoC, but it kills the function due to the non-match of the byte padding.\nCode Cave is an option? If so, can somebody help me? Else a MOV statement?\nJust started recently with RE and IDA Pro.\nCode Segment\n<pre><code>push    rbx\nsub     rsp, 20h\nmov     rax, cs:qword_7FE875F3FE0\nmov     rbx, rcx\ntest    rax, rax\njnz     short loc_7FE8728D09D\n\nloc_7FE8728D09D:\nmov     [rcx], rax\nxor     eax, eax\nadd     rsp, 20h\npop     rbx\nretn\n</code></pre>\n.data representation of the QWORD\n<pre><code>.data:000007FE875F3FE0 qword_7FE875F3FE0 dq ? \n.data:000007FE875F3FE0                                         \n.data:000007FE875F3FE8 db    ? ;\n.data:000007FE875F3FE9 db    ? ;\n.data:000007FE875F3FEA db    ? ;\n.data:000007FE875F3FEB db    ? ;\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "debugging",
        "dll"
    ],
    "user": "Pramod Mohandas",
    "time": "Jul 16, 2015 at 15:29",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "If your goal is to just have the function return <pre><code>true</code></pre>, why not just patch the function directly to always return <pre><code>true</code></pre> so that it never even looks at the value at <pre><code>qword_7FE875F3FE0</code></pre>?\n",
            "time": null
        },
        {
            "user": "Pramod Mohandas",
            "text": "The reason is because subsequent functions after this block looks for this particular value inside the <pre><code>[rcx]</code></pre> register. Performing what you suggest would then always result a value 0 to <pre><code>[rcx]</code></pre>. Future function calls depend on the validity of this register.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "How do you arrive at 85857490416 from your code example? The code you posted will return 0, which is false, not true, if the value at qword_7FE875F3FE0 is anything but zero.\n",
            "time": null
        },
        {
            "user": "Pramod Mohandas",
            "text": "Because if I hover over <pre><code>qword_7FE875F3FE0</code></pre> on LIne #3, I see this value which changes to <pre><code>15483925093871637495</code></pre> in the second segment move into <pre><code>[rcx]</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The easiest solution would likely be to patch the first block of the function to be the following:\n<pre><code>push    rbx\nsub     rsp, 20h\nmov     rax, 85857490416\nmov     rbx, rcx\n</code></pre>\nThough <pre><code>mov rax, 85857490416</code></pre> will consume extra bytes, you can remove <pre><code>test rax, rax</code></pre> and <pre><code>jnz short loc_7FE8728D09D</code></pre> to compensate.\nAnd if it still doesn't fit, then yes, a code-cave would likely be the next option.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jul 16, 2015 at 16:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Pramod Mohandas",
                    "text": "<span class=\"comment-copy\">What happens to the second half of the function that comes under the purview of <code>loc_7FE8728D09D</code>? Could you also point me to the code-cave alternative/sources as I would like to learn the same with this question.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">As long as you only patch the first block, it should be fine.</span>",
                    "time": null
                },
                {
                    "user": "Pramod Mohandas",
                    "text": "<span class=\"comment-copy\">So the code doesn't fit in. The program crashes on <code>sub rsp, 20h</code> I believe that a code-cave approach is necessary. Would it be possible for you to append a code-cave alternative to this query? Just the code part and not the basic how-to.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">If the program crashes on <code>sub rsp, 20h</code> then something is very very wrong...</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">@Jason Geffner: Why consumes mov rax, 85857490416 more bytes than the (to be replaced) mov     rax, cs:qword_7FE875F3FE0 ? Doesn't it consume one byte less to give space for a NOP? The bytecode should give evidence.</span>",
                    "time": null
                }
            ]
        }
    ]
}