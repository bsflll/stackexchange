{
    "title": "Detecting and solutions of stack smash protection",
    "link": "https://reverseengineering.stackexchange.com/questions/22866/detecting-and-solutions-of-stack-smash-protection",
    "content": "This video https://youtube.com/watch?v=4HxUmbOcN6Y presents how modern compilers protect stack overflows with stack cookies and function <pre><code>__stack_chk_fail</code></pre>.\n\nHow can one identify if a binary has stack smashing protection? If I see  <pre><code>__stack_chk_fail</code></pre> in IDA can I guess that this binary uses stack cookies(I will see this function only if this binary compiled dynamically).\n\nBut if this function is compiled statically, how can I recognize it? Each function will end with <pre><code>if ... then abort else return</code></pre> or only functions that get buffer from user?\n\nIf binary use stack smash protection and get buffer unsafe (like <pre><code>gets</code></pre> ) how can I get over stack cookies? Or there is no way to return to another function?\n",
    "votes": "1",
    "answers": 2,
    "views": "676",
    "tags": [
        "c",
        "buffer-overflow",
        "gcc",
        "stack-protector"
    ],
    "user": "wfj96649BcaooCom",
    "time": "Jan 3, 2020 at 6:15",
    "comments": [],
    "answers_data": [
        {
            "content": "You can identify if a function is protected by the presence of <pre><code>__stack_chk_fail</code></pre>. It doesn't matter if it's user-custom code or it is statically compiled from libraries. \n<pre><code>gets</code></pre> is a very problematic function by design. It's impossible to protect it from buffer overflows\n\nFor example:\n<pre><code>int main()\n{\n    char buf[2000];\n    gets(buf);\n}\n</code></pre>\nIn this case, the stack protection will most likely be on the <pre><code>main</code></pre> function, because of the <pre><code>buf</code></pre> variable.\n",
            "votes": "1",
            "user": "macro_controller",
            "time": "Dec 29, 2019 at 12:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "wfj96649BcaooCom",
                    "text": "<span class=\"comment-copy\">1.  <code>__stack_chk_fail</code> it's part of <code>libssp</code> so if I compile it statically I will not see <code>__stack_chk_fail</code> in code.    2. If stack smash protection used and the code check the magic before return address in stack, how can I over write it and jump to another function even I use <code>gets</code></span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">1. Compile statically means that the function resides within your compiled library, and not in an outside imported library. So it doesn't matter, you will still see a call to the function - once from within your file, and once as an import from outside. Don't be confused with <code>inline</code></span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">2. Yes, this is the purpose of the stack check - if it's enabled you won't be able to exploit the potential overflow caused by <code>gets</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can use checksec for dynamically linked binaries. However it'll fail for statically compiled binaries. You can try something like this for x86/64 with radare2\n\n\ni386\n\n<pre><code>$ r2 -AAA -qq -c \"pdf @main~gs\" test\n│           0x00000591      658b0d140000.  mov ecx, dword gs:[0x14]\n│           0x000005b6      65331d140000.  xor ebx, dword gs:[0x14]\n</code></pre>\n\namd64\n\n<pre><code>$ r2 -AAA -qq -c \"pdf @main~fs\" test\n│           0x00400b5c      64488b042528.  mov rax, qword fs:[0x28]\n│           0x00400b85      644833142528.  xor rdx, qword fs:[0x28]\n</code></pre>\nIn x64 cookie is loaded from <pre><code>fs:[0x28]</code></pre> and in x86 from <pre><code>gs:[0x14]</code></pre> in the function prolog. You can refer to the answer here\n",
            "votes": "1",
            "user": "sudhackar",
            "time": "Aug 5, 2020 at 11:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}