{
    "title": "Why can I inherit handles from WSASocketA and not from socket?",
    "link": "https://reverseengineering.stackexchange.com/questions/22628/why-can-i-inherit-handles-from-wsasocketa-and-not-from-socket",
    "content": "I'm trying to write some custom shellcode to obtain a shell from a program.\nLooking at the program intermodular calls, I found a call to <pre><code>socket()</code></pre>, and my initial plan was to use that to create a new socket, connect back and spawn a shell.\nI am able to to get a connection back, but unfortunately when I call <pre><code>CreateProcessA</code></pre>, I don't get any shell.\nAfter the call to <pre><code>socket()</code></pre> I have the socket descriptor in EAX:\n\nAnd then, after <pre><code>connect()</code></pre> (which works, I get the connection back on my netcat listener), I call <pre><code>CreateProcessA()</code></pre> and this are the parameters:\n\n<pre><code>InheritHandles</code></pre> is correctly set to TRUE. On the left panel I have dumped the <pre><code>StartUpInfo</code></pre> structure and as you can see the file descriptor is correctly added for all handles (first 3 bytes of the structure are all set to 200). Also the flag <pre><code>STARTF_USESTDHANDLES</code></pre> is correctly set.\nUnfortunately, this doesn't work. What surprises me is that if instead of using the address of the intermodular call to <pre><code>socket()</code></pre>, I use the address of <pre><code>WSASocketA</code></pre> (found using arwin), and without changing anything else (apart from adding the extra null arguments required for WSASocketA), I can get my shell.\nI don't understand why this is not happening with <pre><code>socket()</code></pre>, in fact, according to the documentation for the flag <pre><code>WSA_FLAG_NO_HANDLE_INHERIT</code></pre> of the <pre><code>WSASocketA</code></pre>:\n\nCreate a socket that is non-inheritable.\nA socket handle created by the WSASocket or the socket function is\n  inheritable by default. When this flag is set, the socket handle is\n  non-inheritable.\n\nSo I assumed that by default it should work with both functions.\nI don't know if this is relevant, but I'm testing it against a Windows 7 machine.\n",
    "votes": "3",
    "answers": 1,
    "views": "393",
    "tags": [
        "windows",
        "shellcode"
    ],
    "user": "Zagorax",
    "time": "Nov 27, 2019 at 10:39",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "This isn't really a reverse engineering question. My guess would be that - given you compare WinSock with the socket implementation inherited from BSD - that's your answer right there ...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Windows <pre><code>socket()</code></pre> creates a socket with <pre><code>WSA_FLAG_OVERLAPPED</code></pre> flag set and inheritable by default.\nWindows <pre><code>WSASocket()</code></pre> allows you to specify <pre><code>WSA_FLAG_OVERLAPPED</code></pre> and <pre><code>WSA_FLAG_NO_HANDLE_INHERIT</code></pre>.  If you omit both flags to <pre><code>WSASocket()</code></pre>, then the resulting socket will be inheritable and will not have <pre><code>WSA_FLAG_OVERLAPPED</code></pre> flag set.\nUnlike on Unix, Windows <pre><code>SOCKET</code></pre> is different from file descriptors or pipes.  If you pass a socket to Windows <pre><code>CreateProcess</code></pre> using <pre><code>STARTF_USESTDHANDLES</code></pre>, the socket must not have <pre><code>WSA_FLAG_OVERLAPPED</code></pre> flag set.\nYou managed to (accidentally) use <pre><code>WSASocket()</code></pre> without flags, so created an inheritable socket without <pre><code>WSA_FLAG_OVERLAPPED</code></pre>, so it worked for you!\n",
            "votes": "2",
            "user": "gstrauss",
            "time": "Feb 24, 2023 at 11:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}