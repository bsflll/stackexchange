{
    "title": "What's happening in the assembly main function?",
    "link": "https://reverseengineering.stackexchange.com/questions/20890/whats-happening-in-the-assembly-main-function",
    "content": "I'm currently inspecting a 32-bit malware executable in a WinXP VM using IDA Pro (free version). I don't understand what's happening in the main function here. \nWhere should I set the breakpoints (IDA Pro, OllyDbg) to see the content of the variables actually pushed onto the stack while debugging? I've previously set one breakpoint at offset <pre><code>00401230</code></pre>(beginning main) and <pre><code>004012C6</code></pre>(end main), but I don't really see the strings (variable values) turn up when observing the e.g. the stack pane in OllyDbg. I'm not sure what I'm doing wrong.\nOpening the strings window in OllyDbg, I can see some of the strings - I assume, will be used within main's function calls, including <pre><code>szServerName</code></pre> and <pre><code>szPassword</code></pre>.\nAs we can see, there's three functions that are being called within <pre><code>main</code></pre>:\n<pre><code>sub_401000</code></pre> (called 7x; Pastebin)\n<pre><code>sub_401170</code></pre> (called 1x; Pastebin)\n<pre><code>sub_401090</code></pre> (called 1x; Pastebin)\nSidenote: Taking the feedback into account I've decided to post the other functions in Pastebin (see links above). Posting only the main function here, allows me to keep the post concise.\n<pre><code>.text:00401230                   proc            _main near              ; CODE XREF: ___tmainCRTStartup+15Ap \n.text:00401230                                                           ; int __cdecl main(int argc,const char **argv,const char *envp)\n.text:00401230                   argc            = dword ptr  8    \n.text:00401230                   argv            = dword ptr  0Ch\n.text:00401230                   envp            = dword ptr  10h\n.text:00401230\n.text:00401230 55                                push    ebp\n.text:00401231 8B EC                             mov     ebp, esp\n.text:00401233 68 C0 B9 40 00                    push    offset szServerName \n.text:00401238 68 00 A0 40 00                    push    offset unk_40A000   \n.text:0040123D E8 BE FD FF FF                    call    sub_401000          \n.text:00401242 83 C4 08                          add     esp, 8\n.text:00401245 68 C0 B3 40 00                    push    offset szUserName  \n.text:0040124A 68 00 A1 40 00                    push    offset unk_40A100  \n.text:0040124F E8 AC FD FF FF                    call    sub_401000                     \n.text:00401254 83 C4 08                          add     esp, 8\n.text:00401257 68 C0 BF 40 00                    push    offset szPassword  \n.text:0040125C 68 00 A2 40 00                    push    offset unk_40A200\n.text:00401261 E8 9A FD FF FF                    call    sub_401000\n.text:00401266 83 C4 08                          add     esp, 8\n.text:00401269 68 C0 B7 40 00                    push    offset szLocalFile \n.text:0040126E 68 08 A3 40 00                    push    offset unk_40A308\n.text:00401273 E8 88 FD FF FF                    call    sub_401000\n.text:00401278 83 C4 08                          add     esp, 8\n.text:0040127B 68 C0 BB 40 00                    push    offset unk_40BBC0  \n.text:00401280 68 08 A4 40 00                    push    offset unk_40A408  \n.text:00401285 E8 76 FD FF FF                    call    sub_401000\n.text:0040128A 83 C4 08                          add     esp, 8\n.text:0040128D 68 C0 BD 40 00                    push    offset unk_40BDC0\n.text:00401292 68 08 A5 40 00                    push    offset unk_40A508\n.text:00401297 E8 64 FD FF FF                    call    sub_401000\n.text:0040129C 83 C4 08                          add     esp, 8\n.text:0040129F 68 C0 C1 40 00                    push    offset szRemoteFile\n.text:004012A4 68 08 A6 40 00                    push    offset unk_40A608\n.text:004012A9 E8 52 FD FF FF                    call    sub_401000\n.text:004012AE 83 C4 08                          add     esp, 8\n.text:004012B1 68 C0 B7 40 00                    push    offset szLocalFile ; lpszLocalFile\n.text:004012B6 E8 B5 FE FF FF                    call    sub_401170\n.text:004012BB 83 C4 04                          add     esp, 4\n.text:004012BE E8 CD FD FF FF                    call    sub_401090\n.text:004012C3 33 C0                             xor     eax, eax\n.text:004012C5 5D                                pop     ebp\n.text:004012C6 C3                                retn\n.text:004012C6                   endp            _main\n</code></pre>\nI'm grateful for any pointers and explanations to help me on my way to understand the main function.\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "malware",
        "idapro-sdk"
    ],
    "user": "she_roar",
    "time": "Mar 24, 2019 at 11:27",
    "comments": [
        {
            "user": "julian",
            "text": "Since you are new to RE, you may want to hold off on analysis of malware for the time being and focus on building an understanding of the methodology, tools, concepts and systems involved. One way you could do this is by using ollydbg to work through some crackme challenge programs. Regarding the question posted here, it is currently a bit broad. Instead of asking about what the whole program is doing, you could ask about what a specific function does, for example.\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "@she_roar maybe it's good that you upload the disassembly somewhere else and leave only the relevant parts here? It's getting difficult to read it here\n",
            "time": null
        },
        {
            "user": "she_roar",
            "text": "I've removed the functions (sub_xxx) called within main. Is that better?\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "@she_roar well, not really. One need to see what's in <pre><code>sub_401000</code></pre> to understand what's going on in <pre><code>main</code></pre>. Also @blabb explained what's going on here. Do you still have questions?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "the disassembly You posted for sub 401000 is incomplete   \nthis is a limited explanation\nit checks the provided buffer (0x40A000 in the first call for the first null terminator )\nand possibly decrypts it and memcpy() the decrypted string to szUserName  \n(the part is missing in your post (everything that happens after 0x401025 the jz path)   \nlook at disassembly it says it takes two arguments arg_0 and arg_4  \nso the two arguments for the first call to this function are   \n<pre><code>push    offset szServerName  << this is a pointer to a string\npush    offset unk_40A000    << this is some address that ida isn't sure of\ncall    sub_401000           << calls the functions\n</code></pre>\nso inside the call   \nit initializes a counter (ebp+var4) or (ebp-4) to 0\nit initialises eax to arg_0 or ebp+8 =>0x40A000 for first call\ntakes a byte form this address 0x40a000 + counter (0,1,2,3,....n...) to ecx\nand checks for \\x0 and loops until a \\x0 is found\nwhen a null terminator is found it jumps to 0x401025 (missing part)\n",
            "votes": "3",
            "user": "blabb",
            "time": "Mar 16, 2019 at 18:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "she_roar",
                    "text": "<span class=\"comment-copy\">thanks, i've edited <code>sub 40100</code>. it should be complete now. what specifically tells you it's encrypted? you said 'possibly' decrypts it. what gives you the impression?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">it is still incomplete :) get down and look at the complete function (view graph , view the whole control flow ) adding a few more lines is not called completing     and it is an educated guess  because it is looking for a null terminator  so it is going to do some thing once it finds one what is it ? decrypt / damage / discard / whatever / so its a possibility that the most possible flow owuld be decrypting /decoding /dewhatevering it</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I recommend starting from the beginning of main(), as you are, and single-stepping through each instruction.  In OllyDbg, the keybinding for single-step-into is F7.  Every time you press F7, the debugger will execute a single instruction, and you can look at the stack (lower-right window pane) and registers (upper-right window pane) to see how they were affected by the instruction that you just executed.  Remember that the highlighted instruction in OllyDbg is the next instruction to be executed when you press F7.  Also, when you want to skip over a CALL (such as an API call), use F8 to \"step over\" the instruction rather than into.\nIf you are looking for some introductory material to software reverse engineering and malware analysis, OpenSecurityTraining.info may help.  Full disclosure: I contributed to that website.  You can follow this progression of courses on that website:\n\nIntroductory Intel x86\n(optional) Intermediate Intel x86\n(optional) Life of Binaries\nIntroduction to Reverse Engineering Software\n(optional) Malware Dynamic Analysis\nReverse Engineering Malware\n\nIf you are completely new to programming, then you should start with a good Introduction to C Programming online course, especially basic data structures and algorithms.\n",
            "votes": "1",
            "user": "knowmalware",
            "time": "Mar 17, 2019 at 0:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}