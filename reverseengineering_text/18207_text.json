{
    "title": "Why do many imported functions jump to addresses that do not contain instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/18207/why-do-many-imported-functions-jump-to-addresses-that-do-not-contain-instruction",
    "content": "I am learning to analyze binaries using radare2 and have been confused about what occurs within imported functions. In the binary below, titled Lab2B, I statically disassembled the binary and then disassembled one of the imported library functions, sym.imp.printf. As you can see below it merely lists one instruction: <pre><code>jmp dword [reloc.printf]</code></pre>. When I seek to the location <pre><code>[reloc.printf]</code></pre> and I print the disassembled functions contained at it, the command line prints \"Cannot find function at 0x0804a00c\". I have noticed the same behavior with all of the other imported functions. They often have a single instruction that points to an address that doesn't contain any instructions. \nWhy are there no instructions contained at the address that the instruction tells the compiler to jump to?\n",
    "votes": "5",
    "answers": 1,
    "views": "792",
    "tags": [
        "assembly",
        "x86",
        "radare2",
        "functions"
    ],
    "user": "Darien Springer",
    "time": "May 8, 2018 at 6:46",
    "comments": [],
    "answers_data": [
        {
            "content": "I assume you are statically inspecting the program, hence, the addresses of the imported symbols wasn't calculated yet by the linker. To understand that better you need to get familiar with two terms, PLT and GOT. Anyway, even if you are debugging the file, these are not functiona but a table with pointers. So <pre><code>pdf</code></pre> isn't what you should try. Give a shot to <pre><code>pd</code></pre>.\nDynamic Linking\nThe Procedure Linkage Table is a memory structure that contains a code stub for external functions that their addresses are unknown at the time of linking.  \nWhenever we see a <pre><code>CALL</code></pre> instruction to a function in the <pre><code>.text</code></pre> segment it doesnâ€™t call the function directly. Instead, it calls the stub code at the <pre><code>PLT</code></pre>, say <pre><code>func_name@plt</code></pre>. The stub then jumps to the address listed for this function in the Global Offset Table (<pre><code>GOT</code></pre>). If it is the first <pre><code>CALL</code></pre> to this function, the <pre><code>GOT</code></pre> entry will point back to the <pre><code>PLT</code></pre> which in turn would call a dynamic linker that will resolve the real address of the desired function. The next time that <pre><code>func_name@plt</code></pre> is called, the stub directly obtains the function address from the <pre><code>GOT</code></pre>. \nTo read more about the linking process, I highly recommend this series of articles about linkers by Ian Lance Taylor.\n\nRadare2 is detecting the addresses of the PLT and GOT. Where you see <pre><code>sym.imp.printf</code></pre> it is actually the reserved address for <pre><code>printf()</code></pre> int the PLT. When you see <pre><code>reloc.printf</code></pre> is the address reserved for it in the GOT.\nBy using <pre><code>iS</code></pre> you can list the sections of <pre><code>PLT</code></pre> and <pre><code>GOT</code></pre>.\n",
            "votes": "5",
            "user": "Megabeets",
            "time": "May 10, 2018 at 3:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}