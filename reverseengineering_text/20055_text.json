{
    "title": "How to locate an specific data structure in an executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/20055/how-to-locate-an-specific-data-structure-in-an-executable",
    "content": "I need to locate an specific \"struct\" variable in the data section from an assembly. This structure is used for an specific System Function (Windows) \"SetCommState()\". I'm wondering how to locate the static data structure that are passed as argument to the function call. \nI'm ussing x64dbg for the disassembly and have the posibility to use snowman also. \nThe specific \"struct\" is the one defined here (DCB used for serial ports configuration)\n",
    "votes": "1",
    "answers": 1,
    "views": "564",
    "tags": [
        "x86",
        "x64dbg",
        "x86-64"
    ],
    "user": "gavioto",
    "time": "Dec 13, 2018 at 15:36",
    "comments": [
        {
            "user": "dsasmblr",
            "text": "Can you view the application's imports? If so, then consider setting a BP on SetCommState() and observe the data that's passed to it when it breaks (which will be made more meaningful if you identify the calling convention). You could also look for cross-references (xrefs) to SetCommState() and glean what information you can from that.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "if the structure is defined as local to a function like int foo() { DCB dcb .... SetCommState(handle , &dcb); ... } then it would be in stack you cannot get that statically if DCB is a global you can look at the disassembly and get the Address from the pushed arguments\n",
            "time": null
        },
        {
            "user": "gavioto",
            "text": "@Biswapriyo I'm not sure about how to do this. On the other hand, 'dsasmblr'and 'blabb', yes, I can set a breakpoint. but I was wondering if it could be possible to find the static data in the code without debuging. I will check taking into account your comments. Thank you\n",
            "time": null
        },
        {
            "user": "gavioto",
            "text": "@Biswapriyo a program that uses that function\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For this case, here I compile the MS Docs example in 64 bit PE binary with <pre><code>gcc -ggdb</code></pre> command (or use <pre><code>gcc -S</code></pre> for the assembly file). Here is the assembly section of <pre><code>SetCommState</code></pre> function in Intel syntax:\n<pre><code>mov     dword ptr [rbp-44], 57600       ; dcb.BaudRate = CBR_57600\nmov     byte ptr [rbp-30], 8            ; dcb.ByteSize = 8\nmov     byte ptr [rbp-29], 0            ; dcb.Parity = NOPARITY\nmov     byte ptr [rbp-28], 0            ; dcb.StopBits = ONESTOPBIT\nlea     rdx, [rbp-48]                   ; lpDCB\nmov     rax, [rbp-16]                   ; move the Handle returned by CreateFile\nmov     rcx, rax                        ; hFile\nmov     rax, cs:__imp_SetCommState\ncall    rax ; __imp_SetCommState        ; call the SetCommState function\nmov     [rbp-20], eax                   ; move return 32 bit integer value to stack\n</code></pre>\nHere are the general steps you may follow to find any input variable of a function:\n\nFind the imported function in the assembly (here <pre><code>SetCommState</code></pre>)\nFind or guess the calling convention used in that function (here <pre><code>__fastcall</code></pre>)\nIf any parameter is a structure type find the stack pointer and/or base pointer offsets before the function call (here <pre><code>[rbp-48]</code></pre>). It will be the first member of that structure type variable. Then follow the stack allocations one by one, you will get all the structure members which are changed/accessed (here <pre><code>[rbp-48]</code></pre>, <pre><code>[rbp-44]</code></pre>, <pre><code>[rbp-30]</code></pre> and so on).\n\nTo find the imported function (step #1) in x64dbg:\n\nload the executable in x64dbg\nRight click on the disassembly window > Search for > All modules > Intermodular calls.\n\n\nSearch the function name in search box below, here it will be <pre><code>SetCommState</code></pre>. x64dbg will show the specific address. Just double click on it and you can see the specific address. See this GitHub issue for reference.\n",
            "votes": "2",
            "user": "gavioto",
            "time": "Feb 6, 2022 at 11:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "gavioto",
                    "text": "<span class=\"comment-copy\">ok, In my case, it is a 32 bit application, so it can't use 64 bit registers. But I've got the general idea.</span>",
                    "time": null
                },
                {
                    "user": "gavioto",
                    "text": "<span class=\"comment-copy\">I'm having problems locating the code section (memory address to SetCommState using x64dbg</span>",
                    "time": null
                },
                {
                    "user": "gavioto",
                    "text": "<span class=\"comment-copy\">I'm in the process...</span>",
                    "time": null
                },
                {
                    "user": "gavioto",
                    "text": "<span class=\"comment-copy\">It worked, I used the content of [rdx] with a breackpoint in the \"lea\" instruction. Thank you.</span>",
                    "time": null
                }
            ]
        }
    ]
}