{
    "title": "Decompiling an executable compiled by vercel/pkg",
    "link": "https://reverseengineering.stackexchange.com/questions/30921/decompiling-an-executable-compiled-by-vercel-pkg",
    "content": "I have a .exe file that I am trying to get the source code of, After some digging I figured out that it's in node.js and was compiled using vercel/pkg\nI tried using pkg-unpacker however the output is all messed up and have a lot of null characters, even the node-modules modules have null characters in them, Only the *.js files have null characters, *.json are fine and are in their default format\nI also saw used a hex editor but that code isn't human-readable at all\n\nSome people suggested using ghidra_nodejs which will be my next step, however I don't know how to use it or if it will work with all the weird characters in the *.js files\nI think that the project is obfuscated using https://obfuscator.io/ or https://www.npmjs.com/package/javascript-obfuscator\nAny Ideas/Help is appreciated, Thanks!\n",
    "votes": "9",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ghidra",
        "decompile",
        "javascript"
    ],
    "user": "Anon",
    "time": "Sep 25, 2022 at 0:07",
    "comments": [],
    "answers_data": [
        {
            "content": "The <pre><code>vercel/pkg</code></pre> tool takes javascript (node.js) code, compiles it into <pre><code>v8</code></pre> bytecode and wraps it in an executable code that matches the platform.\nAs the Github page of the pkg-unpacker tool states:\n\nThis application DOES NOT decompile any code. By default pkg compiles code to V8 bytecode. Extracted files will remain in this format except for assets.\n\nIncluded <pre><code>.json</code></pre> files are assets, so they are decoded into their original readable form. The code remains as v8 bytecode.\nThe mentioned Ghidra plugin can disassemble and/or decompile it into readable format for analysis.\nThere is a detailed article about reverse engineering this type of code here:\nhttps://swarm.ptsecurity.com/how-we-bypassed-bytenode-and-decompiled-node-js-bytecode-in-ghidra/\n",
            "votes": "2",
            "user": "Yotamz",
            "time": "Mar 2, 2024 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jesse Emond",
                    "text": "<span class=\"comment-copy\">Note that the ghidra plugin linked above is not up-to-date with recent V8/NodeJS versions, the repo is archived, and it seems non-trivial to expand support to newer versions given that it involves changes to the V8 snapshotting bytecode (separate from the JS V8 bytecode itself). You might find this writeup I made recently for a challenge useful to hackily reverse it to get readable V8 assembly, but heads up it is on the longer side/not strictly focused on vercel/pkg reversing: <a href=\"https://github.com/JesseEmond/blitz-2024-registration\" rel=\"nofollow noreferrer\">github.com/JesseEmond/blitz-2024-registration</a></span>",
                    "time": null
                }
            ]
        }
    ]
}