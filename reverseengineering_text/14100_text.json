{
    "title": "How is the first jmp skipped in plt entry",
    "link": "https://reverseengineering.stackexchange.com/questions/14100/how-is-the-first-jmp-skipped-in-plt-entry",
    "content": "Whenever there is a call to a function of a dynamically linked library (0x400586 in the example at the end), the call first leads to a few lines in the .plt section, which in turn starts with a jmp to an address found in the GOT (see 0x400450). It looks like this (unconditional!) jmp does not get executed the first time, which makes sense, as the GOT has not been set up yet, and will be done with the following lines (0x400456). But what kind of magic prevents the jmp at 0x400450 from being taken the first time?\nhere's some code to clarify my question:\n<pre><code>0x400586: call 0x400450 <puts@plt>\n</code></pre>\nputs@plt then looks like this:\n<pre><code>0x400450: jmp QWORD PTR [rip+0x200bc2]\n0x400456: push 0x0\n0x40045b: jmp 0x400440\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "402",
    "tags": [
        "functions",
        "got",
        "plt"
    ],
    "user": "bayer",
    "time": "Dec 3, 2016 at 11:49",
    "comments": [],
    "answers_data": [
        {
            "content": "In the file on disk, the GOT slot referenced in <pre><code>0x400450</code></pre> is initially set up with the address of the PLT stub at <pre><code>0x400456</code></pre>.\nSo, the jump is taken the first time and goes to 0x400456 which pushes the target symbol's index (0 here) and jumps to the resolver (PLT0) stub at <pre><code>0x400440</code></pre> which finally goes to the dynamic loader routine, which:\n\nlooks up the target symbol's address using the symbol index\npatches the GOT slot so it points to the target (<pre><code>puts</code></pre>)\njumps to the target so that the program behaves as if it was called directly.\n\nSo, the next time <pre><code>puts@plt</code></pre> is called, the jump goes directly to the already-resolved  <pre><code>puts</code></pre> without going through the dynamic loader again.\nI recommend you to follow these steps in a debugger for a clearer picture.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Dec 3, 2016 at 12:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "bayer",
                    "text": "<span class=\"comment-copy\">perfect - thanks for the detailed explanation!</span>",
                    "time": null
                }
            ]
        }
    ]
}