{
    "title": "Reaching an address with ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/8597/reaching-an-address-with-ollydbg",
    "content": "I have some questions about how to reach an address by bypassing a few hundred lines. Assume that we have the following scenario:\n<pre><code>                   + -----------------------+\n          004019EF |                        |   <----- we are here\n                   |   content of function  |\n                   |   004019EF             |\n                   |                        |\n                   |                        |\n                   +------------------------+\n                   |                        |\n                   |     this area contains |\n                   |     lines which        |\n                   |     I want to bypass   |\n                   |     quickly            |\n                   |                        |\n                   +------------------------+\n         00401E1F  |                        |     <-- we want to go here\n                   |     content which I    |\n                   |     want to analyze    |\n                   |                        |\n                   |                        |\n                   +------------------------+\n</code></pre>\nSo, the situation is that I am for example at 004019EF and then I figured \nout that the location at 00401E1F also seems to be important. And I decide to go there. For that reason, I click on Ctrl+G, type the target address and\nset a breakpoint(clicking F2) at 00401E1F. Then I let it run. But the program doesn't reach the place. It terminates the process and ends at a location with RETN.\nSo, I started the process again. But this time, I step manually from line 004019EF to 00401E1F. On the way, I eliminate all the lines/instructions which leads to a termination by replacing them with a NOP instruction.\nAt the end, I reach the address 00401E1F.\nMy question would be : \nWhen I replace instructions with a NOP or change the flags of jump-instructions to modify the execution flow of the programm, then will these modifications be a problem for the content of 00401E1F ? \nI mean can I say the following : \n\"These instructions causing problems, so deleting them with NOP would be unproblematic\"  \nOR\nAm I going to miss some results of the area between 004019EF and 00401E1F which could be important for the content of 00401E1F ? \nIf yes, then:\nIs there another way to bypass that lines to reach the target address without patching/changing lines or instructions?\n",
    "votes": "1",
    "answers": 2,
    "views": "710",
    "tags": [
        "ollydbg"
    ],
    "user": "user3097712",
    "time": "Mar 30, 2015 at 12:34",
    "comments": [],
    "answers_data": [
        {
            "content": "Am I going to miss some results of the area between 004019EF and\n  00401E1F which could be important for the content of 00401E1F ?\n\nIt's impossible to know if that code contains side effects without analyzing that code.\n\nIs there another way to bypass that lines to reach the target address\n  without patching/changing lines or instructions?\n\nYes, you have two options:\n\nChange registers. The most straightforward approach would be to just change <pre><code>EIP</code></pre>. This can of course be problematic though with regard to side effects.\nIf the code before <pre><code>00401E1F</code></pre> is executed conditionally, satisfy whatever conditions are required such that that code doesn't get executed.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 30, 2015 at 14:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "What Jason said. Consider this C code:\n<pre><code>int size;\nint nelem=1;\nstruct whatever *data;\nif (debugger_is_running)\n    nelem-=2;                 // pass an unreasonable value to malloc\nsize=sizeof (struct whatever)*nelem;\nif ((data=malloc(size))==NULL)\n    abort_program(\"No memory\");\n......\n// use data here\n</code></pre>\nIt's the <pre><code>nelems-=2</code></pre> instruction you want to patch out. If you just <pre><code>nop</code></pre> out the call to <pre><code>abort_program</code></pre>, your data will still be a NULL pointer and cause the program to crash whenever you use it, much later.\nYou really need to analyze everything between your code blocks, find out how the program detects the debugger, and change that piece of code.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Mar 30, 2015 at 17:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">I understand what you wrote. I should better analyze all of that to have a better overview and to know what is going on. Thanks also for your answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}