{
    "title": "Given a program binary, how can I know which compiler it is compiled from?",
    "link": "https://reverseengineering.stackexchange.com/questions/11799/given-a-program-binary-how-can-i-know-which-compiler-it-is-compiled-from",
    "content": "Basically I have a set of 32-bit ELF program binaries compiled by either <pre><code>gcc</code></pre> or <pre><code>llvm</code></pre>. They are all stripped before analysis. \nMy question is that, given a binary, is there any way I can determine whether it is compiled by <pre><code>gcc</code></pre> or <pre><code>llvm</code></pre>? Is there any available tool to do so?\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "binary",
        "binary-format"
    ],
    "user": "lllllllllllll",
    "time": "Jan 19, 2016 at 15:53",
    "comments": [
        {
            "user": "ratchet freak",
            "text": "you may be able to guess based on the way some common constructs are compiled and optimizations that did or didn't happen\n",
            "time": null
        },
        {
            "user": "robert",
            "text": "I am curious why was this question downvoted?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I am no expert in the matter but I would try:\n\nsee exported functions names\nif mangling is present you can use it for compiler detection. Just make a list of exported function names and compare to known mangling schemes (for example from the table in linked wiki page)\nexamine linked DLL's\nyou can detect well known RTL's by the filenames.\nAlso you can try to find language/compiler engine\neach version of each compiler of modern programing languages need to have its engine. It is part of code that is responsible for things like stack, variables, control flow etc and is always the same for each compiled program with the same compiler version.\nSo create simple hello world apps in each compiler you can found and extract the engine binary. then simply search unknown binary and test if supported engine is present or not.\n\nThe first two bullets are more for PE (not sure if elf has the same info) and there are tools for such inspection (like PE/DLL explorers so for elf there should be something similar).\n",
            "votes": "2",
            "user": "Spektre",
            "time": "Jan 21, 2016 at 4:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "speeder",
                    "text": "<span class=\"comment-copy\">I know that Mach-O does have the same info as your first two points, you can see what version of .SO files are being requested, and also analyze name mangling, GCC and Clang for example are very different in their mangling scheme, and both can make Mach-O binaries, thus you can at least know if it is GCC or Clang, even if you can't figure a specific version.</span>",
                    "time": null
                }
            ]
        }
    ]
}