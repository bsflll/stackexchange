{
    "title": "Missing mnemonics '??' in Ghidra Assembly Code",
    "link": "https://reverseengineering.stackexchange.com/questions/30630/missing-mnemonics-in-ghidra-assembly-code",
    "content": "I was just trying to google and search for <pre><code>\"??\" Ghidra</code></pre> with no luck.\nI am trying to understand what the following questions mean in this Binary (meant for SuperH2 SH-2 processor) which is Big Endian according to Ghidra. It is shown below:\n\nAny idea of why the wildcard mnemonic couldn't be disassembled with Ghidra? Even directions to next steps in uncovering them will help :D\nThank you for your time!\n",
    "votes": "0",
    "answers": 1,
    "views": "591",
    "tags": [
        "disassembly",
        "assembly",
        "decompilation",
        "ghidra",
        "disassemblers"
    ],
    "user": "Aeonitis",
    "time": "Jul 13, 2022 at 23:59",
    "comments": [
        {
            "user": "dingo_kinznerhook",
            "text": "Can you specify what processor architecture your file is? It is possible that you are using the wrong endianness or architecture, and the ?? represent bytes that don't correspond to any known instruction in the architecture you've chosen.\n",
            "time": null
        },
        {
            "user": "Aeonitis",
            "text": "@dingo_kinznerhook Thanks, I updated my description to answer you.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Are you sure that this part of the binary is really code? The other instructions don't look like regular assembly code either, just a bunch of register moves without any purpose. The <pre><code>??</code></pre> just means that those bytes couldn't be decoded to an instruction, which is expected to happen if Ghidra is trying to disassemble data that isn't actually code.\nIf you are sure that those bytes are really code, you might be using the wrong processor.\n",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Jul 14, 2022 at 9:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Aeonitis",
                    "text": "<span class=\"comment-copy\">Interesting, thank you! It might just be \"zero-instruction\" undefined data then, as I have had other files parse fine. I appreciate your answer!</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">if this turns out to be correct, please upvote and accept this answer</span>",
                    "time": null
                },
                {
                    "user": "Aeonitis",
                    "text": "<span class=\"comment-copy\">I'm a noob, so no rep to upvote yet. It hasn't really solved my problem so I can't accept it I'm afraid to say. I'm actually trying to reverse engineer a game, so the binary code is valid.</span>",
                    "time": null
                },
                {
                    "user": "mumbel",
                    "text": "<span class=\"comment-copy\">Did you just randomly press disassemble in places?  Assembly should be contiguous (at least until control flow changes).</span>",
                    "time": null
                },
                {
                    "user": "Aeonitis",
                    "text": "<span class=\"comment-copy\">No. I just disassembled the whole assembly bytecode. I wonder if the sleigh editor instructions are complete for the SH2 processor</span>",
                    "time": null
                }
            ]
        }
    ]
}