{
    "title": "How to disassemble SPC572L assembler code?",
    "link": "https://reverseengineering.stackexchange.com/questions/31288/how-to-disassemble-spc572l-assembler-code",
    "content": "I have a binary file with code for the SPC572L64 processor from ST.\nThe Datasheet can be downloaded here and the Programmers Manual here. All documents for this processor are listed here.\nThe documents say:\n\nOne main 32-bit Power ArchitectureÂ® VLE\nCompliant CPU core, single issue\nThere is one e200z215An3 processor core on the SPC572Lx device.\nThe e200z215An3 is a single-issue 32-bit PowerISA 2.06 VLE compliant design with 32-bit\ngeneral-purpose registers (GPRs). The e200z215An3 core implements the VLE (variable-\nlength encoding) ISA, providing improved code density.\nInstruction set enhancement allowing variable length encoding (VLE), encoding a\nmix of 16-bit and 32-bit instructions, for code size footprint reduction.\n\nWikipedia says:\n\nPower ISA is an evolution of the PowerPC ISA, created by the mergers of the core PowerPC ISA and the optional Book E for embedded applications.\n\nAll this confuses me more than it helps.\nI tried to disassemble the code with Ghidra trying all PowerPC options. But what comes out is garbage. Every few lines a \"??\" appears instead of valid code:\n<pre><code>    0108003c 73 e0 e0 00     andi.      r0,r31,0xe000\n    01080040 70 68 e0 00     andi.      r8,r3,0xe000\n    01080044 18              ??         18h\n    01080045 63              ??         63h    c\n    01080046 d1 a0 70 80     stfs       f13,0x7080(0)\n    0108004a 00              ??         00h\n    0108004b bf              ??         BFh\n    0108004c 7c 89 03 a6     mtspr      CTR,r4\n    01080050 1a              ??         1Ah\n    01080051 03              ??         03h\n    01080052 09 00 1c 63     tdgti      r0,0x1c63\n    01080056 00              ??         00h\n    01080057 40              ??         40h    @\n    01080058 7a              ??         7Ah    z\n    01080059 20              ??         20h     \n    0108005a ff              ??         FFh\n    0108005b f8              ??         F8h\n    0108005c 70 68 e0 00     andi.      r8,r3,0xe000\n    01080060 70 79 c7 c0     andi.      r25,r3,0xc7c0\n    01080064 48 c4 7c 89     bl         SUB_01cc7cec\n</code></pre>\nAnd the decompiler outputs:\n<pre><code>void UndefinedFunction_01080000(void)\n{\n  /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n</code></pre>\nCan anybody give me a step by step instruction what settings I need to disassemble this processor?\n",
    "votes": "4",
    "answers": 1,
    "views": "376",
    "tags": [
        "assembler"
    ],
    "user": "Elmue",
    "time": "Dec 22, 2022 at 16:19",
    "comments": [],
    "answers_data": [
        {
            "content": "Based on the link provided by rce, Ghidra needs extra help to disassemble this code correctly.\nI select Language = \"PowerISA-VLE-64-32addr\" in the Ghidra project editor: Then to start the disassembly it will ONLY work by pressing the F12 key:\n\nAlso with IDA pro 7.5 I can disassemble my binary file. IDA pro has only two options for PowerPC: Big endian and Little endian. I selected Big Endian. When loading I chose that all the code is VLE and I get a successful disassembly:\n\nAfter loading the file you must press \"C\" to start the disassembly which is done very fast.\nTo see also the hex bytes (blue) in the disassembly you must edit the file ida.cfg and set\nOPCODE_BYTES            = 4\nbecause these bytes are disabled by default.\n",
            "votes": "5",
            "user": "Elmue",
            "time": "Jan 16, 2023 at 0:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}