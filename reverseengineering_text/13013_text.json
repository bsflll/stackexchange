{
    "title": "Reverse Engineer STM32L151's Firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/13013/reverse-engineer-stm32l151s-firmware",
    "content": "I have the STM32L151's firmware that I extracted via JTAG, but I cannot find a start point in IDA. I have tried two methods:\n1) I start IDA, drag the binary into the workspace, select ARM Little-endian for the processor type, click ok, the disassembly memory organization window appears, entered in relevant information found here on page 48, click ok, windows pops up saying \"IDA can not identify the entry point...\", in the workspace I see \"RAM:08000000        DCB [some hex number]\"\n2) Converted the binary to elf using my arm toolchain's objcopy, used \"readelf -h [my binary file]\" to find the entry point, got this output where the entry point is 0xff810000, dragged the elf into IDA's workspace, selected ARM Little-endian processor under processor type, clicked ok, and the workspace shows lines that look like \".data:0000002C        [several hex values separated by commas]\"\nIf I try to jump to the entry point address (0xff810000 from readelf) I get an JumpAsk fail. How do I find my start point so I can start reading the disassembled ARM assembly code?\n",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "firmware",
        "entry-point"
    ],
    "user": "Tyler",
    "time": "Jul 8, 2016 at 13:26",
    "comments": [],
    "answers_data": [
        {
            "content": "From the PDF to which you linked:\n\n3.3.4 Boot modes\nAt startup, boot pins are used to select one of three boot options:\n\nBoot from Flash memory\nBoot from System Memory\nBoot from embedded RAM\n\nThe boot loader is located in System Memory. It\n  is used to reprogram the Flash memory by using USART1 or USART2. See\n  STM32â„¢ microcontroller system memory boot mode AN2606 for details.\n\nIf we Google for AN2606, we find the documentation for the STM32 microcontroller system memory boot mode, which suggests in the table below that the bootloader begins at memory location <pre><code>0x1FF00FFE</code></pre>.\nAdditionally, the bootloader configuration table for each chip specifies the address of the bootloader firmware. For example, for STM32L01xxx/02xxx chips, page 174 specifies that the the bootloader's firmware is a 4 KB chunk that begins at address <pre><code>0x1FF00000</code></pre>.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jul 8, 2016 at 13:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tyler",
                    "text": "<span class=\"comment-copy\">Thank you so much Jason! You have made my day. Time to start sifting through ARM assembly code...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Get 4 bytes data from address 0x08000004 (at 0x08000000 is stack pointer address), there should be address to your reset handler. Even if internal bootloader will start, at the end it jumps to reset handler at that address.\n",
            "votes": "0",
            "user": "voldi",
            "time": "Dec 12, 2020 at 19:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}