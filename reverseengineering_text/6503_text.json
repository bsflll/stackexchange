{
    "title": "How do I restore modified firmware to a read only mount",
    "link": "https://reverseengineering.stackexchange.com/questions/6503/how-do-i-restore-modified-firmware-to-a-read-only-mount",
    "content": "I have managed to get a root shell on my web filtering router by plugging into a UART on the PCB which allowed me to see a process (lockbox.bin - ELF executable) running which handles most of the filtering functions. After extracting the lockbox.bin file and analyzing it with IDA pro, I've made some modifications to the file. I now need to get it back on the device to see if the changes worked, but when I try to make changes to the filesystem I get a message saying that the file system is read only. I suppose it's only a matter of mounting the filesystem as read/write, but I'm not sure how to do that (Access the boot loader?). The Busybox instance on the device is missing the mount command. The router in question is a re-branded realtek rtl8196b. \nAny Suggestions?\nDisclaimer: This is the first time that I've have done something like this so I may be missing a very basic step. Any help would be appreciated.\n",
    "votes": "1",
    "answers": 1,
    "views": "365",
    "tags": [
        "disassembly",
        "linux",
        "embedded"
    ],
    "user": "Nopslide",
    "time": "Oct 19, 2014 at 15:58",
    "comments": [],
    "answers_data": [
        {
            "content": "It's very probable that the firmware is stored in a <pre><code>squashfs</code></pre> image, which is compressed (and supposed to be read-only - it can't be mouted read-write, but must be created through external means), The squashfs image will probably be stored in some piece of flash ram, which can be accessed as <pre><code>/dev/mtbn</code></pre> on many linux embedded devices, which multiple values of <pre><code>n</code></pre> refering to different parts of the firmware (boot loader etc.). \nOften, the boot loader itself is in <pre><code>/dev/mtb0</code></pre>, and has commands to write to the other <pre><code>/dev/mtb</code></pre> blocks.\nSo, your course of action would be\n\ndump the various <pre><code>/dev/mtb</code></pre> blocks to files, check which is a squashfs, or maybe different type of file system, that contains your lockbox.bin\nrebuild that filesystem with your different version of lockbox.bin, and hope it doesn't grow significantly larger to exceed the size of the <pre><code>/dev/mtb</code></pre> block\ncheck how to boot to the boot loader from outside, without starting linux\nuse some boot loader to flash that filesystem to the router\nreboot the router, and hope you didn't brick it in the process.\n\nAs you say\n\nThis is the first time that I've have done something like this\n\nthe chance of \n\nbrick it in the process.\n\nis certainly non-zero, so proceed with caution.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 19, 2014 at 20:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nopslide",
                    "text": "<span class=\"comment-copy\">Thanks for the information and Advice. Step 1: I did that and found the file system under /dev/mtd. I has a squashFS files sytem (also under the device as /dev/mtdblock1) Step 2: Do you just rebuild the file system using the directory structure of the host that you are working on? Step 3: Any suggestions on where to start looking? Step 4: Same. Once again, thanks for your help.</span>",
                    "time": null
                }
            ]
        }
    ]
}