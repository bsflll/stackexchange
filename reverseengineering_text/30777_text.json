{
    "title": "How this data can be referenced in Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/30777/how-this-data-can-be-referenced-in-ghidra",
    "content": "I reverse engineered <pre><code>libil2cpp.so</code></pre> using ghidra. I found these lines of code in a function in the decompiler view:\n<pre><code>UnityEngine.PlayerPrefs$$GetInt(*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8),5,0);\n</code></pre>\nit is apparently getting the value of a <pre><code>shared_preferences</code></pre>. the syntax of when getting a shared_preference in <pre><code>unity</code></pre> games is as follows as described in the documentation:\n<pre><code>UnityEngine.PlayerPrefs.GetInt(string key, int defaultValue)\n</code></pre>\nso as apparently the <pre><code>*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)</code></pre> in the reversed code is the corresponding <pre><code>string key</code></pre>. while in general I know where the key is in the reversed code which is at this address\n<pre><code>010e94b8      undefined4      ??       ; ScoreID                                                                                            \n\n</code></pre>\nso what I wanted to learn is that how <pre><code>*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)</code></pre>  is reffering to that address <pre><code>010e94b8</code></pre> holding the string key.\nwhat I tried so far?\nreferring to this answer, I double clicked the value <pre><code>Class$ItemPref</code></pre> in the decompiled code <pre><code>*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8)</code></pre> and take its memory address <pre><code>010dd710</code></pre> and then adding <pre><code>0x5c</code></pre> yeilds <pre><code>10DD76C</code></pre> and then adding <pre><code>8</code></pre> yeilds <pre><code>10DD774</code></pre> so going to this address <pre><code>10DD774</code></pre> does not contain the string <pre><code>ScoringID</code></pre>.\nalso I did this taking memory address of <pre><code>Class$ItemPref</code></pre> which is <pre><code>010dd710</code></pre> and then adding <pre><code>0x5c</code></pre> and the multiply the size of the typecast which is <pre><code>int</code></pre> which is <pre><code>4</code></pre> then the result is <pre><code>4375DB0</code></pre> then adding <pre><code>8</code></pre> equals to <pre><code>4375DB8</code></pre> but this is not quite right.\nbut what I really wanted to learn is that how that string <pre><code>ScoreID</code></pre> is referred in the decompiled code <pre><code>UnityEngine.PlayerPrefs$$GetInt(*(undefined4 *)(*(int *)(Class$ItemPref + 0x5c) + 8),5,0);</code></pre> please help this as my limited knowledge of reversing and ghidra.\nif it helps, the corresponding disassembled view of the code is as follows:\n<pre><code>    003e60f0 5c 00 90 e5              ldr             r0, [r0,#0x5c]\n    003e60f4 05 10 a0 e3              mov             r1, #0x5\n    003e60f8 00 20 a0 e3              mov             r2, #0x0\n    003e60fc 08 00 90 e5              ldr             r0, [r0,#0x8]\n    003e6100 10 4c bd e8              ldmia           sp!,{r4 r10 r11 lr}\n    003e6104 1a 63 14 ea              b               UnityEngine.PlayerPrefs$$GetInt                                                                        ; undefined UnityEngine.PlayerPrefs$$GetInt()\n                    -- Flow Override: CALL_RETURN (CALL_TERMIN\n\n</code></pre>\n",
    "votes": "2",
    "answers": 0,
    "views": "265",
    "tags": [
        "ghidra",
        "static-analysis",
        "decompile",
        "c#",
        "game-hacking"
    ],
    "user": "hanan",
    "time": "Aug 14, 2022 at 13:50",
    "comments": [
        {
            "user": "Robert",
            "text": "I don't think the type <pre><code>string</code></pre> is equivalent to a <pre><code>char*</code></pre> where you would find the characters at the referenced memory address. Instead <pre><code>string</code></pre> is a struct so the pointer just leads you to that struct. See e.g. stackoverflow.com/questions/53654062/â€¦ (not sure if this also applies to the used <pre><code>string</code></pre> type in your case)\n",
            "time": null
        }
    ],
    "answers_data": []
}