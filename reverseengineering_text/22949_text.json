{
    "title": "How to reverse engineering a proguarded .apk? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22949/how-to-reverse-engineering-a-proguarded-apk",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 5 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nLets say you have android1.apk file coded with proguard enable. \nI want to reverse engineer it in such a way that it shows the original methods names instead letters of alphabets, example bellow \npublic void setName()\n{\n}\nOn android1.apk file that was coded with proguard enabled, once you reverse engineer the apk, you will get the java code in the format bellow: \npublic void a()\n{\n}\na() being setName()\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "android",
        "apk",
        "dalvik"
    ],
    "user": "Coding_A_Nation",
    "time": "5 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "Without the proguard mapping, this is not possible. That information is simply no longer contained in the dex file.\nThe best you could do would be to manually rename the methods, etc. with your own names.\n",
            "votes": "5",
            "user": "JesusFreke",
            "time": "Jan 31, 2020 at 17:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}