{
    "title": "Dumping a file loaded into memory",
    "link": "https://reverseengineering.stackexchange.com/questions/6716/dumping-a-file-loaded-into-memory",
    "content": "We have an executable that loads an XML file into memory, before parsing it into objects. \nWhen this file is loaded into memory is it possible to, break when it is loaded into memory and then somehow extract the file from memory?\n",
    "votes": "2",
    "answers": 3,
    "views": "948",
    "tags": [
        "dumping"
    ],
    "user": "Stephen",
    "time": "Nov 26, 2014 at 2:13",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Where does the file come from? Do you know/are you sure the whole file gets loaded before parsing starts? Many XML parsers, like SAX, use incremental parsing, so you might never have the whole file in memory at one point in time. If you don't have access to the file itself, for example because it's fetched from the network, running a network trace might be the easier way.\n",
            "time": null
        },
        {
            "user": "Stephen",
            "text": "It's stored locally encrypted, it gets decrypted and loaded into memory as an XML before being parsed into its objects.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Yes it is possible in a very large variety of ways, depending on OS, user privileges and user abilities. In some cases you even should not break -  it is enough to get memory dump of the process with tools such as procdump from sysinternals package.XML data has very easy detectable structure and can be easily found in the dump.\nUpdate by 3/27/2017:\nThis answer didn't take in account capabilities of Intel SGX technology which is available since release of Skylake processor generation (6*). \nThis technology intentionally restricts memory dumping in \"SGX enclaves\" and if all the work on the XML is done inside it could not be dumped.\n",
            "votes": "4",
            "user": "w s",
            "time": "Mar 27, 2017 at 8:01",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>question is very vague only proper answer that this question can get is</code></pre> it depends\nassuming your program does some like this \n<pre><code>int main(void) {\n    FILE *fp;\n    long fsiz;\n    char *buff;\n    if((fopen_s(&fp,\"c:\\\\myxml.xml\",\"rb\")) == 0) {\n        fseek(fp,0,SEEK_END);\n        fsiz = ftell(fp);\n        fseek(fp,0,SEEK_SET);\n        if ( (buff = (char *)calloc(1,fsiz)) != NULL) {\n            if (fread(buff,1,fsiz,fp) == fsiz)\n                getchar();\n        }\n        fclose(fp);\n    }    \n    return 0;\n}\n</code></pre>\nit is possible to dump when the file is read\nsay you are using windbg  .writemem can dump the file when read\n:>ls -la c:*.xml\n<pre><code>-rw-rw-rw-  1 Admin 0 13437 2003-07-15 17:30 c:\\myxml.xml\n</code></pre>\n:>cdb -c \"bp fread \\\"r $t0=poi(@esp+4);gu;.writemem c:\\mydupxml.xml @$t0 l?@ea\nx;\\\";g\" dumpxml.exe\n<pre><code>0:000> cdb: Reading initial command 'bp fread \"r $t0=poi(@esp+4);gu;.writemem c:\n\\\\mydupxml.xml @$t0 l?@eax;\";g'\n\nWriting 347d bytes.......\n</code></pre>\n:>ls -la c:*.xml & fc /b c:\\myxml.xml c:\\mydupxml.xml\n<pre><code>-rw-rw-rw-  1 Admin 0 13437 2014-11-26 11:54 c:\\mydupxml.xml\n-rw-rw-rw-  1 Admin 0 13437 2003-07-15 17:30 c:\\myxml.xml \nComparing files C:\\myxml.xml and C:\\MYDUPXML.XML\nFC: no differences encountered\n</code></pre>\nnow assuming the executable is running and the file is loaded into memory and you dont know cant know the buffer address cant set breakpoints or whatnot you can initialte a kernel debugging session and can dump the unknown in most cases\nlkd> !process 0 0 dumpxml.exe\n<pre><code>PROCESS 86121020  SessionId: 0  Cid: 0864    Peb: 7ffd9000  ParentCid: 0d8c\n    DirBase: 121805a0  ObjectTable: e35e0338  HandleCount:   8.\n    Image: dumpxml.exe\n</code></pre>\nlkd> !handle 0 3 86121020 File\n<pre><code>Searching for handles of type File\n07f4: Object: 864f88a0  GrantedAccess: 00120089 (Inherit) Entry: e1139fe8\nObject: 864f88a0  Type: (86fe9e70) File\n    ObjectHeader: 864f8888 (old version)\n        HandleCount: 1  PointerCount: 3\n        Directory Object: 00000000  Name: dumpxml\\myxml.xml {HarddiskVolume1}\n</code></pre>\nlkd> !fileobj 864f88a0\n<pre><code>dumpxml\\myxml.xml\n\nRelated File Object: 0x862c2270\n\nDevice Object: 0x86f76030   \\Driver\\Ftdisk\nVpb: 0x86f7a2b8\nEvent signalled\nAccess: Read SharedRead \n\nFlags:  0xc0042\n    Synchronous IO\n    Cache Supported\n    Handle Created\n    Fast IO Read\n\nFsContext: 0xe5ee0658   FsContext2: 0xe10e9600\nPrivate Cache Map: 0x864e72f0\nCurrentByteOffset: 347d\nCache Data:\n  Section Object Pointers: 8656c324\n  Shared Cache Map: 864e7218         File Offset: 347d in VACB number 0\n  Vacb: 86fbecd0\n  Your data is at: c484347d\n</code></pre>\nlkd> .writemem c:\\mydupxml.xml c484347d-347d l?347d\n<pre><code>Writing 347d bytes.......\n</code></pre>\n.shell  fc /b c:\\dumpxml\\myxml.xml c:\\dumpxml\\mydupxml.xml \n<pre><code>Comparing files C:\\\\DUMPXML\\\\myxml.xml and C:\\\\DUMPXML\\\\MYDUPXML.XML\nFC: no differences encountered\n\n.shell: Process exited\n</code></pre>\nor if you dont trust !fileobj :) you can try sussing it out by yourself with some convolutions like this \n<pre><code>lkd> db @@c++(((nt!_VACB *)*((nt!_Shared_cache_map *)(( nt!_FILE_OBJECT *) @@(864f88a0) )->SectionObjectPointer->SharedCacheMap)->Vacbs)->BaseAddress)\n</code></pre>\n.\n<pre><code>c4840000  3c 3f 78 6d 6c 20 76 65-72 73 69 6f 6e 3d 22 31  <?xml version=\"1\nc4840010  2e 30 22 3f 3e 0d 0a 3c-73 63 70 64 20 78 6d 6c  .0\"?>..<scpd xml\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Nov 26, 2014 at 8:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can also just dump all the RAM :)\nhttps://github.com/volatilityfoundation/volatility\n",
            "votes": "1",
            "user": "Fred Concklin",
            "time": "Nov 27, 2014 at 12:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}