{
    "title": "Can't find the base address of a function with IDA PRO (compiled with vs2015)",
    "link": "https://reverseengineering.stackexchange.com/questions/11730/cant-find-the-base-address-of-a-function-with-ida-pro-compiled-with-vs2015",
    "content": "Hi so I was just trying to learn reverse-engineering and when I open my program in IDA pro I find this address <pre><code>sub_11330</code></pre> (rebased to 0) https://gyazo.com/1c34d2c31f29583f05d0dd4d956d6f74 however when I try to hook this function the address <pre><code>GetModuleHandle(NULL) + 0x11330</code></pre> doesn't work so I just tried to print the base address of the function with <pre><code>std::cout << (DWORD)callme - (DWORD)GetModuleHandle(NULL)</code></pre> and when I try this address it works (0x1128a) why can't I find it with IDA ? sorry if I wasn't clear if you can't understand what I'm trying to explain I'll re write my post.\nthis is how I'm hooking it\n<pre><code>int WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)\n{\n\n    if (dwReason == DLL_PROCESS_ATTACH)\n    {\n        std::cout << \"injected\" << std::endl;\n        Detour((PBYTE)GetModuleHandle(NULL) + 0x1128a, (PBYTE)&func);\n    }\n    return true;\n}\n</code></pre>\nmy function detours just changes the first 5 bytes of the function and this one works i'm compiling with vs2015 in debug mode my program is a console application written in c++\n",
    "votes": "2",
    "answers": 3,
    "views": "3k",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "beginner",
    "time": "Jan 10, 2016 at 4:15",
    "comments": [
        {
            "user": "conio",
            "text": "Can you upload the code (to pastebin) and your binary? (And what's <pre><code>callme</code></pre>?)\n",
            "time": null
        },
        {
            "user": "beginner",
            "text": "Really sorry I didn't see your message conio I remember that I couldn't hook the function directly I think it was a problem that was directly related to the way mvc compiled I just had to use a pointer of this function as address and then my hook worked as expected but usually the hooking with the \"base address\" of a function should work still don't know why it didn't work this time.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The debug build by default has incremental linking enabled, which adds incremental linking thunks for all calls. When you're taking the address of the function inside the program, you're actually getting the address of the thunk, that's why the addresses are different.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Aug 8, 2016 at 15:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I am afraid i can't comment yet so i will post my thought as an answer. I have also found myself working with visual studio(2010,2013,2015) and trying to reverse-engineer something I made. Visual studio has an option enabled that changes the original entry point of your program once compiled. That's why you get different addresses from both IDA and your cout function.\n",
            "votes": "0",
            "user": "Chris Tsiakoulas",
            "time": "Feb 10, 2016 at 9:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Forget about detours, you won't learn anything and it limits your true reversing power\nYou dont need to call GetModuleInformation but I do anyways\n<pre><code>MODULEINFO modInfo = {0};\nHMODULE hMod = GetModuleHandle(\"NameOfExe.exe\");\nif(!hMod)\n{\n    MessageBox(NULL, \"Error\", \"Error\", NULL);\n}\nGetModuleInformation(GetCurrentProcess(),\n    hModule, &modInfo, sizeof(MODULEINFO));\n\n\nDWORD addr = (DWORD)modInfo.lpBaseOfDll\n    + 0x11330;\n\n// change this to function pointer in your code\nDWORD jumpAddr = 0xFFFFFF;\n\n// subtract 5 because the jmp opcode is E9 followed by 4 more\n// opcodes for the distance of the jump, total of 5 bytes\nDWORD jumpDistance = jumpAddr - addr - 0x5; \n\nDWORD oldPermission = NULL;\nDWORD newPermission = PAGE_EXECUTE_READWRITE;\n\nif (!VirtualProtect((BYTE*)addr, 0x5,\n    newPermission, &oldPermission))\n{\n    MessageBox(NULL, \"Error\", \"Error\", NULL);\n}\n\n*(BYTE*)(addr) = 0xE9;\n*(DWORD*)(addr+1) = jumpDistance;\n\nif (!VirtualProtect((BYTE*)addr, 0x5,\n    newPermission, &oldPermission))\n{\n    MessageBox(NULL, \"Error\", \"Error\", NULL);\n}\n</code></pre>\n",
            "votes": "-1",
            "user": "elyasm",
            "time": "Jan 10, 2016 at 22:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "beginner",
                    "text": "<span class=\"comment-copy\">Thank you for your answer, but I already knew how detours worked, I just wanted to know how I could find the addresses in ida I managed to find the same addressses actually with the xrefs but it still doesn't work (it works with my console application but doesn't with a basic gui application that has a button that outputs something when I push the button) when I do getmodulehandle(null) + the address and I'm pretty sure that it's the good address since I printed it manually</span>",
                    "time": null
                },
                {
                    "user": "elyasm",
                    "text": "<span class=\"comment-copy\">the problem is you cant find the address in IDA?</span>",
                    "time": null
                },
                {
                    "user": "beginner",
                    "text": "<span class=\"comment-copy\">hmm yes that's what the title says i think ?</span>",
                    "time": null
                }
            ]
        }
    ]
}