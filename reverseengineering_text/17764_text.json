{
    "title": "How is a keygen made by reversing a software? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17764/how-is-a-keygen-made-by-reversing-a-software",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI know that a software is cracked by reverse engineering it and reading it's assembly code... My question is how and what do crackers look for in the assembly code? And how do they know what algorithm is being used to verify the serial code (since we cannot see the original source code)?\n",
    "votes": "2",
    "answers": 2,
    "views": "9k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Mrunal Sonawane",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "The assembly code is better than the original source code, it tells you exactly what happens.  What you look for: start looking for the error message which is printed when your license key is wrong, and work back from there.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Sounds like you are asking for an introduction to reverse engineering. If this is a topic that interests you, I recommend a well known tutorial series from the \"Legend of Random\". The original blog is now defunct, but is mirrored here:\nhttp://octopuslabs.io/legend/blog/sample-page.html\nThe tutorials build upon one another, so if you'd like to learn start with #1 and finish them all.\nTutorial #19 addresses your question more directly, but you should complete the other tutorials in order to gain the knowledge necessary to understand tutorial #19.\n",
            "votes": "1",
            "user": "Mick",
            "time": "Mar 21, 2018 at 16:48",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "In addition to what Mick said, here is an excellent video tutorial on the topic, where the individual takes nearly 2 hours to thoroughly demonstrate how to reverse engineer the key validation algorithm in a particular CrackMe.\nWhile it's a \"simple\" example in a world filled with much more complex key/license algorithms, I think it's an incredible resource for beginners/intermediates to learn from.\n",
            "votes": "2",
            "user": "dsasmblr",
            "time": "Mar 21, 2018 at 18:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}