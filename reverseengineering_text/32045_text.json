{
    "title": "Identifying file-access functions used by explorer.exe",
    "link": "https://reverseengineering.stackexchange.com/questions/32045/identifying-file-access-functions-used-by-explorer-exe",
    "content": "I'm trying to write a Windows 10 64-bit rootkit that runs on userland and hides files using IAT hooking. I managed to accomplish that on cmd.exe by hooking <pre><code>FindFirstFileW</code></pre> and <pre><code>FindNextFileW</code></pre> imported from kernel32.dll.\nNow I've moved on to explorer.exe, but it seems that it doesn't use these functions at all. I thought about hooking the Ex versions, but I don't see them imported. So, I'm currently trying to figure out which functions explorer.exe uses to read files from a folder. I have tried the following:\n\nDebugging: I don't know where to set the breakpoint.\n\nAPI Monitoring: There is no free API monitor available for Windows 10. I tried using Sysinternals' Procmon, but I couldn't find a suitable API function.\n\nUsing PE Parser: CFF Explorer Import Directory tells me that kernel32.dll isn't significant. After further research, I found that shell32.dll may be helpful, but it imports the function by ordinal so there are no names available.\n",
    "votes": "1",
    "answers": 2,
    "views": "269",
    "tags": [
        "windows",
        "malware",
        "winapi"
    ],
    "user": "one_hell_of_a_guy",
    "time": "Jul 8, 2023 at 20:53",
    "comments": [
        {
            "user": "Jane",
            "text": "Welcome to Rev.Eng.StackEx!  Can you provide (if any) code of the rootkit? It would help. Or any other sources to references/context/background?\n",
            "time": null
        },
        {
            "user": "one_hell_of_a_guy",
            "text": "It's just a DLL with a simple function that hooks IAT. I just need to find the functions explorer uses to read files from a folder, so I can hook them.\n",
            "time": null
        },
        {
            "user": "Jane",
            "text": "I will ask again just to be sure; it would be really helpful if you provide code too; as you say it's a DLL, with a function that hooks IAT - then I guess there really must be some code that does this, or is it closed source? (if it is closed source , I won't ask for the source! I ask for it now since I don't know if it is or not (assuming it's open source since you ask for help on making a rootkit))\n",
            "time": null
        },
        {
            "user": "one_hell_of_a_guy",
            "text": "I just don't think the rootkit's code is relevant to my reversing question. All I'm asking for is a way to analyze explorer.exe in a way that finds the functions I need to hook.\n",
            "time": null
        },
        {
            "user": "Jane",
            "text": "I see, thanks for explaining and sorry for repetitive questions!   +1\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "explorer used shell interface to display file and folder and the starting point would be to look at. https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/bb773177(v=vs.85)\n",
            "votes": "-1",
            "user": "revittrk",
            "time": "Jul 8, 2023 at 18:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "explorer uses Find...File....  functions from kernelbase.dll\nyou can set breakpoints on them\nhow are you debugging explorer.exe\nwhen a new instance is spawned iirc ShellExecute is used to open a newwindow\nand the debugger will terminate if there is an already running instance of explorer.exe.\nyou  need to use the console based cdb.exe instead of gui windbg to debug the gui explorer.exe\nalso if debugging on single machine you should avoid doing operation that will deadlock  possibly minimizing , open file , spawning other gui apps etc may result in deadlock\nhere is a FindFirstFileExW break on explorer.exe attached in a cdb.exe session on a running explorer.exe using cdb -p pid  command\n<pre><code>0:004> bp KERNELBASE!FindFirstFileExW\n0:004> bp KERNELBASE!FindNextFileW\n0:004> g\nBreakpoint 0 hit\nKERNELBASE!FindFirstFileExW:\n00007ffa`901cfae0 4055            push    rbp\n0:003> k\nChild-SP          RetAddr           Call Site\n00000000`0342e688 00007ffa`901cfacc KERNELBASE!FindFirstFileExW\n00000000`0342e690 00007ffa`918de5df KERNELBASE!FindFirstFileW+0x1c\n00000000`0342e6d0 00007ffa`918de44b SHELL32!IsNonCloudFilePlaceholderReparsePoint+0x2b\n00000000`0342e960 00007ffa`91921b08 SHELL32!PathGetVolumeRoot+0xb7\n00000000`0342ebc0 00007ffa`9192187f SHELL32!GetRecreatableRecycleBinLocation+0x58\n00000000`0342ef00 00007ffa`91c139e8 SHELL32!CRecycleBinManager::_DiscoverRecycleBin+0xff\n00000000`0342f190 00007ffa`91ad1bbc SHELL32!CRecycleBinManager::WillRecycle+0x38\n00000000`0342f1c0 00007ffa`919f2593 SHELL32!CRibbonDeleteCommand::_CanRecycle+0x114\n00000000`0342f260 00007ffa`8dc42e0b SHELL32!CRibbonDeleteCommand::GetState+0x15db83\n00000000`0342f2d0 00007ffa`91898cc9 windows_storage!RegDataDrivenCommand::GetState+0x26b\n00000000`0342f320 00007ffa`9191e031 SHELL32!CVerbStateTask::InternalResumeRT+0x109\n00000000`0342f390 00007ffa`8dc6b75c SHELL32!CRunnableTask::Run+0xc1\n00000000`0342f3e0 00007ffa`8dc6b3a1 windows_storage!CShellTask::TT_Run+0x3c\n00000000`0342f410 00007ffa`8dce5af4 windows_storage!CShellTaskThread::ThreadProc+0xdd\n00000000`0342f4c0 00007ffa`90e43106 windows_storage!CShellTaskThread::s_ThreadProc+0x44\n00000000`0342f520 00007ffa`927ffd23 shcore!ExecuteWorkItemThreadProc+0x16\n00000000`0342f550 00007ffa`927e31fa ntdll!RtlpTpWorkCallback+0x173\n00000000`0342f630 00007ffa`91627614 ntdll!TppWorkerThread+0x68a\n00000000`0342f930 00007ffa`927e26f1 KERNEL32!BaseThreadInitThunk+0x14\n00000000`0342f960 00000000`00000000 ntdll!RtlUserThreadStart+0x21\n\n0:003> |\n.  0    id: 294 attach  name: C:\\WINDOWS\\Explorer.EXE\n\n0:003> ~.\n.  3  Id: 294.76c Suspend: 1 Teb: 00000000`011df000 Unfrozen\n      Start: ntdll!TppWorkerThread (00007ffa`927e2b70)\n      Priority: 0  Priority class: 32  Affinity: f\n</code></pre>\nEDIT\ni answered generically and i don't know what your code does or why you cannot see what you wish to see as you have not provided any code or error details\nthere are lot of hook library and instrumentation frameworks to verify if some function is being called by some module / binary\none such versatile instrumentation framework is frida\nusing frida-trace you can see FindFirstFileW is being called and log also log the argument being passed  as shown in the screen shot below\nafter starting trace i double clicked the js file and it opened up the open with dialog\nand frida has logged the file name along with path\nusing this code in the interceptor\n<pre><code>onEnter(log, args, state) {\n    log('FindFirstFileW()');\n    log(args[0].readUtf16String());\n  },\n</code></pre>\n",
            "votes": "-1",
            "user": "blabb",
            "time": "Jul 10, 2023 at 18:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "one_hell_of_a_guy",
                    "text": "<span class=\"comment-copy\">That's great, but I couldn't find a call to any of the FindNextFile variations. So, even though I'm hooking FindNextFileW and FindFirstFileExW, I don't see any results.</span>",
                    "time": null
                }
            ]
        }
    ]
}