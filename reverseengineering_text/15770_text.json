{
    "title": "Is there a name for this kind of \"obfuscation\" for the machine code from C++?",
    "link": "https://reverseengineering.stackexchange.com/questions/15770/is-there-a-name-for-this-kind-of-obfuscation-for-the-machine-code-from-c",
    "content": "I was trying to reverse engineer an android ndk (arm) using ida pro on a static analysis. However, it appears there are a lot of useless jumps to the same place and with random values set to R1 to compare and jump again. Like the following picture. Nearly every function is doing something similar -- Initialization first (stuffs like push registers), then it jumps to code somewhere (like the right up corner of the picture), load random values to R1 register and compare it with R0 and do the jumps, but it will always jump back to the up corner again\n\nHere is another case, it seems loc_FFBA and it's following branches serve as a big switch, but what doesn't make sense is nearly every branch will eventually jump back to loc_FFBA again. There can be a flow red->green->blue->red, but it doesn't even make sense... You can see the jump in blue is even useless because if it takes jump to blue (R0>0x6fe5e521), it will definitely take the jump to the red (R0>0x661cf941)...\n\nMy question is, is this done intentionally by the author to prevent the reverse engineering? If so how is it achieved? For me, it sounds like the author will need a lot of if-else and goto clause in his C++ code, but that will also slow down the development because he may confuse himself... And it doesn't seem the .so ndk is packed, since by using a debugger, I found generally what it actually does is just to decode a resource file to an apk and load it dynamically, but all the decryption is done by calling JNI functions to do an AES decryption to load the APK, rather than do it in C++, so the messed up jumps seems not to be something related to the decryption either...\nMaybe there's some kind of compiler that will generate the junks if this is really an intentional obfuscation?\n",
    "votes": "9",
    "answers": 3,
    "views": "1k",
    "tags": [
        "ida",
        "c++",
        "android",
        "obfuscation"
    ],
    "user": "Y M",
    "time": "Jul 6, 2017 at 7:45",
    "comments": [
        {
            "user": "0xec",
            "text": "This looks to be CFG Flattening Obfuscation\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Unfortunately it is not enough code to say exactly what it is, but, \nas @0xec said, it looks very much like control flow flattening.\nUsually such kind of code transformations are done automatically with obfuscators.\nThere are some obfuscating compilers, and one of them  does CFG flattening. As far as I know this compiler is not one-of-a-kind, there are a lot of others. This specific obfuscating compiler is based on LLVM framework and if you want to see how it can be implemented - the code for the CFG flattening is here. Also, you can find an example on how to deobfuscate small programs here.\n",
            "votes": "7",
            "user": "j04n",
            "time": "Jul 6, 2017 at 19:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Y M",
                    "text": "<span class=\"comment-copy\">Very interesting, but it sounds to me the obfuscation is more resistant than packing in static analysis because for packing, the original machine code can nearly always be recovered natively, but for obfuscation, it is just what it is...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Here's a blog post describing this technique in a little more detail as well as some hints on how to undo it:\nhttps://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html\nEDIT\nAnother article from 2017:\nhttps://blog.rpis.ec/2017/12/dissection-llvm-obfuscator-p1.html\n",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Dec 6, 2017 at 9:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Isn't this technically a link-only answer? I think a mention of OLLVM in the answer would be in order, no?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are several method of obfuscation, including:\n\nobfuscation based on source code obfuscation.\nmeta-level based code obfuscation (compile-time level).\nIR level obfuscation (like OLLVM and etc).\nbinary level obfuscation (instructions morphing, shuffling and etc).\npacking/protection level obfuscation (which involves using external tools to protect the binary code and restore it while executing).\ncompilation of these methods.\n\nEach of these methods has its own advantages and disadvantages:\nFor example\n\nCompile-time level obfuscation can be difficult to control and debug.\nWhile Binary level of obfuscation can leave many signs of obfuscation such as changed opcode sequences and abnormal constructions.\nIR level obfuscators can also leave many signs of obfuscation and can be easily deobfuscated with automatic or semi-automatic tools.\nPacking/protection level obfuscation may easily be deobfuscated\\unpacked with automatic tools too and protected binary will be restored as original one.\n\nHere I want to stop on code level obfuscation and transformation.\nYes, when it comes to code level obfuscation and transformation, parsing and handling the code of all C/C++ languages (including ISO versions such as C17+) is a complex task.\nProcessing transformation passes at the source code level can also be challenging.\nHowever, if done correctly, code level obfuscation can provide many benefits. For example, mixing dummy generated code with the original code can protect against automatic deobfuscation.\nAdding powerful opaque predicates with complex precalculation can also protect against auto tracing and code simplify tools. Protecting strings, values, and expressions at the source level is also valuable. Additionally, the control flow of the code can be shuffled without changing the logic through techniques such as while/goto jumps or conditional if blocks.\nBut we should remember about code optimization by complier phase and prepare code obfuscation passes with mind of how to avoid optimization of protected code.\nSo, code level obfuscation and transformation can be a powerful tool for protecting code against reverse engineering and tampering attacks. However, it is important to carefully consider the pros and cons of each method and to design the obfuscation passes with an understanding of how they will be affected by compiler optimization. By doing so, it is possible to effectively protect code and safeguard intellectual property.\nAt RandomBlocks Lab, we use code level obfuscation in our CodeMorpher C/C++ Code Obfuscator to protect our customers' code. We leverage the power of the Clang parser and our own techniques and transformation passes to ensure the highest level of protection. Our team of experts has extensive experience in code obfuscation and is committed to helping our customers safeguard their intellectual property. If you are looking to protect your C/C++ code, we encourage you to give our CodeMorpher Obfuscator a try.\nWe believe it is the most effective solution available for code level obfuscation.\n",
            "votes": "2",
            "user": "BenjaminL",
            "time": "Jan 9, 2023 at 11:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}