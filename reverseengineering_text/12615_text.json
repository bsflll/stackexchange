{
    "title": "how to calculate this distance?",
    "link": "https://reverseengineering.stackexchange.com/questions/12615/how-to-calculate-this-distance",
    "content": "I dont know how to calculate the jump distances :\n<pre><code>[Address | Binary value| ollydbg(jmp, call...)]\n\n004014B6   $- FF25 30114000 JMP DWORD PTR DS:[<&MSVBVM60.#100>]      ;  MSVBVM60.ThunRTMain\n004014C1   .  E8 **F0FFFFFF**   CALL [JMP.&MSVBVM60.#100]\n</code></pre>\nother examples: random jmps to 004014C1\n<pre><code>0040752A    ^\\E9 **929FFFFF**   JMP stub2.004014C1\n00407561    ^\\E9 **5B9FFFFF**   JMP stub2.004014C1\n00407582    ^\\E9 **3A9FFFFF**   JMP stub2.004014C1\n</code></pre>\nas you can see the bold number changes, I can see its a distance but I don't know how to calculate it.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg"
    ],
    "user": "Charles",
    "time": "May 10, 2016 at 10:04",
    "comments": [],
    "answers_data": [
        {
            "content": "First, you should read about little endianness. In a nutshell, the x86/x64 processors store the least significant byte first, so <pre><code>F0FFFFFF</code></pre> is really the value <pre><code>FFFFFFF0</code></pre>, and <pre><code>3A9FFFFF</code></pre> is the value <pre><code>FFFF9F3A</code></pre>.\nSecond, read about integer representations of negative values, and how overflow works when adding/subtracting numbers. In short, <pre><code>FFFFFFF0</code></pre> can either mean <pre><code>4294967280</code></pre> or <pre><code>-16</code></pre>, but when you add hex numbers, you don't really care; you just add them and ignore overflow.\nThird, remember that jump offsets are calculated from the byte after the <pre><code>jmp</code></pre>/<pre><code>call</code></pre> instruction.\nSo, in your first example:\n\nstart with <pre><code>4014B6</code></pre>\nadd 6 bytes for the instruction, result <pre><code>4014BA</code></pre>\nadd the value <pre><code>401130</code></pre>, result <pre><code>8025EA</code></pre>\n\nand the first of your random examples:\n\nstart with <pre><code>40752A</code></pre>\nadd 5 bytes for the instruction, result <pre><code>40752F</code></pre>\nadd <pre><code>FFFF9F92</code></pre>, result <pre><code>1004014C1</code></pre>\nignore overflow, result <pre><code>004014C1</code></pre> which is the target Olly shows you.\n\nYour other examples work in the same way, you should be able to figure them out now.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 10, 2016 at 10:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}