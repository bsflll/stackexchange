{
    "title": "Structure of operand bytes in .NET call and data access IL instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/25814/structure-of-operand-bytes-in-net-call-and-data-access-il-instructions",
    "content": "I tried googling but couldn't find any good source that explains the structure of memory access instructions like ldstr and call instructions\nfor example based on experience, the last byte of API/library call instructions is always 0x0A (let me know if I'm wrong), but why? what are the structure of the 4 bytes of call operands? what about operands of ldstr instructions?\nbecause they are different from native apps, they are not raw offsets, they seem to be offsets into a table but i cannot find any post that explains this in detail?\nthe best thing i found is this :\nhttps://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/\nbut it still doesn't explain many things\n",
    "votes": "2",
    "answers": 1,
    "views": "126",
    "tags": [
        "ida",
        "windows",
        "malware",
        ".net"
    ],
    "user": "OneAndOnly",
    "time": "Sep 4, 2020 at 14:47",
    "comments": [],
    "answers_data": [
        {
            "content": "the last byte of API/library call instructions is always <pre><code>0x0A</code></pre>\n\nIt's because calls needs to have method (ref) as a parameter and methods are defined in the table that has an id of <pre><code>0x0A</code></pre>.\nHaving bytes of the call like this <pre><code>280600000A</code></pre> let's go one by one.\n\n<pre><code>0x28</code></pre> - is the value for opcode 'call' and it takes one operand.\nthe rest of the opcode is the metadata token so basically the information which method should be called\n\nBut why <pre><code>0x0A</code></pre> is at the end? It should be read as a little-endian so the value should be <pre><code>0x0A000006</code></pre>. But what are the bytes?\nFrom Wikipedia:\n\nWhen CIL code uses metadata it does so through a metadata token. This is a 32-bit value where the top 8 bits identify the appropriate metadata table, and the remaining 24 bits give the index of the metadata in the table.\n\nSo the first value is the table id - and as I've mentioned the id of member's ref table is value <pre><code>0x0A</code></pre>. And the rest is an index in the table (in our case <pre><code>0x6</code></pre>).\nMore about the tables? Those are basically part of .NET metadata information, that can be seen when you open one in i.e. dnSpy\n\nAs one can see <pre><code>0x0A</code></pre> is assigned to the <pre><code>MemberRef</code></pre> (containing both methods and fields references)\n\nwhat about operands of ldstr instructions?\n\nIn this instance, the instruction has the following structure <pre><code>72XXXX0070</code></pre> and <pre><code>0x70</code></pre> indicates different stream - namely User defined strings or <pre><code>#US</code></pre>. The rest (again interpreted as a little-ending 32-bit val) is the offset (in bytes) in <pre><code>#US</code></pre> table.\nGenerally dnSpy is a great tool to verifying those values as one can metadata tables.\nThe linked article (and the whole series is a great resource)  it does explain (I think) the structure but maybe indirectly - just find the information about metadata token.\nWe can induce from it the whole structure of a metadata token.\n",
            "votes": "4",
            "user": "Paweł Łukasik",
            "time": "Sep 6, 2020 at 6:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Thanks for the great explanation, do you happen to know any other good reference or even a book that explains everything about structure of .NET files/IL instructions in a very detailed manner?  what is the most detailed reference?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Not sure if I can provide one reference. It is something I acquired by reading &amp; exploring multiple sources.</span>",
                    "time": null
                },
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">Multiple sources are fine too, would appreciate if you can share them.</span>",
                    "time": null
                }
            ]
        }
    ]
}