{
    "title": "Function Pointer Assembly Calculations",
    "link": "https://reverseengineering.stackexchange.com/questions/16716/function-pointer-assembly-calculations",
    "content": "I am reverse engineering a binary in IDA Pro and I came across the function <pre><code>sub_8048FB6</code></pre> which I think provides the address to a function pointer. The decompilation of the subroutine is as follows and I'm trying to find <pre><code>result</code></pre>.\n<pre><code>int __cdecl sub_8048FB6(int a1)\n{\n  int result; // eax\n  int v2; // [esp+0h] [ebp-10h]\n  int v3; // [esp+4h] [ebp-Ch]\n\n  v2 = *(_DWORD *)dword_804C0D4;\n  v3 = *(_DWORD *)(8 * a1 + 4 + *(_DWORD *)dword_804C0D4);\n  if ( a1 & 1 )\n    result = *(_DWORD *)(8 * a1 + v2) - v3;\n  else\n    result = *(_DWORD *)(*(_DWORD *)(8 * a1 + v2) - v3);\n  return result;\n}\n</code></pre>\nThe <pre><code>dword_804C0D4</code></pre> variable I will guess is pointing to a memory location and is only referenced 2 times in the binary as follows:\n<pre><code>Up  r   sub_8048FB6+6   mov     eax, ds:dword_804C0D4\nUp  w   sub_804A24E+3   mov     ds:dword_804C0D4, offset unk_804C0B8\n</code></pre>\nSo, my guess is the offset to the variable <pre><code>unk_804C0B8</code></pre> is the value which is in the address pointed by <pre><code>ds:dword_804C0D4</code></pre>. If that's the case, with respect to where is the offset calculated? Once I double-click on <pre><code>unk_804C0B8</code></pre> I get:\n<pre><code>LOAD:0804C0B8 unk_804C0B8     db 0E8h   ; DATA XREF: sub_804A24E+3↑o\nLOAD:0804C0B9                 db 0FFh\nLOAD:0804C0BA                 db 0FFh\nLOAD:0804C0BB                 db  8Bh\nLOAD:0804C0BC                 db  85h\nLOAD:0804C0BD                 db  68h ; h\nLOAD:0804C0BE                 db 0BFh\nLOAD:0804C0BF                 db 0FBh\nLOAD:0804C0C0                 db 0FFh\nLOAD:0804C0C1                 db  89h\nLOAD:0804C0C2                 db 0C2h\nLOAD:0804C0C3                 db 0B8h\nLOAD:0804C0C4                 db    0\nLOAD:0804C0C5                 db    0\nLOAD:0804C0C6                 db    0\nLOAD:0804C0C7                 db    0\nLOAD:0804C0C8 dword_804C0C8   dd 0FFEB0EE8h   ; DATA XREF: sub_8049D1E+2B1↑r\n</code></pre>\nBut I don't know how to read the value with all those <pre><code>db</code></pre>s. What is the size of <pre><code>offset unk_804C0B8</code></pre> and it's value? Am I proceeding correctly?\n",
    "votes": "3",
    "answers": 1,
    "views": "843",
    "tags": [
        "ida",
        "pointer"
    ],
    "user": "Newbie",
    "time": "Nov 5, 2017 at 19:50",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "did you try changing <pre><code>804C0B8</code></pre> to code?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>mov     ds:dword_804C0D4, offset unk_804C0B8\n</code></pre>\nso if this instruction was executed first before the sub was called then\n0x804c0d4 would contain 0x804c0b8\nv2 = *(_DWORD *)dword_804C0D4;\nso v2 would be 0x804c0b8\nassuming int a1 == 0\n<pre><code>v3 = *(_DWORD *)(8 * a1 + 4 + *(_DWORD *)dword_804C0D4);\n</code></pre>\nv3 would be  ((8 * 0) + 4 + 0x804c0b8) == (0 + 4 +0x804c0b8)  == *(0x804c0bc) ==  0xfbbf6885\n<pre><code>                              db  85h\nLOAD:0804C0BD                 db  68h ; h\nLOAD:0804C0BE                 db 0BFh\nLOAD:0804C0BF                 db 0FBh\n</code></pre>\nto define a dword you can press d two times at 0x804c0bc\nsince a1 was assumed to be 0 the if clause is not satisfied\nand the execution moves to else clause\n<pre><code>result = *(_DWORD *)(*(_DWORD *)(8 * a1 + v2) - v3);\n</code></pre>\n**(8*0 + 0x804c0b8) == **(0x804c0b8) ==  *0x8bffffe8\n<pre><code>LOAD:0804C0B8 unk_804C0B8     db 0E8h   ; DATA XREF: sub_804A24E+3↑o\nLOAD:0804C0B9                 db 0FFh\nLOAD:0804C0BA                 db 0FFh\nLOAD:0804C0BB                 db  8Bh\n</code></pre>\nyou don't show what is at 8bffffe8\nresult should be what is at 8bffffe8 - 0xfbbf6885\nedit\nincase a1 == 1 then it appears you have a NULL pointer\nso you should reverse some thing else first which moves some data to\n0x804c0c4\n",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">Thanks for the clear response @blabb. The thing we didn't notice was that the code segments are all LOAD. It seems the binary is somehow broken. I'm trying to fix it. Playing around with readelf, but don't know how to use it...</span>",
                    "time": null
                }
            ]
        }
    ]
}