{
    "title": "Android (4.4+) SSL wireless sniffing without certificate changing",
    "link": "https://reverseengineering.stackexchange.com/questions/11431/android-4-4-ssl-wireless-sniffing-without-certificate-changing",
    "content": "I wish to analyze the unencrypted data sent of SSL by an Android APK that uses certificate pinning.\nThis suspicious APK is used to configure a wireless device.  \nI need to determine two things:  \n\nFirst, the WPA key the APK establishes with the device\nThen, the sequence of HTTPS API calls that the APK uses to configure the\ndevice.\n\nThe configuration process is:  \n\nDownload obfuscated APK from company site\nCreate account on their servers,  \nThe APK then connects to the device SSID with a private WPA key   \nThere is a native .so that does some calculation of the key\n\nThe HTTPS sessions to the Internet server use a fixed certificate, attempting to proxy results in a certificate error.\nIdeally I would like to use an emulation environment, and hook the library calls (similar to what \"Droidbox\" appeared to do), but I can't find a more recent version.\n",
    "votes": "3",
    "answers": 3,
    "views": "1k",
    "tags": [
        "android",
        "apk",
        "https-protocol"
    ],
    "user": "Just Asking",
    "time": "Feb 2, 2016 at 15:28",
    "comments": [],
    "answers_data": [
        {
            "content": "iSEC Partner's Android SSL TrustKiller utilizes hooks that Cydia substrate can provide in order to defeat certificate pinning.\n",
            "votes": "2",
            "user": "Coeus",
            "time": "Feb 2, 2016 at 14:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "43.52.4D.",
                    "text": "<span class=\"comment-copy\">I would be eternally grateful if you shared details about how you got it to work for you? I've tried using Android SSL TrustKiller with Cydia substrate on both the Genymotion virtual machine, and the default Android virtual machine, and I've also tried with different versions of android, and even my physical phone, but I continue to ONLY pick up traffic from apps that don't use Certificate pinning. Please share what setup you are using?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "(Copy of an answer I gave on Stack Overflow)\nYou could try injecting code into the Android app to sniff and dump SSL traffic. Take a look at https://github.com/5alt/ssl_logger (5alt's fork works with Android). Note that you need root for this.\nThis works by hooking functions inside OpenSSL so that the raw traffic can be dumped before encryption/after decryption.\nYou have to install Frida Android server: https://www.frida.re/docs/android/\n\nConnect phone with USB debugging on\nDownload <pre><code>frida-server</code></pre> for the right CPU architecture from  https://github.com/frida/frida/releases\n\nTo know which CPU architecture your device is using (for getting the right download), you can run <pre><code>getprop ro.product.cpu.abi</code></pre> on the phone.\n\nPush to <pre><code>/data/local/tmp</code></pre> of Android (as root), make executable (<pre><code>chmod 755</code></pre>).\nRun <pre><code>/data/local/tmp/frida-server</code></pre> on the phone.\nOn your computer, install <pre><code>frida-tools</code></pre> using <pre><code>pip install --user frida-tools</code></pre>. (Must be Python2, not Python3!)\nList processes to see if everything works, by running <pre><code>frida-ps -U</code></pre> on your computer with the phone connected\nForward Frida's ports: <pre><code>adb forward tcp:27042 tcp:27042; adb forward tcp:27043 tcp:27043</code></pre>\nGet <pre><code>ssl_logger</code></pre> on your computer\nRun <pre><code>python ssl_logger.py -pcap log.pcap -remote com.android.package.name</code></pre> on your computer. (Note that <pre><code>-remote</code></pre> is not explained in the readme, but it's necessary!.)\n\n\nYou can add <pre><code>-verbose</code></pre> to see live traffic output.\nLet it run until you are done, quit with Ctrl+C. You then have a file <pre><code>log.pcap</code></pre> which you can analyze in Wireshark.\nNote: In case you are getting a JavaScript error, you have to edit <pre><code>ssl_logger.py</code></pre> and insert a line with <pre><code>var addresses, SSL_get_fd, SSL_get_session, SSL_SESSION_get_id, getpeername, getsockname;</code></pre> before the line with <pre><code>function initializeGlobals</code></pre>.\n\n\nTutorials for using Frida on Android:  https://11x256.github.io/\n",
            "votes": "2",
            "user": "CherryDT",
            "time": "Mar 8, 2020 at 20:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "For sniffing https calls I use Charles proxy, when you install Charles certifiate on the device you'll be able to sniff whole apk<->server traffic.\n",
            "votes": "0",
            "user": "perror",
            "time": "Jan 26, 2016 at 12:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">The question specifically mentions that the certificate is pinned, so this will not work.</span>",
                    "time": null
                }
            ]
        }
    ]
}