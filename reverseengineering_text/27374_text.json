{
    "title": "Finding which binary (library, driver, etc) caused an event log",
    "link": "https://reverseengineering.stackexchange.com/questions/27374/finding-which-binary-library-driver-etc-caused-an-event-log",
    "content": "I found some events in the Windows Event Log, and I was wondering which binary caused them.\nThe event I am curious about is Event ID 27 from Hyper-V\n\nHyper-V launch failed; the Hyper-V boot loader was unable to allocate sufficient resources to perform the launch.\n\nAny ideas on how to track which binary was in charge of emitting that event? I want to understand what resource is the one failing.\n",
    "votes": "1",
    "answers": 0,
    "views": "81",
    "tags": [
        "windows-10",
        "hypervisor"
    ],
    "user": "Marco",
    "time": "Apr 1, 2021 at 18:23",
    "comments": [
        {
            "user": "jmcarter9t",
            "text": "1) If this were a linux program, I would run it with <pre><code>strace</code></pre> and search for libraries associated (your code likely load those dynamically) with the file descriptor that writes THIS PARTICULAR log message. There is something here related to <pre><code>strace</code></pre> equivalentes on windows (stackoverflow.com/questions/864839/â€¦). Sysinternals is probably the place to start.  2) If you have source, you could search for <pre><code>HV_EVENTLOG_BAL_INSUFFICIENT_RESOURCES</code></pre> in a source file.\n",
            "time": null
        },
        {
            "user": "Marco",
            "text": "One of the problems is that I don't even know which binary is causing the event to be fired, and this happens early in boot, so I don't think strace would be of much help. I am thinking of remotely attaching WinDBG an check if I can see something from there\n",
            "time": null
        },
        {
            "user": "jmcarter9t",
            "text": "So you are doing process forensics on the windows boot-up process? Guess I didn't think deeply enough about the \"boot loader\" part of the message. Not an easy route, but you could emulate the system in Qemu (qemu.readthedocs.io/en/latest/system/gdb.html), halt it early in the boot with the monitor, attach GDB and do some forensics.  More complex would be using Panda (github.com/panda-re/panda).\n",
            "time": null
        }
    ],
    "answers_data": []
}