{
    "title": "idapython find functions that contain a loop",
    "link": "https://reverseengineering.stackexchange.com/questions/6175/idapython-find-functions-that-contain-a-loop",
    "content": "How can I color functions that contain loops in IDApython ?\nIf the end of the basic block can jump to start of basic block it's good enough, even in the rare case this is not a loop. But how do i implement this ?\nEDIT: This is not good cause the loop can span multiple basic blocks. \nOr, maybe if the <pre><code>ecx</code></pre> register is used ? I don't care if I have some false positives ?\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "idapython"
    ],
    "user": "Vision",
    "time": "Sep 5, 2014 at 6:30",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "Maybe searching for code xref where  frm > to  will find you already a narrow enough set of possible targets\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "You may find this quesion useful. It is about finding recursive calls using IDA. Both answers are awesome.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is an IDA plugin called Loop Detection that does that, it comes with source code and a paper explaining how it works. Have a look at <pre><code>loop_detection.cpp</code></pre> and refer to the paper for an explanation of how it works.\nPlugin with source code : http://www.openrce.org/downloads/details/9/Loop_Detection\nPaper: http://www.uninformed.org/?v=1&a=2&t=pdf\nLooking for uses of <pre><code>ecx</code></pre> is not a good approach as this register is often used for other purposes. A better approach is to look for back edges between blocks.\n",
            "votes": "7",
            "user": "ekse",
            "time": "Sep 5, 2014 at 19:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}