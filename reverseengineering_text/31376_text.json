{
    "title": "What was the original math operation after optimizing compiler?",
    "link": "https://reverseengineering.stackexchange.com/questions/31376/what-was-the-original-math-operation-after-optimizing-compiler",
    "content": "I'm pretty sure that original code was much simpler:\n<pre><code>(((x + 16) >> 31) ^ abs(x + 16) & 3) + 4 * ((y + 16) % 4) - ((x + 16) >> 31)\n</code></pre>\nLooks like division with remainder... Any ideas what this could be?\nThe code was compiled with Visual Studio 6.0.\n",
    "votes": "1",
    "answers": 1,
    "views": "85",
    "tags": [
        "ida",
        "assembly",
        "c",
        "math",
        "compiler-optimization"
    ],
    "user": "mastermind",
    "time": "Jan 9, 2023 at 16:46",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "I don't think the high order code could be simpler, it's isolating the highest bit in a 32 bit value. I can't think of any standard mathematical reason to xor the highest bit with the lowest 2 bits after adding 16.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I should have attached disassembler listing:\n<pre><code>.text:004486EA 02C                 mov     eax, [ebp+arg_4]\n.text:004486ED 02C                 add     eax, 10h\n.text:004486F0 02C                 cdq\n.text:004486F1 02C                 xor     eax, edx\n.text:004486F3 02C                 sub     eax, edx\n.text:004486F5 02C                 and     eax, 3\n.text:004486F8 02C                 xor     eax, edx\n.text:004486FA 02C                 sub     eax, edx\n.text:004486FC 02C                 lea     ecx, ds:0[eax*4]\n.text:00448703 02C                 mov     eax, [ebp+arg_0]\n.text:00448706 02C                 add     eax, 10h\n.text:00448709 02C                 cdq\n.text:0044870A 02C                 xor     eax, edx\n.text:0044870C 02C                 sub     eax, edx\n.text:0044870E 02C                 and     eax, 3\n.text:00448711 02C                 xor     eax, edx\n.text:00448713 02C                 sub     ecx, edx\n.text:00448715 02C                 add     ecx, eax\n.text:00448717 02C                 mov     dword_524CEC, ecx\n</code></pre>\nThe right answer is:\n<pre><code>(x + 16) % 4 + 4 * ((y + 16) % 4)\n</code></pre>\nIt gets obvious if you assume positive x and y.\nUsually IDA Pro detects such cases, but I think last two instructions were confusing for the analyzer.\n",
            "votes": "0",
            "user": "mastermind",
            "time": "Jan 10, 2023 at 14:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}