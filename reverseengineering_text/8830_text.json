{
    "title": "Expressing trace semantics as a solution for a fixpoint equation",
    "link": "https://reverseengineering.stackexchange.com/questions/8830/expressing-trace-semantics-as-a-solution-for-a-fixpoint-equation",
    "content": "I was reading through the chapter on Obfuscation in \"Practical Reverse Engineering\" I encountered the following statement.\n\nWhere X is the set of execution traces (finite and infinite), you can\n  express the trace semantics as the least solution (for the\n  computational partial ordering) of a fixpoint equation X = F( X).\n\nCould someone explain what that means in simple terms? If you could point me towards any resources for further reading and learning, that'd be great too.\n",
    "votes": "3",
    "answers": 1,
    "views": "115",
    "tags": [
        "obfuscation",
        "program-analysis"
    ],
    "user": null,
    "time": "May 6, 2015 at 19:52",
    "comments": [],
    "answers_data": [
        {
            "content": "You may consult pages 39-41 in the thesis \n\n\"Code Obfuscation and Malware Detection by Abstract Interpretation\"\n\nof M. Dalla Preda about formal obfuscation; or sections 4.4 and 4.5 in the orignal paper \n\n\"Systematic Design of Program Transformation Frameworks by Abstract\n  Interpretation\"\n\nof Cousot and Cousot.\nThe theory is formal and requires much more technical details than the following interpretation, but the idea is that:\nThe \"finite trace\" semantics of a program <pre><code>P</code></pre> is defined by the set of all finite traces of <pre><code>P</code></pre>. A trace is nothing but a finite sequence of states of <pre><code>P</code></pre>, obtained when running <pre><code>P</code></pre>, step-by-step over \"commands\" of <pre><code>P</code></pre>. \n(You may note that, from a state, we can get a set of possible next states, because the command at this state can be nondeterministic: it can receive some value from environment).\nTo calculate the finite trace semantics of <pre><code>P</code></pre>, one way (which one is refered in your book) is to use a function <pre><code>F</code></pre> defined from FinSeqs to FinSeqs:\n<pre><code>F : FinSeq -> FinSeq\n</code></pre>\nwhere <pre><code>FinSeqs</code></pre> is the set of all \"sub-set of finite sequences of states of <pre><code>P</code></pre>\" (you may think that each sub-set is a possible value for the \"finite trace\" semantics of <pre><code>P</code></pre>). \nThis function <pre><code>F</code></pre> map a sub-set <pre><code>X</code></pre> to a sub-set <pre><code>X'</code></pre> so that each trace <pre><code>x'</code></pre> of <pre><code>X'</code></pre> has a trace <pre><code>x</code></pre> of <pre><code>X</code></pre> as suffix (that is the reason why it is called \"backward\" in the paper of Cousot and Cousot). Particularly, we have that\n<pre><code>x' = sj . x\nx = si . x1\n</code></pre>\nand <pre><code>sj</code></pre> must be able to be a next state of <pre><code>si</code></pre>. The least fixpoint of the function <pre><code>F</code></pre>, namely some set <pre><code>Xp</code></pre> so that\n<pre><code>F(Xp) = Xp\n</code></pre>\nis called the trace semantics of <pre><code>P</code></pre>.\n",
            "votes": "1",
            "user": "Ta Thanh Dinh",
            "time": "May 7, 2015 at 0:52",
            "is_accepted": true,
            "comments": []
        }
    ]
}