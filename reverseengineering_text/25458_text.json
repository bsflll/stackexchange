{
    "title": "Can I reverse engineer a DLL file and add SEH or some error handing codes to it?",
    "link": "https://reverseengineering.stackexchange.com/questions/25458/can-i-reverse-engineer-a-dll-file-and-add-seh-or-some-error-handing-codes-to-it",
    "content": "I am using some DLL files in my Java application using JNI library.\nThe dlls are not written by me and I do not have access to their source codes. They are so buggy and throw lots of exceptions. Needless to say that they are making my java application unstable since unhandled exceptions in native side crash the java application.\nI was thinking to reverse engineer the dll files and add some <pre><code>try</code></pre> and <pre><code>catch</code></pre> clause there or maybe just find the culprit line and add some prevention there.\nThe exceptions are mainly due to dereferencing a null pointer which I believe I can fix them by a couple of instructions (<pre><code>cmp</code></pre> and <pre><code>jmp</code></pre>)\nSo what I am trying to ask are as follow:\n\nIs it practically doable?\nIs IDA the right tool to do so?\n\nEdit :\nAnother solution that I am guessing could fix the problem is to write a new native class and wrap all native functions that i am using in the new functions with error handling. But I have a lot of native functions and this solution could be tedious and cumbersome. So, still, reverse engineering DLLs is my number one solution. Comments are really welcome. Please share your views.\n",
    "votes": "0",
    "answers": 0,
    "views": "283",
    "tags": [
        "ida",
        "dll",
        "patch-reversing",
        "seh"
    ],
    "user": "Iman Rosstin",
    "time": "Jul 9, 2020 at 14:37",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Actually what you want could easily be done by writing your own DLL, simply making sure that the respective functions follow the same calling conventions and have the same prototypes (which can be deduced from the Java side of things) use that own DLL and make that load the third-party DLL and pass all calls through - but guarded. However, be warned that this will merely hide the problems, not fix them (neither would your desired solution, though).\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "The number of native functions correlates obviously with the details of your JNI interface. And that alone should make it relatively straightforward to come up with all necessary prototypes to wrap. No reverse engineering in the stricter sense required. If you want to patch the other DLL in-memory, that's also possible and that would of course require some RCE ... or at least debugging at assembly level.\n",
            "time": null
        },
        {
            "user": "Iman Rosstin",
            "text": "@0xC0000022L Thanks, I think I should go with writing a new wrapper dll. And I am going to take a look at RCE, as I donâ€™t know what it is :)\n",
            "time": null
        }
    ],
    "answers_data": []
}