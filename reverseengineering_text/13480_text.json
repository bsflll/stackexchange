{
    "title": "How can I force-update IDA's action_handler_t object's state?",
    "link": "https://reverseengineering.stackexchange.com/questions/13480/how-can-i-force-update-idas-action-handler-t-objects-state",
    "content": "context about <pre><code>action_handler_t</code></pre>\nIDA provides multiple features and APIs to extend and enhance it's usability, one of those features is the creation of user defined <pre><code>action_handler_t</code></pre> objects by inheriting <pre><code>idaapi.action_handler_t</code></pre> in IDAPython.\nThe feature involves several APIs, but one of the requirements is having a class that inherits said <pre><code>idaapi.action_handler_t</code></pre> class and implements two methods. One of those methods is <pre><code>update(self, ctx)</code></pre> (the other being <pre><code>activate(self, ctx)</code></pre>).\nDuring an IDA application's lifetime, the <pre><code>update</code></pre> method will be called multiple times on certain events (startup, a new IDB being loaded, focus shifts to another form, etc). Updates then communicates back wether the action should be enabled or disabled and when to query again by issuing another call to <pre><code>update</code></pre>.\nOne of those events is an action's <pre><code>activation</code></pre> call returns. The motivation is that actions performed as a result of an action being activated might potentially change the state of that same action or other actions.\nactual question\nWhile using IDA and certain Qt signals/slots abilities, I've created an <pre><code>activation</code></pre> method that returns immediately and schedules most of its login to other slots, and I'm now losing the \"post-activation\" <pre><code>update</code></pre> call that makes actions respond to overall state changes and change their own state (from disabled to enabled and vise versa).\nMy question is, how can I force an <pre><code>update</code></pre> call by IDA's kernel to all existing actions so that when my delayed code finishes it could manually tell IDA it should call <pre><code>update</code></pre> for all actions to query for their new state?\n",
    "votes": "1",
    "answers": 1,
    "views": "833",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk"
    ],
    "user": "NirIzr",
    "time": "Sep 10, 2016 at 21:45",
    "comments": [],
    "answers_data": [
        {
            "content": "The <pre><code>update</code></pre> methods of actions are usually called when the relevant GUI components (usually various IDA views) are refreshed. To make things speedier, IDA avoids refreshing views until such a refresh is required.\nWhen scripting IDA, we often make changes without touching the GUI, so IDA has no way of telling when a change is done and it should refresh. To solve this, we can use the <pre><code>idaapi.request_refresh(mask)</code></pre> function:\n<pre><code>idaapi.request_refresh(0xFFFFFFFF)  # IWID_ALL\n</code></pre>\nTo refresh a specific view, use a mask made of the following constants (documented here):\n<pre><code>#define IWID_EXPORTS  (1u << BWN_EXPORTS) ///< exports           (0)\n#define IWID_IMPORTS  (1u << BWN_IMPORTS) ///< imports           (1)\n#define IWID_NAMES    (1u << BWN_NAMES  ) ///< names             (2)\n#define IWID_FUNCS    (1u << BWN_FUNCS  ) ///< functions         (3)\n#define IWID_STRINGS  (1u << BWN_STRINGS) ///< strings           (4)\n#define IWID_SEGS     (1u << BWN_SEGS   ) ///< segments          (5)\n#define IWID_SEGREGS  (1u << BWN_SEGREGS) ///< segment registers (6)\n#define IWID_SELS     (1u << BWN_SELS   ) ///< selectors         (7)\n#define IWID_SIGNS    (1u << BWN_SIGNS  ) ///< signatures        (8)\n#define IWID_TILS     (1u << BWN_TILS   ) ///< type libraries    (9)\n#define IWID_LOCTYPS  (1u << BWN_LOCTYPS) ///< local types       (10)\n#define IWID_CALLS    (1u << BWN_CALLS  ) ///< function calls    (11)\n#define IWID_PROBS    (1u << BWN_PROBS  ) ///< problems          (12)\n#define IWID_BPTS     (1u << BWN_BPTS   ) ///< breakpoints       (13)\n#define IWID_THREADS  (1u << BWN_THREADS) ///< threads           (14)\n#define IWID_MODULES  (1u << BWN_MODULES) ///< modules           (15)\n#define IWID_TRACE    (1u << BWN_TRACE  ) ///< trace view        (16)\n#define IWID_STACK    (1u << BWN_STACK  ) ///< call stack        (17)\n#define IWID_XREFS    (1u << BWN_XREFS  ) ///< xrefs             (18)\n#define IWID_SEARCHS  (1u << BWN_SEARCH ) ///< search results    (19)\n#define IWID_FRAME    (1u << BWN_FRAME  ) ///< function frame    (25)\n#define IWID_NAVBAND  (1u << BWN_NAVBAND) ///< navigation band   (26)\n#define IWID_ENUMS    (1u << BWN_ENUMS  ) ///< enumerations      (27)\n#define IWID_STRUCTS  (1u << BWN_STRUCTS) ///< structures        (28)\n#define IWID_DISASMS  (1u << BWN_DISASM ) ///< disassembly views (29)\n#define IWID_DUMPS    (1u << BWN_DUMP   ) ///< hex dumps         (30)\n#define IWID_NOTEPAD  (1u << BWN_NOTEPAD) ///< notepad           (31)\n#define IWID_IDAMEMOS (IWID_DISASMS|IWID_DUMPS)\n</code></pre>\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Sep 12, 2016 at 7:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">For future reference: It turns out that for some reason this does not work when there's no IDB loaded in IDA but works when an IDB is loaded.</span>",
                    "time": null
                }
            ]
        }
    ]
}