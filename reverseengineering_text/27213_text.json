{
    "title": "How to apply complete type information from PDB for multiple images in one IDA database?",
    "link": "https://reverseengineering.stackexchange.com/questions/27213/how-to-apply-complete-type-information-from-pdb-for-multiple-images-in-one-ida-d",
    "content": "IDA is capable of loading multiple images/DLLs into the same database. In this scenario, <pre><code>ntdll.dll</code></pre> and <pre><code>kernel.dll</code></pre> have been loaded additionally to the main target <pre><code>.exe</code></pre>-file into the database. On top of that the PDB files <pre><code>ntdll.pdb</code></pre> and <pre><code>kernel.pdb</code></pre> have been loaded using <pre><code>File -> Load file -> PDB file...</code></pre> with specifying the address of the respective image base.\nIt's working quite well, e. g. all the functions and symbols are visibly and usable. Nevertheless, some type information are missing. Most importantly: correct function declarations and argument types.\nHere's what the decompiler gets me when using the approach described above for an example function <pre><code>RtlUnwindEx</code></pre>:\n<pre><code>__int64 __fastcall ntdll_RtlUnwindEx(int a1, int a2, int a3, int a4, __int64 a5, __int64 a6);\n</code></pre>\nHowever, this is how it looks like when analyzing <pre><code>ntdll.dll</code></pre> in its own database and applying the PDB accordingly:\n<pre><code>void __stdcall RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);\n</code></pre>\nWhy is IDA not correctly determining the function declaration/argument types in the multi-image database even though the information should be there?\nAdditional information:\n\nSettings under <pre><code>Options -> Compiler options</code></pre> in the multi-image database have been adjusted to match what the settings are for the single <pre><code>ntdll.dll</code></pre> database\nWorking with 64-bit images here\nThe <pre><code>Reanalyze program</code></pre> action has been executed after loading all PDB files\n",
    "votes": "1",
    "answers": 0,
    "views": "304",
    "tags": [
        "ida",
        "windows",
        "pdb"
    ],
    "user": "new_turtle",
    "time": "Mar 10, 2021 at 18:46",
    "comments": [
        {
            "user": "blabb",
            "text": "both look suspect  if it is 64bit __stdcall is not applicable are you sure you are not mixing up a 32 bit ntdll  with a 64 bit ntdll or something like that\n",
            "time": null
        },
        {
            "user": "new_turtle",
            "text": "Yeah, also saw that and was wondering as well but no, I'm loading the same file, both times as AMD64 PE file.\n",
            "time": null
        }
    ],
    "answers_data": []
}