{
    "title": "POC for appleScript injection method",
    "link": "https://reverseengineering.stackexchange.com/questions/16725/poc-for-applescript-injection-method",
    "content": "I am trying to make a POC of code injection using applescript injection technic which is used in GitHub project <pre><code>EasySIMBL</code></pre>.\nThe method also described here.\n(It's basically a huge article, just search for AppleScript at bundle injection, and you’ll get there)\nThe steps I've done : \n\nI made a bundle suffix <pre><code>osax</code></pre> file that creates a file at <pre><code>/tmp/test.txt</code></pre>. The bundle contains the following items:\n\n1.1 Info.plist:\n<pre><code><?xml version=“1.0” encoding=“UTF-8\"?>\n<!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd“>\n<plist version=“1.0”>\n<dict>\n    <key>CFBundleDevelopmentRegion</key>\n    <string>English</string>\n    <key>CFBundleExecutable</key>\n    <string>OsaxLoaded</string>\n    <key>CFBundleIdentifier</key>\n    <string>com.yourcompany.OsaxLoaded</string>\n    <key>CFBundleInfoDictionaryVersion</key>\n    <string>6.0</string>\n    <key>CFBundleName</key>\n    <string>OsaxLoaded</string>\n    <key>CFBundlePackageType</key>\n    <string>osax</string>\n    <key>CFBundleShortVersionString</key>\n    <string>1.0</string>\n    <key>CFBundleSignature</key>\n    <string>ascr</string>\n    <key>CFBundleVersion</key>\n    <string>1</string>\n    <key>OSAScriptingDefinition</key>\n    <string>app.sdef</string>\n    <key>OSAXHandlers</key>\n    <dict>\n        <key>Events</key>\n        <dict>\n            <key>OPNeopen</key>\n            <dict>\n                <key>Context</key>\n                <string>Process</string>\n                <key>Handler</key>\n                <string>InjectEventHandler</string>\n                <key>ThreadSafe</key>\n                <true/>\n            </dict>\n        </dict>\n    </dict>\n</dict>\n</plist>\n</code></pre>\n1.2 The code to be injected (<pre><code>osax</code></pre> bundle):\n<pre><code>//  main.m\n//  OsaxLoaded\n//\n//\n\n#import <Foundation/Foundation.h>\n\n__attribute__((visibility(“default”)))\nOSErr InjectEventHandler(const AppleEvent *ev, AppleEvent *reply, long refcon)\n{\n    OSErr resultCode = noErr;\n    [[NSFileManager defaultManager] createFileAtPath:@“/tmp/test.txt” contents:nil attributes:nil];\n    return resultCode;\n}\n</code></pre>\nHere's the structure of my <pre><code>osax</code></pre> bundle :\n<pre><code>sh-3.2# ls /Library/ScriptingAdditions/OsaxLoaded.osax/Contents/\nInfo.plist    MacOS        _CodeSignature\n</code></pre>\nNow I put the <pre><code>osax</code></pre> bundle at /Library/ScriptingAdditions/\nThen I wrote a templated Cocoa App (injection target) that does nothing (didn't add any additional code) \nIn addition I wrote a Mach-o that should make the app I wrote previously to load the script addition (osax bundle).\nAfter that it sends the event that corresponds to the event in info.plist and should execute the handler I wrote in the osax bundle Mach-o.\nThe injector code:\n<pre><code>//  main.m\n//  OsaxInjector\n//\n//\n\n#import <Foundation/Foundation.h>\n#import <Carbon/Carbon.h>\n#import <ScriptingBridge/ScriptingBridge.h>\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        if (argc != 2)\n        {\n            printf(“USAGE: injector pid\n”);\n            return 1;\n        }\n        TEST *test = [[TEST alloc] init];\n        pid_t pid = atoi(argv[1]);\n        SBApplication* sbApp = [SBApplication applicationWithProcessIdentifier:pid];\n        [sbApp setSendMode:kAENoReply | kAENeverInteract | kAEDontRecord];\n        [sbApp sendEvent:kASAppleScriptSuite id:kGetAEUT parameters:0];\n\n        // Inject!\n        [sbApp setSendMode:kAENoReply | kAENeverInteract | kAEDontRecord];\n        id injectReply = [sbApp sendEvent:‘OPNe’ id:‘open’ parameters:0];\n        if (injectReply != nil) {\n            NSLog(@“unexpected injectReply: %@“, injectReply);\n        }\n        [[NSProcessInfo processInfo]disableSuddenTermination];\n    }\n    return 0;\n}\n</code></pre>\nWhen tested using the pid provided by <pre><code>lsappinfo info “ToInjectApp”</code></pre>, it seems like the code wasn't injected and <pre><code>/tmp/test.txt</code></pre> wasn't created.\nany idea what I am doing wrong?\nOS Version: Sierra\n",
    "votes": "2",
    "answers": 0,
    "views": "317",
    "tags": [
        "osx",
        "injection"
    ],
    "user": "Zohar81",
    "time": "Nov 6, 2017 at 16:10",
    "comments": [],
    "answers_data": []
}