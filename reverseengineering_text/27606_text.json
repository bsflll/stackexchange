{
    "title": "convert code to python",
    "link": "https://reverseengineering.stackexchange.com/questions/27606/convert-code-to-python",
    "content": "i have snippet code that i want to convert to python to understand the types that ghidra use such <pre><code>*(byte *)</code></pre> and <pre><code>*(code *)</code></pre> and <pre><code>*(uchar *)</code></pre> etc..\nthe first code:\n<pre><code>void one(int param_1,int param_2) {\n  int local_8;\n  \n  local_8 = 0;\n  while (local_8 < param_2) {\n    *(byte *)(param_1 + local_8) = *(byte *)(param_1 + local_8) ^ 0x50;\n    local_8 = local_8 + 1;\n  }\n  return;\n}\n\nlocal_14 = 0;\nbyte local_12c [256];\nlocal_24 = strlen(param_4);\nlocal_10 = 0;\n\nwhile (local_14 < 0x100) {\n   local_12c[local_14] = (byte)local_14;\n   local_14 = local_14 + 1;\n}\nlocal_18 = 0;\nwhile (local_18 < 0x100) {\n  iVar1 = (int)param_4[local_18 % (int)local_24] + (uint)local_12c[local_18] + local_10;\n  uVar2 = (uint)(iVar1 >> 0x1f) >> 0x18;\n  local_10 = (iVar1 + uVar2 & 0xff) - uVar2;\n  swap(local_12c + local_18,local_12c + local_10);\n  local_18 = local_18 + 1;\n}\n</code></pre>\nwriting a python code for this code it will help me a lot to understand the logic that ghidra use with these kind of instructions such as <pre><code>swap(local_12c + local_18,local_12c + local_10);</code></pre> is it a number value ? how to swap a numbers without variables\n",
    "votes": "0",
    "answers": 2,
    "views": "412",
    "tags": [
        "decompilation",
        "c++",
        "ghidra",
        "python"
    ],
    "user": "K. John Michel",
    "time": "May 4, 2021 at 3:23",
    "comments": [
        {
            "user": "R4444",
            "text": "but why do you want to convert the code in python? python doesn't use explicit types\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "It looks like RC4. I think it could be cleaned up in Ghidra to get more understanding of the code\n",
            "time": null
        },
        {
            "user": "K. John Michel",
            "text": "because i want to understand the logic here @R4444\n",
            "time": null
        },
        {
            "user": "K. John Michel",
            "text": "how did you know that ? @PawełŁukasik and how ghidra can cleaned up to get more understanding of the code ?\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. So what's the question?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As Paweł Łukasik point out, it looks like RC4 indeed.\nThat's especially true for the KSA that you can immediately recognize:\n<pre><code>local_14 = 0;\n\nwhile (local_14 < 0x100) {\n     local_12c[local_14] = (byte)local_14;\n     local_14 = local_14 + 1;\n}\n</code></pre>\nIf you rename the variables by keeping in mind that this is a Key-Scheduling Algorithm, you end up with the standard RC4 KSA:\n<pre><code>SBOX[256];\ni = 0;\nwhile (i < 256) {\n     SBOX[i] = i\n     i += 1;\n}\n</code></pre>\nAfter that, the next block must be a Pseudo-random generation algorithm (PRGA):\n<pre><code>local_18 = 0;\nwhile (local_18 < 0x100) {\n     iVar1 = (int)param_4[local_18 % (int)local_24] + (uint)local_12c[local_18] + local_10;\n     uVar2 = (uint)(iVar1 >> 0x1f) >> 0x18;\n     local_10 = (iVar1 + uVar2 & 0xff) - uVar2;\n     swap(local_12c + local_18,local_12c + local_10);\n     local_18 = local_18 + 1;\n }\n</code></pre>\nOnce again, try to rename everything as if it was a RC4 PRGA:\n<pre><code>i = 0;\nj = 0;\nwhile (i < 256) {\n     iVar1 = param_4[i % len_para_4] + SBOX[i] + j;\n     uVar2 = (iVar1 >> 0x1f) >> 0x18;\n     j = (iVar1 + uVar2 & 0xff) - uVar2;\n     swap(SBOX + i ,SBOX + j);      \n     i += 1\n}\n</code></pre>\nThe 'swap' function exchange the value of SBOX[i] with the value of SBOX[j], wich is again, a standard thing in the RC4 algorithm.\nI think you now have everything to re-write this in Python if you want to. But regarding your question, this is not going to help you with the variable's types, as Python does not works that way. Keep in mind that you will probably spend more time fighting with Python's types than implementing the algorithm.\nIf you really want to re-write this, your best option is to do so in C, you'll be able to play with your pointers <pre><code>*(byte *)</code></pre> and  <pre><code>*(code *)</code></pre>, ...\nIn my opinion, you'll gain some time by simply debugging the program and inspect the values that you are curious about.\nEDIT:\nYour last question can be answered using the same method.\nYou have this block of code:\n<pre><code>local_8 = 0;\nwhile (local_8 < param_2) {\n     *(byte *)(param_1 + local_8) = *(byte *)(param_1 + local_8) ^ 0x50;\n     local_8 = local_8 + 1;\n}\n</code></pre>\nAfter cleaning up a bit, it look like:\n<pre><code>i = 0;\nwhile (i < param_2) {\n     param_1[i] = param_1[i] ^ 0x50;\n     i += 1\n}\n</code></pre>\nBasically you are passing two arguments to your function (param_1 and param_2). The fist one is an array, the second one is the length of that array. This small routine will take every bytes of your array, and xor it with 0x50, before putting it back into the original array.\n",
            "votes": "2",
            "user": "Guillaume",
            "time": "May 4, 2021 at 11:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "K. John Michel",
                    "text": "<span class=\"comment-copy\">Thank you @Guillaume , and this one <code>*(byte *)(param_1 + local_8) = *(byte *)(param_1 + local_8) ^ 0x50;</code> if i want to translate to python or any scripting langauge, how it will be ?</span>",
                    "time": null
                },
                {
                    "user": "Guillaume",
                    "text": "<span class=\"comment-copy\">Same approach, you just have to rename the variable, and you'll easily find what it does. I'll edit my initial answer, it's a pain to format code here :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are several implementations of python rc4 available in GitHub repositories\nAs Already pointed out You need to Cleanup and Rename all those local_xxx names\nin the answer above by @Guillaume it seems he is implying the Array Initialization part as KSA and the KSA as PRGA\nI don't think you have posted the PRGA in your query\nthe Array Initialization part can be done with a onliner as below\n<pre><code>S=list(range(256))  \n</code></pre>\nthe KSA in the query above contains few junk lines\nwhich can be safely removed for example right shifting a 32bit by 0x1f and then by 0x18 will always result in 0\nso substituting 0 in place of uVar2 you can see local_10 will always be iVar1 so you can simply eliminate the local_10\nand a swap in python can be a tuple exchange\nthe first function in your query is a xor exchange function\nso based on the above premise you can simply recode  in python as below\nthe code below generates two keystreams for two plaintexts\n<pre><code>def one(a,b):\n    i=0\n    while(i<b):\n        a[i] = a[i] ^ 0x50\n        i=i+1\n    return a\nprint(one([1,2,3,4,5],5),\"\n***************************\n\")\n\n\nS = list(range(256))\nprint(S[0:16])\nKey = [b\"Attack at dawn\",b\"Defend at Night\"]\nk=0\nj=0\ninLen=len(Key)\nfor k in range(0x256):\n    k=( ( k + S[j] + Key[0][j%inLen] ) % 256 )\n    S[j],S[k]=S[k],S[j] \nprint(S[0:16])\nfor k in range(0x256):\n    k=( ( k + S[j] + Key[1][j%inLen] ) % 256 )\n    S[j],S[k]=S[k],S[j] \nprint(S[0:16]) \n</code></pre>\nexecuting this you should get something like this\n<pre><code>:\\>python conv2py.py\n[81, 82, 83, 84, 85]\n***************************\n\nS_initial    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nS_for_Key[0] [104, 16, 114, 140, 4, 95, 6, 0, 89, 203, 219, 212, 25, 117, 14, 215]\nS_for_Key[1] [199, 217, 227, 209, 193, 123, 190, 75, 189, 161, 153, 168, 111, 92, 152, 203] \n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "May 4, 2021 at 19:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}