{
    "title": "What sources do you use for gaining information/intelligence about hardware products?",
    "link": "https://reverseengineering.stackexchange.com/questions/1681/what-sources-do-you-use-for-gaining-information-intelligence-about-hardware-prod",
    "content": "When reverse engineering consumer hardware products, it can often be helpful to gain as much information as possible outside of the device itself, including:\n\nService manuals \nInstallation/User manuals \nCircuit diagrams/block diagrams \nDescription of operation \nFirmware images \nAny PC-based utilities \nInternal photographs\n\nI have found the following sources useful:\n\nThe manufacturer's site, including using google site search to find \"hidden\" documents\nUsing specific google searches, e.g. limiting to PDF files and \"engineers code\"\nUsing google searches to find open directories (\"Parent directory\" finds these) containing manuals and other documentation\nUsing the FCC database to find test results.\nFinding any relevant patents\n\nAre there any other useful sources for finding out such information?\n",
    "votes": "12",
    "answers": 2,
    "views": "660",
    "tags": [
        "hardware"
    ],
    "user": "Cybergibbons",
    "time": "Apr 9, 2013 at 12:14",
    "comments": [
        {
            "user": "Cybergibbons",
            "text": "This might be a bit vague. I thought I would try it and see what the community thought.\n",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "You could separate the question and the answer into two parts. Its perfectly alright to answer your own quesion. See the FAQ if you dont believe me :)\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@Cybergibbons: rephrasing my question: is this only about electronic hardware? A car is a \"consumer hardware products\", so is a bike or a microwave oven.\n",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "No, it can be any hardware. The examples I have given only extend to electromechanical hardware though, nothing without any electronics. A lock or safe would be an example of something without electronics.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Not applicable to every device, but always worth checking if the company used any open source software in the design and look at the code provided.  Even if most of the device is proprietary, the open source code might have useful pointers towards basic hardware functionality or implementation details.  \nAn example might be a manufacturer that has customized u-boot to function with their board and included a memory map of flash in the source. \nOn the google searches front, some chip manufacturers use a very predictable document number format that can be searched for, or use certain phrases that are very uncommon elsewhere, such as \"proprietary and confidential\" on all processor datasheets. \nFinally, if a company is particularly stingy with technical details about their device, I expand my search to their business partners.  For example, a processor manufacturer identified that their products were used in Company X's products in marketing materials, even when no literature directly from Company X mentioned anything about what chip or architecture they were using.\n",
            "votes": "6",
            "user": "nopnopgoose",
            "time": "Apr 9, 2013 at 14:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">I like this answer. On the side of open source, I have found some companies are sneaky. HID Global use open source software, but charge over $100 to provide the software on a CD in the post. I am not sure of the legality of that.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Cybergibbons: ask the FSF or the <a href=\"http://www.softwarefreedom.org/\" rel=\"nofollow noreferrer\">SFLC</a> for assistance. Also depends on the license, though. I for one have been trying for over a year to get Zyxel to provide the GPL'd sources to my router's firmware. Only last month I finally got a response.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Personally my experience is pretty much limited to attempts to reverse engineer electronic hardware, so I'll limit my answer to that area as well. What I've found useful is\n\nmanufacturers aren't exactly the likeliest to provide too much useful information, but it's always worth to peak into manuals or check out their websites.\ncheck on the web, but especially on Youtube and repair sites such as ifixit.com for instructions on how to non-destructively open a device. This usually goes already a long way in gathering additional intelligence about the device.\nassuming you have firmware-upgradeable hardware (TV, router, etc.), you should check out the <pre><code>firmware-mod-kit</code></pre> and the related <pre><code>binwalk</code></pre> to see what information you can retrieve from the firmware images.\neven if you don't have a firmware, but the device you are accessing has some kind of network connectivity, you could set up a gateway with DHCP (I prefer Linux/Ubuntu for these cases) and check the ARP cache (command <pre><code>arp</code></pre>) which will tell you the MAC address (can often be matched with the one printed on packaging or the device itself) and thereby find the IPv4 address handed out to it. From there on <pre><code>nmap</code></pre>, <pre><code>netcat</code></pre>, <pre><code>telnet</code></pre> and <pre><code>tcpdump</code></pre>/<pre><code>libpcap</code></pre> are your best friends. If it's wireless you can provide an access point that logs stuff and sniffs traffic and such.\nif your device plugs into a port such as USB and you have a protocol analyzer (expensive stuff) things can get easier. But sometimes results aren't clear or you simply have no more than an oscilloscope to investigate the protocol. Beware of bus types such as PCMCIA and Thunderbolt where the device itself has access to your computer's memory and other resources. If the device is malicious it could spy on you or do other weird stuff. Or am I just too paranoid? After all you said consumer hardware :)\n\n\non that note, a \"simple USB mouse\" could also pose as USB keyboard to the computer and perhaps USB storage and the keyboard would do fancy things like enter commands and execute stuff from the storage. So never ever plug a USB key you find into one of your devices unless you have a special test machine for the purpose.\n\nolder hardware often comes with actual layouts for the PCBs etc, but rarely with an actual bill of materials. Still, it gives you some further clues. Older TV sets and those from reputable manufacturers tend to come with very detailed diagrams of their electronics where I come from.\nonce you manage to open it up the first thing you'll need in most cases is a magnifying glass ;)\n\n\nhaving that you can figure out whether there is a serial UART or JTAG (contacts labeled TDI, TDO, TCK, TMS, TRST are easy to spot) or other kind of \"breakout\" possibility. JTAG isn't too useful if you don't know enough about the hardware to safely use boundary scan (voltage etc, you could actually fry your hardware before you get to see results).\nlabels on the chips/processors usually help a lot and then checking over at your local hobbyist website for tinkering with electronic devices.\n\n\nThat's it from me. My two cents. I'm sure there are a whole lot of things that I haven't considered in my own searches, so I'm looking forward to other answers.\n\nYes, using search operators can work to your advantage, such as <pre><code>inurl</code></pre>, <pre><code>intitle</code></pre>, <pre><code>filetype</code></pre> and <pre><code>site</code></pre> on Google (e.g. <pre><code>search terms intitle:index inurl:ftp</code></pre>). Unfortunately there doesn't seem to be a standard for search operators and especially meta search engines are very weak on that front, but also Google's competitors, which is sad. There is also one caveat with search operators on Google. You can read about it in this question over on webapps.SE.\n",
            "votes": "6",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}