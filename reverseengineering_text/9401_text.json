{
    "title": "Intercepting syscall in a shared object (dynamically linked)",
    "link": "https://reverseengineering.stackexchange.com/questions/9401/intercepting-syscall-in-a-shared-object-dynamically-linked",
    "content": "Ditto. Any technique that allows to intercept sys calls issued from a shared object file? At runtime, the shared object is <pre><code>dlopen</code></pre>'ed by main().\nOne candidate is to use static binary rewriting (e.g. dyninst). But as I tried, it throws an error (saying about <pre><code>r_debugCheck()</code></pre> failed). Wondering if anyone had experiences in this task.\n",
    "votes": "0",
    "answers": 0,
    "views": "437",
    "tags": [
        "binary-analysis",
        "x86",
        "linux",
        "dynamic-linking",
        "system-call"
    ],
    "user": "Richard",
    "time": "Jul 19, 2015 at 19:45",
    "comments": [
        {
            "user": "w s",
            "text": "What about pin and frida ?\n",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "Can you name an example binary and shared object (including an exemplary syscall) from Ubuntu 14? It would help me to verify my solution before posting it.\n",
            "time": null
        },
        {
            "user": "Richard",
            "text": "@ws pin and frida are dynamic rewriting techniques which work at runtime. but OP prefers static rewriting tools...\n",
            "time": null
        },
        {
            "user": "Richard",
            "text": "@stackoverflowwww one simple example is to have a main() calling dlopen to open the shared object and call its function after dlsym. In the shared object, for instance, it calls malloc which might further call brk() and mmap(); which are what I want to intercept.\n",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "@Richard could you point me to a concrete specific binary? I tried to find one but the dynamically loaded libs of my samples did not call malloc (or any other functions calling mmap or brk). Alternatively, you could give a link to a custom-made sample (source code + a coplete command or Makefile to compile and link it.).\n",
            "time": null
        }
    ],
    "answers_data": []
}