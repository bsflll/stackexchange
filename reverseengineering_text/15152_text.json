{
    "title": "EBP + C what is that?",
    "link": "https://reverseengineering.stackexchange.com/questions/15152/ebp-c-what-is-that",
    "content": "I have this assembly code:\n<pre><code>MOV DL,BYTE PTR DS:[ECX+EAX]  --> Move the first byte of EAX to DL\nADD BYTE PTR DS:[EAX+9],DL  --> ADD the DL byte to the ninth byte at EAX\nINC ECX --> Increase ECX by one\nCMP ECX,DWORD PTR SS:[EBP+C] -- > ????\n</code></pre>\nAs you can see i understand everything except of the last line,\n<pre><code>CMP ECX,DWORD PTR SS:[EBP+C]\n</code></pre>\nWhat i can understand here is that there is a compersion between 4 bytes that comes from EBP+C to ECX\nBut i still don't understand that what is that EBP+C?\n",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "register"
    ],
    "user": "Xozu",
    "time": "Apr 13, 2017 at 6:40",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>EBP</code></pre> stands for extended base pointer keeping track of the current stackframe.\nSince the current <pre><code>ESP</code></pre> (extended stack pointer) changes frequently in functions as stuff gets pushed to and poped of the stack, the base pointer remebers the value of ESP at the beginning of the function (convention).\nFor this reason, <pre><code>EBP</code></pre> is often used to referr to arguments or local variables (depending on if you add or substract from it). Remember the stack grows downwards - so positive offsets may referr to arguments passed to the function. Wikipedia offers a great illustration of this layout below:\n",
            "votes": "4",
            "user": "Nordwald",
            "time": "Apr 13, 2017 at 7:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">That is a great explanation thank you ! @Nordwald</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "C is a hexadecimal number (12 in decimal).DWORD PTR SS:[EBP+C] should mean memory at stack segment, by address (value of EBP register + 12).\nThis <pre><code>CMP ECX,DWORD PTR SS:[EBP+C]</code></pre> means \"compare the content of ECX register with 32 bit from address [ebp + 12].\n",
            "votes": "3",
            "user": "w s",
            "time": "Apr 13, 2017 at 7:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}