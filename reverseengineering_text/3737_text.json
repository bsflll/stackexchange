{
    "title": "How to write bit-by-bit to a medium, as opposed to byte-by-byte? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3737/how-to-write-bit-by-bit-to-a-medium-as-opposed-to-byte-by-byte",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am trying to write binary opcodes, but I can't in a text editor as 1s and 0s because:\n1 or 0 on a text editor ends up being stored as the literal ASCII equivalent code on the storage medium, not the individual bit values as part of a machine instruction. I want to write a program in machine code to be executable directly to the CPU without assembling/etc. However, there's only one way I can think of:\nI can flip the conundrum backwards, and instead of worrying about the formation of bits, I can write ASCII characters and save them in a text editor so long as their ASCII-binary equivalent matches the identical configuration of an opcode byte(s) for the target machine. But then the problem arises again ... there is not an existing one-byte ASCII character that can match every possible combination of bits within an opcode, so I can't code this way.\nFor me to write in machine code, I'd need a way of directly placing the right formation of bits that make up each byte(s) and instruction(s).\nHow could I do this?\nCORRECTION: I am not trying to write a single bit at a time (not possible in x86), but get a byte configured with the correct bits in order to be stored that make up the correct machine instructions.\n",
    "votes": "1",
    "answers": 0,
    "views": "107",
    "tags": [
        "machine-code"
    ],
    "user": "Tracker Boots",
    "time": "11 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "This sounds like a development question.\n",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "Either you don't explain yourself correctly or we're being trolled.\n",
            "time": null
        },
        {
            "user": "Tracker Boots",
            "text": "@joxeankoret What am I missing? I think I explained enough - I need to formulate the bits of a byte, and wish to do so by structuring the bits manually of a byte to match that of an opcode. In a text editor this can't be done, and hex editors only allow whole bytes; I need the correct representation down to the bits.\n",
            "time": null
        },
        {
            "user": "Tracker Boots",
            "text": "@0xC0000022L It's not.\n",
            "time": null
        },
        {
            "user": "higaki",
            "text": "Since x86 opcodes all contain a whole number of bytes, you may as well use a hex editor and enter your instructions byte by byte. Entering the correct hexadecimal number will most certainly ensure \"correct representation down to the bits\".\n",
            "time": null
        }
    ],
    "answers_data": []
}