{
    "title": "How to Find All Switch Jump Tables in IDAPython",
    "link": "https://reverseengineering.stackexchange.com/questions/13358/how-to-find-all-switch-jump-tables-in-idapython",
    "content": "I'm using IDAPython on IDA 6.5 and I'm trying to get all the switch jump tables in a DLL. Mainly I'm interested in jump tables that are jumped indirectly:\n<pre><code>jmp     ds:off_65018790[ecx*4] ; switch jump\n</code></pre>\nBasically, what interests me is:\n\nThe address from where the jmp happens\nThe list of the possible locations, for example - loc_65018723, loc_65018736...\n\nI already know how to get all the jmp addresses using IDAPython, but I don't know if it's a jmp to a jump table or just a normal jmp.\nIn most cases, IDA knows to identify those jump tables, so is there a way to get that info from the API?\nThanks a lot!\n",
    "votes": "2",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "disassemblers",
        "idapro-sdk"
    ],
    "user": "Alex",
    "time": "Aug 25, 2016 at 8:27",
    "comments": [
        {
            "user": "w s",
            "text": "Unfortunately I don't have IDA 6.5 installed, but as far as I remember idaapi.get_switch_info_ex(ea) already was there. The simplest way to see reference usage of this function is searching python code with call to this function on github.\n",
            "time": null
        },
        {
            "user": "Alex",
            "text": "Thanks a lot! It was exactly what I needed. If you post it as an answer, I will mark it as answered :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Decided to add a small code snippet to show how to iterate through the .text segment, obtaining all the switch table locations and storing the jump targets in a dictionary.\n<pre><code>text_seg = idaapi.get_segm_by_name('.text')\njump_table = dict()\n\n# iterate through all items within the segment\nfor head_ea in idautils.Heads(text_seg.startEA, text_seg.endEA):\n    if idc.isCode(idc.GetFlags(head_ea)):\n        switch_info = idaapi.get_switch_info_ex(head_ea)\n        if (switch_info and switch_info.jumps != 0):\n            loc = switch_info.jumps\n            jump_table[loc] = list()\n            element_num = switch_info.get_jtable_size()\n            element_size = switch_info.get_jtable_element_size()\n            for num in range(0, element_num):\n                table_entry = loc+num*element_size\n                jump_table[loc].append(idc.GetManyBytes(table_entry), element_size)\n</code></pre>\nUpdate: To build upon this for newer versions of IDA\n<pre><code>def find_jumps(si: ida_nalt.switch_info_t) -> list:\n    jtable = []\n    e_size = si.get_jtable_element_size()\n\n    for num in range(0, si.get_jtable_size()):\n        jtable.append(int.from_bytes(ida_bytes.get_bytes(si.jumps + (num * e_size), e_size), 'little') + si.elbase)\n\n    return jtable\n\nea = 0x0000000000000000 # some ea\nsi = ida_nalt.switch_info_t()\nif (ida_nalt.get_switch_info(si, ea) is not None): # jump table\n    jtable = find_jumps(si)\n</code></pre>\nThis resolves the offsets to the with respect to <pre><code>elbase</code></pre> of the <pre><code>switch_info_t</code></pre> structure which IDA provides if <pre><code>get_switch_info</code></pre> is succesful. See: https://hex-rays.com/products/ida/support/idapython_docs/ida_nalt.html#ida_nalt.switch_info_t.elbase for more information, and cross reference this to the <pre><code>c++</code></pre> support if need-be at https://hex-rays.com/products/ida/support/sdkdoc/structswitch__info__t.html\n",
            "votes": "2",
            "user": "Supernovah",
            "time": "Nov 21, 2021 at 3:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\"><code>getnseg</code> receives a segment number, while <code>SegByName</code> returns a segment selector, these are not the same thing. Your first line is erroneous.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Additionally, using <code>idc.Dword</code> feels insecure and assumes the switch code is indeed structured the way OP described, which isn't always the case.</span>",
                    "time": null
                },
                {
                    "user": "chuazl",
                    "text": "<span class=\"comment-copy\">Thanks Nirlzr, the above snippet comes from my old script I used on ARM32 binaries to extract out jumptables in order to rewrite them. I've updated it to fix the mistakes you've pointed out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "To safely get all references from a certain <pre><code>EA</code></pre>, there's <pre><code>idc.XrefsFrom(ea, flags)</code></pre>. You'll get an iterator for cross references from a certain <pre><code>EA</code></pre> (the switch-case's branch/jump instruction). switch-cases are easy to identify as they're always with more than two cross references targets.\nAccording to this the <pre><code>flags</code></pre> parameter is one of the following:\n\nXREF_USER = 32\n  XREF_TAIL = 64\n  XREF_BASE = 128\n  XREF_MASK = 31\n  XREF_PASTEND = 256\n  XREF_ALL = 0\n  XREF_FAR = 1\n  XREF_DATA = 2\n\nThe object you'll get from each iteration is an <pre><code>ida_xref</code></pre> object, exposing the following attributes:\n\n<pre><code>frm</code></pre> - The source of the cross reference, the code that performs the jump in our case.\n<pre><code>to</code></pre> - The target of the cross reference, the code that will be executed according to the jump table selector in our case.\n<pre><code>iscode</code></pre> - Boolean, <pre><code>True</code></pre> if cross reference is a code cross reference, must be <pre><code>True</code></pre> in our case.\n<pre><code>type</code></pre> - One of the available type values, see below. You could use <pre><code>idautils.XrefTypeName(typecode)</code></pre> to translate the integer you get here to a readable string.\n<pre><code>user</code></pre> - Boolean, True if this cross reference was created by the user, opposed to being automatically created by IDA.\n\nThe valid cross reference types are, according to this:\n\nref_types = {\n   0  : 'Data_Unknown',\n   1  : 'Data_Offset',\n   2  : 'Data_Write',\n   3  : 'Data_Read',\n   4  : 'Data_Text',\n   5  : 'Data_Informational',\n   16 : 'Code_Far_Call',\n   17 : 'Code_Near_Call',\n   18 : 'Code_Far_Jump',\n   19 : 'Code_Near_Jump',\n   20 : 'Code_User',\n   21 : 'Ordinary_Flow'\n  }\n",
            "votes": "0",
            "user": "NirIzr",
            "time": "Sep 9, 2016 at 11:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}