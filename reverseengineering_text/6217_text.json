{
    "title": "Detecting SSDT and inline hooks in kernel",
    "link": "https://reverseengineering.stackexchange.com/questions/6217/detecting-ssdt-and-inline-hooks-in-kernel",
    "content": "I did a simple SSDT Hooks detector that iterates through all entries and checks if any address is outside the Kernel module. If so, I can even go back and using the <pre><code>syscall</code></pre> find out what function was supposed to be there. \nI suppose that at this point I could also try to undo the hook, but I haven't tried yet. \nI use <pre><code>ZwQuerySystemInformation</code></pre> to get a list of modules and I always assume that the first module is the kernel. \nHow safe is this approach? Is there a chance that the kernel module would not be the first? I could search by name, but it's not always the same so I tried to avoid that; I can make it to search for one of the names the kernel module could have. \nI also need that list to see from what module comes the hook.\nIs there a way that I can get a list of the loaded modules without <pre><code>ZwQuerySystemInformation</code></pre>? It can hide information from me if it is hooked. \nRegarding inline hooks, right now I iterate through all the exports from the kernel module and check each function's code to see if it begins with a relative jump or a push offset & ret. Should I also check if the address to which the jump / ret is made is outside the kernel module or it's redundant? \nIf I don't check for the jump address I get a false positive (I think) for <pre><code>KePollFreezeExecution</code></pre> which jumps inside the kernel module.\nu <pre><code>nt!KePollFreezeExecution</code></pre> in WinDbg gives the following output\n<pre><code>jmp nt!KeIpiGenericCall+0x132\nint 3\n</code></pre>\nSeems ok. \nI know this isn't perfect (someone could place the hook anywhere inside the function code or maybe find a place inside the kernel module where to put his functions and so on), but I'm just doing it to understand how all of this works.\nAlso, I'm aware that on x64 this methods won't be so simple to implement, but at the moment I'm experimenting with x86. \nMore of a \"how should I approach this\" question than \"how should I code this\".\n",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "kernel-mode",
        "function-hooking"
    ],
    "user": "user3002428",
    "time": "Sep 10, 2014 at 15:44",
    "comments": [
        {
            "user": "0xec",
            "text": "See this and this\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Whether it's outside the kernel module is only going to catch the simplest hook methods. Like every PE file when loaded into memory the NT kernel will have \"gaps\". Basically the remainder of a section up to its logical size or even just when functions are aligned with more than necessary NOPs. Those gaps can be (ab)used to store the trampolines and your detection code won't even consider them hooks.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If your looking for SSDT hooking with WinDbg, have tried the SwishDbgExt.dll?\nHere is the link to the author's page - http://www.msuiche.net/2014/07/16/thats-so-swish\nUpdate: http://www.msuiche.net/2014/08/19/swishdbgext-update-0-6-20140817/\nEdited (07/01/2020): you can find the project on GitHub\n",
            "votes": "3",
            "user": "Yennefer",
            "time": "Jan 7, 2020 at 21:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}