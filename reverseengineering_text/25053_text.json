{
    "title": "What steps needed to decode a Base64 binary? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/25053/what-steps-needed-to-decode-a-base64-binary",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 4 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI tried to decode it by Base64 but still didn't understand the result\n<pre><code>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\n</code></pre>\n",
    "votes": "-2",
    "answers": 1,
    "views": "112",
    "tags": [
        "disassembly"
    ],
    "user": "Mark Ayala",
    "time": "4 years ago",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "What is the binary, where did you get it?\n",
            "time": null
        },
        {
            "user": "ismael_akez",
            "text": "Its not even a shellcode.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The data you give - whatever it is - doesn't comply to Base32.\nThe following script decodes your encoded string with Python3.\n<pre><code>!/usr/bin/env python3\n\nimport base64\n\nencoded = \"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\"\n\nwith open(\"test.bin\", \"wb\") as f:\n    f.write(base64.b64decode(\n        encoded\n        ))\n</code></pre>\n... simply replace <pre><code>base64.b64decode</code></pre> by a call to <pre><code>base64.b32decode</code></pre> and you'll get an error:\n<pre><code>  File \"/usr/lib/python3.6/base64.py\", line 205, in b32decode\n    raise binascii.Error('Incorrect padding')\nbinascii.Error: Incorrect padding\n</code></pre>\nLong story short: it seems to be Base64-encoded data.\n<pre><code>$ file test.bin \ntest.bin: data\n</code></pre>\n... oh and one more fact corroborates this. If we insert the following line before the <pre><code>with</code></pre> but after the assignment to <pre><code>encoded</code></pre>:\n<pre><code>print(len(set(x for x in encoded)))\n</code></pre>\n... we get <pre><code>64</code></pre> as output. So 64 distinct characters were used in the string.\nUploading the file to VirusTotal yields nothing either. Usually these antimalware engines are fairly good at detecting even esoteric file types.\nSo if you want to know what sort of data that might be you should perhaps add more context into your question or ask a new one.\n",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "May 18, 2020 at 16:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}