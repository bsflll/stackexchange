{
    "title": "Understand a function within Hermes byte code",
    "link": "https://reverseengineering.stackexchange.com/questions/30554/understand-a-function-within-hermes-byte-code",
    "content": "The Android app I am looking at uses React Native with the Hermes JS Engine. This generates a <pre><code>index.android.bundle</code></pre> binary that contains Hermes JS bytecode.\nI was able to disassemble the binary file using hbctool and came across a function that I would like to learn more about e.g. <pre><code>getSecretData</code></pre>\n<pre><code>CreateClosure           Reg8:1, Reg8:1, UInt16:9784\nPutById                 Reg8:2, Reg8:1, UInt8:3, UInt16:25656\n; Oper[3]: String(25656) 'getSecretData'\n</code></pre>\nThis function doesn't appear in any of the <pre><code>*.so</code></pre> files placed in the APK lib folder as I checked with a simple <pre><code>nm</code></pre> command:\n<pre><code>for FILE in *.so; do nm -D $FILE | grep secret; done\n</code></pre>\nUsing frida to list all the Java classes just lists the ones I already have access to via the <pre><code>classes.dex</code></pre> file:\n<pre><code>Java.enumerateLoadedClasses({\n    onMatch: function(className) {\n        console.log(className);\n    },\n    onComplete: function() {}\n});\n</code></pre>\nThere is talk of a \"show source\" directive that has been added to Hermes compiler so I am not sure if this is something that can be injected in.\nAny help on how I can explore further will be greatly appreciated.\n",
    "votes": "4",
    "answers": 0,
    "views": "1k",
    "tags": [
        "decompilation",
        "android",
        "byte-code"
    ],
    "user": "A Dark Divided Gem",
    "time": "Jun 25, 2022 at 14:50",
    "comments": [],
    "answers_data": []
}