{
    "title": "Ghidra Shows Structure Strange",
    "link": "https://reverseengineering.stackexchange.com/questions/31616/ghidra-shows-structure-strange",
    "content": "I am new to assembly. When I was disassembling some code, I encounter some strange instruction here. The instruction shows that (RBP + -0x40) is equal to local_48, however at the beginning of the code, we can see that (RBP + -0x48) is equal to local_48. Also, I know that this is a struct. Is there something wrong here or am I looking at it wrong?\nThe instruction I was talking about:\n\nAnd the beginning of the code:\n",
    "votes": "2",
    "answers": 1,
    "views": "160",
    "tags": [
        "assembly",
        "x86",
        "ghidra"
    ],
    "user": "Pytai",
    "time": "Mar 2, 2023 at 22:41",
    "comments": [],
    "answers_data": [
        {
            "content": "Without seeing the full function, I suspect what you're seeing is a result of how Ghidra identifies a stack-based variable, as described in the answer to this question.\nThe <pre><code>Stack[-0x##]</code></pre> numbers in your screenshot are likely not relative to <pre><code>RBP</code></pre>, but rather the stack pointer <pre><code>RSP</code></pre> at the function start. Since <pre><code>RBP</code></pre> might have been set to the value of <pre><code>RSP</code></pre> after some pushes occurred, it could be a slightly different offset than the stack offset at the entry point of the function. This can take some getting used to as it is unintuitive.\nIf you are still learning assembly, a good exercise is to follow the changes made to the stack pointer via pushes/pops in the function start, and verify that you understand why the offset of <pre><code>RBP</code></pre> later in the function body would be slightly different than the offset to <pre><code>RSP</code></pre> at the beginning of the function for the same stack address.\n",
            "votes": "2",
            "user": "goatshriek",
            "time": "Mar 3, 2023 at 1:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}