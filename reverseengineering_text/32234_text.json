{
    "title": "from executable to assembly source code?",
    "link": "https://reverseengineering.stackexchange.com/questions/32234/from-executable-to-assembly-source-code",
    "content": "let's say i have an \".exe program\" and i want to disassemble it and get \"disassembled code\" .\nmy question is => can i maintain and organize that \"disassembled code\" and produce \"assembly source-code project\" that will compile and work again !\nif the answer is yes it's possible => i would like to know what stuff should i take care of in that dissembled code to be able to compile/work successfully again .\ntarget is \"windows x86 .exe\"\nand thanks ;)\n",
    "votes": "0",
    "answers": 0,
    "views": "158",
    "tags": [
        "disassembly",
        "assembly",
        "windows",
        "x86"
    ],
    "user": "0x00001F",
    "time": "Aug 30, 2023 at 6:42",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi, in principle the answer is yes. But there are a lot of ifs. Could you provide some more context? Just to give you an idea: you don't mention a target platform, but it could matter. Your question sounds as if you are attempting to change the functionality of an existing program, but by way of a DLL placement attack or <pre><code>LD_PRELOAD</code></pre> your endeavor may be easier to achieve than through round-tripping between disassembly and feeding that to the disassembler. One relevant point would also be if the program performs any sort of integrity checks on itself.\n",
            "time": null
        },
        {
            "user": "0x00001F",
            "text": "hi @0xC0000022L and thanks for the answer , my target is \"windows x86 game\". the goal is to achieve something like gta3re but on assembly level .\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "I am not sure if this is really possible for complex programs. Generating the assembler code isn't the problem but references (-> address) between different assembler blocks or to data. When decompiling you have to decide for every number if it is a a simple value or an address. Common decompilers can identify a lot of references, but when fully reversing a program just missing one can mean the program will no longer work after recompiling. Therefore binary modifications usually start with the original binary and try to modify as little as possible.\n",
            "time": null
        },
        {
            "user": "0x00001F",
            "text": "yes @Robert you right , i tried to disassemble a simple program i wrote by myself and i end up doing a lot effort on that \"dissembled code\" trying to make it valid/acceptable assembly code and in the end still not compile :( , need more effort\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "you could try disassembling with ddisasm: github.com/GrammaTech/ddisasm\n",
            "time": null
        }
    ],
    "answers_data": []
}