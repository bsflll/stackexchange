{
    "title": "What kind of function creates this code pattern?",
    "link": "https://reverseengineering.stackexchange.com/questions/25372/what-kind-of-function-creates-this-code-pattern",
    "content": "Apologies if this is a duplicate. Don't know what words to search for as that's what the question is about.\nI'm relatively new to reverse engineering binaries and while using Ghidra I've noticed that it frequently decompiles the binary to produce functions along these lines:\n<pre><code>void FUN_803adb50(void)\n{\n  int in_r11;\n  undefined4 unaff_r26;\n  undefined4 unaff_r27;\n  undefined4 unaff_r28;\n  undefined4 unaff_r29;\n  undefined4 unaff_r30;\n  undefined4 unaff_r31;\n  \n  *(undefined4 *)(in_r11 + -0x18) = unaff_r26;\n  *(undefined4 *)(in_r11 + -0x14) = unaff_r27;\n  *(undefined4 *)(in_r11 + -0x10) = unaff_r28;\n  *(undefined4 *)(in_r11 + -0xc) = unaff_r29;\n  *(undefined4 *)(in_r11 + -8) = unaff_r30;\n  *(undefined4 *)(in_r11 + -4) = unaff_r31;\n  return;\n}\n</code></pre>\nWhich is created from the following disassembly:\n\n<pre><code>                     *                          FUNCTION                          *\n                     **************************************************************\n                     void __stdcall FUN_803adb50(void)\n                       assume GQR0 = 0x0\n                       assume GQR1 = 0x0\n                       assume GQR2 = 0x40004\n                       assume GQR3 = 0x50005\n                       assume GQR4 = 0x60006\n                       assume GQR5 = 0x70007\n                       assume GQR6 = 0x0\n                       assume GQR7 = 0x0\n                       assume r13 = 0x805dd0e0\n                       assume r2 = 0x805e6700\n     void              <VOID>         <RETURN>\n                     FUN_803adb50\n803adb50 93 4b ff e8     stw        r26,-0x18(r11)\n                     **************************************************************\n                     *                          FUNCTION                          *\n                     **************************************************************\n                     undefined GetVCTypeSomething()\n                       assume GQR0 = 0x0\n                       assume GQR1 = 0x0\n                       assume GQR2 = 0x40004\n                       assume GQR3 = 0x50005\n                       assume GQR4 = 0x60006\n                       assume GQR5 = 0x70007\n                       assume GQR6 = 0x0\n                       assume GQR7 = 0x0\n                       assume r13 = 0x805dd0e0\n                       assume r2 = 0x805e6700\n     undefined         r3:1           <RETURN>\n                     GetVCTypeSomething\n803adb54 93 6b ff ec     stw        r27,-0x14(r11)\n803adb58 93 8b ff f0     stw        r28,-0x10(r11)\n803adb5c 93 ab ff f4     stw        r29,-0xc(r11)\n803adb60 93 cb ff f8     stw        r30,-0x8(r11)\n803adb64 93 eb ff fc     stw        r31,-0x4(r11)\n803adb68 4e 80 00 20     blr\n</code></pre>\nIt happens frequently enough that it must be some kind of common pattern, always with many variables of an undefined type with the \"unaff_\" prefix which are assigned to an equal number of variables with the \"in_\" prefix. They also commonly appear at the beginning of the caller functions. My instinct is that it's something related to a class structure (I'm unsure of whether or not the original binary was C or C++) but given that I've had no luck with my searches, I figured I'd ask here.\nWhat (if any) is the common code pattern that would produce such decompiled code?\nBonus points if there's a way to edit the function definition to produce something more legible.\n",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "decompilation",
        "ghidra"
    ],
    "user": "That Guy",
    "time": "Jun 26, 2020 at 17:20",
    "comments": [
        {
            "user": "macro_controller",
            "text": "Please share the disassembly that created this decompiled code\n",
            "time": null
        },
        {
            "user": "That Guy",
            "text": "@macro_controller What's the best way of doing that? Editing my question or using an external site such as pastebin?\n",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "edit your question\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "can you add more disassembly lines (until the return instruction)? Please use text (code blocks) instead of pictures if possible. You can remove the xref comments, they're unimportant here and only take up space.\n",
            "time": null
        },
        {
            "user": "That Guy",
            "text": "@IgorSkochinsky Updated to use text (instead of a picture) and now includes more lines.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a helper function used by PPC EABI conforming compilers for reducing code size. From <pre><code>ctrsavres.asm</code></pre>:\n<pre><code>/* Routines for saving integer registers, called by the compiler.  */\n/* Called with r11 pointing to the stack header word of the caller of the */\n/* function, just beyond the end of the integer save area.  */\n</code></pre>\nBecause it is called by the compiler, it doesn't behave like normal a function and accesses <pre><code>r11</code></pre> directly, without setting it up first (it is set up by the caller).\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 26, 2020 at 17:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "That Guy",
                    "text": "<span class=\"comment-copy\">Interesting. Are there any settings to display this more... gracefully? Seems a little weird to see it all over, but perhaps that's just to be expected.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Regarding unaff_ and in_ prefixes (source):\n\nin or unaff : this typically indicates that a register is read\nbefore it is written (and it does not contain a parameter\npassed to the function)\n\nSo, if you encounter them in decompilator, it means that their values are used before they are initialised in the function (they contain the values assigned earlier, in one of the previous functions). To fix that, you can add these registers as arguments to this function (right click -> <pre><code>edit function signature</code></pre>). You can see more details here and here.\nAs for the pattern you are asking for, the <pre><code>r11</code></pre> register in ARM (I suppose this is the architecture of your binary) is used for accessing local function variables placed on the stack. So, it seems that your function (probably 6 - argument constructor) initialises some class (having 6 members), which was a type of some local variable (declared in caller function) in the original code.\n",
            "votes": "3",
            "user": "bart1e",
            "time": "Jun 23, 2020 at 17:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "That Guy",
                    "text": "<span class=\"comment-copy\">Ah excellent. That sounds correct. I believe the architecture of this binary is PowerPC though. Not sure what similarities/differences it has.</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">I see. So at least the first part of my answer is valid. Disassembly should clarify it.</span>",
                    "time": null
                },
                {
                    "user": "That Guy",
                    "text": "<span class=\"comment-copy\">Edited to show disassembly</span>",
                    "time": null
                }
            ]
        }
    ]
}