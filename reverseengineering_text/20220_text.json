{
    "title": "Find function in a stripped dynamic ELF library",
    "link": "https://reverseengineering.stackexchange.com/questions/20220/find-function-in-a-stripped-dynamic-elf-library",
    "content": "Im currently reverse engineering an android app and this app calls a function named \"getUserInfo\" in an ARM 32bit ELF library called \"libcms.so\" (from TikTok) via the Java Native Interface.\nMy Problem is: The function cant be found with <pre><code>readelf --syms libcms.so</code></pre> or <pre><code>readelf --dyn-syms libcms.so</code></pre> because libcms.so is stripped and the funtion is not contained in the symbol table.\nThe app can call this function, so i know the function is there. How can i find the hex location of the function?\n",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "arm",
        "elf",
        "java",
        "symbols"
    ],
    "user": "SinOfficial",
    "time": "Dec 2, 2019 at 15:12",
    "comments": [],
    "answers_data": [
        {
            "content": "There're two broad ways in which you can declare <pre><code>JNI</code></pre> functions. \nThe first is the more obvious way in which the <pre><code>JNI</code></pre> function has to follow a specific naming convention like <pre><code>JNIEXPORT void JNICALL Java_com_app_foo_bar</code></pre>. You can easily identify such functions using <pre><code>readelf</code></pre>.\nThe other not so obvious way is to use <pre><code>RegisterNatives</code></pre>. Here your functions can have any signature and further they not need be exported from the shared library. Typically, you would call <pre><code>RegisterNatives</code></pre> from <pre><code>JNI_OnLoad</code></pre> to register the native functions to the Java Run-time.\nFor your binary <pre><code>libcms.so</code></pre>, it uses the second method.\n<pre><code>RegisterNatives</code></pre> has the following prototype\n<pre><code>jint RegisterNatives(JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint Methods);\n</code></pre>\nIf you analyze the code of <pre><code>JNI_OnLoad</code></pre> you will come across <pre><code>RegisterNatives</code></pre> call like below.\n\nThe third argument points to an array of <pre><code>JNINativeMethod</code></pre> structures which is declared as\n<pre><code>typedef struct {\n    char *name; \n    char *signature;\n    void *fnPtr;\n} JNINativeMethod;\n</code></pre>\nThe first member is a pointer to a null terminated string denoting the function name. However, in your case all the names and signatures are encrypted.\n\n\nThese are decrypted at run-time by the <pre><code>.datadiv_decodeXXXXXXXX</code></pre> family of functions. The <pre><code>.init_array</code></pre> section contain pointers to these decryptor functions which implies they will be called at startup.\n\nHowever, that is not all. The binary also employs Control Flow Flattening Obfuscation throughout, hence the execution path may not be easily discernible as shown below.\n\nTo analyze the binary you're better off resorting to dynamic analysis techniques using a tool such as Frida.\nFurther Read:\n\nhttps://developer.android.com/training/articles/perf-jni#native-libraries\nFinding RegisterNatives function calls in JNI_OnLoad's assembly code\nhttps://stackoverflow.com/questions/13509961/which-method-eventually-calls-jni-onload\nhttps://stackoverflow.com/questions/51811348/find-manually-registered-obfuscated-native-function-address\nhttps://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do\nHow to recover information stored in .ctors section?\n",
            "votes": "9",
            "user": "0xec",
            "time": "Dec 29, 2018 at 22:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gin May",
                    "text": "<span class=\"comment-copy\">I don't understand, can dynamically load it get the function or anyway? or am I missing the point?</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@GinMay To decrypt the function names you can run/emulate the <code>.datadiv_decode</code> series of functions.</span>",
                    "time": null
                }
            ]
        }
    ]
}