{
    "title": "Is it possible to use PDB files to perform on the fly binary patching?",
    "link": "https://reverseengineering.stackexchange.com/questions/12295/is-it-possible-to-use-pdb-files-to-perform-on-the-fly-binary-patching",
    "content": "My customer has an application that gets updates frequently. I have a program that adds functionality into this application by means of patching and reassembling the target binary. It is a hassle to keep up with the updates in the target application, and since I have its PDB file, is there any way to use this file to perform the patching on the client's end?\n",
    "votes": "2",
    "answers": 1,
    "views": "337",
    "tags": [
        "ida",
        "reassembly",
        "pdb"
    ],
    "user": "Meow",
    "time": "Mar 28, 2016 at 6:43",
    "comments": [
        {
            "user": "tmr232",
            "text": "A PDB will make it easier to find functions, but you will still need to patch the code just the same. In any case, if it's the customer's application, is it not possible to add the functionality in a more structured manner?\n",
            "time": null
        },
        {
            "user": "Meow",
            "text": "Yes, I found out I can do what I want with DLL wrapping, but still I think it's an interesting question for certain scenarios, for example if my target binary used signed DLLs, I would need to modify the binary itself.\n",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "In the case of signed DLLs, you might still be able to get away with IAT hooking. Still a lot simpler then binary patching.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Yes, you can use the Debug Interface Access Software Development Kit (DIA SDK) to access the information stored in a PDB.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 28, 2016 at 13:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}