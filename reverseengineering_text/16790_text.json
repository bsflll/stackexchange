{
    "title": "radare2 get API library and name from address",
    "link": "https://reverseengineering.stackexchange.com/questions/16790/radare2-get-api-library-and-name-from-address",
    "content": "When I disassemble a <pre><code>jmp</code></pre> I get:\n<pre><code>[0x004073d4]> pd 1\n            0x004073d4      ff2584804000   jmp dword [sym.imp.kernel32.dll_GetModuleHandleA] ; 0x408084 ; \"j\\x85\"\n</code></pre>\nIs there a command I can get the information contained in  <pre><code>sym.imp.kernel32.dll_GetModuleHandleA</code></pre> by providing the address <pre><code>0x408084</code></pre>? \nPreferably in Json as I'm using this for a script.\nI searched a bit but could not find anything.\n",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "radare2"
    ],
    "user": "simonzack",
    "time": "Nov 20, 2017 at 8:00",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>sym.imp.kernel32.dll_GetModuleHandleA</code></pre> is a flag radare2 defined for this address.  \nThis flag name is combined from 4 parts:\n\n<pre><code>sym</code></pre> for Symbols \n<pre><code>imp</code></pre> for Imports\n<pre><code>kernel32.dll</code></pre> is the name of the library\n<pre><code>GetModuleHandleA</code></pre> is the name of the imported function in the library\n\nTo handle flags with radare2 you should use the <pre><code>f</code></pre> command and its subcommands. Use <pre><code>f?</code></pre> to list all of them. \nFor your case, the right way to get the flag name for a given address is to use the <pre><code>fd</code></pre> command like this:  \n<pre><code>[0x004073d4]> fd 0x408084 \nsym.imp.kernel32.dll_GetModuleHandleA\n</code></pre>\nYou can split it to the function and the DLL name by using simple string manipulation with the programming language you are using to script radare.\n\nOn a personal note I will say that the best way to script with radare2 is to use r2pipe which is a very simple interface to radare2. You may already started using it but just in case, here's how simple it looks like with Python:\n<pre><code>import r2pipe\n\nr2 = r2pipe.open(\"/bin/ls\")\nr2.cmd(\"aa\")\nprint(r2.cmd(\"afl\"))\nprint(r2.cmdj(\"aflj\"))  # evaluates JSONs and returns an object\nr2.quit()\n</code></pre>\nI suggest you to read the Radare2 Book to learn more about radare2 and how to use it.\n",
            "votes": "4",
            "user": "Megabeets",
            "time": "Nov 19, 2017 at 22:16",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>[0x01012d6c]> pd 1 @ 0x1012d89\n\n| 0x01012d89    ff154c110001  call dword [sym.imp.KERNEL32.dll_GetStartupInfoA]; 0x100114c\n\n[0x01012d6c]> pxrj  4 @ 0x100114c\n\n[{\"addr\":16781644,\"value\":2011045392,\"ref\":\"reloc.KERNEL32.dll_GetStartupInfoA_16\"}]\n[0x01012d6c]>\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 19, 2017 at 20:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}