{
    "title": "How to Secure .NET 8 MVC Project When Converting to a Desktop App with Electron.NET?",
    "link": "https://reverseengineering.stackexchange.com/questions/33379/how-to-secure-net-8-mvc-project-when-converting-to-a-desktop-app-with-electron",
    "content": "I have a .NET 8 MVC project structured in three layers: Business, WebAPI, and Model. I want to convert it into a desktop application, so I used Electron.NET. However, I faced serious security concerns regarding my DLL files, as they can be easily decompiled.\nI have tried obfuscation, but it is not strong enough for my needs. Ideally, I need to compile my code into a lower-level language like C++ or any other method that would make reverse engineering much harder.\nKey Points:\n\nMy project contains Views (Razor Pages/Views), so Minimal API is not\na suitable alternative.\nI need a way to hide or encrypt my DLL files or convert them into a\nmore secure format.\nI am open to alternative solutions, such as using another technology\nto compile or protect my code.\n\nWhat are the best practices to secure my Electron.NET applicationâ€™s backend code? Would AOT compilation or using a different language help? Any guidance would be greatly appreciated.\n",
    "votes": "0",
    "answers": 0,
    "views": "23",
    "tags": [
        "obfuscation",
        ".net",
        "c#",
        "security",
        "software-security"
    ],
    "user": "osman safa",
    "time": "Feb 5 at 20:51",
    "comments": [
        {
            "user": "hold-me",
            "text": "AOT compilation will only delay a motivated attacker - or any such protection in general. What is your threat model? Who is your audience and your threat?\n",
            "time": null
        },
        {
            "user": "osman safa",
            "text": "agree that no protection is foolproof, but the goal is to make reverse engineering impractical.  Threat model:  Preventing casual reverse engineering. Protecting proprietary logic. Avoiding DLL tampering. Critical security stays on the backend, but frontend protection reduces the attack surface. Do you suggest a better approach?\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "If you have a backend why placing sensible business logic in the client?\n",
            "time": null
        }
    ],
    "answers_data": []
}