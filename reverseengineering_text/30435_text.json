{
    "title": "How do I align a memory dump hex file so that a pointer address matches its location in the memory dump file?",
    "link": "https://reverseengineering.stackexchange.com/questions/30435/how-do-i-align-a-memory-dump-hex-file-so-that-a-pointer-address-matches-its-loca",
    "content": "I'm learning C and trying to understand how things like buffer overflows and other memory issues work. I am doing this on Windows for convenience reasons but would have no problem doing it on WSL or a Linux VM if the tooling I'm looking for is better there. I've written a simple program that creates an int and a pointer to an int, and then outputs the addresses of the int and the pointer to the terminal.\n<pre><code>#include <stdio.h>\n\nint main()\n{\n    int test;\n    int *pointerTest;\n\n    test = 987;\n    pointerTest = &test;\n\n    printf(\"The address of `test` is %p\n\", &test);\n    printf(\"The address of `pointerTest` is %p\n\", &pointerTest);\n\n    printf(\"The value of `test` is %d\n\", test);\n    printf(\"The value of `*pointerTest` is %p\n\", pointerTest);\n\n    return(0);\n}\n</code></pre>\nThe output looks something like this:\n<pre><code>The address of `test` is 000000000061FE1C\nThe address of `pointerTest` is 000000000061FE10\nThe value of `test` is 987\nThe value of `*pointerTest` is 000000000061FE1C\n</code></pre>\nI've been setting a breakpoint at return(0); and making a memory dump using ProcDump, and I've been able to find the variables I'm looking for. But what I'd like is to be able to have the hex file show the addresses accurately. The int is located at 61FE1C, but the memory dump is only 172kB and my pointer is at C3DB in the file.\n\nHow would I go about aligning my memory dump with the actual addresses used by the process? If I just pad a bunch of zeroes to the start of the dump file, would the amount of zeroes I have to add be the same for any program, or would I need to figure out the offset every time I rebuild a program and dump the memory (I'm assuming this would be diffferent for Windows vs. Linux, x86 vs. x64 vs ARM, etc., but hope it will be consistent for a given platform)? Or should I be using something else to dump the memory that will keep the addresses correct? Or is there a hex editor out there that lets me add an offset to the addresses of the file I'm viewing?\n",
    "votes": "1",
    "answers": 0,
    "views": "232",
    "tags": [
        "memory",
        "hex",
        "buffer-overflow",
        "memory-dump"
    ],
    "user": "ChickenOverlord",
    "time": "May 23, 2022 at 22:57",
    "comments": [
        {
            "user": "sudhackar",
            "text": "Why do you need to dump memory? You can just use a debugger - stop at a given instruction and use the debugger features to have a look at the memory.\n",
            "time": null
        },
        {
            "user": "ChickenOverlord",
            "text": "@sudhackar I've been using VSCode to write and debug, and the disassembly viewer in VSCode is lacking, to say the least. No way to search and no way to even just jump to a specific address, you have to scroll super slowly to whatever address you're looking for. Is there a debugger you'd recommend? I was able to use HxD to view the memory of the process as it's running but something that lets me watch certain addresses and break on changes etc. would be ideal.\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "I personally prefer windbg+cdb but other choices include - olly, x64dbg etc.\n",
            "time": null
        }
    ],
    "answers_data": []
}