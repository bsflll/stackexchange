{
    "title": "Extract a global variable [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/4716/extract-a-global-variable",
    "content": "This question already has an answer here:\n                                \n                            \n\n\n\n\nExtracting a variable from an executable\n\n                                (1 answer)\n                            \n\nClosed 10 years ago.\n\n\n\nI'm trying to extact a global variable from an executable. Basically, I'm tryin to reverse an executable that put some python bytecode in a global variable and I'd like to extract it. I found out that the data is in the .data of the PE File, but I can't find a way to get it in all the data segments.\nAny ideas?\n",
    "votes": "0",
    "answers": 1,
    "views": "709",
    "tags": [
        "python",
        "executable"
    ],
    "user": "Maxence Henneron",
    "time": "10 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "@MaxenceHenneron: if it's a variable that can be found in the <pre><code>.data</code></pre> section that sounds to me like it's an initialized variable. What more than the part in the <pre><code>.data</code></pre> section do you need then?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since you say you are trying to reverse an executable which stores some python bytecode in a variable, it means probably the executable embeds python. If the code is likely to be executed at some point of time, you can use a debugger.\nSet a breakpoint on PyEval_EvalFrameEx . \nIt has a prototype of <pre><code>PyObject* PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)</code></pre>\nThe first parameter <pre><code>PyFrameObject</code></pre> has the following structure.\n<pre><code>typedef struct _frame {\n    PyObject_VAR_HEAD\n    struct _frame *f_back;  /* previous frame, or NULL */\n    PyCodeObject *f_code;   /* code segment */\n    PyObject *f_builtins;   /* builtin symbol table (PyDictObject) */\n    PyObject *f_globals;    /* global symbol table (PyDictObject) */\n    PyObject *f_locals;     /* local symbol table (any mapping) */\n    PyObject **f_valuestack;    /* points after the last local */\n    PyObject **f_stacktop;\n    PyObject *f_trace;      /* Trace function */\n    PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;\n    PyThreadState *f_tstate;\n    int f_lasti;        /* Last instruction if called */\n    int f_lineno;       /* Current line number */\n    int f_iblock;       /* index in f_blockstack */\n    PyTryBlock f_blockstack[CO_MAXBLOCKS]; /* for try and loop blocks */\n    PyObject *f_localsplus[1];  /* locals+stack, dynamically sized */\n} PyFrameObject;\n</code></pre>\nThe third member of <pre><code>PyFrameObject</code></pre> is <pre><code>PyCodeObject</code></pre>.\n<pre><code>PyCodeObject</code></pre> has the following structure.\n<pre><code>typedef struct {\n    PyObject_HEAD\n    int co_argcount;        /* #arguments, except *args */\n    int co_nlocals;     /* #local variables */\n    int co_stacksize;       /* #entries needed for evaluation stack */\n    int co_flags;       /* CO_..., see below */\n    PyObject *co_code;      /* instruction opcodes */\n    PyObject *co_consts;    /* list (constants used) */\n    PyObject *co_names;     /* list of strings (names used) */\n    PyObject *co_varnames;  /* tuple of strings (local variable names) */\n    PyObject *co_freevars;  /* tuple of strings (free variable names) */\n    PyObject *co_cellvars;      /* tuple of strings (cell variable names) */\n    /* The rest doesn't count for hash/cmp */\n    PyObject *co_filename;  /* string (where it was loaded from) */\n    PyObject *co_name;      /* string (name, for reference) */\n    int co_firstlineno;     /* first source line number */\n    PyObject *co_lnotab;    /* string (encoding addr<->lineno mapping) */\n    void *co_zombieframe;     /* for optimization only (see frameobject.c) */\n} PyCodeObject;\n</code></pre>\nThe sixth member of the above structure is <pre><code>co_code</code></pre> . It is basically a <pre><code>PyStringObject</code></pre>. \nIt has the following structure.\n<pre><code>typedef struct {\n    PyObject_VAR_HEAD\n    long ob_shash;\n    int ob_sstate;\n    char ob_sval[1];\n} PyStringObject;\n</code></pre>\nThe <pre><code>ob_sval</code></pre> contains the bytecode you are after.\nSo once you hit <pre><code>PyEval_EvalFrameEx</code></pre> follow the structures in memory to get the bytecode.\nAnother thing to note is you need to know the layout of <pre><code>PyObject_VAR_HEAD</code></pre> and <pre><code>PyObject_HEAD</code></pre> to get the actual offsets. Refer to the python source for more information.\n",
            "votes": "3",
            "user": "0xec",
            "time": "Jun 27, 2014 at 7:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}