{
    "title": "How to get a full execution trace with Python gdb?",
    "link": "https://reverseengineering.stackexchange.com/questions/11583/how-to-get-a-full-execution-trace-with-python-gdb",
    "content": "While trying to answer another question, I tried to set-up a Python script to automatize the extraction of an assembly execution trace. But, I am really not satisfied of this script and I would like to know how to improve it.\nFirst, here is the script:\n<pre><code>import gdb\n\ngdb.execute('break main')\ngdb.execute('run')\n\nwhile (True):\n    gdb.write (gdb.execute('x /i $pc', to_string=True).rstrip('\n'), gdb.STDOUT)\n    gdb.execute('stepi', to_string=False)\n    gdb.flush ()\n</code></pre>\nThen, just execute:\n<pre><code>$> gdb -x ./script.py ./main 1> log.txt\n</code></pre>\nThe problems that I would like to solve are as follow:\n\nFirst, the <pre><code>while(True)</code></pre> is definitely not satisfactory. I would like to stop or suspend the loop when a breakpoint or an exit is reached.\nAlso, the way we export the list of instructions outside of <pre><code>gdb</code></pre> is not really satisfactory. Saving it to a file would be much better than having to redirect <pre><code>stdout</code></pre> to a file.\nFinally, be able to interact with the software, feeding it through <pre><code>stdin</code></pre> would also be something we want.\n\nSo, if you know how to improve this script in any manner, I would be interested.\n",
    "votes": "8",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "perror",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "langlauf.io",
            "text": "Why don't you use PIN, valgrind, or DynamoRio?\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "Why not use <pre><code>gdb</code></pre> if it is enough ? Moreover, PIN is for Intel architectures only, DynamoRio is not packaged for Debian, and Valgrind execution is emulated and may be biaised.\n",
            "time": null
        },
        {
            "user": "langlauf.io",
            "text": "Do you see an easy way how your script could not only log the instructions but also the memory accesses (read and write) including the accessed values?\n",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "stackoverflow.com/questions/8841373/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your question really seems to be \"How to get an instruction trace with GDB\".  The use of Python appears to be incidental, except that you're using Python inside of GDB.\nGDB has native support for instruction tracing, via the <pre><code>record</code></pre> command.  Using the command <pre><code>record full</code></pre> will record all changes to the process's state, and even allow reverse debugging (i.e. backward-stepping and replay).\nYou can find more information here:\nhttps://sourceware.org/gdb/onlinedocs/gdb/Process-Record-and-Replay.html\nSeparately, if you would like to perform single-stepping and instruction tracing with Python-inside-GDB, your best bet is to use the <pre><code>Breakpoint</code></pre> class and use <pre><code>internal</code></pre> breakpoints which do not halt the UI.  On architectures with variable-width instructions (i386, amd64) you will need to calculate the size of the current instruction.  You will also need to resolve all jump and calls targets.\nIf you look at the GDB source code you'll see how this all works in the event loop, and it is not exposed to the Python API.  Search for <pre><code>STEP_OVER_NONE</code></pre> which is used for the <pre><code>stepi</code></pre> instruction (step exactly one machine instruction).\nIf you're so inclined, you can do this in GDB with the <pre><code>gdb.Breakpoint</code></pre> and <pre><code>gdb.FinishBreakpoint</code></pre> types.  However, you end up needing to parse instruction widths (on variable-width instruction ISAs like x86), and extract jump and call targets.  GDB's Python API does not have any support for a single-step breakpoint, or resolving what the next instruction address will be.  You can do both of those things pretty easily with Capstone and Unicorn.\n",
            "votes": "6",
            "user": "Zach Riggle",
            "time": "Mar 22, 2016 at 18:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ciro Santilli OurBigBook.com",
                    "text": "<span class=\"comment-copy\">Note however that <code>gdb record</code> has some major limitations currently, e.g. no AVX: <a href=\"https://stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2\" title=\"gdb reverse debugging avx2\">stackoverflow.com/questions/43750603/gdb-reverse-debugging-avx2</a></span>",
                    "time": null
                }
            ]
        }
    ]
}