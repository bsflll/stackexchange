{
    "title": "Get a list of global variables with IDA python",
    "link": "https://reverseengineering.stackexchange.com/questions/13454/get-a-list-of-global-variables-with-ida-python",
    "content": "I am trying to use IDA python to get a list of all variables in .data section because I want to extract a list of cross references to each global variables from IDA.\nIs it possible to do this with IDA python?\n",
    "votes": "4",
    "answers": 2,
    "views": "6k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "ajoha",
    "time": "Sep 7, 2016 at 19:30",
    "comments": [],
    "answers_data": [
        {
            "content": "Although Sark is a good library/tool, if you're only looking for a small utility script you might want to avoid the overhead of installing it. I do  recommend you give it a try regardless.\nThe following code will do just that without using any third party code:\n<pre><code># get segment start and end EA by name\nidata_seg_selector = idc.SegByName('.data')\nidata_seg_startea = idc.SegByBase(idata_seg_selector)\nidata_seg_endea = idc.SegEnd(idata_seg_startea)\n\n# iterate EAs in range\nfor seg_ea in range(idata_seg_startea, idata_seg_endea):\n  # iretate xrefs to specific ea\n  for xref in idautils.xrefsto(ea):\n    print(\"Found a cross reference {}: from {} to '.idata' variable {}\".format(xref, xref.frm, seg_ea))\n</code></pre>\nGotaches:\n\nUsing this code you'll see all cross references, not only those with a name, although adding that is quite trivial if you'd rather have it that way.\nAs mentioned by @ws, you'll only see variables located at the <pre><code>.data</code></pre> section as the OP requested, you should consider including other data related sections (such as <pre><code>.idata</code></pre>, <pre><code>.rodata</code></pre>, <pre><code>.bss</code></pre>, and others). Alternatively you might want to consider using <pre><code>idc.isData(idc.GetFlags(ea))</code></pre> to filter out non-data offsets in some or all sections.\n",
            "votes": "6",
            "user": "NirIzr",
            "time": "Sep 9, 2016 at 9:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">+1 but there are more segments that may contain global variables, .rodata and .bss in ELF for example</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@w s that is what the OP has asked for</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">@NirIzr \"because I want to extract a list of cross references to each global variables\" . He probably didn't know about other segments.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@ws Thanks, edited to include your remark and a possible generic solution.</span>",
                    "time": null
                },
                {
                    "user": "bravosierra99",
                    "text": "<span class=\"comment-copy\">is there a way to do this AND get the name of global?  (dword_########)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are several ways to do this. I am using Sark because it makes coding a bit easier.\nThe first option here is iterating over IDA's name list, and filtering by the addresses. The second one is going over all the lines in a segment, and showing those with names. In most cases, the first would be preferable.\n\n    import sark\n    import idautils\n<pre><code># First option - names list\ndef get_segment_names(name):\n    seg = sark.Segment(name=name)\n    for ea, name in idautils.Names():\n        if seg.startEA <= ea < seg.endEA:\n            yield ea, name\n\n\n# Second option - iteration over lines\ndef get_segment_names2(name):\n    seg = sark.Segment(name=name)\n    for line in seg.lines:\n        if line.has_name:\n            yield line.ea, line.name\n</code></pre>\nTo use them, just pass the name of the segment:\n<pre><code>for ea, name in get_segment_names('.data'):\n    print '{} at 0x{:x}'.format(name, ea)\n</code></pre>\nNow, if you want xrefs, you can later do something like this:\n<pre><code>def show_segment_xrefs(name):\n    for ea, name in get_segment_names(name):\n        print 'xrefs to {} at 0x{:x} from:'.format(name, ea)\n        for xref in sark.Line(ea).xrefs_to:\n            print '    0x{:x}'.format(xref.frm)\n\n\nget_segment_xrefs('.data')\n</code></pre>\nAnd get all the xrefs for the variables.\n",
            "votes": "2",
            "user": "tmr232",
            "time": "Sep 7, 2016 at 21:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Upvoted to show my support for Sark :)</span>",
                    "time": null
                }
            ]
        }
    ]
}