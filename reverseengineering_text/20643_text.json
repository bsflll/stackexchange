{
    "title": "why does the following non stack shellcode load /bin/sh string without pushing it onto the Stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/20643/why-does-the-following-non-stack-shellcode-load-bin-sh-string-without-pushing-i",
    "content": "the c code:\n<pre><code>void overflow (char* inbuf)\n{\n  char buf[64];\n\n  strcpy(buf, inbuf);\n}\n\nint main (int argc, char** argv)\n{\n    overflow(argv[1]);\n    return 0;\n}\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "414",
    "tags": [
        "buffer-overflow"
    ],
    "user": "Varun Ravindra",
    "time": "Feb 18, 2019 at 7:07",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "please do not add code as an image next time\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It actually does. The push operation is performed by the call instruction.\nThis instruction will push the address of the next instruction, here the address is 0x21.\nFrom 0x21 to 0x28 you have your /bin/sh string which is, on your case, wrongly disassembled as x86 code.\nLast but not least, the linux x86 32-bit syscall calling convention doesn't use the stack at all. The parameters are passed through ebx, ecx, edx, esi, edi, ebp and the syscall number is stored in eax.\n",
            "votes": "0",
            "user": "wisk",
            "time": "Feb 18, 2019 at 1:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uwe Plonus",
                    "text": "<span class=\"comment-copy\">A little correction: The code shown is the old calling convention using <code>int 0x80</code> which uses afaik the stack for parameters and not the registers. The registers are only used for the new <code>syscall</code> convention.</span>",
                    "time": null
                }
            ]
        }
    ]
}