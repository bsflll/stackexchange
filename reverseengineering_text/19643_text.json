{
    "title": "How are ARMv7 assembly opcodes and operands stored in bytes?",
    "link": "https://reverseengineering.stackexchange.com/questions/19643/how-are-armv7-assembly-opcodes-and-operands-stored-in-bytes",
    "content": "I've been trying to analyze an ARM binary but cannot figure out how the operators and operands are stored in the bytes of a program.\nFor example, by looking at the disassembly listing of an ARMv7 binary,  I cannot deduce what the opcode for <pre><code>cmp</code></pre> is from these three lines, nor do I understand how it's encoded or how it's operands are encoded:\n<pre><code>cmp r5, #0; 0x2d00\ncmp r4, #0; 0x2c00\ncmp r0, r2; 0x4290\n</code></pre>\nHow is the <pre><code>cmp</code></pre> operator, and it's respective operands encoded into two bytes?\n",
    "votes": "2",
    "answers": 1,
    "views": "398",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "edition",
    "time": "Oct 17, 2018 at 6:28",
    "comments": [
        {
            "user": "edition",
            "text": "I've tried comparing the bits using <pre><code>print \"{:16b}\n{:16b}\n{:16b}\".format(0x2d00,0x2c00,0x4290)</code></pre> in Python, and I can't see a pattern emerging for <pre><code>cmp</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "See ARM7 Data Sheet \n4.4 Data processing page 23.\nBut there will be the different encoding of the instruction depending on the instruction set (ARM or Thumb). See also this question\n",
            "votes": "3",
            "user": "Anton Kukoba",
            "time": "Oct 17, 2018 at 7:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "edition",
                    "text": "<span class=\"comment-copy\">That clears up the confusion I was having, as I now know how the bits affect the operator.</span>",
                    "time": null
                }
            ]
        }
    ]
}