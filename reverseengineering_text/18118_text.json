{
    "title": "How to skip on int 3 when ida debug?",
    "link": "https://reverseengineering.stackexchange.com/questions/18118/how-to-skip-on-int-3-when-ida-debug",
    "content": "I tried to debug a windows application, but when I debug it with Ida, it stopped on <pre><code>int 3</code></pre> instruction.\nI read that <pre><code>int 3</code></pre> catch debugger so I cant debug.\nHow can I cancel this <pre><code>int 3</code></pre>?\nHow call to <pre><code>int 3</code></pre>?\nIf I change this hex to <pre><code>nop</code></pre> will it be cancel?\n",
    "votes": "1",
    "answers": 2,
    "views": "9k",
    "tags": [
        "ida",
        "anti-debugging"
    ],
    "user": "Keystone",
    "time": "Apr 28, 2018 at 14:30",
    "comments": [],
    "answers_data": [
        {
            "content": "Well <pre><code>int 3</code></pre> is opcode that it's especially meant for the purpose to call debugger. \nIt is used i.e. for software breakpoint. You could replace them with <pre><code>nop</code></pre>'s and you should be good to go. I would though find out why they are being executed in the first place and maybe there is some condition to avoid them being exec'd.\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Apr 28, 2018 at 14:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">How does it work?  I saw when I tried to debug with ida I go to <code>int 3</code> ,is there any function that call to int 3 ?   This int 3 it 1 byte, how can I replace it with nop?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\"><code>nop</code> is also one byte - <code>0x90</code></span>",
                    "time": null
                },
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">Can you please explain me how it works?  The anti debugger add to code <code>int3</code> soveach time I attach to process I came to <code>int 3</code>? Why?   And if I just replace with hex editor the <code>int3</code> with <code>nop</code>  the anti debugger will not catch me?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I think you need to understand how this anti-debugging works in the first płace</span>",
                    "time": null
                },
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">Where can I learn it well?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "How you could start to tackle this problem. I assume that you are able to start the program under Ida and and find in memory the int3 location. If this is not the case, you should describe in some more detail what exactly happens.\n\nLook in a hex editor if the int3 (=0xCC) is present in the static exe file. For this, you could collect in Ida (on a sheet of paper) the sequence of bytes in memory in the vicinity of the int 3. You should be able to find this byte sequence in the file, but take memory locations into account which might not be present in the static file (due to linking or dynamic memory).\nIf the int3 is there in your exe file, replace it with your hex editor by a nop (0x90).\nStart Ida and have a look if the prog can stop at this location.\nLook in Ida if your 0x90 is still there. If no, then it has perhaps been removed by some anti-tamper means. In that case, stop in Ida immediately after start, and try - by stepping through your prog - to isolate the location where it is removed.\n\nThis is just an example how to start. There are of course other possible ways to tackle the problem. For instance, when Ida breaks at your int3, try to trace back to find from where the code sequence containing the int3 is called. This should be connected to the anti-debug code, because I assume your int3 is not called when running without debugger.\nThe most important with this stuff: Don't give up, even if it totally frustrates you (That's the sole purpose of anti-debug).\n",
            "votes": "1",
            "user": "josh",
            "time": "May 1, 2018 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}