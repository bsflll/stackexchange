{
    "title": "What are the techniques and tools to obfuscate Python programs?",
    "link": "https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs",
    "content": "This question is related to this  other one. I just wonder what are the techniques applicable and which can be found in the real world to obfuscate Python program (similar questions can be found on stackoverflow here and here).\nmikeazo mentioned the fact that his program was provided with a custom Python interpreter, but what are the other techniques and how efficient are they ?\n",
    "votes": "9",
    "answers": 5,
    "views": "20k",
    "tags": [
        "tools",
        "obfuscation",
        "python"
    ],
    "user": "perror",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "Here are tricks you can use when packaging your python app with a custom interpreter.\n\nRemap the opcodes for the interpreter\nEncrypt the pyc files (the custom interpreter decrypts before importing)\nRemove access to co_code in the interpreter (delete the reference to co_code in the code_memberlist array declaration in codeobject.c of the interpreter)\nObfuscate/protect the python interpreter\nDo not bundle modules such as <pre><code>dis</code></pre> which would help in reverse engineering (basically reverse engineer an unobfuscated python program, note all modules/techniques you find useful and remove them from the custom interpreter)\nModify the interpreter so it can only import pyc files (can be done by removing the compile modules or filtering in the interpreter)\nThe pyREtic folks give a few standard techniques for entering the custom interpreter. Testing these out on your app and trying to disable those access methods would make things much harder for a reverse engineer.\nRemove functions from interpreter which the RE could call to help him/her out such as <pre><code>PyRunString()</code></pre>. Otherwise they can attach with a debugger and run arbitrary python code.\n\nReferences\n\npyREtic â€“ In memory reverse engineering for obfuscated Python bytecode by Rich Smith. DEFCON-18, Las Vegas, 2010.\n",
            "votes": "19",
            "user": "evandrix",
            "time": "Sep 6, 2019 at 18:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Might as well make the interpreter require all code to be signed as long as you're going this route.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Also have a look at the Looking inside the (drop)box, as it is a commercially packed Python application. <a href=\"https://www.usenix.org/system/files/conference/woot13/woot13-kholia.pdf\" rel=\"nofollow noreferrer\">usenix.org/system/files/conference/woot13/woot13-kholia.pdf</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I don't know of any specific Python obfuscation tools (probably because the kind of people who want to write obfuscated code aren't going to be doing it in Python, except for amusement/education).\nHowever, if I did need to obfuscate Python code, I'd probably use the same techniques you'd use for a program in any language. The lack of tools means you need to write your own obfuscator, but that's not too difficult. \nBasically, think of anything you would do to reverse engineer a program and transform it to make that harder.\n\nMake your invariants complex. Transform program invariants into stuff like `(x ** y) % p == 457' or \"this data structure represents an achordal graph\". Such invariants are highly unlikely to be guessed by a static or dynamic analysis tool and will take ages for humans to figure out. \nMix together logic of different methods. Take every good design practice and do the opposite. Randomly inline portions of methods into other methods, and then rearrange the code. Duplicate portions of the CFG and randomly insert jumps between corresponding points in the two versions, then mutate them so they're not obviously duplicates.\nAdd a packer. Bonus pointers if you only decrypt portions of the code when you actually need to execute them, and make the results depend on program state so it's difficult to determine the keys in advance. Try to make sure the original program never appears in memory at once.\n\nThe main challenges to obfuscation are that it requires understanding of the program and usually hurts performance. The more extreme obfuscations are only applicable in cases where performance doesn't matter and withstanding intense scrutiny is important (i.e. malware).\n",
            "votes": "7",
            "user": "Antimony",
            "time": "Apr 28, 2013 at 4:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">Apart from obfuscating the code, the problem arises with trying to enforce application licensing and expiration. In that case, I'd suggest moving some critical part of the application into a native binary (write it in C that is) and do a license check there. Of course, that C shared library/dll can then be protected in \"standard\" way.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I think these questions from SO might help: \nObfuscating Python code?\nHow do I protect Python code?\nPython Code Obfuscation [closed]\n",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "This free tool will obfuscate multi module Python source code while retaining identifiers imported from 3rd party libraries. Also other identifiers can be exempted from obfuscation. I made it for my own use on a multi-year project, but decided others might benefit from it as well.\n",
            "votes": "0",
            "user": "Community",
            "time": "Aug 4, 2015 at 14:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rapt",
                    "text": "<span class=\"comment-copy\">\"SyntaxError: encoding declaration in Unicode string\" when trying to run the obfuscated code. Also it <code>import sys</code> which may be blocked in some environments. Such a tool should not add dependencies.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You have some options. \nYou can create your own obfuscation method comprised of existing encryption tools...i.e. openssl.  But, beware, it will likely take you a considerable amount of time to complete this type of project.  \nIt'll require you to map out how you're going to enclosed the \"passwords/passkeys\" within the obfuscated code in such a way that no one, except you, can get to it.  It'll be preferable if even you cant get to it. \nThen, you need to add in some logic that will cause the script to protect itself from inquisitive users who may try to pry it apart.  And equally as important, whatever method you come up with must not add significantly to the execution time of the script.  \nThis may sound impossible, but i think its doable.  You just have to be motivated and have enough time on your hands. \nOr, if you want a shortcut, you can try pasting a sample unix based python script to this site, and see if you can break their code and unveil your \"hidden\" code.\n",
            "votes": "0",
            "user": "jbowss",
            "time": "Mar 19, 2017 at 11:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}