{
    "title": "Ollydbg 2: Breaking after attaching to a suspended process",
    "link": "https://reverseengineering.stackexchange.com/questions/4607/ollydbg-2-breaking-after-attaching-to-a-suspended-process",
    "content": "When analyzing malware, I come across packers that inject the actual malware code into a newly spawned process and execute it that way. For that, they create a process in suspended state, inject the code and resume it using <pre><code>ntdll.NtResumeThread</code></pre> on Windows.\nI would like to attach to the suspended process after the injection is done, to dump the memory and get the unpacked binary. For that, I break at <pre><code>ntdll.NtResumeThread</code></pre>. Using Olly 2, I can attach to the suspended process.\nMy problem is now that this seems to resume the process. That would be okay if it would break at the entry point. But it doesn't. Olly does not break until the process I attached to has terminated. Yes, I can dump the memory then. But only if it was not modified by the malware. Also, I don't want the malware code to run at all during unpacking.\nSo, is there a way to make Olly break (reliably) at the entry point of the new process?\nThanks in advance!\n",
    "votes": "6",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg"
    ],
    "user": "j0ker",
    "time": "Jun 13, 2014 at 17:10",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Use a kernel debugger. I think what you're encountering is a limitation of the official debug API as well, though I cannot say whether OllyDbg uses that or its own homebrew method.\n",
            "time": null
        },
        {
            "user": "j0ker",
            "text": "I will try this as soon as I get around to test WinDbg :)\n",
            "time": null
        },
        {
            "user": "alexanderh",
            "text": "@j0ker Here is a link I wrote a while back for breaking on the entry point of the hollowed/child process in Ollydbg. It should help. hooked-on-mnemonics.blogspot.com/2013/01/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "FYI, the injection method to which you're referring is called dynamic forking or process hollowing.\nWhen you attach to the child process with OllyDbg, OllyDbg will create a new thread for itself, but the main thread (the one that would have been resumed with <pre><code>NtResumeThread()</code></pre> from the parent) will still be suspended. Once you've attached with OllyDbg, you can set a breakpoint on the OEP and resume the suspended thread; this will cause OllyDbg to then break at the OEP.\n",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Jun 13, 2014 at 17:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "j0ker",
                    "text": "<span class=\"comment-copy\">You are right. It didn't even occur to me to look for other threads. Thank you!</span>",
                    "time": null
                }
            ]
        }
    ]
}