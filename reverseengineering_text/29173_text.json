{
    "title": "How does this function take the argument if its not pushed into the stack?",
    "link": "https://reverseengineering.stackexchange.com/questions/29173/how-does-this-function-take-the-argument-if-its-not-pushed-into-the-stack",
    "content": "I dont understand how does the function take the argument without pushing\n<pre><code>push ebp\nmov ebp, esp\nand esp, 0FFFFFFF0h\nsub esp, 20h\nmov [esp+20h+var_20], offset aEnterX ; \"Enter X:\"\ncall _puts\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "58",
    "tags": [
        "assembly",
        "x86",
        "intel"
    ],
    "user": "jackthejones",
    "time": "Aug 21, 2021 at 19:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>var_20</code></pre> is likely defined as -20h, so the <pre><code>mov</code></pre> instruction is actually accessing <pre><code>[esp]</code></pre>. This puts the argument at the expected location for the called function, but does not change the <pre><code>esp</code></pre> itself. This approach of argument passing is used by GCC since many years ago. Supposedly this used to be somewhat faster than pushing in some cases, and also changing <pre><code>esp</code></pre> one time in the prolog makes the stack management easier for the compiler.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 21, 2021 at 19:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}