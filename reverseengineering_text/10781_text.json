{
    "title": "Does Windows 7 Pro use ASLR for win32 executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/10781/does-windows-7-pro-use-aslr-for-win32-executable",
    "content": "I unpacked a UPX packed PE binary. Both the packed and unpacked binary have fixed image base of <pre><code>0x400000</code></pre> (Checked by various PE tools). \nHowever, every time I run the program in OllyDbg, the image would located an a different base address. It would change the image base when I reopen the binary and start run it, and would not change the image base when I click the restart icon in OllyDbg. I read at this post saying that win32 exe never use ASLR. Is this true? I have win7 pro and OllyDbg1.10.\nHere is my real question. The unpacked executable have some address reference invalid. They are all using the standard win32 base <pre><code>0x400000</code></pre>. \nFor example, I have the following instructions in my unpacked program, the reference to the <pre><code>407018</code></pre> is invalid. \n\nHow could I fix this address reference?  \nHow to change all the address references in the format of <pre><code>0x40xxxx</code></pre> to      <pre><code>0x1150000</code></pre> in code section? Is there a tool to do this?\n\n\n<pre><code>01153F2B  |. A1 18704000    MOV EAX,DWORD PTR DS:[407018]\n01153F30  |. 8365 F8 00     AND DWORD PTR SS:[EBP-8],0\n01153F34  |. 8365 FC 00     AND DWORD PTR SS:[EBP-4],0\n01153F38  |. 53             PUSH EBX\n01153F39  |. 57             PUSH EDI\n01153F46  |. 74 0D          JE SHORT CrackME.01153F55\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "unpacking",
        "binary"
    ],
    "user": "Harry",
    "time": "Mar 28, 2017 at 15:46",
    "comments": [
        {
            "user": "rev",
            "text": "The base randomization happens because of ASLR. You can disable ASLR for that specific binary (and thus make the references valid) using this tool: <pre><code>setdllcharacteristics -d your_file.exe</code></pre>\n",
            "time": null
        },
        {
            "user": "Harry",
            "text": "Hi, @AcidShout Thank you pointing out this. There is one bit in the header that can disable the ASLR in win32 binary. I have done this in CFF explorer. My problem has been solved!!!\n",
            "time": null
        },
        {
            "user": "rev",
            "text": "so you used CFF explorer? you can post an answer to your own question, which is explicitly encouraged\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Why is this happening in the first place?\nChanging image bases to a different random address each time an image is loaded is called Address Space Layout Randomization (In short, ASLR). Most modern OSes employ ASLR on user mode processes (Some OSes do that for kernel mode code as well, at least partially) where this is possible.\nThe major advantage of ASLR is that it increases the difficulty if exploiting memory corruption based exploits (often requires a information leak type of bug to mitigate), and therefore encouraged by the security community.\nIn order to be ASLRed, an image must be relocatable. That is, it is required to properly function regardless of where in memory it is located. This tends to be complicated because certain instructions (in certain architecture) are position based. For example, on the x86 architecture the <pre><code>CALL</code></pre> instructions can be either relative or absolute, making it impossible to change the addresses at which the image is loaded without risking crashes.\nAn image can either make sure it only uses relative instructions (which might be difficult at times) or provide a relation table as part of the image file. A relation table explicitly lists all absolute addresses used in the image for the loader to fix in case the image is relocated.\nHow to avoid ASLR?\nObviously, disabling ASLR is not encouraged because of the protection it provides. On 64bit windows user mode ASLR is mandatory, so you simply cannot disable it. However, on 32bit windows, you're allowed to and can disable it by disabling the relevant PE flag, by un-checking the marked checkbox in the following image:\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Mar 28, 2017 at 15:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}