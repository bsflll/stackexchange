{
    "title": "What is an immediate value?",
    "link": "https://reverseengineering.stackexchange.com/questions/17671/what-is-an-immediate-value",
    "content": "I just read this post.\nWhat does mean an \"immediate value\" ? Is there any string/ascii there?\nHow can I find this value on the binary file?\nI have the same code and when I search on 0x28 address I dont see any value.\n",
    "votes": "3",
    "answers": 3,
    "views": "21k",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "Ljohhuh",
    "time": "Apr 4, 2018 at 11:42",
    "comments": [],
    "answers_data": [
        {
            "content": "In the area of machine code/instruction sets, an immediate value is a constant number embedded into the instruction itself , as opposed to one loaded from another place. For example, on x86:\n<pre><code>6A 03  push    3\n</code></pre>\nHere, 3 is an immediate because it's included directly as part of the opcode (in the second byte).\nOn ARM:\n<pre><code> 00 00 50 E3                 CMP             R0, #0\n</code></pre>\nhere, 0 is again an immediate because it's encoded in bits of the opcode. In ARM assembly, immediates are usually marked with <pre><code>#</code></pre> symbol, although it is optional in later revisions when unambiguous.\nAnother example:\n<pre><code> C8 30 1F E5                 LDR             R3, =0xC0B8\n</code></pre>\nHere, despite appearances, <pre><code>0xC0B8</code></pre> is not an immediate. If we turn on [x] Disable pointer dereferencing in IDA, it is shown as:\n<pre><code>LDR             R3, dword_BDE0\n</code></pre>\nand\n<pre><code>B8 C0 00 00   dword_BDE0      DCD 0xC0B8 \n</code></pre>\nI.e. this value is not embedded into the instruction but is loaded from the literal pool (an area reserved for storage of values not representable as immediates), but by default IDA simplifies such instructions to show directly the loaded value (this syntax is supported by most ARM assemblers).\n",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Mar 13, 2018 at 8:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "An immediate value is a value that is stored in the instruction.\nFor example (in PIC16 because that's what I'm familiar with):\n<pre><code>MOVlw 0x01\nMOVwf 0x07h\nMOVlw 0x01\nADDwf 0x07h,0\n</code></pre>\nWhat this program does is as follows:\n\nMove a literal value of hex 01 into the accumulator\nMove the accumulator to memory address 0x07h\nMove a literal value of hex 01 into the accumulator\nAdd the address 0x07h to the accumulator and store in the accumulator.\n\nThis is a program to show us the difference between a literal (immediate) value and direct addressing.\nOn the first instruction, <pre><code>MOVlw 0x01</code></pre> we move a literal value into the accumulator. This means that the value is taken directly from the instruction, as opposed to being taken from a register which the instruction points to. When the processor reads this instruction, it takes the operand (which in this case is an immediate value), and places it directly into the accumulator. It does not need to make a register or memory access other than that necessary to get the instruction.\nOn the fourth instruction, <pre><code>ADDwf 0x07h,0</code></pre>, we do the opposite of the above. Instead of taking the value directly from the instruction, the instruction contains the address that the value is stored in, in memory. So, when the processor reads this instruction, it requests from memory the value located in address <pre><code>0x07h</code></pre> and does the operation with the value that the memory returns.\nAs a further example, let's look at how those two instructions might look at the byte level (be aware that this may not be the correct machine code for an actual PIC16 microcontroller):\nLet's assume that our instructions have 8 bit opcodes and 8 bit operands.\nOur two instructions: <pre><code>MOVlw 0x01</code></pre> and <pre><code>ADDwf 0x07h,0</code></pre> might become something like: <pre><code>01 01</code></pre> and <pre><code>02 7h 00</code></pre>. This makes it much easier to see what's really going on.\nIn <pre><code>01 01</code></pre> (<pre><code>MOVlw 0x01</code></pre>), the value <pre><code>01</code></pre> comes directly from the operand field of the instruction. However, in <pre><code>02 7h 00</code></pre> (<pre><code>ADDwf 0x07h,0</code></pre>), the operand <pre><code>7h</code></pre> is an address where the actual operand (in this case another <pre><code>01</code></pre>) of the instruction is stored.\n",
            "votes": "2",
            "user": "superstewie",
            "time": "Mar 19, 2018 at 8:11",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "An \"immediate value\" is an hardcoded value included in the program. It is all the static values that are present in a program. For example (if translated to C):\n<pre><code>x = 10;\n</code></pre>\n<pre><code>x</code></pre> is a variable and <pre><code>10</code></pre> is an immediate value.\nConcerning, \"where to find the value\", it is in the register <pre><code>r0</code></pre>. I cannot tell more than that. If you do not know what a register is, you may just ask Wikipedia about that.\n",
            "votes": "1",
            "user": "perror",
            "time": "Mar 12, 2018 at 23:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ljohhuh",
                    "text": "<span class=\"comment-copy\">I not sure I get you , (I know what is register)   if I see <code>ldr r0 #0x28</code> so in r0 will be the string that in 0x28 address?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">No, the value 0x28. An immediate value is a <b>value</b>.</span>",
                    "time": null
                },
                {
                    "user": "Ljohhuh",
                    "text": "<span class=\"comment-copy\">so r0=0x28 (Value?)   that strange becuase I saw it on loop that <code>ldr r0 #0x28</code> and <code>ldr r1 #0x32</code> and that happend every loop and after that check r0 and r1 are equal so get out from loop .   so if it assign of 0x28 and 0x32 they aways be not equal</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I cannot comment if I cannot see the code...</span>",
                    "time": null
                },
                {
                    "user": "Ljohhuh",
                    "text": "<span class=\"comment-copy\">ok  so you tell that <code>ldr ro #0x28</code> so r0=0x28(value )   can you please tell me what does it mean <code>ldr r0 =0x1234</code>? that mean that r0 get the value that store on 0x1234?</span>",
                    "time": null
                }
            ]
        }
    ]
}