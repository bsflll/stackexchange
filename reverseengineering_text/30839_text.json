{
    "title": "ghidra returning wrong function address",
    "link": "https://reverseengineering.stackexchange.com/questions/30839/ghidra-returning-wrong-function-address",
    "content": "I am reverse engineering a android app shared library (.so file) and I am trying to use frida to hook a non exported native function\nI am using this hook\n<pre><code>const ghidraImageBase = 0x00100000; \nconst moduleName = \"libclient.so\";\nconst moduleBaseAddress = Module.findBaseAddress(moduleName);\nconst ghidraFunction = 0x0168a7c8;\nconst functionRealAddress = moduleBaseAddress.add(ghidraFunction - ghidraImageBase);\n\nInterceptor.attach(functionRealAddress, {\n    onEnter: function(args) {\n\n        console.log(\"function called\");\n\n    },\n    onLeave: function(ignored) {}\n});\n</code></pre>\nHowever function called is never logged even though the function is getting called\nI am pretty sure something is wrong with the addresses so I tried hooking into a exported function using the address I got from ghidra\n\nwhich is <pre><code>0x014ccd08</code></pre> and ghidra image base is equal to <pre><code>0x00100000</code></pre> meaning the offset of the function should be <pre><code>0x014ccd08</code></pre> - <pre><code>0x00100000</code></pre> = <pre><code>0x013ccd08</code></pre>\nhowever when I run\n<pre><code>console.log(\"moduleBaseAddress:\" + Module.findBaseAddress(\"libclient.so\"))\n\n\nModule.enumerateExports(\"libclient.so\", {\n    onMatch: function(e) {\n        if (e.type == 'function') {\n            if (e.name == \"Java_exported_function etc...\") {\n                console.log(\"Function found\");\n                console.log(JSON.stringify(e))\n            }\n        }\n    },\n    onComplete: function() {}\n});\n</code></pre>\nthe above code execution result is\n<pre><code>moduleBaseAddress:0xb6900000\nFunction recognized by name\n{\"type\":\"function\",\"name\":\"Java_exported_function...\",\"address\":\"0xb755b9e1\"}\n</code></pre>\nthe .so library is loaded at <pre><code>0xb6900000</code></pre> and the function address is at <pre><code>0xb755b9e1</code></pre> meaning the function offset is <pre><code>0xb755b9e1</code></pre> - <pre><code>0xb6900000</code></pre> = <pre><code>0x00c5b9e1</code></pre>\nentirely different from the <pre><code>0x013ccd08</code></pre> I found earlier.\n\nCan this issue be from the ghidra settings?\nHow can I get the correct offset from ghidra?\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "ghidra",
        "memory",
        "frida"
    ],
    "user": "ahmed mani",
    "time": "Aug 31, 2022 at 1:14",
    "comments": [
        {
            "user": "Robert",
            "text": "Do you use an emulator or a real device? If you are using an emulator make sure not to use an x86 image with an armv7/arm64 app. The integrated arm emulation is incompatible with frida.\n",
            "time": null
        },
        {
            "user": "ahmed mani",
            "text": "i am using a x86 image however frida does support hooking of native functions with arm translation as stated by its creator in this issue github.com/frida/frida/issues/1567 come to think of it now i dont know which version of arm library is being loaded since it has both arm64 and armeabi-v7a and the one i reversed on ghidra is arm64 is there a way to tell which one is loaded into memory\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "I can only recommend to you to use a real device or an ARM image.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "turns out i decompiled the wrong library the emulator i was running is 32bit where as the library i decompiled in ghidra is 64bit decompiling the 32bit lib i get the correct offsests same as expected ones\n",
            "votes": "0",
            "user": "ahmed mani",
            "time": "Oct 9, 2022 at 21:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}