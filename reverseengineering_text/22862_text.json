{
    "title": "Weird Ghidra decompiler output for simple crack me",
    "link": "https://reverseengineering.stackexchange.com/questions/22862/weird-ghidra-decompiler-output-for-simple-crack-me",
    "content": "Here is the Ghidra decompiler output for a crackme problem. Specifically, this one:\nCode:\n<pre><code>undefined8 entry(undefined8 param_1,char *param_2)\n{\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  char *pcVar4;\n  char local_118 [9];\n  char local_10f;\n  long local_10;\n\n  local_10 = *(long *)___stdinp;\n  _strcspn(\"Enter the password...\n\",param_2);\n  _printf(local_118,0x100,*(undefined8 *)_fgets);\n  pcVar3 = \"\n\";\n  sVar2 = _strlen(local_118);\n  pcVar4 = local_118;\n  local_118[sVar2] = '\\0';\n  iVar1 = dyld_stub_binder();\n  if (iVar1 == 10) {\n    if (local_118[0] == local_10f) {\n      _strcspn(\"Correct!\nthe password is: %s\n\",local_118);\n    }\n    else {\n      _wrong_password(pcVar4,pcVar3);\n    }\n  }\n  else {\n    _wrong_password(pcVar4,pcVar3);\n  }\n  if (*(long *)___stdinp == local_10) {\n    return 0;\n  }\n</code></pre>\nI'm having some trouble understanding the output.\n\nthe printf and strcspn functions seem to be switched? \nthe <pre><code>local_10f</code></pre> variable is never initialized, and yet is still used to compare to the passcode.\nI know from reading the solution, that as long as the first and last characters are the same, and the length is 10, then the passcode will work. How does \"dyld_stub_binder\" check for length? Where do the first and last characters get compared?\n\nThanks for any help.\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra"
    ],
    "user": "robert",
    "time": "Dec 29, 2019 at 5:40",
    "comments": [],
    "answers_data": [
        {
            "content": "It seems like your <pre><code>Ghidra</code></pre> decompilation went wrong. Are you using the last version of <pre><code>Ghidra</code></pre>? \nThe output that I get in the latest version is:\n<pre><code>undefined8 entry(void)\n\n{\n  size_t sVar1;\n  char local_118 [9];\n  char local_10f;\n  long local_10;\n\n  local_10 = *(long *)___stack_chk_guard;\n  _printf(\"Enter the password...\n\");\n  _fgets(local_118,0x100,*(FILE **)___stdinp);\n  sVar1 = _strcspn(local_118,\"\n\");\n  local_118[sVar1] = '\\0';\n  sVar1 = _strlen(local_118);\n  if ((int)sVar1 == 10) {\n    if (local_118[0] == local_10f) {\n      _printf(\"Correct!\nthe password is: %s\n\",local_118);\n    }\n    else {\n      _wrong_password();\n    }\n  }\n  else {\n    _wrong_password();\n  }\n  if (*(long *)___stack_chk_guard == local_10) {\n    return 0;\n  }\n                    /* WARNING: Subroutine does not return */\n  ___stack_chk_fail();\n}\n</code></pre>\nWhich makes much more sense. I would guess that your <pre><code>Ghidra</code></pre> version has some problems with parsing the <pre><code>plt</code></pre>/imports. Upgrade to the latest version and check again. \nAs for your second question: \nWhen you don't understand the decompilation, you should always go to the disassembly. \n<pre><code>   100000e42        MOVSX      EAX,byte ptr [RBP + local_118]\n\n   100000e49        MOVSX      ECX,byte ptr [RBP + local_10f]\n\n   100000e50        CMP        EAX,ECX\n</code></pre>\nYou can see that there is a compersion between two bytes from the stack. \nIn this case <pre><code>RBP + local_118</code></pre> is the pointer to the stack location of the user string. \n<pre><code>0x118 - 0x10f = 9</code></pre> => You are looking at the last character (index 9 of the string is the 10th character). So the comparison is between the first and the last char.\n",
            "votes": "2",
            "user": "macro_controller",
            "time": "Dec 29, 2019 at 8:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">I just installed yesterday, but after reinstalling it worked! Thanks for your help. (I also disabled MacOS's \"protection\" for opening programs from the internet). How do you know that local_10f is indeed 0x10f?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">You can see it in the beginning of the function, just below the signature.</span>",
                    "time": null
                },
                {
                    "user": "ShaneTheKing",
                    "text": "<span class=\"comment-copy\">It looks like the issue is with Ghidra 9.1.1, actually. I had to downgrade to 9.1 to get the sensible version of this code. I'm so glad I came across this post, I had no idea what I was seeing.</span>",
                    "time": null
                }
            ]
        }
    ]
}