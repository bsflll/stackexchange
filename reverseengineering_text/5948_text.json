{
    "title": "Using Stunnel to packet capture HTTPS connection",
    "link": "https://reverseengineering.stackexchange.com/questions/5948/using-stunnel-to-packet-capture-https-connection",
    "content": "I want to reverse engineer an application using HTTPS to communicate.\nI need a tool that performs a man in the middle attack and send it's own SSL certificate to the application, so I can decrypt the HTTPS connection it makes by passing the RSA private key to WireShark.\nBy the way, I have heard about a tool called <pre><code>stunnel</code></pre>, but the documentations  I found about how to configure it just confused me. :|\n",
    "votes": "1",
    "answers": 5,
    "views": "3k",
    "tags": [
        "sniffing",
        "wireshark",
        "https-protocol"
    ],
    "user": "Farzan R Nobakht",
    "time": "Jul 28, 2014 at 7:21",
    "comments": [
        {
            "user": "perror",
            "text": "Try to better explain what kind of problem you encountered while trying to use <pre><code>stunnel</code></pre>. And what documentation you already browsed through.\n",
            "time": null
        },
        {
            "user": "McTraher",
            "text": "I have similar question, but in complicated case:reverseengineering.stackexchange.com/questions/8017/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you can make the application use a proxy, check Fiddler.\nI used stunnel recently to do the same with an android application - used the dextojar suite to take the application apart, replace the https://game.server.com URL with a http://game.server.com URL in the .dex file, re-create the .dex checksum, re-create and sign the apk, install the apk.\nUse this iptables entry on my router:\n<pre><code>iptables -t nat -A PREROUTING -i eth0 -p tcp -s 192.168.178.100 -d game.server.com --dport 80 -j DNAT --to 192.168.2.2:80\n</code></pre>\nwhere 192.168.178.100 is my android device, and 192.168.2.2 is where i run the stunnel. (Alternativeely, you can probably fiddle with the DNS entries/hosts file of your client to make game.server.com == 192.168.2.2)\nThen, use this stunnel.conf:\n<pre><code>[game]\nclient = yes\naccept = 80\nconnect=game.server.com:443\n</code></pre>\nYou could possibly use stunnel if you set up two tunnels if you can't patch the client - one stunnel https server to connect your client to, which forwards to an stunnel http server, which forwards to the real https server, but i've never done that.\nThe third possibilty is mitmproxy, which might be even closer to what you need. I gave up on getting it to work on my Centos 5 system, but if you have a newer linux, it might be the easiest way to get what you want.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Jul 28, 2014 at 8:52",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Myself I've made a backdoord openssl.so file that writes everything it encrypts to a file so I can <pre><code>tail</code></pre> it in a different terminal. And ignore issues like certificate pinning.\n",
            "votes": "3",
            "user": "Stolas",
            "time": "Jul 31, 2014 at 9:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "An alternative approach might be to use panda to extract the key from a trace as documented in the panda ssl tutorial. That said, the usual mitm approach is probably a bit easier to get going unless you're dealing with certificate pinning.\n",
            "votes": "2",
            "user": "broadway",
            "time": "Jul 31, 2014 at 2:10",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "An alternative approach would be to use the browser tools or a browser extension, such as Google Developer Tools for Chrome or Web Console for Firefox.  These tools will show you the entire request, response, and body of all network traffic and timeline of when connections are made. In Chrome, you can even edit the page content and review how it affects the page.  These are very powerful tools for reverse engineering the DOM and request structure.\n",
            "votes": "2",
            "user": "Jeff-Inventor ChromeOS",
            "time": "Aug 10, 2014 at 20:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If the application in question doesn't verify SSL encryption then you can strip SSL using an intercepting proxy. However, if the application does verify SSL and throws an error if encryption is stripped, one option is to create your own SSL certificate pair and add it to your OS certificate trust store like so: \nhttp://pubs.vmware.com/view-51/topic/com.vmware.view.installation.doc/GUID-2D968AD7-ED62-46CA-B2B2-CCC526CA09F5.html\nIf the application checks the authenticity of an SSL certificate against your OS certificate trust store and forces encrypted traffic, you can spoof the endpoint while retaining a non-stripped, 'valid' encrypted session between the application and a proxy which receives a SSL encrypted session from your host using the self-signed certificate and reencrypts using a non self-signed certificate. Thereby you have an encrypted session that appears valid and non-stripped to both ends of the session with a man-in-the-middle attack.\n",
            "votes": "1",
            "user": "Fred Concklin",
            "time": "Jul 30, 2014 at 3:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}