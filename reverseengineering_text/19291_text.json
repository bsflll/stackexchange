{
    "title": "Correct my understanding on a basic allocation memory",
    "link": "https://reverseengineering.stackexchange.com/questions/19291/correct-my-understanding-on-a-basic-allocation-memory",
    "content": "Here is the function\nIf I understand correctly:\n\nThere is a buffer of size 256 bytes created (malloc)\nin this buffer, the first 32 bits are set to 0 (because dword designates 32bits size)\nthe next 32 bits (32 to 63) are set to C8h\nthe next 32 bits (64 to 95) to 0.\n\nThen another pointer of memory size  3200 is created.\nThe address of this new pointer is written in the first buffer between the bit 127 to the bit 127+64=191. \nThen we return the address of the first buffer.\nAm I right?\nThank you very much!!!\nPS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?\n",
    "votes": "2",
    "answers": 1,
    "views": "70",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Sep 8, 2018 at 15:49",
    "comments": [],
    "answers_data": [
        {
            "content": "If I understand correctly:\nThere is a buffer of size 256 bytes created (malloc) in this buffer,\n  the first 32 bits are set to 0 (because dword designates 32bits size)\n  the next 32 bits (32 to 63) are set to C8h the next 32 bits (64 to 95)\n  to 0.\n\nYes!\n\nThe address of this new pointer is written in the first buffer between the bit 127 \n\nWell it will be the 128th bit. The qword at <pre><code>rax+0x10</code></pre> is 128 bits from the head of your first <pre><code>malloc</code></pre>.\n\nBut these aren't strictly bit offsets. You can calculate how many bits from the start of memory, but I would question why it matters. \n\nPS: Additional question: why 'rax+1' is to understand as 'rax+8bits ' instead of rax+1bit?\n\n<pre><code>rax</code></pre> is a 64 bit register so you can use it to represent 2^64 values. \nIf <pre><code>rax</code></pre> is <pre><code>0x12345678</code></pre> and I add <pre><code>1</code></pre>, what should happen? It will become <pre><code>0x12345679</code></pre> regardless of how many bits you want that to represent. (Oversimplification but I hope this make the point).\nFor example: <pre><code>mov dword ptr [rax+4], 0xC8</code></pre>\nRef: https://www.felixcloutier.com/x86/MOV.html\nFrom the above ref, this is a <pre><code>mov m32, imm32</code></pre> which means copy a 32bit constant into the 32bit DWORD through this pointer <pre><code>[rax+4]</code></pre>\nSo because <pre><code>[rax+4]</code></pre> represents a pointer to byte addressable memory, the <pre><code>+4</code></pre> represents 4 bytes.\nThis is only because the <pre><code>m32</code></pre> operand to <pre><code>mov</code></pre> is concerned with the address of bytes. There are other x86 instruction that can manipulate bits, but not this one.\n",
            "votes": "4",
            "user": "Abigail",
            "time": "Sep 8, 2018 at 18:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}