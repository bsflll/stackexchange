{
    "title": "Type reconstruction ambiguity",
    "link": "https://reverseengineering.stackexchange.com/questions/23127/type-reconstruction-ambiguity",
    "content": "In TIE: Principled Reverse Engineering of Types in Binary Programs, Lee J. et al claim to solve most of the challenges in the process of C code decompilation that come with type reconstruction.\nWhile producing a complex type where maybe a <pre><code>void *</code></pre> could fit is definitely non-trivial, I was just thinking about a possible type recovery ambiguity for what merely concerns a variable of type <pre><code>int</code></pre> or <pre><code>int *</code></pre>.\n<pre><code>int foo(int *a, int sz) {\n    int res = 0;\n    for (int *q = a; q < &a[sz]; q++)\n        res += *q;\n    return res;\n}\n</code></pre>\nIn 32-bit architectures, the above code shows an example of such ambiguity for variable <pre><code>res</code></pre>, as both <pre><code>int</code></pre> and <pre><code>int *</code></pre> are compatible with a 32-bit register, and the disassembled code is the same. If <pre><code>res</code></pre> was a pointer though, it would be improperly used since we would be returning the address of an automatic variable (and would lead to undefined behaviour). \nSo can this example really be taken into account (is a valid instance)? Can you come up with an example where these two types generate ambiguity but are correctly used? Can we conclude that a variable can be inferred to be a pointer or not if it just gets dereferenced?\n",
    "votes": "1",
    "answers": 2,
    "views": "206",
    "tags": [
        "ida",
        "decompilation",
        "type-reconstruction"
    ],
    "user": "Antonio Frighetto",
    "time": "Jan 28, 2020 at 9:07",
    "comments": [],
    "answers_data": [
        {
            "content": "One common issue I’ve seen in real programs is the NULL pointer which has the same value as the integer 0. For example, currently (2020) the Hex-Rays decompiler does not support one variable holding different types so for example when a register initialized with zero is used as integer in one branch and as pointer in another, you might see “funny” output. Alas I don’t have an example at hand but if I see it again I’ll add it here. \nAnother thing that comes to mind is the “clever” implementation of double linked list using one field to store both next and previous pointers, known as XOR Linked List. This pattern is probably about impossible to recover automatically but luckily it seems to be more of a theoretical curiosity than  practical construct.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 29, 2020 at 21:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antonio Frighetto",
                    "text": "<span class=\"comment-copy\">The first example is something I'd thought of (which kinda boils down to the one above, since <code>res</code> could be really a NULL pointer as far as we know from the disassembly), but in that case, wouldn't it suffice to just force the variable to be a pointer if there's at least a case where it is used as such? Yeah, would be interesting to see an example.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "In fact, type-reconstruction is mainly looking at how the program is using the data and tries to deduce the type based on this. Your example is really not a problem for most of the decompiler because <pre><code>res</code></pre> is only used as an <pre><code>int</code></pre> (the code always dereference the pointer when storing it to <pre><code>res</code></pre>).\nBut, at the assembly level you may enforce the usage of a constant to be both an integer value and an address if the part of the program you are in is totally static. For example:\n<pre><code>mov 0xdeadbeef, %eax\nxor %ebx, %eax       <-- bitwise operators are almost never used on addresses\nmov (%ebx), $ecx     <-- Yet, %ebx is an address\n</code></pre>\nThe heuristics of the decompiler will give contradictory information here, is <pre><code>%ebx</code></pre> a data or an address ? So, one decision will be taken but both types (data and address) cannot be kept and backported to the decompiled code. Somehow, this is lost in translation.\n",
            "votes": "0",
            "user": "perror",
            "time": "Jan 28, 2020 at 9:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}