{
    "title": "Is there a standalone cli tool which can detect which programming language a binary was written in?",
    "link": "https://reverseengineering.stackexchange.com/questions/27185/is-there-a-standalone-cli-tool-which-can-detect-which-programming-language-a-bin",
    "content": "I want to run a quick analysis on a very large number of binaries and determine the language of each one.\n",
    "votes": "0",
    "answers": 2,
    "views": "391",
    "tags": [
        "program-analysis"
    ],
    "user": "Natan Yellin",
    "time": "Mar 19, 2021 at 22:42",
    "comments": [],
    "answers_data": [
        {
            "content": "In addition to what Christian said, I'd like to mention radare's rabin2 tool. The output will defiantly not be perfect. But, it will give you an idea (or sort of a prediction, give it a try!).\nYou can do:\n<pre><code>rabin2 -I a.out | grep lang\n</code></pre>\nIt will output:\n<pre><code>$ rabin2 -I a.out | grep lang\nlang     c++\n</code></pre>\nHere <pre><code>-I</code></pre> flag extracts binary information.\n",
            "votes": "3",
            "user": "R4444",
            "time": "Mar 9, 2021 at 3:01",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I don't know of any such tools. In fact, it's really not that easy to make one either since the executable doesn't directly identify which language was used to make it.\nRemember, the computer only understands machine code. To complicate matters, several languages could be used to create one executable.\nSo could it be done? Well, to some degree. It could work something like this:\n\nSome languages requires particular sets of libraries. These may be used to identify language, like VCRUNTIME*.DLL for Visual C++. It won't catch dynamic loading though.\nDifferent languages use different patterns/organization of code which may be identified/fingerprinted (ie. an object in your high level language may be compiled a certain way)\nDifferent compilers optimize and behave differently. I'm sure it's possible to fingerprint compiled code. Now, as new versions of the compiler is released, those fingerprints must be updated accordingly for the different optimization levels.\n\nIt will not be a perfect solution, and for code that tries to obfuscate how it works, like malware, I suspect it will be difficult to automatically identify.\nIt would likely be quite difficult to differentiate between assembly languages/compilers (ie. x64 assembly in FASM vs x64 in NASM).\nSelf-contained executables for some (very) high level languages are typically more easily identifiable. If not the language itself, at least the platform (ie. .NET or JVM).\n",
            "votes": "2",
            "user": "Glorfindel",
            "time": "Mar 21, 2021 at 11:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}