{
    "title": "Reverse engineering a command line argument using angr for an aarch64 binary",
    "link": "https://reverseengineering.stackexchange.com/questions/25404/reverse-engineering-a-command-line-argument-using-angr-for-an-aarch64-binary",
    "content": "I am trying to reverse engineer a aarch64 binary using angr to find the required command line argument to get a desired result. From the binary I am able to extract the required length of the argument. I followed the previous examples in angr to extract the solution in bytes. Whenever I am restricting the result to only printable characters the angr is not giving any result but after removing the constraint angr provides one possible solution for the problem. The result of angr is as follows:\n\\xc7_\\xb0\\xb1>)9\\x9f\\x00\\x82+\\xe2ms\\x90\\x85\\xbd\\xdd\\xebqyv1\\x86\\x82q]\\xe9i\\xc3\\xed(\\x1c\\xdd\\xfd\\xf0\\x9dgx\nAs per my understanding this doesn't mean anything and also is not the desired answer. Please let me know if I am missing something. Below is the code I am using:\n<pre><code>def get_possible_flags():\np = angr.Project(\"test\", load_options={'main_opts': {'arch': 'aarch64'}})\nkey_bytes = [claripy.BVS(\"byte_%d\" % i, 8) for i in range(39)]\narg1 = claripy.Concat(*key_bytes)\ninitial_state = p.factory.entry_state(args=[\"test\", arg1], add_options={\"BYPASS_UNSUPPORTED_SYSCALL\"})\nsm = p.factory.simulation_manager(initial_state)\nsm.explore(find=lambda s: b\"correct\" in s.posix.dumps(1),avoid=lambda s: b\"wrong\" in s.posix.dumps(1))\ns = sm.found[0]\nprint(\"Found.........................\")\nprint(s.posix.dumps(1))\npossible_values = [ s.solver.eval_upto(arg1, 100, cast_to=bytes)]\npossibilities = tuple(itertools.product(*possible_values))\nreturn possibilities\n</code></pre>\n",
    "votes": "2",
    "answers": 0,
    "views": "414",
    "tags": [
        "angr",
        "aarch64"
    ],
    "user": "Sayan Mandal",
    "time": "Jun 26, 2020 at 19:53",
    "comments": [],
    "answers_data": []
}