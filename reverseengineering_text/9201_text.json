{
    "title": "IDA Pro: Platform-independent way to check if an instruction is a jump",
    "link": "https://reverseengineering.stackexchange.com/questions/9201/ida-pro-platform-independent-way-to-check-if-an-instruction-is-a-jump",
    "content": "I am looking for a way to tell if an instruction is a jump instruction. Of course, I would like to avoid checking all possible jump mnemonics for all possible CPU architectures.\nI thought one may check the belonging xref type. Yet, there are several different types possible: <pre><code>Code_Near_Jump</code></pre> <pre><code>Code_Far_Jump</code></pre> but also <pre><code>Data_Read</code></pre> (for indirect jumps). This approach looks complicated and not very reliable to me.\nFor <pre><code>call</code></pre> instructions, there is <pre><code>idaapi.is_call_insn(addr)</code></pre>. Is there a similar thing for jumps?\n",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "idapython"
    ],
    "user": "langlauf.io",
    "time": "Jun 22, 2015 at 9:29",
    "comments": [],
    "answers_data": [
        {
            "content": "For ideas look at https://github.com/trailofbits/mcsema/blob/master/tools/mcsema_disass/ida/get_cfg.py\nHere's an example of how to get the mnemonic of the entrypoint opcode:\n<pre><code>import idaapi\nimport idautils\n\nea = idaapi.get_screen_ea()  // Gets the entrypoint VA\nidautils.DecodeInstruction(ea).get_canon_mnem() // e.g. push or jne\n</code></pre>\nI'd used that technique recently, checked the example works.\nEssentially if you can get the VA of an instruction, then you can use DecodeInstruction or DecodePreviousInstruction in idautils.\nThen you can use the consts that Trail of bits used e.g\n<pre><code>COND_BRANCHES = [\\\nidaapi.NN_ja,\\\nidaapi.NN_jae,\\\nidaapi.NN_jb,\n....\n</code></pre>\nfunction docs here - https://www.hex-rays.com/products/ida/support/idapython_docs/\n",
            "votes": "4",
            "user": "evandrix",
            "time": "Jul 12, 2017 at 4:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Did you try that on other platforms? I just tried it on MIPS and it did not work. If you look at the SDK, those constants seem pretty intel-specific.</span>",
                    "time": null
                },
                {
                    "user": "JoeKir",
                    "text": "<span class=\"comment-copy\">I have not, however I think you are correct. See this reference for the supported ida processors <a href=\"https://www.hex-rays.com/products/ida/support/idadoc/618.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idadoc/618.shtml</a>  the constants that you need for MIPS are here <a href=\"https://www.hex-rays.com/products/ida/support/idapython_docs/\" rel=\"nofollow noreferrer\">hex-rays.com/products/ida/support/idapython_docs</a> e.g.<code>MIPS_null = 0  MIPS_add = 1  MIPS_addu = 2</code></span>",
                    "time": null
                },
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Sadly, it seems that the only way to do this is by detecting jump xrefs. I need to check, but I think it might be a problem when jumps are to non-existent addresses. Will update after checking.</span>",
                    "time": null
                }
            ]
        }
    ]
}