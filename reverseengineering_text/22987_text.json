{
    "title": "Memory modified at jump far",
    "link": "https://reverseengineering.stackexchange.com/questions/22987/memory-modified-at-jump-far",
    "content": "Observing a trace of Wow64 switching on Windows 7, the following situation makes me confused\n<pre><code>...\n0x77491dbe  64 ff 15 c0 00 00 00  call fs:[0xc0]          ; syswow64\ntdll.dll\n0x74632320  ea 1e 27 63 74 33 00  jmp far 0x33:0x7463271e ; system32\\wow64cpu.dll\n0x7463271e  67 44 8b 04 24        mov r8d, [esp]          ; system32\\wow64cpu.dll\n...\n</code></pre>\nThe first instruction is something similar with X86SwitchTo64BitMode, the second one is a switch back to 64-bit mode. So <pre><code>wow64cpu.dll</code></pre> has been actually mapped into two different code segments: <pre><code>cs = 23</code></pre> for compat mode (second instruction) and <pre><code>cs = 33</code></pre> for 64-bit mode (third instruction). \nHowever I cannot find the second instruction (<pre><code>jmp far...</code></pre>) in the corresponding dll. There are <pre><code>ea 1e 27 b6 78...</code></pre> at <pre><code>0x74632320</code></pre>, not <pre><code>ea 1e 27 64...</code></pre> as being observed in the trace.\nWas <pre><code>wow64cpu.dll</code></pre> modified when being mapped into the memory?\n",
    "votes": "1",
    "answers": 0,
    "views": "138",
    "tags": [
        "windows",
        "x86",
        "x86-64",
        "tracing"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Jan 13, 2020 at 16:10",
    "comments": [],
    "answers_data": []
}