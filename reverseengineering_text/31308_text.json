{
    "title": "Setting a breakpoint on a shared library's decompiled exported function, and making Ghidra actually stop on that function when debugging a client code",
    "link": "https://reverseengineering.stackexchange.com/questions/31308/setting-a-breakpoint-on-a-shared-librarys-decompiled-exported-function-and-mak",
    "content": "I am very new to Ghidra, so please accept my apologies if my question sounds too simple. Despite the poor quality of the Internet in my country, I tried my best to find an answer online before asking but I could not find much.\nImagine we have a Linux shared object named <pre><code>CustLib.so</code></pre>, that exports one single function named <pre><code>Func</code></pre>.\nFurthermore, imagine a program (let's call it <pre><code>ClientProg</code></pre>) imports <pre><code>Func</code></pre> from <pre><code>CustLib.so</code></pre> and calls it from its <pre><code>main</code></pre>.\nWhat I have been trying to do with Ghidra is:\n\nLoad <pre><code>CustLib.so</code></pre> into Ghidra, Analyze it, and put a breakpoint somewhere within the decompiled code pertaining to <pre><code>Func</code></pre>.\n\nLoad <pre><code>ClientProg</code></pre> into Ghidra, Analyze it, and start it in the Debugger.\n\nWait until <pre><code>ClientProg</code></pre> calls <pre><code>Func</code></pre>, at which point I expect Ghidra to break on the breakpoint I had previously set at <pre><code>Func</code></pre>.\n\n\nTo my surprise, the last step above never happens. <pre><code>ClientProg</code></pre> runs from start to completion (in GDB IN-VM mode), without ever breaking on <pre><code>Func</code></pre>.\nCould I ask whether I am actually missing something? Or am I expecting an unsupported functionality? Many thanks.\n",
    "votes": "3",
    "answers": 0,
    "views": "345",
    "tags": [
        "ghidra",
        "linux"
    ],
    "user": "ElenaKarimi",
    "time": "Dec 25, 2022 at 14:09",
    "comments": [
        {
            "user": "raspiduino",
            "text": "I don't think it will work like that. If you put a run <pre><code>ClientProg</code></pre> in Ghidra, only breakpoints in <pre><code>ClientProg</code></pre> will hit, not <pre><code>CustLib.so</code></pre>. Instead, you should do something like start debugging the <pre><code>.so</code></pre> but with the application path (not the file path) pointing to <pre><code>ClientProg</code></pre>, so <pre><code>ClientProg</code></pre> can be started and <pre><code>CustLib.so</code></pre> will be debugged. I don't know how to do this in Ghidra (due to my lack experiences with Ghidra), but that is how I would do in IDA\n",
            "time": null
        },
        {
            "user": "ElenaKarimi",
            "text": "Thanks a lot! @raspiduino\n",
            "time": null
        }
    ],
    "answers_data": []
}