{
    "title": "Find the C++ STL functions in a binary",
    "link": "https://reverseengineering.stackexchange.com/questions/3889/find-the-c-stl-functions-in-a-binary",
    "content": "I have a binary file (actually, an operating system for an ARM embedded device which also contains some high-level apps (hard coded in the user interface)).\nI know some parts of the operating system are from C++ code, so it is likely the binary contains the C++ STL.\nHowever, I don't know much about the STL.\nWould you have a method to find the address of the STL functions?\n(the basic method of searching for the \"map\", \"vector\", ... string was unsuccessful and I don't know any specific feature I could search for in this case)\nIs there some kind of signature for the STL functions?\nThanks!\nAdditional informations: I use IDA. I can run the OS with a GDB. I know the address of much of the standard C functions (ctype/stddio/...).\n",
    "votes": "5",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ida",
        "binary-analysis",
        "c++",
        "arm",
        "operating-systems"
    ],
    "user": "m4524t",
    "time": "Mar 17, 2014 at 17:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "What is the operating system? Why do you think it uses C++ (as opposed to plain C), and even if so, why do you think it uses STL?\n",
            "time": null
        },
        {
            "user": "m4524t",
            "text": "@JasonGeffner : IDA always do this when I disassemble x86 executables. In this case (is it because it is ARM? I don't know.), IDA did not find any standard function.\n",
            "time": null
        },
        {
            "user": "m4524t",
            "text": "@IgorSkochinsky : The operating system is a proprietary operating system (based on Nucleus OS). I'd like to, but I cannot give you the name. It uses C++ as there are some C++ structures left as debug strings. I have no idea if it really use STL, but if it does not, I'd like to be sure about it.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Libraries like STL or Boost are tricky. Because they're heavily template-based and most of their code is generated at compile time, it's pretty difficult to make FLIRT-style signatures for them. Too much depends on the specific compiler, build options, optimization settings and so on, so unless you match them pretty closely when generating signatures, you're unlikely to get many good hits.\nHowever, you may be able to find some signs of them. For example, the typical <pre><code>std::string</code></pre> implementation in some cases throws exceptions <pre><code>length_error</code></pre> or <pre><code>out_of_range</code></pre>. You might be able to find references to the error text or the exception names. Other than that I think there's not much you can look for besides recognizing a specific implementation from the actual code.\nHowever, since you mention it's an RTOS, I highly doubt it's using STL. In an OS, any non-deterministic behavior is a bad thing, and with STL you can get an exception basically at any time. They may use some limited C++ for better encapsulation but any high-level classes are likely to be custom-made and not from STL or Boost.\n",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Mar 17, 2014 at 17:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "m4524t",
                    "text": "<span class=\"comment-copy\">Maybe I should have been more clear about it. Since it is on an embedded device, the OS also includes the whole user interface and some kind of \"apps\" hard-coded in the user-interface. The low-level of the OS is in C/assembly.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Well, okay, in that case it's plausible that the UI part is done in C++. But that's still not a sure guarantee it's using STL.</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">Yeah, from the little I know of embedded development, they rarely use templates, and if they do use/have an STL, it is likely to be a cut-down/optimized one (i.e not your standard g++ STL).</span>",
                    "time": null
                },
                {
                    "user": "fileoffset",
                    "text": "<span class=\"comment-copy\">The other thing that makes this difficult, is that a lot of STL/template code are generated inline, so there aren't even any function calls to label...</span>",
                    "time": null
                },
                {
                    "user": "m4524t",
                    "text": "<span class=\"comment-copy\">I tried to search for strings related to the two exceptions you gave. None of these have to do with STL. Thus, you are surely right. There is probably no \"standard\" STL (or it might be a version without any specific function). Thanks to all of you!</span>",
                    "time": null
                }
            ]
        }
    ]
}