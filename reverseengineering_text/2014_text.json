{
    "title": "How can one extract the appended data of a Portable Executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable",
    "content": "How do you reliably extract appended data in a Portable Executable?\n",
    "votes": "9",
    "answers": 3,
    "views": "10k",
    "tags": [
        "pe"
    ],
    "user": "Ange",
    "time": "May 6, 2013 at 10:59",
    "comments": [
        {
            "user": "Ange",
            "text": "(I was asked in relation with this question)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Just to clarify: the appended data - also called overlay - is the part of a PE file that is not covered by the header.\n\nBecause of some tricky conditions in the PE file format, it might be difficult to determine in some extreme case, so it's better to rely on a robust library such as pefile.\nHere is a simple Python script that relies on pefile to extract the appended data:\n<pre><code>import pefile\nimport sys\n\nfilename = sys.argv[1]\nwith open(filename, \"rb\") as s:\n    r = s.read()\n\npe = pefile.PE(filename)\noffset = pe.get_overlay_data_start_offset()\n\nwith open(filename + \".app\", \"wb\") as t:\n    t.write(r[offset:])\n</code></pre>\nuse with your filename as argument.\n\nPersonally, I usually do it with Hiew - as Hiew is faster to start than anything else, and also PE-robust:\n\ngo at appended data start\n\n\nin <pre><code>Hex</code></pre> or <pre><code>ASM</code></pre> mode, press F8 to view PE header information\nAlt+F2 to go at appended data start\n\nselect until the end\n\n\nKeypad-<pre><code>*</code></pre> to start selection\nCtrl+End to go at bottom of the file\nKeypad-<pre><code>*</code></pre> again to finish selection\n\nF2 to write selection to file\n",
            "votes": "10",
            "user": "Ange",
            "time": "May 6, 2013 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">You may want to skip an existing Authenticode signature as well.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, the Authenticode signature must be last in the file or it will fail validation.  You cannot (any more) append data after the signature.</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">There could be a signature at the end of the appended data, so one might not want to select until the bottom of the file.</span>",
                    "time": null
                },
                {
                    "user": "evlncrn8",
                    "text": "<span class=\"comment-copy\">if there is a signature then it'll be recorded in the data directory, so you have the start offset and size there, its pretty simple</span>",
                    "time": null
                },
                {
                    "user": "evandrix",
                    "text": "<span class=\"comment-copy\"><a href=\"https://asciinema.org/a/171993\" rel=\"nofollow noreferrer\">asciinema.org/a/171993</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It is not that hard to do manually.\n\nFind the PE header from the MZ header and determine the location of the section table.\nWalk the section table, and determine the maximum value of <pre><code>PointerToRawData</code></pre> + <pre><code>SizeOfRawData</code></pre>. (note: these values are subject to alignment using the <pre><code>FileAlignment</code></pre> member of the <pre><code>IMAGE_OPTIONAL_HEADER</code></pre>).\nUse the determined maximum as the file offset to the overlay data.\n\nNote that some installers/file formats do not actually use this calculation, but they instead have a small trailer at the end of file which points to the beginning of the payload. For example, ZIP file format works like that - that's why a self-extracting ZIP can be extracted irregardless of whether the unpacker stub is PE, DOS MZ, ELF, Mach-O or anything else.\n",
            "votes": "6",
            "user": "Igor Skochinsky",
            "time": "May 6, 2013 at 11:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">no, this is not sufficient.  SizeOfRawData can have any value, even gigabytes large in a small file.  It's bound by VirtualSize at that point.  <i>Accurately</i> determining the end of the image is not trivial.</span>",
                    "time": null
                },
                {
                    "user": "Karsten Hahn",
                    "text": "<span class=\"comment-copy\">@peterferrie What would be a good algorithm? I am actually trying to implement one. pefile does it roughly as suggested here.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">@Veitch, my answer to your other question now has sample code and a description, which should be what you need.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Another option is the mewrev/pe Go package:\n<pre><code>package main\n\nimport (\n   \"github.com/mewrev/pe\"\n   \"io/ioutil\"\n   \"log\"\n   \"os\"\n)\n\nfunc main() {\n   file, e := pe.Open(\"vs_BuildTools.exe\")\n   if e != nil {\n      log.Fatal(e)\n   }\n   y, e := file.Overlay()\n   if e != nil {\n      log.Fatal(e)\n   }\n   ioutil.WriteFile(\"vs_BuildTools.overlay\", y, os.ModePerm)\n}\n</code></pre>\n",
            "votes": "0",
            "user": "Zombo",
            "time": "Jan 19, 2021 at 2:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}