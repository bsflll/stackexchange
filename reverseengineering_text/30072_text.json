{
    "title": "How to use SHL/SAL, LEA and Add for arithmetic operations",
    "link": "https://reverseengineering.stackexchange.com/questions/30072/how-to-use-shl-sal-lea-and-add-for-arithmetic-operations",
    "content": "I'm having problem computing the following arithmetic questions using SHL/SAL, LEA and ADD, and hoping someone can help explain or find the best ways to apply those:\n\nMultiply a variable by 24\nMultiply a variable by 1000\n",
    "votes": "1",
    "answers": 1,
    "views": "927",
    "tags": [
        "assembly"
    ],
    "user": "Evion Wong",
    "time": "Feb 22, 2022 at 21:46",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Sounds a bit like homework/assignment.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>SHL</code></pre> and <pre><code>SAL</code></pre> are the same instruction, they do the same: Shift bits to the left.\nShifting bits to the left is equivalent to multiplying by two.\nFor example, if you have the number 3 in the register AX, it would look something like this:\n<pre><code>mov ax, 3 ; ax = 3 = 0000 0000 0000 0011\nsal ax, 1 ; ax = 6 = 0000 0000 0000 0110 \n</code></pre>\n<pre><code>LEA</code></pre> allows you to perform a memory-addressing computation in the instruction, so you can use it to calculate an effective address (without accessing it).\nFor example:\n<pre><code>mov rax, 0x100\nmov rdi, 0x200\nlea rax, [rax + rdi*2 + 0x10]\n; rax = rax + rdi*2 + 0x10 \n; rax = 0x100 + 0x200*2 + 0x10\n; rax = 0x100 + 0x400 + 0x10\n; rax = 0x510\n</code></pre>\nHowever, not all operations are valid addressing modes, you should check Intel SDM Volume 1 \"Basic Architecture\":\n\nSo finally, to address your homework question, let's see:\n\nMultiply a variable by 24.\n\nWith shifts you can only multiply by powers of two, the same happens with <pre><code>lea</code></pre>, however, you know that <pre><code>24 = 3*8</code></pre>, so you could do add 3 times the variable, and then multiply it by <pre><code>8</code></pre>.\n<pre><code>; rax = var\nlea rax, [rax + rax*2] ; rax = 3*var\nsal rax, 3             ; rax = 3*var*8\n</code></pre>\nFor 1000 we could do something similar, we know that <pre><code>1000</code></pre> is <pre><code>2*5*2*5*2*5</code></pre>\n<pre><code>lea rax, [rax + rax*4] ; rax = 5*var\nlea rax, [rax + rax*4] ; rax = 5*5*var\nlea rax, [rax + rax*4] ; rax = 5*5*5*var\nsal rax, 3             ; rax = 8*125*var = 1000*var\n</code></pre>\nAn alternative could be:\n<pre><code>lea rdi, [rax + rax*2] ; rdi = 3*var\nsal rax, 7             ; rax = var*128\nsub rax, rdi           ; rax = var*128 - var*3 = var * 125\nsal rax, 3             ; rax = var*125 * 8\n</code></pre>\n",
            "votes": "2",
            "user": "Marco",
            "time": "Feb 23, 2022 at 0:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}