{
    "title": "IDA scripting - get local variable by its name",
    "link": "https://reverseengineering.stackexchange.com/questions/11184/ida-scripting-get-local-variable-by-its-name",
    "content": "During the debugging I can see all the function's local variables in tab Locals (Debugger -> Debugger Windows -> Locals(HEXRAYS)). For example I have a struct variable \n<pre><code>a1    0x891E1160:{pBuf=0x7FC52F20,size=0x100}\n</code></pre>\nI would like to write a python script to dump such data into a file. The only thing I cannot understand is how to get value of local variable by it's name. It should be something like \n<pre><code>fdump = open(filename, 'wb')\nptr = get_var('a1')['pBuf']\nsize = get_var('a1')['size']\nbuf = idc.GetManyBytes(ptr, size, True)\nfdump.write(buf)\nfdump.close()\n</code></pre>\nIs there a function like <pre><code>get_var</code></pre> in idautils, idc, or idaapi?\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "python"
    ],
    "user": "Maksim Surov",
    "time": "Oct 27, 2015 at 14:59",
    "comments": [],
    "answers_data": [
        {
            "content": "This is not full solution, but probably will help (assuming that you have IDA 6.6+ version)\n<pre><code># Display user-defined local variable information\n# First defined the visitor class\nclass dump_lvar_info_t(idaapi.user_lvar_visitor_t):\n\n    def __init__(self):\n        idaapi.user_lvar_visitor_t.__init__(self)\n        self.displayed_header = False\n        return\n\n    def get_info_qty_for_saving(self):\n        return 0\n\n    def get_info_for_saving(self, lv):\n        return False\n\n    def handle_retrieved_info(self, lv):\n\n        try:\n            if not self.displayed_header:\n                self.displayed_header = True;\n                print \"------- User defined local variable information\"\n\n            print \"Lvar defined at %x\" % (lv.ll.defea, )\n\n            if len(str(lv.name)):\n                print \"  Name: %s\" % (str(lv.name), )\n\n            if len(str(lv.type)):\n                #~ print_type_to_one_line(buf, sizeof(buf), idati, .c_str());\n                print \"  Type: %s\" % (str(lv.type), )\n\n            if len(str(lv.cmt)):\n                print \"  Comment: %s\" % (str(lv.cmt), )\n        except:\n            traceback.print_exc()\n        return 0\n\n    def handle_retrieved_mapping(self, lm):\n        return 0\n\n    def get_info_mapping_for_saving(self):\n        return None\n\n# Now iterate over all user definitions\ndli = dump_lvar_info_t();\nidaapi.restore_user_lvar_settings(entry_ea, dli)\n</code></pre>\nI don't remember where exactly this code originates from, probably from IDAPython sources on google code. Here you have iteration over variables, all the rest should be doable.\n",
            "votes": "1",
            "user": "w s",
            "time": "Oct 27, 2015 at 15:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You can use the following function in order to get the local variable value by its name(IDA 7+):\n<pre><code>import idc \nimport ida_frame \nimport ida_struct \n\ndef get_local_var_value_64(loc_var_name):\n    frame = ida_frame.get_frame(idc.here())\n    loc_var = ida_struct.get_member_by_name(frame, loc_var_name)\n    loc_var_ea = loc_var.soff + idc.GetRegValue(\"RSP\")\n    # In case the variable is 32bit, use get_wide_dword() instead:\n    loc_var_value = idc.read_dbg_qword(loc_var_ea) \n    return loc_var_value\n</code></pre>\n",
            "votes": "0",
            "user": "0xgalz",
            "time": "Jan 3, 2019 at 13:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "yurenchen",
                    "text": "<span class=\"comment-copy\">ida 7.4, arm64, seems got nil from <code>ida_struct.get_member_by_name</code>.  // oh,  it only handle local var, not func arg.</span>",
                    "time": null
                },
                {
                    "user": "yurenchen",
                    "text": "<span class=\"comment-copy\">sometimes still got nil // seems reg var and other</span>",
                    "time": null
                }
            ]
        }
    ]
}