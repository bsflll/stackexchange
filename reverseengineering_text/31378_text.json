{
    "title": "Reversing an RSA function throws pkcs decoding error",
    "link": "https://reverseengineering.stackexchange.com/questions/31378/reversing-an-rsa-function-throws-pkcs-decoding-error",
    "content": "I'm working my way through reversing a toy challenge, and I find myself stuck. The app is pretty simple, it spits out a blob of text (e.g. \"3b880a90e476d66569d9d5dfb5cd755af3f...\"). Dumping the code, I can see that it builds an RSA public key by directly specifying <pre><code>n</code></pre> and <pre><code>e</code></pre>:\n<pre><code>myRsa->n=v4;\nmyRsa->e=v5;\n</code></pre>\nThen it encrypts it's payload:\n<pre><code>encodedLength = RSA_public_encrypt(flen, from, to, myRsa, 1);\n...\nprintf(\"%s\",to);\n</code></pre>\nMy goal: steal the payload. Debugging tells me flen is 240, encodedLength is 100. I dumped the <pre><code>e</code></pre> for the public key as bytes, and wrote some code to generate my own RSA public/private key, patching <pre><code>e</code></pre> to be mine (<pre><code>n</code></pre> is the same for both, so left unpatched).\n<pre><code>unsigned long bytes_read = fread(in, sizeof(unsigned char), size, file);\n    fclose(file);\n\n    for (size_t i = 0; i < bytes_read; i++) {\n        if (memcmp(nCharOrig, in + i, 258) == 0) {\n            memcpy(in + i, nCharNew, 258);\n            printf(\"Found and patched at %d\n\", i);\n        };\n    }\n</code></pre>\nPatch works, I get a different blob of text, which in theory is the same payload, encrypted with my public key. So I try to decrypt it:\n<pre><code>unsigned char output[8000];\n    RSA *rsa = RSA_new();\n    EVP_PKEY *privkey;\n    FILE *fp;\n\n    privkey = EVP_PKEY_new();\n    fp = fopen (\"private.pem\", \"r\");\n    PEM_read_PrivateKey( fp, &privkey, NULL, NULL);\n    fclose(fp);\n\n    rsa = EVP_PKEY_get1_RSA(privkey);\n    int decryptLength = RSA_private_decrypt(256, input, output, rsa, 1);\n</code></pre>\nWeirdly I get back decryptLength = -1, and an error:\n<pre><code>error:0407109F:rsa routines:RSA_padding_check_PKCS1_type_2:pkcs decoding error</code></pre>\nI'm at a loss.. what am I missing here?\n",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "decryption",
        "encryption",
        "cryptography",
        "openssl"
    ],
    "user": "XeroxDucati",
    "time": "Jan 9, 2023 at 22:46",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "Have you confirmed that the keys you generated are valid? (<pre><code>openssl verify</code></pre>)\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "Can you share your toy challenge? Also whats the value of <pre><code>e</code></pre>?\n",
            "time": null
        },
        {
            "user": "hairlessbear",
            "text": "If you're able to patch the app, is there a reason you can't patch it to dump the unencrypted payload instead? Either that or get the unencrypted payload via the debugger?\n",
            "time": null
        },
        {
            "user": "XeroxDucati",
            "text": "@hairlessbear I actually did steal it via debugger, that was easy :) Doing it this way as a challenge to myself to finally understand openssl/RSA code reversing correctly.\n",
            "time": null
        },
        {
            "user": "XeroxDucati",
            "text": "@MegaTonnage yep, wrote them out to files using the openssl api, and verified them as good -- both the old stolen e/n and new ones I generated.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Turns out if you're gonna get hex strings printed to console, you have to convert them back to a binary char array before decrypting..\n",
            "votes": "1",
            "user": "XeroxDucati",
            "time": "Jan 17, 2023 at 14:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}