{
    "title": "Auto-loaded type information and relationship between .til and .sig: how to find links and how to change them (config)?",
    "link": "https://reverseengineering.stackexchange.com/questions/30854/auto-loaded-type-information-and-relationship-between-til-and-sig-how-to-find",
    "content": "NB: most of my targets are PE files for <pre><code>pc</code></pre>, so I'll stick with that for the question. But I suppose the principle holds also for the related directories, like <pre><code>$IDADIR/sig/arm</code></pre>.\nLet's say I load a PE file, which happens to be a 64-bit Windows driver. I may then see in the Output pane (redacted for brevity):\n<pre><code>IDA is analysing the input file...\nYou may start to explore the input file right now.\n...\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nPropagating type information...\n</code></pre>\nNow \"Windows Driver Kit 7/10 64bit\" corresponds to <pre><code>$IDADIR/sig/pc/ms64wdk.sig</code></pre> (found with <pre><code>dumpsig</code></pre>). Fair enough. I also know that <pre><code>$IDADIR/sig/pc/autoload.cfg</code></pre> governs what type information library (<pre><code>.til</code></pre>) file gets loaded based on the loading of a signature.\nAlas, there is no entry that maps the aforementioned <pre><code>$IDADIR/sig/pc/ms64wdk.sig</code></pre> to <pre><code>ntddk64_win7</code></pre> and <pre><code>ntapi64_win7</code></pre>. Yet, when I use Produce file -> Dump database to IDC file... the resulting <pre><code>.idc</code></pre> file has the following calls among its first actions (again redacted for brevity):\n<pre><code>#define UNLOADED_FILE   1\n#include <idc.idc>\n\nstatic main(void) {\n    // ...\n    GenInfo();            // various settings\n    // ...\n}\n\nstatic GenInfo(void) {\n\n    // ...\n    add_default_til(\"ntddk64_win7\");\n    add_default_til(\"ntapi64_win7\");\n}\n</code></pre>\nQuestions:\n\nHow does IDA make the connection between the FLIRT (<pre><code>.sig</code></pre>) and the <pre><code>.til</code></pre> here? (Apparently <pre><code>$IDADIR/sig/pc/autoload.cfg</code></pre> has no bearing.)\nGiven there are also other <pre><code>.til</code></pre> files like <pre><code>ntddk64_win10.til</code></pre>, <pre><code>ntapi64_win10.til</code></pre>:\n\nHow can I configure IDA to load those instead of the somehow implicit <pre><code>ntddk64_win7</code></pre> and <pre><code>ntapi64_win7</code></pre> respectively?\nAssuming I can't override the behavior or have an existing IDB which had the implicit <pre><code>ntddk64_win7</code></pre> and <pre><code>ntapi64_win7</code></pre> applied: If I now use <pre><code>add_default_til(\"ntddk64_win10\")</code></pre> and <pre><code>add_default_til(\"ntapi64_win10\")</code></pre> (no matter whether IDC or IDAPython) will this adversely affect existing usage of type information (e.g. enums which were imported from standard enums)? How does it affect existing usage?\n\n\nWhat is the relation between the <pre><code>ntddk64.til</code></pre> and, say, <pre><code>ntddk64_vista.til</code></pre>, <pre><code>ntddk64_win7.til</code></pre>, <pre><code>ntddk64_win8.til</code></pre>, <pre><code>ntddk64_win81.til</code></pre> and <pre><code>ntddk64_win10.til</code></pre>? Is <pre><code>ntddk64.til</code></pre> the superset? Some subset?\n\nPS: Pointers to official documentation very much welcome.\n",
    "votes": "2",
    "answers": 0,
    "views": "206",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Sep 5, 2022 at 15:34",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Meanwhile I noticed, that a bunch of those names are hardcoded in some of the loaders, processors and plugins that come with IDA, as well as the <pre><code>ida.dll</code></pre> and <pre><code>ida64.dll</code></pre>. So there's clearly more than <pre><code>autoload.cfg</code></pre> at work here.\n",
            "time": null
        }
    ],
    "answers_data": []
}