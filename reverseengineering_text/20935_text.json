{
    "title": "Decryption loops",
    "link": "https://reverseengineering.stackexchange.com/questions/20935/decryption-loops",
    "content": "I'm reversing a CTF binary and I found a decryption loop decompiled by IDA like this:\n<pre><code>for ( i = 0; i < n; ++i )\n  {\n    v22 = *((_BYTE *)sub_5657D89B + i);\n    v0 = v22 ^ 0x90;\n    v1 = strlen(&s);\n    *((_BYTE *)src + i) = *(&s + i % v1) ^ v0;\n  }\n</code></pre>\nThe variable <pre><code>&s</code></pre> is pointing to the stack with these other bytes:\n<pre><code>  s = 0xF9u;\n  v4 = 0xFCu;\n  v5 = 0xFFu;\n  v6 = 0xE6u;\n  v7 = 0xF5u;\n  v8 = 0xE0u;\n  v9 = 0xF1u;\n  v10 = 0xF3u;\n  v11 = 0xFBu;\n  v12 = 0xF9u;\n  v13 = 0xFEu;\n  v14 = 0xF7u;\n  v15 = 0xFDu;\n  v16 = 0xE9u;\n  v17 = 0xF3u;\n  v18 = 0xFFu;\n  v19 = 0xF4u;\n  v20 = 0xF5u;\n  v21 = 0;\n</code></pre>\nI really don't get the purpose of the division with v1 here: <pre><code>*(&s + i % v1)</code></pre>. The variable n is equal to 0x140.\n",
    "votes": "1",
    "answers": 1,
    "views": "347",
    "tags": [
        "binary-analysis",
        "decompilation"
    ],
    "user": "Kartone",
    "time": "Mar 20, 2019 at 21:57",
    "comments": [],
    "answers_data": [
        {
            "content": "Basically, it just to wrap the index at the length of the string.\nIn C it looks like something like this:\n<pre><code>src[i] = s[i % strlen(s)] ^ v0;\n</code></pre>\nFor instance, if the <pre><code>s</code></pre> is \"ABCD\", <pre><code>strlen(s)</code></pre> is 4. When <pre><code>i</code></pre> is equal to:\n\n4, <pre><code>4 % 4 == 0</code></pre>\n5, <pre><code>5 % 4 == 1</code></pre>\nand so on.\n",
            "votes": "4",
            "user": "wisk",
            "time": "Mar 20, 2019 at 22:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}