{
    "title": "Reconstruct control-flow graph from x86 instruction trace",
    "link": "https://reverseengineering.stackexchange.com/questions/9364/reconstruct-control-flow-graph-from-x86-instruction-trace",
    "content": "Can anyone suggest a free and preferably open source software tool that can reconstruct / build / generate a control-flow graph from a set of x86 execution traces of the same program?\nI found an interesting paper on this topic. However, I could not find their implementation.\nAny suggestions would be appreciated. Thanks!\n",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "x86",
        "control-flow-graph",
        "tracing"
    ],
    "user": "Benny",
    "time": "Jul 16, 2015 at 15:21",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "Not a duplicate, but related: Generating call graph for assembly instructions\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "Hi, could you update the link? The reference is dead.\n",
            "time": null
        },
        {
            "user": "Benny",
            "text": "@computereasy Both links work for me\n",
            "time": null
        },
        {
            "user": "Nora Huang",
            "text": "Can I ask what kind of tool you used for tracing x86 instruction. I am looking for a tool that can capture the instruction as well as the memory changes of a running program. Thank you so much.\n",
            "time": null
        },
        {
            "user": "Benny",
            "text": "@NoraHuang did you try Intel PIN?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I am sorry for this self-advertisement, but I am developing a tool here. My final goal is to recover the original control flow graph of virtualized binaries. But at a step of this, for visualization purpose, I have implemented a functionality to reconstruct the CFG of binaries from traces. The main implementation of this reconstrution is in the file <pre><code>src/lib/cap/graph.cpp</code></pre>, it has no problem in performance in constructing the basic block graph from traces of about 100K instructions (I have tested on obfuscated binaries whose traces are about 300K instructions). You can see several pdf files in the folders <pre><code>demo</code></pre> and <pre><code>results</code></pre>, I have generated them from execution traces.\nIf you are interested in, I am more than happy to answer any further question.\n",
            "votes": "2",
            "user": "Ta Thanh Dinh",
            "time": "Jul 17, 2015 at 0:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. Your project seems very interesting and I would like to build and play with it. However, I have some issues with libprotobuf. Which version does your project need? The version that comes with Ubuntu 14.04 doesn't seem to be compatible.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks a lot for your interest, Benny. I appreciate it very much. In fact you do not need protobuf to build the code. The protobuf is used for the communication between the instrumentation tool (Pin) and the concolic execution engine, but the engine is not fully published because it is not flexible enough and its performance is quite bad now. So I have changed the CMake file so that it can be built without protobuf, which errors do you get in building this code?</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">I will write a simple document to explain how to use it because there are some obscure technical details. But if you have any question, do not hestitate to ask me.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">I am very sorry Benny. Unfortunately, I have to close the projet since the discussion this morning with my collegues. I think this is not an issue about the confidentiality, but it is just not a suitable moment to publish the tool.</span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">No problem, please keep me posted when you decide to release the project again. Thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}