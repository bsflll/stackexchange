{
    "title": "How to perform SIGTRAP emulation with GDB?",
    "link": "https://reverseengineering.stackexchange.com/questions/2978/how-to-perform-sigtrap-emulation-with-gdb",
    "content": "I am trying to analyze a crackme file.\nWhen I open it with <pre><code>gdb</code></pre>, I firstly set its <pre><code>SIGTRAP</code></pre> handler with, e.g., <pre><code>int80.SIGTRAP</code></pre> handler address <pre><code>0x8011111</code></pre>.\nI caught it through <pre><code>catch syscall signal</code></pre> in <pre><code>gdb</code></pre>. And, there are some traps in the application, some <pre><code>int3</code></pre> interactions.\n<pre><code>0x80abcde - int3\n</code></pre>\nMy <pre><code>gdbinit</code></pre> file is set like this:\n<pre><code>b * 0x80abcde\ncommands 1\ncall (void)0x8011111(5)\ncontinue\nend\n</code></pre>\nIs this okay for emulation or do I need to still push the calling address on the stack ?\n",
    "votes": "7",
    "answers": 1,
    "views": "977",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "Eren Yagdiran",
    "time": "Oct 29, 2013 at 17:51",
    "comments": [],
    "answers_data": [
        {
            "content": "You could use the handle command instead, to pass the signal to the application.\nMaybe with something like:\n<pre><code>handle SIGTRAP nostop print pass\n</code></pre>\nGDB will:\n\nNot stop on SIGTRAP\nPass it to the application\nTell you when it get a SIGTRAP\n",
            "votes": "6",
            "user": "jvoisin",
            "time": "Oct 29, 2013 at 17:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Eren Yagdiran",
                    "text": "<span class=\"comment-copy\">i have 2 questions also.When i change the handle , how could i stop on my own breakpoints ? HW bps are ok for this ? When i changed the handle like you said , gdb prints \"Program terminated with SIGTRAP\" , what do you think about this ?</span>",
                    "time": null
                }
            ]
        }
    ]
}