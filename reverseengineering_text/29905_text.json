{
    "title": "What is this CRC32 algorithm (written in C), and how can it be written in Java or Python?",
    "link": "https://reverseengineering.stackexchange.com/questions/29905/what-is-this-crc32-algorithm-written-in-c-and-how-can-it-be-written-in-java-o",
    "content": "I've been trying to convert this CRC32 algorithm to Java or Python, but I haven't been successful, I believe it's because I'm not familiar enough with c.\nNote that I believe <pre><code>DAT_804818d0</code></pre> is the seed, which I still haven't found.\nThis was my naive attempt at converting the below code to Java (I suspect I've made numerous mistakes): https://pastebin.com/6XnxqaBp\n<pre><code>uint zz_801744d0_(byte *param_1,int param_2)\n\n{\n  byte *pbVar1;\n  byte *pbVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  byte bVar7;\n  bool bVar8;\n  int iVar9;\n  int iVar10;\n  uint uVar11;\n  uint uVar12;\n  \n  uVar11 = DAT_80481ad0;\n\n  //The code in this if statement appears to handle the first 4 bytes in a special manner\n  if (3 < param_2) {\n    pbVar1 = param_1 + 1;\n    param_2 = param_2 + -4;\n    pbVar2 = param_1 + 2;\n    bVar7 = *param_1;\n    pbVar3 = param_1 + 3;\n    param_1 = param_1 + 4;\n    uVar11 = ~((uint)bVar7 << 0x18 | (uint)*pbVar1 << 0x10 | (uint)*pbVar2 << 8 | (uint)*pbVar3);\n  }\n\n  iVar10 = 0;\n  if (0 < param_2) { //If the data was 4 bytes in size or less, we just return ~uVar11\n    if (8 < param_2) { //If the data was 12 bytes or more, the rest are handled in chunks of 8 bytes\n      bVar8 = false;\n      if ((-1 < param_2) && (param_2 < 0x7fffffff)) {\n        bVar8 = true;\n      }\n      if ((bVar8) && (uVar12 = param_2 - 1U >> 3, 0 < param_2 + -8)) {\n        do {\n          iVar10 = iVar10 + 8;\n          uVar11 = (uVar11 << 8 | (uint)*param_1) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          pbVar1 = param_1 + 2;\n          pbVar2 = param_1 + 3;\n          pbVar3 = param_1 + 4;\n          uVar11 = (uVar11 << 8 | (uint)param_1[1]) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          pbVar4 = param_1 + 5;\n          pbVar5 = param_1 + 6;\n          pbVar6 = param_1 + 7;\n          param_1 = param_1 + 8;\n          uVar11 = (uVar11 << 8 | (uint)*pbVar1) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar11 = (uVar11 << 8 | (uint)*pbVar2) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar11 = (uVar11 << 8 | (uint)*pbVar3) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar11 = (uVar11 << 8 | (uint)*pbVar4) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar11 = (uVar11 << 8 | (uint)*pbVar5) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar11 = (uVar11 << 8 | (uint)*pbVar6) ^\n                   *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n          uVar12 = uVar12 - 1;\n        } while (uVar12 != 0);\n      }\n    }\n    iVar9 = param_2 - iVar10;\n    if (iVar10 < param_2) { //Any remaining bytes are handled one at a time.\n      do {\n        bVar7 = *param_1;\n        param_1 = param_1 + 1;\n        uVar11 = (uVar11 << 8 | (uint)bVar7) ^ *(uint *)(&DAT_804818d0 + (uVar11 >> 0x16 & 0x3fc));\n        iVar9 = iVar9 + -1;\n      } while (iVar9 != 0);\n    }\n  }\n  return ~uVar11;\n}\n</code></pre>\n",
    "votes": "0",
    "answers": 0,
    "views": "227",
    "tags": [
        "c",
        "ghidra",
        "python",
        "java",
        "crc"
    ],
    "user": "Gamebuster19901",
    "time": "Jan 21, 2022 at 4:52",
    "comments": [
        {
            "user": "Robert",
            "text": "Do you need to use it in Java/Python or do you really need a native implementation? because often it is easier to include the executable/library the function is implemented in into a a custom library that has an interface to Java or Python so you can simple use the original implementation.\n",
            "time": null
        },
        {
            "user": "Gamebuster19901",
            "text": "I believe I need a non-native implementation. The binary was compiled for Wii architecture. I'm not aware of anything (other than emulation) which allows a PC to run portions of a Wii game binary.\n",
            "time": null
        }
    ],
    "answers_data": []
}