{
    "title": "ELF64 Reflective Loading [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17372/elf64-reflective-loading",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm looking for an ELF64 reflective loader, so I can download an ELF and execute it without saving to disk?\nIs anyone able to point me at one please?  Or a clear one for ELF32 so I can translate?\nthanks\n",
    "votes": "0",
    "answers": 1,
    "views": "580",
    "tags": [
        "malware",
        "elf"
    ],
    "user": "user7282391",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "Code for diskless loading of ELF Shared Library using Reflective DLL Injection\nhttps://github.com/nsxz/ReflectiveELFLoader \n\nCode for diskless loading of ELF Shared Library using Reflective DLL\n  Injection technique. Currently, this is only designed to work on\n  x86_64 (AMD64) architecture on Linux. I was originally hoping to be\n  able to expand this to other architectures and FreeBSD. However, I do\n  not have time to implement this on other architectures and since I\n  only need it to work on x86_64 on Linux this is the only portion I\n  have implemented.\n",
            "votes": "1",
            "user": "user22363",
            "time": "Feb 3, 2018 at 19:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user7282391",
                    "text": "<span class=\"comment-copy\">Hi thanks. I've seen your code already, I'm looking to load a static binary into a process which is already mapped to 0x40000, will it remap the code for whether it gets malloced?</span>",
                    "time": null
                },
                {
                    "user": "user22363",
                    "text": "<span class=\"comment-copy\">You should mention that you already see the code in your question, and it's not my code.</span>",
                    "time": null
                }
            ]
        }
    ]
}