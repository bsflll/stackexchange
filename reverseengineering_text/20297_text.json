{
    "title": "capturing the sub processes's PID of a process",
    "link": "https://reverseengineering.stackexchange.com/questions/20297/capturing-the-sub-processess-pid-of-a-process",
    "content": "When a program is executed, some processes may be created by the parent process. Especially, if a program is malware, created (or forked or even injected) sub-processes will be named as a systemic process such as svchost.exe.\nIs there any way to capture the PID of sub-processes in windows?\n",
    "votes": "0",
    "answers": 2,
    "views": "677",
    "tags": [
        "malware",
        "python",
        "process"
    ],
    "user": "hamid darabian",
    "time": "Jan 7, 2019 at 15:48",
    "comments": [],
    "answers_data": [
        {
            "content": "If commandline is required you can subscribe to WMI Win32_ProcessStartTrace events, here's an example in PowerShell:\n<pre><code>Register-WMIEvent -query \"SELECT * FROM Win32_ProcessStartTrace\" -SourceIdentifier \"testevent\" -action { $e = $Event.SourceEventArgs.NewEvent\nWrite-Host $e.ProcessName, \"started\" }\n</code></pre>\nTo stop notification call <pre><code>Unregister-Event Process-Started</code></pre>\nBut it might be a better solution to use Process Monitor and use the Process Tree functionality: \nAs an example I started a command prompt from PowerShell and then launched Notepad from that command prompt:\n",
            "votes": "1",
            "user": "Remko",
            "time": "Feb 11, 2019 at 9:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "As mentioned by anion, you can use several graphical applications to see this information.  One such application built-in to Windows is the Task Manager.  Right-click on the task bar and you will see it in that menu.\nIf you prefer command-line, you can use tasklist (again, built-in to Windows).\nIf you are trying to perform malware analysis, and you are looking for an automated solution, then I suggest using a sandbox.  A popular free and opensource one is Cuckoo Sandbox.\nIf you are analyzing the malware by hand, then you will have to look for the different ways that you mention.\nCreateProcess takes a pointer to a PROCESS_INFORMATION structure as its tenth argument.  After CreateProcess returns, you can look at this structure to find the PID of the child.  A simpler way would be to breakpoint on CreateProcess, modify the dwCreationFlags to include SUSPENDED, step-over the CreateProcess call, then run either Task Manager or tasklist to see the child process's PID.\nOpenProcess is easier.  It takes the PID as the third argument.  So when you see a call to OpenProcess, just look at the arguments to find the PID.\nDepending on which tools you are using, you may be able to script this, such as with IDA Python, OllyScript, or x64dbg's or WinDbg's built-in scripting.\n",
            "votes": "0",
            "user": "knowmalware",
            "time": "Jan 8, 2019 at 0:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "hamid darabian",
                    "text": "<span class=\"comment-copy\">Thank you very much, but I need a command-line solution to see when the process of malware is created, what processes will be forked (injected). Could you please clarify your solution for my case?</span>",
                    "time": null
                },
                {
                    "user": "knowmalware",
                    "text": "<span class=\"comment-copy\">Does <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist\" rel=\"nofollow noreferrer\">tasklist</a> do what you want?  If not, please explain further.</span>",
                    "time": null
                }
            ]
        }
    ]
}