{
    "title": "Need help understanding XOR cipher",
    "link": "https://reverseengineering.stackexchange.com/questions/19524/need-help-understanding-xor-cipher",
    "content": "I am trying to modify a save file for a game.  I think it is using an XOR cipher to encrypt it.  Looking though the disassembly I think I found the function that decrypts it.  I ran the assembly through a decompiler to get a better grip on what is going on.\nI am a C# programmer with some knowledge of C/C++.  I generally understand what is accomplished by this code, but there are some details I don't understand.\n<pre><code>int __fastcall DecryptBuffer(unsigned __int8 *a1, int a2, int a3, unsigned int a4, int a5)\n{\n  unsigned __int8 *v5;\n  unsigned __int8 *v6;\n  int result;\n  int v8;\n\n  v5 = a1;\n  v6 = &a1[a2];\n  result = a5;\n  v8 = a5 - (_DWORD)v5;\n  while ( v5 != v6 )\n  {\n    result = *v5 ^ *(unsigned __int8 *)(a3 + (unsigned int)&v5[v8] % a4);\n    *v5++ = result;\n  }\n  return result;\n}\n</code></pre>\nIt accepts as parameters:\n\n<pre><code>a1</code></pre> - a byte array\n<pre><code>a2</code></pre> - the length of the array\n<pre><code>a3</code></pre> - <pre><code>0xB19D425B</code></pre>\n<pre><code>a4</code></pre> - <pre><code>0x107</code></pre>\n<pre><code>a5</code></pre> - <pre><code>0x00</code></pre>\n\nFirst, I can't figure out the value of <pre><code>v8</code></pre>.  I don't know what <pre><code>(_DWORD)v5</code></pre> means, or why it is subtracted from zero.\nSecond, I don't know what <pre><code>(unsigned int)&v5[v8]</code></pre> is actually doing.  I take it to mean it is looking up a byte somewhere in the array, but is it retrieving a single byte and casting to an uint, or four bytes?\nHere is the disassembly:\n<pre><code>sub_301E44\nPUSH.W          {R4-R8,LR}\nMOV             R4, R0\nADDS            R6, R0, R1\nLDR             R0, [SP,#0x18+arg_0]\nMOV             R7, R2\nMOV             R8, R3\nSUBS            R5, R0, R4\nloc_301E54\nCMP             R4, R6\nBEQ             locret_301E6C\nADDS            R0, R5, R4\nMOV             R1, R8\nBL.W            __aeabi_uidivmod\nLDRB            R0, [R4]\nLDRB            R3, [R7,R1]\nEORS            R0, R3\nSTRB.W          R0, [R4],#1\nB               loc_301E54\nlocret_301E6C\nPOP.W           {R4-R8,PC}\n</code></pre>\nThis is the function that calls the above:\n<pre><code>PUSH            {R0-R2,LR}\nMOVS            R3, #0\nLDR             R2, =(dword_8749EF - 0x301E80)\nSTR             R3, [SP,#0x10+var_10]\nMOVW            R3, #0x107\nADD             R2, PC  ; dword_8749EF\nBL              sub_301E44\nADD             SP, SP, #0xC\n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "447",
    "tags": [
        "c++",
        "arm"
    ],
    "user": "Chet",
    "time": "Oct 4, 2018 at 0:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>(_DWORD)v5</code></pre> is simply casting the <pre><code>__int8*</code></pre> pointer to <pre><code>_DWORD</code></pre>. Decompilations tend to be quite messy if you don't fix variable types, so let's ignore types for a moment. \nTo understand the value of v8, substitute it into the expression bellow: \n<pre><code>&v5[a5 - v5_old]</code></pre>. We can also understand this as <pre><code>v5 + a5 - v5_old</code></pre>. <pre><code>v5</code></pre> is being incremented with each iteration of the loop, so the above expression is basically the current index plus <pre><code>a5</code></pre>. \nThe current index plus <pre><code>a5</code></pre> modulo <pre><code>a4</code></pre> (presumably the length of the buffer pointed to by <pre><code>a3</code></pre>) is then added to <pre><code>a3</code></pre> and the corresponding byte is XOR'd to the byte currently pointed to by <pre><code>v5</code></pre>. \nHere's my take on the algorithm:\n<pre><code>void DecryptBuffer ( char *buffer, int buffer_len, char *key, int key_len, int key_start )\n{ \n    int i;\n    for ( i = 0; i < buffer_len; i++ )\n        buffer [ i ] ^= key [ ( key_start + i ) % key_len ];\n}\n</code></pre>\nOr in other words, XOR with the key repeating over and over. \nThis is quite standard, so it's probably right, but it could be wrongâ€”as I said, the decompilation is quite messy. If you want a sure answer, either clean it up by fixing variable types or post the disassembly as well.\n",
            "votes": "3",
            "user": "user2347953",
            "time": "Oct 3, 2018 at 20:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Chet",
                    "text": "<span class=\"comment-copy\">Thanks so much, that works.  I would never have realized that <code>key</code> was a pointer to an array (rather than just an integer) and that <code>v8</code> was being used to determine how far into the buffer we were.  I attached the disassembly for completeness.</span>",
                    "time": null
                }
            ]
        }
    ]
}