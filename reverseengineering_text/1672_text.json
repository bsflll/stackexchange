{
    "title": "Why is this string on the stack not exactly the one I entered? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1672/why-is-this-string-on-the-stack-not-exactly-the-one-i-entered",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Reverse Engineering Stack Exchange.\n\n\nClosed 12 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI was trying to understand buffer overflow attacks using the following C program \n<pre><code>#include\"stdio.h\"  \n#include\"string.h\"   \nvoid iwontprint()  \n{  \n    printf(\"i wont be printed!\");  \n}  \n\nvoid callme()  \n{  \n    char buffer[8];  \n    gets(buffer);  \n    puts(buffer);  \n}  \n\nint main(int argc,int** argv)  \n{  \n    callme();  \n    return 0;  \n}\n</code></pre>\nLoading up the program in GDB before calling the <pre><code>gets(buffer)</code></pre> gives the following value of ESP : \n<pre><code>0xbffff4d4: 0xb7ff0590 0x080484db 0xb7fc1ff4 0xbffff4e8  \n0xbffff4e4: 0x080484b6 0xbffff568 0xb7e79e46 0x00000001\n</code></pre>\nAnd after entering the input <pre><code>123456789abc\\x7c\\x84\\x04\\x08</code></pre> I am getting totally different values in ESP :\n<pre><code>0xbffff4d4: 0xbffff4d8 0x34333231 0x38373635 0x63626139  \n0xbffff4e4: 0x6337785c 0x3438785c 0x3430785c 0x3830785c\n</code></pre>\nI've already set <pre><code>randomize_va_space = 0</code></pre>\n<pre><code>$cat /proc/sys/kernel/randomize_va_space   \n0\n</code></pre>\nCan anybody provide any pointers as to what am I missing here ?\n",
    "votes": "3",
    "answers": 2,
    "views": "410",
    "tags": [
        "disassembly",
        "gdb",
        "buffer-overflow"
    ],
    "user": "Novice User",
    "time": "12 years ago",
    "comments": [
        {
            "user": "Mellowcandle",
            "text": "Although very interesting I find it off topic, voting to close\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your Stack is totally fine. Look more careful at the values:\n<pre><code>0x34333231 0x38373635 0x63626139 0x6337785c 0x3438785c 0x3430785c 0x3830785c</code></pre>\nwhich interpreted as an ascii string becomes this. literally:\n<pre><code>123456789abc\\x7c\\x84\\x04\\x08</code></pre>\nAs you can see, it's exactly what you entered. And I mean by that, that for example <pre><code>\\x7c</code></pre> is the String <pre><code>\"\\x7c\"</code></pre> and not <pre><code>\"|\"</code></pre>. Use this technique to send the values properly:\n<pre><code>echo -e \"123456789abc\\x7c\\x84\\x04\\x08\" | ./yourbinary</code></pre>\n",
            "votes": "9",
            "user": "samuirai",
            "time": "Apr 9, 2013 at 10:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Novice User",
                    "text": "<span class=\"comment-copy\">Thanks for your response. however I am not able to understand why 0x63626139  is there instead of 0x0804847c (which i entered as input in little endian).</span>",
                    "time": null
                },
                {
                    "user": "Novice User",
                    "text": "<span class=\"comment-copy\">AFAIK , 0xbffff4d8 &amp; 0x34333231 are for char buffer[8] and 0x38373635 should be for value of EBP (old). Then the next value should be the one i entered (beyond 12 bytes) ?</span>",
                    "time": null
                },
                {
                    "user": "samuirai",
                    "text": "<span class=\"comment-copy\">No. You didn't enter <code>0x0804847c</code>. You entered <code>0x3830785c</code>, which is: <code>0x5c==\\ </code>, <code>0x78==x</code>, <code>0x30==0</code>, <code>0x38==8</code> that is <code>\\x08</code> as a string. not the byte value 0x08.</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">actually , echo won't interpret \\x escapes either unless you specify -e switch</span>",
                    "time": null
                },
                {
                    "user": "samuirai",
                    "text": "<span class=\"comment-copy\">Only on Linux. The BSD Version doesn't know this option (<a href=\"http://www.unix.com/man-page/FreeBSD/1/echo/\" rel=\"nofollow noreferrer\">unix.com/man-page/FreeBSD/1/echo</a>)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Samurai's answer is correct , but put more clearly , your mistake is that you enter the literal string \n<pre><code>123456789abc\\x7c\\x84\\x04\\x08\n</code></pre>\nwhere as what you probably want is something like:\n<pre><code>perl -e 'print \"123456789abc\\x7c\\x84\\x04\\x08\"' | ./yourbinary\n</code></pre>\nIn the first case the <pre><code>\\x7c\\x84\\x04\\x08</code></pre> is just that, a 16 characters length string, where in the second case, the <pre><code>\\x</code></pre> escape sequence is actually interpreted and <pre><code>\\x7c\\x84\\x04\\x08</code></pre> is printed as just 4 bytes.\n",
            "votes": "4",
            "user": "Patrick Mevzek",
            "time": "Mar 26, 2018 at 8:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}