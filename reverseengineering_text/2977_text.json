{
    "title": "How can I clean up strings built at runtime (stack strings)?",
    "link": "https://reverseengineering.stackexchange.com/questions/2977/how-can-i-clean-up-strings-built-at-runtime-stack-strings",
    "content": "How can I clean up/simplify strings that are built at runtime?\nI've seen this a couple of times and figured that there has to be something easier. I've been manually converting the characters to try and interpret what strings are being formed.\n<pre><code>.text:0040166E C6 45 F0 5C   mov     [ebp+pszSubKey+2Ch], '\\'\n.text:00401672 C6 45 F1 57   mov     [ebp+pszSubKey+2Dh], 'W'\n.text:00401676 C6 45 F2 69   mov     [ebp+pszSubKey+2Eh], 'i'\n.text:0040167A C6 45 F3 6E   mov     [ebp+pszSubKey+2Fh], 'n'\n.text:0040167E C6 45 F4 6C   mov     [ebp+pszSubKey+30h], 'l'\n.text:00401682 C6 45 F5 6F   mov     [ebp+pszSubKey+31h], 6Fh\n.text:00401686 C6 45 F6 67   mov     [ebp+pszSubKey+32h], 67h\n.text:0040168A C6 45 F7 6F   mov     [ebp+pszSubKey+33h], 6Fh\n.text:0040168E C6 45 F8 6E   mov     [ebp+pszSubKey+34h], 6Eh\n.text:00401692 C6 45 F9 5C   mov     [ebp+pszSubKey+35h], 5Ch\n</code></pre>\n",
    "votes": "8",
    "answers": 3,
    "views": "671",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "phoenix89",
    "time": "Jun 1, 2022 at 10:35",
    "comments": [
        {
            "user": "jvoisin",
            "text": "Can't you just put a breakpoint after the string builder function ?\n",
            "time": null
        },
        {
            "user": "phoenix89",
            "text": "I could set a breakpoints but I am trying to simplify it for all occurrences not just the one time.\n",
            "time": null
        },
        {
            "user": "jvoisin",
            "text": "The \"hackish\" way could be to break after all strings are built, and to run the \"strings\" command on the memomy dump.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Finding Byte Strings using IDAPython\nASERT MindshaRE solves this right. No need to actually run the code which isn't always possible.\nEffectively this script will go through instruction by instruction to find moves of ASCII characters into a memory location. It gets fancy and used QT to create an interactive table however you can gut out that part and just have it place a comment at the instruction that gets used.\n",
            "votes": "7",
            "user": "jbh",
            "time": "Jan 25, 2014 at 3:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">Script looks neat, but it fails on x64 apparently. Will try to patch :)</span>",
                    "time": null
                },
                {
                    "user": "jbh",
                    "text": "<span class=\"comment-copy\">Yeah, the one thing I noticed about the script is it relied heavily on strings being equivalent. (it is looking for \"mov\" and \"[e\") So it will definitely only work on x86. I reimplemented it for different architectures but have misplaced it.</span>",
                    "time": null
                },
                {
                    "user": "Konrads",
                    "text": "<span class=\"comment-copy\">I started patching it - making it work with x64 was a matter of changing [e to [(e|r) however it then makes an assumption that the 1st mov will be mov [rsp],'x' whereas in my case it is mov [rsp+138h+var_118], 'x'. Back to patching...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The one that worked for me eventually was \"stackstrings\" plugin from FireEye/Mandiant FLARE (based on this module)\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Jun 1, 2022 at 10:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You could use ida-x86emu to emulate the dynamic construction of the string.\nBut if you want something more automated then you'd need to write an IDA script or plugin.\n",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Oct 30, 2013 at 16:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}