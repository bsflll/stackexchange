{
    "title": "Reverse Engineering a Proprietary Bar Code",
    "link": "https://reverseengineering.stackexchange.com/questions/27033/reverse-engineering-a-proprietary-bar-code",
    "content": "I'm trying to figure out how to decipher the data stored in a proprietary barcode.  I looked through just about every barcode type and cant seem to match it, so I'm assuming this is some special format made by this company.\nI noticed most of the barcode is identical except a small part (marked in red), which would make sense if this code represents the numbers listed above each one but I still cant seem to figure it out.\n",
    "votes": "1",
    "answers": 2,
    "views": "720",
    "tags": [
        "unknown-data"
    ],
    "user": "Chris Lees",
    "time": "Feb 17, 2021 at 17:39",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Where did you find them?\n",
            "time": null
        },
        {
            "user": "pythonpython",
            "text": "And what data did you obscure on the barcode? To the right of the hole\n",
            "time": null
        },
        {
            "user": "Chris Lees",
            "text": "These are tickets to an automated parking system.  The data I obscured is the name of the company that makes the machines.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This looks like Code 39 (Wikipedia link) with an alternate character mapping.\nEach character in these barcodes corresponds to a character in Code 39, however the barcode seems to use a different start and stop delimiter, and while each character follows the pattern of the numbers above it, they do not match Code 39's counterpart.\nThe barcodes, top to bottom, left to right, read in Code 39 as follows:\n\n12TT4661\n12TT4681\n12TT4601\n12TT46L1\n\nEdit:\nAs pythonpython suggested, each character skips a position in the Code 39 encoding table, so 7 could be N, 8 could be P, and 9 could be R. Mapping out these new characters on Code 39's encoding table seems to support this theory:\n\n\n\n\n\nSpaces\n\n\n\n\n\n\n\n\n\n\n\n\n|| |||\n\n||| ||\n\n|||| |\n\n| ||||\n\n\n\nBars\nCode 39\nProprietary\nCode 39\nProprietary\nCode 39\nProprietary\nCode 39\nProprietary\n\n\n▮|||▮\n1\n*\nA\nN/A\nK\nN/A\nU\nN/A\n\n\n|▮||▮\n2\n1\nB\nN/A\nL\n6\nV\nN/A\n\n\n▮▮|||\n3\nN/A\nC\nN/A\nM\nN/A\nW\nN/A\n\n\n||▮|▮\n4\n2\nD\nN/A\nN\n7\nX\nN/A\n\n\n▮|▮||\n5\nN/A\nE\nN/A\nO\nN/A\nY\nN/A\n\n\n|▮▮||\n6\n3\nF\nN/A\nP\n8\nZ\nN/A\n\n\n|||▮▮\n7\nN/A\nG\nN/A\nQ\nN/A\n-\nN/A\n\n\n▮||▮|\n8\n4\nH\nN/A\nR\n9\n.\nN/A\n\n\n|▮|▮|\n9\nN/A\nI\nN/A\nS\nN/A\n␣\nN/A\n\n\n||▮▮|\n0\n5\nJ\nN/A\nT\n0\n*\nN/A\n\n\n\n\nUnfortuantely, most barcode generators will add Code 39's * character at the beginning and end, and the inter-character spacing is narrower for Code 39, so creating your own barcode is not as easy as typing 12TT4661 in an online generator.\n",
            "votes": "2",
            "user": "PJMOR",
            "time": "Feb 18, 2021 at 13:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "marty",
                    "text": "<span class=\"comment-copy\">you can add a link to a generator <a href=\"https://barcode.tec-it.com/de/Code39?data=12TT4661\" rel=\"nofollow noreferrer\">barcode.tec-it.com/de/Code39?data=12TT4661</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you're using 1 as a start / stop character, you can't use it as a value.\n<pre><code>100 233 --> 2TT 466\n100 234 --> 2TT 468\n100 235 --> 2TT 460\n100 236 --> 2TT 46L\n</code></pre>\nLooks like digits skip two position.\n<pre><code>0 --> T\n1 --> 2\n2 --> 4\n3 --> 6\n4 --> 8\n5 --> 0\n6 --> L \n</code></pre>\nI'd be curious if the next barcode in the sequence has the character N for 7.\n",
            "votes": "1",
            "user": "pythonpython",
            "time": "Feb 18, 2021 at 5:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}