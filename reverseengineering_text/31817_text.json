{
    "title": "Replace a function in a Windows 32-bit binary with a custom C function",
    "link": "https://reverseengineering.stackexchange.com/questions/31817/replace-a-function-in-a-windows-32-bit-binary-with-a-custom-c-function",
    "content": "I am reverse engineering a Windows game from 1995 using Ghidra, and I'm currently documenting all the decompiled functions. My goal is to replace a function in the original binary with a custom C function, test the game, and proceed incrementally, one function at a time, rather than attempting to get all the decompiled C code working at once.\nSome challenges I'm facing:\n\nThe game was compiled with Watcom, so it's using its \"non-standard\" calling convention.\nThere are global variables everywhere, so the replaced function must be able to access those in the main executable.\n\nI'm aware of projects like KeeperFX and Syndicate Wars port (http://swars.vexillium.org/), which managed to achieve similar goals (e.g., by converting the executable into a DLL).\nWhat are my options for replacing a function in the original binary with a custom C function while addressing the challenges mentioned above?\n",
    "votes": "5",
    "answers": 1,
    "views": "250",
    "tags": [
        "windows",
        "decompilation"
    ],
    "user": "Cesar Canassa",
    "time": "Apr 24, 2023 at 12:44",
    "comments": [
        {
            "user": "Cesar Canassa",
            "text": "@rce Yes, the \"EXE to DLL\" technic looks promising, but I don't know how they solve the shared global variables problem.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Watcom lives on as OpenWatcom ... check it out. If you want to get closer to the original, you could try 1.9 or 1.8, too.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@rce: may not be relevant for this particular case, but there are some issues when using data exports and delay-loading together.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When trying to renew an old game, it's important to have a working thing relatively soon - otherwise, there's a great chance of your work getting wasted. So it's good you've turned towards RE ideas with potential of having full game usable without having it fully remade.\nThe DLL approach taken in KeeperFX:\n\nWorks only if your executable has a relocation table - later versions of both Visual C and Watcom started to remove these. Without relocation table, the DLL will have ability to load only at one specific address in the virtual address space of the game - which means sometimes it will work, and sometimes not, depending on versions of other DLLs and their base addresses.\nRequires you to do your C rewrite from <pre><code>main()</code></pre> and outer layers, towards the central functions which you will likely want to modify. Unless you will mix the DLL approach with some binary patching.\n\nThe ASM approach taken in SW Port:\n\nAllows you to modify / rewrite to C any function at any time - no need to start with the <pre><code>main()</code></pre>. Because if you have the whole game disassembled, you can do calls back and forth between C and ASM.\nAllows you to port to other OSes without a full rewrite - ie, SW Port supports Linux and Mac OS (as long as they run on i386 arch with 32-bit user space)\nThe 32-bit user space restriction will be easier to overcome in case OSes would stop supporting that. While it would require assembly changes, it is doable without a full rewrite.\nAchieving the first runnable state this way is a bit more labour-intense that with the DLL approach.\n\nThere's also a 3rd approach - you'd find it in Magic Carpet HD. That project author just used Ida Pro to generate C code out of the whole game, and then continued fixing the generated C until it started working. I consider this approach very risky - you need to put a lot of effort to make the game work. Also, the generated C code has a very low quality this way, and it may negatively influence further progress of the project. Plus, the brute-force C conversion introduced a lot of bugs.\nGeneral points:\n\nFor both methods, you will find useful tools already developed in the respective projects (ie. export table updated for DLL approach, and C-to-watcom bi-directional calling wrapper for ASM approach).\nThe DLL approach required some specific conditions to work, while disassembling the whole game is a general approach which can be used for any game.\n\nFor accessing global variables and functions between original game and remade C code:\n\nIn KeeperFX, the variables and functions from within DLL were just exported with a prefix (<pre><code>_DK_</code></pre> specifically), and could be easily used outside, like any DLLIMPORT. Calling convention change was handled outside of the DLL, as an ASM block within C. Not sure if there was a helper macro to hide the details.\nIn SW Port, any variables/functions which are used in assembly but also in C, need to be properly defined (as <pre><code>.global</code></pre> with decor) - the port source has macros for that already made. And for C-to-Watcom conversion, there is a tool which generates a wrapper C function - you need to add the function to the wrapper, and then you call it normally in C. The wrapper will get arguments from <pre><code>_cdecl</code></pre> call and put them into proper registers (you have to define the arguments when adding function to the wrapper).\n\nBasically:\n\nC variables are decorated, so to access ASM-defined vars in C you need to add that decoration to your ASM vars.\nFor C-to-Watcom calls, you get up to 4 vars from stack and place it into registers, and that's it.\nFor Watcom-to-C calls, you have to modify the assembly to just use stack and no registers.\nWhile juggling the stack and registers, you need to mind clobbering/spoiling value within registers by functions. Watcom convention says - any register which was used as parameter, can have its value overwritten.\n",
            "votes": "1",
            "user": "mefistotelis",
            "time": "Nov 10, 2023 at 13:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}