{
    "title": "How to find image base of an arbitrary boot-loader image?",
    "link": "https://reverseengineering.stackexchange.com/questions/13817/how-to-find-image-base-of-an-arbitrary-boot-loader-image",
    "content": "I have picked up a rooted Acer phone and dd-ed the <pre><code>LK</code></pre> partition to analyze it in IDA. The goal is to pinpoint the routine processing fastboot commands. Stripping first 512 bytes produces apparently meaningful disassembly. However, the cross reference of the string <pre><code>fastboot: processing commands\n</code></pre> doesn't look very meaningful. This has led me to believe that the image might need to be re-based to some address to get the references correct. Any idea how I can do that?\n",
    "votes": "3",
    "answers": 1,
    "views": "267",
    "tags": [
        "android"
    ],
    "user": "sherlock",
    "time": "Oct 26, 2016 at 8:58",
    "comments": [
        {
            "user": "Death Mask Salesman",
            "text": "This looks like a development question, which is off-topic on this site, thus I vote to close it. You might ask it at Stack Overflow, instead.\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Which processor is used here ?\n",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "ARM 32, Little Endian\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "I wouldn't discount the image starting at position 0, as that's where ARM stores some jump addresses for hardware-related signals. Your string references look perfectly fine to me; loading the offset between the current instruction and the string, then adding PC, is the standard ARM way of getting position independent code. More about that in my answer here.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When I needed to do something similar I tried to do the following:\n\nI found all known <pre><code>LDR</code></pre> macros (as far as I remember they are not relative)\nI found addresses of some strings that had to have a chance to be referenced  directly (more than 10, less than 100)\nAfter that I brute-forced all 32-bit address range with step 4 in order to find such a shift that complies with maximum number of strings referenced by <pre><code>LDR</code></pre> correctly. Of course this can be done with IDAPython.\n\nFrom this shift the address may be concluded.\nIn addition you can cross-reference function prologues with jumps and calls with absolute addressing. \nBTW, if I'm not mistaken you will probably find an interrupt table at the start of the image - absolute jumps like in the following example:\n<pre><code>00000000   LDR   PC, =Reset\n00000004   LDR   PC, =Undef\n00000008   LDR   PC, =SVC\n0000000C   LDR   PC, =PrefAbort\n00000010   LDR   PC, =DataAbort\n00000014   NOP\n00000018   LDR   PC, =IRQ\n0000001C   LDR   PC, =FIQ\n</code></pre>\nThe values of the loaded addresses may hint an area to search for.\n",
            "votes": "2",
            "user": "w s",
            "time": "Oct 26, 2016 at 9:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Creative approach!</span>",
                    "time": null
                }
            ]
        }
    ]
}