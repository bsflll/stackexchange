{
    "title": "How should I approach debugging a PE which create a large database?",
    "link": "https://reverseengineering.stackexchange.com/questions/8718/how-should-i-approach-debugging-a-pe-which-create-a-large-database",
    "content": "I am reversing several modules which are dynamically and statically linked into an executable.  I have started learning active analysis by attaching one of my database files to the win32 exe using the local win32 debugger (default settings).  \nRelocating my idb's annotations to map correctly to the exe seems to be taking longer than it should.   I am currently doing static analysis by comparing one idb against a memory snapshot because the relocation time does not seem to be worth the wait.  This creates, what I think may be, unnecessary work because I have to manually copy the annotations from the single module idb to the snapshot idb.\nI want to find out if I can change how I use IDA to speed up relocation.  I have no notion of how long this should take given the database's and exe's size.  \n<pre><code>idb:  ~133 Mb\nexe:  ~650 Mb     Size taken from task manager\nrelocation time:  ~15+ minutes\n</code></pre>\nThis is very open ended.  I guess I'm looking for debugger settings, hidden annotation performance hits, etc.  If this is normal I will try to adjust my debugging practice to get the most out of a session.\n",
    "votes": "3",
    "answers": 1,
    "views": "581",
    "tags": [
        "ida",
        "debugging",
        "dynamic-analysis"
    ],
    "user": "question_asker_777",
    "time": "Apr 17, 2015 at 22:52",
    "comments": [],
    "answers_data": [
        {
            "content": "If the problem is the time it takes for IDA to rebase the IDB when debugging, then some possible solutions:\n\nDisable ASLR from module, so it keeps loading at the same base address (same base address from the IDB)\n\nPros: Works well for main executable\nCons: might be a problem for DLLs (see 3.); alter file.\n\n\nHow to: Remove <pre><code>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE</code></pre> (0x40) from <pre><code>IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics</code></pre>.\n\n[Dangerous] Disable ASLR system wide (would be possible in a spare VM).\n\nPros: same as 1.\nCons: Same as 1. ; Lower whole system protection\n\n\nHow to: change <pre><code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\MoveImages</code></pre>\n\nRebase all DLLs so they don't collide (apply this with 1.)\n\nPros: all DLLs will have different address base\ncons: alter files.\n\n\nHow-to: \n\n<pre><code>Rebase</code></pre> tool (rebase.exe; deprecated by editbin.exe)\neditbin.exe with <pre><code>/REBASE</code></pre> option\nReBase API \n\nSimply use different base addresses for all the DLLs (do not apply this on system DLLs).\n\nUse external debugger and synchronize IDB with it.\n\nHow-to:\n\nuse QB-sync: it allows you to debug a binary from a debugger (windbg, ollydbg, gdb, etc.) and synchronize the database with the debugger without rebasing the IDB.\nPros: works well, lots of things can be done from debugger\nCons: Needs to be confident with an external debugger\n",
            "votes": "5",
            "user": "Neitsa",
            "time": "Apr 18, 2015 at 12:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}