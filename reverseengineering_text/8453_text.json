{
    "title": "The Suffering - Ad supported [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8453/the-suffering-ad-supported",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI aplogize in advanve for my beginners question. I also aplogize if this post is in the wrong thread or the wrong board. I just thought this may belong here.\nThe technical part:\nI just downloaded the Game \"the suffering\" a few days ago. It is for free but ad supported and therefore has no reason not to play it, if you havent done that yet. ;)\nThe tricky part is that the servers serving the ads are offline because the publisher does not even exist anymore.\nSadly this means the game is unplayable because before it loads up it checks against the ad-serving server and then starts the game or does not.\nSo I thought this is an opportunity for me to learn sth. New and I decided to look into this problem and want to understand the process behind this online-check and maybe get it to run in the end or at least understand how it works.\nI am a certified IT-Engineer and have some experience in programming aswell so I am nit a total noob when it comes to IT-Problems.\nWhere I need help from you guys is where to start and how to get to know what the game is actually doing. I already tried wireshark and some other tools but this does not help me to understand what it is doing and who the check process works.\n",
    "votes": "0",
    "answers": 1,
    "views": "135",
    "tags": [
        "software-security"
    ],
    "user": "Keks411",
    "time": "10 years ago",
    "comments": [
        {
            "user": "rev",
            "text": "quick fix: redirect the ads host to a random host with your <pre><code>hosts</code></pre> file. if that does not work, you'll have to tell us more information about that game: format, platform, etc. basically, give us some context.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your wireshark logs should tell you if the game tries to resolve some DNS entries that don't exist anymore (or maybe even some that do exist), and to which IP addresses it connects. If you're lucky, it'll connect to a port 80 somewhere, so you'd know it's trying to talk to a web server.\nNext, you could set up your own web server, and use tricks like an entry in the <pre><code>hosts</code></pre> file to redirect the traffic to your own server(*) and check what the game tries to access. If it issues a <pre><code>GET /randomad.jpg HTTP/1.0</code></pre>, place an 1x1 white pixel jpg file on your server, and look what happens.\n(*) Obviously, this won't work if the game tries to access an IP address directly. The easiest way to resolve this, in my opinion, is installing VirtualBox, creating a host-only network with IP addresses in the range you want to monitor, and assigning the target IP to your guest. If you want to do this more often, the most flexible way is replacing your router with a Linux box and using <pre><code>iptables</code></pre> to do all kind of dirty stuff to your network packets.\nOf course, the game could request a <pre><code>ad-info.xml</code></pre> file, or not use HTTP at all. In this case, it's going to be much harder, as you don't know what response is expected, and there are no real servers to trace anymore. This is where you'll have to learn a lot about assembly and processor architecture, and use tools like Ollydbg and Ida to disassemble the program, search for where the program tries to display an ad, and change the program code accordingly. You will need a lot of time for this (at least several months if you're new to assembly), but you'll also learn a lot doing this.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Mar 13, 2015 at 17:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Instead of using VirtualBox or messing with routers, it's much easier to just <a href=\"http://support.microsoft.com/en-us/kb/839013\" rel=\"nofollow noreferrer\">create a loopback network adapter</a> and statically assign a given IP address to it.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Thank you for your suggestion, i never knew windows had this. I can only repeat what i said, you're an astonishing source of tools i'm putting in my box.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">The professional respect is mutual ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}