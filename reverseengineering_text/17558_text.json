{
    "title": "What are the .cpp files in IDA disassembly [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/17558/what-are-the-cpp-files-in-ida-disassembly",
    "content": "This question already has an answer here:\n                                \n                            \n\n\n\n\nAre those code snippets and file paths in a C++ binary some sort of standard debug information?\n\n                                (1 answer)\n                            \n\nClosed 7 years ago.\n\n\n\nI opened wsl.exe in IDA Pro v7 and follow some strings. I saw some strings with .cpp extension. Can anyone explain what are those .cpp file in that disassembly? Where can I find it? Are those hidden somewhere?\nHere is an example: <pre><code>base\\subsys\\wsl\\lxss\\lxcmdlineshared\\svccomm.cpp</code></pre>\n",
    "votes": "2",
    "answers": 3,
    "views": "826",
    "tags": [
        "ida",
        "disassembly",
        "windows-10"
    ],
    "user": "Biswapriyo",
    "time": "7 years ago",
    "comments": [
        {
            "user": "mblw",
            "text": "Better look in pseudocode, but I suppose <pre><code>sub_140004430</code></pre> is <pre><code>assert</code></pre> or <pre><code>log</code></pre> function not just <pre><code>print</code></pre>. Also notice 0x4A (174 in dec) most likely it is line number.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I commented and then I've read malikcjm answer \nSo this is basically an extension of malikcjm's answer.\nSuppose you have a code like this and load the compiled exe into ida \n<pre><code>#include <stdio.h>\nvoid main (void){\n    printf(\"%s\n\" ,__FILE__);\n}\n</code></pre>\nYou will get the cpp file reference\n\nthese <pre><code>__FILE__</code></pre>, <pre><code>__LINE__</code></pre> etc are predefined macros that are defined in the C++ Standard as well as some Microsoft-specific predefined macros \ntake a look PRE_DEFINED_MACROS for a discussion and usage of these predefined macros\nthese predefined macros are not restricted to debug mode alone; they can be used in release mode also\nhere is example code that uses them in release mode\n<pre><code>#include <windows.h>\n#pragma comment (lib , \"test.lib\")\n#pragma comment (lib , \"kernel32.lib\")\n#pragma comment (lib , \"user32.lib\")\n_declspec (dllexport) int  AddNum(int a, int b);\nchar buff[0x100] = { 0 };\nPCHAR timepass(int a, PCHAR b) {\n    wsprintfA(buff,\"%d %s\n%s\\t%s\\t%s\n\", a,b,__FUNCTION__,__FUNCDNAME__,__FUNCSIG__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff,\"we are done passing time\n\");\n    return buff;    \n}\nint main(void) {\n    wsprintfA(buff, \"3 + 5 = %x\n\", AddNum(3, 5));\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __FILE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __DATE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%d\n\", __LINE__);\n    OutputDebugStringA(buff);\n    wsprintfA(buff, \"%s\n\", __func__);\n    OutputDebugStringA(buff);\n    OutputDebugStringA(timepass(1337 , \"we are now going to pass time\"));\n    return 0;\n}\n</code></pre>\ncompiled and linked with \n<pre><code> cl /nologo use%1.cpp /link /ENTRY:main /SUBSYSTEM:windows /RELEASE\n</code></pre>\nexecuted in debugger would show \n<pre><code>>cdb -c \"g;q\" usetest.exe | tail -n 13\nDLL_PROCESS_ATTACH Called\n\n3 + 5 = 8\nusetest.cpp\nMar  1 2018\n20\nmain\n1337 we are now going to pass time\ntimepass        ?timepass@@YAPADHPAD@Z  char *__cdecl timepass(int,char *)\nwe are done passing time\nDLL_PROCESS_DETACH Called\nquit:\n</code></pre>\nIf a PDB is available we can get the so called leaks from them too an example of file paths from an ntdll pdb \n<pre><code>e:\\cvdump>cvdump -sf e:\\SYMBOLS\ntdll.pdb\\120028FA453F4CD5A6A404EC37396A582\ntdll.pdb >> leaks.txt\n\ne:\\cvdump>wc -l leaks.txt\n860 leaks.txt\n\ne:\\cvdump>grep \"daytona\" leaks.txt  | grep ldrs\n** Module: \"o:\\w7rtm.obj.x86fre\\minkernel\ntdll\\daytona\\objfre\\i386\\ldrstart.obj\"\n** Module: \"o:\\w7rtm.obj.x86fre\\minkernel\ntdll\\daytona\\objfre\\i386\\ldrsnap.obj\"\n</code></pre>\n",
            "votes": "8",
            "user": "Igor Skochinsky",
            "time": "Mar 1, 2018 at 10:46",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">this might be some kind of debug messages I guess..</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik those are predefined macros they are expanded to thier current values by preprocessor prior to compiling the code i added a link in the answer take a look</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">I know the <b>FILE</b> is a predefined, but I was commenting the fact of the fact of using it in a production code. I would expect to see it in Debug mode</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik  no they are not restricted to debug mode you can happily use them in release mode also  i added a code sample too</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">yes, I also know that :) but I was more wondering why would they be left there for release mode :) it's leaking a bit of info</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are no *.cpp files in disassembly. It looks like automatically generated string file file path. It's sometimes used for logging.\nIt can be generated if somewhere in the source code <pre><code>__FILE__</code></pre> preprocessor directive was used.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 1, 2018 at 10:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "This is just a string in the binary file that, for some reason represents the file name and in this case a cpp file. Maybe this binary for some reason needs to access it on the system, or checks if they exists and does some work if so (or if not). \nThey are not hidden and unfortunately not available.\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Feb 28, 2018 at 21:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Is it a dead end? Should I care those string values?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">it depends on the binary. Google search gives some links to Ubuntu subsystem for Windows - is that what you are looking at?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">yes wsl.exe is linux subsystem for windows and those file names are src files that were used to compile (it remains there for using __ FILE __  debugprints</span>",
                    "time": null
                }
            ]
        }
    ]
}