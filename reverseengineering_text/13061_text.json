{
    "title": "Reversing assembler DCD directive list into a c++ variable",
    "link": "https://reverseengineering.stackexchange.com/questions/13061/reversing-assembler-dcd-directive-list-into-a-c-variable",
    "content": "For example we have assembler variable \"foo\" defined as:\n<pre><code>.text:00001078 foo      DCD 0xffffffff, 0xffffeeee\n</code></pre>\nHow it(variable <pre><code>foo</code></pre>) would look like in c++(or whatever higher lang)???\n",
    "votes": "2",
    "answers": 1,
    "views": "53",
    "tags": [
        "disassembly",
        "assembly",
        "c++",
        "hexrays"
    ],
    "user": "Taggart Comet",
    "time": "Jul 17, 2016 at 15:28",
    "comments": [],
    "answers_data": [
        {
            "content": "Many possibilities.\n<pre><code>long long foo=0xffffffffffffeeee</code></pre> (assuming big endian mode)\n<pre><code>long long foo=0xffffeeeeffffffff</code></pre> (assuming big endian mode)\n<pre><code>int foo[2]={-1, -4370}</code></pre>\n<pre><code>short foo[4]={-1, -1, -1, -4370}</code></pre>\n<pre><code>char foo[16]=\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xee\\xee\\xee\\xee\"</code></pre>\n<pre><code>struct { int a, short b, short c } foo = { -1, -1, -4370 }</code></pre> (and variations depending on endianness)\nYou really can't determine the original type of initalized data without looking at the code that uses it.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Jul 17, 2016 at 15:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}