{
    "title": "Reproducing video format",
    "link": "https://reverseengineering.stackexchange.com/questions/23021/reproducing-video-format",
    "content": "I received a promotional video screen with a USB interface. It comes with a couple example videos, one of which is here: https://drive.google.com/file/d/1B-wSURAgK-ePrfpKFM5nYbNhQ5mD-Ii2/view?usp=sharing md5sum <pre><code>506a6c478b0874262802e8ae7d718c59</code></pre>\nI'd love to figure out how to generate this file format, but I don't have much experience in reverse engineering. It seems to be a mostly normal AVI file, and can play in VLC just fine.\nWhat I've got so far\nI've been poking around with ffprobe, in a hex editor, and RiffPad, and found the following things:\n\nit is a RIFF AVI with 2 streams - video and audio\nthe video frames are mjpeg - specifically mjpeg/AVI1, header <pre><code>FF D8 FF E0 00 10 41 56 49 31</code></pre>\nthe video frames are padded to the dword boundary instead of the word boundary which seems to be the standard. Riffpad and other such tools complain about this\n<pre><code>ffmpeg -i original.avi -codec copy test.avi</code></pre> doesn't produce a working file - ffmpeg appends junk lists to some of the header information. deleting the lists and aligning frames to the dword boundary make the file play despite some differences in the header data.\nI'm having a hard time finding a tool to generate similarly formatted frames. FFMPEG wants to generate JFIF data instead of AVI1, which doesn't work. Judging by this source, the original frames contain their own huffman encodings, and the container file lists the chunks as <pre><code>dc</code></pre> chunks, so compressed images. <pre><code>jpegtoavi</code></pre> generates <pre><code>db</code></pre> segments, which I can't copy over.\n\nAny help with what to do next would be very appreciated.\n",
    "votes": "1",
    "answers": 0,
    "views": "208",
    "tags": [
        "file-format"
    ],
    "user": "rsheldiii",
    "time": "Jan 16, 2020 at 17:59",
    "comments": [
        {
            "user": "rsheldiii",
            "text": "I've mostly resolved to figuring this out by myself. Given that VLC reads the frames and video itself with no issue I know I'm dealing with someone that should be reasonable - it looks like a bog-standard MJPEG, 4:2:0 subsampling, the 4 standard huffman tables embedded for some reason and 2 quantization tables.  I've found the BinData gem and I'm bitbanging this out\n",
            "time": null
        }
    ],
    "answers_data": []
}