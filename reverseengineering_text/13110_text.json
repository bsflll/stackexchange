{
    "title": "Understanding memory locations",
    "link": "https://reverseengineering.stackexchange.com/questions/13110/understanding-memory-locations",
    "content": "I wrote a simple program on my STM32F4 Disco MCU which only turns a LED on, and I am trying to RE my compiled binary. After decompiling the binary, I started my analysis at the first instruction set and treated it like a main function because it calls the other subroutines in the program. These subroutines are comparing, adding, subtracting, ... memory from addresses in the Flash, SRAM, or RAM. Example:\n<pre><code>LDR             R1, =0x80003EC  // r1 = 0x80003EC\nLDR             R2, [R1]        // r2 = 0x80003EC\nLDR             R3, [R1,#4]     // r3 = 0x80003F0\nADD.W           R4, R1, #0xC    // r4 = *(0x8000404) + 12\nLDR             R0, [R1,#8]     // r0 = 0x80003F4\n</code></pre>\nIn the example above, the content of R1 (memory address 0x80003EC) is getting 12 added to it and stored in R4 but I have no idea what value resides in that memory address (0x80003EC)! The program continues to use the mysterious value stored at 0x80003EC. Example:\n<pre><code>LSR             R0, R1     // r0 << r1\n</code></pre>\nThe cycle of referencing unknown numbers keeps continuing. Without knowing the original value, there is no way to figure out the logic flow. All I see is mathematical operations to unknown numbers and flow control that is determined from the operations. \nHow can a program like this be reverse engineered? \nIs there a way to view the original values of memory?\n",
    "votes": "0",
    "answers": 1,
    "views": "171",
    "tags": [
        "arm"
    ],
    "user": "Tyler",
    "time": "Jul 22, 2016 at 8:24",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "You have the indexed/non indexed addressing wrong. <pre><code>LDR R2,[R1]</code></pre> means <pre><code>R2=*R1</code></pre>, not <pre><code>R2=R1</code></pre>. <pre><code>LDR R3,[R1, 4]</code></pre> isn't <pre><code>R3=R1+4</code></pre> but <pre><code>R3=*(R1+4)</code></pre> (if you ignore the pointer scaling C does). And <pre><code>ADD.W R4, R1, #0xC</code></pre> is <pre><code>R4=R1+12</code></pre>, no pointer here.\n",
            "time": null
        },
        {
            "user": "Tyler",
            "text": "I apologize, I know that LDR dereferences the memory address but I did not communicate it properly in my comments. Thanks for pointing it out.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Most likely, your program is intended to be loaded at <pre><code>0x80000000</code></pre>, has a size of more than 1004 bytes (0x3EC = 1004 decimal), and the values at that location are intended to be initialized from the data section of your program when your program starts.\nAlso, there could be some hardware at that specific address but that's unlikely seeing how those addresses seem to contain pointers.\nA third possibility is that your OS, whichever you're using, puts some global information at those locations when it loads your program.\nTo know which of those possibilities is correct we'd need more information about your hard- and software, but i strongly tend to the first possibility.\n",
            "votes": "0",
            "user": "Guntram Blohm",
            "time": "Jul 21, 2016 at 15:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tyler",
                    "text": "<span class=\"comment-copy\">I looked at 0x0800 03E8 in IDA and found it was mapped to 0x1000 0000 which can be several things like CCMDATARAM_BASE, AHB2PERIPH_BASE, ADC_CR2_EXTEN_0, or GPIO_MODER_MODER14_0 etc. (it's probably not GPIO_MODER_MODER14_0 because I used GPIO 12). I will do some further investigation. Thanks for the help!</span>",
                    "time": null
                }
            ]
        }
    ]
}