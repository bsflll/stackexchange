{
    "title": "Retrieve & dump type information from IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/32271/retrieve-dump-type-information-from-ida-pro",
    "content": "I want to retrieve IDA Pro .idb database's each type info, such as:\n\nsize and name of a structure;\neach member variable type and name;\neach member variable size and offset;\n\nAnd dump it to a .h file in a formatted manner. (\"Create C header file...\" just dumps without sizes and offsets and does not allow to pre-format it.) How to do this?\n",
    "votes": "1",
    "answers": 1,
    "views": "292",
    "tags": [
        "ida",
        "c++",
        "idapython",
        "dumping",
        "script"
    ],
    "user": "void_17",
    "time": "Sep 8, 2023 at 6:06",
    "comments": [
        {
            "user": "mimak",
            "text": "You can use ida_struct API to retrieve the needed information via Python terminal/plugins\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It's obviously doable (you already noted the <pre><code>Create C header file</code></pre> functionality), but if you want to customize the output, you'll have to code it yourself.\nHere's what you'll need:\n\n<pre><code>ida_typeinf.first_named_type</code></pre> and <pre><code>ida_typeinf.next_named_type</code></pre> to iterate through all of the type names in a TIL (i.e., the main TIL for an IDB).\nTo retrieve a <pre><code>tinfo_t</code></pre> type object from a type name, create <pre><code>tif = ida_typeinf.tinfo_t()</code></pre>, then do <pre><code>tif.get_named_type(name)</code></pre> with the name returned from the functions above.\nOnce you have the <pre><code>tinfo_t tif</code></pre> object, if <pre><code>tif.is_struct()</code></pre> returns <pre><code>True</code></pre>, you can get the structure details via the function <pre><code>tif.get_udt_details</code></pre> by passing it a new <pre><code>ida_typeinf.udt_type_data_t</code></pre> data structure.\n<pre><code>ida_typeinf.udt_type_data_t</code></pre> is a vector of <pre><code>udt_member_t</code></pre> objects (plus additional information, e.g. size and alignment). Each <pre><code>udt_member_t</code></pre> object describes one field in a <pre><code>struct</code></pre> or <pre><code>union</code></pre>. You can retrieve member names via the <pre><code>.name</code></pre> field, and each field's <pre><code>tinfo_t</code></pre> type via the <pre><code>.type</code></pre> field.\n\nThat's all you need. However, if you've never worked with types programmatically before, you're going to find it tricky. It is already evident from the above that <pre><code>tinfo_t</code></pre> is a mutually recursive data structure, i.e., the <pre><code>tinfo_t</code></pre> for a structure contains other data structures (like <pre><code>udt_type_data_t</code></pre>) that themselves contain <pre><code>tinfo_t</code></pre> objects to describe structure field types. Due to the mutual recursion in the data structures, functions involving <pre><code>tinfo_t</code></pre> objects are often mutually recursive.\n",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Sep 8, 2023 at 20:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "void_17",
                    "text": "<span class=\"comment-copy\">Thank you so much for such a detailed answer! I will try this</span>",
                    "time": null
                },
                {
                    "user": "KulaGGin",
                    "text": "<span class=\"comment-copy\">Very nice. Thanks for the explanation. It took me like 2 hours to find your answer and only then I managed to understand how I have to walk up the inheritance tree all the classes and also walk all the members of classes.</span>",
                    "time": null
                }
            ]
        }
    ]
}