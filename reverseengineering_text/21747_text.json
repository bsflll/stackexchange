{
    "title": "Firestick get application binary",
    "link": "https://reverseengineering.stackexchange.com/questions/21747/firestick-get-application-binary",
    "content": "I would like to reverse engineer and ultimately patch an application on my Amazon Firestick. To doo this, I want to analyze the app executable.\nI believe third-party apk's are stored in the <pre><code>/data</code></pre> directory but this directory is not readable on an unrooted device. I've also considered dumping the process memory while the app is running, but I believe this would also require rooting the device. I would prefer to not root the device if possible but I understand that might be necessary. \nDoes anyone know of a way I can get the application binary without rooting the device?\n",
    "votes": "3",
    "answers": 2,
    "views": "454",
    "tags": [
        "android"
    ],
    "user": "genghiskhan",
    "time": "Jul 23, 2019 at 16:05",
    "comments": [
        {
            "user": "anon",
            "text": "All rooting does is get you access to the root account. If you want to do anything that you're not explicitly allowed by e.g. the file's permissions, you're going to need to root it. This might not even be hard or even unsupported, necessarily; there are plenty of consumer devices (besides the obvious ones) that are meant to be rootable, especially for developers. You could always dig through Amazon's documentation to see -- maybe have a look at their developer resources? I'd imagine they have some provision for deploying to a Firestick, which might have the answers you need.\n",
            "time": null
        },
        {
            "user": "genghiskhan",
            "text": "I think you're right that I will need to root the device. However, it seems to me that rooting the Firestick is tricky. For my version of the firmware, the most prevalent method involved shorting a circuit on the board. The developer docs only provide options for monitoring resource usage.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>adb shell pm list packages -f</code></pre> should list all of the installed packages, as well as the path to their apk. Find the apk you're interested in, then pull it with <pre><code>adb pull <path></code></pre>.\ne.g.\n<pre><code>> adb shell pm list packages -f\n....\npackage:/data/app/com.google.android.dialer-nt9PJ8MFE293dEV61etgIA==/base.apk=com.google.android.dialer\n....\n> adb pull /data/app/com.google.android.dialer-nt9PJ8MFE293dEV61etgIA==/base.apk\n</code></pre>\n",
            "votes": "3",
            "user": "JesusFreke",
            "time": "Jul 24, 2019 at 18:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">This doesn't require rooting?</span>",
                    "time": null
                },
                {
                    "user": "genghiskhan",
                    "text": "<span class=\"comment-copy\">I just tried this and it allows me to \"download\" the directory but it is empty.</span>",
                    "time": null
                },
                {
                    "user": "JesusFreke",
                    "text": "<span class=\"comment-copy\">I added a more specific example. You should be able to pull the apk file itself, not the directory</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I came across this forum thread that had the correct solution: https://forum.xda-developers.com/fire-tv/help/extract-apk-t3674633. The solution was to download ESFile Explorer and backup the app for which I was seeking the APK. I could then run <pre><code>adb pull /storage/emulated/0/backups/app/<my app></code></pre>.\n",
            "votes": "2",
            "user": "genghiskhan",
            "time": "Jul 23, 2019 at 23:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}