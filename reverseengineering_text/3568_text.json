{
    "title": "How to break on instruction that hasn't been traced yet?",
    "link": "https://reverseengineering.stackexchange.com/questions/3568/how-to-break-on-instruction-that-hasnt-been-traced-yet",
    "content": "I have some questions regarding IDA and Ollydbg.\nFirst, is there a way to create a record with traced instructions and let the debugger automatically break, when it hits an instruction that hasn't been traced in the record ?\nMy second question is refering to IDA tracing options. \nI wrote a simple Win32 GUI application in C++ which mainly consists of a message pump (<pre><code>GetMessage</code></pre>, <pre><code>TranslateMessage</code></pre> and <pre><code>DispatchMessage</code></pre>) and a <pre><code>WindowProcedure</code></pre>. I tried the following: \n\nI set a breakpoint in the message pump;\nStarted the tracing from there;\nSet a second breakpoint in the <pre><code>WindowProcedure</code></pre> that triggers a break when I click on a button. \n\nWhat IDA traced are only the instructions from the message pump not the ones from the <pre><code>WindowProcedure</code></pre>, though it should at least have traced the <pre><code>DefaultWindowProc</code></pre> instruction. \nCan anyone tell me whats the reason for that?\n",
    "votes": "2",
    "answers": 2,
    "views": "621",
    "tags": [
        "ida",
        "debugging"
    ],
    "user": "user3773",
    "time": "Feb 5, 2014 at 16:00",
    "comments": [],
    "answers_data": [
        {
            "content": "Intel's Pin software can do this. It may take some effort, however.\nIs WindowProcedure a system call? I don't think IDA can debug kernel code - you may have to use windbg if that is the case.\n",
            "votes": "1",
            "user": "Albert Myers",
            "time": "Jan 29, 2014 at 16:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kochkov",
                    "text": "<span class=\"comment-copy\">IDA can connect to the remote WinDbg instance.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "STEGANOGRAPHED IMAGE :) COPY HEXEDIT AND RIP\n\nThis answer is related to <pre><code>hittrace</code></pre> feature of ollydbg\nAttached is a <pre><code>odbg110</code></pre> plugin <pre><code>hitaid.dll</code></pre>\nthe dll has been <pre><code>7zipped and hexedited</code></pre> to be uploaded here as jpg\ndownload hexedit and <pre><code>delete first 10 bytes</code></pre> and <pre><code>save as hitaid.7z</code></pre>\nuse 7zip to <pre><code>extract hitaid.dll</code></pre> from the archieve  \nollydbg has a feature called <pre><code>Hittrace</code></pre> \nthis plugin leverages that feature to achieve what is queried \nput the dll in <pre><code>odbg110 plugin path</code></pre>\n<pre><code>open calc.exe</code></pre> in odbg\n<pre><code>analyse</code></pre> the main module viz calc.exe\n<pre><code>right click</code></pre> in <pre><code>disasm window</code></pre> select <pre><code>hittrace</code></pre> in context menu\nselect <pre><code>add all recognized procedures submenu</code></pre>\nall recognized procedures will be <pre><code>marked with grey marker</code></pre>\n<pre><code>run</code></pre> the exe with <pre><code>f9</code></pre>\nall instruction that were hit would be <pre><code>colored red</code></pre>\nhitting <pre><code>ctrl+L</code></pre> from start of disasm window will cycle through all hits\nuse plugin to remove all the hits\nif the required feature say <pre><code>button 7 is clicked</code></pre> now\nthe new code path that <pre><code>pertains to button 7</code></pre> would be colored red\nnew hits can be reached by selecting disasm window start and pressing ctrl+L\nplugin can be used <pre><code>repeatedly</code></pre> to remove hits \nthe app <pre><code>need not be</code></pre> paused for the interaction \nyou can set f2 breakpoints as required in the new code path and reenable hittrace via disasm context menu\nsrc below\n<pre><code>#include <windows.h>\n#include \"plugin.h\"\n#pragma warning(disable:4100)\nBOOL WINAPI DllEntryPoint(HINSTANCE hi,DWORD reason,LPVOID reserved) \n{\n    return 1;\n};\nextc int _export cdecl ODBG_Plugindata(char shortname[32]) \n{\n    strcpy(shortname,\"HitAid\");\n    return PLUGIN_VERSION;\n};\nextc int _export cdecl ODBG_Plugininit( int ollydbgversion,HWND hw,ulong *features) \n{\n    Addtolist(0,0,\"Hit Trace Aid Plugin by blabb\"); \n    return 0;\n};\nextc int _export cdecl ODBG_Pluginmenu(int origin,char data[4096],void *item) \n{\n    switch (origin)    \n    {\n    case PM_MAIN:\n        strcpy(data,\"0 &HitAid\");\n        return 1;\n    default: break;\n    };\n    return 0;\n};\nextc void _export cdecl ODBG_Pluginaction(int origin,int action,void *item) \n{\n    uchar *buff , *retu;\n    unsigned long psize, i , addr;\n    t_module * mod = Findmodule( Plugingetvalue(VAL_MAINBASE) );    \n    addr = mod->codebase;\n    if (origin==PM_MAIN)    \n    {\n        switch (action) \n        {\n        case 0:\n            retu = Findhittrace ( addr, &buff,&psize);\n            for (i=0;i < psize;i++ )    {\n                if ( retu[i] != ( TR_TRACE | TR_HIT )  ) \n                {\n                    continue;\n                }\n                Modifyhittrace((addr+i) , (addr+i+1),ATR_REMOVE);\n            }\n            break;\n        default:\n            break;\n        };\n    };\n};\n</code></pre>\ncompiled with vs 2010 express and modified pdk by alex downloadable from www.ollydbg.de\n<pre><code>cl /nologo /W4 /O1 /J /analyze /LD /WX /D\"_CRT_SECURE_NO_WARNINGS\" hitaid.cpp    \n/link /subsystem:windows /dll /ENTRY:DllEntryPoint/MERGE:.rdata=.text .\\ollydbgvc7.lib\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 31, 2014 at 6:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}