{
    "title": "Changing a windows name by patching create window function call",
    "link": "https://reverseengineering.stackexchange.com/questions/16979/changing-a-windows-name-by-patching-create-window-function-call",
    "content": "I use x64dbg and IDA Pro the process is 32bit. I'm not sure if I'm doing this right or not because I'm getting a crash which I'm not sure if it's caused by me doing something wrong or the startup process of the application failing for some reason because it can't find the window.\nBasically what I'm trying to do is change the window title of some application on startup. I'm trying to achieve this by setting a break point on the user32 function <pre><code>CreateWindowExA</code></pre> and then attempting to change the <pre><code>lpWindowName</code></pre> parameter.\nHere is what execution looks like when the bp is hit:\n\nWhere you see the string \"Title possibly\" originally contained what was the windows title, so I assume that's the location I need to change. When changing at that address is when I get the error though.\nSorry for any ignorance, I'm new to this and practicing. Thanks.\nEdit: I worked on this a little more and made a dummy program to help me figure out what was happening. So the <pre><code>CreateWindowExA</code></pre> function in this application used the same pointer for both <pre><code>lpClassName</code></pre> and <pre><code>lpWindowName</code></pre> args. So patching the program to push just a string instead of that pointer successfully achieved what I was aiming for.\n",
    "votes": "5",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "debugging",
        "binary-analysis",
        "x86"
    ],
    "user": "notvita",
    "time": "Dec 19, 2017 at 22:17",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "Do you change the pointer or the bytes it points to? What is the size in bytes of the original window title?\n",
            "time": null
        },
        {
            "user": "notvita",
            "text": "I change the bytes it points to and keep it with a string of the same length if that counts for anything.   The original title I believe is a string of 10 characters including the <pre><code>0/</code></pre> (if I need to include it?) unless it's a wide char I guess. Not exactly sure how I would confirm that though sorry\n",
            "time": null
        },
        {
            "user": "EWD-0-",
            "text": "Take a look msdn.microsoft.com/en-us/library/windows/desktop/â€¦ to see if you change the right parameter. There is no need to guess which parameter is the window name when it's documented.\n",
            "time": null
        },
        {
            "user": "notvita",
            "text": "Thanks. I was trying to but I'm a bit confused about things. Where the line is it breaks, but that to me doesn't look like a function. Are all those instructions leading up to the <pre><code>call user32.76F8AA9C</code></pre> down the bottom the functions prologue and then the actual call the function being called? That's kind of the conclusion I came to and all the <pre><code>dword ptr ss</code></pre> pushes above <pre><code>call user32.76F8AA9C</code></pre> being the functions parameters?\n",
            "time": null
        },
        {
            "user": "EWD-0-",
            "text": "Yes, as in stdcall we have the parameters in the stack you can just check/change them in the debugger stack view. What you see here is a functions which is somehow working as an interface to call the main functionality.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Tip: Install xAnalyzer for x64dbg, that might help you in your reversing efforts. \nNow, you are in the <pre><code>user32.dll</code></pre> function <pre><code>CreateWindowExA</code></pre>. I would not change that parameter there, but outside in user code (familiarize yourself with the <pre><code>stdcall</code></pre> convention, its what WinApi uses). The parameter you are shooting for is three pushes above the <pre><code>call CreateWindowExA</code></pre> in user code. Either change the pointer or the content under it and don't forget to null-terminate.\n",
            "votes": "3",
            "user": "barnaby-b",
            "time": "Dec 20, 2017 at 14:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Kernel function? For starters this is not a function in kernel32.dll and furthermore just because that DLL has \"kernel\" in its name doesn't make the function a kernel function.</span>",
                    "time": null
                },
                {
                    "user": "barnaby-b",
                    "text": "<span class=\"comment-copy\">@0xC0000022L You are completely right. It was late here and I just typed up a quick answer. Of course that CreateWindow does not go through the sysenter system, I just saw he's inside a dll and called it a kernel function for whatever reason. (edited the aswer)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Hook it, then set the parameter <pre><code>lpWindowName</code></pre> to <pre><code>\"your name here\"</code></pre> (no promises this will work) OR breakpoint on <pre><code>mov edx, dword ptr ss:[EBP+C]</code></pre>, then grab EBP from the FPU (registers box), go in to a program like ReClass and set the <pre><code>EBP+0xC</code></pre> (window name) to whatever name you want (90% sure this will work). References: https://stackoverflow.com/questions/873658/how-can-i-hook-windows-functions-in-c-c https://www.youtube.com/watch?v=K_jj6yF5ac0\n",
            "votes": "2",
            "user": "Graham Best",
            "time": "Dec 15, 2017 at 15:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Thanks for the responses guys. I managed to achieve my goal which is detailed in the OP edit:\nThe <pre><code>CreateWindowExA</code></pre> function in this application used the same pointer for both <pre><code>lpClassName</code></pre> and <pre><code>lpWindowName</code></pre> args. So patching the program to push just a string instead of that pointer for <pre><code>lpWindowName</code></pre> successfully achieved what I was aiming for. I believe changing the <pre><code>lpClassName</code></pre> was causing the crash I described in the OP.\n",
            "votes": "0",
            "user": "notvita",
            "time": "Dec 19, 2017 at 22:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}