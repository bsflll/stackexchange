{
    "title": "How do I reverse engineer structs that are put as parameters in a function",
    "link": "https://reverseengineering.stackexchange.com/questions/29794/how-do-i-reverse-engineer-structs-that-are-put-as-parameters-in-a-function",
    "content": "how do I go around figuring out where to reverse engineer a struct?\nAs shown in the picture below, I have this function called \"struct dynamic_array\" which I want to reverse engineer and reimplement in C#, but I can't seem to find out where to look for it inside of IDA Pro?\nHighlighting it doesn't give me any options and it doesn't show up anywhere, if I could get guidance on where to find it that would be highly appreciated.\nThe most help I got from an experienced friend was that it's a simple implementation of <pre><code>std::vector</code></pre>, so now I know a little about it\n",
    "votes": "2",
    "answers": 1,
    "views": "446",
    "tags": [
        "ida",
        "c++",
        "struct",
        "array"
    ],
    "user": "Oliver Vedel Rasmussen",
    "time": "Dec 30, 2021 at 9:33",
    "comments": [],
    "answers_data": [
        {
            "content": "The function's name isn't <pre><code>struct dynamic_array</code></pre>. The function's name is <pre><code>Mesh::CalculateBoneBindPoseBounds</code></pre>.\nThe function accepts an argument of type <pre><code>struct dynamic_array<...></code></pre>.\nThere's no function named <pre><code>dynamic_array</code></pre>, as it's simply as structure defined within the binary. The name does imply we're dealing with an <pre><code>std::vector</code></pre>-like object, so I'd start with assuming that's the case for now and reverse engineer the function you're interested in particularly.\nIf you wish to reverse engineer the structure itself and functions related to the <pre><code>dynamic_array</code></pre> structure, you should look for a constructor to start with.\nHighlighting won't work because that isn't the function's full name but browsing through IDA's function / name list view, you may be able to locate functions named <pre><code>struct dynamic_array</code></pre>. Depending on implementation, functionality and compilation parameters some or most functions may be inlined, preventing you from finding a function definition to reverse.\nIn case this is C code (or C style within C++ code) functions might not be named for the object they're implementing, although this doesn't seem to be the case, as evident by the naming convention.\nRegardless of whether functions are inlined or whether they're implemented as struct/class methods or bare functions, after finding the major implementation functions for the structure you should start by mapping the structure's members. Their sizes, types and meaning by reverse engineering the different functions. After most of the members are clear, naming related functions shouldn't be too difficult.\n",
            "votes": "2",
            "user": "NirIzr",
            "time": "Dec 30, 2021 at 9:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}