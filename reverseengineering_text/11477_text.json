{
    "title": "Why are values passed through useless copies?",
    "link": "https://reverseengineering.stackexchange.com/questions/11477/redundant-mov-instructions-why-is-this",
    "content": "So, say that I have the following code, which gives three examples of what I believe to be unnecessary copies of values.\n<pre><code>mov    QWORD PTR [rbp-0x18],rdi\nmov    rdx,QWORD PTR [rbp-0x18]\nlea    rax,[rbp-0x10]\nmov    rsi,rdx\nmov    rdi,rax\ncall   4003e0 <strcpy@plt>\n</code></pre>\nWhy is the value in <pre><code>rdi</code></pre> copied to memory at <pre><code>rbp-0x18</code></pre>, then copied back to <pre><code>rdx</code></pre> ?  It's then copied to <pre><code>rsi</code></pre> (2 extra copies).\nFinally, why the <pre><code>lea + mov</code></pre> for <pre><code>rbp-0x10</code></pre> to <pre><code>rax</code></pre>, then to <pre><code>rdi</code></pre> ?  Is there any reason the following code wasn't generated ?\n<pre><code>mov    rsi,rdi\nlea    rdi,[rbp-0x10]\ncall   4003e0 <strcpy@plt>\n</code></pre>\n(My guess is that this is just an artifact of the code generation in the compiler, but I'm making sure there's not some rules of x86-64 that I'm missing.)\n",
    "votes": "8",
    "answers": 1,
    "views": "917",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "Neomind",
    "time": "Jun 5, 2014 at 6:31",
    "comments": [],
    "answers_data": [
        {
            "content": "There are no artifacts and surely the compiler, and I mean <pre><code>GCC</code></pre>, can generate a better and faster code if told so. The first version of your generated code is non optimized. Why ? Either because <pre><code>-O0</code></pre> flag (0 level optimizations ==> No optimizations) was specified, or because no optimization flags were specified and by default <pre><code>GCC</code></pre> turns optimizations off. \nBelow you'll find two versions of the same code. Version 1 with <pre><code>-O0</code></pre> flag. Version 2 with <pre><code>-O2</code></pre> flag. \n\nVersion 1:\n<pre><code> 55                      push   rbp\n 48 89 e5                mov    rbp,rsp\n 48 81 ec 10 04 00 00    sub    rsp,0x410\n 89 bd fc fb ff ff       mov    DWORD PTR [rbp-0x404],edi\n 48 89 b5 f0 fb ff ff    mov    QWORD PTR [rbp-0x410],rsi\n 48 8b 85 f0 fb ff ff    mov    rax,QWORD PTR [rbp-0x410]\n 48 83 c0 08             add    rax,0x8\n 48 8b 10                mov    rdx,QWORD PTR [rax]\n 48 8d 85 00 fc ff ff    lea    rax,[rbp-0x400]\n 48 89 d6                mov    rsi,rdx\n 48 89 c7                mov    rdi,rax\n e8 40 fe ff ff          call   400400 <strcpy@plt>\n 48 8d 85 00 fc ff ff    lea    rax,[rbp-0x400]\n 48 89 c7                mov    rdi,rax\n e8 41 fe ff ff          call   400410 <puts@plt>\n b8 00 00 00 00          mov    eax,0x0\n c9                      leave\n c3                      ret\n 66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]\n 00 00 00  \n</code></pre>\nVersion 2:\n<pre><code> 48 81 ec 08 04 00 00    sub    rsp,0x408\n 48 8b 76 08             mov    rsi,QWORD PTR [rsi+0x8]\n 48 89 e7                mov    rdi,rsp\n e8 ad ff ff ff          call   400400 <strcpy@plt>\n 48 89 e7                mov    rdi,rsp\n e8 b5 ff ff ff          call   400410 <puts@plt>\n 31 c0                   xor    eax,eax\n 48 81 c4 08 04 00 00    add    rsp,0x408\n c3                      ret\n 0f 1f 00                nop    DWORD PTR [rax]\n</code></pre>\n\nIf you're interested in the optimizations performed by <pre><code>GCC</code></pre> you should read this link, and this one too. You can also check the <pre><code>GCC</code></pre> summit publications.\n",
            "votes": "9",
            "user": "yaspr",
            "time": "Jun 5, 2014 at 6:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">Ok, seems to be what I was assuming.  I was posting code from a wargame challenge, and I suppose no optimization makes sense there.</span>",
                    "time": null
                }
            ]
        }
    ]
}