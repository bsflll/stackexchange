{
    "title": "IDA Hex-Rays suggests an invalid offset",
    "link": "https://reverseengineering.stackexchange.com/questions/16792/ida-hex-rays-suggests-an-invalid-offset",
    "content": "While running Hex-Rays decompiler against an application, Hex-Rays gave the following output:\n<pre><code>__int64 v29; // r10 ...  v29 = 0i64;    if( !v28)    v19 = 0;\n\n do\n  {\n    v30 = *(_BYTE *)(v29 + 5394926180i64);\n    v31 = *(_BYTE *)(v29 + 5394926172i64);\n    v32 = *(_BYTE *)(v29 + 5394926184i64);\n    v33 = *(_BYTE *)(v29 + 5394926176i64);\n    v34 = *(_BYTE *)(v29++ + 5394926224i64);\n    v75.m128i_i8[v29 + 15] = v30 ^ v34;\n    *((_BYTE *)&v76 + v29 + 3) = v31 ^ *(_BYTE *)(v29 + 5394926227i64);\n    *((_BYTE *)&v76 + v29 + 7) = v32 ^ *(_BYTE *)(v29 + 5394926231i64);\n    *((_BYTE *)&v76 + v29 + 11) = v33 ^ *(_BYTE *)(v29 + 5394926235i64);\n    *((_BYTE *)&v74 + v29 + 15) = v30 ^ *(_BYTE *)(v29 + 5394926239i64);\n    v75.m128i_i8[v29 + 3] = v31 ^ *(_BYTE *)(v29 + 5394926243i64);\n    v75.m128i_i8[v29 + 7] = v32 ^ *(_BYTE *)(v29 + 5394926247i64);\n    v75.m128i_i8[v29 + 11] = v33 ^ *(_BYTE *)(v29 + 5394926251i64);\n  }\n  while ( v29 < 4 );\n</code></pre>\nI'm confused about the references:\n<pre><code>*((_BYTE *)&v76 + v29 + 3) = v31 ^ *(_BYTE *)(v29 + 5394926227i64);\n*((_BYTE *)&v76 + v29 + 7) = v32 ^ *(_BYTE *)(v29 + 5394926231i64);\n*((_BYTE *)&v76 + v29 + 11) = v33 ^ *(_BYTE *)(v29 + 5394926235i64);\n*((_BYTE *)&v74 + v29 + 15) = v30 ^ *(_BYTE *)(v29 + 5394926239i64);\n</code></pre>\nThese seem to be well outside the realm of any possible array? Am I missing something?\n",
    "votes": "0",
    "answers": 2,
    "views": "542",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "user12321",
    "time": "Nov 20, 2017 at 12:44",
    "comments": [
        {
            "user": "w s",
            "text": "Can you post an assembly code related to one of those offsets ?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It looks like you're dealing with constant address around <pre><code>5394926180i64 (0x141900a64)</code></pre> and <pre><code>v29</code></pre> looks like an index in the array of structures. I'd say that it looks like kind of work with memory mapped registers - I had seen such a things before with various IOT devices ROMs . I'd suggest to do the following:\n\nVerify that you have a segment that includes the address. If not - create additional data segment that includes all mentioned addresses.\nMark the suspicious number as offsets (just press O on them).\n\nThis should cause IDA to threat all these things as offsets in memory.\nIf this is low level code that deals with hardware directly you'll probably find all segment addresses either in it SDK or in the corresponding datasheet.\n",
            "votes": "1",
            "user": "w s",
            "time": "Nov 20, 2017 at 7:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user12321",
                    "text": "<span class=\"comment-copy\">In this case it isn't low-level code but just a Windows application.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Appears I may have figured it out. In this case, it's just dereferencing offsets from 0 which ultimately point to some data in .rdata. I hadn't realized it until I modified the number representation to hex.\n",
            "votes": "0",
            "user": "user12321",
            "time": "Nov 20, 2017 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}