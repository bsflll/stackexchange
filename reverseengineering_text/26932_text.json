{
    "title": "Why do reversers nowadays reverse engineer using decompilers and not disassemblers?",
    "link": "https://reverseengineering.stackexchange.com/questions/26932/why-do-reversers-nowadays-reverse-engineer-using-decompilers-and-not-disassemble",
    "content": "I see many reverse engineering lessons and every second person does reverse engineer using Ghidra decompiler and not disassembler as both are available in the same platform. I assume that reversing using decompiler is easy than disassembler(understanding the assembly of the code). Do I'm thinking right?\nlet's say I'm using Ghidra then when should I see disassembler and when decompiler?\nPlus If we have now a free decompiler available in Ghidra then the need for a disassembler is gone and there is no need of understanding the assembly when we have a decompiler?\n",
    "votes": "12",
    "answers": 4,
    "views": "6k",
    "tags": [
        "ida",
        "binary-analysis",
        "ghidra",
        "disassemblers",
        "decompiler"
    ],
    "user": "Ramesses II",
    "time": "Feb 3, 2021 at 12:49",
    "comments": [
        {
            "user": "blabb",
            "text": "both have their strengths and weakness a disassembler is like learning from kindergarten learning the basics ,having a sound understanding of the alphabets and numerics ,and multiplication tables   so that calculus comes off the head  , decompiler islike saylearning japanese in a crash course so that you can go by in japan for few months of stay   and this is a question that is opinion based please refrain from asking opinion based questions\n",
            "time": null
        },
        {
            "user": "user1720897",
            "text": "Decompilers give you a best guess of what the code does at a high level. In some instances decompilers get it wrong. Malicious binaries may be written to confuse decompilers. Disassemblers show you exactly what the binary does. Often, you'll end up using both and not rely on just the decompiler.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Actually I have been misled many times by decompilers and often find myself consulting the disassembly when having a decompiler available. If decompilers worked as well as you seem to think they do it'd be awesome and they would indeed obviate the need for disassemblers. However, in the real world it's a mixed bag which is why oftentimes you have a way to synchronize between both views or can only decompile individual units (like functions).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Although these terms are being used interchangeably, there is an intrinsic difference between disassembler and decompiler definitions traditionally. Let's first consider common steps involved in converting low level code to high level human readable code. This is similar to compilation where you convert high level code to low level machine code or an executable.\n\nSyntax analysis + semantic analysis\nIntermediate code\nControl flow recovery\nControl flow and data flow analysis\nVariable recovery and type recovery\nAdvance structure recovery, etc.\nHigh level representation.\n\nNote that these levels differ according to algorithm of the decompiler.\nNow historically disassembly and decompilation are used interchangeably. But, now a days the terms are generally used in following context.\n\nDisassembler: converts low level code to assembly\nDecompiler: Converts low level code to high level representation like C or C++ (mostly C).\n\nIn my personal opinion, decompiler involves advance analysis and most importantly type and advance structure recovery for high level and user-readable representation. I'd personally use disassembler for analyses like symbolic analysis, code similarity or maybe something like fuzzing where actual high level representation may not be needed. And I'd prefer decompiler, when I'd like to interpret the underlying code or general working of the program. As program is better conceivable that way.\nReferences\n\nWang, Shuai, Pei Wang, and Dinghao Wu. \"Reassembleable disassembling.\"\n24th {USENIX} Security Symposium ({USENIX} Security 15). 2015.\n\n\nAndriesse, Dennis, et al. \"An in-depth analysis of disassembly on full-scale x86/x64 binaries.\"\n25th {USENIX} Security Symposium ({USENIX} Security 16). 2016.\n\n\nWang, Ruoyu, et al. \"Ramblr: Making Reassembly Great Again.\"\nNDSS. 2017.\n\n\n\"Introduction to Decompilation vs. Disassembly\" Hex-Rays SA\n",
            "votes": "14",
            "user": "Noelle L.",
            "time": "May 21, 2021 at 15:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">Understood very well ðŸ¤—</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It depends on the reverse engineering, most use decompilers to speed up your work, this helps a lot to locate necessary calls, let's say you are at your job and need to quickly find an X algorithm to deliver your work, so if you were to use only one disassembler you would take much more work time analyzing and converting the small assembly instructions and equivalent high level code, decompilers are wonderful they simplify your life, but don't get stuck in that because it's not enough, let's say that in my example I find the algorithm sought with decompilers to obtain the operation closest to the desired one uses the disassembler and compares its analyzed pseudocode with the decompilers, all this to bring the maximum to the original, also depends on the work to be carried out, good studies.\n",
            "votes": "1",
            "user": "Happy",
            "time": "Feb 3, 2021 at 16:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">Noted sir! ðŸ”¥Thanks ðŸ˜Š</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "In addition to other answers, my take is that \"Reverse Engineering\" from executable code means \"get the source code from the executable code\".\nWith that definition, if the program being reverse engineered was written in C, we need a C decompiler to effectively reverse engineer it; similarly, if it was written in Java, we need a Java decompiler. If we use a disassembler on the first case, we can understand the logic and deduce the workings of the code, but we have nothing close to the original source code. If we use a bytecodes explorer for Java, we can follow the execution in the JVM, and understand what the code is doing; but very far from the source code again.\nThe only time a disassembler would do proper reverse engineering for the source code is when the code was originally written in assembly language.\nOf course there are other definitions for reverse engineering; if you want to get the APIs called on a mobile app, for example, you don't need the source code; you use a network analyzer and follow the HTTP protocol requests / responses. Then you can implement calls to the service in whatever language you want. Just clarifying that all the purpose of a decompiler is to get the source code back, and that starts from assuming the language the code was written on.\n",
            "votes": "0",
            "user": "Bruno Guardia",
            "time": "May 27, 2021 at 17:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Disassembler: Converts machine code (executable binary) to human readable Assembly code.\nDecompiler: Converts machine code (executable binary) to higher level languages such as C/C++.\n",
            "votes": "0",
            "user": "Alireza",
            "time": "May 27, 2021 at 20:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Hi and welcome to RE.SE. Without wanting to discourage you: how do you think this adds value to the existing answers? The accepted answer even has a very similar wording when defining the terms.</span>",
                    "time": null
                },
                {
                    "user": "Alireza",
                    "text": "<span class=\"comment-copy\">@0xC0000022L Mainly because the disassemblers and decompilers do not accept \"low level code\" as input as stated in other answers. It is important to clarify that Low level code in general is still human readable, and at the lowest level (assembly code) is formed by mnemonics. The main purpose of decompilers and disassemblers is to read Hex or binary data (opcodes) from an executable and convert it to low level/high level human readable code.</span>",
                    "time": null
                }
            ]
        }
    ]
}