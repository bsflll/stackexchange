{
    "title": "Reverse Engineering a Binary to reset a BIOS password",
    "link": "https://reverseengineering.stackexchange.com/questions/10647/reverse-engineering-a-binary-to-reset-a-bios-password",
    "content": "I have a laptop that I recently lost the BIOS Admin password for. I contacted the manufacturer and, after giving them some information about my BIOS (version, uuid), they sent me a file, <pre><code>smc.bin</code></pre> to put on a USB stick and boot in order to reset the BIOS password.\nI'm interested in how this works and what the binary file is. I'm skilled with linux, but don't know much about reverse-engineering. What tools can I use to examine this binary? What's a introductory thought-process to determine what a binary file like this is?\n",
    "votes": "1",
    "answers": 3,
    "views": "4k",
    "tags": [
        "binary",
        "bios"
    ],
    "user": "Jack",
    "time": "Jan 7, 2020 at 15:39",
    "comments": [],
    "answers_data": [
        {
            "content": "As a tool I would recommend radare2 for this task.\nAnd if you never done something like this before this is probably the best tutorial to get you started with.\nJust be in mind its not gonna be a quick and dirty job, might take you a while.\n",
            "votes": "5",
            "user": "GelosSnake",
            "time": "Aug 18, 2015 at 20:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kochkov",
                    "text": "<span class=\"comment-copy\">That tutorial is for the legacy BIOSes. Modern PC/Laptops firmware usually UEFI-based.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "What vendor do you have? If it is UEFI-compatible firmware, you can use UEFITool to unpack it.\nAnd use the radare2 tool to disassemble the code.\n",
            "votes": "2",
            "user": "Anton Kochkov",
            "time": "Aug 26, 2015 at 13:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Without actually knowing more about the system (system vendor), I would suggest to use <pre><code>binwalk</code></pre> to get the basic file layout. Then follow what other have done:\n\nReverse Engineering Bios Firmware\nExtract Samsung BIOS WPH\n\nYou may want to use hachoir / hachoir-subfile, see for example:\n\nhttps://reverseengineering.stackexchange.com/a/9357/3041\n",
            "votes": "0",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}