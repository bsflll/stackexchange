{
    "title": "Is it possible to decrypt an SSL connection (short of bruteforcing)?",
    "link": "https://reverseengineering.stackexchange.com/questions/2681/is-it-possible-to-decrypt-an-ssl-connection-short-of-bruteforcing",
    "content": "I'm trying to reverse-engineer a protocol (it's for a game whose server's are closing soon). I have two things: 1) the binary for the program 2) a packet dump from Wireshark (I am still able to get another dump, if needed). Now, the protocol, from what I can see from the dumps, is TLS/SSL (not sure which one) encrypted. I am aware that Wireshark has the capabilities to decrypt these packets, given that I have the required keys.. but how in the world do I extract the keys out of the binary?\ntl;dr Can I access plaintext SSL given the originating binary?\n",
    "votes": "11",
    "answers": 2,
    "views": "8k",
    "tags": [
        "decryption"
    ],
    "user": "bobbybee",
    "time": "Aug 23, 2013 at 23:45",
    "comments": [
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "To answer the question in your title: no, it isn't possible to decrypt an SSL connection if you don't have the key. Brute force would take more than the age of the universe.\n",
            "time": null
        },
        {
            "user": "bobbybee",
            "text": "Gilles: Would I have any luck looking through a disassembly?\n",
            "time": null
        },
        {
            "user": "TildalWave",
            "text": "@bobbybee - No. See this thread: How does SSL work? Three excellent answers there. ;)\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "In fact, your question is more: « How to crack an SSL connection by reverse-engineering the client ? ». Because, indeed, SSL is known to be safe when you try to crack it from outside, but what happen when you can totally control one side of the connection ? This is what you have to investigate (edit and rephrase your question in this way, you will get more relevant answers)\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@Gilles: I disagree about the last sentence. It should include something like \"at the current computing speed\". We also cannot rule out that the prime number factorization problem will be solved in the future.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you have access to the binary while it is running, it is entirely possible to extract the keys you need to decrypt the SSL/TLS session even with perfect forward secrecy. There is a 48-byte secret, called the master secret, which is shared by both sides and used to generate the session keys for the connection.\nIf the application uses the standard Win32 API to make the SSL connection, the point to intercept the key generation is inside <pre><code>lsass.exe</code></pre>, at:\n<pre><code>Caller:  ncrypt!_Tls1ComputeMasterKey@32+0x57 \nEIP:     ncrypt!_PRF@40+0x11a\n</code></pre>\nMore information can be found in my answer to \"Decryping TLS packets between Windows 8 apps and Azure\".\nMore generally, I have (with several excellent co-authors) recently developed techniques for scanning all memory accesses for interesting data such as SSL/TLS keys. A paper on this (\"Tappan Zee (North) Bridge: Mining Memory Accesses for Introspection\") has been published at CCS, and the software to do it is available on github: PANDA/TZB. Particularly take a look at the <pre><code>keyfind</code></pre> plugin, which takes a sample (encrypted) packet and scans memory accesses for TLS master secrets.\nThe procedure for finding the place where TLS master key generation happens with a new application is:\n\nUse PANDA to create a recording of the app making an encrypted connection, and save a packet capture (in the QEMU monitor, <pre><code>begin_record <session_name></code></pre>, run the app, then <pre><code>end_record <session_name></code></pre>.\nRun <pre><code>scripts/list_enc.py</code></pre> on the packet capture to extract the information needed by the <pre><code>keyfind</code></pre> plugin. Place this information in <pre><code>keyfind_config.txt</code></pre>.\nRun a replay of the session (<pre><code>begin_replay <session_name></code></pre> in the QEMU monitor) with <pre><code>-panda-plugin x86_64-softmmu/panda_plugins/panda_keyfind.so</code></pre> specified on the command line. After a (very) long time, it will spit out the code locations where a matching TLS key was read or written to <pre><code>key_matches.txt</code></pre>.\n\nThe documentation is pretty sketchy at the moment, but looking at the source should resolve any questions you have (and feel free to ask for clarification here!).\nFor more information on using panda for this see: here\n",
            "votes": "16",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mr Jedi",
                    "text": "<span class=\"comment-copy\">Hi, can it be applied with Pandas 2?</span>",
                    "time": null
                },
                {
                    "user": "Brendan Dolan-Gavitt",
                    "text": "<span class=\"comment-copy\">The same approach should work fine with PANDA 2, but you'll have to port the <code>keyfind</code> plugin over from the PANDA 1 repository here: <a href=\"https://github.com/moyix/panda/tree/master/qemu/panda_plugins/keyfind\" rel=\"nofollow noreferrer\">github.com/moyix/panda/tree/master/qemu/panda_plugins/keyfind</a></span>",
                    "time": null
                },
                {
                    "user": "PirateApp",
                    "text": "<span class=\"comment-copy\">does this apply to windows 10?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Properly implemented SSL traffic has a property of forward secrecy. Which means that you can't decrypt it even if you have the whole packet dump and required private keys. As \nBrendan Dolan-Gavitt points out in his answer, you need access to the binary while it's running to do that. \nWhat you can try to do is set up SSL mitm using something like ettercap. Which might be a bit involved and might not work depending on the SSL implementation. \nNow, not a direct answer to your question, but it might help you achieve what you want:\nAnother thing you could to, since your goal is to analyze the underlying protocol is to make hooks on the higher level. I have use oSpy before to do similar work. \n\noSpy is a tool which aids in reverse-engineering software running on the Windows platform. With the amount of proprietary systems that exist today (synchronization protocols, instant messaging, etc.), the amount of work required to keep up when developing interoperable solutions will quickly become a big burden when limited to traditional techniques. However, when the sniffing is done on the API level it allows a much more fine-grained view of what's going on. \n\noSpy works by attaching to the process whose traffic you want to analyze and then monitor certain APIs.\n",
            "votes": "6",
            "user": "0xea",
            "time": "Aug 27, 2013 at 10:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Emphasis should be put on <i>properly implemented</i> in the very first sentence ;)</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">Acknowledged and corrected :)</span>",
                    "time": null
                }
            ]
        }
    ]
}