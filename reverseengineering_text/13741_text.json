{
    "title": "idaypthon - how to refresh Choose2 listcontrol once it has been displayed?",
    "link": "https://reverseengineering.stackexchange.com/questions/13741/idaypthon-how-to-refresh-choose2-listcontrol-once-it-has-been-displayed",
    "content": "I have created a plugin/idascript (ida-batch_decompile) that aims to make it easier to decompile a target including images referenced as imports or any other decompilable files in the targets project dir. Optionally it also adds some helpful annotations to the pseudocode. In order to make this as convenient as possible I've added a Dialog that helps in enumerating target files and allows to select files for decompiliation from within ida pro. For the selection I'm using a variant of the <pre><code>Choose2</code></pre> control that I borrowed from EiNSTeiN.\nWhat I'd like to have is a way to dynamically add items (e.g. on button click) to an already displayed <pre><code>Choose2</code></pre> list control. For some reason, this does not work, newly added items are not displayed unless I manually  <pre><code>right-click/refresh</code></pre> on that listview control. I tried calling <pre><code>Chooser2.Refresh(), Form.Refresh()</code></pre> without any luck. The only workaround that kind of works is to close the form, add items to the listview and re-exec that form in order for it to show up. This is kind of ugly (see gif 1).\n<pre><code>def OnButtonLoad(self, code=0):\n    # superdirty close, propagate, execute hack, otherwise listview would not be updated\n    self.Close(0)\n    # add items to listview\n    self.propagateItems(enumerate_other=True, enumerate_imports=True)\n    self.Execute()\n</code></pre>\n--?-- What is the correct way to add items to an already existing <pre><code>Choose2</code></pre> listcontrol and have it refresh without having to <pre><code>Close(); Execute()</code></pre> the whole form?\nI was searching for something like\n<pre><code>Chooser.items.add(newItem)\nChooser.Refresh()\n</code></pre>\nbut that does not seem to refresh the listview control.\n",
    "votes": "0",
    "answers": 1,
    "views": "415",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "tintin",
    "time": "Oct 16, 2016 at 21:53",
    "comments": [],
    "answers_data": [
        {
            "content": "Unfortunately IDA's builtin controllers are rather simple and do not support the full flexibility of the QT controls you're based on.\nLuckily for you, IDA exposed most of the QT API directly, and plugin developers are not able to interface with QT directly. In the past this wasn't possible, and we were bound to the <pre><code>Choose2</code></pre>, <pre><code>Ask*</code></pre> functions.\nI will not recommend anyone developing anything more than the simplest of plugins to use the provided IDA dialogs anymore. Instead, you should interface with QT directly for most of your UI development.\nAlthough using QT is a bit more complex (you'll might need to deal with QT' signals and slots) it also enables a lot of flexibility.\nFollowing is a short snippet that will let you update a list view. Every time the \"add item\" button is clicked, a new item will appear in the list.\n<pre><code>form PyQt5 import QtWidgets\n\nclass ListViewDemoDialog(QtWidgets.QDialog):\n    def __init__(self):\n        super(ListViewDemoDialog, self).__init__(**kwargs)\n\n        # create a layout to place controllers (called widgets) on\n        layout = QtWidgets.QVBoxLayout())\n\n        # create an empty list\n        self.list = QtWidgets.QListWidget()\n\n        # create a button and connect it's \"clicked\" signal to our \"add_item\" slot\n        self.addbtn = QtWidgets.QPushButton(\"Add item\")\n        self.addbtn.clicked.connect(self.add_item)\n\n        layout.addWidget(self.addbtn)\n        layout.addWidget(self.list)\n\n        # make our created layout the dialogs layout\n        self.setLayout(layout)\n\n     def add_item(self):\n         self.list.addItem(\"This is an item\")\n</code></pre>\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Oct 17, 2016 at 1:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tintin",
                    "text": "<span class=\"comment-copy\">thank you for the detailed answer. I really like the simplistic dialog interface to quickly draft a plugin therefore it is a pity that there is no way of updating a list once an item was added lateron. I'll probably look into QT if the form reload annoys me too much :) thanks.</span>",
                    "time": null
                }
            ]
        }
    ]
}