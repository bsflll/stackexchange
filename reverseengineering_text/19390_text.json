{
    "title": "Automating a crackme solving process",
    "link": "https://reverseengineering.stackexchange.com/questions/19390/automating-a-crackme-solving-process",
    "content": "Let's say we have a simple crackme, which asks for a password. After verifying it, <pre><code>eax</code></pre> will contain <pre><code>1</code></pre> if it is correct, and <pre><code>0</code></pre> otherwise. Is there a way (I am interested both in Linux and Windows) for automating the following:\n\nLoad executable\nPut breakpoint at a known address\nProvide a password as input for the executable\nWhen reaching the breakpoint set <pre><code>eax</code></pre> to <pre><code>1</code></pre>\nSave any output of the executable\n",
    "votes": "0",
    "answers": 2,
    "views": "631",
    "tags": [
        "debuggers",
        "crackme",
        "automation"
    ],
    "user": "robert",
    "time": "Sep 18, 2018 at 18:02",
    "comments": [
        {
            "user": "Twifty",
            "text": "There are too many variables for an automated process. In the past I've extracted the asm I'm interested in and added it inline to a c/c++ app. Another method would be to load the binary from c/c++ and call the functions directly, much like you would do with a dll.\n",
            "time": null
        },
        {
            "user": "user202729",
            "text": "This question is equivalent to \"do you know any scriptable debugger\"...\n",
            "time": null
        },
        {
            "user": "robert",
            "text": "Yes, it may be equivalent to \"do you know any scriptable debugger\"...\n",
            "time": null
        },
        {
            "user": "user22970",
            "text": "If you will automate stuff on linux, note that ptrace will read/write data as 64 bit on 64 bit systems, not 32 bit. that means you should be carful with a code you reuse that was originally written to 32 bit, it might need modifications\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "windbg in windows and gdb in linux both are capable of executing scripts to automate tasks  \nwhat you ask should be doable fairly easily in both of the debuggers \nhere is a demeo for windbg \nsource for a simple crackme that takes a password\n<pre><code>:\\>cat simcram.cpp\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint checkpass(char *pass) {\n    return strcmp(\"goodboy\" , pass);\n}\nint main(int argc , char *argv[] ) {\n    if(argc != 2 ) {\n        printf(\"usage %s password\n\" , argv[0]);\n        exit(0);\n    }\n    int res = checkpass(argv[1]);\n    if(res == 0 ) {\n        printf(\"please proceeed to vault\n\");\n    } else {\n        printf(\"access denied incorrect password\n\");\n    }\n    return res;\n}\n</code></pre>\nexecuting directly on console \n<pre><code>:\\>simcram.exe\nusage simcram.exe password\n\n:\\>simcram.exe foobar\naccess denied incorrect password\n\n:\\>simcram.exe goodboy\nplease proceeed to vault\n</code></pre>\na scripted execution that would set eax to 0 irresepective on any password\n<pre><code>:\\>cdb -c \"g simcram!checkpass;gu;r eax= 0;g;q\" simcram.exe abracadabragiligilichoo\n\nMicrosoft (R) Windows Debugger Version 10.0.16299.15 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nCommandLine: simcram.exe abracadabragiligilichoo\n\n\nntdll!LdrpDoDebuggerBreak+0x2c:\n77b205a6 cc              int     3\n0:000> cdb: Reading initial command 'g simcram!checkpass;gu;r eax= 0;g;q'\n\nplease proceeed to vault  <<<<<<<<<<<<<<<<<\nquit:\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 18, 2018 at 18:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If the number of instructions executed is proportional to the number of characters correct (i.e, maybe it's a simple byte-by-byte strcmp), then you could use instrumentation tools like Pintool to count the number of instructions executed, and use that to brute-force the password byte-by-byte. Here's an example of that.\n",
            "votes": "1",
            "user": "user464014",
            "time": "Sep 22, 2018 at 20:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}