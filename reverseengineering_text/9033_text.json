{
    "title": "How to recognize the function call in a dynamic lib?",
    "link": "https://reverseengineering.stackexchange.com/questions/9033/how-to-recognize-the-function-call-in-a-dynamic-lib",
    "content": "when I disassemble an OpenCV dynamic library file (<pre><code>libopencv_imgproc.so</code></pre>), I find that there are a lot of <pre><code>bl</code></pre> instructions which target address are in the <pre><code>.plt</code></pre> section. But, I could'n find its symbol info. \n<pre><code>00110ee0 <cvResize>:\n  110ee0:   b5f0        push    {r4, r5, r6, r7, lr}\n  110ee2:   4603        mov r3, r0\n  110ee4:   b0bf        sub sp, #252    ; 0xfc\n  ...\n  110ef4:   4ca8        ldr r4, [pc, #672]  ; (111198 <cvResize+0x2b8>)\n  110ef6:   9500        str r5, [sp, #0]\n  110ef8:   f70e ebda   blx 1f6b0 <_init+0x2b4>\n  ...\n</code></pre>\nI could not find the address <pre><code>1f6b0</code></pre> in the <pre><code>.text</code></pre> section. It actually is in the <pre><code>.plt</code></pre> section. However, I couldn't find it in the symbol table.\nHow can I get these missed symbol info?\n",
    "votes": "2",
    "answers": 1,
    "views": "548",
    "tags": [
        "arm",
        "dynamic-linking"
    ],
    "user": "winter333",
    "time": "Jun 1, 2015 at 7:26",
    "comments": [],
    "answers_data": [
        {
            "content": "Doing it the hard way:\n\ndisassemble the target PLT stub and figure out what pointer it's using. E.g.:\n<pre><code>359dc:  e28fc601    add ip, pc, #1048576    ; 0x100000\n359e0:  e28ccaa2    add ip, ip, #663552 ; 0xa2000\n359e4:  e5bcf900    ldr pc, [ip, #2304]!    ; 0x900\n</code></pre>\nHere, the <pre><code>ip</code></pre> will be: <pre><code>0x359e4+0x100000+0xa2000 = 0x1D79E4</code></pre>, so the last <pre><code>LDR</code></pre> will dereference <pre><code>1D79E4+0x900 = 0x1D82E4</code></pre>.  \nlook up the address in the list of relocs (<pre><code>objdump -dr</code></pre>):\n<pre><code>001d82e4  00005216 R_ARM_JUMP_SLOT   00000000   _ZN2cv10cvarrToMatEPKv\n</code></pre>\n\nDoing it the easy way:\n\nJust use IDA :), or at least a newer <pre><code>objdump</code></pre> which knows about PLT stubs.\n<pre><code>000359dc <_ZN2cv10cvarrToMatEPKvbbi@plt>:\n</code></pre>\n\nPlease note that <pre><code>objdump</code></pre> relies on the fact that the order of PLT stubs usually matches the order of relocations in the PLT reloc list. In theory, one can patch a PLT stub after linking so it uses another symbol's pointer.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jun 1, 2015 at 7:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}