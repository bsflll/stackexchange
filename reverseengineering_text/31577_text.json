{
    "title": "Cannot load libvulkan.so on Linux chroot running on Android while normal Android apps can load it",
    "link": "https://reverseengineering.stackexchange.com/questions/31577/cannot-load-libvulkan-so-on-linux-chroot-running-on-android-while-normal-android",
    "content": "Environment\nFirst I will give a quick summary of my environment\nDevice: Samsung Galaxy M20 (m20lte)\nSoC: Exynos 7904 (with Mali-G71 GPU)\nOS: Android 10 (Stock ROM with root using Magisk)\nKernel: 4.4.177\nSELinux is disabled (set to permissive mode)\nVulkan API version: 1.1.108\nChroot environment: Debian 11 (arm64) running on Linux Deploy, with full root access. Directories like <pre><code>/dev</code></pre>, <pre><code>/proc</code></pre>, <pre><code>/data</code></pre>, <pre><code>/system</code></pre>, <pre><code>/sdcard</code></pre> are mounted into the chroot.\nVulkan availability\nI know this device support Vulkan API (Vulkan loader avaliable at <pre><code>/system/lib64/libvulkan.so</code></pre>).\nNormal Android apps can load and use Vulkan APIs without any problems. For example:\n\nVulkan Caps Viewer can display Vulkan information on this device\nGeekBench 5, <pre><code>Compute</code></pre> section has an option to compute with GPU using Vulkan API, and it works well\n\nProblem\nI cannot load <pre><code>libvulkan.so</code></pre> from <pre><code>/system/lib64/libvulkan.so</code></pre> by running program in the chroot.\nFor example, I created a simple c source (named <pre><code>dlopen.c</code></pre>):\n<pre><code>#include <stdio.h>\n#include <dlfcn.h>\n\nint main() {\n        void *handle = dlopen(\"libvulkan.so\", RTLD_LAZY);\n        if (!handle) {\n                printf(\"Cannot load libvulkan.so\n\");\n        } else {\n                printf(\"Loaded libvulkan.so\n\");\n        }\n\n        return 0;\n}\n</code></pre>\nCompile it using gcc: <pre><code>gcc dlopen.c -ldl -o dlopentest</code></pre>\nSetup the environment variable <pre><code>LD_LIBRARY_PATH=/system/lib64/</code></pre> or symlink <pre><code>/system/lib64/libvulkan.so</code></pre> to (folder in chroot) <pre><code>/lib/aarch64-linux-gnu/libvulkan.so</code></pre> and <pre><code>/lib/aarch64-linux-gnu/libvulkan.so.1</code></pre>\nFinally run it using <pre><code>./dlopentest</code></pre>, the program always print <pre><code>Cannot load libvulkan.so</code></pre>\nUsing <pre><code>strace</code></pre>, but nothing weird found (log link)\nI'm not sure about <pre><code>/lib/aarch64-linux-gnu/libc.so</code></pre>, since instead of being a symlink to <pre><code>libc.so.6</code></pre> or a real <pre><code>.so</code></pre> file, it's some kind of ld script. But replacing it with a symlink to <pre><code>libc.so.6</code></pre> makes no change.\n<pre><code>vulkaninfo</code></pre> also reports an error:\n<pre><code>ERROR at /build/vulkan-tools-3Ouhix/vulkan-tools-1.2.162.0+dfsg1/vulkaninfo/vulkaninfo.h:628: Failed to initialize: Vulkan loader is not installed, not found, or failed to load.\n</code></pre>\n<pre><code>strace</code></pre> result is pretty much the same as my <pre><code>dlopentest</code></pre>, so I won't include it here.\nEDIT 1:\n(actually I don't know what section to put this, so I put it here)\nRunning <pre><code>file</code></pre> on <pre><code>/system/lib64/libvulkan.so</code></pre>:\n<pre><code>/system/lib64/libvulkan.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[md5/uuid]=e749d3c10d92fcef9b84402783d311f8, stripped\n</code></pre>\nIt's <pre><code>dynamically linked</code></pre>, so I run <pre><code>ldd</code></pre> on it and notice the following line:\n<pre><code>/system/lib64/libvulkan.so: /lib/aarch64-linux-gnu/libc.so: version `LIBC' not found (required by /system/lib64/libvulkan.so)\n/system/lib64/libvulkan.so: /lib/aarch64-linux-gnu/libdl.so: version `LIBC' not found (required by /system/lib64/libvulkan.so)\n</code></pre>\nAnd other lines from <pre><code>.so</code></pre> libraries in <pre><code>/system/lib64</code></pre> claimed the same thing.\nSo I check the <pre><code>/system/lib64/libc.so</code></pre>, and found that it's a symbolic link to <pre><code>/apex/com.android.runtime/lib64/bionic/libc.so</code></pre>.\nSo I mounted <pre><code>/apex/com.android.runtime</code></pre> to chroot.\nAfter doing so, ldd found no more problem (log link)\nBut, when I run the program:\n<pre><code>root@localhost:~# ./dlopentest\nTrace/breakpoint trap\n</code></pre>\nRunning <pre><code>strace</code></pre> (log link)\nUsing <pre><code>gdb</code></pre>, I found that it was a trap signal from <pre><code>/system/lib64/ld-android.so</code></pre>\n<pre><code>Program received signal SIGTRAP, Trace/breakpoint trap.\n0x0000007fb7fef000 in rtld_db_dlactivity () from /system/lib64/ld-android.so\n</code></pre>\nWhen I check that file:\n<pre><code>root@localhost:~# file /system/lib64/ld-android.so\n/system/lib64/ld-android.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[md5/uuid]=62f4de8cdef6f71d65c403ac59427c51, stripped\nroot@localhost:~# ldd /system/lib64/ld-android.so\n        statically linked\n</code></pre>\nQuestion\n\nWhy it does not work (why I cannot load <pre><code>libvulkan.so</code></pre> properly)?\nHow to fix it?\n\nReal purpose\nI know this section might not related to the question, but I still want to include it, to avoid possible XY problem.\nI want to run War Thunder (a game, and it supports x86_64 Linux). I run it on box64 and it runs until report cannot initialize Vulkan. FYI, Vulkan is the only supported render backend for the game on Linux, so I can't use OpenGL or something.\nThe game require the real libc (not Android one), so I can't run it on proot, and distro-proof on Termux is too complicated compared to Linux Deploy.\nFinally, thank you for reading this\nI just want to run War Thunder :)\n",
    "votes": "2",
    "answers": 0,
    "views": "559",
    "tags": [
        "android",
        "linux",
        "shared-object"
    ],
    "user": "raspiduino",
    "time": "Feb 23, 2023 at 18:35",
    "comments": [
        {
            "user": "raspiduino",
            "text": "Ok, I think this crash because <pre><code>/lib/aarch64-linux-gnu/libc.so.6</code></pre> is loaded, then another libc <pre><code>/system/lib64/libc.so</code></pre> is loaded. I don't think libc can be loaded with multiple instances\n",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "Possible solution: 1) (unlikely) If we can call vulkan api from vulkan kernel driver without using Android libs, then write a simple vulkan loader than redirect the calls. 2) Write a \"Vulkan server\" that create an IPC (pipeline), read Vulkan commands from that pipeline, then calls to Android's libvulkan.so, then compile it using Android NDK. Then write a \"client\" libvulkan.so that communicate through the IPC to redirect the calls from program. Compile it using gcc in chroot.\n",
            "time": null
        }
    ],
    "answers_data": []
}