{
    "title": "Understanding disassembly information from Visual Studio's dumpbin and GNU's objdump",
    "link": "https://reverseengineering.stackexchange.com/questions/30421/understanding-disassembly-information-from-visual-studios-dumpbin-and-gnus-obj",
    "content": "I usually write my code on Windows, and there are two different types of development environments, each providing their own tools to view the assembly code of an object file(<pre><code>*.obj</code></pre>) or executable (<pre><code>*.exe</code></pre>).\nIf I am working with Visual Studio build system from command line, the <pre><code>dumpbin /disasm file.obj</code></pre> command can generate disassemble a binary file. A snippet of a disassembly from an executable, produced by <pre><code>dumpbin</code></pre> :\n<pre><code>  000000014000E712: 41 81 F0 6E 74 65  xor         r8d,6C65746Eh\n                    6C\n  000000014000E719: 41 81 F1 47 65 6E  xor         r9d,756E6547h\n                    75\n  000000014000E720: 44 8B D2           mov         r10d,edx\n  000000014000E723: 8B F0              mov         esi,eax\n  000000014000E725: 33 C9              xor         ecx,ecx\n  000000014000E727: 41 8D 43 01        lea         eax,[r11+1]\n  000000014000E72B: 45 0B C8           or          r9d,r8d\n  000000014000E72E: 0F A2              cpuid\n  000000014000E730: 41 81 F2 69 6E 65  xor         r10d,49656E69h\n                    49\n  000000014000E737: 89 04 24           mov         dword ptr [rsp],eax\n</code></pre>\nHowever, if I am working with the GNU toolkit (I mean mingw64, which works with native windows binaries), then running <pre><code>objdump -D file.obj</code></pre> gives a disassembly like this:\n<pre><code>   14000e712:   41 81 f0 6e 74 65 6c    xor    $0x6c65746e,%r8d\n   14000e719:   41 81 f1 47 65 6e 75    xor    $0x756e6547,%r9d\n   14000e720:   44 8b d2                mov    %edx,%r10d\n   14000e723:   8b f0                   mov    %eax,%esi\n   14000e725:   33 c9                   xor    %ecx,%ecx\n   14000e727:   41 8d 43 01             lea    0x1(%r11),%eax\n   14000e72b:   45 0b c8                or     %r8d,%r9d\n   14000e72e:   0f a2                   cpuid  \n   14000e730:   41 81 f2 69 6e 65 49    xor    $0x49656e69,%r10d\n   14000e737:   89 04 24                mov    %eax,(%rsp)\n</code></pre>\nNow, it is immediately clear that both are providing the same information. However, I want to know what the numbers on the left column mean (e.g. <pre><code>14000e712</code></pre>)? Also why is the instruction written differently (e.g. on the first line, <pre><code>dumpbin</code></pre> writes <pre><code>r8d,6C65746Eh</code></pre>, while <pre><code>objdump</code></pre> writes <pre><code>$0x6c65746e,%r8d</code></pre>). Why is this, and what do the different representations mean? Additionally dumpbin seems to write extra information such as <pre><code>dword ptr</code></pre> that <pre><code>objdump</code></pre> doesn't write.\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "objdump"
    ],
    "user": "S R Maiti",
    "time": "May 20, 2022 at 9:59",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<pre><code>dumpbin</code></pre> is using what is known as Intel (dis)assembly syntax. <pre><code>By default, objdump</code></pre>, being a GNU utility is using what is known as AT&T (dis)assembly syntax. If you want <pre><code>objdump</code></pre> to display output in Intel syntax, add <pre><code>-Mintel</code></pre> to your <pre><code>objdump</code></pre> command line.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Let's break it down. The first and most obvious difference is Intel syntax (<pre><code>dumpbin</code></pre>) vs. AT&T syntax (<pre><code>objdump</code></pre>) for the output you give. That's be the part of your question:\n\nAlso why is the instruction written differently (e.g. on the first line, dumpbin writes <pre><code>r8d,6C65746Eh</code></pre>, while objdump writes <pre><code>$0x6c65746e,%r8d</code></pre>). Why is this, and what do the different representations mean?\n\nHowever, <pre><code>objdump</code></pre> lets you choose between the two and just defaults to AT&T (aka <pre><code>att</code></pre>). Excerpt from the <pre><code>man</code></pre> page:\n<pre><code>\"intel\"\n\"att\"\n    Select between intel syntax mode and AT&T syntax mode.\n</code></pre>\nSo you could simply use: <pre><code>objdump -D -M intel ...</code></pre> (also <pre><code>-Mintel</code></pre>) to get way closer to the output from <pre><code>dumpbin</code></pre>.\nHowever, a comparison of the syntax variants can be found on Wikipedia. This dated overview may also help. The most important difference is that Intel syntax places the target first and the source last, whereas with AT&T it's the opposite.\nLet's take the instruction you gave:\n\nIntel: <pre><code>xor r8d,6C65746Eh</code></pre>\n\n<pre><code>xor</code></pre> instruction\n(first) target operand is <pre><code>r8d</code></pre> (lower 32-bit of the <pre><code>r8</code></pre> register)\n(second) source operand is a literal <pre><code>6C65746Eh</code></pre> (the hexadecimal is denoted via the trailing <pre><code>h</code></pre> here)\n\n\nAT&T: <pre><code>xor $0x6c65746e,%r8d</code></pre>\n\n<pre><code>xor</code></pre> instruction\n(first) source operand is a literal <pre><code>$0x6c65746e</code></pre> (the hexadecimal is denoted via the leading <pre><code>0x</code></pre> here, IIRC <pre><code>$</code></pre> is for literals/addresses)\n(second) target operand is <pre><code>%r8d</code></pre> (lower 32-bit of the <pre><code>r8</code></pre> register)\n\n\n\nNB: This is largely a matter of taste. Binutils (the set of tools around <pre><code>objdump</code></pre>) and others like GDB default to AT&T syntax, but you can tell them to use the Intel syntax. Most of the disassembly I work with is Intel syntax, but it's good to be aware of the two syntax variants and know how they compare.\n\nHowever, I want to know what the numbers on the left column mean (e.g. 14000e712)?\n\nThose are the addresses. You probably know that executables typically take a different form when mapped into memory than on disk and that address implies two things:\n\nit pretends that the image is mapped at base address 0x140000000\n0x14000e712 is simply an address with offset 0xe712 into the mapped image\n\nEdit 1: Oh and perhaps one word about this <pre><code>mov dword ptr [rsp],eax</code></pre> versus <pre><code>mov %eax,(%rsp)</code></pre> business. I find the Intel syntax more readable, since it doesn't make be think where the syntax can give the clue. \"Write DWORD to address pointed to by <pre><code>rsp</code></pre>, fair enough\". However, I suppose the reasoning behind the more concise AT&T syntax is that the knowledge about the operation's size (DWORD) can be deduced from the operand (<pre><code>eax</code></pre>) and so it simply leaves out the more or less cosmetic hint of <pre><code>dword ptr</code></pre>.\n",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "May 20, 2022 at 10:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}