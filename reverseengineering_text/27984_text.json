{
    "title": "Log input data and resulting hash for CC_MD5 calls in an iOS app with Frida",
    "link": "https://reverseengineering.stackexchange.com/questions/27984/log-input-data-and-resulting-hash-for-cc-md5-calls-in-an-ios-app-with-frida",
    "content": "I am trying to understand the usage of calls to CC_MD5 in an iOS application.\nFrom Apple's man page I can see that when it is called it requires 3 arguments:\n<pre><code>extern unsigned char *\nCC_MD5(const void *data, CC_LONG len, unsigned char *md);\n</code></pre>\nwhere <pre><code>*md</code></pre> is a pointer to where the result will be stored and is also what will be returned.\nWhen <pre><code>CC_MD5</code></pre> is called I would like to be able to log the input data and the resulting hash and have tried using the following script with Frida, including different ways of printing the data at the return pointer:\n<pre><code>Interceptor.attach(Module.findExportByName(\"/usr/lib/libSystem.B.dylib\", \"CC_MD5\"), {\n  onEnter: function(args) {\n    console.log(\"[+] CC_MD5 called with *data: \" + Memory.readCString(args[0], parseInt(args[1], 16)));\n    console.log(\"[+]                    *len:  \" + parseInt(args[1], 16));\n    console.log(\"[+]                    *md:   \" + args[2]);\n  },\n  onLeave: function(retval) {\n    console.log(\"[+] Resulting hash: \" + Memory.readCString(ptr(retval),16));\n    console.log(\"[+] Resulting hash: \" + retval.readByteArray(16));\n    console.log(\"[+] Resulting hash: \" + retval.readCString(16));\n  }\n});\n</code></pre>\nI understand that it will not always be printable text that is passed to the function as the input data however am having problems actually reading the resulting hash.  Below is an example of the output I am getting:\n<pre><code>[+] CC_MD5 called with *data: MGCopyAnswerProductVersion\n[+]                    *len:  26\n[+]                    *md:   0x16f6d61f0\n[+] Returning *md: 0x16f6d61f0\n[+] Resulting hash: ��]vU\n�)��\n[+] Resulting hash: [object ArrayBuffer]\n[+] Resulting hash: ��]vU\n�)��\n</code></pre>\nI don't know if I have misunderstood how <pre><code>CC_MD5</code></pre> is called or what I should be able to do with Frida?\n",
    "votes": "1",
    "answers": 1,
    "views": "617",
    "tags": [
        "memory",
        "ios",
        "frida",
        "hash-functions"
    ],
    "user": "Jon",
    "time": "Jul 12, 2021 at 8:49",
    "comments": [
        {
            "user": "Robert",
            "text": "The result hash is always 16 byte binary data. If you want to print it convert it to hex or base64. An example script for dumping raw memory data is embedded in this python script: github.com/poxyran/misc/blob/master/…\n",
            "time": null
        },
        {
            "user": "Jon",
            "text": "Hi @Robert thanks for the info, that really helped me understand what it is returning better and by using the code from that link I can compare the hexdump to what I get when I run MD5 on the input data and see they are the same.  Do you know if it is possible to format the output not to include the offset and ascii representation? I came across your comment here which I thought would help but the outpout is comepletely blank trying that.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "The code you have linked to only works in an Android/Java environment and for Java baste arrays. You mean better check the code presented here: github.com/frida/frida/issues/329\n",
            "time": null
        },
        {
            "user": "Jon",
            "text": "Yes, thank you @Robert that turned out to be exactly what I wanted.  Are you able to add something as an answer so I can accept it or should just add an example of the code I used?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The main problem of your code is that you expect the <pre><code>md</code></pre> parameter to be a string. In C the <pre><code>unsigned char *</code></pre> is not an indicator for a string. Instead it is often for storing binary data.\nIn this case <pre><code>md</code></pre> is also just a pointer where the MD5 functions stores it's 16 byte of binary data.\nIf you want to print the content you have to encode it e.g. hexadecimal or base64.\nFor printing binary data you can use Frida's hexdump method.\nAlternatively you can convert the binary data yourself to a hexadezimal string and format it based on your preferences:\n<pre><code>var a = retval.readByteArray(16)\nvar b = new Uint8Array(a);\nvar str = \"\";\n\nfor(var i = 0; i < b.length; i++) {\n    str += (b[i].toString(16) + \" \");\n}\nconsole.log(\"[+] Resulting hash: \" + str);\n</code></pre>\nSource of the code snippet\n",
            "votes": "1",
            "user": "Robert",
            "time": "Jul 13, 2021 at 9:10",
            "is_accepted": true,
            "comments": []
        }
    ]
}