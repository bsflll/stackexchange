{
    "title": "Raw numeric data interpretation in Wireshark",
    "link": "https://reverseengineering.stackexchange.com/questions/9102/raw-numeric-data-interpretation-in-wireshark",
    "content": "In WinHex, I can use the Data Interpreter tool to see the numeric interpretation of data starting from the currently selected byte. This considerably simplifies the initial analysis of the data structures.\n\nIs there a similar way to quickly lookup basic type values in Wireshark without having to define or export the underlying data structures first?\n",
    "votes": "1",
    "answers": 1,
    "views": "219",
    "tags": [
        "wireshark"
    ],
    "user": "Yegor",
    "time": "Jun 10, 2015 at 6:03",
    "comments": [],
    "answers_data": [
        {
            "content": "In a word: no.\nWireshark's design includes the fundamental notion of a dissector. Each dissector is responsible for the interpretation of streams of bytes according the the corresponding protocol, so an IEEE 802.3 frame, for instance, is correctly broken into its constituent pieces based on the definitions in that standard.\nHowever, it is possible (and encouraged!) to write one's own dissectors and to contribute them to the project, so one can imagine writing a dissector that would present the data somewhat in the manner you've described.  Because the typical dissector interprets each byte in only one way, a dissector for the purpose you describe would have to be a little different than the usual, but not impossible.  \nAnother possibility would be to add a Lua extension.  Recent versions of Wireshark incorporate a Lua interpreter and Lua scripts have access to the underlying data.  \nAlthough I've written both dissectors and Lua scripts, my own experience is much more with dissectors than scripts; for that reason, I'd probably attempt this as a dissector if I were to write it.\nAnother option would be to export the raw binary for particular packets and then use either WinHex or a more specific tool such as Netzob to aid in reverse engineering the protocol.\n",
            "votes": "2",
            "user": "Edward",
            "time": "Jun 10, 2015 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}