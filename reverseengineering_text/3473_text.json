{
    "title": "What is the difference between static disassembly and dynamic disassembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/3473/what-is-the-difference-between-static-disassembly-and-dynamic-disassembly",
    "content": "I am told that tools like IDA Pro are static disassembly tool,\nand tools like OllyDbg are dynamic disassembly tool.\nBut from the using experiences on these tools, I don't think there \nis any difference between the tools in disassembly procedure.\nBasically all you need to do is load binary file into IDA or OllyDbg, \nand they will use certain recursive disassembly algorithm to disassembly\nthe binary and give you the output.\nAm I wrong..? Then what is the difference between static disassembly \nand dynamic disassembly..?\nThank you!\n",
    "votes": "6",
    "answers": 2,
    "views": "10k",
    "tags": [
        "ida",
        "disassembly",
        "ollydbg",
        "disassemblers"
    ],
    "user": "lllllllllllll",
    "time": "Apr 28, 2017 at 12:57",
    "comments": [
        {
            "user": "jvoisin",
            "text": "Aren't you talking instead of \"static analysis\" versus \"dynamic analysis\" ?\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "And look, there are even tag wikis static-analysis and dynamic-analysis that may or may not have extra information, depending on whether someone sat down to do it.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You have a mix up here. There is no such thing as dynamic disassembly and static disassembly but rather dynamic \n\nDynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor.\n\nand static analysis of a binary. \n\nStatic program analysis is the analysis of computer software that is performed without actually executing programs\n\nWhat do the mentioned tools have are different disassembly engines which sometimes produce different results, mainly from binaries which incorporate anti-disassembly techniques.\n",
            "votes": "16",
            "user": "PhoeniX",
            "time": "Jan 17, 2014 at 21:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Yes, I think I have made the mistake before, now I know it and thank you a lot!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I actually don't think that there was any mix up. In fact, there exist two disassembly techniques : static & dynamic. The definitions provided here come from this 2003 publication on code obfuscation : http://www.cs.arizona.edu/solar/papers/CCS2003.pdf\n\nStatic disassembly is where the file being disassembled isn't executed during the course of disassembly.\nDynamic disassembly is where the file is being executed on some input and the execution is being monitored by an external tool (debugger, ...) to identify the instructions being executed.\n\nThis link (http://www.maqao.org/publications/madras_techreport.pdf) provides an interesting coverage of techniques used by some disassemblers & binary instrumenters. Though it is not exhaustive and doesn't directly answer your question, you'll find more references to check.\nAbout dynamic & static binary analysis, these  two techniques are mainly performed for profiling applications. The purpose is to acquire information about hot spots, memory access patterns, ... \n\nThe static analysis is usually based on analyzing the program without the need to execute it. It is mostly based on finding patterns, counting memory references, ... The Wikipedia page about Static program analysis is, from my point of view, incomplete but still a good read.\nThe dynamic analysis, on the other hand, involves executing the program and requires instrumentation of basic blocks such as loops, functions, ... The instrumentation consists of inserting probes at the entry and exit of a basic block which will measure the time according to a certain metric (CPU cycles, time in Âµs, ...). The information gathered after analysis is usually used to optimize the application by performing loop unrolling with a suitable unroll factor, vectorization if possible (SSE, AVX, Altivec, ...), etc.\n\nMany tools perform both the latter techniques : Intel's VTune, MAQAO, DynInst, gprof, ...\nI myself have written a GCC plugin, which you can find on my Github under the path /yaspr/zebuprof, which does instrumentation at the source level and performs static & dynamic analysis.\nI hope this clarifies things a bit.\n",
            "votes": "7",
            "user": "yaspr",
            "time": "Apr 23, 2014 at 15:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}