{
    "title": "How does radare2 create its memory layout?",
    "link": "https://reverseengineering.stackexchange.com/questions/26036/how-does-radare2-create-its-memory-layout",
    "content": "Firstly Hello,\nthis is my first post on this forum even though im reading alot here.\nIm trying to get into reversing and Low-Level stuff in general lately, and im a bit stuck right here.\nI did read alot about the PE-File Format and how virtual memory and loading exes into the memory works. Right now im just reversing/debugging a simple HelloWorld written in C++ to understand whats going on.\nIm just looking at it with radare2 and dont really understand what radare does when it opens a file.\nI thought its like a hexeditor with additional functionality like disassembly and detecting functions and more. But when im going to address 0x0 in radare2 it doesnt match 0x0 when i look at the file in my hexeditor. More precicly radare2 does seem to set everything apart from a certain area around entry0 to be 0xff.\nSo my guess is that radare2 is trying to show how the file would look like if its loaded in memory with resolved tables for imported functions and stuff.\nThe thing is im not really sure what im supposed to google to verify this. Thats why im asking here.\nIf someone could give me a little bit of insight on what is going on there would make my day. ;)\nThanks in advance.\n",
    "votes": "0",
    "answers": 1,
    "views": "252",
    "tags": [
        "radare2",
        "memory"
    ],
    "user": "takkatak",
    "time": "Oct 3, 2020 at 15:41",
    "comments": [],
    "answers_data": [
        {
            "content": "Windows Pe File in disk is aligned to 0x200 bytes normally\nThe Same File when Loaded in memory is aligned  to 0x1000 normally\n<pre><code>C:\\>radare2 -q -c \"iH~Al\" c:\\Windows\\System32\\calc.exe\n  SectionAlignment : 0x1000\n  FileAlignment : 0x200\n</code></pre>\nWindows Pe File is split into sections and Each Section File Address and  Load Address is given in PE Header\n<pre><code>C:\\>radare2 -q -c \"iS\" c:\\Windows\\System32\\calc.exe\n[Sections]\nNm Paddr       Size Vaddr      Memsz Perms Name\n00 0x00000400 339456 0x01001000 339968 -r-x .text\n01 0x00053200 16896 0x01054000 20480 -rw- .data\n02 0x00057400 403456 0x01059000 405504 -r-- .rsrc\n03 0x000b9c00 15360 0x010bc000 16384 -r-- .reloc\n</code></pre>\nBy Default the pe header is loaded at Imagebase\n<pre><code>C:\\>radare2 -q -c \"iH~ImageBase\" c:\\Windows\\System32\\calc.exe\n  ImageBase : 0x1000000\n</code></pre>\ngiven these Data You Can Deduce the mapping\nso the bytes You See at 0x400 (first Section File Address ) in a physical file can be seen at ImageBase+Vaddr of a Loaded Module (0x1000000+0x1000)\nlets check some random address mapping\n<pre><code>C:\\>radare2 -q -c \"s 0x1065ef0;px 10;iS.\" c:\\Windows\\System32\\calc.exe\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x01065ef0  0000 1562 4f49 4949 4b46                 ...bOIIIKF\nCurrent section\nNm Paddr       Size Vaddr      Memsz Perms Checksum          Name\n00 0x00057400 403456 0x01059000 405504 -r-- .rsrc\n</code></pre>\nso to check we need to see if this offset in file contains same data\n<pre><code>> 0x1065ef0-0x1059000+0x57400\nans = 0x000642F0\n\n\nE:\\>git\\usr\\bin\\xxd.exe -s 0x642f0 -l 10 c:\\Windows\\System32\\calc.exe\n000642f0: 0000 1562 4f49 4949 4b46                 ...bOIIIKF\n</code></pre>\nmatches\n",
            "votes": "0",
            "user": "blabb",
            "time": "Oct 4, 2020 at 20:22",
            "is_accepted": true,
            "comments": [
                {
                    "user": "takkatak",
                    "text": "<span class=\"comment-copy\">Thank you very much and sorry for replying so late. This helps me a lot especially with all these terms like \"ImageBase\", \"vaddr\" and how its connected to each other. Im not entirely sure if im supposed to use a comment to answer but anyways. ;)</span>",
                    "time": null
                }
            ]
        }
    ]
}