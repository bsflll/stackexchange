{
    "title": "Is there a method for \"guessing\" the addresses for unknown areas in bare metal firmware binaries?",
    "link": "https://reverseengineering.stackexchange.com/questions/16612/is-there-a-method-for-guessing-the-addresses-for-unknown-areas-in-bare-metal-f",
    "content": "Imagine this:\nYou have a binary for a piece of ARM firmware. You are nearly 100% it is ARM, and that it runs on the bare metal. You obtained this firmware from a manufacturers update page. \nHowever, you are uncertain of the exact model of chip the binary is intended for. You are unable to find the developer's guide or spec sheet for the chip. \nThe binary has no known headers, and research suggests that it is not compressed or encrypted. The large section of strings at the bottom of the binary suggests it is a single flat binary file, and not several records compressed together. There are no indications of a file system. \nYou should reasonably be able to disassemble the code but a few factors are missing to prevent you from retrieving control-flow, and creating a sensical disassembly. \n1) You do not know where the initial entry point is. \n2) You do not know if there is a ram section, and what address it might start and end at. \n3) You do not know if there is a rom section, and what address it might start and end at.  \nGiven these, or similar circumstances, how might a reverse engineer deduce the initial entry point, and location/size of areas like ROM? \nI imagine detecting reads and writes from a memory mapped chip of some sort would be possible to infer from a valid disassembly, just by highlighting common memory regions which are frequently referenced, and classifying them into sections. I am hoping someone has come up with an automated method for this sort of analysis. \nE.G \n\"The range 0x7-0x9 is frequently referenced. It may be ROM. The highest address is 0x7998, the area appears to occupy 8 Mbs.\" \nThe other area, identifying the entry point, has stumped me so far. Without the documentation for the chip is it possible to infer the initial entry point of the code? This is especially frustrating on chips where the bootloader appears to be stored in ROM separate from the main firmware. \nCan the structure of such a firmware image be implied without developer documentation?\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "firmware"
    ],
    "user": "MrSynAckSter",
    "time": "Oct 24, 2017 at 5:08",
    "comments": [],
    "answers_data": [
        {
            "content": "What I usually do: \n\nLoad the binary at a not too small base address, like <pre><code>0x10000000</code></pre>.\nIdentify as many functions and strings as possible.\n\n\nyou may get lucky starting with only the strings, that is usually less work.\n\ncreate a list of all constant values, immediates, and dword (assuming a 32 bit binary) values.\nnow sort the list of function and string addresses, and calculate the differences between each consecutive address.\ndo the same for the list of constant values.\n\nNow you have two lists of address differences, if you find a sequence of consecutive differences which is in both lists, you have found your base address.\nThis works most of the time, but you can run in to the problem that both lists may be incomplete. For instance the address list will not have absolute pointers for each function, or maybe you disassembled some functions incorrectly. Maybe you will have better luck focussing on the string addresses.\nI usually do this list matching by hand, in <pre><code>vim</code></pre> using regex searches. On some occasions I have written small scripts to help finding a match. ... but i can't find those right now, i will update my post if i find them again.\n\nsummary of the chat\nThe firmware file being discussed: DVDO Matrix6 Firmware 01.01 from dvdo.\nI took a look at other binaries from the same site, and found references to the <pre><code>LPC1758</code></pre> - an ARM based chip.\nIndeed IDA does not immediately recognize the binary. The reason is that this binary has only Thumb instructions. IDA expects arm binaries to start with ARM32 code.\nThumb code can be recognised from a hex dump by the presence of byte sequences like <pre><code>70 47</code></pre> (BX LR), <pre><code>00 bf</code></pre> (NOP), <pre><code>*0 b5</code></pre> (PUSH {...}\nSo after changing the segment type <pre><code>T</code></pre> to <pre><code>1</code></pre> using <pre><code>Alt-G</code></pre>. I could disassemble the file.\nFinding the offset:\nThese two commands will generate a list of dwords occurring in the file, and a list of strings occurring in the file:\n<pre><code>od -Ax -t x4 Matrix6_Version_01/M6FW0101.BIN | perl -pe 's/^\\w+\\s+//' | tr \" \" \"\n\" | sort|uniq  > dwordlist.txt\nstrings -10 -o -t x \"Matrix6_Version_01/M6FW0101.BIN\" > stringlist.txt\n</code></pre>\nNow look at the first real text in the stringlist:\n<pre><code>28eaa pGSAC Initiation task finished\n28eca SAC Audio Format Discovery task finished\n28ef4 SAC volume has changed\n28f0c Audio System Logical Address not assigned\n28f37 CBUS MUTE received\n28f4b CBUS UN-MUTE received\n28f62 CBUS VOL UP received\n28f78 CBUS VOL DOWN received\n</code></pre>\nYou may notice that the first 2 characters of the first string, <pre><code>pG</code></pre> is actually a <pre><code>70 47</code></pre> or <pre><code>BX LR</code></pre> instruction.\nNow i would load both files in <pre><code>Vim</code></pre>, and in both run this vim-perl script:\n<pre><code>:perldo s/^\\w+/($x,$p)=(hex($&),$x); sprintf(\"%s(%8x)\", $&, $x-$p)/e\n</code></pre>\nThis will lead to a string list looking partially like this:\n<pre><code>28eaa(    25dd) pGSAC Initiation task finished\n28eca(      20) SAC Audio Format Discovery task finished\n28ef4(      2a) SAC volume has changed\n28f0c(      18) Audio System Logical Address not assigned\n28f37(      2b) CBUS MUTE received\n28f4b(      14) CBUS UN-MUTE received\n28f62(      17) CBUS VOL UP received\n28f78(      16) CBUS VOL DOWN received\n</code></pre>\nnow, skipping the first two, because of the incorrect <pre><code>pG</code></pre> start, I search in <pre><code>dwordlist.txt</code></pre>, for consecutive lines with respectively 2a, 18 and 2b, using this regex search:\n<pre><code>/ 2a)\n.* 18)\n.* 2b)\n</code></pre>\nThis leads me to the following lines matching in both files:\n<pre><code>0002ebc3(      80)\n0002eeac(     2e9)       28eaa(    25dd) pGSAC Initiation task finished\n0002eeca(      1e)       28eca(      20) SAC Audio Format Discovery task finished\n0002eef4(      2a)       28ef4(      2a) SAC volume has changed\n0002ef0c(      18)       28f0c(      18) Audio System Logical Address not assigned\n0002ef37(      2b)       28f37(      2b) CBUS MUTE received\n0002ef4b(      14)       28f4b(      14) CBUS UN-MUTE received\n0002ef62(      17)       28f62(      17) CBUS VOL UP received\n0002ef78(      16)       28f78(      16) CBUS VOL DOWN received\n0002ef8c(      14)\n</code></pre>\nSubtracting 0x28eaa from 0x2eeac leads me to an offset of <pre><code>0x6000</code></pre>.\n",
            "votes": "7",
            "user": "Willem Hengeveld",
            "time": "Oct 25, 2017 at 19:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">I assume you were working off a linear dissassembler like objdump for the initial disassembly? My worry is discerning a legitimate disassembly from one that is somehow corrupt.</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">I would use IDA for both the initial and final disassembly.  since that automates much of the function finding. Maybe aided with some idapython scripts to coerce IDA to explore more  unreached code.</span>",
                    "time": null
                },
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">Hmm yes but in a lot of these situations IDA doesn't find the functions in the first place. Hence all the worry about finding the right addresses for the import. In a typical binary like this (for me) IDA will find 2-5 functions and they will be wrong.</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">Maybe you are looking at an encrypted firmware image? can you post a sample?</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">I think this method would work for any CPU which stores absolute offsets to strings in a binary.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I cover some of this in my Recon 2010 presentation (starting around page 48).\nTo summarize the approaches:\n\nself-relocating code which copies itself to expected location\ninitialization code which contains references to expected run-time addresses\njump tables with absolute addresses\nstring tables (tables of addresses) matched against actual strings in the binary.\nsymbol tables (if you're lucky)\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Oct 24, 2017 at 7:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MrSynAckSter",
                    "text": "<span class=\"comment-copy\">I don't suppose any automation exists in this direction? It sounds like not.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I'm not reversing hundreds of binaries each day so I've been doing it mostly manually so far....</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">would maddie stone's IDAPython Embedded Toolkit be useful for this kind of task?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@SYS_VL I think her scripts mostly deal with already correctly loaded code, but maybe she has something for this too, I'm not sure... FWIW string table (or function table) search could certainly be automated</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Thanks, good to know. That doesn't really sound like \"life-changing magic\" but I haven't tried using it yet</span>",
                    "time": null
                }
            ]
        }
    ]
}