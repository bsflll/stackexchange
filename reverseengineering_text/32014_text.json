{
    "title": "What factors affect the base address of a shared object?",
    "link": "https://reverseengineering.stackexchange.com/questions/32014/what-factors-affect-the-base-address-of-a-shared-object",
    "content": "I'm looking at a CVE for an old thrift shop router that amounts to a stack based buffer overflow with no <pre><code>NULL</code></pre> characters allowed. I can control the instruction pointer register as well as a few less useful registers. My goal is to perform a stack pivot to something I control. The router runs on MIPS big endian architecture so I can't leave the last 8 bits of a payload empty to get a leading <pre><code>NULL</code></pre> in an address. e.g. 0x00XXXXXX. I'm left to look for gadgets in shared objects (or the stack if cache flushed). I find that shared objects are generally loaded at higher addresses that make use of all 32 bits of the address. I cannot use gadgets from the vulnerable process because it was not compiled with <pre><code>-fpie</code></pre> and it loads at the same address with a leading <pre><code>NULL</code></pre> every time.\nIf I consistently want to be able to use gadgets in a shared object, it will need to be loaded with the same base address most of the time. Assuming no ASLR (not enabled on my router), what determines where a shared object will be loaded?\nIf I run <pre><code>ldd</code></pre> on the target binary, I get this:\n<pre><code>$ mips-linux-ldd squashfs-root/sbin/my_binary\n    /lib/ld-uClibc.so.0 => /lib/ld-uClibc.so.0 (0x00000000)\n</code></pre>\nNot super useful. I know that <pre><code>ld-uClibc.so.0</code></pre> doesn't get loaded at <pre><code>0x00000000</code></pre> and that there are several other libraries that get loaded for this process (not <pre><code>dlopen</code></pre>'ed) which are not listed. Perhaps the non-useful output is a toolchain thing or due to the fact that I'm not running on the target architecture.\nUnder the hood, I'd think we're looking at <pre><code>mmap</code></pre> logic.\nI found this in an article from Oracle:\n\nAn executable or shared object file's base address is calculated during execution from three values: the memory load address, the maximum page size, and the lowest virtual address of a program's loadable segment\n\nTo me it seems like these things would never change when working with a specific firmware version where the binaries can always be expected to be the same.\nMy questions are:\n\nWill shared objects get loaded in the same place every time on a Linux system with ASLR disabled?\n\nIs the mapping deterministic?\n\n\nWhat factors, if any will make the shared object map to a different address?\n\nPerhaps 2 libraries conflict in a preferred address\n\n\nIff library loading is deterministic, can I assume the shared object will always be at the same address after checking once? The word deterministic answers my own question, but I want to be clear.\n",
    "votes": "1",
    "answers": 0,
    "views": "67",
    "tags": [
        "linux",
        "exploit",
        "mips",
        "libraries"
    ],
    "user": "Matthew Tingum",
    "time": "Jul 1, 2023 at 1:57",
    "comments": [],
    "answers_data": []
}