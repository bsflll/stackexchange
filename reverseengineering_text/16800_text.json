{
    "title": "IDA python, write to specific memory location",
    "link": "https://reverseengineering.stackexchange.com/questions/16800/ida-python-write-to-specific-memory-location",
    "content": "I am looking for a way to modify memory location in IDA python script. We can read memory with these functions:\n<pre><code>Byte(address)\nWord(address)\nDword(address)\n</code></pre>\nWhen I try to do something like this:\n<pre><code>Byte(address) = value\n</code></pre>\nIDA says that it is not valid to assign to a function call. I tried to use ctypes, however IDA says about unhandled exception on the line:\n<pre><code>include ctypes\n</code></pre>\nSo how can I write to specific memory location? Thank you.\n",
    "votes": "7",
    "answers": 2,
    "views": "10k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "user22310",
    "time": "Nov 20, 2017 at 18:24",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>Byte()</code></pre>, <pre><code>Word()</code></pre> and <pre><code>Dword()</code></pre> are idapython's functions and every try to assign a value to a function call in python will end up with \"SyntaxError: can't assign to function call\".\nThese 3 functions you have mentioned are used to read the value of a given address, whether it's a byte, word or a dword. You can't use them to set a value to an address.  \n\nPatching\nIn order to modify a memory location you can use one of the following functions:\nPrior IDA 7.0:\n<pre><code>PatchByte(ea, value)\n</code></pre>\n\nChange value of a program byte\n  If debugger was active then the debugged process memory will be patched too\n\n<pre><code>PatchWord(ea, value)\n</code></pre>\n\nChange value of a program word (2 bytes)\n\n<pre><code>PatchDword(ea, value)\n</code></pre>\n\nChange value of a double word\n\n<pre><code>PatchDbgByte(ea, value)\n</code></pre>\n\nChange a byte in the debugged process memory only\n\nIn case you want to get the original byte that was existed before any changes occurred, you should use:\n<pre><code>GetOriginalByte(ea)\n</code></pre>\n\nGet original value of program byte\n\nIDA 7.0:\nSince IDA 7.0 has arrived idapython made some changes that worth to mention.\nThe names of the functions has changed to <pre><code>patch_byte()</code></pre>, <pre><code>patch_word()</code></pre>, <pre><code>patch_dword()</code></pre>, <pre><code>patch_dbg_byte()</code></pre> and <pre><code>get_original_byte()</code></pre> accordingly, but, as for now, you still can use the old names since \"IDA 7.0/Python/idc_bc695.py\", which is responsible to compatibility, contains a wrapper to these functions.\nMoreover, another function was added:\n<pre><code>patch_qword(ea, value)\n</code></pre>\n\nChange value of a quad word\n\nNotice that <pre><code>PatchQword()</code></pre> won't work for you since it was not existed in older versions so there's no reason to create it as a wrapper to <pre><code>patch_qword()</code></pre> for compatibility.\n\nCoding\nPatching a single byte is very intuitive:\n<pre><code>from idaapi import *\n\naddress= 0x67643021 \nnew_value = 0xCC\n\nPatchByte(address, new_value)\n</code></pre>\nThis will edit the IDB file to set the value of 0x67643021 to 0xCC. This won't affect the origianl file. In case that you only want to edit the value of the address in the memory and not in the IDB file, you should use <pre><code>PatchDbgByte()</code></pre> instead of <pre><code>PatchByte()</code></pre>.\nIf you want your changes to affect the original file you'll need to make it by yourself like this:\n<pre><code>address= 0x67643021 \nnew_value = 0xCC\n\n# Open the file\nf = open(\"my_binary.exe\", \"rb+\")\n\n# Seek to the address you want to patch\nf.seek(address)\n\n# Write the new value to this address\nf.write(new_value)\n\n# Close the file\nf.close()\n</code></pre>\n\nYou can check fwrapper.py by Alexander Hanel and ida-patcher by Peter Kacherginsky to see some code examples that you may find helpful.\n",
            "votes": "5",
            "user": "Megabeets",
            "time": "Nov 21, 2017 at 12:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<pre><code>from idaapi import *\nfrom idautils import *\nprint Byte(ScreenEA())\nPatchByte(ScreenEA(),100) <--- this will patch the byte at current address to 0x64\nprint Byte(ScreenEA())\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 20, 2017 at 23:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}