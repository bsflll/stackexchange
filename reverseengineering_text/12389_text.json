{
    "title": "Intel PIN: InsertPredicatedCall and INS_InsertCall",
    "link": "https://reverseengineering.stackexchange.com/questions/12389/intel-pin-insertpredicatedcall-and-ins-insertcall",
    "content": "The intel PIN manual (section Memory Reference Trace) says:\n\nWe also use <pre><code>INS_InsertPredicatedCall</code></pre> instead of <pre><code>INS_InsertCall</code></pre> to\n  avoid generating references to instructions that are predicated when\n  the predicate is false see here.\n\n_\n\nWhen the instruction has a predicate and the predicate is false, the\n  analysis function is not called see here.\n\nIf I want to analyze all instructions that are actually executed, which of the two shall I pick?\nI assume <pre><code>INS_InsertPredicatedCall</code></pre> but I am not sure because I have seen <pre><code>INS_InsertCall</code></pre> more often. But why would somebody use it, i.e., why would somebody want to analyze instructions \n\nthat are predicated when the predicate is false\n\n? Maybe a minimal example of how the two functions lead to different results would be helpful here...\n",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "x86",
        "instrumentation",
        "pintool"
    ],
    "user": "langlauf.io",
    "time": "Apr 9, 2016 at 17:46",
    "comments": [],
    "answers_data": [
        {
            "content": "You are correct, we should use <pre><code>INS_InsertPredicatedCall</code></pre> instead of <pre><code>INS_InsertCall</code></pre> in your case. It is quite intuitive to distinguish one from the other, consider the following code\n<pre><code>cond:\n  xor eax, eax\n  mov edx, 0x1\n  cmp word [esp + 0x4], 0x5\n  cmovz eax, edx\n  ret\n</code></pre>\nwhose <pre><code>C</code></pre> code is something likes\n<pre><code>int cond(int input)\n{\n  return input == 0x5 ? 1 : 0;\n}\n</code></pre>\nIf you use <pre><code>INS_InsertCall</code></pre> to trace executed instructions of <pre><code>cond(input)</code></pre>, then for any value of <pre><code>input</code></pre>, you observe always the trace:\n<pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\ncmovz eax, edx\nret\n</code></pre>\nBut if you use <pre><code>INS_InsertPredicateCall</code></pre>, then for <pre><code>input != 0x5</code></pre>, you will observe only:\n<pre><code>xor eax, eax\nmov edx, 0x1\ncmp word [esp + 0x4], 0x5\nret\n</code></pre>\nsince <pre><code>cmovz</code></pre> is a predicated instruction, it is executed only if <pre><code>ZF = 1</code></pre>.\n",
            "votes": "3",
            "user": "Ta Thanh Dinh",
            "time": "Apr 10, 2016 at 5:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}