{
    "title": "ghidra-python: create struct with big endian field",
    "link": "https://reverseengineering.stackexchange.com/questions/23330/ghidra-python-create-struct-with-big-endian-field",
    "content": "Using ghidra's python scripting engine, I'd like to create a struct which contains a big endian, unsigned integer. This field is always big endian, no matter what the endainess of the binary CPU is.\nMy first attempt:\n<pre><code>def uint32b():\n    dt = UnsignedIntegerDataType()\n    for s in dt.getSettingsDefinitions():\n        if isinstance(s, EndianSettingsDefinition):\n            s.setBigEndian(dt.getDefaultSettings(), False)\n    return dt\n</code></pre>\nHowever, when the struct is applied to data, I'm still seeing a little-endian value. The field's \"Default Settings -> Endian\"  still set to \"Default\".\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "python",
        "ghidra"
    ],
    "user": "bjax",
    "time": "Feb 24, 2020 at 4:59",
    "comments": [],
    "answers_data": [
        {
            "content": "The following script shows hows to create a structure and set its field to Big Endian   byte order using the Ghidra Python API.\n<pre><code>from ghidra.program.model.data import DataTypeConflictHandler\nfrom ghidra.program.model.data import EndianSettingsDefinition\nfrom ghidra.app.util.cparser.C import CParser\n\n\nmystruct_txt = \"\"\"\nstruct mystruct{\n    uint32_t field1; \n    uint32_t field2;\n};\"\"\"\n\n# Get Data Type Manager\ndata_type_manager = currentProgram.getDataTypeManager()\n\n# Create CParser\nparser = CParser(data_type_manager)\n\n# Parse structure\nparsed_datatype = parser.parse(mystruct_txt)\n\n# Add parsed type to data type manager\ndatatype = data_type_manager.addDataType(parsed_datatype, DataTypeConflictHandler.DEFAULT_HANDLER)\n\n# Extract the first structure member i.e. mystruct.field1\nfield1 = datatype.components[0]\n\n# Get Default Settings\nfield1_settings = field1.getDefaultSettings()\n\n# Set endianess to big\nfield1_settings.setLong('endian', EndianSettingsDefinition.BIG)\n</code></pre>\nIf you have already created the structure earlier (using the editor or otherwise) you can omit the part where the structure is created and use <pre><code>getDataType</code></pre> to obtain it from the <pre><code>DataTypeManagerDB</code></pre> as shown below.\n<pre><code>datatype = data_type_manager.getDataType(\"/mystruct\")\nfield1 = datatype.components[0]\nfield1_settings = field1.getDefaultSettings()\nfield1_settings.setLong('endian', EndianSettingsDefinition.BIG)\n</code></pre>\nAfter applying the structure to a piece data, you can right click  on the field -> Data -> Default Settings and check that the default endianness is indeed Big Endian.\n",
            "votes": "7",
            "user": "0xec",
            "time": "Mar 2, 2020 at 9:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}