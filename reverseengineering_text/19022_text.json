{
    "title": "Can't trace MIPS embedded device remotely",
    "link": "https://reverseengineering.stackexchange.com/questions/19022/cant-trace-mips-embedded-device-remotely",
    "content": "I'm trying to debug a remote device using gdbserver and IDA Pro.\nI'm attached to the correct PID and I'm able to step through instructions until the point where I redirect <pre><code>$pc</code></pre> to my ROP chain. At the <pre><code>jalr</code></pre> I get a <pre><code>SIGTRAP</code></pre> and the process crashes.\nMy goal is to be able to trace through the shellcode outside of the loaded binary scope.\nIs it possible with IDA Pro or do I need gdb on my client suitable for MIPS? if so where can I find a tutorial/explanation how to do so?\n",
    "votes": "4",
    "answers": 2,
    "views": "641",
    "tags": [
        "ida",
        "gdb",
        "embedded",
        "mips",
        "rop"
    ],
    "user": "ub3rduck",
    "time": "Aug 10, 2018 at 20:15",
    "comments": [
        {
            "user": "jmcarter9t",
            "text": "Not sure about IDA, but your GDB architecture must match the target.  You can install arch-specific versions of gdb on ubuntu using apt, or use <pre><code>gdb-multiarch</code></pre>.  If you want to examine the effects / execution of your ROP chain gdb sounds like the right tool.\n",
            "time": null
        },
        {
            "user": "gipi",
            "text": "have you checked that the address you are jumping to makes sense? maybe add the shellcode in the question and indicate where it crashes\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "What wersion gdbserver are you use? You make this gdbserver or download in repository. Please check <pre><code>file</code></pre> output for mips file (big or little endian) and also check output <pre><code>gdbserver -v</code></pre>\nTry connect gdb on your gdbserver and trace, if be successful, then problem in ida.\n",
            "votes": "1",
            "user": "Vasiliy Kuramshin",
            "time": "Aug 18, 2018 at 18:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You should be able to use IDA to debug MIPS binaries. It's been a while for me, but I seem to recall IDA sometimes getting confused by the branch delay slot (the instruction following a jump/branch). If possible, set your breakpoint to whatever the jump target is rather than attempting to single step into the <pre><code>jalr</code></pre>.\nAlternatively, you might be getting bitten by data/instruction cache incoherency. Are you triggering a cache flush/invalidation prior to jumping into your shellcode? If not and if this is in Linux userspace, ropping into sleep() should do the trick. This is because your shellcode starts out as data and sits in the data cache until it is flushed to main memory. Only when that happens can it be fetched from main memory as instructions. A sleep() allows the kernel to briefly context switch to another process, which requires a cache flush.\nTo do that you need to:\n\nStage a small sleep period (1 or 2 seconds should suffice) into <pre><code>$a0</code></pre>\nStage a return address into <pre><code>$ra</code></pre>\nStage the address of <pre><code>sleep()</code></pre> someplace, probably <pre><code>$s0</code></pre>, where you can <pre><code>jr</code></pre> to it\n<pre><code>jr</code></pre> to whatever reg holds address of <pre><code>sleep()</code></pre>\n",
            "votes": "1",
            "user": "zcutlip",
            "time": "Sep 17, 2018 at 21:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}