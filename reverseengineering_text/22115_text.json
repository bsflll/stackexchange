{
    "title": "Understanding operand forms",
    "link": "https://reverseengineering.stackexchange.com/questions/22115/understanding-operand-forms",
    "content": "9(%rax, %rdx): What happens here? Is 9 the offset? and do you add the two registers together?\nI'm reading Randal E. Bryant and David R. O'Hallaran's \"Computer Systems - A programmer's Persepctive\"\nAt page 209 we are presented with a table (Operand forms):\n\n\nIt's then possible to do a little assignment where I have to fill the empty table with values. I tried my best but am stuck as you can see:\n\n9(%rax, %rdx). Is the 9 the offset? And do you add the two registers here? Not quite sure what to add. I would really appreciate if someone could walk me through the last empty values I need to fill.\n\nBelow is the solutions:\n",
    "votes": "4",
    "answers": 1,
    "views": "601",
    "tags": [
        "assembly",
        "x86-64"
    ],
    "user": "user10829235",
    "time": "Sep 13, 2019 at 6:35",
    "comments": [],
    "answers_data": [
        {
            "content": "Welcome to the wonderful world of AT&T assembly! The 9 in <pre><code>9(%rax, %rdx)</code></pre> is commonly called displacement or sometimes base, and you should indeed just add all three values:\n9+rax+rdx = 9+0x100+0x3 = 0x10C\nThis address is then dereferenced so the value 0x11 is loaded from the address 0x10C.\nI would recommend reading the Solaris x86 Assembly Language Reference Manual  if you plan to stick with AT&T, or just switch to Intel syntax since it's much more widely used (especially in processor documentation).\n",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Sep 13, 2019 at 9:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user10829235",
                    "text": "<span class=\"comment-copy\">Thank you, Igor. Makes sense now!</span>",
                    "time": null
                }
            ]
        }
    ]
}