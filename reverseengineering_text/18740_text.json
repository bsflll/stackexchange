{
    "title": "Moving integer to xmm register",
    "link": "https://reverseengineering.stackexchange.com/questions/18740/moving-integer-to-xmm-register",
    "content": "I was looking at a game code, and I saw the following:\n<pre><code>0x171    mov [rbp-30],r12w\n....\n0x210     movups xmm0,[rbp-30]\n</code></pre>\nI am pretty sure that <pre><code>r12</code></pre> is an integer here (equals 5). So, is it moving an integer to a float register at <pre><code>0x171</code></pre> using <pre><code>movups</code></pre>?\nI searched on Internet, but <pre><code>movups</code></pre> usually moves float to float, not integer to float...\nCould someone tell me how we usually moves integer to <pre><code>xmm</code></pre> registers ?\n",
    "votes": "5",
    "answers": 1,
    "views": "10k",
    "tags": [
        "assembly",
        "register",
        "amd64",
        "float"
    ],
    "user": "sebastien finor",
    "time": "Jul 9, 2018 at 17:33",
    "comments": [],
    "answers_data": [
        {
            "content": "To move a number into an XMM register, you'll first need to move that number into a memory address since you can't move an immediate into an XMM register (meaning, you can't do something like <pre><code>mov XMM1,9</code></pre>).\nIf need be, you can allocate your own memory to store a number in, or in your scenario, if it's feasible, you could inject code to put your own value into r12w prior to that write, or your own value into [rbp-30] after that write.\nInstructions of interest for you will be <pre><code>MOVSS</code></pre>, <pre><code>MOVSD</code></pre>, <pre><code>MOVD</code></pre>, <pre><code>MOVQ</code></pre>, and so on. Assuming you opt to put your own value into [rbp-30] first:\nExample: <pre><code>movss xmm1,[rbp-30]</code></pre>\nInsofar as your value being an integer, you'll probably see an instruction like CVTSS2SI (Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer) somewhere within the sub-routine you're in.\n",
            "votes": "4",
            "user": "dsasmblr",
            "time": "Jul 9, 2018 at 17:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sebastien finor",
                    "text": "<span class=\"comment-copy\">Thanks a lot! And yes I did inject code to change r12 for this hack, but it still confused me :)</span>",
                    "time": null
                },
                {
                    "user": "sebastien finor",
                    "text": "<span class=\"comment-copy\">But isn't it strange  that movups was used here if the memory adress put in xmm0 contained an integer ?</span>",
                    "time": null
                },
                {
                    "user": "dsasmblr",
                    "text": "<span class=\"comment-copy\">Not necessarily. Data is data until it's interpreted however it needs to be interpreted at some point before it's used for something, so whether it's for optimization, faster calculation, or otherwise, data can be moved around however for any number of reasons. You'd have to reverse at least some part of the sub-routine you're in (and possibly other routines related to your value) to fully understand why the value is being transported as it is before finally being interpreted as an integer.</span>",
                    "time": null
                }
            ]
        }
    ]
}