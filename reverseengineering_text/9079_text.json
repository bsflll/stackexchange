{
    "title": "Computing subtracted stack space for a function manually",
    "link": "https://reverseengineering.stackexchange.com/questions/9079/computing-subtracted-stack-space-for-a-function-manually",
    "content": "Lets assume this function frame :\n\nHow to calculate and check  if subtracted stack space by line 3 is <pre><code>58h</code></pre> ?: <pre><code>sub esp, 58h</code></pre>\nAnd this is the code, the compiler is also Dev C++:\n<pre><code>#include <stdio.h>\n\nchar *the_good_one = \"gb_master\";\n\nvoid cookie()\n{\n    printf(\"Get a cookie!\n\");\n}\n\nchar check_password()\n{\n    char password[64];\n\n    printf(\"Enter password: \");\n    scanf(\"%s\", password);\n\n    return (!strcmp(password, the_good_one));\n}\n\nint main(void)\n{\n    if(check_password())\n    {\n        printf(\"GOOOOOOOOOOD!\n\");\n        cookie();\n    }\n    else\n    {\n        printf(\"Wrong password\n\");\n    }\n\n    return 0;\n}\n</code></pre>\n<pre><code>check_password()</code></pre> function disassembly added :\n",
    "votes": "3",
    "answers": 1,
    "views": "752",
    "tags": [
        "assembly",
        "binary-analysis",
        "static-analysis",
        "binary",
        "stack"
    ],
    "user": "Vlad",
    "time": "Jun 8, 2015 at 8:39",
    "comments": [
        {
            "user": "Vlad",
            "text": "I added the source code\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Could you give fully disassembled code of \"check_password\"? Since the compiler may insert some canaries for stack protection.\n",
            "time": null
        },
        {
            "user": "Vlad",
            "text": "@tathanhdinh added\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Thanks Vlad. Sorry to bother you again, could you please give the compiler options you have been used?\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Frankly, I find it quite bizzare. A stack of size 72 is enough for \"check_password' since we need 64 bytes for password, and 8 bytes for arguments of printf, scanf, and strcmp. I do not find neither any evidence for data alignment. And when I try your code with gcc 4.9.0, the compiler generates \"check_password\" with stack of size 84!!!\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Older compilers made space for function parameters on the stack by pushing them, and popping from the stack after the function call; newer compilers optimize this. For example, while a function gets executed, the stack changed like this:\n<pre><code> start        calling       after         before scanf   after scanf \n              printf        printf                                   \n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|return addr| |return addr| |return addr| |return addr| |return addr|\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|           | |           | |           | |           | |           |\n| local     | | local     | | local     | | local     | | local     |\n| variables | | variables | | variables | | variables | | variables |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n              | \"Enter..\" |               | password  |              \n              +-----------+               +-----------+              \n                                          | \"%s\"      |              \n                                          +-----------+              \n</code></pre>\nYou see how <pre><code>sp</code></pre> (the bottom of the stack) changes with every function call.\nNewer versions of <pre><code>gcc</code></pre> change this; they make enough space on the stack (for local variables and all possible function parameters) from the beginning, and just move the parameters to addresses relative to the stack pointer:\n<pre><code> start        calling       after         before scanf   after scanf \n              printf        printf                                   \n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|return addr| |return addr| |return addr| |return addr| |return addr|\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|           | |           | |           | |           | |           |\n| local     | | local     | | local     | | local     | | local     |\n| variables | | variables | | variables | | variables | | variables |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n|           | |           | |           | |           | |           |\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|           | |           | |           | | password  | |           |\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n|           | | \"Enter..\" | |           | | \"%s\"      | |           |\n+-----------+ +-----------+ +-----------+ +-----------+ +-----------+\n</code></pre>\nNote how, from the beginning, the stack has the size it needs for the 4th step (before scanf), and how the \"Enter..\" string is moved directly to where the stack pointer is (so it's the first parameter on the stack), not to the space directly below local variables.\nSo to calculate the stack size from the source code, you need to know\n\nhow many bytes your return frame needs\nhow many bytes to reserve for the stack canary, if any\nhow many bytes local variables need\nhow many bytes to reserve for function arguments; this may include special treatment for structures, or doubles, that don't follow standard conventions\nhow many bytes to subtract from the function arguments because they're passed in registers, this applies to 64 bit code especially.\n\nThis might change per compiler version as well. It seems that your compiler reserved 8 bytes for stack frame/canary; 64 (0x40) bytes for the password array, and another 16 bytes for function parameters, where 8 would have been sufficient (maybe for alignment reasons)?\nI wouldn't rely on any formula for the number of bytes needed; instead, check with the specific compiler i'm using, and prepare for this number to change whenever a different compiler gets used.\n",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Jun 7, 2015 at 21:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">I think you are right. In fact, I still do not understand why the function needs a stack of 88 bytes, while 64 (local variable) + 8 (arguments) = 72 should be sufficient.</span>",
                    "time": null
                }
            ]
        }
    ]
}