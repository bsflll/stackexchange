{
    "title": "How do you compile a C program with missing symbols?",
    "link": "https://reverseengineering.stackexchange.com/questions/17345/how-do-you-compile-a-c-program-with-missing-symbols",
    "content": "In Learning Linux Binary Analysis by Ryan \"elfmaster\" O'Neill. On Page 33, the author compiles a program with a symbol reference and no definition,\n\nLet's take a look at the source code:\n<pre><code>_start()\n  {\n    foo();\n  }\n</code></pre>\nWe see that it calls the foo() function. However, the foo() function is not located directly within that source code file; so, upon compiling, there will be a relocation entry created that is necessary for later satisfying the symbolic reference:\n<pre><code>$ objdump -d obj1.o\nobj1.o:\nfile format elf32-i386\nDisassembly of section .text:\n00000000 <func>:\n0: 55 push %ebp\n1: 89 e5 mov %esp,%ebp\n3: 83 ec 08 sub $0x8,%esp\n6: e8 fc ff ff ff call 7 <func+0x7>\nb: c9 leave\nc: c3 ret\n</code></pre>\n\n**Even after changing <pre><code>_start() {}</code></pre> to <pre><code>void start() {}</code></pre>, what flags do I use to compile the same thing? When I try, I get..\n<pre><code>gcc -nostdlib app.c -o test\napp.c: In function ‘_start’:\napp.c:3:3: warning: implicit declaration of function ‘foo’ [-Wimplicit-function-declaration]\n   foo();\n   ^~~\n/tmp/ccMBITVZ.o: In function `_start':\napp.c:(.text+0xa): undefined reference to `foo'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "elf",
        "symbols",
        "gcc"
    ],
    "user": "Evan Carroll",
    "time": "Jan 31, 2018 at 18:23",
    "comments": [],
    "answers_data": [
        {
            "content": "Compiling your source code file like this also involves a call to the linker - remember that the \"gcc\" program is only the compiler front end program, which calls the preprocessor, compiler passes, assembler, and linker as required.\nYou can obtain the object file \"app.o\" using the \"-c\" compiler option like this:\n<pre><code>gcc -nostdlib -c app.c -o app.o\n</code></pre>\nUsing \"-c\", the compiler is instructed to stop after generating the object file, so that the linker is not invoked. To generate an executable ELF file, you then have to invoke the linker separately\n(app.o is the default output file name, so the \"-o app.o\" parameter can be omitted).\n",
            "votes": "4",
            "user": null,
            "time": "Jan 31, 2018 at 1:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user22967",
                    "text": "<span class=\"comment-copy\">You're welcome - and yes, I think it's a shame so many people don't really get to use a compiler from the command line at all nowadays, since so much development takes place in complex IDEs like Eclipse. But this might just be an old Unix greybeard ranting :).</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">Still not working, I get the same error. Did it work for you?</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">With <code>-c</code> I do not get <code>/tmp/ccr2dk4u.o: In function _start': app.c:(.text+0xa): undefined reference to foo' collect2: error: ld returned 1 exit status</code>. However, I still get <code>app.c: In function ‘_start’: app.c:3:3: warning: implicit declaration of function ‘foo’ [-Wimplicit-function-declaration]</code>, and with <code>-c</code> I still don't have a <code>.o</code></span>",
                    "time": null
                },
                {
                    "user": "user22967",
                    "text": "<span class=\"comment-copy\">Do you get the actual error message (undefined reference) or just the compiler warning? The warning simply results from neglecting to provide a prototype for foo(); - adding \"void foo(void);\" at the start of the file should get rid of the warning.</span>",
                    "time": null
                }
            ]
        }
    ]
}