{
    "title": "Reverse Engineering bootloader",
    "link": "https://reverseengineering.stackexchange.com/questions/8326/reverse-engineering-bootloader",
    "content": "I am in trouble with GearFit bootloader. I can not find the load address when disassembled into IDA pro.....\nHere is the link to download it.\n",
    "votes": "-2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "Lê Kim Hùng",
    "time": "Feb 25, 2015 at 16:12",
    "comments": [],
    "answers_data": [
        {
            "content": "You might want to look at this excellent explanation of the ARM boot process by Igor Skochinsky. Loading the boot loader at address 0, Architecture ARM, results in the first few lines\n<pre><code>ROM:00000000 dword_0         DCD 0x20002DE0\nROM:00000004                 DCD 0x20016AAD\nROM:00000008                 DCD 0x2000E241\nROM:0000000C                 DCD 0x2000E245\nROM:00000010                 DCD 0x2000E2B5\nROM:00000014                 DCD 0x2000E32D\nROM:00000018                 DCD 0x2000E3A5\nROM:0000001C                 DCD 0\nROM:00000020                 DCD 0\n</code></pre>\nSo, 0x20002DE0 is the initial stack pointer, and <pre><code>0x20016AAD</code></pre> is the entry point. \nThat entry point does not seem to be contained in the boot loader itself (which has 64 K + 256 bytes), but in the on-Chip ROM. From the answer:\n\nNote that in the modern complex chips such as OMAP3 or Apple's A4 the\n  first piece of code which is executed is usually not user code but the\n  on-chip Boot ROM. It might check various conditions to determine where\n  to load the user code from and whether to load it at all (e.g. it\n  could require a valid digital signature). In such cases, the user code\n  might have to conform to different start-up conventions.\n\nSo unless you can somehow dump the memory at <pre><code>0x20016AAD</code></pre>, you won't be able to find out what the ROM does, and where within the ROM it jumps.\nFrom a brief glance at the code, i'd assume the entry point to be a <pre><code>0xBA40</code></pre>, or maybe <pre><code>0xBAC0</code></pre> which calls <pre><code>0xBA40</code></pre>, because this calls <pre><code>0x0960</code></pre>. The first few instructions there (especially at <pre><code>0x097a</code></pre>)\n<pre><code>ROM:00000960                 PUSH.W          {R4-R11,LR}\nROM:00000964                 SUB             SP, SP, #0x6C\nROM:00000966                 ADD             R0, SP, #0x90+var_88\nROM:00000968                 MOVS            R1, #0x34 ; '4'\nROM:0000096A                 BL              sub_1A58\nROM:0000096E                 BL              sub_8A8\nROM:00000972                 BL              sub_266\nROM:00000976                 BL              sub_1D8\nROM:0000097A                 ADR.W           R0, aStartBootloade ; \"\n\n\nstart bootloader\n\"\nROM:0000097E                 BL              sub_1E94\nROM:00000982                 MOVS            R1, #1\nROM:00000984                 LDR.W           R0, =0x40020000\nROM:00000988                 BL              sub_193E\n</code></pre>\nseem to be an indication that the bootloader starts there, and <pre><code>sub_1E94</code></pre> is a generic string output function (it gets called lots of times, every time with a string address in <pre><code>R0</code></pre>).\n",
            "votes": "4",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">more likely the firmware is mapped at <code>0x2000000</code>  or possibly <code>0x20010000</code></span>",
                    "time": null
                }
            ]
        }
    ]
}