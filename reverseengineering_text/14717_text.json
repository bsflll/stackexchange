{
    "title": "Reverse engineering ARM PIC",
    "link": "https://reverseengineering.stackexchange.com/questions/14717/reverse-engineering-arm-pic",
    "content": "I'm starting to learn reverse engineering so I'm trying to reverse sample app, compiled for ARM(iOS) and now I'm looking into code.\nThis section is right before <pre><code>WHILE</code></pre> and right at the beginning of function where values are initiated. but I can't find the raw values.\nThis is the function .h file:\n<pre><code>#import \"NSObject.h\"\n\n@interface SampleCalc : NSObject\n\n+ (double)doCalc:(double)arg1;\n\n@end\n</code></pre>\nAnd this is the ARM code:\n<pre><code>+[SampleCalc doCalc:]:\n0002f198         movw       sb, #0x6cb4      ; Objective C Implementation defined at 0x95db8 (class method), :lower16:(0xc5e60 - 0x2f1ac)\n0002f19c         vmov.i32   d18, #0x0\n0002f1a0         movt       sb, #0x9         ; :upper16:(0xc5e60 - 0x2f1ac)\n0002f1a4         vmov       d16, r2, r3\n0002f1a8         add        sb, pc           ; 0xc5e60\n0002f1aa         movs       r2, #0x0\n0002f1ac         add.w      r3, sb, #0x8     ; 0xc5e68\n0002f1b0         vldr       d17, [sb]\n</code></pre>\nIf I understand correctly this is ARM PIC (position independent code).\nBut I don't get the logic here <pre><code>0002f1b0</code></pre> - does the brackets mean <pre><code>sb</code></pre> is storing address and value is loaded in <pre><code>d17</code></pre>? And what is the address - <pre><code>0xc5e68</code></pre> correct?\nThe <pre><code>0xc5e60</code></pre> contains:\n<pre><code>000c5e60         db  0x00 ;\n000c5e61         db  0x00 ; '.'\n000c5e62         db  0x00 ; '.'\n000c5e63         db  0x00 ; '.'\n000c5e64         db  0x00 ; '.'\n000c5e65         db  0x00 ; '.'\n000c5e66         db  0x33 ; '3'\n000c5e67         db  0x40 ; '@'\n000c5e68         db  0x00 ;\n000c5e69         db  0x00 ; '.'\n000c5e6a         db  0x00 ; '.'\n000c5e6b         db  0x00 ; '.'\n000c5e6c         db  0x00 ; '.'\n000c5e6d         db  0x00 ; '.'\n000c5e6e         db  0x34 ; '4'\n000c5e6f         db  0x40 ; '@'\n000c5e70         db  0x00 ; '.'\n000c5e71         db  0x00 ; '.'\n000c5e72         db  0x00 ; '.'\n000c5e73         db  0x00 ; '.'\n000c5e74         db  0x00 ; '.'\n000c5e75         db  0x00 ; '.'\n000c5e76         db  0x35 ; '5'\n</code></pre>\nSo does that mean <pre><code>D17</code></pre> gets value <pre><code>0x00</code></pre>? \nBonus question, if possible, what are all those <pre><code>.</code></pre> and <pre><code>@</code></pre>.\nThanks.\n",
    "votes": "1",
    "answers": 1,
    "views": "142",
    "tags": [
        "arm",
        "ios"
    ],
    "user": "Jana Bērziņa",
    "time": "Feb 22, 2017 at 23:08",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "What tool is the output from?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>sb</code></pre> is the alternative name for the ARM register <pre><code>R9</code></pre> used by some disassemblers, similar to <pre><code>ip</code></pre> for <pre><code>R12</code></pre>, <pre><code>sp</code></pre> for <pre><code>R13</code></pre> or <pre><code>PC</code></pre> for <pre><code>R15</code></pre>.\nThe main thing you need to look at is this:\n<pre><code>0002f1a8         add        sb, pc  \n</code></pre>\nAt this point, <pre><code>sb</code></pre> has the value of 0x96cb4 due to the <pre><code>movw</code></pre> and <pre><code>movt</code></pre> before.\nIn ARM, the <pre><code>pc</code></pre> value points two instructions ahead, so here it will have value 0x002f1a8+4 = 0x002f1ac. So, we get 0x002f1ac+0x96cb4=0xC5E60 which matches the comment added by the disassembler. Next, <pre><code>vldr d17, [sb]</code></pre> is executed which loads the double value at <pre><code>sb</code></pre> (or 0xC5E60). Double values are 8 bytes long so all of the bytes from 0xC5E60 till 0xC5E67 will be loaded. The hex for it is 0x4033000000000000 which corresponds to 19.0.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2017 at 11:03",
            "is_accepted": true,
            "comments": []
        }
    ]
}