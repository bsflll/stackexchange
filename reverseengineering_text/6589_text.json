{
    "title": "Syntax errors when decompiling with JD-GUI",
    "link": "https://reverseengineering.stackexchange.com/questions/6589/syntax-errors-when-decompiling-with-jd-gui",
    "content": "I am aware that when decompiling a jar file, it is normal for the resulting .java files to contain syntax errors, but I am unsure of why and worse off I am sometimes unsure of how to fix these syntax errors. Take <pre><code>int[] arrayOfInt = new int['Â€'];</code></pre>, for example. Eclipse complains that <pre><code>'Â€'</code></pre> does not belong. Surprise! I know this already, but why does this happen. How can I find out what this value should be?\n",
    "votes": "2",
    "answers": 3,
    "views": "4k",
    "tags": [
        "java"
    ],
    "user": "DaveTheMinion",
    "time": "Nov 5, 2014 at 0:43",
    "comments": [
        {
            "user": "0xec",
            "text": "You should try out these decompilers all powered by procyon 1, 2, 3.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The reason it happens is because JD-Gui isn't encoding unicode properly. You can see that the thing inside the quotes is two bytes, and appears to be interpreted as nonstandard upper 128 characters. I.e. JD-Gui is emitting unicode, but the charset isn't declared correctly so your editor interprets it as two raw bytes in an 8bit charset instead of a single unicode character.\nOne solution is to use a Decompiler that emits unicode escapes instead of raw unicode byte sequences. That way, any editor will be able to view it correctly. I'd recommend Procyon (it's a lot better than JD-Gui anyway).\n",
            "votes": "5",
            "user": "Antimony",
            "time": "Nov 5, 2014 at 3:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">\"raw unicode byte sequences\" -&gt; \"raw UTF8 byte sequences\". Only <i>probably</i> though, because the sequence translates to <code>C2 80</code>, or <code>0x80</code> translated back to Unicode, which is not a regular Unicode character at all. (It might just mean the <i>value</i> <code>0x80</code> but in that case the original decompiler really screwed things up.)</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">I didn't notice that. In that case, it's probably screwed up escaping of null characters (which have to be escaped specially in classfiles, but obviously not in source code).</span>",
                    "time": null
                },
                {
                    "user": "DaveTheMinion",
                    "text": "<span class=\"comment-copy\">Thanks for the advice. Does Procyon also make obfuscated code easier to handle? The code that I am dealing with has obviously been tampered with, as it has variable names such as <code>str1</code>, <code>str2</code>, <code>str3</code>, etc.</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">For highly obfuscated code, Krakatau is the best. But if you're code is obfuscated, you can pretty much give up on getting a compileable result.</span>",
                    "time": null
                },
                {
                    "user": "DaveTheMinion",
                    "text": "<span class=\"comment-copy\">Thank you for the advice. By using Procyon, I was able to decompile the jar file into it's <code>.java</code> code files. Unlike JD-GUI's generated <code>.java</code> files, the ones created by Procyon only contained a single syntax error in one of the classes which was easily corrected. It would also appear that the jar file was not obfuscated, but JD-GUI's poor job at decompiling mangled the code so much that it appeared as though it had been messed with.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You should use Luyten. It is a java decompiler just like JD-Gui, but it lacks much of the bugs inside jd-gui logic.\nIt is a front-end to Procyon.\nPS: Sorry, I know i should commenting on Antimony's answer, but i don't have the necessary points to do that.\n",
            "votes": "3",
            "user": "DarkLighting",
            "time": "Nov 5, 2014 at 16:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">I've found that Luyten often lags behind the most recent version of Procyon, so I have to rebuild manually.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Try taking a look at Bytecode Viewer - https://github.com/Konloch/bytecode-viewer\nIt allows you to select from 3 different Java decompilers. It can also display the Bytecode and Hexcode of the Class file you select. (And more, check it out)\n",
            "votes": "2",
            "user": "Konloch",
            "time": "Nov 18, 2014 at 5:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}