{
    "title": "vTable size calculation (for MSVC)",
    "link": "https://reverseengineering.stackexchange.com/questions/12411/vtable-size-calculation-for-msvc",
    "content": "I made some PE analysis script. One part is virtual functions extraction, I implemented vTables lookup using this schema. \nActual algorithm of lookup is not important part of question. I don't know how to determine actual size of vTable, that I get is pointer to COL, pointer to 1st virtual method, pointer to 2nd virtual method, ... pointer to last virtual method. \nSo the problem is that I don't know which virtual method is the last. Any help related to this is appreciate.\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "c++",
        "vtables",
        "msvc"
    ],
    "user": "ST3",
    "time": "Apr 12, 2016 at 11:14",
    "comments": [],
    "answers_data": [
        {
            "content": "You could try the following heuristic: extend the vtable from its given base address until you reach an address that has already been classified as something else (e.g. the COL pointer of the next vtable) or you find something that is not the address of a known function in a known code segment. This analysis step should be deferred until after the full web of RTTI descriptors and its associated structures has been found and verified.\nThis works if the functions can be identified with certainty or at least reasonable accuracy via other means (like debug info, map files, or the function descriptor tables that are mandatory for 64-bit executables); it does not work quite so well if the point of analysing the vtables is to find more code addresses.\nI found the performance of this heuristic quite satisfactory in a couple of real-world analysis projects, like with one humongous game executable that contained some 23000 vtables.\n",
            "votes": "2",
            "user": "DarthGizka",
            "time": "Apr 12, 2016 at 13:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">I've been thinking about your suggested heuristic, probably will try this if don't find anything better.</span>",
                    "time": null
                },
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">You said <code>function descriptor tables that are mandatory for 64-bit executables</code>, started googling <code>function descriptor tables</code> but it doesn't give anything valuable, is it correct name for that?</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">The magic names are '.pdata section' (in the <a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx\" rel=\"nofollow noreferrer\">PE COFF spec</a>) and <a href=\"http://msdn.microsoft.com/en-us/library/ft9x1kdx.aspx\" rel=\"nofollow noreferrer\">RUNTIME_FUNCTION</a> on MSDN.</span>",
                    "time": null
                },
                {
                    "user": "ST3",
                    "text": "<span class=\"comment-copy\">That works perfect for me in current situation, thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}