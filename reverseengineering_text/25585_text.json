{
    "title": "Determine Control-Flow Of A .NET Assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/25585/determine-control-flow-of-a-net-assembly",
    "content": "Using DnSpy is great, but it's very awkward to ascertain the control-flow of an executable. Is anyone able to advise on free-of-charge helpful apps that display a control-flow graph?\nIDA Home does not work on .NET assemblies, nor does Radare2 sadly.\nHopefully someone can tell what they do?\n",
    "votes": "1",
    "answers": 1,
    "views": "272",
    "tags": [
        ".net"
    ],
    "user": "Dalski",
    "time": "Jul 30, 2020 at 12:51",
    "comments": [],
    "answers_data": [
        {
            "content": "So I though it would be a nice pet-project so I've started building a PoC tool that can generate a CFG for a given method in the .NET assembly.\nThe PoC uses <pre><code>Mono.Cecil</code></pre> to inspect the binary and produces a graph in a DOT language than later can be transformed into a picture with <pre><code>dot</code></pre> tool and works on IL level.\nA bit of technical info.\nFirst it determines leaders - instructions that will be the first instruction in the basic blocks (BB) - by going through the opcodes and checking the control flow type:\n\nIf the instruction's control flow type is of type <pre><code>Return</code></pre> - the next one (if exists) will be a leader.\nIf the instruction's control flow type is of type <pre><code>Branch</code></pre> - the destination of the branch instruction will be a leader\nIf the instruction's control flow type is of type <pre><code>Cond_Branch</code></pre> - the destination of the branch and the next instruction will be leaders.\n\nAlso doing that we can construct edges between those BBs, there will be different outgoing edges depending on the type of flow:\n\nIf the instruction's control flow type is of type <pre><code>Return</code></pre> there will be no outgoing edge\nIf the instruction's control flow type is of type <pre><code>Branch</code></pre> there will be an outgoing edge from the current instruction's BB to the branch's destination BB\nIf the instruction's control flow type is of type <pre><code>Cond_Branch</code></pre> there will be outgoing edges from the current BB to the destination of the <pre><code>Cond_Branch</code></pre> BB and to the next instruction's BB\n\nThe only thing we need to do having those info, is to generate a graph definition in the DOT langage.\nCalling the tool in the following way\n\n<pre><code>./cfg.exe Mono.Cecil.dll Mono.Cecil.MetadataBuilder.AddCustomDebugInformations | dot -Tpng -o cfg.png</code></pre>\n\nwill generate for us a \"nice\" CFG for the method <pre><code>AddCustomDebugInformations</code></pre>.\n\nIt might fail for some strange (or normal) edge cases and of course there's a lot to improve but overall CFG is there ;)\nLink to the repo: https://github.com/pawlos/cfg\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Aug 6, 2020 at 8:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}