{
    "title": "Finding a particular call to an offset within a vtable using pattern matching",
    "link": "https://reverseengineering.stackexchange.com/questions/18651/finding-a-particular-call-to-an-offset-within-a-vtable-using-pattern-matching",
    "content": "Let's say I have a very simple pattern I'm looking for. E.g. the following regex,\n<pre><code>mov.*(eax|edx|ecx|esi|edi), \\[(eax|edx|ecx|esi|edi)\\+30h\\]</code></pre>\nNow, I'm also looking for references to this in which the register written to is called, since this represents an offset for a particular function pointer.\nThe problem is that I'm seeing thousands of matches with the binary I'm looking at. For all I know, the function pointer could also be passed to some other function down X layers and then called there. This obviously creates a significant layer of complexity.\nAre there any tools that make it possible to search for matches using the above regex, but also look (up to a specific call depth and/or instruction count from the instruction matched) for calls to the actual register?\n",
    "votes": "3",
    "answers": 2,
    "views": "73",
    "tags": [
        "binary-analysis",
        "x86",
        "tools",
        "static-analysis"
    ],
    "user": "zeboidlund",
    "time": "Jul 1, 2018 at 5:51",
    "comments": [
        {
            "user": "Jongware",
            "text": "You mean that the immediate next instruction that uses that first register is <pre><code>call ...</code></pre> (the destination register)?\n",
            "time": null
        },
        {
            "user": "zeboidlund",
            "text": "Yes, sorry if that sounded vague. But not necessarily the immediate next instruction.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "sometimes the call may be performed without an intermediate load, e.g. \n<pre><code>call dword ptr [esi+30h]\n</code></pre>\nas for tracking the value loaded into the register, this is a data flow  analysis problem and can’t be solved (except for trivial cases) using just pattern matching. you should look into data flow analysis theory, e.g. involving intermediate representation (IR) of instructions. I’m afraid it can’t be covered by just a single post.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Jul 1, 2018 at 19:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you often find yourself doing similar things, you may want to read about intermediate representations. In the context of reverse engineering, those are languages made to be derived from assembly and used as an abstraction layer that's easier to edit and search. \nObviously, you missed some of the potential \"complications\" in your regex/search patten:\n\nOffsets may be added in multiple instructions (Think about <pre><code>lea eax, [ecx+20h] ; mov eax, [eax+10h]</code></pre>).\nInstructions can be interleaved between unrelated instructions for pipeline optimisations.\nUnrelated instructions can override related registers, causing false positives.\n\nAnd several other complications...\nThis is saying your question may seem innocent but in reality you touched a complex and difficult subject.\n",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jul 1, 2018 at 9:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}