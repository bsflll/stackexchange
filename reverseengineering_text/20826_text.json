{
    "title": "How does the x86 instruction, call 135b<__x86.get_pc_thunk.ax> work?",
    "link": "https://reverseengineering.stackexchange.com/questions/20826/how-does-the-x86-instruction-call-135b-x86-get-pc-thunk-ax-work",
    "content": "I think the below instruction is used for position independent code. Could anyone please help me understand how it works? \n<pre><code>call 135b<__x86.get_pc_thunk.ax>\n</code></pre>\nWhat are the use of the below instructions after it returns?\n<pre><code>add    eax,0x2d77\nmov    edx,DWORD PTR [eax-0xc]\nmov    edx,DWORD PTR [edx]\n</code></pre>\nIs it possible to remove call 135b<__x86.get_pc_thunk.ax> from the assembly when compiling the code using GCC?\nThank you.\n",
    "votes": "3",
    "answers": 1,
    "views": "5k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Mukesh",
    "time": "Mar 12, 2019 at 1:21",
    "comments": [],
    "answers_data": [
        {
            "content": "the call is getting the next instructions address in eax\nnotice the ax\nthere are other variants of this call with bx,cx,dx at the end\nwhich respectively returns the next instruction address in ebx,ecx and edx   \nthe call at 135b will look like   \n<pre><code>mov eax,[esp] \nret\n</code></pre>\nso eax in your specific case will contain 0x1289\nafter the addition eax will contain  0x4000\n so edx will get what is stored at [3ff4]    \nthis is called dereferencing pointers   **foo   \nbasically eax will contain the buffer where fscanf stores the return\nedx will contain the format string\necx will contain the FILE*\n",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 9, 2019 at 21:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}