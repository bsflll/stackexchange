{
    "title": "Weird instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/3063/weird-instructions",
    "content": "In fuzzing (with Pintool) to get examining execution traces of the program, here it is wget. I get some weird instructions, following is a piece extracted from a (very long) trace:\n<pre><code>RIP register   instruction\n\n0x7fff751fed17 mov rbx, 0xffffffffffdff000\n0x7fff751fed1e lsl r11d, eax\n0x7fff751fed22 xor r15d, r15d\n0x7fff751fed25 mov r10d, r11d\n0x7fff751fed28 mov r9d, dword ptr [0xff5ff080]\n0x7fff751fed30 test r9b, 0x1\n0x7fff751fed34 jnz 0x7fff1fdb4fdf\n0x7fff751fed3a mov rax, qword ptr [0xff5ff0a8]\n0x7fff751fed42 mov r13d, dword ptr [0xff5ff088]\n0x7fff751fed4a mov qword ptr [rdi], rax\n0x7fff751fed4d mov edx, dword ptr [0xff5ff088]\n0x7fff751fed54 mov r14, qword ptr [0xff5ff0b0]\n</code></pre>\nTo me, they are quite weird. First, some of them access directly to the memory, that means some addresses, e.g. <pre><code>0xff5ff080</code></pre>, <pre><code>0xff5ff0a8</code></pre> have been hard-coded into the program. Second, I find them nowhere in the loaded libraries and wget itself. Third, even more weird, by passing the parameter <pre><code>(IARG_MEMORYREAD_EA)</code></pre> to get the virtual addresses of the accessed memories. I got the addresses, e.g. <pre><code>0xffffffffff5ff080</code></pre>, <pre><code>0xffffffffff5ff0a8</code></pre>, etc, and all of them do not belong to the program's memory space.\nCoud anyone give me some suggestions ?.\n",
    "votes": "4",
    "answers": 1,
    "views": "330",
    "tags": [
        "fuzzing",
        "memory",
        "instrumentation"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Jun 1, 2014 at 14:11",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Do you have the opcode bytes for these instructions? What is the EIP? Is in in the wget binary itself or in one of the shared objects?\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Thank you, but the EIP seems normal. I have edited the question to add the EIP values. These instructions are in the binary itself.\n",
            "time": null
        },
        {
            "user": "samuirai",
            "text": "It looks like you jumped in between an instruction. Means your disassembler interprets the opcodes completely wrong. For example this can happen when you overwritten return addresses through your fuzzing.\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Thank you, I doubt that is the problem. Because before this happens, I see an indirect jump: \"jmp qword ptr [rip+0x21388a]\", and after several instructions, all become messy.\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "Unfortunately, by logging its static trace, namely before fuzzing, I see that these instructions exist. In case of you want to take a look, I give this trace here\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is code from the vDSO which is mapped by the kernel into every process, not from the wget binary. You could probably figure it out by inspecting the <pre><code>/proc/<pid>/maps</code></pre> file.\nHere's what I have in IDA for <pre><code>gettimeofday</code></pre> from it:\n<pre><code>.text:FFFFFFFFFF700D17   mov     rbx, 0FFFFFFFFFFDFF000h\n.text:FFFFFFFFFF700D1E   lsl     r11d, eax\n.text:FFFFFFFFFF700D22   xor     r15d, r15d\n.text:FFFFFFFFFF700D25   mov     r10d, r11d\n.text:FFFFFFFFFF700D28   mov     r9d, ds:0FFFFFFFFFF5FF080h\n.text:FFFFFFFFFF700D30   test    r9b, 1\n.text:FFFFFFFFFF700D34   jnz     loc_FFFFFFFFFF700FDF\n.text:FFFFFFFFFF700D3A   mov     rax, ds:0FFFFFFFFFF5FF0A8h\n.text:FFFFFFFFFF700D42   mov     r13d, ds:0FFFFFFFFFF5FF088h\n.text:FFFFFFFFFF700D4A   mov     [rdi], rax\n.text:FFFFFFFFFF700D4D   mov     edx, ds:0FFFFFFFFFF5FF088h\n.text:FFFFFFFFFF700D54   mov     r14, ds:0FFFFFFFFFF5FF0B0h\n</code></pre>\nSo it seems PIN's disassembler chose to not sign-extend addresses (which are encoded in 4 bytes in the opcodes).\n",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Nov 21, 2013 at 1:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks a lot, Igor Skochinsky, you really made my day. I have never heard about vDSO before.</span>",
                    "time": null
                }
            ]
        }
    ]
}