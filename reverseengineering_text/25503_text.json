{
    "title": "How do disassemblers work?",
    "link": "https://reverseengineering.stackexchange.com/questions/25503/how-do-disassemblers-work",
    "content": "I have 2 questions regarding this, but feel free to elaborate more if you want to, I'm really interested in this topic:\n\nDo they really just read byte by byte until they get a valid instruction? How do they know if it's a valid instruction and which it is? I don't imagine they just had every single instruction stored in a table as that'd be very inefficient.\n\nFound this source online that I think does this in around 700 lines (https://github.com/btbd/disassembler/blob/master/disassembler.c). If something like this is possible, why are there others that have a lot more code and logic?\n\n\nThanks!\n",
    "votes": "1",
    "answers": 1,
    "views": "321",
    "tags": [
        "disassembly",
        "assembly",
        "disassemblers"
    ],
    "user": "user33834",
    "time": "Jul 15, 2020 at 5:19",
    "comments": [],
    "answers_data": [
        {
            "content": "The 2 main approaches to disassembly are\n\nLinear sweep - decode all bytes appearing in sections of the executable that are typically reserved for machine code (e.g. the <pre><code>.text</code></pre> section of an ELF binary) as machine code\nRecursive traversal - take into account the control flow behavior of the program being disassembled in order to determine what to disassemble\n\nEach has its advantages and disadvantages. More information can be found in  Disassembly of Executable Code Revisited.\nAn exploration of what is involved in developing a disassembler is given in the following research presentation:\nThe (Long) Journey To A Multi-Architecture Disassembler\n",
            "votes": "2",
            "user": "julian",
            "time": "Jul 15, 2020 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}