{
    "title": "\\xDA\\x9Fb - what's that?",
    "link": "https://reverseengineering.stackexchange.com/questions/11252/xda-x9fb-whats-that",
    "content": "(Alert: I'm new with all this)\nI'm trying to find out what the following (dis)assembly does: \n<pre><code>MOV EAX,DWORD PTR SS:[EBP-54]     ; PTR to ASCII \"\\xDA\\x9Fb\"\n</code></pre>\nI seem to understand that the value at address [EBP-54] is copied to EAX. And that OllyDbg figured out that value to be an ascii string containing \"\\xDA\\x9Fb\". Is that right? \nCan someone maybe explain to me what this Ascii string is supposed to represent, and how it fits in this code example? \nEdit: Since the information above seems not sufficient to give an answer, I'll try to add some instructions that might (or might not) shed some light. \nShortly after the instruction above, there are multiple CMPs that each look like this: \n<pre><code>CMP DWORD PTR DS:[EAX+(different hex)],0\nJE SHORT (position a few lines below)\n</code></pre>\nThis CMP exits with true which is not the desired condition. The left side should have another value than 0. \nI could not figure out what the the string means but it is being used as one of multiple arguments in many internal (private) functions of the disassembly while the other arguments would contain column names of a database. \nI am planning to do a lot more digging but I was just curious if this seemed familiar to anybody.\n",
    "votes": "0",
    "answers": 3,
    "views": "348",
    "tags": [
        "disassembly",
        "ollydbg"
    ],
    "user": "vic",
    "time": "Nov 5, 2015 at 16:16",
    "comments": [
        {
            "user": "w s",
            "text": "As far as I understand eax will point to the following 4 bytes 0xDA (Ú), 0x9F(Ÿ), 0x62 (b) and 0, which represents the end of the string (according to extended ASCII table). It doesn't look as meaningful string, and generally speaking may represent almost anything imaginable from pointer to floating point number(except of meaningful string, of course).  The only way to determine what does it mean is to look what the program does with it.\n",
            "time": null
        },
        {
            "user": "vic",
            "text": "Thanks w s. I will add some info to my question, maybe it brings more meaning to the situation.\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Are comparisons always with zero ?\n",
            "time": null
        },
        {
            "user": "vic",
            "text": "Yes, with 0. I guess it's a switch statement and 0 is the default case.\n",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "I would assume that it's not a string but, rather a pointer (with value <pre><code>0x00629FDA</code></pre>) to a structure of some sort.  Is that address located in the file you are disassembling ?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As Ian Cook said, the most likely scenario is that this \"ASCII\" is not a string at all. \nDisassemblers like OllyDbg will call pretty much anything \"ASCII\" if it's zero terminated and does not contain overly crazy control characters, but neither the extended ASCII interpretation \"ÚŸb\" nor the UTF-8 interpretation \"ڟb\" (the first character is Arabic) make much sense, so most likely this is a pointer to a record, the first field of which is a pointer to address <pre><code>0x00629FDA</code></pre>.\n",
            "votes": "5",
            "user": "microtherion",
            "time": "Nov 6, 2015 at 20:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">That's really helpful, and it makes sense. Thank you.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@microtherion no it is not address it is an ascii string and not an escape sequence at that</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Can someone maybe explain to me what this Ascii string is supposed to\n  represent, and how it fits in this code example?\n\nWith just that one line of code for context, no, nobody can explain to you what that ASCII string is supposed to represent, nor how it fits into that code example.\n",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Nov 5, 2015 at 15:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">I guess that's also an answer. Would it help if I said that almost every other line is referencing the \"PTR to ASCII \"\\xDA\\x9Fb\" in some way? And that it might have come from a database? If not, I guess I'll have to dig deeper myself once more..</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>\\xdA\\9FB = {0x0d,0x41,0x09,0x46,0x62}     \n</code></pre>\n0x0d = CR or carriage return\n0x09 = tab\nso ollldybg showns them as ptr to ascii string\nassuming address <pre><code>401070</code></pre> holds  a string\nand <pre><code>401130 contains 401070</code></pre>\non any access of <pre><code>401130</code></pre>  ollydbg will dereference the pointer <pre><code>401070</code></pre>\nsince it contains an ascii string  (ollydbg knows because of its analysis data )\nit comments out as    PTR to Ascii Data\n<pre><code>CPU Disasm\nAddress   Hex dump     Command                  Comments\n004010CD  B8 30114000  MOV EAX, msgbox.00401130 ; PTR to ASCII \"A   Fb\"\n\nCPU Dump\nAddress   Hex dump                                ASCII\n00401130  70 10 40 00|                            p@\n\nCPU Dump\nAddress   Hex dump                                ASCII\n00401070  0D 41 09 46|62 00                       A Fb\n</code></pre>\nwith an actual ascii string \n<pre><code>CPU Disasm\nAddress   Hex dump       Command                       Comments\n004010CD    B8 30114000  MOV     EAX, msgbox.00401130  ; PTR to ASCII \"Caption For A Simple \"\n\nCPU Dump\nAddress   Hex dump                                ASCII\n00401130  70 10 40 00|                            p@\n\nCPU Dump\nAddress   Hex dump                                         ASCII\n00401070  43 61 70 74|69 6F 6E 20|46 6F 72 20|41 20 53 69| Caption For A Si\n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "Nov 6, 2015 at 21:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "microtherion",
                    "text": "<span class=\"comment-copy\">That's not how the <code>\\xHH</code> escape character works.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@microtherion did you read the answer who ever said that it is an escape charecter did you see the dump and disassembly in my answer ? dont you see the \"A  Fb\" in the display  or just wanted to play being trigger happy ?</span>",
                    "time": null
                },
                {
                    "user": "microtherion",
                    "text": "<span class=\"comment-copy\">Unfortunately, despite the effort you obviously put into your answer, it's not clear what exactly you're trying to demonstrate here. The very beginning of your message agrees that \\x starts a hex escape sequence, but you misinterpret the string because you think the \\x is followed by <b>ONE</b> hex character, while it is in fact followed by <b>TWO</b>. The string does not start with <code>0x0D</code>, it starts with <code>0xDA</code>, and it does not contain <code>0x09</code>, it contains <code>0x9F</code>.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if you know c compile execute and disassemble this code and see #include &lt;stdio.h&gt;  int main (void){   char *wtf = \"\\\\xDA\\\\x9Fb\";   char **ntf = &amp;wtf;   printf(\"pointer to asciic string %p contains  %s\\n\",*ntf,*ntf); }</span>",
                    "time": null
                },
                {
                    "user": "microtherion",
                    "text": "<span class=\"comment-copy\">So what you're saying is that the backlashes could be literal ones; this is not out of the question but contradicts the first line of your answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}