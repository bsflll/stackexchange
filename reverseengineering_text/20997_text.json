{
    "title": "C# Changing method body in runtime",
    "link": "https://reverseengineering.stackexchange.com/questions/20997/c-changing-method-body-in-runtime",
    "content": "I am trying to change a part in a third party library, it has a bug, however, there are no fixes and source code is not available as well.\nAt first, I tried to modify IL Opcodes directly by disassembling an assembly, but it has some kind of protection, so after recompiling it I was not able to use it even that I had removed <pre><code>Strong Name verification</code></pre> from it.\nI have tried to change <pre><code>IL instructions</code></pre> in runtime, however \n<pre><code>        InjectionHelper.Initialize();\n        InjectionHelper.WaitForIntializationCompletion();\n        Type type = obj.GetType();\n        var methods = type.GetMethods();\n       // MethodInfo targetMethod = type.GetMethod(\"MethodName\",  BindingFlags.NonPublic | BindingFlags.Instance);\n\n        var methodInfo = type\n            .GetMethods(BindingFlags.NonPublic | BindingFlags.Instance).Single(\n                m =>\n                    m.ReturnType == typeof(string) &&\n                    m.GetParameters().Length == 1);\n\n        RuntimeHelpers.PrepareMethod(methodInfo.MethodHandle);\n        byte[] ilOpCodes = methodInfo.GetMethodBody()?.GetILAsByteArray();\n        for (int i = 0; i < ilOpCodes.Length; i++)\n        {\n            if (ilOpCodes[i] == OpCodes.Ldc_I4_1.Value)\n            {\n                ilOpCodes[i] = (byte) OpCodes.Ldc_I4_0.Value;\n                break;\n            }\n        }\n        InjectionHelper.UpdateILCodes(methodInfo,ilOpCodes);\n</code></pre>\nBut unfortunately got an exception.\n<pre><code>Unhandled Exception: System.Exception: UpdateILCodes() failed, please check the initialization is failed or uncompleted.\n</code></pre>\nIs there any mistake I made? I used this article as a reference https://www.codeproject.com/Articles/463508/NET-CLR-Injection-Modify-IL-Code-during-Run-time \nSo what is the best way to make it usable?\n",
    "votes": "2",
    "answers": 1,
    "views": "7k",
    "tags": [
        "disassembly",
        "assembly",
        "c#"
    ],
    "user": "CROSP",
    "time": "Mar 30, 2019 at 11:15",
    "comments": [],
    "answers_data": [
        {
            "content": "In the past I've had issues editing the IL code during run time, especially if the method had already been compiled by the JIT Compiler, and the most full proof way I found was to patch it during run time was to edit the x86/x86_64(or whatever architecture you're running) generated by the JIT Compiler which is located at the pointer given by \n<pre><code>MethodInfo.MethodHandle.GetFunctionPointer()\n</code></pre>\nbut you need to make sure the target function is already compiled by either calling it or using \n<pre><code>RuntimeHelpers.PrepareMethod(MethodHandle)\n</code></pre>\nFrom there you can either utilize unsafe code blocks or Marshal to copy your own x86 bytecode (for example a jump to the function you want to replace with)\nI do however recommend you to use, or at least to take a look at, Harmony which is a library utilized by multiple games to support mods.\nAs for the reason why you're unable to utilize the library after removing the strong name it might be due to the fact that the application utilizing the library is 'linked' by the strong name and without it the load fails.\n",
            "votes": "6",
            "user": "André Brandão",
            "time": "Mar 31, 2019 at 21:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}