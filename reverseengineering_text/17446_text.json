{
    "title": "How to find the name of the method in Managed Code using Windbg and SOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/17446/how-to-find-the-name-of-the-method-in-managed-code-using-windbg-and-sos",
    "content": "I've got a crash dump, the application definitely crash in JIT optimized assembler code. I know the start address of the method. How do I find its name using using Windbg and SOS extension?\nCurrently I'm just exploring each assembly in the domain, then in each assembly I dump all modules, then in each module I dump method tables hoping that some method address will be equal to the method I search. And it takes me eternity...\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windbg",
        ".net"
    ],
    "user": "Anton Kukoba",
    "time": "Feb 12, 2018 at 16:31",
    "comments": [],
    "answers_data": [
        {
            "content": "You can use the <pre><code>ip2md</code></pre> sos command to get the method name for jitted code.\n<pre><code>0:016> k\n # Child-SP          RetAddr           Call Site\n00 00000000`013fe688 00007ffb`4567ddb8 win32u!NtUserWaitMessage+0x14\n01 00000000`013fe690 00007ffb`45611535 System_Windows_Forms_ni+0x2cddb8\n\n\n0:016> !ip2md 00007ffb`45611535 \nMethodDesc:   00007ffb454a25e8\nMethod Name:  System.Windows.Forms.Application+ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr, Int32, Int32)\nClass:        00007ffb4540c9f8\nMethodTable:  00007ffb45743f78\nmdToken:      00000000060052f3\nModule:       00007ffb453b1000\nIsJitted:     yes\nCodeAddr:     00007ffb45610fd0\nTransparency: Safe critical\n</code></pre>\n",
            "votes": "1",
            "user": "josh poley",
            "time": "Mar 13, 2018 at 17:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}