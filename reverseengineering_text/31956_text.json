{
    "title": "Reversing Assembly to C",
    "link": "https://reverseengineering.stackexchange.com/questions/31956/reversing-assembly-to-c",
    "content": "I've read the open letter addressing students asking for help with their homework and I agree with it, therefore I will try to be less of a pain in the *** ;)\nI need to reverse the x86-64 (AT&T) assembly back to C (fill in the blanks). I did most of the task, except a few things I didn't understand.\nHere is the assembly code (the compiler did some optimizations such as making the first function inline):\n<pre><code>0000000000401c50 <checkPasswordAux>:\n401c50: 48 8d 77 11             lea    0x11(%rdi),%rsi\n401c54: 31 c0                   xor    %eax,%eax\n401c56: 66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n401c5d: 00 00 00 \n401c60: 0f b6 17                movzbl (%rdi),%edx\n401c63: 84 d2                   test   %dl,%dl\n401c65: 74 29                   je     401c90 <checkPasswordAux+0x40>\n401c67: 66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n401c6e: 00 00 \n401c70: 89 d1                   mov    %edx,%ecx\n401c72: 83 e1 01                and    $0x1,%ecx\n401c75: 01 c8                   add    %ecx,%eax\n401c77: d0 fa                   sar    %dl\n401c79: 75 f5                   jne    401c70 <checkPasswordAux+0x20>\n401c7b: 48 83 c7 01             add    $0x1,%rdi\n401c7f: 48 39 fe                cmp    %rdi,%rsi\n401c82: 75 dc                   jne    401c60 <checkPasswordAux+0x10>\n401c84: b8 64 00 00 00          mov    $0x64,%eax\n401c89: c3                      retq   \n401c8a: 66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n401c90: f3 c3                   repz retq \n401c92: 0f 1f 40 00             nopl   0x0(%rax)\n401c96: 66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n401c9d: 00 00 00 \n\n0000000000401ca0 <checkPassword>:\n401ca0: 4c 8d 47 11             lea    0x11(%rdi),%r8\n401ca4: 48 89 fe                mov    %rdi,%rsi\n401ca7: 31 d2                   xor    %edx,%edx\n401ca9: 0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n401cb0: 0f b6 06                movzbl (%rsi),%eax\n401cb3: 84 c0                   test   %al,%al\n401cb5: 74 29                   je     401ce0 <checkPassword+0x40>\n401cb7: 66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n401cbe: 00 00 \n401cc0: 89 c1                   mov    %eax,%ecx\n401cc2: 83 e1 01                and    $0x1,%ecx\n401cc5: 01 ca                   add    %ecx,%edx\n401cc7: d0 f8                   sar    %al\n401cc9: 75 f5                   jne    401cc0 <checkPassword+0x20>\n401ccb: 48 83 c6 01             add    $0x1,%rsi\n401ccf: 4c 39 c6                cmp    %r8,%rsi\n401cd2: 75 dc                   jne    401cb0 <checkPassword+0x10>\n401cd4: 31 c0                   xor    %eax,%eax\n401cd6: c3                      retq   \n401cd7: 66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n401cde: 00 00 \n401ce0: 83 fa 19                cmp    $0x19,%edx\n401ce3: 7f ef                   jg     401cd4 <checkPassword+0x34>\n401ce5: 0f be 07                movsbl (%rdi),%eax\n401ce8: 84 c0                   test   %al,%al\n401cea: 74 4e                   je     401d3a <checkPassword+0x9a>\n401cec: 83 e8 61                sub    $0x61,%eax\n401cef: 48 98                   cltq   \n401cf1: 48 83 f8 19             cmp    $0x19,%rax\n401cf5: 77 dd                   ja     401cd4 <checkPassword+0x34>\n401cf7: 31 d2                   xor    %edx,%edx\n401cf9: eb 1b                   jmp    401d16 <checkPassword+0x76>\n401cfb: 0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n401d00: 83 e8 61                sub    $0x61,%eax\n401d03: 48 98                   cltq   \n401d05: 48 83 f8 19             cmp    $0x19,%rax\n401d09: 77 c9                   ja     401cd4 <checkPassword+0x34>\n401d0b: 48 89 c1                mov    %rax,%rcx\n401d0e: 48 f7 d1                not    %rcx\n401d11: 48 39 d1                cmp    %rdx,%rcx\n401d14: 72 be                   jb     401cd4 <checkPassword+0x34>\n401d16: 48 8d 0c 52             lea    (%rdx,%rdx,2),%rcx\n401d1a: 48 83 c7 01             add    $0x1,%rdi\n401d1e: 48 8d 14 8a             lea    (%rdx,%rcx,4),%rdx\n401d22: 48 8d 14 50             lea    (%rax,%rdx,2),%rdx\n401d26: 0f be 07                movsbl (%rdi),%eax\n401d29: 84 c0                   test   %al,%al\n401d2b: 75 d3                   jne    401d00 <checkPassword+0x60>\n401d2d: 31 c0                   xor    %eax,%eax\n401d2f: 48 39 15 0a 13 20 00    cmp    %rdx,0x20130a(%rip)        # 603040 <hash>\n401d36: 0f 94 c0                sete   %al\n401d39: c3                      retq   \n401d3a: 31 d2                   xor    %edx,%edx\n401d3c: eb ef                   jmp    401d2d <checkPassword+0x8d>\n401d3e: 66 90                   xchg   %ax,%ax\n</code></pre>\nAnd here is the C code (with the things I filled):\n<pre><code>int checkPasswordAux(char* s) {\n    int sum = __0__;\n    while(__*s__) {\n        char c = *s;\n        if(c-'a' > 25) {\n            return 100;\n        }\n        while(c) {\n            sum += c __%2__;\n            c __>>=__ 1;\n        }\n        s++;\n    }\n    return sum;\n}\nbool checkPassword(char* s) {\n    char* copy = s;\n    if(checkPasswordAux(s) > __25__) {\n        return 0;\n    }\n    s = copy;\n    unsigned long y = 0;\n    while(__*s__) {\n        unsigned long x = *s - __97__;\n        if(x > __25__) {\n            return 0;\n        }\n        if(y > ____) {\n            return 0;\n        }\n        y = __x+13y__;\n        s++;\n    }\n    return __y==0x939f103__;\n}\n</code></pre>\nBasically the only thing missing is the 'if' condition in the second function. I can't really find this condition in the assembly.\nAnother thing is, in the previous questions I find that the value of the  variable is 0x939f103.\nAgain, sorry for being a needy student, any help will be very much appreciated <3\n",
    "votes": "1",
    "answers": 0,
    "views": "147",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "x86-64"
    ],
    "user": "mikealexx",
    "time": "Jun 9, 2023 at 8:19",
    "comments": [
        {
            "user": "mikealexx",
            "text": "First of all, I found a mistake, it should be \"y = x + 26y\". Second thing is I think the if condition is \"y > ~x\" - y is bigger than not x.\n",
            "time": null
        }
    ],
    "answers_data": []
}