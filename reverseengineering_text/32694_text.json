{
    "title": "How to embed PE files to another PE files",
    "link": "https://reverseengineering.stackexchange.com/questions/32694/how-to-embed-pe-files-to-another-pe-files",
    "content": "So what I want to do basically is what BDFproxy does on the go, I want to modify a file (on the disk) to embed another PE in it and have both working, it does not matter if they work concurrently or when the main program finishes the embedded program works I just want to embed them in any way possible and if the Metasploit framework <pre><code>(peinjector post exploitation module)</code></pre> and BDFproxy can do that it is not impossible\nI tried to write a python script to try and do that however when I run the outputted file it says this app cannot run on your pc here is the script:\n<pre><code>import pefile\n\ndef embed_pe(main_exe_path, embedded_exe_path):\n    # Load the main executable\n    main_pe = pefile.PE(main_exe_path)\n\n    # Load the embedded executable\n    embedded_pe = pefile.PE(embedded_exe_path)\n\n    # Create a new section in the main executable for the embedded executable\n    name = \".embedded\"\n    virtual_size = len(embedded_pe.__data__)\n    raw_size = virtual_size\n    characteristics = 0xE0000020 # READ | WRITE | EXECUTE | CODE\n\n    # Calculate the virtual offset and raw offset\n    number_of_section = main_pe.FILE_HEADER.NumberOfSections\n    last_section = number_of_section - 1\n    virtual_offset = main_pe.sections[last_section].VirtualAddress + main_pe.sections[last_section].Misc_VirtualSize\n    raw_offset = main_pe.sections[last_section].PointerToRawData + main_pe.sections[last_section].SizeOfRawData\n\n    # Create a new section header\n    new_section_header = pefile.SectionStructure(main_pe.__IMAGE_SECTION_HEADER_format__, pe=main_pe)\n    new_section_header.Name = name.encode()\n    new_section_header.Misc_VirtualSize = virtual_size\n    new_section_header.VirtualSize = virtual_size\n    new_section_header.SizeOfRawData = raw_size\n    new_section_header.PointerToRawData = raw_offset\n    new_section_header.VirtualAddress = virtual_offset\n    new_section_header.Characteristics = characteristics\n\n    # Add the new section header to the list of sections\n    main_pe.sections.append(new_section_header)\n\n    # Modify the main headers\n    main_pe.FILE_HEADER.NumberOfSections += 1\n    main_pe.OPTIONAL_HEADER.SizeOfImage += raw_size\n    main_pe.OPTIONAL_HEADER.AddressOfEntryPoint = virtual_offset\n\n    # Embed the embedded executable into the new section\n    main_pe.__data__ = main_pe.__data__[:raw_offset] + embedded_pe.__data__ + main_pe.__data__[raw_offset:]\n\n    # Save the modified main executable\n    print(main_exe_path)\n    main_pe.write(\"modified_\"+main_exe_path)\n\n# Usage\nembed_pe(\"cygwin.exe\", \"message.exe\")\n</code></pre>\nSo what is the way to achieve my goal and if there is what am I doing wrong in my Python script\n",
    "votes": "0",
    "answers": 0,
    "views": "43",
    "tags": [
        "windows",
        "pe",
        "python",
        "exe",
        "metasploit"
    ],
    "user": "LuckyCoder3607",
    "time": "Feb 2, 2024 at 20:35",
    "comments": [
        {
            "user": "ynwarcs",
            "text": "those two programs are not merging two PE files into a single one. rather, they take a single PE file and inject some custom shellcode into it.\n",
            "time": null
        },
        {
            "user": "LuckyCoder3607",
            "text": "@ynwarcs Okay and how is this done?\n",
            "time": null
        },
        {
            "user": "ynwarcs",
            "text": "there are different methods. in general, it goes like this -> a new section is added to the executable (like in your code) or a codecave is found. then the shellcode is written to the section or the codecave. then the code of the original executable is patched (usually in the entry point function or some other generic place) so that it jumps into the injected shellcode.\n",
            "time": null
        }
    ],
    "answers_data": []
}