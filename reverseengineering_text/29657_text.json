{
    "title": "IntelPin, Ins_Insertcall?",
    "link": "https://reverseengineering.stackexchange.com/questions/29657/intelpin-ins-insertcall",
    "content": "please help me with Intel Pin:\nI print each instruction to the console and I want to insert +++++ after it using Ins_Insertcall:\n<pre><code>VOID CpuidCalled(const CONTEXT* ctxt)\n{\nstd::cerr << \"+++++\" << std::endl;\n}\n\nstd::cerr << INS_Disassemble(ins) << std::endl;\nINS_InsertCall(\nins,\nIPOINT_BEFORE, (AFUNPTR)CpuidCalled,\nIARG_CONTEXT,\nIARG_END\n);\n</code></pre>\nOutput:\n<pre><code>mov esp, esi\npop ebx\npop edi\npop esi\npop ebp\nret 0x10\n+++++\n+++++\n+++++\n+++++\n+++++\n+++++\nmov byte ptr [ebp-0x19], al\nmov dword ptr [ebp-0x4], 0xfffffffe\nmov dword ptr [ebp-0x24], 0x0\ncall 0x779fdd6d\n+++++\n+++++\n+++++\n+++++\n</code></pre>\nwhy so and how can it be fixed? Thank you\n",
    "votes": "1",
    "answers": 1,
    "views": "203",
    "tags": [
        "c++",
        "pintool"
    ],
    "user": "ALex",
    "time": "Dec 3, 2021 at 11:38",
    "comments": [],
    "answers_data": [
        {
            "content": "that's because you are printing disassembly in instrumentation routine and \"+++++\" in analysis routine.\nPIN has theoretically been divided into two routines:\n\ninstrumentation - where you define your instrumentation points - happens when instruction is jitted\nanalysis - where you execute actual instrumentation code - happens when instruction is executed\n\nRefer following slides for quick overview:\nhttps://www.intel.com/content/dam/develop/external/us/en/documents/cgo2013-256675.pdf\nso, what you should do? - depends on your preference - either print both disassembly and \"+++++\" in analysis routine - i.e. inside function CpuidCalled (which makes more sense), or print both in instrumentation routine (which would not make much sense as you want to observe the executed instructions).\n",
            "votes": "1",
            "user": "R4444",
            "time": "Dec 3, 2021 at 18:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ALex",
                    "text": "<span class=\"comment-copy\">thanks for the answer, but how to call CpuidCalled a function by analogy with INS_Disassemble(ins)? I need to output: mov esp, esi EAX= ... , IP=...</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\">send it like <code>new string(INS_Disassemble(ins))</code> as an argument in the instrumentation function</span>",
                    "time": null
                },
                {
                    "user": "ALex",
                    "text": "<span class=\"comment-copy\">#include \"pin.H\" #include &lt;iostream&gt; #include &lt;fstream&gt; #include &lt;string&gt; VOID DisplayInstruction(ADDRINT instructionAddress,string assemblyCode){  cout&lt;&lt;std::hex&lt;&lt;instructionAddress&lt;&lt;\":\"&lt;&lt;std::dec&lt;&lt;assemblyCode&lt;&lt;\"\\n\";}  VOID Instruction(INS ins, VOID *v) {         INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)DisplayInstruction,     IARG_INST_PTR, IARG_REG_VALUE,new string(INS_Assemble(ins)), IARG_END); } error new string: type specifier required, may be new std:string?</span>",
                    "time": null
                },
                {
                    "user": "R4444",
                    "text": "<span class=\"comment-copy\"><code>IARG_PTR, new string(INS_Disassemble(ins)),</code></span>",
                    "time": null
                },
                {
                    "user": "ALex",
                    "text": "<span class=\"comment-copy\">INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)DisplayInstruction,         IARG_INST_PTR, IARG_PTR, new string(INS_Disassemble(ins)), IARG_END);, but error again:type specifier required</span>",
                    "time": null
                }
            ]
        }
    ]
}