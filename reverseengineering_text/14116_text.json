{
    "title": "How to dump Android shared library from memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/14116/how-to-dump-android-shared-library-from-memory",
    "content": "I have encrypted Android <pre><code>so</code></pre> library that decrypts itself on load. I want to get its unencrypted code. For me it looks good idea to dump that library from memory when application started.\nI used <pre><code>/proc/self/maps</code></pre> to get loaded process memory map. I found 3 segments that correspond to the library in memory maps and used <pre><code>/proc/self/mem</code></pre> to dump these 3 segments to binary files. So, I got 3 binary files: code, writable data and read only data.\nDoes anyone know how to parse these 3 binary files and assemble them back to <pre><code>so</code></pre> file that Android can run & debug?\n",
    "votes": "1",
    "answers": 3,
    "views": "8k",
    "tags": [
        "android",
        "shared-object"
    ],
    "user": "Vitalii",
    "time": "Dec 7, 2016 at 10:16",
    "comments": [
        {
            "user": "julian",
            "text": "See Memory dumping Android on Security.SE\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use GameGuardian for dump memory. Need root.\nMemory editor tab - menu - memory dump - select range and folder - press ok - wait for toast \"Dump end\".\nHere some video examples how to do this:\n\nHow to dump memory of any running processes in Android -\nGameGuardian\nHow to dump odex file from memory on Android -\nGameGuardian\nHow to dump deleted file from memory on Android -\nGameGuardian\n\nBut it not enough for build valid ELF (.so) file from dump. It is impossible because some data from ELF used only on load and never stored in memory. And some other data (relocations for example) changed during ELF load.\n",
            "votes": "3",
            "user": "Enyby",
            "time": "Mar 25, 2017 at 4:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Frida is the way to go, you can simply do:\n<pre><code>memorydump: function (address, size) {\n    Memory.protect(ptr(address), size, \"rwx\");\n    var a = Memory.readByteArray(ptr(address),size-1000);\n    return a;\n}\n\nmoduleaddress: function (lib){\n  try{\n\n    var ret = [];\n    var module = Process.findModuleByName(lib);\n    var address = Module.findBaseAddress(lib);\n    var sz = module.size;\n  \n  ret.push({\n    \"addr\": address,\n    \"size\": sz\n  });\n  return ret;\n}\ncatch(err){\n  console.log('[!] Error: '+err);\n}\n\n}\n</code></pre>\nIf you are not comfortable with Frida you can use a wrapper:\nhttps://github.com/Ch0pin/medusa\ndumping the memory will be simply as: medusa>memops package_name libname.so\nand then just type dump :)\n",
            "votes": "2",
            "user": "Dimitris Valsamaras",
            "time": "Nov 6, 2020 at 8:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bala R",
                    "text": "<span class=\"comment-copy\">Why the size - 1000?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Maybe this helps: https://www.andnixsh.com/2015/11/tutorial-how-to-decrypt-encrypted-dll.html\nYou can create dump from memory using <pre><code>gcore <path></code></pre> command and recover any plain files (.dex, .dll, .mp3, etc) using custom GDB for Android. I'm not sure if you can recover decrypted .so file.\nCustom GDB only works on ARM-based devices running Android 4.4.4 and below. If you want to get it work for 5.x.x, you need to bypassing PIE security check but there is a risk of bricking your device. https://www.alphagamers.net/threads/guide-bypassing-pie-security-check-android-5-0-up.242363/\n",
            "votes": "0",
            "user": "0xabc",
            "time": "Apr 3, 2020 at 15:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}