{
    "title": "What is Hardware Breakpoint and when we need to use it?",
    "link": "https://reverseengineering.stackexchange.com/questions/28045/what-is-hardware-breakpoint-and-when-we-need-to-use-it",
    "content": "In part 5 of the lena151 RE tutorial I saw the Hardware BP.\nThe explanation he gave was very difficult for me to understand.\nCan anyone explain what is a hardware breakpoint and when we need to use it?\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "breakpoint"
    ],
    "user": "Jason",
    "time": "Jul 26, 2021 at 7:39",
    "comments": [],
    "answers_data": [
        {
            "content": "The short answer:\nFrom the user point of view, software breakpoints are only for instructions, and you may set them as many as you want, while hardware breakpoints are universal, but you may use only a few of them (typically 4) at the same time.\nTL,DR;\nThe hardware breakpoints are implemented by a special logic circuit integrated directly in the CPU, connected to\n\nthe address bus on the one side, and\nthe special debug registers on the other one.\n\n\nTo set a hardware breakpoint, you fill the debug registers (generally indirectly by your debugger) with this information:\n\nthe (starting) address,\nthe length (byte, word, or double-word),\nthe access mode to watch for (read, read/write, or instruction execution),\nthe local/global mode (not used for the decision whether the code execution have to break).\n\nYou may do it only for small number of addresses, it's hardware dependent, the common number is 2 to 6 (e.g. for x86 you may set 4 hardware breakpoints: addresses are written to the debug registers DB0 to DB3, while other info — for all addresses individually as appropriate bit flags — to the DB7 register).\nThe circuit watches every access to the memory (RAM or ROM) and compares address, length, and access mode with values in the debug registers. If they correspond, the circuit sends the Halt signal and the debugger interrupts the execution of the debugged program.\n\nSo the differences between hardware breakpoints (HB) and software ones (SB) are:\n\nIn the number of them:\n\nyou may set as many SBs as you wish, but\nonly very small number of HBs (typically 4).\n\n\nIn usability:\n\nSB is set to a particular instruction (there is no way to set them for memory access), while\nHB is set to address ranges and for the desired access mode.\n\n\nIn the applicable type of memory:\n\nSB writes into memory (the <pre><code>INT 3</code></pre> instruction in the place of the first byte of the watched instruction), so it is not capable to set a breakpoint for instruction in read-only memory (ROM), while\nHB don't write anything into memory, so it has not such a limitation.\n\n\nIn the speed (hardware is always faster than software, so HB is faster than SB).\n\n\nFor example, if you know the address of some string in memory and you are interested when it will be read, SB doesn't help you, but HW does.\n\nSome references:\n\nDebug registers for x86\nDebug Registers on Intel x86 Processor Architecture (with or without VT-x)\nx86 architecture debug registers\n",
            "votes": "4",
            "user": "MarianD",
            "time": "Jul 26, 2021 at 10:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">In actual practice of applying dynamic analysis on code with a debugger, the difference that really is significant is that software breakpoints can be overwritten (and modify contents of program memory). This is especially important if you are dealing with self -modifying code or code that writes to the executable sections of memory (ie unpackers) For example if you know OEP is at address X and you want to run till you hit that address from EP, you need to use a hw breakpoint because the unpacking stub will overwrite your int3 breakpoint at oep. Other more complex nuances as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}