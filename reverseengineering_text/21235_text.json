{
    "title": "function call trace with radare2 or break on all function call",
    "link": "https://reverseengineering.stackexchange.com/questions/21235/function-call-trace-with-radare2-or-break-on-all-function-call",
    "content": "I want to script with python using r2pipe. Is there a way that when debugging I can break on each call function, thus I can get the parameter?  What's more, I won't jump into system library.\nOr is there a way to do function trace, just in program's address space, not in system library?\n",
    "votes": "7",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        "radare2",
        "breakpoint",
        "tracing"
    ],
    "user": "SwordWorth",
    "time": "Apr 28, 2019 at 14:06",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, you can do that. The python script doing that is attached below with appropriate comments.\n<pre><code>#!/usr/bin/env python3\nimport r2pipe\n\nr = r2pipe.open('programName', flags=['-d'])\nr.cmd('aei')\n\nmodules = r.cmd('dmm') #list all modules along with start and end addresses\nmodules2 = [] #modules' start addresses\nmoduleNames = []\n#since modules is just one big string, we need to extract relevant information from it\ni = 0\nj = 0\nwhile i < len(modules):\n    modules2.append('')\n    while modules[i] != ' ':\n        modules2[j] += modules[i]\n        i += 1\n    while modules[i] == ' ':\n        i += 1\n    while modules[i] != ' ':\n        i += 1\n    while modules[i] == ' ':\n        i += 1\n    moduleNames.append('')\n    while modules[i] != '\n':\n        moduleNames[j] += modules[i]\n        i += 1\n    i += 1\n    j += 1\n\nmoduleNames = [x.split('/')[len(x.split('/')) - 1] for x in moduleNames]\n\nsystemModules = {} #put here all libraries you don't want breakpoints in\nsystemModules['ld-2.27.so'] = 1\n\nfor i in range(len(moduleNames)):\n    if moduleNames[i] not in systemModules:\n        r.cmd('s ' + modules2[i]) #go to start of module i\n        calls = r.cmd('/am call') #find all call instructions in this module; you can use other commands of type /a for more flexibility\n        calls2 = [] #all addresses in module i where we want to put breakpoints\n        k = 0\n        j = 0\n        while k < len(calls):\n            calls2.append('')\n            while calls[k] != ' ':\n                calls2[j] += calls[k]\n                k += 1\n            while calls[k] != '\n':\n                k += 1\n            k += 1\n            j += 1\n        for k in range(len(calls2)):\n            r.cmd('db ' + calls2[k]) #put breakpoint at given address\n#all breakpoints set; you can now continue execution and do what you want to do at each breakpoint\nprint(r.cmd('db')) #list all breakpoints set\n</code></pre>\nNot very elegant script, but gets the job done. It searches for all <pre><code>call</code></pre> instructions in relevant modules and puts breakpoint at each one.\nFor more flexibility, instead of doing <pre><code>/am</code></pre>, you can use other search commands available in radare2 (<pre><code>/a?</code></pre> for more information).\n",
            "votes": "1",
            "user": "bart1e",
            "time": "Jul 20, 2019 at 19:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}