{
    "title": "How to debug an IDA Pro plugin built with the C++ IDASDK",
    "link": "https://reverseengineering.stackexchange.com/questions/6177/how-to-debug-an-ida-pro-plugin-built-with-the-c-idasdk",
    "content": "I'm building an IDA Pro plugin (not a script) using the C++ SDK. On top of the frustration added by the lack of a proper API documentation, I cannot find a good way to debug my plugin.\nI've tried printing messages to the output window of IDA Pro. \n<pre><code>...\nmsg(\"Everything OK up to point 1\n\");\n...\nmsg(\"Everything OK up to point 2\n\");\n...\n</code></pre>\nHowever, whenever my plugin hits an error state, IDA Pro crashes before I get a chance to read the messages that my plug-in printed in the output window.\nWhile searching for a solution I stumbled upon the Wingware Python IDE which can be used to debug IDAPython. The drawbacks however are that it is not free and I am not developing the plugin in python.\nOne obvious thing to try is writing to a text file instead of writing to the IDA output window. However, that is not handy debugging. Isn't there a better way to debug an IDA Pro plugin built with C++ SDK?\n",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "Benny",
    "time": "Sep 5, 2014 at 8:48",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "This is hardly RE. You debug plugins as you would debug any other DLL.\n",
            "time": null
        },
        {
            "user": "Benny",
            "text": "I asked it here because: (1) RE has many IDA experts and questions, (2) i didn't know that .plx were equivalent to DLL or .so in my case\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Most modern IDE's allow you to specify an executable to launch when debugging, you should specify your ida executable. Or otherwise, try to attach to the running IDA process.\nWhen you put a breakpoint in the run() function of your plugin, your IDE will stop at run,  and you can singlestep, etc from there.\nAlso you if you enable 'break on exception' your IDE will probably figure out if the exception was in your plugin, and load the right source file for you.\n",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Sep 5, 2014 at 9:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}