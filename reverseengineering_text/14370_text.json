{
    "title": "Antidebug/reverse engineering targeted for libraries [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/14370/antidebug-reverse-engineering-targeted-for-libraries",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nSo I'm reading about antidebug and anti-reverse engineering techniques, but these cover, in all the docs I've seen, just executables. \nAre there any resources that target specifically shared and static libraries?\nIf not, are the techniques for executables mainly applicable for static/dynamic libraries?\nThanks!\n",
    "votes": "0",
    "answers": 2,
    "views": "186",
    "tags": [
        "debugging",
        "binary-analysis",
        "c",
        "anti-debugging",
        "libraries"
    ],
    "user": "senseiwa",
    "time": "8 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "It should be pretty straight forward to adjust anti-debugging techniques from executables to libraries. Which parts are you having difficulties with?\n",
            "time": null
        },
        {
            "user": "senseiwa",
            "text": "Apparently I can use the tutorials for executable. I have (now) no difficulties. I needed to assess the feasibility before embarking in this effort.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "To the best of my knowledge theoretically most obfuscation techniques are also applicable to libraries, but there are considerable downsides: Slowdown and increased support-difficulties. Please note if a program does something, there is always a way to find out how it archived it when you control the execution environment.\nI'd advise you to keep any business logic you want to protect out of libraries by keeping the libraries generic. If your business model concerns the distribution of logic you want to keep a secret - its a pretty bad situation.\nIf you really want to offer some confidential functionality and performance is not an issue, think about offering it on the server side.\n",
            "votes": "2",
            "user": "Nordwald",
            "time": "Jan 12, 2017 at 8:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "senseiwa",
                    "text": "<span class=\"comment-copy\">I agree, but what if I need in my business to offer secret functionalities on a client? I know this is bad, but are there additional recommendations?</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">When performance isn't of utmost importance, you can still apply anti-reversing obfuscation. These may slow down, but experienced reversers will always be able to find out what is happening.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I think all anti-debug and anti-reversing techniques are also applicable to shared and static libraries. Shared libraries are still code, just placed in a different file format. I guess people don't talk much about anti-reversing techniques in library codes since the techniques are the same.\n",
            "votes": "1",
            "user": "yellowbyte",
            "time": "Jan 11, 2017 at 21:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">I tend to disagree, since symbols are important and most obfuscation has influence on the performance which is unfavorably in case of shared libraries which do heavy lifting.</span>",
                    "time": null
                },
                {
                    "user": "yellowbyte",
                    "text": "<span class=\"comment-copy\">I see. Good point.</span>",
                    "time": null
                }
            ]
        }
    ]
}