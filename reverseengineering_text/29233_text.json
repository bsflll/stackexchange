{
    "title": "Stuck in finding the algorithm of a save game file CRC/checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/29233/stuck-in-finding-the-algorithm-of-a-save-game-file-crc-checksum",
    "content": "A sample message-CRC pair looks like this:\n<pre><code>00000005 00000000 12121212 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 2F8376FE</code></pre>\nwhere the last 4 bytes are the CRC\nI suspect the last 4 or 5 groups of zeroes are filler, so they are probably not taken into account when  calculating the CRC. Same goes for the <pre><code>00000005</code></pre> header, which doesn't ever change.\nAside from that, I have no idea how this CRC might be calculated, it might aswell be a custom CRC32 or a custom algorithm whatsoever. I have tried bruteforcing by feeding CRC reveng some samples to no avail.\nIts a Wii U port by Square Enix published in 2013, if that gives anyone any clue. Below more samples are provided, where a value is incrementally changed.\n<pre><code>                             ==> <==\n</code></pre>\n<pre><code>00000005 00000000 12121212 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 80C228D1</code></pre>\n<pre><code>00000005 00000000 12121212 00000002 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 8D061358</code></pre>\n<pre><code>00000005 00000000 12121212 00000003 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 DE44C52B</code></pre>\n<pre><code>00000005 00000000 12121212 00000004 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 747E3E4A</code></pre>\n<pre><code>00000005 00000000 12121212 00000005 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 C5BCF01D</code></pre>\nI can give more samples need be\n",
    "votes": "0",
    "answers": 1,
    "views": "274",
    "tags": [
        "hex",
        "crc",
        "game-hacking"
    ],
    "user": "Andreu Navarro",
    "time": "Aug 30, 2021 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "It's definitely not a CRC32 of any kind. CRC calculation is linear under XOR. This means if you flip a certain bit in the input, the effect on the CRC (old value XOR new value) will always be the same. This is not the case in the samples you provided. Looking at changing the counter from 0 to 1 (flipping tge lowest bit) <pre><code>2F8376FE</code></pre> xor <pre><code>80C228D1</code></pre> is <pre><code>AF415E2F</code></pre>. If a CRC of some kind was used, we would expect the same effect when the counter increments from 2 to 3 (again flipping the lowest bit of the counter). Looking at the checksum values, we find <pre><code>8D061358</code></pre> and <pre><code>DE44C52B</code></pre>. The XOR between these two values is <pre><code>5342D673</code></pre>, which is completely different.\n",
            "votes": "1",
            "user": "Michael Karcher",
            "time": "Sep 6, 2021 at 12:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}