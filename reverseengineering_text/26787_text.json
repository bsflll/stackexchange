{
    "title": "With ghidra/x64dbg sync, how to display dynamic values in ghidra's decompile window?",
    "link": "https://reverseengineering.stackexchange.com/questions/26787/with-ghidra-x64dbg-sync-how-to-display-dynamic-values-in-ghidras-decompile-win",
    "content": "I'm reversing a program and a library without debugging symbols. I'm using x64dbg to break at specific regions and observe what is happening at runtime, and annotate the decompile version in ghidra.\nI'm using ret-sync to synchronize horizon between x64dbg and ghidra. However, it's often addresses and not values that are directly visible in x64dbg, and only the horizon is sync in ghidra, from x64dbg as the program goes on.\nI would like to:\n\nsee the variables values in ghidra's decompile window: as the program goes and all the values that were allocated between two datetimes in the execution; how can I do this ? For instance when a pointer change of address I would like to follow the \"content\" directly, not \"caring/focusing first\" about/on the address.\n\nin the case of arrays and struct, from the address, how can I have all the values displayed, as if I was debugging from Visual Studio for instance ? (example)\n\nhow can I label back the renamed variables in ghidra back in x64dbg ?\n",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "debugging",
        "ghidra",
        "x64dbg"
    ],
    "user": "Soleil",
    "time": "Jan 18, 2021 at 17:03",
    "comments": [],
    "answers_data": [
        {
            "content": "It sounds like you are looking for proper debugger integration in Ghidra. This has recently been published to the GitHub repository in the <pre><code>debugger</code></pre> branch. There is also a good blogpost showcasing it.\nSadly there does not seem to be a <pre><code>x64dbg</code></pre> backend yet, but I would expect that this will appear as either an official backend or a community plugin at some point in the near future.\nConcerning your specific questions and whether they are supported or will likely be supported via this debugger feature in the future:\n\nsee the variables values in ghidra's decompile window\n\nI think showing them directly in the decompile window is currently not supported. But showing a list of variables of the current function, globals and maybe specific addresses definitely seems like something that will be supported at some point, or can be written with reasonable effort.\n\nin the case of arrays and struct, from the address, how can I have all the values displayed, as if I was debugging from Visual Studio for instance ?\n\nI am not quite sure what you mean here because I never used debugging with Visual Studio myself. But this seems like a more specific case of the first question to me and will either be supported at some point, or something that can be scripted for a specific purpose easily enough.\n\nhow can I label back the renamed variables in ghidra back in x64dbg ?\n\nThis might be out of scope for a debugger plugin and would require support on the <pre><code>x64dbg</code></pre> side. The <pre><code>x64dbg</code></pre> plugin would need some functionality to receive variable names from Ghidra and apply them. Most likely possible in general, but I do not know if the Debugger Protocol which Ghidra uses supports this notion.\n",
            "votes": "4",
            "user": "Florian Magin",
            "time": "Jan 18, 2021 at 10:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}