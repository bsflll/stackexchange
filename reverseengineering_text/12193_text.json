{
    "title": "Backblaze 16-bit checksum (\"bzsanity\")",
    "link": "https://reverseengineering.stackexchange.com/questions/12193/backblaze-16-bit-checksum-bzsanity",
    "content": "I use Backblaze to back up my computer. You restore files from your backups by selecting files to restore, which are then packed into large zip files. Of course, it's fairly rare to be able to download a 500GB zip file without a connection interruption, so a sane developer would implement support for the HTTP Range header to allow users to resume downloads.\nThey have not done so. Instead, they have a boutique download utility that specifies the requested byte ranges by emulating a POSTed HTML form. This utility does all the stuff you'd expect a normal download manager to do, like downloading with multiple connections at a time and resuming partially completed downloads, but due to some dodgy design issues (like opening a fully-fledged process, not a thread, for each 40MB block) it is rather inefficient on fast (>100 Mbps) connections. It also is Windows-exclusive.\nI'm trying to write an open source replacement in Node.js that removes some of the suck, but I'm up against a roadblock: one of the fields the utility sends in its POST requests is called \"bzsanity\" and is a 16-bit checksum over the account email address. Unfortunately, I can't figure out what the algorithm is. Maybe I'm just dumb, but I'm hoping you guys can help me out.\nHere are some checksum values:\n\n[email protected]: 028a\n[email protected]: 4152\n[email protected]: 3d0f\ntest: 494c\naa: acf2\nab: aaad\nac: 8e4d\nad: 0436\n\"\" (empty string): a93e\na: ce7f\nb: 1a1e\nc: 1540\nd: 6c57\n\nIf you want more test vectors, I can probably deliver. I've tried adding the bytes in an accumulator and a few variants of CRC-16, and those approaches don't work.\n",
    "votes": "7",
    "answers": 2,
    "views": "683",
    "tags": [
        "crc"
    ],
    "user": "Reid Rankin",
    "time": "Mar 9, 2016 at 20:41",
    "comments": [
        {
            "user": "Mint",
            "text": "Maybe a few years too late but... Did you ever finish making a replacement in node.js? I've got several 300-500GB zip files I need to get down, and even with gigabit internet download speeds are slow. (I'm using aria2c 1 thread, cos as you said, no HTTP Range header.. I'm on Linux so...can't use there DL apps.)\n",
            "time": null
        },
        {
            "user": "Reid Rankin",
            "text": "@Mint I did, and then I promptly forgot about it for three years. Thanks for making sure I followed through, if a bit belatedly.\n",
            "time": null
        },
        {
            "user": "Mint",
            "text": "legend!!! I had little hope that I'd ever hear back let along a fully working node.js app! Gave it a try just now and it does indeed work, \"(513.61 Mbps instantaneous, 491.52 Mbps total, ETA: an hour)\" An hour sure beats like ~10h I was getting. Thank you so much for sharing.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'll use <pre><code>\"test@test.com\"</code></pre> for the sake of example.\nAlgorithm\n\nConvert the email address to its ASCII bytes. For example, the ASCII bytes for <pre><code>\"test@test.com\"</code></pre> are <pre><code>74 65 73 74 40 74 65 73 74 2E 63 6F 6D</code></pre>.\nMake a lowercase string out of those hex bytes. Using the running example, this would produce <pre><code>\"7465737440746573742e636f6d\"</code></pre>.\nCompute the SHA-1 hash of that string. For example, <pre><code>SHA1(\"7465737440746573742e636f6d\") = 90 A2 78 5A 31 39 E2 2A 3D F7 56 90 0A F3 79 87 A9 35 03 16</code></pre>.\nMake a lowercase string out of those hex bytes. Using the running example, this would produce <pre><code>\"90a2785a3139e22a3df756900af37987a9350316\"</code></pre>.\nConcatenate the 2nd, 4th, 6th, and 8th characters in that string to produce the <pre><code>bzsanity</code></pre> value. Using the running example, this would be <pre><code>'0'+'2'+'8'+'a' = \"028a\"</code></pre>.\n\nAnd just for fun, here's a one-line snippet in Python to compute the <pre><code>bzsanity</code></pre> value:\n<pre><code>import hashlib\n\"\".join(map(lambda i: hashlib.sha1(\"\".join(map(hex, map(ord, \"test@test.com\"))).replace(\"0x\", \"\")).hexdigest()[i], [1, 3, 5, 7]))\n</code></pre>\n",
            "votes": "10",
            "user": "Jason Geffner",
            "time": "Mar 10, 2016 at 17:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">I am shocked, he may be not human.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@MrNerdHair: I reverse engineered the client software.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">IDA Pro + OllyDbg. Because of the compiler they used, it was nearly impossible to figure this out without dynamic analysis, so don't kick yourself too hard ;)</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@JasonGeffner awesome work, although IMO it is better if this site does not become \"do my reversing of me\" site, but rather provides advice on how to tackle difficulties with reversing.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@VitalyOsipov: My hope is to show people that for all these \"figure out the checksum by looking at sample inputs and outputs\" questions, you almost always need to reverse engineer the code itself. Expect me to point people to this answer (and this specific comment) going forward ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As CTO and founder of Backblaze, I wrote the original source code of the Backblaze client, and Jason Geffner above is correct. That is:\n\nhexencode the email address (all lowercase, email addresses are not case sensitive)\ntake the sha1 - the result should be a 40 byte human readable all lowercase string\nif the sha1 characters have \"zero\" for the index of the very initial character, then take the characters at index 1, 3, 5, and 7.\n\n-- BrianW\n",
            "votes": "4",
            "user": "brianwski",
            "time": "Mar 11, 2016 at 21:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}