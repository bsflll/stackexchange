{
    "title": "Reverse Engineering API's of Browser games",
    "link": "https://reverseengineering.stackexchange.com/questions/26751/reverse-engineering-apis-of-browser-games",
    "content": "I like the idea of Reverse Engineering API's and creating bots/scripts for Browser games. However, I am a beginner in the Computer Science field. I recently started my Computer Science Degree and would like to know what modules should I look out for that typically covers this sort of thing.\nWe have a course in second year labelled - 'Full Stack Developing' would that be something I should take?\n",
    "votes": "2",
    "answers": 1,
    "views": "549",
    "tags": [
        "game-hacking",
        "api",
        "api-hacking",
        "api-reversing"
    ],
    "user": "john doe",
    "time": "Jan 11, 2021 at 21:21",
    "comments": [
        {
            "user": "pythonpython",
            "text": "Can you share the course offerings from your degree program?\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Browser games are HTTP(S) based. Therefore the best start is to set-up a proxy like mitmproxy, Zap, Fiddler, Chares, redirect your web-browser to the proxy and look at the HTTP requests.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This depends on the implementation of the game in the browser.\nThe API is likely a RESTful API and the format for data exchange is likely JSON.\nA modern full stack web development course will often cover both of these subjects.\nIn terms of reverse engineering the API itself, there's not a huge challenge. Restful APIs and JSON are chosen because they're easy to use and easy to integrate.\n",
            "votes": "1",
            "user": "pythonpython",
            "time": "Jan 12, 2021 at 0:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}