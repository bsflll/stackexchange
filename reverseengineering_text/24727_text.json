{
    "title": "ASLR and its effect",
    "link": "https://reverseengineering.stackexchange.com/questions/24727/aslr-and-its-effect",
    "content": "I was debugging some programs with <pre><code>gdb</code></pre>, I already set the disable-randomization to on, but I was having trouble, I set a break point and examined that the <pre><code>$sp</code></pre> is different everytime, what causes this randomization besides ASLR?\n",
    "votes": "1",
    "answers": 2,
    "views": "480",
    "tags": [
        "gdb"
    ],
    "user": "Sumanto Dinar",
    "time": "Dec 20, 2024 at 15:49",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "It's different every time you run it, or is the breakpoint reached multiple times within a single run? I suspect you mean the former.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "ASLR causes the base executable and external libraries (.so, .dll, etc) to load at random base addresses in order to make exploitation harder.\nThe stack is not part of the loaded image, it is dynamically allocated when the process starts. The changes of stack address is not related to ASLR.\n",
            "votes": "1",
            "user": "Yotamz",
            "time": "Apr 17, 2020 at 9:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "multithr3at3d",
                    "text": "<span class=\"comment-copy\">Not quite. ASLR definitely does affect loading of stack and heap as well.</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">When enabled it affects the stack and heap (and other mmap'd areas) as well, but not the other way around. These pages will have some randomization by their nature even when ASLR is disabled.</span>",
                    "time": null
                },
                {
                    "user": "multithr3at3d",
                    "text": "<span class=\"comment-copy\">sure, but with ASLR disabled, you should be able to run a simple program multiple times and have the stack addresses remain constant. I just confirmed on my system. Look at some simple no-NX buffer overflow challenges; they also depend on the behavior of stack addresses remaining the same between runs.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "So, the address stored in your stack-pointer (<pre><code>$sp</code></pre>) is greatly dependent of the environment variables which are stored prior to the <pre><code>main()</code></pre> function in the stack (due to the <pre><code>envp</code></pre> argument used in <pre><code>main(int argc, char* argv[], char* envp[])</code></pre>.\nIf you change the size of some environment variables, it may push down or up the beginning of your stack a little and this change may be amplified if you enter many functions inside your program.\nThe main reason the position of <pre><code>$sp</code></pre> may change at start include (not exhaustive):\n\nThe variation of the number of arguments passed to the command-line (<pre><code>argv[]</code></pre> size will change).\n\nThe change of the directory in which you are executing your program (the <pre><code>$_</code></pre> variable)\n\nThe directory in which you are (the <pre><code>$PWD</code></pre> variable).\n\nIf you are in <pre><code>gdb</code></pre>, the variables <pre><code>$LINES</code></pre> and <pre><code>$COLUMNS</code></pre> are added to the environment which push downward the stack.\n\n...\n\n\nTo render the stack addresses more reliable, try to avoid changing the initial conditions (where you execute the binary and the arguments passed to the binary) and you may unset some variables (<pre><code>unset</code></pre> in <pre><code>gdb</code></pre>). For example:\n<pre><code>$> gdb ./mybinary\n...\n(gdb) unset LINES\n(gdb) unset COLUMNS\n(gdb) run\n</code></pre>\n",
            "votes": "0",
            "user": "perror",
            "time": "Dec 18, 2024 at 16:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}