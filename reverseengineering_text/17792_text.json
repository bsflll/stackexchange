{
    "title": "arm branch calculator",
    "link": "https://reverseengineering.stackexchange.com/questions/17792/arm-branch-calculator",
    "content": "When I use this opcode <pre><code>09E0</code></pre> that mean <pre><code>B  #0x12</code></pre> that mean go to pc+0x12 .(relative address)\nHow can I jump with <pre><code>B</code></pre> to pc-0x12  (relative address)?\n",
    "votes": "0",
    "answers": 1,
    "views": "468",
    "tags": [
        "exception"
    ],
    "user": "assemblerArmCal",
    "time": "Mar 27, 2018 at 4:11",
    "comments": [
        {
            "user": "user22967",
            "text": "This is a very basic question, it's a good idea to read up on Thumb instruction encoding - and take care of the byte order, the instruction itself is a 16-bit instruction 0xE009 (see infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0210c/â€¦). Branch offsets are 2's complement numbers, so you simply replace the least significant 11 bits of the 16-bit word with the offset shifted one bit to the right (since Thumb instructions only start on even addresses).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "B #0x12 will normally yield 07 e0  in arm thumb mode \nB #0x16 would yoeld 09 e0 \nyou f7 e7 will translate to B #-14 \n<pre><code>Enter your arm instruction :  b #-14\nb #-14\nf7  e7\n</code></pre>\ni just wrote an answer on how to use either keystone in python or msvc to assemble single instruction and disassemble it \nso please refe that answer HOW TO ASSSEMBLE SINGLE INSTRUCTIONS AND DISASSEMBLE IN ARM\n",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 26, 2018 at 7:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}