{
    "title": "Reverse engineering a golang binary file",
    "link": "https://reverseengineering.stackexchange.com/questions/15962/reverse-engineering-a-golang-binary-file",
    "content": "I compiled docker by myself with some modifications. I would like to perform some static analysis to the binary. Mostly to see which parts of the code take more memory, etc. It's on linux (elf). Any suggestion what free tools should I use? I don't have access to IDA.\nAnd I would something more specific than:\n<pre><code>size -A -d mydocker\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "10k",
    "tags": [
        "linux",
        "memory",
        "static-analysis",
        "elf"
    ],
    "user": "0x90",
    "time": "Jul 31, 2017 at 3:14",
    "comments": [],
    "answers_data": [
        {
            "content": "I'm afraid your intentions to find memory usage may need both static and dynamic analysis. Run-time events can cause more or less memory usage. I will write my general findings about reversing Go binaries, you can choose for your application-specific solution from below.\nThere is no decompiling tool available for Go language. Although according to this discussion you can identify high-level structures from Go binaries which mostly based on DWARF debugging information. \nYou can use conventional tools like objdump and GDB with Go run-time support. After installing Go toolkit:\n<pre><code>echo add-auto-load-safe-path /usr/share/go-1.6/src/runtime/runtime-gdb.py >> ~/.gdbinit\n</code></pre>\nFor sake of simplicity, I started to examine with functions example. I compiled functions example with standard build. Default build with Go compiler includes lots of DWARF information. You can see objdump source code-assembly intermix is really successful at using Go syntax imports, packages, and function representation. \n<pre><code>0000000000401000 <main.main>:\n\nfunc plusPlus(a, b, c int) int {\n    return a + b + c\n}\n\nfunc main() {\n  401000:       64 48 8b 0c 25 f8 ff    mov %fs:0xfffffffffffffff8,%rcx\n  401007:       ff ff\n  401009:       48 8d 44 24 d0          lea    -0x30(%rsp),%rax\n  40100e:       48 3b 41 10             cmp    0x10(%rcx),%rax\n  401012:       0f 86 f1 02 00 00       jbe    401309 <main.main+0x309>\n  401018:       48 81 ec b0 00 00 00    sub    $0xb0,%rsp\n    res := plus(1, 2)\n  40101f:       48 c7 c3 01 00 00 00    mov    $0x1,%rbx\n  401026:       48 c7 c0 02 00 00 00    mov    $0x2,%rax\n  40102d:       48 01 c3                add    %rax,%rbx\n  401030:       48 89 d8                mov    %rbx,%rax\n    fmt.Println(\"1+2 =\", res)\n  401033:       48 8d 1d 6e b3 0f 00    lea    0xfb36e(%rip),%rbx        # 4fc3a8 <go.string.*+0x3b0>\n...\n401159:       e8 82 97 05 00          callq  45a8e0 <fmt.Println>\n\n    res = plusPlus(1,2,3)\n  40115e:       48 c7 c3 01 00 00 00    mov    $0x1,%rbx\n  401165:       48 c7 c1 02 00 00 00    mov    $0x2,%rcx\n  40116c:       48 c7 c0 03 00 00 00    mov    $0x3,%rax\n  401173:       48 01 cb                add    %rcx,%rbx\n  401176:       48 01 c3                add    %rax,%rbx\n  401179:       48 89 d8                mov    %rbx,%rax\n    fmt. Println(\"1+2+3 =\", res)\n  40117c:       48 8d 1d 2d b2 0f 00    lea    0xfb22d(%rip),%rbx        # 4fc3b0 <go.string.*+0x3b8>\n</code></pre>\nIf you have opportunity to build the application from a source I strongly recommend to use -ldflags \"-w\" arguments as suggested at documentation \nYou can use GDB to debugging and reversing Go programs easily. User-defined functions couldn't found by GDB unless you build it with debug information but, you can use the main function to track program flow.\n<pre><code>gdb-peda$ list main.main\n9\n10 func plusPlus(a, b, c int) int {\n11     return a + b + c\n12 }\n13\n14 func main() {\n15     res := plus(1, 2)\n16     fmt.Println(\"1+2 =\", res)\n17\n18     res = plusPlus(1,2,3)\n</code></pre>\nI assume you build it with debug information: \n<pre><code>void main(void);\nvoid main.init(void);\nvoid main.main(void);\nvoid runtime.main(void);\nvoid runtime.main.func1(void);\nvoid runtime.main.func2(bool *);\n0x0000000000401000  main.main\n0x0000000000401320  main.init\n0x0000000000429a20  runtime.main\n0x000000000044aba0  runtime.main.func1\n0x000000000044abe0  runtime.main.func2\n0x0000000000456520  main\n</code></pre>\nYou can inspect functions and track their stack usage with help this blog post section about Go stack implementation. Set a breakpoint at the beginning of the function which you want to examine and runtime.morestack_noctxt for stack & runtime.mallocinit for heap allocations.  \nAnother method which is much easy is using pprof package you find relevant documentation here.\n",
            "votes": "7",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Mar 28, 2018 at 20:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">How can I apply it to a big binary as docker</span>",
                    "time": null
                },
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">I think dynamic stack allocation force us to do runtime analysis. It may be feasible to use pprof for changed parts. GDB scripting can be another solution but, I don't know how to use it in a such big application.</span>",
                    "time": null
                },
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">I care only on the binary size.</span>",
                    "time": null
                },
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">If you care only binary size you can use nm --print-size option.</span>",
                    "time": null
                },
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">yes but I want something with better graphics.</span>",
                    "time": null
                }
            ]
        }
    ]
}