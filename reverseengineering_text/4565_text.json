{
    "title": "Format of .chk firmware package on WGR614v7",
    "link": "https://reverseengineering.stackexchange.com/questions/4565/format-of-chk-firmware-package-on-wgr614v7",
    "content": "Note: I'm aware of the technical and legal implications of reverse-enginneering binaries.\nI have the firmware for a Netgear WGR614v7 router, in the form of a .chk file, coming from Netgear themselves, and I wish to unpack the file. My understanding is that a firmware .chk file is a header before a TRX image, and I've tried to untrx the ile I had sans header, or with header as well. Neither that nor <pre><code>binwalk</code></pre> succeeded. Two useful strings are seen very close to the beginning of the file:\n\nAH00I8\nU12H064T00_NETGEAR\n\nInspecting the file in a hex editor, I'm unable to find the TRX file signature (I was looking for ASCII <pre><code>HDR0</code></pre>). I also cannot find any sort of compression magic values, except fairly far into the file where they're not likely to signify the beginning of the actual content I'm looking for. \nAm I looking for the wrong filetypes? Is anything about this structure known that I haven't found yet?\nEdit: The firmware has been downloaded from Netgear's site. I tried chopping off various lengths but cannot find a reasonably-located compression or TRX header. The characteristic <pre><code>ff ff ff ff</code></pre> of IMG images used as a method of preventing a repetitive boot firmware is also not existent.\nEdit 2: I did some searching of my own, and found a decompression utility. When I chopped the file such that <pre><code>sqz</code></pre> had been the first characters, that utility seemed to find valid Huffman structures but incur a size mismatch. A result of the decompression yielded 11 bytes, while the program warned me:\n\n<pre><code>Warning: Unpacked file should be 7537274 bytes but is 396409921 bytes! at ./unpack.pl line 61, <STDIN> line 3.\n</code></pre>\n\nOf course, it could be that many kinds of data that is corrupt might be partially readable as huffman giving me strange results as seen here.\n",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "file-format",
        "firmware"
    ],
    "user": "nanofarad",
    "time": "Jun 9, 2014 at 19:56",
    "comments": [
        {
            "user": "nneonneo",
            "text": "Might be a newer or older version of the file format. Could you post a sample?\n",
            "time": null
        },
        {
            "user": "nanofarad",
            "text": "@nneonneo I edited the post with that info,\n",
            "time": null
        },
        {
            "user": "nneonneo",
            "text": "The SQZ utility you found does not appear to be for the same sort of SQZ file. The file format seems totally different.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The file begins:\n<pre><code>0000000: 4148 3030 4938 e66c 000e aa28 9835 0589  AH00I8.l...(.5..\n0000010: 3004 125a 1b39 65ff 47e4 b95c 0001 0014  0..Z.9e.G..\\....\n0000020: 5531 3248 3036 3454 3030 5f4e 4554 4745  U12H064T00_NETGE\n0000030: 4152 0000                                AR..\n</code></pre>\nThe reason for picking this size will soon become clear.\nThe first four bytes (<pre><code>AH00</code></pre>) are probably file magic. Googling just that string brings up this page, which has a detailed breakdown of a different firmware file with a similar structure.\nThe next four bytes are not described by the linked page. Reading them as a 32-bit big-endian value (BE32), though, you get 0x4938e66c = 1228465772, which is plausibly a recent UNIX timestamp (usually values from around 800,000,000 to 1,500,000,000). Indeed, it decodes to <pre><code>Fri Dec  5 08:29:32 2008 GMT</code></pre>, which is plausibly the build date of the hardware (and I note that the linked article has 0x481ac265 = <pre><code>Fri May  2 07:27:33 2008 GMT</code></pre>, which also seems plausible).\nThe next four bytes read as a BE32 value give 961064. The total filesize is 961116 bytes, so this is likely the payload size, leaving 52 bytes for the header (and thus explaining why I chose to show the first 52 bytes here).\nThe next 32 bytes are the MD5 sum of the payload as indicated by the linked page. I deleted the first 52 bytes and MD5 summed the result:\n<pre><code>983505893004125a1b3965ff47e4b95c  /tmp/fw.sqz\n</code></pre>\nwhich is exactly what the header contains.\nThe next two bytes are unknown.\nThe next two bytes are 0x0014, which is the length of the string that follows (including two padding NULs). While I'm not familiar with Netgear routers, I'm guessing this is a model/revision number for the hardware target.\nAnd there you go: that's the <pre><code>.chk</code></pre> file header.\n<pre><code>char magic[4];\nuint32_t timestamp; // UNIX timestamp\nuint32_t payload_size;\nchar md5sum[32];\nuint16_t unknown; // = 1 on all files seen so far\nuint16_t model_size;\nchar model[model_size];\n</code></pre>\n\nIn the original linked page, the payload was a plain ELF file. Unfortunately, in your firmware, the payload is some other kind of file, with the magic <pre><code>sqz</code></pre> (\"squeeze\"?). It's clearly compressed, but I can't tell what it's compressed with. For now, this will have to be an incomplete answer until someone figures out what the compression format is.\n",
            "votes": "3",
            "user": "nneonneo",
            "time": "Jun 9, 2014 at 17:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "nanofarad",
                    "text": "<span class=\"comment-copy\">I did some poking into the sqz format, could you please see edits?\\</span>",
                    "time": null
                }
            ]
        }
    ]
}