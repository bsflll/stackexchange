{
    "title": "Assembly- Using push and ESP-Register to store addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/8241/assembly-using-push-and-esp-register-to-store-addresses",
    "content": "I have found the following assembly lines presented in a tutorial which I do not understand:\n<pre><code> xor eax, eax      => clear, I know that, it makes eax = 0\n push eax          => push 0 on the stack\n push 0x68732f2f   => push \"//sh\" to the stack (the numbers are opcodes I guess, output of hexdump)\n push 0x6e69622f   => push \"/bin\" to the stack (again opcodes, representing \"/bin\" )\n mov ebx, esp      => put address of \"/bin//sh\\0\" into ebx, via esp\n ....\n</code></pre>\nMy question: \nWhy we put address of \"/bin//sh\" into ebx, via esp using the line mov ebx, esp for that ?\nI draw a sketch:\n<pre><code>         |                        |\n         |------------------------|<-----ESP (I know that ESP always points to the top)\n(a)      |  0x6e69622f  (\"//sh\")  |\n         |------------------------|\n(b)      |   0x68732f2f (\"/bin\")  |\n         |------------------------|\n(c)      |       0                |\n         |------------------------|\n</code></pre>\nHow I try to explain it to myself(I am not sure if it is correct, but I thought to think about a little bit before I ask in that forum here):\nESP is a 32-bit register such that it is large enough to comprise the addresses at (a), (b) and (c) (which I marked above).\nIs that right? I hope somebody can help me?\nbest regards,\n",
    "votes": "4",
    "answers": 2,
    "views": "9k",
    "tags": [
        "assembly",
        "esp",
        "register"
    ],
    "user": "user3097712",
    "time": "Feb 14, 2015 at 23:25",
    "comments": [],
    "answers_data": [
        {
            "content": "First of all, let me clarify this:\n<pre><code>ESP</code></pre> is a 32-bit register which contains a pointer to the stack.\nIt is not, by any means, big enough to <pre><code>comprise the addresses at [...]</code></pre>. It is just pointing at a memory location which holds <pre><code>a</code></pre>, <pre><code>b</code></pre>, and <pre><code>c</code></pre>.\n\nWhat your exploit does is push a string to the stack. Look at the <pre><code>/bin//sh</code></pre> hexadecimal representation:\n<pre><code>2f 62 69 6e 2f 2f 73 68\n</code></pre>\nAnd now look at your assembly:\n<pre><code>push 0x68732f2f\npush 0x6e69622f\n</code></pre>\nThis is not any kind of opcodes, but rather the ASCII representation of the string, pushed as double words (basically, pushes the string in less instructions)\nAn alternative way would be:\n<pre><code>push '/' ; same as push 0x2f\npush 'b' ; same as push 0x62\npush 'i' ; same as push 0x69\npush 'n' ; same as push 0x6e\npush '/' ; same as push 0x2f\npush '/' ; same as push 0x2f\npush 's' ; same as push 0x73\npush 'h' ; same as push 0x68\n</code></pre>\nBasically, it's doing the same as above, just in less instructions, by combining the ASCII codes together: <pre><code>6e69622f</code></pre> instead of <pre><code>2f</code></pre>, <pre><code>62</code></pre>, <pre><code>69</code></pre>, <pre><code>6e</code></pre> separated. It's also pushing a <pre><code>0</code></pre>, which is a terminator for a C-style string, so that the string ends there.\nNow, the stack has <pre><code>/bin//sh</code></pre>, and all you gotta do is call <pre><code>sys_execve</code></pre>, by doing an <pre><code>int 0x80</code></pre> (interrupt), which is the way Linux uses to make syscalls.\nSince the syscall ID for <pre><code>sys_execve</code></pre> is 11, you move <pre><code>11</code></pre> to <pre><code>al</code></pre> (lower part of <pre><code>eax</code></pre>), and put the first argument into <pre><code>ebx</code></pre>, which is a pointer to a string. And since <pre><code>ESP</code></pre> is pointing to the top of the stack, and the top of the stack contains the <pre><code>/bin//sh</code></pre> we pushed before, the exploit assembly means this:\n<pre><code>sys_execve(\"/bin//sh\");\n</code></pre>\nThere you go, exploited! :)\n",
            "votes": "6",
            "user": "rev",
            "time": "Feb 15, 2015 at 1:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for the good explanation. It helps me a lot to understand it.</span>",
                    "time": null
                },
                {
                    "user": "rev",
                    "text": "<span class=\"comment-copy\">@user3097712 no problem, be sure to ask me if I didn't explain any part properly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Its just a technique to embed strings in the exploit, as u can define them in a regular fashion, as u need their address to access them but in an exploit these addresses are dynamic not static or constants.\n",
            "votes": "0",
            "user": "Alok Saini",
            "time": "Feb 19, 2015 at 9:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}