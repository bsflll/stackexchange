{
    "title": "How to get meaning of flags by integer",
    "link": "https://reverseengineering.stackexchange.com/questions/19352/how-to-get-meaning-of-flags-by-integer",
    "content": "Assuming I have a syscall to <pre><code>open</code></pre>. \n<pre><code>man 2 open</code></pre> gives me info, that it requires 2 or 3 parameters \n<pre><code>int open(const char *pathname, int flags);\nint open(const char *pathname, int flags, mode_t mode);\n</code></pre>\nSo, my code runs and In my registers I have \n<pre><code>$rdi = 0x00007fffffffdb40 → \"/etc/init.d/\",\n$rsi = 0x0000000000000241,\n$rdx = 0x00000000000001c9\n</code></pre>\nHow and which flags is it using during the call? How will the dir (or file) be opened?\n\nI am looking at the man page. The possible flags are mentioned, but not their bit/value/integer being set by <pre><code>|</code></pre>'ing the flags together in source code.\nI continue at the man page and see above the header files, which define the constants. In this case I'd need to <pre><code>#include <sys/types.h> <sys/stat.h> <fcntl.h></code></pre>. However, in this files, I cannot find bits or integers, which <pre><code>sum</code></pre> or <pre><code>|</code></pre> up to the given flags (<pre><code>$rsi = 0x241</code></pre>, <pre><code>577</code></pre> in decimal, <pre><code>1001000001</code></pre> in binary) I cannot see any pattern.\n\nQuestion: Do I oversee something? Do I need to look somewhere else? Where are those bits described?\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "compilers"
    ],
    "user": "Joel",
    "time": "Sep 15, 2018 at 19:40",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "You cant. Flags are defined with preprocessor <pre><code>#define</code></pre>. So compiler will replace that definition with integer. Only enumerations and structures can shows values.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The flags are constants drawn from here:\nhttps://github.com/torvalds/linux/blob/master/tools/include/uapi/asm-generic/fcntl.h\nThey can change but very rarely. \n\nApplying this we can see that \n<pre><code>0x241 == O_WRONLY | O_CREAT | O_TRUNC</code></pre>\n",
            "votes": "4",
            "user": "Abigail",
            "time": "Sep 16, 2018 at 1:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Joel",
                    "text": "<span class=\"comment-copy\">For me it is not obvious to get from <code>O_CREAT 00000100</code> | <code>O_WRONLY 00000001</code> | <code>O_TRUNC\t00001000</code> to 0x241 ? What number-system do they use in this header file? Do you maybe have a reference on how to read those numbers?</span>",
                    "time": null
                },
                {
                    "user": "Abigail",
                    "text": "<span class=\"comment-copy\">literals prefixed with <code>0</code> are octals, so <code>0100</code> is 64 or 0x40. <code>01000</code> is 0x200, <code>1</code> is 1, so we're 0x40 + 0x200 + 1 = 0x241.</span>",
                    "time": null
                },
                {
                    "user": "Joel",
                    "text": "<span class=\"comment-copy\">thanks, makes sense now. For everyone else might read this, here is additional info: <a href=\"https://stackoverflow.com/questions/37326133/why-fcntl-flag-values-are-defined-in-octal-format-how-this-function-works-fo\" title=\"why fcntl flag values are defined in octal format how this function works fo\">stackoverflow.com/questions/37326133/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}