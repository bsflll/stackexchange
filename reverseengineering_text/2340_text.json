{
    "title": "How to design opaque predicates?",
    "link": "https://reverseengineering.stackexchange.com/questions/2340/how-to-design-opaque-predicates",
    "content": "Opaque predicate are used to disrupt automatic analysis of the binary code by reaching the limits of what can do an analyzer.\nCan somebody give an example (or a few examples) of an opaque predicate found in a real-life case ? And, what are the methods used to build new opaque predicates ?\n",
    "votes": "6",
    "answers": 3,
    "views": "2k",
    "tags": [
        "obfuscation"
    ],
    "user": "perror",
    "time": "Jun 26, 2013 at 11:45",
    "comments": [],
    "answers_data": [
        {
            "content": "One opaque predicate I found in a malware sample years ago:\n<pre><code>SetErrorMode(1024);\nif ( SetErrorMode(0) == 0 )\n  SayHiToEmulator();\nDoRealStuff();\n</code></pre>\nAs for the other question, how to build new opaque predicates, I think it depends on the kind of analyser you want to disrupt. It's different to disrupt a static code analyser designed to find bugs than disrupting an emulator designed to mimic the environment where a malware should run in.\nBut, let's say that you want to disrupt malware emulators: you can build a list of APIs from the most common libraries (kernel32.dll, advapi32.dll, user32.dll, etc...), create a batch of proves where you execute those APIs changing the arguments and checking the return values and generated exceptions, if any, and save the results. Then check the results of such APIs and find candidates: For example, a return value related to the input to such APIs is a good candidate for an opaque predicate. Specific conditions (exceptions or return values) that only happen rarely and with certain specific inputs are even better. Just some ideas...\n",
            "votes": "5",
            "user": "joxeankoret",
            "time": "Jun 26, 2013 at 12:29",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Manufacturing Cheap, Resilient, and Stealthy Opaque Constructs,\nACM Principles of Programming Languages (POPL'98), January 1998.\nThe article has 300+ citations. The paper is a good text on the topic of opaque predicates, then follow-up on the citations to look for newer articles that refer to it.\nLink: Manufacturing Cheap, Resilient, and Stealthy Opaque Constructs\n",
            "votes": "2",
            "user": "Cameron Lowell Palmer",
            "time": "Jun 17, 2021 at 15:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I do not know any real-life opaque predicate. But there is a very constructive predicate obfuscator in the paper Limits of Static Analysis for Malware Detection. It is proved to be NP-hard for precise static analysis.\n",
            "votes": "1",
            "user": "Ta Thanh Dinh",
            "time": "Jul 1, 2013 at 8:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}