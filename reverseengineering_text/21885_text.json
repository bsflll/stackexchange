{
    "title": "In reverse engineering, what does it mean to \"patch a file\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/21885/in-reverse-engineering-what-does-it-mean-to-patch-a-file",
    "content": "I've been solving some crackmes, and every file that I download, in the \"instructions\" says: \"Patching is obviously not allowed\". What does that mean? And how does one patch a file?\n",
    "votes": "5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "patching",
        "patch-reversing",
        "crackme"
    ],
    "user": "unc4nny",
    "time": "Aug 14, 2019 at 3:24",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "In simple term, patching is as same as editing a file.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. Given the context, I guess the idea is to no allow \"cheating\" by making ones cracking job easier using well-established techniques? I am not sure how to interpret it, though. Is patching not allowed in the executable image on disk? Not anywhere? What about automated kinds of instrumentation or techniques such as hooking, <pre><code>LD_PRELOAD</code></pre> and friends? ...\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "@0xC0000022L generally it means a submitted solution to the crackme challenge that relies on patching (static file modification) won't be accepted by the crackme author. I think DLL injection and such usually is ok unless specifically stated by the crackme author that it isn't. (I've had a lot of success using <pre><code>LD_PRELOAD</code></pre>)\n",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "To OP, can you share the crackme link?\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "@0xC0000022L No problem, and your right, <pre><code>LD_PRELOAD</code></pre> is a beautiful thing. I forgot to mention that the reason it is usually acceptable is that if DLL injection is something the crackme author is concerned about, they will provide a statically-linked binary rather than saying \"No LD_PRELOAD\".\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Following quote comes from unix.stackexchange:\n\nTo patch a file means to modify it, with the connotation that the modification is generally small.\n\nSo, patching the executable is a process of changing its content usually performed for changing its original behaviour.\nPatching is obviously not allowed means that the author of a particular crackme wants you to crack it without modifying its content. For instance, consider a simple program:\n<pre><code>ask_user_for_password();\nread_input();\nif (isPasswordCorrect())\n    printf(“Congratulations, you have cracked it!\n”);\nelse\n    printf(“Wrong password! Try again!\n”);\n</code></pre>\nOf course one can patch it so that it always prints the \"Congratulations [...]\" message, but the point of this very simple crackme is to actually find that password somehow (by finding decryption key for example).\nGenerally, to patch a file, you want to:\n\nFind the place / instruction you want to change (it may be <pre><code>jnz</code></pre> to <pre><code>jz</code></pre> as @Axel Munoz said, but it may be a <pre><code>jmp</code></pre> to the location containing the code you want to be executed as well). \nFind out what is the machine code representing the instruction you want to put there - it can be done by first compiling the program written in assembly and then disassembling it. If you are working on x86 architecture, you can use this site as well.\nOpen the binary in a hex editor, find the offset where you want to put your code and just paste the machine code you obtained in the previous step.\n",
            "votes": "4",
            "user": "bart1e",
            "time": "Aug 13, 2019 at 16:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The term \"patching a [binary]\" means to modify the instruction set. For example if there is a conditional jump that requires some memory to be set to a specific value, instead of modifying the memory, which might be the objective of the crackme, I could simply patch the binary to always take that jump (either by changing the condition of the jump from <pre><code>jnz</code></pre> to <pre><code>jz</code></pre>). Patching through a debugger easily allows me to change the instruction, save the new binary, and then run it.\nHere is some more info.\n",
            "votes": "-1",
            "user": "0xC0000022L",
            "time": "Aug 14, 2019 at 10:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Croll",
                    "text": "<span class=\"comment-copy\">You are pretty inaccurate by saying that patching means modifying instruction set, but link is good.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I honestly never understood the point of <i>inverting</i> the condition (<code>jnz</code> to <code>jz</code>). It seems odd to change one conditional jump into another conditional jump when an altogether unconditional jump exists ...</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">@0xC0000022L It may be useful when there is a bug in the program and you want to invert an if-else block for example to fix it. But I agree it’s rather rare case.</span>",
                    "time": null
                },
                {
                    "user": "Axel Munoz",
                    "text": "<span class=\"comment-copy\">@Croll I agree it's not the best way to phrase, how would you put it?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">I know what you mean (modifying code/logic in the binary), but \"instruction set\" refers to the set of instructions recognized by a CPU and is tied together with CPU architecture. For example the x86 instruction set is different from the MIPS instruction set</span>",
                    "time": null
                }
            ]
        }
    ]
}