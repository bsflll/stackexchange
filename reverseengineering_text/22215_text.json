{
    "title": "Encoding method of float",
    "link": "https://reverseengineering.stackexchange.com/questions/22215/encoding-method-of-float",
    "content": "I'm reversing this game and got stuck. To make it simple, You have some amount of coins in the game (<pre><code>float</code></pre> or <pre><code>double</code></pre>) and you can spend it on some things. I started sniffing network traffic and noticed that with different amount of coins, only 2 bytes change.\nI've bought different amount of coins and copied those two bytes:\n<pre><code>(5)\n\n1111 0100 0000 0011 (F4 03)\n\n---------------------------\n\n(6)\n\n1101 1000 0000 0100 (D8 04)\n\n---------------------------\n\n(7)\n\n1011 1100 0000 0101 (BC 05)\n\n---------------------------\n\n(8)\n\n1010 0000 0000 0110 (A0 06) \n\n---------------------------\n\n(9)\n\n1000 0100 0000 0111 (84 07)\n\n---------------------------\n\n(10)\n\n1110 1000 0000 0111 (E8 07)\n\n\n(11)\n\n1100 1100 0000 1000 (CC 08)\n\n---------------------------\n\n(12)\n\n1011 0000 0000 1001 (B0 09)\n\n---------------------------\n\n(13)\n\n1001 0100 0000 1010 (94 0a)\n\n---------------------------\n\n(14)\n\n1111 1000 0000 1010 (F8 0a)\n\n---------------------------\n\n(15)\n\n1101 1100 0000 1011 (DC 0B)\n\n---------------------------\n(16)\n\n1100 0000 0000 1100 (C0 0C)\n\n---------------------------\n\n(17)\n\n1010 0100 0000 1101 (A4 0D)\n\n---------------------------\n\n(18)\n\n1000 1000 0000 1110 (88 0E)\n\n---------------------------\n\n(19)\n\n1110 1100 0000 1110 (EC 0E)\n\n---------------------------\n\n(20)\n\n1101 0000 0000 1111 (D0 0F)\n</code></pre>\nFirst line represents the amount of coins that I have, and the second is it's corresponding bytes in hex from wireshark. I don't know which encoding method is used for this. Maybe someone has some experience and knows the algorithm behind it. Thanks. \nUpdate\n<pre><code>8\n\n1010 0000 0000 0110 (A0 06) \n\n-----------------------------\n\n\n16\n\n1100 0000 0000 1100 (C0 0C)\n\n--------------------------\n\n256\n\n1100 1000 0000 0001 (C8 01)\n\n----------------------------\n\n512\n\n1001 0000 0000 0011 (90 03)\n\n-----------------------------\n\n\n2048\n\n1100 0000 0000 1100 (C0 0C)\n\n----------------------------\n\n4096\n\n1000 0000 0001 1001 (80 19)\n\n-----------------------------\n\n8192\n\n1000 0000 0011 0010 (80 32)\n\n------------------------------\n</code></pre>\nNotice that <pre><code>2048</code></pre> and <pre><code>16</code></pre> have same code. I can't understand why this happened, how does it differentiate <pre><code>16</code></pre> and <pre><code>2048</code></pre>?\nDifferent amount of coins can be spend in different rooms, for example <pre><code>8</code></pre> and <pre><code>16</code></pre> are spend in one room, it has maximum limit of <pre><code>30</code></pre>. <pre><code>256</code></pre> and <pre><code>512</code></pre> on room number two and the rest in the room number three. When I enter into a room with different amount of coins all I'm looking is the differences between bytes in the same room, different rooms have different bytes in them which as I understand describe the room itself. Is it possible that I'm missing some bytes?\nBut when I enter room number three with different coins <pre><code>2048</code></pre> <pre><code>4096</code></pre> <pre><code>8192</code></pre> these are the only bytes that are changing.\nUPDATE 2\n<pre><code>64   - 00110010\n128  - 01100100\n1024 - 1010000000000110\n</code></pre>\nSo we have\n<pre><code>  8     1010000000000110\n  16    1100000000001100\n  32 ?\n  64    00110010\n 128    01100100\n 256    1100100000000001\n 512    1001000000000011\n1024    1010000000000110\n2048    1100000000001100\n4096    1000000000011001\n8192    1000000000110010\n</code></pre>\nI can't get <pre><code>32</code></pre> since I could not enter none of the rooms with that value.\n",
    "votes": "1",
    "answers": 1,
    "views": "188",
    "tags": [
        "disassembly",
        "encodings",
        "networking",
        "float",
        "wireshark"
    ],
    "user": "Ojs",
    "time": "Oct 5, 2019 at 15:01",
    "comments": [
        {
            "user": "w s",
            "text": "Do you have a record for, for example, 1 coin and 300 coins ?\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "yeah we probably need a  bigger range. Also, can you find any non-integer values?\n",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "<pre><code>300</code></pre> is <pre><code>b0 ea</code></pre> (Can't get <pre><code>1</code></pre> coin since minimal value is 5) The values are not integers since I can have <pre><code>float</code></pre>s too, I  assume that even integer values like 1, 2, 3... are represented as floats 1.0, 2.0 3.0 etc.\n",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "But if you need any range of floats I can provide them too\n",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "Some more powers of 2 might help. e.g.  32, 64, 128, 256, 512, ...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This isn't a complete answer but is a bit more than fits in a comment.\nThere's definitely a pattern in the powers of 2.  They all have exactly 4 bits set.  The high bit is always 1 and the lower 15 bits seem to be the same bit pattern (11001) but rotated to different positions. Try filling in the gaps (32, 64, 128, 1024) and show in binary without spaces to make it clearer.\n<pre><code>   8    1010000000000110\n  16    1100000000001100\n  32    ?\n  64    ?\n 128    ?\n 256    1100100000000001\n 512    1001000000000011\n1024    ?\n2048    1100000000001100\n4096    1000000000011001\n</code></pre>\nThe duplicates 16 & 2048 you observed suggest that you are missing a relevant byte or bytes.  I'll also conjecture that 1024 is the same as 8.\n\nEdit: The extra information that there is a minimum increment of 0.01 combined with what happens when doubling values strongly indicates that these are not floating point numbers but are in fact fixed point with a scaling factor of 100.\nIf you convert the number of coins to a decimal, multiply by 100 and convert to binary you get -\n<pre><code>   8    8.00    800 00000000001100100000\n  16   16.00   1600 00000000011001000000\n  32   32.00   3200 00000000110010000000\n  64   64.00   6400 00000001100100000000\n 128  128.00  12800 00000011001000000000\n 256  256.00  25600 00000110010000000000\n  ..\n4096 4096.00 409600 01100100000000000000\n</code></pre>\nAs I was hoping, we see the 11001 pattern again.\nTo me this confirms that we are on the right lines but that there must be information carried in bytes other than the two you identified since 16 bits isn't enough to cover the range and resolution of possible values.\nTo help find these, I'd now suggest trying the following pairs of values -\n<pre><code>20971.51 and 20971.52\n10485.75 and 10485.76\n 5242.87 and  5242.88\n 2621.43 and  2621.44\n 1310.71 and  1310.72\n  655.35 and   655.36\n  327.67 and   327.68\n  163.83 and   163.84\n</code></pre>\nWhen reporting the differences it would be useful to have the neighbouring couple of bytes each side too, even if they don't change.\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Oct 30, 2019 at 10:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ojs",
                    "text": "<span class=\"comment-copy\">You were right! See the updated answer</span>",
                    "time": null
                }
            ]
        }
    ]
}