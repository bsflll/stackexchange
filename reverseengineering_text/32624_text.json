{
    "title": "reverse engineer a 32bit windows executable for a password that unlocks secret message",
    "link": "https://reverseengineering.stackexchange.com/questions/32624/reverse-engineer-a-32bit-windows-executable-for-a-password-that-unlocks-secret-m",
    "content": "I need to find a password to access the secret:\n<pre><code>❯ strings -n 10 win32.exe\n!Tip: Ida Free can decompile to c++!\n.rdata$voltmd\n.rdata$zzzdbg\nBad password length!\nWrong password!\nCongratulations! The secret is\nThere is a secret hiding in this program. To get it, you must enter the correct password....\n</code></pre>\nI've already tried to decompile it to something more readable:\n(main function)\n<pre><code>int start()\n{\n  char v1; // bl\n  char Buffer[2]; // [esp+8h] [ebp-114h] BYREF\n  char v3; // [esp+Ah] [ebp-112h]\n  char v4; // [esp+Bh] [ebp-111h]\n  unsigned __int8 v5; // [esp+Ch] [ebp-110h]\n  unsigned __int8 v6; // [esp+Dh] [ebp-10Fh]\n  char v7; // [esp+Eh] [ebp-10Eh]\n  unsigned __int8 v8; // [esp+Fh] [ebp-10Dh]\n  char v9; // [esp+10h] [ebp-10Ch]\n  void *lpBuffer; // [esp+108h] [ebp-14h]\n  char v11[2]; // [esp+10Ch] [ebp-10h]\n  char v12; // [esp+10Eh] [ebp-Eh]\n  char v13; // [esp+10Fh] [ebp-Dh]\n  char v14; // [esp+110h] [ebp-Ch]\n  char v15; // [esp+111h] [ebp-Bh]\n  char v16; // [esp+112h] [ebp-Ah]\n  char v17; // [esp+113h] [ebp-9h]\n  char v18; // [esp+114h] [ebp-8h]\n  char v19; // [esp+115h] [ebp-7h]\n  unsigned __int16 i; // [esp+118h] [ebp-4h]\n\n  lpBuffer = aVTomhleProgram;\n  WriteStringToConsole(aVTomhleProgram);\n  if ( !ReadInput(Buffer) )\n    return WrongPasswordLength();\n  Sleep(0xFAu);\n  if ( (int)GetStringLength(Buffer) > 10 )\n    return WrongPasswordLength();\n  if ( v9 )\n    return WrongPassword();\n  v18 = ~v7;\n  v15 = ((int)v6 >> (v8 % 5) << (v8 % 5)) + (v5 & 0xF);\n  v12 = 4 * v3;\n  v17 = 2 * v8 - *((_BYTE *)lpBuffer + 9);\n  v13 = v8 + v4;\n  Sleep(0xFAu);\n  v11[0] = Buffer[0] + 23; // we need to match the v11[0] to byte_402024[0] -> 0x6A - 23 == 0x53 -> 'S'\n  v14 = (v6 & 0xF) + ((int)v5 >> (v8 % 5) << (v8 % 5));\n  v12 -= 2 * v3;\n  v16 = Buffer[0] - v3;\n  v1 = Buffer[1];\n  v11[1] = ConvertStringToInt(a96) ^ v1; // ConvertStringToInt(a96) results in Ox60 ^ byte_402024[1](0x0EC) -> hex(0x0EC ^ 0x60) == 0x8c ????\n  Sleep(0xFAu);\n  v19 = v9;\n  for ( i = 0; i < 0xAu; ++i )\n  {\n    if ( v11[i] != byte_402024[i] )\n      return WrongPassword();\n  }\n  Sleep(0xFAu);\n  return GetSecret(Buffer);\n}\n</code></pre>\nimportant constants:\n<pre><code>.data:00402024 byte_402024     db 6Ah                  ; DATA XREF: start+295↑r\n.data:00402025                 db 0ECh\n.data:00402026                 db  64h ; d\n.data:00402027                 db  96h\n.data:00402028                 db 0FDh\n.data:00402029                 db  7Bh ; {\n.data:0040202A                 db  21h ; !\n.data:0040202B                 db    6\n.data:0040202C                 db  5Fh ; _\n.data:0040202D                 db    0\n.data:0040202E                 db    0\n.data:0040202F                 db    0\n\n\n.data:004021F4 a96             db '96',0 \n</code></pre>\nI think that passphrase needs to match the <pre><code>char[12]</code></pre> <pre><code>byte_402024</code></pre> after all the operations. I've managed to find the first character of the passphrase (I think) which is S. But the second character seems to be weird, It should be 0x8C, but this can't be converted to Unicode or ASCII. The creator gave me a hint that the passphrase can be made of any bytes, not only text.\n",
    "votes": "2",
    "answers": 1,
    "views": "325",
    "tags": [
        "windows",
        "executable"
    ],
    "user": "schnitzel",
    "time": "Feb 11 at 16:38",
    "comments": [
        {
            "user": "AJM",
            "text": "This is intriguing. Is this part of an alternate reality game? Something like Cicada 3301?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The decompiler got the local stack params a little wrong, it seems you have two consecutive buffers of size 10 on the stack. Buffer and lpBuffer respectively. Now you also have a buffer of size 10 in the data segment <pre><code>.data:00402024 byte_402024</code></pre>. You have to carefully follow the calculations to each byte to succeed in the for loop that compares <pre><code>v11[i] != byte_402024[i]</code></pre>.\n",
            "votes": "1",
            "user": "shluvme",
            "time": "Feb 7 at 19:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}