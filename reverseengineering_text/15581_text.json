{
    "title": "I have a question about SEH Overwrite",
    "link": "https://reverseengineering.stackexchange.com/questions/15581/i-have-a-question-about-seh-overwrite",
    "content": "I am trying SEH Overwrite for vulnerable test programs.\nHowever, overwriting the RET and SEH chains through 41414141 (input value) does not cause the EIP to run as 41414141.\nThe picture is that the security cookie function is normally executed even though I overwrote the SEH Chain with 41414141.\nCould you advise me on this?\nI have attached the assembly code here.\nlink : https://pastebin.com/ic9bzw20\nThe picture overrides the SEH Chain with 41414141, but is where the Security cookie function is executed.\n\nThanks.\n",
    "votes": "0",
    "answers": 2,
    "views": "853",
    "tags": [
        "exploit",
        "seh"
    ],
    "user": "khm11903",
    "time": "Aug 20, 2017 at 7:02",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "If there is no legal concern, please share program with us.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The SEH overwrite attack requires that the function has registered an SEH handler.  The SEH handler address exists below the stack cookie and return address.  If you've overwritten the return address then you've written too many data.\nThe chain's integrity will be checked, and there must be executable memory at the handler address (i.e. 0x41414141) for the handler to execute.  In modern Windows, the address is checked before the transfer will occur, so you won't see any exception at that address if it's not valid.  It just won't be reached.\n",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Jun 19, 2017 at 18:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "khm11903",
                    "text": "<span class=\"comment-copy\">Thank you for your reply. I am currently testing on Windows XP. What should I identify to solve the problem?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">after overwriting the SEH, you need the function to raise an exception instead of returning normally.  If you can't achieve that, then the overwrite won't have any effect.</span>",
                    "time": null
                },
                {
                    "user": "khm11903",
                    "text": "<span class=\"comment-copy\">I saw the answer late! Thank you for your help.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are two things you must check:\n\nYou overwritten exception handler but, is there any exception occurs?\nAre there any protection mechanism active for exception handlers?\n\nFor first one, most easy exception which you can trigger and not caught until your handler is obviously access violation. You can try to trigger an exception with overwrite a value which referenced before stack cookie checked. Try to overwrite as long as possible for increasing your chance.\nThere may be another methods like overwriting some variables and structures but not overwriting stack cookie depending your example. Most of the times compiler arranges overflowing buffers close to stack cookie.\nFor second one, there may be SafeSEH on and off modules loaded in program memory. But, it is not matter for this stage. Despite SafeSEH, SEHOP (Structured Exception Handling Overwrite Protection) may be blocking program to access exception handler. If you done all tests on Windows XP most probably your problem is not SEHOP. I couldn't find proper resources if Microsoft published any update including SEHOP for Windows XP, last time I checked there is no SEHOP support for Windows XP.\n\nSEHOP specifications need two things to be assured according to this article:\n\nEach SEH structure points to the next structure.\nLast one contains a specific handler pointing to ntdll!_except_handler4\n",
            "votes": "1",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Aug 19, 2017 at 12:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}