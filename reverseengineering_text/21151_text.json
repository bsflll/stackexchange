{
    "title": "How to split ARM code/data from binary in Inmarsat Isatphone Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/21151/how-to-split-arm-code-data-from-binary-in-inmarsat-isatphone-pro",
    "content": "I'm analyzing the 3 binaries for updating firmware to the Inmarsat Isatphone Pro phone. Additionally, I'm following the Groundworks Technologies paper, and attempting to recreate their work as a learning exercise.\nIt was explained that in both File1.bin and File2.bin there was both ARM926EJ-S code and Blackfin DSP code combined. I'm interested in looking at the ARM code, but am not clear on how to separate one from another. Using binja and Ghidra at the moment...\nHow can the ARM code get isolated, and what's the best way to decompile down to seeing functions like RegisterATCmdHook() and RegisterPendingATCmdHook()?\nPaper is available here: https://uploadfiles.io/2l0f9ulc\n",
    "votes": "0",
    "answers": 1,
    "views": "488",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "arm",
        "ghidra"
    ],
    "user": "Walter Christie",
    "time": "Apr 15, 2019 at 1:57",
    "comments": [],
    "answers_data": [
        {
            "content": "Once I solved the opposite problem: to collect Blackfin code as memory dump and load it into IDA. To solve your issue you can just consider DSP code as a data using memory chunk description from here\n",
            "votes": "0",
            "user": "Igor Matyuh",
            "time": "Apr 15, 2019 at 8:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Walter Christie",
                    "text": "<span class=\"comment-copy\">Yes, I have been looking at this paper, but having trouble with this portion: \"After removing the header, two resulting binary Ô¨Åles can be ARM-disassembled by setting the correct base address, which can be deduced from the respective headers\"  How the heck do they expect that to be done?</span>",
                    "time": null
                },
                {
                    "user": "Igor Matyuh",
                    "text": "<span class=\"comment-copy\">I can't publish screenshot in my comment. Try to open File1.bin in IDA using \"ARM Little-endian\" CPU , \"ROM start address = 0x04C00000\", \"Loading address = 0x04C00000\" and \"File offset=0x50\" settings.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@IgorMatyuh just put the screenshot in your post</span>",
                    "time": null
                },
                {
                    "user": "Walter Christie",
                    "text": "<span class=\"comment-copy\">@IgorMatyuh: Now i'm getting somewhere, your last got me seeing the right stuff. So basically, the Blackfin firmware is 0x08000000 -&gt; 0x05040000, with the ARM firmware being 0x04C00000 -&gt; 0x04000000. This matches what the Groundworks paper had. The question then is - how did they figure out this memory map? Are there ASCII strings that indicate this?</span>",
                    "time": null
                }
            ]
        }
    ]
}