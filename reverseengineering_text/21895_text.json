{
    "title": "GHIDRA: How to load symbols from a text (map) file",
    "link": "https://reverseengineering.stackexchange.com/questions/21895/ghidra-how-to-load-symbols-from-a-text-map-file",
    "content": "I'm having trouble loading symbols for a very old Delphi-7 EXE.  I posted a separate question regarding loading the DBG file symbols.  Another approach would be to convert the debug symbols (available in a MAP text file) into some other text format and load it.  I see references in the GHIDRA ticketing system to that sort of thing (e.g. here) but I cannot find those actions anywhere in my GHIDRA IDE.\nGuidance about where in the GUI to locate those features (and the needed file format) would be greatly appreciated.  Perhaps I need to install some optional component (I just unzipped GHIDRA 9.0.4 onto my Fedora-30 system).\nHere is my related question.\n",
    "votes": "4",
    "answers": 2,
    "views": "7k",
    "tags": [
        "ghidra",
        "debugging-symbols"
    ],
    "user": "Charlie Butterfield",
    "time": "Nov 29, 2020 at 13:03",
    "comments": [
        {
            "user": "user3288107",
            "text": "Symbols such as textual encoding? Such as ASCII or UTF-8?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It's not certain that the particular map file you have is supported out of the box, but you should be able to use the Script Manager from the Window menu in Ghidra (in the Code Browser!).\nA good start for your endeavor would likely be the <pre><code>Ghidra/Features/Python/ghidra_scripts/ImportSymbolsScript.py</code></pre> script aka <pre><code>ImportSymbolsScript</code></pre> (from the Script Manager).\nThe description of this script is:\n\nImportSymbolsScript.py\nÂ Imports a file with lines in the form \"symbolName 0xADDRESS\"\n",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Sep 9, 2020 at 21:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Wow that 'ImportSymbolsScript' helped. I 'turned down' that mapfile from\n<pre><code>...\n  Address         Publics by Value\n\n 0001:0000       byte_0\n 0001:001A       start\n 0001:00D1       __nomain\n 0001:00D8       _fclose\n 0001:01DA       __fsopen\n...\n</code></pre>\ninto:\n<pre><code>0001:0000       byte_0\n0001:001A       start\n0001:00D1       __nomain\n0001:00D8       _fclose\n0001:01DA       __fsopen\n0001:0214       _fopen\n0001:0234       __close\n...\n</code></pre>\n... and modded ImportSymbolsScript.py in GHIDRA 'basic editor' like this:\n<pre><code># Imports a file with lines in the form \"0xSEGMENT:0xADDRESS symbolName\"\n# @category Data\n# @author \n\nf = \"c:\\Tools\\!Temp\\Portable_VB6\\Vs6sp6B\\setupsp6.map.txt\"\n  # f.askFile(\"Give me a file to open\", \"Go baby go!\")\n\n  # for line in file(f.absolutePath):  # note, cannot use open(), since that is in GhidraScript\nfor line in file(f):  # note, cannot use open(), since that is in GhidraScript\n\n    pieces        = line.split()\n    (segm,offset) = pieces[0].split(\":\")\n    segm          = \"1000\" # dirty hack !!!\n    address       = toAddr(long(segm + offset, 16))\n    \n    print \"creating symbol\", pieces[1], \"at address\", address\n    createLabel( address, pieces[1], False )\n</code></pre>\nBasically changes are:\n\nChanged the input order for pieces[]\nAdded support for segment offset\nHard coded file path for better workflow when modding/debugging the script (f = ...)\nAdded that <pre><code>\"1000\" +</code></pre> part into toAddr() to simulate the need segment offset \"1000:...\"\n\nWell it worked !!!\n:)\nBEFORE running the script:\n\nAFTER:\n",
            "votes": "1",
            "user": "Nadu",
            "time": "Nov 27, 2020 at 22:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}