{
    "title": "Data moved after program rebase",
    "link": "https://reverseengineering.stackexchange.com/questions/18956/data-moved-after-program-rebase",
    "content": "Consider the following piece of code:\n<pre><code>.text:00F74B42 call    sub_12D1130\n.text:00F74B47 mov     eax, dword_15A0C80\n</code></pre>\nNow, I want to add a sanity check but as I don't have enough space to do that I remove \"useless\" call instruction and move everything up by 5 bytes.\nSo I end up with:\n<pre><code>.text:00F74B42 mov     eax, dword_15A0C80\n.text:00F74B47 test    eax, eax \n.text:00F74B49 jz      loc_xyz\n</code></pre>\nUnfortunately when my program gets rebased to different virtual address, <pre><code>dword_15A0C80</code></pre> is not correctly updated, instead, bytes at <pre><code>B47</code></pre> - <pre><code>B4B</code></pre> are.\nI understand that <pre><code>dword_15A0C80</code></pre>'s offset at <pre><code>00F74B47</code></pre> is stored somewhere so when <pre><code>.data</code></pre> segment gets a new virtual address it's updated.\nThe question is where and how to search for it quickly using IDA for instance?\n",
    "votes": "1",
    "answers": 1,
    "views": "139",
    "tags": [
        "ida",
        "disassembly",
        "x86"
    ],
    "user": "kurt hectic",
    "time": "Aug 1, 2018 at 15:35",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "What do you mean by removing call instruction? Did you change it to <pre><code>nop</code></pre>?\n",
            "time": null
        },
        {
            "user": "kurt hectic",
            "text": "@Biswapriyo as you can see I gained 5 bytes by removing \"call    sub_12D1130\" which allowed me to use test    eax, eax ( 2 bytes ) and jz      loc_xyz ( 3 bytes )\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I've come to answer my own question just as a future reference.\nAs I was not able to find such <pre><code>dword_15A0C80</code></pre>'s reference in the relocation table, I made a simple crawler. It took into consideration all <pre><code>dword_15A0C80</code></pre> occurrences and theirs last bytes that were not too far from each other which basically got me to one result pretty much right away. Note, that it was int16 occupying just 2 bytes, basically just an offset to subroutine which didn't seem significant in any way to me.\nThanks to freenode:##asm:Jester01 for pointing me the right direction.\n",
            "votes": "1",
            "user": "kurt hectic",
            "time": "Aug 2, 2018 at 20:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Well done! Answering your own questions is actually encouraged here.</span>",
                    "time": null
                }
            ]
        }
    ]
}