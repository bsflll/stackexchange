{
    "title": "Using PyDBG how to find in which loaded module callee functions is present",
    "link": "https://reverseengineering.stackexchange.com/questions/8098/using-pydbg-how-to-find-in-which-loaded-module-callee-functions-is-present",
    "content": "Is there any quick/ faster way to find , any address resides in which loaded module.\nFor example from stack if I have ret address of any api. I want to check from which module actually that function was get called ??\n",
    "votes": "0",
    "answers": 1,
    "views": "805",
    "tags": [
        "debuggers",
        "debugging",
        "python"
    ],
    "user": "Dev.K.",
    "time": "Jan 26, 2015 at 21:33",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>from pydbg import *\nfrom pydbg.defines import *\n\ndef handler_breakpoint (pydbg):   \n   if pydbg.first_breakpoint:\n    dbg.bp_set(dbg.func_resolve(\"user32\",\"SendMessageW\"))\n    return DBG_CONTINUE\n   retaddr = dbg.get_arg(0,dbg.context)\n   modname = dbg.addr_to_module(retaddr).szModule   \n   print \"Calling Module and Return Address %25s\\t%08x\" % (modname,retaddr)\n   return DBG_CONTINUE\n\ndbg = pydbg()\ndbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)\ndbg.load(\"c:\\windows\\system32\\calc.exe\")\npydbg.debug_event_loop(dbg)\n</code></pre>\nresult\n<pre><code>Calling Module and Return Address              comctl32.dll     773f2883\nCalling Module and Return Address              comctl32.dll     773f2883\nCalling Module and Return Address                USER32.dll     7e4269ed\nCalling Module and Return Address                USER32.dll     7e4269fa\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Jan 27, 2015 at 8:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}