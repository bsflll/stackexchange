{
    "title": "Android Reverse Engineering Network Traffic Stack Trace",
    "link": "https://reverseengineering.stackexchange.com/questions/18607/android-reverse-engineering-network-traffic-stack-trace",
    "content": "Lets say an Android application sends out a traffic out to the server and expects a Json Response\nRequest:\n<pre><code>https://server:port/userid=user1&token=randomstring7345\n</code></pre>\nWe want to replicate the traffic using python library now, the 'randomstring7345' keeps changing everytime, there is a function logic inside the application which generates it on the fly.\nIf this was a web application we would have used chrome network tab to do a stack trace once the traffic is generated and then use technical breakpoints to find out the Javascript code which generates the 'randomstring7345'. How can we do the same in Android. first step would be to decompile the application apk I guess and then how do we proceed from there to find out the exact function/logic? \nwhat I am trying to do.\n\nreverse engineer an android apk (bit novice here) \ncreate a python library to automate the apk api calls (i can do this once i get the equivalent android code logic)\n\nfor sake of simplicity, lets say there is an flight reservation android app\nHere is the flow:\n\nopen the apk, which presents a login screen (user | pass)\nonce you click login you get a Json reply from server a. {Fail: Wrong pass} or b. {Success: login_tokenID}\nnow I put sourceAirport as A DestinationAirport as B and flydate '2018-06-09' and click on Confirm\n\nThe traffic that goes out:\n<pre><code>https://myflights.com:port/userid=user1&token=login_tokenID&accesstoken=8833456&from=A&to=b&date=2018-06-09\n</code></pre>\nServer sends back Json\na. {Fail : Choose another date}\nb. {Success: confirmed}\nnote the flow here the app computes internally accesstoken=8833456 which it supplies in the request else server wont respond to it. I need to find exactly where this logic resides in the app so that I can replicate it.\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "android",
        "java",
        "decompile",
        "apk",
        "callstack"
    ],
    "user": "Curi0usM3",
    "time": "Jun 27, 2018 at 13:40",
    "comments": [],
    "answers_data": [
        {
            "content": "Hello you can start with the following approach: \n\nDecompile the apk file with apktool \nconvert classes.dex to .jar with dex2jar\nopen the file with some java decompiler. My favorite is Luyten\nFind the specific function \n\n\n$ apktool d app-uat-release.apk -s -o dex\n$ cd dex\n$ d2j-dex2jar classes.dex \ndex2jar classes.dex -> classes-dex2jar.jar\n$ java -jar /path/to/Luyten.jar classes-dex2jar.jar\n\nI can point you in the right direction, but to this i need to know what exactly you want to do.\n",
            "votes": "2",
            "user": "TheKalin",
            "time": "Jun 27, 2018 at 7:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Curi0usM3",
                    "text": "<span class=\"comment-copy\">Hi Thanks for your reply.  I have been playing around with similar approach used jg-gui in the third step instead of luyten.  I get partial error while using dex2jar I got most code though but here and there it looks broken...  dex2jar classes.dex -&gt; .\\classes-dex2jar.jar Detail Error Information in File .\\classes-error.zip Please report this file to <a href=\"http://code.google.com/p/dex2jar/issues/entry\" rel=\"nofollow noreferrer\">code.google.com/p/dex2jar/issues/entry</a> if possible.  What I am looking for is a way which can set up breakpoints on the code which stops when maybe when a button is clicked or all the function required to generate a traffic</span>",
                    "time": null
                },
                {
                    "user": "TheKalin",
                    "text": "<span class=\"comment-copy\">@Curi0usM3 You can setup the debugger with smali files &amp; <a href=\"https://github.com/JesusFreke/smali/wiki/smalidea\" rel=\"nofollow noreferrer\">github.com/JesusFreke/smali/wiki/smalidea</a>. To get smali sources you need to run apktool without -s. Setting up smalidea can be tricky so i wish you good luck. :)   btw. cant you just find the endpoint in the jd-gui search and read the app logic from there?</span>",
                    "time": null
                },
                {
                    "user": "Curi0usM3",
                    "text": "<span class=\"comment-copy\">jd-gui search i coudnt get the function. yet maybe hidden somewhere or obfuscated. next step would be learning smali. sigh!</span>",
                    "time": null
                },
                {
                    "user": "TheKalin",
                    "text": "<span class=\"comment-copy\">Reverse engineering is not an easy task. In 99% cases you have to combine multiple techniques to achieve the goal.  PS: I would appreciate if you could accept my answer. PS2: Don't be afraid to ask more questions.</span>",
                    "time": null
                }
            ]
        }
    ]
}