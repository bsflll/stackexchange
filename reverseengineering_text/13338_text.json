{
    "title": "Understanding FCOMP instruction and extracted value from address operand",
    "link": "https://reverseengineering.stackexchange.com/questions/13338/understanding-fcomp-instruction-and-extracted-value-from-address-operand",
    "content": "I'm trying to reverse engineer an application made in vb6. At a certain point it compares an input number to a constant number, my goal here is to extract that number, now i found where the comparison is taken place:\n<pre><code>FCOMP QWORD PTR DS:[402CB0]\n</code></pre>\nNow I understand that FCOMP <pre><code>Compares the contents of register ST(0) and source value</code></pre>. I don't know if I got this right, but from what I've read <pre><code>DS:[402CB0]</code></pre> is pointer to an address that's holding the <pre><code>source</code></pre> value, but using OllyDbg, and while navigating to that address (Ctrl + g), i found out that the value is <pre><code>DB 00</code></pre> which is not correct\n\nso my question here is how can I find the real value that is being compared?\nand is it possible to make the <pre><code>FCOMP</code></pre> compare a constant to a pointer of an integer?\n",
    "votes": "0",
    "answers": 2,
    "views": "447",
    "tags": [
        "disassembly",
        "assembly",
        "ollydbg",
        "float"
    ],
    "user": "Ouerghi Yassine",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Viktor",
            "text": "Use the memory view window. Read up on memory and hardware break points.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>FCOMP</code></pre> Compares the <pre><code>fpu register ST0</code></pre> with a <pre><code>constant</code></pre>\nthe <pre><code>constant</code></pre> is a QWORD (Meaning DOUBLE , FLOAT , Etc 8+ bytes wide )   \nollydbg  can show both the <pre><code>ST0 register</code></pre> and <pre><code>decipher the contents of the CONSTANT</code></pre> . \nin your case if shows <pre><code>DB 00</code></pre> because the constant is <pre><code>probably 0.0</code></pre> .    \nand you <pre><code>have not set the dump view mode</code></pre> to appropriate format    \nthe view mode you are looking at is <pre><code>Disassembly (DB is Define Byte 00 is well 0x00 )</code></pre> .\nyou may need to change the view mode  \nfirst <pre><code>select the dump window</code></pre> then use <pre><code>ctrl+g</code></pre> and then right click <pre><code>select FLOAT</code></pre> . \nollydbg also has a small window between disassembly pane and dump pane \nwhich can show both the source and destination contents   \nin the screen shot below \nyou can observe how <pre><code>783ef8 is DB 00 in Disassembly window and FLOAT 0.0 in Dump Pane</code></pre> . \nyou can observe how the <pre><code>contents of register pane shows both the src and dest</code></pre> contents\nyou can observe how <pre><code>fpu register window</code></pre> shows the <pre><code>ST0</code></pre> contents\n",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 22, 2016 at 8:17",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Understanding the assembly line\n<pre><code>FCOMP QWORD PTR DS:[402CB0]</code></pre>\nIt checks for a qword sized operand. That is 8 bytes while your picture only shows about 3.\nThis comparison is also a floating point comparison, which is a bit more complex than an integer comparison.\nIt sets three control registers (<pre><code>C0</code></pre>, <pre><code>C2</code></pre>, <pre><code>C3</code></pre>) depending on the outcome and raises an exception if either values is <pre><code>NaN</code></pre> (could this be some kind of Anti debugging related exception?)\nGetting to the actual content at the time of comparison\nAlthough you can access the address now, it is not guaranteed the value you're looking at is the value that will end up being compared to your float.\nYou should make sure the debugger reaches that address when you inspect it. This can usually be done quite easily by setting a breakpoint (either software - OllyDbgv1's default or hardware - OllyDbgv2's default). Either right click on that assembly line -> Breakpoint -> Toggle or simply hit F2 while it's highlighted.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Aug 22, 2016 at 12:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}