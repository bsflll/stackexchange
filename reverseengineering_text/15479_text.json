{
    "title": "Disassembled Java class file differs from Source",
    "link": "https://reverseengineering.stackexchange.com/questions/15479/disassembled-java-class-file-differs-from-source",
    "content": "While trying to understand a behavior of TestNG I found my self disassembling the .class files. During that, I accidentally noticed that the official binary differs from the one built manually from source and from the source itself.\nThe reason I disassembled the binaries was just to prove that the binary really lacks local variable tables (and for fun), since I was unable inspecting local variables.\n\nProject: https://github.com/cbeust/testng.git\nArtifact Version / Tag: 6.11\nSource File: <pre><code>TestNG.java</code></pre> (Official Repository)\nClass File: <pre><code>TestNG.class</code></pre> in testng-6.11.jar (repo.maven.apache.org)\nUsed JDK: OpenJDK 1.8.0 131\n\nI built the source from the project repository at Tag 6.11. using Gradle.\nIn the first place I inspected both using <pre><code>javap -l -p TestNG.class</code></pre>, writing the output into two separate files and diffing the resulting descriptions. So far so good.\nThen, for fun, I disassembled both class files using these commands:\n<pre><code>javap -c -p /tmp/TestNG.mvn.class > /tmp/TestNG.mvn.java\njavap -c -p /tmp/TestNG.mine.class > /tmp/TestNG.mine.java\n</code></pre>\nThen I diffed both and accidently found the private field <pre><code>m_executionListeners</code></pre> to be missing. \n<pre><code>--- /tmp/TestNG.mvn.java      2017-06-03 23:12:16.005211337 +0200\n+++ /tmp/TestNG.mine.java     2017-06-03 23:12:08.245208191 +0200\n@@ -92,6 +92,8 @@\n\n   protected long m_start;\n\n+  private final java.util.Map<java.lang.Class<? extends org.testng.IExecutionListener>, org.testng.IExecutionListener> m_executionListeners;\n+\n</code></pre>\n(No, its declaration did not just move around, it's gone.)\nSo I thought it could be some kind of compiler optimization. But it is actually referenced and accessed two times. This is one access:\n<pre><code>public void addListener(ITestNGListener listener) {\n   if (listener == null) {\n     return;\n   }\n   if (listener instanceof ISuiteListener) {\n     ISuiteListener suite = (ISuiteListener) listener;\n     maybeAddListener(m_suiteListeners, suite.getClass(),  suite);\n   }\n   // ...\n   if (listener instanceof IExecutionListener) {\n     IExecutionListener execution = (IExecutionListener) listener;\n     maybeAddListener(m_executionListeners, execution.getClass(), execution);\n   }\n   // ...\n }\n</code></pre>\nSee the source\nAll other fields that run through the <pre><code>instanceof</code></pre> check, type cast and <pre><code>maybeAddListener()</code></pre> call are still present.\nAm I right, with my conclusion, that the binary has not been built from the (supposed-to-be) related source? Or what it going on here?\n",
    "votes": "2",
    "answers": 1,
    "views": "142",
    "tags": [
        "java",
        "bin-diffing"
    ],
    "user": "try-catch-finally",
    "time": "Jun 4, 2017 at 14:23",
    "comments": [],
    "answers_data": [
        {
            "content": "You are correct that the binary does not match the tagged source. It does, however, match the changes made in commit 6cfc6b4a403f8487d9fa96aa3d42db7848c8755a, which was made on February 25, one day after the most recent commit tagged 6.11 and before the most recent merge commit in 6.11. \nI can only speculate, but it seems likely that their local version of 6.11 includes an extra commit or two that they accidentally left out of the tag on Github.\n",
            "votes": "4",
            "user": "Antimony",
            "time": "Jun 5, 2017 at 3:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}