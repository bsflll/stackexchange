{
    "title": "Fuzzing Adobe Reader - Exploit Development",
    "link": "https://reverseengineering.stackexchange.com/questions/4374/fuzzing-adobe-reader-exploit-development",
    "content": "I have been fuzzing Adobe Reader lately. I found couple of bugs.\nOne of the major issues that I'm facing are listed below.\n\nHow to identify the root cause of the issue? I mean, the PoC has a large number of modification and it's not easy to change each block and test. So, it's very difficult to find the bytes that caused the crash.\n\nI have been studying Taint Analysis and Symbolic Execution driven Fuzzing and vulnerability research.\nI use IDA pro for my RE work. Is there any good plugin that does that task. I know about \"tree-cbass\" https://code.google.com/p/tree-cbass/\nBut I'm unable to use it efficiently. I would like to get inputs and tips from experienced vulnerability researchers and exploit developers.\nI want to pursue my career as vulnerability researcher and have a little knowledge in this domain.\nThanks.\n",
    "votes": "6",
    "answers": 3,
    "views": "2k",
    "tags": [
        "exploit",
        "fuzzing",
        "vulnerability-analysis"
    ],
    "user": "john4tech",
    "time": "May 19, 2014 at 11:16",
    "comments": [
        {
            "user": "lotofquestions",
            "text": "Oh, you good. I also wanna fuzz Adobe Reader. What kind of fuzzer will be the most effective and how can i discover it? Hope your help. Thanks\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are good answers to your question here. However, I wanted to give you my opinion. Root cause analysis, over all, is best done half-manually. One of the reasons is that techniques like Dynamic Taint Analysis, using SMT solvers, etc... are good tools for small or specific problems but almost unusable for whole projects + real targets, for the average researcher, because of the time and power required. Also, it's worth considering the time you will need to develop a tool using such techniques that might work well with a real target, like Acrobat Reader.\nThe very first thing I can recommend you, in order to make your task less annoying, is to write minimization tools. Depending on how you created your mutated samples, you could even use some of the tools I wrote myself for Nightmare like this kind of generic crash minimization tool that works for some binary files and for text only files (it might work for you with Acrobat Reader with some modifications). Once you minimized your PDF, you might want to do also the following:\n\nUse MyNav, BinNavi or a similar tool able to do differential debugging.\nRecord a first execution with a blank PDF. Be sure to record as most GUI events as possible.\nIf you created your mutated file from a template PDF file, then record also an execution of that original PDF file. It will remove all the functions and basic blocks that were used for that specific template.\nAfter the previous steps were you record a trace of a blank PDF file, GUI events, etc... record the execution of your crashing PDF sample. As you're using differential debugging, only the last basic blocks and/or functions will appear in the last trace.\n\nHopefully, you will have only a few basic blocks or functions to analyse and you might be able to see which conditional jumps where taken or not taken and determine why it crashed.\nBTW, if you're on Unix, you can also diff logs of valgrind executions with the original template and with your crashing sample.\nMy 2 cents...\n",
            "votes": "3",
            "user": "joxeankoret",
            "time": "Jan 22, 2016 at 8:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">For the editor who removed this part \"BTW, if you're on Unix, you can also diff logs of valgrind executions with the original template and with your crashing sample.\" One can use either Wine + Valgrind or the old Acrobat Reader version for Linux. Just saying.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "First of all you should write script to lower the difference between your mutated(fuzzed) file and original in order to know the main byte/bytes that make program crash. This would be a byte by byte compare,change,check to make sure you have the minimal difference needed to crash the app.(It's possible that you found new crashes this way. believe me!)\nSecond part would be mixing your code with debugger that can check if lowered file is still crash-able or not.\nif you choose Python for this work, it can be done in couple of hours.\nP.S. check WinAppDbg, PyDbg, PyDbgEng and etc.\n",
            "votes": "2",
            "user": "user3119",
            "time": "May 19, 2014 at 15:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">Great! Thanks for the input. I already tried to minimize the crash. The original file was around 200kb and mutated file is 107kb. I tired to do what you suggested. But failed to identify the faulty bytes. I have read about the Dynamic Taint analysis. I guess using Taint analysis, I will be able to find the bytes I control in the PDF file. But I'm unable to apply the Dynamic Taint analysis and SMT solver theory to practice. Could you suggest me on this. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "user3119",
                    "text": "<span class=\"comment-copy\">personally i've never used taint analysis, but to check the root cause maybe below linked help. <a href=\"https://www.corelan.be/index.php/2013/02/26/root-cause-analysis-memory-corruption-vulnerabilities/\" rel=\"nofollow noreferrer\">root-cause-memory-corruption</a> &amp; <a href=\"https://www.corelan.be/index.php/2013/07/02/root-cause-analysis-integer-overflows/\" rel=\"nofollow noreferrer\">root-cause-integer-overflow</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The best thing you can do is to learn how to read assembly. Start at the crash, see what type of memory is being used, values in registers, and previous instructions.  Learn how to use windbg.  Taint analysis and smt solving is intended for pure binary data, it sucks for interpreters or abstract state machines.  In other words, its great when the relationship between data and code is 1 to 1 as in media players etc.  If you want to be a vulnerability researcher then learning how to efficiently reverse engineer is the best long term investment you can make.  Itll shorten the time between crash and root cause analysis and will improve the quality of the bugs you find.\nThe size difference between the original and fuzzed file is substantial and likely was not produce by dumb binary byte flipping.  Also, the PDF format contains a lot of non binary data.  You have to study how Reader works and also get very intimate with the PDF spec.  This is a manual endeavor.\nCheck out the tutorials at https://www.corelan.be/index.php/category/security/exploit-writing-tutorials/\nEDIT - Code coverage and a lot of other stuff is easy to do with PIN, including taint tracking with XED2.  Check out Dytan and Privacy Scope, both of which are open source.  If the application is complex then most likely you will have to customize your tools for it.  You dont want to run your code against decompression.  Theres also static taint tracking and a good example is http://phrack.org/issues/67/10.html which goes backwards from a crash.  The rules are simple so its easy not complex to make this sort of tool.  The difficulties come when interfacing with system APIs and third party libraries which is where the customization comes in.  You could use more advanced features as well, check out shadow memory and one of my favorite papers http://dynamorio.org/pubs/zhao-million-watchpoints-CC08.pdf\n",
            "votes": "2",
            "user": "day6reak",
            "time": "May 31, 2014 at 6:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">Yes, you are correct. Reverse engineering skill is the best investment. However, I'm very fascinated with Taint Analysis, so I started reading about it. One of the interesting Black Hat talks that inspired me is <a href=\"http://www.youtube.com/watch?v=HklsTbAfXR4\" rel=\"nofollow noreferrer\">Blackhat 2010 - Harder, Better, Faster, Stronger</a>. Please share your views. Thanks.</span>",
                    "time": null
                }
            ]
        }
    ]
}