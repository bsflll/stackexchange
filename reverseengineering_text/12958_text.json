{
    "title": "how to get hanging instructions of a dll using IDApython",
    "link": "https://reverseengineering.stackexchange.com/questions/12958/how-to-get-hanging-instructions-of-a-dll-using-idapython",
    "content": "I need to get hanging instructions i.e instructions which are not under any functions in a dll through idapython script? it is available in brown color when seen through IDA pro.\n",
    "votes": "1",
    "answers": 2,
    "views": "441",
    "tags": [
        "idapython",
        "dll"
    ],
    "user": "Vicky",
    "time": "Jun 29, 2016 at 15:34",
    "comments": [],
    "answers_data": [
        {
            "content": "This command will find the address if hanging instruction next to the ScreenEA() and print it.\n<pre><code>import idaapi\nimport idc\naddr = idaapi.find_not_func(ScreenEA(), 1)\nif addr != idc.BADADDR: \n    print \"0x%08x : %s\" % (addr, idc.GetDisasm(addr))\nelse:\n    print \"Hanging instruction not found\"\n</code></pre>\nTo print all the hanging instructions in the loaded binary, do the following:\n<pre><code>import idaapi\nimport idc\naddr = idaapi.find_not_func(0, 1)\nwhile addr != idc.BADADDR:\n    print \"0x%08x : %s\" % (addr, idc.GetDisasm(addr))\n    addr = idaapi.find_not_func(addr, 1)\nprint \"No more hanging instruction found\"\n</code></pre>\n",
            "votes": "1",
            "user": "w s",
            "time": "Jun 29, 2016 at 16:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vicky",
                    "text": "<span class=\"comment-copy\">I want the exact instruction itself not address</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Updated an answer</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The naive solution will be to iterate over every instruction in the code and check if it is inside a function.\nUsing Sark\n<pre><code>for line in sark.lines():\n    if not line.is_code:\n        # The line is not a code line, so we skip it.\n        continue\n    if sark.is_function(line.ea):\n        # Line is inside a function, skip it.\n        continue\n\n    # The line is code outside a function. Print it.\n    print line\n</code></pre>\nUsing standard IDAPython\n<pre><code>import idaapi\nimport idc\n\ndef iter_all_lines():\n    start = idaapi.cvar.inf.minEA\n    end = idaapi.cvar.inf.maxEA\n\n    item = idaapi.get_item_head(start)\n    while item < end:\n        yield item\n        item += idaapi.get_item_size(item)\n\n\ndef iter_hanging_lines():\n    for line in iter_all_lines():\n        if not idaapi.isCode(idaapi.getFlags(line)):\n            # The line is not a code line, so we skip it.\n            continue\n\n        if idaapi.get_func(line):\n            # The line is inside a function, skip it.\n            continue\n\n        # The line is code outside a function. Yield it.\n        yield line\n\n\nfor line in iter_handing_lines():\n    print \"[{:08X}]    {}\".format(line, idc.GetDisasm(line))\n</code></pre>\n",
            "votes": "1",
            "user": "tmr232",
            "time": "Jun 29, 2016 at 19:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vicky",
                    "text": "<span class=\"comment-copy\">i dont want to use other lib . is it possible with idapython api itself ?</span>",
                    "time": null
                },
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Updated the answer to match. But @w-s gave a much better answer. I was not aware of that API.</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">You can use idautils.Heads(minea,maxea) instead of iter_all_lines, it should give similar functionality</span>",
                    "time": null
                }
            ]
        }
    ]
}