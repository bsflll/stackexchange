{
    "title": "How to reuse symbol/data defined in .bss section?",
    "link": "https://reverseengineering.stackexchange.com/questions/4306/how-to-reuse-symbol-data-defined-in-bss-section",
    "content": "So basically I am trying to re-use some assembly code/data dumped by <pre><code>objdump</code></pre> from 32 bit ELF binary on Linux.\nSo basically, in the disassembled binary, I found some symbol referring to <pre><code>.bss</code></pre> section like this:\n<pre><code> 80486b7:   mov    0x804b264,%eax   <- 0x804b264 is an addr in .bss\n 80486bc:   movl   $0x0,0x4(%esp)\n 80486c3:\n 80486c4:   mov    %eax,(%esp)\n 80486c7:   call   804876c <sum>\n</code></pre>\nBy digging into the original source code, I find out that <pre><code>0x804b264</code></pre> is used for <pre><code>stdin</code></pre> in <pre><code>.bss</code></pre> section.\nIMHO, there are basically two situations on <pre><code>.bss</code></pre> section's data:\n\nuninitialized data, will be uninitialized in the source code\nsome global/system related data (such as stdin in the above situation)\n\nSo when trying to re-use <pre><code>.bss</code></pre> section's data, I have tried this way:\n<pre><code>.section .bss\nS_0x804B260 : .byte 0x00\n           .byte 0x00\n           .byte 0x00\n          .byte 0x00\nS_0x804B264 : .byte 0x00          <- I lift addr into symbol!\n          .byte 0x00\n         .byte 0x00\n         .byte 0x00\n         .byte 0x00\n</code></pre>\nand in the <pre><code>.text</code></pre> section, I will also lift corresponding addr into symbol.\nsame situation works fine for <pre><code>.rodata</code></pre> and <pre><code>.data</code></pre> section\nBut the problem is that, there are some global variables (such as stdin stdout), locating in <pre><code>.bss</code></pre> section, while are not initialized by user defined code, which means that in my re-used asm code, this symbol variable will always be zero!\nI tried to manually substitute symbols corresponding to stdin, and it seems that it works fine.\nBut the problem is that:\n\nHow can I identify which symbol in the <pre><code>.bss</code></pre> section is some variables that initialized by system? such as stdin, stdout* and others?\nIf it is not possible, then is there anyway that I can enforce system to use memory in the <pre><code>.bss</code></pre> section where I want it to use?\n\nAm I clear? Could anyone give me some help?\n",
    "votes": "3",
    "answers": 1,
    "views": "824",
    "tags": [
        "disassembly",
        "assembly",
        "elf",
        "reassembly"
    ],
    "user": "lllllllllllll",
    "time": "May 10, 2014 at 16:24",
    "comments": [],
    "answers_data": [
        {
            "content": "I'm afraid you're not too clear when you talk about \"reusing\" some part of a program. What exactly do you want to do? Load the original program into a debugger, then call just one single function of it? Extract a ranged of addresses and turn that into a new program? Or extract one function from the original program, possibly together with everything the function depends on, then embed that function into a larger program?\nYou're wrong in one thing: the .bss section is NOT initialized at all at program start (at least not to anything but a load of <pre><code>\\0</code></pre> bytes). The initialization of stuff like <pre><code>stdout</code></pre> is done in runtime before main() starts. Stuff that gets initialized with constant data goes into the .data segment.\n(On a side note: One of the reasons why the stdout FILE structure isn't put into .data and initialized as constants is most runtimes on unix-like systems will check if their file descriptor goes to a terminal or something else, and turn on/off buffering depending on that check).\nWhen you extract a part of the code, you'll have to check each reference to .data AND .bss (and to .text - the code - as well if the extracted part depends on any libraries etc.). For each of those references, you'll have to decide what to do with them - share them with the new program, keep them for the functions you extracted, whatever.\nIf you're lucky, and have an unstripped executable, you can use <pre><code>nm</code></pre> to find out which symbol is where; if you're not that lucky, you'll have to disassemble/decompile everything, understand it, rewrite it into new source, and compile it together with whatever you want to embed it in.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 10, 2014 at 18:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}