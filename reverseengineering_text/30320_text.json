{
    "title": "Patching out relative calls to DLL functions",
    "link": "https://reverseengineering.stackexchange.com/questions/30320/patching-out-relative-calls-to-dll-functions",
    "content": "I have googled, watched several videos, read the PE spec, and even read some blogs. I am at a loss on how to patch out a message box. I am working through a CTF whose first task is to disable a nag screen. I'd like to completely remove the call to MessageBoxW for completeness sake and because the amount of struggling I'm doing now has told me there is some value in learning to do this.\nThe code is here:\n<pre><code>    004015fc 6a 30           PUSH       0x30\n    004015fe 68 88 45        PUSH       u_NAG!_00404588                                  = u\"NAG!\"\n             40 00\n    00401603 68 88 45        PUSH       u_NAG!_00404588                                  = u\"NAG!\"\n             40 00\n    00401608 6a 00           PUSH       0x0\n    0040160a ff 15 6c        CALL       dword ptr [->USER32.DLL::MessageBoxW]            = 00004dd4\n             30 40 00\n</code></pre>\nNaturally, simply patching the call with nops does not work. If I patch from the first push through the call with NOPs the executable will start and die once it hits this point, as expected. The dynamic disassembly:\n<pre><code>0011160A | 90                       | nop                                     |\n0011160B | 90                       | nop                                     |\n0011160C | 6C                       | insb                                    |\n0011160D | 3011                     | xor byte ptr ds:[ecx],dl                |\n0011160F | 008B 0D643011            | add byte ptr ds:[ebx+1130640D],cl       |\n</code></pre>\nSo something is being relocated and I cannot find it. In fact from above the patching by the loader is obvious. Some of the messed up bytes are the relocated address <pre><code>0x0011306C</code></pre>. Though, I'm not sure where the bytes after are coming from...I'm guessing there's now misalignment?\nGoing back to the original call the base address is <pre><code>0x00400000</code></pre>, which means the address where the function is mapped in memory is at offset <pre><code>306C</code></pre>. Going to that offset in Ghidra I see:\n<pre><code>    0040306c d4 4d 00 00     addr       USER32.DLL::MessageBoxW\n</code></pre>\nWhich makes sense. Firing it up in PE-Bear I checked the import address table:\n\nand indeed 306C is the offset into the IAT. But when I look at the relocation table I don't see any address that looks like <pre><code>160a</code></pre> (the address to the call) where I would expect a patch to be:\n(Truncated because the table is huge)\n\nSo I am at a loss at how to completely bypass this thing. Could anyone point me to some resources or give me an idea of what I'm doing wrong so I can understand this process a little better?\nThank you!\n",
    "votes": "1",
    "answers": 0,
    "views": "151",
    "tags": [
        "patching",
        "crackme",
        "iat",
        "relocations"
    ],
    "user": "John S.",
    "time": "Apr 25, 2022 at 4:52",
    "comments": [],
    "answers_data": []
}