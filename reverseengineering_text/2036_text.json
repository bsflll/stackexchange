{
    "title": "Wanted: Java bytecode disassembler that shows addresses, opcodes, operands, in hex",
    "link": "https://reverseengineering.stackexchange.com/questions/2036/wanted-java-bytecode-disassembler-that-shows-addresses-opcodes-operands-in-h",
    "content": "I am after a java bytecode disassembler whose output includes the bytecodes themselves, their operands, and their addresses in the .class file, and which displays numbers in hex, not decimal.\nTo show what I mean, here are a few lines taken from the output of javap:\n<pre><code>private java.text.SimpleDateFormat createTimeFormat();\n  Code:\n   Stack=3, Locals=2, Args_size=1\n   0:    new    #84; //class java/text/SimpleDateFormat\n   3:    dup\n   4:    ldc    #17; //String yyyy-MM-dd'T'HH:mm:ss\n   6:    invokespecial    #87; //Method java/text/SimpleDateFormat.\"<init>\":(Ljava/lang/String;)V\n   9:    astore_1\n</code></pre>\nEvery java bytecode disassembler I have found (I have spent much time on google, and downloaded several different ones to try) produces output which is essentially the same as this. Some format or decorate it slightly differently; some replace the command line interface with a fancy GUI; but not one of them displays the addresses of the instructions in the .class file, nor the bytecodes themselves - there are several which claim to show the bytecodes, but none of them actually do, they display only the textual mnemonics representing the bytecodes rather than the bytecodes themselves. Also, they all display the numerical information in decimal, not in hex.\nHere is an edited version of the above output which I have transformed by hand to produce an example of the sort of thing I am looking for:\n<pre><code>private java.text.SimpleDateFormat createTimeFormat();\n  Code:\n   Stack=3, Locals=2, Args_size=1\n000010cf    0:    bb 00 54    new    #54; //class java/text/SimpleDateFormat\n000010d2    3:    59          dup\n000010d3    4:    12 11       ldc    #11; //String yyyy-MM-dd'T'HH:mm:ss\n000010d5    6:    b7 00 57    invokespecial    #57; //Method java/text/SimpleDateFormat.\"<init>\":(Ljava/lang/String;)V\n000010d8    9:    4c          astore_1\n</code></pre>\nThe addresses at the start of the lines correspond to the position of the instructions in the .class file, as one would find in a plain hexdump. The hex representations of the bytecodes and their operands are shown, and the disassembly shows the constants in hex.\nIs there anything available which would produce output resembling this? It does not matter if the fields are in a different order, as long as they are all there. It must run on Linux, either natively or under java.\n",
    "votes": "12",
    "answers": 3,
    "views": "4k",
    "tags": [
        "java",
        "hex",
        "disassemblers"
    ],
    "user": "Witnobfigo",
    "time": "May 10, 2013 at 23:22",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Is there a specific reason it must be hex?\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "I'm guessing there aren't any tools like this because noone has had a need for it. But it's not hard to write one. P.S. tableswitch and lookup switch instructions can be up to 64kb, so you're not going to be able to fit the hex on one line.\n",
            "time": null
        },
        {
            "user": "Witnobfigo",
            "text": "@IgorSkochinsky - requirement for hex is so that the values provided match up with what is displayed by a hex editor without the need to convert bases.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "Just as I thought, a typical example of the XY problem.\n",
            "time": null
        },
        {
            "user": "Till",
            "text": "@Witnobfigo then how about finding a hex editor that was able to display decimal numbers (which most likely is a bit easier)?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Maybe radare2 is what you're looking for. See this screenshot:\n",
            "votes": "14",
            "user": "perror",
            "time": "May 11, 2013 at 7:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Witnobfigo",
                    "text": "<span class=\"comment-copy\">Thanks for that - it isn't perfect, but it's a lot better than anything I've managed to find.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you just need to find the bytes you need to change in the original file, IDA shows the original file offset in the status bar. You can also check the opcodes in the Hex View.\n",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "May 12, 2013 at 0:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I do not know of a disassembler that will do this, but I have written a Java decompiler that has a bytecode output mode.  It is open source, and it would be easy enough to modify to suit your needs.  Feel free to check it out here.\n",
            "votes": "3",
            "user": "Mike Strobel",
            "time": "May 30, 2013 at 14:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Pacerier",
                    "text": "<span class=\"comment-copy\">Btw, what is a \"wall street\" programmer? (as per your profile)</span>",
                    "time": null
                },
                {
                    "user": "Mike Strobel",
                    "text": "<span class=\"comment-copy\">@Pacerier oh, just that I work in finance in NYC, specifically in high frequency trading.</span>",
                    "time": null
                }
            ]
        }
    ]
}