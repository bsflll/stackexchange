{
    "title": "What could this time format be? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6918/what-could-this-time-format-be",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm reverse engineering a file format in which (amongst a whole lot of other things I have already decoded) the 'length' of the file is being stored.\nIt is displayed to the user as minutes:seconds.\nDoing a little bit of experimenting by altering the file and loading it up in the program, I've gathered the following possibilities:\n<pre><code>Original:\n5d42: 0:55\n\nAltered:\n5240: 0:03\n0000: 0:00\n003f: 0:00\n0040: 0:02\n0041: 0:18\n0042: 0:32\n0043: 2:08\n0044: 8:32\n0045: 34:08\n1045: 38:24\n0046: 136:32\n0047: 564:08\n0048: 2184:32\n0049: 8738:08\n004a: 34952:32\n004b: invalid\n004c: 559240:33\n004d: 2236962:15\n004e: 8947849:00\n004f: 35791396:00\n0050: 143165584:00\n0051: 572662336:00\n0052: 2290649344:00\n\n0142: 0:32\n0242: 0:32\n0342: 0:32\n0442: 0:33\n0542: 0:33\n0642: 0:33\n0742: 0:33\n0842: 0:34\n0942: 0:34\n0a42: 0:34\n0b42: 0:34\n0c42: 0:35\n0d42: invalid\n0e42: 0:35\n0f42: 0:35\n1042: 0:36\n1142: 0:36\n</code></pre>\nMy guess is this is some sort of floating point, but I'm too limited in my skills to know what kind.\nI know all other numbers in the files are stored as little-endian.\nDoes anyone have any clue?\n",
    "votes": "3",
    "answers": 1,
    "views": "95",
    "tags": [
        "file-format"
    ],
    "user": "Tom Wood",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Why the close votes? This seems to be a case of the \"Reverse engineering a specific system, but stuck on a clearly defined problem\", especially as the OP performed the logical first steps - try different values, check the results - and gave this information to us.\n",
            "time": null
        },
        {
            "user": "Tom Wood",
            "text": "I'd like to agree with Guntram Blohm, I don't think this is off topic. I've demonstrated a basic understanding of the concepts involved and have clearly identified a problem. The fact that I'm a beginner and thus had problems identifying even a basic float should not be held against me by abusing the policy.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This seems very much like the IEEE754 format, and i'd assume each of your two byte timecodes to be preceded by two zero-bytes, which make a 4 byte (32 bit) value.\nYou can calculate the exponent using the formula\n<pre><code>exponent=(byte2 * 2 - 127)\n</code></pre>\nand the value in seconds using\n<pre><code>value=2^exponent*(1+byte1/128)\n</code></pre>\nassuming the high-order bit of byte1 is clear; if you set the highest bit in byte1, you'll probably get a negative value. (If byte1 is zero, as in most of your examples, value is equal to the exponent, as the multiplicand is 1)\nNote you have a typo in your value for <pre><code>0041</code></pre>, that should be <pre><code>0:08</code></pre>, not <pre><code>0:18</code></pre>, and you probably made a mistake when checking the <pre><code>004b</code></pre> value, that should be <pre><code>8388608</code></pre> seconds, or <pre><code>139810:08</code></pre> minutes.\n",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Dec 30, 2014 at 0:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tom Wood",
                    "text": "<span class=\"comment-copy\">Ah, that's why I was stumped! They seemed to be preceded by two junk bytes which could be set to any value without seemingly affecting anything. Thank you. Turns out the invalid value was indeed an error on my part, the program decided to crash just at that value just that once.</span>",
                    "time": null
                }
            ]
        }
    ]
}