{
    "title": "A way to detect a anti-cheating system",
    "link": "https://reverseengineering.stackexchange.com/questions/26005/a-way-to-detect-a-anti-cheating-system",
    "content": "I have created a DLL for DLL inject injection to add a force feedback to a GOG game. The DLL Work perfectly. I have tried to see how work the Debug in CE with this script:\n<pre><code>debugProcess()  -- Attach Debugger to the process.\nfunction debugger_onBreakpoint()\n\n   print(\"hello hacking\")\n\n\n    return 0 --Break\n\nend\n\n\ndebug_setBreakpoint(0x542E51)\n</code></pre>\nthat work fine like I espected.\nNow I have used my dll as \"template\" with another GOG game (DRM free) but this time after tried to hook more then 20 functions that in theory should be call but none of them trigger my code.\nI have tried with CE using the previous script with the some result, the game never break.\nAt this point I suspect that the game could use a anti-cheating system.\nFor the moment I see that IDA detect the real name of many functions:\n\nhere what Cheat Engine see:\n\nThere is a way to verify if the game include a sort of anti-cheatting system or similar ?\nThank you !\n",
    "votes": "1",
    "answers": 0,
    "views": "164",
    "tags": [
        "ida",
        "disassembly",
        "dll-injection",
        "cheat-engine",
        "lua"
    ],
    "user": "user3449922",
    "time": "Sep 29, 2020 at 17:25",
    "comments": [
        {
            "user": "morsisko",
            "text": "Why don't you just check if the functions are really called, and not only in \"theory\"?\n",
            "time": null
        },
        {
            "user": "user3449922",
            "text": "How I can check if the functions are really called ? This is what I looking for. A example can be usefull some tool that log all functions and write in a text file.\n",
            "time": null
        }
    ],
    "answers_data": []
}