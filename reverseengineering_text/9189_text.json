{
    "title": "Null Byte not breaking shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/9189/null-byte-not-breaking-shellcode",
    "content": "While exploiting a strcpy() buffer overflow in Win XP, I used the address of ESP after the crash to overwrite EIP. The address contained a null byte so it did not work, so I found a jmp esp instruction and used that instead. Then I ran the program and it worked fine. Then I realized that the shellcode (from msfpayload) also had null bytes allover. However, it executed fine and I got a reverse shell.\nWhy does null bytes in the shellcode not corrupt the rest of the payload whereas a null byte in the return address corrupted the rest of the payload?\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "buffer-overflow"
    ],
    "user": "Mark Hoglund",
    "time": "Jun 20, 2015 at 20:09",
    "comments": [
        {
            "user": "Havenard",
            "text": "A jump to ESP will implicitly overwrite EIP with ESP value, in fact overwriting EIP is exacly what jump does.\n",
            "time": null
        },
        {
            "user": "Mark Hoglund",
            "text": "Sorry, I must of not worded my question correctly. What I meant to ask, is why did my nullbytes in the shellcode not corrupt the rest of the shellcode?\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "is the entire shellcode copied to the buffer that is overflowed?  Or is what's copied only enough data to overwrite the buffer, and the rest is reached another way?\n",
            "time": null
        },
        {
            "user": "Mark Hoglund",
            "text": "First one, the entire payload is copied to the buffer\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As you know the strcpy function has a loop that ends on 0x00 byte and it has no exception. So:\n\nRe-check your bug trigger situation, are you sure it's strcpy? isn't it memcpy, memmove or even wcs...?\nCheck strcpy args, sometimes your target buffer is not the destination of strcpy it may be the source. and as mentioned in comments your assumption about null byte limitation is wrong.\nCheck your shell code in your exploit source. not in memory. it could be decoded at run-time.\n\nif none of above is right then check the algorithm, it is possible that the program extends the copy.\n",
            "votes": "1",
            "user": "diener_k",
            "time": "Jun 21, 2015 at 9:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">...and please tell us your findings</span>",
                    "time": null
                },
                {
                    "user": "Mark Hoglund",
                    "text": "<span class=\"comment-copy\">Hey, sorry for the late reply! I don't have access to the source code. I downloaded the program from <a href=\"http://code.securitytube.net/Server-Strcpy.exe\" rel=\"nofollow noreferrer\">code.securitytube.net/Server-Strcpy.exe</a>. Owner said it uses strcpy. I saw a snippet that said strcpy(buffer, input) in the video. I am using a metasploit generated shellcode, if that helps.</span>",
                    "time": null
                }
            ]
        }
    ]
}