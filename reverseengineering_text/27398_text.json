{
    "title": "How to perform full MIPS system emulation with QEMU, using the squashfs image and uBoot kernel image?",
    "link": "https://reverseengineering.stackexchange.com/questions/27398/how-to-perform-full-mips-system-emulation-with-qemu-using-the-squashfs-image-an",
    "content": "TL;DR:\nNeed tips on emulation of MIPS-BE system using QEMU with the help of squashfs image file and uBoot Kernel image file extracted from the firmware file.\nLong Version:\n- What I have:\n\nA cheap unpopular GPON (Fiber ONU) device, which I have root shell\naccess to.\nA computer\nBeginner skills (binwalk, gdb, basic\nstackoverflow etc.)\nHigh enthusiasm towards hacking\n\n- What I want:\nThe router runs an ancient webserver called Boa and this has several publicly available vulnerabilties. But, I have tested each and every one against the target router ; but none of it worked. The firmware is  released on this year; so, I'm almost sure that the vendor has patched them.\nHowever, I have already found an vulnerability, which I've disclosed to the vendor. But, I don't want to stop there, as I am pretty sure that this webserver contains tons of other vulnerabilities.\nMy research found out that vendor has precompiled the webserver binaries as a stripped file and all of the server side processing functions are compiled as a stripped custom library file.\nWhat I want is to dynamically analyze the library file and catch the function calls from the webserver to the library file using gdb.\nTo do that, I have tried the following steps:\n\nPlaced a pre-compiled gdbserver binary and tried to run it directly in the router. But, whenever I try to do this, it gets killed automatically. (Most probably due to the low ram)\nTried to execute the webserver binary using QEMU user mode. But, failed with custom error messages. These custom error messages aren't very descriptive and has no documentation available on the whole internet\nEmulated a MIPS system via QEMU (using debian kernel image and drive image from here), copied the extraced file system from  the firmware to QEMU , chrooted into the copied file system and executed BusyBox shell from the firmware file system. Even though the BusyBox shell works inside QEMU, I cannot start the webserver inside QEMU as it throws the same custom errors as before.\nTried to statically analyze the library using Ghidra. But, since the symbols are stripped, it didn't made any sense to me at all.\nConverted the rootfs to qcow2 image and used it with debian kernel image, but QEMU couldn't boot from it, since it couldn't detect the disk image.\n\nAs far as my research went, the only option for me to dynamically analyze the web server is to make the web server run in QEMU with the kernel image and rootfs image I extracted from the firmware.\nSo, what are my next steps? How can I perform a  full system emulation with QEMU, using the squashfs image and uBoot kernel image?\n",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "firmware",
        "gdb",
        "mips",
        "qemu",
        "router"
    ],
    "user": "secnigma",
    "time": "Apr 4, 2021 at 20:59",
    "comments": [
        {
            "user": "Abdullah Mohamed",
            "text": "The webserver is open source, can't you statically analyze it for vulnerabilities, and check whether they are exploitable using fuzzing? Not exactly what you want, but maybe that's a temp solution until you figure out how to dynamically analyze the executable.\n",
            "time": null
        },
        {
            "user": "secnigma",
            "text": "Not exactly. The vendor has all the server side scripting compiled as a custom library and Boa server uses that library. So, that means Analyzing the source code of Boa server is not worth it ( Also, I have already done it) .\n",
            "time": null
        },
        {
            "user": "Abdullah Mohamed",
            "text": "Ah I see, makes sense.\n",
            "time": null
        }
    ],
    "answers_data": []
}