{
    "title": "I am translating some assembly code into C",
    "link": "https://reverseengineering.stackexchange.com/questions/26166/i-am-translating-some-assembly-code-into-c",
    "content": "I am translating some assembly code into C, and I need some help with a part of it:\n<pre><code>    .equ UBRR_val = 12 ;UBRR sets baud, 12 = 19200baud at 4 MHz\n    .def char = r17 ; Register to hold a character\n\n    .org 0x00 ; Execute this when reset button is pushed\n    rjmp start\n</code></pre>\n\nSo I have translated it as follows:\n\n<pre><code>    #define UBRR_val ((4UL/19200)-1) \n    #define char* = 17; \n\n    .org 0x00 ; Execute this when reset button is pushed\n    rjmp start\n</code></pre>\n\nBut I can't figure out <pre><code>.org 0x00;</code></pre>\nI think the <pre><code>rjmp start</code></pre> directs to the main so no changes are needed\n\nAnyone that can help with it?\n",
    "votes": "0",
    "answers": 1,
    "views": "87",
    "tags": [
        "assembly",
        "atmel"
    ],
    "user": "John Carter",
    "time": "Oct 24, 2020 at 3:06",
    "comments": [
        {
            "user": "Rok Tavƒçar",
            "text": "Not what you asked, but your define for UBRR_val is wrong. You didnt include factor 16 or 8 in it (check MCUs datasheet to see exact formula, and how it is divided between high and low register). Also 4 MHz is 4000000.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The .org-directive set's the location counter, so essentially what they do here is telling the assembler that this code should be placed at 0x00 of the current section, which happens to be global 0x00 aswell and that address seems to be executed on reset on this particular CPU with this particular configuration.\n",
            "votes": "1",
            "user": "Richi",
            "time": "Oct 24, 2020 at 18:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}