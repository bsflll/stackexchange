{
    "title": "Why doesn't IDA break on the WriteFile function?",
    "link": "https://reverseengineering.stackexchange.com/questions/18947/why-doesnt-ida-break-on-the-writefile-function",
    "content": "I searched all places in IDA that call the imported <pre><code>WriteFile</code></pre> function and put a breakpoint on them.\nBut while debugging I saw with ProcMon that my exe wrote to the file but even though it did not stop on the breakpoint. I also saw that file was written to.\nWhy is that?\n",
    "votes": "1",
    "answers": 1,
    "views": "590",
    "tags": [
        "ida",
        "breakpoint",
        "exe"
    ],
    "user": "Keystone",
    "time": "Jul 31, 2018 at 18:16",
    "comments": [
        {
            "user": "user22970",
            "text": "it might be accessing a lower level write api such as <pre><code>NtWriteFile</code></pre>, maybe try breaking on it instead? also, by hitting ctrl+x you can see where a function is being used. (cross reference)\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@Amirag: ... or higher-level such as those from the C runtime (<pre><code>fwrite</code></pre>, <pre><code>fprintf</code></pre> and other members of that family). Because if the application isn't statically linked these imports would be imports of the C runtime DLLs rather than of the application itself.\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "For your use case, you could use an API monitor to see precisely which functions are being called, as well as trigger a breakpoint  for a debugger to attach and handle.\n",
            "time": null
        },
        {
            "user": "Keystone",
            "text": "@NirIzr I never understand how to work with ApiMonitor ,all the time I tried to monitor process, thos process are close/ stack because of ApiMonitor\n",
            "time": null
        },
        {
            "user": "Keystone",
            "text": "@0xC0000022L import tab show only the function that compiled as static ? How can I see dynamic compiled functions like <pre><code>fwrite</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "A few possibilities come to mind:\n\nThe application did not use <pre><code>WriteFile</code></pre> but some other API to write.\none of the other APIs or one of the DLLs used by the program called <pre><code>WriteFile</code></pre> indirectly. You can try to catch the this situation by putting a breakpoint on the final API in kernel32 (<pre><code>kernel32_WriteFile</code></pre>).\nAs mentined by Amirag, the program could be calling the native API <pre><code>NtWriteFile</code></pre> in <pre><code>ntdll.dll</code></pre> directly, or even invoke the syscall instruction manually (though this is very rare and tricky to pull off).\nthe write was performed on the process' behalf by the kernel or a kernel-mode driver. This situation can't be caught by a user-mode debugger.\n\nTo determine the real cause, double-click the event in Process Monitor and check the Stack tab. If you configure the symbols properly, you should see the actual path through the process and the kernel and determine what exact location in the process triggered the write and inspect the code there.\n",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Aug 1, 2018 at 15:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}