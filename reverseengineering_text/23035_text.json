{
    "title": "Dealing with heavily obfuscated Java, possibly on bytecode level",
    "link": "https://reverseengineering.stackexchange.com/questions/23035/dealing-with-heavily-obfuscated-java-possibly-on-bytecode-level",
    "content": "I've got a jarfile from a friend, he told me to put it thru an decompiler. So I did, but:\n\nJD-GUI basically spit out just the imports and didn't show any class data\nCFR dumped out stack trace on certain and created basically unusable Java code\nI didn't even try using JAD for it because it's using pattern matching for decompilation\nThe bytecode, according to the specification, is invalid because it contains incorrect entry for constant table\nJBE spit out a couple of errors and crashed, the same goes for fernflower\n\nAlbeit all of that, I tried to execute it on a virtual machine - and it works! I'm literally swept off my knees looking at what happened there, and I believe this may be a fragment of code that is simply un-decompilable. I also did analyze the class file by hand, but everything seemed so contradictionary I eventually gave up. And, what is more interesting, I tried to use it along with multiple JRE versions starting with Java 13 and ending with Java 8 it worked in practice everywhere and I can't believe it.\n[The jar file][1].\nI've also uploaded the [CFR output][2] (it's hillarious). I don't know really much about the obfuscator and the person who sent me the jar refuses to provide the further information, but I've got permission for redistributing and obviously decompiling it. Last bit of information I've got is the fact that the obfuscator is supposedly public and free-to-use, but I refuse to believe it (it could be though, unless I've been a victim of bluffing).\nHow do I even tackle that? How is this, that the jar-file is almost completely obfuscated up until this point all the tooling that exists nowadays has severe problems with even outputting the bytecode assembly? It's not a very confidental piece of code and I'd most probably throw it away and forget about it, but I'm so curious on how it works, I've spent around two days trying to figure it out.\nThanks in advance for any help.\n",
    "votes": "5",
    "answers": 2,
    "views": "5k",
    "tags": [
        "obfuscation",
        "java",
        "deobfuscation"
    ],
    "user": null,
    "time": "Nov 21, 2024 at 12:45",
    "comments": [
        {
            "user": "Axifive",
            "text": "Try Jasmin jasmin.sourceforge.net\n",
            "time": null
        },
        {
            "user": "Axifive",
            "text": "javap or Krakatau.  Also Procyon as an alternative to CFR\n",
            "time": null
        },
        {
            "user": "user30814",
            "text": "javap doesn't work. Could you please check your suggestions before actually submitting them?\n",
            "time": null
        },
        {
            "user": "user30814",
            "text": "The output of Procyon: pastebin.com/V2i3EXuu\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "javap is not designed to handle obfuscated code at all. Luckily, the Krakatau disassembler is designed to work with obfuscated bytecode. Anyway, I'll try decompiling this myself when I get home. I suspect that OP just isn't using the right tools.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First off, you should never use <pre><code>javap</code></pre> when dealing with obfuscated applications, because <pre><code>javap</code></pre> is not designed to handle malicious bytecode, and can easily be thwarted in a number of ways. Luckily, the Krakatau disassembler is specifically designed for working with obfuscated bytecode and can handle pretty much anything. (If you find anything that runs on the JVM and can't be disassembled, please file a bug). Luckily, in this case it disassembles without errors.\nIn addition to the bytecode disassembler and assembler, Krakatau also contains a Java decompiler which is specifically designed for decompiling obfuscated bytecode. It's not particularly user friendly, but it can often decompile stuff that no other decompiler can handle. In this case, Krakatau was able to decompile your application without errors after some minor fixes.\nIn order to decompile your app with Krakatau, I had to do two things:\n\nFix a Python 2 unicode handling error (the <pre><code>'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in range(128)</code></pre> message you got) by changing <pre><code>.decode()</code></pre> to <pre><code>.decode('utf8')</code></pre>.\nSupply the Spigot library with the <pre><code>-path</code></pre> option. I had to modify the Spigot jar slightly first, to move the bukkit part to the right path (it expects classes at <pre><code>org/bukkit/craftbukkit/entity/CraftPlayer</code></pre>, but that class is located at <pre><code>bukkit/craftbukkit/v1_15_R1/entity/CraftPlayer</code></pre> in the Jar I downloaded).\n\nAnyway, once that was done, the obfuscated jar you provided decompiled without errors. Note that the jar makes use of <pre><code>invokedynamic</code></pre>, which can't be decompiled in general, since it is a bytecode feature that has no Java equivalent. In order to warn you of this, Krakatau outputs comments in the decompiled source like this:\n<pre><code>                label12: {\n                    try {\n                        if (!/*invokedynamic*/false) {\n                            break label12;\n                        }\n                        if (b) {\n                            break label12;\n</code></pre>\nIn cases like this, you need to consult the disassembled bytecode to see exactly what it is doing:\n<pre><code>L14:    iload 6 \nL16:    ifne L8 \nL19:    invokedynamic InvokeDynamic invokeStatic Method [c24] '\\u200c\\u2001\\u2005\\u2001' [u26] : '\\ufb05\\u58d7\\ufb06\\u0226\\udb3d\\u78ef\\ufb09\\u0226\\ufb00\\u58d5\\udb3d\\u221f\\udb32' '()L\\u2004\\u2006\\u2007\\u2007;' \nL24:    invokedynamic [id154] \nL29:    invokedynamic InvokeDynamic invokeStatic Method [c24] '\\u200c\\u2001\\u2005\\u2001' [u26] : [nat157] \nL34:    invokedynamic InvokeDynamic invokeStatic Method [c24] '\\u200c\\u2001\\u2005\\u2001' [u26] : '\\ufb05\\u58d7\\ufb06\\u0226\\udb3d\\u78ef\\ufb09\\u0226\\ufb00\\u58d5\\udb3d\\u221f\\udb32' '()L\\u2004\\u2006\\u2007\\u2007;' \nL39:    new '\\u200b\\u2007\\u2006\\u200d' \nL42:    dup \nL43:    aload 4 \n</code></pre>\nAs far as obfuscations go, the main obfuscations I noticed were a) renaming everything to unicode, and b) inserting dummy fields and a bunch of fake control flow branching on those fields. Here is an example of the latter in the decompiled output:\n<pre><code>    boolean b = \\u200e\\u200a;\n    label0: {\n        if (b) {\n            break label0;\n        }\n        if (b) {\n            break label0;\n        }\n        \\u2005\\u200c\\u2005\\u2009 = new java.util.HashMap();\n        if (!b) {\n        }\n    }\n</code></pre>\nNote that the Krakatau decompiler performs a lot of analysis to simplify the control flow. It is no wonder that other decompilers would just give up when seeing complicated control flow like this.\nIt is also notable that this is a fairly weak obfuscation. In particular, it creates a static field and branches on the value, but it never actually assigns to that field, so the field can just be replaced by a constant to simplify the bytecode. This reminds me a bit of bytecode I've seen that was obfuscated by ZKM, so it is possible that your friend was using ZKM.\nFor example, after I patched the jar to replace the static fields with a constant <pre><code>false</code></pre> and decompiled it again, Krakatau's constant propagation was able to completely simplify away the fake control flow. Here's the decompiled version of the same function as above after replacing the field with <pre><code>false</code></pre>:\n<pre><code>static {\n    \\u2005\\u200c\\u2005\\u2009 = new java.util.HashMap();\n}\n</code></pre>\n",
            "votes": "4",
            "user": "tony",
            "time": "Aug 16, 2022 at 18:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user30814",
                    "text": "<span class=\"comment-copy\">Very good explanation! I've gone thru the code before and managed to get it sorted out. My main interest is now finding out the mechanisms the code actually secured itself from classic deobfuscators. I think I'll figure it out myself though. Thanks for the answer!</span>",
                    "time": null
                },
                {
                    "user": "user30814",
                    "text": "<span class=\"comment-copy\">PS: Are you saying that javap may be vulnerable?</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@KrzysztofSzewczyk I doubt there's remote code execution, but javap can easily be DOSed or made to output useless or misleading results.</span>",
                    "time": null
                },
                {
                    "user": "user30814",
                    "text": "<span class=\"comment-copy\">Alright, that's what I wanted to know. Thank you very much!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Before tossing this at a decompiler you should use automated tools like java-deobfuscator to clean up the illegal names and remove some of the control-flow obfuscation. \nThis can be accomplished with this config (Assuming you have a bukkit jar handy):\n<pre><code>input: unnamedObf.jar\noutput: unnamedObf-clean.jar\npath: [rt.jar, bukkit.jar]\ntransformers:\n  - com.javadeobfuscator.deobfuscator.transformers.general.removers.IllegalSignatureRemover\n  - com.javadeobfuscator.deobfuscator.transformers.general.removers.LineNumberRemover\n  - com.javadeobfuscator.deobfuscator.transformers.general.removers.LocalVariableRemover\n  - com.javadeobfuscator.deobfuscator.transformers.general.removers.SyntheticBridgeRemover\n  - com.javadeobfuscator.deobfuscator.transformers.normalizer.PackageNormalizer\n  - com.javadeobfuscator.deobfuscator.transformers.normalizer.ClassNormalizer\n  - com.javadeobfuscator.deobfuscator.transformers.normalizer.FieldNormalizer\n  - com.javadeobfuscator.deobfuscator.transformers.normalizer.MethodNormalizer\n  - com.javadeobfuscator.deobfuscator.transformers.general.peephole.PeepholeOptimizer\n</code></pre>\nHere's a comparsion for before & after using CFR.\n \nIt doesn't clear everything up, there's still plenty of obfuscator-generated invoke-dynamic calls and opaque predicates, but its definitely a better starting point than the original jar.\n",
            "votes": "0",
            "user": "Col-E",
            "time": "Jan 18, 2020 at 8:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user30814",
                    "text": "<span class=\"comment-copy\">The tool doesn't really help that much, because CFR still fails to decompile certain methods.</span>",
                    "time": null
                }
            ]
        }
    ]
}