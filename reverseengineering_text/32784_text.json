{
    "title": "How to replicate this encoding algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/32784/how-to-replicate-this-encoding-algorithm",
    "content": "I am writing a helper script at work for when new people start work and need help setting up respective applications - the application will write configuration files to be loaded into the various applications. I'm not looking to get a hold of anyone's credentials through this, this is to actually hash them into something else.\nThe hashed string will look like this and represents an empty text field:\n<pre><code>00160E0F101112131415161718191A1B1C1D1E1F202122232425262728292A0042\n</code></pre>\nIf we split this up into bytes, we will have 33 of them.\n<pre><code>Bytes: 00 16 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 00 42\nIndex: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n</code></pre>\nHere are the results for various inputs into the text field that returns the hash:\n<pre><code>\"ABC0123\" = 07161717176363636315161718191A1B1C1D1E1F202122232425262728292A00A3\n\"ABCBBBB\" = 07161717171110131215161718191A1B1C1D1E1F202122232425262728292A005D\n\"ABCDEFGH\" = 08161717171717171707161718191A1B1C1D1E1F202122232425262728292A0066\n\"9999999999999999999999999999999\" = 1F166F6C6D6A6B686976777475727370717E7F7C7D7A7B787906070405020300B6\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" = 1A16171717171717170707070707070707171717171717171767676728292A0071\n</code></pre>\nThe conclusion I draw from this is as follows:\n\nThe byte at index 0 represents unhashed string length, or byte length I guess is the same length.\nThe byte at index 1 remains 16 through all permutations.\nIndex 2 through 30 are placeholders for each character in the unhashed string, starting at 0E and increasing by 1 all up to 2A. The position seems to be involved in the conversion process as well since the same character gets different values depending on position.\nIndex 31 remains 00 and I have yet to find a permutation where this changes.\nIndex 32 seems to be arithmetically involved somehow but I cannot figure out how.\n\nThe application used is from 2000 something and used internally since then. It's not super important, but I am too deep in the rabbit hole to not try and see this through at this point.\nThis is also my first foray into decompiling with <pre><code>ghidra</code></pre> and I have found the place in the code that represents the GUI part of where this information is put in by the user, but I can't seem to find the encoding/conversion process for certain and I can't follow it along either since C was never my language unfortunately. I saw a header called <pre><code>PascalString</code></pre> which seems to be something like what this is but I still can't figure this out.\n",
    "votes": "0",
    "answers": 0,
    "views": "61",
    "tags": [
        "c",
        "encryption",
        "hex",
        "encodings",
        "strings"
    ],
    "user": "Chokehold",
    "time": "Mar 3, 2024 at 4:57",
    "comments": [
        {
            "user": "user7290573",
            "text": "Can you share the binary? It'll be pretty difficult to contribute anything other than guesswork, otherwise. If not, maybe you could try comparing sequential hashes - A, B, C, etc. - the more data, the better.\n",
            "time": null
        },
        {
            "user": "Chokehold",
            "text": "I would love to but since the application is proprietary I'm not entirely sure of the legality of it.\n",
            "time": null
        }
    ],
    "answers_data": []
}