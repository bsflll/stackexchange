{
    "title": "Applying right offsets of Android Native Code in Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/33386/applying-right-offsets-of-android-native-code-in-ghidra",
    "content": "I'm reverse engineering x86_64 native code library that's loaded by an application.\nI use Ghidra to get the following decompiled code and I'm trying to make sense of the function calls and different offsets:\n<pre><code>    1. std::__ndk1::ios_base::getloc();\n    2. plVar1 = (facet *)std::__ndk1::locale::use_facet(&local_1a0,(id *)&std::__ndk1::ctype<char>::id );\n    3. cVar3 = (**(code **)(*plVar1 + 0x38))(plVar1,10);\n    4. std::__ndk1::locale::~locale(&local_1a0);\n    5. plVar2 = (basic_istream *)FUN_00165008(local_180,&local_1e8,(int)cVar3);\n    6. if (((byte)plVar2[*(long *)(*(long *)plVar2 + -0x18) + 0x20] & 5) != 0) {\n    7.     do_nasty_stuff();\n    8. }\n</code></pre>\nIn Ghidra GDT files define names of classes, types, functions, sizes, offsets, etc..\nI added and applied jni_all in my Ghidra project, and retyped the relevant parameters and variables (for example <pre><code>plVar1</code></pre> to <pre><code>facet *</code></pre> and <pre><code>plVar2</code></pre> to <pre><code>basic_istream *</code></pre>). However, these structure definitions are empty. \nI created a new native android project, defined a variable of type <pre><code>basic_istream *</code></pre>, which led to the file <pre><code>istream.h</code></pre>. I tried using \"Parse C Source\" in Ghidra and added the file in the configuration, but I couldn't generate a GDT file.\nCan someone explain how to adjust it for clear decompilation? Thanks!\n",
    "votes": "0",
    "answers": 0,
    "views": "45",
    "tags": [
        "ghidra",
        "android",
        "x86-64",
        "shared-object"
    ],
    "user": "Danking",
    "time": "Feb 15 at 14:20",
    "comments": [],
    "answers_data": []
}