{
    "title": "How to programatically extract function names, function arguments and strings from a .NET binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/14448/how-to-programatically-extract-function-names-function-arguments-and-strings-fr",
    "content": "My goal is to \n\nextract function names,\nthe libraries they come from (if the functions were imported),\nfunction arguments, and\nstrings\n\nfrom a .NET binary. How can I do this?\nIs this possible using tools like JustDecompile\nor .NET Reflector? Do they offer an API that allows to do this?\nI noticed IDA's Function Window is populated, but the Strings Window is not. In addition, I guess it would be easier (e.g. to get function arguments) to use a tool that does decompilation...\nPS:\nThe code is not obfuscated, it is not malware but regular software.\n",
    "votes": "1",
    "answers": 2,
    "views": "857",
    "tags": [
        "windows",
        "tools",
        ".net",
        "decompiler"
    ],
    "user": "langlauf.io",
    "time": "Jan 19, 2017 at 19:55",
    "comments": [],
    "answers_data": [
        {
            "content": "dnlib, used by the very powerful dnSpy (.net disassembler), is an open source .net library to analyse .net modules & assemblies which may be what you are looking for.\nThey also have an example similar to your use case:\nOpens mscorlib.dll and then prints out all types in the assembly, including the number of methods, fields, properties and events each type has.\n",
            "votes": "1",
            "user": "jg0",
            "time": "Jan 20, 2017 at 1:57",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "A while back i wrote this cheapo dependency tool. It's on my GitHub. https://github.com/marshalcraft/CheapoDllDependencyTool?files=1\n",
            "votes": "0",
            "user": "marshal craft",
            "time": "Jan 21, 2017 at 4:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}