{
    "title": "Is it possible to make a dynamic memory allocated .data segment to static in a file?",
    "link": "https://reverseengineering.stackexchange.com/questions/26847/is-it-possible-to-make-a-dynamic-memory-allocated-data-segment-to-static-in-a-f",
    "content": "Sorry if this is a dumb question I'm new to assembly.\nBasically I want to modify a function in a .exe file to return with a different data, but my issue is that the memory location of the data segment I want to return is always changing after system restart. For example currently it is <pre><code>.data:018C74F1 byte_18C74F1</code></pre>, next time it's going to differ like <pre><code>.data:16874F1 byte_16874F1</code></pre>. So due to this I am unable to change the return value to that in the file. Is there any way to workaround this?\nThank you very much for any answer given!\n",
    "votes": "0",
    "answers": 1,
    "views": "190",
    "tags": [
        "ida",
        "ollydbg",
        "static-analysis",
        "dynamic-analysis",
        "functions"
    ],
    "user": "Sejt",
    "time": "Jan 22, 2021 at 20:19",
    "comments": [],
    "answers_data": [
        {
            "content": "What you are observing is the effect of ASLR.\nYou should focus on the instructions which access this memory location.\nTo put simply:\n\non x86, you will find some .reloc entries pointing to these instructions;\non x64, the memory operand is RIP related (this is hidden in IDA by default).\n\nSince you tagged <pre><code>ollydbg</code></pre>, I'm guessing this is for x86, and the 'bad' news is it's more tedious to patch than for x64. The main reason is related to how the .reloc is working.\nWhen you application is loading, the loader will find a different base image and will apply relocations. Basically (really simplified) it takes 32-bit values and adjust them accordingly to the base address. Those values are offsets inside an instruction. If you modify/patch the instruction and change the offset location (or remove it), the .reloc will corrupt the instruction.\nAnother solution is creating a new thread and keep modifying this memory location, this is what most trainers do.\n",
            "votes": "0",
            "user": "wisk",
            "time": "Jan 26, 2021 at 6:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Sejt",
                    "text": "<span class=\"comment-copy\">Thank you for the answer! What I realised tho if I just change the address to the correct one and save it to an exe with olly then next time that address is going to automatically relocated to the correct one, not reverted, but If I write my code at the end of the file where some free spaces left then the address stays. Maybe do you know what causing this?</span>",
                    "time": null
                },
                {
                    "user": "Sejt",
                    "text": "<span class=\"comment-copy\">What I mean is if am using something like <code>MOV AL,BYTE PTR DS:[1363DA0]</code> at the free spaces down, next time on rebase/system restart it is not going to differ thus my code won't work, but If I put anywhere above that, the address is going to change to something like <code>DS:[4378DA0]</code> which is correct. I don't know why it happens because at the bottom the instructions I put executing without any problem, only the memories not changing there which is my issue.</span>",
                    "time": null
                },
                {
                    "user": "wisk",
                    "text": "<span class=\"comment-copy\">Reloc applies at a specific address, in your free spaces, you won't find any entries for it. You can add a new entry in the .reloc section, but it might be a bit tricky. Another solution is to calculate the address during run-time. To do so, use a common snippet: <code>call $+5 ; pop reg ; mov al, byte[ds:reg+n]</code> The <code>call $+5</code> might differ depending on the assembler, and to calculate <code>n</code> you have to apply this formula <code>dst - addr of pop reg</code>. You can use a label to make the assembler calculates the offset for you. Good luck :)</span>",
                    "time": null
                },
                {
                    "user": "Sejt",
                    "text": "<span class=\"comment-copy\">Wow thank you so much! I would have never tought about calculating the address runtime. :D</span>",
                    "time": null
                }
            ]
        }
    ]
}