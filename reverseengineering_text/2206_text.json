{
    "title": "Can anyone here show me the binary opcodes for these x86 assembly instructions? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/2206/can-anyone-here-show-me-the-binary-opcodes-for-these-x86-assembly-instructions",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Reverse Engineering Stack Exchange.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI want the exact binary opcodes executable to CPU directly.\n<pre><code> [BITS 16]      ; 16 bit code generation\n[ORG 0x7C00]   ; Origin location\n\n; Main program\nmain:       ; Label for the start of the main program\n\n mov ax,0x0000  ; Setup the Data Segment register\n        ; Location of data is DS:Offset\n mov ds,ax  ; This can not be loaded directly it has to be in two steps.\n        ; 'mov ds, 0x0000' will NOT work due to limitations on the CPU\n\n mov si, HelloWorld ; Load the string into position for the procedure.\n call PutStr    ; Call/start the procedure\n\njmp $       ; Never ending loop\n\n; Procedures\nPutStr:     ; Procedure label/start\n ; Set up the registers for the interrupt call\n mov ah,0x0E    ; The function to display a chacter (teletype)\n mov bh,0x00    ; Page number\n mov bl,0x07    ; Normal text attribute\n\n.nextchar   ; Internal label (needed to loop round for the next character)\n lodsb      ; I think of this as LOaD String Block \n        ; (Not sure if thats the real meaning though)\n        ; Loads [SI] into AL and increases SI by one\n ; Check for end of string '0' \n or al,al   ; Sets the zero flag if al = 0 \n        ; (OR outputs 0's where there is a zero bit in the register)\n jz .return ; If the zero flag has been set go to the end of the procedure.\n        ; Zero flag gets set when an instruction returns 0 as the answer.\n int 0x10   ; Run the BIOS video interrupt \n jmp .nextchar  ; Loop back round tothe top\n.return     ; Label at the end to jump to when complete\n ret        ; Return to main program\n\n; Data\n\nHelloWorld db 'Hello World',13,10,0\n\n; End Matter\ntimes 510-($-$$) db 0   ; Fill the rest with zeros\ndw 0xAA55       ; Boot loader signature\n</code></pre>\nopcodes for x86 Intel Architecture; must be 16-bit opcodes ONLY.\n",
    "votes": "-5",
    "answers": 2,
    "views": "1k",
    "tags": [
        "machine-code"
    ],
    "user": "assembling girl",
    "time": "11 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "What's wrong with using an assembler?\n",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "What are you talking about?  Define \"binary opcode\" precisely.\n",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "Can you, please, explain us why you cannot use an assembler and a disassembler to get back the opcodes? Really, I cannot understand what's the point of the question.\n",
            "time": null
        },
        {
            "user": "Robert Cartaino",
            "text": "This site is to ask about principles of Reverse Engineering, but we are not here perform work solicited in this manner. Sorry about the confusion, but I have to close this as off topic.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>C:\\>debug\n-a\n1448:0100 mov ax,0\n1448:0103\n-u 100 102\n1448:0100 B80000        MOV     AX,0000\n-q\n</code></pre>\nC:>echo opcode for mov ax,0000 is b80000 and so on\n<pre><code>**opcode for mov ax,0000 is b80000 and so on**\n</code></pre>\nC:>\n@till\ntool <pre><code>Debug.exe</code></pre>\nmethod <pre><code>assembled and disassembled</code></pre> the mnemonic \n@nomik\nollydbg will <pre><code>not output 16 bit opcodes</code></pre> since it is <pre><code>32bit debugger</code></pre> you wold need a 16 bit application that assembles and disassembles the mnemonic to output 16 bit opcodes like \n<pre><code>Debug.Exe(inbox),Td.exe(ex borland),grdb.exe(ladSoft),trw2000.exe (google site:tuts4you)</code></pre> etc\n",
            "votes": "1",
            "user": "blabb",
            "time": "Jun 10, 2013 at 7:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Till",
                    "text": "<span class=\"comment-copy\">Even though this would also match what I made out of this <i>question</i>, providing some more details on what you were doing, which tool you were using etc. could improve this answer a lot.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "An easy way, is to use OllyDbg to write the assembly instructions you want by editing an executable being debugged.The opcodes are shown between the address and the assembly instructions.\nI hope i understood the (god make it a) question (better called 'request').\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}