{
    "title": "What's the meaning of dword_XXXX and offset dword_XXXX in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/18946/whats-the-meaning-of-dword-xxxx-and-offset-dword-xxxx-in-ida",
    "content": "Consider the following code:\nIn C++:\n<pre><code>SomeClass* globalPointer; // we don't know what it points to, but it's not null a pointer, it's initialized\n\nvoid someFunction()\n{\n  globalPointer->someVirtualFunction();\n}\n</code></pre>\nIn IDA (inside <pre><code>someFunction</code></pre>):\n<pre><code>mov     ecx, dword_XXXX ; ecx = globalPointer\nmov     eax, [ecx] ; eax = vtable\njmp     dword ptr [eax+30h] ; call vtable[0x30]\n</code></pre>\nThe meaning of <pre><code>dword_XXXX</code></pre> is just a pointer value. I tried to check it this way:\n<pre><code>printf(\"Address of pointer = %p, pointer's value = %p\n\", &otherPointer, otherPointer);\n</code></pre>\nAnd I got:\n<pre><code>push dword_XXXX ; otherPointer\npush offset dword_XXXX ; &otherPointer\npush offset format ; \"Address of pointer = %p, pointer's value = %p\n\"\n\ncall printf\n</code></pre>\nThus <pre><code>dword_XXXX</code></pre> seems to be a pointer's value and <pre><code>offset dword_XXXX</code></pre> seems to be an address of the pointer.\nHowever, I noticed another code (which can be expressed the same as the c++ function I provided above):\n<pre><code>SomeClass2* globalPointer2;\n\nvoid someFunction2()\n{\n  globalPointer2->someVirtualFunction2();\n}\n</code></pre>\nAnd IDA surprisingly gave me (inside <pre><code>someFunction2</code></pre>):\n<pre><code>mov eax, dword_XXXX ; eax = globalPointer2\nmov ecx, offset dword_XXXX ; ecx = &globalPointer2\njmp dword ptr [eax+5Ch] ; call [globalPointer2+0x5C] with &globalPointer2 as this?? It should be call vtable[0x5C]\n</code></pre>\nI checked the values and found out that IDA somehow \"changes\" the meaning of <pre><code>dword_XXXX</code></pre>, in this case it actually was:\n<pre><code>mov eax, dword_XXXX ; eax = vtable\nmov ecx, offset dword_XXXX ; ecx = globalPointer2\njmp dword ptr [eax+5Ch] ; call vtable[0x5C]\n</code></pre>\nWhy the meaning of <pre><code>dword_XXXX</code></pre> was different in the second case? In the first case it was just <pre><code>pointer</code></pre>, but in the second case it was <pre><code>*pointer</code></pre>.\nAnd the meaning of <pre><code>offset dword_XXXX</code></pre> in the first case was <pre><code>&pointer</code></pre> and in the second case was <pre><code>pointer</code></pre>.\nI'm sorry if something is unclear, I really tried to simplify that as much as possible.\n",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "x86",
        "nasm"
    ],
    "user": "anx199",
    "time": "Jul 31, 2018 at 18:03",
    "comments": [
        {
            "user": "Avery3R",
            "text": "Remove your answer from the question and add it as an answer. You can post answers to your own questions\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I think I figured out what's going on.\nThe opcodes for the printing were (assuming <pre><code>dword_AAAAAAAA</code></pre> instead of general <pre><code>dword_XXXX</code></pre>):\n<pre><code>FF 35 AA AA AA AA    push dword_AAAAAAAA; otherPointer\n68 AA AA AA AA       push offset dword_AAAAAAAA; &otherPointer\n</code></pre>\nThanks to this site, I know that the above instructions are equal to:\n<pre><code>push [0xAAAAAAAA]; push otherPointer\npush 0xAAAAAAAA;   push &otherPointer\n</code></pre>\nSo, in this case, <pre><code>dword_XXXX</code></pre> is equal to value of a pointer. However, in the second case (again assuming <pre><code>dword_AAAAAAAA</code></pre> instead of general <pre><code>dword_XXXX</code></pre>):\n<pre><code>A1 AA AA AA AA    mov eax, dword_AAAAAAAA ; eax = vtable\nB9 AA AA AA AA    mov ecx, offset dword_AAAAAAAA ; ecx = globalPointer2\n</code></pre>\nAnd it's equal to:\n<pre><code>mov eax, [0xAAAAAAAA] ; eax = vtable\nmov ecx, 0xAAAAAAAA ; ecx = globalPointer2\n</code></pre>\nThus in this case <pre><code>dword_XXXX</code></pre> is equal to <pre><code>*pointer</code></pre> rather than <pre><code>pointer</code></pre>.\nTherefore I think the answer is: it depends. We need to understand what <pre><code>dword_XXXX</code></pre> means - it can be a pointer, an address of the pointer, or even pointer to pointer to pointer, and so on. But IDA gives us a hint: <pre><code>offset dword_XXXX</code></pre> means a raw value of whatever <pre><code>dword_XXXX</code></pre> is and <pre><code>dword_XXXX</code></pre> gives a dereferenced value of it.\n",
            "votes": "5",
            "user": "anx199",
            "time": "Aug 3, 2018 at 12:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}