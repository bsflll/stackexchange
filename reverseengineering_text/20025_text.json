{
    "title": "Basic Blocks and Data Flow Analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/20025/basic-blocks-and-data-flow-analysis",
    "content": "I am looking to do some Data Flow Analysis via code. I have already the code that parses a binary and disassembles it (x86/x64) and creates Basic Blocks.\nNow what I would like to do is, for any Basic Block, analyze the effect of each instruction and compose all these effects to derive information\nat basic block boundaries.\nAlso I would like to perform Variable Tracking and Live Variable Analysis. Last, CFG (Control Flow Graph) to see all these effects across basic blocks.\nIs there any available C/C+ Lib or subset of any Open Source Project that can help me achieve this?\nThanks!\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "control-flow-graph"
    ],
    "user": "fred26",
    "time": "Jan 4, 2019 at 14:23",
    "comments": [
        {
            "user": "niosega",
            "text": "you Can maybe reuse some piece of code from the LLVM project.\n",
            "time": null
        },
        {
            "user": "fred26",
            "text": "To use LLVM, first I'll need to lift my code x86 to LLVM bitcode? How do you envision the best approach to use LLVM in this case? I see the LLVM has interesting classes and functions for basic blocks\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You could look at the radare project: \nhttps://github.com/radare/radare2\nTheir ESIL representation of mnemonics can help you track down the access to variables, registers and even flags.\nhttps://radare.gitbooks.io/radare2book/content/disassembling/esil.html\nFor example, <pre><code>inc edi</code></pre> will result in <pre><code>edi,++=,$o,of,=,$s,sf,=,$z,zf,=,$p,pf,=</code></pre>\n",
            "votes": "3",
            "user": "Jongware",
            "time": "Dec 2, 2018 at 11:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "A nice framework to look at is Triton which does a good job in Dynamic Symbolic Execution. I ended up looking at the code and implementing my own solution with their same approach.\n",
            "votes": "1",
            "user": "fred26",
            "time": "Jan 4, 2019 at 14:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}