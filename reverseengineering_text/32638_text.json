{
    "title": "Searching for a byte pattern and then hooking all instances of it using frida on iOS",
    "link": "https://reverseengineering.stackexchange.com/questions/32638/searching-for-a-byte-pattern-and-then-hooking-all-instances-of-it-using-frida-on",
    "content": "I'm using a frida script to scan for a certain byte pattern when I launch an iOS app.\nI can log each offset and confirm these are correct by also printing out the instructions at those locations and comparing them with the disassembly from ghidra.\nThe problem I am having is that I would like to also hook each of those locations. Below is the code I am using. If I comment out the <pre><code>hook.detach()</code></pre> command, the log commands will successfully print out the offsets and the app will run, but those locations will never be hooked (which I assume is as expected if the hook is detached). If I comment out the <pre><code>hook.detach()</code></pre> command, then the app will launch, it will log the offsets where the pattern is found, followed by the first offset being hooked, but the app will immediately crash at that point.\n<pre><code>var m = Process.enumerateModules()[0];\nvar pattern = '01 10 00 D4 03 00 80 D2 63 00 03 9A';\n// this represents:\n// svc #0x80\n// mov x3, #0\n// adc x3, x3, x3\nvar results = Memory.scanSync(m.base, m.size, pattern);\nvar base = Process.enumerateModules()[0].base;\n\nfor (var result in results) {\n    console.log('[+] pattern found:', results[result].address);\n    var hook = Interceptor.attach(results[result].address, {\n        onEnter: function(args) {\n            console.log('[+] Hook triggered at:', results[result].address);\n        },\n    });\n    //hook.detach();\n}\n</code></pre>\nFurther information after more tests following @Robert's question.\nIf I launch the application from frida including an empty script, and then add the above to the script and save it with the application still running, it will find the offsets of the byte pattern and implement those hooks, but they are not called again by that point.\nThe byte pattern exists four times in the application I'm looking at. If I manually specify those offsets I can successfully attach to each one on it's own, suggesting it is not an issue with the location itself, but if I try and attach to more than one at a time, in any combination, then frida will also immediately terminate. So it seems to be something to do with attaching to more than one location at launch. An example of the four memory locations returned are:\n<pre><code>0x104a5c61c, 0x104a5d180, 0x104a5d1b4, 0x104a5d1fc\n</code></pre>\nand if I substract the base base address of the module from these can again confirm in ghidra that the instructions I'm looking for are at those offsets.\n",
    "votes": "0",
    "answers": 1,
    "views": "128",
    "tags": [
        "assembly",
        "memory",
        "ios",
        "frida"
    ],
    "user": "Jon",
    "time": "Jan 18, 2024 at 22:30",
    "comments": [
        {
            "user": "Robert",
            "text": "I assume are searching for Frida's MemoryAccessMonitor. <pre><code>Interceptor.attach</code></pre> will only work if the pattern points to a function (not when it points into a function). What is represented by the pattern that you search?\n",
            "time": null
        },
        {
            "user": "Jon",
            "text": "Hi @Robert, I have added a comment to the code snippet above of the instructions represented by the byte pattern and some other information following further investigation. I thought that it was possible to intercept at a specific offset, e.g. to read the contents of a register, such as I have done here reverseengineering.stackexchange.com/questions/27925/….\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Sadly I don't have this binary any more to be able to test this, but believe the reason is \"an instruction level hook has just a function\" and not <pre><code>onEnter</code></pre> or <pre><code>onLeave</code></pre>, as opposed to a function level hook which does. Possibly what @Robert was referring to in the comment.\nThis is mentioned here with a live example in Ole André Vadla Ravnås's talk at r2con on Combining frida-trace with radare2. Yes I'm aware of just linking to answers without providing more context is frowned upon but there is only a recording and no slides available.\n",
            "votes": "0",
            "user": "Jon",
            "time": "Dec 18, 2024 at 13:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}