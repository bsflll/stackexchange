{
    "title": "How can i get offset of class member manualy(without source of )",
    "link": "https://reverseengineering.stackexchange.com/questions/11457/how-can-i-get-offset-of-class-member-manualywithout-source-of",
    "content": "I have a simple C++ program compiled with  Visual Studio 2005. I know that this program has a class <pre><code>base</code></pre> with a member variable <pre><code>x</code></pre>.\nHow can I identify the variable x when looking at the x86? Here is a function of this binary.\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "c++"
    ],
    "user": "LighFusion",
    "time": "Dec 16, 2015 at 17:12",
    "comments": [
        {
            "user": "user2823000",
            "text": "Do you know the language in which this program was written?\n",
            "time": null
        },
        {
            "user": "LighFusion",
            "text": "@Dillinur yes its C++ visual studio 2005, but i dont have any additional info like pdb or Coff, here is the source - pseudo code pastebin.com/5NLDV3S1 , asm pastebin.com/GRuJWSm6\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For Visual Studio, ecx usually points to the current this object. As you can see, it's placed in esi at the start of your program.\n\n.text:1090B641                 mov     esi, ecx\n\nesi is not modified elsewhere, and is always used to access variables with offsets. That should indicate to you that it's the address of a struct, and each offset points to a given variable.\n\n.text:1090B651                 mov     dword ptr [esi], offset off_10959BE4\n.text:1090B660                 mov     [esi+1Ch], eax\n.text:1090B663                 mov     [esi+10h], eax\n.text:1090B666                 mov     [esi+3Ch], ebx\n.text:1090B669                 mov     [esi+38h], ebx\n.text:1090B66C                 mov     [esi+40h], ebx\n.text:1090B66F                 mov     byte ptr [esi+44h], 0ACh\n\nYou'll have to find the purpose of each of those variables by looking at their size and how they are used in your program. In order to help you with that, you can define a new struct in Ida by going in the Structs tab (Shift+F9), and defining a new struct with variables corresponding to those offsets. You can then map them with T to help you following them.\nSee for instance this blog post.\n",
            "votes": "2",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "LighFusion",
                    "text": "<span class=\"comment-copy\">thx a lot, i will try to do that.</span>",
                    "time": null
                }
            ]
        }
    ]
}