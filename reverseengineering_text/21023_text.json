{
    "title": "Reverse engineering android native packer",
    "link": "https://reverseengineering.stackexchange.com/questions/21023/reverse-engineering-android-native-packer",
    "content": "im trying to Reverse engineering an android app and the app have 4 folders in the /data/data/{package} folder \n<pre><code>├───app_dexprotector\n│       823517D25836B88F1C499C02370A047E.dat\n│       823517D25836B88F1C499C02370A047E.dex\n│\n├───app_outdex\n│       libdexprotector.bpqn57.12456.so\n│\n├───cache\n└───lib\n        libiconv.so\n        libzbarjni.so\n</code></pre>\nand all the files are the same except app_outdex file and when I start the app app_dexprotector folder will be modified after that a file will create on app_outdex then will delete immediately I create a copy of that file with Termux and inotify-wait and the interesting part is always the size of the file is different i searched the java code of the app and there is only an application class with a huge bytecode array and one native method like this : \n<pre><code>    public static native int tfAHDD(Object obj, int I, int i2, int i3, int i4, int i5, int i6, int i7, int i8);\n</code></pre>\nthe whole class is so long but it's only because of the byte array this is the link of the class my main questions are why the file has different sizes every time and why there are not other native methods? how the app will run this method and finally how can I analysis this .so file\n",
    "votes": "5",
    "answers": 1,
    "views": "892",
    "tags": [
        "c++",
        "android",
        "c",
        "java"
    ],
    "user": "Amin",
    "time": "Apr 2, 2019 at 15:06",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "Did you analyze the Java code with Apktool or dex2jar?\n",
            "time": null
        },
        {
            "user": "Amin",
            "text": "@Biswapriyo there is nothing to analyze only an application class and i upload it and you can see it too i can understand how the app loads classes without calling in java\n",
            "time": null
        },
        {
            "user": "Behroozfar",
            "text": "The app is using DexProtector. Check this link : gameguardian.net/forum/topic/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can't analyze native functions with a standard decompiler because native functions are not implemented in the Java Bytecode (The Java Native Keyword and Methods).\nYou have to use common x86 disassemblers (Like IDA, JEB) to analyze the native functions.\nAt first, search for <pre><code>System.loadLibrary</code></pre> calls, to see which native library gets loaded (should be in a static block)\nOnce you found the native library you have to open it with a disassembler like IDA and go in Exports section:\n\nHere you can see the implementation of your native functions.\nOf couse you cannot expect java bytecode here, but only C pseudocode (if your disassebler supports it)\n",
            "votes": "3",
            "user": "MarianD",
            "time": "Jun 23, 2021 at 15:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}