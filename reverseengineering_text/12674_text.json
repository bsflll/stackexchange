{
    "title": "Obtaining the argument text from a carg_t IDA Python object",
    "link": "https://reverseengineering.stackexchange.com/questions/12674/obtaining-the-argument-text-from-a-carg-t-ida-python-object",
    "content": "I have a decompiled result from calling idaapi.decompile(). \nFrom the decompiled result, I obtain the treeitems and loop through them looking for items that are of type cexpr_t and have the opname of \"call\".\nI can then grab the argument list (carglist_t) and I can easily see that I have the call I am looking for based on the number of carg_t items in the list.\nWhat I would like to get is the text belonging to the carg_t object. If I call 'string', it returns None.\nHow can I do this?\nI know that the text can be generated because I can call get_pseudocode on the decompiled result and print the lines of the function. However, I wanted to avoid parsing the function call text and instead have IDA give me each argument since it has already done all of the required parsing.\nIf it matters, I am running IDA 6.9.\n",
    "votes": "0",
    "answers": 1,
    "views": "867",
    "tags": [
        "ida",
        "decompilation",
        "idapython"
    ],
    "user": "ericg",
    "time": "May 17, 2016 at 20:24",
    "comments": [],
    "answers_data": [
        {
            "content": "You can get the string based on the <pre><code>carg_t</code></pre>'s element type (its <pre><code>ctype_t</code></pre>).\nLet's assume that your <pre><code>carg_t</code></pre> instance is a variable named <pre><code>arg</code></pre>. Then for example, if <pre><code>arg.op == cot_var</code></pre> then the argument's element type is a local variable. You'd get <pre><code>arg</code></pre>'s <pre><code>lvars_t</code></pre> index via <pre><code>arg.v.idx</code></pre> and you can then get that variable's name as follows:\n<pre><code>func.get_lvars()[arg.v.idx].name\n</code></pre>\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "May 17, 2016 at 20:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ericg",
                    "text": "<span class=\"comment-copy\">I can confirm that worked for this case. What if the carg_t instance is a cot_cast or a cot_obj? When it is a cot_cast, it will probably look like (char*)&amp;unk_123456 and I need that text so I can parse out the 123456 which will likely be the memory address of a string. When it is a cot_obj, it is likely to be a static string and it is the string that I want.</span>",
                    "time": null
                },
                {
                    "user": "ericg",
                    "text": "<span class=\"comment-copy\">For cot_obj, in my case, the answer appears to be idc.GetString( cargtVar.obj_ea, -1, idc.ASCSTR_C ). I am finding the information in part from <a href=\"https://www.hex-rays.com/products/decompiler/manual/sdk/structcexpr__t.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/decompiler/manual/sdk/â€¦</a> in the Public Attributes section. I am still working on cot_cast.</span>",
                    "time": null
                }
            ]
        }
    ]
}