{
    "title": "Isolate the call to a function",
    "link": "https://reverseengineering.stackexchange.com/questions/22647/isolate-the-call-to-a-function",
    "content": "Is it possible to call a function of a binary and obtain its result (without calling other functions), to isolate; are there any tools to do this?\n",
    "votes": "1",
    "answers": 1,
    "views": "106",
    "tags": [
        "x86-64",
        "assembly"
    ],
    "user": "jukebox",
    "time": "Nov 30, 2019 at 17:59",
    "comments": [
        {
            "user": "julian",
            "text": "Is the binary a dynamically-linked ELF?\n",
            "time": null
        },
        {
            "user": "jukebox",
            "text": "Yes it's a dynamically-linked ELF @julian\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "Then you can use LIEF as mentioned below\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use Ida's Appcall functionality:\n\nAppcall is a mechanism to call functions inside the debugged program\n  from the debugger or your script as if it were a built-in function.\n  Such a mechanism can be used for debugging, fuzzing and testing\n  applications. Appcall mechanism highly depends on the type information\n  of the function to be called. For that reason it is necessary to have\n  a correct function prototype before doing an Appcall, otherwise\n  different or incorrect results may be returned.\n\nIf it's an elf and you don't have Ida, LIEF is a good option. You can see a tutorial to export an internal function and call it here\n",
            "votes": "3",
            "user": "sudhackar",
            "time": "Dec 1, 2019 at 5:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}