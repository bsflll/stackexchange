{
    "title": "Why decrement a hex value in assembly code?",
    "link": "https://reverseengineering.stackexchange.com/questions/21485/why-decrement-a-hex-value-in-assembly-code",
    "content": "I am running a disassembly of a firmware image for a Cortex-M4 and the entry point is doing something strange.\n<pre><code>EntryPoint:\n00001000         db  0x00 ; '.'\n00001001         db  0xff ; '.'\n00001002         lsls       r7, r7, #0x3\n</code></pre>\nWhy run decrement before on 0x00 and 0xff, what is the reasoning behind it?\n",
    "votes": "0",
    "answers": 0,
    "views": "182",
    "tags": [
        "disassembly",
        "arm",
        "hopper"
    ],
    "user": "Bob R",
    "time": "Jun 14, 2019 at 11:13",
    "comments": [
        {
            "user": "Jeff",
            "text": "Are you sure that that's executable code? <pre><code>db</code></pre> is not a decrement; it means <pre><code>define byte</code></pre>, so those first two lines form a literal <pre><code>0xFF00</code></pre>. <pre><code>lsls r7,r7,#0x3</code></pre> also encodes to <pre><code>0x00FF</code></pre>. Seems to me that it's actually data, not executable code.\n",
            "time": null
        },
        {
            "user": "Bob R",
            "text": "I am not sure that it is executable code at all, its a firmware file that gets flashed onto a Sphero toy's STM32 cpu. Searching for db in the cpu documentation only yielded \"decrement before\" and not define byte which makes much more sense. There do seem to be function calls in the disassembly.\n",
            "time": null
        }
    ],
    "answers_data": []
}