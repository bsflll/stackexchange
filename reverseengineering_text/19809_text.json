{
    "title": "Radare2: pd command ignores cfg.bigendian setting",
    "link": "https://reverseengineering.stackexchange.com/questions/19809/radare2-pd-command-ignores-cfg-bigendian-setting",
    "content": "I am currently using <pre><code>radare2</code></pre> to disassemble a raw ARM binary (bootloader) in little endian format. I used the command <pre><code>e cfg.bigendian = false</code></pre> to set the endianness, but the <pre><code>pd</code></pre> command seems to ignore my settings. In particular, I used the following chain of commands:\n<pre><code>$ r2 -a arm  bootloader.img\n[0x00000000]> s 0xa48\n[0x00000a48]> e cfg.bigendian = false\n[0x00000a48]> pxw 4\n0x00000a48  0xe92d41c0  // This is correct\n[0x00000a48]> pd 1\n0x00000a48      c0412de9  invalid // This is the wrong ordering\n</code></pre>\nWhen I use the following command:\n<pre><code>[0x00000a48]> e cfg.bigendian = true\n[0x00000a48]> pxw 4\n0x00000a48  0xc0412de9 \n[0x00000a48]> pd 1\n0x00000a48      c0412de9       invalid\n</code></pre>\nThe byte ordering of pxw changes, but the byte ordering of pd does not. \nHow do I tell <pre><code>pd</code></pre> (or any other disassembler command) to assume a certain endianness? I am new to using <pre><code>radare2</code></pre>, so it might be that I am missing something here - feel free to point out any mistakes.\n",
    "votes": "1",
    "answers": 0,
    "views": "442",
    "tags": [
        "radare2",
        "disassemblers"
    ],
    "user": "Sleik",
    "time": "Nov 3, 2018 at 19:47",
    "comments": [],
    "answers_data": []
}