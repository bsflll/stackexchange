{
    "title": "Reversing sha1 hash with 2 captured hashes",
    "link": "https://reverseengineering.stackexchange.com/questions/11488/reversing-sha1-hash-with-2-captured-hashes",
    "content": "As an exercise we need to reverse a SHA-1 to get the 'original' message.\nAll we know is that the lowercase SHA-1 of the code gives:\n<pre><code>B39ECFBC2C64ADBB7C7A9292EEE31794D28FE224\n</code></pre>\nAnd, the SHA-1 of the case sensitive code should be:\n<pre><code>0D353038908AD0FC8C51A5312BB3E2FEE1CDDF83\n</code></pre>\nAnd, the broken original message (letters can be upper or lowercase):\n<pre><code>HV15-G.UJ-1.Q7-DYC2-WLRE-6..J\n</code></pre>\nSo, my question is, how can I reverse the hashes to get the full original message?\nAny tips for me?\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "decryption",
        "hash-functions"
    ],
    "user": "Ihara",
    "time": "Dec 9, 2015 at 15:35",
    "comments": [
        {
            "user": "ratchet freak",
            "text": "probably brute force\n",
            "time": null
        },
        {
            "user": "Ihara",
            "text": "I think there needs to be an other way :/\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "This question should be asked on Crypto SE... You should have more accurate answers.\n",
            "time": null
        },
        {
            "user": "ratchet freak",
            "text": "If there are only 4 missing letters (in the dots) then you can brute force the lowercase one with at max (36^4 = ) 1.6 million guesses\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is an old question coming from Hackvent 2015 (question 9). The question was:\n<pre><code>sadly we didnt receive todays code transmission properly and it seems that a part of the information got lost. are you able to recover the missing parts?\n\nall we know is that the lowercase sha1 of the code gives:\n\nB39ECFBC2C64ADBB7C7A9292EEE31794D28FE224\n\nand the sha1 of the case sensitive code should be:\n0D353038908AD0FC8C51A5312BB3E2FEE1CDDF83\n</code></pre>\nAnd an mp3 file was given that was spelling a partial reconstruction of the message:\n<pre><code>HV?5 g?uj 1yq7 ?dyc 2wlr e6?j</code></pre>\nThere is a write-up here:\nhttps://mobeigi.com/blog/security/capture-the-flag/hacking-lab/hackvent/2015/day-9/\nBasically, the approach intended is to use brute-force on missing characters, and using the two hashes to check if the current candidate is the one we are looking. A Python script coding this method is given in the write-up:\n<pre><code>#!/usr/bin/env python\n\n# Day 9\nimport hashlib, itertools\n\nmessage = 'HV15-G?UJ-1YQ7-?DYC-2WLR-E6?J'\n\n# Source: http://stackoverflow.com/a/6792898/1800854\ndef all_casings(input_string):\n    if not input_string:\n        yield \"\"\n    else:\n        first = input_string[:1]\n        if first.lower() == first.upper():\n            for sub_casing in all_casings(input_string[1:]):\n                yield first + sub_casing\n        else:\n            for sub_casing in all_casings(input_string[1:]):\n                yield first.lower() + sub_casing\n                yield first.upper() + sub_casing\n\n# Bruteforce\nfor res in list(itertools.permutations('abcdefghijklmnopqrstuvwxyz0123456789', 3)):\n  template = list(message)\n  template[6] = res[0]\n  template[15] = res[1]\n  template[27] = res[2]\n  \n  # Check first sha1\n  input = ''.join(template).lower()\n  hash_object = hashlib.sha1(input)\n  hex_dig = hash_object.hexdigest().upper()\n  \n  if hex_dig == 'B39ECFBC2C64ADBB7C7A9292EEE31794D28FE224':\n    print \"Found match:\", ''.join(template).lower()\n    \n    input2 = list(''.join(template).lower())\n    input2_str = ''.join(input2)\n    \n    # Bruteforce character cases\n    for perm in all_casings(input2_str[4:]):\n      \n      final_test = \"HV15\" + perm\n      \n      hash_object = hashlib.sha1(final_test)\n      hex_dig = hash_object.hexdigest().upper()\n\n      # Check final solution with second sha-1\n      if hex_dig == '0D353038908AD0FC8C51A5312BB3E2FEE1CDDF83':\n        print \"Found solution:\", final_test\n</code></pre>\nAnd, the solution is:\n<pre><code>HV15-GnUj-1YQ7-vdYC-2wlr-E6xj\n</code></pre>\n",
            "votes": "2",
            "user": "perror",
            "time": "Dec 17, 2024 at 12:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "By design, SHA-1 can't be reversed.\nThe best approach would be to brute-force the lowercase version, and then once you've found the missing characters, use them to brute-force the case-sensitive version.\nHowever, according to oclhashcat, there's no solution to this. See below:\n<pre><code>C:\\>oclHashcat64.exe -m 100 -a 3 -1 ?l?d B39ECFBC2C64ADBB7C7A9292EEE31794D28FE224 hv15-g?1uj-1?1q7-dyc2-wlre-6?1?1j\noclHashcat v2.00 starting...\n\nDevice #1: Hawaii, 4096MB, 947Mhz, 40MCU\n\nHashes: 1 hashes; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nApplicable Optimizers:\n* Zero-Byte\n* Precompute-Init\n* Precompute-Merkle-Demgard\n* Early-Skip\n* Not-Salted\n* Not-Iterated\n* Single-Hash\n* Single-Salt\n* Brute-Force\n* Scalar-Mode\n* Raw-Hash\nWatchdog: Temperature abort trigger set to 90c\nWatchdog: Temperature retain trigger set to 80c\nDevice #1: Kernel ./kernels/4098/m00100_a3.Hawaii_1912.5_1912.5 (VM)_1449240640.kernel (196520 bytes)\nDevice #1: Kernel ./kernels/4098/markov_be_v1.Hawaii_1912.5_1912.5 (VM)_1449240640.kernel (36168 bytes)\n\n\nINFO: approaching final keyspace, workload adjusted\n\n\nSession.Name...: oclHashcat\nStatus.........: Exhausted\nInput.Mode.....: Mask (hv15-g?1uj-1?1q7-dyc2-wlre-6?1?1j) [29]\nHash.Target....: b39ecfbc2c64adbb7c7a9292eee31794d28fe224\nHash.Type......: SHA1\nTime.Started...: 0 secs\nTime.Estimated.: 0 secs\nSpeed.GPU.#1...:   106.5 MH/s\nRecovered......: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts\nProgress.......: 1679616/1679616 (100.00%)\nRejected.......: 0/1679616 (0.00%)\nHWMon.GPU.#1...: 19% Util, 53c Temp, 40% Fan\n\nStarted: Wed Dec 09 10:18:50 2015\nStopped: Wed Dec 09 10:18:52 2015\n</code></pre>\n",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Dec 9, 2015 at 16:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ihara",
                    "text": "<span class=\"comment-copy\">is there a way to give oclhashcat the original code in order to use it for the bruteforce?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Yes, see my updated answer above.</span>",
                    "time": null
                },
                {
                    "user": "Ihara",
                    "text": "<span class=\"comment-copy\">hm strange, maybe I messed something up with the original message, since we got it as an audio</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">On the bright side, now you know how to crack it, and you also see how fast brute-force can be for this scenario -- less than 2 seconds of processing! :)</span>",
                    "time": null
                }
            ]
        }
    ]
}