{
    "title": "Call function of injected dll",
    "link": "https://reverseengineering.stackexchange.com/questions/13667/call-function-of-injected-dll",
    "content": "I am messing around with dll injections. I am able to inject a dll with an exported function into some process, but I have a question now:\nIs there a standard way to call the exported function of my injected dll?\nI can provide code if necessary.\n",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "dll",
        "dll-injection"
    ],
    "user": "QDA",
    "time": "Oct 8, 2016 at 12:32",
    "comments": [],
    "answers_data": [
        {
            "content": "I am not sure if I understood correctly, but if you mean calling the exported function from the binary which just got injected the DLL, then do this:\n<pre><code>auto hLib = GetModuleHandleA(\"your_library.dll\");\nauto fn = GetProcAddress(hLib, \"exported_function_name\");\n\n// supposing your function is declared as:\n// extern \"C\" __declspec(dllexport) int __cdecl fn() { ... }\n((int(__cdecl*)(void)) fn)();\n</code></pre>\nYou might have to check which calling convention your compiler used for the function, though (if you didn't specify any).\n\nEdit: since you want to call the function from the injector rather than the injected binary, you should do something like this:\n\nUse <pre><code>VirtualAllocEx</code></pre> to alloc some bytes in the target process\nUse <pre><code>WriteProcessMemory</code></pre> to write shellcode on the target process\n\nYou will need to write something like this:\n<pre><code>mov eax, 0x0BADC0DE ; the offset of your function\ncall eax\n</code></pre>\nYou can use this online service to generate the shellcode.\n\nUse <pre><code>CreateRemoteThread</code></pre> to run a thread on the shellcode\n\nAlso, be aware that games usually have anti-cheat systems, and they detect this kind of behaviour (it's quite common).\n\nBut apart from all of this: you could inject your DLL with <pre><code>VirtualAllocEx</code></pre> -> <pre><code>WriteProcessMemory</code></pre> -> <pre><code>LoadLibrary</code></pre> | <pre><code>CreateRemoteThread</code></pre>, and have Windows call your DLL's <pre><code>DllMain</code></pre> instead of you doing it yourself.\n",
            "votes": "0",
            "user": "Martin",
            "time": "Oct 9, 2016 at 14:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "QDA",
                    "text": "<span class=\"comment-copy\">sry for confusing you. I will explain: I am injecting my dll into the game with my exe and and want to call the exported function of my dll from my injector.  I am trying to write a bot for myself and therefore the \"gui\" needs to call the injected dll</span>",
                    "time": null
                },
                {
                    "user": "Martin",
                    "text": "<span class=\"comment-copy\">@QDA I updated my answer, please see if that's what you meant</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">if your DLLMain function contains everything that you need to do, then Martin's second suggestion is easiest.  Use VirtualAllocEx to allocate memory in the remote process, WriteProcessMemory to write the DLL filename to that buffer, then CreateRemoteThread with the address of the LoadLibrary function, and passing the address of the buffer.  Windows will create a thread which loads the DLL and runs your code.</span>",
                    "time": null
                }
            ]
        }
    ]
}