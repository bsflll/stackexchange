{
    "title": "finding a RC4 Encryption function in obfuscated assembly code with no symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/8142/finding-a-rc4-encryption-function-in-obfuscated-assembly-code-with-no-symbols",
    "content": "RC4 encryption is quite basic and its Pseudo random generation algorithm is given at Wikipedia\nWhen Looking for a hashing algorithm like MD5 or SHAx it is pretty simple to look for the Hashing constants in the code, for example to find the MD5 code most times looking for the byte sequense of 0x01234567 is enough and you'd probably hit the function iterating the text section.\nNow that example gives the MD5 function. but what if i would like to find an implementation of the symmetric RC4 encryption? would there be any obvious opcode sequense that would repeat itself?\nI'm asking that question because im working on some heavily anti-debugging obfuscated piece of code with no symbols. I know for a high chance (like 90% sure) it is using a RC4 encryption. now i want to be able to find that RC4 function just like i was able to find the MD5 hashing functions.\nJust in case i was wrong, and its not hard-coded inside the main executable itself (Because md5 is, so i can assume it should be too), i have already tried to set a BreakPoint at CRYPTSP!CryptEncrypt with no success, are there any alternative Api functions to Encrypt using RC4?\nSo to sum my questions up:\n\nIs there any static opcode usage or number in the assembly of an RC4 encryption?\nAre there any alternative WinAPI calls for encrypting using RC4 encryption beside CRYPTSP!CryptEncrypt?\nAny other way to look for the RC4 encryption algorithm you can help me think about is blessed.\n",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "assembly",
        "ollydbg",
        "obfuscation",
        "encryption",
        "winapi"
    ],
    "user": "0xAK",
    "time": "Feb 1, 2015 at 14:55",
    "comments": [],
    "answers_data": [
        {
            "content": "Is there any static opcode usage or number in the assembly of an RC4 encryption?\n\n\n\nOpcode: Search the disassembly for <pre><code>xor <x>, <y></code></pre> where <pre><code><x></code></pre> != <pre><code><y></code></pre>.\nNumber: Search for <pre><code>0x100</code></pre>\n\nObviously both of these searches will yield many false-positives, so you'd have to look at each match manually to see if it's part of an RC4 function.\n\n\nAre there any alternative WinAPI calls for encrypting using RC4 encryption beside CRYPTSP!CryptEncrypt?\n\n\nEvery time I see software using RC4, the RC4 code is always written inline, not imported from a dynamic library.\n\n\nAny other way to look for the RC4 encryption algorithm you can help me think about is blessed.\n\n\nYou could try Aligot.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Feb 1, 2015 at 15:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I would first start by reading the following article https://blog.talosintelligence.com/2014/06/an-introduction-to-recognizing-and.html\nFor some other encryption you could also try to use https://hex-rays.com/blog/findcrypt/ this plugin that identifies crypto constants in the IDA database, then find xrefs to those constants usually will help you find the encryption/decryption loop.\nThe previous answer also had some good thumb rules.\n",
            "votes": "1",
            "user": "rotem.salinas",
            "time": "Jul 20, 2022 at 9:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}