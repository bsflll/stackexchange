{
    "title": "What does lea rdx,qword ptr ss:[rbp+50] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/10728/what-does-lea-rdx-qword-ptr-ssrbp50-mean",
    "content": "What does the code below exactly mean?\n<pre><code>lea rdx,qword ptr ss:[rbp+50]\n</code></pre>\nI have difficulty in <pre><code>rbp+50</code></pre>. Is <pre><code>rbp</code></pre> the base pointer in the 64 bit CPU architecture? What is the base pointer refering to? how can I find out the value at <pre><code>rbp+50</code></pre>? what does <pre><code>ss</code></pre> mean? what does <pre><code>qword</code></pre> mean? I totally confused with these terms.\n",
    "votes": "3",
    "answers": 1,
    "views": "7k",
    "tags": [
        "disassembly",
        "x86-64",
        "assembly"
    ],
    "user": "FreeMind",
    "time": "Aug 27, 2015 at 17:45",
    "comments": [
        {
            "user": "phuclv",
            "text": "How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?, How to interpret segment register accesses on x86-64?, Meaning of CS and SS registers on x86-64 Linux in userland?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The code means <pre><code>rdx = rbp + 50</code></pre>.\nFor the explanation, we'll go bottom up...\n<pre><code>qword</code></pre> is 8-bytes (64 bits). It stands for quad-word, same as <pre><code>dword</code></pre> stands for double-word. It is the size of every <pre><code>rXX</code></pre> register. The <pre><code>qword ptr</code></pre> means that we are accessing a <pre><code>qword</code></pre> sized memory block (as oppised to a <pre><code>byte</code></pre>, <pre><code>word</code></pre> or <pre><code>dword</code></pre>).\n<pre><code>ss</code></pre> stands for stack-segment. However, in non 16-bit systems all segments are usually mapped to 0. It is probably shown in the code as an artifact of the dis-assembly as the <pre><code>rbp</code></pre> register is used to point into the stack.\nThe <pre><code>lea</code></pre> commands mean load-effective-address. It does not take the value at the given address, but rather the address itself. So in pseudo code we can rewrite the entire thing as <pre><code>rdx = rbp + 50</code></pre>.\n",
            "votes": "10",
            "user": "tmr232",
            "time": "Aug 27, 2015 at 20:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}