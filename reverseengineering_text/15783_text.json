{
    "title": "Detecting user<->kernel transitions with hypervisor",
    "link": "https://reverseengineering.stackexchange.com/questions/15783/detecting-user-kernel-transitions-with-hypervisor",
    "content": "Is it possible to use a hypervisor to trap all ring0<->ring3 transitions (both 0->3 and 3->0)?\n",
    "votes": "0",
    "answers": 1,
    "views": "196",
    "tags": [
        "debugging",
        "debuggers",
        "kernel-mode",
        "kernel",
        "intel"
    ],
    "user": "user20825",
    "time": "Jul 7, 2017 at 11:18",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, it is possible. I do not want to go into details as there are a lot of comprehensive material available online:\n\nIntels manuals which you will have to study in any case if you really want to understand how things work (from personal experience)\nA VMM-based System Call Interposition Framework for Program Monitoring - one of the countless examples about sys call monitoring mainly for security purposes.\nHyperPlatform - Intel VT-x based hypervisor aiming to provide a thin VM-exit filtering platform on Windows.\n\n\nDdiMon - Monitoring and controlling kernel API calls with stealth hook using EPT\n\n\nOne of the techniques is to monitor execution of the kernel-mode entering code pointed by <pre><code>IA32_SYSENTER_EIP</code></pre>/<pre><code>IA32_LSTAR</code></pre>.\n",
            "votes": "1",
            "user": "PhoeniX",
            "time": "Jul 7, 2017 at 16:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}