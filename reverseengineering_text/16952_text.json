{
    "title": "Custom image format decoding",
    "link": "https://reverseengineering.stackexchange.com/questions/16952/custom-image-format-decoding",
    "content": "TL;DR: is there any chance of decoding custom picture format in case I have sufficient amount of data? Please see examples at end.\n\nI have binary files of an old DOS diskmag (late 90's). After couple of weeks playing with 010 Editor, Kaitai Struct and Python I managed to get somehow structured data from these files. It was eventually quite easy, files are innerly indexed and contains all pieces - something like Doom WAD, nothing unexpected for that years.\nSo now I can extract texts (stored as plaintext), sounds (stored mostly as PCM), music (MOD, XM), fonts (bitmaps) and pictures. Some pictures are stored as simple bitmap (not BMP with header and so, just raw pixel data), some pictures are compressed with PCX-like RLE algorithm, which was not a problem for me.\nBut there is also some other compression I do not recognize. Let's say that for every unknown picture i have:\n\ndimensions in pixels (mostly 640x480)\ncolor depth (always High Color)\nfirst binary blob (small, usually 1-2 kB, exact size differs)\nsecond binary blob (large, 50-250 kB, exact size differs)\nscreen dump of picture from diskmag running in DOSbox (yay!)\n\nIt seems to me that sizes of blobs depends on picture complexity and unique used colors. Also I guess that first blob is a dictionary of some kind (or maybe a Huffman tree?), whereas second blob contains compressed picture content itself.\nAbove that I suspect there is some weird home-made lossy compression, due easily recognisable artifacts around edges and even 8x8 quantization blocks in gradient-filled areas. See below for examples, I have thousands of them.\nSo my question: is there any chance of decoding these pictures? Do I have enough of data, or am I missing something? I think that everything I need is to recognize compression algorithm. Can anybody help me with it? I belive I can do the rest of work in Python as usually.\n(Sorry for not linking binary blobs directly, I don't have enough of reputation here...)\nEdit 1: Added example 06-04002-0004 - the smallest picture I've found (212x160 px).\nEdit 2: I've realized that diskmag EXE have debug symbols inside! Some interesting function names are:\n\nRLEDecomp (this one is for RLE packed images, I've already solved it)\nLZSS_Decompress\nInitHuffDecomp_\nHuffDecompress_\nBuildHuffTree_\nBuildHuffTreeImg_\n\nI can not say if it is more likely for decoding videos (yes, diskmag engine have his own format for videos too, I'm not that far yet), but maybe it will help?\nEdit 3: Diskmag EXE for download: <pre><code>https://filebin.ca/3kL3kgNAqlJI</code></pre>\n\nExample 06-04002-0004\n\ndimensions: 212x160\nHigh Color\nfirst binary blob: <pre><code>https://filebin.ca/3kJWIHFLZJ9X</code></pre>\nsecond binary blob: <pre><code>https://filebin.ca/3kJWL5SqHlAK</code></pre>\nscreen dump:\n\n\n\nExample 06-05000-0004\n\ndimensions: 640x480\nHigh Color\nfirst binary blob: <pre><code>https://filebin.ca/3kF4G2r0DnXT</code></pre>\nsecond binary blob: <pre><code>https://filebin.ca/3kF4wopld9QG</code></pre>\nscreen dump:\n\n\n\nExample 06-05050-0004\n\ndimensions: 640x480\nHigh Color\nfirst binary blob: <pre><code>https://filebin.ca/3kF7hbOexD7D</code></pre>\nsecond binary blob: <pre><code>https://filebin.ca/3kF7lLgeaAQ7</code></pre>\nscreen dump:\n\n\n\nExample 06-05483-0004\n\ndimensions: 312x480\nHigh Color\nfirst binary blob: <pre><code>https://filebin.ca/3kFAGWNEnNdM</code></pre>\nsecond binary blob: <pre><code>https://filebin.ca/3kFAJdwtohzB</code></pre>\nscreen dump:\n\n\n\nExample 06-07011-0004\n\ndimensions: 640x480\nHigh Color\nfirst binary blob: <pre><code>https://filebin.ca/3kFGUQGcMZqD</code></pre>\nsecond binary blob: <pre><code>https://filebin.ca/3kFGRc37e2pm</code></pre>\nscreen dump:\n",
    "votes": "1",
    "answers": 0,
    "views": "651",
    "tags": [
        "file-format",
        "decompress"
    ],
    "user": "deefha",
    "time": "Dec 11, 2017 at 16:31",
    "comments": [
        {
            "user": "cimarron",
            "text": "If you have the program binary, it may be easier just to reverse that and figure out how it is using the data in the files.\n",
            "time": null
        },
        {
            "user": "deefha",
            "text": "Yes, I have program binary. By output of linux \"file\" command it's a <pre><code>MS-DOS executable, LE for MS-DOS, DOS4GW DOS extender (embedded)</code></pre>. According to this answer: reverseengineering.stackexchange.com/questions/3074/â€¦ reversing will not be easy... Maybe DOSbox in his debug version can help?\n",
            "time": null
        },
        {
            "user": "deefha",
            "text": "@usr2564301 Added example 06-04002-0004 - the smallest picture I've found (212x160 px). It's the first example now.\n",
            "time": null
        },
        {
            "user": "deefha",
            "text": "Added info about debug symbols I've found in EXE. Sounds interesting!\n",
            "time": null
        },
        {
            "user": "cimarron",
            "text": "Can you post the exe?\n",
            "time": null
        }
    ],
    "answers_data": []
}