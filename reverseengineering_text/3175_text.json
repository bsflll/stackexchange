{
    "title": "How to call non-exported functions from dll?",
    "link": "https://reverseengineering.stackexchange.com/questions/3175/how-to-call-non-exported-functions-from-dll",
    "content": "I'm doing some reverse engineering of C++ dll.\nWhat I have achieved so far - is have a list of all functions inside\nand even source code (in pseudo-C or so) for most of them.\nReading this source code of most the functions doesn't make sense,\nbecause original algorythms were written in C++ and are way too different\nfrom the received C code.\nEven if I try to compile the received C code (by C compilator) - \nit won't run due to numerous syntax problems, missing libraries, etc.\nTrying to simplify the things, I'm now after following task:\nI need just to call some of the required functions directly from dll,\nsupplying some parameters of my choice.\nThis approach works fine for exported functions, where I know the name\nof the functions from decompiler code and they do have the name inside the dll.\nBut speaking about internal (non-exported) functions in dll - \ntheir names in decompiled code are most probably different from the\noriginal ones.\nQuestions: Is it possible to find out the original names of the functions\ninside dll ? \nOr is there any other smart way to call these functions directly from original dll?\nHow to do this?\n",
    "votes": "5",
    "answers": 3,
    "views": "5k",
    "tags": [
        "dll",
        "decompile"
    ],
    "user": "user3095293",
    "time": "Dec 13, 2013 at 5:26",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "Why would you want to use the non-exported functions?  They are not exported for a reason.  Why are the exported functions not sufficient for your purposes?\n",
            "time": null
        },
        {
            "user": "rev",
            "text": "@peterferrie this is ReverseEngineering.SE and not StackOverflow; the \"don't do it if it's not documented\" or \"don't do it because <coding standards>\" or \"if it's not meant to be called you shouldn't be calling it\" stuff is out of topic here, don't you think? if we're gonna follow the rules, we might as well just say \"if a program is packed then you shouldn't reverse engineer it\" and screw it...\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "@AcidShout, you've extrapolated far too much from what I asked, and arrived at a completed wrong interpretation.  I am not saying that they shouldn't be used.  I simply asked why the exported functions are not sufficient, because the non-exported ones are not intended to be used.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First thing that comes to mind is the following approach\n\nUsing your favourite debugger/disassembler locate the function and note down some unique byte pattern which identifies the function (Sort of like IDA's Flirt signatures)\nGet a handle to the DLL (GetModuleHandleA)\nGet the image size (from MODULEINFO.SizeOfImage using GetModuleInformation)\nSearch for your unique pattern (handle+i < imageSize: -> memcmp)\nAssign the found address to a function pointer\nCall the function\n",
            "votes": "7",
            "user": "ixje",
            "time": "Dec 13, 2013 at 7:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "i think the best way to patch export table, to point exported names to needed functions. (or even extend export for needed funcs). Sorry, i can't provide the name of tools, which can make this\n",
            "votes": "1",
            "user": "mailwl",
            "time": "Dec 13, 2013 at 7:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you have the symbol file for the DLL, or if the file was built with debugging information then you can recover the original names for the non-exported functions.  If not, then probably not.  Since the non-exported functions are not exported, there isn't a need for the original function names to be retained.  The code in the DLL knows how to call those functions by address, so it doesn't need any more information than that.\n",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Dec 13, 2013 at 19:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}