{
    "title": "ARM chip gpio/ identification from firmware code",
    "link": "https://reverseengineering.stackexchange.com/questions/25094/arm-chip-gpio-identification-from-firmware-code",
    "content": "Device: i was able to recover bricked Chinese IOT a Sous Vide cooker. Replaced damaged capacitor. it works.\nit has \n\nARM soc/mcu/processor\nWI-FI (broadcom)\nLCD touch screen + 16bit STM mcu.\nEEPROM 4Kbyte on i2c bus\n1 Giga bit NAND flash memory.\n125 M byte of RAM\nI2C bus on the motherboard.\n\nLacks features: i would like to start the timer only after the device reach the target temperature: with meats, it is ok to add food to the water as it heats. Not for Poached eggs!\nI downloaded the firmware update payload motorola srecord SREC format concatenated with a big blob of data like BMP & i18n files. i used ghidra to look inside the code SREC : ARM 32bit/16bit big endian. \nQemu emulation with unicorn framework: i traced mcr instructions. it seems the firmware is configuring the MPU this way:\n\n\nRecon Then i was able to id \"Boot_console_put(char *)\" function and a memory address where the firmware write char by char all the boot  message related strings: 0x3402f404\n\nConsole Output Then the emulated firmware update payload seems to be stuck on a loop when trying to acces and I2C slave (could be the eeprom) printing this:\n<pre><code>[boot] entering HW_MCASIC_init\n[boot NVM] I2C: SDA seems stuck low!\n[boot NVM] I2C: SDA seems stuck low!\n[boot NVM] I2C: SDA seems stuck low!\n</code></pre>\nthe code dealing with I2C seem a bit too much convoluted for a rapid understanding\nThe question :  i would like to guess What are all the others address the firmware is referencing in the code. Searching google and github for similar constant/base address & offsets didn't help... google search result returning off topic commercial links.\n",
    "votes": "1",
    "answers": 0,
    "views": "177",
    "tags": [
        "disassembly",
        "arm",
        "static-analysis",
        "ghidra",
        "firmware-analysis"
    ],
    "user": "pabx06",
    "time": "May 22, 2020 at 16:51",
    "comments": [
        {
            "user": "morsisko",
            "text": "The best thing would be obtaining extact model of this ARM chip. This way you could browse the internet for the datasheet with memory map, and thanks to it see which addresses are used to interface with the GPIOs and other peripherals\n",
            "time": null
        },
        {
            "user": "pabx06",
            "text": "Package marking on the chip are custom . didnt find on the internet. i found dead code: a function not used anywhere that referencing an array of strings and use the index of coprocesor CP15 returned id of the chip. the arrays is \"946\",\"Cortex-R4\", \"Cortex-A9\", \"Marvell PJ4\", \"1176\", \"Cortex-A7\",\"Not Listed\"\n",
            "time": null
        }
    ],
    "answers_data": []
}