{
    "title": "Loading a Driver in Immunity",
    "link": "https://reverseengineering.stackexchange.com/questions/2866/loading-a-driver-in-immunity",
    "content": "It sounds strange and I realize that you usually use WinDbg to debug drivers, but I was reading up on Gray Hat Python and it states:\n\nTo test this out, try loading the driver <pre><code>C:\\WINDOWS\\System32\\beep.sys</code></pre> into Immunity Debugger. Once it's loaded, use the debugger's <pre><code>PyShell</code></pre> and enter the following code:\n\nI'm wondering if this is at all possible. I simply tried loading up <pre><code>beep.sys</code></pre> in Immunity and it cannot find the entry point and doesn't seem to load\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "immunity-debugger",
        "driver"
    ],
    "user": "asudhak",
    "time": "Oct 1, 2013 at 22:13",
    "comments": [
        {
            "user": "Gilles 'SO- stop being evil'",
            "text": "What command did you use exactly? What is the exact error message?\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "This is probably not what you want, but I'll post these here as comments just in case they're helpful: malwareanalysis.com/CommunityServer/blogs/geffner/archive/2006/… malwareanalysis.com/CommunityServer/blogs/geffner/archive/2007/…\n",
            "time": null
        },
        {
            "user": "asudhak",
            "text": "@Gilles: No commands : just File->Open Beep.sys. It is unable to find the entry point\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "You might be trying to load a 64bit executable. It won't work, has to be 32bit OS.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "edit\ni didn't realize you are asking for immunity the answer is for plain straight ollydbg 1.10 the concept should be similar in immunity \nyou need to edit the IMAGE_SUBSYSTEM from <pre><code>IMAGE_SUBSYSTEM_NATIVE</code></pre> to <pre><code>IMAGE_SUBSYSTEM_WINDOWS_GUI</code></pre> or <pre><code>_CUI</code></pre>\nollydbg will now be able to load the driver (imports from hal etc will not be resolved but you can see the correct disassembly if you do alt+e (executable window) select beep.sys right click follow entry \nit should be obvious that you do you your experiments on a saved backup copy of system drivers in a vm or a throwaway configuration and not modify originals and break the os to malfunction and burn your machine\n<pre><code>open ollydbg alone and use view file to modify subsystem charecteristics to cons\nole or gui instead of native 0000012C    0300        DW 0003              ;  Sub\nsystem = IMAGE_SUBSYSTEM_WINDOWS_CUI\n\nC:\\>\nC:\\>fc /b c:\\WINDOWS\\system32\\drivers\\beep.sys c:\\myollymodbeep.sys\nComparing files C:\\WINDOWS\\SYSTEM32\\DRIVERS\\beep.sys and C:\\MYOLLYMODBEEP.SYS\n0000012C: 01 03\n\nC:\\>\"f:\\odbg110\\OLLYDBG.EXE\" c:\\myollymodbeep.sys\n</code></pre>\ndisasm of beep.sys\n<pre><code>0001066C >PUSH    EBP\n0001066D  MOV     EBP, ESP\n0001066F  SUB     ESP, 0C\n00010672  PUSH    EBX\n00010673  PUSH    EDI\n00010674  PUSH    myollymo.00010652                ;  UNICODE \"\\Device\\Beep\"\n00010679  LEA     EAX, DWORD PTR SS:[EBP-C]\n0001067C  PUSH    EAX\n0001067D  CALL    NEAR DWORD PTR DS:[<&ntoskrnl.Rt>;  ntoskrnl.RtlInitUnicodeString\n00010683  MOV     EDI, DWORD PTR SS:[EBP+8]\n00010686  LEA     EAX, DWORD PTR SS:[EBP-4]\n00010689  PUSH    EAX                              ; /*DeviceObject = 001B1EB4\n0001068A  XOR     EBX, EBX                         ; |\n0001068C  PUSH    EBX                              ; |Exclusive = 7FFD7000\n0001068D  PUSH    100                              ; |DeviceCharacteristics = 100\n00010692  PUSH    1                                ; |DeviceType = 1\n00010694  LEA     EAX, DWORD PTR SS:[EBP-C]        ; |\n00010697  PUSH    EAX                              ; |DeviceName = \"????\"\n00010698  PUSH    58                               ; |ULONG DeviceExtensionSize = 58\n0001069A  PUSH    EDI                              ; |DriverObject = 001B1EB4\n0001069B  CALL    NEAR DWORD PTR DS:[<&ntoskrnl.Io>; \\IoCreateDevice\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Oct 2, 2013 at 5:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "John McMillan",
                    "text": "<span class=\"comment-copy\">I have the same problem. @blabb: I changed the required bit at offset 12c also to 03. After loading the driver into imm. deb. again, it also says that the entry point was not found via exception message at the bottom. I use SHIFT+F7 to pass it to the debugger. I know its a long time ago, but do you need to pass the exception too ?</span>",
                    "time": null
                }
            ]
        }
    ]
}