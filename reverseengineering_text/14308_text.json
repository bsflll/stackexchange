{
    "title": "How can I create an appropriate Japanese .tbl file for Hex Editing?",
    "link": "https://reverseengineering.stackexchange.com/questions/14308/how-can-i-create-an-appropriate-japanese-tbl-file-for-hex-editing",
    "content": "I'm trying to edit a Japanese Configuration executable using Resource Hacker and I just want to translate the UI stuff to English. There are also a few English text that I was able to find and successfully edit. \nMy problem is that before the hex editor can properly display Kanji, I need a table for it (.tbl). \nGoogle only leads me to translating Japanese NES games which doesn't apply to what I'm trying to do.\nAlso, the Japanese characters on the UI of the .exe file I'm trying to edit even if I have already installed the Japanese Language Pack -- I still need to set the Region > Format to Japan before the characters are properly displayed.\nI really hope someone can help me with this. :-/\n",
    "votes": "3",
    "answers": 1,
    "views": "845",
    "tags": [
        "hex",
        "patching",
        "binary-editing"
    ],
    "user": "Lightpost",
    "time": "Mar 14, 2017 at 14:47",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "\" the Japanese characters on the UI of the .exe file \" <- I think you accidentally a verb.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "What hex editor are you using?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Windows executables can have text in one of two formats:\n\nUI resources. These are stored in a special format in the .rsrc section and include things like strings, menus, dialogs and some others. Text in them is usually present in Unicode (UTF-16) encoding. Resources can be decompiled and edited by tools such as resource editors and easily replaced, usually without affecting functionality of the application.\nHardcoded strings.  Unfortunately, many developers do not think of or care about localization and put various text strings directly into the code. These end up in the binary's <pre><code>.text</code></pre> or <pre><code>.rdata</code></pre> section and are represented by byte sequences in whatever codepage the developer used (in case of Japanese it's usually Shift-JIS). To translate such strings it is necessary to find them in the binary and either patch them in-place (if it can be done without running out of space), or (especially when there's not enough space) put the translated text somewhere else (e.g. in a new section or in the slack space of an existing section) and fix up all instructions and pointers pointing to the original string.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 14, 2017 at 15:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}