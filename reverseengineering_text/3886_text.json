{
    "title": "Reverse engineering close sourced JSP applets",
    "link": "https://reverseengineering.stackexchange.com/questions/3886/reverse-engineering-close-sourced-jsp-applets",
    "content": "I have a web application written in JSP running on a tomcat 6 server that I want to RE. I've decompiled the .jars associated with the web application. The source code is heavily obfuscated, making it very time consuming to understand the execution flow. Since I'm under a time constraint reverse engineering this way isn't feasible. \nIs there a way to force the JVM to log all method calls with parameters? \nCan this be done through a profiler such as VisualVM?\n",
    "votes": "2",
    "answers": 4,
    "views": "1k",
    "tags": [
        "debugging",
        "dynamic-analysis",
        "java"
    ],
    "user": "lilly_yesla",
    "time": "Mar 19, 2014 at 16:23",
    "comments": [
        {
            "user": "Antimony",
            "text": "If you give me the jar, I could try deobfuscating it for you. Assuming it's a common obfuscator, I can at least get rid of stuff like string encryption and control flow obfuscation, though actually understanding the code is of course a lot more time consuming.\n",
            "time": null
        },
        {
            "user": "lilly_yesla",
            "text": "I can't do that. I don't think its a common obfuscation from what I see.\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "Well I could take a look and tell you if it's one I recognize. I'd surprised if it isn't.\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "Your files might be just compiled JSPs without any obfuscation. It is next to impossible to recover the original JSPs from that form.\n",
            "time": null
        },
        {
            "user": "lilly_yesla",
            "text": "@Antimony How can I send you the .jar? I'm now thinking it might be ZKM obfuscation.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The only real question here:  \n\"Is there a way to force the JVM to log all method calls with parameters?\"\nhttp://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html\nhttp://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\nI didn't see anything obvious while searching the documentation, which is extensive.\n",
            "votes": "1",
            "user": "avgvstvs",
            "time": "Mar 19, 2014 at 10:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Well the good news is that it's barely been obfuscated. I don't see any string encryption, which is the one thing that every single commercial obfuscator does. The only thing I see is basic class/method renaming. Most likely they just ran it through Proguard.\nThe bad news is that even with weak obfuscation, it's still a pain to read through. (Heck, with a large codebase it's often a pain just to read through the original commented source code!) But there's not much you can do except slog through it. Coming up with meaningful names to rename everything is obviously not something that can be done automatically. This is where the human traditionally steps in.\nIf they happen to have included an open source library in the renamed part, you can match it up and automatically rename all those parts back to the original, but I don't see any signs of this.\nUltimately, it's just a matter of reverse engineering. At least you're a lot better off than with x86 reverse engineering.\n",
            "votes": "2",
            "user": "Antimony",
            "time": "Mar 19, 2014 at 16:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "There are java deobfuscating frameworks out there, varying in quality. You could potentially download the source to the JVM and instrument it yourself? See: https://stackoverflow.com/questions/2026093/is-jvm-open-source-code\n",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I found a nice solution using http://mchr3k.github.io/org.intrace/. It allows me to select which classes I would like to trace (or not trace), shows entry and returns into methods with parameters and return values.\n",
            "votes": "1",
            "user": "lilly_yesla",
            "time": "Mar 19, 2014 at 18:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}