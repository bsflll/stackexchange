{
    "title": "How do i make gnu as recognize all ARMV7 instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/8971/how-do-i-make-gnu-as-recognize-all-armv7-instructions",
    "content": "I disassembled an android library with IDA, and want to do some extra steps at the end of one of the functions. Currently, the last instruction bytes are <pre><code>BD E8 F0 8F</code></pre>, in thumb mode, which IDA disassembles to <pre><code>POP.W {R4-R11,PC}</code></pre>.\nSo i found a nice little piece of unused space, replaced the <pre><code>POP.W</code></pre> with a branch there, wrote my extension, remembered to put a <pre><code>.thumb</code></pre> and <pre><code>.arch armv7a</code></pre> at the start of my program, and finished my code with that <pre><code>POP.W {R4-R11,PC}</code></pre>. Unfortunately, using gnu as from an arm toolchain, this results in <pre><code>Error: bad instruction pop.w '{R4-R11,PC}'</code></pre> \nOk, gnu as doesn't like the .w suffix, so i replaced the instruction with <pre><code>POP {R4-R11,PC}</code></pre>. This changes the error message to Error: invalid register list to push/pop instruction -- <pre><code>pop {R4-R11,PC}</code></pre>\nI know that some older ARM chips had restrictions on what you could do with registers from R8 on, so, just for verification, i replaced the instruction with <pre><code>POP {R4-R7,PC}</code></pre>. And indeed, as assembles this well.\nNow I don't know how to continue?\n\nMaybe I have to give another architecture option to as. But .arch armv7a seems to be the newest which is valid with android armv7a libraries.\nMaybe i'm completely off track, and the pop instruction is actually a macro for two separate instructions, which pop high and low registers after another. But, the result of entering the individual two-byte instructions (<pre><code>BD E8</code></pre>, <pre><code>F0 8F</code></pre>) into the online disassembler seems to have nothing to do with popping from the stack.\n\nI also tried disabling macros in IDA's processor options, which didn't change anything. So i'm inclined to think the byte sequence is a genuine 4 byte thumb mode opcode.\nWhat else do i need to specify in my program to make gnu as recognize the instruction?\n",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "arm",
        "assembly"
    ],
    "user": "Guntram Blohm",
    "time": "May 24, 2015 at 22:14",
    "comments": [],
    "answers_data": [
        {
            "content": "By default, <pre><code>as</code></pre>, uses the old 'divided' syntax for arm and thumb instructions. Hence it is not recognising your <pre><code>pop.w</code></pre> instruction.\nTo make it work, add <pre><code>.syntax unified</code></pre> at the start of your program.  This tells it to use the new unified syntax and you should find it assembles <pre><code>pop.w</code></pre> successfully.\nSee https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html for more details.\n",
            "votes": "6",
            "user": "Ian Cook",
            "time": "May 24, 2015 at 15:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}