{
    "title": "Mach-O functions pointer",
    "link": "https://reverseengineering.stackexchange.com/questions/12902/mach-o-functions-pointer",
    "content": "I'm trying to understand how Mach-O files work, i already succeed with parsing of load commands, sections, symbols table etc.. anyway i'm trying to figure out a way to find class methods pointer to the __text section in order to disassemble them, i noticed that sometimes in the symbol table the \"value\" field has the same offset of the function in the __text section, there's a generic rule to parse ObjC classes and methods and take pointers to these methods?\nThanks much.\n",
    "votes": "0",
    "answers": 1,
    "views": "646",
    "tags": [
        "arm",
        "functions",
        "ios",
        "mach-o"
    ],
    "user": "Daniele Linguaglossa",
    "time": "Jun 21, 2016 at 10:38",
    "comments": [],
    "answers_data": [
        {
            "content": "As you may realize, Objective-C methods don't appear in the symbol table (<pre><code>LC_SYMTAB</code></pre>). However, you're right that information about all Objective-C classes and their methods are embedded in the object since the Objective-C runtime has to parse it and register it.\nYou can find a section called <pre><code>__DATA,__objc_classlist</code></pre> that contains a list of pointers to <pre><code>struct objc_class</code></pre> (defined here), which contains a pointer to a <pre><code>struct class_ro_t</code></pre> in its <pre><code>bits</code></pre> member, which contains a member <pre><code>baseMethodList</code></pre>, which contains a pointer to a <pre><code>struct method_list_t</code></pre>, which contains a number of <pre><code>struct method_t</code></pre> elements which each contain an <pre><code>imp</code></pre> member which is the pointer to the IMP function. Those would be all the instance methods of the class. You can also follow the <pre><code>isa</code></pre> field of the class to reach the metaclass of the class. The instance methods of the metaclass are the class methods of the class.\nOne detail is that these pointers that are in the structures stored in the file on disk would not be the final pointers in memory. The dynamic linker dyld will go through the binary and link and rebase everything before the Objective-C runtime starts and parses the information I just described. For the data section, the linker typically will only do rebasing unless an external Objective-C class is used. It may be possible for you to get away with not doing the rebasing (in which case the pointers will just be the same as the case the binary has a slide of 0) if you're only interested in getting the pointers to Objective-C class method IMPs.\n",
            "votes": "0",
            "user": "planetbeing",
            "time": "Aug 16, 2016 at 6:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}