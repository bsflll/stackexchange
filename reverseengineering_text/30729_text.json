{
    "title": "How can I enumerate and hook all non-exported functions in lib.so using frida?",
    "link": "https://reverseengineering.stackexchange.com/questions/30729/how-can-i-enumerate-and-hook-all-non-exported-functions-in-lib-so-using-frida",
    "content": "I was reverse engineering an <pre><code>apk</code></pre> and just found out it is using native functions for such operations. there are some exported and non-exported functions. wanted to get and hook those non-exported functions, tried possibilities but still no luck, for example; this stack overflow question though it looks like my problem and still get not applicable the solution mentioned there.\npreviously I loaded the lib into <pre><code>ghidra</code></pre> and auto analyzed it and then used this python script, just to get frida hooks on functions interested. what this script does is that it gets all functions in the lib and then generates frida hook script for them, may be technically some fallacies, didn't investigate it. btw the plugin outputs the function interested hook:\n<pre><code>//Hook function setAuthUser @ 0x8e427c\nInterceptor.attach(Module.findBaseAddress(\"librhodes.so\").add(ptr(0x7e427c)), {\n  onEnter: function (args) {\n    console.log(\"=> setAuthUser(\" + args[0] + \")\")\n  },\n  onLeave: function (result) {\n    console.log(\"setAuthUser() => \" + result)\n  },\n})\n</code></pre>\nwhen I ran this script with the apk attached with <pre><code>frida gadget</code></pre>, I got no results. so apparently the function address is a miss. so what I wanted is that is there in frida a way to get all non-exported functions and their addresses to hook them. because I believe the offsets given by <pre><code>ghidra</code></pre> is not matching to the running apk lib? may be? no idea and I'm beginner to this.\nplease help this\n",
    "votes": "2",
    "answers": 0,
    "views": "1k",
    "tags": [
        "ida",
        "ghidra",
        "function-hooking",
        "frida"
    ],
    "user": "hanan",
    "time": "Aug 2, 2022 at 18:30",
    "comments": [
        {
            "user": "Robert",
            "text": "The base address of an Android app is random (because of ASLR), so you have to do some math to convert the function address from Ghidra to the hooking address in Frida stackoverflow.com/a/68335254/150978\n",
            "time": null
        },
        {
            "user": "hanan",
            "text": "@Robert, Thank you for putting up with my ignorance. now looks like I am getting a result, when I run the above frida script with slight modification of <pre><code>.add(ptr(0x7e4de8-00100000))</code></pre> <pre><code>00100000</code></pre> is the imageBase I got from ghidra. now the output is: <pre><code>setAuthUser(0xb6319ee0, 0xb6319e9c)</code></pre> the args is <pre><code>hex</code></pre> but then I used  <pre><code>Memory.readUtf8String(args[1])</code></pre> then become <pre><code>setAuthUser(0xb6319ee0, )</code></pre> the second argument value returned as empty and another run I get this error <pre><code>Error: can't decode byte 0xb6 in position 3      at onEnter (<input>:4)</code></pre> where to from here plz?\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Are you sure base is 00100000 and not 0x100000 (hex)? In your question on SO you wrote that the argument type is <pre><code>String&</code></pre>. <pre><code>Memory.readUtf8String</code></pre>  only works for <pre><code>char*</code></pre> arguments. I don't know what type is <pre><code>String&</code></pre>. Please re-read my comments on your old Stackoverflow question, I already showed you multiple options to read C++ String arguments.\n",
            "time": null
        },
        {
            "user": "hanan",
            "text": "@Robert, well when I click <pre><code>set Image Base</code></pre> on <pre><code>ghidra</code></pre> I'm getting <pre><code>00100000</code></pre> value. so I need to do it as <pre><code>0x100000</code></pre> during subtraction? I can confirm that it produces different memory addresses when using the two values <pre><code>00100000</code></pre> and <pre><code>0x100000</code></pre>.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Addresses in Ghidra mostly shown as hexadecimal, base image address is definitely shown in hex, even if it is shown without prefix.\n",
            "time": null
        }
    ],
    "answers_data": []
}