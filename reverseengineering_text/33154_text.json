{
    "title": "Understanding emulation & tracking IP within a process",
    "link": "https://reverseengineering.stackexchange.com/questions/33154/understanding-emulation-tracking-ip-within-a-process",
    "content": "I'm working on an end-of-year project for my studies and I was thinking of writing some sort of process emulation debugging tool. What I mean by this is, I want to write a debugger without actually utilising the debugging tools that Winapi offers but rather, it'll use a cpu emulation library like Unicorn to let me write my debugging techniques. I initially thought to just read the process' bytes and emulate that all within unicorn but I figured that the overhead would be impractical, then I thought about specifically emulating certain parts of the process that would be beneficial for analysis but that would require me to have access to the instruction pointer.\nI.e, check where the instruction pointer is and if it's at an instruction that I want to analyse (Malware can use direct syscalls, I don't want to use an instrumentation callback which can easily be replaced & I can't read kernel structures to see if it has been replaced so I'd have to rely on some sort of heartbeat system which is impractical here).\nThere are just so many potholes here within my understanding so I figured I'd ask here to see if anyone has any idea of what I can do. It's similar to a sandbox but not entirely.\nI thought to use GetThreadContext but then I figured that the overhead between each call would significantly invalidate the integrity of the true instruction pointer. If you wanted to constantly suspend each thread & check the instruction pointer that way, it would slow down the process significantly.\n",
    "votes": "0",
    "answers": 0,
    "views": "39",
    "tags": [
        "windows",
        "assembly",
        "c++",
        "winapi",
        "emulation"
    ],
    "user": "programmer",
    "time": "Aug 11, 2024 at 18:37",
    "comments": [],
    "answers_data": []
}