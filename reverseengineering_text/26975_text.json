{
    "title": "Not able to understand the C-switch statement in disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/26975/not-able-to-understand-the-c-switch-statement-in-disassembly",
    "content": "While I'm trying to disassemble my own C code I am stuck in a problem of not understanding how this Switch statement is implemented in assembly code. Can anyone please help to figure it out? This the switch assembly. Couldn't understand why so many registers are being used plus at the last line it's written \"jmp dword ptr [eax4+0A110E8h]\". Is this eax4 necessary for switch in assembly or did by the disassembler on its own?\n\nMy C Code:\n<pre><code>main() {\n  int a;\n  printf(\"Please enter a no between 1 and 5: \");\n  scanf(\"%d\", & a);\n  switch (a) {\n  case 1:\n    printf(\"You chose One\");\n    break;\n  case 2:\n    printf(\"You chose Two\");\n    break;\n  case 3:\n    printf(\"You chose Three\");\n    break;\n  case 4:\n    printf(\"You chose Four\");\n    break;\n  case 5:\n    printf(\"You chose Five.\");\n    break;\n  default:\n    printf(\"Invalid Choice. Enter a no between 1 and 5\");\n    break;\n  }\n}\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "524",
    "tags": [
        "disassembly",
        "binary-analysis",
        "c",
        "static-analysis",
        "disassemblers"
    ],
    "user": "Ramesses II",
    "time": "Feb 7, 2021 at 19:19",
    "comments": [
        {
            "user": "Ramesses II",
            "text": "All run-time checks are off which leads to compiler-generated code.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is compiled to simple jump-table. Firstly it subtracts 1 from the <pre><code>a</code></pre> variable, so now your switch-case is for values in range <0;4> inclusive (instead of <1;5>). Next it checks if <pre><code>a</code></pre> is > 4, if so it jumps to the <pre><code>default</code></pre> label at <pre><code>0A1109F</code></pre>. Note that the <pre><code>JA</code></pre> instruction is for the unsigned values, so it will jump to the <pre><code>default</code></pre> label in case if your value of <pre><code>a</code></pre> is negative.\nNow the magic happens. It jumps to the address inside jump-table, the jump-table is 5 elements long (because there are 5 cases in your switch), and each element is 4 bytes long (because you compiled it for 32 bit architecture, and the sizeof pointer is 32 bits there, that's why it's eax*4). The jump-table starts at <pre><code>0A110E8</code></pre>.\nSo if you dereference pointer at <pre><code>0A110E8</code></pre> you will get the address of \"You chose one\" block. Because for this case <pre><code>eax=0</code></pre>(it was decremented just moment ago), and <pre><code>[eax*4+0A110E8] = [0A110E8]</code></pre> now.\nIf you type <pre><code>2</code></pre> to the stdin, then <pre><code>eax=1</code></pre>, so <pre><code>[eax*4+0A110E8] = [1*4+0A110E8] = [0A110EC]</code></pre>. Now you can dereference the pointer 0A110EC and you will get the address of the second switch block, the address where the <pre><code>JMP</code></pre> instruction will redirect program flow in this case. The same rule applies for all the blocks.\n",
            "votes": "3",
            "user": "morsisko",
            "time": "Feb 7, 2021 at 22:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">and because of your magic, I understood it. Thanks, Brother! :D</span>",
                    "time": null
                }
            ]
        }
    ]
}