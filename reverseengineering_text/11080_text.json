{
    "title": "Are vTable pointers always located inside a module?",
    "link": "https://reverseengineering.stackexchange.com/questions/11080/are-vtable-pointers-always-located-inside-a-module",
    "content": "Assuming the standard VC++ vTable layout:\n<pre><code>  Heap-Addr           TableAddr\n+-----------+       +-----------+\n| TableAddr | ----> | Funcion-1 | ----> Exec region of module\n+-----------+       +-----------+\n| a         |       | Funcion-2 | ----> Exec region of module\n+-----------+       +-----------+\n| b         |       | Funcion-3 | ----> Exec region of module\n+-----------+       +-----------+\n| c         |       |    ...    |\n+-----------+       +-----------+\n</code></pre>\nIs TableAddr guaranteed to always be inside a module or can it be anywhere in the address space, if so, what are the conditions that would make TableAddr be outside a module.\nFor clarity: A module is any .exe or .dll which has read-only or executable regions of memory allowing functions to be called. From my experience I've only seen TableAddr reside inside read-only sections of modules.\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "c++",
        "memory",
        "vtables"
    ],
    "user": "Dave",
    "time": "Oct 11, 2015 at 6:36",
    "comments": [
        {
            "user": "Jongware",
            "text": "The import/export address mechanism of Windows is robust enough to allow this, but I think noone ever would bother to actually try it. Mainly because \"why?\".\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "I'm not sure I understand your question. What do you mean by \"outside of a module\" ? If the executable is loaded, everything is inside of (some) module according to your definition. Did you mean \"inside the same module\" ?\n",
            "time": null
        },
        {
            "user": "Dave",
            "text": "Well you could have regions of memory which don't correspond to any module such as the heap. I'm wondering if the compiler would generate vTable pointers to those regions as opposed to always being in a region which is part of a module.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Note that not every C++ compiler neccesarily uses a vtable pointer at all. For example, the Watcom C++ compiler, 20 years ago, implemented method calls by reserving a function pointer for each method within the object itself; the <pre><code>new</code></pre> operator initialized each of these function pointers separately, every time it generated a new object.\nThe very idea of the vtable is to optimize this. At the time an object is generated, its exact class is known. The vtable allows the compiler to assign all those \"function pointers\" at once (by putting the address of the vtable in the object), at the cost of one more indirection every time a method is called. But anyway, the vtable for any class that may be instantiated is known at compile time*. Which means the vtable can be pre-initialized at compile time, which means it's bound to be put into some initialized data segment.\nSo for code that was generated by a current C++ compiler, you should be able to assume that all vtables reside in an initialized segment, not the heap or the stack.\nHowever, if you're trying to write a decompiler, or a tool that automates dynamic analysis in some way, you should at least check for this condition. If i wanted to obfuscate my code, i could easily implement a function in assembly, that takes an input pointer to an object, generates a copy of that object's vtable, possibly modifies a vtable entry or two, and adjusts the vtable pointer to reference the copy. If you write an analysis tool that becomes well-known, this might even be a technique an obfuscator uses to specifically defeat your tool.\nSo while there shouldn't be a reason why vtables might be put anywhere but in initialized segments now, i wouldn't want to rely on this in a general case.\n(*) I haven't used C++ for a long time, which means i haven't followed the newer specifications closely. I can't guarantee that C++11, or C++14, haven't introduced some weird construct that would need to construct vtables on the fly. But i'd be quite astonished if that was the case.\n",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Oct 12, 2015 at 6:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">Thank you for your in-depth explanation. Luckily the tool I'm building is mainly for applications compiled with MSVC, which has remained consistent across many years. Knowing this property allows me to cache only the module memory rather than the entire address space of the application. But you're right, more robust obfuscation may change this in the future.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I believe that it is possible for both\n\nthe vtable pointer to point to a different module, and\nfor functions pointers in the vtable to point to a different module (at least indirectly.)\n\nThe first will happen if you have a base class (with at least 1 virtual method) exported from a DLL and a class deriving from this in an executable (which will import the DLL.)\nWhen a derived class object is constructed in the exe module, it will first be constructed as a base class object (by calling the base constructor in the DLL) and so the vtable pointer for the object will point into the DLL module. This will only be for a very short period of time as, soon after, the derived class constructor in the executable will update the object's vtable pointer to point to the derived class vtable which will be in the executable module.\nThe second can happen if the derived class doesn't override all the base class virtual methods. For these methods, the correct implementation will be the base class methods residing in the DLL. Hence, the relevent vtable entries will need to end up at the methods in the base class DLL. This will probably be via an import stub function in the executable itself.\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Oct 12, 2015 at 22:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Dave",
                    "text": "<span class=\"comment-copy\">You're right, I didn't even think of cross-module inheritance. This might be especially problematic if the software uses a lot of modules or plugins which can be swapped in and out.</span>",
                    "time": null
                }
            ]
        }
    ]
}