{
    "title": "reduce size of executable ELF program",
    "link": "https://reverseengineering.stackexchange.com/questions/32975/reduce-size-of-executable-elf-program",
    "content": "I'm experimenting on patching my hello world program in order to make it smol.\nI started by reducing the size of the program with the following commands:\n<pre><code>as --32 ./hello_32.S -o ./hello_32.o\nld -melf_i386 --omagic --strip-all ./hello_32.o -o hello_32\nstrip --remove-section=.note.gnu.property ./hello_32\n</code></pre>\nBy doing so, the size of my program is 332 bytes, but when I take a look at a HTTP server program with 229 bytes of size, I think I can reduce more, but I've no idea how to reduce the size manually\n",
    "votes": "0",
    "answers": 2,
    "views": "122",
    "tags": [
        "x86",
        "elf"
    ],
    "user": "ReYuki",
    "time": "May 20, 2024 at 7:56",
    "comments": [
        {
            "user": "julian",
            "text": "A classic tutorial about ELF binary size reduction can be found here: A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I decided to learn more about ELF format to gain better understanding\nreferences: Sys-V ABI, Wikipedia ELF\nI tried peeking at the httpd binary using readelf (thanks to the binutils package for making it easier to read):\n<pre><code>ELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x8048060\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          0 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         1\n  Size of section headers:           40 (bytes)\n  Number of section headers:         0\n  Section header string table index: 0\n\nThere are no sections in this file.\n\nThere are no section groups in this file.\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  LOAD           0x000060 0x08048060 0x08048060 0x00084 0x00084 RWE 0x10\n\nThere is no dynamic section in this file.\n\nThere are no relocations in this file.\nNo processor specific unwind information to decode\n\nDynamic symbol information is not available for displaying symbols.\n\nNo version information found in this file.\n</code></pre>\nand the program are only constructed by elf header, program header and the text section\nmeanwhile, comparing to my hello world program:\n<pre><code>ELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x80480bc\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          212 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         3\n  Size of section headers:           40 (bytes)\n  Number of section headers:         3\n  Section header string table index: 2\n\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .text             PROGBITS        080480bc 000094 00002d 00 WAX  0   0  1\n  [ 2] .shstrtab         STRTAB          00000000 0000c1 000011 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  D (mbind), p (processor specific)\n\nThere are no section groups in this file.\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  LOAD           0x000094 0x080480bc 0x080480bc 0x0002d 0x0002d RWE 0x4\n  NOTE           0x000000 0x08048094 0x00000000 0x00000 0x00000 R   0x4\n  GNU_PROPERTY   0x000000 0x08048094 0x00000000 0x00000 0x00000 R   0x4\n\n Section to Segment mapping:\n  Segment Sections...\n   00     .text \n   01     \n   02     \n\nThere is no dynamic section in this file.\n\nThere are no relocations in this file.\nNo processor specific unwind information to decode\n\nNo version information found in this file.\n</code></pre>\nI can reduce the size by eliminate some part of the binary, but before patching the program, I need to understand how the structure looks like:\n<pre><code>00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000  .ELF............\n00000010: 0200 0300 0100 0000 bc80 0408 3400 0000  ............4...\n00000020: d400 0000 0000 0000 3400 2000 0300 2800  ........4. ...(.\n00000030: 0300 0200 0100 0000 9400 0000 bc80 0408  ................\n00000040: bc80 0408 2d00 0000 2d00 0000 0700 0000  ....-...-.......\n00000050: 0400 0000 0400 0000 0000 0000 9480 0408  ................\n00000060: 0000 0000 0000 0000 0000 0000 0400 0000  ................\n00000070: 0400 0000 53e5 7464 0000 0000 9480 0408  ....S.td........\n00000080: 0000 0000 0000 0000 0000 0000 0400 0000  ................\n00000090: 0400 0000 b804 0000 00bb 0100 0000 b9db  ................\n000000a0: 8004 08ba 0e00 0000 cd80 b801 0000 0031  ...............1\n000000b0: dbcd 8068 656c 6c6f 2077 6f72 6c64 210a  ...hello world!.\n000000c0: 0000 2e73 6873 7472 7461 6200 2e74 6578  ...shstrtab..tex\n000000d0: 7400 0000 0000 0000 0000 0000 0000 0000  t...............\n000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n000000f0: 0000 0000 0000 0000 0000 0000 0b00 0000  ................\n00000100: 0100 0000 0700 0000 bc80 0408 9400 0000  ................\n00000110: 2d00 0000 0000 0000 0000 0000 0100 0000  -...............\n00000120: 0000 0000 0100 0000 0300 0000 0000 0000  ................\n00000130: 0000 0000 c100 0000 1100 0000 0000 0000  ................\n00000140: 0000 0000 0100 0000 0000 0000            ............\n</code></pre>\nELF Header (52 Bytes):\n<pre><code>00000000:+0x0 - 00000030:+0x3</code></pre>\nProgram Header (3 * 32 = 96 Bytes):\n<pre><code>00000030:+0x4 -  00000090:+0x3</code></pre>\nSegment (64 Bytes):\n<pre><code>00000090:+0x4 - 000000d0:+0x3</code></pre>\nSection Header (40 * 3 = 120 bytes):\n<pre><code>000000d0:+0x4 - 00000140:+0xB</code></pre>\nand here's the smol version:\n<pre><code>00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000  .ELF............\n00000010: 0200 0300 0100 0000 5480 0408 3400 0000  ........T...4...\n00000020: 0000 0000 0000 0000 3400 2000 0100 0000  ........4. .....\n00000030: 0000 0000 0100 0000 5400 0000 5480 0408  ........T...T...\n00000040: 5480 0408 2d00 0000 2d00 0000 0700 0000  T...-...-.......\n00000050: 0000 0000 b804 0000 00bb 0100 0000 b973  ...............s\n00000060: 8004 08ba 0e00 0000 cd80 b801 0000 0031  ...............1\n00000070: dbcd 8068 656c 6c6f 2077 6f72 6c64 210a  ...hello world!.\n</code></pre>\nand after manually delete some part of data, I need to adjust item that depends on file like: Entry point address, Load Offset, VirtAddr, PhysAddr, FileSiz, MemSiz, Align and pointer that passed to write syscall\nNow my hello wurld program only contain: 52 Bytes ELF header + 32 Bytes Program header + 45 Bytes text section, 128 Bytes in total\nI use <pre><code>vim</code></pre> and <pre><code>xxd</code></pre> to patch the binary\n",
            "votes": "0",
            "user": "ReYuki",
            "time": "May 20, 2024 at 8:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">Worth noting that typically, the <code>ElfXX_Shdr</code> tables aren't used by the kernel's loader, so you can overlap the <code>ElfXX_Phdr</code> over the last 0xc bytes of your <code>ElfXX_Ehdr</code>. Pretty certain the header sizes need to be exact tho.. there were some vulns in that like forever ago so they were hardcoded.</span>",
                    "time": null
                },
                {
                    "user": "ReYuki",
                    "text": "<span class=\"comment-copy\">is that really work? I tried to overlap it and got the following error while execute it: <code>cannot execute binary file: Exec format error</code>  also, can you tell me more about the vuln you mention?</span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\"><code>7f454c4601010100000000000000000002000300010000004e8004082e0000000000000000000000340020000100010000004e0000004e800408548004082d0000002d0000000700000000000000b804000000bb01000000b973800408ba0e000000cd80b80100000031dbcd8068656c6c6f20776f726c64210a</code></span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">used some random elf library i had lying around. ``` import ptypes, elf source=ptypes.setsource(ptypes.prov.file('elf.t2','rw')) z = elf.File().l ph = z['e_data']['e_phoff'].d # shift the segment contents (addr in asm is wrong) z['e_entries'][2].commit(offset=0x4e) # adj entrypoint z['e_data']['e_entry'].set(0x804804e).c # shift the phdrs to overlab the sections z['e_data']['e_phoff'].set(0x2e).c # adj the phdr offset and vaddr/paddr jic ph[0]['p_offset'].set(0x4e) ph[0]['p_vaddr'].set(0x804804e), #ph[0]['p_paddr'].set(0x804804e) ph.commit(offset=0x2e) ```</span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">sorry, for not posting a full comment w/ newlines... that shit gets indexed by search engines.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>sstrip is a small utility that removes as much as possible from an\nELF file without affecting the file's memory image.\n</code></pre>\nhttps://github.com/BR903/ELFkickers\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "May 25, 2024 at 20:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}