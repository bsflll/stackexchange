{
    "title": "Why does an exe's import Table have two refrences to kernel32.dll (or any other dll)?",
    "link": "https://reverseengineering.stackexchange.com/questions/8749/why-does-an-exes-import-table-have-two-refrences-to-kernel32-dll-or-any-other",
    "content": "According to what I know, Import Descriptor table is made of an array of <pre><code>_IMAGE_IMPORT_DESCRIPTOR</code></pre> structures. There is one <pre><code>_IMAGE_IMPORT_DESCRIPTOR</code></pre> for every dll that is imported.\nI have an exe which has two <pre><code>_IMAGE_IMPORT_DESCRIPTOR</code></pre> for kernel32.dll.\nWhy is this so?\nWhy does this exe need to import the dll twice ?\nNote: I'm using PEview to see the PE structure. Is it possible that PEview is getting confused? Even if there is a problem with PEview is it possible for an exe to import the same dll twice?\n\nI have another doubt regarding the TLS directory in the PE Structure.\nIs the TLS directory/Table which is present in the <pre><code>IMAGE_OPTIONAL_HEADER</code></pre> of the PE, present only when the exe/program uses implicit TLS (i.e. <pre><code>__declspec(thread)</code></pre>) and not when we use API(i.e. explicit TLS using functions like <pre><code>TlsAlloc</code></pre>, <pre><code>TlsFree</code></pre>, <pre><code>TlsSetValue</code></pre> and <pre><code>TlsGetValue</code></pre> etc.).\nIs it common for program's to use this? I have read it in many places that this can be a heuristic for malicious executable.\n",
    "votes": "2",
    "answers": 1,
    "views": "976",
    "tags": [
        "windows",
        "x86",
        "malware",
        "pe",
        "security"
    ],
    "user": "rebel87",
    "time": "Apr 24, 2015 at 19:16",
    "comments": [
        {
            "user": "qwm",
            "text": "It just means that linker decided to put it twice. Its been quite a time since I have last seen Borland programs but back then Borland's linker always generated 2 and even 3 imports for some of dlls.\n",
            "time": null
        },
        {
            "user": "rebel87",
            "text": "@qwn thanks so there is nothing malicious about it...\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "the TLS question should probably be asked separately, and my answer split as a result.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The import table can theoretically have as many references to a DLL as there are imports.  It is a function of the linker that produces this effect, and in some cases, the linker does not perform any kind of string pooling.\nBorland products treat units as stand-alone objects, so any imported functions that are used are included without reference to any others.  The effect is a DLL name, a group of imports for that DLL for the first unit; a DLL name (which might be duplicated), a group of imports for that DLL for the second unit (any or all of which might also be duplicated from the first group); and so on.\nAs far as TLS goes, the TLS directory entry is present only when the program uses EXplicit TLS.  i.e. it declares a static TLS entry that the linker can see, and which Windows must initialise when the program first starts (because the program might use it immediately).  The use of dynamic TLS (TlsAlloc, TlsFree) is entirely within program control, and the program is required to perform the initialisation itself.\n",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Apr 24, 2015 at 16:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}