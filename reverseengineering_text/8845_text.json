{
    "title": "What is the correct disassembly for ARM7 opcode E1F120D1?",
    "link": "https://reverseengineering.stackexchange.com/questions/8845/what-is-the-correct-disassembly-for-arm7-opcode-e1f120d1",
    "content": "I'm writing a disassembler for ARM opcodes and I'm struggling with a particular encoding. The offending instruction is <pre><code>E1F120D1</code></pre>. I think I've followed the instructions closely, and expect the disassemble to be <pre><code>mvns r2,r1</code></pre> but trying it on http://www.onlinedisassembler.com gives me <pre><code>ldsrb r2,[r1,#1]!</code></pre>. \nIt seems like the low-order <pre><code>20D1</code></pre> in the instruction is causing online disassembler ti switch from <pre><code>mvn</code></pre> to <pre><code>ldrsb</code></pre>. Is this a bug in the disassembler -- not likely -- or my misunderstanding the instruction encodings in the manual?\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "John Källén",
    "time": "May 8, 2015 at 11:00",
    "comments": [],
    "answers_data": [
        {
            "content": "If you look at the ARM Architecture Reference Manual, you should be able to see that Chapter A5 takes you through the decoding of ARM instructions.\nStarting with table A5-1, your instruction has -\n<pre><code>cond (31-28) = 1110\nop1 (27-25) =  000\n</code></pre>\nThis matches \n<pre><code>cond = not 1111, op1 = 00x  => Data Processing & Miscellaneous instructions (A5.2)\n</code></pre>\nThen for table A5-2 in section A5.2, your instruction has -\n<pre><code>op (25) = 0\nop1 (24-20) = 11111\nop2 (7-4) = 1101\n</code></pre>\nThe encoding that matches these bits is -\n<pre><code>op = 0, op1 = not 0xx1x, op2 = 11x1 => Extra load/store instructions (A5.2.8)\n</code></pre>\nFinally for table A5-10 in section A5.2.8, your instruction has -\n<pre><code>op2 (6-5) = 10\nop1 (24-20) = 11111\nRn (19-16) = 0001\n</code></pre>\nThis matches\n<pre><code>op2 = 10, op1 = xx1x1, Rn = not 1111 => LDRSB (immediate)\n</code></pre>\nSo, yes, bits 7-4 definitely affect the decoding of this instruction.\n",
            "votes": "3",
            "user": "Ian Cook",
            "time": "May 10, 2015 at 17:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Indeed this correct. My mistake was using a very old reference for the ARM architecture, where the LDRSB instruction was not implemented yet.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This is LDRSB:\nCond 000 PU0W L Rn Rd 0 0 0 0 Rm\nThis is MVN:\nCond 001 1111 ...\nThe difference is in the I register.  MVN is register to register only.\n",
            "votes": "2",
            "user": "peter ferrie",
            "time": "May 8, 2015 at 15:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}