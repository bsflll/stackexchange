{
    "title": "Problem getting root shell on Ezviz camera",
    "link": "https://reverseengineering.stackexchange.com/questions/31595/problem-getting-root-shell-on-ezviz-camera",
    "content": "I got a CS-C6N Ezviz camera. My friend gave it to me because he doesn't use it anymore. I was able to get rtsp stream from the camera (but laggy), and I also was able to connect to UART port on the camera's main board at baudrate 115200.\nThe UART interface gives me U-Boot shell (which I was able to dump firmware, see below) and access to a Busybox protected shell (psh).\nThe camera runs on ARM(v6) Linux, with a 3.0 kernel.\nHere is the repo contains firmware dump and other stuff I found on the camera.\nThe problem is, the psh provide a really limited set of commands, and some even un-runable even when it's available in the <pre><code>help</code></pre> command:\n\nNow I want to break out of that shell to get a full root shell.\nFrom what I understand, this is the boot process: First, U-boot is loaded, then it loads kernel, then kernel boots, then it loads some sort of \"init\" (for some reason I can't find that exactly init script/executable). The init will then initialize the system, and finally it loads the vendor's main app <pre><code>ezapp</code></pre> and a protected Busybox shell.\nWhat I have tried:\n\nFollow this answer of adding <pre><code>single</code></pre> to boot cmdline: it stills boot to that psh, but the <pre><code>ezapp</code></pre> won't be loaded.\n\nModify the squashfs that contains the <pre><code>ezapp</code></pre> so it will load <pre><code>/bin/sh</code></pre> instead of <pre><code>ezapp</code></pre>, then pass the squashfs as initrd to kernel: not work, system still runs <pre><code>ezapp</code></pre>.\n\nAdd <pre><code>init=/bin/sh</code></pre> to cmdline: not work, kernel somehow ignore that option.\n\n\nHere is the output from <pre><code>dmesg</code></pre> command (one of the very few command that can be executed on psh):\n<pre><code>[    0.000000] Linux version 3.0.8[svn 59238] (tuyongliang@Cpl-Civil-Camera) (gcc version 4.3.2 (crosstool-NG 1.19.0) ) #219 Tue Jul 23 15:45:36 CST 2019\n[    0.000000] CPU: ARMv6-compatible processor [410fb767] revision 7 (ARMv7), cr=00c5387f\n[    0.000000] CPU: VIPT nonaliasing data cache, VIPT nonaliasing instruction cache\n[    0.000000] Machine: HIK IPC\n[    0.000000] devinfo=c6c_2019\n[    0.000000] mem=38797312 byte\n[    0.000000] Memory policy: ECC disabled, Data cache writeback\n[    0.000000] On node 0 totalpages: 9472\n[    0.000000] free_area_init_node: node 0, pgdat c0438dc0, node_mem_map c045b000\n[    0.000000]   Normal zone: 74 pages used for memmap\n[    0.000000]   Normal zone: 0 pages reserved\n[    0.000000]   Normal zone: 9398 pages, LIFO batch:1\n[    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768\n[    0.000000] pcpu-alloc: [0] 0 \n[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 9398\n[    0.000000] Kernel command line: console=ttyS0,115200 root=/dev/ram0 mem=40M single mtdparts=spi_flash:256k(bld)ro,64k(env),64k(enc)ro,2304k(sys),3968k(ap0\n[    0.000000] PID hash table entries: 256 (order: -2, 1024 bytes)\n[    0.000000] Dentry cache hash table entries: 8192 (order: 3, 32768 bytes)\n[    0.000000] Inode-cache hash table entries: 4096 (order: 2, 16384 bytes)\n[    0.000000] Memory: 37MB = 37MB total\n[    0.000000] Memory: 33016k/33016k available, 4872k reserved, 0K highmem\n[    0.000000] Virtual kernel memory layout:\n[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)\n[    0.000000]     fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)\n[    0.000000]     DMA     : 0xffc00000 - 0xffe00000   (   2 MB)\n[    0.000000]     vmalloc : 0xc2800000 - 0xfe000000   ( 952 MB)\n[    0.000000]     lowmem  : 0xc0000000 - 0xc2500000   (  37 MB)\n[    0.000000]     modules : 0xbf000000 - 0xc0000000   (  16 MB)\n[    0.000000]       .init : 0xc0008000 - 0xc00d4000   ( 816 kB)\n[    0.000000]       .text : 0xc00d4000 - 0xc0417000   (3340 kB)\n[    0.000000]       .data : 0xc0418000 - 0xc0439440   ( 134 kB)\n[    0.000000]        .bss : 0xc0439464 - 0xc045a478   ( 133 kB)\n[    0.000000] SLUB: Genslabs=13, HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1\n[    0.000000] NR_IRQS:128\n[    0.000000] timer mult: 0xfa000000, timer shift: 0x16\n[    0.000000] sched_clock: 32 bits at 1000kHz, resolution 1000ns, wraps every 4294967ms\n[    0.000000] Console: colour dummy device 80x30\n[    0.000000] console [ttyS0] enabled\n[    0.000409] Calibrating delay loop... 430.08 BogoMIPS (lpj=2150400)\n[    0.060029] pid_max: default: 32768 minimum: 301\n[    0.060412] Mount-cache hash table entries: 512\n[    0.061131] CPU: Testing write buffer coherency: ok\n[    0.061451] hw perfevents: enabled with v6 PMU driver, 3 counters available\n[    0.062578] devtmpfs: initialized\n[    0.066508] NET: Registered protocol family 16\n[    0.071026] fh_pinctrl_init selected_devices_c6c_2019.\n[    0.085091] hw-breakpoint: found 6 breakpoint and 1 watchpoint registers.\n[    0.085137] hw-breakpoint: maximum watchpoint size is 4 bytes.\n[    0.113497] bio: create slab <bio-0> at 0\n[    0.119000] fh_dmac fh_dmac.0: FH DMA Controller, 8 channels\n[    0.125564] Advanced Linux Sound Architecture Driver Version 1.0.24.\n[    0.128599] cfg80211: Calling CRDA to update world regulatory domain\n[    0.130430] Switching to clocksource fh_clocksource\n[    0.185851] NET: Registered protocol family 2\n[    0.186096] IP route cache hash table entries: 1024 (order: 0, 4096 bytes)\n[    0.186698] TCP established hash table entries: 2048 (order: 2, 16384 bytes)\n[    0.186844] TCP bind hash table entries: 2048 (order: 1, 8192 bytes)\n[    0.186923] TCP: Hash tables configured (established 2048 bind 2048)\n[    0.186951] TCP reno registered\n[    0.186981] UDP hash table entries: 256 (order: 0, 4096 bytes)\n[    0.187040] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)\n[    0.187726] NET: Registered protocol family 1\n[    1.520113] squashfs: version 4.0 (2009/01/31) Phillip Lougher\n[    1.530885] JFFS2 version 2.2. (NAND) Â© 2001-2006 Red Hat, Inc.\n[    1.547273] msgmni has been set to 64\n[    1.561028] NET: Registered protocol family 38\n[    1.561127] io scheduler noop registered (default)\n[    1.580949] PWM driver, Number: 8, IO base addr: 0xc2968000\n[    1.591785] ttyS.0: ttyS0 at MMIO 0xf0700000 (irq = 30) is a ttyS\n[    1.600942] fh serial probe done\n[    1.601052] ttyS.2: ttyS2 at MMIO 0xf0880000 (irq = 35) is a ttyS\n[    1.607981] fh serial probe done\n[    1.627555] brd: module loaded\n[    1.731122] loop: module loaded\n[    1.759717] I2S probe\n[    1.759763] I2S :996\n[    1.817310] CLK misc driver init successfully\n[    1.869242] m25p80 spi0.0: found gd25q64, expected m25p80\n[    1.869444] m25p80 spi0.0: gd25q64 (8192 Kbytes)\n[    1.869517] 8 cmdlinepart partitions found on MTD device spi_flash\n[    1.869551] Creating 8 MTD partitions on \"spi_flash\":\n[    1.869590] 0x000000000000-0x000000040000 : \"bld\"\n[    1.896270] 0x000000040000-0x000000050000 : \"env\"\n[    1.921226] 0x000000050000-0x000000060000 : \"enc\"\n[    1.949632] 0x000000060000-0x0000002a0000 : \"sys\"\n[    1.976362] 0x0000002a0000-0x000000680000 : \"app\"\n[    2.001175] 0x000000680000-0x0000006f0000 : \"cfg\"\n[    2.029686] 0x0000006f0000-0x0000007f0000 : \"mini\"\n[    2.056291] 0x0000007f0000-0x000000800000 : \"share\"\n[    2.131692] console [netcon0] enabled\n[    2.131720] netconsole: network logging started\n[    2.176354] fh_rtc fh_rtc.0: rtc core: registered rtc as rtc0\n[    2.177280] i2c /dev entries driver\n[    2.181064] I2C driver:\n[    2.181086]  platform registration... \n[    2.181179]  Clock: 15000khz, Standard-mode HCNT:LCNT = 62:74\n[    2.181210]  tx fifo depth: 16, rx fifo depth: 16\n[    2.196861]  I2C - (dev. name: fh_i2c - id: 0, IRQ #42\n[    2.196882]          IO base addr: 0xc29b0000)\n[    2.196950] I2C driver:\n[    2.196964]  platform registration... \n[    2.197053]  Clock: 15000khz, Standard-mode HCNT:LCNT = 62:74\n[    2.197086]  tx fifo depth: 16, rx fifo depth: 16\n[    2.210066]  I2C - (dev. name: fh_i2c - id: 1, IRQ #43\n[    2.210087]          IO base addr: 0xc29b8000)\n[    2.300492] ALSA device list:\n[    2.300524]   No soundcards found.\n[    2.307225] TCP cubic registered\n[    2.307266] NET: Registered protocol family 17\n[    2.307539] Bridge firewalling registered\n[    2.307587] lib80211: common routines for IEEE802.11 drivers\n[    2.307618] lib80211_crypt: registered algorithm 'NULL'\n[    2.307643] Registering the dns_resolver key type\n[    2.307713] VFP support v0.3: implementor 41 architecture 1 part 20 variant b rev 5\n[    2.311028] mmc1 power register success!\n[    2.311067] Change SD state from STOR_OFFLINE to STOR_OFFLINE\n[    2.341258] GMAC driver:\n[    2.341279]  platform registration... \n[    2.357002] fh_gmac fh_gmac.0: eth0: mixed HW and IP checksum settings.\n[    2.357051] fh_gmac fh_gmac.0: eth0: mixed no checksumming and other settings.\n[    2.357314]  eth0 - (dev. name: fh_gmac - id: 0, IRQ #14\n[    2.357334]          IO base addr: 0xc29d8000)\n[    2.442672] gmac_rmii: probed\n[    2.442716] eth0: PHY ID 001cc816 at 0 IRQ -1 (0:00) active\n[    2.482073] fh_rtc fh_rtc.0: setting system clock to 1970-01-01 00:02:00 UTC (120)\n[    2.495831] mmc0: new high speed SDIO card at address 0001\n[    2.538461] aes driver registered\n[    2.540197] Freeing init memory: 816K\n[    2.610334] card0 disconnected!\n</code></pre>\nU-Boot commands:\n<pre><code>HKVS # help\n?       - alias for 'help'\narc_go  - start application at address 'addr'\nbase    - print or set address offset\nbdinfo  - print Board Info structure\nboot    - boot default, i.e., run 'bootcmd'\nbootd   - boot default, i.e., run 'bootcmd'\nbootm   - boot application image from memory\nbootmini- load &    run mini sys\nbootp   - boot image via network using BOOTP/TFTP protocol\ncmp     - memory compare\nconinfo - print console devices and information\ncp      - memory copy\ncrc32   - checksum calculation\ndhcp    - boot image via network using DHCP/TFTP protocol\necho    - echo args to console\neditenv - edit environment variable\nfastbootcmd- set boot command\nfatinfo - print information about filesystem\nfatload - load binary file from a dos filesystem\nfatls   - list files in a directory (default /)\nformat  - format flash except bootloader area\ngo      - go xxx.bin thru net \ngo_orig - start application at address 'addr'\ngos     - go xxx.bin thru serial\ngpio_get- get the direction and value of gpio\ngpio_set- config the direction and value of gpio\nhelp    - print command description/usage\niminfo  - print header information for application image\nloadb   - load binary file over serial line (kermit mode)\nloadk   - load kernel to DRAM & verify kernel+app\nloady   - load binary file over serial line (ymodem mode)\nloop    - infinite loop on address range\nmd      - memory display\nmm      - memory modify (auto-incrementing address)\nmtest   - simple RAM read/write test\nmw      - memory write (fill)\nnm      - memory modify (constant address)\npinctrl - Pin Ctrl\nping    - send ICMP ECHO_REQUEST to network host\nprintenv- print environment variables\nrarpboot- boot image via network using RARP/TFTP protocol\nreset   - Perform RESET of the CPU\nrun     - run commands in an environment variable\nsaveenv - save environment variables to persistent storage\nsetenv  - set environment variables\nsf      - SPI flash sub-system\nsleep   - delay execution for some time\nsspi    - SPI utility commands\ntftpboot- boot image via network using TFTP protocol\nupa     - update app image\nupapp   - update app image\nupb     - update bootloader\nupbs    - update bootloader from serial\nupdate  - update digicap.dav\nupdateb - update bootloader\nupf     - update firmware, format and update (factory use)\nupk     - update uImage\nversion - print monitor version\nwdt     - WDT utility commands\nHKVS # \n</code></pre>\nSomething to note:\n\nI don't know what passed <pre><code>mtdparts=spi_flash:256k(bld)ro,64k(env),64k(enc)ro,2304k(sys),3968k(ap0</code></pre> and such stuff to kernel cmdline, but it's definitely not U-boot. Maybe cmdline build-in to kernel?\nI can't seem to decompress the kernel to load into IDA\nI saw some \"mtd\" blocks that could be modified using U-boot, but since I'm not sure, I will not modify them until someone gives a proper answer on modify them.\nWhy U-boot show <pre><code>HKVS</code></pre>? Maybe this is a clone of HKVision camera, or the company Ezviz use SDK from HKVS? Or HKVS is OEM?\n\nUPDATE:\nI tried modifying the squashfs and then rewrite it at the same address on the SPI flash, but when the camera boots, it claimed about mismatch checksum, then it drop me to a shell called <pre><code>finsh</code></pre> shell with rt-thread RTOS. I think it's that RTOS's shell. After that, I see a process start downloading firmware from Ezviz server, then write it to flash to revert my edits. I think I can't modify this firmware unless I find a proper way to disable firmware checksum.\nThank you!\n",
    "votes": "3",
    "answers": 0,
    "views": "1k",
    "tags": [
        "arm",
        "linux",
        "hardware",
        "embedded"
    ],
    "user": "raspiduino",
    "time": "Mar 2, 2023 at 15:01",
    "comments": [
        {
            "user": "Jonas",
            "text": "How are you getting the UART interface? Sometimes there's 2 different UARTs. I know on some MDVR devices which use busybox, they have a lot of read only permissions but sometimes the firmware checksum is in a shell script or it checks via the internet in that case you can try \"spoof\" the url and add your checksum but that's only if you can point the address to your LAN.  In the past I really just wanted to get hold of the debug logs without opening up water resistance seals but yeah nothing is easy these days....\n",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "@Jonas I just open the camera's case and found a unsoldered 4 holes connection. I just guess they must be 3.3V, GND, RX and TX pin, but I don't know the order. So I just plug 2 wires randomly at 2 of these ports, and then connects these 2 wires to my serial adapter. You just need to remember to either find the GND pin to connect serial adapter and the camera to common ground, or connect the camera's power to the same power line of your computer. After various trials, I managed to find the two RX and TX pin (which are 2 pins in the middle). Open a serial console at baudrate 115200 and enjoy.\n",
            "time": null
        },
        {
            "user": "Quinton_Reverses543",
            "text": "I am very interested in the methods that you used to get as far as you did while working on the Ezvis CS-C6N. I was wondering if we could get in touch and help each other. I am also working on reverse engineering this camera and would love to learn more from you. I am particularly interested in how you were able to dump the firmware, and get it to the stage that it in in your git repo. I am also curious how you were able modify the squash and put it back onto the camera. Cant wait to hear back from you. Thanks!\n",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "How can we get in touch?\n",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "I have discord at gvl610, can you contact me?\n",
            "time": null
        }
    ],
    "answers_data": []
}