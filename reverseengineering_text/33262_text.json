{
    "title": "wzr register usage in main method on ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/33262/wzr-register-usage-in-main-method-on-arm",
    "content": "I have this C code :\n<pre><code>\nint foo(){\n    int a = 1;\n    int b = 1;\n    return a + b;\n}\n\n\nint main() {\n    return 2;\n}\n</code></pre>\nAfter disassembling it shows:\n<pre><code>foo():\n        sub     sp, sp, #16\n        mov     w8, #1\n        str     w8, [sp, #12]\n        str     w8, [sp, #8]\n        ldr     w8, [sp, #12]\n        ldr     w9, [sp, #8]\n        add     w0, w8, w9\n        add     sp, sp, #16\n        ret\n\nmain:\n        sub     sp, sp, #16\n        str     wzr, [sp, #12]\n        mov     w0, #2\n        add     sp, sp, #16\n        ret\n</code></pre>\nWhy does <pre><code>main</code></pre> method use <pre><code>wzr</code></pre> register on this line <pre><code>str     wzr, [sp, #12]</code></pre> while <pre><code>foo</code></pre> method doesn't?\n",
    "votes": "1",
    "answers": 1,
    "views": "68",
    "tags": [
        "disassembly",
        "arm",
        "arm64"
    ],
    "user": "pacman",
    "time": "Oct 15, 2024 at 21:55",
    "comments": [],
    "answers_data": [
        {
            "content": "I'll take guess that you are using <pre><code>clang</code></pre> and running it without optimisations.\nNormally when looking at generated code without optimisations, there is lots of seeming superfluous code output and that's the simple answer\nHere though, there is more going on.  This is clear to see if we change the source code a bit.\n<pre><code>int main2() {\n    return 42;\n}\n\nint main() {\n    return 42;\n}\n</code></pre>\nDespite two, on the face of it, identical functions, we see different code output.\n<pre><code>main2:\n    mov     w0, #42\n    ret\n\nmain:\n    sub     sp, sp, #16\n    str     wzr, [sp, #12]\n    mov     w0, #42\n    add     sp, sp, #16\n    ret\n</code></pre>\nThis difference is also visible in clang's LLVM IR output, which is the precursor to the generated assembly code.\n<pre><code>define dso_local i32 @main2() {\nentry:\n  ret i32 42\n}\n\ndefine dso_local i32 @main() {\nentry:\n  %retval = alloca i32, align 4\n  store i32 0, ptr %retval, align 4\n  ret i32 42\n}\n</code></pre>\nThis difference is highly likely because <pre><code>main</code></pre> is a special function in <pre><code>C</code></pre>.\nThis answer on stackoverflow explains what makes <pre><code>main</code></pre> special.  Of particular interest is the fact that <pre><code>main</code></pre> doesn't need to have an explicit return statement and, in the absence of one, it is specified in the standard to return zero.\nIt is highly likely that what is seen in the LLVM IR and assembly language output above is part of <pre><code>clang</code></pre>'s preparation to handle this case by setting up a local variable with value zero.\nIf you compiled with optimisations, the difference will disappear.\n\nWhere this gets a little more unexpected is we look at 2 more variations -\n\nmain explicitly returns 0\nmain implicitly returns 0\n\nConsistent with the above, in the first case, <pre><code>clang</code></pre> sets up the <pre><code>%retval</code></pre> variable but doesn't use it.\nHowever, in the second case, and somewhat counter-intuitively, when the code is relying on the implicit behaviour <pre><code>clang</code></pre> skips setting up <pre><code>%retval</code></pre> completely and simply returns a zero directly.\nFirst case -\n<pre><code>// main explicitly returning 0\n\n// C\n\nint main() {\n    return 0;\n}\n\n// LLVM IR\n\ndefine dso_local i32 @main() {\nentry:\n  %retval = alloca i32, align 4\n  store i32 0, ptr %retval, align 4\n  ret i32 0\n}\n\n// AArch64\n\nmain:\n    sub     sp, sp, #16\n    mov     w0, wzr\n    str     wzr, [sp, #12]\n    add     sp, sp, #16\n    ret\n</code></pre>\nSecond case -\n<pre><code>// main implicitly returning 0\n\n// C\n\nint main() {\n}\n\n// LLVM IR\n\ndefine dso_local i32 @main() {\nentry:\n  ret i32 0\n}\n\n// AArch64\nmain:\n    mov     w0, wzr\n    ret\n</code></pre>\n\nThere are a couple of very similar questions on stackoverflow\nhere and here\n",
            "votes": "5",
            "user": "Ian Cook",
            "time": "Oct 20, 2024 at 21:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}