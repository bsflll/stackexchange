{
    "title": "Call DLL export in OllyDBG",
    "link": "https://reverseengineering.stackexchange.com/questions/14710/call-dll-export-in-ollydbg",
    "content": "I am using OllyDbg 2.01 and I walked through this tutorial to figure out how Call DLL export works. Even though it was written for another version of OllyDBG it work just fine. We should notice, that in example with USER32.dll OllyDBG detects number of input arguments, so I can change them from Call DLL export dialogue.\nI decided to write my own DLL library in C++ in order to test OllyDBG functionality in a more detailed manner.\nHere is a source code of my library.\n<pre><code>CPPlib.h\n\n#pragma once\n#ifdef CPPLib_EXPORTS  \n#define CPPLib_API __declspec(dllexport)   \n#else  \n#define CPPLib_API __declspec(dllimport)   \n#endif  \n\n#include <string>\n\nnamespace CPPLib\n{\n\n    class Functions\n    {\n    public:\n\n        static CPPLib_API void Identify();\n\n\n        static CPPLib_API void GetText();\n\n\n        static CPPLib_API void PrintText(std::string& s);\n    };\n}\n\n\nCPPLib.cpp\n\n#include \"stdafx.h\"  \n#include \"CPPLib.h\"  \n#include <iostream>\n#include <windows.h>\n\nnamespace CPPLib\n{\n    void Functions::Identify()\n    {\n        std::cout << \"This is a CPPlib \\r\n\";\n    }\n\n    void Functions::GetText()\n    {\n        std::cout << \"This is a random text from CPPlib \\r\n\";\n    }\n\n    std::wstring s2ws(const std::string& s)\n    {\n        int len;\n        int slength = (int)s.length() + 1;\n        len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);\n        wchar_t* buf = new wchar_t[len];\n        MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);\n        std::wstring r(buf);\n        delete[] buf;\n        return r;\n    }\n\n    void Functions::PrintText(std::string& s)\n    {\n        std::wstring stemp = CPPLib::s2ws(s);\n        LPCWSTR result = stemp.c_str();\n\n        MessageBox(0, result, (LPCWSTR)L\"MessageBox caption\", MB_OK);\n\n        std::cout << \"This is a user input text: \" << s;\n    }\n\n\n}\n</code></pre>\nIn this question my interest is in the function PrintText. It takes string as an input argument, show Message box with it and prints the same string in the console.\nIf I call this function from C++ program - it works just fine.\n<pre><code>#include \"stdafx.h\"\n#include \"CPPLib.h\"\n#include <string>\n\nint main()\n{\n    CPPLib::Functions::Identify();\n    CPPLib::Functions::GetText();\n    std::string s = \"USER INPUT\";\n    CPPLib::Functions::PrintText(s);\n    return 0;\n}\n</code></pre>\nUnlike in the example from tutorial, OllyDBG does not detect number of input arguments for my DLL.\n\nUSER32.dll\n\nCPPLib.dll\nMoreover, even if I define it manually (e.g. choose Arg1 to be memory buffer 1) when calling that function it does not take what I wanted to be an argument. And there is no other way to change this argument as step into a function, find memory address to which it refers and change it there.\nSo my question is: Why does OllyDbg detect number of input arguments in functions (and allows to alter them easily) from USER32.dll and doesn't in my own DLL? How can I overcome this problem?\n",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg",
        "debugging",
        "dll",
        "functions"
    ],
    "user": "aGGeRReS",
    "time": "Feb 21, 2017 at 11:16",
    "comments": [
        {
            "user": "marshal craft",
            "text": "I'm not sure of the way you are loading, building your dll. Does yours also have a static library? In some instances dlls can be used as a static library and linked statically.\n",
            "time": null
        },
        {
            "user": "marshal craft",
            "text": "Also see here msdn.microsoft.com/en-us/library/d91k01sh.aspx\n",
            "time": null
        },
        {
            "user": "aGGeRReS",
            "text": "@marshalcraft , I was trying to make dynamic library, so I ended up following this tutorial link, because I though I was doing something wrong.  From you link I clearly see, that \"If you are not using the __declspec(dllexport) keyword to export the DLL's functions, the DLL requires a .def file.\", so far I used it in my code.\n",
            "time": null
        },
        {
            "user": "marshal craft",
            "text": "So whitch are you inquiring about, how to use dlls or how ollydbg? That seems to be a logical deductive step.\n",
            "time": null
        },
        {
            "user": "aGGeRReS",
            "text": "@marshalcraft, I am inquiring  about why OllyDBG does not see arguments for my own library, but for the e.g. user32.dll does.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "i compiled the src in commandline (no vs using ewdk)\nand it appears ollydbg is able to identify the args and the call export seems to succeed here with some random crap thrown in for s    \ni assume you are aware std::string is a structure and not a plain string\nyou may need to properly craft a std::string and point the address of the std::string\nfor you to see it in messagebox in the argument field \nwell for whatever it is worth here is a screenshot of my dab with what was posted and its results   \n\n\nEDIT\nstd::string is a structure as i mentioned \nyour s if you debugged your executable directly should be like this \n<pre><code>0:000> dt -r9 s\nLocal var @ 0x22f984 Type std::basic_string<char,std::char_traits<char>,std::allocator<char> >*\n0x0022f98c\n   +0x000 _Mypair          : std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Str\ning_val<std::_Simple_types<char> >,1>\n      +0x000 _Myval2          : std::_String_val<std::_Simple_types<char> >\n         +0x000 _Bx              : std::_String_val<std::_Simple_types<char> >::_Bxty\n            +0x000 _Buf             : [16]  \"USER INPUT\"\n            +0x000 _Ptr             : 0x52455355  \"--- memory read error at address 0x52455355 ---\"\n            +0x000 _Alias           : [16]  \"USER INPUT\"\n         +0x010 _Mysize          : 0xa\n         +0x014 _Myres           : 0xf\n   =6e2a0000 npos             : 0x905a4d\n0:000>\n</code></pre>\nso if you notice std::string contains a small performance optimization \nlike if the string is less than 0x10 bytes it doesn't allocate memory but uses the buffer directly  if the string is bigger than 0x10 bytes it allocates memory \nit has a size and max size members at 0x10 and 0x14 from the start of buffer   ie foo.cstr() you may need to properly set them  see below two snap shots one for a bigger std::string and one for a smaller std::string \n\nbigger string \n\nyou should recognize 4021c0 as loaddlls dump1 space \nhope that helps \nas to why ollydbg shows two args may be it is a bug in the olly engine \naccording to windbg it is only one parameter \n<pre><code>0:000> .fnent .\nDebugger function entry 01e40268 for:\n(6e2a10e0)   cpplib!CPPLib::Functions::PrintText   |  (6e2a1180)   cpplib!std::basic_string<wchar_t,\nstd::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>\n,std::allocator<wchar_t> >\nExact matches:\n    cpplib!CPPLib::Functions::PrintText (class std::basic_string<char,std::char_traits<char>,std::al\nlocator<char> > *, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > *)\n\nOffStart:  000010e0\nProcSize:  0x9d\nPrologue:  0x29\nParams:    0n1 (0x4 bytes) <------------------------\nLocals:    0n10 (0x28 bytes) \nNon-FPO\n0:000>\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Mar 6, 2017 at 18:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">Interesting. Do you have any idea why compiling  from command line is different from one in the VS? I mean which options in the VS can affect the result?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">not sure check vs commandline in your project versus this   cl /LD /W4 /Ox /Zi /analyze /EHsc cpplib.cpp /link /DEBUG /RELEASE %linklibs%   cl     /W4 /Ox /Zi /analyze /EHsc usedll.cpp /link /DEBUG /RELEASE %linklibs%  i #defined  CPPLIB_EXPORTS and UNICODE in cpplib.cpp   and used #pragma comment ( lib ,\"cpplib.lib\") for the linking the executable with the lib file</span>",
                    "time": null
                },
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">so far I realized that switching from debug to release mode solves my problem. Since it voidptr, it takes and displays only a first symbol of memory buffer. But this is much better, thank you.</span>",
                    "time": null
                },
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">sorry for bothering you again. But I have been trying different things (e.g.define string argument as <code>const std::string &amp;</code>) to be able to set it while debugging in OllyDbg with no success. You have said that  &gt; you may need to properly craft a std::string and point the address of the std::string  but even though I stepped manually though all the function, I haven't found a way to set the whole string to be displayed in message box.  BTW. Do you have any idea why OllyDbg shows two s:VOIDPTR arguments instead of one?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">edited the answer and added some info take a look</span>",
                    "time": null
                }
            ]
        }
    ]
}