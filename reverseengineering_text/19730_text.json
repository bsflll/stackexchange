{
    "title": "XCHG RAX, RAX: 0x03, what does this code do and how does it work?",
    "link": "https://reverseengineering.stackexchange.com/questions/19730/xchg-rax-rax-0x03-what-does-this-code-do-and-how-does-it-work",
    "content": "\"XCHG RAX, RAX\" is a kind of riddle book that provides assembly code for you to reverse and undercover the meaning. Some of the examples calculate the Fibonacci sequence others bit-twiddle to toggle ASCII case. The snippet (riddle) on <pre><code>0x03</code></pre> is,\n<pre><code>sub  rdx,rax\nsbb  rcx,rcx\nand  rcx,rdx\nadd  rax,rcx\n</code></pre>\nHow does this code work, and what does it do?\n",
    "votes": "0",
    "answers": 1,
    "views": "468",
    "tags": [
        "x86",
        "x86-64"
    ],
    "user": "Evan Carroll",
    "time": "Oct 26, 2018 at 18:34",
    "comments": [],
    "answers_data": [
        {
            "content": "This code boils down to,\n<pre><code>rax = min(rdx,rax)\nrdx = sub(rdx,rax) ; store the difference in rdx\n</code></pre>\nThat is essentially,\n\n<pre><code>rdx - 0</code></pre>         (if <pre><code>rdx</code></pre> is the min)\n<pre><code>rdx - (rdx-rax)</code></pre> (if <pre><code>rax</code></pre> is the min)\n\nThe <pre><code>sbb</code></pre> and <pre><code>and</code></pre> here just move into <pre><code>rcx</code></pre> either\n\n<pre><code>0</code></pre>\n<pre><code>rdx-rax</code></pre>\n\nWhat determines what gets moved into <pre><code>rcx</code></pre>? That's determined by the result of the <pre><code>sbb</code></pre>. The <pre><code>sbb</code></pre> is doing <pre><code>reg - reg - CF</code></pre>. So you're either <pre><code>AND</code></pre>ing against all <pre><code>1</code></pre>s or all <pre><code>0</code></pre>s.\nThis is how I reasoned about it\n<pre><code># CF=0; rdx > rax\nif ( rdx > rax ) {\n  rdx -= rax\n  rcx = 0     ; all bits off\n\n\n              ; AND 0 (rcx) with anything (in rdx) is nop here.\n              ; ADDing 0 (rcx) to rax is a nop\n}\n\n\n\n# CF=1; rax > rdx\nelse {\n  rdx -= rax\n  rcx = -1    ; all bits on\n\n\n  rcx = rdx   ; code is rcx &= rdx\n              ; remember -1 & x == x\n  rax += rcx\n\n}\n</code></pre>\nNote regardless of the carry flag, this code will store the difference in <pre><code>rdx</code></pre>\n",
            "votes": "1",
            "user": "Evan Carroll",
            "time": "Oct 26, 2018 at 1:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}