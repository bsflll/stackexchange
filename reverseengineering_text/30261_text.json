{
    "title": "Crackmes challenge not validating all answers",
    "link": "https://reverseengineering.stackexchange.com/questions/30261/crackmes-challenge-not-validating-all-answers",
    "content": "I am playing with this crackme. The executable takes a numerical input (e.g., 123) and adds all the numbers. The total must be 50. However, I noticed that not all inputs adding up to 50 are validated. For example: 5555555555 is validated, but 9191919191 is not.\nLines of interest: 20-28.\nI am probably missing something, but I cannot figure out what it may be. Any ideas?\n",
    "votes": "0",
    "answers": 1,
    "views": "116",
    "tags": [
        "assembly",
        "c",
        "ghidra",
        "crackme"
    ],
    "user": "Ronald Rivera",
    "time": "Apr 14, 2022 at 6:25",
    "comments": [],
    "answers_data": [
        {
            "content": "Its a problem with the binary - maybe intended. The <pre><code>sum</code></pre> variable is next to the char that is passed to <pre><code>atoi</code></pre> via a reference\n<pre><code>int atoi(const char *nptr);\n</code></pre>\n<pre><code>atoi</code></pre> expects a null terminated string while here in this case it gets pointer to a char that has an integer next to it - which might not have <pre><code>\\0</code></pre> in your case and it would lead to problems.\nfor 5555555555 the argument to atoi in order would be - shown as qword here for clarity\n<pre><code>0x0000000000000035 - \"5\\x00\"\n0x0000000000000535 - \"5\\x05\\x00\"\n0x0000000000000a35 - \"5\n\\x00\"\n0x0000000000000f35 - \"5\\x0f\\x00\"\n0x0000000000001435 - \"5\\x14\\x00\"\n0x0000000000001935 - \"5\\x19\\x00\"\n0x0000000000001e35 - \"5\\x1e\\x00\"\n0x0000000000002335 - \"5#\\x00\"\n0x0000000000002835 - \"5(\\x00\"\n0x0000000000002d35 - \"5-\\x00\"\n</code></pre>\nNow these cases are handled well by <pre><code>atoi</code></pre> but in case of 9191919191\n<pre><code>0x0000000000000039 - \"9\\x00\\x00\"\n0x0000000000000931 - \"1\\t\\x00\"\n0x0000000000000a39 - \"9\n\\x00\"\n0x0000000000001331 - \"1\\x13\\x00\"\n0x0000000000001439 - \"9\\x14\\x00\"\n0x0000000000001d31 - \"1\\x1d\\x00\"\n0x0000000000001e39 - \"9\\x1e\\x00\"\n0x0000000000002731 - \"1\"\\x00\"\n0x0000000000002839 - \"9(\\x00\"\n0x0000000000003131 - \"11\\x00\"\n</code></pre>\nAs you can see the last arg here is \"11\" which would mean 11 is added to <pre><code>sum</code></pre> hereby taking it to 60 instead of 50.\nThis can be verified\n<pre><code>$ gdb -q ./license_checker_3\nReading symbols from ./license_checker_3...(no debugging symbols found)...done.\n(gdb) b * main+0xa0\nBreakpoint 1 at 0x1219\n(gdb) r 9191919191\nStarting program: /mnt/c/Users/sverma/Desktop/tmp/license_checker_3 9191919191\n\nBreakpoint 1, 0x0000555555555219 in main ()\n(gdb) x/xi $rip\n=> 0x555555555219 <main+160>:   cmpl   $0x32,-0x10(%rbp)\n(gdb) x/dw $rbp-0x10\n0x7fffffffe0b0: 60\n</code></pre>\n",
            "votes": "1",
            "user": "sudhackar",
            "time": "Apr 14, 2022 at 8:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}