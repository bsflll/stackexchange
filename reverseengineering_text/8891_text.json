{
    "title": "Workflow patching Java jar file",
    "link": "https://reverseengineering.stackexchange.com/questions/8891/workflow-patching-java-jar-file",
    "content": "Normally I'm working with firmwares and native code executables, patching small things like constants, jump conditions etc. There I'm using IDA's disassembly to analyse what and where to patch.\nWith Java bytecode I would tend to use the decompiled code from a tool like jd-gui for analysing what to patch. But for actually changing anything I would need a connection between the decompiled code and the bytecode.\nIs there a tool that can show this\n",
    "votes": "5",
    "answers": 2,
    "views": "10k",
    "tags": [
        "disassembly",
        "decompilation",
        "java",
        "patching"
    ],
    "user": "user2011659",
    "time": "May 14, 2015 at 7:36",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "I might not understand what you are asking, but isn't JBE or Krakatau is what you are looking for? Also this and this.\n",
            "time": null
        },
        {
            "user": "user2011659",
            "text": "@DominikAntal The last link you gave me explains what I wanted to know.Make this an answer to get your point.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Use JD-GUI to examine the jar file\nUnpack the jar file\n\n<pre><code>jar -xf yourapp.jar</code></pre> \n\nModify the .class file with a Java Bytecode Editor\n\nUse Java Bytecode Editor (JBE) \n\nRepack the modified classes into new archive file\n\n<pre><code>jar -cvf yourapp_patched.jar *.*</code></pre>\n\n\nCredits for this particular solution to Khai Tran @ NetSPI\n",
            "votes": "5",
            "user": "Dominik Antal",
            "time": "May 19, 2015 at 16:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "JSmyth",
                    "text": "<span class=\"comment-copy\">Any Linux alternative to JBE?</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\"><a href=\"http://reverseengineering.stackexchange.com/a/5943/2354\">Not sure, check out these tools.</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "For patching, you're usually better off changing things at the bytecode level, since decompilation and compilation are both lossy operations, whereas bytecode patching will always work, even for heavily obfuscated applications. There are a number of tools you can use for this.\nAs for understanding the connection between source code and bytecode, that's just a matter of practice. I'd recommend starting by reading the JVM specification. Then compile some simple Java examples and take a look at the resulting bytecode. Luckily, Java RE is a lot easier than native code, so you have experience with that, it shouldn't be too hard to learn.\n",
            "votes": "3",
            "user": "Antimony",
            "time": "May 14, 2015 at 14:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}