{
    "title": "On reverse engineering an udp protocol to control a drone",
    "link": "https://reverseengineering.stackexchange.com/questions/27476/on-reverse-engineering-an-udp-protocol-to-control-a-drone",
    "content": "My goal is to control my drone with my raspberry pi using python and not the app that is being delivered together with it.\n\nFirst I connected the app to the drone, flew and used aircrack-ng to get the pcap.\n\nI looked at it in wireshark and could not make sense of it.\n\nI presume it to be unencrypted UDP though.\n\nSo I decompiled the java apk with APK Studio and looked at the source code.\n\nI looked for a random button in an xml to find the corresponding method in a java file.\n\nIt did not exist.\n\n\nThere are some small files.\nWhich approach do you suggest for reverse engineering?\n",
    "votes": "4",
    "answers": 2,
    "views": "666",
    "tags": [
        "python",
        "disassemblers",
        "apk",
        "protocol",
        "wireshark"
    ],
    "user": "Pascal Widmann",
    "time": "Feb 22, 2023 at 6:13",
    "comments": [
        {
            "user": "Robert",
            "text": "For decompiling the Android app I would use Jadx. Try to identify where the UDP packets  are sent and then trace back the calls where the packets are generated. As you have a running set-up you may use Frida on certain methods you have identified via Jadx and hook them to see what parameters they are called with at run-time.\n",
            "time": null
        },
        {
            "user": "Pascal Widmann",
            "text": "Feel free to try it with the A20 app: m.apkpure.com/de/potensic/com.udirc.Potensic Using APK Studio, which is a gui for jadx, I wasn't able to extract the methods that referred to the buttons. If you are more successful, I'd appreciate the steps you took, not necessarily the result. PS: Is Frida a stacktracer, ie it points out the command route?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you use an android app, you may use network debuggers such as\nhttps://play.google.com/store/apps/details?id=app.greyshirts.sslcapture\nthis also supports UDP\nThis might be easier to use/retrieve your data.\nI used this myself to gain independent access to my Iot devices.\nBe aware:\nSome apps have their own client certificates pinned in their apps for authorization purposes.\nSo this method might not work.\nYou'd need to find a way to extract the client certificate and use it to get the traffic data.\n",
            "votes": "1",
            "user": "Ben",
            "time": "Jan 26, 2022 at 16:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If it's a drone, it's probably MAVLink. Check that first. https://mavlink.io/en/guide/serialization.html\n",
            "votes": "0",
            "user": "pythonpython",
            "time": "Apr 25, 2021 at 3:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}