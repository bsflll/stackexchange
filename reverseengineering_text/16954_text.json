{
    "title": "What is an efficient way to scan for a given import function across modules in IDAPython?",
    "link": "https://reverseengineering.stackexchange.com/questions/16954/what-is-an-efficient-way-to-scan-for-a-given-import-function-across-modules-in-i",
    "content": "I am writing a script which should first place a breakpoint on start, _start, _main, or main and then start the IDA Pro debugger. It then should enumerate the modules looking for \"kernel32.dll\" and finally, scan the kernel32.dll starting from the module base address to the size address, checking each line for the function name \"ExitProcess\" and if found, place a breakpoint on it. Finally, it should run to this breakpoint.\nThe script is not working; it freezes up IDA Pro completely after iteration 4818 and after doing some math with the base and size, I noticed that the actual size of the module is also off as seen in this screenshot:\n\nAccording to the size, 74BF0000 + D0000 = 74CC0000 but as we can see, kernel32.dll does not map that far. While this is one issue, I also do not understand why IDA Pro freezes up and crashes after iterating around 4791 addresses in past the base which would bring us to 74BF12D2. Here's my script:\n<pre><code>import time\nNULL = 0\n# possible refactor to just take the module object so base and size dont need to be passed in like this?\ndef get_names(base, size, desired_name):\n    print \"inside get_names\"\n    print (\"Base: %d Size: %d Desired Name: %s\" % (base, size, desired_name))\n    global NULL\n    current_address = base\n    i = 0\n    while current_address <= base+size:\n        print \"Made it into current_address loop \"\n        i += 1\n        print (\"interation #: %d\" % (i))\n        # print hex(current_address) TODO: REMOVE\n        if desired_name in Name(current_address):\n            print \"found %s\" % (desired_name)\n            return current_address\n        time.sleep(0.02)\n        current_address = NextHead(current_address)\n    print \"exiting get_names\"\n    return NULL\n\n# Enumerate modules\ndef find_import_routine(the_module, desired_name):\n    print \"inside find_import routine\"\n    for m in Modules():\n        if the_module.lower() in m.name.lower():\n            base = m.base\n            size = m.size\n            analyze_area(base, base+size)\n            begin_text = get_names(base, size, desired_name)\n            if begin_text: #check for null\n                add_bpt(begin_text,0,BPT_SOFT)\n                enable_bpt(begin_text,True)\n                continue_process()\n                GetDebuggerEvent(WFNE_SUSP,-1)\n                #del_bpt(initial_bp_ea)\n                return True #return the bp addr??\n    print \"exiting find_import routine\"\n    return False\ndef find_start():\n    print \"inside find_start routine\"\n    global NULL\n    functions = idautils.Functions()\n    for f in functions:\n        name = get_func_name(f)\n        if name == 'start' or name == '_start' or name =='main' or name == '_main':\n            return f\n    print \"exiting find)start\"\n    return NULL\n\ndef main():\n    start_addr = find_start()\n    if start_addr:\n        idc.add_bpt(start_addr)\n        StartDebugger(\"\",\"\",\"\");\n        print \"after StartDebugger()\"\n        GetDebuggerEvent(WFNE_SUSP, -1)\n        print \"after GetDebuggerEvent\"\n        find_import_routine('kernel32.dll','ExitProcess')\n        print \"After find_import_routine\"\n    else:\n        print \"Could not find a start routine. Exiting.\" \nif __name__ == \"__main__\":\n    main()\n</code></pre>\nPlease note that the sleep and print is only for debugging purposes.\n",
    "votes": "1",
    "answers": 1,
    "views": "487",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "the_endian",
    "time": "Dec 11, 2017 at 10:17",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "Are you putting breakpoints in the .idata segment? That always caused (back in the day) that same behaviour.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Those debug API never well worked for me either, even when I've used them in c++ plugin. Seems like you have to do a lot of Wait() in order to make the engine to process the events.\n",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Dec 12, 2017 at 10:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Do you know the difference between <code>Wait()</code> and <code>GetDebuggerEvent()</code>??</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">Yes I know, I spent a week trying to make it work several years ago and got into reversing IDA to understand where it hangs, and my finding was that there's some conflict between the debugger events and disassembly engine events so it hangs. Good luck finding the real reason.</span>",
                    "time": null
                }
            ]
        }
    ]
}