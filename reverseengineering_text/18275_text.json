{
    "title": "Meaning of code used to find kernel32.dll in shellcode",
    "link": "https://reverseengineering.stackexchange.com/questions/18275/meaning-of-code-used-to-find-kernel32-dll-in-shellcode",
    "content": "I'm attempting to reverse some shellcode created by metasploit to increase my understanding of shellcode. I understand the overall point of the code is attempting to locate kernel32.dll in the list of loaded modules. \n<pre><code>seg000:00000006 60                                      pusha\nseg000:00000007 89 E5                                   mov     ebp, esp\nseg000:00000009 31 D2                                   xor     edx, edx\nseg000:0000000B 64 8B 52 30                             mov     edx, fs:[edx+30h] ; Accessing PEB\nseg000:0000000F 8B 52 0C                                mov     edx, [edx+0Ch]  ; Access 0x0C PEB offset which is _PEB_LDR_DATA\nseg000:00000012 8B 52 14                                mov     edx, [edx+14h]  ; Accesses _PEB_LDR_DATA->InMemoryOrderModuleList\nseg000:00000015\nseg000:00000015                         loc_15:                                 ; CODE XREF: sub_6+87j\nseg000:00000015 8B 72 28                                mov     esi, [edx+28h]\nseg000:00000018 0F B7 4A 26                             movzx   ecx, word ptr [edx+26h]\nseg000:0000001C 31 FF                                   xor     edi, edi\n</code></pre>\nI'm having some trouble understanding the instructions below. I understand that edx will point to _PEB_LDR_DATA->InMemoryOrderModuleList but why reference edx+28h and then a word of edx+26h? esi and ecx are overwritten in subsequent assembly instructions so I'm not sure what the point is of populating them here.\n<pre><code>seg000:00000015 8B 72 28                                mov     esi, [edx+28h]\nseg000:00000018 0F B7 4A 26                             movzx   ecx, word ptr [edx+26h]\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "575",
    "tags": [
        "x86",
        "shellcode"
    ],
    "user": "Chuck",
    "time": "May 15, 2018 at 18:14",
    "comments": [],
    "answers_data": [
        {
            "content": "In WinDbg:\n<pre><code>0:000> dt ntdll!_TEB -y ProcessEnvironmentBlock->Ldr->InM\n   +0x030 ProcessEnvironmentBlock           : \n      +0x00c Ldr                               : \n         +0x014 InMemoryOrderModuleList           : _LIST_ENTRY\n</code></pre>\nthe list entry->Flink is a pointer to _LDR_DATA_TABLE_ENTRY-> InMemoryOrderLinks\nso if you take the Flink subtract -8 and display the structure  you can see it is accessing BaseDllName->Buffer (unicode string buffer ) and it MaxCount \nprobably uses it for parsing copying a counted widechar \n<pre><code>0:000> ?? (ntdll!_ldr_data_table_entry *) @@masm(@@c++(@$teb->ProcessEnvironmentBlock->Ldr->InMemoryOrderModuleList.Flink)-8)\nstruct _LDR_DATA_TABLE_ENTRY * 0x002421b0\n   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x242240 - 0x771c788c ]\n   +0x008 InMemoryOrderLinks : _LIST_ENTRY [ 0x242248 - 0x771c7894 ]\n   +0x010 InInitializationOrderLinks : _LIST_ENTRY [ 0x0 - 0x0 ]\n   +0x018 DllBase          : 0x00ef0000 Void\n   +0x01c EntryPoint       : 0x00f02d6c Void\n   +0x020 SizeOfImage      : 0xc0000\n   +0x024 FullDllName      : _UNICODE_STRING \"C:\\Windows\\system32\\calc.exe\"\n   +0x02c BaseDllName      : _UNICODE_STRING \"calc.exe\"\n   +0x034 Flags            : 0x4000\n   +0x038 LoadCount        : 0xffff\n   +0x03a TlsIndex         : 0\n   +0x03c HashLinks        : _LIST_ENTRY [ 0x243604 - 0x771ca6a8 ]\n   +0x03c SectionPointer   : 0x00243604 Void\n   +0x040 CheckSum         : 0x771ca6a8\n   +0x044 TimeDateStamp    : 0x4ce7979d\n   +0x044 LoadedImports    : 0x4ce7979d Void\n   +0x048 EntryPointActivationContext : (null) \n   +0x04c PatchInformation : (null) \n   +0x050 ForwarderLinks   : _LIST_ENTRY [ 0x242200 - 0x242200 ]\n   +0x058 ServiceTagLinks  : _LIST_ENTRY [ 0x242208 - 0x242208 ]\n   +0x060 StaticLinks      : _LIST_ENTRY [ 0x2454c8 - 0x243d40 ]\n   +0x068 ContextInformation : 0x77160594 Void\n   +0x06c OriginalBase     : 0\n   +0x070 LoadTime         : _LARGE_INTEGER 0x0\n0:000> dx -r1 (*((ntdll!_UNICODE_STRING *)0x2421d4))\n(*((ntdll!_UNICODE_STRING *)0x2421d4))                 : \"C:\\Windows\\system32\\calc.exe\" [Type: _UNICODE_STRING]\n    [<Raw View>]     [Type: _UNICODE_STRING]\n0:000> dx -r1 -n (*((ntdll!_UNICODE_STRING *)0x2421d4))\n(*((ntdll!_UNICODE_STRING *)0x2421d4))                 : \"C:\\Windows\\system32\\calc.exe\" [Type: _UNICODE_STRING]\n    [+0x000] Length           : 0x38 [Type: unsigned short]\n    [+0x002] MaximumLength    : 0x3a [Type: unsigned short]\n    [+0x004] Buffer           : 0x242052 : 0x43 [Type: unsigned short *]\n</code></pre>\n",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jun 15, 2018 at 7:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}