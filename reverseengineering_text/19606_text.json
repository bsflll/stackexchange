{
    "title": "Understanding branch delay slots for reversing MIPS",
    "link": "https://reverseengineering.stackexchange.com/questions/19606/understanding-branch-delay-slots-for-reversing-mips",
    "content": "I am statically reversing some software compiled for an Atheros AR7161 using radare2. This processor implements MIPS, and I do recall that MIPS has a branch delay slot. This is indeed noticeable in the disassembly because I can see instructions that should logically execute before branches being placed right after them.\nHowever, while analyzing some piece of code, I came across a beqz instruction for which assuming that the instruction after it should execute first does not make sense in the context of the program. I must admit that my analysis could be wrong, which is not unlikely; however, I have some doubts that I'd also like to clear:\n\nDo all branch/jump instructions always use the branch delay slot such that the instruction right after should logically execute first? If not, in which cases would it not?\nIs there some way to make radare2 show the logical execution order rather than the one encoded in the binary?\n\nEdit: concretely, I am dealing with the following sequence:\n<pre><code>beqz v0, <some address>\nlb v0, 0x40(sp)\n</code></pre>\nI have a very diffuse picture in my head about these instruction going into the pipeline. I can picture the second instruction being fetched while the first one is being decoded; hence, execution of the branch delay slot should actually start. However, the branch instruction depends on the same register being modified by the instruction in the branch delay slot, so what will happen? Will the branch instruction evaluate the condition using the old register value, or the new one updated by lb?\nThanks\n",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "radare2",
        "mips"
    ],
    "user": "user25972",
    "time": "Oct 12, 2018 at 18:37",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "You might benefit from reading the MIPS series by Raymond Chen here: link The first answer is no (and see the link for details).  I can't answer the second.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The instruction in the branch delay slot is evaluated after the branch (or jump) instruction. The execution of the instruction in the branch delay slot does not impact the evaluation of the branch condition.\nI have observed the branch delay slot be used for a few things:\n\nLast instruction of basic block leading up to the branch instruction\n\n\nBranch test will not be dependent on the output of the calculation of the branch delay slot instruction\nCommonly seen with unconditional jumps/branches like <pre><code>b</code></pre>, <pre><code>jal</code></pre>\n\nThe first instruction of the the fall through block. \n\n\nNo side effects should be present if the branch is taken.\nAnalysis will show that any registers impacted is not needed in the event the branch is taken\n\nThe first instruction of block if the branch is taken\n\n\nIf there are multiple paths to the branch target, this instruction will likely be seen multiple times with the different branches\n\nThe load of a conditional value, often for return values\n\nThis article goes into detail about branch delay slots.\nAs noted by Igor, the \"likely\" version of the branch instruction keeps the effects of the instruction in the branch delay slot only if the instruction is actually taken.\n",
            "votes": "7",
            "user": "ChrisG",
            "time": "Oct 15, 2018 at 13:35",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "There are variations of conditional branches called \"branch  [ on condition] likely\", e.g.\n\n\n<pre><code>bgezl</code></pre> - Branch on Greater Than or Equal to Zero Likely\n<pre><code>beql</code></pre> - Branch on Equal Likely\n\n\nThese instructions have a delay slot but the instruction in the delay slot is executed only if the branch is taken.  If the branch is not taken, the instruction in the delay slot is not executed (nullified).\nNB: these instructions have been removed in the Release 6 of MIPS Architecture.\nIt also added compact variations of branches which do not have delay slots\nAs for your snippet, I strongly suspect that the branch uses the old register value, but you can probably confirm it only by running it on an actual processor.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Oct 12, 2018 at 21:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}