{
    "title": "Can't get Visual C++ to generate the same code give by Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/30399/cant-get-visual-c-to-generate-the-same-code-give-by-ghidra",
    "content": "I'm using visual c++ to create a mock dll that I'm trying to reverse using Ghidra and I'm doing good progress so far, however I'm stuck in a function that ghidra gives me the following:\n<pre><code>                         **************************************************************\n                         *                          FUNCTION                          *\n                         **************************************************************\n                         undefined __register FUN_00417344(undefined param_1, undefined \n         undefined         AL:1           <RETURN>\n         undefined         AL:1           param_1\n         undefined         DL:1           param_2\n         undefined         CL:1           param_3\n         undefined4        Stack[0x4]:4   param_4                                 \n</code></pre>\nI can't get visual c++ to compile the same thing, everything I try gives me:\n<pre><code>                     **************************************************************\n                     *                          FUNCTION                          *\n                     **************************************************************\n                     char __cdecl FUN_00417344(int * param_1, int * param_2, int * p\n     char              AL:1           <RETURN>\n     int *             Stack[0x4]:4   param_1                                 \n     int *             Stack[0x8]:4   param_2\n     int *             Stack[0xc]:4   param_3\n     int *             Stack[0x10]:4  param_4\n</code></pre>\nthe function above is the result of:\n<pre><code>__declspec(dllexport) char FUN_00417344(int* a, int* b, int* c, int* d)\n{\n    ...\n}\n</code></pre>\nHow can I get VS to generate the parameters as AL, DL, CL etc...?\n",
    "votes": "0",
    "answers": 0,
    "views": "184",
    "tags": [
        "c++",
        "ghidra",
        "register"
    ],
    "user": "user3900456",
    "time": "May 13, 2022 at 15:50",
    "comments": [
        {
            "user": "ripmalware",
            "text": "You'll probably want to look into calling conventions. I don't think cdecl uses registers at all.\n",
            "time": null
        },
        {
            "user": "mindoverflow",
            "text": "IIRC the only calling conventions to use registers are <pre><code>__fastcall</code></pre> and <pre><code>__thiscall</code></pre>, using ECX/EDX and ECX respectively. If your DLL isn't 32 bit, a different calling convention may be used. If the DLL is old, it might have been written in assembly, in which case some manual fiddling may be required\n",
            "time": null
        },
        {
            "user": "mindoverflow",
            "text": "On a different note, AL/DL/CL are all 1 byte values (which ghidra usually labels as <pre><code>undefined</code></pre>). Pointers (in a 32 bit DLL) are 4 bytes wide and are therefore labelled as <pre><code>undefined4</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": []
}