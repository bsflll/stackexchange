{
    "title": "Change a text in DOS executables [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6776/change-a-text-in-dos-executables",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nWe have a DOS executable program like to NC. How do we find and change a text or a ASCII art in it?\nI'm a newbie in reverse.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dos"
    ],
    "user": "ali",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Hexdump it, disassemble it, find the text, change it. Your question is way too unspecific to be answered well.\n",
            "time": null
        },
        {
            "user": "ali",
            "text": "Which tool can help me? IDA Pro DOSBox Plugin? This Answer?\n",
            "time": null
        },
        {
            "user": "Spektre",
            "text": "@ali. some compilers have decompilers I saw borland TP7/TCPP versions that make the source code in Pascall/C++ but only for programs compiled by them of coarse. also forget about variable/function names they where auto-generated. for asm I thing NASM has also some disassembler in the full package but I could be wrong haven't use it in a looooong time\n",
            "time": null
        },
        {
            "user": "ali",
            "text": "Thank you @Spektre :)\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Note that it's ok to ask about a specific system, as long as it's a 'i came this far, i'm stuck now' kind of question. The problem i have with this post is the unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem part. The question could mean anything from \"are there any tools that will let me modify dos executables\" to \"how do i find a text string in an executable if my hex editor doesn't find it\" to \"how do i handle packed DOS executable\". This makes it hard to know what the OP expects and what kind of answer would actually help him.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Tools\nAny hex editor will do. Under DOS both NC and VC have their own which are enough. Very good DOS tool is HIEW (hex editor + x86 dissasembler).\nwhat to do\n\ndetermine the executable form\nopen it as text/hex and if no program string are present then they are in different file or the file is packed/encrypted. Some executables are packet by PKLITE tools so unpack them. If file is encrypted you have to try to decrypt it first.\nfind the text you want to change\nedit the text\nThe string size must stay the same !!! If program uses any kind of CRC then you have to override the call by <pre><code>nop/jump</code></pre> or change the comparison values to the new CRC\nthat should be all but\nIf the program uses those texts in specific ways then some thing can be broken like search for specific character/pattern in string to do some crazy effect etc. So if the edit is bugged return to original executable and try to edit string one by one ... to detect which strings will broke the exe. After that just leave those as are and edit the rest to what you need\nif all fails\nThen write TSR launcher for your program (terminate and stay program) that will change the text screens for you. In DOS there are no access violations so you can do anything...\nFor example:\n\ndetect the actual screen the program is presenting\nText mode VideoRAM is at <pre><code>B800:0000h</code></pre>  if my memory serves well Each character is represented by <pre><code>2</code></pre> BYTEs (one is ASCII and one is color attributes). Standard text-mode used in DOS is <pre><code>80x25</code></pre> characters so read the specific positions of screen and detect strings that match each page of program.\nif page detected\nThen rewrite it by your new page (can flicker a bit)\ncontinue this scanning in some timer ... (PIT interrupt or keyboard interrupt)\nyou can combine this with keyboard keystrokes detection\nThis way you know if you hit F1 then page F1 will occur etc. This can be used for hard to detect pages (have no title).\n\n\nWindows\nYou could write window App that will present the DOS program. Just you need to pass mouse movement and keyboard events to the DOS program (which can be run as hidden process) and present the (invisible) DOS screen in your Window. In Windows use DLPORTIO driver or any other way to get Kernel mode access rights so you can actually read / access the DOS VRAM or access the commandline or DOSbox backbuffer by WinAPI in gfx. Decode it back to text (the font is usually fixed so that should be easy enough) and recode it to your new texts and present back in your window App.\n[Notes]\nGraphical DOS program means it uses graphic video mode instead of Text mode. NC is example of Text mode program not graphical !!! Some Text mode based Apps use different text modes so you should detect actual text mode resolution. I think some call to EGA/VGA BIOS <pre><code>int 13h</code></pre> should do the trick or you can hook up the entire interrupt for this. If you got aligned lines and table borders then that can be also used for resolution detection. You should do this once in a while because resolution can change during operation for example try ALT+F9 in VC.\n",
            "votes": "6",
            "user": "Spektre",
            "time": "Jan 9, 2016 at 9:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}