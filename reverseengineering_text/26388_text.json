{
    "title": "Why does decompiling a C++ using Snowman yield some full variable names and some obfuscated ones?",
    "link": "https://reverseengineering.stackexchange.com/questions/26388/why-does-decompiling-a-c-using-snowman-yield-some-full-variable-names-and-some",
    "content": "I decompiled a C++ exe file using Snowman, hoping to see if it was malware or not (Although, honestly, I have no clue how to continue that - The file is really large, and the decompilation mostly gibberish)\nIt resulted in a pretty big chunk of code, most of which obviously had no proper variables names attributed to it anymore; Instead, variables and functions were either named like the assembly registers they belong to, or by some hex name, or by some number/char combination that did not particularly look like hex.\nHowever, part of the code somehow still had proper names, although they all seemed to be system functions: DrawRect, RegCreateKeyExA, DefWindowProcA, SHBrowseForFolderA, and so on - plenty of calls that seem to interact with the system.\nDoes that mean that the decompilation preserved Windows system calls, but not the names of functions/variables created by the developer of the file?\nIf so, what should I do next to be able to see whether the file could have malicious intent or not?\nIt might also be noteworthy to say that the file I'm looking at is a Nullsoft Installer - So technically, a lot of the decompiled code is just overhead, when I actually want to look at what it installs and not the installer itself.\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "decompilation",
        "c++",
        "malware"
    ],
    "user": "Fly",
    "time": "Nov 28, 2020 at 13:59",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "That's correct. A compiler (or better the overall toolchain, including the linker) will get rid of the \"internal\" names eventually. Sometimes they will be available inside debug symbols, but those hardly ever come embedded in PE files these days.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In general, the compilation process removes most of the information not necessary for actual execution. This usually includes:\n\ncomments\nlocal and global variable names\nlocal (to the program) function names\nany code deemed dead (not being executed in any situation)\ncode exhibiting undefined behavior\n\nThe names you are observing are Windows API names; because they are referred by the name, this information has to be kept for the binary to run successfully. All other names are usually removed.\nNote: the API names can also be imported by a numerical ordinal in which case the name can be removed ; however this is not common on Win32 since ordinal numbers tend to change from version to version (it was common name on  Win16).\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 29, 2020 at 23:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}