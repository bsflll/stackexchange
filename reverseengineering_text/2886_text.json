{
    "title": "IDA Plugin writing generic questions",
    "link": "https://reverseengineering.stackexchange.com/questions/2886/ida-plugin-writing-generic-questions",
    "content": "I am trying to write a plugin for IDA PRO, mainly because I want to use the nifty graphing feature on a custom intermediate language. After the first look at the IDA plugin system, I am a little lost.\nBefore I dig deeper, I have some generic understanding questions, which put me at unease:\n\nDoes the SDK enforce a struct alignment? If not, how can I receive or supply pointers to structs compatible across compilers?\nWhy do plugins export a data <pre><code>strcut</code></pre> (PLUGIN), and not standard exported functions? What is the advantage? Again, I would fear for alignment issues across compilers.\nEven more surprising, at least the HexRays part of the sdk seems to offer class ABI compatibility, meaning I can derive from a supplied class definition and use the result with the SDK (virtual functions and all)! How does that work?\nAdditionally, the SDK can return pointers to classes that I am supposed to destroy with the \"delete\" keyword. Isnt that bound to end in trouble?\n\nAll that makes me a little nervous. Does anyone know how this is done?\n",
    "votes": "8",
    "answers": 1,
    "views": "468",
    "tags": [
        "ida",
        "ida-plugin"
    ],
    "user": "bernd feinman",
    "time": "Oct 6, 2013 at 5:16",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "Just in case you haven't seen this tutorial - binarypool.com/idapluginwriting\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "1. Does the SDK enforce a struct alignment? If not, how can I receive or supply pointers to structs compatible across compilers?\n\nIDA SDK headers do specify their alignment. It is split between 1-byte and 4-bytes.\nThere are also interesting comments like this:\n<pre><code>/*\n *      Due to the use of STL and virtual functions, some parts of this\n *      interface might be incompatible with compilers other than BCB v6.0 \n */\n</code></pre>\nBut given the age of Borland C++ Builder 6, I am not sure they are still relevant.\n\n2. Why do plugins export a data struct (PLUGIN), and not standard exported functions? What is the advantage? Again, I would fear for alignment issues across compilers.\n\n<pre><code>plugin_t</code></pre> uses 1-byte alignment. As long as you follow that, there should not be any alignment problems. I guess the struct is used just for convenience, as then the loader only needs to find and keep track of only one exported symbol instead of several.\n\n3. Even more surprising, at least the HexRays part of the sdk seems to offer class ABI compatibility, meaning I can derive from a supplied class definition and use the result with the SDK (virtual functions and all)! How does that work?\n\nHexRays lets you inspect/modify the decompiled source tree representation, and uses the visitor pattern to do it.\nIt's much easier to pass one pointer to a class holding multiple pointers than it is to pass a ton of separate callback pointers for different operations. Also, a class lets you capture/track local state, doing that with separate callback pointers would require extra work with functors.\n\n4. Additionally, the SDK can return pointers to classes that I am supposed to destroy with the \"delete\" keyword. Isnt that bound to end in trouble?\n\nWhat are you worried about? The fact that you're freeing memory allocated by another module, or the fact that you are responsible for the object's lifetime? \nThe former should not be an issue, <pre><code>pro.h</code></pre> contains a <pre><code>DEFINE_MEMORY_ALLOCATION_FUNCS</code></pre> macro that overrides memory management for each such class so deleting it will go through IDA's memory management routines.\nThe latter is just something you have to live with.\n",
            "votes": "5",
            "user": "DCoder",
            "time": "Oct 6, 2013 at 7:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}