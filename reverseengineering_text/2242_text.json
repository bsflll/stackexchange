{
    "title": "Tracking What Is Done With a Function's Return Value",
    "link": "https://reverseengineering.stackexchange.com/questions/2242/tracking-what-is-done-with-a-functions-return-value",
    "content": "I wrote a simple IDA plugin that, after a function call, looks for <pre><code>mov MEM_LOCATION eax</code></pre> and adds a name for the memory where the return value is stored. I limit my search to only a few instructions after the function call and bail out if I see another call before the return value is stored. Is there a more rigorous way to track where the return value goes besides these heuristics?\n",
    "votes": "8",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "user2142",
    "time": "Jun 12, 2013 at 17:12",
    "comments": [],
    "answers_data": [
        {
            "content": "In the static context, this is known as \"data flow analysis\".  For example, Hex-Rays incorporates the return-location information for function calls into its representation of the function so as to determine into which other locations that data flows.  You don't give a lot of detail on what you want to do with this information, but off the top of my head I'd say it could be worthwhile to investigate writing a Hex-Rays plugin.\n",
            "votes": "8",
            "user": "Rolf Rolles",
            "time": "Jun 12, 2013 at 19:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2142",
                    "text": "<span class=\"comment-copy\">I implemented my IDA plugin in Python. What algorithms would I use to implement dataflow analysis on the contents of <code>EAX</code>? Do I need to write something custom or are there tools available? I am interested in the static context because I am trying to add useful names before I start reversing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "A more general name for that problem is Data Tainting. \nYou mark some data as tainted, and then follow the taint propagation in the rest of the code. \nThere is quite a lot of research going on about taint analysis, and there is quite a number of tools. Take a look at bitblaze (especially taint tracker edit: just figured it's no loner available and outdated...), it has a part for taint tracking. \nIf you'd need something more \"lightweight\" take a look at julio auto's and bsdaemon's  VDT which is more exploit-development oriented, but might give you an idea how things work. VDT actually does something very similar to what you do, but it does it in reverse. Given an execution trace, you can do a backward search from some value to see how it got initialized, where it was used, and what code it influenced.  \nFor more academic approach , check out \"All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution\".\nAll this is about dynamic analysis, tho some simpler stuff can be implemented statically. \nI can't think of any example/tool off the top of my head right now.\nI'm sure somebody will come up with more tools and ideas.\n",
            "votes": "9",
            "user": "0xea",
            "time": "Jun 12, 2013 at 18:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2142",
                    "text": "<span class=\"comment-copy\">This is a really great answer, thanks. I ended up accepting the answer on the static technique because that is the context in which I was having a problem.</span>",
                    "time": null
                }
            ]
        }
    ]
}