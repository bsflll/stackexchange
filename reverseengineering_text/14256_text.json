{
    "title": "IDA does not follow relative jump, executable patching",
    "link": "https://reverseengineering.stackexchange.com/questions/14256/ida-does-not-follow-relative-jump-executable-patching",
    "content": "I created small C program (x86) with this asm code inside main:\n<pre><code>__asm\n{\n    jmp label       // EB 02\n    nop             // 90\n    nop             // 90\n}\nlabel:\n</code></pre>\nLoaded it in IDA (in static mode, so it will use preferred base address), looked for address of <pre><code>jmp label</code></pre> and subtracted virtual address of code section (can be quickly seen in PE explorer). Then I found file offset in executable and patched it, so <pre><code>EB 02 90 90</code></pre> code sequence became relative unconditional jump <pre><code>66 E9 <16bit offset to program entry point></code></pre>.\nNote that I am not trying to do something, I just wanted to see how IDA will respond. IDA recognizes the address:\n<pre><code>jmp short start\n</code></pre>\nI put breakpoint on first instruction from entry point, once it got hit I resume. To my surprise IDA seems to loose track of instruction pointer (or jumps to different location) and some weird things happen.\nAt first I tried relative jump outside code section, IDA behaved the same way and I thought it might be something about checking boundaries of code section. But technically we can execute code outside of code section, all we need to do is just put code bytes in global array, manually mark section that contains initialized data as executable and use relative jumps.\nI read that IDA does not handle obfuscated binaries. Has it something to do with it? Can someone explain why IDA refuses to follow control flow in this case? Thanks.\n",
    "votes": "2",
    "answers": 0,
    "views": "375",
    "tags": [
        "ida",
        "patching"
    ],
    "user": "igntec",
    "time": "Dec 27, 2016 at 13:34",
    "comments": [],
    "answers_data": []
}