{
    "title": "​Why output is disabled in console when using int3?",
    "link": "https://reverseengineering.stackexchange.com/questions/30688/why-output-is-disabled-in-console-when-using-int3",
    "content": "​I am using NASM(2.15) assembler to generate code. But I am unable to figure out why it does not show output in the console(windows system) when using <pre><code>int3</code></pre> - software breakpoint, it only shows output in the debugger console while debugging.\ncode:\n<pre><code>global _main\nextern _printf\n\nsection .text\n_main:\n    int3             ; [*] Comment/Uncomment this to enable/disable output\n    push dword[esp+4]    \n    push fmt_d\n    call _printf\n    add esp, 8\n    xor eax, eax\n    ret\n\nsection .data\nfmt_d: db 'argc = %d', 10, 0\n</code></pre>\nHowever, when <pre><code>int3</code></pre> is disabled, we get output as usual in both the consoles(windows system, debugger console).\nWhat is special about the <pre><code>int3</code></pre> command that inhibits the printf's output capability?\nI assembled and linked both cases once <pre><code>int3</code></pre> enabled and then disabled into <pre><code>pf_disable.exe</code></pre>, <pre><code>pf_enable.exe</code></pre> using NASM & MinGW 4.8.2-<pre><code>gcc.exe</code></pre>.\nThen I matched the assembly output(<pre><code>.asm</code></pre>) generated by IDA for 2 cases, but there were only 3 differences,\n\nHash of files(CRC,MD5) are different.\nDifferent offset of <pre><code>fmt_d</code></pre> in the <pre><code>.data section</code></pre>, which is obvious as <pre><code>int3</code></pre> was introduced in one case and absent in another in <pre><code>_main</code></pre> function.\n\n<pre><code>.obj</code></pre> files for both the cases are almost same except, one has <pre><code>int3</code></pre> while other hasn't in <pre><code>_main</code></pre> function.\nWith above differences, I understand it has to do something more than just <pre><code>int3</code></pre> but I am unable to figure out.\n",
    "votes": "2",
    "answers": 0,
    "views": "71",
    "tags": [
        "assembly",
        "breakpoint",
        "exception",
        "nasm"
    ],
    "user": "Viktor",
    "time": "Jul 23, 2022 at 14:36",
    "comments": [
        {
            "user": "w s",
            "text": "Isn't  <pre><code>int3</code></pre> a breakpoint? If I understand this correctly it does not disable the output, it just suspends.\n",
            "time": null
        },
        {
            "user": "Viktor",
            "text": "@ws Indeed it is breakpoint a software breakpoint. But if we can get output in debugger console then why not in default console.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Uhm, so you have a debugger attached and a proper debugger loop consuming those breakpoints? Otherwise the <pre><code>int 3</code></pre> is merely going to end up ending your program, I reckon. Even if you placed the <pre><code>printf</code></pre> before the <pre><code>int 3</code></pre>, chances are that the output buffer doesn't get flushed before the breakpoint either.\n",
            "time": null
        }
    ],
    "answers_data": []
}