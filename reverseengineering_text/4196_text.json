{
    "title": "registers set by function",
    "link": "https://reverseengineering.stackexchange.com/questions/4196/registers-set-by-function",
    "content": "How can I figure out which general-purpose registers are modified by a function call. I am programming a Win32 Assembly program that calls IsDebuggerPresent(). According to MSDN, it will return a boolean value of nonzero is a debugger is present. How would I find out which register is modified without having to assemble and link the program to test it.\n",
    "votes": "4",
    "answers": 1,
    "views": "99",
    "tags": [
        "windows",
        "debugging",
        "anti-debugging"
    ],
    "user": "Penguin",
    "time": "Apr 29, 2014 at 0:58",
    "comments": [],
    "answers_data": [
        {
            "content": "In general, this concept is referred to as register preservation or register volatility.\nFrom http://en.wikipedia.org/wiki/X86_calling_conventions#Register_preservation --\n\nAccording to the Intel ABI to which the vast majority of compilers\n  conform, the <pre><code>EAX</code></pre>, <pre><code>EDX</code></pre>, and <pre><code>ECX</code></pre> are to be free for use within a\n  procedure or function, and need not be preserved.\n\nIn other words, an API function such as <pre><code>IsDebuggerPresent()</code></pre> might modify <pre><code>EAX</code></pre>, <pre><code>EDX</code></pre>, and/or <pre><code>ECX</code></pre>, but it won't modify <pre><code>EBX</code></pre>, <pre><code>ESP</code></pre>, or <pre><code>EBP</code></pre>.\n",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Apr 29, 2014 at 2:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}