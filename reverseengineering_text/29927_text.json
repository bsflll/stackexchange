{
    "title": "ARM/THUMB assembly mismatch between binaries causes crash",
    "link": "https://reverseengineering.stackexchange.com/questions/29927/arm-thumb-assembly-mismatch-between-binaries-causes-crash",
    "content": "I am trying to play around with an app for Android and every time I try to call a function (<pre><code>lua_gettop()</code></pre> from the Lua 5.1 library) from the app's address space, it hits me with ILL_ILLOPC.\nI made sure to rebase the address and the function is correct as I read the opcodes from the location to make sure I wasn't calling the wrong thing. I tried to call <pre><code>gettop()</code></pre> by using another function that is only designed to call that, and it worked, so I remade <pre><code>gettop()</code></pre> and built it with my current tools and put both libraries in IDA to compare the instructions.\nTo my surprise they were completely different (which makes me think that is why my trying to call that crashes, it doesn't recognise the instructions??)\nHere are the instructions\n<pre><code>.text:0172D8F8                 LDRD.W          R1, R0, [R0,#0xC]\n.text:0172D8FC                 SUBS            R0, R1, R0\n.text:0172D8FE                 ASRS            R0, R0, #4\n.text:0172D900                 BX              LR\n</code></pre>\nAnd my library's version of the function:\n<pre><code>.text:000BF614                 LDR             R1, [R0,#0xC]\n.text:000BF618                 LDR             R0, [R0,#0x10]\n.text:000BF61C                 SUB             R0, R1, R0\n.text:000BF620                 MOV             R0, R0,LSR#4\n.text:000BF624                 BX              LR\n</code></pre>\nI tried to find out how to make it compile to the same instruction set to no luck, I assume this to be the problem, but I'm ready to be corrected.\n",
    "votes": "1",
    "answers": 1,
    "views": "155",
    "tags": [
        "assembly",
        "android",
        "arm",
        "thumb2"
    ],
    "user": "BitFlow",
    "time": "Jan 27, 2022 at 14:45",
    "comments": [],
    "answers_data": [
        {
            "content": "The difference is that the first set of instructions are <pre><code>THUMB2</code></pre> instructions whereas your library's version is using <pre><code>ARM</code></pre> instructions.\n(The giveaway is in the instruction lengths - mostly 2 sometimes 4 for <pre><code>THUMB/THUMB2</code></pre> and always 4 for <pre><code>ARM</code></pre>.)\nYou will need to compile your library to use <pre><code>THUMB</code></pre> code (check your compiler documentation) or deal with the <pre><code>ARM/THUMB state</code></pre> interworking yourself.\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Feb 1, 2022 at 20:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}