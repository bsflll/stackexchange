{
    "title": "Detours not cleaning the stack correctly",
    "link": "https://reverseengineering.stackexchange.com/questions/24632/detours-not-cleaning-the-stack-correctly",
    "content": "I'm trying to hook a function using Detours for the first time. I'm new to reversing software and to hooking, so I may have missed something big here.\nI'm trying to use this function as a hook:\n<pre><code>typedef  int (__thiscall* func_type)(LPVOID*, LPVOID*, DWORD, BOOL);\nLPVOID hookaddr = 0;\n int __fastcall testhook(LPVOID* pThis, void* _EDX, LPVOID* object, DWORD hp, BOOL self)\n{\n    std::cout << \"Hooked\"  << std::endl;\n\n    func_type originalFunc = (func_type)hookaddr;\n\n    return originalFunc(pThis, object, hp, self);\n}\n</code></pre>\nThe problem lies in the fact that the hooked function seems to follow <pre><code>__thiscall</code></pre> convention and Detours doesn't seem to be allowing this? I tried mixing <pre><code>__thiscall</code></pre> and <pre><code>__stdcall/__fastcall</code></pre> conventions in my injected dll, but couldn't get anything working. I either end up with a wrong <pre><code>ecx</code></pre> value or a crash due to an invalid <pre><code>esp</code></pre>.\nAny idea what I could try here?\n",
    "votes": "1",
    "answers": 1,
    "views": "389",
    "tags": [
        "function-hooking",
        "calling-conventions"
    ],
    "user": "Stud",
    "time": "Apr 6, 2020 at 17:31",
    "comments": [],
    "answers_data": [
        {
            "content": "I have found the solution to this problem, which is quite simple. I got confused with the hooked function signature and the <pre><code>__fastcall</code></pre> trick to get a non member function to work with the <pre><code>__thiscall</code></pre> convention. In my initial post, the two first arguments in the function signatures are the one passed using <pre><code>ecx</code></pre> and <pre><code>edx</code></pre>, but I forgot about one of the pointer passed using the stack. The correct function definition is the following:\n<pre><code> int __fastcall testhook(LPVOID* pThis, void* _EDX, LPVOID* object, LPVOID* object2, DWORD hp, BOOL self)\n{\n    std::cout << \"Hooked\"  << std::endl;\n\n    func_type originalFunc = (func_type)hookaddr;\n\n    return originalFunc(pThis, object, object2, hp, self);\n}\n</code></pre>\nAs the callee is responsible for cleaning the stack, providing an incorrect number of parameters lead to a stack corruption (in my case, one of the parameter was still on the stack after my function returns).\n",
            "votes": "1",
            "user": "Stud",
            "time": "Apr 7, 2020 at 8:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}