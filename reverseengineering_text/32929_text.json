{
    "title": "Finding the address of a function in an exe that I have the source code of",
    "link": "https://reverseengineering.stackexchange.com/questions/32929/finding-the-address-of-a-function-in-an-exe-that-i-have-the-source-code-of",
    "content": "I've been playing around with some leaked source codes and I find that locating a function in source in the compiled exe is not so straight forward. And i'm thinking what are the ways to get that function's address if you have the source code to refer to.\n(ps: the compiled exe here isnt like compiled by me its the exe released by the softwware company)\n",
    "votes": "0",
    "answers": 2,
    "views": "99",
    "tags": [
        "ida",
        "binary-analysis",
        "c++"
    ],
    "user": "Yang Jim",
    "time": "May 2, 2024 at 13:00",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Worth being aware that when your executable is compiled, source code in the same source file will reside within the same compilation unit. This is only affected by link-time optimization, so if there are no artifacts for you to use as reference points, you can sometimes identify functions due to them being laid out contiguously from code in the same source file. If you're examining a PECOFF file, the POGO section in the IMAGE_DEBUG_DATA_DIRECTORY can be used to identify the original section names, so you can use it to distinguish things (like the CRT) and reduce your search space.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Assuming that you can not compile the source code I would use it to support revesing in a decompiler like Ghidra, IDA, ...\nOne way to identify a function is by looking at strings. Often log or error messages are so unique that it allows you to identify the function the string is used in.\nIf the function itself does not make use of strings try to identify function that are called by the function of interest or that call the function of interest (check the call graph).\nStep by step rename the functions in the decompiler so that you can get a list of potential candidates. Once you get some candidates, compare the used API methods (e.g. imported or other functions that have a name) and try to understand if it matches the source code.\nAlso the structure of a function in the function graph can be compared to the source code if the conditional branches match the if clauses in the source code.\n",
            "votes": "1",
            "user": "Robert",
            "time": "May 4, 2024 at 13:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Yang Jim",
                    "text": "<span class=\"comment-copy\">yes I thought so. By the way, are there any convenient source code viewers that can generate call graph or cross refs like ida?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You have the source code (that's the what) and the compiled result.\nThe missing part is the way it was compiled (that's the how).\nIf you can get the exact toolchain and parameters used to compile the original copy - you can recompile it and get debugging symbols loadable by disassemblers. A <pre><code>Makefile</code></pre> would help, if exists, so would a <pre><code>CMakeList</code></pre> or similar build instructions.\nThe possibility of getting an exact copy is low, you should try to compile the closest binary you can produce, with symbols, and then use a diffing tool to compare the executable you have and your compiled version. This will allow you to find matching functions and import the symbols to the nameless disassembly.\nIf using IDA - Bindiff is one of the tools. Radare2 has <pre><code>radiff2</code></pre>, among others.\n",
            "votes": "1",
            "user": "Yotamz",
            "time": "May 3, 2024 at 8:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}