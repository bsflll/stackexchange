{
    "title": "Using GDB to trace guest OS inside a hypervisor, the whole running on Qemu - kvm",
    "link": "https://reverseengineering.stackexchange.com/questions/21024/using-gdb-to-trace-guest-os-inside-a-hypervisor-the-whole-running-on-qemu-kvm",
    "content": "I use Gdb to trace the execution (breakpoint, single stepping, ...) of a hypervisor OS in Qemu and it works fine so far.\n<pre><code>qemu-system-x86_64 -enable-kvm -display sdl -cpu host -serial my: stdio -m 8192 --bios ../../tool/boot/tianocore.bin -drive format = raw, file = var / run /hypervisor.img -machine q35 -s -S\ngdb path/to/hypervisor\ntarget remote: 1234\n</code></pre>\nNow, I need to trace the execution of a guest OS in the hypervisor, all run by Qemu. And it does not work.\nYet I added the debugging symbols files related to the OS and I also modified the architecture of the instructions.\n<pre><code>add-symbol-file ~ / Tinycore / vmlinux 0x100000\nadd-symbol-file bin / munich 0x18000\nset architecture i386: x64_32 // because the guest OS is compiled in 32 bits\n</code></pre>\nBut when execution passes the instructions vmresume, vmlauch and continues in the guest OS, Gdb gets confused, single-stepping does not work anymore and breakpoints end up at uncertain addresses.\nDoes anyone have an idea of ​​what I missed?\nOr is it really impossible?\nIs there another way to achieved this?\nThe hypervisor I'm working on is Genode and the guest OS is Tinycore Linux.  \n\n\nmunich is a 32 bits bootloader used to boot the Tinycore Linux.  \nhypervisor, vmlinux and munich are the binaries compiled with debugging symbols.\n",
    "votes": "4",
    "answers": 0,
    "views": "375",
    "tags": [
        "debugging",
        "gdb",
        "breakpoint",
        "qemu",
        "hypervisor"
    ],
    "user": "Mahouk",
    "time": "Apr 2, 2019 at 18:08",
    "comments": [],
    "answers_data": []
}