{
    "title": "Patching a string using DLL injection and OllyDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/12268/patching-a-string-using-dll-injection-and-ollydbg",
    "content": "I'm a novice when it comes to RE but I'm trying to get into it. I have a background in C/C++ so doing the development side of things should be a breeze (aside from when assembly has to be used, im rusty there). I just need to be pointed in the right direction with RE things and will be able to pick things up from there. \nI wrote a simple CLI program (HackMe.exe) to practice RE with, using OllyDbg. It just has a string(\"change me\") which I'm attempting to change (patch?) via a DLL.\nHere's the CLI prog source\n<pre><code>#include <iostream>\n#include <string>\n#include <Windows.h>\n\nint main(int argc, char** argv) {\n    char* change_me = \"change me\";\n\n    while(true) {\n        std::cout << change_me << std::endl;\n        Sleep(3000);\n    }\n\n    return 0;\n}\n</code></pre>\nand the DLL source so far which is bare bone\n<pre><code>#include <Windows.h>\n#include <fstream>\n#include <iostream>\n\nVOID attach();\n\nBOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {\n\n    switch(reason) {\n        case DLL_PROCESS_ATTACH: {\n            CreateThread(0, 0, (LPTHREAD_START_ROUTINE)&attach, 0, 0, 0);\n            break;\n        }\n    }\n\n    return TRUE;\n}\n\nVOID attach() {\n    // patching code will go here\n}\n</code></pre>\nSo far what I've done is\n\nAttached OllyDbg to running HackMe.exe process\nSearched for all referenced text strings and followed the \"change me\" string\n\nFollowing the the string brought me to where the string was found\n\nSo correct me if I'm wrong or not including something but I believe I need to\n\nFind the base address of the process and the offset to the string address\nPatch the memory at base + offset with a new string thats len is == to the original \n\nSo i guess my questions are\n\nHow do I find the base offset of process (I assume I can do in the DLL using something like GetModuleHandle(\"HackMe.exe\"))? \nIs there a way to see the base offset in OllyDbg (not that useful I suppose since the base will more than likely change every time the exe is ran)?\nHow do I find the +offset of the string from the base?\n\nWorking end result\n<pre><code>#include <Windows.h>\n\nVOID attach();\n\nBOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {\n\n    switch(reason) {\n        case DLL_PROCESS_ATTACH: {\n            attach();\n            break;\n        }\n    }\n\n    return TRUE;\n}\n\nVOID attach() {\n\n    DWORD old;\n    DWORD base   = (DWORD)GetModuleHandle(NULL);\n    DWORD offset = 0x01CC80;\n\n    char* ptr = reinterpret_cast<char*>(base + offset);\n    const size_t length   = 10;\n    char buffer[ length ] = \"changed:)\";\n\n    VirtualProtect(ptr, length, PAGE_EXECUTE_READWRITE, &old);\n    memcpy(ptr, buffer, length);\n    VirtualProtect(ptr, length, old, nullptr);\n}\n</code></pre>\n",
    "votes": "4",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ollydbg",
        "c++",
        "memory",
        "dll-injection"
    ],
    "user": "SelfTaught",
    "time": "Mar 22, 2016 at 23:09",
    "comments": [
        {
            "user": "blabb",
            "text": "you shouldn't be creating threads in DllMain it isn't recommended  blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283 blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "How do I find the base offset of process (I assume I can do in the DLL using something like GetModuleHandle(\"HackMe.exe\"))?\n\n\nA process doesn't have a base offset; I believe you mean the base address of the primary module. To get that address, you would use <pre><code>GetModuleHandle(NULL)</code></pre>.\n\n\nIs there a way to see the base offset in OllyDbg (not that useful I suppose since the base will more than likely change every time the exe\n  is ran)?\n\n\nAlt+E will show you the base address of each loaded module.\n\n\nHow do I find the +offset of the string from the base?\n\n\nThere are countless ways to do it, but an easy way is to use a tool like IDA or BinText to find the string's virtual address, and then subtract from that the default base address of HackMe.exe.\n",
            "votes": "5",
            "user": "Jason Geffner",
            "time": "Mar 22, 2016 at 13:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">wouldn't the <b>std::string change_me</b> be a stack / heap / copy of the original string ? is changing the original string in the exe be enough ? to change the string outputted by cout() ?</span>",
                    "time": null
                },
                {
                    "user": "SelfTaught",
                    "text": "<span class=\"comment-copy\">Correct, I did mean base address. Thanks for the answers.</span>",
                    "time": null
                }
            ]
        }
    ]
}