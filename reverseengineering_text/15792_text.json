{
    "title": "Basic assembly query [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/15792/basic-assembly-query",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI wrote a program which will add two numbers in assembly.\nWhen I do a system call for <pre><code>scanf()</code></pre>, the instruction looks like this:\n<pre><code>mov rcx, num1\n</code></pre>\nNote: I have defined <pre><code>num1</code></pre> in the <pre><code>bss</code></pre> section as:\n<pre><code>num1 resb 10\n</code></pre>\nAnd, when I try to move this value to say <pre><code>rax</code></pre> the instruction looks like:\n<pre><code>mov rax, [num1]\n</code></pre>\nFrom what I have learned, anything inside square brackets must only be computed in case of <pre><code>rm32</code></pre>. So, more like going to memory location but not reading what's in the memory.\nHow is this bracket helping here ?\nWhy do we need the memory location when we can have the direct value?\nAnd my next instruction is:\n<pre><code>sub rax, '00'\n</code></pre>\n<pre><code>rax</code></pre> contains an address of <pre><code>num1</code></pre>. Shouldn't we be doing math to the value <pre><code>num1</code></pre> and not on the address ?\n",
    "votes": "1",
    "answers": 1,
    "views": "602",
    "tags": [
        "ida",
        "assembly",
        "intel"
    ],
    "user": "Atply",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "just because it's about assembler does not mean it's RE\n",
            "time": null
        },
        {
            "user": "Atply",
            "text": "Agreed. But it's related.  That's the reason I posted it here.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First of all, you are using the Intel syntax for the x86/amd64 assembly. So, in this syntax the brackets (<pre><code>[.]</code></pre>) stands for a dereference of the address it contains.\nIf you know C programming, <pre><code>[var]</code></pre> (in assembly) is exactly similar to '*var'.\nIn fact, the only small difficulty you have to handle here is that the <pre><code>num1</code></pre> that you defined is already an address (I am speaking now about the nasm syntax and NOT about the Intel asm syntax). \nSo, <pre><code>move rcx, num1</code></pre> means that you copy the address of <pre><code>num1</code></pre> to <pre><code>rcx</code></pre>. \nAnd, <pre><code>move rax, [num1]</code></pre> means that you copy the content of <pre><code>num1</code></pre> to <pre><code>rax</code></pre>.\nYou may refer to this SO question which might explain your problem.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jul 9, 2017 at 11:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}