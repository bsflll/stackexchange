{
    "title": "Output address path during .exe execution",
    "link": "https://reverseengineering.stackexchange.com/questions/21273/output-address-path-during-exe-execution",
    "content": "I have an obfuscated software. I'm a beginner in this area, so I don't find where a patch would be useful for what I want to do.\nIt turns out that I have an idea of how I could find out in which addresses I need to search: the software behaves differently if I add some lines in its config files.\nSo, I'd like to output a text file which contains all the addresses the RIP was set to.\nThen I'll be able to diff the files and have an idea of when the execution flow diverged...\nHowever, in order to do that I need to use Windows and not Linux because this software doesn't work well with Wine.\nHow could I do, to create such a script, on Windows?\n",
    "votes": "0",
    "answers": 0,
    "views": "62",
    "tags": [
        "windows",
        "deobfuscation",
        "patching"
    ],
    "user": "Drarig29",
    "time": "May 4, 2019 at 14:04",
    "comments": [
        {
            "user": "Rup",
            "text": "That log would be huge. I suspect your only options would be to run it in an emulator, and modify that to output registers as it went, or find a debugger that you can modify (gdb?) to keep single stepping execution and logging as it goes.\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "Use a coverage engine like dynamorio's drrun to calculate basic blocks covered for each file. Then use something like lighthouse to visualise instructions covered in both files.\n",
            "time": null
        },
        {
            "user": "Drarig29",
            "text": "I might have found the solution here. But I still need to try it...!\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "That sounds like a classic use case for PIN, the dynamic instrumentation tool from Intel. The solution you linked might do the same but I'd assume it to be orders of magnitude slower because it's effectively single stepping. This is a typical use case for PIN though, creating a run trace and then diffing. I don't have a tutorial handy though.\n",
            "time": null
        }
    ],
    "answers_data": []
}