{
    "title": "Windows time travel debugging performance bottleneck",
    "link": "https://reverseengineering.stackexchange.com/questions/27702/windows-time-travel-debugging-performance-bottleneck",
    "content": "First of all I wan to be clear, that this question is not about the collection performance, but indexing performance.\nWhat is the performance bottleneck of the indexing step?\nSome context:\nAction in game that should take under 1 second took over 10 minutes with TT data collection, and produced over 80 GB run file. (input conditions not part of the question)\nWhat exactly does the indexing do?\n\"Debug Engine Host Process\" uses 37-41 % of the CPU, ~2 GB RAM, and 12-26 MB/s disk IO\nIt uses the all 32 CPU cores almost the same, so from that I assume it is well parallelized.\nRAM usage is so low that it can be ignored, I assume.\nDisk IO is also low 0-3% active time because it works on relatively fast NVME drive, with all 4 PCIe gen3 lanes directly from the CPU. This drive is less than 10% used capacity, so even if it would be in the part that is not always SLC, the cells would be in SLC mode, because of enough free space.\nI am quite interested what are your thoughts about this, and if you think I can do something to make it faster, like some hidden option to use twice as many threads?\n",
    "votes": "0",
    "answers": 0,
    "views": "187",
    "tags": [
        "windows",
        "windbg"
    ],
    "user": "Jakub",
    "time": "May 22, 2021 at 11:38",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "How is this related to RE? Just because it involves WinDbg?\n",
            "time": null
        },
        {
            "user": "Jakub",
            "text": "@IgorSkochinsky Is time travel debugging actually useful for anything else? If it would be your app you would have source code, and adding logs, or checking variables up the stack with debug build would take much less time, than trying TTD. But I am interested if your opinion on this is different.\n",
            "time": null
        },
        {
            "user": "Jakub",
            "text": "I maybe extend the question to is there any other way to found out how code reached that point other that going backward? Because of some of the magic authors of the game did stack information is incorrect most of times, and the code is full of debugger traps, so even forward debugging is often problem.\n",
            "time": null
        }
    ],
    "answers_data": []
}