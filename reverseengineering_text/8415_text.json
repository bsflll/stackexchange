{
    "title": "Monitoring Exceptions raised by an executable",
    "link": "https://reverseengineering.stackexchange.com/questions/8415/monitoring-exceptions-raised-by-an-executable",
    "content": "Using tools like strace I can figure out the signals a program receives as it executes, regardless of whether or not signal handlers for those signals have been defined.\n[EDIT]\nIn order to do the same on Windows I'm following what's mentioned here. I tested it by having a test process sleep at the start for about 20 seconds, then crash by jumping to 0x41414141. As it sleeps I attach procdump.exe to the process and then monitor the exceptions in procmon.exe. Is there a way I can do this without the sleep? I tried running it from OllyDbg and then attaching procdump.exe but the message would say that the process is already being debugged.\nAny advice on how I could proceed?\n",
    "votes": "0",
    "answers": 1,
    "views": "567",
    "tags": [
        "windows",
        "linux",
        "seh",
        "exception"
    ],
    "user": null,
    "time": "Jan 2, 2021 at 21:52",
    "comments": [],
    "answers_data": [
        {
            "content": "You can just use the <pre><code>-x</code></pre> command line argument for ProcDump:\n\n<pre><code>-x</code></pre>  Launch the specified image with optional arguments. If it is a Store Application or Package, ProcDump will start on the next\n  activation (only).\n...\nLaunch a process and then monitor it for exceptions:\n<pre><code>C:\\>procdump -e 1 -f \"\" -x c:\\dumps consume.exe</code></pre>\n",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Mar 8, 2015 at 17:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}