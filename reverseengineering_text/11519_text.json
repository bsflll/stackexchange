{
    "title": "Analyzing a Login Process",
    "link": "https://reverseengineering.stackexchange.com/questions/11519/analyzing-a-login-process",
    "content": "I am reverse engineering a program that uses a custom auth protocol. This is a basic outline of the process:\n\nClient takes input for username and password, then sends username to the auth server.\nAuth server calculates a public key and responds with it.\nClient uses that key to calculate a session key, which is sent to the server. \n\nThe communication is all done via HTTP. My goal is to locate and analyze the functions responsible for calculating the session key. My most recent approach was to set a breakpoint on <pre><code>ws2_32.recv</code></pre>, begin the login process, then step through the execution from the recv breakpoint to analyze how the public key was being used to calculate the session key.\nHowever, the breakpoint isn't triggered at the expected time. A breakpoint on <pre><code>ws2_32.send</code></pre> is triggered as expected. I'm pretty stumped on this. Is there something I've overlooked? Is there a better approach to locating the functions?\n",
    "votes": "2",
    "answers": 1,
    "views": "934",
    "tags": [
        "binary-analysis",
        "debugging",
        "dynamic-analysis"
    ],
    "user": "Invalidation",
    "time": "Dec 13, 2015 at 9:41",
    "comments": [
        {
            "user": "Remko",
            "text": "Is the client a (windows) executable? You could look at what the executable imports in the Import Address Table or run it through a disassembler.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your program might be using <pre><code>ws2_32.recvfrom</code></pre> instead of <pre><code>ws2_32.recv</code></pre>. Or alternatively, it could be using one of the lower-level Winsock functions, such as <pre><code>ws2_32.WSARecv</code></pre>, <pre><code>ws2_32.WSARecvEx</code></pre>, <pre><code>ws2_32.WSARecvFrom</code></pre>, or <pre><code>ws2_32.WSARecvMsg</code></pre>.\nYou may want to try one of the following approaches to determine what the program is doing:\n\nUse an API monitor such as API Monitor to determine what networking functions are called.\nUse Process Monitor to capture the network-receive events and double-click on those events to see the callstack.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Dec 14, 2015 at 15:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Invalidation",
                    "text": "<span class=\"comment-copy\">I took a look at the process with API monitor and monitored all functions under \"networking\". I also set individual breakpoints on <code>recv</code>, <code>recvfrom</code>, <code>WSARecv</code>, <code>WSARecvEx</code>, and <code>WSARecvFrom</code>. Though the auth library calls <code>send</code>, it never seems to call any of the recv functions listed. The only calls to <code>recv</code> are from <code>libcef.dll</code>, and the calls are out of order in relation to the auth library's <code>send</code> calls. I'm watching the recv packets come in simultaneously using network monitor, too. Also, <code>WSARecvMsg</code> isn't recognized by API Monitor nor Immunity Debugger for me.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Sounds like using Process Monitor is the way to go, then.</span>",
                    "time": null
                }
            ]
        }
    ]
}