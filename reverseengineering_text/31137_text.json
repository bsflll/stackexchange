{
    "title": "Clean Angr disassemble output",
    "link": "https://reverseengineering.stackexchange.com/questions/31137/clean-angr-disassemble-output",
    "content": "I'm developing a python script for Angr that has to print as output something in the form of:\n<pre><code>Instruction_disassembled        opcode_bytes_of_instruction\n</code></pre>\nThis is my python script:\n<pre><code>    f = open(sys.argv[2], 'w')\n    base_addr = 0x100000\n    p = angr.Project(sys.argv[1], auto_load_libs = False, load_options = {'main_opts':{'base_addr': base_addr}})\n    cfg = p.analyses.CFGFast()\n    cfg.normalize()\n    for func_node in cfg.functions.values():\n        for block in func_node.blocks:\n            print(re.sub(r'.', '', str(block.disassembly), count = 10) + '\\t' + block.bytes.hex()) \n</code></pre>\nWith my script I'm receiving an output that has two things that I don't want: addresses at the beginning of the line and the opcode bytes that are printed all at the end of the block instead at the end of each line, for example:\n<pre><code>endbr64 \n0x101004:   sub rsp, 8\n0x101008:   mov rax, qword ptr [rip + 0x2fd9]\n0x10100f:   test    rax, rax\n0x101012:   je  0x101016    f30f1efa4883ec08488b05d92f00004885c07402\n\n</code></pre>\nUnfortunately the block is being printed as a whole and I can't either remove the addresses or print correctly the opcode bytes.\nCan you tell me another way to iterate through the functions in order to have the single instructions or how can I parse this? Thank you in advance.\n",
    "votes": "2",
    "answers": 1,
    "views": "126",
    "tags": [
        "disassembly",
        "python",
        "disassemblers",
        "angr"
    ],
    "user": "Luca",
    "time": "Nov 15, 2022 at 15:47",
    "comments": [],
    "answers_data": [
        {
            "content": "I have solved it with:\n<pre><code>for func_node in cfg.functions.values():\n        for block in func_node.blocks:\n            c = block.capstone\n\n            for i in c.insns:\n                f.write(' '.join(re.findall(r'.{1,2}', i.insn.bytes.hex())).upper() + '\\t\\t' + i.mnemonic.upper() +\n                        \" \" + i.op_str.upper() + '\n')\n</code></pre>\n",
            "votes": "2",
            "user": "Luca",
            "time": "Dec 11, 2022 at 14:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}