{
    "title": "Arrays assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/27012/arrays-assembly",
    "content": "I'm reversing my C array's programs where I'm storing numbers in arrays like this...\n<pre><code>int marks[5];\nmarks[0] = 1;\nmarks[1] = 3;\nmarks[2] = 2;\nmarks[3] = 7;\nmarks[4] = 9;\n</code></pre>\nso the compiler showing me the disassembly...\n\nActually, my question is why it is storing like this? by using <pre><code>imul</code></pre> first before storing 1 then before storing 7, and using <pre><code>shl</code></pre> for storing 3, 2, and 9.\nCan anyone please help?\nFell free to edit it*\n",
    "votes": "1",
    "answers": 1,
    "views": "227",
    "tags": [
        "disassembly",
        "windows",
        "binary-analysis",
        "c",
        "static-analysis"
    ],
    "user": "Ramesses II",
    "time": "Feb 15, 2021 at 7:08",
    "comments": [
        {
            "user": "blabb",
            "text": "i think you have already been asked to post text not images\n",
            "time": null
        },
        {
            "user": "Ramesses II",
            "text": "Actually, in visual studio 2017 I can't copy the assembly code as there's no option there so that's why I've use an image to present my point.\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "@RamessesII unless you have some strange VS, you can for sure copy assembly from there.\n",
            "time": null
        },
        {
            "user": "nobody",
            "text": "Lack of copy and paste (if true, which is unlikely) is not an excuse for posting an image of text. You can re-type it in a code block. It's not that much.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "those are pointer arithmetics\nmarks is an <<<;ADDRESS;>>>>>  assume 0x10000000\nit points to an integer whose size is 4 in 32 bit machine\nso the next integer will be at 0x10000004 ,\nand the next will be at 0x10000008 and so on\n&marks[0] = 0x10000000\n&marks[1] = 0x10000004\n&marks[2] = 0x10000008,c,10,14,18,.....nn\neach of the 4 in the disassembly is sizeof(int) == 4\nthey are multiplied by 0 , 2^0 , 2^1,3 and 2^2 to result in 0,1,2,3,4 as indexes\n",
            "votes": "3",
            "user": "blabb",
            "time": "Feb 15, 2021 at 7:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}