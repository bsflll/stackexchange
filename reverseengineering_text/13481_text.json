{
    "title": "What is the difference between program slicing and taint analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/13481/what-is-the-difference-between-program-slicing-and-taint-analysis",
    "content": "I'm studying program slicing and taint analysis. I know notion of program slicing and taint analysis. \nI think Program slicing and taint analysis are similar notion.\nI don' know difference between program slicing and taint analysis.\nWhat is the difference between program slicing and taint analysis?\n",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "program-analysis"
    ],
    "user": "Seong-Kyun",
    "time": "Sep 10, 2016 at 8:12",
    "comments": [],
    "answers_data": [
        {
            "content": "In my understanding there are two major differences: \nProgram Slicing creates a reduced representant of a program which should still produces the same output for a given input. So you reduce the given program to its core functionality and you throw away all the clumpy/insignificant attachments.\nIn contrast a Taint Analysis traces the path of an information through an application and observes all the objects which are affected/visited/influenced by the corresponding information. Therefor a specific input is labeled or tagged, so it could be tracked during its execution.\nSo you have a reduced representation of a program with consideration of input output behavior VS the trail of a selected input/variable within a program and its dependencies.\n\nSee also detailed descriptions below:\nProgram slicing tries to reduce a given program <pre><code>P</code></pre> to a minimum form, a so called slice <pre><code>S</code></pre>, which produces the same behavior. More formally taken from these slides:\n\n\nproduce a slice <pre><code>S</code></pre> from a given program <pre><code>P</code></pre> by deleting statements\nslice must be syntactically correct a given set of variables <pre><code>V</code></pre>\nshould produce the same output when given to <pre><code>S</code></pre> and <pre><code>P</code></pre>\n\n\nTaint analysis can be seen as a form of Information Flow Analysis. A more formal definition ripped from here: \n\nInformation flows from object x to object y, denoted xâ†’y , whenever\n  Information stored in x is transferred to, object y.\n",
            "votes": "3",
            "user": "knx",
            "time": "Sep 10, 2016 at 10:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">IMHO, what you are referring is about \"static program slicing\". On the other hand, in terms of \"dynamic slicing\" which is performed on a execution trace, then it cares about a selected input as well (since one trace corresponds to one input).</span>",
                    "time": null
                },
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Could you provide a reference for static vs dynamic slicing?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I'd say they are essentially the same, with slightly different focus:\nProgram slicing is, strictly, extracting code that operates on specific variables/memory, while omitting all other code;\nTaint analysis is tracking which other variables/memory are affected, via that code, by the ones you chose. Also, tainted data is usually stricter defined as \"user-controllable data\", while slicing can be done on any var.\n",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Sep 11, 2016 at 4:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}