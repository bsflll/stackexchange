{
    "title": "What are @PAGE and @PAGEOFF symbols in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/14385/what-are-page-and-pageoff-symbols-in-ida",
    "content": "The above is the disassembly of a 64 bit ARM firmware image. Does anybody know what those <pre><code>@PAGE</code></pre> and <pre><code>@PAGEOFF</code></pre> symbols mean?\n",
    "votes": "11",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "sherlock",
    "time": "Jan 12, 2017 at 23:16",
    "comments": [
        {
            "user": "Olsonist",
            "text": "These are assembler directives to calculate the offset at link time stackoverflow.com/q/38711058/4603507\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "the image is not showing; reupload it or, even better, just paste the text as a code block.\n",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "I can see the image: i.sstatic.net/ngBHx.png\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "hm yeah, it appeared now. but it's still better to use text instead of screenshots\n",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "I know that text would be searchable, but rendering could get destroyed.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "in AArch64, all instructions are 32-bit long. Obviously, this is not enough to encode 64-bit addresses which AArch64 may need to process. So there's two options:\n\nuse 64-bit pointers placed in the constant pool near the instruction and load them with the  <pre><code>LDR</code></pre> instruction. This is doable but such pointers need to be updated (relocated) if the image is loaded at a non-default address. \nUse PC-relative addressing to load addresses at a fixed offset from the current location (PIC code). This is the more common approach but the offset is still limited by the instruction size. So ARM designers came up with a clever hack: use two instructions to allow for a much wider range. \n\nThe ADRP instruction loads the address of the 4KB page anywhere in the +/-4GB (33 bits) range of the current instruction (which takes 21 high bits of the offset). this is denoted by the <pre><code>@PAGE</code></pre> operator. \nthen, we can either use <pre><code>LDR</code></pre> or <pre><code>STR</code></pre> to read or write any address inside that page or <pre><code>ADD</code></pre> to to calculate the final address using the remaining 12 bits of the offset (denoted by<pre><code>@PAGEOFF</code></pre>). \nSo basically you can consider those instruction pairs as if the last one directly accesses the final address of the location before the <pre><code>@</code></pre> and you can ignore the suffixes if you don't plan to reassemble the file. \nSee also https://stackoverflow.com/questions/34003338/llvm-arm64-assembly-getting-a-symbol-label-address\n",
            "votes": "17",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}