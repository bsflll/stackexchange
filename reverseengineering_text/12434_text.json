{
    "title": "Determind length of instructions in bytes",
    "link": "https://reverseengineering.stackexchange.com/questions/12434/determind-length-of-instructions-in-bytes",
    "content": "Where is it possible to find a list of x86 instructions (and x64 instructions) with the (hex) opcode and the length/size in bytes of the instructions, such as:\n\n<pre><code>0x90</code></pre> = <pre><code>NOP</code></pre> = 1 byte\n<pre><code>0xE9</code></pre> = <pre><code>JMP</code></pre> = 5 bytes\n<pre><code>0x8B</code></pre> = <pre><code>MOV</code></pre> = 2 bytes\n<pre><code>0x55</code></pre> = <pre><code>PUSH</code></pre> = 1 byte\n<pre><code>0x6A</code></pre> = <pre><code>PUSH</code></pre> = 2 bytes\n<pre><code>0x68</code></pre> = <pre><code>PUSH</code></pre> = 5 bytes\n\nUnsure if all of them are correct.\nI've been using this wonderful list, to look through instructions and their opcodes, but it doesn't contain the full length/size in bytes of each opcode.\nWhat confuses me a bit more, is how it at the beginning mentions \"one-byte opcodes\" and \"two-byte opcodes\". While the <pre><code>JMP</code></pre> command would be 5 bytes (1 byte for <pre><code>JMP</code></pre> command, 4 bytes for jump distance).\nEdit\nI don't specifically need a list per se. Overall I'm just searching for a way to deduce the length of instructions.\n",
    "votes": "3",
    "answers": 3,
    "views": "6k",
    "tags": [
        "disassembly",
        "x86",
        "x86-64",
        "machine-code"
    ],
    "user": "vallentin",
    "time": "Apr 16, 2016 at 8:13",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "There are several <pre><code>jmp</code></pre> opcodes. That's why you have \"short\" jumps, for example (+/-127 Byte, IIRC). And those are not 5 Byte. Also, the opcode is usually considered <pre><code>x</code></pre>-Byte depending on the opcode, without the operands.\n",
            "time": null
        },
        {
            "user": "vallentin",
            "text": "@0xC0000022L but don't they all have different opcodes? if not how do you differentiate between them?\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "They have a different binary representation, exactly. But they are all formally called <pre><code>jmp</code></pre> in their mnemonic form. Also, do you actually need a list, or do you need simply a library/framework to decode opcodes properly?\n",
            "time": null
        },
        {
            "user": "vallentin",
            "text": "@0xC0000022L ahh yes, but I'm disassembling machine code, and need to figure out the length of instructions.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "There are libraries available for that purpose. Are you certain you need to do that manually and you need a comprehensive list? Of course it would still be handy to have a list, but frankly why would you do such an analysis manually anyway. RCE is tedious enough as it is, no?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Instead of using a list, it would probably be much more efficient for you to use a small and portable length disassembler, such as https://github.com/greenbender/lend.\n",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Apr 16, 2016 at 0:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "vallentin",
                    "text": "<span class=\"comment-copy\">This for now is what I'm going to go for, as it is small enough for my need.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\"><b>Beware</b> that disassembler is under GPLv3, which makes it rather unwieldy for many purposes outside of the FLOSS realm.</span>",
                    "time": null
                },
                {
                    "user": "Micrified",
                    "text": "<span class=\"comment-copy\">It's also only x86...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The definitive list is, unsurprisingly, available in Intel's manuals for these processors. These are free downloads from Intel's website. What you want most, or first, is the opcode map. This is important enough that it's typically, if not always, Appendix A in the Software Developer's Manual, Programmer's Reference Manual or whatever. \nAn opcode map is ordered by the first byte and summarises for you how the instruction continues. For instance, this is where you discover that 0x8B is not just a MOV but specifically a MOV of a word or dword (depending on the operand size attribute) from an effective address to a general register, and that the operand can therefore have a range of formats (whose encoding details are in another appendix) such that the whole instruction is at least 2 bytes but may be as long as 7 bytes (being a mod r/m byte, an optional s-i-b byte, and an optional displacement). \nAs for the one-byte and two-byte opcodes - and even longer nowadays - these refer just to the bytes at the instruction's start which are necessary for beginning the instruction, however many bytes may follow for the operands. Originally, there were only one-byte opcodes (unless we count escapes to the coprocessor). As the map filled, 0x0F was selected as introducing two-byte opcodes. For instance, the SMSW instruction always starts 0x0F 0x01, whatever its operands. (There is always also a third byte, which differentiates SMSW from other instructions that begin 0x0F 0x01, but I leave the understanding of this as your exercise when you peruse the manuals.)\n",
            "votes": "5",
            "user": "Geoff Chappell",
            "time": "Apr 15, 2016 at 15:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "vallentin",
                    "text": "<span class=\"comment-copy\">Do you have a permalink for the manual, including (presumably) a page number?</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Vallentin: how about <a href=\"https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\" rel=\"nofollow noreferrer\">this one</a>? They used to be available as hard copies. I still have two sets of those.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Making such a list is impossible (depending on what comes after bytes like 8B it may be much longer than 2 bytes). I recommend you use a disassembly library, as almost all will calculate the length and you can access it from there. There are some bytes with a register / number as the only operand, but even in those cases a prefix can change their behavior.\n",
            "votes": "0",
            "user": "Lupe",
            "time": "Apr 13, 2016 at 16:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "vallentin",
                    "text": "<span class=\"comment-copy\">\"Making such a list is impossible\", that is just plain wrong. If it is impossible to deduce the bytes, then it would we as impossible to execute.</span>",
                    "time": null
                },
                {
                    "user": "Lupe",
                    "text": "<span class=\"comment-copy\">I mean it's impossible to make a list of \"push is 2 bytes\". I'm saying you can't look up the opcode to find the length.</span>",
                    "time": null
                },
                {
                    "user": "vallentin",
                    "text": "<span class=\"comment-copy\">that is still complete bogus. If the languages isn't governed by fixed rules. Then it would again be impossible to execute machine code.</span>",
                    "time": null
                },
                {
                    "user": "Lupe",
                    "text": "<span class=\"comment-copy\">Do you feel that you can always determine the length of the instruction by the opcode? I know it's governed by fixed rules; I wrote a disassembler as a project. I think either you aren't understand what I'm saying or I'm not understanding what he's asking: I'm saying that if you have the opcode (e.g. 8B) you can't determine the full length reliably.</span>",
                    "time": null
                },
                {
                    "user": "Sigtran",
                    "text": "<span class=\"comment-copy\">I use this most of the time <a href=\"http://ref.x86asm.net/coder32.html\" rel=\"nofollow noreferrer\">ref.x86asm.net/coder32.html</a> x64 is linked from the homepage</span>",
                    "time": null
                }
            ]
        }
    ]
}