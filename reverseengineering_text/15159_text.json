{
    "title": "Recognizing a possibly obfuscated character encoding used in a database",
    "link": "https://reverseengineering.stackexchange.com/questions/15159/recognizing-a-possibly-obfuscated-character-encoding-used-in-a-database",
    "content": "I downloaded デジタル大辞泉 trial from Microsoft Store to try it out. The interface was not very good in my opinion, so I thought that maybe it is possible to extract the dictionary and convert it to another dictionary format.\nI opened <pre><code>Assets\\db\\resource_A</code></pre> with SQLite Browser, and found some text matching the user interface, but there was a problem:\n\nOnly the Latin alphabet are the same between these two. Here's some raw data I collected:\n<pre><code>db,real\nIT㘠敹嶋,IT・数学\n冠嶋,区学\n凹嶋,地学\n煄璲,生物\n璲灏㘠再嶋,物理・化学\n煄楠,生活\n煠嘆,画像\n捹謆运劻誌,新規追加語\n噷貌,品詞\n㐥㐺㈆㐍,ことわざ\n囤嶅猄誌,四字熟語\n㈢㈀㈢㘮誌,カタカナ語\nABC畓垁,ABC略号\n嶣誌,季語\n難誒誌,難読語\n煺湕㘠䣦掓,用法・下接\n捇嶋,文学\n杓懚垩,日本史\n䣍畞垩,世界史\n</code></pre>\nI can see that for example 学 corresponds to 嶋 in the database, but when I checked if there was a set code point shift or something, the output was pretty messy. Here's some data on that (db, correct, db hex, correct hex, db-correct):\n<pre><code>I   T   㘠   敹   嶋\nI   T   ・   数   学\n0x49    0x54    0x3620  0x6579  0x5d8b\n0x49    0x54    0x30fb  0x6570  0x5b66\n0x0 0x0 0x525   0x9 0x225\n\n冠   嶋\n区   学\n0x51a0  0x5d8b\n0x533a  0x5b66\n-0x19a  0x225\n\n凹   嶋\n地   学\n0x51f9  0x5d8b\n0x5730  0x5b66\n-0x537  0x225\n\n煄   璲\n生   物\n0x7144  0x74b2\n0x751f  0x7269\n-0x3db  0x249\n\n璲   灏   㘠   再   嶋\n物   理   ・   化   学\n0x74b2  0x704f  0x3620  0x518d  0x5d8b\n0x7269  0x7406  0x30fb  0x5316  0x5b66\n0x249   -0x3b7  0x525   -0x189  0x225\n\n煄   楠\n生   活\n0x7144  0x6960\n0x751f  0x6d3b\n-0x3db  -0x3db\n\n煠   嘆\n画   像\n0x7160  0x5606\n0x753b  0x50cf\n-0x3db  0x537\n\n捹   謆   运   劻   誌\n新   規   追   加   語\n0x6379  0x8b06  0x8fd0  0x52bb  0x8a8c\n0x65b0  0x898f  0x8ffd  0x52a0  0x8a9e\n-0x237  0x177   -0x2d   0x1b    -0x12\n\n噷   貌\n品   詞\n0x5677  0x8c8c\n0x54c1  0x8a5e\n0x1b6   0x22e\n\n㐥   㐺   ㈆   㐍\nこ   と   わ   ざ\n0x3425  0x343a  0x3206  0x340d\n0x3053  0x3068  0x308f  0x3056\n0x3d2   0x3d2   0x177   0x3b7\n\n囤   嶅   猄   誌\n四   字   熟   語\n0x56e4  0x5d85  0x7304  0x8a8c\n0x56db  0x5b57  0x719f  0x8a9e\n0x9 0x22e   0x165   -0x12\n\n㈢   ㈀   ㈢   㘮   誌\nカ   タ   カ   ナ   語\n0x3222  0x3200  0x3222  0x362e  0x8a8c\n0x30ab  0x30bf  0x30ab  0x30ca  0x8a9e\n0x177   0x141   0x177   0x564   -0x12\n\nA   B   C   畓   垁\nA   B   C   略   号\n0x41    0x42    0x43    0x7553  0x5781\n0x41    0x42    0x43    0x7565  0x53f7\n0x0 0x0 0x0 -0x12   0x38a\n\n嶣   誌\n季   語\n0x5da3  0x8a8c\n0x5b63  0x8a9e\n0x240   -0x12\n\n難   誒   誌\n難   読   語\n0x96e3  0x8a92  0x8a8c\n0x96e3  0x8aad  0x8a9e\n0x0 -0x1b   -0x12\n\n煺   湕   㘠   䣦   掓\n用   法   ・   下   接\n0x717a  0x6e55  0x3620  0x48e6  0x6393\n0x7528  0x6cd5  0x30fb  0x4e0b  0x63a5\n-0x3ae  0x180   0x525   -0x525  -0x12\n\n捇   嶋\n文   学\n0x6347  0x5d8b\n0x6587  0x5b66\n-0x240  0x225\n\n杓   懚   垩\n日   本   史\n0x6753  0x61da  0x57a9\n0x65e5  0x672c  0x53f2\n0x16e   -0x552  0x3b7\n\n䣍   畞   垩\n世   界   史\n0x48cd  0x755e  0x57a9\n0x4e16  0x754c  0x53f2\n-0x549  0x12    0x3b7\n</code></pre>\nIf you want to see a pattern, there are some characters that are from the same distance of their corresponding character in the database (okay maybe it's just the birthday problem though):\n-0x12\n\n0x8a9e\n0x7565\n0x63a5\n\n-0x3db\n\n0x751f\n0x6d3b\n0x753b\n\nAlso the distance between the real character and the database character isn't very large, none of them are in the 0x1000's.\nHere's some patent about character set based obfuscation. Not sure if it's in any way related to this one.\nIs this some common character encoding or am I looking at an obfuscated database?\n",
    "votes": "0",
    "answers": 1,
    "views": "121",
    "tags": [
        "encodings"
    ],
    "user": "siikamiika",
    "time": "Apr 14, 2017 at 14:15",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "I don't know what encoding you used to paste your sample data, but maybe try EUC-JP or Shift-JIS.\n",
            "time": null
        },
        {
            "user": "siikamiika",
            "text": "@IgorSkochinsky I exported the one that should be \"IT・数学\" and it's <pre><code>49 54 e3 98 a0 e6 95 b9 e5 b6 8b</code></pre>. Python's shift-jis and euc-jp fail to decode it but utf-8 works, it just outputs the wrong characters\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since it's a Store app, most likely it's a .net executable so it shouldn't be too difficult to decompile it and see what it does with the data from the database. I expect they do apply some encryption or obfuscation on the data but it does not seem to be something obvious from your samples.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 14, 2017 at 5:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}