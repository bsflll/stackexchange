{
    "title": "MS DOS development - Interrupt controller",
    "link": "https://reverseengineering.stackexchange.com/questions/32361/ms-dos-development-interrupt-controller",
    "content": "<pre><code>cseg01:0005229A                 mov     dx, 21h ; '!'\ncseg01:0005229E                 in      al, dx          ; Interrupt controller, 8259A.\ncseg01:0005229F                 or      al, 1\ncseg01:000522A1                 out     dx, al          ; Interrupt controller, 8259A.\n\n</code></pre>\n<pre><code>cseg01:000522C6                 mov     dx, 21h ; '!'\ncseg01:000522CA                 in      al, dx          ; Interrupt controller, 8259A.\ncseg01:000522CB                 and     al, 0FEh\ncseg01:000522CD                 out     dx, al          ; Interrupt controller, 8259A.\n\n</code></pre>\nThis code operates with Interrupt controller, but I dont understand for what is need? Why we set al = 1 and out to Interrupt controller port? What do this code?\nThanks in advance.\n",
    "votes": "0",
    "answers": 2,
    "views": "79",
    "tags": [
        "assembly"
    ],
    "user": "black4joss",
    "time": "Oct 5, 2023 at 8:16",
    "comments": [],
    "answers_data": [
        {
            "content": "The first section of code is disabling IRQ0, while the second section of code is enabling IRQ0.  Assuming this is code that works on a standard PC, it is specifically disabling the real-time clock interrupt. A program would do this if it needed to perform some operation that must not be interrupted by the RTC.  Once that operation is complete, the interrupt is enabled to allow normal operation of the RTC.\n",
            "votes": "1",
            "user": "Steve Mathwig",
            "time": "Oct 5, 2023 at 14:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">Thank you very much. Can you explain this logical operations? I a bit confused:  or al, 1 and al, 0FEh</span>",
                    "time": null
                },
                {
                    "user": "Steve Mathwig",
                    "text": "<span class=\"comment-copy\">The \"in al,dx\" reads the current contents of the 8259 interrupt mask register into al.  The \"or al,1\" sets bit 0 of al.  The \"out dx,al\" then writes the new value of the 8259 interrupt mask register.  For the 8259, setting a bit in the interrupt mask register disables the interrupt.  To re-enable the interrupt, the interrupt mask register is read again \"in al,dx\", bit 0 of al is cleared \"and al,0FEh\", and written back to the interrupt mask register \"out dx,al\".</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "you could probably simulate most of this by running some pyhton or any other easy to use environment or simulators\nor al , 1\n<pre><code>for i in range(0,32,1):\n...     al = i\n...     print(bin(al | 1) , end = \"\\t\")\n...\n    0b1     0b1     0b11    0b11    0b101   0b101    0b111    0b111   0b1001  \n 0b1001  0b1011   0b1011  0b1101   0b1101  0b1111   0b1111  0b10001  0b10001\n0b10011 0b10011  0b10101 0b10101  0b10111 0b10111  0b11001  0b11001  0b11011\n0b11011 0b11101  0b11101 0b11111  0b11111\n</code></pre>\nand al ,0xfe\n<pre><code>for i in range(0,32,1):\n...     al = i\n...     print(bin(al & 0xfe) , end = \"\\t\")\n...\n    0b0      0b0     0b10    0b10    0b100   0b100   0b110   \n  0b110   0b1000   0b1000  0b1010   0b1010  0b1100  0b1100  \n 0b1110   0b1110  0b10000 0b10000  0b10010 0b10010 0b10100 \n0b10100  0b10110  0b10110 0b11000  0b11000 0b11010 0b11010 \n0b11100  0b11100 0b11110 0b11110\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Oct 5, 2023 at 19:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}