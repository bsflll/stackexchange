{
    "title": "What is this assembly doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20843/what-is-this-assembly-doing",
    "content": "I wrote a very basic crackme to learn how assembly works.\nEven though I wrote it myself, I am having some trouble understanding a few pieces of the assembly:\n\nWhat I know up to now is: <pre><code>[rbp+rax+input_buffer]</code></pre> is basically <pre><code>input_buffer[rax]</code></pre>, xor'ing two of the same registers resets them and that's about it (apart from the very basic stuff like add, mov, inc).\nI specifically don't understand what <pre><code>movsx ..</code></pre> and <pre><code>add ecx, 0FFF..</code></pre> is doing.\nThe input_buffer is filled with <pre><code>_fgets</code></pre>. I'm intentionally not saying a working input to see if you can figure it out (it shouldn't be hard anyways).\nA proper input would be <pre><code>0123456789\n</code></pre>, note that I discard the newline via <pre><code>strcspn</code></pre>.\n",
    "votes": "0",
    "answers": 1,
    "views": "155",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "G. Ramistella",
    "time": "Mar 10, 2019 at 20:57",
    "comments": [],
    "answers_data": [
        {
            "content": "I guess the original code is something like:\n<pre><code>char input_buffer[...];\n// ...\nint c = input_buffer[i];\n</code></pre>\nSince the variable <pre><code>c</code></pre> is a <pre><code>int</code></pre> and <pre><code>input_buffer</code></pre> is a <pre><code>char[]</code></pre>, your compiler has to promote the read <pre><code>char</code></pre> as a <pre><code>int</code></pre>. That's why you have the <pre><code>movsx</code></pre> instruction. It will read the current character and sign extend it, so it'll fit to a <pre><code>int</code></pre>.\nAbout the <pre><code>add</code></pre>, it's common for a compiler to encode a <pre><code>sub dst, imm</code></pre> as <pre><code>add dst, -imm</code></pre>, if you negate <pre><code>0xffffffd0</code></pre> (SHIFT - in IDA), you'll obtain <pre><code>-0x30</code></pre>. This is how you convert the ASCII digit into a integer.\n",
            "votes": "3",
            "user": "wisk",
            "time": "Mar 10, 2019 at 22:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}