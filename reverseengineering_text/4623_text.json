{
    "title": "How to determine which thread implementation binary compiled with",
    "link": "https://reverseengineering.stackexchange.com/questions/4623/how-to-determine-which-thread-implementation-binary-compiled-with",
    "content": "Is it possible to determine if a binary  (static or shared and not stripped) is compiled with Linuxthreads or NPTL implementation ?\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "linux",
        "elf",
        "libraries"
    ],
    "user": "user3155036",
    "time": "Jun 16, 2014 at 23:24",
    "comments": [
        {
            "user": "yaspr",
            "text": "Sorry for the half published message ... I don't know what happened but the rest of it was cut and I noticed it later ...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are many ways, but I'll cite two. Usually, a binary file, if not stripped,  contains symbols (function names, variable names, ...). These symbols are usually used to ease debugging and are stored using a certain format, DWARF for example.\nThe first method is to disassemble the binary and look for specific threading libraries related symbols. For example : \n<pre><code>    objdump -D ./YOUR_PROGRAM | grep -i thread \n</code></pre>\nThe second one is to hijack the threading library function calls using your own library and LD_PRELOAD. The concept is fairly simple, you write a library (.so) in which you implement the functions which you want to check for, let's say pthread_create or pthread_join, and reimplement it this way :\n<pre><code>    int pthread_create(pthread_t *thread, \n                       const pthread_attr_t *attr,\n                       void *(*start_routine) (void *), \n                       void *arg)\n    {\n          int ret;\n          static void *(*ext_pthread_create)(pthread *, \n                                             const pthread_attr_t *,\n                                             void *,\n                                             void *);\n\n          ext_pthread_create = dlsym(\"RTLD_NEXT\", pthread_create);\n          ret = ext_pthread_create(thread, attr, start_routine, arg);\n\n          printf(\"pthread_create called !\n\");\n\n          return ret;\n     }\n</code></pre>\nAll you have to do after compiling and testing your library is call yor program this way :\n<pre><code>    LD_PRELOAD=hooklib.so ./YOUR_PROGRAM PARAMS\n</code></pre>\nIf the function is called, you'll see the printf message on the standard output.\n",
            "votes": "2",
            "user": "yaspr",
            "time": "Aug 27, 2016 at 19:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3155036",
                    "text": "<span class=\"comment-copy\">If I cannot execute the binary since it is different architecture objdump -D ./YOUR_PROGRAM | grep -i thread  is the only way ? What can I expect as output depending on implementation used ?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Yes, the <code>objdump</code> way will work ... but it's not very classy though. One, it necessitates a non stripped binary, and two you need to check for all threading library symbols (Pthread, OpenMP, Boost, ...). I believe the hook mechanism is much classier, but of course it requires a lot more code and the ability to run he binary (which can be done either by using a virtual machine, an emulator, ...). Honestly, most of the ways I have in mind need the binary to be run. The only static approach I can think of now is the <code>grep</code> one.</span>",
                    "time": null
                },
                {
                    "user": "user3155036",
                    "text": "<span class=\"comment-copy\">So what strings to look for to find out implementation? I tried one unstripped file and got lots of things with pthread which does not indicate neccesarily anything ?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Well, you should look for function names that create threads : <code>pthread_create</code> &amp; <code>pthread_join</code> if it's the Pthread library. If <code>grep</code> finds something, well, you hit the jackpot. If grep outputs nothing, then there's no Pthreads calls. Note : you should research the other threading libraries in case &amp; also test the <code>clone()</code> syscall.</span>",
                    "time": null
                },
                {
                    "user": "user3155036",
                    "text": "<span class=\"comment-copy\">You might have misunderstood my question maybe. I was not asking to determine if software is written with threading . But determine which thread implementation. Linuxthreads or NPTL which are similar but different things.</span>",
                    "time": null
                }
            ]
        }
    ]
}