{
    "title": "LEA assembly instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/15538/lea-assembly-instruction",
    "content": "I am reading through the 'Practical Malware Analysis' book and got to page 74 which says:\n\n<pre><code>lea ebx, [eax*4+4]</code></pre> is the functional equivalent of <pre><code>ebx = (eax+1)* 5</code></pre>\n  where <pre><code>eax</code></pre> is a number.\n\nAs of my understanding, <pre><code>lea ebx, [eax*4 + 4]</code></pre> should multiply <pre><code>eax</code></pre> value by 4, add 4 to it and then store it back in <pre><code>ebx</code></pre>, which is different than <pre><code>(eax+1) * 5</code></pre>.\nIs that a typo? Or I got things wrong?\nI think it should be: <pre><code>ebx = (eax+1) * 4</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "Ahmad Kouraiem",
    "time": "Jun 13, 2017 at 12:30",
    "comments": [],
    "answers_data": [
        {
            "content": "This is a typo. The instruction <pre><code>lea ebx,[eax*4+4]</code></pre> will set <pre><code>ebx</code></pre> to <pre><code>4*eax+4</code></pre> or <pre><code>4*(eax+1)</code></pre>. \nI believe I found a revision online of that book which has:\n\nFor example, it is common to see an instruction such as lea ebx, [eax*5+5], where eax is a number, rather than a memory address. This instruction is the functional equivalent of ebx = (eax+1)*5, ...\n\nso it seems as though it was corrected at some point. Note that, technically, <pre><code>lea ebx, [eax*5+5]</code></pre> is really implemented as <pre><code>lea ebx, [eax*4+eax+5]</code></pre>.\n",
            "votes": "6",
            "user": "cimarron",
            "time": "Jun 13, 2017 at 4:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ahmad Kouraiem",
                    "text": "<span class=\"comment-copy\">The question is:   lea ebx, [eax*4+4] is the same as ebx = (eax+1)*5</span>",
                    "time": null
                }
            ]
        }
    ]
}