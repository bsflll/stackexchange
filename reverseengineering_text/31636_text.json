{
    "title": "IDA Processor Module: How to maintain register values if instruction doesn't modify them directly (ex. STATUS register, FLAGS, etc.)?",
    "link": "https://reverseengineering.stackexchange.com/questions/31636/ida-processor-module-how-to-maintain-register-values-if-instruction-doesnt-mod",
    "content": "I'm developing a processor module for a specific microcontroller. There are cases, when instruction modifies some register (lets call it STATUS) indirectly. By indirectly, I mean, that STATUS is not one of the operands for this instruction. As an example, let's take <pre><code>rlc</code></pre> instruction:\n<pre><code>rlc A\n</code></pre>\nIt basically rotates A left with Carry (C). C is part of STATUS register (just one bit). I cannot modify anything within the <pre><code>ev_ana_insn</code></pre> callback as per IDA Pro documentation, so it looks like that:\n<pre><code>def ev_ana_insn(self, insn):\n    if b == 0x67:  # rlc\n        insn.size = 1\n        insn.itype = self.itype_rlc\n        insn.Op1.type = ida_ua.o_reg\n        insn.Op1.reg = self.ireg_A\n</code></pre>\nThat's fine. But in <pre><code>ev_emu_insn</code></pre> I don't understand how and where should I modify the <pre><code>STATUS</code></pre> register, since it is missing (and shouldn't be there in the first place) from <pre><code>insn</code></pre>.\nI had a couple of thoughts, but they are not good enough in my opinion:\n\nUse <pre><code>auxprefs</code></pre> in <pre><code>insn</code></pre> or <pre><code>specvals</code></pre> in <pre><code>Op1</code></pre> and save the information about needed changes to the <pre><code>STATUS</code></pre> register. But still, I need to make these changes and track them somewhere during the analysis and emulation stages.\nMap the <pre><code>STATUS</code></pre> register to RAM segment and modify it there. Here as example of such an implementation: https://github.com/Treeki/TM155-tools/blob/master/ida-module/ht68fb560.py#L470, but I don't know if it's the correct approach.\nPut another <pre><code>Op2</code></pre> in my <pre><code>insn</code></pre>, assign it to the <pre><code>STATUS</code></pre> register and modify it during the emulation stage. However, this approach breaks the whole disassembler, since it expects 2 operands, but really there is only 1. I can play around with that during the output stage, but I don't think that it is a correct approach and is more like a hack.\n\nSo, any input is much appreciated.\n",
    "votes": "3",
    "answers": 0,
    "views": "181",
    "tags": [
        "ida",
        "idapython",
        "ida-plugin",
        "idapro-sdk"
    ],
    "user": "none32",
    "time": "Mar 8, 2023 at 9:50",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "Do you actually need to do that? What negative effects are you experiencing by not modelling the changes to the <pre><code>STATUS</code></pre> register? This is common on other processors also, such as <pre><code>adc</code></pre> and <pre><code>sbb</code></pre> on x86, and I think the dependency and modifications to <pre><code>eflags</code></pre> are simply not modelled.\n",
            "time": null
        },
        {
            "user": "none32",
            "text": "Actually, I do. Some instructions with completely the same opcode have different mode of operation on operands (byte or word) based on flag in STATUS register. So, by not tracking this flag I don't know which instruction to display.\n",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "Is it possible to track the value of the <pre><code>STATUS</code></pre> register statically? Suppose <pre><code>A</code></pre> is loaded with the result of calling a random number generator before invoking some instruction that modifies the <pre><code>STATUS</code></pre> register based upon the contents of <pre><code>A</code></pre>. How would you model the update to the <pre><code>STATUS</code></pre> register?\n",
            "time": null
        },
        {
            "user": "none32",
            "text": "Result of A is irrelevant. The only thing that could modify the STATUS register is a set of specific instructions, independent of the operand(s) contents. Also, it is being initialized during the RESET event to the predefined value. Therefore, it could be statically tracked.\n",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "Suppose every possible instruction that could modify the <pre><code>STATUS</code></pre> register was in a <pre><code>switch</code></pre> statement, whose <pre><code>switch</code></pre> expression was the result of calling a randon number generator. How would you track the value of the <pre><code>STATUS</code></pre> register? (I realize this is probably not what's happening in your binary, but the questions are intended to be Socratic.)\n",
            "time": null
        }
    ],
    "answers_data": []
}