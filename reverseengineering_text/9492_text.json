{
    "title": "Prefix REPNE instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/9492/prefix-repne-instruction",
    "content": "I am analyzing a piece of malware that has a sequence of instructions with \n\nprefix repne\n\n<pre><code>0047094C  |.  8B0D 34935E00       |MOV ECX,DWORD PTR DS:[5E9334]\n00470952  |.  F2:                 |PREFIX REPNE:\n00470953  |.  0F2AC1              |CVTPI2PS XMM0,MM1\n00470956  |.  F2:                 |PREFIX REPNE:\n00470957  |.  0F100D 88905E00     |MOVUPS XMM1,DQWORD PTR DS:[5E9088]\n0047095E  |.  F2:                 |PREFIX REPNE:\n0047095F  |.  0F5CC8              |SUBPS XMM1,XMM0\n00470962  |.  F2:                 |PREFIX REPNE:\n00470963  |.  0F2CD1              |CVTTPS2PI MM2,XMM1\n00470966  |.  8915 5C925E00       |MOV DWORD PTR DS:[5E925C],EDX\n</code></pre>\nwhat's strange however is when Im debugging, the instructions immediately following the prefix repne are skipped (when single stepped). My instincts tell me it is just junk code but I want to make sure that something else isn't happening as I have to rewrite this particular function (there's plenty more sse instructions that are used)\nIf anyone can shed some light, I'd appreciate it. Thank you\n",
    "votes": "3",
    "answers": 1,
    "views": "583",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "gandolf",
    "time": "Jul 29, 2015 at 13:39",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "<pre><code>repne</code></pre> is mnemonic for \"repeat while not equal\" - so if the zero flag is set when execution arrives at that address, the instruction won't get executed. If the zero flag is clear, it may get executed up to n times with n being the value of <pre><code>ecx</code></pre>; if the instruction may change the zero flag, there may be less repetitions. So, if you can be sure <pre><code>ZF</code></pre> is set before your instructions execute, this is junk code, but the instructions not getting executed in a single debugger trace doesn't mean this is always the case.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The prefixes are not junk - they are an override for the original instruction, to produce a new instruction.  Your disassembler is apparently not aware of SSE2 instructions, and separates them instead.  The disassembly should read like this:\n<pre><code>\n0047094C  |.  8B0D 34935E00       |MOV ECX,DWORD PTR DS:[5E9334]\n00470952  |.  F20F2AC1            |CVTSI2SD XMM0,ECX\n00470956  |.  F20F100D 88905E00   |MOVSD XMM1,DQWORD PTR DS:[5E9088]\n0047095E  |.  F20F5CC8            |SUBSD XMM1,XMM0\n00470962  |.  F20F2CD1            |CVTTSD2SI EDX,XMM1\n00470966  |.  8915 5C925E00       |MOV DWORD PTR DS:[5E925C],EDX</code></pre>\n",
            "votes": "6",
            "user": "peter ferrie",
            "time": "Jul 29, 2015 at 16:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "gandolf",
                    "text": "<span class=\"comment-copy\">you're absolutely right! I have been so busy looking too deeply that I hadn't even noticed that IDA Pro correctly disassembles the instructions. Olly and other debuggers seem to fall into the disassemblers which are not SSE2 aware and separating the prefix. Thank you!</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">fwiw odbg201 and windbg both disassembles the stream correctly</span>",
                    "time": null
                }
            ]
        }
    ]
}