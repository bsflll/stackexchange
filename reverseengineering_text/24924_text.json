{
    "title": "How to decompile \"call eax\" in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/24924/how-to-decompile-call-eax-in-ida-pro",
    "content": "I know that there is a similar question but the answers didn't provide any fix for that problem.\nI am decompiling a .dll file, and I have found out the subroutine that I needed, but it's throwing a \"call analysis failed\" at line <pre><code>call eax</code></pre>.\nMy question is: Can I properly decompile the subroutine with this <pre><code>call eax</code></pre> line, or can I change it to something else, or simply ignore it? Working in ASM is really tough because I need to take out the code itself, not patch, and manually converting assembly code into pseudocode will be really hard to do.\n",
    "votes": "2",
    "answers": 2,
    "views": "755",
    "tags": [
        "ida",
        "assembly",
        "dll",
        "dll-injection"
    ],
    "user": "xxd",
    "time": "May 5, 2020 at 11:45",
    "comments": [],
    "answers_data": [
        {
            "content": "You can take one of the following approaches:\n\n<pre><code>call eax</code></pre> usually means there is an indirect call. try to find what and where <pre><code>eax</code></pre> is defined. Maybe only by looking at it, you will found the problem. If you find the origin but not understand the problem, you can try to patch it, to something like: <pre><code>mov eax, <known_function_address></code></pre>\nMaybe you can change a function signature to overcome the issue like it described here.\nYou can try to use a different decompiler, when the most notable one is <pre><code>Ghidra</code></pre>.\n",
            "votes": "2",
            "user": "macro_controller",
            "time": "May 5, 2020 at 12:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "xxd",
                    "text": "<span class=\"comment-copy\">Thanks, I'll try to use Ghidra. EDIT: Yes, it worked!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This problem is not unique to <pre><code>call eax</code></pre> but potentially any indirect call or a call to a function with wrong type information. The possible causes and solutions are described in the Hex-Rays Decompiler manual.\nOne common cause is the stack adjustment of the call not being correctly detected by IDA (e.g. the called function is stdcall with arguments but IDA detected that stack change is 0). This can be fixed by specifying the correct stack change value via the Alt+K shortcut (4 for each push is a good rule of thumb).\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 6, 2020 at 11:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}