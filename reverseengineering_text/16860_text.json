{
    "title": "x64 Linux reverse-engineering - understanding asm code and inject eax",
    "link": "https://reverseengineering.stackexchange.com/questions/16860/x64-linux-reverse-engineering-understanding-asm-code-and-inject-eax",
    "content": "In a rootme exercise, i'm trying to bypass the control impleted to protect a \"read\" function. You'll find enclosed the code i'm refering to. As you may understand, i can inject data (with limitations) in rax (with the limitation that ax be under 100h due to the previous instruction:\n<pre><code>cmp ax, 100h\n</code></pre>\nI know I can change eax value before entering that part of the programe (part of the programe before the asm instructions enclosed). However, I have the feeling that the following instruction prevent from reading the ah part of the eax register. \n<pre><code>movzx eax, word ptr [rax]\n</code></pre>\nWould you have any idea if it would be possible to write into the upper bits of <pre><code>rax</code></pre> so that it be taken into account by the read function?\nThanks a lot! Sorry if all is not very clear, I can try to re-explain if needed.\n",
    "votes": "0",
    "answers": 1,
    "views": "387",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Dec 5, 2017 at 20:24",
    "comments": [],
    "answers_data": [
        {
            "content": "Did you mean the upper bits of <pre><code>rax</code></pre> rather than <pre><code>ah</code></pre>? There seems to be a vulnerability (presumably created by compiling and not handling the 32-bit to 64-bit conversion correctly).\nIf the address stored at <pre><code>[rbp+username_buffer_input]</code></pre> is beyond the 4 GiB space, then the upper 32-bits will contain a non-zero value in register <pre><code>rax</code></pre>. The following code can then lead to a very large nbytes value and potential for a buffer overflow.\n<pre><code>mov rax, [rbp+username_buffer_input]    ; upper 32-bits of rax may not be zero\nmovzx eax, word ptr [rax]               ; doesn't clear out upper 32-bits when reading from an address > 4 GiB\nmovzx eax, ax                           ; doesn't clear out upper 32-bits\n...\nmov rdx, rax                            ; uh-oh - nbytes can have a non-zero value in the upper 32-bits of rax carried over from above\n</code></pre>\n",
            "votes": "2",
            "user": "cimarron",
            "time": "Nov 29, 2017 at 4:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David Labay",
                    "text": "<span class=\"comment-copy\">Thanks for your precious answer! You're right, I meant the upper bits of <code>rax</code> so that the upper bits of <code>rdx</code> don't get zero-ed. I do not really understand your statement on line 2: \"doesn't clear out upper 32-bits when reading from an address &gt; 4 GiB\".  When debugging with <code>gdb</code>, I can see that upper bits of <code>rax</code> are cleared when performing the first movzx while <code>rax</code> valued previously <code>0x7fffffffe410</code> so that it is a bit confusing...</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">Let's say <code>rax</code> was <code>0x7fffffffe410</code> and the 16-bit value at that address was <code>0x1234</code>. After the <code>movzx eax, word ptr [rax]</code> instruction,  <code>eax</code> would be set to <code>0x00001234</code> but <code>rax</code> would be <code>0x00007fff00001234</code></span>",
                    "time": null
                },
                {
                    "user": "David Labay",
                    "text": "<span class=\"comment-copy\">I understand your idea   I tried earlier to monitor this behaviour through <code>gdb</code>, but it ended with a different result:   I set a breakpoint on the <code>mov rax, [rbp+username_buffer_input]</code> line and performed:    <code>i r rax</code>: <code>rax            0x7fffffffe410   140737488348176</code> <code>x/s $rax</code>: <code>0x7fffffffe410: \"\\003\"</code>    Ok, this is fine until here, however, after a step in <code>si</code> i performed a <code>i r eax rax</code> resulting in <code>eax  0x3  3</code> <code>rax  0x3  3</code>.  So the question would be: would you know a compilation option or system option which could forced the behaviour you were describing earlier?</span>",
                    "time": null
                },
                {
                    "user": "David Labay",
                    "text": "<span class=\"comment-copy\">any more ideas?</span>",
                    "time": null
                }
            ]
        }
    ]
}