{
    "title": "How to interpret this __ctype_b based predicate?",
    "link": "https://reverseengineering.stackexchange.com/questions/31175/how-to-interpret-this-ctype-b-based-predicate",
    "content": "I am getting this simplified function from the decomplication results of Ghidra, and I am having a hard time interpreting what the predicate would evaluate to since I do not have access to <pre><code>__ctype_b</code></pre> structure, in other words, what is this predicate indicating (eg. no blank spaces, digits only, ect...) ?\n<pre><code>int myFunc(char myChar) {\n\n    if ((*(unsigned short*)((char)myChar * 2 + __ctype_b) >> 6 & 1) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "118",
    "tags": [
        "disassembly",
        "decompilation",
        "c",
        "ghidra"
    ],
    "user": "Anis LOUNIS aka AnixPasBesoin",
    "time": "Nov 25, 2022 at 14:04",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>_ctype</code></pre> is a common name for an array with flags used for implementing the <pre><code>is...</code></pre> family of C runtime function-like macros from <pre><code>ctype.h</code></pre> (<pre><code>isupper</code></pre>, <pre><code>islower</code></pre>, <pre><code>isalpha</code></pre>, <pre><code>isdigit</code></pre> and so on). For example, see this file from early glibc:\n<pre><code>CONST unsigned short int __ctype_b_C[] =\n  {\n    0,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl,\n    _IScntrl|_ISspace|_ISblank,\n</code></pre>\nIf we assume that __ctype_b is an array of shorts, the function seems to be equivalent to:\n<pre><code>return (__ctype_b[myChar]>>6 & 1)==0;\n</code></pre>\nor\n<pre><code>return (__ctype_b[myChar]& (1<<6))==0;\n</code></pre>\nIf the bits in the table use standard values, <pre><code>1<<6</code></pre> corresponds to the <pre><code>_ISpunct</code></pre> flag, so the function seems to return  <pre><code>!ispunct(myChar)</code></pre>;\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 25, 2022 at 21:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}