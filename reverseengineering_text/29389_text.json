{
    "title": "DetourAttach breaks with Illegal Instruction 0xC000001D",
    "link": "https://reverseengineering.stackexchange.com/questions/29389/detourattach-breaks-with-illegal-instruction-0xc000001d",
    "content": "I am trying to detour a function using <pre><code>DetourAttach()</code></pre> in the following fashion:\n<pre><code>hooks::logDebug(\"swresample-3Proxy.log\", fmt::format(\"Try to attach hook. Function {:p}, hook {:p}.\",\n    *hook.first, hook.second));\nwriteProtectedMemory(hook.first, hook.second);\nauto result = DetourAttach(hook.first, hook.second);\n</code></pre>\nWhere hook.first = <pre><code>0x00007ff69f119ea0 {Gladius.exe!gladius::Game::main(int,char * *,char * *)} {0x8b4820ec83485340}    void * *</code></pre>\nhook.second = <pre><code>0x00007ff818f51ef5 {swresample-3.dll!hooks::gamemainHooked(struct gladius::Game *,int,char * *,char * *)}    void *</code></pre>\nBut the result comes with the following error:\n\nException thrown at 0x00007FF69F119EA1 in Gladius.exe: 0xC000001D:\nIllegal Instruction.\n\nAnd the question marks (see the screenshot) where the jump instruction supposed to be.\n\nWould appreciate some help in resolving this...\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "function-hooking",
        "dll-injection",
        "api-reversing"
    ],
    "user": "Irbis77",
    "time": "Oct 10, 2021 at 17:47",
    "comments": [],
    "answers_data": [
        {
            "content": "Fixed with using EasyHook instead of Detours. I.e. replaced this piece of code:\n<pre><code>writeProtectedMemory(hook.first, hook.second);\nauto result = DetourAttach(hook.first, hook.second);\n</code></pre>\nwith this:\n<pre><code>HOOK_TRACE_INFO hHook = { NULL }; // keep track of our hook\nNTSTATUS result = LhInstallHook(\n    hook.first,\n    hook.second,\n    NULL,\n    &hHook);\n\nULONG ACLEntries[1] = { 0 };\nLhSetInclusiveACL(ACLEntries, 1, &hHook);\n</code></pre>\nWhere hook.first = <pre><code>0x00007ff69f119ea0 {Gladius.exe!gladius::Game::main(int,char * *,char * *)} {0x8b4820ec83485340}    void * *</code></pre>\nAnd hook.second = <pre><code>0x00007ff818f51ef5 {swresample-3.dll!hooks::gamemainHooked(struct gladius::Game *,int,char * *,char * *)}    void *</code></pre>\nNow the app correctly jumps to the Hooked function.\nP.S. Don't know what is the deal with DetoursAttach() for x64. I have compiled it specifically for that environment.\nMay be it doesn't know of how to pass the hook between the threads... Will check that option later.\n",
            "votes": "1",
            "user": "Irbis77",
            "time": "Oct 11, 2021 at 18:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}