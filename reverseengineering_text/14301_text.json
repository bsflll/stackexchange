{
    "title": "VirtualProtect a function isn't working.",
    "link": "https://reverseengineering.stackexchange.com/questions/14301/virtualprotect-a-function-isnt-working",
    "content": "I've been trying to make some modding tools for quake live by reverse engineering, and I have this function. I rebased my program to 0x0, and did pretty much everything to set me up. However, when I call virtualprotect it doesn't work. I still get access violations when I inject the DLL. All helps appreciated!\n\nAbove, I have the address for the value. Heres how I'm calling virtualprotect:\n<pre><code>typedef void(__cdecl* Com_printf)(const char* msg, ...);\n\nnamespace QLIVESDK \n{\n    void Com_Printf(const char* a1, ...)\n    {\n        DWORD old;\n        VirtualProtect((PVOID)(GetModuleHandle(\"quakelive_steam.exe\") + 0x000C9860), sizeof(a1), PAGE_EXECUTE_READWRITE, &old);\n        Com_printf com_print = (Com_printf)0x000C9860;\n        return com_print(a1);\n    }\n}\n</code></pre>\nhttps://github.com/id-Software/Quake-III-Arena/blob/dbe4ddb10315479fc00086f08e25d968b4b43c49/code/qcommon/common.c#L143\nHeres the function I'm trying to reverse. And heres how I'm calling it:\n<pre><code>void Init()\n{\n    QLIVESDK::Com_Printf(\"hello, world!\n\"); //test this shit\n}\n\nBOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)\n{\n    switch (fdwReason)\n    {\n    case DLL_PROCESS_ATTACH:\n        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)Init, 0, 0, 0);\n        break;\n    }\n    return 1;\n}\n</code></pre>\nAs you can see, its not working. I still get access violations. Thanks! All helps appreciated! :)\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++"
    ],
    "user": "Verideth",
    "time": "Jan 1, 2017 at 3:35",
    "comments": [
        {
            "user": "Fewmitz",
            "text": "This isn't an issue with VirtualProtect. You're VirtualProtect-ing quakelive_steam.exe+0x000C9860 but then using just 0x000C9860 for the function pointer that you call. I would assume VirtualProtect worked to make the code writable and then the access violation is because address 0xc9860 isn't executable. Additionally in general you should check the return value and GetLastError codes for functions you think aren't working.\n",
            "time": null
        },
        {
            "user": "Verideth",
            "text": "So @Fewmitz , is it because its possible the wrong address?\n",
            "time": null
        },
        {
            "user": "Fewmitz",
            "text": "Yes. On Windows GetModuleHandle() doesn't return a handle; it returns an address to the module. So you used VirtualProtect on offset 0x000C9860 into quakelive_steam.exe but your com_print variable is JUST address 0x000C9860, which isn't what you VirtualProtect'd and probably not code (if it's there at all)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Thanks to @Fewmitz I managed to fix the problem.\nTurns out com_print should = (Com_Printf)GetModuleHandle(\"quakelive_steam.exe\") + 0x000C9860;\nThanks so much!\n",
            "votes": "-1",
            "user": "Verideth",
            "time": "Jan 4, 2017 at 15:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}