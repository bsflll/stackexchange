{
    "title": "Calling internal functions via dll injection - runtime error",
    "link": "https://reverseengineering.stackexchange.com/questions/16813/calling-internal-functions-via-dll-injection-runtime-error",
    "content": "I am trying to modify closed source game client that works with my game server. The purpose of that is being able to add new graphical elements into the client.\nI have read a lot of tutorials about dll injection and in the end theres the code I made:\n<pre><code>// dllmain.cpp : Defines the entry point for the DLL application.\n#include \"stdafx.h\"\n#include <windows.h>\n\n#define BASE_ADDR 0x00400000\n\nDWORD WINAPI MyThread(LPVOID);\nDWORD g_threadID;\nHMODULE g_hModule;\nvoid __stdcall CallFunction(int&, int&, int&, int&, int&, int&, int&, int&);\nvoid __stdcall typeText(int&, const char*);\n\n\n//must be at least one function to prevent crash\n__declspec(dllexport) int APIENTRY Func(LPVOID lpParam)\n{//empty function\n    return 0;\n}\n\n\n//main func\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n\n    DWORD myThreadID;\n    HANDLE myHandle;\n\n\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        g_hModule = hModule;\n        DisableThreadLibraryCalls(hModule);\n        CreateThread(NULL, NULL, &MyThread, NULL, NULL, &g_threadID);\n        break;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n\nDWORD WINAPI MyThread(LPVOID)\n{\n    int i1 = 1;\n    int i2 = 10;\n    int i3 = 10;\n    int i4 = 200;\n    int i5 = 200;\n    int i6 = 60;\n    int i7 = 0;\n    int i8 = 0;\n\n\n    while (true)\n    {\n        if (GetAsyncKeyState(VK_F3) & 1) //Set F3 as hotkey\n        {\n            // call GUI window (do it before login)\n            CallFunction(i1, i2, i3, i4, i5, i6, i7, i8);\n\n\n            //display text from char (do it after login)\n            //typeText(i1, \"halo halo\");\n        }\n        else if (GetAsyncKeyState(VK_F4) & 1)\n            break;\n        Sleep(100);\n    }\n    FreeLibraryAndExitThread(g_hModule, 0);\n\n\n    /* another way to call function?\n    typedef void tipo(int& p1, int& p2, int& p3, int& p4, int& p5, int& p6, int& p7, int& p8);\n    void(*func)(int& p1, int& p2, int& p3, int& p4, int& p5, int& p6, int& p7, int& p8);\n    func = (tipo*)0x490C60;\n    func(i1, i2, i3, i4, i5, i6, i7, i8);\n    */\n\n    return 0;\n}\n\n//0x004067C0, pattern = (int, char*)\nvoid __stdcall typeText(int& type, const char* text)\n{\n    typedef void(__stdcall *pFunctionAddress)(int&, const char*);\n    pFunctionAddress pMySecretFunction = (pFunctionAddress)(0x004067C0);\n    pMySecretFunction(type, text);\n}\n\n//const DWORD DrawSkinExAddress =0x490C60;.\n//typedef void TF_DRAWSKIN(int nSurface, int X, int Y, int W, int H, int SkinId, int dX, int dY);\nvoid __stdcall CallFunction(int& p1, int& p2, int& p3, int& p4, int& p5, int& p6, int& p7, int& p8)\n{\n    typedef void(__stdcall *pFunctionAddress)(int&, int&, int&, int&, int&, int&, int&, int&);\n    pFunctionAddress pMySecretFunction = (pFunctionAddress)(0x490C60);\n    pMySecretFunction(p1,p2,p3,p4,p5,p6,p7,p8);\n}\n</code></pre>\nI can successfully inject it and run the client. When I try to call definied there function (Press F3 to do it), the client crashes. the runtime error shows up (picture presenting error: https://i.sstatic.net/8sL1m.jpg ) and client crashes. I think theres problem with the method I call the functions. The addresses and variables are fine I think because if I try to do it on another random addresses the client just crash normally (app not responding).\nI have tried replacing stdcall with cdecl but nothing has changed.\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "dll-injection",
        "call"
    ],
    "user": "Piodo",
    "time": "Nov 22, 2017 at 11:31",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "Where do you get the address of function you want to call? It shouldn't be hard-code.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The address I used was wrong :|\n",
            "votes": "-1",
            "user": "Piodo",
            "time": "Dec 3, 2017 at 20:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}