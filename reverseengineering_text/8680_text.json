{
    "title": "Correct reassembly of Java bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/8680/correct-reassembly-of-java-bytecode",
    "content": "I've been reverse engineering the Yikyak application, and I came across this function\nOne particular function is used in order to verify the integrity of the API call. The decompiler failed to figure out what was going on with the bytecode (provided below), so I wrote in what I thought was the byte code equivalent (this is my first time working with Java bytecode, my apologies for any errors).\nOne of the things I was stuck on is figuring out how to determine the value referred to in the constant pool. \n<pre><code>/* Error */\n/* public static String a(String paramString, byte[] paramArrayOfByte)\n* Generates a hash to verify the integrity of the API call based on the time (param1 as String) and YikYak.uniqueMD5Hash.getBytes()\n*/\npublic static String hashApiCall(String paramString, byte[] paramArrayOfByte)\n{\n    // Possible values for hash algo: HmacMD5, HmacSHA1, HmacSHA256, HmacSHA384, HmacSHA512\n    SecretKeySpec localSecretKeySpec = new SecretKeySpec(paramArrayOfByte, (String hash algo)ldc 179);\n    Mac localMac = Mac.getInstance((String hash aglo)ldc 179);\n    localMac.init(localSecretKeySpec);\n    localMac.doFinal(byte[] ?);\n    String str2 = Base64.encodeToString(?);\n    String str3 = str2.trim();\n    return str3;\n\n    // Byte code:\n    //   0: new 177 javax/crypto/spec/SecretKeySpec\n    //   3: dup\n    //   4: aload_1\n    //   5: ldc 179\n    //   7: invokespecial 182   javax/crypto/spec/SecretKeySpec:<init>  ([BLjava/lang/String;)V\n    //   10: astore_2\n    //   11: ldc 179\n    //   13: invokestatic 188   javax/crypto/Mac:getInstance    (Ljava/lang/String;)Ljavax/crypto/Mac;\n    //   16: astore 8\n    //   18: aload 8\n    //   20: aload_2\n    //   21: invokevirtual 192  javax/crypto/Mac:init   (Ljava/security/Key;)V\n    //   24: aload 8\n    //   26: aload_0\n    //   27: invokevirtual 136  java/lang/String:getBytes   ()[B\n    //   30: invokevirtual 196  javax/crypto/Mac:doFinal    ([B)[B\n    //   33: iconst_0\n    //   34: invokestatic 202   android/util/Base64:encodeToString  ([BI)Ljava/lang/String;\n    //   37: astore 9\n    //   39: aload 9\n    //   41: invokevirtual 205  java/lang/String:trim   ()Ljava/lang/String;\n    //   44: astore 12\n    //   46: aload 12\n    //   48: astore 4\n    //   50: aload 4\n    //   52: areturn\n    //   53: astore 6\n    //   55: aconst_null\n    //   56: astore 4\n    //   58: aload 6\n    //   60: astore 7\n    //   62: aload 7\n    //   64: invokevirtual 208  java/security/NoSuchAlgorithmException:printStackTrace  ()V\n    //   67: goto -17 -> 50\n    //   70: astore_3\n    //   71: aconst_null\n    //   72: astore 4\n    //   74: aload_3\n    //   75: astore 5\n    //   77: aload 5\n    //   79: invokevirtual 209  java/security/InvalidKeyException:printStackTrace   ()V\n    //   82: goto -32 -> 50\n    //   85: astore 11\n    //   87: aload 9\n    //   89: astore 4\n    //   91: aload 11\n    //   93: astore 5\n    //   95: goto -18 -> 77\n    //   98: astore 10\n    //   100: aload 9\n    //   102: astore 4\n    //   104: aload 10\n    //   106: astore 7\n    //   108: goto -46 -> 62\n    // Local variable table:\n    //   start  length  slot    name    signature\n    //   0  111 0   paramString String\n    //   0  111 1   paramArrayOfByte    byte[]\n    //   10 11  2   localSecretKeySpec  javax.crypto.spec.SecretKeySpec\n    //   70 5   3   localInvalidKeyException1   java.security.InvalidKeyException\n    //   48 55  4   str1    String\n    //   75 19  5   localObject1    Object\n    //   53 6   6   localNoSuchAlgorithmException1  java.security.NoSuchAlgorithmException\n    //   60 47  7   localObject2    Object\n    //   16 9   8   localMac    javax.crypto.Mac\n    //   37 64  9   str2    String\n    //   98 7   10  localNoSuchAlgorithmException2  java.security.NoSuchAlgorithmException\n    //   85 7   11  localInvalidKeyException2   java.security.InvalidKeyException\n    //   44 3   12  str3    String\n    // Exception table:\n    //   from   to  target  type\n    //   11 39  53  java/security/NoSuchAlgorithmException\n    //   11 39  70  java/security/InvalidKeyException\n    //   39 46  85  java/security/InvalidKeyException\n    //   39 46  98  java/security/NoSuchAlgorithmException\n}\n</code></pre>\nIs there a way to determine what values are in the constant pool (specifically, 179) in order to determine the hashing algorithm that's being used?\nThanks in advance!\n",
    "votes": "2",
    "answers": 1,
    "views": "723",
    "tags": [
        "java",
        "byte-code"
    ],
    "user": "dreadiscool",
    "time": "Apr 11, 2015 at 2:34",
    "comments": [],
    "answers_data": [
        {
            "content": "First off, have you tried using a better decompiler? I'd recommend Krakatau, since it's specifically designed for handling obfuscated applications (disclosure: I wrote it). Apart from Krakatau, the best decompiler I know of is Procyon.\nSecond, you can see the constant pool by passing the right option to the disassembler. If you're using the Krakatau disassembler, you'd just pass -cpool. You can also use javap in which case you'd pass -v. However, javap is not designed for reverse engineering and has numerous issues, so you're better off with Krakatau for serious disassembly.\n",
            "votes": "1",
            "user": "Antimony",
            "time": "Apr 11, 2015 at 3:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "dreadiscool",
                    "text": "<span class=\"comment-copy\">I suppose I can chain this with dex2jar in order to get the source code</span>",
                    "time": null
                },
                {
                    "user": "dreadiscool",
                    "text": "<span class=\"comment-copy\">Based on the Github description, I thought that Krakatau was able to decompile bytecode without needing all of the referenced libraries? I can't decompile things due to the classloader not finding things like java.lang.Object, and when I do run it with all errors disabled, all I get are the function names (with no content in them). Is there something I've done wrong?</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@user It needs to know the referenced classes for stuff like determining which classes are interfaces and what is a subclass of what. You need to pass a path to the library on the commandline with the -path option. The core classes are in rt.jar which comes with Java. For an Android application, you'll typically need android.jar too. You may need others depending on what the application uses.</span>",
                    "time": null
                }
            ]
        }
    ]
}