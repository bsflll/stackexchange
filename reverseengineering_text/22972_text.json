{
    "title": "Python self decryption script, as mean of obfuscation",
    "link": "https://reverseengineering.stackexchange.com/questions/22972/python-self-decryption-script-as-mean-of-obfuscation",
    "content": "I have a software with an embedded python interpreter. The software can open upon startup a given <pre><code>.py</code></pre> script and execute it. Let's assume that in my python environment I can't open other files, and I can't use external tools like <pre><code>Cython</code></pre> \nI want to obfuscate the script. My only demand is that the <pre><code>payload</code></pre> part of the file (my custom business logic) could not be opened in a text editor and plain-text read. \nI could imagine the flow of the script will be de-obfuscation/decryption of a payload, that resides within the <pre><code>.py</code></pre> file as the first step and then executing it. \nI can store within the script any encryption key, and I don't care that the decryption part will be visible and that it can be easily reproduced.\nAny ideas how can I make that happen?\n",
    "votes": "1",
    "answers": 1,
    "views": "412",
    "tags": [
        "encryption",
        "python",
        "obfuscation"
    ],
    "user": "macro_controller",
    "time": "Jan 12, 2020 at 13:13",
    "comments": [
        {
            "user": "Kennet Celeste",
            "text": "so basically you are writing a malware and you want people to help you.\n",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "If I wanted to write a malware, I wouldn't write it in python, and I would really care about the chance of it to be decrypted.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I did something similar on the past, here is the idea you need to carry:\n\nYou create the python script that you want to execute and obfuscate:\n<pre><code>print('Some string')\n</code></pre>\nAnother script opens the previous script, encrypts the content and <pre><code>base64</code></pre> the encryption, and finally put in a variable like:\n<pre><code>text = \"cHJpbnQoJ1NvbWUgc3RyaW5nJyk=\"\n</code></pre>\nOn another python file, you stick the text variable and a routine for decryption and decode the base64.\nUse the method <pre><code>eval()</code></pre> for execute the previous decrypted and decoded string.\n\nThis is not perfect but at least you have something to play with and explore.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jan 13, 2020 at 17:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}