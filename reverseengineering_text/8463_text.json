{
    "title": "Unpacking and dumping using ollydump",
    "link": "https://reverseengineering.stackexchange.com/questions/8463/unpacking-and-dumping-using-ollydump",
    "content": "I am trying to learn how to unpack a malware. I am trying this with ollydbg. However, when I try to dump the unpacked using ollydump plugin. It prompts the error \"Bad DOS signature!!\". Could someone help me with this?\nWhat I found so far is:\n\nMalware is calling VirtualAlloc (allocated region is readable/writable and executable/)\nI kept a hardware breakpoint on the allocated address\nwhen the control reached that memory, I ran ollydump. It throws \"Bad DOS Signature\"\n\nAny pointers to unpack this malware?\n",
    "votes": "3",
    "answers": 4,
    "views": "13k",
    "tags": [
        "ollydbg",
        "malware",
        "unpacking",
        "dumping"
    ],
    "user": "aMa",
    "time": "Mar 14, 2015 at 12:39",
    "comments": [
        {
            "user": "user2823000",
            "text": "If the section you're trying to dump does not look like a regular PE file (\"MZ\", \"PE\", etc), you most likely didn't hit the unpacked file yet.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The malware could destroy its PE Headers at runtime so you might want to look for a tool that is capable of handling those cases.\nScylla should do the job.\n",
            "votes": "2",
            "user": "Skyk√ºff",
            "time": "Dec 2, 2015 at 16:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "if you dont wanna unpack exe manually;\n1. use peid to identify packing type.  -- download peid \n\n\nsearch in the same site for that packing type(in picture its aspack 2.001). you'll see tutorial for it. \nsearch google for aspack 2.001 unpacker .\nmaybe  even you get an app to unpack it automatically\n\n\npeid tutorial -   tuts4you.com/download.php?view.398\n",
            "votes": "1",
            "user": "bh_earth0",
            "time": "Sep 29, 2015 at 8:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "As there are little data about the unpack flow, here is the general approach you should follow in most packed malwares. This will probably be more complicated if we are talking about some custom and sophisticated packers.\nI also strongly suggest to avoid various automatic unpacking plugins as they leaving you without the understanding of the process.\nSo in most cases unpackers (in terms of unpack process) will try to:\n\nvalidate their payload\nallocate new memory to store the unpacked code (data). This will (in most cases) be done with the help of <pre><code>VirtualAlloc(Ex)</code></pre>\nunpack routing will take the obfuscated code and write the clean one to the allocated space\nat the end of the process transfer control to the payload\n\nWhat you should try to do:\n\nplace the HW breakpoint on the <pre><code>VirtualAlloc(Ex)</code></pre> as there are packers which will check the preamble for the BP placements. Press <pre><code>execute till ret</code></pre> and at the <pre><code>EAX</code></pre> you will get the allocated memory area address\nright click on the <pre><code>EAX</code></pre> to follow the address in <pre><code>Dump</code></pre>\nplace the <pre><code>Memory On Write</code></pre> breakpoint or <pre><code>HW on write</code></pre> breakpoint which should get you to the actual unpack routine\nanalyze the flow of the unpack routing to place another breakpoint at the end of the unpack process\nonce the unpacking is done, right click on the <pre><code>Dump</code></pre> windows to save the unpacked payload to the file.\n\nIn your case, the payload will probably will not be the clean <pre><code>MZ</code></pre> file or in contrary, the unpack routing intentionally had crippled the payload.\nProbably this will be an iterative process as you also need to validate that the unpacked payload is actually the code. Try to use \n\n<pre><code>Trace</code></pre>\nin addition place <pre><code>HW on Execute</code></pre> at the beginning of the unpacked payload\ndump unpacking routine / area and open it in IDA to understand (find) if there are any control transferring process near by.\n\nHave Fun!\n",
            "votes": "1",
            "user": "PhoeniX",
            "time": "May 31, 2016 at 6:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Asked originally by @IhorBats and commented by me since the user doesn't have sufficient reputation: \"Thanks for description how to extract payload, do you know any book/articles that can help me actually do that?\"</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">I would suggest to go over Practical Malware Analysis book. In addition, you can check <a href=\"http://opensecuritytraining.info/Welcome.html\" rel=\"nofollow noreferrer\">opensecuritytraining.info/Welcome.html</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If it is as standard packer there are tools that will unpack it.  If you are looking to learn how to manually unpack or if it is not a standard unpacker then you can proceed.  It does not look like it has finished unpacking.  You may have to keep going to get to a valid \"original\" entry point.\n",
            "votes": "0",
            "user": "Milhous",
            "time": "Sep 30, 2015 at 15:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}