{
    "title": "why does dalvik remove invocations during optimisation?",
    "link": "https://reverseengineering.stackexchange.com/questions/29262/why-does-dalvik-remove-invocations-during-optimisation",
    "content": "This is original smali code of a classes.dex method before installation\n<pre><code>.method public static createAutoMatchCriteria(IIJ)Landroid/os/Bundle;\n    .registers 6\n\n    new-instance v0, Landroid/os/Bundle;\n\n    invoke-direct {v0}, Landroid/os/Bundle;-><init>()V\n\n    const-string v1, \"min_automatch_players\"\n\n    invoke-virtual {v0, v1, p0}, Landroid/os/Bundle;->putInt(Ljava/lang/String;I)V\n\n    const-string p0, \"max_automatch_players\"\n\n    invoke-virtual {v0, p0, p1}, Landroid/os/Bundle;->putInt(Ljava/lang/String;I)V\n\n    const-string p0, \"exclusive_bit_mask\"\n\n    invoke-virtual {v0, p0, p2, p3}, Landroid/os/Bundle;->putLong(Ljava/lang/String;J)V\n\n    return-object v0\n.end method\n</code></pre>\nThis is edited smali code of a classes.dex method before installation\n<pre><code>.method public static createAutoMatchCriteria(IIJ)Landroid/os/Bundle;\n    .registers 6\n\n    new-instance v0, Landroid/os/Bundle;\n\n    invoke-direct {v0}, Landroid/os/Bundle;-><init>()V\n\n    const-string v1, \"min_automatch_players\"\n\n    const/4 p0, 0x2\n\n    invoke-virtual {v0, v1, p0}, Landroid/os/Bundle;->putInt(Ljava/lang/String;I)V\n\n    const-string p0, \"max_automatch_players\"\n\n    const/16 p1, 0x14\n\n    invoke-virtual {v0, p0, p1}, Landroid/os/Bundle;->putInt(Ljava/lang/String;I)V\n\n    const-string p0, \"exclusive_bit_mask\"\n\n    invoke-virtual {v0, p0, p2, p3}, Landroid/os/Bundle;->putLong(Ljava/lang/String;J)V\n\n    return-object v0\n.end method\n</code></pre>\nThis is the same method but of the classes.dex extracted from dalvik cache.\n<pre><code>.method public static createAutomatchCriteria(IIJ)Landroid/os/Bundle\n    .registers 6\n\nnew-instance v0 Landroid/os/Bundle;\n\ninvoke-direct {v0} Landroid/os/Bundle;-><init>()V\n\nconst-string v1 \"min_automatch_players\"\n\nconst/4 v2 0x2 \n\nconst-string v2 \"max_automatch_players\"\n\nconst/16 v3 0x14\n\nconst-string v2 \"exclusive_bit_mask\"\n\nreturn-object v0\n\n</code></pre>\nWhere did the virtual invocations after those integer constants go?\nAm i missing something? Or does dalvik store those invocations somewhere else?\n",
    "votes": "0",
    "answers": 2,
    "views": "83",
    "tags": [
        "decompilation",
        "android",
        "byte-code",
        "dalvik"
    ],
    "user": "Silent",
    "time": "Sep 8, 2021 at 0:56",
    "comments": [
        {
            "user": "Silent",
            "text": "i guess you are right. I used the same tool which i had used to convert the original dex file to smali. Sorry but do you know an example of an optimised dex command?\n",
            "time": null
        },
        {
            "user": "Silent",
            "text": "i got the optimised dex file from android 4.4.4\n",
            "time": null
        },
        {
            "user": "Silent",
            "text": "One more question does the oat file of ART runtime have the same smali code as the dex files. I mean since you stated that bytecode before android 6.0 was hard to decode is the smali code the same or similar in the optimised files?\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "oat file are ELF files. They contain mostly compiled native code. As far as I remember oat files have the original non-optimized DEX file(s) embedded inside but I am not sure if this is still the case for modern Android versions.\n",
            "time": null
        },
        {
            "user": "Silent",
            "text": "Thank you so much you have been of much great help and a source of knowledge for me. I wish i could upvote you comments but i cant see the option.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As far as I know the Dalvik cache does not contain plain dex files, but instead contains optimized (odex) files.\nOdex files use an extended op code set and I would assume the dex-to-smali decompiler you have used doe snot support those extended op codes and simply ignores them. That is the reason the virtual invocations are not present in the Smali code generated form the odex file.\nYou should be able to verify this by viewing the dex file in a Smali decompiler that display the raw dex byte code hex values. You can try e.g. latest unstable version of Jadx (newer than v1.2.0), switch to Smali view for the class and enable \"Show Dalvik Bytecode\". Then you should be able to see what byte code values were not decoded (not sure how good Jadx handles odex files, but internally it also bases on smali/baksmali library).\nIn your comments you wrote that the used device is running Android 4.4.4. As documented in the Smali/Baksmali project on Github the odex file and instruction format before Android 6 is not supported by common Smali decompiler, as far as I know because it had not been standardized so every Android device can have it's own variant. The optimized dex files were designed to be used by anything else than the Dalvik VM present on the device itself.\n",
            "votes": "2",
            "user": "Robert",
            "time": "Sep 13, 2021 at 7:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Silent",
                    "text": "<span class=\"comment-copy\">Actually i just used a normal simpler dex viewer and editor app on android. The app doesnt have the libraries you stated or any i have seen before. I will try another decompiler and see if the same results will occur. Thanks for the answer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "A class I extracted from Dalvik cache (<pre><code>classes.dex</code></pre>):\n<pre><code>if-ne v0 v9 :label_7\nconst/4 v0 0 \nlabel_7:\nconst/4 v1 0 \nconst/4 v2 -1 \nif-ne v0 v2 :label_14\nreturn v1\nlabel_14:\nconst/4 v3 0 \nconst/4 v4 -1 \nlabel_16:\nif-eq v0 v2 :label_91\nif-ge v3 v5 :label_91\naget v5 v5 v0\nif-ne v5 v6 :label_81\nif-ne v0 v1 :label_41\naget v1 v1 v0\ngoto :label_47\nlabel_41:\naget v3 v1 v0\naput v3 v1 v4\nlabel_47:\nif-eqz v10 :label_54\nlabel_54:\nadd-int/lit8 v10 v10 -1\nadd-int/lit8 v9 v9 -1\naput v2 v9 v0\nif-eqz v9 :label_76\nlabel_76:\naget v9 v9 v0\nreturn v9\nlabel_81:\naget v4 v4 v0\nadd-int/lit8 v3 v3 1\nmove v7 v4\nmove v4 v0\nmove v0 v7\ngoto :label_16\nlabel_91:\nreturn v1\n</code></pre>\nExactly the same class extracted from the ODEX file of the app (not from the Dalvik cache):\n<pre><code>iget-object v0 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->e:Landroidx/constraintlayout/solver/SolverVariable;\nif-ne v0 v9 :label_7\nconst/4 v0 0 \niput-object v0 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->e:Landroidx/constraintlayout/solver/SolverVariable;\nlabel_7:\niget v0 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->i:I\nconst/4 v1 0 \nconst/4 v2 -1 \nif-ne v0 v2 :label_14\nreturn v1\nlabel_14:\nconst/4 v3 0 \nconst/4 v4 -1 \nlabel_16:\nif-eq v0 v2 :label_91\niget v5 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->a:I\nif-ge v3 v5 :label_91\niget-object v5 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->f:[I\naget v5 v5 v0\niget v6 v9 Landroidx/constraintlayout/solver/SolverVariable;->a:I\nif-ne v5 v6 :label_81\niget v1 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->i:I\nif-ne v0 v1 :label_41\niget-object v1 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->g:[I\naget v1 v1 v0\niput v1 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->i:I\ngoto :label_47\nlabel_41:\niget-object v1 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->g:[I\naget v3 v1 v0\naput v3 v1 v4\nlabel_47:\nif-eqz v10 :label_54\niget-object v10 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->b:Landroidx/constraintlayout/solver/ArrayRow;\ninvoke-virtual {v9,v10} Landroidx/constraintlayout/solver/SolverVariable;->b(Landroidx/constraintlayout/solver/ArrayRow;)V\nlabel_54:\niget v10 v9 Landroidx/constraintlayout/solver/SolverVariable;->i:I\nadd-int/lit8 v10 v10 -1\niput v10 v9 Landroidx/constraintlayout/solver/SolverVariable;->i:I\niget v9 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->a:I\nadd-int/lit8 v9 v9 -1\niput v9 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->a:I\niget-object v9 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->f:[I\naput v2 v9 v0\niget-boolean v9 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->k:Z\nif-eqz v9 :label_76\niput v0 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->j:I\nlabel_76:\niget-object v9 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->h:[F\naget v9 v9 v0\nreturn v9\nlabel_81:\niget-object v4 v8 Landroidx/constraintlayout/solver/ArrayLinkedVariables;->g:[I\naget v4 v4 v0\nadd-int/lit8 v3 v3 1\nmove v7 v4\nmove v4 v0\nmove v0 v7\ngoto :label_16\nlabel_91:\nreturn v1\n</code></pre>\nTurns out that the app displayed correctly everything.\nAs you can see, the ODEX file contains the invocations I was looking for. It seems like the ODEX file is identical to the <pre><code>classes.dex</code></pre> in the APK. I also tested and found that when the application used a <pre><code>classes.dex</code></pre> (not <pre><code>.odex</code></pre>), a process called <pre><code>dexopt</code></pre> runs before the app opens, and in my opinion I think that it fetches those invocations and maybe more data from the <pre><code>classes.dex</code></pre> inside the APK.\nThat's why I noticed that the odexed app launched faster than when it was deodexed. From many articles I read, they stated that ODEX files are like a copy of the app, and when launching, no further data needs to be extracted from the application.\nAnyway, maybe this question was irrelevant since DVM is becoming obsolete (or has become) as from Android 5 ART has replaced it.\nBy the way, this <pre><code>.dex</code></pre> file is from a different app from the one I used in the question.\n",
            "votes": "0",
            "user": "MarianD",
            "time": "Oct 29, 2021 at 12:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}