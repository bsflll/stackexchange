{
    "title": "Why are there absolute jmps in disassembly of position independent code?",
    "link": "https://reverseengineering.stackexchange.com/questions/17931/why-are-there-absolute-jmps-in-disassembly-of-position-independent-code",
    "content": "I'm playing around with Hopper and am looking at the disassembly of a binary that <pre><code>otool</code></pre> reports as having the <pre><code>PIE</code></pre> flag.\nIt's my understanding that as a result, the executable base address will be randomized, and so jumps have to be relative to the current instruction pointer.\nHowever, looking at the output of this PIE binary in Hopper, I see absolute jumps like so:\n<pre><code>00000001000021df    mov      rbx, rax\n00000001000021e2    test     rbx, rbx\n00000001000021e5    je       0x1000021c0\n</code></pre>\nIs Hopper just translating the relative jumps into an absolute jump assuming the text segment is loaded at the standard virtual address of <pre><code>0x100000000</code></pre>, or am I missing something conceptual with regards to how position independent executables work?\n",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "assembly",
        "osx",
        "mach-o",
        "macos",
        "pie"
    ],
    "user": "1110101001",
    "time": "Apr 9, 2018 at 21:14",
    "comments": [
        {
            "user": "Megabeets",
            "text": "Mind to attach the corresponding opcodes? The hexbytes which represent the instructions.\n",
            "time": null
        },
        {
            "user": "1110101001",
            "text": "Hopper reports that the instruction at 0x1000021e5 is encoded as <pre><code>74 D9</code></pre> @Megabeets . I see that this corresponds to a relative jump according to the intel reference. I'm guessing then that Hopper is just converting the relative jump into its equivalent for easy viewing?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As mentioned in your comment, the corresponding opcode to <pre><code>je 0x1000021c0</code></pre> is <pre><code>74 D9</code></pre>. Thus, there's no doubt that you are facing a relative JMP. Hopper is translating the relative JMP so it'll be easier for a reverse engineer to understand the flow of the code without having to calculate addresses.\nI'll demonstrate what Hopper does with a simple example using radare2 (although you can use your favorite tool to do the same).\nFirst, we'll open radare2 with 10000 empty bytes allocated in <pre><code>rwx</code></pre> permissions so we'll have a \"sandbox\" to play in:\n<pre><code>$ r2 malloc://10000\n</code></pre>\nSince our base address is <pre><code>0x00000000</code></pre> we'll seek (go to) to <pre><code>0x000021e5</code></pre> so it'll be easier for us to see the relative jump:\n<pre><code>[0x00000000]> s 0x21e5\n[0x000021e5]>\n</code></pre>\nSee how our current address changed to <pre><code>0x21e5</code></pre>? good !  \nNow, let's write our hex-bytes (<pre><code>74 d9</code></pre>) in the current address:\n<pre><code>[0x000021e5]> wx 74d9\n</code></pre>\nAnd disassemble one instruction in this address:\n<pre><code>[0x000021e5]> pd 1\n        ╰─< 0x000021e5      74d9           je 0x21c0\n</code></pre>\nAs you can see, radare2, as Hopper does, translated the jump in address<pre><code>0x????21e5</code></pre> to <pre><code>je 0x????21c0</code></pre>.\n",
            "votes": "5",
            "user": "Megabeets",
            "time": "Apr 9, 2018 at 5:36",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "well megabeets was faster \nhere is how to check it in windbg \n<pre><code>0:000> ? .\nEvaluate expression: 1999570342 = 772f05a6\n0:000> EB . 74 D9\n0:000> U . L1\nntdll!LdrpDoDebuggerBreak+0x2c:\n772f05a6 74d9            je      ntdll!LdrpDoDebuggerBreak+0x7 (772f0581)\n0:000> ? 772F0581 - .\nEvaluate expression: -37 = ffffffdb\n0:000> ? 21E5-21C0\nEvaluate expression: 37 = 00000025\n0:000>\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 9, 2018 at 5:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}