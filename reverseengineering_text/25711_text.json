{
    "title": "Can't CVE-2019-2215 on Android: \"Unable to handle kernel paging request at virtual address\"",
    "link": "https://reverseengineering.stackexchange.com/questions/25711/cant-cve-2019-2215-on-android-unable-to-handle-kernel-paging-request-at-virtu",
    "content": "I'm playing with Android and I'm trying to gain r/w access to the whole memory using CVE-2019-2215. Long story short, you UAF a <pre><code>binder_thread</code></pre> object and you can read from/write to kernel space.\nThe first step, getting <pre><code>task_struct</code></pre>, works as expected but overwriting <pre><code>addr_limit</code></pre> doesn't. The error <pre><code>Unable to handle kernel paging request at virtual address</code></pre> and the fact that other people on other devices can perform this makes me think there's something else behind that problem.\nI get this kernel panic:\n<pre><code>[  400.258967] Unable to handle kernel paging request at virtual address fffffffffffffffe\n[  400.258997] pgd = ffffffe55194e000\n[  400.259007] [fffffffffffffffe] *pgd=00000000d194f003, *pud=00000000d194f003, *pmd=0000000000000000\n[  400.259146] ------------[ cut here ]------------\n[  400.259152] Kernel BUG at ffffff80e9b9cbc4 [verbose debug info unavailable]\n[  400.259159] Internal error: Oops - BUG: 96000005 [#1] PREEMPT SMP\n[  400.259167] Modules linked in: wlan(O) exfat(O)\n[  400.259203] CPU: 2 PID: 6877 Comm: cve-2019-2215 Tainted: G        W  O    4.4.78-perf+ #1\n[  400.259210] Hardware name: Qualcomm Technologies, Inc. SDM 636 PM660 + PM660L MTP E7S (DT)\n[  400.259217] task: ffffffe5f84d0d80 ti: ffffffe551910000 task.ti: fffffffffffffffe\n[  400.259235] PC is at n_tty_write+0x168/0x3e8\n[  400.259242] LR is at n_tty_write+0xa4/0x3e8\n[  400.259248] pc : [<ffffff80e9b9cbc4>] lr : [<ffffff80e9b9cb00>] pstate: 60400145\n[  400.259253] sp : ffffffe551913c70\n[  400.259258] x29: ffffffe551913c70 x28: ffffffe551910000 \n[  400.259268] x27: ffffffe51f344230 x26: ffffff80ea687000 \n[  400.259278] x25: ffffffe5dcdda200 x24: ffffffe51f341c00 \n[  400.259287] x23: ffffffe51f3440d8 x22: ffffff80e96eb000 \n[  400.259297] x21: ffffffe51f341c00 x20: 0000000000000008 \n[  400.259312] x19: ffffffe51f344000 x18: fca83dec72c82c59 \n[  400.259325] x17: 00000070696c35c8 x16: ffffff80e97cd198 \n[  400.259334] x15: 0000007fc1ea0b58 x14: 00000000ffffffff \n[  400.259344] x13: 0000000000000000 x12: 0000007fc1ea0bb8 \n[  400.259353] x11: 0000000000000000 x10: ffffff80ebe9b848 \n[  400.259362] x9 : 0000000000000018 x8 : ffffff80ebe9b000 \n[  400.259371] x7 : ffffffdb80000000 x6 : ffffffe51f341c08 \n[  400.259380] x5 : ffffffe51f341c08 x4 : 0000000000000000 \n[  400.259391] x3 : 0000000000000140 x2 : 00000000000000b8 \n[  400.259409] x1 : ffffffe551910000 x0 : fffffffffffffffe \n[  400.259420] \n[  400.259420] PC: 0xffffff80e9b9cb84:\n[  400.259426] cb84  b4000061 aa1303e0 d63f0020 b40011b4 b9404320 375811a0 aa1703e0 97ed6d39\n[  400.259456] cba4  910203a0 52800021 92f00002 97ed3cda aa1703e0 94275ce6 f9400b80 f9400400\n[  400.259482] cbc4  f9400000 37000f60 aa1903e0 97ffeadc 35000f40 f9410e60 b4000060 b941e800\n[  400.259509] cbe4  34000ec0 b9413660 36000b00 b4fffc74 f9414276 91400ac4 910ac09a aa1a03e0\n[  400.259540] \n[  400.259540] LR: 0xffffff80e9b9cac0:\n[  400.259546] cac0  b9413c02 f9004bb5 f9003fa1 37400262 91036277 9108c27b aa1703e0 f000575a\n[  400.259577] cae0  aa1803f5 94275d1b aa1303e0 d538411c 97fffeda aa1b03e0 910203a1 97ed3b74\n[  400.259603] cb00  b0005500 91302000 f9003ba0 9108c340 f90037a0 1400002a f9401721 f9400c22\n[  400.259629] cb20  90ffffe1 9139c021 eb01005f 54fffd20 97fff30a 93407c1a b4fffcda 140000b4\n[  400.259657] \n[  400.259657] SP: 0xffffffe551913c30:\n[  400.259663] 3c30  e9b9cb00 ffffff80 51913c70 ffffffe5 e9b9cbc4 ffffff80 60400145 00000000\n[  400.259691] 3c50  1f344000 ffffffe5 00000008 00000000 00000000 00000080 e9b9cae8 ffffff80\n[  400.259718] 3c70  51913d20 ffffffe5 e9b98ddc ffffff80 1f344000 ffffffe5 00000000 00000000\n[  400.259757] 3c90  00000008 00000000 00000008 00000000 dcdda200 ffffffe5 69230000 00000070\n[  400.259782] \n[  400.259788] Process cve-2019-2215 (pid: 6877, stack limit = 0xffffffe551910028)\n[  400.259794] Call trace:\n[  400.259803] Exception stack(0xffffffe551913a80 to 0xffffffe551913bb0)\n[  400.259812] 3a80: ffffffe51f344000 0000008000000000 0000000082b33000 ffffff80e9b9cbc4\n[  400.259821] 3aa0: 0000000060400145 ffffffe5f4005000 ffffffe551913ad0 ffffff80ea460dcc\n[  400.259829] 3ac0: ffffffe551913b10 ffffff80e97ba680 0000000000000000 ffffffe5f9403c00\n[  400.259837] 3ae0: ffffffe551910000 0000000000000000 ffffffbe57b3d700 000000000004cbc2\n[  400.259845] 3b00: ffffffe551910000 0000000000000000 ffffffe551913c30 ffffff80e97ba950\n[  400.259852] 3b20: ffffffbe57b3d700 ffffffe5ecf5d800 ffffffe551910000 953d5989c78ca9ec\n[  400.259859] Unable to handle kernel NULL pointer dereference at virtual address 00000022\n[  400.259863] pgd = ffffffe5619b1000\n[  400.259867] [00000022] *pgd=00000000e409f003, *pud=00000000e409f003[  400.259872] 3b40: fffffffffffffffe ffffffe551910000 00000000000000b8 0000000000000140\n[  400.259877] 3b60: 0000000000000000 ffffffe51f341c08 ffffffe51f341c08 ffffffdb80000000\n[  400.259882] 3b80: ffffff80ebe9b000 0000000000000018 ffffff80ebe9b848 0000000000000000\n[  400.259886] 3ba0: 0000007fc1ea0bb8 0000000000000000\n[  400.259895] [<ffffff80e9b9cbc4>] n_tty_write+0x168/0x3e8\n[  400.259901] [<ffffff80e9b98ddc>] tty_write+0x1d4/0x268\n[  400.259913] [<ffffff80e97cbf30>] __vfs_write+0x38/0xfc\n[  400.259920] [<ffffff80e97cc848>] vfs_write+0xac/0x16c\n[  400.259926] [<ffffff80e97cd1ec>] SyS_write+0x54/0xa4\n[  400.259936] [<ffffff80e9683170>] el0_svc_naked+0x24/0x28\n[  400.259942] Code: aa1703e0 94275ce6 f9400b80 f9400400 (f9400000) \n</code></pre>\nI tried changing <pre><code>0xfffffffffffffffe</code></pre> to something lower but that didn't work. I also looked at <pre><code>n_tty_write</code></pre>.\nIt looks like the crash comes from something in this loop: https://elixir.bootlin.com/linux/v4.4.78/source/drivers/tty/n_tty.c#L2352\nThe <pre><code>n_tty_write+0x168</code></pre> corresponds to this instruction(<pre><code>859cbc4</code></pre> asm left, C line <pre><code>45</code></pre> from Ghidra right) \nI tried digging further but it's taking a huge amount of time, I'd really appreciate any tips from more experienced people.\n",
    "votes": "0",
    "answers": 1,
    "views": "272",
    "tags": [
        "android"
    ],
    "user": "PeterHerb",
    "time": "Aug 20, 2020 at 3:06",
    "comments": [],
    "answers_data": [
        {
            "content": "It looks like that you need to recheck your task_struct and thread_info offsets and the offset you're writing the addr_limit to is wrong.\nI think that the panic happens in <pre><code>if (signal_pending(current)) {</code></pre> in original source.\nHere is what you can do for checking the offsets:\n\ndownload the corresponding kernel source, compile it and use pahole (git, example usage) for relevant structures. This will show you the exact offset of addr_limit that you need.\nIf you have /proc/config.gz on your phone, you can pull it, unpack it and see all config constants used for building the kernel. This can help you to check offsets manually.\n",
            "votes": "1",
            "user": "w s",
            "time": "Aug 22, 2020 at 8:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}