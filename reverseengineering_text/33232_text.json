{
    "title": "How do I perform unit testing for Ghidra scripts?",
    "link": "https://reverseengineering.stackexchange.com/questions/33232/how-do-i-perform-unit-testing-for-ghidra-scripts",
    "content": "I am a trying to develop a Ghidra script but am having trouble testing the script out. Are there any frameworks or automated processes that allows me to easily write and run test cases for a Ghidra script?\nCurrently I am writing small programs and running my script on them manually on Ghidra but it doesn't seem scalable.\n",
    "votes": "4",
    "answers": 1,
    "views": "61",
    "tags": [
        "ghidra"
    ],
    "user": "ghidranoob",
    "time": "Sep 25, 2024 at 13:51",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "Uhm... What are you doing in/with the script? I mean, it doesn't matter if you are using IDA or Ghidra or whatever other tool, what you want to test is if it did the task you wanted, and for that, there are multiple unit testing tools that might work depending on your needs. In any case, you have a specific section for Ghidra's testing documented here: github.com/NationalSecurityAgency/ghidra/blob/master/â€¦\n",
            "time": null
        },
        {
            "user": "ghidranoob",
            "text": "@joxeankoret Thanks for the reply! The script (written in java) I intend to develop just helps to search for certain logic within the disassembled code so while it can get pretty complicated depending on the logic that I want to search for. Do you have any examples of the unit testing tools that you mentioned?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I don't believe that there are any existing frameworks for this. Ghidra itself uses a set of unit tests and integration tests (here's an arbitrary example), but the setup for this does not appear in the release builds. If you wanted to use it, you would need to set up Ghidra for development and then write your tests to use that. It seems like that would be a lot of work just to check a few scripts and is probably only worthwhile for full-on extension development.\nIf you're just writing standalone scripts, the simplest way is probably to create expected output from running the script on a sample program and use the headless analyzer to run the script and compare the output. I do this in Github Actions checks for scripts in a Ghidra extension I maintain, and that has worked well. You will need to be careful about output that often changes with the version of Ghidra though, for example the list of defined functions after auto-analysis will have slight changes from version to version.\nHere's an example of what that would look like in a shell script. The awk invocation is a bit messy but necessary for isolation of the script output from other stuff printed during Ghidra's loading and analysis.\n<pre><code>$GHIDRA_INSTALL_DIR/support/analyzeHeadless ~/projects/ RubyDragonTest -import ./src/test/resources/bin/HelloGhidra.exe -postScript GhidraBasicsScriptRb.rb HeadlessTest -deleteProject | awk '/^INFO  SCRIPT:/{flag=1;next}/^INFO  /{flag=0}flag' > actual.txt\ndiff actual.txt src/test/resources/expected/GhidraBasicsScript.txt\n</code></pre>\n",
            "votes": "4",
            "user": "goatshriek",
            "time": "Sep 26, 2024 at 10:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}