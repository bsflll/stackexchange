{
    "title": "determine if 2 byte checksum is CRC-16 based",
    "link": "https://reverseengineering.stackexchange.com/questions/31726/determine-if-2-byte-checksum-is-crc-16-based",
    "content": "I have pairs of data / messages with what I believe to be CRC-16\nI know for a fact the bit order of each individual byte is reversed (at least in C# on x86 platform, I have to flip the binary around)\nCan someone help confirm if it is CRC or not?\nSample message pairs with valid checksums (I can create as many of these samples as needed)\nI can also create samples with less 00 bytes, i.e. more byte values instead of 00, and I can also create samples of a different length if needed.\nSample 1: FFFFFFFFFFFF /\n0100100A00000000000000000000FFFFFFFFFF72BE\nSample 2: 000000000000 /\n0100100A00000000000000000000FFFFFFFFFF2A3D\nSample 3: 000000000001 /\n0100100A00000000000000000000FFFFFFFFFF89F7\nSample 4: 000000000002 /\n0100100A00000000000000000000FFFFFFFFFF0864\nSample 5: 000000000003 /\n0100100A00000000000000000000FFFFFFFFFFABAE\nSample 6: 000000000004 /\n0100100A00000000000000000000FFFFFFFFFF9396\nSample 7: 000000000005 /\n0100100A00000000000000000000FFFFFFFFFF305C\nSample 8: 000000000006 /\n0100100A00000000000000000000FFFFFFFFFFB1CF\nI've experimented with CRC RevEng and SRP16 and crccalc.com with no luck so far.\n",
    "votes": "2",
    "answers": 1,
    "views": "281",
    "tags": [
        "crc",
        "checksum"
    ],
    "user": "HANGOBA",
    "time": "Mar 29, 2023 at 22:53",
    "comments": [
        {
            "user": "Rohit Gupta",
            "text": "How about a sample with all 0s\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You could try with CRC Beagle.\n",
            "votes": "3",
            "user": "Lo√Øc Damien",
            "time": "Apr 1, 2023 at 20:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "HANGOBA",
                    "text": "<span class=\"comment-copy\">Thanks, do you know off the top of your head if this accounts for both Byte order (Endianess) and Bit order (reflection) ?  I'm almost wondering if thats why I was coming up short with SRP16 even running it against XOR'd together \"purified\" sample message pairs, perhaps SRP16 does reflection (bit order) but not byte order</span>",
                    "time": null
                }
            ]
        }
    ]
}