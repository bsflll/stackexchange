{
    "title": "How can i start the RE process in radare2?(make changes to the registers) [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/17412/how-can-i-start-the-re-process-in-radare2make-changes-to-the-registers",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm an absolute newbie to reverse engineering. I have a 32bit lsb arm binary which I would like to reverse engineer using radare2. How should I begin ?\n",
    "votes": "0",
    "answers": 2,
    "views": "3k",
    "tags": [
        "arm",
        "radare2",
        "binary"
    ],
    "user": "user7083361",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "It's not clear exactly what are you asking for, so I'll start from the basic.\nReverse Engineering 101\nIf you don't have previous experience with assembly or reverse engineering I'd suggest you to start from there since you need to know the techniques before you should get to know the tools.\nYou can start learning from any source you find suitable for you. \n\nOur Community list of Books and Tutorials\nReverse Engineering for Beginners\n\nradare2 101\nThe recommended source to start learning about radare is the radare2 book\n\nIntroduction\n  This book aims to cover most usage aspects of radare2. A framework for reverse engineering and analyzing binaries\n\nYou can also check my Series of tutorials about radare2 which go through all the information you need to to to start reversing with radare2. You can check as well the radre2 wiki.\nI highly encourage you to begin from these sources. You'll find them helpful, I'm sure!\n\nNow, into a more specific answer. How to use it for reverse engineering? Here are the basic steps:\nInstallation\nRadare2’s development is pretty quick – the project evolves every day, therefore it’s recommended to use the current git version over the stable one. Sometimes the stable version is less stable than the current git version!\n<pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\nStatic Session\nTo open a basic static session (i.e without debugging) you should simply pass your program name to radare2:\n<pre><code>$ r2 ./program_name\n — Thank you for using radare2. Have a nice night!\n[0x08048370]> \n</code></pre>\nDebugging session\nTo debug using radare2 pass <pre><code>-d</code></pre>:\n<pre><code>$ r2 -d /program_name\nProcess with PID 6972 started...\n= attach 6972 6972\nbin.baddr 0x00400000\nUsing 0x400000\nasm.bits 64\n -- Execute a command on the visual prompt with cmd.vprompt\n[0x7fc6b4200c30]>\n</code></pre>\nMaking changes to the registers\nSince you specifically mentioned this question, you can modify the registers using the <pre><code>dr</code></pre> command and subcommands. Just execute <pre><code>dr?</code></pre> to get help about the command and its subcommands. If you want, for example, to change <pre><code>RAX</code></pre>, simply execute:\n<pre><code>[0x00400697]> dr rax\n0x00400697\n[0x00400697]> dr rax=0x41414141\n0x00400697 ->0x41414141\n[0x00400697]> dr rax\n0x41414141\n</code></pre>\n",
            "votes": "4",
            "user": "Megabeets",
            "time": "Feb 8, 2018 at 6:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "A workflow I typically use:\n<pre><code>$> radare2 -d /path/to/my/bin\n[some addr]> aaa\n[some addr]> afll\n[some addr]> db sym.main\n[some addr]> dc\n[main addr]> v!\n</code></pre>\nFrom here, you'll be dropped into visual mode and you can step through the binary via <pre><code>s</code></pre> and step over lines via <pre><code>S</code></pre>.\nWhat this sequence of commands does is:\n\nRuns various analysis tasks (which will be displayed as they're completed)\nLists functions in the binary (in verbose mode)\nSets a breakpoint at the <pre><code>main</code></pre> function (assuming it exists)\nContinues until this breakpoint is reached (i.e. the start of <pre><code>main</code></pre>)\nEnters visual mode\n\nOf course, this is just a particular workflow I happen to use. There are other commands that are useful for other things, for example:\n\n<pre><code>s sym.main</code></pre> - seeks to the address of the <pre><code>main</code></pre> function\n<pre><code>s 0xdeadbeef</code></pre> - we can pass any arbitrary address to seek\n<pre><code>pdf</code></pre> - displays the disassembly of the function you're currently in\n<pre><code>iM</code></pre> - displays the address of the program's entry point\n<pre><code>iZ</code></pre> - displays ASCII strings found within the binary\n<pre><code>aaaa</code></pre> - this runs an even more detailed analysis than <pre><code>aaa</code></pre> above (may take some time)\n<pre><code>VV</code></pre> - displays the control flow graph (CFG) of the current function (invaluble tool)\n<pre><code>dr rax</code></pre> - displays the contents of the <pre><code>rax</code></pre> register (obviously any register can be substituted here and you can even change the value via <pre><code>dr rax = 0x12</code></pre>)\n<pre><code>x @ 0xdeadbeef</code></pre> - examines memory at address <pre><code>0xdeadbeef</code></pre>\n<pre><code>? 0xdeadbeef</code></pre> - converts the number provided (<pre><code>0xdeadbeef</code></pre>) to various bases and formats\n\n\nThis is not a complete tutorial, but I certainly hope it helps you. Some resources I found extremely useful:\n\nIntroduction to Reverse Engineering with Radare2\nReverse Engineering with Radare2, Part 1\nifding/radare2-tutorial\n\nFull disclaimer: this following link is one of my own\n\nCrackerjack - Introduction and Puzzle A Solution (walkthrough using radare2 of a collection of crackmes I am making)\n",
            "votes": "1",
            "user": "jmcph4",
            "time": "Jun 24, 2020 at 2:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "xate",
                    "text": "<span class=\"comment-copy\"><code>iM</code> lists the address of the program's main function, <code>ie</code> is the entry point.</span>",
                    "time": null
                }
            ]
        }
    ]
}