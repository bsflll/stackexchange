{
    "title": "Understanding the logic behind decompiled code",
    "link": "https://reverseengineering.stackexchange.com/questions/31771/understanding-the-logic-behind-decompiled-code",
    "content": "Hi I was learning reverse engineering by doing some crackme(s) found online using IDA and x64dbg.\nI'm quite confused on the below decompiled code.\n<pre><code>bool Logic()\n{\n    char CODE[] = \"RAND_STRING\", *lpString1, *v13, v14;\n    char CONST_STRING1[] = \"XZULKBBXOK\";\n    char CONST_STRING3[] = \"ZXHYGKLQ9867WEPRCDSANMJBVFTU5342\";\n    int* v10 = CONST_STRING1;\n    int* a2 = CONST_STRING1;\n    int* v2 = a2;\n    int* a1 = CODE;\n    int v3;\n    char v4, v6;\n    char v7;\n    int v8;\n    char v9;\n    char v10;\n    char v11;\n    v3 = lstrlenA(CONST_STRING3);\n    if ( *a2 )\n    {\n        v4 = CONST_STRING3[0];\n        do\n        {\n            v6 = *a1;\n            if ( !*a1 )\n                break;\n            if ( v6 < 48 || v6 > 122 )\n            {\n                ++a1;\n            }\n            else\n            {\n                v7 = TO_UPPER(*a1);\n                v8 = 0;\n                if ( v4 )\n                {\n                    v9 = v4;\n                    do\n                    {\n                        if ( v9 == v7 )\n                        break;\n                        v9 = CONST_STRING3[++v8];\n                    }\n                    while ( v9 );\n                }\n                v10 = TO_UPPER(*v2);\n                if ( v10 % v3 != v8 )\n                return 0;\n                ++a1;\n                ++v2;\n            }\n        }\n        while ( *v2 );\n    }\n    return *v2 == 0;\n}\n</code></pre>\nBasically it checks whether the initial character of <pre><code>CODE</code></pre> falls inside <pre><code>CONST_STRING3</code></pre>, what puzzles me is the next condition following it\n<pre><code>if ( v10 % v3 != v8 )\nreturn 0;\n</code></pre>\nWhat does this code snippet mean? Why is modulus operation done between the ASCII value of first string in <pre><code>CONST_STRING1</code></pre> and <pre><code>strlen(CONST_STRING3)</code></pre> and then compared with the index upon the loop break?\nSome help to understand this is much appreciated.\nEDIT ---- Added <pre><code>TO_UPPER</code></pre> decompiled - code\n<pre><code>int __cdecl TO_UPPER(unsigned __int8 a1)\n{\n  int result; // eax\n\n  result = a1;\n  if ( (char)a1 >= 97 && (char)a1 <= 122 )\n    result = a1 - 32;\n  return result;\n}\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "147",
    "tags": [
        "ida",
        "x64dbg"
    ],
    "user": "Nimrod",
    "time": "Apr 13, 2023 at 12:25",
    "comments": [
        {
            "user": "blabb",
            "text": "is rand_string the pass_phrase  it appears to be checking if rand_string == result of this >>> for i in \"XZULKBBXOK\": ...     print(\"ZXHYGKLQ9867WEPRCDSANMJBVFTU5342\"[(ord(i)%0x20)-1])\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Are you sure <pre><code>TO_UPPER</code></pre>'s purpose is uppercasing? The strings are all in uppercase anyway and it seems like it returns an index from an iterator rather than a modified character.\nIf you take a look at <pre><code>v3</code></pre>, it's <pre><code>CONST_STRING3</code></pre>'s length:\n<pre><code>v3 = lstrlenA(CONST_STRING3);\n</code></pre>\nConditions of type index % length are a common pattern in decompiled code, they prevent index overflow in arrays - for instance if <pre><code>CONST_STRING1</code></pre> was longer than <pre><code>CONST_STRING3</code></pre>.\n<pre><code>v8</code></pre> is some index in <pre><code>CONST_STRING3</code></pre> while <pre><code>v10</code></pre> looks like the currently processed index of <pre><code>CONST_STRING1</code></pre>. The condition below could be interpreted as:\n<pre><code>if ( v10 % v3 != v8 )\nreturn 0;\n</code></pre>\nIf we're at different indexes of <pre><code>CONST_STRING1</code></pre> and <pre><code>CONST_STRING3</code></pre>, return false (likely to indicate processing failure).\nNote that the processing is not linear and the value of <pre><code>v8</code></pre> depends on <pre><code>CODE</code></pre>.\n",
            "votes": "2",
            "user": "mimak",
            "time": "Apr 13, 2023 at 9:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nimrod",
                    "text": "<span class=\"comment-copy\">Thanks @mimak for the answer, I've added in the decompiled code I found for  TO_UPPER, can you verify whether it returns the index or the modified character?</span>",
                    "time": null
                },
                {
                    "user": "mimak",
                    "text": "<span class=\"comment-copy\">Well it definitely does just that. I'm unsure about this function's purpose, however if you want to make it return true the easiest way to do that is to set <code>CONST_STRING1</code> to an empty string.</span>",
                    "time": null
                }
            ]
        }
    ]
}