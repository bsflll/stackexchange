{
    "title": "How do I reverse an exe packed with an unknown packer?",
    "link": "https://reverseengineering.stackexchange.com/questions/30934/how-do-i-reverse-an-exe-packed-with-an-unknown-packer",
    "content": "I got an assignment to analize an exe file with 97% entropy. It's obviously packed but I got no results from Protection Id or PEid about which packer it used...\nHow can I unpack it if it's possible? Or should I just throw it to ida and hope for the best? Everything I've found on the internet was either too complicated for me or used known packers. Sorry if this is an easy topic to understand, I'm new to this stuff. Every answer is appreciated!\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "c++",
        "static-analysis",
        "unpacking",
        "packers"
    ],
    "user": "beytrod",
    "time": "Sep 29, 2022 at 20:41",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "The short answer is to start debugging, at some point there will be an unconditional jump to the unpacked code, dump the binary at that point and fix it up. There are many unpacking tutorials available out there, don't be afraid to try and fail, that's part of learning.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You don't throw things at IDA and hope for the best and, as an analyst, you don't relay on automatic tools this much.\nThat's clearly a sign you need to start doing the heavy lifting.\nA packer is simply a binary, so you proceed as you would do with any other binary.\nThere is no general procedure, I'll tell you what I usually do but I may have forgotten something and the list cannot possibly be exhaustive.\nThe general rule is: you debug it until you understand it, no matter how much time and focus will it take (5 min, 1 hour, 3 days, a month, doesn't matter).\nYou do this often enough and the time will shorten further and further until it's acceptable, you never get your hands dirty (i.e. use automated tools) and you'll never learn how to do this.\nAnyway, I'd do this assuming the packer is a PE:\n\nInspect the PE with a PE viewer. I use CFF Explorer. This will tell you if the PE is 32 or 64-bit, if it's a .NET assembly and what resources it has. Very simple packers have plain or XOR/RC4 encrypted payloads in their resources. The resources will also tell you if you are dealing with a Delphi binary, a particular runtime, an installer, UPX and so on. With experience, you can even tell malware and packer families aparts just by inspecting their PE.\nIf it's a .NET use dnspy to inspect and debug it.\nIf it's a Delphi use IDR to inspect and debug it.\nIf it's a VB6 use VB decompiler.\nIf it's AutoIT or similar scripted automation, use the relevant decompiler.\nIf it's an installer (NSIS, MSI, SFX, ...) use 7z 9.38 to extract it and then go back to point 1 (you may find out the packer it's an installer later, it's OK, you are required to know how the main installer looks like when disassembled with IDA, Ghidra or similar).\nIf it's not either use IDA.\nIf necessary debug the packer (I use x64dbg).\n\n.NET assembly\nThese can be easy to unpack or can be hard (if they patch metadata or use delegate shadowing).\nIn either case, check any module constructor and variable initializer. Often the malicious code is hidden inside a legal application, you have to find it starting from the entry-point. This is tedious but not hard, it's easy to spot malicious code (you are required to be a programmer to be a malware analyst, so you surely know what good code looks like).\nOften the packers use Control-Flow Obfuscation, this makes the code hard to read but not too hard to debug.\nWhat these packers usually do is decode an assembly (a DLL) from the resource and load it with <pre><code>Assembly.Load</code></pre> then use reflections (<pre><code>GetTypes</code></pre>, <pre><code>GetMethods</code></pre>, <pre><code>Invoke</code></pre>) to invoke a method. Use the module view of dnspy to put breakpoints in dynamically loaded assembly.\nBy debugging and inspecting the local variable you can easily find the configuration and the payload. You'll know when you are in the final unpacking routine because there will be a lot of checks on the configuration (cfr. MaaS).\nKeep in mind that there can be one, two, five, or even ten additional assemblies before the final unpacking.\nIf the packer uses \"delegate shadowing\" (i.e. call its method and runtime methods through delegates) you can inspect the target of the delegate in the local window to see if you are going to step into a runtime function.\nDe4dot was once useful for deobfuscating .NET assembly, not it's pretty useless but for dynamically executing string deobfuscation and renaming.\ndnlib is a very useful library to manipulate IL code, you are required to know how to use it to write deobfuscator or simplify the analysis.\nIDR\nThis is a standard Delphi executable, as a malware analyst you are required to be confident with the Delphi runtime (particularly string and array manipulation, Unit initialization and GUI events).\nYou may need to download additional \"Knowledge Bases\" to have IDR recognize the Delphi runtime.\nYour first task is finding the malicious code. This can be in a unit initialization routine, in a timer in a form or in any form load/create event.\nUse IDR to inspect the possible entry-point and look for anything suspicious, use the rename function copiously.\nLook for the usual tricks (PEB accesses, <pre><code>LoadLibrary</code></pre> and so on). Generally speaking, the packer will allocate memory to decode the payload and then map and execute it.\nThere is no way to give a general procedure. Note that you want the payload just decoded but not yet mapped (the payload is usually a PE) otherwise you have to patch it once dumped.\nIDA\nFirst identify the runtime used, for example, Go, Rust, C, C++ or so on. You are required to know how to tell the main programming languages apart (including Delphi, sometimes it can be wrongly detected).\nIf the languages have metadata (e.g. Go, Rust) then use the necessary IDA script to annotate the DB from these metadata (e.g. Go has AlphaGolang). If the scripts don't exist, write them. As a malware analyst, you are required to be confident in the vast majority of programming languages and platforms, including idapy.\nSee also if FLIRT or Lumina can help you (particularly for C/C++).\nOnce you have made IDA detect as much library code as possible, you need to find and inspect the entry-point.\nGet a gist of the possible obfuscation used and if used learn the patterns, what they actually mean and how to mentally translate them.\nLearn the shape of the decoy code to ignore (this can be done with several years of experience in programming, decoy code makes no sense so it really stands out as you have never seen it while debugging the legal programs you worked on) and look for the suspicious one (again: PEB access, allocation of memory, loading of modules).\nThe packer will generally decode the payload in allocated memory and then map and execute it.\nThe memory can be allocated with a variety of functions (<pre><code>NtAllocateVirtualMemory</code></pre>, <pre><code>GlobalAlloc</code></pre>, <pre><code>LocalAlloc</code></pre>, <pre><code>VirtualAlloc</code></pre>, on a writable section, ...).\nSee if the decoding code is simple (short actually) enough to be worth emulating in a script or if it's easier to debug it.\nYou can expect an intermediate shellcode, this can be called with anything (indirect <pre><code>jmp</code></pre> and <pre><code>call</code></pre>, <pre><code>push/ret</code></pre> pairs, callbacks in APIs, ...).\nAgain, you want the payload decoded but not mapped.\nVB6\nIf the packer is really written in VB6, just read the decompiled code. Again it should be easy to spot the decoding routine thanks to the boatload of metadata.\nOften the VB6 binary is just a decoy, you have to find the call to the shellcode. This is usually a simple <pre><code>call</code></pre> to a fixed address that is not listed as a VB6 routine. Put a breakpoint there and debug.\n\nYou are also required to know the anti-debug tricks and how to work around them (you can simply put breakpoint on APIs).\n",
            "votes": "5",
            "user": "Margaret Bloom",
            "time": "Sep 30, 2022 at 15:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "beytrod",
                    "text": "<span class=\"comment-copy\">Thank you for taking your time to write such detailed answer, it's very helpful. I also use CFF Explorer and I know for sure it's not any of those you've listed above. Your IDA explanation is very clear and I'm sure I will come back here when I need help for the others. I'm very grateful, thank you!</span>",
                    "time": null
                },
                {
                    "user": "Margaret Bloom",
                    "text": "<span class=\"comment-copy\">@beytrod If you want (and can) to share the binary, I could take a look at it out of curiosity.</span>",
                    "time": null
                },
                {
                    "user": "beytrod",
                    "text": "<span class=\"comment-copy\">Sorry, I cannot share it for 3 more weeks (until the assignment period ends). I will share it if you're still interested by then.</span>",
                    "time": null
                }
            ]
        }
    ]
}