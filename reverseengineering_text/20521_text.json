{
    "title": "Setting register names in Radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/20521/setting-register-names-in-radare2",
    "content": "I am reverse-engineering an 8051 architecture program of a specific chip.\nThe disassembly naturally doesn't contain any function names, and the register names are minimal. For example, address 0xb3 is a specific register with the name \"RTC2CON\". since the register name is specific for the chip the disassembly doesn't show it but rather \"0xb3\". \nMy question is how can I set a rule that will replace every occurrence of a certain string in the disassembly (in this case 0xb3) with another string (the register name RTC2CON).\nAnother Example\n<pre><code>|           0x0000393b      c2e9           clr 0xe8.1                  ; \n|           0x0000393d      1239dd         lcall TRANSMIT_r7_AND_GET_r7=RF_STATUS\n|           0x00003940      e4             clr a\n|           0x00003941      ff             mov r7, a\n|           0x00003942      1239dd         lcall TRANSMIT_r7_AND_GET_r7=RF_STATUS\n|           0x00003945      8f36           mov 0x36, r7                ; \n|           0x00003947      d2e9           setb 0xe8.1                 ; \n\\           0x00003949      22             ret\n</code></pre>\nTo be more clear the chip is the nRF24LE1. In this example there is a manipulation on the special function register on adress 0xe8 (RFCON)\nBit 1 is firstly cleared, and after some operation it is set again.\nWhat I want is simply that the dissasembly will display RFCON.1 instead of 0xe8.1 \nAnother problem I have is with a function that is called using ljmp instead of lcall. When I try to rename that function with afn the new name goes instead to the function calling it with ljmp. The function called has 58 XREFS and therefore it is very important to me to see it's name and not it's address when it is called. (functions default name is their fcn.address).\n",
    "votes": "3",
    "answers": 1,
    "views": "416",
    "tags": [
        "firmware",
        "radare2",
        "embedded"
    ],
    "user": "itay_421",
    "time": "Feb 28, 2020 at 12:18",
    "comments": [],
    "answers_data": [
        {
            "content": "not sure what b3 register is \nas to naming the destination of calls / jumps you do something like this \n<pre><code>[0x00000788]> pd~lcall\n|           0x00000797      124ef3         lcall 0x4ef3\n|       |   0x000007a7      124ac0         lcall 0x4ac0\n[0x00000788]> f loc.somefun @0x4ef3\n[0x00000788]> f loc.somefun2 @0x4ac0\n[0x00000788]> pd~ljmp\n        ,=< 0x000007cd      024ac4         ljmp 0x4ac4\n[0x00000788]> f loc.somejump @0x4ac4\n[0x00000788]> pd~ljmp\n        ,=< 0x000007cd      024ac4         ljmp loc.somejump\n[0x00000788]> pd~lcall\n|           0x00000797      124ef3         lcall loc.somefun\n|       |   0x000007a7      124ac0         lcall loc.somefun2\n[0x00000788]>\n</code></pre>\nis it about special function register from 0x80 to 0xff\nyou can probably flag them as shown above\n<pre><code>[0x000000b3]> s 0xb3\n[0x000000b3]> pd 2\n            ;-- reg.RTC2CON:\n            0x000000b3      00             nop\n            0x000000b4      00             nop\n[0x000000b3]> f reg.RTC2CONNED @ 0xb3\n[0x000000b3]> pd 2\n            ;-- reg.RTC2CON:\n            ;-- reg.RTC2CONNED:\n            0x000000b3      00             nop\n            0x000000b4      00             nop\n[0x000000b3]>\n</code></pre>\ni remembered it flagged the sfr's automatically but it seems its implementation is not complete you may have to either add the required bits and submit a pull request or open an issue in \nit decodes 8 bits out of possible 16 bits\nsrc is here 8051 implementation\ni just made simple test result as follows\n<pre><code>>xxd sfrtest.bin\n0000000: c2e0 c2e1 c2e2 c2e3 c2e4 c2e5 c2e6 c2e7  ................\n0000010: c2e8 c2e9 c2ea c2eb c2ec c2ed c2ee c2ef  ................\n>radare2 -a 8051 sfrtest.bin\n -- This software is sold for home use only and all other rights are expressly reversed by the copyleft owner.\n[0x00000000]> pd 10\n            0x00000000      c2e0           clr acc.0                   ; [0x100001e0:1]=0\n            0x00000002      c2e1           clr acc.1                   ; [0x100001e0:1]=0\n            0x00000004      c2e2           clr acc.2                   ; [0x100001e0:1]=0\n            0x00000006      c2e3           clr acc.3                   ; [0x100001e0:1]=0\n            0x00000008      c2e4           clr acc.4                   ; [0x100001e0:1]=0\n            0x0000000a      c2e5           clr acc.5                   ; [0x100001e0:1]=0\n            0x0000000c      c2e6           clr acc.6                   ; [0x100001e0:1]=0\n            0x0000000e      c2e7           clr acc.7                   ; [0x100001e0:1]=0\n            0x00000010      c2e8           clr 0xe8.0                  ; [0x100001e8:1]=0\n            0x00000012      c2e9           clr 0xe8.1                  ; [0x100001e8:1]=0\n[0x00000000]>\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Feb 2, 2019 at 8:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "itay_421",
                    "text": "<span class=\"comment-copy\">Thanks for the help. in the specific chip I am reverse engineering there are many registers that are accessed by address apart from the normal r0-r7, dptr, pc a, b etc. I am looking for a way to show the registers' name instead of their address</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">so what happens if you flag them like they are normaladdress do you have a bin to share ?</span>",
                    "time": null
                },
                {
                    "user": "itay_421",
                    "text": "<span class=\"comment-copy\">Edited the question to be more clear. If I seek to 0xb3 I don't see nop but other instructions. (I will admit only now I understand what flags are in radare2). Yes, It is about the special function registers, but as I said seeking to their addresses doesn't give nop but actual code. Can I flag them the way you mentioned nevertheless?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">edit radare2 automatically decoded some bits but c2 e9 is probably not implemented yet check the update and follwo through</span>",
                    "time": null
                }
            ]
        }
    ]
}