{
    "title": "Calculating offset from push instruction in exe to string in data section",
    "link": "https://reverseengineering.stackexchange.com/questions/21027/calculating-offset-from-push-instruction-in-exe-to-string-in-data-section",
    "content": "So I'm looking for some guidance on this topic.\nIf I open up my exe in a Hexeditor and go to the location where the address of the string is pushed as argument I have the following:\n<pre><code>68 7C 9D F1 01 - push 01F19D7C\n</code></pre>\nThe string in the exe however is at 01ADC808.\nI do have the same exe but for a different language.\n<pre><code>68 78 DE F0 01 - push 01F0DE78\n</code></pre>\nand the string is at 01B94B0C.\nLooking at it in Ghidra for example, the address from the push instruction matches the location of the string. So currently my best guess is, that Ghidra aligns the data properly with info from the PE Header.\nI'm writing a tool that modifies that string. Patterns could be created for each version, however I'd like a rather \"universal\" way to solve this.\nAdditionally, here's the overview for the Section Headers for the first example:\n\nFeel free to let me know if my question was not clear enough or more information is required!\nThanks in advance for any advice! :)\nEDIT: Forgot to mention the tool I'm writing is written in C#.\n",
    "votes": "2",
    "answers": 2,
    "views": "680",
    "tags": [
        "pe",
        "c#",
        "offset"
    ],
    "user": "c0dy",
    "time": "Apr 3, 2019 at 13:04",
    "comments": [],
    "answers_data": [
        {
            "content": "push 402010 is broken down like \n402010 - base_address - virtual_address_of_section + file_ptr_to_rawdata\nyour data has some inconsistencies it must be a counted string or pascal string etc there is a 4 byte mismatch between the addresses 0xc/0x8 \ndisassembly of a string push\n<pre><code>0:000> u . l4\nmsgbox!WinMain:\n002c1000 55              push    ebp\n002c1001 8bec            mov     ebp,esp\n002c1003 6a00            push    0\n002c1005 6810202c00      push    offset msgbox!âŒ‚USER32_NULL_THUNK_DATA+0x4 (002c2010)\n\n0:000> db 2c2010 l20\n002c2010  57 69 6e 64 20 54 65 73-74 00 00 00 54 65 73 74  Wind Test...Test\n002c2020  20 54 68 65 20 57 69 6e-64 00 00 00 00 00 00 00   The Wind.......\n\n0:000> ? msgbox\nEvaluate expression: 2883584 = 002c0000\n\n0:000> ? 2c2010 -msgbox\nEvaluate expression: 8208 = 00002010\n\n0:000> .shell -ci \"!dh -s msgbox\" grep -A 5 #2\nSECTION HEADER #2\n  .rdata name\n     206 virtual size\n    2000 virtual address\n     400 size of raw data\n     600 file pointer to raw data\n\n\n0:000> ? 0x2010 - 0x2000 + 0x600\nEvaluate expression: 1552 = 00000610\n\n0:000> q\nquit:\n</code></pre>\ndispaly on hexeditor \n<pre><code>:\\>xxd -g 1 -s 0x610 -l0x20 msgbox.exe\n0000610: 57 69 6e 64 20 54 65 73 74 00 00 00 54 65 73 74  Wind Test...Test\n0000620: 20 54 68 65 20 57 69 6e 64 00 00 00 00 00 00 00   The Wind.......\n</code></pre>\n",
            "votes": "2",
            "user": "blabb",
            "time": "Apr 3, 2019 at 13:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You are right, this is because of alignment. \nThere are 2 types of section alignment. Alignment on disk, and alignment in memory. They usually  equal 0x400 and 0x1000 respectively. When you open exe in hexeditor, you should notice that your .text section starts at 0x400, but Ghidra shows you exe as it would be in memory, so  .text now starts at 401000 (imagebase + virtual address).\nThe best way to solve this problem is to use:\n\nCreateFileMapping, MapViewOfFile, ViewMapOfFile\n",
            "votes": "1",
            "user": null,
            "time": "Apr 3, 2019 at 5:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c0dy",
                    "text": "<span class=\"comment-copy\">Thank you for your answer :)  So if I understand this correctly, the address used by the push instruction is basically the one being used with the \"in memory alignment\" you mentioned.  If that's the case, I assume I can just parse the PE Header, read the involved sizes and calculate the correct address in the file from there? I forgot to mention that the tool is written in C#. I apologize.</span>",
                    "time": null
                }
            ]
        }
    ]
}