{
    "title": "Reversing .net crypter with obfuscated imports",
    "link": "https://reverseengineering.stackexchange.com/questions/30998/reversing-net-crypter-with-obfuscated-imports",
    "content": "I have started recently with reverse engineering. I came across the linked file. It is a packed/crypted putty.exe. (<pre><code>WARNING: IT MAY BE BACKDOORED!!</code></pre>)\nHow it's working and loading putty.exe with runpe is clear. But it has anti reversing techniques I don't understand.\nFor example, all imports are obfuscated. It can't be opened by ILSpy (dotpeek works).\n\nCan someone explain which technique is used to obfuscate the imports and how this works?\nAre they loading imports dynamically and how does this work?\nIs this done after compilation or in source code?\n\nSome code on how this is done would also be helpful.\nI did not know this is even possible.\nDownload Link (THE FILE MAY BE BACKDOORED SO BE CAREFUL):\npassword for the file is \"reverse\"\nhttps://easyupload.io/4ekdna\n\n\nThanks for help\n",
    "votes": "1",
    "answers": 2,
    "views": "292",
    "tags": [
        "malware",
        "obfuscation",
        ".net"
    ],
    "user": "Sauseee",
    "time": "Mar 1, 2023 at 2:34",
    "comments": [],
    "answers_data": [
        {
            "content": "It looks like the crypter is using a technique called \"Dynamic Import Obfuscation\". This means that the imports are not statically resolved at compile-time, but instead are resolved at runtime. This makes it more difficult to reverse engineer the program, because you cannot simply look at the imported symbols to understand what the program is doing.\nTo understand how this works, you need to first understand how normal, static import resolution works. When a program is compiled, the compiler looks at all the symbols that are imported by the program and resolves them to specific addresses. This means that when the program is run, the system knows exactly which addresses to use for the imported functions.\nWith dynamic import obfuscation, the process is slightly different. Instead of resolving the imports at compile-time, the program resolves them at runtime. This means that the program needs to have some way of knowing which functions to import, and then look up the addresses of those functions at runtime.\nThere are different ways to do this, but one common method is to use a stub function. The program will first call the stub function, which will then resolve the address of the real function and return it. The program can then call the real function using the returned address.\nThis technique makes it more difficult to reverse engineer the program, because it is not trivial to understand which functions are being imported and what they are doing. However, with some careful analysis, it is possible to understand what the program is doing. If you are interested in learning more about this technique, I suggest doing some research on dynamic import obfuscation.\n",
            "votes": "1",
            "user": "Ms_bot",
            "time": "Oct 15, 2022 at 17:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "To retrieve all used winapi's the best way at runtime level.\nOne of usefull tools is apimonitor.\nJust configure it at api list you need and execute binary.\n",
            "votes": "0",
            "user": "BenjaminL",
            "time": "Jan 20, 2023 at 10:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}