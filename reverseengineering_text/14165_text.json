{
    "title": "Passing argument through registers instead of the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/14165/passing-argument-through-registers-instead-of-the-stack",
    "content": "I'm learning (and re-learning) C and assembly, and I came across a difference between what I've been taught and the actual result I have.\nSome code:\n<pre><code>int test(int a, int b){\n  return a + b;\n}\n\nint main(){\n  test(1,2);\n}\n</code></pre>\nAs you can see, it's a really simple example in which I try to understand how values are passed around function.\nI've been taught that to pass variable to functions, the values must be pushed to the stack, in reverse order, to be accessible then with the base pointer, something like (simplified writing):\n<pre><code>-- main\n...\nmov   [esp+8] 0x02\nmov   [esp] 0x01\ncall  0x...  <test>\n...\n</code></pre>\nAnd then you can get back those values directly from the stack using:\n<pre><code>-- test\n...\nmov   esi [esp+8]\nadd   esi [esp]\nmov   eax esi\n...\n</code></pre>\nI'm perfectly OK with this (although I may not have understood everything), but what is strange to me is the practical result I get when playing with it in gdb:\n<pre><code>$ gcc -g stack.c\n$ gdb a.out\n\n(gdb) disass main\nDump of assembler code for function main:\n   0x0000000100000f70 <+0>:     push   rbp\n   0x0000000100000f71 <+1>:     mov    rbp,rsp\n   0x0000000100000f74 <+4>:     sub    rsp,0x10\n-> 0x0000000100000f78 <+8>:     mov    edi,0x1\n-> 0x0000000100000f7d <+13>:    mov    esi,0x2\n   0x0000000100000f82 <+18>:    call   0x100000f50 <test>\n   0x0000000100000f87 <+23>:    xor    esi,esi\n   0x0000000100000f89 <+25>:    mov    DWORD PTR [rbp-0x4],eax\n   0x0000000100000f8c <+28>:    mov    eax,esi\n   0x0000000100000f8e <+30>:    add    rsp,0x10\n   0x0000000100000f92 <+34>:    pop    rbp\n   0x0000000100000f93 <+35>:    ret\nEnd of assembler dump.\n(gdb) disass test\nDump of assembler code for function test:\n   0x0000000100000f50 <+0>:     push   rbp\n   0x0000000100000f51 <+1>:     mov    rbp,rsp\n-> 0x0000000100000f54 <+4>:     mov    DWORD PTR [rbp-0x4],edi\n-> 0x0000000100000f57 <+7>:     mov    DWORD PTR [rbp-0x8],esi\n   0x0000000100000f5a <+10>:    mov    esi,DWORD PTR [rbp-0x4]\n   0x0000000100000f5d <+13>:    add    esi,DWORD PTR [rbp-0x8]\n   0x0000000100000f60 <+16>:    mov    eax,esi\n   0x0000000100000f62 <+18>:    pop    rbp\n   0x0000000100000f63 <+19>:    ret\nEnd of assembler dump.\n</code></pre>\nHere, instead of using the stack directly, the two values I'm passing to the function <pre><code>test</code></pre> are stored in the registers <pre><code>esi</code></pre> and <pre><code>edi</code></pre> (corresponding lines marked with <pre><code>-></code></pre>).\nHere's my setup:\n<pre><code>$ gcc -v\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 7.0.2 (clang-700.1.81)\nTarget: x86_64-apple-darwin14.5.0\nThread model: posix\n\n\n$ gdb --version\nGNU gdb (GDB) 7.11.1\n...\nThis GDB was configured as \"x86_64-apple-darwin14.5.0\".\n...\n</code></pre>\nMy two questions are:\n\nIs this behavior related to my setup?\nIs it documented anywhere?\n",
    "votes": "1",
    "answers": 1,
    "views": "6k",
    "tags": [
        "gdb",
        "stack",
        "gcc",
        "arguments"
    ],
    "user": "nobe4",
    "time": "Dec 14, 2016 at 8:47",
    "comments": [],
    "answers_data": [
        {
            "content": "This behavior is totally normal. The way functions are handled is usually described in what's called an ABI (Application Binary Interface). It defines calling conventions which detail how a call is made in assembly code and how parameters are passed to a function using specific registers. I would recommend Agner Fog's C++ Optimization Manual. It contains extremely helpful information about Linux, Windows, and MacOS ABIs.\n",
            "votes": "3",
            "user": "yaspr",
            "time": "Dec 14, 2016 at 9:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "nobe4",
                    "text": "<span class=\"comment-copy\">Great, thanks for the answer and the links. Are you aware of a way (if possible) to force the calling convention? Or is it fixed for an OS?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">64 bit uses fastcall calling covention where first 4 arguments are passed via registers and the rest are passed via stack so yes it is fixed for 64 bit architecture</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">There's no way you can change the calling convention for a specific function unless you write your code in assembly or modify the compiler. The latter will impact all functions processed by the compiler.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Older 32 bit compilers used to have different calling conventions, and several C compilers had additional keywords to force a specific one. For example, the original Windows API used the Pascal calling convention, and the Microsoft compiler had a <code>pascal</code> keyword to force this (which was <code>#define</code>d to <code>WINAPI</code> somewhere in windows.h). Luckily, 64 bit compilers did away with this old stuff.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">@GuntramBlohm I remember this oddity, it was one of those dirty tricks that made me hate Windows.</span>",
                    "time": null
                }
            ]
        }
    ]
}