{
    "title": "What type of disassembler is distorm?",
    "link": "https://reverseengineering.stackexchange.com/questions/14665/what-type-of-disassembler-is-distorm",
    "content": "In Alam you can find the classical differentiation between disassemblers. The author explains in general the two well known types of disassemblers:\n\n\nThe Linear Sweep technique starts from the first byte of the code and disassembles one instruction at a time until the end. [...]\nThe Recursive Traversal technique relies on the control flow of the program and decodes the bytes by following the control flow of the\n  program. [...]\n\n\nAfterwards, the author introduces distorm and he makes the following statement:\n\nBoth techniques have some deficiencies. To overcome these deficiencies\n  a good disassembler would combine both techniques. One such open\n  source disassembler, for non-commercial use, is distorm.\n\nAfter reading the docs of distorm, I'm not able to confirm this last statement. In my opinion, distorm seems to work like a classic Linear-Sweep version, and also will struggle with fake instructions and obfuscation (see 1). It calls itself \"stream disassembler\", where I was not able to fully clarify this expression.\nWith these facts, I have two questions:\n\nIs distorm really a combination of linear sweep and recursive\ntraversal as mentioned by the author?\nWhat is your formal understanding of a \"stream disassembler\"?\n\n\n0 Page 47 in Alam, Shahid, et al. \"A framework for metamorphic malware analysis and real-time detection.\" computers & security 48 (2015): 212-233.\n1 https://github.com/gdabah/distorm/wiki/StreamDisassembler\n",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassemblers"
    ],
    "user": "knx",
    "time": "Feb 16, 2017 at 17:27",
    "comments": [],
    "answers_data": [
        {
            "content": "DiStorm does not implement recursive traversal, however you can use distorm (or others, e.g. capstone) to implement your own recursive traversal algortihm.\nThere are a range of tools available doing something like this for you: IDA, BinaryNinja, JakStab (claims 'Iterative Disassembly') etc.\nSince retrieving the ControlFlowGraph is a hard problem, people tend to separate between the translation from machine code to assembler and the useage of those frameworks to retrieve the actual control flow.\nCite from diStorms Github:\n\nThis is the time to say that diStorm, as a stream disassembler, doesn't do the flow control analysis work for you, but it will help you do that more easily.\n\nDisassemblers try to help by indicating which instructions may change the control flow and supplying direct targets, but implementing control flow recovery is non-trivial due to indriect jumps and anti-disassembler techniques.\nRegarding the second part of the question: It disassembles a given stream of bytes (buffer object). That doesn't seem any different from any disassembler out there.\n",
            "votes": "7",
            "user": "Nordwald",
            "time": "Feb 16, 2017 at 7:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "knx",
                    "text": "<span class=\"comment-copy\">Okay, that totally confirmed my understandings. Danke f√ºr die schnelle Antwort!</span>",
                    "time": null
                }
            ]
        }
    ]
}