{
    "title": "Unpacking binaries in a generic way",
    "link": "https://reverseengineering.stackexchange.com/questions/72/unpacking-binaries-in-a-generic-way",
    "content": "I find that more and more often binaries are being packed with exe protectors such as upx, aspack etc. I tried to follow a few tutorials on how to unpack them but the examples are often quite easy while my targets are not.\nI am looking for good resources and any hints/tips on how to unpack targets.\n",
    "votes": "43",
    "answers": 3,
    "views": "28k",
    "tags": [
        "decompilation",
        "unpacking",
        "pe"
    ],
    "user": "Remko",
    "time": "Nov 12, 2016 at 20:31",
    "comments": [
        {
            "user": "amccormack",
            "text": "The lena tutorials will work through a lot of the techniques you will see in many packers. There are some tutorials that focus more on cracking, but those generally have good information as well.\n",
            "time": null
        },
        {
            "user": "Grijesh Chauhan",
            "text": "Do you know about: Ether: Malware Analysis via Hardware Virtualization Extensions\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Unpacking a generic wrapping packer or cryptor usually involves the following steps:\n1. Trace the code, possibly evading or bypassing anti-debugging checks.\nThis is not difficult with simple packers but might be tricky with the more advanced ones. They may employ timing checks (<pre><code>rdtsc</code></pre>), exception-based control transfer, using debug registers for calculations etc. Using a VM or an emulator here usually helps against most of them.\n2. Find the original entry point (OEP)\nThere are many ways to do this. Sometimes the jump to OEP is obvious when it follows a chunk of looping code and there's nothing reasonable-looking after it. Or you may recognize the code at OEP if you're familiar with the entrypoints produced by different compilers. A couple other tricks:\n\nif the packer saves the original registers before unpacking, set a hardware breakpoint on their location in the stack - this way you'll break right when they're restored before jumping to OEP.\nif during tracing you can identify memory where the unpacked code is being written, set a page execution breakpoint on that memory range - it will trigger after the jump. IDA allows you to set such a breakpoint, and I think OllyDbg too.\nset breakpoints on common APIs used by startup code, e.g. <pre><code>GetCommandLine</code></pre> or <pre><code>GetVersionEx</code></pre>. This won't get you the exact OEP, but you can usually go back the callstack and find it more or less easily.\n\n3. Dump the unpacked code\nIf you're using IDA, you don't actually need to dump the file into a separate file - it's enough to take a memory snapshot that would copy the bytes from memory to the database so you can analyze them later. One thing to keep in mind here is that if the packer used dynamically allocated memory, you need to mark it as \"loader\" so it gets included in the snapshot. More here.\n4. Restore imports\nI'm not very familiar how it's done in Olly or other debugger, but AFAIK you need to use a tool like ImpREC on your dump and a copy of the process in memory.\nIt's somewhat simpler (IMO) in IDA. You just need to find the import table and rename the pointers according to the functions they are currently pointing to (this should be done while debugger is active). You can use either <pre><code>renimp.idc</code></pre> script or UUNP \"manual reconstruct feature\" (see here).\nFor finding import table there are two tricks I sometimes use:\n\nfollow some calls in the startup code at OEP to find external APIs and this should lead you to the import table. Usually the start and the end of the table is obvious.\nduring unpacking, set a breakpoint on GetProcAddress and see where the results are written. This however won't work with packers that use manual import resultion using the export directory. Putting a read BP on kernel32's export table might help here.\n\n5. Clean up\nThis is optional but it may be useful to remove the remains of the packer code that would only distract you. In IDA, you should also apply a compiler FLIRT signature if you recognize the compiler used.\n6. Making an unpacked executable\nI don't do this step as I rarely need to run the unpacked file but in general you usually need to fix up the PE header so that offsets to the section's code in file match those in the dump.\n\nNow, there are many variations and tricks not covered by the above steps. For example, some packers don't fully resolve imports initially but put jumps to stubs that resolve import on first call and then patch it so it goes directly to the target next time. Then there is \"stolen code\" approach which makes it harder to find and recover OEP. Sometimes the packer runs a copy of itself and debugs it, so that you can't attach your own debugger to it (this can be solved by using emulator or a debugger that doesn't use debugging APIs like Intel PIN). Still, the outlined steps can cover quite a lot of what's out there.\nI will conclude with the video that Elias made showing the process of unpacking the Lighty Compressor: https://www.hex-rays.com/video/bochs_video_2.html\n",
            "votes": "66",
            "user": "perror",
            "time": "May 10, 2014 at 10:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">good answer (+1) and undoubtedly IDA plays a big role in general in RCE, but I think you shouldn't limit your answer to just IDA (yeah, I saw the mentioning of ImpRec and OllyDbg).</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@0xC0000022L: I am unfortunately not familiar with unpacking in OllyDbg, I only know of it in theory. But I think most of my answer can be used with any debugger (in fact, I wouldn't say it's \"limited\" to IDA at all). You could add your own answer specifically about unpacking in OllyDbg, though!</span>",
                    "time": null
                },
                {
                    "user": "Grijesh Chauhan",
                    "text": "<span class=\"comment-copy\">nice answer, here is a tool: <a href=\"http://ether.gtisc.gatech.edu/\" rel=\"nofollow noreferrer\">ether.gtisc.gatech.edu</a></span>",
                    "time": null
                },
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky I'm actually very happy that you covered IDA here because frankly, there is a ton of info on how to do this in Olly/x64 on Tuts4You and elsewhere, but not much on how to do this in IDA Pro. I am very thankful for this as I learned an entirely new way to handle this problem completely in IDA Pro. Do you have any more IDA Pro suggestions to solve this problem newer than this post (plugins/blogs/etc)? Thank you Igor.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Igor's answer is very good. However, the outlined techniques rely on the assumption that at some point the executable is unpacked in memory. This is not always true. Virtualization obfusactors compile the original binary into a custom instruction set when is executed by an simulator at runtime. If you encounter a binary obfuscated in this way you have no choice but to write a disassembler from the custom instruction set to an instruction set that you understand.\n",
            "votes": "14",
            "user": "94c3",
            "time": "Mar 22, 2013 at 0:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Yes, I mentioned that I'm talking about wrapping packers.</span>",
                    "time": null
                },
                {
                    "user": "newgre",
                    "text": "<span class=\"comment-copy\">Well, technically even the VM protectors leave the file unpacked in memory, i.e. they still work as \"wrapping packers\". The only difference is that it is much harder to make sense of the code which is protected by a VM, even if it's \"in plain sight\".</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@newgre: not all of them will unpack everything at once, though. So you may end up with bits and pieces only.</span>",
                    "time": null
                },
                {
                    "user": "newgre",
                    "text": "<span class=\"comment-copy\">Which VM packers do that?</span>",
                    "time": null
                },
                {
                    "user": "94c3",
                    "text": "<span class=\"comment-copy\">newgre can you explain how step 3 of Igor's process is possible when the only thing in memory is bytecode for a randomized instruction set? The only way to dump an executable protected in this way is to write a disassembler for the bytecode.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Blackstorm portal has a huge collection of Unpacking tutorials\nBlackstorm portal tutorials\nTuts4You has another large collection of unpacking tutorials\nTuts4You\nIt took me a long time at first but over time unpacking got a lot easier, lots of patience and practice required though.\n",
            "votes": "6",
            "user": "perror",
            "time": "May 10, 2014 at 10:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}