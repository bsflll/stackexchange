{
    "title": "Why is function in kernel32.dll jumping into a api-ms-win-core stub",
    "link": "https://reverseengineering.stackexchange.com/questions/31400/why-is-function-in-kernel32-dll-jumping-into-a-api-ms-win-core-stub",
    "content": "I was trying to look into the implementation of <pre><code>GetVersion</code></pre> function in kernel32.dll.\nI was surprised to see that the <pre><code>GetVersion</code></pre> thunk is issuing a jump to <pre><code>API-MS-WIN-CORE-SYSINFO-L1-1-0.DLL::GetVersion</code></pre>, and in turn <pre><code>API-MS-WIN-CORE-SYSINFO-L1-1-0.DLL::GetVersion</code></pre> is pointing(forwarder) back to <pre><code>KERNEL32.DLL::GetVersion</code></pre>\n\n\n\nAny idea why is it so? So where is the real implementation of <pre><code>GetVersion</code></pre>?\nKernel32.dll\n\nAPI-MS-WIN-CORE-SYSINFO-L1-1-0.DLL\n",
    "votes": "5",
    "answers": 1,
    "views": "379",
    "tags": [
        "windows",
        "winapi",
        "windows-10"
    ],
    "user": "caramel1995",
    "time": "Jan 13, 2023 at 17:19",
    "comments": [
        {
            "user": "blabb",
            "text": "to make universal crt possible most implementation were shifted to other dlls and a version agnostic stub which knows where to redirect the backward compatible and present apis were introduced  which is contained in a resource only dll file named APISETSCHEMEA.dll  you may check here for some internals of that here\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "What @blabb said! Plus, you may want to read this and this and this as well as the code in this and this. Enjoy. Oh and my answer on the Q&A blabb linked also offers details about this topic.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>GetVersion()</code></pre> was deprecated in 8.1 - https://learn.microsoft.com/en-us/windows/win32/sysinfo/targeting-your-application-at-windows-8-1\nSo I would guess that they've left the function stub there to catch and redirect calls in code that hasn't been updated.\n",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jan 13, 2023 at 22:48",
            "is_accepted": false,
            "comments": [
                {
                    "user": "caramel1995",
                    "text": "<span class=\"comment-copy\">I did tried to create a dummy program to test out <code>GetVersion</code> and it's working fine.</span>",
                    "time": null
                },
                {
                    "user": "caramel1995",
                    "text": "<span class=\"comment-copy\">Besides that there are also some function that is not deprecated that has the same footprint.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Deprecated means you shouldn't use it, not you can't. However, <code>GetVersion()</code> does anyway lie all the time unless your application happens to run with a manifest that proclaims full compatibility with the Windows release on which it runs. For the truth use <a href=\"https://learn.microsoft.com/en-us/windows/win32/devnotes/rtlgetversion\" rel=\"nofollow noreferrer\"><code>RtlGetVersion</code></a> or consult <code>KUSER_SHARED_DATA</code>. Either way, what you encountered is more about API sets than about whether <code>GetVersion</code> is deprecated.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@MegaTonnage: I think in this question it's more about the API Sets rather than about why it's deprecated or so.</span>",
                    "time": null
                }
            ]
        }
    ]
}