{
    "title": "Getting info for undocumented APIs called by StartServiceCtrlDispatcher",
    "link": "https://reverseengineering.stackexchange.com/questions/3145/getting-info-for-undocumented-apis-called-by-startservicectrldispatcher",
    "content": "I'm trying to understand the inner workings of <pre><code>StartServiceCtrlDispatcher</code></pre>. Specifically, I'm trying to figure out how it determines if its being called from the SCM. So I write a simple service in C# and called it as a console app. I started it from WinDbg and set a breakpoint at <pre><code>ADVAPI32!StartServiceCtrlDispatcherWStub</code></pre>. I then stepped into a few calls until I got the following stack trace:\n<pre><code>0:000> kP\nChild-SP          RetAddr           Call Site\n00000000`0037e578 00007ffa`101a52be RPCRT4!RpcStringBindingComposeW+0xff\n00000000`0037e580 00007ffa`101abedf sechost!ScClientBindToServer+0x76\n00000000`0037e690 00007ffa`101a8751 sechost!ScOpenServiceChannelHandle+0x1f\n00000000`0037e6d0 00007ffa`009796f0 sechost!StartServiceCtrlDispatcherW+0x3c\n00000000`0037e710 00007ffa`0097c0af System_ServiceProcess_ni+0x296f0\n00000000`0037e7e0 00007ff9`a0730104 System_ServiceProcess_ni+0x2c0af\n00000000`0037e880 00007ff9`ffe84113 0x00007ff9`a0730104\n00000000`0037e8d0 00007ff9`ffe83fde clr!CallDescrWorkerInternal+0x83\n00000000`0037e910 00007ff9`ffe889a3 clr!CallDescrWorkerWithHandler+0x4a\n00000000`0037e950 00007ff9`fff591aa clr!MethodDescCallSite::CallTargetWorker+0x251\n00000000`0037eb00 00007ff9`fff5999a clr!RunMain+0x1e7\n00000000`0037ece0 00007ff9`fff59893 clr!Assembly::ExecuteMainMethod+0xb6\n00000000`0037efd0 00007ff9`fff59372 clr!SystemDomain::ExecuteMainMethod+0x506\n00000000`0037f5e0 00007ff9`fff592c6 clr!ExecuteEXE+0x3f\n00000000`0037f650 00007ff9`fff59d84 clr!_CorExeMainInternal+0xae\n00000000`0037f6e0 00007ffa`011e7ced clr!CorExeMain+0x14\n00000000`0037f720 00007ffa`0128ea5b mscoreei!CorExeMain+0xe0\n00000000`0037f770 00007ffa`107115cd MSCOREE!CorExeMain_Exported+0xcb\n00000000`0037f7a0 00007ffa`10a343d1 KERNEL32!BaseThreadInitThunk+0xd\n00000000`0037f7d0 00000000`00000000 ntdll!RtlUserThreadStart+0x1d\n0:000> !clrstack\nOS Thread Id: 0x2ae4 (0)\n        Child SP               IP Call Site\n000000000037e738 00007ffa100795b3 [InlinedCallFrame: 000000000037e738] System.ServiceProcess.NativeMethods.StartServiceCtrlDispatcher(IntPtr)\n000000000037e738 00007ffa009796f0 [InlinedCallFrame: 000000000037e738] System.ServiceProcess.NativeMethods.StartServiceCtrlDispatcher(IntPtr)\n000000000037e710 00007ffa009796f0 DomainBoundILStubClass.IL_STUB_PInvoke(IntPtr)\n000000000037e7e0 00007ffa0097c0af System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])\n000000000037e880 00007ff9a0730104 ConsoleAndSCMPatternDemo.Program.Main(System.String[]) [c:\\Users\\Justin\\Documents\\Visual Studio 2013\\Projects\\ConsoleAndSCMPatternDemo\\ConsoleAndSCMPatternDemo\\Program.cs @ 21]\n000000000037ebb0 00007ff9ffe84113 [GCFrame: 000000000037ebb0] \n</code></pre>\nI have two questions:\n\nWhat is this <pre><code>sechost.dll</code></pre> that seems to have AdvApi32 functionality.\nWhere can I find documentation about the following API calls:\n\n<pre><code>ScClientBindToServer</code></pre>\n<pre><code>ScOpenServiceChannelHandle</code></pre>\n\n\nGoogle doesn't give good info on either.\n",
    "votes": "2",
    "answers": 0,
    "views": "2k",
    "tags": [
        "windows",
        "windbg",
        "callstack"
    ],
    "user": "Justin Dearing",
    "time": "Dec 8, 2013 at 7:31",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "<pre><code>StartServiceCtrlDispatcher()</code></pre> is pretty well documented in ReactOS: doxygen.reactos.org/dd/da0/â€¦\n",
            "time": null
        },
        {
            "user": "user2460798",
            "text": "The file description for sechost.dll says \"Host for SCM/SDDL/LSA Lookup APIs\" which seems pretty self explanatory to me. Was there something about that description you didn't understand? FWIW, I thought the DLL names in sechost.dll, API-MS-Win-Core*.dll, were curious, as I've never seen DLLs with those names as part of a Windows install.\n",
            "time": null
        }
    ],
    "answers_data": []
}