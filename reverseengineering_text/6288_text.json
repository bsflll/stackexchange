{
    "title": "How does sysenter instruction in windows 7 work?",
    "link": "https://reverseengineering.stackexchange.com/questions/6288/how-does-sysenter-instruction-in-windows-7-work",
    "content": "How does the sysenter instruction work?\nWhat instruction is called after sysenter?\nIs the next instruction saved in a register?\n<pre><code>mov     edx,esp\nsysenter\n</code></pre>\n",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "kernel-mode"
    ],
    "user": "user2522767",
    "time": "Sep 23, 2014 at 10:24",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "it goes into ring 0 typically with edx pointing to the parameters and eax being the 'id' of what to do\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "possible duplicate of How does sysenter work under Linux?\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "I am suspecting that <pre><code>sysenter</code></pre> works the same for Linux and Windows... But, I didn't try with Windows, so you need to try out.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "@perror: the linked question explains how to use <pre><code>sysenter</code></pre> to call Linux syscalls. It does not explain how <pre><code>systenter</code></pre> works on the CPU level.\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "@Igor : Right, I probably misunderstood the question. Sorry.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Here is a perfect explanation how <pre><code>sysenter</code></pre> works: http://www.osronline.com/article.cfm?id=257\nIn essence:\nAll native API calls from User Mode have a body that simply loads an index into EAX, executes <pre><code>SystemCallStub</code></pre>, and returns\nSystemCallStub saves a pointer to the top of the User Mode stack into EDX and executes a SYSENTER instruction\nSYSENTER disables interrupts, switches the thread into Kernel Mode and executes the instruction located in the SYSENTER_EIP_MSR (which on XP SP1 is KiFastCallEntry)\n<pre><code>KiFastCallEntry</code></pre> builds a trap frame so it knows where to go when returning back to User Mode, enables interrupts, and jumps into <pre><code>KiSystemService</code></pre>\n<pre><code>KiSystemService</code></pre>, amongst doing other things, copies the parameters from the User stack (pointed to by EDX) and takes the value previously stored in EAX and executes the function located at KiServiceTable[EAX]\nThe native API now executes in Kernel Mode with the previous mode of the thread set to User Mode\n",
            "votes": "9",
            "user": "pHiL",
            "time": "Sep 23, 2014 at 11:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2522767",
                    "text": "<span class=\"comment-copy\">exactly can you say where save address eiP after call sysenter in returning to user mode?in stack or register?</span>",
                    "time": null
                },
                {
                    "user": "pHiL",
                    "text": "<span class=\"comment-copy\">a trap frame is used and setup for EIP after returning to user-mode. read about how trap frames work exactly</span>",
                    "time": null
                },
                {
                    "user": "user2522767",
                    "text": "<span class=\"comment-copy\">Did you mean Nowhere saving? can you show me a reference about trap frames work? tanx</span>",
                    "time": null
                },
                {
                    "user": "pHiL",
                    "text": "<span class=\"comment-copy\">the trap frame is set in kernel-mode so you cant modify it from user-mode. If you want to learn more, search for \"interrupts, traps, exceptions\"</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The <pre><code>SYSENTER</code></pre> instruction affects many registers, but most importantly it sets <pre><code>EIP</code></pre> to the value of the <pre><code>SYSENTER_EIP_MSR</code></pre> register (in IA-32 terminology). At boot-time, Windows sets <pre><code>SYSENTER_EIP_MSR</code></pre> to the address of <pre><code>ntoskrnl!KiFastCallEntry()</code></pre>.\nSo at a high-level, <pre><code>SYSENTER</code></pre> \"jumps\" to <pre><code>ntoskrnl!KiFastCallEntry()</code></pre>.\nFor more details, see http://www.codeguru.com/cpp/misc/misc/system/article.php/c8223/%22System-Call-Optimization-with-the-SYSENTER-Instruction.htm and http://trapframe.org/just-enough-kernel-to-get-by-2/.\n",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 23, 2014 at 11:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}