{
    "title": "Pe 32 Add Export function Segment by Extending with dll or Patching pe",
    "link": "https://reverseengineering.stackexchange.com/questions/25292/pe-32-add-export-function-segment-by-extending-with-dll-or-patching-pe",
    "content": "I need to add new function inside pe32 module.dll Export Table , in dynamic way if possible ( via extending with dll ) or by patching pe32 module.dll \nWhat can u suggest to solve this ?\n",
    "votes": "2",
    "answers": 1,
    "views": "758",
    "tags": [
        "windows",
        "c++",
        "pe",
        "assembly"
    ],
    "user": "LighFusion",
    "time": "Jun 13, 2020 at 23:14",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what is your final goal with this?\n",
            "time": null
        },
        {
            "user": "LighFusion",
            "text": "@IgorSkochinsky i want to handle function that is being called from .exe and process it's object data. I did some workaround renaming function that is missing in .dll to existing but not used function is same .dll , and hooking it via trampoline . But i'm worried it might create some issues.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since I don't know any tool to solve your problem easily, I will tell you how it can be done \"by hand\".\nFirst of all, you have to be familiar with PE format. If you are not, you may check aldeid and MSDN to understand the steps I will describe. Adding an export to <pre><code>dll</code></pre> is just extending <pre><code>Export Directory</code></pre> and possibly changing some other fields. So, what you have to do is to:\n\nOpen your <pre><code>dll</code></pre> in PE parser. It can be PE Explorer, CFF Explorer or in disassembler such as IDA (tick manual load, and then load all possible sections).\nOpen your favourite hex editor in order to patch <pre><code>dll</code></pre>. Some changes may be done in above mentioned PE parsers, but not all.\nIncrease <pre><code>ExportDirectory.NumberOfFunctions</code></pre> by <pre><code>1</code></pre>, since you are adding new function.\nDo the same thing with <pre><code>ExportDirectory.NumberOfNames</code></pre>.\nNow, you have to add new entry to <pre><code>Export Address Table</code></pre>, which is located at <pre><code>ExportDirectory.AddressOfFunctions</code></pre>. Just use hex editor to insert <pre><code>4</code></pre> new NULL bytes - you will set their value when you insert your function's code.\nAfter previous step, <pre><code>ExportDirectory.AddressOfNames</code></pre> has probably changed (by <pre><code>4</code></pre> bytes). You have to adjust it as well.\nNow, insert new entry to <pre><code>ExportDirectory.AddressOfNames</code></pre> - insert another <pre><code>4</code></pre> bytes using hex editor. Later on, you will change it to the name of your function.\nAs in step 6. and 7., adjust <pre><code>ExportDirectory.AddressOfNameOrdinals</code></pre> and add <pre><code>2</code></pre> bytes using hex editor (highest ordinal <pre><code>+ 1</code></pre>, write it in little endian).\nSince you have inserted several new bytes, you have to change <pre><code>ExportDirectory.Name</code></pre> as well, to point to the <pre><code>dll</code></pre> name.\nNow, insert your function's name at the end of the table of function names (last entry in <pre><code>ExportDirectory.AddressOfNames</code></pre>).\nSet the entry you have created in 7. so it points to your function name.\nInsert your function's code at the end of <pre><code>.text</code></pre> section (if it is small enough, you won't have to resize it).\nSet the entry you have created in 5.\nChange <pre><code>Export Directory Size</code></pre> to match your new size.\nUse the same value for changing <pre><code>SectionHeader.VirtualSize</code></pre> for <pre><code>.edata</code></pre> section.\nIncrease <pre><code>FileHeader.NumberOfSymbols</code></pre> by <pre><code>1</code></pre>.\nEither increase <pre><code>SectionTable.SizeOfRawData</code></pre> for <pre><code>ExportDirectory</code></pre> by number of bytes you have inserted using hex editor, or delete as this number of NULL bytes at the end of <pre><code>ExportDirectory</code></pre> (if present).\nZero out or compute new <pre><code>OptionalHeader.CheckSum</code></pre>.\n\nAs you see, it's a tedious process to do this manually and even if you find doing it too difficult, I hope that at least you see what has to be done \"at low level\" to add new export to a <pre><code>dll</code></pre>.\n",
            "votes": "2",
            "user": "bart1e",
            "time": "Jul 19, 2020 at 20:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}