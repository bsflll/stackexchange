{
    "title": "x86 Assembly Data Types [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/18571/x86-assembly-data-types",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nFor the code below can anyone help with these questions? \n<pre><code>xor eax, eax\nmov ecx, 5\nlea edi, [edx]\nrep stosd\nmov al, 0xFF\nstosw\nstosb\nstosb\n</code></pre>\n\nHow many times does the '<pre><code>stosd</code></pre>' operation run? Why?\nIf <pre><code>edx</code></pre> was storing address <pre><code>0x4b0000</code></pre> on the heap, what would <pre><code>edi</code></pre> be after the sequence is complete? Why?\nHow many bytes on the heap are modified by the code above? Why?\nDescribe as completely as possible what the code above is doing.\nIllustrate precisely how the modified heap space should look given the sequence above.\n",
    "votes": "-2",
    "answers": 1,
    "views": "488",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Michael Truro",
    "time": "6 years ago",
    "comments": [
        {
            "user": "julian",
            "text": "Is this a homework assignment?\n",
            "time": null
        },
        {
            "user": "Michael Truro",
            "text": "No, I am trying to teach myself x86 for Malware analysis and the book that I am using does not come with the answers to their questions.\n",
            "time": null
        },
        {
            "user": "josh",
            "text": "Why not just run in a debugger and see what happens?\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@josh if it's live malware I'd rather that the inquirer uses some emulator to step through just those opcodes. It'd be better than executing the live malware up to that point :) ... sounds suspiciously like a homework/assignment, though. This should help.\n",
            "time": null
        },
        {
            "user": "josh",
            "text": "@0xC0000022L Anyone dealing with suspected malware should take appropriate precautions, of course you are right! Emulators, sandboxes, whatever... (I did not downvote, btw). Nothing against questions for homeworks, but an answer to \"What have you tried?\" from a previous comment, that would be great...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can do this yourself! Instead of explaining it all, I'm going to give you some resources to read through.\n\nRead all about STOS* and REP. Read them carefully and process what you're reading! Those two resources explain everything to you insofar as how those instructions work.\nRead about the LEA instruction. Since there are no offsets being referenced with edx, the way that instruction is written is effectively the same as <pre><code>mov edi,edx</code></pre>. Knowing that, now what do you think is in edi?\nTake some time to really wrap your head around the difference between stack and heap. You may have to read/watch content from multiple sources, but here is a great place to start.\n(and 5): Use what you learn from the aforementioned points to address your questions about heap/stack. I HIGHLY recommending using something like WinREPL and/or an assembly emulator to view register states and step through cycles as instructions run. If you want to do this with your code, consider running <pre><code>mov edx,0x4b0000</code></pre> first so the lea instruction will properly operate with an address that's observable for a command like <pre><code>.read addr size</code></pre> in WinREPL.\n",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jun 21, 2018 at 16:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}