{
    "title": "Matching ActionScript byte code to the Disassembly of a Shockwave Flash",
    "link": "https://reverseengineering.stackexchange.com/questions/6444/matching-actionscript-byte-code-to-the-disassembly-of-a-shockwave-flash",
    "content": "There are lots of programs I seen that can locate a swf running in memory, capture it and return source code. Usually the AS byte code is generated as well.\nWhat I looking to do is the opposite, I'm trying to match a section of Action Script byte-code to a section of disassembly from a Shockwave Flash program. \nBasically match p-code to disassembly.\nIs there any good techniques or software that can do this.\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "assembly",
        "byte-code",
        "actionscript"
    ],
    "user": "user1887120",
    "time": "Oct 16, 2014 at 1:01",
    "comments": [],
    "answers_data": [
        {
            "content": "JPEXS Free Flash Decompiler appears to have this functionality.\nFrom http://www.free-decompiler.com/flash/features.html --\n\n\nDisplaying ActionScript code on the left, p-code on the right\nClicking AS item hilights position in p-code and vice-versa\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Oct 14, 2014 at 14:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1887120",
                    "text": "<span class=\"comment-copy\">Thanks Jason, JPEXS looks like a great program, but may I have worded my question incorrectly. I'm trying to match that p-code to the disassembly of a running Shockwave Flash.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">You mean you're trying to match each p-code instruction to its corresponding SWF bytecode handler in the ActionScript virtual machine?</span>",
                    "time": null
                },
                {
                    "user": "user1887120",
                    "text": "<span class=\"comment-copy\">I'm trying to match each p-code instruction to it's corresponding x86 instruction that is generated by the JIT.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@user1887120: that's not clear from your question, though.</span>",
                    "time": null
                },
                {
                    "user": "user1887120",
                    "text": "<span class=\"comment-copy\">I've edit my question back to original and mark your answer as correct. You answer was accurate, from the beginning, to the question I was asking. I'll post a new question rather than continuing to edit this.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This is how it works at .NET. When the method is compiled a table is generated that contains the information (including offset, length) to match MSIL code to their machine code counterparts. However not all MSIL instructions have meaningful machine code counterpart, instead the table contains the info to match a sequence of MSIL instructions (block) to the machine counterparts.\nYou can access the table via Debugging or Profiler interface, or as I did, you can reverse engineer.\nI'm not sure if such table exists in Flash, and if so is there a way to get it via documented function calls. But this should be one technique to consider.\n",
            "votes": "0",
            "user": "Attila",
            "time": "Oct 15, 2014 at 8:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}