{
    "title": "How to watch a function's local variable in GDB?",
    "link": "https://reverseengineering.stackexchange.com/questions/26085/how-to-watch-a-functions-local-variable-in-gdb",
    "content": "I'm reversing a 64bit binary  with gdb & peda and I've identified a function of interest (probably encoding user input). I want to watch the function <pre><code>interesting</code></pre>'s  local variable <pre><code>arg1</code></pre>.\nHow can I watch a local variable of a known function in gdb?\n",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "gdb",
        "local-variables"
    ],
    "user": "ChocolateOverflow",
    "time": "Oct 8, 2020 at 8:53",
    "comments": [
        {
            "user": "Dvd848",
            "text": "Something like this? stackoverflow.com/questions/53173854/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You could use a Watchpoint\nThe simplest way to do it is to use a watchpoint. A watchpoint will stop execution when a certain memory address is read or written. According to the GDB Manual section on setting Watchpoints:\n\nYou can use a watchpoint to stop execution whenever the value of an expression changes, without having to predict a particular place where this may happen. (This is sometimes called a data breakpoint.) The expression may be as simple as the value of a single variable, or as complex as many variables combined by operators.\n\n<pre><code>Usage: watch [-l|-location] expr [thread thread-id] [mask maskvalue]\n</code></pre>\n\nSet a watchpoint for an expression. GDB will break when the expression expr is written into by the program and its value changes. The simplest (and the most popular) use of this command is to watch the value of a single variable:\n\n<pre><code>(gdb) watch foo\n</code></pre>\nYou could use Breakpoint Command Lists\nBreakpoint command lists are much what they sound like. They are lists of GDB commands that are run when a breakpoint is hit. A key feature here is that you can include the continue command in the command list, making GDB not stop like it normally would.\nThe GDB Manual section on Breakpoint Command Lists tells us the following:\n\nYou can give any breakpoint (or watchpoint or catchpoint) a series of commands to execute when your program stops due to that breakpoint. For example, you might want to print the values of certain expressions, or enable other breakpoints.\n\n<pre><code>Usage:\ncommands [list…]\n… command-list …\nend\n</code></pre>\n\nFor example, here is how you could use breakpoint commands to print the value of x at entry to foo whenever x is positive.\n\n<pre><code>break foo if x>0\ncommands\nsilent\nprintf \"x is %d\n\",x\ncont\nend\n</code></pre>\n",
            "votes": "1",
            "user": "Gogeta70",
            "time": "Oct 21, 2020 at 7:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}