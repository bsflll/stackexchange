{
    "title": "Catch MessageBox call with OllyDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/11261/catch-messagebox-call-with-ollydbg",
    "content": "I am trying to learn to get around Ollydbg, using Lena's tutorial. The latter is based on v.1.10 but I'm using 2.01. So far that went ok. \nHowever, I now find myself in a situation where my result differs a lot from the tutorial (no 4). \nI'm trying to catch the call for a messagebox in the code. The tutorial describes I should, with the messagebox open, pause Ollydbg, then return to the application and close the messagebox. This would make Ollydbg break after I clicked the box away and I would land right after the messagebox call in the code. \nIn my case though, as soon as I click pause, Olly leaves the main application module, landing on RETN in a subroutine of USER32.GetMessageA\nNow I can't get back to the application at all, it's blocked. I have to continue the debugger in order to be able to get back to it again but this way I get no info about the messagebox. \nAny tips how to proceed in order to get the expected result? I guess in this specific example I could just search for all messagebox calls in the code but that's hardly a good way, especially with large apps. \nA related question, is there a possibility to \"look back\" on what happened, as in which code was called up to a certain moment? \nApologies if any of this doesn't make much sense.\n",
    "votes": "1",
    "answers": 2,
    "views": "12k",
    "tags": [
        "disassembly"
    ],
    "user": "vic",
    "time": "Nov 6, 2015 at 17:43",
    "comments": [
        {
            "user": "Viktor",
            "text": "Have you tried searching for all intermodular calls and breaking on all calls to message box?\n",
            "time": null
        },
        {
            "user": "vic",
            "text": "Hi namesake :) yes, I did that, that works, too, of course. But I wanted to know how I could use that in situations when I don't know the name of the window (or other function) called.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "alt + k to view or look back \nhere is a f9-> f12 -> alk + k output on a simple message box\n<pre><code>Call stack of main thread\nStack     Data      Procedure                                     Called from                  Frame\n0013FA78  7E419418   ???                                          USER32.WaitMessage+0A\n0013FAB0  7E4249C4  /USER32.DialogBox2                            USER32.InternalDialogBox+0B1\n0013FAB4  00A20142  |  Arg1 = 0A20142\n0013FAB8  00000000  |  Arg2 = 0\n0013FABC  00000001  |  Arg3 = 1\n0013FAC0  00000000  \\  Arg4 = 0\n0013FAD8  7E43A956  /USER32.InternalDialogBox                     USER32.SoftModalMessageBox+6>\n0013FADC  7E410000  |  Arg1 = USER32.<STRUCT IMAGE_DOS_HEADER>\n0013FAE0  00152F38  |  Arg2 = 152F38\n0013FAE4  00000000  |  Arg3 = 0\n0013FAE8  7E43A016  |  Arg4 = USER32.MB_DlgProc\n0013FAEC  0013FEF0  |  Arg5 = 13FEF0\n0013FAF0  00000000  \\  Arg6 = 0\n0013FD98  7E43A2BC  /USER32.SoftModalMessageBox                   USER32.MessageBoxWorker+170\n0013FD9C  0013FEF0  \\  Arg1 = 13FEF0\n0013FEE8  7E4663FD  /USER32.MessageBoxWorker                      USER32.MessageBoxTimeoutW+75\n0013FEEC  0013FEF0  \\  Arg1 = 13FEF0\n0013FF40  7E4664A2  /USER32.MessageBoxTimeoutW                    USER32.MessageBoxTimeoutA+97\n0013FF44  00000000  |  Arg1 = 0\n0013FF48  001529C8  |  Arg2 = UNICODE \"Multi-line text for a simp>\n0013FF4C  00152AB0  |  Arg3 = UNICODE \"Caption For A Simple And P>\n0013FF50  00000000  |  Arg4 = 0\n0013FF54  00000000  |  Arg5 = 0\n0013FF58  FFFFFFFF  \\  Arg6 = -1\n0013FF74  7E450877  /USER32.MessageBoxTimeoutA                    USER32.MessageBoxExA+16\n0013FF78  00000000  |  Arg1 = 0\n0013FF7C  00401008  |  Arg2 = ASCII \"Multi-line text for a simple>\n0013FF80  00401070  |  Arg3 = ASCII \"Caption For A Simple And Pla>\n0013FF84  00000000  |  Arg4 = 0\n0013FF88  00000000  |  Arg5 = 0\n0013FF8C  FFFFFFFF  \\  Arg6 = -1\n0013FF94  7E45082F  /USER32.MessageBoxExA                         USER32.MessageBoxA+40\n0013FF98  00000000  |  hOwner = NULL\n0013FF9C  00401008  |  Text = \"Multi-line text for a simple and p>\n0013FFA0  00401070  |  Caption = \"Caption For A Simple And Plain >\n0013FFA4  00000000  |  Type = MB_OK|MB_DEFBUTTON1|MB_APPLMODAL\n0013FFA8  00000000  \\  LanguageID = LANG_NEUTRAL\n0013FFB0  004010AE  /USER32.MessageBoxA                           msgbox.004010A8\n0013FFB4  00000000  |  hOwner = NULL\n0013FFB8  00401008  |  Text = \"Multi-line text for a simple and p>\n0013FFBC  00401070  |  Caption = \"Caption For A Simple And Plain >\n0013FFC0  00000000  \\  Type = MB_OK|MB_DEFBUTTON1|MB_APPLMODAL\n</code></pre>\nno you cant close a paused MessageBox not in v 1.10 or not in v 2.01\nit is simply not possible period\nyou must be misreading or misunderstanding the tutorial\nyou need to set a breakpoint some where on any of the return address and continue execution \nor you can select a return address in call stack and hit f4 to execute until return\n",
            "votes": "4",
            "user": "blabb",
            "time": "Nov 6, 2015 at 19:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">I don't think I misread, maybe I misunderstood. I quote from the tut: \"Use this simple trick: Pause Olly first, now press Alt-F9 (return to user), and notice that Olly promises he will return to user as soon as you let him. [...] (Video goes back to App, closes the messagebox) Olly kept his promise, breaks right after the messagebox.\"</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">yep alt+f9 is return to user code that sets a breakpoint on a return in call stack no problems there  after you hit alt+f9 you cna notice the breakpoint ollydbg set in the list  alt+k -&gt; select a call retun and f4 -&gt; f9 -&gt; close ollydbg will break on the break</span>",
                    "time": null
                },
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">No, that's what I described, that doesn't work for me. No breakpoint is set, and I cannot return to the application window.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i just checked it sets an internal hardware breakpoint here and the status bar show till user code and closing the msg box it breaks on user code  Hardware breakpoints, item 0   Slot = 4   Type = Internal  &lt;----------------   Address = 7E42770A   Module = USER32   Status = Active   Disassembly = JMP     USER32.7E42764D   Comment = Log data, item 0   Address = 004010AE   Message = User code reached</span>",
                    "time": null
                },
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">I am really confused now. It works. Well, it works now, for some reason, most of the times. The other times I still get the behavior I described in my question. It seem that when I switch back rather quickly using Alt-Tab after Alt-F9, it doesn't work. But that's not always reproducible. I had a streak of 6 times when it blocked, and after that I just couldn't get it to block again. I wish I could understand what's happening here.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Have you tried in 1.10? I have and have no issue. Make sure you leave the dialog opened, and instead of hitting Alt-F9 I found the option in the menu.\nIt's possible but unlikely that this feature is broken in Olly 2\n",
            "votes": "0",
            "user": "Gdogg",
            "time": "Nov 10, 2015 at 20:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "vic",
                    "text": "<span class=\"comment-copy\">Thanks Gdogg. As I mentioned, it does work, just not consistently. Otherwise v2 was treating me well so far.</span>",
                    "time": null
                }
            ]
        }
    ]
}