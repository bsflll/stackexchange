{
    "title": "ARM debugging interesting behavior",
    "link": "https://reverseengineering.stackexchange.com/questions/3541/arm-debugging-interesting-behavior",
    "content": "I was just disassembling and debugging an ARM binary for fun and I noticed something unusual. Consider the following set of instructions:-\n<pre><code>   0x00008058 <+4>: mov r1, pc\n   0x0000805c <+8>: add r1, r1, #24\n   0x00008060 <+12>:    mov r0, #1\n</code></pre>\nI tried setting a breakpoint at <pre><code>0x0000805c</code></pre> and checked the value of the register <pre><code>r1</code></pre>. I was expecting to see <pre><code>0x0000805c</code></pre> -- however, interestingly the value is <pre><code>0x8060</code></pre>.\nWhy is this? Is this because of some sort of instruction pipelineing?\n",
    "votes": "6",
    "answers": 1,
    "views": "166",
    "tags": [
        "debugging",
        "arm"
    ],
    "user": null,
    "time": "Jan 24, 2014 at 16:27",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, it's because of pipelining.\nFrom http://winarm.scienceprog.com/arm-mcu-types/how-does-arm7-pipelining-works.html --\n\n\nPC (Program Counter) is calculated 8 bytes ahead of current\n  instruction.\n",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jan 24, 2014 at 14:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}