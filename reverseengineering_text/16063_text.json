{
    "title": "Understanding an if statement in assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/16063/understanding-an-if-statement-in-assembly",
    "content": "I have written two simple C programs (one with an <pre><code>if</code></pre> and one without).  Looking at the assembly differences there are a few lines that I can't manage to explain and was hoping to get some assistance.  The <pre><code>if</code></pre> based C code is: \n<pre><code>#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n        char buffer[256];\n        if(sizeof(buffer) >= sizeof(argv[1])) {\n                strcpy(buffer, argv[1]);\n                printf(\"%s\n\", buffer);\n       }\n       return 0;\n}\n</code></pre>\nThe assembly for this is: \n<pre><code>#   0x4005d6 <main>         push   rbp\n#   0x4005d7 <main+1>       mov    rbp,rsp\n#   0x4005da <main+4>       sub    rsp,0x120\n#   0x4005e1 <main+11>      mov    DWORD PTR [rbp-0x114],edi\n#   0x4005e7 <main+17>      mov    QWORD PTR [rbp-0x120],rsi\n#   0x4005ee <main+24>      mov    rax,QWORD PTR fs:0x28\n\n    0x4005f7 <main+33>      mov    QWORD PTR [rbp-0x8],rax\n    0x4005fb <main+37>      xor    eax,eax\n    0x4005fd <main+39>      mov    rax,QWORD PTR [rbp-0x120]\n\n#   0x400604 <main+46>      add    rax,0x8\n#   0x400608 <main+50>      mov    rdx,QWORD PTR [rax]\n#   0x40060b <main+53>      lea    rax,[rbp-0x110]\n#   0x400612 <main+60>      mov    rsi,rdx\n#   0x400615 <main+63>      mov    rdi,rax\n#   0x400618 <main+66>      call   0x400490 <strcpy@plt>\n#   0x40061d <main+71>      lea    rax,[rbp-0x110]\n#   0x400624 <main+78>      mov    rdi,rax\n#   0x400627 <main+81>      call   0x4004a0 <puts@plt>\n#   0x40062c <main+86>      mov    eax,0x0\n\n    0x400631 <main+91>       mov    rcx,QWORD PTR [rbp-0x8]\n    0x400635 <main+95>       xor    rcx,QWORD PTR fs:0x28\n    0x40063e <main+104>      je     0x400645 <main+111>\n    0x400640 <main+106>      call   0x4004b0 <__stack_chk_fail@plt>\n\n#   0x400645 <main+111>     leave\n#   0x400646 <main+112>     ret\n</code></pre>\nThe parts of the assembly with <pre><code>#</code></pre> are exactly the same as the code without the if statement (I included it for ease and readability).  The lines that have me confused are line <pre><code>main+91</code></pre> through <pre><code>main+106</code></pre>.\nI don't get why an if statement would somehow add these bits and was hoping for a little insight.\n",
    "votes": "1",
    "answers": 2,
    "views": "675",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "gdb"
    ],
    "user": "user21204",
    "time": "Aug 11, 2017 at 13:27",
    "comments": [],
    "answers_data": [
        {
            "content": "The code you are referring to is a check for <pre><code>argv[1]</code></pre> being initialized most likely.\nThe main problem here is that you are actually comparing two static numbers, i.e. <pre><code>sizeof(argv[1])</code></pre> is going to ALWAYS be the same (and also smaller than 256), no matter what the <pre><code>argv[1]</code></pre> is. The compiler knows this, thus omits the whole 'if' statement. It should also segfault / have undefined behavior if there is no <pre><code>argv[1]</code></pre>. Needless to say, you can easily buffer overflow here..\nWhat you really wanted to do is this:\n<pre><code>...   \nif(sizeof(buffer) > strlen(argv[1])){    \n... \n}\n...   \n</code></pre>\nReason for '<pre><code>></code></pre>' and not '<pre><code>>=</code></pre>' is that the null terminated string needs the null terminator, which is not accounted for when calculating the <pre><code>strlen()</code></pre> (or add one).\n",
            "votes": "3",
            "user": "perror",
            "time": "Aug 11, 2017 at 13:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Just to add on Sigtran answer, part of the assembly code you are pinpointing is coming from the stack-smashing protection. It seems that you have it enabled by default on your system.\nTry to recompile your code with the option: <pre><code>-fno-stack-protector</code></pre> and look at the assembly again. It should clean out most of these lines that you do not understand (if not all).\nPS: If you want a more detailed answer about what does this code, feel free to add a comment to my answer and I will detail these lines in my answer.\n",
            "votes": "3",
            "user": "perror",
            "time": "Aug 11, 2017 at 13:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}