{
    "title": "How does ASLR in Windows work?",
    "link": "https://reverseengineering.stackexchange.com/questions/20452/how-does-aslr-in-windows-work",
    "content": "I had recently this situation where in a program I was debugging I found:\n<pre><code>03CD38D4:  8B15 8C5FF703  MOV EDX, DWORD PTR DS:[3F75F8C]\n</code></pre>\nIf I look for these bytes in the physical file I found nothing. I assumed this is because the reference to <pre><code>3F75F8C</code></pre>, which might change over each instance of the program, is being randomised by Windows. So I could not change the value directly in an hexed - say change <pre><code>3F75F8C</code></pre> to <pre><code>3F75F88</code></pre> (I suppose I can do it with some math involving the <pre><code>base</code></pre>, though).\n\nCan someone explain in detail how Windows proceeds when loading the PE file to randomise all these bytes? I have found posts and info on how ASLR works, but I am more thinking on the steps that the OS makes to put the file in memory with the randomised addresses - i.e. how it goes from the actual bytes in the executable \"8B15 XXXX\" to \"8B15 8C5FF703\" as in my example.\nHow the OS knows where the bytes that have to be randomised are (which exact addresses), and do it in a timely fashion?\nWill this OS process breaks if I <pre><code>NOP</code></pre> the whole instruction? (I am asking because I do not know if there is some sort of predefined index table, I only know there is a flag in the PE to mark ASLR)\n\n\nEDIT\nAs per the answer, what I undestood is that Windows will look into the <pre><code>.reloc</code></pre> section and will change one by one the references pointed in the section based on the random base. Then, if I modify the bytes of the instruction, since they have been defined in the <pre><code>.reloc</code></pre> section, my new bytes will be modified (probably I am wrong, but this is what I understood)\nHowever, I am not able to find out how Windows \"obtains\" the instruction:\n<pre><code>03CD38D4:  8B15 8C5FF703  MOV EDX, DWORD PTR DS:[3F75F8C]\n</code></pre>\nWhich is in file offset <pre><code>482CD4</code></pre> stored as:\n<pre><code>MOV EDX, DWORD PTR DS:[B25F8C]\n</code></pre>\nThe image base is <pre><code>400000</code></pre> and base of code <pre><code>1000</code></pre>.\nI cannot find anything in the <pre><code>.reloc</code></pre> section that points to <pre><code>03CD38D4</code></pre>,<pre><code>482CD4</code></pre> or similar.\n",
    "votes": "1",
    "answers": 1,
    "views": "936",
    "tags": [
        "windows"
    ],
    "user": "user1156544",
    "time": "Jan 27, 2019 at 2:37",
    "comments": [],
    "answers_data": [
        {
            "content": "ASLR does not peer inside executable\nit is a system wide exploit mitigation technique\nbasically and simply put it assigns a random base address on every load of every executable   \nthat is if you run say calc.exe five times you may see calc.exe load at five different addresses \n<pre><code>C:\\>cdb -c \"lm m calc;q\" calc | grep \"calc.*deferred\n00dd0000 00e90000   calc       (deferred)\n\nC:\\>cdb -c \"lm m calc;q\" calc | grep \"calc.*deferred\n00250000 00310000   calc       (deferred)\n\nC:\\>cdb -c \"lm m calc;q\" calc | grep \"calc.*deferred\n00370000 00430000   calc       (deferred)\n\nC:\\>cdb -c \"lm m calc;q\" calc | grep \"calc.*deferred\n00860000 00920000   calc       (deferred)\n\nC:\\>cdb -c \"lm m calc;q\" calc | grep \"calc.*deferred\n00110000 001d0000   calc       (deferred)\n</code></pre>\nthe information to fix-up lies within your executable under .reloc section\nthe loader when it loads an executable takes the base address assigned to the load and performs fix-ups based on the details provided in the .reloc section of an executable \nyou can look at fix-ups using dumpbin and other innumerable pe editors \n<pre><code>C:\\>dumpbin /relocations c:\\Windows\\System32\\calc.exe | wc -l\n7346\n\nC:\\>dumpbin /relocations c:\\Windows\\System32\\calc.exe | head -n 20\nMicrosoft (R) COFF/PE Dumper Version 14.15.26726.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file c:\\Windows\\System32\\calc.exe\n\nFile Type: EXECUTABLE IMAGE\n\nBASE RELOCATIONS #4\n    1000 RVA,       B4 SizeOfBlock\n     641  HIGHLOW            01054064  ___security_cookie\n     652  HIGHLOW            01001194  __imp__GetModuleHandleW@4\n     6A5  HIGHLOW            010013F4  __imp__LoadStringW@16\n     6B3  HIGHLOW            010540AC  ?calcSQM@@3PAVCCalculatorSQM@@A (class CCalculatorSQM * calcSQM)\n     6BD  HIGHLOW            01054A70  _Microsoft_Windows_CalculatorHandle\n     6C2  HIGHLOW            010551F8  _Microsoft_Windows_Calculator_Context\n     6C7  HIGHLOW            010321A3  _McGenControlCallbackV2@36\n     6CC  HIGHLOW            01001D5C  _Microsoft_Windows_Calculator\n     6D7  HIGHLOW            0105521C\n     707  HIGHLOW            01001EDE  ?WndProc@@YGJPAUHWND__@@IIJ@Z (long __stdcall WndProc(struct HWND__ *,unsigned in\nt,unsigned int,long))\n\nC:\\>\n</code></pre>\nRVA is relative virtual address related to base address \nso if base address = 0x10000000  then absolute will be 0x10001000\nso the address that needs fixup is  0x10001641 in the dump above \nyou can find what the preferred base of address is from the headers\nmost of the static analysis tools will load the pe in this address only  \n<pre><code>C:\\>dumpbin /headers c:\\Windows\\System32\\calc.exe | grep -i \"image base\"\n         1000000 image base (01000000 to 010BFFFF)\n</code></pre>\nyou can dump the bytes at some specified position inside executable using any of the hexeditors (using the HIGHLOW of first entry in dump above 0x641)\nyou can see the bytes are  a1 0x10054064 \nusing a40 instead of 1640 because the Base of code is 0x400 in physical file   \nwhich will be mapped to 0x1000 (Virtual Address) in the process address space   \n<pre><code>C:\\>xxd -s 0xa40 -l 10 -g 5 c:\\Windows\\System32\\calc.exe\n0000a40: a164400501 33c58945fc                .d@..3..E.\n</code></pre>\nyou can see the disassembly with (using virtual address here as this is a mapped layout not physical file )\n<pre><code>C:\\>dumpbin /disasm /range:0x1001640,0x1001645 c:\\Windows\\System32\\calc.exe\n\n  01001640: A1 64 40 05 01     mov         eax,dword ptr [___security_cookie]\n  01001645: 33\n</code></pre>\nif you now load this in a ASLR enabled machine and look at the disassembly at the same virtual address you will see the 0x1000000 (preferred load address)\nhas been fixed up\n<pre><code>C:\\>cdb -c \"? calc;u calc+1640 l1;q\" calc | grep -i -A 3 Reading\n0:000> cdb: Reading initial command '? calc;u calc+1640 l1;q'\nEvaluate expression: 5177344 = 004f0000\ncalc!WinMain+0xb:\n004f1640 a164405400      mov     eax,dword ptr [calc!__security_cookie (00544064)]\n\nC:\\>python -c \"print ( \\\"%x\\\" % (0x4f0000 + 0x54064) )\"\n544064\n</code></pre>\n",
            "votes": "3",
            "user": "user1156544",
            "time": "Jan 24, 2019 at 7:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user1156544",
                    "text": "<span class=\"comment-copy\">Thanks. I am trying to follow your explanation. So Windows uses the <code>.reloc</code> to find all \"pointers\" that have to be realocated, correct? I have been looking at <code>.reloc</code> with PEview and cannot find where the pointer to the instruction is. Knowing that the instruction is in <code>file offset=482CD4</code>, with original ref value=[B25F8C]<code>, being </code>image base=400000` and <code>base of code=1000</code>, how Windows creates the final value [3F75F8C]?</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Iirc the value stored in the binary is a VA with the ImageBase from the header as the base. So generally the relocation function will do value-header.ImageBase+loaded.ImageBase...</span>",
                    "time": null
                }
            ]
        }
    ]
}