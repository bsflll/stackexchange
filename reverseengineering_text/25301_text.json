{
    "title": "Getting function arguments in ida",
    "link": "https://reverseengineering.stackexchange.com/questions/25301/getting-function-arguments-in-ida",
    "content": "I'm trying to extract the callee arguments in my intel x86 binary using IDA Pro 7.3. I tried the following line:\n<pre><code>ida_typeinf.get_arg_addrs(call_address)  # call address points at `call some_func`\n</code></pre>\nFor some reason, the call always returns <pre><code>None</code></pre>. Is there any other way to do this?\n",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "x86",
        "idapython",
        "ida-plugin"
    ],
    "user": "Greg Doe",
    "time": "Jun 15, 2020 at 10:35",
    "comments": [],
    "answers_data": [
        {
            "content": "Okay that's our sample code:\n<pre><code>.text:0000000180002953                 lea     rcx, aSmiGetplatform ; \"SMI_GetPlatformInfo\"\n.text:000000018000295A                 mov     r12b, 0FFh\n.text:000000018000295D                 mov     ebx, 0FFFFh\n.text:0000000180002962                 call    DBG_Func\n</code></pre>\nIda Python shell we enter:\n<pre><code>Python> type ( idaapi.get_arg_addrs( 0x180002962 ) )\n<class 'NoneType'>\n</code></pre>\nAnd there it is\nThat 'none' is the problem.\nLet's fix it.\nPlace cursor in 'DBG_Func' and press 'y' (or click Edit/Functions/Set Type)\nit says:\n<pre><code>void __fastcall DBG_Func();\n</code></pre>\nIsn't DBG_Func supposed to receive and argument?\nWell so the function type definition is wrong.\nChange it to\n<pre><code>void __fastcall DBG_Func(char *FunctionNameText);\n</code></pre>\nand now test it again\n<pre><code>Python> type (idaapi.get_arg_addrs( 0x180002962 ))\n<class 'list'>\n</code></pre>\nor\n<pre><code>Python> idaapi.get_arg_addrs( 0x180002962 )\n[0x180002953]\n</code></pre>\nWow finally problem solved!\nAt 0x180002953 there is the argument that is passed to the call.\n",
            "votes": "3",
            "user": "Nadu",
            "time": "Feb 20, 2022 at 21:05",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I have found out that if in the disassembler you give the type to the function that is being called, then the ida python function will work as it should.\n",
            "votes": "1",
            "user": "Greg Doe",
            "time": "Jun 16, 2020 at 6:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}