{
    "title": "How to identify the purpose behind a bitmask?",
    "link": "https://reverseengineering.stackexchange.com/questions/19218/how-to-identify-the-purpose-behind-a-bitmask",
    "content": "The bitmask is used to manipulate the value of the integer variable. From debugging, I guessed that the bitwise operation generates nearest even integer. Here is the assembly:\n<pre><code>mov     r8d, 0FFFFFFF8h\njnz     loc_x\nmov     eax, [rsp+48]\nadd     eax, 7\nand     eax, r8d\nmov     edi, eax\nmov     r8d, eax\nmov     [rsp+48], rdi\ncall    operator_new\nxor     r8d, r8d\nmov     rsi, rax\ntest    rax, rax\njz      loc_y\n</code></pre>\nThe interested pseudo-code is:\n<pre><code>a = (b + 7) & 0xFFFFFFF8;\nc = a;\n</code></pre>\nSo, what does <pre><code>0xFFFFFFF8</code></pre> value do? And how can I determine the purpose behind that operation (and possibly any other in future)?\n",
    "votes": "2",
    "answers": 3,
    "views": "521",
    "tags": [
        "disassembly",
        "decompilation"
    ],
    "user": "Biswapriyo",
    "time": "Sep 1, 2018 at 19:40",
    "comments": [],
    "answers_data": [
        {
            "content": "No idea what the result is used for, but this is exactly what you'd see if you wanted to \"round up\" to the nearest 8-byte boundary.\nThe +7 makes sure to push all the \"irrelevant bits\" out of the lower 3 bits, while at the same time making sure that we round up (just doing the bitwise <pre><code>&</code></pre> with the integer will not guarantee this outcome). And then the bitwise <pre><code>&</code></pre> with said bitmask makes sure to strip the 3 least significant bits, yielding the result I described above.\nNow obviously what exactly this is used for is beyond me, because I lack the context you have by looking at the target binary, but the mechanism should become clear through my answer.\n",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Sep 1, 2018 at 19:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\"><code>b</code> is determined from sizeof and strlen. <code>a</code> and <code>c</code> goes to malloc, HeapAlloc etc. I'll add that in my question. Can you add some ASCII art to metion those bits in a int or long?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Just an addition to 0xC00000022Ls already given explanation. You may find his answer and many other very useful explanations and tricks in the book \"Hackers Delight\" by Henry S. Warren Jr.  :\nThere in Chapter 3-1. \"Rounding Up/Down to a Multiple of a Known Power of 2\"\nQuote:\n... an unsigned integer x can be rounded up to the next greater multiple of 8 with either of\n<pre><code>(x+7) & -8 \n</code></pre>\nor\n<pre><code>x + (-x+7).\n</code></pre>\n-8 is in 32-bit represented as <pre><code>0xfffffff8</code></pre>\n",
            "votes": "2",
            "user": "josh",
            "time": "Sep 1, 2018 at 20:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "sometimes a python script makes it easier to understand \n<pre><code>def bitbut(a,b):\n    for i in range(a,b,1):\n        b = 0 + i\n        c = b + 7\n        d = c & 0xfffffff8\n        print \"%3d\" % (d),\n    print \"\n\"\nfor i in range(0,256,16):\n    bitbut(i,i+16)\n</code></pre>\noutput \n<pre><code>  0   8   8   8   8   8   8   8   8  16  16  16  16  16  16  16 \n\n 16  24  24  24  24  24  24  24  24  32  32  32  32  32  32  32 \n\n 32  40  40  40  40  40  40  40  40  48  48  48  48  48  48  48 \n\n 48  56  56  56  56  56  56  56  56  64  64  64  64  64  64  64 \n\n 64  72  72  72  72  72  72  72  72  80  80  80  80  80  80  80 \n\n 80  88  88  88  88  88  88  88  88  96  96  96  96  96  96  96 \n\n 96 104 104 104 104 104 104 104 104 112 112 112 112 112 112 112 \n\n112 120 120 120 120 120 120 120 120 128 128 128 128 128 128 128 \n\n128 136 136 136 136 136 136 136 136 144 144 144 144 144 144 144 \n\n144 152 152 152 152 152 152 152 152 160 160 160 160 160 160 160 \n\n160 168 168 168 168 168 168 168 168 176 176 176 176 176 176 176 \n\n176 184 184 184 184 184 184 184 184 192 192 192 192 192 192 192 \n\n192 200 200 200 200 200 200 200 200 208 208 208 208 208 208 208 \n\n208 216 216 216 216 216 216 216 216 224 224 224 224 224 224 224 \n\n224 232 232 232 232 232 232 232 232 240 240 240 240 240 240 240 \n\n240 248 248 248 248 248 248 248 248 256 256 256 256 256 256 256 \n</code></pre>\nas can be seen a pattern can be discerned from the output\nfor any input that is between\n 0 and  8 both inclusive the output would be 8\n 9 and 16 both inclusive the output would be 16 and so on\nso the assembly snippet rounds up the input to the next boundary\nthat is a multiple of 8\n",
            "votes": "2",
            "user": "blabb",
            "time": "Sep 2, 2018 at 11:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}