{
    "title": "Is PNF's JEB Reverse Engineering platform written in pure Java?",
    "link": "https://reverseengineering.stackexchange.com/questions/20606/is-pnfs-jeb-reverse-engineering-platform-written-in-pure-java",
    "content": "I have seen the JEB decompiler by PNF Software morph from a specialised decompiler to a full fledged reverse engineering platform like Capstone or IDA Pro.\nWhile examining the earlier versions of JEB, specifically the 1.x ones (some have been cracked and shared online, I noticed that it was created in pure Java, without any native code (JNI) and at most with the Jython library for access via Python API.\nIn fact, this Wikipedia article states that JEB's base language is Java.\nHowever, if you look at the current features of JEB (currently at ver 3.X),\nis it possible that the entire software is written in pure Java? From what I know about Java's Write Once Read Anywhere, there seems to be no separate downloads for Windows, Mac or Linux.\nSo is it technically possible to implement an IDA-Pro version in pure Java without any native code?\nEven Capstone have new language (Python, Ruby and Java) bindings, but the decompiler engine is written in C/C++. Is this the case for JEB?\nI note there have been attempts here, and here plus a research article to write a machine code dissembler/interpreter in pure Java, but doubt it can be stable enough to run a RE platform. Those repos I mentioned are experimental and outdated.\nAs I do not currently have enough money to get myself a JEB licence, can anyone using or have dug in care to comment, so that we can maintain factual information online and on Wikipedia?\nEDIT: Ok. So when I finally do have the money to get myself a licence, I would like to know if its possible to hook <pre><code>LoadLibraryA</code></pre> or <pre><code>LoadLibraryW</code></pre> on Windows to determine. JEB uses an Eclipse RCP executable. So do I hook that executable or the JVM executable? Because the JVM on Windows uses many Windows API calls which will probably utilise the LoadLibraryX calls.\n",
    "votes": "2",
    "answers": 2,
    "views": "855",
    "tags": [
        "java",
        "decompiler",
        "jeb"
    ],
    "user": "Nederealm",
    "time": "Mar 13, 2019 at 19:25",
    "comments": [],
    "answers_data": [
        {
            "content": "There's no technical limitation preventing software development in Java verses C. The only major advantage is execution speed. Moreover, as JEB is directed towards Java programs (android APKs) writing it in Java makes sense.\nHowever, this question is not really about reverse engineering.\n",
            "votes": "4",
            "user": "NirIzr",
            "time": "Feb 12, 2019 at 18:56",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Alex Byrde",
                    "text": "<span class=\"comment-copy\">JEB is in no way limited to Android. At least JEB Pro is not. I use it to analyze Windows malware and occasionally look at Ethereum contract, since it supports EVM decompilation.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Absolutely. Implying JEB is limited to Android was definitely not my intention. JEB has an extremely varied support nowadays.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Apparently yes most of JEB code base seems to be in Java. You can look at the jeb*.jar files inside your install folders. They're huge, but that will give you an indication: thousands of big javaclass files in there, very few native so files.\n",
            "votes": "1",
            "user": "Alex Byrde",
            "time": "Mar 14, 2019 at 18:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nederealm",
                    "text": "<span class=\"comment-copy\">Contrast with Ghidra where the decompiler and debugger is in native</span>",
                    "time": null
                }
            ]
        }
    ]
}