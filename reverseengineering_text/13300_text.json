{
    "title": "Is it possible to change the value of a register when a certain instruction is executed?",
    "link": "https://reverseengineering.stackexchange.com/questions/13300/is-it-possible-to-change-the-value-of-a-register-when-a-certain-instruction-is-e",
    "content": "I was wondering if it was possible to change the value of a register when an instruction gets executed. For example\n<pre><code>0x10 call eax\n</code></pre>\nSay <pre><code>eax</code></pre> contains <pre><code>0x20</code></pre> at that point, I want to add <pre><code>0x10</code></pre> to it so that the address that gets called is now <pre><code>0x30</code></pre>.\nWhat I tried doing was set a <pre><code>AddVectoredExceptionHandler</code></pre> and put an <pre><code>INT3</code></pre> on <pre><code>0x10</code></pre>. When my exception handler gets called, I restore the original byte at <pre><code>0x10</code></pre>. Then I add <pre><code>0x10</code></pre> to <pre><code>eax</code></pre> and jump to <pre><code>ExceptionInfo->ContextRecord->Eip</code></pre>. This obviously doesn't work well because I never return to the OS.\nIs there another way or is this even possible?\n",
    "votes": "0",
    "answers": 1,
    "views": "312",
    "tags": [
        "windows",
        "x86",
        "exception"
    ],
    "user": "Majiick",
    "time": "Aug 18, 2016 at 10:16",
    "comments": [],
    "answers_data": [
        {
            "content": "Alright, so apparently you can just edit <pre><code>ExceptionInfo->ContextRecord->Eax</code></pre> inside your \n<pre><code>LONG CALLBACK VectoredHandler(\n  _In_ PEXCEPTION_POINTERS ExceptionInfo\n);</code></pre> \nfunction and the OS will set the eax to that value when it returns the execution back to where the exception was(If you return EXCEPTION_CONTINUE_EXECUTION.)\n",
            "votes": "1",
            "user": "Majiick",
            "time": "Aug 18, 2016 at 4:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}