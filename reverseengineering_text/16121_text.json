{
    "title": "Find what writes to a dynamic memory address",
    "link": "https://reverseengineering.stackexchange.com/questions/16121/find-what-writes-to-a-dynamic-memory-address",
    "content": "I am looking at some code using x64dbg and found the assembly code that writes to a certain block of memory: <pre><code>dword ptr [rdx + 0x18]</code></pre>. And changing this space in the dump has an output that I am looking for. \nBut, just out of curiosity, is it possible to find what initially writes to this memory space? It seems to be dynamically allocated as comparing the dumps of the memory space is not identical, and the offset from the start of the block changes each time.\nI have tried to put a breakpoint on the memory space, but as it has already been written, I can't back track to see what wrote to it (or can I?).\nOr am I completely off track?\n",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "memory",
        "debuggers",
        "x64dbg"
    ],
    "user": "Seen Green",
    "time": "Aug 17, 2017 at 13:42",
    "comments": [
        {
            "user": "Michael Pittino",
            "text": "Place a \"Hardware - Write\" Breakpoint on the address in the dump window. It will break whenever a instruction modifies the data at your address.\n",
            "time": null
        },
        {
            "user": "KeyC0de",
            "text": "@MichaelPittino Yes, but how can we find out which instruction performs that access? How can we get to disassembly to see it?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you were under <pre><code>gdb</code></pre>, I would advise you to use a watchpoint (which can be specified by an arbitrary formula possibly including registers).\nIn the case of x64dbg, what you are looking for are called \"Memory Breakpoint\".\nI would advise you to look for these \"Memory breakpoints\" in this very complete tutorial on x64dbg or directly from the official documentation.\nAs I am not an x64dbg user, I do not know if it allows complex formula (as it is in <pre><code>gdb</code></pre> now). But, I hope that this will be the case.\n",
            "votes": "2",
            "user": "perror",
            "time": "Aug 17, 2017 at 12:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}