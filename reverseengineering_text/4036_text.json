{
    "title": "How to decrypt games? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4036/how-to-decrypt-games",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nNow I most definitely could be wrong considering I am pretty new to hacking files like these anyways, but In hex editors, I always open files to what I think is an encryption. Now I don't know if these files are actually encrypted or maybe they are in a programming language I'm not aware of, but is it possible to \"decrypt\" said files?\n",
    "votes": "0",
    "answers": 2,
    "views": "13k",
    "tags": [
        "decryption"
    ],
    "user": "Mathew Crogan",
    "time": "11 years ago",
    "comments": [
        {
            "user": "broadway",
            "text": "Your question is extremely vague. I suggest fleshing it out with some increased detail.\n",
            "time": null
        },
        {
            "user": "0xcaff",
            "text": "What game are you trying to \"hack\"?\n",
            "time": null
        },
        {
            "user": "nrz",
            "text": "I think you confuse regular hexadecimal representation used by hex editors (for example) for encryption. The code may be machine code or some bytecode. You need to give us more details about the program (the executable header, file type and so on). The name of the game would help a lot.\n",
            "time": null
        },
        {
            "user": "Mathew Crogan",
            "text": "The file type is an .swf. The game was downloaded and this has happened on all the .swf games but that game is last stand 3. I've hacked using hex editors before, but never .swf games.\n",
            "time": null
        },
        {
            "user": "Mathew Crogan",
            "text": "Also I don't know how to simplify it any more. The question was if files could appear as encrypted in hex editors.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Definitely not just use the hex editor.\nYou should use the debugger OllyDbg or ImmunityDebugger, and bring the following questions:\n\nWhat language it was written the program\nWhen the program performs the decryption of the file\nWhat happens before and after the file has been decrypted\nWhich API could use\nBoth with OllyDbg that with Immunity can see all the intermodular calls\nAt this point you can set breakpoints and debug APIs found \n\nThe process is not immediate, you must first locate the piece of code that performs the decryption of the file to make a good analysis.\n",
            "votes": "3",
            "user": "invictus85",
            "time": "Apr 8, 2014 at 14:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I depends on the format the data is in\n\nPython/JavaScript Files: are run in a interpreter and the source code can simply be opened in a text editor.\nJava Files: are compiled to java bytecode and run in a vm. Java bytecode is not easy to read or understand but there are programs which can decompile java bytecode into java source files.\nBinaries: These are compiled programs. It is impossible to automatically convert this back to source code but you disassemble it.\nJSON/YAML: These are commonly used to store structured data. You can view them in a text editor.\n\nIf you want to reverse engineer a game first learn to program. Opening files with hex editors won't get you very far unless you understand what is happening.\n",
            "votes": "3",
            "user": "0xcaff",
            "time": "Apr 8, 2014 at 18:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}