{
    "title": "Debugging third party android APKs",
    "link": "https://reverseengineering.stackexchange.com/questions/10902/debugging-third-party-android-apks",
    "content": "What are some ways to debug third party android apps (apps you don't have the source code to)? I would like to step through the APK instruction by instruction, and possibly set breakpoints on certain APIs or certain smali instructions.\nI've tried decompiling with apktool, loading into netbeans, and the connecting to the emulator, and I've also tried using IDA Pro, but I always get errors along the lines of \"JDWP error: Connection reset by peer\". I've tried with both the default Android emulator and Genymotion with Android 5.0.1.\nHas anyone had any success with this? Could you describe your setup and tools that you used?\n",
    "votes": "16",
    "answers": 1,
    "views": "27k",
    "tags": [
        "android",
        "apk"
    ],
    "user": "gsgx",
    "time": "Sep 18, 2015 at 20:21",
    "comments": [
        {
            "user": "Antimony",
            "text": "When all else fails, there's always printf (i.e. Log.e) debugging.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "To debug an APK without the source code, you need to perform the following:\n\nEnable debug mode in the APK (use apktool to achieve this)\nSign the APK (use keytool and jarsigner)\nInstall the app and identify the debug port of the app using Android Debug Monitor or DDMS\nUse an IDE with support for JDWP like NetBeans pointing to the project with the decompiled java or smali.\n\nYou can find the commands yo use in this blog (section 5 Dynamic analysis and debugging) First steps performing penetration testing on an Android application\n",
            "votes": "16",
            "user": "Community",
            "time": "Jan 2, 2021 at 21:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "gsgx",
                    "text": "<span class=\"comment-copy\">I tried this, but I'm not able to set breakpoints. I made sure to both decompile and build in debug mode. Here's the error:  <code>Not able to submit breakpoint LineBreakpoint ChessFreeActivity$1.java : 28, reason: No executable location available at line 28 in class uk.co.aifactory.chessfree.ChessFreeActivity$1.</code></span>",
                    "time": null
                },
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">It means the code in your project and the IDE is not in sync. Decompiled code will probably not allow this. Use the smali and try Intellij if it works.</span>",
                    "time": null
                },
                {
                    "user": "gsgx",
                    "text": "<span class=\"comment-copy\">What do you mean by use the smali? I thought we had to use the \"fake\" Java code produced by <code>apktool -d</code>, otherwise the IDE wouldn't recognize it. Can you add smali as source files in Intellij?</span>",
                    "time": null
                },
                {
                    "user": "Behrouz.M",
                    "text": "<span class=\"comment-copy\">@gsingh2011 check this: <a href=\"https://github.com/JesusFreke/smali/wiki/smalidea\" rel=\"nofollow noreferrer\">github.com/JesusFreke/smali/wiki/smalidea</a></span>",
                    "time": null
                },
                {
                    "user": "3asm_",
                    "text": "<span class=\"comment-copy\">@pixar great tool, too bad it is not maintained anymore.</span>",
                    "time": null
                }
            ]
        }
    ]
}