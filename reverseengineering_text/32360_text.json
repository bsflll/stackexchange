{
    "title": "Trying to decode a vertex format",
    "link": "https://reverseengineering.stackexchange.com/questions/32360/trying-to-decode-a-vertex-format",
    "content": "I'm trying to decode a vertex format that is used by the assets of a 3D application.\nI've identified the 0x24 stride. Every section starts with the position of the vertex, that is 3 32bit floats + 1 0xFFFFFFFF for as the fourth component/padding whatever that is. Then, then there are another 2 32bit float which 99.999% are the UV coordinates of each vertex.\nAnd then there's 12 bytes that I have absolutely no idea what on earth they are. An indicative set of these bytes looks like this:\n\nSo these are definitely not 32bit floats. The thing is that there is not a single time I've worked on any file that a vertex stream does not include normals. So normals should be stored somehow in the stream. However, it is insane to me that they are wasting 8 bytes for UVs and normals are stored in an obscure format.... I've also crosschecked wether the 2 floats were part of a normalized normal vector, but this is also not the case.\nThe mesh is not skinned so they are probably not bytes that could be used for blend indices and thus, there are no weights either. I also tried to interpret them as half floats but they numbers really do not make any sense. So I suspect that something else is going on here, probably some masking of some sort.\nAny help is very much appreciated.\nPS: I've also attached a part of the stream.\nhttps://temp-file.org/g8LPFepYbRfLHRW/file\n",
    "votes": "0",
    "answers": 1,
    "views": "78",
    "tags": [
        "graphics"
    ],
    "user": "Greg",
    "time": "Oct 5, 2023 at 3:45",
    "comments": [
        {
            "user": "user7290573",
            "text": "What's the software? You could try manually editing those values (e.g. all <pre><code>0x00</code></pre> or <pre><code>0xFF</code></pre>) and see if anything happens when you load the file.\n",
            "time": null
        },
        {
            "user": "Greg",
            "text": "It is a game of some sort. Tbh indeed all the assets are unpacked, so maybe I'll try to do that and see how it goes.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "A bit underwhelming way to resolve that problem, but after testing it seems that indeed in these 8 first bytes includes both normals AND tangents. Both are saved as signed bytes. Still cannot understand who decided to spend the same amount of memory just for one UV channel compared to normals and tangents....\n",
            "votes": "0",
            "user": "Greg",
            "time": "Oct 8, 2023 at 16:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}