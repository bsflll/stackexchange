{
    "title": "Hex-Rays Decompiler: Buffer on the stack",
    "link": "https://reverseengineering.stackexchange.com/questions/2752/hex-rays-decompiler-buffer-on-the-stack",
    "content": "I am currently reversing a windows driver in order to write a Linux compatible driver for a DVB card, but I have come up against a small issue that I can work around, but if it is possible I would like to make it correct.\nThere is a function that part of which reads the 256 byte PCI config space into a local buffer that has been allocated on the stack. The decompilation shows the output as:\n<pre><code>unsigned __int16 configSpaceBuffer[128];\n\n.... SNIP ...\n\nconfigSpace->vtable->tmRegisterAccess_ConfigSpace__tmIGetReg(\n        configSpace,\n        &address,\n        4,\n        configSpaceBuffer,\n        256u,\n        0)\n\n _this->field_4A = v74;\n _this->field_4C = *(unsigned __int16 *)configSpaceBuffer;\n _this->field_4E = v75;\n _this->field_50 = v77;\n _this->field_52 = v76;\n</code></pre>\nIs it possible to fix the detected function variables to show the following instead?\n<pre><code> _this->field_4A = configSpaceBuffer[0];\n _this->field_4C = configSpaceBuffer[1];\n _this->field_4E = configSpaceBuffer[2];\n _this->field_50 = configSpaceBuffer[6];\n _this->field_52 = configSpaceBuffer[8];\n</code></pre>\n",
    "votes": "11",
    "answers": 1,
    "views": "824",
    "tags": [
        "ida",
        "hardware",
        "decompiler",
        "driver",
        "hexrays"
    ],
    "user": "Geoffrey",
    "time": "Oct 24, 2013 at 19:54",
    "comments": [],
    "answers_data": [
        {
            "content": "I found the solution. Double click the variable name (<pre><code>configSpaceBuffer</code></pre> in this case) which brings up the stack window for the method where you can undefine the invalid variables and then define it as an array.\nHere is the output after this change:\n<pre><code>      _this->ConfigSpace1 = configSpaceBuffer[1];\n      _this->ConfigSpace0 = configSpaceBuffer[0];\n      _this->ConfigSpace4 = LOBYTE(configSpaceBuffer[4]);\n      _this->ConfigSpace23 = configSpaceBuffer[23];\n      _this->ConfigSpace22 = configSpaceBuffer[22];\n</code></pre>\n",
            "votes": "15",
            "user": "Geoffrey",
            "time": "Sep 5, 2013 at 7:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">You don't even need to undefine the invalid variables. Once you tell IDA that <code>field_4A</code> is an array, it will automatically remove the invalid variables.</span>",
                    "time": null
                }
            ]
        }
    ]
}