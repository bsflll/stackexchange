{
    "title": "inspecting the .hex file generated by gpasm",
    "link": "https://reverseengineering.stackexchange.com/questions/30005/inspecting-the-hex-file-generated-by-gpasm",
    "content": "To answer my own question here, I wrote a small sample program, <pre><code>example.asm</code></pre>:\n<pre><code>var_1 equ H'0001'\n\n    constant var_2=H'0002'\n\n#define var_3 H'0003'\n\ncblock H'0004'\n    var_4\nendc\n\n    END\n</code></pre>\nand compiled it with gpasm using the instructions here, <pre><code>Makefile</code></pre>\n<pre><code>all: example.asm    \n    gpasm -p p10f200 example.asm \n\nclean:\n    rm -f *.hex *.lst *.cod *.asm~ \n</code></pre>\nNow inspecting the <pre><code>example.hex</code></pre> file with <pre><code>hexdump -C example.hex</code></pre>, I get:\n\n00000000  3a 30 32 30 30 30 30 30  34 30 30 30 30 46 41 0a  |:020000040000FA.|\n00000010  3a 30 30 30 30 30 30 30  31 46 46 0a              |:00000001FF.|\n0000001c\n\nwhich I have no clue how to interpret, and the <pre><code>objdump -d example.hex</code></pre>, throws this error:\n\nexample.hex:     file format ihex\n\nobjdump: can't disassemble for architecture UNKNOWN!\n\neventually I want to know what are the differences between the above four different methods of defining a constant and compare their performance and memory efficiency.\n",
    "votes": "1",
    "answers": 0,
    "views": "157",
    "tags": [
        "disassembly",
        "objdump"
    ],
    "user": "Foad",
    "time": "Feb 7, 2022 at 22:14",
    "comments": [
        {
            "user": "Peter Cordes",
            "text": "Isn't <pre><code>.hex</code></pre> already a text file?  Looks like you're hex-dumping an ASCII hex dump, not a <pre><code>.bin</code></pre>\n",
            "time": null
        },
        {
            "user": "Foad",
            "text": "Dear @PeterCordes , My apologies. I am absolutely ignorant about the topic. My final goal is to compare the compiled version of the above four syntax and see the differences.  Where did I go wrong, and how should I do that instead?\n",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "They're text files, so <pre><code>diff -u foo1.hex foo2.hex</code></pre>.  And/or just look at them with a text editor you know how to use, or a GUI diff tool like <pre><code>meld</code></pre>.  Of course, you don't use any of the constants, so like we explained in comments on your SO question, no part of the assemblers output corresponds to them at all; your output is the same as for an empty file.  And if you did use them, they'd all be equivalent (or would be if you'd used the same numbers)\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "you are defining not using there will be no assembly generated for defines and no efficiency calculations can be done you need to burn cycles for calculating efficiency performance , etc\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "there seems to be a gpdasm available as per the doc link you posted which is capable of taking the hex file and disassemble it why not try using it instead of hexdump or objdump ?\n",
            "time": null
        }
    ],
    "answers_data": []
}