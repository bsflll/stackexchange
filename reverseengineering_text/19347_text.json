{
    "title": "Recognizing instructions containing low-level control flows",
    "link": "https://reverseengineering.stackexchange.com/questions/19347/recognizing-instructions-containing-low-level-control-flows",
    "content": "There are some <pre><code>x86</code></pre> instructions which containing a low-level** control flow in its semantics, for example div because its semantics is roughly as:\n<pre><code>if (source == 0)\n   throw exception...\nelse\n   return rdx:rax / source\n</code></pre>\nor instructions with <pre><code>rep</code></pre> prefix, etc. While a <pre><code>mov</code></pre> or a <pre><code>xor</code></pre> doesn't contain any control flow.\nI am trying to classify instructions of <pre><code>x86</code></pre> ISA depending on this criteria, my starting point now is looking into Xed's API to know if there exists some function which can give such an information, but it doesn't seem having any.\nConcretely for <pre><code>div</code></pre>, I've checked xed_decoded_inst_conditionally_writes_registers, xed_operand_conditional_read/write, but all of them return false.\n** I'm sorry for this word, I don't know the precise terminology for this case.\nEdit: many thanks for comments but I've badly expressed my question. I update in the following some discussion to make the context more clear.\nXed's API would not give full instruction semantics, but some. For example, with some xed API (which I described above) we can get:\n<pre><code>mov rax, r8\n\noperands:                       2\nuses rflag:                     no\nhas conditional read operand:   no\nhas conditional write operand:  no\nconditionally write register:   no\n</code></pre>\nand\n<pre><code>cmovb rax, r8\n\noperands:                       3\nuses rflag:                     yes\nhas conditional read operand:   no\nhas conditional write operand:  yes\nconditionally write register:   yes\n</code></pre>\nso at least I know that <pre><code>cmovb</code></pre> should have some conditional control flow in its semantics, while <pre><code>mov</code></pre> has not. \nI tried to apply this logic for other instructions: it works for some (e.g. <pre><code>rep movsb</code></pre>, etc.), but not all: \n\nfor <pre><code>div</code></pre>*** (or <pre><code>mov</code></pre>), it would be \"acceptable\"* to say that there is no\nconditional control flow, IMHO. We consider that an exception is side\neffect: the instruction is not executed (or only partially executed)\nif the exception is thrown\nfor other cases of, e.g. <pre><code>minps</code></pre>, this logic simply doesn't work\n\n*** I have initially thought that <pre><code>div</code></pre> contains conditional data-flow, but changed later :)\n",
    "votes": "3",
    "answers": 0,
    "views": "78",
    "tags": [
        "x86",
        "control-flow-graph"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Sep 16, 2018 at 8:19",
    "comments": [
        {
            "user": "mrexodia",
            "text": "Not automated, but in the Intel manual for instructions there is information about when exceptions happen. See for example c9x.me/x86/html/file_module_x86_id_176.html\n",
            "time": null
        },
        {
            "user": "Abigail",
            "text": "A <pre><code>mov</code></pre> or <pre><code>xor</code></pre> may alter control flow in the same way by triggering a page fault eception with invalid memory access.\n",
            "time": null
        }
    ],
    "answers_data": []
}