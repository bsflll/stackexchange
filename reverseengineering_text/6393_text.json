{
    "title": "How to include these exception handle symbols in x86 assembly code?",
    "link": "https://reverseengineering.stackexchange.com/questions/6393/how-to-include-these-exception-handle-symbols-in-x86-assembly-code",
    "content": "The test is on 32bit x86 Linux, with <pre><code>g++</code></pre> 4.6.3.\nSo basically I use a IDA pro script to recover the <pre><code>.gcc_excpt_table</code></pre> and <pre><code>.eh_frame</code></pre> sections from binary compiled from <pre><code>C++</code></pre> language.\nBasically I want to reuse the dumped information of these two exception handling tables in a new assembly code disassembled from this <pre><code>C++</code></pre> ELF binary.\nI put these two tables into the assembly code produced by disassembler, solving all intra-module address issue (basically translate concrete addresses into symbols) and re-compile it like this:\n<pre><code>g++ final.s\n</code></pre>\nHowever, there are three symbols that can not be found or I just don't know how to define it.\n\n<pre><code>_Unwind_Resume</code></pre> are undefined\n<pre><code>__FRAME_END__</code></pre> are undefined\nIt seems that <pre><code>eh_frame</code></pre> requires the beginning address of <pre><code>.plt</code></pre> table, but is there anyway to get the beginning address of <pre><code>.plt</code></pre> table during compiling? I know I can use the symbol <pre><code>_GLOBAL_OFFSET_TABLE_</code></pre> to represent the beginning address of table <pre><code>.got.plt</code></pre>, but after a quick search, I just don't know whether there is a similar symbol representing <pre><code>.plt</code></pre> table.\n",
    "votes": "2",
    "answers": 0,
    "views": "286",
    "tags": [
        "disassembly",
        "x86",
        "c++",
        "reassembly",
        "exception"
    ],
    "user": "lllllllllllll",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": []
}