{
    "title": "Competitive Types",
    "link": "https://reverseengineering.stackexchange.com/questions/6261/competitive-types",
    "content": "I have the following lines discovered in a piece of code (using IDA PRO) :\n<pre><code> ...\n ...\n push 44h\n pop edi\n push edi        ; size_t\n xor esi, esi\n lea eax, [ebp+StartupInfo]\n push esi        ; int \n push eax        ; void *\n call _memset\n ...\n ...\n</code></pre>\nWhen I saw the line lea eax, [ebp+StartupInfo] I thought, okay eax is a pointer to the structure STARTUPINFO. With int esi = 0 or NULL (see the line xor esi, esi) and with size_t edi = 44h and by calling memset, they must fill the first 44 bytes of STARTUPINFO (that would be the elements cb, lpReserved,....,wShowWindow).\nBut the line \n     push eax        ; void *\nirritates me. How can eax has the type Startupinfo and void at the same time? \nAfter that, I found out that the first parameter of memset()-function must have the type void. And so, the question mark in my mind is now bigger...\n",
    "votes": "1",
    "answers": 1,
    "views": "111",
    "tags": [
        "assembly",
        "struct"
    ],
    "user": "user3097712",
    "time": "Sep 19, 2014 at 16:58",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "its the memset declaration, parameter is a size_to_memset (size_t), value to fill with (int), memory address (void*) and the void*, StartupInfo etc are all just high level concepts.. at the end of the day the chip doesnt care what it is, its just a number..\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "IDA knows that the prototype for the <pre><code>_memset</code></pre> function is <pre><code>_memset(void *, int, size_t)</code></pre>, so it's showing you that the value of <pre><code>eax</code></pre> in <pre><code>push eax</code></pre> is for the <pre><code>void *</code></pre> parameter.\nHowever, later on in this function, a pointer to the <pre><code>StartupInfo</code></pre> structure is likely passed to <pre><code>CreateProcess</code></pre>, which is why IDA named it as such.\n\nHow can eax has the type Startupinfo and void at the same time?\n\n<pre><code>eax</code></pre> is just a register that holds a value, which in your disassembly above is the address of the <pre><code>StartupInfo</code></pre> structure. Types are high-level concepts, so when handled by <pre><code>_memset</code></pre>, the value of <pre><code>eax</code></pre> is interpreted as a <pre><code>void *</code></pre>, and when it's handled by <pre><code>CreateProcess</code></pre>, it's interpreted as a pointer to a <pre><code>STARTUPINFO</code></pre> structure.\n",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Sep 19, 2014 at 17:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thanks for your answer. The part \" the value of eax is interpreted as a void *, and when it's handled by CreateProcess, it's interpreted as a pointer to a STARTUPINFO structure.\" was completely new for me. Thx!</span>",
                    "time": null
                }
            ]
        }
    ]
}