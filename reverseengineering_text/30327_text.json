{
    "title": "IDA show xrefs in .pdata and nothing else",
    "link": "https://reverseengineering.stackexchange.com/questions/30327/ida-show-xrefs-in-pdata-and-nothing-else",
    "content": "I'm debugging the Windows ARM64 version's EFI (<pre><code>bootaa64.efi</code></pre>).\nUsing QEMU and GDB I was able to find that <pre><code>bootaa64.efi</code></pre> was stuck in one of the two functions <pre><code>BlKernelSp0SystemErrorHandler</code></pre> and <pre><code>BlKernelExceptionHandler</code></pre>. The image below is two functions when I load <pre><code>bootaa64.efi</code></pre> to IDA.\n\nI'm not really good at ARM64 assembly but I recognized these functions are just forever loops.\nThe code stuck in that loop means somehow the function is called. But IDA just show two xref, one is the function call itself (loop) and the other is <pre><code>.pdata</code></pre> xref:\nI want to know what called these functions. Thanks!\n",
    "votes": "1",
    "answers": 2,
    "views": "217",
    "tags": [
        "ida",
        "windows",
        "arm",
        "arm64",
        "uefi"
    ],
    "user": "raspiduino",
    "time": "Apr 26, 2022 at 6:02",
    "comments": [
        {
            "user": "raspiduino",
            "text": "Found this about <pre><code>.pdata</code></pre> section. It is exception handling section\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "These functions look like exception handlers and are probably “called” by the processor when an exception or a fault happens. You need to inspect system registers to determine the cause of the exception and where it happened. See the ARM manuals for more information.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 26, 2022 at 23:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "raspiduino",
                    "text": "<span class=\"comment-copy\">Can you provide me a link / hint for this? Thanks!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@raspiduino maybe check <a href=\"https://developer.arm.com/documentation/den0024\" rel=\"nofollow noreferrer\">ARM® Cortex™-A Series Programmer's Guide</a></span>",
                    "time": null
                },
                {
                    "user": "raspiduino",
                    "text": "<span class=\"comment-copy\">Found it: the register <a href=\"https://developer.arm.com/documentation/ddi0595/2021-06/AArch64-Registers/ELR-EL1--Exception-Link-Register--EL1-\" rel=\"nofollow noreferrer\"><code>ELR_EL1</code></a> hold the address to return from exception. It was true in this case, when I replace the forever loop with <code>ERET</code> (see my answer below) it return to the exact same address!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I don't know if it's true or not, but I patched the <pre><code>B BlKernelSp0SystemErrorHandler</code></pre> and <pre><code>B BlKernelExceptionHandler</code></pre> with <pre><code>ERET</code></pre> (aka exception return), and the EFI file jumps back and stop at the place of a <pre><code>BRK</code></pre> instruction (as a result of branching because a compare went wrong), which seems true for me since my KVM module didn't correctly implement that stubs yet.\nHope this helps for somebody.\n",
            "votes": "1",
            "user": "raspiduino",
            "time": "Aug 4, 2022 at 6:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}