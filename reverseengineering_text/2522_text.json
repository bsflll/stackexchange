{
    "title": "Binary instrumentation with Python",
    "link": "https://reverseengineering.stackexchange.com/questions/2522/binary-instrumentation-with-python",
    "content": "I'm interested in performing (dynamic) binary instrumentation using Python to be able to analyze the binary by instructions during execution for\n\nWindows\n\nLinux\nCan someone suggest such tool/framework? Does it even exist or possible?\n",
    "votes": "10",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis"
    ],
    "user": "PhoeniX",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "Man ... that is going to be hella slow.\n",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "I know, but currently I do not really care :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "From https://code.google.com/p/processtap/ -\n\nProcessTap is a dynamic tracing framework for analyzing closed\n  source-applications. ProcessTap is inspired by DTrace and SystemTap,\n  but it is specific for analyzing closed-source user-space\n  applications. ProcessTap leverages dynamic binary instrumentation to\n  intercept the events of interest (e.g., function calls, system call,\n  memory accesses, and conditional control transfers). Although the\n  current implementation relies on PinTool, alternative back-ends for\n  instrumentation (e.g., Valgrind, Qemu, or DynamoRIO) can be used. The\n  language used in ProcessTap for writing scripts to instrument\n  applications is Python.\n",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jul 22, 2013 at 22:35",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Despite being an afternoon hack, this static binary instrumenter might get you part way there. However, consider these crucial limitations:\n\nIt's not dynamic insofar as it runs at compile time, not at runtime.\nIt is also not comprehensive, in the sense that shared and dynamically loaded libraries will not be instrumented by this.\nIt provides no mechanisms for maintaining state, except by linking in your own code (exampled in the <pre><code>gc</code></pre> directory and <pre><code>Makefile</code></pre>). There isn't a good way of connecting instrumentation to that code, except by perhaps declaring and using an <pre><code>extern</code></pre> symbol whose mangled name you know.\n\nBUT, it is in python ;-)\n",
            "votes": "4",
            "user": "Peter Goodman",
            "time": "Sep 9, 2013 at 20:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}