{
    "title": "How to solve this anti-disassembler trick?",
    "link": "https://reverseengineering.stackexchange.com/questions/22684/how-to-solve-this-anti-disassembler-trick",
    "content": "I have this __asm instruction in C code:\n<pre><code>int func_0x8b4c55a0()\n{\n    __asm\n    {\n        call $ +5\n        add[esp],5\n        ret\n    }\n\n}\nint main()\n{\n    char cVar1;\n    if ((cVar1 = func_0x8b4c55a0(), cVar1 == -0xe) || 1)\n    {\n        int a = 5;\n        int b = 3;\n        int c = 0;\n        c = a + b;\n    }\n    return 0;\n}\n</code></pre>\nAnd this is how it looks like in IDA:\n\nHow it is possible to solve this <pre><code>ret</code></pre> trick?\n",
    "votes": "1",
    "answers": 2,
    "views": "282",
    "tags": [
        "ida",
        "c",
        "anti-debugging"
    ],
    "user": "Elvin",
    "time": "Dec 7, 2019 at 15:10",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. What do you mean by solving it? Finding the exact value for the return address? Because this won't be possible as the value likely differs with every invocation of the program.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I am unsure what you mean by \"solving\" this, but the meaning of the code is rather obvious and even more so in the screenshot you provided. Simplified version:\n<pre><code>call $+5\nadd [esp], 5\nret\nxor eax, eax\nret\n</code></pre>\nAnd with annotations:\n<pre><code>_main:\n  call $+5     ; call address of next instruction, placing return address on stack (esp)\n  add [esp], 5 ; add 5 bytes to the return address\n  ret          ; return to the address from the stack ... which happens to be\n  xor eax, eax ; ... this instruction\n  ret          ; return for good from _main ...\n</code></pre>\nSo what this does is to return 0 as a 32-bit value from <pre><code>_main</code></pre>.\nGiven the (decompiled) condition:\n<pre><code>if ((cVar1 = func_0x8b4c55a0(), cVar1 == -0xe) || 1)\n</code></pre>\n... this doesn't change a thing, however, as the <pre><code>|| 1</code></pre> will ensure that this condition is always true and <pre><code>cVar1</code></pre> doesn't subsequently get used.\nSo as far as you provide context, this is pure distraction.\n",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Dec 9, 2019 at 10:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "in the Conditional Statement\nif ((cVar1 = func_0x8b4c55a0(), cVar1 == -0xe) || 1) \nCVar1 is initialised and then evaluated \nfunc_0x8b4c55a0()  returns  random garbage  (basically it will return what was in eax register prior to calling the function \nnow this can be -0xe or anything else from 0x0 to 0xffffffff \nso the if will result in either True or False and the or (||) operator will always make it  TRUE     \nso all the locals  a,b,c will be initialised and evaluated \nbut it appears your binary was compiled with optimizations enabled\nand all of these dead code has been eliminated  and the\n__asm function block  has been inlined into your main().\nso basically you can simply nop out the entire junk block.\n",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 9, 2019 at 18:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}