{
    "title": "Strange repeating string \"FeTFeTFeTFeTFeTFe...\" in binaries",
    "link": "https://reverseengineering.stackexchange.com/questions/4553/strange-repeating-string-fetfetfetfetfetfe-in-binaries",
    "content": "Sometime, when doing reverse in some binaries I get this kind of ASCII strings:\n<pre><code>00000000: 4665 5446 6554 4665 5446 6554 4665 5446  FeTFeTFeTFeTFeTF\n00000010: 6554 4665 5446 6554 4665 5446 6554 4665  eTFeTFeTFeTFeTFe\n00000020: 5446 6554 4665 5446 6554 4665 5446 6554  TFeTFeTFeTFeTFeT\n00000030: 4665 5446 6554 4665 5446 6554 4665 5446  FeTFeTFeTFeTFeTF\n00000040: 6554 4665 5446 6554 4665 5446 6554 4665  eTFeTFeTFeTFeTFe\n00000050: 5446 6554 4665 5446 6554 4665 5446 6554  TFeTFeTFeTFeTFeT\n</code></pre>\nWhat does it correspond to ?\nEdit: following editor request, clarification:\nWhen you have a reverse engineering, static analysis style, sometime you end up with binaries you can't run, can't even load in debugger / IDA due to strange arch or lack of known entry point. Therefore, understanding the content of the files, sections, strings is very useful. Hence the question.\n",
    "votes": "1",
    "answers": 1,
    "views": "286",
    "tags": [
        "binary-analysis",
        "strings"
    ],
    "user": "Phil L.",
    "time": "Jun 6, 2014 at 17:25",
    "comments": [
        {
            "user": "nrz",
            "text": "Why don't you pass the string to a disassembler to find out? Anyway, it's impossible to say what it corresponds to, as you don't mention the processor type and there are thousands of different processors around.\n",
            "time": null
        },
        {
            "user": "Phil L.",
            "text": "This happens here in ARM (Cortex v9) but I've seen it also on other arch (x86 and MIPS i believe).\n",
            "time": null
        },
        {
            "user": "Phil L.",
            "text": "Looks possibly like some kind of encoding or compression of (originally) repeating string...\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "In ye olde MS-DOS .COM programs it was not uncommon to see <pre><code>stackstackstackstack..</code></pre>.\n",
            "time": null
        },
        {
            "user": "lornix",
            "text": "Can't be ARM instructions, they're always 4 bytes long (unless thumb instructions, but they're 2 bytes long), and that string is 3 bytes, repeating.   Probably a space filler to reserve room for something.  Weird though, as that implies static storage. For FeT, nothing comes to mind as an acronym or whatnot.  Probably a form of 'stackstackstack' as mentioned previously.  Keep working on it,  Another clue would be relative position in file.  Disassembly / Analysis is a long process, experience and intuition help too.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In IDA, you'll get the above if you have code that has an data reference to that memory address. It happens to me all the time, if the data \"could be a string\" IDA's auto magic type guesser does just that.\nSo, the true data could be <pre><code>words</code></pre>, or <pre><code>dwords</code></pre>, but because it's all in the ASCII range, bang one big epic string. I tend to jump to that location, hit undefine (u), and the data (d) once to turn to byte, and wait until later when I understand the data layout/structure better.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jun 6, 2014 at 15:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Phil L.",
                    "text": "<span class=\"comment-copy\">Yes, but here IDA doesn't help since entry point not known and when you choose valid start of opcode but arbitrary entry point (typing (c) on such offset), very few strings get referenced.</span>",
                    "time": null
                },
                {
                    "user": "Paddywhacker",
                    "text": "<span class=\"comment-copy\">Well, IDA is interactive, so start anywhere within the disassembly, find something that looks like a return statement (or something that looks like a frame start), and tell IDA that it is code.  Repeat until you have the whole thing analysed.</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">Maybe I misunderstood your question, when/why this might happen. verse I have a file that is only.</span>",
                    "time": null
                }
            ]
        }
    ]
}