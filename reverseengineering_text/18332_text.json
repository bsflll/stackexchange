{
    "title": "IDA 7.0 (freeware) auto-analysis gets stuck in a loop",
    "link": "https://reverseengineering.stackexchange.com/questions/18332/ida-7-0-freeware-auto-analysis-gets-stuck-in-a-loop",
    "content": "I am trying to create a graph so that I can visualize the flow of a particular function in a game that I am interested in. I was initially using Cheat Engine to follow the flow of the function, but after going through about 20 jmps to finally get to the ret instruction, I decided to open up the executable in IDA so that I could see the graph view.\nWhen I opened the executable in IDA, I ran into an issue where the auto-analysis gets \"stuck\" in a loop, never finishing. \nLooking at the code, I do wonder if there is some sort of obfuscation going on, because it seems like the same thing could be coded in a far lesser number of instructions.\nWhat should I do?\nHere is an example of a piece of the code that I suspect is causing an issue (sorry if my comments don't make much sense):\n<pre><code>cmp [rcx],rdi             ; if *rcx == rdi:\ncmove eax,r15d            ; do eax = r15d\nadd rcx,08                ; rcx += 8\ndec rdx                   ; i -= 1\nmov [rsp-08],rbp          ; var a = rbp\nlea rsp,[rsp-08]          ; rsp = &a\nmov rbp,game.exe+13139A0  ; rbp = game.exe+13139A0\nxchg [rsp],rbp            ; swap(a, rbp) i.e.\n                          ;   a = game.exe+13139A0\n                          ;   rbp = rbp (original value)\nlea rsp,[rsp-08]          ; var b; rsp = &b\nmov [rsp],rbx             ; b = rbx\nlea rsp,[rsp-08]          ; var c; rsp = &c\nmov [rsp],rax             ; c = rax\nmov rbx,[rsp+10]          ; rbx = a\nmov rax,game.exe+1313990  ; rax = game.exe+1313990\ncmovne rbx,rax            ; rbx = i == 0 ? rax : rbx\nmov [rsp+10],rbx          ; a = rbx\nlea rsp,[rsp+08]          ; rsp = &b\nmov rax,[rsp-08]          ; rax = c\nmov rbx,[rsp]             ; rbx = b\nlea rsp,[rsp+08]          ; rsp = &a\nlea rsp,[rsp+08]          ; rsp = &???\njmp qword ptr [rsp-08]    ; jmp a i.e.\n                          ;   i == 0: game.exe+1313990\n                          ;   i != 0: game.exe+13139A0\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "assembly",
        "deobfuscation"
    ],
    "user": "P. Private",
    "time": "May 23, 2018 at 5:52",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "The code is obfuscated by Arxan GuardIT. If IDA is actually infinitely looping here, that's a bug, which might also affect the 7.x commercial line. If so, Hex-Rays might fix it upstream and could possibly release a new freeware build. But, given that Hex-Rays states on the freeware download page that this version \"comes without technical support\", they probably won't reply to a support mail. Your best and only option is to hope an IDA developer sees and confirms this, reproduces it in commercial builds, fixes it, and releases a new freeware. I wouldn't hold my breath for a freeware update.\n",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "Which game is it?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Undefining the code piece, which makes autoanalysis stuck, usually helps. You can always return to this part and make it code again after autoanalysis is complete.\n",
            "votes": "2",
            "user": "Anton Kukoba",
            "time": "May 23, 2018 at 8:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}