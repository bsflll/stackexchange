{
    "title": "What does this code do, and what does it look like in C?",
    "link": "https://reverseengineering.stackexchange.com/questions/11246/what-does-this-code-do-and-what-does-it-look-like-in-c",
    "content": "I'm using IDA to disassemble a file, and one of the sections contained this. What is this doing? What would it look like in C?\nI believe it pushes edx onto the stack, and converts it to an integer using _atoi, but what is left in eax after that, and why is it comparing it to 5? \n<pre><code>mov     ecx, [ebp+argv]\nmov     edx, [ecx+4]\npush    edx             ; char *\ncall    _atoi\nadd     esp, 4\nmov     [ebp+var_60], eax\ncmp     [ebp+var_60], 5\njle     short loc_401167\n</code></pre>\nEdit: Got a great answer, also another good answer here. https://stackoverflow.com/questions/33535720/what-does-this-code-do-and-what-does-it-look-like-in-c/33535891#33535891\n",
    "votes": "0",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "Stanfrancisco",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Stanfrancisco",
            "text": "What's with the downvote? Just curious, I always want to make my questions better. No comment after the downvote doesn't help though.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Not the downvoter, but i think the problem is the same reason as the one for the close vote: \"Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem\"\n",
            "time": null
        },
        {
            "user": "Stanfrancisco",
            "text": "Hmm. I could post the rest of the code that I've already disassembled, to prove my \"understanding,\" but I thought this was just a curious problem. I asked a specific set of questions, stated what my understanding so far was, and posted legitimate assembly code. I got it answered over at stackoverflow anyways.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "\"I got it answered over at stackoverflow anyways\" -- please don't cross-post, or at least mention that and link the questions, to stop people from putting needless effort into questions that already have a solution.\n",
            "time": null
        },
        {
            "user": "Stanfrancisco",
            "text": "No problem; won't do that again. Will link to overflow in an edit to the main post.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "seems to be unoptimized compilation anyway if you were using ollydbg and compiled this code with debug information ollydbg will show the source code in the next column\nsource used \n<pre><code>#include <stdio.h>\n#include <stdlib.h>\nint main (int argc , char* argv[]) {\n  if(argc!=2){return -1;}\n  signed int foo =0;\n  if((foo = atoi(argv[1])) > 5) {goto blah;}\n  printf(\"notok\");return 0;\n  blah:\n  printf(\"ok\");return 1;\n}\n</code></pre>\ncompiled with no optimisations    \ncl /Zi /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE\n<pre><code>00401000 a>PUSH    EBP                         ; {\n00401001   MOV     EBP, ESP\n00401003   PUSH    ECX\n00401004   CMP     DWORD PTR SS:[EBP+8], 2     ; if(argc!=2){return -1;}\n00401008   JE      SHORT atoitest.0040100F\n0040100A   OR      EAX, FFFFFFFF\n0040100D   JMP     SHORT atoitest.00401055\n0040100F   MOV     DWORD PTR SS:[EBP-4], 0     ; signed int foo =0;\n00401016   MOV     EAX, DWORD PTR SS:[EBP+C]   ; if((foo = atoi(argv[1])) > 5) {goto blah;}\n00401019   MOV     ECX, DWORD PTR DS:[EAX+4]\n0040101C   PUSH    ECX\n0040101D   CALL    atoitest.atoi\n00401022   ADD     ESP, 4\n00401025   MOV     DWORD PTR SS:[EBP-4], EAX\n00401028   CMP     DWORD PTR SS:[EBP-4], 5\n0040102C   JLE     SHORT atoitest.00401032\n0040102E   JMP     SHORT atoitest.00401043\n00401030   JMP     SHORT atoitest.00401043\n00401032   PUSH    atoitest.0041218C           ; printf(\"notok\");return 0;\n00401037   CALL    atoitest.printf\n0040103C   ADD     ESP, 4\n0040103F   XOR     EAX, EAX\n00401041   JMP     SHORT atoitest.00401055\n00401043   PUSH    atoitest.00412194           ; printf(\"ok\");return 1;\n00401048   CALL    atoitest.printf\n0040104D   ADD     ESP, 4\n00401050   MOV     EAX, 1\n00401055   MOV     ESP, EBP                    ; }\n00401057   POP     EBP\n00401058   RETN\n</code></pre>\nthe same src code compiled with msvc /O1 does away all saves    \ncl /Zi /O1 /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE\n<pre><code>00401000 a>CMP     DWORD PTR SS:[ESP+4], 2     ; {\n00401005   JE      SHORT atoitest.0040100B\n00401007   OR      EAX, FFFFFFFF\n0040100A   RETN                                ; }\n0040100B   MOV     EAX, DWORD PTR SS:[ESP+8]   ; if((foo = atoi(argv[1])) > 5) {goto blah;}\n0040100F   PUSH    DWORD PTR DS:[EAX+4]\n00401012   CALL    atoitest.atoi\n00401017   POP     ECX\n00401018   CMP     EAX, 5\n0040101B   JLE     SHORT atoitest.0040102C\n0040101D   PUSH    atoitest.00412194           ; printf(\"ok\");return 1;\n00401022   CALL    atoitest.printf\n00401027   XOR     EAX, EAX\n00401029   INC     EAX\n0040102A   POP     ECX\n0040102B   RETN                                ; }\n0040102C   PUSH    atoitest.0041218C           ; printf(\"notok\");return 0;\n00401031   CALL    atoitest.printf\n00401036   XOR     EAX, EAX\n00401038   POP     ECX\n00401039   RETN                                ; }\n</code></pre>\nsame code with single exit and no gotos  \n<pre><code>#include <stdio.h>\n#include <stdlib.h>\nint main (int argc , char* argv[]) {\n  if(argc==2)  {\n    int foo =0;\n    if((foo = atoi(argv[1])) > 5) {\n      printf(\"ok\");\n    } else {\n      printf(\"notok\");\n    }\n  }\n  return 0;\n}\n</code></pre>\nunoptimesed compilation \n<pre><code>00401000 a>PUSH    EBP                         ; int main (int argc , char* argv[]) {\n00401001   MOV     EBP, ESP\n00401003   PUSH    ECX\n00401004   CMP     DWORD PTR SS:[EBP+8], 2     ; if(argc==2)  {\n00401008   JNZ     SHORT atoitest.00401045\n0040100A   MOV     DWORD PTR SS:[EBP-4], 0     ; int foo =0;\n00401011   MOV     EAX, DWORD PTR SS:[EBP+C]   ; if((foo = atoi(argv[1])) > 5) {\n00401014   MOV     ECX, DWORD PTR DS:[EAX+4]\n00401017   PUSH    ECX\n00401018   CALL    atoitest.atoi\n0040101D   ADD     ESP, 4\n00401020   MOV     DWORD PTR SS:[EBP-4], EAX\n00401023   CMP     DWORD PTR SS:[EBP-4], 5\n00401027   JLE     SHORT atoitest.00401038\n00401029   PUSH    atoitest.0041218C           ; printf(\"ok\");\n0040102E   CALL    atoitest.printf\n00401033   ADD     ESP, 4\n00401036   JMP     SHORT atoitest.00401045     ; } else {\n00401038   PUSH    atoitest.00412190           ; printf(\"notok\");\n0040103D   CALL    atoitest.printf\n00401042   ADD     ESP, 4\n00401045   XOR     EAX, EAX                    ; return 0;\n00401047   MOV     ESP, EBP                    ; }\n00401049   POP     EBP\n0040104A   RETN\n</code></pre>\noptimised compilation\n<pre><code>00401000 a>CMP     DWORD PTR SS:[ESP+4], 2     ; int main (int argc , char* argv[]) {\n00401005   JNZ     SHORT atoitest.0040102B\n00401007   MOV     EAX, DWORD PTR SS:[ESP+8]   ; if((foo = atoi(argv[1])) > 5) {\n0040100B   PUSH    DWORD PTR DS:[EAX+4]\n0040100E   CALL    atoitest.atoi\n00401013   POP     ECX\n00401014   CMP     EAX, 5\n00401017   JLE     SHORT atoitest.00401020\n00401019   PUSH    atoitest.00412194           ; printf(\"ok\");\n0040101E   JMP     SHORT atoitest.00401025     ; } else {\n00401020   PUSH    atoitest.0041218C           ; printf(\"notok\");\n00401025   CALL    atoitest.printf\n0040102A   POP     ECX\n0040102B   XOR     EAX, EAX                    ; return 0;\n0040102D   RETN                                ; }\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Nov 5, 2015 at 8:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The part before the call to <pre><code>atoi</code></pre> gets the content of <pre><code>argv[1]</code></pre> on the stack:\n\n<pre><code>mov ecx, [ebp+argv]</code></pre> gets <pre><code>argv</code></pre> into <pre><code>ecx</code></pre>\n<pre><code>mov edx, [ecx+4]</code></pre> gets <pre><code>argv[1]</code></pre> into <pre><code>edx</code></pre> - note <pre><code>argv</code></pre> is an array of pointers, each 4 bytes in size, so <pre><code>[ecx+4]</code></pre> is the \"first\" (counting from 0) element\n<pre><code>push edx</code></pre> puts it on the stack as the argument to <pre><code>atoi</code></pre>.\n\nC functions return their result in <pre><code>eax</code></pre>*, so the <pre><code>mov [ebp+var_60], eax</code></pre> instruction saves the result of <pre><code>atoi(argv[1])</code></pre> to a local variable.\nWe can't know why that result is compared to <pre><code>5</code></pre>, this is part of the application logic. If that application was a crackme, and part of the challenge is \"find out which number to give as a command line argument to make the program do something special\", then <pre><code>5</code></pre> would be a good candidate for that special number.\n(*) in most cases, unless they don't fit there, for example in the case of doubles or structs.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "Nov 5, 2015 at 4:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Stanfrancisco",
                    "text": "<span class=\"comment-copy\">Great answer, thank you. It's nice to know C functions return their result to eax; I had forgotten.</span>",
                    "time": null
                }
            ]
        }
    ]
}