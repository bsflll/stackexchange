{
    "title": "Help with FISTP and FILD interpretation",
    "link": "https://reverseengineering.stackexchange.com/questions/33176/help-with-fistp-and-fild-interpretation",
    "content": "I need some help with understanding what is being actualy done in those two assembly lines:\nfistp   qword ptr [esp+10h]\nss:0023:0013be80=0000000000001cf8\nfild    qword ptr [esp+10h]\nss:0023:0013be80=0000000000002c36\nWhat is the underlying operetion that changes 1cf8 to 2c36\nThanks in adv\n",
    "votes": "0",
    "answers": 1,
    "views": "62",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Uddie",
    "time": "Aug 22, 2024 at 22:12",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Intel's floating point instructions are based on a stack. <pre><code>fist</code></pre> stores a 16-32-64-bit floating point number (IEEE) to the operand address, whereas <pre><code>fild</code></pre> loads from an address into the stack. The <pre><code>p</code></pre> suffix, is the variation of <pre><code>fist</code></pre> that pops the first value, <pre><code>ST(0)</code></pre>, from said stack. The values you're seeing are not the underlying operand changing the address, but rather that before <pre><code>fistp</code></pre> is run, the value is 0x1cf8. After executing <pre><code>fistp</code></pre>, however, <pre><code>ST(0)</code></pre> is popped and written to <pre><code>[esp+0x10]</code></pre> as 0x2c36. When execution gets to <pre><code>fild</code></pre>, the previous value of <pre><code>ST(0)</code></pre> was already written.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "...that is assuming that there's no other instructions tampering with <pre><code>[esp+0x10]</code></pre> in between the two instructions you listed. (Related question: reverseengineering.stackexchange.com/questions/20559/…, link for answer is archived at web.archive.org/web/20071006182549/http://www.ray.masmcode.com/…)\n",
            "time": null
        },
        {
            "user": "Uddie",
            "text": "First of all, sorry for late reply. Yes, you are right, it all seems clear for me now. Thank you for explanation.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "download software developer manual volume 2 for intel \nvolume 2 is instruction set reference\nor as a second choice use online references\nsearch fistp or any other instruction and read for better understanding\n\nbasically FISTP takes what is in st[0]  converts it to a signed integer and stores it in destination and pops the st[0] (empties st[0])\nsuppose st[0] contains a valid float like 486.87 (using 32 bit ollydbg here)\n\nand your instruction pointer contains  fistp qword ptr [esp+10]\n\non executing this instruction\nesp+10 will hold 487  (486.87 rounded to 487 and positive signed)\nprior to execution\n\npost execution\n\nan the stack has been popped\n\nhope you will be able to follow this for FILD\n",
            "votes": "2",
            "user": "blabb",
            "time": "Aug 23, 2024 at 19:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Uddie",
                    "text": "<span class=\"comment-copy\">So sorry for late reply. I've got the procedure. I can manage on my own now. Thanks a lot!</span>",
                    "time": null
                }
            ]
        }
    ]
}