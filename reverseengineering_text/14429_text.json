{
    "title": "Writing own custome syscall/int 0x80 on x64 system",
    "link": "https://reverseengineering.stackexchange.com/questions/14429/writing-own-custome-syscall-int-0x80-on-x64-system",
    "content": "Is there a way to write my own <pre><code>syscall</code></pre>/<pre><code>int 0x80</code></pre> without using them?\nSo, normally it goes like\n<pre><code>setup registers\n...\nsyscall or int 0x80\n</code></pre>\nand I am interested in doing this without <pre><code>syscall</code></pre>/<pre><code>int 0x80</code></pre>\n<pre><code>setup registers\ncall mysyscall\n</code></pre>\nwhere can I find implementation of <pre><code>syscall</code></pre> or <pre><code>int 0x80</code></pre>? Or is it too low level to implement it in asm?\n",
    "votes": "2",
    "answers": 1,
    "views": "994",
    "tags": [
        "assembly",
        "linux",
        "x86-64"
    ],
    "user": "re_adept",
    "time": "Jan 17, 2017 at 22:57",
    "comments": [],
    "answers_data": [
        {
            "content": "TL;DR: These are two instructions supported by the CPU, you cannot implement them in assembly, as they are (or aren't) part of the assembly language you're using.\nSome more background:\nAn interrupt (the assembly <pre><code>int</code></pre> instruction is causing a software interrupt) is a special event for the CPU. The CPU immediately (This is slightly inaccurate as advanced performance optimizations and low-level features are ignored for the sake of simplicity) stops executing the instruction sequence it was executing, saves the context of the current execution (such as the <pre><code>EIP</code></pre> and other control registers, most not directly accessible to the user), and switches to a specifically designated code sequence that is in charge of handling that specific interrupt.\nExamples of hardware interrupts are related to handling power, hard-disk network and other peripherals, as well as when a program fails accessing a memory region, fails with certain calculations (divide by zero), floating point errors, tries executing a privileged or an invalid instruction and many others.\nAdditionally, a program can intentionally trigger an interrupt by using the <pre><code>int</code></pre> instruction which receives a single operand - the interrupt id to trigger.\nWhen an interrupt happens, the resumes execution at the address pointed by the interrupt index in the Interrupt Descriptor Table (aka Interrupt Vector Table), in the case of <pre><code>int 0x80</code></pre>, that's the address at offset <pre><code>0x80</code></pre>, obviously.\nAs interrupts are an expensive operation for the CPU (it entails a lot of bookkeeping related to theads and context switches, among other things), AMD (and later Intel) introduced the <pre><code>sysenter</code></pre> instruction (called <pre><code>syscall</code></pre> by Intel). That instruction keeps bookkeeping to the minimum by only raising to ring0 and executing kernel code.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jan 17, 2017 at 23:20",
            "is_accepted": true,
            "comments": []
        }
    ]
}