{
    "title": "Why does a function with 3 parameters is decompiled as 9 parameters?",
    "link": "https://reverseengineering.stackexchange.com/questions/33278/why-does-a-function-with-3-parameters-is-decompiled-as-9-parameters",
    "content": "For a PowerPC binary with debugging symbols, the function signature is:\n<pre><code>CrossProduct(VECTOR *,VECTOR,VECTOR)</code></pre>\nIt's correct as it matches the source code for an older version of the application:\n<pre><code>void CrossProduct(VECTOR *result, VECTOR A, VECTOR B)\n{\n    result->vx = (A.vy*B.vz - A.vz*B.vy)>>9;\n    result->vy = (A.vz*B.vx - A.vx*B.vz)>>9;\n    result->vz = (A.vx*B.vy - A.vy*B.vx)>>9;\n}\n</code></pre>\nHex-Rays however, decompiles it as such:\n<pre><code>VECTOR *__fastcall CrossProduct(VECTOR *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8)\n{\n  result->vx = (a3 * a8 - a4 * a7) >> 9;\n  result->vy = (a4 * a6 - a2 * a8) >> 9;\n  result->vz = (a2 * a7 - a3 * a6) >> 9;\n  return result;\n}\n</code></pre>\nIf I change the function signature to be like this:\n<pre><code>VECTOR *__fastcall CrossProduct(VECTOR *result, VECTOR v1, VECTOR v2)</code></pre>\nA bunch of variables (<pre><code>v3, v4, v5, v6</code></pre>) are now in red:\n<pre><code>VECTOR *__fastcall CrossProduct(VECTOR *result, VECTOR *v1, VECTOR *v2)\n{\n  int v3; // r10\n  int v4; // r9\n  int v5; // r8\n  int v6; // r6\n\n  result->vx = ((int)v2 * v3 - v6 * v4) >> 9;\n  result->vy = (v6 * v5 - (int)v1 * v3) >> 9;\n  result->vz = ((int)v1 * v4 - (int)v2 * v5) >> 9;\n  return result;\n}\n</code></pre>\nBasically, I would like to remap <pre><code>a1, a2, a3</code></pre> to <pre><code>v1.x, v1.y, v1.z</code></pre>, and so on.\nIf that's possible to do from within IDA, can you explain how?\n",
    "votes": "0",
    "answers": 0,
    "views": "57",
    "tags": [
        "ida",
        "functions",
        "struct"
    ],
    "user": "aybe",
    "time": "Oct 23, 2024 at 11:02",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "This is because the other structure parameters are not pointers, but stored on the stack. From the perspective of the decompiler, the logic for accessing the individual fields of the structure (from each parameter) is exactly the same as accessing the individual parameters themselves. As such, the decompiler goes with what it knows, leaving the decision up to the user to correct it. It's also worth noting that the type information you applied to the function in your last snippet sets the last 2 parameters as pointers, rather than the 2 VECTORs stored after the first pointer parameter.\n",
            "time": null
        },
        {
            "user": "aybe",
            "text": "@AliRizvi-Santiago You're right, it's a pointer while it shouldn't be. Problem is, if I change signature on asm side, IDA makes it <pre><code>VECTOR *__struct_ptr</code></pre>; if I try to change it on decompiler side, it says \"Sorry, cannot change argument type. Please edit the function prototype instead\" so I have no clue on how to achieve that.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Use<pre><code>y</code></pre> on the function name to set the prototype. Kind of like how you'd do it in the disassembler.\n",
            "time": null
        },
        {
            "user": "aybe",
            "text": "That seems to be a PowerPC binary bug/issue... I have tried on the Windows version of the application and it worked fine!\n",
            "time": null
        }
    ],
    "answers_data": []
}