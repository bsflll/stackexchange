{
    "title": "Unpack .apk file from a PC game (NOT Android related)",
    "link": "https://reverseengineering.stackexchange.com/questions/14764/unpack-apk-file-from-a-pc-game-not-android-related",
    "content": "I have an old PC game called Air Strike 3D II. I wanted to extract music files but I couldn't figure out how to unpack the .apk file (NOT Android package). 7-zip can't open it. When I open the .apk file with IDA, it says (Unknown COFF machine) and it failed to disassemble it so it's not an assembly file.\nThe headers always start with <pre><code>0000803F 99990000</code></pre>. There is a folder named <pre><code>sounds</code></pre> and it contains .wav files, <pre><code>sounds/biglaser.wav</code></pre>, <pre><code>sounds/laser.wav</code></pre> etc... recovering files with WinHex does not help because it is packed and compressed.\nI found a log file that says\n<pre><code>---- Initializing file system ----\n\npak1.apk - 733 files\npak2.apk - 45 files\npak4.apk - 1 files\nF_Init: \n3 data files found.\n</code></pre>\nI tried to disassemble the .exe file with IDA, but there is nothing useful because it is encrypted or obfuscated.\nGoogle doesn't give me solutions because it returns Android related results. I wish it could show results from 2008 and older.\nHere are the files if you want to take a look:\nhttps://drive.google.com/open?id=0B_6TXpxCnMc7TGVfOWlYWjVYXzQ\n",
    "votes": "2",
    "answers": 1,
    "views": "867",
    "tags": [
        "unpacking",
        "hex"
    ],
    "user": "0xabc",
    "time": "Feb 27, 2017 at 8:15",
    "comments": [
        {
            "user": "amir rahmani",
            "text": "I have this problem too I don't know how to use that script And your links are no longer available. please help me. how do I extract files from that APKs?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Update: I've done a write up on the entire file format here: https://tkte.ch/articles/2017/02/27/reading-airstrike-3d-ii-datafiles.html\nThese files aren't compressed, so don't worry about that. Since all you want to do is extract those waves we can cheat (a lot) and ignore everything else. Lets do a naive check:\n<pre><code>> strings -n 4 pak2.apk | grep RIFF -c\n40\n\n> strings -n 4 pak2.apk | grep WAVEfmt -c\n40\n</code></pre>\nWell that's promising. Looks like we've got a bunch of WAVs encapsulated by RIFFs which is pretty common.\n<pre><code>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nimport struct\n\nRIFF_MAGIC = b'RIFF'\nRIFF_LENGTH = struct.Struct('<I')\n\n\ndef main():\n    in_file = sys.argv[1]\n\n    # Since the files are tiny lets cheat again and just read the entire thing.\n    with open(in_file, 'rb') as fin:\n        in_file = fin.read()\n\n    offset = 0\n    count = 0\n    \n    # We're going to skim through the file looking for the start of a RIFF file.\n    while True:\n        start = in_file.find(RIFF_MAGIC, offset)\n        if start == -1:\n            # None left, so we're done with this .apk.\n            print('Extracted {0} files.'.format(count))\n            return\n\n        # Found one, so lets read the next 4 bytes which are the length of the RIFF file.\n        length = RIFF_LENGTH.unpack_from(in_file, start + 4)[0]\n        # The 8 comes from the 4 bytes for RIFF and the 4 bytes for the length\n        # itself, which aren't included in the length.\n        offset = start + 8 + length\n\n        # annnnd save it.\n        with open('wav_{0}.wav'.format(count), 'wb') as fout:\n            fout.write(in_file[start:offset])\n\n        count += 1\n\nif __name__ == '__main__':\n    sys.exit(main())\n</code></pre>\nAnd give it a whirl...\n<pre><code>> python extract.py pak2.apk\nExtracted 40 files.\n</code></pre>\nOpen one of the WAV's in VLC and woohoo, sounds.\n",
            "votes": "5",
            "user": "TkTech",
            "time": "Nov 13, 2024 at 1:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}