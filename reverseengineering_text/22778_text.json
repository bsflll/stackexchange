{
    "title": "bypass license of very old software, Access violation (C0000005) x32dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/22778/bypass-license-of-very-old-software-access-violation-c0000005-x32dbg",
    "content": "I'm trying to bypass the license of a very old software that i was using many years ago, now, the company of that software is closed and i can't get a license \nso, with a little bit of knowledge in assembly i changed \n<pre><code>mov byte ptr ds:[ecx+0x72], al\n</code></pre>\nto \n<pre><code>mov al,1\n</code></pre>\n\nthen i got \n\nThe software compare a hash with the hash of the key code you entered, if it's the same, it will work\n\na random license request code generated everytime you run the .exe\nusing GenerateRandomNumber\n\nand hashed by using HkdfHashAlgorithm\n\nhere's the .exe\nhttps://www.mediafire.com/file/ujd576jm8eg7oay/SpoolManager.exe/file\nI'm not sure if that illigal to post it here, but I have no other solution\nAppreciate any help\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "debugging",
        "x64dbg"
    ],
    "user": "JDEV",
    "time": "Dec 19, 2019 at 14:14",
    "comments": [
        {
            "user": "Rok Tavčar",
            "text": "Can you show code where did you change assembly? And assembly that you changed has very different meaning than original.\n",
            "time": null
        },
        {
            "user": "JDEV",
            "text": "@RokTavčar please check updated post\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>mov al, 1</code></pre>, the instruction you want to use becomes <pre><code>b0 01</code></pre> (you can check here), assuming x86-32. That is, 2 Bytes.\nThe instruction you are patching (<pre><code>mov byte ptr ds:[ecx+0x72], al</code></pre>) is <pre><code>88 41 72</code></pre> and so takes up 3 Bytes. See the problem already?\nThat means you are only patching the first two bytes of the instruction and need to pad it with a single-byte NOP (no operation, i.e. <pre><code>90</code></pre>) in order for all subsequent instructions to be correct.\nOtherwise the processor will start decoding at <pre><code><patched-instruction>+2</code></pre> and assume that it is correct. Which it probably isn't.\nNot sure what all those screenshots are supposed to be about. They seem to have no relation to the instructions you said you were patching ...\n\nNow that you have posted the screenshot of the patch site, we can even potentially tell you what the CPU was trying to execute.\nThe patch site before your patch was directly at the return from a function:\n<pre><code>88 41 72                mov    BYTE PTR [ecx+0x72],al\nc2 04 00                ret    0x4\n; ------ end of function\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n</code></pre>\nAfter your patch it would have looked like this:\n<pre><code>b0 01                   mov    al,0x1\n72 c2                   jb     0xffffffc6\n04 00                   add    al,0x0\n; ------ end of function\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n90                      nop\n</code></pre>\nStill 12 Bytes overall (6 inside the function you were patching), but a completely different meaning. We can guess that either the jump instruction was taken and led into a location which gave the access violation, or that the condition (of <pre><code>jb</code></pre>) didn't evaluate to true and the CPU executed the <pre><code>add</code></pre> followed by 6x <pre><code>nop</code></pre> and then ended up in a completely different function (at least this looks like a function prologue) but with the stack still in place from the call to the previous function and so on ...\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Dec 19, 2019 at 15:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "JDEV",
                    "text": "<span class=\"comment-copy\">I don't have enough knowledge in assembly to understand your answer, i'm sure it's correct and i really appreciate it  i goes more deeper and i found the line where it compare the request code with the code i entered, if it's equal it jump, <code>je</code> so i changed it to jne and the .exe stopped working  please check my new question to understand more  <a href=\"https://reverseengineering.stackexchange.com/questions/22784/change-compare-function-in-assembly-and-exe-stopped-working\" title=\"change compare function in assembly and exe stopped working\">reverseengineering.stackexchange.com/questions/22784/…</a></span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">The point is that on <a href=\"https://en.wikipedia.org/wiki/Complex_instruction_set_computer\" rel=\"nofollow noreferrer\">CISC</a> instructions have different lengths. And if you want to patch something you must make sure that your patch doesn't cause subsequent instructions to become invalid. This could also happen if your patched instruction is longer than the original one at the patch site.</span>",
                    "time": null
                }
            ]
        }
    ]
}