{
    "title": "Obfuscation by changing the order of a malware behaviour",
    "link": "https://reverseengineering.stackexchange.com/questions/13152/obfuscation-by-changing-the-order-of-a-malware-behaviour",
    "content": "I know that there are some obfuscation techniques which can lead to slowing or even failing the detection of malware when static analysis is used. \nHowever, is there a similar technique that changes the order of the malware behaviour, which belongs to the same family or variants?\nAn example with <pre><code>Malware 1</code></pre> and <pre><code>Malware 2</code></pre> from the same malware family <pre><code>X</code></pre>: \n\n<pre><code>Malware 1</code></pre> will connect to the internet and then access the registry \n<pre><code>Malware 2</code></pre> will do the same thing but with a different order\n\nIf it does exist is their a known name for this kind of obfuscation?\nAre there any papers, which refer to such a obfuscation technique?\n",
    "votes": "1",
    "answers": 2,
    "views": "193",
    "tags": [
        "malware",
        "obfuscation",
        "static-analysis"
    ],
    "user": "Ophilia",
    "time": "Jul 31, 2016 at 22:06",
    "comments": [],
    "answers_data": [
        {
            "content": "This would likely fall into the category of \"advanced metamorphic malware\", though I'm not aware of any real-world malware that automatically changes the order of high-level run-time functionality from variant to variant.\nAn exception would be malware that uses multiple threads for various pieces of functionality, where the OS scheduler would \"randomly\" choose the order in which cross-thread functional operations occur... but I don't think that's what you're asking for.\nPaging @peter-ferrie, who might have something more substantial to offer here...\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jul 27, 2016 at 14:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">There have been viruses which did that.  Hybris is perhaps the most famous example.  It relied on a plug-in framework, and the order in which the plug-ins were acquired changed the behavior of the resulting variant.  We didn't require a name for that.There were viruses going back to DOS days, such as BadBoy, which changed the order of their subroutines so affect the appearance of the layout, but the call flow remained the same.  We call those \"block-swapping\" viruses.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The only comparable technique which I found was called <pre><code>Code Transposition</code></pre>, where you have to distunghish between two types: The first one is based on conditional jumps, the second one is based on independent instructions. I'm not clearly sure if you are looking for a technique on a higher, more \"semantic\" level.\n\n[...] the second method creates new generations by choosing and reordering the independent instructions that have no impact on one another. Because it is a complex problem to find the independent instructions, this method is hard to implement, but can make the cost of detection high. [2]\n\nSources are:\n<pre><code>[1] Christodorescu, M., & Jha, S. (2006). \nStatic analysis of executables to detect malicious patterns.   \nWisconsin Univ-Madison Dept of Computer Sciences.\n\n[2] You, I., & Yim, K. (2010, November). \nMalware Obfuscation Techniques: A Brief Survey. \nIn BWCCA (pp. 297-300).\n</code></pre>\n",
            "votes": "1",
            "user": "knx",
            "time": "Aug 2, 2016 at 15:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}