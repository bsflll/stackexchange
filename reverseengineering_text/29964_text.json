{
    "title": "Prevention of reverse engineering of a microcontroller's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/29964/prevention-of-reverse-engineering-of-a-microcontrollers-firmware",
    "content": "What steps may I take to make it more expensive to reverse engineer a firmware I want to use on a cheap microcontroller?\nOptions I see so far:\n\nFlood it with epoxy with quartz or metal dust to make physical access or x-ray harder\nkeep device always-on, and store important part in energy-dependent memory. Ideally a key that decrypts firmware\nUse detection of disasembling process, and erase firmware if triggered. For example a light sensor inside the box or conductivity test or shake sensor.\nUse firmware obfuscation\nUse a particular MC that has an option to disallow firmware read. Is there something in stm32f0 family with this property?\nAdd physical parts and firmware code that are not actually needed\nErase the text from the microcontroller's body\n\nWhat points would make your life harder? What other options can you think of?\n",
    "votes": "2",
    "answers": 0,
    "views": "200",
    "tags": [
        "firmware",
        "firmware-analysis"
    ],
    "user": "Surprised Seagull",
    "time": "Feb 1, 2022 at 19:03",
    "comments": [
        {
            "user": "dcom-launch",
            "text": "riscure.com/uploads/2017/09/â€¦\n",
            "time": null
        }
    ],
    "answers_data": []
}