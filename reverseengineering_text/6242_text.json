{
    "title": "windows - Why is the imagebase default 0x400000?",
    "link": "https://reverseengineering.stackexchange.com/questions/6242/windows-why-is-the-imagebase-default-0x400000",
    "content": "Having stumbled upon this question (and answer): https://stackoverflow.com/questions/2170843/va-virtual-adress-rva-relative-virtual-address on my quest for understanding Windows' PE format, I'm wondering: why is the default imagebase value 0x400000? \nWhy couldn't we just start at 0? A VA would then be, in all practical purposes, equal to an RVA. \nI'm clearly missing something, but I've been unable to find a reasonable explanation of this for the last 40 minutes.\n",
    "votes": "15",
    "answers": 2,
    "views": "10k",
    "tags": [
        "windows",
        "pe"
    ],
    "user": "user4520",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "evlncrn8",
            "text": "well, zero would be the bios area... so thats a no go... stack and heap can start at around 0x10000 and some other dlls etc are down there (.nls files and so on)  open up an exe in ollydbg, then look at the memory view, you'll see whats down there, typically its some system stuff, at least one nls file on my system and the start of the stack of the main thread  and higher than 0x80000000 (on 32 bit anyway) is for mem mapped files, drivers and such\n",
            "time": null
        },
        {
            "user": "user4520",
            "text": "@evlcrn8 Hold on - the OS translates all memory references to physical locations anyway, so by no means can I access BIOS stuff or pretty much anything that doesn't belong to me... isn't it so?\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "@evlcrn8: By default, memory at 0x00000000 is unmapped; it most certainly is not \"the bios area\". And files mapped into memory from user-mode are mapped below 0x80000000.\n",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "i just remember it as the bios area from the old dos days, and it kinda stuck with me, im pretty sure files mapped via mapviewoffile were at the > 0x80000000 when i tested though\n",
            "time": null
        },
        {
            "user": "Anders",
            "text": "Address 0 is usually reserved by the OS because it makes it easier to debug null dereference bugs (by crashing). I would not be surprised if parts of the DOS support uses address 0 but that does not matter to normal Windows processes.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "why is the default imagebase value 0x400000?\n\nFrom Peering Inside the PE: A Tour of the Win32 Portable Executable File Format:\n\nIn executables produced for Windows NT, the default\nimage base is 0x10000. For DLLs, the default is 0x400000. In Windows\n95, the address 0x10000 can't be used to load 32-bit EXEs because it\nlies within a linear address region shared by all processes. Because\nof this, Microsoft has changed the default base address for Win32\nexecutables to 0x400000.\n\nNote that the default (or \"preferred\") base address is set by the linker (GCC's <pre><code>ld</code></pre>, Microsoft VC++'s <pre><code>link.exe</code></pre>, etc.) at build-time; the default (or \"preferred\") base address is not determined by Windows.\n",
            "votes": "18",
            "user": "Cole Tobin",
            "time": "Jan 13 at 21:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "evlncrn8",
                    "text": "<span class=\"comment-copy\">the microsoft one is a bit odd, last time i looked it works from the name of the module, and calculates the base from that</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@evlncrn8: According to <a href=\"http://msdn.microsoft.com/en-us/library/f7f5138s.aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/f7f5138s.aspx</a>, even the latest MS VC++ <code>link.exe</code> uses 0x400000 as the default base address.</span>",
                    "time": null
                },
                {
                    "user": "JDÅ‚ugosz",
                    "text": "<span class=\"comment-copy\">@evlncrn8: you might be seeing \"load address randomization\".</span>",
                    "time": null
                },
                {
                    "user": "QAZ",
                    "text": "<span class=\"comment-copy\">Raymond Chen posted a detailed writup on this exact question:  <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2014/10/03/10562176.aspx\" rel=\"nofollow noreferrer\">blogs.msdn.com/b/oldnewthing/archive/2014/10/03/10562176.aspx</a></span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@QAZ: Wow, he posted that this morning. Maybe this StackExchange question prompted Raymond to write that blog post :) I'd say that the explanation given in that new blog post is more complete than the one to which I linked above, so feel free to post it as an answer here (so you get credit) and I'll be happy to vote it up.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "you can alter the base if you so wish msvc compile drivers with an image base of 0x10000\n<pre><code>:\\>kd -c \"!dh acpi;q\" -z c:\\WINDOWS\\system32\\drivers\\acpi.sys | grep -i image\nFile Type: EXECUTABLE IMAGE\n00010000 image base\n    5.01 image version\n   2DD80 size of image\n\n:\\>\n</code></pre>\nhere is how to alter usermode executables imagebase base must be multiples of 64k if base:0 is used exe will be having an image base of 0x10000 \n<pre><code>:\\>dir /b & type * & cl /nologo /Zi * /link /base:0x200000 & dir /b\nsysbp.cpp\n\nsysbp.cpp\n\n\n#include <stdio.h>\n#include <stdlib.h>\nint main (void)\n{\n    printf(\"all the bases belongs to base\n\");\n    exit(0);\n}sysbp.cpp\nsysbp.cpp\nsysbp.exe\nsysbp.ilk\nsysbp.obj\nsysbp.pdb\nvc100.pdb\n\n:\\>sysbp.exe\nall the bases belongs to base\n\n:\\>cdb -c \"q;\" sysbp.exe | grep -i modload\nModLoad: 00200000 00222000   sysbp.exe\nModLoad: 7c900000 7c9b2000   ntdll.dll\nModLoad: 7c800000 7c8f6000   C:\\WINDOWS\\system32\\kernel32.dll\nq\n\n:\\>\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Sep 15, 2014 at 20:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}