{
    "title": "Writing a file with radare2 `w`?",
    "link": "https://reverseengineering.stackexchange.com/questions/19882/writing-a-file-with-radare2-w",
    "content": "Radare2 supports a <pre><code>w</code></pre> which writes a string.\n<pre><code>w foobar             write string 'foobar'\n</code></pre>\nHowever, it doesn't seem to work for me,\n<pre><code>$ touch foo\n\n$ radare2 ./foo\nw foobar\n</code></pre>\nThe file <pre><code>foo</code></pre> remains empty. Am I supposed to flush or save?\n",
    "votes": "5",
    "answers": 3,
    "views": "6k",
    "tags": [
        "radare2"
    ],
    "user": "Evan Carroll",
    "time": "Apr 16, 2019 at 1:09",
    "comments": [],
    "answers_data": [
        {
            "content": "TLDR\n\n<pre><code>radare2</code></pre> opens a file in <pre><code>read-only mode</code></pre> by default. (see the manual <pre><code>r2 -h</code></pre> for further information.)\nto allow writing to a file, start radare2 in <pre><code>write mode</code></pre> (<pre><code>r2 -w file</code></pre>).\nwhen in a <pre><code>read-only session</code></pre> already, <pre><code>oo+</code></pre> will re-open the file in <pre><code>write</code></pre> mode.\nthe <pre><code>cache mode</code></pre> (<pre><code>e io.cache=true</code></pre>) mimics writing access but changes in radare2 are not actually written to disk.\n\nWrite Mode - Example\n\n\nOpen the file <pre><code>foo</code></pre> in <pre><code>write mode</code></pre>:\n<pre><code>$ r2 -w foo\n</code></pre>\n\n\n\n\nPrint 32 bytes (with <pre><code>px 32</code></pre>):\n<pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n\n\nNote: The first 32 bytes (and the rest of the file) are empty.\n\n\nLet's write \"Hello World!\" into the file:\n<pre><code>[0x00000000]> w Hello World!\n</code></pre>\n\nAnd print the 32 bytes again:\n<pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n\n\nGreat! Now we can see that \"Hello World!\" is written to the file.\n\n\nLet's quit radare2 and <pre><code>cat</code></pre> the file to see the content:\n<pre><code> [0x00000000]> q\n</code></pre>\n<pre><code>$ cat foo\nHello World!\n</code></pre>\n\n\n\nCache Mode - Example\n\nOpen the file <pre><code>foo</code></pre> in write mode:\n<pre><code>$ r2 foo\n</code></pre>\n\nPrint the first 32 bytes@\n<pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 576f 726c 6421 ffff ffff  Hello World!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n</code></pre>\n\nActivate 'cache mode`:\n<pre><code>[0x00000000]> e io.cache=true\n</code></pre>\n\nMake some changes in radare2:\n<pre><code>[0x00000000]> w Goodbyte World! :)\n</code></pre>\n\nProof that radare2 mimicked writing as if in <pre><code>write mode</code></pre>:\n<pre><code>[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  476f 6f64 6279 7465 2057 6f72 6c64 2120  Goodbyte World!\n0x00000010  3a29 ffff ffff ffff ffff ffff ffff ffff  :)..............\n</code></pre>\n\nQuit radare2:\n<pre><code>[0x00000000]> q\n</code></pre>\n\nExamine actual file contents:\n<pre><code>$ cat foo\nHello World!\n</code></pre>\nNote: The file didn't change! That's the effect of <pre><code>cache mode</code></pre>.\n",
            "votes": "7",
            "user": "sudhackar",
            "time": "Nov 10, 2020 at 3:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">What does <code>-w</code> do outside of write mode?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Well, it allows radare2 to write to the file. i.e modifying the original file. This is risky and should be careful while using it. While working with write-mode you can work regularly with radare2 as you are used to. It doesn't change a thing. Also, please see my edition the the answer -- regardless your comment, I elaborated more :)</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">The follow up question is though what does <code>w foobar</code> do if radare opens the file in read-only mode? Is it just a noop?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">yup. Not doing a thing. I suggest you explore the powers of the <code>w</code> command and subcommands of radare2. I use it on a daily basis - check out <code>w?</code> for commands like <code>wtf</code>, <code>wox</code>, <code>wopD</code>...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Just to update @Megabeets answer. \nWhen you start with an empty file (created by <pre><code>touch</code></pre>), the <pre><code>w</code></pre> command will not work by default even if the <pre><code>r2</code></pre> will be started in <pre><code>write</code></pre> mode. The missing information is, in that case, the mapping\n<pre><code>[0x00000000]> om\n[0x00000000]\n</code></pre>\nReturns an empty result. Apart from listing, the <pre><code>om</code></pre> command can also be used to create the mapping:\n<pre><code>Usage: om[-] [arg]   # map opened files\n| om                                       list all defined IO maps\n...\n| om fd vaddr [size] [paddr] [rwx] [name]  create new io map\n...\n</code></pre>\nIn order to do the mapping, one needs to specify (for example) the following command\n<pre><code>[0x00000000]> om 3 0x0 12\n[0x00000000]> om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\nThat will create, for the file description 3, a 12 bytes in size mapping starting from an address 0x0. \nAfter that <pre><code>w</code></pre> will work:\n<pre><code>[0x00000000]> w Hello world!\n[0x00000000]> px 32\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x00000000  4865 6c6c 6f20 776f 726c 6421 ffff ffff  Hello world!....\n0x00000010  ffff ffff ffff ffff ffff ffff ffff ffff  ................\n[0x00000000]>\n</code></pre>\n",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Nov 18, 2018 at 14:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Create an input/output mapping to allow writing to a non-mapped file\nTo allow writing up to <pre><code>64 byte</code></pre> starting at <pre><code>offset 0x00000000</code></pre>, map changes in radare2 to <pre><code>file descriptor 3</code></pre> (the file opened in radare2).\n<pre><code>[0x00000000]> om 3 0x0 64\n[0x00000000]> om\n1 fd: 3 +0x00000000 0x00000000 - 0x0000000b rwx\n</code></pre>\nExplanation\nAn empty file (as created by <pre><code>touch</code></pre>) has no input/output mappings (even when opened with in <pre><code>write mode</code></pre>).\nTo confirm no region has been mapped, you can list all defined IO maps with the radare2-command <pre><code>om</code></pre>.)\nTo create an i/o-mapping use <pre><code>om</code></pre> with parameters:\n\nom fd vaddr [size] [paddr] [rwx] [name]  create new io map\n\nExample\nradare2 -w test_file\n -- What has been executed cannot be unexecuted\n[0x00000000]> w This won't be written anywhere, because no mapping exists.\n[0x00000000]> om\n[0x00000000]> om 3 0 64\n[0x00000000]> om\n 1 fd: 3 +0x00000000 0x00000000 - 0x0000003f rwx \n[0x00000000]> w Hello World!\n[0x00000000]> V\n",
            "votes": "0",
            "user": "Semnodime",
            "time": "Nov 9, 2020 at 2:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}