{
    "title": "Building a control flow graph from machine code",
    "link": "https://reverseengineering.stackexchange.com/questions/16557/building-a-control-flow-graph-from-machine-code",
    "content": "I want to write my own soft, that can disassemble code, and turn it into conrol flow graph. Now i know the basics of graph theory, but i don't get where i should start, do i need to basically keep the tracing of all <pre><code>call</code></pre>,<pre><code>jmp</code></pre>,<pre><code>ret</code></pre>,<pre><code>jxx</code></pre> instructions to detect individual blocks of instructions to make blocks of code into graph nodes? Can someone give me kick where to start?\n",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "machine-code"
    ],
    "user": "WokNoodlesWithOysterSauce",
    "time": "Oct 16, 2017 at 0:50",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "did you try at least with this approach and stumbled upon some issues? I think with such formulated question this is too broad\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This could go serveral ways depending on whatever you want to use third party software. For example, you could use the stream-disassembler diStorm to implement linear disassembly. When you have to keep track of all branch targets and progress then one after another starting at the entry point.\nIf you want to do this cross-platform, you could even pitch in an intermediate language like VEX or REIL. \nRemember though, that finding the next branch to disassemble isn't always easy: You will encounter problems with opaque predicates and indirect branches... you could implement and evaluate data-flow analysis at this point, but this would go to far.\nSome concepts:\nLinear disassembly: Start at the given offset and go. You can get the start of the next address from the length of the instruction before.\nRecursive disassembly: Start linear disassembly at each branch target starting from the entry point.\nHeuristic disassembly: This term often describes everything improving on the recursive disassembly for example by detecting jump tables, opque prediates or speculative disassembly of code sections to discover more code.\nGood luck\n",
            "votes": "7",
            "user": "Nordwald",
            "time": "Oct 16, 2017 at 5:08",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The techniques already described by the others are quite well known and, unfortunately incorrect in many cases. The current state-of-the-art in matter of disassembly is using what we call 'symbolic execution'.\nBasically, you will need to collect the semantics of each assembly instruction and explore each branch of the possible execution of the program and, when you encounter a choice (an <pre><code>if</code></pre> statement), you will ask the formula built from the stacking of all these instruction what are the conditions to get a <pre><code>true</code></pre> and a <pre><code>false</code></pre>. It will give you the feasible paths and the associated inputs you need to feed the program with to reach the <pre><code>true</code></pre> branch or the <pre><code>false</code></pre> branch of this test.\nThis technique is quite painful to set up because you need to grab the entire semantics of each instruction of the assembly you are considering. But, it turns out that it is quite trustable and quite efficient on average programs.\nHere are a few links:\n\nMagic with Manticore;\nA Survey of Symbolic Execution Techniques;\nSymbolic Execution for finding bugs;\nTriton: Dynamic Binary Analysis;\nAngr;\n... many others ...\n",
            "votes": "2",
            "user": "perror",
            "time": "Oct 17, 2017 at 8:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Kerim Can Kalıpcıoğlu",
                    "text": "<span class=\"comment-copy\">Thanks for answer and resources, maybe I can continue my research if it is feasible to use for my purpose.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">Symbolic execution was what i was referring to as <i>dataflow analysis</i>. Honestly, non of these projects is realiable at all (if you consider <i>real</i> world software). There is a sound reason, why this techniques are not used in state-of-the-art analysis software</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@Norwald: First, dataflow analysis and symbolic execution are two very different things. Mostly because dataflow analysis accept to abstract some semantics away in order to terminate (this is close to abstract interpretation). Which is absolutely not the case in symbolic execution. Now, about the fact that none of the projects are reliable... your are <b>right</b>. But, the method is not really in cause for that, it is because either implementation issues or the fact that they do not symbolically cover all the environment (e.g. floating point ops). But, this method is very difficult to achieve.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Norwald's answer better at explaining default disassembly strategies. But, I want to share my experience on my discontinued project about a metamorphic virus which disassembles binary code and finds ROP chains to make the same virus semantically. \nYou can use Capstone Framework to disassemble and GraphViz for visualization.\nFor semantic analysis strategy, you can check code backward after disassembled all .text section and find branch instructions. After that, you can trace branching with tracing data associated with the branch instruction. For example:\n\nI hope it works for you.\n",
            "votes": "2",
            "user": "Kerim Can Kalıpcıoğlu",
            "time": "Mar 3, 2018 at 12:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}