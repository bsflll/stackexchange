{
    "title": "using GDB and dealing with breakpoint detection",
    "link": "https://reverseengineering.stackexchange.com/questions/11225/using-gdb-and-dealing-with-breakpoint-detection",
    "content": "I am trying to solve a reverse engineering challenge using using <pre><code>gdb</code></pre>. I can run the program inside it but when I set a breakpoint at <pre><code>main</code></pre> then I get\n<pre><code>Program received signal SIGSEGV, Segmentation fault.\n</code></pre>\nSetting it at something even earlier like <pre><code>_init</code></pre> (there are two BTW) also was not very fruitful, could it be that the program might be corrupting itself at some point that I didn't catch? Have a look at the <pre><code>backtrace</code></pre> for that matter:\n<pre><code>#0  0x47048474 in ?? ()\n#1  0x0804864a in __handle_global_ctors ()\n#2  0x080488c5 in __do_global_ctors_aux ()\n#3  0x08048349 in _init ()\n</code></pre>\nNow I tried to statically decompile it using a simple recursive traversal disassembler (not IDA) but I couldn't find any traces of <pre><code>CC</code></pre> (INT 3) so I guess another layer of obfuscation has been added.\nI also tried <pre><code>record</code></pre> with no success:\n<pre><code>Breakpoint 5, 0x0804833a in _init ()\n(gdb) record\n(gdb) c\nContinuing.\n(null)Process record: failed to record execution log.\n</code></pre>\nOh and I couldn't find the hex string \"47048474\" either.\nAny more ideas what can help in such a situation? Maybe detecting the self-modification?\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "linux",
        "gdb",
        "anti-debugging"
    ],
    "user": "phk",
    "time": "Nov 1, 2015 at 21:16",
    "comments": [
        {
            "user": "w s",
            "text": "Did you try to use hardware breakpoints (hbreak gdb command) ?\n",
            "time": null
        },
        {
            "user": "phk",
            "text": "Good idea! But sadly it says: \"No hardware breakpoint support in the target.\" :/ (x86 executable on x86_64, file says <pre><code>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.4.1, not stripped</code></pre>)\n",
            "time": null
        },
        {
            "user": "phk",
            "text": "Oops, as mentioned at reverseengineering.stackexchange.com/questions/11225/â€¦ the prog simply has to be started first for <pre><code>hbreak</code></pre> to work. Finally I can continue.\n",
            "time": null
        },
        {
            "user": "savram",
            "text": "What challenge is it? Can you link it?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "So, just to clarify what is already present in the comments:\n<pre><code>gdb</code></pre>'s <pre><code>break</code></pre> will place an ordinary breakpoint, which works by taking the in-memory image of the process and swapping its original instruction for a specific interrupt instruction. If I understand correctly, <pre><code>hbreak</code></pre> tells the OS to monitor every instruction an compare the address of current instruction to the address of breakpoint (i.e. no modification of the in-memory image). However, the number of hardware breakpoints available at a time is limited.\nTo place a hardware breakpoint with <pre><code>hbreak</code></pre>, your program must be already running with <pre><code>gdb</code></pre>'s <pre><code>run</code></pre>. To achieve that, you should place an ordinary breakpoint somewhere at the very beginning (let's say, <pre><code>_start</code></pre> function), successfully break there, place a hardware breakpoint and then remove the original ordinary breakpoint.\n",
            "votes": "1",
            "user": "alisianoi",
            "time": "Oct 30, 2017 at 9:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "phk",
                    "text": "<span class=\"comment-copy\">Is the OS really the one doing the monitoring? I thought this is where the hardware assistance comes into play.</span>",
                    "time": null
                }
            ]
        }
    ]
}