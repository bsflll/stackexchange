{
    "title": "Inline assembly does not compile [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/13261/inline-assembly-does-not-compile",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am currently learning how to hook some functions, and I simply want to insert this simple inline assembly:\n<pre><code>__asm {\n    CMP [ebp + 8], 1\n    JNZ short 01311723\n    jmp [jmpBackAddy]\n}\n</code></pre>\nBut Visual Studio gives me that error:\n\nSeverity  Code    Description Project File    Line    Suppression State\n  Error   C2400   inline assembler syntax error in 'first operand'; found 'constant'\n\nWhat am I doing wrong? I though I can copy out the assembly of OllyDbg but Visual Studio does not accept it\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "c++",
        "function-hooking"
    ],
    "user": "QDA",
    "time": "8 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "My first guess is the compiler doesn't infer the operand size from <pre><code>arg_0</code></pre>, so it doesn't know if a byte, word, or dword should be compared. Try <pre><code>CMP dword ptr[ebp+arg_0], 1</code></pre>.\n",
            "time": null
        },
        {
            "user": "QDA",
            "text": "tried it and got the same error :/\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Is it possible that the compiler doesn't know of value of arg_0 constant ?\n",
            "time": null
        },
        {
            "user": "QDA",
            "text": "yeah that's true, forgot to change it to CPM [ebp + 8], 1. But the problem is in the next line :(\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "the problem is the \"01311723\" instead of a label name.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Yes <pre><code>01311723</code></pre> is a constant and compiler will not know what it is   \nNeither would compiler know what <pre><code>jmpBackAddy</code></pre> is \nfor constant you need to replace it with a label and define the label \nfor a label you need to define it in the asm src code \n<pre><code>#include <windows.h>\n#pragma comment(lib ,\"user32.lib\")\n#pragma comment(lib ,\"kernel32.lib\")\nint CALLBACK WinMain( _In_ HINSTANCE,  _In_opt_ HINSTANCE, _In_ LPSTR, _In_ int)\n{\n    MessageBoxA(NULL,\"Hello World\",\"Hello World\",MB_OK);\n    jmpBackAddy:   <<< defined here  \n    __asm\n    {\n        CMP [ebp + 8], 1\n        JNZ short label\n        jmp [jmpBackAddy]\n    }    \nlabel:  < defined here \n    MessageBoxA(NULL,\"Hello jnz\",\"how are you jnz\",MB_OK);\n    ExitProcess(0);        \n}\n</code></pre>\ncompiled and linked with\n<pre><code>cl /nologo /Zi /EHsc /O1 /analyze /W4 *.cpp /link /release /entry:WinMain\n\nMsgbox.cpp\ne:\\test\\msgbox\\msgbox.cpp(5) : warning C4740: flow in or out of inline asm code suppresses global optimization\n</code></pre>\nand disassembled\n<pre><code>Msgbox!WinMain:\n00021000 55              push    ebp\n00021001 8bec            mov     ebp,esp\n00021003 6a00            push    0\n00021005 6810200200      push    offset Msgbox!`string' (00022010)\n0002100a 6810200200      push    offset Msgbox!`string' (00022010)\n0002100f 6a00            push    0\n00021011 ff1508200200    call    dword ptr [Msgbox!_imp__MessageBoxA (00022008)]\n\nMsgbox!WinMain+0x17:\n00021017 807d0801        cmp     byte ptr [ebp+8],1\n0002101b 7502            jne     Msgbox!WinMain+0x1f (0002101f)\n\nMsgbox!WinMain+0x1d:\n0002101d ebf8            jmp     Msgbox!WinMain+0x17 (00021017)\n\nMsgbox!WinMain+0x1f:\n0002101f 6a00            push    0\n00021021 681c200200      push    offset Msgbox!`string' (0002201c)\n00021026 682c200200      push    offset Msgbox!`string' (0002202c)\n0002102b 6a00            push    0\n0002102d ff1508200200    call    dword ptr [Msgbox!_imp__MessageBoxA (00022008)]\n00021033 6a00            push    0\n00021035 ff1500200200    call    dword ptr [Msgbox!_imp__ExitProcess (00022000)]\n0002103b 5d              pop     ebp\n0002103c c21000          ret     10h\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Aug 11, 2016 at 21:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}