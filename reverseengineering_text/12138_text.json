{
    "title": "Help Coverting ASM to C [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12138/help-coverting-asm-to-c",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI need assistance decompiling the following from ASM to pseudo C.\n<pre><code>Code 1\n...\nmov edx, Var1       # Move Var1 to edx\nmov ecx, Var2       # Move Var2 to ecx\nmov eax, edx        # Move EDX (Var1) to EAX\nimul ecx            # Multiply EAX (Var1) by ECX (Var2). Store result into EDX:EAX\nmov edx, eax        # Move EAX to EDX\nimul edx, eax       # Multiply EDX and EAX, store result into EDX\nmov Var3, ecx       # Move ECX into Var3\n...\n</code></pre>\nI commented the ASM and deduced it results in Var3 = Var2. But what would the C code look like?\n<pre><code>Code 2\n...\n    mov dword ptr [esi], 1\n    xor edx, edx\n    mov [ebx], edx\n    jmp short loc_4012F1\n\nloc_4012E8:\n    mov ecx, [esi]\n    imul ecx, [esi]\n    mov [esi], ecx\n    inc dword ptr [ebx]\n\nloc_4012F1:\n    cmp dword ptr [ebx], 8\n    jl short loc_4012E8\n...\n</code></pre>\nFor this second code, I'm thinking something like,\n<pre><code>for (int i = 0; i > 8; i++){\nint a = 8;\n\nint b = 9;\n\nint c = a * b;\n}\n</code></pre>\nAppreciate any help\n",
    "votes": "-2",
    "answers": 1,
    "views": "447",
    "tags": [
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "d123",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "Simple solution d123 use IDA PRO with Hex-Rays Decompiler, it produces very good results for simple assembly codes like this\nI assembled your code line by line.\n\nThen Pressed <pre><code>F5 key</code></pre> and bam got this code below!\n<pre><code>_DWORD *a1@<ebx>;\n_DWORD *a2@<esi>;\n  *a2 = 1;\n  for ( *a1 = 0; *a1 < 8; ++*a1 )\n    *a2 *= *a2;\n</code></pre>\nit can compile too if you rename <pre><code>_DWORD</code></pre> to <pre><code>unsigned int</code></pre> \nand \nremove <pre><code>@<ebx></code></pre> and <pre><code>@<esi></code></pre> these are just to show what a1 and a2 means\n",
            "votes": "1",
            "user": "SSpoke",
            "time": "Mar 6, 2016 at 2:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Expensive solution is more like it. I've been a customer of IDA Pro for well over a decade and participated in an early beta of the Hex-Rays decompiler plugin, but since it let me more astray than it helped, I decided to not buy the plugin (and pay for the upkeep of maintenance every year). Of course others simply pirate the software, but as a paying customer I am a bit <i>biased</i> against that, even if it sometimes would be more convenient.</span>",
                    "time": null
                }
            ]
        }
    ]
}