{
    "title": "Reverse engineer 4-bit CRC in LG IR packet",
    "link": "https://reverseengineering.stackexchange.com/questions/9413/reverse-engineer-4-bit-crc-in-lg-ir-packet",
    "content": "I am reverse engineering IR protocol of LG air conditioner. AC generally send the whole current state of remote on each key press. Data sent is 28 bits long, last 4 bits seem to be the checksum. I have already tried <pre><code>reveng</code></pre>, but without luck.\nBits 14-16 are mode of operation (heat/cool/fan/auto). Bits 17-20 are temperature + 15 degrees, bits 22-24 are fan speed and bits 25-28 seem to be 4-bit checksum.\nHere are sample values:\n<pre><code>100010000000100001000101 0001\n100010000000100001010101 0010\n100010000000100001100101 0011\n100010000000100010000100 0100\n100010000000100011000101 1001\n100010000000100011010101 1010\n100010000000100011110101 1100\n100010000000000011000101 0001\n100010001100000000000101 0001\n</code></pre>\nIn the last two, only the position of <pre><code>11</code></pre> changed, but checksum stayed the same. How is that checksum calculated?\n",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "decryption",
        "crc"
    ],
    "user": "Marki555",
    "time": "Jul 21, 2015 at 22:40",
    "comments": [
        {
            "user": "Sergey",
            "text": "Please take a look a link, it should help in your reverse engineering\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This seems to be a checksum, just as you state in your question, not a CRC as mentioned in the header.\nGroup the values into blocks of 4 bits, add them, ignore overflow (in these examples, ignore overflow means subtract 32):\n<pre><code>1000 1000 0000 1000 0100 0101  0001 8+8+0+8+4+5=33  1\n1000 1000 0000 1000 0101 0101  0010 8+8+0+8+5+5=34  2\n1000 1000 0000 1000 0110 0101  0011 8+8+0+8+6+5=35  3\n1000 1000 0000 1000 1000 0100  0100 8+8+0+8+8+4=36  4\n1000 1000 0000 1000 1100 0101  1001 8+8+0+8+12+5=41 9\n1000 1000 0000 1000 1101 0101  1010 8+8+0+8+13+5=42 10\n1000 1000 0000 1000 1111 0101  1100 8+8+0+8+15+5=44 12\n1000 1000 0000 0000 1100 0101  0001 8+8+0+0+12+5=33 1\n1000 1000 1100 0000 0000 0101  0001 8+8+12+0+0+5=33 1\n</code></pre>\n",
            "votes": "8",
            "user": "Guntram Blohm",
            "time": "Jul 22, 2015 at 6:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}