{
    "title": "Unable to boot ARM disk image",
    "link": "https://reverseengineering.stackexchange.com/questions/16390/unable-to-boot-arm-disk-image",
    "content": "I'd wish to reverse engineer the firmware of the Netgear R8300 - Nighthawk X8 AC5000 Smart WiFi Router / R8300 (available to download here).  \nI was able to extract the contents of the image using <pre><code>binwalk</code></pre>, however I'd wish to test some executable in a \"live\" situation. In order to do that I tried to use QEMU.  \nSadly, no matter what, I'm getting a system crash.\nI started with:\n<pre><code>$ qemu-system-arm -M vexpress-a9 -hda R8300-V1.0.2.100_1.0.82.chk \nWarning: Orphaned drive without device: id=scsi0-hd0,file=R8300-V1.0.2.100_1.0.82.chk,if=scsi,bus=0,unit=0\nqemu: fatal: Trying to execute code outside RAM or ROM at 0x04000000\n</code></pre>\nAs far as I can understand QEMU has a driver but he doesn't know what do to with that.\nSo I tried to specify more params manually:\n<pre><code>qemu-system-arm -M vexpress-a9 \\\n   -drive file=R8300-V1.0.2.100_1.0.82.chk,format=raw \\\n   -device scsi-hd,id=scsi0-hd0\n\nqemu-system-arm: -device scsi-hd,id=scsi0-hd0: No 'SCSI' bus found for device 'scsi-hd'\n</code></pre>\nI tried to play with some different device type, but it seems that I can't find the correct bus.\nI even tried to split the image into different pieces (kernel and filesystem), but I still got a crash.\nI'm pretty new to reverse engineering, can I have some hints or suggestions on what should I do to boot my firmware image?\nEDIT. \nPlaying a little with the command I was able to get a different error message:\n<pre><code>$ qemu-system-arm -M vexpress-a9 -cpu cortex-a9 \\\n   -redir tcp:8888::80 -m 512 \\\n   -drive file=R8300V1.0.2.100_1.0.82.chk,format=raw \\\n   -device scsi id=scsi0-hd0,if=ide-hd\n\nqemu-system-arm: -device scsi: drive with bus=0, unit=0 (index=0) exists  \n</code></pre>\nI tried to specify a different bus, unit and index, but the error is still the same\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "arm",
        "qemu"
    ],
    "user": "tampe125",
    "time": "Sep 23, 2017 at 11:20",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "Apologies in advance for the silly question, but did you explore all the results returned by google.com.au/search?q=Warning%3A+Orphaned+drive+without+device ?\n",
            "time": null
        },
        {
            "user": "tampe125",
            "text": "Yes, I tried some different command but the result is still the same. Am I missing something obvious?\n",
            "time": null
        },
        {
            "user": "tampe125",
            "text": "Updated the question with some more command tried\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I generally try to avoid booting the whole embedded OS when analyzing a target system. Instead, try to run a single target binary with <pre><code>qemu-system-arm -E PATH=\"/bin:/usr/bin\" -E OTHERENVVARS=foo -g 10000 ./myTargetBinary</code></pre>.\nSee slides 27+ in my presentation https://files.sans.org/summit/hackfest2015/PDFs/IoT-Devices-Fall-Like-Backward-Capacitors-Or-the-Month-Josh-Was-Forced-to-Wear-Pants-Josh-Wright.pdf. You may need to setup the appropriate <pre><code>chroot</code></pre> for the necessary libraries in <pre><code>myTargetBinary</code></pre>. Often, errors in running a binary requires more analysis to identify missing conf files, necessary environment variables, specific hardware access, etc., requiring some preliminary static disassembly prior to runtime analysis.\n",
            "votes": "7",
            "user": "Joshua Wright",
            "time": "Sep 24, 2017 at 16:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}