{
    "title": "What is *(_BYTE *), __usercall, eax and edi [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/13703/what-is-byte-usercall-eax-and-edi",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am trying to understand some algorithm of how the thing works. Here is the function I got from decompiling my executable with Hey Rays. \nI want to run this function to see the result and then understand how it works.\nSo the first thing I want to know what all the signature of this function means?\n<pre><code>__usercall sub_401960<eax>(int a1<edi>)\n__usercall\neax and diamond <>\nedi and diamond <>\n</code></pre>\nThen I want to know what these things mean:\n<pre><code>*(_BYTE *)\n</code></pre>\nand \n<pre><code>__security_cookie\n</code></pre>\nand what they're doing in the following code:\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n\n\nint __usercall sub_401960<eax>(int a1<edi>)\n{\n  int result; // eax@1\n  signed int v2; // esi@1\n  char v3; // cl@2\n  char v4; // cl@3\n  char v5; // cl@8\n  char v6; // cl@9\n  char v7; // cl@14\n  char v8; // cl@15\n  char v9; // cl@20\n  char v10; // cl@21\n\n  result = 0;\n  v2 = 0;\n  do\n  {\n    v3 = *(_BYTE *)(v2 + a1);\n    if ( (unsigned __int8)(v3 - 48) > 9u )\n    {\n      if ( (unsigned __int8)(v3 - 97) > 5u )\n      {\n        if ( (unsigned __int8)(v3 - 65) > 5u )\n          return result;\n        v4 = v3 - 55;\n      }\n      else\n      {\n        v4 = v3 - 87;\n      }\n    }\n...\n  return result;\n}\n</code></pre>\nSorry if I've asked such newbie question\nWhat I want is to run the thing!\n",
    "votes": "2",
    "answers": 2,
    "views": "9k",
    "tags": [
        "ida",
        "assembly",
        "c",
        "hexrays"
    ],
    "user": "alexey polusov",
    "time": "8 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "First, OP mentioned several times he'd like to execute the function. Which should be pretty easy using a debugger (IDA has decent debugging capabilities, or you could give ollydbg a try)\nI'll answer the questions in the order in which they appear:\n\nwhat is <pre><code>__usercall</code></pre> and diamond-wrapped registers in a function's definition? \n\n<pre><code>__usercall</code></pre> is a \"virtual calling convention\" in IDA. This is not a real world calling convention, but instead it let an IDA user to specifically describe how parameters are passed to the function. This is particularly useful when parameters are passed in some unconventional way, and you can't use either <pre><code>__stdcall</code></pre>, <pre><code>__fastcall</code></pre>, etc.\nThe diamond wrapped register names in the prototype are used in <pre><code>__usercall</code></pre> to assign a specific register to that variable (or return address) in the function's body.\nThe prototype you've got (<pre><code>__usercall sub_401960<eax>(int a1<edi>)</code></pre>) means the return value is placed in <pre><code>eax</code></pre> and <pre><code>a1</code></pre> is passed to the function in <pre><code>edi</code></pre>.\n\nWhat does <pre><code>*(_BYTE *)</code></pre> mean?\n\nThis actually has two distinctive parts, evaluated one after the other.\nFirst, <pre><code>(_BYTE *)</code></pre> casts a value or a register to be a byte pointer. This is similar to assigning the value to a C variable which is defined as <pre><code>byte *</code></pre>.\nSecond, <pre><code>*</code></pre> dereferences the address and retrieves the value in that address, value is assumed to be of the type of the pointer, in our case <pre><code>_BYTE</code></pre>.\nThis is plain C syntax, read more about it online. Good C understanding is very beneficial to reverse engineers.\n\nWhat is <pre><code>__security_cookie</code></pre>?\n\n<pre><code>__security_cookie</code></pre> is a variable defined in Microsoft's Visual Studio's compiler when stack canaries are used as stack protections. These are variables that are set to a specific (non deterministic) value at the start of the function, and are validated for the same value when the function ends.\nThis is done to make sure no one managed to overflow a buffer defined in the function's stack, and overwrote return addresses. Because such an overflow must also override the <pre><code>__security_cookie</code></pre> which has an unknown value.\n",
            "votes": "4",
            "user": "NirIzr",
            "time": "Oct 12, 2016 at 15:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "*(BYTE *) means take a byte from the pointer provided in address \nif address is 12345678 and it holds  hello \nthen  x = *(byte *) (12345678 + counter) if counter is 0 \nx will be 'h' and so on\nthe truncated part  checks for [0..9a..eA..E] and returns either 0 (result \nor 10,9,8,7,6 to v4\ndon't see any reference to __security_cookie in Your query     \nbut if you were asking in general what it meant then you should read about stack canaries , stack smashing protection , gscookie etc \nit is a part of implementation to protect against stack / buffer overflow exploits / vulnerabilities\n",
            "votes": "0",
            "user": "blabb",
            "time": "Oct 12, 2016 at 11:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}