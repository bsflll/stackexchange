{
    "title": "Does pintool work with virtual/symbolic CPU",
    "link": "https://reverseengineering.stackexchange.com/questions/14312/does-pintool-work-with-virtual-symbolic-cpu",
    "content": "I am working on debugging tools detection.\nWhat i am looking for is a tool than can log EACH cpu instruction which is run by CPU.\nI am looking for Dynamic Symbolic Execution tools. The code is not executed by a kind of \"software\" cpu, so it is easy to put breakpoints, dump memory or pause process.\nI have found some information on pintools (intel), but i am wondering how it works for tracing binary programs. Does it work with a symbolic CPU ? Or is it a sort of debugger which interacts with kernel and real process ? If so, i think there is a way to detect pintool trace for a malware ?\nThanks\n",
    "votes": "0",
    "answers": 1,
    "views": "431",
    "tags": [
        "pintool"
    ],
    "user": "Bob5421",
    "time": "Aug 31, 2017 at 21:57",
    "comments": [],
    "answers_data": [
        {
            "content": "I am looking for Dynamic Symbolic Execution tools\n\nProbably nitpicking, but as your question is about PIN, this tool falls under the DBI (Dynamic Binary Instrumentation) tool category, it has nothing to do with symbolic execution.\n\nDoes it work with a symbolic CPU ?\n\nNo, you need a binary to be instrumented, be it a PE (Windows) or ELF (linux).\n\nOr is it a sort of debugger which interacts with kernel and real process ?\n\nPIN has two modes of operation:\n\nJIT mode: the code from the binary (that is being instrumented) is JITed on the fly by the PIN engine, which allows you to put your \"hooks\" everywhere you need to.\nProbe mode: the code is executed \"as is\" but you can still put some hooks only at some places (using \"trampolines\" to redirect the code from the binary to your own places). This is a more limited mode compared to the JIT mode.\n\nNote that PIN is user-mode only (it doesn't deal with the kernel side of the operating system).\n\nIf so, i think there is a way to detect pintool trace for a malware ?\n\nIt's pretty easy to detect that your application is currently instrumented by PIN. It has never meant to be undetectable. The pin engine inject your pintool (where you code your instrumentation and analysis routines) into the process address space and either JIT the assembly code on the fly or puts hooks / trampolines into the code, so it's easily detectable.\nThe simplest way to detect PIN being just checking in the process module list if the pin engine is loaded.\nIf you want to detect PIN, just check this presentation from Recon: Dynamic Binary Instrumentation Frameworks: I know you're there spying on me.\n",
            "votes": "1",
            "user": "Neitsa",
            "time": "Jan 3, 2017 at 5:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}