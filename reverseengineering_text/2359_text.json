{
    "title": "Question regarding sections in PE image",
    "link": "https://reverseengineering.stackexchange.com/questions/2359/question-regarding-sections-in-pe-image",
    "content": "I have a file that among other sections has:\n\n<pre><code>code</code></pre>\n<pre><code>.text</code></pre>\n<pre><code>.bss</code></pre>\n\nAnd this file was not crafted manually, so I suspect. \nThe question is what could be the meaning of <pre><code>code</code></pre> and <pre><code>.text</code></pre> sections? As far as I know, executable code is located in <pre><code>.text</code></pre> section, so why compiler would add the other one? \nIf you need more information for answer I'll try to provide as much as I can.\n",
    "votes": "2",
    "answers": 5,
    "views": "1k",
    "tags": [
        "pe"
    ],
    "user": "PhoeniX",
    "time": "Jun 28, 2013 at 7:51",
    "comments": [],
    "answers_data": [
        {
            "content": "In general <pre><code>.code</code></pre> and <pre><code>.text</code></pre> sections are synonymous. Both of those section contain executable code. Whereas, <pre><code>.data</code></pre> section contains non-executable data. \n<pre><code>.bss</code></pre> segment is usually added due to optimization. The size of <pre><code>.bss</code></pre> is usually really small since it is designated to hold uninitialized data. In comparison, <pre><code>.data</code></pre> segment is designated to hold global/static variables and data structures.\nSecond code segment was most likely added manually. \nNow, it is impossible to answer why the binary has two sections of code just by looking at the names. I think it is obviously unusual. I can state one thing for sure, you have two sections for a reason. However, you gonna have to fig in to figure out what the reason is.\nFirst thing I would do is try to confirm segment permissions and CLASS. True code segment will have <pre><code>Read</code></pre> and <pre><code>Execute</code></pre> permissions. You can use lots of different tools to verify it. For instance, if you were to use IDA, it is done with <pre><code>Segments Subview</code></pre>, which could be accessed with Shift + F7. You might get lucky and spot the fake right from the get go.\n",
            "votes": "6",
            "user": "PSS",
            "time": "Jul 2, 2013 at 17:55",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You can create arbitrary sections, with any name you wish in a PE file.\n<pre><code>.text</code></pre> and <pre><code>code</code></pre> sections ring a bell, perhaps this is a packed executable? I cannot remember which packer, however.\n",
            "votes": "2",
            "user": "Jonathon Reinhart",
            "time": "Jun 28, 2013 at 5:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">No, it is a plain file.</span>",
                    "time": null
                },
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">@ph0sec How do you know? Packed executables still look and run like their native formats (PE), but there is code embedded inside to unpack the obfuscated hidden code.</span>",
                    "time": null
                },
                {
                    "user": "Cream Cracker",
                    "text": "<span class=\"comment-copy\">I saw it in packed executables too</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Yes, you are both right. It's just in that particular case, I've already unpacked it and removed all layers of obfuscation. I did not get to the code that is placed in <code>.code</code> section. All my analysis was concentrated on the <code>.text</code> section.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Section names <pre><code>.text</code></pre> and <pre><code>.bss</code></pre> are default names used by Microsoft's VC++ compiler. While <pre><code>CODE</code></pre> is used by Borland's compiler, <pre><code>code</code></pre> is not.\nAs such, it would seem as though this PE file was created with Microsoft VC++ and the <pre><code>code</code></pre> section was added manually by the PE file's author. However, section names can be modified to be any value up to 8 characters (and are ignored by the Windows loader), so take this with a grain of salt.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jun 28, 2013 at 12:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">\"Firstly, the linker names the sections, not the compiler.\" This is simply not true. Where do you think the linker gets the names from?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Well, technically, the compiler <i>suggest</i> names for the sections. But, indeed, this is up to the linker to create the sections and name it. I do think that Jason is right.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">You're correct; I've edit my post above. Thanks for spotting the error ;)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Using <pre><code>#pragma data_seg(.xxxxx)</code></pre> one can create a separate section and it is possible for the name to be <pre><code>.code</code></pre>, as section names are just names and are alterable.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jun 27, 2013 at 21:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Section names don't mean anything to the PE loader and you can set them manually or change them using hex editors. So the only real way of knowing the section's real properties is by checking <pre><code>IMAGE_SECTION_HEADER</code></pre>'s <pre><code>Characteristics</code></pre> field. Use a PE dumping utility like dumpbin and check to see if the section is marked as executable.\n",
            "votes": "1",
            "user": "shebaw",
            "time": "Jul 3, 2013 at 4:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">both sections have the same markings - R and X.</span>",
                    "time": null
                }
            ]
        }
    ]
}