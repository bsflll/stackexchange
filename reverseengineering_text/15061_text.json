{
    "title": "How to get the disassembly line without offset translations in IDAPython?",
    "link": "https://reverseengineering.stackexchange.com/questions/15061/how-to-get-the-disassembly-line-without-offset-translations-in-idapython",
    "content": "When I use <pre><code>GetDisasm()</code></pre>to get disassembly line, I find out that it will show some memory references as a variable name.\nFor example, when raw assembly is:\n<pre><code>mov %r15, 0x20b062(%rip)`\n</code></pre>\n<pre><code>GetDisasm()</code></pre>'s output may be:\n<pre><code>mov r15d, offset s1\n</code></pre>\nI was hoping there is a way to get the raw instruction, rather than the modified one?\n",
    "votes": "4",
    "answers": 2,
    "views": "5k",
    "tags": [
        "ida",
        "binary-analysis",
        "idapython"
    ],
    "user": "liubenxi",
    "time": "Apr 2, 2017 at 8:26",
    "comments": [],
    "answers_data": [
        {
            "content": "Unfortunately, IDA's disassembly cannot be separated from it's data type information that is inherent to IDA (and is considered one of it's biggest advantages).\nYou could, however, alter that information manually to get IDA to display the disassembly as you please. For example, you could use the <pre><code>idc.OpHex(ea, n)</code></pre> API function to make an instruction operand to hexadecimal number format.\nFor example, in order to change the type of the second operand from offset parameter type to hexadecimal parameter type, you can call <pre><code>idc.OpHex</code></pre> with the address of the instruction as the first parameter and the operand number as the second parameter (<pre><code>1</code></pre> in your example), or <pre><code>-1</code></pre> for all operands.\nFor example, given the following instruction in IDA:\n<pre><code>.text:00401421                 mov     ebx, offset aL4jDontWait ; \"--l4j-dont-wait\"\n</code></pre>\nand the output:\n<pre><code>Python>idc.GetDisasm(0x0401421)\nmov     ebx, offset aL4jDontWait; \"--l4j-dont-wait\"\nPython>idc.OpHex(0x0401421, 1)\nTrue\nPython>idc.GetDisasm(0x0401421)\nmov     ebx, 407000h\n</code></pre>\nYou could then just load a previous save to \"undo\" all of those changes.\n",
            "votes": "5",
            "user": "NirIzr",
            "time": "Apr 2, 2017 at 8:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2823000",
                    "text": "<span class=\"comment-copy\">Why not just call GetOperandValue() and replace into the string instead of changing the type in the IDB?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">That's also possible, but seems more error prone IMHO</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Using the minsc plugin at https://github.com/arizvisa/ida-minsc, you can do something like the following.\nDisclaimer: I maintain the ida-minsc plugin.\nThe bytes for the given instruction seem to assemble to the following.\n<pre><code>0:   4c 89 3d 62 b0 20 00    mov    %r15,0x20b062(%rip)\n</code></pre>\nBringing it into Python, and writing it at the current address (<pre><code>database.write</code></pre>) results in this instruction.\n<pre><code>Python>bytes.fromhex('4c 89 3d 62 b0 20 00').hex()\n'4c893d62b02000'\n\nPython>db.write(bytes.fromhex(b))\n\nPython>db.disasm()\n'1c009adc8: mov qword ptr cs:unk_1C02A5E31, r15'\n</code></pre>\nIf we're okay with changing the operand to hexadecimal, we can use <pre><code>instruction.op_hex</code></pre>. Technically, however, this is a reference and so we should probably use <pre><code>instruction.op_ref</code></pre>. Both of these functions, however, modify the representation of the operand.\n<pre><code>Python>ins.op_hex(0)\n0x1c02a5e31\n\nPython>ins.op_ref(0)\n0x1c02a5e31\n</code></pre>\nIf we want to just read the operand (without changing how the disassembler displays it to us), we can use <pre><code>instruction.op</code></pre>. This returns the operand's attributes packed into a tuple.\n<pre><code>Python>ins.op(0)\nSegmentOffset(segment=%cs, offset=0x1c02a5e31)    \n\nPython>int(ins.op(0))\n0x1c02a5e31\n</code></pre>\nWe can also translate this tuple to a different base address if necessary.\n<pre><code>Python>ins.op(0) - db.baseaddress()\nSegmentOffset(segment=%cs, offset=0x2a5e31)\n\nPython>ins.op(0) - db.baseaddress()  + 0x4200000000\nSegmentOffset(segment=%cs, offset=0x42002a5e31)\n</code></pre>\n",
            "votes": "0",
            "user": "Ali Rizvi-Santiago",
            "time": "Jul 20, 2024 at 23:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}