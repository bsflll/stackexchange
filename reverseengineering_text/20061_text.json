{
    "title": "How to convert assembly to pseudo code? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20061/how-to-convert-assembly-to-pseudo-code",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have the following assembly. I don't know how to follow assembly. I was wondering if there is a way to convert assembly to a human readable pseudo code or better yet C code:\n<pre><code>init:\n mov    eax, [ebp+8]    # pointer to key\n push   eax\n mov    eax, [ebp+c]    # pointer to ciphertext\n push   eax\n mov    eax, [ebp+10]   # ciphertext length\n push   eax\n mov    eax, [ebp+1c]   # pointer to plaintext\n push   eax\n xor    ecx, ecx    # loop counter\n\nloop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n\n mov    eax, [esp+c]\n add    eax, edx\n mov    al, byte ptr [eax]\n sub    al, 0x41\n\n mov    ebx, [esp+8]\n add    ebx, ecx\n mov    bl, byte ptr [ebx]\n sub    bl, 0x41\n\n sub    bl, al\n jns    tail\n add    bl, 0x1a\n\ntail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    [eax+ecx], bl\n\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n</code></pre>\n",
    "votes": "-1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "assembly",
        "x86",
        "c"
    ],
    "user": "sukhvir",
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "Although rewriting assembly to pseudo C is not technically reverse engineering, I'll try to help \n<pre><code>init:\n mov    eax, [ebp+8]\n push   eax\n mov    eax, [ebp+0xc]\n push   eax\n mov    eax, [ebp+0x10]\n push   eax\n mov    eax, [ebp+0x1c]\n puse   eax\n xor    ecx, ecx\n</code></pre>\nThis block just basically sets up parameters, as already mentioned <pre><code>ecx</code></pre> is a <pre><code>counter</code></pre>.\n<pre><code>loop:\n xor    edx, edx\n mov    eax, ecx\n mov    ebx, 0x6\n div    ebx\n</code></pre>\nHere <pre><code>edx</code></pre> is zeroed out, counter is moved to <pre><code>eax</code></pre> and unsigned division by 6 is performed. <pre><code>div</code></pre> stores the quotient in <pre><code>eax</code></pre> and remainder in <pre><code>edx</code></pre>.\n<pre><code>mov    eax, [esp+0xc]\nadd    eax, edx\nmov    al, [eax]\nsub    al, 0x41\n</code></pre>\nHere pointer from the key is accessed at offset <pre><code>edx</code></pre> and 0x41 is subtracted.\n<pre><code>char a = key[counter % 6] - 0x41;\n</code></pre>\nOn to the next block\n<pre><code>mov    ebx, [esp+8]\nadd    ebx, ecx\nmov    bl, [ebx]\nsub    bl, 0x41\n</code></pre>\nHere pointer from the <pre><code>ciphertext</code></pre> is accessed at offset <pre><code>counter</code></pre> and 0x41 is subtracted.\n<pre><code>char b = ciphertext[counter] - 0x41;\n</code></pre>\nNext\n<pre><code>sub    bl, al\njns    tail\nadd    bl, 0x1a\n</code></pre>\nHere <pre><code>a</code></pre> and <pre><code>b</code></pre> are subtracted and if difference is less than zero 0x1a is added to <pre><code>b</code></pre>;\n<pre><code>b = b - a;\nif(b < 0) b += 0x1a;\n</code></pre>\nNext:\n<pre><code>tail:\n add    bl, 0x41\n mov    eax, [esp]\n mov    byte ptr [eax+ecx], bl\n inc    ecx\n cmp    ecx, [esp+4]\n jl loop\n</code></pre>\nHere 0x41 is added back to <pre><code>b</code></pre> and its written to <pre><code>plaintext</code></pre> at offset <pre><code>counter</code></pre>.\n<pre><code>plaintext[counter] = b+0x41;\ncounter++;\n</code></pre>\nThis was done in a loop with <pre><code>length</code></pre> as the limit.\n<pre><code>while(counter < length)\n</code></pre>\nEquivalent complete code.\n<pre><code>void decode(char *key, char *ciphertext, size_t length, char *plaintext){\n    size_t counter = 0; \n    do{\n        char diff = ciphertext[counter] - key[counter % 6];\n        plaintext[counter++] = 0x41 + diff + (diff < 0 ? 0x1a : 0);\n    }\n    while(counter < length);\n}\n</code></pre>\n",
            "votes": "7",
            "user": "sudhackar",
            "time": "Dec 12, 2018 at 3:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user2347953",
                    "text": "<span class=\"comment-copy\">Probably not much sense commenting on a closed question, but the subtraction is the wrong way aroundâ€”key is supposed to be subtracted from cipher text. Also it's the Vigenere cipher.</span>",
                    "time": null
                }
            ]
        }
    ]
}