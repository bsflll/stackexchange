{
    "title": "Debugging Binary using Far Ret to switch Code Segment",
    "link": "https://reverseengineering.stackexchange.com/questions/16935/debugging-binary-using-far-ret-to-switch-code-segment",
    "content": "It appears that GDB is unable to handle binaries which switch code segments.\nUsing <pre><code>pwntools</code></pre>*, it's trivial to generate a 32-bit intel binary which uses <pre><code>retf</code></pre> to switch to the 64-bit code segment.  Linux supports this, and everything \"works fine\".\n<pre><code>>>> print shellcraft.to_64bit()\n    push 0x33\n    jmp 2f\n1:\n    retf\n2:\n    call 1b\n\n>>> print shellcraft.amd64.mov('rax', 0xdeadbeefcafebabe)\nmov rax, 0xdeadbeefcafebabe\n</code></pre>\nWe can assemble these to binary:\n<pre><code>>>> asm(shellcraft.to_64bit())\n'j3\\xeb\\x01\\xcb\\xe8\\xfa\\xff\\xff\\xff'\n\n>>> asm(shellcraft.amd64.mov('rax', 0xdeadbeefcafebabe), arch='amd64')\n'H\\xb8\\xbe\\xba\\xfe\\xca\\xef\\xbe\\xad\\xde'\n</code></pre>\nAnd stick it all into an ELF:\n<pre><code>>>> ELF.from_bytes('j3\\xeb\\x01\\xcb\\xe8\\xfa\\xff\\xff\\xff' + 'H\\xb8\\xbe\\xba\\xfe\\xca\\xef\\xbe\\xad\\xde')\n[*] '/var/folders/4h/rrwj8fpj1cqcfb83syr_f930008rd2/T/pwn-asm-NbnRYW/step3-elf'\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8049000)\n    RWX:      Has RWX segments\n</code></pre>\nFor StackExchange users looking to reproduce this without installing <pre><code>pwntools</code></pre>, the full binary data is:\n<pre><code>7f454c4601010100000000000000000002000300010000007490040834000000a000000000000000340020000200280003000200010000000000000000900408009004088900000089000000070000000010000051e57464000000000000000000000000000000000000000007000000100000006a33eb01cbe8faffffff48b8bebafecaefbeadde00002e7368737472746162002e7368656c6c636f64650000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00000001000000070000007490040874000000150000000000000000000000010000000000000001000000030000000000000000000000890000001600000000000000000000000100000000000000\n</code></pre>\nNow, when we run this under GDB, we end up with the register state we expect, but there's no way to see the extended registers, or convince it to switch architectures -- or display the correct disassembly!\n<pre><code>$ gdb -q --nx --nh \"/home/user/step3-elf\"\nReading symbols from /home/user/step3-elf...(no debugging symbols found)...done.\n(gdb) x/5i 0x8049074\n   0x8049074:   push   $0x33\n   0x8049076:   jmp    0x8049079\n   0x8049078:   lret\n   0x8049079:   call   0x8049078\n   0x804907e:   dec    %eax\n(gdb) b *0x8049074\nBreakpoint 1 at 0x8049074\n(gdb) r\nStarting program: /home/user/step3-elf\n\nBreakpoint 1, 0x08049074 in ?? ()\n(gdb) si\n0x08049076 in ?? ()\n(gdb)\n0x08049079 in ?? ()\n(gdb)\n0x08049078 in ?? ()\n(gdb)\n0x0804907e in ?? ()\n(gdb) x/i $pc\n=> 0x804907e:   dec    %eax\n(gdb) i r eax\neax            0x0  0\n(gdb) ni\n0x08049088 in ?? ()\n(gdb) i r eax\neax            0xcafebabe   -889275714\n(gdb) set arch i386:x86-64\nwarning: Selected architecture i386:x86-64 is not compatible with reported target architecture i386\nArchitecture `i386:x86-64' not recognized.\nThe target architecture is set automatically (currently i386)\n</code></pre>\nHow can I convince GDB to show the correct, 64-bit disassembly, when it refuses to switch architectures?  Even <pre><code>info reg all</code></pre> does not display all of the registers (e.g. RAX) correctly.\n\n*to_64bit() is not in a released version of pwntools\n",
    "votes": "2",
    "answers": 1,
    "views": "679",
    "tags": [
        "gdb",
        "elf",
        "binary",
        "shellcode",
        "amd64"
    ],
    "user": "Zach Riggle",
    "time": "Dec 7, 2017 at 22:55",
    "comments": [
        {
            "user": "perror",
            "text": "What version of <pre><code>gdb</code></pre> are you using ? And, is it the multiarch version ?\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "During a ctf I faced the same problem. If you're okay with using another debugger, fdbg worked fine. But it has not that many significant features.\n",
            "time": null
        },
        {
            "user": "Zach Riggle",
            "text": "GDB 7.12, multiarch isn't necessary since it's a host-architecture binary.  \"set arch\" shows \"i386:x86-64\" as a supported option.  I re-tried with gdb-multiarch with identical results.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "CPUs and OSes can support switching between 32 and 64 bit execution modes kind of easily thanks to how 32bit mode backwards compatibility was made in AMD64. This was kind of a requirement to avoid having the majority of system binaries duplicated on 64bit machines to execute 32bit code (which is still pretty common to be solely distributed).\nThis isn't quite the case for debuggers and some process manipulation tools that in some cases are required to bundle 64bit helper processes or ship both 32 and 64 bit binaries. Switching between 32 and 64 bit execution modes is indeed only a far jump away, but supporting that by a debugger is a lot more complicated. Transition/translation functions must be provided for the debugger's internal states (not the the debugged process's state, some APIs simply cannot cross process bitness boundaries, etc.\nThis is not to say it's impossible, merely to explain why this may not be available yet.\n",
            "votes": "-1",
            "user": "NirIzr",
            "time": "Dec 9, 2017 at 18:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zach Riggle",
                    "text": "<span class=\"comment-copy\">GDB supports switching architectures at runtime via the \"set arch\" command. However, since GDB has access to the original file, it is preventing me from performing the switch.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@ZachRiggle <code>set architecture</code> is used to switch architectures while <i>GDB</i> is running, but not while a <i>debugged process</i> is running. Those are two totally different things.</span>",
                    "time": null
                }
            ]
        }
    ]
}