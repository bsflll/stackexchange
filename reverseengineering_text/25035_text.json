{
    "title": "Why there are only 8 hexa memory digits while my RAM is 16G",
    "link": "https://reverseengineering.stackexchange.com/questions/25035/why-there-are-only-8-hexa-memory-digits-while-my-ram-is-16g",
    "content": "I'm totally new to reverse engineering, when I start debugging my c program with radare2, and start showing assembly, I found that addresses are only <pre><code>8 hexa</code></pre> digits, which means <pre><code>16^8</code></pre> =  <pre><code>4294967296</code></pre> bytes, which is <pre><code>4G RAM</code></pre>.\nBut I have <pre><code>16G RAM</code></pre>, which is <pre><code>17179869184</code></pre> bytes, which needs <pre><code>9 digits</code></pre> not 8\nThis is part of the assembly as radare2 views:\n<pre><code>0x004011d0      750e           jne 0x4011e0\n0x004011d2      488d3d410e00.  lea rdi, str.Acess_granted  ; 0x40201a ; \"Acess granted!\" ; const char *s\n</code></pre>\nI think I misunderstand something here, can someone clarify?\nThanks in advance.\n",
    "votes": "0",
    "answers": 1,
    "views": "96",
    "tags": [
        "disassembly",
        "assembly",
        "radare2",
        "memory",
        "disassemblers"
    ],
    "user": "zyydoosh",
    "time": "May 16, 2020 at 13:57",
    "comments": [
        {
            "user": "Abr001am",
            "text": "32 bits programs can't allocate beyond 4G of memory, are you on 32x architecture ?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your physical RAM size doesn't say too much about what your memory addresses will look like. What matters is your system architecture and how many bits there are (usually 64 or 32). Virtual memory also makes RAM insignificant; each process has virtual memory space covering possibly the entire address space but mapped to a limited section of physical memory. Even on a 64-bit system where there are theoretically 2^64 bytes (an unrealistic 16 exibytes) of mappable addresses, you can still have a system with under 1GB of RAM and still have access to the virtual address space (which is much less than 2^64 in reality but still possibly larger than your physical RAM).\nWhat you are seeing in radare (0x004011d0) are addresses within the executable itself, and are still 64-bit but leading zeros are often omitted in various tools for convenience (actual address is 0x00000000004011d0). While they are mapped into the process's virtual memory table, those addresses are actually burned into the executable at compile time (unless it is compiled with PIE). Those addresses are usually around that general area and are typically the lowest section of virtual memory.\nIf you want to see your 64-bit address space at work, look at pointers in registers and on the stack (or the stack addresses themselves), which will be much larger.\n",
            "votes": "6",
            "user": "Andreas Wenzel",
            "time": "May 26, 2020 at 23:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Abr001am",
                    "text": "<span class=\"comment-copy\">64/86x friendly programs can allocate more than 4G dynamically, while 32x programs can't work on more than 4G either dynamically or statically.</span>",
                    "time": null
                },
                {
                    "user": "multithr3at3d",
                    "text": "<span class=\"comment-copy\">@Abr001am unless PAX is involved, which gives x86 more room</span>",
                    "time": null
                }
            ]
        }
    ]
}