{
    "title": "Disassembling VxWorks Firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/16675/disassembling-vxworks-firmware",
    "content": "I am trying to disassemble the firmware for the Cisco Sx300 switch as found here: \nhttps://software.cisco.com/download/release.html%3Fmdfid%3D283019611%26softwareid%3D282463181%26release%3D1.2.7.76\nWhile some documentation for other iterations of Wind River's firmware exist, I have not encountered a working set of tools for this particular firmware. \nBinwalk gives some results:\n<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             Cisco VxWorks firmware header, header size: 80 bytes, number of files: 15, image size: 6988894, firmware version: \"1.2.7.76\"\n209           0xD1            LANCOM WWAN firmware\n1483          0x5CB           LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 16016448 bytes\n3984149       0x3CCB15        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 859164 bytes\n4153128       0x3F5F28        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 2962457 bytes\n4847723       0x49F86B        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 2122505 bytes\n6914211       0x6980A3        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 66664 bytes\n6932632       0x69C898        XML document, version: \"1.0\"\n6950635       0x6A0EEB        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 121427 bytes\n</code></pre>\nHowever, extraction with the -e flag doesn't provide meaningful results. Several files are extracted, but others end up as corrupt archives, or file that are are too small to be actual files. I am not certain that the LZMA compressed data isn't false positive. \nDisassembly with IDA fails, as I do not know the loader address. \nThis Cisco help resource suggests that there is some form of compression going on:\nhttps://supportforums.cisco.com/t5/small-business-support-documents/how-to-recover-a-reboot-loop-on-sx300/ta-p/3134953\nThis help support post confirms that the Firmware is ARM based, but I am not certain as to the exact make of the chip. \nI am aware that previous iterations of the VxWork's Firmware had the loader address in the header. Analysis of the header did not find a useable address at the suggested location (0x14)\n\nI attempted to match up the strings in the firmware to string tables and was not able to find any string tables, despite a thorough search. This supports my notion that it is compressed, or otherwise packed. \nLastly, I searched through the binary for probable addresses in order to deduce the loader address. I was not able to find any commonly referenced addresses or ranges. This was especially hard, as none of the binary was able to be correctly analyzed by IDA. \nAm I missing something easy and fundamental here? Is there a special technique for VxWorks firmware?\n",
    "votes": "5",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "firmware"
    ],
    "user": "MrSynAckSter",
    "time": "Oct 31, 2017 at 14:52",
    "comments": [],
    "answers_data": [
        {
            "content": "This supports my notion that it is compressed, or otherwise packed.\n\nYou are correct; most of this firmware image is compressed or encrypted. In order to be disassembled the binary will have to be decompressed/decrypted.\nEvidence of compression/encryption:\n\n<pre><code>binwalk</code></pre> entropy plot\n\nThe entropy level throughout most of the file appears to appears to be close to the maximum possible.\nVisualization via binvis.io:\nA visualization of the entropy of the firmware is on the left and a visualization of the entropy of an uncompressed file is on the right:\n\n\nent (A Pseudorandom Number Sequence Test Program)\n<pre><code>$ ent sx300_fw-12776.ros \nEntropy = 7.999864 bits per byte.\n\nOptimum compression would reduce the size\nof this 6988974 byte file by 0 percent.\n\nChi square distribution for 6988974 samples is 1330.86, and randomly\nwould exceed this value 0.01 percent of the times.\n\nArithmetic mean value of data bytes is 127.3134 (127.5 = random).\nMonte Carlo value for Pi is 3.145007550 (error 0.11 percent).\nSerial correlation coefficient is 0.002524 (totally uncorrelated = 0.0).\n</code></pre>\nSee http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/\n",
            "votes": "3",
            "user": "perror",
            "time": "Jan 2, 2018 at 9:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mark",
                    "text": "<span class=\"comment-copy\">devttys0 is no more, but fortunately archive.org has the encryption vs compression article: <a href=\"https://web.archive.org/web/20170830044550/http://www.devttys0.com/2013/06/differentiate-encryption-from-compression-using-math/?replytocom=12456\" rel=\"nofollow noreferrer\">web.archive.org/web/20170830044550/http://www.devttys0.com/2013/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}