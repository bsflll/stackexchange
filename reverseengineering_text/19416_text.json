{
    "title": "How to know the arguments of a Linux syscall?",
    "link": "https://reverseengineering.stackexchange.com/questions/19416/how-to-know-the-arguments-of-a-linux-syscall",
    "content": "To my knowledge, this is a decent resource to know the parameters of a Linux syscall. However, this only lists 32 bit syscalls, not the 64 bit ones. Moreover, the reference doesn't say which register is being used by what parameter.\nSo far I understand, the man-pages for the libc wrappers or referring to the Linux kernel headers can be a solution. But, I am looking for a more friendly resource that can be consulted quickly.\n\nWhat is an authentic resource to know the parameter to register mappings?\nIs there a resource for 64 bit syscalls as well?\n",
    "votes": "0",
    "answers": 2,
    "views": "5k",
    "tags": [
        "linux",
        "system-call"
    ],
    "user": "sherlock",
    "time": "Sep 21, 2018 at 10:33",
    "comments": [
        {
            "user": "Twifty",
            "text": "Doesn't the man page man7.org/linux/man-pages/man2/syscall.2.html list them?\n",
            "time": null
        },
        {
            "user": "user202729",
            "text": "I guess you just need to learn how to use <pre><code>man</code></pre>. Do you know the search feature in <pre><code>less</code></pre>?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This StackOverflow answer is a great resource.\nIn summary, for 32 bits: Syscall number is eax. ebx, ecx, edx, esi, edi, ebp are used for arguments. You invoke the syscall with <pre><code>int 0x80</code></pre>. All registers are preserved after the syscall.\nFor 64 bit, that answer cites this specification, which might be a good \"authentic resource\" as you asked for.\nThis is a good syscall table for 64 bit.\nThis is a good syscall table for 32-bit.\n",
            "votes": "4",
            "user": "user464014",
            "time": "Sep 22, 2018 at 20:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I wouldn't call it authentic, but this surely is a source I've been using for quite some time now.\nDouble click on the line of the syscall to see what the parameters are (and their types). \nYou may see things like <pre><code>struct sockaddr __user</code></pre>, for these you need to dig a bit into the source files.\n",
            "votes": "1",
            "user": "Elian Kamal",
            "time": "Sep 22, 2018 at 11:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}