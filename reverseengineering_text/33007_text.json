{
    "title": "What's the best way or approach to debug binary Linux library?",
    "link": "https://reverseengineering.stackexchange.com/questions/33007/whats-the-best-way-or-approach-to-debug-binary-linux-library",
    "content": "I've got a header file (I know the functions and have some documentation) and a .so file:\nFrom a wrapper library and from context, I need to call \"Connect\", but it does not work, just fails with some obscure error code.\nSo now my question is: What's the best, easiest approach or tool to find out what this method is doing inside? Given that I know the function, its parameters and such, in Java or C#, I would look at the method's bytecode or MSIL code, ... but I guess the source, which I don't have any access to, was C/C++ (.h).\n",
    "votes": "2",
    "answers": 2,
    "views": "84",
    "tags": [
        "disassembly",
        "debugging",
        "decompilation",
        "binary"
    ],
    "user": "Harry Blauberg",
    "time": "Jun 5, 2024 at 17:38",
    "comments": [],
    "answers_data": [
        {
            "content": "The standard method to decompile and reverse engineer a binary executable is to use a tool such as Ghidra or IDA (very popular tools for this task). These can help you find the function and decompile the code to C-like pseudo-code.\n\nhttps://github.com/NationalSecurityAgency/ghidra\nhttps://hex-rays.com/ida-pro/\n",
            "votes": "1",
            "user": "yaspr",
            "time": "Jul 14, 2024 at 12:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Use static analysis with radare2. You could also connect with gdb and set break points in either or both programs.\n",
            "votes": "0",
            "user": "PhantomThreads",
            "time": "Jun 16, 2024 at 1:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}