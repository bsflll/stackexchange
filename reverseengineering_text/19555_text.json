{
    "title": "How are __argc and __wargv globals exported from a 64-bit PE file compiled with Visual Studio?",
    "link": "https://reverseengineering.stackexchange.com/questions/19555/how-are-argc-and-wargv-globals-exported-from-a-64-bit-pe-file-compiled-with",
    "content": "I need to inject my code into a 64-bit process. I'm wondering, how can I access <pre><code>__argc</code></pre> and <pre><code>__wargv</code></pre> global variables once in the injected process?\n\nAre they always present at a static/preset address?\n",
    "votes": "2",
    "answers": 1,
    "views": "232",
    "tags": [
        "pe",
        "injection",
        "windows-10",
        "assembly",
        "x86-64"
    ],
    "user": "c00000fd",
    "time": "Oct 6, 2018 at 1:00",
    "comments": [
        {
            "user": "RbMm",
            "text": "this is exported from msvsrt.dll. simply import this values too, or call <pre><code>GetProcAddress</code></pre>\n",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "@RbMm: You meant msvcrt.dll right? If so, I can get valid addresses for <pre><code>GetProcAddress(GetModuleHandle(L\"msvcrt.dll\"), \"__argc\")</code></pre> and also for <pre><code>\"__wargv\"</code></pre> but when I try to see what those pointers are pointing to, all I get are 0's.\n",
            "time": null
        },
        {
            "user": "RbMm",
            "text": "you need call <pre><code>__wgetmainargs</code></pre>. this call initialize <pre><code>__argc</code></pre> and <pre><code>__wargv</code></pre>\n",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "You can use GetCommandLine to get the full command line. You can get the argc and argv with this function: docs.microsoft.com/en-us/windows/desktop/api/shellapi/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "These two symbols aren't exported in the usual way (i.e. via the export table).  Instead, they are public symbols inside the run-time library itself.  The startup code that runs before _main() performs the command-line resolution, assigning parameters into the __wargv array, and storing the count in __argc.  The relative addresses are fixed for the file, but the absolute addresses will vary if Address Space Layout Randomisation (ASLR) is in effect.\n",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Oct 12, 2018 at 17:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">thanks. I'm assuming it's using the <code>shell32!CommandLineToArgvW</code> api to do the parsing, like @RbMm suggested in the comments above, hah? Also, you say that these symbols have relative fixed addresses. But relative to what -- one of the read-write data sections in the PE file? Image base?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">It might use GetCommandLineW and then allocate the array itself.  That's common behaviour.  The addresses are fixed relative to the start of the data section that holds them in your PE file.</span>",
                    "time": null
                }
            ]
        }
    ]
}