{
    "title": "Sniffing serial Bluetooth traffic on Android",
    "link": "https://reverseengineering.stackexchange.com/questions/20319/sniffing-serial-bluetooth-traffic-on-android",
    "content": "Related to UE Megaboom serial protocol: I am trying to get some insights on the serial protocol spoken by the UE Megaboom, which I suspect is how the app controls the advanced features of the speaker.\nOne approach would be to install the app on an Android VM, connect to the speaker and capture the traffic exchanged.\nWith VirtualBox, I would probably need to connect a Bluetooth dongle as a USB device and let the VM control it.\nHow can I capture the serial traffic exchanged between the speaker and the app?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "android",
        "serial-communication",
        "sniffing",
        "bluetooth"
    ],
    "user": "user149408",
    "time": "Jan 9, 2019 at 14:32",
    "comments": [],
    "answers_data": [
        {
            "content": "According to this StackOverflow answer, Android has a setting in Developer Options from 4.4 onwards. You first need to enable Developer Settings (if you have not done so already), then enable “Enable Bluetooth HCI snoop log”.\nI have not tried this myself yet, but according to the information I could find:\n\nCommunication should be logged to a file called <pre><code>/sdcard/btsnoop_hci.log</code></pre>.\nIf your external storage dir is something else than <pre><code>/sdcard</code></pre>, modify the path accordingly.\nSome flavors of Android may use an entirely different path. Look for the <pre><code>FileName</code></pre> parameter in <pre><code>/etc/bluetooth/bt_stack.conf</code></pre> to find the correct path. (Some flavors of Android may put this file in <pre><code>/system/etc</code></pre> or <pre><code>/vendor/etc</code></pre>.)\nOn some flavors of Android (including Android x86_64 CM 14.1), none of the above will work but you will find the log in <pre><code>/data/misc/bluetooth/logs/btsnoop_hci.log</code></pre> (you need to have root permissions to get the file).\nThe resulting file can then be analyzed with Wireshark or similar.\n\nTo get Bluetooth from an Android VM running on VirtualBox:\n\nIf you are on Linux (tried on Ubuntu 18.04):\n\n\nAdd yourself to the <pre><code>vboxusers</code></pre> group, e.g. by running <pre><code>sudo usermod -a -G vboxusers your_user_name</code></pre>\nLog out and back in for the new group membership to take effect.\n\nStart your Android VM.\nIn Devices > USB Devices, connect the Bluetooth adapter to the VM. It may have an inconspicuous name (mine is just called Intel [0001]).\nOptionally, add a USB filter to have the VM grab the BT device automatically whenever it starts.\nBe aware that the host system will lose access to the BT adapter while it is in use by the VM. If you have a BT mouse or keyboard, either replace it with a wired one, or get an additional BT adapter and use that for your VM.\n\nIn practice, however, I was unable to get a reliable Bluetooth connection from the Android VM. I can scan for devices and managed to pair the BT device (though that took multiple attempts), but I never managed to connect to the device. I suspect that is because Android is quite resource-hungry, and the overhead of virtualization along with a restriction to 2 out of 4 processor cores (which I have set this way to keep VMs from hogging my entire CPU) does not leave enough room for Android to run smoothly. Will need to retry with Android x86_64 on a USB stick, running on physical hardware.\n",
            "votes": "2",
            "user": "user149408",
            "time": "Jan 11, 2019 at 0:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}