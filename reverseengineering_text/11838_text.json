{
    "title": "Trouble understanding this rop chain",
    "link": "https://reverseengineering.stackexchange.com/questions/11838/trouble-understanding-this-rop-chain",
    "content": "I recently saw a video of someone doing some rop work. And I have a lot of trouble about what is going on. His setup is like this:\n<pre><code>[garbage]\n[xor eax]\n[xor ebx]\n[address of \"sh\"]\n[pop ecx]\n[address of Null byte]\n[pop edx]\n[address of Null byte]\n[add eax 11]\n</code></pre>\nThe first instruction is <pre><code>xor eax</code></pre> (where <pre><code>eip</code></pre> return is) , and I don't understand where the <pre><code>esp</code></pre> is when there are the pop instructions\nLink to the video : https://youtu.be/uYHOxlYzH0A\n",
    "votes": "1",
    "answers": 1,
    "views": "473",
    "tags": [
        "assembly",
        "buffer-overflow"
    ],
    "user": "side",
    "time": "Jan 26, 2016 at 18:08",
    "comments": [],
    "answers_data": [
        {
            "content": "The ROP chain uses gadgets, which are short code snippets performing a basic function. The instruction what you see in the Python script in the video are the gadgets names, which were selected in the beginning.\nAs an example, the <pre><code>XOREAX</code></pre> gadget was a code snippet at address <pre><code>0x080512c0</code></pre>, which contains the following instructions:\n<pre><code>xor eax, eax\nret\n</code></pre>\nSo, whet the <pre><code>XOREAX</code></pre> gadget is called, the <pre><code>eax</code></pre> register is cleared and a <pre><code>ret</code></pre> instruction is executed. Because the <pre><code>ret</code></pre> load an address from the stack and jumps to it, this instruction is used to call the next gadget.\nWhat you see in the Python script is the construction of the payload, which will be placed into the stack. The first address will be the overwritten return address and the next values will be the addresses of the gadgets. In some places in the payload you see <pre><code>SH</code></pre> and <pre><code>NULL</code></pre>. It is because the previous gadget load some value from the stack into a register, so the value should be placed into the stack also. The <pre><code>SH</code></pre> is an address points to the <pre><code>sh</code></pre> string, while the <pre><code>NULL</code></pre> is an address points to a <pre><code>0</code></pre> value in the memory.\nSo, the whole ROP chain is only initializes the registers to execute a system call.\n<pre><code>XOREAX                             -> clears EAX\nPOPEBX, SH                         -> moves 'sh' string to EBX\nPOPECX, NULL                       -> moves a pointer to a NULL value to ECX\nPOPEDX, NULL                       -> moves a pointer to a NULL value to EDX\nADDEAX3, ADDEAX3, ADDEAX3, ADDEAX2 -> set EAX to 11\nSYSCALL                            -> perform syscall instruction\n</code></pre>\n",
            "votes": "3",
            "user": "ebux",
            "time": "Jan 25, 2016 at 9:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}