{
    "title": "Finding function call (with arguments) in ELF file",
    "link": "https://reverseengineering.stackexchange.com/questions/20725/finding-function-call-with-arguments-in-elf-file",
    "content": "I have two kinds of ELF files, built from C++.\n<pre><code>.so</code></pre> files:\n\nELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=5e751e769912aef28bc63b888e5e4904b867a180, stripped\n\nAnd executables:\n\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=1c215d8895277612d3f4332836f48dd45967f69d, stripped\n\nI am completely new to reverse engineering, and I have been experimenting with <pre><code>objdump</code></pre>, <pre><code>readelf</code></pre> and <pre><code>nm</code></pre>, but I still need some help.\nI want to find function calls to a few functions from a library, without executing the binaries (i.e., static analysis).\nWith the above commands, I know the symbols are used, but I do not know which arguments are passed to the calls, or how many times the function was called.\nIdeally, I would like to get something close to the original source code, e.g.\n<pre><code>thelib::TheClass::theFunction(\"a\", b, c);\n</code></pre>\nbut I understand this is hard to achieve. I would be content just by retrieving whether the first argument was a string literal (and its value) or something else.\nIs this possible with existing tools, such as the above (possibly with specific options), or would I have to implement something of my own?\n",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "c++",
        "elf",
        "static-analysis"
    ],
    "user": "afsantos",
    "time": "Feb 26, 2019 at 16:12",
    "comments": [
        {
            "user": "Nordwald",
            "text": "Welcome to RE.SE! There are a lot of Disassemblers out there which may aid you with your task. I would recommend familiarizing yourself with IDA (7.0 is free), binaryninja, radare2, hopper or something similar. Basically, you would need some dataflow analysis to see which data does where.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@Nordwald: Isn't IDA Free limited to PE files?\n",
            "time": null
        }
    ],
    "answers_data": []
}