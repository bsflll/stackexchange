{
    "title": "Reading params of a text engine function amd86_64",
    "link": "https://reverseengineering.stackexchange.com/questions/18182/reading-params-of-a-text-engine-function-amd86-64",
    "content": "I'm starting to learn amd86_64 calling convention and how it calls params and clean the stack but the concept hasn't sunk in yet, so i would like to get a help reading the params as this might clear the confusion for me in the future. I used the same function on a different processor architecture before but i'm sure the signature has changed by the devs because I tried to call it same as before but it crashes every time, here's the old signature:\n<pre><code>void(*DrawText)(int, float x, float y, int color, const char * text)\n</code></pre>\nHere's the assembly for the function in amd86_64 starting from the caller function:\n<pre><code>    push    rbp\n    mov     rbp, rsp\n    push    r15\n    push    r14\n    push    r13\n    push    r12\n    push    rbx\n    sub     rsp, 178h\n    lea     rdi, [rbp+var_108]\n    mov     esi, 1\n    xor     edx, edx\n    call    sub_937750\n    lea     rax, dword_1885C10\n    vcvtsi2ss xmm0, xmm0, dword ptr [rax+54h]\n    vmovss  [rbp+var_164], xmm0\n    vcvtsi2ss xmm0, xmm0, dword ptr [rax+58h]\n    vmovss  [rbp+var_168], xmm0\n    lea     rsi, a30f_1\n    vmovss  xmm0, dword ptr cs:qword_10799B8\n    xor     edi, edi\n    call    sub_A0E930\n    lea     rcx, qword_17FAB50\n    mov     rcx, [rcx]\n    cmp     byte ptr [rcx+2E87h], 0\n    jnz     loc_4994\n    cmp     byte ptr [rcx+2E81h], 0\n    jz      loc_4994\n    mov     eax, eax\n    vcvtsi2ss xmm0, xmm0, rax\n    vmovss  xmm1, [rbp+var_168]\n    vsubss  xmm0, xmm1, xmm0\n    lea     rax, unk_1871D60\n    vmovss  xmm2, dword ptr [rax]\n    vxorps  xmm1, xmm1, xmm1\n    vucomiss xmm2, xmm1\n    jbe     loc_3E5E\n    vmovss  xmm1, dword ptr cs:qword_10799B8\n    vdivss  xmm1, xmm1, xmm2\n    vmovss  [rbp+var_16C], xmm1\n    vcvtss2sd xmm2, xmm2, xmm2\n    lea     rdi, [rbp+var_108]\n    lea     rdx, a62fFps\n    mov     eax, 0FF0000FFh\n    mov     ecx, 0FF00FFFFh\n    mov     r14d, 0FF00FF00h\n    vucomiss xmm1, dword ptr cs:qword_10799B8+4\n    cmova   r14d, ecx\n    vaddss  xmm1, xmm1, dword ptr cs:qword_10799B8+8\n    vucomiss xmm1, dword ptr cs:qword_10799B8+0Ch\n    cmova   r14d, eax\n    vmovss  [rbp+var_168], xmm0\n    vmovss  xmm1, [rbp+var_164]\n    mov     esi, r14d\n    mov     al, 3\n    call    DrawText\n</code></pre>\nHere's what I gathered so far (not sure if it's right though), 1st arg is a pointer <pre><code>lea rdi, [rbp+var_108]</code></pre> 2nd and 3rd are floats which is the positioning coordinates:\n<pre><code>vmovss  xmm1, dword ptr cs:qword_10799B8\nvdivss  xmm1, xmm1, xmm2\nvmovss  [rbp+var_16C], xmm1\nvcvtss2sd xmm2, xmm2, xmm2\n</code></pre>\n4th and 6th are int's (hex code for rgb colors I assume) <pre><code>mov esi, r14d</code></pre> and <pre><code>mov ecx, 0FF00FFFFh</code></pre> the 5th arg is a char pointer <pre><code>lea rdx, a62fFps</code></pre>. The function doesn't return anything so i'm sure it's a void.\n<pre><code>void(*DrawText)(int *, float x, float y, int color, int, const char * text)\n</code></pre>\nI tried to call this way but it also crashes, please let me know if I got something wrong and explain stuff because i'm little newbee when it comes to assembly.\nNote: This is not a PLEASE DO IT FOR ME question but rather explain how do I read the params properly, I don't mind posting the final result at the end of the answer though.\n",
    "votes": "0",
    "answers": 1,
    "views": "102",
    "tags": [
        "assembly",
        "x86-64",
        "arguments"
    ],
    "user": "Cyb3r",
    "time": "May 5, 2018 at 18:47",
    "comments": [],
    "answers_data": [
        {
            "content": "You need to read from the bottom up. I have no experience with the AMD64 calling convention but here's my take:\nWikipedia says:\n\nThe first six integer or pointer arguments are passed in registers RDI, RSI, RDX, RCX, R8, R9 (R10 is used as a static chain pointer in case of nested functions[19]:21), while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 are used for certain floating point arguments.\n\nJudging from that I'd say the following mapping would be right then:\n<pre><code>Argument #  | Register   | Desc\n------------|------------|---------\n1           | rdi        | int *\n2           | xmm0       | x\n3           | xmm1       | y\n4           | rsi        | int color\n5           | rdx        | unnamed int\n6           | rcx        | const char *text\n</code></pre>\nThe following was my mistake as I misread the post, the old signature posted at the top agrees with me, the one at the bottom does not\nbut when I worked through your code reading bottom up it didn't fit:\n<pre><code>lea     rdx, a62fFps\n</code></pre>\nthat loads the text to print into <pre><code>rdx</code></pre> but if above mapping would be right, <pre><code>rdx</code></pre> should be some unnamed int, and only the next argument would be the text.\nNote that this may be my fault because I may have missed some nuance of AMD64.\nEnd of mistake\nBack to what does work:\nThe first argument, the pointer, should be in <pre><code>rdi</code></pre>. If you read upwards, \n<pre><code>lea     rdi, [rbp+var_108]\n</code></pre>\nis the first line to write to <pre><code>rdi</code></pre>, so that's your pointer (it fits the type). Floats seem to be passed via <pre><code>xmm0</code></pre> and <pre><code>xmm1</code></pre> so those will be <pre><code>x</code></pre> and <pre><code>y</code></pre>. The color is the 2nd non-float argument, which would be in <pre><code>rsi</code></pre> and reading the code we find:\n<pre><code>mov     esi, r14d\n</code></pre>\nand <pre><code>rsi</code></pre> contains <pre><code>esi</code></pre>, so that would be your color, only it's 32 bit in size. If you read the code, it also seems to fit the color type.\nThen above problem appears where I was expecting another int but the next argument seems to be the text instead.\n",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "May 5, 2018 at 19:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cyb3r",
                    "text": "<span class=\"comment-copy\">Not sure if xmm0 getting used there? But if so then the first param should be a float not an int because by convention the xmm number reflects it's position.</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">From my understanding the arguments are separated by type first. If you have a function with (char,float,int,float), we have two pairs (char,int) and (float,float) which get assigned to (rdi,rsi) and (xmm0,xmm1)</span>",
                    "time": null
                },
                {
                    "user": "Cyb3r",
                    "text": "<span class=\"comment-copy\">Then how do I know in which order they are? I've watched one tutorial saying that if, lets say third param is the first float argument then it'll get stored in xmm2 and so on... That might be only for Windows ABI?</span>",
                    "time": null
                },
                {
                    "user": "Johann Aydinbas",
                    "text": "<span class=\"comment-copy\">According to this: <a href=\"https://people.freebsd.org/~obrien/amd64-elf-abi.pdf\" rel=\"nofollow noreferrer\">people.freebsd.org/~obrien/amd64-elf-abi.pdf</a> it's as I described. Basically it just uses the next free xmmN register. See page 17 at the bottom for the process behind register allocation.</span>",
                    "time": null
                },
                {
                    "user": "Cyb3r",
                    "text": "<span class=\"comment-copy\">Appreciate your input but my question still persist, how do I know the order of mixed up params (ints and floats)? Been researching from last night but couldn't find a proper explanation so far.</span>",
                    "time": null
                }
            ]
        }
    ]
}