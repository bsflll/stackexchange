{
    "title": "Paste hex bytes into IDA Pro Hex View",
    "link": "https://reverseengineering.stackexchange.com/questions/2943/paste-hex-bytes-into-ida-pro-hex-view",
    "content": "Is it possible to paste a series of bytes into hex view of IDA? Say I have a large buffer I need to fill with a specific value, and I have it in the form most hex editors output... 0A AB EF FF 00 01... is there some quick way to write this value to a segment of the hex view? Or do this through IDAPython?\nEdit:\nSolved using PatchByte as suggested below:\n<pre><code>def PatchArr(dest, str):\n  for i, c in enumerate(str):\n    idc.PatchByte(dest+i, ord(c));\n\n# usage: patchArr(start address, string of bytes to write)\npatchArr(0xCAFEBABE, \"\\x01\\x02\\x03\")\n</code></pre>\nNote that I am not a fan of edits to volatile debug memory causing IDA to complain about the IDB being patched post-debug...\n",
    "votes": "7",
    "answers": 3,
    "views": "11k",
    "tags": [
        "ida",
        "python",
        "idapython",
        "hex",
        "memory"
    ],
    "user": "Ditmar Wendt",
    "time": "Oct 24, 2013 at 19:00",
    "comments": [],
    "answers_data": [
        {
            "content": "While in IDA's Hex View you can go to Edit->Patch Program->Change Byte, but I think this only lets you patch 16 bytes at a time. If you need to patch more bytes than that you can use IDAPython's idc.PatchByte / idc.PatchWord / idc.PatchDword to change bytes in the IDA database.\nEDIT:\nJust a quick note, if you want your patches applied to the original file that you loaded into IDA, you need to go to Edit->Patch Program->Apply patches to input file after you patch the bytes in the idb.\n",
            "votes": "8",
            "user": "devttys0",
            "time": "Oct 24, 2013 at 13:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ditmar Wendt",
                    "text": "<span class=\"comment-copy\">Thanks! Got a python solution working thanks to this. Of course changing single bytes by hand is way too slow, was the reason I asked this question.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Below are two functions from fwrapper that give examples on how to patch IDBs and import data from a file. I'd recommend checking out the code. I use it all the time for samples that decodes/decrypts data or when I have to manually dump a block of memory and patch an IDB.\n<pre><code>def patch(self, temp = None):\n    '''patch idb with data in fwrapper.buffer'''\n    if temp != None:\n            self.buffer = temp\n    for index, byte in enumerate(self.buffer):\n         PatchByte(self.start+index, ord(byte))\n\ndef importb(self):\n    '''import file to save to buffer'''\n    fileName = AskFile(0, \"*.*\", 'Import File')\n    try:\n        self.buffer = open(fileName, 'rb').read()\n    except:\n        sys.stdout.write('ERROR: Cannot access file')\n</code></pre>\n",
            "votes": "3",
            "user": "alexanderh",
            "time": "Oct 25, 2013 at 15:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Even though this has been answered, IDA is meant as a debugger. Not as a patching tool, this has to do a lot with how IDA stores works. IDA creates a database file that allows you to remove the exe after loading it first. This can be really useful when you work with intellectual property / malware. I would recommend to use ImmDBG for your patching needs.\n",
            "votes": "1",
            "user": "Stolas",
            "time": "Oct 24, 2013 at 20:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ditmar Wendt",
                    "text": "<span class=\"comment-copy\">Is that a typo? You mean to say that IDA is not meant as a debugger, right? Of course not, it IS meant to interface with various debuggers. IDA not being able to understand a memory segment is unimportant/patching should not be stored in the IDB is a legitimate bug. ImmDBG is a completely seperate use case, and the platforms it supports are very limited in comparison.</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">Indeed I am sorry, it is more a brainfart then anything else. The most important thing I meant to say is that IDA is a tool you need to analyse software not crack it.</span>",
                    "time": null
                }
            ]
        }
    ]
}