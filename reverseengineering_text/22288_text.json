{
    "title": "How to add a message box to a PE [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22288/how-to-add-a-message-box-to-a-pe",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 5 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nSo, I have a \"simple\" question. I have this PE that I want to show a message box when the file is launched. How can I patch the file and make the window? Thanks!\n",
    "votes": "-1",
    "answers": 2,
    "views": "455",
    "tags": [
        "ida",
        "windows",
        "pe",
        "patching"
    ],
    "user": "Bloco Perfeito",
    "time": "5 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. It's not quite clear what the purpose is. And yeah, that matters. Because the least invasive method would be not to patch it at all and instead abuse <pre><code>Image File Execution Options</code></pre> if you just wanted to show something when that file gets executed. By setting a <pre><code>Debugger</code></pre> for the executable, you can take it even a notch further and have your own executable take over as debugger for the \"target\".\n",
            "time": null
        },
        {
            "user": "Bloco Perfeito",
            "text": "Had no idea that was even a thing lol. The purpose is just to show a message box, really. I have no interest in infecting someone\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "but is it important to you that it happens from within that executable or does it do to \"inject\" the code at or before runtime?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are many steps to patch an executable, but here is I think the easiest one. The highlighted one is the EntryPoint, you can patch the highlighted one and redirect it to your control, in my sample, I added a new executable section but remember, you have to return the control to the original program, or else it will not run properly.\n\nOriginal Section\n\nAdded Section using StudPE.\n\nAfter patching.\n\nAs I mentioned from above, you have to return the control to the original program, so after executing the MessageBox , it will return to the original address.\n",
            "votes": "2",
            "user": "ismael_akez",
            "time": "Oct 11, 2019 at 7:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Bloco Perfeito",
                    "text": "<span class=\"comment-copy\">Thanks! That was exactly what I was looking for! I have thought of just patching some instructions on the EP, but your solution is way more elegant. Will test it out at home later!</span>",
                    "time": null
                },
                {
                    "user": "Bloco Perfeito",
                    "text": "<span class=\"comment-copy\">Just a quick noob question... I have made the message box on masm and added the unlinked binary to the section, but when im patching it just appears as garbage hex...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As simply as possible? Spoof AddressOfEntryPoint in the file header. Reroute it to a new (or modified) section. MessageBoxA/W should be placed in your IAT if it isn't already, then just have the EP call OEP before jumping to your embedded shellcode. In your case that code would just be pushing arguments, calling import, and fixing up the stack.\n",
            "votes": "0",
            "user": "Pickle Rick",
            "time": "Oct 11, 2019 at 3:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}