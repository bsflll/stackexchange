{
    "title": "Calling/debugging calls to DLL via ollydbg or x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/26056/calling-debugging-calls-to-dll-via-ollydbg-or-x64dbg",
    "content": "I have used dependency walker on a DLL of an old game from 2001. I have found a function which I want to be able to analyze. I see the name of the function and the entry point (at the end).\n\nHow do I actually set a breakpoint at this position? Do I figure out where the exe is in memory and then where the DLL has been loaded and then the entry point is the offset from the beginning of this?\nIs it also possible to invoke these functions via these tools or can I just debug then when the breakpoints are hit?\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg",
        "x64dbg",
        "breakpoint"
    ],
    "user": "Bronson Swags",
    "time": "Oct 5, 2020 at 8:34",
    "comments": [
        {
            "user": "blabb",
            "text": "are you going to load the executable which uses this dll ?? is the function you are interested exported from this dll if yes you can simply find the function using many of the documented methods like find inter modular calls etc\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In x64dbg you may go to the <pre><code>Symbols</code></pre> tab, then search for your .dll in the list on the left part of the screen. After you click that dll you can select all functions you like (for example <pre><code>t3dSetActorInvisible</code></pre>) and press F2 to set software breakpoint there.\n",
            "votes": "1",
            "user": "morsisko",
            "time": "Oct 7, 2020 at 13:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}