{
    "title": "Help determine 3d model vertex structure serialized binary",
    "link": "https://reverseengineering.stackexchange.com/questions/32720/help-determine-3d-model-vertex-structure-serialized-binary",
    "content": "Help determine 3D model vertex structure serialized binary.\nExample of single vertex:\n<pre><code>A3 D0 5D BA C9 27 3F 3A DC 6C 87 3B 2B 75 EE 00\nFF FF FF FF 92 2F 29 80 B1 19 64 3F 02 82 1D 3F\n</code></pre>\nWhat I got so far:\n<pre><code>struct Vertex {\n    vec3f pos; // float[3] - vertex coords\n    ...\n    vec2f tex; // float[2] - texture coords (uv)\n}\n</code></pre>\nMore examples:\n<pre><code>14 96 23 38 11 37 A7 3A C3 47 44 3B 75 04 D1 00\nFF FF FF FF 00 7E 0C 80 9B 01 72 3F 3C 2C 20 3F\n\nC2 95 23 38 09 6A 2C 39 11 8A AD 3B 75 1D DA 00\nFF FF FF FF 00 64 4D 80 E5 0C 61 3F 1D 75 18 3F\n\nA3 D0 5D BA C9 27 3F 3A DC 6C 87 3B 2C 71 DE 00\nFF FF FF FF 8D 32 0F 80 B1 19 64 3F 02 82 1D 3F\n</code></pre>\nI need to figure out the rest. Thanks in advance.\n",
    "votes": "0",
    "answers": 0,
    "views": "58",
    "tags": [
        "binary-analysis",
        "binary-format"
    ],
    "user": "S4TURN",
    "time": "Feb 9, 2024 at 15:15",
    "comments": [
        {
            "user": "jsotola",
            "text": "it would help to know what the actual coordinates are\n",
            "time": null
        },
        {
            "user": "S4TURN",
            "text": "@jsotola for the first example it would be: \"A3 D0 5D BA\" so -0.000846157 for X, \"C9 27 3F 3A\" so 0.0007292 for Y, \"DC 6C 87 3B\" so 0.00413285 for Z\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Context needed. Values you gave aren't IEEE754...  <pre><code>[c] <sint32_t 'unk1'> +0x00d10475 (13698165)</code></pre>, <pre><code>[10] <sint32_t 'neg?'> -0x00000001 (-1)</code></pre>, <pre><code>[14] <sint32_t 'unk3'> -0x7ff38200 (-2146664960)</code></pre>, <pre><code>[c] <sint32_t 'unk1'> +0x00da1d75 (14294389)</code></pre>, <pre><code>[10] <sint32_t 'neg?'> -0x00000001 (-1)</code></pre>, <pre><code>[14] <sint32_t 'unk3'> -0x7fb29c00 (-2142411776)</code></pre>, <pre><code>[c] <sint32_t 'unk1'> +0x00de712c (14577964)</code></pre>, <pre><code>[10] <sint32_t 'neg?'> -0x00000001 (-1)</code></pre>, <pre><code>[14] <sint32_t 'unk3'> -0x7ff0cd73 (-2146487667)</code></pre>  They could could be IDs, flags, or even 16-bit or 8-bit pieces... Only you can answer what is needed in that struct\n",
            "time": null
        },
        {
            "user": "S4TURN",
            "text": "@AliRizvi-Santiago, \"Only you can answer what is needed in that struct\", how am I suppose to know?  You are asking me my own question. I'm trying to determine the structure that this data represents. That's the point of reverse engineering.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "... To clarify, you'd proceed by examining what's responsible for using it. How many more fields do you think that you'd need to use that vertex? You have 3 points for a vertex, and 2 points for a texture, hence, the leftovers could've been a normal for lighting, but due to them not being IEEE754, it's got to be some other characteristic about the vertex which only you'd know since it'd depend on the what app/game/whatev-you-snagged-it-from needs to know about said vertex. Perhaps its enc'd, but again w/o any kind of context about its usage, those fields are just ints which you already knew...\n",
            "time": null
        }
    ],
    "answers_data": []
}