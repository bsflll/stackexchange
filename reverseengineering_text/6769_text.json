{
    "title": "Connecting a Motion Simulator to GTA",
    "link": "https://reverseengineering.stackexchange.com/questions/6769/connecting-a-motion-simulator-to-gta",
    "content": "I'm trying to connect a real-life motion simulator to my pc gaming rig one game at a time.   Since all the GTA games are super hackable (with respect to physics, map, & texture hacking), AND the fact that GTA5 is coming soon to PC, i thought it would be a cool start.\nFrom the motion simulator side, it seems that the most logical point to pull a feed would be the vehicle's suspension.  Speed, mass, obstacles, handling, etc... are already computed by the game & mirroring the suspension should be a pretty believable experience.  \nDoes this sound doable?  Has anyone tried to pair a real-life machine with existing game vehicle before?  Any experiences or insight to what this would entail would be extremely appreciated. \nFrom the research I've put into this project, it seems that the hardest part will be to pull a realtime feed off an in-game event as the game is already compiled.  My hope is that there is some existing trigger for debugging or perhaps controller feedback in place.  Alternatively, what are the chances of probing around an assembly code level version of the game to insert calls to external scripts?  I realize that a full decompile to a high level language is 99% never going to work again with a game this complex.\nThanks for any helpful contributions pointing in the right direction...\n",
    "votes": "3",
    "answers": 1,
    "views": "180",
    "tags": [
        "decompilation",
        "x86",
        "c++",
        "objdump"
    ],
    "user": "user974634",
    "time": "Dec 5, 2014 at 21:38",
    "comments": [
        {
            "user": "glampert",
            "text": "Interesting project this one, I enjoy reverse engineering old games myself. I think your best bet would be simulating keyboard or game-controller input with this device of yours. That would require just redirecting a few system calls. I would think that decompiling such a big 3A game, like GTA5, is nearly impossible. You're probably looking into a project with 6 to 10 million lines of C++ code, so even if you had the source code, it would be very difficult to do it...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Not sure if I get this the right way but want to create physical feedback of the simulated car in game to your real seat/cockpit and also drive it from there. (something like Plane HW simulators)\n\nDriving\nthat should be pretty easy just use joystick and some keyboard messages inserter (or real hacked keyboard). I assume you already know how to do this part\nfeedback\nI would create some starting App that would own the Game's process so I could have full Access to its memory. Then I would track all the memory chunks allocated to it and scan for periodic changes then draw it as some video overlay and play the game to see which chunks are changing dependently to what you do in game.\nGood way is also log the memory chunks to file for later inspections once you  get the candidates for memory locations that could hold the simulated car parameters then try to hack them to see if anything match to in game car speed,orientation ...\nYou also need some ID of the chunks so look for specific patterns in them so you can find the same chunk even when it is reallocated (or game is restarted)\nDLL's\nif the GAME use any DLL for specific task like physics simulation then you are in luck and can create wrapper DLL which will have the same interface as original DLL. So create DLL which will just call the calls of the original DLL plus add of some logging so you see what you need (similarly to bullet #2). Once identified what you need then you can easily insert you driving code into it ...\n\n[Notes]\nDid not do anything like this in a very long time so I have no clue of nowdays tools for this. My favourite tool back in the day was DLPORTIO driver for windows 9x,nt,w2k,xp. it enables full access to everything from IO to memory without exceptions ...\nIf the game has player as a complex class then you can try to search for Players name in memory and look around its location for parameters you need\n",
            "votes": "2",
            "user": "Spektre",
            "time": "Apr 28, 2017 at 9:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}