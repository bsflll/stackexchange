{
    "title": "Get all names of functions from an iOS-App binary (headless)",
    "link": "https://reverseengineering.stackexchange.com/questions/31738/get-all-names-of-functions-from-an-ios-app-binary-headless",
    "content": "Setup:\nI want to get a list of all (apple built-in) function and variable names that are used in an arbitrary iOS App by headless analysis. So given the <pre><code>.ipa</code></pre> file of any iOS-App, I unpack it and can access the binary file.\nWhat I expect to happen:\nWhen I disassemble the binary, I expect the used function and variable names to be displayed in the resulting disassembled code, so I can create a list of all built-in functions and variables. I am only interested in functions and variables that are apple built-in ones (from apple frameworks), and not in custom functions or functions from third-party frameworks.\nWhat actually happens:\nWith Ghidra in headless mode, for nearly all functions and variables, the disassembled code doesn't contain their actual names but rather their entry points. For example, the function <pre><code>locationManager:didUpdateLocations:</code></pre> is displayed with its actual name in the assembly, while <pre><code>startUpdatingLocation</code></pre> is not even listed as function but rather as data variable. Other functions implemented in the app have names like <pre><code>FUN_100015d80</code></pre>.\nWhat I tried:\n\nGet the symbol table and get a connection between the entries and the function and variable names in the disassembled code. However, even in the symbol table they are referred to as <pre><code>FUN_100015d80</code></pre> for example.\nI know that <pre><code>FUN_100015d80</code></pre> is actually the function in which <pre><code>startUpdatingLocation</code></pre> is called because I searched for <pre><code>startUpdatingLocation</code></pre> in the disassembled code (to be precise, I searched within the Ghidra GUI version) and <pre><code>startUpdatingLocation</code></pre> was in the comment of this very function only. However, I need this search to be executed headless.\n\nThe ultimate goal would be to get the name of functions who can actually be called. So if the code contains a function which is never called, or just called from within another function, who itself is never called, I want to exclude this function from the list.\nAdditionally I want to use free software for this, since it is a project for university and it should be integrated into a larger software.\nHow can I get a list of the actual names of functions and variables used within an iOS-App by using only free software?\nPS: I am new to reverse engineering, so please point out if there are any mistakes in my approach.\nEDIT\nI managed to find somewhat of a workaround. It is not quite what I want but it helps partly at least.\nI collect each data variable with its address and with its referenced addresses. The same goes for the symbols. Then I iterate over all functions and store all addresses which are in the functions namespaces. Thereafter, for each data variable and each symbol I check if their addresses or references are within a functions namespace. If that is the case, I parse the respective value of the data variables and the symbols to equal their actual name. This way I get a list of functions and variables used. However, this is a pretty dirty workaround and not exactly what I am looking for.\n",
    "votes": "1",
    "answers": 0,
    "views": "245",
    "tags": [
        "disassembly",
        "binary-analysis",
        "ghidra",
        "ios"
    ],
    "user": "Kühlhausvogel",
    "time": "Apr 11, 2023 at 10:45",
    "comments": [
        {
            "user": "Robert",
            "text": "What iOS version do you use for extracting the binaries? Starting with iOS15 Apple changed the binary format (dyld fixup chains) and I am not sure how good Ghidra is adapted to this new format.\n",
            "time": null
        },
        {
            "user": "Kühlhausvogel",
            "text": "@Robert I use iOS 16.1 for the App I am testing with. In general, I want it to work for as many iOS versions as possible, but it is more important to work for the newest versions. Can you suggest another tool, which might get better results? I read about Hopper and IDA Pro, but it seems like the free versions have no headless mode.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "IDA Free does not support arm code to my knowledge, so this is not an option. I don't have much experience with Ghidra and none with Ghidra in headless mode. But may be this is just a problem with the selected analysis that are applied on the binary? For ObjC functions there should be special analysis available in Ghidra so may be you forgot to enable them in headless mode?\n",
            "time": null
        },
        {
            "user": "Kühlhausvogel",
            "text": "@Robert Since it is also not working in the GUI version of Ghidra (or I just wasn't able to do it), I don't know if it is a problem with the headless configuration. But I will take a look at that for sure!\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Just to make sure: are you aware that all binaries that are downloaded from Apple app store (thus all binaries that are not included in the iPhone firmware) are encrypted and thus can not be directly analyzed?\n",
            "time": null
        }
    ],
    "answers_data": []
}