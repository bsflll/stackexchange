{
    "title": "Arm custom u-boot reversing",
    "link": "https://reverseengineering.stackexchange.com/questions/29478/arm-custom-u-boot-reversing",
    "content": "I'm trying to reverse a custom u-boot that implements cryptography for the Kernel at runtime (the Kernel at rest is encrypted also in a flash). I can probably ask the IoT vendor to provide the modified code of u-boot, but I want to learn something from this experience.\nSome info I gathered:\n\nSOC Data Sheet (with memory layouts)\nRam start at 0x8000_0000 (2Â GB)\nBOOTROM at 0x0400_0000 (64K)\nBOOTRAM at 0x0401_0000 (64K)\nRemapable area from 0x0000_0000 to 0x03FF_FFFF (64 Mb)\nStrings on the u-boot.bin file return: <pre><code>bootcmd=kload 0x82000000; bootm 0x82000000</code></pre>\nThe CPU is Arm Cortex A7 (the SOC have also an A17 but is not the \"default\" one)\n\nSteps I'm doing to load the binary in IDA:\n\nIDA asked me for the disassembly memory organizations; I tried a couple of things without success. I think this is the part where I messed up something, and later I can find proper addresses when I try to rebuild the Interrupt Vector Table to start defining functions later.\n\nWhich address I should choose in this case based on the information I have?\nAn example, if I chose to use <pre><code>0x8000_0000</code></pre> as a loading address and redefine some variables to double word (any Interrupt vector table entry is a double word), this is what I get:\n\nI get something unusable (I can't jump at those addresses); I need to understand how to set up IDA in the early stages.\nAny help, especially with some theory, is appreciated :)\n",
    "votes": "2",
    "answers": 1,
    "views": "982",
    "tags": [
        "ida",
        "disassembly",
        "firmware",
        "arm"
    ],
    "user": "zi0Black",
    "time": "Oct 30, 2021 at 12:48",
    "comments": [],
    "answers_data": [
        {
            "content": "The reset vector location is the address right after <pre><code>0xDEADBEEF</code></pre> (not shown in your snippet).\nIt is the function that the first instruction's relative branch is branching to.\nTell IDA to load the segment at that address (<pre><code>0x8080xxxx</code></pre>).\n",
            "votes": "2",
            "user": "MarianD",
            "time": "Nov 13, 2021 at 4:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zi0Black",
                    "text": "<span class=\"comment-copy\">I didn't update the post, but I found that <code>0x8080_0000</code> (looking at DATA ref after an auto analysis). I found a forum where someone analyzed the code, of the custom u-boot, under a developing point of view and <code>0x8080_0000</code> is referenced as the loading address, so I guess it's confirmed. A user on Reddit (blessthe28) suggested turning all the <code>0xEXXX</code> into code since those are unconditional ARM codes, and effectively I got some <code>LD</code> to <code>PC</code> register in the order suggested by the user.  <a href=\"https://imgur.com/a/uf8jsya\" rel=\"nofollow noreferrer\">actual IDA status</a></span>",
                    "time": null
                }
            ]
        }
    ]
}