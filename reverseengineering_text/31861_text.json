{
    "title": "Load PDB for MemoryModule-loaded DLL in x64dbg",
    "link": "https://reverseengineering.stackexchange.com/questions/31861/load-pdb-for-memorymodule-loaded-dll-in-x64dbg",
    "content": "I need to debug a DLL, which I have a PDB file for.\nThe debug target is a program, that loads the DLL using MemoryModule library from Github.\nThe loaded module isn't listed as a module in x64dbg, since it has been loaded with <pre><code>MemoryLoadLibraryEx</code></pre> function, but module handle is still valid and it's all been successfully loaded and initialized.\nI've tried <pre><code>symload</code></pre> x64dbg command with address as the argument pointing to the beginning of the memory-loaded module <pre><code>MZ...</code></pre>, tried pointing to <pre><code>PE...</code></pre> signature as well, but no success.\nHow do I tell x64dbg that memory at an address is a valid module, so that I could load a PDB for that module?\n",
    "votes": "3",
    "answers": 1,
    "views": "367",
    "tags": [
        "dll",
        "x64dbg",
        "dynamic-linking",
        "debugging-symbols",
        "pdb"
    ],
    "user": "Ri0ee",
    "time": "May 12, 2023 at 12:35",
    "comments": [],
    "answers_data": [
        {
            "content": "x64dbg has the virtualmod command, which (in theory) can be used to detect modules loaded from memory, rather than via <pre><code>LoadLibrary*</code></pre> APIs:\n\nvirtualmod\n\nTell the debugger to treat a memory range as a virtual module.\n\nArguments: \n<pre><code>arg1</code></pre> the user-supplied module name.\n<pre><code>arg2</code></pre> the base of the memory range.\n<pre><code>[arg3]</code></pre> the size of the memory range.\n\nHowever, this  command seems to be broken at the time of writing this answer. I've experimented a little bit and managed to make it functional, see this commit in a forked repository for reference. This will allow you to see the module in x64dbg, as well as its symbols, exports, imports etc. For a fully native experience, though, a fix is needed in MemoryModule as well - see this commit in a forked repository for reference.\nTo use it, execute the following in x64dbg:\n<pre><code>virtualmod some_module_name.dll, 0xsome_base_address\n</code></pre>\nIf you don't mind building your own x64dbg and MemoryModule and applying these fixes, this should work out-of-the-box (no promises though). I've also opened an issue in x64dbg to discuss the state of <pre><code>virtualmod</code></pre> and whether it can be fixed in the main branch as well.\n",
            "votes": "3",
            "user": "ynwarcs",
            "time": "May 15, 2023 at 11:35",
            "is_accepted": true,
            "comments": []
        }
    ]
}