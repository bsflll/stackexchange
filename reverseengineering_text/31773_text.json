{
    "title": "How to highlight all external registers in a function",
    "link": "https://reverseengineering.stackexchange.com/questions/31773/how-to-highlight-all-external-registers-in-a-function",
    "content": "What I want:\n\ndetect all potentially usercall, userpurge - functions;\nwhen entering the function, immediately see all external entities:\narguments passed through registers;\n\ni.e., in order not to waste time on their manual search and speed up the restoration of the calling convention.\nthose. I need. some plugin that:\n\neither highlighted these registers (which is hardly possible - because then IDA will highlight them in all places)\nor carefully write them out at the beginning of the function body, as a comment (which is more likely).\n",
    "votes": "3",
    "answers": 1,
    "views": "130",
    "tags": [
        "ida",
        "idapython",
        "python",
        "ida-plugin"
    ],
    "user": null,
    "time": "Apr 13, 2023 at 0:58",
    "comments": [],
    "answers_data": [
        {
            "content": "The answer to this question is to simply use Hex-Rays instead of IDA. It automatically does everything you've suggested, and the end result is the function's prototype, which will indicate register arguments in standard and non-standard locations.\nIf you don't want to do that, then the answer is to re-implement everything that Hex-Rays does in the course of producing that information: namely, prolog analysis, data flow analysis, and call analysis.\n",
            "votes": "4",
            "user": "Rolf Rolles",
            "time": "Apr 13, 2023 at 18:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}