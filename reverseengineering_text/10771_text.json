{
    "title": "Reversing a function, methodology",
    "link": "https://reverseengineering.stackexchange.com/questions/10771/reversing-a-function-methodology",
    "content": "Which are the methods or which are the steps for from a asm disassembled function code  passing/converting it to 'C/C++' or other language and tell what happens.\n",
    "votes": "-1",
    "answers": 1,
    "views": "275",
    "tags": [
        "disassembly",
        "assembly",
        "decompilation"
    ],
    "user": "erichnagy",
    "time": "Mar 12, 2018 at 22:02",
    "comments": [
        {
            "user": "Hackndo",
            "text": "Ok that's a very difficult question, because there is no unique answer. Either you should specify a function that causes you problems, or you should add some specifics. Currently, your question looks like this : \"How to reverse something ?\". Meanwhile, I suggest you take a look at this website binary-auditing.com introducing basic HLL (High Level Language) in ASM.\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "zyloid.com/recomposer/files/decompilation_thesis.pdf\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "retdec.com/publications , start from older ones.\n",
            "time": null
        },
        {
            "user": "erichnagy",
            "text": "@VitalyOsipov nice, its helpfull. @w s i look at it too.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For me the steps to reverse a function are usually this ones :\n\nIdentify the calling convention used in the executable.\ntry to identify all arguments passed to the function and understand their types and usages :\n\nLook for stacked arguments and register's one.\nAnalyze code around use of arguments to understand their types and use.\nidentify references and structures.\nnote for each argument if it is an INPUT one or an OUTPUT one, what is his type and purpose or guessed purposed.\nidentify the return of the function (generally eax for example in x86) : what are the possible returning values ? Error return cases gives clues about come chunks of code of the function.\n\nLook code around calls to the function to try to figure out what the function is about.\nanalyze the content of the function isolating chunks of code, each chunk corresponding to a line of C for example. To identify chunks :\n\nlook the graph of function to figure out the different paths and the complexity level of the function. Try to identify patterns like switch, imbricated if, loops, etc.\nlook for calls to another functions, library calls or API calls. For a non obfuscated code this is usually easy to do.\n\nthis step is simultaneous to the precedent. Look the use of local variables and try to name them. For each local variable :\n\nis the variable re-used in the function for different purposes ? if so rename it with a generic type name.\nif the variable is used for a single purpose, try to understand what it is and name the variable in consequence.\n\nDon't expect to understand all the function with a single pass of analyze. Repeat the process. If a chunk of code is not clear, go to the next one and return later to the hard one. Each time you understand a chunk, review your previous work to see if your guessed are consistent with your new findings.\nIf the function calls another functions, proceed with a bottom-up method like leafs are usually simples than branches and understanding leafs help to understand branches.\nTry to look at mixed source code C/asm for example, with a debugger or with  the good compiler switch (/FAs or /FAcs for example in Visual Studio).\n\nHope that helps.\n",
            "votes": "6",
            "user": "roubachof",
            "time": "Sep 2, 2015 at 22:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}