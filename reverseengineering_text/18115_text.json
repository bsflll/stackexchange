{
    "title": "Stripped elf executable with ~3000 unnamed functions",
    "link": "https://reverseengineering.stackexchange.com/questions/18115/stripped-elf-executable-with-3000-unnamed-functions",
    "content": "Reversing a malware sample and have identified the elf as stripped which seems to be why none of the functions are explicitly named. Also, there are no specified imports listed for some reason. Does not appear to be obfuscated though I could be wrong. The strings are not obfuscated so I have been trying to get my hands dirty in basic analysis by looking up where the strings correspond in disassembly. No doubt I will have to find a way to easily identify these thousands of functions which appear just as numerals rather than explicit names. Any suggestions?\n",
    "votes": "0",
    "answers": 1,
    "views": "673",
    "tags": [
        "disassembly"
    ],
    "user": "bumchux",
    "time": "Apr 26, 2018 at 18:44",
    "comments": [
        {
            "user": "julian",
            "text": "Is the binary packed with UPX or some variant thereof? How do you know it is malware? What is the SHA1-sum of the binary? Where did you get it from? Is the binary statically linked or dynamically linked? Is there a section header table present? What is the target architecture of the binary? No symbol table means no function names. syssec.mistakenot.net/papers/eurosp-2017.pdf\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "which disassembler are you using?\n",
            "time": null
        },
        {
            "user": "bumchux",
            "text": "Using radare2, it's a 32 bit elf of mirai from virusshare for arm. Pretty sure it's statically linked\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Although many ELF files have a symbol table, it is not required for executing a program by the OS. In particular, statically-linked programs embed all necessary library code inside, making the binary completely independent from any external libraries and able to run stand-alone.\nSo you can start by identifying library functions. There are many ways to do it, here's a few suggestuions:\n\nIf you know/can guess the compiler and the version used to compile the binary, you can try to match the libraries shipped with the compiler against the binary. GCC often leaves its version string in the binaries (sometimes even stripped ones), for example:\n<pre><code>GCC: (Sourcery G++ Lite 2010.09-58) 4.5.1</code></pre>\n<pre><code>GCC: (GNU) 4.8</code></pre>\nyou can try looking for strings which identify library source files, function names or other messages which are unique enough to identify the function, e.g.:\n<pre><code>__get_myaddress: ioctl (get interface configuration)</code></pre>\n<pre><code>RPC: (unknown error code)</code></pre>\n\nIf all else fails or the binary does not use a standard library, you can always fall back to tracking the use of syscalls.\nThe binary has to interact with the OS somehow. This is done using so-called syscalls (system calls) - special instructions which invoke OS services. On x86_64, this is done with the <pre><code>syscall</code></pre> instruction, on <pre><code>i386</code></pre> Linux using <pre><code>int 0x80</code></pre>, while on ARM Linux, the <pre><code>SVC</code></pre> (supervisor call) instruction is used. ARM system calls on EABI systems use numbers starting from <pre><code>0x900000</code></pre> which are stored in <pre><code>r7</code></pre> before invoking the <pre><code>SVC</code></pre> instruction. So, for example, you can search for <pre><code>0x900004</code></pre> to find the <pre><code>write</code></pre> syscalls which are likely to be used in output functions.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 3, 2018 at 12:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}