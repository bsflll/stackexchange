{
    "title": "replacing static value with variable",
    "link": "https://reverseengineering.stackexchange.com/questions/19474/replacing-static-value-with-variable",
    "content": "I'm trying to replace a static value:\n<pre><code>MOV DWORD PTR SS:[EBP-30],4c\n</code></pre>\nWith a value from a specific address:\n<pre><code>MOV DWORD PTR SS:[EBP-30],400400 // MOV DWORD PTR SS:[EBP-30],OFFSET 400400\n</code></pre>\nBut <pre><code>SS:[EBP-30]</code></pre> is not being set to the value from <pre><code>0x400400</code></pre>.\nI'm new to this but I was thinking this would work:\n<pre><code>MOV DWORD PTR SS:[EBP-30],DWORD PTR DS:[400400]\n</code></pre>\nBut I guess it doesn't because ollydbg gives an error.\nThe value from <pre><code>0x400400</code></pre> is <pre><code>int 100</code></pre> or <pre><code>64 00 00 00</code></pre>. Why doesn't it work? And what are my options? \nI was also thinking of doing something like:\n<pre><code>MOV ECX,DWORD PTR DS:[400400]\nMOV DWORD PTR SS:[EBP-30],ECX\n</code></pre>\nBut I don't know how to add a new line of instruction in ollydbg I was also afraid it would change all the addresses.\n",
    "votes": "4",
    "answers": 2,
    "views": "613",
    "tags": [
        "disassembly",
        "ollydbg",
        "pointer"
    ],
    "user": "majidarif",
    "time": "Sep 27, 2018 at 18:04",
    "comments": [],
    "answers_data": [
        {
            "content": "Let's split this up a bit. I'll skip over some stuff that you might already understand, but we may need to expand this if some stuff is not clear.\n\n\nMOV DWORD PTR SS:[EBP-30],400400\nMOV DWORD PTR SS:[EBP-30],DWORD PTR DS:[400400]\n\nThe syntax is a bit wonky but we can understand that you want to encode a <pre><code>MOV</code></pre> with two memory operands.\nLet's take a look at some documentation\nRef: https://www.felixcloutier.com/x86/MOV.html\nThere is no possible encoding for <pre><code>MOV</code></pre> that accepts <pre><code>m32,m32</code></pre>. With <pre><code>m32</code></pre> understood to be a 32 bit pointer.\nIt's not obvious this is the case, but unfortunately it is.\nRef: https://stackoverflow.com/a/33799523/10279341\nThis is a good answer if you care about why, but it is supplemental reading only, not critical to this situation.\n\nSo, if we want to copy memory to memory with x86:\nRef: https://stackoverflow.com/a/1299094/10279341\nA commonly accepted solution is to use a register as a temporary value store.\nTake note that we need to save the state of the register we are using else we might accidentally alter the program state.\n\nMOV ECX,DWORD PTR DS:[400400]\nMOV DWORD PTR SS:[EBP-30],ECX\n\nSo this is on the right track. But we need to save <pre><code>ECX</code></pre> beforehand in case something else is using it.\n<pre><code>0x00000000: 51                  push ecx\n0x00000001: 8b 0d 00 04 40 00   mov ecx, dword ptr [0x400400]\n0x00000007: 89 4d e2            mov dword ptr [ebp - 0x1e], ecx\n0x0000000a: 59                  pop ecx\n</code></pre>\nThis should do that you want. We save <pre><code>ECX</code></pre> by pushing it onto the stack. Load the value at address <pre><code>0x400400</code></pre> into <pre><code>ECX</code></pre>. Then write the value of <pre><code>ECX</code></pre> into the memory at <pre><code>[EBP-0x1E]</code></pre>, then restore <pre><code>ECX</code></pre> to it's previous value.\n\nSo how do we patch this into the binary image?\nThe above assembly is 11 bytes in length and our goal is to alter the instruction\n<pre><code>0:  c7 45 e2 4c 00 00 00    mov    DWORD PTR [ebp-0x1e],0x4c</code></pre>\nWhich we can see is 7 bytes long.\nWe can get these extra 4 bytes by use of a \"code cave\". We will redirect execution into an unused bit of memory, execute our code, then jump back.\nRef: https://www.codeproject.com/Articles/20240/The-Beginners-Guide-to-Codecaves\nIn short, we're looking \"empty space\" that is allocated/mapped within the exe image, preferably in the .text section, but are not used by the program under any circumstances. This will occur in nearly every executable image due to SectionAlignment in Windows PE being 4096 by default.\nThe easiest way to implement this is to find unused bytes in the same region of memory that we are trying to modify.\nA rudimentary way of finding/applying a code cave with ollydbg is shown here:\nhttps://medium.com/@vysec.private/backdoor-101-f318110e1fcb\n\nAfter finding suitable memory for our cave, patch in the shellcode:\n<pre><code>0x00000000: 51                  push ecx\n0x00000001: 8b 0d 00 04 40 00   mov ecx, dword ptr [0x400400]\n0x00000007: 89 4d e2            mov dword ptr [ebp - 0x1e], ecx\n0x0000000a: 59                  pop ecx\n</code></pre>\nusing ollydbg's assembler.\nThen change the original instruction of <pre><code>mov DWORD PTR [ebp-0x1e],0x4c</code></pre> to <pre><code>JMP x</code></pre> where <pre><code>x</code></pre> is your shellcode address, in the same module/image.\nOverwrite the rest of the instruction bytes with 0x90 (NOP) if you want. So that we end up with:\n<pre><code>c7 45 e2 4c 00 00 00</code></pre> - Original instruction\n<pre><code>e9 xx xx xx xx 90 90</code></pre> - JMP rel32 plus 2 NOPs\nRef for x86 JMP: https://c9x.me/x86/html/file_module_x86_id_147.html\nafter <pre><code>pop ecx</code></pre> back in our code cave assemble: <pre><code>JMP y</code></pre>\nwhere <pre><code>y</code></pre> is the address of the instruction directly after <pre><code>mov DWORD PTR [ebp-0x1e],0x4c</code></pre>. You should end up skipping over the NOP instructions when jumping out of the code cave, which is why I said they were optional.\n\nSummary,\n\nAssemble our shellcode, making note of correct x86 ASM and preserving program state.\n\nIf not enough space to patch the instruction in-line, idenfity a code cave.\n\nApply the code-cave and assemble the two <pre><code>JMP</code></pre> instructions to redirect execution (1) to the code-cave, (2) back to the next instruction from the original code.\n",
            "votes": "6",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "majidarif",
                    "text": "<span class=\"comment-copy\">does it matter that the value I'm trying to read is only 1-100? like the value is maxed at 100. so technically I can get away with reading it as a single byte.</span>",
                    "time": null
                },
                {
                    "user": "Abigail",
                    "text": "<span class=\"comment-copy\">it won't matter unless the bytes around the value are changed. eg 0x400401, 0x400402, contain other values not part of the value. <code>dword ptr [0x400400]</code> will read 4 bytes (little-endian) starting at <code>0x400400</code>. if you change it to <code>byte ptr</code>, it will only read the one byte.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Memory-to-memory <pre><code>MOV</code></pre> does not exist. You could try the following:\n<pre><code>    MOV eax, DWORD PTR DS : [400400]\n    MOV DWORD PTR SS : [EBP - 30], eax\n</code></pre>\nPlease check also if the absolute numbers are interpreted as hex values in your assembler.\n",
            "votes": "1",
            "user": "josh",
            "time": "Sep 27, 2018 at 14:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "majidarif",
                    "text": "<span class=\"comment-copy\">I was actually thinking of this but how do I do it in ollydbg? I'm not sure how to add a new line of instructions and it might change all the addresses?</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">If your intent is to patch an existing code, and the patch needs more bytes than the replaced code, you must be sure that either the code in the additional space is not needed any more, or you could insert (i.e. patch) a jmp to a free memory location, re-insert the \"destroyed\" code and jmp back to the original code where it can continue like before the patch. With respect to Olly, I don't know the answer, because I usually work in Ida.</span>",
                    "time": null
                },
                {
                    "user": "majidarif",
                    "text": "<span class=\"comment-copy\">Thank you. Unfortunately although I think I get what you meant. I'm really new to this to know how to do it. When you say JMP to an free memory location. Do I replace the current instructions with JMP then use that to do those instructions are return back? But, how do I do that exactly? And how do I find a free memory?</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">I think you got it right. How you do it technically depends. Try to become proficient with your tools. One possibility would be to create the machine code (usually not by hand, but from an assembler), then patch it in the exe file and test it in your debugger. Often the tricky part is to find a free mem location, large enough, and to not introduce new errors, by e.g. relying on absolute mem addresses (try to understand what \"ASLR\" means) etc. No standard recipes exist.</span>",
                    "time": null
                }
            ]
        }
    ]
}