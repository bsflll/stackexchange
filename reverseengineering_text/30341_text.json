{
    "title": "How to set a variable as \"pointer to struct\" in IDA in order to automatically replace offsets by field names?",
    "link": "https://reverseengineering.stackexchange.com/questions/30341/how-to-set-a-variable-as-pointer-to-struct-in-ida-in-order-to-automatically-re",
    "content": "In IDA, I have the following disassembly code (from an old 16-bit DOS application) :\n<pre><code>les     bx, _Foo\nmov     word ptr es:[bx+84h], 0FFFFh\nmov     word ptr es:[bx+8Ch], 0FFFFh\nmov     word ptr es:[bx+8Ah], 0FFFFh\n\n...\n\n_Foo          dd 0    \n</code></pre>\n<pre><code>_Foo</code></pre> is defined as double word (4 bytes) but it's actually a pointer to a structure. That structure is already defined in IDA. I would like IDA to know about it in order to replace all offsets by the actual field names :\n<pre><code>les     bx, _Foo\nmov     word ptr es:[bx+myStruct.FieldX], 0FFFFh\nmov     word ptr es:[bx+myStruct.FieldY], 0FFFFh\nmov     word ptr es:[bx+myStruct.FieldZ], 0FFFFh\n</code></pre>\nThis is something that can be done by selecting some code, pressing T, and then selecting appropriate structure, as explained here. However (AFAIK) this as to be done manually for each piece of code. I would like IDA to do that replacement automatically because it is aware of  <pre><code>_Foo</code></pre> type.\nAfter some search, I found how to set <pre><code>_Foo</code></pre> as pointer to struct:\nclick on the variable, hit U (to undefine any type), then Y and enter <pre><code>myStruct* _Foo;</code></pre> in the dialog.\n<pre><code>_Foo</code></pre> will now looks like this :\n<pre><code>; myStruct *Foo\n_Foo          dd 0   \n</code></pre>\nIt seems the only thing it does is to set variable back to <pre><code>dd</code></pre> and put type as comment. Field offsets are still not shown properly. It this a limitation of IDA ? (I use 7.5 version)\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "struct",
        "dos",
        "pointer"
    ],
    "user": "tigrou",
    "time": "Apr 28, 2022 at 10:47",
    "comments": [],
    "answers_data": [
        {
            "content": "The Hex-Rays decompiler will automatically respond to changes in local or global variable types, and automatically display the memory dereferences as proper structure references. The same is not true for the disassembly listing in IDA, where you must manually create structure references. This is because the disassembly listing does not incorporate the type of sophisticated data flow analysis that Hex-Rays does: type of the global variable is causally unconnected to the subsequent uses of that variable after loading it into <pre><code>bx</code></pre>.\n",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Apr 28, 2022 at 19:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tigrou",
                    "text": "<span class=\"comment-copy\">Unfortunately, AFAIK Hex-Rays decompiler cannot process 16-bit code.</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Yes, that is correct. In short, IDA will not automatically do what you're asking, although HJex-Rays would (if it supported the platform).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you select all instructions referring to the structure and press T, you'll get a different dialog where you can select the base register and the struct to apply to offsets from it.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2022 at 19:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}