{
    "title": "Fixing IDA Member functions argument order",
    "link": "https://reverseengineering.stackexchange.com/questions/18277/fixing-ida-member-functions-argument-order",
    "content": "When IDA realizes a function relies on the this* pointer it often places as the second variable. Severely mucking up things. I was wondering is there away to fix this and maybe in turn help type identification.\nI tried writing a h file but the original code is in c++\n",
    "votes": "-1",
    "answers": 1,
    "views": "521",
    "tags": [
        "ida",
        "decompilation",
        "arguments"
    ],
    "user": "Sinister Mephisto",
    "time": "May 15, 2018 at 19:14",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "Possible duplicate of Why does IDA show wrong function arguments in pseudocode?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can freely define the calling convention if required, see:\nhttps://www.hex-rays.com/products/ida/support/idadoc/1361.shtml\nRelevant excerpt:\n\nIDA supports the user-defined calling convention. In this calling convention, the user can explicitly specify the locations of arguments and the return value. For example:\n<pre><code>   int __usercall func@<ebx>(int x, int y@<esi>);\n</code></pre>\ndenotes a function with 2 arguments: the first argument is passed on the stack and the second argument is passed in the ESI register and the return value is stored in the EBX register.\n\nYou can access the type definition by pressing <pre><code>Y</code></pre> by default, when on a function name (and paste the above, for example).\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sinister Mephisto",
                    "text": "<span class=\"comment-copy\">Thanks for the reply. I was wondering if there is a way to achieve this via script. As I have near a thousand functions in need of changing</span>",
                    "time": null
                }
            ]
        }
    ]
}