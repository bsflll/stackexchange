{
    "title": "C++ Anti Kernel Debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/15879/c-anti-kernel-debugger",
    "content": "What are some things I can do to do anti kernel debugging from user-mode C++?\nI already use ZwQuerySystemInformation to query for SystemKernelDebuggerInformation.\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++",
        "anti-debugging"
    ],
    "user": "Rob Gates",
    "time": "Jul 21, 2017 at 16:06",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "I don't think it is feasible to control running environment, user mode program only has interfaces controlled by kernel. Theoretically a kernel debugging program can change anything.\n",
            "time": null
        },
        {
            "user": "conio",
            "text": "What does \"do anti\" even mean? Do you want to detect kernel debugging? Prevent? Interfere with? What do you want? What is your question?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is little you can do to prevent/detect kernel mode debugging of your application from user mode. Even if you can detect, it's because no one is interested enough to by-pass them.\nFor example, your technique will be by-passed by hooking ZwQuerySystemInformation in the kernel to fool your checks. \nIf you want protection, you should invest into techniques that make the analysis/reversing harder (code protectors).\nJust for reference, the opposite question.\n",
            "votes": "3",
            "user": "PhoeniX",
            "time": "Jul 21, 2017 at 16:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rob Gates",
                    "text": "<span class=\"comment-copy\">I agree with you to an extent. Since there aren't many solutions to usermode anti debugging, I have seen a lot of kernel mode debuggers make mistakes. Make mistakes that don't really matter to the standard program, so they are never fixed, but these mistakes can be detected. I am looking for a solution against most kernel debuggers, the ones that make the most mistakes. Thank you, however.</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">The question is who you want to defend yourself from? Debuggers are not doing any work by themselves, you know? And the second question, what is it that you are defending?</span>",
                    "time": null
                },
                {
                    "user": "conio",
                    "text": "<span class=\"comment-copy\">@RobGates, I'm aware of only one kernel debugger for Windows - the one integrated into the kernel. What other debuggers are there?</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">There are several - windbg, syser</span>",
                    "time": null
                },
                {
                    "user": "conio",
                    "text": "<span class=\"comment-copy\">There is only one - KD, regardless of which front-end you use it with. Syser is long dead. It's as relevant as SoftICE, \"rr0d\", etc. which is to say - completely irrelevant.</span>",
                    "time": null
                }
            ]
        }
    ]
}