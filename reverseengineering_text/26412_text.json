{
    "title": "Remote Debugging an Aarch64 ELF File on Multiarch/Qemu-user-static (arm64v8/alpine) Docker Container",
    "link": "https://reverseengineering.stackexchange.com/questions/26412/remote-debugging-an-aarch64-elf-file-on-multiarch-qemu-user-static-arm64v8-alpi",
    "content": "My goal is stated in the title. However, I think there is a fundamental issue with gdbserver. In particular, I create an aarch64 alpine docker container on a x86_64 Ubuntu 16.04 host using\n<pre><code>sudo docker run --rm -it -p 12345:12345 -v /host_dir:/container_dir --privileged arm64v8/alpine /bin/ash</code></pre>\nI then proceed to install <pre><code>gdb</code></pre> in the container using <pre><code>apk add gdb</code></pre>. Subsequently I run <pre><code>ps aux</code></pre> just to get a list of the processes running in the container in order to test <pre><code>gdbserver --attach COMM...PID</code></pre> command in the container. Interestingly absolutely no output no matter how much time goes on. As a result, I switch to the host and simply do the same exercise on the Ubuntu machine, i.e., I attach to a random process with <pre><code>pid</code></pre> 23056. The output to <pre><code>gdbserver --attach :12344 23056</code></pre> is <pre><code>Attached; pid = 23056 Listening on port 12344</code></pre>, which is what I expected to happen with gdbserver in the container. Any help as to why <pre><code>gdbserver</code></pre> in the container doesn't behave properly is appreciated!\nEDIT 1:\nI tried again and first ran <pre><code>sudo docker run --rm -it --privileged -p 7777:7777 -v home_dir:container_dir arm64v8/alpine</code></pre> and then ran <pre><code>gdbserver localhost:7777 ./binary</code></pre> and then as suggested in the comments I used <pre><code>netstat -l</code></pre> in the container and got <pre><code>tcp 0      0 0.0.0.0:7777            0.0.0.0:*   LISTEN</code></pre>. So it seems that clearly <pre><code>gdbserver</code></pre> is listening for a <pre><code>tcp</code></pre> connection. Then I use <pre><code>gdb-multiarch binary</code></pre> on the host machine and then <pre><code>(gdb) target remote localhost:7777</code></pre> to get:\n<pre><code>Remote debugging using localhost:7777</code></pre>\n<pre><code>Ignoring packet error, continuing...</code></pre>\n<pre><code>warning: unrecognized item \"timeout\" in \"qSupported\" response</code></pre>\n<pre><code>Ignoring packet error, continuing...</code></pre>\n<pre><code>Remote replied unexpectedly to 'vMustReplyEmpty': timeout</code></pre>\nAny idea?!\nEDIT 2:\nI ran the docker container without the <pre><code>--publish</code></pre> or <pre><code>-p</code></pre> attribute and clearly no matter what <pre><code>IP:PORT</code></pre> I use, <pre><code>gdb-multiarch</code></pre> says the <pre><code>Connection timed out</code></pre>.\n",
    "votes": "0",
    "answers": 0,
    "views": "967",
    "tags": [
        "debugging",
        "gdb",
        "remote",
        "aarch64"
    ],
    "user": "Newbie",
    "time": "Dec 3, 2020 at 2:45",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "Have you confirmed that it is indeed not listening on the port? I seem to recall not always having output. Have you tried debugging the debugger? Maybe try <pre><code>strace</code></pre> on <pre><code>gdbserver</code></pre>?\n",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "@multithr3at3d Thank you for the comment. Did you also run gdbserver in a docker? As my name says, I'm a newbie and I haven't yet made sure that in fact it is listening or not. I'm thinking maybe I set the docker wrong or I'm just not passing the correct <pre><code>IP:PORT</code></pre> to the <pre><code>target remote</code></pre> command of <pre><code>gdb-multiarch</code></pre> to connect to <pre><code>gdbserver</code></pre>. Basically, I don't feel sure about the connection between the container and the host. Can you comment on that. Also, do you see anything wrong with the docker command?\n",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "Haven't used it in Docker, no. In the container, try <pre><code>ss</code></pre> or <pre><code>netstat</code></pre> with <pre><code>-l</code></pre> to see if it's listening on that port. What args are you passing to <pre><code>target remote</code></pre>?\n",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "So this is what I just did inside the docker: <pre><code>gdbserver :7778 binary</code></pre> and in another terminal (still in container) I did <pre><code>netstat -l</code></pre> and I got <pre><code>Proto Recv-Q Send-Q Local Address           Foreign Address         State</code></pre>: <pre><code>tcp        0      0 0.0.0.0:7778            0.0.0.0:*               LISTEN</code></pre>. So I guess gdbserver is actually listening! On the host I have <pre><code>gdb-multiarch binary</code></pre> and then <pre><code>(gdb) target remote localhost:7778</code></pre> and after a few seconds I get <pre><code>localhost:7778: Connection timed out.</code></pre> It seems that I have the connection between the host and the docker messed up! Right?\n",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "Well that's good news! Are there firewall rules that would block inbound connections to loopback? Alternatively, if you don't use <pre><code>--privileged</code></pre>, you could maybe specify the address of the container itself.\n",
            "time": null
        }
    ],
    "answers_data": []
}