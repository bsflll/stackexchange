{
    "title": "What is the quickest way to run code of my own DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/14117/what-is-the-quickest-way-to-run-code-of-my-own-dll",
    "content": "Not sure if the title is that telling but what I want to do is hack into an executable and do as little as necessary to get the code from my DLL running since I want to write as few lines of assembly code as possible.\nI already have the place where I'd like to jump in and I am ready to insert the necessary assembly instructions into the executable using ollydbg but since I never did that before I'm afraid I need a little help on those last steps.\nWhat I want to do is basically:\n\nForce the executable to load my DLL\nPush a few parameters onto the stack for <pre><code>init_my_dll()</code></pre>\ncall <pre><code>init_dll()</code></pre> \n\nbut I'm not sure what's the best way to accomplish that. Is there a straight forward way to get this done?\nBtw: Is what I'm doing here actually called \"dll-injection\"?\n",
    "votes": "1",
    "answers": 1,
    "views": "351",
    "tags": [
        "ollydbg",
        "dll",
        "dll-injection"
    ],
    "user": "Stefan Falk",
    "time": "Dec 5, 2016 at 22:29",
    "comments": [
        {
            "user": "Martin",
            "text": "possible duplicate of reverseengineering.stackexchange.com/questions/2793/â€¦\n",
            "time": null
        },
        {
            "user": "Martin",
            "text": "But to answer your question - yes, what you're doing is called DLL / code injection, and what you want to do can be relatively easily achieved using Windows APIs (<pre><code>VirtualAllocEx</code></pre> -> <pre><code>CreateRemoteThread(..., LoadLibraryA, \"your_dll.dll\", ...)</code></pre>). You can do it yourself if you want, too (that's called manual mapping).\n",
            "time": null
        },
        {
            "user": "Nordwald",
            "text": "This is \"dll-injection\". Like mentioned by Martin, just create a thread at the location of 'LoadLibraryA' with the library name. As for additional parameters, you should be able to mess with the stack.\n",
            "time": null
        },
        {
            "user": "Stefan Falk",
            "text": "@Martin So the \"easiest\" way is to inject code into the executable which calls <pre><code>CreateRemoteThread()</code></pre> in order to load my dll, then call <pre><code>GetProcAddress()</code></pre> to get the address of  <pre><code>init_my_dll()</code></pre> and call it? The link you are referring seems to do something different - if I get this right there are two processes in the end. I don't get how I would make the target process call <pre><code>init_my_dll()</code></pre> as described there.\n",
            "time": null
        },
        {
            "user": "Martin",
            "text": "No - you don't use <pre><code>GetProcAddress</code></pre> to call your function. You use it to find <pre><code>LoadLibraryA</code></pre>, and call it. That function will load your DLL, and will call its <pre><code>DllMain</code></pre> - and that function could be calling your <pre><code>init_my_dll</code></pre> function. That said - if you're trying to do this with a game, be careful, those have anti-cheats which usually detect this technique and ban you.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I ended up placing the required code in the executable:\n<pre><code>00C0B500   68 B6B4C000      PUSH ForgedAl.00C0B4B6                    ; ASCII \"lua-extension.dll\"\n00C0B505   FF15 88F4C000    CALL DWORD PTR DS:[<&KERNEL32.LoadLibrar> ; kernel32.LoadLibraryA\n\n00C0B50B   68 C9B4C000      PUSH ForgedAl.00C0B4C9                    ; ASCII \"initialize\"\n00C0B510   50               PUSH EAX                                  ; push dll handle\n00C0B511   FF15 8CF4C000    CALL DWORD PTR DS:[<&KERNEL32.GetProcAdd> ; kernel32.GetProcAddress\n\n00C0B517   56               PUSH ESI                                  ; holds pointer to the struct I want to steal -> parameter of \"initialize\"\n00C0B518   FFD0             CALL EAX                                  ; call \"initialize\"\n00C0B51A   5E               POP ESI\n\n00C0B51B  ^E9 6648D0FF      JMP ForgedAl.0090FD86                     ; jump back and continue original program flow\n</code></pre>\n",
            "votes": "1",
            "user": "Stefan Falk",
            "time": "Dec 14, 2016 at 22:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}