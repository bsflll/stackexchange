{
    "title": "How to unload a type library (.til) programmatically (preferably using IDC, but IDAPython is fine, too)?",
    "link": "https://reverseengineering.stackexchange.com/questions/30299/how-to-unload-a-type-library-til-programmatically-preferably-using-idc-but",
    "content": "TL;DR: I want to do this programmatically using either IDC or IDAPython and failed to find an option that works for me (also scoured <pre><code>idc.idc</code></pre>).\n\n\nIn order to explicitly load a type library I can use <pre><code>add_default_til()</code></pre> (formerly <pre><code>LoadTil()</code></pre>). However, there doesn't appear to be any counterpart to this function to unload a previously loaded type library. And that's what I am looking for.\nMy issue is that although <pre><code>%ProgramFiles%\\IDA Pro 7.7\\sig\\pc\\autoload.cfg</code></pre> does not list the <pre><code>ntddk64_win7</code></pre> and <pre><code>ntapi64_win7</code></pre> type libraries, they seem to get loaded implicitly somehow. Chances are (but I haven't found documentation to corroborate this; the only connection seems to be <pre><code>autoload.cfg</code></pre>) that this has to do with the following log lines:\n<pre><code>Using FLIRT signature: Windows Driver Kit 7/10 64bit\nUsing FLIRT signature: Windows Driver Kit 7/10 64bit\nPropagating type information...\nFunction argument information has been propagated\nThe initial autoanalysis has been finished.\n</code></pre>\nNow, I'd like to unload those two and instead load <pre><code>ntddk64_win10</code></pre> and <pre><code>ntapi64_win10</code></pre> respectively (possibly re-running auto-analysis).\nAlas, I haven't found a way to script this.\nBonus question: is there something that ties the FLIRT signatures to type libraries (<pre><code>.til</code></pre>) aside from <pre><code>autoload.cfg</code></pre>?\n",
    "votes": "2",
    "answers": 1,
    "views": "507",
    "tags": [
        "ida",
        "idapython",
        "idc"
    ],
    "user": "0xC0000022L",
    "time": "Jan 11, 2023 at 16:37",
    "comments": [],
    "answers_data": [
        {
            "content": "To unload a type library you can use <pre><code>del_til</code></pre> function from <pre><code>typeinf.hpp</code></pre>.\nUsage with IDAPython:\n<pre><code>import ida_typeinf\n\nida_typeinf.add_til(\"ntapi64_win7\", ida_typeinf.ADDTIL_DEFAULT) # load a til file\nida_typeinf.del_til(\"ntapi64_win7\") # unload a til file\n</code></pre>\n",
            "votes": "2",
            "user": "y_v",
            "time": "Apr 21, 2022 at 16:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Guess I won't get around using IDAPython after all üòÅ ... thanks and welcome to RE.SE.</span>",
                    "time": null
                },
                {
                    "user": "y_v",
                    "text": "<span class=\"comment-copy\">Thanks. I don't know why you are using IDC in this case, but I want to remind you that there is an <code>exec_python</code> function in <code>idc.idc</code>, maybe that will help :)</span>",
                    "time": null
                },
                {
                    "user": "y_v",
                    "text": "<span class=\"comment-copy\">so something like <code>exec_python(\"import ida_typeinf;ida_typeinf.del_til('ntapi64_win7');ida_typeinf.add_til('ntapi64_win10', ida_typeinf.ADDTIL_DEFAULT)\")</code> would work (but it looks terrible)</span>",
                    "time": null
                }
            ]
        }
    ]
}