{
    "title": "Question about Windows-Functions in malware [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/6165/question-about-windows-functions-in-malware",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI try to analyze malware since a few months and by examining the assembly code of a trojan for example, I see sometimes windows functions like <pre><code>ws2_32.send</code></pre> which is the <pre><code>send()</code></pre>-function, etc. That is not a problem to understand, I can go to: \nhttp://msdn.microsoft.com/de-de/library/windows/desktop/ms740149%28v=vs.85%29.aspx\nand read that, everything is okay. \nBut I ask myself, how the people who writes that code put that function in their code. I mean, can you for example write in a C code the function \n<pre><code>  int send(\n     __in  SOCKET s,\n     __in  const char *buf,\n     __in  int len,\n     __in  int flags);\n</code></pre>\nand is it then so that the C compiler understands it ?\nThere are some other functions like <pre><code>CopyFileA</code></pre> for example which looks like:\n<pre><code>  BOOL WINAPI CopyFile(\n  _In_  LPCTSTR lpExistingFileName,\n  _In_  LPCTSTR lpNewFileName,\n  _In_  BOOL bFailIfExists\n  );\n</code></pre>\nHere I ask myself how the compiler understand the word <pre><code>\"WINAPI\"</code></pre> for example and so on.\nIn general, if the people try to write such code to create a trojan, how they make clear that it should be a windows function?\n",
    "votes": "0",
    "answers": 2,
    "views": "326",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Jongware",
            "text": "\"WINAPI\" specifies a certain calling convention. See stackoverflow.com/questions/13463346/what-does-winapi-stand-for for more information.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You're misunderstanding the use of the keyword. As the comment on your questions said, WINAPI is the calling convention for a function. WINAPI is #define'd to __stdcall which specifies how the stack is managed in relation to that function, which you can see documented on MSDN here. That article gives you a good overview of what it does and how it would get used in the header file. \nIt's common for the calling convention to not be explicitly stated for CRT functions on Windows; but that's just in the documentation and doesn't mean the calling convention doesn't need to be declared similarly. Most functions (on x86) will use __stdcall. The most common exception is the printf() family of functions which use the cdecl calling convention. This has more to do with the history of how x86 was developed than any particular design choices.\nMost constants, WINAPI et al, can be found somewhere on MSDN or if you have Visual Studio by hitting F12.\nNow as far as a more general answer to what I take your question to be, as far as how/why you might see certain function calls in a particular sample, the short answer is that Windows provides both the standard C library calls and its own versions of the APIs. In this case, the send() function is defined in Winsock2.h and the function itself is in Ws2_32.lib (also available on that MSDN page you linked). However, what you might call the \"Windows API version\" of this function is also found in the same .h and .lib file: WSASend(), which is documented here.\nYou can see by the two articles on MSDN these functions are almost identical, and if you look at the disassmebly for both of them you'd see that WSASend() and send() are almost the exact same function. But Windows supports both so if you learn on Unix or just using the standard C library you can write the same code on windows.\nMost of the other CRT functions (fopen, fread, printf) are implemented in the C Runtime Library, msvcrt.dll. They're mostly independent (compared to socket functions all being in Ws2_32.lib).\n",
            "votes": "4",
            "user": "Fewmitz",
            "time": "Sep 4, 2014 at 3:18",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>WINAPI</code></pre> is a declaration in the <pre><code>.h</code></pre> files for <pre><code>__stdcall</code></pre>... \n(ie. standard call type declaration parameters passed on stack and function is expected to balance the stack as opposed to the <pre><code>__cdecl</code></pre> format, or <pre><code>__fastcall</code></pre>).\nAnd, the compiler does the work for you on the imports:\n<pre><code>BOOL WINAPI CopyFile(\n_In_  LPCTSTR lpExistingFileName,\n_In_  LPCTSTR lpNewFileName,\n_In_  BOOL bFailIfExists\n);\n\npush TRUE ; assume the `bFailIfExists` is set to `true` - compiler looks up\n          ; the equate for true which is typically 01 \n          ; (unless you're coding in Delphi, then its strange).\n\npush offset lpNewFilename ; compiler sets this as a unique address, linker fixes it up.\n\npush offset lpExistingFileName ; same as above\n\ncall [__imp__CopyFile] ; linker fixes this up to the address in the import table\n</code></pre>\nOh, in asm ; is a comment like // in c. asm example... params are pushed in the opposite order.\nPut simply, regardless of the coding language various things equate to a value, which the compiler knows or sees that its set in the code, the compiler makes the obj files which are compiled code, but addresses are set in a sort of lookup table format, uniquely, imports are declared, but again, name or ordinal style table.\nThen, the linker does the task of putting everything together for the final executable, further stuff is done if its a DLL, like reloc tables and such\nactually its declared here.. look at the <pre><code>#declare WINAPI</code></pre> line near the bottom\nhttp://msdn.microsoft.com/en-us/library/zxk0tw93.aspx\n",
            "votes": "2",
            "user": "perror",
            "time": "Sep 4, 2014 at 6:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}