{
    "title": "Debugging EXE File in Windbg and How to set Breakpoints in Assembly",
    "link": "https://reverseengineering.stackexchange.com/questions/16272/debugging-exe-file-in-windbg-and-how-to-set-breakpoints-in-assembly",
    "content": "I am trying to set a breakpoint (created in assembly) and step into an EXE file line by line to watch registers and memory behavior. I have done this easily with gdb under Linux like this.\n<pre><code>gdb -q ./AssembledLinkedFile -tui\nbreak _start  (or break *&code for C using shellcode)\nrun\nstepi\n</code></pre>\nThis works perfectly. However, The documentation for Windbg does not seem so straight forward.\nSince using GoLink adds several lines of asm, I need to find my assembly and start at the beginning  (_start:)\nCurrent process.\n\nWrite my assembly program.\nAssemble (on linux) -  nasm -f win64 messageBox64bit.nasm -o messageBox64bit.obj\nLink with golink (Windows) - golink \\console messageBox64bit.obj\nmessageBox64bit.EXE created and works fine. Executed on Windows\n\nAfter I open the messageBox64bit.EXE in Windbg, how can I  set a breakpoint in my assembly (_start:), then step into?\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "gdb",
        "windbg",
        "shellcode",
        "nasm",
        "assembly"
    ],
    "user": "hexhatchet",
    "time": "Sep 5, 2017 at 15:48",
    "comments": [],
    "answers_data": [
        {
            "content": "It seems  <pre><code>bp $exentry</code></pre> should set breakpoint on the entrypoint, then you can continue (<pre><code>g</code></pre>) until you hit it.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 5, 2017 at 15:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}