{
    "title": "How can I get the inferred register value for an instruction in Ghidra scripting?",
    "link": "https://reverseengineering.stackexchange.com/questions/26397/how-can-i-get-the-inferred-register-value-for-an-instruction-in-ghidra-scripting",
    "content": "I'd like to get the inferred value of a register at a particular point in the disassembly listing in a Ghidra script.\nIn my case the target instruction is a <pre><code>rdmsr</code></pre> or <pre><code>wrmsr</code></pre> instruction, which reads or writes the MSR at <pre><code>ecx</code></pre>. While I could walk back through the previous instructions and look for a simple <pre><code>mov ecx, const</code></pre> pattern, there are significantly more ways to set <pre><code>ecx</code></pre> to some known value that the decompiler is capable of inferring.\nI've tried calling <pre><code>getRegisterValue</code></pre> on the <pre><code>rdmsr</code></pre> instruction, passing in a <pre><code>Register</code></pre> type describing <pre><code>ecx</code></pre>, but this just returns <pre><code>None</code></pre>. Is there a way to infer register values at a particular instruction?\nHere's the disassembly:\n\nAnd the decompiled result:\n\nHere's the P-Code:\n",
    "votes": "5",
    "answers": 1,
    "views": "3k",
    "tags": [
        "x86",
        "ghidra",
        "x86-64",
        "register",
        "script"
    ],
    "user": "Polynomial",
    "time": "Dec 1, 2020 at 16:15",
    "comments": [
        {
            "user": "Florian Magin",
            "text": "Can you post a screenshot of the actual code you are trying this with? I assume that your issue is that you are getting <pre><code>None</code></pre> for a case where it should be obvious, but adding an image would make this clearer.\n",
            "time": null
        },
        {
            "user": "Florian Magin",
            "text": "Also, what <pre><code>getRegisterValue</code></pre> method are you talking about specifically? IDE tells me there are 11 methods with that name, with varying signatures on different classes, none of them available by default in the Jython context (which I assume you are using because you say <pre><code>None</code></pre> instead of <pre><code>null</code></pre>)\n",
            "time": null
        },
        {
            "user": "Polynomial",
            "text": "@FlorianMagin I've tried a number of different variants of that method, but primarily the <pre><code>Instruction</code></pre> one and the <pre><code>ProgramContext</code></pre> one.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "After looking into this a bit, I think that it will heavily depend on the exact context.\nThe decompiler can definitely do a basic form of this:\n\nIn this cases the PCode operation for the call instruction is already:\n<pre><code>(register, 0x0, 4) CALL (ram, 0x125180, 8) , (const, 0x1, 4) , (const, 0x5413, 8)</code></pre>[0]\ni.e. it contains the propagated constants already, without any references that they were read from a register.\nIf you are lucky the associated PCode operations for a <pre><code>rdmsr</code></pre> or <pre><code>wrmsr</code></pre> contain this information already. I don't have a binary to test how these instructions are handled exactly though. If they in any form contain the information that they depend on the value of <pre><code>ecx</code></pre> then I would expect that the decompiler will optimize the PCode instruction to directly use the constant as the PCode argument instead if possible, like in the attached image. A quick glance into <pre><code>x86.sla</code></pre> seems like <pre><code>RDMSR</code></pre> is indeed defined in a way that should allow this to happen.\nThe general results of any kind of value analysis that happens inside the decompiler is not exposed in a way that I know of though.\n[0] This is not the PCode from the instruction but from the decompiler token. You can get this by clicking on a token (like <pre><code>ioctl</code></pre> in the decompiler and then accessing <pre><code>currentLocation.token.pcodeOp</code></pre> in the Jython shell\n",
            "votes": "2",
            "user": "Florian Magin",
            "time": "Dec 1, 2020 at 19:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Polynomial",
                    "text": "<span class=\"comment-copy\">Sadly it does not appear that RDMSR gets populated with these constants.</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">Can you tell me the PCode OP of RDMSR instruction and the surrounding code? There are cases where the decompiler has this information but it doesn't get propagated to the PCode OP but might still be available with a little scripting. Getting RDMSR to lift as something that depends on ecx should be possible in some way if this really isn't the case yet.</span>",
                    "time": null
                }
            ]
        }
    ]
}