{
    "title": "How can I get the process information in windows without using APIs?",
    "link": "https://reverseengineering.stackexchange.com/questions/14785/how-can-i-get-the-process-information-in-windows-without-using-apis",
    "content": "I want to write a program to obtain the information of process, for the purpose of detecting and combating malware. I can use C++ and Win32 APIs to finish it, but I then started suspecting those APIs may be hooked in order to avoid my tests.\nMy question is: Can I get that information without using APIs? I cannot find any details about how <pre><code>zwQueryInformationProcess()</code></pre> functions.\n",
    "votes": "-1",
    "answers": 2,
    "views": "736",
    "tags": [
        "windows",
        "c++",
        "winapi",
        "function-hooking"
    ],
    "user": "Sunichi",
    "time": "Mar 6, 2017 at 18:23",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "and <pre><code>ZwQueryInformationProcess</code></pre> is not an \"API\"?\n",
            "time": null
        },
        {
            "user": "Sigtran",
            "text": "@Igor i think he wants to write his own equivalent of that.. API\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "It might be easier to address the issue of API hooking rather then implementing a generic <pre><code>zwQueryInformationProcess</code></pre> copy. You might be able to get some of the information it provides, but that depends on what info exactly you're interested in.\n",
            "time": null
        },
        {
            "user": "user2823000",
            "text": "Your question is really not specific enough. What information are you trying to get? Are you trying to avoid userland or kernel detection? Details about ZwQueryInformationProcess  are on the MSDN : msdn.microsoft.com/en-us/library/windows/desktop/â€¦\n",
            "time": null
        },
        {
            "user": "Sunichi",
            "text": "@Dillinur I am writing a program to detect the hidden process which is executed by hacker or someone else. I consider the situation that if those APIs are hooked, can I still find the evil, hidden processes as usual.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Have a look at the Process Environment Block (PEB)\nAPI functions like <pre><code>zwQueryInformationProcess()</code></pre> parse the data from intern structures. Some of them may provide the information you need and you should be able to find them without utilizing API functions.\nYou can also get a lot of information from the file header im memory, TEBs (Thread Environment Blocks) or you try a level deeper: EPROCESS. The later is utilized at kernel level.\n",
            "votes": "1",
            "user": "Nordwald",
            "time": "Mar 2, 2017 at 9:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can find a lot of resources about the internals of <pre><code>zwQueryInformationProcess</code></pre> because that information is undocumented. As nordwald said, detecting malware with <pre><code>zwQueryInformationProcess</code></pre> is possible, and more so in several ways but I would like to focus on something slightly different for this answer.\nThe general task of detecting malware in a process is usually pretty complex, specially when you aim to perform it generically and for multiple malware families. There are books about the topic and articles upon articles on related subjects. There are dozens if not hundreds of techniques malware can avoid detection, bypass protections and prevent analysis. There are multiple ways to avoid or mitigate most of those tricks and successfully detect malware samples that employ them. There's a huge market for malware detection with dozens of products attempting to detect and block viruses. Some would say that industry is falling behind of malware writers and it is generally quite feasible to make a malware FUD (fully undetected).\nThis is a huge domain with a lot of written material and aggregated knowledge.\nDetecting malware is not something you could do with something as simple as using raw data instead of calling an API. Companies fail at doing that after investing millions of dollars, and much more.\nI do not aim to discourage you from pursuing that or similar goals, I do however think you should make some effort at reading existing material to quickly further your understanding of the malware and anti-virus world, good luck!\n",
            "votes": "0",
            "user": "NirIzr",
            "time": "Mar 6, 2017 at 18:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">ZwQueryInformationProcess requires opening the process for querying, hence an API which is likely hooked to refuse opening for the target process.</span>",
                    "time": null
                }
            ]
        }
    ]
}