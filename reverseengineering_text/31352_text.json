{
    "title": "deobfuscate Dexgaurd obfuscated code",
    "link": "https://reverseengineering.stackexchange.com/questions/31352/deobfuscate-dexgaurd-obfuscated-code",
    "content": "I was reversing an <pre><code>apk</code></pre>. the <pre><code>code</code></pre> detects whether the <pre><code>apk</code></pre> is running on a rooted device or not. if it is rooted or an emulator it will stop and close out. so this is the snippet code which I think it was obfuscated with DexGuard not really sure if it is.\n<pre><code>v0_4 = (int)(((Integer)((Class)withOrigin.read(((char)(-1 - Long.compare(ExpandableListView.getPackedPositionForChild(0, 0), 0L))), 476 - View.combineMeasuredStates(0, 0), 18 - Long.compare(Process.getElapsedCpuTime(), 0L))).getMethod(\"RemoteActionCompatParcelizer\", Context.class, Integer.TYPE).invoke(null, v0_3, ((int)1))));\n</code></pre>\nso the method <pre><code>RemoteActionCompatParcelizer</code></pre> is the method determining whether rooted or not I believe. as such the <pre><code>withOrigin.read</code></pre> intercepted with <pre><code>frida</code></pre> returns <pre><code>o.a</code></pre> so tried to with jadx-gui find the package <pre><code>o.a</code></pre> as the method <pre><code>RemoteActionCompatParcelizer</code></pre> is apparently defined in this package but not found in the tree o and there are a bunch of other classes in it.\nso what next steps can I take to solve these obfuscations?\n",
    "votes": "1",
    "answers": 0,
    "views": "348",
    "tags": [
        "android",
        "obfuscation",
        "deobfuscation",
        "apk"
    ],
    "user": "hanan",
    "time": "Jan 4, 2023 at 15:45",
    "comments": [],
    "answers_data": []
}