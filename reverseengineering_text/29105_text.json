{
    "title": "determine proprietary 16-bit floating-point format",
    "link": "https://reverseengineering.stackexchange.com/questions/29105/determine-proprietary-16-bit-floating-point-format",
    "content": "Background / Introducion\nCAN message Mercedes-Benz, cannot determine 16-bit data type for temperature.\n<pre><code>7E 00 32 01 37 00\n</code></pre>\nAccording to @rnd-ash (who has reverse engineered ACTIA Basic XS Monitor Software) message is structured data type composed of four values. Now we have bit length + offset but unfortunately data type is unknown.\n<pre><code>ECU NAME: SAM_V_A2, ID: 0x0017. MSG COUNT: 4\n    MSG NAME: T_AUSSEN_B - (°C) (° C) Outside air temperature, OFFSET 0, LENGTH 8\n    MSG NAME: P_KAELTE - (bar) (Bar) pressure refrigerant R134a, OFFSET 8, LENGTH 16\n    MSG NAME: T_KAELTE - (°C) (° C) temperature refrigerant R134a, OFFSET 24, LENGTH 16\n    MSG NAME: I_KOMP - (mA) (MA) current compressor main control valve, OFFSET 40, LENGTH 8\n</code></pre>\n@ProjectPhysX suggested it is probably 8/16-bit integer and big endian, so I created that struct. Figured out how to calculate value 0, 1, 3 but unfortunately struggling with value 2\n<pre><code>typedef struct SAM_V_A2_t {\n  uint8_t T_AUSSEN_B;\n  uint16_t P_KAELTE;\n  uint16_t T_KAELTE;\n  uint8_t I_KOMP;\n} SAM_V_A2_t;\n</code></pre>\nBased on that pictures I can confirm the calculation except for T_KAELTE, which is target of this question (see below).\n<pre><code>std::cout << \"T_AUSSEN_B = \" << +( (SAM_V_A2.T_AUSSEN_B - 80) / 2 ) << \" (°C) Outside air temperature\"               << std::endl;\nstd::cout << \"P_KAELTE = \"   << +( SAM_V_A2.P_KAELTE / 10 )         << \" (bar) pressure refrigerant R134a\"           << std::endl;\nstd::cout << \"T_KAELTE = \"   << +( (SAM_V_A2.T_KAELTE - 80) / 2 )   << \" (°C) temperature refrigerant R134a\"         << std::endl;\nstd::cout << \"I_KOMP = \"     << +( SAM_V_A2.I_KOMP * 10 )           << \" (mA) current compressor main control valve\" << std::endl;\n</code></pre>\n   \n<pre><code>  7E             00 32               01 37             00\n\n01111110   00000000 00110010   00000001 00110111   00000000\n\n 126               50                 311               0\n\n 126 - 80 / 2      50 / 10             ?                0 * 10\n\n  23°C              5 bar              ? °C             0 mA\n</code></pre>\n\nQuestion\nMy last hope was it could be <pre><code>binary16</code></pre> or <pre><code>bfloat16</code></pre> but no luck. Maybe it is some proprietary 16-bit floating-point format with different bits for exponent / mantissa\n\nMaybe we can brute force all permutations for exponent / mantissa to determine data type.\nQuestion: How can we decode <pre><code>01 37</code></pre> so it gives expected value ~ 21.10 °C\n(more sample data here)\n",
    "votes": "0",
    "answers": 1,
    "views": "137",
    "tags": [
        "c++",
        "file-format",
        "serial-communication",
        "float",
        "type-reconstruction"
    ],
    "user": "alecxs",
    "time": "Aug 7, 2021 at 12:47",
    "comments": [
        {
            "user": "alecxs",
            "text": "@ProjectPhysX temperature T_KAELTE must be sensor B12/2 on picture 3 and i believe hardware is in voltage\n",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "this is the hardware hehlhans.de/sl55amg-sam-1.htm#b21 and the sensor google.com/search?q=A2038300372\n",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "datasheet seems not helpful (DATA SEGMENT REGISTER 3 + 4 looks like this)\n",
            "time": null
        },
        {
            "user": "alecxs",
            "text": "think i got it. it is (x - 100) / 10 have confirmed with other records 0x01C4 = 35.2 °C, 0x01D6 = 37.0 °C\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Maybe it is the temperature in Kelvin: 311 - 80/2 = 217K = -2.15°C\nOr the offset is different than 80/2. A 16-bit floating-poitn format, especially a different one from IEEE-754 is highly unlikely. Such measurement chips are not more but simple ADCs, they lack the capabilities to convert their reading to floating-point.\nTo be sure, you would have to take several readings. If you expect that temperature fluctuates by a few °C between measurements, then in <pre><code>00000001 00110111</code></pre> only the last few bits should change.\nIf you have access to the hardware, read the serial number off the chip package and look it up, maybe you find the data sheet that documents the data format of measurements.\n",
            "votes": "2",
            "user": "ProjectPhysX",
            "time": "Aug 7, 2021 at 12:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}