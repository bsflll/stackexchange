{
    "title": "Intel Pin memory operations tracking",
    "link": "https://reverseengineering.stackexchange.com/questions/12363/intel-pin-memory-operations-tracking",
    "content": "I am using Intel Pin in order trace memory activity of an executable on Windows. What I have found, that most of the memory operands (Read or Write) operates with 2 or 4 bytes. So I decided to modify original Pin's pinatrace example, in order to see which Assembly opcodes produces which memory activity.\n<pre><code>VOID Instruction(INS ins, VOID *v)\n{\n\n        UINT32 memOperands = INS_MemoryOperandCount(ins);\n        fprintf(trace,\"\n[%s]\n\",(INS_Disassemble(ins)).c_str()); \n        for (UINT32 memOp = 0; memOp < memOperands; memOp++)\n        { \n             .....\n</code></pre>\nWhat it basically does (I hope), is just writes disassembled opcode BEFORE the memory operands it produces. But then I looked in the file (W is for write, R is for read):\n\n[test edx, 0x800000]\n[jnz 0x77708557]\n[mov dword ptr [ebp-0x4], edi]\n[test dl, 0x1]\n[jnz 0x77703136] RWWRWW \n[lea edi, ptr [ebx+0xcc]]\n[push dword ptr [edi]]\n[call 0x77702520] RWW \n[mov edi, edi]\n[push ebp]\n[mov ebp, esp]\n[mov eax, dword ptr [ebp+0x8]]\n[mov ecx, dword ptr fs:[0x18]]\n[lea edx, ptr [eax+0x4]]\n[lock btr dword ptr [edx], 0x0]\n[jnb 0x777041dc]\n[mov ecx, dword ptr [ecx+0x24]]\n[mov dword ptr [eax+0xc], ecx]\n[mov dword ptr [eax+0x8], 0x1]\n[mov eax, 0x1]\n[pop ebp]\n[ret 0x4] WRRRWRWWRR\n\nAs we can see, opcodes that are supposed to work with memory (e.g. mov) do not produce memory operands. While memory traces are connected as blocks after ret/call/jnz etc.\nQuestion: What kind of memory operands does Intel Pin trace? Is it about calls to virtual memory/RAM/CPU registers? Could it be possible, that memory activity goes in blocks due to CPU's pipeline?\n",
    "votes": "3",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "memory",
        "pintool"
    ],
    "user": "aGGeRReS",
    "time": "Apr 7, 2016 at 13:49",
    "comments": [],
    "answers_data": [
        {
            "content": "So, finally I came up with the solution that works how I want and results seem to be valid according to this reference of instruction tables\n<pre><code>fprintf(trace,\"\n[%s]\n\",(INS_Disassemble(ins)).c_str()); //(INS_Disassemble(ins)).c_str()\nfflush(trace);\n   \nfor (UINT32 memOp = 0; memOp < memOperands; memOp++)\n{\n    if (INS_MemoryOperandIsRead(ins, memOp))\n    {\n        fprintf(trace,\"R\");\n        icount++;\n    }\n\n    if (INS_MemoryOperandIsWritten(ins, memOp))\n    {\n        fprintf(trace,\"W\");\n        icount++;\n    }\n}\n</code></pre>\nAnd it produces the following output:\n<pre><code>[mov eax, dword ptr [ebp+0x10]]\nR\n[mov byte ptr [ebx+0x2], 0x0]\nW\n[mov byte ptr [ebx+0x7], 0x0]\nW\n</code></pre>\nI cannot be sure that it is the true sequence of executable under analysis because I do output in the instrumentation phase, but the code can probably be modified it the way to write opcode inside another  INS_InsertPredicatedCall, so it will be recorded when it will be executed.\n",
            "votes": "1",
            "user": "canihavesomecoffee",
            "time": "Nov 3, 2020 at 15:18",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "If you want to limit your print-out to just memory read/write instructions, your <pre><code>fprintf()</code></pre> needs to be inside the <pre><code>if (INS_MemoryOperandIsRead(ins, memOp)) { ... }</code></pre> block and inside the <pre><code>if (INS_MemoryOperandIsWritten(ins, memOp)) { ... }</code></pre> block (and you'll need to include some logic to not print the same instruction more than once).\nFor example:\n<pre><code>// Is called for every instruction and instruments reads and writes\nVOID Instruction(INS ins, VOID *v)\n{\n    // Instruments memory accesses using a predicated call, i.e.\n    // the instrumentation is called iff the instruction will actually be executed.\n    //\n    // On the IA-32 and Intel(R) 64 architectures conditional moves and REP \n    // prefixed instructions appear as predicated instructions in Pin.\n    UINT32 memOperands = INS_MemoryOperandCount(ins);\n\n    BOOL printed = FALSE;\n\n    // Iterate over each memory operand of the instruction.\n    for (UINT32 memOp = 0; memOp < memOperands; memOp++)\n    {\n        if (INS_MemoryOperandIsRead(ins, memOp))\n        {\n            if (!printed)\n            {\n                fprintf(trace,\"\n[%s]\n\",(INS_Disassemble(ins)).c_str()); \n                printed = TRUE;\n            }\n\n            INS_InsertPredicatedCall(\n                ins, IPOINT_BEFORE, (AFUNPTR)RecordMemRead,\n                IARG_INST_PTR,\n                IARG_MEMORYOP_EA, memOp,\n                IARG_END);\n        }\n        // Note that in some architectures a single memory operand can be \n        // both read and written (for instance incl (%eax) on IA-32)\n        // In that case we instrument it once for read and once for write.\n        if (INS_MemoryOperandIsWritten(ins, memOp))\n        {\n            if (!printed)\n            {\n                fprintf(trace,\"\n[%s]\n\",(INS_Disassemble(ins)).c_str()); \n                printed = TRUE;\n            }\n\n            INS_InsertPredicatedCall(\n                ins, IPOINT_BEFORE, (AFUNPTR)RecordMemWrite,\n                IARG_INST_PTR,\n                IARG_MEMORYOP_EA, memOp,\n                IARG_END);\n        }\n    }\n}\n</code></pre>\n",
            "votes": "0",
            "user": "Jason Geffner",
            "time": "Apr 7, 2016 at 14:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">This is an interesting suggestion. But when I tried I received the following:  &gt; [pop ebx] &gt;  &gt; [pop edi] &gt;  &gt; [pop esi] &gt;  &gt; [pop ebp] &gt;  &gt; [ret 0x10]  &gt;  &gt; RRRRR &gt;  &gt; [mov byte ptr [ebp-0x19], al] &gt;  &gt; [mov dword ptr [ebp-0x4], ebx] &gt;  &gt; [call 0x7770c290]  &gt;  &gt; WWW  &gt;  &gt; [call 0x776f2165]   &gt;  &gt; W   &gt;  &gt; [push ebp] &gt;  &gt; [mov eax, dword ptr fs:[0x18]]</span>",
                    "time": null
                },
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">Well, comment formatting doesn't work well, but as you can see - there are still opcodes with no memory operations.  Do you exactly know what kind of <i>memory operations</i> (to what kind of <i>memory</i>) Pin traces?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Every instruction you printed above does indeed involve a memory read or write. <code>pop</code>s and <code>ret</code>s read from the stack memory, the <code>mov</code>s write to memory, the <code>call</code>s read from memory, and the <code>push</code> writes to the stack memory.</span>",
                    "time": null
                },
                {
                    "user": "aGGeRReS",
                    "text": "<span class=\"comment-copy\">Allright, thank you. But they all work with data stored in RAM (not taking CPU's cache into account, since pages are synchronized), am I right? And why there is no read operations after <code>calls</code> so far?</span>",
                    "time": null
                }
            ]
        }
    ]
}