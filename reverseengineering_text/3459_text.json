{
    "title": "Reversing a router, single user mode",
    "link": "https://reverseengineering.stackexchange.com/questions/3459/reversing-a-router-single-user-mode",
    "content": "I'm trying to reverse engineer a binary running on a zyxel router. My first approach would have been to change the password within the .bin firmware itself, but as seen here, I'm having some trouble extracting part of the files. \nI hooked the router up using a serial cable and have managed to interupt the booting process. Considering it's running Linux, is there a way to start the router up in some type of single user mode which will imediately fall back to /bin/sh and not require login?\n",
    "votes": "3",
    "answers": 1,
    "views": "381",
    "tags": [
        "firmware",
        "networking"
    ],
    "user": "Lucas Kauffman",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Polynomial",
            "text": "Have you tried just running <pre><code>strings</code></pre> across it? You might get lucky and find that your password is stored in an uncompressed block, so you can just hex edit it.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It depends on the bootloader. Many will allow you to edit the kernel options, which should allow you to drop into single user mode. This is usually done by setting an environment variable in the bootloader (\"bootargs\" or something similar). \nIf you know the bootloader being used, you can look up any documentation that might be available (U-Boot, for example) to see if there are any guidelines on how to control boot parameters.\n",
            "votes": "2",
            "user": "devttys0",
            "time": "Jan 14, 2014 at 17:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}