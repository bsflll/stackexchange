{
    "title": "What are some ways to pass raw bytes to a program via the Linux terminal?",
    "link": "https://reverseengineering.stackexchange.com/questions/24755/what-are-some-ways-to-pass-raw-bytes-to-a-program-via-the-linux-terminal",
    "content": "I want to pass raw bytes to a (C) program using the Linux Bash shell. I find that when I try to pass for example \"\\x00\\xFF\\xAB\", the program receiving the input actually gets the ASCII character codes for the string, rather than interpret them as the raw bytes.\nOne way I've seen people accomplish this is by calling <pre><code>python -c 'print(\"\\x00\\xFF\\xAB\")'</code></pre> and piping output to the program under test. Is there a way to do this without using Python by just using the Bash shell?\n",
    "votes": "15",
    "answers": 2,
    "views": "11k",
    "tags": [
        "binary-analysis",
        "binary",
        "fuzzing"
    ],
    "user": "the_endian",
    "time": "Apr 23, 2020 at 5:12",
    "comments": [
        {
            "user": "bart1e",
            "text": "You can use ‘printf \\xbb’, where you replace ‘bb’ by the byte you want. The only problem is, you cannot pass null byte this way.\n",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "Ah thanks do you know how I could pass a null byte?\n",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "Unfortunately, I don't. :/\n",
            "time": null
        },
        {
            "user": "the_endian",
            "text": "@bart1e thanks I don't think there is a way to do it like this. For null bytes I may have to run execve manually and pass the args I believe.\n",
            "time": null
        },
        {
            "user": "rici",
            "text": "@bart1e: you can print NUL bytes with printf. You just can't save them in a variable.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Use <pre><code>echo -e</code></pre> and pipe to your program's input.\nExample:\n<pre><code>echo -e \"\\x41\\x42\\x43\\x44\" | <executable></code></pre>\nWill write ABCD as input.\nedit:\nYou can pass null-bytes\n",
            "votes": "11",
            "user": "Yotamz",
            "time": "Apr 19, 2020 at 9:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Woodrow Barlow",
                    "text": "<span class=\"comment-copy\">would you mind adding an example on how to pass bytes as an <i>argument</i> to the executable?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">Put the <code>echo -e</code> command after the executable name, surrounded by backticks: (`). Null bytes are ok in this method too. (Newline chars, however, will break the string)</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@Yotamz yikes ... backticks? That's so 1990s. Drop the backticks and use <code>$(...)</code> to dodge the escaping nightmare that ensues as soon as you start nesting backticks ... null bytes will work in arguments? I find that surprising, since they're treated as zero-terminated. Can you substantiate that claim?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">Yes, tried it with <code>ls</code>, echo -e \"\\x2E\\x2E\" (ls ..) works the same as <code>ls</code> with echo \"\\x2E\\x00\\x2E\", even though it supposedly ends the string. I'd expect the latter to be treated as just \"\\x2E\" and list the current folder but it doesn't. I agree with you on the backticks-escaping though.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you need null bytes, you can write them to a file and use the file as input for the program, e.g.:\n\necho -e -n \"\\x00\\xFF\\xAB\" > file.bin\nprogram < file.bin\n\nYou can use also use <pre><code>xxd</code></pre> to convert hex to binary:\n\necho \"00 FF AB\" | xxd -r -p | program\n",
            "votes": "18",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hermann",
                    "text": "<span class=\"comment-copy\">Upvoted for the use of <code>xxd</code> – it is much more convenient without the backslashes.</span>",
                    "time": null
                }
            ]
        }
    ]
}