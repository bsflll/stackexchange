{
    "title": "Java obfuscated methods and params",
    "link": "https://reverseengineering.stackexchange.com/questions/21065/java-obfuscated-methods-and-params",
    "content": "Try to decompile several classes from jar and found this\n<pre><code> public static final boolean \\u2005\\u200e;\n</code></pre>\nand \n<pre><code> if (\\u2005\\u200e) \n {\n     final boolean \\u2005\\u200e = tEstPrOJEcTDEV7i.\\u2005\\u200e;\n }\n</code></pre>\nhow to convert this names to normal? In byte code some of strings looks like -> \"�ୱﺔ颮떚䁠䭽鎢\"\n",
    "votes": "0",
    "answers": 1,
    "views": "78",
    "tags": [
        "java"
    ],
    "user": "Lol Kek",
    "time": "Apr 6, 2019 at 17:49",
    "comments": [],
    "answers_data": [
        {
            "content": "A common obfuscation tactic is to remove all the identifiers and replace them with arbitrary and unhelpful strings. Since the JVM (mostly) doesn't care what your methods are called, the code will still work fine, but it is harder to understand.\nUnfortunately, there is no way to recover the original identifiers, because the information simply doesn't exist anymore. However, you can rename them to things you find more helpful as part of the reverse engineering process.\n",
            "votes": "1",
            "user": "Antimony",
            "time": "Apr 6, 2019 at 18:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}