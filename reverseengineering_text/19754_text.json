{
    "title": "Finding the main function without symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/19754/finding-the-main-function-without-symbols",
    "content": "for a C/C++ program compiled on windows using the x86 architecture, what is the best way to find the main function within disassembled code?\nI've found various answers to questions similar to this, but they're answering questions that are far more specific to the OPs use-case. Is there any standard or go-to method for locating the main function when looking at disassembled code?\nNOTE: I'm new to disassembly / reverse engineering. If I'm saying something that doesn't quite make sense, all clarification is much appreciated!\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "windows",
        "x86",
        "c++",
        "c"
    ],
    "user": "xorist",
    "time": "Oct 30, 2018 at 0:09",
    "comments": [
        {
            "user": "perror",
            "text": "You can look at this answer. I guess this will give you some insight about ELF executable format.\n",
            "time": null
        },
        {
            "user": "user22970",
            "text": "main as <pre><code>int main()</code></pre> or main as the entry point, as can be sseen in ida as <pre><code>start</code></pre>?\n",
            "time": null
        },
        {
            "user": "xorist",
            "text": "If you're looking at disassembled code that does not have any symbols or has been stripped, the main function does not show up. Thus, my question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If the application is a GUI, usually there are 4 arguments that will push to the stack and a call to an address.\nExample:\n\nFor console application, it has 3 arguments.\nExample:\n\nBut still, it must be depend upon the compiler. I hope it help you.\n",
            "votes": "2",
            "user": "ismael_akez",
            "time": "Nov 1, 2018 at 10:14",
            "is_accepted": true,
            "comments": [
                {
                    "user": "xorist",
                    "text": "<span class=\"comment-copy\">So by this, you'd look for a function that takes 3 arguments for a console application in order to find the main function?</span>",
                    "time": null
                },
                {
                    "user": "ismael_akez",
                    "text": "<span class=\"comment-copy\">@xorist Yes, and you may observed that the main function must be located before the cexit() or ExitProcess(v1) is called.  This is the pseudo code produced by IDA Pro.     sub_403B20(dword_407004, dword_407000, *v0);    cexit();   ExitProcess(v1);</span>",
                    "time": null
                },
                {
                    "user": "xorist",
                    "text": "<span class=\"comment-copy\">I'll try this and let you know how it goes. Thanks!</span>",
                    "time": null
                },
                {
                    "user": "xorist",
                    "text": "<span class=\"comment-copy\">I do have a question, in your images where do you see the number of parameters that are being used?</span>",
                    "time": null
                },
                {
                    "user": "Fabian Mendez",
                    "text": "<span class=\"comment-copy\">@xorist By looking in the number of values pushed or moved to the stack, eg: mov [esp], xx, mov[exp+4], xx</span>",
                    "time": null
                }
            ]
        }
    ]
}