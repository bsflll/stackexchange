{
    "title": "How do you deobfuscate Java classes? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1361/how-do-you-deobfuscate-java-classes",
    "content": "It's difficult to tell what is being asked here. This question is ambiguous, vague, incomplete, overly broad, or rhetorical and cannot be reasonably answered in its current form. For help clarifying this question so that it can be reopened, visit the help center.\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\nWhat tools or methodology do you use to de-obfuscate Java classes?\n\n\nI know you can theoretically decompile, modify and recompile, but that's only you fully trust a Java decompiler (and none is regularly updated).\nOne might also edit java bytecode directly with reJ but that's tedious and risky (it's easy to break the bytecode without any warnings...)\n",
    "votes": "0",
    "answers": 2,
    "views": "7k",
    "tags": [
        "tools",
        "java",
        "deobfuscation"
    ],
    "user": "Ange",
    "time": "12 years ago",
    "comments": [
        {
            "user": "Jurriaan Bremer",
            "text": "I once wrote a bunch of python code to handle with java files.. but that was just for parsing, not writing new java files, so it's not really useful here :) I mean, as usual, if there are specific patterns which you can statically identify, then the easiest would be by writing some custom tools, imo.\n",
            "time": null
        },
        {
            "user": "Dougall",
            "text": "Do you mean \"modify compiled Java classes\"? Deobfuscating a Java class is completely separate from modifying it, recompiling it or changing the bytecode.\n",
            "time": null
        },
        {
            "user": "amccormack",
            "text": "Do you want a tool that can decompile, deobfuscate and recompile all in one, or would you settle for a tool that will just help you deobfuscate java class names. And could you give an example of how the java classes are obfuscated because some techniques will only apply to particular obfuscation patterns.\n",
            "time": null
        },
        {
            "user": "asheeshr",
            "text": "How about adding some more details and making the question more specific ?\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "I've written a set of tools for working with obfuscated classes, that you can find here: github.com/Storyyeller/Krakatau\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I am not exactly a Java expert but a while ago I researched the firmware of a car navigation system. For the java bits of it I used the “Java Decompiler project” and it seemed to work well for decompilation.\n\nThe “Java Decompiler project” aims to develop tools in order to\n  decompile and analyze Java 5 “byte code” and the later versions.\nJD-Core is a library that reconstructs Java source code from one or\n  more “.class” files. JD-Core may be used to recover lost source code\n  and explore the source of Java runtime libraries. New features of Java\n  5, such as annotations, generics or type “enum”, are supported. JD-GUI\n  and JD-Eclipse include JD-Core library.\nJD-GUI is a standalone graphical utility that displays Java source\n  codes of “.class” files. You can browse the reconstructed source code\n  with the JD-GUI for instant access to methods and fields.\nJD-Eclipse is a plug-in for the Eclipse platform. It allows you to\n  display all the Java sources during your debugging process, even if\n  you do not have them all.\nJD-Core works with most current compilers including the following:\n<pre><code>jdk1.1.8\njdk1.3.1\njdk1.4.2\njdk1.5.0\njdk1.6.0\njdk1.7.0\njikes-1.22\nharmony-jdk-r533500\nEclipse Java Compiler v_677_R32x, 3.2.1 release\njrockit90_150_06\n</code></pre>\n",
            "votes": "2",
            "user": "Remko",
            "time": "Mar 29, 2013 at 11:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jurriaan Bremer",
                    "text": "<span class=\"comment-copy\">One can break JD-GUI without much hassle.For example, loading a class with a function with 50k return instructions would take 10 seconds to load in JD-GUI. Another example is jumping a bit around; I made a function which jumps to an offset, does some stuff, jumps to another offset, does some more stuff, and return. And all JD-GUI would show is \"label_7:\" for the <i>entire</i> function. This might be interesting to document sometime.. Note that JAD appeared much better in my simple tests - it did in fact decompile these two functions correctly.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I use Dirty JOE's integrated python module and scripts to deobfuscate Constant Pool strings. However, that requires converting algorithms from Java to Python, by hand, and is limited to pool strings.\n",
            "votes": "1",
            "user": "Ange",
            "time": "Mar 28, 2013 at 20:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}