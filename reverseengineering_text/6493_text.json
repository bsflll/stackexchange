{
    "title": "Question about process injection",
    "link": "https://reverseengineering.stackexchange.com/questions/6493/question-about-process-injection",
    "content": "During an analysis, I found the following piece of malware:\n<pre><code>   ...\n   lea eax, [ebp+ThreadId]\n   push eax                   ;lpThreadId\n   push ebx                   ;dwCreationFlags\n   push [ebp+lpParameter]     ;lpParameter\n   push [ebp+lpStartAddress]  ;lpStartAddress\n   push ebx                   ;dwStackSize\n   push ebx                   ;lpThreadAttributes\n   push [ebp+hProcess]        ;hProcess\n   call CreateRemoteThread\n   ...\n</code></pre>\nWhat I definitely know\nFrom some previous parts, I know that \n<pre><code>xor ebx, ebx -> ebx = NULL or zero\n</code></pre>\nAt the address pointed to by <pre><code>lpParameter</code></pre>, the malware stores the address of <pre><code>LoadLibrary</code></pre>. And <pre><code>hProcess</code></pre> is a handle to <pre><code>explorer.exe</code></pre>. \nWhat I want to know\nRelated to <pre><code>lpStartAddress</code></pre>, I have found the following lines:\n<pre><code>  ...\n  push ebx\n  push [ebp+nSize]\n  push offset loc_402B58\n  push [ebp+lpStartAddress]\n  push [ebp+hProcess] \n  call WriteProcessMemory\n  ...\n</code></pre>\nSo, this function writes the content of <pre><code>offset loc_402B58</code></pre> into the region of pages started at <pre><code>lpStartAddress</code></pre> (which was allocated some lines before).\nNow, when I go to <pre><code>offset loc_402B58</code></pre>, I see the following (note: I use IDA PRO):\n<pre><code>loc_402B58:\n push esi\n mov esi, [esp+8]\n lea eax, [esi+14h]\n push eax\n call dword ptr[esi]\n test eax, eax\n mov [esi+10h], eax\n jz short loc_402B80\n lea ecx, [esi+46h]\n push ecx\n push eax\n call dword ptr [esi+4]\n test eax, eax\n jz short_loc402B80\n call eax\n push 0\n call eax                  <----- edited because i have forgotten it\n push 0                    <-----                    ''\n call dword ptr [esi+8]    <-----                    ''\n\nloc_402B80:     \n xor eax, eax\n pop esi\n retn 4\n</code></pre>\nSo my question would be: \n\nWhat does the assembly at <pre><code>loc_402B58</code></pre> and <pre><code>loc_402B80</code></pre> ?\n",
    "votes": "1",
    "answers": 1,
    "views": "348",
    "tags": [
        "assembly",
        "malware",
        "injection"
    ],
    "user": "user3097712",
    "time": "Oct 19, 2014 at 13:34",
    "comments": [
        {
            "user": "user45891",
            "text": "Can not be said with the limited information given. As you see loc_402B58 access esp+8 which is the parameter given in the CreateRemoteTHread call. So without knowledge of that there is no way of knowing\n",
            "time": null
        },
        {
            "user": "user3097712",
            "text": "the parameter given to CreateRemoteThread is the address of the function \"LoadLibrary\", as I wrote. Or, how can I look which information is at esp+8 ?\n",
            "time": null
        },
        {
            "user": "user45891",
            "text": "Yes, however I am not sure whether it's only that. Consider line 5 <pre><code>call [esi]</code></pre> which is the call to LoadLibrary(). However on line 3 it accesses the parameter + 0x14 and uses that as the DLL name that is passed to LoadLibrary.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It should also be storing address of <pre><code>GetProcAddress() at <lpparm+4></code></pre> \nit should store a string the <pre><code>name of module at <lpparam+14></code></pre>\nit should store a string the <pre><code>name of proc for getProcAddress at <lpparm+46></code></pre>\nat <pre><code>[esp+8]</code></pre> it accesses the lpparam which was written to the remote process so you may need to find this <pre><code>WriteProcessMemory Also</code></pre> and look at the <pre><code>local Buffer to Know the data</code></pre> ie name of dll and name of Proc \nor you may need to attach to the Remote process and <pre><code>Break on Thread CreateEvent</code></pre> and single Step through the <pre><code>BaseThreadStartThunk()</code></pre>  Routine  in this routine you will notice ebp is Zeored in there and Eax and Ebx holds LpStart and lpParam and that is how lpStart gets Executed \n<pre><code>push [ebp+c] lpparam\ncall [enp+8] lpStart\n</code></pre>\nesi gets the lpparm via mov esi [esp+8] which in your case holds the Address of LoadLibrary as you correctly observed but you have not observed what is at \n<pre><code>assuming [esp+8 ] holds 403000 <lpparam>\n[[esp+8] + 0 ] [403000] holds Address of LoadLibrary as you observed\n[[esp+8] + 4]  [403004] will hold Address of GetProcAddress\n[[esp+8] + 14] [403014] will hold a string the dll name\n[[esp+8] + 46] [403046] will hold the name of  Proc in the Loaded Dll\n[[esp+8] + 10] [403010] gets the Result of LoadLibrary Return in your above snippet\n</code></pre>\nedit \nadded the annotated snippet for referance\n<pre><code>push esi\n mov esi, [esp+8]    <lpparameter> assuming 403000\n lea eax, [esi+14h]  lpparameter+14> should be a string the name of dll 403014\n push eax            push 403014    \n call dword ptr[esi] DWORD [ lpparmeter+0 ] = [403000] = Address Of LoadLib so calling loadlib\n test eax, eax\n mov [esi+10h], eax  [lpparam+10] [403010] store LoadLibResult here\n jz short loc_402B80  failure\n lea ecx, [esi+46h] [403046] = <lpparm+46> again a string name of Proc for GetProcAddress()\n push ecx           processname     \n push eax           HandletoLoadedmod  \n call dword ptr [esi+4]  Must be Address of GetProcAddress from the looks check your code \ncapture local buffer when Writing to ProcessMemory or Break on Create new Thread in the RemoteProcess\nby attaching a debugger Executing the RemoteDebugge and when a new Thread Create Event is triggered \nsingle step to find the contents of lpparam\n test eax, eax    \n jz short_loc402B80\n call eax  <calls the  functions that was just getproc'ed>\n push 0\n call \n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Oct 18, 2014 at 19:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. It helps a lot. I complete the lines after the last call instruction because I have forgotten it. So, what the code construct does is to get a handle to a dll and use that handle later for GetProcAddress to retrieve the address of a process from that dll. Okay.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">nitpick not process but proc -------------------------------The term Proc Literally Denotes a Function Address in a Process Space where Process is Term that Denotes a Collection Of threads that are Scheduleable to Execute in a Processor</span>",
                    "time": null
                }
            ]
        }
    ]
}