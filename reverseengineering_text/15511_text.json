{
    "title": "How does look \"this\" variable in C++ at the assembly level?",
    "link": "https://reverseengineering.stackexchange.com/questions/15511/how-does-look-this-variable-in-c-at-the-assembly-level",
    "content": "How to properly define these so many <pre><code>this</code></pre> variables in C++ programs. Is it a structure or something else at the assembly level?\nFor example, this function seems to allocate heap memory.\n<pre><code>int __thiscall heapAlloc(int this, char *Str)\n{\n  int v2; // esi@1\n  size_t v3; // eax@2\n  char *v4; // eax@2\n\n  v2 = this;\n  *(_DWORD *)(this + 4) = -1;\n  *(_DWORD *)(this + 308) = -1;\n  *(_DWORD *)this = 0;\n  *(_DWORD *)(this + 312) = 0;\n  *(_DWORD *)(this + 316) = 0;\n  if ( Str )\n  {\n    v3 = strlen(Str);\n    v4 = (char *)operator new(v3 + 1);\n    *(_DWORD *)(v2 + 312) = v4;\n    strcpy(v4, Str);\n  }\n return v2;\n}\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "476",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "Muhammad Arslan Maqsood",
    "time": "Sep 27, 2018 at 7:48",
    "comments": [
        {
            "user": "blabb",
            "text": "there are five  this variables  because  they are members of the this structure  redefine you int this  struct this with appropriate length  and redecompile i will bet all the this+x. will turn to. this->foo etc   as to why only two is used in code  may be other members are used after returning from the function possibly\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is indeed an object of a relatively big class. Only a handful of the class members are initialized in the provided  function. The function might be called by other initialization code, where other members are initialized.\nI often define a struct big enough to hold all members I encounter of a single class, where unknown portions are either undefined or a single array labelled <pre><code>unknown_X</code></pre>. As I recognise more members the class structures become more complete and clear, as well as additional meanings are given to most members.\nWhile doing that, you should keep in mind classes might inherit one another, so class structures might be contained as other class structures and be used independently at the same time. I often combine and merge class structures as I go and when I'm confident enough structures are indeed shared. I find that reversing initialization code is very helpful in mapping classes and their structures.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 13, 2017 at 8:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}