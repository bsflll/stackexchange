{
    "title": "How to solve bad pseudocode format of Hex-Rays Decompiler?",
    "link": "https://reverseengineering.stackexchange.com/questions/30544/how-to-solve-bad-pseudocode-format-of-hex-rays-decompiler",
    "content": "Look at the following pseudocode:\n<pre><code>void *__cdecl func(const char *a1, int a2, void *a3)\n{\n  _DWORD *v3; // esi\n  int v5; // ebp\n  int v6; // eax\n  void *v7; // esi\n  _DWORD *v8; // eax\n  int v9; // edx\n  int v10; // edi\n  Elf32_Dyn *v11; // edx\n  union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 *v12; // edi\n  Elf32_Dyn *v13; // esi\n  Elf32_Dyn *v14; // edx\n  _DWORD *v15; // [esp+20h] [ebp-1Ch]\n\n  if ( !*(Elf32_Dyn **)((char *)&off_53EFF4 + (_DWORD)(&dword_466640 - 694731)) )\n  {\n    v3 = *(Elf32_Dyn **)((char *)&off_53EFF4 + (_DWORD)&loc_2A647D - 2778921);\n    if ( *v3 == 3 )\n      return 0;\n    ......\n</code></pre>\n<pre><code>!*(Elf32_Dyn **)((char *)&off_53EFF4 + (_DWORD)(&dword_466640 - 694731))</code></pre>and<pre><code>*(Elf32_Dyn **)((char *)&off_53EFF4 + (_DWORD)&loc_2A647D - 2778921)</code></pre> is a mess! And this kind of mess is all over the whole binary. The disassembly code for the pseudocode is:\n<pre><code>.text:002A6720 56                                                              push    esi\n.text:002A6721 57                                                              push    edi\n.text:002A6722 53                                                              push    ebx\n.text:002A6723 55                                                              push    ebp\n.text:002A6724 83 EC 2C                                                        sub     esp, 2Ch\n.text:002A6727 E8 00 00 00 00                                                  call    $+5\n.text:002A672C\n.text:002A672C                                                 loc_2A672C:                             ; DATA XREF: loadLibraryExt1+FD↓r\n.text:002A672C 5B                                                              pop     ebx\n.text:002A672D 8D 9B C8 88 29 00                                               lea     ebx, (off_53EFF4 - 2A672Ch)[ebx]\n.text:002A6733 83 BB 14 FF 1B 00 00                                            cmp     ds:(dword_466640 - 2A672Ch)[ebx], 0\n.text:002A673A 75 43                                                           jnz     short loc_2A677F\n.text:002A673C 8B B3 54 FD FF FF                                               mov     esi, dword ptr ds:(loc_2A647D+3 - 2A672Ch)[ebx]\n.text:002A6742 83 3E 03                                                        cmp     dword ptr [esi], 3\n.text:002A6745 75 0A                                                           jnz     short loc_2A6751\n.text:002A6747\n.text:002A6747                                                 loc_2A6747:                             ; CODE XREF: loadLibraryExt1+5D↓j\n.text:002A6747 33 C0                                                           xor     eax, eax\n.text:002A6749 83 C4 2C                                                        add     esp, 2Ch\n.text:002A674C 5D                                                              pop     ebp\n.text:002A674D 5B                                                              pop     ebx\n.text:002A674E 5F                                                              pop     edi\n.text:002A674F 5E                                                              pop     esi\n.text:002A6750 C3                                                              retn\n</code></pre>\n<pre><code>off_53EFF4</code></pre> locates at the start of <pre><code>.got.plt</code></pre> section, this pseudocode is hard to read, and it only exists in x86 but x86_64. Why does this happen? How to solve this?\n",
    "votes": "2",
    "answers": 0,
    "views": "116",
    "tags": [
        "ida",
        "hexrays"
    ],
    "user": "cong",
    "time": "Jun 23, 2022 at 7:14",
    "comments": [],
    "answers_data": []
}