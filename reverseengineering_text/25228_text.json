{
    "title": "How are single-player games made into multiplayer ones? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/25228/how-are-single-player-games-made-into-multiplayer-ones",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 4 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI was always curious about how some single-player games are turned into multiplayer ones. Some samples are SA-MP and MTA, that turn Grand Theft Auto: San Andreas into a multiplayer game.\nIn an infrastructure perspective, I know you might have a server that receives packets from a client and makes sure all the other clients receive these packets as well.\nFor example, whenever a player moves, the client sends a message to the server. The server then redirects the messages to each connected client. Each connected client updates the player's position.\nHowever, how the engineers can \"inject a code\" into the game to make it send a network packet to a server whenever a player moves? How can they \"inject a code\" into the game, so it listens to a network packet to react over it?\nThe \"inject a code\" term is between quotes because I don't even know if a code is really injected into the game. That's exactly what I'm curious about. Which techniques are used? How can this be possible?\nDo they hook into specific events to execute a custom code that performs networking communication? If so, could you guys elaborate that a bit further?\nI'm not planning to do so, and I have no prior experience with Reverse Engineering. I couldn't find anything on the Internet. Due to that, feel free to explain any \"basic concept\" as well. :) I'd like to understand as much as possible about it, and different opinions and perspectives are more than welcome.\n",
    "votes": "3",
    "answers": 0,
    "views": "252",
    "tags": [
        "function-hooking"
    ],
    "user": "Stanley Sathler",
    "time": "4 years ago",
    "comments": [
        {
            "user": "Trass3r",
            "text": "Well you can inject any kind of code you want, create new threads etc. Usually it's done via en.m.wikipedia.org/wiki/DLL_injection techniques. The hard part is finding all the game state in memory and all the functions involved with updating it.\n",
            "time": null
        },
        {
            "user": "Stanley Sathler",
            "text": "Thanks, @Trass3r! From what I understood by quickly reading about DLL Injection, you then create a small executable lib file that overrides the original process' functions. By overriding it, you're allowed to run your own code and then call the original process' function again. That said, I would need to find out WHICH functions are called whenever the - let's say - W key is pressed (in theory, it moves the player), intercept it, send a packet to a server, and then call the original process' function again, so the player is really moved. Is this reasoning right?\n",
            "time": null
        },
        {
            "user": "Trass3r",
            "text": "Yep it's called function hooking.\n",
            "time": null
        }
    ],
    "answers_data": []
}