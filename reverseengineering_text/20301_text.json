{
    "title": "Why dont use memcpy? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20301/why-dont-use-memcpy",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about reverse engineering within the scope defined in the help center.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nWhy using <pre><code>memcpy</code></pre> can cause to stack overFlow?\n<pre><code>memcpy</code></pre> get the number of bytes to copy, so what is the problem , and how <pre><code>memcpy_s</code></pre> fix it?\n",
    "votes": "-2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c",
        "buffer-overflow",
        "stack"
    ],
    "user": "Keystone",
    "time": "6 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "A buffer overflow happens when a program tries to write too much data into a buffer, or other data structure.  The extra data \"overflows\" the buffer writes over the data structure immediately following the buffer in memory.  memcpy allows you to specify the number of bytes to copy, but if that value varies, such as when it is dependent on user input, then your destination buffer might not be big enough. \n The wikipedia page has a good example.\nmemcpy_s has an additional parameter, where you can specify the destination buffer size.  This allows memcpy_s to perform additional checks on the input, and error if the number of bytes to copy is greater than the destination buffer size.\nFor a good introduction to exploit analysis, see this course material and videos.  Full disclosure: I am a contributor to that website, though not to that particular class material.\n",
            "votes": "1",
            "user": "knowmalware",
            "time": "Jan 8, 2019 at 0:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}