{
    "title": "Use GCC and objdump to disassemble any hex to assembly code",
    "link": "https://reverseengineering.stackexchange.com/questions/22223/use-gcc-and-objdump-to-disassemble-any-hex-to-assembly-code",
    "content": "What would be the best way (also fewer steps) to generate assembly code for a given hex code ? For e.g., if we know the architecture is x86, and given hex value 0x55, what is the best way to generate the disassembly using gcc, gdb, obdjump, or any other linux command line tools?\n",
    "votes": "1",
    "answers": 3,
    "views": "16k",
    "tags": [
        "disassembly",
        "gdb",
        "objdump",
        "gcc"
    ],
    "user": "tecMav",
    "time": "Oct 1, 2019 at 17:14",
    "comments": [
        {
            "user": "bart1e",
            "text": "The fastest way I know is to use this site although it’s not command line tool. \" It uses GCC and objdump behind the scenes.\" though.\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "the fastest for me: <pre><code>rasm2 -d -a x86 0x55</code></pre>\n",
            "time": null
        },
        {
            "user": "smitelli",
            "text": "Would it need to do much more than <pre><code>echo -ne \"\\x55\" | ndisasm -</code></pre> does?\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "reverseengineering.stackexchange.com/questions/17946/…\n",
            "time": null
        },
        {
            "user": "tecMav",
            "text": "Thank you all. Was hoping to do with just gcc and objdump. One thought was can I have binary data in the c or s file, compile them, and then be do a objdump to get the disassembly. Any thoughts in that line?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Linux binutils tools, such as <pre><code>objdump</code></pre>, <pre><code>gdb</code></pre> etc. rely on the BFD library, meaning they take well-formed ELF files, not arbitrary byte values or ASCII hex strings, as input. If you want to create your own <pre><code>libopcodes</code></pre>-based disassembler that does this, the following article will help you get started: Basic disassembly with libopcodes.\nGCC is a compiler toolchain, which performs preprocessing of the source file, translates source code to assembly, translates that to machine code, and then performs relocation via the link-editor, producing an ELF binary. It sounds like you are interested in going the other way, that is, disassembling object (binary) code. Therefore GCC is not relevant here.\nIf you want to disassemble individual bytes, you can use the Capstone disassembly framework's Python bindings to write scripts that disassemble the byte values that you specify. Here is an example:\n<pre><code>#!/usr/bin/python3\n\nfrom capstone import *\n\nCODE = b\"\\x55\"\n\nmd = md = Cs(CS_ARCH_X86, CS_MODE_32)\nfor i in md.disasm(CODE, 0x1000):\n    print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n</code></pre>\nThe output is <pre><code>0x1000:  push    ebp</code></pre>\nWhen we consult the x86 opcode table, we see that a value of 0x50 + the register = <pre><code>Push Word, Doubleword or Quadword Onto the Stack</code></pre>. So if we change <pre><code>0x55</code></pre> to <pre><code>0x54</code></pre> the output becomes <pre><code>0x1000:   push    esp</code></pre> - a different register is pushed. <pre><code>0x50</code></pre> = <pre><code>push    eax</code></pre>. And so forth.\nHere is a modified version of the above script:\n<pre><code>#!/usr/bin/python3\n\nfrom capstone import *\n\nCODE = b\"\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\"\n\nmd = md = Cs(CS_ARCH_X86, CS_MODE_32)\nfor i in md.disasm(CODE, 0x1000):\n    print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n</code></pre>\nThis prints\n<pre><code>0x1000: push    eax\n0x1001: push    ecx\n0x1002: push    edx\n0x1003: push    ebx\n0x1004: push    esp\n0x1005: push    ebp\n0x1006: push    esi\n0x1007: push    edi\n</code></pre>\n",
            "votes": "3",
            "user": "julian",
            "time": "Aug 28, 2021 at 20:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "tecMav",
                    "text": "<span class=\"comment-copy\">Thanks. Was hoping to do with just gcc and objdump. One thought was can I have binary data in the c or s file, compile them, and then be do a objdump to get the disassembly. Any thoughts in that line?</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@tecMav .c and .s files are source files containing ASCII characters. Binary data cannot be compiled or assembled, since the compiler and assembler parses source ASCII text. You may be able to encode the binary data using ASCII characters, store the data in an array, and then compile or assemble the file.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can do this using objdump:\n<pre><code>echo 0000: b0 55 15 de ad f1 55 | xxd -r > x.bin\nobjdump -D -m i386  -b binary x.bin\n</code></pre>\n",
            "votes": "2",
            "user": "Willem Hengeveld",
            "time": "Mar 6, 2020 at 10:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "this is a very late answer as this query popped up into the active queue\nthis answer is also partly due the comment BY OP after my comment to his query\nif one can escape the hex one can compile a data-array\nand dump the Disassembly of the objectfile using just objdump  \nusing mingw (look for disassembly of boss is dead fiss below in .rdata section)\n<pre><code>$ ls\ngccdis.cpp\n\n$ cat gccdis.cpp\nconst char *input = \"\\xb0\\x55\\x15\\xde\\xad\\xf1\\x55\";\nint main () {\n   return 0;\n}\n\n$ gcc -g -c gccdis.cpp\n\n$ ls\ngccdis.cpp  gccdis.o\n\n$ objdump --disassemble-all --section=.rdata -M intel gccdis.o\n\ngccdis.o:     file format pe-i386    \nDisassembly of section .rdata:\n\n00000000 <.rdata>:\n   0:   b0 55                   mov    al,0x55\n   2:   15 de ad f1 55          adc    eax,0x55f1adde\n        ...\n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "Mar 1, 2020 at 19:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}