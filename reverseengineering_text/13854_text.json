{
    "title": "Attach Shared Object to android process with IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/13854/attach-shared-object-to-android-process-with-ida",
    "content": "I am:\n\nworking with an Android game,\nusing an Android Emulator,\nand trying to attach an android <pre><code>.so</code></pre> library to a process.\n\nI have the whole IDA server set up, I can attach to processes when a <pre><code>classes.dex</code></pre> is loaded into IDA but, when I load the <pre><code>.so</code></pre> file and try to attach, I get this message from IDA\n\nThe debugger could not attach to the selected process.\nThis can perhaps indicate the process was terminated, or you don't have the necessary privileges.\n\nI see a problem with this because I have full root permission and I know for sure the process was not terminated.\nI read here that I may have to recompile the entire Android kernel, don't get me wrong, I love wasting hours compiling, but I was just wondering if you guys can help me find something to solve this pesky little situation of mine.\nEdit: This may be a dup but the dup wasn't answered and was from 2014. :/\n",
    "votes": "7",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "debugging",
        "android",
        "shared-object"
    ],
    "user": "Frenchy Fry",
    "time": "Oct 29, 2021 at 7:31",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Could you share / explain what the so is doing?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "OK, I'm not 100% sure what you're saying, but it SOUNDS like you're saying that you load the <pre><code>.SO</code></pre> into IDA, and then you're trying to attach to it.\nWell, the <pre><code>.SO</code></pre> isn't a PROCESS per se.  It's just a library loaded dynamically by something else.  What you probably need to do, is to load the game/application that USES that <pre><code>.SO</code></pre>, and set a breakpoint at the location where it calls the function(s) that you're interested in, and then just single step into the <pre><code>.SO</code></pre> to see what's going on.\n",
            "votes": "1",
            "user": "MarianD",
            "time": "Aug 13, 2021 at 13:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If\n<pre><code>cat /proc/kmsg | grep \"Restricted\"\n</code></pre>\nreturns results that are similar to ones in the blog you linked, then indeed <pre><code>CONFIG_SEC_RESTRICT_FORK</code></pre> is set and the only way to get rid of it is to recompile the kernel\n",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Nov 4, 2016 at 7:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Frenchy Fry",
                    "text": "<span class=\"comment-copy\">I used the command both in ADBs shell and a Terminal emulator app and neither of them returned anything. This is really strange, that's why I asked you guys. Are there any other confounding variables that may be effecting this?</span>",
                    "time": null
                }
            ]
        }
    ]
}