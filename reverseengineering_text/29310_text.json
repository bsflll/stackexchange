{
    "title": "When patching static software, is there a preferred patching strategy?",
    "link": "https://reverseengineering.stackexchange.com/questions/29310/when-patching-static-software-is-there-a-preferred-patching-strategy",
    "content": "Suppose you have something like this (in x86-like asm)\n<pre><code>10 | mov ebx 1 // good response from function \"check\" below\n20 | call check() // modifies eax\n30 | test eax ebx\n40 | jeq good\n50 | bad:   call lose()\n60 | jmp finish\n70 | good:  call win()\n80 | finish:    push/pop stuff from stack\n90 | retn 0\n</code></pre>\nSuppose I want to modify the logic so that it always executes some <pre><code>win()</code></pre>. From what we have, there are multiple ways to accomplish this. Here are strategies I can see:\n\nNOP 10-60 (but then maybe important registers/stack are not set because <pre><code>check()</code></pre> isn't called as well as registers/stack may not be set properly)\n30 - make it <pre><code>test eax eax</code></pre> or something along these lines. Seems like a solid way, but isn't it then better to do (3)\n40 - make jump unconditional. This is what I do currently, but I wonder if the CPU overhead (for things like <pre><code>30 | test eax ebx</code></pre> are acceptable)\n50 or 60 - make either perform <pre><code>jmp good</code></pre> -- seems  like the destructive/potentially crash inducing approach due to registers/stack being already pre-set for lose() function\nCreate a ROP chain/inject my own logic to just call win() -- isn't it too much for this situation?\nmodify <pre><code>10 | mov ebx 1</code></pre> to be set to <pre><code>0</code></pre> -- but then in case <pre><code>win()</code></pre> should be called, it won't be\n\nI wonder if there is a standard strategy recommended for patching like this.\n",
    "votes": "0",
    "answers": 1,
    "views": "88",
    "tags": [
        "binary",
        "assembly"
    ],
    "user": "TAbdiukov",
    "time": "Sep 20, 2021 at 5:27",
    "comments": [
        {
            "user": "blabb",
            "text": "mov ebx,0 ; jq good maybe ?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The better solution (on my opinion) is\n\nthe simpler,\nless influencing other program logic,\nprovides length equality of opcodes you want to replace and those you want to insert.\n\nBy my experience the less painful way is to switch conditional jump (<pre><code>je</code></pre>) to unconditional <pre><code>jmp</code></pre>, as opcodes are always the same length (<pre><code>74 0a</code></pre> vs <pre><code>eb 0a</code></pre>):\n<pre><code>;addr  opcode                  instruction\n0:     bb 01 00 00 00          mov    ebx,0x1\n5:     e8 00 00 00 00          call   sub_check\na:     85 d8                   test   eax,ebx\nc:     74 0a                   je     18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00          call   sub_lose\n13:    e9 00 00 00 00          jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00          call   sub_win\n</code></pre>\nand\n<pre><code>;addr  opcode               instruction\n0:     bb 01 00 00 00       mov    ebx,0x1\n5:     e8 00 00 00 00       call   sub_check\na:     85 d8                test   eax,ebx\nc:     eb 0a                jmp    18 <good>\n000000000000000e <bad>:\ne:     e8 00 00 00 00       call   sub_lose\n13:    e9 00 00 00 00       jmp    18 <good>\n0000000000000018 <good>:\n18:    e8 00 00 00 00       call   sub_win\n</code></pre>\n",
            "votes": "1",
            "user": "Ornstein89",
            "time": "Sep 29, 2021 at 17:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}