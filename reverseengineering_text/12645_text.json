{
    "title": "Automated static code analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/12645/automated-static-code-analysis",
    "content": "Both IDA Pro and OllyDBG automatically analyze the binary on load to identify whats code and data. I assume its a complicated process and I would like to learn more about this process.\nHow is this process refered to and are you guys aware of any resources about this subject?\nI also composed a list of interesting information that can be read from the executable (taken from IDA Pro). Anything to add?\n\nNames\nFunctions\n\n\nImports\nExports\n\nStrings\nStructures\nEnums\nSegments\nSignatures (To identify the compiler)\n",
    "votes": "-1",
    "answers": 1,
    "views": "395",
    "tags": [
        "ida",
        "ollydbg"
    ],
    "user": "Pim Reijersen",
    "time": "May 12, 2016 at 14:19",
    "comments": [],
    "answers_data": [
        {
            "content": "This is answered at length in The IDA PRO Book by Chris Eagle.\nIn particular, the entire first chapter is dedicated to this topic.\nI would highly recommend purchasing a copy:\nhttps://www.nostarch.com/idapro2.htm\nThe electronic version is excellent for searching things like this.\nOutside of the book, I would recommend consulting this StackExchange question, which discusses Recurisve Descent dissassembly:\nWhat is the algorithm used in Recursive Traversal disassembly?\n",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "May 13, 2016 at 23:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}