{
    "title": "STM32 - Disable Voltage Check",
    "link": "https://reverseengineering.stackexchange.com/questions/30565/stm32-disable-voltage-check",
    "content": "I'm planning to edit the binary Firmware for an STM32F030K6T6 ARM microcontroller used in the IKEA Fyrtur blinds. In particular I'm trying to\n\ndisable the Voltage check (allow alternative power source)\nincrease the max length, aka max motor rotation (allow longer blinds)\ndecrease the operating speed (reduce noise)\n\nThere exists a custom firmware already that does this (and a lot more). Unfortunately it is very buggy, so I've decided to investigate modifying the original firmware.\nI've used radare2 to decompile the binary, following this guide, but I'm unable to identify the relevant parts in the code.\nI think that, using the custom firmware as a reference, we should at least be able to figure out where the Voltage is being read and what happens with it. The custom firmware also includes the default values for the three settings I want to edit.\nI'm looking for some resources and a structured approach here as I am new to using radare2 and decompilation of arm instructions. Are there some plugins / other tools that I should be using?\n\nHere are details on how to reproduce what I've done so far (using docker):\n\nDownload binary with <pre><code>wget https://github.com/dominikkarall/fyrtur-motor-board/raw/main/bin/original-fyrtur-fw.bin</code></pre> (alternatively can be dumped from the IKEA Blinds)\nStart radare2 docker container with <pre><code>docker run --net host -v $(pwd):/user/project -w /user/project -it --entrypoint /bin/bash radare/radare2</code></pre>\nIn docker container start radare2 with <pre><code>r2 -a arm -b 16 -m 0x80000000 -w original-fyrtur-fw.bin</code></pre>\nAnalyze and decompile with\n\n<pre><code>aaaa\npdf @@ fcn* > pdf.txt\npdc @@ fcn* > pdc.txt\n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "radare2",
        "arm"
    ],
    "user": "vincent",
    "time": "Jun 28, 2022 at 4:31",
    "comments": [
        {
            "user": "popy",
            "text": "Nice idea! My first priority is changing the speed For my binary changes on the fyrtur cfw posted on github, i think i have used ghidra which is able to decompile arm code. Will also take look at it when i find time. Did you made any progress which you can share with us? popy2k14\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use iaito to use the radar more easily. I also recommend cutter.\nBut for reverse engineering, I suggest not to rely on tools. You have to look for clues.\nFor example, follow input pins and interrupts.For this, you can write a simple code for this processor. Then analyze its .out file. Now look for similar events in your firmware.\nFor example, define some pins that controls the motor in your project and find it inside your .out file.\nNow try to find the same pin inside the main firmware.\n",
            "votes": "1",
            "user": "Unicornux",
            "time": "Jul 4, 2022 at 8:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}