{
    "title": "Has XOR EAX, EBX another purpose?",
    "link": "https://reverseengineering.stackexchange.com/questions/4649/has-xor-eax-ebx-another-purpose",
    "content": "I have the following line in an assembler code:\n<pre><code> XOR EAX, EBX\n</code></pre>\nSo, then I've searched a little bit and found out that XOR represents a \"swap algorithm\". You can read it here: http://en.wikipedia.org/wiki/XOR_swap_algorithm\nBut when I look in register window of ollydbg, then I have the following \n<pre><code> EAX = 00000068\n EBX = 0000003B\n</code></pre>\nNow, after the line the register window says\n<pre><code>EAX = 000000053\nEBX = 0000003B\n</code></pre>\nBut from that what I have read in wikipedia article I would expect the following\n<pre><code>EAX = 0000003B\nEBX = 00000053\n</code></pre>\nAt the end, i can say that a normal XOR operation is performed because:\n<pre><code>0111011   =>EAX=0000003B \n1101000   =>EBX=00000068\n-------\n1010011   =>EAX=00000053\n</code></pre>\nSo my question would be why the swap algorithm is not performed. Or in other words: When can I expect the swap algorithm?\n",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Jun 20, 2014 at 14:44",
    "comments": [
        {
            "user": "phuclv",
            "text": "the instruction for swapping data is <pre><code>xchg</code></pre>, not <pre><code>xor</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As the first answer states, XOR is a bitewise XOR, not an XOR swap. \nTo do the Xor swap that you referenced from wikipedia it takes 3 instructions : \n<pre><code>xor eax, ebx\nxor ebx, eax\nxor eax, ebx\n</code></pre>\nSince you asked about the purpose of XOR I thought I would include some other concepts for you to read up on, so you might have an idea of what to expect from XORs\nYou can use XOR to clear a register: \n<pre><code>xor eax,eax\n</code></pre>\nCalculate absolute value: \n<pre><code>cdq\nxor eax,edx\nsub eax,edx\n</code></pre>\nXORs can be used for Crypto:\nhttp://en.wikipedia.org/wiki/XOR_swap_algorithm\nXORs are used in the CRC checksum algorithm:\nhttp://en.wikipedia.org/wiki/Cyclic_redundancy_check\nXORs can be used to calculate Gray codes:\nhttp://www.morkalork.com/mork/article/74/How_to_understand_and_use_Gray_code.htm#.U6RhN_ldXvI\nThis is just the tip of the iceberg. The instruction can be used in a large number of situations.\n",
            "votes": "13",
            "user": "MrSynAckSter",
            "time": "Jun 20, 2014 at 16:33",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The <pre><code>XOR</code></pre> mnemonic does not represent an XOR swap; it represents a bitwise XOR.\n",
            "votes": "11",
            "user": "Jason Geffner",
            "time": "Jun 20, 2014 at 14:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}