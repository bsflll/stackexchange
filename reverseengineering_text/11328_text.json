{
    "title": "Configure and execute Intel's PIN Tool",
    "link": "https://reverseengineering.stackexchange.com/questions/11328/configure-and-execute-intels-pin-tool",
    "content": "I am trying to develop a Pintool on Windows. But so far I have been unable to configure or execute PIN. I have Microsoft Visual Studio 10.0 installed on my system. I have also downloaded and unzipped pin from its website. \nOn windows, \"pin\" command needs \".dll\" file of pintool to execute. Suppose I want to execute \"icount.cpp\" on \"prog1.exe\". How can I do this?\nHow can I use Visual Studio to develop my own tools? I have gone through tutorials and I know what to writ, but I am not getting where and how to start?\nThanks you in advance.\n",
    "votes": "3",
    "answers": 3,
    "views": "3k",
    "tags": [
        "dynamic-analysis",
        "instrumentation",
        "pintool"
    ],
    "user": "Anurag",
    "time": "Nov 15, 2015 at 8:27",
    "comments": [],
    "answers_data": [
        {
            "content": "The fastest and less cumbersome way I know is to make a copy of <pre><code>MyPinTool</code></pre> directory (under <pre><code><pin dir>\\source\\tools\\</code></pre> and overwrite the file <pre><code>MyPinTool.cpp</code></pre> with your own code.\nOpen the <pre><code>MyPinTool.sln</code></pre> in Visual Studio and build your target. After that you can rename the DLL to whatever you want.\nIt is not an elegant solution but it gets the job done. In the end, you want to spent your time writing your <pre><code>PinTool</code></pre> and not annoyed with compiler specific settings...\n",
            "votes": "4",
            "user": "Carlos Garcia",
            "time": "Feb 10, 2016 at 14:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Carlos's answer is more of a workaround, but it's so much spot on. Getting all the right knobs right is an insane job. And even more so with version 3 that switched away from whatever native runtime the OS may have, and started to use their own. \nAfter half a day reversing the examples, I could come up with this (I'm assuming a 64 bit Windows target, but it shouldn't be difficult to notice what's architecture specific)\nFirst of all you should get the include folders right (make sure to set PIN_ROOT in the first place though)\n<pre><code>$(PIN_ROOT)\\source\\include\\pin;$(PIN_ROOT)\\source\\include\\pin\\gen;$(PIN_ROOT)\\source\\tools\\InstLib;$(PIN_ROOT)\\extras\\xed-intel64\\include\\xed;$(PIN_ROOT)\\extras\\components\\include;$(PIN_ROOT)\\extras\\stlport\\include;$(PIN_ROOT)\\extras;$(PIN_ROOT)\\extras\\libstdc++\\include;$(PIN_ROOT)\\extras\\crt\\include;$(PIN_ROOT)\\extras\\crt;$(PIN_ROOT)\\extras\\crt\\include\\arch-x86;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi;$(PIN_ROOT)\\extras\\crt\\include\\kernel\\uapi\\asm-x86;\n</code></pre>\nThen, set these flags in the compiler: <pre><code>/MT /GR- /GS- /EHs- /EHa- /fp:strict /Oi- /FIinclude/msvc_compat.h</code></pre>\nAnd these defines for the preprocessor: <pre><code>TARGET_IA32E;HOST_IA32E;TARGET_WINDOWS;WIN32;__PIN__=1;PIN_CRT=1;__LP64__</code></pre> (please, really pay attention to the first two.. IA32E means x86-64 and their wrong combination can lead to countless ungodly issues with symbols and whatnot).\nRemember that with the exception of like 3 headers ([xmm]intrin.h and somewhat limitedly windows.h) you cannot use any other one outside of pintool. \nNext there is the linker. You need these folders \n<pre><code>$(PIN_ROOT)\\intel64\\lib;$(PIN_ROOT)\\intel64\\lib-ext;$(PIN_ROOT)\\extras\\xed-intel64\\lib;$(PIN_ROOT)\\intel64\\runtime\\pincrt;\n</code></pre>\nand these libraries, in the absolutest correct order (<pre><code>/NODEFAULTLIB</code></pre> is recommended)\n<pre><code>pin.lib;xed.lib;pinvm.lib;kernel32.lib;pincrt.lib;ntdll-64.lib;crtbeginS.obj\n</code></pre>\n(<pre><code>stlport-static.lib</code></pre>, <pre><code>m-static.lib</code></pre>, <pre><code>c-static.lib</code></pre> and <pre><code>os-apis.lib</code></pre> may also be needed in more complex situations)\nLast but not least, you should add <pre><code>/export:main /SAFESEH:NO /IGNORE:4210 /IGNORE:4049</code></pre> to the linker command line. For anything else give a check to the PinCRT whitepaper, whose reading I cannot recommend enough.\n",
            "votes": "2",
            "user": "mirh",
            "time": "Apr 11, 2020 at 16:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mahmoud Abdelkader",
                    "text": "<span class=\"comment-copy\">FYI, as of Pin 3.19, pinvm.lib and ntdll-64.lib are no longer needed. I think stlport-static.lib may no longer be needed either.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I was able to find a blog which helped me configure Visual Studio 10 to develop my own tools. Here is the link to blog . The steps mentioned are generalized. But one thing I observed was that few directory names were different in my Pin installation. So please keep in mind to update those names. For some weird reasons I had to add \"\\LIBPATH:(path to additional library directories)\" variable to Command Line Linker Options. \nAlso in the beginning of each cpp file mention \n\n#define _SECURE_SCL 0\n\nOne common error you may face is \"Error:LNK1104:Cannot open file* **\". You can refer to this link to solve the issue.\nEDIT: To execute the PIN tool:\nBuild the solution in Release configuration. I have extracted PIN inside my solution directory itself. Go to directory where pin.exe exists. Execute command in below format in command prompt:\n\npin -t [location (with file name) of solution DLL in release direcroty] -- [location (with file name) of application to execute]\n\nHope this will be helpful for anyone facing this issue in future.\n",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}