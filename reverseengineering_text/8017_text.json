{
    "title": "Extracting HTTPS packets before encryption",
    "link": "https://reverseengineering.stackexchange.com/questions/8017/extracting-https-packets-before-encryption",
    "content": "Say we have a Windows application, which sends some packets over HTTPS. We need to extract the content of this packets (unencrypted of course).\nThere is no way to get hands on server private certificate and MitM attack doesn't work (some MitM defense is used by this application). So, decryption seems to be off the table.\nThe only choice (I suppose) is to extract these packets from the application before they get encrypted. Application is well protected, it has no dependency on OpenSSL DLLs. However, we have a certain feeling that it uses OpenSSL (but, statically linked, may be OpenSSL source was even modified before compiling/linking).\nHooking a call to OpenSSL functions (like <pre><code>ssl_write()</code></pre>) is not simple, because the application's executable is packed and obfuscated. It also has a debugging protection, but a stealth debugger, which avoid this defense, is already found. So, we can debug this application. However, the code, as seen during debugging, is a complete mess (obfuscated). Even the system DLLs, being loaded by this application, are completely messed. Here is an example of how the <pre><code>send()</code></pre> function from <pre><code>WS2_32.dll</code></pre> looks like during debugging of this application. For reference, here is how it looks like from normal (unprotected) application. So, it's very hard to understand how the function arguments are passed, moreover it looks like they can be passed via different ways (not sure, but looks so according debugging experiments).\nThis seems to be a quite common task, since there are many Windows applications which use HTTPS and statically linked OpenSSL.\nHopefully somebody have such experience and can share it.\n",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "dll-injection",
        "https-protocol"
    ],
    "user": "McTraher",
    "time": "Feb 15, 2015 at 23:43",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "except that one is x86_64, and the other i386 code, it does not seem obfuscated to me, that send function.\n",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "maybe what you missed, as that some compilers reverse stack space first, then move arguments to the stack, instead of pushing.\n",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "... i mean 'reserve',  not reverse.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since you are want to bypass HTTPS encryption, why not use Fiddler?\nFiddler is a web debugging proxy that auto-sets itself as the system proxy. It also offers the option to install a self-signed root certificate at the system, so HTTPS sniffing can be done.\nAll you have to do is start Fiddler, go to Tools -> Fiddler Optios -> HTTPS tab -> check \"Decrypt HTTPS traffic\".\nAfter that click yes in the dialogs asking if it is ok to install the root certificate as trusted and you are good to go (if I am not mistaken Fiddler also needs to be restarted for this to work).\nThen, all HTTPS traffic from the computer running fiddler will be available to inspect in the respective tab of the application.\n",
            "votes": "1",
            "user": "The Dart Code",
            "time": "Jan 15, 2015 at 13:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Filipe YaBa Polido",
                    "text": "<span class=\"comment-copy\">The author says MiTM don't work with his app. I also have some apps/sites that won't work with fiddler enabled.</span>",
                    "time": null
                },
                {
                    "user": "The Dart Code",
                    "text": "<span class=\"comment-copy\">Maybe try to patch the app with ImmunityDebugger so that it does not check for Fiddler ?</span>",
                    "time": null
                },
                {
                    "user": "McTraher",
                    "text": "<span class=\"comment-copy\">I tried Fiddler. I don't think that app checks if Fiddler is running. Instead it just uses certificate pinning or may be just have a certificate hard-coded inside it. So, it doesn't work with Fiddler's certificate. If Fiddler is enabled, but HTTPS decryption is disabled there (and Fiddler's certificate is not installed into system), the app works and Fiddler shows the packets (encrypted though, so no help).</span>",
                    "time": null
                },
                {
                    "user": "graywolf",
                    "text": "<span class=\"comment-copy\">maybe it would be simpler to find out how/where the pinned cert is stored and override that so fiddler could be used?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Maybe some of the following tools may help you:\n\n\"SSLHOOK is a Win32 DLL that allows hooking of the OpenSSL functions SSL_read and SSL_write\"\nhttps://github.com/strobejb/sslhook\nImmunity Debugger (immdbg) has the !hookssl command (hookssl.py)\n",
            "votes": "1",
            "user": "Jonas Lejon",
            "time": "Jan 16, 2015 at 22:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "McTraher",
                    "text": "<span class=\"comment-copy\">Thank you. I'll take a look, but if that's DLL hooking, it won't help, since, as I said, this application doesn't use OpenSSL as DLL, but instead it's just compiled with OpenSSL source (i.e. statically linked, not Dinamically Linked).</span>",
                    "time": null
                },
                {
                    "user": "McTraher",
                    "text": "<span class=\"comment-copy\">I knew about <a href=\"https://github.com/strobejb/sslhook\" rel=\"nofollow noreferrer\">github.com/strobejb/sslhook</a> it works against statically linked OpenSSL, but it's hard to use, because the application's binary is packed. And not just packed, but also uses complicated plugin technique.</span>",
                    "time": null
                },
                {
                    "user": "McTraher",
                    "text": "<span class=\"comment-copy\">Immunity Debugger looks promising, but, unfortunately, it closes right after start on my PC :(</span>",
                    "time": null
                }
            ]
        }
    ]
}