{
    "title": "How to tell when Cor20 starts for DLL's that are supposed to meet ECMA-335?",
    "link": "https://reverseengineering.stackexchange.com/questions/19875/how-to-tell-when-cor20-starts-for-dlls-that-are-supposed-to-meet-ecma-335",
    "content": "When I look at a .Net compiled DLL that is supposed to conform to ECMA-335, I see the PE Header well defined up to 0x1EF, but there seems to be block between 0x1F0 and 0x208 which is mainly 00's that is not referenced in the spec, the closest I get to is thinking it's the IT or IAT, but the document says it should be 40bytes long not the 28 I see.\nThe specific version of the DLL's CB is Major 2, Minor 5 - which is also missing from the spec. \nAny thoughts? Or pointers to research content, please?\n",
    "votes": "1",
    "answers": 0,
    "views": "38",
    "tags": [
        "decompilation",
        "pe",
        ".net"
    ],
    "user": "Hmm Right",
    "time": "Nov 12, 2018 at 12:39",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "40 decimal is 0x28 in hex, could this be the source of misunderstanding?\n",
            "time": null
        },
        {
            "user": "Hmm Right",
            "text": "It's possible that the author of ECMA-335 got confused.  When I look at the DLL with some tools, it looks like they jump the 12 bytes.\n",
            "time": null
        }
    ],
    "answers_data": []
}