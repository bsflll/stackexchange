{
    "title": "Pointer to a structure and TEST operation",
    "link": "https://reverseengineering.stackexchange.com/questions/6218/pointer-to-a-structure-and-test-operation",
    "content": "I have the following assembly line \n<pre><code> test byte ptr [esp + 44h], 1\n jmp SomeCode; \n .....\n</code></pre>\nfrom a further analysis, I know that esp points at wShowWindow of the STARTUPINFO structure. \nI have written the following: \n<pre><code>STARTUPINFO *esp_pointer;\nesp_pointer -> wShowWindow; \nif(*(esp_pointer) != 1){\n    SomeCode;\n}\n</code></pre>\nIs that a right transformation in C ? What do you mean?\nbest regards,\n",
    "votes": "0",
    "answers": 1,
    "views": "133",
    "tags": [
        "assembly"
    ],
    "user": "user3097712",
    "time": "Sep 10, 2014 at 17:41",
    "comments": [
        {
            "user": "blabb",
            "text": "esp_pointer -> wShowWindow is located at 0x30 0r 0n48 not at either 0x44 or at 0n44  you have some wrong analysis also when doing STARTUPINFO *esppointer you need to allocate space for the struct with some malloc etc prior to accessing members else you end up with a crash      STARTUPINFOA *psi = ( STARTUPINFOA * ) calloc(1,sizeof(STARTUPINFOA));     psi->cb = sizeof(STARTUPINFO);     if(psi->wShowWindow )     {         printf(\"foo\");     }\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Don't try to translate assembly to C line by line. You can't.\nThe assembly you posted is probably wrong. A <pre><code>jmp</code></pre> is an unconditonal jump; what follows after a <pre><code>test</code></pre> instruction is normally a <pre><code>jz</code></pre> or <pre><code>jnz</code></pre> which jump depending on the result of the test.\nYou say <pre><code>esp</code></pre> points at <pre><code>wShowWindow</code></pre>. That would mean <pre><code>[esp+44h]</code></pre> points at something way behind the structure, which makes no sense. Maybe what you wanted to say is \"I know i have a <pre><code>STARTUPINFO</code></pre> structure on the stack at 14h, so <pre><code>[esp+44h]</code></pre> should be the <pre><code>wShowWindow</code></pre> component\" ?\nIf you're right with <pre><code>STARTUPINFO</code></pre> somewhere on the stack - it can't be directly at <pre><code>[esp]</code></pre>, as mentioned -  please make sure <pre><code>[esp+44h]</code></pre> is <pre><code>wShowWindow</code></pre>, not <pre><code>dwFlags</code></pre>, as the <pre><code>test</code></pre> operation would make much more sense with the <pre><code>dwFlags</code></pre> bitmap than an integer.\n\nAll that said, <pre><code>test</code></pre> tests if a bit is set; a compare would be a <pre><code>cmp</code></pre>. So if you really really want an example in C, it would look something like\n<pre><code>STARTUPINFO p;\np=(STARTUPINFO *) ((char *) esp+0x14);   // this assumes the structure starts \n                                         // at offset 0x14 from esp\nif (p->wShowWindow & 1) {                // access the wShowWindow component at offset\n                                         // 0x30 in the structure, which is 0x44 from esp\n    ....\n}\n</code></pre>\nNote i didn't include the <pre><code>SomeCode</code></pre>, as the \"jump there\" might just mean \"skip some instructions\", and your unconditional jump seems to be wrong anyways.\nPlease, when posting a question next time, be a bit more precise in what you ask and what you copy/paste.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Sep 11, 2014 at 7:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}