{
    "title": "What are the main features of radare2?",
    "link": "https://reverseengineering.stackexchange.com/questions/1842/what-are-the-main-features-of-radare2",
    "content": "Radare2 is a framework for reverse-engineering gathering several tools (see this Phrack article about radare1 to know a bit more about the framework).\nI would like to know if someone could point out the main useful features of the framework for reverse engineering ? And, particularly what makes radare2 different from other tools or frameworks ?\n",
    "votes": "11",
    "answers": 1,
    "views": "3k",
    "tags": [
        "tools",
        "binary-analysis",
        "radare2"
    ],
    "user": "perror",
    "time": "Apr 18, 2013 at 9:34",
    "comments": [],
    "answers_data": [
        {
            "content": "from its feature page:\n\nMulti-architecture and multi-platform\n\nGNU/Linux, Android, *BSD, OSX, iPhoneOS, Windows{32,64} and Solaris\nx86{16,32,64}, dalvik, avr, arm, java, powerpc, sparc, mips, bf, csr, m86k, msil, sh\npe{32,64}, [fat]mach0{32,64}, elf{32,64}, te, dex and java classes\n\nHighly scriptable\n\nVala, Go, Python, Guile, Ruby, Perl, Lua, Java, JavaScript, sh, ..\nbatch mode and native plugins with full internal API access\nnative scripting based in mnemonic commands and macros\n\nHexadecimal editor\n\n64bit offset support with virtual addressing and section maps\nAssemble and disassemble from/to many architectures\ncolorizes opcodes, bytes and debug register changes\nprint data in various formats (int, float, disasm, timestamp, ..)\nsearch multiple patterns or keywords with binary mask support\nchecksumming and data analysis of byte blocks\n\nIO is wrapped\n\nsupport Files, disks, processes and streams\nvirtual addressing with sections and multiple file mapping\nhandles gdb:// and rap:// remote protocols\n\nFilesystems support\n\nallows to mount ext2, vfat, ntfs, and many others\nsupport partition types (gpt, msdos, ..)\n\nDebugger support\n\ngdb remote and brainfuck debugger support\nsoftware and hardware breakpoints\ntracing and logging facilities\n\nDiffing between two functions or binaries\n\ngraphviz friendly code analysis graphs\ncolorize nodes and edges\n\nCode analysis at opcode, basicblock, function levels\n\nembedded simple virtual machine to emulate code\nkeep track of code and data references\nfunction calls and syscall decompilation\nfunction description, comments and library signatures\n",
            "votes": "15",
            "user": "Anton Kochkov",
            "time": "Apr 20, 2013 at 13:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}