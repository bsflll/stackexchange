{
    "title": "How should i read this assembly? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/14498/how-should-i-read-this-assembly",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nhow should I read this and what does it do?\n\n.text:00400526 (main):\n.text:00400526 55                               push   %rbp\n.text:00400527 48 89 e5                         mov    %rsp,%rbp\n.text:0040052a 48 83 ec 20                      sub    $0x20,%rsp\n.text:0040052e 48 b8 4d 61 73 73 69 76 6e 69    movabs $0x696e76697373614d,%rax\n.text:00400538 48 89 45 e0                      mov    %rax,-0x20(%rbp)\n.text:0040053c 48 b8 79 20 6d 61 73 73 69 76    movabs $0x76697373616d2079,%rax\n.text:00400546 48 89 45 e8                      mov    %rax,-0x18(%rbp)\n.text:0040054a c7 45 f0 00 00 00 00             movl   $0x0,-0x10(%rbp)\n.text:00400551 c7 45 fc 00 00 00 00             movl   $0x0,-0x4(%rbp)\n.text:00400558 eb 22                            jmp    0x0040057c\n.text:0040055a 8b 45 fc                         mov    -0x4(%rbp),%eax\n.text:0040055d 48 98                            cltq   \n.text:0040055f 0f b6 44 05 e0                   movzbl -0x20(%rbp,%rax,1),%eax\n.text:00400564 0f be c0                         movsbl %al,%eax\n.text:00400567 89 c6                            mov    %eax,%esi\n.text:00400569 bf 24 06 40 00                   mov    $0x400624,%edi\n.text:0040056e b8 00 00 00 00                   mov    $0x0,%eax\n.text:00400573 e8 88 fe ff ff                   callq  0x00400400\n.text:00400578 83 45 fc 01                      addl   $0x1,-0x4(%rbp)\n.text:0040057c 8b 45 fc                         mov    -0x4(%rbp),%eax\n.text:0040057f 83 f8 14                         cmp    $0x14,%eax\n.text:00400582 76 d6                            jbe    0x0040055a\n.text:00400584 be 14 00 00 00                   mov    $0x14,%esi\n.text:00400589 bf 28 06 40 00                   mov    $0x400628,%edi\n.text:0040058e b8 00 00 00 00                   mov    $0x0,%eax\n.text:00400593 e8 68 fe ff ff                   callq  0x00400400\n.text:00400598 b8 00 00 00 00                   mov    $0x0,%eax\n.text:0040059d c9                               leaveq \n.text:0040059e c3                               retq   \n.text:0040059f 90                               nop\n",
    "votes": "-3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "user3546656",
    "time": "8 years ago",
    "comments": [
        {
            "user": "w s",
            "text": "What exactly are you don't understand ? It looks pretty approachable.\n",
            "time": null
        },
        {
            "user": "user3546656",
            "text": "Oh, Im new to assembly, i was wondering how should i go about reading it, im not sure if im doing it right but from what i see, it is subtracting 20 to %rsp moving $0x696e76697373614d to to %rax and subtracting 20 to rax? i started to get confused around text 00400538\n",
            "time": null
        },
        {
            "user": "JAL",
            "text": "This is really more of a general assembly language programming question rather than a reverse engineering question.  What exactly are you having trouble with.\n",
            "time": null
        },
        {
            "user": "Hashim Aziz",
            "text": "It sounds like the problem OP is having is that he doesn't understand the assembly language, and his question \"how should you read this\" basically translates to \"please tell me what this does\". I'm not sure, but I think that's outside the remit of Reverse Engineering.\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "@user3546656 have you tried using a debugger like <pre><code>gdb</code></pre> to step through and examine the instructions?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Instead of trying to read the raw disassembly, get a decompiler reconstruct the near-perfect source for you. Since the function is small, a capable decompiler will produce satisfactory result.\nStep 1\nSave the disassembly above in a file called <pre><code>asm</code></pre>. Delete the first line while copying.\n<pre><code>.text:00400526 55                               push   %rbp\n.text:00400527 48 89 e5                         mov    %rsp,%rbp\n.text:0040052a 48 83 ec 20                      sub    $0x20,%rsp\n.text:0040052e 48 b8 4d 61 73 73 69 76 6e 69    movabs $0x696e76697373614d,%rax\n.text:00400538 48 89 45 e0                      mov    %rax,-0x20(%rbp)\n.text:0040053c 48 b8 79 20 6d 61 73 73 69 76    movabs $0x76697373616d2079,%rax\n.text:00400546 48 89 45 e8                      mov    %rax,-0x18(%rbp)\n.text:0040054a c7 45 f0 00 00 00 00             movl   $0x0,-0x10(%rbp)\n.text:00400551 c7 45 fc 00 00 00 00             movl   $0x0,-0x4(%rbp)\n.text:00400558 eb 22                            jmp    0x0040057c\n.text:0040055a 8b 45 fc                         mov    -0x4(%rbp),%eax\n.text:0040055d 48 98                            cltq   \n.text:0040055f 0f b6 44 05 e0                   movzbl -0x20(%rbp,%rax,1),%eax\n.text:00400564 0f be c0                         movsbl %al,%eax\n.text:00400567 89 c6                            mov    %eax,%esi\n.text:00400569 bf 24 06 40 00                   mov    $0x400624,%edi\n.text:0040056e b8 00 00 00 00                   mov    $0x0,%eax\n.text:00400573 e8 88 fe ff ff                   callq  0x00400400\n.text:00400578 83 45 fc 01                      addl   $0x1,-0x4(%rbp)\n.text:0040057c 8b 45 fc                         mov    -0x4(%rbp),%eax\n.text:0040057f 83 f8 14                         cmp    $0x14,%eax\n.text:00400582 76 d6                            jbe    0x0040055a\n.text:00400584 be 14 00 00 00                   mov    $0x14,%esi\n.text:00400589 bf 28 06 40 00                   mov    $0x400628,%edi\n.text:0040058e b8 00 00 00 00                   mov    $0x0,%eax\n.text:00400593 e8 68 fe ff ff                   callq  0x00400400\n.text:00400598 b8 00 00 00 00                   mov    $0x0,%eax\n.text:0040059d c9                               leaveq \n.text:0040059e c3                               retq   \n.text:0040059f 90                               nop\n</code></pre>\nStep 2\nRun the following command to save the result in a file called <pre><code>asm_bytes</code></pre>\n<pre><code>cat asm | cut -d ' ' -f 2- | awk -F \"  \" '{ print $1; }' > asm_bytes</code></pre>\n<pre><code>55\n48 89 e5\n48 83 ec 20\n48 b8 4d 61 73 73 69 76 6e 69\n48 89 45 e0\n48 b8 79 20 6d 61 73 73 69 76\n48 89 45 e8\nc7 45 f0 00 00 00 00\nc7 45 fc 00 00 00 00\neb 22\n8b 45 fc\n48 98\n0f b6 44 05 e0\n0f be c0\n89 c6\nbf 24 06 40 00\nb8 00 00 00 00\ne8 88 fe ff ff\n83 45 fc 01\n8b 45 fc\n83 f8 14\n76 d6\nbe 14 00 00 00\nbf 28 06 40 00\nb8 00 00 00 00\ne8 68 fe ff ff\nb8 00 00 00 00\nc9\nc3\n90\n</code></pre>\nStep 3\nRun the following command to save the output in a file called <pre><code>bin</code></pre>.\n<pre><code>cat asm_bytes | sed 's/ /\\\\x/g' | sed 's/^/\\\\x/' | tr -d \"\n\" > bin</code></pre>\nStep 4\nLoad the binary file in IDA 64 bit, set processor type to <pre><code>MetaPC</code></pre>, loading offset to <pre><code>0x400526</code></pre>.\nStep 5\nFix the disassembly by pressing <pre><code>C</code></pre> to mark the code region and the use the <pre><code>Create Function</code></pre> option. This will create a function starting from the first instruction (<pre><code>PUSH</code></pre>)\nStep 6\nPress <pre><code>F5</code></pre> to get the decompiled, C-like source code.\n",
            "votes": "2",
            "user": "sherlock",
            "time": "Jan 26, 2017 at 0:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}