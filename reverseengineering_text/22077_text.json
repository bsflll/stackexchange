{
    "title": "Is there a way to reverse engineer this small tool \"website2apk\" and design my own? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22077/is-there-a-way-to-reverse-engineer-this-small-tool-website2apk-and-design-my-o",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 5 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\n\nI recently came across this tool and was amazed by its size and how it can build release-apk, without even bothering about Android development environment set up on the machine, neither Cordova nor Android Studio is required.\nA bit of research showed me that the what this tool is doing is simple (most related material I found was of 2008-2014). \nBeing new in reverse engineering, I wonder if there is a way I can understand its workaround and build a similar tool to automate my Cordova projects.\n",
    "votes": "0",
    "answers": 1,
    "views": "123",
    "tags": [
        "android",
        "executable",
        "apk"
    ],
    "user": "Gustaakh",
    "time": "5 years ago",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "Never use those type of tools. They tends to inject malware in produced binary blob.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. This is a fairly broad question. What have you tried so far? The idea doesn't exactly seem too far-fetched that one could come up with a tool like that. APK files are ZIP archives, certain metadata governs stuff like class names (including the directory structure inside the ZIP) and it shouldn't be too hard to replace metadata as well as data (i.e. \"data-driven\") used by the included app. And the app probably makes use of of something like WebView, so not \"much meat\" either. But as @Biswapriyo pointed out, you shouldn't use someone else's, unless it's FLOSS ...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Depending on what the tool is written in.\nIf you can it with binary analyser like ProtectionId or Pied it should tell you what compile was used to build the binary.\nIf it is build using the .NET library then you can use a decompiler like dnSpy or Reflector to view the source code. Java is also reflectable so a tool like JD/JD-GUI would be able to help recover the source code.\nIf it is a native binary (C/C++) it becomes a little trickier, you will need to use something like hexrays or ghidra to decompile binary and give a C like pseudo code which can be used to rewrite an application.\nHopefully this helps\n",
            "votes": "0",
            "user": "Jackson Green",
            "time": "Sep 10, 2019 at 5:57",
            "is_accepted": true,
            "comments": []
        }
    ]
}