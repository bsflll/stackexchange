{
    "title": "Firmware extraction of U-boot : No filesystem found via binwalk + relation between MTD partitionning and NAND subsystem",
    "link": "https://reverseengineering.stackexchange.com/questions/33004/firmware-extraction-of-u-boot-no-filesystem-found-via-binwalk-relation-betwe",
    "content": "I recently extracted the firmware (u-boot system) from an old Sagemcom router and analyzed it using the binwalk utility for a personal reverse engineering project.\nDespite identifying a root filesystem (likely JFFS2 based on string analysis), binwalk was unable to recognize or extract it.\nI know that the filesystem is JFFS by examining the boot info, and performing strings analysis on my dump. (You can check the git repo given further down)\nSteps Taken:​\n\nInitial Extraction with Binwalk:\n\n\nBinwalk was used to analyze the firmware, but it failed to identify the root filesystem.\n\n\n\nManual Binary Segmentation:\n\n\nBased on MTD (Memory Technology Device) partitions, I attempted to segment the binary using the dd command.\nEncountered overlapping addresses and excessive total pages exceeding 65536 (total memory size of 16MB divided by page size of 2048 bytes).\n\n\nChallenges:​\n\nTranslating MTD addresses to NAND offsets.\nUnderstanding the relationship between MTD partitions and NAND subsystems.\nEnsuring correct memory dumping and assembly.\nExtracting the JFFS2 rootfs\n\nAdditional Information:\n\nUtilized dd for binary segmentation.\nCleaned .dmp files to remove Out-Of-Band (OOB) data and other unnecessary lines.\n\nMemory Extraction steps:\n\nScript that I used on my git repo\n\n\ndump from router through UART : 'dump_nand_memory.py' ; use <pre><code>nand dump offset</code></pre> to dump nand page\nassure no error in the file : <pre><code>assure_140_lines.py</code></pre>\nclean .dmp file (dont keep oob) : <pre><code>clean_dmp.py</code></pre>\nconcatenate all .dmp file into .bin : <pre><code>concatenated_all_to_bin.py</code></pre>\nSearch for magic number in the binary for JFFS2 filesystem : <pre><code>check_for_JFFS2.py</code></pre>\n\nQuestions:\n\nHow do I accurately convert MTD partition addresses into corresponding NAND offsets?\nIs MTD simply an abstraction layer for NAND, or is there more complexity involved ?\nDo I have correctly extracted memory, do I need to correct errors using OOB ?\nWhere can I find more info about u-boot, embed system, ... (doc is pretty much non existent)\n",
    "votes": "2",
    "answers": 1,
    "views": "95",
    "tags": [
        "file-format",
        "firmware-analysis",
        "binwalk",
        "dumping",
        "router"
    ],
    "user": "user372517",
    "time": "Jun 12, 2024 at 11:42",
    "comments": [],
    "answers_data": [
        {
            "content": "There's no need for binwalk to be further utilized for JFFS2 extraction.\nSince Binwak detect ubi filesystem (and not JFFS2) it is smarter to use tools like ubireader to extract it from the firmware.\nSo i've installed ubireader from the AUR, and performed <pre><code>ubireader_extract_images firmware.bin</code></pre> which cave me a set of .ubifs files that could be extracted by binwalk.\nFurther investigation still need to be done sine /etc/passwd & /etc/shadow from ubirootfs does not contain password hash for root user\n",
            "votes": "2",
            "user": "user372517",
            "time": "Jun 12, 2024 at 11:46",
            "is_accepted": true,
            "comments": []
        }
    ]
}