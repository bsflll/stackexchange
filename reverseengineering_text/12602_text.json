{
    "title": "Identify RVA data in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/12602/identify-rva-data-in-ida-pro",
    "content": "I want to read the data value at a given address in IDA Pro. I found it can be achieved by DWord(address) function. However in case the value is RVA of a function (as below), Dword() gives RVA 7E094D (where image_base is 300000), as expected.  \n<pre><code>.rdata:00CC0024                 dd rva sub_AE094D\n</code></pre>\nIs there any simple way how IDA Pro/Python scripting can tell me that a data value is RVA so that I can add the image_base to it to get the absolute address?\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "idapython"
    ],
    "user": "ssultana",
    "time": "May 6, 2016 at 7:25",
    "comments": [],
    "answers_data": [
        {
            "content": "The code below is prone to \"false positives\", but it's better than nothing:\n<pre><code>def is_rva(ea):\n    original_ea = ScreenEA()\n    Jump(ea)\n    found = \" rva \" in GetCurrentLine()\n    Jump(original_ea)\n    return found\n</code></pre>\nHopefully someone can provide a better answer than this (code that actually checks IDA's internal representation instead of doing a string comparison), but if not, perhaps this will suit your needs.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "May 7, 2016 at 16:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you know the base, you can \"force\" the display of the offset by using the 'Offset (user-defined)' command (Ctrl+R by default). You can then specify the base from which the offset have to be calculated, and IDA will basically add and substract the base, so it'll give:\nRVA 0x1234 with BaseAddress 0x400000 => (loc_401234 - 0x400000)\nUnfortunately, there is no easy way to differentiate a small constant and a RVA, beside maybe looking if the destination already has a name, but that's error-prone since the only reference to that location could be the very same RVA you're manipulating. Either manual inspection of each value or custom-made heuristics would be my best guess.\n",
            "votes": "0",
            "user": "user2823000",
            "time": "Jun 6, 2016 at 17:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}