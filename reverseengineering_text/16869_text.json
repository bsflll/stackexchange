{
    "title": "Generating symbol file for closed-source binary by hand",
    "link": "https://reverseengineering.stackexchange.com/questions/16869/generating-symbol-file-for-closed-source-binary-by-hand",
    "content": "I have a closed-source binary (<pre><code>minecraft-pi</code></pre>). For a given section of the assembly like so:\n<pre><code>   a2ed4:       e92d45f8        push    {r3, r4, r5, r6, r7, r8, sl, lr}\n   a2ed8:       e1a04000        mov     r4, r0\n   a2edc:       e59d0024        ldr     r0, [sp, #36]   ; 0x24\n   a2ee0:       e352007f        cmp     r2, #127        ; 0x7f\n   a2ee4:       d3a02000        movle   r2, #0\n   a2ee8:       c3a02001        movgt   r2, #1\n   a2eec:       e1922fa0        orrs    r2, r2, r0, lsr #31\n   a2ef0:       1a000015        bne     a2f4c\n</code></pre>\nconveniently there's another binary <pre><code>libminecraftpe.so</code></pre> that has code with symbols while containing similar disassembled instructions, and similar relative placement among functions e.g.:\n<pre><code>0013a3ac <_ZN5Level11hasChunksAtEiiiiii>:\n  13a3ac:       e92d 43f8       stmdb   sp!, {r3, r4, r5, r6, r7, r8, r9, lr}\n  13a3b0:       2a7f            cmp     r2, #127        ; 0x7f\n  13a3b2:       4604            mov     r4, r0\n  13a3b4:       9809            ldr     r0, [sp, #36]   ; 0x24\n  13a3b6:       bfd4            ite     le\n  13a3b8:       2200            movle   r2, #0\n  13a3ba:       2201            movgt   r2, #1\n  13a3bc:       ea52 72d0       orrs.w  r2, r2, r0, lsr #31\n  13a3c0:       d119            bne.n   13a3f6 <_ZN5Level11hasChunksAtEiiiiii+0x4a>\n</code></pre>\n(<pre><code>_ZN5Level11hasChunksAtEiiiiii</code></pre> ~ <pre><code>Level::hasChunksAt(int, int, int, int, int, int)</code></pre> according to c++filt).\nThis matches up because despite one being ARM + Linux and the other ARM/Thumb + Android, they come from roughly the same codebase.\nIt's thus appealing to build a symbol file for <pre><code>minecraft-pi</code></pre> by hand and use it in gdb. Even when primarily stepping through assembly it would be very helpful if I could set breakpoints on function names and see informative backtraces.\nSo if I have written up a map of addresses to symbol names, how can I generate a corresponding symbol file binary (to be loaded in gdb via the <pre><code>symbol-file</code></pre> command, or even embedded into the executable)?\nI'm familiar with human-readable debug symbol formats like Breakpad syms, but are there tools for generating a DWARF binary in this manner?\nI found other questions on Stack Exchange related to IDA integration, <pre><code>dwarfexport</code></pre>, <pre><code>pwndebug</code></pre>, and <pre><code>unstrip</code></pre> (included in links below). florisschabert/unstrip has ARM support but seems to be geared toward inserting symbols based on Objective-C standard libraries, which isn't applicable here. Using IDA with <pre><code>dwarfexport</code></pre> could be an option, but I'd prefer a command-line solution that I could script. I'm basically looking for advice on generally recommended practices before I try out these various tools with limited documentation.\nLinks:\n\nHow to handle stripped binaries with GDB? No source, no symbols and GDB only shows addresses?\nLoading user specified IDA symbols in GDB\nhttps://github.com/alschwalm/dwarfexport\nhttps://github.com/pzread/unstrip\nhttps://github.com/florischabert/unstrip\n",
    "votes": "9",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "debugging-symbols"
    ],
    "user": "jdonald",
    "time": "Nov 30, 2017 at 18:37",
    "comments": [
        {
            "user": "julian",
            "text": "These articles might be helpful in the event that you perform manual analysis to recover symbol and section information: 1) em386.blogspot.com/2006/10/… 2) em386.blogspot.com/2006/10/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For what I know, this is really uncommon to insert DWARF information in a binary program. Yet, one way to do would be to use the <pre><code>objcopy</code></pre> program that allows to rebuild the binary and add a few more things in your binary file.\nHere is a way to add a symbol named <pre><code>my_func_name</code></pre> in your <pre><code>prog.symb</code></pre> binary through a copy of the original <pre><code>prog</code></pre> program:\n<pre><code>#> objcopy --add-symbol my_func_name=.text:0x900,function,global prog prog.symb\n</code></pre>\nAnd, if you manage to create a full debuglink file with all you need, you can add it to your binary with <pre><code>objcopy</code></pre> also:\n<pre><code>#> objcopy --add-gnu-debuglink=prog.debug prog prog.symb\n</code></pre>\nI did not found how to dynamically add it to a <pre><code>gdb</code></pre> session. If somebody knows how to do it, I am also interested!\n",
            "votes": "1",
            "user": "perror",
            "time": "Mar 25 at 14:28",
            "is_accepted": false,
            "comments": []
        }
    ]
}