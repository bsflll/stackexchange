{
    "title": "Ghidra pseudocode to Java/C",
    "link": "https://reverseengineering.stackexchange.com/questions/21232/ghidra-pseudocode-to-java-c",
    "content": "I have this piece of code generated from Ghidra\n<pre><code>void __cdecl FUNCTION(uint *key,uint *text)\n\n{\n  undefined uVar1;\n  ushort uVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint *puVar8;\n  uint uVar9;\n  uint local_18c [11];\n  uint *local_14;\n  uint *local_10;\n  uint local_c;\n\n  puVar3 = key;\n  uVar2 = 0;\n  local_10 = (uint *)key[4];\n  local_14 = (uint *)key[3];\n  puVar5 = local_18c;\n  uVar9 = key[1];\n  puVar8 = (uint *)key[2];\n  uVar7 = *key;\n  do {\n    local_c = uVar7;\n    key = puVar8;\n    puVar4 = local_14;\n    if (uVar2 < 0x10) {\n      puVar5[0xe] = *text;\n      uVar1 = *(undefined *)((int)puVar5 + 0x3b);\n      *(undefined *)((int)puVar5 + 0x3b) = *(undefined *)(puVar5 + 0xe);\n      *(undefined *)(puVar5 + 0xe) = uVar1;\n      uVar1 = *(undefined *)((int)puVar5 + 0x3a);\n      *(undefined *)((int)puVar5 + 0x3a) = *(undefined *)((int)puVar5 + 0x39);\n      *(undefined *)((int)puVar5 + 0x39) = uVar1;\n    }\n    else {\n      uVar7 = puVar5[0xb] ^ puVar5[6] ^ puVar5[-2] ^ *puVar5;\n      puVar5[0xe] = uVar7 >> 0x1f | uVar7 * 2;\n    }\n    if (uVar2 < 0x14) {\n      iVar6 = (~uVar9 & (uint)local_14 | (uint)key & uVar9) + 0x5a827999;\n    }\n    else {\n      if (uVar2 < 0x28) {\n        iVar6 = ((uint)local_14 ^ (uint)key ^ uVar9) + 0x6ed9eba1;\n      }\n      else {\n        if (uVar2 < 0x3c) {\n          iVar6 = (((uint)key | uVar9) & (uint)local_14 | (uint)key & uVar9) + 0x8f1bbcdc;\n        }\n        else {\n          iVar6 = ((uint)local_14 ^ (uint)key ^ uVar9) + 0xca62c1d6;\n        }\n      }\n    }\n    text = text + 1;\n    puVar8 = puVar5 + 0xe;\n    puVar5 = puVar5 + 1;\n    uVar7 = (int)local_10 + iVar6 + (local_c >> 0x1b | local_c << 5) + *puVar8;\n    puVar8 = (uint *)(uVar9 << 0x1e | uVar9 >> 2);\n    uVar2 = uVar2 + 1;\n    local_10 = local_14;\n    local_14 = key;\n    uVar9 = local_c;\n  } while (uVar2 < 0x50);\n  *puVar3 = *puVar3 + uVar7;\n  puVar3[1] = puVar3[1] + local_c;\n  puVar3[2] = puVar3[2] + (int)puVar8;\n  puVar3[3] = puVar3[3] + (int)key;\n  puVar3[4] = puVar3[4] + (int)puVar4;\n  return;\n}\n</code></pre>\nI'm trying to translate it in Java or C code, but i don't understand how. there are some obscure points.\nAll variable are typed correctly, but the first uVar1 is \"undefined\", why?\nThe operator ~ how is it implemented?\n",
    "votes": "0",
    "answers": 1,
    "views": "5k",
    "tags": [
        "c",
        "decryption",
        "java",
        "ghidra"
    ],
    "user": "Mark Last Jr",
    "time": "Apr 28, 2019 at 10:45",
    "comments": [],
    "answers_data": [
        {
            "content": "From Ghidra help:\n\nBy default, the variables data type will be UndefinedN where N is the size (in bytes) of the stack reference.\n\n<pre><code>undefined</code></pre> stands for <pre><code>undefined1</code></pre> and it's a type of size <pre><code>1</code></pre>(byte) in <pre><code>Ghidra</code></pre>. \nIf some variable is of this type, it basically means that decompiler didn't infer any \"better\" type for this variable (which could be <pre><code>bool</code></pre> or <pre><code>char</code></pre> for example), but it knows that it occupies <pre><code>1</code></pre> byte.\nRegarding your second question, <pre><code>~</code></pre> is a <pre><code>bitwise NOT</code></pre> operation, just like in <pre><code>C</code></pre>.\nNote1: If you are unsure what a particular operator means, just select it in decompiler view and it will show you the corresponding disassembly instruction.\nNote2: The code you are analysing may be easier to read when you disable printing of type casts (<pre><code>Edit</code></pre>-><pre><code>Tool options...</code></pre>-><pre><code>Decompiler</code></pre>-><pre><code>Display</code></pre>-><pre><code>Disable printing of type casts</code></pre>).\nNote3: Another option to consider is <pre><code>Use inplace assignment operations</code></pre> (under <pre><code>Decompiler</code></pre>-><pre><code>Analysis</code></pre> in options) to have <pre><code>uVar2 += 1</code></pre> instead of <pre><code>uVar2 = uVar2 + 1</code></pre> for example.\n",
            "votes": "2",
            "user": "bart1e",
            "time": "Jun 6, 2019 at 17:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}