{
    "title": "Avoid program detecting a thread being used [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12610/avoid-program-detecting-a-thread-being-used",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm writing a DLL for a program that needs to run in an infinite loop (with delays, of course). For example:\n<pre><code>while (true) {\n    std::cout << \"I am running.\n\";\n    Sleep(1000);\n}\n</code></pre>\nI'm not sure how but no matter how I do this, the target program closes itself after a couple minutes. I know that it is not the DLL's presence because if I don't have an infinite loop and it \"completes\" (but stays in memory) it doesn't detect anything.\nI am using Cheat Engine to inject the DLL. It is detected both when I inject it normally and when I have the loop in a separate function and create a thread for it.\nIf there aren't a few easy and easy to patch ways to detect things like this, what are alternatives? I'm writing it as a DLL because I need to call functions within the process (CreateRemoteThread-ing the bases wouldn't be easy because most of them have many more than one argument).\n",
    "votes": "2",
    "answers": 1,
    "views": "175",
    "tags": [
        "assembly",
        "x86",
        "c++",
        "dll-injection",
        "thread"
    ],
    "user": "Lupe",
    "time": "8 years ago",
    "comments": [
        {
            "user": "Remko",
            "text": "Are you running this loop from dllmain?\n",
            "time": null
        },
        {
            "user": "Lupe",
            "text": "I've tried that and I've also tried having dllmain setup data and then using the \"Create Thread\" (couldn't be anything but direct CreateRemoteThread call) function on the base of a separate function with a loop in it.\n",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "Can you provide more information as to the program and what you're trying to do? It is very unclear.\n",
            "time": null
        },
        {
            "user": "Lupe",
            "text": "Sorry, I agree my wording was unclear. I was wrong about the cause of the crash, which took me a long time to figure out because of an annoying exception handler. I'll leave this on hold (can't delete) because it isn't relevant and might be misleading.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Have you considered using the DLL only for providing \"stub\" methods, that you could call using CreateRemoteThread, and have the DLL methods transform the arguments into what the method you ultimately want to call takes?\nI know this is not really a solution to how the program detects other threads running.  But with some luck, the fact that your threads would only run for a fraction of a second under this proposal, it would be much less likely for the program to detect them.\n",
            "votes": "2",
            "user": "Jes Klinke",
            "time": "May 12, 2016 at 16:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Lupe",
                    "text": "<span class=\"comment-copy\">That's sort of what I ended up doing, except I don't use a DLL. I wrote an assembly script to handle the conventions I need and allocate &amp; write it, then when I need to call a func I allocate &amp; write a structure containing the convention, address, num of args, and args and pass a pointer to it as an arg to the function with CreateRemoteThread. Probably a lot harder than it has to be but it works, at least. Thanks</span>",
                    "time": null
                },
                {
                    "user": "Lupe",
                    "text": "<span class=\"comment-copy\">...never mind. It still closes / crashes after about the same period of time. I really have no idea what's happening.</span>",
                    "time": null
                }
            ]
        }
    ]
}