{
    "title": "Constant pool error",
    "link": "https://reverseengineering.stackexchange.com/questions/21184/constant-pool-error",
    "content": "To debug a jar file, i tried to modify java bytecode using JByteMod tool and print some variable to standard output. The variable i'm trying to print is an <pre><code>ArrayList</code></pre>. Specifically, it's a public attribute of class <pre><code>MethodNode</code></pre>, named <pre><code>outgoings_</code></pre>. The code is something like this:\n<pre><code>invokeinterface Object Iterator.next()\ncheckcast MethodNode\nastore 4\n######## my code begins from here #######\ngetstatic PrintStream System.out\naload 4\ngetfield List MethodNode.outgoings_\ninvokevirtual void PrintStream.println(Object)\n</code></pre>\nThe above code works fine and actually prints the list. For some reasons, i needed to print the first element of that list, so i changed the code:\n<pre><code>invokeinterface Object Iterator.next()\ncheckcast MethodNode\nastore 4\n######## my code begins from here #######\ngetstatic PrintStream System.out\naload 4\ngetfield List MethodNode.outgoings_\niconst_0\ninvokeinterface Object List.get(int)\ninvokevirtual void PrintStream.println(Object)\n</code></pre>\nBut this code fails to run and outputs this error:\n<pre><code>Exception in thread \"main\" java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)\nCaused by: java.lang.VerifyError: Illegal type at constant pool entry 67 in class wy2.SCCUtil\nException Details:\n  Location:\n    wy2/SCCUtil.buildScc(Lwy/CallGraph;)V @51: invokeinterface\n  Reason:\n    Constant pool index 67 is invalid\n  Bytecode:\n    0x0000000: bb00 1f59 b700 204d bb00 1659 b700 174e\n    0x0000010: 2bb4 0026 b900 2c01 003a 05a7 0029 1905\n    0x0000020: b900 3401 00c0 0036 3a04 b200 3c19 04b4\n    0x0000030: 003f 03b9 0043 0200 b600 492a 2b19 042c\n    0x0000040: 2db6 004d 1905 b900 5101 009a ffd3 2db9\n    0x0000050: 0054 0100 a700 6f2c b600 57c0 0036 3a04\n    0x0000060: 2d19 04b9 005b 0200 9900 06a7 0058 bb00\n    0x0000070: 5d59 b700 5e3a 052a 2b19 042d 1905 b400\n    0x0000080: 61b6 0065 1905 b400 61b9 0066 0100 3a07\n    0x0000090: a700 1d19 07b9 0034 0100 c000 363a 062a\n    0x00000a0: b400 1419 0619 05b9 006c 0300 5719 07b9\n    0x00000b0: 0051 0100 9aff df2a b400 1919 05b9 006f\n    0x00000c0: 0200 572c b600 7299 ff90 2ab4 0019 b900\n    0x00000d0: 6601 003a 05a7 0107 1905 b900 3401 00c0\n    0x00000e0: 005d 3a04 1904 b400 61b9 0066 0100 3a07\n    0x00000f0: a700 d319 07b9 0034 0100 c000 363a 0619\n    0x0000100: 06b4 003f b900 2c01 003a 09a7 004c 1909\n    0x0000110: b900 3401 00c0 0036 3a08 2bb4 0026 1908\n    0x0000120: b900 7302 009a 0006 a700 2f2a b400 1419\n    0x0000130: 08b9 0076 0200 1904 a600 06a7 001c 1904\n    0x0000140: b400 782a b400 1419 08b9 0076 0200 c000\n    0x0000150: 5db9 006f 0200 5719 09b9 0051 0100 9aff\n    0x0000160: b019 06b4 007b b900 2c01 003a 09a7 004c\n    0x0000170: 1909 b900 3401 00c0 0036 3a08 2bb4 0026\n    0x0000180: 1908 b900 7302 009a 0006 a700 2f2a b400\n    0x0000190: 1419 08b9 0076 0200 1904 a600 06a7 001c\n    0x00001a0: 1904 b400 7e2a b400 1419 08b9 0076 0200\n    0x00001b0: c000 5db9 006f 0200 5719 09b9 0051 0100\n    0x00001c0: 9aff b019 07b9 0051 0100 9aff 2919 0419\n    0x00001d0: 04b4 0078 b900 8201 00b5 0086 1905 b900\n    0x00001e0: 5101 009a fef5 b1                      \n  Stackmap Table:\n    full_frame(@30,{Object[#2],Object[#34],Object[#31],Object[#46],Top,Object[#48]},{})\n    same_frame(@68)\n    chop_frame(@87,2)\n    append_frame(@110,Object[#54])\n    append_frame(@147,Object[#93],Top,Object[#48])\n    same_frame(@173)\n    full_frame(@195,{Object[#2],Object[#34],Object[#31],Object[#46]},{})\n    append_frame(@216,Top,Object[#48])\n    full_frame(@243,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Top,Object[#48]},{})\n    full_frame(@270,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Object[#54],Object[#48],Top,Object[#48]},{})\n    full_frame(@299,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Object[#54],Object[#48],Object[#54],Object[#48]},{})\n    same_frame(@318)\n    full_frame(@343,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Object[#54],Object[#48],Top,Object[#48]},{})\n    same_frame(@368)\n    full_frame(@397,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Object[#54],Object[#48],Object[#54],Object[#48]},{})\n    same_frame(@416)\n    full_frame(@441,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Object[#54],Object[#48],Top,Object[#48]},{})\n    full_frame(@451,{Object[#2],Object[#34],Object[#31],Object[#46],Object[#93],Object[#48],Top,Object[#48]},{})\n    full_frame(@476,{Object[#2],Object[#34],Object[#31],Object[#46],Top,Object[#48]},{})\n\n    at wy2.Util.buildMethodHash2(Util.java:132)\n    at wy2.Util.doIt(Util.java:29)\n    at wy2.Main.genData(Main.java:68)\n    at wy2.Main.main(Main.java:59)\n    ... 5 more\n\n</code></pre>\nWhat i'm doing wrong? Is it a JByteMod bug?\nEDIT:\nHere are the links to the class file before and after modification.\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "java",
        "byte-code"
    ],
    "user": "Mehran Torki",
    "time": "Apr 19, 2019 at 16:46",
    "comments": [
        {
            "user": "Antimony",
            "text": "Most likely it is a JByteMod bug, but there's no way to know for sure unless you post the (binary) classfiles before and after modification.\n",
            "time": null
        },
        {
            "user": "Mehran Torki",
            "text": "@Antimony I added links to the class file before and after modification. Is there any other better tool around? I also tried JBE but it seems have problems saving newly added bytecodes.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "Pelase report this issue to the tool author, they're in better position to determine if it's bug or not. In the meantime you can try Krakatau.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The issue is that constant pool entry 67 (the one for your List.get()) method has the type <pre><code>Method</code></pre>, rather than <pre><code>InterfaceMethod</code></pre>, even though you are trying to invoke it as an interface method. When using <pre><code>invokeinterface</code></pre>, the corresponding constant pool entries need to be <pre><code>InterfaceMethod</code></pre>.\nAssuming you didn't specify the type itself, this is likely a bug in the tool you used. You may want to try using the Krakatau assembler/disassembler instead.\nWhen using Krakatau, the constant pool type is specified after the invoke instruction. For example, on the following line of the disassembly for your class, <pre><code>Method</code></pre> should be changed to <pre><code>InterfaceMethod</code></pre>.\n<pre><code>L51:    invokeinterface Method java/util/List get (I)Ljava/lang/Object; 2 \n</code></pre>\n",
            "votes": "4",
            "user": "Antimony",
            "time": "Apr 22, 2019 at 20:30",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Regarding your comment (Would respond as a comment, but don't have the 50 rep yet):\n\nI added links to the class file before and after modification. Is there any other better tool around?\n\nI develop the bytecode editor Recaf. I reimplemented your code and it worked just fine. However lets say you forgot the isInterface flag on your <pre><code>INVOKEINTERFACE</code></pre> instruction (ASM: MethodInsnNode.itf boolean), then you have a problem. \nWhen I attempted to save the modified file with this flag missing the ASM verifier threw an exception, giving the reason <pre><code>INVOKEINTERFACE can't be used with classes</code></pre>. When you export a jar with Recaf all your modified files are pre-verified to ensure their bytecode is valid. I actually forgot to put the flag on myself until the verifier window popped up. If I disable the verification process and then export the jar then I get the same VerifyError you just gave.\nSo to reiterate this is very likely to have been user-error, but JBytemod didn't catch that.\n",
            "votes": "3",
            "user": "Col-E",
            "time": "Apr 22, 2019 at 8:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mehran Torki",
                    "text": "<span class=\"comment-copy\">You are right, but there is no checkbox or anything else for setting the <code>isInterface</code> flag when adding a <code>invokeinterface</code> instruction in JByteMod.</span>",
                    "time": null
                }
            ]
        }
    ]
}