{
    "title": "Help with a pointer",
    "link": "https://reverseengineering.stackexchange.com/questions/20228/help-with-a-pointer",
    "content": "Sorry for this stupid question. It's late here and I've been kinda stuck for a while over this so I hope someone here can answer this easily.\nIn CheatEngine, 028FA190+374 is pointing to 028F1788. When I type in 028FA190+374 in the calculator I get 28FA504. Can someone explain me why this is different?\n",
    "votes": "4",
    "answers": 1,
    "views": "178",
    "tags": [
        "hex",
        "hexadecimal",
        "cheat-engine"
    ],
    "user": "Christian Handest",
    "time": "Dec 29, 2018 at 22:34",
    "comments": [],
    "answers_data": [
        {
            "content": "It's different, because it isn't just <pre><code>0x28FA190 + 0x374</code></pre>, but it's <pre><code>*(0x28FA190 + 0x374)</code></pre>.\n<pre><code>0x28FA190</code></pre> is a base address, probably of a structure, and <pre><code>0x374</code></pre> is an offset, when you sum these values and dereference the result, you get value of a field that's <pre><code>0x374</code></pre> bytes away from the beginning of this structure. This field seems to be a pointer, that's why it's value is also an address, but it could contain any value.\n<pre><code>struct A\n{\n  char padding[0x374]; // occupy the first 0x374 bytes, so that myPointer's address is address of this structure + 0x374 (i.e. (DWORD)this + 0x374)\n\n  int* myPointer;\n};\n\nA a;\n\nint valueOfMyPointer = **(int**)((DWORD)&a + 0x374); // valueOfMyPointer = *a.myPointer;\n</code></pre>\nYou need to explicitly cast <pre><code>&a</code></pre> to <pre><code>DWORD</code></pre> (aka <pre><code>unsigned long</code></pre>), because of pointer arithmetic - if you would do <pre><code>&a + 0x374</code></pre>, the result would actually be <pre><code>(DWORD)&a + 0x374 * sizeof(a)</code></pre>.\nYou can also write the entire expression from your screen as following:\n<pre><code>uint32_t result = *(DWORD*)(*(DWORD*)((DWORD)GetModuleHandle(\"ac_client.exe\") + 0x374) + 0x14);</code></pre>\n",
            "votes": "4",
            "user": "anx199",
            "time": "Dec 29, 2018 at 23:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}