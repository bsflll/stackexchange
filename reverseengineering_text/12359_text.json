{
    "title": "Visual Basic internal structure",
    "link": "https://reverseengineering.stackexchange.com/questions/12359/visual-basic-internal-structure",
    "content": "I am analyzing some Visual Basic 6.0 malware(before .NET) and I have several questions regarding the internal structure of the format. The samples I have are both <pre><code>p-code</code></pre> or <pre><code>native code</code></pre> compiled(depends on the malware version). In the last couple of days I read Alex Ionescu's paper as well as one other paper on the subject and I have a couple of questions regarding the format. Also, if you have any more resources where I can obtain additional information about the Visual Basic internal structure feel free to post them here.\nSo the questions are:\n\nIn the <pre><code>ProjectInformation</code></pre> structure there is a field at offset <pre><code>0x20</code></pre> called <pre><code>lpNativeCode</code></pre>. Based on Alex's paper, the description says <pre><code>Pointer to .DATA section</code></pre>. When analyzing my samples, I noticed that the following field is <pre><code>0x0</code></pre> for <pre><code>p-code</code></pre> compiled samples and contains an address for <pre><code>native code</code></pre> compiled samples. So, my question is: Is it safe to use the following field to determine if the sample is <pre><code>p-code</code></pre> or <pre><code>native-code</code></pre> compiled?\nInside the <pre><code>ObjectInfo</code></pre> structure there are fields at offsets <pre><code>0x20</code></pre> and <pre><code>0x24</code></pre> called <pre><code>wMethodCount</code></pre> and <pre><code>lpMethods</code></pre>. For <pre><code>p-code</code></pre> compiled samples I noticed that the <pre><code>lpMethods</code></pre> field points to an array of methods for that object. What I don't understand is the zero bytes that appear before the actual method addresses in the array. To make it more clear I included the following pictures:\n\n\n\nThe first picture is a dump view of an <pre><code>ObjectInfo</code></pre> structure while the second picture is the methods array pointed to by <pre><code>lpMethods</code></pre> field. Notice the 8 zero bytes before the actual method addresses (on some other samples there are more than 8 zero bytes so it's not always that number). What I would like to know is what are those zero bytes?\n\nAnd finally my last question. In the <pre><code>PublicObjectDescriptor</code></pre> structure there is a field at offset <pre><code>0x1C</code></pre> called <pre><code>dwMethodCount</code></pre> with a description of <pre><code>Number of methods in Object</code></pre>. Also, inside the <pre><code>ObjectInfo</code></pre> structure there is a field called <pre><code>wMethodCount</code></pre> and in the <pre><code>OptionalObjectInfo</code></pre> there are fields called <pre><code>wEventCount</code></pre> and <pre><code>dwControlCount</code></pre>. What I would like to know is what are the relations between those fields. \nI noticed that for <pre><code>p-code</code></pre> compiled samples the     <pre><code>PublicObjectDescriptor.dwMethodCount</code></pre> is equal to <pre><code>ObjectInfo.wMethodCount</code></pre>,   while for <pre><code>native-code</code></pre> compiled samples the following relation does not stand.\n",
    "votes": "9",
    "answers": 1,
    "views": "624",
    "tags": [
        "file-format",
        "visual-basic"
    ],
    "user": "ubnix",
    "time": "Apr 7, 2016 at 7:30",
    "comments": [
        {
            "user": "Remko",
            "text": "Did you try VB Decompiler ? Here are two examples of modifying VB executables: - remkoweijnen.nl/blog/2013/01/02/… - remkoweijnen.nl/blog/2012/08/04/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "disclaimer: Since the VB file structure is still undocumented, we cannot provide guaranteed answers without fully reverse engineering the format. This has been attempted to some success by Ionescu and others as you and others have mentioned.\nI will attempt to answer your questions to the best of my ability without opening any reverse engineering tools. If you would like to ask how would someone go about reverse engineering the VB file format and related executables I would suggest opening another question on the subject specifically.\nNow, without further ado, my answers (read: educated guesses):\n\nAs an undocumented format not only we cannot offer a guaranteed \"yes\", the format and/or those assumptions could potentially be changed in future versions. This is unlikely to ever happen for a format as old as VB6, extremely so since it was abandoned. This seems like a fair assumption to make in this case.\nSince <pre><code>ObjectInfo</code></pre>s and <pre><code>PublicObjectDescriptor</code></pre> structures are separate, I can assume <pre><code>null</code></pre> values in an <pre><code>ObjectInfo.lpMethods</code></pre> array are to indicate a method (defined by name in the <pre><code>PublicObjectDescriptor</code></pre>) is not implemented by the <pre><code>ObjectInfo</code></pre>. This is, again, an educated guess and further reverse engineering should be done to validate it.\nI believe that since <pre><code>PublicObjectDescriptor</code></pre> takes the role of an externally facing object description, it is used to describe the object in full. <pre><code>ObjectInfo</code></pre> is somewhat more external and specific for the <pre><code>p-code</code></pre> portions of the object. Therefore, and object that's fully implemented in <pre><code>p-code</code></pre> will have it's <pre><code>ObjectInfo.wMethodCount</code></pre> equal to it's <pre><code>PublicObjectDescriptor.dwMethodCount</code></pre> while an object that is partially (or fully) implemented natively will have a higher <pre><code>PublicObjectDescriptor.dwMethodCount</code></pre> than  <pre><code>ObjectInfo.wMethodCount</code></pre>.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 10, 2018 at 1:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}