{
    "title": "Counting offsets of structure fields [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8877/counting-offsets-of-structure-fields",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\ni have the following question:\nFor example, when I have the structure \n<pre><code>    IMAGE_SECTION_HEADER STRUCT         |   C1    |    C2      \n    Name1                     BYTE      |   +0    |    +0\n    union Misc                          |\n        PhysicalAddress       DWORD     |    2    |     2\n        VirtualSize           DWORD     |    6    |\n    ends                                |\n    VirtualAddress            DWORD     |    10   |     6\n    SizeOfRawData             DWORD     |    14   |     10\n    PointerToRawData          DWORD     |    18   |     14\n       ...(etc.)\n</code></pre>\nThen how I must count the offsets? The columns C1 and C2 represent my solutions but i am not sure which of the two is right or if both are wrong.\nDo I have to consider the union in the structure as 1 field, or do I need to consider its fields separately?\nbest regards,\n",
    "votes": "0",
    "answers": 1,
    "views": "363",
    "tags": [
        "struct"
    ],
    "user": "user3097712",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "A union is a list of fields starting at the same address in memory (except for bitfields, of course). Its size is at least the size of the largest field in it. In your case, it would be 4 bytes.\nNote that, like structs, the size can be bigger due to alignment requirements. For example, take this C union:\n<pre><code>union MyUnion {\n    char a[5];\n    int b;\n};\n</code></pre>\nThe <pre><code>a</code></pre> fields is 5 bytes, <pre><code>b</code></pre> is 4. You would expect the union to be 5 bytes, but, as you can check with <pre><code>sizeof(union MyUnion)</code></pre>, it is actually 8. This is because <pre><code>int</code></pre>s are aligned to a 4-byte boundary. Similiarly, <pre><code>short</code></pre>s are aligned to 2 bytes and <pre><code>double</code></pre>s to 8. Try it on CodingGround.\nYou may be asking yourself: why does the compiler align the union size? Isn't aligning the starting address enough? It could well keep the size of <pre><code>MyUnion</code></pre> to 5 and align the start to a 4-byte boundary for the int. The problem comes when you have an array of the union. An array needs to be a contiguous block of memory because of how array and pointer arithmetic works. Given a generic <pre><code>T array[]</code></pre> you have that <pre><code>array[i] == *(array + i) == *((T *) (((char *) array) + i * sizeof(T)))</code></pre>. In the example case, <pre><code>MyUnion</code></pre> has a 4-byte alignment requirement (the largest aligment in the union). If you have a <pre><code>MyUnion array[]</code></pre>, the starting address will be 4-byte aligned because of the int. This means that <pre><code>array[0]</code></pre> will be correctly aligned. But if the size of the union is 5, then <pre><code>array[1]</code></pre> will be at a 5 bytes offset from the starting address. This is not 4-byte aligned! Aligning the union size to 8 bytes puts <pre><code>array[1]</code></pre> to a 8 bytes offset, which is 4-bytes aligned. Aligning the size by padding the union allows the array to be contiguous while keeping everything aligned.\nBottom line:\nIn a union (or a struct), both the starting address and the size are aligned to the biggest alignment requirement of the fields.\nOf course, alignment requirements may vary between compilers and architectures. Keep that in mind.\nNeither C1 nor C2 is correct as far as I can see, since the first field is a byte and not two:\n<pre><code>IMAGE_SECTION_HEADER STRUCT         |w/o align| aligned |\nName1                     BYTE      |   +0    |   +0    |\nunion Misc                          |   +1    |   +4    |\n    PhysicalAddress       DWORD     |         |         |\n    VirtualSize           DWORD     |         |         |            \nends                                |         |         |\nVirtualAddress            DWORD     |   +5    |   +8    |\nSizeOfRawData             DWORD     |   +9    |   +12   |\nPointerToRawData          DWORD     |   +13   |   +16   |\n   ...(etc.)\n</code></pre>\n",
            "votes": "3",
            "user": "Andrea Biondo",
            "time": "May 13, 2015 at 13:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andrea Biondo",
                    "text": "<span class=\"comment-copy\">Reading the answer again I realized I wasn't very clear. The <code>int</code> <i>alignment</i> is making the size 8 bytes. This has to do with arrays. I updated the answer, please check it. I also updated the CodingGound sample to show alignment.</span>",
                    "time": null
                }
            ]
        }
    ]
}