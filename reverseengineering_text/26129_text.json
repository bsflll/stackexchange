{
    "title": "Why can't find hardcoded string in the disassembled program?",
    "link": "https://reverseengineering.stackexchange.com/questions/26129/why-cant-find-hardcoded-string-in-the-disassembled-program",
    "content": "I've wrote a simple program to print something on the screen as below:\n<pre><code>ebra@him:/tmp/tuts$ cat sample.c \n#include <stdio.h>\n\nint main()\n{\n    puts(\"Sample!\");\n}\n\nebra@him:/tmp/tuts$ gcc sample.c -o sample\nebra@him:/tmp/tuts$ \n \nebra@him:/tmp/tuts$ ./sample \nSample!\n</code></pre>\nAnd then I disassmbled the executable to see what is going on under the hood:\n<pre><code>ebra@him:/tmp/tuts$ objdump -M intel --disassemble-all sample | grep \"<main>:\" -A 10\n0000000000001149 <main>:\n    1149:   f3 0f 1e fa             endbr64 \n    114d:   55                      push   rbp\n    114e:   48 89 e5                mov    rbp,rsp\n    1151:   48 8d 3d ac 0e 00 00    lea    rdi,[rip+0xeac]        # 2004 <_IO_stdin_used+0x4>\n    1158:   e8 f3 fe ff ff          call   1050 <puts@plt>\n    115d:   b8 00 00 00 00          mov    eax,0x0\n    1162:   5d                      pop    rbp\n    1163:   c3                      ret    \n    1164:   66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]\n    116b:   00 00 00 \n</code></pre>\nAs you see above, right before calling <pre><code>puts</code></pre> function, we have <pre><code>lea    rdi,[rip+0xeac]</code></pre>. I assume that <pre><code>[rip+0xeac]</code></pre> is the address of the hardcoded text (i.e. \"Sample!\").\nSince <pre><code>rip</code></pre> is equal to <pre><code>0x1151</code></pre> while exucuting the <pre><code>mov</code></pre> line, the value of <pre><code>[rip + 0xeac]</code></pre> will be <pre><code>0x1151 + 0xeac = 0x1ffd</code></pre>.\nBut I can't find this address in the disassembled program:\n<pre><code>ebra@him:/tmp/tuts$ objdump -M intel --disassemble-all sample | grep -i 1ffd\nebra@him:/tmp/tuts$ objdump -M intel --disassemble-all sample | grep -i \"Sample!\"\nebra@him:/tmp/tuts$\n</code></pre>\nWhy?\n",
    "votes": "3",
    "answers": 1,
    "views": "736",
    "tags": [
        "disassembly",
        "c"
    ],
    "user": "Ebrahim Ghasemi",
    "time": "Oct 20, 2020 at 7:15",
    "comments": [],
    "answers_data": [
        {
            "content": "to search String you cant be  using disassemble-all\n<pre><code>look at the bytes in both commands if you disassemble how can you find the string\n\nobjdump -s sample.exe |grep -i sample\nsample.exe:     file format pei-i386\n 404040 00000000 53616d70 6c652100 20634000  ....Sample!. c@.\n\nobjdump -M intel --disassemble-all sample.exe  --start-address=0x404044 --stop-address=0x40404f\n\nsample.exe:     file format pei-i386\n\n\nDisassembly of section .rdata:\n\n00404044 <.rdata>:\n  404044:       53                      push   ebx\n  404045:       61                      popa\n  404046:       6d                      ins    DWORD PTR es:[edi],dx\n  404047:       70 6c                   jo     4040b5 <.rdata+0x45>\n  404049:       65 21 00                and    DWORD PTR gs:[eax],eax\n\n0040404c <_GS_ExceptionPointers>:\n  40404c:       20 63 40                and    BYTE PTR [ebx+0x40],ah\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Oct 17, 2020 at 8:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ebrahim Ghasemi",
                    "text": "<span class=\"comment-copy\">Why does <code>objdump</code> tries to disassemble the <code>.rdata</code> section?! As far as I know, this section contains data/variables only. Am I wrong?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">:\\&gt;objdump --help |grep -i \"disassemble-all\"   -D, --disassemble-all    Display assembler contents of all sections</span>",
                    "time": null
                }
            ]
        }
    ]
}