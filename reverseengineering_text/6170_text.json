{
    "title": "IDA API - query number of parameters for cdecl functions",
    "link": "https://reverseengineering.stackexchange.com/questions/6170/ida-api-query-number-of-parameters-for-cdecl-functions",
    "content": "I'm writing a script that, among other things, reads and does some processing with parameters to a function. Right now my solution to find the number of arguments for a given function at <pre><code>addr</code></pre> is:\n<pre><code>(GetStrucSize(GetFrame(addr)) - GetFrameSize(addr))/4\n</code></pre>\nThis is on x86. The issue is when I'm calling, for example, <pre><code>printf()</code></pre>, the difference between the two <pre><code>GetXXX()</code></pre> calls is 5 which obviously messes up the math.\nAt the moment I've worked around it by checking if the first parameters is a format string with format specifiers and then parsing it manually to get the real count, but that's not really extensible.\nIs there a way in the confines of the API to deal with this?\nEdit: I should have made this clearer in the question but this is specifically referring to the IDA API. I could write the code myself to calculate cleanup but in interest of keeping my code clean I'm trying to avoid a lot of code querying if it's stdcall and cdecl and then searching/parsing myself\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "python",
        "functions"
    ],
    "user": "Fewmitz",
    "time": "Sep 4, 2014 at 18:16",
    "comments": [],
    "answers_data": [
        {
            "content": "For cdecl the caller needs to clean up the stack. So somewhere after the function call there HAS to be a stack operation that removes the parameters from the stack (remove as in adjust the stack pointer)\n<pre><code>PUSH 0xABCDEF01\nCALL function\nADD ESP, 4 ; sizeof(DWORD) (the parameter)\n</code></pre>\nIt does NOT need to be directly after the call. (I think VS08 sometimes puts the return value check before it)\nSo this is equally valid\n<pre><code>PUSH 0xABCDEF01\nCALL function\nTEST EAX, EAX\nADD ESP, 4 ; sizeof(DWORD) (the parameter)\n; A conditional jump probably\n</code></pre>\nas is this\n<pre><code>PUSH 0xABCDEF01\nCALL function\nPOP EAX \n</code></pre>\nBecause EAX holds a DWORD and thus removes <pre><code>sizeof(DWORD)</code></pre> == 4 bytes from the stack. (This obviously also holds true for all other general purpose extended registers).\n(It is POSSIBLE that e.g. for <pre><code>N</code></pre> parameters one could use <pre><code>N</code></pre> <pre><code>POP</code></pre> but I'm certain that no compiler does that and for every <pre><code>N</code></pre> > 2 it will lead to bigger code so it is unrealistic to happen in handwritten assembly too.)\nThere doesn't exists a maximum <pre><code>N</code></pre> of instructions that you could check after the call to determine whether that stack operation is the cleanup code. However I think that 5 will work for almost all cases (If you by chance do already know that this function is CDECL then check as many as you want)\nAlso for functions where the return value isn't important but is called before the return value of another function is inspected, one can save a variable like this:\n<pre><code>CALL function1\nPUSH EAX ; Save EAX\nPUSH something\nCALL function2\nPOP EAX ; Remove the something parameter\nPOP EAX ; Restore the return value of function1\n</code></pre>\nYou could try to also count the <pre><code>PUSH</code></pre> but that comes with it's own sort of intermediate instructions - this is really common:\n<pre><code>PUSH something\nLEA EAX, something_else ; Get a pointer to something_else\nPUSH EAX \nPUSH more\nCALL function\n</code></pre>\nSo you cannot stop working 'up' as soon as you hit an instruction that isn't a <pre><code>PUSH</code></pre>. \nIn conclusion there isn't a perfect solution but I think both can lead to a pretty reliable value; Which one you choose (or maybe both?) is up to you, IMO the first one (Searching for the stack cleanup) is easier to implement.\n",
            "votes": "4",
            "user": "user45891",
            "time": "Sep 4, 2014 at 17:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Fewmitz",
                    "text": "<span class=\"comment-copy\">Thanks for the answer; I'll probably accept this one as a solution. I understood cdecl's calling convention but was hoping there was an already implemented way to do this :(</span>",
                    "time": null
                },
                {
                    "user": "user45891",
                    "text": "<span class=\"comment-copy\">@Fewmitz I'm sure someone can provide the proper name for those techniques which will probably lead to a finished implementation. I imagine it's a rather common task so someone's bound to have done it already</span>",
                    "time": null
                },
                {
                    "user": "Fewmitz",
                    "text": "<span class=\"comment-copy\">Yeah I should have made it clearer that this is about the API specifically; I could write it myself but trying to keep the code clean, particularly when going to different architectures, etc.</span>",
                    "time": null
                },
                {
                    "user": "DCoder",
                    "text": "<span class=\"comment-copy\">Trivia factoid, I've seen a compiler optimize consecutive <code>esp</code> cleanups - when two <code>cdecl</code> functions were called in a sequence, the compiler (VC6) did not perform cleanup after the first call, only after the second one.</span>",
                    "time": null
                },
                {
                    "user": "user45891",
                    "text": "<span class=\"comment-copy\">@DCoder Nice. I did a quick test and VS2008 still does that when any kind (speed or size) of optimization is enabled (With enabled link-time code-generation - I'm unsure whether module in that case also means <code>printf()</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}