{
    "title": "What is the \"Fallthrough\" option in Ghidra for?",
    "link": "https://reverseengineering.stackexchange.com/questions/33056/what-is-the-fallthrough-option-in-ghidra-for",
    "content": "If you right-click on the assembly window in Ghidra, one of the last options shown will be \"Fallthrough\":\n\nCan someone explain in plain English what is that option for?\n",
    "votes": "1",
    "answers": 1,
    "views": "108",
    "tags": [
        "assembly",
        "ghidra",
        "terminology"
    ],
    "user": "c00000fd",
    "time": "Aug 2, 2024 at 17:22",
    "comments": [],
    "answers_data": [
        {
            "content": "\"Fallthrough\" is the normal flow of instructions.\nFor conditionsl branch operations it is the non-jump branch.\nThis options allows overriding the default flow and set the next address to continue execution at after the current instruction is executed.\n",
            "votes": "2",
            "user": "Yotamz",
            "time": "Jul 2, 2024 at 23:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "hippietrail",
                    "text": "<span class=\"comment-copy\">Is there also the opposite so we can mark places that we know don't continue execution as they normally would?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">Fallthrough is the next instruction when not branching. The opposite would be the branch target, which can be a literal value, a register with or without an offset and etc. If Ghidra finds the target - it will be shown, sometimes it can be trickier.</span>",
                    "time": null
                },
                {
                    "user": "hippietrail",
                    "text": "<span class=\"comment-copy\">I mean in cases like branch to subroutines or traps that are documented to never return.</span>",
                    "time": null
                },
                {
                    "user": "hippietrail",
                    "text": "<span class=\"comment-copy\">In fact here's a perfect example of <a href=\"https://reverseengineering.stackexchange.com/questions/30238\">\"the opposite of fallthrough\"</a> confusing Ghidra users in another recent question right here.</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">So the \"opposite of fallthrough\" you are referring to are two different cases: 1. jumps/calls to subroutines are simple instructions, regardless of whether Ghidra's decompiler can accurately predict their target or not. 2. instructions that generate interrupts, these will jump to an interrupt handler, you can say that the latter have no fallthrough.</span>",
                    "time": null
                }
            ]
        }
    ]
}