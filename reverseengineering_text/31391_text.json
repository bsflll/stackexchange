{
    "title": "Reverse engineer a calculation rule from a video game",
    "link": "https://reverseengineering.stackexchange.com/questions/31391/reverse-engineer-a-calculation-rule-from-a-video-game",
    "content": "I have recently bought an economic simulation video game, but neither the docs not the game UI describe how to estimate some costs; the user needs to actually invest and spend their money, then discover how much is worth their business activity.\nI decided to reverse engineer the game. I already have programming experience (that's what I do for a living), and I'm familiar with C/C++. I started learning ASM (x64)\nI have already spotted (using Ghidra / x64dbg) the instructions that calculate the costs, but I have not yet \"cracked\" it. I would like to know how realistic it is to do what I want to do, and what it takes to do it. I'm also willing to take any recommendations / advice.\n",
    "votes": "2",
    "answers": 2,
    "views": "284",
    "tags": [
        "disassembly",
        "patch-reversing",
        "assembly"
    ],
    "user": "devio",
    "time": "Jan 12, 2023 at 13:58",
    "comments": [],
    "answers_data": [
        {
            "content": "Here are my suggestions about reversing traditional offline games.\nIf the game uses a well known game engine, then you can search for tools that are specifically created for that engine.\nIf the game engine is unknown to you, then you have to do everything yourself. It usually starts with identifying the data structures inside the game.\nMost games will show you some data, such as HP, MP, money, etc. You need to locate these data (which are possibly dynamically allocated) in the executable. A memory scanner such as Cheat Engine can be handy.\nAfter that, you can set break points on some data that you are interested in, and see which part of the code modifies them. The code should now make some sense to you.\nSometimes it may get tricky, like playing a jigsaw puzzle. Eventually you will be able to totally understand everything, provided that you invest enough time into it. To do things efficiently, however, requires some experience.\n",
            "votes": "2",
            "user": "WhatsUp",
            "time": "Jan 13, 2023 at 12:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "devio",
                    "text": "<span class=\"comment-copy\">How do I identify the game engine ?</span>",
                    "time": null
                },
                {
                    "user": "WhatsUp",
                    "text": "<span class=\"comment-copy\">There are different ways. New games (especially AAA games) usually don't hide this information, so you can just search for that online. Some old engines embed their signature text inside the executable, something like \"made with XXX engine, copyright XXX\" etc. These will be visible in disassembly code.</span>",
                    "time": null
                },
                {
                    "user": "devio",
                    "text": "<span class=\"comment-copy\">I search the strings in the disassembly code, and I found the Poco engine / framework mention. Would this be helpful ?</span>",
                    "time": null
                },
                {
                    "user": "WhatsUp",
                    "text": "<span class=\"comment-copy\">I suppose it's <a href=\"https://readthedocs.org/projects/poco/\" rel=\"nofollow noreferrer\">this project</a>. They have source code available on github, which seems to be written mostly in Python. This probably means that a python decompiler is more relevant to you than assembly stuff.</span>",
                    "time": null
                },
                {
                    "user": "devio",
                    "text": "<span class=\"comment-copy\">I think it's this one <a href=\"https://pocoproject.org/\" rel=\"nofollow noreferrer\">pocoproject.org</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you've already spotted the instructions then you just need to work at converting the assembly into a higher level construct.\nYou can work on your assembly interpretation skills by compiling small pieces of C, then analysing the assembly. For example, write some code with a <pre><code>for</code></pre> loop, or a <pre><code>while</code></pre> loop, or a simple mathematical function.\n",
            "votes": "1",
            "user": "Mega Tonnage",
            "time": "Jan 13, 2023 at 7:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}