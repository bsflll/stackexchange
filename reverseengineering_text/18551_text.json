{
    "title": "How do you look for a a particular value at address in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/18551/how-do-you-look-for-a-a-particular-value-at-address-in-ida",
    "content": "So, I was trying to load some binary and in the main function, I saw instructions such as\n<pre><code>mov     edi, [esi+1Ch]\n...\nlea eax, [esi+18h]\n</code></pre>\nSo, what are these values at [esi+1Ch] and [esi+18h]. How do you look those with IDA Pro.\n",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "x86"
    ],
    "user": "Marcus",
    "time": "Jun 18, 2018 at 21:18",
    "comments": [],
    "answers_data": [
        {
            "content": "One of available options is to simply run <pre><code>Dword(cpu.esi+0x1c)</code></pre> or <pre><code>Dword(cpu.esi+0x18)</code></pre> correspondingly in idapython console.\nlatest API is: ida_bytes.get_dword\n",
            "votes": "2",
            "user": "crifan",
            "time": "Feb 6, 2024 at 8:22",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Seeing that OP is new to RE.SE and by the looks of the question itself I'll assume OP is relatively new to reverse engineering. Apologies if that isn't the case.\nValues shown as <pre><code>[esi+1Ch]</code></pre> or <pre><code>[esi+18h]</code></pre> are referencing values currently stored in the listed registers at the time the instruction is executed.\nWithout letting the executable run and debugging it's execution, stopping at the instructions you're interested investigating it could be extremely difficult to calculate what value will be there. Obviously, previous instructions relating to said registers can make it easier or harder. For example, a specific immidiate value can be assigned to the register just before, making tracing the value back awfully easy.\nWhen that isn't the case, often time placing a breakpoint at that instruction and reading the values in the debugger will be the easy path.\nAlthough IDA's debugger is probably not the best one around, you can definitely get it to breakpoint and read the values. Doing that using IDAPython could be, as another answer notes, by accessing the <pre><code>cpu</code></pre> object for the register value itself and adding the offset. Then, if the resulting address is actually derefereced, calling <pre><code>Dword</code></pre> will let you read the value currently in memory. This is the case in the first (but not the second) dereference shown in the two lines of assembly OP asks about (this is because of how the <pre><code>lea</code></pre> instruction is).\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 19, 2018 at 12:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}