{
    "title": "Recompiling/optimizing redundant code to make analysis easier",
    "link": "https://reverseengineering.stackexchange.com/questions/6966/recompiling-optimizing-redundant-code-to-make-analysis-easier",
    "content": "I'm analyzing an application created with Borland Delphi but the poor quality of the object code makes analysis difficult and tedious. The code is so convoluted and inflated with superfluous instructions that it is very hard to make out what a given piece of code is trying to accomplish.\nIn the related topic Identify a decryption scheme it was suggested to recompile the decompiler output with a good optimizing compiler, to eliminate redundancy and to get object code that is easier to analyze. \nI'm now wondering what would be the best way to do this. \nWhat tools are there for doing this based on object code or disassembler output (IDA)?\n",
    "votes": "6",
    "answers": 1,
    "views": "729",
    "tags": [
        "disassembly",
        "x86",
        "deobfuscation",
        "llvm"
    ],
    "user": "Eric",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "DarthGizka",
            "text": "There is a lot of overlap with the problem of code deobfuscation in general, even though here the obfuscation is by accident (poor compiler) rather than by design as with code obfuzzers. Similar problems are bound to crop up more and more, with the new crop of compilers which create huge binaries bloated by excessive inlining and unrolling. One side effect - compounded by global register allocation and optimisation (LTCG) - is that such binaries can become near unFLIRTable with IDA's current technology. That increases our analysis workload and makes removal of noise even more important.\n",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "In this particular case, hints regarding semantics and structure of the code can be derived from the extensive Delphi/VCL RTTI info. There some IDA plugins/scripts for this, and a slew of other tools like DeDe (see stackoverflow.com/questions/335104/â€¦).\n",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "Related topic: Translation of machinecode into LLVM IR (disassembly / reassembly of X86_64. X86. ARM into LLVM bitcode)\n",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "Related paper: Enabling Sophisticated Analyses of x86 Binaries with RevGen and related StackOverflow topic the source code of revgen tool including info on how to git the source code.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'd suggest to look to mcsema project.\nIt translates x86 into LLVM intermediate representation and is able to compile the code back with changes. Once the code is translated to intermediate representation of LLVM it can be optimized by already existing LLVM optimizations.\n",
            "votes": "2",
            "user": "w s",
            "time": "Jan 6, 2015 at 8:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}