{
    "title": "Looking for exported symbols in a DLL with objdump?",
    "link": "https://reverseengineering.stackexchange.com/questions/3101/looking-for-exported-symbols-in-a-dll-with-objdump",
    "content": "I am a man full of contradictions, I am using Unix and, yet, I want to analyze a Microsoft Windows DLL.\nUsually, when looking for symbols in a dynamic or static library in the ELF World, one can either use <pre><code>nm</code></pre> or <pre><code>readelf</code></pre> or even <pre><code>objdump</code></pre>. Here is an example with <pre><code>objdump</code></pre>:\n<pre><code>$ objdump -tT /usr/lib/libcdt.so\n\n/usr/lib/libcdt.so:     file format elf64-x86-64\n\nSYMBOL TABLE:\nno symbols\n\nDYNAMIC SYMBOL TABLE:\n0000000000000cc8 l    d  .init  0000000000000000              .init\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 free\n0000000000000000  w   D  *UND*  0000000000000000              _ITM_deregisterTMCloneTable\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 memcmp\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 strcmp\n0000000000000000  w   D  *UND*  0000000000000000              __gmon_start__\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 malloc\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 realloc\n0000000000000000  w   D  *UND*  0000000000000000              _Jv_RegisterClasses\n0000000000000000  w   D  *UND*  0000000000000000              _ITM_registerTMCloneTable\n0000000000000000  w   DF *UND*  0000000000000000  GLIBC_2.2.5 __cxa_finalize\n0000000000000ec0 g    DF .text  0000000000000097  Base        dtclose\n0000000000204af8 g    DO .data  0000000000000008  Base        Dtorder\n0000000000204af0 g    DO .data  0000000000000008  Base        Dttree\n... cut ...\n</code></pre>\nSo, we have all exported function name from reading this dynamic library. But, lets try it with a DLL:\n<pre><code>$ objdump -tT SE_U20i.dll \n\nSE_U20i.dll:     file format pei-i386\n\nobjdump: SE_U20i.dll: not a dynamic object\nSYMBOL TABLE:\nno symbols\n\nDYNAMIC SYMBOL TABLE:\nno symbols\n</code></pre>\nAs you see, <pre><code>objdump</code></pre> fail to extract the exported symbols from the DLL (and so do <pre><code>nm</code></pre>). But, if I can see a few thing more if I do:\n<pre><code>$ objdump -p SE_U20i.dll\n\nSE_U20i.dll:     file format pei-i386\n\nCharacteristics 0xa18e\n    executable\n    line numbers stripped\n    symbols stripped\n    little endian\n    32 bit words\n    DLL\n    big endian\n\n... clip ...\n\nThere is an export table in .edata at 0x658000\n\nThe Export Tables (interpreted .edata section contents)\n\nExport Flags                    0\nTime/Date stamp                 0\nMajor/Minor                     0/0\nName                            0025803c SE_U20i.dll\nOrdinal Base                    1\nNumber in:\n    Export Address Table            00000002\n    [Name Pointer/Ordinal] Table    00000002\nTable Addresses\n    Export Address Table            00258028\n    Name Pointer Table              00258030\n    Ordinal Table                   00258038\n\nExport Address Table -- Ordinal Base 1\n    [   0] +base[   1] 23467c Export RVA\n    [   1] +base[   2] 233254 Export RVA\n\n[Ordinal/Name Pointer] Table\n    [   0] DoResurrection\n    [   1] Initialize\n\n... clip ...\n</code></pre>\nSo, the export table seems to be what we are looking for (not sure about it). But it is drown among a lot of other information (the option <pre><code>-p</code></pre> display really a LOT of lines).\nSo, first, is the export table what I am looking for to know what are the functions and variables that exported by the DLL ?\nSecond, why did <pre><code>objdump</code></pre> present differently the exported symbols in the case of ELF and PE ? (I guess there is some technical differences between exported symbols in ELF and PE and that confusing both would be extremely misleading, but I would like to know in what they differ).\n",
    "votes": "15",
    "answers": 1,
    "views": "32k",
    "tags": [
        "disassembly",
        "dll",
        "objdump"
    ],
    "user": "perror",
    "time": "Nov 28, 2013 at 18:54",
    "comments": [
        {
            "user": "Ben Voigt",
            "text": "Cross-site duplicate, answer of <pre><code>winedump</code></pre> is given here: stackoverflow.com/a/32310685/103167\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The surprising part for me is <pre><code>objdump</code></pre> can recognize anything in a PE file. According to Wikipedia,\n\n.. PE is a modified version of the Unix COFF file format. PE/COFF is an alternative term in Windows development.\n\nso apparently there is just enough overlap in the headers to make it work (at least partially). The basic design of one is clearly based on the other, but after that they evolved separately. Finding the exact differences at this point in time might well be a pure academical exercise.\nYes: in a DLL, the export directory is what you are looking for. Here is a screen grab from Dependency Walker inspecting <pre><code>comctl32.dll</code></pre> (using VirtualBox 'cause I'm on a Mac):\n\nThe field \"E^\" lists the exported function names and other interesting details.\nIf you are in to Python: <pre><code>pefile</code></pre> has been mentioned as a library that can access PE parts, but then again PE has been so long around there is no end to good descriptions of all the gory low level details of all its headers and structures. Last time I felt inspecting some Windows program, I used these descriptions to write a full set of PE import/export C routines from scratch (.. again, I should add -- this way I can have return it the exact data I want in exactly the required format).\nIDA Pro seems to be the utility of choice for most disassembling jobs, and last time I used that it did a good job of loading both Import and Export directories, although it didn't provide a concise list of all functions.\n",
            "votes": "8",
            "user": "Jongware",
            "time": "Nov 28, 2013 at 22:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Actually, I do not have the \"usual\" binutils package. I rebuild it with all the targets. That may explain why <code>objdump</code> can recognize a few things in PE files. But, the support for PE is really minimalistic. Anyway, thanks a lot for your answer. It gave me a lot of starting points to work with !</span>",
                    "time": null
                }
            ]
        }
    ]
}