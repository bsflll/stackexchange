{
    "title": "Stack variable information removed in IDA pro (free version)?",
    "link": "https://reverseengineering.stackexchange.com/questions/14043/stack-variable-information-removed-in-ida-pro-free-version",
    "content": "I'm using the IDApro free version and I was wondering why sometimes there could be a instruction like...\n<pre><code>mov [esp + 1140h + var_1234], ebx\n</code></pre>\nand if you click inside the bracket, and hit the letter K (Stands for the stack variable view)\nit can become something like \n<pre><code>mov [esp], ebx\n</code></pre>\nor \n<pre><code>mov [esp+4], ebx\n</code></pre>\nWhy is there a huge jump from 1140h to suddenly nothing? What is happening here?\nThank you in advance.\n",
    "votes": "2",
    "answers": 1,
    "views": "667",
    "tags": [
        "ida",
        "stack",
        "stack-variables"
    ],
    "user": "Arrow",
    "time": "Nov 25, 2016 at 7:06",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "We'd need to see a bigger piece of the function to tell you the reason (most likely the ESP was adjusted by 1140 or a similar amount).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "IDA declares local variables as var_XXX at the start of function\nIn the paste below var_108 is declared as dword ptr -108h\nSo 0x10c - 108 = 4 \nIf You hit K \nida would show you \n<pre><code>.text:0040115C                 lea     eax, [esp+4]\n</code></pre>\nIf I  find it confusing and prefer [esp+4] to [esp + x + (-y) ] I use the script in my answer to this question\nhttps://stackoverflow.com/questions/23199403/differences-in-ollydbg-and-ida-pro-for-movsx-edx-byte-ptr-especx8-command/23604013#23604013\n<pre><code>.text:00401150 sub_401150      proc near               ; CODE XREF: sub_4011BC+53p\n.text:00401150\n.text:00401150 var_108         = dword ptr -108h\n.text:00401150 arg_0           = dword ptr  8\n.text:00401150\n.text:00401150                 push    ebx\n.text:00401151                 add     esp, 0FFFFFEF8h\n.text:00401157                 push    105h\n.text:0040115C                 lea     eax, [esp+10Ch+var_108]\n</code></pre>\nAs RedLexus commented there is a reason why the local vars are negative \nwhen you push arguments and call a function  the stack layout will be like this \n<pre><code>esp+0x00 -> return addrss\nesp+0x04 _. arguments that were pushed follows from here\n</code></pre>\nevery thing that are negative like\n<pre><code>esp-0x4 upto stack top address viz esp - 0xxxx</code></pre> are utilizable by the function to store temporary variables that are specific only in the scope of function  \nthat is if you have a function \n<pre><code>rettype calling convention somefunction (args 1.2,....,n)\n{\nlocal vars \nchar foo[0x100] \nulong blah\nint bar;\nfunction body follows\n\n}\n</code></pre>\nthe compiler/assembler would theoretically provide space for int bar at esp -0x108\n",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}