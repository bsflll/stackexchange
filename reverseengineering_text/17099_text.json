{
    "title": "Entry point for STM32 firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/17099/entry-point-for-stm32-firmware",
    "content": "I'm trying to disassemble a firmware for a DIY project, open hardware but closed firmware.\nMy question is how to initialize the disassembler properly (Hopper Disassembler).\nThe values I try to figure out are the ones shown here:\n\nFrom what I know, the processor is a STM32F100C8, ARM Cortex-M3, 64Kbytes Flash, 8Kbytes RAM. The BOOT0 pin is tied low, so I know it's booting from main flash memory:\n\nBoot from main Flash memory: the main Flash memory is aliased in the\n  boot memory   space (0x0000 0000), but still accessible from its\n  original memory space (0x800 0000).   In other words, the Flash memory\n  contents can be accessed starting from address   0x0000 0000 or 0x800\n  0000.\n\nThe startup sequence is as follows:\n\nThe CPU fetches the top-of-stack value from address 0x0000 0000,\n  then   starts code execution from the boot memory starting from 0x0000\n  0004\n\nI converted the .hex file to a .bin file using <pre><code>arm-none-eabi-objcopy</code></pre> and found:\n<pre><code>0x0000 0000  |  10050020 (Stack pointer) \n0x0000 0004  |  05A90008 (ResetHandler)\n</code></pre>\nWhat I don't understand are the memory addresses. \nThe stack pointer is too large to be a relative offset (only 8K RAM) and too small to point into SRAM (starting at 0x2000 0000).\nThe reset handler is also too large to be a relative offset (only 64k flash) and too small to point to main flash memory (starting at 0x800 0000).\nHow do I figure out the proper base address and entry point?\nPS: The schematics and firmware for the DIY project can be found here\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "firmware",
        "arm",
        "hopper",
        "entry-point"
    ],
    "user": "sled",
    "time": "Jan 2, 2018 at 14:13",
    "comments": [],
    "answers_data": [
        {
            "content": "The values are in little-endian I believe so the stack pointer is at 0x20000510 and the reset vector is 0x0800a905.\n",
            "votes": "4",
            "user": "cimarron",
            "time": "Jan 2, 2018 at 17:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sled",
                    "text": "<span class=\"comment-copy\">doh! how could I miss that!</span>",
                    "time": null
                }
            ]
        }
    ]
}