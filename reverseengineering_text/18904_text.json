{
    "title": "How do I tell OllyDbg where my source code is?",
    "link": "https://reverseengineering.stackexchange.com/questions/18904/how-do-i-tell-ollydbg-where-my-source-code-is",
    "content": "I am aware of this question, but I don't understand the only answer given.\nHow do I tell OllyDbg where the source code is when I have no PDB file (debug symbols) available?\n",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ollydbg"
    ],
    "user": "Mawg",
    "time": "Jul 26, 2018 at 10:43",
    "comments": [
        {
            "user": "blabb",
            "text": "i just commented in the linked Q  before seeing this question so to reiterate you cant tell any debugger to use source without having debug symbol information with sourceline information included (pdb for windows compilers and dwarf for gcc compilers)\n",
            "time": null
        },
        {
            "user": "Mawg",
            "text": "Ah, I think I see. So, I would somehow have to convince Vectorcast, which creates the .EXE to do so and also generate a .PDB? Feel free to post that as an answer, and I will accept it (and, possibly, open another question elsewhere asking how to do so). Thanks\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You cannot tell Ollydbg or for that matter any debugger where source code is \nwithout having Debug Information. \nThe Source Line information is available only in the Debug Information File. \n\nwith msvc compiler chain  it is Program Database File aka PDB\nwith gcc compiler chains it is called dwarf  \n\nAs far as I know gcc when built with -g option embeds the Debug Information inside the Executable itself  (you may need strip to strip the debug info from the binary).\nBut msvc with /Zi switch  always creates a separate pdb file. You can use the binplace or pdbcopy utility to selectively strip Debug Information from this pdb file.\nI googled vectorcast and it seems to be a software testing suite and its site says it is compatible with MSVC tool chain up to Visual Studio 2013. \nDebuggers Supported by Vectorcast\n",
            "votes": "4",
            "user": "blabb",
            "time": "Jan 17, 2019 at 15:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mawg",
                    "text": "<span class=\"comment-copy\">Thanks for that. Vectorcast comes with some MinGW binaries, including gdb, and allows us to invoke the command line version of gdb. But, when I start Ollydbg and load an .exe, I dont see any source :-(</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">You can try the cv2pdb tool to extract a PDF from a mingw executable with symbols.</span>",
                    "time": null
                },
                {
                    "user": "Mawg",
                    "text": "<span class=\"comment-copy\">I don't see either <code>*.pdb</code> or <code>*.dwarf</code> :-(  Maybe I ought to ask a question about that? (not necessarily here)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "OllDbg is a Windows tool and thus using a windows library <pre><code>dbghelp.dll</code></pre> to do the debugging work. You can tell that by listing Olly's dlls:\n\nAnd <pre><code>dbghelp.dll</code></pre> uses symbol files to link the binary information with the source code.\nThus you tell OllyDbg where the source code is by using the PDB file. PDB is what links your binary file with your source code.\nThe following excerpt still holds - Specify symbol (.pdb) and source files in the Visual Studio debugger:\n\nA program database (.pdb) file, also called a symbol file, maps the identifiers that you create in source code for classes, methods, and other code to the identifiers that are used in the compiled executables of your project. The .pdb file also maps the statements in the source code to the execution instructions in the executables. The debugger uses this information to determine two key pieces of information:\n\nName of the source file and line number to be displayed in the Visual Studio IDE\nLocation in the executable to stop at when you set a breakpoint\n\nA symbol file also contains the original location of the source files, and optionally, the location of a source server where the source files can be retrieved from.\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Jul 27, 2018 at 5:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@downvoters: If you find this answer lacking or inaccurate (as it appears some people do, seeing the downvotes) please take the time to mention or describe the issues identified. This will help this answerer and future answers be more accurate and useful.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">updated to include info why PDB is the answer here</span>",
                    "time": null
                },
                {
                    "user": "Mawg",
                    "text": "<span class=\"comment-copy\">I don't see a <code>*.pdb </code> :-(</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@Mawg pdb should be provided with the exe</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@Mawg I’m pretty sure in case of gdb symbols are in the binary</span>",
                    "time": null
                }
            ]
        }
    ]
}