{
    "title": "How to analyse the communication between a WebApp loaded with awesomium and the native program?",
    "link": "https://reverseengineering.stackexchange.com/questions/3878/how-to-analyse-the-communication-between-a-webapp-loaded-with-awesomium-and-the",
    "content": "I have a Windows program that uses awesomium to display a WebApp. This WebApp communicates in some way with the client program through some native calls. I found references to <pre><code>window.externalHost</code></pre> and <pre><code>window.native</code></pre> in the JS source, but it's build with YUI and has tens of thousand lines of code and single character variables and I can't quite figure out what exactly they are doing (static analysis).\nI have injected Javascript into the WebApp to check those two objects:\n<pre><code>try {\n    document.write(JSON.stringify(window.externalHost, null, 4))\n} catch (err) {\n    document.write(err)\n}\n</code></pre>\nBut <pre><code>window.externalHost</code></pre> is <pre><code>undefined</code></pre> and <pre><code>window.native</code></pre> is <pre><code>{}</code></pre>.\nSo my questions are:\n\nHow are native calls usually set up? \nWhat interfaces do exist and how are they used? (Both directions)\nCan I \"detour\"/\"intercept\" native calls to see what they are sending?\nAre there any remote JS debug projects which I could inject to dynamically debug the complex WebApp?\n\n\nupdate 1: I am confident that it uses <pre><code>window.native</code></pre>. Because of this Object <pre><code>{}</code></pre>. It seems likely that the communication is not implemented as <pre><code>window.externalHost.postMessage()</code></pre> based on what I have read on the awesomium wiki.\nI now try to capture what methods are called on it. My idea was to overwrite <pre><code>window.onerror</code></pre> to capture all errors and set <pre><code>window.native = undefined;</code></pre> to capture exceptions like <pre><code>Cannot call aNativeCall() on undefined</code></pre>. Unfortunately it seems that <pre><code>windows.native</code></pre> can't be overwritten - it doesn't stay undefined.\nAny other ideas?\n\nupdate 2:\nI came up with this javascript code to check some interesting Objects like <pre><code>window.external</code></pre>, etc...\n<pre><code>obj = ['external', 'externalHost', 'native', 'Y', ['Y','native'],['Y','Native'], ['Y','external'], ['Y','externalHost']];\nfor(i=0; i< obj.length; ++i) {\n    try {\n\n        if(obj[i] instanceof Array) {\n            var tmp = window[obj[i][0]];\n            for(j=1; j<obj[i].length; ++j) {\n                tmp = tmp[obj[i][j]]\n            }\n            document.write(obj[i]+\" | <b>\"+Object.getOwnPropertyNames(tmp)+\"</b>\n\");\n        } else {\n            document.write(obj[i]+\" | <b>\"+Object.getOwnPropertyNames(window[obj[i]])+\"</b>\n\");\n        }\n\n    } catch(err) {\n        document.write(obj[i]+\" | <i>Error: \"+err+\"</i>\n\");\n    }\n}\n</code></pre>\nIt became slowly more clear that it has to be <pre><code>window.native</code></pre>. This object has the following properties: 'on','isNative','scale','Emitter','call','register','_ready'\nWhen I try to call <pre><code>window.native.call()</code></pre> the native program crashes. And the debug information shows that it crashed in a <pre><code>ProcessRequest</code></pre> function. So I found the right interface.\nI now need to find out how exactly this interface is used. Unfortunately I can't overwrite <pre><code>window.native.call = function() { ... }</code></pre> to log the calls.\nAnybody another idea?\n",
    "votes": "2",
    "answers": 0,
    "views": "929",
    "tags": [
        "javascript"
    ],
    "user": "samuirai",
    "time": "Mar 16, 2014 at 2:49",
    "comments": [],
    "answers_data": []
}