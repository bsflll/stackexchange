{
    "title": "custom virtual machine protection",
    "link": "https://reverseengineering.stackexchange.com/questions/21375/custom-virtual-machine-protection",
    "content": "How someone would go to reverse engineer a sample protected with a virtual machine? The problem is that it's not <pre><code>opcode</code></pre> anymore it's <pre><code>bytecode</code></pre> which I don't have any idea about because it's a private virtual machine so how you would go about solving this problem taking into account that <pre><code>ida pro</code></pre> and other tools doesn't work, some of you might say find the <pre><code>OEP</code></pre> will that's possible if it is a simple packer that unpack it self completely at the first hit but it's not the case in here.\nI'm looking for ideas on how to approach this problem.\n",
    "votes": "3",
    "answers": 1,
    "views": "557",
    "tags": [
        "debugging",
        "binary-analysis",
        "decompilation",
        "unpacking",
        "virtual-machines"
    ],
    "user": "zerocool",
    "time": "May 3, 2020 at 0:15",
    "comments": [
        {
            "user": "auspicious99",
            "text": "If you're using IDA Pro, reverseengineering.stackexchange.com/questions/3969/… has a pointer to a plugin that may help.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When a sample is protected with a VM, the only way to reverse engineer the code itself is to start with understanding the VM.\nFrom what I've found, a lot of VMs have two things in common:\n\nThey are not complex (sometimes the bytecode instructions themselves are just decoded into x86 instructions - usually some VM instructions as well) Complexity in a VM very quickly degrades performance.\nThey are usually quite obfuscated\n\nAside from some generic solutions you could try (I.e. VMHunt) you will generally need to reverse engineer the VM and understand how it is decoding bytecode instructions - and what each VM instruction does. Then, you can use that knowledge to transform bytecode back into its original form - at which point you can analyze it in IDA Pro etc... Usually, the most difficult part is understanding the VM despite obfuscation.\nIt can be quite a lengthy / involved process, I have worked with code virtualizers before and encourage you to start by reading some of my work on x86virt:\nDevirtualizer Source Code: https://github.com/JeremyWildsmith/x86devirt\nArticle Explaining Process: http://jeremywildsmith.com/?blog%2Fx86devirt\n",
            "votes": "3",
            "user": "Jeremy",
            "time": "Jun 1, 2019 at 9:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "zerocool",
                    "text": "<span class=\"comment-copy\">okey I will take a look at it</span>",
                    "time": null
                },
                {
                    "user": "auspicious99",
                    "text": "<span class=\"comment-copy\">Hi @Jeremy , Thanks for the answer. Is your blog URL no longer working? I couldn't see the article explaining the process.</span>",
                    "time": null
                },
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">Hello @auspicious99, The domain is currently down, for now, you can use the IP: <a href=\"http://206.189.209.209/?blog%2Fx86devirt\" rel=\"nofollow noreferrer\">206.189.209.209/?blog%2Fx86devirt</a></span>",
                    "time": null
                },
                {
                    "user": "auspicious99",
                    "text": "<span class=\"comment-copy\">Thanks @Jeremy , that works. Looks impressive. Will need to dig through it soon. By the way, are you familiar with Ghidra? We were trying to reverse engineer VM obfuscated code with Ghidra. I've asked a question at <a href=\"https://reverseengineering.stackexchange.com/questions/24896/how-to-use-ghidra-to-work-with-vm-obfuscated-binaries\" title=\"how to use ghidra to work with vm obfuscated binaries\">reverseengineering.stackexchange.com/questions/24896/…</a></span>",
                    "time": null
                }
            ]
        }
    ]
}